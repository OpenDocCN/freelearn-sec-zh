- en: 'Chapter 8: Improving the Security of Software'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章：提高软件安全性
- en: Software has enabled organizations around the world to increase their productivity
    to unforeseen levels of efficiency, helping to automate previously manual and
    menial tasks. By looking at your organization's software assets (and updating
    your risk register as you do it), you have become more and more aware that nearly
    every business process is aided by at least one software solution, and that the
    more resilient, secure, and available the software is, the more benefit is seen
    by the organization.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 软件帮助全球各地的组织将生产力提升到前所未有的效率水平，帮助自动化以前需要人工完成的琐事。通过查看组织的软件资产（并在此过程中更新风险登记册），你会越来越意识到，几乎每一个商业流程都依赖于至少一个软件解决方案，而软件的韧性、安全性和可用性越高，组织获得的收益就越大。
- en: Some of your software has probably been developed in-house, and other software
    has been purchased or licensed from third parties. These systems often present
    huge attack surfaces, with many moving parts that are ready to be exploited, and
    since they process confidential and sensitive information and store business-critical
    data, unauthorized access to (or destruction of) these systems can lead to either
    permanent loss of critical data or the loss of confidentiality or integrity of
    intellectual property, company secrets, and customer data. Furthermore, these
    breaches can lead to colossal fines from regulators, adding insult to injury.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你的一些软件可能是内部开发的，其他软件则是从第三方购买或许可的。这些系统通常存在巨大的攻击面，拥有许多易被利用的活动组件，且由于它们处理机密和敏感信息并存储业务关键数据，未经授权访问（或摧毁）这些系统可能导致关键数据的永久丢失，或者导致知识产权、公司机密和客户数据的机密性或完整性丧失。此外，这些安全漏洞可能导致监管机构的巨额罚款，雪上加霜。
- en: The terrifying thing is, even with all of the reasons to care that I've just
    listed, the procurement, development, and use of various software systems are
    usually undertaken with absolutely zero security-focused oversight. This is exactly
    why understanding and enforcing improved software security is crucial in order
    to ensure your organization mitigates the risk presented by the software it uses.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 可怕的事情是，即使我刚刚列出了所有关心的理由，各种软件系统的采购、开发和使用通常都没有任何以安全为重点的监督。这正是为什么理解并执行改进的软件安全至关重要，以确保你的组织能够减轻使用软件带来的风险。
- en: 'In this chapter, I''m going to delve into some of the topics that can help
    you ensure a higher standard for software security in your organization. This
    includes topics such as the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我将深入探讨一些能够帮助你确保组织中软件安全标准更高的话题。包括以下几个主题：
- en: Exploring software security paradigms
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索软件安全范式
- en: Understanding the secure development life cycle
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解安全开发生命周期
- en: Utilizing the OWASP Top 10 Proactive Controls
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用OWASP十大主动控制
- en: Assessing software security
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估软件安全性
- en: Overall, what we want to learn from this chapter is how to establish requirements
    for software, regardless of whether it has been developed by a third party or
    an in-house development team. I'll cover the methods we can use to understand
    the risk profile for software systems developed by a vendor, how to reduce the
    likelihood of vulnerabilities and errors in your organization's in-house development
    activities, and methods to mitigate against security risks, focusing on the CIA
    triad.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，我们希望从这一章中学到的是，如何为软件建立需求，无论它是由第三方开发还是由内部开发团队开发。我将讨论我们如何理解由供应商开发的软件系统的风险特征，如何减少在组织内部开发活动中出现漏洞和错误的可能性，以及如何针对安全风险采取措施，重点关注CIA三元组。
- en: Without further ado, let's proceed on with this chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 话不多说，让我们继续进入这一章。
- en: Exploring software security paradigms
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索软件安全范式
- en: 'I''d like to take you on a trip down memory lane for a moment, and remember
    April 2014, an important moment in the general history of InfoSec; the world was
    blindsided by the disclosure of the *CVE-2014-0160* vulnerability, given the moniker
    of **Heartbleed**. Now, when I use the term *the world*, I mean it. *Heartbleed*
    was the *Jaws* of software security blockbusters, getting a website of its own
    (heartbleed.com), and even its own logo:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我想让你回想一下2014年4月，这在信息安全的历史中是一个重要时刻；全世界都被*CVE-2014-0160*漏洞的披露所震惊，这个漏洞被冠以**Heartbleed**的名字。现在，当我说“*全世界*”时，我是认真的。*Heartbleed*
    就像是软件安全大片中的*大白鲨*，它甚至有了自己的网站（heartbleed.com），甚至还有自己的logo：
- en: '![Figure 8.1 – The Heartbleed vulnerability''s logo'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.1 – Heartbleed漏洞的标志'
- en: '](img/B16611_08_001.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16611_08_001.jpg)'
- en: Figure 8.1 – The Heartbleed vulnerability's logo
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1 – Heartbleed漏洞的标志
- en: 'In the disclosure was information about how the **OpenSSL cryptography library**
    contained a vulnerability related to a **buffer over-read**, allowing a malicious
    actor to access cryptographic keys and login credentials, along with various other
    pieces of confidential information. It sounds bad, but it gets worse: the OpenSSL
    cryptography library is used in the **OpenSSL version of the TLS protocol**, widely
    used globally for securing data in transit, pretty much everywhere. To put it
    plainly: over half of the top 1 million most-popular **TLS-/HTTPS-protected sites**
    were affected and able to be exploited.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 披露的信息中提到，**OpenSSL加密库**存在一个与**缓冲区过度读取**相关的漏洞，这使得恶意行为者能够访问加密密钥和登录凭证，以及其他各种机密信息。听起来很糟糕，但情况更糟：**OpenSSL版本的TLS协议**中也使用了OpenSSL加密库，这种协议广泛用于全球范围内保护数据传输的安全，几乎无处不在。简单来说：全球排名前100万的**TLS/HTTPS保护网站**中超过一半受到了影响，并且容易受到攻击。
- en: Even though a fix was released for Heartbleed on the same day as the disclosure,
    it didn't prevent devices such as firewalls, Android phones, and other trusted
    hardware, as well as software and websites, from being left vulnerable until the
    patches were implemented and updates were rolled out to align with the most recent
    version.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在披露的同一天发布了Heartbleed漏洞的修复程序，但这并没有阻止设备（如防火墙、安卓手机和其他受信硬件）、软件以及网站在补丁被应用并且更新与最新版本对齐之前，继续处于脆弱状态。
- en: 'Furthermore, let''s be clear: the vulnerability had existed in the code since
    2011; we know this because it was viewable to anybody who cared to look through
    and read the source code. This was as a result of the fact that OpenSSL was software
    created in an **open source** development context. Open source means that the
    source code of the software is freely available to be read, modified, and redistributed.
    A perceived advantage of the *open source software movement* is the idea that
    transparent software prevents security-through-obscurity among other vulnerabilities
    in the source code, as it would be discovered by anybody who cares to look. Unfortunately,
    in the case of OpenSSL''s cryptography library, it seems as though either nobody
    noticed or nobody was willing to shout about the vulnerability until 3 years later.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，让我们明确一点：这个漏洞自2011年起就在代码中存在；我们知道这一点，因为任何愿意查看和阅读源代码的人都能看到它。这是因为OpenSSL是一个**开源**开发的程序。开源意味着软件的源代码可以自由阅读、修改和重新发布。*开源软件运动*的一个被认为的优势是透明的软件能够防止通过模糊化安全问题以及源代码中的其他漏洞，因为任何愿意查看的人都会发现这些问题。不幸的是，在OpenSSL的加密库的案例中，似乎要么没有人注意到，要么没有人愿意大声呼喊这个漏洞，直到3年后。
- en: That might seem strange, right? Wrong. Up until recently, it's been the default.
    Security has been an afterthought to any organization looking to create new features
    and roll out new products, but as time has gone on, with blockbuster-style disclosures
    such as Heartbleed entering into the lexicon of the average business owner and
    IT professional, we've seen a paradigm shift toward giving security a bit more
    consideration.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这听起来有些奇怪，对吧？错了。直到最近，这一直是默认情况。安全性一直是任何寻求开发新功能和推出新产品的组织事后的考虑，但随着时间的推移，随着Heartbleed等重磅披露事件进入了普通商业主和IT专业人士的词汇中，我们看到了一个向更加重视安全的范式转变。
- en: So, how can we ensure we avoid implementing vulnerable software into our organization,
    regardless of whether it's a vendor-created productivity suite, an open source
    cryptography library, or a tool developed by an in-house team for your employees?
    You're not going to catch every issue, so it's important to manage your expectations
    on the matter. Just like with anything in information security, it's about risk
    management and setting up the appropriate policies and procedures to ensure the
    necessary steps have been taken, in line with the value of the assets in question.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何确保在组织中避免实施存在漏洞的软件呢？无论是供应商创建的生产力套件，还是开源的加密库，或是为员工开发的内部工具，你不可能发现所有问题，因此重要的是要管理好自己的预期。就像信息安全中的任何问题一样，这关乎风险管理，并且需要制定适当的政策和程序，确保采取了必要的步骤，并与相关资产的价值相一致。
- en: To begin with, let's look at an idea that can be applied to more than just InfoSec,
    to any time we buy anything.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们来看一个可以应用于不仅仅是信息安全的概念，而是任何我们购买东西时都能用到的原则。
- en: Buyer beware
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 买者自慎
- en: 'Have you ever heard the term *let the buyer beware*? I''m betting you''ve heard
    the Latin version, *caveat emptor*, right? How about we use this opportunity to
    do what every person reading this chapter focusing on software security was hoping
    for and take a quick dip into Latin terms found in contract law:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否听过*让买家警惕*这个术语？我敢打赌你听过拉丁文版本，*caveat emptor*，对吧？怎样，我们不妨借此机会做个快速的拉丁术语学习，来探讨一下合同法中常见的拉丁术语：
- en: Caveat emptor, quia ignorare non debuit quod jus alienum emit
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 买者自慎，因为他不应对所购买的财产的性质一无所知
- en: 'Loosely translated to English, this means the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 它的大致英文翻译如下：
- en: Let a purchaser beware, for he ought not to be ignorant of the nature of the
    property which he is buying from another party.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让买家警惕，因为他不应对他从其他方购买的财产的性质一无所知。
- en: I'm surprised it's caught on so well, to be honest. Usually, if you need to
    take a breath in the middle of reciting an adage, it doesn't really last. Despite
    being quite long-winded, this idea has stood the test of time and must be considered
    when procuring new software.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 说实话，我很惊讶它能够传播得这么广。通常情况下，如果你在背诵格言时需要停顿一下，它就不会长久存在。尽管它相当冗长，这个想法经得起时间的考验，在采购新软件时必须考虑到这一点。
- en: It's up to the buyer to perform due diligence on software systems that are going
    to be utilized in their estate. It's your responsibility to ensure your organization
    has undertaken that due diligence appropriately and stores that information for
    future use in the event of needing to prove to regulators or auditors that the
    appropriate precautions were taken and that due care was applied in the process.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由买方负责对将要在其组织中使用的软件系统进行尽职调查。你有责任确保你的组织已经适当地进行了尽职调查，并将相关信息保存下来，以备将来需要向监管机构或审计员证明已采取适当的预防措施并在过程中履行了必要的谨慎时使用。
- en: '"But how?", you ask. "How can I make sure?".'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '"但是怎么做？"你问。"我怎么能确保呢？"'
- en: Legal documentation
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 法律文档
- en: '"Oh great," you say after reading the heading of this section, "he''s going
    to talk about paperwork next." Well yes, I am, unfortunately.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '"哦，太好了，"你在阅读到这一节标题后说，"他接下来会谈论文件工作。"嗯，是的，遗憾的是，我确实会。'
- en: The fact of the matter is, you can't be 100% certain that the software you've
    purchased has been developed securely. You can, however, try to implement terms
    into the contractual agreement you have with the vendor to ensure they understand
    your requirements and are responsible for ensuring their developed solutions are
    created with security in mind.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 事实是，你不能百分百确定你购买的软件是否在安全性上得到了开发。然而，你可以尝试在与供应商的合同协议中加入条款，确保他们理解你的要求，并负责确保他们开发的解决方案是在安全的前提下构建的。
- en: Contracts that define *liabilities* associated with the vendor are a form of
    risk mitigation. What I mean is that in the event of a breach that leads to the
    disclosure of either your organization's confidential information or sensitive
    information related to individuals, are you able to be reimbursed by the vendor
    based on the level of loss your organization faces from fines and reputational
    damage?
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 定义*责任*的合同是风险缓解的一种形式。我的意思是，在发生泄露事件，导致你组织的机密信息或与个人相关的敏感信息被泄露时，你是否能够根据你组织面临的罚款和声誉损害的损失程度，要求供应商进行赔偿？
- en: Whether or not the vendor accepts those terms depends on various factors, including
    the nature of the terms, the size of the vendor, the size of your organization,
    how big of a customer you are for them, and so on.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 是否接受这些条款取决于多种因素，包括条款的性质、供应商的规模、你组织的规模、你对他们的客户价值等。
- en: Sometimes, you'll just need to implement other types of mitigation and accept
    that the vendor isn't accepting liability in the event of a breach, regardless
    of whether a backdoor or malware was introduced from their side. It's your responsibility
    to keep the agreements documented and reference them when you're performing risk
    assessments, both before and after the software has been implemented.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，你只需要实施其他类型的缓解措施，并接受供应商在发生泄露事件时不承担责任，无论是否是由于他们一方引入了后门或恶意软件。你有责任将这些协议文件化，并在进行风险评估时，尤其是软件实施前后，引用它们。
- en: Furthermore, the ideologies relating to InfoSec for your assets that we've covered
    in this book still stand. We must allow least-privilege access to the software,
    we should monitor the software's activity and how it interacts with our other
    assets, and we will continually review and assess the software's suitability and
    risks over its entire life cycle in our organization.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，本书中我们讨论的关于信息安全理念仍然适用。我们必须允许软件的最小权限访问，我们应该监控软件的活动以及它如何与其他资产互动，并且在软件的整个生命周期内持续审查和评估它的适用性和风险。
- en: Speaking of life cycles, I figure we should discuss the idea surrounding the
    **Secure Development Life Cycle** (**SDLC**), as knowledge surrounding this topic
    relates to both software developed by third parties and your organization's own
    undertakings in developing software.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 说到生命周期，我觉得我们应该讨论一下**安全开发生命周期**（**SDLC**）的概念，因为关于这个话题的知识既涉及第三方开发的软件，也涉及你们组织自行开发软件的工作。
- en: Understanding the secure development life cycle
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解安全开发生命周期
- en: The SDLC is all about baking security into the development of software through
    a set of processes. When you ask your vendors about their SDC, you're going to
    want to understand the methods that they are employing to ensure the software
    they're selling you is secure enough for your organization.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: SDLC的核心是通过一系列流程将安全性融入软件开发。当你向供应商询问他们的SDC时，你需要理解他们在确保他们出售的软件对你的组织足够安全时所采用的方法。
- en: 'The same company that offers the *CISSP*, known as *(ISC)²*, also offers the
    **CSSLP**, or **Certified Secure Software Lifecycle Professional**, which covers
    eight domains that you need to understand in order to pass the exam:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 提供*CISSP*认证的同一公司，名为*(ISC)²*，还提供**CSSLP**，即**认证安全软件生命周期专家**，涵盖了八个领域，你需要了解这些领域才能通过考试：
- en: Secure Software Concepts
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全软件概念
- en: Secure Software Requirements
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全软件需求
- en: Secure Software Architecture and Design
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全软件架构与设计
- en: Secure Software Implementation
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全软件实施
- en: Secure Software Testing
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全软件测试
- en: Secure Software Lifecycle Management
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全软件生命周期管理
- en: Secure Software Deployment, Operations, Maintenance
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全软件部署、运营与维护
- en: Secure Software Supply Chain
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全软件供应链
- en: Obviously, going into each of these topics in any sort of depth is going to
    occupy more than the 30-page limit I have on this chapter, and if I did so, it
    would repeat much of the concepts I've previously touched on in this book, including
    labeling the types of data or implementing the principles of least-privilege and
    separation of duties, or defense-in-depth, but it's still worthwhile to highlight
    some of the key takeaways unique to the SDLC and pique your interest for further
    investigation.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，深入讨论这些主题会超出我在本章中30页的限制，如果我这么做，很多内容会重复我在本书之前提到的概念，包括数据类型的标记或实施最小权限原则、职务分离或深度防御等，但还是值得强调一些与SDLC独特相关的关键要点，激发你进一步探究的兴趣。
- en: 'We can essentially split the SDLC into five stages, each with its own sub-groups:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将软件开发生命周期（SDLC）大致分为五个阶段，每个阶段都有其子组：
- en: Defining business and security requirements
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定业务和安全需求
- en: Designing secure software
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计安全软件
- en: Test plans for secure software
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全软件的测试计划
- en: Secure software development
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全软件开发
- en: Testing the software
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试软件
- en: 'Shall we delve briefly into each of these bullets to discuss the process at
    a slightly more detailed level? Let''s do it, but first I would like to address
    the elephant in the room: the idea that *nobody develops code this way anymore*.
    Let''s talk about the various *software development methodologies* and how they
    might work with the SLDC.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们是否可以简要探讨一下这些要点，稍微详细地讨论一下这一过程？我们来讨论，但首先我想处理一个显而易见的问题：*现在已经没有人以这种方式开发代码了*。让我们来谈谈各种*软件开发方法论*，以及它们如何与SDLC协同工作。
- en: Compatibility with various software development methodologies
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与各种软件开发方法论的兼容性
- en: Over time, the most widely chosen methods of developing software have transitioned
    from a stage-by-stage, project-managed, "release major updates twice a year" **Waterfall**
    type of approach to software development toward a more rapidly iterative approach,
    often referred to as **Agile**, where the solution is broken up into small cycles,
    attempting to deliver a working product early and improving incrementally and
    often.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，开发软件的最常用方法已经从传统的阶段性、项目管理的“每年发布两次重大更新”的**瀑布式**方法转向了更快速的迭代方法，通常称为**敏捷**方法，在这种方法中，解决方案被拆分为小的周期，试图早期交付一个可工作的产品，并且不断改进和频繁更新。
- en: 'Furthermore, there might be a split between the developer team at an organization,
    and the IT operations team, or there might be a more integrated approach to developing
    and deploying software, such as the **DevOps** approach, for example:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，组织中的开发团队和IT运维团队可能存在分隔，或者可能采用更加集成的软件开发和部署方法，比如**DevOps**方法，例如：
- en: '![Figure 8.2 – The DevOps life cycle diagram'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.2 – DevOps生命周期图'
- en: '](img/Image86712.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Image86712.jpg)'
- en: Figure 8.2 – The DevOps life cycle diagram
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 – DevOps生命周期图
- en: Regardless of which method(s) your organization develops software with (and
    there are many different styles inside those methodologies), the SDLC process
    can still be utilized and employed as a baked-in approach. Notice in the preceding
    diagram of the DevOps life cycle that it aligns with the five steps of the SDLC
    I mentioned previously, as long as you find a place to ensure you define the business
    and security requirements for the software in the planning phase!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你的组织使用哪种方法来开发软件（这些方法中有许多不同的风格），SDLC过程仍然可以作为一种内建的方法来使用。在前面展示的DevOps生命周期图中，你会发现它与我之前提到的SDLC的五个步骤是对齐的，只要你确保在规划阶段定义了软件的业务和安全需求！
- en: Okay, let's take a closer look at each of the five steps of the SDLC, starting
    with defining your business and security requirements.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们更仔细地看看SDLC的五个步骤，从定义业务和安全需求开始。
- en: Defining business and security requirements
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义业务和安全要求
- en: You see, in order for good software to be created, requirements must be defined
    at the beginning of any iteration. It rarely is, but then again, software is rarely
    what we would consider good. Inside those requirement definitions, along with
    usage scenarios and solutions, we need to ensure we define the security and privacy
    requirements for the software, and in the process of development, the software
    must be tested against those security and privacy requirements.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你看，为了创造出好的软件，需求必须在每次迭代的开始时就被明确界定。虽然这种情况很少发生，但话说回来，软件也很少是我们所认为的“好”软件。在这些需求定义中，除了使用场景和解决方案外，我们还需要确保定义软件的安全性和隐私要求，并且在开发过程中，软件必须针对这些安全性和隐私要求进行测试。
- en: Beyond that, we need to consider the **abuse cases** or *ways a malicious actor
    may misuse the software*, essentially performing **threat modeling** with consideration
    into the **attack surface**. As a result of the findings from the abuse cases,
    we need to ensure that the appropriate mitigations have been put into place (with
    expenditure in line with the level of risk) to prevent or decrease the *likelihood*
    of those attacks from being successful and find a way to reduce the *impact* if
    the attack is successful.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，我们还需要考虑**滥用案例**或*恶意行为者可能滥用软件的方式*，本质上是进行**威胁建模**，并考虑**攻击面**。根据滥用案例的发现，我们需要确保已采取适当的缓解措施（支出与风险水平相符），以防止或减少这些攻击成功的*可能性*，并找到方法减少如果攻击成功后的*影响*。
- en: I will discuss how we can do this in a more detailed fashion in the *Utilizing
    the OWASP Top Ten Proactive Controls* section.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在*《利用OWASP十大积极控制》*部分中更详细地讨论我们如何做到这一点。
- en: Designing secure software
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计安全软件
- en: With the abuse cases and requirements in place, we want to design the software
    architecture to have the appropriate controls (preventative, detective, and responsive)
    in place, and ensure the overall structure of the application and the way it interacts
    with other systems and individuals are *secure by design*.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有了滥用案例和需求后，我们希望设计软件架构，确保具备适当的控制措施（预防性、侦测性和响应性），并确保应用程序的整体结构及其与其他系统和人员的交互是*从设计上就确保安全*的。
- en: Testing plans for secure software
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全软件的测试计划
- en: Along with *unit testing*, *integration testing*, *system testing*, and *acceptance
    testing*, *security testing* must be implemented into the SDLC in order to catch
    security vulnerabilities through various methodologies, including both automated
    and manual processes.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 与*单元测试*、*集成测试*、*系统测试*和*验收测试*一起，*安全测试*必须纳入软件开发生命周期（SDLC），通过各种方法，包括自动化和手动流程，发现安全漏洞。
- en: Prior to the development of the software, we want to plan and define the tests
    that must be done in order to ensure the software development process takes these
    tests into consideration.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发之前，我们希望规划并定义必须执行的测试，以确保软件开发过程考虑到这些测试。
- en: 'The **ISO/IEC/IEEE 29119 standards** for *Software and Systems Engineering
    – Software Testing* are a set of standards comprising five different parts:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**ISO/IEC/IEEE 29119标准**适用于*软件与系统工程 - 软件测试*，这是一个包含五个不同部分的标准：'
- en: '*Part 1: Concepts and definitions*'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第一部分：概念和定义*'
- en: '*Part 2: Test concepts*'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第二部分：测试概念*'
- en: '*Part 3: Test documentation*'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第三部分：测试文档*'
- en: '*Part 4: Test techniques*'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第四部分：测试技术*'
- en: '*Part 5: Keyword-driven testing*'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第五部分：基于关键字的测试*'
- en: There was a bunch of pushback over the *29119* standard, where several groups
    claimed it's unnecessary to standardize testing. I don't think this should matter
    to you in this chapter; it's up to you to determine whether any of these ideologies
    is applicable in your organization. The bottom line is, the standard's *Part 3*
    offers template documentation examples for your test plans, and if we're following
    the SDLC, then it might make sense to lean on those rather than spending time
    reinventing the wheel.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 对*29119*标准有很多反对意见，多个小组认为标准化测试没有必要。我认为在本章中，这不应该是你的关注点；是否采纳这些理念，取决于你的组织。最重要的是，标准的*第三部分*提供了你的测试计划文档模板示例，如果我们遵循SDLC，那么依赖这些模板可能比花时间重新发明轮子更为合理。
- en: 'The templates from ISO/IEC/IEEE 29119:-3:2013 (yes, I know, what a name) cover
    the organizational-level, project-level, and dynamic test documentation you might
    like to use, including the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 来自ISO/IEC/IEEE 29119:-3:2013（是的，我知道，这个名字很长）的模板涵盖了你可能希望使用的组织级、项目级和动态测试文档，包括以下内容：
- en: '**Organizational test process documentation templates**:'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组织测试过程文档模板**：'
- en: '- *Test policy*'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- *测试政策*'
- en: '- *Organizational test strategy*'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- *组织测试策略*'
- en: '**Test management process documentation templates**:'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试管理过程文档模板**：'
- en: '- *Test plan (including a test strategy)*'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- *测试计划（包括测试策略）*'
- en: '- *Test status*'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- *测试状态*'
- en: '- *Test completion*'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- *测试完成*'
- en: '**Dynamic test process documentation templates**:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态测试过程文档模板**：'
- en: '- *Test design specification*'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- *测试设计规范*'
- en: '- *Test case specification*'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- *测试用例规范*'
- en: '- *Test procedure specification*'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- *测试过程规范*'
- en: '- *Test data requirements*'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- *测试数据要求*'
- en: '- *Test data readiness report*'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- *测试数据准备报告*'
- en: '- *Test environment requirements*'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- *测试环境要求*'
- en: '- *Test environment readiness report*'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- *测试环境准备报告*'
- en: '- *Actual results*'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- *实际结果*'
- en: '- *Test result*'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- *测试结果*'
- en: '- *Test execution log*'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- *测试执行日志*'
- en: '- *Test incident report*'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- *测试事件报告*'
- en: This means you'll have the appropriate suite of templates to help your product
    team(s) and engineering team(s) quickly and systematically document and meet the
    requirements set out for your software. If it seems like all of this process and
    documentation will get in the way of getting *actual* engineering work done, you're
    probably a software engineer.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你将拥有适当的模板集合，帮助你的产品团队和工程团队迅速且系统化地记录和满足软件所需的要求。如果这些过程和文档看起来会妨碍你进行*实际*的工程工作，那你可能是个软件工程师。
- en: With that said, I'm well aware of the complaints and concerns that are raised
    by developers in this circumstance, especially the faster we develop things and
    the more rapidly we integrate changes into our production environment. If your
    organization is utilizing these principles, then I'm not going to advise you to
    bog down your team with a bunch of paperwork.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，我非常清楚在这种情况下开发人员所提出的抱怨和顾虑，尤其是在我们开发进度加快，且更迅速地将变更集成到生产环境中的时候。如果你的组织正在使用这些原则，我不会建议你让团队被一堆文书工作拖慢进度。
- en: Our job as information security professionals is to understand the risk and
    reduce it to an acceptable level. Part of this process is ensuring that the software
    that is being created by the development team is fit for purpose and meets the
    requirements defined, and showing that without these processes in place is a difficult
    task.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 作为信息安全专业人员，我们的工作是了解风险并将其降低到可接受的水平。这个过程的一部分是确保开发团队创建的软件适合其用途，并符合定义的要求，展示没有这些过程是多么困难的任务。
- en: 'With the documentation I mentioned from ISO/IEC/IEEE 29119, we aim to do the
    following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我提到的来自ISO/IEC/IEEE 29119的文档，我们的目标是做到以下几点：
- en: '**Analyze the software**, where we specify the users, use cases, use scenarios,
    and resources utilized by the solution.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分析软件**，在此过程中我们指定用户、使用案例、使用场景以及解决方案所使用的资源。'
- en: '**Design the test strategy**, where we define the objectives for the tests
    and estimate the resources required and costs associated with the testing phase.
    We also define what is in scope and what is out of scope.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设计测试策略**，在此过程中我们定义测试的目标，并估算所需的资源和与测试阶段相关的成本。我们还定义了测试范围和不在范围内的内容。'
- en: '**Define the test criteria**, where we create a flow that defines when we stop
    testing in the event of a failure and what constitutes a successful test completion.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定义测试标准**，在此过程中我们创建一个流程，定义在失败的情况下何时停止测试，以及什么样的结果构成成功的测试完成。'
- en: '**Define the test environment**, where we specify the user and business environments
    that we will test in.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定义测试环境**，在此过程中我们指定将要进行测试的用户环境和业务环境。'
- en: '**Define the schedule**, including deadlines, estimations for each resource,
    and any blockers or dependencies that might hamper the ability to complete the
    tests.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定义进度表**，包括截止日期、每项资源的估算，以及可能妨碍测试完成的任何阻碍或依赖项。'
- en: '**Determine test deliverables**, including test results and reports, test procedure
    documentation, and release notes in the event of the software meeting the test
    requirements.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确定测试交付物**，包括测试结果和报告、测试过程文档以及在软件满足测试要求时的发布说明。'
- en: 'So, it''s not like I''m asking you to write *War and Peace* here, and if we''re
    following the *Agile* process, each small improvement can have a truly short definition
    for each of the six previously listed concepts, potentially right after the **user
    story**. The user story is a way to define software requirements to developers
    in a structured way:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这并不是让我让你写*战争与和平*，如果我们遵循*敏捷*过程，每个小的改进都可以为之前列出的六个概念提供一个非常简短的定义，可能紧随**用户故事**之后。用户故事是一种结构化的方式，用来定义软件需求并传达给开发人员：
- en: '[PRE0]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: That covers most of the first step, analyze the software, and after that, we
    can include our test objectives, resources required for the tests, acceptance
    criteria, test environment, and test schedule.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这涵盖了第一步的大部分内容，即分析软件，之后我们可以加入我们的测试目标、所需的测试资源、验收标准、测试环境和测试进度表。
- en: If errors are found, they can be solved quickly and easily in the same iteration
    or sprint.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发现错误，它们可以在同一个迭代或冲刺中迅速而轻松地解决。
- en: So, how might you want to test the software in order to ensure security vulnerabilities
    are taken into consideration and avoided?
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，你可能如何测试软件，以确保考虑并避免安全漏洞呢？
- en: I'm going to go into that, but first I'd like to talk about the process of *securing
    software development*, the next phase of the SDLC.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我将详细讲解这个内容，但首先我想谈谈*确保软件开发安全*，这是软件开发生命周期（SDLC）的下一个阶段。
- en: Securing software development
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确保软件开发安全
- en: 'In the process of developing the code, we want to ensure our developers are
    following certain ideologies related to secure code. We can create training and
    awareness programs and provide documentation on how to ensure they are following
    secure software development ideologies, including but not limited to the following:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发代码的过程中，我们希望确保开发人员遵循与安全代码相关的某些理念。我们可以创建培训和意识提升计划，并提供文档，指导他们如何确保遵循安全软件开发理念，包括但不限于以下内容：
- en: '**Input and output sanitation**, to prevent *injection* vulnerabilities and
    *denial of services* from malicious or negligent user input'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入和输出的安全处理**，以防止*注入*漏洞和*服务拒绝*攻击，这些漏洞源于恶意或疏忽的用户输入'
- en: Appropriate **error handling**, and ensuring the user isn't given too much information
    in the event of an error occurring
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适当的**错误处理**，并确保在发生错误时用户不会被提供过多信息
- en: '**Resource management** and **concurrency**, ensuring processes are scalable'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源管理**和**并发性**，确保流程是可扩展的'
- en: '**Isolation**, ensuring processes are segregated through *sandboxing*, *virtualization*,
    *containerization*, and related technological concepts'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隔离**，确保通过*沙箱*、*虚拟化*、*容器化*及相关技术概念对进程进行隔离。'
- en: '**Cryptographic control** selection and implementation, ensuring the appropriate
    protocols are implemented correctly, with cost-benefit analysis taken into consideration'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加密控制**的选择与实施，确保正确实施适当的协议，同时考虑成本效益分析。'
- en: '**Access control structures**, including ensuring *trust zones*, *least-privilege*,
    and **Role-Based Access Controls** (**RBACs**) are considered and appropriately
    applied'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**访问控制结构**，包括确保*信任区*、*最小权限*和**基于角色的访问控制**（**RBACs**）得到考虑并适当应用。'
- en: In order to avoid repeating ourselves, I think it might be more useful to cover
    these ideologies in further depth by having a look at the types of tests we may
    implement to check for well-known security flaws in software and explaining how
    those flaws can be avoided or mitigated against.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免重复，我们认为通过深入探讨可能实施的测试类型来检查软件中已知的安全漏洞，并解释如何避免或缓解这些漏洞，可能会更加有用。
- en: Testing the software
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试软件
- en: Considering we have already defined the appropriate test processes, relevant
    stakeholders, environments, and acceptance criteria, now is the time to execute
    those plans, with both automated and manual processes being undertaken to ensure
    any changes that have been made to the source code, environment, or usages of
    the software are appropriately effective, efficient, and secure.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到我们已经定义了适当的测试流程、相关的利益相关者、环境和验收标准，现在是时候执行这些计划了，既要进行自动化过程，也要进行手动过程，以确保对源代码、环境或软件使用所做的任何更改都能有效、效率高且安全。
- en: This is not to say we perform all these tests after the software has been developed.
    If we're using more rapid development methodologies, we must leverage more automated
    systems and create rapid notifications for any manual testing processes required
    in order to ensure there isn't a bottleneck at the testing phase of the SDLC.
    This *near-real-time* approach to testing new software results discovers issues
    quickly and ensures the developers are adaptive and *fail fast*, discovering their
    errors quickly and remediating before too much time has been put into a flawed
    approach. By doing so, we're helping the developers create more secure software,
    quickly.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是说我们在软件开发完成后才进行所有这些测试。如果我们使用的是更快速的开发方法论，我们必须利用更多自动化系统，并为任何需要的手动测试过程创建快速通知，以确保在SDLC的测试阶段不会出现瓶颈。通过这种*接近实时*的软件测试方法，能够快速发现问题，并确保开发人员能够快速适应，*快速失败*，及时发现错误并在投入过多时间于错误的方法之前进行修复。通过这样做，我们帮助开发人员快速构建更安全的软件。
- en: 'Looking back at how we might have defined our test plans and designed our test
    processes, a few examples of what we would like to implement along the process
    in order to increase security and speed up testing processes could include the
    following:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾我们如何定义测试计划和设计测试流程，一些我们希望在流程中实现的例子，以增加安全性并加速测试过程，包括以下内容：
- en: '**Architecture analysis**, including end-to-end process and design examination.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**架构分析**，包括端到端流程和设计检查。'
- en: '**Dependency checks**, which automate the process of checking for vulnerabilities
    in imported third-party software dependencies.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖检查**，自动化检查导入的第三方软件依赖项中的漏洞。'
- en: Automated **SAST**, or **static application security testing**, which we've
    mentioned in previous chapters.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化**SAST**，即**静态应用程序安全测试**，我们在前面章节中提到过。
- en: Automated **DAST**, or **dynamic application security testing**, which we've
    also mentioned in previous chapters.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化**DAST**，即**动态应用程序安全测试**，我们在前面章节中也提到过。
- en: '**Code review**, where one developer reads and critiques the code of another
    developer. This helps with knowledge-sharing, as well as implementing the *two-man
    principle*, which means the two parties would need to collude in order to implement
    a *backdoor or malware*. It''s not fail-safe, but it''s part of a *defense-in-depth*
    approach.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码审查**，一个开发人员阅读并批评另一个开发人员的代码。这有助于知识共享，同时也实施了*双人原则*，即两方需要共谋才能实现*后门或恶意软件*。这不是绝对安全的，但它是*深度防御*方法的一部分。'
- en: '**Penetration testing**, which we''ve spoken about multiple times, could occur
    upon significant change, as well as on a regular point-in-time basis.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**渗透测试**，我们已经多次提到过，可以在重大变更时进行，也可以定期进行。'
- en: Inside these processes, we will as a bare minimum want to check to ensure that
    the OWASP Top 10 Proactive Controls ([https://owasp.org/www-project-proactive-controls/v3/en/0x04-introduction.html](https://owasp.org/www-project-proactive-controls/v3/en/0x04-introduction.html))
    have been implemented. This means putting documented procedures into place for
    both automated scans as well as manual code reviews, and training developers on
    all of these steps and controls. It's crucial for the success of your SDLC, so
    don't neglect training, awareness, policies, and procedures!
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些过程中，至少我们需要检查确保已实施 OWASP Top 10 积极控制（[https://owasp.org/www-project-proactive-controls/v3/en/0x04-introduction.html](https://owasp.org/www-project-proactive-controls/v3/en/0x04-introduction.html)）。这意味着为自动扫描和手动代码审查建立文档化的程序，并且对开发人员进行相关步骤和控制的培训。这对
    SDLC 的成功至关重要，因此不要忽视培训、意识、政策和程序！
- en: I'd like to go into the Top 10 Proactive Controls from OWASP in the following
    sections.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我接下来将讨论 OWASP 的 Top 10 积极控制。
- en: Utilizing the OWASP Top 10 Proactive Controls
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用 OWASP Top 10 积极控制
- en: Let me briefly cover each of the OWASP Top 10 Proactive controls for improving
    the security of software. Each control has its own section.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 让我简要介绍一下 OWASP Top 10 积极控制，用于提高软件安全性。每个控制项都有自己的章节。
- en: Define security requirements
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义安全要求
- en: As we've previously discussed, the ability to articulate and document the requirements
    expected to be fulfilled by a software solution is highly beneficial to the organization
    for various reasons, including *cost-savings* and *useability improvements*, but
    another business requirement that must be fulfilled by either software development
    work or purchased/open source software are those requirements surrounding information
    security.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论过的，能够清晰表达和文档化软件解决方案所需满足的要求，对组织非常有益，原因包括*节省成本*和*提高可用性*，但另一个必须通过软件开发工作或购买/开源软件来满足的业务需求是有关信息安全的要求。
- en: Creating standard security requirements based on best practices and industry
    knowledge helps developers and procurement staff reuse the knowledge they gain
    from previous iterations, so it's highly recommended to define the requirements
    in a way that will be uniform and stand the test of time.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 基于最佳实践和行业知识创建标准的安全要求，帮助开发人员和采购人员重用他们从先前迭代中获得的知识，因此强烈建议以统一且经得起时间考验的方式定义这些要求。
- en: Inside the *OWASP Top 10 Proactive Controls* section on defining security requirements,
    they reference the **OWASP ASVS**, or **Application Security Verification Standard**,
    which is a collection of security requirements, and the various criteria required
    for verifying that those requirements have been met. As a sample, it includes
    categories of best practices for various information security functions, such
    as access control, error handling, authentication, and so on. It's an excellent
    resource that should not be ignored.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在*OWASP Top 10 积极控制*部分关于定义安全要求时，他们提到了**OWASP ASVS**，即**应用程序安全验证标准**，这是一个安全要求的集合，包含了验证这些要求是否已满足的各种标准。作为示例，它包括了用于各种信息安全职能的最佳实践类别，如访问控制、错误处理、身份验证等。这是一个不容忽视的优秀资源。
- en: As we previously spoke about, utilizing *user stories*, as we would see in Agile
    software development processes, as well as *misuse user stories*, can help teams
    operating in these functions to verify that the security requirements have been
    met.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所讨论的，利用*用户故事*（如在敏捷软件开发过程中看到的）以及*误用用户故事*，可以帮助团队在这些职能中验证安全要求是否已满足。
- en: 'As an example, we can reference the *ASVS* requirements that you could leverage
    for authentication, such as verifying that there are no default passwords in use,
    as referenced here:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，我们可以参考*ASVS*要求，您可以利用这些要求进行身份验证，例如验证是否没有使用默认密码，如此处所示：
- en: Verify there are no default passwords in use for the application framework or
    any components used by the application (such as "admin/password").
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 验证应用程序框架或应用程序所使用的任何组件（如“admin/password”）中没有使用默认密码。
- en: – ASVS 3.0.1, requirement 2.19
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: – ASVS 3.0.1，要求 2.19
- en: 'To convert that into a **user story**, use the formula I mentioned previously:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 将其转化为**用户故事**，使用我之前提到的公式：
- en: '[PRE1]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s do it for ASVS 3.0.1, requirement 2.19:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来处理一下 ASVS 3.0.1，要求 2.19：
- en: '"As a user, I can enter my username and password, so I can gain access to the
    application."'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: “作为用户，我可以输入我的用户名和密码，从而获得对应用程序的访问权限。”
- en: 'Or:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 或：
- en: '"As a user, I can enter a long password that has a maximum of 1023 characters,
    so I can use a strong and unique password."'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '"作为一个用户，我可以输入最多 1023 个字符的长密码，这样我就可以使用强大且独特的密码。"'
- en: 'A **misuse user story** is told from the perspective of the malicious actor:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**滥用用户故事**是从恶意行为者的角度来描述的：'
- en: '"As a malicious actor, I want to be able to enter the published default username
    and password, so I can gain access without permission."'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '"作为一个恶意行为者，我希望能够输入发布的默认用户名和密码，这样我就能在未经授权的情况下访问系统。"'
- en: It's up to you whether you want to utilize one or both of these in your user
    stories, but just be careful that your developers understand what they are, and
    don't misread the misuse user story as a requirement!
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 是否在用户故事中使用这些内容，由你决定，但要小心，确保开发人员理解这些内容，并且不要将滥用用户故事误读为需求！
- en: Leverage security frameworks and libraries
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用安全框架和库
- en: Software development has a wealth of resources available online, from free online
    courses to learn various languages to documentation for web app frameworks, and
    the list goes on. That culture has extended into the world of security in software
    development, with standards, frameworks, libraries, and other highly documented
    resources available to anybody interested enough in learning. Sometimes, it's
    as simple as importing a few packages into a development project.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发有大量在线资源可供利用，从学习各种编程语言的免费在线课程到用于 Web 应用框架的文档，资源繁多，数不胜数。这种文化已经扩展到软件开发中的安全领域，标准、框架、库以及其他高度文档化的资源对任何有兴趣学习的人开放。有时，只需将几个软件包导入到开发项目中，就能轻松应用这些资源。
- en: 'With that, it''s still important to remember a few key ideologies to ensure
    the risk of utilizing third-party resources is safe and secure:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，仍然重要的是要记住一些关键理念，以确保利用第三方资源的风险是安全的：
- en: Using trusted sources that have a track record for maintenance activity. If
    a framework or resource isn't actively updated and maintained, it will present
    challenges and has a high likelihood of vulnerabilities.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用有维护记录的可信来源。如果一个框架或资源没有得到积极更新和维护，那么它将面临挑战，并且容易出现漏洞。
- en: Ensure we document all third-party libraries and software inside our risk management
    asset catalog. This may be difficult, but there are services such as Snyk ([https://snyk.io/](https://snyk.io/))
    that automate the process of gathering the list and applying a risk score to that
    list.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保我们在风险管理资产目录中记录所有第三方库和软件。这可能会很困难，但有像 Snyk ([https://snyk.io/](https://snyk.io/))
    这样的服务，可以自动化收集列表并为该列表应用风险评分。
- en: Ensuring that updates are applied before the software is facing breaking changes
    due to lack of maintenance. Aside from the previously mentioned Snyk, OWASP themselves
    offer a tool called **OWASP Dependency-Check** to look for publicly disclosed
    vulnerabilities in your third-party library list. NPM has a similar service available,
    and more options appear regularly.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保在软件面临由于缺乏维护而导致的重大变更之前，及时应用更新。除了之前提到的 Snyk，OWASP 还提供了一个名为 **OWASP Dependency-Check**
    的工具，可以检查第三方库列表中公开披露的漏洞。NPM 也有类似的服务，其他选项也在不断涌现。
- en: Ensure developers maintain the *principle of least-privilege* any time they
    can. Allowing increased access increases the attack surface, and therefore will
    likely increase risk.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保开发人员始终遵循 *最小权限原则*。允许过多的访问会增加攻击面，从而可能增加风险。
- en: You know, the basics that we've been harping on about for this entire book now!
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道的，整个书中我们一直在强调的基础知识！
- en: Secure database access
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确保数据库访问安全
- en: 'When software interacts with data stores, such as SQL databases, a number of
    key ideologies can be upheld in order to increase the security of the software
    and reduce risk to an acceptable level. As an example, we don''t want users to
    be able to input anything into a query that is then interpreted as a command without
    being parsed, checked, and sanitized first:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 当软件与数据存储（如 SQL 数据库）进行交互时，可以遵循一些关键理念，以提高软件的安全性并将风险控制在可接受的水平。例如，我们不希望用户能够向查询中输入任何内容，而这些内容在没有经过解析、检查和清理之前就会被当作命令执行：
- en: '![Figure 8.3 – XKCD #327 – sanitizing inputs'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.3 – XKCD #327 – 输入清理'
- en: '](img/B16611_08_003.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16611_08_003.jpg)'
- en: 'Figure 8.3 – XKCD #327 – sanitizing inputs'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '图 8.3 – XKCD #327 – 输入清理'
- en: Ideally, we won't even give the users the ability to enter queries themselves,
    but that depends on the use cases. By using protections such as **query parameterization**,
    you can create *secure queries* that reduce the likelihood of an injection attack,
    such as SQL injection.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，我们甚至不允许用户自己输入查询，但这取决于使用场景。通过使用如**查询参数化**等保护措施，你可以创建*安全查询*，减少发生注入攻击的可能性，如
    SQL 注入。
- en: Read more about *query parameterization* from the *OWASP Query Parameterization
    Cheat Sheet* ([https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html)).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读更多关于*查询参数化*的内容，参考*OWASP 查询参数化备忘单* ([https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html))。
- en: Furthermore, you'll want to ensure your database and any computing platform
    used to run the database are properly set up with a **secure configuration**,
    preferably leveraging the baseline configurations we referenced in previous chapters.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还需要确保数据库和用于运行数据库的计算平台配置正确，具有**安全配置**，最好利用我们在前面章节中提到的基线配置。
- en: '**Secure authentication** means that authentication is protected through various
    means. For example, it''s important to ensure that authentication is performed
    through a **secure channel**, protecting any credentials from being exposed. When
    credentials are stored at rest, they must be protected with *defense-in-depth*
    for the various threats, including *access control and encryption-at-rest* for
    protection against attacks on confidentiality, and *redundancy* for attacks on
    availability.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全认证**意味着通过多种方式保护认证过程。例如，确保认证通过**安全通道**进行，防止凭证泄露。存储在静态时的凭证必须通过*深度防御*来保护，以应对各种威胁，包括*访问控制和静态加密*，以防止机密性攻击，和*冗余*，以防止可用性攻击。'
- en: Finally, while the software and database communicate back and forth, it's important
    to ensure that the communication takes place over a *secure channel*, utilizing
    *encryption-in-transit*, as well as preventing the user from gaining too much
    information from error messages and logs.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，尽管软件和数据库之间进行着双向通信，但确保通信通过*安全通道*进行是很重要的，利用*传输加密*，并防止用户从错误消息和日志中获取过多信息。
- en: You can read further into database security from the *OWASP Database Security
    Cheat Sheet* ([https://cheatsheetseries.owasp.org/cheatsheets/Database_Security_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Database_Security_Cheat_Sheet.html)).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过阅读 *OWASP 数据库安全备忘单* ([https://cheatsheetseries.owasp.org/cheatsheets/Database_Security_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Database_Security_Cheat_Sheet.html))进一步了解数据库安全。
- en: Encode and escape data
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码和转义数据
- en: Another way to prevent *injection attacks* is to `\"`, to prevent the interpreter
    from closing a string) in order to reduce the risk of the interpreter or browser
    outputting dangerous content as a result of bad input.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种防止*注入攻击*的方法是使用 `\"`，防止解释器关闭字符串，以降低因不良输入导致解释器或浏览器输出危险内容的风险。
- en: Encoding output data helps protect against **Cross-Site Scripting** (**XSS**)
    attacks, among other flaws such as operating system command injection or the time
    somebody's emoji use ended up crashing an entire banking system ([https://www.vice.com/en/article/gv5jgy/iphone-emoji-break-apps](https://www.vice.com/en/article/gv5jgy/iphone-emoji-break-apps)).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 编码输出数据有助于防御**跨站脚本攻击**（**XSS**），以及其他缺陷，如操作系统命令注入或某次有人使用表情符号时导致整个银行系统崩溃的事件（[https://www.vice.com/en/article/gv5jgy/iphone-emoji-break-apps](https://www.vice.com/en/article/gv5jgy/iphone-emoji-break-apps)）。
- en: '*Encoding and escaping* can occur at various stages in the process of accepting
    and outputting data and should be considered any time *user input* or other *untrusted
    data* is interpreted or dynamically output back onto the interface.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '*编码和转义*可以在接收和输出数据的各个阶段进行，任何时候*用户输入*或其他*不受信任的数据*被解释或动态输出到界面时，都应该考虑这些措施。'
- en: You can read more about how to prevent XSS attacks from the *OWASP Cross-Site
    Scripting Prevention Cheat Sheet* ([https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)),
    and how to prevent injection attacks from the *OWASP Injection Prevention Cheat
    Sheet* (https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以阅读更多关于如何防止XSS攻击的信息，参考*OWASP跨站脚本预防备忘单* ([https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html))，以及如何防止注入攻击的信息，参考*OWASP注入预防备忘单*
    ([https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html))。
- en: Validate all inputs
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证所有输入
- en: Closely related to the last point is the idea of *validate all inputs*. We want
    to ensure all inputs are appropriately validated and properly formatted before
    they're stored or interact with any part of the software or system.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一点紧密相关的是*验证所有输入*的概念。我们希望确保所有输入在存储或与软件或系统的任何部分交互之前，都经过适当的验证并正确格式化。
- en: That includes the classic syntax checks, such as if a user is entering a credit
    card number, we want to make sure that it follows the format of a credit card
    number.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这包括经典的语法检查，例如如果用户输入的是信用卡号码，我们需要确保它符合信用卡号码的格式。
- en: This includes preventing any blacklisted characters or terms from being accepted,
    as well as having a whitelist if the input can only be a certain number of things.
    For example, if the input is asking for a two-letter abbreviation for a US state,
    we can have a whitelist of the 50 "approved" inputs and prevent any other input
    from being approved.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这包括防止接受任何黑名单字符或术语，以及在输入仅能为某些特定项时设置白名单。例如，如果输入要求提供美国州的两个字母缩写，我们可以设置一个包含50个“批准”输入的白名单，并防止任何其他输入被接受。
- en: These checks should follow the *defense-in-depth* idea and shouldn't rely on
    a **happy path** for the user to follow, as malicious actors like to find ways
    around the frontend controls.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这些检查应遵循*深度防御*的理念，并且不应依赖于用户遵循的**理想路径**，因为恶意行为者喜欢寻找绕过前端控制的方法。
- en: Leveraging validation functionality in various security libraries and frameworks
    can simplify this process for your development team, but they should always be
    tested to ensure they're fit for purpose on your project.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 利用各种安全库和框架中的验证功能可以简化此过程，但它们应始终经过测试，以确保在您的项目中适用。
- en: Treating all inputs as though they are malicious is the way forward, so let's
    just agree to add that to all of our SDLC policies moving forward, alright? Further
    reading on input validation can be done with the *OWASP Input Validation Cheat
    Sheet* ([https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有输入视为恶意输入是前进的方向，因此让我们达成一致，今后将这一点纳入我们所有的软件开发生命周期（SDLC）政策，好吗？有关输入验证的进一步阅读可以参考*OWASP输入验证备忘单*
    ([https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html))。
- en: Implement digital identity
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实施数字身份
- en: We need to ensure that our individual users are given an ID while interacting
    with our software, in order to both offer a streamlined experience during their
    session, as well as providing ourselves the ability to understand errors and track
    misuse.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要确保我们的每个用户在与软件交互时都被赋予一个ID，以便在他们的会话期间提供流畅的体验，同时也能为我们提供理解错误和跟踪滥用的能力。
- en: NIST released a special publication, *800-63B, Digital Identity Guidelines –
    Authentication and Lifecycle Management* ([https://pages.nist.gov/800-63-3/sp800-63b.html](https://pages.nist.gov/800-63-3/sp800-63b.html)),
    and it's worth referencing in the process of implementing and leveraging digital
    identity.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: NIST发布了特别出版物，*800-63B，数字身份指南——认证与生命周期管理* ([https://pages.nist.gov/800-63-3/sp800-63b.html](https://pages.nist.gov/800-63-3/sp800-63b.html))，在实施和利用数字身份的过程中值得参考。
- en: Inside the *NIST Special Publication 800-63B*, various controls and their proper
    implementations are detailed. This includes requirements for various "levels"
    of applications, depending on the information contained and processing performed.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在*NIST特别出版物800-63B*中，详细说明了各种控制措施及其正确实施方式。这包括针对不同“级别”应用程序的要求，具体取决于所包含的信息和执行的处理。
- en: For example, a *Level 1* application is one that is considered low-risk and
    doesn't contain any private data or PII. As a result, only password authentication
    is required, with checks against commonly used passwords and *password length
    requirements* of 10 characters or more being suggested for users not utilizing
    **multi-factor authentication** (**MFA**). I highly recommend reading the publication
    for further guidance.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，*一级*应用程序被认为是低风险的，不包含任何私密数据或个人身份信息（PII）。因此，仅需要密码认证，建议检查常用密码，并建议未使用**多因素认证**（**MFA**）的用户设置至少10个字符的*密码长度要求*。强烈建议阅读该出版物以获取进一步的指导。
- en: The process for users of your software to reset their *forgotten passwords*
    should include MFA methods to prove their identity. A typical way to achieve this
    is to utilize a side-channel such as email and send a password reset email containing
    a unique link to the email address associated with the account. More information
    on the suggested process can be found in the *OWASP Forgot Password Cheat Sheet*
    ([https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html)).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 用户重置*忘记的密码*的过程应包括多因素认证（MFA）方法来证明他们的身份。实现这一点的典型方式是利用侧信道，如电子邮件，向与账户关联的电子邮件地址发送包含唯一链接的密码重置邮件。有关建议流程的更多信息可以参考*OWASP
    忘记密码备忘单*（[https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html)）。
- en: When we talk about session management and cookies, a few steps can be taken
    toward better security for our users. For example, expiry for the cookie should
    be set. Setting an `HttpOnly` attribute on a cookie prevents the cookie from being
    referenced and utilized in JavaScript code. Any transfer should be protected with
    TLS encryption to prevent man-in-the-middle attacks from grabbing a session ID,
    by setting the `Secure` attribute.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论会话管理和 cookie 时，可以采取一些步骤来提高用户的安全性。例如，应设置 cookie 的过期时间。为 cookie 设置`HttpOnly`属性可防止该
    cookie 在 JavaScript 代码中被引用和使用。任何传输都应通过 TLS 加密来保护，以防止中间人攻击窃取会话 ID，通过设置`Secure`属性来实现。
- en: Further reading on session management, web authentication, and access control
    can be found in the *OWASP Session Management Cheat Sheet* ([https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 有关会话管理、网页认证和访问控制的进一步阅读可以参考*OWASP 会话管理备忘单*（[https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)）。
- en: Enforce access controls
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 强制实施访问控制
- en: Similar to the previous point on digital identity, access control and authorization
    are about granting and revoking various permissions or privileges from users.
    By leveraging known paradigms, such as RBAC, for example, which we've gone into
    previously in this book, and by building out strong access controls up front that
    prevent vulnerabilities and flaws such as *access creep*, you're ensuring that
    your users have access to what they need, nothing more and nothing less.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面提到的数字身份类似，访问控制和授权是关于向用户授予和撤销各种权限或特权。通过利用已知的模型，例如我们在本书中介绍过的 RBAC，通过提前建立强大的访问控制来防止*权限膨胀*等漏洞和缺陷，确保用户只访问他们所需要的内容，既不多也不少。
- en: In order to enforce the access controls implemented, all requests must be passed
    through an access control check, with the default setting being deny. As a result,
    rules shouldn't be hardcoded, and instead should be dynamic based on the access
    level granted to the present user interacting with the software. Again, it's a
    matter of defense in depth.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 为了强制执行已实施的访问控制，所有请求必须通过访问控制检查，默认设置应为拒绝。因此，规则不应硬编码，而应基于当前与软件交互的用户的访问级别动态调整。同样，这是深度防御的一部分。
- en: Finally, ensure you keep track of all events related to access with logging
    and pass those logs into security monitoring resources. We will discuss that later.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，确保通过日志记录跟踪与访问相关的所有事件，并将这些日志传输到安全监控资源中。我们稍后会详细讨论。
- en: Further reading can be found in the *OWASP Access Control Cheat Sheet* ([https://cheatsheetseries.owasp.org/cheatsheets/Access_Control_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Access_Control_Cheat_Sheet.html)).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步阅读可参考*OWASP 访问控制备忘单*（[https://cheatsheetseries.owasp.org/cheatsheets/Access_Control_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Access_Control_Cheat_Sheet.html)）。
- en: Protect data everywhere
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随时保护数据
- en: The basis of the information security profession is to ensure the security of
    information. When we transfer or store data in our applications, we want to make
    sure that it's adequately protected from threats and take a risk-based approach
    to applying controls, with the ideas of least-privilege, defense in depth, and
    other approaches we've discussed in this book taken into consideration.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 信息安全行业的基础是确保信息的安全。当我们在应用程序中传输或存储数据时，我们需要确保它得到充分的保护，免受威胁，并基于风险采取控制措施，同时考虑到我们在本书中讨论的最小特权、防御深度等方法。
- en: In terms of data security, it includes data classification, where we apply a
    sensitivity level label to each piece of data, and map those labels to the adequate
    control requirements defined by you and your organization, based on regulations,
    reputational risk appetite, and confidentiality, integrity, and availability risk
    appetite.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据安全方面，它包括数据分类，我们对每一条数据应用敏感性级别标签，并根据规定、声誉风险承受度以及机密性、完整性和可用性风险承受度，将这些标签映射到您和您的组织所定义的适当控制要求。
- en: An easy win in terms of protecting data is to implement encryption for data
    in transit, generally TLS. This protects against **man-in-the-middle** and **side-channel**
    attacks occurring on either the communication between the user and the frontend
    application server or between the frontend application server and the backend.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在保护数据方面，一个简单有效的办法是对传输中的数据进行加密，通常使用TLS。这可以防止**中间人攻击**和**侧信道攻击**，这些攻击可能发生在用户与前端应用服务器之间，或者前端应用服务器与后端之间的通信中。
- en: Encrypting the data at rest reduces the risk related to loss of confidentiality,
    but the complexity and technical skills required might slightly increase the potential
    for misconfiguration leading to a loss of availability. Encrypting data at rest
    is an important step, but must be carefully planned and implemented in order to
    be effective.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 对静态数据进行加密可以降低与机密性丧失相关的风险，但所需的复杂性和技术技能可能稍微增加潜在的误配置风险，从而导致可用性丧失。加密静态数据是一个重要步骤，但必须小心规划和实施才能有效。
- en: Leveraging cryptographic libraries can be a good starting point, regardless
    of whether my horror story at the beginning of this chapter was entirely based
    on organizations experiencing an information security incident due to using a
    third-party cryptographic library.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 利用加密库可能是一个不错的起点，无论我在本章开头提到的恐怖故事是否完全基于由于使用第三方加密库而导致的组织信息安全事件。
- en: Secrets such as credentials, certificates, SQL passwords, and so on should be
    managed and protected as though they are the crown jewels of your application.
    Don't store them in plaintext in the databases, don't hardcode them, and rotate/de-provision
    the keys associated with users when they leave the organization. *Secret vaults*
    such as **HashiCorp Vault** offer the streamlined automation of this process but
    require a technical skillset.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 像凭证、证书、SQL密码等秘密信息应该像保护应用程序的“皇冠珠宝”一样进行管理和保护。不要将它们以明文存储在数据库中，不要硬编码这些信息，并在用户离开组织时旋转或撤销与其相关的密钥。像**HashiCorp
    Vault**这样的*秘密金库*提供了这一过程的自动化简化，但需要具备一定的技术技能。
- en: 'Further reading can be found at the following links:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 更多阅读资料请参见以下链接：
- en: '*OWASP Transport Layer Protection Cheat Sheet* ([https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html))'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*OWASP传输层保护备忘单* ([https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html))'
- en: '*OWASP Cryptographic Storage Cheat Sheet* ([https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html))'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*OWASP加密存储备忘单* ([https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html))'
- en: '*OWASP Password Storage Cheat Sheet* ([https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html))'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*OWASP密码存储备忘单* ([https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html))'
- en: Implement security logging and monitoring
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实施安全日志记录和监控
- en: 'As we''ve previously spoken about security monitoring in previous chapters,
    I don''t believe I need to delve deeply into how that might help your organization.
    The bottom line is: more information can help you and your colleagues detect security
    incidents with better accuracy and improved response times.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前几章中谈到的安全监控一样，我不认为我需要深入探讨它如何帮助你的组织。最重要的一点是：更多的信息可以帮助你和你的同事更准确地检测到安全事件，并提高响应速度。
- en: You can increase the level of information that your organization's developed
    applications feed into your monitoring solution, but remember that sensitive information
    such as PII or confidential information is sometimes included in diagnostic and
    debugging information, and might need to be removed before reaching the monitoring
    solution. Additionally, make sure that your timestamps align across your nodes
    or your data will be inaccurate and difficult to use.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以增加你的组织开发的应用程序提供给监控解决方案的信息量，但请记住，PII（个人身份信息）或机密信息有时会包含在诊断和调试信息中，可能需要在传递到监控解决方案之前删除。此外，确保你的时间戳在各节点之间对齐，否则数据将不准确且难以使用。
- en: In order to prevent any log forging or injection attacks, you should consider
    the encoding principles and validation exercises we mentioned in *#4* and *#5*
    of this list. Another protection against tampering is to set up access control
    and authorization principles for your logging solution. In order to avoid loss
    of availability, your solution should have some form of redundancy in the dataset,
    such as storage in multiple locations and backups.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止日志伪造或注入攻击，你应该考虑我们在列表中的*#4*和*#5*中提到的编码原则和验证练习。另一种防止篡改的保护措施是为你的日志解决方案设置访问控制和授权原则。为了避免可用性的丧失，你的解决方案应该在数据集上采取某种形式的冗余，例如存储在多个位置和备份。
- en: Further reading into how you might use security logging and monitoring can be
    found in the *OWASP Logging Cheat Sheet* ([https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)).
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步了解如何使用安全日志记录和监控，可以参考*OWASP日志记录备忘单*（[https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)）。
- en: Handle all errors and exceptions
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理所有错误和异常
- en: Ensuring your application is resilient and able to handle errors and exceptions
    is an important property of ensuring all forms of the CIA triad. Bad error handling
    can lead to the disclosure of confidential or sensitive information, disruptions
    to the application's stability, or even modification to important data that you
    rely on for various monitoring purposes.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的应用程序具有弹性，能够处理错误和异常，这是确保CIA三原则（保密性、完整性和可用性）的一项重要属性。错误处理不当可能导致机密或敏感信息的泄露，应用程序稳定性的中断，甚至是你依赖的用于各种监控目的的重要数据的修改。
- en: 'Bad error messages can give a malicious actor more information than acceptable
    as well. Have a look at this signup page that I need to believe is a joke, or
    else I''ve lost all hope:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 错误的错误信息可能会给恶意攻击者提供比可接受范围更多的信息。看看这个我认为应该是玩笑的注册页面，否则我已经失去所有希望：
- en: '![Figure 8.4 – The dumbest signup page error message ever'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.4 – 有史以来最愚蠢的注册页面错误信息'
- en: '](img/B16611_08_004.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16611_08_004.jpg)'
- en: Figure 8.4 – The dumbest signup page error message ever
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4 – 有史以来最愚蠢的注册页面错误信息
- en: I can only guess the user decided to go with `hunter2` as the password after
    that error message.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我只能猜测，在看到那个错误信息后，用户决定使用`hunter2`作为密码。
- en: When we are creating errors, make sure the user isn't able to get more information
    than they need, but give them enough to find the answers themselves or to reach
    out to a member of support for help. Internally, we want to log enough to help
    with support, testers, forensic investigations, and incident response teams. Remember
    that if team members from the software developing team actively collaborate with
    the security, testing, and business team members, it will lead to better software
    overall.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建错误时，确保用户无法获得超出其需求的信息，但要提供足够的信息，让他们自己找到答案或联系支持人员求助。从内部来看，我们希望记录足够的信息，帮助支持团队、测试人员、法医调查人员和事件响应团队。请记住，如果软件开发团队成员与安全、测试和业务团队成员积极合作，将会提高软件的整体质量。
- en: Finally, good tests must be created in order to catch these exceptions before
    users do. Great testers, combined with some automated tooling for finding errors
    both statically and dynamically, will help reduce the overhead required for support,
    as well as reducing the risk of the application suffering a loss of one or more
    of the CIA triad principles.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，必须创建好的测试，以便在用户发现之前捕捉这些异常。优秀的测试人员，加上一些自动化工具，用于静态和动态地发现错误，将有助于减少支持所需的开销，并减少应用程序丧失一个或多个CIA三原则的风险。
- en: Further reading can be found in the *OWASP Error Handling Cheat Sheet* ([https://cheatsheetseries.owasp.org/cheatsheets/Error_Handling_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Error_Handling_Cheat_Sheet.html)).
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 更多的阅读内容可以在*OWASP错误处理备忘单*中找到([https://cheatsheetseries.owasp.org/cheatsheets/Error_Handling_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Error_Handling_Cheat_Sheet.html))。
- en: 'If you enjoy this topic as much as I do, I think some further reading might
    be of interest to you, and so I''ve compiled a few different links to frameworks
    and processes for you to investigate. These are useful in implementing security
    in the SDLC:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你像我一样喜欢这个话题，我认为你可能会对进一步阅读感兴趣，因此我整理了一些框架和流程的链接供你调查。这些对于在SDLC中实现安全非常有用：
- en: '**MS-SDL**, the **Microsoft Security Development Lifecycle**: [https://www.microsoft.com/en-us/securityengineering/sdl](https://www.microsoft.com/en-us/securityengineering/sdl)'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MS-SDL**，**微软安全开发生命周期**：[https://www.microsoft.com/en-us/securityengineering/sdl](https://www.microsoft.com/en-us/securityengineering/sdl)'
- en: '*NIST 800-160*, *Considerations for a Multidisciplinary Approach in the Engineering
    of Trustworthy Secure Systems*: [https://csrc.nist.gov/publications/detail/sp/800-160/vol-1/final](https://csrc.nist.gov/publications/detail/sp/800-160/vol-1/final)'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*NIST 800-160*，*工程可靠安全系统的多学科方法考虑因素*：[https://csrc.nist.gov/publications/detail/sp/800-160/vol-1/final](https://csrc.nist.gov/publications/detail/sp/800-160/vol-1/final)'
- en: 'The Cybersecurity and Infrastructure Security Agency''s **CLASP**, or the **Comprehensive
    Lightweight Application Security Process**: [https://us-cert.cisa.gov/bsi/articles/best-practices/requirements-engineering/introduction-to-the-clasp-process](https://us-cert.cisa.gov/bsi/articles/best-practices/requirements-engineering/introduction-to-the-clasp-process)'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络安全和基础设施安全局的**CLASP**，或**综合轻量级应用安全流程**：[https://us-cert.cisa.gov/bsi/articles/best-practices/requirements-engineering/introduction-to-the-clasp-process](https://us-cert.cisa.gov/bsi/articles/best-practices/requirements-engineering/introduction-to-the-clasp-process)
- en: Okay, fine, we've gone through the SDLC, so now we can go into detail about
    how it might help us with assessing software next.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们已经讨论过SDLC了，现在可以详细探讨它如何帮助我们评估软件。
- en: Assessing software security
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估软件安全
- en: Moving forward, I would like to discuss the methods we might utilize in order
    to assess the security of software. In previous chapters, we've looked into the
    importance of regular testing of software and systems, including *penetration
    testing* and *vulnerability scanning*, and the remediation of any of the findings.
    I've encouraged the implementation of *configuration management systems* that
    can help keep your organization's assets up to date, and *monitoring solutions*
    to uncover performance issues, misuse, errors, or malicious activity. I've also
    talked about *resilience and redundancy*, and how expensive it might be for each
    hour that your organization loses access to one of their systems.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我想讨论我们可能采用的方法，以评估软件的安全性。在之前的章节中，我们探讨了定期测试软件和系统的重要性，包括*渗透测试*和*漏洞扫描*，以及对任何发现进行修复。我提倡实施*配置管理系统*，以帮助保持组织的资产最新，并使用*监控解决方案*来发现性能问题、滥用、错误或恶意活动。我还谈到了*弹性和冗余*，以及每小时组织失去系统访问权限可能造成的高昂费用。
- en: Now, with that all said, if we're going to go deeper, I think it's relevant
    to split this topic into two sections because the methodologies and approaches
    are different depending on who has ownership of the software, taking into consideration
    the *cloud operating model* and the shared responsibilities related to utilizing
    **Software-as-a-Service** (**SaaS**) products.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经讨论了这些，如果我们要更深入地探讨，我认为将这个话题分为两个部分是相关的，因为方法和方法论会有所不同，这取决于谁拥有软件，并考虑到*云操作模型*以及与使用**软件即服务**（**SaaS**）产品相关的共享责任。
- en: On one hand, we have third-party vendors who develop and sell software to companies.
    Their focus is creating a tool that is valuable to your organization, such as
    **Customer Relationship Management** (**CRM**) systems, HR software, productivity
    tools, web analytics software, cloud storage solutions, and so on.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 一方面，我们有第三方供应商，他们开发并向公司销售软件。他们的重点是创建对您的组织有价值的工具，如**客户关系管理**（**CRM**）系统、HR 软件、生产力工具、网站分析软件、云存储解决方案等。
- en: On the other hand, we can also leverage an in-house development team to create
    software for our organization to either solve problems that aren't currently offered
    by a vendor or to save money based on the cost presented by the current offering
    from third parties. Additionally, we can leverage outsourced development teams
    to create our in-house software or leverage the power and convenience of open
    source software.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，我们也可以利用内部开发团队为我们的组织创建软件，解决供应商目前未提供的问题，或者根据当前第三方提供的成本节省开支。此外，我们还可以利用外包开发团队来创建我们的内部软件，或利用开源软件的力量和便利。
- en: Let's delve into how to improve the security of third-party vendor software.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨如何提高第三方供应商软件的安全性。
- en: Reducing the risk from software developed by a third-party vendor
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 降低由第三方供应商开发的软件带来的风险
- en: As we have now covered the various controls and processes that can be put into
    place to reduce the likelihood of software being created with vulnerabilities
    in the code itself, it must be noted that many of your organization's software
    solutions are going to be either purchased from a third party or pulled from an
    open source software repository resource such as the public repositories on GitHub.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经讨论了可以采取的各种控制措施和流程，以减少软件中代码漏洞的可能性，必须指出，许多您组织的软件解决方案将会是从第三方购买的，或者是从开源软件库（如
    GitHub 的公共代码库）中提取的。
- en: Policies and procedures need to be put into place to ensure that you have visibility
    on the procurement process, regardless of which scenario is occurring, and have
    oversight on the software assets being utilized in your estate.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 需要制定政策和程序，确保无论发生何种情况，都能让你对采购过程有可见性，并对在你公司使用的软件资产进行监督。
- en: 'Here''s the issue: what can you do about it? When we''re looking at the major
    software that I see used by nearly every organization, such as those developed
    and sold by Microsoft, Salesforce, Atlassian, and so on, how can you ensure they''re
    employing the appropriate controls for their solution, as well as following an
    SDLC approach?'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于：你能做些什么呢？当我们审视几乎每个组织都在使用的主要软件时，比如微软、Salesforce、Atlassian 等公司开发并销售的软件，如何确保它们为其解决方案采取了适当的控制措施，并且遵循了软件开发生命周期（SDLC）的方法？
- en: Cloud-based software
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于云的软件
- en: The massive paradigm shift we've seen over the past decade toward the SaaS model
    has increased the pace of implementing new software into an organization, where
    a user is likely accessing the solution through their web browser. This model
    for using software has led to the responsibility of handling servers and databases
    shifting away from the customer and onto the vendor.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去十年中，我们见证了向SaaS模型的巨大范式转变，这加快了将新软件实施到组织中的步伐，用户很可能通过其网页浏览器访问该解决方案。使用这种软件的模式导致了服务器和数据库的管理责任从客户转移到供应商。
- en: That isn't to say we absolve ourselves of any responsibility when it comes to
    the privacy and security of the data processed and stored in these SaaS applications,
    however; in fact, it is absolutely our responsibility as customers to ensure that
    the solution we choose is *secure enough* for our organization.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是说我们在涉及到这些SaaS应用程序中处理和存储的数据的隐私和安全时可以完全不负责任；事实上，作为客户，确保我们选择的解决方案对我们的组织来说是*足够安全*的，完全是我们的责任。
- en: 'As I mentioned previously, it might be difficult to arrange for your own testing
    to be performed on the infrastructure and software currently being offered by
    your SaaS vendors. The reasoning behind that is simple: that type of testing activity
    could present a level of risk that is deemed unacceptable by the vendor, as you
    could accidentally disrupt their service for millions of other users. You can''t
    perform any tests on infrastructure without permission either, or you''ll be putting
    yourself and your organization at risk for legal liability.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前提到的那样，安排对目前由SaaS供应商提供的基础设施和软件进行测试可能是困难的。原因很简单：这种测试活动可能会带来供应商认为不可接受的风险，因为你可能会不小心中断他们为数百万其他用户提供的服务。没有许可，你也不能对基础设施进行任何测试，否则你将使自己和组织面临法律责任的风险。
- en: So, how can we go about asking our vendors about their software's security?
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们该如何询问供应商他们的软件安全性呢？
- en: Understanding third-party software risk
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解第三方软件风险
- en: We've previously mentioned in this book that we might – from the perspective
    of being an information security professional working at a software vendor – create
    an *information security whitepaper* to detail security paradigms and controls
    utilized by your organization. With that said, now that you're the potential customer,
    how do you ask the appropriate questions to ensure the software your organization
    is in the process of procuring is appropriately secure and controls are in line
    with the level of risk?
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们之前提到过，从作为信息安全专业人员在软件供应商处工作的角度出发，我们可能会创建一份*信息安全白皮书*，详细说明贵组织所采用的安全范式和控制措施。话虽如此，既然现在你是潜在的客户，你该如何提问，以确保你们组织正在采购的软件足够安全，并且其控制措施符合相应的风险水平？
- en: Well, we perform *due diligence* and produce *legal documentation* defining
    liability and the agreements between your organization and the vendor. I already
    covered this in the preceding thrilling section where we talked about Latin terms
    found in contract law… and how could you not remember that?
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我们执行*尽职调查*并制定*法律文档*，明确责任和你们组织与供应商之间的协议。我在前面那部分精彩的内容中已经讲过这些，其中涉及了合同法中的拉丁术语……你怎么可能忘记呢？
- en: In these agreements, you might be able to arrange for documentation from the
    latest penetration test performed on the software to be shared for your review,
    or for your own security team to be able to perform their own testing as a form
    of due diligence. It all depends on what both parties are willing to agree to
    and what will give you the assurance required to help meet your level of risk
    tolerance. As we've said, we have to be aware that it's not always possible to
    penetration test or even to vulnerability scan a software solution, but even if
    you were to find a vulnerability in a software solution that has been developed
    by a third party, how are you going to notify the vendor, and do you expect them
    to fix the vulnerability in a timely manner?
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些协议中，你可能能够安排共享最新进行的渗透测试文档供你审查，或允许你的安全团队作为尽职调查的一部分进行测试。这一切取决于双方愿意达成的协议，以及能够为你提供所需的保障，帮助你满足风险容忍度。正如我们所说，我们必须意识到，渗透测试或甚至漏洞扫描软件解决方案并不总是可行的，但即使你在由第三方开发的软件解决方案中发现了漏洞，你该如何通知供应商，且是否期望他们及时修复这个漏洞？
- en: In your legal documentation, you might also want to try and define the *SLA*s
    and procedures for the remediation of vulnerabilities, but we still haven't covered
    how to get a better look into our vendors' security posturing. How do we know
    that they're handling security in a way that we deem is acceptable?
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的法律文档中，你可能还想尝试定义*SLA*和漏洞修复的程序，但我们仍然没有讨论如何更好地了解供应商的安全姿态。我们如何知道他们的安全管理方式是否符合我们所认为的可接受标准？
- en: In this circumstance, we often send a set of documents known oftentimes as the
    **Vendor Security Assessment Questionnaire** (**VSAQ**) to software vendors for
    them to complete before an agreement is made. Most organizations send out some
    Excel spreadsheets with rows and rows of hundreds of questions, along with drop-down
    or free-text cells to input answers, and/or evidence and justifications for answering
    the way they did. If you've ever worked as a security professional at an organization
    that develops software to be offered to customers, you've had to fill these assessment
    spreadsheets out, and they're never the same, unfortunately. Google tried their
    best to standardize these questions into an open source, interactive, and dynamic
    solution on their GitHub page ([https://github.com/google/vsaq](https://github.com/google/vsaq)),
    but from what I've seen, it still hasn't caught on. If we can make this happen,
    it would really save us all a load of time and effort, while delivering a high-quality
    result. Can we please make this happen?
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们通常会向软件供应商发送一套文件，通常称为**供应商安全评估问卷**（**VSAQ**），让他们在协议签署前填写。大多数组织会发送一些Excel表格，其中包含成百上千个问题的行，并配有下拉菜单或自由文本框来填写答案，和/或提供答案的证据和理由。如果你曾在为客户开发软件的组织中担任过安全专业人员，你就必须填写这些评估表格，而且不幸的是，它们从来都不是一样的。谷歌尽力将这些问题标准化，并通过其GitHub页面上的开源互动动态解决方案进行共享（[https://github.com/google/vsaq](https://github.com/google/vsaq)），但从我所见，这个解决方案仍然未被广泛采用。如果我们能实现这一目标，它将真正为我们节省大量时间和精力，同时提供高质量的结果。我们能做到这一点吗？
- en: Upon receiving the completed VSAQ back, we shall document the residual risk
    that is unmitigated by the vendor, and measure that residual risk to see whether
    it's below the threshold level of risk acceptance or not. In the event that the
    risk is above the acceptable level, we need to make the decision to either mitigate
    it, accept it, or avoid it. I should hope, considering we're nearly at the end
    of the book now, that it's all awfully familiar at this point.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在收到填写完成的VSAQ后，我们将记录供应商未能缓解的剩余风险，并评估这些剩余风险是否低于可接受的风险阈值。如果风险超出可接受水平，我们需要决定是缓解风险、接受风险，还是避免风险。我希望，考虑到我们已经接近书的结尾，这些内容现在应该非常熟悉。
- en: Once you've completed your due diligence and communicated your findings to the
    business decision-makers, and the agreement is secured and finalized, the implementation
    of the software will begin. It might be on-prem installed software, or it might
    be cloud-based SaaS.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了尽职调查并将结果传达给业务决策者，协议达成并最终确定后，软件的实施将开始。它可能是本地安装的软件，也可能是基于云的SaaS。
- en: SDLC due diligence for software vendors
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 软件供应商的SDLC尽职调查
- en: Since we covered the various steps and requirements for an SDC, you now know
    the basics, and you have much of the information you need to ensure you can perform
    the appropriate due diligence surrounding their development life cycle.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经涵盖了SDC的各种步骤和要求，现在你已经了解了基础知识，并掌握了进行适当尽职调查所需的大部分信息，确保你能对他们的开发生命周期进行适当的尽职调查。
- en: First of all, it's important to not only ask whether the vendor follows processes
    surrounding the SDLC, but also to have them detail how exactly they do so. You
    could also ask for evidence as a validation method. If they answer "no," then
    you need to highlight the risks associated with utilizing this software that has
    been developed without regard to the SDLC to the appropriate decision-makers in
    your organization.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，重要的是不仅要问供应商是否遵循SDLC相关的流程，还要让他们详细说明具体是如何执行的。你还可以要求提供证据作为验证方法。如果他们回答“否”，那么你需要将这款没有遵循SDLC开发的软件可能带来的风险，向组织内的相关决策者进行强调。
- en: Penetration testing and bug bounties
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 渗透测试和漏洞悬赏
- en: We might be able to arrange to penetration test the software, but if it's a
    SaaS, as we've said previously, don't get your hopes up, as most vendors will
    not allow it. Besides, performing that sort of in-depth, technical activity on
    all potential vendors will become costly for your organization very quickly. A
    novel solution for both vendors and customers that has recently become popular
    is the implementation of a bug bounty program, where a software vendor opens their
    product up to be penetration tested by bug bounty hunters, who are trying to exploit
    security vulnerabilities for a reward offered by the vendor. Companies such as
    Bugcrowd (https://www.bugcrowd.com/) and HackerOne (https://www.hackerone.com/)
    are offering organizations such as yours (and your vendors) the opportunity to
    have their software "hacked" by security professionals globally. If your vendor
    has a bug bounty program, it may bode well for where they stand in their security
    posture, especially if you are able to review the bugs that have been found and
    the current open bounties.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们或许能够安排对该软件进行渗透测试，但如果是SaaS（软件即服务），如我们之前所说，不要抱太大希望，因为大多数供应商是不允许的。此外，对所有潜在供应商进行此类深入的技术活动，将很快给你的组织带来高昂的成本。最近，一个新兴的解决方案对供应商和客户都非常有吸引力，那就是实施漏洞奖励计划，供应商将他们的软件开放，接受漏洞赏金猎人进行渗透测试，猎人通过利用安全漏洞获得供应商提供的奖励。像Bugcrowd（https://www.bugcrowd.com/）和HackerOne（https://www.hackerone.com/）这样的公司，为像你这样的组织（以及你的供应商）提供了一个机会，让全球的安全专家“黑客”他们的软件。如果你的供应商有漏洞赏金计划，那可能意味着他们在安全方面的表现不错，尤其是如果你能查看已发现的漏洞和当前的开放悬赏。
- en: If the vendor claims to be secure but doesn't want to provide penetration test
    reports and doesn't take part in a bug bounty program, you might want to ask them
    how they process and prioritize vulnerabilities that are coming from their penetration
    tests, or which tools they use for DAST, SAST, or dependency scans. Use your knowledge
    of the landscape to see whether they know what they're talking about, and try
    your best to get evidence where you can. It is the security of your organization
    on the line, after all.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 如果供应商声称自己是安全的，但不愿提供渗透测试报告，并且不参与漏洞赏金计划，你可能需要问他们如何处理和优先处理来自渗透测试的漏洞，或者他们使用哪些工具进行DAST、SAST或依赖扫描。利用你对安全形势的了解，判断他们是否知道自己在说什么，并尽可能获得证据。毕竟，最终是你们组织的安全性在承受风险。
- en: On-prem third-party software
  id: totrans-261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本地第三方软件
- en: When we're looking at software that is installed onto your company's servers
    or endpoints, we have a few simple mitigations that we can employ to ensure your
    environment's security isn't compromised due to a vulnerability in this software.
    We want to reduce our attack surface by following the foundational concept of
    least-privilege we've covered.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看安装在公司服务器或终端上的软件时，我们可以采取一些简单的措施，以确保由于该软件中的漏洞不会导致环境安全受到威胁。我们希望通过遵循我们之前提到的最小权限的基本概念，来减少攻击面。
- en: '"*Sorry, our software needs to run as admin*," the vendor tells you.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: “*抱歉，我们的软件需要以管理员身份运行*，”供应商告诉你。
- en: Your first question back to them should be "why?". You know too much to be told
    that and not question it further. Find out what the software does and why it needs
    admin access, and find out whether there's a way to mitigate against that risk.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 你回问他们的第一个问题应该是“为什么？”。你已经了解得足够多，不会仅仅被告知这一点而不继续追问。弄清楚软件是做什么的，为什么需要管理员权限，并找出是否有办法减轻这一风险。
- en: Furthermore, we've discussed vulnerability scanning at your organization in
    previous chapters, and your new on-prem software should be included in the scope.
    If you find a vulnerability through these means, it is worth starting a dialogue
    with the vendor to understand the vulnerability and to see about patching it.
    They might react poorly as a result, but in the near future, I am absolutely positive
    that it won't just be you that pushes back about bad security in their software.
    Together we can move mountains and force vendors to create software that follows
    best practices.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们在之前的章节中已经讨论过你们组织的漏洞扫描，新的本地软件应该包括在范围内。如果通过这些方式发现了漏洞，值得与供应商开始对话，了解漏洞情况并讨论如何修复。尽管他们可能会因此反应不好，但我完全相信，在不久的将来，不仅仅是你会对他们软件中的安全问题提出质疑。我们可以共同努力，迫使供应商开发符合最佳实践的软件。
- en: What about on-prem software that is open source?
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，关于开源的本地软件呢？
- en: Open source software
  id: totrans-267
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 开源软件
- en: When we talk about open source software, what we're generally referring to is
    **Free and Open Source Software** (**FOSS**). With FOSS, you're able to download
    software that has been created and hosted on various platforms such as GitHub
    or SourceForge in a way that allows the potential user to actually see the underlying
    code.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论开源软件时，我们通常指的是**自由开源软件**（**FOSS**）。借助FOSS，你可以下载已在诸如GitHub或SourceForge等平台上创建并托管的软件，这些软件允许潜在用户实际查看底层代码。
- en: The idea behind open source is that we get software that is transparent, peer-reviewed,
    and free created by people looking to solve technical (or societal) issues without
    further incentive to do so apart from altruism and potentially demonstrating mastery.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 开源的理念是，我们获得的软件是透明的，经过同行评审的，并且是免费的，开发者希望解决技术（或社会）问题，而没有其他动力，除了出于无私精神并可能展示专业知识。
- en: With that said, the events surrounding Heartbleed, which we investigated earlier
    in this chapter, were a situation stemming from the use of insecure open source
    software being widely utilized. How can we ensure the appropriate mitigations
    have been implemented during the development process of the open source tools
    and pieces of code – also known as **snippets** – that are either currently being
    used at your organization or are under consideration?
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，我们在本章之前讨论过的Heartbleed事件，正是源自广泛使用的不安全开源软件。那么，我们如何确保在开发过程中，针对开源工具和代码片段（**snippets**）已实施了适当的缓解措施？这些工具和代码片段目前正在贵组织使用，或者正在考虑使用。
- en: Additionally, we need to remember that many of our vendors are leveraging open
    source software in the process of developing their proprietary software. Let's
    keep that in mind when we're developing our VSAQs for the due diligence process.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们需要记住，我们的许多供应商在开发他们的专有软件时，正在利用开源软件。在我们为尽职调查过程开发VSAQ时，请牢记这一点。
- en: On the plus side, we have the ability to review the code. There should be requirements
    in our information security policies to ensure that the same security steps that
    we have put into place for our own software development are also applied to the
    open source software we use. This means performing dependency checks, SAST, DAST,
    vulnerability scans, and so on. Oftentimes, we'll create a security pipeline that
    automates the defined processes and security scanning steps required on any code
    or software that is deemed in scope.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 从积极的一面来看，我们有能力审查代码。我们的信息安全政策中应该有相关要求，确保我们为自己的软件开发所采取的相同安全措施，也适用于我们使用的开源软件。这意味着要进行依赖性检查、SAST、DAST、漏洞扫描等。通常，我们会创建一个安全管道，自动化定义的流程和安全扫描步骤，适用于任何被认为在范围内的代码或软件。
- en: Improving the security of in-house software
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提升内部软件的安全性
- en: Let's say in-house software can include software that has been developed by
    either your organization's in-house development team or an outsourced development
    team, as well as the open source software that your organization is leveraging.
    Although that open source software was (likely) developed by a third party, you
    have the ability to treat it as in-house-developed code and put it through the
    same assurance processes.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 假设内部软件可以包括由贵组织的内部开发团队或外包开发团队开发的软件，以及贵组织所利用的开源软件。尽管这些开源软件（很可能）是由第三方开发的，但你有能力将其视为内部开发的代码，并将其通过相同的保障流程。
- en: I would like to discuss how we might implement security controls into development
    environments and deployment pipelines to ensure any risks have been identified
    and actioned before the code reaches the *production stage*.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 我想讨论一下我们如何将安全控制措施纳入开发环境和部署管道，以确保在代码进入*生产阶段*之前，所有风险都已被识别并采取了相应的措施。
- en: Both in-house and outsourced development teams should be able to follow your
    direction when it comes to the policies you define to increase the security of
    your organization's developed software. Sometimes, outsourced teams have their
    own processes and solutions in place to provide the same level of assurance that
    you require, and other times you might need to reach an agreement to mitigate
    against any gaps.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是内部开发团队还是外包开发团队，在提高贵组织软件安全性的政策上都应该能够遵循你的指示。有时，外包团队有自己的流程和解决方案来提供与你所要求的相同级别的保障，而其他时候，你可能需要达成协议，以弥补任何差距。
- en: With that, let's look at ways we can improve the security of our in-house software.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们来看看我们如何改善内部软件的安全性。
- en: Software development life cycle
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 软件开发生命周期
- en: First, we want to implement the controls previously discussed in this chapter
    for the secure SDLC. These policies, procedures, and tools are able to ensure
    the efficient and secure development of high-quality software by your teams. You
    can design the SDLC to reflect your organization's *risk tolerance* and the idiosyncrasies
    of your existing processes, but staying in line with the general ideologies will
    help you in your quest.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们希望实施本章之前讨论过的安全SDLC控制。这些政策、程序和工具能够确保贵团队高效且安全地开发高质量的软件。你可以根据贵组织的*风险容忍度*和现有流程的特点来设计SDLC，但保持一致性理念将有助于你达成目标。
- en: With that, I don't believe it's necessary to cover all of the steps we've already
    covered earlier in this chapter, so instead, I would like to go into how we might
    implement practical controls to achieve the high-level goals we've previously
    covered.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 由于如此，我认为不有必要再详细讲解本章前面已经覆盖过的所有步骤，因此，我更希望讨论一下我们如何实施实际控制，以实现之前讨论过的高层目标。
- en: Code repositories
  id: totrans-281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码库
- en: Your organization likely uses a code repository solution to store and version-control
    any developed software. Examples of *code repositories* could include GitHub,
    Bitbucket, or GitLab, among others.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 贵组织很可能使用代码库解决方案来存储和版本控制任何开发的软件。*代码库*的例子可能包括GitHub、Bitbucket或GitLab等。
- en: Inside these tools, we have various available features and controls that ensure
    our requirements for the SDLC are met. For example, **issue trackers** allow a
    transparent discussion between developers, product team members, and other stakeholders
    on software bugs, feature requests, vulnerability discoveries, and so on. These
    issue trackers allow teams to estimate requirements, assign priorities, and give
    complexity scores to each issue, to help organize how they might be handled.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些工具中，我们提供了多种可用的功能和控制，确保我们的SDLC要求得到满足。例如，**问题跟踪器**允许开发人员、产品团队成员及其他相关方之间对软件缺陷、功能请求、漏洞发现等进行透明讨论。这些问题跟踪器可以帮助团队估算需求、分配优先级，并给每个问题打上复杂度评分，从而帮助组织如何处理它们。
- en: There are what are known as **branches**, which allow developers to actively
    develop and make changes to software in a development context, without affecting
    the main branch, which is used for production, or even potentially a development
    branch for the current sprint. You want to protect this branch from change without
    various forms of sign-off, which you can arrange to include code reviews, testing,
    and ensuring the merge is following the separation-of-duties and two-man principles.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 存在所谓的**分支**，允许开发人员在开发环境中积极开发和修改软件，而不会影响主分支（该分支用于生产环境），甚至可能是当前迭代的开发分支。你需要保护这个分支不被随意更改，除非经过各种形式的批准，例如代码审查、测试，并确保合并遵循职责分离和两人原则。
- en: Each change to the code is documented and attributed to the associated software
    engineer, allowing transparent audit processes and clear documentation of all
    approvals. All commits can be signed using public-key cryptography, providing
    non-repudiation and integrity for each engineer's incremental contribution to
    the codebase.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 每次对代码的更改都会被记录并归属于相关软件工程师，从而实现透明的审计过程和清晰的审批文档。所有提交都可以通过公钥加密技术进行签名，确保每个工程师对代码库的增量贡献具备不可否认性和完整性。
- en: Additionally, if we take into consideration the ideology of infrastructure as
    code that we previously covered, it's possible to store the configuration files
    for your organization's servers and tools in repositories and apply the same level
    of scrutiny as you would over the software that is being developed.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果我们考虑到之前讨论过的基础设施即代码的理念，就有可能将贵组织服务器和工具的配置文件存储在代码库中，并对其进行与软件开发同等严格的审查。
- en: DevSecOps pipelines
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DevSecOps流水线
- en: '**Continuous Integration and Continuous Delivery** (**CI/CD**) pipelines provide
    the automation flow aspect to ensuring only software that meets the specified
    requirements is able to be deployed to the next stage of the process, and by relying
    on the pipeline you are able to reduce developer and systems administrator access
    down to least-privilege, meaning they are not able to access or change production
    systems without following the pipeline and getting appropriate approval.'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成和持续交付**（**CI/CD**）管道为确保只有符合规定要求的软件才能部署到流程的下一阶段提供了自动化流程，并且通过依赖管道，您能够将开发人员和系统管理员的访问权限限制到最小特权，这意味着他们在没有遵循管道流程并获得适当批准的情况下，无法访问或更改生产系统。'
- en: Quite often, these pipelines are related to the term **DevSecOps**, in which
    we bake security into the DevOps life cycle through automation and pipelines.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 这些管道通常与**DevSecOps**相关，其中我们通过自动化和管道将安全性融入DevOps生命周期。
- en: 'Let''s imagine this pipeline flow for your organization''s software development
    process:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来设想一下这个管道流程，适用于贵组织的软件开发过程：
- en: A software developer uses their SSH key to access a project's Git repository,
    creates a "feature branch" off from the development code, and clones the code
    to their workstation for local development.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一名软件开发人员使用他们的SSH密钥访问项目的Git仓库，从开发代码中创建一个“功能分支”，并将代码克隆到他们的工作站进行本地开发。
- en: Their **Interactive Development Environment** (**IDE**) references secure coding
    paradigms, as well as performing regex checks for plaintext secrets and passwords,
    immediately informing the developer if any flaws are found in real time, allowing
    them to remediate before committing their code back to the repository and triggering
    a pipeline process.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们的**交互式开发环境**（**IDE**）参考安全编码范式，并执行正则表达式检查，以查找明文密码和秘密，立即在发现缺陷时通知开发人员，让他们在将代码提交回代码库并触发管道流程之前进行修复。
- en: The developer makes a change and attempts to commit that code back to the Git
    branch they created. Their access is checked to ensure they're allowed to do so,
    their change is logged, and differences are highlighted in the Git solution.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发人员进行更改，并尝试将代码提交回他们创建的Git分支。检查他们的访问权限以确保他们被允许这样做，记录他们的更改，并在Git解决方案中突出显示差异。
- en: 'The CI pipeline runs and performs the following checks:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CI管道运行并执行以下检查：
- en: '- A *dependency scanner* assesses the risk profile of any imported software.'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 一个*依赖扫描器*评估任何导入软件的风险概况。'
- en: '- *Static code analysis* is performed by a *SAST* to check for the code''s
    quality and any security risks.'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- *静态代码分析*由*SAST*执行，用于检查代码质量和任何安全风险。'
- en: '- A *secrets checker* looks for secrets and passwords stored in the code.'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 一个*秘密检查器*查找存储在代码中的秘密和密码。'
- en: '- A *container auditor* checks for any vulnerabilities in the defined *infrastructure
    as code*.'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 一个*容器审计员*检查定义的*基础设施即代码*中是否存在漏洞。'
- en: '- An ephemeral version of the updated software is deployed into a test environment,
    and a *DAST* performs the appropriate checks on the software, looking for errors,
    security vulnerabilities, and performance issues.'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 更新后的软件的短暂版本被部署到测试环境中，*DAST*执行适当的检查，寻找错误、安全漏洞和性能问题。'
- en: '- If all automated systems pass, then another developer is notified via email
    or chat, and they perform a *code review*.'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 如果所有自动化系统都通过，另一个开发人员将通过电子邮件或聊天收到通知，并进行*代码审查*。'
- en: '- If the code review is approved, a tester is notified, and the feature is
    tested by a human.'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 如果代码审查通过，测试人员将收到通知，功能将由人工进行测试。'
- en: '- If all steps are approved, the *code is merged* and the *CD pipeline* runs
    to implement the change into the next environment.'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 如果所有步骤都通过审批，*代码将合并*，并且*CD管道*将运行以将更改实施到下一个环境中。'
- en: This process requires careful implementation and defined processes and expectations
    for the various team members involved but could lead to a streamlined, secure
    development process with automation at its core.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 这一过程需要精心实施，并为参与的各个团队成员定义过程和期望，但它可能导致一个以自动化为核心的精简、安全的开发过程。
- en: Summary
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the highly interesting topic of improving the security
    of software and highlighted various methodologies we could use to ensure the software
    used inside our organization's estate is "secure enough" from a risk perspective.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了提高软件安全性的非常有趣的话题，并重点介绍了我们可以用来确保组织内使用的软件从风险角度来看“足够安全”的各种方法。
- en: To begin the chapter, we went into a few universal paradigms for software security,
    including the SDLC, and the steps required for that process to be an effective
    undertaking.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章开始时，我们讨论了一些通用的软件安全框架，包括SDLC（软件开发生命周期），以及确保这一过程有效执行所需的步骤。
- en: After that, we highlighted that we put a lot of faith into software systems
    developed by third parties, especially when the processes under which they are
    developed are opaque, such as when we procure software from a vendor that doesn't
    disclose their approach when it comes to security. We delved into how we might
    better understand the risk presented by third-party software, either as proprietary
    solutions or in the context of the open source model.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 随后，我们强调了我们在多大程度上依赖第三方开发的软件系统，尤其是当这些系统的开发过程不透明时，比如当我们从供应商处采购软件，而供应商没有披露其安全性策略时。我们深入探讨了如何更好地理解第三方软件所带来的风险，无论是专有解决方案，还是开源模型下的风险。
- en: From that, we went into how we can utilize our knowledge of the SDLC to produce
    better software in-house, with testing and automation at the heart of the solution
    to ensure scalability and efficiency in finding vulnerabilities, which could lead
    to a loss of confidentiality, integrity, or availability.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 基于此，我们探讨了如何利用SDLC的知识来在公司内部开发更好的软件，将测试和自动化作为解决方案的核心，确保在发现漏洞时具有可扩展性和高效性，这些漏洞可能会导致机密性、完整性或可用性的丧失。
- en: Overall, what we learned from this chapter was what to look for when you are
    establishing your requirements, policies, and procedures surrounding software
    development and use in your organization. With this knowledge, you're able to
    accurately measure the risk presented and respond to any residual risk that is
    deemed to be above the acceptable risk tolerance.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，本章的学习内容帮助我们理解在制定与软件开发及使用相关的要求、政策和程序时，应关注哪些方面。掌握这些知识后，你就能够准确评估风险，并应对任何超出可接受风险容忍度的残余风险。
- en: With that, you have now completed this book. Thank you so much for taking the
    time to read it! I hope you had fun and learned a few things along the way. If
    I was able to help you with your organization's security posture, I am delighted.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，你已经完成了本书的阅读。非常感谢你抽出时间阅读！希望你在阅读过程中不仅享受了乐趣，还学到了一些有用的知识。如果我能帮助你提升组织的安全态势，我感到非常高兴。
- en: I would like to take this opportunity to thank my wife, Helen, for her support
    and care along the way. Furthermore, I would like to thank all of the members
    of the Packt team who have supported me in the creation of this book, from beginning
    to end.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 我想借此机会感谢我的妻子Helen，在这一路上的支持与关怀。此外，我还要感谢Packt团队的所有成员，他们在本书的创作过程中从头到尾给予了我支持。
