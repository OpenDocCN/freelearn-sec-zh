- en: Pentest Automation Using Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 进行渗透测试自动化
- en: Folks, this is the last chapter of this book, and I would like to congratulate
    you on getting this far. Only disciplined and motivated people get to the finishing
    line, and you all have my respect. So far, you've learned many Terminal commands
    that you can execute during security tests. However, one thing that you will realize
    during pentests is that a lot of commands will just repeat over and over again,
    so why not **automate** these commands using a scripting language such as Python?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 各位，这本书的最后一章到了，我想祝贺你们走到今天这一刻。只有有纪律且有动力的人才能到达终点线，你们每一个人都值得我的尊敬。到目前为止，你们已经学习了许多可以在安全测试中执行的终端命令。然而，在渗透测试过程中你们会发现，很多命令会重复多次，那么为什么不使用像
    Python 这样的脚本语言来**自动化**这些命令呢？
- en: In this chapter, I will quickly show you how to install a Python IDE on Kali,
    and after that, we will look at a practical scenario and try to develop a program
    using Python. I will walk you through all the steps needed for you to start automating
    your penetration testing tasks, using practical examples as much as possible.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将快速演示如何在 Kali 上安装 Python IDE，之后我们将通过实际场景来开发一个使用 Python 的程序。我会带领你完成所有步骤，帮助你开始自动化渗透测试任务，并尽量使用实际示例。
- en: I created a full reference section for Python in *Appendix E. C*heck it out.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我在*附录 E*中创建了一个完整的 Python 参考部分，快去看看吧。
- en: 'Are you ready to start? First, let me give you a heads up of the contents of
    this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你准备好开始了吗？首先，让我给你介绍一下本章的内容：
- en: Learning how to install a Python IDE on Kali
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何在 Kali 上安装 Python IDE
- en: Learning how to develop an automated script in Python
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何在 Python 中开发自动化脚本
- en: Python IDE
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python IDE
- en: You will need a Python **Integrated Development Environment** (**IDE**) to develop
    your own scripts. You're not obliged to use a Python IDE, and instead, you can
    use any text editor in Kali Linux (for example, nano, vim, or gedit). However,
    using a professional IDE is a must if you want to easily develop large scripts
    that allow you to debug errors, format the source code, visualize the output,
    and detect errors even before the application is run. In this chapter, we will
    use a very popular and free Python IDE called **PyCharm**. You can find it at [https://www.jetbrains.com/pycharm/](https://www.jetbrains.com/pycharm/).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一个 Python **集成开发环境**（**IDE**）来开发你自己的脚本。你不一定非要使用 Python IDE，实际上，你可以使用 Kali
    Linux 中的任何文本编辑器（例如 nano、vim 或 gedit）。然而，如果你希望轻松开发大型脚本，能够调试错误、格式化源代码、可视化输出，并且在应用程序运行之前就能发现错误，使用专业的
    IDE 是必不可少的。在本章中，我们将使用一个非常流行且免费的 Python IDE，叫做 **PyCharm**。你可以在[https://www.jetbrains.com/pycharm/](https://www.jetbrains.com/pycharm/)找到它。
- en: 'You can also use the Python interpreter using your Terminal window. Let''s
    say you have an idea and you want to test it quickly. Open your Terminal window
    in Kali, type `python`, and then press *Enter*. Let''s look at an example. I will
    create a variable called `ip_address`, give it a value, and then print it on the
    screen:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过终端窗口使用 Python 解释器。假设你有了一个想法，并希望快速测试它。打开 Kali 中的终端窗口，输入 `python`，然后按 *Enter*。让我们看一个例子。我将创建一个名为
    `ip_address` 的变量，给它赋值，然后将其打印在屏幕上：
- en: '![](Images/b47ecd04-5c8c-42f9-ac1c-3a1981fd99f4.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b47ecd04-5c8c-42f9-ac1c-3a1981fd99f4.png)'
- en: You can see in the preceding screenshot that the default Python interpreter
    in Kali is 2.7.14, and in fact, that's the one that I will be using in this chapter.
    Yes, there is a newer version of Python (version 3), but it will not be covered
    in this book. If you would like to deepen your knowledge of Python, I advise you
    to watch some online courses to speed up the learning process and buy at least
    one book as a reference for your advanced projects as well (also, don't forget
    to check out *Appendix E*).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在前面的截图中看到，Kali 默认的 Python 解释器是 2.7.14，实际上，我将在本章使用的也是这个版本。是的，Python 有更新的版本（版本
    3），但本书不会涉及。如果你想加深对 Python 的了解，建议你观看一些在线课程，以加快学习进程，并至少购买一本书作为你高级项目的参考资料（另外，别忘了查看*附录
    E*）。
- en: Downloading and installing PyCharm
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载并安装 PyCharm
- en: 'In this section, we will download and install PyCharm on Kali:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将下载并安装 PyCharm 到 Kali 上：
- en: 'Open your browser and head straight to the download section at [https://www.jetbrains.com/pycharm/download](https://www.jetbrains.com/pycharm/download):'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器，直接进入下载区：[https://www.jetbrains.com/pycharm/download](https://www.jetbrains.com/pycharm/download)：
- en: '![](Images/c127d2ad-bcf5-49fe-bd75-d51af530a5fb.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/c127d2ad-bcf5-49fe-bd75-d51af530a5fb.png)'
- en: 'Once you are on the Download page, download the free community edition of PyCharm.
    After the download is finished, you will need to right-click on the newly downloaded
    file and select Extract Here:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你进入下载页面，下载PyCharm的免费社区版。下载完成后，你需要右键点击新下载的文件，并选择“解压到此处”：
- en: '![](Images/32cf4360-8961-46be-b376-7327027730f6.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/32cf4360-8961-46be-b376-7327027730f6.png)'
- en: 'Once you extract the archived directory, try to open the `bin` folder, then
    execute the `pycharm.sh` file:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你解压了归档目录，尝试打开`bin`文件夹，然后执行`pycharm.sh`文件：
- en: '![](Images/41e4824e-6d5b-4c97-bc2f-587e4c7fb74e.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/41e4824e-6d5b-4c97-bc2f-587e4c7fb74e.png)'
- en: After executing the preceding command, you will be prompted by a few dialogs
    to help the installation. Nothing special! All you need to do is accept the agreement
    and the default installation parameters. Don't worry, because you can edit them
    later if you change your mind. With that said, we're done with downloading and
    installing PyCharm.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述命令后，系统会提示你几个对话框来帮助安装。没什么特别的！你只需要接受协议并使用默认的安装参数。如果改变主意，别担心，你可以稍后修改它们。这样一来，我们就完成了下载和安装PyCharm的步骤。
- en: PyCharm quick overview
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyCharm快速概览
- en: 'In this section, we will try to execute a simple `Hello World` example using
    PyCharm, and we will change its configuration to use Python version 2.7 as well.
    To run it, execute the `pycharm.sh` code phrase that we executed earlier when
    we installed PyCharm:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将尝试使用PyCharm执行一个简单的`Hello World`示例，并且我们还将更改其配置以使用Python 2.7版本。要运行它，执行我们之前在安装PyCharm时执行的`pycharm.sh`命令：
- en: 'In the dialog window, click the Create New Project button. Next, select the
    path to the location where you want to save your project:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在对话框中，点击“创建新项目”按钮。接下来，选择你想保存项目的位置路径：
- en: '![](Images/038a3841-e810-4a18-9248-cb26432977a5.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/038a3841-e810-4a18-9248-cb26432977a5.png)'
- en: As you can see in the preceding screenshot, I changed the Base interpreter to
    Python 2.7 to make sure the code will compile according to this version's syntax
    specification. Also, take note that in the preceding example, I've chosen to save
    the source in the `/root/PycharmProjects/test` path. Click on the Create button
    to create the new project.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如你在前面的截图中看到的，我已将基础解释器更改为Python 2.7，以确保代码按照此版本的语法规范进行编译。此外，请注意，在前面的示例中，我选择将源文件保存在`/root/PycharmProjects/test`路径中。点击“创建”按钮以创建新项目。
- en: 'The IDE UI will open, and the first thing you will need to do is create the
    Python file. To do this, right-click on the `test` directory in the left section
    of PyCharm, choose New, then click on Python File from the menu:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IDE界面将会打开，首先你需要做的是创建Python文件。为此，右键点击PyCharm左侧的`test`目录，选择“新建”，然后从菜单中点击“Python文件”：
- en: '![](Images/4531c68b-878e-46ab-8d92-508bfec5b4ca.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/4531c68b-878e-46ab-8d92-508bfec5b4ca.png)'
- en: 'I will call the `HelloWorld` file and create it. Next, let''s try to create
    your first Python program. I will add the following simple line of code to print
    the phrase `Hello World` to the screen:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我将调用并创建`HelloWorld`文件。接下来，让我们尝试创建你的第一个Python程序。我将添加以下简单的代码行，打印`Hello World`到屏幕上：
- en: '![](Images/8bf0be0c-d363-475f-880f-ee85b54aa098.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/8bf0be0c-d363-475f-880f-ee85b54aa098.png)'
- en: 'What if you made a mistake? The IDE will let you know before you run the code
    by underlining the mistake with a red line. It will also tell you what is wrong
    with your code. Next, let''s run the `Hello World` script. To do this, select
    the Run menu and choose Run... from the list to execute the script:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你犯了错误怎么办？IDE会在你运行代码之前通过红色线条标出错误，并告诉你代码中出了什么问题。接下来，让我们运行`Hello World`脚本。为此，选择“运行”菜单，然后从列表中选择“运行...”来执行脚本：
- en: '![](Images/58f4e733-5050-4aee-8f0a-89dc40f5d875.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/58f4e733-5050-4aee-8f0a-89dc40f5d875.png)'
- en: 'If you look closely at the bottom of the IDE, you will see the output of the
    script:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细看IDE底部，你会看到脚本的输出：
- en: '![](Images/2b6d7b8f-b96f-4964-b5c9-8b7acff0082b.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/2b6d7b8f-b96f-4964-b5c9-8b7acff0082b.png)'
- en: Congratulations! You just finished building your first program using the PyCharm
    IDE. Let's go to the next section and develop the real automated script.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你刚刚完成了使用PyCharm IDE构建你的第一个程序。接下来让我们进入下一节，开发真正的自动化脚本。
- en: Penetration testing automation
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渗透测试自动化
- en: In this section, I will show you how to develop a fully functioning application
    that can automatically perform a TCP scan and  perform a service enumeration as
    well. The application will first execute an Nmap TCP scan, then we will check
    whether the FTP or HTTP ports are opened, and finally we will enumerate those
    services. I have limited this application to only FTP and HTTP ports, but you
    can add more services to your liking.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我将向您展示如何开发一个完全功能的应用程序，可以自动执行TCP扫描并执行服务枚举。该应用程序将首先执行Nmap TCP扫描，然后我们将检查FTP或HTTP端口是否打开，最后我们将枚举这些服务。我将此应用程序限制为仅限FTP和HTTP端口，但您可以根据自己的喜好添加更多服务。
- en: Automate.py in action
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Automate.py的操作
- en: I highly encourage you to go ahead and try to download the source code from
    [https://github.com/PacktPublishing/Practical-Web-Penetration-Testing](https://github.com/PacktPublishing/Practical-Web-Penetration-Testing).
    Be sure to install `gobuster` in Kali (using the `apt-get install gobuster` command).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈鼓励您前往[https://github.com/PacktPublishing/Practical-Web-Penetration-Testing](https://github.com/PacktPublishing/Practical-Web-Penetration-Testing)下载源代码。确保在Kali中安装`gobuster`（使用`apt-get
    install gobuster`命令）。
- en: 'In Kali Linux, open the Terminal window and execute the following command in
    your Terminal window (make sure you are in the same directory):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kali Linux中，打开终端窗口并在终端窗口中执行以下命令（确保您在相同目录中）：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](Images/6ff267f2-f0d4-45f2-aa12-4bf2803e80f4.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/6ff267f2-f0d4-45f2-aa12-4bf2803e80f4.png)'
- en: 'After executing the command, you will enter the target IP address that you
    want to scan, and the application will show you the progress of the scan until
    it has finished. Finally, you can check the report contents of your scan in the
    `reports` folder:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 执行命令后，您将输入要扫描的目标IP地址，应用程序将显示扫描进度，直到完成。最后，您可以在`reports`文件夹中检查扫描报告内容：
- en: '![](Images/6f7bb6a0-e6e9-461f-8530-88ba723a5351.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/6f7bb6a0-e6e9-461f-8530-88ba723a5351.png)'
- en: Utility functions
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实用函数
- en: 'In this section of the tool, I added the utility functions that we will reuse
    throughout the source code. These functions are shown in the following bullet
    list:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在工具的这一部分，我添加了我们将在整个源代码中重复使用的实用函数。这些函数显示在以下项目列表中：
- en: 'For printing the separators lines, use the following:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用以下内容打印分隔线：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For printing the colored texts on the Terminal window, use the following:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在终端窗口上打印彩色文本，请使用以下内容：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For saving the report results to a file, use the following:'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要将报告结果保存到文件中，请使用以下内容：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To execute a Terminal window command, use the following:'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要执行终端窗口命令，请使用以下内容：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To print error messages after the command''s execution, use the following:'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在命令执行后打印错误消息，请使用以下内容：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Service enumeration
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务枚举
- en: 'As I mentioned earlier, the application will enumerate the HTTP and FTP services
    after running the Nmap TCP scan (if the ports are open):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前提到的，应用程序在运行Nmap TCP扫描后将枚举HTTP和FTP服务（如果端口开放）：
- en: 'For FTP enumeration using Nmap, use the following:'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Nmap进行FTP枚举，请使用以下内容：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'For HTTP, I used Nmap for script scanning and `gobuster` to find hidden URLs:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于HTTP，我使用Nmap进行脚本扫描和`gobuster`查找隐藏的URL：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: DTO service class
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DTO服务类
- en: 'The **data transfer object** (**DTO**) service class will hold the results
    of each service that is found after a TCP scan. A service will have three criteria:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据传输对象**（**DTO**）服务类将保存TCP扫描后找到的每个服务的结果。一个服务将有三个标准：'
- en: Service port
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务端口
- en: Name
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称
- en: Description
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述
- en: 'We will call this class when using the Nmap results parser, as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Nmap结果解析器时，我们将调用这个类，如下所示：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The scanner core
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扫描器核心
- en: 'The core section will run the TCP scan using Nmap, then we parse the results,
    and finally, for all the services that are found, we call the enumerate methods
    that we talked about previously, as shown in the following list:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 核心部分将使用Nmap运行TCP扫描，然后解析结果，最后，对于找到的所有服务，我们调用之前讨论过的枚举方法，如下列表所示：
- en: 'To execute the TCP scan using Nmap, use the following:'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使用Nmap执行TCP扫描，请使用以下内容：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To parse the Nmap output results, use the following:'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要解析Nmap输出结果，请使用以下内容：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Start the enumeration process after both the TCP scan and the parsing of the
    results:'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在TCP扫描和结果解析后开始枚举过程：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Again, I invite you to download the source code from GitHub and play with it
    in your IDE in Kali Linux.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 再次邀请您从GitHub下载源代码，并在Kali Linux的IDE中进行操作。
- en: Summary
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'We''re done, folks! I hope that you loved reading this book, and to make sure
    that I can help you with any questions or comments regarding the contents of this
    book, here''s a list of contact details that you can use to communicate with me:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们完成了，朋友们！希望你们喜欢阅读这本书，并为了确保能够帮助你解答有关本书内容的任何问题或意见，以下是可以用来与我联系的联系方式：
- en: '**Email**: `gus.khawaja@guskhawaja.me`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**邮箱**: `gus.khawaja@guskhawaja.me`'
- en: '**Twitter**: `@gusKhawaja`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**推特**: `@gusKhawaja`'
- en: '**LinkedIn**: `https://ca.linkedin.com/in/guskhawaja`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**领英**: `https://ca.linkedin.com/in/guskhawaja`'
- en: '**Blog**: `http://ethicalhackingblog.com`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**博客**: `http://ethicalhackingblog.com`'
- en: '**Hacking is not a sin—it''s an art!**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**黑客不是罪恶——它是一门艺术！**'
