- en: Brute Force
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暴力破解
- en: Brute force attacks, also called exhaustive key attacks, are when you try every
    possible combination for an input until you eventually get the right combination.
    The most common example is brute forcing passwords. You can try every combination
    of characters, letters, and symbols, or you could use a dictionary list as a base
    for passwords. You can find dictionaries and prebuilt word lists based on common
    passwords online or you can create your own.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 暴力破解攻击，也叫穷举键攻击，是指尝试所有可能的输入组合，直到最终得到正确的组合。最常见的例子就是暴力破解密码。你可以尝试所有字符、字母和符号的组合，或者你可以使用字典列表作为密码的基础。你可以在网上找到基于常见密码的字典和预构建的单词列表，或者你也可以自己创建。
- en: There are different types of brute force password attacks. There are online
    attacks such as trying to log in to a website or database repeatedly. Online attacks
    are much slower due to network latency and bandwidth limitations. Services may
    also rate limit or lockout accounts after too many failed attempts. On the other
    hand, there are also offline attacks. An example of an offline attack is when
    you have a database dump full of hashed passwords on your local hard disk and
    you can brute force it with no limitation, except the physical hardware. Serious
    password crackers build computers with several powerful graphics cards tuned for
    cracking, which cost tens of thousands of dollars.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 暴力破解密码攻击有不同的类型。有在线攻击，比如反复尝试登录网站或数据库。由于网络延迟和带宽限制，在线攻击要慢得多。服务可能还会在尝试失败过多时限制速率或锁定账户。另一方面，也有离线攻击。离线攻击的一个例子是，当你在本地硬盘上有一个包含哈希密码的数据库转储时，你可以在没有限制的情况下进行暴力破解，唯一的限制是物理硬件。严肃的密码破解者会建造配备多块强大显卡的计算机来进行破解，这些计算机的成本高达数万美元。
- en: One thing to note about online brute force attacks is that they are very easy
    to detect, cause a lot of traffic, can put a heavy load on servers and even bring
    them down completely, and are illegal unless you have permission. Permission can
    be misleading when it comes to online services. For example, just because you
    have an account on a service such as Facebook does not mean you have permission
    to brute force attack your own account. Facebook still owns the servers and you
    do not have permission to attack their site even if it is only against your account.
    Even if you are running your own service such as an SSH service on an Amazon server,
    you still do not have the permission to do a brute force attack. You must request
    and get special permission for penetration testing to or from an Amazon resource.
    You can use your own virtual machines for testing locally.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 关于在线暴力破解攻击需要注意的一点是，它们非常容易被检测到，产生大量流量，可能给服务器带来巨大的负载，甚至使其完全崩溃，并且除非得到许可，否则是非法的。关于在线服务的许可可能会引起误解。例如，虽然你在像
    Facebook 这样的服务上拥有账户，并不意味着你有权限对自己的账户进行暴力破解攻击。Facebook 仍然拥有服务器，你没有权限攻击他们的网站，即使仅仅是针对你的账户。即便你在自己的服务器上运行
    SSH 服务，如 Amazon 服务器，你仍然没有进行暴力破解攻击的权限。你必须获得特别的渗透测试许可，才能对 Amazon 资源进行测试。你可以使用自己的虚拟机进行本地测试。
- en: 'The webcomic *xkcd* has a comic that perfectly relates to the topic of brute
    forcing passwords:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 网络漫画 *xkcd* 有一则漫画完美地与暴力破解密码的主题相关：
- en: '![](img/17987bbd-217b-435f-b4eb-bb536d16c4de.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17987bbd-217b-435f-b4eb-bb536d16c4de.png)'
- en: 'Source: https://xkcd.com/936/'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：https://xkcd.com/936/
- en: 'Most, if not all of these attacks, can be protected using one or more of the
    following techniques:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这些攻击中的大多数，甚至所有攻击，都可以通过以下一种或多种技术来防护：
- en: Strong passwords (ideally passphrases or keys)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强密码（理想情况下是密码短语或密钥）
- en: Implementing rate limiting/temporary lockouts on failed attempts
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在失败尝试时实施速率限制/临时锁定
- en: Using a CAPTCHA
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CAPTCHA
- en: Adding two-factor authentication
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加双因素认证
- en: Salting passwords
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对密码进行加盐处理
- en: Limiting access to the server
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制对服务器的访问
- en: 'This chapter will cover several brute force examples including the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍几个暴力破解的示例，包括以下内容：
- en: HTTP basic authentication
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP 基本认证
- en: HTML login forms
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML 登录表单
- en: SSH password authentication
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSH 密码验证
- en: Databases
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库
- en: Brute forcing HTTP basic authentication
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暴力破解 HTTP 基本认证
- en: 'HTTP basic authentication is when you provide a username and password with
    your HTTP request. You can pass it as part of the URL in modern browsers. Consider
    this example:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 基本认证是指在 HTTP 请求中提供用户名和密码。你可以在现代浏览器中将其作为 URL 的一部分传递。参考这个示例：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When adding basic authentication programmatically, the credentials are provided
    as an HTTP header named `Authorization`, which contains a value of `username:password`
    base64 encoded and prefixed with `Basic`, separated by a space. Consider the following
    example:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当以编程方式添加基本认证时，凭证会作为名为`Authorization`的HTTP头提供，该头包含一个值，即`username:password`的base64编码值，并以`Basic`为前缀，两者之间用空格分隔。请参见以下示例：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Web servers typically respond with a `401 Access Denied` code when the authentication
    fails, and they should respond with a `2xx` success code such as `200 OK`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当认证失败时，Web服务器通常会响应`401 Access Denied`代码，而成功时则应响应`2xx`成功代码，例如`200 OK`。
- en: This example will take a URL and a `username` value and attempt to log in using
    the passwords generated.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例将接受一个URL和一个`username`值，并尝试使用生成的密码进行登录。
- en: To reduce the effectiveness of attacks like these, implement a rate-limiting
    feature or account lockout feature after a number of failed log in attempts.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减少此类攻击的效果，建议在多次登录失败后实现限流功能或账户锁定功能。
- en: 'If you need to build your own password list from scratch, try starting with
    the most common passwords documented in Wikipedia at [https://en.wikipedia.org/wiki/List_of_the_most_common_passwords](https://en.wikipedia.org/wiki/List_of_the_most_common_passwords).
    Here is a short example you can save as `passwords.txt`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要从头开始构建自己的密码列表，可以尝试从维基百科上文档化的最常见密码开始，[https://en.wikipedia.org/wiki/List_of_the_most_common_passwords](https://en.wikipedia.org/wiki/List_of_the_most_common_passwords)。以下是您可以保存为`passwords.txt`的简短示例：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Save the list in the preceding code block as a text file with one password
    on each line. The name is not important since you provide the password list filename
    as a command-line argument:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 将前面代码块中的密码列表保存为一个文本文件，每行一个密码。文件名不重要，因为您会将密码列表文件名作为命令行参数提供：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Brute forcing the HTML login form
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暴力破解HTML登录表单
- en: Just about every website with a user system provides a login form on a web page.
    We can write a program that will submit the login form repeatedly. This example
    assumes that there is no CAPTCHA, rate limit, or other deterring mechanisms on
    the web application. Remember not to perform this attack against any production
    site or any site you do not own or have permission. If you want to test it, I
    recommend that you set up a local web server and test only locally.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有拥有用户系统的网站都会在网页上提供一个登录表单。我们可以编写一个程序，反复提交这个登录表单。这个示例假设该网站应用程序没有启用验证码、限制频率或其他防止攻击的机制。请记住，千万不要对任何生产网站或您没有拥有或许可的网站进行此类攻击。如果您想进行测试，建议您搭建一个本地服务器，只在本地进行测试。
- en: Every web form can be created with different names for the `username` and `password`
    fields, so the names of those fields will need to be provided on each run and
    must be specific to the URL being targeted.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 每个网页表单的`username`和`password`字段的名称可能不同，因此在每次执行时需要提供这些字段的名称，并且这些名称必须与所攻击的URL特定。
- en: View the source or inspect the target form to get the `name` attribute from
    the input elements as well as the target `action` attribute from the `form` element.
    If no action URL is provided in the `form` element, then it defaults to the current
    URL. One other important piece of information is the method used on the form.
    Login forms should be `POST`, but it is possible that they are coded poorly and
    use a `GET` method. Some login forms use JavaScript to submit the form and may
    completely bypass the standard form method. Sites that use logic like this will
    require more reverse engineering to determine what the final post destination
    really is and how the data is formatted. You can use an HTML proxy or use the
    network inspector in the browser to view the XHR requests.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 查看源代码或检查目标表单，以获取输入元素的`name`属性以及`form`元素的目标`action`属性。如果`form`元素中未提供action URL，则默认为当前URL。另一个重要的信息是表单使用的方法。登录表单应该是`POST`方法，但也有可能编码不当而使用`GET`方法。一些登录表单使用JavaScript来提交表单，并可能完全绕过标准的表单方法。使用这类逻辑的网站需要更多的逆向工程才能确定最终的提交目标是什么以及数据是如何格式化的。您可以使用HTML代理或使用浏览器中的网络检查器查看XHR请求。
- en: Later chapters will talk about web crawling and querying within the `DOM` interface
    to find specific elements based on name or CSS selectors, but this chapter will
    not discuss trying to auto-detect the form field and identify the proper input
    elements. This step must be done manually here, but, once it is identified, the
    brute force attack can run on its own.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 后面的章节将讨论网页抓取和在`DOM`接口中查询，以便根据名称或CSS选择器找到特定元素，但本章不会讨论尝试自动检测表单字段和识别正确输入元素。这一步必须在此手动完成，但一旦识别出来，暴力破解攻击就可以自行运行。
- en: To protect against attacks like these, implement a CAPTCHA system or a rate-limiting
    feature.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要防止这类攻击，可以实施验证码系统或速率限制功能。
- en: Note that every web application can have their own way of authenticating. This
    is not a one-size-fits-all solution. It provides an example of a basic `HTTP POST`
    form login, but will need to be modified slightly for different applications.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，每个Web应用程序都可以有自己的身份验证方式。这不是一种适合所有情况的解决方案。它提供了一个基本的`HTTP POST`表单登录示例，但需要稍作修改以适应不同的应用程序。
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Brute forcing SSH
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SSH的暴力破解
- en: Secure Shell or SSH supports a few authentication mechanisms. If a server only
    supports public key authentication, a brute force attempt is near futile. This
    example will only look at password authentication with SSH.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 安全外壳或SSH支持几种身份验证机制。如果服务器仅支持公钥身份验证，那么暴力破解尝试几乎是徒劳的。这个例子仅仅关注SSH的密码身份验证。
- en: To protect against attacks like these, implement rate-limiting or a tool such
    as fail2ban that locks out accounts for a short duration when a number of failed
    login attempts are detected. Also disable the root remote login. Some people like
    to put SSH on a non-standard port, but end up putting it on high number non-restricted
    ports such as `2222`, which is not a good idea. If you use a high number non privileged
    port such as `2222`, another low privilege user could hijack the port and start
    running their own service in its place if it ever went down. Put your SSH daemon
    on a port lower than `1024` if you want to change it from the default.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要防止这种攻击，可以实施速率限制或使用像fail2ban这样的工具，在检测到多次失败的登录尝试后暂时锁定账户。还要禁用root远程登录。有些人喜欢将SSH放在非标准端口上，但最终可能将其放在像`2222`这样的高端非限制端口上，这不是一个好主意。如果您使用高端非特权端口（如`2222`），那么另一个低特权用户可能会劫持该端口，并在其下运行自己的服务，如果端口崩溃则会产生这种情况。如果您想要更改端口，请将SSH守护程序放在低于`1024`的端口上，以此来更改默认设置。
- en: This attack is obviously noisy in the logs, easy to detect, and blocked by things
    such as fail2ban. If you are doing a penetration test though, checking whether
    rate limiting or account locking is present can serve as a quick way. If no rate
    limiting or temporary account lockout is configured, brute force and DDoS are
    potential risks.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这种攻击在日志中显然很嘈杂，易于检测，并且可以通过像fail2ban这样的工具进行阻止。但是如果你在进行渗透测试，检查是否存在速率限制或账户锁定功能可以作为一个快速方法。如果没有配置速率限制或临时账户锁定，暴力破解和DDoS攻击就是潜在风险。
- en: 'Running this program requires an SSH package from [golang.org](http://www.golang.org).
    You can get it using this command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此程序需要从[golang.org](http://www.golang.org)获取一个SSH包。您可以使用以下命令获取它：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After installing the `ssh` package required, you can run the following example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 安装所需的`ssh`包后，您可以运行以下示例：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Brute forcing database login
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库登录的暴力破解
- en: Database logins can be automated and brute forced just like the other methods.
    In the previous brute force examples, the majority of the code is the same. The
    major difference between the applications is the function that actually tests
    the authentication. Instead of repeating all that code again, these snippets will
    simply demonstrate how to log in to the various databases. Modify the previous
    brute force scripts to test for one of these instead of the SSH or HTTP method.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库登录可以像其他方法一样自动化和暴力破解。在前面的暴力破解示例中，大部分代码都是相同的。这些应用程序之间的主要区别在于实际测试认证的功能。而不是再次重复所有代码，这些片段将简单地演示如何登录到各种数据库。修改前面的暴力破解脚本，以测试这些数据库之一，而不是SSH或HTTP方法。
- en: To protect against this, limit access to a database to only the machines that
    need it and disable root remote login.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要防止这种情况发生，请限制数据库访问仅限于需要的机器，并禁用root远程登录。
- en: 'Go does not provide any database drivers in the standard library, only the
    interfaces. Therefore, all of these database examples require a third-party package
    from GitHub, as well as a running instance of the database to connect to. This
    book does not cover how to install and configure these database services. Each
    of these packages can be installed using the `go get` command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Go语言的标准库并未提供任何数据库驱动，只提供了接口。因此，所有这些数据库示例都需要一个来自GitHub的第三方包，以及一个正在运行的数据库实例来进行连接。本书不涉及如何安装和配置这些数据库服务。每个包可以通过`go
    get`命令进行安装：
- en: 'MySQL: [https://github.com/go-sql-driver/mysql](https://github.com/go-sql-driver/mysql)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'MySQL: [https://github.com/go-sql-driver/mysql](https://github.com/go-sql-driver/mysql)'
- en: 'MongoDB: [https://github.com/go-mgo/mgo](https://github.com/go-mgo/mgo)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'MongoDB: [https://github.com/go-mgo/mgo](https://github.com/go-mgo/mgo)'
- en: 'PostgreSQL: [https://github.com/lib/pq](https://github.com/lib/pq)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'PostgreSQL: [https://github.com/lib/pq](https://github.com/lib/pq)'
- en: 'This example combines all three database libraries and provides one tool that
    can brute force MySQL, MongoDB, or PostgreSQL. The database type is specified
    as one of the command-line arguments, along with the username, host, password
    file, and database name. MongoDB and MySQL do not require a database name such
    as PostgreSQL, so it is optional when not using the  `postgres` option. A special
    variable called `loginFunc` is created to store the login function associated
    with the specified database type. This is the first time we''ve used a variable
    to hold a function. The login function is then used to perform the brute force
    attack:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例结合了三种数据库库，并提供了一个工具，可以对MySQL、MongoDB或PostgreSQL进行暴力破解。数据库类型通过命令行参数指定，并且包括用户名、主机、密码文件和数据库名称。MongoDB和MySQL不需要像PostgreSQL那样指定数据库名称，因此在不使用`postgres`选项时，数据库名称是可选的。一个名为`loginFunc`的特殊变量被创建来存储与指定数据库类型相关的登录函数。这是我们第一次使用变量来保存函数。然后，登录函数被用来执行暴力破解攻击：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Summary
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Having read this chapter, you will now understand how a basic brute force attack
    works against different applications. You should be able to adapt the examples
    given here to attack different protocols based on your needs.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读本章后，你将理解基本的暴力破解攻击如何针对不同的应用程序工作。你应该能够根据自己的需求，将此处给出的示例调整用于攻击不同的协议。
- en: Remember, these examples can be dangerous and potentially cause a denial of
    service, and it is not recommended that you run them against production services
    unless it is for the purpose of testing your brute force safeguards. Only perform
    these tests against services that you control, have permission to test, and understand
    the repercussions. You should never use these examples or these types of attacks
    against services you don't own, or you could break laws and land yourself in serious
    legal trouble.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这些示例可能会带来危险，甚至可能导致服务拒绝（DoS）攻击，不建议你将它们应用于生产服务，除非目的是测试你的暴力破解防护措施。仅在你控制、获得测试许可且了解后果的服务上执行这些测试。你绝不能将这些示例或此类攻击用于你不拥有的服务，否则你可能会违反法律并陷入严重的法律困境。
- en: There are fine legal lines that can be hard to distinguish for tests. For example,
    if you are renting a hardware appliance, you technically do not own it, and need
    permission to test it even if it is located in your data center. Similarly, if
    you are renting hosting services from a provider such as Amazon, you must get
    their permission before performing penetration tests or you might suffer consequences
    for violating terms of service.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行测试时，有些法律界限可能很难区分。例如，如果你租用了硬件设备，从技术上讲，你并不拥有它，即便它位于你的数据中心，你也需要获得许可才能进行测试。类似地，如果你从像亚马逊这样的提供商租用托管服务，你在执行渗透测试之前必须获得他们的许可，否则可能会因违反服务条款而面临后果。
- en: In the next chapter, we will look at web applications with Go and how to harden
    them and increase security using best practices such as HTTPS, using secure cookies
    and secure HTTP headers, escaping HTML output, and adding logging. It also explores
    how to consume a web application as a client by making requests, using a client
    SSL certificate, and using proxies.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何使用Go语言构建Web应用程序，并利用HTTPS、安全Cookies和安全HTTP头、转义HTML输出和添加日志等最佳实践来加固它们并提升安全性。我们还将探讨如何作为客户端使用Web应用程序，通过发起请求、使用客户端SSL证书和使用代理来消费Web应用程序。
