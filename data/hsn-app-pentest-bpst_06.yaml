- en: Identifying Vulnerabilities Using Burp Suite
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Burp Suite识别漏洞
- en: 'Burp Suite is more than an HTTP proxy; it is a complete set of tools for detecting
    and exploiting vulnerabilities. In fact, we will use Burp Suite to explain to
    developers how these vulnerabilities work in an approach that they can understand.
    In this chapter, we will focus on how to detect vulnerabilities using Burp Suite
    and some extensions. We will be covering the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite不仅是一个HTTP代理；它是一套完整的工具，用于检测和利用漏洞。事实上，我们将使用Burp Suite向开发人员解释这些漏洞是如何工作的，以一种他们可以理解的方式。在本章中，我们将重点介绍如何使用Burp
    Suite和一些扩展来检测漏洞。我们将涵盖以下主题：
- en: Detecting SQL injection flaws
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测SQL注入漏洞
- en: Detecting OS command injection
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测操作系统命令注入
- en: Detecting **cross-site scripting** (**XSS**) vulnerabilities
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测**跨站脚本**（**XSS**）漏洞
- en: Detecting XML-related issues such as **XML External Entity** (**XXE**)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测与XML相关的问题，如**XML外部实体**（**XXE**）
- en: Detecting **Server-Side Template Injection** (**SSTI**)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测**服务器端模板注入**（**SSTI**）
- en: Detecting **Server-Side Request Forgery** (**SSRF**)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测**服务器端请求伪造**（**SSRF**）
- en: Detecting SQL injection flaws
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测SQL注入漏洞
- en: SQL injection is a vulnerability generated by weak input validation controls
    in an application. It allows a malicious user to execute arbitrary SQL code, which
    exposes the information stored, and, in some critical cases, allows complete control
    of the server where the application is residing.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: SQL注入是由应用程序中弱输入验证控件生成的漏洞。它允许恶意用户执行任意的SQL代码，从而暴露存储的信息，并在一些关键情况下允许完全控制应用程序所在的服务器。
- en: 'There are three main ways to detect SQL injections using Burp Suite: first,
    by manually inserting testing strings; second, by using the scanner; and third,
    by using an extension called CO2, which uses **sqlmap** in the background, a tool
    for exploiting and detecting SQL injections. Let''s take a look at these three
    methods.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Burp Suite检测SQL注入有三种主要方法：首先，通过手动插入测试字符串；其次，通过使用扫描程序；第三，通过使用名为CO2的扩展，该扩展在后台使用**sqlmap**，这是一种用于利用和检测SQL注入的工具。让我们来看看这三种方法。
- en: Manual detection
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动检测
- en: Manual detection means to analyze request by request, using just the **Proxy**
    tool and **Intruder** tool, to detect an error or an unexpected behavior to detect
    SQL injection.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 手动检测意味着逐个分析请求，仅使用**代理**工具和**入侵者**工具，以检测错误或意外行为以检测SQL注入。
- en: 'Imagine you have an application that allows the user to see information about
    the users registered in a database; to do that, the application will use the following
    request:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有一个应用程序，允许用户查看数据库中注册用户的信息；为此，应用程序将使用以下请求：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Scanner detection
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扫描程序检测
- en: 'The easiest way to detect a SQL injection, and any vulnerability using Burp
    Suite, is through a scanner. To use a scanner, you do the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通过扫描程序，使用Burp Suite检测SQL注入和任何漏洞的最简单方法。要使用扫描程序，请执行以下操作：
- en: 'Open Burp Suite to view the main Dashboard, as shown in the following screenshot.
    Note that this is only available in the Professional Edition; the Community Edition
    does not have Scanner as an option. If you use the Community Edition, then use
    the scanner included in ZAP Proxy (which can be found here: [https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project](https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project)):'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Burp Suite查看主要仪表板，如下面的屏幕截图所示。请注意，这仅适用于专业版；社区版没有“扫描程序”选项。如果您使用社区版，则使用ZAP代理中包含的扫描程序（可以在此处找到：[https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project](https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project)）：
- en: '![](img/a10c294b-778f-4eba-af4a-0838278a67bb.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a10c294b-778f-4eba-af4a-0838278a67bb.png)'
- en: 'In this screen, click on New scan. This button will launch the wizard to configure
    the scan; here, you can add all the URLs that you want to scan, limit the scope
    of the scan, set credentials for authenticated scans, and create specific tasks,
    such as filters. To perform an application scan, enter the URL you want to scan,
    as shown in the following screenshot:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此屏幕上，单击“新扫描”。此按钮将启动配置扫描的向导；在这里，您可以添加要扫描的所有URL，限制扫描范围，为经过身份验证的扫描设置凭据，并创建特定任务，如过滤器。要执行应用程序扫描，请输入要扫描的URL，如下面的屏幕截图所示：
- en: '![](img/f65a1186-879a-4ee1-8c68-64b164b1a5b7.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f65a1186-879a-4ee1-8c68-64b164b1a5b7.png)'
- en: 'Next, click on Application Login and add credentials for the application. In
    this case, we add the user for the website, as demonstrated in the following screenshot:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，单击“应用程序登录”并为应用程序添加凭据。在这种情况下，我们为网站添加用户，如下面的屏幕截图所示：
- en: '![](img/d04d1885-6cd6-4c9d-a7f3-e5b603712cbc.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d04d1885-6cd6-4c9d-a7f3-e5b603712cbc.png)'
- en: 'Click on the OK button and the scanner will start the detection, as shown in
    the following screenshot. Burp Suite will ask you whether it needs more information
    to perform the scan:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“确定”按钮，扫描程序将开始检测，如下面的屏幕截图所示。Burp Suite将询问您是否需要更多信息来执行扫描：
- en: '![](img/0bfa0822-e287-427a-b7ff-0619705953e6.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0bfa0822-e287-427a-b7ff-0619705953e6.png)'
- en: Now, let's move on to the next detection method, which is CO2 detection.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续下一个检测方法，即CO2检测。
- en: CO2 detection
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CO2检测
- en: 'CO2 is a popular extension for Burp Suite that integrates sqlmap, a tool developed
    in Python, which is focused toward detecting and exploiting SQL injections in
    web applications. Let''s look into the installation and working of CO2, as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: CO2是Burp Suite的热门扩展，集成了Python开发的工具sqlmap，该工具专注于检测和利用Web应用程序中的SQL注入。让我们来看一下CO2的安装和工作，如下所示：
- en: 'To install CO2, navigate to the Extender tab in Burp Suite, and then click
    on BApp Store; here, you will find a list of the latest versions, as shown in
    the following screenshot:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装CO2，请转到Burp Suite中的“扩展”选项卡，然后单击BApp Store；在这里，您将找到最新版本的列表，如下面的屏幕截图所示：
- en: '![](img/fefb4d21-10b5-4450-9d4e-b0b09e958273.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fefb4d21-10b5-4450-9d4e-b0b09e958273.png)'
- en: 'To install, click on the Install button, and a new tab will appear in your
    Burp Suite installation, as shown in the following screenshot:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装时，点击“安装”按钮，一个新的选项卡将出现在您的Burp Suite安装中，如下面的屏幕截图所示：
- en: CO2 is actually just a frontend extension for sqlmap. To work, it ...
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CO2实际上只是sqlmap的一个前端扩展。要工作，它...
- en: Detecting OS command injection
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测OS命令注入
- en: Command injection is another input validation error, which derives in the interaction
    directly with the operating system. It is usually because the application is using
    a function, such as `exec()`, `execve()`, or `system()`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 命令注入是另一个输入验证错误，直接导致与操作系统的交互。通常是因为应用程序使用函数，如`exec()`、`execve()`或`system()`。
- en: Like SQL injections and all the vulnerabilities described in this chapter, OS
    command injection could be detected by using the scanner method and following
    similar steps. So, we will describe how to detect this vulnerability in a manual
    way.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 像SQL注入和本章描述的所有漏洞一样，OS命令注入可以通过使用扫描器方法和遵循类似的步骤来检测。因此，我们将描述如何以手动方式检测此漏洞。
- en: Manual detection
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动检测
- en: To detect command injection vulnerabilities, open Burp Suite and intercept the
    request where you think there is a potential vulnerability.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要检测命令注入漏洞，请打开Burp Suite并拦截您认为存在潜在漏洞的请求。
- en: We think there is a vulnerability in the IP parameter. The normal application's
    flow is that the user inserts an IP address, and then the application executes
    a ping to this IP address. If we try to imagine what is happening in the backend,
    we can suppose that the IP parameter is received by a variable in PHP; then it
    is concatenated with the string ping to create a string that contains the command
    and the IP address.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们认为IP参数存在漏洞。正常应用程序流程是用户插入IP地址，然后应用程序执行对此IP地址的ping。如果我们试图想象后端发生了什么，我们可以假设IP参数被PHP中的一个变量接收；然后它与字符串ping连接起来，创建一个包含命令和IP地址的字符串。
- en: Finally, this complete string is passed as a parameter to a function in charge
    to execute in a low-level command. So, if the IP parameter is not validated in
    a correct way ...
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这个完整的字符串作为参数传递给一个负责在低级命令中执行的函数。因此，如果IP参数没有以正确的方式验证...
- en: Detecting XSS vulnerabilities
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测XSS漏洞
- en: 'XSS has three different types, but all of them have one thing in common—they
    derive from the input validation error to manage characters that are used to inject
    JavaScript code or HTML tags. So, we can use some inputs as shown in the following
    screenshot (which is a cheat sheet from the OWASP project), and add to the Intruder
    tool as payload:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: XSS有三种不同的类型，但它们都有一个共同点——它们源于输入验证错误，以管理用于注入JavaScript代码或HTML标记的字符。因此，我们可以使用一些输入，如下面的屏幕截图所示（这是OWASP项目的备忘单），并将其添加到Intruder工具作为负载：
- en: '![](img/9c3bedb9-5c5b-454a-94d3-8072437cc666.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9c3bedb9-5c5b-454a-94d3-8072437cc666.png)'
- en: A cheat sheet from the OWASP project
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP项目的备忘单
- en: The way to detect XSS vulnerabilities is to find these codes without encoding
    or modifications in the responded HTML or that we did not get an error after injecting
    the testing strings.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 检测XSS漏洞的方法是在响应的HTML中找到这些代码，而不进行编码或修改，或者在注入测试字符串后没有收到错误。
- en: 'To add the cheat sheet, use a similar process to adding the payload list to
    Intruder. Open the Intruder tool, click on the Payloads tab, and then select the
    Load button. Finally, mark all the parameters that you think are vulnerable, then
    click on Start attack, as shown in the following screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加备忘单，请使用类似的过程将负载列表添加到Intruder中。打开Intruder工具，单击负载选项卡，然后选择加载按钮。最后，标记您认为有漏洞的所有参数，然后单击开始攻击，如下面的屏幕截图所示：
- en: '![](img/def13e36-7a2d-41e2-964d-173d46fc76d6.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/def13e36-7a2d-41e2-964d-173d46fc76d6.png)'
- en: List of vulnerable parameters
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 易受攻击的参数列表
- en: In the preceding screenshot, we can see how all the strings were launched by
    Intruder, and how one of them is affecting the response in a confirmed XSS.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们可以看到Intruder启动了所有字符串，以及其中一个字符串是如何影响确认的XSS响应的。
- en: Detecting XML-related issues, such as XXE
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测与XML相关的问题，如XXE
- en: 'The XML issues need that the request accepts XML, so we need this information
    in the header''s `content-type`, as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: XML问题需要请求接受XML，因此我们需要在头部的`content-type`中包含这些信息，如下所示：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can configure a filter in Burp Suite to detect requests that have this information
    in the headers. To configure the filter, go to the Target tool, and then click
    on the Filter bar. Once there, select the XML file format, and if you want, write
    the `content-type` string that we know all requests need to have, as shown in
    the following screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在Burp Suite中配置过滤器，以便检测请求头中包含这些信息的请求。要配置过滤器，请转到目标工具，然后单击过滤器栏。一旦在那里，选择XML文件格式，如果需要，写入我们知道所有请求都需要具有的`content-type`字符串，如下面的屏幕截图所示：
- en: '![](img/c94ff119-9be8-4cde-a710-a66585b1f416.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c94ff119-9be8-4cde-a710-a66585b1f416.png)'
- en: After filtering the request that could be vulnerable, add common testing strings
    as a payload list in the Intruder ...
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在过滤可能存在漏洞的请求之后，在Intruder中的负载列表中添加常见的测试字符串...
- en: Detecting SSTI
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测SSTI
- en: 'SSTIvulnerabilities depend a lot on the engine used by the tested application.
    However, the main idea in template engines is that you pass a parameter, which
    is interpreted by the engine, and it creates the view. So, most engines are waiting
    for a text to parse it and display it. Take the following as an example:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: SSTI漏洞在很大程度上取决于被测试应用程序使用的引擎。但是，在模板引擎中的主要思想是传递一个参数，由引擎解释，并创建视图。因此，大多数引擎都在等待解析和显示文本。请以以下内容为例：
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the preceding example, the application receives a string and the engine
    automatically adds HTML tags to display it. Also, these engines can interpret
    values passed as parameters, such as operators. For example:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，应用程序接收一个字符串，引擎会自动添加HTML标记以显示它。此外，这些引擎可以解释作为参数传递的值，如运算符。例如：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In this case, the engine evaluates the `*` operator with the values passed.
    So, if you pass an unexpected string as a parameter, it could be reflected, or
    it could be used to extract sensible information, as can be seen in the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，引擎使用传递的值评估`*`运算符。因此，如果您将意外的字符串作为参数传递，它可能会被反射，或者可能被用于提取敏感信息，如下所示：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here, the engine is interpreting the parameter to show the information related,
    as it was a query. James Kettle, in 2015, created a map to detect SSTI vulnerabilities
    depending on the engine used. The following screenshot shows Kettle''s map to
    detect whether the SSTI exists, inferring from the inputs:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，引擎正在解释参数以显示相关信息，就像是一个查询一样。詹姆斯·凯特尔（James Kettle）在2015年创建了一张地图，以依赖于使用的引擎来检测SSTI漏洞。以下屏幕截图显示了凯特尔的地图，以检测SSTI是否存在，并从输入中推断：
- en: '![](img/2af73839-4666-408d-b1d3-d05c0e732cea.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2af73839-4666-408d-b1d3-d05c0e732cea.png)'
- en: Detecting SSTI vulnerabilities using Burp Suite needs to be manual, and involves
    catching and entering the testing parameters to detect, first, what the engine
    used is, and then, whether it is vulnerable.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Burp Suite检测SSTI漏洞需要手动进行，并涉及捕获和输入测试参数以首先检测使用的引擎，然后检测它是否容易受攻击。
- en: Detecting SSRF
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测SSRF
- en: 'The basic idea behind SSRF is to find access to internal resources that can
    be manipulated to access unauthorized resources. For example, imagine that we
    have the following URL:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: SSRF的基本思想是找到可以操纵以访问未经授权资源的内部资源的访问权限。例如，想象一下我们有以下URL：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this case, we have a website that is public behind the `site.com` domain,
    and it processes something using the information retrieved from an internal IP.
    If the developer does not validate the `url` parameter, a malicious user can access unauthorized
    resources located in the internal IP, or maybe in others that have the same visibility.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们有一个网站，它在`site.com`域名后面是公开的，并且使用从内部IP检索的信息进行处理。如果开发人员不验证`url`参数，恶意用户可以访问位于内部IP中的未经授权的资源，或者可能是具有相同可见性的其他资源。
- en: To detect this kind of vulnerability, we can use Burp Suite's Scanner, which
    will detect them automatically, or apply a filter in the Target tool to find requests
    that ...
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要检测这种类型的漏洞，我们可以使用Burp Suite的扫描器，它将自动检测它们，或者在目标工具中应用过滤器以查找请求...
- en: Summary
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the tools Burp Suite uses to detect the most
    common vulnerabilities related to input validation weaknesses.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了Burp Suite用于检测与输入验证弱点相关的最常见漏洞的工具。
- en: Most of them are detected using Burp Suite's Scanner, which is an active scanner
    that works while the pentester is navigating the application. So, it is more interactive
    and has more access to hide areas than other scanners. However, this vulnerabilities
    could be detected by sending crafted requests and putting attention in the response.
    For this task, the Intruder tool is the most useful of Burp Suite's tools.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数漏洞都是使用Burp Suite的扫描器检测到的，这是一种在渗透测试人员浏览应用程序时工作的主动扫描器。因此，它更具交互性，并且比其他扫描器具有更多的隐藏区域访问权限。然而，这些漏洞可以通过发送精心制作的请求并注意响应来检测。对于这项任务，Burp
    Suite的Intruder工具是最有用的工具。
- en: In the next chapter, we will be looking for errors that are not related to input
    validation.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将寻找与输入验证无关的错误。
