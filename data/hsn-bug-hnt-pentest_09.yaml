- en: Framework and Application-Specific Vulnerabilities
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 框架和应用程序特定的漏洞
- en: Identifying a framework or application-specific vulnerability, including Known
    Component Vulnerabilities (identified by their CVE designation, which we'll discuss
    later), is a tricky business.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 识别框架或应用程序特定的漏洞，包括已知组件漏洞（通过CVE标识符来识别，我们稍后会讨论）是非常棘手的。
- en: It's a universal stipulation of bug bounty programs that companies don't reward
    the same vulnerability twice—the first researcher to disclose a vulnerability
    is the only one that's rewarded. This goes hand in hand with the fact that companies
    usually won't reward already publicly disclosed bugs within two weeks of the discovery
    of the original zero-day (like everyone, they need time to deploy a patch), and
    they aren't interested in vendor-level vulnerabilities in third-party libraries.
    This might seem like a waste of time, then, except if we take two important points
    into consideration.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是所有漏洞悬赏计划的普遍规定，即公司不会对相同的漏洞进行两次奖励——第一个披露漏洞的研究员才会获得奖励。这与公司通常不会奖励在原始零日漏洞发现后两周内已经公开披露的漏洞是密切相关的（就像所有公司一样，他们需要时间来部署补丁），而且他们对第三方库中的供应商级漏洞不感兴趣。这看起来可能是浪费时间，除非我们考虑到两个重要的因素。
- en: The cost of adoption is low. Since known component vulnerabilities are, well,
    known, it's much easier to build a tool to reliably find them, as opposed to less
    defined weaknesses in the architecture or logic of an application that require
    stepping through a UI manually. As with our example with Retire.js in [Chapter
    3](23759e04-8982-41fd-b936-580865a51439.xhtml), *Preparing for an Engagement*,  where
    we built a short set of scripts for detecting and reporting on client-side vulnerabilities
    in things like insecure jQuery libraries, it's a lightweight step that can be
    incorporated into any environment where we have access to the client-side source.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 采用的成本很低。由于已知的组件漏洞是显而易见的，因此构建一个工具来可靠地发现这些漏洞要比处理架构或应用程序逻辑中的不太明确的弱点更容易，后者需要手动通过用户界面逐步检查。正如我们在[第三章](23759e04-8982-41fd-b936-580865a51439.xhtml)《准备参与》中举的例子一样，我们为检测和报告客户端漏洞（如不安全的jQuery库）编写了一些简单的脚本，这是一项轻量级的工作，可以融入到任何有权限访问客户端源代码的环境中。
- en: Understanding security posture is important. The term security posture is shorthand
    for the general capability of an application or network to prevent, detect, and
    respond to attacks. If you open up your diagnostic tools and see right away that
    there are several critical reported vulnerabilities in either the framework, language
    version, or a vendor service, that can tell you a lot about the security practices
    at that company. If so many low-hanging fruit are within reach, is their bounty
    program still young? Do they have an established policy for security life cycle
    management? If there's a path to an attack scenario from the discovered vulnerabilities—great!—but
    even if that's not the case, the information is valuable, for what it telegraphs
    might be lurking just beneath the surface.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 了解安全态势非常重要。安全态势这个术语是应用程序或网络防止、检测和响应攻击的总体能力的简称。如果你打开诊断工具，立刻发现框架、语言版本或供应商服务中存在多个关键报告漏洞，那就能告诉你很多关于该公司安全实践的信息。如果有这么多容易解决的问题，那么他们的漏洞悬赏计划还年轻吗？他们是否有成熟的安全生命周期管理政策？如果从已发现的漏洞中能找到攻击场景的路径——太好了！——即使不是这种情况，这些信息也是有价值的，因为它们可能暗示着潜在的威胁。
- en: 'It''s all about the attack scenario. This is the most essential point: most
    guidelines for KCVs get thrown out the window in the face of a valid attack scenario.
    Companies aren''t interested in contributing a patch upstream just to improve
    the jQuery attack surface—that''s a lot of time spent validating, communicating
    about, and fixing a vulnerability ultimately on behalf of another organization.
    But if you can convince them that this affects their business, it can provoke
    a change (contributing a patch, updating the component, switching to a different
    solution for that service) that will trigger your reward.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 关键在于攻击场景。这是最本质的一点：面对有效的攻击场景时，大多数KCV指南都要被抛到一边。公司不愿仅仅为了改善jQuery攻击面而贡献一个补丁——那会花费大量时间来验证、沟通和修复最终属于其他组织的漏洞。但是，如果你能说服他们这个漏洞影响到他们的业务，就可能引发改变（贡献补丁、更新组件、切换到另一种解决方案）并触发奖励。
- en: 'This chapter will explain how to:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将解释如何：
- en: Integrate known component vulnerability scanning into your Burp-based workflow
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将已知组件漏洞扫描集成到你的基于Burp的工作流中
- en: Use tools to find application-specific problems in software like WordPress,
    Django, and Ruby on Rails
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用工具查找像WordPress、Django和Ruby on Rails这样的软件中的应用程序特定问题
- en: Take a component-specific vulnerability from discovery, to validation, to submission
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从发现、验证到提交一个组件特定的漏洞
- en: Technical Requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this section, we'll be working with Burp and some of its extensions to set
    up KCV detection automatically. We'll also be relying on our usual browser setup
    to act as the Burp proxy. We'll also be using WPScan as both a CLI and a Burp
    extension.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一节中，我们将与Burp及其一些扩展合作，自动设置KCV检测。我们还将依赖我们常用的浏览器设置作为Burp代理。我们还将使用WPScan，既作为CLI工具，也作为Burp扩展。
- en: The WPScan CLI comes with a variety of install options. Once again, we'll be
    using the container software Docker to download and run the `wpscan` CLI from
    within the context of a custom execution context packaged with everything it needs.
    Docker allows us to port this workflow anywhere we can install Docker, meaning
    that we don't need to worry about OS-specific behavior. And because Docker caches
    the WPScan CLI image, we can use it with only a marginal performance hit over
    a native installation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: WPScan CLI提供了多种安装选项。我们将再次使用容器软件Docker，从自定义执行上下文中下载并运行`wpscan` CLI，这个上下文打包了所需的一切。Docker使我们可以将此工作流移植到任何可以安装Docker的地方，这意味着我们不需要担心操作系统特定的行为。而且，因为Docker会缓存WPScan
    CLI镜像，所以我们可以使用它，性能损失仅比本地安装略大。
- en: 'Assuming that Docker is installed, to pull down the latest WPScan CLI image,
    simply run this quick command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 假设已经安装了Docker，若要拉取最新的WPScan CLI镜像，只需运行以下简单命令：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then you have all the dependencies necessary to access the CLI using the `docker
    run` command to bootstrap `wpscan`. Here''s an example one-liner straight from
    Docker Hub image''s documentation:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你拥有所有必要的依赖项，可以使用`docker run`命令启动`wpscan` CLI。这里有一个直接来自Docker Hub镜像文档的示例单行命令：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For testing purposes, the same team behind WPScan also provides a deliberately
    vulnerable WordPress install, which is similarly run off of a Docker container.
    To build the image locally, clone the GitHub repository ([https://github.com/wpscanteam/VulnerableWordPress](https://github.com/wpscanteam/VulnerableWordPress))
    and navigate into its root directory. Then, run the following commands:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试目的，WPScan背后的同一个团队还提供了一个故意包含漏洞的WordPress安装，它同样运行在Docker容器中。要在本地构建该镜像，首先克隆GitHub仓库（[https://github.com/wpscanteam/VulnerableWordPress](https://github.com/wpscanteam/VulnerableWordPress)），然后进入其根目录。接着，运行以下命令：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, you should have a WordPress installation ready to be set up at `localhost:80`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该有一个准备好在`localhost:80`进行设置的WordPress安装：
- en: '![](assets/36ee790f-3b09-4a6a-bd74-cf867ac1a47b.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/36ee790f-3b09-4a6a-bd74-cf867ac1a47b.png)'
- en: Known Component Vulnerabilities and CVEs – A Quick Refresher
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 已知组件漏洞和CVE - 简要回顾
- en: The **Common Vulnerabilities and Exposures** (**CVE**) system describes itself
    as a dictionary that provides definitions for publicly disclosed vulnerabilities
    and disclosures. Its goal is to make it easier to share cybersecurity-related
    data across groups and technologies, understanding that the benefit of open coordination
    outweighs the risk of publicly advertising valid attacks. It's useful to keep
    in mind that CVE is a method for linking vulnerability databases and not a vulnerability
    database itself. That said, you'll often find CVE IDs to links to CVE information
    pages integrated into tools designed to detect known vulnerabilities. CVE entries
    are even built into the U.S National Vulnerability Database.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**公共漏洞和暴露**（**CVE**）系统自我描述为一本字典，提供已公开披露的漏洞和披露的定义。它的目标是让跨团体和技术共享网络安全相关数据变得更加容易，理解开放协调的好处大于公开广告有效攻击的风险。值得记住的是，CVE是一种将漏洞数据库连接起来的方法，而不是一个漏洞数据库本身。也就是说，你通常会发现CVE
    ID与集成到检测已知漏洞的工具中的CVE信息页面有链接。CVE条目甚至已集成到美国国家漏洞数据库中。'
- en: 'The structure of a CVE ID is direct: the identifier consists of the year plus
    a four digit (or more) integer. Until early 2015, CVE identifiers could only have
    a unique integer up to four digits long, but because that limits the total number
    of assignable IDs to 9,999 a year, it had to be expanded, and now can be of any
    length.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: CVE ID的结构直接明了：该标识符由年份加上四位数（或更多）整数组成。直到2015年初，CVE标识符只能有最多四位数的唯一整数，但由于这限制了每年可分配的ID总数为9,999个，因此必须扩展，现在可以是任意长度。
- en: 'In addition to its ID, each CVE also typically comes packaged with certain
    information:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 除了其ID外，每个CVE通常还附带某些信息：
- en: An indication of whether the CVE has an entry or candidate status
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指示CVE是否具有条目或候选状态
- en: A brief description of the vulnerability or exposure
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 漏洞或曝光的简要描述
- en: Any appropriate references (for example, vulnerability reports, advisories from
    the OVAL-ID)
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何适当的参考资料（例如，来自OVAL-ID的漏洞报告、警报）
- en: 'OVAL-IDs are the unique identifiers that distinguish OVAL definitions. From
    the OVAL website:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: OVAL-ID是区分OVAL定义的唯一标识符。来自OVAL网站：
- en: OVAL definitions are standardized, machine-readable tests written in the **Open
    Vulnerability and Assessment Language** (**OVAL**®) that check computer systems
    for the presence of software vulnerabilities, configuration issues, programs,
    and patches.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: OVAL定义是用**开放性漏洞和评估语言**（**OVAL**®）编写的标准化、机器可读的测试，用于检查计算机系统中软件漏洞、配置问题、程序和补丁的存在。
- en: OVAL definition tests, like CVEs, are an attempt to coordinate an open, transparent
    system for standardizing pentesting vocabulary, and allow for more sharing between
    ethical hackers and their tools.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: OVAL定义测试，如CVE，旨在协调一个开放、透明的系统，用于标准化渗透测试词汇，并允许更多的共享，以及道德黑客和他们的工具之间的更多共享。
- en: This quick introduction/refresher should come in handy the next time that you
    use any number of tools that leverage CVE as their primary security reference.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个快速介绍/复习应该在下次使用任何利用CVE作为主要安全参考的工具时派上用场。
- en: WordPress – Using WPScan
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WordPress – 使用WPScan
- en: According to WordPress, their framework powers 31% of all sites. The open-source
    CMS-for-everything is a titan, providing the basic engine for hobbyist and commercial
    sites alike, from everything to your uncle's blog to the White House landing page.
    As such, it's an incredibly large target for pentesters and hackers everywhere.
    WordPress, with its myriad of plugins and configuration options, provides a large
    attack surface that, often managed by administrators with little technical experience,
    can be tricky to secure. Every shoddily-coded plugins, monkey-patched pieces of
    WP core, or ancient installations can be the foothold necessary for an attacker
    to deface or compromise a WP site.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 根据WordPress的说法，他们的框架支持所有网站的31%。这个面向一切的开源CMS是一个巨头，为业余爱好者和商业网站提供基本引擎，从你叔叔的博客到白宫的登陆页面。因此，它是一个极具吸引力的目标，供渗透测试人员和黑客随处可见。WordPress，带有其众多插件和配置选项，提供了一个庞大的攻击面，通常由技术经验有限的管理员管理，可能难以保护。每个编写不良的插件、WP核心的猴子补丁或古老的安装都可能成为攻击者入侵或破坏WP站点所需的立足点。
- en: WPScan functionality comes packaged in a few different tools. For our purposes,
    the most important are the containerized Docker command-line interface and the
    Burp extension.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: WPScan功能打包在几种不同的工具中。对于我们的目的，最重要的是容器化的Docker命令行界面和Burp扩展。
- en: WPScan as a Dockerized CLI
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将WPScan作为Docker化的CLI
- en: The advantage of using WPScan as a Dockerized CLI is that we can still take
    full advantage of the CLI—allowing us to embed the script in a larger automation
    setup—while not having to worry about dependency management issues like keeping
    our Ruby version up-to-date. We can even write a simple wrapper around the `docker
    run` command so that we don't need to enter so much boilerplate every time we
    use the script.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 将WPScan作为Docker化的CLI使用的优势在于，我们仍然可以充分利用CLI——允许我们将脚本嵌入到更大的自动化设置中——而不必担心依赖管理问题，比如保持我们的Ruby版本最新。我们甚至可以编写一个简单的包装器，围绕`docker
    run`命令，这样每次使用脚本时就不需要输入太多样板内容。
- en: 'For example, if we create a shell script called `wpscan.sh` and call our Docker
    command, passing in the `"$@"` character so that all of our flags and command-line
    arguments get passed through the shell script to the `docker` command, this is
    what we come up with:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们创建一个名为`wpscan.sh`的shell脚本，并调用我们的Docker命令，传递`"$@"`字符，以便将所有标志和命令行参数通过shell脚本传递给`docker`命令，我们得到的结果如下：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, we can make our wrapper script executable with `chmod`, and `symlink`
    it to our `/usr/local/bin` so that we can access it in our `$PATH`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用`chmod`使我们的包装器脚本可执行，并将其`symlink`到我们的`/usr/local/bin`，这样我们就可以在我们的`$PATH`中访问它：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Done. Now, we can call the CLI script via our `wpscan` wrapper using the same
    syntax as if we had installed WPScan as a gem, but without having to keep track
    of which Ruby version we''d installed the gem to, or having to make sure that
    we had `ffi` or any other dependency libraries installed:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 完成。现在，我们可以通过我们的`wpscan`包装器调用 CLI 脚本，使用与安装 WPScan 作为 gem 时相同的语法，但不需要跟踪安装 gem
    的 Ruby 版本，也不需要确保安装了`ffi`或其他依赖库：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Checking our options by passing our `wpscan` wrapper the `--help` flag, here''s
    what we see:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传递`--help`标志来检查我们的选项，以下是我们看到的内容：
- en: '![](assets/c39b1612-a162-4323-9387-b54a69e323b7.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c39b1612-a162-4323-9387-b54a69e323b7.png)'
- en: 'Now, in order to test out this functionality, let''s bootstrap our vulnerable
    WordPress instance. If you followed the instructions in our *Technical requirements*
    section, you should already have a WP instance ready to set up on `localhost:80`.
    After selecting our language of choice, you should be taken to a form for basic
    information about your site (your site title, admin superuser username, notification
    email, and so on):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了测试这个功能，让我们启动我们的脆弱 WordPress 实例。如果你按照了我们*技术要求*部分的说明，你应该已经有一个准备好在`localhost:80`上设置的
    WP 实例了。选择你希望使用的语言后，你应该会看到一个用于填写基本站点信息的表单（站点标题、管理员超级用户名、通知邮件等）：
- en: '![](assets/cac735c5-07dd-469c-959a-21dd05e08722.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cac735c5-07dd-469c-959a-21dd05e08722.png)'
- en: 'Filling that out, you''ll be redirected to a success page:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 填写完毕后，你将被重定向到一个成功页面：
- en: '![](assets/071ddc82-40f9-4776-8b2b-26a77fb14754.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/071ddc82-40f9-4776-8b2b-26a77fb14754.png)'
- en: 'Once you''ve logged in for the first time, navigate over to the plain `localhost:80`
    and view the actual home page of your WP site:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次登录后，导航到普通的`localhost:80`，查看你 WP 站点的实际主页：
- en: '![](assets/21fa78f8-01a3-43f5-b280-7fcba4a74224.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/21fa78f8-01a3-43f5-b280-7fcba4a74224.png)'
- en: Keep in mind that you can't ping `localhost:80` from `wpscan` because it's executing
    from inside the Docker container. In order to feed our Dockerized WP instance
    to our Dockerized WPScanning service, we need to use the URL of the Docker container
    running WordPress.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，你不能从`wpscan`中 ping `localhost:80`，因为它是从 Docker 容器内执行的。为了将我们的 Docker 化 WordPress
    实例提供给 Docker 化的 WPScanning 服务，我们需要使用运行 WordPress 的 Docker 容器的 URL。
- en: 'We can find the Docker host IP by using `docker ps` to find the container ID
    of the Docker process running WP. We can then run `docker inspect <CONTAINER_ID>`
    to return some JSON with the IP address. For us, that IP address is `172.17.0.2`.
    Then, we run this command to scan our vulnerable WordPress site. If we were targeting
    a site on the public internet, we could simply skip this step:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用`docker ps`来查找运行 WordPress 的 Docker 进程的容器 ID，然后运行`docker inspect <CONTAINER_ID>`返回包含
    IP 地址的 JSON 信息。对于我们来说，这个 IP 地址是`172.17.0.2`。接着，我们运行此命令扫描我们脆弱的 WordPress 站点。如果我们针对的是一个公共互联网站点，我们可以跳过这一步：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Running the preceding command, this is what the output of our scan looks like:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述命令后，这就是我们扫描的输出结果：
- en: '![](assets/aaf079be-e99d-40f2-88cf-b725c362af17.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aaf079be-e99d-40f2-88cf-b725c362af17.png)'
- en: 'You can immediately see several findings worth following up—`Interesting entry
    from robots.txt: http://172.17.0.2/super-secret-admin-page/` seems particularly
    interesting, considering that enticing URI. But if we continue down the list of
    vulnerabilities, we will be able to see several config files. Looking for authentication
    credentials, hidden directories, and other goodies, we navigate to one of the
    exposed config files, `wp-config.txt`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以立刻看到一些值得跟进的发现——`robots.txt 中的有趣条目：http://172.17.0.2/super-secret-admin-page/`看起来特别有意思，考虑到那个诱人的
    URI。但如果我们继续查看漏洞列表，我们将能看到几个配置文件。我们寻找认证凭据、隐藏的目录和其他有用的东西，导航到一个暴露的配置文件，`wp-config.txt`：
- en: '![](assets/549b7b47-07f7-4d46-96a4-2187d9d5edd7.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/549b7b47-07f7-4d46-96a4-2187d9d5edd7.png)'
- en: And we find exactly what we're looking for! With site-level admin keys and all
    of our salt hashes, we have discovered the cryptographic keys to the kingdom.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们找到了我们想要的东西！通过站点级别的管理员密钥和所有的盐哈希，我们已经发现了进入王国的加密密钥。
- en: Burp and WPScan
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Burp 和 WPScan
- en: One of the advantages of using the Burp extension method of applying WPScan
    is that it makes it easier to integrate the scanner within the larger Burp tool
    set. If you're relying heavily on manually flagging pages as in-scope, for example,
    you can have WPScan piggyback on that information to ensure that you're consistently
    staying on target throughout the engagement.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Burp 扩展方法应用 WPScan 的一个优势是，它使得将扫描器集成到更大的 Burp 工具集中的过程更加简便。例如，如果你依赖于手动标记页面为有效范围，那么你可以让
    WPScan 利用这些信息，确保你在整个渗透测试过程中始终聚焦目标。
- en: 'Setting up WPScan to integrate with Burp is easy. The first thing you need
    to do is navigate to the BApp Store to download the extension:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 WPScan 与 Burp 集成非常简单。你首先需要做的就是前往 BApp Store 下载扩展：
- en: '![](assets/305a223b-7bba-4296-956c-650500cceb9c.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/305a223b-7bba-4296-956c-650500cceb9c.png)'
- en: 'You can also load extensions manually by selecting the extension file (it can
    be in either Java, Python, or Ruby) from within the manual install modal:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过手动安装弹窗选择扩展文件（可以是 Java、Python 或 Ruby 语言）来手动加载扩展：
- en: '![](assets/89381698-4fc1-44f5-9c8e-107eb52d56e0.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/89381698-4fc1-44f5-9c8e-107eb52d56e0.png)'
- en: 'You might find that you need to install the environment for the extension.
    Setting up each language is easy: in the case of Python, we follow the link to
    the Jython (a Python interpreter implemented in Java) home page and follow the
    installation instructions. Then, in our Options section of the Extender Tab, we
    can add the path to the Jython `jar` file:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能发现需要为扩展安装相应的环境。设置每种语言都很简单：以 Python 为例，我们访问 Jython（一个在 Java 中实现的 Python 解释器）的主页并按照安装说明进行操作。然后，在扩展选项卡中的“选项”部分，我们可以添加
    Jython `jar` 文件的路径：
- en: '![](assets/8788dc79-53cd-47b6-b455-89ed70c66684.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8788dc79-53cd-47b6-b455-89ed70c66684.png)'
- en: 'Now, we can download the WPScanner extension from the BApp Store. It should
    be as easy as clicking the install button:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以从 BApp Store 下载 WPScanner 扩展。只需点击安装按钮就能轻松完成：
- en: '![](assets/ef6169c1-a690-4e2e-a509-27451293f27c.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ef6169c1-a690-4e2e-a509-27451293f27c.png)'
- en: 'Once it''s finished installing, we should see a WordPress Scanner tab. If we
    click on it, we will be able to see settings and output panels, ready for analysis:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们应该能看到一个 WordPress 扫描器标签。如果点击它，我们将能够看到设置和输出面板，准备好进行分析：
- en: '![](assets/410b4cbf-b233-4ddd-9bca-c6596d2559db.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/410b4cbf-b233-4ddd-9bca-c6596d2559db.png)'
- en: 'The WPScanner extension piggybacks on the passive analysis Burp does as you
    browse through a site using your proxy browser. After clicking through a couple
    of pages, viewing our sample post, and opening the comment submission field of
    our vulnerable WP instance, we can see that our issues list has already been populated
    with several vulnerabilities:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: WPScanner 扩展依赖于 Burp 在你使用代理浏览器浏览网站时进行的被动分析。在点击几个页面、查看我们的示例文章并打开我们脆弱的 WP 实例的评论提交字段后，我们可以看到问题列表已经被多个漏洞填充：
- en: '![](assets/fef8ccc2-67dd-4fab-b416-31a44eee6568.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fef8ccc2-67dd-4fab-b416-31a44eee6568.png)'
- en: Going through the issue list, we can see that we get a short category description
    and several links to blogs, GitHub pull requests, and security references with
    more information. We also get the path to the vulnerability, the severity, and
    a confidence level in the finding.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览问题列表时，我们可以看到每个类别的简短描述，并且有多个指向博客、GitHub 拉取请求和安全参考的链接，提供更多信息。我们还会看到漏洞路径、严重性以及对发现结果的信心等级。
- en: 'Perusing this list, we can see several varieties of XSS. Investigating further,
    let''s try an `svg` tag-related vulnerability in the comment submission field,
    probing another part of the site''s content sanitation functionality—we know that
    the WP instance is vulnerable, of course, but we are still working through the
    location and nature of the bugs. Here''s our snippet:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览这个列表时，我们可以看到几种不同的 XSS 类型。进一步调查后，让我们尝试在评论提交字段中测试与 `svg` 标签相关的漏洞，探查网站内容清洗功能的另一部分——我们当然知道
    WP 实例是脆弱的，但我们仍在进一步确认漏洞的定位和性质。以下是我们的代码片段：
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: After we submit it, we see the page hang for a bit, and then eventually.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 提交后，我们看到页面暂停了一会儿，然后最终加载完成。
- en: '![](assets/2b0e7096-3767-4b54-9d3f-4a3e24d6590e.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2b0e7096-3767-4b54-9d3f-4a3e24d6590e.png)'
- en: Our testing paid off. Although in this case we knew we'd find something if we
    dug deep enough, tools like WPScan can provide valuable, application-specific
    context and leads for further investigation, without adding a heavy new tool or
    difficult-to-integrate testing system.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测试取得了成果。尽管在这种情况下我们知道只要深入挖掘一定能找到问题，但像 WPScan 这样的工具可以提供有价值的、特定于应用程序的背景信息和后续调查线索，而无需添加一个繁重的新工具或难以集成的测试系统。
- en: Ruby on Rails – Rubysec Tools and Tricks
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ruby on Rails – Rubysec 工具和技巧
- en: There are several options for analyzing Ruby and Ruby-on-Rails applications,
    some of which are specific to Rails and others that can be applied more generally
    to similar applications (such as apps that are also RESTful, MVC, CRUD-oriented,
    primarily server-side, and so on).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种分析 Ruby 和 Ruby-on-Rails 应用程序的方法，其中一些是特定于 Rails 的，另一些可以更广泛地应用于类似的应用程序（例如，也符合
    RESTful、MVC、CRUD 导向、主要在服务器端运行的应用程序等）。
- en: Exploiting RESTful MVC Routing Patterns
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用 RESTful MVC 路由模式
- en: Because Rails is so opinionated toward RESTful MVC patterns applied to CRUD
    apps, the URL routing structure is often easy to intuit. Understanding the `/resource/action`
    and `/resource/{identifier}/action` patterns allows an attacker to play around
    with potentially dangerous paths like `/users/{identifier}/update` that can be
    inferred from simple observation.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Rails 强烈倾向于将 RESTful MVC 模式应用于 CRUD 应用程序，URL 路由结构通常很容易直观地理解。理解 `/resource/action`
    和 `/resource/{identifier}/action` 模式使攻击者能够通过简单的观察推断出像 `/users/{identifier}/update`
    这样的潜在危险路径。
- en: Checking the Version for Particular Weaknesses
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查特定弱点的版本
- en: As an application framework, Rails, like all popular software, has gotten waves
    of security updates over the years, addressing critical issues like handling SQL
    injection from within Active Record, or extending the CSRF protection scheme to
    include more basic request types. But because the barrier to building a Rails
    application is so low, and the language and framework are so productivity-friendly,
    Rails apps are often spun up quickly. And since Rails is a common small business/prototyping
    solution that is nevertheless often pressed into mature production service, there's
    a healthy amount of legacy Rails code out there. That combination of a quickly-assembled
    architecture with expectations of longevity, exacerbated by the plug-n-play nature
    of Rails scaffolding (entire CRUD apps can be created with just a few opinionated
    commands) means that Rails can be particularly susceptible to vulnerabilities
    caused by misconfigurations or unsafe defaults.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个应用框架，Rails 和所有流行软件一样，经过了多次安全更新，解决了诸如在 Active Record 中处理 SQL 注入，或者扩展 CSRF
    保护方案以涵盖更多基本请求类型等关键问题。但由于构建 Rails 应用程序的门槛很低，而且语言和框架都非常适合提高生产力，Rails 应用程序往往能够快速搭建。而且由于
    Rails 是一种常见的小型企业/原型开发解决方案，尽管经常被用于成熟的生产服务中，仍然存在大量的遗留 Rails 代码。这种快速搭建的架构与对长期使用的期望相结合，再加上
    Rails 脚手架的即插即用特性（仅通过几个约定命令就可以创建完整的 CRUD 应用程序），意味着 Rails 特别容易受到由于配置错误或不安全默认设置所导致的漏洞的影响。
- en: Testing Cookie Data and Authentication
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试 Cookie 数据和身份验证
- en: Rails makes it very easy to store potentially secure information as cookies,
    and is therefore more susceptible to leaking potential information through cookies
    that are encoded, but it's (critically) not encrypted.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Rails 使得存储潜在的安全信息为 Cookie 变得非常简单，因此更容易通过编码但未加密的 Cookie 泄露潜在信息。
- en: Django – Strategies for the Python App
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Django – Python 应用的策略
- en: Django, as a common framework for quickly building CRUD-style apps that's been
    successfully implemented in a dynamically-typed language designed for developer
    productivity, naturally suffers many of the same pitfalls as Rails and shares
    many of the same weaknesses. Django also holds a strong opinion about RESTful,
    MVC-centric URL routing, allowing for the same URL hacking discussed in the preceding
    section. That said, Django provides a lot of great, global protections for common
    vulnerabilities like CSRF, XSS, and injection attacks out-of-the-box.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Django 作为一个常用的框架，用于快速构建 CRUD 风格的应用程序，并且已经在一种为开发者生产力设计的动态类型语言中成功实现，自然会遭遇与 Rails
    相同的许多陷阱，并且存在许多相同的弱点。Django 对 RESTful、以 MVC 为中心的 URL 路由有很强的偏好，因此允许进行前面一节中讨论的相同的
    URL 攻击。尽管如此，Django 默认提供了很多出色的全局保护，能够有效防御诸如 CSRF、XSS 和注入攻击等常见漏洞。
- en: Checking for DEBUG = True
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查 DEBUG = True
- en: It's a forehead-slapping mistake, but still a common one—leaving the Django
    developer-level logging on in production. Shipping an app with the `DEBUG` setting
    enabled allows for a few problems to crop up, including comprehensive error tracebacks
    that can expose sensitive pages or data. If you suspect that `DEBUG` has been
    enabled on the target Django application, try generating an error to trigger the
    display of a harmful traceback. Leaving the `DEBUG` setting enabled is so common
    that, earlier this year, a single researcher conducted an investigation and within
    a week had discovered 28,165 Django apps with the setting enabled ([https://www.bleepingcomputer.com/news/security/misconfigured-django-apps-are-exposing-secret-api-keys-database-passwords/](https://www.bleepingcomputer.com/news/security/misconfigured-django-apps-are-exposing-secret-api-keys-database-passwords/)).
    If it seems as if the damage you can to do with access to the debugging information
    is strictly limited, consider that, in 2018, a researcher was able to use the
    debug information from an unsecured Sentry server belonging to Facebook to get
    RCE. The payout was $5,000—a lower-than-usual-amount because the server was sandboxed
    and could not access user data ([https://blog.scrt.ch/2018/08/24/remote-code-execution-on-a-facebook-server/](https://blog.scrt.ch/2018/08/24/remote-code-execution-on-a-facebook-server/)).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个常见的错误，尽管看起来是个“拍脑袋”的失误——在生产环境中留下 Django 开发者级别的日志记录。以启用 `DEBUG` 设置发布应用会导致一些问题，包括暴露敏感页面或数据的全面错误追踪信息。如果您怀疑目标
    Django 应用已启用 `DEBUG`，可以尝试生成错误以触发有害的追踪信息显示。启用 `DEBUG` 设置是非常常见的，甚至在今年早些时候，一名研究人员进行调查，仅用一周时间就发现了
    28,165 个启用了该设置的 Django 应用（[https://www.bleepingcomputer.com/news/security/misconfigured-django-apps-are-exposing-secret-api-keys-database-passwords/](https://www.bleepingcomputer.com/news/security/misconfigured-django-apps-are-exposing-secret-api-keys-database-passwords/)）。如果看起来通过调试信息访问造成的危害似乎很有限，考虑到
    2018 年，一名研究人员能够利用来自 Facebook 的不安全 Sentry 服务器的调试信息获得远程代码执行（RCE）。该漏洞的奖励是 5,000 美元——这是较低的金额，因为服务器是沙箱化的，无法访问用户数据（[https://blog.scrt.ch/2018/08/24/remote-code-execution-on-a-facebook-server/](https://blog.scrt.ch/2018/08/24/remote-code-execution-on-a-facebook-server/)）。
- en: Probing the Admin Page
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探测管理页面
- en: Django ships with a default admin page that is also often foregone in favor
    of a third-party plugin or other admin-related extension. If the default admin
    page has been neglected or the admin integration is incomplete, it can provide
    a fruitful attack surface to test and explore.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Django 自带一个默认的管理页面，通常会被第三方插件或其他与管理员相关的扩展所取代。如果默认的管理页面被忽视，或者管理员集成不完整，它可能会提供一个有价值的攻击面供测试和探索。
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter covered the basics of the CVE vulnerability identification system,
    how to build workflows around discovering WordPress, Ruby on Rails, or Django-related
    vulnerabilities, and why known vulnerability detection, despite all the caveats,
    can still be worth integrating into your security practice. You should be moving
    forward with a better understanding of the role application-specific vulnerabilities
    play in the security ecosystem and be confident building application-specific
    testing processes, where appropriate, into Burp-based, script-based, or any number
    of other workflow strategies.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了 CVE 漏洞识别系统的基础知识，如何围绕发现 WordPress、Ruby on Rails 或 Django 相关的漏洞构建工作流程，以及为何尽管存在各种警告，已知漏洞检测仍然值得纳入您的安全实践。通过本章，您应能更好地理解特定应用漏洞在安全生态系统中的作用，并有信心在适当的情况下将特定应用的测试流程集成到基于
    Burp、脚本或其他任何工作流程策略中。
- en: In the next chapter, we will cover the critical information that should be included
    in every report, optional information, the importance of including detailed steps
    to reproduce the bug, and how to write a good attack scenario.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍每个报告中应包含的关键信息、可选信息、包含详细重现步骤的重要性以及如何编写一个好的攻击场景。
- en: Questions
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What does CVE stand for? What is it?
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CVE 代表什么？它是什么？
- en: What makes WordPress such an attractive target for hackers?
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么使得 WordPress 成为黑客的一个有吸引力的目标？
- en: What are the advantages of using a CLI versus Burp extension for your WPScan
    functionality? How about vice versa?
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 CLI 而不是 Burp 扩展来实现 WPScan 功能有哪些优势？反过来又如何？
- en: What are some good methods for finding Ruby on Rails-specific bugs?
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到 Ruby on Rails 特定漏洞的好方法有哪些？
- en: What are some advantages to using Docker for your pentesting tools?
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Docker 作为渗透测试工具有哪些优势？
- en: What does OVAL stand for? What is an OVAL definition?
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: OVAL 代表什么？什么是 OVAL 定义？
- en: What are some issues that you should be on the lookout for when testing a Django
    application?
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试 Django 应用程序时，您应该留意哪些问题？
- en: Further Reading
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '**You can find out more about some of the topics we have discussed in this
    chapter at:**'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**您可以在以下链接中了解我们在本章中讨论的部分主题：**'
- en: '**WordPress Official Site**: [https://wordpress.org/](https://wordpress.org/)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WordPress 官方网站**: [https://wordpress.org/](https://wordpress.org/)'
- en: '**CVE FAQ**: [https://cve.mitre.org/about/faqs.html](https://cve.mitre.org/about/faqs.html).'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CVE 常见问题**: [https://cve.mitre.org/about/faqs.html](https://cve.mitre.org/about/faqs.html).'
- en: '**OVAL Home page**: [https://oval.mitre.org/repository/about/overview.html](https://oval.mitre.org/repository/about/overview.html).'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OVAL 主页**: [https://oval.mitre.org/repository/about/overview.html](https://oval.mitre.org/repository/about/overview.html).'
- en: '**WPScan Home page**: [https://wpscan.org/](https://wpscan.org/).'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WPScan 主页**: [https://wpscan.org/](https://wpscan.org/).'
- en: '**OWASP Ruby on Rails Cheatsheet**: [https://www.owasp.org/index.php/Ruby_on_Rails_Cheatsheet](https://www.owasp.org/index.php/Ruby_on_Rails_Cheatsheet).'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OWASP Ruby on Rails 备忘单**: [https://www.owasp.org/index.php/Ruby_on_Rails_Cheatsheet](https://www.owasp.org/index.php/Ruby_on_Rails_Cheatsheet).'
- en: '**The Official Rails Security Guide**: [https://guides.rubyonrails.org/security.html](https://guides.rubyonrails.org/security.html).'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**官方 Rails 安全指南**: [https://guides.rubyonrails.org/security.html](https://guides.rubyonrails.org/security.html).'
