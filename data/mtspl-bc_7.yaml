- en: Exploiting Real-World Challenges with Metasploit
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用Metasploit的真实世界挑战
- en: 'Welcome! This chapter is the final and most complicated chapter of the book.
    I recommend you read through all the previous chapters and exercises before proceeding
    with this chapter. However, if you have completed all the tasks and done some
    research by yourself, let''s move on to facing real-world challenges and solving
    them with Metasploit. In this chapter, we will cover two scenarios based on real-world
    problems with regard to being a penetration tester and a state-sponsored hacker.
    Both challenges pose a different set of requirements; for example, evasion would
    typically be more relevant to a law enforcement cyber player than a corporate
    penetration tester and the case is the same for achieving persistence on systems.
    The agenda of this chapter is to familiarize you with the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎！这一章是本书最终和最复杂的一章。我建议您在继续阅读本章之前，先阅读所有之前的章节和练习。然而，如果您已经完成了所有的任务，并且自己做了一些研究，让我们继续面对现实世界的挑战，并用Metasploit来解决这些挑战。在本章中，我们将涵盖两种基于真实世界问题的场景，涉及渗透测试员和国家赞助黑客。这两种挑战提出了不同的要求；例如，逃避通常对执法部门的网络玩家比企业渗透测试员更相关，对系统实现持久性也是如此。本章的议程是让您熟悉以下内容：
- en: Pivoting to internal networks
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转向内部网络
- en: Using web application bugs for gaining access
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用Web应用程序漏洞获取访问权限
- en: Cracking password hashes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破解密码哈希
- en: Using the target system as a proxy
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用目标系统作为代理
- en: Evading antivirus
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规避防病毒软件
- en: And much more. We will be developing strategies to perform flawless attacks
    on the target and looking for every opportunity that can end up popping a shell
    to the target system. Therefore, let us get started.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多。我们将制定策略，对目标进行无缺陷的攻击，并寻找每一个可能弹出对目标系统的shell的机会。因此，让我们开始吧。
- en: 'Scenario 1: Mirror environment'
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 场景1：镜像环境
- en: Consider yourself a penetration tester who is tasked to carry out a black box
    penetration test against a single IP in an on-site project. Your job is to make
    sure that no vulnerabilities are present in the server and on the application
    running on it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 把自己想象成一个渗透测试员，任务是对现场项目中的单个IP进行黑盒渗透测试。您的工作是确保服务器和运行在其上的应用程序没有漏洞。
- en: Understanding the environment
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解环境
- en: 'Since we know we are going to perform on an on-site environment, we can summarize
    the test as shown in the following table:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们知道我们将在现场环境中进行测试，我们可以总结测试如下表所示：
- en: '| **Number of IPs under scope** | 1 |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| **受检范围的IP数量** | 1 |'
- en: '| **Test policy** | Web applications and server |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| **测试政策** | Web应用程序和服务器 |'
- en: '| **IP address** | `192.168.10.110` |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| **IP地址** | `192.168.10.110` |'
- en: '| **Summary of tests to be performed** | Port ScanningTest for Web application
    vulnerabilitiesTest for server vulnerabilitiesCompromising any other network connected
    to the target host |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| **要执行的测试摘要** | 端口扫描测试Web应用程序漏洞测试服务器漏洞测试入侵与目标主机连接的任何其他网络 |'
- en: '| **Objectives** | Gain user level access to the serverEscalate privileges
    to the highest possible levelGain access to the credentials for web and server
    applications |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| **目标** | 获得对服务器的用户级访问权限提升权限到最高可能级别获得Web和服务器应用程序的凭证访问权限 |'
- en: '| **Test type** | Black box test |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| **测试类型** | 黑盒测试 |'
- en: 'Additionally, let us also keep a diagrammatic view of the entire test to make
    things easier for us to remember and understand:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，让我们也用图表的方式来看整个测试，以便更容易记住和理解：
- en: '![](img/00198.jpeg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00198.jpeg)'
- en: 'We can see in the preceding diagram that, as of now, we have little detail,
    only the IP address of the target. Let us quickly fire Metasploit and create a
    new `workspace` and switch to it:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从上图中可以看出，目前我们只有目标的IP地址的少量细节。让我们快速启动Metasploit并创建一个新的`workspace`并切换到它：
- en: '![](img/00063.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00063.jpeg)'
- en: Fingerprinting the target with DB_NMAP
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用DB_NMAP对目标进行指纹识别
- en: 'As we discussed in the previous chapters, creating a new `workspace` and using
    it will ensure that the current results won''t merge with scan results already
    present in the database; hence, it is recommended to create a new `workspace`
    for all new projects. Let us quickly perform an Nmap scan over the target on some
    most general ports, as shown in the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前几章中讨论的，创建一个新的`workspace`并使用它将确保当前的结果不会与数据库中已有的扫描结果合并；因此，建议为所有新项目创建一个新的`workspace`。让我们快速在目标上执行一个Nmap扫描，扫描一些最常见的端口，如下图所示：
- en: '![](img/00193.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00193.jpeg)'
- en: 'Welcome to the places where the sun doesn''t shine. You have no vulnerable
    services running on the target. However, the only good information we got is that
    the target is running a Windows operating system, which may be Windows Server
    2008 or Windows Server 2012\. So what do we do now? Let us try manually connecting
    to the server on port 80 and looking for web-application-specific vulnerabilities:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到阳光无法照射的地方。您的目标上没有运行有漏洞的服务。然而，我们得到的唯一好消息是，目标正在运行Windows操作系统，可能是Windows Server
    2008或Windows Server 2012。那么现在我们该怎么办呢？让我们尝试手动连接到80端口的服务器，并寻找特定于Web应用程序的漏洞：
- en: '![](img/00066.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00066.jpeg)'
- en: 'Connecting on port 80, we can see that the default page for XAMPP shows up,
    which says the version of XAMPP is 5.5.30, which is the latest one. Another disappointment:
    since the version is vulnerability-free, we can''t attack it. However, there might
    still be a chance if we figure out what applications are hosted on this XAMPP
    server. To do that, let us quickly use the `auxiliary/scanner/http/brute_dirs`
    module and try brute-forcing the directory structure to figure out what applications
    are running underneath XAMPP:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到80端口，我们可以看到XAMPP的默认页面显示出来，显示XAMPP的版本是5.5.30，这是最新的版本。另一个令人失望的地方：由于版本没有漏洞，我们无法攻击它。然而，如果我们弄清楚了XAMPP服务器上托管了哪些应用程序，仍然可能有机会。为了做到这一点，让我们快速使用`auxiliary/scanner/http/brute_dirs`模块，尝试暴力破解目录结构，以找出XAMPP下运行的应用程序：
- en: '![](img/00067.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00067.jpeg)'
- en: 'We have already set `RHOSTS` to `192.168.10.110` and `THREADS` to `20` using
    the `setg` command. Let''s set `FORMAT` to `a,aa,aaa,aaa`. Setting the format
    to `a,aa,aaa,aaa` will mean that the auxiliary module will start trying from a
    single-character alphanumeric then a two-character, a three-letter, and finally
    a four-letter alphanumeric sequence to brute-force the directories. To make things
    simpler, suppose the target has a directory named `vm`; if we remove the `aa`
    from the `FORMAT`, it won''t be checked. Let''s quickly run the module to see
    whether we get something interesting:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用`setg`命令将`RHOSTS`设置为`192.168.10.110`，`THREADS`设置为`20`。让我们将`FORMAT`设置为`a,aa,aaa,aaa`。将格式设置为`a,aa,aaa,aaa`意味着辅助模块将从单个字符的字母数字开始尝试，然后是两个字符，三个字母，最后是四个字符的字母数字序列来暴力破解目录。为了简化问题，假设目标有一个名为`vm`的目录；如果我们从`FORMAT`中删除`aa`，它就不会被检查。让我们快速运行模块，看看是否有有趣的东西：
- en: '![](img/00073.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00073.jpeg)'
- en: 'We found only one directory, that is the `/img/` directory, and it doesn''t
    look promising. Additionally, even with a large number of threads, this search
    will be breathtaking and non-exhaustive. Let us use a simpler module to figure
    out the directory structure, as shown in the following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只找到一个目录，即`/img/`目录，看起来并不乐观。此外，即使使用大量线程，这种搜索也将是令人叹为观止的，而且不会穷尽一切。让我们使用一个更简单的模块来确定目录结构，如下面的截图所示：
- en: '![](img/00115.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00115.jpeg)'
- en: 'We are now using the `auxiliary/scanner/http/dir_scanner` module, which works
    on dictionary-based brute-forcing rather than the pure brute-force like with the
    `brute_dirs` module. A good approach is to have this module used first and, based
    on the detailing it provides, we can use the `brute_dirs` module if needed. Anyways,
    let''s run the module and analyze the output, as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在使用`auxiliary/scanner/http/dir_scanner`模块，它是基于字典的暴力破解，而不是像`brute_dirs`模块那样的纯暴力破解。一个好的方法是首先使用这个模块，并根据它提供的详细信息，如果需要的话，我们可以使用`brute_dirs`模块。无论如何，让我们运行模块并分析输出，如下所示：
- en: '![](img/00133.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00133.jpeg)'
- en: We can see we have some directories listed here. However, the directories with
    a response code of 200 are the ones which are accessible.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到这里列出了一些目录。然而，具有响应代码200的目录是可以访问的。
- en: The response code 200 is OK, 404 denotes a not found resource, and 403 means
    a forbidden status that indicates that we are not allowed to view the resource
    but it does exist. Hence, it's good keeping a note of 403 errors.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 响应代码200表示OK，404表示未找到资源，403表示禁止状态，表示我们不被允许查看资源，但它确实存在。因此，最好记下403错误。
- en: 'We can see we have a directory named blog. Let us browse to it in the web browser
    and see what application it''s running:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们有一个名为blog的目录。让我们在Web浏览器中浏览它，看看它运行的是什么应用程序：
- en: '![](img/00280.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00280.jpeg)'
- en: 'Browsing to the `/blog/` URL, we can see we have a WordPress website running
    on the target system. We can always check the `readme.html` file from WordPress
    to check for the version number, and most admins usually forget to delete this
    file, making it easier for the attackers to target a WordPress website by fingerprinting
    the version number:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览`/blog/` URL，我们可以看到我们在目标系统上运行的WordPress网站。我们可以随时从WordPress中检查`readme.html`文件以检查版本号，大多数管理员通常忘记删除此文件，这使得攻击者更容易通过指纹识别版本号来针对WordPress网站：
- en: '![](img/00180.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00180.jpeg)'
- en: The WordPress website is running on Version 4.7, which does not have core known
    vulnerabilities.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress网站正在运行4.7版本，没有核心已知漏洞。
- en: Various WordPress plugins contain vulnerabilities which can lead to the compromise
    of the entire site. It is advisable to check a WordPress installation against
    various flaws using the `wpscan` tool.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 各种WordPress插件包含可能导致整个站点受损的漏洞。建议使用`wpscan`工具检查WordPress安装是否存在各种缺陷。
- en: Gaining access to vulnerable web applications
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取对易受攻击的Web应用程序的访问权限
- en: 'We also saw another link with the response code of 200, which was `/php-utility-belt/`.
    Let''s try this in the browser and see whether we can get something:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到另一个响应代码为200的链接，即`/php-utility-belt/`。让我们在浏览器中尝试一下，看看我们是否能得到一些东西：
- en: '![](img/00211.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00211.jpeg)'
- en: 'The PHP Utility Belt is a set of handy tools for developers. However, it should
    never exist in the production environment. The GitHub page for the PHP Utility
    Belt says the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: PHP实用工具包是开发人员的一组方便工具。但是，它绝对不应该存在于生产环境中。PHP实用工具包的GitHub页面上写着：
- en: This application allows you to run arbitrary PHP code and is intended to be
    hosted locally on a development machine. Therefore, it SHOULD NEVER EXIST IN A
    PRODUCTION ENVIRONMENT OR PUBLICALLY ACCESSIBLE ENVIRONMENT. You've been warned.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序允许您运行任意PHP代码，旨在在开发机器上本地托管。因此，它绝对不应该存在于生产环境或公共可访问环境中。你已经被警告了。
- en: 'Hence, let''s try doing a search for the PHP Utility Belt in Metasploit and
    see if there exists a vulnerability which can affect this application. We will
    see that we have an exploit for the PHP Utility Belt application. Let''s use the
    module and try exploiting the application, as shown in the following screenshot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们尝试在Metasploit中搜索PHP实用工具包，看看是否存在可能影响此应用程序的漏洞。我们将看到我们有一个针对PHP实用工具包应用程序的利用。让我们使用该模块并尝试利用该应用程序，如下面的截图所示：
- en: '![](img/00080.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00080.jpeg)'
- en: 'Let us set the value of `RHOST` to `192.168.10.110` and run the module, as
    shown in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将`RHOST`的值设置为`192.168.10.110`并运行模块，如下面的截图所示：
- en: '![](img/00081.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00081.jpeg)'
- en: 'Yeah! We got meterpreter access to the target. Let us look at the directory
    structure and perform some post-exploitation functions:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！我们已经获得了对目标的meterpreter访问权限。让我们查看目录结构并执行一些后渗透功能：
- en: '![](img/00044.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00044.jpeg)'
- en: 'As we predicted with Nmap, the target is a **Windows Server 2012 R2 edition**.
    Having the right amount of information, let us update the diagrammatic view of
    the test as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在Nmap中预测的那样，目标是**Windows Server 2012 R2版**。有了足够的信息，让我们更新测试的图表视图如下：
- en: '![](img/00053.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00053.jpeg)'
- en: 'From the preceding image, we now have information related to the OS and the
    applications running on the target, and we have the ability to run any command
    or perform any post-exploitation task we want. Let''s try diving deep into the
    network and check whether we can find any other network connected to this machine.
    Let''s run the `arp` command, as shown in the following screenshot:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的图像中，我们现在有了与目标操作系统和正在运行的应用程序相关的信息，并且我们有能力运行任何命令或执行任何后期利用任务。让我们深入网络，看看我们是否能找到连接到这台机器的其他网络。让我们运行`arp`命令，如下面的屏幕截图所示：
- en: '![](img/00085.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00085.jpeg)'
- en: We can see we created a new channel for the shell but the `arp` command didn't
    work. The failure of the `arp` command is due to the usage of a PHP meterpreter,
    which is not known to handle networks well, and some standard API functions.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们为shell创建了一个新的通道，但`arp`命令没有起作用。`arp`命令的失败是由于使用了PHP Meterpreter，它不擅长处理网络和一些标准API函数。
- en: Migrating from a PHP meterpreter to a Windows meterpreter
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从PHP Meterpreter迁移到Windows Meterpreter
- en: 'To circumvent the problem of executing network commands, let us quickly generate
    a `windows/meterpreter/reverse_tcp` type backdoor and get it executed on the target
    system, as shown in the following screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了规避执行网络命令的问题，让我们快速生成一个`windows/meterpreter/reverse_tcp`类型的后门，并在目标系统上执行它，如下面的屏幕截图所示：
- en: '![](img/00072.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00072.jpeg)'
- en: 'Let''s also spawn another instance of Metasploit in a separate Terminal and
    quickly start a matching handler for the preceding `MicrosoftDs.exe` backdoor
    which will connect back to port `1337`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在另一个终端中生成另一个Metasploit实例，并快速为之前的`MicrosoftDs.exe`后门启动一个匹配的处理程序，它将连接回端口`1337`：
- en: '![](img/00141.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00141.jpeg)'
- en: 'Since we will need to run the exploit handler multiple times, we created a
    resource script for the last five commands using the `makerc` command. Coming
    back to our first meterpreter shell, let''s use the upload command to upload the
    `MicrosoftDs.exe` backdoor file onto the target, as shown in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们需要多次运行利用处理程序，我们使用`makerc`命令为最后五个命令创建了一个资源脚本。回到我们的第一个Meterpreter shell，让我们使用上传命令将`MicrosoftDs.exe`后门文件上传到目标，如下面的屏幕截图所示：
- en: '![](img/00169.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00169.jpeg)'
- en: 'We can see that we successfully uploaded our backdoor to the target. Let''s
    execute it using the `execute` command, as shown in the following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们成功将我们的后门上传到目标。让我们使用`execute`命令执行它，如下面的屏幕截图所示：
- en: '![](img/00092.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00092.jpeg)'
- en: 'As soon as we issue the preceding command, we can see we have Windows meterpreter
    shell access to the target in the handler tab, as shown in the following screenshot:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们发出上述命令，我们可以看到我们在处理程序选项卡中成功获得了对目标的Windows Meterpreter shell访问，如下面的屏幕截图所示：
- en: '![](img/00222.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00222.jpeg)'
- en: 'Bang! We got windows meterpreter access to the target. Let us update the diagrammatic
    view as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 砰！我们成功获得了对目标的Windows Meterpreter访问。让我们更新图表视图如下：
- en: '![](img/00246.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00246.jpeg)'
- en: We can now drop the PHP meterpreter and continue on the windows meterpreter
    shell.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以放弃PHP Meterpreter，继续使用Windows Meterpreter shell。
- en: 'Let''s issue the `ipconfig` command to see whether there is a different network
    card configured with the other network:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们发出`ipconfig`命令，看看是否配置了另一个网络卡：
- en: '![](img/00119.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00119.jpeg)'
- en: We know that the host is set up with an additional IP address of `172.28.128.5`
    and there may be some systems present on this network. However, we cannot connect
    directly to the network since it is an internal network and is not accessible
    to us. We need a mechanism to use the compromised system as a proxy to us for
    the internal network.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道主机设置了额外的IP地址`172.28.128.5`，并且可能存在一些系统连接到这个网络。然而，我们无法直接连接到该网络，因为它是内部网络，对我们不可访问。我们需要一种机制，利用受损系统作为我们访问内部网络的代理。
- en: Pivoting to internal networks
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 枢纽到内部网络
- en: 'Metasploit offers features to connect to internal networks through existing
    meterpreter shells. To achieve this, we need to add a route for the internal network
    to Metasploit so that it can pivot data coming from our system to the intended
    hosts in the internal network range. Let us use the `post/windows/manage/autoroute`
    module to add internal network routes to Metasploit, as shown in the following
    screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit提供了通过现有的Meterpreter shells连接到内部网络的功能。为了实现这一点，我们需要为内部网络添加一个路由到Metasploit，以便它可以将来自我们系统的数据枢纽到内部网络范围内的目标主机。让我们使用`post/windows/manage/autoroute`模块将内部网络路由添加到Metasploit，如下面的屏幕截图所示：
- en: '![](img/00099.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00099.jpeg)'
- en: 'Let''s set `SESSION` to `1`, as `1` is the session ID of our meterpreter session,
    and set `SUBNET` to our desired network range, that is, `172.28.128.0`. Let''s
    `run` the module and analyze the output as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将`SESSION`设置为`1`，因为`1`是我们Meterpreter会话的会话ID，并将`SUBNET`设置为我们期望的网络范围，即`172.28.128.0`。让我们`run`该模块并分析输出如下：
- en: '![](img/00100.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00100.jpeg)'
- en: We can see that the route to the target subnet is now added to Metasploit. We
    can now further test the environment quickly.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到目标子网的路由现在已添加到Metasploit。我们现在可以快速进一步测试环境。
- en: Scanning internal networks through a meterpreter pivot
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过Meterpreter枢纽扫描内部网络
- en: 'Let''s quickly `run` a port scan, as shown in the following screenshot:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速`run`端口扫描，如下面的屏幕截图所示：
- en: '![](img/00098.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00098.jpeg)'
- en: 'Running the port scan on the entire range, we can see we have a single host,
    that is, `172.8.128.3`, with open ports which are 3306 (a popular MySQL port)
    and port 80 (HTTP). Let''s quickly fingerprint the HTTP server running on port
    80 using `auxiliary/scanner/http/http_version`. We can see that we have the same
    version of the Apache software running on `192.168.10.110` here as well. The IP
    address `172.28.128.3` could be a mirror test environment. However, we did not
    find any MySQL port on that host. Let us quickly update the diagrammatic view
    and begin testing the MySQL service:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 运行整个范围的端口扫描，我们可以看到我们有一个单独的主机，即`172.8.128.3`，开放的端口是3306（一个流行的MySQL端口）和端口80（HTTP）。让我们快速对运行在端口80上的HTTP服务器进行指纹识别，使用`auxiliary/scanner/http/http_version`。我们可以看到我们在`192.168.10.110`上也有相同版本的Apache软件运行。IP地址`172.28.128.3`可能是一个镜像测试环境。但是，在该主机上我们没有找到任何MySQL端口。让我们快速更新图表视图并开始测试MySQL服务：
- en: '![](img/00132.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00132.jpeg)'
- en: 'Let''s run some quick tests on the MySQL server, as shown in the following
    screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下截图快速对MySQL服务器运行一些测试：
- en: '![](img/00147.jpeg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00147.jpeg)'
- en: 'Running the `mysql_version` command, we can see the version of MySQL is 5.5.5-10.1.9-MariaDB.
    Let''s run the `mysql_login` module, as shown in the following screenshot:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`mysql_version`命令，我们可以看到MySQL的版本是5.5.5-10.1.9-MariaDB。让我们运行`mysql_login`模块，如下截图所示：
- en: '![](img/00173.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00173.jpeg)'
- en: 'Since MySQL is on the internal network, most administrators do not configure
    the MySQL server passwords and keep the default installations with a blank password.
    Let''s try running a simple command such as `show databases` and analyze the output,
    as shown in the following screenshot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 由于MySQL位于内部网络上，大多数管理员不会配置MySQL服务器密码，并保持默认安装为空密码。让我们尝试运行诸如`show databases`之类的简单命令，并分析输出，如下截图所示：
- en: '![](img/00190.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00190.jpeg)'
- en: 'Quite interesting! We had `192.168.10.110` running the WordPress installation,
    but we did not find any MySQL or any other database port open in the port scan.
    Is this the database of the WordPress site running on `192.168.10.110`? It looks
    like it! Let''s try fetching some details from the database, as shown in the following
    screenshot:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 非常有趣！我们有`192.168.10.110`上运行的WordPress安装，但在端口扫描中我们没有找到任何MySQL或其他数据库端口开放。这是运行在`192.168.10.110`上的WordPress网站的数据库吗？看起来是！让我们尝试从数据库中获取一些详细信息，如下截图所示：
- en: '![](img/00108.jpeg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00108.jpeg)'
- en: 'Sending the **show tables from wordpress** command brings the list of tables
    in the database, and clearly it''s a genuine WordPress database. Let''s try fetching
    the user details for the WordPress site with the query shown in the following
    screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 发送**show tables from wordpress**命令会带来数据库中表的列表，显然这是一个真正的WordPress数据库。让我们尝试使用以下截图中显示的查询获取WordPress网站的用户详细信息：
- en: '![](img/00109.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00109.jpeg)'
- en: 'Amazing! We got the admin username with its password hash, which we can feed
    to a tool such as `hashcat` to retrieve the plain text password, as shown in the
    following screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们得到了管理员用户名及其密码哈希，我们可以将其提供给诸如`hashcat`之类的工具，以检索纯文本密码，如下截图所示：
- en: '![](img/00266.jpeg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00266.jpeg)'
- en: We stored the retrieved hash in a file calledhash and provided a dictionary
    file `pass.txt` containing passwords. The switch `-m 400` denotes we are cracking
    a hash for WordPress.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将检索到的哈希存储在一个名为`hash`的文件中，并提供一个包含密码的字典文件`pass.txt`。开关`-m 400`表示我们正在破解WordPress的哈希。
- en: We can now log in to the WordPress site to gain a better view of plugins, themes,
    and so on. However, you must report a weak password vulnerability as well since
    Admin@123 is quite easily guessable.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以登录WordPress网站，以更好地查看插件、主题等。但是，您还必须报告弱密码漏洞，因为Admin@123相当容易被猜到。
- en: 'Let''s now run the `dir_scanner` module on the internal host and see whether
    we can find something interesting on the web application front:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在内部主机上运行`dir_scanner`模块，看看我们是否可以在Web应用程序前端找到一些有趣的东西：
- en: '![](img/00135.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00135.jpeg)'
- en: We know that we only have a test directory, which is accessible. However, we
    cannot browse it since the network is not in our general subnet.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道我们只有一个可访问的`test`目录。但是，由于网络不在我们的一般子网中，我们无法浏览它。
- en: Using the socks server module in Metasploit
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit中的socks服务器模块
- en: 'To connect from non-Metasploit applications on our system to the internal network,
    we can setup the `socks4a` module in Metasploit and can proxy data originating
    from any application through our meterpreter session. Let''s put our meterpreter
    on `192.168.10.111` in the background and run the `auxiliary/server/socks4a` module
    as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要从我们系统上的非Metasploit应用程序连接到内部网络，我们可以在Metasploit中设置`socks4a`模块，并可以通过我们的meterpreter会话代理来自任何应用程序的数据。让我们将我们的meterpreter放在`192.168.10.111`上并在后台运行`auxiliary/server/socks4a`模块，如下所示：
- en: '![](img/00162.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00162.jpeg)'
- en: We execute the module after setting the `SRVHOST` to `127.0.0.1` and keeping
    the `SRVPORT` default to `1080`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`SRVHOST`设置为`127.0.0.1`，并保持`SRVPORT`默认为`1080`后，执行该模块。
- en: Change the host to 127.0.0.1 and port to 1080 in the `/etc/proxychains.conf`
    file in Kali Linux before running the above module.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行上述模块之前，在Kali Linux的`/etc/proxychains.conf`文件中将主机更改为127.0.0.1，端口更改为1080。
- en: 'Setting up the socks server, we can now run any non-Metasploit tool on the
    target by adding `proxychains4` (on OS X)/proxychains (on Kali Linux) as a prefix.
    We can see this in the following example:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 设置socks服务器后，我们现在可以通过在目标上添加`proxychains4`（在OS X上）/proxychains（在Kali Linux上）作为前缀来运行任何非Metasploit工具。我们可以在以下示例中看到这一点：
- en: '![](img/00060.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00060.jpeg)'
- en: 'We know we ran a Nmap scan on the target through `proxychains4` and it worked.
    Let''s use `wget` with `proxychains4` to fetch the index page in the `test` directory:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道我们通过`proxychains4`对目标进行了Nmap扫描，并且成功了。让我们使用`proxychains4`和`wget`来获取`test`目录中的索引页面：
- en: '![](img/00062.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00062.jpeg)'
- en: 'Let''s view the contents of the `index.html` file and see the title of the
    application running:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查看`index.html`文件的内容，并查看应用程序的标题：
- en: '![](img/00243.jpeg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00243.jpeg)'
- en: 'Wow! It''s just another instance of `php_utility_belt` running on this host
    as well. We know what to do, right? Let''s fire the same module we used for the
    mirror server on `192.168.10.110`, as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！在这台主机上也运行着`php_utility_belt`的另一个实例。我们知道该怎么做，对吧？让我们启动我们在`192.168.10.110`上用于镜像服务器的相同模块，如下所示：
- en: '![](img/00258.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00258.jpeg)'
- en: 'Let''s run the module after setting the values for `RHOST` to `172.28.128.3`
    and `TARGETURI` to `/test/ajax.php` since the directory name is test and not `/php-utility-belt/`,
    as shown in the following screenshot:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置`RHOST`的值为`172.28.128.3`和`TARGETURI`的值为`/test/ajax.php`后，让我们运行该模块，因为目录名称是test而不是`/php-utility-belt/`，如下图所示：
- en: '![](img/00277.jpeg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00277.jpeg)'
- en: The default module will run with the `reverse_tcp` payload. However, since we
    are attacking the host through a meterpreter session on `192.168.10.110`, it is
    advisable to exploit services with the `bind_tcp` payload as it works on a direct
    connection, which will happen through the meterpreter session, eliminating the
    target `172.28.128.3` reaching us back. We know our session is PHP meterpreter;
    let's switch to a Windows meterpreter session as we did previously by running
    a separate handler on any other port than the one already being used.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 默认模块将使用`reverse_tcp`有效载荷运行。然而，由于我们通过`192.168.10.110`上的meterpreter会话攻击主机，建议利用具有`bind_tcp`有效载荷的服务，因为它可以在直接连接上运行，这将通过meterpreter会话发生，消除目标`172.28.128.3`回到我们这里。我们知道我们的会话是PHP
    meterpreter；让我们像之前一样通过在已使用的端口之外的任何其他端口上运行一个单独的处理程序来切换到Windows meterpreter会话。
- en: 'Let''s quickly create, upload, and execute another backdoor file connecting
    back on, say, port `1338` as we are already using port `1337`. Additionally, let''s
    also set up a handler to receive communications on port `1338`, as shown in the
    following screenshot:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速创建、上传并执行另一个后门文件，连接到端口`1338`，因为我们已经使用了端口`1337`。此外，让我们还在端口`1338`上设置一个处理程序来接收通信，如下图所示：
- en: '![](img/00038.jpeg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00038.jpeg)'
- en: 'Yippee! We got windows meterpreter access to the target. Let''s harvest some
    system information, as shown in the following screenshot:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 耶！我们已经获得了对目标的Windows meterpreter访问。让我们收集一些系统信息，如下图所示：
- en: '![](img/00088.jpeg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00088.jpeg)'
- en: We can see that the operating system is Windows Server 2008 and we have administrator
    privileges. Let's escalate to system-level privileges with the `get system` command,
    as shown in the preceding screenshot.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到操作系统是Windows Server 2008，我们拥有管理员权限。让我们使用`get system`命令升级到系统级权限，如前面的屏幕截图所示。
- en: Dumping passwords in clear text
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以明文形式转储密码
- en: 'Having system-level privileges, let''s dump the password hashes using the `hashdump`
    command, as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有系统级权限，让我们使用`hashdump`命令转储密码哈希，如下所示：
- en: '![](img/00070.jpeg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00070.jpeg)'
- en: Eliminating the hassle of cracking passwords, let's load mimikatz using the
    `load mimikatz` command and dump passwords in clear text using the `kerberos`
    command, as shown in the preceding screenshot.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 消除破解密码的麻烦，让我们使用`load mimikatz`命令加载mimikatz并使用`kerberos`命令以明文形式转储密码，如前面的屏幕截图所示。
- en: Sniffing a network with Metasploit
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit嗅探网络
- en: 'Metasploit offers a sniffer plugin to carry out network sniffing at the target
    as well. Let''s load the `sniffer` module as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit提供了一个嗅探插件，可以在目标上进行网络嗅探。让我们加载`sniffer`模块，如下所示：
- en: '![](img/00142.jpeg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00142.jpeg)'
- en: 'Let''s now select an interface using the `sniffer_interfaces` command to start
    sniffing on the target system:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`sniffer_interfaces`命令选择一个接口，在目标系统上开始嗅探：
- en: '![](img/00074.jpeg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00074.jpeg)'
- en: 'Let''s choose the interface ID `2` to start sniffing on the `Intel PRO/100
    MT adapter`, as shown in the following screenshot:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们选择接口ID`2`，开始在`Intel PRO/100 MT适配器`上进行嗅探，如下图所示：
- en: '![](img/00185.jpeg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00185.jpeg)'
- en: 'We can see that we are capturing data on interface `2` which started using
    the `sniffer_start` command with the help of the `sniffer_stats` command followed
    by the ID of the interface. Let''s now dump the data and see whether we can find
    some interesting information:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们正在捕获接口`2`上的数据，它是使用`sniffer_start`命令和`sniffer_stats`命令后跟接口的ID开始的。现在让我们转储数据，看看是否能找到一些有趣的信息：
- en: '![](img/00014.jpeg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00014.jpeg)'
- en: 'We dumped all the captured data from interface `2` to the `test.pcap` file.
    Let''s load it in Wireshark:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将所有从接口`2`捕获的数据转储到`test.pcap`文件中。让我们在Wireshark中加载它：
- en: '![](img/00247.jpeg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00247.jpeg)'
- en: 'We can see that we now have the ability to sniff successfully on the target.
    The sniffer module generally produces useful data, or as most intranet applications
    do not use HTTPS here. It would be worth while if you keep running the sniffer
    during business hours in a penetration test. Let''s finally update the diagrammatic
    view, as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们现在有能力成功地在目标上进行嗅探。嗅探模块通常会产生有用的数据，因为大多数内部应用程序在这里不使用HTTPS。在渗透测试期间，如果您在工作时间继续运行嗅探，这将是值得的。让我们最后更新图示视图，如下所示：
- en: '![](img/00262.jpeg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00262.jpeg)'
- en: Summary of the attack
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 攻击摘要
- en: 'Summarizing the entire test, we performed the following operations:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 总结整个测试，我们执行了以下操作：
- en: Port scan on `192.168.10.110` (port 80 open).
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`192.168.10.110`上进行端口扫描（端口80开放）。
- en: Brute-forced directories on port 80 (WordPress and PHP Utility Belt found).
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在端口80上强制打开目录（发现WordPress和PHP实用工具包）。
- en: Exploited PHP Utility Belt to gain PHP meterpreter access.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 利用PHP实用工具包获得PHP meterpreter访问。
- en: Escalated to Windows meterpreter.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 升级到Windows meterpreter。
- en: Post-exploitation to figure out the presence of an internal network.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进行后期利用以确定内部网络的存在。
- en: Added routes to the internal network (Metasploit only).
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加到内部网络的路由（仅限Metasploit）。
- en: Port scan on the internal network `172.28.128.0`.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在内部网络`172.28.128.0`上进行端口扫描。
- en: Discovered 3306 (MySQL) and 80 (Apache) on `172.28.128.3`.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`172.28.128.3`上发现了3306（MySQL）和80（Apache）。
- en: Fingerprinted, gained access to MySQL, and harvested the credentials for the
    WordPress domain running on `192.168.10.110`.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指纹识别，获得对MySQL的访问，并收集了运行在`192.168.10.110`上的WordPress域的凭据。
- en: Cracked hashes for the WordPress website using `hashcat`.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`hashcat`破解WordPress网站的哈希。
- en: Brute-forced directories on port 80 (`test` directory discovered) .
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在端口80上暴力破解目录（发现`test`目录）。
- en: Set up a socks server and used `wget` to pull the index page from `test` directory.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个socks服务器，并使用`wget`从`test`目录中拉取索引页面。
- en: PHP Utility Belt found in `test` directory; exploited it.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`test`目录中发现PHP实用工具包；利用它。
- en: Escalated to Windows meterpreter.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 升级到Windows meterpreter。
- en: Increased privileges using `getsystem`.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`getsystem`提升权限。
- en: Figured out clear text password using `mimikatz`.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`mimikatz`找出明文密码。
- en: Performed sniffing on the target network.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在目标网络上进行嗅探。
- en: 'Scenario 2: You can''t see my meterpreter'
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 情景2：你看不到我的meterpreter
- en: 'Throughout the previous chapters, we saw how we can take control of a variety
    of systems using Metasploit. However, the one important thing which we did not
    take into account is the presence of antivirus solutions on most operating systems.
    Let us create a backdoor executable of type `windows/meterpreter/reverse_tcp`,
    as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们看到了如何使用Metasploit控制各种系统。然而，我们没有考虑到大多数操作系统上都存在防病毒解决方案这一重要问题。让我们创建一个类型为`windows/meterpreter/reverse_tcp`的后门可执行文件，如下所示：
- en: '![](img/00082.jpeg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00082.jpeg)'
- en: 'We can now put this executable along with any exploit or office document, or
    we can bind it with any other executable and send it across to a target that is
    running windows and has an AVG AntiVirus solution running on his system. Let us
    see what happens when the target executes the file:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以将这个可执行文件与任何漏洞利用或办公文档一起放置，或者将其绑定到任何其他可执行文件并发送给运行Windows并在系统上运行AVG防病毒解决方案的目标。让我们看看当目标执行文件时会发生什么：
- en: '![](img/00051.jpeg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00051.jpeg)'
- en: 'Our generated file caused sudden alarms by AVG AntiVirus and got detected.
    Let''s scan our `generic.exe` file on the majyx scanner to get an overview of
    the detection rate, as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们生成的文件引起了AVG防病毒软件的突然警报并被检测到。让我们在majyx扫描仪上扫描我们的`generic.exe`文件，以获取检测率的概述，如下所示：
- en: '![](img/00101.jpeg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00101.jpeg)'
- en: We can see that 44/70 AVs detected our file as malicious. This is quite disheartening
    since as a law enforcement agent you might get only a single shot at getting the
    file executed at the target.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到44/70个AV检测到我们的文件是恶意的。这是相当令人沮丧的，因为作为执法人员，您可能只有一次机会让文件在目标系统上执行。
- en: The majyx scanner can be accessed at [http://scan.majyx.net/](http://scan.majyx.net/).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: majyx扫描仪可以在[http://scan.majyx.net/](http://scan.majyx.net/)上访问。
- en: The majyx scanner has 35 AVs, but sometimes it scans each AV twice, hence making
    it 70 AV entries. Consider the preceding scan result as 22/35 instead of 44/70.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: majyx扫描仪有35个AV，但有时会对每个AV进行两次扫描，因此会有70个AV条目。请将前面的扫描结果视为22/35，而不是44/70。
- en: Using shellcode for fun and profit
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用shellcode进行娱乐和利润
- en: 'We saw how the detection rate of various AV solutions affected our tasks. We
    can circumvent AVs using the shellcode method for `meterpreter`. Instead of generating
    an executable file, we will generate C shellcode and code the rest of our backdoor
    ourselves. Let us generate the shellcode as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到各种AV解决方案的检测率如何影响我们的任务。我们可以使用`meterpreter`的shellcode方法来规避AV。我们将生成C shellcode，自己编写后门的其余部分。让我们生成shellcode如下：
- en: '![](img/00086.jpeg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00086.jpeg)'
- en: 'Let us have a quick look at the shellcode, as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下shellcode，如下所示：
- en: '![](img/00148.jpeg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00148.jpeg)'
- en: Encrypting the shellcode
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加密shellcode
- en: 'We can see we have the shellcode generated. We will quickly write a program
    that will encrypt the existing shellcode using `XOR`, as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们生成了shellcode。我们将快速编写一个程序，使用`XOR`加密现有的shellcode，如下所示：
- en: '[PRE0]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can see that we have just XORed the shellcode with `0xAB`. This program
    will generate the following output:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们刚刚使用`0xAB`对shellcode进行了XOR。这个程序将生成以下输出：
- en: '![](img/00091.jpeg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00091.jpeg)'
- en: Creating a decoder executable
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个解码器可执行文件
- en: 'Let us use the newly generated shellcode to write a program that will produce
    an executable, as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用新生成的shellcode编写一个程序，将生成一个可执行文件，如下所示：
- en: '[PRE1]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding code will just decode the encoded shellcode with `0xAB` using
    the `XOR` decryption routine and will use the `memcpy` function to copy the shellcode
    to the executable area, and will execute it from there. Let us test it on the
    majyx scanner, as shown in the following screenshot:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将只是使用`XOR`解密例行编码的shellcode，并使用`memcpy`函数将shellcode复制到可执行区域，然后从那里执行。让我们在majyx扫描仪上测试一下，如下面的屏幕截图所示：
- en: '![](img/00103.jpeg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00103.jpeg)'
- en: 'LOL! Suddenly the AVs are no longer detecting our meterpreter backdoor as malicious.
    Let us try running the executable on the system which has the AVG solution, as
    follows:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 哈哈！突然之间AV不再将我们的meterpreter后门检测为恶意。让我们尝试在安装了AVG解决方案的系统上运行可执行文件，如下所示：
- en: '![](img/00094.jpeg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00094.jpeg)'
- en: 'Oh, good! No detection here as well. Let us see whether we got meterpreter
    access to the target or not:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，好！这里也没有检测到。让我们看看我们是否已经获得了对目标的meterpreter访问：
- en: '![](img/00096.jpeg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00096.jpeg)'
- en: 'Let us confirm whether `AVG` is running on the system or not:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们确认一下系统上是否运行着`AVG`：
- en: '![](img/00268.jpeg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00268.jpeg)'
- en: Plenty of `AVG` processes running on the target. We have not only bypassed this
    antivirus but have also brought down the detection rate from 22/35 to 2/35, which
    is quite impressive. A little more modification in the source code will generate
    a complete FUD (fully undetectable). However, I'll leave that as an exercise for
    you to complete.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 目标上有很多`AVG`进程在运行。我们不仅绕过了这个防病毒软件，还将检测率从22/35降低到2/35，这相当令人印象深刻。对源代码进行一些小修改将生成一个完全不可检测的FUD（完全不可检测）。但是，我会把这留给你来完成。
- en: Further roadmap and summary
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步的路线图和总结
- en: Throughout this chapter, we looked at cutting-edge real-world scenarios, where
    it's not just about exploiting vulnerable software; instead, web applications
    made way for us to get control of the systems. We saw how we could use external
    interfaces to scan and exploit the targets from the internal network. We also
    saw how we could use our non-Metasploit tools with the help of meterpreter sessions
    to scan internal networks. By the end, we saw how we could evade AV solutions
    with our existing meterpreter shellcode, which made it easy to avoid the eyes
    of our victim. For further reading on hardcore exploitation, you can refer to
    my mastering series book on Metasploit called *Mastering Metasploit*.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了最前沿的现实世界场景，不仅仅是利用易受攻击的软件；相反，Web应用程序为我们提供了控制系统的途径。我们看到了如何利用外部接口来扫描和利用内部网络中的目标。我们还看到了如何利用我们的非Metasploit工具以及meterpreter会话来扫描内部网络。最后，我们看到了如何利用现有的meterpreter
    shellcode来规避反病毒解决方案，从而轻松避开我们受害者的眼睛。要进一步阅读有关强硬的利用的内容，您可以参考我关于Metasploit的掌握系列书籍*掌握Metasploit*。
- en: 'You can perform the following exercises to make yourself comfortable with the
    content covered in this chapter:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以执行以下练习，以使自己熟悉本章涵盖的内容：
- en: Try to generate a FUD meterpreter backdoor
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试生成一个FUD meterpreter后门
- en: Use socks in the browser to browse content in internal networks
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在浏览器中使用socks来浏览内部网络中的内容
- en: Try building shellcode without bad characters
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试构建没有坏字符的shellcode
- en: Figure out the difference between using a reverse TCP and a bind TCP payload
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弄清楚使用反向TCP和绑定TCP有效载荷的区别
- en: Get yourself familiar with various hash types
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉各种哈希类型
- en: For now, keep practicing and honing your skills on Metasploit because it is
    not the end, IT'S JUST THE BEGINNING.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，继续练习和磨练你在Metasploit上的技能，因为这不是结束，这只是开始。
- en: This book was downloaded from AvaxHome!
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书是从AvaxHome下载的！
- en: 'Visit my blog with more new books:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 访问我的博客，了解更多新书籍：
- en: '[https://avxhm.se/blogs/AlenMiler](https://tr.im/avaxhome)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://avxhm.se/blogs/AlenMiler](https://tr.im/avaxhome)'
