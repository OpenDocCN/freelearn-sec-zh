- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Setting Up the Penetration Testing Environment
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置渗透测试环境
- en: Continuing with the first part of our book, this is one of the most practical
    chapters. It’s obviously impossible to conduct a high quality pentest without
    the necessary toolbelt. We discuss some possibilities here along with some utilities
    that will help you on your daily API pentesting life. You will find instructions
    to install all major tools I applied to build the exercises, which are the same
    tools you will use in real API intrusion tests. There are also a couple of decisions
    that you need to make regarding the operating system and the **Integrated Development
    Environment** (**IDE**) to adopt. You can save some considerable time by cloning
    the book’s repository. I shared all codes that are present in the following chapters,
    together with some tools.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 继续我们的书籍的第一部分，这是最实用的章节之一。显然，没有必要的工具包，进行高质量的渗透测试是不可能的。我们将在这里讨论一些可能性以及一些可以帮助你日常API渗透测试的工具。你将找到安装我在构建练习中应用的所有主要工具的说明，这些工具也是你在实际的API入侵测试中将使用的工具。还有一些关于操作系统和**集成开发环境**（**IDE**）的决策需要你做出。通过克隆本书的代码仓库，你可以节省相当多的时间。我分享了所有出现在后续章节中的代码和一些工具。
- en: 'In this chapter we’re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要话题：
- en: Selecting tools and frameworks
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择工具和框架
- en: Building a testing lab
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立测试实验室
- en: Configuring testing environments
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置测试环境
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: While some pentesters have a couple of laptops, each one with a release of one
    of the most prevalent operating systems (Linux, macOS and Windows), other prefer
    hosting their testing environments on some public or private cloud. I also previously
    worked with forensic analysis. There, the operating system’s family does make
    a point when conducting a deep analysis because of filesystems’ internals or some
    other intrinsic feature, such as libraries, command utilities or kernel. Nowadays,
    I belong to the team who works with local VMs.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然一些渗透测试人员有几台笔记本电脑，每台都安装一个最常见操作系统的版本（Linux、macOS和Windows），但其他人则倾向于将他们的测试环境托管在某个公共或私有云上。我以前也从事过取证分析。在那里，操作系统的家族确实很重要，特别是在进行深度分析时，因为文件系统的内部结构或其他一些固有特性，如库、命令工具或内核。如今，我属于使用本地虚拟机的团队。
- en: 'Hence, I used a virtual machine for all the subsequent chapters of this book.
    To have a decent experience, it’s advisable that you have at least the following
    hardware config:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我在本书接下来的所有章节中都使用了虚拟机。为了获得良好的体验，建议你至少具备以下硬件配置：
- en: Some Intel Core i7 or an equivalent AMD chip, or some Apple silicon computer.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些Intel Core i7处理器或相应的AMD芯片，或者一些苹果自研芯片的电脑。
- en: 16 GB of RAM.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 16 GB内存。
- en: 1 TB of hard drive.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 TB硬盘。
- en: Selecting tools and frameworks
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择工具和框架
- en: 'We will cover a reasonable number of API topics in the following chapters.
    So, we should start with selecting appropriate utilities that will diminish our
    work. Since we will leverage a VM, we must start with choosing a hypervisor. This
    part has various options and sections:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将涵盖相当数量的API话题。所以，我们应该从选择合适的工具开始，这些工具将减少我们的工作量。既然我们将使用虚拟机，我们必须从选择一个虚拟机监控器开始。这个部分有多种选择和章节：
- en: '**Windows**'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows**'
- en: '**VMware Workstation**: This product recently (2024) became free for **personal**
    use. It’s very stable, frequently updated and can forward all CPU flags to the
    guest OS. I’d definitely recommend this if you’re using Windows as your host OS.'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VMware Workstation**：该产品最近（2024年）已变为**个人**使用免费。它非常稳定，更新频繁，并且可以将所有CPU标志转发到客机操作系统。如果你使用Windows作为主机操作系统，我一定推荐这个。'
- en: '**Oracle Virtualbox**: An open-source cross-platform hypervisor controlled
    by Oracle. It has extension packs and works quite smoothly in pretty much any
    Windows release. The biggest limitation when this chapter was written (and that
    was present for a while in the product’s history) though, was the lack of virtualization
    registers for guest OSs.'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Oracle Virtualbox**：这是由Oracle控制的开源跨平台虚拟机监控器。它有扩展包，几乎可以在任何Windows版本上顺利运行。然而，在本章写作时（并且该问题在该产品历史上持续了一段时间），最大的限制是缺少虚拟化寄存器来支持客机操作系统。'
- en: '**Microsoft Hyper-V**: This is Windows’ embedded hypervisor. Works both on
    desktop and on server releases of the OS. It has a subset called **Windows Subsystem
    for Linux** (**WSL**), currently in its second version, which allows the deployment
    of some headless Linux distros.'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft Hyper-V**：这是Windows内嵌的虚拟机监控器。可以在桌面版和服务器版操作系统上使用。它有一个名为**Windows
    Subsystem for Linux**（**WSL**）的子集，目前已经是第二个版本，允许部署一些无头的Linux发行版。'
- en: '**macOS**'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**macOS**'
- en: '**VMware Fusion**: This product recently (2024) became free for **personal**
    use. Sharing an update lifecycle similar to its Windows brother, it’s an option
    you should consider when running an Apple host OS.'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VMware Fusion**：这款产品最近（2024年）变为**个人**免费使用。它的更新生命周期与 Windows 版本类似，如果你使用的是
    Apple 主机操作系统，这也是一个应该考虑的选项。'
- en: '**Oracle Virtualbox**: It’s also available for macOS, but since the release
    of the Apple silicon chips (M1, M2, M3…), it stayed in beta. Unfortunately, starting
    a Linux guest OS was not successful with such chips when this chapter was written.'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Oracle Virtualbox**：它也适用于 macOS，但自从 Apple Silicon 芯片（M1、M2、M3…）发布以来，它一直处于
    beta 阶段。不幸的是，在编写本章时，使用这种芯片启动 Linux 来宾操作系统并不成功。'
- en: '**UTM**: This was a pleasant finding while I was researching products options
    and features to compose the lab. Because of the uncertainty about VMware Fusion’s
    license and the limitations and instabilities of Virtualbox on ARM/Apple silicon,
    I picked UTM. It is a light, low on advanced features open-source hypervisor based
    on QEMU that does a good job on emulating hardware for guest OSs. Therefore, it’s
    my recommendation if you’re running macOS on an Apple silicon.'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UTM**：这是我在研究产品选项和功能时的一个意外发现。由于对 VMware Fusion 授权的疑虑以及 Virtualbox 在 ARM/Apple
    Silicon 上的限制和不稳定性，我选择了 UTM。它是一个轻量级的、低端功能的开源虚拟化程序，基于 QEMU，在为来宾操作系统模拟硬件方面做得很好。因此，如果你在
    Apple Silicon 上运行 macOS，它是我的推荐选择。'
- en: '**Linux**'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linux**'
- en: '**VMware Workstation**: The package is stable enough to run on top of any major
    distro. Combining easiness of use, powerfulness of resources and free licensing,
    it’s my recommendation when running Linux as host OS.'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VMware Workstation**：这个软件包足够稳定，可以在任何主要发行版上运行。结合了易用性、强大的功能和免费的授权，它是我推荐的在 Linux
    主机操作系统上运行的工具。'
- en: '**Oracle Virtualbox**: For sure, also available here. You can easily download
    binaries for some major distros, such as Fedora, Debian, Ubuntu and openSUSE.
    If using other distribution, try its source code.'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Oracle Virtualbox**：当然，这里也可以下载。你可以轻松下载一些主要发行版的二进制文件，例如 Fedora、Debian、Ubuntu
    和 openSUSE。如果使用其他发行版，可以尝试其源代码。'
- en: '**QEMU-KVM**: If you feel satisfied with managing VMs using the command line
    only, this is a good choice. All Linux distributions have an implementation of
    one of these utilities or both. Although accompanied by some important and effective
    utilities, it can eventually become boring especially when you have to context
    switching a lot between the guest OS and the host OS. Use it as a last resource.'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**QEMU-KVM**：如果你满意只通过命令行管理虚拟机，这是一个不错的选择。所有 Linux 发行版都有实现这些工具中的一个或两个。虽然有一些重要且有效的工具，但它最终可能会变得乏味，特别是当你需要频繁在来宾操作系统和主机操作系统之间切换时。建议将其作为最后的资源。'
- en: All tools demonstrated in this book run on Linux. Some of them also have versions
    for other systems, and some can be executed as Docker containers. To keep consistency
    throughout the chapters, I preferred selecting Linux. I used an Apple computer
    with an Apple silicon to write most of this book. Just a couple of labs could
    not run on such platform because of limitations of the tools used, and this was
    circumvented with another computer running Windows on an Intel chip. In both scenarios,
    I selected an Ubuntu Desktop distribution running as a VM. For the Apple machine,
    I selected UTM as the hypervisor and for the Windows computer, I picked VMware
    Workstation.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中演示的所有工具都可以在 Linux 上运行。它们中的一些也有其他系统的版本，还有一些可以作为 Docker 容器运行。为了保持章节间的一致性，我选择了
    Linux。我使用了一台搭载 Apple Silicon 的 Apple 计算机来编写本书的大部分内容。只有少数实验无法在该平台上运行，原因是所使用工具的限制，且通过另一台运行
    Windows 的 Intel 计算机来解决了这个问题。在这两种情况下，我选择了作为虚拟机运行的 Ubuntu Desktop 发行版。对于 Apple 机器，我选择了
    UTM 作为虚拟化管理程序，而对于 Windows 计算机，我选择了 VMware Workstation。
- en: 'The next step, although optional can help you with the coding part. It’s about
    selecting an IDE. There are some options you could consider in this sense:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步，虽然是可选的，但可以帮助你完成编码部分。它是关于选择一个集成开发环境（IDE）。在这方面，你可以考虑以下几个选项：
- en: '`vi`, and maybe one of its more powerful resources are the keystroke shortcuts.
    Contrary to Emacs, it may come preinstalled on some distros. However, `vim` has
    a modal way of work (editing vs visualizing) that can be cumbersome for newcomers.
    Besides that, there’s almost no graphical representation of anything. By default,
    you only see the text you’re editing and nothing else.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vi`，以及它可能的一个更强大的功能——快捷键。与 Emacs 相反，它可能在一些发行版上预安装。然而，`vim` 有一种模态的工作方式（编辑与可视化），对新手来说可能有些繁琐。除此之外，几乎没有任何图形化的表示。默认情况下，你只能看到你正在编辑的文本，其他什么也看不见。'
- en: '**Graphical**:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图形化**：'
- en: 'There is a reasonable amount of graphical IDEs in this category, like Atom,
    PyCharm and Sublime. In this book, we are going to primarily use either Python
    or Golang for our examples and exercises. Hence, there is no need for something
    too heavy in terms of resource consumption or with lots of complex features. I’m
    going to recommend only one to you, which is **Visual Studio Code** (or **VScode**,
    for short). There’s even an open-source version of it, called **VSCodium**. This
    product showed some quite useful features when I had to code: syntax highlighting,
    code completion, inline help, debugger, inline terminal, to name a few.'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个类别中有很多图形化的 IDE，比如 Atom、PyCharm 和 Sublime。在本书中，我们将主要使用 Python 或 Golang 进行示例和练习。因此，不需要消耗太多资源或具备复杂功能的工具。我只会向你推荐一个，它就是
    **Visual Studio Code**（简称 **VScode**）。它甚至有一个开源版本，叫做 **VSCodium**。当我需要编写代码时，这个产品显示出了非常实用的功能：语法高亮、代码补全、内联帮助、调试器、内联终端，等等。
- en: I ended up picking VScode (the non-open-source version) because of the features
    already mentioned but also because some extensions (how it calls its plugins)
    do not work smoothly with VSCodium.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最后我选择了 VScode（非开源版本），因为之前提到的功能，还有一些扩展（即它所称的插件）在 VSCodium 上运行不太顺畅。
- en: Once you learned the lab’s options, it’s time to start building it. Let’s go!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你了解了实验室的选项，就该开始构建它了。让我们开始吧！
- en: Building a testing lab
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建测试实验室
- en: Now that you have chosen your tools and frameworks, let’s start building the
    environment that will accommodate our lab. I won’t show neither the hypervisor
    nor Ubuntu installation steps because they are very straightforward. However,
    should you find some trouble while installing them, you can always check the official
    documentations , such as https://help.ubuntu.com/20.04/installation-guide/index.html,
    https://docs.fedoraproject.org/en-US/fedora/latest/getting-started/, and https://download.virtualbox.org/virtualbox/7.0.18/UserManual.pdf.
    The sequence of tools that you will see in this section sort of follows the sequence
    they are introduced in the upcoming chapters. Some of them only contain a couple
    of screenshots and were not actually used throughout the book. So, their installations
    won’t be covered here.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经选择了你的工具和框架，让我们开始构建一个能够支持我们实验室的环境。我不会展示虚拟化软件或 Ubuntu 的安装步骤，因为它们非常简单。不过，如果在安装过程中遇到问题，你可以随时查阅官方文档，例如
    https://help.ubuntu.com/20.04/installation-guide/index.html、https://docs.fedoraproject.org/en-US/fedora/latest/getting-started/
    和 https://download.virtualbox.org/virtualbox/7.0.18/UserManual.pdf。本节所提到的工具的顺序大致按照它们在接下来的章节中出现的顺序排列。它们中的一些只包含了几张截图，并没有在整本书中使用，所以它们的安装过程在这里不做覆盖。
- en: Installing Docker
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Docker
- en: Let’s start with installing Docker first.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先从安装 Docker 开始吧。
- en: 'With your VM fully loaded, open a command prompt and just check if `curl` is
    installed. Some newer releases of Bash suggest the command to install a software
    when it’s not present. In any case, should `curl` is not present, you can easily
    install it with:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在虚拟机完全加载后，打开命令提示符并检查是否安装了`curl`。一些较新的 Bash 版本在缺少该命令时会提示安装软件。无论如何，如果没有安装`curl`，你可以轻松地通过以下命令安装：
- en: '[PRE0]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The next utility we will need is Docker. The official documentation has a comprehensive
    step-by-step guide here (https://docs.docker.com/engine/install/ubuntu/).
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来我们需要的工具是 Docker。官方文档提供了一个详尽的分步指南，链接在这里（https://docs.docker.com/engine/install/ubuntu/）。
- en: 'Before installing it per se, you have to run a couple of steps to prepare your
    system, such as adding its official repository and installing the signing key:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安装之前，你需要执行一些准备步骤，比如添加官方仓库并安装签名密钥：
- en: '[PRE1]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And then you install Docker with:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后你可以通过以下命令安装 Docker：
- en: '[PRE2]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Do not forget to give your username all the necessary permissions to run it.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要忘记赋予你的用户名所有必要的权限以便运行它。
- en: '[PRE3]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The first container we’ll install is going to be WebGoat which comes with WebWolf.
    Simply run the following and you’ll have all you need to run both software:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先安装的容器是 WebGoat，它包含了 WebWolf。只需运行以下命令，你就能获得运行这两个软件所需的一切：
- en: '[PRE4]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: $ docker images
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ docker images
- en: REPOSITORY                   TAG               IMAGE ID       CREATED         SIZE
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仓库                   标签               镜像 ID       创建时间         大小
- en: webgoat/webgoat              latest            cea483e51e8f   6 months ago    404MB
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: webgoat/webgoat              最新版本            cea483e51e8f   6个月前    404MB
- en: '[PRE5]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now that Docker is installed, let’s add more software to our lab.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 Docker 已经安装完毕，让我们为实验室添加更多的软件。
- en: Installing OWASP Software
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 OWASP 软件
- en: The following subsections cover the installation of projects from OWASP. It’s
    an organization that unites recognized professionals with diverse backgrounds.
    They discuss and establish standards that are adopted throughout the world, as
    well as create software and tools to help security professionals and enthusiasts
    to practice and exercise their roles, especially on offensive security.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下子章节介绍 OWASP 项目的安装。OWASP 是一个将不同背景的公认专业人士联合在一起的组织。他们讨论并制定全球采纳的标准，并创建帮助安全专业人员和爱好者练习和实践其角色的软件和工具，尤其是在进攻性安全方面。
- en: Installing crAPI
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 crAPI
- en: We’ll start by installing crAPI, which is another project from OWASP that’s
    full of vulnerabilities.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从安装 crAPI 开始，这是 OWASP 的另一个项目，充满了漏洞。
- en: First, clone the repository located at https://github.com/OWASP/crAPI.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先克隆位于 https://github.com/OWASP/crAPI 的仓库。
- en: We’ll make use of `docker-compose` to put it up.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用`docker-compose`来启动它。
- en: 'Install it with `sudo apt install docker-compose` and then type the following:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`sudo apt install docker-compose`安装它，然后输入以下命令：
- en: '[PRE6]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will download some images and start all containers.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将下载一些镜像并启动所有容器。
- en: 'Check what you now have:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查你现在拥有的内容：
- en: '[PRE7]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And the containers:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还有容器：
- en: '[PRE8]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: crAPI is up. Time to install Zed Attack Proxy.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: crAPI 已启动。是时候安装 Zed Attack Proxy 了。
- en: Installing OWASP ZAP
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 OWASP ZAP
- en: Let’s move on and install OWASP ZAP. This is a graphical process.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续安装 OWASP ZAP。这是一个图形化的过程。
- en: First download the Linux Installer from here (https://www.zaproxy.org/download/).
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先从这里下载 Linux 安装程序（https://www.zaproxy.org/download/）。
- en: 'You’ll have to install Java to run ZAP. When you simply type `java` on a command
    prompt, Bash will suggest you a couple of options. You must have a Java Virtual
    Machine with at least version 11:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要安装 Java 才能运行 ZAP。当你在命令提示符中输入`java`时，Bash 会建议你几个选项。你必须安装至少版本为 11 的 Java 虚拟机：
- en: '[PRE9]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then run the installer (as root):'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后以 root 权限运行安装程序：
- en: '[PRE10]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As a result, the welcome screen is displayed (*Figure 2**.1*).
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果，会显示欢迎界面（*图 2**.1*）。
- en: '![Figure 2.1 – ZAP installer’s welcome screen](img/B19657_02_01.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.1 – ZAP 安装程序欢迎界面](img/B19657_02_01.jpg)'
- en: Figure 2.1 – ZAP installer’s welcome screen
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 – ZAP 安装程序欢迎界面
- en: Click the **Next** button and you’ll be shown two options (*Figure 2**.2*).
    As we are advanced users, let’s do a **Custom installation**.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮，你将看到两个选项（*图 2**.2*）。由于我们是高级用户，让我们选择**自定义安装**。
- en: '![Figure 2.2 – Picking a custom installation](img/B19657_02_02.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.2 – 选择自定义安装](img/B19657_02_02.jpg)'
- en: Figure 2.2 – Picking a custom installation
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – 选择自定义安装
- en: This means a couple of subsequent questions will be asked. The first one is
    the installation directory. You can choose the default value, unless you have
    a partition with more/dedicated disk space. You will also see how much disk space
    is required and how much you have left (*Figure 2**.3*).
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这意味着会接下来问你一些问题。第一个问题是安装目录。你可以选择默认值，除非你有一个分区拥有更多的磁盘空间。你还会看到需要多少磁盘空间以及剩余多少空间（*图
    2**.3*）。
- en: '![Figure 2.3 – Choosing the installation directory](img/B19657_02_03.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.3 – 选择安装目录](img/B19657_02_03.jpg)'
- en: Figure 2.3 – Choosing the installation directory
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – 选择安装目录
- en: Then you have to inform where the installer will create the symbolic links.
    This is to make the software and its internal components to work when you invoke
    it either from the command line or from some window manager. Choose the default,
    since it points out to a directory that’s in system’s PATH (*Figure 2**.4*).
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，你需要告知安装程序将在哪个位置创建符号链接。这样可以确保软件及其内部组件在你从命令行或窗口管理器中调用时正常工作。选择默认选项，因为它指向一个系统
    PATH 中的目录（*图 2**.4*）。
- en: '![Figure 2.4 – Selecting where the installer will create the symbolic links
    to the binaries](img/B19657_02_04.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.4 – 选择安装程序将在哪里创建二进制文件的符号链接](img/B19657_02_04.jpg)'
- en: Figure 2.4 – Selecting where the installer will create the symbolic links to
    the binaries
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4 – 选择安装程序将在哪里创建二进制文件的符号链接
- en: Next, you need to tell if you want or not a desktop icon. That’s cosmetic although
    useful in some cases. It didn’t hurt, so I selected it (*Figure 2**.5*).
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你需要决定是否需要桌面图标。虽然这是外观设置，但在某些情况下也很有用。它无妨，所以我选择了它（*图 2**.5*）。
- en: '![Figure 2.5 –  Creating a desktop icon for the app](img/B19657_02_05.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.5 – 为应用程序创建桌面图标](img/B19657_02_05.jpg)'
- en: Figure 2.5 – Creating a desktop icon for the app
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5 – 为应用程序创建桌面图标
- en: Next step is about updates. Do not forget to select the checkbox about checking
    updates on the startup, but do not select the one that installs new ZAP releases.
    As it happens with any more complex software like this one, you should read its
    release notes before considering installing a new version. Some conflict might
    be imposed to your system with other software. So, it’s safe to check first (*Figure
    2**.6*).
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是关于更新的内容。不要忘记勾选启动时检查更新的复选框，但不要选择安装新的 ZAP 版本的复选框。像这种复杂的软件，在考虑安装新版本之前，您应先阅读其发布说明。其他软件可能与之冲突。因此，首先进行检查是安全的（*图
    2.6*）。
- en: '![Figure 2.6 – Some update options](img/B19657_02_06.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.6 – 一些更新选项](img/B19657_02_06.jpg)'
- en: Figure 2.6 – Some update options
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6 – 一些更新选项
- en: After this, the installation is complete. Try launching the application from
    the graphical interface. It may turn out that no icon is displayed with it (*Figure
    2**.7*).
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成此操作后，安装就完成了。尝试从图形界面启动应用程序。可能会发现没有图标显示出来（*图 2.7*）。
- en: '![Figure 2.7 – ZAP’s icon does not show the app’s actual icon](img/B19657_02_07.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.7 – ZAP 的图标未显示应用程序的实际图标](img/B19657_02_07.jpg)'
- en: Figure 2.7 – ZAP’s icon does not show the app’s actual icon
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7 – ZAP 的图标未显示应用程序的实际图标
- en: This is not a problem. It might have some relationship with the JVM configuration
    or even your Linux distribution.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是问题。它可能与 JVM 配置或您的 Linux 发行版有关。
- en: Every time it loads, ZAP asks if you want to persist the session. If you’re
    willing to save your activities, choose one of the relevant options. For the majority
    of the exercises you’ll do here, there’s no need for so (*Figure 2**.8*).
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每次加载时，ZAP 会询问您是否要保持会话。如果您愿意保存您的活动，请选择相关选项。对于您在这里进行的大部分操作，实际上没有必要这样做（*图 2.8*）。
- en: '![Figure 2.8 – Whether or not to persist the session](img/B19657_02_08.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.8 – 是否保持会话](img/B19657_02_08.jpg)'
- en: Figure 2.8 – Whether or not to persist the session
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8 – 是否保持会话
- en: After you click on **Start**, the tool finally loads. You may have been presented
    the window on *Figure 2**.9*. ZAP has a reasonable number of add-ons, and they
    follow independent update cycles. Some recommendations may pop-up and confirm
    the process shall continue. Do not ignore them (*Figure 2**.9*).
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**开始**后，工具最终加载完毕。您可能已看到*图 2.9*中的窗口。ZAP 拥有合理数量的插件，并且它们遵循独立的更新周期。可能会弹出一些推荐，确认后继续过程。请不要忽视它们（*图
    2.9*）。
- en: '![Figure 2.9 – ZAP add-on optional yet recommended update](img/B19657_02_09.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.9 – ZAP 插件的可选但推荐的更新](img/B19657_02_09.jpg)'
- en: Figure 2.9 – ZAP add-on optional yet recommended update
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9 – ZAP 插件的可选但推荐的更新
- en: The following figure shows a screenshot of some of the ZAP’s add-ons and the
    possibility to update them all with one click and in sequence (*Figure 2**.10*).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了 ZAP 的一些插件的截图，并且可以一键按顺序更新它们（*图 2.10*）。
- en: '![Figure 2.10 – ZAP’s add-ons update screen](img/B19657_02_10.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.10 – ZAP 的插件更新界面](img/B19657_02_10.jpg)'
- en: Figure 2.10 – ZAP’s add-ons update screen
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.10 – ZAP 的插件更新界面
- en: OWASP software has been installed. Let’s include another toolbelt item.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP 软件已经安装。接下来我们加入另一个工具项。
- en: Installing Burp Suite
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Burp Suite
- en: Another tool that we’ll apply a lot is Burp Suite. There is a couple of available
    versions, but we’ll use the Community Edition.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将大量使用的另一个工具是 Burp Suite。该工具有几个版本可供选择，但我们将使用社区版。
- en: 'Download the installer at https://portswigger.net/burp/releases/community/latest.
    Then simply execute it:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载安装程序：https://portswigger.net/burp/releases/community/latest。然后直接执行它：
- en: '[PRE11]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As usual, first screen is the welcome screen (*Figure 2**.11*).
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 和往常一样，第一屏是欢迎界面（*图 2.11*）。
- en: '![Figure 2.11 – Burp installation welcome screen](img/B19657_02_11.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.11 – Burp 安装欢迎界面](img/B19657_02_11.jpg)'
- en: Figure 2.11 – Burp installation welcome screen
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.11 – Burp 安装欢迎界面
- en: Select **Next** and you’ll be asked the directory where it will be installed
    (*Figure 2**.12*).
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**下一步**，然后系统会提示您选择安装目录（*图 2.12*）。
- en: '![Figure 2.12 – Burp’s installation directory](img/B19657_02_12.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.12 – Burp 的安装目录](img/B19657_02_12.jpg)'
- en: Figure 2.12 – Burp’s installation directory
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.12 – Burp 的安装目录
- en: As it happened with ZAP (*Figure 2**.4*), the installer asks where symbolic
    links should be created. Do the same as the previous figure and select the default
    value, unless you have another area with more disk space (*Figure 2**.13*).
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 和 ZAP 一样（*图 2.4*），安装程序会询问应该在哪创建符号链接。请按照前图所示，选择默认值，除非您有其他空间更大的区域（*图 2.13*）。
- en: '![Figure 2.13 – Where links to Burp’s binaries should be created](img/B19657_02_13.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.13 – 应该创建 Burp 二进制文件链接的位置](img/B19657_02_13.jpg)'
- en: Figure 2.13 – Where links to Burp’s binaries should be created
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.13 – 应该创建 Burp 二进制文件链接的位置
- en: Wait for the installer to decompress and put the files in the right locations.
    This may take a while depending on the current release and your VM’s hardware
    configuration (*Figure 2**.14*).
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待安装程序解压并将文件放置到正确的位置。根据当前版本和你的虚拟机硬件配置，这可能需要一些时间（*图 2**.14*）。
- en: '![Figure 2.14 – Files being installed](img/B19657_02_14.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.14 – 文件正在安装](img/B19657_02_14.jpg)'
- en: Figure 2.14 – Files being installed
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.14 – 文件正在安装
- en: Just finish the setup and you’re good to go (*Figure 2**.15*).
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只需完成设置，你就可以开始了（*图 2**.15*）。
- en: '![Figure 2.15 – Installation’s end](img/B19657_02_15.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.15 – 安装结束](img/B19657_02_15.jpg)'
- en: Figure 2.15 – Installation’s end
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.15 – 安装结束
- en: At least, Burp comes with the right icon. When you type its name on your Linux’s
    windows manager, you’ll see it. Load it to verify if it’s all OK with the installation
    (*Figure 2**.16*).
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 至少，Burp 配备了正确的图标。当你在 Linux 的窗口管理器中输入它的名称时，你会看到它。加载它来验证安装是否一切正常（*图 2**.16*）。
- en: '![Figure 2.16 – Calling Burp though the GUI](img/B19657_02_16.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.16 – 通过 GUI 调用 Burp](img/B19657_02_16.jpg)'
- en: Figure 2.16 – Calling Burp though the GUI
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.16 – 通过 GUI 调用 Burp
- en: Every time you open the application, you’ll be prompted if you want to start
    a temporary project in memory or if you’d prefer to load a previously saved project.
    In all exercises of this book, we’ll be creating temporary projects only, so just
    choose the first option and click on **Next** (*Figure 2**.17*).
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每次打开应用程序时，你将被提示是否要在内存中启动一个临时项目，或者是否希望加载之前保存的项目。在本书的所有练习中，我们将只创建临时项目，所以只需选择第一个选项并点击**下一步**（*图
    2**.17*）。
- en: "![Figure 2.17\uFEFF – Choosing how Burp will start](img/B19657_02_17.jpg)"
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: "![图 2.17\uFEFF – 选择 Burp 启动方式](img/B19657_02_17.jpg)"
- en: Figure 2.17 – Choosing how Burp will start
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.17 – 选择 Burp 启动方式
- en: Finally, you will be prompted with which parameters you’d like to use when loading
    Burp. You can configure several of them using the application’s GUI or directly
    editing its configuration files. If you have done this before, you can browse
    the config file and load it here through the corresponding dialog box. Otherwise,
    simply click on **Next** with the selected default option (*Figure 2**.18*).
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，你将被提示选择加载 Burp 时使用的参数。你可以通过应用程序的 GUI 或直接编辑配置文件来配置其中的几个参数。如果你之前做过这一步，你可以浏览配置文件并通过相应的对话框加载它。否则，只需点击默认选项并点击**下一步**（*图
    2**.18*）。
- en: '![Figure 2.18 – Loading Burp’s parameters](img/B19657_02_18.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.18 – 加载 Burp 参数](img/B19657_02_18.jpg)'
- en: Figure 2.18 – Loading Burp’s parameters
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.18 – 加载 Burp 参数
- en: That’s all. Burp is installed. Let’s continue.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，Burp 安装完成。让我们继续。
- en: Installing Postman and Wireshark
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Postman 和 Wireshark
- en: 'Next installations are ridiculously simple: Postman and Wireshark.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的安装步骤极其简单：Postman 和 Wireshark。
- en: Installing Postman
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Postman
- en: 'According to the official documentation, Postman currently (2024) supports
    Ubuntu, Fedora and Debian. Others may also work, but you’ll have to check your
    distro’s documentation besides the own tool’s to double check it. Using snap,
    as recommended by the manufacturer, you can have it on your system with:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 根据官方文档，Postman 当前（2024）支持 Ubuntu、Fedora 和 Debian。其他发行版可能也可以使用，但你需要查看你所在发行版的文档以及该工具本身的文档进行确认。使用厂商推荐的
    snap，你可以通过以下方式在系统中安装它：
- en: '[PRE12]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Done. Call it via the GUI or the CLI (*Figure 2**.19*).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 完成。通过 GUI 或 CLI 调用它（*图 2**.19*）。
- en: '![Figure 2.19 – Calling Postman](img/B19657_02_19.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.19 – 调用 Postman](img/B19657_02_19.jpg)'
- en: Figure 2.19 – Calling Postman
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.19 – 调用 Postman
- en: Installing Wireshark
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Wireshark
- en: 'For Wireshark, if you type wireshark on a command prompt, Bash will suggest
    installing it via APT. So just do it:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Wireshark，如果你在命令提示符下输入 wireshark，Bash 会建议通过 APT 安装它。所以只需照做：
- en: '[PRE13]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There’s a decision you need to take. By default, non-root users are not allowed
    to capture packets from your network devices. If you choose **No** (default),
    you must run Wireshark as root to be able to use it, especially if you’re capturing
    packets from the loopback interface (*Figure 2**.20*).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要做出一个决定。默认情况下，非 root 用户不能从网络设备捕获数据包。如果你选择**否**（默认），你必须以 root 身份运行 Wireshark
    才能使用它，特别是当你捕获来自回环接口的数据包时（*图 2**.20*）。
- en: '![Figure 2.20 – Choosing if non-root users will be able to capture packets](img/B19657_02_20.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.20 – 选择非 root 用户是否能捕获数据包](img/B19657_02_20.jpg)'
- en: Figure 2.20 – Choosing if non-root users will be able to capture packets
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.20 – 选择非 root 用户是否能够捕获数据包
- en: 'I selected `/etc/group` file and add my username to the line with the `wireshark`
    group, logout and login again:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择了`/etc/group`文件，并将我的用户名添加到包含`wireshark`组的那一行，然后注销并重新登录：
- en: '[PRE14]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: After that, I could finally load the software and capture the packets. Wireshark
    is now ready to rock (*Figure 2**.21*).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我终于能够加载软件并捕获数据包了。Wireshark现在准备就绪，开始工作了（*图 2.21*）。
- en: '![Figure 2.21 – Calling Wireshark](img/B19657_02_21.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.21 – 调用 Wireshark](img/B19657_02_21.jpg)'
- en: Figure 2.21 – Calling Wireshark
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.21 – 调用 Wireshark
- en: 'As previously stated, many of the codes created on this book were written either
    in Python or in Golang. Python has a very useful module called `pip` inside such
    environment. Sometimes, it does not come preinstalled with the main language:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，本书中创建的许多代码是用 Python 或 Golang 编写的。Python 在这种环境中有一个非常有用的模块，叫做 `pip`。有时，它并不会随着主语言一起预装：
- en: '[PRE15]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'From here, you have two options. You either run the aforementioned command
    to install the required module only, or you install `pip` and the module. The
    second option is more versatile because you’ll need `pip` in some of the subsequent
    chapters:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，你有两个选择。你可以运行前面提到的命令，只安装所需的模块，或者安装`pip`和模块。第二个选项更为灵活，因为在后续的章节中你会需要`pip`：
- en: '[PRE16]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Depending on the Python version and the Ubuntu release, the first command on
    the block above may install many modules by default. You can check with `pip3
    list`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 Python 版本和 Ubuntu 发布版本，上面块中的第一个命令可能默认安装许多模块。你可以通过`pip3 list`检查已安装的模块。
- en: 'Although I have mentioned that I picked VScode to use as IDE, I didn’t show
    yet how I installed it. There is a couple of available options, described at https://code.visualstudio.com/docs/setup/linux.
    I personally downloaded the binary and installed it with APT (`sudo apt install
    ./code`) and that’s all (*Figure 2**.22*):'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我已经提到我选择了 VScode 作为 IDE，但我还没有展示如何安装它。可以选择几种不同的方法，具体描述请参见https://code.visualstudio.com/docs/setup/linux。我个人下载了二进制文件并通过
    APT 安装了它（`sudo apt install ./code`），就这样（*图 2.22*）：
- en: "![Figure 2.22 – Calling V\uFEFFS code](img/B19657_02_22.jpg)"
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.22 – 调用 VS Code](img/B19657_02_22.jpg)'
- en: Figure 2.22 – Calling VS code
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.22 – 调用 VS Code
- en: This is it for the development environment. Let’s check other tools.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是开发环境的部分。接下来，让我们看看其他工具。
- en: Installing other tools
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装其他工具
- en: We need various types of tools to conduct the different activities in further
    chapters. Some of them will help you with fuzzing (which you’ll learn in detail
    in *Chapters 4 and 6*), some others help with load/stress test, or fake log generation
    or log analysis, and finally source code verification, besides the Golang package
    itself. In this section, we’ll take a look at a few of them. For your convenience,
    as it happened with all downloadable tools presented on this chapter, I put Intel
    and ARM Linux versions of it on the book’s GitHub repository. The book’s repository
    is available at [https://github.com/PacktPublishing/Pentesting-APIs](https://github.com/PacktPublishing/Pentesting-APIs).
    All major code excerpts used throughout the book are there for your convenience.
    Additionally, the utilities have big sizes. So, please check out the `README.md`
    file of this repository which will contain further instructions.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要各种类型的工具来完成后续章节中的不同活动。其中一些工具会帮助你进行模糊测试（你将在*第4章和第6章*中详细学习），其他一些则帮助进行负载/压力测试，或伪造日志生成、日志分析，最后还有源代码验证，除了
    Golang 包本身。在这一节中，我们将看一下其中的一些工具。为了方便你使用，就像本章中展示的所有可下载工具一样，我已经将其 Intel 和 ARM Linux
    版本上传到本书的 GitHub 仓库。该仓库地址是 [https://github.com/PacktPublishing/Pentesting-APIs](https://github.com/PacktPublishing/Pentesting-APIs)。书中使用的所有主要代码摘录都可以在那里找到。此外，这些工具的大小都比较大，因此，请查看该仓库中的`README.md`文件，里面包含了进一步的安装和使用说明。
- en: Anaconda
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Anaconda
- en: Another nice utility to work with Python is **Anaconda**. You can create additional
    environments to work on and install additional packages on them, like what can
    be accomplished with Virtual Environment. One biggest advantage though is that
    you can update all components and dependencies with a single command. I didn’t
    install it on my system, but you can follow the steps on https://docs.anaconda.com/free/anaconda/install/linux/
    to get it working.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个与 Python 配合使用的优秀工具是**Anaconda**。你可以创建额外的环境来进行工作，并在其中安装额外的软件包，就像使用虚拟环境一样。然而，它的一个最大优势是，你可以通过一个命令更新所有组件和依赖项。我没有在我的系统上安装它，但你可以按照https://docs.anaconda.com/free/anaconda/install/linux/上的步骤进行安装。
- en: Hydra
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Hydra
- en: 'The next tool that will be useful to you in some of the chapters is **Hydra**,
    which is usually applied when you want to conduct some sort of brute force attack.
    To guarantee our happiness, its binary version is available on some Ubuntu default
    repository, so we can easily install it with:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些章节中，将会有一个非常有用的工具是 **Hydra**，它通常用于执行某种暴力破解攻击。为了让我们高兴的是，它的二进制版本在一些 Ubuntu 默认的仓库中可以找到，因此我们可以轻松地通过以下方式进行安装：
- en: '[PRE17]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Patator
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Patator
- en: '**Patator** is also inside our toolbelt. This utility is awesome when you need
    to conduct fuzzing attacks against some targets. However, its footprint may be
    quite considerable:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**Patator** 也在我们的工具箱中。当你需要对某些目标进行模糊测试攻击时，这个工具非常强大。然而，它的占用空间可能相当大：'
- en: '[PRE18]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Radamsa
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Radamsa
- en: 'Moving on, we will install one flexible and powerful tool called **Radamsa**.
    It will be useful when working with fuzzing. The documentation is straightforward
    in terms of the installation (https://gitlab.com/akihe/radamsa):'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将安装一个灵活且强大的工具，名为 **Radamsa**。在进行模糊测试时，它将非常有用。安装文档很简洁（https://gitlab.com/akihe/radamsa）：
- en: '[PRE19]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Yes, you’ll install it from the source code, as this procedure needs to download
    some files that change according to the platform you are running them on.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，你将从源代码进行安装，因为这个过程需要下载一些根据你运行的平台而变化的文件。
- en: Apache Bench
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Apache Bench
- en: 'Moving on, next tool is **Apache Bench** (**ab**), something very useful for
    load tests:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，工具是 **Apache Bench** (**ab**)，这是一个非常有用的负载测试工具：
- en: '[PRE20]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: hping3
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: hping3
- en: 'Not finished yet, for sure. Let’s now install `hping3`, which is an utility
    that sends ECHO packets using other protocols than ICMP. APT is your tool of choice
    again:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 还没有完成，肯定的。接下来我们来安装 `hping3`，它是一个使用除 ICMP 以外的其他协议发送 ECHO 数据包的工具。再次选择 APT 作为你的工具：
- en: '[PRE21]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: flog
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: flog
- en: 'Next tool is a fake log generator. It’s very useful when you need to test some
    configuration or some utility you are developing against a mass of logs. It’s
    represented by the `flog` tool which can be installed with APT as well:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个工具是一个伪日志生成器。当你需要对大量日志进行某些配置测试或开发中的某个工具时，它非常有用。这个工具由 `flog` 代表，也可以通过 APT 安装：
- en: '[PRE22]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In [*Chapter 8*](B19657_08.xhtml#_idTextAnchor131), you’ll make use of an utility
    called `filebeat`, that continually pushes changes on files to an external Elastic
    service (like their cloud). It can be very important when you must have continuous
    monitoring of some resource. There are specific packages for major distributions.
    In our case (Ubuntu), you can follow the sequence below. The first line is a slight
    change from the one in the official documentation, since the use of `apt-key`
    to add repository keys is now deprecated.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第8章*](B19657_08.xhtml#_idTextAnchor131) 中，你将使用一个名为 `filebeat` 的工具，它会持续将文件的变化推送到外部
    Elastic 服务（如它们的云服务）。当你必须对某些资源进行持续监控时，这个工具非常重要。针对主要发行版，有专门的包。在我们的情况下（Ubuntu），你可以按照下面的步骤进行。第一行与官方文档中的稍有不同，因为现在
    `apt-key` 用于添加仓库密钥的方法已经被弃用。
- en: '[PRE23]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `wget` and `echo` commands are on single lines. This package is supported
    on both, Intel and ARM processors. For your convenience, there are copies of the
    `.deb` packages for both platforms available on the book’s GitHub repository.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`wget` 和 `echo` 命令是单行的。这个包支持 Intel 和 ARM 处理器。为了方便起见，书中的 GitHub 仓库提供了这两个平台的
    `.deb` 包副本。'
- en: ripgrep
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ripgrep
- en: 'Another quick and interesting tool that you will make use to search through
    log files is `ripgrep`. It’s also installed via APT, but its binary is simply
    `rg`:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个快速且有趣的工具，你将用它来搜索日志文件中的内容，叫做 `ripgrep`。它同样通过 APT 安装，但它的二进制文件名是 `rg`：
- en: '[PRE24]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Safety
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Safety
- en: 'Some tools and utilities that you’ll use on this book are released as Python
    modules. This is the case of `Safety`, a scanner to look for vulnerabilities in
    source code files:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中你将使用的一些工具和实用程序是作为 Python 模块发布的。这就是 `Safety` 的情况，它是一个扫描器，用于查找源代码文件中的漏洞：
- en: '[PRE25]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Golang
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Golang
- en: '`snap`. This was the one I chose for its simplicity:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`snap`。这是我为其简洁性选择的：'
- en: '[PRE26]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now let’s see how we can create separate environments to avoid bugging our main
    installation and start playing with the codes.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何创建独立的环境，以避免影响我们的主要安装，并开始使用代码进行实验。
- en: Configuring testing environments
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置测试环境
- en: The first recommendation I give is to always use Python’s **Virtual Environment**.
    **Anaconda** is nice and is very powerful, but it’s simply not necessary here.
    If you intend to combine the code you’ll see here on this book with other utilities
    or environments we were already creating, then Anaconda can become a valid option.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我给出的第一个建议是始终使用 Python 的 **虚拟环境**。**Anaconda** 很好且功能强大，但在这里并不是必需的。如果你打算将本书中看到的代码与我们已经创建的其他工具或环境结合使用，那么
    Anaconda 可以成为一个有效的选择。
- en: In terms of the number of virtual environments you should have, it’s up to you.
    You can for example create one per chapter for the sake of better organizing the
    whole stuff, but this will mean more disk space will be occupied, since the same
    Python modules will be installed multiple times. Alternatively, you can create
    a single environment, let’s say `pentest`, and create sub-directories under it
    with the codes for each chapter, following the structure proposed on the book’s
    repository.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 至于你应该有多少个虚拟环境，这取决于你。例如，你可以为每一章创建一个虚拟环境，以便更好地组织整个内容，但这意味着会占用更多磁盘空间，因为相同的 Python
    模块会被多次安装。或者，你可以创建一个单一的环境，假设叫做 `pentest`，并在其中创建每一章的代码子目录，遵循本书仓库中提议的结构。
- en: 'I chose the second option above since the VM’s disk space is not something
    too big and multiple repeated modules just don’t make much sense. You will definitely
    need at least the following ones for the exercises: `Flask`, `Flask-GraphQL`,
    `Graphene`, `Flask-JWT-Extended`, `Pandas`, `Scapy`. The `safety` utility, as
    previously covered, is another Python module you may want to give a try.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择了上面第二个选项，因为虚拟机的磁盘空间并不大，多个重复的模块并没有太大意义。你肯定至少需要以下模块来进行练习：`Flask`、`Flask-GraphQL`、`Graphene`、`Flask-JWT-Extended`、`Pandas`、`Scapy`。如前所述，`safety`
    工具是你可能想尝试的另一个 Python 模块。
- en: '[PRE27]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Other auxiliary modules, such as `flask-oauth`, `flask-oauthlib`, `jsonify`,
    `requests`, and `scrapy` are also required:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要其他辅助模块，如 `flask-oauth`、`flask-oauthlib`、`jsonify`、`requests` 和 `scrapy`：
- en: '[PRE28]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: You are good to move on and start exploring the rest of the book. Enjoy it!
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以继续前进，开始探索本书的其余部分。享受阅读吧！
- en: Summary
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This is the end of *Part 1* of our book. We covered all the tools and utilities
    that will be used in the subsequent chapters. The intention here was to facilitate
    your work if you’re not too familiar with some of the software that we will be
    using.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的 *第 1 部分* 到此结束。我们已经介绍了将在后续章节中使用的所有工具和实用程序。这里的目的是为你提供便利，特别是当你对我们将要使用的软件不太熟悉时。
- en: In the next chapter, we’ll start *Part 2* and you’ll learn about the initial
    steps on pentesting APIs, with the reconnaissance activities. See you there!
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始 *第 2 部分*，你将学习有关渗透测试 API 的初步步骤，包括侦察活动。到时见！
- en: Further reading
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'UTM Official Documentation: [https://docs.getutm.app/](https://docs.getutm.app/)'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UTM 官方文档：[https://docs.getutm.app/](https://docs.getutm.app/)
- en: 'VMware Workstation Documentation: [https://docs.vmware.com/VMware-Workstation-Pro/index.html](https://docs.vmware.com/VMware-Workstation-Pro/index.html)'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VMware Workstation 文档：[https://docs.vmware.com/VMware-Workstation-Pro/index.html](https://docs.vmware.com/VMware-Workstation-Pro/index.html)
- en: 'Oracle Virtualbox Documentation: [https://www.virtualbox.org/wiki/Documentation](https://www.virtualbox.org/wiki/Documentation)'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle Virtualbox 文档：[https://www.virtualbox.org/wiki/Documentation](https://www.virtualbox.org/wiki/Documentation)
- en: 'Visual Studio Code Official Documentation: [https://code.visualstudio.com/docs](https://code.visualstudio.com/docs)'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code 官方文档：[https://code.visualstudio.com/docs](https://code.visualstudio.com/docs)
- en: 'Docker Official Documentation: [https://docs.docker.com/](https://docs.docker.com/)'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 官方文档：[https://docs.docker.com/](https://docs.docker.com/)
- en: 'OWASP WebGoat and WebWolf: [https://owasp.org/www-project-webgoat/](https://owasp.org/www-project-webgoat/)'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP WebGoat 和 WebWolf：[https://owasp.org/www-project-webgoat/](https://owasp.org/www-project-webgoat/)
- en: 'OWASP crAPI: [https://owasp.org/crAPI/docs/challenges.html](https://owasp.org/crAPI/docs/challenges.html)'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP crAPI：[https://owasp.org/crAPI/docs/challenges.html](https://owasp.org/crAPI/docs/challenges.html)
- en: 'OWASP ZAP Documentation: [https://www.zaproxy.org/docs/](https://www.zaproxy.org/docs/)'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP ZAP 文档：[https://www.zaproxy.org/docs/](https://www.zaproxy.org/docs/)
- en: 'Burp Suite Official Documentation: [https://portswigger.net/burp/documentation](https://portswigger.net/burp/documentation)'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Burp Suite 官方文档：[https://portswigger.net/burp/documentation](https://portswigger.net/burp/documentation)
- en: 'Postman Official Documentation: [https://learning.postman.com/docs/introduction/overview/](https://learning.postman.com/docs/introduction/overview/)'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Postman 官方文档：[https://learning.postman.com/docs/introduction/overview/](https://learning.postman.com/docs/introduction/overview/)
- en: 'Wireshark Documentation: [https://www.wireshark.org/docs/](https://www.wireshark.org/docs/)'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Wireshark 文档: [https://www.wireshark.org/docs/](https://www.wireshark.org/docs/)'
- en: 'Tshark Manual Page: [https://www.wireshark.org/docs/man-pages/tshark.html](https://www.wireshark.org/docs/man-pages/tshark.html)'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Tshark 手册页面: [https://www.wireshark.org/docs/man-pages/tshark.html](https://www.wireshark.org/docs/man-pages/tshark.html)'
- en: 'Python Virtual Environments: [https://docs.python.org/3/library/venv.html](https://docs.python.org/3/library/venv.html)'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Python 虚拟环境: [https://docs.python.org/3/library/venv.html](https://docs.python.org/3/library/venv.html)'
- en: 'Anaconda Official Documentation: [https://docs.anaconda.com/](https://docs.anaconda.com/)'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Anaconda 官方文档: [https://docs.anaconda.com/](https://docs.anaconda.com/)'
- en: 'Hydra Documentation: [https://hydra.cc/docs/intro/](https://hydra.cc/docs/intro/)'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Hydra 文档: [https://hydra.cc/docs/intro/](https://hydra.cc/docs/intro/)'
- en: 'Patator Repository: [https://github.com/lanjelot/patator](https://github.com/lanjelot/patator)'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Patator 仓库: [https://github.com/lanjelot/patator](https://github.com/lanjelot/patator)'
- en: 'Radamsa Repository: [https://gitlab.com/akihe/radamsa](https://gitlab.com/akihe/radamsa)'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Radamsa 仓库: [https://gitlab.com/akihe/radamsa](https://gitlab.com/akihe/radamsa)'
- en: 'Apache Bench Manual Page: [https://httpd.apache.org/docs/2.4/en/programs/ab.html](https://httpd.apache.org/docs/2.4/en/programs/ab.html)'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Apache Bench 手册页面: [https://httpd.apache.org/docs/2.4/en/programs/ab.html](https://httpd.apache.org/docs/2.4/en/programs/ab.html)'
- en: 'Hping3 Manual Page: [https://linux.die.net/man/8/hping3](https://linux.die.net/man/8/hping3)'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Hping3 手册页面: [https://linux.die.net/man/8/hping3](https://linux.die.net/man/8/hping3)'
- en: 'Flog Repository: [https://github.com/mingrammer/flog](https://github.com/mingrammer/flog)'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Flog 仓库: [https://github.com/mingrammer/flog](https://github.com/mingrammer/flog)'
- en: 'Filebeat Official Documentation: [https://www.elastic.co/guide/en/beats/filebeat/current/index.html](https://www.elastic.co/guide/en/beats/filebeat/current/index.html)'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Filebeat 官方文档: [https://www.elastic.co/guide/en/beats/filebeat/current/index.html](https://www.elastic.co/guide/en/beats/filebeat/current/index.html)'
- en: 'Ripgrep Documentation: [https://github.com/BurntSushi/ripgrep/blob/master/GUIDE.md](https://github.com/BurntSushi/ripgrep/blob/master/GUIDE.md)'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Ripgrep 文档: [https://github.com/BurntSushi/ripgrep/blob/master/GUIDE.md](https://github.com/BurntSushi/ripgrep/blob/master/GUIDE.md)'
- en: 'Safety Official Documentation: [https://docs.safetycli.com/safety-2](https://docs.safetycli.com/safety-2)'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Safety 官方文档: [https://docs.safetycli.com/safety-2](https://docs.safetycli.com/safety-2)'
- en: 'Python Flask Documentation: [https://flask.palletsprojects.com/en/3.0.x/](https://flask.palletsprojects.com/en/3.0.x/)'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Python Flask 文档: [https://flask.palletsprojects.com/en/3.0.x/](https://flask.palletsprojects.com/en/3.0.x/)'
- en: 'Python Scapy Documentation: [https://scapy.readthedocs.io/en/latest/](https://scapy.readthedocs.io/en/latest/)'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Python Scapy 文档: [https://scapy.readthedocs.io/en/latest/](https://scapy.readthedocs.io/en/latest/)'
- en: 'Python Scrapy Documentation: [https://docs.scrapy.org/en/latest/](https://docs.scrapy.org/en/latest/)'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Python Scrapy 文档: [https://docs.scrapy.org/en/latest/](https://docs.scrapy.org/en/latest/)'
- en: 'Part 2: API Information Gathering and AuthN/AuthZ Testing'
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '第二部分: API 信息收集与身份验证/AuthN/AuthZ 测试'
- en: 'This part covers what you need to do right after figuring out your target API:
    gather more information about it. You will learn techniques to discover information
    about the target, including scanning it, which will help you prepare for the attack.
    You will also learn about the world of API **Authentication** (**AuthN**) and
    **Authorization** (**AuthZ**), two foundational components with their own particularities
    that you need to learn to successfully explore the target.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分涵盖了你在确定目标 API 后需要做的工作：收集更多关于它的信息。你将学习发现目标信息的技巧，包括对其进行扫描，这将帮助你为攻击做好准备。你还将学习到
    API **身份验证** (**AuthN**) 和 **授权** (**AuthZ**) 的相关知识，它们是成功探索目标所必须了解的两个基础组件，每个组件都有其独特之处。
- en: 'This section contains the following chapters:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包含以下章节：
- en: '[*Chapter 3*](B19657_03.xhtml#_idTextAnchor042), *API Reconnaissance and Information
    Gathering*'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第3章*](B19657_03.xhtml#_idTextAnchor042), *API 侦察与信息收集*'
- en: '[*Chapter 4*](B19657_04.xhtml#_idTextAnchor056), *Authentication and Authorization
    Testing*'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第4章*](B19657_04.xhtml#_idTextAnchor056), *身份验证与授权测试*'
