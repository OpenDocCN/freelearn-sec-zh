- en: Attacking Availability
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 攻击可用性
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Executing a deauthentication flood
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行去认证洪水攻击
- en: Detecting beacon frames
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测信标帧
- en: Spoofing beacon frames
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欺骗信标帧
- en: Creating a beacon flood
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建信标洪水攻击
- en: ARP cache poisoning
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ARP缓存中毒
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: So far, we've looked at two of the three components of the CIA triad. Now it's
    time to look at the third and final part of the CIA triad, which is availability.
    Simply put, availability deals with the issues revolving around the loss of access
    to a resource, such as a file or computer or even a whole network, as we will
    see in this chapter. As you can imagine, a loss of availability is a big issue
    mainly due to the fact that if you can't access something, no matter what that
    might be, it essentially becomes worthless to you until you can gain access to
    it again. It's also not too much of a stretch to say that the loss of access to
    an item also is quite frustrating as it means you may be unable to complete your
    job or task until such access is reacquired.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了CIA三要素中的两个。现在是时候看看CIA三要素的第三个和最后一个部分，即可用性。简单地说，可用性处理围绕着对资源（如文件、计算机甚至整个网络）丧失访问的问题，正如我们将在本章中看到的。可以想象，可用性的丧失是一个大问题，主要是因为如果您无法访问某物，无论那是什么，它对您来说基本上变得毫无价值，直到您再次获得访问权限。可以说，丧失对某物的访问权限也是相当令人沮丧的，因为这意味着您可能无法完成工作或任务，直到重新获得访问权限。
- en: Let's think about this for a second when we discuss the concept of availability.
    Imagine a situation in a wireless base network or environment where clients are
    relying on constant reliable access to files, servers, even to the internet, where
    wireless access is lost. In this situation, if these clients are relying on that
    access to carry out their work, you can have a business or client that is effectively
    unable to operate, meaning that the business itself may be unable to operate,
    which is definitely not an ideal situation. Keep in mind that in some cases even
    a partial loss or impeded availability can be enough to severely impact a business.
    We can imagine this situation simply by thinking about situations that we ourselves
    may have been in, such as connecting at a coffee shop, an airport, or even in
    a hotel to a wireless network. A network that is congested beyond capacity, and
    is extremely slow and giving unreliable access to resources is also going to have
    a substantial impact on the operations of the business. In fact, in this scenario
    even though access is there but it is very slow, it is still going to cause a
    business to grind to a halt which is unacceptable and needs to be avoided.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在讨论可用性概念时再思考一下。想象一下在无线基础网络或环境中，客户端依赖于对文件、服务器甚至互联网的持续可靠访问，而无线访问丢失的情况。在这种情况下，如果这些客户端依赖于该访问来进行工作，您可能会有一个无法有效运行的业务或客户，这意味着业务本身可能无法运行，这绝对不是理想的情况。请记住，在某些情况下，即使部分丢失或受阻的可用性也足以严重影响业务。我们可以通过简单地想象自己可能遇到的情况来想象这种情况，比如在咖啡店、机场甚至酒店连接到无线网络。一个超出容量的拥挤网络，极其缓慢并且提供不可靠的资源访问，也会对业务的运营产生重大影响。事实上，在这种情况下，即使访问存在但速度非常慢，也会导致业务陷入停滞，这是不可接受的，需要避免。
- en: 'In wireless networks, countering the effects of availability is a tricky process
    but is very doable to undertake. You''ll find that you have several options to
    counter the types of attacks we are going to see in this particular chapter and
    make your wireless network much more resilient and resistant to the effect of
    a loss of availability. Just to give you a peek, here are some of the countermeasures
    we can employ that can limit the impact of a loss of availability or can even
    remove the possibility:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在无线网络中，对抗可用性的影响是一个棘手的过程，但是非常可行。您会发现您有几种选项来对抗我们在本章中将看到的攻击类型，并使您的无线网络更具弹性和抵抗丧失可用性的影响。只是为了让您一窥究竟，这里有一些我们可以采用的对策，可以限制丧失可用性的影响，甚至可以消除这种可能性：
- en: '**Tuning**: What I mean by tuning is to set up and configure your wireless
    access point to avoid using channels and frequencies that other access points
    in the area may be using. By avoiding the use of those channels, you can go a
    long way toward preventing the slowdowns and loss of availability and reduced
    range that you get by competing for frequencies and congested channels. Now, keep
    in mind why you may not always be able to get exclusive use of a channel and frequency
    in a specific area. You can choose a channel and frequency that is less congested
    than other jails in the area, giving you a little more reading room than you would
    have on a more congested channel.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调谐**：我所说的调谐是设置和配置您的无线接入点，以避免使用其他接入点可能正在使用的频道和频率。通过避免使用这些频道，您可以在很大程度上防止由于争夺频率和拥挤的频道而导致的减速、可用性丧失和减少范围。现在，请记住，您可能并不总是能够在特定区域独占使用频道和频率。您可以选择一个比其他区域的监狱拥挤得少的频道和频率，这样您就可以比在更拥挤的频道上有更多的空间。'
- en: '**Redundancy**: Using this technique simply means we implement something known
    as a mesh network, which is a spider web of sorts, set up between multiple access
    points that are used to cover an area. By using this setup, it is possible to
    have multiple access points covering an area in such a way that if any one of
    these access points, or even multiple access points, become congested we can arrange
    to give a strong signal other nodes or access points can pick up and give the
    client a stronger and more reliable signal. While this setup does take a little
    bit of planning and effort to make it work, it can reap big dividends for anyone
    dealing with the frustration of a slow or congested network. It is also worth
    noting that unlike some of the solutions that have been available over previous
    years, more user-friendly and even consumer-based solutions are available to set
    up mesh networks inexpensively and quickly from the home environment all the way
    up to large-scale enterprise deployments.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**冗余**：使用这种技术简单地意味着我们实施了一种称为网状网络的东西，这是一种类似蜘蛛网的设置，设置在多个用于覆盖区域的接入点之间。通过使用这种设置，可以让多个接入点覆盖一个区域，以便如果其中任何一个接入点，甚至多个接入点，变得拥挤，我们可以安排提供一个强信号，其他节点或接入点可以接收并给客户一个更强大和更可靠的信号。虽然这种设置需要一些规划和努力才能使其发挥作用，但对于任何处理慢速或拥挤网络的人来说，它可以带来巨大的回报。值得注意的是，与之前几年可用的一些解决方案不同，现在可以以更具用户友好性甚至是消费者为基础的解决方案来廉价快速地设置网状网络，从家庭环境一直到大规模企业部署。'
- en: '**Enterprise authentication**: While this solution was mentioned in previous
    chapters on confidentiality and integrity, it actually takes on a different purpose
    here in terms of availability. An enterprise authentication system using its technology,
    such as radius or diameter, can make the authentication aspect of a wireless network
    much harder to knock offline and therefore make it more resilient in the face
    of denial of service-based attacks. Mainly employing this type of system or mechanism
    means that attackers have to put in more effort to bump this network offline via
    the authentication system than they would if they had an access point that did
    all the dedication right there on its own. The downside of the solution is that
    it does take more effort and more know-how to set up and make it work effectively,
    but it is something to consider if you want to give yourself a little extra protection.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**企业认证**：虽然在保密性和完整性的前几章中提到了这个解决方案，但在可用性方面，它实际上有了不同的目的。使用其技术的企业认证系统，比如radius或直径，可以使无线网络的认证方面更难以被挤掉线，因此在面对基于拒绝服务的攻击时更具弹性。主要采用这种系统或机制意味着攻击者必须付出更多的努力才能通过认证系统将这个网络挤掉线，而不是如果他们有一个在自己身上做所有的专用接入点。这种解决方案的缺点是它需要更多的努力和更多的专业知识来设置和使其有效运行，但如果你想给自己一些额外的保护，这是值得考虑的。'
- en: '**Patching and updating**: Well for anybody who has been in IT long enough,
    you probably don''t need me to explain the concept of patching and updating any
    of your firmware software on a regular basis, but it is worth mentioning. The
    reason we are patching and updating the firmware in our clients'' and our access
    points is to ensure that we are taking advantage of the latest features and fixes,
    some of which can enable us to thwart denial of service and other availability
    attacks.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**补丁和更新**：对于任何在IT领域工作了足够长时间的人来说，你可能不需要我来解释定期对固件软件进行补丁和更新的概念，但这是值得一提的。我们对客户和接入点的固件进行补丁和更新的原因是为了确保我们利用最新的功能和修复程序，其中一些可以使我们挫败拒绝服务和其他可用性攻击。'
- en: '**Configuration**: This last one is a big area that covers a lot of ground
    that can help you tremendously in defeating the attack impacting availability.
    When I say it''s a big area, configuration covers everything from placement and
    setup of the access point, types of antennas to be used, parts of the facility
    or campus to be covered, to even little details such as how much ground you need
    to cover in relation to how far your clients are going to move around during their
    workday and require access to a wireless network while they''re doing it.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置**：这是一个涵盖了很多内容的大领域，可以帮助你极大地击败影响可用性的攻击。当我说这是一个大领域时，配置涵盖了从接入点的放置和设置、要使用的天线类型、要覆盖的设施或校园的部分，甚至一些小细节，比如在客户工作期间需要覆盖多少区域，以及他们在移动时需要访问无线网络的距离。'
- en: Once again, this is a short list and is just meant to open your eyes to some
    of the things that can be used to thwart availability. You should always keep
    up-to-date on availability issues and wireless networks because it tends to be
    one of the areas that has the greatest impact in influencing how well a wireless
    network is going to be perceived and accepted by your client base. While confidentiality
    and integrity are important, clients are much more likely to notice issues related
    to availability than the other two. Slow networks and unavailable networks are
    much more obvious and therefore are something that should not only be addressed
    from a user happiness standpoint, but should also be addressed from a security
    standpoint.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，这只是一个简短的清单，只是为了让你意识到一些可以用来阻碍可用性的事情。你应该始终保持对可用性问题和无线网络的最新了解，因为这往往是影响无线网络被客户群体认知和接受程度最大的领域之一。虽然保密性和完整性很重要，但客户更有可能注意到与可用性相关的问题，而不是其他两个方面。慢速网络和不可用的网络更加明显，因此不仅应该从用户满意度的角度来解决，还应该从安全的角度来解决。
- en: Types of attack
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 攻击类型
- en: As was said, there are plenty of ways to impact the availability of a wireless
    network. They all have the same basic goal, which is to prevent the wireless network
    from being attached to and used effectively, or at all.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如所说，有很多方法可以影响无线网络的可用性。它们都有相同的基本目标，即防止无线网络被有效地连接和使用，或者根本无法连接。
- en: 'Before we start discussing each of the attacks in depth, we should first define
    which attacks we are going to be covering in this chapter:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始深入讨论每种攻击之前，我们应该首先定义本章将涵盖的攻击类型：
- en: Executing a disassociation flood
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行去关联洪水
- en: Detecting beacon frames
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测信标帧
- en: Spoofing beacon frames
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欺骗信标帧
- en: Executing a beacon flood
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行信标洪水
- en: Executing a deauthentication flood
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行去认证洪水
- en: ARP cache poisoning
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ARP缓存中毒
- en: Performing a denial of service
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行拒绝服务
- en: Hiding a wireless network
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐藏无线网络
- en: These attacks represent some of the more popular ways of impacting the availability
    of a wireless network, and as such we are presenting them here. As always, there
    are other availability attacks both deliberate and accidental that can plague
    your wireless environment that you'll need to research more on your own.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这些攻击代表了一些影响无线网络可用性的更受欢迎的方式，因此我们在这里介绍它们。总之，还有其他故意和意外的可用性攻击可能困扰你的无线环境，你需要自行进行更多的研究。
- en: Executing a deauthentication flood
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行去认证洪水
- en: This first availability attack is an interesting one, and an effective one at
    that. This attack is known as a disassociation flood. In this type of attack,
    the malicious parties are trying to break the association that a client has with
    an access point. When this type of attack is carried out, clients will experience
    a situation where they are bumped off the wireless access point and will find
    themselves trying to reconnect to the access point. The key word here is if they
    can attach to the wireless access point. If this flood is carried out in a high
    enough volume, and maintained at that level, it can mean that no clients will
    be able to attach to the wireless network for very long, or at all, depending
    on how the conditions pan out.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这种首次可用性攻击是一个有趣的攻击，而且非常有效。这种攻击被称为去关联洪水。在这种类型的攻击中，恶意方试图打破客户端与接入点的关联。当进行这种类型的攻击时，客户端将经历这样一种情况，他们被从无线接入点中踢出，并发现自己试图重新连接到接入点。关键词在于，他们是否能够连接到无线接入点。如果这种洪水以足够高的音量进行，并保持在那个水平，这意味着没有客户端能够长时间或根本无法连接到无线网络，这取决于条件如何发展。
- en: Just to be clear, the type of attack we are discussing in this recipe is not
    a jamming-based attack. What we mean by jamming is that there is no radio signal
    or any interference being sent out that is used to block or discourage the use
    of the frequency that is being utilized by the wireless network. When performing
    a jamming-based attack, typically you would use something, such as a specific
    rebuilt device, designed to bombard the airwaves with radio traffic, in this case.
    While this attack will work because jamming disrupts the wireless frequencies,
    it is also indiscriminate in how it works. Basically, you can't pick and choose
    which clients will maintain a connection and which ones won't, nor can you choose
    the wireless network you want to block. Anything within range that operates on
    those frequencies will be blocked. This type of attack also has the very real
    issue of being illegal and subject to steep fines and even jail time if it is
    used. We will not be using jamming anywhere in this book.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 只是为了明确，我们在这个章节讨论的攻击类型不是基于干扰的攻击。我们所说的干扰是指没有无线电信号或任何干扰被发送出去，用来阻止或阻碍无线网络所使用的频率。在执行基于干扰的攻击时，通常会使用一些东西，比如一个特定的重建设备，设计用来用无线电流量轰炸空气波，在这种情况下。虽然这种攻击会起作用，因为干扰会扰乱无线频率，但它的工作方式也是不加区别的。基本上，你不能选择哪些客户端会保持连接，哪些不会，也不能选择你想要阻塞的无线网络。在这些频率范围内的任何东西都将被阻塞。这种类型的攻击也存在非常真实的问题，即非法行为，并可能面临严厉的罚款甚至监禁。我们在本书中不会使用干扰。
- en: The only reason why this point is brought up is that sometimes a deuthentication
    flood is erroneously referred to as a jamming attack. The type of attack we're
    talking about is very selective, meaning it can knock out a wireless network or
    individual clients. It also does not bombard the airwaves with indiscriminate
    radio traffic, rather, it uses specially-crafted frames to target its victim or
    victims.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 提出这一点的唯一原因是，有时候去认证洪水被错误地称为干扰攻击。我们所讨论的攻击类型非常有选择性，意味着它可以使无线网络或个别客户端中断。它也不会用不加区别的无线电流量轰炸空气波，而是使用特制的帧来瞄准它的受害者或受害者。
- en: 'One of the questions that comes up with this type of attack is why does a deauthentication
    frame actually exist in a wireless network in the first place? Well, there''s
    actually a good answer for that, and the most obvious is that it can be used to
    disconnect wireless clients who are misbehaving or need to be disconnected for
    some reason. There are other reasons that this frame type is present as well.
    For example, using a deauthentication frame to kick off a client could be used
    in cases of rogue clients attaching to your wireless network. When they''re discovered,
    they can be selectively targeted and disconnected. Another more malicious use
    of this authentication frame could be not just to cause a denial of service, but
    it can also be to force a client to connect to a rogue access point that we control.
    In this situation, we would set up our own wireless access point in close proximity
    to the legitimate access point. Then we would send out deauthentication frames
    to kick people off the legitimate network and potentially force or entice them
    to attach to the access point that we control. This access point just happens
    to be available and ready and open to work with them. The following diagram shows
    the normal process of authenticating to a wireless network:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这种类型的攻击，一个问题是为什么无线网络中实际上存在去认证帧？嗯，对此实际上有一个很好的答案，最明显的是它可以用来断开行为不端或因某种原因需要断开连接的无线客户端。这种帧类型存在的其他原因也有。例如，使用去认证帧将客户端踢出可能用于发现连接到您的无线网络的恶意客户端的情况。一旦发现它们，可以有选择性地针对性地断开连接。这种认证帧的另一个更恶意的用途不仅可以造成服务拒绝，还可以迫使客户端连接到我们控制的伪装接入点。在这种情况下，我们会在合法接入点的附近设置我们自己的无线接入点。然后，我们会发送去认证帧将人们从合法网络中踢出，并可能迫使或诱使他们连接到我们控制的接入点。这个接入点恰好是可用的，准备好并开放与他们一起工作。以下图表显示了连接到无线网络的正常认证过程：
- en: '![](img/41591879-7582-4f74-a622-ea94998fa2a2.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/41591879-7582-4f74-a622-ea94998fa2a2.png)'
- en: The normal authentication process and deauthentication for wireless
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 无线网络的正常认证过程和去认证
- en: It would really be remiss of me if I didn't mention another semi-legitimate
    (and I use that term lightly) use of a deauthentication frame that is that employed
    by some businesses. One example of this semi-legitimate use of a deauthentication
    frame happened in the United States where a hotel chain was found to be forcing
    people to use the hotel's Wi-Fi instead of Wi-Fi from another provider. In this
    situation, the hotel was using devices that transmitted deauthentication frames
    preventing hotel guests from using outside Wi-Fi and instead paying for the hotel's
    own Wi-Fi service. Once it was discovered that the hotel was using this type of
    device, it was quickly met with legal challenges by guests and clients. In the
    end, it was found that any and all hotels in the United States using this technique
    to force the usage of their service was illegal and any business employing this
    technique has been heavily fined and subject to legal action by the Federal Communications
    Commission.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我不提及另一种半合法（我轻描淡写地使用这个词）使用去认证帧的情况，那就真的是我的疏忽了。一个半合法使用去认证帧的例子发生在美国，一家酒店连锁被发现强迫人们使用酒店的Wi-Fi而不是其他提供商的Wi-Fi。在这种情况下，酒店使用设备发送去认证帧，阻止酒店客人使用外部Wi-Fi，而是支付酒店自己的Wi-Fi服务。一旦发现酒店使用这种类型的设备，很快就会遭到客人和客户的法律挑战。最终发现，在美国任何一家使用这种技术强制使用他们服务的酒店都是非法的，任何使用这种技术的企业都将受到联邦通信委员会的重罚和法律诉讼。
- en: It is worth mentioning that there is an ongoing debate as to whether or not
    the use of deauthentication floods can be employed in areas where the security
    of the facility and data transmission is desired. At this point, the answer seems
    to be that there really is no straightforward answer as deauthentication floods
    have been used to create safe spaces where only authorized networks are available
    to people in a certain business area.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，关于在需要保障设施和数据传输安全的地方是否可以使用去认证洪水的讨论仍在进行中。目前，答案似乎是没有直接的答案，因为去认证洪水已被用于创建只有授权网络对某一商业区域的人员可用的安全空间。
- en: 'The following diagram shows the concept of the deauthentication flood:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了去认证洪水的概念：
- en: '![](img/8953570e-9467-48c1-8dac-f65f3e801d00.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8953570e-9467-48c1-8dac-f65f3e801d00.png)'
- en: A deauthentication flood
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 去认证洪水
- en: There is another use of deauthentication frames that can be very handy for someone
    performing pen testing against a wireless network, or network in general, and
    that is using it to grab passwords or keys for the network. In this situation,
    an attacker will send out an AE deauthentication flood and bump off clients for
    a client from a targeted network. When that client attempts to reconnect, the
    attacker will sniff the traffic that is generated during that connection and try
    to extract the connection information exchange. This type of attack can also be
    used to induce a man-in-the-middle situation where the attacker will deauthenticate
    a victim and then force them to re-authenticate through a rogue access point.
    They'll then direct the traffic on to an internet connection or whatever the actual
    legitimate network is. In essence, what is happening is that we would first issue
    a deauthentication frame or flood, and then we would use the man-in-the-middle
    or rogue access point setup that we explored in a previous chapter, and then we
    would be able to pick up these credentials as a handshake.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 取消认证帧还有另一个用途，对于针对无线网络或网络进行渗透测试的人来说非常方便，那就是用它来获取网络的密码或密钥。在这种情况下，攻击者将发送AE取消认证洪水，并从目标网络中的客户端中踢出一个客户端。当该客户端尝试重新连接时，攻击者将嗅探在该连接期间生成的流量，并尝试提取连接信息交换。这种类型的攻击也可以用于诱导中间人情况，攻击者将取消认证受害者，然后强制他们通过一个恶意接入点重新认证。然后，他们将把流量引导到互联网连接或实际合法网络。实质上，首先我们会发出取消认证帧或洪水，然后我们会使用我们在前一章中探讨过的中间人或恶意接入点设置，然后我们将能够捕获这些凭据作为握手。
- en: Getting ready
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get things started, you will need to have the following items in place:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，您需要准备以下物品：
- en: A wireless card capable of entering monitor mode
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够进入监视模式的无线网卡
- en: Kali Linux
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kali Linux
- en: How to do it...
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: To perform an association flood, we simply need to use a combination of the
    steps that we've seen in earlier chapters, with a little extra added in to tweak
    it for our purposes.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行关联洪水，我们只需要使用我们在早期章节中看到的步骤的组合，并额外添加一些内容以调整它以适应我们的目的。
- en: 'In this scenario, we have a client attached to the wireless access point, or
    wireless router, going about their business. The attacker is going to attempt
    to break their connection to the network:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们有一个客户端连接到无线接入点或无线路由器，正在进行他们的业务。攻击者将尝试中断他们与网络的连接：
- en: 'In order to get started, we need to first put our network card into monitor
    mode. Again, this is no different than what we have done in previous recipes.
    To make things simple, we will assume that our wireless adapter uses the name
    `wlan0`, but double-check to ensure the name is the same on your system:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了开始，我们需要首先将我们的网络卡置于监视模式。再次强调，这与我们在以前的教程中所做的没有什么不同。为了简化事情，我们将假设我们的无线适配器使用名称`wlan0`，但请双重检查以确保在您的系统上名称相同：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Much like before, the `airmon-ng` utility has switched our wireless card into
    monitor mode and should have renamed it to something along the lines of `mon0`.
    Once this is done, we will be capable of viewing all the traffic we need. The
    following screenshot shows the result of the `airmon-ng` command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前一样，`airmon-ng`实用程序已将我们的无线卡切换到监视模式，并应该将其重命名为类似`mon0`的名称。完成后，我们将能够查看我们需要的所有流量。以下屏幕截图显示了`airmon-ng`命令的结果：
- en: '![](img/a7187794-7544-4ddd-b956-778c3d4545e0.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a7187794-7544-4ddd-b956-778c3d4545e0.png)'
- en: airmon-ng switching wlan0 into monitor mode.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: airmon-ng将wlan0切换到监视模式。
- en: 'Next, we need to make use of the `airodump-ng` tool to capture information
    from the monitor interface, like so:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要使用`airodump-ng`工具从监视接口中捕获信息，如下所示：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'At this point, the attacker will have access to information regarding wireless
    access points in the range of the targeting system (ESSID, Channel, BSSID, and
    so on):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，攻击者将可以访问有关目标系统范围内无线接入点的信息（ESSID、信道、BSSID等）：
- en: 'With a list of networks in hand, we can now select one and put the hexadecimal
    value for that network into the `airodump-ng` command to focus on the specific
    network. The result of this command is that we will be able to retrieve a list
    of clients that are currently actively connected to the access point. To find
    this information, we will use the following command:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有了手头的网络列表，我们现在可以选择一个，并将该网络的十六进制值放入`airodump-ng`命令中，以便专注于特定网络。这个命令的结果是，我们将能够检索到当前活跃连接到接入点的客户端列表。要找到这些信息，我们将使用以下命令：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Where `airodump-ng` is the tool, `mon0` the interface, `-c` the channel, and
    `-bssid` the MAC address of the access point:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`airodump-ng`是工具，`mon0`是接口，`-c`是信道，`-bssid`是接入点的MAC地址：
- en: '![](img/63539b1d-eb2e-4fef-9cdd-3c6dc598363a.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/63539b1d-eb2e-4fef-9cdd-3c6dc598363a.png)'
- en: Upon closer examination, the results will show the clients currently attached
    to the access point. To make this easy, you simply browse the list of clients,
    choose the one you want to knock off, and note its MAC address, such as `00:13:CE:AC:70:BE`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细检查后，结果将显示当前连接到接入点的客户端。为了简化操作，您只需浏览客户端列表，选择要踢掉的客户端，并注意其MAC地址，例如`00:13:CE:AC:70:BE`。
- en: 'The last step is to actually deauthenticate or disassociate the client from
    the access point. We do this like so:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是实际上取消认证或与接入点断开客户端的关联。我们这样做：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Where `aireplay-ng` is the tool, `-0` the parameter for the deauthentication
    attack, `1000` is the number of deauths to be transmitted, `-a` the MAC address
    of the wireless router, `-c` the MAC address of the client, and `mon0` the interface:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`aireplay-ng`是工具，`-0`是取消认证攻击的参数，`1000`是要传输的取消认证的数量，`-a`是无线路由器的MAC地址，`-c`是客户端的MAC地址，`mon0`是接口：
- en: '![](img/21b3769e-8f34-4da3-bb17-d6fd75755311.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/21b3769e-8f34-4da3-bb17-d6fd75755311.png)'
- en: The preceding screenshot shows that the attack is performed successfully. The
    client is disconnected from the network and cannot establish a connection until
    the attacker stops sending deauthentication messages.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了攻击成功执行。客户端从网络中断开，并且在攻击者停止发送去认证消息之前无法建立连接。
- en: Detecting beacon frames
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测信标帧
- en: Previously, we discussed beacon frames and their importance to wireless networks,
    as well as how they can be used in a wireless network. Now, let's take a closer
    look at them and see what is in a beacon frame and how to analyze it so we can
    use that information for later attacks in this chapter.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 先前，我们讨论了信标帧及其对无线网络的重要性，以及它们在无线网络中的使用方式。现在，让我们更仔细地研究一下它们，看看信标帧中包含了什么，以及如何分析它，以便在本章节后续的攻击中使用这些信息。
- en: So, what is a beacon frame? A beacon frame is something that is sent out by
    a wireless access point that identifies the name of the wireless network, some
    parameters regarding that wireless network, as well as some other information
    tucked in there for housekeeping and other tasks. A beacon frame is sent out by
    every wireless network at regular intervals and is used to announce the presence
    of that network to wireless clients and devices that are in range of that access
    point.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，什么是信标帧？信标帧是由无线接入点发送的，用于识别无线网络的名称，关于该无线网络的一些参数，以及一些其他用于维护和其他任务的信息。每个无线网络都会定期发送信标帧，用于向处于该接入点范围内的无线客户端和设备宣布该网络的存在。
- en: 'Let''s break down some of the pieces or components in a beacon frame sent out
    by a wireless LAN:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下由无线局域网发送的信标帧中的一些部分或组件：
- en: '**Timestamp**: The timestamp is included as part of a beacon frame for this
    very specific purpose: the timestamp is used as a means to inform all the wireless
    clients and devices on that network to synchronize or set their clocks to that
    time. This allows the network to operate more efficiently and effectively than
    it would if the clocks run different intervals and don''t synchronizing with one
    another. This timestamp is sent out with the beacon and the clients won''t turn
    look at the timestamp and set their clocks to this time so everyone participating
    on the wireless LAN is in step with one another.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间戳**：时间戳作为信标帧的一部分包含在其中，目的是为了通知该网络上的所有无线客户端和设备同步或将其时钟设置为该时间。这允许网络比如果时钟运行在不同的间隔并且不相互同步时更有效地运行。这个时间戳随着信标一起发送，客户端会查看时间戳并将其时钟设置为这个时间，以便参与无线局域网的每个人都能同步。'
- en: '**Beacon interval**: As you can imagine, with a name like beacon interval,
    this must tell us how often a beacon frame is sent out. This value will tell nodes
    on the wireless LAN how often a beacon frame must be sent out. On some wireless
    networks this is a user, or system administrator, configurable setting. However,
    on most consumer-grade access points and devices, this is not accessible and is
    defined by the manufacturer at the time of manufacture of the access point.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信标间隔**：可以想象，像信标间隔这样的名称，这一定会告诉我们信标帧发送的频率。这个数值将告诉无线局域网上的节点信标帧必须发送的频率。在一些无线网络中，这是用户或系统管理员可配置的设置。然而，在大多数消费者级别的接入点和设备上，这是不可访问的，并且在制造接入点时由制造商定义。'
- en: '**Capability information**: This is actually an important component of a beacon
    frame because it describes the format of the network, whether it is running infrastructure
    or ad hoc mode, whether it is using certain security features, and even what type
    of encryption it supports, if any. As you can imagine, getting this information
    and being able to dissect it can tell you quite a bit about how the network is
    operating and what you need to know to defeat it.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**能力信息**：这实际上是信标帧的一个重要组成部分，因为它描述了网络的格式，无论是运行基础设施还是自组网模式，无论是使用某些安全功能，甚至是支持的加密类型。可以想象，获取这些信息并能够解析它可以告诉你关于网络运行方式以及你需要了解的内容。'
- en: Something to keep in mind regarding intervals of beacon frames is that while
    they can be adjusted on wireless networks, it may not be ideal to change intervals
    under every condition. While there are benefits, there can also be some downsides
    that you need to be cautious of. For example, speeding up the transmission of
    beacon frames has the benefit of sending these beacon frames more frequently,
    but will also result in additional traffic on the network, which means that taking
    bandwidth, or throughput more specifically, away from users on the network, which
    means you effectively made the network slower.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的一点是，虽然可以在无线网络上调整信标帧的间隔，但在每种情况下都改变间隔可能并不理想。虽然有好处，但也可能存在一些需要谨慎的缺点。例如，加快信标帧的传输可以更频繁地发送这些信标帧，但也会导致网络上的额外流量，这意味着从网络用户那里取走带宽，或者更具体地说，降低了网络的吞吐量，这意味着你实际上使网络变慢了。
- en: The benefit of speeding the beacon frame up is that clients can associate with
    the network much faster, and if they roam around, they will be able to keep track
    of network and service changes much more rapidly. On the other hand, stretching
    out the time between beacon frames will reduce the overhead on the network. The
    immediate impact of this is that associations are slower and clients that tend
    to roam have a much slower process of association and will not get information
    about network changes in data throughput as quickly. If you are a wireless network
    engineer, it is usually best to leave the beacon interval alone because it can
    have a negative impact as much as it can have a positive impact.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 加快信标帧的好处是客户端可以更快地关联到网络，如果它们漫游，它们将能够更快地跟踪网络和服务的变化。另一方面，拉长信标帧之间的时间将减少网络的开销。这样做的直接影响是关联速度变慢，漫游的客户端关联过程更慢，并且无法快速获取关于网络变化的信息。如果你是无线网络工程师，通常最好不要改变信标间隔，因为它可能会产生负面影响，正如它可能产生积极影响一样。
- en: 'In practice, beacon frames do add a little bit to the traffic generated on
    a wireless network. However it is generally minimal and it is important to have
    this beacon sent out to make the network function. When a wireless client is scanning
    and looking for wireless networks across the channels it supports, it is looking
    for beacon frames that will tell it that there is an access point area and some
    details about that access point. This information also allows a client to determine
    not only the wireless networks in the area and the capabilities, but also allows
    them to prioritize and sort them depending on capabilities and services they are
    offering, and therefore allows the user or the client itself to determine which
    is the optimal network to attach to. The following screenshot shows beacon frames
    captured in Wireshark:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，信标帧确实会增加无线网络上生成的流量。但是通常很少，重要的是要发送这个信标以使网络正常运行。当无线客户端在支持的频道上扫描和寻找无线网络时，它正在寻找信标帧，告诉它有一个接入点区域以及有关该接入点的一些详细信息。这些信息还允许客户端不仅确定区域内的无线网络和功能，还允许它们根据提供的功能和服务对它们进行优先排序，并因此允许用户或客户端本身确定哪个是要连接的最佳网络。以下屏幕截图显示了在Wireshark中捕获的信标帧：
- en: '![](img/aae8405a-6c08-44f6-b69e-809b09de91bb.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aae8405a-6c08-44f6-b69e-809b09de91bb.jpg)'
- en: Beacon frames showing in Wireshark
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在Wireshark中显示信标帧
- en: Keep in mind that even after a client has associated with a wireless network,
    the scanning process still continues and the client is still looking for beacons
    across other channels that identify other wireless networks. The idea behind this
    is by constantly scanning and looking for other wireless networks, it gives the
    user the ability to switch to an alternative network if the current network is
    not sufficient or becomes unavailable. The beacon frames also serve the benefit
    of synchronizing the clocks, this will happen not only once but at regular intervals
    to make sure that the clocks always stay synchronized with a close tolerance,
    and they don't slowly come out of sync with one another so it serves that critical
    purpose. The beacon frame also serves as a handy mechanism to inform clients attached
    to the network that changes in the network, such as speed or channel, are going
    to happen and they need to be prepared for it and anticipate the change.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，即使客户端已经与无线网络关联，扫描过程仍在继续，客户端仍在寻找跨其他频道识别其他无线网络的信标。这样做的想法是通过不断扫描和寻找其他无线网络，使用户能够在当前网络不足或不可用时切换到另一个网络。信标帧还有利于同步时钟，这不仅会发生一次，而且会定期发生，以确保时钟始终保持与彼此接近的同步，并且它们不会慢慢地脱离同步，因此它具有重要作用。信标帧还作为一个方便的机制，通知连接到网络的客户端网络中的变化，例如速度或频道，将会发生，并且他们需要为此做好准备并预期这种变化。
- en: All this being said, let's move on to actually capturing and analyzing beacon
    frames so we connection to see what is contained within them first hand and what
    that means to us. This information is not an attack on its own, but it is something
    that can be used as a precursor to the attacks we are going to see in this chapter;
    as such, we will use this recipe to familiarize you with this.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，让我们继续捕获和分析信标帧，以便我们连接以直接了解其中包含的内容以及对我们的意义。这些信息本身并不是一种攻击，但它可以作为我们将在本章中看到的攻击的前兆，因此，我们将使用这个配方来使您熟悉这一点。
- en: Getting ready
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get things started, you will need to have the following items in place:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，您需要准备以下项目：
- en: A wireless card capable of entering monitor mode
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够进入监视模式的无线网卡
- en: Kali Linux with Wireshark installed
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装了Wireshark的Kali Linux
- en: How to do it...
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Kismet is an effective tool for locating and extracting useful information from
    wireless access points and devices, and in this case, it will be used to detect
    the beacon frames that are transmitted.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Kismet是一个有效的工具，用于定位和提取无线接入点和设备中的有用信息，在这种情况下，它将被用于检测传输的信标帧。
- en: 'In this recipe, we will start Kismet from the Command Prompt. However it can
    also be started from the Wireless Attacks section of the Applications menu. In
    either scenario, starting up Kismet will result in the steps documented here:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将从命令提示符开始Kismet。但是它也可以从应用程序菜单的无线攻击部分启动。在任何一种情况下，启动Kismet都将导致这里记录的步骤：
- en: Open a Terminal window.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端窗口。
- en: At the Command Prompt, enter the `kismet` command.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符下，输入`kismet`命令。
- en: You will now be configuring Kismet from a semi-graphical environment. You will
    be using the *Tab* and *Enter* keys to navigate.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您将从半图形环境中配置Kismet。您将使用*Tab*和*Enter*键进行导航。
- en: Use the *Tab* key to highlight `No` if you cannot see the line of grey letters.
    Otherwise, leave `Yes` highlighted.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果看不到灰色字母行，请使用*Tab*键突出显示`No`。否则，保持`Yes`突出显示。
- en: Press the *Enter* key once.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按一次*Enter*键。
- en: Press the *Enter* key once to acknowledge that Kismet is running as root.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按一次*Enter*键以确认Kismet正在以root身份运行。
- en: Press the *Enter* key once to automatically start the Kismet server.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按一次*Enter*键自动启动Kismet服务器。
- en: Press the *Enter* key once to verify that you want to start the Kismet server.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按一次*Enter*键以确认您要启动Kismet服务器。
- en: Press the *Enter* key to verify that you can to add a capture source.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按一次*Enter*键以验证您可以添加捕获源。
- en: 'Type in the name of your wireless interface using `ifconfig`. If you don''t
    remember it, you can open up another console window and run the `ifconfig` command
    again to determine the correct interface (it will usually be named something starting
    with `wlan`). The following screenshot shows the interface entry screen:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ifconfig`输入您的无线接口的名称。如果您不记得，可以打开另一个控制台窗口，并再次运行`ifconfig`命令以确定正确的接口（通常会以`wlan`开头命名）。以下屏幕截图显示了接口输入屏幕：
- en: '![](img/b008c405-9dc6-4542-98e1-1f2affdfe152.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b008c405-9dc6-4542-98e1-1f2affdfe152.png)'
- en: Kismet interface configuration
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Kismet界面配置
- en: Press the *Tab* key once.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按一次*Tab*键。
- en: Type the name of the wireless interface in the `Name` field.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称”字段中键入无线接口的名称。
- en: Press the *Tab* key once.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次按下*Tab*键。
- en: Press the *Tab* key again.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次按下*Tab*键。
- en: Press the *Enter* key once.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*Enter*键一次。
- en: Kismet should recognize the named wireless interface if you entered the name
    correctly. It will also generate the names of unneeded virtual interfaces such
    as `wlan0mon`, `wlan0monmon`, and `wmaster0`.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您输入了正确的名称，Kismet应该能够识别命名的无线接口。它还会生成不需要的虚拟接口的名称，如“wlan0mon”、“wlan0monmon”和“wmaster0”。
- en: When `Close Console Window` is displayed at the lower right hand corner of the
    shell (Kismet window), press the *Tab* key once to highlight `Close Console Window`.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当在shell（Kismet窗口）的右下角显示“关闭控制台窗口”时，按一次*Tab*键以突出显示“关闭控制台窗口”。
- en: Press the *Enter* key once.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*Enter*键一次。
- en: A list of wireless access points will be displayed in the upper left-hand quadrant
    of the Shell (Kismet window).
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无线接入点列表将显示在Shell（Kismet窗口）的左上象限。
- en: Click View on the pull-down menu.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下拉菜单上的“查看”。
- en: Click Monitor for Activity.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“监视活动”。
- en: Once you have gotten to this point, you will see that access point names (as
    well as clients) will start to rapidly populate the interface. As we saw before
    with this tool, there are associated details and information with each network
    name or SSID that appears on your list. Each of these entries is populated from
    information extracted from beacon frames that will start to populate the window.
    You will see the names, channel, wireless standard, and other information associated
    with each device. If you wait long enough, you will notice that additional devices
    will appear and other items listed may have more information populated that may
    not have been present before.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦到达这一点，您将看到接入点名称（以及客户端）开始快速填充界面。与此工具之前看到的一样，与列表上出现的每个网络名称或SSID相关的详细信息和信息。这些条目是从开始填充窗口的信标帧中提取的信息填充的。您将看到每个设备的名称、信道、无线标准和其他相关信息。如果等待足够长的时间，您会注意到其他设备会出现，列表中的其他项目可能会有更多的信息填充，这些信息以前可能不存在。
- en: 'While viewing the list of networks showing up in the Kismet window, it is possible
    that you might see some entries that look a little different. For example, take
    a look at the following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看Kismet窗口中显示的网络列表时，可能会看到一些看起来有些不同的条目。例如，看一下以下的屏幕截图：
- en: '![](img/43946ede-ad9a-418e-a2d2-48f4f297d7e3.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/43946ede-ad9a-418e-a2d2-48f4f297d7e3.png)'
- en: Showing main Kismet window displaying detected wireless clients.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 显示主Kismet窗口显示检测到的无线客户端。
- en: If you look at the items in the windows, you will notice that there is an entry
    for `Probe Networks` if you move over this item in the list and use the *+* or
    *-* keys to open or close the selection. When you expand the item, there will
    be a list of items displayed. This list documents probe requests that are coming
    from nearby systems. These problems are sent by a wireless-enabled system that
    is attempting to attach to a network that it had attached to in the past. A careful
    analysis of the network names that show up under probe requests can reveal the
    names of different access points the system attached to and give you an idea of
    how or where the system may have been used. Keep in mind that many operating systems
    send these probes out as long as the device is unassociated with a wireless network.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看窗口中的项目，您会注意到列表中有一个“探测网络”的条目，如果您移动到列表中的这个项目并使用*+*或*- *键来打开或关闭选择。展开项目后，将显示一个项目列表。这个列表记录了来自附近系统的探测请求。这些问题是由一个无线启用的系统发送的，它试图连接到它过去连接过的网络。仔细分析出现在探测请求下的网络名称可以揭示系统连接到不同接入点的名称，并让您了解系统可能是如何或在哪里使用的。请记住，只要设备未与无线网络关联，许多操作系统就会发送这些探测请求。
- en: There are other software packages that can be used to do the same thing that
    Kismet is doing, however Kismet has the advantage of being highly customizable
    and passive. Passive means that the software does not transmit anything out to
    elicit a response from wireless access points in the area. Instead the software
    listens for connections and traffic associated with an access point to reveal
    its presence and determine its name. Additionally, the software package has the
    ability to detect access points that are hidden where other similar packages may
    not be able to do the same.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他软件包可以用来做Kismet正在做的同样的事情，但是Kismet具有高度可定制和被动的优势。被动意味着软件不会发送任何东西来引发附近无线接入点的响应。相反，软件监听与接入点相关的连接和流量，以揭示其存在并确定其名称。此外，该软件包还具有检测隐藏接入点的能力，而其他类似的软件包可能无法做到这一点。
- en: Spoofing beacon frames
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 伪造信标帧
- en: In this recipe we are going to take a look at spoofing beacon frames. Now that
    we have seen what a beacon frame actually looks like, and some of the properties
    of a beacon frame, we can kind of understand the value of forging a beacon frame
    and how that might be employed to affect the availability of a wireless network
    or access point specifically.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将看一下伪造信标帧。现在我们已经看到了信标帧的实际样子，以及一些信标帧的属性，我们可以理解伪造信标帧的价值以及如何利用它来影响无线网络或特定接入点的可用性。
- en: After examining the contents of the beacon frame, we could see that important
    information such as the sinking of time, the identification of a network, as well
    as other properties are contained within this vital frame. If an attacker wants
    to disrupt the operation of a wireless network, such as slowing the network down
    or making the network unavailable, a beacon frame is an ideal place to undertake
    this action.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查信标帧的内容之后，我们可以看到重要的信息，如时间的下沉、网络的识别以及其他属性都包含在这个重要的帧中。如果攻击者想要干扰无线网络的运行，比如减慢网络速度或使网络不可用，信标帧是一个理想的地方来采取这个行动。
- en: It is important to know upfront what makes the spoofing of a beacon frame possible.
    An acceptable form of disrupting a wireless network is a lack of verification
    or validation of forged frames. While products and technologies have appeared
    on the market over the last several years designed to aid the detection of frames
    that are forged to a wireless network, this is far from being a common occurrence
    that can be used to secure a wireless network. For the wireless networks that
    do employ some sort of detection for forged frames, there lies another problem,
    due to the unstable nature of wireless networks and the diverse forms of communication
    available across different vendors, it becomes even trickier to detect a forged
    frame. Again, system and network administrators have techniques that can be combined
    to cover the whole spectrum and allow forged frames to be detected and therefore
    prevent these types of attack.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要事先知道欺骗信标帧攻击的可能性。破坏无线网络的一种可接受形式是缺乏对伪造帧的验证或验证。虽然在过去几年中市场上出现了旨在帮助检测伪造到无线网络的帧的产品和技术，但这远非是一种可以用来保护无线网络的常见情况。对于那些确实对伪造帧进行了某种检测的无线网络，存在另一个问题，由于无线网络的不稳定性和不同供应商提供的多种通信形式，要检测伪造帧变得更加棘手。此外，系统和网络管理员有一些技术可以结合使用，以覆盖整个频谱，并允许检测伪造帧，从而防止这类攻击。
- en: One very important thing to consider when reviewing a beacon frame that can
    be used against a target network, is that it's not an easy attack to perform.
    While we make it sound easy, in practice it is going take some patience and effort
    to make it work correctly. While a malicious party could look online for the specifics
    on how to carry out this attack or even read the steps here,  it still can take
    a little bit of trial, error, and patience.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查可以用于针对目标网络的信标帧时，有一件非常重要的事情需要考虑，那就是这不是一种容易执行的攻击。虽然我们让它听起来很容易，但在实践中，需要一些耐心和努力才能使其正确运行。虽然恶意方可能会在网上寻找有关如何执行这种攻击的具体信息，甚至阅读这里的步骤，但这仍然需要一些试验、错误和耐心。
- en: The other thing to keep in mind with this type of attack is that it definitely
    can be detected as technologies and techniques have advanced far enough that they
    offer an effective way of detecting a spoof beacon frame. The challenge for the
    network owner is to understand that this is a potential attack. They need to understand
    that this is something that they should deploy, or employ protection for, to lower
    the risk of this type of attack occurring.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的另一件事是，这种类型的攻击肯定可以被检测到，因为技术和技巧已经发展到足够先进的程度，可以有效地检测伪造的信标帧。网络所有者面临的挑战是要理解这是一种潜在的攻击。他们需要明白这是他们应该部署或采用保护措施，以降低这种类型攻击发生的风险。
- en: Let's briefly take a look at the process of spoofing a beacon frame before we
    go through the individual steps of making this attack happen successfully. What
    I'm going to do is describe the individual components and give an idea of the
    anatomy of this type of attack and then we're going to move on and go into implementing
    the attack in a real-world environment.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们逐步介绍如何成功执行这种攻击之前，让我们简要地看一下欺骗信标帧的过程。我将描述各个组成部分，并给出这种类型攻击的解剖，然后我们将继续并在真实环境中实施这种攻击。
- en: At its most basic level, there are actually two phases to carrying out a spoofed
    beacon frame attack, and one of the phases relies on a tool we already know, which
    is `airmon-ng`. This tool is used to put our wireless adapter into monitor mode
    so it is able to observe traffic from all wireless networks in the area even if
    it is not associated with any of them. Spoofing beacon frames using this utility
    will not be any different than any of the other times you used it. We will just
    tell the utility to go into monitor mode on a specific interface and then that
    phase is done.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在最基本的层面上，实际上执行欺骗信标帧攻击有两个阶段，其中一个阶段依赖于我们已经知道的工具，即`airmon-ng`。这个工具用于将无线适配器置于监视模式，以便能够观察区域内所有无线网络的流量，即使它没有与任何网络关联。使用这个工具来欺骗信标帧与以往使用它的方式并无不同。我们只需告诉工具在特定接口上进入监视模式，然后这个阶段就完成了。
- en: The second phase of spoofing, or forging, a beacon frame is the one where the
    magic happens and makes the process what it is. To carry out the second phase,
    we will be using a tool known as `mdk3`, which is another command-line utility
    included in the arsenal of this clinic's distribution. This utility will allow
    us to generate beacon frames with any name and properties that we choose to transmit
    in the open. The end result is that this utility can send out a mass of beacon
    frames, that can be read out of a text file that you can pre-populate with your
    own names. This will generate what amounts to a sea of fake access points in the
    area that will slow down and confuse clients, and in some cases, even break their
    association with their current network if the name happens to be the same. What
    we are doing here is creating a denial of service through the use of this single
    utility.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 欺骗信标帧的第二阶段是魔术发生的地方，使整个过程成为现实。为了执行第二阶段，我们将使用一个名为`mdk3`的工具，这是本诊所发行版中包含的另一个命令行实用程序。这个工具将允许我们生成具有我们选择的任何名称和属性的信标帧，并在开放环境中进行传输。最终结果是，这个工具可以发送大量的信标帧，可以从文本文件中读取，您可以预先填充自己的名称。这将在区域内生成大量虚假接入点，会使客户端变慢和困惑，并且在某些情况下，甚至会中断它们与当前网络的关联，如果名称恰好相同的话。我们在这里所做的是通过使用这个单一工具创建一种拒绝服务。
- en: Getting ready
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get things started, you will need to have the following items in place:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始进行操作，您需要准备以下物品：
- en: A wireless card capable of entering monitor mode
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够进入监视模式的无线网卡
- en: Kali Linux
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kali Linux
- en: The items listed here are basic requirements and you could easily use more (or
    different) components if you desired. If you want an enhanced range, for example,
    you could use a USB-based wireless card that has connections for an external antenna
    that could get better reception.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出的项目是基本要求，如果你愿意，你可以轻松地使用更多（或不同的）组件。例如，如果你想要增强范围，你可以使用一个带有外部天线连接的基于USB的无线网卡，这样可以获得更好的接收效果。
- en: Something important to remember in this exercise is that we will be using a
    series of tools that all come from one suite designed to crack and analyze the
    traffic from wireless networks. While there are probably a dozen tools included
    in the suite, we only make use of about three or four in this chapter. However,
    we will revisit different tools from the suite in subsequent chapters and use
    them along the way. This will serve as your first exploration of some of the members
    of the air crack suite.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，需要记住的一点是，我们将使用一系列工具，这些工具都来自一个套件，旨在破解和分析无线网络的流量。虽然套件中可能包含了大约十几个工具，但在本章中我们只使用了三到四个。然而，在后续章节中，我们将重新访问套件中的不同工具，并在途中使用它们。这将是你对air
    crack套件中一些成员的首次探索。
- en: How to do it...
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The first step is to put the wireless adapter into monitor mode. In this case,
    we will assume that our wireless adapter uses the name `wlan0` (much like before),
    but double-check to ensure the name is the same on your system:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是将无线适配器置于监视模式。在这种情况下，我们假设我们的无线适配器使用名称`wlan0`（就像以前一样），但请仔细检查确保在您的系统上名称相同：
- en: '[PRE4]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Much like before, the `airmon-ng` utility has switched our wireless card into
    monitor mode and should have renamed it to something along the lines of `mon0`.
    Once this is done, we will be capable of viewing all the traffic we need:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 就像以前一样，`airmon-ng`实用程序已经将我们的无线网卡切换到监视模式，并应该将其重命名为类似`mon0`的名称。一旦完成这一步，我们就能够查看所有我们需要的流量：
- en: '![](img/19864580-bf33-43bf-aadb-bd794f716afa.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/19864580-bf33-43bf-aadb-bd794f716afa.png)'
- en: airmon-ng switching wlan0 into monitor mode.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: airmon-ng将wlan0切换到监视模式。
- en: 'Next, we need to make use of the `airodump-ng` tool to capture information
    from the monitor interface, like so:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要使用`airodump-ng`工具来从监视接口捕获信息，就像这样：
- en: '[PRE5]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: At this point, the attacker will have access to information regarding wireless
    access points in the range of the targeting system (ESSID, Channel, BSSID, and
    so on).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，攻击者将可以访问有关目标系统范围内的无线接入点的信息（ESSID、信道、BSSID等）。
- en: Once we have selected a network from the list that we want to spoof, we can
    move on to the next step, which is to use a tool known as `mdk3`. The `mdk3` is
    a utility that is used to exploit vulnerabilities and other issues present in
    the 802.11 standard, one of them being the ability to forge beacon frames.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们从列表中选择了一个要欺骗的网络，我们可以继续下一步，即使用一个名为`mdk3`的工具。`mdk3`是一个实用程序，用于利用802.11标准中存在的漏洞和其他问题，其中之一是伪造信标帧的能力。
- en: 'To use the `mdk3` tool, we can pick an access point off the list or use a name
    of our making. Once we have a name in mind, we run the `mdk3` command using the
    following syntax (we will fake a network called `impa`):'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`mdk3`工具，我们可以从列表中选择一个接入点，或者使用我们自己制作的名称。一旦我们有一个想法，我们就可以使用以下语法运行`mdk3`命令（我们将伪造一个名为`impa`的网络）：
- en: '[PRE6]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `b` activates the beacon flood mode, `-n` sets the name, `-b 54` makes it
    `54` MB, `-w a` enables WPA2/AES only, `-m` makes `mdk3` only use valid addresses
    so the attacker will have a hard time filtering, and `-c` sets the correct channel.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`b`激活信标洪水模式，`-n`设置名称，`-b 54`使其为`54` MB，`-w a`仅启用WPA2/AES，`-m`使`mdk3`仅使用有效地址，因此攻击者将很难进行过滤，`-c`设置正确的信道。'
- en: At this point, if you use another wireless device to check for wireless networks
    in the area, you will see a new network being broadcast, in this case named IMPA.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，如果你使用另一个无线设备来检查该区域的无线网络，你会看到一个新的网络正在广播，这种情况下被命名为IMPA。
- en: Creating a beacon flood
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建信标洪水
- en: 'In this recipe, we will continue our line of thinking and exploration from
    the previous recipe where we spoofed a beacon frame, but we are going to raise
    the bar in intensity by trying to attempt a flood of beacon frames. In the previous
    recipe, we mainly focused on how to create a spoofed beacon frame. Here, what
    we want to do is send out wave after wave of fake access points with the intention
    that we can confuse clients in the area and cause them to have performance issues.
    In fact, the fascinating thing about performing a beacon flood is that under certain
    conditions it can cause scanners, software, and even drivers to not just under-perform
    but actually crash or even lock up the system they''re present on. You can imagine
    this is a denial of service and would be very frustrating for the owner of those
    software devices or whatever node is having the problem. The following diagram
    shows the concept of a beacon flood:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将继续从上一个配方中的思路和探索开始，那里我们伪造了一个信标帧，但我们将通过尝试洪水式地发送信标帧来提高强度。在上一个配方中，我们主要关注如何创建伪造的信标帧。在这里，我们想要做的是连续发送假的接入点，以混淆该区域的客户端，并导致它们出现性能问题。事实上，进行信标洪水的迷人之处在于，在某些条件下，它可以导致扫描仪、软件甚至驱动程序不仅表现不佳，甚至会崩溃或甚至锁定它们所在的系统。你可以想象这是一种拒绝服务，对于那些软件设备的所有者或者出现问题的节点来说，这将是非常令人沮丧的。以下图表显示了信标洪水的概念：
- en: '![](img/f33b5e59-46be-412d-8215-d399323b77cd.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f33b5e59-46be-412d-8215-d399323b77cd.png)'
- en: Concept of a beacon flood
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 信标洪水的概念
- en: With a beacon flood, we can generate massive amounts of fake access points as
    well as vary the parameters and channels of these fake access points, further
    refining and empowering the attack to do even more damage. You will find that
    the initial steps of this attack are exactly the same as they were in the previous
    recipe. Where the variation happens is when we start using the `mdk` utility to
    start varying those parameters with the intent of causing an impact.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 通过信标洪水，我们可以生成大量的虚假接入点，以及改变这些虚假接入点的参数和信道，进一步完善和增强攻击，造成更大的破坏。你会发现这次攻击的初始步骤与上一个攻击的步骤完全相同。变化发生的地方是当我们开始使用`mdk`实用程序来开始改变那些参数，以达到造成影响的目的。
- en: Getting ready
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做好准备
- en: 'To get things started, you will need to have the following items in place:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始，你需要准备以下物品：
- en: A wireless card capable of entering monitor mode
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够进入监视模式的无线网卡
- en: Kali Linux
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kali Linux
- en: The items listed here are basic requirements and you could easily use more (or
    different) components if you desired. If you want an enhanced range, for example,
    you could use a USB-based wireless card that has connections for an external antenna
    that could get better reception.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出的项目是基本要求，如果你愿意，你可以轻松地使用更多（或不同）的组件。例如，如果你想要增强范围，你可以使用一个基于USB的无线网卡，它具有外部天线的连接，可以获得更好的接收。
- en: Something important to remember in this exercise is that we will be using a
    series of tools that all come from one suite of tools designed to crack and analyze
    the traffic from wireless networks, and why there are probably a dozen tools included
    in the suite while we only make use of about three to four of them in this particular
    chapter. However, we will actually revisit different tools from the suite in subsequent
    chapters and use them for different purposes along the way. So this will serve
    as your first exploration of some of the members of the air crack suite.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中需要记住的一件重要的事情是，我们将使用一系列工具，这些工具都来自一个套件，旨在破解和分析无线网络的流量，可能有大约十几个工具包含在套件中，而我们在这一特定章节中只使用了三到四个。然而，在随后的章节中，我们将实际上重新访问套件中的不同工具，并在途中为不同的目的使用它们。因此，这将是你对air
    crack套件中一些成员的首次探索。
- en: 'The first step is to put the wireless adapter into promiscuous mode or monitor
    mode. This is no different than we did in [Chapter 4](f9b496b9-0e8e-4fe2-bd99-8147e5b08816.xhtml),
     *Attacking Confidentiality*. In this case, we will assume that our wireless adapter
    uses the name `wlan0`, but double-check to ensure the name is the same on your
    system:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是将无线适配器置于混杂模式或监视模式。这与我们在[第4章](f9b496b9-0e8e-4fe2-bd99-8147e5b08816.xhtml)中所做的没有什么不同，*攻击机密*。在这种情况下，我们将假设我们的无线适配器使用名称`wlan0`，但请仔细检查以确保在您的系统上名称相同：
- en: '[PRE7]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Much like before, the `airmon-ng` utility has switched our wireless card into
    monitor mode and should have renamed it to something along the lines of `mon0`.
    Once this is done, we will be capable of viewing all the traffic we need. The
    following screenshot shows the result of the `airmon-ng` command:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 就像以前一样，`airmon-ng`实用程序已经将我们的无线网卡切换到监视模式，并且应该已经将其重命名为类似`mon0`的东西。一旦这样做了，我们就能够查看所有我们需要的流量。以下屏幕截图显示了`airmon-ng`命令的结果：
- en: '![](img/e7bb32ee-beaf-4d28-a57a-92a72272083b.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e7bb32ee-beaf-4d28-a57a-92a72272083b.png)'
- en: airmon-ng switching wlan0 into monitor mode.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: airmon-ng将wlan0切换到监视模式。
- en: 'The next step is to activate the `airodump-ng` utility once again to see a
    list of wireless networks or access points in the area. Remember, we need to have
    a target network in mind to attack or this will not have the desired effect. The
    beacons we will be creating will be generated using the SSID of a given network
    that we will provide:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是再次激活`airodump-ng`实用程序，以查看附近的无线网络或接入点列表。记住，我们需要有一个目标网络来攻击，否则这将不会产生预期的效果。我们将创建的信标将使用我们提供的给定网络的SSID来生成：
- en: '[PRE8]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If the command executes correctly, we should see a list of wireless networks
    in the area. At this point, you will choose the one you want to target. You specifically
    want the information labeled ESSID for the station you wish to target; anything
    else (such as the BSSID) will require modification of the command.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果命令执行正确，我们应该看到附近的无线网络列表。在这一点上，你会选择你想要攻击的那个。你特别想要的是你想要攻击的站点的ESSID标签的信息；其他任何东西（比如BSSID）都需要修改命令。
- en: 'Once you have selected your target, you need to use the following command:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你选择了目标，你需要使用以下命令：
- en: '[PRE9]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you want to change the timing of the flood, you can add the `-s` command
    line, so:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想改变洪水的时间，你可以添加`-s`命令行，所以：
- en: '[PRE10]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this case, `360` is the number of packets that will be transmitted each second.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`360`是每秒将被传输的数据包数量。
- en: If you want to view the flow of beacons, you could run Kismet on another Kali
    workstation and you would see a flood of beacons being received by the station
    representing the efforts of our original attacking system.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查看信标的流动，你可以在另一台Kali工作站上运行Kismet，你会看到一大堆信标被接收，代表我们原始攻击系统的努力。
- en: ARP cache poisoning
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ARP缓存投毒
- en: In this recipe, we are not going to be directly assaulting the wireless network,
    but manipulating something that is present in the networks to carry out actions,
    such as sniffing or man-in-the-middle attacks. The technique we're exploring here
    is something known as ARP cache poisoning, and is something that can be used on
    any network that is using the TCP/IP protocol.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们不会直接攻击无线网络，而是操纵网络中存在的东西来执行操作，比如嗅探或中间人攻击。我们在这里探讨的技术被称为ARP缓存投毒，可以用于使用TCP/IP协议的任何网络。
- en: So what is ARP? Well ARP, or address resolution protocol, is a component of
    the TCP/IP protocol that is used to link a logical addresses or IP addresses to
    a physical address or MAC address. In practice, the following is what happens
    with ARP.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 那么ARP是什么？嗯ARP，或地址解析协议，是TCP/IP协议的一个组成部分，用于将逻辑地址或IP地址链接到物理地址或MAC地址。在实践中，以下是ARP的工作原理。
- en: 'Let''s imagine a situation where you have two clients that are on the same
    subnet who wish to initiate communication with one another. In this situation,
    an IP address is not needed in the normal sense because there are no routing requirements
    present. In this situation, if a client wishes to send traffic to the other client,
    it will first check its ARP cache to see whether it had previously communicated
    with the intended target. If an IP to MAC address mapping exists in the ARP cache
    or table, then the sending station will just use that information to send the
    data that it desires to send to that recipient. However, if the information that
    is required to transmit the information isn''t present in the ARP cache, then
    it will send out an ARP broadcast on that subnet. When this broadcast is received
    by the client that the sender is looking for, the recipient will send back its
    IP address and MAC address combination to the sender. At that point, the sender
    will use this information to properly address and transmit the data thereby ensuring
    it gets to its intended destination, the IP and MAC address combination will also
    be retained in the local ARP cache so future transmissions can happen quicker.
    The following screenshot shows the contents of the ARP cache:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们想象一种情况，你有两个位于同一子网上的客户端，它们希望彼此发起通信。在这种情况下，IP地址在正常意义上并不需要，因为没有路由要求。在这种情况下，如果一个客户端希望向另一个客户端发送流量，它将首先检查其ARP缓存，看看它是否先前与预期目标进行过通信。如果ARP缓存或表中存在IP到MAC地址映射，则发送站将直接使用该信息将数据发送到接收方。然而，如果ARP缓存中没有传输所需的信息，它将在该子网上发送ARP广播。当发送方正在寻找的客户端接收到这个广播时，接收方将向发送方发送其IP地址和MAC地址的组合。在那时，发送方将使用这些信息来正确地寻址和传输数据，从而确保它到达预期的目的地，IP和MAC地址的组合也将保留在本地ARP缓存中，以便未来的传输可以更快地进行。以下屏幕截图显示了ARP缓存的内容：
- en: '![](img/b20bf51a-2829-4de5-aa2f-750bbe5da2bb.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b20bf51a-2829-4de5-aa2f-750bbe5da2bb.jpg)'
- en: The ARP cache in Linux
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中的ARP缓存
- en: One thing to keep in mind when carrying out ARP cache poisoning is that you
    can poison them proactively and place information in their cache of a target using
    the techniques we're discussing. However, if the user or victim that is being
    targeted reboots that system, then the information you have placed in their cache
    will be wiped and you would have to re-initiate the poison.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行ARP缓存欺骗时要记住的一件事是，你可以主动地对其进行欺骗，并使用我们正在讨论的技术将信息放入目标的缓存中。然而，如果被定位的用户或受害者重新启动系统，那么您放入其缓存中的信息将被清除，您将不得不重新发起欺骗。
- en: Let's dissect an ARP poisoning attack so we can understand what it is we're
    attempting to do to cause mischief. As we discovered, ARP has a very specific
    way of working to allow the ascending party to locate the IP address and MAC address
    combination of its intended recipient and that process is fairly simple in design.
    When forming a cache poisoning attack, we want to send forged or spoofed ARP replies
    to a victim with the intent that they will cache our reply and then use it when
    they're trying to send information later on during their operation. Now, take
    a close look at what I just said we're attempting to do. I said we're trying to
    send out in ARP reply, but I never said anything about going out to elicit that
    reply. In other words, this would be similar to my walking up to you and saying
    goodbye and then walking away. If I did that in real life, you would think I was
    a little crazy because there is nothing for me to say goodbye to. However, because
    of the way ARP works, this situation would actually work in the digital world.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们剖析一次ARP欺骗攻击，以便我们了解我们试图做的是什么，以引起混乱。正如我们发现的那样，ARP有一种非常特定的工作方式，允许上升方找到其预期接收方的IP地址和MAC地址组合，该过程在设计上相当简单。在进行缓存欺骗攻击时，我们希望向受害者发送伪造或欺骗的ARP回复，目的是让他们缓存我们的回复，然后在以后的操作中使用它们来发送信息。现在，仔细看看我刚才说的我们试图做的事情。我说我们试图发送ARP回复，但我从来没有说过要出去引诱那个回复。换句话说，这就好像我走到你面前说再见，然后走开。如果我在现实生活中这样做，你会认为我有点疯狂，因为没有什么可以和我说再见。然而，由于ARP的工作方式，这种情况实际上在数字世界中是有效的。
- en: 'So the question here is what is in the reply that I send out in an attempt
    to poison your cache with? Well the answer is quite simple: what''s in there?
    An ARP broadcast is sent out because a system has an IP address of a client on
    the local subnet. Since it has no use for the IP address and local subnet, it
    wants to use the MAC address instead. So, by sending out this request to say,
    "I have this IP address, who owns this IP address right now" in which a MAC address
    is on your network card, I''m returned a combination of IP and MAC. What an attacker
    will do is modify this reply to say anytime you''re looking for a certain IP address,
    go to this other MAC address instead, which just happens to be the MAC address
    of a network card on the system that the malicious party is controlling. By sending
    this combination proactively to a victim, the ARP process is upended, as the transmitting
    system will look to see whether it has information about the station it is trying
    to transmit the data to, since this information will be proactively cached and
    no broadcast would have been made to find the real owner with the legitimate IP
    address to MAC address combination. The result is traffic will be directed to
    a client different from what the recipient believes to be correct.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这里的问题是，我在尝试用什么回复来毒害你的缓存？嗯，答案很简单：里面有什么？发送ARP广播是因为系统在本地子网上有一个客户端的IP地址。由于它不需要IP地址和本地子网，它想要使用MAC地址。因此，通过发送这个请求来说，“我有这个IP地址，现在谁拥有这个IP地址”，在你的网络卡上有一个MAC地址，我会得到一个IP和MAC的组合。攻击者会修改这个回复，以便在你寻找特定IP地址时，转而去寻找另一个MAC地址，这恰好是恶意方控制的系统上的网络卡的MAC地址。通过主动向受害者发送这个组合，ARP过程被颠覆，因为传输系统将寻找是否有关于它正在尝试传输数据的站点的信息，因为这些信息将被主动缓存，不会进行广播以找到具有合法IP地址和MAC地址组合的真正所有者。结果是流量将被定向到与接收者认为正确的客户端不同的地方。
- en: 'The following image shows an ARP attack in action:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片显示了ARP攻击的过程：
- en: '![](img/cfbc3a94-7da1-4536-a3f5-e3c21ce2aa85.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cfbc3a94-7da1-4536-a3f5-e3c21ce2aa85.png)'
- en: An ARP cache poisoning attack
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: ARP缓存中毒攻击
- en: There are two sides to the coin as far as IP to MAC address resolution and combinations
    are concerned. ARP is used to resolve IP addresses to MAC addresses. However,
    there is a companion protocol known as RARP (reverse address resolution protocol)
    and this is used to resolve a MAC address to an IP address. While both of these
    protocols exist in their companions to one another, we really only have the need
    for ARP, and not reverse ARP. However, it is important to know that there is a
    companion protocol that exists.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 就IP到MAC地址解析和组合而言，有两面。ARP用于将IP地址解析为MAC地址。然而，还有一个伴随协议称为RARP（反向地址解析协议），它用于将MAC地址解析为IP地址。虽然这两个协议存在于彼此的伴侣中，但我们实际上只需要ARP，而不是反向ARP。然而，重要的是要知道存在一个伴随协议。
- en: Getting ready
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get things started, you will need to have the following items in place:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始操作，您需要准备好以下项目：
- en: A wireless card capable of entering monitor mode
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够进入监视器模式的无线网卡
- en: Kali Linux
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kali Linux
- en: The items listed here are basic requirements and you could easily use more (or
    different) components if you desired. If you want an enhanced range, for example,
    you could use a USB-based wireless card that has connections for an external antenna
    that could get better reception.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出的项目是基本要求，如果需要，您可以轻松地使用更多（或不同）组件。例如，如果您想要增强范围，可以使用一个带有外部天线连接的基于USB的无线网卡，以获得更好的接收效果。
- en: 'The first step is to enable IP forwarding; this enables traffic forwarding
    so traffic is redirected through the attacker''s system. To carry out this attack,
    we carry out the following command:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是启用IP转发；这样可以使流量通过攻击者的系统进行重定向。要执行此攻击，我们执行以下命令：
- en: '[PRE11]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'View the value set for IP forwarding; this will return a value `1`. If it does
    not, repeat the preceding step:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 查看IP转发的设置值；这将返回一个值`1`。如果没有，重复前面的步骤：
- en: '[PRE12]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output will be : `1`'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将是：“1”
- en: '[PRE13]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note that the value of `1` here means that we are enabling IP forwarding. If
    we want to turn off this feature, we can run the same command with a `0` instead.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里的“1”表示我们正在启用IP转发。如果我们想要关闭此功能，可以使用“0”来运行相同的命令。
- en: The next step is to redirect traffic as it moves through our system, this is
    easy to do through the use of the `iptables` command.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在流经我们系统时重定向流量，这很容易通过使用`iptables`命令来实现。
- en: In this setup, traffic received on port `80` will be redirected to a different
    port number. In this case, port `80` is redirected to port `8080`, and port `443`
    is redirected to port `8883.` With this set of simple rules in place, the traffic
    will be redirected accordingly.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个设置中，接收到端口`80`的流量将被重定向到不同的端口号。在这种情况下，端口`80`被重定向到端口`8080`，端口`443`被重定向到端口`8883`。有了这组简单的规则，流量将被相应地重定向。
- en: 'To implement our setup, we simply enter the following at the command line:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 要实施我们的设置，我们只需在命令行中输入以下内容：
- en: '[PRE14]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: iptables is a command-line utility that has been in Linux for a long time and
    is used to configure firewall settings within the Linux kernel. The utility is
    far more complex than is being covered here, but we only need to use the basics
    for our setup.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: iptables是一个命令行实用程序，它在Linux中已经存在很长时间，用于配置Linux内核中的防火墙设置。该实用程序比这里介绍的要复杂得多，但我们只需要使用基础知识来进行设置。
- en: 'Now comes the important part, which is to perform the actual ARP spoofing.
    To do this, we will make use of the `arpspoof` command to change the victim system''s
    cache to have different values. In this case, we will be changing the default
    gateway to something different. We can do that by using the following command:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来到重要的部分，即执行实际的ARP欺骗。为此，我们将使用`arpspoof`命令来更改受害系统的缓存以包含不同的值。在这种情况下，我们将把默认网关更改为其他内容。我们可以使用以下命令来实现：
- en: '[PRE15]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'More specifically, we will change the victim machine to include a different
    address for the gateway:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地说，我们将更改受害机器以包含网关的不同地址：
- en: '[PRE16]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We can also perform the same against the gateway, like so:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以对网关执行相同的操作，就像这样：
- en: '[PRE17]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Once these steps are complete, we will move into a phase where we can intercept
    requests as they move across the network. We have some choices in Kali for information
    gathering in this situation in the form of `sslstrip`/`drifnet`. Let's take a
    brief look at setting up each.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，我们将进入一个阶段，在这个阶段我们可以拦截网络中传输的请求。在Kali中，我们在这种情况下有一些信息收集的选择，比如`sslstrip`/`drifnet`。让我们简要地看一下如何设置每个选项。
- en: The `sslstrip` is a sniffing and man-in-the-middle utility designed to capture
    information moving across the SSL protocol. Information such as username, password,
    email account, and database user details could all be potentially intercepted
    using this command.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`sslstrip`是一个嗅探和中间人工具，旨在捕获通过SSL协议传输的信息。使用这个命令，诸如用户名、密码、电子邮件账户和数据库用户详细信息等信息都有可能被拦截。'
- en: 'The following command will allow the attacker to sniff the traffic of target
    PC `192.168.1.23`  and specify the port defined in the `iptable nat` rule:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将允许攻击者嗅探目标PC `192.168.1.23` 的流量，并指定`iptable nat`规则中定义的端口：
- en: '[PRE18]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Wait a while to record sniffing data in `/usr/share/sslstrip/sslstrip.log`,
    or you can use a user-defined file to dump captured data.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 等一会儿，记录在`/usr/share/sslstrip/sslstrip.log`中的嗅探数据，或者您可以使用用户定义的文件来转储捕获的数据。
- en: 'Another interesting utility is known as `driftnet`. Driftnetis a GUI-based
    tool that is designed to capture anything accessed from the browser. This utility
    is very simple to use and can be activated simply by using the `driftnet` command
    at the command line and the results will start to appear as traffic flows. The
    following is an example of output obtained using the utility:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的工具被称为`driftnet`。Driftnet是一个基于GUI的工具，旨在捕获从浏览器访问的任何内容。这个工具非常简单易用，只需在命令行中使用`driftnet`命令，结果将随着流量的流动而开始出现。以下是使用该工具获得的输出示例：
- en: '![](img/f333b299-fb67-490f-baf5-f019b45eb538.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f333b299-fb67-490f-baf5-f019b45eb538.jpg)'
- en: Output of the driftnet command
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: driftnet命令的输出
