- en: Putting it All Together - Real - World AWS Pentesting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将所有内容整合在一起-真实世界的AWS渗透测试
- en: In this chapter, we will be looking at a real-world AWS pentest from start to
    finish. This should help tie together many of the chapters in this book and demonstrate
    the flow of penetration testing an AWS environment. We will skip over many of
    the technical details of how certain attacks work, because they have already been
    outlined in their respective chapter in this book.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将从头到尾看一个真实的AWS渗透测试。这应该有助于将本书中许多章节联系在一起，并演示渗透测试AWS环境的流程。我们将跳过许多技术细节，因为它们已经在本书的各自章节中进行了概述。
- en: When pentesting an AWS environment, it is important to be thorough and to investigate
    every attack possible with the access that you are granted. This ensures that
    the results you provide the client at the end of the engagement are thorough,
    complete, and useful, and assure them that they can feel confident that their
    infrastructure was investigated on a wide scale.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在对AWS环境进行渗透测试时，重要的是要彻底调查每种可能的攻击，并利用你所获得的访问权限。这确保了在参与结束时向客户提供的结果是全面的、完整的和有用的，并且让他们确信他们可以放心地知道他们的基础设施得到了广泛的调查。
- en: Throughout this chapter, we will be referencing two IAM users at different points.
    One IAM user will be referred to as `PersonalUser`. `PersonalUser` is an IAM user
    that we have created in our own attacker-controlled AWS account to use for such
    activities as cross-account enumeration. This user is required to have the `iam:UpdateAssumeRolePolicy`
    and `s3:ListBucket` permissions for the cross-account recon to work correctly.
    The other IAM user will be referred to as `CompromisedUser`, and that user is
    who we compromised in this attack scenario and who we will use throughout the
    normal process. Our scenario will mock a scenario where a company, `Acme Co.`,
    that uses AWS, comes to our pentesting company, looking for an AWS pentest.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将在不同的地方引用两个IAM用户。一个IAM用户将被称为“PersonalUser”。“PersonalUser”是我们在自己的攻击者控制的AWS账户中创建的IAM用户，用于跨账户枚举等活动。此用户需要具有`iam:UpdateAssumeRolePolicy`和`s3:ListBucket`权限，以使跨账户侦察正常工作。另一个IAM用户将被称为“CompromisedUser”，这个用户是我们在这次攻击场景中被攻陷的用户，并且我们将在整个正常过程中使用。我们的情景将模拟一个使用AWS的公司“Acme
    Co.”，来到我们的渗透测试公司，寻求AWS渗透测试。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Pentest kickoff
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渗透测试启动
- en: Unauthenticated reconnaissance
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未经身份验证的侦察
- en: Authenticated reconnaissance plus permissions enumeration
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经过身份验证的侦察加上权限枚举
- en: Privilege escalation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 权限提升
- en: Persistence
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持久性
- en: Post-exploitation
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后期利用
- en: Auditing for compliance and best practices
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合规性和最佳实践审计
- en: Pentest kickoff
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渗透测试启动
- en: Before jumping into a pentest and hacking away, it is important to go through
    the kickoff process with your client to ensure everyone has an understanding of
    the scope of the pentest, the type of access to be granted to the environment,
    the goal of the pentest, and more. This process is necessary because no one likes
    surprises in the pentesting business, and communication makes everyone happy.
    In this section, we will be covering some of the important aspects of what needs
    to be done prior to when the pentest begins.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行渗透测试和黑客攻击之前，与客户一起进行启动过程非常重要，以确保每个人都了解渗透测试的范围、对环境的访问权限类型、渗透测试的目标等。这个过程是必要的，因为在渗透测试业务中没有人喜欢意外，沟通可以让每个人都满意。在本节中，我们将涵盖在渗透测试开始之前需要做的一些重要方面。
- en: Scoping
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 范围确定
- en: One of the most important aspects of an AWS pentest (or any type of pentest,
    really) is determining the scope of the engagement. AWS engagements are difficult
    to scope in the sense of traditional scoping methods, such as the number of IP
    addresses, number of users, size of the web application, and so on. It requires
    a little bit of a more personal touch, because, sure, almost regardless of the
    size, we could just run some scanners and call it a day, but that's not what pentesting
    is all about and it will reflect poorly on your own company if this is how you
    take care of things. Lots of manual effort needs to go into an AWS pentest to
    really dig deep and find the vulnerabilities that are there, so it is important
    to scope appropriately so that you have enough time to perform an in-depth assessment,
    but not too much time where you are wasting your own time and your client's money.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: AWS渗透测试（或任何类型的渗透测试）最重要的一个方面是确定参与范围。在传统的范围确定方法方面，如IP地址数量、用户数量、Web应用程序大小等，AWS参与范围很难确定。这需要一些更个人化的方法，因为无论规模大小，我们都可以运行一些扫描程序并结束一天，但这并不是渗透测试的全部内容，如果这是你处理事情的方式，将会给你的公司带来负面影响。需要大量手动工作来进行AWS渗透测试，以深入挖掘并发现潜在的漏洞，因此很重要适当确定范围，以便有足够的时间进行深入评估，但不要浪费自己和客户的时间和金钱。
- en: 'It is difficult to provide an exact methodology behind scoping an AWS engagement,
    but the following list of questions can help provide context around the client''s
    environment to help determine the size of it:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 很难提供一个确切的方法来确定AWS参与范围，但以下问题清单可以帮助提供客户环境的背景信息，以帮助确定其规模。
- en: Are you using multiple AWS accounts for this environment?
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您是否为此环境使用了多个AWS账户？
- en: How many?
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有多少个？
- en: Are you interested in having them all tested, or just a portion?
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您是否有兴趣让它们全部进行测试，还是只是部分？
- en: What kind of access will be provided to the environment?
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境将提供什么样的访问权限？
- en: What/how many AWS services are you using?
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您使用了哪些AWS服务？有多少个？
- en: How many regions do your resources span across?
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的资源跨越了多少个地区？
- en: How many EC2 instances/Lambda functions are in use?
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您使用了多少个EC2实例/ Lambda函数？
- en: How many IAM users, roles, and groups do you have?
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您有多少个IAM用户、角色和组？
- en: How do your users access your environment? (regular IAM users, SSO | AssumeRole,
    and so on)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的用户如何访问您的环境？（常规IAM用户、SSO | AssumeRole等）
- en: Beyond those questions, more specific questions can be asked about the other
    AWS services they are using. How many RDS databases do you have? It is not a useful
    question if they don't even use the RDS service, but something like—how many Lightsail
    instances do you have? might be. This might not normally come up, unless the client
    tells you that they use Lightsail.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些问题，还可以询问关于他们正在使用的其他AWS服务的更具体的问题。您有多少RDS数据库？如果他们甚至没有使用RDS服务，这个问题就没有意义，但类似于您有多少Lightsail实例？可能会有意义。除非客户告诉您他们使用Lightsail，否则这种情况通常不会出现。
- en: These questions are meant to provide you with a basic idea of how large the
    AWS environment you are planning to attack is. This can then help you determine
    an estimated timeline that it would take to fully test.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题旨在让您对您计划攻击的AWS环境有一个基本的了解。然后，这可以帮助您确定完全测试需要多长时间。
- en: These questions are very contextual, though, and they will likely vary on a
    per-client basis. This is because, for example, you might be testing an environment
    with 5,000 EC2 instances, 300 Lambda functions, and 100 RDS databases, but the
    client only wants to provide you access to a single user who has IAM permissions
    and some Lightsail permissions. The numbers behind EC2, Lambda, and RDS are nearly
    irrelevant at this point, because unless you can escalate your privileges in the
    environment, you won't be touching those services, based on the client's expectations.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题非常具体，它们可能会因客户而异。这是因为，例如，您可能正在测试一个拥有5000个EC2实例、300个Lambda函数和100个RDS数据库的环境，但客户只想为一个具有IAM权限和一些Lightsail权限的单个用户提供访问权限。在这一点上，EC2、Lambda和RDS背后的数字几乎是无关紧要的，因为除非您能在环境中提升权限，否则根据客户的期望，您将不会触及这些服务。
- en: AWS pentesting rules and guidelines
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS渗透测试规则和指南
- en: 'Before beginning an AWS pentest, it is important to confirm that you won''t
    be breaking any rules that AWS has put forth regarding pentesting. As of March,
    2019, AWS no longer requires approval for pentests on multiple different services,
    but there is still a list of prohibited activity outlined on their pentesting
    page. Useful information on pentesting an AWS infrastructure, such as the restrictions
    you must follow, can be found here: [https://aws.amazon.com/security/penetration-testing/](https://aws.amazon.com/security/penetration-testing/).
    We don''t want to start pentesting without an understanding of the rules, because
    then we risk breaking the Acceptable Use Policy ([https://aws.amazon.com/aup/](https://aws.amazon.com/aup/))
    of AWS, which could potentially end up with the target account being suspended
    or terminated completely. This information must be conveyed to our client prior
    to the engagement, or we risk a delay of when we can start.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始进行AWS渗透测试之前，确认您不会违反AWS关于渗透测试的规定非常重要。截至2019年3月，AWS不再要求对多个不同服务进行渗透测试的批准，但仍然有一份在其渗透测试页面上列出的禁止活动清单。有关渗透测试AWS基础架构的有用信息，例如您必须遵循的限制，可以在这里找到：[https://aws.amazon.com/security/penetration-testing/](https://aws.amazon.com/security/penetration-testing/)。我们不希望在不了解规则的情况下开始渗透测试，因为那样我们就有可能违反AWS的可接受使用政策([https://aws.amazon.com/aup/](https://aws.amazon.com/aup/))，这可能会导致目标账户被暂停或完全终止。这些信息必须在我们与客户合作之前传达给我们的客户，否则我们可能会延迟开始。
- en: 'Something important to note is that AWS states that our policy only permits
    testing of the following resources on their penetration testing page: EC2, RDS,
    Aurora, CloudFront, API Gateway, Lambda, Lightsail, and Elastic Beanstalk. This
    section makes it sound like we can''t pentest a full AWS environment, but is in
    reference to traditional penetration techniques, such as port scanning, CVEs/exploits,
    bruteforcing, and so on. It is not referring to everything that we are referring
    to as pentesting within this book, because a majority of that is just using the
    AWS APIs to perform specific actions in the account, which is not against the
    AWS Acceptable Use Policy. For example, we can try to exploit misconfigurations
    in AWS systems manager to try and gain remote access to EC2 instances by using
    the AWS APIs, but we cannot port scan and try to abuse a buffer overflow in an
    AWS ElastiCache instance due to these rules.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，AWS规定我们的政策只允许在他们的渗透测试页面上测试以下资源：EC2、RDS、Aurora、CloudFront、API Gateway、Lambda、Lightsail和Elastic
    Beanstalk。这一部分听起来好像我们不能对整个AWS环境进行渗透测试，但是指的是传统的渗透技术，比如端口扫描、CVEs/漏洞利用、暴力破解等。它并不是指我们在本书中所指的渗透测试的一切，因为其中大部分只是使用AWS
    API在账户中执行特定操作，这并不违反AWS的可接受使用政策。例如，我们可以尝试利用AWS系统管理器中的配置错误，通过使用AWS API来尝试远程访问EC2实例，但我们不能对AWS
    ElastiCache实例进行端口扫描并尝试利用缓冲区溢出，因为这些规则。
- en: Credentials and client expectations
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 凭据和客户期望
- en: After the AWS pentesting authorization form has been taken care of (or during
    the process), the next step would be to determine what exactly the client is expecting
    from the AWS pentest. Is this a red team style engagement where our activity will
    be actively monitored and defended against by a blue team? Is this just an audit
    of configuration? Is this a go as far as possible type of engagement without an
    activate defense against us?
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理AWS渗透测试授权表格之后（或在过程中），下一步将是确定客户对AWS渗透测试期望的具体内容。这是一个红队风格的合作吗，我们的活动将受到蓝队的积极监视和防御？这只是对配置的审计吗？这是一种尽可能深入的合作，没有对我们进行积极的防御？
- en: Beyond that, is the client supplying us credentials? If so, credentials for
    how many users and what information do we get about them? If not, should we be
    social engineering to gain access?
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，客户是否提供给我们凭据？如果是，有多少用户的凭据以及我们得到了关于他们的什么信息？如果没有，我们是否应该进行社会工程来获取访问权限？
- en: 'Other important questions may include the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 其他重要的问题可能包括以下内容：
- en: Is this a test/development/production environment?
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一个测试/开发/生产环境吗？
- en: Is there anything we should not touch in the environment?
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在环境中有什么是我们不应该触碰的？
- en: Are there other users who are actively using this environment?
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否有其他用户正在积极使用这个环境？
- en: There are many other questions to ask around scoping, and that is ultimately
    determined by what you do as a pentesting company and what your client wants as
    your customer. Throughout this chapter, we will assume a scenario where we are
    provided a set of keys for a single IAM user and nothing else. This means we don't
    know what kind of access to expect or how their infrastructure works from the
    inside. Also, in our scenario, we will be acting as if there is not an active
    blue team that is trying to stop and shut down our access, but we will be monitored
    by existing tooling in the account. For all of those reasons, this means that
    we should view this engagement as if we just compromised access to the keys that
    they provided us and to simulate the attack as if we are a real attacker, even
    though we know the blue team won't stop us.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他关于范围的问题需要问，这最终取决于您作为渗透测试公司的做法以及您的客户作为您的客户的需求。在本章中，我们将假设一个情景，即我们为单个IAM用户提供了一组密钥，没有其他内容。这意味着我们不知道可以期望什么样的访问权限，以及他们的基础架构从内部是如何工作的。此外，在我们的情景中，我们将假设没有一个正在试图阻止和关闭我们访问的活跃的蓝队，但我们将受到账户中现有工具的监视。出于所有这些原因，这意味着我们应该将这次参与视为我们刚刚窃取了他们提供给我们的密钥的访问权限，并且模拟攻击，就好像我们是一个真正的攻击者，尽管我们知道蓝队不会阻止我们。
- en: These types of engagements can be quite useful for clients because it offers
    them a variety of information to work off. It provides us pentesters with the
    full ability to show *what's possible* when their keys are compromised, and it
    provides them with a (Cloud)trail of logs and activity to see what kind of attacks
    they are detecting, what they are missing, and it even allows them to analyse
    this data as if this was an incident-response/forensics type situation. If the
    blue team was actively shutting us down during an engagement, we might not uncover
    all the actual vulnerabilities within the AWS environment, because our access
    was blocked. Without the blue team interfering, we can go as in-depth as possible,
    and it also allows us to perform configuration and best practice audits on services
    and resources in the account. In a real **red-team** type scenario, it would not
    make sense to check for certain configuration issues and best practices, because
    it would not directly benefit our attack and would only create more of a trail
    of our activity.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型的参与对客户来说可能非常有用，因为它为他们提供了各种信息。它为我们渗透测试人员提供了充分的能力来展示*可能发生的情况*，当他们的密钥被泄露时，它为他们提供了（云）日志和活动的记录，以查看他们正在检测到的攻击类型，他们错过了什么，甚至允许他们分析这些数据，就好像这是一种事件响应/取证类型的情况。如果蓝队在参与期间积极地关闭我们，我们可能无法发现AWS环境中的所有实际漏洞，因为我们的访问被阻止了。没有蓝队的干扰，我们可以尽可能深入地进行，它还允许我们对账户中的服务和资源执行配置和最佳实践审核。在真实的**红队**类型的情况下，检查某些配置问题和最佳实践是没有意义的，因为它不会直接有益于我们的攻击，只会在我们的活动中留下更多的记录。
- en: Providing auditing and configuration checks in addition to just an attack narrative
    can be extremely helpful to clients for compliance and security within the account,
    so it is best to be able to provide this information. On the other hand, what
    the client wants is most important, so it is essential to modify this attack narrative
    as they see fit.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 除了攻击叙述之外，提供审计和配置检查对客户来说可能非常有用，以符合账户内的合规性和安全性，因此最好能够提供这些信息。另一方面，客户想要什么是最重要的，因此必须根据他们的要求修改这个攻击叙述。
- en: Once client expectations have been determined, the AWS pentest authorization
    form has been approved, and you have received credentials, you are almost ready
    to start.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦客户端期望已确定，AWS渗透测试授权表已获批准，并且您已收到凭证，您几乎可以开始了。
- en: Setup
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: 'Before beginning any actual work, we need to make sure we are set up correctly.
    This setup might look different, but for this scenario, we need to ensure that
    the AWS CLI and Pacu are both installed on our system. Notes on how to do this
    were reviewed in previous chapters, but as a reminder, you can get Pacu from its
    GitHub page and the AWS CLI through Python `pip`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始任何实际工作之前，我们需要确保我们已正确设置。这种设置可能看起来不同，但对于这种情况，我们需要确保AWS CLI和Pacu都已安装在我们的系统上。如何执行此操作的说明已在前几章中进行了审查，但作为提醒，您可以从其GitHub页面获取Pacu，通过Python
    `pip`获取AWS CLI：
- en: '[https://github.com/RhinoSecurityLabs/pacu](https://github.com/RhinoSecurityLabs/pacu)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/RhinoSecurityLabs/pacu](https://github.com/RhinoSecurityLabs/pacu)'
- en: '[https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html)'
- en: 'Once those tools are installed, we will want to integrate the AWS keys that
    we have available into them. The easiest way to do this would be to use the AWS
    CLI to create a credential profile, and then import that profile into Pacu. For
    both the `PersonalUser` and `CompromisedUser` set of keys that we noted earlier,
    we will run the `aws configure` command with the `--profile` argument, specifying
    each of those names, like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了这些工具之后，我们将希望将我们可用的AWS密钥集成到这些工具中。这样做的最简单方法是使用AWS CLI创建凭据配置文件，然后将该配置文件导入Pacu。对于我们之前提到的`PersonalUser`和`CompromisedUser`一组密钥，我们将使用`aws
    configure`命令，并使用`--profile`参数，指定每个名称，如下所示：
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, we''ll enter our keys. After that, we can start up Pacu by using Python3
    and create a new session. We''ll name the session `Acme` because this engagement
    is for Acme Co. Then ,we can use the Pacu command `import_keys` to import our
    two key pairs from the AWS CLI into Pacu:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将输入我们的密钥。之后，我们可以使用Python3启动Pacu并创建一个新会话。我们将命名会话为`Acme`，因为这次参与是为Acme Co。然后，我们可以使用Pacu命令`import_keys`将我们的两对密钥从AWS
    CLI导入Pacu：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The reason we are adding our own personal user into the AWS CLI and Pacu is
    for when we are performing unauthenticated reconnaissance against our target,
    as those modules tend to require keys outside of the target account.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将我们自己的个人用户添加到AWS CLI和Pacu中是为了当我们对目标执行未经身份验证的侦察时，因为这些模块通常需要目标账户之外的密钥。
- en: If the client told us that they only use a specific set of regions, then we
    could also use the `set_regions` command to set that up in Pacu, but for our scenario,
    we will say that we don't have this information (yet).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果客户告诉我们他们只使用特定的一组区域，那么我们也可以使用`set_regions`命令在Pacu中设置这一点，但对于我们的情况，我们会说我们还没有这个信息（但愿）。
- en: At this point, we are ready to move on to unauthenticated (cross-account) recon.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '在这一点上，我们已经准备好进行未经身份验证的（跨账户）侦察。 '
- en: Unauthenticated reconnaissance
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 未经身份验证的侦察
- en: Most unauthenticated recon within AWS isn't technically unauthenticated, because
    there are credentials that are required. The difference is that for unauthenticated
    recon, we use our own attacker AWS keys, so we are unauthenticated to our target
    environment, and any logs of our enumeration/attempts will show up in our own
    account only. This is almost as unauthenticated as you can get when enumerating
    AWS resources, besides something like open S3 buckets, but even then, some kind
    of credential can help the process due to how permissions are set up in some buckets.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: AWS内的大多数未经身份验证的侦察在技术上并不是未经身份验证的，因为需要凭据。不同之处在于，对于未经身份验证的侦察，我们使用我们自己的攻击者AWS密钥，因此我们对目标环境未经身份验证，我们的枚举/尝试的任何日志都将只出现在我们自己的账户中。这在枚举AWS资源时几乎是未经身份验证的，除了像开放的S3存储桶之类的情况，但即使在这种情况下，某种凭据也可以帮助该过程，因为某些存储桶的权限设置方式。
- en: One integral part to most unauthenticated/cross-account attacks is the knowledge
    of the target AWS account ID. The account ID allows us to associate resources
    with that specific account from our own. This means that our first API call to
    AWS will actually be from the `CompromisedUser` and not our `PersonalUser`. The
    reason for this is because we don't have the account ID yet, and we need it. Luckily,
    there has been research done to gain information about a set of keys without logging
    anything to CloudTrail, like we covered in [Chapter 15](88017977-3b7b-4e4f-b4fe-60fa603200f3.xhtml), *Pentesting
    CloudTrail* .
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数未经身份验证/跨账户攻击来说，了解目标AWS账户ID是至关重要的。账户ID允许我们将资源与我们自己的特定账户关联起来。这意味着我们对AWS的第一个API调用实际上将来自`CompromisedUser`而不是我们的`PersonalUser`。原因是因为我们还没有账户ID，我们需要它。幸运的是，已经进行了研究，以获取有关一组密钥的信息，而不记录任何内容到CloudTrail，就像我们在[第15章](88017977-3b7b-4e4f-b4fe-60fa603200f3.xhtml)中介绍的那样，*Pentesting
    CloudTrail*。
- en: 'We''ll be using the `iam__detect_honeytokens` module to gather the information
    that we require:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`iam__detect_honeytokens`模块来收集我们需要的信息：
- en: 'As the `CompromisedUser,` we will run the Pacu command, `run iam__detect_honeytokens`.
    The reason for this is because the module uses an AWS API call that is not logged
    to CloudTrail to enumerate the current user''s ARN, which contains the account
    ID, we will have gathered the account ID without them being aware. The following
    screenshot shows the output when running that module in our test environment:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为`CompromisedUser`，我们将运行Pacu命令`run iam__detect_honeytokens`。原因是因为该模块使用一个未记录到CloudTrail的AWS
    API调用来枚举当前用户的ARN，其中包含了账户ID，我们将在他们不知情的情况下获取了账户ID。以下屏幕截图显示了在我们的测试环境中运行该模块时的输出：
- en: '![](img/69fc7502-0c1d-42e8-ad94-77a9ad9d1c56.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/69fc7502-0c1d-42e8-ad94-77a9ad9d1c56.png)'
- en: The iam__detect_honeytokens module fetching our ARN without logging to CloudTrail
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: iam__detect_honeytokens模块在不记录到CloudTrail的情况下获取我们的ARN
- en: We can see that our `CompromisedUser` has the username `CompromisedUser` and
    it resides in account ID `216825089941`. We could run the `whoami` command now
    to see that this information was added to the Pacu database if we wanted to do
    so. Now that we have the account ID, we can get started with out unauthenticated
    recon. This unauthenticated portion will involve enumerating IAM users and roles
    in the account and potentially S3 buckets associated with the company or account.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们的`CompromisedUser`的用户名是`CompromisedUser`，它位于账户ID`216825089941`中。如果我们想这样做，我们现在可以运行`whoami`命令来查看这些信息是否已添加到Pacu数据库。现在我们有了账户ID，我们可以开始进行未经身份验证的侦察。这部分未经身份验证的侦察将涉及在账户中枚举IAM用户和角色，以及可能与公司或账户关联的S3存储桶。
- en: We'll kick that off by first noting the account ID we just enumerated, then
    swapping keys to the `PersonalUser` in Pacu by running the `swap_keys` command.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先注意到我们刚刚枚举的账户ID，然后通过运行`swap_keys`命令在Pacu中将密钥切换到`PersonalUser`来启动它。
- en: 'As the `PersonalUser,` we will then run the `iam__enum_users` module to try
    and detect any users in the target account. We''ll pass the account ID we just
    got to this module so that it knows where to look for users. We will also pass
    `Test` as the value for the `--role-name` argument, because we have a role in
    our personal account named `Test` and it is required for the `UpdateAssumeRolePolicy`
    API call. The final command will end up being `run iam__enum_users --role-name
    Test --account-id 216825089941`. Many logs will be created in your own account''s
    CloudTrail, but not the target''s account. The following screenshot shows the
    execution of that comment, where we can see that three separate IAM users were
    discovered:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为`PersonalUser`，我们将运行`iam__enum_users`模块，以尝试检测目标账户中的任何用户。我们将向该模块传递我们刚刚获得的账户ID，以便它知道在哪里查找用户。我们还将向`--role-name`参数传递`Test`作为值，因为我们的个人账户中有一个名为`Test`的角色，并且它是`UpdateAssumeRolePolicy`
    API调用所必需的。最终命令将是`run iam__enum_users --role-name Test --account-id 216825089941`。将在您自己账户的CloudTrail中创建许多日志，但不会在目标账户中创建。以下屏幕截图显示了该命令的执行，我们可以看到发现了三个独立的IAM用户：
- en: '![](img/e159c177-da1b-46c5-9261-4f3d2f2051dc.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e159c177-da1b-46c5-9261-4f3d2f2051dc.png)'
- en: Some of the output from the iam__enum_users module, indicating that we discovered
    three users in our target account
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 从`iam__enum_users`模块的一些输出中，表明我们在目标账户中发现了三个用户
- en: 'Next, we are going to want to do the same thing with the `iam__enum_roles`
    module by running the following command: `run iam__enum_roles --role-name Test
    --account-id 216825089941`. The following screenshot shows the execution of that
    module, where we can see that four IAM roles were enumerated:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用`iam__enum_roles`模块运行以下命令来执行相同的操作：`run iam__enum_roles --role-name
    Test --account-id 216825089941`。以下屏幕截图显示了该模块的执行，我们可以看到枚举了四个IAM角色：
- en: '![](img/fc75780e-4314-4fc5-a152-04aa88362a5d.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fc75780e-4314-4fc5-a152-04aa88362a5d.png)'
- en: Part of the output from the `iam__enum_roles` module, indicating four roles
    were found, but none could be assumed for credentials
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`iam__enum_roles`模块的部分输出，表明找到了四个角色，但没有一个可以用于凭据'
- en: 'Now, let''s look at the user and role names that we enumerated. We found three
    users:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看我们枚举的用户和角色名称。我们找到了三个用户：
- en: '`Test`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Test`'
- en: '`ExampleUser`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExampleUser`'
- en: '`LambdaReadOnlyTest`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LambdaReadOnlyTest`'
- en: '`Test` and `ExampleUser` aren''t all that helpful in our recon, but `LambdaReadOnlyTest`
    indicates that our target is probably using the Lambda service in their account.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`Test`和`ExampleUser`在我们的侦察中并不是很有帮助，但`LambdaReadOnlyTest`表明我们的目标可能在其账户中使用Lambda服务。'
- en: 'We also found four roles:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还发现了四个角色：
- en: '`MyOwnRole`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MyOwnRole`'
- en: '`LambdaEC2FullAccess`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LambdaEC2FullAccess`'
- en: '`CloudFormationAdmin`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CloudFormationAdmin`'
- en: '`SSM`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SSM`'
- en: 'These role names are much more helpful that the users we enumerated. `MyOwnRole`
    is kind of useless, but `LambdaEC2FullAccess` indicates that Lambda is in use
    in their environment, just like we deduced from that one user, but this role name
    also indicates two more potential possibilities:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这些角色名称比我们枚举的用户更有帮助。`MyOwnRole`有点无用，但`LambdaEC2FullAccess`表明Lambda在他们的环境中正在使用，就像我们从一个用户推断出的那样，但这个角色名称还表明了另外两个潜在的可能性：
- en: There may be Lambda functions that are launched into VPCs, giving them internal
    access to that network
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能存在被启动到VPC中的Lambda函数，使它们内部访问该网络
- en: There may be Lambdas that directly interact with the EC2 service, meaning that
    our target also probably uses the EC2 service within their environment
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能存在直接与EC2服务交互的Lambda，这意味着我们的目标也可能在其环境中使用EC2服务
- en: The `CloudFormationAdmin` role indicates that CloudFormation is likely utilized
    within the environment, so we will want to keep that in mind as we begin our attack.
    It may be able to help us gather more information about the target environment
    with a small amount of API calls.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`CloudFormationAdmin`角色表明在环境中可能使用了CloudFormation，因此在我们开始攻击时，我们需要牢记这一点。它可能能够帮助我们通过少量的API调用收集有关目标环境的更多信息。'
- en: The `SSM` role indicates that this role was created for the systems manager.
    We can assume that this means they are using the systems manager in their environment
    to remotely control/manage EC2 instances or on-premise servers.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`SSM`角色表明此角色是为系统管理员创建的。我们可以假设这意味着他们在其环境中使用系统管理员远程控制/管理EC2实例或本地服务器。'
- en: Now, without creating any logs in the target account, we have enumerated multiple
    users and roles that exist, as well as gathered a reasonable amount of information
    on how their infrastructure might be set up across different AWS services.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在目标账户中不创建任何日志的情况下，我们已经枚举了多个存在的用户和角色，并收集了关于他们的基础设施可能如何在不同的AWS服务中设置的合理数量的信息。
- en: 'The last part of our unauthenticated reconnaissance will be to look at S3 buckets
    with the Pacu `s3__bucket_finder` module. Hypothetically, we will assume our target
    Acme Co. owns the domain `acme.com`, so we will pass that to this module to look
    for existing buckets. We can do this with the following command:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们未经身份验证的侦察的最后一部分将是使用Pacu的`s3__bucket_finder`模块查看S3存储桶。假设我们的目标Acme Co.拥有域名`acme.com`，因此我们将将其传递给此模块以查找现有的存储桶。我们可以使用以下命令来执行此操作：
- en: '[PRE2]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output should show us if there are any buckets that were discovered and
    then if any of those buckets were listable. Unfortunately, our scan did not provide
    any actionable results, as can be seen in the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该向我们显示是否发现了任何存储桶，然后是否有任何这些存储桶可以列出。不幸的是，我们的扫描没有提供任何可操作的结果，如下面的截图所示：
- en: '![](img/d855b1c0-0243-44db-bc6a-1a461166d5c3.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d855b1c0-0243-44db-bc6a-1a461166d5c3.png)'
- en: The module did not find any buckets for us to look at
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块未找到任何存储桶供我们查看
- en: As you can see from the preceding screenshot, the module has external dependencies.
    Currently, this is the only module that utilizes the `install_dependencies` function
    and it does so to Git clone `Sublist3r` for sub-domain mutations and `Buckets.txt`
    for bucket bruteforcing. Because we only used the `-d` argument, neither of those
    external dependencies were utilized.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，该模块具有外部依赖性。目前，这是唯一一个使用`install_dependencies`函数的模块，它这样做是为了Git克隆`Sublist3r`进行子域变异和`Buckets.txt`进行存储桶暴力破解。因为我们只使用了`-d`参数，所以这两个外部依赖都没有被使用。
- en: Now, we have done what we can from outside of our target account. It is time
    to grab the `CompromisedUser` credentials and start the authenticated phase of
    our two-part reconnaissance.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经尽了我们在目标账户外的所能。是时候获取`CompromisedUser`凭据并开始我们两部分侦察的经过身份验证的阶段了。
- en: Authenticated reconnaissance plus permissions enumeration
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 经过身份验证的侦察加上权限枚举
- en: 'To begin the authenticated recon portion of our assessment, we will need to
    use the `swap_keys` Pacu command to switch from our `PersonalUser` to the `CompromisedUser`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始我们评估的经过身份验证的侦察部分，我们需要使用`swap_keys` Pacu命令从我们的`PersonalUser`切换到`CompromisedUser`：
- en: Run `swap_keys` in Pacu to switch to the `CompromisedUser`.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Pacu中运行`swap_keys`以切换到`CompromisedUser`。
- en: 'The first thing to do for authenticated recon is to find out our own privileges
    so that we know what kind of access we have to the AWS account. This can be done
    by using the `iam__enum_permissions` Pacu module. It doesn''t need any arguments
    for our current purpose, so we can run the following command:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 经过身份验证的侦察的第一件事是找出我们自己的权限，以便我们知道我们对AWS账户有什么样的访问权限。这可以通过使用`iam__enum_permissions`
    Pacu模块来完成。对于我们当前的目的，它不需要任何参数，因此我们可以运行以下命令：
- en: '[PRE3]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we can check out what permissions were enumerated with the `whoami` command:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们可以查看使用`whoami`命令枚举的权限：
- en: '![](img/32d75759-9464-4d53-bf88-90d147311bbc.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/32d75759-9464-4d53-bf88-90d147311bbc.png)'
- en: Running iam__enum_permissions and checking out what data was enumerated with
    the whoami command
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`iam__enum_permissions`并使用`whoami`命令检查枚举的数据
- en: We can see that there are three IAM policies attached to our user, two of which
    are AWS-managed policies (`AmazonEC2FullAccess`, `DatabaseAdministrator`), and
    one of which is an inline policy (`IAM-Read-List-PassRole`). We can determine
    that these are AWS-managed policies because of the included ARN under the `Policies`
    section of the results of the `whoami` command. The `IAM-Read-List-PassRole` policy
    does not have an ARN listed, which means it is an inline policy, rather than a
    managed policy.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们的用户附加了三个IAM策略，其中两个是AWS托管策略（`AmazonEC2FullAccess`，`DatabaseAdministrator`），另一个是内联策略（`IAM-Read-List-PassRole`）。我们可以确定这些是AWS托管策略，因为在`whoami`命令的结果的`Policies`部分中包含了ARN。`IAM-Read-List-PassRole`策略没有列出ARN，这意味着它是一个内联策略，而不是托管策略。
- en: If we were to scroll down, we would see the list of permissions that our user
    is allowed/denied and the resources/conditions those permissions apply to.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们向下滚动，我们将看到我们的用户被允许/拒绝的权限列表，以及这些权限适用的资源/条件。
- en: Now that we have enumerated our own permissions, and saved them to the database,
    we can see that we have full access to AWS EC2, whatever access the `DatabaseAdministrator`
    policy grants us (we can view this policy directly from our own personal account
    if we wished to do so, or we can look at the list of permissions Pacu provides),
    and whatever the `IAM-Read-List-PassRole` policy grants us (we can assume it grants
    us permission to read and list to the IAM service, as well as pass IAM roles to
    other AWS services/resources). All of this can be confirmed by reviewing the list
    of permissions that Pacu provides in the `whoami` command.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经枚举了我们自己的权限，并将其保存到数据库中，我们可以看到我们对AWS EC2拥有完全访问权限，`DatabaseAdministrator`策略授予我们的任何访问权限（如果我们愿意，我们可以直接从我们自己的个人账户查看此策略，或者我们可以查看Pacu提供的权限列表），以及`IAM-Read-List-PassRole`策略授予我们的任何访问权限（我们可以假设它授予我们对IAM服务的读取和列出权限，以及将IAM角色传递给其他AWS服务/资源的权限）。所有这些都可以通过审查Pacu在`whoami`命令中提供的权限列表来确认。
- en: It is very important to enumerate our own user's permissions but be wary that
    enumerating such permissions might trigger a GuardDuty alert based on IAM enumeration
    within the account. We don't only want just our own permissions, though; we also
    would like to look at the permissions for every other user and role in the account
    so that we can provide our client with a full list of possible misconfigurations
    within the environment. We could use the `iam__enum_users_roles_policies_groups`
    module to do this, but that will only enumerate basic information about each of
    those IAM resources. We would rather use the `iam__enum_permissions` module again
    to gather the full set of permissions for each user/role in the environment.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举我们自己用户的权限非常重要，但要注意，枚举这些权限可能会触发基于IAM枚举的GuardDuty警报。然而，我们不仅想要我们自己的权限；我们还想查看账户中每个其他用户和角色的权限，以便为客户提供环境中可能的所有可能的配置错误的完整列表。我们可以使用`iam__enum_users_roles_policies_groups`模块来做到这一点，但这只会枚举每个IAM资源的基本信息。我们宁愿再次使用`iam__enum_permissions`模块来收集环境中每个用户/角色的完整权限集。
- en: 'We can begin enumerating all user and roles permissions by using the `--all-users`
    and `--all-roles` arguments, which can be see in the following command:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过使用`--all-users`和`--all-roles`参数开始枚举所有用户和角色的权限，可以在以下命令中看到：
- en: '[PRE4]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, Pacu will cycle through each user and role in the account and dump their
    permissions to a JSON file in our Pacu folder. This information can then be manually
    reviewed and/or passed to the Pacu privilege escalation module to check for privilege
    escalation vectors across all of them:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Pacu将循环遍历账户中的每个用户和角色，并将它们的权限转储到我们Pacu文件夹中的JSON文件中。然后，可以手动审查这些信息，或者将其传递给Pacu特权升级模块，以检查所有这些用户/角色的特权升级向量：
- en: '![](img/a51c0c9f-6814-4b90-978b-3bc1950a382b.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a51c0c9f-6814-4b90-978b-3bc1950a382b.png)'
- en: The output of the `iam__enum_permissions` module when targeting all users and
    roles
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当针对所有用户和角色时，`iam__enum_permissions`模块的输出
- en: 'As we can see in the preceding screenshot, Pacu hadn''t enumerated users and
    roles in the target account, so it asked us if we wanted to do that before executing.
    Then, we can see that it is saving the permissions of each user and role to `sessions/Acme/downloads/confirmed_permissions/`
    within the Pacu folder. When the module is complete, we can inspect those files
    for the permissions of those users/roles, which will be in a similar format to
    the output of the `whoami` command for our own user:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们可以看到Pacu尚未枚举目标账户中的用户和角色，因此在执行之前询问我们是否要这样做。然后，我们可以看到它正在将每个用户和角色的权限保存到Pacu文件夹中的`sessions/Acme/downloads/confirmed_permissions/`文件夹中。当模块完成时，我们可以检查这些文件，查看这些用户/角色的权限，其格式类似于我们自己用户的`whoami`命令的输出：
- en: '![](img/05c01791-3e2c-4199-99e4-51e20b60544d.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/05c01791-3e2c-4199-99e4-51e20b60544d.png)'
- en: Part of the contents stored within the JSON file that contains the permissions
    of the SSM role
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: JSON文件中包含SSM角色权限的部分内容
- en: The next step(s) of enumeration can theoretically wait until we are ready to
    attack a specific service, but this could also be done all at once, prior to that.
    A good couple of modules to run at this point could be the `aws__enum_account`
    and `aws__enum_spend` modules to provide insights into the organization that the
    user is a part of and the type of money that is being spent on various AWS services.
    This data can provide you with information that allows you to determine what AWS
    services are being used (and to what extent), without querying the specific services
    themselves. For example, if we can see that the total account spend is $1,000.00,
    and that the spend on the EC2 service is $750.00, then we can assume that most
    of their resources reside in EC2\. Your assumptions may not always be 100% accurate,
    but it can often give a high-level overview of what to expect.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举的下一步理论上可以等到我们准备攻击特定服务时再进行，但也可以在那之前一次性完成。在这一点上运行的一对很好的模块可能是`aws__enum_account`和`aws__enum_spend`模块，以提供有关用户所在组织和在各种AWS服务上花费的资金类型的见解。这些数据可以为您提供信息，让您能够确定正在使用哪些AWS服务（以及在多大程度上），而无需查询这些特定的服务本身。例如，如果我们可以看到总账户支出为$1,000.00，EC2服务的支出为$750.00，那么我们可以假设他们的大部分资源驻留在EC2上。您的假设可能并不总是100%准确，但通常可以提供对预期情况的高层次概述。
- en: 'Now, run the `run aws__enum_account` command in Pacu, followed by the `run
    aws__enum_spend` command to receive output similar to what''s shown in the following
    screenshot:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在Pacu中运行`run aws__enum_account`命令，然后运行`run aws__enum_spend`命令，以接收类似于以下截图所示的输出：
- en: '![](img/ee18a396-804d-4f9f-b1aa-9273ac45445a.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee18a396-804d-4f9f-b1aa-9273ac45445a.png)'
- en: The output of the aws__enum_account module and part of the output of the aws__enum_spend
    module
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`aws__enum_account`模块的输出和`aws__enum_spend`模块的部分输出'
- en: 'We can see that the `aws__enum_account` module provided us with the total account
    spend in USD ($), which came out to $0.98, but we were not authorized to gather
    any information on the account''s organization. We can also see the beginning
    of the output of the `aws__enum_spend` module, which is checking the metrics for
    each AWS service to determine the money spent on it. The results are shown in
    the following screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`aws__enum_account`模块为我们提供了美元（$）的总账户支出，为$0.98，但我们未被授权收集有关账户组织的任何信息。我们还可以看到`aws__enum_spend`模块的输出开始部分，该模块正在检查每个AWS服务的指标，以确定在其上花费的资金。结果显示在以下截图中：
- en: '![](img/73df535b-f7a0-4862-821a-c50f43762a4a.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/73df535b-f7a0-4862-821a-c50f43762a4a.png)'
- en: The AWS account spend for our target account
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 目标账户的AWS账户支出
- en: We can see that most of the account spend shows up under the AWS Glue service
    and the Amazon Document DB service, with some in GuardDuty and AWS Amplify. Although
    this information is helpful, it should not be relied on as 100% factual, because
    any spend that qualifies for the AWS free tier will not be logged here; this is
    not an up-to-date by-the-minute list of account spend, and not all AWS resources
    cost money to have. For those reasons, it is still worth checking out the specific
    services directly, but it can be helpful to start off with this list.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到大部分账户支出出现在AWS Glue服务和Amazon Document DB服务中，还有一些在GuardDuty和AWS Amplify中。尽管这些信息很有帮助，但不应该依赖它们作为100%的事实，因为符合AWS免费套餐资格的任何支出都不会在这里记录；这不是账户支出的最新实时清单，也不是所有AWS资源都需要花钱。因此，仍然值得直接检查特定服务，但从这个列表开始可能会有所帮助。
- en: 'We can usually form our attack around the data that''s returned from the `aws__enum_spend`
    module, but in this case, our example Acme Co. discussed EC2 at one point prior
    to the engagement. Working off that information, and the fact that EC2 is often
    one of the most fruitful services to target, we are going to run the `ec2__enum`
    module to discover any EC2 resources in the account. We can do that with the following
    command:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通常情况下，我们可以根据`aws__enum_spend`模块返回的数据来制定攻击计划，但在这种情况下，我们的示例公司Acme Co.在参与之前曾讨论过EC2。基于这些信息，以及EC2通常是最有成效的服务之一，我们将运行`ec2__enum`模块来发现账户中的任何EC2资源。我们可以使用以下命令来执行：
- en: '[PRE5]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Because we haven''t set any session regions in Pacu, we will be prompted and
    asked if we want to target every AWS region, which we will reply to with yes.
    This is because we don''t know what regions are being used yet, so it is worth
    checking out each one until we can find that information out:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们还没有在Pacu中设置任何会话区域，所以我们将被提示并询问是否要针对每个AWS区域进行操作，我们会回答是。这是因为我们还不知道使用了哪些区域，所以值得检查每一个，直到我们可以找到这些信息为止：
- en: '![](img/cc088745-2b32-4326-8bdc-5d7432f3cf86.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cc088745-2b32-4326-8bdc-5d7432f3cf86.png)'
- en: The summary results of the ec2__enum module
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`ec2__enum`模块的摘要结果'
- en: We can see that seven total EC2 instances were discovered in the scan across
    every region. If we scroll up in the results, we can determine that there is one
    EC2 instance in `us-east-1` and six EC2 instances in `us-west-2`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到在扫描中发现了七个EC2实例。如果我们在结果中向上滚动，我们可以确定`us-east-1`有一个EC2实例，`us-west-2`有六个EC2实例。
- en: If we wanted to assume that only `us-east-1` and `us-west-2` are used across
    the whole AWS account, we could set the Pacu session regions to those two regions,
    but it is difficult to make that assumption just based off a single service, so
    we aren't going to do that.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想假设整个AWS账户只使用`us-east-1`和`us-west-2`，我们可以将Pacu会话区域设置为这两个区域，但仅基于单个服务很难做出这样的假设，所以我们不打算这样做。
- en: Now that we have enumerated what EC2 resources exist, we'll look at the `EC2
    userdata` for each of the instances, as that is one of the simplest, yet most
    fruitful, security checks that can be run against EC2 instances. Often, we can
    find private information (that shouldn't be in there) or other general information
    that can help us gather a better overview of what is going on in the environment.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经枚举了存在的EC2资源，我们将查看每个实例的`EC2 userdata`，因为这是针对EC2实例运行的最简单但最有成效的安全检查之一。通常情况下，我们可以找到私人信息（不应该在其中）或其他一般信息，这些信息可以帮助我们更好地了解环境中发生了什么。
- en: 'To do this, run the `run ec2__download_userdata` command in Pacu. The following
    screenshot shows that we found `userdata` in two of the instances we enumerated
    in the environment:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要执行此操作，请在Pacu中运行`run ec2__download_userdata`命令。以下屏幕截图显示我们在环境中枚举的两个实例中找到了`userdata`：
- en: '![](img/e648c369-ecae-4f24-9bb2-db244be3b043.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e648c369-ecae-4f24-9bb2-db244be3b043.png)'
- en: The results of using the ec2__download_userdata module
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ec2__download_userdata模块的结果
- en: As we can see from the preceding screenshot, the module first asks if we want
    to enumerate `EC2 LaunchTemplates` (which can hold `userdata` as well), because
    there are none in the database, which we respond to with no, because we know that
    we have already enumerated those (with `ec2__enum`) and none were found. Then,
    we can see that two out of the seven EC2 instances have `userdata` attached to
    them, which was then stored in our Pacu folder at :`./sessions/Acme/downloads/ec2_user_data`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的屏幕截图中可以看到，该模块首先询问我们是否要枚举`EC2 LaunchTemplates`（也可以保存`userdata`），因为数据库中没有，我们回答否，因为我们知道我们已经枚举过了（使用`ec2__enum`），并且没有找到。然后，我们可以看到七个EC2实例中有两个附加了`userdata`，然后存储在我们的Pacu文件夹中：`./sessions/Acme/downloads/ec2_user_data`。
- en: 'Let''s check out that `userdata` by reviewing those files to see if there is
    anything interesting in them. We''ll do this with the `cat` command, which will
    output the contents of the text file we specify to the screen:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过查看这些文件来检查`userdata`，看看其中是否有什么有趣的内容。我们将使用`cat`命令来执行此操作，该命令将输出我们指定的文本文件的内容到屏幕上：
- en: '![](img/2b576881-ad5c-4f0b-b2e0-b97ec0cd4e26.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b576881-ad5c-4f0b-b2e0-b97ec0cd4e26.png)'
- en: Outputting the contents of the two files with EC2 user data in them
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 输出这两个包含EC2用户数据的文件的内容
- en: Based on the output of the first instance (`i-07fdb3fbb2a9a2444`), we can see
    that when it was launched, it used `apt-get` to install the AWS CLI and then used
    it to copy a file from a private S3 bucket to the root folder. This tells us that
    there is likely an IAM role attached to that EC2 instance, because no credentials
    are set up within the `userdata`, but we could confirm that with the `data EC2`
    command in Pacu, where we could find the details of that instance.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 根据第一个实例（`i-07fdb3fbb2a9a2444`）的输出，我们可以看到它在启动时使用`apt-get`安装了AWS CLI，然后使用它将文件从私有S3存储桶复制到根文件夹。这告诉我们，该EC2实例可能附加了IAM角色，因为在`userdata`中没有设置凭据，但我们可以通过Pacu中的`data
    EC2`命令来确认这一点，从中我们可以找到该实例的详细信息。
- en: The second instance that we looked at for the `userdata` looks juicy. It is
    using the `curl` program to get an authorization token from Acme.com's API. It
    is using basic authentication, so we can see the administrator username (`admin`)
    and password (`P@ssW0rd`) right there in the command. We can now perform some
    simple recon on the Acme.com website to find out what access the administrator
    account will provide us. Once that's done, we can just request our own authorization
    token, using the same credentials and API, where we then could pivot access into
    the main `Acme.com` website.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们查看的第二个实例的`userdata`看起来很有趣。它正在使用`curl`程序从Acme.com的API获取授权令牌。它正在使用基本身份验证，因此我们可以在命令中直接看到管理员用户名（`admin`）和密码（`P@ssW0rd`）。现在，我们可以对Acme.com网站进行一些简单的侦察，以找出管理员帐户将为我们提供什么访问权限。完成后，我们可以使用相同的凭据和API请求我们自己的授权令牌，然后我们可以将访问权限转移到主`Acme.com`网站。
- en: Attacking a random web application is beyond the scope of this book, but this
    would be an extremely valid attack path to take during an AWS pentest, if a few
    conditions are met. First, the web application should be hosted within the AWS
    environment we are attacking for it to be considered in-scope and, second, we
    need to determine if this is within the client's expectations. If either of these
    are questionable, it would be worth it to contact our client and ask them directly.
    If this attack is allowed, we may be able to escalate this attack to take control
    of the web application, or we may be able to expand our AWS access even further,
    depending on what we find within it.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击随机的Web应用程序超出了本书的范围，但如果满足一些条件，这将是进行AWS渗透测试的一个非常有效的攻击路径。首先，Web应用程序应该托管在我们攻击的AWS环境中，才能被视为在范围内，其次，我们需要确定这是否符合客户的期望。如果其中任何一个是有问题的，值得联系我们的客户直接询问。如果允许这种攻击，我们可能能够升级这种攻击以控制Web应用程序，或者根据我们在其中找到的内容，我们可能能够进一步扩展我们的AWS访问权限。
- en: There are other services we could enumerate and other enumeration modules we
    could run within Pacu, but we are going to move on from that for now and look
    at privilege escalation. After we attempt to abuse our users' privileges for privilege
    escalation through regular means, it will then be time to review the other services
    in the account and try to use those for privilege escalation (and/or other attacks).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在Pacu中枚举其他服务和运行其他枚举模块，但现在我们将继续查看特权升级。在我们尝试通过常规手段滥用用户权限进行特权升级之后，将是时候审查账户中的其他服务，并尝试使用这些服务进行特权升级（和/或其他攻击）。
- en: Privilege escalation
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特权升级
- en: 'We have already enumerated our own users'' privileges, as well as every other
    user''s and the roles within the account we are targeting. We can now pass the
    information that the `iam__enum_permissions` module generated to the `iam__privesc_scan`
    module to check for any instances of privilege escalation within the account.
    We''ll first use the `--offline` argument so that the module knows we are checking
    everyone''s privilege escalation paths. Without that argument, it will only check
    our own user''s privilege escalation paths and then try to exploit them to gain
    escalated access to the environment. The following screenshot shows the output
    of the `iam__privesc_scan` module, where it has identified multiple users who
    already have administrator privileges to the environment and multiple users who
    are vulnerable to a few different kinds of privilege escalation:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经枚举了我们自己用户的权限，以及我们正在针对的帐户中的每个其他用户和角色的权限。现在我们可以将`iam__enum_permissions`模块生成的信息传递给`iam__privesc_scan`模块，以检查帐户内是否存在特权升级的情况。我们首先使用`--offline`参数，以便模块知道我们正在检查每个人的特权升级路径。如果没有该参数，它将只检查我们自己用户的特权升级路径，然后尝试利用它们以获得对环境的提升访问权限。以下截图显示了`iam__privesc_scan`模块的输出，其中它已经确定了多个用户已经具有对环境的管理员特权，并且多个用户容易受到几种不同特权升级的攻击：
- en: '![](img/d8ebcfaf-d238-4c27-8b9d-6dff0c983229.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d8ebcfaf-d238-4c27-8b9d-6dff0c983229.png)'
- en: Running the iam__privesc_scan module with the --offline argument
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 使用--offline参数运行iam__privesc_scan模块
- en: There are a few things that we can take away from this output. We can see that
    the users `Spencer`, `DaveY`, `ExampleUser`, and `Alex` and the roles `EC2Admin`
    and `CloudFormationAdmin` all already have administrator access to the environment.
    After that, we can see that the roles `AWSBatchServiceRole`, `AWSServiceRoleForAutoScaling`,
    and `aws-elasticbeanstalk-service-role` and the user `CompromisedUser` are potentially
    vulnerable to various privilege escalation methods.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从这个输出中得出一些结论。我们可以看到用户`Spencer`，`DaveY`，`ExampleUser`和`Alex`以及角色`EC2Admin`和`CloudFormationAdmin`都已经具有对环境的管理员访问权限。之后，我们可以看到角色`AWSBatchServiceRole`，`AWSServiceRoleForAutoScaling`和`aws-elasticbeanstalk-service-role`以及用户`CompromisedUser`可能容易受到各种特权升级方法的攻击。
- en: The good news is that our own user, `CompromisedUser`, is potentially vulnerable
    to four different escalation methods, which means we will likely be able to gain
    further access to the environment. If we wanted to look at this data again later,
    we could navigate to the Pacu `./sessions/Acme/downloads/` folder to review the
    JSON file that was generated, where the privilege escalation data is stored, as
    indicated at the bottom of the module output. When we are finished with our pentest
    (after we have verified the results of the privilege escalation scan), we will
    want to make sure that we report this information to the client, even if it isn't
    directly our own user that is vulnerable.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是我们自己的用户`CompromisedUser`可能容易受到四种不同的升级方法的攻击，这意味着我们很可能能够进一步访问环境。如果我们想以后再次查看这些数据，我们可以导航到Pacu
    `./sessions/Acme/downloads/`文件夹，以查看生成的JSON文件，其中存储了特权升级数据，如模块输出底部所示。当我们完成渗透测试（在验证特权升级扫描结果后），我们将要确保将这些信息报告给客户，即使我们自己的用户并非直接易受攻击。
- en: 'The results of the privilege escalation scan aim to be self-explanatory by
    their names, but if you are interested in the specifics of each privilege escalation
    method, it is suggested that you check out this link: [https://rhinosecuritylabs.com/aws/aws-privilege-escalation-methods-mitigation/](https://rhinosecuritylabs.com/aws/aws-privilege-escalation-methods-mitigation/).
    The module is built around the content of that blog post, so you can match up
    privilege escalation methods with the manual guides explained in the blog post.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 特权升级扫描的结果旨在通过它们的名称自我解释，但如果您对每种特权升级方法的具体情况感兴趣，建议您查看此链接：[https://rhinosecuritylabs.com/aws/aws-privilege-escalation-methods-mitigation/](https://rhinosecuritylabs.com/aws/aws-privilege-escalation-methods-mitigation/)。该模块是围绕该博客文章的内容构建的，因此您可以将特权升级方法与博客文章中解释的手动指南进行匹配。
- en: If we look at the `privesc` methods that our `CompromisedUser` is vulnerable
    to, it tells us that it is potentially vulnerable to four different methods. The
    `CreateEC2WithExistingIP` method means that we potentially have the privileges
    to launch a new EC2 instance and pass an existing instance profile to it, where
    we would then be able to gain access to the IAM role credentials associated with
    the instance profile. The `"PassExistingRoleToNewLambdaThenTriggerWithNewDynamo"`
    and `"PassExistingRoleToNewLambdaThenTriggerWithExistingDynamo"` `privesc` methods
    mean that we potentially have access to create a new Lambda function, pass it
    an IAM role, and then invoke the function through either a new or existing DynamoDB
    event source mapping.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看我们的`CompromisedUser`易受攻击的`privesc`方法，它告诉我们它可能容易受到四种不同方法的攻击。`CreateEC2WithExistingIP`方法意味着我们可能有权限启动新的EC2实例并将现有实例配置文件传递给它，然后我们将能够访问与实例配置文件关联的IAM角色凭据。`"PassExistingRoleToNewLambdaThenTriggerWithNewDynamo"`和`"PassExistingRoleToNewLambdaThenTriggerWithExistingDynamo"`
    `privesc`方法意味着我们可能有权限创建新的Lambda函数，传递IAM角色，然后通过新的或现有的DynamoDB事件源映射调用该函数。
- en: The `PassExistingRoleToNewDataPipeline` method tells us that we potentially
    have the privileges to launch a new data pipeline to execute the AWS CLI as the
    role that we pass. We could manually go through each one of these methods to try
    and gain further access, but it would be much more efficient to use the exploitation
    feature of the `iam__privesc_scan` module, which will automatically try to escalate
    our users' privileges using the available methods.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`PassExistingRoleToNewDataPipeline`方法告诉我们，我们可能有权限启动新的数据管道以执行AWS CLI，就像我们传递的角色一样。我们可以手动查看这些方法中的每一个，以尝试获得更多的访问权限，但使用`iam__privesc_scan`模块的利用功能将更加高效，它将自动尝试使用可用方法提升我们用户的权限。'
- en: 'To auto-exploit the privilege escalation methods, we can simply run the following
    command:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要自动利用特权升级方法，我们只需运行以下命令：
- en: '[PRE6]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, it will find our users vulnerable `privesc` methods automatically, and
    it will cycle through each one until it successfully gains additional privileges.
    Due to the complexity of some of the privilege escalation methods, user input
    may be required at various points. When we first run it, it will find those privilege
    escalation methods again and then dive into the `CreateEC2WithExistingIP` privilege
    escalation method, which can be seen in the following screenshot:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它将自动找到我们用户的脆弱的`privesc`方法，并循环遍历每一个，直到成功获得额外的权限。由于某些特权升级方法的复杂性，可能需要在各个点输入用户输入。当我们第一次运行它时，它将再次找到那些特权升级方法，然后深入到`CreateEC2WithExistingIP`特权升级方法中，可以在以下截图中看到：
- en: '![](img/7c3fa2a1-417c-4e45-b674-be63bd6c6b96.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7c3fa2a1-417c-4e45-b674-be63bd6c6b96.png)'
- en: The privesc scan module attempting to gain privileges through the first method
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: privesc扫描模块尝试通过第一种方法获得特权
- en: 'It is asking for a region because we haven''t set any session regions for the
    Pacu session, so we will supply `15` to target the `us-west-2` region:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 它正在要求一个区域，因为我们还没有为Pacu会话设置任何会话区域，所以我们将提供`15`来定位`us-west-2`区域：
- en: '![](img/4a484c89-9fec-4752-8d8e-ee56d6d0c96d.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4a484c89-9fec-4752-8d8e-ee56d6d0c96d.png)'
- en: The EC2 privilege escalation method wants us to choose an instance profile to
    attach to the instance
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: EC2特权升级方法希望我们选择要附加到实例的实例配置文件
- en: 'As we can see in the preceding screenshot, there are six EC2 instance profiles
    that are eligible to be attached to our instance. We want to choose the one with
    the highest privileges, because it is the role we will gain access to through
    this method. We could determine this information by viewing the output of the
    full account `iam__enum_permissions` module from earlier, but if we look back
    to a minute ago at the full account privilege escalation scan, we will see that
    it told us that the `EC2Admin` role already has administrator permissions. That
    makes it an obvious choice for this question:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的截图中所看到的，有六个EC2实例配置文件有资格附加到我们的实例。我们想选择具有最高权限的那个，因为这是我们通过这种方法获得访问权限的角色。我们可以通过查看之前的完整账户`iam__enum_permissions`模块的输出来确定这些信息，但是如果我们回顾一分钟前的完整账户特权升级扫描，我们将看到它告诉我们`EC2Admin`角色已经具有管理员权限。这使得这个问题的选择变得显而易见：
- en: '![](img/3ce2c35e-3aa9-48fa-b0c3-911896cb3d39.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ce2c35e-3aa9-48fa-b0c3-911896cb3d39.png)'
- en: The next question we are asked after choosing an instance profile
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择实例配置文件后，我们被问到的下一个问题
- en: Next up, we will be presented with a question and five options to pick from.
    The question is asking us how we would like to use this EC2 instance to escalate
    our privileges. Option one is to open a reverse shell to our own server on startup,
    allowing us to do what we want from within the instance. Option two is to run
    an AWS CLI command from within the target instance, using the role credentials
    that we attached to the instance. Option three is to make an HTTP request outbound
    from the EC2 instance to our own server that contains the current credentials
    of the IAM role. Option four is to create a new SSH key in AWS, provide you with
    the private key, and then launch the instance with that key to allow you to SSH
    into it. Finally, option five is to skip this `privesc` method and move to the
    next one. Depending on your personal setup and the setup of the environment, you
    will have to choose what will work best for you.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将被提出一个问题，并提供五个选项供选择。问题是问我们如何使用这个EC2实例来提升我们的权限。选项一是在启动时向我们自己的服务器打开一个反向shell，允许我们在实例内部做我们想做的事情。选项二是从目标实例内部运行AWS
    CLI命令，使用我们附加到实例的角色凭据。选项三是从EC2实例向我们自己的服务器发出包含IAM角色当前凭据的HTTP请求。选项四是在AWS中创建一个新的SSH密钥，提供给您私钥，然后使用该密钥启动实例，以允许您SSH进入它。最后，选项五是跳过这个`privesc`方法，转移到下一个。根据您的个人设置和环境的设置，您将不得不选择最适合您的方法。
- en: 'For this pentest, I am going to choose option one, a reverse shell, because
    it won''t trigger GuardDuty and it only requires the default EC2 security group
    to allow outbound internet access to the port we specify (rather than something
    like port `22` inbound for option four). From that reverse shell, we can then
    use the AWS CLI from within the instance, curl the role credentials from the EC2
    metadata API, or whatever else we want:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这次渗透测试，我将选择选项一，即反向shell，因为它不会触发GuardDuty，而且只需要默认的EC2安全组允许我们指定的端口的出站互联网访问（而不是像选项四那样需要入站端口`22`）。从反向shell，我们可以在实例内部使用AWS
    CLI，从EC2元数据API中获取角色凭据，或者任何其他我们想要的东西：
- en: '![](img/f13b4a0d-1263-4662-b7fb-e04ac5bcda56.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f13b4a0d-1263-4662-b7fb-e04ac5bcda56.png)'
- en: Using the reverse shell option for this privilege escalation method
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 使用反向shell选项进行特权升级方法
- en: 'In the previous screenshot, we can see that we provided the IP address (censored)
    and port of our attacker-owned server. Then, the module outputs the details about
    the EC2 instance that it created. Now, all we need to do is wait for our reverse
    shell to show up:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一张截图中，我们可以看到我们提供了攻击者拥有的服务器的IP地址（已屏蔽）和端口。然后，该模块输出了它创建的EC2实例的详细信息。现在，我们所需要做的就是等待我们的反向shell出现：
- en: '![](img/4489248c-f671-4774-acbc-9d5da94e14b8.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4489248c-f671-4774-acbc-9d5da94e14b8.png)'
- en: Setting up our netcat listener, where we receive our reverse shell as the root
    user
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 设置我们的netcat监听器，在那里我们接收我们的反向shell作为root用户
- en: As we can see in the previous screenshot, we listened on port `5050` with netcat,
    ran the `whoami` command to see that we are the root user, and then used the AWS
    CLI to run the `STS GetCallerIdentity` command. The output of that command shows
    us that we are authenticating with AWS as the assumed-role `EC2Admin`, which we
    know has full administrator privileges to the environment.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的截图中所看到的，我们使用netcat监听端口`5050`，运行`whoami`命令以查看我们是root用户，然后使用AWS CLI运行`STS
    GetCallerIdentity`命令。该命令的输出显示我们正在作为假定角色`EC2Admin`进行AWS身份验证，我们知道该角色对环境拥有完整的管理员权限。
- en: Although we have access to an administrator in the AWS environment, it is only
    temporary. We might lose this EC2 instance at any minute or the credentials will
    expire before we can do anything useful with them, so we need to take quick action
    to escalate our original `CompromisedUser` permissions and save the EC2 instance
    as a backup. Essentially, once we escalate our own user's permissions, the EC2
    instance will act as pseudo-persistence in the account, potentially allowing us
    to gain administrator-level permissions again in the future, if need be.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们在AWS环境中有管理员权限，但这只是暂时的。我们可能随时失去这个EC2实例，或者凭据在我们能够对其进行有用操作之前就会过期，因此我们需要迅速采取行动，提升我们原始的`CompromisedUser`权限并将EC2实例保存为备份。基本上，一旦我们提升了自己用户的权限，EC2实例将作为账户中的伪持久性，有可能在将来再次获得管理员级别权限。
- en: 'To escalate our own user to an administrator, we will run the following AWS
    CLI command, which attaches the `AdministratorAccess` AWS-managed IAM policy to
    our `CompromisedUser`:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将我们自己的用户提升为管理员，我们将运行以下AWS CLI命令，将`AdministratorAccess` AWS托管的IAM策略附加到我们的`CompromisedUser`：
- en: '[PRE7]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This command does not return any output if it was successful, so we can go
    back to the `iam__enum_permissions` Pacu module again to confirm that we are an
    administrator:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功，该命令不会返回任何输出，因此我们可以再次回到`iam__enum_permissions` Pacu模块，以确认我们是管理员：
- en: '![](img/0327c5a5-f797-4cb3-8567-a49eeb52da60.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0327c5a5-f797-4cb3-8567-a49eeb52da60.png)'
- en: Re-running iam__enum_permissions, then running whoami, and seeing that the AdministratorAccess
    IAM policy is attached to us
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 重新运行iam__enum_permissions，然后运行whoami，并查看我们是否附加了AdministratorAccess IAM策略
- en: If we wanted to confirm even further, we could try running an AWS CLI command
    or Pacu module that we know we didn't previously have access to, but the fact
    that the policy is attached to our user shows that we are, in fact, an administrator.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想进一步确认，我们可以尝试运行一个我们之前没有访问权限的AWS CLI命令或Pacu模块，但我们的用户附加的策略表明我们实际上是管理员。
- en: So far, we have enumerated IAM and EC2 data, launched a backdoor EC2 instance
    to allow for privilege escalation, and then used an EC2 instance to make our `CompromisedUser`
    an administrator in the environment. At this point, we should establish some persistence
    before moving on to other AWS services.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经枚举了IAM和EC2数据，启动了一个后门EC2实例以允许特权升级，然后使用EC2实例将我们的`CompromisedUser`提升为环境中的管理员。在这一点上，我们应该在继续使用其他AWS服务之前建立一些持久性。
- en: Persistence
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持久性
- en: Although we already have an EC2 instance that we have access to and that provides
    us access to an administrator level role in the environment, we shouldn't rely
    on it as our sole method of persistence for a few reasons. The role could change
    at any moment, such as if it was deleted or had its privileges modified, which
    would remove or weaken our persistent access.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们已经有一个我们可以访问的EC2实例，并且可以在环境中提供给我们管理员级别角色的访问权限，但出于几个原因，我们不应该仅依赖它作为我们唯一的持久性方法。角色随时可能发生变化，例如如果被删除或者其权限被修改，这将移除或削弱我们的持久性访问。
- en: The EC2 instance could be noted as suspicious and shut down at any point, removing
    our persistent access. Also, EC2 security groups rules could be modified, blocking
    outbound access from the instance, meaning we will no longer receive our reverse
    shell. Finally, we might lose the reverse shell connection, which means we would
    need to wait until the instance is restarted to get the reverse shell connection
    sent back again. There are a lot of ways things could go wrong, even without a
    defender trying to stop us, so an EC2 instance with an attached role is not a
    reliable method of persistence, although it does work for at least a short time
    period.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: EC2实例随时可能被标记为可疑并关闭，移除我们的持久性访问。此外，EC2安全组规则可能被修改，阻止实例的出站访问，这意味着我们将不再接收到反向shell。最后，我们可能会失去反向shell连接，这意味着我们需要等待实例重新启动才能再次获得反向shell连接。即使没有防御者试图阻止我们，事情也可能出错很多种方式，因此附加角色的EC2实例并不是一个可靠的持久性方法，尽管它至少在短时间内有效。
- en: 'Just to be thorough/safe, we will launch a few different methods of persistence
    into our target account:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 为了彻底/安全起见，我们将在目标帐户中启动几种不同的持久性方法：
- en: 'The first method of persistence we will use will be to create new access key
    pairs for another user or two in the account with the `iam__backdoor_users_keys`
    Pacu module by running the `run iam__backdoor_users_keys` command:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用的第一种持久性方法是使用`iam__backdoor_users_keys` Pacu模块为帐户中的另一个或两个用户创建新的访问密钥对，通过运行`run
    iam__backdoor_users_keys`命令：
- en: '![](img/06b1140c-7a0e-4032-b2f0-e8173562ad4b.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/06b1140c-7a0e-4032-b2f0-e8173562ad4b.png)'
- en: Backdooring the DaveY and Spencer users with the `iam__backdoor_users_keys`
    module
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`iam__backdoor_users_keys`模块为DaveY和Spencer用户设置后门
- en: As we can see in the preceding screenshot, the module will prompt us, asking
    which users we want to create backdoor AWS keys for.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的截图中所看到的，该模块将提示我们，询问我们想要为哪些用户创建后门AWS密钥。
- en: We chose `DaveY` and `Spencer` for this example, because they showed up as administrative
    users when we ran the privilege escalation scanner earlier, which means we'll
    have elevated persistence for as long as these keys are alive.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们选择了`DaveY`和`Spencer`作为示例，因为当我们之前运行特权升级扫描程序时，他们显示为管理员用户，这意味着只要这些密钥存活，我们将具有提升的持久性。
- en: 'Next, we are going to create a new Lambda backdoor within the account to backdoor
    any newly created IAM roles so that we can assume their credentials cross-account.
    We can do this with the `lambda__backdoor_new_roles` Pacu module. We need a role
    that has the IAM `UpdateAssumeRolePolicy` and `GetRole` permissions for our backdoor,
    so we are going to add that permission to an existing role that allows Lambda
    to be assumed. We can do this with the AWS CLI by running the following command,
    which targets the `LambdaEC2FullAccess` role:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在帐户中创建一个新的Lambda后门，以便后门任何新创建的IAM角色，以便我们可以跨帐户假定其凭据。我们可以使用`lambda__backdoor_new_roles`
    Pacu模块来实现这一点。我们需要一个具有IAM `UpdateAssumeRolePolicy`和`GetRole`权限的角色，以便我们的后门，因此我们将将该权限添加到允许Lambda被假定的现有角色。我们可以通过运行以下命令使用AWS
    CLI来实现这一点，该命令针对`LambdaEC2FullAccess`角色：
- en: '[PRE8]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'There is one thing left to do. The module tells us that CloudTrail must be
    enabled in the `us-east-1` region for our backdoor function to ever trigger, so
    we should double-check this, just in case. The following command can do just what
    we want:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还有一件事要做。该模块告诉我们，CloudTrail必须在`us-east-1`地区启用我们的后门功能才能触发，因此我们应该再次检查一下，以防万一。以下命令可以满足我们的要求：
- en: '[PRE9]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In our case, there is one residing in `us-east-1`, so we are good to go with
    the backdoor module, which can be seen in the following screenshot:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，有一个位于`us-east-1`的角色，因此我们可以使用后门模块，如下截图所示：
- en: '![](img/8d10fd48-2301-4683-b3ff-4518b5285398.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d10fd48-2301-4683-b3ff-4518b5285398.png)'
- en: Creating a backdoor Lambda function and CloudWatch Events rule
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个后门Lambda函数和CloudWatch Events规则
- en: 'As we can see in the previous screenshot, we ran the following Pacu command:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前一个屏幕截图中看到的，我们运行了以下Pacu命令：
- en: '[PRE10]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This command assumes that we are hosting an HTTP listener at the IP `x.x.x.x`
    (censored) on port `5050` and that our `PersonalUser` AWS user resides in AWS
    account ID `000000000000`. When it is run, Pacu will generate the code for the
    Lambda function, zip it, and then upload it to Lambda. After that, it will create
    a CloudWatch Events rule that triggers on any IAM `CreateRole` API calls. Now,
    every time a new IAM role is created, our CloudWatch Events rule will be triggered,
    which causes our Lambda function to be invoked, which then will use the IAM `UpdateAssumeRolePolicy`
    API to add our external user (`PersonalUser`) as a trusted entity that can assume
    it. When that is done, it will exfiltrate the ARN of the new role to the URL we
    provided in the command so that we can use it to gain access to the account whenever
    we want.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令假定我们在IP `x.x.x.x`（已编辑）的端口`5050`上托管了HTTP监听器，并且我们的`PersonalUser` AWS用户驻留在AWS帐户ID`000000000000`中。运行时，Pacu将为Lambda函数生成代码，对其进行压缩，然后将其上传到Lambda。之后，它将创建一个CloudWatch
    Events规则，该规则会触发任何IAM `CreateRole` API调用。现在，每当创建新的IAM角色时，我们的CloudWatch Events规则将被触发，这将导致我们的Lambda函数被调用，然后将使用IAM
    `UpdateAssumeRolePolicy` API将我们的外部用户（`PersonalUser`）添加为可以假定的受信任实体。完成后，它将将新角色的ARN外泄到我们在命令中提供的URL，以便我们随时可以使用它来访问帐户。
- en: 'After a short while of waiting, we finally receive a request to our **command
    and control** (**C2**) server with an IAM role ARN, which means that one was created
    and that we backdoored it automatically with our Lambda function:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 等待片刻后，我们最终收到了一个IAM角色ARN的请求，这意味着已经创建了一个角色，并且我们使用我们的Lambda函数自动设置了后门：
- en: '![](img/e6df982c-0623-4e60-9838-ec3d44e784a6.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e6df982c-0623-4e60-9838-ec3d44e784a6.png)'
- en: Our own server listening on port 5050 for IAM role ARNs from our backdoor Lambda
    function
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们自己的服务器在端口5050上监听来自我们后门Lambda函数的IAM角色ARN
- en: As we can see in the preceding screenshot, an `HTTP` `POST` request was made
    to our server with a URL-encoded IAM role ARN (named `A-New-Role`) in the body.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的屏幕截图中看到的，我们的服务器收到了一个`HTTP` `POST`请求，其中包含一个URL编码的IAM角色ARN（名为`A-New-Role`）。
- en: 'If we want to request credentials for this backdoored role, we would use the
    STS `AssumeRole` API. We can do this by running the following AWS CLI command,
    using the credentials of our `PersonalUser`:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要请求此后门角色的凭据，我们将使用STS `AssumeRole` API。我们可以通过运行以下AWS CLI命令，使用我们的`PersonalUser`的凭据来实现这一点：
- en: '[PRE11]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We could use this same command for any other role that ends up getting created
    and exfiltrated to our server; we would just need to modify the ARN in it.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用相同的命令来处理任何其他最终被创建并外泄到我们服务器的角色；我们只需要修改其中的ARN。
- en: Now that we are an administrator in the account, we have several forms of elevated
    persistence, and we have also performed some basic reconnaissance in the account.
    Now, we are ready to move on to the service exploitation phase.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们是帐户中的管理员，我们有几种提升的持久性形式，并且我们还在帐户中执行了一些基本的侦察。现在，我们准备进入服务利用阶段。
- en: Post-exploitation
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后利用
- en: The post-exploitation (or service exploitation) phase is essentially where we
    target as many AWS services as possible to try and uncover weaknesses, misconfigurations,
    and bad practices. We'll cover some of the primary AWS services in this section,
    but any AWS service is a potential for exploitation and misconfigurations, so
    it is almost always fruitful to look at any service or resources that are being
    used, even if you may be unfamiliar with the service itself.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 后利用（或服务利用）阶段基本上是我们尽可能地针对AWS服务，以尝试发现弱点、错误配置和不良实践。我们将在本节中介绍一些主要的AWS服务，但任何AWS服务都有可能被利用和错误配置，因此查看任何正在使用的服务或资源几乎总是值得的，即使您可能对该服务本身不熟悉。
- en: EC2 exploitation
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EC2利用
- en: We have already begun working on some EC2-related stuff, so that's where we
    are going to start. EC2 is also one of the most common services you will encounter
    during your pentests, so it is a good idea to become intimately familiar with
    it and with testing it. EC2 can yield some high impact findings when misconfigured
    as well, so you can't go wrong by starting with it as your primary service.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经开始处理一些与EC2相关的内容，因此我们将从这里开始。EC2也是您在渗透测试中经常遇到的服务之一，因此熟悉它并进行测试是一个好主意。当错误配置时，EC2也可能产生一些高影响的发现，因此以它作为您的主要服务开始是没有错的。
- en: The first thing we could check out is what, if any, EC2 instances have public
    IP addresses. This is simple in the AWS web console, as you can simply sort the
    results by instances with public IPs. If we wanted to gain console access from
    our `CompromisedUser`, we could use the IAM `CreateLoginProfile` API to create
    a password for us to login with, but if we didn't want to do so, we could use
    the `data EC2` command in Pacu to review the results of the enumeration we performed
    earlier.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以首先检查有哪些EC2实例具有公共IP地址。在AWS Web控制台中，这很简单，因为您可以通过实例的公共IP地址对结果进行排序。如果我们想要从我们的`CompromisedUser`获得控制台访问权限，我们可以使用IAM的`CreateLoginProfile`
    API为我们创建一个登录密码，但如果我们不想这样做，我们可以使用Pacu中的`data EC2`命令来查看我们之前执行的枚举的结果。
- en: Then, for each of the instances that have public IP addresses, we could check
    out the EC2 security groups attached to them. Ideally, we look through the security
    group rules to try and find any services that may be running on the instance.
    If we see port 80 open to some IP address, we know there is likely a web server
    running on the instance. If we see port 22 open to some IP address, we know there
    is likely an SSH server running (and so on). If any of these ports are open to
    the public, we could attempt to access these and look for any low-hanging-fruit,
    such as weak/lack-of authentication, known exploits, or anything else you might
    look for in a network-style pentest.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，对于每个具有公共IP地址的实例，我们可以查看附加到它们的EC2安全组。理想情况下，我们可以浏览安全组规则，尝试找到可能在实例上运行的任何服务。如果我们看到端口80对某个IP地址开放，我们知道该实例上可能正在运行Web服务器。如果我们看到端口22对某个IP地址开放，我们知道该实例上可能正在运行SSH服务器（等等）。如果其中任何端口对公共开放，我们可以尝试访问这些端口，并寻找任何低
    hanging-fruit，例如弱/缺乏身份验证，已知的漏洞，或者您在网络风格渗透测试中可能寻找的其他任何内容。
- en: We could even perform those same tasks on instances without public IP addresses,
    if the right conditions are met, but with administrator access, we can likely
    make anything work. We already launched an EC2 instance into the account for our
    privilege escalation, so we are potentially within the VPC of other EC2 instances.
    If not, we could just launch another instance and gain access that way. From that
    instance, we can access the internal IPs of other EC2 instances, so we could likely
    gain further access like that.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 如果满足了正确的条件，我们甚至可以在没有公共IP地址的实例上执行相同的任务，但是有管理员访问权限，我们可能可以使任何事情都能够运行。我们已经在账户中启动了一个EC2实例，用于特权升级，所以我们可能在其他EC2实例的VPC内。如果不是这样，我们可以启动另一个实例并以这种方式获得访问权限。从那个实例，我们可以访问其他EC2实例的内部IP，所以我们可能可以通过这种方式获得进一步的访问权限。
- en: 'If none of this worked out, we could just modify the security group rules on
    these instances to allow ourselves access. You could do this manually with the
    EC2 `AuthorizeSecurityGroupIngress` API, or we could use the `ec2__backdoor_ec2_sec_groups`
    module to create backdoor rules that allow us access to any port. The Pacu command
    to make this happen would look as follows, where we are opening every port to
    the `1.1.1.1` IP address (simulating that it is our own IP) for all security groups:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些都不起作用，我们可以修改这些实例的安全组规则，以允许我们访问。您可以使用EC2的`AuthorizeSecurityGroupIngress`
    API手动执行此操作，或者我们可以使用`ec2__backdoor_ec2_sec_groups`模块创建允许我们访问任何端口的后门规则。使这一切发生的Pacu命令如下，我们正在为所有安全组向`1.1.1.1`
    IP地址（模拟为我们自己的IP）打开每个端口：
- en: '[PRE12]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now, we should be able to access any port on any instance if we are originating
    from the `1.1.1.1` IP address. At this point, we could attack these services like
    you would in a regular internal network pentest.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们的IP地址是`1.1.1.1`，我们应该能够访问任何实例上的任何端口。在这一点上，我们可以像在常规内部网络渗透测试中那样攻击这些服务。
- en: If we wanted to directly gain RCE on any EC2 instances, there are a couple methods
    we could attempt. If you don't care about restarting any of the EC2 instances
    (which you should care about, as we don't typically want to do this to client
    servers), then you could use the `ec2__startup_shell_script` Pacu module to stop
    all (or specified) EC2 instances, modify their `userdata` to input a reverse shell
    as `root/SYSTEM` on startup, and then start all those instances back up. They
    would only be offline for a few minutes, but this could cause major problems if
    you are unfamiliar with the setup of the environment, so it is typically not recommended.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想直接在任何EC2实例上获得RCE，我们可以尝试几种方法。如果您不在乎重新启动任何EC2实例（您应该在乎，因为我们通常不希望对客户服务器执行此操作），那么您可以使用`ec2__startup_shell_script`
    Pacu模块停止所有（或指定）EC2实例，修改它们的`userdata`以在启动时输入`root/SYSTEM`的反向shell，然后重新启动所有这些实例。它们只会离线几分钟，但如果您不熟悉环境的设置，这可能会导致重大问题，因此通常不建议这样做。
- en: 'If we wanted to gain RCE on EC2 instances and the right conditions have been
    met, we could use the `systemsmanager__rce_ec2` module in Pacu. It tries to identify
    what EC2 instances have the systems manager Agent installed on them (by default
    or not), and then if it identifies any, it will try to attach the systems manager
    role to them. Once that is done, instances with the correct conditions met will
    then show up as available targets for the systems manager `run` command, which
    allows you to execute code as the `root/SYSTEM` user on the target instance. An
    example Pacu command, which runs a reverse bash shell on Linux targets, might
    look something like this:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要在EC2实例上获得RCE，并且满足了正确的条件，我们可以在Pacu中使用`systemsmanager__rce_ec2`模块。它尝试识别哪些EC2实例安装了系统管理器代理（默认或非默认），然后如果识别到任何实例，它将尝试将系统管理器角色附加到它们上。一旦完成这一步，满足正确条件的实例将显示为系统管理器`run`命令的可用目标，这允许您在目标实例上以`root/SYSTEM`用户的身份执行代码。一个示例Pacu命令，在Linux目标上运行反向bash
    shell，可能看起来像这样：
- en: '[PRE13]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The value that's supplied to the `--command` argument is a bash reverse shell
    that will call out to the `1.1.1.1` IP address on port `5050`. On my server (assuming
    I control `1.1.1.1`), I would run a netcat listener, such as `nc -nlvp 5050`,
    to wait for my shell to come in. Keep in mind that this will only work for a single
    instance and that you will need to modify your payload if you want to drop some
    sort of malware or reverse shell on multiple instances. You also would likely
    need another payload for Windows hosts.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 提供给`--command`参数的值是一个bash反向shell，将调用`1.1.1.1` IP地址的`5050`端口。在我的服务器上（假设我控制`1.1.1.1`），我将运行一个netcat监听器，比如`nc
    -nlvp 5050`，等待我的shell进来。请记住，这只适用于单个实例，如果您想在多个实例上放置某种恶意软件或反向shell，您可能需要修改您的有效载荷。您还可能需要为Windows主机准备另一个有效载荷。
- en: If `PacuProxy` is enabled and listening when running this module, you can omit
    the `--command` argument. If you do so, then Pacu will automatically use its custom
    Linux/Windows one-liner stagers to take control of the target servers. This way,
    you don't need to worry about the target operating system or come up with your
    own command.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在运行此模块时启用并监听`PacuProxy`，则可以省略`--command`参数。如果这样做，Pacu将自动使用其自定义的Linux/Windows单行分段器来控制目标服务器。这样，您就不需要担心目标操作系统或自己想出命令。
- en: If we wanted to test other protections/monitoring capabilities, or we wanted
    to be just plain malicious, we could attempt to spin up multiple EC2 instances
    for something like cryptocurrency mining, but this should almost never be performed
    during a pentest because of the cost implications of such an attack. Only perform
    an attack like this if your client fully understands and wants the tests that
    you will be performing.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想测试其他保护/监控功能，或者我们只是想要恶意行为，我们可以尝试启动多个EC2实例，用于加密货币挖矿等操作，但由于这种攻击的成本影响，几乎不应在渗透测试期间执行。只有在您的客户完全理解并希望您执行的测试时，才执行此类攻击。
- en: 'Another attack we might want to try out would be inspecting EBS volumes and
    snapshots in the account. We could do this in a couple ways, but essentially these
    are the steps:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能想尝试的另一种攻击是检查帐户中的EBS卷和快照。我们可以通过几种方式来做到这一点，但基本上这些是步骤：
- en: Create a snapshot of the EBS volume you want to look at.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建您想要查看的EBS卷的快照。
- en: Share that snapshot with your attacker account, or create an EC2 instance in
    the compromised account.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与攻击者帐户共享该快照，或在受损帐户中创建一个EC2实例。
- en: Create a new EBS volume from the snapshot you created.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您创建的快照创建一个新的EBS卷。
- en: Mount that EBS volume on your EC2 instance.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的EC2实例上挂载EBS卷。
- en: Dig through the filesystem of the mounted volume, looking for secrets.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在挂载的卷的文件系统中搜索秘密。
- en: The benefit of sharing the EBS snapshot cross-account is that you can then use
    EC2 in your own account to check everything out, but typically a shared/public
    EBS snapshot is audited for by many configuration checkers, which means you might
    get flagged and caught. The benefit of using an EC2 instance in the compromised
    account is that you can avoid sharing snapshots cross-account, but you risk getting
    caught and removed at any moment.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 跨帐户共享EBS快照的好处是，您可以在自己的帐户中使用EC2来检查所有内容，但通常共享/公共EBS快照会被许多配置检查器审计，这意味着您可能会被标记并被发现。在受损帐户中使用EC2实例的好处是，您可以避免跨帐户共享快照，但您可能会在任何时候被发现并删除。
- en: 'The `ebs__explore_snapshots` Pacu module was built to automate this process.
    You can just run it and pass in an instance ID of an EC2 instance within the account
    and its availability zone, then it will cycle through all the EBS volumes in the
    account (a few at a time), mount them to your EC2 instance, and then wait until
    you are done searching through the filesystems. When you are done, it will then
    detach all the volumes it attached to your instance, delete them, and then it
    will delete any of the snapshots that it created as well. An example command to
    run this module might look like this:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`ebs__explore_snapshots` Pacu模块是为了自动化这个过程而构建的。您只需运行它，并传入帐户中EC2实例的实例ID和其可用区，然后它将循环遍历帐户中的所有EBS卷（每次几个），将它们挂载到您的EC2实例，然后等待您完成搜索文件系统。完成后，它将分离所有附加到您的实例的卷，删除它们，然后还将删除它创建的任何快照。运行此模块的示例命令可能如下所示：'
- en: '[PRE14]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This will then incrementally attach EBS volumes to that instance in availability
    zone `us-east-1a`, allowing you to check them out in small groups at a single
    time, and then it will clean everything up for you after.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它将逐步将EBS卷附加到该实例的可用区`us-east-1a`，允许您一次检查它们的小组，并在此之后为您清理一切。
- en: Code review and analysis in Lambda
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lambda中的代码审查和分析
- en: Lambda is another extremely common and extremely fruitful service to look at,
    just as we saw in the Lambda pentesting chapter.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda是另一个非常常见和非常富有成效的服务，就像我们在Lambda渗透测试章节中看到的那样。
- en: 'The first thing we will want to do is enumerate Lambda functions in our target
    account with the `lambda__enum` Pacu module. We can run it without any arguments,
    like this:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的第一件事是使用`lambda__enum` Pacu模块在目标帐户中枚举Lambda函数。我们可以像这样运行它，不带任何参数：
- en: '[PRE15]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When this is complete, we can then run `data Lambda` to review the function
    data that was enumerated. To start the review process, we should cycle through
    each function and look at the environment variables associated with it to try
    and find some sensitive data/values that might be useful in our attack.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们可以运行`data Lambda`来查看枚举的函数数据。要开始审查过程，我们应该循环遍历每个函数，并查看与之关联的环境变量，以尝试找到一些可能在我们的攻击中有用的敏感数据/值。
- en: After checking out environment variables for interesting data, if we found anything,
    such as if we found API keys or passwords, then we'll want to screenshot and make
    notes about it so that we can report it to the client. If what we found is open
    for abuse in some way, then now would likely be the time to do so, but only do
    so if it is still within the scope of your engagement. Sometimes, the secrets
    you find will belong to third-party services and you likely shouldn't be attacking
    them, but other times, where you could capitalize with privilege escalation or
    gain cross-AWS-account access to somewhere, it will likely be worth it after confirming
    with your client point-of-contact.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查环境变量以获取有趣数据后，如果我们发现了任何内容，比如发现了API密钥或密码，那么我们将希望截图并做笔记，以便向客户报告。如果我们发现的内容在某种程度上可以被滥用，那么现在可能是这样做的时候，但只有在仍然在您的参与范围内时才这样做。有时，您发现的秘密将属于第三方服务，您可能不应该攻击它们，但其他时候，如果您可以通过特权升级或跨AWS账户访问某个地方，那么确认与您的客户联系人后，这可能是值得的。
- en: When we are done with that, you could go through the Pacu Lambda data and download
    the code for each Lambda function for local analysis. Once downloaded, you can
    then run static source code security tools on them, such as Bandit for Python,
    to try and discover any inherent weaknesses in the code.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您可以浏览Pacu Lambda数据并下载每个Lambda函数的代码进行本地分析。下载后，您可以运行静态源代码安全工具，例如Python的Bandit，尝试发现代码中的任何固有弱点。
- en: After an automated and manual review of the code, if you discovered any potential
    vulnerabilities, now would be the time to exploit them to confirm the findings.
    If you see that a Lambda function gets triggered by S3 and then places user-controllable
    data into an unsafe operating system command, you could use this to gain remote-code
    execution on the Lambda function to steal the IAM credentials of the attached
    IAM role.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在对代码进行自动化和手动审查后，如果发现了潜在的漏洞，现在就是利用它们来确认发现的时候。如果您发现一个Lambda函数由S3触发，然后将用户可控数据放入不安全的操作系统命令中，您可以使用此方法在Lambda函数上实现远程代码执行，以窃取附加IAM角色的IAM凭据。
- en: Getting past authentication in RDS
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在RDS中通过身份验证
- en: With the correct RDS permissions, we can potentially gain full access to any
    RDS database instance in our target account as the administrator user, which would
    grant us full access to the data stored within.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 凭借正确的RDS权限，我们有可能以管理员用户的身份获得对目标账户中任何RDS数据库实例的完全访问权限，这将授予我们对存储在其中的数据的完全访问权限。
- en: 'This attack process can be done manually, or with the `rds__explore_snapshots`
    Pacu module. The goal is to abuse RDS database instance backups to create a new
    copy of the existing databases with our own private access. If we gained access
    to RDS and there was a single instance and no backups, the process would entail
    the following steps:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这种攻击过程可以手动完成，也可以使用`rds__explore_snapshots` Pacu模块。目标是滥用RDS数据库实例的备份，以创建现有数据库的新副本，并具有我们自己的私有访问权限。如果我们获得了对RDS的访问权限，并且只有一个实例且没有备份，那么该过程将包括以下步骤：
- en: Create a snapshot of the running database instance.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建运行中数据库实例的快照。
- en: Restore that snapshot to a new database instance.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将该快照恢复到一个新的数据库实例。
- en: Change the master password of our new database instance to something we know.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们新数据库实例的主密码更改为我们知道的内容。
- en: Change the database to be publicly accessible and modify any security group
    rules to allow us inbound access to the correct ports.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据库更改为公开访问，并修改任何安全组规则以允许我们入站访问正确的端口。
- en: Connect to the database with the credentials we set.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们设置的凭据连接到数据库。
- en: Use something like `mysqldump` to exfiltrate the entire database.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用类似`mysqldump`的工具来外泄整个数据库。
- en: Once connected, it will be a complete copy of the single production database
    in the account, meaning we can do anything we want with it. A good move, depending
    on the amount of data in the database, would be to use a tool like `mysqldump`
    to exfiltrate the SQL database to comb manually or import it into another external
    database that isn't at risk of having access revoked at any point. Make sure to
    delete the snapshot you created of the original database and the database instance
    that you created when you're done; otherwise, you may run up some charges in the
    target account. That could be bad for a few reasons, including making your client
    angry and/or getting your activity caught by billing alerts.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦连接，它将是账户中单个生产数据库的完整副本，这意味着我们可以随心所欲地使用它。根据数据库中的数据量，一个明智的举措是使用类似`mysqldump`的工具将SQL数据库外泄到手动检查或导入到另一个外部数据库，这样就不会有任何访问被撤销的风险。确保在完成时删除您创建的原始数据库的快照和数据库实例；否则，您可能会在目标账户中产生一些费用。这可能有几个原因不好，包括让您的客户生气和/或被计费警报捕捉到您的活动。
- en: 'It is a simple process to do manually, but often it will be a better decision
    to automate, so that you don''t make any manual mistakes and screw up a production
    database in the process. You can simply run the following Pacu command to automate
    most of the process for all database instances (use the `--region`s flag for specific
    regions):'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个可以手动完成的简单过程，但通常最好自动化，这样您就不会在过程中犯任何手动错误并搞砸生产数据库。您可以简单地运行以下Pacu命令来自动化大部分数据库实例的过程（使用`--region`标志指定特定区域）：
- en: '[PRE16]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](img/067a9c2b-06f5-40a3-8683-768393a778c7.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![](img/067a9c2b-06f5-40a3-8683-768393a778c7.png)'
- en: Part of the output from the `rds__explore_snapshots` module
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`rds__explore_snapshots`模块的一部分输出'
- en: The preceding screenshot shows part of the output from the `rds__explore_snapshots`
    module. It will scan the regions you specify for RDS instances, give you their
    names, and then prompt you to copy it or not. If you select yes, it will create
    a snapshot of that database, restore that snapshot to a new database, modify the
    master password, and then provide you with the connection credentials. Then, you
    can go about dumping the database with something like `mysqldump` or grabbing
    specific data you require from within the DB. After that, you would press *Enter*
    in Pacu to move on to the next database that's available, to which the module
    would then delete the database snapshot and database instance that it just created.
    If the module fails at all during any of its processes, it will try to clean up
    any outstanding resources from previous runs when you run it again. That way,
    you don't need to worry about deleting any resources that you created for your
    attack.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了`rds__explore_snapshots`模块的部分输出。它将扫描您指定的区域以查找RDS实例，给出它们的名称，然后提示您是否要复制它。如果选择是，它将创建该数据库的快照，将该快照恢复到一个新的数据库，修改主密码，然后提供连接凭据。然后，您可以使用`mysqldump`之类的工具转储数据库，或者从数据库中获取您需要的特定数据。之后，您可以按*Enter*键在Pacu中继续进行下一个可用的数据库，然后该模块将删除它刚刚创建的数据库快照和数据库实例。如果模块在任何过程中出现故障，它将尝试清理之前运行时留下的任何未完成的资源。这样，您就不需要担心删除为攻击创建的任何资源。
- en: Another interesting point about this attack on RDS is that modifying the master
    password is lumped in with a whole bunch of other configuration changes, so it
    isn't necessarily a highly monitored API call. It uses the RDS `ModifyDbInstance`
    API to change the master password, but that same API is also used to modify networking
    settings, monitoring settings, authentication settings, logging settings, and
    a lot more.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 关于对RDS的这次攻击的另一个有趣的点是，修改主密码与一大堆其他配置更改捆绑在一起，因此并不一定是一个高度监控的API调用。它使用RDS的`ModifyDbInstance`
    API来更改主密码，但同样的API也用于修改网络设置、监控设置、认证设置、日志设置等等。
- en: The authenticated side of S3
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: S3的认证方面
- en: There is already plenty of research out there regarding AWS S3, but from the
    authenticated side of things, it is a little bit different. When moving into S3
    during the exploitation phase, most of the process is built around identifying
    public resources (buckets/objects) that shouldn't be, but it is also more than
    that. It is time to review automation built around S3 and to see how it is exploitable,
    and it also is time to review the contents of the various buckets to see if you
    can gain further access from what you find.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 关于AWS S3已经有大量的研究，但从认证方面来看，情况有所不同。在利用阶段进入S3时，大部分过程都围绕着识别不应该公开的公共资源（存储桶/对象），但它不仅仅是如此。现在是时候审查围绕S3构建的自动化，并看看它是否可以被利用，也是时候审查各种存储桶的内容，看看你是否可以从中获得进一步的访问权限。
- en: It can be helpful for a client to know that their developers have access to
    the X, Y, and Z S3 buckets, and that you found a private SSH key stored in bucket
    Y, which then led to the compromise of an EC2 instance, which provided further
    AWS credentials, and so on. Clients not following the principal of least privilege
    will often be open to a wide range of attacks, especially within S3.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 客户知道他们的开发人员可以访问X、Y和Z的S3存储桶可能会有所帮助，你发现存储在Y存储桶中的私有SSH密钥导致了EC2实例的受损，进而提供了更多的AWS凭证等等。不遵循最小权限原则的客户往往会面临各种攻击，特别是在S3中。
- en: When reviewing files stored in S3, it will often take far too long to look at
    every file in every bucket, so it's best to prioritize what you are looking for.
    Often, bucket, file, and folder names will be the best indicator of whether a
    file is worth viewing or not. Something like `names.txt` would likely not be worth
    your time, but something like `backup.sql` would be worth your time. Typically,
    it is best to scour these files for credentials, API keys, customer data, or anything
    sensitive, really. You could use this data to show privilege escalation paths,
    cross-account compromise attacks, and anything else, depending on what kind of
    data it is that you find. Maybe it grants you access to their corporate website,
    or maybe their internal VPN. There are endless possibilities and it all just depends
    on what you find.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查存储在S3中的文件时，通常需要花费太长时间来查看每个存储桶中的每个文件，因此最好优先考虑您要寻找的内容。通常，存储桶、文件和文件夹名称将是判断文件是否值得查看的最佳指标。像`names.txt`这样的文件可能不值得您的时间，但像`backup.sql`这样的文件可能值得您的时间。通常，最好搜查这些文件以查找凭据、API密钥、客户数据或任何敏感内容。您可以使用这些数据来显示权限升级路径、跨账户妥协攻击等等，具体取决于您找到的数据类型。也许它为您提供了访问他们企业网站的权限，或者他们内部VPN的权限。可能性是无穷无尽的，这一切取决于您找到了什么。
- en: When looking for public resources, it is best to alert the client of all findings,
    even if the content is not sensitive. If an entire bucket is set to public, someone
    may inadvertently upload a file that isn't supposed to be public, or if the bucket
    is publicly listable, a user who finds the bucket name would be able to enumerate
    every file within the bucket. It is important to note that even if the files in
    the bucket need to be public, the bucket does not need to be publicly listable.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在寻找公共资源时，最好通知客户所有发现，即使内容并不敏感。如果整个存储桶设置为公开，某人可能会不小心上传一个不应该公开的文件，或者如果存储桶是公开可列出的，找到存储桶名称的用户将能够枚举存储桶中的每个文件。重要的是要注意，即使存储桶中的文件需要公开，存储桶也不需要公开可列出。
- en: When reviewing automation that was built around S3, it is best to check for
    S3 events and logging on each bucket. This way, you can see how they are acting
    (or not) on activity within their private buckets.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查围绕S3构建的自动化时，最好检查每个存储桶上的S3事件和日志记录。这样，你可以看到它们如何对其私有存储桶中的活动做出反应（或不做出反应）。
- en: S3 bucket and filenames can also be helpful as a type of recon within the environment.
    Often, you can discover that certain AWS services are being used within the account
    just based on S3 bucket names. Many services and functions will auto-create S3
    buckets with templated names, so it is simple to make the correlation in that
    situation.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: S3存储桶和文件名也可以作为环境内的一种类型的侦察。通常，您可以根据S3存储桶名称发现账户内正在使用某些AWS服务。许多服务和功能将自动创建具有模板名称的S3存储桶，因此在这种情况下很容易进行相关性分析。
- en: Auditing for compliance and best practices
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合规审计和最佳实践
- en: 'In addition to the flat-out exploitation of AWS services and resources, it
    is also important to provide your client with a general security audit in as many
    locations as you can. These types of checks typically fall into a small set of
    categories:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 除了对AWS服务和资源的直接利用之外，还重要的是在尽可能多的位置为您的客户提供一般的安全审计。这些类型的检查通常属于一小组类别：
- en: '**Public access**:'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公共访问**：'
- en: Can X be accessed publicly? Should that be possible?
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: X是否可以公开访问？这是否应该是可能的？
- en: '**Encryption**:'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加密**：'
- en: Is Y encrypted at-rest? Is Z encrypted in-transit?
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Y是否在静止状态下加密？Z是否在传输中加密？
- en: '**Logging**:'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志**：'
- en: Are logs enabled for C? Is anything being done with those logs?
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C的日志是否已启用？是否对这些日志进行了处理？
- en: '**Backups**:'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**备份**：'
- en: Is D being backed up? How often?
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D是否已备份？备份频率如何？
- en: '**Other security controls**:'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**其他安全控制**：'
- en: Is MFA being used?
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否使用MFA？
- en: Password policy strength?
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码策略强度？
- en: Deletion protection on the right resources?
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对正确的资源进行删除保护？
- en: Of course, there is more to it than just those few, but generally these are
    the most common types of findings.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，除了这几个之外，还有更多内容，但通常这些是最常见的发现类型。
- en: 'There are already many tools out there to provide this kind of insight into
    an environment, including the following:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 已经有许多工具可以提供对环境的这种洞察，包括以下内容：
- en: Prowler
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Prowler
- en: Security Monkey
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Security Monkey
- en: Scout2/ScoutSuite
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scout2/ScoutSuite
- en: There are many others, as well, and they all do something a little different
    than the next one, so it can often be a personal choice as to which one you end
    up using.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他工具，它们都与下一个工具有些不同，因此最终选择使用哪一个通常是个人选择。
- en: Summary
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: AWS pentesting is an extensive process that requires a wide variety of knowledge
    and dedication, and it really is a never-ending process. There are always new
    services and functionality being released by AWS, so there will always be new
    security checks and attacks for those services.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: AWS渗透测试是一个需要广泛知识和奉献精神的复杂过程，而且它确实是一个永无止境的过程。AWS始终会发布新的服务和功能，因此对于这些服务总会有新的安全检查和攻击。
- en: As a pentester, it is difficult to be able to say you are done pentesting an
    AWS environment because of how massive and complicated they can be, so it is important
    to hit as many different services and attacks as possible, all while staying within
    the timeline that you agreed upon with your client.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 作为渗透测试人员，很难说您已经完成了对AWS环境的渗透测试，因为它们可能是如此庞大和复杂，因此重要的是尽可能攻击尽可能多的不同服务，同时要在您与客户达成的时间表内完成。
- en: Every real-world pentest that you do will likely vary greatly from the previous
    one. With the size and complexity of AWS and its offerings, people will be doing
    things differently wherever you go, so it is important to never get comfortable
    and instead always expect to be learning, teaching, and succeeding.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 您进行的每次真实世界渗透测试可能会大不相同。由于AWS及其提供的规模和复杂性，人们在任何地方都会以不同的方式进行操作，因此重要的是永远不要感到舒适，而是始终期望学习、教导和取得成功。
- en: We hope that what you have learned in this chapter about real-world AWS penetration
    testing can help you in your own work and move the entire AWS security community
    forward. We covered the initial pentest kickoff and unauthenticated plus authenticated
    reconnaissance, including enumeration of our permissions. Then, we moved on to
    escalating those permissions through IAM misconfigurations, where we then used
    our elevated access to establish a means of persistence in the environment. After
    our access was secured, we moved on to the general post-exploitation of AWS services,
    where all the real magic happens. Beyond that, we took a short look at how to
    go about identifying and aggregating compliance and best practice checks to provide
    a thorough, useful report to our clients.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望您在本章关于真实世界的AWS渗透测试中所学到的内容可以帮助您在自己的工作中推动整个AWS安全社区向前发展。我们涵盖了初始渗透测试启动以及未经身份验证和经过身份验证的侦察，包括枚举我们的权限。然后，我们继续通过IAM配置错误来提升这些权限，然后使用我们提升的访问权限在环境中建立持久性手段。在我们的访问权限得到保障后，我们继续进行AWS服务的一般后渗透，这是真正的魔术发生的地方。除此之外，我们简要介绍了如何识别和汇总合规性和最佳实践检查，以向我们的客户提供全面有用的报告。
- en: AWS pentesting is a fun, complicated process that can only be expanded on, so
    now we need you to get out there and contribute your knowledge and experience
    to create a safe AWS experience for all of the users out there.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: AWS渗透测试是一个有趣而复杂的过程，只能不断扩展，所以现在我们需要您走出去，贡献您的知识和经验，为所有用户创造一个安全的AWS体验。
