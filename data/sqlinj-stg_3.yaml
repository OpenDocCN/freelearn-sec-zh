- en: '*Chapter 6*: Putting It All Together'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第6章*：将所有内容整合'
- en: Here we are, finally, at the end of our journey of going through the secrets
    of SQL injection. By now, you have experienced what SQL injection is, what it
    implies in the context of an application or a more complex system, what consequences
    can be brought to security in case of such an oversight, and what countermeasures
    can be taken in order to mitigate or totally prevent its effects from happening.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到这里，我们终于走到了探索SQL注入秘密的旅程的尽头。到现在为止，你已经体验过SQL注入是什么，它在应用程序或更复杂系统中的含义，它可能对安全性带来的后果，以及为减轻或完全防止其影响所能采取的对策。
- en: This final chapter serves as an overall review of what you learned by reading
    this book. It will do this by summarizing and analyzing what we've seen in brief,
    hoping to put everything into a critical perspective while also considering the
    broader implications not only of SQL injection, but also security vulnerabilities
    in general, in a world that is always relying on information technology and data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是对你通过阅读本书所学内容的总体回顾。它将通过简要总结和分析我们所见的内容来实现这一点，希望能够从批判性的角度审视一切，同时考虑到不仅是SQL注入的更广泛影响，还有在一个始终依赖信息技术和数据的世界中，安全漏洞的一般性问题。
- en: The aim is to, besides helping you to briefly go through this book's content
    in terms of knowledge and practice in a structured and easy-to-follow manner,
    provide you with food for thought and give all of these notions a deeper meaning
    through critically examining them. This book, after all, is meant for mastering
    SQL injection, not only from a technical standpoint but also by knowing exactly
    what it is all about.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 其目标不仅是帮助你以结构化且易于跟随的方式简要回顾本书的知识和实践内容，还通过批判性地审视这些概念，为你提供思考的空间，并赋予这些概念更深层次的意义。毕竟，本书的目的是掌握SQL注入，不仅从技术角度，还要确切地了解它的含义。
- en: 'This chapter covers the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: '**SQL injection – theory in perspective**: In this section, the theory aspects
    of SQL injection will be summarized, with the main concepts behind SQL injection
    being described, with comments also being provided.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQL注入——理论视角**：在这一部分，将总结SQL注入的理论方面，描述SQL注入背后的主要概念，并提供相关评论。'
- en: '**SQL injection – practice in perspective**: Here, the more practical aspects
    will be described in short and discussed, especially in terms of meaning and implications.
    We will also highlight real-world aspects related not only to SQL injection testing
    and countermeasures, but also more in general with respect to vulnerabilities.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQL注入——实践视角**：在这里，我们将简要描述并讨论更实用的方面，尤其是从含义和影响的角度。我们还将突出与现实世界相关的方面，不仅涉及SQL注入的测试和对策，还包括更普遍的漏洞问题。'
- en: '**SQL injection and security implications – final comments**: Finally, some
    additional, final comments will help you focus on the real objective of this book
    and what it means to be a cyber security professional in order to spark your interest
    in this enticing path.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQL注入和安全影响——最终评论**：最后，一些额外的最终评论将帮助你专注于本书的真正目标，并理解成为网络安全专家意味着什么，以此激发你对这一诱人领域的兴趣。'
- en: SQL injection – theory in perspective
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL注入——理论视角
- en: Summarizing all the theory aspects we examined in the first part of this book
    may seem quite difficult. Here, we will provide an overview of what we have covered
    in the same order in which we encountered them.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 总结我们在本书第一部分中讨论的所有理论方面可能看起来有些困难。在这里，我们将按照我们遇到这些内容的顺序概述我们所覆盖的内容。
- en: SQL injection in general
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一般的SQL注入
- en: Let's first recap what SQL injection is and why it exists. SQL injection is
    caused inherently by SQL, which is a language responsible for interacting with
    relational database models. SQL is a very powerful language that's capable of
    performing a wide array of actions, including creating (**CREATE**) and inserting
    (**INSERT**) information within a database, deleting (**DROP** for tables and
    databases, **DELETE** for single entries), modifying (**ALTER**) or, much more
    commonly in an application setting, just selecting and querying (**SELECT**) its
    content with many different options. SQL injection allows malicious users to inject,
    within an existing operation, operations into the database that were not originally
    envisioned by the design of the application, possibly leading to harmful commands.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们回顾一下什么是SQL注入，以及它为什么存在。SQL注入本质上是由SQL引起的，SQL是一种负责与关系型数据库模型交互的语言。SQL是一种非常强大的语言，能够执行广泛的操作，包括在数据库中创建（**CREATE**）和插入（**INSERT**）信息，删除（**DROP**用于表和数据库，**DELETE**用于单条记录），修改（**ALTER**）或者在应用程序中更常见的，只是选择和查询（**SELECT**）其内容，并提供许多不同的选项。SQL注入允许恶意用户在现有操作中注入原本未被应用程序设计所预见的操作，可能会导致有害的命令。
- en: The most common uses of SQL injection can range from making reserved information
    available to malicious users, including sensitive information such as access credentials
    or personal information, to directly exploiting the application logic, thereby
    bypassing authentication checks without inserting any credentials at all. This
    includes modifying the database without the consent of the owner, which could
    possibly lead to rendering the application unusable by irremediably damaging its
    functionality (for example, by deleting the table containing all access information,
    or even critical information for the correct functionality of the application).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: SQL注入的常见用途包括让恶意用户获取本应保密的信息（例如访问凭证或个人信息），以及直接利用应用程序逻辑，绕过身份验证检查，甚至无需插入任何凭证。这还包括在未征得所有者同意的情况下修改数据库，可能导致通过不可修复的方式破坏应用程序功能（例如，删除包含所有访问信息的表，或删除对应用程序正常运行至关重要的信息），从而使应用程序无法使用。
- en: 'While different SQL-based database systems exist (such as MySQL, SQLite, Oracle
    Database, and Microsoft SQL Server), from a user''s perspective, they only differ
    in terms of the syntax of the queries. In some cases, some characters are reserved
    for different purposes (such as commenting), while some built-in functions can
    vary from one implementation to another. In any case, the logic behind their functionality
    is mostly the same – think of their query language as some kind of local dialect
    of the same language: SQL.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在不同的基于SQL的数据库系统（例如MySQL、SQLite、Oracle数据库和Microsoft SQL Server），从用户的角度来看，它们的主要区别仅在于查询语法。在某些情况下，一些字符被保留用于不同的目的（例如注释），而某些内置函数可能会因实现不同而有所差异。无论如何，它们的功能背后的逻辑大致相同——可以将它们的查询语言视为同一种语言：SQL的地方方言。
- en: SQL is the main tool applications have to interact with a supported database
    system. SQL injection is a software vulnerability since the malicious payloads
    are injected at the application level, bypassing the limited set of operations
    that are usually allowed by the software. The database will only evaluate SQL
    code that is sent to it, so we can say that SQL injection, while being possible
    thanks to the possibilities offered by SQL itself, it's not a database problem.
    Instead, applications should contain security controls that ensure that the only
    operations performed on linked databases are the only ones defined by design,
    according to the application design requirements.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: SQL是应用程序与支持的数据库系统进行交互的主要工具。SQL注入是一种软件漏洞，因为恶意负载是在应用层注入的，绕过了通常由软件允许的有限操作集。数据库只会评估发送给它的SQL代码，因此我们可以说，尽管SQL注入是由于SQL本身提供的可能性而变得可能，但这并不是一个数据库问题。相反，应用程序应该包含安全控制，确保在连接的数据库上执行的操作仅限于设计时定义的操作，符合应用程序设计要求。
- en: Some of the design principles that, if applied to the development of applications
    interacting with SQL databases, could avoid SQL injection usually involve treating
    query content correctly; for example, by suppressing dangerous characters and
    commands. In general, the application should enforce a strict control of what
    is possible to a user.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一些设计原则，如果在与 SQL 数据库交互的应用程序开发中得到应用，可以避免 SQL 注入，这些原则通常涉及正确处理查询内容；例如，抑制危险的字符和命令。一般来说，应用程序应严格控制用户能够执行的操作。
- en: SQL injection attack techniques
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL 注入攻击技术
- en: In terms of specific attack techniques, SQL injection can offer potential attackers
    various ways to play with a database and alter its functionality. Let's talk about
    the most common ones individually.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 就具体的攻击技术而言，SQL 注入可以为潜在攻击者提供多种方式来操作数据库并改变其功能。让我们逐一讨论最常见的几种方法。
- en: Damaging application functionality
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 破坏应用程序功能
- en: An attacker could use SQL injection to perform arbitrary commands on the database
    by concatenating any possible SQL command to an existing query string, then using
    the semicolon to terminate statements. A very simple but destructive case would
    be using a **DROP** statement, or modifying information in a database, such as
    login information, which could be vital for the application's functionality. These
    totally arbitrary commands are, however, in most cases, ineffective as SQL usually
    supports a single query at a time. Multiple queries, such as inline queries, tend
    not to be supported, thus hindering this type of attack.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以通过 SQL 注入，利用连接任意 SQL 命令到现有查询字符串的方式，执行任意数据库命令，并通过分号来结束语句。一种非常简单但具有破坏性的情况是使用
    **DROP** 语句，或者修改数据库中的信息，如登录信息，这可能对应用程序的功能至关重要。然而，这些完全任意的命令在大多数情况下是无效的，因为 SQL 通常一次只支持一个查询。多条查询（如内联查询）通常不被支持，从而限制了这种类型的攻击。
- en: However, if the application already supports statements that can alter the database's
    content, these commands could be altered to cause serious harm to the application.
    Think of what could happen if an operation intended to delete a single user deletes
    all the users in a database instead. This is, however, quite uncommon since well-designed
    applications tend to mostly use **SELECT** statements. However, these can also
    be exploited.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果应用程序已经支持可以修改数据库内容的语句，这些命令可能会被修改，导致应用程序遭受严重破坏。想象一下，如果一个原本打算删除单个用户的操作，结果却删除了数据库中所有的用户。那么，这种情况虽然不常见，因为设计良好的应用程序通常主要使用
    **SELECT** 语句，但这些语句仍然有可能被利用。
- en: SQL injection using UNION queries
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 **UNION** 查询的 SQL 注入
- en: '**UNION** is a SQL clause that can be added to existing **SELECT** statements
    to return results from another query within the same output of the first one.
    To do so, the two queries need to have the same number of attributes. However,
    an attacker can easily exploit this by adding arbitrary static values, such as
    fixed numbers, and proceeding with a trial-and-error approach.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**UNION** 是一种 SQL 子句，可以添加到现有的 **SELECT** 语句中，从另一个查询返回结果，并将其包含在第一个查询的输出中。要做到这一点，两个查询需要具有相同数量的属性。然而，攻击者可以通过添加任意的静态值，如固定数字，并采取试错法来轻松利用这一点。'
- en: SQL injection using **UNION** can be used to gather a huge deal of information
    from a vulnerable database. The database schema itself, which can usually be accessed
    thanks to some default tables, can be queried to get information about databases
    within the system, tables, and table fields, thus disclosing what type of information
    is contained within a database. The resulting information can be used to directly
    query the database, providing the attacker with some sort of a blueprint for conducting
    successive information gathering attempts. The potential of **UNION** queries
    differs from database to database. In some cases, they can be used to retrieve
    a much larger set of information than the database being used by a single application,
    especially in MySQL and MSSQL, as many databases can be queried all at once if
    the target system hosts many database-reliant applications on it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **UNION** 的 SQL 注入可以用来从一个易受攻击的数据库中收集大量信息。数据库模式本身，通常可以通过一些默认的表访问，能够查询到系统内的数据库、表格和表字段等信息，从而揭示数据库中包含的各种信息。这些结果可以直接用于查询数据库，为攻击者提供某种信息收集的蓝图，帮助其进行后续的攻击。**UNION**
    查询的潜力因数据库而异。在某些情况下，它们可以用于检索比单个应用程序使用的数据库更多的信息，尤其是在 MySQL 和 MSSQL 中，由于许多数据库可以同时查询，如果目标系统托管了多个依赖数据库的应用程序。
- en: Escalating privileges
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提权
- en: SQL injection can also be used by malicious users to gain higher privileges
    than they normally would have access to, thus being able to abuse otherwise inaccessible
    application functionalities.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意用户还可以通过 SQL 注入来获得比通常情况下更高的权限，从而能够滥用本来无法访问的应用程序功能。
- en: Using information gathering techniques, such as **UNION** queries, can allow
    malicious users to extract information from the database, which can sometimes
    lead to password disclosure. Login information, in fact, is usually stored within
    specific parts of the database. It's common practice to store password information
    as password hashes only, but those might be decrypted by password attacks, even
    offline, if weak hashing algorithms such as MD5 are used. In some cases, authentication
    could be directly bypassed by including an always true Boolean expression as the
    logical check used for the login process.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用信息收集技术，如**UNION** 查询，可以让恶意用户从数据库中提取信息，这有时可能导致密码泄露。实际上，登录信息通常存储在数据库的特定部分。通常，密码信息以密码哈希的形式存储，但如果使用像
    MD5 这样的弱哈希算法，密码攻击即使在离线状态下也可以将其解密。在某些情况下，身份验证可能通过直接包含一个始终为真的布尔表达式来绕过，这个布尔表达式用于登录过程中的逻辑检查。
- en: Blind SQL injection
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 盲 SQL 注入
- en: One of the most common SQL attack techniques is called blind SQL injection.
    The name stems from the fact that, sometimes, the operations performed on the
    database do not return the database query output in the application, so an attacker
    is left on their own in guessing the database's contents. All the previous techniques
    that do not display the full query result, including authentication bypassing,
    can be technically included in this definition, but there are many other techniques
    in this category.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的 SQL 攻击技术之一被称为盲 SQL 注入。这个名字源于这样的事实：有时对数据库执行的操作不会在应用程序中返回数据库查询结果，因此攻击者只能自己猜测数据库的内容。所有不显示完整查询结果的技术，包括绕过身份验证的技术，技术上都可以包含在这个定义中，但这一类别中还有许多其他技术。
- en: In some cases, an application that's vulnerable to SQL injection, despite not
    showing actual query results, can present differences if query results exist or
    not. This is generally linked to satisfying a specific Boolean condition. In this
    case, we are talking about Boolean-based SQL injection since an attacker could
    use this information to conduct inference on the database content by using Boolean
    conditions to their advantage.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，尽管一个易受 SQL 注入攻击的应用程序不会显示实际的查询结果，但如果查询结果存在与否，可能会显示差异。这通常与满足特定的布尔条件相关联。在这种情况下，我们讨论的是基于布尔的
    SQL 注入，因为攻击者可以利用这些信息，通过使用布尔条件来推断数据库内容。
- en: There are, however, cases in which the application does not show any difference
    between a successful and an unsuccessful query. In this case, using Boolean-based
    SQL injection does not provide any value to the attacker. However, malicious users
    could find ways to generate such differences in application output. The most common
    way to do this is by adding a time delay in case an arbitrary condition is fulfilled.
    In this case, we are talking about time-based SQL injection.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，也有一些情况，应用程序在成功查询和失败查询之间没有任何差异。在这种情况下，使用基于布尔的 SQL 注入对攻击者没有任何价值。然而，恶意用户可能会找到方法来生成这种差异，最常见的方式是通过添加时间延迟来实现，当某个任意条件得到满足时。在这种情况下，我们讨论的是基于时间的
    SQL 注入。
- en: Finally, another technique in the spectrum of blind SQL injection is called
    **splitting and balancing**. The goal is to check whether, using equivalent SQL
    queries, the SQL code is evaluated by the system. In this case, the attacker could
    also insert arbitrary sub-queries in the same structure, still ensuring that the
    syntax is correct, thus performing potentially dangerous commands.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，盲 SQL 注入的另一种技术被称为**拆分与平衡**。其目标是检查使用等效的 SQL 查询时，SQL 代码是否被系统评估。在这种情况下，攻击者还可以在相同结构中插入任意子查询，确保语法正确，从而执行潜在的危险命令。
- en: NoSQL injection
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NoSQL 注入
- en: Finally, it is worth mentioning that despite SQL injection being the most common
    case of database injection, this vulnerability can also be of interest in terms
    of non-relational databases.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，值得一提的是，尽管 SQL 注入是最常见的数据库注入案例，但在非关系型数据库中，这个漏洞也可能具有一定的意义。
- en: While databases, in fact, do not always rely on query languages that provide
    the same possibilities with respect to SQL, and usually they are considered more
    secure than SQL itself, some arbitrary commands could be injected at the application
    level. These may be evaluated by the database, leading to potentially harmful
    operations.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，尽管数据库并不总是依赖于提供与SQL相同可能性的查询语言，通常被认为比SQL本身更安全，但一些任意命令可能会在应用程序级别被注入。这些命令可能会被数据库评估，导致潜在的有害操作。
- en: In the case of NoSQL databases, this is referred to as NoSQL injection. Despite
    the fact the many of the various techniques we have discussed do not concern NoSQL
    databases (for example, database dumping with **UNION** queries and the use of
    complex arbitrary statements), some of the command semantics can be altered at
    will by attackers who are able to place input in the application. In general,
    a malicious user can tamper with NoSQL databases by inserting, within parameters,
    elements that can alter the syntax and trick the underlying database into evaluating
    unexpected values, which could result in harmful behavior.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在NoSQL数据库的情况下，这被称为NoSQL注入。尽管我们讨论的许多技术并不涉及NoSQL数据库（例如，使用**UNION**查询进行数据库转储和使用复杂的任意语句），但攻击者可以通过在应用程序中放置输入来随意更改一些命令语义。一般来说，恶意用户可以通过在参数中插入元素来篡改NoSQL数据库的语法，并欺骗底层数据库评估意外值，这可能导致有害行为。
- en: SQL injection and other security flaws
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL注入和其他安全漏洞
- en: SQL injection sure is an interesting topic, especially considering the inner
    workings that make it possible, as it shines the light on a much broader problem.
    SQL injection is, in fact, a specific type of software vulnerability that concerns
    applications that interact, in some form or another, with databases. The presence
    of such a vulnerability triggers an unexpected behavior that can result in damaging
    consequences, not only to the applications but more generally to the world around
    it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: SQL注入确实是一个有趣的话题，特别是考虑到使其可能的内部运作方式，因为它揭示了一个更广泛问题。SQL注入实际上是一种特定类型的软件漏洞，涉及与数据库以某种形式互动的应用程序。这种漏洞的存在会触发意外行为，可能导致损害性后果，不仅仅是对应用程序本身，更普遍地影响周围的世界。
- en: Let's take a look at an example. Think of an application that allows, for authenticated
    individuals, access to sensitive information such as personally identifying information,
    physical addresses, and even social security numbers or other details a person
    would not normally disclose to anybody. Through SQL injection, an attacker has
    obtained all the information included in the database, while also deleting it.
    In this case, not only is the application damaged, but also all the people such
    data belongs to. The malicious attacker could disclose the content of such a database
    on the internet, exposing these people to any malicious person that could, in
    turn, make use of this information any way they like –this includes consequences
    that could range from harassment to fraud, or even direct persecution. Public
    data can be used by anybody, regardless of their intentions, so it is key to keep
    data secure, without leaking any more information than strictly necessary, in
    order to avoid such consequences.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子。想象一个允许经过身份验证的个人访问敏感信息的应用程序，例如个人身份信息、物理地址，甚至社会安全号码或其他一个人通常不会向任何人透露的细节。通过SQL注入，攻击者已经获取了数据库中包含的所有信息，并将其删除。在这种情况下，不仅应用程序受损，还有所有这些数据所属的人。恶意攻击者可以在互联网上披露这种数据库的内容，将这些人暴露给任何可能利用这些信息的恶意人士，这可能导致从骚扰到欺诈，甚至直接迫害的后果。公共数据可以被任何人使用，无论他们的意图如何，因此保持数据安全，不泄霩比严格必要的信息更多，以避免这些后果是至关重要的。
- en: Data in today's world is always a critical asset. Many people have already,
    unknowingly, given access to their personal information to various entities on
    the internet, which mostly use this information for commercial advantage by way
    of targeted advertisements. This information is also used to direct people to
    content they may like.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在当今世界，数据始终是一项关键资产。许多人已经在不知情的情况下向互联网上的各种实体提供了他们的个人信息访问权限，这些实体主要通过定向广告来利用这些信息获得商业优势。这些信息也被用来引导人们访问他们可能喜欢的内容。
- en: In a twisted way, this could also be used to force some thoughts and ideas on
    targeted people, thus controlling, even indirectly, their way of thinking and
    acting. This is just an example to give you a glimpse into how data is important,
    and how anybody may consider it valuable, so you should never give too much information
    away to anybody. In this sense, a vulnerability that allows attackers to access
    information that is kept secret on purpose is, of course, much more critical and
    should make everybody worried about it.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 从某种程度上讲，这也可能被用来强加一些思想和观点给目标人群，从而间接控制他们的思维方式和行为。这只是一个例子，让你一窥数据的重要性，以及任何人如何将其视为宝贵，因此你永远不应该对任何人透露过多信息。从这个角度来看，允许攻击者访问故意保密的信息的漏洞，当然是更为关键的，应该让每个人都对此感到担忧。
- en: Many other vulnerabilities exist, and these can possibly lead not only to destructive
    consequences against targeted systems but could also disclose reserved information.
    Most vulnerabilities, if not all, are the result of the sometimes unexpected functionality
    of hardware or software. This may mean a coding bug, issues in terms of managing
    memory within a program, faulty protocols used for connectivity, or minor oversights
    that can result even in critical issues.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他漏洞存在，这些漏洞不仅可能对目标系统造成破坏性后果，还可能泄露保密信息。大多数漏洞（如果不是全部的话）是硬件或软件有时意外功能的结果。这可能意味着编码错误、程序内存管理问题、用于连接的故障协议，或一些小疏忽，这些都可能导致即使是关键性的问题。
- en: One of the reasons why it is necessary to keep all software and firmware updated
    is that, usually, updates are used to fix these issues when they're discovered.
    This does not necessarily mean that updated software does not have any vulnerabilities
    on it, but it ensures that vulnerabilities known at that point are fixed. Since,
    in the case of security vulnerabilities, we are talking about issues that are
    usually not expected, it could happen that vulnerabilities stay undiscovered for
    long periods of time.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 保持所有软件和固件更新的原因之一是，通常情况下，更新是用来修复发现的问题的。这并不一定意味着更新后的软件没有漏洞，但它确保了已知的漏洞在那时得到了修复。由于在安全漏洞的情况下，我们讨论的是通常未曾预见到的问题，因此漏洞可能会长时间未被发现。
- en: 'In this context, information security''s mission is to protect IT environments
    by identifying vulnerabilities, providing countermeasures, and setting protective
    layers around systems to prevent security issues from happening. Information security
    acts in a collaborative effort for anybody involved: vulnerabilities are made
    publicly known as soon as they are discovered in order to warn all people about
    them. This, of course, could, in principle, favor malicious attackers, who could
    obtain this knowledge of possible vulnerabilities and try to exploit it, but this
    risk is irrelevant compared to the possibility that a vulnerability stays secret
    for a long time, possibly known only to some attackers that can exploit it undisturbed.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种背景下，信息安全的使命是通过识别漏洞、提供对策，并在系统周围设置保护层，来保护IT环境，防止安全问题的发生。信息安全是一个协作性的努力，所有相关方都会参与其中：漏洞一旦被发现，就会公开披露，以警告所有人。这当然原则上可能有利于恶意攻击者，他们可能会获取这些潜在漏洞的知识并试图加以利用，但相比漏洞长期保密、仅为某些攻击者所知且能不受干扰地加以利用，这一风险微不足道。
- en: Cases of known vulnerabilities that were not disclosed include some Windows
    vulnerabilities that stayed secret for a long time, allowing some surveillance
    agencies (which I will not mention) to have some kind of a backdoor—a privileged
    means of access—to computers around the world. While this conduct can be arguable,
    the fact that manufacturers and system managers are kept oblivious about such
    vulnerabilities introduces a very high risk in case such secret information is
    exfiltrated unknowingly to those who are in charge of protecting it. Recent examples
    include the vulnerability responsible for making the EternalBlue attack possible,
    which affected Windows systems.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一些已知的未公开漏洞案例包括一些Windows漏洞，这些漏洞长时间未被披露，允许一些监控机构（我不会提及具体名称）在全球范围内拥有某种后门——一种特权访问方式。虽然这种行为可以进行争论，但制造商和系统管理员对这些漏洞一无所知的事实，在这些秘密信息不小心泄露给负责保护它们的人时，带来了极高的风险。最近的例子包括导致EternalBlue攻击可能发生的漏洞，该漏洞影响了Windows系统。
- en: Such vulnerabilities allow malicious attackers to exploit a bug in the **Service
    Message Block** (**SMB**) protocol implementation in Windows, which, if unpatched,
    could lead to executing arbitrary commands on the target machine. This attack
    was devised by the **National Security Agency** (**NSA**) of the United States.
    Information about such an attack and the vulnerability it exploited surfaced in
    2017, shortly after the vulnerability was patched, but it is estimated that the
    NSA knew about it for about 5 years prior. The secrecy of such a vulnerability
    allowed many cyber criminals to exploit it in the years prior to it being patched,
    providing users with a good reason to never keep vulnerability information secret
    – attackers could discover it anyway, and they would never release information
    about it to the public.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这种漏洞使得恶意攻击者能够利用 Windows 中**服务消息块**（**SMB**）协议实现中的漏洞，如果未打补丁，可能会导致在目标机器上执行任意命令。此攻击由美国的**国家安全局**（**NSA**）设计。关于此类攻击和其利用的漏洞的信息在
    2017 年浮出水面，恰逢该漏洞被修补之后，但估计NSA在此之前大约已知晓该漏洞五年之久。该漏洞的保密性使得许多网络犯罪分子在修补之前的几年里就已经利用了这一漏洞，这也为用户提供了一个充分的理由，永远不要将漏洞信息保密——攻击者迟早会发现这个漏洞，而且他们绝不会公开相关信息。
- en: 'Information security''s mission leads to the reason why we looked at practical
    aspects in the second part of this book: testing is one of the key elements in
    finding vulnerabilities so that they can be fixed. Countermeasures are what make
    testing useful, thus allowing vulnerabilities to be effectively remediated. Let''s
    go through this practical part together once again, explaining what we did and
    why.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 信息安全的使命是我们在本书第二部分关注实际方面的原因：测试是发现漏洞并进行修复的关键元素。对策使得测试变得有意义，从而使漏洞能够得到有效修复。让我们再一次回顾这一实践部分，解释我们所做的事情以及背后的原因。
- en: SQL injection – practice in perspective
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL 注入——实践中的视角
- en: For our practical part, we set up a safe environment so that we didn't cause
    problems for any external entities through our testing – this way simulating as
    if we were testing a real system belonging to us – identifying and exploiting
    SQL injection specifically. After dealing with probably the most fun aspect in
    the practical part, we described what can be done to prevent SQL injection from
    happening.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践部分，我们搭建了一个安全的环境，以确保我们的测试不会对外部实体造成问题——这样模拟就像是在测试一个属于我们的真实系统——专注于识别和利用 SQL
    注入漏洞。在处理了实践部分中可能是最有趣的部分之后，我们描述了防止 SQL 注入发生的措施。
- en: Attacking using SQL injection
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 SQL 注入进行攻击
- en: Let's review the tests we performed on the targets we selected and go through
    the techniques we put into practice.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下我们在选择的目标上所进行的测试，并回顾我们实践中的技术。
- en: Manual techniques
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 手动技术
- en: By taking advantage of the OWASP BWA project, we have been able to explore most
    of the attack techniques we have previously seen in the theory section. This was
    made possible by us selecting three specific web applications, against which we
    could try a wide spectrum of SQL injection attacks.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用 OWASP BWA 项目，我们能够探索我们在理论部分中看到的大多数攻击技术。这是通过选择三个特定的网络应用程序来实现的，这些应用程序让我们可以尝试多种
    SQL 注入攻击。
- en: Our first target was the Mutillidae II web application, which is a training
    web application for testing a wide range of known vulnerabilities. Among these,
    SQL injection was present too. We learned how to exploit both **SELECT** statements,
    to retrieve arbitrary information from the database, and **INSERT** statements,
    to make it possible to extract information by creating accounts within the application.
    These accounts have been manipulated to include, within their information, private
    data present in the database.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个目标是 Mutillidae II 网络应用程序，它是一个用于测试各种已知漏洞的培训网络应用程序。其中也包括了 SQL 注入漏洞。我们学习了如何利用**SELECT**语句从数据库中检索任意信息，以及如何通过**INSERT**语句来创建应用程序中的帐户，从而使得可以通过这些帐户提取信息。这些帐户的资料被修改，以包含数据库中存在的私密数据。
- en: With the second target, Magical Code Injection Rainbow, we explored multiple
    SQL injection exercises in the form of challenges. Here, we tested techniques
    such as blind SQL injection and error-based SQL injection and exploited functions
    that can return query results through error messages.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第二个目标，Magical Code Injection Rainbow，我们探索了多个以挑战形式呈现的 SQL 注入练习。在这里，我们测试了盲 SQL
    注入、基于错误的 SQL 注入等技术，并利用可以通过错误信息返回查询结果的函数。
- en: Finally, with Peruggia, we looked at a pseudo-realistic web application that
    was intentionally vulnerable but without hints or guides. One of its vulnerabilities
    was SQL injection. We saw how SQL injection can give malicious users a way to
    bypass login authentication. This technique can also be used as a way to perform
    inference through blind SQL injection since access is only granted if the condition
    is satisfied. This way, by using Boolean checks, it is possible to verify information
    on the database.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过Peruggia，我们查看了一个伪真实的Web应用程序，它故意存在漏洞，但没有任何提示或指南。它的一个漏洞就是SQL注入。我们看到SQL注入如何为恶意用户提供绕过登录认证的方式。这个技术还可以通过盲注SQL注入进行推断，因为只有在条件满足时才会授予访问权限。通过使用布尔检查，可以验证数据库中的信息。
- en: With these manual techniques, we saw the potential of SQL injection and the
    ways to test for this vulnerability in order to assess the security of an application.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些手动技术，我们看到了SQL注入的潜力以及测试这种漏洞的方法，以评估应用程序的安全性。
- en: Automated techniques
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动化技术
- en: Another tool at our disposal is using specific software tools that can help
    in verifying whether an application is vulnerable to SQL injection in an automated
    way, saving time during testing.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用的另一个工具是使用特定的软件工具，这些工具可以帮助自动化地验证一个应用程序是否容易受到SQL注入攻击，从而在测试过程中节省时间。
- en: 'OWASP ZAP is a versatile tool suite for web application security testing and
    includes a variety of tools. Specifically, the Spider tool helps us find web pages
    within an application and set up crawlers that explore hypertextual links within
    the pages, thus discovering dynamic web pages containing web forms. The Scan tool,
    on the other hand, tries various payloads against dynamic pages in an automated
    fashion. This helps us find vulnerabilities, depending on the response it gets
    from the web application: if the output matches a vulnerable response, ZAP registers
    it as a vulnerability. While this is, of course, not completely error-proof, sometimes
    leading to false positives, it definitely helps with efficiency. An additional
    useful tool is the Fuzzer module, which automatically sends web requests by substituting
    a list of set values to a target parameter, thus allowing more targeted tests
    with special user-defined payloads.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP ZAP是一个多功能的Web应用程序安全测试工具套件，包含多种工具。具体而言，Spider工具帮助我们在应用程序中查找网页，并设置爬虫来探索页面中的超文本链接，从而发现包含Web表单的动态网页。另一方面，Scan工具以自动化的方式针对动态页面尝试各种有效载荷。这有助于我们发现漏洞，依据Web应用程序的响应：如果输出与易受攻击的响应匹配，ZAP会将其记录为漏洞。当然，这并非完全无误，有时会导致误报，但它确实提高了效率。另一个有用的工具是Fuzzer模块，它通过将一组预设值替换到目标参数中，自动发送Web请求，从而进行更有针对性的测试，使用用户定义的特殊有效载荷。
- en: sqlmap is another important tool that, thanks to its options, can help in identifying
    the SQL injection vulnerability on a target web page. Various customization options
    are available that allow many different attack techniques to be implemented, which
    also generate database dumps. sqlmap also has the functionality to crack password
    hashes, which can be retrieved from the database dumps.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: sqlmap是另一个重要工具，凭借其选项，它可以帮助识别目标网页上的SQL注入漏洞。提供了各种自定义选项，可以实现多种不同的攻击技术，还可以生成数据库转储。sqlmap还具有破解密码哈希的功能，这些密码哈希可以从数据库转储中获取。
- en: Both tools are used by security professionals worldwide and can help make testing
    for SQL injection much more efficient and less time-consuming. Of course, these
    are not a substitute for manual tests, but they are usually enough for us to tell
    if a web application is vulnerable to SQL injection or not.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个工具被全球的安全专业人员使用，可以帮助大大提高SQL注入测试的效率，减少时间消耗。当然，这些工具不能替代手动测试，但通常足以帮助我们判断一个Web应用程序是否容易受到SQL注入攻击。
- en: SQL injection against web services and mobile applications
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 针对Web服务和移动应用程序的SQL注入
- en: Finally, for our SQL injection testing, we added tests against web services
    and mobile applications that can define a huge range of possible scenarios. Web
    services, in fact, can be responsible for simple applications based on web services
    that contain lightweight logic. This is particularly true for mobile applications,
    which usually represent an interface for remote web services, and IoT scenarios,
    which are usually quite simple in terms of their implementation and encourage
    low computationally intensive devices to interact through these.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在我们的 SQL 注入测试中，我们增加了针对 Web 服务和移动应用程序的测试，这可以定义大量可能的场景。事实上，Web 服务可能负责基于 Web
    服务的简单应用程序，这些应用程序包含轻量级逻辑。对于移动应用程序尤其如此，它们通常代表远程 Web 服务的接口，而物联网场景通常在实现上相当简单，鼓励低计算强度的设备通过这些服务进行交互。
- en: We looked at these to prove that SQL injection does not only interest web applications,
    but also any kind of application that relies, in some way, on a SQL database.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们研究了这些，旨在证明 SQL 注入不仅仅与 Web 应用程序有关，而是与任何依赖 SQL 数据库的应用程序相关。
- en: After these tests, we moved on to the defensive side in terms of SQL injection,
    that is, evaluating possible countermeasures.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行这些测试后，我们转向了 SQL 注入的防御方面，即评估可能的对策。
- en: Defending against SQL injection
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防御 SQL 注入
- en: In terms of defense, generally speaking, it's all about checking and applying
    controls to the input and the output of an application. After all, attacking an
    application usually consists of sending malicious input. As we have seen with
    SQL injection, the principle is always the same. First, input coming from users
    needs to be considered as potentially malicious so that we can start thinking
    about security measures we can apply.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 从防御的角度来看，通常来说，这一切都涉及对应用程序的输入和输出进行检查和控制。毕竟，攻击一个应用程序通常是通过发送恶意输入来实现的。正如我们在 SQL
    注入中看到的，原则总是相同的。首先，来自用户的输入需要被视为潜在的恶意输入，这样我们才能开始思考可以应用的安全措施。
- en: In this book, we examined defense mechanisms based on where we intend to apply
    them and then divided them into code-level and platform-level defenses, depending
    on whether we were acting on the actual coding of the application or the infrastructure
    around it.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们根据防御机制的应用场景进行了讨论，并将其分为代码级别防御和平台级别防御，具体取决于我们是在处理应用程序的实际编码还是围绕其的基础设施。
- en: Defending against SQL injection with code-level defenses
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用代码级别防御防御 SQL 注入
- en: When applying defense mechanisms to our application code, these can be divided
    in different categories, depending on their objective.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在将防御机制应用到我们的应用程序代码时，这些机制可以根据它们的目标被分为不同的类别。
- en: 'Input validation consists of examining the input and checking if it''s valid
    according to our rules. There are generally two ways in which we can define our
    validation rules. The simplest one is based on a blacklist, so that if such input
    belongs to a set of input we deem potentially dangerous, we do not accept it.
    However, while this method is easy to implement, we need to specifically define
    what dangerous input is, and it may happen that we miss some dangerous cases,
    especially if new ones are discovered. Whitelisting, on the other hand, is a stricter
    way of doing things and is usually more secure: we only accept input belonging
    to a list of accepted input, this way excluding anything that we do not consider
    normal.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 输入验证包括检查输入并验证它是否符合我们的规则。通常我们可以通过两种方式来定义验证规则。最简单的一种是基于黑名单，即如果输入属于我们认为潜在危险的输入集合，我们就不接受它。然而，虽然这种方法容易实现，但我们需要具体定义什么是危险输入，可能会错过一些危险的情况，特别是当发现新的危险时。另一方面，白名单是一种更严格的方法，通常也更安全：我们只接受属于已接受输入列表的输入，从而排除我们不认为正常的任何东西。
- en: Another way to treat input correctly is by constructing query statements in
    a secure manner. We have seen that the magic of SQL injection usually happens
    when the query statement is constructed using user-provided input, thus generating
    unexpected commands. To prevent this, we can refer to parameterized queries, in
    which input is saved into specific parameters and an additional step is added
    before we actually send the query to the database. This ensures, if correctly
    applied, that user input is not interpreted as part of a query that could alter
    the syntax.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种正确处理输入的方法是以安全的方式构造查询语句。我们已经看到，SQL注入的“魔力”通常发生在查询语句是使用用户提供的输入构建时，从而生成了意外的命令。为避免这种情况，我们可以参考参数化查询，其中输入被保存到特定的参数中，并且在我们实际将查询发送到数据库之前，添加了一个额外的步骤。这确保了，如果正确应用，用户输入不会被解释为查询的一部分，从而改变语法。
- en: Another option is building our code so that it excludes harmful characters from
    user input, or even ignores them. If we transform a character into another encoding
    so that our application can read it without making it harmful to the SQL database,
    this is known as character encoding. Character escaping is where we insert escaping
    mechanisms that make the database ignore such characters, even if they're present
    as they are inserted into the query.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选项是构建我们的代码，使其排除用户输入中的有害字符，甚至忽略它们。如果我们将某个字符转换为另一种编码，使我们的应用程序能够读取它而不对SQL数据库造成危害，这称为字符编码。字符转义是指我们插入转义机制，使得数据库忽略这些字符，即使它们原样插入到查询中。
- en: Besides these techniques, there are also some useful principles to keep in mind
    when developing an application. These include building the application using various
    abstraction layers, such as separating the user interface from the actual application
    logic, thus not giving direct access to more sensitive areas.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些技术外，在开发应用程序时，还有一些有用的原则需要牢记。这些原则包括使用各种抽象层来构建应用程序，例如将用户界面与实际应用程序逻辑分开，从而不直接访问更敏感的区域。
- en: Treating sensitive data securely by adding cryptography and masking data is
    also very important as it can prevent malicious agents from obtaining private
    information that could result in harm, not only to the application, but also to
    users' privacy in some cases. This is especially relevant if you consider applicable
    laws for privacy and data protection.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加加密技术和数据掩码来安全地处理敏感数据也非常重要，因为这可以防止恶意代理获取可能导致损害的私人信息，不仅对应用程序有害，在某些情况下还可能对用户的隐私造成威胁。尤其在考虑隐私和数据保护相关法律时，这一点尤为重要。
- en: Finally, even if specifically focused on SQL, we looked at the use of stored
    procedures instead of building queries on the application. This can ensure that
    such operations can be executed with the privilege level decided on the database
    itself, as an application that sends commands to a database usually has a high
    privilege level. This means that if the application is compromised (for example,
    using SQL injection), an attacker can have full access to the database. Restricting
    privilege in stored procedures, on the other hand, can limit attackers' potential
    exclusively to what is strictly allowed, thus avoiding unexpected results.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，即使专注于SQL，我们也考察了使用存储过程而不是在应用程序中构建查询。这可以确保这些操作可以按照数据库本身决定的权限级别执行，因为发送命令到数据库的应用程序通常具有较高的权限级别。这意味着如果应用程序被攻破（例如，通过SQL注入），攻击者可能会完全访问数据库。另一方面，限制存储过程中的权限可以将攻击者的潜在影响限定于严格允许的范围，从而避免意外结果。
- en: This concludes our overview of the countermeasures we can apply to our application
    code and design. Now, let's move on and look at the aspects surrounding the application
    context.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们对可以应用于应用程序代码和设计的对策的概述。现在，让我们继续查看应用程序上下文相关的方面。
- en: Defending against SQL injection with platform-level defenses
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用平台级防御来防止SQL注入
- en: When talking about platform-level defenses, we need to move on from what is
    strictly intended as application security since we can deal with more collateral
    aspects. We are interested in protecting the application by applying measures
    outside of it, thus limiting the attack's potential and decreasing the likelihood
    of a successful attack against our application.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈到平台级防御时，我们需要超越严格定义的应用程序安全性，因为我们还可以处理更多的附带方面。我们的目标是通过应用外部措施来保护应用程序，从而限制攻击的潜力，并降低成功攻击我们应用程序的可能性。
- en: The first example to mention for this type of defense is the **web application
    firewall**, or **WAF** for short. WAFs are components, usually software, that
    are able to accept or refuse application-level requests coming to our application.
    This is similar to code-level input validation, but it happens outside of the
    application, thus preventing malicious requests from even touching our application
    logic, as if nothing was sent at all. WAFs can act directly at the web server
    level, by processing requests directed to the web server; at the application level,
    by using software modules external to our application, thus being independent
    from server technology; and at the web service level, which is useful when using
    web services with SOAP.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这个防御类型的第一个例子是**Web应用防火墙**，简称**WAF**。WAF是组件，通常是软件，能够接受或拒绝传递到我们应用程序的应用层请求。这类似于代码级别的输入验证，但发生在应用程序之外，从而防止恶意请求触及我们的应用程序逻辑，就像什么都没有发送一样。WAF可以直接在Web服务器级别工作，通过处理发送到Web服务器的请求；在应用层，通过使用外部的应用程序模块，从而独立于服务器技术；以及在Web服务层，这在使用SOAP的Web服务时非常有用。
- en: WAFs can also be used in passive mode as they act as an intrusion detection
    system. This way, the WAF can be continuously listening for traffic and can also
    send alerts in case something unusual is sent to the application. This way, the
    administrator can act in a timely fashion in case of an attack attempt.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: WAF也可以作为被动模式使用，充当入侵检测系统。这样，WAF可以持续监听流量，并且在发送到应用程序的内容异常时发送警报。这样，管理员可以在攻击尝试发生时及时采取行动。
- en: Firewalling logic can also be applied at the database level using database firewalls.
    These are like proxy servers, located between the application and the database,
    that examine commands meant to be sent to the database. In the case of malicious
    commands, nothing is sent to the actual database, preventing attacks such as SQL
    injection from happening.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 防火墙逻辑也可以通过使用数据库防火墙在数据库级别应用。这些就像代理服务器，位于应用程序和数据库之间，检查本应发送到数据库的命令。如果是恶意命令，什么也不会发送到实际数据库，从而防止SQL注入等攻击的发生。
- en: Another level of security can be added directly by securing the database. This
    means securing data stored on it through encryption or masking, and by securing
    the database server that the database is running on by applying patching and secure
    configuration, while also guaranteeing proper authentication mechanisms.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过直接保护数据库来添加另一层安全性。这意味着通过加密或掩码来保护存储在数据库中的数据，并通过应用补丁和安全配置来保护数据库服务器，同时确保适当的身份验证机制。
- en: Finally, some other security principles that can be applied at the platform
    level consist of avoiding unnecessary information leaks, suppressing error messages,
    and preventing search engines from exploring your web applications.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，另一些可以在平台级别应用的安全原则包括避免不必要的信息泄露、抑制错误信息以及防止搜索引擎探索您的Web应用程序。
- en: Another important principle is deploying your application securely by separating
    elements such as application logic from the database and from the frontend and
    backend. Applying network-level authentication using **Network Access Control**
    (**NAC**) can also prevent many attacks since only some network entities are allowed
    to perform sensitive actions on the application. They can also authenticate using
    a specific certificate or through network rules enforced by firewalls.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要原则是通过将应用程序逻辑与数据库以及前后端分开来安全地部署应用程序。使用**网络访问控制**（**NAC**）进行网络级身份验证也可以防止许多攻击，因为只有某些网络实体被允许在应用程序上执行敏感操作。它们还可以使用特定的证书或通过防火墙执行的网络规则进行身份验证。
- en: Now that we've gone through all the topics we covered during this journey, let's
    examine the importance of these topics from the practical part of this book in
    terms of application security and computer security in general.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经浏览了这一路程中涉及的所有主题，让我们从应用安全性和计算机安全性的一般角度，审视这些主题在本书实际部分中的重要性。
- en: Managing vulnerabilities and security flaws
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理漏洞和安全缺陷
- en: To really put what we've been talking about into perspective, we need to focus
    on the entire life cycle of security issues and vulnerabilities in a complex environment,
    such as companies or large enterprises.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要真正将我们所讨论的内容放入更大的视角中，我们需要关注复杂环境中安全问题和漏洞的整个生命周期，例如公司或大型企业。
- en: Part of the job of some security professionals is finding vulnerabilities and
    security flaws that are present in the network infrastructure, including assets
    – such as servers or workstations – or, more specifically, in applications. The
    most common way to identify security issues is by performing vulnerability assessments,
    which analyze target systems to find out if there are any known security issues,
    for example, in the system configuration itself, due to any missing security updates,
    or by using various tools and techniques. A significant part of these activities
    is testing for such issues in order to verify if such vulnerabilities can really
    be exploited by possible malicious agents.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一些安全专业人员的工作是发现网络基础设施中存在的漏洞和安全缺陷，包括资产——例如服务器或工作站——或更具体地说，在应用程序中。识别安全问题的最常见方式是进行漏洞评估，通过分析目标系统来查找是否存在已知的安全问题，例如系统配置本身的漏洞、缺少安全更新，或使用各种工具和技术进行扫描。这些活动的重要部分是测试这些问题，以验证这些漏洞是否真会被潜在的恶意攻击者利用。
- en: What we experienced in [*Chapter 4*](B15632_04_Final_JC_ePub.xhtml#_idTextAnchor069),
    *Attacking Web, Mobile, and IoT Applications*, was mimicking exactly the work
    of a security professional in charge of identifying security flaws – in this case,
    applications – by assessing the actual degree to which they could be exploited,
    thereby correctly evaluating their impact. Of course, we focused on SQL injection,
    but since there are many other vulnerabilities, such work can be quite complex
    – but also thrilling and, in some cases, simply fun. This provides you with new
    challenges and ways to wrap your head around different puzzles.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第四章*](B15632_04_Final_JC_ePub.xhtml#_idTextAnchor069)，*攻击Web、移动和物联网应用程序*中所经历的，正是模拟了安全专业人员的工作，负责识别安全缺陷——在本例中是应用程序——通过评估它们被利用的实际程度，从而正确评估其影响。当然，我们重点关注了SQL注入，但由于还有许多其他漏洞，这项工作可能相当复杂——但也充满了挑战，而且在某些情况下，非常有趣。这为你提供了新的挑战和思考不同难题的方式。
- en: Security testing and discovering security issues is, obviously, about putting
    remediation plans that can effectively fix those issues into practice. [*Chapter
    5*](B15632_05_Final_JC_ePub.xhtml#_idTextAnchor085), *Preventing SQL Injection
    with Defensive Solutions*, helped us find out what can be done to remediate a
    SQL injection vulnerability. Depending on the context, and possibly effort and
    time constraints, an effective vulnerability remediation plan can be optimized
    by applying the most effective remediations in order to provide the greatest level
    of security possible with the smallest amount of action.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 安全测试和发现安全问题显然是关于将有效的修复计划付诸实践，以便有效地解决这些问题。[*第五章*](B15632_05_Final_JC_ePub.xhtml#_idTextAnchor085)，*通过防御性解决方案防止SQL注入*，帮助我们了解了如何修复SQL注入漏洞。根据具体情况，以及可能的工作量和时间限制，一个有效的漏洞修复计划可以通过应用最有效的修复措施进行优化，以便在最小的操作量下提供尽可能高的安全性。
- en: Security professionals need, in this case, to know what the most effective responses
    are by considering the context in which these issues are found, and to ensure
    the impact of such actions is acceptable for organizations. While, in most cases,
    security professionals won't have to actually implement the solutions themselves,
    they need to know what they are about so that they can instruct the tech staff
    to apply those changes to the infrastructure and/or systems that are impacted.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，安全专业人员需要知道最有效的应对措施是什么，考虑到发现这些问题的环境，并确保这些行动的影响对组织是可接受的。虽然在大多数情况下，安全专业人员不需要亲自实施解决方案，但他们需要了解这些解决方案的内容，以便能够指导技术人员将这些变更应用于受影响的基础设施和/或系统。
- en: In its practical sections, this book was meant to give you, with a particular
    focus on SQL injection, a small sample of the most practical aspects of dealing
    with a vulnerability – from the discovery part, through testing to assess how
    far damage could extend, to the actual remediation of it, through exploring various
    countermeasures that could be taken. This provided us with specific examples,
    especially when it came to dealing with common programming languages.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的实践部分旨在为你提供一个关于如何应对漏洞的实用样本，特别是聚焦于SQL注入——从发现部分、通过测试评估损害可能扩展的程度，到实际修复漏洞，探索可以采取的各种对策。这为我们提供了具体的示例，特别是在处理常见编程语言时。
- en: This way, we can consider, by extending the path we followed in this specific
    case, the full life cycle of a security issue. First, the vulnerability is discovered—usually
    in an automated way, as we also saw in the case of SQL injection with the use
    of the Scanner module of OWASP ZAP. A single scan, of course, will probably identify
    a considerable quantity of issues, which need to be evaluated one by one in the
    following phase.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，通过扩展我们在这个特定案例中所遵循的路径，我们可以考虑安全问题的完整生命周期。首先，漏洞被发现——通常是通过自动化方式，正如我们在使用OWASP
    ZAP的扫描模块进行SQL注入测试时看到的那样。当然，单次扫描可能会识别出大量问题，这些问题需要在接下来的阶段逐一评估。
- en: 'In the second step, in fact, such a vulnerability is tested—alongside many
    others—in order to assess if the result of the automated analysis is a false positive
    and to see the actual impact of such an issue. By following our tutorial in [*Chapter
    4*](B15632_04_Final_JC_ePub.xhtml#_idTextAnchor069), *Attacking Web, Mobile, and
    IoT Applications*, we did exactly that: we knew such applications were vulnerable
    to SQL injection, but we studied the vulnerabilities to see what the issue could
    lead to.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二步中，实际上测试了这样的漏洞——与许多其他漏洞一起——以评估自动化分析结果是否为假阳性，并查看此类问题的实际影响。通过参考我们在[*第4章*](B15632_04_Final_JC_ePub.xhtml#_idTextAnchor069)中提供的教程，*攻击Web、移动和物联网应用程序*，我们正是这样做的：我们知道这些应用程序容易受到SQL注入攻击，但我们研究了这些漏洞，看看它们可能导致什么问题。
- en: It can happen, in fact, that an application is indeed vulnerable, but exploiting
    the vulnerability could lead to minor consequences – changes, in this case, that
    could have an impact that is much lower than a SQL injection vulnerability but
    could lead to the full compromise of an application. The degree of exploitability
    of a SQL injection attack may depend on the countermeasures present, which, even
    if not all simultaneously present, can hinder, even partially, the work of an
    attacker.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，应用程序可能确实存在漏洞，但利用该漏洞可能导致较小的后果——在这种情况下，变化的影响可能远低于SQL注入漏洞，但仍可能导致应用程序的完全妥协。SQL注入攻击的可利用性可能取决于现有的对策，虽然这些对策未必同时存在，但即使部分存在，也能阻碍攻击者的工作。
- en: Finally, after the vulnerability has been tested, countermeasures can be considered,
    all while keeping in mind the presence of any possible defense mechanism that
    is already present. This requires precise knowledge of the security issue at hand.
    This is why, for SQL injection, we showed the most relevant countermeasures that
    can be taken to secure an application against this specific vulnerability. An
    expert security professional can tell, by the behavior of the application, which
    countermeasure has been applied, thus better advising about possible countermeasures.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在漏洞测试完成后，可以考虑采取对策，同时要牢记任何已存在的防御机制。这需要对当前安全问题有精准的了解。因此，针对SQL注入攻击，我们展示了可以采取的最相关的对策，以保护应用程序免受此特定漏洞的影响。一个经验丰富的安全专业人士可以通过应用程序的行为来判断已应用了哪些对策，从而更好地建议可能的防御措施。
- en: Suggested defenses occur in the formulation of a remediation plan, which is
    meant to instruct technicians about which defenses to apply. At this point, with
    such a plan, it is possible to decide if the risk linked to the security issue
    can be remediated through the implementation of the proper defense mechanisms.
    Alternatively, such a risk could also be accepted, depending on its criticality,
    so we don't have to apply a countermeasure that could be, for example, too demanding
    in terms of operational trade-offs (for example, applying a security mechanism
    would require critical servers to stay offline for a longer period than is tolerable
    for organizations).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 建议的防御措施出现在制定修复计划的过程中，目的是指导技术人员应该应用哪些防御措施。此时，通过这样的计划，就可以决定是否通过实施适当的防御机制来解决与安全问题相关的风险。或者，取决于风险的严重性，也可以选择接受这种风险，因此我们不必应用可能会因为操作上的权衡而变得过于苛刻的对策（例如，应用某个安全机制可能会要求关键服务器停机时间超过组织可容忍的时间）。
- en: Cyber security is a subject that is always evolving and requires professionals
    to always stay up to date with respect to threats, vulnerabilities, and risks.
    With this practical section, we hope we have given you a taste of what is like
    to be a professional in this interesting area. Now, let's wrap everything up by
    considering our main issue once again.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 网络安全是一个不断发展的学科，需要专业人员时刻跟进最新的威胁、漏洞和风险。在这一实用部分中，我们希望能够让你体验到作为这一有趣领域专业人士的感受。现在，让我们再一次总结主要问题。
- en: SQL injection and security implications – final comments
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL 注入及其安全影响——总结评论
- en: Now that we've explored SQL injection through this book, we can talk about SQL
    injection and security issues in today's world, all while considering the implications
    in terms of security in the World Wide Web and the repercussions in the real world.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经通过本书探讨了 SQL 注入，我们可以讨论现今 SQL 注入及其安全问题，同时考虑它在全球互联网安全方面的影响，以及在现实世界中的后果。
- en: SQL injection in today's world
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现今的 SQL 注入
- en: SQL injection is indeed an old and well-known vulnerability and, as such, it
    is usually taken into consideration when developing or releasing new applications,
    especially in the World Wide Web as web applications. Most basic attacks are usually
    ineffective due to the fact that most common countermeasures are usually applied
    to the vast majority of cases, and many web frameworks with built-in controls
    are often used. However, it may happen that vulnerable applications still exist,
    often due to bugs and oversights in the source code, or some other unforeseen
    condition.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 注入确实是一个历史悠久且广为人知的漏洞，因此，通常在开发或发布新应用程序时会特别考虑，尤其是在全球互联网这样的 Web 应用程序中。大多数基础攻击通常是无效的，因为大部分常见的防范措施通常会应用于绝大多数案例，且许多具有内置控制的
    Web 框架经常被使用。然而，仍然可能存在脆弱的应用程序，这通常是由于源代码中的错误或疏忽，或者是其他一些无法预见的情况。
- en: According to OWASP, as mentioned in the latest version of the **OWASP Top Ten
    Web Application Security Risks** (2017), injection is the top risk factor for
    web applications due to the consequences – which we looked at throughout this
    book – of it being exploited. SQL injection is, of course, part of this category
    as it is still one of the most common ways in which malicious users can interact
    with the inner logic of applications by inserting arbitrary commands, thus exploiting
    the expressive power of the SQL language.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 OWASP 在 **OWASP 十大 Web 应用程序安全风险**（2017年最新版）中提到的内容，注入攻击是 Web 应用程序的最大风险因素，因为我们在本书中探讨的内容表明，其被利用的后果非常严重。SQL
    注入当然属于这一类别，因为它仍然是恶意用户通过插入任意命令与应用程序的内部逻辑进行交互，从而利用 SQL 语言的表达能力的最常见方式之一。
- en: 'SQL and NoSQL injection is, in fact, commonly reported as the first example
    of this category: it is definitely one of the most common attack techniques malicious
    users tend to try against web applications, given the advantage it could provide,
    both from a strategic perspective and from the standpoint of sheer impact of operations.
    Despite how infamous it is, many attacks based on it still occur.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 和 NoSQL 注入实际上通常被视为此类攻击的第一个典型例子：它无疑是恶意用户针对 Web 应用程序最常尝试的攻击技术之一，因为它从战略角度和操作影响的角度来看，都能提供巨大的优势。尽管它声名狼藉，基于
    SQL 注入的攻击依然时有发生。
- en: 'Recent examples have also made their way to the news. In 2014, it was reported
    that cyber-crime operations – attributed to Russian cyber-crime groups – obtained
    1.2 billion username and password pairs through various SQL injection attacks
    (source: *The New York Times*, August 5th 2014, [https://www.nytimes.com/2014/08/06/technology/russian-gang-said-to-amass-more-than-a-billion-stolen-internet-credentials.html?_r=0](https://www.nytimes.com/2014/08/06/technology/russian-gang-said-to-amass-more-than-a-billion-stolen-internet-credentials.html?_r=0)).'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 最近的例子也进入了新闻报道。2014年，据报道，一些网络犯罪活动——归咎于俄罗斯的网络犯罪团伙——通过各种 SQL 注入攻击获取了12亿对用户名和密码（来源：*纽约时报*，2014年8月5日，[https://www.nytimes.com/2014/08/06/technology/russian-gang-said-to-amass-more-than-a-billion-stolen-internet-credentials.html?_r=0](https://www.nytimes.com/2014/08/06/technology/russian-gang-said-to-amass-more-than-a-billion-stolen-internet-credentials.html?_r=0)）。
- en: 'More recently, a Bug Bounty Hunter – a security professional that looks for
    vulnerabilities online within specific programs with the consent of the owners,
    who can award money in the case of a success – found a SQL injection vulnerability
    that lead to an accounting database belonging to Starbucks (source: The Daily
    Swig – Portswigger''s news blog – September 2019, [https://portswigger.net/daily-swig/sql-injection-flaw-opened-doorway-to-starbucks-accounting-database](https://portswigger.net/daily-swig/sql-injection-flaw-opened-doorway-to-starbucks-accounting-database)).
    Despite accessing the vulnerability required – in this case, a more complex attack
    exploiting other weaknesses of an application – this demonstrates that SQL injection
    is still an issue today and can still represent a high security risk, possibly
    exposing critical information.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，一位漏洞赏金猎人——一种在特定程序中寻找漏洞的安全专家，经得程序所有者同意，并在漏洞被成功利用时给予金钱奖励——发现了一个 SQL 注入漏洞，导致了
    Starbucks 的一个财务数据库暴露（来源：《The Daily Swig – Portswigger 的新闻博客》– 2019年9月，[https://portswigger.net/daily-swig/sql-injection-flaw-opened-doorway-to-starbucks-accounting-database](https://portswigger.net/daily-swig/sql-injection-flaw-opened-doorway-to-starbucks-accounting-database)）。尽管要利用这个漏洞需要更复杂的攻击手段——通过利用应用程序的其他弱点——这仍然表明
    SQL 注入仍然是今天的一个问题，且可能带来较高的安全风险，可能暴露关键信息。
- en: Other issues connected to SQL injection can always be present as bugs in frameworks
    and software. It happens now and then that some new vulnerabilities affecting
    software are used for building web applications that, if properly exploited, usually
    through complex and unusual attack techniques, could lead to SQL injection in
    the applications that use them; that is, if no further countermeasures are applied.
    These vulnerabilities are usually patched when they're discovered, so it's imperative,
    if external software components are used, that they are always up to date with
    the most recent version available.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 与 SQL 注入相关的其他问题也可能作为框架和软件中的漏洞存在。有时，一些新的漏洞影响了用于构建 Web 应用的软件，若被充分利用，通常通过复杂和不常见的攻击技术，可能导致使用这些软件的应用程序出现
    SQL 注入问题；也就是说，如果没有采取进一步的对策。这些漏洞通常在发现后会被修复，因此，如果使用了外部软件组件，必须确保它们始终保持最新版本。
- en: With this, we have seen how SQL injection, despite being a dated vulnerability,
    is still relevant today, underlining once again the importance of applying security
    measures against it. Malicious agents and cyber criminals will always attempt
    SQL injection against web applications, so it is best to be prepared for it by
    putting all the defense mechanisms you know into practice.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这一点，我们可以看到，尽管 SQL 注入是一个过时的漏洞，但它今天仍然具有相关性，再次强调了采取防范措施以应对该漏洞的重要性。恶意代理和网络犯罪分子将始终尝试对
    Web 应用进行 SQL 注入攻击，因此最好的做法是通过实践所有已知的防御机制来做好准备。
- en: Beyond SQL injection
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 超越 SQL 注入
- en: While SQL injection is still one of the most common attack techniques attempted
    by whoever wants to compromise an application, it's definitely not the only security
    risk in the realm of web application security.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 SQL 注入仍然是那些希望破坏应用程序的攻击者最常使用的攻击技术之一，但它绝对不是 Web 应用安全领域唯一的安全风险。
- en: The OWASP Top 10 Web Application Security Risks
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OWASP 十大 Web 应用安全风险
- en: We already mentioned the OWASP Top Ten Web Application Security Risks, but let's
    provide a general overview of it. It contains the most relevant web application
    security risks, sorted by risk level. The list gets updated on a non-regular basis.
    The most recent chart is dated 2017, but a 2020 version is currently in the making.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经提到过 OWASP 十大 Web 应用安全风险，但让我们提供一个大致概述。它包含了最相关的 Web 应用安全风险，并按风险级别排序。此列表不定期更新。最近的一版是
    2017 年的，但 2020 版正在制作中。
- en: 'Here is the full OWASP TOP 10 for Web Application Security Risks, alongside
    a brief description:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是完整的 OWASP 十大 Web 应用安全风险，并附有简要说明：
- en: '**Injection**: Injection means inserting untrusted data to be interpreted as
    part of a query or, more generally, a command. This includes SQL injection, NoSQL
    injection, and OS command injection.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注入攻击**：注入攻击是指插入不可信的数据，使其被解释为查询的一部分或更一般的命令。这包括 SQL 注入、NoSQL 注入和操作系统命令注入。'
- en: '**Broken authentication**: Authentication and user session management are implemented
    incorrectly, allowing attackers to compromise applications by gaining higher privileges
    than intended or stealing user identities.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份验证失效**：身份验证和用户会话管理实施不当，导致攻击者通过获得比预期更高的权限或窃取用户身份来破坏应用程序。'
- en: '**Sensitive data exposure**: Sensitive data, such as financial, healthcare,
    and personal information can be leaked by the application, for example, through
    error messages or accessible resources. This exposes such data to fraud, identity
    theft, or other crimes.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**敏感数据暴露**：应用程序可能泄露敏感数据，如财务、医疗和个人信息，例如通过错误信息或可访问的资源。这使得这些数据容易遭受欺诈、身份盗窃或其他犯罪行为。'
- en: '**XML External Entities (XXE)**: Arbitrary external entity references in XML
    documents, if evaluated, can be used to disclose internal files, sensitive information,
    and possibly allow remote code execution and denial of service.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XML 外部实体攻击（XXE）**：如果 XML 文档中的任意外部实体引用被评估，则可能被用于泄露内部文件、敏感信息，并可能导致远程代码执行和拒绝服务攻击。'
- en: '**Broken access control**: Restrictions on user permissions (that is, what
    specific users can do in an application) are not enforced correctly. This can
    allow users to perform actions that should be restricted only to administrators
    or higher privileges.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**访问控制失效**：用户权限的限制（即特定用户在应用程序中可以执行的操作）没有得到正确执行。这可能允许用户执行本应仅限管理员或更高权限的操作。'
- en: '**Security misconfiguration**: The application and/or system that users reside
    on is not properly configured in terms of security. This includes insecure default
    configurations, incomplete or ad hoc configurations, and unnecessary error messages.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全配置错误**：用户所在的应用程序和/或系统在安全性方面没有正确配置。这包括不安全的默认配置、不完整或临时的配置以及不必要的错误信息。'
- en: '**Cross-Site Scripting (XSS)**: XSS allows attackers to execute client-side
    scripts – usually JavaScript – by inserting them into the victim''s browser, which
    can compromise user sessions or trick the user into visiting dangerous websites.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨站脚本攻击（XSS）**：XSS 允许攻击者通过将客户端脚本（通常是 JavaScript）插入到受害者的浏览器中执行，从而可能危及用户会话或诱使用户访问危险网站。'
- en: '**Insecure deserialization**: Input is not processed correctly and can be accepted
    as it is by the application, thus possibly resulting in remote code execution
    or injection attacks.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不安全的反序列化**：输入未正确处理，且可以被应用程序直接接受，从而可能导致远程代码执行或注入攻击。'
- en: '**Using components with known vulnerabilities**: External components with known
    vulnerabilities can expose the application to various attacks, depending on the
    vulnerability. Such components need to have the most recent security updates applied.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用具有已知漏洞的组件**：具有已知漏洞的外部组件可能会使应用程序暴露于各种攻击，具体取决于漏洞类型。这些组件需要及时应用最新的安全更新。'
- en: '**Insufficient logging and monitoring**: Insufficient logging and monitoring
    means that possible malicious actions are not properly tracked by the targeted
    systems and applications, thus hindering any possible investigation.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志记录和监控不足**：日志记录和监控不足意味着目标系统和应用程序没有正确地追踪可能的恶意行为，从而阻碍了任何可能的调查。'
- en: As you can see, SQL injection, while being one of the most important vulnerability
    typologies, is just the tip of the iceberg. This list is just meant to show you
    in how many ways a web application can be attacked by security weaknesses being
    exploited.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，SQL 注入虽然是最重要的漏洞类型之一，但只是冰山一角。这个列表只是为了向您展示 Web 应用程序可能在多少种方式下受到安全弱点的攻击。
- en: In a context like this, the role of security professionals in helping keep applications
    and services protected and secure is obvious. Whenever a security issue is identified,
    it is best to proceed by mitigating or resolving it as soon as possible. Also,
    by reading the top 10 list, you probably noticed how some risks can be linked
    to other ones. For example, insecure deserialization can lead to, among other
    things, injection due to the insecure treatment of user input, while XSS can be
    the result of a missing input validation, which could also lead to SQL injection.
    XSS itself is actually a form of injection (in the case of client-side scripting
    code such as JavaScript). Due to the interconnection of these risks and depending
    on the context they're examined in, a proper analysis that's lead by a security
    professional can help optimize the process of mitigating such risks. Here, they
    choose to prioritize the most critical issues first in order to minimize the possible
    resulting impact.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这样的背景下，安全专业人员在帮助保护应用程序和服务安全方面的作用显而易见。每当发现安全问题时，最好尽快采取措施进行缓解或解决。此外，通过阅读前十名的风险，您可能注意到某些风险之间是相互关联的。例如，不安全的反序列化可能会导致诸如注入等问题，这是由于对用户输入的不安全处理，而XSS可能是因为缺少输入验证，进而导致SQL注入。XSS本身实际上是一种注入（在客户端脚本代码如JavaScript的情况下）。由于这些风险的相互关联，并且根据它们被检查的背景，安全专业人员主导的适当分析可以帮助优化缓解这些风险的过程。在此，他们选择优先处理最关键的问题，以最小化可能造成的影响。
- en: 'The OWASP Top Ten for Web Application Security Risks further confirms SQL injection
    as one of the most critical security issues for web applications. This leads,
    once again, to the mission of this book: to deal with SQL injection, which is
    one of the most prominent risks in terms of security. It acts as an ideal entry
    point to the much complex and comprehensive world of web application security,
    which itself is part of the larger branch of computer security, most commonly
    known an information security or cyber security.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP Web应用程序安全风险十大榜单进一步确认了SQL注入是Web应用程序中最关键的安全问题之一。这再次指向本书的任务：处理SQL注入问题，它是安全风险中最突出的风险之一。SQL注入作为Web应用程序安全的理想切入点，带领我们进入更为复杂和全面的Web应用程序安全世界，而Web应用程序安全本身是计算机安全这一大分支的一部分，通常被称为信息安全或网络安全。
- en: Further exploring information security
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 进一步探索信息安全
- en: Exploring application security in more depth is, of course, a thrilling path
    as it can allow us, through test environments such as the one we set up for the
    practical section of this book, to always meet new challenges and put both intuition
    and technical skills to practice. This can put you in the place of some sort of
    a detective, or a doctor trying to perform a correct diagnosis. This can be especially
    fruitful for people with some experience in application development that wish
    to approach already known issues from a security perspective.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 更深入地探索应用程序安全无疑是一个激动人心的道路，因为通过本书的实践部分所设立的测试环境，我们可以不断遇到新的挑战，并将直觉和技术技能付诸实践。这可以让你像某种侦探或医生一样，尝试做出正确的诊断。这对于有一些应用开发经验，想从安全角度审视已知问题的人尤其有益。
- en: In general, security professionals can be required to act more at an infrastructural
    level. The approach is similar to web application security as in this case, you
    can find vulnerabilities on target systems, this time at the system level. This
    can require precise knowledge of how OSes work, or even protocols and services
    running on servers and workstations alike. Exploitation can also be quite challenging
    due to the necessity of interacting directly at the system level, without the
    chance of using a user-friendly interface, as you would for web application security
    assessment.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，安全专业人员可能需要在基础设施层面进行更多的操作。这种方法类似于Web应用程序安全，在这种情况下，您可以在目标系统上找到漏洞，这次是在系统级别。它可能需要精确了解操作系统如何工作，甚至了解在服务器和工作站上运行的协议和服务。由于需要直接在系统级别进行交互，而没有机会使用像Web应用程序安全评估中那样的用户友好界面，利用漏洞也可能变得相当具有挑战性。
- en: The ultimate goal of cyber security is to provide additional layers of security
    for computers and enterprise systems. This can also result in the adoption of
    targeted security solutions, which can help organizations and individuals bolster
    their security posture. This way, an expert in security can suggest the best possible
    security solutions when considering the starting context.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 网络安全的终极目标是为计算机和企业系统提供额外的安全层。这也可能导致采用针对性的安全解决方案，这些解决方案可以帮助组织和个人增强他们的安全态势。通过这种方式，安全专家可以根据初始背景建议最佳的安全解决方案。
- en: Information security is, in any case, one of the most discussed topics nowadays.
    In the last few years, governments and supranational entities around the world
    have started to discipline aspects of information security through many legislative
    efforts. This is especially relevant when thinking about the concept of cyber
    war, in which even state-sponsored cyber attacks can be carried out against organizations
    and entities worldwide. It is of the utmost important to guarantee that security
    is properly addressed while considering the risks organizations and, consequently,
    states can face if they are not properly prepared for the risks linked to computer
    security.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，信息安全如今是最为讨论的话题之一。近年来，全球各国政府和超国家组织通过多项立法努力开始规范信息安全的各个方面。在考虑到网络战争的概念时，这一点尤为重要，因为即使是国家支持的网络攻击也可能针对全球的组织和实体进行。确保安全问题得到妥善处理至关重要，尤其是在考虑到组织乃至国家在面对计算机安全相关风险时，若未做好充分准备可能会面临的后果。
- en: 'Every day, information security in some way or another always reaches the headlines
    of newspapers and news around the world: this is just a symptom of how much **information
    technology** (**IT**) has become central to our society. Consequently, its security
    has become extremely relevant since protecting IT means protecting the real world.
    This statement always make more sense as time goes by since technology is entwined
    with our lives and permeates into everything we do in our daily lives.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 每天，信息安全总会以某种方式成为世界各地报纸和新闻的头条：这只是**信息技术**（**IT**）已成为我们社会中心的一个症状。因此，信息技术的安全变得极为重要，因为保护
    IT 就是保护现实世界。随着时间的推移，这一说法变得愈发合理，因为技术已经与我们的生活紧密相连，渗透到我们日常生活的方方面面。
- en: Even if you are not specifically interested in information security, it is advised
    that you are kept aware of how important it is as it will always encompass our
    lives, especially in the future. We hope this book has inspired you to further
    explore the topic of information security. After all, you have seen the possible
    consequences of SQL injection for yourself.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您对信息安全没有特别的兴趣，我们也建议您意识到它的重要性，因为它将始终贯穿我们的生活，特别是在未来。我们希望本书能够激发您进一步探索信息安全的话题。毕竟，您已经亲自了解了
    SQL 注入的潜在后果。
- en: Summary
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Here we are, at the end of this journey. After dealing with all the topics we've
    faced, but this time in a more synthetic fashion, you grasped some topics regarding
    information security and saw how even SQL injection, which you have hopefully
    mastered as a topic, can be relevant to the real world.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们来到了这段旅程的终点。在处理过我们所面对的所有主题之后，这一次以更加简洁的方式呈现，您掌握了关于信息安全的一些知识，并且看到即使是 SQL 注入漏洞（希望您已经掌握了这一主题），也能在现实世界中发挥重要作用。
- en: Now that you've reached the end of this book, feel free to explore information
    security topics in general or keep practicing in controlled environments. Our
    hope is that this experience sparked curiosity in you, thus inviting you to look
    at security topics in more detail.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 既然您已经读完了本书，您可以随意探索信息安全的相关话题，或者继续在受控环境中进行实践。我们的希望是这段经历激发了您的好奇心，促使您更深入地了解安全话题。
- en: We wish to thank you for reading this book and hope that you also had fun in
    the process. Feel free to use your emulated environment as you please to test
    for SQL injection. You can even use the applications from the OWASP BWA project
    to learn about other security issues. We recommend that you begin by exploring
    all that Mutillidae II has to offer by going through all the suggestions and guides
    provided. This will give you a taste of the main web application security risks.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您阅读本书，并希望您在这个过程中也感到愉快。您可以随意使用您的模拟环境来测试 SQL 注入漏洞。您甚至可以使用 OWASP BWA 项目中的应用程序，了解其他安全问题。我们建议您首先探索
    Mutillidae II 提供的所有内容，按照所有建议和指南进行操作。这将让您初步了解主要的 Web 应用程序安全风险。
- en: Now that you've mastered SQL injection, we hope you can use what you've learned
    for good, without causing any harm to anybody, especially considering the possible
    consequences your actions may bring.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经掌握了 SQL 注入，我们希望你能将所学应用于善事，而不是伤害任何人，尤其是考虑到你的行为可能带来的后果。
- en: 'You know what they say: *with great power comes great responsibility*. Keep
    this in mind now that you''ve mastered SQL injection.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道他们怎么说的：*伟大的力量伴随着伟大的责任*。现在你已经掌握了 SQL 注入，要记得这一点。
- en: Questions
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are security flaws, including SQL injection, usually caused by?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安全漏洞，包括 SQL 注入，通常是由什么引起的？
- en: What is the job of a security professional in testing for vulnerabilities?
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安全专业人员在漏洞测试中的工作是什么？
- en: Describe the three main phases of security assessment that we identified in
    this book, excluding the implementation of defense mechanisms.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 描述本书中我们识别的安全评估的三个主要阶段，不包括防御机制的实施。
- en: Do you think SQL injection, being an old vulnerability, is not a real issue
    anymore?
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你认为 SQL 注入作为一种老旧的漏洞，已经不再是一个真正的问题了吗？
- en: Which position is SQL injection in the OWASP Top 10 Web Application Security
    Risks list?
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SQL 注入在 OWASP 前10大 Web 应用程序安全风险列表中的排名是什么？
