- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Web Security Using Certificates, CDNs, and Firewalls
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用证书、CDN 和防火墙实现 Web 安全
- en: In today’s interconnected digital landscape, web security is paramount. To maintain
    the integrity and confidentiality of data, it is crucial to use a combination
    of tools and technologies. This chapter focuses on three key components – **certificates**
    , **Content Delivery Networks** ( **CDNs** ), and **firewalls** . We will also
    see how we can use certificates alongside load balancers. Certificates, particularly
    X.509, play a vital role in securing communications between clients and servers
    by enabling **TLS** (short for **Transport Layer Security** ). This encryption
    helps to safeguard data in transit, making it essential for preventing data breaches
    and maintaining privacy.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天这个互联的数字环境中，Web 安全至关重要。为了保持数据的完整性和机密性，结合使用多种工具和技术是至关重要的。本章重点介绍三大关键组件——**证书**、**内容分发网络**（**CDN**）和**防火墙**。我们还将看到如何将证书与负载均衡器一起使用。证书，尤其是
    X.509，在通过启用**TLS**（即**传输层安全性**）来确保客户端和服务器之间的通信安全方面发挥着至关重要的作用。这种加密有助于保护传输中的数据，对于防止数据泄露和维护隐私至关重要。
- en: '**Load balancers** enhance the reliability and performance of web services
    by efficiently distributing incoming network traffic across multiple servers.
    By doing so, they ensure that no single server bears too much load, thus preventing
    downtime and optimizing resource use. Load balancers when used with certificates
    offer the flexibility of managing security measures such as TLS termination, allowing
    for centralized handling of certificates, which simplifies security management
    and boosts performance.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**负载均衡器**通过高效地将传入的网络流量分配到多个服务器，增强了Web服务的可靠性和性能。通过这样做，它们确保没有单一服务器承受过多负载，从而防止了停机并优化了资源使用。当与证书一起使用时，负载均衡器提供了管理安全措施（如
    TLS 终止）的灵活性，允许集中处理证书，这简化了安全管理并提升了性能。'
- en: CDNs improve website load times and reduce bandwidth costs by caching content
    at multiple geographic locations, closer to users. They also add a layer of security
    by protecting against **Distributed Denial of Service** ( **DDoS** ) attacks and
    enhancing the availability and performance of web applications.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: CDN 通过在多个地理位置缓存内容，靠近用户，从而提高网站加载速度并减少带宽成本。它们还通过防御**分布式拒绝服务**（**DDoS**）攻击，增强 Web
    应用程序的可用性和性能，增加了一层安全防护。
- en: Lastly, firewalls are critical in defining and enforcing the security perimeter
    of your network. They monitor and control the flow of traffic to and from your
    network. When integrated within environments such as AWS, firewalls help create
    a robust defense against potential threats, contributing significantly to the
    overall security strategy. This chapter will explore practical implementations
    of these components within AWS, providing you with the knowledge to build a secure,
    scalable web infrastructure.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，防火墙在定义和执行网络安全边界方面至关重要。它们监控和控制进出网络的流量。在 AWS 等环境中集成防火墙有助于构建强大的防御，抵御潜在威胁，为整体安全策略做出重要贡献。本章将探讨这些组件在
    AWS 中的实际应用，提供构建安全、可扩展 Web 基础设施的知识。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下食谱：
- en: Enabling HTTPS for a web server on an EC2 instance
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 EC2 实例上的 Web 服务器启用 HTTPS
- en: Creating an SSL/TLS certificate with ACM
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 ACM 创建 SSL/TLS 证书
- en: Creating ELB target groups
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 ELB 目标组
- en: Using an application load balancer with TLS termination at the ELB
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用带有 TLS 终止的应用负载均衡器（ELB）
- en: Using a network load balancer with TLS termination at EC2
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用带有 TLS 终止的网络负载均衡器（EC2）
- en: Securing S3 using CloudFront and TLS
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CloudFront 和 TLS 安全化 S3
- en: Using a WAF
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 WAF
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Before diving into the recipes of this chapter, we need to ensure we have the
    following requirements and knowledge in place:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入本章的食谱之前，我们需要确保具备以下要求和知识：
- en: We need an active AWS account to complete the recipes within this chapter. We
    can use an account that is part of an AWS organization or a standalone account.
    I will be using the **awsseccb-sandbox-1** account that we created in the *Multi-account
    management with AWS Organizations* recipe in [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020)
    . However, I won’t be utilizing any AWS Organizations features, meaning you can
    follow these steps with a standalone account too.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了完成本章中的操作，我们需要一个有效的AWS账户。我们可以使用属于AWS组织的账户或独立账户。我将使用我们在[*第1章*](B21384_01.xhtml#_idTextAnchor020)的*多账户管理与AWS
    Organizations*食谱中创建的**awsseccb-sandbox-1**账户。 但是，我不会使用任何AWS Organizations功能，这意味着你也可以使用独立账户来跟随这些步骤。
- en: For administrative actions, we need a user who has **AdministratorAccess** permission
    to the AWS account we will work with. This can be an IAM Identity Center user
    or an IAM user. I will be using **awsseccbadmin1** , the IAM Identity Center user
    we created in the *User management and SSO with IAM Identity Center* recipe in
    [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020) . However, I won’t be utilizing
    any IAM Identity Center features, meaning you can follow these steps as an IAM
    user, too, if the user has **AdministratorAccess** permission within the account.
    You can create an IAM user by following the *Setting up IAM, account aliases,
    and billing alerts* recipe in [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020)
    .
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于管理操作，我们需要一个具有**AdministratorAccess**权限的用户来操作我们将使用的AWS账户。这个用户可以是IAM身份中心用户或IAM用户。我将使用我们在[*第1章*](B21384_01.xhtml#_idTextAnchor020)的*用户管理与IAM身份中心SSO*食谱中创建的**awsseccbadmin1**
    IAM身份中心用户。 但是，我不会使用任何IAM身份中心功能，这意味着如果该用户在账户中具有**AdministratorAccess**权限，你也可以作为IAM用户跟随这些步骤。你可以参考[*设置IAM、账户别名和账单警报*](B21384_01.xhtml#_idTextAnchor020)食谱来创建一个IAM用户。
- en: The code files for this book are available at [https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition](https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition)
    . The code files for this chapter are available at [https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition/tree/main/Chapter06](https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition/tree/main/Chapter06)
    .
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的代码文件可以在[https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition](https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition)找到。本章的代码文件可以在[https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition/tree/main/Chapter06](https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition/tree/main/Chapter06)找到。
- en: Enabling HTTPS for a web server on an EC2 instance
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为EC2实例上的Web服务器启用HTTPS
- en: In the *Launching an EC2 instance with a web server using user data* recipe
    in [*Chapter 5*](B21384_05.xhtml#_idTextAnchor169) , we launched an EC2 instance
    with a web server without enabling HTTPS. In this recipe, we will demonstrate
    how to enable HTTPS on that web server using a self-signed certificate. This will
    help us to understand the fundamental concepts of enabling HTTPS on an EC2 instance.
    However, for practical applications, it is advisable to use methods outlined in
    other recipes within this chapter, which involve certificates signed by a **Certificate
    Authority** ( **CA** ), such as **AWS Certificate** **Manager** ( **ACM** ).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第5章*](B21384_05.xhtml#_idTextAnchor169)的*使用用户数据启动带Web服务器的EC2实例*食谱中，我们启动了一个没有启用HTTPS的EC2实例。在这个食谱中，我们将展示如何使用自签名证书在该Web服务器上启用HTTPS。这将帮助我们理解在EC2实例上启用HTTPS的基本概念。然而，实际应用中，建议使用本章其他食谱中提到的、由**证书颁发机构**（**CA**）签署的证书方法，例如**AWS证书管理器**（**ACM**）。
- en: Getting ready
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We need the following to successfully complete this recipe:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了成功完成本食谱，我们需要以下内容：
- en: A working AWS account, **awsseccb-sandbox-1** , and a user, **awsseccbadmin1**
    , as described in the *Technical* *requirements* section.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有效的AWS账户**awsseccb-sandbox-1**，以及一个用户**awsseccbadmin1**，如*技术要求*部分所述。
- en: An EC2 instance called **Cloudericks Web Server** , launched in the *Launching
    an EC2 instance with a web server using user data* recipe from [*Chapter 5*](B21384_05.xhtml#_idTextAnchor169)
    .
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为**Cloudericks Web Server**的EC2实例，启动自[*第5章*](B21384_05.xhtml#_idTextAnchor169)的*使用用户数据启动带Web服务器的EC2实例*食谱。
- en: How to do it...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will enable HTTPS using a self-signed certificate, as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用自签名证书启用HTTPS，如下所示：
- en: 'Install the Apache **mod_ssl** module:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Apache **mod_ssl**模块：
- en: '[PRE0]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Generating a private key is the first step in setting up HTTPS encryption for
    a web server. The private key is a crucial component of the SSL/TLS encryption
    process. Use the following command to generate a private key:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成私钥是为 Web 服务器设置 HTTPS 加密的第一步。私钥是 SSL/TLS 加密过程中的关键组成部分。使用以下命令生成私钥：
- en: '[PRE1]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will return nothing but generate a 2,048-bit RSA private key, saved in
    **/** **etc/pki/tls/private/localhost.key** file.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将不会返回任何内容，但会生成一个 2,048 位的 RSA 私钥，并保存在**/** **etc/pki/tls/private/localhost.key**
    文件中。
- en: 'Generate a **certificate signing request** ( **CSR** ) with the private key
    generated in the previous step, using the following command:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令生成一个**证书签名请求**（**CSR**），该请求使用前一步生成的私钥：
- en: '[PRE2]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After running the command from the previous step in the command line, when
    prompted, enter the values as shown in the following figure:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中运行前一步的命令后，当提示时，输入如下图所示的值：
- en: '![Figure 6.1 – The certificate signing request](image/B21384_06_1.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.1 – 证书签名请求](image/B21384_06_1.jpg)'
- en: Figure 6.1 – The certificate signing request
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – 证书签名请求
- en: 'Use the CSR generated in the previous step to create a self-signed certificate:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用前一步生成的 CSR 来创建一个自签名证书：
- en: '[PRE3]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Figure 6.2 – Create a self signed certificate](image/B21384_06_2.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2 – 创建自签名证书](image/B21384_06_2.jpg)'
- en: Figure 6.2 – Create a self signed certificate
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – 创建自签名证书
- en: When we run this command, OpenSSL reads the CSR, signs it using the private
    key, and generates a self-signed certificate ( **localhost.crt** ). This certificate
    can then be used by your web server (e.g., Apache) to enable HTTPS encryption
    and establish secure communication with clients. The certificate will be in the
    **/** **etc/pki/tls/certs/localhost.crt** location.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行此命令时，OpenSSL 会读取 CSR，使用私钥对其进行签名，并生成一个自签名证书（**localhost.crt**）。该证书随后可以被您的
    Web 服务器（例如，Apache）用来启用 HTTPS 加密，并与客户端建立安全通信。证书将保存在**/** **etc/pki/tls/certs/localhost.crt**
    位置。
- en: 'Restart the Apache server with the following command:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令重新启动 Apache 服务器：
- en: '[PRE4]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Access the URL of our web server using the HTTPS prefix, as demonstrated in
    the last step of the *Setting up a web server using EC2 user data* section in
    the *Launching an EC2 instance with a web server using user data* recipe in [*Chapter
    5*](B21384_05.xhtml#_idTextAnchor169) . We should now receive a response, but
    a **Not Secure** warning may also appear, as we used a self-signed certificate.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 HTTPS 前缀访问我们的 Web 服务器 URL，如在[*第 5 章*](B21384_05.xhtml#_idTextAnchor169)中的*使用
    EC2 用户数据设置 Web 服务器*一节的最后一步所示。我们现在应该会收到响应，但也可能会出现**不安全**的警告，因为我们使用了自签名证书。
- en: '![Figure 6.3 – A HTTPS URL with a self-signed certificate](image/B21384_06_3.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3 – 带有自签名证书的 HTTPS URL](image/B21384_06_3.jpg)'
- en: Figure 6.3 – A HTTPS URL with a self-signed certificate
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – 带有自签名证书的 HTTPS URL
- en: In this section, we enabled HTTPS for our web server on our EC2 instance using
    a self-signed certificate. In the next recipe, we will explore how to enhance
    security by using a certificate signed by a CA.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们使用自签名证书在我们的 EC2 实例上为 Web 服务器启用了 HTTPS。在下一篇文章中，我们将探讨如何通过使用 CA 签名的证书来增强安全性。
- en: How it works...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: First, we installed the Apache **mod_ssl** module. This module adds TLS support
    to our Apache server. The **mod_ssl** module is required to enable SSL/TLS support
    in Apache, and it needs to be installed and configured before generating the self-signed
    certificate. The current version of the module also supports SSL v3 and all versions
    of TLS. First, generate a private key using OpenSSL. Then, create a **certificate
    signing request** ( **CSR** ) and generate a self-signed certificate using the
    key. Restart Apache to apply the changes and allow HTTPS traffic through the firewall.
    Test HTTPS access in a web browser.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们安装了 Apache **mod_ssl** 模块。此模块为我们的 Apache 服务器添加了 TLS 支持。**mod_ssl** 模块是启用
    Apache 中 SSL/TLS 支持所必需的，必须在生成自签名证书之前安装并配置该模块。该模块的当前版本还支持 SSL v3 和所有版本的 TLS。首先，使用
    OpenSSL 生成私钥。然后，创建一个**证书签名请求**（**CSR**）并使用该密钥生成自签名证书。重启 Apache 以应用更改，并允许通过防火墙的
    HTTPS 流量。在 Web 浏览器中测试 HTTPS 访问。
- en: There’s more...
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In this recipe, we used a self-signed certificate and encountered a **Not Secure**
    warning, as shown in *Figure 6* *.3* . To address this, we can generate a certificate
    through a CA. A CA is an entity that issues digital certificates to organizations
    or individuals after validating them. By obtaining a certificate from a CA, we
    can ensure that the SSL/TLS certificate is trusted by most web browsers and users’
    devices, eliminating warnings about insecure connections. CAs play a critical
    role in how the internet operates and how secure, encrypted communications are
    established.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们使用了自签名证书，并遇到了**不安全**的警告，如 *图 6* *.3* 所示。为了解决这个问题，我们可以通过 CA 生成证书。CA 是在验证组织或个人后发放数字证书的实体。通过从
    CA 获取证书，我们可以确保 SSL/TLS 证书被大多数 Web 浏览器和用户设备信任，从而消除关于不安全连接的警告。CA 在互联网的运作及加密通信的建立中发挥着至关重要的作用。
- en: There are several types of CAs, ranging from large, widely recognized organizations
    that issue certificates to the public to smaller, private CAs that might be internal
    to an organization for its own use. Public CAs such as Verisign, Comodo, and DigiCert
    provide extensive validation services, including **Extended Validation** ( **EV**
    ) and **Organization Validated** ( **OV** ) certificates that offer higher levels
    of security and trust. For websites handling sensitive transactions, these certificates
    can enhance credibility and user trust.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 证书颁发机构（CA）有多种类型，从大型、广泛认可的机构到发行证书给公众，到较小的私人 CA，这些 CA 可能是某个组织内部使用的。像 Verisign、Comodo
    和 DigiCert 这样的公共 CA 提供广泛的验证服务，包括 **扩展验证** (**EV**) 和 **组织验证** (**OV**) 证书，这些证书提供更高的安全性和信任度。对于处理敏感交易的网站，这些证书可以提升可信度和用户信任。
- en: Cloud service providers such as AWS, Microsoft Azure, and Google Cloud offer
    integrated SSL/TLS certificate management solutions that simplify the provisioning,
    management, and deployment of certificates within their ecosystems. ACM is ideal
    for AWS-native services, automating renewal and management, but it restricts certificate
    export outside AWS. Microsoft Azure’s Key Vault allows for centralized management
    of certificates, including those from external CAs, and integrates seamlessly
    with Azure services. Google Cloud provides managed SSL certificates specifically
    for its load balancers, offering automatic renewals and deployment.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 像 AWS、Microsoft Azure 和 Google Cloud 这样的云服务提供商提供集成的 SSL/TLS 证书管理解决方案，简化了证书在其生态系统中的配置、管理和部署。ACM
    非常适合 AWS 原生服务，自动化证书续期和管理，但它限制了证书的导出到 AWS 以外的地方。Microsoft Azure 的 Key Vault 允许集中管理证书，包括来自外部
    CA 的证书，并与 Azure 服务无缝集成。Google Cloud 为其负载均衡器提供托管的 SSL 证书，支持自动续期和部署。
- en: Additionally, for developers and small businesses that need a quick, cost-effective
    solution, automated CAs such as Let’s Encrypt offer **Domain Validated** ( **DV**
    ) certificates at no cost. These certificates are issued using automated processes,
    designed to ensure that the applicant controls the domain listed in the certificate.
    This method is highly efficient and perfect for securing websites rapidly.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，对于需要快速、成本效益高的解决方案的开发人员和小型企业，像 Let’s Encrypt 这样的自动化 CA 提供 **域名验证** (**DV**)
    证书，且无需费用。这些证书通过自动化过程颁发，旨在确保申请人控制证书中列出的域名。这种方法高效且非常适合快速保护网站。
- en: Ultimately, the choice of a certificate authority depends on our specific security
    needs, the level of trust we require, and our budget. Each type of CA offers different
    features and levels of security, making it crucial to select one that aligns with
    your objectives for security and customer trust.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，选择证书颁发机构取决于我们的具体安全需求、所需的信任级别和预算。每种类型的 CA 提供不同的功能和安全级别，因此选择与您的安全目标和客户信任相符的
    CA 至关重要。
- en: See also
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: Read more about SSL and TLS at [https://www.secdops.com/blog/ssl-tls-and-https-a-beginners-guide-to-web-security](https://www.secdops.com/blog/ssl-tls-and-https-a-beginners-guide-to-web-security)
    .
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读更多关于 SSL 和 TLS 的内容，访问 [https://www.secdops.com/blog/ssl-tls-and-https-a-beginners-guide-to-web-security](https://www.secdops.com/blog/ssl-tls-and-https-a-beginners-guide-to-web-security)。
- en: Creating an SSL/TLS certificate with ACM
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ACM 创建 SSL/TLS 证书
- en: In this recipe, we will create an **X.509 certificate** for a public domain
    that we own using **AWS Certificate Manager** ( **ACM** ). ACM public certificates
    are used with AWS services such as **Elastic Load Balancing** ( **ELB** ), **Amazon
    CloudFront** , **AWS Elastic Beanstalk** , **Amazon API Gateway** , and **AWS
    CloudFormation** .
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将使用**AWS 证书管理器**（**ACM**）为我们拥有的公共域名创建一个**X.509 证书**。ACM 公共证书用于 AWS 服务，如**弹性负载均衡**（**ELB**），**Amazon
    CloudFront**，**AWS Elastic Beanstalk**，**Amazon API Gateway** 和**AWS CloudFormation**。
- en: Getting ready
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We need the following to successfully complete this recipe:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要以下内容才能成功完成此示例：
- en: A working AWS account, **awsseccb-sandbox-1** , and a user, **awsseccbadmin1**
    , as described in the *Technical* *requirements* section.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有效的 AWS 帐户，**awsseccb-sandbox-1**，和一个用户，**awsseccbadmin1**，如*技术* *要求*部分所述。
- en: A domain name with any domain name provider (including AWS), with access to
    its control panel. I will be using a domain with the name **trainso.io** .
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与任何域名提供商（包括 AWS）一起，访问其控制面板的域名。我将使用一个名为**trainso.io**的域名。
- en: How to do it...
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实施...
- en: 'We can create a TLS certificate in ACM as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按以下步骤在 ACM 中创建 TLS 证书：
- en: Go to the **AWS Certificate Manager** dashboard. If you’re using ACM for the
    first time, you should see the **Get started** options. Currently, AWS provides
    options so that we can provision certificates, as well as create a private CA.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**AWS 证书管理器**仪表板。如果您是第一次使用 ACM，您应该看到**开始**选项。目前，AWS 提供选项，以便我们可以提供证书，并创建私有
    CA。
- en: '![Figure 6.4 – The AWS Certificate Manager dashboard](image/B21384_06_4.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.4 – AWS 证书管理器仪表板](image/B21384_06_4.jpg)'
- en: Figure 6.4 – The AWS Certificate Manager dashboard
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – AWS 证书管理器仪表板
- en: In the left sidebar, we should see the **Import a certificate** , **List certificates**
    , **Request a certificate** , and **AWS Private CA** options. Click on **Request**
    **a certificate** .
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧边栏中，我们应该看到**导入证书**，**列出证书**，**请求证书**和**AWS 私有 CA**选项。点击**请求** **证书**。
- en: Select **Request a public certificate** and click on **Next** .
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**请求公共证书**并点击**下一步**。
- en: '![Figure 6.5 – Certificate type configuration](image/B21384_06_5.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.5 – 证书类型配置](image/B21384_06_5.jpg)'
- en: Figure 6.5 – Certificate type configuration
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.5 – 证书类型配置
- en: Enter a fully qualified domain name in the **Domain names** textbox. To include
    all sub-domains, I will use a wildcard with the domain name ***.trainso.io** .
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**域名**文本框中输入完全合格的域名。为了包括所有子域，我将使用带有域名的通配符***.trainso.io**。
- en: For **Validation method** , select **DNS validation -** **recommended** .
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**验证方法**，选择**DNS 验证 - 推荐**。
- en: '![Figure 6.6 – Selecting a validation method](image/B21384_06_6.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.6 – 选择验证方法](image/B21384_06_6.jpg)'
- en: Figure 6.6 – Selecting a validation method
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.6 – 选择验证方法
- en: For **Key algorithm** , select **RSA 2048** .
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**密钥算法**，选择**RSA 2048**。
- en: '![Figure 6.7 – Selecting key algorithm](image/B21384_06_7.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.7 – 选择关键算法](image/B21384_06_7.jpg)'
- en: Figure 6.7 – Selecting key algorithm
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7 – 选择关键算法
- en: On the **Add Tags** screen, add tags if required and click on **Request** .
    We should see the new certificate on the **Certificates** page. We can also reach
    the **Certificates** page using the **List certificates** option from the left
    sidebar. The status of our certificate will be **Pending validation** .
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**添加标签**屏幕上，如有需要添加标签，然后点击**请求**。我们应该在**证书**页面上看到新证书。我们还可以使用左侧边栏的**列出证书**选项进入**证书**页面。我们的证书状态将是**等待验证**。
- en: On the **Certificates** page, click on the hyperlinked certificate ID to go
    to the certificate’s page.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**证书**页面上，点击超链接的证书 ID 进入证书页面。
- en: Scroll down to the **Domains** section, copy the CNAME name and CNAME value,
    and add them to our domain’s DNS records from the domain provider’s control panel.
    Note that with most domain providers, you will not have to copy and paste the
    whole CNAME (short for Canonical Name) value but only the part before the first
    dot ( **.** ). For example, if our CNAME value is **_b262683f801a4eb13d8eb4a36cd8a2ba.trainso.io.**
    , we may have to only enter **_b262683f801a4eb13d8eb4a36cd8a2ba** as the CNAME
    value in our domain provider’s control panel, excluding the trailing **.trainso.io.**
    . The domain provider could be Amazon Route 53 or an external provider, such as
    Namecheap or GoDaddy. Configuring DNS is outside the scope of this book, but I
    will provide some useful references in the *See also* section of this recipe.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动到**域名**部分，复制 CNAME 名称和 CNAME 值，并将其添加到我们的域名提供商控制面板中的 DNS 记录中。请注意，对于大多数域名提供商，你只需要复制并粘贴
    CNAME 值中的第一部分（即在第一个点 **.** 之前的部分），而不需要复制完整的 CNAME（Canonical Name）。例如，如果我们的 CNAME
    值是**_b262683f801a4eb13d8eb4a36cd8a2ba.trainso.io.**，我们可能只需要在域名提供商控制面板中输入**_b262683f801a4eb13d8eb4a36cd8a2ba**作为
    CNAME 值，而不包括后面的**.trainso.io.**。域名提供商可以是 Amazon Route 53 或外部提供商，如 Namecheap 或
    GoDaddy。DNS 配置不在本书的范围之内，但我会在此教程的*另见*部分提供一些有用的参考。
- en: Once the CNAME record is updated, we can go to the **Certificates** screen and
    check the status. Once successful, the value of the **Status** column of our certificate
    will change to **Issued** . It could take some time for the DNS changes to propagate.
    If the status is **Pending validation** , check again after some time, or refresh
    the page using the refresh button, until the status has changed to **Issued**
    .
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦 CNAME 记录更新完毕，我们可以进入**证书**界面并查看状态。成功后，证书的**状态**栏的值会变为**已颁发**。DNS 更改可能需要一些时间才能传播。如果状态为**待验证**，请过一段时间再检查，或使用刷新按钮刷新页面，直到状态变为**已颁发**。
- en: How it works...
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we created a certificate using ACM. We can request a certificate
    for one or more domain names. We need to specify a fully qualified domain name,
    such as **www.trainso.io** , or one that uses a wildcard, such as ***.trainso.io**
    , representing all the subdomains of **trainso.io** .
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们使用 ACM 创建了一个证书。我们可以为一个或多个域名请求证书。我们需要指定一个完全限定的域名，例如**www.trainso.io**，或者一个使用通配符的域名，如***.trainso.io**，表示**trainso.io**的所有子域名。
- en: Before issuing the certificate, we need to validate the ownership of the domain.
    We can do this either through DNS validation or email validation. We performed
    DNS validation in this recipe. AWS will provide a CNAME record per domain for
    DNS validation. We need to update this CNAME record on our domain’s DNS management
    service. Route 53 is Amazon’s DNS management service.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在颁发证书之前，我们需要验证域名的所有权。我们可以通过 DNS 验证或邮件验证来完成此操作。在本教程中，我们使用了 DNS 验证。AWS 会为每个域名提供一个
    CNAME 记录用于 DNS 验证。我们需要在域名的 DNS 管理服务中更新这个 CNAME 记录。Route 53 是 Amazon 的 DNS 管理服务。
- en: There’s more...
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: ACM public certificates are supported for AWS services such as ELB, Amazon CloudFront,
    AWS Elastic Beanstalk, Amazon API Gateway, and AWS CloudFormation. AWS does not
    allow us to use the ACM public certificates to enable SSL/TLS on our EC2 instances.
    However, ACM private CA-issued certificates can be used with EC2 instances, containers,
    and even our own servers.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: ACM 公共证书支持 AWS 服务，如 ELB、Amazon CloudFront、AWS Elastic Beanstalk、Amazon API Gateway
    和 AWS CloudFormation。AWS 不允许我们使用 ACM 公共证书来为我们的 EC2 实例启用 SSL/TLS。然而，通过 ACM 私有 CA
    颁发的证书可以用于 EC2 实例、容器，甚至我们自己的服务器。
- en: AWS does not charge us for the public TLS certificates that are provisioned
    through ACM. We only need to pay for the AWS resources we create to run our application.
    However, creating an ACM private CA is not free. For a private CA, we are charged
    a monthly fee, as well as for the private certificates we issue. We are not charged
    once we delete a private CA; however, if we restore a private CA, we will be charged
    for the time it was in the deleted state.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 不会向我们收取通过 ACM 提供的公共 TLS 证书的费用。我们只需支付我们创建的 AWS 资源费用，以便运行我们的应用程序。然而，创建 ACM
    私有 CA 并非免费的。对于私有 CA，我们需要支付月费，并为我们颁发的私有证书付费。一旦我们删除了私有 CA，就不再收费；然而，如果我们恢复了私有 CA，将会按照其被删除期间的时间收费。
- en: See also
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'We can learn more about DNS here: [https://www.secdops.com/blog/mastering-dns-resources-and-recipes](https://www.secdops.com/blog/mastering-dns-resources-and-recipes)
    .'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在这里了解更多关于 DNS 的内容：[https://www.secdops.com/blog/mastering-dns-resources-and-recipes](https://www.secdops.com/blog/mastering-dns-resources-and-recipes)。
- en: 'We can read more about ACM service integrations and view the current list of
    supported services here: https://docs.aws.amazon.com/acm/latest/userguide/acm-services.html
    .'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在这里阅读更多关于ACM服务集成的内容，并查看当前支持的服务列表：https://docs.aws.amazon.com/acm/latest/userguide/acm-services.html。
- en: Creating ELB target groups
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建ELB目标组
- en: In this recipe, we will learn how to create an **Elastic Load Balancer** ( **ELB**
    ) **target group** . The application load balancer and network load balancer route
    traffic to ELB target groups, unlike classic load balancers, which route traffic
    to individual EC2 instances.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在此步骤中，我们将学习如何创建**弹性负载均衡器**（**ELB**）**目标组**。应用程序负载均衡器和网络负载均衡器将流量路由到ELB目标组，而经典负载均衡器则将流量路由到单个EC2实例。
- en: Getting ready
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To follow this recipe, we need the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了遵循此步骤，我们需要以下内容：
- en: A working AWS account, **awsseccb-sandbox-1** , and a user **awsseccbadmin1**
    , as described in the *Technical* *requirements* section.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有效的AWS账户，**awsseccb-sandbox-1**，以及一个用户**awsseccbadmin1**，如*技术要求*部分所述。
- en: A VPC, **awsseccb-vpc** , following the *Setting up VPC plus VPC resources with
    minimal efforts* recipe from [*Chapter 5*](B21384_05.xhtml#_idTextAnchor169) .
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个VPC，**awsseccb-vpc**，按照[*第5章*](B21384_05.xhtml#_idTextAnchor169)中的*通过最小化努力设置VPC及其资源*步骤进行。
- en: Two EC2 instances in the aforementioned **awsseccb-vpc** VPC, following the
    *Launching an EC2 instance with a web server using user data* recipe in [*Chapter
    5*](B21384_05.xhtml#_idTextAnchor169) , with the following exceptions. Give names
    as **Cloudericks Web Server** and **Cloudericks Web Server 2** , respectively,
    while creation.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在前述**awsseccb-vpc** VPC中的两个EC2实例，按照[*第5章*](B21384_05.xhtml#_idTextAnchor169)中的*使用用户数据启动EC2实例并配置Web服务器*步骤进行，但有以下例外。在创建时分别命名为**Cloudericks
    Web Server**和**Cloudericks Web Server 2**。
- en: Tip
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Name is internally represented using a tag with key set to **Name** .
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 名称通过一个键为**Name**的标签在内部表示。
- en: Subnets should be public and selected in the **us-east-1a** and **us-east-1b**
    availability zones, respectively. For the second instance, replace **Cloudericks
    Web Server** within the user data with **Cloudericks Web Server 2** to distinguish
    the two web servers. The key pair and security group can be shared between the
    two instances.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子网应为公共子网，分别选择**us-east-1a**和**us-east-1b**可用区。对于第二个实例，将用户数据中的**Cloudericks Web
    Server**替换为**Cloudericks Web Server 2**，以区分两个Web服务器。密钥对和安全组可以在两个实例之间共享。
- en: Before proceeding, make sure that our instances are running and accessible directly
    from a browser. For additional security, after the ELB has been configured and
    tested, we can restrict access to these instances from our ELB’s security group.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在继续之前，确保我们的实例正在运行并且可以通过浏览器直接访问。为了增强安全性，在配置并测试完ELB后，我们可以通过ELB的安全组限制访问这些实例。
- en: How to do it...
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can create a target group as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按照以下步骤创建目标组：
- en: Log into the AWS Management Console and go to the **EC2** service.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到AWS管理控制台并进入**EC2**服务。
- en: In the left sidebar, under **Load Balancing** , click on **Target Groups** .
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧边栏的**负载均衡**下，点击**目标组**。
- en: Click **Create** **target group** .
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建** **目标组**。
- en: On the **Specify group details** page, under the **Basic configuration** section,
    select **Instances** for **Choose a** **target type** .
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**指定组详细信息**页面的**基本配置**部分，选择**实例**作为**选择目标类型**。
- en: '![Figure 6.8 – Choosing a target type](image/B21384_06_8.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图6.8 – 选择目标类型](image/B21384_06_8.jpg)'
- en: Figure 6.8 – Choosing a target type
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8 – 选择目标类型
- en: For **Target group name** , enter **cloudericks-tg** , or a meaningful name
    specific to your user case.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**目标组名称**，输入**cloudericks-tg**，或者一个与您的使用案例相关的有意义的名称。
- en: 'For **Protocol: Port** , select **HTTP** ; for **Port** , enter **80** ; and
    for **IP address type** , select **IPv4** .'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**协议：端口**，选择**HTTP**；对于**端口**，输入**80**；对于**IP地址类型**，选择**IPv4**。
- en: For **VPC** , select the **awsseccb-vpc** VPC, where our EC2 instances are present.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**VPC**，选择包含我们EC2实例的**awsseccb-vpc** VPC。
- en: Under **Protocol version** , select **HTTP1** .
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**协议版本**下，选择**HTTP1**。
- en: '![Figure 6.9 – Selecting the protocol version](image/B21384_06_9.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图6.9 – 选择协议版本](image/B21384_06_9.jpg)'
- en: Figure 6.9 – Selecting the protocol version
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9 – 选择协议版本
- en: In the **Health checks** section, for **Health check protocol** , select **HTTP**
    , and for **Health check path** , enter **/index.html** . Leave other values as-is
    and click on **Next** .
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**健康检查**部分，对于**健康检查协议**，选择**HTTP**，对于**健康检查路径**，输入**/index.html**。保持其他值不变，然后点击**下一步**。
- en: In the **Register targets** pane, select the **Cloudericks Web Server** and
    **Cloudericks Web Server 2** EC2 instances and click on **Include as pending below**
    . Instances should now appear under **Review targets** .
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**注册目标**面板中，选择**Cloudericks Web Server** 和 **Cloudericks Web Server 2** EC2
    实例，并点击**作为待处理目标添加下面**。实例现在应该出现在**审核目标**下。
- en: Click on **Create target group** . We should see a message that the target group
    has been created successfully.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建目标组**。我们应该看到目标组已成功创建的消息。
- en: The health status of the targets will now be **Unused** . It will change after
    they have been attached to an ELB.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目标的健康状态现在为**未使用**。当它们被附加到 ELB 后，状态将发生变化。
- en: How it works...
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we created a target group for EC2 instances with the HTTP protocol.
    We can create an application load balancer with a target group, using the HTTP
    or HTTPS protocol. A network load balancer needs a target group with a TCP or
    TLS protocol. We can also create target groups for IP addresses and AWS Lambda
    functions. By selecting the **IP addresses** option, we can select public IP addresses
    that are outside of AWS.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们为 EC2 实例创建了一个使用 HTTP 协议的目标组。我们可以使用 HTTP 或 HTTPS 协议创建带有目标组的应用程序负载均衡器。网络负载均衡器需要一个使用
    TCP 或 TLS 协议的目标组。我们还可以为 IP 地址和 AWS Lambda 函数创建目标组。通过选择**IP 地址**选项，我们可以选择 AWS 外部的公共
    IP 地址。
- en: For the health check, we set the protocol to HTTP and the path to **/index.html**
    . We can override the port for a health check, if necessary, by selecting the
    **Override** option for the port, under **Advanced health check settings** . We
    can set the time to wait for a response from an instance (timeout), the time between
    health checks (interval), the number of consecutive failures before declaring
    an instance unhealthy (unhealthy threshold), the number of consecutive successes
    before declaring an instance healthy (healthy threshold), and the HTTP response
    codes to check for success ( success codes).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 对于健康检查，我们将协议设置为 HTTP，路径设置为**/index.html**。如果需要，我们可以通过在**高级健康检查设置**下选择**覆盖**端口选项，来覆盖健康检查的端口。我们可以设置等待实例响应的时间（超时），健康检查之间的时间（间隔），在声明实例不健康之前的连续失败次数（不健康阈值），在声明实例健康之前的连续成功次数（健康阈值），以及检查成功的
    HTTP 响应代码（成功代码）。
- en: The target group instances will have an initial state of unused when they are
    created. When the target group is attached to an ELB, the status will change to
    initial. If the health checks pass, then the status changes to **Healthy** . Other
    supported statuses include unhealthy if the health check fails, or draining if
    the target is being unregistered and connection draining is happening.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当目标组实例创建时，它们的初始状态为未使用。当目标组附加到 ELB 后，状态将变为初始状态。如果健康检查通过，则状态变为**健康**。其他支持的状态包括如果健康检查失败，则为不健康，或者如果目标正在注销并且正在进行连接排空，则为排空。
- en: There’s more...
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In this recipe, we created a target group with the HTTP protocol. Target groups
    can be created with the **HTTP** , **HTTPS** , **TCP** , **TLS** , **UDP** , **GENEVE**
    , and **TCP_UDP** protocols. We can follow the steps in this recipe to create
    target groups with other protocols. For example, we can add a target group with
    the HTTPS protocol and the port set to **443** , and then add EC2 instances with
    SSL/TLS enabled to the target group. For TCP passthrough of an HTTPS request with
    a network load balancer, which is needed for TLS termination at EC2, we should
    set the protocol to TCP but with the port set to **443** .
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们创建了一个使用 HTTP 协议的目标组。目标组可以使用**HTTP**、**HTTPS**、**TCP**、**TLS**、**UDP**、**GENEVE**
    和 **TCP_UDP** 协议创建。我们可以按照这个食谱中的步骤，使用其他协议创建目标组。例如，我们可以添加一个使用 HTTPS 协议并将端口设置为**443**的目标组，然后将启用了
    SSL/TLS 的 EC2 实例添加到该目标组。对于通过网络负载均衡器进行 HTTPS 请求的 TCP 透传，这对于在 EC2 上进行 TLS 终止是必要的，我们应该将协议设置为
    TCP，但端口设置为**443**。
- en: See also
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: We can read more about load balancing in AWS at [https://www.cloudericks.com/blog/understanding-load-balancing-in-aws](https://www.cloudericks.com/blog/understanding-load-balancing-in-aws)
    .
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 [https://www.cloudericks.com/blog/understanding-load-balancing-in-aws](https://www.cloudericks.com/blog/understanding-load-balancing-in-aws)
    上阅读更多关于 AWS 负载均衡的信息。
- en: Using an application load balancer with TLS termination at the ELB
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用带 TLS 终止的应用程序负载均衡器在 ELB 上
- en: '**Application load balancers** ( **ALBs** ) work at the request layer (application
    layer of the OSI model) and are used for HTTP and HTTPS requests. ALBs provide
    advanced routing capabilities at the application layer for requesting and path
    parameter-based routing. Architecture patterns, such as microservices architecture,
    can use ALBs to route requests to different web servers while making use of request
    parameters.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**应用负载均衡器**（**ALBs**）在请求层（OSI模型的应用层）工作，用于HTTP和HTTPS请求。ALBs为请求和基于路径参数的路由提供应用层的高级路由功能。架构模式，例如微服务架构，可以使用ALBs将请求路由到不同的Web服务器，同时利用请求参数。'
- en: Getting ready
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To follow this recipe, we need the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随此教程，我们需要以下内容：
- en: A working AWS account, **awsseccb-sandbox-1** , and a user **awsseccbadmin1**
    , as described in the *Technical* *requirements* section.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有效的AWS账户，**awsseccb-sandbox-1**，以及一个用户**awsseccbadmin1**，如*技术要求*部分所述。
- en: Create a target group, **cloudericks-tg** , with two EC2 instances, following
    the *Creating ELB target groups* recipe of this chapter, and the following resources
    should have been created as part of the preparation for that recipe – a VPC, **awsseccb-vpc**
    , and a security group, **cloudericks-web-server** .
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个目标组**cloudericks-tg**，包含两个EC2实例，按照本章的*创建ELB目标组*教程操作，此外，以下资源应作为准备工作的一部分创建——一个VPC，**awsseccb-vpc**，以及一个安全组，**cloudericks-web-server**。
- en: To select HTTPS (secure HTTP) as the ELB listening protocol, we need an ACM
    certificate. We can create an ACM certificate by following the *Creating an SSL/TLS
    certificate with ACM* recipe of this chapter.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了将HTTPS（安全HTTP）作为ELB监听协议，我们需要一个ACM证书。我们可以按照本章的*创建SSL/TLS证书与ACM*教程来创建一个ACM证书。
- en: How to do it...
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作方法...
- en: 'We can create and test an ALB as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按以下步骤创建并测试ALB：
- en: Go to the **EC2** service in the console.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到控制台中的**EC2**服务。
- en: In the left sidebar, under **Load Balancing** , click on **Load Balancers**
    from the left sidebar.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧栏中，点击**负载均衡**，然后点击左侧栏中的**负载均衡器**。
- en: Click on **Create** **load balancer** .
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建** **负载均衡器**。
- en: We should see the options to create the three primary types of load balancers
    – namely, **Application Load Balancer** , **Network Load Balancer** , and **Gateway
    Load Balancer** . Click **Create** under **Application** **Load Balancer** .
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们应该看到创建三种主要类型负载均衡器的选项——即**应用负载均衡器**、**网络负载均衡器**和**网关负载均衡器**。点击**创建**下的**应用负载均衡器**。
- en: '![Figure 6.10 – The load balancer types](image/B21384_06_10.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图6.10 – 负载均衡器类型](image/B21384_06_10.jpg)'
- en: Figure 6.10 – The load balancer types
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.10 – 负载均衡器类型
- en: On the **Basic configuration** screen, for **Load balancer name** , enter **cloudericks-app-lb**
    , or a meaningful name as required. For **Scheme** , select **Internet-facing**
    , and for **IP address type** , select **IPv4** .
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**基本配置**屏幕中，输入**负载均衡器名称**，例如**cloudericks-app-lb**，或根据需要输入一个有意义的名称。在**方案**中选择**面向互联网**，在**IP地址类型**中选择**IPv4**。
- en: '![Figure 6.11 – Basic configuration](image/B21384_06_11.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图6.11 – 基本配置](image/B21384_06_11.jpg)'
- en: Figure 6.11 – Basic configuration
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.11 – 基本配置
- en: In the **Network mapping** section, for **VPC** , select our VPC, **awsseccb-vpc**
    .
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**网络映射**部分，选择我们的VPC，**awsseccb-vpc**。
- en: In the **Network mapping** section, under **Mappings** , select the availability
    zones and public subnets where we have our instances.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**网络映射**部分，在**映射**中选择我们实例所在的可用区和公有子网。
- en: '![Figure 6.12 – Selecting the availability zones and subnets](image/B21384_06_12.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图6.12 – 选择可用区和子网](image/B21384_06_12.jpg)'
- en: Figure 6.12 – Selecting the availability zones and subnets
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.12 – 选择可用区和子网
- en: Select the **cloudericks-web-server** security group, which allows **HTTP**
    and **HTTPS** from **Anywhere** .
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**cloudericks-web-server**安全组，该安全组允许**HTTP**和**HTTPS**从**任何地方**访问。
- en: Under **Listeners and routing** , set **Protocol** to **HTTPS** . The port will
    be set automatically to **443** . For **Default action** , select our target group,
    **cloudericks-tg** .
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**监听器和路由**部分，将**协议**设置为**HTTPS**。端口会自动设置为**443**。在**默认操作**中，选择我们的目标组**cloudericks-tg**。
- en: '![Figure 6.13 – Adding an HTTPS Listener](image/B21384_06_13.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图6.13 – 添加HTTPS监听器](image/B21384_06_13.jpg)'
- en: Figure 6.13 – Adding an HTTPS Listener
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.13 – 添加HTTPS监听器
- en: Under **Secure listener settings** , for **Certificate source** , select **From
    ACM** , and for **Certificate name** , select the ACM certificate we created for
    this recipe.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**安全监听器设置**下，选择**证书来源**为**来自ACM**，并选择我们为本教程创建的ACM证书作为**证书名称**。
- en: '![Figure 6.14 – Selecting an SSL/TLS server certificate](image/B21384_06_14.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.14 – 选择 SSL/TLS 服务器证书](image/B21384_06_14.jpg)'
- en: Figure 6.14 – Selecting an SSL/TLS server certificate
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.14 – 选择 SSL/TLS 服务器证书
- en: Optionally, you can include an AWS WAF or create an **AWS Global Accelerator**
    for this load balancer, as shown in the following screenshot. Let’s skip them
    for now.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，你可以为此负载均衡器添加 AWS WAF 或创建一个 **AWS Global Accelerator**，如下图所示。我们暂时跳过这些内容。
- en: '![Figure 6.15 – Configuring AWS WAF and AWS Global Accelerator](image/B21384_06_15.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.15 – 配置 AWS WAF 和 AWS Global Accelerator](image/B21384_06_15.jpg)'
- en: Figure 6.15 – Configuring AWS WAF and AWS Global Accelerator
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.15 – 配置 AWS WAF 和 AWS Global Accelerator
- en: Review the details and click **Create load balancer** . If we go to the target
    group, **cloudericks-tg** , the health status of our instances will be first **Initial**
    , and after some time, the status should change to **Healthy** .
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看详情并点击 **创建负载均衡器**。如果我们进入目标组 **cloudericks-tg**，实例的健康状态最初会显示为 **Initial**，经过一段时间后，状态应该会变为
    **Healthy**。
- en: Copy the DNS name from the **Description** tab of the ELB, add the **https://**
    prefix to it, as shown in the following figure, and enter this URL in a browser.
    Should a security warning appear, select **Advanced** , and then click the link
    to continue. This will display one of the web servers. By refreshing the page
    multiple times, you can observe the response from both web servers.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 ELB 的 **描述** 标签页复制 DNS 名称，在其前面加上 **https://** 前缀，如下图所示，然后在浏览器中输入此 URL。如果出现安全警告，选择
    **高级**，然后点击链接继续。这将显示其中一个 Web 服务器。通过多次刷新页面，可以观察到来自两个 Web 服务器的响应。
- en: '![Figure 6.16 – The response from the load balancer, showing our first instance
    data](image/B21384_06_16.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.16 – 负载均衡器的响应，显示我们的第一个实例数据](image/B21384_06_16.jpg)'
- en: Figure 6.16 – The response from the load balancer, showing our first instance
    data
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.16 – 负载均衡器的响应，显示我们的第一个实例数据
- en: We will get a warning, since our URL (ELB DNS) does not match the certificate’s
    domain, which is ***.trainso.io** in my case.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会收到一个警告，因为我们的 URL（ELB DNS）与证书的域名不匹配，在我的案例中是 ***.trainso.io**。
- en: Create a **CNAME** record for the domain, with **Name** (or **Host** ) set to
    **cloudericks.trainso.io** (this will be only **cloudericks** if the DNS service
    provider automatically appends the domain name) and **Value** as our DNS name,
    which in my case is **cloudericks-app-lb-901703641.us-east-1.elb.amazonaws.com**
    . Remember to replace **trainso.io** with the domain for which you created the
    certificate.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为域名创建一个 **CNAME** 记录，将 **Name**（或 **Host**）设置为 **cloudericks.trainso.io**（如果
    DNS 服务提供商自动附加域名，则此值仅为 **cloudericks**），将 **Value** 设置为我们的 DNS 名称，在我的案例中是 **cloudericks-app-lb-901703641.us-east-1.elb.amazonaws.com**。记得将
    **trainso.io** 替换为你为其创建证书的域名。
- en: 'Once the DNS changes are propagated, which could take some time, we should
    be able to run our subdomain URL (e.g., **cloudericks.trainso.io** in my case)
    and we should get a successful response, as seen in the following figure:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦 DNS 更改被传播（可能需要一些时间），我们应该能够访问我们的子域名 URL（例如，我的案例中是 **cloudericks.trainso.io**），并且应该能收到成功的响应，如下图所示：
- en: '![Figure 6.17 – A successful HTTPS response with an SSL/TLS certificate](image/B21384_06_17.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.17 – 成功的 HTTPS 响应，带有 SSL/TLS 证书](image/B21384_06_17.jpg)'
- en: Figure 6.17 – A successful HTTPS response with an SSL/TLS certificate
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.17 – 成功的 HTTPS 响应，带有 SSL/TLS 证书
- en: Important note
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: There are multiple ways to point our domain with ELB, including creating a Route
    53 account and changing the names of the servers of our domain, or adding a CNAME
    record for a subdomain.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方式可以通过 ELB 指定我们的域名，包括创建一个 Route 53 账户并更改我们域名的服务器名称，或者为子域名添加 CNAME 记录。
- en: How it works...
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we created an internet-facing load balancer. We set the listening
    protocol to HTTPS (secure HTTP), and on the **Configure Security Settings** page,
    we selected an ACM certificate. We set the security policy to **ELBSecurityPolicy-2016-08**
    . The security policy is an SSL negotiation configuration that’s used to negotiate
    SSL connections with clients.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们创建了一个面向互联网的负载均衡器。我们将监听协议设置为 HTTPS（安全 HTTP），并在 **配置安全设置** 页面上选择了一个 ACM
    证书。我们将安全策略设置为 **ELBSecurityPolicy-2016-08**。安全策略是一种 SSL 协商配置，用于与客户端协商 SSL 连接。
- en: We terminated TLS at the ELB level. Note that the connection to the instance
    from the ELB is without TLS. The ALB only supports TLS/SSL termination at the
    ELB level. The network load balancer and classic load balancer can be used to
    terminate TLS/SSL at the EC2 instance level, by using the TCP protocol on port
    **443** .
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 ELB 层终止了 TLS。请注意，从 ELB 到实例的连接没有使用 TLS。ALB 仅支持在 ELB 层进行 TLS/SSL 终止。网络负载均衡器和经典负载均衡器可以通过使用
    TCP 协议在端口**443**上，在 EC2 实例层终止 TLS/SSL。
- en: When we terminate TLS at the ELB for an HTTPS request, the request is decrypted
    at the ELB and sent unencrypted to the EC2 instances over the private network
    within our VPC. When we terminate an HTTPS request’s TLS at the EC2 instance,
    the request is not decrypted at the ELB and is only decrypted at the EC2 instance.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在 ELB 层终止 HTTPS 请求的 TLS 时，请求会在 ELB 解密，并通过私有网络以未加密的形式发送到 EC2 实例。若在 EC2 实例终止
    HTTPS 请求的 TLS，则该请求不会在 ELB 解密，而只会在 EC2 实例上解密。
- en: Terminating TLS at the ELB level avoids the overhead of TLS termination at EC2
    instances and is more efficient. However, if there is a compliance requirement
    for end-to-end encryption, we should terminate at the EC2 instance level.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ELB 层进行 TLS 终止可以避免在 EC2 实例上进行 TLS 终止的开销，更加高效。然而，如果有端到端加密的合规性要求，我们应该在 EC2 实例层进行终止。
- en: There’s more...
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'Let’s quickly go through some more important concepts related to ALBs:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速浏览一些与 ALB 相关的重要概念：
- en: ALBs only support HTTP or HTTPS protocols. For other protocols, such as TCP,
    we need to use a network load balancer or classic load balancer.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ALB 只支持 HTTP 或 HTTPS 协议。对于其他协议，例如 TCP，我们需要使用网络负载均衡器或经典负载均衡器。
- en: ALBs only support TLS/SSL termination at the ELB level.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ALB 只支持在 ELB 层进行 TLS/SSL 终止。
- en: We can enable sticky sessions for ALBs at the target group level. However, we
    cannot enable sticky sessions at individual EC2 instances with ALBs.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在目标组层为 ALB 启用粘性会话。然而，我们不能在个别 EC2 实例上启用 ALB 的粘性会话。
- en: We can do path-based routing with ALBs if path patterns are enabled.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果启用了路径模式，我们可以通过 ALB 实现基于路径的路由。
- en: 'We set the security policy for SSL/TLS negotiation to **ELBSecurityPolicy-2016-08**
    , which is the default. The following are the currently available policies: **ELBSecurityPolicy-**
    **2016-08** , **ELBSecurityPolicyTLS-1-2-2017-01** , **ELBSecurityPolicy-TLS-1-1-2017-01**
    , **ELBSecurityPolicyTLS-1-2-Ext-2018-06** , **ELBSecurity** **Policy-FS-2018-06**
    , **ELBSecurityPolicy-2015-05** , **ELBSecurityPolicy-TLS** **-1-0-2015-04** ,
    **ELBSecurityPolicy-FS-1-2-Res-2019-08** , **ELBSecurityPolicy** **-FS-1-1-2019-08**
    , and **ELBSecurityPolicy-FS-1-2-2019-08** .'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们为 SSL/TLS 协商设置了安全策略为**ELBSecurityPolicy-2016-08**，这是默认设置。以下是当前可用的策略：**ELBSecurityPolicy-2016-08**，**ELBSecurityPolicyTLS-1-2-2017-01**，**ELBSecurityPolicy-TLS-1-1-2017-01**，**ELBSecurityPolicyTLS-1-2-Ext-2018-06**，**ELBSecurityPolicy-FS-2018-06**，**ELBSecurityPolicy-2015-05**，**ELBSecurityPolicy-TLS-1-0-2015-04**，**ELBSecurityPolicy-FS-1-2-Res-2019-08**，**ELBSecurityPolicy-FS-1-1-2019-08**，以及**ELBSecurityPolicy-FS-1-2-2019-08**。
- en: See also
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: We can read more about creating a listener for our ALB at [https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html)
    .
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在[https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html)
    阅读更多关于为 ALB 创建监听器的信息。
- en: Using a network load balancer with TLS termination at EC2
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 EC2 上使用网络负载均衡器进行 TLS 终止
- en: '**Network load balancers** are used to load-balance TCP traffic and work at
    layer 4 of the OSI model. They provide very high performance compared to other
    load balancer types and can support millions of requests per second, with very
    low latencies.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络负载均衡器**用于负载均衡 TCP 流量，工作在 OSI 模型的第 4 层。与其他类型的负载均衡器相比，它们提供了非常高的性能，并且能够支持每秒数百万个请求，延迟极低。'
- en: Getting ready
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'To follow this recipe, we need the following:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 要按照此方案操作，我们需要以下内容：
- en: A working AWS account, **awsseccb-sandbox-1** , and a user **awsseccbadmin1**
    , as described in the *Technical* *requirements* section.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如*技术要求*部分所述，我们需要一个有效的 AWS 账户，**awsseccb-sandbox-1**，以及用户**awsseccbadmin1**。
- en: Create a target group, **cloudericks-tg-tcp** , following the *Creating ELB
    target groups* recipe of this chapter, but selecting TCP instead of HTTP as the
    protocol and the port as **443** . The following resources should have been created
    as part of the preparation for that recipe – a VPC, **awsseccb-vpc** , and a security
    group, **cloudericks-web-server** . For this recipe, we need an EC2 instance,
    following the *Launching an EC2 Instance with a web server using user data* recipe
    from [*Chapter 5*](B21384_05.xhtml#_idTextAnchor169) .
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个目标组**cloudericks-tg-tcp**，按照本章的*创建ELB目标组*的步骤，但选择TCP而不是HTTP作为协议，端口选择**443**。作为准备该步骤的一部分，应该已经创建了以下资源
    - 一个VPC，**awsseccb-vpc**，和一个安全组，**cloudericks-web-server**。对于此步骤，我们需要一个EC2实例，按照[*第5章*](B21384_05.xhtml#_idTextAnchor169)中的*使用用户数据启动带有Web服务器的EC2实例*的步骤。
- en: Enable HTTPS for our web server, following the *Enabling HTTPS for a web server
    on an EC2 instance* recipe, as we want HTTPS on an EC2 instance for this recipe.
    Make sure that our instances can be reached using the **https://** prefix.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的Web服务器启用HTTPS，按照*在EC2实例上为Web服务器启用HTTPS*的步骤，因为我们希望在此步骤中的EC2实例上使用HTTPS。确保我们的实例可以使用**https://**前缀访问。
- en: To select HTTPS (secure HTTP) as the ELB listening protocol, we need an ACM
    certificate. We can create an ACM certificate by following the *Creating an SSL/TLS
    certificate with ACM* recipe of this chapter.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要将HTTPS（安全HTTP）作为ELB监听协议，我们需要一个ACM证书。我们可以按照本章的*使用ACM创建SSL/TLS证书*的步骤创建ACM证书。
- en: How to do it...
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'We can create and test a network load balancer with TLS termination at an EC2
    instance, as follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建并测试一个在EC2实例上进行TLS终止的网络负载均衡器，如下所示：
- en: Log into the AWS Management Console and go to the **EC2** service.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录AWS管理控制台，转到**EC2**服务。
- en: Click on **Load Balancers** from the left sidebar.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧边栏点击**负载均衡器**。
- en: Click on **Create load balancer** . We should see the options to create three
    types of load balancers, **Application Load Balancer** , **Network Load Balancer**
    , and **Classic Load Balancer** , as shown in *Figure 6* *.10* .
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建负载均衡器**。我们应该看到创建三种类型的负载均衡器的选项，**应用负载均衡器**，**网络负载均衡器**和**经典负载均衡器**，如*图6*
    *.10*所示。
- en: Under **Network Load Balancer** , click on **Create** .
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**网络负载均衡器**下，点击**创建**。
- en: On the **Create Network Load Balancer** screen, under the **Basic configuration**
    section, enter **cloudericks-nw-lb** for **Load balancer name** ; for **Scheme**
    , select **internet-facing** ; and for **IP address type** , select **IPv4** .
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**创建网络负载均衡器**屏幕上，在**基本配置**部分，输入**cloudericks-nw-lb**作为**负载均衡器名称**；对于**方案**，选择**面向互联网**；对于**IP地址类型**，选择**IPv4**。
- en: In the **Network mapping** section, for **VPC** , select our VPC, **awsseccb-vpc**
    .
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**网络映射**部分，对于**VPC**，选择我们的VPC，**awsseccb-vpc**。
- en: In the **Network mapping** section, under **Mappings** , select the availability
    zones and public subnets where we have our instances, as shown in *Figure 6* *.12*
    .
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**网络映射**部分，在**映射**下，选择我们的实例所在的可用区和公共子网，如*图6* *.12*所示。
- en: Under **Security groups** , select the **cloudericks-web-server** security group.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**安全组**下，选择**cloudericks-web-server**安全组。
- en: For **Protocol** , select **TCP** , and set the value for **Port** to **443**
    . For **Target group** , select **cloudericks-tg-tcp** .
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**协议**，选择**TCP**，并将**端口**的值设置为**443**。对于**目标组**，选择**cloudericks-tg-tcp**。
- en: Optionally, you can create an AWS Global Accelerator for this load balancer.
    Let’s skip it for now. With the ALB, we also had the option to include an AWS
    WAF, as we saw in *Figure 6* *.15* .
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，您可以为此负载均衡器创建AWS全球加速器。暂时跳过。对于ALB，我们还有包括AWS WAF的选项，正如我们在*图6* *.15*中看到的。
- en: Leave other details as-is and click on **Create** **load balancer** .
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其他细节保持不变，点击**创建负载均衡器**。
- en: Copy the DNS name from the **Description** tab of the ELB, add the **https://**
    prefix to it, as shown in the following figure, and enter this URL in a browser.
    Should a security warning appear, select **Advanced** , and then click the link
    to continue. This will display one of the web servers. By refreshing the page
    multiple times, you can observe the response from both web servers.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从ELB的**描述**选项卡中复制DNS名称，将**https://**前缀添加到其中，如下图所示，在浏览器中输入此URL。如果出现安全警告，请选择**高级**，然后点击继续链接。这将显示一个Web服务器。通过多次刷新页面，您可以观察来自两个Web服务器的响应。
- en: '![Figure 6.18 – The network load balancer response](image/B21384_06_18.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![图6.18 – 网络负载均衡器响应](image/B21384_06_18.jpg)'
- en: Figure 6.18 – The network load balancer response
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.18 – 网络负载均衡器响应
- en: Here, we are performing a TLS termination in the EC2 instance; hence, we do
    not have to configure a certificate for the load balancer. We get a warning in
    the browser because we are using a self-signed certificate. If we use a certificate
    signed by a CA, we will not receive a warning.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在 EC2 实例上执行 TLS 终止；因此，我们不需要为负载均衡器配置证书。我们在浏览器中收到警告，因为我们使用的是自签名证书。如果我们使用由
    CA 签名的证书，我们将不会收到警告。
- en: How it works...
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we created a **network load balancer** ( **NLB** ) with TLS
    termination at EC2. Most of the options were the same as what we saw in the *Using
    an application load balancer with TLS termination at the ELB* recipe of this chapter.
    In this recipe, we used the TCP protocol and port **443** . This was done to allow
    the NLB to simply pass the HTTPS request to the EC2 instance without decrypting
    it at the ELB level. The target group should also be configured with the TCP protocol
    and with port **443** , allowing TCP passthrough. If we select TLS (secure TCP)
    instead of TCP, NLB will decrypt the request at ELB itself.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们创建了一个**网络负载均衡器**（**NLB**），在 EC2 上进行了 TLS 终止。大部分选项与本章中*在 ELB 上使用应用负载均衡器进行
    TLS 终止*示例中所见相同。在这个示例中，我们使用了 TCP 协议和端口**443**。这样做是为了让 NLB 只需将 HTTPS 请求简单地传递给 EC2
    实例，而不在 ELB 层解密它。目标组也应配置为 TCP 协议，并使用端口**443**，允许 TCP 透传。如果我们选择 TLS（安全 TCP）而不是 TCP，NLB
    将在 ELB 自身解密请求。
- en: There’s more...
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In this recipe, we did TCP passthrough for an HTTPS request and performed TLS
    termination at the EC2 instance. TLS termination at the EC2 instance will consume
    more EC2 resources and provide an extra load for the EC2 instance. We will also
    need to manage the certificate across all the EC2 instances. However, if we require
    end-to-end encryption due to compliance or government policies, this is the preferred
    way. Otherwise, the preferred approach is to perform SSL/TLS termination at the
    ELB level, as we saw in the *Using an application load balancer with TLS termination
    at the ELB* recipe of this chapter. To terminate SSL/TLS at the NLB, we need to
    set the protocol to TLS (secure TCP) and select an ACM certificate.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们对 HTTPS 请求进行了 TCP 透传，并在 EC2 实例上执行了 TLS 终止。在 EC2 实例上进行 TLS 终止将消耗更多的
    EC2 资源，并为 EC2 实例提供额外的负载。我们还需要在所有 EC2 实例上管理证书。然而，如果由于合规性或政府政策要求需要端到端加密，这是首选方式。否则，首选方法是在
    ELB 层执行 SSL/TLS 终止，就像我们在本章中*在 ELB 上使用应用负载均衡器进行 TLS 终止*示例中所见。要在 NLB 上终止 SSL/TLS，我们需要将协议设置为
    TLS（安全 TCP）并选择 ACM 证书。
- en: See also
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'We can read more about TLS termination for load balancers in AWS here: [https://www.cloudericks.com/blog/understanding-tls-termination-with-load-balancers-in-aws](https://www.cloudericks.com/blog/understanding-tls-termination-with-load-balancers-in-aws)
    .'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在这里阅读有关 AWS 负载均衡器 TLS 终止的更多信息：[https://www.cloudericks.com/blog/understanding-tls-termination-with-load-balancers-in-aws](https://www.cloudericks.com/blog/understanding-tls-termination-with-load-balancers-in-aws)。
- en: Securing S3 using CloudFront and TLS
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CloudFront 和 TLS 保护 S3
- en: In this recipe, we will learn how to secure an S3 bucket by adding a CloudFront
    distribution layer. We will enable SSL/TLS on the CloudFront distribution to allow
    HTTPS traffic. Initially, we will utilize the default CloudFront certificate (
    ***.cloudfront.net** ), and then proceed to configure the CloudFront distribution
    with a custom domain, using an ACM certificate.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何通过添加 CloudFront 分发层来保护 S3 存储桶。我们将在 CloudFront 分发上启用 SSL/TLS 以允许
    HTTPS 流量。最初，我们将利用默认的 CloudFront 证书（***.cloudfront.net**），然后继续配置 CloudFront 分发以使用
    ACM 证书的自定义域。
- en: Getting ready
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We need the following to successfully complete this recipe.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要以下内容才能成功完成这个示例。
- en: A working AWS account, **awsseccb-sandbox-1** , and a user **awsseccbadmin1**
    , as described in the *Technical* *requirements* section.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为**awsseccb-sandbox-1**的有效 AWS 帐户和一个名为**awsseccbadmin1**的用户，如*技术要求*部分所述。
- en: We need an S3 bucket with a file called **index.html** . The content of the
    file should be **<h1> Cloudericks Web Server </h1>** . We can create an S3 bucket
    by referring to *Technical requirements* section of [*Chapter 2*](B21384_02.xhtml#_idTextAnchor043)
    .
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要一个名为**index.html**的 S3 存储桶。文件的内容应为**<h1> Cloudericks Web Server </h1>**。我们可以通过参考[*第
    2 章*](B21384_02.xhtml#_idTextAnchor043)的*技术要求*部分来创建一个 S3 存储桶。
- en: For the *CloudFront distribution with a custom domain and ACM certificate* section
    of this recipe, we need to create an ACM certificate, following the *Creating
    an SSL/TLS certificate with an ACM* recipe of this chapter.
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于本食谱中*使用自定义域名和 ACM 证书的 CloudFront 分发*部分，我们需要创建一个 ACM 证书，按照本章的*使用 ACM 创建 SSL/TLS
    证书*食谱进行操作。
- en: How to do it...
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We can add a CloudFront distribution to an S3 bucket with or without a custom
    domain. We will see both approaches in this recipe.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为 S3 桶添加一个 CloudFront 分发，无论是否使用自定义域名。我们将在本食谱中介绍这两种方法。
- en: CloudFront distribution with a default CloudFront domain
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用默认 CloudFront 域的 CloudFront 分发
- en: 'We can add a CloudFront distribution to an S3 bucket with a default CloudFront
    domain and certificate as follows:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按如下方式将 CloudFront 分发添加到具有默认 CloudFront 域和证书的 S3 桶：
- en: Log into the AWS Management Console and go to the **CloudFront** service.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到 AWS 管理控制台并进入**CloudFront**服务。
- en: If you are new to CloudFront, you should see a screen with a **Create a CloudFront
    distribution** button. Click on it. Otherwise, you can first click on **Distributions**
    from the left sidebar and then **CloudFront distribution** .
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你是 CloudFront 新手，你应该会看到一个包含**创建 CloudFront 分发**按钮的页面。点击它。否则，你可以先从左侧边栏点击**分发**，然后选择**CloudFront
    分发**。
- en: '![Figure 6.19 – Creating a CloudFront distribution](image/B21384_06_19.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.19 – 创建 CloudFront 分发](image/B21384_06_19.jpg)'
- en: Figure 6.19 – Creating a CloudFront distribution
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.19 – 创建 CloudFront 分发
- en: In the **Origin** pane, For **Origin domain** , select the S3 bucket we created
    for this recipe. Leave **Origin Path** empty. For **Name** , use the auto-generated
    value. For **Origin access** , select **Origin access** **control settings** .
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**源站**面板中，对于**源站域名**，选择我们为本食谱创建的 S3 桶。保持**源站路径**为空。对于**名称**，使用自动生成的值。对于**源访问**，选择**源访问控制设置**。
- en: '![Figure 6.20 – Setting the origin details](image/B21384_06_20.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.20 – 设置源站详情](image/B21384_06_20.jpg)'
- en: Figure 6.20 – Setting the origin details
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.20 – 设置源站详情
- en: Click on **Create new OAC** . For the name, we can use the auto-populated name.
    For the signing behavior, select **Sign requests (recommended)** . Leave everything
    as default, as shown in the following figure, and click on **Create** .
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建新 OAC**。对于名称，我们可以使用自动填充的名称。对于签名行为，选择**签名请求（推荐）**。保持默认设置，如下图所示，然后点击**创建**。
- en: '![Figure 6.21 – Creating a new OAC](image/B21384_06_21.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.21 – 创建新 OAC](image/B21384_06_21.jpg)'
- en: Figure 6.21 – Creating a new OAC
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.21 – 创建新 OAC
- en: Select the new OAC on our **Create distribution** page. Leave the value selection
    for **Enable Origin Shield** as **No** .
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的**创建分发**页面上选择新的 OAC。保持**启用源盾**的值为**否**。
- en: Under **Default cache behavior** , for **Path pattern** , use the default value;
    for **Compress objects automatically** , select **Yes** ; for **Viewer protocol
    policy** , select **Redirect HTTP to HTTPS** ; for **Allowed HTTP methods** ,
    select **GET, HEAD** ; and for **Restrict viewer access** , select **No** .
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**默认缓存行为**下，对于**路径模式**，使用默认值；对于**自动压缩对象**，选择**是**；对于**查看器协议策略**，选择**将 HTTP
    重定向到 HTTPS**；对于**允许的 HTTP 方法**，选择**GET, HEAD**；对于**限制查看器访问**，选择**否**。
- en: '![Figure 6.22 – Configuring the default cache behavior](image/B21384_06_22.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.22 – 配置默认缓存行为](image/B21384_06_22.jpg)'
- en: Figure 6.22 – Configuring the default cache behavior
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.22 – 配置默认缓存行为
- en: Leave the default settings for **Cache key and origin requests** and **Function
    associations** .
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持**缓存键和源请求**以及**功能关联**的默认设置。
- en: Scroll down to **Web Application Firewall (WAF)** and select the **Do not enable
    security** **protections** option.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动到**Web 应用防火墙（WAF）**并选择**不启用安全性保护**选项。
- en: '![Figure 6.23 – The WAF selection options](image/B21384_06_23.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.23 – WAF 选择选项](image/B21384_06_23.jpg)'
- en: Figure 6.23 – The WAF selection options
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.23 – WAF 选择选项
- en: For **Price class** , select **Use all edge locations (** **best performance)**
    .
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**价格类**，请选择**使用所有边缘位置（** **最佳性能）**。
- en: '![Figure 6.24 – Selecting the price class](image/B21384_06_24.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.24 – 选择价格类](image/B21384_06_24.jpg)'
- en: Figure 6.24 – Selecting the price class
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.24 – 选择价格类
- en: For **Custom SSL certificate - optional** , do not make any selections; for
    **Supported HTTP versions** , select **HTTP/2** ; and for **Default root object
    - optional** , enter **index.html** .
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**自定义 SSL 证书 - 可选**，不要做任何选择；对于**支持的 HTTP 版本**，选择**HTTP/2**；对于**默认根对象 - 可选**，输入**index.html**。
- en: '![Figure 6.25 – Selecting the SSL certificate and default root object](image/B21384_06_25.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.25 – 选择 SSL 证书和默认根对象](image/B21384_06_25.jpg)'
- en: Figure 6.25 – Selecting the SSL certificate and default root object
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.25 – 选择 SSL 证书和默认根对象
- en: For **Standard logging** , select **Off** , and for **IPv6** , select **On**
    . Standard logging, when enabled, retrieves logs of viewer requests, and delivers
    them to an Amazon S3 bucket. Consequently, enabling this feature requires specifying
    the target bucket and determining whether cookie logging is needed. With cookie
    logging enabled, CloudFront includes cookies in the standard logs.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**标准日志记录**，选择**关闭**，对于**IPv6**，选择**开启**。启用标准日志记录后，会检索查看者请求的日志，并将其传递到 Amazon
    S3 存储桶。因此，启用此功能需要指定目标存储桶，并确定是否需要记录 cookie。启用 cookie 记录后，CloudFront 会在标准日志中包含 cookie。
- en: Click **Create distribution** . We will get a prompt with the option to copy
    the S3 bucket policy that needs to be updated in our S3 bucket.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建分发**。我们将收到一个提示，询问是否要复制需要更新在我们的 S3 存储桶中的 S3 存储桶策略。
- en: '![Figure 6.26 – The copy S3 policy notification](image/B21384_06_26.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.26 – 复制 S3 策略通知](image/B21384_06_26.jpg)'
- en: Figure 6.26 – The copy S3 policy notification
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.26 – 复制 S3 策略通知
- en: Click on **Copy policy** and paste this policy into the **Bucket policy** section
    of our S3 bucket. If you are not sure how to do this, you can do it by referring
    to the *Creating an S3 bucket policy* recipe in [*Chapter 4*](B21384_04.xhtml#_idTextAnchor133)
    . If you miss this step, you will need to set it up independently by consulting
    the Amazon documentation at [https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html)
    .
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**复制策略**，并将此策略粘贴到我们的 S3 存储桶的**存储桶策略**部分。如果您不确定如何操作，可以参考[*第 4 章*](B21384_04.xhtml#_idTextAnchor133)中的*创建
    S3 存储桶策略*部分。如果您错过了这一步，您将需要独立设置它，可以参考亚马逊文档 [https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html)
    。
- en: 'Copy the **Distribution domain name** from our CloudFront distribution and
    run it from a browser. We should get an output like the following screenshot:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从我们的 CloudFront 分发中复制**分发域名**，并在浏览器中运行。我们应该会得到以下截图中的输出：
- en: '![Figure 6.27 – A response through the CloudFront Distribution](image/B21384_06_27.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.27 – 通过 CloudFront 分发的响应](image/B21384_06_27.jpg)'
- en: Figure 6.27 – A response through the CloudFront Distribution
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.27 – 通过 CloudFront 分发的响应
- en: Here, we did not have to specify a filename, as we had specified a default object.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们不需要指定文件名，因为我们已经指定了一个默认对象。
- en: Optionally, we can also specify a filename within our S3 bucket directly, as
    shown in the following screenshot. This file was not created in the *Getting ready*
    section, so you will need to create it if you want to run a similar URL.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，我们还可以直接指定我们的 S3 存储桶中的文件名，如下截图所示。这个文件在*准备就绪*部分中没有创建，所以如果您想要运行类似的 URL，您需要创建它。
- en: '![Figure 6.28 – Directly accessing a file in S3](image/B21384_06_28.jpg)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.28 – 直接访问 S3 中的文件](image/B21384_06_28.jpg)'
- en: Figure 6.28 – Directly accessing a file in S3
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.28 – 直接访问 S3 中的文件
- en: Next, we will learn how to use a custom domain with our own ACM certificate.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习如何使用自己的 ACM 证书和自定义域名。
- en: CloudFront distribution with a custom domain and ACM certificate
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 带有自定义域名和 ACM 证书的 CloudFront 分发
- en: 'We can add a CloudFront distribution to an S3 bucket with a custom domain and
    ACM certificate, as follows:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按照以下步骤为 S3 存储桶添加一个带有自定义域名和 ACM 证书的 CloudFront 分发：
- en: Follow *Steps 1* *to* *9* in the *CloudFront distribution with a default CloudFront*
    *domain* section of this recipe, up to setting the price class. However, there
    is one exception – if an **Origin Access Control** ( **OAC** ) was created in
    that section, there is no need to create a new one; we can reuse the existing
    OAC.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照本教程中*CloudFront 分发使用默认 CloudFront 域名*部分的*步骤 1 到 9*，直到设置价格类别。然而，有一个例外 - 如果在该部分创建了**源访问控制**（**OAC**），则无需创建新的，可以重用现有的
    OAC。
- en: For **Alternate domain name (CNAME) - optional** , enter a subdomain name for
    the domain for which we have the certificate, as shown in the following screenshot.
    Remember to replace **trainso.io** with your domain name.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**备用域名（CNAME）- 可选**，输入我们拥有证书的域名的子域名，如下截图所示。请记得将**trainso.io**替换为您的域名。
- en: '![Figure 6.29 – Setting the alternate domain name (CNAME)](image/B21384_06_29.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.29 – 设置备用域名（CNAME）](image/B21384_06_29.jpg)'
- en: Figure 6.29 – Setting the alternate domain name (CNAME)
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.29 – 设置备用域名（CNAME）
- en: For **Custom SSL certificate** , as shown in *Figure 6* *.30* , select the ACM
    certificate we created for this recipe, uncheck **Legacy clients support** , and
    for **Security policy** , select **TLSv1.2_2021** , which is the current recommended
    version. For **Supported HTTP versions** , select **HTTP/2** , and for **Default
    root object - optional** , enter **index.html** .
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**自定义 SSL 证书**，如*图 6* *.30*所示，选择我们为本教程创建的 ACM 证书，取消**遗留客户端支持**，对于**安全策略**，选择**TLSv1.2_2021**，这是当前推荐的版本。对于**支持的
    HTTP 版本**，选择**HTTP/2**，对于**默认根对象 - 可选**，输入**index.html**。
- en: '![Figure 6.30 – ACM certificate configuration](image/B21384_06_30.jpg)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.30 – ACM 证书配置](image/B21384_06_30.jpg)'
- en: Figure 6.30 – ACM certificate configuration
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.30 – ACM 证书配置
- en: For **Standard logging** , select **Off** , and for **IPv6** , select **On**
    .
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**标准日志记录**，选择**关闭**，对于**IPv6**，选择**开启**。
- en: Click **Create distribution** . The copy policy message will be shown with a
    bucket policy. Ensure to update the bucket policy of our S3 bucket with this policy,
    as we did in the previous section.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建分发**。将显示复制策略消息与一个存储桶策略。确保更新我们 S3 存储桶的存储桶策略，就像我们在前一节中所做的那样。
- en: Create a **CNAME** record for the domain, with the name (or host) set to the
    subdomain we entered in *Step 2* , which was **cloudericksws.trainso.io** in my
    case (this is only **cloudericksws** if the DNS service provider automatically
    appends the domain name) and the value set as our CloudFront domain name, which
    in my case is **d31z3ldyzun0k3.cloudfront.net** .
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为域名创建一个**CNAME**记录，名称（或主机）设置为我们在*步骤 2*中输入的子域名，我的情况下是**cloudericksws.trainso.io**（如果
    DNS 服务提供商自动附加域名，则只是**cloudericksws**），值设置为我们的 CloudFront 域名，我的情况下是**d31z3ldyzun0k3.cloudfront.net**。
- en: After some time, considering the DNS propagation delay, run the subdomain from
    a browser, and we should get a successful response.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 经过一段时间，考虑到 DNS 传播延迟，从浏览器中运行子域名，我们应该会得到一个成功的响应。
- en: '![Figure 6.31 – A response using the custom domain](image/B21384_06_31.jpg)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.31 – 使用自定义域的响应](image/B21384_06_31.jpg)'
- en: Figure 6.31 – A response using the custom domain
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.31 – 使用自定义域的响应
- en: Instead of the custom subdomain, we can also reach the web page using the CloudFront
    domain name, as we saw in the previous section.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 除了自定义子域名，我们也可以使用前一节中看到的 CloudFront 域名访问网页。
- en: '![Figure 6.32 – A response using the CloudFront domain name](image/B21384_06_32.jpg)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.32 – 使用 CloudFront 域名的响应](image/B21384_06_32.jpg)'
- en: Figure 6.32 – A response using the CloudFront domain name
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.32 – 使用 CloudFront 域名的响应
- en: In this section, we accessed the content of our private S3 bucket through CloudFront,
    using a custom domain and an ACM certificate.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们通过 CloudFront 使用自定义域和 ACM 证书访问了我们私有 S3 存储桶的内容。
- en: How it works...
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we created a CloudFront distribution layer over a private S3
    bucket to access the S3 bucket securely using HTTPS. We configured this to redirect
    all HTTP requests to HTTPS requests. If we choose HTTP and HTTPS, both HTTP and
    HTTPS requests are allowed. If we choose only HTTPS, all HTTP requests will be
    discarded.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们创建了一个 CloudFront 分发层覆盖一个私有 S3 存储桶，以便通过 HTTPS 安全访问 S3 存储桶。我们配置了将所有 HTTP
    请求重定向到 HTTPS 请求。如果我们选择 HTTP 和 HTTPS，则允许 HTTP 和 HTTPS 请求。如果我们只选择 HTTPS，则所有 HTTP
    请求将被丢弃。
- en: In the *CloudFront distribution with a default CloudFront domain* section of
    this recipe, we used the default certificate provided by CloudFront ( ***.cloudfront.com**
    ) for SSL. This certificate allows us to use HTTPS without the need to create
    a certificate. In the *CloudFront distribution with a custom domain and ACM certificate*
    section of this recipe, we specified a wildcard domain name ( ***.trainso.io**
    ) for alternate domain names (CNAMEs). This will allow any subdomain to be entered
    as a CNAME record on the DNS service provider side and forwarded to our web page.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程的*使用默认 CloudFront 域的 CloudFront 分发*部分中，我们使用了 CloudFront 提供的默认证书（ ***.cloudfront.com**
    ）进行 SSL 加密。这个证书使我们能够在不需要创建证书的情况下使用 HTTPS。在本教程的*使用自定义域和 ACM 证书的 CloudFront 分发*部分中，我们指定了一个通配符域名（
    ***.trainso.io** ）作为备用域名（CNAMEs）。这将允许任何子域名作为 DNS 服务提供商端的 CNAME 记录，并转发到我们的网页。
- en: We selected an ACM certificate that was created for a custom domain. We entered
    a CNAME record on our DNS service provider that points to our CloudFront domain
    name. The exact steps to add the CNAME record at the DNS service provider server
    may be specific to a DNS service provider. You can look at the DNS service provider
    documentation ( [https://aws.amazon.com/route53/what-is-dns/](https://aws.amazon.com/route53/what-is-dns/)
    ) for more details.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择了为自定义域创建的 ACM 证书，并在 DNS 服务提供商处输入了指向 CloudFront 域名的 CNAME 记录。添加 CNAME 记录的具体步骤可能与
    DNS 服务提供商相关。您可以查看 DNS 服务提供商的文档（[https://aws.amazon.com/route53/what-is-dns/](https://aws.amazon.com/route53/what-is-dns/)）了解更多详细信息。
- en: There’s more...
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In this recipe, we used our own ACM certificate as a CNAME, which was configured
    at an outside DNS provider so that it could use a subdomain to access our web
    page in the S3 bucket. Alternatively, we can use Route 53 to manage the DNS for
    our domain and point a top-level domain to our CloudFront distribution.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个步骤中，我们使用了自有的 ACM 证书作为 CNAME，它已在外部 DNS 提供商处配置，使我们能够使用子域访问 S3 存储桶中的网页。或者，我们可以使用
    Route 53 来管理我们的域的 DNS，并将顶级域名指向我们的 CloudFront 分发。
- en: See also
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: 'We can read more about routing traffic to a CloudFront distribution using Route
    53 here: [https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-cloudfront-distribution.html](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-cloudfront-distribution.html)
    .'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在此处了解如何使用 Route 53 将流量路由到 CloudFront 分发：[https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-cloudfront-distribution.html](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-cloudfront-distribution.html)。
- en: Using a WAF
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 WAF
- en: '**AWS WAF** (short for **Web Application Firewall** ) is a firewall service
    for monitoring our web traffic. Unlike security groups and **network ACLs** (
    **NACLs)** , which only check for ports and IP addresses, AWS WAF can find content
    matched against predefined signatures that can help detect common attacks, such
    as SQL injection and cross-site scripting. Currently, we can only use WAF with
    API Gateway, CloudFront, and ALBs. It cannot be used directly with services such
    as EC2 or Route 53.'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '**AWS WAF**（即**Web 应用防火墙**）是一项用于监控我们 Web 流量的防火墙服务。与仅检查端口和 IP 地址的安全组和**网络 ACLs**（**NACLs**）不同，AWS
    WAF 可以根据预定义的签名匹配内容，帮助检测常见的攻击方式，如 SQL 注入和跨站脚本攻击。目前，我们只能在 API Gateway、CloudFront
    和 ALBs 中使用 WAF，不能直接与 EC2 或 Route 53 等服务一起使用。'
- en: AWS WAF can be used with CloudFront distributions, ALBs, and API Gateway, each
    having unique characteristics affecting WAF usage. CloudFront is global, meaning
    WAF rules apply uniformly across all Regions, providing consistent protection
    for global applications. In contrast, ALBs and API Gateway are regional, so WAF
    rules must be configured for each region separately, allowing for tailored security
    policies but increasing management overhead. Using CloudFront with WAF is simpler
    and can reduce latency due to edge locations, while ALBs and API Gateway offer
    more granular control but may have regional performance variations and potentially
    higher costs, due to the need for multiple configurations. Understanding these
    differences helps optimize security and performance based on your application’s
    architecture and geographic distribution.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: AWS WAF 可以与 CloudFront 分发、ALBs 和 API Gateway 一起使用，每种服务具有独特的特性，影响 WAF 的使用。CloudFront
    是全球性的，意味着 WAF 规则在所有区域统一适用，为全球应用提供一致的保护。相比之下，ALBs 和 API Gateway 是区域性的，因此 WAF 规则必须为每个区域单独配置，虽然可以根据需求定制安全策略，但也增加了管理的复杂性。使用
    CloudFront 配合 WAF 更加简单，并能通过边缘位置减少延迟，而 ALBs 和 API Gateway 提供了更细粒度的控制，但可能会由于需要多次配置而导致区域性能差异和潜在的更高成本。了解这些差异有助于根据应用架构和地理分布优化安全性和性能。
- en: Getting ready
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We need the following to successfully complete this recipe:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要以下内容才能成功完成此操作：
- en: A working AWS account, **awsseccb-sandbox-1** , and a user, **awsseccbadmin1**
    , as described in the *Technical* *requirements* section.
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有效的 AWS 账户，**awsseccb-sandbox-1**，以及一个用户，**awsseccbadmin1**，如*技术* *要求*部分所述。
- en: To create a WAF with a CloudFront distribution, we need to create a CloudFront
    distribution over an S3 bucket by following the *Securing S3 using CloudFront
    and TLS* recipe of this chapter.
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要创建一个与 CloudFront 分发配合使用的 WAF，我们需要按照本章的 *使用 CloudFront 和 TLS 保护 S3* 配方，在 S3
    存储桶上创建 CloudFront 分发。
- en: How to do it...
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can create and configure an AWS WAF for a CloudFront distribution as follows:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按照以下步骤为 CloudFront 分发创建和配置 AWS WAF：
- en: Log into the AWS Management Console and go to the **WAF &** **Shield** dashboard.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录AWS管理控制台并进入**WAF & Shield**仪表板。
- en: '![Figure 6.33 – The WAF & Shield dashboard](image/B21384_06_33.jpg)'
  id: totrans-303
  prefs: []
  type: TYPE_IMG
  zh: '![图6.33 – WAF & Shield仪表板](image/B21384_06_33.jpg)'
- en: Figure 6.33 – The WAF & Shield dashboard
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.33 – WAF & Shield仪表板
- en: We should see menu items in the sidebar for **AWS WAF** , **AWS Shield** , and
    **AWS Firewall Manager** . If AWS decides to separate them, go to the dashboard
    for AWS WAF and continue with this recipe.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该在侧边栏中看到**AWS WAF**、**AWS Shield**和**AWS Firewall Manager**的菜单项。如果AWS决定将它们分开，请前往AWS
    WAF仪表板并继续进行此步骤。
- en: Click on **Create** **web ACL** .
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建** **web ACL**。
- en: In the **Web ACL details** section, for **Resource type** , select **Amazon
    CloudFront distributions** ; for **Name** , enter **cloudericks-webacl** ; and
    optionally, provide a description in the **Description** field. We will use the
    auto-populated value for the **CloudWatch metric** **name** field.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Web ACL详情**部分，对于**资源类型**，选择**Amazon CloudFront分发**；对于**名称**，输入**cloudericks-webacl**；并可选地，在**描述**字段提供描述。我们将使用自动填充的**CloudWatch指标**
    **名称**字段值。
- en: '![Figure 6.34 – Configuring the web ACL](image/B21384_06_34.jpg)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: '![图6.34 – 配置Web ACL](image/B21384_06_34.jpg)'
- en: Figure 6.34 – Configuring the web ACL
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.34 – 配置Web ACL
- en: Under the **Associated AWS resources** section, click on **Add** **AWS resources**
    .
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**关联的AWS资源**部分，点击**添加** **AWS资源**。
- en: On the **Add AWS resources** screen, select the **CloudFront distributions**
    that we created for this recipe, and click **Add** .
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**添加AWS资源**页面，选择我们为此步骤创建的**CloudFront分发**，然后点击**添加**。
- en: Once we are back in the **Associated AWS resources** section, select our CloudFront
    distribution.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们回到**关联的AWS资源**部分，选择我们的CloudFront分发。
- en: For **Web request body inspection** , select **Default** , and then click **Next**
    .
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**Web请求体检查**，选择**默认**，然后点击**下一步**。
- en: On the **Add rules and rule groups** page, expand the **Add rules** dropdown
    and select **Add my own rules and** **rule groups** .
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**添加规则和规则组**页面，展开**添加规则**下拉菜单并选择**添加我的规则和** **规则组**。
- en: On the **Add my own rules and rule groups** page, select **Rule builder** .
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**添加我的规则和规则组**页面，选择**规则构建器**。
- en: '![Figure 6.35 – Selecting a rule type](image/B21384_06_35.jpg)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![图6.35 – 选择规则类型](image/B21384_06_35.jpg)'
- en: Figure 6.35 – Selecting a rule type
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.35 – 选择规则类型
- en: Under **Rule builder** , in the **Rule** section, enter the name **badstring-rule**
    and set **Type** to **Regular rule** .
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**规则构建器**下，进入**规则**部分，输入名称**badstring-rule**并将**类型**设置为**常规规则**。
- en: '![Figure 6.36 – Configuring Rule builder](image/B21384_06_36.jpg)'
  id: totrans-319
  prefs: []
  type: TYPE_IMG
  zh: '![图6.36 – 配置规则构建器](image/B21384_06_36.jpg)'
- en: Figure 6.36 – Configuring Rule builder
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.36 – 配置规则构建器
- en: Under the **Statement** section, for **Inspect** , select **Query string** ;
    for **Match type** , select **Contain word** ; and for **String to match** enter
    **badstring** . For **Text transformation** , select **None** .
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**语句**部分，对于**检查**，选择**查询字符串**；对于**匹配类型**，选择**包含单词**；对于**匹配字符串**，输入**badstring**。对于**文本转换**，选择**无**。
- en: '![Figure 6.37 – Setting the string statement](image/B21384_06_37.jpg)'
  id: totrans-322
  prefs: []
  type: TYPE_IMG
  zh: '![图6.37 – 设置字符串语句](image/B21384_06_37.jpg)'
- en: Figure 6.37 – Setting the string statement
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.37 – 设置字符串语句
- en: Under the **Then** section, select **Block** as an action and click **Add rule**
    .
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**然后**部分，选择**阻止**作为动作并点击**添加规则**。
- en: '![Figure 6.38 – Adding a rule](image/B21384_06_38.jpg)'
  id: totrans-325
  prefs: []
  type: TYPE_IMG
  zh: '![图6.38 – 添加规则](image/B21384_06_38.jpg)'
- en: Figure 6.38 – Adding a rule
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.38 – 添加规则
- en: On the **Add rules and rule groups** page, for **Default web ACL action for
    requests that don’t match any rules** , select **Allow** and click **Next.**
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**添加规则和规则组**页面，对于**默认Web ACL动作（不匹配任何规则的请求）**，选择**允许**并点击**下一步**。
- en: On the **Set rule priority** page, select our rule and click **Next** .
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**设置规则优先级**页面，选择我们的规则并点击**下一步**。
- en: On the **Configure metrics** page, select our rule, leave the auto-generated
    name for the metric, select **Enable sampled requests** for **Request sampling
    options** , and click **Next** .
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**配置指标**页面，选择我们的规则，保留自动生成的指标名称，选择**启用采样请求**作为**请求采样选项**，然后点击**下一步**。
- en: On the **Review and create web ACL** page, review the changes, and click **Create
    web ACL** . If we go to the CloudFront distribution, it will be deploying. Wait
    until it is deployed.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**审核并创建Web ACL**页面，审查更改并点击**创建Web ACL**。如果我们前往CloudFront分发，它将开始部署。请等待直到部署完成。
- en: 'Run the URL from the browser with a query string that contains **badstring**
    – for example, **https://d1w6mgtt0jnmgz.cloudfront.net/?name=badstring** . We
    should get a **403** error, as follows:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用包含 **badstring** 的查询字符串从浏览器中运行 URL – 例如，**https://d1w6mgtt0jnmgz.cloudfront.net/?name=badstring**
    。这时我们应该得到一个 **403** 错误，如下所示：
- en: '![Figure 6.39 – A 403 error](image/B21384_06_39.jpg)'
  id: totrans-332
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.39 – 403 错误](image/B21384_06_39.jpg)'
- en: Figure 6.39 – A 403 error
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.39 – 403 错误
- en: There will be no error if we do not use the word **badstring** anywhere within
    our URL.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在 URL 中没有任何地方使用 **badstring** 这个词，就不会出现错误。
- en: 'Disassociate the web ACL from our CloudFront distribution, as follows:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消将 Web ACL 与我们的 CloudFront 发行版关联，如下所示：
- en: Click on our web ACL.
  id: totrans-336
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击我们的 Web ACL。
- en: Go to the **Associated AWS** **resources** tab.
  id: totrans-337
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 **关联的 AWS 资源** 选项卡。
- en: Select our CloudFront distribution.
  id: totrans-338
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们的 CloudFront 发行版。
- en: Click on **Remove** .
  id: totrans-339
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **删除** 。
- en: Wait until the status changes to **Deployed** , and run the URL again from a
    browser with a query string that contains **badstring** . The page should load
    successfully this time, without any errors.
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待状态变为 **已部署** ，然后从包含 **badstring** 的查询字符串的浏览器中再次运行 URL。此时页面应该可以成功加载，没有任何错误。
- en: We can also enable WAF while creating a CloudFront distribution, and we can
    also disable the protection from the CloudFront distribution.
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还可以在创建 CloudFront 发行版时启用 WAF，并可以在 CloudFront 发行版中禁用保护。
- en: How it works...
  id: totrans-342
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理……
- en: A web ACL is the primary component within AWS WAF. A web ACL contains one or
    more rules. Rules contain conditional statements (for example, block access from
    a range of IP addresses). We added our own rule using the rule builder. The rule
    builder has an **IF** part and a **THEN** part. The **IF** part contains the condition,
    while the **THEN** part contains the action that needs to be taken when the condition
    in the **IF** part is satisfied. In this recipe, we added a simple rule that checks
    whether the query string contains a string, **badstring** , and blocks such requests.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: Web ACL 是 AWS WAF 中的主要组件。Web ACL 包含一个或多个规则。规则包含条件语句（例如，阻止从一组 IP 地址访问）。我们使用规则构建器添加了我们自己的规则。规则构建器有一个
    **IF** 部分和一个 **THEN** 部分。**IF** 部分包含条件，而 **THEN** 部分包含当 **IF** 部分中的条件满足时需要执行的操作。在此配方中，我们添加了一个简单的规则，检查查询字符串是否包含字符串
    **badstring** ，并阻止这类请求。
- en: In the **IF** part, we can currently inspect the following request components
    – a header, a single query parameter, all query parameters, the URI path, a query
    string, a body, and an HTTP method. We can also check whether an IP address is
    part of an IP set or whether a request originated from a particular country. We
    created a regular rule in this recipe. We can also create a rate-based rule to
    set a rate limit for requests from a single user. For example, WAF can block users
    based on the number of bad requests ( **4xx errors** ) they make.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **IF** 部分，我们目前可以检查以下请求组件 – 一个头部，一个单一查询参数，所有查询参数，URI 路径，查询字符串，主体和 HTTP 方法。我们还可以检查
    IP 地址是否属于 IP 集或请求是否来自特定国家。在此配方中，我们创建了一个常规规则。我们还可以创建一个基于速率的规则来为单个用户设置速率限制。例如，WAF
    可以基于用户发出的 **4xx 错误** 数量来阻止用户。
- en: We can create supporting resources such as IP sets, Regex pattern sets, and
    rule groups, which are used by some of the conditions, from the left sidebar of
    the WAF dashboard. We can find the AWS Marketplace rule groups using the AWS Marketplace
    link, which can be found in the left sidebar of the WAF dashboard. Instead of
    creating our own rules, we can also add an AWS-managed rule group. Currently,
    there are three categories of managed rule groups in the console – AWS-managed
    rule groups, Cyber Security Cloud Inc.-managed security groups, and Fortinet-managed
    rule groups.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从 WAF 仪表板的左侧边栏创建支持资源，例如 IP 集，Regex 模式集和规则组。我们可以使用 WAF 仪表板左侧边栏中的 AWS Marketplace
    链接找到 AWS Marketplace 规则组。除了创建我们自己的规则外，我们还可以添加 AWS 管理的规则组。目前，在控制台中有三类托管规则组 – AWS
    管理的规则组，Cyber Security Cloud Inc. 管理的安全组和 Fortinet 管理的规则组。
- en: There’s more...
  id: totrans-346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: At the time of writing, the AWS WAF and AWS Shield services have the same service
    home page, as we saw in the *How to do it...* section. We saw AWS WAF in detail
    in this recipe. We will briefly go through some important concepts related to
    AWS Shield in this section.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，AWS WAF 和 AWS Shield 服务具有相同的服务主页，正如我们在 *如何做……* 部分看到的那样。在此配方中，我们详细介绍了
    AWS WAF。在本节中，我们将简要介绍与 AWS Shield 相关的一些重要概念。
- en: AWS Shield is a managed **Distributed Denial of Service** ( **DDoS** ) protection
    service that provides always-on detection and automatic inline mitigations to
    minimize application downtime and latency, without engaging AWS Support to benefit
    from DDoS protection.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Shield 是一项托管的**分布式拒绝服务**（**DDoS**）保护服务，提供始终开启的检测和自动内联缓解措施，以最小化应用程序的停机时间和延迟，无需联系
    AWS 支持即可享受 DDoS 保护。
- en: There are two tiers of AWS Shield – Standard and Advanced. Shield Standard defends
    against known infrastructure attacks in a network (layer 3) and transport layer
    (layer 4) that target our website or applications, and it is most effective when
    used with Amazon CloudFront and Amazon Route 53. AWS Shield Advanced provides
    higher levels of protection against attacks targeting our applications running
    on EC2, ELB, CloudFront, AWS Global Accelerator, and Route 53 resources.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Shield 有两个层级——Standard 和 Advanced。Shield Standard 防御针对我们网站或应用程序的已知基础设施攻击，包括网络（第3层）和传输层（第4层），并且与
    Amazon CloudFront 和 Amazon Route 53 配合使用时效果最佳。AWS Shield Advanced 提供更高水平的保护，针对攻击我们运行在
    EC2、ELB、CloudFront、AWS Global Accelerator 和 Route 53 资源上的应用程序。
- en: See also
  id: totrans-350
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'You can read more about AWS WAF, AWS Shield, and AWS Firewall Manager here:
    [https://docs.aws.amazon.com/waf/latest/developerguide/what-is-aws-waf.html](https://docs.aws.amazon.com/waf/latest/developerguide/what-is-aws-waf.html)
    .'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在这里阅读更多关于 AWS WAF、AWS Shield 和 AWS Firewall Manager 的信息：[https://docs.aws.amazon.com/waf/latest/developerguide/what-is-aws-waf.html](https://docs.aws.amazon.com/waf/latest/developerguide/what-is-aws-waf.html)。
- en: 'You can read more about AWS Shield here: [https://aws.amazon.com/shield/](https://aws.amazon.com/shield/)
    .'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在这里阅读更多关于 AWS Shield 的信息：[https://aws.amazon.com/shield/](https://aws.amazon.com/shield/)。
