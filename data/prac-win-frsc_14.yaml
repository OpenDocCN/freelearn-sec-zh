- en: Appendix appB. Case Study
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 appB. 案例研究
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In this appendix, we will use an infected machine to illustrate how to conduct
    primary analysis on different types of evidence, and we will go through live analysis
    along with the post-mortem analysis.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，我们将使用一台感染的机器来演示如何对不同类型的证据进行初步分析，并且我们将同时进行实时分析和事后分析。
- en: Scenario
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 场景
- en: 'To conduct this analysis, we created a small virtual network with the following
    structure:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行这次分析，我们创建了一个小型虚拟网络，结构如下：
- en: '![Scenario](img/image_66_001.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![场景](img/image_66_001.jpg)'
- en: 'All the scenario parts were created using virtualization, including the required
    Internet hosts to download the malware. The machine is infected with ZeusVM malware.
    The malware executable can be downloaded for educational use only from the Zoo
    at [https://github.com/ytisf/theZoo/blob/master/malwares/Binaries/ZeusVM/ZeusVM.zip](https://github.com/ytisf/theZoo/blob/master/malwares/Binaries/ZeusVM/ZeusVM.zip).
    The malware sample SHA256 after unzipping is as follows:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 所有场景部分均使用虚拟化技术创建，包括需要的互联网主机来下载恶意软件。该机器感染了 ZeusVM 恶意软件。恶意软件可从 Zoo 下载，仅供教育用途，下载地址：[https://github.com/ytisf/theZoo/blob/master/malwares/Binaries/ZeusVM/ZeusVM.zip](https://github.com/ytisf/theZoo/blob/master/malwares/Binaries/ZeusVM/ZeusVM.zip)。解压后的恶意软件样本
    SHA256 如下：
- en: '`b04637c11c63dd5a4a599d7104f0c5880717b5d5b32e0104de5a416963f06118`'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`b04637c11c63dd5a4a599d7104f0c5880717b5d5b32e0104de5a416963f06118`'
- en: '`theZoo` is a project that was created to make the possibility of malware analysis
    open and available to the public. `theZoo` was created by Yuval tisf Nativ, and
    it is now maintained by Shahak Shalev.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`theZoo` 是一个旨在让恶意软件分析的可能性对公众开放的项目。`theZoo` 由 Yuval tisf Nativ 创建，现在由 Shahak
    Shalev 维护。'
- en: You can download the malware sample, recreate or infect a virtual machine with
    this malware, and follow the analysis steps in this appendix.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以下载恶意软件样本，重新创建或感染一台虚拟机，并按照本附录中的分析步骤进行操作。
- en: The machine used in this scenario is Windows 7 Enterprise 64 bit.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本场景中使用的机器是 Windows 7 企业版 64 位。
- en: Acquisition
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 采集
- en: As we discussed before, the best practice is to start the evidence acquisition
    before changing anything in the machine under investigation. The acquired evidence
    must be stored in the USB storage device or network share. In our case, a USB
    storage device can be used between the infected and the analysis machines, but
    it must be carefully wiped after the analysis. Network acquisition with another
    analysis Linux virtual machine over the virtual network will be efficient in our
    case as well. Network acquisition will be as discussed before in [Chapter 4](ch04.html
    "Chapter 4. Nonvolatile Data Acquisition"), *Nonvolatile Data Acquisition*. We
    need to acquire the memory and hard disk of the infected machine.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，最佳实践是在对待分析的机器做任何修改之前，首先进行证据采集。采集到的证据必须保存在 USB 存储设备或网络共享中。在我们的案例中，USB
    存储设备可以在感染机器和分析机器之间使用，但分析后必须彻底擦除。通过虚拟网络使用另一台分析 Linux 虚拟机进行网络采集在我们的情况下也很有效。网络采集将按照我们之前在[第
    4 章](ch04.html "第 4 章：非易失性数据采集")中讨论的内容进行，*非易失性数据采集*。我们需要采集感染机器的内存和硬盘。
- en: 'Exercise: You need to perform this step, as we discussed before in the acquisition
    sections in [Chapter 3](ch03.html "Chapter 3. Volatile Data Collection"), *Volatile
    Data Collection*, and [Chapter 4](ch04.html "Chapter 4. Nonvolatile Data Acquisition"),
    *Nonvolatile Data Acquisition*.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 练习：你需要执行这个步骤，正如我们之前在[第 3 章](ch03.html "第 3 章：易失性数据采集")，*易失性数据采集*，和[第 4 章](ch04.html
    "第 4 章：非易失性数据采集")，*非易失性数据采集*中讨论的那样。
- en: Live analysis
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实时分析
- en: Next, let's perform some live analysis on the infected machine in hand. This
    live analysis will give us quick results. It may overwrite some traces in the
    system, but in our case here, we have already acquired our evidence.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们对手头的感染机器进行一些实时分析。这次实时分析将为我们提供快速的结果。它可能会覆盖系统中的一些痕迹，但在我们的情况下，我们已经采集了证据。
- en: The running processes
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正在运行的进程
- en: 'Listing the running processes will allow us to notice any maliciously-named
    processes that may relate to malware behavior. We can list the running processes
    using the `native tasklist` command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 列出正在运行的进程将帮助我们发现任何恶意命名的进程，这些进程可能与恶意软件行为有关。我们可以使用 `native tasklist` 命令列出正在运行的进程：
- en: '![The running processes](img/image_66_002.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![正在运行的进程](img/image_66_002.jpg)'
- en: 'We can also use `processexplorer` from Sysinternals. We will notice no malicious
    names, but we can see that there are two processes named `explorer.exe` within
    the system. One holds an ID of `2256` ran for compatibility with 32 bit images
    but its current directory is `C:\Users\<<UserName>>\AppData\Roaming\` as shown
    in the Process Explorer in the following screenshot. Also, please note that this
    process most likely will hold another ID if you ran the malware in a machine on
    your own:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 Sysinternals 的`processexplorer`。我们将注意到没有恶意的名称，但我们可以看到系统中有两个名为`explorer.exe`的进程。其中一个的
    ID 是`2256`，它是为了兼容 32 位映像而运行，但它的当前目录是`C:\Users\<<UserName>>\AppData\Roaming\`，如下面的进程资源管理器截图所示。此外，请注意，如果你在自己的机器上运行恶意软件，这个进程很可能会持有另一个
    ID：
- en: '![The running processes](img/image_66_003.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![运行中的进程](img/image_66_003.jpg)'
- en: To investigate this process more, we can use `ProcessActivityView` from DART
    tools to see which files are accessed by this process in real time. We will find
    this process access a file located and named `C:\Users\<<UserName>>\AppData\Roaming\Tyull\yquna.tmp`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更深入地调查这个过程，我们可以使用 DART 工具中的`ProcessActivityView`来查看该进程实时访问了哪些文件。我们会发现这个进程访问了一个位于并命名为`C:\Users\<<UserName>>\AppData\Roaming\Tyull\yquna.tmp`的文件。
- en: The folder name and filenames seem to be randomly created which is a typical
    malware behavior.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 文件夹名称和文件名似乎是随机创建的，这是一种典型的恶意软件行为。
- en: 'Then, if we try to scan the running system with the GMER tool, it will detect
    some injected code in the running process `2256 explorer.exe`, as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，如果我们尝试使用 GMER 工具扫描正在运行的系统，它将检测到在运行的进程`2256 explorer.exe`中注入了一些代码，如下所示：
- en: '![The running processes](img/image_66_004.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![运行中的进程](img/image_66_004.jpg)'
- en: Network activities
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络活动
- en: 'Most of the malware samples out there need a network connection to complete
    their goal and connect to the attacker. By checking the network activities on
    the suspicious connection, we will notice that it listens for connections and
    port `37337`. Here, we must note that we already isolated the machine from the
    Internet and the internal network and such connections can''t be completed:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数恶意软件样本需要网络连接来完成其目标并与攻击者连接。通过检查可疑连接上的网络活动，我们会注意到它正在监听连接和端口`37337`。在这里，我们必须注意，我们已经将机器从互联网和内部网络隔离，这样的连接无法完成：
- en: '![Network activities](img/image_66_005.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![网络活动](img/image_66_005.jpg)'
- en: Port `37337` is known for its wide usage in malware-related activities.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 端口`37337`因其在恶意软件相关活动中的广泛使用而闻名。
- en: Autorun keys
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动启动键
- en: 'We also can check for the autorun keys in the system, which are used by the
    malware to preserve their existence in the system even after system reboot. We
    can do this using the Sysinternals tool `autorunsc.exe` or its GUI `autoruns.exe`.
    We can use the command-line version with the following options:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以检查系统中的自动启动键，这些键被恶意软件用来保持它们在系统中的存在，即使在系统重启后。我们可以使用 Sysinternals 工具`autorunsc.exe`或其
    GUI 版本`autoruns.exe`来执行此操作。我们可以使用带有以下选项的命令行版本：
- en: '`-l`: These are elements that start automatically at login (the default option)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-l`：这些是登录时自动启动的元素（默认选项）'
- en: '`-t`: These are assigned tasks'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-t`：这些是已分配的任务'
- en: '`-m`: These do not display elements that are digitally signed by Microsoft'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-m`：这些不会显示由微软数字签名的元素'
- en: '`-v`: These verify digital signatures'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-v`：这些验证数字签名'
- en: '![Autorun keys](img/image_66_006.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![自动启动键](img/image_66_006.jpg)'
- en: Under the `HKCU\Software\Microsoft\Windows\CurrentVersion\Run` registry key,
    the location of this unknown executable is `C:\users\<<UserName>>\appdata\roaming\imyrug\epqe.exe`.
    Pay attention to the key last access date, which is old.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在`HKCU\Software\Microsoft\Windows\CurrentVersion\Run`注册表键下，这个未知可执行文件的位置是`C:\users\<<UserName>>\appdata\roaming\imyrug\epqe.exe`。请注意该键的最后访问日期，它已经很旧了。
- en: 'We can extract this executable for further analysis, such as reverse engineering
    and malware analysis, to make sure that it is malicious and understand its functionality.
    The same results can be found using the GUI version of the tool:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以提取这个可执行文件进行进一步分析，例如逆向工程和恶意软件分析，以确认它是否具有恶意，并理解其功能。使用该工具的 GUI 版本也可以获得相同的结果：
- en: '![Autorun keys](img/image_66_007.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![自动启动键](img/image_66_007.jpg)'
- en: So, the question now is what added this executable to the registry keys?
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在的问题是是什么将这个可执行文件添加到注册表键中？
- en: Prefetch files
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预取文件
- en: To try to answer the previous question, we can start analyzing the prefetch
    files. From DART, open the WinPrefetchView tool. This tool will automatically
    parse the prefetch files of the live system and view their results in human readable
    format.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了尝试回答前面的问题，我们可以开始分析预取文件。从DART中打开WinPrefetchView工具。该工具会自动解析实时系统的预取文件，并以人类可读的格式查看其结果。
- en: 'After spending some time in viewing the files and searching for the executable
    named `epqe`, we can find that `eqpe.exe` ran just two seconds after a file named `latest_report.pdf.exe`
    ran in the system, and at the same second the `Explorer.exe` started:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在花了一些时间查看文件并搜索名为`epqe`的可执行文件后，我们发现`eqpe.exe`在名为`latest_report.pdf.exe`的文件运行后两秒钟启动，并且在同一秒钟`Explorer.exe`也启动了：
- en: '![Prefetch files](img/image_66_008.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![预取文件](img/image_66_008.jpg)'
- en: 'As we can see, the first filename is very suspicious. It is located under `C:\Users\<<UserName>>\Downloads\latest_report.pdf.exe`.
    If we tried to search this location for this file, we won''t find it. In the list
    of files used by this `latest_report.pdf.exe` file, according to `WinPrefetchView`,
    we will find the `epqe.exe` file used or created by this file:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，第一个文件名非常可疑。它位于`C:\Users\<<UserName>>\Downloads\latest_report.pdf.exe`下。如果我们尝试在这个位置查找该文件，我们是找不到的。在`WinPrefetchView`提供的`latest_report.pdf.exe`文件所使用的文件列表中，我们会发现由此文件使用或创建的`epqe.exe`文件：
- en: '![Prefetch files](img/image_66_009.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![预取文件](img/image_66_009.jpg)'
- en: However, what made the victim download this malicious executable?
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，是什么促使受害者下载这个恶意可执行文件呢？
- en: Browser analysis
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览器分析
- en: The `last_report.pdf.exe` file may have been copied to the machine from another
    storage or over the network, but because it was located in the `Downloads` folder,
    it may be more reasonable to start investigating the browser history.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`last_report.pdf.exe`文件可能是从其他存储设备或网络复制到机器上的，但由于它位于`Downloads`文件夹中，因此开始调查浏览器历史记录可能更为合理。'
- en: 'The installed browsers in the system were Internet Explorer and Mozilla Firefox.
    By investigating both with DART tools, we can find some interesting results from
    `MozillaHistoryView`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 系统中安装的浏览器是Internet Explorer和Mozilla Firefox。通过使用DART工具分析这两者，我们可以从`MozillaHistoryView`中找到一些有趣的结果：
- en: '![Browser analysis](img/image_66_010.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![浏览器分析](img/image_66_010.jpg)'
- en: We can see that the file was downloaded from `http://www.maldomain.com/public/latest_report.pdf.exe`.
    However, we can see that the visit time was just after the user visited `mail.yahoo.com`,
    which increases the chance that the malicious link was sent to the victim in an
    e-mail.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到该文件是从`http://www.maldomain.com/public/latest_report.pdf.exe`下载的。然而，我们注意到下载时间恰好是在用户访问`mail.yahoo.com`之后，这增加了恶意链接通过电子邮件发送给受害者的可能性。
- en: 'If we have the ability to open the victim''s mailbox to prove or refute this
    assumption, in our case, we will find the following message:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有能力打开受害者的邮箱以证明或反驳这一假设，那么在我们的案例中，我们将会找到以下信息：
- en: '![Browser analysis](img/image_66_011.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![浏览器分析](img/image_66_011.jpg)'
- en: 'We can find this e-mail where the language isn''t accurate and the link was
    added in order to display other text `this link` rather than the actual link:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在这封电子邮件中找到语言不准确的地方，并且为了显示其他文本而添加了链接`this link`，而不是实际的链接：
- en: '![Browser analysis](img/image_66_012.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![浏览器分析](img/image_66_012.jpg)'
- en: Note
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note: The e-mail and browser history analysis results won''t appear in your
    analysis if you run the malware within a machine on your own.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：如果在自己的机器上运行恶意软件，电子邮件和浏览器历史分析结果将不会出现在您的分析中。
- en: Postmortem analysis
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事后分析
- en: Before performing the live analysis, we acquired the evidence. These were the
    memory and the hard drive. Let's see what we can get from this evidence.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行实时分析之前，我们已经获得了证据。这些证据是内存和硬盘。让我们看看我们能从这些证据中获取什么。
- en: Memory analysis
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内存分析
- en: The memory is the working space for the operating system, and we can get many
    traces of any malware that ran within the system from the memory analysis. In
    this section, we will use the volatility framework to analyze the dumped memory
    file and try to get the same information that we got from the live analysis.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 内存是操作系统的工作空间，通过内存分析，我们可以获得系统中运行的任何恶意软件的痕迹。在本节中，我们将使用Volatility框架分析转储的内存文件，并尝试获取与实时分析中相同的信息。
- en: 'To get information about the profile of the memory file, we can use the imageinfo
    plugin:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获取内存文件的配置信息，我们可以使用imageinfo插件：
- en: 'From the output, the image profile that we will use is `Win7SP0x64`. Then,
    let''s list the running processes and the network connections, as we discussed
    in the memory analysis chapter:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中，我们将使用的镜像配置文件是`Win7SP0x64`。接着，让我们列出正在运行的进程和网络连接，就像我们在内存分析章节中讨论的那样：
- en: '![Memory analysis](img/image_66_014.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![内存分析](img/image_66_014.jpg)'
- en: 'We will notice the two `explorer.exe` processes, but we can''t see any hidden
    processes. There are two processes named `dllhost.exe`, which can be found in
    the psscan plugin''s output only. However, these two processes were exited and
    their structures were still in memory, and they can be found by psscan plugin,
    as we can see from the output of the psscan plugin:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会注意到两个`explorer.exe`进程，但我们看不到任何隐藏的进程。只有两个名为`dllhost.exe`的进程，它们只能在psscan插件的输出中找到。然而，这两个进程已经退出，它们的结构仍然保存在内存中，psscan插件能够找到它们，正如我们从psscan插件的输出中看到的：
- en: '![Memory analysis](img/image_66_015.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![内存分析](img/image_66_015.jpg)'
- en: 'Then, we can filter, based on the malicious connections that can be found in
    the system using the netscan plugin:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用netscan插件，根据系统中发现的恶意连接进行筛选：
- en: '![Memory analysis](img/image_66_016.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![内存分析](img/image_66_016.jpg)'
- en: We will find `explorer.exe` process's listening connections on port `37337`.
    So, let's focus on this process.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会发现`explorer.exe`进程在端口`37337`上有监听连接。所以，让我们重点关注这个进程。
- en: 'Let''s dump this process and search for any interesting strings that can identify
    its function:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们转储这个进程，并搜索任何可能标识其功能的有趣字符串：
- en: '![Memory analysis](img/image_66_017.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![内存分析](img/image_66_017.jpg)'
- en: 'If we run the `strings 2256.dmp | more` command, it will show many strings
    in the process dump file. Some of these strings, such as `Run and Runonce`, should
    make us think about registry keys. To list the registry keys in memory, we can
    use the hivelist plugin:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行`strings 2256.dmp | more`命令，它将显示进程转储文件中的许多字符串。其中一些字符串，如`Run and Runonce`，应该让我们联想到注册表键。要列出内存中的注册表键，我们可以使用hivelist插件：
- en: '![Memory analysis](img/image_66_018.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![内存分析](img/image_66_018.jpg)'
- en: Now, we have the locations of the opened hives in memory. We can browse through
    these hives in memory using the printkey plugin with the virtual offset of the
    registry hive.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经得到了内存中已打开注册表项的位置。我们可以通过使用printkey插件，并结合注册表项的虚拟偏移量，浏览这些内存中的注册表项。
- en: 'We can try different hives, but let''s try the `ntuser.dat` hive of the system
    user. Check `Software\Microsoft\Windows\CurrentVersion\Run`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以尝试不同的注册表项，但我们先试试系统用户的`ntuser.dat`注册表项。检查`Software\Microsoft\Windows\CurrentVersion\Run`：
- en: '![Memory analysis](img/image_66_019.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![内存分析](img/image_66_019.jpg)'
- en: 'We can find the unknown executable in the memory as well. Now, let''s try to
    scan for all opened files in memory and filter on this filename:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在内存中找到未知的可执行文件。现在，让我们尝试扫描内存中所有已打开的文件，并筛选出这个文件名：
- en: '![Memory analysis](img/image_66_020.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![内存分析](img/image_66_020.jpg)'
- en: 'Then, convert the body file to the timeline file using the following command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下命令将主体文件转换为时间线文件：
- en: '[PRE0]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output will be a timeline of all the activities in the system. If we tried
    to filter based on the suspicious executable filename, we can get the same sequence
    that we got from investigating the prefetch files during live analysis:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将是系统中所有活动的时间线。如果我们尝试基于可疑的可执行文件名进行筛选，我们可以得到与我们在实时分析过程中检查预取文件时获得的相同顺序：
- en: '![Memory analysis](img/image_66_021.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![内存分析](img/image_66_021.jpg)'
- en: Then, we can try to recover the `latest_report.pdf.exe` from the hard disk image.
    Actually, the malware deleted that file and created the `epqe.exe` instead. But,
    what if we wanted to get this file and couldn't recover that file from the hard
    disk.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以尝试从硬盘镜像中恢复`latest_report.pdf.exe`。事实上，恶意软件删除了该文件，并创建了`epqe.exe`。但是，如果我们想要获取该文件并且无法从硬盘中恢复该文件怎么办？
- en: Network analysis
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络分析
- en: The network traffic is the most volatile evidence. For our scenario here, we
    dumped the network traffic during the attack simulation to a `pcap` file.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 网络流量是最不稳定的证据。在我们这里的场景中，我们在攻击模拟过程中将网络流量转储到了一个`pcap`文件中。
- en: To analyze the network traffic, we will use the Networkminer tool that is installed
    within the Wine environment in our Linux analysis virtual machine.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了分析网络流量，我们将使用安装在Linux分析虚拟机的Wine环境中的Networkminer工具。
- en: 'Networkminer will parse the `pcap` file and view detailed information about
    the `maldomain.com` domain:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Networkminer将解析`pcap`文件，并查看有关`maldomain.com`域的详细信息：
- en: '![Network analysis](img/image_66_022.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![网络分析](img/image_66_022.jpg)'
- en: 'It will also export the downloaded file with detailed information:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 它还将导出下载的文件，包含详细信息：
- en: '![Network analysis](img/image_66_023.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![网络分析](img/image_66_023.jpg)'
- en: From the network traffic, we can export and analyze the first `latest_report.pdf.exe`
    executable file.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 从网络流量中，我们可以导出并分析第一个 `latest_report.pdf.exe` 可执行文件。
- en: Timeline analysis
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时间轴分析
- en: In this section, we will create a complete timeline of all the activities in
    the hard disk from the acquired disk image using log2timeline and the Plaso framework.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 log2timeline 和 Plaso 框架，通过获取的磁盘镜像创建硬盘中所有活动的完整时间轴。
- en: 'We will run all the parsers of Windows 7 against the acquired image. However,
    first, we need to get the offset of the `C:` partition in image using `mmls` tool
    from TSK:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将运行所有 Windows 7 解析器来分析获取的镜像。但是首先，我们需要使用 TSK 中的 `mmls` 工具获取 `C:` 分区的偏移量：
- en: '![Timeline analysis](img/image_66_024.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![时间轴分析](img/image_66_024.jpg)'
- en: 'Then, we will use this offset with log2timeline. The process of generating
    the body file will take a long time because it parses the whole volume for any
    event mentioned in Win7 parsers:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将使用这个偏移量与 log2timeline。生成主体文件的过程将需要很长时间，因为它会解析整个卷，以查找 Win7 解析器中提到的任何事件：
- en: '![Timeline analysis](img/image_66_025.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![时间轴分析](img/image_66_025.jpg)'
- en: Once this is finished, we can use the `psort.py` tool to view parts of the body
    file on our choice with the command line, as we did in the timeline analysis in
    [Chapter 5](ch05.html "Chapter 5. Timeline"), *Timeline*.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，我们可以使用 `psort.py` 工具通过命令行查看我们选择的主体文件的部分内容，就像在[第5章](ch05.html "第5章。时间轴")
    *时间轴* 分析中做的一样。
- en: 'Or, we can convert the timeline body file into a CSV formatted file in order
    to view it with any spreadsheet program. The conversion will take some time to
    complete:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以将时间轴主体文件转换为 CSV 格式的文件，以便通过任何电子表格程序查看。转换过程需要一些时间才能完成：
- en: '![Timeline analysis](img/image_66_026.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![时间轴分析](img/image_66_026.jpg)'
- en: 'Once the conversion finishes, you can open the new file in, for example, Excel:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 转换完成后，您可以在例如 Excel 中打开新文件：
- en: '![Timeline analysis](img/image_66_027.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![时间轴分析](img/image_66_027.jpg)'
- en: 'Then, we can use the Excel filtering tools to filter the output based on our
    needs, such as showing the prefetch analysis of the malicious files:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用 Excel 过滤工具根据我们的需求过滤输出结果，例如显示恶意文件的预取分析：
- en: '![Timeline analysis](img/image_66_028.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![时间轴分析](img/image_66_028.jpg)'
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: After we finished the main book chapters, in this appendix we conducted a primary
    analysis and discovered malware in an infected machine. We used different analysis
    techniques, live analysis and postmortem analysis, and explained how to get the
    same results from both ways. Although, live analysis is easier, it is not applicable
    all the time. This is why we must be aware of both techniques for the real-life
    investigations.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成了主要章节后，在本附录中，我们进行了初步分析并发现了感染机器中的恶意软件。我们使用了不同的分析技术，包括实时分析和事后分析，并解释了如何通过这两种方式获得相同的结果。尽管实时分析更容易，但并非每次都适用。因此，我们必须了解这两种技术，以应对现实生活中的调查。
