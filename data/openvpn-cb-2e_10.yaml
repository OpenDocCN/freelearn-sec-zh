- en: Chapter 10.  Advanced Configuration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。高级配置
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容包括：
- en: Including configuration files in config files
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在配置文件中包含配置文件
- en: Multiple remotes and remote-random
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个远程和远程随机
- en: Inline certificates
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内联证书
- en: Connection blocks
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接块
- en: Details of `ifconfig-pool-persist`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ifconfig-pool-persist`的详细信息'
- en: Connecting using a SOCKS proxy
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SOCKS代理进行连接
- en: Connecting via an HTTP proxy
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过HTTP代理进行连接
- en: Connecting via an HTTP proxy with authentication
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过带认证的HTTP代理进行连接
- en: IP-less setups - `ifconfig-noexec`
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无IP设置 - `ifconfig-noexec`
- en: Port sharing with an HTTPS server
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与HTTPS服务器共享端口
- en: Routing features - `redirect-private`, `allow-pull-fqdn`
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由功能 - `redirect-private`, `allow-pull-fqdn`
- en: Filtering out pushed options
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过滤掉推送的选项
- en: Handing out public IP addresses
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配公共IP地址
- en: Introduction
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: The recipes in this last chapter will cover the advanced configuration of OpenVPN.
    This chapter will focus on some of the less well-known configuration options that
    OpenVPN offers, as well as some advanced recipes for real-life deployments. The
    recipes will cover both advanced server configuration, such as the use of connection
    blocks and inline certificates, as well as advanced client configuration, such
    as using a proxy server to connect to an OpenVPN server.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的配方将涵盖OpenVPN的高级配置。本章将重点介绍一些OpenVPN提供的鲜为人知的配置选项，以及一些针对实际部署的高级配方。配方将涵盖高级服务器配置，如使用连接块和内联证书，以及高级客户端配置，如使用代理服务器连接OpenVPN服务器。
- en: Including configuration files in config files
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在配置文件中包含配置文件
- en: One of the lesser-known possibilities when using configuration files is the
    ability to include other configuration files. This can be especially handy when
    setting up a complex OpenVPN server, where multiple OpenVPN instances are offered
    simultaneously. The common configuration directives can be stored in a single
    file, whereas the connection-specific parts can be stored in a file for each instance.
    In this recipe, we will set up two OpenVPN instances, one using UDP and the other
    using TCP as the transport protocol.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用配置文件时，较少为人所知的可能性之一是能够包含其他配置文件。当设置一个复杂的OpenVPN服务器时，尤其可以派上用场，因为它允许同时提供多个OpenVPN实例。通用配置指令可以存储在一个文件中，而每个实例的特定连接部分可以存储在单独的文件中。在这个配方中，我们将设置两个OpenVPN实例，一个使用UDP，另一个使用TCP作为传输协议。
- en: Note that this option does not allow for the sharing of VPN IP address ranges
    between instances.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此选项不允许在多个实例之间共享VPN IP地址范围。
- en: Getting ready
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.11.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[第二章](part0025.xhtml#aid-NQU21 "第二章。客户端-服务器仅IP网络")中第一个配方设置客户端和服务器证书，*客户端-服务器仅IP网络*。在此配方中，服务器计算机运行的是CentOS
    6 Linux和OpenVPN 2.3.11版本。
- en: How to do it...
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'First, create the common configuration file:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建通用配置文件：
- en: '[PRE0]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Save it as `example10-1-common.conf`. Note that this configuration file does
    not include a protocol specification or server line. Also, note that we will be
    using the same server certificate for both OpenVPN instances.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其保存为`example10-1-common.conf`。请注意，此配置文件不包含协议规范或服务器行。此外，请注意，我们将为两个OpenVPN实例使用相同的服务器证书。
- en: 'Next, create the following server configuration file for UDP-based connections:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建以下用于UDP连接的服务器配置文件：
- en: '[PRE1]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Save it as `example10-1-server1.conf`.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其保存为`example10-1-server1.conf`。
- en: 'And createa server configuration file for TCP-based connections:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并创建一个用于TCP连接的服务器配置文件：
- en: '[PRE2]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Save it as `example10-1-server2.conf`. This instance is listening on the HTTPS
    port`443`, which is an often-used trick to circumvent very strict firewalls, or
    to work around a badly configured firewall.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其保存为`example10-1-server2.conf`。该实例正在监听HTTPS端口`443`，这是一个常用的技巧，用于绕过非常严格的防火墙，或解决配置不当的防火墙问题。
- en: 'Start both servers:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动两个服务器：
- en: '[PRE3]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Check the log files to see if both the servers have successfully started.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 检查日志文件，查看两个服务器是否已成功启动。
- en: How it works...
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: OpenVPN configuration files are treated very similarly to command line options.
    As the `--config` command line option is used almost always, it is also possible
    to use it inside a configuration file again. This allows for a split in the configuration
    options, where directives that are common to all OpenVPN instances can be stored
    in a single file for easy maintenance. The instance-specific directives (such
    as the `server` directive) can then be stored in much smaller configuration files,
    which are also less likely to change over time. This again eases maintenance of
    a large-scale OpenVPN server setup.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVPN 配置文件的处理方式与命令行选项非常相似。由于`--config`命令行选项几乎总是使用，因此也可以在配置文件中再次使用它。这允许配置选项的拆分，将所有
    OpenVPN 实例共有的指令存储在一个文件中，便于维护。与之相对，特定实例的指令（例如`server`指令）可以存储在更小的配置文件中，这些文件通常不会随时间变化。这样可以简化大规模
    OpenVPN 服务器设置的维护工作。
- en: OpenVPN has a built-in protection mechanism to avoid including the same configuration
    file recursively.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVPN 有一个内置的保护机制，避免递归地包含相同的配置文件。
- en: Multiple remotes and remote-random
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多个远程服务器和`remote-random`
- en: 'OpenVPN has (limited) built-in support for automatic failover and load-balancing:
    if the connection to one OpenVPN server cannot be established, then the next configured
    server is chosen. The `remote-random` directive can be used to load-balance many
    OpenVPN clients across multiple OpenVPN servers. In this recipe, we will set up
    two OpenVPN servers and then use the `remote-random` directive to have a client
    choose either one of the two servers.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVPN 内置（有限的）自动故障转移和负载均衡支持：如果无法建立与一个 OpenVPN 服务器的连接，则选择下一个配置的服务器。可以使用`remote-random`指令将多个
    OpenVPN 客户端负载均衡到多个 OpenVPN 服务器上。在此配方中，我们将设置两个 OpenVPN 服务器，然后使用`remote-random`指令让客户端选择两个服务器中的任意一个。
- en: Note that OpenVPN does not offer transparent failover, in which case the existing
    connections are transparently migrated to another server. Transparent failover
    is much harder to achieve with a VPN setup (not just OpenVPN), as the secure session
    keys need to be migrated from one server to the other as well. This is currently
    not possible with OpenVPN.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，OpenVPN 不提供透明的故障转移，这意味着现有连接不会自动迁移到另一个服务器。实现透明故障转移对于 VPN 设置（不仅仅是 OpenVPN）来说要困难得多，因为安全会话密钥也需要从一个服务器迁移到另一个服务器。目前，OpenVPN
    无法实现这一功能。
- en: Getting ready
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We will use the following network layout:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下网络布局：
- en: '![Getting ready](img/image00431.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00431.jpeg)'
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.11\. The client was running Fedora 22 Linux and OpenVPN 2.3.11\.
    Keep the configuration file, `basic-udp-server.conf`, from the *Server-side routing*
    recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only
    Networks"), *Client-server IP-only Networks*, as well as the client configuration
    file, `basic-udp-client.conf` at hand.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[第 2 章](part0025.xhtml#aid-NQU21 "第 2 章. 客户端-服务器 IP 专用网络")中的第一个配方设置客户端和服务器证书，*客户端-服务器
    IP 专用网络*。对于这个配方，服务器计算机运行 CentOS 6 Linux 和 OpenVPN 2.3.11，客户端运行 Fedora 22 Linux
    和 OpenVPN 2.3.11。请保留来自*服务器端路由*配方的配置文件`basic-udp-server.conf`，该配方来自[第 2 章](part0025.xhtml#aid-NQU21
    "第 2 章. 客户端-服务器 IP 专用网络")，*客户端-服务器 IP 专用网络*，以及客户端配置文件`basic-udp-client.conf`。
- en: How to do it...
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Start both servers:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动两个服务器：
- en: '[PRE4]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Check the log files to see that both the servers have successfully started.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 检查日志文件，确保两个服务器已经成功启动。
- en: Note that we can use the exact same configuration file on both servers. By using
    masquerading, the VPN clients will appear to come from either `server1` or `server2`.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，我们可以在两个服务器上使用完全相同的配置文件。通过使用伪装，VPN 客户端将表现为来自`server1`或`server2`。
- en: 'Set up masquerading on both servers:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在两个服务器上设置伪装：
- en: '[PRE5]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create the client configuration file:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建客户端配置文件：
- en: '[PRE6]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Save it as `example10-2-client.conf`.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其保存为`example10-2-client.conf`。
- en: 'Start the client:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动客户端：
- en: '[PRE7]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The OpenVPN client will randomly choose which server to connect to.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVPN 客户端将随机选择一个服务器进行连接。
- en: 'After the connection has been established, stop the first OpenVPN process on
    the server that the client connected to:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在建立连接后，停止客户端连接到的服务器上的第一个 OpenVPN 进程：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: And wait for the client to reconnect. After the default timeout period, the
    client will reconnect to an alternate server.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 等待客户端重新连接。在默认超时期后，客户端将重新连接到备用服务器。
- en: How it works...
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When the OpenVPN client starts up and `remote-random` is specified, it randomly
    picks a server from the list of available remote servers. If the VPN connection
    to this server cannot be established, it will pick the next server from the list,
    and so on. When the VPN connection is dropped, for example, due to a failing server,
    the OpenVPN client will try to reconnect after a default timeout period. In the
    server configuration file used in the *Server-side routing* recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*, the timeout period is configured using the `keepalive` option.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当 OpenVPN 客户端启动并且指定了 `remote-random` 时，它会从可用的远程服务器列表中随机选择一个服务器。如果无法建立与该服务器的
    VPN 连接，它将选择列表中的下一个服务器，以此类推。当 VPN 连接断开时，例如由于服务器故障，OpenVPN 客户端将在默认超时期后尝试重新连接。在[第
    2 章](part0025.xhtml#aid-NQU21 "第 2 章。客户端-服务器 IP 网络")的 *服务器端路由* 配方中使用的服务器配置文件里，超时周期是通过
    `keepalive` 选项进行配置的。
- en: There's more...
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: When setting up a failover OpenVPN solution there are many things to consider,
    some of which are outlined here.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置故障转移 OpenVPN 解决方案时，有许多需要考虑的因素，其中一些在这里概述。
- en: Mixing TCP and UDP-based setups
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 混合使用基于 TCP 和 UDP 的设置
- en: 'It is also possible to mix TCP and UDP-based setups by specifying the protocol
    type with the `remote` directive:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过在 `remote` 指令中指定协议类型，将 TCP 和 UDP 基础的设置混合使用：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: It is much handier to use connection blocks in this case. The use of connection
    blocks is explained later in this chapter.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，使用连接块会更加方便。连接块的使用将在本章稍后进行解释。
- en: Advantage of using TCP-based connections
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用基于 TCP 的连接的优势
- en: There is one major advantage when using a TCP-based setup in combination with
    a failover solution. If the OpenVPN server to which a client is connected is unavailable,
    the TCP connection will fail almost immediately. This leads to a very short timeout
    period after which the OpenVPN client will try to reconnect. With a UDP-based
    setup, the client cannot so easily detect whether the server is unavailable and
    must first wait for the `keepalive` timeout to pass.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当将基于 TCP 的设置与故障转移解决方案结合使用时，有一个主要优势。如果客户端连接的 OpenVPN 服务器不可用，TCP 连接几乎会立即失败。这导致超时周期非常短，之后
    OpenVPN 客户端将尝试重新连接。使用基于 UDP 的设置时，客户端无法如此容易地检测服务器是否不可用，必须先等待 `keepalive` 超时过去。
- en: Automatically reverting to the first OpenVPN server
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动恢复连接到第一个 OpenVPN 服务器
- en: 'A question that is asked from time to time is whether it is possible to configure
    OpenVPN to also support automatic reverting: a second OpenVPN instance is set
    up to provide a failover solution. When the main OpenVPN server is unavailable,
    the backup instance takes over. However, when the main OpenVPN server comes back
    online, the clients are not automatically reconnected to the main server. For
    this, a client reset (or server reset of the second OpenVPN instance) is required.
    It is possible to achieve this using scripting but it depends largely on what
    type of connectivity is considered acceptable: it takes some time for an OpenVPN
    client to detect when the remote server is not responding and to reconnect. The
    VPN connectivity will be intermittent in such a setup. Especially when the network
    connection to the main OpenVPN server is not stable, this can lead to very low
    availability.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 时常会有人提问，是否可以配置 OpenVPN 以支持自动恢复：设置第二个 OpenVPN 实例提供故障转移解决方案。当主 OpenVPN 服务器不可用时，备用实例接管。然而，当主
    OpenVPN 服务器重新上线时，客户端不会自动重新连接到主服务器。为此，需要进行客户端重置（或第二个 OpenVPN 实例的服务器重置）。可以通过脚本实现这一点，但这在很大程度上取决于所接受的连接类型：OpenVPN
    客户端需要一些时间来检测远程服务器不可响应并重新连接。在这种设置下，VPN 连接将是间歇性的，特别是当与主 OpenVPN 服务器的网络连接不稳定时，这可能导致非常低的可用性。
- en: A quick and dirty method to have all clients revert back to the first server
    is to use the management interface on the second server and disconnect all clients.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一种简单粗暴的方法让所有客户端恢复连接到第一个服务器，是通过第二个服务器上的管理接口断开所有客户端。
- en: See also
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Server-side routing* recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2. 
    Client-server IP-only Networks"), *Client-server IP-only Networks*, which explains
    the basic setup of OpenVPN
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[第 2 章](part0025.xhtml#aid-NQU21 "第 2 章。客户端-服务器 IP 网络")的 *服务器端路由* 方案，*客户端-服务器
    IP 网络*，解释了 OpenVPN 的基本设置。
- en: The C*onnection blocks* recipe, which shows an alternate and more flexible method
    for supporting multiple servers in a single client configuration file
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*连接块*配方，它展示了一种支持在单一客户端配置文件中使用多个服务器的替代且更灵活的方法'
- en: Inline certificates
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内联证书
- en: To ease the deployment of OpenVPN configuration, and public and private key
    files, a new feature is available to include all of them in a single file. This
    is done by integrating the contents of the `ca`, `cert`, `key`, and optionally
    the `tls-auth` file into the client configuration file itself. In this recipe,
    we will set up such a configuration file and use it to connect to our standard
    OpenVPN server.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化OpenVPN配置及公私钥文件的部署，现已提供一项新功能，可以将它们全部包含在一个文件中。这是通过将`ca`、`cert`、`key`，以及可选的`tls-auth`文件的内容集成到客户端配置文件中来实现的。在这个配方中，我们将设置这样的配置文件，并使用它连接到我们的标准OpenVPN服务器。
- en: Getting ready
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We will use the following network layout:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下网络布局：
- en: '![Getting ready](img/image00432.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00432.jpeg)'
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.11\. The client was running Fedora 22 Linux and OpenVPN 2.3.11\.
    Keep the configuration file, `basic-udp-server.conf`, from the *Server-side routing*
    recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only
    Networks"), *Client-server IP-only Networks* at hand, as well as the client configuration
    file, `basic-udp-client.conf`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[第2章](part0025.xhtml#aid-NQU21 "第2章 客户端-服务器IP仅网络")中的第一个配方，*客户端-服务器IP仅网络*，来设置客户端和服务器证书。对于这个配方，服务器计算机运行的是CentOS
    6 Linux和OpenVPN 2.3.11，而客户端运行的是Fedora 22 Linux和OpenVPN 2.3.11。保留来自[第2章](part0025.xhtml#aid-NQU21
    "第2章 客户端-服务器IP仅网络")的*服务器端路由*配方中的配置文件`basic-udp-server.conf`，以及客户端配置文件`basic-udp-client.conf`。
- en: How to do it...
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First, start the server:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，启动服务器：
- en: '[PRE10]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Create the client configuration file:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建客户端配置文件：
- en: '[PRE11]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Insert the contents of the `ca.crt`, `client1.crt`, `client1.key` and `ta.key`
    files in the configuration. Save it as `example10-3-client.conf`.
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将`ca.crt`、`client1.crt`、`client1.key`和`ta.key`文件的内容插入配置文件中。并将其保存为`example10-3-client.conf`。
- en: 'Then, connect the client:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，连接客户端：
- en: '[PRE12]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How it works...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When OpenVPN parses the configuration file, it scans for the directives `ca`, `cert`, `key`,
    and `tls-auth`, (and `dh` for server configuration files), but also for XML-like
    blobs starting with `<ca>`, `<cert>`, `<key>`, `<tls-auth>` and `<dh>` respectively.
    If an XML-like block is found, then the contents of this XML-like block are then
    read and treated in the same manner as when a file is specified. When all the
    required configuration files or blocks are present, the connection is established.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当OpenVPN解析配置文件时，它会扫描`ca`、`cert`、`key`和`tls-auth`指令（对于服务器配置文件还包括`dh`），同时也会扫描以`<ca>`、`<cert>`、`<key>`、`<tls-auth>`和`<dh>`为开头的类似XML的块。如果找到类似XML的块，则会读取该块的内容，并按指定文件的方式处理它。当所有必要的配置文件或块都存在时，连接将建立。
- en: Note that it is not required to treat all of the aforementioned configuration
    directives in the same manner. It is also possible to only specify an inline-block
    for the CA certificate and `tls-auth` files, as these files tend to be static
    for all the clients.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，并不要求以相同的方式处理所有上述的配置指令。也可以仅为CA证书和`tls-auth`文件指定内联块，因为这些文件对于所有客户端通常是静态的。
- en: There's more...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: As stated in the first version of the OpenVPN 2 Cookbook, it was also possible
    to specify an inline file using the `[[inline]]` tag. However, this tag was never
    properly documented and starting with OpenVPN 2.3 it is no longer functional.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 正如《OpenVPN 2 Cookbook》第一版中所述，之前也可以使用`[[inline]]`标签来指定内联文件。然而，这个标签从未得到妥善的文档化，并且从OpenVPN
    2.3开始，它已不再起作用。
- en: Connection blocks
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接块
- en: Similar to the inline certificates used in the previous recipe, it is also possible
    to specify connection blocks. These connection blocks are treated as multiple
    definitions for remote servers and they are tried in order until a VPN connection
    is established. The advantage of using a connection block is that for each remote
    server, server-specific parameters can be specified, such as the protocol (UDP
    or TCP), the remote port, whether a proxy server should be used, and so on.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 与前一个配方中使用的内联证书类似，也可以指定连接块。这些连接块被视为多个远程服务器的定义，并按顺序尝试，直到建立VPN连接为止。使用连接块的好处是，对于每个远程服务器，可以指定特定的参数，如协议（UDP或TCP）、远程端口、是否使用代理服务器等。
- en: In this recipe, we will set up two servers, one listening on a UDP port and
    the other on a TCP port. We will then configure the OpenVPN client to try the
    first server using a UDP connection. If the connection cannot be established,
    the client will attempt to connect to the second server using a TCP connection.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将设置两个服务器，一个监听UDP端口，另一个监听TCP端口。然后，我们将配置OpenVPN客户端以通过UDP连接尝试连接第一个服务器。如果连接无法建立，客户端将尝试通过TCP连接连接第二个服务器。
- en: Getting ready
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: 'We will use the following network layout:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下网络布局：
- en: '![Getting ready](img/image00433.jpeg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/image00433.jpeg)'
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.11\. The client was running Fedora 22 Linux and OpenVPN 2.3.11\.
    Keep the configuration file, `basic-udp-server.conf`, from the *Server-side routing*
    recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only
    Networks"), *Client-server IP-only Networks*, as well as the server configuration
    file, `example8-9-server.conf`, from the *Tuning TCP-based connections* recipe
    from [Chapter 8](part0092.xhtml#aid-2NNJO1 "Chapter 8. Performance Tuning"), *Performance
    Tuning*.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[第2章](part0025.xhtml#aid-NQU21 "第2章. 客户端-服务器仅IP网络")中的第一个配方，设置客户端和服务器证书，*客户端-服务器仅IP网络*。在此配方中，服务器计算机运行CentOS
    6 Linux和OpenVPN 2.3.11，客户端运行Fedora 22 Linux和OpenVPN 2.3.11。保留*服务器端路由*配方中的配置文件`basic-udp-server.conf`，该配方位于[第2章](part0025.xhtml#aid-NQU21
    "第2章. 客户端-服务器仅IP网络")，*客户端-服务器仅IP网络*，以及*调优基于TCP的连接*配方中的服务器配置文件`example8-9-server.conf`，该配方位于[第8章](part0092.xhtml#aid-2NNJO1
    "第8章. 性能调优")，*性能调优*。
- en: How to do it...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Start both the servers:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动两个服务器：
- en: '[PRE13]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Check the log files to check that both the servers have successfully started.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查日志文件，确认两个服务器已经成功启动。
- en: 'Create the client configuration file:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建客户端配置文件：
- en: '[PRE14]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Save it as `example10-4-client.conf`.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其保存为`example10-4-client.conf`。
- en: 'Start the client:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动客户端：
- en: '[PRE15]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'After the connection has been established, stop the first OpenVPN process on
    the server that the client connected to:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接建立后，停止客户端连接的第一个OpenVPN进程：
- en: '[PRE16]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: And wait for the client to reconnect. After the default timeout period, the
    client will reconnect to the alternate server using the TCP protocol.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 等待客户端重新连接。在默认的超时期后，客户端将使用TCP协议重新连接到备用服务器。
- en: How it works...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: When the OpenVPN client starts up, it attempts to connect to the server specified
    in the first `<connection>` block. If that connection fails, it will try the next `<connection>`
    block entry and so forth. When an OpenVPN server becomes unavailable or is stopped,
    the client will automatically restart and try to connect to the first available
    OpenVPN server again.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 当OpenVPN客户端启动时，它会尝试连接到第一个`<connection>`块中指定的服务器。如果该连接失败，它将尝试下一个`<connection>`块条目，以此类推。当OpenVPN服务器不可用或被停止时，客户端将自动重启并再次尝试连接到第一个可用的OpenVPN服务器。
- en: The OpenVPN client first parses the global directives, which are specified outside
    the `<connection>` blocks. For each block, the global directives are then overruled
    using block-specific directives. This makes it easier to specify in the `<connection>`
    blocks only those parameters that are different for each connection.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVPN客户端首先解析全局指令，这些指令在`<connection>`块之外指定。对于每个块，使用块特定的指令覆盖全局指令。这使得在`<connection>`块中只需指定每个连接不同的参数。
- en: There's more...
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Connection blocks, as well as inline certificates, are very handy features to
    easily distribute OpenVPN configurations using a single file. However, a consequence
    of these features is that the use of the command line to overrule the directives
    specified in the configuration file becomes harder, if not impossible. There are
    a few other things to keep in mind when using connection blocks.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 连接块以及内联证书是非常方便的功能，可以通过单个文件轻松分发 OpenVPN 配置。然而，这些功能的一个后果是，使用命令行来覆盖配置文件中指定的指令变得更加困难，甚至几乎不可能。在使用连接块时，还有一些其他需要注意的事项。
- en: Allowed directives inside connection blocks
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接块内允许的指令
- en: 'There are only a few directives allowed inside a connection block:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 连接块中只允许使用少数几条指令：
- en: '`bind` and `bind-ipv6`'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` 和 `bind-ipv6`'
- en: '`connect-retry`, `connect-retry-max`, and `connect-timeout`'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connect-retry`、`connect-retry-max` 和 `connect-timeout`'
- en: '`explicit-exit-notify`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`explicit-exit-notify`'
- en: '`float`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`float`'
- en: '`http-proxy`, `http-proxy-option`, `http-proxy-retry`, and `http-proxy-timeout`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http-proxy`、`http-proxy-option`、`http-proxy-retry` 和 `http-proxy-timeout`'
- en: '`link-mtu` and `link-mtu-extra`'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`link-mtu` 和 `link-mtu-extra`'
- en: '`local lport`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`local lport`'
- en: '`mssfix`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mssfix`'
- en: '`nobind`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nobind`'
- en: '`port`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`port`'
- en: '`proto`'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`proto`'
- en: '`remote` and `rport`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`remote` 和 `rport`'
- en: '`socks-proxy` and `socks-proxy-retry`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`socks-proxy` 和 `socks-proxy-retry`'
- en: '`tun-mtu` and `tun-mtu-extra`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tun-mtu` 和 `tun-mtu-extra`'
- en: All other directives are considered global and can only be specified once.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 所有其他指令都被视为全局指令，且只能指定一次。
- en: Pitfalls when mixing TCP and UDP-based setups
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 混合 TCP 和 UDP 配置时的潜在问题
- en: Connection blocks make it very easy to mix TCP and UDP-based setups. The downside
    is that the global parameters specified in the configuration file must be valid
    for both the TCP and UDP-based setups.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 连接块使得混合 TCP 和 UDP 配置变得非常容易。缺点是，配置文件中指定的全局参数必须对 TCP 和 UDP 配置都有效。
- en: See also
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Multiple remotes and remote-random* recipe earlier in this chapter, which
    explains how to achieve the same setup without using connection blocks
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章前面提到的 *多个远程和远程随机* 方法，解释了如何在不使用连接块的情况下实现相同的设置
- en: Details of ifconfig-pool-persist
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`ifconfig-pool-persist` 的详细信息'
- en: 'One of the options available in OpenVPN that can lead to a lot of confusion
    is `ifconfig-pool-persist`. This directive tells the OpenVPN server to maintain
    a persistent list of IP addresses handed out to different clients. When a client
    reconnects at a later time, the previously-used address is reused. This is only
    one of three methods for assigning static addresses to an OpenVPN client. The
    other two methods are:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVPN 中的一个选项是 `ifconfig-pool-persist`，它可能会导致很多混淆。这个指令告诉 OpenVPN 服务器保持一个持久的
    IP 地址列表，分配给不同的客户端。当客户端稍后重新连接时，之前使用的地址会被重新使用。这只是为 OpenVPN 客户端分配静态地址的三种方法之一。其他两种方法是：
- en: Using an `ifconfig-push` statement in a client-connect script
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在客户端连接脚本中使用 `ifconfig-push` 语句
- en: Using an `ifconfig-push` statement in a client-configuration file
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在客户端配置文件中使用 `ifconfig-push` 语句
- en: Both of these take precedence over the entries found in the `ifconfig-pool-persist`
    file. Experience has shown that it is often a good idea to temporarily disable
    this option when an OpenVPN setup is not working properly.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个参数优先于 `ifconfig-pool-persist` 文件中的条目。经验表明，当 OpenVPN 设置无法正常工作时，暂时禁用此选项通常是个好主意。
- en: In this recipe, we will demonstrate how to use `ifconfig-pool-persist` and what
    the pitfalls are.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在本方法中，我们将演示如何使用 `ifconfig-pool-persist` 以及它的潜在问题。
- en: Getting ready
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will use the following network layout:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下网络布局：
- en: '![Getting ready](img/image00434.jpeg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/image00434.jpeg)'
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.11\. The client was running Fedora 22 Linux and OpenVPN 2.3.11\.
    Keep the configuration file, `basic-udp-server.conf`, from the *Server-side routing*
    recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only
    Networks"), *Client-server IP-only Networks* at hand, as well as the client configuration
    file, `basic-udp-client.conf`, from the same recipe. The second client was running
    Windows 7 64 bit and OpenVPN 2.3.11\. For this client, keep the client configuration
    file, `basic-udp-client.ovpn`, from the *Using an ifconfig-pool block* recipe
    from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks* at hand.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[第2章](part0025.xhtml#aid-NQU21 "第2章. 客户端-服务器仅IP网络")中的第一个配方设置客户端和服务器证书，*客户端-服务器仅IP网络*。对于这个配方，服务器计算机运行CentOS
    6 Linux和OpenVPN 2.3.11，客户端运行Fedora 22 Linux和OpenVPN 2.3.11。保留*第2章*中*服务器端路由*配方中的配置文件`basic-udp-server.conf`，以及来自同一配方的客户端配置文件`basic-udp-client.conf`。第二个客户端运行Windows
    7 64位和OpenVPN 2.3.11。对于此客户端，请保留*使用ifconfig-pool块*配方中来自[第2章](part0025.xhtml#aid-NQU21
    "第2章. 客户端-服务器仅IP网络")的客户端配置文件`basic-udp-client.ovpn`。
- en: How to do it...
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the server configuration file by adding the following line to the `basic-udp-server.conf`
    file:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过向`basic-udp-server.conf`文件添加以下行来创建服务器配置文件：
- en: '[PRE17]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Save it as `example10-4-server.conf` file.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其保存为`example10-4-server.conf`文件。
- en: 'Start the server:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE18]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: An empty file, `/etc/openvpn/cookbook/ipp.txt`, will be created as the server
    starts up.
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个空文件`/etc/openvpn/cookbook/ipp.txt`将在服务器启动时创建。
- en: 'Connect the first client:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接第一个客户端：
- en: '[PRE19]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Normally, this client will be assigned `10.200.0.2`, which is the first available
    IP address in the `server` IP range.
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常，这个客户端将被分配`10.200.0.2`，这是`server` IP范围内第一个可用的IP地址。
- en: 'Stop both the client and the server. List the contents of the `ipp.txt` file:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止客户端和服务器。列出`ipp.txt`文件的内容：
- en: '[PRE20]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Start the server again. Now, connect the second client, which has a different
    certificate:![How to do it...](img/image00435.jpeg)
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动服务器。现在，连接第二个客户端，该客户端有不同的证书：![如何操作...](img/image00435.jpeg)
- en: This client will now be assigned the address `10.200.0.3`. Without the `ifconfig-pool-persist`
    option, it would have been assigned the first available address, which is  `10.200.0.2`.
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，这个客户端将被分配地址`10.200.0.3`。如果没有`ifconfig-pool-persist`选项，它将被分配第一个可用地址`10.200.0.2`。
- en: How it works...
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When the OpenVPN server starts, it reads the `ipp.txt` file, if it exists, and
    it tries to re-assign the IP addresses to the client certificates found in the
    file. Whenever an OpenVPN client with one of the existing client certificates
    connects, it is assigned the address found in the `ipp.txt` file, unless the server
    VPN IP address space is too small for the number of already-connected clients.
    In that case, the client receives the first available address from the server
    VPN IP address space.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 当OpenVPN服务器启动时，它会读取`ipp.txt`文件（如果存在），并尝试重新分配文件中找到的客户端证书的IP地址。每当一个OpenVPN客户端使用现有的客户端证书连接时，它将被分配`ipp.txt`文件中找到的地址，除非服务器的VPN
    IP地址空间对已经连接的客户端数量来说过小。在这种情况下，客户端将从服务器VPN IP地址空间中获得第一个可用地址。
- en: The first client that connected received the first available address, `10.200.0.2`,
    from the VPN IP server address range. When the OpenVPN server shuts down, this
    information is recorded in the `ipp.txt` file. The second time the OpenVPN server
    started, this information was reloaded and the address, `10.200.0.2`, was held
    in reserve for the client with certificate `client1`. When the second client connected
    with certificate `client2`, it received the next available address in the server
    VPN IP address range, which is `10.200.0.3`. When the server shuts down again,
    this information is also recorded in the `ipp.txt` file.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个连接的客户端从VPN IP服务器地址范围中接收到第一个可用地址`10.200.0.2`。当OpenVPN服务器关闭时，这些信息会被记录在`ipp.txt`文件中。第二次启动OpenVPN服务器时，这些信息会被重新加载，并且地址`10.200.0.2`被为证书`client1`的客户端保留。当第二个客户端使用证书`client2`连接时，它将获得服务器VPN
    IP地址范围中的下一个可用地址，即`10.200.0.3`。当服务器再次关闭时，这些信息也会记录在`ipp.txt`文件中。
- en: This means that from now on, the first client will always receive the `.2` address
    and the second client the `.3` address. However, it is not a guarantee that the
    listed IP addresses will be assigned to a particular client certificate. The exception
    occurs when many VPN clients connect to the server. If the VPN IP address range
    is exhausted and the first client is not connected at that time, its address is
    recycled for other VPN clients. If the client with certificate `client1` then
    tries to connect to the server, it will be assigned the first available address.
    For a guaranteed assignment, a `client-config-dir` file should be used.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，从现在开始，第一个客户端将始终获得 `.2` 地址，第二个客户端将获得 `.3` 地址。然而，并不能保证列出的 IP 地址会分配给特定的客户端证书。例外情况发生在多个
    VPN 客户端连接到服务器时。如果 VPN IP 地址范围被用尽，而第一个客户端此时没有连接，它的地址会被回收并分配给其他 VPN 客户端。如果具有证书 `client1`
    的客户端随后尝试连接服务器，它将被分配到第一个可用地址。为了保证分配，可以使用 `client-config-dir` 文件。
- en: There's more...
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: When using the `ifconfig-pool-persist` directive, there are a few pitfalls to
    watch out for.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `ifconfig-pool-persist` 指令时，需要注意一些陷阱。
- en: Specifying the update interval
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定更新间隔
- en: 'Because we did not explicitly specify an update interval, the `ipp.txt` file
    is updated every 600 seconds (10 minutes). This can also be seen by looking at
    the `ipp.txt` file right after a new client connects: the newly-found client certificate
    and VPN IP are not listed in the `ipp.txt` file until the first update interval
    passes or when the OpenVPN server process shuts down.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们没有显式指定更新间隔，`ipp.txt` 文件每 600 秒（10 分钟）更新一次。通过查看新客户端连接后不久的 `ipp.txt` 文件，也可以看到这一点：直到第一个更新间隔过去或
    OpenVPN 服务器进程关闭时，新找到的客户端证书和 VPN IP 才会出现在 `ipp.txt` 文件中。
- en: It is also possible to specify an update interval of 0 seconds, which means
    that the `ipp.txt` file is never updated. This causes the OpenVPN server to associate
    IP addresses with the client certificate names found in the `ipp.txt` file at
    the startup but these associations will never change afterwards.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以指定 0 秒的更新间隔，这意味着 `ipp.txt` 文件永远不会更新。这会导致 OpenVPN 服务器在启动时将 IP 地址与 `ipp.txt`
    文件中找到的客户端证书名称关联，但这些关联之后不会再发生变化。
- en: Caveat - the duplicate-cn option
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 警告 - `duplicate-cn` 选项
- en: The `duplicate-cn` option can be used to allow the same client certificate to
    connect to the same server a number of times. If this option is used, the `ifconfig-pool-persist`
    option becomes useless, as the same client certificate will be connected twice.
    This means that the OpenVPN server has to hand out two different IP addresses
    to each client and the entry in the `ipp.txt` file becomes meaningless.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`duplicate-cn` 选项可用于允许相同的客户端证书多次连接到同一服务器。如果使用此选项，则 `ifconfig-pool-persist`
    选项将变得无效，因为相同的客户端证书会连接两次。这意味着 OpenVPN 服务器必须为每个客户端分配两个不同的 IP 地址，并且 `ipp.txt` 文件中的条目变得毫无意义。'
- en: When topology net30 is used
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当使用 `topology net30` 时
- en: 'When the server option `topology net30` is used, the format of the `ipp.txt`
    file is slightly different. In the `net30` topology mode, each client is assigned
    a `/30` network address consisting of four IP addresses: the network address,
    the VPN server endpoint address, the actual client VPN IP address, and the broadcast
    address for the `/30` network. In the `ipp.txt` file, the first of these is recorded:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用服务器选项 `topology net30` 时，`ipp.txt` 文件的格式会略有不同。在 `net30` 拓扑模式中，每个客户端都会分配一个由四个
    IP 地址组成的 `/30` 网络地址：网络地址、VPN 服务器端点地址、实际的客户端 VPN IP 地址，以及 `/30` 网络的广播地址。在 `ipp.txt`
    文件中，记录的是其中的第一个地址：
- en: '[PRE21]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Connecting using a SOCKS proxy
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 SOCKS 代理连接
- en: Under certain circumstances, it is not possible to directly connect to an OpenVPN
    server. This happens most often when firewalls are restricting UDP-based traffic.
    In such cases, OpenVPN can connect to an OpenVPN server via an intermediary host
    known as a proxy. OpenVPN supports two types of proxies, SOCKS and HTTP-based,
    both of which work only using TCP-based configurations. This recipe will outline
    how to access an OpenVPN server via a SOCKS proxy, whereas the next two recipes
    will show how to use an HTTP proxy, both with and without authentication.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，无法直接连接到 OpenVPN 服务器。这种情况最常发生在防火墙限制 UDP 流量时。在这种情况下，OpenVPN 可以通过一个中介主机（即代理）连接到
    OpenVPN 服务器。OpenVPN 支持两种类型的代理：SOCKS 和基于 HTTP 的代理，二者都仅通过基于 TCP 的配置工作。本食谱将介绍如何通过
    SOCKS 代理访问 OpenVPN 服务器，而接下来的两个食谱将展示如何使用 HTTP 代理，包括和不包括身份验证。
- en: SOCKS proxies can very easily be set up using almost any SSH client. On Linux
    and Mac OS X, it can be done using the `ssh` or `slogin` commands, whereas, on
    Windows, the free SSH client PuTTY can be used. In this recipe, we will use SSH
    on a Linux client to set up a public SOCKS proxy. A Windows OpenVPN client will
    connect using this proxy.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过几乎任何SSH客户端轻松设置SOCKS代理。在Linux和Mac OS X上，可以使用`ssh`或`slogin`命令，而在Windows上，可以使用免费的SSH客户端PuTTY。在这个步骤中，我们将在Linux客户端上使用SSH设置一个公共SOCKS代理。Windows
    OpenVPN客户端将通过此代理连接。
- en: Getting ready
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will use the following network layout:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下网络布局：
- en: '![Getting ready](img/image00436.jpeg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/image00436.jpeg)'
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.12\. The client was running Windows 7 64 bit and OpenVPN 2.3.10\.
    Keep the configuration file, `example8-9-server.conf`, from the *Tuning TCP-based
    connections* recipe from [Chapter 8](part0092.xhtml#aid-2NNJO1 "Chapter 8. Performance
    Tuning"), *Performance Tuning* at hand. For the client, keep the configuration
    file, `basic-tcp-client.ovpn`, from *Using an ifconfig-pool block* recipe from
    the [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks* at hand.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[第2章](part0025.xhtml#aid-NQU21 "第2章. 客户端-服务器仅IP网络")中的第一个步骤来设置客户端和服务器证书，*客户端-服务器仅IP网络*。在本步骤中，服务器计算机运行CentOS
    6 Linux和OpenVPN 2.3.12，客户端运行Windows 7 64位和OpenVPN 2.3.10。保留来自[第8章](part0092.xhtml#aid-2NNJO1
    "第8章. 性能调优")，*性能调优*的`example8-9-server.conf`配置文件。对于客户端，保留来自[第2章](part0025.xhtml#aid-NQU21
    "第2章. 客户端-服务器仅IP网络")的`basic-tcp-client.ovpn`配置文件。
- en: How to do it...
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Start the server:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE22]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Right-click on the OpenVPN GUI tray icon and select **Settings**. Fill in the
    name or IP address of the **SOCKS proxy** host, and then click on **OK**:![How
    to do it...](img/image00437.jpeg)
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击OpenVPN GUI托盘图标并选择**设置**。填写**SOCKS代理**主机的名称或IP地址，然后单击**确定**：![如何操作...](img/image00437.jpeg)
- en: 'Set up a **SOCKS proxy** by setting up an SSH connection on the intermediary
    proxy host. The destination address for the SSH connection is a server which can
    reach the OpenVPN server:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在中介代理主机上设置SSH连接来设置**SOCKS代理**。SSH连接的目标地址是可以访问OpenVPN服务器的服务器：
- en: '[PRE23]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now start the OpenVPN client in another terminal window:![How to do it...](img/image00438.jpeg)![How
    to do it...](img/image00439.jpeg)
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在另一个终端窗口中启动OpenVPN客户端：![如何操作...](img/image00438.jpeg)![如何操作...](img/image00439.jpeg)
- en: The connection log will show that OpenVPN first connects to the remote proxy
    host (in this screenshot, the IP address `192.168.3.17` was used). This connection
    is then forwarded to the OpenVPN server and the VPN is established:![How to do
    it...](img/image00440.jpeg)
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接日志会显示OpenVPN首先连接到远程代理主机（在此截图中，使用的IP地址是`192.168.3.17`）。然后，该连接被转发到OpenVPN服务器，并建立VPN：![如何操作...](img/image00440.jpeg)
- en: How it works...
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: A **SOCKS proxy** host acts as an intermediary between the (OpenVPN) client
    and the server. SOCKS proxies can also be configured in most web browsers and
    are often used to gain access through a hotel or corporate firewall. The client
    first connects to the **SOCKS proxy** host and then requests a new connection
    to the actual endpoint, which is the OpenVPN server in this case. If the connection
    is allowed by the SOCKS host, the connection is established and the VPN connection
    can be set up.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '**SOCKS代理**主机充当(OpenVPN)客户端和服务器之间的中介。SOCKS代理还可以在大多数Web浏览器中配置，通常用于通过酒店或企业防火墙访问网络。客户端首先连接到**SOCKS代理**主机，然后请求与实际终端的新连接，在本例中是OpenVPN服务器。如果SOCKS主机允许此连接，则连接将建立，VPN连接可以设置。'
- en: There's more...
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Before using a proxy host to set up a VPN connection, there are a few things
    to consider:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用代理主机设置VPN连接之前，有几个事项需要考虑：
- en: Performance
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 性能
- en: Proxy hosts tend to have a severe impact on the performance of a VPN setup.
    Both the bandwidth and the latency are usually affected when proxy hosts are used.
    This is mostly caused by having to connect to a separate host. There is little
    that can be done about this drop in performance.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 代理主机往往会严重影响VPN设置的性能。使用代理主机时，带宽和延迟通常都会受到影响。这主要是由于需要连接到一个独立的主机。对于这种性能下降，很难采取有效措施。
- en: SOCKS proxies via SSH
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过SSH的SOCKS代理
- en: 'SSH can be a very handy tool to set up a **SOCKS proxy** host, over which an
    OpenVPN connection can be set up. Apart from the drawback mentioned above, this
    introduces another penalty: both the SSH connection and the VPN connection will
    normally be encrypted. Thus, tunneling traffic over an encrypted VPN link, which
    in itself is tunneled over an encrypted SSH link, is double encrypted!'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: SSH 可以是设置**SOCKS代理**主机的非常方便工具，通过它可以建立 OpenVPN 连接。除了上述提到的缺点外，这还带来另一个问题：SSH 连接和
    VPN 连接通常都会加密。因此，通过加密 VPN 连接传输流量，其本身又通过加密 SSH 连接进行了双重加密！
- en: 'A question that you should ask yourself if you are tunneling VPN traffic over
    an SSH tunnel is: why? What type of traffic needs to be tunneled over a VPN link
    that cannot be tunneled via a SOCKS-over-SSH tunnel? Most modern web browsers
    and e-mail clients have built-in support for SOCKS hosts, eliminating the need
    for a full-blown VPN. File sharing protocols such as Windows file sharing (**Common
    Internet File System** (**CIFS**)) can also be tunneled over an SSH connection.
    In those cases, a VPN tunnel adds only extra complexity.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在通过 SSH 隧道隧道化 VPN 流量，则应问自己的一个问题是：为什么？什么类型的流量需要通过 VPN 链路进行隧道，而不能通过 SOCKS-over-SSH
    隧道进行隧道？大多数现代 Web 浏览器和电子邮件客户端都内置了对 SOCKS 主机的支持，从而无需完整的 VPN。文件共享协议（如 Windows 文件共享（**Common
    Internet File System**（**CIFS**））也可以通过 SSH 连接进行隧道化。在这些情况下，VPN 隧道只增加了额外的复杂性。
- en: SOCKS proxies using plain-text authentication
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用明文身份验证的 SOCKS 代理
- en: In OpenVPN 2.2 and higher, support is added to connect to a SOCKS proxy that
    required authentication. For OpenVPN 2.2, plain-text authentication support is
    added. Though the name "plain text" may suggest otherwise, the authentication
    mechanism is secure, as the connection to the **SOCKS proxy** host is encrypted
    first.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpenVPN 2.2 及更高版本中，添加了对需要身份验证的 SOCKS 代理的支持。对于 OpenVPN 2.2，添加了明文身份验证支持。尽管“明文”可能暗示着不同，但认证机制是安全的，因为与**SOCKS代理**主机的连接首先是加密的。
- en: See also
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The next two recipes in this chapter will deal with connecting an OpenVPN client
    to a server via an HTTP proxy
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的接下来两个配方将处理通过 HTTP 代理将 OpenVPN 客户端连接到服务器的问题
- en: Connecting via an HTTP proxy
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到 HTTP 代理
- en: As stated in the previous recipe, it is not possible to directly connect to
    an OpenVPN server under certain circumstances. In such cases, OpenVPN can connect
    to an OpenVPN server via an intermediary host known as a proxy. This recipe will
    outline how to access an OpenVPN server via an roxy.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一配方所述，在某些情况下不可能直接连接到 OpenVPN 服务器。在这种情况下，OpenVPN 可以通过称为代理的中间主机连接到 OpenVPN 服务器。本配方将概述如何通过代理访问
    OpenVPN 服务器。
- en: The HTTP proxy used in this recipe is a Linux-based Apache `httpd` server with
    the `mod_proxy` module loaded. This module can be configured to allow `CONNECT`
    requests. This type of request is needed to connect to secure web servers (HTTPS)
    as well as to an OpenVPN server. If the `CONNECT` request is not allowed, then
    the HTTP proxy cannot be used to set up an OpenVPN connection.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方中使用的 HTTP 代理是基于 Linux 的 Apache `httpd` 服务器，并加载了`mod_proxy`模块。可以配置此模块以允许`CONNECT`请求。需要此类型请求来连接到安全的
    Web 服务器（HTTPS）以及 OpenVPN 服务器。如果不允许`CONNECT`请求，则无法使用 HTTP 代理设置 OpenVPN 连接。
- en: Getting ready
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We will use the following network layout:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下网络布局：
- en: '![Getting ready](img/image00441.jpeg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00441.jpeg)'
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.12\. The client was running Windows 7 64 bit and OpenVPN 2.3.11\.
    Keep the configuration file, `example8-9-server.conf`, from the *Tuning TCP-based
    connections* recipe from [Chapter 8](part0092.xhtml#aid-2NNJO1 "Chapter 8. Performance
    Tuning"), *Performance Tuning*, as well as the client configuration file, `example8-9.ovpn`,
    from the same recipe.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[第 2 章](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks")中的第一篇配方设置客户端和服务器证书，*客户端-服务器仅IP网络*。对于这个配方，服务器计算机运行
    CentOS 6 Linux 和 OpenVPN 2.3.12。客户端运行 Windows 7 64 位和 OpenVPN 2.3.11。保留配置文件`example8-9-server.conf`，来自[第
    8 章](part0092.xhtml#aid-2NNJO1 "Chapter 8. Performance Tuning")的*Tuning TCP-based
    connections*配方，以及相同配方的客户端配置文件`example8-9.ovpn`。
- en: How to do it...
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Start the server:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '启动服务器:'
- en: '[PRE24]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Modify the client configuration file, `example8-9.ovpn`, by adding the lines:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下行来修改客户端配置文件`example8-9.ovpn`：
- en: '[PRE25]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Here, `http-proxy-host` is either the name or the IP address of the host running
    the HTTP proxy software. In this recipe, the HTTP proxy was running on the HTTP
    default port `80`. Save the configuration file as `example10-6.ovpn`.
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，`http-proxy-host`是运行HTTP代理软件的主机的名称或IP地址。在此示例中，HTTP代理运行在默认HTTP端口`80`上。将配置文件保存为`example10-6.ovpn`。
- en: Start the client, and then check the connection log.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动客户端，然后检查连接日志。
- en: 'The connection log will show that the OpenVPN client first connects to the
    HTTP proxy host and then sends an `HTTP ''CONNECT''` request to connect to the
    OpenVPN server:'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连接日志将显示OpenVPN客户端首先连接到HTTP代理主机，然后发送`HTTP 'CONNECT'`请求以连接到OpenVPN服务器：
- en: '![How to do it...](img/image00442.jpeg)'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00442.jpeg)'
- en: The HTTP proxy host responds with the HTTP code `200` meaning `OK`, after which
    the VPN connection is established.
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: HTTP代理主机响应HTTP代码`200`，表示`OK`，之后建立VPN连接。
- en: How it works...
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: An HTTP proxy host acts as an intermediary between the (OpenVPN) client and
    the server. HTTP proxies can be configured in most web browsers and are often
    used to gain access through a hotel or a corporate firewall. The client first
    connects to the HTTP proxy host and then requests a new connection to the actual
    endpoint using the `HTTP 'CONNECT'` request. If the HTTP proxy host allows the `CONNECT`
    request, the HTTP code `200` is returned and the connection to the OpenVPN server
    is granted. From here on, the OpenVPN connection is set up in a similar fashion
    to a regular TCP-based setup.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP代理主机充当（OpenVPN）客户端和服务器之间的中介。HTTP代理可以在大多数网页浏览器中配置，通常用于通过酒店或公司防火墙获取访问权限。客户端首先连接到HTTP代理主机，然后使用`HTTP
    'CONNECT'`请求向实际终端发起新连接。如果HTTP代理主机允许`CONNECT`请求，则返回HTTP代码`200`，并授权连接到OpenVPN服务器。从此以后，OpenVPN连接的设置方式与常规的基于TCP的设置相似。
- en: There's more...
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: When using an HTTP proxy host to connect to an OpenVPN server, there are a few
    caveats.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用HTTP代理主机连接到OpenVPN服务器时，有几个需要注意的事项。
- en: http-proxy options
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: http-proxy选项
- en: 'There are a few options available in OpenVPN to configure the way in which
    OpenVPN connects with the HTTP proxy host:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVPN提供了一些选项来配置OpenVPN如何与HTTP代理主机连接：
- en: '`http-proxy-timeout` (`n`): This sets the timeout when connecting to the HTTP
    proxy host to (`n`) seconds. The default value is 5 seconds.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http-proxy-timeout`（`n`）：此选项将连接到HTTP代理主机的超时时间设置为（`n`）秒。默认值为5秒。'
- en: '`http-proxy-option AGENT` (`string`): This sets the HTTP agent to (`string`)
    when connecting to the HTTP proxy host. Some proxies allow connections from "well-known"
    web browsers only.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http-proxy-option AGENT`（`string`）：在连接到HTTP代理主机时，将HTTP代理设置为（`string`）。一些代理仅允许来自“知名”网页浏览器的连接。'
- en: '`http-proxy-option VERSION 1.1`: This sets the HTTP protocol version to 1.1\.
    The default is HTTP/1.0\. OpenVPN 2.1 is not fully HTTP/1.1 compliant when connecting
    to an HTTP proxy host, causing some proxies to refuse access. This is fixed in
    OpenVPN 2.2.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http-proxy-option VERSION 1.1`：此选项将HTTP协议版本设置为1.1。默认值为HTTP/1.0。当OpenVPN 2.1连接到HTTP代理主机时，并未完全支持HTTP/1.1，这导致一些代理拒绝访问。在OpenVPN
    2.2中已修复此问题。'
- en: Dodging firewalls
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 躲避防火墙
- en: Please note that OpenVPN makes no attempt to hide itself from a firewall. Modern
    firewalls that perform the so-called deep-packet inspection can easily detect
    the type of traffic that OpenVPN is using to connect to the OpenVPN server and
    can block access based on that.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，OpenVPN不会尝试隐藏自己以躲避防火墙。现代防火墙进行所谓的深度包检查时，能够轻松检测到OpenVPN用于连接到OpenVPN服务器的流量类型，并可以基于此阻止访问。
- en: Performance
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 性能
- en: Similar to SOCKS proxies, HTTP proxy hosts tend to have an impact on the performance
    of a VPN setup. Both the bandwidth and the latency are usually affected when proxy
    hosts are used. This is mostly caused by having to connect to a separate host.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于SOCKS代理，HTTP代理主机通常会对VPN设置的性能产生影响。使用代理主机时，带宽和延迟通常会受到影响。这主要是由于需要连接到一个单独的主机。
- en: Using the OpenVPN GUI
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用OpenVPN GUI
- en: 'In Windows, you can also the use OpenVPN GUI application to set up an HTTP
    proxy server:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows中，你还可以使用OpenVPN GUI应用程序来设置HTTP代理服务器：
- en: '![Using the OpenVPN GUI](img/image00443.jpeg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![使用OpenVPN GUI](img/image00443.jpeg)'
- en: See also
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The previous and next recipes in this chapter deal with connecting via a **SOCKS
    proxy** host and connecting via an HTTP proxy with authentication
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的前后示例分别介绍了通过**SOCKS代理**主机连接以及通过带身份验证的HTTP代理连接。
- en: Connecting via an HTTP proxy with authentication
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过带身份验证的HTTP代理连接
- en: In the previous recipe, a plain HTTP proxy was used to connect to an OpenVPN
    server. As a follow-up, in this recipe we will show how an OpenVPN connection
    can be set up when the HTTP proxy server requires authentication.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的食谱中，使用了一个普通的 HTTP 代理来连接 OpenVPN 服务器。作为后续步骤，在本食谱中我们将展示当 HTTP 代理服务器需要身份验证时，如何设置
    OpenVPN 连接。
- en: The HTTP proxy used in this recipe is a Linux-based Apache `httpd` server with
    the `mod_proxy` module loaded and configured for basic authentication.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱中使用的 HTTP 代理是一个基于 Linux 的 Apache `httpd` 服务器，已加载并配置了支持基本身份验证的 `mod_proxy`
    模块。
- en: Getting ready
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We will use the following network layout:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下网络布局：
- en: '![Getting ready](img/image00444.jpeg)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00444.jpeg)'
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.12\. The client was running Fedora 22 Linux and OpenVPN 2.3.11\.
    Keep the configuration file, `example8-9-server.conf`, from the *Tuning TCP-based
    connections* recipe from [Chapter 8](part0092.xhtml#aid-2NNJO1 "Chapter 8. Performance
    Tuning"), *Performance Tuning*, as well as the client configuration file, `basic-tcp-client.conf`,
    from the *Server-side routing* recipe from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*
    at hand.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [第 2 章](part0025.xhtml#aid-NQU21 "第 2 章：客户端-服务器仅IP网络") 的第一个食谱来设置客户端和服务器证书，*客户端-服务器仅IP网络*。对于这个食谱，服务器计算机运行的是
    CentOS 6 Linux 和 OpenVPN 2.3.12，客户端运行的是 Fedora 22 Linux 和 OpenVPN 2.3.11。保留来自
    [第 8 章](part0092.xhtml#aid-2NNJO1 "第 8 章：性能优化")，*性能优化*，中 *优化基于 TCP 的连接* 食谱中的配置文件
    `example8-9-server.conf`，以及来自 [第 2 章](part0025.xhtml#aid-NQU21 "第 2 章：客户端-服务器仅IP网络")，*客户端-服务器仅IP网络*
    中 *服务器端路由* 食谱中的客户端配置文件 `basic-tcp-client.conf`。
- en: How to do it...
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Start the server:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE26]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Set up the HTTP proxy server to support basic authentication. For the Apache `httpd`
    server used in this recipe, the following `proxy.conf` file was used:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置 HTTP 代理服务器以支持基本身份验证。对于本食谱中使用的 Apache `httpd` 服务器，使用了以下 `proxy.conf` 文件：
- en: '[PRE27]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create the `proxy-password` file using Apache''s `htpasswd` command:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Apache 的 `htpasswd` 命令创建 `proxy-password` 文件：
- en: '[PRE28]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Add the following lines to the client configuration file, `basic-tcp-client.conf`:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户端配置文件 `basic-tcp-client.conf` 中添加以下行：
- en: '[PRE29]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Save the configuration file as `example10-7-client.conf`.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将配置文件保存为 `example10-7-client.conf`。
- en: 'Create a plain-text file containing the username and password created in step
    3; for example, by using:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含步骤 3 中创建的用户名和密码的纯文本文件；例如，使用以下方法：
- en: '[PRE30]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Start the client and wait for the connection to be established:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动客户端并等待连接建立：
- en: '[PRE31]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Next, we take a closer look at the client logfile. If the right username and
    password are entered, the HTTP proxy grants access to connect to the OpenVPN server
    and the VPN connection is established:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们更仔细地查看客户端日志文件。如果输入正确的用户名和密码，HTTP 代理将允许连接 OpenVPN 服务器并建立 VPN 连接：
- en: '[PRE32]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: As can be seen from the connection log, the OpenVPN client attempts basic proxy
    authorization when connecting to the HTTP proxy server. If the authentication
    is successful, the HTTP proxy grants access to the client to connect to the server.
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从连接日志可以看出，OpenVPN 客户端在连接到 HTTP 代理服务器时尝试进行基本代理授权。如果身份验证成功，HTTP 代理则允许客户端访问并连接到服务器。
- en: How it works...
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Similar to the previous recipe, the OpenVPN client first connects to the HTTP
    proxy host. It attempts to authenticate to the HTTP proxy using basic authentication,
    using the username and password supplied in the proxy password file, `/etc/openvpn/cookbook/proxypass`.
    After successful authentication, the client then sends an `HTTP 'CONNECT'` request
    to connect to the OpenVPN server. From here on, the OpenVPN connection is set
    up in a similar fashion to a regular TCP-based setup.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的食谱类似，OpenVPN 客户端首先连接到 HTTP 代理主机。它尝试使用基本身份验证通过代理密码文件 `/etc/openvpn/cookbook/proxypass`
    中提供的用户名和密码进行身份验证。验证成功后，客户端随后发送 `HTTP 'CONNECT'` 请求以连接到 OpenVPN 服务器。从这里开始，OpenVPN
    连接的设置与常规的基于 TCP 的设置类似。
- en: There's more...
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: OpenVPN supports multiple authentication mechanisms when connecting to an HTTP
    proxy.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVPN 支持在连接 HTTP 代理时使用多种身份验证机制。
- en: NTLM proxy authorization
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NTLM 代理授权
- en: OpenVPN also supports HTTP proxies that use NTLM proxy authorization, where
    **NTLM** stands for **NT Lan Manager**. Typically, this type of proxy is used
    in a Microsoft Windows environment. Unfortunately, OpenVPN's implementation of
    NTLM authorization is rather limited. It does not send out proper NTLMSSP messages
    and it works only with a very limited set of proxies. To enable support for this
    type of proxy add `http-proxy proxyhost proxyport stdin ntlm` or `http-proxy proxyhost
    proxyport stdin ntlm2`, where `stdin` instructs OpenVPN to query the username
    and password on the command prompt.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVPN 还支持使用 NTLM 代理授权的 HTTP 代理，其中**NTLM**代表**NT Lan Manager**。通常，这种类型的代理在
    Microsoft Windows 环境中使用。不幸的是，OpenVPN 对 NTLM 授权的实现相当有限。它没有发送正确的 NTLMSSP 消息，并且仅适用于非常有限的代理集。为了启用对这种类型代理的支持，可以添加
    `http-proxy proxyhost proxyport stdin ntlm` 或 `http-proxy proxyhost proxyport
    stdin ntlm2`，其中 `stdin` 指示 OpenVPN 在命令提示符下查询用户名和密码。
- en: Authentication methods
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 身份验证方法
- en: OpenVPN also supports HTTP `digest` authentication, which is more secure than
    the plain-text authentication outlined in this recipe. You can also use the option `auto-nct` with
    the `http-proxy` authentication directive to reject weak proxy authentication
    methods.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVPN 还支持 HTTP `digest` 身份验证，这比本方法中描述的明文身份验证更安全。您还可以在 `http-proxy` 身份验证指令中使用选项
    `auto-nct` 来拒绝弱代理身份验证方法。
- en: OpenVPN GUI limitations
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OpenVPN GUI 限制
- en: The current OpenVPN GUI does not allow you to specify a username or password
    in the GUI. This was supported in older versions of the Windows OpenVPN GUI application.
    As this feature is not widely used it was removed during the rewrite of the GUI.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的 OpenVPN GUI 不允许您在 GUI 中指定用户名或密码。此功能在早期版本的 Windows OpenVPN GUI 应用程序中受支持。由于此功能使用不广泛，因此在重写
    GUI 时被移除。
- en: See also
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The previous recipe in this chapter, where a connection is established using
    an HTTP proxy without extra authentication
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章前面的方法，通过不需要额外身份验证的 HTTP 代理建立连接
- en: IP-less setups - ifconfig-noexec
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无 IP 设置 - ifconfig-noexec
- en: The goal of this recipe is to create an OpenVPN tunnel without assigning IP
    addresses to the endpoints of the tunnel. In a routed network setup, this ensures
    that the tunnel endpoints can never be reached through themselves, which adds
    some security and can also make the routing tables a bit shorter. In the OpenVPN
    configuration files, an IP address needs to be specified, but it is never assigned
    to the tunnel interface.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 本方法的目标是创建一个 OpenVPN 隧道，而不为隧道的端点分配 IP 地址。在路由网络设置中，这确保隧道端点无法通过自身访问，从而增强了一定的安全性，并且可以使路由表稍微简短一些。在
    OpenVPN 配置文件中，需要指定 IP 地址，但永远不会将其分配给隧道接口。
- en: This recipe has only been tested on Linux systems, as it requires some network-interface
    configuration that is not available on other platforms.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅在 Linux 系统上进行过测试，因为它需要一些在其他平台上不可用的网络接口配置。
- en: Getting ready
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will use the following network layout:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下网络布局：
- en: '![Getting ready](img/image00445.jpeg)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/image00445.jpeg)'
- en: Make sure that the client and server are not on the same local network. If the
    client and server can contact each other directly then this recipe will fail.
    Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. In this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.12\. The client was running Fedora 22 Linux and OpenVPN 2.3.11\.
    Keep the server config file, `example3-1-server.conf`, from the *Simple configuration
    - non-bridged* recipe from [Chapter 3](part0038.xhtml#aid-147LC1 "Chapter 3. Client-server
    Ethernet-style Networks"), *Client-server Ethernet-style Networks*.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 确保客户端和服务器不在同一局域网内。如果客户端和服务器可以直接相互通信，则此方法将失败。使用 [第 2 章](part0025.xhtml#aid-NQU21
    "第 2 章 客户端-服务器仅 IP 网络") 中的第一个方法设置客户端和服务器证书，*客户端-服务器仅 IP 网络*。在此方法中，服务器计算机运行 CentOS
    6 Linux 和 OpenVPN 2.3.12，客户端运行 Fedora 22 Linux 和 OpenVPN 2.3.11。保持 `example3-1-server.conf`
    配置文件，来自 [第 3 章](part0038.xhtml#aid-147LC1 "第 3 章 客户端-服务器以太网风格网络")，*客户端-服务器以太网风格网络*
    的 *简单配置 - 非桥接* 方法。
- en: How to do it...
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the server configuration file by adding a line to the `example3-1-server.conf`
    file:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过向 `example3-1-server.conf` 文件添加一行来创建服务器配置文件：
- en: '[PRE33]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Save it as `example10-8-server.conf`.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其保存为 `example10-8-server.conf`。
- en: 'Start the server:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE34]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create the client configuration file:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建客户端配置文件：
- en: '[PRE35]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Save it as `example-10-8-client.conf`.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其保存为 `example-10-8-client.conf`。
- en: 'Next, create the `example10-8-up.sh` script:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建 `example10-8-up.sh` 脚本：
- en: '[PRE36]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Save it as `/etc/openvpn/cookbook/example10-8-up.sh`.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其保存为`/etc/openvpn/cookbook/example10-8-up.sh`。
- en: 'Similarly, create the `example10-8-route-up.sh` script:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，创建`example10-8-route-up.sh`脚本：
- en: '[PRE37]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Save it as `/etc/openvpn/cookbook/example10-8-route-up.sh`.
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其保存为`/etc/openvpn/cookbook/example10-8-route-up.sh`。
- en: 'Make sure both scripts are executable and both of them start the client:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保两个脚本都具有可执行权限，并且它们都启动客户端：
- en: '[PRE38]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'After the client successfully connects to the OpenVPN server, check the `tap0`
    interface and the routing tables, and verify that you can ping the server:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端成功连接到OpenVPN服务器后，检查`tap0`接口和路由表，验证是否可以ping通服务器：
- en: '[PRE39]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: How it works...
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它的工作原理...
- en: The OpenVPN server allocates an IP address for the client, but that does not
    mean that the client interface actually needs to assign these addresses. The `example10-8-up.sh`
    script does exactly this.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVPN服务器为客户端分配了一个IP地址，但这并不意味着客户端接口实际需要分配这些地址。`example10-8-up.sh`脚本正是实现这一功能。
- en: Some older Linux kernels refuse to add a route without an address being assigned
    to an interface. Hence, we assign the address `0.0.0.0` to the `tun0` interface.
    To add the routes that are pushed by the server, a special `route-up` script is
    used, `example10-8-route-up.sh`, which brings up all the routes.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 一些较旧的Linux内核拒绝在没有为接口分配地址的情况下添加路由。因此，我们将地址`0.0.0.0`分配给`tun0`接口。为了添加由服务器推送的路由，使用了一个特殊的`route-up`脚本，`example10-8-route-up.sh`，该脚本会启用所有路由。
- en: There's more...
  id: totrans-307
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Please note the following when considering an IP-less setup.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑无IP设置时，请注意以下几点。
- en: Point-to-point and TUN-style networks
  id: totrans-309
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 点对点和TUN风格的网络
- en: This recipe can also be used in a point-to-point style environment, where static
    keys are used to connect two networks. Similarly, it can also be used in a TUN-style
    setup.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法也可以在点对点风格的环境中使用，在这种环境下使用静态密钥连接两个网络。同样，它也可以在TUN风格的设置中使用。
- en: Routing and firewalling
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 路由和防火墙设置
- en: 'At first, this recipe might seem odd. The advantage of this setup is that the
    OpenVPN client itself is not reachable by other machines on the VPN. This is handy
    when connecting many clients to an OpenVPN server, but some clients are used as
    gateways to the networks behind them (for example, to connect a remote office
    to the OpenVPN server). By not assigning the remote office gateway an IP address,
    there is no risk of the gateway itself being attacked from the remote VPN side.
    Also, server-side firewalling and `iptables` rules can be slightly shorter in
    this scenario, as there will be no traffic coming from the OpenVPN client with
    the VPN source address. This is also the reason why the server configuration has
    an explicit route to the client-side network:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，这个方法可能看起来有些奇怪。这种设置的好处是，OpenVPN客户端本身无法被VPN中的其他机器访问。这在将多个客户端连接到OpenVPN服务器时非常有用，但有些客户端作为网关连接到它们后面的网络（例如，用于将远程办公室连接到OpenVPN服务器）。通过不为远程办公室网关分配IP地址，就没有风险让网关本身从远程VPN一侧受到攻击。此外，在这种情况下，服务器端的防火墙和`iptables`规则可以稍微简短一些，因为来自OpenVPN客户端的流量不会带有VPN源地址。这也是为什么服务器配置中明确包含了到客户端网络的路由的原因：
- en: '[PRE40]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: It also explains why this recipe will fail if the VPN client and server are
    on the same local area network. If the VPN client can contact the VPN server directly
    then the VPN server will not be able to determine which traffic needs to go inside
    the tunnel and which traffic needs to be sent directly to the client.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 这也解释了为什么当VPN客户端和服务器位于同一个局域网时，这个方法会失败。如果VPN客户端能够直接联系VPN服务器，那么VPN服务器将无法判断哪些流量需要进入隧道，哪些流量需要直接发送到客户端。
- en: Port sharing with an HTTPS server
  id: totrans-315
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与HTTPS服务器的端口共享
- en: A common OpenVPN setup to allow road warriors to reach the home office is to
    have OpenVPN listen on the secure web server (HTTPS) port  `443`. The downside
    is that you can no longer use that port on the OpenVPN server to actually host
    a secure website. OpenVPN 2.1 introduces a new `port-sharing` directive, enabling
    dual use of a TCP port. All traffic that is detected as OpenVPN traffic is processed
    by the OpenVPN server itself, and all other traffic is forwarded to another (local)
    machine and/or port.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 一种常见的OpenVPN设置方式是让OpenVPN监听安全的Web服务器（HTTPS）端口`443`，以便让远程用户访问公司内部网络。缺点是，你将无法在OpenVPN服务器上使用该端口来托管安全的网站。OpenVPN
    2.1引入了一个新的`port-sharing`指令，使得TCP端口可以实现双重使用。所有被识别为OpenVPN流量的请求将由OpenVPN服务器自身处理，而所有其他流量将被转发到另一台（本地）机器和/或端口。
- en: In this recipe, we will set up an OpenVPN server to share TCP port `443` with
    a web server and we will show that both OpenVPN and a web browser can successfully
    connect to this server.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将设置一个 OpenVPN 服务器，将 TCP 端口 `443` 与 web 服务器共享，并展示 OpenVPN 和 web 浏览器都能成功连接到该服务器。
- en: Getting ready
  id: totrans-318
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备开始
- en: 'We will use the following network layout:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下网络布局：
- en: '![Getting ready](img/image00446.jpeg)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
  zh: '![准备开始](img/image00446.jpeg)'
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.12\. The client was running Windows 7 64 bit and OpenVPN 2.3.10\.
    Keep the server configuration file, `example8-9-server.conf`, from the *Tuning
    TCP-based connections* recipe from [Chapter 8](part0092.xhtml#aid-2NNJO1 "Chapter 8. Performance
    Tuning"), *Performance Tuning* at hand, as well as the client configuration file, `example8-9.ovpn`,
    from the same recipe.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [第 2 章](part0025.xhtml#aid-NQU21 "第 2 章。 客户端-服务器 IP 专用网络") 中的第一个教程设置客户端和服务器证书，*客户端-服务器
    IP 专用网络*。在本教程中，服务器计算机运行的是 CentOS 6 Linux 和 OpenVPN 2.3.12，客户端运行的是 Windows 7 64
    位和 OpenVPN 2.3.10。请保留来自 [第 8 章](part0092.xhtml#aid-2NNJO1 "第 8 章。性能调优")，*性能调优*
    中的服务器配置文件 `example8-9-server.conf`，以及来自相同教程的客户端配置文件 `example8-9.ovpn`。
- en: On the server computer, a secure web server was running on port `8443`.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器计算机上，一个安全的 web 服务器正在 `8443` 端口运行。
- en: How to do it...
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the server configuration file by modifying the `example8-9-server.conf`
    file. Change the following line:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过修改 `example8-9-server.conf` 文件来创建服务器配置文件。修改以下行：
- en: '[PRE41]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Change it to the following:'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其更改为以下内容：
- en: '[PRE42]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Save it as `example10-9-server.conf`.
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其保存为 `example10-9-server.conf`。
- en: 'Start the server:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE43]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Next, modify the client configuration file, `example8-9.ovpn`, by also changing
    the port to `443`. Save the client configuration file as `example10-9.ovpn`.
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改客户端配置文件 `example8-9.ovpn`，同样将端口更改为 `443`。将客户端配置文件保存为 `example10-9.ovpn`。
- en: Start the client and verify that the client can connect to the VPN server.
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动客户端并验证客户端是否能连接到 VPN 服务器。
- en: 'After the client has connected, start a web browser and browse to:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端连接后，启动 web 浏览器并浏览到：
- en: '[PRE44]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The OpenVPN server log file will show lines similar to the following:'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: OpenVPN 服务器日志文件将显示如下类似的行：
- en: '[PRE45]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: How it works...
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When `port-share` is used, OpenVPN will inspect the incoming traffic on port `443`.
    If this traffic is a part of an OpenVPN session or if it is an initial OpenVPN
    handshake, then the OpenVPN server processes it by itself. If it is not recognizable
    as OpenVPN traffic, it is forwarded out to the host and port specified in the `port-share`
    directive.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `port-share` 时，OpenVPN 会检查 `443` 端口上的传入流量。如果该流量是 OpenVPN 会话的一部分或是 OpenVPN
    的初始握手，则 OpenVPN 服务器会自行处理。如果无法识别为 OpenVPN 流量，则会被转发到 `port-share` 指令中指定的主机和端口。
- en: Hence, it is the OpenVPN server process that is always listening on port `443`.
    The web server must be listening on a different host, interface, or port. With
    this setup, the same port can be used to offer two different services.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，始终监听 `443` 端口的始终是 OpenVPN 服务器进程。web 服务器必须监听不同的主机、接口或端口。通过这种设置，可以使用相同的端口提供两种不同的服务。
- en: There's more...
  id: totrans-340
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: 'The web server that OpenVPN forwards its traffic to must be a secure (HTTPS)
    web server. This is due to the nature of the inbound SSL traffic on the OpenVPN
    server itself. It is not possible to forward the traffic to a regular (HTTP) web
    server. If the traffic is forwarded to port `80`, the Apache web server used in
    this recipe, the following error will appear in the web server error log file:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVPN 转发其流量的 web 服务器必须是一个安全的（HTTPS）web 服务器。这是因为 OpenVPN 服务器本身的入站 SSL 流量的性质。无法将流量转发到常规的（HTTP）web
    服务器。如果流量被转发到 `80` 端口，使用本教程中的 Apache web 服务器时，web 服务器的错误日志文件中将出现以下错误：
- en: '[PRE46]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Alternatives
  id: totrans-343
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 替代方案
- en: There are many alternatives available that can achieve the same functionality.
    One example tool that can distinguish between OpenVPN, SSL (HTTPS), and SSH traffic
    is the Linux-based `sslh` tool.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多可用的替代方案可以实现相同的功能。一个示例工具是基于 Linux 的 `sslh` 工具，它可以区分 OpenVPN、SSL（HTTPS）和 SSH
    流量。
- en: Routing features - redirect-private, allow-pull-fqdn
  id: totrans-345
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由功能 - redirect-private, allow-pull-fqdn
- en: 'Over the years, the routing features of OpenVPN have expanded. Most notably,
    there are quite a few options for the `redirect-gateway` directive, as well as
    several other less well-known routing directives:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，OpenVPN 的路由功能不断扩展。最显著的变化是，`redirect-gateway` 指令有了许多选项，以及一些其他较不为人知的路由指令：
- en: '`redirect-private`: This option behaves very similar to the `redirect-gateway`
    directive, especially when the new parameters are used, but it does not alter
    the default gateway.'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`redirect-private`：此选项的行为与 `redirect-gateway` 指令非常相似，特别是在使用新参数时，但它不会更改默认网关。'
- en: '`allow-pull-fqdn`: This allows the client to pull DNS names from the OpenVPN
    server. Previously, only IP addresses could be pushed or pulled. This option cannot
    be pushed and needs to be added to the client configuration itself.'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allow-pull-fqdn`：此选项允许客户端从 OpenVPN 服务器拉取 DNS 名称。之前只能推送或拉取 IP 地址。此选项不能被推送，需要添加到客户端配置文件中。'
- en: '`route-nopull`: All the options are pulled by a client from the server, except
    for the routing options. This can be particularly handy when troubleshooting an
    OpenVPN setup.'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`route-nopull`：所有选项都会从服务器拉取到客户端，除了路由选项。当排查 OpenVPN 配置问题时，这个选项尤其有用。'
- en: '`max-routes n`: This defines the maximum number of routes that may be defined
    or pulled from a remote server.'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max-routes n`：定义可从远程服务器定义或拉取的最大路由数。'
- en: In this recipe, we will focus on the `redirect-private` directive and its parameters,
    as well as the `allow-pull-fqdn` parameter.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将重点关注 `redirect-private` 指令及其参数，以及 `allow-pull-fqdn` 参数。
- en: Getting ready
  id: totrans-352
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We will use the following network layout:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下网络布局：
- en: '![Getting ready](img/image00447.jpeg)'
  id: totrans-354
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00447.jpeg)'
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.12\. The client was running Windows 7 64 bit and OpenVPN 2.3.11\.
    Keep the configuration file, `basic-udp-server.conf`, from the *Server-Side routing*
    recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only
    Networks"), *Client-server IP-only Networks*, as well as the client configuration
    file, `basic-udp-client.ovpn`, from the *Using an ifconfig-pool block* recipe
    from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[第2章](part0025.xhtml#aid-NQU21 "第2章。客户端-服务器IP仅网络")中第一个示例配置客户端和服务器证书，*客户端-服务器IP仅网络*。对于此示例，服务器计算机运行
    CentOS 6 Linux 和 OpenVPN 2.3.12，客户端运行 Windows 7 64 位和 OpenVPN 2.3.11。保留来自*服务器端路由*示例的配置文件
    `basic-udp-server.conf`，该示例来自[第2章](part0025.xhtml#aid-NQU21 "第2章。客户端-服务器IP仅网络")，*客户端-服务器IP仅网络*，以及来自[第2章](part0025.xhtml#aid-NQU21
    "第2章。客户端-服务器IP仅网络")中*使用 ifconfig-pool 块*示例的客户端配置文件 `basic-udp-client.ovpn`，*客户端-服务器IP仅网络*。
- en: How to do it...
  id: totrans-356
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Append the following lines to the `basic-udp-server.conf` file:'
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行添加到 `basic-udp-server.conf` 文件中：
- en: '[PRE47]'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Save it as `example10-10-server.conf`.
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其保存为`example10-10-server.conf`。
- en: 'Start the server:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE48]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Append the following line to the client configuration file, `basic-udp-client.ovpn`,
    and save it as `example10-10.ovpn`:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行添加到客户端配置文件 `basic-udp-client.ovpn` 中，并将其保存为 `example10-10.ovpn`：
- en: '[PRE49]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Start the client:![How to do it...](img/image00448.jpeg)
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动客户端：![如何操作...](img/image00448.jpeg)
- en: Watch the routing table after the connection has been established.
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在建立连接后查看路由表。
- en: If the DHCP or DNS server was on a different subnet than the client itself,
    then a new route will have been added. This is to ensure that DHCP requests still
    go to the local DHCP server and are not sent over the VPN tunnel.
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 DHCP 或 DNS 服务器与客户端位于不同的子网中，则会添加新的路由。这是为了确保 DHCP 请求仍然发送到本地 DHCP 服务器，而不是通过
    VPN 隧道发送。
- en: A route for the host `server.example.com` will have been added.
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将为主机 `server.example.com` 添加一个路由。
- en: How it works...
  id: totrans-368
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `bypass-dhcp` and `bypass-dns` options for the directives, `redirect-gateway`
    and `redirect-private`, cause the OpenVPN client to add an extra route to the
    DHCP and DNS servers if they are on a different network. In large-scale networks,
    the DNS server is often not found on the local subnet that the client is connected
    to. If the route to this DNS server is altered to go through the VPN tunnel after
    the client has connected, this will cause at the very least a serious performance
    penalty. More likely, the entire DNS server will become unreachable.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '`bypass-dhcp` 和 `bypass-dns` 指令的选项会导致 OpenVPN 客户端在 DHCP 和 DNS 服务器位于不同网络时，额外添加一条路由。如果
    DNS 服务器不在客户端连接的本地子网中，尤其是在大型网络中，这会非常有用。如果连接后改变到该 DNS 服务器的路由，使其通过 VPN 隧道，则至少会导致严重的性能损失。更有可能的是，整个
    DNS 服务器将变得无法访问。'
- en: The `allow-pull-fqdn` directive enables the use of a DNS name instead of an
    IP address when specifying a route. Especially, if a dedicated route to a host
    with a dynamic IP address needs to be made, this is very useful.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '`allow-pull-fqdn` 指令允许在指定路由时使用 DNS 名称而不是 IP 地址。特别是在需要为具有动态 IP 地址的主机专门设置路由时，这非常有用。'
- en: Note that the `allow-pull-fqdn` directive cannot be pushed from the server.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`allow-pull-fqdn` 指令不能从服务器推送。
- en: There's more...
  id: totrans-372
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Apart from the directives explained in this recipe, there are more routing directives
    available to control if and how routes are added to the client.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 除了本节解释的指令，还有更多的路由指令可用于控制是否以及如何将路由添加到客户端。
- en: The route-nopull directive
  id: totrans-374
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: route-nopull 指令
- en: The `route-nopull` directive causes the client to pull all the information from
    the server but not the routes. This can be very useful for debugging a faulty
    server setup. It does not mean that no routes are added at all by the OpenVPN
    client. Only the routes that are specified using `push "route"` will be ignored.
    Starting with OpenVPN 2.4, it is also possible to filter out options that are
    pushed from the server to the client. The next recipe will go into detail on this.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '`route-nopull` 指令使客户端从服务器拉取所有信息，但不拉取路由信息。这在调试服务器配置错误时非常有用。这并不意味着 OpenVPN 客户端完全不添加任何路由。只有使用
    `push "route"` 指定的路由会被忽略。从 OpenVPN 2.4 开始，还可以过滤掉从服务器推送到客户端的选项。下一节将详细介绍这个内容。'
- en: The max-routes directive
  id: totrans-376
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: max-routes 指令
- en: The `max-routes` directive is introduced in OpenVPN 2.1, as version 2.1 allows
    an administrator to push many more routes when compared to OpenVPN 2.0\. To prevent
    a client from being overloaded with routes, the option `max-routes n` is added,
    where `n` is the maximum number of routes that can be defined in the client configuration
    file and/or can pulled from the server.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '`max-routes` 指令在 OpenVPN 2.1 中引入，因为与 OpenVPN 2.0 相比，2.1 版本允许管理员推送更多的路由。为了防止客户端因路由过多而过载，增加了
    `max-routes n` 选项，其中 `n` 是客户端配置文件中可以定义的最大路由数，或者从服务器拉取的最大路由数。'
- en: The default value for this parameter is `100`.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 这个参数的默认值是 `100`。
- en: See also
  id: totrans-379
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The next recipe in this chapter, where options that are pushed from the server
    to the client are filtered before they are applied
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的下一节将讨论如何在应用之前过滤从服务器推送到客户端的选项。
- en: Filtering out pushed options
  id: totrans-381
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤掉推送的选项
- en: Starting with OpenVPN 2.4, it is now possible to filter out options pushed from
    the OpenVPN server to the client. This allows users to have more control over
    the network routes and addresses that are pushed from the server.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 从 OpenVPN 2.4 开始，现在可以过滤从 OpenVPN 服务器推送到客户端的选项。这使得用户能够更加控制从服务器推送的网络路由和地址。
- en: This recipe will show how this new feature of OpenVPN works.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将展示 OpenVPN 新功能是如何工作的。
- en: Getting ready
  id: totrans-384
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We will use the following network layout:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下网络布局：
- en: '![Getting ready](img/image00449.jpeg)'
  id: totrans-386
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00449.jpeg)'
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.12\. The client was running Windows 7 64 bit and OpenVPN 2.4_alpha2\.
    For the server, keep the configuration file, `example9-2-server.conf`, from the *Linux
    - using pull-resolv-conf* recipe, from [Chapter 9](part0103.xhtml#aid-3279U1 "Chapter 9. OS
    Integration"), *OS Integration* at hand. For the client, keep the configuration
    file, `basic-udp-client.ovpn`, from the *Using an ifconfig-pool block* recipe
    from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[第2章](part0025.xhtml#aid-NQU21 "第2章。客户端-服务器IP-only网络")中的第一个配方设置客户端和服务器证书，*客户端-服务器IP-only网络*。对于此配方，服务器计算机运行的是CentOS
    6 Linux和OpenVPN 2.3.12，客户端运行的是Windows 7 64位和OpenVPN 2.4_alpha2。对于服务器，保留配置文件`example9-2-server.conf`，该文件来自*Linux
    - 使用pull-resolv-conf*配方，位于[第9章](part0103.xhtml#aid-3279U1 "第9章。操作系统集成")，*操作系统集成*，并保持在手边。对于客户端，保留配置文件`basic-udp-client.ovpn`，该文件来自[第2章](part0025.xhtml#aid-NQU21
    "第2章。客户端-服务器IP-only网络")中的*使用ifconfig-pool块*配方，*客户端-服务器IP-only网络*。
- en: How to do it...
  id: totrans-388
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Start the server:'
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE50]'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Append the following line to the client configuration file, `basic-udp-client.ovpn`,
    and save it as `example10-11.ovpn`:'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行附加到客户端配置文件`basic-udp-client.ovpn`中，并将其保存为`example10-11.ovpn`：
- en: '[PRE51]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Start the client:![How to do it...](img/image00450.jpeg)
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动客户端：![如何操作...](img/image00450.jpeg)
- en: 'View the client log file by selecting `View Log` in the OpenVPN GUI. The log
    file will contain lines similar to the following:'
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在OpenVPN GUI中选择`查看日志`，查看客户端日志文件。日志文件将包含类似以下内容的行：
- en: '[PRE52]'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Verify that the DNS settings on the client have not been altered using a tool
    such as `ipconfig /all`.
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ipconfig /all`等工具验证客户端的DNS设置未被更改。
- en: How it works...
  id: totrans-397
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'The `pull-filter` directive accepts several parameters:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '`pull-filter`指令接受多个参数：'
- en: '`accept t`: Accepts the pushed option `t` from the server'
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accept t`：接受来自服务器的推送选项`t`'
- en: '`ignore t`: Ignores the pushed option `t` from the server, but doesn''t abort
    the connection'
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ignore t`：忽略来自服务器的推送选项`t`，但不终止连接'
- en: '`reject t`: Rejects the pushed option `t` from the server and abort the VPN
    connection'
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reject t`：拒绝来自服务器的推送选项`t`并终止VPN连接'
- en: Each option can be specified multiple times, with the last occurrence overriding
    earlier lines.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 每个选项可以多次指定，最后一次出现的选项会覆盖之前的行。
- en: By adding the line `pull-filter ignore "dhcp-option DNS"` to the client configuration
    file, we ignore any pushed line that starts with `dhcp-option DNS`. Therefore,
    no DNS settings are accepted from the VPN server. This option can be applied to
    all options that are pushed from the server.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在客户端配置文件中添加`pull-filter ignore "dhcp-option DNS"`行，我们可以忽略任何以`dhcp-option DNS`开头的推送行。因此，VPN服务器不会接受任何DNS设置。此选项可以应用于所有从服务器推送的选项。
- en: Handing out the public IPs
  id: totrans-404
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分配公共IP
- en: With the `topology subnet` feature that OpenVPN offers, it becomes feasible
    to hand out public IP addresses to connecting clients. For this recipe, we will
    show how such a setup can be realized. We will re-use a technique from the *Proxy-ARP*
    recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only
    Networks"), *Client-server IP-only Networks*, to make the VPN clients appear as
    if they are a part of the remote network. If a dedicated IP address block is available
    for the VPN clients, then this is not required. The advantage of using the `proxy-arp`
    method is that it allows us to use only part of an expensive public IP address
    block.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OpenVPN提供的`topology subnet`功能，可以将公共IP地址分配给连接的客户端。对于此配方，我们将展示如何实现这样的设置。我们将重用来自[第2章](part0025.xhtml#aid-NQU21
    "第2章。客户端-服务器IP-only网络")中的*Proxy-ARP*配方，*客户端-服务器IP-only网络*中的技术，使VPN客户端看起来就像是远程网络的一部分。如果VPN客户端有专用的IP地址块，则不需要此步骤。使用`proxy-arp`方法的优势在于，它允许我们只使用昂贵的公共IP地址块的一部分。
- en: Getting ready
  id: totrans-406
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, the server computer was running CentOS 6 Linux and OpenVPN
    2.3.12\. The client computer was running Windows 7 64 bit and OpenVPN 2.3.11\.
    Keep the client configuration file, `basic-udp-client.ovpn`, from the *Using an
    ifconfig-pool block* recipe from Chapter 2, *Client-Server IP-Only Networks*.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此配方，服务器计算机运行的是CentOS 6 Linux和OpenVPN 2.3.12，客户端计算机运行的是Windows 7 64位和OpenVPN
    2.3.11。保留客户端配置文件`basic-udp-client.ovpn`，该文件来自第2章中的*使用ifconfig-pool块*配方，*客户端-服务器IP-only网络*。
- en: 'To test this recipe, a public IP address block of 16 addresses was used, but
    here, we will list a private address block instead (`10.0.0.0/255.255.255.240`).
    This block is used as follows:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试此配方，使用了一个16个地址的公共IP地址块，但在这里，我们将列出一个私有地址块（`10.0.0.0/255.255.255.240`）。该地址块的使用如下：
- en: '`10.0.0.18`: This is used for the server''s VPN IP address'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`10.0.0.18`：这是服务器的VPN IP地址'
- en: '`10.0.0.19`: Not available'
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`10.0.0.19`：不可用'
- en: '`10.0.0.20` -`10.0.0.25`: Available for VPN clients'
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`10.0.0.20` - `10.0.0.25`：可供VPN客户端使用'
- en: '`10.0.0.26`: Not available'
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`10.0.0.26`：不可用'
- en: '`10.0.0.27`: The LAN address of the OpenVPN server itself'
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`10.0.0.27`：OpenVPN服务器本身的局域网地址'
- en: '`10.0.0.28` -`10.0.0.29`: Not available'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`10.0.0.28` - `10.0.0.29`：不可用'
- en: '`10.0.0.30`: The router on the remote LAN'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`10.0.0.30`：远程LAN上的路由器'
- en: How to do it...
  id: totrans-416
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the server configuration file:'
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建服务器配置文件：
- en: '[PRE53]'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Note that this server configuration cannot be run as user `nobody`. Save the
    configuration file as `example10-12-server.conf`.
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，此服务器配置不能以用户`nobody`身份运行。将配置文件保存为`example10-12-server.conf`。
- en: 'Next, create the `proxyarp-connect.sh` script:'
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建`proxyarp-connect.sh`脚本：
- en: '[PRE54]'
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Save it as `/etc/openvpn/cookbook/proxyarp-connect.sh`.
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其保存为`/etc/openvpn/cookbook/proxyarp-connect.sh`。
- en: 'Similarly, create the `proxyarp-disconnect.sh` script:'
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，创建`proxyarp-disconnect.sh`脚本：
- en: '[PRE55]'
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Save it as `/etc/openvpn/cookbook/proxyarp-disconnect.sh`.
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其保存为`/etc/openvpn/cookbook/proxyarp-disconnect.sh`。
- en: 'Make sure that both the scripts are executable, then start the server:'
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保两个脚本都是可执行的，然后启动服务器：
- en: '[PRE56]'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Next, start the client. The IP address assigned to the client should be `10.0.0.20`.
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，启动客户端。分配给客户端的IP地址应为`10.0.0.20`。
- en: Use the client to browse the Internet and check its IP address by surfing, for
    example, to [http://www.whatismyip.com](http://www.whatismyip.com).
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用客户端浏览互联网，并通过访问例如[http://www.whatismyip.com](http://www.whatismyip.com)来检查其IP地址。
- en: How it works...
  id: totrans-430
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Some notes on the server configuration file, the directives:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 关于服务器配置文件的一些说明，指令：
- en: '[PRE57]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Set up a pool of (public) IP address for the clients to use. Because not all
    of these addresses are available in the `/28` block, we cannot simply use:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 为客户端设置一个（公共）IP地址池供其使用。由于并非所有这些地址都可以在`/28`块中使用，我们不能简单地使用：
- en: '[PRE58]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The next statement is to ensure that the VPN server itself is reached via the
    regular network and not via the VPN tunnel itself:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个语句是确保VPN服务器本身是通过常规网络而不是通过VPN隧道本身访问的：
- en: '[PRE59]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'In order to redirect all traffic via the VPN tunnel, we need to explicitly
    state the new default gateway and `redirect-gateway`:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 为了通过VPN隧道重定向所有流量，我们需要明确声明新的默认网关和`redirect-gateway`：
- en: '[PRE60]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Normally, the following statement will also cause the topology setting to be
    pushed to the VPN clients:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，以下语句还会将拓扑设置推送到VPN客户端：
- en: '[PRE61]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: But, as we're not using the `server` directive, this does not happen automatically.
    By explicitly pushing the topology, we ensure that the clients will also use the
    correct settings.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，由于我们没有使用`server`指令，因此这一过程不会自动发生。通过明确推送拓扑，我们确保客户端也使用正确的设置。
- en: The  `client-connect` and `client-disconnect` scripts are very similar to the
    ones used in the *Proxy-ARP* recipe from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*.
    By using a handy feature of the Linux `arp` command, we can make the remote clients
    appear to be part of the local network.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '`client-connect`和`client-disconnect`脚本与[第2章](part0025.xhtml#aid-NQU21 "第2章
    客户端-服务器IP仅网络")中的*Proxy-ARP*配方非常相似，*客户端-服务器IP仅网络*。通过使用Linux `arp`命令的一个便捷功能，我们可以让远程客户端看起来像是本地网络的一部分。'
- en: There's more...
  id: totrans-443
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `topology subnet` feature was introduced in OpenVPN 2.1 and is essential
    to making this recipe practical. Without this feature, each client would be handed
    out a miniature `/30` network, which means that each client would use up to four
    public IP addresses. This made the deployment of handing out public IP addresses
    to VPN clients very expensive.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '`topology subnet`功能是在OpenVPN 2.1中引入的，对于使此配方实用至关重要。没有这个功能，每个客户端将被分配一个微型`/30`网络，这意味着每个客户端将使用最多四个公共IP地址。这使得将公共IP地址分配给VPN客户端的部署成本非常高。'
- en: See also
  id: totrans-445
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Proxy-ARP* recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2. 
    Client-server IP-only Networks"), *Client-server IP-only Networks*, which explains
    in more detail how the Linux/UNIX Proxy-ARP feature works
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[第2章](part0025.xhtml#aid-NQU21 "第2章 客户端-服务器IP仅网络")的*Proxy-ARP*配方，*客户端-服务器IP仅网络*，它更详细地解释了Linux/UNIX
    Proxy-ARP功能的工作原理
