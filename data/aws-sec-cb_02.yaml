- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Access Management with IAM Policies and Roles
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 IAM 策略和角色进行访问管理
- en: Secure access management is crucial for effectively managing who can access
    our AWS resources and what actions they can perform. This knowledge ensures that
    our AWS environment remains secure and compliant by allowing us to precisely control
    permissions and minimize the risk of unauthorized access. It empowers us to implement
    a robust security posture that safeguards our data and resources, while also enabling
    a scalable and efficient way to manage access for users and services across our
    AWS infrastructure. In this chapter, we will learn about secure access management
    within the AWS cloud using **IAM policies** and **IAM roles** .
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 安全访问管理对有效管理谁可以访问我们的 AWS 资源以及他们可以执行哪些操作至关重要。这些知识确保我们的 AWS 环境保持安全且合规，允许我们精确控制权限，并最小化未经授权访问的风险。它使我们能够实施强大的安全防御体系，保护我们的数据和资源，同时还为我们提供了一种可扩展和高效的方式，来管理用户和服务在
    AWS 基础设施中的访问权限。在本章中，我们将学习如何使用 **IAM 策略** 和 **IAM 角色** 来进行 AWS 云中的安全访问管理。
- en: AWS supports various policy types, such as **identity-based policies** , **resource-based
    policies** , **session policies** , **permissions boundaries** , **service control
    policies** ( **SCPs** ), and **access control lists** ( **ACLs** ). While we will
    learn most of these policy types with detailed recipes. ACLs are only discussed
    theoretically since ACLs are not recommended to be used anymore. We will then
    learn about IAM roles and how to use them for implementing the cross-account access
    needed to implement identity account architecture, and how to use roles for cross-service
    access to allow one AWS service to access another service securely. We will continue
    to explore IAM policies and roles in future chapters within this book.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 支持多种策略类型，例如 **基于身份的策略**、**基于资源的策略**、**会话策略**、**权限边界**、**服务控制策略** (**SCPs**)
    和 **访问控制列表** (**ACLs**)。虽然我们将通过详细的示例学习大多数策略类型，但 ACLs 仅会进行理论讨论，因为不再推荐使用 ACLs。接下来，我们将学习
    IAM 角色以及如何使用它们来实现跨账户访问，这是实施身份账户架构所必需的，并且如何使用角色进行跨服务访问，以便让一个 AWS 服务安全地访问另一个服务。我们将在本书的后续章节中继续探索
    IAM 策略和角色。
- en: 'This chapter will cover the following recipes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将覆盖以下内容：
- en: Creating a customer-managed IAM policy
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建客户管理的 IAM 策略
- en: Using policy variables within IAM policies
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 IAM 策略中使用策略变量
- en: Creating customer-managed policies in IAM Identity Center
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 IAM 身份中心创建客户管理的策略
- en: Setting IAM permission boundaries for IAM entities
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 IAM 实体设置 IAM 权限边界
- en: Centralizing governance in AWS Organizations with SCPs
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 SCPs 在 AWS Organizations 中集中治理
- en: IAM cross-account role switching and identity account architecture
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IAM 跨账户角色切换和身份账户架构
- en: Cross-service access via IAM roles on EC2 instances
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 EC2 实例上的 IAM 角色实现跨服务访问
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Before diving into the recipes of this chapter, we need to ensure we have the
    following requirements in place:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入本章的内容之前，我们需要确保以下要求已满足：
- en: We need an active AWS account to complete most of the recipes within this chapter.
    We can use an account that is part of an AWS organization or a standalone account
    for most of the recipes within this chapter. I will be using the **awsseccb-sandbox-1**
    AWS organization **member account** that we created in the *Multi-account management
    with AWS Organizations* recipe from [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020)
    . However, unless specified otherwise, I won’t be utilizing AWS Organizations
    features, meaning you can follow these steps with a standalone account, too. Note
    that certain recipes may have different AWS account requirements, which will be
    specified in those recipes.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要一个有效的 AWS 账户来完成本章中的大部分示例。我们可以使用一个属于 AWS 组织的账户或一个独立账户来完成大部分示例。我将使用我们在 [*第
    1 章*](B21384_01.xhtml#_idTextAnchor020) 的 *AWS Organizations 的多账户管理* 示例中创建的 **awsseccb-sandbox-1**
    AWS 组织 **成员账户**。不过，除非特别说明，否则我不会使用 AWS Organizations 的功能，这意味着你也可以使用独立账户来跟随这些步骤。请注意，某些示例可能有不同的
    AWS 账户要求，这些要求会在相关示例中说明。
- en: For administrative actions, we need a user who has **AdministratorAccess** permission
    to the AWS account we are working with. This can be an IAM Identity Center user
    or an IAM user. I will be using the **awsseccbadmin1** IAM Identity Center user
    we created in the *User management and SSO with IAM Identity Center* recipe from
    [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020) . However, unless specified otherwise,
    I won’t be utilizing any IAM Identity Center features, meaning you can follow
    these steps with an IAM user, too, if the user has the required permissions in
    the account we are working with. If you are using an IAM user, you can create
    the user following the *Setting up IAM, account aliases, and billing alerts* recipe
    from [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020) . Note that certain recipes
    may have specific user requirements, which will be specified in those recipes.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于管理操作，我们需要一个具有对我们正在使用的AWS账户的**AdministratorAccess**权限的用户。这可以是IAM Identity Center用户或IAM用户。我将使用我们在[*第1章*](B21384_01.xhtml#_idTextAnchor020)的*使用IAM
    Identity Center进行用户管理和SSO*配方中创建的**awsseccbadmin1** IAM Identity Center用户。但是，除非另有说明，我不会使用任何IAM
    Identity Center功能，这意味着如果用户在我们正在处理的账户中具有所需的权限，您也可以跟随这些步骤使用IAM用户。如果您使用IAM用户，您可以按照[*第1章*](B21384_01.xhtml#_idTextAnchor020)的*设置IAM、账户别名和账单提醒*配方创建用户。请注意，某些配方可能有特定的用户要求，这些要求将在这些配方中进行说明。
- en: 'To execute AWS **Command Line Interface** ( **CLI** ) commands on a local machine
    or a virtual machine, we need AWS CLI v2 installed. Configure the AWS CLI using
    IAM access keys for IAM users or utilize temporary credentials from the IAM Identity
    Center for IAM Identity Center users. [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020)
    details how to set up the CLI using both IAM and IAM Identity Center. Unless specified,
    we can manage users with either IAM or IAM Identity Center, though AWS recommends
    using IAM Identity Center. Additionally, **AWS CloudShell** , available through
    the AWS Console, offers a convenient way to perform most CLI commands discussed
    in this chapter. With both IAM and IAM Identity Center, we need to create a profile
    per user per account. Therefore, it is good to include the account name as part
    of the profile name. For instance, for the administrator user for the **awsseccb-sandbox-1**
    sandbox account, we can set up a CLI **Sandbox1Admin1** profile: **awsseccbadmin1**
    . For IAM Identity Center, we need to create a profile per user per account per
    permission set assignment, and hence we could include details of the assignment
    also in its name.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在本地机器或虚拟机上执行AWS**命令行界面**（**CLI**）命令，我们需要安装AWS CLI v2。使用IAM用户的IAM访问密钥配置AWS CLI，或者从IAM
    Identity Center获取IAM Identity Center用户的临时凭证。[*第1章*](B21384_01.xhtml#_idTextAnchor020)详细介绍了如何使用IAM和IAM
    Identity Center设置CLI。除非另有说明，我们可以使用IAM或IAM Identity Center管理用户，尽管AWS建议使用IAM Identity
    Center。此外，通过AWS控制台提供的**AWS CloudShell**为执行本章讨论的大多数CLI命令提供了方便的方法。使用IAM和IAM Identity
    Center时，我们需要为每个用户每个账户创建一个配置文件。因此，最好将账户名称作为配置文件名称的一部分。例如，对于**awsseccb-sandbox-1**沙箱账户的管理员用户，我们可以设置一个CLI
    **Sandbox1Admin1**配置文件：**awsseccbadmin1**。对于IAM Identity Center，我们需要为每个用户每个账户每个权限集分配创建一个配置文件，因此还可以在名称中包含分配详情。
- en: 'For certain recipes, we will need an Amazon **Simple Storage Service** ( **S3**
    ) bucket to test the policies. Hence, a basic understanding of Amazon S3 service
    is recommended. Unless otherwise specified, we can create S3 buckets with the
    following configuration: For **Bucket name** , give a unique name as every bucket
    needs to have a unique name across AWS accounts. For **Object Ownership** , select
    **ACLs disabled (recommended)** . For **Block Public Access settings for this
    bucket** , select **Block all public access** . For **Bucket Versioning** , select
    **Disable** . For **Default encryption** , select **Server-side encryption with
    Amazon S3 managed keys (SSE-S3)** . For **Object Lock under Advanced settings**
    , select **Disable** .'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于某些配方，我们需要一个亚马逊**简单存储服务**（**S3**）存储桶来测试策略。因此，建议您对亚马逊S3服务有基本的了解。除非另有说明，我们可以使用以下配置创建S3存储桶：对于**存储桶名称**，请提供一个唯一的名称，因为每个存储桶在AWS账户中都需要一个唯一的名称。对于**对象所有权**，选择**禁用ACL（推荐）**。对于**此存储桶的阻止公共访问设置**，选择**阻止所有公共访问**。对于**存储桶版本控制**，选择**禁用**。对于**默认加密**，选择**使用Amazon
    S3管理的服务端加密（SSE-S3）**。在高级设置下的**对象锁**中，选择**禁用**。
- en: The code files for this book are available at [https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition](https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition)
    . The code files for this chapter are available at [https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition/tree/main/Chapter02](https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition/tree/main/Chapter02)
    .
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的代码文件可以在[https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition](https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition)获取。本章的代码文件可以在[https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition/tree/main/Chapter02](https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition/tree/main/Chapter02)获取。
- en: Creating a customer-managed IAM policy
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建客户管理的IAM策略
- en: In this recipe, we will create a customer-managed identity-based IAM policy
    to manage access to an S3 bucket. We will give permission to list all S3 buckets
    and will further use the **Condition** policy element to restrict the permission
    based on the requester’s IP address. We will use the AWS Management Console for
    this recipe, but you may do it from the AWS CLI by making use of the provided
    JSON code following the next recipe titled *Using policy variables within IAM
    policies* from this chapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将创建一个客户管理的基于身份的IAM策略来管理对S3桶的访问。我们将授予列出所有S3桶的权限，并进一步使用**Condition**策略元素，根据请求者的IP地址限制该权限。我们将使用AWS管理控制台来完成此配方，但你也可以通过使用提供的JSON代码，按照本章接下来的配方*在IAM策略中使用策略变量*，通过AWS
    CLI完成。
- en: IAM policies can work with both IAM and IAM Identity Center. Within this recipe,
    we will use the IAM policies with IAM entities. In the recipe titled *Creating
    customer-managed policies in IAM Identity Center* from this chapter, we will learn
    how to use the same policy with IAM Identity Center entities.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: IAM策略可以与IAM和IAM身份中心一起使用。在本配方中，我们将使用与IAM实体的IAM策略。在本章中的配方*在IAM身份中心中创建客户管理的策略*中，我们将学习如何使用相同的策略与IAM身份中心实体一起使用。
- en: Getting ready
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We need the following to successfully complete this recipe:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了成功完成这个配方，我们需要以下内容：
- en: A working AWS account, **awsseccb-sandbox-1** , and a user with **AdministratorAccess**
    permission to that account, **awsseccbadmin1** , following the *Technical requirements*
    section of this chapter.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有效的AWS账户，**awsseccb-sandbox-1**，以及一个具有对该账户的**AdministratorAccess**权限的用户，**awsseccbadmin1**，参照本章的*技术要求*部分。
- en: For testing this recipe, we need an IAM user named **awsseccb_iam_user1** with
    minimal or no permission and an S3 bucket, following the *Technical requirements*
    section of this chapter.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了测试这个配方，我们需要一个名为**awsseccb_iam_user1**的IAM用户，具有最小权限或没有权限，并且需要一个S3桶，参照本章的*技术要求*部分。
- en: How to do it...
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We will first create an IAM policy using the **awsseccbadmin1** administrator
    user and then attach it to the **awsseccb_iam_user1** IAM user.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先使用**awsseccbadmin1**管理员用户创建IAM策略，然后将其附加到**awsseccb_iam_user1** IAM用户上。
- en: Creating a customer-managed IAM policy from the AWS Management Console
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从AWS管理控制台创建客户管理的IAM策略
- en: 'We can create a policy using the IAM from the AWS Management Console as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式使用AWS管理控制台中的IAM创建策略：
- en: Log in to the console of **awsseccb-sandbox-1** as the **awsseccbadmin1** user
    with **AdministratorAccess** permission and go to the **IAM** dashboard.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以**awsseccb-sandbox-1**的**awsseccbadmin1**用户身份登录，并具有**AdministratorAccess**权限，进入**IAM**仪表板。
- en: Click on **Policies** from the left sidebar.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧边栏点击**策略**。
- en: Click on **Create Policy** . This will provide us with a visual editor as shown
    in the following figure.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建策略**。这将为我们提供一个可视化编辑器，如下图所示。
- en: '![Figure 2.1 – Specifying permissions for policy](image/B21384_02_1.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图2.1 – 为策略指定权限](image/B21384_02_1.jpg)'
- en: Figure 2.1 – Specifying permissions for policy
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1 – 为策略指定权限
- en: If we have already created the policy in JSON format, we can click on the **JSON**
    tab, enter it directly, and save it. In that case, we can skip *Steps 4* to *6*
    .
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们已经创建了JSON格式的策略，我们可以点击**JSON**标签，直接输入并保存。在这种情况下，我们可以跳过*步骤4*到*步骤6*。
- en: 'Under the **Select a service** section, click on **S3** . We should now see
    a screen like the following:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**选择服务**部分，点击**S3**。此时我们应该看到如下界面：
- en: '![Figure 2.2 – Configuring permissions for S3 resource](image/B21384_02_2.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图2.2 – 配置S3资源的权限](image/B21384_02_2.jpg)'
- en: Figure 2.2 – Configuring permissions for S3 resource
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2 – 配置S3资源的权限
- en: 'Under the **Access level** heading, expand **List** and select **ListAllMyBuckets**
    as shown in the following figure:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**访问级别**标题下，展开**List**并选择**ListAllMyBuckets**，如下面的图所示：
- en: '![Figure 2.3 – Selecting access level permission](image/B21384_02_3.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.3 – 选择访问级别权限](image/B21384_02_3.jpg)'
- en: Figure 2.3 – Selecting access level permission
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – 选择访问级别权限
- en: Important note
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: In the Resources section, the wildcard character ( ***** ) will be chosen to
    signify all resources since the **ListAllMyBuckets** action isn’t specific to
    any particular resource. If an action such as **ListBucket** , which is specific
    to a particular bucket, is chosen and we desire to limit it to a single bucket,
    we need to select **Specific** , click on **Add ARN** , and input the **Amazon
    Resource Name** ( **ARN** ) of our targeted bucket, following the format **arn:aws:s3:::<bucket_name>**
    . An ARN is a unique identifier that AWS uses to specify resources within its
    cloud services.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在资源部分，由于**ListAllMyBuckets**操作并不特定于任何特定资源，因此将选择通配符（*****）来表示所有资源。如果选择了如**ListBucket**等特定于某个桶的操作，并且我们希望将其限制为单个桶，则需要选择**特定**，点击**添加
    ARN**，并输入我们目标桶的**Amazon 资源名称**（**ARN**），格式为**arn:aws:s3:::<bucket_name>**。ARN是AWS用来在其云服务中指定资源的唯一标识符。
- en: Under the **Request conditions** section, select **Requested from IP** , provide
    our IP address, and click **Add Ip** . We can also specify the IP address range
    in the **Classless Inter-Domain Routing** ( **CIDR** ) format as shown in the
    following figure.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**请求条件**部分，选择**来自 IP 的请求**，提供我们的 IP 地址，并点击**添加 IP**。我们还可以按照以下图示的格式指定**无类域间路由**（**CIDR**）格式的IP地址范围。
- en: '![Figure 2.4 – Configuring request conditions](image/B21384_02_4.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.4 – 配置请求条件](image/B21384_02_4.jpg)'
- en: Figure 2.4 – Configuring request conditions
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4 – 配置请求条件
- en: Optionally, we can click **+ Add another condition** to add additional conditions
    as needed.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，我们可以点击**+ 添加另一个条件**来根据需要添加更多条件。
- en: Click **Next** to go to the **Review and** **create** page.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**进入**审查并创建**页面。
- en: Enter **MyS3ListAllBucketsPolicy** in the **Policy name** field and **My S3
    List All Buckets Policy** in the **Description – optional** field (or any name
    and description we want).
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**政策名称**字段中输入**MyS3ListAllBucketsPolicy**，在**描述 - 可选**字段中输入**My S3 List All
    Buckets Policy**（或任何我们想要的名称和描述）。
- en: Scroll down to review the policy details and click **Create policy** .
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动以查看政策详细信息并点击**创建政策**。
- en: 'Go to the policy and verify the policy JSON that was generated from the **JSON**
    tab:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入策略并验证从**JSON**标签生成的策略JSON：
- en: '![Figure 2.5 – Generated policy as JSON](image/B21384_02_5.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.5 – 生成的政策 JSON](image/B21384_02_5.jpg)'
- en: Figure 2.5 – Generated policy as JSON
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5 – 生成的政策 JSON
- en: Please make sure the IP address is yours and not copied from the sample code.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保IP地址是你自己的，而不是从示例代码中复制的。
- en: We can follow the *Attaching IAM policies to IAM group via AWS Management Console*
    subsection to assign the policy we created to an IAM group. If we are using IAM
    Identity Center, we can associate the policy with an IAM Identity Center group
    following the *Creating Customer-Managed Policies in IAM Identity Center* recipe
    from this chapter.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按照*通过AWS管理控制台将IAM策略附加到IAM组*小节，将我们创建的策略分配给IAM组。如果我们使用IAM身份中心，我们可以按照本章中的*在IAM身份中心创建客户管理策略*配方将策略与IAM身份中心组关联。
- en: Attaching IAM policies to IAM group via AWS Management Console
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过AWS管理控制台将IAM策略附加到IAM组
- en: 'It is good practice to add permissions to a user through a group. Hence, create
    a group called **awsseccbusers** and add our **awsseccb_iam_user1** user to that
    group. We can assign permissions to the IAM group as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践是通过组向用户添加权限。因此，创建一个名为**awsseccbusers**的组，并将我们的**awsseccb_iam_user1**用户添加到该组。我们可以通过以下方式将权限分配给IAM组：
- en: Log in to the console of **awsseccb-sandbox-1** as the **awsseccbadmin1** administrator
    user and go to the **IAM** dashboard.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**awsseccb-sandbox-1**账户中的**awsseccbadmin1**管理员用户登录控制台并进入**IAM**仪表板。
- en: Click on **User groups** from the left sidebar of the **IAM** dashboard.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**IAM**仪表板的左侧边栏中点击**用户组**。
- en: Click on the **awsseccbusers** group to go to the group’s page.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**awsseccbusers**组以进入该组页面。
- en: Go to the **Permissions** tab, and from the **Add permissions** dropdown menu,
    click **Attach policies** .
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入**权限**标签页，从**添加权限**下拉菜单中点击**附加策略**。
- en: '![Figure 2.6 – Configuring permissions for group](image/B21384_02_6.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.6 – 配置组的权限](image/B21384_02_6.jpg)'
- en: Figure 2.6 – Configuring permissions for group
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6 – 配置组的权限
- en: In the **Add permissions** page, select the **MyS3ListAllBucketsPolicy** policy,
    scroll down, and click on **Add permissions** .
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**添加权限**页面，选择**MyS3ListAllBucketsPolicy**策略，向下滚动并点击**添加权限**。
- en: We should now be able to see the new policy added to the group under the **Permissions**
    tab.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们应该能够在**权限**标签下看到已添加到组中的新策略。
- en: Important note
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: We can also attach policies to groups or users from the **Policy** tab of the
    **IAM** dashboard.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以从**IAM**仪表板的**策略**标签中将策略附加到组或用户。
- en: 'We can now verify the changes as follows:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以通过以下方式验证更改：
- en: Log into the AWS Management Console as the **awsseccb_iam_user1** user using
    the sign-in URL for IAM users for our account as we learned in the *Setting up
    IAM, account aliases, and billing alerts* recipe in [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020)
    .
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们在*设置IAM、帐户别名和计费提醒*食谱中所学的IAM用户登录URL，作为**awsseccb_iam_user1**用户登录到AWS管理控制台，[*第1章*](B21384_01.xhtml#_idTextAnchor020)。
- en: Go to the **S3** service.
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入**S3**服务。
- en: Click on **Buckets** from the left sidebar.
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧边栏中的**桶**。
- en: 'We should be able to see all the buckets:'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们应该能够看到所有的桶：
- en: '![Figure 2.7 – Listing buckets in Amazon S3](image/B21384_02_7.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图2.7 – 列出Amazon S3中的桶](image/B21384_02_7.jpg)'
- en: Figure 2.7 – Listing buckets in Amazon S3
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.7 – 列出Amazon S3中的桶
- en: We had given only the **ListAllMyBuckets** permission and hence we will see
    **Insufficient permissions** under the **Access** column.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只授予了**ListAllMyBuckets**权限，因此我们会在**访问**栏下看到**权限不足**。
- en: In this section, we learned how to assign an IAM policy to an IAM group. However,
    it is recommended to use IAM policies with IAM Identity Center, which we will
    explore in the upcoming recipe.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何将IAM策略分配给IAM组。然而，建议使用IAM Identity Center来使用IAM策略，我们将在接下来的食谱中探讨。
- en: How it works...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we created a customer-managed IAM policy. There are different
    IAM policy types, as we saw in the chapter introduction. We explored an identity-based
    policy within this recipe. Identity-based policies define permissions for IAM
    entities such as users, groups, or roles. Identity-based policies can be either
    managed policies or inline policies. Managed policies are policies that can be
    reused by associating them with multiple IAM entities and inline policies are
    attached directly to an IAM entity.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们创建了一个客户管理型IAM策略。如同我们在章节介绍中所见，IAM策略有多种类型。我们在本食谱中探讨了基于身份的策略。基于身份的策略定义了针对IAM实体（如用户、组或角色）的权限。基于身份的策略可以是管理型策略或内联策略。管理型策略是可以通过将它们与多个IAM实体关联来重用的策略，而内联策略是直接附加到IAM实体的策略。
- en: Managed policies can be further divided into AWS-managed and customer-managed
    policies. AWS-managed policies are created and maintained by AWS. While we can
    view and use them, we cannot edit them. Customer-managed policies are policies
    that we create for our needs when the AWS-managed policies are not sufficient.
    Even though we can directly assign the managed policies to a user, it is recommended
    always to assign them to a group and then add users to that group. Inline policies
    are attached directly to an IAM entity and cannot be reused.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 管理型策略可以进一步分为AWS管理型策略和客户管理型策略。AWS管理型策略由AWS创建和维护，虽然我们可以查看和使用它们，但不能编辑它们。客户管理型策略是当AWS管理型策略不足时，我们为满足需求而创建的策略。尽管我们可以直接将管理型策略分配给用户，但建议始终将它们分配给一个组，然后将用户添加到该组中。内联策略直接附加到IAM实体上，无法重用。
- en: Understanding the IAM policy structure
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解IAM策略结构
- en: '**IAM policies** are JSON documents and follow a structure that is followed
    by most policy types within AWS, except ACLs, which are XML-based, and **virtual
    private cloud** ( **VPC** ) endpoints. The following is an example of an IAM policy:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**IAM策略**是JSON文档，遵循AWS中大多数策略类型的结构，除了ACL（访问控制列表），它是基于XML的，以及**虚拟私有云**（**VPC**）终端节点。以下是一个IAM策略的示例：'
- en: '![Figure 2.8 – An IAM policy example](image/B21384_02_8.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图2.8 – 一个IAM策略示例](image/B21384_02_8.jpg)'
- en: Figure 2.8 – An IAM policy example
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.8 – 一个IAM策略示例
- en: 'Here are the main elements of the IAM policy document:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是IAM策略文档的主要元素：
- en: The **Version** element Indicates the policy language version. In *Figure 2*
    *.8* , we are using the *2012-10-17* version of the policy language, which is
    the most recent version.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Version**元素表示策略语言版本。在*图2.8*中，我们使用的是*2012-10-17*版本的策略语言，这是最新版本。'
- en: 'The optional **Id** element specifies an identifier for the policy, primarily
    used to distinguish between different versions or instances of a policy. Here
    is an example: **"** **Id": "S3ReadOnlyPolicyID1"** .'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '可选的**Id**元素指定了策略的标识符，主要用于区分策略的不同版本或实例。下面是一个示例：**"** **Id": "S3ReadOnlyPolicyID1"**。'
- en: The **Statement** element contains the main policy information, including permissions,
    resources, and conditions. Statements are added as arrays to the **Statement**
    element.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Statement**元素包含了主要的策略信息，包括权限、资源和条件。声明作为数组被添加到**Statement**元素中。'
- en: 'A **Statement** element for an IAM policy may contain the following sub-elements:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一个IAM策略的**Statement**元素可以包含以下子元素：
- en: The optional **Sid** element represents the statement ID. This can be used to
    provide a description of the policy.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的**Sid**元素表示声明ID。这可以用来提供策略的描述。
- en: The **Effect** element specifies whether we want to allow or deny access to
    a resource. The supported values are **Allow** and **Deny** .
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Effect**元素指定是否允许或拒绝对资源的访问。支持的值有**Allow**和**Deny**。'
- en: The **Action** element specifies the permission or permissions ( **s3:ListAllMyBuckets**
    ) for which this statement should be applied. We can also specify ***** to denote
    any action.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Action**元素指定该声明应用的权限或权限（例如，**s3:ListAllMyBuckets**）。我们还可以指定*****来表示任何操作。'
- en: The optional **NotAction** element is the opposite of the **Action** element
    and specifies that the policy allows or denies all actions except those listed.
    The **Action** and **NotAction** elements can be included in the same overall
    IAM policy but not within the same individual statement of that policy. Each statement
    in the policy should either specify **Action** or **NotAction** .
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的**NotAction**元素是**Action**元素的反义，指定策略允许或拒绝除列出操作以外的所有操作。**Action**和**NotAction**元素可以包含在同一个IAM策略中，但不能在同一个策略的单个声明中使用。策略中的每个声明应当指定**Action**或**NotAction**之一。
- en: 'The **Resource** element specifies the ARN of the resource (for example, S3
    bucket) that the statement is applied to. For S3 buckets, ARN should follow the
    following format: **arn:aws:s3:::<bucket_name>/<key_name>** . To specify multiple
    values, use a comma to separate them. We can specify ***** to denote any resources.
    In this recipe, we used the **ListAllMyBuckets** policy with **Resource** as *****
    as the **ListAllMyBuckets** policy is not a resource-specific policy. We want
    to use a resource-specific policy such as **ListBucket** and restrict it to a
    bucket, as shown in *Figure 2* *.8* .'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Resource**元素指定声明应用到的资源ARN（例如，S3桶）。对于S3桶，ARN应遵循以下格式：**arn:aws:s3:::<bucket_name>/<key_name>**。若要指定多个值，请用逗号分隔它们。我们可以指定*****来表示任何资源。在此示例中，我们使用了**ListAllMyBuckets**策略，并将**Resource**设置为*****，因为**ListAllMyBuckets**策略不是特定于某个资源的策略。我们希望使用像**ListBucket**这样的资源特定策略，并将其限制在某个桶中，如*图2*
    * .8*所示。'
- en: The optional **NotResource** element is the opposite of **Resource** and specifies
    all resources except the listed resources to which the actions apply. A single
    statement will either contain **Resource** or **NotResource** but not both. However,
    they can be included in the same overall IAM policy as part of two different statements.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的**NotResource**元素是**Resource**的反义，指定所有资源，除了列出的资源，这些资源适用相应的操作。单个声明将包含**Resource**或**NotResource**，但不能同时包含两者。不过，它们可以作为两个不同声明的一部分包含在同一个IAM策略中。
- en: 'The **Principal** element identifies AWS users, accounts, services, or other
    entities that are granted or denied access to a resource. It is predominantly
    used in resource-based policies to specify which entities are allowed or denied
    access to a specific AWS resource. Identity-based policies do not use the **Principal**
    element, as these policies are directly attached to users, groups, or roles, thus
    rendering the inclusion of a **Principal** element unnecessary. Permissions boundaries
    also do not include the **Principal** element; instead, they serve as a ceiling
    to the permissions that IAM entities (including users and roles but excluding
    groups) can have. SCPs also do not include the **Principal** element. Following
    is an example for a **Principal** element: **"Principal": {"** **AWS": "arn:aws:iam::Account-ID-without-hyphens:user/Rick"}**
    .'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Principal**元素用于标识 AWS 用户、账户、服务或其他实体，这些实体被授予或拒绝访问某个资源的权限。它主要用于基于资源的策略中，指定哪些实体可以访问特定的
    AWS 资源。基于身份的策略不使用**Principal**元素，因为这些策略是直接附加到用户、组或角色上的，因此不需要包含**Principal**元素。权限边界也不包含**Principal**元素；相反，它们作为限制
    IAM 实体（包括用户和角色，但不包括组）可以拥有的权限的上限。服务控制策略（SCP）也不包含**Principal**元素。以下是一个**Principal**元素的示例：**"Principal":
    {"** **AWS": "arn:aws:iam::Account-ID-without-hyphens:user/Rick"}**。'
- en: The optional **NotPrincipal** element is the opposite of the **Principal** element
    and specifies all principals except the listed principals who are allowed or denied
    by the policy. Similar to the **Principal** element, we cannot have it within
    SCPs or permissions boundaries. We can use one or the other of **Principal** and
    **NotPrincipal** within a single policy statement but not both. They can, however,
    be used in separate statements within the same overall policy.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的**NotPrincipal**元素是**Principal**元素的反义词，指定除列出的主体之外，哪些主体被策略允许或拒绝。与**Principal**元素类似，我们不能在服务控制策略（SCP）或权限边界中使用它。我们可以在单个策略声明中使用**Principal**和**NotPrincipal**中的一个，但不能同时使用它们。然而，它们可以在同一个整体策略中的不同声明中使用。
- en: 'The optional **Condition** element allows us to conditionally execute policies
    as we can see from *Figure 2* *.8* . We use Boolean operators to match the condition
    against values in the request. For example, in this recipe, we used the **IpAddress**
    condition along with the **aws:SourceIp** parameter to allow the actions only
    if a request is made from the specified IP address. We can also specify a range
    of IP addresses using the CIDR notation. CIDR is a method for allocating and routing
    IP addresses without relying on traditional fixed class-based systems. The following
    are some of the predefined condition keys that are supported by all AWS services
    that support IAM access control: **aws:CurrentTime** , **aws:EpochTime** , **aws:MultiFactorAuthAge**
    , **aws:MultiFactorAuthPresent** , **aws:PrincipalOrgID** , **aws:PrincipalArn**
    , **aws:RequestedRegion** , **aws:SecureTransport** , and **aws:UserAgent** .'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的**Condition**元素允许我们在条件下执行策略，如我们在*图 2*.8*中看到的那样。我们使用布尔运算符将条件与请求中的值进行匹配。例如，在这个示例中，我们使用了**IpAddress**条件与**aws:SourceIp**参数结合，只在请求来自指定的
    IP 地址时允许执行操作。我们还可以使用 CIDR 表示法指定一个 IP 地址范围。CIDR 是一种分配和路由 IP 地址的方法，不依赖传统的基于类的系统。以下是一些所有支持
    IAM 访问控制的 AWS 服务所支持的预定义条件键：**aws:CurrentTime**、**aws:EpochTime**、**aws:MultiFactorAuthAge**、**aws:MultiFactorAuthPresent**、**aws:PrincipalOrgID**、**aws:PrincipalArn**、**aws:RequestedRegion**、**aws:SecureTransport**
    和 **aws:UserAgent**。
- en: There’s more...
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: Let’s go through some core concepts related to policies in AWS, including AWS
    policy types and the policy evaluation logic.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来了解一些与 AWS 策略相关的核心概念，包括 AWS 策略类型和策略评估逻辑。
- en: AWS policy types
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AWS 策略类型
- en: 'The following is a list of important policy types in AWS along with examples
    and use cases:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 AWS 中一些重要策略类型的列表，包含示例和使用场景：
- en: '**Identity-based policies** :'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于身份的策略**：'
- en: '**Example** : IAM policies attached to users, groups, or roles.'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**示例**：附加到用户、组或角色的 IAM 策略。'
- en: '**Use case** : They allow a developer read-only access to a specific S3 bucket.'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用场景**：它们允许开发人员对特定的 S3 存储桶进行只读访问。'
- en: '**Resource-based policies** :'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于资源的策略**：'
- en: '**Example** : S3 bucket policies and IAM role trust policies.'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**示例**：S3 存储桶策略和 IAM 角色信任策略。'
- en: '**Use case** : They grant a user in another AWS account read and write access
    to a specified bucket.'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用场景**：它们授予另一个 AWS 账户中的用户对指定存储桶的读写访问权限。'
- en: '**Session policies** :'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**会话策略**：'
- en: '**Example** : A policy limiting permissions when assuming a role temporarily.'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**示例**：限制临时假设角色时的权限策略。'
- en: '**Use case** : They provide a developer with temporary enhanced permissions
    for troubleshooting while limiting access to read-only to ensure security.'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用例**：它们为开发人员提供了临时的增强权限用于故障排除，同时通过限制只读访问来确保安全。'
- en: '**Permissions boundaries** :'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**权限边界**：'
- en: '**Example** : They set a maximum permission limit for IAM users or roles.'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**示例**：它们为IAM用户或角色设置了最大权限限制。'
- en: '**Use case** : They prevent an IAM user from escalating their own permissions
    beyond a defined boundary to ensure security and compliance.'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用例**：它们防止IAM用户将自身权限提升到定义的边界之外，以确保安全性和合规性。'
- en: 'The following elements are not supported in permissions boundaries: **Principal**
    , **NotPrincipal** , and **NotResource** .'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下元素在权限边界中不支持：**Principal**、**NotPrincipal**和**NotResource**。
- en: Permissions boundaries operate as a mechanism for limiting the maximum permissions
    that can be granted by any attached policies, ensuring a layer of security and
    control over permissions allocation. The permissions boundary does not grant access.
    In essence, if an identity-based policy allows certain actions, those actions
    cannot be performed unless they are also within the confines of the permissions
    boundary. If an identity-based policy attempts to grant permissions beyond what
    is allowed by the permissions boundary, those excess permissions will be restricted.
    In other words, effective permissions are the intersection of the identity-based
    policy and the permissions boundary.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 权限边界作为限制任何附加策略可以授予的最大权限的机制，确保了权限分配的安全性和控制层次。权限边界不授予访问权限。本质上，如果基于身份的策略允许某些操作，除非这些操作也在权限边界的范围内，否则无法执行。如果基于身份的策略尝试授予超出权限边界允许的权限，则这些超额权限将受到限制。换句话说，有效权限是基于身份的策略和权限边界的交集。
- en: '**SCPs** :'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SCPs**：'
- en: '**Example** : A policy that restricts the deletion of IAM roles across all
    accounts in an AWS organization.'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**示例**：一个限制在AWS组织中所有账户删除IAM角色的策略。'
- en: '**Use case** : They enhance security by ensuring that certain IAM entities
    and policies are not modified or deleted.'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用例**：它们通过确保某些IAM实体和策略不被修改或删除来增强安全性。'
- en: 'The following elements are not supported in SCPs: **Principal** , **NotPrincipal**
    , and **NotResource** .'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下元素在SCP中不支持：**Principal**、**NotPrincipal**和**NotResource**。
- en: SCPs in AWS Organizations function similarly to permission boundaries, serving
    as guardrails that restrict the maximum permissions for IAM entities within AWS
    accounts in the organization. SCPs don’t grant permissions but limit them, working
    alongside IAM permission policies. Effective permissions are an intersection of
    the allowances of IAM policies and SCPs, and any explicit **Deny** in either overrides
    the allowed permissions. Thus, IAM entities can only perform actions allowed by
    both IAM policies and SCPs.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: AWS组织中的SCP功能与权限边界类似，充当限制组织内AWS账户中IAM实体最大权限的护栏。SCP不授予权限，而是限制权限，与IAM权限策略协同工作。有效权限是IAM策略和SCP的允许项的交集，任何在其中一个中显式的**拒绝**都会覆盖允许的权限。因此，IAM实体只能执行IAM策略和SCP都允许的操作。
- en: '**ACLs** :'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ACLs**：'
- en: '**Example** : They specify which principals in another AWS account can access
    a specific S3 bucket.'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**示例**：它们指定了另一个AWS账户中的哪些主体可以访问特定的S3桶。'
- en: '**Use case** : They enable secure data sharing between AWS accounts by granting
    specific permissions to access data stored in an S3 bucket.'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用例**：它们通过授予特定权限以访问存储在S3桶中的数据，实现AWS账户之间的安全数据共享。'
- en: Each policy type serves as an essential tool in the AWS environment, contributing
    to the intricate ecosystem of access control and security, ensuring optimal operational
    efficiency and security. We discussed identity-based policies in this chapter
    and will be discussing more variations of them and other policy types within subsequent
    recipes within this book. Next, we will look into an overview of the IAM policy
    evaluation logic.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 每种策略类型都是AWS环境中的重要工具，促进了访问控制和安全性的复杂生态系统，确保了最佳的操作效率和安全性。本章讨论了基于身份的策略，在本书的后续章节中我们将讨论更多这些策略的变体以及其他类型的策略。接下来，我们将查看IAM策略评估逻辑的概述。
- en: IAM policy evaluation logic
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IAM策略评估逻辑
- en: '**AWS IAM policy evaluation logic** determines whether a request is allowed
    or denied based on the policies attached to the IAM principal (user or role) making
    the request, and any permissions boundaries or resource-based policies that apply.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**AWS IAM 策略评估逻辑**决定了一个请求是否被允许或拒绝，依据的是附加在发起请求的 IAM 主体（用户或角色）上的策略，以及适用的任何权限边界或基于资源的策略。'
- en: 'When SCPs and permissions boundaries are not present, a union of all permissions
    is considered for evaluation. Here’s a brief outline of the steps involved in
    the evaluation process:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有 SCP 和权限边界时，会考虑所有权限的并集进行评估。以下是评估过程中涉及的简要步骤：
- en: The evaluation logic checks for any explicit **Deny** statements that apply
    to the request. If there’s at least one explicit **Deny** , the request is denied
    irrespective of any **Allow** statements.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估逻辑会检查是否存在任何适用于请求的显式 **拒绝** 语句。如果存在至少一个显式 **拒绝**，请求将被拒绝，无论是否有 **允许** 语句。
- en: If there are no explicit **Deny** statements, the logic checks for any explicit
    **Allow** statements. If there’s at least one **Allow** , the request is allowed,
    provided there isn’t an explicit **Deny** .
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有显式的 **拒绝** 语句，逻辑会检查是否存在任何显式的 **允许** 语句。如果至少有一个 **允许**，请求将被允许，前提是没有显式的 **拒绝**
    语句。
- en: If there are no explicit **Allow** or **Deny** statements that apply to the
    request, the request is denied by default because IAM is a default **Deny** ,
    explicit **Allow** system.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有适用于请求的显式 **允许** 或 **拒绝** 语句，默认情况下请求会被拒绝，因为 IAM 是一个默认 **拒绝**、显式 **允许** 系统。
- en: If we use SCPs or permissions boundaries, an intersection of other policies
    with SCPs or permissions boundaries is considered for evaluation. This is because
    SCPs and permissions boundaries set the maximum permissions you can have. Therefore,
    if an SCP or permission boundary gives permission for S3 access and an identity
    policy gives permission for EC2, our effective permission will be none. To understand
    SCPs better, we can refer to the discussion about SCPs within the *Multi-account
    management with AWS Organizations* recipe in [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020)
    .
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用 SCP 或权限边界，则会考虑其他策略与 SCP 或权限边界的交集进行评估。这是因为 SCP 和权限边界设置了你可以拥有的最大权限。因此，如果
    SCP 或权限边界授予了 S3 访问权限，而身份策略授予了 EC2 权限，那么我们的有效权限将是零。为了更好地理解 SCP，可以参考 [*第 1 章*](B21384_01.xhtml#_idTextAnchor020)
    中关于 SCP 的讨论。
- en: Next, we will look into some additional concepts related to IAM policies.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨一些与 IAM 策略相关的额外概念。
- en: Additional notes on IAM policies
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于 IAM 策略的附加说明
- en: 'Let’s quickly go through some additional concepts related to policies in AWS:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速浏览一些与 AWS 策略相关的额外概念：
- en: '**AWS managed - job function** type is a subset of **AWS managed** type and
    is designed to align with common IT job functions. The current list of job functions
    includes administrator, billing, database administrator, data scientist, developer
    power user, network administrator, read-only access, security auditor, support
    user, system administrator, and view-only user.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS 管理型 - 职能类型**是 **AWS 管理型** 类型的一个子集，旨在与常见的 IT 职能对齐。目前的职能列表包括管理员、计费、数据库管理员、数据科学家、开发者高级用户、网络管理员、只读访问、安全审计员、支持用户、系统管理员和仅查看用户。'
- en: 'The **AWS Policy Generator** can generate the following policy types: **Simple
    Queue Service** ( **SQS** ) queue policy, S3 bucket policy, VPC endpoint policy,
    IAM policy, and **Simple Notification Service** ( **SNS** ) topic policy. It is
    currently available at [https://awspolicygen.s3.amazonaws.com/policygen.html](https://awspolicygen.s3.amazonaws.com/policygen.html)
    .'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS 策略生成器** 可以生成以下几种策略类型：**简单队列服务**（**SQS**）队列策略、S3 存储桶策略、VPC 端点策略、IAM 策略和
    **简单通知服务**（**SNS**）主题策略。它目前可以通过 [https://awspolicygen.s3.amazonaws.com/policygen.html](https://awspolicygen.s3.amazonaws.com/policygen.html)
    访问。'
- en: If both **Allow** and **Deny** effects are set for the same action and resource
    in a policy, **Deny** will always override **Allow** .
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在同一策略中为同一操作和资源设置了 **允许** 和 **拒绝** 效果，**拒绝** 将始终覆盖 **允许**。
- en: An IAM policy cannot be used to grant permissions for anonymous users, unlike
    **S3 ACL** and the **Bucket policy** .
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IAM 策略不能用于授予匿名用户权限，这与 **S3 ACL** 和 **存储桶策略** 不同。
- en: The IAM policy cannot be applied to a root user and can only be applied to IAM
    users.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IAM 策略不能应用于 root 用户，只能应用于 IAM 用户。
- en: To truly master and make the most out of AWS IAM, it is essential to grasp the
    finer details of AWS policies. With a comprehensive understanding of policy management
    and policy evaluation logic, we can try to strike a balance between security and
    operational efficiency. For the latest on policy types, evaluation rules, and
    best practices, always refer to the official AWS documentation.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要真正掌握并充分利用 AWS IAM，理解 AWS 策略的细节至关重要。通过全面了解策略管理和策略评估逻辑，我们可以尝试在安全性和操作效率之间找到平衡。有关最新的策略类型、评估规则和最佳实践，请始终参考官方
    AWS 文档。
- en: See also
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'We can continue learning about AWS policies and permissions here: [https://www.cloudericks.com/blog/demystifying-aws-policies-and-permissions](https://www.cloudericks.com/blog/demystifying-aws-policies-and-permissions)
    .'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续在这里学习 AWS 策略和权限：[https://www.cloudericks.com/blog/demystifying-aws-policies-and-permissions](https://www.cloudericks.com/blog/demystifying-aws-policies-and-permissions)。
- en: Using policy variables within IAM policies
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 IAM 策略中使用策略变量
- en: '**IAM policy variables** are a set of predefined placeholders that we can use
    in IAM policy documents, and they get replaced with the actual values at runtime.
    They help in creating more dynamic and flexible policies. In this recipe, we will
    create an S3 bucket with folders matching the usernames of IAM users. With the
    help of the **${aws:username}** policy variable, we will allow the IAM user to
    list the contents of only the folder with their names. We will use the AWS CLI
    for this recipe, but you may do it from the AWS Management Console by making use
    of the provided JSON code following the previous recipe.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**IAM 策略变量**是一组预定义的占位符，我们可以在 IAM 策略文档中使用，它们将在运行时被实际值替换。它们有助于创建更动态和灵活的策略。在此示例中，我们将创建一个
    S3 桶，并在其中创建与 IAM 用户名匹配的文件夹。借助**${aws:username}**策略变量，我们将允许 IAM 用户仅列出与其用户名匹配的文件夹内容。我们将使用
    AWS CLI 来完成此示例，但您也可以通过在 AWS 管理控制台中使用前述示例提供的 JSON 代码来完成。'
- en: Getting ready
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We need the following to successfully complete this recipe:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 为了成功完成此示例，我们需要以下内容：
- en: A working **awsseccb-sandbox-1** AWS account, a user with **AdministratorAccess**
    permission to that account, **awsseccbadmin1** , and a corresponding **Sandbox1Admin1**
    CLI profile, following the *Technical requirements* section of this chapter.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个正常工作的**awsseccb-sandbox-1** AWS 账户，一个具有**AdministratorAccess**权限的用户，**awsseccbadmin1**，以及相应的**Sandbox1Admin1**
    CLI 配置文件，按照本章的*技术要求*部分进行操作。
- en: For testing this recipe, we need two IAM users, **awsseccb_iam_user1** and **awsseccb_iam_user2**
    , with minimal or no permission in the sandbox account, and corresponding CLI
    profiles named **Sandbox1User1** and **Sandbox1User2** . Following the best practices,
    create a user group called **awsseccb_iam_users** and add these users to the group.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了测试此示例，我们需要两个 IAM 用户，**awsseccb_iam_user1** 和 **awsseccb_iam_user2**，它们在沙箱账户中具有最小或没有权限，并且相应的
    CLI 配置文件分别命名为 **Sandbox1User1** 和 **Sandbox1User2**。按照最佳实践，创建一个名为**awsseccb_iam_users**的用户组，并将这些用户添加到该组中。
- en: An S3 bucket following the *Technical requirements* section of this chapter.
    Create folders in the S3 bucket with the names of the IAM users we created for
    testing this recipe, namely **awsseccb_iam_user1** and **awsseccb_iam_user2**
    .
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个符合本章*技术要求*部分的 S3 桶。在 S3 桶中创建文件夹，文件夹名称为我们为测试此示例而创建的 IAM 用户名，即**awsseccb_iam_user1**
    和 **awsseccb_iam_user2**。
- en: How to do it...
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'In this section, we will use the AWS CLI to create an IAM policy and then attach
    it to a group. We will also explore the use of policy variables within this recipe.
    Let us get started:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 AWS CLI 创建一个 IAM 策略，然后将其附加到一个用户组上。我们还将探索在此示例中使用策略变量的方法。让我们开始吧：
- en: 'Create a file called **s3-list-user-folder-policy.json** with the following
    JSON policy, but replace my bucket name with your bucket name:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为**s3-list-user-folder-policy.json**的文件，并使用以下 JSON 策略，但请将我的桶名称替换为您的桶名称：
- en: '[PRE0]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Important note
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The policy JSON file and all the CLI commands are included with the code files.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 JSON 文件以及所有 CLI 命令都包含在代码文件中。
- en: 'Create the policy using the **create-policy** subcommand:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**create-policy**子命令创建策略：
- en: '[PRE1]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This should return the policy’s details, along with its ARN:'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该返回策略的详细信息及其 ARN：
- en: '![Figure 2.9 – The create-policy command response](image/B21384_02_9.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.9 – 创建策略命令响应](image/B21384_02_9.jpg)'
- en: Figure 2.9 – The create-policy command response
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9 – 创建策略命令响应
- en: 'Attach the policy to the group using the **attach-group-policy** subcommand
    using the policy ARN from the previous command:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**attach-group-policy**子命令将策略附加到该组，使用前一个命令中的策略 ARN：
- en: '[PRE2]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Verify the changes by running the **aws s3 ls** command followed by the **awsseccb_iam_user1**
    bucket name and folder name with the **AwsSecCbUser** profile for the **awsseccb_iam_user1**
    IAM user from the **awsseccb_users** group:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行 **aws s3 ls** 命令，并使用 **AwsSecCbUser** 配置文件针对 **awsseccb_iam_user1** 用户以及
    **awsseccb_users** 组中的 **awsseccb_iam_user1** 桶名称和文件夹名称，验证更改：
- en: '[PRE3]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This should yield a successful response, listing all the objects from the **awsseccb_iam_user1**
    folder.
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会返回一个成功的响应，列出 **awsseccb_iam_user1** 文件夹中的所有对象。
- en: '![Figure 2.10 – Listing the S3 folder](image/B21384_02_10.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.10 – 列出 S3 文件夹](image/B21384_02_10.jpg)'
- en: Figure 2.10 – Listing the S3 folder
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.10 – 列出 S3 文件夹
- en: 'Verify the changes by running the **aws s3 ls** command followed by the **awsseccb_iam_user1**
    bucket name and folder name with the **Sandbox1User2** profile for the **awsseccb_iam_user2**
    IAM user:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行 **aws s3 ls** 命令，并使用 **Sandbox1User2** 配置文件针对 **awsseccb_iam_user2** 用户以及
    **awsseccb_iam_user1** 桶名称和文件夹名称，验证更改：
- en: '[PRE4]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This should yield an **AccessDenied** response as **awsseccb_iam_user2** cannot
    list the **awsseccb_iam_user1** folder.
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会返回一个 **AccessDenied** 响应，因为 **awsseccb_iam_user2** 无法列出 **awsseccb_iam_user1**
    文件夹。
- en: '![Figure 2.11 – Listing other user’s S3 folders](image/B21384_02_11.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.11 – 列出其他用户的 S3 文件夹](image/B21384_02_11.jpg)'
- en: Figure 2.11 – Listing other user’s S3 folders
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.11 – 列出其他用户的 S3 文件夹
- en: If we try to list content of the **awsseccb_iam_user2** folder with the **Sandbox1User2**
    profile for the **awsseccb_iam_user2** IAM user, we should get a successful response,
    listing all the objects from the **awsseccb_iam_user1** folder.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试使用 **Sandbox1User2** 配置文件列出 **awsseccb_iam_user2** 文件夹的内容，并且该配置文件属于 **awsseccb_iam_user2**
    IAM 用户，我们应该获得一个成功的响应，列出 **awsseccb_iam_user1** 文件夹中的所有对象。
- en: How it works...
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它的工作原理...
- en: In this recipe, we created an IAM policy with the **${aws:username}** policy
    variable to restrict an IAM user to listing the contents of a folder within an
    S3 bucket only if that user’s username matches the folder name. The policy variable
    **${aws:username}** represents the IAM username of the user making the request.
    This means that if we assign the policy to a user called **awsseccb_iam_user1**
    , then, the **${aws:username}** policy within the IAM policy will be replaced
    with **${aws:username}** at runtime during policy evaluation, and the user will
    then get permission only to this folder.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们创建了一个包含 **${aws:username}** 策略变量的 IAM 策略，限制 IAM 用户只能列出 S3 存储桶内某个文件夹的内容，前提是该用户的用户名与文件夹名称匹配。**${aws:username}**
    策略变量代表发出请求的 IAM 用户名。这意味着，如果我们将此策略分配给名为 **awsseccb_iam_user1** 的用户，那么在策略评估期间，IAM
    策略中的 **${aws:username}** 策略变量将在运行时被替换为 **${aws:username}**，该用户将仅获得访问此文件夹的权限。
- en: There’s more
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容
- en: 'AWS supports a set of predefined policy variables that can be used in IAM policies.
    Here’s a list of commonly used IAM policy variables:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 支持一组预定义的策略变量，可以在 IAM 策略中使用。以下是常用的 IAM 策略变量列表：
- en: '**${aws:username}** : This variable is replaced with the IAM username of the
    user making the request.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**${aws:username}** : 此变量会被发出请求的 IAM 用户名替换。'
- en: '**${aws:userid}** : This variable represents the unique identifier of the IAM
    user or role making the request.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**${aws:userid}** : 此变量表示发出请求的 IAM 用户或角色的唯一标识符。'
- en: '**${aws:CurrentTime}** : The current date and time in UTC, formatted as YYYY-MM-DDTHH:MM:SSZ.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**${aws:CurrentTime}** : 当前的日期和时间（UTC 格式），格式为 YYYY-MM-DDTHH:MM:SSZ。'
- en: '**${aws:EpochTime}** : The current date and time in UTC, represented as the
    number of seconds since January 1, 1970 (the Unix epoch).'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**${aws:EpochTime}** : 当前的日期和时间（UTC 格式），表示自 1970 年 1 月 1 日以来的秒数（Unix 纪元时间）。'
- en: '**${aws:principaltype}** : The type of principal (user, account, role, federated
    user, etc.) making the request.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**${aws:principaltype}** : 发出请求的主体类型（用户、账户、角色、联合用户等）。'
- en: '**${aws:SecureTransport}** : A Boolean value indicating whether the request
    was sent using SSL.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**${aws:SecureTransport}** : 一个布尔值，指示请求是否通过 SSL 发送。'
- en: '**${aws:SourceIp}** : The IP address of the requester. This is useful for restricting
    access to certain IP ranges.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**${aws:SourceIp}** : 请求者的 IP 地址。此变量对于限制对某些 IP 范围的访问非常有用。'
- en: '**${aws:UserAgent}** : The user agent string of the requester’s client application.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**${aws:UserAgent}** : 请求者客户端应用程序的用户代理字符串。'
- en: '**${aws:Requester}** : The AWS account ID of the requester. Useful in cross-account
    scenarios.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**${aws:Requester}** : 请求者的 AWS 账户 ID。在跨账户场景中非常有用。'
- en: '**${aws:sourceVpc}** , **${aws:sourceVpce}** , and **${aws:sourceVpcIpv4CidrBlock}**
    are variables used for controlling access based on the source VPC, VPC endpoint,
    or the IPv4 CIDR block of the request.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**${aws:sourceVpc}**、**${aws:sourceVpce}** 和 **${aws:sourceVpcIpv4CidrBlock}**
    是用于根据请求的源 VPC、VPC 终端节点或 IPv4 CIDR 块控制访问的变量。'
- en: '**${aws:TagKeys}** and **${aws:RequestTag/tag-key}** are used for matching
    the tags on the request.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**${aws:TagKeys}** 和 **${aws:RequestTag/tag-key}** 用于匹配请求中的标签。'
- en: '**${aws:MultiFactorAuthPresent}** : A Boolean value indicating whether the
    request was made with **multi-factor** **authentication** ( **MFA** ).'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**${aws:MultiFactorAuthPresent}**：一个布尔值，表示请求是否使用了 **多因素** **认证**（**MFA**）。'
- en: '**${s3:x-amz-acl}** , **${s3:x-amz-content-sha256}** , **${s3:x-amz-copy-source}**
    , and so on, are service-specific variables for S3, allowing policies to match
    various conditions specific to S3 requests.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**${s3:x-amz-acl}**、**${s3:x-amz-content-sha256}**、**${s3:x-amz-copy-source}**
    等是 S3 特定的服务变量，允许策略匹配与 S3 请求相关的各种条件。'
- en: '**${s3:prefix}** and **${s3:max-keys}** are variables specifically for controlling
    access based on S3 request parameters.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**${s3:prefix}** 和 **${s3:max-keys}** 是用于根据 S3 请求参数控制访问的特定变量。'
- en: This list isn’t exhaustive as AWS continually evolves and may introduce new
    variables or specific variables for different services beyond IAM. For the most
    current and comprehensive list, it’s best to refer to the official AWS documentation.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表并不详尽，因为 AWS 会持续发展，可能会引入新的变量或为 IAM 之外的不同服务提供特定的变量。要获得最当前和最全面的列表，最好参考官方 AWS
    文档。
- en: See also
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'We can read more about AWS policy variables here: [https://www.cloudericks.com/blog/understanding-aws-policy-variables-with-practical-examples](https://www.cloudericks.com/blog/understanding-aws-policy-variables-with-practical-examples)
    .'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在这里阅读更多关于 AWS 策略变量的内容：[https://www.cloudericks.com/blog/understanding-aws-policy-variables-with-practical-examples](https://www.cloudericks.com/blog/understanding-aws-policy-variables-with-practical-examples)。
- en: Creating customer-managed policies in IAM Identity Center
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 IAM 身份中心创建客户管理的策略
- en: To create customer-managed policies in IAM Identity Center, we need to first
    create a **custom permission set** and then assign users or groups to one or more
    AWS accounts with that permission set. In the *User management and SSO with IAM
    Identity Center* recipe from [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020) ,
    we created a permission set using an AWS-managed policy. In this recipe, we will
    create a custom permission set based on the customer-managed IAM policy we created
    in the *Creating a customer-managed IAM policy* recipe in this chapter, and then,
    we will assign a user to an AWS account with this permission set making use of
    groups.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 IAM 身份中心创建客户管理的策略，我们需要首先创建一个 **自定义权限集**，然后将用户或组分配到一个或多个 AWS 账户，并为其指定该权限集。在
    [*第 1 章*](B21384_01.xhtml#_idTextAnchor020) 的 *用户管理与 IAM 身份中心的 SSO* 食谱中，我们使用 AWS
    管理的策略创建了一个权限集。在本食谱中，我们将创建一个基于本章 *创建客户管理的 IAM 策略* 食谱中创建的客户管理 IAM 策略的自定义权限集，然后，我们将使用组将用户分配到具有该权限集的
    AWS 账户。
- en: Getting ready
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We need the following to successfully complete this recipe:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要以下内容才能成功完成此食谱：
- en: An AWS account where an IAM Identity Center instance is setup. If we are using
    AWS Organizations, as we saw in [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020)
    , this will be the **management account** . We could also do this using a **delegated
    administrator** account in an AWS organization. We learned about the **delegated
    administrator** account in [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020) . We
    can use the **aws-sec-cookbook-1** management account, which we set up in [*Chapter
    1*](B21384_01.xhtml#_idTextAnchor020) . Alternatively, you may follow the steps
    from a standalone AWS account without AWS Organizations where an IAM Identity
    Center instance is set up, and in that case, just use that account when I refer
    to **aws-sec-cookbook-1** in the recipe.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置了 IAM 身份中心实例的 AWS 账户。如果我们使用 AWS Organizations，如我们在 [*第 1 章*](B21384_01.xhtml#_idTextAnchor020)
    中看到的，这将是 **管理账户**。我们也可以使用 AWS 组织中的 **委派管理员** 账户来完成此操作。我们在 [*第 1 章*](B21384_01.xhtml#_idTextAnchor020)
    中学习了 **委派管理员** 账户。我们可以使用在 [*第 1 章*](B21384_01.xhtml#_idTextAnchor020) 中设置的 **aws-sec-cookbook-1**
    管理账户。或者，您可以按照独立的 AWS 账户进行操作，该账户没有 AWS Organizations，但设置了 IAM 身份中心实例，在这种情况下，只需使用该账户，我在本食谱中提到的
    **aws-sec-cookbook-1**。
- en: Important note
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: As a good practice, we can limit access to the management account by making
    administrative changes using a delegated administrator as we in the *There’s more…*
    section of the *User management and SSO with IAM Identity Center* recipe from
    [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020) . This is particularly advisable
    for larger organizations to restrict the number of people with access to the management
    account.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 作为良好的实践，我们可以通过使用委派管理员进行管理更改，限制对管理账户的访问，正如我们在[*第1章*](B21384_01.xhtml#_idTextAnchor020)中*用户管理和SSO与IAM身份中心*食谱的*更多内容…*部分所述。这对于大型组织尤其建议，旨在限制具有管理账户访问权限的人数。
- en: We need a user with **AdministratorAccess** permission for the account we plan
    to use for this recipe, which is **aws-sec-cookbook-1** in our case. I will be
    using the **awsseccbadmin1** user that we created in [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020)
    .
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要一个具有**AdministratorAccess**权限的用户来执行本食谱的操作，计划使用的是**aws-sec-cookbook-1**账户。在这里，我将使用在[*第1章*](B21384_01.xhtml#_idTextAnchor020)中创建的**awsseccbadmin1**用户。
- en: We can test the recipe using an **awsseccbuser1** user with no assignments to
    our account, **aws-sec-cookbook-1** . We may also assign the **awsseccbadmin1**
    user to another AWS account, say **awsseccb-sandbox-1** , where the user does
    not already have any assignments with this permission set, and test that assignment.
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用没有分配到我们账户**aws-sec-cookbook-1**的**awsseccbuser1**用户来测试食谱。我们还可以将**awsseccbadmin1**用户分配到另一个AWS账户，比如**awsseccb-sandbox-1**，该用户尚未与此权限集在该账户中有任何分配，并测试该分配。
- en: We need to create a customer-managed IAM policy called **MyS3ListAllBucketsPolicy**
    following the *Creating a customer-managed IAM policy from the AWS Management
    Console* section of the *Creating a customer-managed IAM policy* recipe in this
    chapter, in all the accounts where we want to do the assignment. As we are planning
    to make an assignment in the current **aws-sec-cookbook-1** account itself, we
    need to create this policy within the **aws-sec-cookbook-1** account. To make
    an assignment in the **awsseccb-sandbox2** account, we need to create this policy
    within the **awsseccb-sandbox2** account. If you are following the recipes within
    this book, we had already created this in the **awsseccb-sandbox-1** account,
    and therefore, if we plan to assign the policy to that account, we do not have
    to create it again in that account. The policy JSON is included with the code
    files as **s3-list-all-my-buckets-policy.json** .
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要在所有要进行分配的账户中，按照本章*从AWS管理控制台创建客户托管IAM策略*部分的*创建客户托管IAM策略*食谱，创建一个名为**MyS3ListAllBucketsPolicy**的客户托管IAM策略。由于我们计划在当前**aws-sec-cookbook-1**账户中进行分配，因此我们需要在**aws-sec-cookbook-1**账户内创建此策略。要在**awsseccb-sandbox2**账户中进行分配，我们需要在**awsseccb-sandbox2**账户内创建此策略。如果你正在按照本书中的食谱操作，我们已经在**awsseccb-sandbox-1**账户中创建了此策略，因此，如果我们计划将策略分配给该账户，则不需要再次创建该策略。策略的JSON文件包含在代码文件中，名为**s3-list-all-my-buckets-policy.json**。
- en: An S3 bucket following the *Technical requirements* section of this chapter.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个遵循本章*技术要求*部分的S3存储桶。
- en: To execute the CLI commands, we need to configure a CLI profile using IAM Identity
    Center called **AWSSecCBAdmin1** for the **awsseccbadmin1** user. After the customer-managed
    policy is assigned to the **awsseccbuser1** user for the same account, we will
    also need to configure a CLI profile called **AwsSecCbUser1** for that user. It
    is important to note that CLI profiles must be configured for each user on a per-account,
    per-assignment basis, and it is a good practice to include the account name as
    part of the profile name. Therefore, if you want to assign permissions for **awsseccbadmin1**
    to another account, say **awsseccb-sandbox-1** , we can create a **Sandbox1Admin1**
    profile.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要执行CLI命令，我们需要为**awsseccbadmin1**用户配置一个使用IAM身份中心的CLI配置文件，名为**AWSSecCBAdmin1**。在将客户托管策略分配给相同账户的**awsseccbuser1**用户后，我们还需要为该用户配置一个名为**AwsSecCbUser1**的CLI配置文件。需要注意的是，CLI配置文件必须按账户和分配的每个用户分别配置，最佳实践是将账户名作为配置文件的一部分。因此，如果你想将**awsseccbadmin1**的权限分配给另一个账户，比如**awsseccb-sandbox-1**，我们可以创建一个名为**Sandbox1Admin1**的配置文件。
- en: How to do it...
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何执行...
- en: Initially, we will create a permission set from the Management Console and utilize
    it for assignment. Following that, we will replicate the process using the AWS
    CLI.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，我们将从管理控制台创建一个权限集并用于分配。之后，我们将使用AWS CLI复制该过程。
- en: Customer-managed IAM policy via the AWS Management Console
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过AWS管理控制台的客户托管IAM策略
- en: 'We will first create a permission set with an existing IAM policy and then
    assign it to an AWS account using that permission set. Let us get started:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建一个使用现有IAM策略的权限集，然后将其分配到AWS账户中。让我们开始吧：
- en: Log in to **aws-sec-cookbook-1** as the **awsseccbadmin1** user and go to the
    **IAM Identity** **Center** dashboard.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**awsseccbadmin1**用户登录到**aws-sec-cookbook-1**并进入**IAM身份中心**仪表盘。
- en: Change the Region to **us-east-1** using the Region drop-down located in the
    top-right corner of the screen as we had configured the Region for IAM Identity
    Center as **us-east-1** in the *User management and SSO with IAM Identity Center*
    recipe from [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020) . If you had selected
    a different Region, select that Region instead.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用位于屏幕右上角的区域下拉菜单，将区域更改为**us-east-1**，因为我们在[*第1章*](B21384_01.xhtml#_idTextAnchor020)的*用户管理和SSO与IAM身份中心*教程中已将IAM身份中心的区域配置为**us-east-1**。如果你选择了不同的区域，请选择该区域。
- en: Important note
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The AWS Organizations service permits the use of IAM Identity Center in just
    one AWS Region at any given time. If we wish to shift the IAM Identity Center
    to a different Region after setting it up in one Region, we need to first delete
    the existing configuration in the initially chosen Region and then set it up again
    in the new Region.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Organizations服务仅允许在任意时刻在一个AWS区域中使用IAM身份中心。如果我们希望在设置完一个区域后将IAM身份中心迁移到另一个区域，我们需要先删除最初选择区域中的现有配置，然后在新区域重新设置它。
- en: Click on **Permission sets** from the left sidebar.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧边栏点击**权限集**。
- en: On the **Permission sets** page, click on **Create** **permission set** .
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**权限集**页面中，点击**创建权限集**。
- en: In the **Permission set type** page, select **Custom permission set** and click
    **Next** .
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**权限集类型**页面中，选择**自定义权限集**并点击**下一步**。
- en: In the **Specify policies and permissions boundary** page, expand **Customer
    managed policies** , and click on **Attach policies** .
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**指定策略和权限边界**页面中，展开**客户管理策略**，然后点击**附加策略**。
- en: Enter the policy name as **MyS3ListAllBucketsPolicy** . If you gave a different
    name, provide that name here.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入策略名称为**MyS3ListAllBucketsPolicy**。如果你使用了不同的名称，请在此处提供该名称。
- en: '![Figure 2.12 – Selecting customer-managed IAM policy](image/B21384_02_12.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![图2.12 – 选择客户管理的IAM策略](image/B21384_02_12.jpg)'
- en: Figure 2.12 – Selecting customer-managed IAM policy
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.12 – 选择客户管理的IAM策略
- en: Scroll down and click **Next** .
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动并点击**下一步**。
- en: In the **Specify permission set details** page, give the value of **Permission
    set name** as **MyListAllBucketsPermission** , and **Description** as **My S3
    List All Buckets Permission** , set **Session duration** as **1 hour** , leave
    values for other fields in the page empty, and click **Next** , which is located
    on the bottom-right of the page.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**指定权限集详细信息**页面中，将**权限集名称**设置为**MyListAllBucketsPermission**，**描述**设置为**我的S3列出所有桶权限**，将**会话时长**设置为**1小时**，将页面中的其他字段留空，然后点击页面右下角的**下一步**。
- en: In the **Review and create** page, review everything and click on **Create**
    . The new permission set should now appear on the **Permission** **sets** page.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**审核并创建**页面中，检查所有内容后点击**创建**。新的权限集应该会出现在**权限集**页面上。
- en: Assign the **awsseccbuser1** user (or a group that contains this user) to our
    **aws-sec-cookbook-1** AWS account. Select the **MyListAllBucketsPermission**
    permission set that we created earlier in this recipe. For detailed steps to assign
    permission sets, we can refer to the *User management and SSO with IAM Identity
    Center* recipe from [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020) .
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**awsseccbuser1**用户（或包含此用户的组）分配到我们的**aws-sec-cookbook-1** AWS账户。选择我们在本教程中早些时候创建的**MyListAllBucketsPermission**权限集。关于分配权限集的详细步骤，我们可以参考[*第1章*](B21384_01.xhtml#_idTextAnchor020)中的*用户管理和SSO与IAM身份中心*教程。
- en: To verify the assignment, log into the AWS access portal as **awsseccbuser1**
    using the AWS access portal URL of AWS Identity Center. We can get the URL from
    our **Identity Center** dashboard. It is also present in the invitation email
    sent to the user’s email when the user was created. We should now be able to see
    the **aws-sec-cookbook-1** account (or any other accounts we assigned to) after
    we log into the access portal.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了验证分配，使用AWS身份中心的AWS访问门户URL以**awsseccbuser1**身份登录。我们可以从**身份中心**仪表盘中获取该URL。该URL也包含在用户创建时发送到用户邮箱的邀请邮件中。登录访问门户后，我们现在应该能够看到**aws-sec-cookbook-1**账户（或任何其他分配给我们的账户）。
- en: Log into the **aws-sec-cookbook-1** account from the access portal and go to
    the **Amazon** **S3** service.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从访问门户登录到**aws-sec-cookbook-1**账户，进入**Amazon** **S3**服务。
- en: Click on **Buckets** from the left sidebar. We should be able to see all the
    buckets available in the account.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧边栏点击**Buckets**。我们应该能看到该账户下所有可用的桶。
- en: We will now create a permission set and assign it to the AWS account using CLI.
    However, before moving forward, we should remove the assignment we made in this
    section as we will be doing the same assignment from the AWS CLI.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将创建一个权限集并使用CLI将其分配到AWS账户。但是，在继续之前，我们应该先移除本节中做的分配，因为我们将使用AWS CLI进行相同的分配。
- en: Customer-managed IAM policy via the AWS CLI
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过AWS CLI使用客户管理的IAM策略
- en: 'In this section, we will first create a permission set and then assign a group
    that contains our user to an AWS account using that permission set. Let us get
    started:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将首先创建一个权限集，然后使用该权限集将包含我们用户的组分配到AWS账户。让我们开始吧：
- en: Configure CLI for the **awsseccbadmin1** user for the **aws-sec-cookbook-1**
    account with the **AwsSecCbAdmin** profile name, and log in using that profile
    following the *User management and SSO with IAM Identity Center* recipe from [*Chapter
    1*](B21384_01.xhtml#_idTextAnchor020) .
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为**aws-sec-cookbook-1**账户中的**awsseccbadmin1**用户配置CLI，使用**AwsSecCbAdmin**配置文件名，并按照[*第1章*](B21384_01.xhtml#_idTextAnchor020)中的*用户管理和SSO与IAM身份中心*的食谱登录。
- en: Important note
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: As we learned in [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020) , we can use
    the **aws configure sso** command, which is primarily used to set up a profile
    initially using IAM Identity Center, which provides values for **sso_start_url**
    and **sso_region** . This configuration is typically a one-time activity unless
    we need to change or update the profile’s settings. After that, we can utilize
    the **aws sso login** command each time we want to start a session and use the
    **aws sso logout** command to log out from that session.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[*第1章*](B21384_01.xhtml#_idTextAnchor020)中学到的，我们可以使用**aws configure sso**命令，该命令主要用于通过IAM身份中心初步设置配置文件，提供**sso_start_url**和**sso_region**的值。此配置通常是一次性活动，除非我们需要更改或更新配置文件的设置。之后，每次我们想开始一个会话时，可以使用**aws
    sso login**命令，使用**aws sso logout**命令注销会话。
- en: 'Create a permission set using the **create-permission-set** command:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**create-permission-set**命令创建权限集：
- en: '[PRE5]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We can get the value of **<Your-SSO-Instance-ARN>** from the **Settings** page
    within IAM Identity Center in the AWS Management Console.
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以从AWS管理控制台中IAM身份中心的**设置**页面获取**<Your-SSO-Instance-ARN>**的值。
- en: 'If the permission set is created successfully, we should get a response with
    the new permission set ARN like the following:'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果权限集创建成功，我们应该收到类似以下的新权限集ARN的响应：
- en: '![Figure 2.13 – Request and response for the create-permission-set subcommand](image/B21384_02_13.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![图2.13 – create-permission-set子命令的请求与响应](image/B21384_02_13.jpg)'
- en: Figure 2.13 – Request and response for the create-permission-set subcommand
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.13 – create-permission-set子命令的请求与响应
- en: 'Attach our customer-managed policy to the permission set using the **attach-customer-managed-policy-reference-to-permission-set**
    subcommand:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**attach-customer-managed-policy-reference-to-permission-set**子命令将我们的客户管理策略附加到权限集：
- en: '[PRE6]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: For **<Your-permission-set-ARN>** , we need to use the permission set ARN we
    received from the previous command. This command gives us no response.
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于**<Your-permission-set-ARN>**，我们需要使用从前一个命令中获得的权限集ARN。此命令不会返回任何响应。
- en: 'Assign the permission set to our AWS account and group using the **create-account-assignment**
    subcommand:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**create-account-assignment**子命令将权限集分配给我们的AWS账户和组：
- en: '[PRE7]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**<Target-Account-ID>** is the account ID of the account to which we want to
    make an assignment and **<Your-Group-ID>** is the ID of the group (not name),
    and both can be found within IAM Identity Center in the AWS Management Console.
    This command should immediately give a response with **Status** as **IN_PROGRESS**
    :'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**<Target-Account-ID>**是我们要分配权限的账户ID，**<Your-Group-ID>**是组的ID（而非名称），这两者都可以在AWS管理控制台的IAM身份中心中找到。此命令应该立即返回**Status**为**IN_PROGRESS**的响应：'
- en: '![Figure 2.14 – Response for the create-account-assignment subcommand](image/B21384_02_14.jpg)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![图2.14 – create-account-assignment子命令的响应](image/B21384_02_14.jpg)'
- en: Figure 2.14 – Response for the create-account-assignment subcommand
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.14 – create-account-assignment子命令的响应
- en: 'Verify the assignment using the **list-account-assignments** subcommand:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**list-account-assignments**子命令验证分配：
- en: '[PRE8]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This should give us a response with the assignment details:'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该给我们一个包含分配详细信息的响应：
- en: '![Figure 2.15 – Response of the list-account-assignments subcommand](image/B21384_02_15.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![图2.15 – list-account-assignments子命令的响应](image/B21384_02_15.jpg)'
- en: Figure 2.15 – Response of the list-account-assignments subcommand
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.15 – list-account-assignments子命令的响应
- en: Configure a CLI profile called **AwsSecCbUser1** for the **awsseccbuser1** user
    with a profile name of **AwsSecCbUser1** and log in using that profile following
    the *User management and SSO with IAM Identity Center* recipe from [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020)
    .
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为**awsseccbuser1**用户配置名为**AwsSecCbUser1**的CLI配置文件，并按照[*第1章*](B21384_01.xhtml#_idTextAnchor020)中的*用户管理与SSO结合IAM身份中心*食谱使用该配置文件登录。
- en: 'Next, verify access by running the **aws s3** **ls** command:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过运行**aws s3** **ls**命令验证访问：
- en: '[PRE9]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This should list all the S3 buckets that **awsseccb_user1** has permissions
    to view, in line with **MyS3ListAllBucketsPolicy** :'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该列出**awsseccb_user1**有权限查看的所有S3桶，符合**MyS3ListAllBucketsPolicy**的要求：
- en: '![Figure 2.16 – List all buckets after successful login](image/B21384_02_16.jpg)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![图2.16 – 登录成功后列出所有桶](image/B21384_02_16.jpg)'
- en: Figure 2.16 – List all buckets after successful login
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.16 – 登录成功后列出所有桶
- en: We completed the recipe from the management account of our AWS organization.
    We may also do this from a member account designated as a delegated administrator.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从AWS组织的管理账户完成了该食谱。我们也可以从指定为委托管理员的成员账户中进行操作。
- en: How it works...
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we learned to create permission sets based on a customer-managed
    policy that we had already created in the *Creating a customer-managed IAM policy*
    recipe from this chapter. In [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020) ,
    we delved into the AWS IAM Identity Center service and explored creating permission
    sets based on an AWS-managed policy.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们学习了如何基于我们已经在*创建客户托管IAM策略*食谱中创建的客户托管策略来创建权限集。在[*第1章*](B21384_01.xhtml#_idTextAnchor020)中，我们深入研究了AWS
    IAM身份中心服务，并探索了基于AWS托管策略创建权限集的过程。
- en: We set **Region** as **us-east-1** , the same Region we configured when IAM
    Identity Center was created. The AWS Organizations service permits the use of
    IAM Identity Center in just one AWS Region at any given time. If we wish to shift
    IAM Identity Center to a different Region after setting it up in one, we need
    to first delete its existing configuration in the initially chosen Region.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将**Region**设置为**us-east-1**，这是我们在创建IAM身份中心时配置的相同区域。AWS Organizations服务允许在任何给定时间仅在一个AWS区域内使用IAM身份中心。如果我们希望在设置后将IAM身份中心迁移到其他区域，则需要首先删除最初选择的区域中的现有配置。
- en: In the AWS Management Console, we attached the customer-managed policy to the
    permission set during the permission set creation by specifying the name of the
    policy. In the command line, it was a two-step process. First, we created the
    permission set and then attached the customer-managed policy to the permission
    set. A policy with an identical name needs to be available in the member account
    where this permission set is assigned. The permission set can be created from
    the management account, or a member account designated as the IAM Identity Center
    delegated administrator. The customer-managed policy must reside in the member
    account receiving the permission set, not in the management or administrator account.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS管理控制台中，我们在创建权限集时通过指定策略名称将客户托管策略附加到权限集。在命令行中，这是一项两步过程。首先，我们创建了权限集，然后将客户托管策略附加到权限集中。一个具有相同名称的策略需要在分配该权限集的成员账户中可用。可以从管理账户或指定为IAM身份中心委托管理员的成员账户创建权限集。客户托管策略必须位于接收权限集的成员账户中，而不是管理或管理员账户中。
- en: 'In the command line section of the recipe, we used two AWS CLI v2 command namespaces
    related to IAM Identity Center: **sso-admin** and **sso** . We first used the
    **aws configure sso** command to configure a CLI profile with values such as **sso_start_url**
    and **sso_region** . This configuration is typically a one-time activity unless
    you need to change or update the profile’s settings. After that, we used the **aws
    sso login** command, which we can use every time we want to log in.'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在食谱的命令行部分，我们使用了两个与IAM身份中心相关的AWS CLI v2命令命名空间：**sso-admin**和**sso**。我们首先使用**aws
    configure sso**命令配置了一个CLI配置文件，其中包含**sso_start_url**和**sso_region**等值。除非需要更改或更新配置文件的设置，否则此配置通常是一次性活动。之后，我们使用了**aws
    sso login**命令，每次想要登录时都可以使用该命令。
- en: The commands in the **sso-admin** namespace help administrators manage the IAM
    Identity Center settings, such as assigning user groups to AWS accounts with specific
    permission sets or listing IAM Identity Center instances. On the other hand, the
    commands in the **sso** namespace are designed for the end-user experience such
    as logging in and out of IAM Identity Center-enabled AWS accounts. The **sso**
    namespace commands authenticate through IAM Identity Center, making use of temporary
    AWS credentials without the need to enter the username and password again, thus
    making access to AWS services more secure by eliminating the need for managing
    multiple credentials.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '**sso-admin**命名空间中的命令帮助管理员管理IAM身份中心设置，如将用户组分配到具有特定权限集的AWS账户，或列出IAM身份中心实例。另一方面，**sso**命名空间中的命令旨在提供最终用户体验，如登录和退出启用了IAM身份中心的AWS账户。**sso**命名空间的命令通过IAM身份中心进行身份验证，使用临时AWS凭证，无需再次输入用户名和密码，从而通过消除管理多个凭证的需要，提高访问AWS服务的安全性。'
- en: There’s more...
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Although the AWS SSO service has been rebranded as AWS IAM Identity Center in
    the AWS Management Console, the CLI namespaces such as **sso-admin** and **aws
    sso** remain unchanged to maintain backward compatibility.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管AWS SSO服务在AWS管理控制台中已经更名为AWS IAM身份中心，但CLI命名空间如**sso-admin**和**aws sso**保持不变，以确保向后兼容。
- en: See also
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: We can find more details about the **sso-admin** namespace and its commands
    at [https://awscli.amazonaws.com/v2/documentation/api/latest/reference/sso-admin/index.html](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/sso-admin/index.html)
    .
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在[https://awscli.amazonaws.com/v2/documentation/api/latest/reference/sso-admin/index.html](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/sso-admin/index.html)找到有关**sso-admin**命名空间及其命令的更多详细信息。
- en: We can find more details about the **sso** namespace and its commands at [https://awscli.amazonaws.com/v2/documentation/api/latest/reference/sso/index.html](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/sso/index.html)
    .
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在[https://awscli.amazonaws.com/v2/documentation/api/latest/reference/sso/index.html](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/sso/index.html)找到有关**sso**命名空间及其命令的更多详细信息。
- en: Setting IAM permission boundaries for IAM entities
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为IAM实体设置IAM权限边界
- en: This recipe demonstrates how to use **permissions boundaries** to set a maximum
    permission limit for an IAM entity such as an IAM user or an IAM role. Initially,
    we will assign a user complete access to S3. Subsequently, we’ll apply a permission
    boundary to confine the user’s S3 permissions exclusively to read-only access.
    Similar to SCPs, permission boundaries do not grant permissions; they only define
    constraints. In other words, without an identity-based, resource-based, or session
    policy in place, actions permitted within the permission boundary or SCP cannot
    be executed.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程展示了如何使用**权限边界**为IAM实体（如IAM用户或IAM角色）设置最大权限限制。最初，我们将为一个用户赋予S3的完全访问权限。随后，我们会应用一个权限边界，将该用户的S3权限限制为仅具有只读访问权限。与SCPs类似，权限边界并不授予权限；它们只是定义了约束。换句话说，如果没有基于身份、基于资源或会话策略的配合，在权限边界或SCP允许的范围内的操作将无法执行。
- en: Getting ready
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We need the following to successfully complete this recipe:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 为了成功完成本教程，我们需要以下内容：
- en: A working AWS account, **awsseccb-sandbox-1** , and a user with **AdministratorAccess**
    permission to that account, **awsseccbadmin1** , following the *Technical requirements*
    section of this chapter.
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有效的AWS账户，**awsseccb-sandbox-1**，以及具有该账户**AdministratorAccess**权限的用户，**awsseccbadmin1**，按照本章节中的*技术要求*部分。
- en: An IAM user, **awsseccb_iam_user1** , with **AmazonS3FullAccess** permission
    to the account, **awsseccb-sandbox-1** .
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个IAM用户，**awsseccb_iam_user1**，该用户对账户**awsseccb-sandbox-1**具有**AmazonS3FullAccess**权限。
- en: Understand how to create an Amazon S3 bucket.
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解如何创建一个Amazon S3桶。
- en: How to do it...
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can create a permission set as follows:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按如下方式创建一个权限集：
- en: Log into the AWS Management Console of **awsseccb-sandbox-1** as **awsseccbadmin1**
    and go to the **IAM** dashboard.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以**awsseccbadmin1**身份登录到**awsseccb-sandbox-1**的AWS管理控制台，然后进入**IAM**仪表板。
- en: Click on **Users** in the left sidebar and click on the name of the user to
    use for this recipe, which is **awsseccb_iam_user1** in our case.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧边栏点击**用户**，然后点击本教程中将要使用的用户名称，在我们的例子中是**awsseccb_iam_user1**。
- en: Scroll down to the **Permissions boundary** section and click on **Set** **permissions
    boundary** .
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动到**权限边界**部分，点击**设置** **权限边界**。
- en: '![Figure 2.17 – Set permission boundary](image/B21384_02_17.jpg)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.17 – 设置权限边界](image/B21384_02_17.jpg)'
- en: Figure 2.17 – Set permission boundary
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.17 – 设置权限边界
- en: Search for **AmazonS3ReadOnlyAcesss** , select it, and click on **Set boundary**
    .
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索**AmazonS3ReadOnlyAccess**，选择它，然后点击**Set boundary**。
- en: Log into the AWS Management Console of our account as the **awsseccb_iam_user1**
    user, go to the S3 service dashboard, and try to create a bucket with the default
    configuration. We should get an error message such as the following even if the
    user has **AmazonS3FullPermission** .
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**awsseccb_iam_user1**用户登录到我们的AWS管理控制台，进入S3服务仪表板，并尝试以默认配置创建一个存储桶。即使用户具有**AmazonS3FullPermission**，我们仍然会收到类似下面的错误信息。
- en: '![Figure 2.18 – Failed to create bucket](image/B21384_02_18.jpg)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.18 – 创建存储桶失败](image/B21384_02_18.jpg)'
- en: Figure 2.18 – Failed to create bucket
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.18 – 创建存储桶失败
- en: Log in to the account as **awsseccbadmin1** , go to the **awsseccb_iam_user1**
    **Permissions boundary** section, and click on **Remove boundary** , as shown
    in the following figure. In the confirmation dialog popup, click on **Remove boundary**
    .
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**awsseccbadmin1**用户登录到账户，进入**awsseccb_iam_user1**的**Permissions boundary**部分，并点击**Remove
    boundary**，如下面的图所示。在确认对话框弹出时，点击**Remove boundary**。
- en: '![Figure 2.19 – Remove permissions boundary](image/B21384_02_19.jpg)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.19 – 移除权限边界](image/B21384_02_19.jpg)'
- en: Figure 2.19 – Remove permissions boundary
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.19 – 移除权限边界
- en: Log in to the AWS Management Console of our account as the **awsseccb_iam_user1**
    user, go to the S3 service dashboard, and try to create a bucket with the default
    configuration. We should be able to successfully create the bucket now.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**awsseccb_iam_user1**用户登录到我们的AWS管理控制台，进入S3服务仪表板，并尝试以默认配置创建一个存储桶。现在我们应该能够成功创建存储桶。
- en: Log in to the Management Console as **awsseccbadmin1** , go to the **IAM** dashboard,
    and remove all existing permissions, directly assigned, or inherited. For inherited
    permissions from groups, this can be done by removing the user from all groups
    from the **User groups membership** section under the **Groups** tab. From the
    **Users** pane, click on the name of our **awsseccb_iam_user1** user, and go to
    the **Groups** tab. Directly assigned permissions can be removed from the **Permissions**
    tab. Verify that no permissions policies are attached to the user in the **Permissions**
    tab.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**awsseccbadmin1**用户登录到管理控制台，进入**IAM**仪表板，并移除所有现有权限，无论是直接分配的还是继承的。对于从组继承的权限，可以通过在**Groups**选项卡下的**User
    groups membership**部分中将用户从所有组中移除来实现。从**Users**窗格中，点击**awsseccb_iam_user1**用户的名称，并进入**Groups**选项卡。直接分配的权限可以从**Permissions**选项卡中移除。确认在**Permissions**选项卡中没有附加任何权限策略。
- en: Go to the **Permissions boundary** section and click on **Set permissions boundary**
    , search for **AmazonS3FullAccess** , select it, and click on **Set boundary**
    .
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入**Permissions boundary**部分，点击**Set permissions boundary**，搜索**AmazonS3FullAccess**，选择它，然后点击**Set
    boundary**。
- en: Log into the AWS Management Console of our account as the **awsseccb_iam_user1**
    user, go to the S3 service dashboard, and try to create a bucket with the default
    configuration. We should get an error message like the one we got in *Step 5*
    . This demonstrates that even if we allow permissions within the permission set,
    without an identity-based, resource-based, or session policy in place, actions
    permitted within the permission boundary are not allowed.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**awsseccb_iam_user1**用户登录到我们的AWS管理控制台，进入S3服务仪表板，并尝试以默认配置创建一个存储桶。我们应该会收到类似于*步骤5*中的错误信息。这表明即使我们在权限集内允许了权限，如果没有身份基础、资源基础或会话策略的支持，在权限边界内允许的操作也无法执行。
- en: You may remove the permissions boundary before proceeding with further recipes.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续后续操作之前，您可以移除权限边界。
- en: How it works...
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In AWS IAM, permission boundaries serve as a control mechanism to set the maximum
    permissions a user or group can have, regardless of any policies directly attached
    to them. By attaching a permission boundary to a user, we define the upper limit
    of their permissions. In the scenario described, the demo user initially inherits
    full S3 access permissions. However, when a permission boundary policy, such as
    **AmazonS3ReadOnlyAccess** , is applied to the user, it restricts their S3 permissions
    to read-only access. When permission boundaries, SCPs, and identity-based policies
    are concurrently applied, an action is authorized only if it is explicitly allowed
    by all three components. In situations where only SCPs and a permissions boundary
    are in place without any identity-based or resource-based policies authorizing
    an action, the default outcome is denial.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS IAM中，权限边界作为一种控制机制，用于设置用户或组可以拥有的最大权限，无论是否附加了任何直接的策略。通过将权限边界附加到用户，我们定义了其权限的上限。在所述场景中，演示用户最初继承了完全的S3访问权限。然而，当将权限边界策略，如**AmazonS3ReadOnlyAccess**，应用到该用户时，它将限制其S3权限为只读访问。当权限边界、SCP和基于身份的策略同时应用时，只有当所有三个组件都明确允许该操作时，操作才会被授权。在仅存在SCP和权限边界的情况下，如果没有任何基于身份或基于资源的策略授权该操作，默认结果是拒绝。
- en: There’s more...
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In situations where only SCPs and a permissions boundary are in place without
    any identity-based or resource-based policies authorizing an action, the default
    outcome is denial.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在仅存在SCP和权限边界的情况下，如果没有任何基于身份或基于资源的策略授权该操作，默认结果是拒绝。
- en: See also
  id: totrans-302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: We can read more about permissions boundaries for IAM entities at [https://www.cloudericks.com/blog/getting-started-with-permissions-boundaries-in-aws](https://www.cloudericks.com/blog/getting-started-with-permissions-boundaries-in-aws)
    .
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在[https://www.cloudericks.com/blog/getting-started-with-permissions-boundaries-in-aws](https://www.cloudericks.com/blog/getting-started-with-permissions-boundaries-in-aws)
    阅读有关IAM实体权限边界的更多信息。
- en: Centralizing governance in AWS Organizations with SCPs
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SCP在AWS Organizations中集中治理
- en: '**SCPs** in AWS allow us to manage permissions across an entire AWS organization,
    **organizational units** ( **OUs** ), or even individual accounts. SCPs fulfill
    the crucial need for centralized governance by allowing administrators to implement
    consistent compliance and security policies efficiently across multiple AWS accounts.
    By utilizing SCPs, organizations can enhance their security posture, manage risks
    more effectively, and ensure adherence to both internal policies and external
    regulatory requirements through a centralized policy management framework. In
    this recipe, we will use an SCP to restrict the creation of Amazon S3 buckets
    within a specific Region.'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: AWS中的**SCPs**允许我们在整个AWS组织、**组织单元**（**OUs**）或甚至单个账户中管理权限。SCPs通过允许管理员高效地在多个AWS账户中实施一致的合规性和安全策略，满足了集中治理的关键需求。通过使用SCP，组织可以提升其安全态势，更有效地管理风险，并确保通过集中化的策略管理框架遵守内部政策和外部监管要求。在本教程中，我们将使用SCP限制在特定区域内创建Amazon
    S3存储桶。
- en: Getting ready
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We need a working AWS account with AWS Organizations service enabled. I will
    be using the **aws-sec-cookbook-1** account that we created in [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020)
    .
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个已启用AWS Organizations服务的有效AWS账户。我将使用我们在[*第一章*](B21384_01.xhtml#_idTextAnchor020)中创建的**aws-sec-cookbook-1**账户。
- en: How to do it...
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can explore SCPs as follows:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按如下方式探索SCP：
- en: Log in to the AWS Management Console and navigate to the **AWS** **Organizations**
    service.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到AWS管理控制台并导航到**AWS Organizations**服务。
- en: Click on **Policies** in the left sidebar.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧边栏中点击**策略**。
- en: '![Figure 2.20 – Policies dashboard](image/B21384_02_20.jpg)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![图2.20 – 策略仪表板](image/B21384_02_20.jpg)'
- en: Figure 2.20 – Policies dashboard
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.20 – 策略仪表板
- en: Click on the **Service control policies** . If we are using SCPs for the first
    time, then click on **Enable service control policies** . In the **Service control
    policies** pane, we can see that a policy called **FullAWSAccess** is already
    present.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**服务控制策略**。如果我们是第一次使用SCP，请点击**启用服务控制策略**。在**服务控制策略**窗格中，我们可以看到一个名为**FullAWSAccess**的策略已经存在。
- en: In the **Service control policies** pane, click on **Create policy** .
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**服务控制策略**窗格中，点击**创建策略**。
- en: Enter **SandboxS3BucketCreate** for the **Policy name** field and optionally
    enter **Sandbox S3 Bucket Create Policy** for the **Policy description -** **optional**
    field.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**策略名称**字段中输入**SandboxS3BucketCreate**，并可选地在**策略描述 - **可选**字段中输入**Sandbox S3
    Bucket Create Policy**。
- en: Paste the given policy in the policy section and then scroll down and click
    on **Create policy** . The policy allows S3 bucket creation in any Region except
    **us-east-1** .
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将给定的策略粘贴到策略部分，然后向下滚动并点击**创建策略**。该策略允许在除**us-east-1**以外的任何区域创建S3存储桶。
- en: '[PRE10]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the **Service control policies** pane, select the policy we created, click
    on the **Actions** dropdown, and then click on **Attach policy** .
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**服务控制策略**面板中，选择我们创建的策略，点击**操作**下拉菜单，然后点击**附加策略**。
- en: Select the OU or account to which we want to attach the policy and then click
    on **Attach policy** . I have selected the **awsseccb-sandbox-1** account that
    I created in [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020) . We can select multiple
    OUs and accounts as needed.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们要附加策略的组织单位（OU）或账户，然后点击**附加策略**。我选择了在[*第 1 章*](B21384_01.xhtml#_idTextAnchor020)中创建的**awsseccb-sandbox-1**账户。我们可以根据需要选择多个OU和账户。
- en: Log in to the account we attached the policy to, which is **awsseccb-sandbox-1**
    in my case, as a user with **AdministratorAccess** permission, and try to create
    an S3 bucket in the **us-east-1** Region. We should get an error message that
    we do not have the required permission.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到我们附加策略的账户，举例来说是**awsseccb-sandbox-1**，作为一个具有**AdministratorAccess**权限的用户，并尝试在**us-east-1**区域创建一个S3存储桶。我们应该会收到一条错误信息，表示我们没有所需的权限。
- en: '![Figure 2.21 – Insufficient permissions error](image/B21384_02_21.jpg)'
  id: totrans-322
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.21 – 权限不足错误](image/B21384_02_21.jpg)'
- en: Figure 2.21 – Insufficient permissions error
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.21 – 权限不足错误
- en: Create an S3 bucket in another Region, for instance, **us-east-** 2, and it
    should be successful.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个区域创建一个S3存储桶，例如**us-east-2**，应该会成功。
- en: To detach the policy, we can log in to the management account, navigate to the
    service control policy we created, go to the **Targets** tab, select the account,
    and click on **Detach** .
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要分离策略，我们可以登录到管理账户，导航到我们创建的服务控制策略，进入**目标**选项卡，选择账户，然后点击**分离**。
- en: '![Figure 2.22 – The Targets tab to detach policy from the account](image/B21384_02_22.jpg)'
  id: totrans-326
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.22 – 用于从账户中分离策略的目标选项卡](image/B21384_02_22.jpg)'
- en: Figure 2.22 – The Targets tab to detach policy from the account
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.22 – 用于从账户中分离策略的目标选项卡
- en: Once you detach the policy, navigate back to our test account, **awsseccb-sandbox-1**
    in my case, and try to create an S3 bucket in the **us-east-1** Region. This time
    we should be able to create the bucket.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您分离了策略，返回到我们的测试账户，举例来说是**awsseccb-sandbox-1**，并尝试在**us-east-1**区域创建一个S3存储桶。这一次我们应该能够创建存储桶。
- en: How it works...
  id: totrans-329
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: We used an SCP to restrict S3 bucket creation in a specific Region by defining
    a **Deny** statement within the SCP targeting the action of creating S3 buckets
    ( **s3:CreateBucket** ) and associating it with a condition that checks whether
    the requested Region is the one to be restricted (e.g., **us-east-1** ). This
    approach ensures centralized control and governance over S3 bucket deployments,
    enabling organizations to enforce regional compliance standards, enhance security
    posture, and optimize resource utilization within their AWS environment.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了一个SCP，通过在SCP中定义一个**Deny**语句来限制在特定区域创建S3存储桶，目标是创建S3存储桶的操作（**s3:CreateBucket**），并将其与一个检查请求区域是否是要限制的区域（例如，**us-east-1**）的条件相关联。这种方法确保了对S3存储桶部署的集中控制和治理，使组织能够执行区域合规标准，增强安全态势，并优化其AWS环境中的资源利用。
- en: SCPs are disabled by default, but we can enable them. SCPs, if enabled, need
    to explicitly allow services and actions that are allowed. When we enable SCPs,
    AWS attaches an SCP called **FullAWSAccess** to all accounts and OUs within that
    organization. This SCP allows every action and service. We can then create additional
    SCPs to deny services or actions and **Deny** always takes precedence. This is
    the default strategy. With this strategy, we do not have to do anything when new
    services or actions are introduced by AWS as they are allowed by the **FullAWSAccess**
    SCP.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，SCPs是禁用的，但我们可以启用它们。如果启用SCPs，它们需要明确允许允许的服务和操作。当我们启用SCPs时，AWS会将一个名为**FullAWSAccess**的SCP附加到该组织内的所有账户和组织单位（OU）。这个SCP允许所有操作和服务。我们可以随后创建额外的SCPs来拒绝某些服务或操作，且**Deny**始终优先。这是默认策略。在此策略下，当AWS引入新服务或操作时，我们无需做任何操作，因为它们已经被**FullAWSAccess**
    SCP允许。
- en: We may also replace the **FullAWSAccess** SCP with another SCP that allows only
    a specific set of services and features. If we do this, we must explicitly add
    any new services or actions that AWS introduces later to this SCP. However, if
    we follow the strategy discussed in the previous point, which is having the **FullAWSAccess**
    SCP and adding another SCP with the list of services and actions to deny, we do
    not have to do anything when new services or actions are introduced by AWS.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以用另一个只允许特定服务和功能的 SCP 替换 **FullAWSAccess** SCP。如果这样做，我们必须显式地将 AWS 后续引入的任何新服务或操作添加到该
    SCP 中。然而，如果我们遵循前面提到的策略，即保留 **FullAWSAccess** SCP，并添加另一个包含服务和操作拒绝列表的 SCP，当 AWS
    引入新服务或操作时，我们无需做任何操作。
- en: If SCPs are enabled, every account, root OU, and other OUs need to have at least
    one SCP attached. Therefore, if we need to replace the **FullAWSAccess** SCP with
    another, we need to first create and attach another SCP, and then detach the **FullAWSAccess**
    SCP.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启用了 SCP，每个账户、根 OU 和其他 OU 都需要至少附加一个 SCP。因此，如果我们需要用另一个 SCP 替换 **FullAWSAccess**
    SCP，首先需要创建并附加另一个 SCP，然后再卸载 **FullAWSAccess** SCP。
- en: There’s more...
  id: totrans-334
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: SCPs, similar to permission boundaries in IAM, define the maximum permissions
    an entity may hold but do not grant permissions on their own. Therefore, when
    permission boundaries, SCPs, and identity-based policies are concurrently applied,
    an action is authorized only if it’s explicitly allowed by all three components.
    Additionally, in situations where only SCPs and a permissions boundary are in
    place without any identity-based or resource-based policies authorizing an action,
    the default outcome is denial. This underlines the principle that permissions
    must be explicitly granted, and in the absence of such explicit permissions, access
    is not permitted. We discussed policy types earlier in this chapter.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: SCPs 类似于 IAM 中的权限边界，定义了实体可能拥有的最大权限，但本身并不授予权限。因此，当权限边界、SCP 和基于身份的策略同时应用时，只有在所有三个组件都显式允许的情况下，某个操作才会被授权。此外，在只有
    SCP 和权限边界而没有任何基于身份或资源的策略授权操作的情况下，默认结果是拒绝。这强调了权限必须显式授予的原则，缺乏明确的权限时，访问将不被允许。我们在本章前面已经讨论过策略类型。
- en: See also
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'We can read more about service control policy examples here: [https://www.cloudericks.com/blog/understanding-aws-scps-and-the-deny-list-and-allow-list-strategies](https://www.cloudericks.com/blog/understanding-aws-scps-and-the-deny-list-and-allow-list-strategies)
    .'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在这里阅读更多关于服务控制策略的示例：[https://www.cloudericks.com/blog/understanding-aws-scps-and-the-deny-list-and-allow-list-strategies](https://www.cloudericks.com/blog/understanding-aws-scps-and-the-deny-list-and-allow-list-strategies)。
- en: IAM cross-account role switching and identity account architecture
  id: totrans-338
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IAM 跨账户角色切换和身份账户架构
- en: Many organizations use multiple AWS accounts to distinctly manage different
    operational environments, such as development, testing, and production. Users
    with varied job roles may need diverse access privileges across these environments.
    However, the task of managing multiple IAM users, each having different access
    credentials across various AWS accounts, can be complex and time consuming.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 许多组织使用多个 AWS 账户来分别管理不同的操作环境，如开发、测试和生产。具有不同岗位职责的用户可能需要在这些环境中具有不同的访问权限。然而，管理多个
    IAM 用户，每个用户在各个 AWS 账户中拥有不同的访问凭证，可能是复杂且耗时的任务。
- en: A role in AWS IAM grants a specific set of permissions, much like a user account.
    Unlike users, we do not directly log in to roles; instead, we can switch to a
    role either in our own account or another AWS account. This replaces our original
    permissions with the role’s permissions. Based on how the role switch happens,
    two primary strategies are often utilized to streamline user access management
    across multiple AWS accounts, negating the need for individual IAM users and access
    credentials for each account.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: AWS IAM 中的角色授予一组特定的权限，类似于用户账户。与用户不同，我们不会直接登录角色；相反，我们可以切换到自己账户中的角色或其他 AWS 账户中的角色。这会用角色的权限替代我们原有的权限。根据角色切换的方式，通常采用两种主要策略来简化跨多个
    AWS 账户的用户访问管理，避免每个账户都需要单独的 IAM 用户和访问凭证。
- en: The first approach for role switching involves SSO, where users authenticate
    via a central access portal and are granted access to multiple accounts, each
    with distinct roles and permissions. In this model, the role switching happens
    automatically. The second approach for role switching leverages the identity account
    architecture where users log in to an identity or central account and use the
    AWS switch role feature to access resources across various accounts, each assigned
    specific roles and permissions.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种角色切换方式是通过 SSO（单点登录），用户通过中央访问门户进行身份验证，并获得对多个账户的访问权限，每个账户具有不同的角色和权限。在这种模式下，角色切换是自动进行的。第二种角色切换方式则利用身份账户架构，用户登录到身份账户或中央账户，并使用
    AWS 的角色切换功能访问多个账户的资源，每个账户分配了特定的角色和权限。
- en: After AWS rebranded AWS SSO as IAM Identity Center, AWS recommends using the
    IAM Identity Center service as a best practice over using IAM directly. Therefore,
    the first approach using SSO with IAM Identity Center is preferred today for managing
    multiple accounts. However, many, especially smaller, organizations, who do not
    want the overhead of maintaining the AWS Organizations service, still use the
    switch role feature extensively. We can use the switch role feature in conjunction
    with IAM Identity Center, and this compatibility facilitates a seamless shift
    from the traditional approach of using IAM users with the identity account architecture
    to employing IAM Identity Center.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AWS 将 AWS SSO 更名为 IAM 身份中心后，AWS 推荐使用 IAM 身份中心服务作为最佳实践，而不是直接使用 IAM。因此，今天管理多个账户时，首选的方法是使用带有
    IAM 身份中心的 SSO。然而，许多，特别是小型组织，不希望维护 AWS Organizations 服务的开销，仍然广泛使用角色切换功能。我们可以将角色切换功能与
    IAM 身份中心结合使用，这种兼容性促进了从传统的使用 IAM 用户和身份账户架构的方式到使用 IAM 身份中心的平滑过渡。
- en: In this recipe, we will learn to implement the second approach that uses the
    identity account architecture, making use of the switch role feature that will
    allow the switching of roles from a source account to a destination account. The
    first approach of using IAM Identity Center (previously known as AWS SSO) was
    explored in the recipes in [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020) and
    the earlier recipes in this chapter.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习实施第二种方法，即使用身份账户架构，利用角色切换功能将角色从源账户切换到目标账户。使用 IAM 身份中心（以前称为 AWS SSO）的第一种方法已在[《第1章》](B21384_01.xhtml#_idTextAnchor020)的食谱中以及本章早期的食谱中进行了探讨。
- en: Important note
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Switching roles can be performed by an IAM user, a user in the IAM Identity
    Center, a SAML-federated role, or even a web-identity federated role. However,
    switching roles is not permissible for the AWS account root user.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 角色切换可以由 IAM 用户、IAM 身份中心中的用户、SAML 联邦角色甚至 Web 身份联邦角色执行。但是，AWS 账户的根用户不能进行角色切换。
- en: In AWS Organizations, an all-access role featuring a trust policy is automatically
    established in member accounts. This role facilitates the management account in
    switching roles to any member account created within AWS Organizations. Therefore,
    administrators intending to switch roles between a management and a member account
    in AWS Organizations can skip the setting up sections in this recipe. They can
    directly proceed to the sections on switching roles, utilizing the role configured
    during the AWS Organizations setup, as demonstrated in the *Multi-account management
    with AWS Organizations* recipe from [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020)
    .
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AWS Organizations 中，所有成员账户会自动创建一个带有信任策略的全访问角色。该角色可以帮助管理账户切换角色到 AWS Organizations
    中创建的任何成员账户。因此，计划在 AWS Organizations 中在管理账户和成员账户之间切换角色的管理员可以跳过本食谱中的设置部分，直接进入角色切换的部分，利用在
    AWS Organizations 设置过程中配置的角色，正如在[《第1章》](B21384_01.xhtml#_idTextAnchor020)中《使用
    AWS Organizations 管理多个账户》食谱中所展示的那样。
- en: Getting ready
  id: totrans-347
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We need the following to successfully complete this recipe:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 为了成功完成本食谱，我们需要以下内容：
- en: Two AWS accounts, one as the source account and the other as the destination
    account. These could be standalone accounts or ones that are part of an AWS organization.
    We can use the two member accounts we created in the *Multi-account management
    with AWS Organizations* recipe from [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020)
    , namely, **awsseccb-sandbox-1** as the source account and **awsseccb-sandbox-2**
    as the destination account.
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个 AWS 账户，一个作为源账户，另一个作为目标账户。这些可以是独立账户，也可以是 AWS 组织中的账户。我们可以使用在[*第1章*](B21384_01.xhtml#_idTextAnchor020)中的**多账户管理与
    AWS 组织**示例中创建的两个成员账户，即 **awsseccb-sandbox-1** 作为源账户，**awsseccb-sandbox-2** 作为目标账户。
- en: A user with administrative permissions is required in both the source and destination
    accounts to create roles and policies. Using IAM Identity Center, we can create
    a single user, **awsseccbadmin1** , and grant it **AdministratorAccess** permission
    to both accounts. If opting for traditional IAM, a separate user must be created
    in each account with this permission.
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在源账户和目标账户中都需要一个具有管理员权限的用户来创建角色和策略。使用 IAM 身份中心，我们可以创建一个单一用户，**awsseccbadmin1**，并授予其两个账户的**管理员访问**权限。如果选择传统的
    IAM，则必须在每个账户中单独创建一个具有该权限的用户。
- en: An IAM user named **awsseccb_iam_user1** in the source account, **awsseccb-sandbox-1**
    in our case, with no permission or with the **IAMUserChangePassword** permission
    if you selected the **Users must create a new password at next sign-in - Recommended**
    option. We could also use IAM Identity Center. However, using IAM Identity Center
    may be considered redundant here as we can use the access portal with IAM Identity
    Center to log into multiple AWS accounts without the need to use the account switching
    functionality. Nevertheless, we can do that and to understand the concepts better,
    you may try that option as well.
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在源账户（例如我们的 **awsseccb-sandbox-1**）中，创建一个名为 **awsseccb_iam_user1** 的 IAM 用户，该用户没有权限或具有
    **IAMUserChangePassword** 权限（如果您选择了**用户必须在下次登录时创建新密码 - 推荐**选项）。我们也可以使用 IAM 身份中心。然而，在这里使用
    IAM 身份中心可能显得有些多余，因为我们可以使用 IAM 身份中心的访问门户登录多个 AWS 账户，而无需使用账户切换功能。不过，我们仍然可以这样做，为了更好地理解这些概念，您也可以尝试该选项。
- en: An S3 bucket following the *Technical requirements* section of this chapter.
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个符合本章*技术要求*部分的 S3 存储桶。
- en: To execute the steps in sections related to the AWS CLI, we need to set up two
    AWS CLI profiles for the **awsseccbadmin1** admin user. First, **AWSSecCBAdmin1D**
    for the destination account and second, **AWSSecCBAdmin1S** for the source account.
    Additionally, we need a profile named **AWSSecCBUser1S** for the **awsseccbuser1**
    user in the source account. With regular IAM, users need AWS CLI profiles per
    user per account. With IAM Identity Center, users need AWS CLI profile per user
    per role ( **PermissionSet** ) per account.
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要执行与 AWS CLI 相关的步骤，我们需要为 **awsseccbadmin1** 管理员用户设置两个 AWS CLI 配置文件。首先，**AWSSecCBAdmin1D**
    用于目标账户，其次，**AWSSecCBAdmin1S** 用于源账户。此外，我们还需要一个名为 **AWSSecCBUser1S** 的配置文件，用于源账户中的
    **awsseccbuser1** 用户。使用常规 IAM 时，每个用户每个账户都需要 AWS CLI 配置文件。使用 IAM 身份中心时，每个用户每个角色（**PermissionSet**）每个账户都需要一个
    AWS CLI 配置文件。
- en: How to do it...
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: To switch roles, the destination account must have an assignable role with a
    trust policy that enables the source account to assume this role. Additionally,
    the source account needs a policy that authorizes this switch. We will first configure
    the destination and the source account from the AWS Management Console. We will
    also achieve this using the AWS CLI.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 要切换角色，目标账户必须具有可分配的角色和信任策略，使得源账户可以承担该角色。此外，源账户还需要一个授权该切换的策略。我们将首先通过 AWS 管理控制台配置目标账户和源账户。我们也可以使用
    AWS CLI 实现这一点。
- en: Setting up a destination account via AWS Management Console
  id: totrans-356
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过 AWS 管理控制台设置目标账户
- en: 'In the destination account, we need a role along with a trust policy that allows
    the source account to assume this role. We will create a role with an existing
    permissions policy and specify the source account ID for the trust relationship.
    Let us get started:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 在目标账户中，我们需要一个角色以及一个信任策略，允许源账户承担此角色。我们将创建一个带有现有权限策略的角色，并为信任关系指定源账户的账户 ID。让我们开始：
- en: Log into the AWS Management Console of the destination account, say **awsseccb-sandbox-2**
    , as the **awsseccbadmin1** admin user.
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以管理员用户 **awsseccbadmin1** 登录目标账户的 AWS 管理控制台，例如 **awsseccb-sandbox-2**。
- en: Go to the **IAM** dashboard.
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入**IAM**仪表板。
- en: Click on **Roles** from the left sidebar.
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧边栏点击**角色**。
- en: Click on **Create role** .
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建角色**。
- en: In the **Select trusted entity** page, under **Trusted entity type** , select
    **AWS account** as shown in the following figure.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Select trusted entity** 页面中，在 **Trusted entity type** 下，选择 **AWS account**，如下面的图所示。
- en: '![Figure 2.23 – Selecting trusted entity type for a role](image/B21384_02_23.jpg)'
  id: totrans-363
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.23 – 为角色选择受信任的实体类型](image/B21384_02_23.jpg)'
- en: Figure 2.23 – Selecting trusted entity type for a role
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.23 – 为角色选择受信任的实体类型
- en: Scroll down, select **Another AWS Account** , enter the 12-digit **Account ID**
    of the source account (in my case, it will be the ID of the **awsseccb-sandbox-1**
    account), and click **Next** in the bottom-right corner of the page.
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动，选择 **Another AWS Account**，输入源账户的 12 位数字 **Account ID**（在我的案例中，将是 **awsseccb-sandbox-1**
    账户的 ID），然后点击页面右下角的 **Next**。
- en: '![Figure 2.24 – Configuring Account ID of source account](image/B21384_02_24.jpg)'
  id: totrans-366
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.24 – 配置源账户的账户 ID](image/B21384_02_24.jpg)'
- en: Figure 2.24 – Configuring Account ID of source account
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.24 – 配置源账户的账户 ID
- en: In the **Add permissions** page, search for **S3** , select **AmazonS3ReadOnlyAccess**
    , and click **Next** in the bottom-right corner of the page.
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Add permissions** 页面中，搜索 **S3**，选择 **AmazonS3ReadOnlyAccess**，然后点击页面右下角的
    **Next**。
- en: In the **Name, review, and create** page, enter **SA-S3ReadOnly** in the **Role
    name** field and **Amazon S3 Read Only Access Role** in the **Description** field.
    I have given a prefix of **SA** to denote that this is a switch account role.
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Name, review, and create** 页面中，在 **Role name** 字段中输入 **SA-S3ReadOnly**，在
    **Description** 字段中输入 **Amazon S3 Read Only Access Role**。我给这个角色加上了 **SA** 前缀，用以表示这是一个切换账户角色。
- en: Review the role details and click **Create role** in the bottom-right corner
    of the page.
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审核角色详细信息后，点击页面右下角的 **Create role**。
- en: Once we see a success message that says **Role SA-S3ReadOnly created** , click
    on **View role** , make note of the role’s ARN, and select **Link to switch roles**
    **in console** .
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦看到成功消息 **Role SA-S3ReadOnly created**，点击 **View role**，记下角色的 ARN，然后选择 **Link
    to switch roles** **in console**。
- en: Next, we will create an IAM policy in the source account to grant users in the
    source account the ability to assume the newly created role.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在源账户中创建一个 IAM 策略，以授予源账户中的用户假设新创建的角色的权限。
- en: Setting up source account via the AWS Management Console
  id: totrans-373
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过 AWS 管理控制台设置源账户
- en: When administrators in the source account are switching roles, only the creation
    of the role with a trust policy in the destination account is necessary. There
    is no requirement for a policy creation or attachment in the source account, as
    administrators already have the **sts:AssumeRole** permission. Therefore, if we
    are an administrator in the source account, we can skip the setting up section
    for the source account in this recipe.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 当源账户中的管理员切换角色时，只需在目标账户中创建带有信任策略的角色即可。不需要在源账户中创建或附加策略，因为管理员已拥有 **sts:AssumeRole**
    权限。因此，如果我们是源账户中的管理员，可以跳过本食谱中源账户的设置部分。
- en: 'We can create the required IAM policy in the source account as follows:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按照以下步骤在源账户中创建所需的 IAM 策略：
- en: Log in to the AWS Management Console of the source account ( **awsseccb-sandbox-1**
    in my case), as the **awsseccbadmin1** admin user and go to the **IAM** dashboard.
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到源账户的 AWS 管理控制台（在我的案例中是 **awsseccb-sandbox-1**），以 **awsseccbadmin1** 管理员身份，进入
    **IAM** 仪表盘。
- en: Click on **Policies** from the left sidebar.
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧边栏点击 **Policies**。
- en: Click on **Create policy** .
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Create policy**。
- en: 'Click on the **JSON** tab and then paste the following policy JSON in the **policy
    editor** . Remember to replace **arn:aws:iam::DESTINATION_ACCOUNT_ID:role/ROLE_NAME**
    with the role’s ARN that we noted in the previous section. Alternatively, we can
    just replace **DESTINATION_ACCOUNT_ID** with the destination account’s ID and
    **ROLE_NAME** with the role name we created in the previous section:'
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **JSON** 标签，然后在 **policy editor** 中粘贴以下策略 JSON。记得将 **arn:aws:iam::DESTINATION_ACCOUNT_ID:role/ROLE_NAME**
    替换为我们在前一部分中记下的角色 ARN。或者，我们可以直接将 **DESTINATION_ACCOUNT_ID** 替换为目标账户的 ID，将 **ROLE_NAME**
    替换为我们在前一部分中创建的角色名称：
- en: '[PRE11]'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Click **Next** in the bottom-right corner of the page.
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面右下角的 **Next**。
- en: In the **Review and create** page, enter **AR_Sandbox2_S3ReadOnly** in the **Policy
    name** field, and enter **AssumeRole policy for S3ReadOnlyAccess in awsseccb-sandbox-2**
    in the **Description** field.
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Review and create** 页面中，在 **Policy name** 字段中输入 **AR_Sandbox2_S3ReadOnly**，在
    **Description** 字段中输入 **AssumeRole policy for S3ReadOnlyAccess in awsseccb-sandbox-2**。
- en: Review the details and click **Create policy** in the bottom-right corner of
    the page. We should get a **Policy AR_Sandbox2_S3ReadOnly** **created** message.
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审查详细信息并点击页面右下角的**创建策略**。我们应该会看到一个**Policy AR_Sandbox2_S3ReadOnly** **已创建**的消息。
- en: Attach this policy to the **awsseccbusers** group in the source account that
    has the **awsseccbuser1** user. With IAM, we can directly attach the policy to
    the group in the source account. With IAM Identity Center, we must first create
    a permission set with this policy and assign it to the group during the assignment
    of the source account as we saw in [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020)
    .
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此策略附加到源账户中的**awsseccbusers**组，该组包含**awsseccbuser1**用户。在 IAM 中，我们可以直接将策略附加到源账户中的组。而在
    IAM 身份中心中，我们必须首先创建一个包含此策略的权限集，并在分配源账户时将其分配给该组，如在[*第 1 章*](B21384_01.xhtml#_idTextAnchor020)中所示。
- en: Next, we will switch roles from the source account to the destination account.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将从源账户切换到目标账户。
- en: Switching roles via the AWS Management Console
  id: totrans-386
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过 AWS 管理控制台切换角色
- en: 'For switching roles from the source account to the destination account, follow
    these steps:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从源账户切换到目标账户，请按照以下步骤操作：
- en: Log into the AWS Management Console of the source account, say **awsseccb-sandbox-1**
    , as the user who was assigned the permission to switch roles, say **awsseccb_iam_user1**
    . If we are logging in via the AWS IAM Identity Center access portal, we need
    to make sure we select the role for the source account with the **AssumeRole**
    policy.
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用分配了切换角色权限的用户（如**awsseccb_iam_user1**）登录源账户的 AWS 管理控制台，假设该账户为**awsseccb-sandbox-1**。如果通过
    AWS IAM 身份中心访问门户进行登录，确保选择带有**AssumeRole**策略的源账户角色。
- en: 'Click on the drop-down menu next to the username and click on **Switch role**
    as shown in the following figure:'
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击用户名旁边的下拉菜单，然后点击**切换角色**，如下图所示：
- en: '![Figure 2.25 – User menu with the Switch role button](image/B21384_02_25.jpg)'
  id: totrans-390
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.25 – 带有切换角色按钮的用户菜单](image/B21384_02_25.jpg)'
- en: Figure 2.25 – User menu with the Switch role button
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.25 – 带有切换角色按钮的用户菜单
- en: Here, I am switching roles for the second time to show the **Role history**
    details. On your first attempt, you will not see the **Role** **history** details.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我正在第二次切换角色，以显示**角色历史**的详细信息。在第一次尝试时，你将不会看到**角色历史**的详细信息。
- en: On the **Switch Role** screen, for **Account** , enter the account number of
    the destination account and for **IAM role name** , enter **SA-S3ReadOnly** .
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**切换角色**屏幕中，针对**账户**，输入目标账户的账户号码，针对**IAM 角色名称**，输入**SA-S3ReadOnly**。
- en: '![Figure 2.26 – The Switch Role screen](image/B21384_02_26.jpg)'
  id: totrans-394
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.26 – 切换角色屏幕](image/B21384_02_26.jpg)'
- en: Figure 2.26 – The Switch Role screen
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.26 – 切换角色屏幕
- en: Once we are logged in as the required user (here, **awsseccb_iam_user1** ) or
    the required source account (here, **awsseccb-sandbox-1** ), we can also switch
    roles by pasting the link to switch roles in the console that we got in *Step
    10* in the *Setting up destination account via AWS Management* *Console* section.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们以所需的用户身份（此处为**awsseccb_iam_user1**）或所需的源账户身份（此处为**awsseccb-sandbox-1**）登录，也可以通过粘贴在*步骤
    10*中的角色切换链接来切换角色，该链接位于*通过 AWS 管理控制台设置目标账户*一节中。
- en: Click on **Switch Role** .
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**切换角色**。
- en: 'This time, we should be logged in to the new account. We can verify this from
    the drop-down menu next to our account name in the taskbar:'
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这时，我们应该已经成功登录到新账户。我们可以通过任务栏中账户名称旁边的下拉菜单来验证这一点：
- en: '![Figure 2.27 – User menu after switching role](image/B21384_02_27.jpg)'
  id: totrans-399
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.27 – 切换角色后用户菜单](image/B21384_02_27.jpg)'
- en: Figure 2.27 – User menu after switching role
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.27 – 切换角色后用户菜单
- en: Go to the **S3** service and verify that we can see all buckets and their details.
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**S3**服务，验证我们是否能够看到所有的存储桶及其详细信息。
- en: We can switch back to the parent account by clicking on the **Switch back**
    button, as we can see in *Figure 2* *.27* .
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过点击**切换回**按钮返回到父账户，如*图 2.27*所示。
- en: Next, we will see how we can create a role from the command line.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看到如何通过命令行创建一个角色。
- en: Setting up a destination account via the AWS CLI
  id: totrans-404
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过 AWS CLI 设置目标账户
- en: 'With the AWS CLI, first, we need to create a role embedded with a trust policy
    in the destination account and then associate the permissions policy with this
    role. We will run the CLI commands using the **AWSSecCBAdmin1D** CLI profile for
    the **awsseccbadmin1** user, which is configured for the destination account (
    **awsseccb-sandbox-2** in my case) with **AdministratorAccess** permission. Let
    us get started:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 AWS CLI，首先，我们需要在目标账户中创建一个嵌入信任策略的角色，然后将权限策略与此角色关联。我们将使用**AWSSecCBAdmin1D**
    CLI 配置文件来运行 CLI 命令，该配置文件为目标账户（在我这里是 **awsseccb-sandbox-2**）中的 **awsseccbadmin1**
    用户配置了 **AdministratorAccess** 权限。让我们开始吧：
- en: 'First, we need to create a **trust policy** allowing the destination account
    to trust the source account and save the file as **trust-policy.json** :'
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个 **信任策略**，允许目标账户信任源账户，并将文件保存为 **trust-policy.json**：
- en: '[PRE12]'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Replace **<SOURCE_ACCOUNT_ID>** with your source account’s 12-digit account
    ID.
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 **<SOURCE_ACCOUNT_ID>** 替换为您源账户的 12 位账户 ID。
- en: 'Create a role using the trust relationship file created in the previous step:'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用上一步中创建的信任关系文件创建角色：
- en: '[PRE13]'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If successful, the command will return an output with the details of the newly
    created role including **RoleId** , and role’s **ARN** .
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果成功，命令将返回包含新创建角色的详细信息，包括 **RoleId** 和角色的 **ARN**。
- en: 'Attach the **AmazonS3ReadOnlyAccess** permission policy to the newly created
    role:'
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **AmazonS3ReadOnlyAccess** 权限策略附加到新创建的角色：
- en: '[PRE14]'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: There is no output for this command.
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该命令没有输出。
- en: Next, we need to create a policy in the source account that authorizes the role
    switch.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要在源账户中创建一个授权角色切换的策略。
- en: Setting up a source account via the AWS CLI
  id: totrans-416
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 AWS CLI 设置源账户
- en: 'We will run the CLI commands using the **AWSSecCBAdmin1S** CLI profile for
    the **awsseccbadmin1** user, which is configured for the source account ( **awsseccb-sandbox-1**
    in my case) with **AdministratorAccess** permission. Let us get started:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 **AWSSecCBAdmin1S** CLI 配置文件来运行命令，该配置文件为源账户（在我这里是 **awsseccb-sandbox-1**）中的
    **awsseccbadmin1** 用户配置了 **AdministratorAccess** 权限。让我们开始吧：
- en: 'Create a policy to allow source account identities to assume the role in the
    destination account and save the file as **assume-role-policy-cli.json** :'
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个策略，允许源账户身份在目标账户中假设角色，并将文件保存为 **assume-role-policy-cli.json**：
- en: '[PRE15]'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Replace **DESTINATION_ACCOUNT_ID** with the destination account’s 12-digit Account
    ID.
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 **DESTINATION_ACCOUNT_ID** 替换为目标账户的 12 位账户 ID。
- en: 'Create a policy that allows assuming the **S3ReadOnlyRoleCLI** role in the
    destination account using the **assume-role-policy-cli.json** file we created
    in *Step 1* :'
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个策略，允许使用我们在 *步骤 1* 中创建的 **assume-role-policy-cli.json** 文件假设目标账户中的 **S3ReadOnlyRoleCLI**
    角色：
- en: '[PRE16]'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Attach this policy to the **awsseccbusers** group in the source account, which
    has the **awsseccbuser1** user. With IAM, we can directly attach the policy to
    the group in the source account. With IAM Identity Center, we must first create
    a permission set with this policy and assign it to the group during the assignment
    to the source account as we saw in [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020)
    .
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将该策略附加到源账户中的 **awsseccbusers** 组，该组包含 **awsseccbuser1** 用户。使用 IAM 时，我们可以直接将策略附加到源账户中的组；使用
    IAM 身份中心时，我们必须先创建一个包含该策略的权限集，并在将其分配给源账户的组时进行分配，就像我们在 [*第 1 章*](B21384_01.xhtml#_idTextAnchor020)
    中看到的那样。
- en: Next, we will switch roles from the source account to the destination account.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将从源账户切换角色到目标账户。
- en: Switching roles via the CLI
  id: totrans-425
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过 CLI 切换角色
- en: 'We need to use the **AWSSecCBUser1S** CLI profile for the **awsseccbuser1**
    user, configured for the source account for the role with the **sts:AssumeRole**
    permission. Let us get started:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用 **AWSSecCBUser1S** CLI 配置文件来运行命令，该配置文件为源账户中的 **awsseccbuser1** 用户配置了
    **sts:AssumeRole** 权限。让我们开始吧：
- en: 'Establish a new profile for the role within the **.aws/config** file. On Unix
    or Linux systems, this file is in the user’s home directory. For Windows users,
    we can find the file at **C:\Users\USERNAME\.aws\config** . Make sure to replace
    **USERNAME** with your actual Windows username:'
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **.aws/config** 文件中为该角色建立一个新的配置文件。在 Unix 或 Linux 系统中，该文件位于用户的主目录下。对于 Windows
    用户，可以在 **C:\Users\USERNAME\.aws\config** 找到该文件。确保将 **USERNAME** 替换为您的实际 Windows
    用户名：
- en: '[PRE17]'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We need to replace the role’s ARN with the ARN of the role we created in the
    destination account. Whether we want to do a cross-account role assumption or
    role assumption within the same account, we need to follow this step.
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们需要将角色的 ARN 替换为我们在目标账户中创建的角色的 ARN。无论是进行跨账户角色假设，还是在同一账户内进行角色假设，我们都需要遵循这一步骤。
- en: 'Run the **aws s3 ls** command with this new user profile as follows:'
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用这个新用户配置文件运行**aws s3 ls**命令，如下所示：
- en: '[PRE18]'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This should give us a successful response with the names of the buckets in the
    destination account.
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会返回目标账户中桶的名称，表示成功的响应。
- en: Important note
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: To obtain the role’s credentials, the AWS CLI internally uses **sts:AssumeRole**
    for assuming the role utilizing the credentials associated with the **source_profile**
    , which is **AWSSecCBUser1S** in our case. Therefore, the identity linked to **source_profile**
    should possess the **sts:AssumeRole** permission for the role mentioned in **role_arn**
    .
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取角色的凭证，AWS CLI 会内部使用**sts:AssumeRole**来利用与**source_profile**关联的凭证假设该角色，在我们的案例中，**source_profile**是**AWSSecCBUser1S**。因此，与**source_profile**关联的身份应该具备**sts:AssumeRole**权限，以便假设**role_arn**中提到的角色。
- en: 'We can also verify the switch role changes within this recipe by running the
    **aws sts** **assume-role** command:'
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以通过运行**aws sts assume-role**命令来验证角色切换的变化：
- en: '[PRE19]'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The **aws sts assume-role** command, if successful, should give us **AccessKeyId**
    , **SecretAccessKey** , and **SessionToken** . We can use the credentials returned
    from the **sts assume-role** command through APIs, including from the CLI.
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果**aws sts assume-role**命令成功执行，应该会返回**AccessKeyId**，**SecretAccessKey**和**SessionToken**。我们可以通过API，包括CLI，使用从**sts
    assume-role**命令返回的凭证。
- en: How it works...
  id: totrans-438
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we configured two accounts, a source account and a destination
    account, such that we can switch roles from the source account and log in to the
    destination account, assuming there’s a role in the destination. This feature
    is used in an identity account architecture where all IAM users are managed in
    a single AWS account, often referred to as the *identity account* , and can switch
    roles to access resources across multiple accounts, thus eliminating the need
    for distinct login credentials for each account.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们配置了两个账户，一个是源账户，一个是目标账户，目的是能够从源账户切换角色并登录到目标账户，前提是目标账户中有一个角色。这个功能用于身份账户架构，在这种架构中，所有IAM用户都在单一AWS账户中进行管理，通常被称为*身份账户*，并且可以切换角色以访问多个账户中的资源，从而避免为每个账户单独提供登录凭证。
- en: 'To switch roles between accounts, the account we are switching to must have
    a role set up for this purpose. The role in the destination account should include
    a trust policy that permits the source account to assume this role, and the source
    account must have a policy with the **sts:AssumeRole** permission, which allows
    this role assumption. In summary, to switch roles between two AWS accounts – let
    us call them the source and destination accounts – the following configurations
    are needed:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 要在账户之间切换角色，我们要切换到的账户必须为此目的设置一个角色。目标账户中的角色应该包括一个信任策略，允许源账户假设此角色，源账户必须拥有包含**sts:AssumeRole**权限的策略，以允许该角色的假设。总之，要在两个AWS账户之间切换角色——我们称之为源账户和目标账户——需要以下配置：
- en: First, a role that can be assumed by an identity (user or service) in the source
    account must exist in the destination account.
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，目标账户中必须存在一个可以由源账户中的身份（用户或服务）假设的角色。
- en: Second, the identity in the source account must be granted the **sts:AssumeRole**
    permission. This permission should specify the ARN of the role to be assumed in
    its policy. This step is needed for role-switching within a single account or
    between two different accounts.
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，源账户中的身份必须被授予**sts:AssumeRole**权限。此权限应在其策略中指定要假设的角色的 ARN。此步骤对于单一账户内或两个不同账户之间的角色切换都是必需的。
- en: For **cross-account role switching** , as seen in this recipe, the destination
    account must also have a trust policy attached to the role to allow the source
    account to assume that role.
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于**跨账户角色切换**，如本示例中所见，目标账户还必须附加一个信任策略到角色上，允许源账户假设该角色。
- en: The trust policy attached to the role in the destination account is an example
    of a resource-based policy, while the policy within the source account authorizing
    the role switch is an example of an identity-based policy. Implicitly, session
    policies are used within the recipe. IAM policies attached to the role in the
    destination account serve as session policies. When a role is assumed, whether
    within the same account or across accounts, AWS **Security Token Service** ( **STS**
    ) generates temporary security credentials for the session. These credentials
    include session policies, defining the permissions available within the temporary
    session.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 目标账户中附加到角色的信任策略是基于资源的策略示例，而授权角色切换的源账户中的策略则是基于身份的策略示例。隐式地，配方中使用了会话策略。附加到目标账户中角色的
    IAM 策略充当会话策略。当角色被假定时，无论是在同一账户内还是跨账户，AWS **安全令牌服务**（**STS**）会为会话生成临时安全凭证。这些凭证包括会话策略，定义了临时会话中可用的权限。
- en: Once a role is assumed, the permissions granted are determined solely by the
    session policies. Additionally, any permissions associated with the IAM identity
    assuming the role are temporarily relinquished, ensuring that the temporary session
    operates strictly within the boundaries of the assumed role’s permissions, mitigating
    the risk of unauthorized access. Furthermore, explicit use of the **aws sts assume-role**
    command allows for the obtaining of temporary security credentials. Upon success,
    this command provides **AccessKeyId** , **SecretAccessKey** , and **SessionToken**
    . These credentials can be used through APIs, including the AWS CLI, enabling
    controlled access to AWS resources based on the permissions defined by the assumed
    role’s session policies.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦假定角色，授予的权限将完全由会话策略决定。此外，任何与假定角色的 IAM 身份关联的权限将暂时放弃，从而确保临时会话严格在所假定角色的权限范围内操作，减少未经授权访问的风险。此外，显式使用**aws
    sts assume-role**命令可以获取临时安全凭证。成功后，该命令会提供**AccessKeyId**、**SecretAccessKey**和**SessionToken**。这些凭证可以通过
    API 使用，包括 AWS CLI，从而根据假定角色的会话策略定义的权限，控制对 AWS 资源的访问。
- en: When we set up a new account within AWS Organizations, AWS automatically creates
    an IAM role in the new member account. This role is designed to allow administrators
    in the management account to assume the role and access the member accounts. This
    role is commonly named **OrganizationAccountAccessRole** but we can change it
    to a different one while creating an account under an AWS organization, as we
    saw in [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020) . If we are using accounts
    that are not part of AWS Organizations, we need to create these manually.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在 AWS Organizations 中设置新账户时，AWS 会自动在新成员账户中创建一个 IAM 角色。此角色旨在允许管理账户中的管理员假定该角色并访问成员账户。这个角色通常被命名为**OrganizationAccountAccessRole**，但在
    AWS 组织中创建账户时，我们可以将其更改为其他名称，正如我们在[*第 1 章*](B21384_01.xhtml#_idTextAnchor020)中所看到的。如果我们使用的是不属于
    AWS Organizations 的账户，则需要手动创建这些角色。
- en: If we are using AWS IAM Identity Center with AWS Organizations, we can easily
    log in to different AWS accounts from the access portal, and implementing the
    identity account architecture that we discussed in this recipe to switch roles
    and log in to different AWS accounts becomes redundant. Nevertheless, roles are
    useful in a variety of use cases, including cross-service access, as we will see
    in the next recipe.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用 AWS IAM 身份中心与 AWS Organizations 配合使用，我们可以通过访问门户轻松登录到不同的 AWS 账户，而实现我们在本配方中讨论的身份账户架构以切换角色并登录到不同
    AWS 账户就变得多余了。然而，角色在多种用例中仍然有用，包括跨服务访问，正如我们将在下一个配方中看到的那样。
- en: There’s more...
  id: totrans-448
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: Let us quickly explore how we can use the **external ID** feature while switching
    roles for enhanced security.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速探讨在切换角色时如何使用**外部 ID**功能以增强安全性。
- en: The **confused deputy** problem is a security vulnerability where a program
    with restricted access unintentionally grants unauthorized access to its resources.
    This issue arises when a trusted entity delegates authority to a less-trusted
    one, which then acts on behalf of the trusted entity but in an unintended manner,
    potentially leading to security breaches. In the context of our recipe, where
    a source account tries to assume a role in a destination account, this vulnerability
    is pertinent due to the potential risk of unauthorized access to sensitive resources
    in the destination account by the less-trusted source account. This risk stems
    from the delegation of authority through role assumption mechanisms, where proper
    controls are necessary to prevent misuse and unauthorized access.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '**混淆代理**问题是一种安全漏洞，发生在一个具有受限访问权限的程序无意中授予未经授权的访问权限给其资源。当一个受信任实体将权限委托给一个较少受信任的实体时，问题就会出现，该较少受信任的实体代表受信任的实体行事，但方式不当，可能导致安全漏洞。在我们的配方中，源账户尝试在目标账户中扮演角色时，由于源账户较少受信任，可能导致对目标账户敏感资源的未经授权访问，因此该漏洞非常相关。这种风险源于通过角色假设机制委托权限，在这种情况下需要适当的控制措施以防止滥用和未经授权的访问。'
- en: Now, let us see how we can solve the confused deputy problem with cross-account
    role switching using external IDs. An external ID serves as a unique key to establish
    a trust bond between two AWS accounts, commonly utilized when an AWS account intends
    to authorize third-party account access to its resources. Specifically, in scenarios
    involving cross-account IAM roles, such as the one we saw in this recipe, the
    resource-owning account (trusting account) designates an external ID. The third
    party (trusted account) must then use this external ID to assume the specified
    role. By requiring a matching external ID for both the role assumption and the
    requester, the system ensures that only authorized entities, verified through
    their external ID and proper permissions, can access the resources, thereby safeguarding
    against such vulnerabilities.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何通过使用外部 ID 进行跨账户角色切换来解决混淆代理问题。外部 ID 作为一个唯一的密钥，用于在两个 AWS 账户之间建立信任关系，通常用于
    AWS 账户希望授权第三方账户访问其资源的场景。具体来说，在涉及跨账户 IAM 角色的场景中，如我们在此配方中看到的，资源拥有账户（信任账户）指定外部 ID。第三方（被信任账户）必须使用该外部
    ID 来扮演指定的角色。通过要求角色假设和请求者使用匹配的外部 ID，系统确保只有经过验证的授权实体（通过外部 ID 和适当的权限验证）才能访问资源，从而避免这种安全漏洞。
- en: 'While setting up the destination account in *Figure 2* *.24* , the **Require
    external ID (Best practice when a third party will assume this role)** option
    was not selected. To use an external ID, we can select this option and add an
    external ID value of our choice. Once an external ID is configured, we need to
    provide the external ID while switching roles as given in the following command,
    otherwise, access will be denied:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置目标账户时，*图 2* *.24* 中的 **要求外部 ID（当第三方将假设此角色时的最佳实践）** 选项未被选中。为了使用外部 ID，我们可以选择此选项，并添加我们选择的外部
    ID 值。一旦配置了外部 ID，在切换角色时需要提供外部 ID，如下所示的命令，否则将拒绝访问：
- en: '[PRE20]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: See also
  id: totrans-454
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: Read more about using **external-id** at [https://www.cloudericks.com/blog/mitigating-confused-deputy-problem-external-ids-secure-cross-account-access-aws](https://www.cloudericks.com/blog/mitigating-confused-deputy-problem-external-ids-secure-cross-account-access-aws)
    .
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读更多关于使用 **external-id** 的内容，访问 [https://www.cloudericks.com/blog/mitigating-confused-deputy-problem-external-ids-secure-cross-account-access-aws](https://www.cloudericks.com/blog/mitigating-confused-deputy-problem-external-ids-secure-cross-account-access-aws)。
- en: Read more about identity account architecture within AWS at [https://www.cloudericks.com/blog/implementing-identity-account-architecture-within-aws](https://www.cloudericks.com/blog/implementing-identity-account-architecture-within-aws)
    .
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读更多关于 AWS 中身份账户架构的内容，访问 [https://www.cloudericks.com/blog/implementing-identity-account-architecture-within-aws](https://www.cloudericks.com/blog/implementing-identity-account-architecture-within-aws)。
- en: Cross-service access via IAM roles on EC2 instances
  id: totrans-457
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 IAM 角色在 EC2 实例上进行跨服务访问
- en: In this recipe, we will create an IAM role that allows an EC2 instance to access
    S3 APIs and then attach it to an EC2 instance. IAM roles provide temporary permissions
    for an AWS service or user to access another AWS service. This avoids the need
    for hard coding credentials such as access keys and secret access keys within
    EC2 instances.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将创建一个 IAM 角色，允许 EC2 实例访问 S3 API，并将其附加到 EC2 实例上。IAM 角色为 AWS 服务或用户提供临时权限，以访问另一个
    AWS 服务。这避免了将访问密钥和秘密访问密钥等凭证硬编码到 EC2 实例中的需要。
- en: Getting ready
  id: totrans-459
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To complete the steps within this recipe, we need the following:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本配方中的步骤，我们需要以下内容：
- en: A working AWS account, **awsseccb-sandbox-1** , and a user with **AdministratorAccess**
    permission to that account, **awsseccbadmin1** , following the *Technical requirements*
    section of this chapter.
  id: totrans-461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有效的 AWS 账户，**awsseccb-sandbox-1**，以及该账户的拥有**AdministratorAccess**权限的用户，**awsseccbadmin1**，根据本章节的*技术要求*部分。
- en: Working knowledge of IAM, EC2, and S3 services.
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具备 IAM、EC2 和 S3 服务的基本知识。
- en: How to do it...
  id: totrans-463
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can create an IAM role for an EC2 instance with access to S3 APIs as follows:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为 EC2 实例创建一个具有访问 S3 API 权限的 IAM 角色，方法如下：
- en: Go to the **IAM** dashboard.
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入**IAM**仪表盘。
- en: Click on **Roles** from the left sidebar.
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧边栏中的**角色**。
- en: Click on **Create role** .
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建角色**。
- en: Under **Trusted entity type** , select **AWS service** , and under the **Service
    or use case** , select **EC2** as the service that will use this role, and click
    **Next** .
  id: totrans-468
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**可信实体类型**下，选择**AWS 服务**，在**服务或用例**下，选择**EC2**作为将使用此角色的服务，然后点击**下一步**。
- en: '![Figure 2.28 – Select trusted entity](image/B21384_02_28.jpg)'
  id: totrans-469
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.28 – 选择可信实体](image/B21384_02_28.jpg)'
- en: Figure 2.28 – Select trusted entity
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.28 – 选择可信实体
- en: Select **AmazonS3FullAccess** and click **Next** .
  id: totrans-471
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**AmazonS3FullAccess**并点击**下一步**。
- en: '![Figure 2.29 – Permissions policies](image/B21384_02_29.jpg)'
  id: totrans-472
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.29 – 权限策略](image/B21384_02_29.jpg)'
- en: Figure 2.29 – Permissions policies
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.29 – 权限策略
- en: Give the role name (for example, **MyS3AccessRole** ).
  id: totrans-474
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入角色名称（例如，**MyS3AccessRole**）。
- en: Optionally add tags and click on **Create Role** .
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地添加标签并点击**创建角色**。
- en: 'We can associate the role with an EC2 instance as follows:'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以按如下方式将角色与 EC2 实例关联：
- en: Go to the **EC2** dashboard.
  id: totrans-477
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入**EC2**仪表盘。
- en: Click on **Instances** from the left sidebar.
  id: totrans-478
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧边栏中的**实例**。
- en: 'Select our instance, click on **Actions** , click on **Security** , and click
    on **Modify** **IAM role** :'
  id: totrans-479
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们的实例，点击**操作**，点击**安全**，然后点击**修改** **IAM 角色**：
- en: '![Figure 2.30 – Attaching the IAM role to an instance](image/B21384_02_30.jpg)'
  id: totrans-480
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.30 – 将 IAM 角色附加到实例](image/B21384_02_30.jpg)'
- en: Figure 2.30 – Attaching the IAM role to an instance
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.30 – 将 IAM 角色附加到实例
- en: Select our new IAM role and click **Update IAM role** . We should get a success
    message.
  id: totrans-482
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们的新 IAM 角色并点击**更新 IAM 角色**。我们应该会看到成功信息。
- en: 'Connect to our instance via SSH and run the following command:'
  id: totrans-483
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 SSH 连接到我们的实例，并运行以下命令：
- en: '[PRE21]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You will get the following output:'
  id: totrans-485
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将获得以下输出：
- en: '![Figure 2.31 – Listing the S3 buckets](image/B21384_02_31.jpg)'
  id: totrans-486
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.31 – 列出 S3 桶](image/B21384_02_31.jpg)'
- en: Figure 2.31 – Listing the S3 buckets
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.31 – 列出 S3 桶
- en: We should be able to see all the buckets in our account when we run this command
    from the instance because of the role we updated.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们从实例运行此命令时，我们应该能够看到我们账户中的所有桶，因为我们更新了角色。
- en: How it works...
  id: totrans-489
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we have granted S3 access permissions to our EC2 instance, enabling
    the execution of supported S3 operations from within the instance, whether through
    CLI or code, without embedding credentials directly. Embedding AWS credentials
    within an EC2 machine poses a risk of exposure if the machine is compromised.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们已授予 EC2 实例 S3 访问权限，使其能够从实例内执行受支持的 S3 操作，无论是通过 CLI 还是代码，而无需直接嵌入凭证。如果在
    EC2 机器中嵌入 AWS 凭证，则如果机器遭到破坏，凭证可能会被泄露。
- en: When creating an IAM role for an EC2 instance, as demonstrated in this recipe,
    AWS automatically generates an EC2 instance profile. This profile functions as
    a digital badge, clearly delineating the permitted services for the instance’s
    use. Essentially, it encompasses the IAM role, furnishing our EC2 instance with
    the necessary permissions for secure and efficient interaction with specific AWS
    services, such as S3. The EC2 instance “assumes” this role whenever it undertakes
    tasks requiring these permissions, such as interacting with S3.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 当为 EC2 实例创建 IAM 角色时，如本配方所示，AWS 会自动生成一个 EC2 实例配置文件。这个配置文件作为数字徽章，明确标示了实例可使用的服务。实质上，它包含了
    IAM 角色，为我们的 EC2 实例提供了与特定 AWS 服务（如 S3）进行安全高效交互所需的权限。每当 EC2 实例执行需要这些权限的任务（例如与 S3
    交互）时，它就“假设”这个角色。
- en: There’s more...
  id: totrans-492
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: IAM roles are useful for facilitating secure cross-service access within AWS
    environments. These roles can be utilized across various AWS services to grant
    temporary permissions to entities such as Lambda functions, ECS tasks, and even
    users or groups within AWS organizations. By defining granular permissions through
    IAM policies, roles enable seamless integration and collaboration between different
    services while adhering to the principle of least privilege.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: IAM 角色有助于促进 AWS 环境中的安全跨服务访问。这些角色可以跨各种 AWS 服务使用，以向实体（如 Lambda 函数、ECS 任务，甚至是 AWS
    组织中的用户或组）授予临时权限。通过定义精细的权限，IAM 角色能够实现不同服务之间的无缝集成与协作，同时遵循最小权限原则。
- en: For instance, IAM roles can be assigned to Lambda functions to access specific
    AWS resources such as S3 buckets or DynamoDB tables without requiring hard-coded
    credentials. Similarly, ECS tasks can assume IAM roles to interact with other
    AWS services during containerized application deployments. Moreover, IAM roles
    can be leveraged by AWS organizations to delegate permissions across multiple
    accounts securely.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，IAM 角色可以分配给 Lambda 函数，以访问特定的 AWS 资源，如 S3 桶或 DynamoDB 表，而无需使用硬编码的凭证。同样，ECS
    任务可以担任 IAM 角色，以便在容器化应用程序部署过程中与其他 AWS 服务交互。此外，AWS 组织可以利用 IAM 角色在多个账户之间安全地委派权限。
- en: Both IAM users and roles are IAM identities assigned specific permission policies.
    While users are associated with static credentials such as access keys, which
    pose a risk of exposure, IAM roles offer temporary security credentials for each
    session, reducing the reliance on long-term static credentials. Roles can be assumed
    by various entities including users, groups, applications, or AWS services.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: IAM 用户和角色都是被分配特定权限策略的 IAM 身份。用户与静态凭证（如访问密钥）关联，这些凭证可能会暴露，而 IAM 角色为每个会话提供临时安全凭证，减少了对长期静态凭证的依赖。角色可以由包括用户、组、应用程序或
    AWS 服务在内的各种实体担任。
- en: In essence, IAM roles serve as a foundational element for implementing secure
    and efficient cross-service access controls within AWS ecosystems, promoting agility,
    scalability, and robust security practices.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 实质上，IAM 角色作为实现 AWS 生态系统中安全高效跨服务访问控制的基础元素，促进了敏捷性、可扩展性和强大的安全实践。
- en: Important concepts related to IAM roles
  id: totrans-497
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与 IAM 角色相关的重要概念
- en: 'Let us quickly go through some more important concepts about IAM roles:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速浏览一些关于 IAM 角色的更多重要概念：
- en: The trust policy for a role allows a user in the trusted account to switch to
    or assume that role.
  id: totrans-499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 角色的信任策略允许受信账户中的用户切换或担任该角色。
- en: A wildcard ( ***** ) cannot be specified as a principal for a trust policy.
  id: totrans-500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信任策略中不能指定通配符（*****）作为主体。
- en: When a user assumes a role, it temporarily gives up its own permissions until
    the user stops using the role.
  id: totrans-501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当用户担任一个角色时，暂时放弃自己的权限，直到用户停止使用该角色为止。
- en: Some services allow attaching a policy directly to a resource without needing
    to use a role as a proxy. These resources include S3 buckets, Glacier vaults,
    Amazon SNS topics, and Amazon SQS queues.
  id: totrans-502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些服务允许直接将策略附加到资源，而无需使用角色作为代理。这些资源包括 S3 桶、Glacier 金库、Amazon SNS 主题和 Amazon SQS
    队列。
- en: Roles can be used by external users authenticated by an external identity provider
    service to get access to AWS resources.
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 角色可以由通过外部身份提供者服务认证的外部用户使用，以访问 AWS 资源。
- en: Roles allow mobile apps to use AWS resources without embedding AWS access keys
    within the app.
  id: totrans-504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 角色允许移动应用程序使用 AWS 资源，而无需将 AWS 访问密钥嵌入应用程序中。
- en: Role chaining is the process where a role assumes a second role through the
    AWS CLI or API.
  id: totrans-505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 角色链式操作是指通过 AWS CLI 或 API，角色通过担任第二个角色的过程。
- en: To pass the role information to an EC2 instance when the instance starts, we
    can add the role within an instance profile. An instance profile can be considered
    a container for an IAM role. The **list-instance-profiles-for-role** CLI command
    lists the instance profiles for a role.
  id: totrans-506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在 EC2 实例启动时将角色信息传递给实例，我们可以在实例配置文件中添加角色。实例配置文件可以看作是 IAM 角色的容器。**list-instance-profiles-for-role**
    CLI 命令列出角色的实例配置文件。
- en: The permissions boundary is a feature we can use to set the maximum permissions
    that an identity-based policy can grant to an IAM entity, such as a user or role.
    The **put-role-permissions-boundary** CLI command can be used to create or update
    the permissions boundary for a role, while **delete-role-permissions-boundary**
    will delete the permissions boundary for the role.
  id: totrans-507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 权限边界是我们可以用来设置基于身份的策略可以授予 IAM 实体（如用户或角色）最大权限的功能。**put-role-permissions-boundary**
    CLI 命令可用于创建或更新角色的权限边界，而**delete-role-permissions-boundary**则会删除角色的权限边界。
- en: The **attach-role-policy** CLI command attaches a policy to a role, while **detach-role-policy**
    detaches a policy from a role.
  id: totrans-508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**attach-role-policy** CLI 命令将策略附加到角色，而**detach-role-policy**则从角色中分离策略。'
- en: The **put-role-policy** CLI command creates or updates an inline policy, **get-role-policy**
    retrieves the specified inline policy in a role, and **delete-role-policy** deletes
    the specified inline policy.
  id: totrans-509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**put-role-policy** CLI 命令创建或更新内联策略，**get-role-policy** 检索角色中的指定内联策略，**delete-role-policy**
    删除指定的内联策略。'
- en: See also
  id: totrans-510
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: We can read more about EC2 instance profiles and IAM roles at [https://www.cloudericks.com/blog/secure-cross-service-access-ec2-instance-profiles-iam-roles](https://www.cloudericks.com/blog/secure-cross-service-access-ec2-instance-profiles-iam-roles)
    .
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在[https://www.cloudericks.com/blog/secure-cross-service-access-ec2-instance-profiles-iam-roles](https://www.cloudericks.com/blog/secure-cross-service-access-ec2-instance-profiles-iam-roles)
    阅读更多关于 EC2 实例配置文件和 IAM 角色的内容。
