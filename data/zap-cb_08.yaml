- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Business Logic Testing
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 业务逻辑测试
- en: Hooray! You’re a third of the way through. In this chapter, we will be covering
    **business logic flaws**. Business logic flaws are types of errors where an attacker
    finds ways of using an application’s actual handling stream in a manner that has
    a negative impact on the associations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！你已经完成了三分之一。在本章中，我们将讨论**业务逻辑缺陷**。业务逻辑缺陷是一种错误类型，攻击者发现利用应用程序的实际处理流程的方式，给关联带来负面影响。
- en: Here, you will learn how to bypass the frontend GUI application and send data
    directly to the backend for processing by forging requests. We’ll also discover
    how to manipulate and disrupt designed business process flows by simply keeping
    active sessions open and failing to submit transactions within the *expected*
    time frame in the *Test for process timing* recipe. Furthermore, we will learn
    about workflow vulnerabilities that include any flaw that enables an attacker
    to abuse a system or application in such a way that they can avoid (not follow)
    the workflow that was planned or built.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你将学习如何绕过前端GUI应用程序，直接将数据发送到后台进行处理。我们还将发现如何通过简单地保持活动会话并未在*预期*时间内提交交易，来操控和干扰设计的业务流程，在*测试流程时序*的实验中就是这种情况。此外，我们还将了解工作流漏洞，包括任何使攻击者能够以某种方式滥用系统或应用程序的缺陷，从而避免（不遵循）预定或构建的工作流。
- en: Lastly, we’ll look at unexpected file type uploads, where the application might
    only accept certain file types, such as **.csv** or **.txt** files, to be submitted
    for processing and might not check the uploaded file’s content or extension. This
    could produce unexpected system or database results or provide attackers with
    new vulnerabilities to exploit.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将探讨意外文件类型上传的情况，在这种情况下，应用程序可能只接受某些文件类型（如**.csv**或**.txt**文件）进行处理，并且可能不会检查上传文件的内容或扩展名。这可能导致系统或数据库结果异常，或为攻击者提供新的漏洞可供利用。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下实验：
- en: Test ability to forge requests
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试伪造请求的能力
- en: Test for process timing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试流程时序
- en: Testing for the circumvention of workflows
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试绕过工作流
- en: Test upload of unexpected file types with a malicious payload
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试上传带有恶意载荷的意外文件类型
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will need to install the OWASP ZAP Proxy in order to utilize your PortSwigger
    account for access to the PortSwigger Academy labs that will be used in this chapter’s
    recipes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要安装OWASP ZAP代理，以便使用你的PortSwigger帐户访问PortSwigger Academy实验室，这些实验室将在本章的实验中使用。
- en: Test ability to forge requests
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试伪造请求的能力
- en: Attackers use forged requests to deliver data directly to the application’s
    backend for processing instead of using its frontend GUI.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者通过伪造请求，将数据直接发送到应用程序的后台进行处理，而不是通过其前端GUI。
- en: The attacker attempts to submit HTTP **GET**/**POST** requests with data values
    that are not permitted, protected against, or anticipated by the business logic
    of the application using an intercepting proxy; in this case, OWASP ZAP. In this
    recipe, the attacker (you) will exploit a defect in the application’s logic to
    make a purchase of a leather jacket at an unanticipated cost.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者尝试通过拦截代理（在本例中为OWASP ZAP）提交包含不被允许、未受保护或未被应用程序业务逻辑预料到的数据值的HTTP **GET**/**POST**请求；在本例中，攻击者（即你）将利用应用程序逻辑中的缺陷，以意外的价格购买一件皮夹克。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: This lab requires a PortSwigger Academy account and ZAP to be able to intercept
    requests and responses from the server to your browser.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本实验需要一个PortSwigger Academy帐户和ZAP，以便拦截从服务器到浏览器的请求和响应。
- en: How to do it…
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'In this section, we will be using PortSwigger Academy’s *Excessive trust in
    client-side control* lab to change the price of the product by editing the request.
    Please follow these instructions to complete this lab:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将使用PortSwigger Academy的*过度信任客户端控制*实验，通过编辑请求来改变产品的价格。请按照以下说明完成此实验：
- en: 'Navigate to the URL with the browser proxied to ZAP and log in to the PortSwigger
    Academy website to launch the lab:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中通过ZAP代理访问URL，并登录到PortSwigger Academy网站以启动实验：
- en: '[https://portswigger.net/web-security/logic-flaws/examples/lab-logic-flaws-excessive-trust-in-client-side-controls](https://portswigger.net/web-security/logic-flaws/examples/lab-logic-flaws-excessive-trust-in-client-side-controls)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://portswigger.net/web-security/logic-flaws/examples/lab-logic-flaws-excessive-trust-in-client-side-controls](https://portswigger.net/web-security/logic-flaws/examples/lab-logic-flaws-excessive-trust-in-client-side-controls)'
- en: Once you access the lab, log in to the lab application under **My Account**
    and use the provided **Username**/**Password** of **wiener**/**peter**. You won’t
    be able to complete a purchase without being logged in.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你访问实验室，登录到实验室应用程序的**我的账户**，并使用提供的**用户名**/**密码**：**wiener**/**peter**。没有登录你将无法完成购买。
- en: You’ll also notice the account has a store credit balance of **$100.00**.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会注意到账户有**$100.00**的店内积分余额。
- en: Attempt to buy the first item, **Lightweight ‘l33t’ Leather Jacket**, by adding
    it to the cart and going through the entire process to buy.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试通过将第一个商品**轻便‘l33t’皮夹克**添加到购物车并完成整个购买过程。
- en: 'The order gets rejected as you don’t have enough store credit, as shown in
    *Figure 8**.1*:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 由于没有足够的店内积分，订单被拒绝，如*图 8.1*所示：
- en: '![Figure 8.1 – Failed purchase of a lightweight jacket](image/Figure_8.1_B18829.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1 – 轻便夹克购买失败](image/Figure_8.1_B18829.jpg)'
- en: Figure 8.1 – Failed purchase of a lightweight jacket
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 – 轻便夹克购买失败
- en: In ZAP, go to **History** and look over the order process. You’ll notice that
    when you add an item to your cart, the corresponding request contains a price
    parameter.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 ZAP 中，进入**历史**并查看订单过程。你会注意到，当你将商品添加到购物车时，相应的请求中包含一个价格参数。
- en: Remove the item from your cart but stay on the page that says **Cart** **is
    empty**.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从购物车中移除商品，但停留在显示**购物车为空**的页面上。
- en: Right-click on the **POST <url>/cart** request and open in **Open/Resend With**
    **Request Editor…**.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击**POST <url>/cart**请求，并选择**使用请求编辑器打开/重新发送**。
- en: 'Within the Request Editor, change the price to an arbitrary integer and ensure
    there are two zeros at the end to account for change (that is, **1700**), and
    then send the request, as shown in *Figure 8**.2*:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在请求编辑器中，将价格更改为一个任意整数，并确保末尾有两个零以便计算零钱（即**1700**），然后发送请求，如*图 8.2*所示：
- en: '![Figure 8.2 – Request with changed item price ](image/Figure_8.2_B18829.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.2 – 修改价格的请求](image/Figure_8.2_B18829.jpg)'
- en: Figure 8.2 – Request with changed item price
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2 – 修改价格的请求
- en: 'On the web page, refresh the cart and notice that the item has come back but
    confirm that the price was changed based on your input (see *Figure 8**.3*):'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网页上，刷新购物车并注意到商品已经回到购物车中，但确认价格已根据你的输入发生了变化（见*图 8.3*）：
- en: '![Figure 8.3 – Changed item back in the cart ](image/Figure_8.3_B18829.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.3 – 购物车中已更改的商品](image/Figure_8.3_B18829.jpg)'
- en: Figure 8.3 – Changed item back in the cart
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3 – 购物车中已更改的商品
- en: Repeat this process to set the price to any amount less than your available
    store credit.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复此过程，将价格设置为低于可用店内积分的任意金额。
- en: 'Complete the order to solve the lab, as shown in *Figure 8**.4*:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成订单以解决实验室问题，如*图 8.4*所示：
- en: '![Figure 8.4 – Completed purchase order ](image/Figure_8.4_B18829.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.4 – 完成的购买订单](image/Figure_8.4_B18829.jpg)'
- en: Figure 8.4 – Completed purchase order
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4 – 完成的购买订单
- en: How it works…
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: These flaws are exploited by looking over the project documentation for field
    functionality that can be inferred or predicted, or ones that are hidden. In order
    to avoid following the standard business logic procedure, insert logically sound
    data.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这些缺陷通过检查项目文档中的字段功能来加以利用，功能可以推断或预测，或者是隐藏的。为了避免遵循标准的业务逻辑程序，插入逻辑上合理的数据。
- en: See also
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'For other similar cases, refer to the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他类似的情况，请参阅以下内容：
- en: '*Testing for Exposed* *Session Variables*:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*测试暴露的* *会话变量*：'
- en: '[https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/04-Testing_for_Exposed_Session_Variables](https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/04-Testing_for_Exposed_Session_Variables)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/04-Testing_for_Exposed_Session_Variables](https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/04-Testing_for_Exposed_Session_Variables)'
- en: '*Testing for Cross-Site* *Request Forgery*:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*跨站请求伪造测试*：'
- en: '[https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery](https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery](https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery)'
- en: '*Testing for Account Enumeration and Guessable* *User Account*:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*测试账户枚举和可猜测的* *用户账户*：'
- en: '[https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account](https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account](https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account)'
- en: Test for process timing
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试过程时延
- en: Process timing test is a type of business logic testing that focuses on finding
    flows in how applications accomplish certain processes, such as authentication.
    In the process timing testing, the tester looks at how long it takes the application
    to process valid versus invalid inputs or actions. The tester validates that an
    attacker is unable to determine the behavior of an application based on the time
    it takes the application to finish an action. In the authentication example, by
    monitoring the process timing, based on the timing variation between entering
    valid credentials versus invalid credentials, an attacker can determine whether
    the credentials are valid without having to depend on the GUI.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 过程时延测试是一种业务逻辑测试类型，重点在于查找应用程序完成某些过程（如身份验证）时的流动。在过程时延测试中，测试者观察应用程序处理有效输入与无效输入或操作所花费的时间。测试者验证攻击者是否无法仅通过应用程序完成操作所需的时间来判断应用程序的行为。在身份验证示例中，通过监控过程时延，基于输入有效凭证与无效凭证的时间差异，攻击者可以判断凭证是否有效，而无需依赖图形用户界面（GUI）。
- en: Getting ready
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: For this recipe, you will need to start PortSwigger’s *Username enumerations
    via response timing* lab and ensure that ZAP is intercepting traffic between the
    lab application and your browser.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，你需要启动 PortSwigger 的 *用户名枚举通过响应时间* 实验，并确保 ZAP 在拦截实验应用程序与浏览器之间的流量。
- en: How to do it…
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'The following step-by-step tutorial demonstrates how to use process timing
    to find the correct login information:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是逐步教程，演示如何使用过程时延来找到正确的登录信息：
- en: 'Navigate to the following URL with the browser proxied to ZAP and log in to
    the PortSwigger Academy website to launch the lab:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用浏览器代理到 ZAP，导航到以下 URL 并登录到 PortSwigger Academy 网站以启动实验：
- en: '[https://portswigger.net/web-security/authentication/password-based/lab-username-enumeration-via-response-timing](https://portswigger.net/web-security/authentication/password-based/lab-username-enumeration-via-response-timing)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://portswigger.net/web-security/authentication/password-based/lab-username-enumeration-via-response-timing](https://portswigger.net/web-security/authentication/password-based/lab-username-enumeration-via-response-timing)'
- en: Open the *Username enumerations via response timing* lab and start ZAP to intercept
    the communications between your browser and the lab.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 *用户名枚举通过响应时间* 实验并启动 ZAP，拦截浏览器和实验之间的通信。
- en: Create a context and add the application URL to it, and click on the target
    symbol to display only requests from the application in the **Sites Tree** and
    the **History** tabs.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个上下文并将应用程序的 URL 添加进去，然后点击目标符号，以便仅显示来自应用程序的请求，出现在 **站点树** 和 **历史记录** 标签页中。
- en: Attempt to log in using any different usernames and passwords five times; as
    you can see in *Figure 8**.5*, your IP address has been blocked.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试使用不同的用户名和密码登录五次；如*图 8.5*所示，你的 IP 地址已被封锁。
- en: '![Figure 8.5 – User account blocked for 30 minutes ](image/Figure_8.5_B18829.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.5 – 用户账户被封锁 30 分钟 ](image/Figure_8.5_B18829.jpg)'
- en: Figure 8.5 – User account blocked for 30 minutes
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5 – 用户账户被封锁 30 分钟
- en: 'If the IP address is blocked, we won’t be able to perform a brute-force attack.
    To get around this issue, we can use the **X-Forwarded-For** HTTP header, which
    will allow us to spoof the IP address. Now, select the **POST** request that is
    sent when you try to log in; the URL for the request ends in **/login**, as seen
    in *Figure 8**.6*. Right-click the request and select the **Open/Resend With Request**
    **Editor…** option:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 IP 地址被封锁，我们将无法执行暴力破解攻击。为了绕过这个问题，我们可以使用 **X-Forwarded-For** HTTP 头部，这将允许我们伪造
    IP 地址。现在，选择尝试登录时发送的 **POST** 请求；该请求的 URL 以 **/login** 结尾，如*图 8.6*所示。右键点击请求并选择
    **打开/重新发送请求编辑器…** 选项：
- en: '![Figure 8.6 – POST request of login ](image/Figure_8.6_B18829.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.6 – 登录的 POST 请求 ](image/Figure_8.6_B18829.jpg)'
- en: Figure 8.6 – POST request of login
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.6 – 登录的 POST 请求
- en: The **Request Editor** window will open. In the **Request** tab, scroll down
    to the end of the HTTP headers and add the **X-Forwarded-For** header at the end.
    Let’s set the value of the header to **100**, as seen in *Figure 8**.7*. Change
    the values of the username and password and click on **Send**. *Figure 8**.7*
    also shows the **username** and **password** fields highlighted; the values for
    the fields in the picture are **admin** and **admin**.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**请求编辑器**窗口将打开。在**请求**标签中，向下滚动至HTTP头部的末尾并添加**X-Forwarded-For**头部。我们将该头部的值设置为**100**，如*图
    8.7*所示。更改用户名和密码的值，并点击**发送**。*图 8.7*还显示了**用户名**和**密码**字段的高亮显示；图片中这些字段的值是**admin**和**admin**。'
- en: As you can see, the request was sent successfully.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，请求已成功发送。
- en: '![Figure 8.7 – X-Forwarded-For header ](image/Figure_8.7_B18829.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.7 – X-Forwarded-For 头部](image/Figure_8.7_B18829.jpg)'
- en: Figure 8.7 – X-Forwarded-For header
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.7 – X-Forwarded-For 头部
- en: 'To be able to change the value of the **X-Forwarded-For** field automatically
    and constantly, we will need to download **Community Scripts**. This is needed
    in order to brute-force the **password** and **username** fields. Here are the
    instructions to download **Community Scripts**:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了能够自动并持续地更改**X-Forwarded-For**字段的值，我们需要下载**社区脚本**。这是为了暴力破解**密码**和**用户名**字段。以下是下载**社区脚本**的步骤：
- en: 'So to start, open the **Manage Add-ons** window by clicking the three-cube
    icon, as highlighted in *Figure 8**.8*:'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所以，首先通过点击三立方体图标打开**管理附加组件**窗口，如*图 8.8*所示：
- en: '![Figure 8.8 – Manage Add-Ons icon ](image/Figure_8.8_B18829.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.8 – 管理附加组件图标](image/Figure_8.8_B18829.jpg)'
- en: Figure 8.8 – Manage Add-Ons icon
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.8 – 管理附加组件图标
- en: 'Once the **Manage Add-ons** window opens, navigate to the **Marketplace** tab
    and search for **Community Scripts**. Check the checkbox next to it and click
    on **Install Selected**, as shown in *Figure 8**.9*:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦**管理附加组件**窗口打开，导航到**市场**标签，搜索**社区脚本**。勾选它旁边的复选框，并点击**安装所选项**，如*图 8.9*所示：
- en: '![Figure 8.9 – Marketplace Community Scripts ](image/Figure_8.9_B18829.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.9 – 市场社区脚本](image/Figure_8.9_B18829.jpg)'
- en: Figure 8.9 – Marketplace Community Scripts
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.9 – 市场社区脚本
- en: After **Community Scripts** has been installed, click on the plus icon next
    to the **Sites** tab and select **Scripts** to add the **Scripts** tab.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装**社区脚本**后，点击**站点**标签旁边的加号图标，选择**脚本**来添加**脚本**标签。
- en: 'Expand the **Fuzzer HTTP Processor** section and enable **random_x_forwarded_for_ip.js**
    by right-clicking it and clicking on **Enable Script(s)**, as shown in *Figure
    8**.10*:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开**Fuzzer HTTP 处理器**部分，通过右键点击**random_x_forwarded_for_ip.js**并点击**启用脚本**来启用它，如*图
    8.10*所示：
- en: '![Figure 8.10 – Enable Script(s) ](image/Figure_8.10_B18829.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.10 – 启用脚本](image/Figure_8.10_B18829.jpg)'
- en: Figure 8.10 – Enable Script(s)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.10 – 启用脚本
- en: 'The following is the code of the script just in case it is removed from Community
    Scripts:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是脚本的代码，以防它从社区脚本中被删除：
- en: '[PRE0]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, right-click the last request we sent, where we added the **X-Forwarded-For**
    header; the source of the request should say **Manual**. Click on **Open**/**Resend
    with Request Editor…**, and the request will open in the **Request Editor** window.
    Set the password to a very long password (300+ characters); in this request, I
    added **thezaplife** 21 times as the password, as shown in *Figure 8**.11*:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，右键点击我们刚才发送的最后一个请求，即我们添加了**X-Forwarded-For**头部的请求；该请求的来源应显示为**手动**。点击**打开**/**使用请求编辑器重新发送...**，请求将在**请求编辑器**窗口中打开。将密码设置为一个非常长的密码（300个以上字符）；在这个请求中，我将**thezaplife**添加了21次作为密码，如*图
    8.11*所示：
- en: '![Figure 8.11 – Request Editor setting the password ](image/Figure_8.11_B18829.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.11 – 请求编辑器设置密码](image/Figure_8.11_B18829.jpg)'
- en: Figure 8.11 – Request Editor setting the password
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.11 – 请求编辑器设置密码
- en: Right-click the last login request in the **History** tab – it should be the
    request to which we have added the long password, and the source of the request
    should say **Manual**. Select **Attack** and click on **Fuzz…**, which will open
    the **Fuzzer** window.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击**历史记录**标签中的最后一个登录请求——它应该是我们添加了长密码的请求，请求的来源应显示为**手动**。选择**攻击**并点击**模糊...**，这将打开**Fuzzer**窗口。
- en: 'Navigate to the **Message Processors** tab, and click on **Add…**, which will
    open the **Add Message Processor** window. In the **Script** field, select the
    script that we added earlier and click on **Add**, as shown in *Figure 8**.12*:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**消息处理器**标签，点击**添加...**，这将打开**添加消息处理器**窗口。在**脚本**字段中，选择我们之前添加的脚本并点击**添加**，如*图
    8.12*所示：
- en: '![Figure 8.12 – Message Processors ](image/Figure_8.12_B18829.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.12 – 消息处理器](image/Figure_8.12_B18829.jpg)'
- en: Figure 8.12 – Message Processors
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.12 – 消息处理器
- en: Navigate to the **Fuzz Locations** tab. In this step, we will brute force the
    username, so select the username and click on **Add**. When you click on **Add**,
    the **Payloads** window will open; click on **Add** again.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**Fuzz Locations**选项卡。在这一步中，我们将进行用户名的暴力破解，所以选择用户名并点击**添加**。点击**添加**后，**有效负载**窗口将打开；再点击**添加**。
- en: When the **Add Payload** window appears, select **Strings** as the type and
    enter the list of the usernames provided in the lab. The usernames are seen when
    you click on the **Candidate usernames** link on the lab home page before accessing
    the lab. *Figure 8**.13* shows the list of usernames in the payload. When you
    have entered the usernames, click on **Add**, and then **OK** in the **Payloads**
    window.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当**添加有效负载**窗口出现时，选择**字符串**作为类型，并输入实验中提供的用户名列表。用户名列表可以通过点击实验主页上**候选用户名**的链接在访问实验之前查看。*图
    8.13*展示了有效负载中的用户名列表。输入用户名后，点击**添加**，然后在**有效负载**窗口中点击**确定**。
- en: '![Figure 8.13 – Add Payload ](image/Figure_8.13_B18829.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.13 – 添加有效负载](image/Figure_8.13_B18829.jpg)'
- en: Figure 8.13 – Add Payload
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.13 – 添加有效负载
- en: 'Then, click on **Start Fuzzer**, as shown in *Figure 8**.14*:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击**启动 Fuzzer**，如*图 8.14*所示：
- en: '![Figure 8.14 – Start Fuzzer of added payload ](image/Figure_8.14_B18829.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.14 – 启动已添加的有效负载 Fuzzer](image/Figure_8.14_B18829.jpg)'
- en: Figure 8.14 – Start Fuzzer of added payload
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.14 – 添加有效负载的 Fuzzer 启动
- en: The username with the longest RTT time is the correct username. In my case,
    the longest RTT time is associated with the username **activestat**, as seen in
    *Figure 8**.15*.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拥有最长 RTT 时间的用户名就是正确的用户名。在我的案例中，最长 RTT 时间与用户名**activestat**相关，如*图 8.15*所示。
- en: Keep a note of the five usernames with the longest RTT time; if you didn’t find
    the password for the first username, you can try the rest of the usernames.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记下五个具有最长 RTT 时间的用户名；如果你没有找到第一个用户名的密码，可以尝试其他用户名。
- en: '![Figure 8.15 – RTT time of password payloads ](image/Figure_8.15_B18829.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.15 – 密码有效负载的 RTT 时间](image/Figure_8.15_B18829.jpg)'
- en: Figure 8.15 – RTT time of password payloads
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.15 – 密码有效负载的 RTT 时间
- en: Now that we have the username, we have to brute force the password. But first,
    we have to resend the request using **Request Editor** to change the username.
    Right-click the last login **POST** request in the **History** tab, and select
    **Open**/**Resend with** **Request Editor…**.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经有了用户名，接下来我们需要进行密码的暴力破解。但首先，我们需要使用**请求编辑器**重新发送请求以更改用户名。右键点击**历史**选项卡中的最后一个登录**POST**请求，选择**打开**/**使用请求编辑器重新发送...**。
- en: Once the **Request Editor** window opens, change the username to the username
    with the longest RTT time. In my case, the username will be **activestat**, as
    shown in *Figure 8**.16*. Click on **Send**.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦**请求编辑器**窗口打开，将用户名更改为具有最长 RTT 时间的用户名。在我的情况下，用户名将是**activestat**，如*图 8.16*所示。点击**发送**。
- en: '![Figure 8.16 – Username of activestat ](image/Figure_8.16_B18829.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.16 – activestat 的用户名](image/Figure_8.16_B18829.jpg)'
- en: Figure 8.16 – Username of activestat
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.16 – activestat 的用户名
- en: Find the request in the **History** tab, right-click it, hover over **Attack**,
    then click on **Fuzz…**.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**历史**选项卡中找到请求，右键点击，悬停在**攻击**上，然后点击**Fuzz...**。
- en: Navigate to the **Message Processors** tab, and click on **Add**, which will
    open the **Add Message** **Processor** window.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**消息处理器**选项卡，点击**添加**，这将打开**添加消息处理器**窗口。
- en: When the **Add Message Processor** window opens, select the script that we added
    earlier in the **Script** field, and click on **Add**, as seen in *Figure 8**.13*.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当**添加消息处理器**窗口打开时，选择我们之前添加的脚本，在**脚本**字段中，点击**添加**，如*图 8.13*所示。
- en: Navigate to the **Fuzz Locations** tab, select **password**, and click on **Add**.
    When the **Payloads** window opens, click on **Add** again. When the **Add Payload**
    window appears, select **Strings** as the type and enter the list of the passwords
    provided in the lab. The passwords are seen when you click on the **Candidate
    passwords** link on the lab home page before accessing the lab. *Figure 8**.17*
    shows the list of passwords in the payload. When you have entered the passwords,
    click on **Add**, and then **OK** in the **Payloads** window.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**Fuzz Locations**选项卡，选择**password**，然后点击**添加**。当**有效负载**窗口打开时，再次点击**添加**。当**添加有效负载**窗口出现时，选择**字符串**作为类型，并输入实验中提供的密码列表。密码列表可以通过点击实验主页上**候选密码**的链接在访问实验之前查看。*图
    8.17*展示了有效负载中的密码列表。输入密码后，点击**添加**，然后在**有效负载**窗口中点击**确定**。
- en: '![Figure 8.17 – Candidate password payloads ](image/Figure_8.17_B18829.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.17 – 候选密码负载](image/Figure_8.17_B18829.jpg)'
- en: Figure 8.17 – Candidate password payloads
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.17 – 候选密码负载
- en: 'Then, click on **Start Fuzzer**, as shown in *Figure 8**.19*:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击**开始模糊测试器**，如*图 8.19*所示：
- en: '![Figure 8.18 – Start Fuzzer of payload ](image/Figure_8.18_B18829.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.18 – 有效负载的开始模糊测试器](image/Figure_8.18_B18829.jpg)'
- en: Figure 8.18 – Start Fuzzer of payload
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.18 – 有效负载的开始模糊测试器
- en: 'In the **Fuzzer** tab, sort on the **Code** column by clicking on the **Code**
    word. The correct password will show **302 Found**, as shown in *Figure 8**.20*.
    The correct password is listed in the **Payloads** column, and in my case, it
    is **montana**:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**模糊测试器**标签页中，通过点击**代码**栏的**代码**字样进行排序。正确的密码会显示为**302 Found**，如*图 8.20*所示。正确的密码会列在**有效负载**栏中，在我的情况下，它是**montana**：
- en: '![Figure 8.19 – 302 Found of correct password ](image/Figure_8.19_B18829.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.19 – 正确密码的 302 Found](image/Figure_8.19_B18829.jpg)'
- en: Figure 8.19 – 302 Found of correct password
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.19 – 正确密码的 302 Found
- en: 'Now that we have the correct username and password, let’s try to log in to
    the web page using these details. If your login is successful, the application
    will display your username and email, as shown in *Figure 8**.21*:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经知道了正确的用户名和密码，让我们尝试使用这些信息登录网页。如果登录成功，应用程序将显示你的用户名和电子邮件，如*图 8.21*所示：
- en: '![Figure 8.20 – Display of solved lab ](image/Figure_8.20_B18829.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.20 – 已解决实验的显示](image/Figure_8.20_B18829.jpg)'
- en: Figure 8.20 – Display of solved lab
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.20 – 已解决实验的显示
- en: How it works…
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: Many system login processes require a username and password. If you look closely,
    when guessing usernames, when the correct username is found but an incorrect password
    is entered, it takes longer than when an incorrect username and incorrect password
    are both entered. This would allow us to find the correct username even if the
    correct password is unknown. From there, it would be much easier to guess the
    password if the username is known than try to guess both. Process timing attacks
    of this type allow the attacker to determine whether they have a valid username
    by analyzing the time it takes for the process to complete, rather than relying
    on GUI messages.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 许多系统登录过程需要用户名和密码。如果你仔细观察，当猜测用户名时，如果找到了正确的用户名但输入了错误的密码，所需的时间比输入错误的用户名和错误的密码都要长。这使得即使不知道正确的密码，我们也能找到正确的用户名。然后，如果知道用户名，猜测密码会比同时猜测用户名和密码要容易得多。这种类型的过程定时攻击使得攻击者可以通过分析过程完成所需的时间来判断他们是否拥有有效的用户名，而不依赖于图形用户界面消息。
- en: Important note
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: A fuzzing assault on both the username and password simultaneously (aka cluster
    bombing), can also be used to brute-force the login. However, if feasible, it
    is considerably more efficient to enumerate a valid username first.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 同时对用户名和密码进行模糊攻击（即集群轰炸），也可以用来暴力破解登录。然而，如果可能，先枚举一个有效的用户名要比同时枚举用户名和密码更高效。
- en: See also
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'For other similar cases, visit the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他类似的案例，请访问以下链接：
- en: '*Testing for Cookies* *Attributes*: [https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes](https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes)'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*测试 Cookies* *属性*：[https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes](https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes)'
- en: '*Test Session* *Timeout*: [https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/07-Testing_Session_Timeout](https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/07-Testing_Session_Timeout)'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*测试会话* *超时*：[https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/07-Testing_Session_Timeout](https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/07-Testing_Session_Timeout)'
- en: Testing for the circumvention of workflows
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试绕过工作流
- en: The workflow must be stopped with all actions and new activities *rolled back*
    or canceled if the user fails to complete particular stages in the right/precise
    order, as required by the application’s business logic. This lab makes assumptions
    that are inherently fallible about the sequence of events in the application’s
    purchasing business workflow. In this recipe, the attacker (you) will exploit
    a defect to purchase a leather jacket at no additional cost to the user.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户未按应用程序的业务逻辑要求正确/精确地完成特定阶段，则必须停止工作流程的所有操作并回滚或取消所有新活动。此实验假设了应用程序购买业务工作流程中事件顺序的固有缺陷。在本实验中，攻击者（你）将利用此缺陷，以零额外成本购买皮夹克。
- en: Getting ready
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need to start PortSwigger’s *Insufficient workflow
    validation* lab and ensure that ZAP is intercepting traffic between the lab application
    and your browser.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个实验，你需要启动PortSwigger的*不足的工作流程验证*实验，并确保ZAP正在拦截实验应用程序和你的浏览器之间的流量。
- en: How to do it…
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this lab, we will demonstrate how to circumvent the item purchasing workflow
    by adding an item to the cart without an increase in price. Follow these steps
    to circumvent the purchasing workflow:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实验中，我们将演示如何通过添加商品到购物车而不增加价格来绕过商品购买工作流程。按照以下步骤绕过购买工作流程：
- en: 'Navigate to the URL with the browser proxied to ZAP and log in to the PortSwigger
    Academy website to launch the lab:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器代理到ZAP后，访问该URL并登录到PortSwigger Academy网站以启动实验：
- en: '[https://portswigger.net/web-security/logic-flaws/examples/lab-logic-flaws-insufficient-workflow-validation](https://portswigger.net/web-security/logic-flaws/examples/lab-logic-flaws-insufficient-workflow-validation)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://portswigger.net/web-security/logic-flaws/examples/lab-logic-flaws-insufficient-workflow-validation](https://portswigger.net/web-security/logic-flaws/examples/lab-logic-flaws-insufficient-workflow-validation)'
- en: 'With ZAP running and intercepting, log in to the lab application using the
    username and password provided: **wiener** and **peter**, respectively.'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在ZAP运行并拦截时，使用提供的用户名和密码登录实验应用程序：**wiener**和**peter**。
- en: Go to the application home page and buy any item that you *can* afford with
    your store credit, such as the *Babbage* *Web Spray*.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到应用主页，购买任何你*能够*用店铺信用支付的商品，例如*巴贝奇* *Web 喷雾*。
- en: 'Look at the proxy **History** tab to look for the order when you placed it:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看代理**历史记录**标签，查找你下单时的订单：
- en: '**POST /cart/checkout**'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**POST /cart/checkout**'
- en: This request redirects you to an order confirmation page.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 此请求将你重定向到订单确认页面。
- en: 'Open the **GET /cart/order-confirmation?order-confirmation=true** request in
    ZAP’s Request Editor. See *Figure 8**.22*:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开ZAP的**GET /cart/order-confirmation?order-confirmation=true**请求，在请求编辑器中查看。见*图
    8.22*：
- en: '![Figure 8.21 – GET request of Babbage Web Spray ](image/Figure_8.21_B18829.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.21 – 获取请求的巴贝奇 Web 喷雾](image/Figure_8.21_B18829.jpg)'
- en: Figure 8.21 – GET request of Babbage Web Spray
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.21 – 获取请求的巴贝奇 Web 喷雾
- en: Next, add the leather jacket to your basket.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将皮夹克添加到你的购物篮中。
- en: In the same Request Editor, resend the order confirmation request (as seen in
    *Figure 8**.21*) and observe that the order is completed without the cost being
    deducted from your store credit.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同的请求编辑器中，重新发送订单确认请求（如*图 8.21*所示），并观察订单完成，但费用没有从你的店铺信用中扣除。
- en: Your **History** tab will show the successful request of the leather jacket
    being ordered. See *Figure 8**.23*.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的**历史记录**标签将显示成功的皮夹克订单请求。见*图 8.23*。
- en: The lab is solved.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 实验已解决。
- en: '![Figure 8.22 – Purchased leather jacket and completed lab ](image/Figure_8.22_B18829.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.22 – 已购买皮夹克并完成实验](image/Figure_8.22_B18829.jpg)'
- en: Figure 8.22 – Purchased leather jacket and completed lab
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.22 – 已购买皮夹克并完成实验
- en: How it works...
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Workflow flaws include any defect that enables an attacker to abuse a system
    or application such that they can avoid (not perform) the workflow that was planned
    or built. Vulnerabilities related to business logic workflows are unique; each
    system or application contains its own workflows to accomplish a task or a process.
    Therefore, manual misuse cases must be carefully developed with requirements and
    use cases specific to the workflow. If an exchange initiates an action, that response
    will be reversed and eliminated if the process is unsuccessful. The workflow of
    the application must contain controls to guarantee that the user’s transactions/actions
    are occurring in the proper sequence.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流缺陷包括任何使攻击者能够滥用系统或应用程序的缺陷，从而让他们能够避免（不执行）原定或构建的工作流。与业务逻辑工作流相关的漏洞是独特的；每个系统或应用程序都有其自己的工作流来完成某项任务或流程。因此，手动滥用案例必须根据特定于工作流的需求和用例仔细制定。如果交换发起一个操作，如果过程失败，该响应将被撤销并消除。应用程序的工作流必须包含控制机制，以确保用户的事务/操作按正确的顺序进行。
- en: Due to a vulnerability’s specific nature for bypassing programmed logic, use
    cases are meticulous and require manual scrutiny to establish the correct requirements
    that avoid the circumvention of the workflows.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 由于漏洞的特定性质是绕过已编程的逻辑，用例非常细致，并且需要手动审查以确定正确的需求，从而避免绕过工作流。
- en: See also
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*OWASP Abuse Case Cheat* *Sheet*: [https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html)'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*OWASP 滥用案例备忘单*：[https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html)'
- en: '*Testing Directory Traversal/File* *Include*: [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*测试目录遍历/文件* *包含*：[https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include)'
- en: '*Testing for Bypassing Authorization* *Schema*: [https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/05-Authorization_Testing/02-Testing_for_Bypassing_Authorization_Schema](https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/05-Authorization_Testing/02-Testing_for_Bypassing_Authorization_Schema)'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*绕过授权测试* *架构*：[https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/05-Authorization_Testing/02-Testing_for_Bypassing_Authorization_Schema](https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/05-Authorization_Testing/02-Testing_for_Bypassing_Authorization_Schema)'
- en: '*Testing for Session Management* *Schema*: [https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/01-Testing_for_Session_Management_Schema](https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/01-Testing_for_Session_Management_Schema)'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*会话管理测试* *架构*： [https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/01-Testing_for_Session_Management_Schema](https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/01-Testing_for_Session_Management_Schema)'
- en: '*Test Business Logic Data* *Validation*: [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/01-Test_Business_Logic_Data_Validation](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/01-Test_Business_Logic_Data_Validation)'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*测试业务逻辑数据* *验证*：[https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/01-Test_Business_Logic_Data_Validation](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/01-Test_Business_Logic_Data_Validation)'
- en: '*Test Ability to Forge* *Requests*: [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/02-Test_Ability_to_Forge_Requests](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/02-Test_Ability_to_Forge_Requests)'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*测试伪造* *请求的能力*：[https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/02-Test_Ability_to_Forge_Requests](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/02-Test_Ability_to_Forge_Requests)'
- en: '*Test Integrity* *Checks*: [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/03-Test_Integrity_Checks](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/03-Test_Integrity_Checks)'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*测试完整性* *检查*: [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/03-Test_Integrity_Checks](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/03-Test_Integrity_Checks)'
- en: '*Test for Process* *Timing*: [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/04-Test_for_Process_Timing](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/04-Test_for_Process_Timing)'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*测试进程* *时序*: [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/04-Test_for_Process_Timing](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/04-Test_for_Process_Timing)'
- en: '*Test Number of Times a Function Can be Used* *Limits*: [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/05-Test_Number_of_Times_a_Function_Can_Be_Used_Limits](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/05-Test_Number_of_Times_a_Function_Can_Be_Used_Limits)'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*测试一个功能可以使用的次数* *限制*: [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/05-Test_Number_of_Times_a_Function_Can_Be_Used_Limits](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/05-Test_Number_of_Times_a_Function_Can_Be_Used_Limits)'
- en: '*Test Defenses Against Application* *Mis-use*: [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/07-Test_Defenses_Against_Application_Misuse](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/07-Test_Defenses_Against_Application_Misuse)'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*测试针对应用程序* *误用的防御*: [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/07-Test_Defenses_Against_Application_Misuse](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/07-Test_Defenses_Against_Application_Misuse)'
- en: '*Test Upload of Unexpected File* *Types*: [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/08-Test_Upload_of_Unexpected_File_Types](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/08-Test_Upload_of_Unexpected_File_Types)'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*测试上传意外文件* *类型*: [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/08-Test_Upload_of_Unexpected_File_Types](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/08-Test_Upload_of_Unexpected_File_Types)'
- en: '*Test Upload of Malicious* *Files*: [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files)'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*测试上传恶意* *文件*: [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files)'
- en: Testing upload of unexpected file types with a malicious payload
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试上传带有恶意有效载荷的意外文件类型
- en: Many business processes in applications allow for the upload and modification
    of data supplied via uploaded files. The business process must examine the files
    and only accept specific *authorized* file types. The business logic is responsible
    for determining which files are *authorized* and whether they are application/system
    specific. In this recipe, we will attack an exploitable file upload option via
    profile avatar. Since certain file extensions are banned, the simple defense will
    be circumvented through traditional obfuscation techniques.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序中的许多业务流程允许上传和修改通过文件上传提供的数据。业务流程必须检查这些文件，只接受特定的 *授权* 文件类型。业务逻辑负责确定哪些文件是 *授权*
    的，并且它们是否特定于应用程序/系统。在这个案例中，我们将通过个人资料头像攻击一个可被利用的文件上传选项。由于某些文件扩展名被禁止，简单的防御将通过传统的混淆技术被绕过。
- en: The user will upload a basic PHP web shell that will be used to exfiltrate the
    contents of a file secret in **/home/carlos/** to complete the lab.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将上传一个基本的 PHP Web Shell，用于将 **/home/carlos/** 文件夹中的一个秘密文件内容提取出来以完成实验。
- en: Getting ready
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need to start PortSwigger’s *Web shell upload via
    obfuscated file extension* lab and ensure that ZAP is intercepting traffic between
    the lab application and your browser.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个实验，你需要启动 PortSwigger 的*Web shell 通过混淆文件扩展名上传*实验，并确保 ZAP 正在拦截实验应用与浏览器之间的流量。
- en: How to do it…
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'In this recipe, we will exploit a file upload option to upload a file and use
    it to exfiltrate data. Follow these instructions to see how to accomplish the
    file upload and the data exfiltration:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实验中，我们将利用文件上传选项上传一个文件，并使用它来窃取数据。按照以下步骤操作，了解如何完成文件上传和数据窃取：
- en: 'Navigate to the following URL with the browser proxied to ZAP and log in to
    the PortSwigger Academy website to launch the lab:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用浏览器代理到 ZAP 后，导航到以下 URL 并登录到 PortSwigger Academy 网站以启动实验：
- en: '[https://portswigger.net/web-security/file-upload/lab-file-upload-web-shell-upload-via-obfuscated-file-extension](https://portswigger.net/web-security/file-upload/lab-file-upload-web-shell-upload-via-obfuscated-file-extension)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://portswigger.net/web-security/file-upload/lab-file-upload-web-shell-upload-via-obfuscated-file-extension](https://portswigger.net/web-security/file-upload/lab-file-upload-web-shell-upload-via-obfuscated-file-extension)'
- en: 'Log in using the username and password (**wiener** and **peter**, respectively),
    upload any **.jpg** or **.png** image as your avatar, then click **Back to My
    Account** to return to your account page. See *Figure 8**.24*:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用用户名和密码（**wiener** 和 **peter**）登录，上传任何**.jpg**或**.png**图像作为头像，然后点击**返回我的帐户**返回帐户页面。参见*图
    8.24*：
- en: '![Figure 8.23 – Uploading avatar file ](image/Figure_8.23_B18829.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.23 – 上传头像文件](image/Figure_8.23_B18829.jpg)'
- en: Figure 8.23 – Uploading avatar file
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.23 – 上传头像文件
- en: Go to **History** and look for your uploaded image that was retrieved using
    a **GET** request to **/files/avatars/<YOUR-IMAGE>**.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**历史记录**，并查找通过**GET**请求**/files/avatars/<YOUR-IMAGE>**检索到的上传图像。
- en: Open this request in the Request Editor.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在请求编辑器中打开此请求。
- en: Create a file named **exploit.php** on your machine that contains a script for
    obtaining the contents of Carlos’s secret – for example, **<?php echo** **file_get_contents('/home/carlos/secret');
    ?>**.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的机器上创建一个名为**exploit.php**的文件，包含一个脚本，用于获取 Carlos 的秘密内容——例如，**<?php echo** **file_get_contents('/home/carlos/secret');
    ?>**。
- en: Try using this script as your avatar. As shown in *Figure 8**.25*, the answer
    shows that you are only permitted to submit JPG and PNG files.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试使用这个脚本作为你的头像。如*图 8.25*所示，结果表明，你只能提交 JPG 和 PNG 文件。
- en: '![Figure 8.24 – Upload exploit.php fail ](image/Figure_8.24_B18829.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.24 – 上传 exploit.php 失败](image/Figure_8.24_B18829.jpg)'
- en: Figure 8.24 – Upload exploit.php fail
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.24 – 上传 exploit.php 失败
- en: In ZAP’s **History** tab, find the **POST /my-account/avatar** request that
    was used to submit the file upload.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 ZAP 的**历史记录**标签中，找到用于提交文件上传的**POST /my-account/avatar**请求。
- en: 'In the Request Editor, open the **POST /my-account/avatar** request and find
    the part of the body that relates to your PHP file. In the **Content-Disposition**
    header, change the value of the filename parameter to include a URL-encoded null
    byte, followed by the **.jpg** extension, **filename="exploit.php%00.jpg"** (see
    *Figure 8**.26*):'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在请求编辑器中，打开**POST /my-account/avatar**请求，并查找与 PHP 文件相关的请求体部分。在**Content-Disposition**头中，将文件名参数的值更改为包含
    URL 编码的空字节，然后是**.jpg**扩展名，**filename="exploit.php%00.jpg"**（参见*图 8.26*）：
- en: '![Figure 8.25 – Request body of file uploaded, exploit.php ](image/Figure_8.25_B18829.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.25 – 上传的文件请求体，exploit.php](image/Figure_8.25_B18829.jpg)'
- en: Figure 8.25 – Request body of file uploaded, exploit.php
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.25 – 上传的文件请求体，exploit.php
- en: Click on **Send** to send the request; as you can see, the file was uploaded
    successfully.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**发送**以发送请求；如你所见，文件已成功上传。
- en: 'Notice that in the response’s message, the uploaded filename and format is
    **exploit.php**, as seen in *Figure 8**.27*, which suggests that the null byte
    and **.jpg** extension have been removed:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在响应的消息中，上传的文件名和格式是**exploit.php**，如*图 8.27*所示，这表明空字节和**.jpg**扩展名已经被移除：
- en: '![Figure 8.26 – Successful upload of exploit.php ](image/Figure_8.26_B18829.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.26 – 成功上传 exploit.php](image/Figure_8.26_B18829.jpg)'
- en: Figure 8.26 – Successful upload of exploit.php
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.26 – 成功上传 exploit.php
- en: 'From the **Sites** window, open the **GET /files/avatars/<YOUR-IMAGE>** request
    in the Request Editor. In the path, replace the name of your image file with **exploit.php**
    and send the request. Observe that Carlos’s secret was returned in the response,
    as shown in *Figure 8**.28*:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Sites**窗口中，打开**GET /files/avatars/<YOUR-IMAGE>**请求，并在请求编辑器中替换路径中的图片文件名为**exploit.php**，然后发送请求。观察到Carlos的秘密在响应中返回，如*图8.28*所示：
- en: '![Figure 8.27 – Response with Carlos’ secret (blurred out) ](image/Figure_8.27_B18829.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图8.27 – 响应中包含Carlos的秘密（已模糊处理）](image/Figure_8.27_B18829.jpg)'
- en: Figure 8.27 – Response with Carlos’ secret (blurred out)
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.27 – 响应中包含Carlos的秘密（已模糊处理）
- en: Submit the secret to solve the lab.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交秘密以解决实验室问题。
- en: How it works...
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Due to the fact that the upload process promptly rejects a file if it lacks
    a specified extension, we had to use an obfuscation technique to trick the system
    into thinking that we were uploading a **.jpg** file. This differs from uploading
    malicious files in that a wrong file format isn’t generally deemed *malicious*,
    although it may still be harmful to the saved data.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 由于上传过程会在文件缺少指定扩展名时立即拒绝该文件，我们不得不使用一种混淆技术来欺骗系统，让它认为我们上传的是**.jpg**文件。这与上传恶意文件有所不同，因为错误的文件格式通常不会被认为是*恶意的*，尽管它仍然可能对保存的数据造成危害。
- en: In the example with the lab, the application only accepted specific file formats,
    **.jpg** files, for processing. For low assurance file validation, the program
    didn’t check the uploaded file’s content or, in other cases, the extension itself
    (high assurance file validation). This can cause the application or server to
    provide unexpected system or database results, or enable new ways for attackers
    to take advantage.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在实验室示例中，应用程序只接受特定的文件格式，**.jpg**文件进行处理。由于文件验证的保障级别较低，程序没有检查上传文件的内容，或者在其他情况下，没有验证扩展名本身（高级别的文件验证）。这可能导致应用程序或服务器提供意外的系统或数据库结果，或者为攻击者提供利用的新方式。
- en: See also
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Test File Extensions Handling for Sensitive* *Information*: [https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/03-Test_File_Extensions_Handling_for_Sensitive_Information](https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/03-Test_File_Extensions_Handling_for_Sensitive_Information)'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*敏感信息的文件扩展名处理测试*：[https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/03-Test_File_Extensions_Handling_for_Sensitive_Information](https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/03-Test_File_Extensions_Handling_for_Sensitive_Information)'
- en: '*Test Upload of Malicious* *Files*: [https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files](https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files)'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*恶意文件上传测试*： [https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files](https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files)'
