- en: Penetration Testing on Technological Platforms - Apache Tomcat
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术平台的渗透测试- Apache Tomcat
- en: In the previous chapter, we learned about performing a penetration test on the **JBoss
    Application Server** (**JBoss AS**). Let's now look at another technological platform,
    known as **Apache Tomcat**. The Apache Tomcat software was developed in an open
    and participatory environment and released under Apache License version 2\. Apache
    Tomcat is a Java servlet container that implements multiple core enterprise features,
    including Java servlets, **Java Server Pages** (**JSP**), Java WebSocket, and
    **Java Persistence APIs** (**JPA**). Many organizations have in-house, Java-based
    applications that are deployed on Apache Tomcat. Vulnerable Apache Tomcat software
    is a goldmine for threat actors, given that a plethora of payment gateways, core
    banking applications, and **Customer Relationship Management** (**CRM**) platforms,
    among many other things, run on Apache Tomcat.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何对**JBoss应用服务器**（**JBoss AS**）进行渗透测试。现在让我们看看另一个技术平台，称为**Apache Tomcat**。Apache
    Tomcat软件是在一个开放和参与的环境中开发的，并在Apache许可证第2版下发布。Apache Tomcat是一个Java Servlet容器，实现了多个核心企业特性，包括Java
    Servlets、**Java Server Pages**（**JSP**）、Java WebSocket和**Java Persistence APIs**（**JPA**）。许多组织都有部署在Apache
    Tomcat上的基于Java的应用程序。易受攻击的Apache Tomcat软件对威胁行为者来说是一个金矿，因为许多支付网关、核心银行应用程序和**客户关系管理**（**CRM**）平台等都在Apache
    Tomcat上运行。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introduction to Tomcat
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tomcat简介
- en: The Apache Tomcat architecture
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Tomcat架构
- en: Files and their directory structures
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件及其目录结构
- en: Detecting Tomcat installations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测Tomcat安装
- en: Version detection
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本检测
- en: Performing exploitation on Tomcat
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对Tomcat进行利用
- en: An introduction to Apache struts
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Struts简介
- en: An introduction to OGNL
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OGNL简介
- en: OGNL expression injection
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OGNL表达式注入
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following are the prerequisites for this chapter:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的先决条件如下：
- en: Apache Tomcat ([http://tomcat.apache.org/](http://tomcat.apache.org/))
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Tomcat ([http://tomcat.apache.org/](http://tomcat.apache.org/))
- en: A backend database; MySQL is recommended ([https://www.mysql.com/downloads/](https://www.mysql.com/downloads/))
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后端数据库；推荐使用MySQL ([https://www.mysql.com/downloads/](https://www.mysql.com/downloads/))
- en: The Metasploit Framework ([https://github.com/rapid7/metasploit-framework](https://github.com/rapid7/metasploit-framework))
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit框架 ([https://github.com/rapid7/metasploit-framework](https://github.com/rapid7/metasploit-framework))
- en: An introduction to Tomcat
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tomcat简介
- en: 'The Apache Tomcat software is an open source web server that is designed to
    run Java-based web applications. Some of the features of the current version of
    Tomcat include the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Tomcat软件是一个开源的Web服务器，旨在运行基于Java的Web应用程序。当前版本的Tomcat的一些特性包括以下内容：
- en: Support for Java Servlet 3.1
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持Java Servlet 3.1
- en: JSP 2.3
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSP 2.3
- en: Java Unified **Expression Language** (**EL**) 3.0
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java统一**表达语言**（**EL**）3.0
- en: Java WebSocket 1.0
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java WebSocket 1.0
- en: Tomcat is developed and handled by a number of developers under the auspices
    of the Apache program platform, released under the Apache Certification 2.0 certificate,
    and is an open source application. Tomcat can be used as either a standalone product
    with its own internal web server or in conjunction with other web servers, including
    Apache and the Microsoft **Internet Information Server** (**IIS**).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Tomcat是由许多开发人员在Apache项目平台的支持下开发和处理的，根据Apache认证2.0证书发布，并且是一个开源应用程序。Tomcat可以作为一个独立产品使用，具有自己的内部Web服务器，也可以与其他Web服务器一起使用，包括Apache和Microsoft的**Internet
    Information Server**（**IIS**）。
- en: 'Given that Apache Tomcat is used by many organizations, the security aspect
    of this platform should be considered wisely. At the time of writing this book,
    Shodan has identified an excess of 93,000 Tomcat instances (both standalone and
    those integrated within JBoss instances) around the world, shown in the following
    screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于Apache Tomcat被许多组织使用，应该明智地考虑这个平台的安全性。在撰写本书时，Shodan已经确定了全球超过93,000个Tomcat实例（独立和集成在JBoss实例中），如下截图所示：
- en: '![](img/9513002f-fe30-487c-9f33-9b27c9f72d16.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9513002f-fe30-487c-9f33-9b27c9f72d16.png)'
- en: Vulnerabilities within the Apache Tomcat server can allow threat actors to exploit
    the application that is running on the server, and they can even go beyond generic
    application exploitation and end up getting access to an organization's internal
    network.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Tomcat服务器内的漏洞可以允许威胁行为者利用服务器上运行的应用程序，甚至可以超越通用应用程序的利用，最终获取对组织内部网络的访问权限。
- en: The Apache Tomcat architecture
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apache Tomcat架构
- en: 'Tomcat can be described as a series of different functional components that
    are combined together with well-defined rules. The following diagram represents
    the structure of Tomcat:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Tomcat可以被描述为一系列不同的功能组件，这些组件根据明确定义的规则组合在一起。以下图表代表了Tomcat的结构：
- en: '![](img/77b8d094-f942-4e64-a988-a1b220bf7e29.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/77b8d094-f942-4e64-a988-a1b220bf7e29.png)'
- en: 'Let''s try to understand the role of each component shown in the preceding
    diagram:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试着理解前面图表中显示的每个组件的作用：
- en: '**Server**: A server represents a whole Catalina servlet container. The `server.xml`
    file represents all the characteristics and the configuration of a Tomcat installation.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器**：服务器代表整个Catalina Servlet容器。`server.xml`文件代表Tomcat安装的所有特性和配置。'
- en: '**Service**: A service is a component inside the server that contains connectors
    that share a single container to process their incoming requests.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务**：服务是服务器内部包含连接器的组件，这些连接器共享单个容器来处理它们的传入请求。'
- en: '**Engine**: An engine receives and processes information coming in from different
    connectors and returns the output.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**引擎**：引擎接收并处理来自不同连接器的信息，并返回输出。'
- en: '**Host**: This is the network or domain name that is used by the server. One
    server can have multiple hosts.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主机**：这是服务器使用的网络或域名。一个服务器可以有多个主机。'
- en: '**Contexts**: This represents a web application. There can be multiple web
    applications on a host with different URL paths.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上下文**：表示Web应用程序。在主机上可以有多个具有不同URL路径的Web应用程序。'
- en: '**Connector**: A connector handles communication between the client and the
    server. There are different types of connectors for handling a variety of communications;
    for example, an HTTP connector is used to handle HTTP traffic, while an AJP connector
    is used to communicate with Apache using the AJP protocol.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接器**：连接器处理客户端和服务器之间的通信。有不同类型的连接器用于处理各种通信；例如，HTTP连接器用于处理HTTP流量，而AJP连接器用于使用AJP协议与Apache通信。'
- en: Now that we have a basic understanding of the Apache Tomcat architecture, let's
    examine the structure for the files and directories stored on a Tomcat server.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对Apache Tomcat架构有了基本的了解，让我们来看看Tomcat服务器上存储的文件和目录的结构。
- en: Files and their directory structures
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件及其目录结构
- en: 'The file and directory structure of Tomcat is similar to that of JBoss, which
    we discussed in the previous chapter. In this section, we will quickly go through
    the directory structure of Tomcat, shown in the following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Tomcat的文件和目录结构与我们在上一章中讨论的JBoss类似。在本节中，我们将快速浏览Tomcat的目录结构，如下面的屏幕截图所示：
- en: '![](img/8f354275-d7bb-48f2-b3a9-12da7f48941f.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8f354275-d7bb-48f2-b3a9-12da7f48941f.png)'
- en: 'The subdirectories in the Tomcat directory can be explained as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Tomcat目录中的子目录可以解释如下：
- en: '`bin`: This directory contains all of the scripts that are required when a
    server is initialized, such as startup and shutdown scripts and executables.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin`：此目录包含服务器初始化时所需的所有脚本，如启动和关闭脚本以及可执行文件。'
- en: '`common`: This directory contains common classes that Catalina and other web
    applications hosted by the developer can use.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`common`：这个目录包含Catalina和开发人员托管的其他Web应用程序可以使用的公共类。'
- en: '`conf`: This directory consists of server XML files and related **Document
    Type Definitions** (**DTDs**) to configure Tomcat.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conf`：这个目录包含用于配置Tomcat的服务器XML文件和相关的**文档类型定义**（**DTD**）。'
- en: '`logs`: This directory, as the name suggests, stores logs generated by Catalina
    and applications.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logs`：这个目录，顾名思义，存储了Catalina和应用程序生成的日志。'
- en: '`server`: This directory stores classes that are used solely by Catalina.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server`：这个目录存储仅由Catalina使用的类。'
- en: '`shared`: This directory stores classes that can be shared by all web applications.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shared`：这个目录存储可以被所有Web应用程序共享的类。'
- en: '`webapps`: This directory contains all the web applications.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webapps`：这个目录包含所有的Web应用程序。'
- en: '`work`: This directory represents temporary storage for files and directories.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`work`：这个目录代表文件和目录的临时存储。'
- en: 'One of the most interesting directories is the `webapps` directory:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 最有趣的目录之一是`webapps`目录：
- en: '![](img/b346e96d-e530-4b8d-8178-bb91f416e01a.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b346e96d-e530-4b8d-8178-bb91f416e01a.png)'
- en: 'By navigating to the `webapps` directory and listing the contents, we can take
    a look at the directories, as in the preceding screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 通过导航到`webapps`目录并列出内容，我们可以查看目录，如前面的屏幕截图所示：
- en: '`ROOT`: This is the web application''s root directory. It contains all the
    JSP files and HTML pages, client-side JAR files, and more.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ROOT`：这是Web应用程序的根目录。它包含所有的JSP文件和HTML页面，客户端JAR文件等。'
- en: '`docs`: This directory contains the Apache Tomcat documentation.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docs`：此目录包含Apache Tomcat的文档。'
- en: '`examples`: The `examples` folder contains servlet, JSP, and WebSocket examples
    to help developers with development.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`examples`：`examples`文件夹包含Servlet、JSP和WebSocket示例，以帮助开发人员进行开发。'
- en: '`host-manager`: The `host-manager` application lets us create, delete, and
    manage virtual hosts within Tomcat. This directory contains the code for this.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host-manager`：`host-manager`应用程序允许我们在Tomcat中创建、删除和管理虚拟主机。这个目录包含了这个应用程序的代码。'
- en: '`manager`: `manager` lets us manage the web applications installed on the Apache
    Tomcat instance in the form of **Web Application Archive** (**WAR**) files.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`manager`：`manager`允许我们管理安装在Apache Tomcat实例上的Web应用程序，以**Web应用程序存档**（**WAR**）文件的形式。'
- en: A clear understanding of the file and directory structures can help us to perform
    quite an efficient reconnaissance for our penetration tests on the target Tomcat
    server.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对文件和目录结构的清晰理解可以帮助我们在目标Tomcat服务器上进行非常有效的侦察。
- en: Detecting Tomcat installations
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测Tomcat安装
- en: For now, let's see how we can detect whether Tomcat is installed on a server
    and what the commonly known detection techniques that can be used for further
    reconnaissance are.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何检测服务器上是否安装了Tomcat，以及可以用于进一步侦察的常见检测技术。
- en: Detection via the HTTP response header – X-Powered-By
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过HTTP响应头检测 - X-Powered-By
- en: 'A very common way of detecting an Apache Tomcat installation is by looking
    at the `X-Powered-By` HTTP header in the server response:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 检测Apache Tomcat安装的一种常见方法是查看服务器响应中的`X-Powered-By` HTTP头：
- en: '![](img/fbdedd9c-6fec-4c58-a31a-33c9fc3e7a79.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fbdedd9c-6fec-4c58-a31a-33c9fc3e7a79.png)'
- en: A typical installation will give the Apache Tomcat version in the HTTP response
    header.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的安装将在HTTP响应头中给出Apache Tomcat版本。
- en: Detection via the HTTP response header – WWW-Authenticate
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过HTTP响应头检测 - WWW-Authenticate
- en: 'An easy method of detecting Tomcat is by requesting the `/manager/html` page.
    Once you have made the request, the server will respond with an HTTP code `401
    Unauthorized` reply with a `WWW-Authenticate` HTTP header:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 检测Tomcat的一种简单方法是请求`/manager/html`页面。一旦您发出请求，服务器将以HTTP代码`401未经授权`回复，并附带`WWW-Authenticate`
    HTTP头：
- en: '![](img/22bbe6a0-3f39-4392-bfe0-033f5e68783f.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22bbe6a0-3f39-4392-bfe0-033f5e68783f.png)'
- en: As you can see in the preceding screenshot, this specific header will have a
    `Tomcat Manager Application` string set to it and by using this header, we will
    be able to detect whether the target server has Tomcat installed.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，这个特定的头部将设置为`Tomcat Manager Application`字符串，通过使用这个头部，我们将能够检测目标服务器是否安装了Tomcat。
- en: Detection via HTML tags – the title tag
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过HTML标签检测 - 标题标签
- en: 'If you see a blank page when you open a Tomcat instance, you can still detect
    whether it''s a Tomcat page by looking at the HTML `<title>` tag:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在打开Tomcat实例时看到一个空白页面，您仍然可以通过查看HTML `<title>`标签来检测它是否是Tomcat页面：
- en: '![](img/c882c6ce-2563-4c74-861f-2d7381b9df58.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c882c6ce-2563-4c74-861f-2d7381b9df58.png)'
- en: The `Apache Tomcat`string is mentioned in between the `<title>` tags, as in
    the preceding screenshot.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`Apache Tomcat`字符串在`<title>`标签之间提到，就像前面的截图中一样。'
- en: Detection via HTTP 401 Unauthorized error
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过HTTP 401未经授权错误检测
- en: 'Tomcat installations often use the Tomcat Manager web application to manage
    and deploy web applications. It can be accessed via `URL/manager/html`. This produces
    an HTTP authentication panel:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Tomcat安装通常使用Tomcat Manager Web应用程序来管理和部署Web应用程序。它可以通过`URL/manager/html`访问。这会产生一个HTTP身份验证面板：
- en: '![](img/c5bcd2ac-93ad-4899-880d-df7e28fe05b6.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5bcd2ac-93ad-4899-880d-df7e28fe05b6.png)'
- en: Clicking Cancel on the popup will give you a 401 error, as in the preceding
    screenshot, which confirms the presence of Tomcat.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 单击弹出窗口上的“取消”将给您一个401错误，就像前面的截图中一样，这证实了Tomcat的存在。
- en: '**Note: **This kind of disclosure of information only exists in the case of
    Tomcat server misconfiguration.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**这种信息披露只存在于Tomcat服务器配置错误的情况下。'
- en: Detection via unique fingerprinting (hashing)
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过唯一指纹（哈希）检测
- en: 'We saw in previous chapters that most web applications can be detected using
    their favicons. The `md5` hash of the favicon for different versions can be compared
    to identify the version of Tomcat being used:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在之前的章节中看到，大多数Web应用程序可以通过它们的favicon来检测。可以比较不同版本的favicon的`md5`哈希来识别正在使用的Tomcat的版本：
- en: '![](img/be8b900c-7057-446d-b034-e5a79e062c6c.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/be8b900c-7057-446d-b034-e5a79e062c6c.png)'
- en: 'The following screenshot shows the hash in the OWASP favicon database list:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了OWASP favicon数据库列表中的哈希：
- en: '![](img/2b93069a-f8d5-4231-8596-b4f30d3617a9.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b93069a-f8d5-4231-8596-b4f30d3617a9.png)'
- en: We can also maintain our favicon database to check for different versions of
    Apache Tomcat installations.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以维护我们的favicon数据库，以检查不同版本的Apache Tomcat安装。
- en: Detection via directories and files
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过目录和文件检测
- en: 'When installed, Apache Tomcat also creates the `docs` and `examples` directories
    to help developers with application development and deployment. By default, the
    URIs for the folders are as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 安装时，Apache Tomcat还创建了`docs`和`examples`目录，以帮助开发人员进行应用程序开发和部署。默认情况下，文件夹的URI如下：
- en: '`/docs/`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/docs/`'
- en: '`/examples/`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/examples/`'
- en: 'We can also use SecLists ([https://github.com/danielmiessler/SecLists](https://github.com/danielmiessler/SecLists))
    to enumerate sensitive files in Tomcat:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用SecLists ([https://github.com/danielmiessler/SecLists](https://github.com/danielmiessler/SecLists))来枚举Tomcat中的敏感文件：
- en: '![](img/3ea0aab5-2608-482e-a656-6dcf05d30e22.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ea0aab5-2608-482e-a656-6dcf05d30e22.png)'
- en: The preceding screenshot shows the different files and folders that can be used
    to identify an instance with Tomcat installed on it. In the next section, we will
    work out how to identify the version numbers of Tomcat installations.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了可以用来识别安装了Tomcat的实例的不同文件和文件夹。在下一节中，我们将解决如何识别Tomcat安装的版本号。
- en: Version detection
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本检测
- en: Once we've confirmed that the server is running Tomcat, the next step is to
    establish the version information. In this section, we will look at a number of
    ways of detecting the version number of existing Tomcat installations.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们确认服务器正在运行Tomcat，下一步是建立版本信息。在本节中，我们将看一些检测现有Tomcat安装的版本号的方法。
- en: Version detection via the HTTP 404 error page
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过HTTP 404错误页面检测版本
- en: 'By default, Tomcat''s 404 error page discloses the version number that it is
    running, so all we need to do is to visit a URL that does not exist on the server
    and the server should throw back an error page, as in the following screenshot:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Tomcat的404错误页面会披露它正在运行的版本号，所以我们只需要访问服务器上不存在的URL，服务器应该会返回一个错误页面，如下面的截图所示：
- en: '![](img/d47dc1bc-db8a-4acf-b8a6-da4d9d2878cd.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d47dc1bc-db8a-4acf-b8a6-da4d9d2878cd.png)'
- en: Many administrators don't really hide the web server banner that discloses the
    version number. A threat actor can use this information to find a public or zero-day
    exploit from their arsenal to get access to the server.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 许多管理员实际上并没有隐藏披露版本号的Web服务器横幅。攻击者可以利用这些信息从其库中找到公开或零日利用来访问服务器。
- en: Version disclosure via Release-Notes.txt
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过Release-Notes.txt披露版本信息
- en: 'Tomcat also has a `Release-Notes.txt` file that contains details regarding
    enhancements incorporated as part of that release and also the known issues of
    that build. This file also discloses the Apache Tomcat server version number to
    a threat actor:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Tomcat还有一个`Release-Notes.txt`文件，其中包含有关该版本的增强功能和已知问题的详细信息。该文件还向威胁行为者披露了Apache
    Tomcat服务器的版本号：
- en: '![](img/05ebf851-7f60-4f71-b4be-379cb005df55.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/05ebf851-7f60-4f71-b4be-379cb005df55.png)'
- en: The first line of the release notes contains the version information, as in
    the preceding screenshot.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 发布说明的第一行包含版本信息，就像前面的截图中一样。
- en: Version disclosure via Changelog.html
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过Changelog.html披露版本信息
- en: 'Along with `Release-Notes.txt`, there is also a `Changelog.html` file that
    discloses the version number on the page, as shown:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`Release-Notes.txt`之外，还有一个`Changelog.html`文件，该文件在页面上披露了版本号，如下所示：
- en: '![](img/5da165be-331d-4ad7-862a-791654af70c3.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5da165be-331d-4ad7-862a-791654af70c3.png)'
- en: We can now move on to the next step, which is the exploitation of Tomcat installations.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以继续下一步，即利用Tomcat安装。
- en: Exploiting Tomcat
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用Tomcat
- en: In this section, we will look at how the exploitation of vulnerable versions
    of Tomcat can be performed. We will cover various techniques, including uploading
    a WAR shell and the JSP upload bypass.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看一下如何执行对Tomcat的易受攻击版本的利用。我们将涵盖各种技术，包括上传`WAR shell`和JSP上传绕过。
- en: 'Using the `search` command on Metasploit to look up Tomcat will provide us
    with a few available modules, as shown:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在Metasploit上使用`search`命令查找Tomcat将为我们提供一些可用的模块，如下所示：
- en: '![](img/40376757-444e-4a08-8914-36fd552d9b6e.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/40376757-444e-4a08-8914-36fd552d9b6e.png)'
- en: 'We will use the most basic module, which will brute-force Tomcat Manager and
    give us the credentials:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用最基本的模块，它将暴力破解Tomcat Manager并给我们凭据：
- en: 'To load the module, we can use the following command:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要加载模块，我们可以使用以下命令：
- en: '[PRE0]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Before using a module, it''s always good practice to know the workings of the
    module. Keeping that in mind, a pentester can tweak the module in case there''s
    a **Web Application Firewall** (**WAF**) in place. Once the module is loaded,
    we can use the `show options` command to view the options that need to be filled
    in by the tester (as in the following screenshot):'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用模块之前，了解模块的工作原理总是一个好习惯。牢记这一点，渗透测试人员可以在有**Web应用程序防火墙**（**WAF**）的情况下调整模块。模块加载后，我们可以使用`show
    options`命令来查看测试人员需要填写的选项（如下截图所示）：
- en: '![](img/db3b7a9d-2350-47af-aa2d-648e90e9a84b.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/db3b7a9d-2350-47af-aa2d-648e90e9a84b.png)'
- en: 'By viewing the options, we can see that it asks for the IP (`RHOSTS`) and port
    (`RPORT`) of the Tomcat installation, along with the word list to use to brute-force
    the credentials. We use the `run` command to execute the module, as shown:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过查看选项，我们可以看到它要求填写Tomcat安装的IP（`RHOSTS`）和端口（`RPORT`），以及用于暴力破解凭据的字典。我们使用`run`命令来执行模块，如下所示：
- en: '![](img/0fe596bb-26b5-42c3-bc6e-4ba4c456c207.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0fe596bb-26b5-42c3-bc6e-4ba4c456c207.png)'
- en: 'We''ll get a `Login Successful` message with a correct login/password combination,
    as shown:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将得到一个正确的登录/密码组合的`登录成功`消息，如下所示：
- en: '![](img/46cbd940-773d-4fd6-a513-5b5ccbe36865.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/46cbd940-773d-4fd6-a513-5b5ccbe36865.png)'
- en: Accessing the server by exploiting the default password vulnerability is one
    of the most common ways of exploiting Apache Tomcat. The attacker does not even
    have to focus a lot of energy on finding different vulnerable endpoints if they
    have obtained access by using the default password.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 利用默认密码漏洞访问服务器是利用Apache Tomcat的最常见方式之一。如果攻击者使用默认密码获得访问权限，甚至不需要花费大量精力来查找不同的易受攻击的端点。
- en: The Apache Tomcat JSP upload bypass vulnerability
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apache Tomcat JSP上传绕过漏洞
- en: 'There is a JSP upload bypass vulnerability that affects Tomcat 7.x, 8.x, and
    9.x and TomEE 1.x and 7.x. The vulnerability involves using a `PUT` method to
    upload a JSP file by bypassing the filename filter. A Metasploit module is also
    available for this exploit. Let''s use the module by executing the following command:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 影响Tomcat 7.x、8.x和9.x以及TomEE 1.x和7.x的JSP上传绕过漏洞。该漏洞涉及使用`PUT`方法绕过文件名过滤器上传JSP文件。此外，Metasploit模块也可用于此漏洞利用。让我们通过执行以下命令来使用该模块：
- en: '[PRE1]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了上述命令的输出：
- en: '![](img/54de054f-69e8-4449-b50c-29a507d73222.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/54de054f-69e8-4449-b50c-29a507d73222.png)'
- en: 'Setting up the `RHOSTS` value and executing the module using the `run` command
    is shown in the following screenshot:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`RHOSTS`值并使用`run`命令执行模块如下截图所示：
- en: '![](img/3f4f2d5f-53f2-4911-899a-4f4b9a293256.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f4f2d5f-53f2-4911-899a-4f4b9a293256.png)'
- en: 'As you can see in the following screenshot, this Metasploit module will first
    use the HTTP `PUT` method to upload a JSP file with `/` (forward slash) after
    the `.jsp` extension. If the Apache Tomcat instance responds back with an HTTP
    `201` (Created) code, this means that the file has been successfully uploaded
    to the server:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在以下截图中所看到的，这个Metasploit模块将首先使用HTTP的`PUT`方法来上传一个带有`.jsp`扩展名后面跟着`/`（斜杠）的JSP文件。如果Apache
    Tomcat实例以HTTP `201`（已创建）代码回应，这意味着文件已成功上传到服务器：
- en: '![](img/5b73533e-699d-4ee1-9559-b081338e1365.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5b73533e-699d-4ee1-9559-b081338e1365.png)'
- en: 'The reason why the file is uploaded is that there''s a file upload restriction
    vulnerability on the Tomcat server (on specific versions only) that filters out
    the files if the file extension is JSP. Using this forward slash, we can bypass
    this restriction to upload a malicious JSP-based web shell. In this case, the
    payload file is sent to the target server using the `PUT` method, as can be seen
    in the following screenshot:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 文件被上传的原因是Tomcat服务器存在文件上传限制漏洞（仅限特定版本），如果文件扩展名为JSP，则会过滤文件。使用这个斜杠，我们可以绕过这个限制来上传一个恶意的基于JSP的Web
    shell。在这种情况下，有效载荷文件被使用`PUT`方法发送到目标服务器，如下截图所示：
- en: '![](img/606bfda9-ee7a-4b36-9752-9c12c3603f48.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/606bfda9-ee7a-4b36-9752-9c12c3603f48.png)'
- en: 'As mentioned previously, in the case of a successful upload, the server will
    give an HTTP `201` code:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在成功上传的情况下，服务器将返回HTTP `201`代码。
- en: '![](img/575c984c-7d7f-4e6d-871a-4ed7f48389d6.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/575c984c-7d7f-4e6d-871a-4ed7f48389d6.png)'
- en: 'Once the payload file has been uploaded, the Metasploit module requests the
    same filename for our payload execution:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦有效载荷文件被上传，Metasploit模块将请求相同的文件名来执行我们的有效载荷：
- en: '![](img/765ec831-955b-4e9b-95ec-7a92404991f7.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/765ec831-955b-4e9b-95ec-7a92404991f7.png)'
- en: 'After a successful payload execution, we''ll get a generic shell:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 成功执行有效载荷后，我们将得到一个通用shell：
- en: '![](img/1eed01bb-bbc6-4e45-b145-38feaef1c8ac.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1eed01bb-bbc6-4e45-b145-38feaef1c8ac.png)'
- en: It's not necessary for us to always get a `root` (privileged) shell after exploiting
    a JSP upload bypass. There will be more cases where we have to escalate our privileges
    from a normal user to `root`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在利用JSP上传绕过后，我们并不总是需要获得`root`（特权）shell。还有更多的情况需要我们从普通用户升级到`root`。
- en: Tomcat WAR shell upload (authenticated)
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tomcat WAR shell上传（经过身份验证）
- en: 'Let''s say we have the credentials to an Apache Tomcat instance (maybe via
    snooping/sniffing or from a file with sensitive information). A user can run a
    web application by uploading a packed WAR file to the Apache Tomcat instance.
    In this section, we will upload a WAR file to get a bind/reverse shell connection.
    Please note that the WAR shell upload requires authentication to work; otherwise,
    the server will respond with an HTTP `401` (Unauthorized) code:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有Apache Tomcat实例的凭据（可能是通过窃听/嗅探或从包含敏感信息的文件中获得）。用户可以通过将打包的WAR文件上传到Apache Tomcat实例来运行Web应用程序。在本节中，我们将上传一个WAR文件以获得绑定/反向shell连接。请注意，WAR
    shell上传需要身份验证才能工作；否则，服务器将以HTTP `401`（未经授权）代码回应：
- en: 'To begin with, let''s request the `/manager/html` page. The server will ask
    for HTTP authentication:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们请求`/manager/html`页面。服务器将要求进行HTTP身份验证：
- en: '![](img/7370f154-d965-4538-ab20-af95a602c618.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7370f154-d965-4538-ab20-af95a602c618.png)'
- en: 'Once authenticated, the page will be redirected to `/manager/status`, as in
    the following screenshot:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦经过身份验证，页面将被重定向到`/manager/status`，如下图所示：
- en: '![](img/cea1d303-f1bd-4111-9aa4-1746d38822f3.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cea1d303-f1bd-4111-9aa4-1746d38822f3.png)'
- en: 'Clicking on List Applications will list all the installed applications that
    are managed by this Apache Tomcat instance:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“列出应用程序”将列出由此Apache Tomcat实例管理的所有已安装应用程序：
- en: '![](img/2d368d15-cb67-40ca-8b20-ddfdeeef971c.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d368d15-cb67-40ca-8b20-ddfdeeef971c.png)'
- en: 'Scrolling down the same page, we''ll find a Deploy section where we can either
    deploy the WAR that is on the server via the URL, or we can deploy it by uploading
    our own WAR file:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一页向下滚动，我们会找到一个“部署”部分，在这里我们可以通过URL部署服务器上的WAR，或者通过上传我们自己的WAR文件来部署：
- en: '![](img/128cdbc8-cc17-4905-bf31-b0ad7fcdd62b.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/128cdbc8-cc17-4905-bf31-b0ad7fcdd62b.png)'
- en: 'We can upload a WAR file (`redteam.war`) to the server from the WAR file to
    deploy section of the page. Clicking on the Deploy button will deploy our WAR
    file. In the event of a successful WAR deployment, our application will be installed
    on the Apache Tomcat server, which we can view from the List Applications option
    (as mentioned previously):'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以从页面的WAR文件部署部分向服务器上传WAR文件（`redteam.war`）。单击“部署”按钮将部署我们的WAR文件。在成功部署WAR后，我们的应用程序将安装在Apache
    Tomcat服务器上，我们可以从“列出应用程序”选项中查看（如前所述）：
- en: '![](img/fe60cb40-a7dc-44df-a592-17b47e8b0b09.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fe60cb40-a7dc-44df-a592-17b47e8b0b09.png)'
- en: 'As you can see in the preceding screenshot, our WAR file is deployed. Now,
    we just need to access our JSP shell from the browser normally and pass the commands
    to execute as values to the parameters (shown in the following screenshot):'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上面的屏幕截图中，我们的WAR文件已部署。现在，我们只需要正常从浏览器访问我们的JSP shell，并将要执行的命令作为参数的值传递（如下图所示）：
- en: '![](img/5d459ca1-acfa-429e-a31d-ccf42e1d4af2.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d459ca1-acfa-429e-a31d-ccf42e1d4af2.png)'
- en: 'The same process can also be achieved using Metasploit. Using the `tomcat_mgr_upload`
    module in Metasploit, we can upload a WAR shell. Let''s use this module by executing
    the following command in `msfconsole`:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Metasploit也可以实现相同的过程。使用Metasploit中的`tomcat_mgr_upload`模块，我们可以上传一个WAR shell。让我们通过在`msfconsole`中执行以下命令来使用这个模块：
- en: '[PRE2]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了前面命令的输出：
- en: '![](img/9fb439e1-dad9-4ef8-831d-637c0f9df625.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9fb439e1-dad9-4ef8-831d-637c0f9df625.png)'
- en: 'As this is an authenticated mechanism, we need to provide the credentials for
    HTTP authentication. Let''s execute this module so that Metasploit can upload
    the WAR file and execute the payload on the server:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个经过身份验证的机制，我们需要提供HTTP身份验证的凭据。让我们执行这个模块，以便Metasploit可以上传WAR文件并在服务器上执行有效载荷：
- en: '![](img/f8438f5e-4edb-4880-885d-256f004c2489.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f8438f5e-4edb-4880-885d-256f004c2489.png)'
- en: 'As you can see in the preceding screenshot, the module was successfully authenticated
    with the server and uploaded a WAR file (`ymRRnwH.war`). Once uploaded, the module
    then called the JSP payload packed inside the WAR file and executed it to get
    a reverse `meterpreter` connection:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，模块已成功通过服务器进行了身份验证，并上传了一个WAR文件（`ymRRnwH.war`）。上传后，模块调用了WAR文件中打包的JSP有效载荷，并执行它以获得反向`meterpreter`连接：
- en: '![](img/ec62a8d7-cd3e-4d0d-8f62-109538f30387.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec62a8d7-cd3e-4d0d-8f62-109538f30387.png)'
- en: 'The following are the steps that `meterpreter` checks while executing the `tomcat_mgr_upload`
    module:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行`tomcat_mgr_upload`模块时，`meterpreter`检查以下步骤：
- en: The Metasploit module checks whether the credentials are valid.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Metasploit模块检查凭据是否有效。
- en: If they are valid, the module gets the value for `org.apache.catalina.filters.CSRF_NONCE`
    from the server response (the CSRF token).
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果它们是有效的，模块将从服务器响应中获取`org.apache.catalina.filters.CSRF_NONCE`的值（CSRF令牌）。
- en: The module then tries to upload a WAR payload through the HTTP `POST` method
    (without authentication).
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，该模块尝试通过HTTP `POST`方法（无需身份验证）上传WAR有效载荷。
- en: If the preceding step fails, the module uploads the WAR file (`POST/manager/html/upload`)
    using the credentials provided to it.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果前面的步骤失败，模块将使用提供的凭据上传WAR文件（`POST/manager/html/upload`）。
- en: Upon successful upload, the module requests the JSP `meterpreter` file from
    the server, resulting in an opened `meterpreter` connection (a reverse connection,
    in this case).
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上传成功后，模块将从服务器请求JSP `meterpreter`文件，导致打开了`meterpreter`连接（在这种情况下是一个反向连接）。
- en: '**Note:**'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**'
- en: We have uploaded and executed the `meterpreter` shell to get a reverse connection.
    There are some cases where a reverse connection is not possible. In these instances,
    we can always look for bind connections or maybe tunnel the `meterpreter` sessions
    via HTTP.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '我们已经上传并执行了`meterpreter` shell以获得反向连接。有些情况下，反向连接是不可能的。在这些情况下，我们可以总是寻找绑定连接，或者通过HTTP隧道`meterpreter`会话。 '
- en: Now that we know how we can upload a WAR shell to an Apache Tomcat instance
    and how we can exploit some of the vulnerabilities, let's move on to the next
    level of attacks that are performed on the Apache Tomcat instance.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何将WAR shell上传到Apache Tomcat实例，以及如何利用一些漏洞，让我们继续进行对Apache Tomcat实例执行的攻击的下一级别。
- en: An introduction to Apache Struts
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apache Struts简介
- en: Apache Struts is a free, open source framework that follows the MVC architecture
    and is used to develop Java-based web applications. It uses the Java Servlet API.
    It was originally created by Craig McClanahan and was donated to the Apache Foundation
    in May 2000\. The first full release of Apache Struts 2 took place in 2007.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Struts是一个免费的开源框架，遵循MVC架构，用于开发基于Java的Web应用程序。它使用Java Servlet API。它最初是由Craig
    McClanahan创建的，并于2000年5月捐赠给Apache基金会。Apache Struts 2的第一个完整版本发布于2007年。
- en: In this section, we will look at a few vulnerabilities that have been discovered
    in Apache Struts.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看一下Apache Struts中发现的一些漏洞。
- en: Understanding OGNL
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解OGNL
- en: '**Object Graph Notation Language** (**OGNL**) is an EL that simplifies the
    accessibility of the data stored in `ActionContext`. `ActionContext` is a container
    of objects that an action might require for execution. OGNL is very heavily linked
    in Apache Struts 2 and is used to store form parameters as Java Bean variables
    in ValueStack. **ValueStack** is a storage area where data is stored to process
    a client request.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**对象图标记语言**（**OGNL**）是一种EL，它简化了存储在`ActionContext`中的数据的可访问性。`ActionContext`是一个包含了执行操作所需的对象的容器。OGNL在Apache
    Struts 2中有很强的关联，并用于将表单参数存储为ValueStack中的Java Bean变量。**ValueStack**是一个存储区，用于存储数据以处理客户端请求。'
- en: OGNL expression injection
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OGNL表达式注入
- en: OGNL expression injection occurs when unsanitized user input is passed to ValueStack
    for evaluation. In this section, we will try to understand the expression injection
    query and look at an example of exploitation.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当未经过滤的用户输入传递给ValueStack进行评估时，就会发生OGNL表达式注入。在本节中，我们将尝试理解表达式注入查询，并查看一个利用示例。
- en: 'The following screenshot shows an example of a vulnerable web application using
    Struts 2 that is vulnerable to CVE-2018-11776:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了一个使用Struts 2的易受攻击的Web应用程序的示例，该应用程序易受CVE-2018-11776的攻击：
- en: '![](img/8b675680-5015-40e8-be8c-7575ec7d8650.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8b675680-5015-40e8-be8c-7575ec7d8650.png)'
- en: 'Let''s try to exploit this Struts vulnerability (CVE-2018-11776) manually by
    taking the following steps:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试手动利用这个Struts漏洞（CVE-2018-11776），采取以下步骤：
- en: 'When you go to Configuration | Action Chaining in the menu bar, you will notice
    that the following request is sent to the server:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您转到菜单栏中的Configuration | Action Chaining时，您会注意到以下请求被发送到服务器：
- en: '![](img/3fcea68a-a0ef-4981-bfaf-af1b1b3cd15f.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3fcea68a-a0ef-4981-bfaf-af1b1b3cd15f.png)'
- en: 'The server then returns the following response:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后服务器返回以下响应：
- en: '![](img/832d68b3-c34d-4b7b-8707-64e85ba8fc3c.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/832d68b3-c34d-4b7b-8707-64e85ba8fc3c.png)'
- en: 'Now, we replace the `actionchaining` string with something else, such as `Testing123`,
    as we did in the following screenshot:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将`actionchaining`字符串替换为其他内容，例如`Testing123`，就像我们在以下屏幕截图中所做的那样：
- en: '![](img/5dfeff27-99b7-4d10-8998-77d9c43138ef.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5dfeff27-99b7-4d10-8998-77d9c43138ef.png)'
- en: 'When we do this, the server processes our `Testing123` string and responds
    with the same string:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们这样做时，服务器会处理我们的`Testing123`字符串，并用相同的字符串做出响应：
- en: '![](img/e2d6107e-672a-4815-8e8d-625244797946.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e2d6107e-672a-4815-8e8d-625244797946.png)'
- en: 'To test for an expression language injection such as OGNL, we need to use the `${..}`
    or `%{..}` syntax. OGNL will process anything that is included in `${..}` or `%{..}`.
    So, for a simple test, let''s use a `${123*123}` or `%{123*123}` string:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试诸如OGNL之类的表达式语言注入，我们需要使用`${..}`或`%{..}`语法。OGNL将处理包含在`${..}`或`%{..}`中的任何内容。因此，为了进行简单的测试，让我们使用`${123*123}`或`%{123*123}`字符串：
- en: '![](img/22f2e91b-a078-4f9f-8287-983fd56ca758.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22f2e91b-a078-4f9f-8287-983fd56ca758.png)'
- en: 'As the code resides in the parenthesis preceded by `$` or `%`, the server processes
    this as an OGNL expression and responds with the result shown in the following
    screenshot:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于代码位于以`$`或`%`开头的括号中，服务器将其处理为OGNL表达式，并以以下屏幕截图中显示的结果做出响应：
- en: '![](img/081adc0f-5dc1-4a35-8c6f-cf95e6b9f3c6.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/081adc0f-5dc1-4a35-8c6f-cf95e6b9f3c6.png)'
- en: Now that we have successfully confirmed the vulnerability in the preceding test
    case, let's understand how we can inject the payload and bypass the sandbox (if
    at all) while performing OGNL injection on the process.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经成功确认了前面测试案例中的漏洞，让我们了解如何在执行进程上进行OGNL注入时，如何注入有效负载并绕过沙箱（如果有的话）。
- en: Testing for remote code execution via OGNL injection
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试OGNL注入的远程代码执行
- en: 'To test the vulnerability, we will use the following payload:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试漏洞，我们将使用以下有效负载：
- en: '[PRE3]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Before breaking down the payload, let''s understand a few things about OGNL
    that will help us understand the payload better:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在分解有效负载之前，让我们了解一些关于OGNL的东西，这将帮助我们更好地理解有效负载：
- en: '| **Operators** | **Description** |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| **运算符** | **描述** |'
- en: '| `${..}` or `%{..}` | An OGNL expression block. |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| `${..}` or `%{..}` | 一个OGNL表达式块。 |'
- en: '| `(e)` | A parenthesized expression. |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| `(e)` | 一个带括号的表达式。 |'
- en: '| `e.method(args)` | The syntax for method calling. |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| `e.method(args)` | 方法调用的语法。 |'
- en: '| `e.property` | The syntax for calling the property. |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| `e.property` | 调用属性的语法。 |'
- en: '| `e1[e2]` | An array index. |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| `e1[e2]` | 数组索引。 |'
- en: '| `[e]` | An array index reference. |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| `[e]` | 数组索引引用。 |'
- en: '| `#variable` | The context variable reference. |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| `#variable` | 上下文变量引用。 |'
- en: '| `@class@method(args)` | The static method reference. |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| `@class@method(args)` | 静态方法引用。 |'
- en: '| `{e1,e2,e3,..}` | List creation—a comma (`,`) is used in the same way as
    a semicolon (`;`) to end a statement. |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| `{e1,e2,e3,..}` | 列表创建-逗号（`,`）的用法与分号（`;`）相同，用于结束语句。 |'
- en: '| `e1.(e2)` | Sub-expression evaluation. |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| `e1.(e2)` | 子表达式评估。 |'
- en: Now, let's break down the previously mentioned payload by referring to the preceding table.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过参考前面的表来分解先前提到的有效负载。
- en: In the previous versions of Struts, the `_memberAccess` object was used to control
    what OGNL could do, but in later versions, the `_memberAccess` object was even
    restricted with regards to constructor calling. This was due to the `excludedClasses`,
    `excludedPackageNames`, and `excludedPackageNamePatterns` blacklists, which deny
    access to specific classes and packages. Even though the `_memberAccess` object
    was accessible, there was a strong restriction placed on this object.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在以前的Struts版本中，`_memberAccess`对象用于控制OGNL的操作，但在后来的版本中，`_memberAccess`对象甚至受到了对构造函数调用的限制。这是由于`excludedClasses`、`excludedPackageNames`和`excludedPackageNamePatterns`黑名单，拒绝访问特定的类和包。即使`_memberAccess`对象是可访问的，对该对象也施加了严格的限制。
- en: To bypass a restriction like this, in Struts versions 2.3.20–2.3.29, we just
    have to replace the `_memberAccess` object with the `DefaultMemberAccess` object
    (an accessible static object from the `SecurityMemberAccess` class), which will
    allow us to control what OGNL can do without any restrictions.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 要绕过这样的限制，在Struts版本2.3.20-2.3.29中，我们只需用`DefaultMemberAccess`对象（`SecurityMemberAccess`类中的可访问静态对象）替换`_memberAccess`对象，这将允许我们控制OGNL的操作而没有任何限制。
- en: 'Hence, the first line of the payload is used to bypass the restriction on the `_memberAccess`
    object by changing the context from `_memberAccess` to `DefaultMemberAccess`:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，负载的第一行用于通过将上下文从`_memberAccess`更改为`DefaultMemberAccess`来绕过对`_memberAccess`对象的限制：
- en: '[PRE4]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding code, `OgnlContext` is a class that defines the execution context
    for an OGNL expression according to the Apache Common OGNL expression references
    ([https://commons.apache.org/proper/commons-ognl/apidocs/org/apache/commons/ognl/OgnlContext.html](https://commons.apache.org/proper/commons-ognl/apidocs/org/apache/commons/ognl/OgnlContext.html)).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，`OgnlContext`是一个类，根据Apache Common OGNL表达式参考（[https://commons.apache.org/proper/commons-ognl/apidocs/org/apache/commons/ognl/OgnlContext.html](https://commons.apache.org/proper/commons-ognl/apidocs/org/apache/commons/ognl/OgnlContext.html)）定义了OGNL表达式的执行上下文。
- en: 'Now that the context has been changed from `_memberAccess` to `DefaultMemberAccess`,
    we can set `MemberAccess` using the `setMemberAccess` method. However, in order
    to access the object, we first need to clear the blacklists (`excludedClasses`, `excludedPackageNames`, and `excludedPackageNamePatterns`).
    We can clear the blacklists by reverting back to the original context, which can
    be seen in the following highlighted line of our payload:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在上下文已从`_memberAccess`更改为`DefaultMemberAccess`，我们可以使用`setMemberAccess`方法设置`MemberAccess`。但是，为了访问对象，我们首先需要清除黑名单（`excludedClasses`、`excludedPackageNames`和`excludedPackageNamePatterns`）。我们可以通过恢复到原始上下文来清除黑名单，如我们负载的下一行突出显示所示：
- en: '[PRE5]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As we don''t have a context yet, we need to retrieve the context map, which
    can be done by accessing `ActionContext.container`**.** It is now possible to
    access this container as we have already requested the context from `struts.valueStack`**. **Refer
    to the following highlighted line of our payload:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们还没有上下文，我们需要检索上下文映射，可以通过访问`ActionContext.container`来完成。现在可以访问此容器，因为我们已经从`struts.valueStack`请求了上下文。请参考我们负载的以下突出显示行：
- en: '[PRE6]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now that we have access to the context map (refer to the first highlighted
    line of our payload), we can now clear the blacklists so that we can access the
    `DefaultMemberAccess` object, which has no restrictions. The second highlighted line
    of our payload does that:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经可以访问上下文映射（请参考我们负载的第一行突出显示），我们现在可以清除黑名单，以便访问`DefaultMemberAccess`对象，该对象没有限制。我们的负载的第二行突出显示行就是这样做的：
- en: '[PRE7]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once the `clear()` method is processed and we have cleared the blacklists,
    we can now set `MemberAccess` using the `setMemberAccess()` method set to `DEFAULT_MEMBER_ACCESS`**. **Refer
    to the following highlighted text in the payload:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`clear()`方法被处理并且我们已经清除了黑名单，我们现在可以使用`setMemberAccess()`方法设置为`DEFAULT_MEMBER_ACCESS`来设置`MemberAccess`。请参考负载中的以下突出显示文本：
- en: '[PRE8]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now that we have access to the `DEFAULT_MEMBER_ACCESS` object, we can call
    any class, method, and object that we want from the Java common utility package
    to run in OGNL. In this case, we''ll use the `Runtime().exec()` method to execute
    our command (`#a=@java.lang.Runtime@getRuntime().exec(''id'')`) and, to print
    the command execution output in the response, we''ll use the `getinputStream()`
    method, as you can see in the last two lines of our payload:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经可以访问`DEFAULT_MEMBER_ACCESS`对象，我们可以从Java常用实用程序包中调用任何类、方法和对象来在OGNL中运行。在这种情况下，我们将使用`Runtime().exec()`方法来执行我们的命令（`#a=@java.lang.Runtime@getRuntime().exec('id')`），并且为了在响应中打印命令执行输出，我们将使用`getinputStream()`方法，如负载的最后两行所示：
- en: '[PRE9]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now that we have a better understanding of the payload, let''s use the payload
    in the request, which can be seen in the following screenshot:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对负载有了更好的理解，让我们在请求中使用负载，如下面的屏幕截图所示：
- en: '![](img/ef923dc9-8c88-4f0f-8edf-f4acfbecf143.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ef923dc9-8c88-4f0f-8edf-f4acfbecf143.png)'
- en: 'The server will process the OGNL expression and, after giving access to the
    `DEFAULT_MEMBER_ACCESS` object, our `Runtime().exec()` method will be called,
    which will execute our command:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器将处理OGNL表达式，并在允许访问`DEFAULT_MEMBER_ACCESS`对象后，将调用我们的`Runtime().exec()`方法，该方法将执行我们的命令：
- en: '![](img/de663026-6b7e-4800-9c9b-d160ac8beaee.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de663026-6b7e-4800-9c9b-d160ac8beaee.png)'
- en: The output of the `'id'` command will be printed in the `Location` HTTP response
    header, as you can see in the preceding screenshot. Now that we have understood
    the OGNL expression and its manual exploitation, let's try to exploit it using
    Metasploit.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`''id''`命令的输出将打印在`Location` HTTP响应头中，如前面的屏幕截图所示。现在我们已经了解了OGNL表达式及其手动利用，让我们尝试使用Metasploit来利用它。'
- en: Testing for blind remote code execution via OGNL injection
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过OGNL注入测试盲远程代码执行
- en: 'This is a different scenario where the server is vulnerable to Apache Struts
    2 **Remote Code Execution** (**RCE**) vulnerability, but the code execution response
    is hidden for some reason. In a scenario like this, we can still confirm the RCE
    vulnerability by using the `sleep()` function. Similar to the `sleep()` function
    used in time-based SQL injection, we can use this function to check the response
    time. We have executed the `sleep()` function for 2,000 ms, as you can see in
    the following screenshot:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个不同的情景，服务器对Apache Struts 2 **远程代码执行**（**RCE**）漏洞存在漏洞，但由于某种原因，代码执行响应被隐藏了。在这种情况下，我们仍然可以通过使用`sleep()`函数来确认RCE漏洞。类似于时间基本的SQL注入中使用的`sleep()`函数，我们可以使用此函数来检查响应时间。我们已经执行了`sleep()`函数2,000毫秒，如下面的屏幕截图所示：
- en: '![](img/133008cf-d3d2-4038-a118-469dfc9a4140.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/133008cf-d3d2-4038-a118-469dfc9a4140.png)'
- en: 'To confirm the vulnerability, we just have to look at the response time from
    the server, which is the time the server took to process the request and send
    us the response. For this scenario, we executed the `sleep()` function for 2,000
    ms and the server responded with the request in 2,010 ms, as in the following
    screenshot:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 要确认漏洞，我们只需查看服务器的响应时间，即服务器处理请求并发送响应的时间。对于这种情况，我们执行了`sleep()`函数2,000毫秒，服务器在2,010毫秒内响应了请求，如下面的屏幕截图所示：
- en: '![](img/6f0c7306-26a9-4daa-8d8b-ef1cefc6bf77.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6f0c7306-26a9-4daa-8d8b-ef1cefc6bf77.png)'
- en: We should always check for the existence of the vulnerability by changing the
    time to different values.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该始终通过更改时间为不同的值来检查漏洞的存在。
- en: Testing for OGNL out-of-band injection
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试OGNL带外注入
- en: 'Another way of confirming the vulnerability is by executing commands that will
    interact with our own server placed outside the organization. To check for OGNL
    **Out-Of-Band** (**OOB**) injection, we can execute a simple `ping` command, as in
    the following screenshot:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 确认漏洞的另一种方法是执行与我们放置在组织外的自己的服务器进行交互的命令。要检查OGNL **带外** (**OOB**)注入，我们可以执行一个简单的`ping`命令，如下截图所示：
- en: '![](img/8911b640-c030-4405-b267-d0775ee5f557.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8911b640-c030-4405-b267-d0775ee5f557.png)'
- en: 'Before sending the payload to the server, we need to use `tcpdump` to listen
    on the public-facing interface of our server. We can execute the `tcpdump icmp
    host <ip>` command to filter the ICMP `echo request` and `echo reply` packets
    on our server. We need to do this so that when we execute the payload, we can
    get the `ping` echo request on our server, as in the following screenshot:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在将有效载荷发送到服务器之前，我们需要使用`tcpdump`在服务器的公共接口上进行监听。我们可以执行`tcpdump icmp host <ip>`命令来过滤服务器上的ICMP
    `echo request`和`echo reply`数据包。我们需要这样做，这样当我们执行有效载荷时，我们可以在服务器上收到`ping`的echo request，就像下面的截图中一样：
- en: '![](img/cf7a5fbd-b7cd-4297-829b-48ed712332d6.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cf7a5fbd-b7cd-4297-829b-48ed712332d6.png)'
- en: For OOB interactions, we can try different protocols, such as HTTP, FTP, SSH,
    and DNS. The OOB injection helps if we're not able to get the output (blind) to
    the response and to check whether getting a reverse shell connection is possible.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 对于OOB交互，我们可以尝试不同的协议，如HTTP、FTP、SSH和DNS。如果我们无法获得输出（盲目），并且要检查是否可能获得反向shell连接，那么OOB注入会有所帮助。
- en: Struts 2 exploitation using Metasploit
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit进行Struts 2利用
- en: 'Now that we have exploited the vulnerabilities of Struts 2 manually and understood
    the concepts clearly, we''ll see how easy it is to exploit the same vulnerability
    using Metasploit. Using Metasploit makes exploitation much easier. We can search
    for all the available modules on Struts by performing the following steps:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经手动利用了Struts 2的漏洞并清楚地理解了相关概念，我们将看到使用Metasploit利用相同漏洞有多么容易。使用Metasploit可以使利用变得更加容易。我们可以通过以下步骤搜索Struts上所有可用的模块：
- en: 'Search for `struts` in the Metasploit console, as shown:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Metasploit控制台中搜索`struts`，如下所示：
- en: '![](img/160bd356-b5f6-415c-82cb-fb50948bf243.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![](img/160bd356-b5f6-415c-82cb-fb50948bf243.png)'
- en: 'The following is a demo web application that is running Apache Struts. This
    application is vulnerable to the `S2-013` vulnerability (CVE-2013-1966). Let''s
    look at how we can exploit this vulnerability using Metasploit:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是一个运行Apache Struts的演示Web应用程序。该应用程序容易受到`S2-013`漏洞（CVE-2013-1966）的影响。让我们看看如何使用Metasploit来利用这个漏洞：
- en: '![](img/aa4b7727-8ce7-49b0-a679-6c1ccd608137.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aa4b7727-8ce7-49b0-a679-6c1ccd608137.png)'
- en: 'We load the Metasploit exploit by typing the following command in `msfconsole`:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过在`msfconsole`中输入以下命令来加载Metasploit exploit：
- en: '[PRE10]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'By typing the `show options` command, we can see the options available, as
    shown:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入`show options`命令，我们可以看到可用的选项，如下所示：
- en: '![](img/902fffb8-ec15-4e3d-bcd3-35530ed34d5d.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![](img/902fffb8-ec15-4e3d-bcd3-35530ed34d5d.png)'
- en: Setting the options and running the exploit will give us the command shell.
    In the event that there is no reverse shell connection, we need to perform a simple
    egress test to check whether all the ports are allowed from the target server
    (outbound connection). If the outbound connections are blocked by a firewall,
    we can always try to get a bind connection via the HTTP tunnel.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 设置选项并运行exploit将给我们命令shell。如果没有反向shell连接，我们需要执行简单的出站连接测试，以检查目标服务器是否允许所有端口的连接。如果防火墙阻止了出站连接，我们可以尝试通过HTTP隧道获取绑定连接。
- en: Summary
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered the basics of Tomcat and read about its architecture
    and file structure. Then, we moved on to the different techniques for identifying
    Tomcat and detecting the version number. Next, we looked at the exploitation of
    Tomcat using the JSP and WAR shell uploads. Toward the end of the chapter, we
    covered Apache Struts, OGNL, and the exploitation of Tomcat.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了Tomcat的基础知识，并了解了其架构和文件结构。然后，我们转向了识别Tomcat和检测版本号的不同技术。接下来，我们看了JSP和WAR
    shell上传的Tomcat利用。在本章的最后，我们介绍了Apache Struts、OGNL和Tomcat的利用。
- en: In the next chapter, we'll learn how to pen test another famous technological
    platform—Jenkins.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何对另一个著名的技术平台Jenkins进行渗透测试。
- en: Questions
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: In the case of black-box penetration testing, how can we identify the Tomcat
    servers publicly?
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在黑盒渗透测试的情况下，我们如何公开识别Tomcat服务器？
- en: Will the **`Changelog.html`** file always be present on the Apache Tomcat server?
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**`Changelog.html`**文件是否总是存在于Apache Tomcat服务器上？'
- en: I have successfully uploaded the JSP shell to the Apache Tomcat server. However,
    I am unable to access it. What could be the problem?
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我已成功将JSP shell上传到Apache Tomcat服务器。然而，我无法访问它。可能是什么问题？
- en: I found an OGNL OOB injection. How can I exploit this further?
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我发现了一个OGNL OOB注入。我该如何进一步利用这个漏洞？
- en: Further reading
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following links can be used as further reference for understanding Apache
    Tomcat and CVE 2019-0232:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接可用作进一步了解Apache Tomcat和CVE 2019-0232的参考：
- en: '[https://blog.trendmicro.com/trendlabs-security-intelligence/uncovering-cve-2019-0232-a-remote-code-execution-vulnerability-in-apache-tomcat/](https://blog.trendmicro.com/trendlabs-security-intelligence/uncovering-cve-2019-0232-a-remote-code-execution-vulnerability-in-apache-tomcat/)'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://blog.trendmicro.com/trendlabs-security-intelligence/uncovering-cve-2019-0232-a-remote-code-execution-vulnerability-in-apache-tomcat/](https://blog.trendmicro.com/trendlabs-security-intelligence/uncovering-cve-2019-0232-a-remote-code-execution-vulnerability-in-apache-tomcat/)'
- en: '[https://github.com/apache/tomcat](https://github.com/apache/tomcat)'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/apache/tomcat](https://github.com/apache/tomcat)'
