- en: Chapter 4. WLAN Encryption Flaws
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章 WLAN加密缺陷
- en: '|   | *"640K is more memory than anyone will ever need."* |   |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|   | *“640K是任何人永远不需要的内存。”* |   |'
- en: '|   | --*Bill Gates, Founder, Microsoft* |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|   | --*比尔·盖茨，微软创始人* |'
- en: '*Even with the best of intentions, the future is always unpredictable. The
    WLAN committee designed WEP and then WPA to be foolproof encryption mechanisms
    but, over time, both these mechanisms had flaws that have been widely publicized
    and exploited in the real world.*'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*即使怀着最好的意图，未来总是不可预测的。WLAN委员会设计了WEP和WPA，旨在成为万无一失的加密机制，但随着时间的推移，这两种机制都暴露出了缺陷，这些缺陷已经被广泛报道并在现实世界中被利用。*'
- en: '*WLAN encryption mechanisms have had a long history of being vulnerable to
    cryptographic attacks. It started with WEP in early 2000, which eventually was
    completely broken. In recent times, WPA has been proven to contain multiple flaws
    that have been addressed and readdressed. Even though there is no public attack
    available currently to break WPA in all general conditions, there are attacks
    that are feasible under special circumstances.*'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*WLAN加密机制长期以来一直容易受到密码学攻击。它始于2000年初的WEP，最终完全被破解。近年来，WPA已被证明包含多个缺陷，这些缺陷已经被多次处理和重新处理。尽管目前没有公开的攻击能够在所有一般条件下破解WPA，但在特殊情况下，某些攻击是可行的。*'
- en: 'In this chapter, we will take a look at the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Different encryption schemas in WLANs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WLAN中的不同加密方案
- en: Cracking WEP encryption
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破解WEP加密
- en: Cracking WPA encryption
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破解WPA加密
- en: WLAN encryption
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WLAN加密
- en: 'WLANs transmit data over the air and thus there is an inherent need to protect
    data confidentiality. This is best done using encryption. The WLAN committee (IEEE
    802.11) formulated the following protocols for data encryption:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: WLAN通过空气传输数据，因此保护数据机密性是一个内在需求。最好的方法是使用加密。WLAN委员会（IEEE 802.11）制定了以下数据加密协议：
- en: '**Wired Equivalent Privacy** (**WEP**)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有线等效隐私**（**WEP**）'
- en: '**Wi-Fi Protected Access** (**WPA**)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Wi-Fi受保护访问**（**WPA**）'
- en: '**Wi-Fi Protected Access v2** (**WPA2**)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Wi-Fi受保护访问v2**（**WPA2**）'
- en: In this chapter, we will take a look at each of these encryption protocols and
    demonstrate various attacks against them.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将逐一了解这些加密协议，并演示对它们的各种攻击。
- en: WEP encryption
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WEP加密
- en: The WEP protocol was known to be flawed as early as 2000 but, surprisingly,
    it is still present in a lot of organizations and access points still ship with
    WEP enabled capabilities.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: WEP协议早在2000年就已被发现存在缺陷，但令人惊讶的是，它仍然存在于许多组织中，很多接入点仍然出厂时启用了WEP功能。
- en: 'There are many cryptographic weaknesses in WEP and they were discovered by
    Walker, Arbaugh, Fluhrer, Martin, Shamir, KoreK, and many others. Evaluation of
    WEP from a cryptographic standpoint is not required for a basic understanding
    of how to break it. In this section, we will take a look at how to break WEP encryption
    using readily available tools on Kali Linux. This includes the entire `aircrack-ng`
    suite of tools: `airmon-ng`, `aireplay-ng`, `airodump-ng`, `aircrack-ng`, and
    others.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: WEP存在许多加密弱点，这些弱点是由Walker、Arbaugh、Fluhrer、Martin、Shamir、KoreK等人发现的。从密码学的角度评估WEP并不是理解如何破解它的基本要求。在本节中，我们将看看如何使用Kali
    Linux上现成的工具破解WEP加密。这包括整个`aircrack-ng`工具套件：`airmon-ng`、`aireplay-ng`、`airodump-ng`、`aircrack-ng`等。
- en: The fundamental weakness in WEP is its use of RC4 and a short IV value that
    is recycled every 224 frames. While this may appear to be a large number, there
    is a 50 percent chance of four IV reuses every 5,000 packets. To use this to our
    advantage, we generate a large amount of traffic so that we can increase the likelihood
    of IVs that have been reused and thus compare two cipher texts encrypted with
    the same IV and key.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: WEP的根本弱点是其使用RC4和一个每224帧就会回收的短IV值。虽然这看起来是一个大数字，但每5000个数据包就有50%的概率出现四次IV重用。为了利用这一点，我们需要生成大量流量，以增加IV被重用的可能性，从而比较使用相同IV和密钥加密的两个密文。
- en: Let's now first set up WEP in our test lab and see how we can break it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们首先在测试实验室中设置WEP，并看看我们如何破解它。
- en: Time for action – cracking WEP
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——破解WEP
- en: 'Follow the given instructions to get started:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 按照给定的说明开始操作：
- en: Let's first connect to our access point Wireless Lab and go to the settings
    area that deals with wireless encryption mechanisms.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先连接到我们的接入点无线实验室，进入处理无线加密机制的设置区域。
- en: On my access point, this can be done by setting the **Security Mode** to **WEP**.
    We will also need to set the WEP key length. As shown in the following screenshot,
    I have set WEP to use **128bit** keys. I have set the default key to WEP **Key
    1** and the value in hex to `abcdefabcdefabcdefabcdef12` as the 128-bit WEP key.
    You can set this to whatever you choose:![Time for action – cracking WEP](graphics/B09903_04_01.jpg)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我的接入点上，可以通过将**安全模式**设置为**WEP**来完成此操作。我们还需要设置WEP密钥长度。如下截图所示，我已将WEP设置为使用**128位**密钥。我已将默认密钥设置为WEP的**密钥
    1**，十六进制值为`abcdefabcdefabcdefabcdef12`，作为128位WEP密钥。您可以根据需要进行设置：![实施行动 - 破解WEP](graphics/B09903_04_01.jpg)
- en: Once the settings are applied, the access point should now be offering WEP as
    the encryption mechanism of choice. Let's now set up the attacker machine.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用设置后，接入点现在应该提供WEP作为首选的加密机制。现在让我们设置攻击者机器。
- en: 'Let''s bring up `wlan0` by issuing the following command:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过发出以下命令来启动`wlan0`：
- en: '[PRE0]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, we will run the following command:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将运行以下命令：
- en: '[PRE1]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is done to create `wlan0mon`, a monitor mode interface, as shown in the
    following screenshot. Verify that the `wlan0mon` interface has been created using
    the `ifconfig` command:![Time for action – cracking WEP](graphics/B09903_04_02.jpg)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是为了创建`wlan0mon`，一个监控模式接口，如下截图所示。使用`ifconfig`命令验证`wlan0mon`接口是否已创建：![实施行动 -
    破解WEP](graphics/B09903_04_02.jpg)
- en: 'Let''s run `airodump-ng` to locate our lab access point using the following
    command:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们运行`airodump-ng`以查找我们的实验室接入点，使用以下命令：
- en: '[PRE2]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see in the following screenshot, we are able to see the `Wireless
    Lab` access point running WEP:![Time for action – cracking WEP](graphics/B09903_04_03.jpg)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您在下面的截图中所见，我们能够看到运行WEP的`Wireless Lab`接入点：![实施行动 - 破解WEP](graphics/B09903_04_03.jpg)
- en: 'For this exercise, we are only interested in the `Wireless Lab` network, so
    we can fine-tune our command to only see packets for this network:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于此练习，我们只关心`Wireless Lab`网络，因此可以调整命令以仅查看此网络的数据包：
- en: '[PRE3]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'An example command line is shown in the following screenshot:'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面的截图显示了一个示例命令行：
- en: '![Time for action – cracking WEP](graphics/B09903_04_04.jpg)'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![实施行动 - 破解WEP](graphics/B09903_04_04.jpg)'
- en: We will request `airodump-ng` to save the packets into a `pcap` file using the
    `--write` flag:![Time for action – cracking WEP](graphics/B09903_04_05.jpg)
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将请求`airodump-ng`使用`--write`标志将数据包保存到`pcap`文件中：![实施行动 - 破解WEP](graphics/B09903_04_05.jpg)
- en: Now, let's connect our wireless client to the access point and use the WEP key
    as `abcdefabcdefabcdefabcdef12`. Once the client has successfully connected, `airodump-ng`
    should report it on the screen:![Time for action – cracking WEP](graphics/B09903_04_06.jpg)
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将无线客户端连接到接入点，并使用WEP密钥作为`abcdefabcdefabcdefabcdef12`。一旦客户端成功连接，`airodump-ng`应在屏幕上报告它：![实施行动
    - 破解WEP](graphics/B09903_04_06.jpg)
- en: If you execute `ls` in the same directory, you will be able to see files prefixed
    with `WEPCrackingDemo-*`, as shown in the following screenshot. These are traffic
    dump files created by `airodump-ng`:![Time for action – cracking WEP](graphics/B09903_04_07.jpg)
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您在同一目录中执行`ls`命令，您将能够看到以`WEPCrackingDemo-*`为前缀的文件，如下截图所示。这些是由`airodump-ng`创建的流量转储文件：![实施行动
    - 破解WEP](graphics/B09903_04_07.jpg)
- en: If you notice the `airodump-ng` screen, there are very few data packets listed
    under `#Data` (only `35`):![Time for action – cracking WEP](graphics/B09903_04_08.jpg)
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您注意到`airodump-ng`屏幕，`#Data`下列出的数据包非常少（仅`35`）：![实施行动 - 破解WEP](graphics/B09903_04_08.jpg)
- en: In WEP cracking, we need a large number of data packets, encrypted with the
    same key to exploit weaknesses in the protocol. So, we will have to force the
    network to produce more data packets. To do this, we will use the `aireplay-ng`
    tool.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在WEP破解中，我们需要大量使用相同密钥加密的数据包来利用协议中的弱点。因此，我们将不得不强制网络产生更多数据包。为此，我们将使用`aireplay-ng`工具。
- en: We will capture ARP packets on the wireless network using `aireplay-ng` and
    inject them back into the network to simulate ARP responses. We will be starting
    `aireplay-ng` in a separate window, as shown in the next screenshot. Replaying
    these packets a few thousand times, we will generate a lot of data traffic on
    the network. Even though `aireplay-ng` does not know the WEP key, it is able to
    identify the ARP packets by looking at the size of the packets. ARP is a fixed
    header protocol; thus, the size of the ARP packets can be easily determined and
    can be used to identify them even within encrypted traffic. We will run `aireplay-ng`
    with the options that are discussed next. The `-3` option is for ARP replay, `-b`
    specifies the BSSID of our network, and `-h` specifies the client MAC address
    that we are spoofing. Don't forget to add the adapter to use. We need to do this,
    as replay attacks will only work for authenticated and associated client MAC addresses:![Time
    for action – cracking WEP](graphics/B09903_04_09.jpg)
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用`aireplay-ng`在无线网络上捕获ARP数据包，并将它们注入网络以模拟ARP响应。我们将在单独的窗口中启动`aireplay-ng`，如下一张截图所示。重复这些数据包数千次，我们将在网络上生成大量的数据流量。尽管`aireplay-ng`不知道WEP密钥，但它能够通过检查数据包的大小识别ARP数据包。ARP是一个固定头部的协议；因此，可以轻松确定ARP数据包的大小，甚至在加密流量中也可以识别它们。我们将运行带有下列讨论的选项的`aireplay-ng`。`-3`选项是ARP重放，`-b`指定我们网络的BSSID，`-h`指定我们正在欺骗的客户端MAC地址。不要忘记添加要使用的适配器。我们需要这样做，因为重放攻击仅适用于经过身份验证和关联的客户端MAC地址：![操作时间
    - 破解WEP](graphics/B09903_04_09.jpg)
- en: Very soon you should see that `aireplay-ng` was able to sniff ARP packets and
    started replaying them into the network. If you encounter channel-related errors
    as I did, append `--ignore-negative-one` to your command, as shown in the following
    screenshot:![Time for action – cracking WEP](graphics/B09903_04_10.jpg)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 非常快速，你应该看到`aireplay-ng`能够嗅探ARP数据包，并开始将它们重新发送到网络中。如果像我一样遇到与信道相关的错误，请在命令末尾添加`--ignore-negative-one`，如下截图所示：![操作时间
    - 破解WEP](graphics/B09903_04_10.jpg)
- en: At this point, `airodump-ng` will also start registering a lot of data packets.
    All these sniffed packets are being stored in the `WEPCrackingDemo-*` files that
    we saw previously:![Time for action – cracking WEP](graphics/B09903_04_11.jpg)
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，`airodump-ng`也将开始注册大量的数据包。所有这些嗅探到的数据包都将存储在我们之前看到的`WEPCrackingDemo-*`文件中：![操作时间
    - 破解WEP](graphics/B09903_04_11.jpg)
- en: Now, let's start with the actual cracking part! Fire up `aircrack-ng` with the
    option `WEPCRackingDemo-0*.cap` in a new window. This will start the `aircrack-ng`
    software and it will begin working on cracking the WEP key using the data packets
    in the file. Note that it is a good idea to have `airodump-ng` collect the WEP
    packets, `aireplay-ng` do the replay attack, and `aircrack-ng` attempt to crack
    the WEP key based on the captured packets, all at the same time. In this experiment,
    all of them are open in separate windows:![Time for action – cracking WEP](graphics/B09903_04_12.jpg)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们开始实际的破解部分！在新窗口中启动`aircrack-ng`，使用选项`WEPCrackingDemo-0*.cap`。这将启动`aircrack-ng`软件，并开始使用文件中的数据包破解WEP密钥。请注意，让`airodump-ng`收集WEP数据包，让`aireplay-ng`执行重播攻击，并让`aircrack-ng`尝试基于捕获的数据包破解WEP密钥，是个好主意。在这个实验中，它们都在单独的窗口中打开：![操作时间
    - 破解WEP](graphics/B09903_04_12.jpg)
- en: Your screen should look like the following screenshot when Aircrack-ng is working
    on the packets to crack the WEP key:![Time for action – cracking WEP](graphics/B09903_04_13.jpg)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当Aircrack-ng正在处理数据包以破解WEP密钥时，你的屏幕应该像下面的截图一样：![操作时间 - 破解WEP](graphics/B09903_04_13.jpg)
- en: The number of data packets required to crack the key is nondeterministic, but
    generally in the order of a hundred thousand or more. On a fast network (or using
    `aireplay-ng`), this should take 5-10 minutes at most. You may need to restart
    this process several times.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 破解密钥所需的数据包数量是不确定的，但通常在十万个或更多的数量级上。在快速网络上（或使用`aireplay-ng`），这应该最多需要5-10分钟。您可能需要多次重启此过程。
- en: Once enough data packets have been captured and processed, `aircrack-ng` should
    be able to break the key. Once it does, it proudly displays it in the terminal
    and exits, as shown in the following screenshot:![Time for action – cracking WEP](graphics/B09903_04_14.jpg)
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦捕获并处理了足够的数据包，`aircrack-ng`应该能够破解密钥。一旦成功，它会在终端中骄傲地显示密钥并退出，如下面的截图所示：![操作时间 -
    破解WEP](graphics/B09903_04_14.jpg)
- en: It is important to note that WEP is totally flawed and any WEP key (no matter
    how complex) will be cracked by `aircrack-ng`. The only requirement is that a
    large enough number of data packets, encrypted with this key, are made available
    to `aircrack-ng`.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要注意的是，WEP是完全有缺陷的，任何WEP密钥（无论多复杂）都会被`aircrack-ng`破解。唯一的要求是，必须有足够多的数据包（使用此密钥加密）可以提供给`aircrack-ng`。
- en: '*What just happened?*'
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We set up WEP in our lab and successfully cracked the WEP key. In order to do
    this, we first waited for a legitimate client of the network to connect to the
    access point. After this, we used the `aireplay-ng` tool to replay ARP packets
    into the network. This caused the network to send ARP replay packets, thus greatly
    increasing the number of data packets sent over the air. We then used the `aircrack-ng`
    tool to crack the WEP key by analyzing cryptographic weaknesses in these data
    packets.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在实验室中设置了WEP并成功破解了WEP密钥。为此，我们首先等待网络的合法客户端连接到接入点。之后，我们使用`aireplay-ng`工具将ARP数据包重放到网络中。这导致网络发送ARP重放数据包，从而大大增加了通过无线传输的数据包数量。然后，我们使用`aircrack-ng`工具，通过分析这些数据包中的加密弱点来破解WEP密钥。
- en: Note that we can also fake an authentication to the access point using the **Shared
    Key Authentication** (**SKA**) bypass technique we learned in the last chapter.
    This can come in handy if the legitimate client leaves the network. This will
    ensure that we can spoof an authentication and association and continue to send
    our replayed packets into the network.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们还可以通过使用**共享密钥认证**（**SKA**）绕过技术来伪造对接入点的认证，这种技术是我们在上一章学到的。如果合法客户端离开网络，这个方法会非常有用。这样，我们可以伪造认证和关联，并继续将重放的数据包发送到网络中。
- en: Have a go hero – fake authentication with WEP cracking
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动手试试，英雄 – 使用WEP破解伪造认证
- en: In the previous exercise, if the legitimate client had suddenly logged off the
    network, we would not have been able to replay the packets as the access point
    will refuse to accept packets from unassociated clients.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个练习中，如果合法客户端突然从网络中注销，我们将无法重放数据包，因为接入点会拒绝接收来自未关联客户端的数据包。
- en: Your challenge will be to fake an authentication and association using the SKA
    bypass we learnt in the last chapter, while WEP cracking is going on. Log off
    the legitimate client from the network and verify that you are still able to inject
    packets into the network and whether the access point accepts and responds to
    them.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你的挑战是，在WEP破解进行的同时，利用我们在上一章学到的SKA绕过技术伪造认证和关联。将合法客户端从网络中注销，并验证你是否仍然能够向网络注入数据包，以及接入点是否接受并响应这些数据包。
- en: WPA/WPA2
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WPA/WPA2
- en: WPA (or WPA v1 as it is referred to sometimes) primarily uses the **Temporal
    Key Integrity Protocol** (**TKIP**) encryption algorithm. TKIP was aimed at improving
    WEP, without requiring completely new hardware to run it. WPA2 in contrast mandatorily
    uses the AES-CCMP algorithm for encryption, which is much more powerful and robust
    than TKIP.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: WPA（或有时称为WPA v1）主要使用**临时密钥完整性协议**（**TKIP**）加密算法。TKIP旨在改进WEP，而不需要完全新的硬件来支持它。相比之下，WPA2强制使用AES-CCMP算法进行加密，这比TKIP强大且稳定得多。
- en: Both WPA and WPA2 allow either EAP-based authentication, using RADIUS servers
    (Enterprise) or a **Pre-Shared Key** (**PSK**) (personal)-based authentication
    schema.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: WPA和WPA2都允许使用基于EAP的认证，通过RADIUS服务器（企业版）或基于**预共享密钥**（**PSK**）（个人版）的认证方案。
- en: WPA/WPA2 PSK is vulnerable to a dictionary attack. The inputs required for this
    attack are the four-way WPA handshake between client and access point, and a wordlist
    that contains common passphrases. Then, using tools such as `aircrack-ng`, we
    can try to crack the WPA/WPA2 PSK passphrase.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: WPA/WPA2 PSK容易受到字典攻击。这种攻击所需的输入是客户端和接入点之间的四次握手（WPA四次握手），以及一个包含常见密码短语的字典。然后，使用诸如`aircrack-ng`之类的工具，我们可以尝试破解WPA/WPA2
    PSK密码短语。
- en: 'An illustration of the four-way handshake is shown in the following screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了四次握手的过程：
- en: '![WPA/WPA2](graphics/B09903_04_15.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![WPA/WPA2](graphics/B09903_04_15.jpg)'
- en: The way WPA/WPA2 PSK works is that it derives the per-session key, called the
    **Pairwise Transient Key** (**PTK**), using the PSK and five other parameters—SSID
    of network, **Authenticator Nonce** (**ANonce**), **Supplicant Nonce** (**SNonce**),
    Authenticator MAC address (access point MAC), and Suppliant MAC address (Wi-Fi
    client MAC). This key is then used to encrypt all data between the access point
    and client.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: WPA/WPA2 PSK的工作方式是，它使用PSK和其他五个参数（网络的SSID，**认证者随机数**（**ANonce**），**客户端随机数**（**SNonce**），认证者MAC地址（接入点MAC），客户端MAC地址（Wi-Fi客户端MAC））来推导每个会话密钥，称为**配对瞬时密钥**（**PTK**）。然后，该密钥用于加密接入点和客户端之间的所有数据。
- en: An attacker who is eavesdropping on this entire conversation by sniffing the
    air can get all five parameters mentioned in the previous paragraph. The only
    thing he does not have is the PSK. So, how is the PSK created? It is derived by
    using the WPA-PSK passphrase supplied by the user, along with the SSID. The combination
    of both of these is sent through the **Password-Based Key Derivation Function**
    (**PBKDF2**), which outputs the 256-bit shared key.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一名通过嗅探空气来窃听整个对话的攻击者，可以获取前文提到的所有五个参数。唯一缺失的是PSK。那么，PSK是如何生成的呢？它是通过使用用户提供的WPA-PSK密码以及SSID来推导的。两者的组合通过**基于密码的密钥推导函数**（**PBKDF2**）输出256位共享密钥。
- en: In a typical WPA/WPA2 PSK dictionary attack, the attacker would use a large
    dictionary of possible passphrases with the attack tool. The tool would derive
    the 256-bit PSK from each of the passphrases and use it with the other parameters,
    described earlier, to create the PTK. The PTK will be used to verify the **Message
    Integrity Check** (**MIC**) in one of the handshake packets. If it matches, then
    the guessed passphrase from the dictionary was correct; if not, it was incorrect.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在典型的WPA/WPA2 PSK字典攻击中，攻击者会使用一个包含大量可能密码的字典与攻击工具。该工具从每个密码推导出256位PSK，并与前面描述的其他参数一起使用来创建PTK。PTK将用于验证某个握手包中的**消息完整性检查**（**MIC**）。如果匹配，则字典中的猜测密码是正确的；如果不匹配，则是错误的。
- en: 'Eventually, if the authorized network passphrase exists in the dictionary,
    it will be identified. This is exactly how WPA/WPA2 PSK cracking works! The following
    diagram illustrates the steps involved:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，如果授权的网络密码存在于字典中，它将被识别出来。这就是WPA/WPA2 PSK破解的工作原理！以下图示说明了相关步骤：
- en: '![WPA/WPA2](graphics/B09903_04_16.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![WPA/WPA2](graphics/B09903_04_16.jpg)'
- en: In the next exercise, we will take a look at how to crack a WPA PSK wireless
    network. The exact same steps will be involved in cracking a WPA2-PSK network
    using CCMP (AES) as well.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的练习中，我们将学习如何破解WPA PSK无线网络。破解WPA2-PSK网络时，使用CCMP（AES）时将涉及完全相同的步骤。
- en: Time for action – cracking WPA-PSK weak passphrase
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间行动——破解WPA-PSK弱密码
- en: 'Follow the given instructions to get started:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 按照给定的说明开始操作：
- en: Let's first connect to our access point `Wireless Lab` and set the access point
    to use WPA-PSK. We will set the WPA-PSK passphrase to `abcdefgh` so that it is
    vulnerable to a dictionary attack:![Time for action – cracking WPA-PSK weak passphrase](graphics/B09903_04_17.jpg)
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先连接到我们的接入点`Wireless Lab`并将接入点设置为使用WPA-PSK。我们将WPA-PSK密码设置为`abcdefgh`，使其易受字典攻击：![Time
    for action – cracking WPA-PSK weak passphrase](graphics/B09903_04_17.jpg)
- en: 'We start `airodump-ng` with the following command so that it starts capturing
    and storing all packets for our network:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用以下命令启动`airodump-ng`，使其开始捕获并存储我们网络的所有数据包：
- en: '[PRE4]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following screenshot shows the output:'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图展示了输出结果：
- en: '![Time for action – cracking WPA-PSK weak passphrase](graphics/B09903_04_18.jpg)'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Time for action – cracking WPA-PSK weak passphrase](graphics/B09903_04_18.jpg)'
- en: Now, we can wait for a new client to connect to the access point so that we
    can capture the four-way WPA handshake, or we can send a broadcast deauthentication
    packet to force clients to reconnect. We do the latter to speed things up. The
    same thing can happen again with the unknown channel error. Again, use `--ignore-negative-one`.
    This can also require more than one attempt:![Time for action – cracking WPA-PSK
    weak passphrase](graphics/B09903_04_19.jpg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以等待新客户端连接到接入点，以便我们捕获四次握手WPA握手包，或者我们可以发送广播的去身份验证数据包，强制客户端重新连接。为了加快进度，我们选择后者。未知频道错误可能会再次发生，再次使用`--ignore-negative-one`。这也可能需要多次尝试：![Time
    for action – cracking WPA-PSK weak passphrase](graphics/B09903_04_19.jpg)
- en: As soon as we capture a WPA handshake, the `airodump-ng` tool will indicate
    it in the top-right corner of the screen with a WPA handshake followed by the
    access point's BSSID:![Time for action – cracking WPA-PSK weak passphrase](graphics/B09903_04_20.jpg)
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们捕获到WPA握手，`airodump-ng`工具将在屏幕的右上角显示一个WPA握手，后面跟着接入点的BSSID：![操作时间 – 破解WPA-PSK弱密码短语](graphics/B09903_04_20.jpg)
- en: If you are using `--ignore-negative-one`, the tool may replace the WPA handshake
    with a fixed channel message. Just keep an eye out for a quick flash of a WPA
    handshake. If we check our working directory, we should see that a `.cap` file
    has been generated:![Time for action – cracking WPA-PSK weak passphrase](graphics/B09903_04_21.jpg)
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用`--ignore-negative-one`，工具可能会用一个固定频道信息替换WPA握手。只需留意WPA握手的快速闪烁。如果我们检查工作目录，应该会看到生成了一个`.cap`文件：![操作时间
    – 破解WPA-PSK弱密码短语](graphics/B09903_04_21.jpg)
- en: We can stop the `airodump-ng` utility now. Let's open up the capture file in
    Wireshark and view the four-way handshake. Your Wireshark terminal should look
    like the following screenshot. I have selected the first packet of the four-way
    handshake in the trace file in the screenshot. The handshake packets are the one
    whose protocol is `EAPOL`. You can filter this by typing `eapol` into the filter
    bar:![Time for action – cracking WPA-PSK weak passphrase](graphics/B09903_04_22.jpg)
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以停止`airodump-ng`工具了。让我们在Wireshark中打开捕获文件，查看四次握手。你的Wireshark终端应当显示以下截图中的内容。我在截图中选中了追踪文件中的四次握手的第一个数据包。握手数据包的协议是`EAPOL`。你可以通过在过滤器栏输入`eapol`来进行过滤：![操作时间
    – 破解WPA-PSK弱密码短语](graphics/B09903_04_22.jpg)
- en: Now, we will start the actual key cracking exercise! For this, we need a dictionary
    of common words. Kali ships with many dictionary files in the `metasploit` folder
    located as shown in the following screenshot. It is important to note that, in
    WPA cracking, you are just as good as your dictionary. Kali ships with some dictionaries,
    but these may be insufficient. Passwords that people choose depend on a lot of
    things. This includes things such as which country users live in, common names
    and phrases in that region, the security awareness of the users, and a host of
    other things. It may be a good idea to aggregate country- and region-specific
    wordlists, when undertaking a penetration test:![Time for action – cracking WPA-PSK
    weak passphrase](graphics/B09903_04_23.jpg)
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将开始实际的密钥破解练习！为此，我们需要一个常用单词的字典。Kali中提供了许多字典文件，这些文件位于`metasploit`文件夹中，路径如下截图所示。需要注意的是，在WPA破解中，你的字典决定了破解的效果。Kali附带了一些字典文件，但这些可能不够用。人们选择的密码取决于很多因素，包括用户所在的国家、该地区的常用名称和短语、用户的安全意识等。进行渗透测试时，收集特定国家和地区的字典列表是个不错的主意：![操作时间
    – 破解WPA-PSK弱密码短语](graphics/B09903_04_23.jpg)
- en: We will now invoke the `aircrack-ng` utility with the `pcap` file as the input
    and a link to the dictionary file, as shown in the following screenshot. I have
    used `nmap.lst` which can be found in `/usr/share/wordlists/`, as shown in the
    terminal:![Time for action – cracking WPA-PSK weak passphrase](graphics/B09903_04_24.jpg)
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将调用`aircrack-ng`工具，输入`pcap`文件和字典文件的链接，如下截图所示。我使用的是`nmap.lst`，它可以在`/usr/share/wordlists/`目录下找到，如终端所示：![操作时间
    – 破解WPA-PSK弱密码短语](graphics/B09903_04_24.jpg)
- en: The `aircrack-ng` utility uses the dictionary file to try various combinations
    of passphrases and tries to crack the key. If the passphrase is present in the
    dictionary file, it will eventually crack it and your screen will look similar
    to the one in the screenshot:![Time for action – cracking WPA-PSK weak passphrase](graphics/B09903_04_25.jpg)
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`aircrack-ng`工具使用字典文件尝试各种密码短语组合，试图破解密钥。如果密码短语存在于字典文件中，它最终会破解该密钥，屏幕上将显示类似于截图中的内容：![操作时间
    – 破解WPA-PSK弱密码短语](graphics/B09903_04_25.jpg)'
- en: Please note that, as this is a dictionary attack, the prerequisite is that the
    passphrase must be present in the dictionary file you are supplying to `aircrack-ng`.
    If the passphrase is not present in the dictionary, the attack will fail!
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，由于这是字典攻击，因此前提是密码短语必须存在于你提供给`aircrack-ng`的字典文件中。如果密码短语不在字典中，攻击将会失败！
- en: '*What just happened?*'
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: 'We set up WPA-PSK on our access point with a common passphrase: `abcdefgh`.
    We then use a deauthentication attack to have legitimate clients reconnect to
    the access point. When we reconnect, we capture the four-way WPA handshake between
    the access point and the client.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在接入点上设置了 WPA-PSK，使用了一个常见的密码短语：`abcdefgh`。然后，我们使用去身份验证攻击使合法客户端重新连接到接入点。当我们重新连接时，我们捕获到接入点和客户端之间的四次握手
    WPA 握手。
- en: As WPA-PSK is vulnerable to a dictionary attack, we feed the capture file that
    contains the WPA four-way handshake and a list of common passphrases (in the form
    of a wordlist) to `aircrack-ng`. As the passphrase `abcdefgh` is present in the
    wordlist, `aircrack-ng` is able to crack the WPA-PSK shared passphrase. It is
    very important to note again that, in WPA dictionary-based cracking, you are just
    as good as the dictionary you have. Thus, it is important to compile a large and
    elaborate dictionary before you begin. Though Kali ships with its own dictionary,
    it may be insufficient at times and might need more words, especially taking into
    account the localization factor.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 WPA-PSK 易受字典攻击，我们将包含 WPA 四次握手的捕获文件和常见密码短语的列表（以字典文件形式）提供给 `aircrack-ng`。由于密码短语
    `abcdefgh` 在字典中，`aircrack-ng` 能够破解 WPA-PSK 共享密码短语。再次强调，在 WPA 字典攻击中，你的成功与否完全取决于你使用的字典。因此，在开始之前，准备一个庞大且详细的字典是非常重要的。尽管
    Kali 带有自带字典，但有时它可能不够充分，可能需要更多的单词，特别是考虑到本地化因素。
- en: Have a go hero – trying WPA-PSK cracking with Cowpatty
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大胆尝试——使用 Cowpatty 破解 WPA-PSK
- en: '**Cowpatty** is a tool that can also crack a WPA-PSK passphrase using a dictionary
    attack. This tool is included with Kali. I leave it as an exercise for you to
    use Cowpatty to crack the WPA-PSK passphrase.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**Cowpatty** 是一款工具，使用字典攻击也可以破解 WPA-PSK 密码短语。这个工具包含在 Kali 中。我留给你作为练习，使用 Cowpatty
    来破解 WPA-PSK 密码短语。'
- en: Also, set an uncommon passphrase that is not present in the dictionary and try
    the attack again. You will now be unsuccessful in cracking the passphrase with
    both Aircrack-ng and Cowpatty.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，设置一个字典中没有的罕见密码短语，并再次尝试攻击。现在，你将无法使用 Aircrack-ng 和 Cowpatty 破解密码短语。
- en: It is important to note that the same attack applies even to a WPA2 PSK network.
    I encourage you to verify this independently.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，同样的攻击也适用于 WPA2 PSK 网络。我鼓励你自行验证这一点。
- en: Speeding up WPA/WPA2 PSK cracking
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加速 WPA/WPA2 PSK 破解
- en: As we have already seen in the previous section, if we have the correct passphrase
    in our dictionary, cracking WPA-Personal will work every time like a charm. So,
    why don't we just create a large elaborate dictionary of millions of common passwords
    and phrases people use? This would help us a lot and most of the time, we would
    end up cracking the passphrase. It all sounds great but we are missing one key
    component here—the time taken. One of the more CPU and time-consuming calculations
    is that of the PSK using the PSK passphrase and the SSID through the PBKDF2\.
    This function hashes the combination of both over 4,096 times before outputting
    the 256-bit PSK. The next step in cracking involves using this key along with
    parameters in the four-way handshake and verifying against the MIC in the handshake.
    This step is computationally inexpensive. Also, the parameters will vary in the
    handshake every time and hence, this step cannot be precomputed. Thus, to speed
    up the cracking process, we need to make the calculation of the PSK from the passphrase
    as fast as possible.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一节中所见，如果我们的字典中有正确的密码短语，破解 WPA-Personal 将每次都像魅力一样顺利。那么，为什么不创建一个包含数百万常见密码和短语的庞大字典呢？这将对我们非常有帮助，而且大多数时候，我们最终会破解密码短语。一切听起来很棒，但我们忽略了一个关键因素——时间。最耗费
    CPU 和时间的计算之一是通过 PBKDF2 使用 PSK 密码短语和 SSID 计算 PSK。此函数会将两者的组合哈希 4,096 次，然后输出 256
    位的 PSK。破解的下一步是使用该密钥与四次握手中的参数一起验证，并与握手中的 MIC 进行比对。此步骤的计算开销不大。而且，握手中的参数每次都会变化，因此此步骤无法预计算。因此，为了加速破解过程，我们需要尽可能快地计算密码短语生成的
    PSK。
- en: We can speed this up by precalculating the PSK, also called the **Pairwise Master
    Key** (**PMK**) in 802.11 standard parlance. It is important to note that, as
    the SSID is also used to calculate the PMK, with the same passphrase and with
    a different SSID, we will end up with a different PMK. Thus, the PMK depends on
    both the passphrase and the SSID.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过预先计算 PSK，也就是在 802.11 标准术语中称为 **Pairwise Master Key**（**PMK**）的方法来加速这一过程。需要注意的是，由于
    SSID 也用于计算 PMK，使用相同的密码短语和不同的 SSID 时，我们将得到不同的 PMK。因此，PMK 依赖于密码短语和 SSID。
- en: In the next exercise, we will take a look at how to precalculate the PMK and
    use it for WPA/WPA2 PSK cracking.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个练习中，我们将了解如何预计算PMK并将其用于WPA/WPA2 PSK的破解。
- en: Time for action – speeding up the cracking process
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——加速破解过程
- en: 'We can proceed with the following steps:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续进行以下步骤：
- en: 'We can pre-calculate the PMK for a given SSID and wordlist using the `genpmk`
    tool with the following command:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用`genpmk`工具和以下命令预计算给定SSID和字典的PMK：
- en: '[PRE5]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This creates the `PMK-Wireless-Lab` file containing the pregenerated PMK:'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将创建一个名为`PMK-Wireless-Lab`的文件，其中包含预生成的PMK：
- en: '![Time for action – speeding up the cracking process](graphics/B09903_04_26.jpg)'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间——加速破解过程](graphics/B09903_04_26.jpg)'
- en: We now create a WPA-PSK network with the passphrase `abcdefgh` (present in the
    dictionary we used) and capture a WPA-handshake for that network as we did with
    the previous exercise; alternatively, use the files we used previously. We now
    use Cowpatty to crack the WPA passphrase, as shown in the following screenshot:![Time
    for action – speeding up the cracking process](graphics/B09903_04_27.jpg)
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在创建一个WPA-PSK网络，密码是`abcdefgh`（它在我们使用的字典中），并像上一个练习一样捕获该网络的WPA握手；或者使用我们之前使用的文件。然后，我们使用Cowpatty破解WPA密码，如下图所示：![行动时间——加速破解过程](graphics/B09903_04_27.jpg)
- en: It takes approximately 7.18 seconds for Cowpatty to crack the key, using the
    precalculated PMKs.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用预先计算的PMK，Cowpatty破解密钥大约需要7.18秒。
- en: We now use `aircrack-ng` with the same dictionary file, and the cracking process
    takes over 22 minutes. This shows how much we are gaining because of the precalculation.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在使用相同的字典文件，使用`aircrack-ng`进行破解，整个过程需要超过22分钟。这表明通过预计算，我们节省了大量时间。
- en: '*What just happened?*'
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We looked at various different tools and techniques to speed up WPA/WPA2-PSK
    cracking. The whole idea is to precalculate the PMK for a given SSID and a list
    of passphrases in our dictionary.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们查看了多种不同的工具和技术来加速WPA/WPA2-PSK的破解。其核心思想是为给定的SSID和字典中的密码列表预先计算PMK。
- en: Decrypting WEP and WPA packets
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解密WEP和WPA数据包
- en: In all the exercises we have done till now, we cracked the WEP and WPA keys
    using various techniques. What do we do with this information? The first step
    is to decrypt data packets we have captured using these keys.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们到目前为止做过的所有练习中，我们使用各种技术破解了WEP和WPA密钥。那么我们如何利用这些信息呢？第一步是使用这些密钥解密我们捕获的数据包。
- en: In the next exercise, we will decrypt the WEP and WPA packets in the same trace
    file that we captured over the air, using the keys we cracked.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个练习中，我们将使用我们破解的密钥解密我们在空中捕获的同一跟踪文件中的WEP和WPA数据包。
- en: Time for action – decrypting WEP and WPA packets
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——解密WEP和WPA数据包
- en: 'We can proceed with the following steps:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续进行以下步骤：
- en: 'We will decrypt packets from the WEP capture file we created earlier: `WEPCrackingDemo-01.cap`.
    For this, we will use another tool in the Aircrack-ng suite called `airdecap-ng`.
    We will run the following command, as shown in the following screenshot, using
    the WEP key we cracked previously:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将解密之前创建的WEP捕获文件中的数据包：`WEPCrackingDemo-01.cap`。为此，我们将使用Aircrack-ng套件中的另一个工具`airdecap-ng`。我们将运行以下命令，如下图所示，使用我们之前破解的WEP密钥：
- en: '[PRE6]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Time for action – decrypting WEP and WPA packets](graphics/B09903_04_28.jpg)'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间——解密WEP和WPA数据包](graphics/B09903_04_28.jpg)'
- en: The decrypted files are stored in a file named `WEPCrackingDemo-01-dec.cap`.
    We use the `tshark` utility to view the first ten packets in the file. Please
    note that you may see something different based on what you captured:![Time for
    action – decrypting WEP and WPA packets](graphics/B09903_04_29.jpg)
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解密后的文件存储在名为`WEPCrackingDemo-01-dec.cap`的文件中。我们使用`tshark`工具查看文件中的前十个数据包。请注意，根据你捕获的内容，显示的可能会有所不同：![行动时间——解密WEP和WPA数据包](graphics/B09903_04_29.jpg)
- en: 'WPA/WPA2 PSK will work in exactly the same way as with WEP, using the `airdecap-ng`
    utility, as shown in the following screenshot, with the following command:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WPA/WPA2 PSK的工作方式与WEP完全相同，使用`airdecap-ng`工具，如下图所示，运行以下命令：
- en: '[PRE7]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Time for action – decrypting WEP and WPA packets](graphics/B09903_04_30.jpg)'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间——解密WEP和WPA数据包](graphics/B09903_04_30.jpg)'
- en: '*What just happened?*'
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We just saw how we can decrypt WEP and WPA/WPA2-PSK encrypted packets using
    `airdecap-ng`. It is interesting to note that we can do the same using Wireshark.
    We would encourage you to explore how this can be done by consulting the Wireshark
    documentation.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看到如何使用`airdecap-ng`解密WEP和WPA/WPA2-PSK加密的数据包。有趣的是，我们也可以使用Wireshark做到这一点。我们建议你通过查阅Wireshark文档，探索如何进行操作。
- en: Connecting to WEP and WPA networks
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到WEP和WPA网络
- en: We can also connect to the authorized network after we have cracked the network
    key. This can come in handy during penetration testing. Logging onto the authorized
    network with the cracked key is the ultimate proof you can provide to your client
    that his network is insecure.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在破解网络密钥后，也可以连接到授权网络。这在渗透测试中非常有用。通过破解的密钥登录授权网络是向客户证明其网络不安全的终极证据。
- en: Time for action – connecting to a WEP network
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 连接到WEP网络
- en: 'We can proceed with the following steps:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续进行以下步骤：
- en: Use the `iwconfig` utility to connect to a WEP network, once you have the key.
    In a past exercise, we broke the WEP key—`abcdefabcdefabcdefabcdef12`:![Time for
    action – connecting to a WEP network](graphics/B09903_04_31.jpg)
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`iwconfig`工具连接到WEP网络，一旦获得密钥。在之前的练习中，我们破解了WEP密钥—`abcdefabcdefabcdefabcdef12`:![行动时间
    - 连接到WEP网络](graphics/B09903_04_31.jpg)
- en: '*What just happened?*'
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We saw how to connect to a WEP network.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚学习了如何连接到WEP网络。
- en: Time for action – connecting to a WPA network
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 连接到WPA网络
- en: 'We can proceed with the following steps:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续进行以下步骤：
- en: In the case of WPA, the matter is a bit more complicated. The `iwconfig` utility
    cannot be used with WPA/WPA2 Personal and Enterprise, as it does not support it.
    We will use a new tool called `wpa_supplicant` for this lab. To use `WPA_supplicant`
    for a network, we will need to create a configuration file, as shown in the following
    screenshot. We will name this file `wpa-supp.conf`:![Time for action – connecting
    to a WPA network](graphics/B09903_04_32.jpg)
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于WPA，情况稍微复杂一些。`iwconfig`工具不能与WPA/WPA2个人版和企业版一起使用，因为它不支持。我们将在本实验中使用一个名为`wpa_supplicant`的新工具。为了在网络上使用`wpa_supplicant`，我们需要创建一个配置文件，如下图所示。我们将此文件命名为`wpa-supp.conf`：![行动时间
    - 连接到WPA网络](graphics/B09903_04_32.jpg)
- en: 'We will then invoke the `wpa_supplicant` utility with the following command:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将使用以下命令调用`wpa_supplicant`工具：
- en: '[PRE8]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This will connect the device to the WPA network we just cracked. Once the connection
    is successful, `wpa_supplicant` will give you the message: **Connection to XXXX
    completed**.'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将把设备连接到我们刚刚破解的WPA网络。一旦连接成功，`wpa_supplicant`会给出以下信息：**与XXXX的连接完成**。
- en: For both the WEP and WPA networks, once you are connected, you can use `dhclient`
    to grab a DHCP address from the network by typing `dhclient3 wlan0`.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于WEP和WPA网络，一旦连接，你可以使用`dhclient`从网络获取DHCP地址，只需输入`dhclient3 wlan0`。
- en: '*What just happened?*'
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: The default Wi-Fi utility `iwconfig` cannot be used to connect to WPA/WPA2 networks.
    The de-facto tool for this is `wpa_supplicant`. In this lab, we saw how we can
    use it to connect to a WPA network.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的Wi-Fi工具`iwconfig`不能用于连接到WPA/WPA2网络。用于此目的的实际工具是`wpa_supplicant`。在这个实验中，我们看到如何使用它连接到WPA网络。
- en: Pop quiz – WLAN encryption flaws
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随堂小测 - WLAN加密漏洞
- en: Q1\. What packets are used for packet replay?
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Q1. 哪些数据包用于数据包重放？
- en: Deauthentication packet
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 去认证数据包
- en: Associated packet
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关联数据包
- en: Encrypted ARP packet
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加密的ARP数据包
- en: None of the above
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以上都不是
- en: Q2\. When can WEP be cracked?
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Q2. WEP什么时候会被破解？
- en: Always
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 总是
- en: Only if a weak key/passphrase is chosen
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只有选择了弱密钥/密码短语时
- en: Under special circumstances only
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仅在特殊情况下
- en: Only if the access point runs old software
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只有当接入点运行旧软件时
- en: Summary
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we learnt about WLAN encryption. WEP is flawed and no matter
    what the WEP key is, with enough data packet samples: it is always possible to
    crack WEP. WPA/WPA2 is cryptographically un-crackable currently; however, under
    special circumstances, such as when a weak passphrase is chosen in WPA/WPA2-PSK,
    it is possible to retrieve the passphrase using dictionary attacks.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们学习了WLAN加密。WEP是有缺陷的，无论WEP密钥是什么，只要有足够的数据包样本，就总是可以破解WEP。目前，WPA/WPA2在加密上是无法破解的；然而，在特殊情况下，比如在WPA/WPA2-PSK中选择了弱密码短语时，使用字典攻击有可能恢复密码短语。
- en: In the next chapter, we will take a look at different attacks on the WLAN infrastructure,
    such as rogue access points, evil twins, bit-flipping attacks, and so on.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将看看针对WLAN基础设施的不同攻击方式，比如恶意接入点、双胞胎攻击、位翻转攻击等。
