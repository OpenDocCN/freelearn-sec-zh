- en: Discovering Vulnerabilities Automatically Using OWASP ZAP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 OWASP ZAP 自动发现漏洞
- en: In the last chapter, we covered another important part of penetration testing,
    which was about exploiting cross-site scripting vulnerabilities.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了渗透测试的另一个重要部分，关于利用跨站脚本漏洞。
- en: Now, in this chapter, we are going to be studying a tool called ZAP, which will
    help us detect the risks and vulnerabilities of web applications. We will then
    explore various scans that we can perform and also learn to read the scan results.
    We will see this through a few examples.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在这一章中，我们将学习一款名为 ZAP 的工具，它将帮助我们检测 Web 应用程序的风险和漏洞。然后我们将探索我们可以执行的各种扫描，并学习如何解读扫描结果。我们将通过一些示例来展示这些内容。
- en: 'This chapter will cover the following web penetration testing topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下 Web 渗透测试主题：
- en: OWASP ZAP start
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP ZAP 启动
- en: OWASP ZAP result
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP ZAP 结果
- en: OWASP ZAP start
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OWASP ZAP 启动
- en: So far, we've learned how to manually discover a number of very dangerous vulnerabilities.
    We've seen how they work and how to exploit them. In this section, we will learn
    about a tool that will allow us to automatically discover vulnerabilities in web
    applications. It'll allow us to discover the vulnerabilities that we learned,
    plus many more. The reason we didn't study this tool at the start because I wanted
    to teach you how to discover vulnerabilities manually. Also, I wanted you to know
    how these vulnerabilities occur, so as to understand the reason behind them. So
    this program is just a tool, it can make mistakes and it can show false positives.
    It can also miss vulnerabilities in some cases.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了如何手动发现一些非常危险的漏洞。我们了解了它们是如何工作的以及如何利用它们。在本节中，我们将学习一款工具，它将帮助我们自动发现
    Web 应用程序中的漏洞。它将帮助我们发现我们已经学习的漏洞，以及更多其他漏洞。之所以在开始时没有学习这款工具，是因为我想先教你们如何手动发现漏洞。同时，我希望你们了解这些漏洞是如何产生的，以便理解它们背后的原因。所以这个程序只是一个工具，它可能会出错，也可能会显示误报。在某些情况下，它也可能遗漏漏洞。
- en: Therefore, I wanted you to know how to do these things manually, so that if
    the program doesn't work or misses something, you will be able to find it. The
    best way to use these programs is as a backup or just as a tool to help us with
    our penetration testing.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我希望你们了解如何手动完成这些操作，这样如果程序没有正常工作或遗漏了什么，你们就能够找到它们。使用这些程序的最佳方式是作为备份工具，或者仅仅作为帮助我们进行渗透测试的工具。
- en: 'Using the tool is very simple. We are going to go to Applications and then
    we are going to type in `ZAP`. It will ask us if we want to save the current session
    when we search for something, and we will select No, I do not want to persist
    this session at this moment in time and click Start:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个工具非常简单。我们将进入“应用程序”并输入`ZAP`。它会询问我们是否要保存当前会话，当我们搜索某些内容时，我们选择“不，我现在不想保存此会话”，然后点击“开始”：
- en: '![](assets/5a68f4a2-fe59-4add-a48b-a831b17b0b77.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5a68f4a2-fe59-4add-a48b-a831b17b0b77.png)'
- en: 'In the following screenshot is the main view of the tool. On the left are the
    websites that we will be targeting, on the right, we can attack and set the website
    URL, and at the bottom, we can see the results of our attack or our scan:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中是工具的主视图。左侧是我们将要攻击的网站，右侧我们可以进行攻击并设置网站 URL，底部则显示我们的攻击或扫描结果：
- en: '![](assets/aad43298-5494-4e63-8b1e-0d9cfb41c7a9.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aad43298-5494-4e63-8b1e-0d9cfb41c7a9.png)'
- en: 'If we go to the cog icon on the left, it will open a window, as seen in the
    following screenshot, which will allow us to modify the options for the program.
    We can modify certain aspects of it, the way the Fuzzer works, the way the AJAX Spider
    works, the way the scan works:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击左侧的齿轮图标，它会弹出一个窗口，如下图所示，这个窗口允许我们修改程序的选项。我们可以修改某些方面的设置，包括 Fuzzer 的工作方式、AJAX
    Spider 的工作方式，以及扫描的工作方式：
- en: '![](assets/008df137-c183-4b4e-9a2a-a3f5f13b90f2.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/008df137-c183-4b4e-9a2a-a3f5f13b90f2.png)'
- en: 'We are not going to modify anything. Another thing that we can modify is the
    policies used in the scan; something similar to the scans that we were using with
    Nmap, the intense scan and so on. So, we going to click on the plus sign, which
    is at the bottom of the screen, and we are going to click on Active Scan:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会修改任何内容。我们可以修改的另一项内容是扫描中使用的策略；类似于我们之前在 Nmap 中使用的扫描，例如强力扫描等。所以，我们将点击屏幕底部的加号按钮，然后点击“主动扫描”：
- en: '![](assets/f4f7002d-34fb-46cc-889d-8e7efe43a1fb.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f4f7002d-34fb-46cc-889d-8e7efe43a1fb.png)'
- en: 'Click on the Scan Policy Manager button, highlighted in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 点击下图中突出的“扫描策略管理器”按钮：
- en: '![](assets/b6221304-e6f6-4afe-bd44-3a583d5576c1.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b6221304-e6f6-4afe-bd44-3a583d5576c1.png)'
- en: 'Select Default Policy, now we can create our own policies by using the Add
    button. We''re going to click on Default Policy and click on the Modify button:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 选择默认策略，现在我们可以通过使用添加按钮来创建自己的策略。我们将点击“默认策略”并点击“修改”按钮：
- en: '![](assets/8a9b4f1b-dfd7-420e-af60-72603dd6715b.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8a9b4f1b-dfd7-420e-af60-72603dd6715b.png)'
- en: 'Clicking on the Modify button will show us the aspects that we can modify:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“修改”按钮将显示我们可以修改的内容：
- en: '![](assets/bef906d4-2ff3-445f-8869-c45a4b37f4ac.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bef906d4-2ff3-445f-8869-c45a4b37f4ac.png)'
- en: 'In the preceding screenshot, we can see that we can modify the Policy, the
    Default Alert Threshold, and the Default Attack Strength for the global policy.
    Clicking on each of the categories will allow us to modify the specific scans
    that will be performed. For example, in the following screenshot, in the Injection
    tab, we can see all the injection scans that the program is going to try, for
    example, Cross Site Scripting: in the Threshold column, when we click on type
    of threshold, we can set it to Default, Low, Medium, or High:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们可以看到可以修改全局策略的策略、默认警报阈值和默认攻击强度。点击每个类别将允许我们修改要执行的特定扫描。例如，在以下截图中，在注入标签中，我们可以看到程序将尝试的所有注入扫描，例如跨站脚本：在“阈值”列中，当我们点击阈值类型时，我们可以将其设置为默认、低、中或高：
- en: '![](assets/b35f5937-dcad-484a-b1db-abcb130251cb.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b35f5937-dcad-484a-b1db-abcb130251cb.png)'
- en: 'Setting it to Default will just default to the value selected, which is Medium
    in the following screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 将其设置为默认将默认选择所选值，在以下截图中是中等：
- en: '![](assets/5ff94e33-1ed5-4f3c-8fbe-8ec8e5f3f1ee.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5ff94e33-1ed5-4f3c-8fbe-8ec8e5f3f1ee.png)'
- en: 'Or, for example, if a SQL Injection is what we are looking for, if what we
    are looking for is access to the database, then we can set Threshold to High so
    that it''ll try everything and it will try to find vulnerability in even difficult
    places:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，例如，如果我们正在寻找SQL注入，想要访问数据库，我们可以将阈值设置为高，以便它尝试所有可能的方式，并尽力在更困难的地方找到漏洞：
- en: '![](assets/89a7a2bf-af2e-4c59-ab12-e0df5488ce0c.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/89a7a2bf-af2e-4c59-ab12-e0df5488ce0c.png)'
- en: 'Just leave everything as default. Now, we are going to start our attack against
    the mutillidae script. So, we have it in `10.0.2.4` running on the Metasploitable
    machine, and the URL is `http://10.0.2.4/mutillidae/`. Paste the URL in the URL
    to attack textbox present in the OWASP tool and click the Attack button:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 只需保持所有默认设置。现在，我们将开始针对Mutillidae脚本发起攻击。我们在Metasploitable机器上的`10.0.2.4`运行它，URL是`http://10.0.2.4/mutillidae/`。将URL粘贴到OWASP工具中的“URL
    to attack”文本框中，然后点击“攻击”按钮：
- en: '![](assets/b5d57c22-2cee-47ed-a778-8d0071b66542.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b5d57c22-2cee-47ed-a778-8d0071b66542.png)'
- en: 'The tool is first try to find all the URLs and then it will try and attack
    the URLs based on the scan policy that we used. The output of the scan will be
    as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具首先会尝试查找所有URL，然后根据我们使用的扫描策略攻击这些URL。扫描的输出如下所示：
- en: '![](assets/f2dba94f-eb42-4705-aa1f-210c2df81360.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f2dba94f-eb42-4705-aa1f-210c2df81360.png)'
- en: OWASP ZAP results
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OWASP ZAP 结果
- en: 'After the scan is over and we can see our website on the left, clicking on
    it will show us some results from the Spider when it was looking for the files:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描完成后，我们可以在左侧看到我们的网站，点击它将显示蜘蛛在查找文件时的一些结果：
- en: '![](assets/bcaab2c3-7758-4ad5-839d-ba22e360e192.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bcaab2c3-7758-4ad5-839d-ba22e360e192.png)'
- en: 'The very interesting part is the Alerts in the following screenshot. We can
    see all the vulnerabilities that have been discovered:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 非常有趣的部分是下面截图中的警报。我们可以看到所有已发现的漏洞：
- en: '![](assets/ff31805c-b290-410f-b55b-48454294dfb4.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ff31805c-b290-410f-b55b-48454294dfb4.png)'
- en: At the bottom-left of the preceding screenshot, we can see that we have 6 red
    flags, the High Priority Alerts, we have 4 orange flags, 5 yellow flags, and 0
    blue. These are organized in order of severity.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述截图的左下角，我们可以看到有6个红色标志，表示高优先级警报，还有4个橙色标志，5个黄色标志，0个蓝色标志。这些按严重性顺序排列。
- en: 'Clicking on any of the categories will expand it and show the threats that
    have been found, for example, clicking on Path Traversal (10), we''ll see all
    the URLs that can be exploited to read files from the server:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 点击任何类别将展开并显示找到的威胁，例如，点击路径遍历（10），我们将看到所有可以利用的URL，以从服务器读取文件：
- en: '![](assets/46eb2954-4f04-40b9-a714-ef98ef4be8a5.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/46eb2954-4f04-40b9-a714-ef98ef4be8a5.png)'
- en: 'Clicking on any of the sites, we will see the HTTP request that was sent in
    order to discover this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 单击任何站点，我们将看到发送的HTTP请求以便发现这个：
- en: '![](assets/f1d24a90-02ce-4f23-937a-c66953e49238.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f1d24a90-02ce-4f23-937a-c66953e49238.png)'
- en: 'The following screenshot shows the response and why the tool thinks that this
    is vulnerable, and we can see that in the response the tool was able to get the
    contents of `/etc/passwd`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了响应以及工具为什么认为这是一个漏洞，我们可以看到在响应中工具能够获取`/etc/passwd`的内容：
- en: '![](assets/a74d3604-bc84-4adc-9aa0-a6684d820d4a.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a74d3604-bc84-4adc-9aa0-a6684d820d4a.png)'
- en: 'In the following screenshot, we can see the URL, the tool used to exploit the
    vulnerability, and we can see a Description of what the current vulnerability
    is and how it has been exploited:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，我们可以看到工具用于利用漏洞的URL，我们可以看到当前漏洞的描述以及如何利用它：
- en: '![](assets/3b5df714-07f9-4270-9d18-634d85f37493.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3b5df714-07f9-4270-9d18-634d85f37493.png)'
- en: 'We can also see Risk, which is High. We can see Confidence—how confident the
    tool is about the existence of this vulnerability. We can also see that it''s
    been injected into a page and the Attack is trying to get `/etc/passwd`. So, right-click
    on the page and click Open URL in Browser:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到风险，这是高风险。我们可以看到置信度——工具对这个漏洞存在的信心有多大。我们还可以看到它已经被注入到一个页面中，攻击正在尝试获取`/etc/passwd`。因此，在页面上右键单击，然后单击在浏览器中打开URL：
- en: '![](assets/a83090ba-5317-4d2b-8cf3-e80840f3b09e.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a83090ba-5317-4d2b-8cf3-e80840f3b09e.png)'
- en: 'As we can see in the following screenshot, the tool has exploited the site
    for us. It shows us the output for the vulnerability, and we can read the contents
    of `/etc/passwd`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在以下截图中所看到的，该工具已经为我们利用了该站点。它向我们展示了漏洞的输出，我们可以阅读`/etc/passwd`的内容：
- en: '![](assets/af179346-1b94-4fb0-a83d-202748a4105b.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/af179346-1b94-4fb0-a83d-202748a4105b.png)'
- en: 'Let''s have a look at another example, for example Cross Site Scripting. Again,
    the tool also checks for `POST` and `GET` parameters. Sometimes, when the injection
    is sent in textboxes, or even sent without textboxes, if it''s sent in a `POST`
    parameter, we won''t see it in the URL, so it actually checks for `POST` and `GET`.
    You can see in the following screenshot, it found a vulnerability in the `POST`
    request in the register page, and it also found one in a `GET` request:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看另一个例子，例如跨站脚本攻击。同样，该工具还会检查`POST`和`GET`参数。有时，当注入发送到文本框中，甚至在没有文本框的情况下发送时，如果它发送到`POST`参数中，我们在URL中看不到它，因此它实际上会检查`POST`和`GET`。您可以在以下截图中看到，它在注册页面的`POST`请求中发现了一个漏洞，并且还在`GET`请求中发现了一个漏洞：
- en: '![](assets/af264dbe-bb3b-4eb7-96b5-9f79ffdf7175.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/af264dbe-bb3b-4eb7-96b5-9f79ffdf7175.png)'
- en: 'Again, right-clicking and opening in the browser will execute it for us, and
    we can see that the code has been executed:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 再次右键单击并在浏览器中打开将为我们执行它，我们可以看到代码已经执行：
- en: '![](assets/513e92c9-a2f8-43d3-b0a5-6bcb28a043f6.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/513e92c9-a2f8-43d3-b0a5-6bcb28a043f6.png)'
- en: Again, we can find the URL of the execution from the address bar in the browser.
    If we want to use it for any other tools, we can see it in tool as well, the URL
    that's being used to exploit the vulnerability.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们可以从浏览器的地址栏中找到执行的URL。如果我们想要将其用于其他工具，我们也可以在工具中看到它，即用于利用漏洞的URL。
- en: 'Let''s just have one more example of SQL Injection. Again, click on the link:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再举一个SQL注入的例子。再次，单击链接：
- en: '![](assets/f899b91f-3d21-4999-8853-cb78327de528.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f899b91f-3d21-4999-8853-cb78327de528.png)'
- en: 'It will show us the URL and it will show us the Attack that it used, ZAP'' AND
    ''1''=''1'', which is in the Parameter password, and if you remember, we actually
    did exploit this parameter manually:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 它会向我们显示URL，并显示它所使用的攻击，`ZAP' AND '1'='1'`，这在参数密码中，如果您记得，我们实际上是手动利用了这个参数：
- en: '![](assets/75148178-66f4-4a8b-b0cd-c61dbc3a0950.png)Parameters used for exploit.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/75148178-66f4-4a8b-b0cd-c61dbc3a0950.png)用于利用的参数。'
- en: 'Opening the link in the browser will show us that the injection is working,
    and it''s using a username and a password called ZAP:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开链接，我们可以看到注入正在工作，并且正在使用一个名为ZAP的用户名和密码：
- en: '![](assets/7e778adb-250f-41dd-9efb-feee4d6b3174.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7e778adb-250f-41dd-9efb-feee4d6b3174.png)'
- en: So, the tool is very simple, very powerful, and very useful. We can play around
    with it, we can play around with the proxy and with the options, and see how we
    can enhance the results and achieve even better results.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，该工具非常简单、功能强大且非常有用。我们可以尝试使用它，可以尝试使用代理和选项，看看如何增强结果并获得更好的结果。
- en: Summary
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have looked at the last part of penetration testing, where
    we learned to use a tool called OWASP ZAP, which helps us understand the vulnerabilities
    in web applications. We studied this as the last part of web penetration testing
    because I wanted you to first learn how to penetration test manually. In the first
    section of this chapter, we  explored the GUI of the tool and all of the actions
    we can perform using it. The next part of the chapter covered the way we  perform
    scans and we even interpreted the results of scans.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了渗透测试的最后部分，学习了使用名为OWASP ZAP的工具，它帮助我们理解Web应用程序中的漏洞。我们将这部分内容作为Web渗透测试的最后一部分进行学习，因为我希望你们首先学习如何手动进行渗透测试。
    本章的第一部分，我们探索了该工具的图形用户界面（GUI）以及我们可以使用它执行的所有操作。接下来的部分介绍了我们如何执行扫描，并且我们还解释了扫描结果。
