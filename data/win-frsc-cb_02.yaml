- en: Windows Memory Acquisition and Analysis
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows内存获取与分析
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Windows memory acquisition with Belkasoft RAM Capturer
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Belkasoft RAM Capturer进行Windows内存获取
- en: Windows memory acquisition with DumpIt
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用DumpIt进行Windows内存获取
- en: Windows memory image analysis with Belkasoft Evidence Center
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Belkasoft Evidence Center进行Windows内存镜像分析
- en: Windows memory image analysis with Volatility
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Volatility进行Windows内存镜像分析
- en: Variations in Windows versions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows版本的差异
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Memory analysis is a relatively new, but increasingly relevant field. A memory
    image can be acquired in the same way as a physical image, but by using different
    tools, some of which will be discussed in this section.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 内存分析是一个相对较新的领域，但它越来越相关。内存镜像可以像物理图像一样获取，但使用不同的工具来实现，其中一些将在本节中讨论。
- en: The image can be stored as one of the many formats, depending on the tool used
    to acquire the image. Once an investigator has the image, they can then analyse
    the data within it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图像可以以多种格式存储，具体取决于用于获取图像的工具。一旦调查员获取了图像，他们就可以分析其中的数据。
- en: One of the main challenges associated with memory forensics is data preservation.
    Although your only option in a given investigation may be to power down a system
    and then image the data therein, in reality this ends up having an impact on other
    potential data sources that might be important later on. It is vital, therefore,
    to have a thorough understanding of the scene you are investigating and the specific
    needs of the case before you decide which method to choose. Any time you interact
    with a system, you will alter something simply by virtue of having been there.
    However, memory acquisition can help to minimize the effects of the investigator
    on the data collected, since a memory image will sample the volatile memory at
    a specific time, thus creating a sort of snapshot that can then be analysed later.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 与内存取证相关的主要挑战之一是数据保存。尽管在某些调查中，您唯一的选择可能是关闭系统然后获取其中的数据，但实际上这会影响到可能稍后对案件有重要意义的其他潜在数据源。因此，在决定选择哪种方法之前，必须充分了解您所调查的现场情况以及案件的具体需求。每次与系统互动时，您都会因在场而改变某些东西。然而，内存获取可以帮助减少调查员对收集的数据的影响，因为内存镜像会在特定时刻对易失性内存进行采样，从而创建一种可以稍后分析的快照。
- en: In cases where an investigator arrives at a scene to find a machine powered
    on, the memory on the system will be volatile at that time. This means that, if
    you manage to acquire a memory image then and there, you will be able to see a
    snapshot of the computer's memory at the moment at which you acquired it. This
    can be very useful, especially if a suspect has recently fled a scene or has been
    arrested at the scene.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在调查员到达现场时，如果机器仍然开机，系统中的内存此时是易失的。这意味着，如果您能够在当时获取内存镜像，您将能够看到在获取镜像时计算机内存的快照。这非常有用，特别是如果嫌疑人刚刚逃离现场或在现场被捕。
- en: You will generally need administrative permissions on the computer if you want
    to acquire volatile memory unless you are using hardware. One such solution is
    **CaptureGUARD Physical Memory Acquisition Hardware.** It requires a small CaptureGUARD
    driver to be installed on the system and creates a memory dump in the standard
    WinDD format. You can see one of these devices in figure 2.1.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要获取易失性内存，通常需要在计算机上拥有管理员权限，除非您使用硬件解决方案。一个这样的解决方案是**CaptureGUARD物理内存获取硬件**。它需要在系统上安装一个小的CaptureGUARD驱动程序，并创建一个标准的WinDD格式内存转储。您可以在图2.1中看到其中一种设备。
- en: '![](img/5f0ccac5-1d5d-412e-a0e7-f1a8a16142e9.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5f0ccac5-1d5d-412e-a0e7-f1a8a16142e9.jpg)'
- en: Figure 2.1\. ExpressCard
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1\. ExpressCard
- en: In other words, memory forensics is a complex and temperamental field. You will
    need to have a thorough understanding of the tool sets you are using, and any
    potential impacts they could have on volatile memory before you decide which to
    use it at a scene. However, if you do manage to acquire a memory image, it can
    provide a wealth of useful information for your case.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，内存取证是一个复杂且容易变化的领域。在选择在现场使用哪些工具之前，您需要对所使用的工具集有透彻的了解，并了解它们可能对易失性内存产生的影响。然而，如果您确实成功获取了内存镜像，它可以为您的案件提供大量有用的信息。
- en: Windows memory acquisition with Belkasoft RAM Capturer
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Belkasoft RAM Capturer进行Windows内存获取
- en: Belkasoft RAM Capturer is a free tool any digital forensic examiner should have
    in their kit. It's tiny, easy to use, and has the ability to acquire memory from
    Windows systems, including Windows 10, even if they are protected by an active
    anti-debugging or anti-dumping system.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Belkasoft RAM Capturer是任何数字取证检查员必备的免费工具。它体积小、易于使用，能够从Windows系统中获取内存，包括Windows
    10，即使它们被活跃的反调试或反转储保护系统保护。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: You have two options for downloading the tool. If you are a Belkasoft customer
    and have a Belkasoft Evidence Center license, go to your customer portal, where
    you can find a Belkasoft RAM Capturer download link in the FREE PRODUCTS section.
    If you are not a customer, just go to the DOWNLOAD section on the Belkasoft website,
    choose the product you want to download - in our case, Belkasoft Live RAM Capturer
    - and fill in a short form with your contact information. After the download,
    a link will be sent to the email provided.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你有两个下载工具的选项。如果你是Belkasoft的客户并且拥有Belkasoft Evidence Center许可证，去你的客户门户，你可以在“免费产品”部分找到Belkasoft
    RAM Capturer的下载链接。如果你不是客户，只需访问Belkasoft网站上的“下载”部分，选择你想下载的产品——在我们的案例中是Belkasoft
    Live RAM Capturer——并填写一个简短的联系信息表格。下载后，一个链接将会发送到你提供的电子邮件。
- en: 'The steps to prepare a flash drive for acquisition are as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 准备闪存驱动器以进行获取的步骤如下：
- en: It must have enough space to store the memory image.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 必须有足够的空间来存储内存镜像。
- en: It must be sterilized via wiping.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 必须通过擦除来消毒。
- en: Put both folders extracted from the archive you downloaded onto the flash drive.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你从下载的压缩包中提取的两个文件夹放入闪存驱动器。
- en: Don't forget to prepare a flash drive for acquisition. Firstly, it must have
    enough space to store the memory image. Secondly, it must be sterilized by wiping.
    Finally, put both folders extracted from the archive you downloaded onto the flash
    drive.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了为获取准备闪存驱动器。首先，它必须有足够的空间来存储内存镜像。其次，它必须通过擦除进行消毒。最后，将从下载的压缩包中提取的两个文件夹放入闪存驱动器。
- en: How to do it…
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'The steps for Windows memory acquisition using Belkasoft Ram Capturer are as
    follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Belkasoft Ram Capturer进行Windows内存获取的步骤如下：
- en: The first thing you must do is learn what kind of system you are dealing with
    x32 or x64\. It's really easy to do right-click Computer and choose Properties.
    In our case, it's x64\. So our choice is `RamCapture64.exe`.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你必须做的第一件事是了解你正在处理的是哪种系统，x32还是x64。你可以很容易地通过右键点击计算机并选择“属性”来查看。在我们的案例中，它是x64。因此，我们选择`RamCapture64.exe`。
- en: After starting, we will get information about the physical memory page size
    and its total size.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动后，我们将获得有关物理内存页面大小及其总大小的信息。
- en: Now select the output folder path make sure it's your flash drive and not the
    local system drive.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在选择输出文件夹路径，确保它是你的闪存驱动器，而不是本地系统驱动器。
- en: After that just click Capture!
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后只需点击“Capture”！
- en: '![](img/25a3d19b-4153-468d-a77f-f264870ed12e.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/25a3d19b-4153-468d-a77f-f264870ed12e.png)'
- en: Figure 2.2\. Memory acquisition with Belkasoft RAM Capturer
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2。使用Belkasoft RAM Capturer进行内存获取
- en: 'As a result, we get a file with `.mem` extension of the same size as the total
    physical memory. By default, you have the date of acquisition as the filename,
    but we highly recommend renaming it, and adding more information for identification
    purposes: operating system version, edition, computer name, and other information.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是我们得到一个`.mem`扩展名的文件，大小与物理内存的总大小相同。默认情况下，文件名是获取日期，但我们强烈建议你重新命名它，并添加更多的信息以便识别：操作系统版本、版本、计算机名称和其他信息。
- en: That's it! The image is ready for further analysis with memory forensics tools.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！该镜像已准备好，可以使用内存取证工具进一步分析。
- en: How it works…
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Belkasoft RAM Capturer operates in kernel mode (not in user mode like some other
    acquisition tools) with the help of 32-bit and 64-bit kernel drivers. It extracts
    the whole physical memory, even if it's protected, in a forensically sound manner,
    and saves it into a file with the `.mem` extension.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Belkasoft RAM Capturer在内核模式下运行（不像其他一些获取工具那样在用户模式下运行），借助32位和64位内核驱动程序。它以取证上可靠的方式提取整个物理内存，即使内存被保护，也会保存为一个`.mem`扩展名的文件。
- en: See also
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另见
- en: 'The Belkasoft RAM Capturer page on Belkasoft''s website: [http://belkasoft.com/ram-capturer](http://belkasoft.com/ram-capturer)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Belkasoft RAM Capturer页面在Belkasoft网站上的链接：[http://belkasoft.com/ram-capturer](http://belkasoft.com/ram-capturer)
- en: Windows memory acquisition with DumpIt
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用DumpIt进行Windows内存获取
- en: 'DumpIt is a free memory imaging tool from Comae Memory Toolkit. It''s a fusion
    of Win32dd and Win64dd in one executable. It''s extremely easy to use: even a
    non-technical person can use it in emergency situations. DumpIt supports all modern
    Windows versions, from XP to 10, both 32 and 64-bit. Also, the tool has a very
    important feature: it displays the Directory Table Base and the address of the
    debugging data structures during the acquisition process.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: DumpIt是来自Comae Memory Toolkit的免费内存成像工具。它是Win32dd和Win64dd的融合体，合并在一个可执行文件中。它非常易于使用：即便是非技术人员在紧急情况下也能使用它。DumpIt支持所有现代Windows版本，从XP到10，既支持32位也支持64位。而且，这个工具有一个非常重要的功能：它在获取过程中显示目录表基址和调试数据结构的地址。
- en: Getting ready
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To get your free copy of DumpIt, go to Comae Technologies' website and click
    on GET TOOLS. After you provide some information, including your first name, last
    name, company name, email address, phone number and website, you'll get your download
    link via email. Don't forget to put the tool onto a wiped external drive later.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取免费的DumpIt副本，访问Comae Technologies的网站并点击GET TOOLS。填写一些信息，包括你的名字、姓氏、公司名称、电子邮件地址、电话号码和网站，你将通过电子邮件收到下载链接。别忘了稍后将该工具放入已擦除的外部硬盘中。
- en: How to do it…
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'This time, we don''t need to know what kind of operating system we are dealing
    with - 32 or 64-bit. As we have already been said, DumpIt is a fusion of Win32dd
    and Win64dd in one executable. So, there are just two steps:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们无需知道我们处理的是哪种操作系统——是32位还是64位。正如之前所说，DumpIt是Win32dd和Win64dd的融合体，合并在一个可执行文件中。所以，只有两个步骤：
- en: Plug in the external drive in the target system
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将外部硬盘插入目标系统
- en: Start `DumpIt.exe` and type `y` to start the acquisition process
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`DumpIt.exe`并输入`y`以开始获取过程
- en: '![](img/4f02fca9-c518-4840-9f63-18a908b5debc.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4f02fca9-c518-4840-9f63-18a908b5debc.png)'
- en: Figure 2.3\. Memory acquisition with DumpIt
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.3\. 使用DumpIt进行内存获取
- en: 'As a result of the acquisition, you''ll get two files: a file with the DMP
    extension and a file with the JSON extension. The first is the target system''s
    memory dump with the computer name, date and time (UTC) in the file name, the
    second - the dump information, includes important information from a forensic
    point of view. It includes file size, system architecture type (32/64), KdCopyDataBlock
    KdDebuggerData, kdpDataBlockEncoded, sha256 hash, and so on. So that''s it, the
    DMP file is ready to be analysed with the memory forensics software of your choice.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 获取结果后，你将得到两个文件：一个DMP扩展名的文件和一个JSON扩展名的文件。第一个文件是目标系统的内存转储，文件名中包含计算机名称、日期和时间（UTC），第二个文件是转储信息，包含从取证角度来看非常重要的信息。它包括文件大小、系统架构类型（32/64）、KdCopyDataBlock、KdDebuggerData、kdpDataBlockEncoded、sha256哈希值等等。所以，DMP文件已经准备好，可以使用你选择的内存取证软件进行分析了。
- en: How it works…
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: As DumpIt is a fusion of Win32dd and Win64dd, it automatically detects the system
    architecture type and creates a memory snapshot and a file in JSON format with
    all the information you will need for further analysis with memory forensics tools,
    such as Volatility, Rekall, Belkasoft Evidence Center, and others.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 由于DumpIt是Win32dd和Win64dd的融合，它能够自动检测系统架构类型，并创建一个内存快照和一个JSON格式的文件，包含所有你需要的分析信息，可用于进一步通过内存取证工具进行分析，如Volatility、Rekall、Belkasoft
    Evidence Center等。
- en: See also
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另见
- en: 'The Comae Memory Toolkit (which DumpIt, along with Hibr2Bin, is a part of)
    webpage:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Comae Memory Toolkit（DumpIt和Hibr2Bin属于其中一部分）的网页：
- en: '[https://comae.typeform.com/to/XIvMa7](https://comae.typeform.com/to/XIvMa7)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://comae.typeform.com/to/XIvMa7](https://comae.typeform.com/to/XIvMa7)'
- en: Windows memory image analysis with Belkasoft Evidence Center
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Belkasoft Evidence Center分析Windows内存镜像
- en: In the previous recipes, we successfully created two memory forensic images,
    one with Belkasoft Live RAM Capturer, and the other with DumpIt. Now it's time
    to perform analysis. Let's start from the first image and use Belkasoft Evidence
    Center for analysis.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的教程中，我们成功创建了两个内存取证镜像，一个使用Belkasoft Live RAM Capturer，另一个使用DumpIt。现在是时候进行分析了。让我们从第一个镜像开始，使用Belkasoft
    Evidence Center进行分析。
- en: Belkasoft Evidence Center is a powerful digital forensics tool, capable of parsing
    data not only from memory images, but also from images of computer drives and
    mobile devices. From a memory dump, it can extract valuable artifacts such as
    remnants of communications via social networks, messengers, chat rooms, webmail
    systems, data from cloud services, web-browsing artifacts, and so on.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Belkasoft Evidence Center是一款强大的数字取证工具，能够解析不仅来自内存镜像的数据，还能解析来自计算机硬盘和移动设备的镜像数据。从内存转储中，它可以提取出有价值的证据，如社交网络、即时通讯、聊天室、网页邮件系统的通信残留数据、云服务数据、网页浏览痕迹等。
- en: Getting ready
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: If you don't have a valid license for Belkasoft Evidence Center, you can download
    a fully functional trial version of the product from the official website. To
    do this, go to the DOWNLOAD section on Belkasoft's website, choose the product
    you want to download, in our case, Belkasoft Evidence Center (trial version) -
    and provide your contact information, including your First Name, Last Name, Your
    email and Company, Country. After the download, the link will be sent to your
    email. If you are a licensed user, just go to your customer portal and download
    the latest version of the product.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有有效的 Belkasoft Evidence Center 许可证，您可以从官方网站下载一个功能齐全的试用版。为此，请访问 Belkasoft
    网站的下载部分，选择您想下载的产品，在我们的例子中是 Belkasoft Evidence Center（试用版） - 并提供您的联系信息，包括您的名字、姓氏、电子邮件、公司和国家。在下载后，下载链接将发送到您的电子邮件。如果您是持证用户，只需进入客户门户并下载最新版本的产品。
- en: How to do it...
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for Windows memory image analysis using Belkasoft Evidence Center:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Belkasoft Evidence Center 分析 Windows 内存映像的步骤：
- en: 'To do that, click on New in the Open Case window. Now you need to fill in a
    few fields:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此，请在“打开案件”窗口中点击“新建”。现在，您需要填写几个字段：
- en: Case name - Usually, we use the case number and year for case names, but this
    time, as it's being created for testing purposes, we will name it `Belkasoft Memory
    Forensics Test`.
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 案件名称 - 通常我们使用案件编号和年份作为案件名称，但这次由于是为测试目的创建，我们将其命名为 `Belkasoft Memory Forensics
    Test`。
- en: '**Root folder** - Here, you should choose the folder where the case data will
    reside. In our case it''s D: drive.'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**根文件夹** - 在此，您应选择案件数据存放的文件夹。就我们而言，是 D: 驱动器。'
- en: '**Case folder** - This field will be filled in automatically based on the two
    previous fields, so in our case, it''s `D:\Belkasoft Memory Forensics Test`.'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**案件文件夹** - 此字段会根据前两个字段自动填写，因此在我们的例子中，它是 `D:\Belkasoft Memory Forensics Test`。'
- en: '**Investigator** - Type your name in this field.'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调查员** - 在此字段中输入您的姓名。'
- en: '**Time zone** - Choosing the right time zone is very important. If you already
    know the right one, choose it. If not, we suggest choosing UTC +00:00\. In our
    case, we know the time zone, so we can use the correct one (UTC + 03:00).'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时区** - 选择正确的时区非常重要。如果您已经知道正确的时区，请选择它。如果不确定，我们建议选择 UTC +00:00。就我们而言，我们知道时区，所以可以选择正确的时区（UTC
    +03:00）。'
- en: '**Description** - If you want to add a description to your digital evidence
    item, here is the field to do it. We used the following description: `Parsing
    a memory image created with Belkasoft Live RAM Capturer for testing purposes.`'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述** - 如果您想为您的数字证据项添加描述，请在此字段中填写。我们使用的描述是：`解析使用 Belkasoft Live RAM Capturer
    创建的内存映像用于测试目的`。'
- en: '![](img/351b7316-1287-42ac-aedd-c8f29b55ae05.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/351b7316-1287-42ac-aedd-c8f29b55ae05.png)'
- en: Figure 2.4\. Creating a new case in Belkasoft Evidence Center
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4\. 在 Belkasoft Evidence Center 中创建新案件
- en: Click OK and you will see the next window - Add data source.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”，您将看到下一个窗口 - 添加数据源。
- en: Belkasoft Evidence Center supports different kinds of evidence sources, from
    physical drives and drive images, to mobile backups and, of course, memory images,
    including `pagefile.sys` and `hiberfil.sys`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Belkasoft Evidence Center 支持不同种类的证据来源，从物理驱动器和驱动器映像，到移动备份，当然还有内存映像，包括 `pagefile.sys`
    和 `hiberfil.sys`。
- en: As we are talking about memory forensics now, let's choose the image we previously
    acquired with Belkasoft RAM Capturer as the data source.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们现在讨论的是内存取证，让我们选择之前使用 Belkasoft RAM Capturer 获取的映像作为数据源。
- en: '![](img/2563ec39-55a6-404b-a26b-3073a9b14a86.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2563ec39-55a6-404b-a26b-3073a9b14a86.png)'
- en: Figure 2.5\. Adding previously acquired memory image as data source in Belkasoft
    Evidence Center
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5\. 在 Belkasoft Evidence Center 中将之前获取的内存映像作为数据源添加
- en: Click Next to choose the data types you want to search for. For testing purposes,
    we chose all available data types, but you can choose those you really need, to
    reduce processing time.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“下一步”选择您要搜索的数据类型。为了测试，我们选择了所有可用的数据类型，但您可以选择您真正需要的，以减少处理时间。
- en: Don't forget to go to Advanced options and enable BelkaCarving - it will help
    you to recover fragmented data, for example, pictures.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了进入高级选项并启用 BelkaCarving - 它将帮助您恢复碎片化的数据，例如图片。
- en: '![](img/61eb7a10-9b56-421a-ae76-73daad6bedd4.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/61eb7a10-9b56-421a-ae76-73daad6bedd4.png)'
- en: Figure 2.6\. Choosing data types in Belkasoft Evidence Center
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6\. 在 Belkasoft Evidence Center 中选择数据类型
- en: OK, we are ready to start parsing the memory image - just click Finish.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好的，我们准备好开始解析内存映像了 - 只需点击“完成”。
- en: 'It took BEC about an hour to parse and carve the image, and we got impressive
    results: 9728 web browser artifacts, 2848 pictures, 74 chat artifacts, and so
    on.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: BEC 花了大约一个小时来解析和雕刻该镜像，最终我们得到了令人印象深刻的结果：9728 个网页浏览器证据，2848 张图片，74 个聊天证据，等等。
- en: '![](img/fd4c4193-394e-417f-bcb2-e4689bbb53ec.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd4c4193-394e-417f-bcb2-e4689bbb53ec.png)'
- en: Figure 2.7\. Results of memory image processing with Belkasoft Evidence Center
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7\. 使用 Belkasoft Evidence Center 处理内存镜像的结果
- en: As you can see, you can extract quite a lot of valuable digital artifacts from
    a memory image with just a few clicks - so, if you have access to a running system,
    make it a rule to capture the memory image. This may help you, for example, to
    recover browsing history from anonymous tools such as Tor Browser, which are widely
    used among criminals, as well as other important digital artifacts which may reside
    only in volatile memory.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，您只需点击几下，就可以从内存镜像中提取出大量有价值的数字证据。因此，如果您能够访问正在运行的系统，请养成捕获内存镜像的习惯。例如，这可能帮助您恢复通过匿名工具（如
    Tor 浏览器）浏览的历史记录，而这些工具在犯罪分子中广泛使用，也能找出其他可能只存在于易失性内存中的重要数字证据。
- en: How it works...
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Belkasoft Evidence Center parses memory image structure and extracts available
    data, putting it into corresponding categories. The BelkaCarving options allow
    the tool to reconstruct fragmented data, for example, images.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Belkasoft Evidence Center 解析内存镜像结构并提取可用数据，将其放入相应类别。BelkaCarving 选项允许该工具重建碎片化的数据，例如图像。
- en: See also
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参见
- en: 'The Belkasoft Evidence Center page on the Belkasoft website: [http://belkasoft.com/ec](http://belkasoft.com/ec)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 'Belkasoft 官网上的 Belkasoft Evidence Center 页面: [http://belkasoft.com/ec](http://belkasoft.com/ec)'
- en: 'BelkaCarving: [http://ru.belkasoft.com/en/bec/en/BelkaCarving.asp](http://ru.belkasoft.com/en/bec/en/BelkaCarving.asp)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 'BelkaCarving: [http://ru.belkasoft.com/en/bec/en/BelkaCarving.asp](http://ru.belkasoft.com/en/bec/en/BelkaCarving.asp)'
- en: Windows memory image analysis with Volatility
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Volatility 对 Windows 内存镜像进行分析
- en: The Volatility Framework is an open source collection of tools written in Python
    for the extraction of digital artifacts from memory images. This time, we will
    use the second memory image, obtained earlier with DumpIt, as a data source to
    show you how to use this tool set for memory forensics.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Volatility 框架是一个开源工具集，使用 Python 编写，用于从内存镜像中提取数字证据。这次，我们将使用之前通过 DumpIt 获取的第二个内存镜像作为数据源，向您展示如何使用该工具集进行内存取证。
- en: Getting ready
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: The Volatility Framework is an open source toolkit, so it's cross-platform,
    which means that you can use any operating system family you want - Windows, Linux,
    or mac OS. Of course, you can build these tools from source, but there are also
    so-called standalone executables for all the operating systems mentioned. As this
    cookbook is about forensic examination of Windows OS and the memory dump, what
    we are going to analyze is collected from Windows 10, and we are going to use
    the Windows Standalone Executable.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Volatility 框架是一个开源工具包，因此它是跨平台的，这意味着您可以使用任何操作系统 - Windows、Linux 或 macOS。当然，您可以从源代码构建这些工具，但也有所谓的独立可执行文件，适用于所有上述操作系统。由于本手册是关于
    Windows 操作系统和内存转储的取证检查，我们将分析从 Windows 10 收集的数据，并且我们将使用 Windows 独立可执行文件。
- en: At the time of writing, the most recent version of Volatility is 2.6\. With
    this version, support for Windows 10 (including 14393.447) improved, also support
    for Windows Server 2016, mac OS Sierra 10.12, and Linux with KASLR kernels was
    added.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写本文时，Volatility 的最新版本是 2.6\. 在该版本中，改进了对 Windows 10（包括 14393.447）的支持，同时增加了对
    Windows Server 2016、macOS Sierra 10.12 和带有 KASLR 内核的 Linux 的支持。
- en: To download the collection of tools, go to the Volatility Framework website
    and use the Releases tab to choose the most recent version, in our case 2.6\.
    Now, all you need is to unzip volatility_2.6_win64_standalone.zip which you've
    just downloaded, and you are ready to go.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载工具集，请访问 Volatility 框架官网，使用 Releases 标签选择最新版本，在我们的案例中是 2.6\. 现在，您只需解压刚刚下载的
    volatility_2.6_win64_standalone.zip，您就可以开始使用了。
- en: How to do it...
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: To show you the power of Volatility, we decided to use a memory image from a
    system infected with known malware - **Stuxnet**. Why? Because this memory image
    is freely available, so you can download it and use it for training.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示 Volatility 的强大功能，我们决定使用一份已知恶意软件感染系统的内存镜像——**Stuxnet**。为什么这么做？因为这份内存镜像是公开可用的，您可以下载它并用来进行培训。
- en: Let's start by collecting information about our image.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们收集一下关于我们镜像的信息。
- en: To do this, start `cmd.exe`.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此，请启动 `cmd.exe`。
- en: 'Change the directory to the one with the Volatility Standalone Executable,
    and use the `imageinfo` plugin:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到包含 Volatility 独立可执行文件的目录，并使用 `imageinfo` 插件：
- en: '[PRE0]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `imageinfo` plugin returned two suggested profiles. We know that this image
    was taken from a system running Windows XP with Service Pack 3, so the correct
    profile is WinXPSP3x86.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`imageinfo` 插件返回了两个建议的配置文件。我们知道此镜像来自运行 Windows XP Service Pack 3 的系统，因此正确的配置文件是
    WinXPSP3x86。'
- en: Now we know the correct profile, we can use it as a switch to collect information
    about the processes running on the infected machine.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了正确的配置文件，可以将其作为选项来收集有关感染机器上运行的进程的信息。
- en: 'To do this, we can use the `pslist` plugin:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此，我们可以使用 `pslist` 插件：
- en: '[PRE1]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](img/ae4fdc23-5c7e-4b56-b86d-064c1795bb63.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae4fdc23-5c7e-4b56-b86d-064c1795bb63.png)'
- en: Figure 2.8\. Volatility pslist plugin output
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8\. Volatility pslist 插件输出
- en: Do you see anything suspicious? Yes, there are three copies of `lsass.exe`,
    and this is one of the signs of a Stuxnet infection.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你看到什么可疑的地方吗？是的，有三个 `lsass.exe` 进程，这也是 Stuxnet 感染的迹象之一。
- en: Normally, only one `lsass.exe` process should be running, so we need to determine
    which two are malicious.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，应该只有一个 `lsass.exe` 进程在运行，因此我们需要确定哪两个是恶意的。
- en: 'Look at the timestamps on figure 2.8\. Two out of three processes started in
    2011\. Strange, isn''t it? Now let''s use the `pstree` plugin:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 看看图 2.8 中的时间戳。三者中有两个进程是在 2011 年启动的。很奇怪，不是吗？现在让我们使用 `pstree` 插件：
- en: '[PRE2]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](img/14f1f5a8-e11e-402a-adb3-7c490f403272.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/14f1f5a8-e11e-402a-adb3-7c490f403272.png)'
- en: Figure 2.9\. Volatility pstree plugin output
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9\. Volatility pstree 插件输出
- en: Our suspicious process, `lsass.exe`, is normally started by `winlogon.exe`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的可疑进程 `lsass.exe` 通常是由 `winlogon.exe` 启动的。
- en: 'Let''s look at the figure: only one `lsass.exe` is started by `winlogon.exe`
    - the one with PID 680; the two others are started by `services.exe`! So, the
    `lsass.exe` processes with PIDs `868` and `1928` could be malicious.'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们看看图示：只有一个 `lsass.exe` 是由 `winlogon.exe` 启动的——PID 为 680；另外两个是由 `services.exe`
    启动的！因此，PID 为 `868` 和 `1928` 的 `lsass.exe` 进程可能是恶意的。
- en: 'We have two potentially malicious processes. Let''s check the DLLs loaded by
    these processes using the `dlllist` plugin:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们有两个潜在的恶意进程。让我们使用 `dlllist` 插件检查这些进程加载的 DLL：
- en: '[PRE3]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](img/7842f147-9026-489d-8f02-078ee503a10b.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7842f147-9026-489d-8f02-078ee503a10b.png)'
- en: Figure 2.10\. Volatility dlllist plugin output for the suspicious process with
    PID 868
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.10\. Volatility dlllist 插件输出，显示 PID 为 868 的可疑进程
- en: '[PRE4]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](img/bf1b54ef-4d85-45c6-8815-da17a289efa9.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bf1b54ef-4d85-45c6-8815-da17a289efa9.png)'
- en: Figure 2.11\. Volatility dlllist plugin output for the suspicious process with
    PID 1928
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.11\. Volatility dlllist 插件输出，显示 PID 为 1928 的可疑进程
- en: 'Look at figure 2.11\. Anything suspicious? Yes! According to the Stuxnet threat
    description on F-Secure''s website, an encrypted DLL file should be injected into
    a process, and it has the following name structure: `[normaldll].ASLR.[random]`.'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 看看图 2.11。有什么可疑的地方吗？是的！根据 F-Secure 网站上的 Stuxnet 威胁描述，一个加密的 DLL 文件应该被注入到一个进程中，并且它的名称结构是：[normaldll].ASLR.[random]。
- en: Look familiar? We have found another trace of Stuxnet - `KERNEL32.DLL.ASLR.0360b7ab`.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 看起来熟悉吗？我们发现了另一个 Stuxnet 的痕迹——`KERNEL32.DLL.ASLR.0360b7ab`。
- en: 'There is another extremely useful Volatility plugin - `malfind`. This plugin
    helps digital forensic examiners to find hidden or injected code/DLLs in the user
    mode memory. Let''s use it for our suspicious `lsass.exe` processes:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个非常有用的 Volatility 插件——`malfind`。这个插件帮助数字取证检查员在用户模式内存中发现隐藏或注入的代码/DLL。让我们用它来检查我们可疑的
    `lsass.exe` 进程：
- en: '[PRE5]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](img/b97454d0-d9d0-4d2a-9982-58388a767cd7.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b97454d0-d9d0-4d2a-9982-58388a767cd7.png)'
- en: Figure 2.12\. A part of Volatility malfind plugin output for the suspicious
    process with PID 868
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.12\. Volatility malfind 插件输出，显示 PID 为 868 的可疑进程的一部分
- en: As you can see, we also used the `--dump-dir` switch to export the DLLs to a
    folder. After that we can, for example, upload them to VirusTotal. And of course,
    most of them are detected as malicious. For example, `process.0x81c47c00.0x80000.dmp`,
    extracted from `lsass.exe` with PID `1928`, is detected by Dr.Web Antivirus as
    **Trojan.Stuxnet.1**.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们还使用了 `--dump-dir` 选项将 DLL 导出到一个文件夹。之后，我们可以将它们上传到 VirusTotal 等地方检查。当然，绝大多数
    DLL 都被检测为恶意。例如，`process.0x81c47c00.0x80000.dmp`，它是从 PID 为 `1928` 的 `lsass.exe`
    中提取的，被 Dr.Web Antivirus 检测为 **Trojan.Stuxnet.1**。
- en: There are many more Volatility plugins available. You can learn more about them
    in the documentation available on the Volatility Foundation website.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多其他 Volatility 插件可供使用。您可以在 Volatility 基金会网站上的文档中了解更多有关它们的信息。
- en: How it works...
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The following list explains the plugins used in the recipe.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表解释了配方中使用的插件。
- en: '`Imageinfo`: This plugin collects some basic information about the memory image
    you are analyzing: operating system, service pack, hardware architecture; and
    also useful information such as DTB address, KDBG address, and the timestamp of
    the image creation.'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Imageinfo`：这个插件收集关于你正在分析的内存映像的一些基本信息：操作系统、服务包、硬件架构；还包括有用的信息，如 DTB 地址、KDBG
    地址和映像创建的时间戳。'
- en: '`Pslist`: This plugin shows the processes of the system, including the offset,
    process name, process ID, parent process ID, number of threads, number of handles,
    date/time when the process started and exited, Session ID and if the process is
    a WoW64 process.'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Pslist`：这个插件显示系统中的进程，包括偏移量、进程名称、进程 ID、父进程 ID、线程数、句柄数、进程启动和退出的日期/时间、会话 ID 以及进程是否为
    WoW64 进程。'
- en: '`Pstree`: This plugin does the same as `pslist`, but shows the process list
    in tree form. It uses indentation and periods to indicate child processes.'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Pstree`：这个插件的功能与 `pslist` 相同，但以树形结构显示进程列表。它使用缩进和句点来表示子进程。'
- en: '`Dlllist`: This plugin displays the DLLs loaded by the process of interest,
    or all processes if the `-p` or `--pid` switch isn''t used.'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Dlllist`：这个插件会显示进程加载的 DLL，或者如果没有使用 `-p` 或 `--pid` 开关，则显示所有进程的 DLL。'
- en: '`Malfind`: This plugin allows the examiner to detect and extract hidden or
    injected code/DLLs in user mode memory for further antivirus scans and analysis.'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Malfind`：这个插件允许检查员检测并提取用户模式内存中隐藏或注入的代码/DLL，以便进一步进行杀毒扫描和分析。'
- en: See also
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另见
- en: 'Volatility documentation: [https://github.com/volatilityfoundation/volatility/wiki](https://github.com/volatilityfoundation/volatility/wiki)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Volatility 文档：[https://github.com/volatilityfoundation/volatility/wiki](https://github.com/volatilityfoundation/volatility/wiki)
- en: 'A memory image from a system infected with Stuxnet: [https://github.com/ganboing/malwarecookbook](https://github.com/ganboing/malwarecookbook)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 一个被 Stuxnet 感染的系统的内存映像：[https://github.com/ganboing/malwarecookbook](https://github.com/ganboing/malwarecookbook)
- en: 'Stuxnet threat description: [https://www.f-secure.com/v-descs/trojan-dropper_w32_stuxnet.shtml](https://www.f-secure.com/v-descs/trojan-dropper_w32_stuxnet.shtml)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Stuxnet 威胁描述：[https://www.f-secure.com/v-descs/trojan-dropper_w32_stuxnet.shtml](https://www.f-secure.com/v-descs/trojan-dropper_w32_stuxnet.shtml)
- en: Variations in Windows versions
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows 版本的变种
- en: As you already know from the first chapter, nowadays we have a number of different
    Windows versions widely used both by private persons and businesses. Of course,
    this has an impact on Windows operating system forensic examinations, including
    Windows memory forensics.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在第一章所知，现如今我们有多种不同版本的 Windows 操作系统，它们被个人和企业广泛使用。当然，这对 Windows 操作系统的取证检查，包括
    Windows 内存取证，产生了影响。
- en: Getting ready
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Knowing the Windows version and its type is very important, both in the acquisition
    and analysis stages. There are a few ways to collect this information. We will
    cover some in this recipe.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 了解 Windows 版本及其类型非常重要，无论是在获取还是分析阶段。收集此信息有几种方法，我们将在本章中介绍一些。
- en: How to do it...
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The easiest way to find out which version a computer is running is by following
    these steps:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 发现计算机运行的是哪个版本的 Windows，最简单的方法是按照以下步骤进行：
- en: Click on Start.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击开始菜单。
- en: Go to Run.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入运行。
- en: Type `winver` in the search field and press *Enter*.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中输入 `winver` 并按 *Enter*。
- en: 'This will work on machines that have installed Windows 7 or earlier versions.
    For Windows 8 onwards:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在安装了 Windows 7 或更早版本的机器上工作。对于 Windows 8 及之后的版本：
- en: You will need to press and hold the *Windows* key along with *R*
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要按住*Windows*键并同时按下*R*
- en: Type `winver` in the box that appears and press *Enter*
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出的框中输入 `winver` 并按 *Enter*
- en: 'This will open a small About Windows box, which will provide information on
    the version, as well as the build number:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个小的 Windows 关于框，提供有关版本的信息以及构建号：
- en: '![](img/5cf90738-c542-43c0-ad5d-6f6d5ff54f9e.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5cf90738-c542-43c0-ad5d-6f6d5ff54f9e.png)'
- en: Figure 2.13\. About Windows box
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.13\. 关于 Windows 框
- en: 'To collect more information, perform the following steps:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 为了收集更多信息，请执行以下步骤：
- en: Go to the Start menu
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入开始菜单
- en: Right-click on Computer and choose Properties from the context menu
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击计算机并从上下文菜单中选择属性
- en: 'Also, you can find My Computer, Computer, or This PC shortcuts on the Desktop
    right-click on any one of these and choose Properties from the context menu:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还可以在桌面上找到我的电脑、计算机或此 PC 的快捷方式，右键点击其中任何一个并从上下文菜单中选择属性：
- en: '![](img/10ca51fb-d8cc-4e5e-9e74-b42dc7951d38.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/10ca51fb-d8cc-4e5e-9e74-b42dc7951d38.png)'
- en: Figure 2.14\. Computer properties
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.14\. 计算机属性
- en: As you can see in figure 2.14, with this technique you can collect more information
    about the machine you are dealing with, including the service pack, system type,
    computer name, and so on.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 正如图 2.14 所示，使用这项技术，你可以收集更多关于你所处理的机器的信息，包括服务包、系统类型、计算机名称等。
- en: There is more...
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If you are planning to use Volatility for memory forensic analysis (and we highly
    recommend it, because it is the most powerful tool, with lots of plugins, and
    also it is free and open source), it's very important to choose the right profile.
    To do this, you will need to know the system type, operating system version, and
    build number. As you have already learned from the previous recipes, the `imageinfo`
    plugin can help you with this task if this information wasn't properly documented
    during the acquisition stage.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计划使用 Volatility 进行内存取证分析（我们强烈推荐使用它，因为它是功能最强大的工具，拥有大量插件，而且它是免费且开源的），选择正确的配置文件非常重要。为此，你需要知道系统类型、操作系统版本和构建号。正如你在之前的示例中学到的，如果在采集阶段没有正确记录这些信息，`imageinfo`
    插件可以帮助你完成这项任务。
- en: Table 2.1 contains information about profiles added to the most recent version
    of the Volatility Framework at the time of writing.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.1 包含了在撰写本文时，最新版本的 Volatility 框架中添加的配置文件信息。
- en: '| **OS** | **Build** | **Profile** |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| **操作系统** | **版本** | **配置文件** |'
- en: '| --- | --- | --- |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Windows 10 x64 | 10.0.10586.306 | Win10x64_10586 |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| Windows 10 x64 | 10.0.10586.306 | Win10x64_10586 |'
- en: '| Windows 10 x64 | 10.0.14393.0 | Win10x64_14393 |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| Windows 10 x64 | 10.0.14393.0 | Win10x64_14393 |'
- en: '| Windows 10 x86 | 10.0.10586.420 | Win10x86_10586 |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| Windows 10 x86 | 10.0.10586.420 | Win10x86_10586 |'
- en: '| Windows 10 x86 | 10.0.14393.0 | Win10x86_14393 |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| Windows 10 x86 | 10.0.14393.0 | Win10x86_14393 |'
- en: '| Windows Server 2008 R2 SP1 x64 | 6.1.7601.23418 | Win2008R2SP1x64_23418 |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| Windows Server 2008 R2 SP1 x64 | 6.1.7601.23418 | Win2008R2SP1x64_23418 |'
- en: '| Windows Server 2008 R2 x64 | 6.3.9600.18340 | Win2012R2x64_18340 |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| Windows Server 2008 R2 x64 | 6.3.9600.18340 | Win2012R2x64_18340 |'
- en: '| Windows 7 SP1 x64 | 6.1.7601.23418 | Win7SP1x64_23418 |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| Windows 7 SP1 x64 | 6.1.7601.23418 | Win7SP1x64_23418 |'
- en: '| Windows 7 SP1 x86 | 6.1.7601.23418 | Win7SP1x86_23418 |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| Windows 7 SP1 x86 | 6.1.7601.23418 | Win7SP1x86_23418 |'
- en: '| Windows 8 x64 | 6.3.9600.18340 | Win8SP1x64_18340 |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| Windows 8 x64 | 6.3.9600.18340 | Win8SP1x64_18340 |'
- en: Table 2.1\. Volatility 2.6 profiles list
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.1. Volatility 2.6 配置文件列表
- en: Also, it's important to note that on all x64 Windows 8/2012 (and later), the
    KDBG (which contains a list of the running processes and loaded kernel modules)
    is encrypted by default, so you should use the virtual address of KdCopyDataBlock.
    Both addresses can be collected with the **kdbgscan** Volatility plugin.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，需要注意的是，在所有 x64 的 Windows 8/2012（及更高版本）上，KDBG（它包含了正在运行的进程和加载的内核模块列表）默认是加密的，因此你应该使用
    KdCopyDataBlock 的虚拟地址。两者的地址都可以通过 **kdbgscan** Volatility 插件收集。
