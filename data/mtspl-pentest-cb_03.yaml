- en: Chapter 3. Operating System-based Vulnerability Assessment and Exploitation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。基于操作系统的漏洞评估和利用
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Exploit usage quick tips
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用程序使用快速提示
- en: Penetration testing on a Windows XP SP2 machine
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对Windows XP SP2机器进行渗透测试
- en: Binding a shell to the target for remote access
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将shell绑定到目标以进行远程访问
- en: Penetration testing on the Windows 2003 Server
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对Windows 2003服务器进行渗透测试
- en: Windows 7/Server 2008 R2 SMB client infinite loop
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 7/Server 2008 R2 SMB客户端无限循环
- en: Exploiting a Linux (Ubuntu) machine
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用Linux（Ubuntu）机器
- en: Understanding the Windows DLL injection flaws
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Windows DLL注入漏洞
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In the previous chapter, we focused on gathering information about our target.
    Various information included the target IP address, open ports, available services,
    operating system, and so on. One of the biggest assets in the process of information
    gathering is gaining knowledge about the operating system used by the target server
    or system. This information can prove to be very helpful in penetrating the target
    machine as we can quickly look for exploits and vulnerabilities of the operating
    system in use. Well, the process is not as straightforward as it sounds, but knowledge
    about the target operating system can ease our task to much extent.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们专注于收集有关我们目标的信息。各种信息包括目标IP地址、开放端口、可用服务、操作系统等等。在信息收集过程中最重要的资产之一是了解目标服务器或系统使用的操作系统。这些信息在渗透目标机器时可能非常有帮助，因为我们可以快速寻找正在使用的操作系统的利用程序和漏洞。嗯，这个过程并不像听起来那么简单，但了解目标操作系统可以在很大程度上简化我们的任务。
- en: Every flavor of operating system has some or other bug in it. Once it gets reported,
    the process of developing exploits for it starts. Licensed operating systems such
    as Windows quickly develop patches for the bug or vulnerability and provide it
    as an update to its users. Vulnerability disclosure is a big issue these days.
    Many zero day disclosures create havoc in the computer industry. Zero day vulnerabilities
    are highly sought after and in underground markets, the price may range from 50
    K USD to 100 K USD. Vulnerabilities are detected and exploited but the disclosure
    of vulnerability depends on the researcher and their intention.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每种操作系统都有一些或其他的漏洞。一旦被报告，就开始开发针对它的利用程序的过程。像Windows这样的有许可的操作系统很快就会为漏洞或脆弱性开发补丁，并将其作为更新提供给用户。漏洞披露是一个大问题。许多零日漏洞的披露在计算机行业造成了混乱。零日漏洞非常受欢迎，在地下市场上，价格可能从50K美元到100K美元不等。漏洞被发现和利用，但漏洞的披露取决于研究人员及其意图。
- en: Well known products such as Microsoft and Adobe issue patches at regular intervals
    but it's up to the user to apply them. In Corporate scenarios, this gets even
    worse—it takes weeks before servers are being patched because of the downtime
    involved and to ensure business continuity is not hampered. So, it is always recommended
    to update or keep an eye on any latest vulnerability discovered in your operating
    system in use. Unpatched systems are a safe haven for hackers, as they immediately
    launch exploits to compromise the target. Hence, regular patching and updating
    the operating systems is essential. In this chapter, we will focus on vulnerabilities
    that are reported in some of the most popular operating systems.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 著名的产品如微软和Adobe定期发布补丁，但用户需要自行应用这些补丁。在企业场景中，情况甚至更糟糕——由于停机时间和确保业务连续性不受影响，服务器在被打补丁之前需要花费数周的时间。因此，始终建议更新或关注所使用操作系统中发现的任何最新漏洞。未打补丁的系统对黑客来说是一个安全的避风港，因为他们会立即启动利用程序来攻击目标。因此，定期打补丁和更新操作系统至关重要。在本章中，我们将重点关注一些最受欢迎的操作系统中报告的漏洞。
- en: In the process of penetration testing, once the information about the target
    operating system is available, the pen-testers start looking for available exploits
    for the particular operating system flaws. So, this chapter will be the first
    step towards penetrating our target through vulnerabilities in the operating system.
    We will focus on some of the most widely used home- and enterprise-based operating
    systems of Microsoft and some flavors of Linux. We will also look at how to use
    exploits and set up its parameters to make it executable on the target machine.
    Last, but not least, we will discuss some of the useful payloads available to
    us in the Metasploit framework. So let us start with the recipes.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在渗透测试过程中，一旦获得了有关目标操作系统的信息，渗透测试人员就开始寻找特定操作系统漏洞的可用利用程序。因此，本章将是通过操作系统漏洞渗透我们目标的第一步。我们将重点关注微软和一些Linux版本中最广泛使用的家庭和企业操作系统。我们还将讨论如何使用利用程序并设置其参数以使其在目标机器上可执行。最后，但同样重要的是，我们将讨论Metasploit框架中对我们可用的一些有用的有效载荷。所以让我们开始做菜。
- en: Exploit usage quick tips
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用程序使用快速提示
- en: Before starting to use exploits and payload on target machines, we will first
    have to know some basics about them. It is very essential to understand the usage
    of exploits so that you can overcome some common errors that may arise due to
    misconfiguration of parameters. So, let us begin with some basics of using exploits
    and how to set parameter values.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始在目标机器上使用利用程序和有效载荷之前，我们首先必须了解一些关于它们的基础知识。了解利用程序的使用非常重要，这样您就可以克服由于参数错误配置而可能出现的一些常见错误。因此，让我们从利用程序的基础知识和如何设置参数值开始。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做好准备
- en: In order to start using exploits on your target, the first thing required is
    to scan the target for open ports and services. Once you have gathered enough
    information about the target, the next step is to select exploits accordingly.
    So let us analyze some of the exploit commands that can be launched directly from
    msfconsole.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始在目标上使用利用程序，首先需要扫描目标的开放端口和服务。一旦收集到足够的关于目标的信息，下一步就是相应地选择利用程序。因此，让我们分析一些可以直接从msfconsole启动的利用命令。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Here is a list of commands that will be helpful during exploit usage:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在利用程序使用过程中将有所帮助的一些命令：
- en: '`msf > show exploits` and `msf > show payloads:` These two commands will display
    all the available exploits and payloads in the Metasploit directory.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msf > show exploits`和`msf > show payloads:` 这两个命令将显示Metasploit目录中所有可用的攻击和有效载荷。'
- en: '`msf > search exploit:` This command will search for a particular exploit.
    We can also use this command to search for any specific search terms. The command
    should be passed in the following manner:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msf > search exploit:` 此命令将搜索特定的攻击。我们也可以使用此命令搜索任何特定的搜索词。命令应以以下方式传递：'
- en: '`msf > search exploit-name or search-term`'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`msf > search exploit-name or search-term`'
- en: 'For example, consider the following command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下命令：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`msf > use exploit:` This command is used to set any exploit as active and
    ready to use. The command is passed in the following manner:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msf > use exploit:` 此命令用于设置任何攻击为活动状态并准备使用。命令以以下方式传递：'
- en: msf > use exploit name
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: msf > use exploit name
- en: 'After executing this command, the prompt also changes to the exploit type:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此命令后，提示符也会更改为攻击类型：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`show options:` This command is used to see the available options or parameters
    of the exploit in use. The various parameters include the host IP, port, threads,
    and so on. The parameters marked `yes` must have a value in order to execute the
    exploit.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`show options:` 此命令用于查看正在使用的攻击的可用选项或参数。各种参数包括主机IP、端口、线程等。标记为`yes`的参数必须有一个值才能执行攻击。'
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`set:` This command is used to set a value to a parameter in the exploit under
    use. It is used to set up a payload for a particular exploit in use. The command
    can be passed in the following manner:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set:` 此命令用于在使用的攻击中设置参数的值。它用于为使用的特定攻击设置有效载荷。命令可以以以下方式传递：'
- en: '`msf > set parameter-name parameter-value`'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`msf > set parameter-name parameter-value`'
- en: 'Similarly, we can use the `unset` command as well:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们也可以使用`unset`命令：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There are optional commands named `setg` and `unsetg`. These commands are used
    when we have to globally set a parameter value in `msfconsole`. It, thus, saves
    us from re-entering the same value.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有名为`setg`和`unsetg`的可选命令。当我们需要在`msfconsole`中全局设置参数值时，可以使用这些命令。因此，它可以避免我们重新输入相同的值。
- en: '`show targets:` Every exploit is made to attack a particular target service.
    This command displays the information on what possible targets can the exploit
    be used:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`show targets:` 每个攻击都是针对特定目标服务的。此命令显示攻击可以使用的可能目标的信息：'
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here we can see that the `dcom` exploit is available for several flavors of
    the Windows machine.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到`dcom`攻击适用于多种Windows机器。
- en: How it works...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In [Chapter 1](ch01.html "Chapter 1. Metasploit Quick Tips for Security Professionals"),
    *Metasploit Quick Tips for Security Professionals*, we have discussed that the
    entire Metasploit framework has a modular architecture. Different exploits are
    converted into a framework-understandable module which can function in accordance
    with it. Different commands are called to load and set up the modules. The command-line
    interface of `msfconsole` makes it easy to access different modules and perform
    penetration testing.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。安全专业人员的Metasploit快速提示")中，*安全专业人员的Metasploit快速提示*，我们已经讨论了整个Metasploit框架具有模块化架构。不同的攻击被转换为框架可理解的模块，可以根据其功能。调用不同的命令来加载和设置模块。`msfconsole`的命令行界面使得访问不同的模块和执行渗透测试变得容易。
- en: Penetration testing on a Windows XP SP2 machine
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows XP SP2机器上进行渗透测试
- en: Let us now get our hands into the world of exploits. To start with, we will
    work on the most primary, yet most widely used, operating system, Windows XP.
    In this recipe, we will see how we can use Metasploit to break into our target
    system which is running on the Windows XP machine. We will be using the commands
    we learnt in the previous recipe and then move ahead to select exploits and payloads,
    and set up various required parameters.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们开始使用攻击的世界。首先，我们将使用最基本但最广泛使用的操作系统Windows XP。在这个示例中，我们将看到如何使用Metasploit来入侵我们正在运行Windows
    XP机器的目标系统。我们将使用在上一个示例中学到的命令，然后继续选择攻击和有效载荷，并设置各种所需的参数。
- en: Getting ready
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will start our penetration testing process right from `msfconsole`. So, launch
    the console and perform a port scan to gather information about the target. We
    have discussed port scanning in detail in the previous chapter. Here, I will assume
    that you have gathered information about the target and it is running a Windows
    XP operating system. So let us proceed with selecting exploits and payloads.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从`msfconsole`开始我们的渗透测试过程。因此，启动控制台并执行端口扫描以收集有关目标的信息。我们在上一章节中详细讨论了端口扫描。在这里，我假设您已经收集了有关目标的信息，并且它正在运行Windows
    XP操作系统。因此，让我们继续选择攻击和有效载荷。
- en: How to do it...
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To perform penetration testing on a Windows XP SP2 machine, follow these steps:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows XP SP2机器上执行渗透测试，请按照以下步骤进行：
- en: 'The primary goal will be to select an exploit that can be used on a Windows
    XP machine. You can browse to the `/exploits/windows` directory or simply make
    a search for a list of available exploits for the Windows XP platform. We will
    be using RPC `dcom` vulnerability to penetrate our target. So let us first search
    for the RPC `dcom` vulnerability, using the following command:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主要目标是选择一个可以在Windows XP机器上使用的攻击。您可以浏览`/exploits/windows`目录，或者简单地搜索Windows XP平台上可用攻击的列表。我们将使用RPC
    `dcom`漏洞来渗透我们的目标。因此，让我们首先搜索RPC `dcom`漏洞，使用以下命令：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As we can see, the search has produced three results. We will be working on
    the first exploit as its `rank` is listed as `great` so it will have a better
    success rate.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，搜索产生了三个结果。我们将使用第一个攻击，因为它的`rank`列为`great`，因此成功率会更高。
- en: 'In order to set `exploit/windows/dcerpc/ms03_026_dcom` as the usable exploit,
    we will execute the following command:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将`exploit/windows/dcerpc/ms03_026_dcom`设置为可用的攻击，我们将执行以下命令：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The change in the prompt symbolizes that the command is executed successfully.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 提示符的更改表示命令已成功执行。
- en: 'The next step will be to set up the various parameters of the exploit. The
    `show options` command will list the available parameters in the exploit. Then,
    by using the `set` command, we can set up the various parameters. Some parameters
    will have default values as well:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步将是设置exploit的各种参数。`show options`命令将列出exploit中可用的参数。然后，通过使用`set`命令，我们可以设置各种参数。某些参数也将具有默认值：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here `RHOST` denotes the IP address of the remote host and `RPORT` denotes
    the default bind port. The value or `RPORT` has been set to `135` by default.
    We will have to set the value of `RHOST` to our target IP address in order to
    execute the exploit:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`RHOST`表示远程主机的IP地址，`RPORT`表示默认绑定端口。`RPORT`的值默认设置为`135`。我们将不得不将`RHOST`的值设置为我们的目标IP地址，以执行exploit：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the `ms03_026_dcom` exploit has the ID set to `0`. This means that
    we do not need to specify which Windows machine is running on the target. It can
    exploit any of the Windows machines listed in it. For any other exploit, we may
    have to select the target operating system by using the `show targets` command.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`ms03_026_dcom` exploit的ID设置为`0`。这意味着我们不需要指定目标上运行的Windows机器。它可以利用其中列出的任何Windows机器。对于任何其他exploit，我们可能需要使用`show
    targets`命令选择目标操作系统。
- en: Now the value of `RHOST` has been set to our target IP address. If we try to
    run the exploit then we will get an error message. The reason is we have not yet
    selected any payload for the exploit.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`RHOST`的值已设置为我们的目标IP地址。如果我们尝试运行exploit，我们将收到错误消息。原因是我们尚未为exploit选择任何有效载荷。
- en: 'Our next step will be to choose a relevant payload. We can use the command
    `show payloads` to list all the available payloads. We will start with a simple
    example of the `windows/adduser` payload. This payload will add a new user in
    the target''s operating system:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的下一步将是选择相关的有效载荷。我们可以使用`show payloads`命令列出所有可用的有效载荷。我们将从`windows/adduser`有效载荷的简单示例开始。此有效载荷将在目标操作系统中添加一个新用户：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, if we again use the `show options` command then it will list the parameters
    for both the exploit, as well as the payload. The payload parameters will look
    something like this:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果我们再次使用`show options`命令，它将列出exploit和payload的参数。有效载荷参数将如下所示：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We can see the default username and password that will be added to our target
    operating system is `metasploit` and `metasploit`. We can change these values
    by using the `set PASS` and `set USER` commands.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到将添加到我们的目标操作系统的默认用户名和密码是`metasploit`和`metasploit`。我们可以使用`set PASS`和`set
    USER`命令更改这些值。
- en: 'Now that our payload is set, we are ready to penetrate the target machine.
    We will use the following command to launch the exploit:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们的有效载荷已设置好，我们准备渗透目标机器。我们将使用以下命令启动exploit：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The last line of the output shows that the exploit was completed successfully
    on the target machine. Now there will be a new user added in the target machine.
    The output also says that no session was created. This is because the payload
    we used was a simple `adduser` that doesn't need any active session. Hence, once
    the exploit completes, the connection with the target is ended. In the next recipe,
    we will use the payload to set up a session.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的最后一行显示exploit已成功完成在目标机器上。现在将在目标机器中添加一个新用户。输出还表示未创建任何会话。这是因为我们使用的有效载荷是一个简单的`adduser`，不需要任何活动会话。因此，一旦exploit完成，与目标的连接就会结束。在下一个步骤中，我们将使用有效载荷设置会话。
- en: How it works...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: There is vulnerability in the part of RPC that deals with the message exchange
    over TCP/IP. The failure results because of incorrect handling of malformed messages.
    This particular vulnerability affects a **Distributed Component Object Model (DCOM)**
    interface with RPC, which listens on RPC enabled ports. So, the target machine
    must have an available port running an RPC service.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: RPC的一部分存在漏洞，该漏洞涉及通过TCP/IP进行消息交换。失败是因为对畸形消息的处理不正确。这种特定的漏洞影响具有RPC的**分布式组件对象模型（DCOM）**接口，该接口监听RPC启用的端口。因此，目标机器必须具有运行RPC服务的可用端口。
- en: This interface handles the DCOM object activation requests that are sent by
    client machines to the server. An attacker who successfully exploited this vulnerability
    would be able to run the code with local system privileges on an affected system.
    The attacker would be able to take any action on the system. This includes installing
    programs, viewing/changing/deleting data, or creating new accounts with full privileges.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此接口处理由客户机发送到服务器的DCOM对象激活请求。成功利用此漏洞的攻击者将能够以受影响系统上的本地系统特权运行代码。攻击者将能够在系统上执行任何操作。这包括安装程序、查看/更改/删除数据或创建具有完全特权的新帐户。
- en: 'For more details on this vulnerability, you can visit the following link to
    Microsoft Security Bulletin:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此漏洞的更多详细信息，您可以访问以下链接到Microsoft安全公告：
- en: '[http://technet.microsoft.com/en-us/security/bulletin/ms03-026](http://technet.microsoft.com/en-us/security/bulletin/ms03-026)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://technet.microsoft.com/en-us/security/bulletin/ms03-026](http://technet.microsoft.com/en-us/security/bulletin/ms03-026)'
- en: 'Now in order to understand the working of the `adduser` payload, we will analyze
    the ruby code for the payload. Let us browse to the payload location:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了了解`adduser`有效载荷的工作原理，我们将分析有效载荷的ruby代码。让我们浏览到有效载荷位置：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following part of the code that is of interest for us:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们感兴趣的代码部分如下：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You can understand the code through the comments added with the `#` symbol.
    The code is simple and self-explanatory. It first registers values for the username
    and password. Then it goes on to hide the `CMD` function from appearing on the
    target screen while the payload gets executed. Then, the code overrides the `windows/exec`
    payload to pass the parameter values and launch a stealth command prompt to execute
    in the background.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加`#`符号的注释，您可以理解代码。代码简单且自解释。首先注册用户名和密码的值。然后，它继续隐藏`CMD`函数，以防止在目标屏幕上出现，同时执行有效载荷。然后，代码覆盖`windows/exec`有效载荷以传递参数值并启动一个隐秘的命令提示符在后台执行。
- en: You can play with the code and make your own changes. This will help you dig
    deeper into the world of payloads.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以玩弄代码并进行自己的更改。这将帮助你深入了解有效载荷的世界。
- en: Binding a shell to the target for remote access
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将一个shell绑定到目标以进行远程访问
- en: In the previous recipe, we analyzed how to exploit a Windows SP2 machine and
    add a new user account. But the connection was terminated immediately after the
    execution of exploit. In this recipe, we will move a step ahead and bind a shell
    to the target so that we can set up a remote connectivity with the target and
    gain control over it. The process is similar to the one mentioned in the previous
    recipe. All we have to do is use a different payload that can start a shell for
    us on the target machine.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一篇文章中，我们分析了如何利用Windows SP2机器并添加一个新用户账户。但是在执行利用后连接立即终止。在这篇文章中，我们将向前迈进一步，将一个shell绑定到目标上，以便我们可以建立远程连接并控制目标。这个过程与上一篇文章中提到的类似。我们所要做的就是使用一个不同的有效载荷，可以在目标机器上为我们启动一个shell。
- en: Getting ready
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will again start off by launching our `msfconsole` and our target is the
    same as in the *Penetration testing on a Windows XP SP2 machine* recipe. We will
    use the same `dcom` vulnerability and then use a different payload this time to
    bind a shell to the target.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将再次启动我们的`msfconsole`，我们的目标与*在Windows XP SP2机器上进行渗透测试*配方中相同。我们将使用相同的`dcom`漏洞，然后这次使用不同的有效载荷将一个shell绑定到目标。
- en: How to do it...
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To bind a shell to the target, follow these steps:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要将一个shell绑定到目标，按照以下步骤进行：
- en: 'We will begin by selecting the `dcom` exploit against our target machine. We
    will set up the various exploit parameters and then select the payload:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从选择`dcom`利用开始针对我们的目标机器。我们将设置各种利用参数，然后选择有效载荷：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now that our exploit is set up, we will now move to payload. Using the `show
    payloads` command will list all the available payloads. Now, we will use the `windows/shell/bind_tcp`
    payload that will open a TCP connection on port `4444` (by default) on the target
    machine and provide us a command shell:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们的利用已经设置好，我们现在将转向有效载荷。使用`show payloads`命令将列出所有可用的有效载荷。现在，我们将使用`windows/shell/bind_tcp`有效载荷，它将在目标机器上的端口`4444`（默认）上打开一个TCP连接，并为我们提供一个命令shell：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now: using the `show options` command, we can set up other relevant parameters
    such as `RHOST` and change the default port. After setting up the parameters,
    we will execute the exploit. Let us see what the output of the execution is:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在：使用`show options`命令，我们可以设置其他相关参数，如`RHOST`并更改默认端口。设置好参数后，我们将执行利用。让我们看看执行的输出是什么：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The exploit has been executed successfully and we have a command prompt started
    in our `msfconsole`. Now this session can be used to gain complete remote access
    of the target machine. We can exit from this session anytime by using the `exit`
    command.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 利用已经成功执行，并且我们在`msfconsole`中启动了一个命令提示符。现在，这个会话可以用来完全远程访问目标机器。我们可以随时使用`exit`命令退出这个会话。
- en: You might have realized by now the power of payloads in Metasploit. It is highly
    encouraged that one should try various available payloads in order to understand
    their functionality.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可能已经意识到了Metasploit中有效载荷的强大。强烈建议尝试各种可用的有效载荷，以了解它们的功能。
- en: How it works...
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The working of `dcom` exploit is the same as explained in the previous recipe.
    To understand the working of `bind_tcp`, we will have to wait a bit as it involves
    some concepts that we will deal with in a later chapter of this book. Still, you
    can have a look at the payload ruby code by browsing to `/pentest/exploits/framework3/modules/payloads/stagers/windows/bind_tcp.rb`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`dcom`利用的工作原理与上一篇文章中解释的相同。要了解`bind_tcp`的工作原理，我们需要等一会儿，因为它涉及到一些我们将在本书的后面章节中处理的概念。不过，你可以通过浏览`/pentest/exploits/framework3/modules/payloads/stagers/windows/bind_tcp.rb`来查看有效载荷ruby代码。'
- en: There's more...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: What next? How can a shell access provide us control over the target.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来呢？shell访问如何为我们提供对目标的控制。
- en: Gaining complete control of the target
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获得对目标的完全控制
- en: Now that we have a shell connectivity set up with our target machine, we can
    have full access to the target machine by using the command prompt. We can now
    move ahead to explore the target machine by using the common DOS commands available
    to us. Some of the basic operations include directory listing, copying files and
    folders, creating user agents, and so on.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在目标机器上建立了一个shell连接，我们可以通过命令提示符完全访问目标机器。现在我们可以继续使用我们可以使用的常见DOS命令来探索目标机器。一些基本操作包括目录列表、复制文件和文件夹、创建用户代理等。
- en: Penetration testing on the Windows 2003 Server
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对Windows 2003服务器进行渗透测试
- en: In the previous recipe, we analyzed how to use the `dcom` exploit to cause a
    buffer overflow and exploit our Windows target. In this recipe, we will focus
    on a similar but logically different environment. The Windows 2003 Server is one
    of the most widely used enterprise-based operating systems of Microsoft. In this
    recipe, we will see how we can exploit a Windows 2003 Server. The updated versions
    of the Windows 2003 Server are patched so the `dcom` vulnerability doesn't work
    in it. So we will try different vulnerability in this recipe. We will be using
    the `netapi32.dll` vulnerability. First, we will analyze the exploitation process
    and then analyze the cause of this vulnerability. So let us start our penetration
    testing.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一篇文章中，我们分析了如何使用`dcom`利用来引起缓冲区溢出并利用我们的Windows目标。在这篇文章中，我们将专注于一个类似但逻辑上不同的环境。Windows
    2003服务器是微软最广泛使用的企业级操作系统之一。在这篇文章中，我们将看到如何利用Windows 2003服务器。更新版本的Windows 2003服务器已经修补了`dcom`漏洞，所以在这里不起作用。因此，我们将在这篇文章中尝试不同的漏洞。我们将使用`netapi32.dll`漏洞。首先，我们将分析利用过程，然后分析这个漏洞的原因。让我们开始我们的渗透测试。
- en: Getting ready
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To start with, let us launch `msfconsole` and perform a quick scan of the target.
    It is always recommended that you should follow all the steps in a sequential
    order to make sure it strengthens the basics. The next step will be the same as
    we discussed in the previous two recipes. The only difference will be in using
    the exploit.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们启动`msfconsole`并快速扫描目标。建议您按顺序执行所有步骤，以确保加强基础知识。下一步将与我们在前两个示例中讨论的相同。唯一的区别在于使用利用。
- en: How to do it...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To perform penetration testing on the Windows 2003 Server, follow these steps:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要对Windows 2003服务器进行渗透测试，请按照以下步骤进行：
- en: 'Let us start with searching for `netapi`. This will list any available exploit
    related to `netapi` in the Metasploit directory:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们开始搜索`netapi`。这将列出Metasploit目录中与`netapi`相关的任何可用利用：
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As we can see, out of the four results, the last exploit has a great rating.
    So we will prefer using this exploit.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，四个结果中，最后一个利用具有很高的评分。所以我们将优先使用这个利用。
- en: 'We will set up `RHOST` as our target Windows 2003 Server:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将设置`RHOST`作为我们的目标Windows 2003服务器：
- en: '[PRE18]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Again, the `Id` value `0` suggests that we do not need to specify the target
    operating system.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，`Id`值`0`表明我们不需要指定目标操作系统。
- en: Once we have completed the exploit loading the process, the next step will be
    to set up the payload. We will again set up a `tcp_bind` shell on the target machine,
    as we discussed earlier.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们完成了利用加载过程，下一步将是设置有效载荷。我们将在目标机器上再次设置一个`tcp_bind` shell，就像我们之前讨论的那样。
- en: '[PRE19]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'So now, our exploit and payload are ready. The next and the final step is to
    use the `exploit` command. Let us analyze the result of the execution:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在，我们的利用和有效载荷已经准备好了。下一步也是最后一步是使用`exploit`命令。让我们分析执行的结果：
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Bingo! We have a shell connection with our target. This gives us access to the
    target machine through the command line. You can see how powerful Metasploit can
    be for penetrating target machines. It really simplifies our task to a greater
    extent. Let us take a quick look at the exploit we used in this recipe.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们与目标建立了shell连接。这使我们可以通过命令行访问目标机器。您可以看到Metasploit在渗透目标机器方面有多么强大。这确实极大地简化了我们的任务。让我们快速看一下我们在这个示例中使用的利用。
- en: How it works...
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: This module exploits a parsing flaw in the path canonicalization code of `netapi32.dll`
    through the Server Service. This module is capable of bypassing NX on some operating
    systems and service packs. The correct target must be used to prevent the Server
    Service (along with a dozen others in the same process) from crashing.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块利用了`netapi32.dll`路径规范化代码中的解析漏洞，通过服务器服务。该模块能够绕过一些操作系统和服务包上的NX。必须使用正确的目标来防止服务器服务（以及同一进程中的其他几个服务）崩溃。
- en: Windows 7/Server 2008 R2 SMB client infinite loop
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows 7/Server 2008 R2 SMB客户端无限循环
- en: There are very few exploits available for Windows 7 and Windows Server 2008\.
    The SMB client infinite loop is one such vulnerability that causes a system crash.
    This vulnerability will not provide any session or shell connectivity, but it
    is worth discussing. We will deal with the DLL injection flaw in Windows 7 in
    the *Understanding the Windows DLL injection flaws* recipe.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows 7和Windows Server 2008，可用的利用非常少。SMB客户端无限循环是一种会导致系统崩溃的漏洞。这种漏洞不会提供任何会话或shell连接，但值得讨论。我们将在*理解Windows
    DLL注入漏洞*示例中讨论Windows 7中的DLL注入漏洞。
- en: The SMB client in the kernel in Microsoft Windows Server 2008 R2 and Windows
    7 allows remote SMB servers and man-in-the-middle attackers to cause a denial
    of service (infinite loop and system hang) via SMBv1 or SMBv2 response packet.
    The packet contains an incorrect length value in a NetBIOS header or an additional
    length field at the end of this response packet. This incorrect header value is
    the main reason for the vulnerability.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Windows Server 2008 R2和Windows 7中的SMB客户端允许远程SMB服务器和中间人攻击者通过SMBv1或SMBv2响应数据包导致拒绝服务（无限循环和系统挂起）。数据包包含NetBIOS标头中的不正确长度值或此响应数据包末尾的附加长度字段。这个不正确的标头值是漏洞的主要原因。
- en: Getting ready
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Metasploit contains an auxiliary module `auxiliary/dos/windows/smb/ms10_006_negotiate_response_loop`
    which can be used to exploit the SMB server and cause a denial of service. The
    attack vector works by passing a UNC path into a web page and asking the user
    to execute it. Once the user opens the shared file, the system crashes completely
    and the target will be forced to restart.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit包含一个辅助模块`auxiliary/dos/windows/smb/ms10_006_negotiate_response_loop`，可以用来利用SMB服务器并导致拒绝服务。攻击向量通过将UNC路径传递到网页并要求用户执行它来工作。一旦用户打开共享文件，系统将完全崩溃，目标将被迫重新启动。
- en: How to do it...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To begin using this auxiliary module, we will have to execute the `use` command
    along with the path to the module. Then, we will move ahead to set up the required
    parameters and execute the module. Let us proceed to practically implement these
    steps:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用这个辅助模块，我们必须执行`use`命令以及模块的路径。然后，我们将继续设置所需的参数并执行模块。让我们继续实际实施这些步骤：
- en: '[PRE21]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Let us quickly set up the various parameters. The only parameter to look for
    is `SRVHOST` that is the localhost IP address or the penetration testers IP address.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速设置各种参数。唯一要查找的参数是`SRVHOST`，即本地主机IP地址或渗透测试者的IP地址。
- en: '[PRE22]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How it works...
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We will use the `run` command to execute the auxiliary module. Once the module
    executes, it generates a shared folder link which has to be sent to the target.
    In this case, the link generated is `\\192.168.56.101\Shared\Anything`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`run`命令来执行辅助模块。一旦模块执行，它将生成一个共享文件夹链接，必须发送给目标。在这种情况下，生成的链接是`\\192.168.56.101\Shared\Anything`。
- en: '[PRE23]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now we can make the link look less suspicious by crafting a web page and attaching
    this link to it and then sending it to the target user. Once the target clicks
    on this link, the system will completely freeze and will lead to a complete denial
    of service, thus leading to restart the system.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过制作一个网页并将该链接附加到网页上，然后发送给目标用户，使链接看起来不那么可疑。一旦目标点击该链接，系统将完全冻结，并导致完全的拒绝服务，从而导致系统重新启动。
- en: Exploiting a Linux (Ubuntu) machine
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用Linux（Ubuntu）机器
- en: Linux is also one of the widely used operating systems after Windows. In the
    previous few recipes, we saw how we can penetrate a Windows machine by exploiting
    critical flaws in available services. In this recipe, we will deal with the Linux
    operating systems. We will be using Ubuntu 9.0 in this recipe, but the process
    will be similar for exploiting any flavor of Linux and Solaris running the Samba
    service. Let us move ahead with the recipe.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Linux是继Windows之后使用最广泛的操作系统之一。在之前的几个示例中，我们看到了如何通过利用可用服务中的关键缺陷来渗透Windows机器。在本示例中，我们将处理Linux操作系统。我们将在本示例中使用Ubuntu
    9.0，但是对于渗透运行Samba服务的任何Linux和Solaris版本，该过程都是类似的。让我们继续进行本示例。
- en: Getting ready
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will start by scanning our target Linux machine to gather information about
    the available services. Let us perform a quick Nmap scan and analyze its result:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从扫描目标Linux机器开始，以收集有关可用服务的信息。让我们进行快速的Nmap扫描并分析其结果：
- en: '[PRE24]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: So now we have gathered information about the target. Our next step will be
    to select an exploit and a suitable payload for it.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经收集了有关目标的信息。我们的下一步将是选择一个利用和一个适当的有效载荷。
- en: How to do it...
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The process of penetrating a Linux machine is similar to that of Windows. Follow
    these steps:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 渗透Linux机器的过程与Windows的类似。按照以下步骤进行：
- en: 'All we have to focus on is selecting the right exploit and payload. Let us
    search for any Samba exploit available in the Metasploit directory:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要关注的是选择正确的利用和有效载荷。让我们搜索一下Metasploit目录中是否有任何Samba利用可用：
- en: '[PRE25]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The command will provide a list of various auxiliaries and exploit modules for
    Samba. We will use the `exploit/linux/samba/lsa_transnames_heap` module that is
    listed as a good rank exploit. So it will have higher probability of exploiting
    the target. Let us set the exploit as active and set up the parameters.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该命令将提供Samba的各种辅助和利用模块的列表。我们将使用列为良好排名利用的`exploit/linux/samba/lsa_transnames_heap`模块。因此，它将更有可能利用目标。让我们将利用设置为活动状态并设置参数。
- en: '[PRE26]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now our next task is to select a payload. We will have to keep one thing in
    mind that as we are targeting a Linux machine, we will have to select a Linux
    payload for our penetration process. We will be using the `linux/x86/shell_bind_tcp`
    payload that works similar to the `bind_tcp` payload we analyzed in the previous
    recipes for Windows.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的下一个任务是选择有效载荷。我们必须记住一件事，即我们正在针对Linux机器，因此我们必须为渗透过程选择一个Linux有效载荷。我们将使用`linux/x86/shell_bind_tcp`有效载荷，它与我们在之前的Windows示例中分析的`bind_tcp`有效载荷类似。
- en: '[PRE27]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We are all set now and our final step will be to provide the exploit command
    to begin the process of exploitation:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在已经准备好了，我们的最后一步将是提供利用命令来开始利用过程：
- en: '[PRE28]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: On successful execution of the exploit, we will be provided with shell connectivity
    with our target machine. The process is very much similar to the ones we discussed
    in previous recipes. The only difference lies in selecting exploits and payloads.
    The more different combinations of exploits and payloads you try the better will
    be your understanding about it.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 成功执行利用后，我们将获得与目标机器的shell连接。该过程与我们在之前的示例中讨论的非常相似。唯一的区别在于选择利用和有效载荷。尝试不同的利用和有效载荷组合，将更好地帮助您理解它。
- en: How it works...
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Let us go through a quick note about the service, its exploit, and working.
    Samba is used for printers and file sharing between Linux and Windows machines.
    This module triggers a heap overflow in the LSA RPC service of the Samba daemon.
    This module uses the talloc chunk overwrite method (credit Ramon and Adriano),
    which only works with Samba versions 3.0.21-3.0.24\. The exploit takes advantage
    of dynamic memory allocation in heaps. There are chances that the exploit may
    not succeed on the first attempt, so you can try multiple times to achieve success.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速了解一下服务、其利用和工作的相关内容。Samba用于Linux和Windows机器之间的打印和文件共享。该模块触发了Samba守护程序的LSA
    RPC服务中的堆溢出。该模块使用了talloc块覆盖方法（由Ramon和Adriano提供），该方法仅适用于Samba版本3.0.21-3.0.24。该利用利用了堆中的动态内存分配。利用可能在第一次尝试时不成功，因此您可以尝试多次以实现成功。
- en: There's more...
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Let us cover some more relevant modules related to the Linux operating system.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再来看一些与Linux操作系统相关的更多相关模块。
- en: Other relevant exploit modules for Linux
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Linux的其他相关利用模块
- en: 'Apart from the exploit module discussed in this recipe, there are two more
    modules which deserve some attention. It is highly recommended that you should
    try these exploits manually to understand them deeply. They are:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 除了本示例中讨论的利用模块外，还有两个模块值得关注。强烈建议您手动尝试这些利用以深入了解它们。它们是：
- en: '**Samba chain_reply Memory Corruption:** This exploit works by corrupting the
    memory allocated to the response packets in Samba versions prior to 3.3.13\. The
    memory crashes by passing a value larger than the destination buffer size.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Samba chain_reply内存损坏：**该利用通过破坏Samba版本3.3.13之前分配给响应数据包的内存来工作。内存通过传递大于目标缓冲区大小的值而崩溃。'
- en: '**Samba trans2open Overflow:** This is a buffer overflow vulnerability existing
    in Samba versions 2.2.0 to 2.2.8\. It works by exploiting the flaw on x86 Linux
    machines that do not have the `noexec` stack option set.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Samba trans2open溢出：**这是Samba版本2.2.0至2.2.8存在的缓冲区溢出漏洞。它通过利用在未设置`noexec`堆栈选项的x86
    Linux机器上的缺陷来工作。'
- en: Understanding the Windows DLL injection flaws
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Windows DLL注入漏洞
- en: In this recipe, we will deal with a special kind of vulnerability that does
    not directly exist in the Windows operating system. In fact, it exists in various
    application software that run on Windows. This remote attack vector deals with
    a class of vulnerabilities that affects how applications load external libraries.
    We will give an oversight of this issue to analyze it closely.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将处理一种特殊类型的漏洞，这种漏洞并不直接存在于Windows操作系统中。事实上，它存在于运行在Windows上的各种应用软件中。这种远程攻击向量涉及影响应用程序如何加载外部库的一类漏洞。我们将对这个问题进行概述，以便进行仔细分析。
- en: Getting ready
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This attack vector involves creation of a vulnerable path or directory that
    the target will have to execute in order to trigger it. The directory can be a
    file, extracted archive, USB drive, network share, and so on. The file created
    will be completely harmless, but it will execute a DLL injection code to compromise
    the system.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这种攻击向量涉及创建一个脆弱的路径或目录，目标将不得不执行以触发它。该目录可以是文件、提取的存档、USB驱动器、网络共享等。创建的文件将是完全无害的，但它将执行一个DLL注入代码来破坏系统。
- en: How to do it...
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Let us analyze a practical implementation of a DLL injection. In this example,
    our target machine is an unpatched Windows 7 Ultimate machine. The process works
    by creating a link to share the file which the target will have to access and
    execute. You will understand the process as we move ahead.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析一下DLL注入的实际实现。在这个例子中，我们的目标机器是一个未打补丁的Windows 7 Ultimate机器。该过程通过创建一个链接来共享文件，目标将不得不访问并执行该文件。随着我们的进展，你将理解这个过程。
- en: 'We will be using the `exploit/windows/browser/webdav_dll_hijacker` module as
    an exploit and `windows/meterpreter/bind_tcp` as the payload. Let us quickly set
    up the exploit and payload along with other required parameters:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用`exploit/windows/browser/webdav_dll_hijacker`模块作为利用，`windows/meterpreter/bind_tcp`作为有效载荷。让我们快速设置利用和有效载荷以及其他所需的参数：
- en: '[PRE29]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The various parameters of the exploit will help in creating a particular file
    and top-level share. The `BASENAME` parameter contains the name of the file to
    be created. `EXTENSIONS` is the file type to be created. `SHARENAME` is the top-level
    shared directory that will be created for access. `SRVHOST` is the local listening
    port and `SRVPORT` is the port number on which the the `SRVHOST` will listen for
    a connection.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 利用的各种参数将有助于创建特定文件和顶层共享。`BASENAME`参数包含要创建的文件的名称。`EXTENSIONS`是要创建的文件类型。`SHARENAME`是将为访问而创建的顶级共享目录。`SRVHOST`是本地监听端口，`SRVPORT`是`SRVHOST`将在其上监听连接的端口号。
- en: 'Once you have set up the respective parameters of exploit and payload, the
    next step is to execute the exploit. Let us see what happens when we execute it:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦设置了利用和有效载荷的各个参数，下一步就是执行利用。让我们看看当我们执行它时会发生什么：
- en: '[PRE30]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Once the exploit executes successfully, it starts listening for a connection
    and also provides a shared link that the target will have to open in order to
    trigger the exploit. Let us switch to the target screen to see what happens:![How
    to do it...](img/7423_03_01.jpg)
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦利用成功执行，它就开始监听连接，并提供一个共享链接，目标将不得不打开该链接以触发利用。让我们切换到目标屏幕看看会发生什么：![如何操作...](img/7423_03_01.jpg)
- en: 'The target will view a simple file, `policy.txt`, which has been shared by
    the attacker. The file is completely harmless. Once the user executes this file,
    a connection is established with the attacker''s machine and shell connectivity
    is established. Once the file is executed on the target, the DLL will execute
    and you will see a lot of activity on your `msfconsole` screen. Once the DLL injection
    succeeds, we will have shell connectivity (see the following screenshot):'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 目标将查看一个简单的文件`policy.txt`，这个文件是攻击者共享的。这个文件是完全无害的。一旦用户执行了这个文件，就会与攻击者的机器建立连接，并建立shell连接。一旦文件在目标上执行，DLL将执行，你将在你的`msfconsole`屏幕上看到大量的活动。一旦DLL注入成功，我们将有shell连接（见下图）：
- en: '![How to do it...](img/7423_03_02.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/7423_03_02.jpg)'
- en: How it works...
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Let us dig out the reason for this vulnerability. **Dynamic Link Library(DLL)**
    is Microsoft's implementation of shared library concept for Windows. DLLs are
    the executables that are associated with a program during the runtime to load
    the shared libraries linked with it. When an application runs, a `loadlibrary()`
    function loads the required DLL at runtime. If the location of the DLL to be loaded
    is not specified or an insufficiently qualified library path is provided by the
    application, Windows uses its own set of defined order to search for it. One of
    the locations in this default order is the current working directory.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们挖掘一下这个漏洞的原因。**动态链接库(DLL)**是微软在Windows上实现的共享库概念。DLL是在运行时与程序相关联的可执行文件，用于加载与其链接的共享库。当应用程序运行时，`loadlibrary()`函数在运行时加载所需的DLL。如果未指定要加载的DLL的位置，或者应用程序提供了不够合格的库路径，Windows将使用其自己定义的顺序来搜索它。在这个默认顺序中的一个位置是当前工作目录。
- en: Now when the target user visits the shared location, it reaches an attacker-controlled
    zone. How? The shared file (`policy.txt`) contains a less qualified path of the
    DLL, so when the target user executes it, Windows starts its own search for the
    missing DLL. Now, as the current working directory (`/documents`) is controlled
    by the attacker, he/she can add a malicious DLL code in it that Windows will execute
    (as the current working directory is one of the default locations where Windows
    looks for the libraries). Now this malicious DLL can give the power of executing
    external scripts to the attacker. Hence, the payload now comes into action and
    it sets up a shell connectivity giving full access to the target system to the
    attacker. This is how this whole attack vector is crafted.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当目标用户访问共享位置时，它会到达一个受攻击者控制的区域。如何做到的呢？共享文件（`policy.txt`）包含了一个较低限定路径的DLL，因此当目标用户执行它时，Windows会开始搜索缺失的DLL。现在，由于当前工作目录（`/documents`）受攻击者控制，他/她可以在其中添加一个恶意DLL代码，Windows将执行它（因为当前工作目录是Windows寻找库文件的默认位置之一）。现在这个恶意DLL可以赋予攻击者执行外部脚本的权限。因此，有效载荷现在开始生效，并建立一个shell连接，为攻击者提供对目标系统的完全访问权限。这就是整个攻击向量是如何设计的。
- en: There's more...
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We can look for a DLL injection using a simple tool developed by H. D. Moore.
    Let us have a quick overview of it.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用H. D. Moore开发的一个简单工具来寻找DLL注入。让我们快速了解一下。
- en: The DllHijackAudit kit by H. D. Moore
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: H. D. Moore的DllHijackAudit工具
- en: The creator of Metasploit, H. D. Moore created this security audit tool which
    can be used to perform a test for DLL injection flaws in your own environment.
    It leverages the process monitoring utility and Ruby interpreter. It works by
    monitoring whether or not a DLL was accessed within the working directory of the
    associated file. It also generates test reports. The tool and detailed documentation
    can be found at [http://blog.metasploit.com/2010/08/better-faster-stronger.html](http://blog.metasploit.com/2010/08/better-faster-stronger.html).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit的创始人H. D. Moore创建了这个安全审计工具，它可以用于在您自己的环境中测试DLL注入漏洞。它利用了进程监控实用程序和Ruby解释器。它通过监视相关文件的工作目录中是否访问了DLL来工作。它还生成测试报告。该工具和详细文档可以在[http://blog.metasploit.com/2010/08/better-faster-stronger.html](http://blog.metasploit.com/2010/08/better-faster-stronger.html)找到。
