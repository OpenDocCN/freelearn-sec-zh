- en: Assessing Authorization Checks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估授权检查
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下配方：
- en: Testing for directory traversal
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试目录遍历
- en: Testing for **Local File Include** (**LFI**)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试**本地文件包含**（**LFI**）
- en: Testing for **Remote File Include** (**RFI**)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试**远程文件包含**（**RFI**）
- en: Testing for privilege escalation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试特权升级
- en: Testing for insecure direct object reference
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试不安全的直接对象引用
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: This chapter covers the basics of authorization, including an explanation of
    how an application uses roles to determine user functions. Web penetration testing
    involves key assessments to determine how well the application validates functions
    assigned to a given role, and we will learn how to use Burp to perform such tests.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了授权的基础知识，包括应用程序如何使用角色来确定用户功能的解释。Web渗透测试涉及关键评估，以确定应用程序验证分配给特定角色的功能的程度，我们将学习如何使用Burp执行这些测试。
- en: Software requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件要求
- en: 'To complete the recipes in this chapter, you will need the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章中的配方，您将需要以下内容：
- en: OWASP broken web applications (VM)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP破损的Web应用程序（VM）
- en: OWASP mutillidae link
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP mutillidae链接
- en: Burp Proxy Community or Professional ([https://portswigger.net/burp/](https://portswigger.net/burp/))
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Burp Proxy Community或Professional（[https://portswigger.net/burp/](https://portswigger.net/burp/)）
- en: Firefox browser configured to allow Burp to proxy traffic ([https://www.mozilla.org/en-US/firefox/new/](https://www.mozilla.org/en-US/firefox/new/))
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firefox浏览器配置为允许Burp代理流量（[https://www.mozilla.org/en-US/firefox/new/](https://www.mozilla.org/en-US/firefox/new/)）
- en: The `wfuzz` wordlist repository from GitHub ([https://github.com/xmendez/wfuzz](https://github.com/xmendez/wfuzz))
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自GitHub的`wfuzz`字典存储库（[https://github.com/xmendez/wfuzz](https://github.com/xmendez/wfuzz)）
- en: Testing for directory traversal
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试目录遍历
- en: Directory traversal attacks are attempts to discover or forced browse to unauthorized
    web pages usually designed for administrators of the application. If an application
    does not configure the web document root properly and does not include proper
    authorization checks for each page accessed, a directory traversal vulnerability
    could exist. In particular situations, such a weakness could lead to system command
    injection attacks or the ability of an attacker to perform arbitrary code execution.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 目录遍历攻击是试图发现或强制浏览未经授权的网页，通常为应用程序的管理员设计。如果应用程序未正确配置Web文档根目录，并且未包括对访问的每个页面进行适当授权检查，则可能存在目录遍历漏洞。在特定情况下，这种弱点可能导致系统命令注入攻击或攻击者执行任意代码的能力。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Using OWASP Mutillidae II as our target application, let's determine whether
    it contains any directory traversal vulnerabilities.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OWASP Mutillidae II作为我们的目标应用程序，让我们确定它是否包含任何目录遍历漏洞。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Ensure Burp and the OWASP BWA VM are running and that Burp is configured in
    the Firefox browser used to view the OWASP BWA applications.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 确保Burp和OWASP BWA VM正在运行，并且Burp已在用于查看OWASP BWA应用程序的Firefox浏览器中进行配置。
- en: From the OWASP BWA Landing page, click the link to the OWASP Mutillidae II application.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从OWASP BWA登陆页面，单击链接到OWASP Mutillidae II应用程序。
- en: Open the Firefox browser on the login screen of OWASP Mutillidae II. From the
    top menu, click **Login**.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在OWASP Mutillidae II的登录屏幕上打开Firefox浏览器。从顶部菜单中，单击**登录**。
- en: 'Find the request you just performed within the **Proxy** | **HTTP history**
    table. Look for the call to the `login.php` page. Highlight the message, move
    your cursor into the **Raw** tab of the **Request** tab, right-click, and click
    on **Send to Intruder**:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到刚刚在**Proxy** | **HTTP history**表中执行的请求。查找对`login.php`页面的调用。突出显示消息，将光标移动到**Request**选项卡的**Raw**选项卡中，右键单击，然后单击**Send
    to Intruder**：
- en: '![](img/00181.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00181.jpeg)'
- en: Switch over to the **Intruder** | **Positions** tab, and clear all Burp-defined
    payload markers by clicking the **Clear $** button on the right-hand side.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到**Intruder** | **Positions**选项卡，并单击右侧的**Clear $**按钮清除所有Burp定义的有效负载标记。
- en: 'Highlight the value currently stored in the `page` parameter (`login.php`),
    and place a payload marker around it using the **Add  §** button:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 突出显示存储在`page`参数（`login.php`）中的值，并使用**Add §**按钮在其周围放置一个有效负载标记：
- en: '![](img/00182.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00182.jpeg)'
- en: 'Continue to the **Intruder** | **Payloads** tab, and select the following wordlist
    from the `wfuzz` repository: `admin-panels.txt`**. **The location of the wordlist
    from the GitHub repository follows this folder structure: `wfuzz`/`wordlist`/`general`/`admin-panels.txt`.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续到**Intruder** | **Payloads**选项卡，并从`wfuzz`存储库中选择以下字典：`admin-panels.txt`。从GitHub存储库中的位置遵循此文件夹结构：`wfuzz`/`wordlist`/`general`/`admin-panels.txt`。
- en: Click the **Load** button within the **Payload Options [Simple list]** section
    of the **Intruder** | **Payloads****,** tab and a popup will display, prompting
    for the location of your wordlist.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Intruder** | **Payloads**选项卡的**Payload Options [Simple list]**部分中单击**Load**按钮，将弹出一个窗口，提示您选择您的字典的位置。
- en: 'Browse to the location where you downloaded the `wfuzz` repository from GitHub.
    Continue to search through the `wfuzz` folder structure (`wfuzz`/`wordlist`/`general`/) until
    you reach the `admin-panels.txt` file, and then select the file by clicking**Open**:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到您从GitHub下载了`wfuzz`存储库的位置。继续搜索`wfuzz`文件夹结构（`wfuzz`/`wordlist`/`general`/），直到找到`admin-panels.txt`文件，然后通过单击**打开**选择文件：
- en: '![](img/00183.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00183.jpeg)'
- en: 'Scroll to the bottom and uncheck (by default, it is checked) the option **URL-encode
    these characters**:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到底部，取消选中（默认情况下，它已选中）**URL编码这些字符**选项：
- en: '![](img/00184.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00184.jpeg)'
- en: 'You are now ready to begin the attack. Click the **Start attack** button at
    the top right-hand corner of the **Intruder** | **Positions** page:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您已经准备好开始攻击。单击**Intruder** | **Positions**页面右上角的**Start attack**按钮：
- en: The attack results table will appear. Allow the attacks to complete. There are
    137 payloads in the `admin-panels.txt` wordlist. Sort on the **Length** column
    from ascending to descending order, to see which of the payloads hit a web page.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击结果表将出现。允许攻击完成。`admin-panels.txt`字典中有137个有效负载。按照**Length**列从升序到降序排序，以查看哪些有效负载命中了网页。
- en: 'Notice the payloads that have larger response lengths. This looks promising! 
    Perhaps we have stumbled upon some administration pages that may contain fingerprinting
    information or unauthorized access:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意响应长度较大的有效负载。看起来很有希望！也许我们已经偶然发现了一些可能包含指纹信息或未经授权访问的管理页面：
- en: '![](img/00185.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00185.jpeg)'
- en: 'Select the first page in the list with the largest length, **administrator.php**.
    From the attack results table, look at the **Response** | **Render** tab, and
    notice the page displays the PHP version and the system information:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择长度最大的列表中的第一个页面**administrator.php**。从攻击结果表中，查看**Response** | **Render**选项卡，并注意页面显示了PHP版本和系统信息：
- en: '![](img/00186.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00186.jpeg)'
- en: How it works...
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Without even being logged in, we were able to force browse to an area of the
    web application that was unmapped. The term *unmapped* means the application itself
    had no direct link to this secret configuration page. However, using Burp Intruder
    and a wordlist containing commonly known administration file names, we were able
    to discover the page using the directory traversal attack.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至在未登录的情况下，我们就能够强制浏览到Web应用程序中未映射的区域。术语*未映射*意味着应用程序本身没有直接链接到这个秘密配置页面。但是，使用Burp
    Intruder和包含常见已知管理文件名的字典，我们能够使用目录遍历攻击发现该页面。
- en: Testing for Local File Include (LFI)
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试本地文件包含（LFI）
- en: Web servers control access to privileged files and resources through configuration
    settings. Privileged files include files that should only be accessible by system
    administrators. For example, the `/etc/passwd` file on UNIX-like platforms or
    the `boot.ini` file on Windows systems.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Web服务器通过配置设置控制对特权文件和资源的访问。特权文件包括只能由系统管理员访问的文件。例如，在类UNIX平台上是`/etc/passwd`文件，或者在Windows系统上是`boot.ini`文件。
- en: A **LFI** attack is an attempt to access privileged files using directory traversal
    attacks. LFI attacks include different styles including the **dot-dot-slash attack**
    (**../**), **directory brute-forcing**, **directory** **climbing**, or **backtracking**.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**LFI**攻击是试图使用目录遍历攻击访问特权文件的尝试。LFI攻击包括不同的样式，包括**点点斜杠攻击**（**../**），**目录暴力破解**，**目录攀升**或**回溯**。'
- en: Getting ready
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using OWASP Mutillidae II as our target application, let's determine whether
    it contains any LFI vulnerabilities.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OWASP Mutillidae II作为我们的目标应用程序，让我们确定它是否包含任何LFI漏洞。
- en: How to do it...
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Ensure Burp and OWASP BWA VM are running and that Burp is configured in the
    Firefox browser used to view the OWASP BWA applications.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 确保Burp和OWASP BWA VM正在运行，并且Burp已配置在用于查看OWASP BWA应用程序的Firefox浏览器中。
- en: From the OWASP BWA Landing page, click the link to the OWASP Mutillidae II application.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从OWASP BWA登陆页面，点击链接到OWASP Mutillidae II应用程序。
- en: Open the Firefox browser to the login screen of OWASP Mutillidae II. From the
    top menu, click **Login**.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Firefox浏览器，转到OWASP Mutillidae II的登录界面。从顶部菜单，点击**Login**。
- en: Find the request you just performed within the **Proxy** | **HTTP history**
    table. Look for the call to the `login.php` page. Highlight the message, move
    your cursor into the **Raw** tab of the **Request** tab, right-click, and **Send
    to Intruder**.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Proxy** | **HTTP history**表中找到您刚刚执行的请求。查找对`login.php`页面的调用。突出显示消息，将光标移动到**Request**选项卡的**Raw**选项卡中，右键单击，然后**Send
    to Intruder**。
- en: Switch over to the **Intruder** | **Positions** tab, and clear all Burp-defined
    payload markers by clicking the **Clear §** button on the right-hand side.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到**Intruder** | **Positions**选项卡，并点击右侧的**Clear §**按钮清除所有Burp定义的有效负载标记。
- en: Highlight the value currently stored in the `page` parameter (`login.php`),
    and place a payload marker around it using the **Add  §** button on the right-hand
    side.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 突出显示当前存储在`page`参数（`login.php`）中的值，并使用右侧的**Add  §**按钮在其周围放置有效负载标记。
- en: 'Continue to the **Intruder** | **Payloads** tab.  Select the following wordlist
    from the `wfuzz` repository: `Traversal.txt`**. **The location of the wordlist
    from the GitHub repository follows this folder structure: `wfuzz`/`wordlist`/`injections`/`Traversal.txt`.'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续到**Intruder** | **Payloads**选项卡。从`wfuzz`存储库中选择以下字典：`Traversal.txt`**. **从GitHub存储库中的文件夹结构如下：`wfuzz`/`wordlist`/`injections`/`Traversal.txt`。
- en: Click the **Load** button within the **Payload Options [Simple list]** section
    of the **Intruder** | **Payloads** tab. A popup will display, prompting for the
    location of your wordlist.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Intruder** | **Payloads**选项卡中**Payload Options [Simple list]**部分的**Load**按钮。将显示一个弹出窗口，提示您输入字典的位置。
- en: 'Browse to the location where you downloaded the `wfuzz` repository from GitHub.
    Continue to search through `wfuzz` folder structure until you reach the `admin-panels.txt`
    file. Select the file and click **Open**:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到您从GitHub下载`wfuzz`存储库的位置。继续搜索`wfuzz`文件夹结构，直到找到`admin-panels.txt`文件。选择文件，然后点击**Open**：
- en: '![](img/00187.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00187.jpeg)'
- en: Scroll to the bottom and uncheck (by default, it is checked) the option **URL-encode
    these characters**.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到底部，取消选中（默认情况下是选中的）**URL-encode these characters**选项。
- en: You are now ready to begin the attack.  Click the **Start attack** button at
    the top-right-hand corner of the **Intruder** | **Positions** page.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在已经准备好开始攻击。点击**Intruder** | **Positions**页面右上角的**Start attack**按钮。
- en: The attack results table will appear. Allow the attacks to complete. Sort on
    the **Length** column from ascending to descending order, to see which of the
    payloads hit a web page. Notice the payloads with larger lengths; perhaps we gained
    unauthorized access to the system configuration files!
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击结果表将出现。允许攻击完成。按照**Length**列从升序到降序排序，以查看哪些有效负载命中了网页。注意长度较大的有效负载；也许我们已经未经授权地访问了系统配置文件！
- en: '![](img/00188.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00188.jpeg)'
- en: 'Select the Request #2 in the list. From the attack results table, look at the **Response **|
    **Render** tab and notice the page displays the host file from the system!'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在列表中选择请求＃2。从攻击结果表中，查看**响应** | **渲染**选项卡，并注意页面显示了系统中的主机文件！
- en: '![](img/00189.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00189.jpeg)'
- en: 'Continue scrolling down the list of requests in the attack results table. Look
    at request #6, and then look at the **Response** | **Render** tab and notice the
    page displays the `/etc/passwd` file from the system!'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续向下滚动攻击结果表中的请求列表。查看请求＃6，然后查看**响应** | **渲染**选项卡，并注意页面显示了系统中的`/etc/passwd`文件！
- en: '![](img/00190.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00190.jpeg)'
- en: How it works...
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Due to poorly protected file permissions and lack of application authorization
    checks, attackers are able to read privileged local files on a system containing
    sensitive information.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 由于文件权限受到不良保护和应用程序授权检查不足，攻击者能够读取系统中包含敏感信息的特权本地文件。
- en: Testing for Remote File Inclusion (RFI)
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试远程文件包含（RFI）
- en: '**Remote File Inclusion** (**RFI**) is an attack attempting to access external
    URLs and remotely located files. The attack is possible due to parameter manipulation
    and lack of server-side checks. These oversights allow parameter changes to redirect
    the user to locations that are not whitelisted or sanitized with proper data validation.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**远程文件包含**（**RFI**）是一种试图访问外部URL和远程文件的攻击。由于参数操纵和缺乏服务器端检查，攻击是可能的。这些疏忽允许参数更改将用户重定向到未列入白名单或未经适当数据验证的位置。'
- en: Getting ready
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做好准备
- en: Using OWASP Mutillidae II as our target application, let's determine whether
    it contains any RFI vulnerabilities.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OWASP Mutillidae II作为我们的目标应用程序，让我们确定它是否包含任何RFI漏洞。
- en: How to do it...
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Ensure Burp and OWASP BWA VM are running and that Burp is configured in the
    Firefox browser used to view the OWASP BWA applications.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 确保Burp和OWASP BWA VM正在运行，并且已在用于查看OWASP BWA应用程序的Firefox浏览器中配置了Burp。
- en: From the OWASP BWA Landing page, click the link to the OWASP Mutillidae II application.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从OWASP BWA登陆页面，点击链接到OWASP Mutillidae II应用程序。
- en: Open the Firefox browser to the login screen of OWASP Mutillidae II. From the
    top menu, click **Login**.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Firefox浏览器，转到OWASP Mutillidae II的登录界面。从顶部菜单中，点击**登录**。
- en: 'Find the request you just performed within the **Proxy** | **HTTP history**
    table. Look for the call to the `login.php` page:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**代理** | **HTTP历史**表中找到您刚刚执行的请求。寻找对`login.php`页面的调用：
- en: '![](img/00191.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00191.jpeg)'
- en: 'Make a note of the `page` parameter that determines the page to load:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记下确定要加载的页面的`page`参数：
- en: '![](img/00192.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00192.jpeg)'
- en: Let's see if we can exploit this parameter by providing a URL that is outside
    the application. For demonstration purposes, we will use a URL that we control
    in the OWASP BWA VM. However, in the wild, this URL would be attacker-controlled
    instead.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看是否可以通过提供应用程序外部的URL来利用此参数。出于演示目的，我们将在OWASP BWA VM中使用我们控制的URL。但是，在野外，这个URL将由攻击者控制。
- en: Switch to the **Proxy** | **Intercept** tab, and press the **Intercept is on**
    button.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到**代理** | **拦截**选项卡，并按下**拦截已打开**按钮。
- en: 'Return to the Firefox browser, and reload the login page. The request is paused
    and contained within the **Proxy** | **Intercept** tab:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到Firefox浏览器，并重新加载登录页面。请求被暂停，并包含在**代理** | **拦截**选项卡中：
- en: '![](img/00193.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00193.jpeg)'
- en: Now let's manipulate the value of the `page` parameter from `login.php` to a
    URL that is external to the application. Let's use the login page to the **GetBoo**
    application. Your URL will be specific to your machine's IP address, so adjust
    accordingly. The new URL will be `http://<your_IP_address>/getboo/`
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们将`login.php`的`page`参数值操纵为应用程序外部的URL。让我们使用登录页面到**GetBoo**应用程序。您的URL将特定于您机器的IP地址，因此请相应调整。新的URL将是`http://<your_IP_address>/getboo/`
- en: 'Replace the `login.php` value with `http://<your_IP_address>/getboo/` and click
    the **Forward** button:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`login.php`的值替换为`http://<your_IP_address>/getboo/`，然后点击**Forward**按钮：
- en: '![](img/00194.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00194.jpeg)'
- en: Now press the **Intercept is on** again to toggle the intercept button to **OFF
    (Intercept is off)**.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在再次按下**拦截已打开**按钮，以切换拦截按钮为**关闭（拦截已关闭）**。
- en: Return to the Firefox browser, and notice the page loaded is the **GetBoo**
    index page within the context of the Mutillidae application!
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到Firefox浏览器，并注意加载的页面是Mutillidae应用程序上的**GetBoo**索引页面！
- en: '![](img/00195.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00195.jpeg)'
- en: How it works...
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `page` parameter does not include proper data validation to ensure the values
    provided to it are whitelisted or contained to a prescribed list of acceptable
    values. By exploiting this weakness, we are able to dictate values to this parameter,
    which should not be allowed.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`page`参数没有包括适当的数据验证，以确保提供给它的值被列入白名单或包含在可接受值的规定列表中。通过利用这种弱点，我们能够指定这个参数的值，这是不应该被允许的。'
- en: Testing for privilege escalation
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试特权升级
- en: Developer code in an application must include authorization checks on assigned
    roles to ensure an authorized user is not able to elevate their role to a higher
    privilege. Such privilege escalation attacks occur by modifying the value of the
    assigned role and replacing the value with another. In the event that the attack
    is successful, the user gains unauthorized access to resources or functionality
    normally restricted to administrators or more-powerful accounts.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序中的开发人员代码必须包括对分配角色的授权检查，以确保授权用户无法将其角色提升到更高的特权。这种特权升级攻击是通过修改分配角色的值并用另一个值替换来发生的。如果攻击成功，用户将未经授权地访问通常限制为管理员或更强大帐户的资源或功能。
- en: Getting ready
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做好准备
- en: Using OWASP Mutillidae II as our target application, let's log in as a regular
    user, John, and determine whether we can escalate our role to admin.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OWASP Mutillidae II作为我们的目标应用程序，让我们以普通用户John的身份登录，并确定我们是否可以将我们的角色提升为管理员。
- en: How to do it...
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Ensure Burp and OWASP BWA VM are running and that Burp is configured in the
    Firefox browser used to view the OWASP BWA applications.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 确保Burp和OWASP BWA VM正在运行，并且已在用于查看OWASP BWA应用程序的Firefox浏览器中配置了Burp。
- en: From the OWASP BWA Landing page, click the link to the OWASP Mutillidae II application.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从OWASP BWA登陆页面，点击链接到OWASP Mutillidae II应用程序。
- en: Open the Firefox browser to the login screen of OWASP Mutillidae II. From the
    top menu, click **Login**.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Firefox浏览器到OWASP Mutillidae II的登录界面。从顶部菜单中，点击**登录**。
- en: 'At the login screen, log in with these credentials—username: `john` and password:
    `monkey`.'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在登录界面，使用以下凭据登录—用户名：`john`和密码：`monkey`。
- en: 'Switch to Burp''s **Proxy** | **HTTP history** tab. Find the `POST` and subsequent
    `GET` requests you just made by logging in as `john`:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp的**代理** | **HTTP历史**选项卡。通过以`john`登录，找到您刚刚进行的`POST`和随后的`GET`请求：
- en: '![](img/00196.jpeg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00196.jpeg)'
- en: Look at the `GET` request from the listing; notice the cookie name/value pairs
    shown on the **Cookie:** line.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看列表中的`GET`请求；注意**Cookie:**行上显示的cookie名称/值对。
- en: The name/value pairs of most interest include `username=john` and `uid=3`. What
    if we attempt to manipulate these values to a different role?
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最感兴趣的名称/值对包括`username=john`和`uid=3`。如果我们尝试将这些值操纵到不同的角色会发生什么？
- en: '![](img/00197.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00197.jpeg)'
- en: Let's attempt to manipulate the parameters `username` and the `uid` stored in
    the cookie to a different role. We will use Burp's **Proxy** | **Intercept** to
    help us perform this attack.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试操纵存储在cookie中的`username`和`uid`参数到不同的角色。我们将使用Burp的**代理** | **拦截**来帮助我们执行此攻击。
- en: Switch to the **Proxy** | **Intercept** tab, and press the **Intercept is on**
    button. Return to the Firefox browser and reload the login page.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到**代理** | **拦截**选项卡，然后按下**拦截已打开**按钮。返回到Firefox浏览器并重新加载登录页面。
- en: The request is paused within the **Proxy** | **Intercept** tab. While it is
    paused, change the value assigned to the username from `john` to `admin`. Also,
    change the value assigned to the `uid` from `3` to `1`*:*
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**代理** | **拦截**选项卡中暂停请求。在暂停时，将分配给用户名的值从`john`更改为`admin`。同时，将分配给`uid`的值从`3`更改为`1`。
- en: '![](img/00198.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00198.jpeg)'
- en: Click the **Forward** button, and press the **Intercept is on** again to toggle
    the intercept button to **OFF (Intercept is off)**.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**转发**按钮，然后再次按下**拦截已打开**以切换拦截按钮为**关闭（拦截已关闭）**。
- en: 'Return to the Firefox browser, and notice we are now logged in as an admin!
    We were able to escalate our privileges from a regular user to an admin, since
    the developer did not perform any authorization checks on the assigned role:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到Firefox浏览器，注意我们现在以管理员身份登录！我们能够从普通用户升级到管理员，因为开发人员没有对分配的角色执行任何授权检查：
- en: '![](img/00199.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00199.jpeg)'
- en: How it works...
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: There are several application issues associated with the privilege escalation
    attack shown in this recipe. Any actions related to account provisioning (that
    is, role assignments) should only be allowed by administrators. Without proper
    checks in place, users can attempt to escalate their provisioned roles. Another
    issue exemplified in this recipe is the sequential user ID number (for example,
    `uid=3`). Since this number is easily guessable and because most applications
    start with administrator accounts, changing the digit from `3` to `1` seemed a
    probable guess for association with the admin account.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中显示的特权升级攻击中存在几个应用程序问题。与帐户配置（即角色分配）相关的任何操作都应该只允许管理员执行。如果没有适当的检查，用户可以尝试升级他们的配置角色。在这个示例中展示的另一个问题是顺序用户ID号（例如，`uid=3`）。由于这个数字很容易被猜到，并且因为大多数应用程序都从管理员帐户开始，将数字从`3`更改为`1`似乎是与管理员帐户相关的一个可能的猜测。
- en: Testing for Insecure Direct Object Reference (IDOR)
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试不安全的直接对象引用（IDOR）
- en: Allowing unauthorized direct access to files or resources on a system based
    on user-supplied input is known as **Insecure Direct Object Reference** (**IDOR**).
    This vulnerability allows the bypassing of authorization checks placed on such
    files or resources. IDOR is a result of unchecked user supplied input to retrieve
    an object without performing authorization checks in the application code.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 基于用户提供的输入允许未经授权直接访问文件或资源的系统被称为**不安全的直接对象引用**（**IDOR**）。这种漏洞允许绕过对这些文件或资源放置的授权检查。IDOR是由于在应用程序代码中未经检查的用户提供的输入来检索对象而未执行授权检查的结果。
- en: Getting ready
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using OWASP Mutillidae II as our target application, let's manipulate the value
    of the `phpfile` parameter to determine whether we can make a call to a direct
    object reference on the system, such as `/etc/passwd` file.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OWASP Mutillidae II作为我们的目标应用程序，让我们操纵`phpfile`参数的值，以确定我们是否可以调用系统上的直接对象引用，例如`/etc/passwd`文件。
- en: How to do it...
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'From the Mutillidae menu, select **OWASP 2013** | **A4 – Insecure Direct Object
    References** | **Source Viewer**:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Mutillidae菜单中，选择**OWASP 2013** | **A4 – 不安全的直接对象引用** | **源代码查看器**：
- en: '![](img/00200.jpeg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00200.jpeg)'
- en: 'From the **Source Viewer** page, using the default file selected in the drop-down
    box (`upload-file.php`), click the **View File** button to see the contents of
    the file displayed below the button:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**源代码查看器**页面，使用下拉框中选择的默认文件（`upload-file.php`），点击**查看文件**按钮以查看文件内容显示在按钮下方：
- en: '![](img/00201.jpeg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00201.jpeg)'
- en: Switch to Burp's **Proxy** | **HTTP history** tab. Find the `POST` request you
    just made while viewing the `upload-file.php` file. Note the `phpfile` parameter
    with the value of the file to display. What would happen if we change the value
    of this parameter to something else?
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp的**代理** | **HTTP历史**选项卡。找到您刚刚在查看`upload-file.php`文件时所做的`POST`请求。注意带有要显示的文件值的`phpfile`参数。如果我们将此参数的值更改为其他内容会发生什么？
- en: '![](img/00202.jpeg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00202.jpeg)'
- en: Let's perform an IDOR attack by manipulating the value provided to the `phpfile`
    parameter to reference a file on the system instead. For example, let's try changing
    the `upload-file.php` value to `../../../../etc/passwd` via Burp's **Proxy** |
    **Intercept** functionality.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过操纵提供给`phpfile`参数的值来执行IDOR攻击，以引用系统上的文件。例如，让我们尝试通过Burp的**代理** | **拦截**功能将`upload-file.php`的值更改为`../../../../etc/passwd`。
- en: To perform this attack, follow these steps.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要执行此攻击，请按照以下步骤进行。
- en: Switch to the **Proxy** |**Intercept** tab, and press the **Intercept is on**
    button.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到**代理** | **拦截**选项卡，并按下**拦截已开启**按钮。
- en: Return to the Firefox browser and reload the login page. The request is paused
    and contained within the **Proxy** | **Intercept** tab.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到Firefox浏览器并重新加载登录页面。请求被暂停，并包含在**代理** | **拦截**选项卡中。
- en: 'As the request is paused, change the value assigned to the `phpfile` parameter
    to the value `../../../../etc/passwd` instead:'
  id: totrans-131
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于请求被暂停，将`phpfile`参数分配的值更改为`../../../../etc/passwd`：
- en: '![](img/00203.jpeg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00203.jpeg)'
- en: Click the **Forward** button. Now press the **Intercept is on** button again
    to toggle the intercept button to **OFF (Intercept is off)**.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**转发**按钮。现在再次按下**拦截已开启**按钮，将拦截按钮切换为**关闭（拦截已关闭）**。
- en: Return to the Firefox browser. Notice we can now see the contents of the `/etc/passwd`
    file!
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到Firefox浏览器。注意我们现在可以看到`/etc/passwd`文件的内容！
- en: '![](img/00204.jpeg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00204.jpeg)'
- en: How it works...
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Due to lack of proper authorization checks on the `phpfile` parameter within
    the application code, we are able to view a privileged file on the system. Developers
    and system administrators provide access controls and checks prior to the revealing
    of sensitive files and resources. When these access controls are missing, IDOR
    vulnerabilities may be present.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 由于应用程序代码中对`phpfile`参数缺乏适当的授权检查，我们能够查看系统上的特权文件。开发人员和系统管理员在揭示敏感文件和资源之前提供访问控制和检查。当这些访问控制缺失时，可能存在IDOR漏洞。
