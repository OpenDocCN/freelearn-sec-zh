- en: Penetration Testing of EC2 Instances using Kali Linux
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Kali Linux对EC2实例进行渗透测试
- en: In [Chapter 3](12c0f5b9-216d-4b5e-bae0-c6960ed5087d.xhtml), *Exploitation on
    the Cloud using Kali Linux*, we learned how to perform a penetration test on a
    vulnerable machine running on AWS. This chapter aims to help the reader set up
    a vulnerable lab for advanced penetration tests and more real-life scenarios.
    This lab will give an insight into common security misconfigurations that DevOps
    engineers make in the **continuous integration and continuous delivery** (**CI/CD**) pipeline.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](12c0f5b9-216d-4b5e-bae0-c6960ed5087d.xhtml)中，*在Kali Linux上利用云进行渗透测试*，我们学习了如何对在AWS上运行的脆弱机器进行渗透测试。本章旨在帮助读者为高级渗透测试和更多实际场景设置一个脆弱的实验室。这个实验室将让我们了解DevOps工程师在**持续集成和持续交付**
    (**CI/CD**)流水线中常见的安全配置错误。
- en: This chapter focuses on setting up a vulnerable Jenkins installation on a Linux
    **virtual machine** (**VM**) and then performing a penetration test using the
    techniques that we learned in [Chapter 3](12c0f5b9-216d-4b5e-bae0-c6960ed5087d.xhtml),
    *Exploitation on the Cloud using Kali Linux*. Also, we will take a look at some
    more techniques for scanning and information gathering to aid our penetration
    testing. And finally, once we have compromised our target, we will learn techniques
    to pivot and gain access to internal networks in the cloud.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍在Linux **虚拟机** (**VM**)上设置一个脆弱的Jenkins安装，然后使用我们在[第3章](12c0f5b9-216d-4b5e-bae0-c6960ed5087d.xhtml)中学到的技术进行渗透测试。此外，我们还将介绍一些用于扫描和信息收集的技术，以帮助我们进行渗透测试。最后，一旦我们妥协了目标，我们将学习技术来进行枢纽和访问云中的内部网络。
- en: 'In this chapter, we will cover the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Setting up a vulnerable Jenkins server in our virtual lab
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的虚拟实验室中设置一个脆弱的Jenkins服务器
- en: Configuring and securing the virtual lab to prevent unintended access
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置和保护虚拟实验室，以防止意外访问
- en: Performing a penetration test on the vulnerable machine and learning more scanning
    techniques
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对脆弱机器进行渗透测试，并学习更多的扫描技术
- en: Compromising our target and then performing post-exploitation activities
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 妥协我们的目标，然后执行后渗透活动
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following tools will be used in this chapter:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将使用以下工具：
- en: Nexpose (needs manual installation)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nexpose（需要手动安装）
- en: Nmap
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nmap
- en: Metasploit
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit
- en: Jenkins
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins
- en: Installing a vulnerable service on Windows
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上安装一个脆弱的服务
- en: Jenkins is a very important component of the CI/CD pipeline in a DevOps environment
    and mainly works as an automation server. The primary task of Jenkins is to provide
    continuous integration and facilitate continuous delivery in the software development
    process. Jenkins can be integrated with version management systems such as GitHub.
    In a typical scenario, Jenkins would fetch code uploaded to GitHub, build it,
    and then deploy it in a production environment. To learn more about Jenkins, see [https://www.cloudbees.com/jenkins/about.](https://www.cloudbees.com/jenkins/about)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins是DevOps环境中CI/CD流水线的一个非常重要的组件，主要作为自动化服务器。Jenkins的主要任务是在软件开发过程中提供持续集成并促进持续交付。Jenkins可以与GitHub等版本管理系统集成。在典型情况下，Jenkins会获取上传到GitHub的代码，构建它，然后部署到生产环境中。要了解更多关于Jenkins的信息，请参阅[https://www.cloudbees.com/jenkins/about.](https://www.cloudbees.com/jenkins/about)
- en: Jenkins offers options to provide custom build commands and arguments within
    its build console. These commands are sent directly to the shell of the **operating
    system** (**OS**). In such a scenario, we can inject malicious code into the build
    commands to compromise the server running Jenkins, getting access to the target
    network.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins提供了在其构建控制台中提供自定义构建命令和参数的选项。这些命令直接发送到**操作系统**（**OS**）的shell。在这种情况下，我们可以将恶意代码注入构建命令中，以妥协运行Jenkins的服务器，从而访问目标网络。
- en: We will start by launching a Windows Server 2008 instance (you may choose any
    tier; however, the free tier should be enough). For this tutorial, the default
    storage would be enough. Let the EC2 instance spin up.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先启动一个Windows Server 2008实例（您可以选择任何层级；但是，免费层级应该足够）。对于本教程，默认存储空间就足够了。让EC2实例启动。
- en: We will be configuring the instance to be vulnerable. Hence, in the incoming/outgoing
    rules section, ensure only port `3389` is open to the external network. Also,
    in order to ensure our Kali machine is able to access the Jenkins server, allow
    incoming connections from your Kali machine's IP and nowhere else.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将配置实例使其脆弱。因此，在传入/传出规则部分，确保只有端口`3389`对外部网络开放。此外，为了确保我们的Kali机器能够访问Jenkins服务器，允许来自Kali机器IP的传入连接，而不允许其他地方。
- en: 'Your firewall rules for the Jenkins machine should look something like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您的Jenkins机器的防火墙规则应该是这样的：
- en: '![](img/a3fba5ef-db5a-4a09-9e2d-4e03f2032ec4.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a3fba5ef-db5a-4a09-9e2d-4e03f2032ec4.jpg)'
- en: Firewall rules for the Jenkins machine
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins机器的防火墙规则
- en: Here, All traffic is allowed only from the security group of the Kali machine.
    This is just a safety measure to ensure no one else can access our vulnerable
    Jenkins machine.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，所有的流量只允许来自Kali机器的安全组。这只是一个安全措施，以确保没有其他人可以访问我们脆弱的Jenkins机器。
- en: 'Once the instance is up, it is time to set up a vulnerable Jenkins service
    on our target machine. RDP into the machine you just created and follow these
    steps:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦实例启动，就是在目标机器上设置一个脆弱的Jenkins服务的时候了。远程桌面连接到您刚创建的机器，然后按照以下步骤操作：
- en: 'Download the Jenkins installation package from [http://mirrors.jenkins.io/windows/latest](http://mirrors.jenkins.io/windows/latest):'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://mirrors.jenkins.io/windows/latest](http://mirrors.jenkins.io/windows/latest)下载Jenkins安装包：
- en: 'Simply double-click on the Jenkins installation file. Follow the onscreen instructions:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只需双击Jenkins安装文件。按照屏幕上的说明进行操作：
- en: '![](img/3211c65f-99ca-4401-9c26-9f854a7581cc.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3211c65f-99ca-4401-9c26-9f854a7581cc.jpg)'
- en: Installing Jenkins
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Jenkins
- en: 'Keep the install location default and click Next:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持安装位置默认，然后点击下一步：
- en: '![](img/903c6b6e-5f38-46b9-a6ff-fcf65c79b0fe.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/903c6b6e-5f38-46b9-a6ff-fcf65c79b0fe.jpg)'
- en: Destination folder
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 目标文件夹
- en: 'Finally, click on Install:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击安装：
- en: '![](img/d2db135d-b7c0-4e50-8a51-85f43c21968b.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d2db135d-b7c0-4e50-8a51-85f43c21968b.jpg)'
- en: 'Once your installation finishes, the browser will open automatically and prompt
    you to configure the Jenkins installation:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，浏览器将自动打开并提示您配置Jenkins安装：
- en: '![](img/badf4e62-5872-4f66-87b1-873d456aafd3.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/badf4e62-5872-4f66-87b1-873d456aafd3.jpg)'
- en: During the installation, the Jenkins installer creates an initial 32-character
    long alphanumeric password.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装过程中，Jenkins安装程序会创建一个初始的32个字符长的字母数字密码。
- en: 'Open the `initialAdminPassword` file, located at `C:\Program Files (x86)\Jenkins\secrets\`:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开位于`C:\Program Files (x86)\Jenkins\secrets\`的`initialAdminPassword`文件：
- en: '![](img/24b756d0-05e2-48f2-aa2a-fbb7d65dc34a.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/24b756d0-05e2-48f2-aa2a-fbb7d65dc34a.jpg)'
- en: 'Copy the password inside the file, paste it into the Administrator password
    field, and click Continue:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制文件中的密码，粘贴到管理员密码字段中，然后点击“继续”：
- en: '![](img/e3d93c27-e6cf-4339-8f78-3282cd4b7529.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e3d93c27-e6cf-4339-8f78-3282cd4b7529.jpg)'
- en: On the next screen, the setup wizard will ask you whether you want to Install
    suggested plugins or select specific plugins.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，设置向导将询问您是否要安装建议的插件或选择特定的插件。
- en: 'Click on the Install suggested plugins box and the installation process will
    start immediately:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“安装建议的插件”框，安装过程将立即开始：
- en: '![](img/ccc0df8f-2da3-4d36-b5af-3385cac7ae17.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ccc0df8f-2da3-4d36-b5af-3385cac7ae17.jpg)'
- en: Once the plugins are installed, you will be prompted to set up the first `admin`
    user.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 安装插件后，将提示您设置第一个`admin`用户。
- en: 'To make it a vulnerable instance, we are setting up the account with the username
    `admin` and the password also `admin`. Fill out all the other required information
    and click on Save and Continue:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使其成为一个易受攻击的实例，我们正在使用用户名`admin`和密码也是`admin`来设置帐户。填写所有其他必需的信息，然后点击“保存并继续”：
- en: '![](img/5c9aa1b1-51e7-4a05-8925-5a5add2ac906.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5c9aa1b1-51e7-4a05-8925-5a5add2ac906.jpg)'
- en: We want our Jenkins service to be available on the `Local Area Connection`interface.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望我们的Jenkins服务可以在`本地连接`接口上使用。
- en: 'Find the IP address of your Windows Server 2008 EC2 instance using the `ipconfig`
    command in Command Prompt:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用命令提示符中的`ipconfig`命令查找您的Windows Server 2008 EC2实例的IP地址：
- en: '![](img/ccb0b2b4-4f74-40c5-aa77-7688ee805bad.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ccb0b2b4-4f74-40c5-aa77-7688ee805bad.jpg)'
- en: 'Note the IPv4 address and fill in the IP on the Jenkins configuration page
    while configuring the URL:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意IPv4地址，并在配置URL时在Jenkins配置页面中填写IP：
- en: '![](img/bd5dcb78-9dfe-41e7-b946-2ee7eaf41c18.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd5dcb78-9dfe-41e7-b946-2ee7eaf41c18.jpg)'
- en: Click on Save and Finish and then on start using Jenkins. At this point, you've
    successfully installed Jenkins on your system. You will be redirected to the Jenkins
    dashboard after login.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“保存并完成”，然后点击“开始使用Jenkins”。此时，您已成功在系统上安装了Jenkins。登录后，您将被重定向到Jenkins仪表板。
- en: 'To test if the Jenkins login is reachable from the Kali machine, do the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试Jenkins登录是否可以从Kali机器访问，请执行以下操作：
- en: Create an SSH tunnel to the Kali machine using PuTTY
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用PuTTY在Kali机器上创建一个SSH隧道
- en: 'Port-forward local port `8080` to the Jenkins machine''s port `8080`:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将本地端口`8080`转发到Jenkins机器的端口`8080`：
- en: '![](img/3c7f5fce-e92f-4759-ae85-b655ee5d4f9a.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c7f5fce-e92f-4759-ae85-b655ee5d4f9a.jpg)'
- en: Open a browser and point to `http://localhost:8080`
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器，指向`http://localhost:8080`
- en: You'll be presented with the Jenkins login page. This means our Jenkins machine
    is accessible from the Kali machine.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到Jenkins登录页面。这意味着我们的Jenkins机器可以从Kali机器访问。
- en: Setting up a target machine behind the vulnerable Jenkins machine
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在易受攻击的Jenkins机器后面设置一个目标机器
- en: In order to simulate a machine that is inside an internal network or in another
    subnet, we'll set up an Ubuntu machine and make it only accessible from the Jenkins
    server.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟一个位于内部网络或另一个子网中的机器，我们将设置一个Ubuntu机器，并使其只能从Jenkins服务器访问。
- en: 'In order to visualise what our network should look like in the end, refer to
    the following diagram:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最终可视化我们的网络应该是什么样子，请参考以下图表：
- en: '![](img/2837350a-c2c7-4ffa-baf5-5565c56051d9.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2837350a-c2c7-4ffa-baf5-5565c56051d9.jpg)'
- en: We have already set up our **AWS Jenkins Machine**; now, we only need to set
    up the internal machine and isolate it from the **AWS Kali Machine**.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经设置好了**AWS Jenkins机器**；现在，我们只需要设置内部机器并将其与**AWS Kali机器**隔离开来。
- en: 'Let''s see how to do it:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何做到：
- en: Create an Ubuntu EC2 instance
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个Ubuntu EC2实例
- en: In the Security Groups settings, edit the inbound rules and only allow all traffic
    from the security ID of the Jenkins machine
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安全组设置中，编辑入站规则，并只允许来自Jenkins机器的安全ID的所有流量
- en: 'Ensure the SSH port is accessible to all so that you can log in to the instance
    if required:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 确保SSH端口对所有人都是可访问的，以便在需要时可以登录到实例：
- en: '![](img/e621f0e6-d5a7-40ad-954b-79250dadd46b.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e621f0e6-d5a7-40ad-954b-79250dadd46b.jpg)'
- en: Finally, our network has been set up. The network looks exactly as we had visualized.
    In the next section, we will install Nexpose for vulnerability scanning.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们的网络已经设置好了。网络看起来完全符合我们的预期。在下一节中，我们将安装Nexpose进行漏洞扫描。
- en: Setting up Nexpose vulnerability scanner on our Kali machine
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们的Kali机器上设置Nexpose漏洞扫描器
- en: 'In [Chapter 3,](12c0f5b9-216d-4b5e-bae0-c6960ed5087d.xhtml) *Exploitation on
    the Cloud using Kali Linux*, we saw how to set up Nessus on our Kali instance
    remotely. Setting up Nexpose remotely is the same. Why do we need Nexpose in addition
    to Nessus? Automated vulnerability scanners identify vulnerabilities by matching
    service version numbers and OS signatures. However, this may sometime lead to
    false positives, or worse, false negatives. In order to double check and get a
    more comprehensive vulnerability assessment result, it is always a good idea to
    use more than one vulnerability scanner:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](12c0f5b9-216d-4b5e-bae0-c6960ed5087d.xhtml) *在Kali Linux上利用云进行利用*中，我们看到了如何在我们的Kali实例上远程设置Nessus。远程设置Nexpose也是一样的。为什么我们需要Nexpose以及Nessus？自动化漏洞扫描器通过匹配服务版本号和操作系统签名来识别漏洞。然而，这有时可能导致误报，甚至更糟糕的是漏报。为了进行双重检查并获得更全面的漏洞评估结果，使用多个漏洞扫描器总是一个好主意：
- en: Start off by visiting [https://www.rapi](https://www.rapid7.com/products/insightvm/download/)[d7.com/products/insightvm/download/](https://www.rapid7.com/products/insightvm/download/)[ and
    sign up for a license. The license will be sent to the email address that you
    provide.](https://www.rapid7.com/products/insightvm/download/)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先访问[https://www.rapi](https://www.rapid7.com/products/insightvm/download/)[d7.com/products/insightvm/download/](https://www.rapid7.com/products/insightvm/download/)[ 并注册许可证。许可证将发送到您提供的电子邮件地址。](https://www.rapid7.com/products/insightvm/download/)
- en: The Nexpose installer can be downloaded from [https://www.rapid7.com/products/insightvm/download/thank-you/](https://www.rapid7.com/products/insightvm/download/thank-you/).
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Nexpose安装程序可以从[https://www.rapid7.com/products/insightvm/download/thank-you/](https://www.rapid7.com/products/insightvm/download/thank-you/)下载。
- en: 'We will be downloading the Linux 64-bit installer. You can either download
    it to your machine and then transfer it via SCP, as we did in [Chapter 3](12c0f5b9-216d-4b5e-bae0-c6960ed5087d.xhtml),
    *Exploitation on the Cloud using Kali Linux*, or you can simply do a `wget` from
    the Kali instance''s Terminal, as follows:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将下载Linux 64位安装程序。您可以将其下载到您的计算机，然后通过SCP传输，就像我们在[第3章](12c0f5b9-216d-4b5e-bae0-c6960ed5087d.xhtml)中所做的那样，*在Kali
    Linux上利用云进行利用*，或者您可以直接从Kali实例的终端上使用`wget`进行下载，如下所示：
- en: '[PRE0]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The file we received is a POSIX shell script executable. We need to give it
    execute permissions and then run it. Simply run the following commands as `sudo`:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们收到的文件是一个POSIX shell脚本可执行文件。我们需要给它执行权限，然后运行它。只需以`sudo`身份运行以下命令：
- en: '[PRE1]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Follow the instructions on the screen. When prompted for which components to
    install, make sure you select Security Console with local Scan Engine [1, Enter]. Let
    the rest of the configurations be left to default.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 按照屏幕上的说明进行操作。在提示要安装哪些组件时，请确保选择带有本地扫描引擎的安全控制台[1，输入]。让其余的配置保持默认。
- en: 'Enter your details when prompted by the installer and ensure you set up credentials
    for your account:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装程序提示时输入您的详细信息，并确保为您的帐户设置凭据：
- en: '![](img/eb7a635b-cad7-4f26-98dc-aaeb7ebd60e1.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb7a635b-cad7-4f26-98dc-aaeb7ebd60e1.jpg)'
- en: 'Finally, in order to be able to login to the Security Console, we need to create
    a profile with a username and password. When prompted on the Terminal, enter a
    username and password. With that, the installation will be complete:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了能够登录到安全控制台，我们需要创建一个带有用户名和密码的配置文件。在终端上提示时，输入用户名和密码。安装将完成：
- en: '![](img/3304992f-e158-4010-bc79-0c1c70c1044c.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3304992f-e158-4010-bc79-0c1c70c1044c.jpg)'
- en: 'You can either choose to initialize and start the service right after installation.
    Or you can do it manually, later on, with the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择在安装后立即初始化和启动服务。或者您可以稍后手动执行以下命令：
- en: '[PRE2]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Once the installation is finished, set up an SSH port forward from your local
    port `3780` to port `3780` on the Kali machine and point your browser to port
    `localhost:3780`. You will see the login page.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，从本地端口`3780`设置一个SSH端口转发到Kali机器上的端口`3780`，并将浏览器指向端口`localhost:3780`。您将看到登录页面。
- en: 'Log in and then enter the license key on the next page:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 登录，然后在下一页上输入许可证密钥：
- en: '![](img/c8680186-0c9a-4c2d-a01b-793806a8197e.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c8680186-0c9a-4c2d-a01b-793806a8197e.jpg)'
- en: Once it has been activated, we can proceed with our scanning.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 激活后，我们可以继续进行扫描。
- en: Scanning and reconnaissance using Nmap
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Nmap进行扫描和侦察
- en: In this section, we will look at scanning subnets, and performing recon of a
    network using Nmap. Nmap is the Swiss army knife of recon, discovery, and identification
    of hosts and services in a network. Before we go in and run scans, let's take
    a look at how Nmap works.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将查看扫描子网，并使用Nmap对网络进行侦察。Nmap是网络中主机和服务的侦察、发现和识别的瑞士军刀。在我们进行扫描之前，让我们看看Nmap是如何工作的。
- en: 'Ping sweeps are very handy when it comes to discovering live hosts in a network.
    This type of scan involves sending an **ICMP ECHO** **Request** to each host in
    the network and then identifying which ones are alive based on the responses:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当发现网络中的活动主机时，ping扫描非常方便。这种类型的扫描涉及向网络中的每个主机发送**ICMP ECHO请求**，然后根据响应识别哪些主机是活动的：
- en: '![](img/06e01d2a-c079-4159-8aa1-dcdc9a045a21.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/06e01d2a-c079-4159-8aa1-dcdc9a045a21.jpg)'
- en: From the diagram, we can see that some hosts responded with an **ICMP ECHO Reply**,
    whereas some did not. Based on which hosts replied, we can identify which hosts
    are alive.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 从图中，我们可以看到一些主机响应了**ICMP ECHO回复**，而有些没有。根据哪些主机回复，我们可以确定哪些主机是活动的。
- en: In a ping sweep scan, we provide Nmap with a network range, typically, a network
    address and its subnet in CIDR form. Our AWS machines are hosted in the default
    subnet of AWS. The subnet is designated as `172.31.0.0/20`. This means the network
    address is `172.31.0.0` and `20` is the CIDR value. In other words, the network's
    subnet mask is `255.255.255.240` and can hold a total of `4094` IP addresses.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在ping扫描中，我们向Nmap提供一个网络范围，通常是一个网络地址及其CIDR形式的子网。我们的AWS机器托管在AWS的默认子网中。子网被指定为`172.31.0.0/20`。这意味着网络地址是`172.31.0.0`，`20`是CIDR值。换句话说，网络的子网掩码是`255.255.255.240`，可以容纳总共`4094`个IP地址。
- en: 'Let''s go ahead and perform a ping sweep inside our network. In order to do
    so, we will use the `-sn` flag of `nmap`. The `-sn` flag instructs `nmap` to perform
    a ping scan and the `172.31.0.0/20` input tells `nmap` that it is a network range.
    SSH into the Kali machine and issue the following command:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续在我们的网络中进行ping扫描。为了这样做，我们将使用`nmap`的`-sn`标志。`-sn`标志指示`nmap`执行ping扫描，`172.31.0.0/20`输入告诉`nmap`这是一个网络范围。SSH进入Kali机器并发出以下命令：
- en: '[PRE3]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的输出如下：
- en: '![](img/6dec2127-d7e7-404f-bbd8-d7998dec0f32.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6dec2127-d7e7-404f-bbd8-d7998dec0f32.jpg)'
- en: 'From the output, we can see `nmap` has identified five hosts that are alive.
    Not including the `172.31.0.1` and the `172.31.0.2` addresses, we can see there
    are three hosts in the network that are alive: our Kali machine, the vulnerable
    Windows machine, and the Ubuntu machine.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中，我们可以看到`nmap`已经识别出五个活动的主机。不包括`172.31.0.1`和`172.31.0.2`地址，我们可以看到网络中有三个活动的主机：我们的Kali机器，易受攻击的Windows机器和Ubuntu机器。
- en: Next, we'll learn how to scan for open ports and identify services on a particular
    host.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习如何扫描特定主机上的开放端口并识别服务。
- en: Identifying and fingerprinting open ports and services using Nmap
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Nmap识别和指纹开放端口和服务
- en: Continuing from the previous section, we will now scan a host for open ports
    and then try to identify services running on our target. For this exercise, we
    will be using the Nmap **SYN** scan `-sS` flag. This is the default and most popularly-used
    scanning technique. Why? It's because the scan is quick and can be performed without
    any hampering by the firewall. The scan is also stealthy as it does not complete
    the TCP handshake. The scan can produce distinct and accurate results between
    open, closed, and filtered ports. So how does this scan work? Let's take a look.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 继续上一节的内容，我们现在将扫描一个主机的开放端口，然后尝试识别运行在目标上的服务。在这个练习中，我们将使用Nmap的**SYN**扫描`-sS`标志。这是默认和最常用的扫描技术。为什么？因为这种扫描速度快，可以在不受防火墙干扰的情况下进行。扫描也是隐蔽的，因为它不完成TCP握手。扫描可以在开放、关闭和被过滤的端口之间产生明显和准确的结果。那么这种扫描是如何工作的呢？让我们来看一下。
- en: 'The **SYN** scan uses a half-open TCP connection to determine whether the port
    is open or closed. The **SYN** scan process can be visualized by the following
    diagram:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**SYN**扫描使用半开放的TCP连接来确定端口是开放还是关闭。**SYN**扫描过程可以通过以下图表可视化：'
- en: '![](img/203ec61b-2fb9-4bc8-922d-8e67268f5c17.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/203ec61b-2fb9-4bc8-922d-8e67268f5c17.jpg)'
- en: Each port scan starts with Nmap sending a **SYN** packet to the designated port.
    If the port is open, the target would respond with a **SYN-ACK** packet as a response.
    Nmap would then flag the port as open and then immediately close the connection
    by sending an **RST** packet.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 每次端口扫描都是从Nmap向指定端口发送**SYN**数据包开始的。如果端口是开放的，目标会以**SYN-ACK**数据包作为响应。然后Nmap会将该端口标记为开放，然后立即通过发送**RST**数据包关闭连接。
- en: 'In the case of a closed port, when Nmap sends the **SYN** packet, the target
    responds with an **RST** packet; Nmap would then flag the port as closed as shown
    in the following diagram:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在关闭的端口的情况下，当Nmap发送**SYN**数据包时，目标会用**RST**数据包做出响应；然后Nmap会将该端口标记为关闭，如下图所示：
- en: '![](img/d8b5719c-08a5-4578-bfdc-6a895649fbdc.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d8b5719c-08a5-4578-bfdc-6a895649fbdc.jpg)'
- en: 'When Nmap sends a **SYN** packet to a port and does not get any response, it
    performs a retry. If there is still no response, the port is then flagged as filtered;
    that is, it''s protected by a firewall. Another case where the port is marked
    filtered, is if Nmap receives an ICMP unreachable error, instead of no response:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当Nmap向一个端口发送**SYN**数据包并且没有收到任何响应时，它会进行重试。如果仍然没有响应，那么该端口将被标记为被过滤；也就是说，它受到了防火墙的保护。另一种情况是，如果Nmap收到ICMP不可达的错误，而不是没有响应，那么该端口将被标记为被过滤：
- en: '![](img/57efa254-12af-467c-875b-77774c41ca71.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57efa254-12af-467c-875b-77774c41ca71.jpg)'
- en: 'Let''s start by making a simple `nmap` scan on the Jenkins machine. Issue the
    following command:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从对Jenkins机器进行简单的`nmap`扫描开始。发出以下命令：
- en: '[PRE4]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](img/0535829c-28c5-47d4-afbc-7785ab835244.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0535829c-28c5-47d4-afbc-7785ab835244.jpg)'
- en: As we can see, we are presented with a list of ports that `nmap` found open.
    However, we have only scanned the default list of ports. This leaves out a number
    of ports that have not been checked. It is crucial that all open ports are identified,
    so let's see what other ports are open.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，我们得到了`nmap`发现的开放端口的列表。然而，我们只扫描了默认的端口列表。这留下了一些未经检查的端口。识别所有开放的端口是至关重要的，所以让我们看看还有哪些端口是开放的。
- en: 'Issue the following command:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发出以下命令：
- en: '[PRE5]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`-T4` is used for multiple threads so as to speed things up a little. The `-p-` flag
    tells `nmap` to scan all `65535` ports. You can optionally add the `-v` flag to
    make the output more verbose and print out more information about the target:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`-T4`用于多线程以加快速度。`-p-`标志告诉`nmap`扫描所有`65535`个端口。您可以选择添加`-v`标志使输出更详细，并打印有关目标的更多信息：'
- en: '![](img/83e34671-2a97-4a72-a178-d2aa2487de1a.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/83e34671-2a97-4a72-a178-d2aa2487de1a.jpg)'
- en: As we can see, we did miss out one open port in our earlier scan, port `5985/tcp`.
    This demonstrates why it is important to scan all of the `65535` ports to look
    for open ports.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，我们在之前的扫描中错过了一个开放的端口，端口`5985/tcp`。这说明扫描所有`65535`个端口以寻找开放的端口是很重要的。
- en: Our next step is to identify which services are running on these open ports.
    So how does Nmap identify what services are running on these ports? Nmap performs
    a full TCP handshake and then waits for the service running on the port to return
    its service banner. Nmap has its own database of probes to query services and
    match the responses to parse which service is running. Nmap will then try to identify
    the protocol, the service, and the underlying OS, based on the information received.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一步是识别这些开放端口上运行的服务。那么Nmap是如何识别这些端口上运行的服务的呢？Nmap执行完整的TCP握手，然后等待端口上运行的服务返回其服务横幅。Nmap有自己的探测数据库来查询服务并匹配响应以解析运行的服务是什么。然后Nmap将尝试根据收到的信息来识别协议、服务和底层操作系统。
- en: 'The following diagram explains how the handshake and data exchange happens:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图解释了握手和数据交换的过程：
- en: '![](img/9a7c4358-9eac-41f3-9edd-c6f9ff82697d.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9a7c4358-9eac-41f3-9edd-c6f9ff82697d.jpg)'
- en: 'The next step is to identify all the services running on these ports. Issue
    the following command:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是识别这些端口上运行的所有服务。发出以下命令：
- en: '[PRE6]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In this command, we specified that ports `135`, `139`, `445`, `3389`, `5985`,
    `8080`, and `49154` are to be scanned, since they are the only ones open. We can
    specify any particular port or range of ports that are to be scanned using the
    `-p` argument:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个命令中，我们指定了要扫描的端口`135`、`139`、`445`、`3389`、`5985`、`8080`和`49154`，因为它们是唯一开放的端口。我们可以使用`-p`参数指定要扫描的特定端口或端口范围：
- en: '![](img/89d0b381-7d8b-45e6-a9be-db7ea3289b23.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/89d0b381-7d8b-45e6-a9be-db7ea3289b23.jpg)'
- en: Nmap prints out a bunch of information from the scan result. We can see all
    the open ports have been scanned for running services. Out of these, we are interested
    in 2 ports. Notice port `445/tcp`—Nmap has identified the service as SMB, as well
    as identified that the target machine is a server running either Windows Server
    2008 R2 or 2012\. This is paramount in order to determine what OS our target is
    running, and hence, plan our next steps accordingly.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap从扫描结果中打印出大量信息。我们可以看到所有开放的端口都已经被扫描以运行服务。在这些中，我们对2个端口感兴趣。注意端口`445/tcp` - Nmap已经确定了服务为SMB，并确定目标机器是运行Windows
    Server 2008 R2或2012的服务器。这是非常重要的，以确定我们的目标正在运行什么操作系统，因此相应地规划我们的下一步。
- en: The OS can also be determined by using the `-O` flag. Nmap can identify the
    OS either by the response received from services, by using CPE fingerprint, or
    by analyzing network packets to identify the target OS.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统也可以通过使用`-O`标志来确定。Nmap可以通过从服务接收到的响应，使用CPE指纹，或通过分析网络数据包来识别目标操作系统。
- en: Performing an automated vulnerability assessment using Nexpose
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Nexpose执行自动化漏洞评估
- en: In the previous *Setting up Nexpose Vulnerability Scanner on our Kali Machine* section,we
    learned how we can set up the Nexpose scanner on our Kali attacker machine. In
    this section, we will take a look at how we can use Nexpose to perform automated
    vulnerability scans on a target machine.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的*在我们的Kali机器上设置Nexpose漏洞扫描器*部分中，我们学习了如何在我们的Kali攻击者机器上设置Nexpose扫描器。在本节中，我们将看看如何使用Nexpose对目标机器执行自动化的漏洞扫描。
- en: But first, how does Nexpose identify vulnerabilities in a target?
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，Nexpose如何识别目标中的漏洞？
- en: 'The idea is very similar to what Nmap does during service discovery. However,
    Nexpose works on a much bigger scale than just identifying the service running
    on a specific port. The entire process can be summarized in the following way:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法与Nmap在服务发现期间所做的非常相似。但是，Nexpose的工作规模要比仅识别特定端口上运行的服务大得多。整个过程可以总结如下：
- en: '**Host discovery**: Nexpose sends out ICMP packets to identify if a host is
    alive or not. Based on the response, targets are marked alive.'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**主机发现**：Nexpose发送ICMP数据包以确定主机是否存活。根据响应，目标被标记为存活。'
- en: '**Port scanning**: Once a host is confirmed as alive, Nexpose sends out a flood
    of TCP packets to identify open ports that are listening on TCP. Simultaneously,
    it sends out UDP traffic to identify ports that are listening on UDP only. Nexpose
    can either send traffic to all ports, or to a list of ports predefined in the
    scan template. Scan responses and network packets are analyzed to identify the
    type of OS running on the target, as well.'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**端口扫描**：确认主机存活后，Nexpose发送大量TCP数据包以识别正在侦听TCP的开放端口。同时，它发送UDP流量以识别仅在UDP上侦听的端口。Nexpose可以发送流量到所有端口，或者发送到扫描模板中预定义的端口列表。扫描响应和网络数据包被分析以识别目标上运行的操作系统类型。'
- en: '**Service discovery**: Nexpose then interacts with the open ports on TCP as
    well as UDP to identify the running services.'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**服务发现**：Nexpose然后与TCP和UDP上的开放端口进行交互，以识别正在运行的服务。'
- en: '**OS fingerprinting**: Data from both port and service scans are analyzed to
    identify the OS of the target system. This is not always very accurate and so
    Nexpose uses a scoring system to represent how certain the scan results are.'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**操作系统指纹识别**：分析来自端口和服务扫描的数据，以识别目标系统的操作系统。这并不总是非常准确，因此Nexpose使用评分系统来表示扫描结果的确定程度。'
- en: '**Vulnerability checks**: Finally, the identified services are scanned for
    unconfirmed and confirmed vulnerabilities. To check for any unconfirmed vulnerability,
    Nexpose identifies the patch and version from the service banner. This information
    is then matched for any known vulnerabilities that may affect that particular
    version of the software. For example, if Nexpose finds Apache HTTP 2.4.1 is running
    on port 80 of a target, Apache will take this information and cross-reference
    its vulnerability database to identify if there are any known vulnerabilities
    for version 2.4.1\. Based on that, it will come up with a list of **common vulnerabilities
    and exposures** (**CVEs**) that are assigned to that particular vulnerability.
    However, these are unconfirmed and therefore need to be tested manually to confirm
    if the vulnerability exists. Confirmed vulnerabilities, on the other hand, would
    be something similar to some software shipping with a default password. Nexpose
    would then check if the software has been left running on that default password,
    attempt to log in, and only report it as a vulnerability if it succeeds in the
    login.'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**漏洞检查**：最后，已识别的服务将被扫描以查找未确认和已确认的漏洞。为了检查任何未确认的漏洞，Nexpose从服务横幅中识别出补丁和版本。然后，这些信息将与可能影响该特定软件版本的任何已知漏洞进行匹配。例如，如果Nexpose发现目标的端口80上运行着Apache
    HTTP 2.4.1，Apache将获取这些信息并交叉参考其漏洞数据库，以确定该版本是否存在任何已知漏洞。基于此，它将列出分配给该特定漏洞的**常见漏洞和暴露**（**CVEs**）。然而，这些是未经确认的，因此需要手动测试以确认漏洞是否存在。另一方面，已确认的漏洞可能类似于某些软件使用默认密码。Nexpose将检查软件是否仍在使用默认密码运行，尝试登录，并仅在成功登录时将其报告为漏洞。'
- en: '**Brute force attacks**: Nexpose''s scan templates are by default set to test
    services such as SSH, Telnet, and FTP for default username and password combinations
    such as `''admin'':''admin''` or maybe `''cisco'':''cisco''`. Any such finding
    is added to the report.'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**暴力破解攻击**：Nexpose的扫描模板默认设置为测试诸如SSH、Telnet和FTP之类的服务，以查找默认用户名和密码组合，例如`''admin'':''admin''`或者`''cisco'':''cisco''`。任何这样的发现都将被添加到报告中。'
- en: '**Policy check**: As an added bonus, Nexpose checks the configurations of target
    machines to verify whether they are in line with baselines such as PCI DSS, HIPAA,
    and so on.'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**策略检查**：作为额外的奖励，Nexpose检查目标机器的配置，以验证它们是否符合PCI DSS、HIPAA等基线。'
- en: '**Report**: Finally, all the findings are put into a report and displayed on
    the screen.'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**报告**：最后，所有发现都被放入报告并显示在屏幕上。'
- en: 'To summarise the entire process, here is a waterfall model of the process:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 总结整个过程，以下是该过程的瀑布模型：
- en: '![](img/89a0bc79-a909-45f2-8139-1f8123d64951.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/89a0bc79-a909-45f2-8139-1f8123d64951.jpg)'
- en: Nexpose can optionally be configured to perform web scans, discover web services,
    check for vulnerabilities such as SQLi and XSS, and perform web spidering.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Nexpose可以选择配置为执行Web扫描，发现Web服务，检查SQLi和XSS等漏洞，并执行Web蜘蛛。
- en: 'Let''s start our scanning of the target server:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始扫描目标服务器：
- en: Create an SSH tunnel to your Kali machine with local port `3780` forwarded to
    port `3780` on the Kali machine
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地端口`3780`转发到Kali机器上的端口`3780`，创建一个SSH隧道
- en: 'If the Nexpose service isn''t running, you can start it by issuing the following
    command:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果Nexpose服务没有运行，你可以通过发出以下命令来启动它：
- en: '[PRE7]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Point your browser to `https://localhost:3780`
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的浏览器指向`https://localhost:3780`
- en: 'Once the initialization is complete, we''re welcomed by the Nexpose home screen:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化完成后，我们将看到Nexpose的主屏幕：
- en: 'Here, we need to click on Create New Site to start a new scan on the Jenkins
    target that we set up earlier. Give the site any name you want:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们需要点击“创建新站点”来在之前设置的Jenkins目标上开始一个新的扫描。给站点取任何你想要的名字：
- en: '![](img/5354f206-9cb1-4153-b9e0-7b23e71e92b4.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5354f206-9cb1-4153-b9e0-7b23e71e92b4.jpg)'
- en: 'Now add your target IP address. The target IP addresses can be a range of IPs,
    individual IPs separated by a comma, or an entire subnet with its CIDR value:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在添加你的目标IP地址。目标IP地址可以是一系列IP、用逗号分隔的单个IP或整个子网及其CIDR值：
- en: '![](img/343efe13-5957-4a78-9c49-41b63e0475b4.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/343efe13-5957-4a78-9c49-41b63e0475b4.jpg)'
- en: 'Set scan type to Exhaustive. There are a number of scan types available. We
    are using the Exhaustive scan so that Nexpose checks all ports to find any open
    ports, both TCP and UDP. Each individual scan type can be used for a given use
    case. **Discovery Scan**, for example, can be used to only discover hosts in a
    network, whereas **HIPAA ****compliance** will only check configuration and policies
    of a target to see if they align with the HIPAA baseline. Start the scan and wait
    for it to finish:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将扫描类型设置为详尽。有许多可用的扫描类型。我们使用详尽扫描，以便Nexpose检查所有端口，找到任何打开的端口，无论是TCP还是UDP。每种单独的扫描类型都可以用于特定的用例。例如，**发现扫描**可以用于仅发现网络中的主机，而**HIPAA合规性**将仅检查目标的配置和策略，以查看它们是否符合HIPAA基线。开始扫描并等待其完成：
- en: '![](img/92ce890b-87b4-4ebe-8552-6cef0aa09c61.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/92ce890b-87b4-4ebe-8552-6cef0aa09c61.jpg)'
- en: 'As with Nessus in [Chapter 3](12c0f5b9-216d-4b5e-bae0-c6960ed5087d.xhtml),
    *Exploitation on the Cloud using Kali Linux*, Nexpose comes up with a bunch of
    information, including the services running on our target:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 与[第3章](12c0f5b9-216d-4b5e-bae0-c6960ed5087d.xhtml)中的Nessus一样，*使用Kali Linux在云上进行利用*，Nexpose提供了大量信息，包括我们目标上运行的服务：
- en: '![](img/71c10889-bd77-4378-9eca-cb6e40ac865e.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/71c10889-bd77-4378-9eca-cb6e40ac865e.jpg)'
- en: 'We also see a few vulnerabilities it has identified:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到它识别出了一些漏洞：
- en: '![](img/68ce9363-f512-4ed3-9975-2268fd0500db.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/68ce9363-f512-4ed3-9975-2268fd0500db.png)'
- en: It has, however, failed to detect our vulnerable Jenkins service. Typically,
    a Jenkins service would have to be brute-forced to find a valid set of credentials.
    However, we have taken the liberty of assuming that we already have the login
    credentials. In the next section, we'll see how we can exploit such a vulnerable
    service and own the target server.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它未能检测到我们的有漏洞的Jenkins服务。通常，需要对Jenkins服务进行暴力破解，以找到一组有效的凭据。然而，我们假设我们已经有了登录凭据。在下一节中，我们将看到如何利用这样一个有漏洞的服务并拥有目标服务器。
- en: Using Metasploit for automated exploitation
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit进行自动化利用
- en: For this demonstration, we will use Metasploit to exploit the Jenkins server
    and get a meterpreter shell on it. Jenkins has its own script console where a
    user can type in and run arbitrary code. This is dangerous if the user's credentials
    are stolen, as anyone can then run arbitrary code using the script console. The
    Metasploit module we will be using, takes advantage of this and attempts to run
    code that would create a connection to the remote machine.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个演示中，我们将使用Metasploit来利用Jenkins服务器，并在其上获取一个meterpreter shell。Jenkins有自己的脚本控制台，用户可以在其中输入和运行任意代码。如果用户的凭据被盗，这是危险的，因为任何人都可以使用脚本控制台运行任意代码。我们将使用的Metasploit模块利用了这一点，并尝试运行代码，以创建到远程机器的连接。
- en: 'Let''s see how the exploitation is done:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何进行利用：
- en: 'SSH into the Kali machine and load the Metasploit framework by issuing the
    following command:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过发出以下命令，通过SSH登录到Kali机器并加载Metasploit框架：
- en: '[PRE8]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, we will search Metasploit for any exploits related to Jenkins:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将搜索Metasploit是否有与Jenkins相关的任何利用：
- en: '[PRE9]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的输出如下：
- en: '![](img/6fa513aa-0421-4b58-9913-1d1737280445.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6fa513aa-0421-4b58-9913-1d1737280445.jpg)'
- en: We are presented with a number of modules that are related to Jenkins.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了一些与Jenkins相关的模块。
- en: 'We will use the `jenkins_script_console` exploit in this case. Issue the following
    command:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将使用`jenkins_script_console`利用。发出以下命令：
- en: '[PRE10]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s set up the exploit and configure our target server. Issue the following
    commands, one by one:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们设置利用并配置我们的目标服务器。逐一发出以下命令：
- en: '[PRE11]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `target 0` indicates this is a Windows machine.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`目标0`表示这是一台Windows机器。'
- en: 'To see a list of all the payloads available, issue the following command:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看所有可用的有效载荷列表，请发出以下命令：
- en: '[PRE12]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'A list of all the payloads will be listed for our perusal:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 列出所有有效载荷供我们审阅：
- en: '![](img/24bf09e8-22df-4bfd-8210-d987c81d7698.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/24bf09e8-22df-4bfd-8210-d987c81d7698.jpg)'
- en: 'We''ll use a reverse TCP payload for this exploit. Since our Windows machine
    is 64 bit, we''ll choose the 64-bit payload to be delivered. Following that, set
    your `LHOST` to your Kali IP address:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用反向TCP有效载荷进行此利用。由于我们的Windows机器是64位的，我们将选择64位有效载荷进行传递。然后，将你的`LHOST`设置为你的Kali
    IP地址：
- en: '[PRE13]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once this is all done, you can issue the `show options` command to check if
    all required data have been filled in:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有这些都完成了，你可以发出`show options`命令来检查是否填写了所有必需的数据：
- en: '![](img/2f1d1528-907e-4aef-bf6d-1e863d609eb4.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2f1d1528-907e-4aef-bf6d-1e863d609eb4.jpg)'
- en: 'Now, simply run the exploit. You will drop into a meterpreter shell:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，简单地运行利用。你将进入一个meterpreter shell：
- en: '![](img/68a6af0b-7820-4675-84b3-925576ae7ab9.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/68a6af0b-7820-4675-84b3-925576ae7ab9.jpg)'
- en: We have successfully gained shell access to our target machine. In the next
    section, we will see how to perform privilege escalation and pivoting, as well
    as make our backdoor persistent.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功获得了对目标机器的shell访问。在接下来的部分，我们将看到如何进行特权升级和枢纽，以及使我们的后门持久化。
- en: Using Meterpreter for privilege escalation, pivoting, and persistence
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Meterpreter进行特权升级、枢纽和持久性
- en: Now comes the second phase of our exercise. Once we have the meterpreter shell,
    we will attempt to perform privilege escalation and get the highest possible privilege
    on this target server.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是我们练习的第二阶段。一旦我们有了meterpreter shell，我们将尝试进行特权升级，并在目标服务器上获得尽可能高的特权。
- en: 'But first, let''s learn more about our target server. Run the following command:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，让我们更多地了解一下我们的目标服务器。运行以下命令：
- en: '[PRE14]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下：
- en: '![](img/b081a36a-ff9e-4f4e-9e7e-3ecf6e12f41e.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b081a36a-ff9e-4f4e-9e7e-3ecf6e12f41e.jpg)'
- en: We are presented with a bunch of information, such as which version of Windows
    this machine is running, the domain, and so on.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了一堆信息，比如这台机器正在运行的Windows版本、域等等。
- en: 'As it is time to perform privilege escalation, issue the following command:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候进行特权升级了，输入以下命令：
- en: '[PRE15]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If successful, you should typically get a response such as:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功，你通常会得到这样的响应：
- en: '[PRE16]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This means our privilege escalation was successful. To verify that, we can
    issue the following command:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们的特权升级成功了。为了验证，我们可以输入以下命令：
- en: '[PRE17]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If we are the highest privileged user, we should get a response of `Server
    username: NT AUTHORITY\SYSTEM`.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '如果我们是最高特权用户，我们应该得到一个`Server username: NT AUTHORITY\SYSTEM`的响应。'
- en: 'Now that we have completely owned the server, let''s start looking for machines
    on the internal network. For this, we will be pivoting our meterpreter session
    and creating a bridge to the internal network from our Kali Machine:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们完全控制了服务器，让我们开始在内部网络上寻找机器。为此，我们将枢纽我们的meterpreter会话，并在我们的Kali机器上为内部网络创建一个桥接：
- en: 'Start by backgrounding your meterpreter shell:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先将你的meterpreter shell后台化：
- en: '[PRE18]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add the route of the `target` and `session` IDs:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`target`和`session`的路由ID：
- en: '[PRE19]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, to verify we have pivoted, we will try to perform a port scan on the
    hidden Ubuntu machine using Metasploit:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为了验证我们已经枢纽，我们将尝试使用Metasploit对隐藏的Ubuntu机器进行端口扫描：
- en: '[PRE20]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下：
- en: '![](img/f53dd1f8-1773-4cc4-9dfd-50122717f12e.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f53dd1f8-1773-4cc4-9dfd-50122717f12e.jpg)'
- en: From the scan result, we can see there are a number of ports open. This means
    we have successfully pivoted our compromised machine. We can conclude so, since
    only port `22` (SSH) had been made public; a scan from any other machine would
    only show port `22` open. Once the pivoting is successful, we can perform a plethora
    of attacks inside the internal network through our compromised Windows machine.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 从扫描结果中，我们可以看到有许多端口是开放的。这意味着我们成功地枢纽了我们的受损机器。我们可以得出这样的结论，因为只有端口`22`（SSH）是公开的；从任何其他机器进行的扫描只会显示端口`22`是开放的。一旦枢纽成功，我们可以通过我们的受损Windows机器在内部网络中执行大量攻击。
- en: 'Now comes the final leg of this exercise—how do we ensure we have persistent
    access to our compromised machine? We can do so using post-exploitation modules.
    First, we need to create a malicious `.exe` file that will connect back to our
    Kali machine. To that end, we will use another tool from the Metasploit suite
    called `msfvenom`:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是我们练习的最后一部分——我们如何确保我们对受损机器有持久访问？我们可以使用后渗透模块来实现。首先，我们需要创建一个恶意的`.exe`文件，它将连接回我们的Kali机器。为此，我们将使用Metasploit套件中的另一个工具`msfvenom`：
- en: 'Background the meterpreter session if you are inside it, and issue the following
    command:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你在meterpreter会话中，将其后台化，并输入以下命令：
- en: '[PRE21]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Using `msfvenom`, we have created an `exe` file that now needs to be transferred
    to the victim machine.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`msfvenom`，我们创建了一个需要传输到受害者机器的`exe`文件。
- en: 'Go back into the meterpreter session and issue the following command:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新进入meterpreter会话，输入以下命令：
- en: '[PRE22]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下：
- en: '![](img/3ef86d02-f685-4f04-a6c6-74888a38a4d1.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ef86d02-f685-4f04-a6c6-74888a38a4d1.jpg)'
- en: 'Let''s check whether our persistence is working. To verify this, from within
    the meterpreter session, reboot the target server and exit the meterpreter session.
    Issue the following command from the meterpreter session:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下我们的持久性是否有效。为了验证这一点，在meterpreter会话中，重新启动目标服务器并退出meterpreter会话。从meterpreter会话中输入以下命令：
- en: '[PRE23]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Exit the meterpreter session by running the `exit` command.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行`exit`命令退出meterpreter会话。
- en: 'Now, we set up Metasploit to listen for incoming connections. Issue the following
    commands, one by one:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们设置Metasploit监听传入连接。依次输入以下命令：
- en: '[PRE24]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We get a new incoming connection from our target server:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从目标服务器获得了一个新的传入连接：
- en: '![](img/ed93de70-06b1-4c42-a553-fb803690bd74.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed93de70-06b1-4c42-a553-fb803690bd74.jpg)'
- en: Thus, we have successfully created a backdoor to our compromised server and
    created persistent access. This concludes our exercise. This persistent access
    can now be used for lateral movement, and allows us to compromise other machines
    in the network.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们成功地为我们的受损服务器创建了一个后门，并创建了持久访问。这结束了我们的练习。这种持久访问现在可以用于横向移动，并允许我们攻击网络中的其他机器。
- en: Summary
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter walked you through how to set up a vulnerable EC2 environment,
    simulate a restricted network, and then perform a penetration test on it. We learned
    how a Jenkins server can be configured in a vulnerable way. Subsequently, we learned
    how to set up the Nexpose vulnerability scanner and then performed a vulnerability
    scan on our vulnerable Jenkins server. Further, we learned how to perform automated
    exploitation of Jenkins using Metasploit and use a meterpreter payload to pivot
    a host and perform lateral movement inside a restricted network.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了如何设置一个易受攻击的EC2环境，模拟一个受限网络，然后对其进行渗透测试。我们学习了如何以易受攻击的方式配置Jenkins服务器。随后，我们学习了如何设置Nexpose漏洞扫描器，然后对我们易受攻击的Jenkins服务器进行了漏洞扫描。此外，我们学习了如何使用Metasploit对Jenkins进行自动化利用，并使用meterpreter有效载荷来在受限网络内进行主机转移和横向移动。
- en: This brings us to the end of the fifth chapter. In the next chapter, we will
    learn about EBS volumes, disk encryption, and volume snapshots. Further, we will
    learn how to perform for forensic analysis and recover lost data from an EBS volume.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是第五章的结束。在下一章中，我们将学习关于EBS卷、磁盘加密和卷快照。此外，我们将学习如何进行取证分析，并从EBS卷中恢复丢失的数据。
- en: Further reading
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '[https://www.packtpub.com/networking-and-servers/mastering-metasploit](https://www.packtpub.com/networking-and-servers/mastering-metasploit)'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/networking-and-servers/mastering-metasploit](https://www.packtpub.com/networking-and-servers/mastering-metasploit)'
- en: '[https://nexpose.help.rapid7.com/docs/security-console-quick-start-guide](https://nexpose.help.rapid7.com/docs/security-console-quick-start-guide)'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://nexpose.help.rapid7.com/docs/security-console-quick-start-guide](https://nexpose.help.rapid7.com/docs/security-console-quick-start-guide)'
- en: '[https://jenkins.io/doc/tutorials/](https://jenkins.io/doc/tutorials/)'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://jenkins.io/doc/tutorials/](https://jenkins.io/doc/tutorials/)'
