- en: Chapter 1. Common Web Applications and Architectures
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1章。常见的Web应用程序和架构
- en: Web applications are essential for today's civilization.Â  I know this sounds
    bold, but when you think of how the technology has changed the world, there is
    no doubt that globalization is responsible for the rapid exchange of information
    across great distances via the internet in large parts of the world. While the
    internet is many things, the most inherently valuable components are those where
    data resides. Since the advent of the World Wide Web in the 1990s, this data has
    exploded, with the world currently generating more data in the next 2 years than
    in all of the recorded history. While databases and object storage are the main
    repositories for this staggering amount of data, web applications are the portals
    through which that data comes and goes is manipulated, and processed into actionable
    information. This information is presented to the end users dynamically in their
    browser, and the relative simplicity and access that this imbues are the leading
    reason whyÂ web applications are impossible to avoid. We're so accustomed to web
    applications that many of us wouldÂ find it impossible to go more than a few hours
    without them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序对今天的文明至关重要。我知道这听起来很大胆，但当你想到技术如何改变了世界，毫无疑问，全球化是世界各地通过互联网迅速交换信息的原因。虽然互联网是多方面的，但最有价值的组成部分是数据所在的地方。自1990年代万维网的出现以来，这些数据已经激增，目前世界上的数据产生量在未来2年内将超过所有已记录历史的数据总和。虽然数据库和对象存储是这一庞大数据的主要存储库，但Web应用程序是数据进出、被操纵和加工成可操作信息的门户。这些信息以动态方式呈现给最终用户在他们的浏览器中，这种相对简单和便捷是Web应用程序不可避免的主要原因。我们对Web应用程序如此习以为常，以至于我们中的许多人会发现在没有它们的情况下过几个小时是不可能的。
- en: Financial, manufacturing, government, defense, businesses, educational, and
    entertainment institutions are dependent on the web applications that allow them
    to function and interact with each other. These ubiquitous portals are trusted
    to store, process, exchange, and present all sorts of sensitive information and
    valuable data while safeguarding it from harm. the industrial world has placed
    a great deal of trust in these systems. So, any damage to these systems or any
    kind of trust violation can and often does cause far-reaching economic, political,
    or physical damage and can even lead to loss of life. The news is riddled with
    breaking news of compromised web applications every day.Â  Each of these attacks
    results in loss of that trust as data (from financial and health information to
    intellectual property) is stolen, leaked, abused, and disclosed.Â  Companies have
    been irreparably harmed, patients endangered, careers ended, and destiniesÂ altered.
    This is heavy stuff!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 金融、制造、政府、国防、企业、教育和娱乐机构依赖于Web应用程序，这些应用程序使它们能够运作并相互交互。这些无处不在的门户被信任来存储、处理、交换和呈现各种敏感信息和有价值的数据，同时保护它们免受伤害。工业界对这些系统寄予了极大的信任。因此，对这些系统的任何损害或任何信任违反都可能并经常造成深远的经济、政治或身体伤害，甚至可能导致生命的丧失。新闻充斥着每天有关被攻击的Web应用程序的突发新闻。每一次攻击都导致信任的丧失，因为数据（从财务和健康信息到知识产权）被窃取、泄露、滥用和披露。公司遭受了无法挽回的损失，患者处于危险之中，职业终结，命运改变。这是沉重的事情！
- en: While there are many potential issues that keep architects, developers, and
    operators on edge, many of these have a very low probability of occurring â��
    with one great exception.Â  Criminal and geopolitical actors and activists present
    a clear danger to computing systems, networks, and all other people or things
    that are attached to or make use of them. Bad coding, improper implementation,
    or missing countermeasures are a boon to these adversaries, offering a way in
    or providing cover for their activities. As potential attackers see the opportunity
    to wreak havoc, they invest more, educate themselves, develop new techniques,
    and then achieve more ambitious goals. This cycle repeats itself. Defending networks,
    systems, and applications against these threats is a noble cause.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有许多潜在问题让建筑师、开发人员和运营商感到紧张，但其中许多问题发生的可能性非常低，只有一个重大例外。犯罪和地缘政治行为者以及活动人士对计算系统、网络以及所有连接或利用它们的其他人或事物构成明显的危险。糟糕的编码、不正确的实施或缺少的对策对这些对手来说是一种福音，为他们提供了进入或掩盖其活动的方式。潜在的攻击者看到制造混乱的机会，他们会投入更多、学习、发展新技术，然后实现更雄心勃勃的目标。这种循环不断重复。捍卫网络、系统和应用程序免受这些威胁是一项崇高的事业。
- en: Defensive approaches also exist that can help reduce risks and minimize exposure,
    but it is the penetration tester (also known as theÂ **White Hat Hacker**) that
    ensures that they are up to the task. By thinking like an attacker - and using
    many of the same tools and techniques - a pen tester can uncover latent flaws
    in the design or implementation and allow the application stakeholders to fill
    these gaps before the malicious hacker (also known as theÂ **Black Hat Hacker**)
    can take advantage of them.Â  Security is a journey, not a destination, and the
    pen tester can be the guide leading the rest of the stakeholders to safety.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 也存在防御性方法，可以帮助减少风险和最小化暴露，但渗透测试人员（也称为白帽黑客）确保它们能够胜任。通过像攻击者一样思考，并使用许多相同的工具和技术，渗透测试人员可以发现设计或实施中的潜在缺陷，并允许应用程序利益相关者填补这些空白，以防止恶意黑客（也称为黑帽黑客）利用它们。安全是一种旅程，而不是目的地，渗透测试人员可以成为引导其他利益相关者走向安全的向导。
- en: In this book, I'll assume that you are an interested or experienced penetration
    tester who wants to specifically test web applications using Kali Linux, the most
    popular open source penetration testing platform today. The basic setup and installation
    of Kali Linux and its tools is covered in many other places, be it Packt's own
    *Web Penetration Testing with Kali Linux - Second Edition* (by *Juned Ahmed Ansari*,
    available atÂ [https://www.packtpub.com/networking-and-servers/web-penetration-testing-kali-linux-second-edition](https://www.packtpub.com/networking-and-servers/web-penetration-testing-kali-linux-second-edition))
    or one of a large number of books and websites.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我假设您是一名对使用Kali Linux专门测试Web应用程序感兴趣或有经验的渗透测试人员，Kali Linux是当今最流行的开源渗透测试平台。Kali
    Linux及其工具的基本设置和安装在许多其他地方都有介绍，无论是Packt自己的《使用Kali Linux进行Web渗透测试-第二版》（作者Juned Ahmed
    Ansari，可在[https://www.packtpub.com/networking-and-servers/web-penetration-testing-kali-linux-second-edition](https://www.packtpub.com/networking-and-servers/web-penetration-testing-kali-linux-second-edition)上找到），还是其他大量的书籍和网站。
- en: 'In this first chapter, we''ll take a look at the following:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下内容：
- en: Leading web application architectures and trends
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 领先的Web应用程序架构和趋势
- en: Common web application platforms
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见的Web应用程序平台
- en: Cloud and privately hosted solutions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云和私有托管解决方案
- en: Common defenses
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见的防御措施
- en: A high-level view of architectural soft-spots which we will evaluate as we progress
    through this book
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本书将评估的架构软点的高层视图
- en: Common architectures
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见的架构
- en: '* * *'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Web applications have evolved greatly over the last 15 years, emerging from
    their early monolithic designs to segmented approaches, which in more professionally
    deployed instances dominate the market now.Â  They have also seen a shift in how
    these elements of architecture are hosted, from purely on-premise servers, to
    virtualized instances, to now pure or hybrid cloud deployments. We should also
    understand that the clients' role in this architecture can vary greatly. This
    evolution has improved scale and availability, but the additional complexity and
    variability involved can work against less diligent developers and operators.Â
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的15年里，Web应用程序发展迅速，从早期的单片设计到分段式方法，更专业的部署实例现在主导市场。它们还在架构元素的托管方式上发生了变化，从纯粹的本地服务器到虚拟化实例，再到纯粹或混合云部署。我们还应该了解客户在这种架构中的角色可能有很大的变化。这种演变改善了规模和可用性，但涉及的额外复杂性和变化性可能会对不那么勤奋的开发人员和运营商产生负面影响。
- en: The overall web application's architecture maybe physically, logically, or functionally
    segmented. These types of segmentation may occur in combinations; with the cross-application
    integration so prevalent in enterprises, it is likely that these boundaries or
    characteristics are always in a state of transition. This segmentation serves
    to improve scalability and modularity, split management domains to match the personnel
    or team structure, increase availability, and can also offer some much-needed
    segmentation to assist in the event of a compromise. The degree to which this
    modularity occurs and how the functions are divided logically and physically is
    greatly dependent on the framework that is used.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 整体Web应用程序的架构可能在物理上、逻辑上或功能上分割。这些类型的分割可能以组合的形式出现；在企业中跨应用程序集成如此普遍，这些边界或特征很可能总是处于过渡状态。这种分割有助于提高可伸缩性和模块化，分割管理领域以匹配人员或团队结构，增加可用性，并且在发生妥协事件时还可以提供一些急需的分割。这种模块化发生的程度以及功能在逻辑上和物理上如何分割，很大程度上取决于所使用的框架。
- en: Let's discuss some of the more commonly used logical models as well as some
    of the standout frameworks that these models are implemented on.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一些常用的逻辑模型以及一些突出的这些模型所实施的框架。
- en: Standalone models
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 独立模型
- en: Most small or ad hoc web applications at some point or another wereÂ hosted
    onÂ a physical or virtual server and within a single monolithic installation,
    and this is commonly encountered in simpler self-hosted applications such as a
    small or medium business web page, inventory service, ticketing systems, and so
    on. As these applications or their associated databases grow, it becomes necessary
    to separate the components or modules to better support the scale and integrate
    with adjacent applications and data stores.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数小型或临时网络应用程序在某个时候都托管在物理或虚拟服务器上，并且在单个单片安装中，这在简单的自托管应用程序中经常遇到，比如小型或中型企业网页、库存服务、售票系统等。随着这些应用程序或其相关数据库的增长，有必要将组件或模块分开，以更好地支持规模并与相邻的应用程序和数据存储集成。
- en: 'These applications tend to use commonly available turnkey web frameworks such
    as Drupal, WordPress, Joomla!, Django, or a multitude of other frameworks, each
    of which includes a content delivery manager and language platform (for example
    Java, PHP: Hypertext Pre-Processor (PHP), Active Server Pages (ASP.NET), and so
    on), generated content in **Hyper Text Markup Language** (**HTML**), and a database
    type or types they support (various **Server Query Languages** (**SQLs**), Oracle,
    IBM DB2, or even flat files and Microsoft Access databases). Available as a single
    image or install medium, all functions reside within the same operating system
    and memory space. The platform and database combinations selected for this model
    are often more a question of developer competencies and preferences than anything
    else. Social engineering and open source information gathering on the responsible
    teams will certainly assist in characterizing the architecture of the web application.Â'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这些应用程序倾向于使用常见的现成的Web框架，如Drupal、WordPress、Joomla！、Django或其他多种框架，每个框架都包括内容交付管理器和语言平台（例如Java、PHP：超文本预处理器（PHP）、Active
    Server Pages（ASP.NET）等），以**超文本标记语言**（**HTML**）生成内容，并支持数据库类型或它们支持的类型（各种**服务器查询语言**（**SQLs**）、Oracle、IBM
    DB2，甚至平面文件和Microsoft Access数据库）。作为单个图像或安装介质，所有功能都驻留在同一操作系统和内存空间中。为这个模型选择的平台和数据库组合往往更多是开发人员的能力和偏好的问题。对负责团队进行社会工程和开源信息收集肯定会有助于描述Web应用程序的架构。
- en: 'A simple single-tier or standalone architecture is shown here in the following
    figure:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了一个简单的单层或独立架构：
- en: '![](img/B03918_01_01-1.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_01_01-1.png)'
- en: The standalone architecture was the first encountered historically, and often
    a first step in any application's evolution.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 独立架构在历史上是首次遇到的，并经常是任何应用程序演变的第一步。
- en: Three-tier models
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 三层模型
- en: 'Conceptually, the three-tier design is still used as a reference model, even
    if most applications have migrated to other topologies or have yet to evolve from
    a standalone implementation. While many applications now stray from this classic
    model, we still find it useful for understanding the basic facilities needed for
    real-worldÂ applications. We call it a three-tier model but it also assumes a
    fourth unnamed component: the client.Â'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在概念上，三层设计仍然被用作参考模型，即使大多数应用程序已经迁移到其他拓扑结构或尚未从独立实现中演变出来。虽然许多应用程序现在偏离了这个经典模型，但我们仍然发现它对于理解真实世界应用程序所需的基本设施是有用的。我们称之为三层模型，但它还假设了第四个未命名的组件：客户端。
- en: 'The three tiers include the web tier (or **front end**), the application tier,
    and the database tier, as seen here: in the following figure:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 三层包括Web层（或**前端**）、应用层和数据库层，如下图所示：
- en: '![](img/B03918_01_02.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_01_02.png)'
- en: The Three TierÂ Architecture provides greater scalability and specialization
    that modern enterprise applications require.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 三层架构提供了现代企业应用程序所需的更大的可伸缩性和专业化。
- en: 'The role of each tier is important to consider:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑每个层的角色是很重要的：
- en: '**Web or Presentation Tier/Server/Front End**: This module provides the **User
    Interface** (**UI**), authentication and authorization, scaling provisions to
    accommodate the large number of users, high availability features (to handle load
    shifting, content caching, and fault tolerance), and any software service that
    must be provisioned for the client or is used to communicate with the client.
    HTML, **eXtensible Markup Language** (**XML**), **Asynchronous JavaScript And
    XML** (**AJAX**), **Common Style Sheets** (**CSS**), JavaScript, Flash, other
    presentedÂ content, and UI componentsÂ all reside in this tier, which is commonly
    hosted by Apache, IBM WebSphere, or Microsoft IIS. In effect, this tier is what
    the users see through their browser and interact with to request and receive their
    desired outcomes.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web或呈现层/服务器/前端**：该模块提供**用户界面**（**UI**）、身份验证和授权、扩展规定以适应大量用户、高可用性功能（处理负载转移、内容缓存和容错能力）以及必须为客户端提供的任何软件服务或用于与客户端通信的服务。HTML、**可扩展标记语言**（**XML**）、**异步JavaScript和XML**（**AJAX**）、**通用样式表**（**CSS**）、JavaScript、Flash、其他呈现的内容和UI组件都驻留在这一层，通常由Apache、IBM
    WebSphere或Microsoft IIS托管。实际上，这一层是用户通过其浏览器看到并与之交互以请求和接收其所需结果的地方。'
- en: '**Application or Business Tier/Server**: This is the engine of the web application.
    Requests fielded by the web tier are acted upon here, and this is where business
    logic, processes, or algorithms reside. This tier also acts as a bridge module
    to multiple databases or even other applications, either within the same organization
    or with trusted third parties. C/C++, Java, Ruby, and PHP are usually the languages
    used to do the heavy lifting and turn raw data from the database tier into the
    information that the web tier presents to the client.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序或业务层/服务器**：这是Web应用程序的引擎。由Web层处理的请求在这里执行，这是业务逻辑、流程或算法所在的地方。这一层还充当了多个数据库或甚至同一组织内或受信任的第三方应用程序的桥接模块。C/C++、Java、Ruby和PHP通常是用来处理繁重工作并将数据库层的原始数据转换为Web层向客户端呈现的信息的语言。'
- en: '**The Database Tier/Server**: Massive amounts of data of all forms is stored
    in specialized systems called databases. These troves of information are arranged
    so they can be quickly accessed but continually scaled. Classic SQL implementations
    such as MySQL and ProstgreSQL, Redis, CouchDB, Oracle, and others are common for
    storing the data, along with a large variety of abstraction tools helping to organize
    and access that data. At the higher end of data collection and processing, there
    are a growing number of superscalar database architectures that involve **Not
    Only SQL** (**NoSQL**), which is coupled with database abstraction software such
    as Hadoop. These are commonly found in anything that claims to be *Big Data* or
    *Data Analytics*, such as Facebook, Google, NASA, and so on.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库层/服务器**：各种形式的大量数据存储在称为数据库的专门系统中。这些信息宝库被安排得可以快速访问，但不断扩展。经典的SQL实现，如MySQL和ProstgreSQL，Redis，CouchDB，Oracle等，通常用于存储数据，以及大量的抽象工具帮助组织和访问数据。在数据收集和处理的高端，有越来越多的超标量数据库架构，涉及**不仅仅是SQL**（**NoSQL**），它与Hadoop等数据库抽象软件相结合。这些通常出现在声称是*大数据*或*数据分析*的任何东西中，如Facebook，Google，NASA等。'
- en: '**The Client:** All of the three tiers need an audience, and the client (more
    specifically, their browser) is where users access the application and interact.
    The browser and its plugin software modules support the web tier in presenting
    the information as intended by the application developers.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端**：所有三个层都需要受众，而客户端（更具体地说，他们的浏览器）是用户访问应用程序并进行交互的地方。浏览器及其插件软件模块支持Web层以按照应用程序开发人员的意图呈现信息。'
- en: The vendor takes this model and modifies it to accentuate their strengths or
    more closely convey their strategies. Both Oracle's and Microsoft's reference
    web application architectures, for instance, combine the web and application tiers
    into a single tier, but Oracle calls attention to its strength on the database
    side of things, whereas Microsoft expends considerable effort expanding on its
    list of complementary services that can add value to the customer (and revenue
    for Microsoft) to include load balancing, authentication services, and ties to
    itsÂ own operating systems on a majority of clients worldwide.Â
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 供应商拿到这个模型并对其进行修改，以突出他们的优势或更贴近他们的策略。例如，甲骨文和微软的参考Web应用程序架构将Web和应用程序层合并为一个层，但甲骨文着重于其在数据库方面的优势，而微软则大力扩展其附加服务列表，以增加对客户的价值（并为微软带来收入），包括负载平衡、认证服务以及与其自己操作系统在全球大多数客户端的联系。
- en: Model-View-Controller design
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模型-视图-控制器设计
- en: The **Model-View-Controller** (**MVC**) design is a functional model that guides
    the separation of information and exposure, and to some degree, also addresses
    the privileges of the stakeholder users through role separation.Â  This allows
    the application to keep users and their inputs from intermingling with the back-end
    business processes, logic, and transactions that can expose earlier architectures
    to data leakage. The MVC design approach was actually created by thick-application
    software developers and is not a logical separation of services and components
    but rather a role-based separation. Now that web applications commonly have to
    scale while tracking and enforcing roles, web application developers have adapted
    it to their use.Â  MVC designs also facilitate code reuse and parallel module
    development.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**模型-视图-控制器**（**MVC**）设计是一个功能模型，指导信息和暴露的分离，并在一定程度上也解决了利益相关者用户通过角色分离的特权。这使应用程序能够使用户及其输入与后端业务流程、逻辑和交易分离，从而避免了早期架构中的数据泄漏。MVC设计方法实际上是由厚应用软件开发人员创建的，并不是服务和组件的逻辑分离，而是基于角色的分离。现在，Web应用程序通常必须在跟踪和执行角色的同时进行扩展，Web应用程序开发人员已经将其适应了他们的使用。MVC设计还促进了代码重用和并行模块开发。'
- en: 'An MVC design can be seen in following figure:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: MVC设计可以在以下图中看到：
- en: '![](img/B03918_01_03.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_01_03.png)'
- en: The Model-View-Controller design focuses on roles, not functions, and is often
    combined with a functional architecture.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 模型-视图-控制器设计侧重于角色，而不是功能，并经常与功能架构结合在一起。
- en: 'In the MVC design, the four components are as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在MVC设计中，这四个组件如下：
- en: '**Model**: The model maintains and updatesÂ data objects as the source of truth
    for the application, possessing the rules, logic, and patterns that make the application
    valuable. It has no knowledge of the user, but rather receives calls from the
    controller to process commands against its own data objects and returns its results
    to both the controller and the view. Another way to look at it is that the Model
    determines the behavior of the application.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**：模型作为应用程序的真相源，维护和更新数据对象，具有使应用程序有价值的规则，逻辑和模式。它不了解用户，而是接收来自控制器的调用，以处理对其自身数据对象的命令，并将结果返回给控制器和视图。另一种看待它的方式是，模型决定了应用程序的行为。'
- en: '**View**: The view is responsible for presenting the information to the user,
    and so, it is responsible for the content delivery and responses: taking feedback
    from the controller and results from the model. It frames the interface that the
    user views and interacts with. The view is where the user sees the application
    work.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：视图负责向用户呈现信息，因此负责内容传递和响应：从控制器接收反馈和从模型接收结果。它构建用户查看和交互的界面。视图是用户看到应用程序工作的地方。'
- en: '**Controller:** The controller acts as the central link between the view and
    model; Â  in receiving input from the view''s user interface, the ControllerÂ translates
    these input calls to requests that the model acts on. These requests can update
    the Model and act on the user''s intent or update the View presented to the user.
    The controller is what makes the application interactive, allowing the outside
    world to stimulate the model and alter the view.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器：** 控制器充当视图和模型之间的中央链接；在接收来自视图用户界面的输入时，控制器将这些输入调用转换为模型执行的请求。这些请求可以更新模型并执行用户的意图，或者更新向用户呈现的视图。控制器是使应用程序交互的部分，允许外部世界刺激模型并改变视图。'
- en: '**User:** AsÂ in the otherÂ earlier models, the user is an inferred *component*Â of
    the design; and indeed, the entire design will revolve around how to allow the
    application to deliver value to the customer.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户：** 与早期模型一样，用户是设计的一个推断*组件*；事实上，整个设计将围绕如何使应用程序向客户提供价值展开。'
- en: Notice that in the MVC model, there is very little detail given about software
    modules, and this is intentional.Â  By focusing on the roles and separation of
    duties, software (and now, web) developers were free to create their own platform
    and architecture while using MVC as a guide for role-based segmentation. Contrast
    this with the standalone or 3-tier modelsÂ break downÂ the operation of an application,
    and we'll see that they are thinking about the same thing in very different ways.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在MVC模型中，对软件模块的细节很少给出，这是有意为之的。通过专注于角色和职责的分离，软件（现在是Web）开发人员可以自由地创建自己的平台和架构，同时使用MVC作为基于角色的分割的指南。将这与独立或3层模型对应，我们会发现它们以非常不同的方式思考同一件事。
- en: One thing MVC does instill is a sense of statefulness, meaning that the application
    needs to track session information for continuity. This continuity drove the need
    for HTTP cookies and tokens to track sessions, which are in themselves something
    our app developers should now find ways to secure. Â Heavy use of application
    programming interfaces (APIs) also mean that there is now a larger attack surface.
    If the application is only presenting a small portion of data stored within the
    database tier, or that information should be more selectively populated to avoid
    leaks by maintaining too much information within the model that can be accessed
    when misconfigured or breached. In these cases, MVC is often shunned as a methodology
    because it can be difficult to manage data exposure within it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: MVC确实灌输了一种状态感，这意味着应用程序需要跟踪会话信息以保持连续性。这种连续性驱使了对HTTP cookie和令牌的需求，以跟踪会话，这本身就是我们的应用开发人员现在应该找到安全方式来保护的东西。大量使用应用程序编程接口（API）也意味着现在有更大的攻击面。如果应用程序只呈现数据库层中存储的一小部分数据，或者应该更有选择地填充信息以避免泄漏，通过在模型中保留太多信息，当配置错误或遭到侵犯时可以访问。在这些情况下，MVC通常被视为一种方法论，因为在其中管理数据曝光可能会很困难。
- en: It should be noted that the MVC design approach can be combined with physical
    or logical models of functions; in fact, platforms that use some MVC design principles
    power the majority of today's web applications.Â
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，MVC设计方法可以与功能的物理或逻辑模型相结合；实际上，使用一些MVC设计原则的平台支持大多数当今的Web应用程序。
- en: Web application hosting
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Web应用程序托管
- en: '* * *'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'The location of the application or its modules has a direct bearing on our
    role as penetration testers. Target applications may be anywhere on a continuum,
    from physical to virtual, to cloud-hosted components, or some combination of the
    three. Recently, a fourth possibility has arrived: containers. The continuum of
    hosting options and their relative scale and security attributes are shown in
    the following figure. Bear in mind that the dates shown here relate to the rise
    in popularity of each possibility,Â but that any of the hosting possibilities
    may coexist, and that containers, in fact, can be hosted just as well in either
    cloud or on-premise data centers.Â'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序或其模块的位置直接影响我们作为渗透测试人员的角色。目标应用程序可以位于从物理到虚拟，到云托管组件，或三者的组合的连续体上的任何位置。最近，第四种可能性已经出现：容器。主机选项的连续体及其相对规模和安全属性如下图所示。请记住，这里显示的日期与每种可能性的流行度上升有关，但任何主机可能共存，事实上，容器可以在云端或本地数据中心中同样良好地托管。
- en: 'This evolution is seen in the following figure:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这种演变在以下图中可以看到：
- en: '![](img/B03918_01_04.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_01_04.png)'
- en: Hosting options have evolved to better enable flexible and dynamic deployment
    - most customers deploy in multiple places.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 主机选项已经发展，以更好地支持灵活和动态的部署-大多数客户在多个地方部署。
- en: Physical hosting
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 物理主机
- en: For many years, application architectures and design choices only had to consider
    the physical, barebones host for running various components of the architecture.Â 
    As web applications scaled and incorporated specialized platforms, additional
    hosts were added to meet the need. New database servers wereÂ added as the data
    sets became more diverse, additional application servers would be needed to incorporate
    additional software platforms, and so on. Labor and hardware resources are dedicated
    to each additional instance, but they add cost, complexity, and waste to a data
    center. The workloads depended on dedicated resources, and this made them both
    vulnerable and inflexible.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，应用程序架构和设计选择只需考虑物理的、基本的主机来运行架构的各个组件。随着Web应用程序的扩展和整合专门的平台，需要添加额外的主机来满足需求。随着数据集变得更加多样化，需要添加新的数据库服务器，需要添加额外的应用程序服务器来整合额外的软件平台，等等。劳动力和硬件资源都专门用于每个额外的实例，但它们增加了成本、复杂性和浪费到数据中心。工作负载依赖于专用资源，这使它们既脆弱又不灵活。
- en: Virtual hosting
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 虚拟主机
- en: Virtualization has drastically changed this paradigm. By allowing hardware resources
    to be pooled and allocated logically to multiple guest systems, a single pool
    of hardware resources could contain all of the disparate operating systems, applications,
    database types, and other application necessities on a homogenous pool of servers,
    which provided centralized management and dynamically allocated interfaces and
    devices to multiple organizations in a prioritized manner.Â  Web applications,
    in particular, benefited from this, as the flexibility of virtualization has offered
    a means to create parallel application environments, clones of databases, and
    so on, for the purposes of testing, quality assurance, and the creation of surge
    capacity. Because system administrators could now manage multiple workloads on
    the same pool of resources, hardware and support costs (for example power, floor
    space, installationÂ andÂ provisioning) could also be reduced, assuming the licensing
    costs don't neutralize the inherent efficiencies. Many applications still run
    in virtual on-premise environments.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化已经大大改变了这一范式。通过允许硬件资源被汇集并逻辑地分配给多个客户系统，一个硬件资源池可以包含所有不同的操作系统、应用程序、数据库类型和其他应用程序必需品，这些都在同质化的服务器池中提供了集中管理，并以优先方式动态分配接口和设备给多个组织。特别是Web应用程序受益于此，因为虚拟化的灵活性提供了创建并行应用程序环境、数据库克隆等的手段，用于测试、质量保证和增加容量。由于系统管理员现在可以在相同的资源池上管理多个工作负载，硬件和支持成本（例如电力、楼层空间、安装和配置）也可以减少，假设许可成本不会抵消固有的效率。许多应用程序仍然在虚拟的本地环境中运行。
- en: Note
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It's worth noting that virtualization has also introduced a new tension between
    application, system administration, and network teams with the shift in responsibilities
    for security-related aspects. As such, duties may not be clearly understood, properly
    fulfilled, or even accounted for. Sounds like a great pen testing opportunity!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，虚拟化还引入了应用程序、系统管理和网络团队之间的新紧张关系，责任的转移涉及到安全相关方面。因此，职责可能不清楚，没有得到适当履行，甚至没有被考虑到。听起来像是一个很好的渗透测试机会！
- en: Cloud hosting
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 云托管
- en: Amazon took the concept of hosting virtual workloads a step further in 2006
    and introduced cloud computing, with Microsoft Azure and others following shortly
    thereafter.Â  The promise of turn-key **Software as a Service** (**SaaS**) runningÂ in
    highly survivable infrastructures via the internet allowed companies to build
    out applications without investing in hardware, bandwidth, or even real estate.
    Cloud computing was supposed to replace *private cloud* (traditional on premise
    systems), and some organizations have indeed made thisÂ happen.Â  The predominant
    trend, however, is for most enterprises to see a split in applications between
    private and public cloud, based on the types and steady-state demand for these
    services.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊在2006年将托管虚拟工作负载的概念推进了一步，并引入了云计算，微软Azure和其他公司随后也跟进。通过互联网提供高度可靠的基础设施，承诺提供即插即用的软件即服务（SaaS）使公司能够构建应用程序，而无需投资于硬件、带宽，甚至房地产。云计算应该取代私有云（传统的本地系统），确实有一些组织已经实现了这一点。然而，主要趋势是大多数企业在私有云和公共云之间看到应用程序的分裂，这取决于这些服务的类型和稳定的需求。
- en: Containers â�� a new trend
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 容器-一种新趋势
- en: Containers offer a parallel or alternate packaging; rather than including the
    entire operating system and emulated hardware common in virtual machines, containers
    only bring their unique attributes and share these common ancillaries and functions,Â making
    them smaller and more agile. These traits have allowed large companies such as
    Google and Facebook to scale in real time to surge needs of their users with microsecond
    response times and complete the automation of both the spawning and the destruction
    of container workloads.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 容器提供了并行或替代的打包方式；与虚拟机中包含整个操作系统和模拟硬件不同，容器只带来它们的独特属性，并共享这些常见的附属和功能，使它们更小更灵活。这些特点使得像谷歌和Facebook这样的大公司能够实时扩展到用户的激增需求，响应时间为微秒，并完全自动化容器工作负载的生成和销毁。
- en: So, what does all of this mean to us? The location and packaging of a web application
    impacts its security posture. Both private and public cloud-hosted applications
    will normally integrate with other applications that may span in both domains.
    These integration points offer potential threat vectors that must be tested, or
    they can certainly fall victim to attack. Cloud-hosted applications may also benefit
    from protection hosted or offered by the service provider, but they may also limit
    the variety of defensive options and web platforms that can be supported. Understanding
    these constraints can help us focus on our probing and eliminating unnecessary
    work. The hosting paradigm also determines the composition of the team of defenders
    and operators that we are encountering. Cloud hosting companies may have more
    capable security operations centers, but a division of application security responsibility
    could result in a fragmentation of the intelligence and provide a gap that can
    be used to exploit the target. The underlying virtualization and operating systems
    available will also influence the choice of the application's platform, surrounding
    security mechanisms, and so on.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这对我们意味着什么？Web应用程序的位置和打包方式影响其安全姿态。通常，私有云和公共云托管的应用程序将与可能跨越两个域的其他应用程序进行集成。这些集成点提供了潜在的威胁向量，必须进行测试，否则它们肯定会成为攻击目标。云托管的应用程序也可能受益于由服务提供商托管或提供的保护，但它们也可能限制防御选项和支持的Web平台的多样性。了解这些限制可以帮助我们专注于我们的探测和消除不必要的工作。托管范式还决定了我们所遇到的防御者和操作者团队的构成。云托管公司可能拥有更有能力的安全运营中心，但应用程序安全责任的分工可能导致情报的分散，并提供可以用来利用目标的空白。可用的虚拟化和操作系统也将影响应用程序平台的选择、周围的安全机制等等。
- en: Application development cycles
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序开发周期
- en: '* * *'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Application developers adhere to processes that help maintain progress according
    to schedule and budget. Each company developing applications will undoubtedly
    have its own process in place, but common elements of these processes will be
    various phases: from inception to delivery/operation as well as any required reviews,
    deliverable expectations, testing processes, and resource requirements.Â'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序开发人员遵循有助于按计划和预算保持进展的流程。每个开发应用程序的公司无疑都会有自己的流程，但这些流程的共同元素将是各种阶段：从构思到交付/运营以及任何所需的审查、可交付物期望、测试流程和资源需求。
- en: 'A common development process used in web applications is the application or
    **Software Development Life Cycle** (**SDLC**) shown in following figure, captured
    fromÂ [https://commons.wikimedia.org/wiki/File:SDLC_-_Software_Development_Life_Cycle.jpg](https://commons.wikimedia.org/wiki/File:SDLC_-_Software_Development_Life_Cycle.jpg):'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序中常用的开发流程是应用程序或软件开发生命周期（SDLC），如下图所示，摘自[https://commons.wikimedia.org/wiki/File:SDLC_-_Software_Development_Life_Cycle.jpg](https://commons.wikimedia.org/wiki/File:SDLC_-_Software_Development_Life_Cycle.jpg)：
- en: '![](img/B03918_01_05.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_01_05.png)'
- en: Â Every modern application developer follows the SDLCÂ or something similar.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 每个现代应用程序开发人员都遵循SDLC或类似的流程。
- en: No matter what phases are defined in a company's development process, it is
    important to incorporate testing, penetration testing included, in each to mitigate
    risk at the most cost-effective stage of the process possible.Â
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 无论公司的发展过程中定义了什么阶段，都很重要在每个阶段都加入测试，包括渗透测试，以在尽可能成本效益的阶段减轻风险。
- en: I've seen government development programs quickly exceed their budget due to
    inadequate consideration for security and security testing in the earlier phases
    of the cycle.Â  In these projects, project management often delayed any testing
    for security purposes until after the product was leaving the implementation phase,
    believing that the testing phase was so-named as to encompass all verification
    activities. Catching bugs, defects, or security gaps in this phase required significant
    rework, redesign, or work-arounds that drastically impacted the schedule and budget.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾见过政府开发项目由于在周期早期不考虑安全和安全测试而迅速超支。在这些项目中，项目管理通常推迟了任何安全测试，直到产品离开实施阶段，认为测试阶段是为了包含所有验证活动。在这个阶段捕捉错误、缺陷或安全漏洞需要大量的重做、重新设计或解决方案，严重影响了进度和预算。
- en: Coordinating with development teams
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与开发团队协调
- en: The costs to mitigate threats and impact overall schedules are the most fundamental
    reasons for testing early and is often a part of the development cycle. If you
    are a tester working within a multi-disciplinary team, early and coordinated penetration
    tests can eliminate flaws and address security concerns long before they are concrete
    and costly to address.Â  Penetration testing requirements should be part of any
    verification and a validation test plan.Â  Additionally, development teams should
    include application security experts throughout the requirement and design phases
    to ensure that the application is designed with security in mind, a perspective
    that a web application penetration tester is well-suited to provide.Â
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 减轻威胁和影响整体进度的成本是早期测试的最基本原因，通常是开发周期的一部分。如果您是在多学科团队中工作的测试人员，早期协调的渗透测试可以消除缺陷并在它们变得具体和昂贵之前解决安全问题。渗透测试要求应该是任何验证和验证测试计划的一部分。此外，开发团队应在需求和设计阶段全程包括应用程序安全专家，以确保应用程序设计时考虑了安全性，这是Web应用程序渗透测试人员很擅长提供的视角。
- en: There are references from organizations such as the **Open Web Application Security
    Project** (**OWASP**, [https://www.owasp.org/index.php/Testing_Guide_Introduction)](https://www.owasp.org/index.php/Testing_Guide_Introduction)),
    SANS ([https://www.sans.org)](https://www.sans.org)), and the US Computer Emergency
    Response Team ([https://www.us-cert.gov/bsi/articles/best-practices/security-testing/adapting-penetration-testing-software-development-purposes)](https://www.us-cert.gov/bsi/articles/best-practices/security-testing/adapting-penetration-testing-software-development-purposes))
    that can be used to help guide the adaptation of penetration testing processes
    to the company's own development cycle. The value of this *early and often* strategy
    should be easy to articulate to the management, but concrete recommendations for
    the countering of specific web application vulnerabilities and security risks
    can be found in security reports such as those prepared by WhiteHat Security,
    Inc. found here ([https://info.whitehatsec.com/rs/675-YBI-674/images/WH-2016-Stats-Report-FINAL.pdf](https://info.whitehatsec.com/rs/675-YBI-674/images/WH-2016-Stats-Report-FINAL.pdf)))
    and from major companies such as Verizon, Cisco, Dell, McAfee, and Symantec. It
    is essential to have corporate sponsorship throughout the development to ensure
    that cyber security is adequately and continuously considered.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 有来自组织如OWASP（[https://www.owasp.org/index.php/Testing_Guide_Introduction)](https://www.owasp.org/index.php/Testing_Guide_Introduction)）、SANS（[https://www.sans.org)](https://www.sans.org)）和美国计算机紧急响应小组（[https://www.us-cert.gov/bsi/articles/best-practices/security-testing/adapting-penetration-testing-software-development-purposes)](https://www.us-cert.gov/bsi/articles/best-practices/security-testing/adapting-penetration-testing-software-development-purposes)）的参考资料，可以帮助指导渗透测试流程适应公司自己的开发周期。这种早期和经常性策略的价值应该很容易向管理层表达，但针对特定Web应用程序漏洞和安全风险的具体建议可以在安全报告中找到，例如由WhiteHat
    Security, Inc.准备的报告（[https://info.whitehatsec.com/rs/675-YBI-674/images/WH-2016-Stats-Report-FINAL.pdf](https://info.whitehatsec.com/rs/675-YBI-674/images/WH-2016-Stats-Report-FINAL.pdf)），以及来自Verizon、Cisco、戴尔、麦克风和赛门铁克等大公司。在整个开发过程中，必须有公司赞助，以确保网络安全得到充分和持续的考虑。
- en: Post deployment - continued vigilance
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署后-持续警惕
- en: Testing is not something that should be completed once to *check the box*Â and
    never revisited. Web applications are complex; they reuse significant repositories
    of code contributed by a vast array of organizations and projects. VulnerabilitiesÂ in
    recent years have certainly picked up, with 2014 and 2015 being very active years
    for attacking common open source libraries in use. AttacksÂ such as Heartbleed,
    SSLPoodle, and Shellshock all take advantage of these open source libraries that,
    in some cases power, over 80% of the current web applications today. It can take
    years for admins to upgrade servers, and with the increasing volume of cataloged
    weaknesses it can be hard to follow. Â 2016, for instance, was the year of Adobe
    Flash, Microsoft internet Explorer, and Silverlight vulnerabilties.Â It is impossible
    for the community at large to police each and every use case for these fundamental
    building blocks, and a web application's owners may not be aware of the inclusion
    of these modules in the first place.Â
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 测试不应该只是为了“打勾”而完成一次，然后不再重访。Web应用程序很复杂；它们重复使用了大量由各种组织和项目贡献的代码库。近年来，漏洞的数量显然有所增加，2014年和2015年是攻击常见开源库非常活跃的一年。诸如Heartbleed、SSLPoodle和Shellshock等攻击都利用了这些开源库，这些库在某些情况下支持了当今超过80%的Web应用程序。管理员可能需要数年时间来升级服务器，而随着已记录的弱点数量不断增加，跟进可能会很困难。例如，2016年是Adobe
    Flash、Microsoft Internet Explorer和Silverlight漏洞的一年。对于整个社区来说，不可能监督每一种基本构件的使用情况，而Web应用程序的所有者可能根本不知道这些模块被包含在其中。
- en: Applications for one battery of tests should continue to be analyzed at periodic
    intervals to ascertain their risk exposure with time. It isÂ also important to
    ensure that different test methodologies, if not different teams, are used as
    often as possible to ensure that all angles are considered.Â  This testing helps
    complete the SDLC by providing the needed security feedback in the testing and
    evolution phases to ensure that, just as new features are incorporated, the application
    is also developed to stay one step ahead of potential attackers. It is highly
    recommended that you advise your customers to fund or support this testing and
    employ both internal and a selection of external testing teams so that these findings
    make their way into the patch and revision schedule just as functional enhancements
    do.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 同一组测试的应用程序应该在定期间隔内继续进行分析，以确定它们随时间的风险暴露。同样重要的是要确保尽可能经常地使用不同的测试方法，如果可能的话，使用不同的团队，以确保考虑到所有角度。这种测试有助于通过在测试和演进阶段提供所需的安全反馈来完成SDLC，以确保应用程序不仅可以整合新功能，而且可以在潜在攻击者之前发展一步。强烈建议您建议您的客户资助或支持这种测试，并雇佣内部和一些外部测试团队，以便这些发现能够像功能增强一样进入补丁和修订计划。
- en: Common weaknesses â�� where to start
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见弱点 - 从哪里开始
- en: '* * *'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Web application penetration testing focuses on a thorough evaluation of the
    application, its software framework, and platform. Web penetration testing has
    evolved into a dedicated discipline apart from network, wireless, or client-side
    (malware) tests. It is easy for us to see why recent trends indicate that almost
    75% of reported cyber attacks are focused on the web applications. If you look
    at it from the hacker''s perspective, this makes sense:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序渗透测试侧重于对应用程序、软件框架和平台进行彻底评估。Web渗透测试已经发展成为一个专门的学科，与网络、无线或客户端（恶意软件）测试分开。我们很容易理解为什么最近的趋势表明几乎75%的报告的网络攻击都集中在Web应用程序上。如果我们从黑客的角度来看，这是有道理的：
- en: Portals and workflows are very customized, and insulating them against all vectors
    during development is no small feat.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 门户和工作流程非常定制化，在开发过程中隔离它们免受所有矢量的影响并不是一件小事。
- en: Web applications must be exposed to the outside world to enable the users to
    actually use them. Too much security is seen as a burden and a potential deterrent
    to conducting business.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web应用程序必须向外部世界开放，以使用户能够真正使用它们。过多的安全性被视为负担，可能会成为开展业务的潜在障碍。
- en: Firewalls and intrusion systems, highly effective against network-based attacks,
    are not necessarily involved in the delivery of a web portal.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防火墙和入侵系统在防范基于网络的攻击方面非常有效，但不一定参与Web门户的交付。
- en: These applications present potentially proprietary or sensitive data to externally
    situated users. It is their job, so exploiting this trust can expose a massive
    amount of high-value information.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些应用程序向外部用户呈现可能是专有或敏感的数据。他们的工作就是利用这种信任来暴露大量高价值信息。
- en: Web app attacks can often expose an entire database without a file-based breach,
    making attribution and forensics more difficult.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web应用程序攻击通常可以在没有基于文件的侵入的情况下暴露整个数据库，使归因和取证变得更加困难。
- en: The bulk of this chapter was meant to introduce you to the architectural aspects
    of your targets. A deep understanding of your customers' applications will allow
    you to focus efforts on the tests that make the most sense.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的大部分内容旨在向您介绍目标的架构方面。对客户应用程序的深入了解将使您能够将精力集中在最有意义的测试上。
- en: 'Let''s look again at a typical 3-tier application architecture (shown in following
    figure*)*, and see what potential issues there may be that we should look into:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次看一下典型的3层应用程序架构（如下图所示*），看看我们应该调查的潜在问题：
- en: '![](img/B03918_01_06.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_01_06.png)'
- en: Harmful web application attacks focus on all aspects of the application's architecture
    - and so shall we.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 有害的Web应用程序攻击侧重于应用程序架构的各个方面 - 我们也应该如此。
- en: 'These potential vectors are some of the major threats we will test against;
    and in some cases, we will encompass a family of similar attack types. They are
    shown in relation to their typical place in the 3-tier design where the attack
    typically takes effect, but the attackers themselves are normally positioned in
    a public web tier much like the legitimate client. The attack categories that
    we''ll discuss as we proceed are grouped as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这些潜在的向量是我们将进行测试的一些主要威胁；在某些情况下，我们将包括一系列类似的攻击类型。它们显示了它们在典型的3层设计中的典型位置，攻击通常会生效，但攻击者本身通常位于公共Web层，很像合法客户端。随着我们的讨论，我们将按以下方式对我们将讨论的攻击类型进行分组：
- en: '**Authentication, authorization, and session management attacks**: These attacks
    (and our tests) focus on the rigor with which the application itself verifies
    the identity and enforces the privilege of a particular user. These tests will
    focus on convincing the Web Tier that we belong in the conversation.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份验证、授权和会话管理攻击：这些攻击（以及我们的测试）侧重于应用程序本身验证特定用户的身份并强制执行特权的严格程度。这些测试将专注于说服Web层我们属于这个对话。
- en: '**Cross-Site Scripting (XSS) attacks**: XSS attacks involve manipulating either
    the client or the web and/or application tiers into diverting a valid session''s
    traffic or attention to a hostile location, which can allow the attacker to exploit
    valid clients through scripts. Hijacking attempts often fit in this category as
    well.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨站脚本（XSS）攻击：XSS攻击涉及操纵客户端或Web和/或应用程序层，将有效会话的流量或注意力转向敌对位置，这可以使攻击者通过脚本利用有效客户端。劫持尝试通常也属于这一类别。
- en: '**Injections and overflows**: Various attacks find places throughout the 3-tier
    design to force applications to work outside tested boundaries by injecting code
    that maybe allowed by the underlying modules but should be prohibited by the application''s
    implementation. Most of these injections (SQL, HTML, XML, and so on) can force
    the application to divulge information that should not be allowed, or they can
    help the attacker find administrative privileges to initiate a straightforward
    dump by themselves.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注入和溢出：各种攻击在3层设计中的各个位置找到机会，强迫应用程序在测试范围之外工作，通过注入代码，这可能是底层模块允许的，但应用程序的实施应该禁止。大多数这些注入（SQL、HTML、XML等）可以迫使应用程序泄露不应该允许的信息，或者它们可以帮助攻击者找到管理特权，以便自己发起简单的转储。
- en: '**Man-in-the-Middle (MITM) attacks**: Session hijacking is a means by which
    the hacker or tester intercepts a session without the knowledge of either side.
    After doing so, the hacker has the ability to manipulate or *fuzz*Â requests and
    responses to manipulate one or both sides and uncover more data than what the
    legitimate user was actually after or entitled to have.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中间人（MITM）攻击：会话劫持是黑客或测试人员在不被任何一方知晓的情况下拦截会话的一种方式。在这样做之后，黑客有能力操纵或*模糊*请求和响应，以操纵一方或双方，并揭示比合法用户实际寻求或有权获得的更多数据。
- en: '**Application tier attacks**: Some applications are not configured to validate
    inputs properly, be it in validating how operations are entered or how file access
    is granted. It is also common to see applications fall short in enforcing true
    role-based controls; and privilege escalation attacks often occur, giving hackers
    the run of the house.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序层攻击：一些应用程序未配置正确验证输入，无论是在验证操作输入方式还是在授予文件访问权限方面。通常也会看到应用程序在强制执行真正基于角色的控制方面存在不足；特权升级攻击经常发生，使黑客可以为所欲为。
- en: Web application defenses
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Web应用程序防御
- en: '* * *'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: If we step back and think about what customers are up against, it is truly staggering.Â 
    Building a secure web application and network are akin to building a nuclear reactor
    plant. No detail is small and insignificant, so one tiny failure (a crack, weak
    weld, or a small contamination), despite all of the good inherent in the design
    and implementation, can mean failure. A similar truth impacts web application
    security â�� just one flaw, be it a misconfiguration or omission in the myriad
    of components, can provide attackers with enough of a gap through which immense
    damage can be inflicted. Add to this the extra problem that these same proactive
    defensive measures are relied upon in many environments to help detect these rare
    events (sometimes calledÂ black swan events). Network and application administrators
    have a tough job, and our purpose is to help them and their organization do it
    a job better.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们退一步思考客户所面临的问题，真的是令人震惊。构建安全的Web应用程序和网络就像建造核反应堆一样。没有细节是微不足道的，所以即使设计和实施中存在很多优点，一个微小的失败（裂缝、弱焊接或微小的污染）也可能意味着失败。同样的真相也影响着Web应用程序安全
    - 只有一个缺陷，无论是在众多组件中的配置错误或遗漏，都足以为攻击者提供足够的空隙，通过这个空隙可以造成巨大的破坏。再加上这个额外的问题，这些积极的防御措施在许多环境中被依赖于帮助检测这些罕见事件（有时被称为黑天鹅事件）。网络和应用程序管理员的工作很艰巨，我们的目的是帮助他们和他们的组织更好地完成这项工作。
- en: Web application frameworks and platforms contain provisions to help secure them
    against nefarious actors, but they are rarely deployed alone in a production system.
    Our customers will often deploy cyber defense systems that can also enhance their
    applications' protection, awareness, and resilience against the attack. In most
    cases, customers will associate more elements with a greater defense in depthÂ and
    assume higher levels of protection. As with the measures that their application
    platform provides, these additional systems are only as good as the processes
    and people responsible for installing, configuring, monitoring, and integrating
    these systems holistically into the architecture. Lastly, given the special place
    in an enterprise that these applications have, there is a good chance that the
    customer's various stakeholders have the wrong solutions in place to protect against
    the form of attacks that we will be testing against. We must endeavor to both
    assess the target and educate the customer.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序框架和平台包含条款来帮助确保它们免受恶意行为者的侵害，但它们很少单独部署在生产系统中。我们的客户通常会部署网络防御系统，这些系统还可以增强其应用程序的保护、意识和抵抗攻击的能力。在大多数情况下，客户将与更多的元素关联起来，以提供更深层次的防御，并假设更高水平的保护。与其应用平台提供的措施一样，这些额外的系统只有在负责安装、配置、监视和将这些系统整体地整合到架构中的流程和人员负责时才能发挥作用。最后，鉴于这些应用在企业中的特殊地位，客户的各种利益相关者很可能已经采取了错误的解决方案来防范我们将要测试的攻击形式。我们必须努力评估目标并教育客户。
- en: Standard defensive elements
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标准防御元素
- en: 'So, what elements of the system fit in here? The following figure shows the
    most common elements involved in a web application''s path, relative to a 3-tier
    design:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，系统的哪些元素适合在这里？以下图显示了与3层设计相关的Web应用程序路径中涉及的最常见元素：
- en: '![](img/B03918_01_07.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_01_07.png)'
- en: Â Most serious web applications will include defenses to stymie our efforts,
    but all security elements are only as good as their latest patch, configuration,
    and the operators monitoring them.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数严肃的Web应用程序将包括防御措施来阻止我们的努力，但所有安全元素的有效性都取决于它们的最新补丁、配置和监视操作员。
- en: 'The key external elements in a typical web application''s defense are:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 典型Web应用程序防御的关键外部元素包括：
- en: '**Firewall (FW):** The first element focused on security is usually a perimeter
    or theÂ **internet Edge** firewall that is responsible for enforcing a wide variety
    of access controls and policies to reduce the overall attack surface of the enterprise,
    web applications included. Recent advances in the firewall market have seen the
    firewall become a **Next Generation Firewall** (**NGFW**) where these policies
    are no longer defined by strict source and destination port and IP Address pairs,
    but in contextual fashion, incorporating more human-readable elements such as
    the users or groups in the conversation, the geographic location, reputation,
    or category of the external participant, and the application or purpose of the
    conversation.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防火墙（FW）：安全方面的第一个重点元素通常是边界或互联网边缘防火墙，负责执行各种访问控制和策略，以减少企业的整体攻击面，包括Web应用程序。防火墙市场的最新进展已经看到防火墙成为**下一代防火墙**（**NGFW**），其中这些策略不再由严格的源和目的端口和IP地址对定义，而是以上下文方式，包括对话中的用户或组，地理位置，声誉或外部参与者的类别，以及对话的应用或目的。
- en: '**Load balancer**: Many scaled designs rely on load balancers to provide the
    seamless assignment of workloads to a bank of web servers. While this is done
    to enable an application to reach more users, this function often corresponds
    with some proxy-like functions that can obscure the actual web tier resources
    from the prying eyes of the hacker. Some load balancer solutions also include
    security-focused services in addition to their virtual IP or reverse proxy functions.Â 
    Functionally, they may include the web application firewall functions.Â  Load
    balancers can also be important in helping to provideÂ **Distributed Denial of
    Service** (**DDoS**) protection spreading, diverting, or absorbing malicious traffic
    loads.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载均衡器**：许多规模化设计依赖于负载均衡器来将工作负载无缝分配给一组Web服务器。虽然这样做是为了使应用程序能够接触更多用户，但这个功能通常与一些类似代理的功能相对应，可以隐藏实际的Web层资源，使黑客无法窥视。一些负载均衡器解决方案还包括面向安全的服务，除了它们的虚拟IP或反向代理功能。在功能上，它们可能包括Web应用程序防火墙功能。负载均衡器在帮助提供分散式拒绝服务（DDoS）保护方面也很重要，可以分散、转移或吸收恶意流量负载。'
- en: '**Web Application Firewall (WAF):** WAFs provide application-layer inspection
    and prevention of attacks to ensure that many of the exploits that we will attempt
    in this book are either impossible or difficult to carry out. These firewalls
    differ from the network firewall at the perimeter in that they are only inspecting
    the HTTP/HTTPS flows for attacks. WAFs tend to be very signature-dependent and
    must be combined with other defense solutions to provide coverage of other vectors.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web应用程序防火墙（WAF）**：WAF提供应用层检查和防止攻击，以确保我们在本书中将尝试的许多利用要么不可能要么难以执行。这些防火墙与边界的网络防火墙不同，因为它们只检查HTTP/HTTPS流量以防范攻击。WAF往往非常依赖签名，并必须与其他防御解决方案结合使用，以提供其他向量的覆盖。'
- en: Additional layers
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 额外的层
- en: 'Not shown in the precedingÂ diagramÂ are additional defensive measures that
    may run as features on the firewalls or independently at one or more stages of
    the environment. Various vendors market these solutions in a wide variety of market
    categories and capability sets. While the branding may vary, they fall into a
    couple of major categories:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述图表中未显示的是可能作为防御措施的其他措施，这些措施可以作为防火墙的功能或独立地在环境的一个或多个阶段运行。各种供应商在各种市场类别和能力集中推广这些解决方案。尽管品牌可能有所不同，但它们可以分为几个主要类别：
- en: '**Intrusion Detection/Prevention Systems (IDS/IPS)**: These key elements provide
    deep packet inspection capabilities to enterprises to detect both atomic and pattern-based
    (anomaly) threats. In a classic implementation, these offer little value to web
    applications given that they lack the insight into the various manipulations of
    the seemingly valid payloads that hackers will use to initiate common web application
    attacks. **Next-Generation IPS** (**NGIPS**) may offer more protection from certain
    threats, in that they not only process classic IDS/IPS algorithms, but combine
    context and rolling baselines to identify abnormal transactions or interactions.
    These tools may also be integrated within the network firewall or between tiers
    of the environment. Newer NGIPS technologies may have the ability to detect common
    web vulnerabilities, and these tools have shown tremendous value in protecting
    target systems that use unpatched or otherwise misconfigured software modules.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**入侵检测/防范系统（IDS/IPS）**：这些关键元素为企业提供深度数据包检查功能，以检测原子和基于模式的（异常）威胁。在经典实施中，这些对于Web应用程序几乎没有价值，因为它们缺乏对黑客用来发起常见Web应用程序攻击的看似有效有效负载的各种操纵的洞察。**下一代IPS**（**NGIPS**）可能会提供更多的保护，因为它们不仅处理经典的IDS/IPS算法，还结合上下文和滚动基线来识别异常交易或交互。这些工具也可以集成在网络防火墙或环境的各个层之间。更新的NGIPS技术可能具有检测常见Web漏洞的能力，这些工具在保护使用未打补丁或配置错误的软件模块的目标系统方面表现出了巨大的价值。'
- en: '**Network Behavioral Analysis (NBA)**: These tools leverage metadata from network
    elements to see trends and identify abnormal behavior. Information gleaned from
    Syslogs, and flow feeds (Neflow/IPFIX, sFlow, jFlow, NSEL, and so on) won''t provide
    the same deep packet information that an IPS can glean, but the trends and patterns
    gleaned from the many streams through a network can tip operators off to an illicit
    escalation of credentials. In web applications, more egregious privilege attacks
    maybe identified by NBA tools, along with file and directory scraping attacks.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络行为分析（NBA）**：这些工具利用网络元素的元数据来查看趋势并识别异常行为。从Syslogs和流量源（Neflow/IPFIX、sFlow、jFlow、NSEL等）获取的信息不会提供IPS可以获取的同样深入的数据包信息，但从网络中的许多流中获取的趋势和模式可以提示操作员存在非法提升凭证的行为。在Web应用程序中，更严重的特权攻击可能会被NBA工具识别出来，以及文件和目录抓取攻击。'
- en: 'All of the components mentioned can be implemented in a multitude of form factors:
    from various physical appliance types to virtual machines to cloud offerings.
    More sophisticated web applications will often employ multiple layers differentially
    to provide greater resilience against attacks, as well as to provide overarching
    functions for a geographically disperse arrangement of hosting sites. A company
    may have 10 locations, for example, that are globally load-balanced to serve customers.Â 
    In this situation, cloud-based load balancers, WAFs, and firewalls may provide
    the first tier of defense, while each data center may have additional layers serving
    not only local web application protection but also other critical services specific
    to that site.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 提到的所有组件都可以以多种形式实施：从各种物理设备类型到虚拟机到云服务。更复杂的Web应用程序通常会差异化地使用多个层，以提供更强大的抵御攻击的能力，以及为地理上分散的托管站点提供全面的功能。例如，一家公司可能有10个地点，全球负载平衡以为客户提供服务。在这种情况下，基于云的负载均衡器、WAF和防火墙可能提供第一层防御，而每个数据中心可能有额外的层，不仅提供本地Web应用程序保护，还提供特定于该站点的其他关键服务。
- en: Note
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The combinations are limitless, but keep in mind that, as the complexity of
    the security solutions deployed ratchets up, so does the likelihood that they
    are misconfigured. Our recon efforts and subsequent planning of our penetration
    tests will need to account for these variables.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 组合是无限的，但请记住，随着部署的安全解决方案复杂性的提高，它们被配置错误的可能性也会增加。我们的侦察工作和随后的渗透测试计划需要考虑这些变量。
- en: Summary
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: '* * *'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Since this is a book on *mastering* Kali Linux for the purposes of conducting
    web application penetration tests, it may have come as a surprise that we started
    with foundational topics such as the architecture, security elements, and so on.
    It is my hope that covering these topics will help set us apart from the script-kiddies
    that often engage in pen testing but offer minimal value. Anyone can fire up Kali
    Linux or some other distribution and begin hacking away, but without this foundation,
    our tests run the risk of being incomplete or inaccurate. Our gainful employment
    is dependent on actually helping the customer push their network to their (agreed
    upon) limits and helping them see their weaknesses.Â  Likewise, we should also
    be showing them what they are doing right. John Strand, owner and analyst at Black
    Hills Information Security, is fond of saying that
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一本关于*精通*Kali Linux以进行Web应用程序渗透测试的书，也许会让人惊讶，我们从架构、安全元素等基础主题开始。我希望涵盖这些主题将帮助我们区别于通常进行渗透测试但提供最小价值的脚本小子。任何人都可以启动Kali
    Linux或其他发行版并开始黑客攻击，但没有这个基础，我们的测试可能会不完整或不准确。我们的有利就业取决于实际帮助客户推动他们的网络达到（商定的）极限，并帮助他们发现他们的弱点。同样，我们还应该向他们展示他们做得对。黑山信息安全公司的所有者和分析师约翰·斯特兰德喜欢说
- en: we should strive to get caught after being awesome
  id: totrans-118
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们应该努力在表现出色后被抓住
- en: .Â
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: .Â
- en: While the knowledge of the tools and underlying protocols is often what sets
    a serious hacker apart from a newbie, it is also the knowledge of their quarry
    and the depth of the service they provide. If we are merely running scripts for
    the customer and reporting glaring issues, we are missing the point of being a
    hired penetration tester. Yes, critical flaws need to be addressed, but so do
    the seemingly smaller ones. Â It takes an expert to detect a latent defect that
    isn't impacting the performance now but will result in a major catastrophe some
    time later. Â This not only holds true for power plants, but for our web applications.
    We need to not just show them what they can see on their own, but take it further
    to help them insulate against tomorrow's attacks.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然工具和基础协议的知识通常是严肃黑客与新手之间的区别，但也是对他们的目标和所提供服务的深度的了解。如果我们只是为客户运行脚本并报告明显的问题，那么我们就错过了成为雇佣渗透测试人员的要点。是的，关键缺陷需要解决，但看似较小的问题也需要解决。专家才能发现潜在的缺陷，即使现在不影响性能，但将在以后导致重大灾难。这不仅适用于发电厂，也适用于我们的Web应用程序。我们需要不仅向他们展示他们自己可以看到的东西，还要进一步帮助他们防范明天的攻击。
- en: In this chapter, we discussed some architectural concepts that may help us gain
    better insight into our targets.Â  We also discussed the various security measures
    our customers can put into place that we will need to be aware of, both to plan
    our attacks and to test for efficacy.Â  Our discussion also covered the importance
    of testing throughout the lifecycle of the application. Doing this saves both
    time and money, and can certainly save the reputation and minimize risk once the
    application is in production. These considerations should merit having penetration
    testers as a vital and permanent member of any development team.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了一些架构概念，这些概念可能帮助我们更好地了解我们的目标。我们还讨论了客户可以采取的各种安全措施，我们需要意识到这些措施，既要规划我们的攻击，也要测试其有效性。我们的讨论还涵盖了在应用程序的整个生命周期中进行测试的重要性。这样做既节省时间和金钱，也可以在应用程序投入生产后保护声誉并最小化风险。这些考虑应该使渗透测试人员成为任何开发团队的重要和永久成员。
- en: In our next chapter, we will talk briefly about how to prepare a fully featured
    sandbox environment that can help us practice the test concepts. We'll also discuss
    the leading test frameworks that can help us provide comprehensive test coverage.
    Lastly, we'll discuss contracts and the ethical and legal aspects of our job;
    staying out of jail is a key objective.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一章中，我们将简要讨论如何准备一个功能齐全的沙盒环境，可以帮助我们练习测试概念。我们还将讨论可以帮助我们提供全面测试覆盖的主要测试框架。最后，我们将讨论合同以及我们工作的道德和法律方面；避免入狱是一个关键目标。
