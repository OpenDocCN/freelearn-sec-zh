- en: Using Automated Scanners
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自动化扫描器
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容包括：
- en: Scanning with Nikto
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Nikto进行扫描
- en: Considerations when doing automated scanning
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化扫描时的注意事项
- en: Finding vulnerabilities with Wapiti
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Wapiti查找漏洞
- en: Using OWASP ZAP to scan for vulnerabilities
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用OWASP ZAP扫描漏洞
- en: Scanning with Skipfish
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Skipfish进行扫描
- en: Finding vulnerabilities in WordPress with WPScan
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用WPScan查找WordPress漏洞
- en: Finding vulnerabilities in Joomla with JoomScan
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JoomScan查找Joomla漏洞
- en: Scanning Drupal with CMSmap
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CMSmap扫描Drupal
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Almost every penetration testing project must follow a strict schedule, mostly
    determined by clients' requirements or development delivery dates. It is very
    useful for a penetration tester to have a tool that can perform plenty of tests
    on an application in a short period of time in order to identify the biggest possible
    number of vulnerabilities in the scheduled time. Automated vulnerability scanners
    are the tools to pick for this task. They can also be used to find exploitation
    alternatives or to be sure that one doesn't leave something obvious behind in
    a penetration test.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎每个渗透测试项目都必须遵循严格的时间表，这通常由客户的要求或开发交付日期决定。对渗透测试人员来说，拥有一个能够在短时间内对应用程序执行大量测试的工具非常有用，以便在规定的时间内识别尽可能多的漏洞。自动化漏洞扫描器是完成这一任务的理想工具。它们还可以用于寻找攻击替代方案，或者确保在渗透测试中没有留下明显的漏洞。
- en: Kali Linux includes several vulnerability scanners aimed at web applications
    or specific web application vulnerabilities. In this chapter, we will cover some
    of the most widely used by penetration testers and security professionals.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Kali Linux包含了多个针对Web应用程序或特定Web应用程序漏洞的漏洞扫描器。在本章中，我们将介绍一些渗透测试人员和安全专业人员最常用的工具。
- en: Scanning with Nikto
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Nikto进行扫描
- en: 'A must-have tool in every tester''s arsenal is Nikto; it is perhaps the most
    widely used free scanner in the world. As stated on its official website ([https://cirt.net/Nikto2](https://cirt.net/Nikto2)):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 每个测试人员工具箱中必备的工具是Nikto；它可能是世界上最广泛使用的免费扫描器。正如其官方网站上所述([https://cirt.net/Nikto2](https://cirt.net/Nikto2))：
- en: '"Nikto is an Open Source (GPL) web server scanner which performs comprehensive
    tests against web servers for multiple items, including over 6700 potentially
    dangerous files/programs, checks for outdated versions of over 1250 servers, and
    version specific problems on over 270 servers. It also checks for server configuration
    items such as the presence of multiple index files, HTTP server options, and will
    attempt to identify installed web servers and software. Scan items and plugins
    are frequently updated and can be automatically updated."'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: “Nikto是一个开源（GPL）Web服务器扫描器，对Web服务器执行全面的测试，涵盖多项内容，包括6700多个潜在危险的文件/程序，检查超过1250个服务器的过时版本，以及超过270个服务器的版本特定问题。它还检查服务器配置项，例如多个索引文件的存在、HTTP服务器选项，并尝试识别已安装的Web服务器和软件。扫描项和插件会定期更新，并且可以自动更新。”
- en: In this recipe, we will use Nikto to search for vulnerabilities in a web application
    and analyze the results.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用Nikto来搜索Web应用程序中的漏洞并分析结果。
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作方法...
- en: 'Nikto is a command-line utility included by default in Kali Linux; open a Terminal
    to start scanning the server:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Nikto是Kali Linux中默认包含的命令行工具；打开终端开始扫描服务器：
- en: 'We will scan the Peruggia vulnerable application and export the results to
    an HTML report with the `nikto -h http://192.168.56.11/peruggia/ -o result.html` command.
    The output will look like this:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将扫描Peruggia漏洞应用程序，并使用`nikto -h http://192.168.56.11/peruggia/ -o result.html`命令将结果导出为HTML报告。输出将如下所示：
- en: '![](assets/5aa90586-9850-45b7-9f08-8889a9332847.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5aa90586-9850-45b7-9f08-8889a9332847.png)'
- en: The `-h` option tells Nikto which host to scan, the `-o` option tells it where
    to store the output, and the extension of the file determines the format it will
    take. In this case, we have used `.html` to obtain an HTML-formatted report of
    the results. The output could also be in the CSV, TXT, and XML formats.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`-h`选项告诉Nikto扫描哪个主机，`-o`选项告诉它输出结果保存的位置，文件扩展名决定了文件的格式。在本例中，我们使用了`.html`来获得HTML格式的报告。输出也可以是CSV、TXT或XML格式。'
- en: 'It will take some time to finish the scan. When it finishes, we can open the
    `result.html` file:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扫描完成需要一些时间。当扫描完成后，我们可以打开`result.html`文件：
- en: '![](assets/18708ca6-3eb6-4c39-9b98-11b4ff38ea23.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/18708ca6-3eb6-4c39-9b98-11b4ff38ea23.png)'
- en: How it works...
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In this recipe, we have used Nikto to scan an application and generate an HTML
    report. There are some more options in this tool for performing specific scans
    or generating specific output formats. Some of the most useful are:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们使用Nikto扫描了一个应用程序并生成了HTML报告。该工具还提供了其他选项来执行特定扫描或生成特定的输出格式。以下是一些最有用的选项：
- en: '`-H`: This shows Nikto''s help.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-H`：显示Nikto的帮助信息。'
- en: '`-config <file>`: To use a custom configuration file in the scan.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-config <file>`：在扫描中使用自定义配置文件。'
- en: '`-update`: This updates plugin databases.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-update`：更新插件数据库。'
- en: '`-Format <format>`: This defines the output format; it may be CSV, HTM, NBE
    (Nessus), SQL, TXT, or XML. Formats such as CSV, XML, and NBE are very useful when
    we want to use Nikto''s results as an input for other tools.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-Format <format>`：定义输出格式；可以是CSV、HTM、NBE（Nessus）、SQL、TXT或XML等格式。当我们想将Nikto的结果作为其他工具的输入时，CSV、XML和NBE等格式非常有用。'
- en: '`-evasion <technique>`: This uses some encoding techniques to help avoid detection
    by web application firewalls and intrusion detection systems.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-evasion <technique>`：使用一些编码技术帮助避免被Web应用防火墙和入侵检测系统检测到。'
- en: '`-list-plugins`: To view the available testing plugins.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-list-plugins`：查看可用的测试插件。'
- en: '`-Plugins <plugins>`: Select what plugins to use in the scan (default: all).'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-Plugins <plugins>`：选择在扫描中使用哪些插件（默认：全部）。'
- en: '`-port <port number>`: If the server uses a non-standard port (`80`, `443`),
    we may want to use Nikto with this option.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-port <port number>`：如果服务器使用非标准端口（`80`、`443`），我们可能需要使用Nikto并选择此选项。'
- en: Considerations when doing automated scanning
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化扫描时的注意事项
- en: Normal vulnerability scanners such as OpenVas and Nessus usually work by scanning
    open ports on target machines, and identifying the services running on those ports
    and their versions without sending malicious payloads that could cause a disruption
    in the server. Web vulnerability scanners, on the contrary, submit data into web
    forms and parameters and, even when these scanners are thoroughly tested and their
    payloads are intended to be secure, such data can compromise the application's
    stability and information integrity. For this reason, we need to take special
    care when using these tools as part of a penetration testing project.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 普通漏洞扫描器如OpenVas和Nessus通常通过扫描目标机器的开放端口，识别这些端口上运行的服务及其版本，且不会发送可能导致服务器中断的恶意负载。相反，Web漏洞扫描器通过提交数据到Web表单和参数中，尽管这些扫描器经过彻底测试且它们的负载旨在确保安全，但此类数据仍然可能会危及应用程序的稳定性和信息完整性。因此，在渗透测试项目中使用这些工具时，我们需要特别小心。
- en: In this recipe, we will discuss a series of aspects to take into account before
    launching an automated test against a target application in an enterprise setup.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将讨论在企业环境中对目标应用程序进行自动化测试之前需要考虑的一系列方面。
- en: How to do it...
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'When preparing an automated scan for web applications, here are some key considerations:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在为Web应用程序准备自动化扫描时，以下是一些关键的考虑事项：
- en: Always prefer a testing environment over a productive one, so if anything goes
    wrong real data won't be lost or corrupted.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 始终优先选择测试环境而非生产环境，这样如果发生任何问题，真实数据不会丢失或损坏。
- en: Ensure there is a recovery mechanism. The application's owners should take preemptive
    measures so data and code can be recovered in the case of an undesirable outcome.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保有一个恢复机制。应用程序的所有者应该采取预防措施，以便在出现不良结果时能够恢复数据和代码。
- en: Define the scope of scanning. Although we can just launch a scanner against
    a whole site, it is recommended first to define the tool's configuration so sensitive
    or unstable parts of the application are left out of the scan, and only the modules
    specific to the server's architecture and application's development platform are
    scanned.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义扫描范围。虽然我们可以直接对整个网站进行扫描，但建议首先定义工具的配置，避免扫描应用程序的敏感或不稳定部分，仅扫描与服务器架构和应用程序开发平台相关的模块。
- en: Know your tools. Always take time to test the tools in a laboratory so you understand
    what they do and how can they affect the normal operation of an application.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 了解你的工具。始终抽时间在实验室中测试工具，了解它们的功能以及它们可能对应用程序正常运行产生的影响。
- en: Keep tools and their modules updated so the results are consistent with the
    latest vulnerability disclosures and attack techniques.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持工具及其模块的更新，以便结果与最新的漏洞披露和攻击技术保持一致。
- en: Check the scanner's parameters and scope before launching the scan to ensure
    no out-of-scope tests are performed.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在启动扫描之前，检查扫描器的参数和范围，以确保不会执行超出范围的测试。
- en: Keep comprehensive logs of the scanning process. Most tools have an option to
    save logs of their activity and issue a report of the findings; always use these
    features and store the logs in a secure way.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持扫描过程的全面日志。大多数工具都有保存其活动日志并发布发现报告的选项；始终使用这些功能，并以安全的方式存储日志。
- en: Do not leave the scanner unattended.  It is not necessary to keep staring at
    the screen while the scanner runs, but we need to be aware and constantly check
    how it is doing to be ready to stop it at the first sign of it causing trouble
    on the server or the network.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要让扫描器无人看管。虽然在扫描过程中不必一直盯着屏幕，但我们需要保持警觉，并定期检查扫描进度，随时准备在发现扫描可能导致服务器或网络问题时立即停止。
- en: Do not rely on one single tool. We all have our favorite tools, but we need
    to keep in mind that there is no one tool that can cover all of the possible alternatives
    involved in a penetration test, so use alternative tools to minimize the rates
    of false positives and false negatives.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要依赖单一工具。我们都有自己喜爱的工具，但需要记住，没有任何一款工具能够覆盖渗透测试中涉及的所有可能的替代方案，因此使用替代工具可以最大程度地减少误报和漏报的发生率。
- en: How it works...
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we showed some key aspects to take into account in order to
    avoid damage to the information and disruption to services when executing automated
    scanning against our target application.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们展示了一些关键方面，帮助避免在对目标应用执行自动化扫描时造成信息损害和服务中断。
- en: The main reason for requiring special measures is that web application vulnerability
    scanners, in their default configurations, tend to crawl the entire site and use
    the URLs and parameters obtained from this crawling to send further payloads and
    probes. In applications that don't properly filter the data they receive, these
    probes can end up stored in the database or executed by the server, and this could
    cause integrity problems, permanently alter or damage existing information, or
    disrupt services.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 需要特殊措施的主要原因是，网络应用漏洞扫描器在默认配置下，倾向于爬取整个网站，并使用从爬取中获得的URL和参数继续发送负载和探针。在那些没有正确过滤接收数据的应用中，这些探针可能被存储在数据库中或被服务器执行，这可能会导致数据完整性问题、永久改变或损坏现有信息，甚至中断服务。
- en: To prevent this damage, we recommended a series of actions focused on preparing
    the testing environment, knowing what the tools are doing and keeping them updated,
    carefully selecting what is to be scanned, and keeping extensive record of all
    actions.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止这些损害，我们推荐了一系列集中在准备测试环境、了解工具的工作原理、保持工具更新、仔细选择扫描对象并记录所有操作的措施。
- en: Finding vulnerabilities with Wapiti
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Wapiti发现漏洞
- en: 'Wapiti is another terminal-based web vulnerability scanner, which sends `GET`
    and `POST` requests to target sites looking for the following vulnerabilities
    ([http://wapiti.sourceforge.net/](http://wapiti.sourceforge.net/)):'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Wapiti是另一种基于终端的网络漏洞扫描工具，它向目标网站发送`GET`和`POST`请求，寻找以下漏洞（[http://wapiti.sourceforge.net/](http://wapiti.sourceforge.net/)）：
- en: File disclosure
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件泄露
- en: Database injection
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库注入
- en: '**Cross-Site Scripting** (**XSS**)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨站脚本攻击** (**XSS**)'
- en: Command execution detection
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令执行检测
- en: CRLF injection
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CRLF注入
- en: '**XML External Entity** (**XXE**) injection'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XML外部实体** (**XXE**) 注入'
- en: Use of known, potentially dangerous files
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用已知的潜在危险文件
- en: Weak `.htaccess` configurations that can be bypassed
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弱`.htaccess`配置，可能被绕过
- en: Presence of backup files that give sensitive information (source code disclosure)
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在泄露敏感信息的备份文件（源代码泄露）
- en: In this recipe, we will use Wapiti to discover vulnerabilities in one of our
    test applications and generate a report of the scan.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用Wapiti发现我们的测试应用中的漏洞，并生成扫描报告。
- en: How to do it...
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Wapiti is a command-line tool; open a Terminal in Kali Linux and be sure you
    are running the vulnerable VM before starting:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Wapiti是一个命令行工具；在Kali Linux中打开终端，并确保在开始之前运行易受攻击的虚拟机：
- en: In the Terminal, execute `wapiti http://192.168.56.11/peruggia/ -o wapiti_result
    -f html -m "-blindsql"` to scan the Peruggia application in our vulnerable VM,
    save the output in HTML format inside the `wapiti_result` directory, and skip
    the blind SQL injection tests.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中，执行`wapiti http://192.168.56.11/peruggia/ -o wapiti_result -f html -m "-blindsql"`来扫描我们易受攻击的虚拟机中的Peruggia应用，输出以HTML格式保存在`wapiti_result`目录中，并跳过盲注SQL测试。
- en: 'Wait for the scan to finish and open the report''s directory and then the `index.html`
    file; then, you will see something like this:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待扫描完成并打开报告所在目录，然后打开`index.html`文件；接着，你会看到类似这样的内容：
- en: '![](assets/f58a5239-ae5e-4a78-92c6-2e9c71d91f33.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f58a5239-ae5e-4a78-92c6-2e9c71d91f33.png)'
- en: Here, we can see that Wapiti has found 12 XSS and five file-handling vulnerabilities.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到 Wapiti 已经发现了 12 个 XSS 漏洞和五个文件处理漏洞。
- en: Now, click on Cross Site Scripting to see the details of the findings.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击 Cross Site Scripting 查看漏洞的详细信息。
- en: 'Select a vulnerability and click on HTTP Request. We will take the second one
    and select and copy the URL part of the request:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个漏洞并点击 HTTP 请求。我们将选择第二个，并选择并复制请求的 URL 部分：
- en: '![](assets/052ee805-b841-4a60-9276-5bb78dcd1f0b.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/052ee805-b841-4a60-9276-5bb78dcd1f0b.png)'
- en: 'Now, we paste that URL in the browser and add the server portion (`http://192.168.56.11/peruggia/index.php?action=comment&pic_id=%3E%3C%2F%3E%3Cscript%3Ealert%28%27wp6dpkajm%27%29%3C/script%3E`);
    the result should be as shown:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将那个 URL 粘贴到浏览器中，并添加服务器部分（`http://192.168.56.11/peruggia/index.php?action=comment&pic_id=%3E%3C%2F%3E%3Cscript%3Ealert%28%27wp6dpkajm%27%29%3C/script%3E`）；结果应如下所示：
- en: '![](assets/2d6f36c8-8987-4125-a598-0bccd3e11a7d.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2d6f36c8-8987-4125-a598-0bccd3e11a7d.png)'
- en: And we do indeed have an XSS vulnerability.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 结果我们确实发现了一个 XSS 漏洞。
- en: How it works...
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它的工作原理...
- en: We skipped the blind SQL injection test in this recipe (`-m "-blindsql"`), as
    we already know this application is vulnerable. When it reaches the point of calculating
    a time-based injection, it provokes a timeout error that makes Wapiti close before
    the scan is finished, because Wapiti tests multiple times by injecting the `sleep()`
    command until the server passes the timeout threshold.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们跳过了这次配方中的盲 SQL 注入测试（`-m "-blindsql"`），因为我们已经知道这个应用存在漏洞。当它达到计算基于时间的注入时，触发了一个超时错误，使得
    Wapiti 在扫描完成前就关闭了，因为 Wapiti 会多次通过注入 `sleep()` 命令来测试，直到服务器超过超时阈值。
- en: Also, we have selected the HTML format for output (`-f html`) and `wapiti_result`
    as our report's destination directory; we can also have other formats, such as
    JSON, OpenVas, TXT, or XML.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们选择了 HTML 格式的输出（`-f html`），并将 `wapiti_result` 作为报告的目标目录；我们也可以选择其他格式，如 JSON、OpenVas、TXT
    或 XML。
- en: 'Other interesting options in Wapiti are:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Wapiti 中的其他有趣选项包括：
- en: '`-x <URL>`: Exclude the specified URL from the scan; particularly useful for
    logout and password change URLs.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-x <URL>`：从扫描中排除指定的 URL；对于登出和密码更改 URL 特别有用。'
- en: '`-i <file>`: Resumes a previously saved scan from an XML file. The filename
    is optional, as Wapiti takes the file from its `scans` folder if omitted.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-i <file>`：从 XML 文件恢复之前保存的扫描。文件名是可选的，如果省略，Wapiti 会从 `scans` 文件夹中获取文件。'
- en: '`-a <login%password>`: Uses specified credentials to authenticate to the application.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-a <login%password>`：使用指定的凭证对应用进行身份验证。'
- en: '`--auth-method <method>`: Defines the authentication method for the `-a` option;
    it can be `basic`, `digest`, `kerberos`, or `ntlm`.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--auth-method <method>`：定义 `-a` 选项的认证方式；可以是 `basic`、`digest`、`kerberos` 或
    `ntlm`。'
- en: '`-s <URL>`: Defines a URL to start the scan with.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-s <URL>`：定义扫描开始的 URL。'
- en: '`-p <proxy_url>`: Uses an HTTP or HTTPS proxy.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-p <proxy_url>`：使用 HTTP 或 HTTPS 代理。'
- en: Using OWASP ZAP to scan for vulnerabilities
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 OWASP ZAP 扫描漏洞
- en: OWASP ZAP is a tool that we have already used ing this book for various tasks,
    and among its many features, it includes an automated vulnerability scanner. Its
    use and report generation will be covered in this recipe.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP ZAP 是我们在本书中已使用过的工具，用于执行各种任务，在它的众多功能中，包括了一个自动化漏洞扫描器。它的使用和报告生成将在本配方中详细讲解。
- en: Getting ready
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Before we perform a successful vulnerability scan in OWASP ZAP, we need to
    crawl the site:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们成功执行 OWASP ZAP 漏洞扫描之前，我们需要先爬取该网站：
- en: Open OWASP ZAP and configure the web browser to use it as a proxy
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 OWASP ZAP 并配置 Web 浏览器以使用其作为代理
- en: Navigate to `http://192.168.56.11/peruggia/`
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至 `http://192.168.56.11/peruggia/`
- en: Follow the instructions from *Using ZAP's spider* in [Chapter 3](d4ea55af-3a7c-4ee5-8e5d-65720f268ee2.xhtml), *Using
    Proxies, Crawlers, and Spiders*
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照 *使用 ZAP 的蜘蛛程序* 中的说明操作，见 [第 3 章](d4ea55af-3a7c-4ee5-8e5d-65720f268ee2.xhtml)，*使用代理、爬虫和蜘蛛程序*
- en: How to do it...
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Once you have browsed through the application or run ZAP''s spider against
    it, let''s start the scan:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你浏览完应用或运行了 ZAP 的蜘蛛程序，就可以开始扫描了：
- en: Go to OWASP ZAP's Sites panel and right-click on the `peruggia` folder.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 OWASP ZAP 的 Sites 面板，右键单击 `peruggia` 文件夹。
- en: 'From the menu, navigate to Attack | Active Scan, as shown in the following
    screenshot:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中，导航到 Attack | Active Scan，如下图所示：
- en: '![](assets/ba98aff9-7f74-4ce7-baa6-61fe2904e1be.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ba98aff9-7f74-4ce7-baa6-61fe2904e1be.png)'
- en: 'A new window will pop up. At this point, we know what technologies our application
    and server use; so, go to the Technology tab and check only MySQL, PHP, Linux,
    and Apache:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个新的窗口将弹出。此时，我们已经知道应用程序和服务器使用的技术，因此，进入“技术”标签（Technology），仅勾选 MySQL、PHP、Linux
    和 Apache：
- en: '![](assets/3436d70c-3df6-40ff-a891-d374b6a25b30.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3436d70c-3df6-40ff-a891-d374b6a25b30.png)'
- en: Here, we can configure our scan in terms of Scope (where to start the scan,
    on what context, and so on), Input Vectors (select if you want to test values
    in `GET` and `POST` requests, headers, cookies, and other options), Custom Vectors
    (add specific characters or words from the original request as attack vectors),
    Technology (what technology-specific tests to perform), and Policy (select configuration
    parameters for specific tests).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以根据范围（Scope）（从哪里开始扫描，在哪些上下文中进行扫描等）、输入向量（Input Vectors）（选择是否测试`GET`和`POST`请求、头部、Cookie
    和其他选项中的值）、自定义向量（Custom Vectors）（将原始请求中的特定字符或单词作为攻击向量）、技术（Technology）（执行特定技术测试）和策略（Policy）（为特定测试选择配置参数）来配置我们的扫描。
- en: Click on Start Scan.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“开始扫描”按钮（Start Scan）。
- en: The Active Scan tab will appear on the bottom panel and all the requests made
    during the scan will appear there.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “主动扫描”标签将在底部面板中显示，扫描期间所做的所有请求都会显示在此。
- en: 'When the scan is finished, we can check the results in the Alerts tab, as the
    following screenshot shows:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扫描完成后，我们可以在“警报”标签页中查看结果，以下截图显示了该过程：
- en: '![](assets/8e205c1b-5864-47a4-9549-36d8545175ae.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8e205c1b-5864-47a4-9549-36d8545175ae.png)'
- en: If we select an alert, we can see the request made and the response obtained
    from the server. This allows us to analyze the attack and define whether it is
    a true vulnerability or a false positive. We can also use this information to
    fuzz, repeat the request in the browser, or to dig deeper into exploitation.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们选择一个警报，可以看到请求和服务器返回的响应。这使我们能够分析攻击并确定它是否为真正的漏洞或误报。我们还可以利用这些信息进行模糊测试、在浏览器中重复请求，或进一步挖掘漏洞利用。
- en: To generate an HTML report, as with the previous tools, go to Report in the
    main menu and then select Generate HTML Report.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如同前面提到的工具一样，要生成 HTML 报告，请进入主菜单中的报告（Report），然后选择生成 HTML 报告（Generate HTML Report）。
- en: 'A new dialog will ask for the filename and location. Set, for example, `zapresult.html`
    and when finished, open the file:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个新的对话框将要求输入文件名和位置。例如，设置为`zapresult.html`，完成后打开该文件：
- en: '![](assets/556211da-8afc-4eb4-86b6-b4e1cae2bd6b.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/556211da-8afc-4eb4-86b6-b4e1cae2bd6b.png)'
- en: How it works...
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: OWASP ZAP has the ability to perform active and passive vulnerability scans;
    passive scans are unintrusive tests that OWASP ZAP makes while we browse, send
    data, and click links. Active tests involve the use of various attack strings
    against every form variable or request value in order to detect if the servers
    respond with what we can call a vulnerable behavior.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP ZAP 具备执行主动和被动漏洞扫描的能力；被动扫描是 OWASP ZAP 在我们浏览、发送数据和点击链接时进行的非侵入式测试。主动测试则是使用各种攻击字符串针对每个表单变量或请求值进行攻击，以检测服务器是否以我们可以称之为脆弱行为的方式作出响应。
- en: OWASP ZAP has test strings for a wide variety of technologies; it is useful
    first to identify the technologies that our target uses, in order to optimize
    our scan and diminish the probability of being detected or causing a drop in the
    service.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP ZAP 拥有适用于多种技术的测试字符串；首先识别目标所使用的技术非常有用，可以优化我们的扫描并减少被检测到或导致服务中断的可能性。
- en: Another interesting feature of this tool is that we can analyze the request
    that results in the detection of a vulnerability and its corresponding response
    in the same window, and at the moment it is detected. This allows us to determine
    rapidly whether it is a real vulnerability or a false positive and whether to
    develop our **proof of concept** (**PoC**) or start the exploitation.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工具的另一个有趣功能是，我们可以在同一个窗口中分析导致检测到漏洞的请求及其相应的响应，并且在检测到的瞬间就进行分析。这使我们能够快速判断它是否为真正的漏洞或误报，以及是否开发我们的**概念验证**（**PoC**）或开始漏洞利用。
- en: There's more...
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多…
- en: We've also used Burp Suite throughout this book. Kali Linux includes only the
    free version, which doesn't have the active and passive scanning features. It's
    absolutely recommended to acquire a professional license for Burp Suite, as it
    has useful features and improvements over the free version such as these.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中我们也使用了 Burp Suite。Kali Linux 仅包括免费版，免费版没有主动和被动扫描功能。强烈建议购买 Burp Suite 的专业版，因为它比免费版提供了更有用的功能和改进，比如这些功能。
- en: Passive vulnerability scanning happens in the background as we browse a web
    page with Burp Suite configured as our browser's proxy. Burp will analyze all
    requests and responses while looking for patterns corresponding to known vulnerabilities.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 被动漏洞扫描会在我们浏览网页时发生，Burp Suite 配置为浏览器的代理。Burp 将分析所有请求和响应，并寻找与已知漏洞对应的模式。
- en: In active scanning, Burp Suite will send specific requests to the server and
    check the responses to see if they correspond to some vulnerable pattern or not.
    These requests are specially crafted to trigger special behaviors when an application
    is vulnerable.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在主动扫描中，Burp Suite 会向服务器发送特定的请求，并检查响应是否与某些漏洞模式匹配。这些请求是特别设计的，用于在应用程序存在漏洞时触发特定行为。
- en: Scanning with Skipfish
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Skipfish 扫描
- en: 'Skipfish ([https://code.google.com/archive/p/skipfish/](https://code.google.com/archive/p/skipfish/))
    was created by Google and released to the public in 2010; it is described by its
    creators as an active web application security reconnaissance tool, is included
    by default in Kali Linux, and it does more than pure reconnaissance. It is a complete
    vulnerability scanner. Some of its highlights are:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Skipfish ([https://code.google.com/archive/p/skipfish/](https://code.google.com/archive/p/skipfish/))
    是由谷歌创建并于 2010 年公开发布的；其创建者将其描述为一种主动的 Web 应用安全侦察工具，默认包含在 Kali Linux 中，且它不仅仅是纯粹的侦察工具。它是一个完整的漏洞扫描器。它的一些亮点包括：
- en: 'High speed: It can reach more than 400 requests per second and claims to be
    able to reach more than 2000 in high speed LAN'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高速：它的请求速度可以达到每秒超过 400 次，并声称在高速局域网中可以达到超过 2000 次。
- en: Its command-line options are straightforward and easy to use
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它的命令行选项简单易用。
- en: It can detect a wide range of issues, from directory listing and other information
    disclosure vulnerabilities to different types of SQL and XML injection
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以检测各种问题，从目录列出和其他信息泄露漏洞，到不同类型的 SQL 和 XML 注入。
- en: In this recipe, we will look at a simple example of how to use Skipfish and
    check its results.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将看一个简单的例子，了解如何使用 Skipfish 并检查其结果。
- en: How to do it...
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Skipfish, as installed in Kali Linux, is ready to use. We will scan Peruggia
    with it:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kali Linux 中安装的 Skipfish 已经可以直接使用。我们将用它扫描 Peruggia：
- en: Open a Terminal and execute `skipfish -o skipfish_result -I peruggia http://192.168.56.11/peruggia/`.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并执行`skipfish -o skipfish_result -I peruggia http://192.168.56.11/peruggia/`。
- en: A message with some usage recommendations will appear; press *Enter* or wait
    60 seconds for the scan to start.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将出现一条包含一些使用建议的消息；按 *Enter* 键或等待 60 秒，扫描就会开始。
- en: 'The scan will start and scan statistics will show on the screen. *Ctrl* + *C*
    can be used to stop it at any time. The Terminal will look like the following
    while scanning:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扫描将开始，扫描统计信息会显示在屏幕上。*Ctrl* + *C* 可以随时停止扫描。扫描时，终端窗口会显示如下内容：
- en: '![](assets/0fca0750-51b9-4323-9198-78020dd95276.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0fca0750-51b9-4323-9198-78020dd95276.png)'
- en: When the scan finishes, open the report. In our case, it will be in `skipfish_result/index.html`,
    relative to the directory we ran Skipfish from.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扫描完成后，打开报告。在我们的例子中，报告将位于`skipfish_result/index.html`，相对于我们运行 Skipfish 的目录。
- en: 'In the Issue type overview - click to expand: section, we can click on the
    issues'' names and see the exact URL and payload of each occurrence, shown as
    follows:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“问题类型概览 - 点击展开：”部分中，我们可以点击问题名称，查看每个问题的确切 URL 和有效载荷，显示如下：
- en: '![](assets/48bcb71d-8e51-48bc-a3f2-9b89f2e2071c.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/48bcb71d-8e51-48bc-a3f2-9b89f2e2071c.png)'
- en: How it works...
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Skipfish will first build a site map by crawling it and optionally using a dictionary
    for directory and filenames. This map is then processed through multiple security
    checks.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Skipfish 将首先通过爬取网站并可选地使用字典进行目录和文件名扫描来构建站点地图。然后，站点地图会通过多个安全检查进行处理。
- en: In this example, we used it to scan Peruggia in our vulnerable VM. To prevent
    it scanning the whole server, we used the `-I peruggia` option, which scans only
    those URLs matching (containing) the specified text. We also used the `-o` option
    to tell Skipfish where to save the reports; this directory must not exist at the
    moment the scan is run.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用它扫描了我们的易受攻击虚拟机中的 Peruggia。为了防止它扫描整个服务器，我们使用了`-I peruggia`选项，该选项只扫描包含指定文本的
    URL。我们还使用了`-o`选项来告诉 Skipfish 保存报告的位置；在扫描运行时，这个目录必须不存在。
- en: The main drawback of Skipfish is that it hasn't been updated since 2012, according
    to its Google Code page, so newer technologies and attack vectors may not be the
    ideal target for it. It remains a very useful tool, though.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Skipfish 的主要缺点是根据其 Google Code 页面，它自 2012 年以来没有更新，因此可能无法针对新技术和攻击向量。尽管如此，它仍然是一个非常有用的工具。
- en: Finding vulnerabilities in WordPress with WPScan
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 WPScan 查找 WordPress 漏洞
- en: WordPress is one of the most used **Content Management Systems** (**CMS**),
    if not the most used, in the world. A CMS is an application - usually a web application
    - that allows users to  create fully functional websites easily with no or little
    programming knowledge. WPScan is a vulnerability scanner specialized in detecting
    vulnerabilities in WordPress sites.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress 是全球使用最多的**内容管理系统**（**CMS**）之一，甚至可能是最常用的。CMS 是一个应用程序——通常是一个 Web 应用程序——使用户可以轻松创建完全功能的网站，无需或只需少量编程知识。WPScan
    是一个专门用于检测 WordPress 网站漏洞的漏洞扫描工具。
- en: In this recipe, we will use WPScan to identify vulnerable components on a WordPress
    site installed in the OWASP BWA virtual machine.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实例中，我们将使用 WPScan 来识别安装在 OWASP BWA 虚拟机中的 WordPress 网站上的漏洞组件。
- en: How to do it...
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'WPScan is a command-line tool; open a Terminal to start using it:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: WPScan 是一个命令行工具；打开终端开始使用：
- en: Run WPScan against our target with the `wpscan http://192.168.56.11/wordpress/` command; the
    URL is the location of the WordPress site we want to scan.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `wpscan http://192.168.56.11/wordpress/` 命令对我们的目标运行 WPScan；该 URL 是我们要扫描的
    WordPress 网站的位置。
- en: 'If this is the first time you are running WPScan, it will ask to update the
    database, which requires internet connection. In our laboratory setup, the Kali
    Linux VM doesn''t have internet connection, so it is a good idea first to change
    its network setup, update the tools we are using, and connect it back to the laboratory
    after that''s finished. To update, you just need to answer `Y` and press *Enter*
    when asked. The following screenshot shows the expected output:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果这是你第一次运行 WPScan，它会要求更新数据库，这需要互联网连接。在我们的实验室环境中，Kali Linux 虚拟机没有互联网连接，因此最好先更改其网络设置，更新我们使用的工具，并在完成后将其重新连接到实验室。要更新，只需在提示时回答`Y`并按*Enter*键。以下截图显示了预期的输出：
- en: '![](assets/7284067b-e428-4d82-bfac-74dc1fe49091.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7284067b-e428-4d82-bfac-74dc1fe49091.png)'
- en: 'Once the update is finished, WPScan will continue scanning the target site.
    It will be displaying its findings in the Terminal; for example, in the following
    screenshot we see that it detected the web server and WordPress versions, and
    several vulnerabilities exist for that specific version:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新完成后，WPScan 将继续扫描目标网站。它将在终端中显示其发现的内容；例如，在以下截图中，我们可以看到它检测到 Web 服务器和 WordPress
    版本，并且该特定版本存在若干漏洞：
- en: '![](assets/0d872e87-ebb9-478a-9d58-21b0c17c9274.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0d872e87-ebb9-478a-9d58-21b0c17c9274.png)'
- en: 'With information about the existent vulnerabilities, we can follow the references
    and search for published exploits; for example, if we search for CVE-2007-5106,
    which is an XSS vulnerability in the user registration form, we will find that
    there is an exploit published in Security Focus: [https://www.securityfocus.com/bid/25769/exploit](https://www.securityfocus.com/bid/25769/exploit).'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过关于现有漏洞的信息，我们可以跟踪参考资料并搜索已发布的漏洞利用工具；例如，如果我们搜索 CVE-2007-5106，这是用户注册表单中的 XSS 漏洞，我们会发现
    Security Focus 上发布了一个漏洞利用：[https://www.securityfocus.com/bid/25769/exploit](https://www.securityfocus.com/bid/25769/exploit)。
- en: Look for other exploits and attempt to exploit the vulnerabilities identified
    by WPScan.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 寻找其他漏洞并尝试利用 WPScan 识别的漏洞。
- en: How it works...
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: WordPress allows users that are not experienced in developing web applications
    to create their own sites by incorporating plugins that may be created by other
    users and are not subject to the same quality assurance and testing that the main
    CMS is; this means that when one of those plugins or modules has a serious security
    flaw, thousands of users may have installed vulnerable code in their sites and
    are exposed to attacks that can compromise their whole servers.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress 允许没有开发 Web 应用程序经验的用户创建自己的网站，用户可以加入由其他用户创建的插件，而这些插件并不需要经过与主 CMS 相同的质量保证和测试；这意味着，当其中一个插件或模块存在严重安全漏洞时，成千上万的用户可能已经在他们的网站上安装了易受攻击的代码，并且暴露于可能会危及整个服务器的攻击中。
- en: In this recipe, we used WPScan to identify vulnerabilities in an old WordPress
    installation. We started by updating the tool's database; this was done automatically
    while being connected to the internet. Having finished the update, the scan continued
    by identifying the version of WordPress installed, users, and plugins used by
    the site; with this information, WPScan searches in its database for known vulnerabilities
    in any of the active components and displays the findings in the Terminal. When
    the scan finished, we looked for information and exploits for the issues identified.
    The further exploitation of such vulnerabilities is left to the reader.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们使用WPScan来识别旧版WordPress安装中的漏洞。我们首先更新了工具的数据库；这在连接互联网时会自动完成。完成更新后，扫描通过识别已安装的WordPress版本、用户和网站使用的插件继续进行；通过这些信息，WPScan在其数据库中搜索已知的漏洞，并在终端显示结果。扫描完成后，我们查找了已识别问题的信息和漏洞利用。进一步利用这些漏洞的工作留给读者。
- en: Finding vulnerabilities in Joomla with JoomScan
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JoomScan查找Joomla中的漏洞
- en: Another CMS widely used around the world is Joomla. As with WordPress, Joomla
    is based on PHP and its aim is to help users with little or no technical knowledge
    create websites, although it may not be as user-friendly as WordPress and is more
    suited for e-commerce sites rather than for blogs and news sites.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个在全球广泛使用的内容管理系统（CMS）是Joomla。与WordPress一样，Joomla基于PHP，其目标是帮助没有技术知识的用户创建网站，尽管它可能不像WordPress那样用户友好，更适合用于电子商务网站，而非博客和新闻网站。
- en: Kali Linux also includes a vulnerability scanner specialized in finding vulnerabilities
    in Joomla installations, JoomScan. In this recipe, we will use it to analyze the
    Joomla site installed in our vulnerable VM, `vm_1`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Kali Linux还包含一个专门用于查找Joomla安装漏洞的漏洞扫描工具——JoomScan。在本教程中，我们将使用它来分析安装在我们易受攻击的虚拟机`vm_1`上的Joomla网站。
- en: How to do it...
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'As with most of the tools in Kali Linux, JoomScan is a command-line utility,
    so we need to open a Terminal to run it:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 与Kali Linux中的大多数工具一样，JoomScan是一个命令行工具，因此我们需要打开终端来运行它：
- en: 'First, run `joomscan -h` to see how is it used and its options, as shown in
    the following screenshot:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先运行`joomscan -h`查看如何使用该工具及其选项，如下图所示：
- en: '![](assets/a3d03937-5aeb-4680-84df-2e3a08dc25f4.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a3d03937-5aeb-4680-84df-2e3a08dc25f4.png)'
- en: 'Now we know that we need to use the `-u` option, followed by the URL we want
    to scan, we can also modify other parameters in the requests, such as cookies
    and user agents. We will run the simplest command: `joomscan -u http://192.168.56.11/joomla/`.'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们知道需要使用`-u`选项，后面跟上我们想扫描的网址，我们还可以修改请求中的其他参数，如cookies和用户代理。我们将运行最简单的命令：`joomscan
    -u http://192.168.56.11/joomla/`。
- en: 'JoomScan will start scanning and displaying the results. As we can see in the
    following screenshot, those results include the version of Joomla that is affected,
    the type of vulnerability, the CVE number, and something that can prove to be
    very useful for a penetration tester, the Exploit-DB reference, if there is a
    public exploit available:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JoomScan将开始扫描并显示结果。如下面的截图所示，这些结果包括受影响的Joomla版本、漏洞类型、CVE编号以及对渗透测试人员非常有用的Exploit-DB参考，如果有公开的漏洞利用可用：
- en: '![](assets/a6bd5ac4-31b2-4130-a12e-b7396fb1e063.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a6bd5ac4-31b2-4130-a12e-b7396fb1e063.png)'
- en: 'When the scan is finished, JoomScan will show the path where the scan report
    is stored. This path is relative to JoomScan''s installation path; in our case,
    the report is saved in `/usr/share/joomscan/reports/192.168.56.11/`:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当扫描完成后，JoomScan将显示扫描报告存储的路径。此路径是相对于JoomScan安装路径的；在我们的例子中，报告保存在`/usr/share/joomscan/reports/192.168.56.11/`：
- en: '![](assets/8cdd901c-4837-4b90-a18d-407c6ea910df.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8cdd901c-4837-4b90-a18d-407c6ea910df.png)'
- en: 'We can open the given directory and open the report, which is in HTML format,
    as can be seen in the next picture:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以打开给定目录并查看报告，该报告是HTML格式的，如下图所示：
- en: '![](assets/fcbd96eb-47e2-4ae0-bd4d-44c3de0954b1.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fcbd96eb-47e2-4ae0-bd4d-44c3de0954b1.png)'
- en: How it works...
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In this recipe, we used JoomScan to identify vulnerabilities in a vulnerable
    installation. This tool identifies the Joomla version and the plugins it has enabled,
    and contrasts that information with its database of known vulnerabilities and
    exploits. The results of this process are displayed in the Terminal and also saved
    in a report in HTML format. The location of this report is given by JoomScan at
    the end of the scan.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们使用了JoomScan来识别脆弱安装中的漏洞。这个工具识别Joomla的版本和启用的插件，并将这些信息与其已知漏洞和漏洞利用的数据库进行对比。这个过程的结果显示在终端中，并以HTML格式保存报告。JoomScan在扫描结束时会提供该报告的保存位置。
- en: Scanning Drupal with CMSmap
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CMSmap扫描Drupal
- en: Another popular CMS is Drupal, which is also open source and based on PHP as
    with the previous ones. Although not as widespread, it holds a considerable share
    of the market with more than 1 million sites using it according to its official
    site ([https://www.drupal.org/project/usage/drupal](https://www.drupal.org/project/usage/drupal)).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个流行的CMS是Drupal，它也是开源的，并与前面提到的CMS一样基于PHP。虽然它的使用范围不如其他CMS广泛，但根据其官方网站的数据（[https://www.drupal.org/project/usage/drupal](https://www.drupal.org/project/usage/drupal)），它仍然占据了相当大的市场份额，超过100万个网站在使用它。
- en: In this recipe, we will install CMSmap, a vulnerability scanner for Drupal,
    WordPress, and Joomla, and use it to identify vulnerabilities in the Drupal version
    installed in bee-box, one of the vulnerable virtual machines in our laboratory.
    After finding a relevant attack vector, we will exploit it and gain command execution
    on the server.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将安装CMSmap，一个用于扫描Drupal、WordPress和Joomla漏洞的工具，并使用它来识别安装在bee-box中的Drupal版本的漏洞。找到相关的攻击向量后，我们将利用它并获得服务器上的命令执行权限。
- en: Getting ready
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'CMSmap is not installed in Kali Linux, nor included in its official software
    repository; however, we can easily get it from its GitHub repository. Open a Terminal
    and run `git clone https://github.com/Dionach/CMSmap.git`; this will download
    the latest source code to the `CMSmap` directory. As it is made in Python, there
    is no need to compile the code, as it is ready to run. To see usage examples and
    available options, enter the `CMSmap` directory and run `python cmsmap.py` command.
    This process is shown in the following screenshot:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: CMSmap没有预装在Kali Linux中，也不包含在其官方软件库中；然而，我们可以很容易地从其GitHub库获取它。打开终端并运行`git clone
    https://github.com/Dionach/CMSmap.git`；这将把最新的源代码下载到`CMSmap`目录中。由于它是用Python编写的，因此不需要编译代码，直接可以运行。要查看使用示例和可用选项，请进入`CMSmap`目录并运行`python
    cmsmap.py`命令。此过程如以下截图所示：
- en: '![](assets/45b621b4-a1ff-499e-8b90-9f450fbb77bf.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/45b621b4-a1ff-499e-8b90-9f450fbb77bf.png)'
- en: How to do it...
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Once we have CMSmap ready to run, start bee-box. In this example, it will have
    the IP address `192.168.56.12`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们准备好运行CMSmap，启动bee-box。在这个例子中，它的IP地址是`192.168.56.12`。
- en: 'Browse to `http://192.168.56.12/drupal/` to verify that there is a running
    version of Drupal. The result should be as shown:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问`http://192.168.56.12/drupal/`来验证是否有正在运行的Drupal版本。结果应该如下所示：
- en: '![](assets/88ed0fa1-21e9-4811-9d16-6f9c94adb342.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/88ed0fa1-21e9-4811-9d16-6f9c94adb342.png)'
- en: 'Now, launch the scanner against the site. Open a Terminal, go to the directory
    where CMSmap was downloaded, and run the `python cmsmap.py -t http://192.168.56.12/drupal`
    command. The following screenshot displays how the result should look:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，启动扫描器针对站点进行扫描。打开终端，进入下载CMSmap的目录，并运行`python cmsmap.py -t http://192.168.56.12/drupal`命令。以下截图展示了结果应该如何显示：
- en: '![](assets/ccd957a6-db40-4996-97f4-9461963be460.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ccd957a6-db40-4996-97f4-9461963be460.png)'
- en: We can see some vulnerabilities ranked high (the red `[H]`). One of them is
    SA-CORE-2014-005; a quick Google search will tell us that it is an SQL injection
    and this vulnerability is also nicknamed `Drupageddon` (the same name as our target
    site, coincidentally).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到一些漏洞排名较高（红色的`[H]`）。其中之一是SA-CORE-2014-005；通过快速的谷歌搜索，我们可以知道这是一个SQL注入漏洞，这个漏洞也被昵称为`Drupageddon`（恰好与我们的目标站点名称相同）。
- en: 'Now, let''s see if there''s an easy way to exploit this well-known flaw. Open
    Metasploit''s console (`msfconsole`) and search for `drupageddon`; you should
    find at least one exploit, shown as follows:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们看看是否有简单的方法来利用这个众所周知的漏洞。打开Metasploit控制台（`msfconsole`），搜索`drupageddon`；你应该能找到至少一个漏洞利用，如下所示：
- en: '![](assets/90eeb039-2f7e-4bf0-a575-ad9491a57d8a.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/90eeb039-2f7e-4bf0-a575-ad9491a57d8a.png)'
- en: 'Use the `multi/http/drupal_drupageddon` module and set the options according
    to the scenario, using a generic reverse shell. The next screenshot shows the
    final setup:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`multi/http/drupal_drupageddon`模块，并根据场景设置选项，使用通用反向shell。下一张截图显示了最终设置：
- en: '![](assets/097cc9d3-0fd7-41af-b8f7-097a381e5fd7.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/097cc9d3-0fd7-41af-b8f7-097a381e5fd7.png)'
- en: 'Run the exploit and verify that we have command execution, shown as follows:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行利用并验证我们是否有命令执行权限，如下所示：
- en: '![](assets/e4860b28-815d-4902-96fc-57ef6ed76c41.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e4860b28-815d-4902-96fc-57ef6ed76c41.png)'
- en: How it works...
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理如下...
- en: In this recipe, we first downloaded CMSmap from its GitHub source code repository
    using the `git` command-line client with the `clone` command, which makes a local
    copy of the specified repository. Once CMSmap was installed, we checked it was
    ready to execute and saw the usage options, then we ran it against our target.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们首先使用`git`命令行客户端从其GitHub源代码仓库下载了CMSmap，使用`clone`命令创建了指定仓库的本地副本。安装完成CMSmap后，我们检查其是否准备就绪并查看了使用选项，然后针对我们的目标运行了它。
- en: In the results, we saw a vulnerability rated as high impact by the scanner and
    looked online for information about it, finding that it was an SQL injection with
    several publicly available exploits.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在结果中，我们看到一个由扫描器评定为高影响的漏洞，并在线查找相关信息，发现它是一个SQL注入漏洞，有几个公开的利用方式。
- en: This vulnerability was disclosed in Drupal's security advisory SA-CORE-2014-005
    ([https://www.drupal.org/forum/newsletters/security-advisories-for-drupal-core/2014-10-15/sa-core-2014-005-drupal-core-sql](https://www.drupal.org/forum/newsletters/security-advisories-for-drupal-core/2014-10-15/sa-core-2014-005-drupal-core-sql)).
    According to that, it is an SQL injection vulnerability that can be used to get
    privilege escalation, PHP execution, and, as we saw in our example, command execution
    on the affected host.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 此漏洞在Drupal的安全公告SA-CORE-2014-005中披露（[https://www.drupal.org/forum/newsletters/security-advisories-for-drupal-core/2014-10-15/sa-core-2014-005-drupal-core-sql](https://www.drupal.org/forum/newsletters/security-advisories-for-drupal-core/2014-10-15/sa-core-2014-005-drupal-core-sql)）。根据该公告，这是一个SQL注入漏洞，可用于特权升级、PHP执行，并且正如我们在例子中看到的那样，在受影响的主机上执行命令。
- en: 'We chose to look in Metasploit for an existing exploit. The exploit we used
    has two ways of achieving the remote shell: in the first one, it uses the SQLi
    to upload malicious content to Drupal''s cache and trigger that cache entry to
    execute the payload. This was the option used by our exploit as we didn''t change
    the `TARGET` parameter (from `0` to `1`). In the second approach, it will create
    an administrator user in Drupal and use that user to upload the PHP code for the
    server to execute.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择在Metasploit中查找现有的利用方式。我们使用的利用方式有两种方法可以实现远程shell：第一种方法利用SQLi将恶意内容上传到Drupal的缓存，并触发该缓存条目执行有效负载。我们的利用方式选择了这个选项，因为我们没有修改`TARGET`参数（从`0`改为`1`）。第二种方法是在Drupal中创建一个管理员用户，并使用该用户上传PHP代码以供服务器执行。
- en: Lastly, we got a limited shell on the server with the ability to execute noninteractive
    commands and retrieve information.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在服务器上获得了有限的shell，可以执行非交互式命令并检索信息。
