- en: Implementing Advanced Topic Attacks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施高级主题攻击
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Performing **XML External Entity** (**XXE**) attacks
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行**XML外部实体**（**XXE**）攻击
- en: Working with **JSON Web Token** (**JWT**)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**JSON Web Token**（**JWT**）进行工作
- en: Using Burp Collaborator to determine **Server-Side Request Forgery** (**SSRF**)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Burp Collaborator来确定**服务器端请求伪造**（**SSRF**）
- en: Testing **Cross-Origin Resource Sharing** (**CORS**)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试**跨源资源共享**（**CORS**）
- en: Performing Java deserialization attacks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行Java反序列化攻击
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: This chapter covers intermediate to advanced topics such as working with JWT,
    XXE, and Java deserialization attacks, and how to use Burp to assist with such
    assessments. With some advanced attacks, Burp plugins provide tremendous help
    in easing the task required by the tester.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了中级到高级的主题，如使用JWT、XXE和Java反序列化攻击，以及如何使用Burp来协助进行此类评估。对于一些高级攻击，Burp插件在简化测试人员所需的任务方面提供了巨大的帮助。
- en: Software tool requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件工具要求
- en: 'In order to complete the recipes in this chapter, you will need the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成本章中的示例，您需要以下内容：
- en: OWASP **Broken Web Applications** (**BWA**)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP **Broken Web Applications**（**BWA**）
- en: OWASP Mutillidae link
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP Mutillidae链接
- en: Burp Proxy Community or Professional ([https://portswigger.net/burp/](https://portswigger.net/burp/))
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Burp代理社区或专业版（[https://portswigger.net/burp/](https://portswigger.net/burp/)）
- en: Performing XXE attacks
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行XXE攻击
- en: XXE is a vulnerability that targets applications parsing XML. Attackers can
    manipulate the XML input with arbitrary commands and send those commands as external
    entity references within the XML structure. The XML is then executed by a weakly-configured
    parser, giving the attacker the requested resource.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: XXE是针对解析XML的应用程序的漏洞。攻击者可以使用任意命令操纵XML输入，并将这些命令作为XML结构中的外部实体引用发送。然后，由弱配置的解析器执行XML，从而使攻击者获得所请求的资源。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using the OWASP Mutillidae II XML validator page, determine whether the application
    is susceptible to XXE attacks.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OWASP Mutillidae II XML验证器页面，确定应用程序是否容易受到XXE攻击。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Navigate to the XML External Entity Injection page, that is, through Others
    | XML External Entity Injection | XML Validator:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到XML外部实体注入页面，即通过其他| XML外部实体注入| XML验证器：
- en: '![](img/00375.jpeg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00375.jpeg)'
- en: 'While on the XML Validator page, perform the example XML that is provided on
    the page. Click on the Validate XML button:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在XML验证器页面上，执行页面上提供的示例XML。单击“验证XML”按钮：
- en: '![](img/00376.jpeg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00376.jpeg)'
- en: 'Switch to Burp Proxy| HTTP history tab and look for the request you just submitted
    to validate the XML. Right-click and send the request to the repeater:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp代理| HTTP历史选项卡，并查找您刚刚提交的用于验证XML的请求。右键单击并将请求发送到重复器：
- en: '![](img/00377.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00377.jpeg)'
- en: 'Note the value provided in the `xml` parameter:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意`xml`参数中提供的值：
- en: '![](img/00378.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00378.jpeg)'
- en: 'Use Burp Proxy Interceptor to replace this XML parameter value with the following
    payload. This new payload will make a request to a file on the operating system
    that should be restricted from view, namely, the `/etc/passwd` file:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Burp代理拦截器，将此XML参数值替换为以下有效负载。这个新的有效负载将对操作系统上应该被限制查看的文件发出请求，即`/etc/passwd`文件：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Since there are odd characters and spaces in the new XML message, let's type
    this payload into the Decoder section and URL-encode it before we paste it into
    the `xml` parameter.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于新的XML消息中有奇怪的字符和空格，让我们在将其粘贴到`xml`参数之前，将此有效负载输入到解码器部分并进行URL编码。
- en: 'Switch to the Decoder section, type or paste the new payload into the text
    area. Click the Encode as… button and select the URL option from the drop-down
    listing. Then, copy the URL-encoded payload using *Ctrl* + *C*. Make sure you
    copy all of the payload by scrolling to the right:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到解码器部分，输入或粘贴新的有效负载到文本区域。单击“编码为…”按钮，并从下拉列表中选择URL选项。然后，使用*Ctrl* + *C*复制URL编码的有效负载。确保通过向右滚动复制所有有效负载：
- en: '![](img/00379.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00379.jpeg)'
- en: Switch to the Burp Proxy Intercept tab. Turn the interceptor on with the Intercept
    is on button.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp代理拦截选项卡。使用“拦截已打开”按钮打开拦截器。
- en: 'Return to the Firefox browser and reload the page. As the request is paused,
    replace the current value of the `xml` parameter with the new URL-encoded payload:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到Firefox浏览器并重新加载页面。由于请求被暂停，将`xml`参数的当前值替换为新的URL编码的有效负载：
- en: '![](img/00380.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00380.jpeg)'
- en: Click the Forward button. Turn interceptor off by toggling the button to Intercept
    is off.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“转发”按钮。通过切换按钮关闭拦截器，使拦截器处于关闭状态。
- en: 'Note that the returned XML now shows the contents of the `/etc/passwd` file!
    The XML parser granted us access to the `/etc/passwd` file on the operating system:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，返回的XML现在显示了`/etc/passwd`文件的内容！XML解析器授予我们对操作系统上`/etc/passwd`文件的访问权限：
- en: '![](img/00381.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00381.jpeg)'
- en: How it works...
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, the insecure XML parser receives the request within the XML
    for the `/etc/passwd` file residing on the server. Since there is no validation
    performed on the XML request due to a weakly-configured parser, the resource is
    freely provided to the attacker.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，不安全的XML解析器接收了XML中对服务器上`/etc/passwd`文件的请求。由于由于弱配置的解析器未对XML请求执行验证，因此资源自由地提供给攻击者。
- en: Working with JWT
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JWT
- en: As more sites provide client API access, JWT are commonly used for authentication.
    These tokens hold identity and claims information tied to the resources the user
    is granted access to on the target site. Web-penetration testers need to read
    these tokens and determine their strength. Fortunately, there are some handy plugins
    that make working with JWT tokens inside of Burp much easier. We will learn about
    these plugins in this recipe.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 随着越来越多的网站提供客户端API访问，JWT通常用于身份验证。这些令牌包含与用户在目标网站上被授予访问权限的资源相关的身份和声明信息。Web渗透测试人员需要读取这些令牌并确定它们的强度。幸运的是，有一些方便的插件可以使在Burp中处理JWT令牌变得更容易。我们将在本章中了解这些插件。
- en: Getting ready
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we need to generate JWT tokens. Therefore, we will use the **OneLogin**
    software to assist with this task. In order to complete this recipe, browse to
    the OneLogin website: [https://www.onelogin.com/](https://www.onelogin.com/).
    Click the Developers link at the top and then click the GET A DEVELOPER ACCOUNT
    link ([https://www.onelogin.com/developer-signup](https://www.onelogin.com/developer-signup)).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们需要生成JWT令牌。因此，我们将使用OneLogin软件来协助完成这项任务。为了完成这个教程，请浏览OneLogin网站：[https://www.onelogin.com/](https://www.onelogin.com/)。点击顶部的开发人员链接，然后点击获取开发人员帐户链接（[https://www.onelogin.com/developer-signup](https://www.onelogin.com/developer-signup)）。
- en: After you sign up, you will be asked to verify your account and create a password.
    Please perform these account setup tasks prior to starting this recipe.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 注册后，您将被要求验证您的帐户并创建密码。请在开始这个教程之前执行这些帐户设置任务。
- en: Using the OneLogin SSO account, we will use two Burp extensions to examine the
    JWT tokens assigned as authentication by the site.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OneLogin SSO帐户，我们将使用两个Burp扩展来检查网站分配的JWT令牌作为身份验证。
- en: How to do it...
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Switch to Burp BApp Store and install two plugins—JSON Beautifier and JSON
    Web Tokens:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp BApp Store并安装两个插件—JSON Beautifier和JSON Web Tokens：
- en: '![](img/00382.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00382.jpeg)'
- en: 'In the Firefox browser, go to your OneLogin page. The URL will be specific
    to the developer account you created. Log in to the account using the credentials
    you established when you set up the account before beginning this recipe:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Firefox浏览器中，转到您的OneLogin页面。URL将特定于您创建的开发人员帐户。在开始这个教程之前，请使用您设置帐户时建立的凭据登录帐户：
- en: '![](img/00383.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00383.jpeg)'
- en: Switch to the Burp Proxy | HTTP history tab. Find the POST request with the
    URL `/access/auth`. Right-click and click the Send to Repeater option.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp代理 | HTTP历史选项卡。找到URL为`/access/auth`的POST请求。右键单击并单击发送到Repeater选项。
- en: 'Your host value will be specific to the OneLogin account you set up:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的主机值将特定于您设置的OneLogin帐户：
- en: '![](img/00384.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00384.jpeg)'
- en: 'Switch to the Repeater tab and notice that you have two additional tabs relating
    to the two extensions you installed:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Repeater选项卡，注意您有两个与您安装的两个扩展相关的额外选项卡：
- en: '![](img/00385.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00385.jpeg)'
- en: 'Click the JSON Beautifier tab to view the JSON structure in a more readable
    manner:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击JSON Beautifier选项卡，以更可读的方式查看JSON结构：
- en: '![](img/00386.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00386.jpeg)'
- en: 'Click the JSON Web Tokens tab to reveal a debugger very similar to the one
    available at [https://jwt.io.](https://jwt.io) This plugin allows you to read
    the claims content and manipulate the encryption algorithm for various brute-force
    tests. For example, in the following screenshot, notice how you can change the
    algorithm to **nOnE** in order to attempt to create a new JWT token to place into
    the request:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击JSON Web Tokens选项卡，以显示一个与[https://jwt.io](https://jwt.io)上可用的非常相似的调试器。此插件允许您阅读声明内容并操纵各种暴力测试的加密算法。例如，在下面的屏幕截图中，请注意您可以将算法更改为**nOnE**，以尝试创建一个新的JWT令牌放入请求中：
- en: '![](img/00387.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00387.jpeg)'
- en: How it works...
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Two extensions, JSON Beautifier and JSON Web Tokens, help testers to work with
    JWT tokens in an easier way by providing debugger tools conveniently available
    with the Burp UI.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 两个扩展，JSON Beautifier和JSON Web Tokens，通过提供方便地与Burp UI一起使用的调试器工具，帮助测试人员更轻松地处理JWT令牌。
- en: Using Burp Collaborator to determine SSRF
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Burp Collaborator来确定SSRF
- en: SSRF is a vulnerability that allows an attacker to force applications to make
    unauthorized requests on the attacker's behalf. These requests can be as simple
    as DNS queries or as maniacal as commands from an attacker-controlled server.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: SSRF是一种漏洞，允许攻击者强制应用程序代表攻击者进行未经授权的请求。这些请求可以简单到DNS查询，也可以疯狂到来自攻击者控制的服务器的命令。
- en: In this recipe, we will use Burp Collaborator to check open ports available
    for SSRF requests, and then use Intruder to determine whether  the application
    will perform DNS queries to the public Burp Collaborator server through an SSRF
    vulnerability.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将使用Burp Collaborator来检查SSRF请求的开放端口，然后使用Intruder来确定应用程序是否会通过SSRF漏洞向公共Burp
    Collaborator服务器执行DNS查询。
- en: Getting ready
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using the OWASP Mutillidae II DNS lookup page, let's determine whether the application
    has an SSRF vulnerability.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OWASP Mutillidae II DNS查询页面，让我们确定应用程序是否存在SSRF漏洞。
- en: How to do it...
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Switch to the Burp Project options | Misc tab. Note the Burp Collaborator Server
    section. You have options available for using a private Burp Collaborator server,
    which you would set up, or you may use the publicly internet-accessible one made
    available by PortSwigger. For this recipe, we will use the public one:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp项目选项 | 杂项选项卡。注意Burp Collaborator服务器部分。您可以选择使用私人Burp Collaborator服务器的选项，您可以设置，或者您可以使用PortSwigger提供的公共互联网可访问的服务器。在这个教程中，我们将使用公共的。
- en: '![](img/00388.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00388.jpeg)'
- en: 'Check the box labeled Poll over unencrypted HTTP and click the Run health check…
    button:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 勾选标有在未加密的HTTP上轮询并单击运行健康检查...按钮的框：
- en: '![](img/00389.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00389.jpeg)'
- en: A pop-up box appears to test various protocols to see whether they will connect
    to the public Burp Collaborator server available on the internet.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 弹出框出现以测试各种协议，以查看它们是否会连接到互联网上可用的公共Burp Collaborator服务器。
- en: 'Check the messages for each protocol to see which are successful. Click the
    Close  button when you are done:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查每个协议的消息，看看哪些是成功的。完成后，单击关闭按钮：
- en: '![](img/00390.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00390.jpeg)'
- en: 'From the top-level menu, select Burp | Burp Collaborator client:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从顶级菜单中，选择Burp | Burp Collaborator客户端：
- en: '![](img/00391.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00391.jpeg)'
- en: 'A pop-up box appears. In the section labeled Generate Collaborator payloads,
    change the 1 to 10:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 弹出框出现。在标有生成协作者有效负载的部分，将1更改为10：
- en: '![](img/00392.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00392.jpeg)'
- en: 'Click the Copy to clipboard button.  Leave all other defaults as they are. Do
    not close the Collaborator client window. If you close the window, you will lose
    the client session:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击复制到剪贴板按钮。保持所有其他默认设置不变。不要关闭Collaborator客户端窗口。如果关闭窗口，您将丢失客户端会话：
- en: '![](img/00393.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00393.jpeg)'
- en: 'Return to the Firefox browser and navigate to OWASP 2013 | A1 – Injection (Other)
    | HTML Injection (HTMLi) | DNS Lookup:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回Firefox浏览器，并导航到OWASP 2013 | A1 – Injection（其他）| HTML Injection（HTMLi）| DNS
    Lookup：
- en: '![](img/00394.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00394.jpeg)'
- en: 'On the DNS Lookup page, type an IP address and click the Lookup DNS button:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在DNS Lookup页面上，输入IP地址，然后单击查找DNS按钮：
- en: '![](img/00395.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00395.jpeg)'
- en: 'Switch to the Burp Proxy | HTTP history tab and find the request you just created
    on the DNS Lookup page. Right-click and select the Send to Intruder option:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp Proxy | HTTP历史选项卡，并找到刚刚在DNS Lookup页面上创建的请求。右键单击并选择发送到Intruder选项：
- en: '![](img/00396.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00396.jpeg)'
- en: 'Switch to the Burp Intruder | Positions tab. Clear all suggested payload markers
    and highlight the IP address, click the *Add §* button to place payload markers
    around the IP address value of the `target_host` parameter:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp Intruder |位置选项卡。清除所有建议的有效负载标记，并突出显示IP地址，单击*添加§*按钮，将有效负载标记放置在`target_host`参数的IP地址值周围：
- en: '![](img/00397.jpeg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00397.jpeg)'
- en: 'Switch to the Burp Intruder | Payloads tab and paste the 10 payloads you copied
    to the clipboard from the Burp Collaborator client into the Payload Options [Simple
    list] textbox using the Paste button:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp Intruder |有效负载选项卡，并使用粘贴按钮将从Burp Collaborator客户端复制到剪贴板的10个有效负载粘贴到有效负载选项[简单列表]文本框中：
- en: '![](img/00398.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00398.jpeg)'
- en: Make sure you uncheck the Payload Encoding checkbox.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 确保取消选中有效负载编码复选框。
- en: 'Click the Start attack button. The attack results table will pop up as your
    payloads are processing. Allow the attacks to complete. Note the `burpcollaborator.net`
    URL is placed in the payload marker position of the `target_host` parameter:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击开始攻击按钮。攻击结果表将在处理有效负载时弹出。允许攻击完成。请注意，`burpcollaborator.net` URL放置在`target_host`参数的有效负载标记位置：
- en: '![](img/00399.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00399.jpeg)'
- en: 'Return to the Burp Collaborator client and click the Poll now button to see
    whether any SSRF attacks were successful over any of the protocols. If any requests
    leaked outside of the network, those requests will appear in this table along
    with the specific protocol used. If any requests are shown in this table, you
    will need to report the SSRF vulnerability as a finding. As you can see from the
    results shown here, numerous DNS queries were made by the application on behalf
    of the attacker-provided payloads:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回Burp Collaborator客户端，单击立即轮询按钮，查看是否有任何SSRF攻击成功通过任何协议。如果任何请求泄漏到网络之外，则这些请求将显示在此表中，并显示使用的特定协议。如果在此表中显示任何请求，则需要将SSRF漏洞报告为发现。从这里显示的结果可以看出，应用程序代表攻击者提供的有效负载进行了大量DNS查询：
- en: '![](img/00400.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00400.jpeg)'
- en: How it works...
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Network leaks and overly-generous application parameters can allow an attacker
    to have an application make unauthorized calls via various protocols on the attacker's
    behalf. In the case of this recipe, the application allows DNS queries to leak
    outside of the local machine and connect to the internet.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 网络泄漏和过于宽松的应用程序参数可以允许攻击者代表应用程序通过各种协议进行未经授权的调用。在这个案例中，该应用程序允许DNS查询泄漏到本地机器之外并连接到互联网。
- en: See also
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: For more information on SSRF attacks, see this PortSwigger blog entry at [https://portswigger.net/blog/cracking-the-lens-targeting-https-hidden-attack-surface](https://portswigger.net/blog/cracking-the-lens-targeting-https-hidden-attack-surface).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有关SSRF攻击的更多信息，请参阅PortSwigger博客条目[https://portswigger.net/blog/cracking-the-lens-targeting-https-hidden-attack-surface](https://portswigger.net/blog/cracking-the-lens-targeting-https-hidden-attack-surface)。
- en: Testing CORS
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试CORS
- en: An application that implements HTML5 CORS means the application will share browser
    information with another domain that resides at a different origin. By design,
    browser protections prevent external scripts from accessing information in the
    browser. This protection is known as **Same-Origin Policy** (**SOP**). However,
    CORS is a means of bypassing SOP, permissively. If an application wants to share
    browser information with a completely different domain, it may do so with properly-configured
    CORS headers.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 实现HTML5 CORS的应用程序意味着该应用程序将与位于不同来源的另一个域共享浏览器信息。按设计，浏览器保护阻止外部脚本访问浏览器中的信息。此保护称为**同源策略**（**SOP**）。但是，CORS是一种绕过SOP的手段。如果应用程序希望与完全不同的域共享浏览器信息，则可以通过正确配置的CORS标头实现。
- en: Web-penetration testers must ensure applications that handle AJAX calls (for
    example, HTML5) do not have misconfigured CORS headers. Let's see how Burp can
    help us identify such misconfigurations.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 网络渗透测试人员必须确保处理AJAX调用（例如HTML5）的应用程序没有配置错误的CORS标头。让我们看看Burp如何帮助我们识别这种配置错误。
- en: Getting ready
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Using the OWASP Mutillidae II AJAX version of the Pen Test Tool Lookup page,
    determine whether the application contains misconfigured CORS headers.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OWASP Mutillidae II AJAX版本的Pen Test Tool Lookup页面，确定应用程序是否包含配置错误的CORS标头。
- en: How to do it...
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Navigate to HTML5 | Asynchronous JavaScript and XML | Pen Test Tool Lookup
    (AJAX):'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到HTML5 |异步JavaScript和XML | Pen Test Tool Lookup（AJAX）：
- en: '![](img/00401.jpeg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00401.jpeg)'
- en: 'Select a tool from the listing and click the Lookup Tool button:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从列表中选择一个工具，然后单击查找工具按钮：
- en: '![](img/00402.jpeg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00402.jpeg)'
- en: 'Switch to the Burp Proxy | HTTP history tab and find the request you just made
    from the AJAX Version Pen Test Tool Lookup page. Flip to the Response tab:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp Proxy | HTTP历史选项卡，并找到刚刚从AJAX版本Pen Test Tool Lookup页面进行的请求。切换到响应选项卡：
- en: '![](img/00403.jpeg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00403.jpeg)'
- en: 'Let''s examine the headers more closely by selecting the Headers tab of the
    same Response tab. Though this is an AJAX request, the call is local to the application
    instead of being made to a cross-origin domain. Thus, no CORS headers are present
    since it is not required. However, if a call to an external domain were made (for
    example, Google APIs), then CORS headers would be required:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过选择相同响应选项卡的标题选项卡来更仔细地检查标题。虽然这是一个AJAX请求，但该调用是应用程序内部的，而不是跨源域的。因此，由于不需要，没有CORS标头。但是，如果对外部域进行调用（例如Google
    APIs），则需要CORS标头：
- en: '![](img/00404.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00404.jpeg)'
- en: 'In an AJAX request, there is a call out to an external URL (for example, a
    cross-domain). In order to permit the external domain to receive DOM information
    from the user''s browser session, CORS headers must be present, including `Access-Control-Allow-Origin:
    <name of cross domain>`.'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在AJAX请求中，会调用外部URL（例如，跨域）。为了允许外部域接收来自用户浏览器会话的DOM信息，必须存在CORS标头，包括`Access-Control-Allow-Origin:
    <跨域的名称>`。'
- en: In the event the CORS header does not specify the name of the external domain
    and, instead, uses a wild card (`*`), this is a vulnerability. Web pentesters
    should include this in their report as a misconfigured CORS headers vulnerability.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果CORS标头未指定外部域的名称，而是使用通配符（`*`），则存在漏洞。Web渗透测试人员应将此包括在其报告中，作为配置错误的CORS标头漏洞。
- en: How it works...
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Since the AJAX call used in this recipe originated from the same place, there
    is no need for CORS headers. However, in many cases, AJAX calls are made to external
    domains and require explicit permission through the HTTP response `Access-Control-Allow-Origin`
    header.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此示例中使用的AJAX调用源自同一位置，因此无需CORS标头。但是，在许多情况下，AJAX调用是向外部域进行的，并且需要通过HTTP响应`Access-Control-Allow-Origin`标头明确许可。
- en: See also
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: For more information on misconfigured CORS headers, see this PortSwigger blog
    entry at [https://portswigger.net/blog/exploiting-cors-misconfigurations-for-bitcoins-and-bounties](https://portswigger.net/blog/exploiting-cors-misconfigurations-for-bitcoins-and-bounties).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 有关配置错误的CORS标头的更多信息，请参阅PortSwigger博客条目[https://portswigger.net/blog/exploiting-cors-misconfigurations-for-bitcoins-and-bounties](https://portswigger.net/blog/exploiting-cors-misconfigurations-for-bitcoins-and-bounties)。
- en: Performing Java deserialization attacks
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行Java反序列化攻击
- en: '**Serialization** is a mechanism provided in various languages that allows
    the saving of an object''s state in binary format. It is used for speed and obfuscation.
    The turning of an object back from binary into an object is deserialization. In
    cases where user input is used within an object and that object is later serialized,
    it creates an attack vector for arbitrary code-injection and possible remote code-execution.
    We will look at a Burp extension that will assist web-penetration testers in assessing
    applications for Java Deserialization vulnerabilities.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**序列化**是各种语言中提供的一种机制，允许以二进制格式保存对象的状态。它用于加快速度和混淆。将对象从二进制转换回对象的过程称为反序列化。在使用用户输入创建对象并将该对象序列化后，会为任意代码注入和可能的远程代码执行创建攻击向量。我们将看一下Burp扩展，它将帮助Web渗透测试人员评估Java反序列化漏洞的应用程序。'
- en: Getting Ready
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: '[PRE1]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How to do it...
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Switch to Burp BApp Store and install the Java Serial Killer plugin:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp BApp Store并安装Java Serial Killer插件：
- en: '![](img/00405.jpeg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00405.jpeg)'
- en: In order to create a scenario using a serialized object, we will take a standard
    request and add a serialized object to it for the purposes of demonstrating how
    you can use the extension to add attacker-controlled commands to serialized objects.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个使用序列化对象的场景，我们将采用标准请求，并向其添加一个序列化对象，以演示您如何使用扩展程序向序列化对象添加受攻击者控制的命令。
- en: Note the new tab added to your Burp UI menu at the top dedicated to the newly-installed
    plugin.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，您的Burp UI菜单顶部添加了一个新的选项卡，专门用于新安装的插件。
- en: Navigate to the Mutillidae homepage.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到Mutillidae主页。
- en: 'Switch to the Burp Proxy| HTTP history tab and look for the request you just
    created by browsing to the Mutillidae homepage:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp Proxy| HTTP历史选项卡，并查找刚刚创建的请求，方法是浏览到Mutillidae主页：
- en: '![](img/00406.jpeg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00406.jpeg)'
- en: Unfortunately, there aren't any serialized objects in Mutillidae so we will
    have to create one ourselves.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，Mutillidae中没有序列化对象，所以我们必须自己创建一个。
- en: 'Switch to the Decoder tab and copy the following snippet of a serialized object:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到解码器选项卡并复制以下序列化对象的片段：
- en: '[PRE2]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Paste the hexadecimal numbers into the Decoder tab, click the Encode as...
    button, and select base 64:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将十六进制数粘贴到解码器选项卡，单击“编码为...”按钮，然后选择base 64：
- en: '![](img/00407.jpeg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00407.jpeg)'
- en: 'Copy the base-64 encoded value from the Decoder tab and paste it into the bottom
    of the request you sent to the Java Serial Killer tab. Use *Ctrl* + *C* to copy
    out of Decoder and *Ctrl* + *V* to paste it anywhere in the white space area of
    the request:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从解码器选项卡复制base-64编码的值，并将其粘贴到您发送到Java Serial Killer选项卡底部的请求中。使用*Ctrl* + *C*从解码器复制，*Ctrl*
    + *V*粘贴到请求的白色空间区域中的任何位置：
- en: '![](img/00408.jpeg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00408.jpeg)'
- en: 'Within the Java Serial Killer tab, pick a Java library from the drop-down list.
    For this recipe, we will use CommonsCollections1\. Check the Base64 Encode box.
    Add a command to embed into the serialized object. In this example, we will use
    the nslookup 127.0.0.1 command. Highlight the payload and click the Serialize
    button:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Java Serial Killer选项卡中，从下拉列表中选择一个Java库。对于这个示例，我们将使用CommonsCollections1。勾选Base64编码框。添加一个命令嵌入到序列化对象中。在这个示例中，我们将使用nslookup
    127.0.0.1命令。突出显示有效载荷并单击“序列化”按钮：
- en: '![](img/00409.jpeg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00409.jpeg)'
- en: 'After clicking the Serialize button, notice the payload has changed and now
    contains your arbitrary command and is base-64 encoded:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“序列化”按钮后，注意有效载荷已更改，现在包含您的任意命令并且已进行base-64编码：
- en: '![](img/00410.jpeg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00410.jpeg)'
- en: Click the Go button within the Java Serial Killer tab to execute the payload.
    Even though you may receive an error in the response, ideally, you would have
    a listener, such as `tcpdump`, listening for any DNS lookups on port `53`. From
    the listener, you would see the DNS query to the IP address you specified in the
    `nslookup` command.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击Java Serial Killer选项卡中的“Go”按钮以执行有效载荷。即使您可能会收到响应中的错误，理想情况下，您将拥有一个侦听器，例如`tcpdump`，用于监听端口`53`上的任何DNS查询。从侦听器中，您将看到对IP地址的DNS查询，该IP地址是您在`nslookup`命令中指定的。
- en: How it works...
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In cases where application code receives user input directly into an object
    without performing sanitization on such input, an attacker has the opportunity
    to provide arbitrary commands. The input is then serialized and run on the operating
    system where the application resides, creating a possible attack vector for remote
    code execution.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序代码接收用户输入并将其直接放入对象而不对输入进行消毒的情况下，攻击者有机会提供任意命令。然后对输入进行序列化并在应用程序所在的操作系统上运行，从而为远程代码执行创建可能的攻击向量。
- en: There's more...
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Since this recipe scenario is a bit contrived, you may not receive a response
    on your network listener for the `nslookup` command. Try the recipe again after
    downloading a vulnerable version of an application with known Java deserialization
    vulnerabilities (that is, Jenkins, JBoss).  Reuse the same steps shown here, only
    change the target application.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个示例场景有点牵强，您可能无法在`nslookup`命令的网络监听器上收到响应。在下载已知存在Java反序列化漏洞的应用程序的易受攻击版本（即Jenkins、JBoss）后，再尝试此示例。重复此处显示的相同步骤，只需更改目标应用程序。
- en: See also
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'For more information about real-world Java deserialization attacks, check out
    these links:'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关真实世界的Java反序列化攻击的更多信息，请查看以下链接：
- en: '**Symantec**: [https://www.symantec.com/security_response/attacksignatures/detail.jsp?asid=30326](https://www.symantec.com/security_response/attacksignatures/detail.jsp?asid=30326)'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**赛门铁克**：[https://www.symantec.com/security_response/attacksignatures/detail.jsp?asid=30326](https://www.symantec.com/security_response/attacksignatures/detail.jsp?asid=30326)'
- en: '**Foxglove Security**: [https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/](https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/)'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 福克斯格洛夫安全：[https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/](https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/)
- en: To read more about this Burp plugin, check out [https://blog.netspi.com/java-deserialization-attacks-burp/](https://blog.netspi.com/java-deserialization-attacks-burp/)
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解有关这个Burp插件的更多信息，请访问[https://blog.netspi.com/java-deserialization-attacks-burp/](https://blog.netspi.com/java-deserialization-attacks-burp/)
