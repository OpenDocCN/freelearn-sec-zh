- en: Chapter 4. Network Exploitation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。网络利用
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Gathering information for credential cracking
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集凭证破解的信息
- en: Cracking FTP using custom wordlist
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义字典破解FTP
- en: Cracking SSH using custom wordlist
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义字典破解SSH
- en: Cracking HTTP using custom wordlist
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义字典破解HTTP
- en: Cracking MySql and PostgreSQL using custom wordlist
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义字典破解MySql和PostgreSQL
- en: Cracking Cisco login using custom wordlist
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义字典破解Cisco登录
- en: Exploiting vulnerable services (Unix)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用易受攻击的服务（Unix）
- en: Exploiting vulnerable services (Windows)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用易受攻击的服务（Windows）
- en: Exploiting services using `exploit-db` scripts
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`exploit-db`脚本来利用服务
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In the previous chapter, we enumerated the open ports and searched for possible
    vulnerabilities. In this chapter, we are going to perform penetration testing
    of the system over the network. For the purpose of demonstration, we have taken
    a vulnerable OS called **Stapler**, made by g0tmi1k. Stapler can be downloaded
    at [https://www.vulnhub.com/entry/stapler-1,150/](https://www.vulnhub.com/entry/stapler-1,150/)
    .
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们枚举了开放端口并搜索可能的漏洞。在本章中，我们将对网络上的系统进行渗透测试。为了演示目的，我们选择了一个名为**Stapler**的易受攻击的操作系统，由g0tmi1k制作。Stapler可以在[https://www.vulnhub.com/entry/stapler-1,150/](https://www.vulnhub.com/entry/stapler-1,150/)下载。
- en: Along with Stapler, we will also check out exploitation with Metasploitable
    2, as briefly covered in the previous chapter. The aim of this chapter is to enlighten
    the reader about a couple of network-level attack vectors, and to demonstrate
    different types of attacks. Let's get started with Stapler, a vulnerable OS virtual
    machine, by loading the image on a virtual machine.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Stapler，我们还将简要介绍如何利用Metasploitable 2进行利用，这在上一章中已经简要介绍过。本章的目的是向读者介绍一些网络级攻击向量，并演示不同类型的攻击。让我们开始使用Stapler，一个易受攻击的操作系统虚拟机，通过在虚拟机上加载镜像来开始。
- en: Gathering information for credential cracking
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集凭证破解的信息
- en: 'In order to perform a successful credential crack, it is important to have
    a list of possible usernames and passwords. One of the ways this is possible is
    by making use of the dictionaries available in the Kali Linux Distro. These are
    located under `/usr/share/wordlists/`. The following screenshot shows the available
    wordlists in Kali:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了成功进行凭证破解，有可能用户名和密码列表是很重要的。其中一种可能的方式是利用Kali Linux Distro中可用的字典。这些位于`/usr/share/wordlists/`下。以下屏幕截图显示了Kali中可用的字典：
- en: '![Gathering information for credential cracking](img/image_04_001.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![收集凭证破解的信息](img/image_04_001.jpg)'
- en: 'You will find a `rockyou.txt.gz` file, which you will need to unzip. Use the
    following command in terminal to unzip the contents of the file:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您将找到一个名为`rockyou.txt.gz`的文件，您需要解压缩。在终端中使用以下命令解压缩文件的内容：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once this is done, the file will be extracted, as shown in the preceding screenshot.
    This is a prebuilt list of available passwords in Kali Linux. Let us begin to
    formulate one of ours with the help of enumeration and information gathering.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，文件将被提取，如前面的屏幕截图所示。这是Kali Linux中可用密码的预构建列表。让我们开始利用枚举和信息收集来制定我们自己的密码之一。
- en: Getting ready
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To commence, we will first find the IP address of the hosted Stapler machine
    and begin enumerating information to collect and create a set of custom passwords.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将找到托管Stapler机器的IP地址，并开始枚举信息以收集和创建一组自定义密码。
- en: How to do it...
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The steps for the recipe are as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 该配方的步骤如下：
- en: 'Discover the IP address of Stapler on the subnet, using the following command:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令在子网上发现Stapler的IP地址：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下屏幕截图所示：
- en: '![How to do it...](img/image_04_002.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_04_002.jpg)'
- en: 'Run a quick `nmap` scan to find the available ports:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行快速的`nmap`扫描以查找可用端口：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下屏幕截图所示：
- en: '![How to do it...](img/image_04_003.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_04_003.jpg)'
- en: Connect to open ports and gather valuable information; let's enumerate the `ftp`,
    `Ssh`, and `http` ports. The following is a series of ways the information can
    be gathered and stored.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接到开放端口并收集有价值的信息；让我们枚举`ftp`、`Ssh`和`http`端口。以下是一系列收集和存储信息的方式。
- en: '**Information gathering on the FTP port:**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**FTP端口上的信息收集**：'
- en: 'We entered the default anonymous login by entering the username and password
    as `Ftp: ftp`.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '我们通过输入用户名和密码`Ftp: ftp`来进入默认的匿名登录。'
- en: 'We successfully got access to the login and found a file called note. On downloading
    it, we got a few usernames. As a part of the information-gathering process, these
    were stored in a document. The same can be seen in the following screenshot:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功访问了登录并找到一个名为note的文件。下载后，我们得到了一些用户名。作为信息收集过程的一部分，这些用户名被存储在一个文档中。在下面的屏幕截图中可以看到相同的情况：
- en: '![How to do it...](img/image_04_004.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_04_004.jpg)'
- en: '**Information gathering on SSH**:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**SSH上的信息收集**：'
- en: 'We connect to SSH using the `ssh` client and gather information as shown in
    the following screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`ssh`客户端连接到SSH，并收集信息如下屏幕截图所示：
- en: '![How to do it...](img/image_04_005.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_04_005.jpg)'
- en: We have found one more possible username.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们找到了另一个可能的用户名。
- en: '**Information gathering on HTTP**:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTTP上的信息收集**：'
- en: 'There are quite a few ways to gather possible useful words from the Web application.
    On the nmap screen, we found out that there is one port, `12380`, running a web
    server. On visiting and trying to check for `robots.txt`, we found some interesting
    folders as shown in the following screenshots:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多种方式可以从Web应用程序中收集可能有用的单词。在nmap屏幕上，我们发现有一个端口`12380`，运行着一个Web服务器。访问并尝试检查`robots.txt`，我们发现了一些有趣的文件夹，如下屏幕截图所示：
- en: '![How to do it...](img/image_04_006.jpg)![How to do it...](img/image_04_007.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_04_006.jpg)![如何做...](img/image_04_007.jpg)'
- en: On accessing the `/blogblog/` URL, we discovered that it is a WordPress site,
    so we'll try to enumerate the possible usernames for the WordPress blog.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 访问`/blogblog/` URL时，我们发现它是一个WordPress网站，因此我们将尝试枚举WordPress博客的可能用户名。
- en: 'Use the following command to enumerate WordPress users:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令枚举WordPress用户：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下屏幕截图所示：
- en: '![How to do it...](img/image_04_008.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_04_008.jpg)'
- en: '**Information gathering via shares**:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**通过共享进行信息收集**：'
- en: 'Here we will gather information that will help us build our potential credentials
    list. Let''s check how this is possible. We will run `enum4linux` on the machine,
    using the following command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将收集有助于建立潜在凭证列表的信息。让我们看看这是如何可能的。我们将在机器上运行`enum4linux`，使用以下命令：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下屏幕截图所示：
- en: '![How to do it...](img/image_04_009.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_04_009.jpg)'
- en: 'Share enumeration via `enum4linux` looks similar to the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`enum4linux`进行共享枚举看起来与下面的屏幕截图类似：
- en: '![How to do it...](img/image_04_010.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_04_010.jpg)'
- en: 'On doing so, we realize that there are more usernames available, and hence,
    we can add them to our username list. On further assessment, we hit the jackpot:
    the available usernames on the server. SID enumeration via `enum4linux` looks
    similar to the following screenshot:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做后，我们意识到有更多的用户名可用，因此，我们可以将它们添加到我们的用户名列表中。在进一步评估中，我们击中了大奖：服务器上可用的用户名。通过`enum4linux`进行SID枚举看起来与下面的屏幕截图类似：
- en: '![How to do it...](img/image_04_011.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_04_011.jpg)'
- en: 'Now an entire list of usernames is formulated and stored in the username file,
    which looks as shown in the following screenshot:'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，一个完整的用户名列表被制定并存储在用户名文件中，如下面的屏幕截图所示：
- en: '![How to do it...](img/image_04_012-min.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_04_012-min.jpg)'
- en: 'Let''s do the same for the Metasploitable 2 machine. In our testing lab, the
    Metasploitable 2 machine is hosted at `192.168.157.152`. We have created a custom
    `grep` that will enumerate the share for users and also give only the username
    as output:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对Metasploitable 2机器做同样的操作。在我们的测试实验室中，Metasploitable 2机器托管在`192.168.157.152`。我们已经创建了一个自定义的`grep`，它将枚举用户的共享，并且只给出用户名作为输出：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下屏幕截图所示：
- en: '![How to do it...](img/image_04_013.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_04_013.jpg)'
- en: 'Once this is done, save the usernames in a file of any name. In this case,
    we name it `metasploit_users`. This can be done by redirecting the output of the
    preceding command using the following command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，将用户名保存在任何名称的文件中。在这种情况下，我们将其命名为`metasploit_users`。这可以通过使用以下命令重定向前面命令的输出来完成：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: With this, we have completed the first recipe of information gathering to build
    a credible credentials dictionary. In the next recipe, we will look at how to
    make use of this to attack and try to gain access to the server.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们已经完成了信息收集的第一个步骤，以建立一个可信的凭证字典。在下一个步骤中，我们将看看如何利用这一点来攻击并尝试访问服务器。
- en: Cracking FTP login using custom wordlist
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义单词列表破解FTP登录
- en: In this recipe, we will learn how to attack FTP to find a valid login. We will
    make use of the list generated in the preceding information-gathering recipe.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个步骤中，我们将学习如何攻击FTP以找到有效的登录。我们将使用前面信息收集步骤中生成的列表。
- en: Getting ready
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will make use of a tool named Hydra. It is a parallelized
    login cracker that supports numerous attack protocols. There are many tools available
    in Kali Linux for cracking passwords; however, Hydra is very handy. Now that we
    have Hydra and the username list, let's begin the attack.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个步骤，我们将使用一个名为Hydra的工具。它是一个支持多种攻击协议的并行化登录破解器。Kali Linux中有许多用于破解密码的工具；然而，Hydra非常方便。现在我们有了Hydra和用户名列表，让我们开始攻击。
- en: How to do it...
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Knowing that our username list is called `username`, ensure that terminal points
    to the path where the username file is. We will run the following command in the
    terminal:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 知道我们的用户名列表叫做`username`，确保终端指向用户名文件所在的路径。我们将在终端中运行以下命令：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下屏幕截图所示：
- en: '![How to do it...](img/image_04_014.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_04_014.jpg)'
- en: Check to see if the credentials received are working:![How to do it...](img/image_04_015.jpg)
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查接收到的凭证是否有效：![操作步骤...](img/image_04_015.jpg)
- en: 'We connect to the FTP as shown in the following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们连接到FTP，如下面的屏幕截图所示：
- en: '![How to do it...](img/image_04_016.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_04_016.jpg)'
- en: We have successfully found valid credentials and attained the logins of potential
    users of the server.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功找到有效的凭证，并获得了服务器潜在用户的登录信息。
- en: How it works...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'As you can see, we have used the following command in Hydra:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们在Hydra中使用了以下命令：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let us understand the script with all the switches. The `-e` switch has three
    options, `n`, `s`, and `r`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解带有所有开关的脚本。`-e`开关有三个选项，`n`、`s`和`r`：
- en: '`n`: This option checks for a null password'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n`：此选项检查空密码'
- en: '`s`: This option is used for login name as password'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s`：此选项用于登录名作为密码'
- en: '`r`: This is the reverse of login name as password'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r`：这是登录名的反向作为密码'
- en: The `-L` check is to specify the list of usernames, and `ftp` is the protocol
    specified, which should be attacked for password guessing.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`-L`检查是用来指定用户名列表的，`ftp`是指定的协议，应该对密码进行猜测攻击。'
- en: There's more...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'There are more parameters that can be used in the scenario for different types
    of attacks. Here are a few examples:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多参数可以在不同类型的攻击场景中使用。以下是一些示例：
- en: '`-S`: This is used to connect to the port via SSL'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-S`：用于通过SSL连接到端口'
- en: '`-s`: This is used to specify the custom port for the protocol to test, if
    it''s not the default'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-s`：用于指定要测试的协议的自定义端口，如果不是默认端口'
- en: '`-p`: This is used for a specific password to be tried'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -p：用于尝试特定密码
- en: '`-P`: This is used to specify a list of password files'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-P`：用于指定密码文件列表'
- en: '`-C`: This is a colon-separated file; here, the username and password list
    can be in a colon-separated format, for example, `user:pass`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-C`：这是一个以冒号分隔的文件；在这里，用户名和密码列表可以以冒号分隔的格式，例如，`user:pass`'
- en: If you want the username and password to be stored in a file instead of displaying
    in Terminal, you can make use of the `-o` option followed by specifying the filename,
    to output the contents.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望将用户名和密码存储在文件中而不是在终端中显示，可以使用`-o`选项，然后指定文件名，以输出内容。
- en: Cracking SSH login using custom wordlist
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义单词列表破解SSH登录
- en: In this recipe, we will learn how to attack SSH to find a valid login. We will
    make use of the list generated in the information-gathering recipe.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将学习如何攻击SSH以找到有效的登录。我们将使用信息收集教程中生成的列表。
- en: Getting ready
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will make use of three tools, Hydra, Patator, and Ncrack
    for SSH password cracking. All of these are available in Kali Linux.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，我们将使用三个工具，Hydra、Patator和Ncrack来进行SSH密码破解。所有这些工具都可以在Kali Linux中找到。
- en: As stated in the Patator Wiki, Patator was written out of the frustration of
    using Hydra, Medusa, Ncrack, Metasploit modules, and Nmap NSE scripts for password-guessing
    attacks. The owner opted for a different approach in order to avoid creating yet
    another password cracking tool and repeating the same shortcomings. Patator is
    a multithreaded tool written in Python that strives to be more reliable and flexible
    than its predecessors.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 正如Patator Wiki中所述，Patator是出于对使用Hydra、Medusa、Ncrack、Metasploit模块和Nmap NSE脚本进行猜密码攻击的沮丧而编写的。所有者选择了不同的方法，以避免创建另一个密码破解工具并重复相同的缺点。Patator是一个用Python编写的多线程工具，旨在比其前身更可靠和灵活。
- en: 'A bit of information about Ncrack: Ncrack is a high-speed network-authentication
    cracking tool. Ncrack was designed using a modular approach, a command-line syntax
    similar to Nmap, and a dynamic engine that can adapt its behavior based on network
    feedback. It allows for rapid, yet reliable large-scale auditing of multiple hosts.
    It supports most well-known protocols.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Ncrack的一些信息：Ncrack是一个高速网络认证破解工具。Ncrack采用模块化方法设计，命令行语法类似于Nmap，并且可以根据网络反馈调整其行为的动态引擎。它允许对多个主机进行快速而可靠的大规模审计。它支持大多数知名协议。
- en: How to do it...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will use Hydra to crack the password for the SSH service on Stapler. Enter
    the following command in the terminal:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用Hydra来破解Stapler上SSH服务的密码。在终端中输入以下命令：
- en: '[PRE9]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截屏所示：
- en: '![How to do it...](img/image_04_017.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_04_017.jpg)'
- en: 'It can also be checked using Patator; enter the following command in the terminal:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 也可以使用Patator进行检查；在终端中输入以下命令：
- en: '[PRE10]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截屏所示：
- en: '![How to do it...](img/image_04_018.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_04_018.jpg)'
- en: Let us verify if the finding is true by logging in to SSH. We have successfully
    logged in as shown in the following screenshot:![How to do it...](img/image_04_019.jpg)
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们验证一下找到的登录是否正确。我们已经成功登录，如下截屏所示：![如何操作...](img/image_04_019.jpg)
- en: 'We can try this with the users obtained from Metasploitable 2; we will use
    the `ncrack` command to crack the password this time. Let us try to find a login
    for one of the account names, `sys`. Enter the following command in terminal to
    perform an SSH password cracking attack on the `sys` of our Metasploitable 2 machine:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以尝试使用从Metasploitable 2获得的用户；这次我们将使用`ncrack`命令来破解密码。让我们尝试找到`sys`账户的登录。在终端中输入以下命令，对我们的Metasploitable
    2机器上的`sys`执行SSH密码破解攻击：
- en: '[PRE11]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截屏所示：
- en: '![How to do it...](img/image_04_020.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_04_020.jpg)'
- en: As you can see, the password for the `sys` account has been found and login
    is successful:![How to do it...](img/image_04_021.jpg)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您所见，`sys`账户的密码已经被找到，登录成功：![如何操作...](img/image_04_021.jpg)
- en: How it works...
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'We have used the following commands:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了以下命令：
- en: '[PRE12]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Let us understand what these switches actually do.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解这些开关实际上是做什么的。
- en: 'As seen previously, the `-e` switch has three options, `n`, `s`, and `r`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`-e`开关有三个选项，`n`、`s`和`r`：
- en: '`n`: This option checks for null password'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n`：此选项检查空密码'
- en: '`s`: This uses the login name as password'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s`：这使用登录名作为密码'
- en: '`r`: This is the reverse of the login name as password'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r`：这是将登录名作为密码的反向'
- en: The `-L` check allows us to specify a file containing usernames. The `-t` switch
    stands for tasks; it runs number of connects in parallel. By default, the number
    is 16\. It is similar to the threading concept to obtain better performance by
    parallelization. The `-l` switch stands for a particular username, and the `-P`
    switch represents the file list to be read for attack.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`-L`检查允许我们指定包含用户名的文件。`-t`开关代表任务；它并行运行连接的数量。默认情况下，数量为16。这类似于线程概念，通过并行化获得更好的性能。`-l`开关代表特定的用户名，`-P`开关代表要读取的攻击文件列表。'
- en: 'Let us look at the Patator script:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看Patator脚本：
- en: '`ssh_login`: This is the attack vector for Patator'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ssh_login`：这是Patator的攻击向量'
- en: '`host=`: This represents the IP address/URL to be used'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host=`：这代表要使用的IP地址/URL'
- en: '`user=`: This is the username to be used for attack purposes'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user=`：这是用于攻击目的的用户名'
- en: '`password=`: This is the password file to be used for the brute-force attack'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password=`：这是用于暴力攻击的密码文件'
- en: 'Let us look at the Ncrack script:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看Ncrack脚本：
- en: '`-v`: This switch enables verbose mode'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-v`：这个开关启用详细模式'
- en: '`--user`: This switch enables us to provide the username'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--user`：这个开关使我们能够提供用户名'
- en: '`-P`: This is the switch to provide the password file'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-P`：这是提供密码文件的开关'
- en: There's more...
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are many switches available in Patator and Ncrack. We suggest you go through
    the different protocols and features and try them out on the vulnerable machines
    we have mentioned in the book. Alternatively, more information can be found at
    [https://www.vulnhub.com/](https://www.vulnhub.com/) .
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Patator和Ncrack中有许多开关。我们建议您研究不同的协议和功能，并在我们在书中提到的易受攻击的机器上尝试它们。或者，更多信息可以在[https://www.vulnhub.com/](https://www.vulnhub.com/)找到。
- en: Cracking HTTP logins using custom wordlist
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义字典破解HTTP登录
- en: We saw that Stapler had a web application running on port `12380`, with WordPress
    hosted. In this recipe, we are going to look at how to perform password-cracking
    attacks on the login panel of WordPress. The tool we will be using in this case
    is WPScan.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到Stapler在端口`12380`上运行了一个Web应用程序，其中托管了WordPress。在这个教程中，我们将学习如何对WordPress的登录面板执行密码破解攻击。在这种情况下，我们将使用的工具是WPScan。
- en: Getting ready
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: WPScan is a WordPress scanner. It has many functionalities, such as enumerating
    WordPress version, vulnerable plugins, listing available plugins, wordlist-based
    password cracking.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: WPScan是一个WordPress扫描器。它有许多功能，比如枚举WordPress版本、有漏洞的插件、列出可用的插件、基于字典的密码破解。
- en: How to do it...
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'We will first enumerate the available WordPress logins using the enumerate
    user script. Enter the following command in the terminal:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先使用枚举用户脚本枚举可用的WordPress登录。在终端中输入以下命令：
- en: '[PRE13]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截屏所示：
- en: '![How to do it...](img/image_04_022.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_04_022.jpg)'
- en: 'To start password cracking, we will provide the wordlist file from the available
    wordlist in Kali, for example, `rockyou.txt`. Enter the following command in terminal:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始破解密码，我们将从Kali中提供的可用字典中提供wordlist文件，例如`rockyou.txt`。在终端中输入以下命令：
- en: '[PRE14]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截屏所示：
- en: '![How to do it...](img/image_04_023.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_04_023.jpg)'
- en: 'Let''s check if the password is valid. Visit the login page:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们检查密码是否有效。访问登录页面：
- en: '[PRE15]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截屏所示：
- en: '![How to do it...](img/image_04_024.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_04_024.jpg)'
- en: How it works...
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let us understand the switches used in the preceding command:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解前面命令中使用的开关：
- en: '`-u`: This switch specifies the URL to be accessed'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-u`：此开关指定要访问的URL'
- en: '`--wordlist`: This switch specifies the dictionary or password list to be used
    for cracking'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--wordlist`：此开关指定要用于破解的字典或密码列表'
- en: '`--threads`: This switch specifies the number of threads to be loaded to achieve
    performance through parallel job executions'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--threads`：此开关指定要加载的线程数，以通过并行作业执行实现性能'
- en: There's more...
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: WPScan comes with quite a few functionalities. It allows the user to enumerate
    installed themes, plugins, users, timthumbs, and so on. It is always a good idea
    to use the other available commands in the WordPress installation to check how
    they function.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: WPScan具有相当多的功能。它允许用户枚举安装的主题、插件、用户、timthumbs等。在WordPress安装中使用其他可用命令来检查它们的功能总是一个好主意。
- en: Cracking MySql and PostgreSQL login using custom wordlist
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义字典破解MySql和PostgreSQL登录
- en: In this recipe, we will see how to gain access to the MySQL and Postgres databases.
    We will be using the Metasploitable 2 vulnerable server to perform the attacks.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将看到如何访问MySQL和Postgres数据库。我们将使用Metasploitable 2易受攻击的服务器来执行攻击。
- en: Getting ready
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this exercise, we will be using Metasploit as our module to perform the
    credential attack, since we have already seen how the other tools work in the
    previous recipes. Let's start the Metasploit console and start exploiting the
    SQL servers.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将使用Metasploit作为我们的模块来执行凭据攻击，因为我们已经在之前的教程中看到了其他工具的工作原理。让我们启动Metasploit控制台并开始利用SQL服务器。
- en: How to do it...
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Once you are on the Metasploit console, enter the following commands:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您进入Metasploit控制台，输入以下命令：
- en: '[PRE16]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截屏所示：
- en: '![How to do it...](img/image_04_025.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_04_025.jpg)'
- en: Once this is done, wait for the script to finish. In this case, since we have
    given a command to stop on success, once we find the right password it will stop
    execution of the script. The output will be as shown in the following screenshot:![How
    to do it...](img/image_04_026.jpg)
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，请等待脚本完成。在这种情况下，因为我们已经给出了一个停止成功的命令，一旦找到正确的密码，它将停止执行脚本。输出将如下截屏所示：![操作步骤...](img/image_04_026.jpg)
- en: 'Now let''s try and crack the Postgres credentials. Enter the following in the
    Metasploit terminal:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们尝试破解Postgres凭据。在Metasploit终端中输入以下内容：
- en: '[PRE17]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The scanner will initiate, and any successful attempt will be highlighted in
    green. Have a look at the following screenshot:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描器将启动，并且任何成功的尝试都将以绿色突出显示。请查看以下截屏：
- en: '![How to do it...](img/image_04_027.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_04_027.jpg)'
- en: How it works...
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We provide information to the Metasploit framework, including the wordlists
    path, the username, and other relevant information. Once done, we can run and
    cause the module to execute. Metasploit fires up the module and starts brute-forcing
    to find the right password (if available in the dictionary). Let''s understand
    a few of the commands:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向Metasploit框架提供信息，包括字典路径、用户名和其他相关信息。一旦完成，我们就可以运行并导致模块执行。Metasploit启动模块并开始暴力破解以找到正确的密码（如果在字典中可用）。让我们了解一些命令：
- en: '`use auxiliary/scanner/mysql/mysql_login`: In this command, we specify the
    `mysql` plugin that will provide the list of usernames'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use auxiliary/scanner/mysql/mysql_login`：在这个命令中，我们指定了将提供用户名列表的`mysql`插件'
- en: '`set stop_on_success true`: This basically sets the parameter to stop the script
    once a valid password is found'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set stop_on_success true`：这基本上设置了一旦找到有效密码就停止脚本的参数'
- en: '`set pass_file /usr/share/wordlists/rockyou.txt`: In this command, we specify
    the password file for the script to refer to for performing the attack'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set pass_file /usr/share/wordlists/rockyou.txt`：在这个命令中，我们指定了脚本要引用的密码文件，以执行攻击'
- en: If, at any point in time, you don't know what to do, you can issue the `show
    options` command in the Metasploit terminal. Once the `use (plugin)` command is
    set, it will provide the required and non-required parameters that will help execute
    the script.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在任何时候你不知道该做什么，你可以在Metasploit终端中发出`show options`命令。一旦设置了`use (plugin)`命令，它将提供执行脚本所需和非必需的参数。
- en: There's more...
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Metasploit is a framework of abundance. It is recommended to look at the other
    scanner modules and options provided for SQL-based server cracking.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit是一个丰富的框架。建议查看其他扫描器模块和为基于SQL的服务器破解提供的选项。
- en: Cracking Cisco login using custom wordlist
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义单词表破解思科登录
- en: In this recipe we will see how we to gain access to Cisco devices, we will be
    using tools available in Kali. We will be using a tool called as CAT to perform
    the activity. **CAT** stands for **Cisco audit tool**. It is a Perl script which
    scans Cisco routers for common vulnerabilities.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将看到如何访问思科设备，我们将使用Kali中可用的工具。我们将使用一个名为CAT的工具来执行这个活动。CAT代表思科审计工具。这是一个Perl脚本，用于扫描思科路由器的常见漏洞。
- en: Getting ready
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this exercise we have setup a Cisco device with a simple password to demonstrate
    the activity. We do not require any external tools as everything is available
    in Kali itself.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行这个练习，我们已经设置了一个带有简单密码的思科设备，以演示这个活动。我们不需要任何外部工具，因为一切都在Kali中可用。
- en: How to do it...
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: We have set up a Cisco router on `192.168.1.88`. As mentioned we will use `CAT`:![How
    to do it...](img/image_04_032.jpg)
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在`192.168.1.88`上设置了一个思科路由器。如前所述，我们将使用`CAT`：![如何做...](img/image_04_032.jpg)
- en: We have used a custom wordlist for username and password, which contain the
    following details:![How to do it...](img/image_04_033.jpg)
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用了一个自定义的用户名和密码单词表，其中包含以下详细信息：![如何做...](img/image_04_033.jpg)
- en: 'Once you are on the Metasploit console, enter the following commands:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你进入Metasploit控制台，输入以下命令：
- en: '[PRE18]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_04_034.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_04_034.jpg)'
- en: As you can see, it attacks the service to check for valid credentials and fetches
    with the valid password if it is found in the wordlist.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如你所看到的，它攻击服务以检查有效凭据，并且如果在单词列表中找到有效密码，则获取它。
- en: How it works...
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'We have used the following commands:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了以下命令：
- en: '`-h` : This command tells the script the host IP of the device'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-h`：这个命令告诉脚本设备的主机IP'
- en: '`-w` : This command tells the script the user list to be used for the attack'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-w`：这个命令告诉脚本要使用的用户列表来进行攻击'
- en: '`-a`: This command tells the script the password list to be used for the attack'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-a`：这个命令告诉脚本要使用的密码列表来进行攻击'
- en: There's more...
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are additional features like `-i` , `-l`, and `-q`, which the reader can
    take up as exercises for this recipe for Cisco devices.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他功能，比如`-i`，`-l`和`-q`，读者可以将其作为这个教程的练习来应用到思科设备上。
- en: Exploiting vulnerable services (Unix)
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用易受攻击的服务（Unix）
- en: In this recipe, we will exploit the vulnerabilities at the network level. These
    vulnerabilities are software-level vulnerabilities. When we talk about software,
    we are explicitly speaking about software/packages that make use of networks/ports
    to function. For example, FTP server, SSH server, HTTP, and so on. This recipe
    will cover a few vulnerabilities of two flavors, Unix and Windows. Let's start
    with UNIX exploitation.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将利用网络层的漏洞。这些漏洞是软件级别的漏洞。当我们谈论软件时，我们明确指的是使用网络/端口来运行的软件/包。例如，FTP服务器，SSH服务器，HTTP等。这个教程将涵盖两种风格的一些漏洞，Unix和Windows。让我们从UNIX利用开始。
- en: Getting ready
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will make use of Metasploit in this module; make sure you start PostgreSQL
    before initializing Metasploit. We will quickly recap the vulnerabilities we found
    in Metasploitable2 when we performed the vulnerability scan:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这个模块中使用Metasploit；确保在初始化Metasploit之前启动PostgreSQL。我们将快速回顾一下我们在执行漏洞扫描时在Metasploitable2中发现的漏洞：
- en: Note
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The IP is different as the author has changed the VLAN of the internal network.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: IP不同，因为作者已经更改了内部网络的VLAN。
- en: 'The vulnerability scan output would look like this:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞扫描输出将如下所示：
- en: '![Getting ready](img/image_04_028.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/image_04_028.jpg)'
- en: A prerequisite to this recipe is to know your IP address, since it will be used
    to set the Lhost in Metasploit. Let us take a few of the vulnerabilities from
    here to understand how the exploitation of vulnerable services occurs.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程的先决条件是要知道你的IP地址，因为它将用于在Metasploit中设置Lhost。让我们从这里选取一些漏洞，以了解易受攻击服务的利用是如何发生的。
- en: How to do it...
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Start PostgreSQL and then fire up `msfconsole`:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动PostgreSQL，然后启动`msfconsole`：
- en: '[PRE19]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_04_029.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_04_029.jpg)'
- en: 'We will exploit the `vsftpd` vulnerability. Enter the following in the terminal
    where `msfconsole` is running:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将利用`vsftpd`漏洞。在运行`msfconsole`的终端中输入以下内容：
- en: '[PRE20]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_04_030.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_04_030.jpg)'
- en: 'The exploit ran successfully and we got to the root of the system. Let us check
    out an other vulnerability from the vulnerability-assessment scan we did for Metasploitable
    2\. Enter the following commands in terminal:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 利用成功运行，并且我们已经进入了系统的根目录。让我们来看看我们在对Metasploitable 2进行漏洞评估扫描时发现的另一个漏洞。在终端中输入以下命令：
- en: '[PRE21]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_04_031.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_04_031.jpg)'
- en: How it works...
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Metasploit is a framework that provides a lot of facilities, from enumeration,
    and exploitation, to helping with exploit writing. What we saw above is a sample
    of Metasploit exploitation. Let us understand what happened in the preceding scenario
    of `vsftpd`:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit是一个提供了很多功能的框架，从枚举、利用到帮助编写利用。我们上面看到的是Metasploit利用的一个示例。让我们了解一下在前面的`vsftpd`场景中发生了什么：
- en: '`search vsftpd`: This searches the Metasploit database for any information
    related to `vsftpd`'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索vsftpd：这将在Metasploit数据库中搜索与`vsftpd`相关的任何信息
- en: '`use (exploit)`: This specifies the exploit we want to prepare to execute'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use (exploit)`: 这指定了我们想要准备执行的利用'
- en: '`set lhost`: This sets the local host IP of our machine to get a reverse shell'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set lhost`: 这将设置我们机器的本地主机IP以获取一个反向shell'
- en: '`set rhost`: This sets the target IP to launch the exploit'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set rhost`: 这将设置目标IP以启动利用'
- en: '`set payload (payload path)`: This specifies what we want to do once the exploitation
    has been completed successfully'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set payload (payload path)`: 这指定了在成功完成利用后我们想要执行的操作'
- en: There's more...
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Metasploit also comes with a GUI version in the community edition. It would
    be a good idea to check that out. A detailed guide to using Metasploit can be
    found at [https://www.offensive-security.com/metasploit-unleashed/](https://www.offensive-security.com/metasploit-unleashed/)
    .
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit还提供了社区版的图形界面版本。建议查看一下。可以在[https://www.offensive-security.com/metasploit-unleashed/](https://www.offensive-security.com/metasploit-unleashed/)找到使用Metasploit的详细指南。
- en: Exploiting vulnerable services (Windows)
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用有漏洞的服务（Windows）
- en: In this recipe, we will exploit vulnerable services in Windows. To understand
    this section, we have a Windows 7 system with some vulnerable software running.
    We will do a quick enumeration, find vulnerabilities, and exploit them using Metasploit.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个步骤中，我们将利用Windows中的有漏洞服务。为了理解这一部分，我们有一个运行着一些有漏洞软件的Windows 7系统。我们将进行快速枚举，找到漏洞，并使用Metasploit进行利用。
- en: Getting ready
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to start exploiting, we will need the vulnerable Windows OS. Get the
    IP of that machine. Apart from this, we will have to initialize the Metasploit
    framework in the **CLI** (**command-line interface**). We are good to go.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始利用，我们需要一个有漏洞的Windows操作系统。获取该机器的IP。除此之外，我们还需要在**CLI**（**命令行界面**）中初始化Metasploit框架。我们已经准备就绪。
- en: How to do it...
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Once the Windows 7 image has been downloaded, run an `nmap` scan to find the
    available services. Run the following command in the terminal:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦Windows 7镜像被下载，运行一个`nmap`扫描以找到可用的服务。在终端中运行以下命令：
- en: '[PRE22]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截屏所示：
- en: '![How to do it...](img/image_04_035.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_04_035.jpg)'
- en: As you can see, there are three interesting bits of software running on the
    remote machine; they are, `Konica Minolta FTP Utility ftpd 1.00`, `Easy File Sharing
    HTTP Server 6.9` and the service running on `16101` and `16102`. Checking in Google,
    it can be found that it is running `Blue Coat Authentication and Authorization
    Agent`. We check `exploit-db` to check if any of them are vulnerable:![How to
    do it...](img/image_04_036.jpg)
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如你所见，远程机器上运行着三个有趣的软件；它们是`Konica Minolta FTP Utility ftpd 1.00`、`Easy File Sharing
    HTTP Server 6.9`以及运行在`16101`和`16102`端口上的服务。通过在Google上查找，可以发现它正在运行`Blue Coat身份验证和授权代理`。我们检查`exploit-db`以查看它们中是否有任何一个有漏洞：![如何操作...](img/image_04_036.jpg)
- en: 'Konica Minolta FTP is vulnerable:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: Konica Minolta FTP有漏洞：
- en: '![How to do it...](img/image_04_037.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_04_037.jpg)'
- en: 'Blue Coat Authentication and Authorization Agent (BCAAA) is vulnerable:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: Blue Coat身份验证和授权代理（BCAAA）有漏洞：
- en: '![How to do it...](img/image_04_038.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_04_038.jpg)'
- en: Easy File Sharing HTTP Server 7.2 is vulnerable as well. Let's check if they
    can be exploited.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: Easy File Sharing HTTP Server 7.2也有漏洞。让我们看看它们是否可以被利用。
- en: 'We will first test the FTP. Begin by entering the following commands in the
    Metasploit console:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先测试FTP。在Metasploit控制台中输入以下命令开始：
- en: '[PRE23]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截屏所示：
- en: '![How to do it...](img/image_04_039.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_04_039.jpg)'
- en: 'We successfully got a shell. Now let us test for the Easy File Sharing HTTP
    Server. Enter the following commands in the Metasploit terminal:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们成功地得到了一个shell。现在让我们测试Easy File Sharing HTTP Server。在Metasploit终端中输入以下命令：
- en: '[PRE24]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截屏所示：
- en: '![How to do it...](img/image_04_040.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_04_040.jpg)'
- en: 'We successfully pulled off this one as well: we got a shell. Now, let''s check
    the last piece of software, the Blue Coat Authentication and Authorization Agent,
    to see if it is vulnerable to exploitation. Enter the following commands in the
    Metasploit terminal:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们也成功地完成了这个：我们得到了一个shell。现在，让我们检查最后一个软件，Blue Coat身份验证和授权代理，看看它是否容易受到利用。在Metasploit终端中输入以下命令：
- en: '[PRE25]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截屏所示：
- en: '![How to do it...](img/image_04_041.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_04_041.jpg)'
- en: We have successfully managed to exploit all three vulnerabilities. This completes
    this recipe.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功利用了所有三个漏洞。这完成了这个步骤。
- en: How it works...
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We have seen previously how Metasploit can be used for exploitation. There are
    no new commands used apart from the one we saw and used in the previous recipes.
    The only difference is calling the `use` function to load the given vulnerability.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经看到了Metasploit如何用于利用。除了我们在之前的步骤中看到和使用的命令之外，没有使用新的命令。唯一的区别是调用`use`函数来加载给定的漏洞。
- en: The `set payload windows/shell_bind_tcp` command is a single payload with no
    stages involved. On successful exploitation, it opens a port, with a shell on
    it waiting for a connection. Once we send the exploit, Metasploit accesses the
    open port and, voilà, we have a shell.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`set payload windows/shell_bind_tcp`命令是一个单一的载荷，没有涉及到多个阶段。在成功利用后，它会打开一个端口，等待连接的shell。一旦我们发送了利用，Metasploit就会访问打开的端口，然后我们就有了一个shell。'
- en: There's more...
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are various other ways to get into the system; it's important to make
    sure that proper information gathering is done before we begin exploitation. With
    this, we complete our network exploitation. In the next chapter, we will discuss
    post exploitation.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种其他方法可以进入系统；在我们开始利用之前，确保进行适当的信息收集非常重要。有了这个，我们完成了我们的网络利用。在下一章中，我们将讨论后期利用。
- en: Exploiting services using exploit-db scripts
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用exploit-db脚本来利用服务
- en: In this recipe we are going to exploit the Windows SMB service `ms08_067` using
    exploit code outside the Metasploit framework. A pentester often relies on Metasploit
    for his\her pentesting activities, however it is important to understand that
    these are custom scripts that are run and take a dynamic input of remote host
    port to connect to and so on. In this recipe, we will see how to tweak a vulnerability
    script to match our target and exploit it successfully.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个步骤中，我们将利用Windows SMB服务`ms08_067`，使用Metasploit框架之外的利用代码。渗透测试人员经常依赖Metasploit进行他们的渗透测试活动，然而，重要的是要理解这些是运行的自定义脚本，并且接受远程主机端口等动态输入。在这个步骤中，我们将看到如何调整漏洞脚本以匹配我们的目标并成功利用它。
- en: Getting ready
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will need to use the vulnerable windows machine we have
    been testing, and the rest of the tools and scripts that are available in the
    Kali machine itself.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个步骤，我们需要使用我们一直在测试的易受攻击的Windows机器，以及Kali机器本身提供的其余工具和脚本。
- en: How to do it...
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let us first see how to use `searchsploit` to search for `ms08-067` vulnerability
    in the `exploit-db` database, using the following command:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先让我们看看如何使用`searchsploit`在`exploit-db`数据库中搜索`ms08-067`漏洞，使用以下命令：
- en: '[PRE26]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_04_042.jpg)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_04_042.jpg)'
- en: We can see that a Python script is available called "Microsoft Windows - 'NetAPI32.dll'
    Code Execution (Python) (MS08-067)". We now read the content of the Python file,
    the path to the file is `/usr/share/exploitdb/platforms/ windows/remote/40279.py`.
    Make a copy of the same on the desktop.![How to do it...](img/image_04_043.jpg)
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以看到有一个名为“Microsoft Windows - 'NetAPI32.dll' Code Execution (Python) (MS08-067)”的Python脚本可用。现在我们读取Python文件的内容，文件路径是`/usr/share/exploitdb/platforms/windows/remote/40279.py`。在桌面上复制一份相同的文件。![如何做...](img/image_04_043.jpg)
- en: On reading the file, it was found that the script was making use of a custom
    payload that connects to a different IP and port and not ours:![How to do it...](img/image_04_044.jpg)
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在阅读文件时，发现脚本使用了一个连接到不同IP和端口的自定义有效载荷：![如何做...](img/image_04_044.jpg)
- en: 'So we will have to first edit the code and point the payload that we want to
    execute to our IP address and port. In order to do so we will have to make use
    of `msfvenom` to create our payload so that we can get this script to execute.
    Enter the following command on the Kali terminal to create a Python shell code
    for reverse connection to the Kali IP:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所以我们必须首先编辑代码，并将我们想要执行的有效载荷指向我们的IP地址和端口。为了做到这一点，我们将使用`msfvenom`创建我们的有效载荷，以便我们可以让这个脚本执行。在Kali终端上输入以下命令，为Kali
    IP创建一个用于反向连接的Python shell代码：
- en: '[PRE27]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_04_045.jpg)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_04_045.jpg)'
- en: Please note the payload created is 380 bytes. Copy the entire "buf" line that
    is generated and paste it in a file, rename the word `buf` with `shellcode`, since
    the script we are using makes use of the word `shellcode` for payload delivery.
    The text file would look like this:![How to do it...](img/image_04_046.jpg)
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，生成的有效载荷为380字节。复制生成的整个“buf”行，并将其粘贴到一个文件中，将单词`buf`重命名为`shellcode`，因为我们使用的脚本使用单词`shellcode`进行有效载荷传递。文本文件看起来像这样：![如何做...](img/image_04_046.jpg)
- en: Note we have removed the first line, `buf = ""`.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意我们已经删除了第一行，`buf = ""`。
- en: 'Now we need to be very careful from here onwards: in the Python script it was
    mentioned that their payload size was 380 bytes and the remaining had been filled
    with nops to adjust the delivery. We have to ensure the same, so that if there
    are 10 nops and 380 bytes of code we assume there is 390 bytes delivery, so if
    our shell code generated is 385 bytes, we will add only 5 nops to keep our buffer
    constant. In the present scenario the new payload size is also 380 so we need
    not fiddle with the NOP. Now we will replace the original shell code with the
    one we have created. So replace the following highlighted text with the new shell
    code that is generated:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要非常小心：在Python脚本中提到他们的有效载荷大小为380字节，其余部分已填充nops以调整传递。我们必须确保相同，所以如果有10个nops和380字节的代码，我们假设有390字节的传递，所以如果我们生成的shell代码是385字节，我们只会添加5个nops以保持我们的缓冲区恒定。在目前的情况下，新的有效载荷大小也是380，所以我们不需要处理NOP。现在我们将用我们创建的新shell代码替换原始shell代码。因此，用新生成的shell代码替换以下突出显示的文本：
- en: '![How to do it...](img/image_04_047.jpg)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_04_047.jpg)'
- en: Note that we have replaced the entire shell code post the `/x90` NOP code.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们已经在`/x90` NOP代码之后替换了整个shell代码。
- en: 'Once the code is replaced, save and close the file. Start Metasploit and enter
    the following command to initiate a listener on the Kali machine on port `443`
    as mentioned when we created our payload:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦代码被替换，保存并关闭文件。启动Metasploit，并输入以下命令，在Kali机器上的端口`443`上启动监听器，就像我们创建有效载荷时提到的那样：
- en: '[PRE28]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_04_048.jpg)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_04_048.jpg)'
- en: 'Now, once our handler is up, we will execute the Python script and mention
    the target IP address and operating system. Go to the desktop where the edited
    file has been copied and execute the Python file. As it is stored in the desktop,
    the following command is executed:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，一旦我们的处理程序启动，我们将执行Python脚本，并提到目标IP地址和操作系统。转到已编辑文件被复制的桌面，并执行Python文件。由于它存储在桌面上，执行以下命令：
- en: '[PRE29]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_04_049.jpg)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_04_049.jpg)'
- en: Once the script has executed come back to the listener and see if the connection
    has been received:![How to do it...](img/image_04_050.jpg)
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦脚本执行完毕，请返回监听器，查看是否已收到连接：![操作步骤...](img/image_04_050.jpg)
- en: Awesome, we have got a remote shell by using scripts available on `exploit-db`.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了，我们使用 `exploit-db` 上可用的脚本获得了远程 shell。
- en: How it works...
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'The majority of this has been explained in the walkthrough itself. The new
    tool introduced here is `msfvenom`. The following is the explanation of the parameters
    used:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 其中大部分已在步行说明中解释。这里介绍的新工具是 `msfvenom`。以下是所使用参数的解释：
- en: '[PRE30]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '`-p`: This is the payload that needs to be created.'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-p`：这是需要创建的 payload。'
- en: '`LHOST`: The host, in which the machine is supposed to connect to post exploitation.'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LHOST`：主机，机器应连接到以进行利用。'
- en: '`LPORT`: The port the machine is supposed to connect to pose exploitation.'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LPORT`：机器应连接到的端口以进行利用。'
- en: '`-b`: This stands for bad characters. It tells the script to avoid the use
    of the mentioned characters in the generation of the shell code.'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-b`：这代表坏字符。它告诉脚本在生成 shell code 时避免使用所述字符。'
- en: '`-f`: This states the format that the shell code is to be created in.'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-f`：这说明了要创建的 shell code 的格式。'
- en: '`-a`: This states the architecture of the target machine where the exploit
    is going to be executed.'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-a`：这说明了目标机器的架构，利用将在其上执行。'
- en: There's more...
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This is a very basic level of understanding how scripts are edited for execution
    for our requirement. This activity has been done to introduce the reader to the
    concept of shell code replacement. There are plenty of scripts related to various
    exploits on `exploit-db`.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是对如何编辑脚本以满足我们需求进行执行的基本理解。此活动旨在向读者介绍 shell code 替换的概念。`exploit-db` 上有许多与各种利用相关的脚本。
