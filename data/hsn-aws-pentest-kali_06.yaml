- en: Setting Up Your First EC2 Instances
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置您的第一个EC2实例
- en: The most popular and central component of AWS is the** Elastic Compute Cloud** (**EC2**). The
    EC2 provides on-demand scalable computing infrastructure to developers through
    virtual machines. This means that a developer can spin up a virtual machine with
    customized specs in a choice of geographical locations to run their application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: AWS最受欢迎和核心的组件是**弹性计算云**（**EC2**）。EC2通过虚拟机为开发人员提供按需可扩展的计算基础设施。这意味着开发人员可以在选择的地理位置中启动具有自定义规格的虚拟机来运行他们的应用程序。
- en: The service is **elastic**, meaning a developer has the option to scale up or
    down their infrastructure as required for operations and pay by the minute for
    active servers only. The developer can set the geographical location to reduce
    latency and achieve a high level of redundancy.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 该服务是**弹性**的，这意味着开发人员可以根据操作的需要选择扩展或缩减他们的基础设施，并仅按分钟支付活动服务器。开发人员可以设置地理位置以减少延迟并实现高度冗余。
- en: This chapter focuses on creating an Amazon EC2 instance, setting up a VPC around
    the instance, and configuring the firewall to restrict remote access to this VPC.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍创建Amazon EC2实例，围绕实例设置VPC，并配置防火墙以限制对该VPC的远程访问。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: How to run setup customized EC2 instances with the available AMI
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用可用的AMI设置定制的EC2实例
- en: Storage types that are used for EC2 instances
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于EC2实例的存储类型
- en: Firewall and VPC configuration
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防火墙和VPC配置
- en: Authentication mechanism
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证机制
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, we are going to use the following tools:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用以下工具：
- en: AWS EC2 instance
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS EC2实例
- en: Ubuntu Linux AMI
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu Linux AMI
- en: SSH client and a browser
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSH客户端和浏览器
- en: Setting Up Ubuntu on AWS EC2
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWS EC2上设置Ubuntu
- en: In this section, we will go through setting up an EC2 instance on the cloud
    running an Ubuntu AMI and look at the various settings that we can customize according
    to our requirements.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍如何在云上运行Ubuntu AMI的EC2实例，并查看我们可以根据需求自定义的各种设置。
- en: The Ubuntu AMI
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ubuntu AMI
- en: 'As we have seen in the previous chapters, setting up an EC2 instance can be
    pretty easy and accomplished quickly with a few mouse clicks. AWS Marketplace
    has a number of AMIs that are available ready-made for deployment. The AWS Marketplace
    also offers a range of AMIs from vendors such as SAP, Zend, and Microsoft, as
    well as open source ones, customized for mission-critical projects, such as DevOps
    and NAS:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在之前的章节中所看到的，设置EC2实例可以非常简单且可以通过几次鼠标点击快速完成。AWS市场提供了许多准备好部署的AMI。AWS市场还提供了一系列来自供应商如SAP、Zend和Microsoft以及开源的AMI，专为使命关键的项目（如DevOps和NAS）定制的AMI：
- en: 'We will begin by searching for the Ubuntu Linux AMI in the AWS Marketplace:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从AWS市场中搜索Ubuntu Linux AMI：
- en: '![](img/2b641e4f-b331-4b2c-b01f-21f93fea7bc8.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b641e4f-b331-4b2c-b01f-21f93fea7bc8.png)'
- en: We will use the latest Ubuntu AMI available at the time of writing, Ubuntu 18.04
    LTS - Bionic.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用撰写时可用的最新Ubuntu AMI，Ubuntu 18.04 LTS - Bionic。
- en: 'The preceding screenshot shows the following information:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图显示了以下信息：
- en: The version of the AMI that we are using (18.04 LTS)
  id: totrans-22
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在使用的AMI的版本（18.04 LTS）
- en: Instance types available for Ubuntu, along with the per-hour pricing for each
    instance
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu可用的实例类型，以及每个实例的每小时定价
- en: An overview and details of the AMI
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AMI的概述和详细信息
- en: 'On the next page, we select the instance type for our AMI:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一页中，我们为我们的AMI选择实例类型：
- en: '![](img/02997ebc-afda-4003-84cf-5ce67972e012.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/02997ebc-afda-4003-84cf-5ce67972e012.png)'
- en: Selecting the instance type
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 选择实例类型
- en: AWS has a free tier eligible instance for Ubuntu called t2.micro that runs on
    1 vCPU and 1 GB of memory, which is sufficient for this tutorial. Ensure that t2.microhas
    been selected and click on Next.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS为Ubuntu提供了一个免费的t2.micro实例，该实例运行在1个vCPU和1GB内存上，这对于本教程来说是足够的。确保选择了t2.micro并点击下一步。
- en: We have configured the RAM and the CPU of our EC2 instance. In the following
    section, we'll learn about configuring its network and VPC settings.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经配置了EC2实例的RAM和CPU。在接下来的部分，我们将学习如何配置其网络和VPC设置。
- en: Configuring VPC settings
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置VPC设置
- en: In the previous section, we configured the RAM and CPU of our EC2 instance.
    In this section, we will learn how to create a new VPC and Subnet for our EC2
    instance.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们配置了EC2实例的RAM和CPU。在本节中，我们将学习如何为我们的EC2实例创建新的VPC和子网。
- en: 'Once we have selected t2.micro as our instance type, we are presented with
    the Configure Instance Details page:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们选择了t2.micro作为我们的实例类型，我们就会看到配置实例详细信息页面：
- en: '![](img/4e846158-fbee-4202-aaee-b694ef9a35d7.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e846158-fbee-4202-aaee-b694ef9a35d7.png)'
- en: 'In this section, we will see how we can configure the following options:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何配置以下选项：
- en: '**Number of Instances**:This is left for the reader to decide how many instances
    are to be launched. For this chapter, we are launching one instance only.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实例数量**：这取决于读者决定启动多少个实例。在本章中，我们只启动一个实例。'
- en: '**Network**:We will take a look at how to create a new VPC for our EC2 resources.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络**：我们将看一下如何为我们的EC2资源创建新的VPC。'
- en: '**Subnet**: We will look at separating our EC2 resources into different subnets
    within a VPC.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**子网**：我们将把我们的EC2资源分隔到VPC中的不同子网中。'
- en: '**Auto-assign Public IP**: We will enable this so that we can access it from
    our machine.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动分配公共IP**：我们将启用此功能，以便我们可以从我们的机器访问它。'
- en: 'Let''s start by creating a VPC:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建VPC开始：
- en: 'By clicking on the Create new VPC link, we are taken to the VPC Dashboard,
    where we can see existing VPCs and create new ones:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击创建新VPC链接，我们被带到VPC仪表板，我们可以看到现有的VPC并创建新的VPC：
- en: '![](img/3f1f801e-982a-474d-88d3-920a554925cd.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f1f801e-982a-474d-88d3-920a554925cd.png)'
- en: Click on Create VPC and name it `New VPC`.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建VPC并命名为`New VPC`。
- en: We already have a VPC network with IPv4 block `172.31.0.0/16`. Let's proceed
    and create a new VPC with IPv4 block `10.0.0.0/16`. As is mentioned in the dialogue
    box that appears, our IPv4 CIDR block size can only be between `/16` and `/28`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有一个IPv4块为`172.31.0.0/16`的VPC网络。让我们继续创建一个IPv4块为`10.0.0.0/16`的新VPC。正如对话框中所提到的，我们的IPv4
    CIDR块大小只能在`/16`和`/28`之间。
- en: 'Hit Yes, Create, and your VPC will be created within seconds:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击是，创建，您的VPC将在几秒钟内创建：
- en: '![](img/107d74c9-96e4-4156-8627-f701fc026ff4.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/107d74c9-96e4-4156-8627-f701fc026ff4.png)'
- en: To launch our EC2 instance in this VPC, we will have to create a subnet. Let's
    go to the Subnets section and create a subnet within our new VPC.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要在此VPC中启动我们的EC2实例，我们将不得不创建一个子网。让我们转到子网部分，并在我们的新VPC中创建一个子网。
- en: 'Click on Create subnet and give it a name, `New Subnet`. We''ll select the
    VPC we created. Upon selecting `New VPC`, the VPC CIDR block is shown in the display:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击创建子网并给它一个名称，`新子网`。我们将选择我们创建的VPC。选择`新VPC`后，VPC CIDR块将显示在显示中：
- en: '![](img/b6db1cb6-1147-4cf2-bb02-211dbbff2631.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b6db1cb6-1147-4cf2-bb02-211dbbff2631.png)'
- en: The user can choose any availability zone from those provided. However, we are
    keeping it as No Preference.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以从提供的可用区中选择任何可用区。但是，我们将其保持为无偏好。
- en: We are creating our subnet with the IPv4 CIDR block `10.0.1.0/24`, which means
    it will give us a range of IPs from `10.0.1.1` to `10.0.1.254`. However, we only
    have 251 IP addresses that can be used. This is because the `10.0.1.1` is reserved
    for the gateway of the subnet, `10.0.1.2` is reserved for AWS DNS, and `10.0.1.3`
    is reserved for any future use by AWS.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用IPv4 CIDR块`10.0.1.0/24`创建子网，这意味着它将为我们提供IP范围从`10.0.1.1`到`10.0.1.254`。但是，我们只有251个可用的IP地址。这是因为`10.0.1.1`保留给子网的网关，`10.0.1.2`保留给AWS
    DNS，`10.0.1.3`保留给AWS的任何未来使用。
- en: 'Once this is done, we select our VPC as our new VPC and select subnet | New
    Subnet. This is what your screen should look like:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，我们选择我们的VPC作为新的VPC，并选择子网|新子网。您的屏幕应该是这样的：
- en: '![](img/54799c48-c353-4253-8405-571b3c98609a.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/54799c48-c353-4253-8405-571b3c98609a.png)'
- en: '6\. Let''s continue and add storage:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 6. 让我们继续添加存储：
- en: '![](img/b429e61a-536e-4668-81c6-af373e18c9b5.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b429e61a-536e-4668-81c6-af373e18c9b5.png)'
- en: As we can see, each EC2 instance, while being launched, receives a root storage
    device by default. Each EC2 instance gets a default root storage by default. This
    is to house the OS files for the instance to launch. Other than that, we can add
    additional storage to the EC2 instance if required.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，每个EC2实例在启动时默认接收一个根存储设备。每个EC2实例默认获得一个默认的根存储。这是为了存放实例启动的操作系统文件。除此之外，如果需要，我们可以向EC2实例添加额外的存储。
- en: Storage types that are used in EC2 instances
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在EC2实例中使用的存储类型
- en: 'Amazon offers the following storage types for an EC2 instance:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊为EC2实例提供以下存储类型：
- en: '**Elastic Block Storage (EBS)**: High-speed storage volumes offered by AWS.
    These are typical storage volumes that are available in either HDD or SSD technology.
    These are raw and unformatted, and can be attached to any EC2 instance, like mounting
    a hard disk drive in real life. The volumes need to be formatted before use. Once
    they are set up, they can be attached, mounted, or unmounted to any EC2 instance.
    These volumes are fast, and are best suited to high-speed and frequent data writes
    and reads. These volumes can be set to persist once the EC2 instance has been
    destroyed. Alternatively, you can create a snapshot of an EBS volume and recover
    data from a snapshot.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹性块存储（EBS）**：AWS提供的高速存储卷。这些是典型的存储卷，可用于HDD或SSD技术。这些是原始和未格式化的，可以附加到任何EC2实例，就像在现实生活中安装硬盘驱动器一样。这些卷需要在使用之前进行格式化。设置好后，可以将其附加、挂载或卸载到任何EC2实例。这些卷速度快，最适合高速和频繁的数据写入和读取。这些卷可以在EC2实例被销毁后设置为持久。或者，您可以创建EBS卷的快照并从快照中恢复数据。'
- en: '**Amazon EC Instance Store**: Instance store storage volumes are physically
    attached to the host computer where the EC2 instance is hosted and are used for
    storing data temporarily. In other words, once the EC2 instance it is attached
    to has been terminated, the instance store volume is lost as well.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**亚马逊EC实例存储**：实例存储存储卷物理附加到托管EC2实例的主机计算机上，用于临时存储数据。换句话说，一旦附加到的EC2实例被终止，实例存储卷也会丢失。'
- en: '**Amazon EFS Filesystem**: **Elastic FileSystem** (**EFS**) can only be used
    with a Linux-based EC2 instance for scalable file storage. Scalable storage implies
    that the filesystem can be scaled up or shrunk massively based on the use case.
    Applications running on multiple instances can use an EFS as their common data
    source, which means the EFS can be used simultaneously by multiple EC2 instances.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**亚马逊EFS文件系统**：**弹性文件系统**（EFS）只能与基于Linux的EC2实例一起使用，用于可伸缩的文件存储。可伸缩存储意味着文件系统可以根据用例进行大规模扩展或收缩。在多个实例上运行的应用程序可以使用EFS作为它们的共同数据源，这意味着EFS可以同时被多个EC2实例使用。'
- en: '**Amazon S3**: Amazon S3 is one of the flagship services for AWS that is used
    for storing data on the cloud. It is highly scalable and enables us to store and
    retrieve any amount of data, at any time. Amazon EC2 uses Amazon S3 to store EBS
    snapshots and instance store-backed AMIs.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**亚马逊S3**：Amazon S3是AWS的旗舰服务之一，用于在云上存储数据。它具有高度可伸缩性，并使我们能够随时存储和检索任意数量的数据。Amazon
    EC2使用Amazon S3存储EBS快照和实例存储支持的AMI。'
- en: 'We have an 8 GB root volume for our EC2 instance by default. For this activity,
    let''s add an additional EBS volume to the EC2 instance:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们默认有一个8GB的根卷卷。在此活动中，让我们向EC2实例添加一个额外的EBS卷：
- en: '![](img/18034803-77fd-4841-a650-6d8366f3e799.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/18034803-77fd-4841-a650-6d8366f3e799.png)'
- en: 'We can see that within EBS, there are five different volume types that we can
    use with varying **input/output operations per second** (**IOPS**):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在EBS中，我们可以看到有五种不同的卷类型，可以使用不同的**每秒输入/输出操作**（**IOPS**）：
- en: '**General purpose SSD (GP2) volumes**: A cost-effective storage solution suited
    mostly for general purpose use across a wide range of workloads. This volume can
    sustain 3,000 IOPS for an extended period of time, with a minimum of 100 IOPS
    and a maximum of 10,000 IOPS. GP2 volumes provide a very low level of latency
    and can be scaled at 3 IOPS per GB. A GP2 volume can be allocated between 1 GB
    and 16 TB of space.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通用用途SSD（GP2）卷**：这是一个成本效益的存储解决方案，主要适用于各种工作负载。该卷可以在较长时间内维持3,000 IOPS，最小为100
    IOPS，最大为10,000 IOPS。GP2卷提供非常低的延迟，并且可以以每GB 3 IOPS的速度扩展。GP2卷可以分配1GB到16TB的空间。'
- en: '**Provisioned IOPS SSD (IO1) volumes**: These are much faster and provide much
    higher performance than the GP2 volumes. IO1 volumes can sustain between 100 and
    32,000 IOPS, which is more than three times as much as GP2\. This type of storage
    is designed for I/O intensive operations such as databases. AWS also allows you
    to specify a rate of IOPS when creating an IO1 volume that AWS can deliver consistently.
    IO1 volumes can be provisioned between a minimum of 4 GB and a maximum of 16 TB.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预留 IOPS SSD（IO1）卷**：这些比GP2卷快得多，性能也比较高。IO1卷可以维持100到32,000 IOPS之间的性能，这比GP2高出三倍多。这种存储类型专为数据库等I/O密集型操作而设计。AWS还允许您在创建IO1卷时指定IOPS速率，AWS可以持续提供。IO1卷的预留容量在最小4GB和最大16TB之间。'
- en: '**Throughput Optimized HDD (ST1)**: ST1 is a low-cost storage solution based
    on magnetic storage disks instead of SSD. These cannot be used as a bootable volume,
    and instead are best suited to store frequently accessed data, such as log processing
    and data warehousing. These volumes can only range from a minimum of 1 GB to a
    maximum of 1 TB.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**吞吐量优化HDD（ST1）**：ST1是基于磁存储盘而不是SSD的低成本存储解决方案。这些不能用作可引导卷，而是最适合存储频繁访问的数据，如日志处理和数据仓库。这些卷只能在最小1GB和最大1TB之间。'
- en: '**Cold HDD (SC1)**: SC1 or Cold HDD volumes, though similar to ST1 volumes,
    are not designed to hold frequently accessed data. These are also low-cost, magnetic
    storage volumes that cannot be used as bootable volumes. Similar to ST1, these
    volumes can only range from a minimum of 1 GB to a maximum of 1 TB.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**冷HDD（SC1）**：SC1或冷HDD卷，虽然与ST1卷相似，但不适用于保存频繁访问的数据。这些也是低成本的磁存储卷，不能用作可引导卷。与ST1类似，这些卷只能在最小1GB和最大1TB之间。'
- en: For this tutorial, we are adding an additional 40 GB EBS volume General Purpose
    SSD (GP2) to our machine. Don't forget to check Delete on Termination, or the
    storage instance will continue to persist after you terminate your EC2 instance.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本教程，我们正在向我们的机器添加一个额外的40GB EBS卷通用用途SSD（GP2）。不要忘记勾选“终止时删除”，否则存储实例将在终止EC2实例后继续存在。
- en: We won't add any tags to our EC2 instance, so let's move on to the next section, *Security
    Group*.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会给我们的EC2实例添加任何标签，所以让我们继续下一节，“安全组”。
- en: Configuring firewall settings
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置防火墙设置
- en: Each EC2 instance is protected by its own virtual firewall known as security
    groups. This acts like a typical firewall and manages access to the EC2 instance
    by controlling inbound and outbound traffic. While setting up an EC2 instance,
    we can add rules to allow or deny traffic to the associated EC2 instance. EC2
    instances can also be grouped into a security group, which is useful when one
    firewall rule needs to be applied to multiple EC2 instances. Once the rules have
    been modified, changes take effect immediately.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 每个EC2实例都受到其自己的虚拟防火墙的保护，称为安全组。这就像一个典型的防火墙，通过控制入站和出站流量来管理对EC2实例的访问。在设置EC2实例时，我们可以添加规则来允许或拒绝流量到相关的EC2实例。EC2实例也可以分组到一个安全组中，这在需要将一个防火墙规则应用于多个EC2实例时非常有用。一旦规则被修改，更改立即生效。
- en: 'EC2 instances that run Linux AMI images have the SSH port allowed by default
    for remote access. In the case of Windows machines, RDP is allowed by default:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 运行Linux AMI映像的EC2实例默认允许远程访问的SSH端口。在Windows机器的情况下，默认允许RDP：
- en: '![](img/4ac1de6f-f007-409f-bd20-d0bd0bcc3206.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4ac1de6f-f007-409f-bd20-d0bd0bcc3206.png)'
- en: 'As we can see, since our AMI is an Ubuntu Linux image, that AWS has automatically
    configured the network rules to allow SSH (port 22) only. Let''s add a few more
    network rules to allow HTTP and HTTPS as well:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，由于我们的AMI是Ubuntu Linux映像，AWS已自动配置了网络规则，只允许SSH（端口22）。让我们添加一些网络规则来允许HTTP和HTTPS：
- en: '![](img/300a5b19-7af9-4ef9-8bd1-b13a8330ff45.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/300a5b19-7af9-4ef9-8bd1-b13a8330ff45.png)'
- en: Now, we are all set to launch our AMI. Click on Review and Launch and then click
    on Launch.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好启动我们的AMI。点击“审阅和启动”，然后点击“启动”。
- en: In the next section, we will look at configuring authentication to access our
    EC2 instance.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看看配置认证以访问我们的EC2实例。
- en: Configuring EC2 authentication
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置EC2认证
- en: Within AWS, all AMI Linux images are configured to authenticate any SSH session
    using a key pair authentication system instead of a password.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS中，所有AMI Linux映像都配置为使用密钥对认证SSH会话，而不是密码。
- en: 'Before an EC2 instance is to be launched, AWS prompts us to configure an SSH
    key pair to be able to connect. We can either create our own SSH key pair or use
    an existing one:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动EC2实例之前，AWS提示我们配置SSH密钥对以便连接。我们可以创建自己的SSH密钥对，也可以使用现有的：
- en: '![](img/e4e6af18-7822-49db-b21b-6cb415290c17.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4e6af18-7822-49db-b21b-6cb415290c17.png)'
- en: Let's create a new key pair and name it `ubuntukey`.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个新的密钥对，并命名为`ubuntukey`。
- en: Then, download the key pair and launch the instance. The key pair file we get
    is `ubuntukey.pem`. The name of the file will change based on the key name that
    was provided previously. Ensure that the key file is stored securely. In case
    the key is lost, AWS won't provide another key file and you will no longer be
    able to access your EC2 instance.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，下载密钥对并启动实例。我们得到的密钥对文件是`ubuntukey.pem`。文件的名称将根据先前提供的密钥名称而更改。确保密钥文件存储安全。如果密钥丢失，AWS将不会提供另一个密钥文件，您将无法再访问您的EC2实例。
- en: 'Once the key file has been downloaded, AWS redirects you to the Launch Status
    page to let you know that your EC2 instance is being launched:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载密钥文件后，AWS会将您重定向到启动状态页面，让您知道您的EC2实例正在启动：
- en: '![](img/85088d9d-52a7-484b-a541-4366c8a8c12d.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/85088d9d-52a7-484b-a541-4366c8a8c12d.png)'
- en: We can now go to our list of EC2 instances and find out the public IP address
    that has been assigned.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以转到我们的EC2实例列表，并查找分配的公共IP地址。
- en: 'Now, to connect to the AWS machine, you can do so from a local Linux machine:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要连接到AWS机器，您可以从本地Linux机器上这样做：
- en: 'Bring up the Terminal and issue the following command:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开终端并输入以下命令：
- en: '[PRE0]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'However, connecting from a Windows local machine requires some more work:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，从Windows本地计算机连接需要更多的工作：
- en: Install PuTTY on your local machine. We now have to convert the `.pem` file
    in to a `.ppk` file, since PuTTY only accepts `.ppk` (PuTTY private key).
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地计算机上安装PuTTY。现在我们必须将`.pem`文件转换为`.ppk`文件，因为PuTTY只接受`.ppk`（PuTTY私钥）。
- en: 'Launch PuTTYgen from your start menu and click on load. Select `All files`:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从开始菜单启动PuTTYgen并单击加载。选择“所有文件”：
- en: '![](img/eb960a98-9067-4410-85bc-6b50b6a9bb5d.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb960a98-9067-4410-85bc-6b50b6a9bb5d.png)'
- en: 'Now, point PuTTYgen to the `.pem` file that we have downloaded. PuTTYgen will
    then load and convert your file:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将PuTTYgen指向我们下载的`.pem`文件。PuTTYgen将加载并转换您的文件：
- en: '![](img/f2383d83-5596-4c79-aed2-5ad63a8f7400.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f2383d83-5596-4c79-aed2-5ad63a8f7400.png)'
- en: Once the `.pem` file has been loaded, click on Save private key to generate
    the `.ppk` file. PuTTY displays a warning and asks whether you want to save the
    key without a passphrase. You may select `Yes`.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载`.pem`文件后，单击“保存私钥”以生成`.ppk`文件。PuTTY会显示警告，并询问您是否要保存不带密码的密钥。您可以选择“是”。
- en: Provide a name for your `.ppk` file and click Save.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的`.ppk`文件提供一个名称，然后单击保存。
- en: Once we have converted the `.pem` file in to a `.ppk` file, we can connect to
    our EC2 instance using PuTTY. Start by launching PuTTY from the start menu.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们将`.pem`文件转换为`.ppk`文件，我们就可以使用PuTTY连接到我们的EC2实例。首先从开始菜单启动PuTTY。
- en: 'In the Host Name field, enter the hostname, `ubuntu@<<your public ip>>`. Leave
    the port at 22:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“主机名”字段中，输入主机名`ubuntu@<<您的公共IP>>`。将端口保留在22号：
- en: '![](img/afe90e1b-9f83-4eeb-8b28-20cf457f592e.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/afe90e1b-9f83-4eeb-8b28-20cf457f592e.png)'
- en: 'Next, click on the + button next to SSH. Go to Auth and, next to the field
    named Private key file for authentication, click on Browse. Point PuTTY to the
    `.ppk` file we have created:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，单击SSH旁边的+按钮。转到Auth，然后在名为“用于身份验证的私钥文件”的字段旁边，单击浏览。将PuTTY指向我们创建的`.ppk`文件：
- en: '![](img/ed4a6890-166f-432f-ba79-15e888eb088d.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed4a6890-166f-432f-ba79-15e888eb088d.png)'
- en: 'Lastly, click on Open to start your SSH session:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击“打开”开始您的SSH会话：
- en: '![](img/16714ae9-6314-4408-8abf-6cdd387c20b3.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16714ae9-6314-4408-8abf-6cdd387c20b3.png)'
- en: Since this is the first time that you are logging into the instance, you will
    receive the following alert.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是您首次登录到实例，您将收到以下警报。
- en: 'Click on Yes to continue. You will be authenticated to the Ubuntu instance:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“是”继续。您将被验证到Ubuntu实例：
- en: '![](img/03b98a4e-c61c-40f0-ac5e-880228cb4081.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/03b98a4e-c61c-40f0-ac5e-880228cb4081.png)'
- en: That concludes the exercise for this chapter. We have successfully created an
    EC2 machine and learned how to create new VPCs and subnets. We have also seen
    the different types of storage volumes offered by AWS, and learned how we can
    configure firewall rules for a particular instance. Finally, we set up authentication
    and logged in to our Ubuntu machine.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了本章的练习。我们成功创建了一个EC2机器，并学会了如何创建新的VPC和子网。我们还看到了AWS提供的不同类型的存储卷，并学会了如何为特定实例配置防火墙规则。最后，我们设置了身份验证并登录到我们的Ubuntu机器。
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter walked you through how to set up an EC2 instance and configure
    all the nitty-gritty of setting up an EC2 instance, such as creating a new VPC,
    configuring a new subnet within a VPC, and adding additional storage. This chapter
    explained the different types of storage that are available for use with EC2 instances,
    such as EBS and Instance Store. Furthermore, we got to know the types of storage
    volumes and what they are suited for. Subsequently, we learned how to configure
    firewall rules using the security group of an EC2 instance. This brings us to
    the end of this chapter.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了如何设置EC2实例并配置EC2实例设置的种种细节，例如创建新的VPC，在VPC中配置新的子网以及添加额外的存储。本章解释了可用于EC2实例的不同类型的存储，例如EBS和实例存储。此外，我们了解了存储卷的类型以及它们适用于什么。随后，我们学习了如何使用EC2实例的安全组配置防火墙规则。这就是本章的结束。
- en: In the next chapter, we will learn how to perform real-life penetration testing
    of an AWS environment running multiple EC2 instances. Furthermore, we will learn
    how to perform automated exploits using Metasploit and perform a lateral movement
    in a network using host pivoting.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何对运行多个EC2实例的AWS环境进行真实的渗透测试。此外，我们将学习如何使用Metasploit执行自动化利用，并在网络中使用主机枢纽进行横向移动。
- en: Further reading
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '**Storage**: [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Storage.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Storage.html)'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储**：[https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Storage.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Storage.html)'
- en: '**What Is Amazon VPC?**: [https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html)'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**什么是Amazon VPC？**：[https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html)'
- en: '**Amazon VPC Network Administrator Guide**: [https://docs.aws.amazon.com/vpc/latest/adminguide/Welcome.html](https://docs.aws.amazon.com/vpc/latest/adminguide/Welcome.html)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon VPC网络管理员指南**：[https://docs.aws.amazon.com/vpc/latest/adminguide/Welcome.html](https://docs.aws.amazon.com/vpc/latest/adminguide/Welcome.html)'
