- en: Wireless Penetration Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无线渗透测试
- en: For much of our previous discussion, we have looked at techniques that involve
    penetration testing while connected to a wired network. This included both internal
    **Local Area Networking** (**LAN**) and techniques such as web application assessments
    over the public internet. One area of focus that deserves attention is wireless
    networking. Wireless networks are ubiquitous, having been deployed in a variety
    of environments, such as commercial, government, educational, and residential
    environments. As a result, penetration testers should ensure that these networks
    have the appropriate amount of security controls and are free from configuration
    errors.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的讨论中，我们已经研究了连接到有线网络时涉及的渗透测试技术。这包括内部**局域网**（**LAN**）和在公共互联网上进行的Web应用程序评估等技术。值得关注的一个重点是无线网络。无线网络是无处不在的，在商业、政府、教育和住宅环境中都得到部署。因此，渗透测试人员应确保这些网络具有适当数量的安全控制，并且没有配置错误。
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: '**Wireless networking**: In this topic, we address the underlying protocols
    and configuration that govern how clients, such as laptops and tablets, authenticate
    and communicate with wireless-network access points.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无线网络**：在这个主题中，我们将讨论管理客户端（如笔记本电脑和平板电脑）如何认证和与无线网络接入点通信的基础协议和配置。'
- en: '**Reconnaissance**: Just like in a penetration test that we conduct over a
    wired connection, there are tools within Kali Linux and others that can be added
    and leveraged to identify potential target networks, as well as other configuration
    information we can leverage during an attack.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**侦察**：就像我们在有线连接上进行的渗透测试一样，在Kali Linux和其他工具中可以添加和利用工具来识别潜在的目标网络，以及我们在攻击过程中可以利用的其他配置信息。'
- en: '**Authentication attacks**: Unlike attempting to compromise a remote server,
    the attacks we will discuss revolve around gaining authenticated access to the
    wireless network. Once authenticated, we can connect and then put into action
    the tools and techniques we have previously examined.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**认证攻击**：与试图破坏远程服务器不同，我们将讨论的攻击是围绕获取对无线网络的认证访问。一旦认证，我们就可以连接，然后实施之前研究过的工具和技术。'
- en: '**What to do after authentication**: Here, we will discuss some of the actions
    that can be taken after the authentication mechanism has been cracked. These include
    attacks against the access points and how to bypass a common security control
    implemented into wireless networks. Sniffing wireless network traffic to gain
    access to credentials or other information is also addressed.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**认证后该怎么做**：在这里，我们将讨论在认证机制被破解后可以采取的一些行动。这些包括针对接入点的攻击以及如何绕过无线网络中实施的常见安全控制。还将讨论嗅探无线网络流量以获取凭证或其他信息。'
- en: Having a solid understanding of wireless network penetration testing is becoming
    more and more important. Technology is rapidly adopting the concept of the **Internet
    of Things** (**IoT**), which aims to move more and more of our devices that are
    used for comfort and convenience to the internet. Facilitating this advance will
    be wireless networks.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对无线网络渗透测试的深入了解变得越来越重要。技术正在迅速采用**物联网**（**IoT**）的概念，旨在将更多用于舒适和便利的设备移至互联网。无线网络将推动这一进展。
- en: As a result, more and more of these networks will be needed, which corresponds
    to an increase in the attack surface. Clients and organizations will need to understand
    the risks and how attackers go about attacking these systems.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，将需要更多这些网络，这对应着攻击面的增加。客户和组织将需要了解风险以及攻击者如何攻击这些系统。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, two different USB antennas are used. The first is a TP-LINK
    TL-WN722N Wireless N150 High Gain USB Adapter and the other is an Alfa AWUSO36NH
    High Gain USB Wireless G/N Long-Rang Wi-Fi Network Adapter. Both of these are
    readily available on the commercial market. For more information, consult the
    following website for supported wireless antennas and chipsets: [http://aircrack-ng.org/doku.phpid=compatibility_drivers&DokuWiki=090ueo337eqe94u5gkjo092di6#which_is_the_best_card_to_buy](http://aircrack-ng.org/doku.phpid=compatibility_drivers&DokuWiki=090ueo337eqe94u5gkjo092di6#which_is_the_best_card_to_buy).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，使用了两种不同的USB天线。第一种是TP-LINK TL-WN722N无线N150高增益USB适配器，另一种是Alfa AWUSO36NH高增益USB无线G/N长距离Wi-Fi网络适配器。这两种产品都可以在商业市场上找到。有关支持的无线天线和芯片组的更多信息，请参考以下网站：[http://aircrack-ng.org/doku.phpid=compatibility_drivers&DokuWiki=090ueo337eqe94u5gkjo092di6#which_is_the_best_card_to_buy](http://aircrack-ng.org/doku.phpid=compatibility_drivers&DokuWiki=090ueo337eqe94u5gkjo092di6#which_is_the_best_card_to_buy)。
- en: Wireless networking
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无线网络
- en: Wireless networking is governed by protocols and configurations in much the
    same way that wired networks are. Wireless networks make use of radio spectrum
    frequencies to transmit data between the access point and the connected networks.
    For our purposes, **Wireless Local Area Networks** (**W****LANs**) have a great
    deal of similarities to standard **Local Area Networks** (**LANs**). The major
    focus of penetration testers is on identifying the target network and gaining
    access.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 无线网络遵循协议和配置，方式与有线网络类似。无线网络利用无线电频谱频率在接入点和连接的网络之间传输数据。对于我们的目的，**无线局域网**（**WLANs**）与标准**局域网**（**LANs**）有很多相似之处。渗透测试人员的主要重点是识别目标网络并获取访问权限。
- en: Overview of 802.11
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 802.11概述
- en: The overriding standard governing wireless network is the IEEE 802.11 standard.
    This set of rules was first developed for ease of use and the ability to rapidly
    connect devices. Concerns about security were not addressed in the initial standards
    that were published in 1997\. Since then, the standards have had a number of amendments;
    the first of these with significant impact on wireless networking was 802.11b.
    This was the most widely accepted standard and was released in 1999.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 统治无线网络的最高标准是IEEE 802.11标准。这一套规则最初是为了方便使用和快速连接设备而开发的。对于最初在1997年发布的标准，安全性方面的担忧并未得到解决。从那时起，这些标准已经进行了许多修订；其中对无线网络产生重大影响的第一个是802.11b。这是最广泛接受的标准，于1999年发布。
- en: As the 802.11 standard makes use of radio signals, specific regions have different
    laws and regulations that pertain to the use of wireless networks. In general,
    though, there are only a few types of security controls built into the 802.11
    standard and its associated amendments.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 由于802.11标准使用无线电信号，特定地区有不同的法律和法规适用于无线网络的使用。尽管如此，802.11标准及其相关修订中只内置了少数几种安全控制类型。
- en: The Wired Equivalent Privacy standard
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有线等效隐私标准
- en: The **Wired Equivalent Privacy** (**WEP**) standard was the first security standard
    to be developed in conjunction with the 802.11 standards. First deployed in 1999
    alongside the first widely adopted iteration of 802.11, WEP was designed to provide
    the same amount of security that was found on wired networks. This was accomplished
    using a combination of RC4 ciphers to provide confidentiality and the use of the
    CRC32 for integrity.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**Wired Equivalent Privacy**（**WEP**）标准是与802.11标准一起开发的第一个安全标准。WEP首次部署于1999年，与第一个广泛采用的802.11版本一起，旨在提供与有线网络上发现的相同数量的安全性。这是通过使用RC4密码来提供保密性和使用CRC32来提供完整性来实现的。'
- en: Authenticating to a WEP network is done through the use of either a 64- or 128-bit
    key. The 64-bit key is derived by entering a series of 10 hexadecimal characters.
    These initial 40 bits are combined with a 24-bit **Initialization Vector** (**IV**),
    which forms the RC4 encryption key. For the 128-bit key, a 104-bit key or 26 hexadecimal
    characters are combined with the 24-bit IV to create the RC4 key.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到WEP网络的认证是通过使用64位或128位密钥来完成的。64位密钥是通过输入一系列10个十六进制字符来派生的。这些初始的40位与24位**Initialization
    Vector**（**IV**）相结合，形成RC4加密密钥。对于128位密钥，104位密钥或26个十六进制字符与24位IV相结合，创建RC4密钥。
- en: 'Authenticating to a WEP wireless network is a four-stage process:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到WEP无线网络的认证是一个四阶段的过程：
- en: The client sends a request to the WEP access point to authenticate.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端向WEP接入点发送认证请求。
- en: The WEP access point sends a cleartext message to the client.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WEP接入点向客户端发送明文消息。
- en: The client takes the entered WEP key and encrypts the cleartext message that
    the access point transmitted. The client sends this on to the access point.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端获取输入的WEP密钥，并加密接入点传输的明文消息。客户端将其发送到接入点。
- en: The access point decrypts the message sent by the client with its own WEP key.
    If the message is decrypted properly, the client is allowed to connect.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接入点使用自己的WEP密钥解密客户端发送的消息。如果消息被正确解密，客户端就被允许连接。
- en: As was addressed previously, WEP was not designed with message confidentiality
    and integrity as a central focus. As a result, there are two key vulnerabilities
    with WEP implementations. First, the CRC32 algorithm is not used for encryption
    per se, but rather as a checksum against errors. The second is that the RC4 is
    susceptible to what is known as an Initialization Vector attack. The IV attack
    is possible due to the fact that the RC4 cipher is a stream cipher and, as a result,
    the same key should never be used twice. The 24-bit key is too short on a busy
    wireless network to be of use. In about 50% of cases, the same IV will be used
    in a wireless communication channel within 5,000 uses. This will cause a collision,
    whereby the IV and the entire WEP key can be reversed.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前所提到的，WEP并不是以消息保密性和完整性为中心设计的。因此，WEP实施存在两个关键漏洞。首先，CRC32算法并不是用于加密，而是用作错误的校验和。其次，RC4容易受到所谓的初始化向量攻击。IV攻击是可能的，因为RC4密码是流密码，因此相同的密钥不应该被两次使用。在繁忙的无线网络中，24位密钥太短而无法使用。在大约50%的情况下，相同的IV将在5000次使用内在无线通信频道中使用。这将导致碰撞，从而可以反转IV和整个WEP密钥。
- en: Due to the security vulnerabilities, WEP began to be phased out in 2003 in favor
    of more secure wireless implementations. As a result, there is a good chance that
    you may not see one implemented in the wild, but there are access points sold
    on the commercial market to this day that still have WEP enabled. Also, you may
    encounter legacy networks that still use this protocol.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于安全漏洞，WEP从2003年开始逐步淘汰，以更安全的无线实现为代价。因此，您可能不会在野外看到WEP的实施，但商业市场上仍有出售启用WEP的接入点。此外，您可能会遇到仍在使用此协议的传统网络。
- en: Wi-Fi Protected Access (WPA)
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Wi-Fi Protected Access（WPA）
- en: 'With the security vulnerabilities of the WEP wireless network implementations
    being evident, the 802.11 standards were updated to apply a greater degree of
    security around the confidentiality and integrity of wireless networks. This was
    done with the design of the **Wi-Fi Protected Access** (**WPA**) standard that
    was first implemented in the 802.11i standard in 2003\. The WPA standard was further
    updated with WPA2 in 2006, thereby becoming the standard for Wi-Fi Protected Access
    networks. WPA2 has three different versions, which each utilize their own authentication
    mechanisms:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 随着WEP无线网络实现的安全漏洞显而易见，802.11标准进行了更新，以在无线网络的保密性和完整性周围应用更高程度的安全性。这是通过设计**Wi-Fi
    Protected Access**（**WPA**）标准来实现的，该标准首次在2003年的802.11i标准中实施。WPA标准在2006年进一步升级为WPA2，从而成为Wi-Fi
    Protected Access网络的标准。WPA2有三个不同的版本，每个版本都使用自己的认证机制：
- en: '**WPA-Personal**: This type of WPA2 implementation is often found in residential
    or small-to-medium business settings. WPA2 makes use of a pre-shared key, which
    is derived from the combination of a passcode and the broadcast **Service Set
    Identifier** (**SSID**) of the wireless network. This passcode is configured by
    the user and can be anything from 8 to 63 characters in length. This passcode
    is then salted with the SSID, along with the 4,096 interactions of the SHA1 hashing
    algorithm.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WPA-Personal**：这种WPA2实现通常在住宅或中小型企业环境中找到。WPA2使用预共享密钥，该密钥由口令和无线网络的广播**服务集标识符**（**SSID**）的组合派生而来。这个口令由用户配置，可以是8到63个字符的任何内容。然后，这个口令与SSID一起进行盐处理，再通过SHA1哈希算法的4,096次交互。'
- en: '**WPA-Enterprise**: The enterprise version of WPA/WPA2 makes use of a RADIUS
    authentication server. This allows for the authentication of the user and devices,
    and severely reduces the ability of brute-forcing pre-shared keys.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WPA-Enterprise**：WPA/WPA2的企业版本使用RADIUS认证服务器。这允许对用户和设备进行认证，并严重减少了暴力破解预共享密钥的能力。'
- en: '**Wi-Fi Protected Setup (WPS)**: This is a simpler version of authentication
    that makes use of a PIN code versus a passcode or passphrase. Initially developed
    as an easier way to connect devices to wireless networks, we will see how this
    implementation can be cracked, revealing both the PIN code and the passcode utilized
    in the wireless network implementation.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Wi-Fi Protected Setup (WPS)**：这是一种更简单的认证方式，它使用PIN码而不是密码或口令。最初开发为连接设备到无线网络的更简单方式，我们将看到这种实现如何被破解，揭示出PIN码和无线网络实现中使用的口令。'
- en: 'For our purposes, we will focus on testing the WPA-Personal and WPS implementations.
    In the case of WPA-Personal, authentication and encryption is handled through
    the use of a four-way handshake:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了我们的目的，我们将专注于测试WPA-Personal和WPS的实现。在WPA-Personal的情况下，认证和加密是通过四路握手来处理的：
- en: '![](img/56b356b7-1e3c-4731-8c29-9f7988215e4d.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/56b356b7-1e3c-4731-8c29-9f7988215e4d.png)'
- en: The access point transmits a random number to the client, referred to as an
    **ANonce**.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接入点向客户端发送一个随机数，称为**ANonce**。
- en: The client creates another random number called an **SNonce**. The SNonce, ANonce,
    and the passcode the user entered are combined to create what is referred to as
    a **Message Integrity Check **(**MIC**). The MIC and SNonce are sent back to the
    access point.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端创建另一个称为**SNonce**的随机数。SNonce、ANonce和用户输入的口令组合在一起，创建了所谓的**消息完整性检查**（**MIC**）。MIC和SNonce被发送回接入点。
- en: The access point hashes the ANonce, SNonce, and pre-shared key together and,
    if they match, authenticates the client. It then sends an encryption key to the
    client.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接入点将ANonce、SNonce和预共享密钥进行哈希处理，如果匹配，则对客户端进行认证。然后向客户端发送一个加密密钥。
- en: The client acknowledges the encryption key.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端确认加密密钥。
- en: 'There are two key vulnerabilities within the WPA-Personal implementation that
    we will focus on:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: WPA-Personal实现中存在两个关键的漏洞，我们将重点关注：
- en: '**Weak pre-shared key**: In the WPA-Personal implementation, the user is the
    one that configures the settings on the access point. Often, users will configure
    the access point with a short, easy-to-remember passcode. As shown previously,
    we were able to sniff the traffic between an access point and client. If we are
    able to capture the four-way handshake, we have all of the information necessary
    to reverse the passcode and then authenticate to the network.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弱预共享密钥**：在WPA-Personal实现中，用户配置接入点的设置。通常，用户会配置一个简短、易记的口令。正如之前所示，我们能够嗅探到接入点和客户端之间的流量。如果我们能够捕获到四路握手，我们就有了反向破解口令并认证到网络所需的所有信息。'
- en: '**WPS**: The Wi-Fi Protected Setup is a user-friendly way for end users to
    connect devices to a wireless network through the use of a PIN. Devices such as
    printers and entertainment devices will often make use of this technology. All
    a user has to do is push a button on a WPS-enabled access point and the same on
    a WPS-enabled access point, and then a connection can be established. The drawback
    is that this method of authentication is done through the use of a PIN. This PIN
    can be reversed, revealing not only the WPS PIN but also the wireless passcode.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WPS**：Wi-Fi Protected Setup是终端用户通过PIN码将设备连接到无线网络的用户友好方式。打印机和娱乐设备通常会使用这项技术。用户只需在启用WPS的接入点上按下一个按钮，然后在启用WPS的设备上按下相同的按钮，就可以建立连接。缺点是，这种认证方式是通过PIN码完成的。这个PIN码可以被反向破解，不仅可以揭示WPS
    PIN码，还可以揭示无线口令。'
- en: Wireless network reconnaissance
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无线网络侦察
- en: As with penetration testing LANs or over the public internet, we need to perform
    reconnaissance to identify our target wireless network. As opposed to having a
    network connection, we also have to take care and ensure that we do not target
    a network that we are not authorized to test. This becomes a significant issue
    when discussing wireless penetration testing, as you will often find a number
    of wireless networks co-mingled with a target network. This is especially true
    in cases where our target organization and their associated networks are located
    in an office building or park.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 与渗透测试局域网或公共互联网一样，我们需要进行侦察，以识别我们的目标无线网络。与拥有网络连接不同，我们还必须小心确保我们不会攻击未经授权测试的网络。当讨论无线渗透测试时，这成为一个重要问题，因为你经常会发现许多无线网络与目标网络混在一起。特别是在我们的目标组织及其相关网络位于办公大楼或公园的情况下。
- en: Antennas
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 天线
- en: One key consideration when beginning wireless penetration testing is the selection
    of antennas. Virtual machines and laptops often do not have the proper wireless
    cards and antennas to support wireless penetration testing. As a result, you will
    have to acquire an external antenna that is supported. Most of these antennas,
    though, can be easily purchased online for a moderate price.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 开始无线渗透测试时的一个关键考虑因素是天线的选择。虚拟机和笔记本电脑通常没有适当的无线网卡和天线来支持无线渗透测试。因此，您将不得不获取一个受支持的外部天线。大多数这些天线可以在网上以适中的价格轻松购买。
- en: Iwlist
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Iwlist
- en: 'Kali Linux has several tools that can be used to identify wireless networks;
    one basic tool is the `iwlist` Linux command. This command lists the available
    wireless networks within range of the wireless card. Open a Command Prompt and
    type the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Kali Linux有几个工具可用于识别无线网络；其中一个基本工具是`iwlist` Linux命令。此命令列出了无线卡范围内可用的无线网络。打开命令提示符，输入以下内容：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following screenshot shows the output:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了输出：
- en: '![](img/13db4bc9-cffa-4daf-abe4-42374b5cdfdb.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/13db4bc9-cffa-4daf-abe4-42374b5cdfdb.png)'
- en: While a simple tool, this gives us some good information. This includes the
    BSSID or MAC address of the wireless access point (which will become important
    later), the type of authentication and encryption, and other information.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然是一个简单的工具，但它为我们提供了一些有用的信息。这包括无线访问点的BSSID或MAC地址（这将在以后变得重要），认证和加密类型以及其他信息。
- en: Kismet
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kismet
- en: 'Kismet is a combination wireless scanner, IDS/IPS, and packet sniffer that
    comes installed on Kali Linux 2.0\. Written in C++, Kismet offers some additional
    functionality that is not normally found in purely command-line tools. To start
    Kismet, you can navigate to Applications | Wireless Attacks | Kismet or type the
    following into a command prompt:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Kismet是一个组合无线扫描仪、IDS/IPS和数据包嗅探器，它已安装在Kali Linux 2.0上。Kismet是用C++编写的，提供了一些通常在纯命令行工具中找不到的附加功能。要启动Kismet，您可以导航到应用程序|无线攻击|Kismet，或在命令提示符中键入以下内容：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When the command executes, you will be brought to a window. There are different
    color schemes available and the initial message will verify that you are able
    to see Kismet in the Terminal:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 命令执行后，您将被带到一个窗口。有不同的颜色方案可用，初始消息将验证您是否能在终端中看到Kismet：
- en: '![](img/6d966b5e-1d06-4c8b-8ae0-ee31f7954b84.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d966b5e-1d06-4c8b-8ae0-ee31f7954b84.png)'
- en: Click Yes if you have no issue seeing the Terminal.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有问题看到终端，请单击“是”。
- en: 'Kismet needs to have a source for analysis. This will be the wireless interface
    on your Kali Linux installation. If you are unsure, type `ifconfig` into a command
    prompt; the interface that begins with WLAN is your wireless interface:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Kismet需要有一个用于分析的来源。这将是您Kali Linux安装上的无线接口。如果您不确定，请在命令提示符中键入`ifconfig`；以WLAN开头的接口是您的无线接口：
- en: '![](img/e99717fd-99c5-4f3f-8bbe-c1b6c28fbe02.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e99717fd-99c5-4f3f-8bbe-c1b6c28fbe02.png)'
- en: Press the *Enter* key to indicate Yes.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 按*Enter*键表示“是”。
- en: 'The next screen allows you to enter an interface for Kismet to use for scanning.
    In the following screenshot, we enter `wlan0`, as that is the interface we are
    working with:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个屏幕允许您输入Kismet用于扫描的接口。在下面的屏幕截图中，我们输入`wlan0`，因为这是我们正在使用的接口：
- en: '![](img/30f1b06a-22b6-48d4-9cd4-235bec2cebc6.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/30f1b06a-22b6-48d4-9cd4-235bec2cebc6.png)'
- en: 'Hit *Enter* to add the interface. At this point, Kismet will start to collect
    wireless access points. This includes the BSSID and channels that each access
    point is using:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 按*Enter*键添加接口。此时，Kismet将开始收集无线访问点。这包括每个访问点正在使用的BSSID和信道：
- en: '![](img/2f22b3c1-e248-42c9-81d5-ea570fc775d0.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2f22b3c1-e248-42c9-81d5-ea570fc775d0.png)'
- en: From the output of Kismet, you can start to gain an understanding of what wireless
    networks are visible to your system. From here, attempt to identify those wireless
    access points or networks that are part of your penetration test.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 从Kismet的输出中，您可以开始了解您的系统可见的无线网络。从这里开始，尝试识别那些无线访问点或网络，这些网络是您渗透测试的一部分。
- en: WAIDPS
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WAIDPS
- en: Another command-line tool that is useful for wireless penetration testing is
    the WAIDPS tool. While billed as an intrusion-detection platform for wireless
    networks, this Python script is handy for gathering information about wireless
    networks and clients. To use WAIDPS, simply download the `WAIDPS.py` Python script
    from the website at [https://github.com/SYWorks/waidps](https://github.com/SYWorks/waidps).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的命令行工具是WAIDPS工具，用于无线渗透测试。虽然被宣传为无线网络入侵检测平台，但这个Python脚本对于收集有关无线网络和客户端的信息非常有用。要使用WAIDPS，只需从[https://github.com/SYWorks/waidps](https://github.com/SYWorks/waidps)的网站下载`WAIDPS.py`
    Python脚本。
- en: 'Once downloaded, place the script into any directory and then run it using
    the following command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 下载后，将脚本放入任何目录，然后使用以下命令运行它：
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once the command executes, you will be brought to a screen while the script
    runs through the configuration:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 命令执行后，您将被带到一个屏幕，脚本将通过配置运行：
- en: '![](img/d4466907-0f02-406d-aa69-dd7655eed71b.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d4466907-0f02-406d-aa69-dd7655eed71b.png)'
- en: 'WAIDPS has an optional feature that compares the MAC address of wireless access
    points to a list of known manufacturers. This feature is useful if you know that
    a particular target utilizes a specific manufacturer for their access points:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: WAIDPS具有一个可选功能，它将无线访问点的MAC地址与已知制造商的列表进行比较。如果您知道特定目标为其访问点使用了特定制造商，则此功能非常有用：
- en: '![](img/ac8c31d1-d8a3-4c13-abda-f700c7d5ffb1.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac8c31d1-d8a3-4c13-abda-f700c7d5ffb1.png)'
- en: 'Once the initial configuration has run, WAIDPS will supply a list of access
    points and wireless networks that are in range. In addition, there is information
    on the type of encryption in use, as well as the authentication mechanism. Another
    good piece of information is the PWR or power indicator. This indicates the strength
    of the specific access point''s signal. The closer the number is to zero, the
    stronger the signal. This is helpful if you are targeting a specific access point.
    If the signal is weaker than you would like, it indicates you may have to get
    closer to the actual access point:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦初始配置运行，WAIDPS将提供一个范围内的访问点和无线网络列表。此外，还有有关正在使用的加密类型以及认证机制的信息。另一个很好的信息是PWR或功率指示器。这表示特定访问点信号的强度。数字越接近零，信号越强。如果信号比您想要的要弱，这表明您可能需要更靠近实际的访问点：
- en: '![](img/22323310-7643-4ec2-9c6d-2c95d84946e7.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22323310-7643-4ec2-9c6d-2c95d84946e7.png)'
- en: 'In addition to identifying wireless access points, WAIDPS has the ability to
    scan for clients that may have wireless enabled but are not associated with an
    access point. This information can become useful if you need to spoof a MAC address
    that appears to come from a legitimate client:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 除了识别无线访问点外，WAIDPS还具有扫描可能启用了无线但未与访问点关联的客户端的能力。如果您需要伪造一个看似来自合法客户端的MAC地址，这些信息可能会很有用：
- en: '![](img/054bd279-1104-4708-9684-0a5a4216cf39.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/054bd279-1104-4708-9684-0a5a4216cf39.png)'
- en: Wireless testing tools
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无线测试工具
- en: Kali Linux comes prepackaged with a number of command-line and GUI-based tools.
    These tools can be leveraged to convert our network interface into a network monitor,
    capture traffic, and reverse the authentication passcode. The first of these tools,
    Aircrack-ng, is a suite of tools. In addition, we will examine some other command-line
    and GUI tools that cover the full spectrum of tasks involved in wireless penetration
    testing.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Kali Linux预装了许多命令行和基于GUI的工具。这些工具可以用来将我们的网络接口转换为网络监视器，捕获流量，并反向验证身份验证密码。其中第一个工具是Aircrack-ng，它是一套工具。此外，我们将研究一些其他命令行和GUI工具，涵盖了无线渗透测试所涉及的全部任务。
- en: Aircrack-ng
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Aircrack-ng
- en: 'Aircrack-ng is a suite of tools that allow penetration testers to test the
    security of wireless networks. The suite includes tools that perform the following
    tasks related to wireless penetration testing:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Aircrack-ng是一套工具，允许渗透测试人员测试无线网络的安全性。该套件包括执行以下与无线渗透测试相关任务的工具：
- en: '**Monitoring**: These are tools designed specifically to capture traffic for
    later analysis. We will see in greater depth the ability of the Aircrack-ng tools
    to capture wireless traffic that we can use on other third-party software, such
    as Wireshark, to examine.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控**：这些工具专门设计用于捕获流量以供以后分析。我们将更深入地了解Aircrack-ng工具捕获无线流量的能力，我们可以将其用于其他第三方软件，如Wireshark，进行检查。'
- en: '**Attacking**: These tools are available to attack target networks. They include
    tools that allow for de-authentication attacks and replay attacks that take advantage
    of Aircrack-ng''s ability to conduct packet injections, whereby Aircrack-ng actually
    sends packets into the wireless data stream to both clients and the access point
    as part of the attack.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**攻击**：这些工具可用于攻击目标网络。它们包括允许进行去认证攻击和重放攻击的工具，这些攻击利用了Aircrack-ng进行数据包注入的能力，Aircrack-ng实际上将数据包发送到无线数据流中，既发送到客户端又发送到访问点，作为攻击的一部分。'
- en: '**Testing**: These tools allow for the testing of wireless capabilities in
    hardware such as wireless cards.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**：这些工具允许测试诸如无线网卡之类的硬件的无线功能。'
- en: '**Cracking**: The Aircrack-ng toolset also has the capability to crack wireless
    pre-shared keys found in the WEP, WPA, and WP2.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**破解**：Aircrack-ng工具集还具有破解WEP、WPA和WP2中发现的无线预共享密钥的能力。'
- en: In addition to the command-line tools, Aircrack-ng is used in a number of GUI-based
    tools. Having a solid understanding of how Aircrack-ng works will provide a solid
    foundation to the use of other tools we will explore later on in this chapter.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 除了命令行工具外，Aircrack-ng还用于许多基于GUI的工具。对Aircrack-ng的工作原理有扎实的了解将为我们稍后在本章中探讨的其他工具的使用提供坚实的基础。
- en: WPA pre-shared key-cracking
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WPA预共享密钥破解
- en: 'Now we will use the Aircrack-ng suite of tools against a WPA2 wireless network.
    The process involves identifying our target network, capturing the four-way handshake,
    and then utilizing a wordlist to brute-force the passcode that, in combination
    with the wireless network''s SSID, is the pre-shared key. By cracking the passcode,
    we will then be able to authenticate to the target wireless network:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用Aircrack-ng套件的工具来攻击WPA2无线网络。该过程涉及识别我们的目标网络，捕获四路握手，然后利用一个字典来暴力破解与无线网络的SSID相结合的密码，即预共享密钥。通过破解密码，我们将能够对目标无线网络进行身份验证：
- en: 'Ensure that you have your wireless network card inserted and that it is working
    properly. For this, enter the following command into the command line:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您已插入无线网络卡，并且它正常工作。为此，请在命令行中输入以下命令：
- en: '[PRE3]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The command should output something similar to the following screenshot. If
    you do not see the wireless interface, ensure that it is properly configured:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令应输出类似于以下屏幕截图的内容。如果您没有看到无线接口，请确保它已正确配置：
- en: '![](img/efe691cc-680d-40cd-85b0-d92879df6338.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efe691cc-680d-40cd-85b0-d92879df6338.png)'
- en: Here we have identified our wireless interface as `wlan0`. If you have more
    than one interface, you may see `wlan1` as well. Be sure you are using the correct
    interface during these tests.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们已经将我们的无线接口标识为`wlan0`。如果您有多个接口，您可能也会看到`wlan1`。在进行这些测试时，请确保您使用的是正确的接口。
- en: 'The first tool we will use in the Aircrack-ng suite is `airmon-ng`. This tool
    allows us to change our wireless network card into what is known as monitor mode.
    This is much like placing a network interface into promiscuous mode. This allows
    us to capture more traffic than just what we would see with a normal wireless
    network card. To find out the options available in `airmon-ng`, type the following:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Aircrack-ng套件中我们将使用的第一个工具是`airmon-ng`。这个工具允许我们将无线网络卡切换到所谓的监视模式。这很像将网络接口放入混杂模式。这使我们能够捕获比普通无线网络卡看到的更多的流量。要找出`airmon-ng`中可用的选项，输入以下命令：
- en: '[PRE4]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will produce the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下结果：
- en: '![](img/01c3fe6b-030c-452d-815f-e5b6cafcabcd.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/01c3fe6b-030c-452d-815f-e5b6cafcabcd.png)'
- en: 'To change our wireless network card to monitor mode, type the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要将无线网络卡切换到监视模式，输入以下命令：
- en: '[PRE5]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If successful, we will see this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功，我们会看到这个：
- en: '![](img/f5c1d4b2-b3e6-4663-b3cd-73c0a1dec5c7.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5c1d4b2-b3e6-4663-b3cd-73c0a1dec5c7.png)'
- en: 'If we check the interfaces again using `iwconfig`, we can see that our interface
    has been changed as well:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次使用`iwconfig`检查接口，我们会看到我们的接口也已经改变了：
- en: '![](img/515e1605-246e-409a-91e3-f83dc52575c9.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/515e1605-246e-409a-91e3-f83dc52575c9.png)'
- en: 'Sometimes, there are processes that interfere with putting the wireless card
    into monitor mode. When you execute the `airmon-ng start wlan0` command, you may
    see the following message:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 有时会有干扰将无线卡放入监视模式的进程。当执行`airmon-ng start wlan0`命令时，可能会看到以下消息：
- en: '![](img/f7250e26-c88e-424f-b288-65846659b4fc.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f7250e26-c88e-424f-b288-65846659b4fc.png)'
- en: 'In this case, there are three possible processes that can interfere with the
    wireless card in monitor mode. In this case, we run the following command:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，有三个可能干扰监视模式下无线卡的进程。在这种情况下，我们运行以下命令：
- en: '[PRE6]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](img/4a76d2c1-7fcb-42bf-bb7d-cc17c46782e5.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4a76d2c1-7fcb-42bf-bb7d-cc17c46782e5.png)'
- en: 'At this point, issuing the following commands will allow us to proceed:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，执行以下命令将允许我们继续：
- en: '[PRE7]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This kills the processes that can interfere with `airmon-ng`. To re-enable
    these processes, type the following two commands into the command line, once you
    are done using the Aircrack-ng tools:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这会终止可能干扰`airmon-ng`的进程。要重新启用这些进程，在使用Aircrack-ng工具完成后，输入以下两个命令到命令行中：
- en: '[PRE8]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If there are still any issues, you can restart Kali Linux and these services
    will be re-enabled.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果仍然有任何问题，可以重新启动Kali Linux，这些服务将被重新启用。
- en: 'In the next step, we need to scan for our target network. In the previous section,
    we discussed some of the reconnaissance necessary to identify potential target
    networks. In this case, we are going to use a tool called `airodump-ng` to identify
    our target network, as well as identify the BSSID it is using and the channel
    it is broadcasting on. To access the options for `airodump-ng`, type the following
    into Command Prompt:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，我们需要扫描我们的目标网络。在上一节中，我们讨论了一些必要的侦察工作来识别潜在的目标网络。在这种情况下，我们将使用一个名为`airodump-ng`的工具来识别我们的目标网络，以及确定它正在使用的BSSID和正在广播的信道。要访问`airodump-ng`的选项，输入以下命令到命令提示符中：
- en: '[PRE9]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will produce the following partial output:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下部分输出：
- en: '![](img/f0002a72-7680-4b0d-93ef-0095d7fb22bb.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f0002a72-7680-4b0d-93ef-0095d7fb22bb.png)'
- en: 'Now we will use the `airodump-ng` command to identify our target network. Type
    the following command:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用`airodump-ng`命令来识别我们的目标网络。输入以下命令：
- en: '[PRE10]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`airodump-ng` will run as long as you let it. Once you see the target network,
    press *Ctrl* + *C* to stop. You will see the following output. We have identified
    the network we are going to try to crack in red:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`airodump-ng`会一直运行，直到你停止它。一旦看到目标网络，按下*Ctrl* + *C*来停止。你会看到以下输出。我们已经用红色标识出了我们要尝试破解的网络：'
- en: '![](img/99fc1e78-500b-4e63-987b-3b67631702b3.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99fc1e78-500b-4e63-987b-3b67631702b3.png)'
- en: 'The previous step has identified three key pieces of information for us. First,
    we have identified our target network, `Aircrack_Wifi`. Second, we have the BSSID,
    which is the MAC address for the target network, `44:94:FC:37:10:6E`, and finally,
    the channel number, `6`. The next stage is to capture wireless traffic to and
    from our target access point. Our goal is to capture the four-way handshake. To
    start capturing traffic, type the following into the Command Prompt:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上一步为我们确定了三个关键信息。首先，我们确定了我们的目标网络`Aircrack_Wifi`。其次，我们有了BSSID，即目标网络的MAC地址`44:94:FC:37:10:6E`，最后，信道号`6`。下一步是捕获与我们的目标接入点之间的无线流量。我们的目标是捕获四次握手。要开始捕获流量，输入以下命令到命令提示符中：
- en: '[PRE11]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The command tells `airodump-ng` to use the monitor interface to capture traffic
    for the BSSID and channel of our target network. The following screenshot shows
    the output of the command:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令告诉`airodump-ng`使用监视接口来捕获目标网络的BSSID和信道的流量。以下截图显示了命令的输出：
- en: '![](img/ff3bbc97-b086-4c61-bb2d-b5ad833199cb.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ff3bbc97-b086-4c61-bb2d-b5ad833199cb.png)'
- en: 'As the command runs, we want to ensure that we capture that handshake. In the
    event that a client connects with a valid handshake, the command output shows
    the handshake as having been captured:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当命令运行时，我们要确保捕获到握手。如果客户端连接并获得有效的握手，命令输出会显示已捕获到握手：
- en: '![](img/ab123482-4e71-47ee-9664-d06555dea13b.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab123482-4e71-47ee-9664-d06555dea13b.png)'
- en: 'In the event that you are not able to obtain the WPA handshake, look to see
    whether there is a client accessing the network. In this case, we see a station
    attached to the target wireless network with the MAC address of `64:A5:C3:DA:30:DC`.
    As this device has authenticated, it will most likely automatically reconnect
    in the event that the connection is temporarily lost. In this case, we can type
    the following command into command line:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果无法获得WPA握手，查看是否有客户端访问网络。在这种情况下，我们看到一个连接到目标无线网络的站点，MAC地址为`64:A5:C3:DA:30:DC`。由于这个设备已经认证，它很可能在连接暂时丢失时自动重新连接。在这种情况下，我们可以在命令行中输入以下命令：
- en: '[PRE12]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `aireplay-ng` command allows us to inject packets into the communication
    stream and de-authenticate the client. This will then force the client to complete
    a new WPA handshake that we can capture.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`aireplay-ng`命令允许我们向通信流中注入数据包并取消客户端的认证。然后，这将迫使客户端完成一个我们可以捕获的新的WPA握手。'
- en: 'After we have captured the handshake, we stop `airodump-ng` by pressing *Ctrl*
    + *C*. If we examine the root folder, we will see four files that have been created
    from our dump:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们捕获到握手后，我们通过按下*Ctrl* + *C*来停止`airodump-ng`。如果我们检查根文件夹，我们会看到从我们的转储中创建的四个文件：
- en: '![](img/304decfd-c197-464a-8aff-fb29e0e1fa0d.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/304decfd-c197-464a-8aff-fb29e0e1fa0d.png)'
- en: 'We can examine the `wificrack-01.cap` file in Wireshark. If we drill down to
    the EAPOL protocol, we can actually see the four-way handshake that we have captured:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在Wireshark中检查`wificrack-01.cap`文件。如果我们深入到EAPOL协议，我们实际上可以看到我们捕获到的四路握手：
- en: '![](img/da1d297a-1856-424c-b220-e37db5b15198.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da1d297a-1856-424c-b220-e37db5b15198.png)'
- en: 'Further examination shows the specific WPA key Nonce and its associated information:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步的检查显示了特定的WPA密钥Nonce及其相关信息：
- en: '![](img/d2b90d0c-7cef-4958-a8f5-2b78aa56b721.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d2b90d0c-7cef-4958-a8f5-2b78aa56b721.png)'
- en: 'We have the information necessary to attempt to crack the WPA pre-shared key.
    To do this, we use the `aircrack-ng` tool. The following is the `aircrack-ng`
    command:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们有必要的信息来尝试破解WPA预共享密钥。为此，我们使用`aircrack-ng`工具。以下是`aircrack-ng`命令：
- en: '[PRE13]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the preceding command, we are identifying the target network''s BSSID with
    the `-b` option. We then point towards the capture file, `wificrack-01.cap`. Finally,
    we utilize a wordlist in much the same way we would crack a password file. In
    this case, we will use the `rockyou.txt` wordlist. Once the command is set, hit
    *Enter* and `aircrack-ng` will start working:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的命令中，我们使用`-b`选项标识目标网络的BSSID。然后，我们指向捕获文件`wificrack-01.cap`。最后，我们使用一个单词列表，就像我们会破解密码文件一样。在这种情况下，我们将使用`rockyou.txt`单词列表。一旦命令设置好，按*Enter*，`aircrack-ng`就会开始工作：
- en: '![](img/d5f7e6ad-1587-45ec-b00a-5421099b810c.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d5f7e6ad-1587-45ec-b00a-5421099b810c.png)'
- en: 'Aircrack-ng will utilize the `rockyou.txt` password list and try every combination
    against the capture file. If the `passcode` utilized in the pre-shared key is
    within the file, `aircrack-ng` will produce the following message:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Aircrack-ng将利用`rockyou.txt`密码列表并尝试对捕获文件进行每种组合。如果预共享密钥中使用的`passcode`在文件中，`aircrack-ng`将产生以下消息：
- en: '![](img/f27753ee-96d5-4e75-b4fb-c782c68bb75e.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f27753ee-96d5-4e75-b4fb-c782c68bb75e.png)'
- en: From the preceding screenshot, we can see that `passcode "15SHOUTINGspiders"`
    was in the `rockyou.txt` file we used to brute-force. Also note that this took
    approximately one hour and 42 minutes, and ended up trying a total of 8,623,648
    different passcodes. This technique can be attempted with any password list much
    the same way we discussed in the password-cracking chapter. Just remember that
    the passcode can be anywhere from 8 to 63 characters in length. The amounts of
    combinations that are available are too numerous to try. This attack, though,
    is successful against easy-to-remember or short passphrases, much the same way
    password-cracking is.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的截图中，我们可以看到`passcode "15SHOUTINGspiders"`在我们用于暴力破解的`rockyou.txt`文件中。还要注意，这大约花了一小时42分钟，最终尝试了总共8,623,648个不同的passcodes。这种技术可以尝试使用任何密码列表，就像我们在密码破解章节中讨论的那样。只要记住，passcode的长度可以是8到63个字符。可用的组合数量太多，无法尝试。不过，这种攻击对于易记或短密码短语是成功的，就像密码破解一样。
- en: WEP-cracking
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WEP破解
- en: 'The process for WEP-cracking is very similar to that which was utilized for
    cracking WPA. Identify the target network, capture traffic, which includes the
    authentication mechanism, and then point a brute-force attack to reverse the key.
    There are some differences, though. As opposed to WPA-cracking, where all we had
    to do was capture the four-way handshake, in WEP-cracking, we have to ensure we
    gather enough of the **Initialization Vectors** (**IVs**) to properly crack the
    WEP key. Although this may seem like a tall order, techniques are available to
    force this process and make the time necessary to sniff traffic as short as possible:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: WEP破解的过程与用于破解WPA的过程非常相似。识别目标网络，捕获流量（包括认证机制），然后指向一个暴力破解攻击以反向密钥。不过，也有一些不同之处。与WPA破解相反，我们只需要捕获四路握手，而在WEP破解中，我们必须确保收集足够的**初始化向量**（**IVs**）以正确破解WEP密钥。虽然这可能看起来很困难，但有技术可用来强制这个过程，并使得嗅探流量所需的时间尽可能短。
- en: 'To start the process of cracking WEP, we put our wireless card into monitor
    mode in the same fashion as in WPA-cracking. Type the following command:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了开始WEP破解过程，我们以与WPA破解相同的方式将无线网卡置于监视模式。输入以下命令：
- en: '[PRE14]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We attempt to find our target network using the following command:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们尝试使用以下命令找到目标网络：
- en: '[PRE15]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This produces the list of wireless networks:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了无线网络列表：
- en: '![](img/ef80c30e-8ba5-493a-baf8-edcbe6236195.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ef80c30e-8ba5-493a-baf8-edcbe6236195.png)'
- en: We have identified a target network running WEP with the BSSID of `C0:56:27:DB:30:41`.
    In the same vein, we need to make a note of that, as well as the channel that
    the access point is using, in this case, channel `11`.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经确定了一个使用BSSID为`C0:56:27:DB:30:41`的WEP目标网络。同样，我们需要记下这一点，以及接入点使用的频道，这种情况下是`11`频道。
- en: 'Capture the data on the target wireless network. Here we will use the `airodump-ng`
    command to capture this data:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 捕获目标无线网络的数据。在这里，我们将使用`airodump-ng`命令来捕获这些数据：
- en: '[PRE16]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This command points `airdump-ng` to our target network on the appropriate channel.
    In addition, we are capturing traffic written to the `"belkincrack"` file. This
    command produces the following output:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将`airdump-ng`指向我们目标网络的适当频道。此外，我们正在捕获写入`"belkincrack"`文件的流量。这个命令产生以下输出：
- en: '![](img/4ae32059-8e0f-42fd-870d-651187191b4b.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4ae32059-8e0f-42fd-870d-651187191b4b.png)'
- en: Note that we do not see any data moving across this access point yet. This is
    important, as we need to capture data packets that contain IVs in order to crack
    the WEP key.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们尚未看到任何数据通过该接入点移动。这很重要，因为我们需要捕获包含IVs的数据包，以便破解WEP密钥。
- en: 'We have to fake an authentication to our target network. Essentially, we are
    using an Aircrack-ng tool called `aireplay-ng` to tell the access point that we
    have the proper WEP key and are ready to authenticate. Even though we do not have
    the proper key, the following command lets us fake an authentication and allows
    us to communicate with the WEP access point:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须伪装认证到我们的目标网络。基本上，我们使用一个名为`aireplay-ng`的Aircrack-ng工具告诉接入点我们有正确的WEP密钥，并且准备好进行认证。即使我们没有正确的密钥，以下命令也让我们伪装认证，并允许我们与WEP接入点进行通信：
- en: '[PRE17]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the preceding command, we have `aireplay-ng` fake the authentication with
    `"-1"`, `"0"` as the retransmission time, and `"-a"` as the BSSID of our target
    access point. The command produces the following:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述命令中，我们让`aireplay-ng`使用`"-1"`伪装认证，`"0"`作为重传时间，`"-a"`作为目标接入点的BSSID。该命令产生以下结果：
- en: '![](img/5f3cb2a5-be14-4865-a72a-4c7c6e42b49a.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5f3cb2a5-be14-4865-a72a-4c7c6e42b49a.png)'
- en: We now have the ability to communicate with the WEP access point.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有能力与WEP接入点进行通信。
- en: 'As we saw in step 3, there was very little data moving back and forth through
    the access point. We need to capture a great deal of data to ensure that we are
    able to grab those IVs and force a collision. We can again use `aireplay-ng` to
    increase the data to the access point. In the following command, we are going
    to conduct an ARP Request Replay Attack. In this attack, we are going to use `aireplay-ng`
    to retransmit ARP requests to the access point. Each time it does this, it generates
    a new IV, increasing our chances of forcing that collision. Open a second command
    prompt and type the following:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如我们在步骤3中看到的，通过该接入点来回传输的数据非常少。我们需要捕获大量数据，以确保我们能够抓住那些IVs并强制发生碰撞。我们可以再次使用`aireplay-ng`来增加数据到接入点。在以下命令中，我们将进行ARP请求重放攻击。在这种攻击中，我们将使用`aireplay-ng`向接入点重发ARP请求。每次这样做时，它都会生成一个新的IV，增加我们强制发生碰撞的机会。打开第二个命令提示符，输入以下内容：
- en: '[PRE18]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In the preceding command, `"-3"` tells `aireplay-ng` to conduct the ARP Request
    Replay Attack against the following network, `"-b"` on the specific interface,
    `"wlanomon"`. Once the command runs, you need to force the ARP requests by pinging
    another host on the same network. This will force the ARP requests. Once that
    is started, you will see the following output:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述命令中，`"-3"`告诉`aireplay-ng`对以下网络进行ARP请求重放攻击，`"-b"`是特定接口`"wlanomon"`。命令运行后，您需要通过ping同一网络上的另一个主机来强制ARP请求。这将强制ARP请求。一旦开始，您将看到以下输出：
- en: '![](img/59230ea0-4e8d-4068-93b0-b0c3e0960647.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/59230ea0-4e8d-4068-93b0-b0c3e0960647.png)'
- en: 'If we return to the first Command Prompt, where `airodump-ng` is running, we
    see the data rate start to increase. In this case, over 16,000 IVs:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回到第一个正在运行`airodump-ng`的命令提示符，我们会看到数据速率开始增加。在这种情况下，超过16,000个IVs：
- en: '![](img/6647269f-543b-4d7c-a067-fea572cfed1c.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6647269f-543b-4d7c-a067-fea572cfed1c.png)'
- en: 'Open a third Terminal. Here we are going to start the WEP-cracking. This can
    run while the `airodump-ng` command is capturing IVs. To start the process, type
    the following command:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开第三个终端。在这里，我们将开始WEP破解。这可以在`airodump-ng`命令捕获IVs的同时运行。要启动该过程，请输入以下命令：
- en: '[PRE19]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Here we are simply pointing `aircrack-ng` to the capture file that is running.
    `aircrack-ng` starts working immediately, as the screenshot indicates:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述命令中，`aircrack-ng`指向正在运行的捕获文件。`aircrack-ng`立即开始工作，如截图所示：
- en: '![](img/2c9f43e3-2624-4583-b348-60b834a05f87.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c9f43e3-2624-4583-b348-60b834a05f87.png)'
- en: '`aircrack-ng` may indicate that there are not enough IVs and that it will reattempt
    when there are enough IVs. As we see in the following screenshot, `aircrack-ng`
    was able to determine the WEP key. All told, there were 15,277 IVs that had been
    captured, which were utilized for the cracking. In addition, `73253` keys were
    tested in less than three minutes:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`aircrack-ng`可能会指示IVs不足，并在IVs足够时重新尝试。正如我们在以下截图中看到的，`aircrack-ng`能够确定WEP密钥。总共捕获了15,277个IVs，用于破解。此外，在不到三分钟内测试了73253个密钥：'
- en: '![](img/cb7d24c1-d1e7-401b-9978-695213dbb61e.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cb7d24c1-d1e7-401b-9978-695213dbb61e.png)'
- en: As we can see in this attack, with the right amount of wireless traffic and
    the `aircrack-ng` suite of tools, we were able to determine the WEP key that allows
    us to authenticate to the network. It is the ease of this attack that has seen
    the move from WEP to WPA authentication. While WEP networks are becoming rarer
    in the wild because of this attack, you still may seem some. If you do come across
    them, this attack is fantastic for demonstrating to clients the significant security
    vulnerabilities present.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在这次攻击中看到的，通过正确数量的无线流量和`aircrack-ng`工具套件，我们能够确定WEP密钥，从而允许我们对网络进行认证。正是这种攻击的简易性导致了从WEP到WPA认证的转变。虽然由于这种攻击，WEP网络在野外变得越来越少，但您仍然可能会遇到一些。如果您确实遇到它们，这种攻击非常适合向客户展示存在的重大安全漏洞。
- en: PixieWPS
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PixieWPS
- en: 'PixieWPS is an offline brute-forcing tool that is utilized to reverse the PIN
    of a WPS wireless access point. The name of PixieWPS comes from the Pixie-Dust
    attack that was discovered by Dominique Bongard. This vulnerability allows for
    the brute forcing of the WPS PIN. (For more detailed information on this vulnerability,
    see Bongard''s presentation: [https://passwordscon.org/wp-content/uploads/2014/08/Dominique_Bongard.pdf](https://passwordscon.org/wp-content/uploads/2014/08/Dominique_Bongard.pdf).)'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: PixieWPS是一种离线暴力破解工具，用于破解WPS无线接入点的PIN。PixieWPS的名称来自Dominique Bongard发现的Pixie-Dust攻击。此漏洞允许对WPS
    PIN进行暴力破解。（有关此漏洞的更详细信息，请参阅Bongard的演示：[https://passwordscon.org/wp-content/uploads/2014/08/Dominique_Bongard.pdf](https://passwordscon.org/wp-content/uploads/2014/08/Dominique_Bongard.pdf)。）
- en: 'To access PixieWPS, type the following into Command Prompt:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问PixieWPS，请在命令提示符中输入以下内容：
- en: '[PRE20]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The command will give you the different command options. In order for PixieWPS
    to work properly, a good deal of information must be obtained. This includes the
    following:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将为您提供不同的命令选项。为了使PixieWPS正常工作，必须获取大量信息。这包括以下内容：
- en: Enrollee public key
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 受训者公钥
- en: Registrant public key
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册公钥
- en: Enrollee Hash-1
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 受训者哈希-1
- en: Enrollee Hash-2
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 受训者哈希-2
- en: Authentication session key
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证会话密钥
- en: Enrollee nonce
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 受训者nonce
- en: Because of all these components that are required, PixieWPS is often run as
    part of another tool, such as Wifite.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 由于需要所有这些组件，PixieWPS通常作为另一个工具的一部分运行，比如Wifite。
- en: Wifite
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Wifite
- en: Wifite is an automated wireless penetration-testing tool that utilizes the tools
    associated with Aircrack-ng and the Reaver and PixieWPS command-line tools.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: Wifite是一个自动化的无线渗透测试工具，利用了与Aircrack-ng、Reaver和PixieWPS命令行工具相关的工具。
- en: 'This gives Wifite the ability to capture traffic and reverse the authentication
    credentials for WEP-, WPA-, and WPS-type wireless networks. Navigate to Applications
    | Wireless Attacks | Wifite or through command line to start Wifite:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得Wifite能够捕获流量并反向验证WEP、WPA和WPS类型的无线网络的认证凭据。导航到应用程序|无线攻击|Wifite或通过命令行启动Wifite：
- en: '[PRE21]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Either will bring you to the initial screen:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 任一都会带您到初始屏幕：
- en: '![](img/4bdb099f-22fc-4b40-ac64-ba4d85cef47e.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4bdb099f-22fc-4b40-ac64-ba4d85cef47e.png)'
- en: 'Wifite will automatically put the wireless card into monitor mode and then
    start to scan for wireless networks:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Wifite将自动将无线卡置于监视模式，然后开始扫描无线网络：
- en: '![](img/f78d12a6-0bc8-449c-942c-16d9d7be1770.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f78d12a6-0bc8-449c-942c-16d9d7be1770.png)'
- en: 'Once you see the target network in the list, in this case the ESSID or broadcast
    SSID Brenner, hit *Ctrl* + *C*. At that time, you will be prompted to enter either
    a single number or a range for testing. In this case, we enter the number `4`
    and hit *Enter*:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在列表中看到目标网络，比如ESSID或广播SSID Brenner，按下*Ctrl* + *C*。这时，您将被提示输入一个单个数字或一个测试范围。在这种情况下，我们输入数字`4`并按*Enter*：
- en: '![](img/17d37599-ad2c-46fe-adef-47d18a499dc3.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17d37599-ad2c-46fe-adef-47d18a499dc3.png)'
- en: 'Wifite automatically starts the WPS Pixie attack by capturing the necessary
    information. If successful, the following will display:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: Wifite会自动通过捕获必要的信息来启动WPS Pixie攻击。如果成功，将显示以下内容：
- en: '![](img/ba7de24f-f539-4480-a400-4fb60fda8a5a.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba7de24f-f539-4480-a400-4fb60fda8a5a.png)'
- en: If the WPS vulnerability is present, as in the case of the wireless network
    here, Wifite is able to determine both the WPA key and the PIN.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在WPS漏洞，就像这里的无线网络一样，Wifite能够确定WPA密钥和PIN。
- en: Fern Wifi-Cracker
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Fern Wifi-Cracker
- en: 'The Fern Wifi-Cracker is a GU- based tool written in Python for testing the
    security of wireless networks. There are currently two supported versions: a paid,
    professional version that has a great deal more functionality, and a free version
    that has limited functionality. The version included with Kali Linux requires
    `aircrack-ng` and other wireless tools to function properly.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: Fern Wifi-Cracker是一个用Python编写的基于GUI的工具，用于测试无线网络的安全性。目前有两个支持的版本：一个是付费的专业版本，具有更多的功能，另一个是免费版本，功能有限。Kali
    Linux附带的版本需要`aircrack-ng`和其他无线工具才能正常运行。
- en: 'To start Fern, you can navigate to Applications | Wireless Attacks | Fern Wifi
    Cracker, or type the following into command prompt:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动Fern，您可以导航到应用程序|无线攻击|Fern Wifi Cracker，或者在命令提示符中键入以下内容：
- en: '[PRE22]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The following screenshot is the initial page that loads:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图是加载的初始页面：
- en: '![](img/b29be887-c9fc-474e-b7cf-49a2641c92d0.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b29be887-c9fc-474e-b7cf-49a2641c92d0.png)'
- en: 'We will use the Fern Wifi Cracker to attack the same wireless network, Aircrack-Wifi,
    utilizing the GUI instead of having to use the command line in our attack:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Fern Wifi Cracker来攻击相同的无线网络Aircrack-Wifi，利用GUI而不是使用命令行进行攻击：
- en: 'Select the interface. Click on the Select Interface drop-down menu. In this
    case, we will select wlan0\. Fern will automatically place our interface into
    monitor mode for us:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择接口。单击“选择接口”下拉菜单。在这种情况下，我们将选择wlan0。Fern将自动将我们的接口置于监视模式：
- en: '![](img/f68397a3-37ba-44d6-b68f-7e8787c1a9a8.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f68397a3-37ba-44d6-b68f-7e8787c1a9a8.png)'
- en: 'Click on the Scan for Access Points button. Fern will automatically scan for
    wireless networks within range of your antenna. After the scanning is complete,
    the Wifi WEP and WiFi WPA buttons will change from grayed-out to colored, indicating
    wireless access points utilizing those security settings have been detected:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“扫描访问点”按钮。Fern将自动扫描天线范围内的无线网络。扫描完成后，Wifi WEP和WiFi WPA按钮将从灰色变为彩色，表示检测到使用这些安全设置的无线访问点：
- en: '![](img/03335b4a-7702-4a07-a09a-4f11e0d22872.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/03335b4a-7702-4a07-a09a-4f11e0d22872.png)'
- en: Clicking on the Wifi WPA button displays an attack panel, which contains a graphical
    representation of the WPA wireless access points that we can attack. In this case,
    we will select the button for Aircrack_Wifi:![](img/83f620b6-8ddb-4af1-abfb-b1725a4b359d.png)
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击Wifi WPA按钮会显示一个攻击面板，其中包含我们可以攻击的WPA无线访问点的图形表示。在这种情况下，我们将选择Aircrack_Wifi按钮！[](img/83f620b6-8ddb-4af1-abfb-b1725a4b359d.png)
- en: This screen provides details about the selected access point. In addition, Fern
    Wifi Cracker allows for a WPA attack or a WPS attack. In this case, we will stay
    with a WPA attack:![](img/c8335752-2280-48c1-82ec-769b4ba93e11.png)
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此屏幕提供了有关所选访问点的详细信息。此外，Fern Wifi Cracker允许进行WPA攻击或WPS攻击。在这种情况下，我们将使用WPA攻击！[](img/c8335752-2280-48c1-82ec-769b4ba93e11.png)
- en: Set the passcode file that Fern Wifi-Cracker will use to reverse the passcode.
    In this case, we have crafted a special Wi-Fi passcode list and point Fern Wifi-Cracker
    to that text file:![](img/b5271b9f-5995-44b3-be4d-198794ecd298.png)
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置Fern Wifi-Cracker将用于反向密码的密码文件。在这种情况下，我们制作了一个特殊的Wi-Fi密码列表，并将Fern Wifi-Cracker指向该文本文件！[](img/b5271b9f-5995-44b3-be4d-198794ecd298.png)
- en: 'Click on the Wifi Attack button. Fern Wifi-Cracker completes the entire process
    we previously covered in the Aircrack-ng section. This includes de-authenticating
    a client, then capturing the four-way handshake. Finally, Fern Wifi-Cracker will
    move through the passcode file and, if the passcode is in that file, the following
    message appears:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击Wifi攻击按钮。Fern Wifi-Cracker完成了我们之前在Aircrack-ng部分介绍的整个过程。这包括解认证客户端，然后捕获四次握手。最后，Fern
    Wifi-Cracker将通过密码文件，并且如果密码文件中有该密码，将出现以下消息：
- en: '![](img/cb49a80e-9301-4a30-9973-1fc4ab25db9f.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cb49a80e-9301-4a30-9973-1fc4ab25db9f.png)'
- en: Fern Wifi-Cracker takes care of the backend work in terms of cracking Wi-Fi
    network and access points. While it may seem easier to use this tool, it is best
    to have a solid understanding of how Aircrack-ng works. Fern Wifi-Cracker and
    other GUI-based Wi-Fi cracking programs are based around Aircrack-ng, and having
    a solid understanding of that toolset allows you to fully understand what is happening
    behind the scenes with such programs.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: Fern Wifi-Cracker负责破解Wi-Fi网络和接入点的后台工作。虽然使用这个工具可能更容易，但最好对Aircrack-ng的工作原理有一个扎实的理解。Fern
    Wifi-Cracker和其他基于GUI的Wi-Fi破解程序都是基于Aircrack-ng的，对该工具集有扎实的理解可以让您完全理解这些程序背后发生了什么。
- en: Evil Twin attack
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 恶意双子攻击
- en: It's practically impossible to go into any major city or corporate environment
    and not find a Wi-Fi signal. Many of these, particularly in public spaces, Wi-Fi
    spots require no authentication and others present you with a captive portal that
    may just require you to accept some terms and conditions or require you to log
    in using something such as your email or Facebook account.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何大城市或企业环境中几乎不可能找不到Wi-Fi信号。其中许多，特别是在公共场所，Wi-Fi热点不需要身份验证，其他则会显示一个强制门户，可能只需要您接受一些条款和条件，或者要求您使用您的电子邮件或Facebook账户登录。
- en: An Evil Twin attack, also known as a Rogue Access Point or a Fake Access Point,
    is an access point that masquerades as a legitimate access point without the owner's
    knowledge or consent. End users who would connect to the legitimate access point
    will connect to the fake point as it is generally the stronger signal.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意双子攻击，也称为流氓接入点或虚假接入点，是一个伪装成合法接入点而没有所有者知识或同意的接入点。连接到合法接入点的终端用户将连接到虚假接入点，因为虚假接入点通常信号更强。
- en: The attacker who set up the fake point will now be able to get capture the actual
    password for a password-protected SSID, setting the stage for Man-in-the-Middle
    and other attacks.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 设置了虚假接入点的攻击者现在将能够捕获受密码保护的SSID的实际密码，为中间人和其他攻击做好准备。
- en: 'We''re going to need to include the Aircrack Suite and `dnsmasq`. dnsmasq is
    a small, lightweight tool that acts as an easy-to-configure DNS forwarder and
    DHCP server. Depending on the attack vector you''d like to use, you''ll need some
    additional tools, such as `apache2` and `dnsspoof`:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要包括Aircrack Suite和`dnsmasq`。dnsmasq是一个小巧、轻量级的工具，可以作为易于配置的DNS转发器和DHCP服务器。根据您想要使用的攻击向量，您将需要一些额外的工具，比如`apache2`和`dnsspoof`：
- en: Verify that you have the tools. We know the Aircrack tools and Apache2 are pre-installed
    on Kali. In a Terminal, enter `apt-get install dnsmasq`. If it’s already installed,
    you’ll have nothing to do; if not, you’ll be prompted with an installation confirmation.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证您是否拥有这些工具。我们知道Aircrack工具和Apache2已经预装在Kali上。在终端中，输入`apt-get install dnsmasq`。如果已经安装，您将无需进行任何操作；如果没有安装，系统将提示您进行安装确认。
- en: 'Determine your target network by putting one of your wireless adapters into
    monitor mode with `airmon-ng start <interface>` and then launch `airodump-ng <interface>`
    to start listing all the networks currently being broadcast:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将无线适配器之一设置为监视模式`airmon-ng start <interface>`来确定目标网络，然后启动`airodump-ng <interface>`来开始列出当前正在广播的所有网络：
- en: '![](img/0620d16c-acc6-4dec-8d62-da28ee9f42d5.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0620d16c-acc6-4dec-8d62-da28ee9f42d5.png)'
- en: '![](img/8a903d37-72fb-45e7-88a3-ff8cdb37d39b.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8a903d37-72fb-45e7-88a3-ff8cdb37d39b.png)'
- en: 'You may see errors similar to those in the screenshot. In most cases, these
    are safe to ignore. If you encounter issues, use `kill <PID>` to end the process.
    For example, I would use kill `610` to end the `NetworkManager` process:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能会看到类似于屏幕截图中的错误。在大多数情况下，这些错误是可以忽略的。如果遇到问题，使用`kill <PID>`来结束进程。例如，我会使用`kill
    610`来结束`NetworkManager`进程：
- en: '![](img/2209b3b4-d3c2-4d78-a17f-ae133e19be45.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2209b3b4-d3c2-4d78-a17f-ae133e19be45.png)'
- en: Note the BSSID (MAC Address), ESSID (broadcast name, SSID), and channel of the
    target network.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 注意目标网络的BSSID（MAC地址）、ESSID（广播名称、SSID）和信道。
- en: 'Set up a configuration file for `dnsmasq` to work with. I created a folder
    in my home directory called `tmp` using `mkdir tmp`. Changed the directory, then
    at the terminal entered `touch dnsmasq.conf`. This will create a file called `dnsmasq`.
    Typing `nano dnsmasq.conf` will open the `dnsmasq.conf` file in the `cli` nano
    text editor. Enter the following lines:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个`dnsmasq`的配置文件。我在我的主目录下创建了一个名为`tmp`的文件夹，使用`mkdir tmp`。然后改变目录，在终端输入`touch
    dnsmasq.conf`。这将创建一个名为`dnsmasq`的文件。输入`nano dnsmasq.conf`将在`cli`的`nano`文本编辑器中打开`dnsmasq.conf`文件。输入以下行：
- en: '[PRE23]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the `dnsmasq.conf` file, we just specified the interface (`at0`), the `dhcp`
    range to use (`10.0.0.10 - 10.0.0.250`, `12h` lease time), `dhcp-option=3` as
    the gateway (`10.0.0.1`), and `dhcp-option=3` as the DNS server (`10.0.0.1`).
    Why is the interface `at0`? This is because `airbase-ng` creates a default bridge
    interface known as `at0`.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在`dnsmasq.conf`文件中，我们只指定了接口（`at0`）、要使用的`dhcp`范围（`10.0.0.10 - 10.0.0.250`，`12h`租约时间）、`dhcp-option=3`作为网关（`10.0.0.1`），以及`dhcp-option=3`作为DNS服务器（`10.0.0.1`）。为什么接口是`at0`？这是因为`airbase-ng`创建了一个名为`at0`的默认桥接口。
- en: Save your changes in nano with *Ctrl* + *O*, *Y* and exit with *Ctrl* + *X*.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*Ctrl* + *O*在nano中保存更改，使用*Ctrl* + *X*退出。
- en: 'Set up `airbase-ng`. This will create our access point. Set it up using `airbase-ng
    -e <ESSID> -c <channel> <monitor interface>`. My target `ESSID` is set to `ARRIS-4BE2`,
    the channel is set to `11`, and the monitor interface is `wlan0mon`:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置`airbase-ng`。这将创建我们的访问点。使用`airbase-ng -e <ESSID> -c <channel> <monitor interface>`进行设置。我的目标`ESSID`设置为`ARRIS-4BE2`，频道设置为`11`，监视接口为`wlan0mon`：
- en: '![](img/9f50d5a8-29cb-4eb3-b6e0-ba639778b290.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9f50d5a8-29cb-4eb3-b6e0-ba639778b290.png)'
- en: Enable the `at0` interface, work with `iptables` a bit, and enable/disable traffic
    to pass. You can do these one after the other, as shown.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用`at0`接口，稍微调整`iptables`，并启用/禁用流量通过。您可以像之前一样依次执行这些操作。
- en: '![](img/4d167000-68b1-495e-99a2-16393f2a3020.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4d167000-68b1-495e-99a2-16393f2a3020.png)'
- en: '![](img/a96ceae2-7b3f-408a-8df6-9eb20edc6642.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a96ceae2-7b3f-408a-8df6-9eb20edc6642.png)'
- en: 'Launch `dnsmasq` with `dnsmasq -C <config file> -d`:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '使用`dnsmasq -C <config file> -d`启动`dnsmasq`： '
- en: '![](img/2fea28c9-7885-478e-8903-caeb167e5a24.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2fea28c9-7885-478e-8903-caeb167e5a24.png)'
- en: You can prevent traffic from passing and capture the IVS as previously shown
    (using `echo 0 > /proc/sys/net/ipv4/ip_forward`), or you can present the user
    with a captive portal or allow traffic to pass (using `echo 1 > /proc/sys/net/ipv4/ip_forward`)
    only redirecting specific target sites to set up a MitM attack.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以阻止流量通过并像之前一样捕获IVS（使用`echo 0 > /proc/sys/net/ipv4/ip_forward`），或者您可以向用户提供一个强制门户网站或允许流量通过（使用`echo
    1 > /proc/sys/net/ipv4/ip_forward`），只重定向特定目标站点以设置MitM攻击。
- en: Here, we can take this into several directions. We can continue and set up a
    full-fledged Evil Twin (Rogue AP) in order to capture the password of the network,
    or we can set up a man-in-the-middle attack, sniffing and capturing the traffic
    of any client that connects to our wireless signal by incorporating other tools,
    such as the `dsniff` suite of tools or `sslstrip`, or combine this with **Browser
    Exploitation Framework** (**BeEF**) to attack the client side directly by hijacking
    users' browsers.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以朝着几个方向发展。我们可以继续并建立一个成熟的恶意双子（Rogue AP）以捕获网络的密码，或者我们可以建立一个中间人攻击，通过整合其他工具（如`dsniff`工具套件或`sslstrip`）或将其与**浏览器利用框架**（**BeEF**）结合起来，直接攻击客户端，劫持用户的浏览器。
- en: Post cracking
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 破解后
- en: If you are successful in acquiring the WPA or WEP key, you now have the ability
    to authenticate to the network. Once on the wireless network, you have the same
    range of tools that we have discussed throughout this book. This is due to the
    fact that once properly authenticated, your Kali Linux installation is just part
    of a **Local Area Network** (**LAN**), just as we would be if we were connected
    via a network cable. Therefore, we have the ability to scan for other devices,
    leverage vulnerabilities, exploit systems, and elevate our credentials.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您成功获取了WPA或WEP密钥，现在您有了认证到网络的能力。一旦连接到无线网络，您就拥有了我们在本书中讨论过的一系列工具。这是因为一旦得到适当的认证，您的Kali
    Linux安装就只是**局域网**（**LAN**）的一部分，就像我们通过网络电缆连接一样。因此，我们有能力扫描其他设备，利用漏洞，利用系统，并提升我们的凭据。
- en: MAC-spoofing
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MAC欺骗
- en: There are a few techniques that are useful in demonstrating other vulnerabilities
    on wireless networks that we can explore. One such issue is bypassing a common
    wireless control called MAC filtering. MAC filtering is a control on some routers
    whereby only specific MAC addresses or MAC types are allowed. For example, you
    may be testing a commercial location that utilizes iPads. The wireless network
    is only going to allow MAC addresses with the first three hex characters of `34:12:98`.
    Other organizations may have a set list of MAC addresses that are allowed to join.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些技术对于演示我们可以探索的无线网络上的其他漏洞是有用的。其中一个问题是绕过一个称为MAC过滤的常见无线控制。MAC过滤是一些路由器上的一种控制，只允许特定的MAC地址或MAC类型。例如，您可能正在测试一个使用iPad的商业位置。无线网络只会允许具有`34:12:98`前三个十六进制字符的MAC地址。其他组织可能有一组允许加入的MAC地址。
- en: If you are able to compromise the WPA key but find that you are unable to join
    the network, the target organization may be utilizing some form of MAC address
    filtering. To bypass this, we will use the Macchanger command-line tool. This
    simple command allows us to change our MAC address to something that will allow
    us to connect. First, you can easily find a new MAC address from previous reconnaissance
    and cracking attempts. The Airodump-ng tool will identify clients that are connected
    to wireless networks. Furthermore, parsing through capture files with Wireshark
    will allow you to identify potentially valid MAC addresses.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您能够破解WPA密钥，但发现无法加入网络，则目标组织可能正在使用某种形式的MAC地址过滤。为了绕过这一点，我们将使用Macchanger命令行工具。这个简单的命令允许我们将MAC地址更改为允许我们连接的内容。首先，您可以轻松地从以前的侦察和破解尝试中找到一个新的MAC地址。Airodump-ng工具将识别连接到无线网络的客户端。此外，使用Wireshark解析捕获文件将允许您识别潜在有效的MAC地址。
- en: 'For this example, we have identified a wireless client that was connected to
    the target wireless network with a MAC address of `34:12:98:B5:7E:D4`. To change
    our MAC address to pose as that legitimate MAC address, simply type the following
    into the command line:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们已经确定了一个连接到目标无线网络的无线客户端，其MAC地址为`34:12:98:B5:7E:D4`。要将我们的MAC地址更改为模拟合法的MAC地址，只需在命令行中输入以下内容：
- en: '[PRE24]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The command produces the following output:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令产生以下输出：
- en: '![](img/7d5f9bd9-5ee5-4cbc-8ff0-7f1ec9534e26.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7d5f9bd9-5ee5-4cbc-8ff0-7f1ec9534e26.png)'
- en: 'In addition, if we run the `ifconfig wlan0` command, we can see our spoofed
    MAC address:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果我们运行`ifconfig wlan0`命令，我们可以看到我们伪造的MAC地址：
- en: '![](img/630e2806-b851-471b-a3ba-e82418ce58cc.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![](img/630e2806-b851-471b-a3ba-e82418ce58cc.png)'
- en: We now have the ability to bypass any MAC filtering that is taking place on
    the access point. There is now the ability to connect to the wireless network.
    Like any system that we are able to compromise, setting up persistence is another
    critical step. This gives us a certain measure of certainty that we will be able
    to access the system again if we lose our connection.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有能力绕过接入点上正在进行的任何MAC过滤。现在有能力连接到无线网络。与我们能够破坏的任何系统一样，建立持久性是另一个关键步骤。这使我们有一定的确定性，如果我们失去连接，我们将能够再次访问系统。
- en: Persistence
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持久性
- en: Once we have a valid way to authenticate to the wireless network and are able
    to connect, the next step is to set up persistence. One area to focus on is the
    wireless router. Most wireless routers have either a web-based, or other console
    in which legitimate administrators are able to log in and manage the router. Usually,
    these routers are located at the beginning of the subnet of the wireless LAN we
    connect to. For example, if we connect to `Wifi_Crack` and run the `ifconfig wlan0` command,
    it identifies us as having the IP address of `10.0.0.7`.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有有效的身份验证无线网络的方法并能够连接，下一步就是建立持久性。一个要关注的领域是无线路由器。大多数无线路由器都有基于Web的或其他控制台，合法管理员可以登录并管理路由器。通常，这些路由器位于我们连接的无线局域网子网的开头。例如，如果我们连接到`Wifi_Crack`并运行`ifconfig
    wlan0`命令，它会将我们标识为具有IP地址`10.0.0.7`。
- en: 'If we navigate to [`http://10.0.0.1`](http://10.0.0.1) via the Iceweasel browser,
    we are brought to this page. You can also type `route -n` into a Terminal, which
    will give you the default gateway:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们通过Iceweasel浏览器导航到[`http://10.0.0.1`](http://10.0.0.1)，我们会被带到这个页面。您还可以在终端中输入`route
    -n`，这将给您默认网关：
- en: '![](img/0cc31dca-b88e-4481-99f9-4ecb42d7b16e.png)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0cc31dca-b88e-4481-99f9-4ecb42d7b16e.png)'
- en: 'If we enter the `admin` username without a password and click OK, this is what
    we get:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们输入`admin`用户名而没有密码并单击确定，我们会得到这个：
- en: '![](img/34822b7f-ba0a-4219-ad61-027f130531b1.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![](img/34822b7f-ba0a-4219-ad61-027f130531b1.png)'
- en: What we see is the default password for the administrator account. While not
    common, it is not out of the realm of possibility that the systems administrator
    for this network left the default credentials for the wireless router. If we do
    not get this error message, there are a great deal of resources on the internet
    that aggregate the default administrator accounts for a wide variety of routers,
    switches, and wireless access points.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到的是管理员帐户的默认密码。虽然不常见，但并非不可能，这个网络的系统管理员留下了无线路由器的默认凭据。如果我们没有收到这个错误消息，互联网上有大量资源汇总了各种路由器、交换机和无线接入点的默认管理员帐户。
- en: One such site is [http://www.routerpasswords.com/](http://www.routerpasswords.com/).
    If that doesn't work, the next option is to brute-force the sign-in using techniques
    we have previously covered.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 一个这样的网站是[http://www.routerpasswords.com/](http://www.routerpasswords.com/)。如果这不起作用，下一个选择是使用我们之前介绍过的技术来暴力破解登录。
- en: 'If we are able to compromise the administrator accounts and gain access to
    the administrative settings, take note of information that will allow you to sign
    in again, such as the WPS PIN:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们能够破坏管理员帐户并访问管理设置，注意允许您再次登录的信息，例如WPS PIN：
- en: '![](img/dc5fb669-f2af-4e55-a08e-eda43ddb344c.png)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc5fb669-f2af-4e55-a08e-eda43ddb344c.png)'
- en: 'Administrators may change the wireless access point WPA passcode, but often
    leave the WPS PIN in place. Also, you should check to see whether you have the
    ability to access the MAC address-filtering controls:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 管理员可能会更改无线接入点的WPA密码，但通常会保留WPS PIN。此外，您应该检查是否有能力访问MAC地址过滤控件：
- en: '![](img/ee95fe48-fc11-4371-9ffe-6c7cf13b1d48.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee95fe48-fc11-4371-9ffe-6c7cf13b1d48.png)'
- en: From here, you can enter several MAC addresses that you can use in the future.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，您可以输入几个MAC地址，以便将来使用。
- en: Sniffing wireless traffic
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嗅探无线流量
- en: When examining techniques for sniffing wireless traffic, there are two types
    of techniques available. The first is sniffing WLAN traffic while authenticated
    and connected to the target WLAN. In this instance, there is the ability to utilize
    a Man-in-the-Middle attack in conjunction with tools such as Ettercap, which forces
    network traffic through our testing machine.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查嗅探无线流量的技术时，有两种类型的技术可用。第一种是在经过身份验证并连接到目标无线局域网时嗅探无线局域网流量。在这种情况下，有能力利用中间人攻击与Ettercap等工具，将网络流量强制通过我们的测试机器。
- en: A second technique is sniffing all the wireless traffic that we can get from
    a specific wireless network and decrypting it with the WPA or WEP passcode. This
    may become necessary if we are attempting to limit our footprint by not connecting
    to the WLAN. By passively sniffing traffic and decrypting it later, we lessen
    the chance that we will be detected.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种技术是嗅探我们可以从特定无线网络获取的所有无线流量，并使用WPA或WEP密码解密它。如果我们试图通过不连接到无线局域网来限制我们的足迹，这可能是必要的。通过被动嗅探流量并稍后解密，我们减少了被发现的机会。
- en: Sniffing WLAN traffic
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嗅探无线局域网流量
- en: 'Just as in a wired LAN, on WLAN, we have the ability to sniff network traffic.
    The following sniffing technique requires that you have been properly authenticated
    to the wireless network you are testing and have received a valid IP address from
    the router. This type of sniffing will make use of the Ettercap tool to conduct
    an ARP poisoning attack and sniff out credentials:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 就像有线局域网一样，在无线局域网上，我们有能力嗅探网络流量。以下嗅探技术要求您已经正确地经过身份验证连接到正在测试的无线网络，并从路由器那里收到了有效的IP地址。这种嗅探将利用Ettercap工具进行ARP欺骗攻击并嗅探凭据：
- en: Start Ettercap by going to Applications | Sniffing and Spoofing | Ettercap-gui
    or by entering `ettercap-gui` into command prompt. Navigate to Sniff and click
    on Unified Sniffing. Once there, you will be given a drop-down list of network
    interfaces. Choose your wireless interface, in our case, WLAN0:![](img/6574cc02-2827-43a3-951f-245f4e7e1bc5.png)
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过转到应用程序|嗅探和欺骗|Ettercap-gui或在命令提示符中输入`ettercap-gui`来启动Ettercap。导航到Sniff并单击Unified
    Sniffing。然后，您将看到一个网络接口的下拉列表。选择您的无线接口，在我们的情况下是WLAN0:![](img/6574cc02-2827-43a3-951f-245f4e7e1bc5.png)
- en: Click on Hosts and click Scan for Hosts. After the scanning is complete, hit
    Hosts List. If it is an active wireless network, you should see a few hosts on
    there.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击主机，然后单击扫描主机。扫描完成后，单击主机列表。如果是活动无线网络，您应该会看到一些主机。
- en: Click on MiTM and then ARP Poisoning. On the next screen, choose one IP address
    and click on Target 1, and then a second IP address and click on Target 2:![](img/7195b214-8690-4a5e-892d-7793afbfe40b.png)
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击MiTM，然后ARP毒化。在下一个屏幕上，选择一个IP地址，然后单击目标1，然后选择第二个IP地址，然后单击目标2:![](img/7195b214-8690-4a5e-892d-7793afbfe40b.png)
- en: Click on the Sniff Remote Connections radio button and click OK:![](img/df1ce8c7-f483-4ccf-b9c1-c29e5c865430.png)
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击嗅探远程连接单选按钮，然后单击确定:![](img/df1ce8c7-f483-4ccf-b9c1-c29e5c865430.png)
- en: This will start the ARP Poisoning attack whereby we will be able to see all
    the traffic between the two hosts that we have chosen.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动ARP毒化攻击，从而我们将能够看到我们选择的两个主机之间的所有流量。
- en: 'Start a Wireshark capture. When you are brought to the first screen, make sure
    you choose the wireless interface, in this case, WLAN0:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '开始Wireshark捕获。当您被带到第一个屏幕时，确保选择无线接口，在这种情况下是WLAN0:'
- en: '![](img/949163e6-5ce3-4dab-8289-c12cf3c83776.png)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![](img/949163e6-5ce3-4dab-8289-c12cf3c83776.png)'
- en: 'When you examine the traffic, we can see a number of types of traffic being
    captured. Most notable is a Telnet session that has been opened between our two
    hosts:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 当您检查流量时，我们可以看到捕获的各种类型的流量。最显著的是我们两个主机之间打开的Telnet会话：
- en: '![](img/83861a93-1904-49fa-bc3e-8e13e42ab078.png)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![](img/83861a93-1904-49fa-bc3e-8e13e42ab078.png)'
- en: 'If we right-click on the Telnet session and choose Follow TCP Stream, we are
    able to see the credentials for a Metasploitable instance with the Telnet credentials
    in cleartext:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们右键单击Telnet会话并选择跟踪TCP流，我们可以看到Metasploitable实例的Telnet凭据以明文形式显示：
- en: '![](img/6c64a92d-e242-43c7-bc55-055bb5b695c3.png)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6c64a92d-e242-43c7-bc55-055bb5b695c3.png)'
- en: Passive sniffing
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 被动嗅探
- en: 'In passive sniffing, we are not authenticated to the network. If we suspect
    that there is the possibility of alerting such intrusion-prevention controls as
    rogue-host detection, this is a good way to avoid those controls while still gaining
    potentially confidential information:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在被动嗅探中，我们未经过网络认证。如果我们怀疑可能会触发入侵防范控制（如流氓主机检测）的可能性，这是一种避开这些控制但仍然可能获得潜在机密信息的好方法：
- en: 'Passively scan for wireless traffic on a target network. Ensure you have your
    wireless card in monitor mode:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在目标网络上被动扫描无线流量。确保您的无线网卡处于监视模式：
- en: '[PRE25]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Use the `airodump-ng` tool to sniff the network traffic, the same way that
    we did during the WPA-cracking section:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`airodump-ng`工具来嗅探网络流量，就像我们在WPA破解部分所做的那样：
- en: '[PRE26]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Run the tool as long as you want. To ensure that we can decrypt the traffic,
    we will need to ensure we capture the full four-way handshake, if it is a WPA
    network. Once we have captured enough traffic, hit *Ctrl* + *C*.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行工具的时间长短由你决定。为了确保我们能够解密流量，我们需要确保捕获完整的四路握手，如果是WPA网络的话。一旦我们捕获到足够的流量，按下*Ctrl*
    + *C*。
- en: Navigate to the folder with the capture file and double-click. This should automatically
    open the capture in Wireshark:![](img/70f0c58a-fcd1-484b-bebf-bd79a78627a0.png)
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到捕获文件所在的文件夹，然后双击。这应该会自动在Wireshark中打开捕获！[](img/70f0c58a-fcd1-484b-bebf-bd79a78627a0.png)
- en: The capture is encrypted and all that is visible are a number of `802.11` packets.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获是加密的，只能看到一些`802.11`数据包。
- en: 'In Wireshark, navigate to Edit and then to Preferences. A new bow will open
    up; click on the triangle next to Protocols and then click on 802.11\. The following
    should open:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Wireshark中，导航到编辑，然后到首选项。将打开一个新的窗口；单击协议旁边的三角形，然后单击802.11\. 应该会打开以下内容：
- en: '![](img/41dcd0ae-cedc-4cd1-b76b-5f69d4f1fe76.png)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![](img/41dcd0ae-cedc-4cd1-b76b-5f69d4f1fe76.png)'
- en: 'Click on Edit. This will bring you to a screen to enter WEP or WPA decryption
    keys. Click on New. Under Key Type, enter `WPA` and then the passcode and SSID.
    In this case, it will be `Induction:Coherer`. Click on Apply and OK:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击编辑。这将带您到一个屏幕，输入WEP或WPA解密密钥。单击新建。在密钥类型下，输入`WPA`，然后输入密码和SSID。在这种情况下，它将是`Induction:Coherer`。单击应用和确定：
- en: '![](img/443cb449-46f1-4d3d-b2f0-8c95d8db1f1c.png)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![](img/443cb449-46f1-4d3d-b2f0-8c95d8db1f1c.png)'
- en: 'To apply this decryption key to our capture, navigate to View and then down
    to Wireless Toolbar. Enable the wireless toolbar. In the main screen, you will
    see the following:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将此解密密钥应用于我们的捕获，导航到“查看”，然后到“无线工具栏”。启用无线工具栏。在主屏幕上，您将看到以下内容：
- en: '![](img/ad07a219-cb06-4db0-84d1-be6d5cdb6be9.png)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ad07a219-cb06-4db0-84d1-be6d5cdb6be9.png)'
- en: 'On the wireless toolbar, click on Decryption Keys. A box will appear. In the
    drop-down menu in the upper left, chose Wireshark for the decryption mode. Make
    sure the applicable key is selected. Click on Apply and OK:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在无线工具栏上，单击解密密钥。将会出现一个框。在左上角的下拉菜单中，选择Wireshark作为解密模式。确保选择适用的密钥。单击应用和确定：
- en: '![](img/ca9f583f-6f78-4716-a8bc-e6cd97fdb5c3.png)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca9f583f-6f78-4716-a8bc-e6cd97fdb5c3.png)'
- en: 'Wireshark applies the decryption key to the capture and, where applicable,
    is able to decrypt the traffic:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Wireshark将解密密钥应用于捕获，并在适用的情况下能够解密流量：
- en: '![](img/71ef8191-1aac-4cb8-ac53-5ec2c9aec960.png)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![](img/71ef8191-1aac-4cb8-ac53-5ec2c9aec960.png)'
- en: As the preceding screenshot demonstrates, it is possible to decrypt traffic
    that we have captured without having to join the network. It is important to reiterate
    that this technique requires a full four-way handshake for each session captured.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的屏幕截图所示，我们可以解密我们捕获的流量，而无需加入网络。重申一点，这种技术需要为每个捕获的会话进行完整的四路握手。
- en: Summary
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The use of wireless networks permeates all organizations. As with any system
    that we have explored so far, there are vulnerabilities with wireless networks
    as well. These vulnerabilities, in the way that traffic is encrypted or in the
    methods of authentication, can be leveraged with tools that Kali Linux supplies.
    Demonstrating these vulnerabilities and their associated exploits by penetration
    testers provides those that employ these types of networks a clear understanding
    of what measures they need employ in order to safeguard themselves from attacks.
    As the world moves to an increasingly wireless world, with smartphones, laptops,
    and the Internet of Things, it is crucial that wireless networks and their security
    controls are constantly tested.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 无线网络的使用渗透到所有组织中。与迄今为止我们探讨过的任何系统一样，无线网络也存在漏洞。这些漏洞，无论是流量加密方式还是身份验证方法，都可以利用Kali
    Linux提供的工具。渗透测试人员演示这些漏洞及其相关的利用方式，可以让那些使用这些类型网络的人清楚地了解他们需要采取什么措施来保护自己免受攻击。随着世界向着越来越无线化的方向发展，智能手机、笔记本电脑和物联网的出现，无线网络及其安全控制的不断测试变得至关重要。
- en: 'In the next chapter, we are going to discuss wireless networking as part of
    a larger methodology of penetration testing: using Kali Linux''s Nethunter on
    a mobile device pen-testing platform. We are going to see several of the techniques
    presented in a new fashion, with a flexible penetration testing tool.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论无线网络作为渗透测试的一个更大方法论的一部分：使用Kali Linux的Nethunter作为移动设备渗透测试平台。我们将以一种新的方式展示几种技术，使用一种灵活的渗透测试工具。
