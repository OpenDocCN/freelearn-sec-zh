- en: '*Chapter 15*: Going Beyond the Foothold'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第15章*：超越立足点'
- en: On this crazy ball flying through space that we call home, there are few things
    as exciting as seeing that Meterpreter session pop up after firing off an exploit.
    Sometimes, your compromise has yielded you a domain administrator and you can
    pretty much do anything you want; you can probably just log in to other systems
    on the domain to gather yourself a handful of compromised computers and grab the
    loot you find on them. However, the more likely scenario is that you just successfully
    pulled off an exploit on one of only a few machines that are actually visible
    from your position in the network due to firewalling and segmentation – you’ve
    established a foothold. The word *foothold* is borrowed from rock climbing terminology
    – it’s a spot in the rock face where you can place your feet for security as you
    prepare to progress further. Getting a foothold in a pen test means you’ve found
    a hole in the rock of your client’s defense that you can use to launch yourself
    up, but the climbing lies before you.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这颗我们称之为家的疯狂飞行的星球上，看到Meterpreter会话在发起漏洞利用后弹出，几乎没有什么比这更令人激动的了。有时，成功的入侵可能让你获得了域管理员权限，你几乎可以做任何事情；你可能直接登录到域内的其他系统，收集到被攻陷的计算机，并拿到上面的“战利品”。然而，更有可能的情况是，你只是成功地在由于防火墙和网络分割而只能在网络中看到的几台机器上执行了漏洞利用——你已经建立了一个立足点。*立足点*这个词借用了攀岩术语——它指的是你可以放置脚步的岩石表面位置，以确保你准备好进一步攀登。在渗透测试中，获得立足点意味着你找到了一个漏洞，可以用来推进自己，但攀登的挑战仍然在前方。
- en: 'In this chapter, we’re going to do the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将做以下几件事：
- en: Review concepts and methods for leveraging a foothold position
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回顾如何利用立足点位置的概念和方法
- en: Introduce enumeration from our foothold position
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从我们的立足点位置开始进行枚举
- en: Discuss pivoting through the network
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论如何通过网络进行跳板
- en: Leverage pilfered credentials to compromise systems deeper in our target’s network
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用窃取的凭证进一步入侵目标网络中的系统
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The technical requirements for this chapter are as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求如下：
- en: Kali Linux.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kali Linux。
- en: A Windows environment with several hosts on different LANs is ideal.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有多个主机在不同局域网中的Windows环境是理想的。
- en: Gathering goodies – enumeration with post modules
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集“战利品”——使用后收集模块进行枚举
- en: 'The big happy family of Metasploit modules designed to turn your foothold into
    total compromise are called **post modules**. There are a few types of post module,
    but there are two primary subfamilies – *gather* and *manage*. First, let’s draw
    a distinction between the post manage and post gather modules:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 旨在将立足点转化为完全入侵的大型Metasploit模块家族被称为**后模块**。后模块有几种类型，其中有两个主要的子类别——*收集*和*管理*。首先，让我们区分一下后管理模块和后收集模块：
- en: The post manage modules are what I like to call compromise management tools.
    In other words, they allow us to manage the compromise we’ve accomplished, mainly
    by modifying features of the host.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后管理模块是我称之为入侵管理工具的东西。换句话说，它们让我们管理已完成的入侵，主要是通过修改主机的功能。
- en: 'The post gather modules are just what they sound like: they allow us to gather
    information from the target that will inform further compromise. Pushing past
    the initial foothold will require more information; a full penetration of the
    target network is an iterative process. Don’t expect to only do recon and footprinting
    once at the beginning of the assessment – you’ll be doing it again at your foothold.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后收集模块顾名思义，就是帮助我们收集目标信息，为进一步入侵提供支持。突破初步的立足点将需要更多信息；对目标网络的完全渗透是一个迭代过程。不要指望在评估开始时只做一次侦察和足迹分析——在获得立足点后，你还会再次进行这些操作。
- en: We don’t have enough room to dive into all of the post modules, but you’ll always
    need to do some enumeration once you’ve cracked that outer shell. You need to
    understand where you are in the network and what kind of environment you’re in.
    So, let’s take a look at some core enumeration with gather modules.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有足够的篇幅深入探讨所有的后模块，但一旦突破了外壳，你总是需要进行一些枚举。你需要了解自己在网络中的位置以及所处的环境。因此，让我们通过使用收集模块来查看一些核心的枚举操作。
- en: For our example, we’ve just compromised a Windows 7 Enterprise machine on our
    client’s main office network and we have a Meterpreter session. We’re about to
    discover that this machine has another NIC attached to a hidden network. Later
    in the chapter, we’ll take a look at this scenario to demonstrate pivoting our
    way into that hidden network. For now, let’s explore the environment of our foothold
    PC.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们刚刚入侵了客户主办公网络中的一台 Windows 7 企业版机器，并且已经建立了 Meterpreter 会话。接下来，我们将发现这台机器有另一块网卡连接到了一个隐藏网络。稍后章节中，我们将查看这种情况并演示如何通过跳跃进入这个隐藏网络。现在，让我们来探索我们立足点
    PC 的环境。
- en: ARP enumeration with Meterpreter
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Meterpreter 进行 ARP 枚举
- en: 'Once we’re established with Meterpreter, we control the machine (at least in
    the user context of the payload execution, but we’ll talk about escalation later).
    We can play with our fun Meterpreter toys, or we can just go old school and play
    around with the command line. Let’s kick off Windows’ **ipconfig**. Thankfully,
    this command is already built into Meterpreter:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们通过 Meterpreter 建立了连接，我们就控制了这台机器（至少是在有效载荷执行的用户上下文中，权限提升的部分稍后会讨论）。我们可以玩 Meterpreter
    的一些有趣工具，或者干脆回归传统，使用命令行来玩。让我们启动 Windows 的 **ipconfig**。幸运的是，这个命令已经内置于 Meterpreter
    中：
- en: '![Figure 15.1 – ipconfig in a Meterpreter session ](image/Figure_15.01_B17616.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.1 – Meterpreter 会话中的 ipconfig](image/Figure_15.01_B17616.jpg)'
- en: Figure 15.1 – ipconfig in a Meterpreter session
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.1 – Meterpreter 会话中的 ipconfig
- en: 'Check that out – a **192.168.249.0/24** network that isn’t visible to our Kali
    box. If you read the early chapters of this book, you’re already deeply in love
    with ARP, so let’s get acquainted with this network. Simply pass the **arp** command
    to Meterpreter:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 看这个——一个**192.168.249.0/24**的网络，这个网络在我们的 Kali 机器上不可见。如果你阅读了本书的早期章节，你应该已经深深迷上了
    ARP，所以让我们来了解一下这个网络。只需将 **arp** 命令传递给 Meterpreter：
- en: '![Figure 15.2 – The remote ARP table in Meterpreter ](image/Figure_15.02_B17616.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.2 – Meterpreter 中的远程 ARP 表](image/Figure_15.02_B17616.jpg)'
- en: Figure 15.2 – The remote ARP table in Meterpreter
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.2 – Meterpreter 中的远程 ARP 表
- en: Quite an effective host enumeration from beyond the perimeter. All that’s happening
    here is that Meterpreter is dumping the host’s ARP table instead of sending data
    into the network to find other targets; we used our foothold as a layer 2 spy,
    reporting its intel back to us. If there’s a computer in our foothold’s broadcast
    domain(s) and it has announced its presence via ARP replies, we have its IP address
    and MAC address mapping right here.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 从外围进行的主机枚举相当有效。这里发生的事情是，Meterpreter 直接提取了主机的 ARP 表，而不是将数据发送到网络中去寻找其他目标；我们使用我们的立足点作为二层间谍，将信息报告给我们。如果在我们立足点的广播域中有计算机并通过
    ARP 回复宣布了自己的存在，我们就能在这里得到它的 IP 地址和 MAC 地址映射。
- en: Beware of ARP Counterintelligence
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 警惕 ARP 反间谍
- en: Remember that this result is what our foothold *believes* is the correct mapping.
    If there’s any ARP poisoning going on, the poisoned table is what you’re seeing.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这个结果是我们立足点*认为*正确的映射。如果存在 ARP 欺骗，您看到的就是被污染的表。
- en: Let’s make sense of this result in our lab. Since this is an ARP table, it will
    include things such as multicast and broadcast addresses – those can be ignored.
    What’s interesting to us is that there’s another host on the hidden network –
    **192.168.249.154**. Now we have a lead on one possible direction to further compromise.
    Let’s keep that in mind for later – first, let’s grab some loot from our foothold
    PC. It may come in handy as we leap from host to host.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在实验室中分析这个结果。由于这是一个 ARP 表，它将包括诸如多播和广播地址等内容——这些可以忽略。对我们来说有趣的是，隐藏网络中还有另一台主机——**192.168.249.154**。现在我们有了进一步渗透的线索。我们稍后再关注这个问题——首先，让我们从我们的立足点
    PC 上获取一些战利品。在我们从主机跳跃到主机时，这些可能会派上用场。
- en: Forensic analysis with Meterpreter – stealing deleted files
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Meterpreter 进行取证分析 – 偷取已删除的文件
- en: 'There is a digital equivalent of just tossing whole documents into the trash
    instead of through a cross-cut shredder: deleting the file off your computer.
    Most IT folks are aware that when you delete a file in Windows, the operating
    system simply marks that space as free. This is far more efficient than actually
    erasing everything, but it also means old data can be very stubborn. There are
    known techniques for recovering deleted files and plenty of freeware tools for
    it. Metasploit takes that functionality and turns it into a friendly looting module.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 电子数据的等效方式就像是把整个文档扔进垃圾桶，而不是通过十字切割 shredder处理：将文件从你的电脑中删除。大多数IT人员知道，当你在Windows中删除一个文件时，操作系统只是将那个空间标记为可用。这比实际删除所有内容要高效得多，但这也意味着旧数据可能非常顽固。有已知的技术可以恢复已删除的文件，还有很多免费的工具可以做到这一点。Metasploit将这个功能转化为一个友好的掠夺模块。
- en: 'When you’re interacting with a Meterpreter session and you’d like to get back
    to the Metasploit console, use the **background** command to put your session
    on the back burner. You can then use the **sessions** command to list your Meterpreter
    sessions and use the **-i** flag to interact with one. In our lab environment,
    I have only one session so far – but when you’re in the field, you may have several.
    These modules can be set up like ordinary exploits from the console, or they can
    be called with the **run** command from within Meterpreter – definitely an awesome
    feature for those times when you know exactly what you want to do. However, in
    the field, we’ll often need reminders of what modules Metasploit has in store
    for us and the options they offer. So, let’s background our session and try searching
    for what we want: some forensics work. Type **search type:post forensics** and
    hit *Enter*:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在与Meterpreter会话交互时，如果想返回Metasploit控制台，可以使用**background**命令将会话置于后台。然后你可以使用**sessions**命令列出你的Meterpreter会话，并使用**-i**标志与其中一个会话交互。在我们的实验环境中，到目前为止我只有一个会话，但在实际操作中，你可能有多个会话。这些模块可以像普通的利用程序一样从控制台设置，或者可以从Meterpreter内通过**run**命令调用——这绝对是一个很棒的功能，特别适合那些你已经完全知道自己想做什么的时刻。不过，在实际操作中，我们常常需要回顾Metasploit为我们提供了哪些模块以及它们提供了哪些选项。那么，让我们将会话置于后台，并尝试搜索我们需要的内容：一些取证工作。输入**search
    type:post forensics**并按*Enter*：
- en: '![Figure 15.3 – Searching for forensics modules ](image/Figure_15.03_B17616.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.3 – 搜索取证模块](image/Figure_15.03_B17616.jpg)'
- en: Figure 15.3 – Searching for forensics modules
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.3 – 搜索取证模块
- en: 'The **search** command lets us narrow our search down to a module type, and
    forensics are part of the post modules. After the **type** parameter is set, we
    simply provide our search term, **forensics**. We want to try some deleted file
    enumeration and recovery, so let’s use **post/windows/gather/forensics/recovery_files**,
    which is in index position 1, with **use 1**:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**search**命令可以帮助我们将搜索范围缩小到特定的模块类型，而取证模块属于post模块的一部分。在设置了**type**参数后，我们只需提供搜索词**forensics**。我们想尝试一些已删除文件的枚举和恢复，因此让我们使用**post/windows/gather/forensics/recovery_files**，它在索引位置1，使用**use
    1**：'
- en: '![Figure 15.4 – Configuring the deleted file recovery module ](image/Figure_15.04_B17616.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.4 – 配置已删除文件恢复模块](image/Figure_15.04_B17616.jpg)'
- en: Figure 15.4 – Configuring the deleted file recovery module
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.4 – 配置已删除文件恢复模块
- en: 'You can set **TIMEOUT** for whatever you like; the default is one hour. If
    you set it to **0**, then it won’t stop running until it’s found everything it
    can. Of course, this can take a long time. Type **run** to get started:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以为**TIMEOUT**设置任何你喜欢的时间；默认是一个小时。如果你设置为**0**，那么它将一直运行，直到找到所有它能找到的内容。当然，这可能需要很长时间。输入**run**来开始：
- en: '![Figure 15.5 – Deleted files with unique IDs ](image/Figure_15.05_B17616.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.5 – 已删除文件及其唯一ID](image/Figure_15.05_B17616.jpg)'
- en: Figure 15.5 – Deleted files with unique IDs
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.5 – 已删除文件及其唯一ID
- en: 'If you don’t specify a file extension, the module will just look for all deleted
    files. Note that each one gets a unique ID. The **FILES=** option in the module
    can be used for either specifying extensions or by choosing an individual file
    by ID. I’ve found a file I’d like to recover, so I run the command again with
    the file ID in the **FILES** parameter:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有指定文件扩展名，模块将只会查找所有已删除的文件。请注意，每个文件都会获得一个唯一的ID。模块中的**FILES=**选项可以用来指定扩展名或通过ID选择单个文件。我已经找到了一个我想恢复的文件，所以我再次运行命令，并在**FILES**参数中输入文件ID：
- en: '![Figure 15.6 – Recovering deleted files ](image/Figure_15.06_B17616.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.6 – 恢复已删除文件](image/Figure_15.06_B17616.jpg)'
- en: Figure 15.6 – Recovering deleted files
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.6 – 恢复已删除文件
- en: The scanner runs over the file again, matches the ID, and dumps it into my bag
    o’ loot. Showing a deleted document with confidential data in it to an executive
    is a powerful statement for your exit meeting.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描器再次运行该文件，匹配 ID，并将其丢进我的战利品袋里。在向高管展示一个包含机密数据的删除文档时，这将是你退出会议时的强有力声明。
- en: Internet Explorer enumeration – discovering internal web resources
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Internet Explorer 枚举 – 发现内部 web 资源
- en: I know, I know – Internet Explorer? Really? Even though Chrome and Firefox are
    all the rage these days, you’ll be surprised at the role Internet Explorer still
    plays in the enterprise. And yes, I specified Internet Explorer over Edge.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道，我知道 – Internet Explorer？真的？虽然如今 Chrome 和 Firefox 都很流行，但你会惊讶地发现，Internet
    Explorer 在企业中的作用仍然不可忽视。没错，我特意提到的是 Internet Explorer 而不是 Edge。
- en: Enterprises are often running applications on servers and appliances with administrator
    consoles that are typically accessed through a browser. Why are they not very
    often optimized for newer browsers? I can’t say for sure; it depends on the vendor.
    But it’s important to be cognizant of the role Internet Explorer plays. Getting
    your hands on Internet Explorer history, cookies, and stored credentials will
    allow you to enumerate important internal resources and inform future attacks
    against them. If you score some credentials, you may even be able to log in. Make
    sure to leverage your position at or beyond the foothold when you do this – that
    way, the application will see a login from a familiar client.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 企业通常在服务器和设备上运行应用程序，这些应用程序的管理员控制台通常通过浏览器访问。为什么它们很少为新浏览器进行优化？我不能确定；这取决于供应商。但认识到
    Internet Explorer 的作用是很重要的。获取 Internet Explorer 历史记录、Cookies 和存储的凭据将使你能够枚举重要的内部资源，并为未来对它们的攻击提供信息。如果你获取了一些凭据，甚至可能能够登录。当你进行这些操作时，确保利用你在立足点处或更远处的位置
    —— 这样，应用程序将看到来自熟悉客户端的登录。
- en: 'Enumeration is very easy in this case, too; no options to worry about. Just
    execute **run post/windows/gather/enum_ie** inside your Meterpreter session:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，枚举也非常简单，没什么选项需要担心。只需在 Meterpreter 会话中执行 **run post/windows/gather/enum_ie**：
- en: '![Figure 15.7 – Raiding Internet Explorer for goodies ](image/Figure_15.07_B17616.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.7 – 从 Internet Explorer 中抢夺资源](image/Figure_15.07_B17616.jpg)'
- en: Figure 15.7 – Raiding Internet Explorer for goodies
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.7 – 从 Internet Explorer 中抢夺资源
- en: Despite IE clinging on for dear life, you can still raid the target for artifacts
    from modern browsers, too – the **post/windows/gather/forensics/browser_history**
    module will seek out artifacts from Skype, Firefox, and Chrome.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 IE 死死地坚持着，但你仍然可以从目标中抢夺现代浏览器的资源 —— **post/windows/gather/forensics/browser_history**
    模块会寻找 Skype、Firefox 和 Chrome 的痕迹。
- en: Now that we’ve rummaged through the pockets of our foothold system, let’s start
    looking at how to take the next step.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经翻遍了我们的立足点系统的口袋，接下来让我们开始看看如何迈出下一步。
- en: Network pivoting with Metasploit
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Metasploit 进行网络跳跃
- en: 'Let’s back up to the beginning of the chapter, where we found our dual-homed
    Windows 7 box, and look at a real-world foothold and pivot scenario. We have valid
    credentials, though we only have a password hash that we dumped from another machine.
    We’ll be passing them to our target with the **psexec** exploit. Don’t worry,
    we’ll take a closer look at **pass-the-hash** (**PtH**) attacks shortly. For now,
    let’s grab our foothold:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到章节的开始，回顾我们找到的那台双网卡 Windows 7 机器，看看一个现实世界中的立足点和跳跃场景。我们有有效的凭据，尽管我们只是从另一台机器上提取了密码哈希值。我们将通过
    **psexec** 漏洞将其传递给目标。别担心，我们稍后会详细讨论 **pass-the-hash**（**PtH**）攻击。目前，让我们先获取立足点：
- en: '![Figure 15.8 – Configuring a psexec module with a captured hash ](image/Figure_15.08_B17616.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.8 – 配置带有捕获哈希值的 psexec 模块](image/Figure_15.08_B17616.jpg)'
- en: Figure 15.8 – Configuring a psexec module with a captured hash
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.8 – 配置带有捕获哈希值的 psexec 模块
- en: 'We are targeting **192.168.108.153**, so we configure the target with **set
    RHOSTS 192.168.108.153**. We use **set SMBPass** to configure our captured credentials,
    along with **set SMBUser**. Then, we fire off the attack with **run**:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是 **192.168.108.153**，所以我们使用 **set RHOSTS 192.168.108.153** 配置目标。我们使用 **set
    SMBPass** 配置捕获的凭据，同时配置 **set SMBUser**。然后，通过 **run** 发起攻击：
- en: '![Figure 15.9 – Running ipconfig on the target to find additional networks
    ](image/Figure_15.09_B17616.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.9 – 在目标上运行 ipconfig 以查找额外的网络](image/Figure_15.09_B17616.jpg)'
- en: Figure 15.9 – Running ipconfig on the target to find additional networks
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.9 – 在目标上运行 ipconfig 以查找额外的网络
- en: Magic sparks fly through the air as our Meterpreter session is established.
    The first thing I’ll do is issue a quick **ipconfig** to see what other hosts
    can be seen at the link layer. Immediately, we can see an additional interface
    assigned the IP address **192.168.249.153** with a netmask of **255.255.255.0**.
    Bingo! We’ve compromised a dual-homed host.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们的Meterpreter会话建立，魔法般的火花飞舞在空中。我做的第一件事是执行**ipconfig**，查看在链路层上可以看到哪些其他主机。立刻，我们可以看到一个额外的接口被分配了IP地址**192.168.249.153**，子网掩码为**255.255.255.0**。
    bingo！我们已经攻陷了一台双网卡主机。
- en: Just a quick review of subnetting
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单回顾一下子网划分
- en: Remember that an IPv4 address is 32 bits long, split into four groups of 8 bits
    each. With CIDR notation, an IP address is followed by a slash and a number that
    represents the amount of bits needed to represent the network portion of the address;
    the remaining bits would then be assigned to hosts. Therefore, you can always
    subtract the number at the end of the CIDR notation from 32 to get the number
    of bits for host assignment. Let’s look at a couple of examples.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，IPv4地址是32位长，分成四组，每组8位。使用CIDR表示法时，IP地址后面跟着一个斜杠和一个数字，表示用于表示网络部分的位数；剩余的位数则分配给主机。因此，你总是可以从32中减去CIDR表示法结尾的数字，得到主机分配所需的位数。让我们来看几个例子。
- en: '**192.168.105.0/24** means that the first 24 bits identify the network. To
    understand this, let’s see **192.168.105.0** in binary:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**192.168.105.0/24**表示前24位标识网络。为了理解这一点，我们来看一下**192.168.105.0**的二进制形式：'
- en: '[PRE0]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When assigning addresses in this subnet, we’d only change the final 8 bits,
    with the highest value, **11111111**, being the broadcast address of this subnet:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在分配这个子网中的地址时，我们只需改变最后8位，最高值**11111111**为该子网的广播地址：
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Calculating netmasks from the CIDR notation and vice versa is easy – whatever
    bits make up the network portion, turn those into all ones and turn the host’s
    portion into all zeros. Then, convert that value into an IP address. That’ll be
    your netmask:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 从CIDR表示法计算子网掩码及其反向转换非常简单——将网络部分的位设置为全1，主机部分的位设置为全0。然后，将该值转换为IP地址，这就是你的子网掩码：
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here’s one more example for the road, **10.14.140.0/19**:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子，**10.14.140.0/19**：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now that we’re caught up on our networking basics, let’s look at how we can
    build routes into our discovered networks for deeper enumeration.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经掌握了网络基础知识，接下来看看如何在我们发现的网络中构建路由，以便进行更深层次的枚举。
- en: Launching Metasploit into the hidden network with autoroute
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用autoroute将Metasploit引入隐藏网络
- en: 'At the Meterpreter prompt, fire off the **run post/multi/manage/autoroute**
    command. You’ll see that the host’s routing table is automatically analyzed:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在Meterpreter提示符下，输入**run post/multi/manage/autoroute**命令。你将看到主机的路由表被自动分析：
- en: '![Figure 15.10 – Using autoroute with a Meterpreter session ](image/Figure_15.10_B17616.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图15.10 – 在Meterpreter会话中使用autoroute](image/Figure_15.10_B17616.jpg)'
- en: Figure 15.10 – Using autoroute with a Meterpreter session
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.10 – 在Meterpreter会话中使用autoroute
- en: 'This creates a route into the hidden subnet, managed by the Meterpreter session
    on our foothold box (which we will call our pivot point):'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这为隐藏子网创建了一条路由，由我们控制的Meterpreter会话管理（我们称之为枢纽点）：
- en: '![Figure 15.11 – Visual representation of pivoting ](image/Figure_15.11_B17616.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图15.11 – 枢纽的可视化表示](image/Figure_15.11_B17616.jpg)'
- en: Figure 15.11 – Visual representation of pivoting
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.11 – 枢纽的可视化表示
- en: 'The output is somewhat anticlimactic – but keep in mind that that subnet is
    now available to Metasploit as if you were on the LAN. To test this theory, I’m
    going to look for FTP servers on the hidden network. I background my Meterpreter
    session with the **background** command and jump into the auxiliary modules to
    grab the native port scanner with **use auxiliary/scanner/portscan/tcp**:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果有些平淡——但请记住，那个子网现在对于Metasploit来说就像你在局域网内一样。为了验证这个理论，我将尝试在隐藏网络中寻找FTP服务器。我使用**background**命令将Meterpreter会话放入后台，并跳转到辅助模块，使用**use
    auxiliary/scanner/portscan/tcp**来获取本地端口扫描器：
- en: '![Figure 15.12 – Portscanning via our routes ](image/Figure_15.12_B17616.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图15.12 – 通过我们的路由进行端口扫描](image/Figure_15.12_B17616.jpg)'
- en: Figure 15.12 – Portscanning via our routes
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.12 – 通过我们的路由进行端口扫描
- en: 'Note that **RHOSTS** can take a subnet, so I set the hidden network with **set
    RHOSTS 10.0.0.0/24**. Threading can speed up the scan but also overwhelm the network
    and/or make a lot of noise, so configure **set THREADS** with caution. (Hint:
    I wouldn’t use **set THREADS 100** in a production network on a gig.) Of course,
    I’m just looking for FTP, so I configure **set PORTS 21**, but you can add more
    ports with commas or provide a range. It’s an auxiliary module, so we fire it
    off with **run**:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，**RHOSTS** 可以使用子网，因此我设置了隐藏网络为 **set RHOSTS 10.0.0.0/24**。多线程可以加速扫描，但也可能压垮网络和/或产生大量噪音，因此在配置
    **set THREADS** 时要小心。（提示：我不会在生产网络上使用 **set THREADS 100**，尤其是在千兆网络中。）当然，我只是寻找 FTP
    服务，所以我配置了 **set PORTS 21**，但你也可以通过逗号添加更多端口或提供端口范围。这是一个辅助模块，所以我们用 **run** 来启动它：
- en: '![Figure 15.13 – Completing the port scan via our newly configured route ](image/Figure_15.13_B17616.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.13 – 通过我们新配置的路由完成端口扫描](image/Figure_15.13_B17616.jpg)'
- en: Figure 15.13 – Completing the port scan via our newly configured route
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.13 – 通过我们新配置的路由完成端口扫描
- en: We found port **21** open on **192.168.249.154**. Remember that you can’t see
    this host from your Kali box; this response is courtesy of Meterpreter running
    on our foothold Windows 7 pivot point and routing traffic to the target network.
    This is pretty great, but there’s something missing – the ability to fire off
    our favorite Kali tools outside of the Metasploit Framework, including our own
    juicy Python scripts we worked so hard on. What we need is a port-forwarding mechanism.
    Have no fear, Meterpreter heard your cry.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 **192.168.249.154** 上发现了端口 **21** 开放。请记住，你无法从 Kali 机器上看到这个主机；这个响应来自于在我们的
    Windows 7 架设的跳板点上运行的 Meterpreter，它将流量路由到目标网络。这很不错，但有一件事还缺少——就是能够在 Metasploit 框架之外使用我们最喜爱的
    Kali 工具，包括我们辛辛苦苦编写的 Python 脚本。我们需要的是端口转发机制。别担心，Meterpreter 听到了你的呼声。
- en: 'Let’s get back into our established session with **sessions -i 4**. The **-i**
    flag means *interact* and the number **4** specifies the session. When you’re
    neck-deep in someone’s network, you might have a dozen Meterpreter sessions established
    – in which case, **sessions** is your friend. Anyway, let’s get back to our humble
    single session and execute **portfwd -h**:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到已建立的会话，使用 **sessions -i 4**。**-i** 标志表示 *交互*，数字 **4** 指定了会话编号。当你深入某个网络时，可能会有一打
    Meterpreter 会话在运行——这时，**sessions** 就是你的好帮手。不管怎样，让我们回到我们这唯一的会话，执行 **portfwd -h**：
- en: '![Figure 15.14 – Configuring portfwd ](image/Figure_15.14_B17616.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.14 – 配置 portfwd](image/Figure_15.14_B17616.jpg)'
- en: Figure 15.14 – Configuring portfwd
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.14 – 配置 portfwd
- en: 'Let’s take a closer look at these options, in a logical order rather than the
    order in which they appear:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按逻辑顺序仔细看一下这些选项，而不是按它们出现的顺序：
- en: '**-R** is a reverse port forward. I know, I know: *how can you go forward in
    reverse?* This just specifies the direction taken when establishing this route.
    Why would we need this? The simple way of thinking about port forwarding in a
    pivoting scenario is that you, the attacker, want to reach a service running on
    a target via your pivot point. However, think back to our previous chapters when
    we were hosting the payloads on our machine. We might want the target to have
    requests forwarded to us via the pivot point. This is a reverse port forward.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-R** 是反向端口转发。我知道，我知道：*怎么会有反向还可以转发？* 这只是指定了建立路由时所采取的方向。为什么我们需要这个呢？在跳板场景中理解端口转发的简单方式是，你，作为攻击者，想要通过你的跳板点访问目标上的某个服务。然而，回想一下我们之前在自己的机器上托管有效载荷时的情况。我们可能希望将目标的请求通过跳板点转发给我们。这就是反向端口转发。'
- en: '**-L** specifies the local host. It’s optional except for two scenarios – you’re
    doing a reverse port forward, or you have multiple local interfaces with different
    addresses and you need the traffic to pass through a specific one. Note that if
    you do set this option, you must use the address specified here when connecting
    through the port forward.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-L** 指定了本地主机。除非在两种场景下，否则它是可选的——你在做反向端口转发，或者你的本地接口有多个地址且你需要流量通过特定的接口传递。请注意，如果你设置了这个选项，连接通过端口转发时必须使用此处指定的地址。'
- en: '**-l** specifies the local port to listen on. You’ll be pointing your tools
    at the local host and the port specified here in order to reach the target on
    the desired port.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-l** 指定了本地监听的端口。你将会把工具指向本地主机和此处指定的端口，以便通过目标端口访问目标。'
- en: '**-i** assigns an *index* to your port forward route. You didn’t think we could
    only have one route at a time, did you? We can have multiple port forwards to
    multiple hosts and ports. You’ll need indices to keep up.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-i** 给你的端口转发路由分配一个*索引*。你难道认为我们一次只能有一个路由吗？我们可以对多个主机和端口进行多次端口转发。你会需要这些索引来跟上进度。'
- en: '**-p** is the remote port that we’re forwarding our traffic to. This is where
    it gets a little confusing if you’re leveraging the reverse port forward: this
    option is the remote port to listen on. For example, a payload could be configured
    to connect to the pivot point on port **9000**.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-p** 是我们转发流量的远程端口。如果你正在利用反向端口转发，这里可能会有些混淆：该选项是要监听的远程端口。例如，一个有效负载可以配置为连接到端口**9000**的枢纽点。'
- en: '**-r** is simply the remote IP address.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-r** 简单地是远程IP地址。'
- en: 'I create the relay with the **portfwd add -L 192.168.108.211 -l 1066 -p 21
    -r 192.168.249.154** command. This tells Meterpreter to establish a local listener
    on port **1066** and forward any requests to the target on port **21**. In short,
    the address **192.168.108.211:1066** has just become, for all intents and purposes,
    **192.168.249.154:21**. Meterpreter will confirm the setup:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用**portfwd add -L 192.168.108.211 -l 1066 -p 21 -r 192.168.249.154**命令创建了中继。这告诉Meterpreter在端口**1066**上建立一个本地监听器，并将任何请求转发到端口**21**的目标上。简而言之，地址**192.168.108.211:1066**刚刚变成了**192.168.249.154:21**。Meterpreter将确认设置：
- en: '![Figure 15.15 – New portfwd relay up and running ](image/Figure_15.15_B17616.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图15.15 – 新的端口转发中继已经运行 ](image/Figure_15.15_B17616.jpg)'
- en: Figure 15.15 – New portfwd relay up and running
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.15 – 新的端口转发中继已经运行
- en: 'Go ahead and point your tools at this proxy. Just to confirm access, I try
    to connect to the local listener with netcat:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 继续指向这个代理的工具。为了确认访问权限，我尝试用netcat连接到本地监听器：
- en: '![Figure 15.16 – Chatting with a service behind the foothold ](image/Figure_15.16_B17616.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图15.16 – 与枢纽点背后的服务交流 ](image/Figure_15.16_B17616.jpg)'
- en: Figure 15.16 – Chatting with a service behind the foothold
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.16 – 与枢纽点背后的服务交流
- en: Here we are, chatting with a service running on another subnet that our Kali
    box can’t see. If you’ve just finished the previous chapter, then you will recognize
    the FTP service running here as the vulnerable one we just learned how to compromise.
    With your foothold and an established pivot point, you now have a paved road straight
    to delivering shellcode on a machine deeper in the target network.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在与我们的Kali框看不见的另一个子网上运行的服务进行交流。如果你刚刚完成了前一章节，那么你将会认出在这里运行的FTP服务是我们刚刚学会如何妥协的一个易受攻击的服务。通过你的立足点和建立的枢纽点，你现在已经有了一条通向目标网络中更深处的机器上交付shellcode的铺好的道路。
- en: 'There’s an important clue for understanding how this works on the FTP server
    at the end of our **portfwd** chain. Check out what this looks like on the FTP
    server when we run a netstat:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这个端口转发链末端的FTP服务器上的重要提示**portfwd**。查看我们运行netstat时FTP服务器上的情况：
- en: '![Figure 15.17 – Running netstat on the target FTP server ](image/Figure_15.17_B17616.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图15.17 – 在目标FTP服务器上运行netstat ](image/Figure_15.17_B17616.jpg)'
- en: Figure 15.17 – Running netstat on the target FTP server
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.17 – 在目标FTP服务器上运行netstat
- en: Is that the IP address of your Kali box? Of course not – that’s the Meterpreter
    host that we’ve compromised. We can thus exploit trust relationships to bypass
    firewalls using this method. Now that we’re here, it’s time to exploit these new
    channels to conduct some attacks down the line.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 那是你Kali框的IP地址吗？当然不是 – 那是我们已经妥协的Meterpreter主机。因此，我们可以利用信任关系绕过防火墙使用这种方法。既然我们到了这里，现在是时候利用这些新通道来进行一些进一步的攻击了。
- en: Escalating your pivot – passing attacks down the line
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 升级你的枢纽 – 将攻击传递下去
- en: Let me paint a scenario for you. From inside the restricted network you were
    able to plug into, you’ve just established your foothold on a Windows 7 Enterprise
    machine with a NIC facing an internal **192.168.249.0/24** network. You can’t
    see this network from your position, so using your Meterpreter session, you establish
    routing via your Windows 7 pivot point. After some further reconnaissance, you
    determine that **192.168.249.128** is running an FTP service. However, you can’t
    connect to it from your pivot point. After watching the LAN, you notice traffic
    passing between **192.168.249.128** and **192.168.249.130**, so you suspect a
    trust relationship between those two hosts. You also see the Windows user **Phil** frequently,
    so it could be an administrator’s account that is used on different machines or
    a shared local account for the purposes of setting up these hosts.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我给你描述一个场景。你已经从限制网络内部建立了立足点，成功接入了一台面向内部**192.168.249.0/24**网络的Windows 7企业版机器。你无法从当前位置看到该网络，因此你使用Meterpreter会话，通过Windows
    7的转发点建立了路由。经过进一步侦察，你确认**192.168.249.128**正在运行FTP服务。然而，你无法从转发点连接到它。观察局域网后，你发现**192.168.249.128**和**192.168.249.130**之间有流量传输，因此你怀疑这两台主机之间存在信任关系。你还经常看到Windows用户**Phil**，所以这可能是一个管理员账户，或者是用于设置这些主机的共享本地账户。
- en: I already tried to pivot to **192.168.249.128:21** with **portfwd**, and I tried
    connecting with the Win 7 pivot point’s native FTP client, but no cigar. There’s
    a firewall blocking our traffic. It seems we have a better shot from **192.168.249.130**,
    but that host is on the hidden network. This means we’ll need to leverage our
    pivot point to compromise a host beyond our foothold. Let’s take a look at how
    we can leverage what we’ve captured so far to escalate beyond the foothold.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经尝试通过**192.168.249.128:21**使用**portfwd**进行转发，并尝试使用Windows 7的FTP客户端连接，但没有成功。有一个防火墙阻止了我们的流量。看起来从**192.168.249.130**进行尝试可能更有机会，但该主机位于隐藏网络中。这意味着我们需要利用我们的转发点来攻破我们当前立足点之外的主机。让我们来看看如何利用我们目前获取的信息进一步提升权限。
- en: Using your captured goodies
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用你捕获到的资源
- en: 'In pen testing, you’ll do the occasional bit of off-the-cuff magic. Most of
    the time, however, you’ll be relying on simple, tried-and-true methods to take
    small steps elsewhere in the enterprise. One such trick is reusing credentials
    that you find. I don’t care if I find a password under someone’s keyboard (yes,
    people still do that) or after shoulder surfing someone logging into a teller
    system in a bank – I always know I can be surprised at what that password will
    get me into. Let me tell you a couple of war stories to demonstrate what I mean:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在渗透测试中，你偶尔会做一些即兴的魔法。大多数时候，你会依赖简单且经过验证的方法，在企业中以小步伐向前推进。一个常见的技巧是重复使用你发现的凭证。我不在乎我是在某人键盘下找到密码（是的，有人还会这么做），还是在旁观某人登录银行出纳系统时看到密码——我总是知道这个密码会让我惊讶它能让我进入什么。让我给你讲几个实战故事来说明我的意思：
- en: I was once on an assessment at a financial institution when I managed to get
    domain administrator access. I extracted all the hashes from the domain to crack
    offline. One of the passwords that I recovered in cleartext was for an account
    called **BESAdmin**, which is associated with BlackBerry Enterprise. Weeks later,
    I was at a totally different client, but I noticed during the assessment that
    their IT services contractor was the same company as used by the previous client.
    I found a **BESAdmin** account there, too. When I got to the third client using
    the same contractor with another **BESAdmin** account, I tried to log in with
    the recovered password and voilà – it worked. The convenience of a single password
    allowed me to effectively compromise a domain administrator account for dozens of
    companies that used that contractor.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 曾经我在一次金融机构的评估中成功获得了域管理员权限。我提取了域中的所有哈希值，准备离线破解。我恢复的其中一个明文密码是**BESAdmin**账户的密码，这个账户与BlackBerry
    Enterprise相关。几周后，我来到一个完全不同的客户那里，但在评估过程中我注意到，他们的IT服务承包商与前一个客户使用的公司是同一家。我也在那里找到了**BESAdmin**账户。当我来到第三个使用同一承包商的客户时，我又发现了另一个**BESAdmin**账户，我尝试用恢复的密码登录，结果——成功了。一个通用密码的便利性让我能够有效地攻破使用该承包商的数十家公司中的域管理员账户。
- en: I was at another client site for a company that manages paid-parking structures.
    At the entrance of these structures is a small machine that accepts a credit card
    and prints tickets and receipts. All these XP Embedded machines (about 100 in
    total) check in with a Microsoft SQL database every 5 minutes. You guessed it
    – they authenticate with a privileged domain account. I was able to downgrade
    authentication so that the cracking effort took 45 seconds. That password not
    only got me into the database and all of the payment machines, but it also got
    me into a few other systems off the domain.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我曾在一家管理付费停车场结构的公司客户现场工作。在这些结构的入口处，有一台小型机器可以接受信用卡并打印票据和收据。所有这些 XP 嵌入式机器（总计约 100
    台）每 5 分钟与一个 Microsoft SQL 数据库进行一次检查。你猜怎么着——它们使用具有特权的域账户进行身份验证。我能够降低身份验证等级，从而让破解工作仅用了
    45 秒。这个密码不仅让我进入了数据库和所有的支付机器，还让我进入了域外的其他一些系统。
- en: Both scenarios depict some practices that aren’t very secure, but what’s interesting
    is when I present my findings to the IT staff. Most of the time, they are already
    aware of the implications of these practices! They feel trapped by dated configurations
    and stubborn management. I’ve had IT administrators pull me aside and thank me
    for giving them ammunition to deploy a layer of defense they’ve been asking for.
    I think password attacks are very important because of the total value they can
    provide to a client.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种情况都展示了一些不太安全的做法，但有趣的是，当我向 IT 人员展示我的发现时，大多数时候他们已经意识到这些做法的含义！他们觉得被过时的配置和顽固的管理困住了。我曾有
    IT 管理员把我拉到一边，感谢我给了他们部署他们一直请求的防御层的弹药。我认为密码攻击非常重要，因为它们能为客户提供的整体价值非常大。
- en: Let’s get back to our scenario and depict a similar attack. We’re going to use
    credentials on our pivot point to penetrate deeper into the network. This time,
    however, we don’t have time to crack the password. How can we use a password without
    cracking it first?
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到我们的场景并描绘一个类似的攻击。我们将利用我们的支点凭证更深入地渗透到网络中。然而，这次我们没有时间破解密码。我们如何在不破解密码的情况下使用它？
- en: Quit stalling and Pass-the-Hash – exploiting password equivalents in Windows
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 别再拖延了，使用 Pass-the-Hash——利用 Windows 中的密码等价物
- en: Remember that Windows passwords are special (it isn’t a compliment this time)
    in that they aren’t salted. If my password is **Phil**, then the NTLM hash you
    find will always be **2D281E7302DD11AA5E9B5D9CB1D6704A**. Windows never stores
    or transmits a password in any readable form; it only verifies hashes. There’s
    an obvious consequence to this and it’s exploited with the **Pass-the-Hash** (**PtH**)
    attack.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Windows 密码是特殊的（这次不是夸奖），因为它们没有加盐。如果我的密码是**Phil**，那么你找到的 NTLM 哈希值将始终是**2D281E7302DD11AA5E9B5D9CB1D6704A**。Windows
    从不以任何可读的形式存储或传输密码；它只验证哈希值。这就有了一个明显的后果，它被**Pass-the-Hash**（**PtH**）攻击所利用。
- en: 'Why did Microsoft decide to not use salts? Microsoft has stated that salting
    isn’t necessary due to the other security measures in place, but I can’t think
    of a security practitioner who would agree. The real reason is likely due to those
    recurring themes in Windows design: backward compatibility and interoperability.
    A salt is almost like having an extra password for every password, so systems
    would need mechanisms for exchanging this data securely. This is a tall order,
    but would it be worth it? Salting is considered a bare-minimum single layer of
    defense, not a panacea for password security threats.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么 Microsoft 决定不使用加盐？Microsoft 表示，由于其他安全措施的存在，加盐并不必要，但我想不出有哪个安全专家会同意这个说法。真正的原因可能与
    Windows 设计中的那些反复出现的主题有关：向后兼容性和互操作性。盐值几乎就像是每个密码都有一个额外的密码，因此系统需要有安全交换这些数据的机制。这是一项艰巨的任务，但值得去做吗？加盐被认为是密码安全的最低防御层，而不是万灵药。
- en: Check out the following account names and NTLM hashes. The hashes would be difficult
    to crack without powerful resources (good luck, reader!), so knowing the actual
    password isn’t an option. What do we know about these accounts and what can we
    infer about their relationships to other accounts?
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下账户名和 NTLM 哈希值。这些哈希值没有强大资源的话很难破解（祝你好运，读者！），所以知道实际密码并不是一个选项。我们可以从这些账户中知道什么？我们能推断出它们与其他账户的关系吗？
- en: '**Administrator**: **5723BB80AB0FB9E9A477C4C090C05983**'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Administrator**: **5723BB80AB0FB9E9A477C4C090C05983**'
- en: '**user**: **3D477F4EAA3D384F823E036E0B236343**'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**user**: **3D477F4EAA3D384F823E036E0B236343**'
- en: '**updater**: **C4C537BADA97B2D64F82DBDC68804561**'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**updater**: **C4C537BADA97B2D64F82DBDC68804561**'
- en: '**Jim-Bob**: **5723BB80AB0FB9E9A477C4C090C05983**'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jim-Bob**: **5723BB80AB0FB9E9A477C4C090C05983**'
- en: '**Guest**: **45D4E70573820A932CF1CAC1BE2866C2**'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Guest**：**45D4E70573820A932CF1CAC1BE2866C2**'
- en: '**Exchange**: **7194830BD866352FD9EB0633B781A810**'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Exchange**：**7194830BD866352FD9EB0633B781A810**'
- en: 'That’s right, Eagle Eye, the **Administrator** password is the exact same as
    the **Jim-Bob** password. With salted hashes, we’d have no way of knowing this
    fact from just a glance; but in the Windows world, after literally a moment’s
    review, we know that **Jim-Bob** is using the same password on his personal account
    as the **Administrator** account. What we can infer, then, is that **Jim-Bob**
    is the administrator. If we can’t crack the hashes, how does this help us? Well,
    for one, now we know that targeting **Jim-Bob** with other password attacks such
    as a phishing scam or key logging provides a decent chance of grabbing the almighty
    **Administrator** account. Let’s get back to the other consequence of unsalted
    hashes: the fact that in Windows, the naked hash is a password equivalent, which
    means passing the hash to an authentication mechanism is literally the same thing
    as typing the password.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，鹰眼，**Administrator**密码与**Jim-Bob**密码完全相同。使用加盐哈希，我们无法仅凭一瞥就知道这个事实；但在 Windows
    世界中，经过短短一刻的审查，我们知道**Jim-Bob**在他的个人账户和**Administrator**账户上使用相同的密码。因此，我们可以推断**Jim-Bob**是管理员。如果我们无法破解哈希值，这对我们有什么帮助呢？嗯，首先，现在我们知道，针对**Jim-Bob**进行其他密码攻击，如钓鱼或键盘记录，有很大机会获取至高无上的**Administrator**账户。让我们回到未加盐哈希的另一个后果：在
    Windows 中，裸哈希是一个密码等效物，这意味着将哈希传递给认证机制与输入密码是完全相同的。
- en: 'Jump back into your Meterpreter session and confirm that you’re running as
    **SYSTEM**; if not, escalate with **getsystem**. Next, we’ll execute our built-in
    hash-dumping module with **hashdump**:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到您的 Meterpreter 会话，并确认您正在以**SYSTEM**身份运行；如果没有，请使用**getsystem**进行提权。接下来，我们将使用**hashdump**执行我们内置的哈希转储模块：
- en: '![Figure 15.18 – Using hashdump in a Meterpreter session ](image/Figure_15.18_B17616.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.18 – 在 Meterpreter 会话中使用 hashdump](image/Figure_15.18_B17616.jpg)'
- en: Figure 15.18 – Using hashdump in a Meterpreter session
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.18 – 在 Meterpreter 会话中使用 hashdump
- en: You need to run as **SYSTEM** to have unchecked access to all of Windows. **getsystem** is
    a wonderful escalation module that will attempt a few different classic tricks,
    such as named pipe impersonation and token cloning. We’ll cover this and more
    in [*Chapter 16*](B17616_16_Final_VK_ePub.xhtml#_idTextAnchor292), *Escalating
    Privileges*.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得对 Windows 的所有未经检查的访问权限，您需要以**SYSTEM**身份运行。**getsystem**是一个出色的提权模块，将尝试一些不同的经典技巧，如命名管道模拟和令牌克隆。我们将在[*第16章*](B17616_16_Final_VK_ePub.xhtml#_idTextAnchor292)中详细介绍这些内容，*提权*。
- en: The **hashdump** module does the heavy lifting and puts together everything
    that it finds quite nicely. We’re going to proceed with **psexec** for passing
    the hash. Background your Meterpreter session with the **background** command
    so we can configure the **psexec** module. Issue the **use exploit/windows/smb/psexec**
    command to get the module on deck, then run **show options**.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**hashdump**模块会完成大部分工作，并将找到的所有内容整理得井井有条。我们将继续使用**psexec**来传递哈希。使用**background**命令将
    Meterpreter 会话后台化，以便我们可以配置**psexec**模块。发出**use exploit/windows/smb/psexec**命令以获取模块，然后运行**show
    options**。'
- en: 'Now, there are two things to consider here: our **RHOST** and the Meterpreter
    payload type. Recall that our target, **192.168.249.130**, is not visible from
    our Kali box, but we’ve established routing to the target subnet with the **autoroute**
    module. Metasploit will automatically route this attack via our pivot point! That
    being said, that’s also why we’ll use **bind_tcp** instead of connecting back
    since our Kali box is not visible to the target.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这里有两件事需要考虑：我们的**RHOST**和 Meterpreter 载荷类型。请记住，我们的目标**192.168.249.130**从我们的
    Kali 系统中是不可见的，但我们已经通过**autoroute**模块建立了到目标子网的路由。Metasploit将自动通过我们的枢纽点路由此攻击！也正因如此，我们将使用**bind_tcp**而不是连接回来，因为我们的
    Kali 系统对目标不可见。
- en: 'For **set SMBPass**, use the **LM:NTLM** format from **hashdump**. You can
    mix and match, by the way; for example, we could take the hashes from the **Jim-Bob**
    account in our preceding example but set **SMBUser** to **Administrator**. This
    will simply try the **Jim-Bob** unknown password against the **Administrator**
    account. In our scenario, we’re trying our luck with the **Phil** account. Finally,
    fire it off with **exploit**:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对于**set SMBPass**，请使用**hashdump**中的**LM:NTLM**格式。顺便说一句，您可以混合使用；例如，我们可以从前面示例中的**Jim-Bob**账户中获取哈希值，但将**SMBUser**设置为**Administrator**。这将简单地尝试将**Jim-Bob**的未知密码与**Administrator**账户匹配。在我们的情况下，我们正在尝试使用**Phil**账户。最后，使用**exploit**来执行：
- en: '![Figure 15.19 – Passing the hash behind the foothold ](image/Figure_15.19_B17616.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.19 – 绕过足迹获取哈希值](image/Figure_15.19_B17616.jpg)'
- en: Figure 15.19 – Passing the hash behind the foothold
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.19 – 绕过足迹获取哈希值
- en: Now we’re sporting two fancy Meterpreter sessions – session 1 is via our foothold
    into the hidden network, and session 2 is with the host we suspect has a trust
    relationship with the FTP server. When you’re playing around in your lab, you
    may be used to a single Meterpreter session; be prepared to organize your sessions
    when you leverage Metasploit’s power for pivoting.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了两个精致的 Meterpreter 会话——会话 1 是通过我们的立足点进入隐藏网络，会话 2 是与我们怀疑与 FTP 服务器有信任关系的主机建立的。当您在实验室中进行测试时，可能习惯于只有一个
    Meterpreter 会话；当您利用 Metasploit 的力量进行枢纽攻击时，请做好组织多个会话的准备。
- en: 'Let’s try the good old-fashioned **portfwd** again. By establishing it within
    our *second* Meterpreter session, the traffic will actually come from the trusted
    host:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次尝试老式的**portfwd**。通过在我们的*第二个* Meterpreter 会话中建立它，流量实际上将来自受信主机：
- en: '![Figure 15.20 – The netcat session via the compromised trusted host ](image/Figure_15.20_B17616.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.20 – 通过被攻陷的受信主机进行的 netcat 会话 ](image/Figure_15.20_B17616.jpg)'
- en: Figure 15.20 – The netcat session via the compromised trusted host
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.20 – 通过被攻陷的受信主机进行的 netcat 会话
- en: And there you have it – we’ve bypassed a restrictive firewall by compromising
    the trusted host. It’s one thing to somehow bypass controls directly from our
    box, leaving a trail of evidence pointing at the IP address associated with a
    network drop in the conference room near the front door. It’s another thing altogether
    to see the source as a trusted host inside the firewall. Imagine the potential
    of chaining targets together as we work our way in.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样——我们通过攻陷受信主机绕过了严格的防火墙。直接从我们的机器绕过控制并不难，只要留下一些证据指向会议室前门附近网络端口的 IP 地址即可。另一个完全不同的事情是，当源头是防火墙内的受信主机时，这意味着完全不同的潜力。想象一下，在我们逐步渗透时，如何将目标串联起来。
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we introduced some of the options available to us once we’ve
    established our foothold in a client’s environment. We covered the initial recon
    and enumeration that allows us to springboard off our foothold into secure areas
    of the network, including discovering hidden networks after compromising dual-homed
    hosts, ARP-scanning hidden networks, and the gathering of sensitive and deleted
    data. From there, we enhanced our understanding of the pivot concept by setting
    up routes into the hidden network and enabling port forwarding to allow interaction
    with hosts on the hidden network with Kali’s tools. Finally, we pressed forward
    by leveraging credentials on our pivot host to compromise a computer inside the
    perimeter.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了在我们建立立足点后可以使用的一些选项。我们涵盖了初步的侦察和枚举，使我们能够从立足点跳转到网络的安全区域，包括在攻破双网卡主机后发现隐藏的网络，进行
    ARP 扫描隐藏网络，以及收集敏感和已删除的数据。从那里，我们通过设置进入隐藏网络的路由并启用端口转发，使我们能够使用 Kali 工具与隐藏网络中的主机进行交互，进一步增强了对枢纽概念的理解。最后，我们通过利用枢纽主机上的凭证，攻破了防火墙内的计算机。
- en: 'In the next chapter, we’ll explore the power of privilege escalation: taking
    our lowly foothold and turning it into a privileged compromise to gain access
    to critical resources. Tying this together with the knowledge from this chapter
    will prepare you for sophisticated movement within the target’s environment.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨特权提升的强大功能：将我们微不足道的立足点转变为特权级的攻破，从而获得对关键资源的访问权限。结合本章的知识，您将为在目标环境中进行复杂的渗透做好准备。
- en: Questions
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Answer the following questions to check your knowledge of this chapter:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 请回答以下问题，以检查您对本章内容的理解：
- en: I have just established a Meterpreter session with a dual-homed host, so I configure
    and execute the **portscan** module to search for hosts on the other network.
    I am curious about the status of the scan, so I pull up Wireshark on my machine.
    There’s no scan traffic visible. What’s wrong?
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我刚刚与一台双网卡主机建立了 Meterpreter 会话，因此我配置并执行了**portscan**模块来搜索另一网络中的主机。我对扫描的状态感到好奇，于是我在我的机器上打开了
    Wireshark。但没有看到任何扫描流量。怎么回事？
- en: 'I just issued the following command in Meterpreter, but nothing happened: **execute
    -f ipconfig**. Why didn’t I see the output of **ipconfig**?'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我刚刚在 Meterpreter 中发出了以下命令，但没有任何反应：**execute -f ipconfig**。为什么没有看到 **ipconfig**
    的输出？
- en: I don’t need to specify ________ when running a module within Meterpreter, since
    the command is sent to that system only.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Meterpreter 中运行模块时，我不需要指定 ________，因为该命令仅发送到该系统。
- en: A deep packet analysis of the Meterpreter ARP scan will reveal the IP address
    of our attacking Kali box. (True | False)
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对 Meterpreter ARP 扫描的深度数据包分析将揭示我们攻击的 Kali 主机的 IP 地址。（正确 | 错误）
- en: Using fewer threads during a Meterpreter port scan reduces the risk of our traffic
    tripping an IDS. (True | False)
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在进行 Meterpreter 端口扫描时，使用较少的线程可以减少我们的流量触发 IDS 的风险。（正确 | 错误）
- en: When configuring a PtH attack, the salt must be specified. (True | False)
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在配置 PtH 攻击时，必须指定盐值。（正确 | 错误）
- en: My PtH attack works because I see a new Meterpreter session; however, it dies
    about 2 seconds later. Is there anything I can do to keep the session alive?
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我的 PtH 攻击有效，因为我看到了一个新的 Meterpreter 会话；然而，大约 2 秒后它就死掉了。我能做些什么来保持会话存活？
- en: Further reading
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more information regarding the topics that were covered in this chapter,
    take a look at the following resources:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解本章中涉及的主题的更多信息，请查看以下资源：
- en: Microsoft TechNet presentation and discussion on PtH attacks ([https://technet.microsoft.com/en-us/dn785092.aspx](https://technet.microsoft.com/en-us/dn785092.aspx))
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 PtH 攻击的 Microsoft TechNet 演讲和讨论（[https://technet.microsoft.com/en-us/dn785092.aspx](https://technet.microsoft.com/en-us/dn785092.aspx))
