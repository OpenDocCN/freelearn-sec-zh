- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Pentesting Containerized Applications in Azure
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Azure 中对容器化应用进行渗透测试
- en: In the previous chapter, we went through the process of setting up a Microsoft
    Azure environment for us to practice pentesting and vulnerability scanning in.
    We then deployed a **virtual machine** (**VM**), learned some PowerShell commands,
    and conducted some scans with some applications using Bash, while in the Azure
    Cloud Shell CLI.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章，我们介绍了如何设置一个 Microsoft Azure 环境，以便我们在其中练习渗透测试和漏洞扫描。接着我们部署了一个**虚拟机**（**VM**），学习了一些
    PowerShell 命令，并使用 Bash 在 Azure Cloud Shell CLI 中进行了一些应用扫描。
- en: Sometimes, organizations simply run their applications in Azure from ordinary
    Windows and Linux VMs. However, very often, organizations need a highly scalable
    cloud configuration where application components can be launched and shut down
    quickly and responsively. That’s especially true in DevOps applications, and that’s
    where *containerization* comes in.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，组织会仅仅在普通的 Windows 和 Linux 虚拟机中运行它们的应用程序。然而，很多时候，组织需要一个高度可扩展的云配置，应用程序组件可以快速、灵活地启动和关闭。这在
    DevOps 应用中尤其重要，这正是*容器化*派上用场的地方。
- en: Because a lot of companies use containerization in their Azure networks, it’s
    important for you to learn how to pentest them. That’s what this chapter is all
    about.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 由于许多公司在其 Azure 网络中使用容器化，因此你学习如何进行渗透测试变得尤为重要。这正是本章的内容。
- en: In this chapter, I will explain what containerization is, why containerization
    is used, and how containerization works in general. We will also discuss how Docker
    and Kubernetes work in Azure, along with the pentesting techniques to test them.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将解释什么是容器化，为什么使用容器化，以及容器化的基本工作原理。我们还将讨论 Docker 和 Kubernetes 在 Azure 中的工作方式，并介绍测试它们的渗透测试技术。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: How containerization works
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器化的工作原理
- en: Docker and Kubernetes pentesting techniques in Azure
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Azure 中的 Docker 和 Kubernetes 渗透测试技术
- en: So, let’s get into it!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们开始吧！
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'We will work with Microsoft’s infrastructure. Massive Azure data centers will
    do the bulk of the computer processing work for the exercises in this chapter.
    So, fortunately, you don’t need to have a top-of-the-line workstation. You will
    need the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用微软的基础设施。大量的 Azure 数据中心将负责本章练习的主要计算处理工作。所以，幸运的是，你不需要一台顶级的工作站。你将需要以下设备：
- en: A web browser
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个网页浏览器
- en: A desktop or laptop PC
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台台式机或笔记本电脑
- en: An Android or iPhone mobile
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台安卓手机或 iPhone 手机
- en: A good, reliable internet connection
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个良好的、可靠的互联网连接
- en: 'Check out the following video to view the Code in Action: [https://bit.ly/3QmGlKX](https://bit.ly/3QmGlKX)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，查看代码实际操作：[https://bit.ly/3QmGlKX](https://bit.ly/3QmGlKX)
- en: How containerization works
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器化的工作原理
- en: '**VMs** are simulated computers. Instead of directly running on PC or server
    machine hardware, a VM imitates all of the hardware components that are needed
    to run an operating system. So, one physical computer can run several simulated
    computers, and each simulated computer runs as if it were an application in a
    hypervisor in a host operating system, or in a hypervisor that runs directly on
    the hardware.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**虚拟机**是模拟计算机。它不是直接运行在 PC 或服务器的硬件上，而是模拟操作系统运行所需的所有硬件组件。因此，一台物理计算机可以运行多个模拟计算机，每个模拟计算机就像在宿主操作系统的虚拟化程序（hypervisor）中运行的一个应用程序，或者在直接运行在硬件上的虚拟化程序中运行。'
- en: You can use an application on your own PC, such as Oracle VirtualBox or VMware
    Workstation Player, to work as a hypervisor for your VMs. All you need is a disk
    image file of an operating system you’d like to run in your VM and configure it
    in your hypervisor. The operating systems don’t have to match your host operating
    system, and very often, they don’t. I could run a Kali Linux VM on my Windows
    11 PC. You could run a Windows 11 VM on your MacBook. And I could run a macOS
    VM on my Ubuntu Linux desktop.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用自己的 PC 上的应用程序，如 Oracle VirtualBox 或 VMware Workstation Player，作为虚拟机的虚拟化程序。你只需要一个你想在虚拟机中运行的操作系统的磁盘映像文件，并将其配置在虚拟化程序中即可。操作系统不需要与宿主操作系统匹配，实际上，通常并不匹配。我可以在我的
    Windows 11 PC 上运行一个 Kali Linux 虚拟机。你可以在你的 MacBook 上运行一个 Windows 11 虚拟机。而我可以在我的
    Ubuntu Linux 桌面上运行一个 macOS 虚拟机。
- en: However, it does take a few minutes to set up a VM, as we did in [*Chapter 8*](B18672_08.xhtml#_idTextAnchor141),
    and when you set up a VM, a disk image of the entire operating system needs to
    be used.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，设置虚拟机确实需要一些时间，就像我们在[*第 8 章*](B18672_08.xhtml#_idTextAnchor141)中所做的那样，当你设置虚拟机时，需要使用整个操作系统的磁盘映像。
- en: It’s also possible to run a VM on a cloud platform, as we did in the previous
    chapter. Even though I used Microsoft’s computers and not my own to run the VM,
    it still took a few minutes to set one up on Azure. Also, a conventional VM on
    a cloud platform is functionally similar to a VM on your own computer; the entire
    operating system is used.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以在云平台上运行虚拟机，正如我们在前一章中所做的那样。即使我使用的是微软的计算机，而不是自己的计算机来运行虚拟机，在 Azure 上设置一个虚拟机仍然需要几分钟的时间。此外，云平台上的传统虚拟机在功能上与自己计算机上的虚拟机类似；它使用整个操作系统。
- en: Running a VM like that on a cloud platform works great when a company wants
    to keep the same VM running for months at a time or longer. Running a simple web
    server on a cloud platform is a great use case for that.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在云平台上运行这样的虚拟机非常适合当公司希望让同一虚拟机运行几个月或更长时间时使用。在云平台上运行简单的 web 服务器是一个很好的使用案例。
- en: However, nowadays, DevOps and CI/CD application development methodologies make
    it possible for companies to deploy dynamic applications that need to scale rapidly.
    These applications can have backends that are radically different from one day
    to another, reponding to whatever the current production network needs are at
    any given moment.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如今，DevOps 和 CI/CD 应用开发方法论使得公司能够部署需要快速扩展的动态应用程序。这些应用程序的后台可能会发生剧烈变化，每天甚至每时每刻都可能响应当前生产网络的需求。
- en: '*Containers* are a really precise way to deploy virtualization. A **container**
    contains only the operating system components that are needed to run a small part
    of a much larger application. Individual containers can have a lifespan of just
    a few days, or even just a few hours.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*容器* 是部署虚拟化的一种非常精确的方式。一个 **容器** 只包含运行更大应用程序小部分所需的操作系统组件。单个容器的生命周期可能只有几天，甚至只有几个小时。'
- en: '*Docker* and *Kubernetes* are the two commonly used containerization orchestration
    platforms companies use today. A containerization orchestration platform will
    automatically launch and kill containers without needing direct human interaction.
    These platforms manage how containers are deployed and also handle the load balancing
    within the virtualized hardware, allocating hardware resources such as CPU and
    memory only when they are needed.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*Docker* 和 *Kubernetes* 是公司今天常用的两种容器化编排平台。容器化编排平台会自动启动和停止容器，而无需直接的人类干预。这些平台管理容器的部署，并处理虚拟化硬件中的负载均衡，只在需要时分配硬件资源，如
    CPU 和内存。'
- en: Cloud platforms have made containerized applications possible for companies
    and other sorts of enterprises. Microsoft has massive hardware and networking
    capacity in its various Azure data centers around the world. So, if a containerized
    application needs a capacity of 1,000 machines one day, 200 the next, and 2,000
    the following day, Azure makes it possible so the company doesn’t have to deploy
    and decommission all of those machines on their own premises.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 云平台使得公司和其他类型的企业能够实现容器化应用。微软在其全球各地的 Azure 数据中心拥有巨大的硬件和网络能力。因此，如果容器化应用某天需要 1,000
    台机器，第二天需要 200 台，第三天需要 2,000 台，Azure 可以提供这样的支持，这样公司就不需要在自己的场地上部署和停用这些机器。
- en: You will very likely be expected to pentest Docker- and Kubernetes-based applications
    in Azure.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你很可能会被要求在 Azure 中对基于 Docker 和 Kubernetes 的应用程序进行渗透测试。
- en: As AWS has its own ways of managing Docker and Kubernetes, so does Azure. Therefore,
    let’s learn about that.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 正如 AWS 有自己管理 Docker 和 Kubernetes 的方式，Azure 也有自己的方式。因此，让我们来了解一下这些内容。
- en: How Docker works in Azure
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何在 Azure 中使用 Docker
- en: You can launch a Docker instance in Azure from your local computer using Docker
    Desktop, or directly from the Azure CLI. Docker Desktop requires you to install
    the Docker Desktop application on your computer ([https://docs.docker.com/cloud/aci-integration/](https://docs.docker.com/cloud/aci-integration/)),
    but it’s also possible to launch a Docker instance directly from Azure Cloud Shell
    (a way to access the Azure CLI) in your web browser. Personally, I prefer the
    latter option. That’s probably the most convenient way if you just want to launch
    Docker in the simplest way possible for testing purposes. If you were to launch
    Docker for a specialized business purpose and have more control over it, Docker
    Desktop may be the better option.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过 Docker Desktop 从本地计算机启动 Azure 中的 Docker 实例，或者直接通过 Azure CLI 启动。Docker
    Desktop 要求你在计算机上安装 Docker Desktop 应用程序（[https://docs.docker.com/cloud/aci-integration/](https://docs.docker.com/cloud/aci-integration/)），但也可以直接通过
    Azure Cloud Shell（这是一种在网页浏览器中访问 Azure CLI 的方式）启动 Docker 实例。我个人更倾向于后者。如果你只是为了测试目的以最简单的方式启动
    Docker，这可能是最方便的方式。如果你要为特定的业务用途启动 Docker，并对其进行更多控制，Docker Desktop 可能是更好的选择。
- en: 'Let’s work from Azure Cloud Shell and use one of the Docker images Azure makes
    available by default (it’s also possible to acquire or create your own Docker
    images, but that’s not necessary for the exercises in this book; a Docker image
    is like a disk image used in conventional VMs but specialized for a container):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从 Azure Cloud Shell 开始工作，使用 Azure 默认提供的 Docker 镜像（当然也可以获取或创建你自己的 Docker 镜像，但对于本书中的练习，这不是必要的；Docker
    镜像类似于传统虚拟机中使用的磁盘镜像，但它是为容器优化的）：
- en: Log in to the Azure account we set up in the previous chapter, from your web
    browser.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过你的网页浏览器登录到我们在上一章中设置的 Azure 帐户。
- en: The native way to deploy Docker in Azure is to use Azure Container Instances,
    which is a serverless service. There is technically a server, but Azure manages
    it, not you! That’s what will be running in the background while you follow these
    instructions.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Azure 中部署 Docker 的原生方式是使用 Azure 容器实例，这是一个无服务器服务。严格来说，背后是有服务器的，但由 Azure 管理，而不是你！在你按照这些指令操作时，这就是后台运行的服务。
- en: From the blue menu bar at the top of the web page, go to the first icon to the
    right of the search bar. It should look something like **>_**.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网页顶部的蓝色菜单栏中，点击搜索栏右侧的第一个图标。它应该看起来像**>_**。
- en: Click on it to launch Azure Cloud Shell. From there, we’ll work in Bash instead
    of PowerShell because that’s what the pentesting tools in this chapter use. Choose
    **Bash** from the top bar of the Azure Cloud Shell screen.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击它以启动 Azure Cloud Shell。接下来，我们将使用 Bash 而不是 PowerShell，因为本章中的渗透测试工具使用的是 Bash。在
    Azure Cloud Shell 屏幕的顶部栏选择**Bash**。
- en: 'Then, make sure you have the necessary version of the Azure CLI. Input the
    following command:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，确保你拥有所需版本的 Azure CLI。输入以下命令：
- en: '[PRE0]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As long as you’ve got version 2.0.55 or later, you’re good to go. I have version
    2.50.0, so I don’t need to upgrade. If you do need to upgrade, input the following:'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只要你有 2.0.55 版本或更高版本，就可以正常使用。我现在使用的是 2.50.0 版本，所以不需要升级。如果你需要升级，请输入以下命令：
- en: '[PRE1]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Containers in Azure use a resource group in order to manage Azure’s resources
    for your purposes. Let’s set one up. Input this command:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Azure 中的容器使用资源组来管理 Azure 的资源以满足你的需求。让我们设置一个资源组。输入以下命令：
- en: '[PRE2]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**eastus** can be replaced by whichever Azure data center region name you’d
    like. For instance, you could choose **canadacentral**, **brazilsouth**, or **westus**
    if you want.'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**eastus** 可以替换为你选择的任何 Azure 数据中心区域名称。例如，如果你愿意，可以选择 **canadacentral**、**brazilsouth**
    或 **westus** 等。'
- en: 'Then, we need to create a container! For the purposes of the exercises in this
    chapter, using one of Microsoft’s default Docker container images is fine. Do
    so with this command:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一个容器！为了本章练习的目的，使用 Microsoft 默认的 Docker 容器镜像即可。使用以下命令操作：
- en: '[PRE3]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Make sure that the name of your resource group is the same name you created
    in the previous command.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保你的资源组名称与前一个命令中创建的名称相同。
- en: 'Now, you can verify your container’s status to see whether all that worked!
    Enter this command:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以验证容器的状态，查看一切是否正常！输入以下命令：
- en: '[PRE4]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If all of that worked, something like this will be printed on the command line:'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果一切顺利，命令行上会打印出类似的内容：
- en: '[PRE5]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If not, start all over again from the **create resource group** command. Now,
    we have a Docker instance running that we can test our pentesting skills in! Congratulations!
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有成功，请从**创建资源组**命令重新开始。现在，我们已经启动了一个 Docker 实例，可以在其中测试我们的渗透测试技能！恭喜！
- en: 'There’s just one last command that’s very useful to pentest your new Docker
    instance. A lot of the vulnerability data we can mention in a pentest report comes
    from logging. You can use the following command to pull container instance logs:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个非常有用的命令，可以用来对你的新 Docker 实例进行渗透测试。我们在渗透测试报告中提到的许多漏洞数据都来源于日志记录。你可以使用以下命令来拉取容器实例日志：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You will get a message on the command line that says **listening on port 80**
    (the TCP/IP port for HTTP), and eventually, you will see HTTP **GET** requests
    displayed on the command line as they are made for your Docker instance from your
    computer or other computers on the internet.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行中，你会看到一条消息，显示**监听端口 80**（HTTP 的 TCP/IP 端口），最终，你将看到 HTTP **GET** 请求在命令行中显示出来，这些请求来自你的计算机或互联网上的其他计算机，针对你的
    Docker 实例。
- en: 'You can remove your Docker container with this command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这个命令删除你的 Docker 容器：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, let’s move on to Kubernetes.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续讲解 Kubernetes。
- en: How Kubernetes works in Azure
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes 在 Azure 中的工作方式
- en: Azure has services that are specifically designed to deploy Kubernetes! Azure
    Kubernetes Service ([https://learn.microsoft.com/en-us/azure/aks/intro-kubernetes](https://learn.microsoft.com/en-us/azure/aks/intro-kubernetes))
    makes deploying Kubernetes containerization on Azure’s platform easy.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 提供了专门用于部署 Kubernetes 的服务！Azure Kubernetes 服务（[https://learn.microsoft.com/en-us/azure/aks/intro-kubernetes](https://learn.microsoft.com/en-us/azure/aks/intro-kubernetes)）使得在
    Azure 平台上部署 Kubernetes 容器化变得非常简单。
- en: Kubernetes is the most popular containerization orchestration platform today.
    However, here’s a fact that may confuse some newcomers – Kubernetes expands on
    some of the technologies that were pioneered by Docker. It’s also possible to
    run Docker containers in Kubernetes! So, Docker and Kubernetes are often intertwined
    in enterprise DevOps and CI/CD applications that run in the cloud.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 是目前最流行的容器编排平台。然而，有一个事实可能会让一些新手感到困惑——Kubernetes 扩展了 Docker 开创的一些技术。实际上，Kubernetes
    中也可以运行 Docker 容器！因此，Docker 和 Kubernetes 在企业 DevOps 和 CI/CD 应用中经常相互交织，尤其是那些运行在云中的应用。
- en: In the previous section, we deployed a purely Docker-based containerization
    system, with Azure’s serverless Azure Container Instances service running in the
    background to support it all. Now, we will deploy containerization in Azure Kubernetes
    Service.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一部分中，我们部署了一个完全基于 Docker 的容器化系统，Azure 的无服务器 Azure 容器实例服务在后台支持这一切。现在，我们将把容器化部署到
    Azure Kubernetes 服务中。
- en: Kubernetes has a very particular architecture (as discussed in [*Chapter 6*](B18672_06.xhtml#_idTextAnchor101)).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 具有非常特殊的架构（如 [*第六章*](B18672_06.xhtml#_idTextAnchor101) 中所讨论的）。
- en: Note
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Kubernetes architecture is the same regardless of the cloud platform.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 的架构在不同的云平台中是相同的。
- en: At the base of a Kubernetes deployment is the control plane. That’s the parent
    of everything else that runs on top of it. It features an API server to manage
    connections to external applications, and a controller manager. We will give it
    commands through *kubectl*, the Kubernetes CLI.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 部署的基础是控制平面。它是其他所有组件的父级，位于其上方。控制平面包含一个 API 服务器，用于管理与外部应用的连接，以及一个控制器管理器。我们将通过
    *kubectl*（Kubernetes 的命令行工具）向其发送命令。
- en: The control plane’s children are *Nodes*. They share compute, network, and storage
    resources. The children of Nodes are *Pods*, and the children of Pods are the
    *individual containers*. So, think of it this way – containers are the great-grandparents
    of containers.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 控制平面的子组件是*节点*。它们共享计算、网络和存储资源。节点的子组件是*Pod*，而 Pod 的子组件是*单个容器*。因此，可以这样理解——容器是容器的曾祖父母。
- en: Containers are the most dynamic component; they change most frequently. They’re
    generated responsively from container images, according to whatever an application
    needs at the time. They contain only the configuration files, libraries, and dependencies
    that are required for the code they execute to run. That’s because the Nodes handle
    the load balancing of hardware resources, and the control plane has ultimate control
    over everything and is also the gateway to systems outside of your Kubernetes
    containerization system.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 容器是最具动态性的组件；它们是变化最频繁的。它们根据应用的需求响应性地从容器镜像中生成。容器中仅包含执行代码所需的配置文件、库和依赖项。这是因为节点处理硬件资源的负载均衡，而控制平面对所有内容具有最终控制权，并且也是
    Kubernetes 容器化系统外部系统的网关。
- en: If you want to sound like you’re a real Kubernetes expert, call it *K8s*. That’s
    the nickname Kubernetes developers and administrators have given it. However,
    I prefer to call it by its formal name.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想听起来像个真正的 Kubernetes 专家，可以称其为 *K8s*。这是 Kubernetes 开发者和管理员给它起的昵称。不过，我更喜欢用它的正式名称。
- en: 'Okay, let’s deploy Kubernetes in our Azure network! We can use it for pentesting
    later in this chapter:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们在 Azure 网络中部署 Kubernetes！我们可以在本章后面用它进行渗透测试：
- en: First, we need to launch Azure Cloud Shell again. From the blue menu bar at
    the top of the web page, go to the first icon to the right of the search bar.
    It should look something like **>_**.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要再次启动 Azure Cloud Shell。从网页顶部的蓝色菜单栏中，点击搜索栏右侧的第一个图标，它应该像 **>_** 这样。
- en: Click on it to launch Azure Cloud Shell. From there, we’ll work in Bash instead
    of PowerShell. Choose **Bash** from the top bar of the Azure Cloud Shell screen.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击它以启动 Azure Cloud Shell。从这里，我们将使用 Bash 而不是 PowerShell。在 Azure Cloud Shell 屏幕的顶部栏中选择**Bash**。
- en: 'Then, make sure you have the right version of the Azure CLI. Use this command:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，确保你有正确版本的 Azure CLI。使用此命令：
- en: '[PRE8]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As long as you have version 2.0.55 or later, you’re good to go. Otherwise,
    enter this command:'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只要你有版本 2.0.55 或更高版本，就可以继续使用了。否则，输入此命令：
- en: '[PRE9]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: While working with Kubernetes at the Azure CLI, I learned that I needed to create
    a service principal with access to my container registry first so that everything
    else would work properly.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Azure CLI 中操作 Kubernetes 时，我了解到首先需要创建一个具有访问我的容器注册表权限的服务主体，这样其他操作才能正常进行。
- en: 'Copy this script, and paste it into a text editor, such as Notepad. Replace
    where it says **$containerRegistry** with a name of your choice (e.g., **acrKim**).
    Replace **$servicePrincipal** with a name of your choice (e.g., **KIM_KUBERNETES**):'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制这段脚本并粘贴到文本编辑器中，如记事本。将 **$containerRegistry** 替换为你选择的名称（例如 **acrKim**）。将 **$servicePrincipal**
    替换为你选择的名称（例如 **KIM_KUBERNETES**）：
- en: '[PRE10]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If yours won’t be thrown away soon, change your password to something complex
    with a lot of random characters.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你的密码不会很快被丢弃，最好将密码更改为一个复杂的、包含大量随机字符的密码。
- en: 'Now, we can finally deploy our Kubernetes cluster! Replace **kimAKSCluster**
    with a cluster name of your choice. Replace **acrKim** with the ACR name you used
    in the **ACR_REGISTRY_ID=$(az acr show --name $acrKim --query "id" --output tsv)**
    line of the previous script:'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们终于可以部署我们的 Kubernetes 集群了！将 **kimAKSCluster** 替换为你选择的集群名称。将 **acrKim** 替换为你在前一个脚本的
    **ACR_REGISTRY_ID=$(az acr show --name $acrKim --query "id" --output tsv)** 行中使用的
    ACR 名称：
- en: '[PRE11]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: After a few minutes, a JSON output will display confirmation of the metrics
    of your Azure Kubernetes Service deployment.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 几分钟后，JSON 输出将显示确认 Azure Kubernetes Service 部署的度量信息。
- en: The Kubernetes CLI, otherwise known as *kubectl*, is already installed in Azure
    Cloud Shell.
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Kubernetes CLI，也就是 *kubectl*，已经安装在 Azure Cloud Shell 中。
- en: 'Then, we need to connect to our Kubernetes cluster with kubectl. Enter the
    following command, but replace **myResourceGroup** with the resource group name
    you used previously, and replace **kimAKSCluster** with the cluster name you used
    previously:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要使用 kubectl 连接到我们的 Kubernetes 集群。输入以下命令，但将 **myResourceGroup** 替换为你之前使用的资源组名称，将
    **kimAKSCluster** 替换为你之前使用的集群名称：
- en: '[PRE12]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, we can verify that everything worked and our Nodes are running. Input
    this command:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以验证一切是否正常，并确保我们的节点在运行。输入以下命令：
- en: '[PRE13]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, we have a vanilla Docker instance in Azure using Azure Container Instances,
    and a basic Kubernetes instance using Azure Kubernetes Service.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们在 Azure 中使用 Azure 容器实例有了一个基础的 Docker 实例，并且使用 Azure Kubernetes Service 配置了一个基本的
    Kubernetes 实例。
- en: In the following section, we’ll run some vulnerability scans and pentest scripts
    in those instances. This is the fun stuff!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将在这些实例中运行一些漏洞扫描和渗透测试脚本。这才是有趣的部分！
- en: Docker and Kubernetes pentesting techniques in Azure
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure 中的 Docker 和 Kubernetes 渗透测试技术
- en: Let’s explore some tools to pentest containers in Azure.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索一些在 Azure 中进行容器渗透测试的工具。
- en: kube-hunter
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: kube-hunter
- en: 'The first pentesting application we’ll try is **kube-hunter** by Aqua Security
    on GitHub. The introduction in the kube-hunter **README** file at [https://github.com/aquasecurity/kube-hunter/blob/main/README.md](https://github.com/aquasecurity/kube-hunter/blob/main/README.md)
    states the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尝试的第一个渗透测试应用程序是 GitHub 上 Aqua Security 提供的 **kube-hunter**。kube-hunter **README**
    文件中的介绍在 [https://github.com/aquasecurity/kube-hunter/blob/main/README.md](https://github.com/aquasecurity/kube-hunter/blob/main/README.md)
    中提到如下内容：
- en: '*“kube-hunter hunts for security weaknesses in Kubernetes clusters. The tool
    was developed to increase awareness and visibility for security issues in Kubernetes
    environments. You should NOT run kube-hunter on a Kubernetes cluster that you*
    *don’t own!”*'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '*“kube-hunter会搜索Kubernetes集群中的安全漏洞。该工具的开发目的是提高Kubernetes环境中安全问题的意识和可见性。你不应该在你*
    *不拥有的Kubernetes集群上运行kube-hunter！”*'
- en: Absolutely! That’s why we set up our own Kubernetes cluster in our own Azure
    services in this chapter. When you’re actually doing paid work as a pentester,
    you will need signed legal permission from the company that owns the Azure network
    and Kubernetes instance.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对可以！这就是为什么我们在本章中在我们自己的Azure服务中设置了自己的Kubernetes集群。当你实际做渗透测试工作时，你将需要得到拥有Azure网络和Kubernetes实例的公司签署的法律许可。
- en: There are lots of different kinds of scans you can do with kube-hunter. First,
    let’s install it. Then, we’ll run a quick scan.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用kube-hunter，你可以进行许多不同类型的扫描。首先，让我们安装它。然后，我们将进行一次快速扫描。
- en: 'Let’s clone the **git** repository for kube-hunter with this command in Bash
    within Azure Cloud Shell:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在Azure Cloud Shell中的Bash中，让我们使用此命令克隆kube-hunter的**git**仓库：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, we’ll install its dependencies:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将安装它的依赖项：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'kube-hunter is a Python application, so we can launch it with this command:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: kube-hunter是一个Python应用程序，所以我们可以使用以下命令启动它：
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'There’s another installation method that I like to use. It uses the **pip**
    repositories. Try this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种安装方法我喜欢使用，它利用**pip**仓库。试试这个：
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And if you installed kube-hunter that way, you could launch it with this command:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是通过这种方式安装了kube-hunter，你可以使用这个命令启动它：
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can also run kube-hunter while specifying a certain log level. Try this
    command:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在指定特定日志级别的情况下运行kube-hunter。试试这个命令：
- en: '[PRE19]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'That will output the **WARNING** level logs. Those are the events you should
    really pay attention to, which can be very useful to mention in your pentest report.
    Alternatively, you can output **DEBUG** logs with this command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这样会输出**WARNING**级别的日志。这些事件你应该特别关注，它们在渗透测试报告中非常有用。或者，你可以使用这个命令输出**DEBUG**日志：
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The default when you launch kube-hunter is to log **INFO**-level events. If
    you changed the logging to **WARNING** or **DEBUG** and you’d like to switch back
    to **INFO**, use this command:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 启动kube-hunter时，默认会记录**INFO**级别的事件。如果你更改了日志记录为**WARNING**或**DEBUG**，并且希望切换回**INFO**，可以使用以下命令：
- en: '[PRE21]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As we’re working in our own Kubernetes instance for educational purposes, feel
    free to play around with the different logging options.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在自己的Kubernetes实例中进行教育用途的操作，可以随意尝试不同的日志记录选项。
- en: 'When you run a quick scan with the **kube-hunter** command, this is what will
    output at the command line:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用**kube-hunter**命令进行快速扫描时，命令行将输出以下内容：
- en: '![Figure 9.1 – Running kube-hunter in Azure](image/B18672_09_013.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图9.1 – 在Azure中运行kube-hunter](image/B18672_09_013.jpg)'
- en: Figure 9.1 – Running kube-hunter in Azure
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 – 在Azure中运行kube-hunter
- en: So, then, you enter **1**, **2**, or **3** for the type of scanning you’d like
    to execute. If you use options **1** or **3**, you will need to enter IP addresses
    at the following prompt.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你输入**1**、**2**或**3**，选择你想执行的扫描类型。如果选择**1**或**3**，你需要在以下提示中输入IP地址。
- en: 'I often forget about the IP addresses that I use with my Azure instance when
    I’m playing around. We’re in Bash, so the simplest way to check your IP addresses
    in Azure is with this command:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我常常忘记在玩弄Azure实例时所使用的IP地址。我们在Bash中，因此检查Azure中IP地址的最简单方法是使用以下命令：
- en: '[PRE22]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Something like this should output at the command line:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行应该会输出类似这样的内容：
- en: '![Figure 9.2 – The ifconfig command in Azure](image/B18672_09_015.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图9.2 – Azure中的ifconfig命令](image/B18672_09_015.jpg)'
- en: Figure 9.2 – The ifconfig command in Azure
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2 – Azure中的ifconfig命令
- en: Yes, I know the character **X** isn’t used in IPv4 or IPv6 IP addresses. I replaced
    some of the characters in my IP addresses for the sake of operational security.
    You can never be too careful!
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我知道字符**X**在IPv4或IPv6 IP地址中并未使用。我替换了我的IP地址中的某些字符，目的是出于操作安全考虑。你永远也不能太小心！
- en: 'You can also install and run kube-hunter inside Docker containers! Install
    kube-hunter in Docker with this command:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在Docker容器内安装并运行kube-hunter！通过以下命令在Docker中安装kube-hunter：
- en: '[PRE23]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'By default, kube-hunter outputs the logs from all of your scans through an
    entity called **stdout**. Therefore, you can find your logs through the Azure
    Monitor interface:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，kube-hunter通过一个名为**stdout**的实体输出所有扫描日志。因此，你可以通过Azure Monitor界面找到你的日志：
- en: Go back to your Azure account interface at [portal.azure.com](https://portal.azure.com).
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到您的 Azure 账户界面，[portal.azure.com](https://portal.azure.com)。
- en: At the blue menu bar at the top, enter **Monitor** in the search bar.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在顶部的蓝色菜单栏中，在搜索栏中输入 **监控**。
- en: On the left-hand side, there’s a list of sections under **Monitor**, such as
    **Overview** and **Activity log**. Click on **Activity log**.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧，有一个 **监控** 下的部分列表，例如 **概述** 和 **活动日志**。点击 **活动日志**。
- en: 'The following screen will show your logs like this:'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下屏幕将以这种方式显示您的日志：
- en: '![Figure 9.3 – Activity log in Azure](image/B18672_09_016.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.3 – Azure 中的活动日志](image/B18672_09_016.jpg)'
- en: Figure 9.3 – Activity log in Azure
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3 – Azure 中的活动日志
- en: Your actions in kube-hunter will be recorded there. My actions produced a lot
    of entries named **List Storage Account Keys**. That’s the sort of sensitive information
    kube-hunter was looking for!
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 您在 kube-hunter 中的操作将被记录在那里。我的操作产生了很多名为 **列出存储帐户密钥** 的条目。这就是 kube-hunter 要寻找的敏感信息！
- en: Explore the kube-hunter documentation ([https://aquasecurity.github.io/kube-hunter/](https://aquasecurity.github.io/kube-hunter/))
    to find out other things you can do.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 kube-hunter 文档（[https://aquasecurity.github.io/kube-hunter/](https://aquasecurity.github.io/kube-hunter/)）以了解您可以执行的其他操作。
- en: Now, let’s try *kdigger*.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试 *kdigger*。
- en: kdigger
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: kdigger
- en: '**kdigger** is a multipurpose Kubernetes pentesting tool. It’s capable of *digging*
    around in your Kubernetes instance to see which entities it can find. Of course,
    being able to fingerprint and enumerate a containerization deployment is a very
    dangerous ability for a cyber threat actor to have, as they’ll then know how to
    proceed with their attacks.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**kdigger** 是一个多用途的 Kubernetes 渗透测试工具。它能够在您的 Kubernetes 实例中进行*挖掘*，查看它能找到哪些实体。当然，能够指纹识别和列举容器化部署对于网络威胁行为者来说是一项非常危险的能力，因为他们将知道如何继续进行攻击。'
- en: The data you acquire from using kdigger can also be used to conduct better-informed
    pentests in Kubernetes.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 kdigger 获得的数据也可以用于在 Kubernetes 中进行更有根据的渗透测试。
- en: 'kdigger can also be used for fuzzing. That means inputting invalid, unexpected,
    or random data into an application to see whether it’s breakable. If the application
    is designed to validate inputs and handle exceptions in code, it won’t be susceptible
    to fuzzing attacks. To learn how to use kdigger for fuzzing and other possibilities,
    check out their documentation: [https://github.com/quarkslab/kdigger](https://github.com/quarkslab/kdigger).'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: kdigger 还可以用于模糊测试。这意味着将无效、意外或随机的数据输入到应用程序中，以查看它是否会崩溃。如果应用程序设计用于验证输入并处理代码中的异常，它就不会容易受到模糊测试攻击。要了解如何使用
    kdigger 进行模糊测试和其他功能，请查看它们的文档：[https://github.com/quarkslab/kdigger](https://github.com/quarkslab/kdigger)。
- en: Let’s install kdigger and do some digging.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们安装 kdigger 并进行一些挖掘。
- en: 'Depending on your configuration, you may find one of these two installation
    methods works best:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的配置，您可能会发现以下两种安装方法中的一种效果最佳：
- en: 'The first method is the default Git source technique:'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个方法是默认的 Git 源技术：
- en: '[PRE24]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then, you need to move your binary into a working directory in your path:'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，您需要将二进制文件移到您的路径中的工作目录：
- en: '[PRE25]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: That method will require you to remember your **sudo** password.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该方法将要求您记住您的 **sudo** 密码。
- en: 'This simpler installation method uses **go**:'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个更简单的安装方法使用 **go**：
- en: '[PRE26]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now, let’s give kdigger a try!
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们试试 kdigger！
- en: 'Navigate to the directory where your Pods are and where kdigger is installed.
    When I get lost in Bash, I enter this command to list the contents of my current
    directory:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到您的 Pods 所在的目录以及 kdigger 安装的目录。当我在 Bash 中迷失方向时，我输入这个命令来列出当前目录的内容：
- en: '[PRE27]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'And then I enter this command to change to the directory that I’m looking for:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我输入这个命令来切换到我正在寻找的目录：
- en: '[PRE28]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'When you’re in the directory that kdigger is installed in, you can do a general
    scan with a very simple command:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 当您进入 kdigger 安装目录时，您可以通过一个非常简单的命令进行一般扫描：
- en: '[PRE29]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'For me, this is what was outputted at the command line. I have replaced some
    characters in the DNS names and IP addresses with **X** for operational security
    reasons:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，这就是命令行输出的内容。我出于操作安全的原因，将 DNS 名称和 IP 地址中的一些字符替换为 **X**：
- en: '[PRE30]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'If you want to scan all the buckets, try this:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想扫描所有的桶，试试这个：
- en: '[PRE31]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: You can mention any exposed Kubernetes entities that kdigger found in your pentest
    report.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在渗透测试报告中提到 kdigger 找到的任何暴露的 Kubernetes 实体。
- en: Summary
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Organizations often deploy containerization on their cloud platforms because
    it is a very responsive and dynamic way to use virtualization to implement rapidly
    scalable and ever-evolving applications, using DevOps or CI/CD methodologies.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 组织通常在他们的云平台上部署容器化，因为这是一种非常响应迅速且动态的方式，利用虚拟化实施快速可扩展且不断发展的应用程序，使用DevOps或CI/CD方法。
- en: A container contains just the parts of an operating system that are required
    to execute the code it processes. The load balancing and managing of hardware
    resources are done by the parent, grandparent, or great-grandparent of the containers
    within the containerization platform.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 容器只包含执行其处理的代码所需的操作系统部分。负载均衡和硬件资源管理由容器化平台内容器的父容器、祖父容器或曾祖父容器完成。
- en: Now, we know how to deploy Docker and Kubernetes containerization instances
    in Azure and test them for security vulnerabilities. Docker and Kubernetes are
    two of the most used containerization platforms. Kubernetes basically extends
    Docker’s features further and can even work with Docker images and containers.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们知道如何在Azure中部署Docker和Kubernetes容器化实例，并测试其安全漏洞。Docker和Kubernetes是最常用的容器化平台。Kubernetes基本上是对Docker功能的进一步扩展，甚至可以与Docker镜像和容器一起使用。
- en: In the following chapter, I’ll introduce you to Google Cloud Platform and its
    various services.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我将介绍Google Cloud Platform及其各种服务。
- en: Further reading
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 延伸阅读
- en: 'To learn more about the topics covered in this chapter, you can visit the following
    links:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于本章所涉及的主题，您可以访问以下链接：
- en: '*Deploy a container instance in Azure using the Azure* *CLI*: [https://learn.microsoft.com/en-us/azure/container-instances/container-instances-quickstart](https://learn.microsoft.com/en-us/azure/container-instances/container-instances-quickstart'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Azure* *CLI部署容器实例*: [https://learn.microsoft.com/en-us/azure/container-instances/container-instances-quickstart](https://learn.microsoft.com/en-us/azure/container-instances/container-instances-quickstart)'
- en: )
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '*What is Azure Kubernetes* *Service?*: [https://learn.microsoft.com/en-us/azure/aks/intro-kubernetes](https://learn.microsoft.com/en-us/azure/aks/intro-kubernetes'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*什么是Azure Kubernetes* *服务？*: [https://learn.microsoft.com/en-us/azure/aks/intro-kubernetes](https://learn.microsoft.com/en-us/azure/aks/intro-kubernetes)'
- en: )
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '*kube-hunter* *documentation*: [https://aquasecurity.github.io/kube-hunter/](https://aquasecurity.github.io/kube-hunter/'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*kube-hunter* *文档*: [https://aquasecurity.github.io/kube-hunter/](https://aquasecurity.github.io/kube-hunter/)'
- en: )
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '*kdigger* *documentation*: [https://github.com/quarkslab/kdigger](https://github.com/quarkslab/kdigger)'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*kdigger* *文档*: [https://github.com/quarkslab/kdigger](https://github.com/quarkslab/kdigger)'
- en: Part 4:Pentesting GCP
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4部分：渗透测试GCP
- en: '**GCP** is **Google’s Cloud Platform**! However, those in the know use the
    acronym. In this part, we will learn about GCP’s various software-as-a-service,
    platform-as-a-service, and infrastructure-as-a-service applications. We will deploy
    our own GCP instance in which to test our pentesting skills. We will use Security
    Command Center to check the security posture of our GCP deployment. We will also
    try out some pentesting tools in GCP, step by step. Then, we’ll deploy Docker
    and Kubernetes containers and test those as well.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**GCP**是**谷歌的云平台**！不过，业内人士通常使用这个缩写。在这一部分，我们将了解GCP的各种软件即服务、平台即服务和基础设施即服务应用。我们将部署自己的GCP实例，在其中测试我们的渗透测试技能。我们将使用Security
    Command Center检查GCP部署的安全状态。我们还将逐步尝试一些在GCP中的渗透测试工具。然后，我们将部署Docker和Kubernetes容器，并对其进行测试。'
- en: 'This section has the following chapters:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包含以下章节：
- en: '[*Chapter 10*](B18672_10.xhtml#_idTextAnchor172), *Security Features in GCP*'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B18672_10.xhtml#_idTextAnchor172)，*GCP中的安全特性*'
- en: '[*Chapter 11*](B18672_11.xhtml#_idTextAnchor197), *Pentesting GCP Features
    through Serverless Applications and Tools*'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第11章*](B18672_11.xhtml#_idTextAnchor197)，*通过无服务器应用和工具进行GCP特性渗透测试*'
- en: '[*Chapter 12*](B18672_12.xhtml#_idTextAnchor215), *Pentesting Containerized
    Applications in GCP*'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B18672_12.xhtml#_idTextAnchor215)，*在GCP中进行容器化应用的渗透测试*'
