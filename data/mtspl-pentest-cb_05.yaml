- en: Chapter 5. Using Meterpreter to Explore the Compromised Target
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。使用Meterpreter探索受损目标
- en: 'In this chapter, we will cover the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Analyzing meterpreter system commands
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析meterpreter系统命令
- en: Privilege escalation and process migration
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特权升级和进程迁移
- en: Setting up multiple communication channels with the target
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置与目标的多个通信通道
- en: Meterpreter filesystem commands
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Meterpreter文件系统命令
- en: Changing file attributes using timestomp
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用timestomp更改文件属性
- en: Using meterpreter networking commands
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用meterpreter网络命令
- en: The getdesktop and keystroke sniffing
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取桌面和键盘记录
- en: Using a scraper meterpreter script
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用scraper meterpreter脚本
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: So far we have laid more stress on the pre-exploitation phase in which we tried
    out various techniques and exploits to compromise our target. In this chapter,
    we will lay stress on the post-exploitation phase—what we can do after we have
    exploited the target machine. Metasploit provides a very powerful post-exploitation
    tool named meterpreter that provides us with many features that can ease our task
    of exploring the target machine. We have already seen the use of meterpreter and
    post-exploitation in the previous chapter of antivirus bypass. In this chapter,
    we will understand in detail about meterpreter and how to use it as a potential
    tool for the post-exploitation phase.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经更加强调了前利用阶段，在这个阶段中，我们尝试了各种技术和利用来妥协我们的目标。在本章中，我们将更加强调后利用阶段——在我们利用目标机器之后我们可以做什么。Metasploit提供了一个非常强大的后利用工具，名为meterpreter，它为我们提供了许多功能，可以简化我们探索目标机器的任务。在前一章的绕过防病毒中，我们已经看到了meterpreter和后利用的使用。在本章中，我们将详细了解meterpreter以及如何将其用作后利用阶段的潜在工具。
- en: We have been using payloads in order to achieve specific results but they have
    a major disadvantage. Payloads work by creating new processes in the compromised
    system. This can trigger alarms in the antivirus programs and can be caught easily.
    Also, a payload is limited to perform only some specific tasks or execute specific
    commands that the shell can run. To overcome these difficulties meterpreter came
    into light.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在使用有效载荷来实现特定的结果，但它们有一个主要的缺点。有效载荷通过在受损系统中创建新进程来工作。这可能会触发防病毒程序的警报，并且很容易被捕获。此外，有效载荷仅限于执行shell可以运行的特定任务或执行特定命令。为了克服这些困难，meterpreter应运而生。
- en: '**Meterpreter** is a command interpreter for Metasploit that acts as a payload
    and works by using in memory DLL injection and a native shared object format.
    It works in context with the exploited process, hence it does not create any new
    process. This makes it more stealthy and powerful.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**Meterpreter**是Metasploit的命令解释器，充当有效载荷，并通过使用内存DLL注入和本机共享对象格式来工作。它与被利用的进程上下文中工作，因此不会创建任何新进程。这使得它更加隐秘和强大。'
- en: 'Let us give a look at how meterpreter functions. The following diagram shows
    a simple stepwise representation of loading meterpreter:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下meterpreter的功能。以下图表显示了加载meterpreter的简单逐步表示：
- en: '![Introduction](img/7423_05_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/7423_05_01.jpg)'
- en: 'In the first step, the exploit and first stage payload is sent to the target
    machine. After exploitation, the stager binds itself to the target with a specific
    task and tries to connect back to the attacking `msfconsole` and a proper communication
    channel is set up. Now the stager loads the DLL. `msfconsole` and sends the second
    stage DLL injection payload. After successful injection, MSF sends the meterpreter
    DLL to establish a proper communication channel. Lastly, meterpreter loads extensions
    such as `stdapi` and `priv`. All these extensions are loaded over TLS/1.0 using
    a TLV protocol. Meterpreter uses encrypted communication with the target user
    that is another major advantage of using it. Let us quickly summarize the advantages
    of meterpreter over specific payloads:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一步中，利用和第一阶段的有效载荷被发送到目标机器。在利用之后，分段器将自身绑定到具有特定任务的目标，并尝试连接到攻击的`msfconsole`，并建立适当的通信通道。现在，分段器加载DLL。`msfconsole`并发送第二阶段DLL注入有效载荷。成功注入后，MSF发送meterpreter
    DLL以建立适当的通信通道。最后，meterpreter加载扩展，如`stdapi`和`priv`。所有这些扩展都是使用TLS/1.0和TLV协议加载的。Meterpreter使用加密通信与目标用户，这是使用它的另一个主要优势。让我们快速总结meterpreter相对于特定有效载荷的优势：
- en: It works in context with the exploited process, so it doesn't create a new process
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它与被利用的进程上下文中工作，因此不会创建新进程
- en: It can migrate easily among processes
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以在进程之间轻松迁移
- en: It resides completely in the memory, so it writes nothing on disk
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它完全驻留在内存中，因此不会在磁盘上写入任何内容
- en: It uses encrypted communications
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用加密通信
- en: It uses a channelized communication system, so that we can work with several
    channels at a time
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用通道化的通信系统，因此我们可以同时使用多个通道
- en: It provides a platform to write extensions quickly and easily
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了一个快速而轻松地编写扩展的平台
- en: This chapter is dedicated entirely towards exploring the target machine by using
    the various commands and scripts that meterpreter provides us with. We will start
    with analyzing common meterpreter commands. Then, we will move ahead with setting
    up different communication channels, use of networking commands, key sniffing,
    and so on. Finally, we will discuss the scraper meterpreter script which can create
    a single directory containing various pieces of information about the target user.
    In this chapter, we will focus mainly on those commands and scripts which can
    be helpful in exploring the compromised system.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本章完全致力于使用meterpreter提供的各种命令和脚本来探索目标机器。我们将从分析常见的meterpreter命令开始。然后，我们将继续设置不同的通信通道，使用网络命令，键盘记录等。最后，我们将讨论scraper
    meterpreter脚本，它可以创建一个包含有关目标用户的各种信息的单个目录。在本章中，我们将主要关注那些可以帮助探索受损系统的命令和脚本。
- en: So let us move ahead with the recipes to dive deeper into meterpreter.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们继续深入研究meterpreter的方法。
- en: Analyzing meterpreter system commands
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析meterpreter系统命令
- en: Let us start using meterpreter commands to understand their functionality. As
    it is a post exploitation tool, we will require a compromised target to execute
    the commands. We will be using a Windows 7 machine as a target that we have exploited
    using browser vulnerability. You can refer to the *Internet Explorer CSS recursive
    call memory corruption* recipe in [Chapter 4](ch04.html "Chapter 4. Client-side
    Exploitation and Antivirus Bypass"), *Client-side Exploitation and Antivirus Bypass*,
    for further details.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始使用meterpreter命令来了解它们的功能。由于它是一个后期利用工具，我们将需要一个受损的目标来执行命令。我们将使用一个已经利用了浏览器漏洞的Windows
    7机器作为目标。您可以参考[第4章](ch04.html "第4章。客户端利用和防病毒绕过")中的*Internet Explorer CSS递归调用内存损坏*配方，了解更多详情。
- en: Getting ready
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'After compromising the Windows 7 target machine, we will have a meterpreter
    session started as we have used the `windows/meterpreter/bind_tcp` payload. We
    will start off by using a simple `?` command that will list all the available
    meterpreter commands, along with a short description:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在入侵Windows 7目标机器后，我们将启动一个meterpreter会话，因为我们使用了`windows/meterpreter/bind_tcp`有效载荷。我们将首先使用一个简单的`?`命令，它将列出所有可用的meterpreter命令，以及简短的描述：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Take a quick look at the entire list. Many of the commands are self-explanatory.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 快速浏览整个列表。许多命令都是不言自明的。
- en: How to do it...
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Let us start with some useful system commands.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一些有用的系统命令开始。
- en: '`background:` This command is used to set the current session as background,
    so that it can be used again when needed. This command is useful when there are
    multiple active meterpreter sessions.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: background：此命令用于将当前会话设置为后台，以便在需要时再次使用。当有多个活动的meterpreter会话时，此命令很有用。
- en: '`getuid:` This command returns the username that is running, or in which we
    broke in, on the target machine.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: getuid：此命令返回正在运行的用户名，或者我们已经进入的目标机器上的用户名。
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`getpid:` This command returns the process ID in which we are currently running
    the meterpreter.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: getpid：此命令返回我们当前运行meterpreter的进程ID。
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`ps:` This command will list all the running processes on the target machine.
    This command can be helpful in identifying various services and software running
    on the target.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ps：此命令将列出目标机器上所有正在运行的进程。此命令有助于识别目标上运行的各种服务和软件。
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`sysinfo:` This is a handy command to quickly verify the system information,
    such as the operating system and architecture.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: sysinfo：这是一个方便的命令，可以快速验证系统信息，如操作系统和架构。
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`shell:` This command takes us into a shell prompt. We have already seen the
    use of this meterpreter command in some of our previous recipes.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: shell：此命令将我们带入一个shell提示符。我们已经在一些先前的配方中看到了这个meterpreter命令的用法。
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`exit:` This command is used to terminate a meterpreter session. This command
    can also be used to terminate the shell session and return back to meterpreter.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 退出：此命令用于终止meterpreter会话。此命令也可用于终止shell会话并返回到meterpreter。
- en: These were a few useful system commands that can be used to explore the compromised
    target to gain more information about it. There are lots of other commands, which
    I am leaving for you to try and explore. You might have noticed how easy it is
    to use the meterpreter commands and explore the target that, in turn, would have
    been a difficult task without it. In our next recipe, we will focus on some advanced
    meterpreter commands.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是一些有用的系统命令，可用于探索受损目标以获取更多信息。还有许多其他命令，我留给您去尝试和探索。您可能已经注意到，使用meterpreter命令并探索目标是多么容易，而如果没有它，这将是一项困难的任务。在我们的下一个配方中，我们将专注于一些高级的meterpreter命令。
- en: How it works...
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Meterpreter works like any command interpreter. It is designed to understand
    and respond to various parameter calls through commands. It resides in the context
    of an exploited/compromised process and creates a client/server communication
    system with the penetration tester's machine.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Meterpreter的工作方式类似于任何命令解释器。它旨在通过命令理解和响应各种参数调用。它驻留在被利用/受损的进程的上下文中，并与渗透测试人员的机器创建客户端/服务器通信系统。
- en: '![How it works...](img/7423_05_02.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7423_05_02.jpg)'
- en: The preceding diagram demonstrates the functioning of meterpreter in a nutshell.
    Once the communication channel is set up, we can send command calls to the meterpreter
    server to get its response back to our machine. We will understand the communication
    between the pen-testing machine and the compromised target in greater detail as
    we move ahead with this chapter.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图表简要展示了meterpreter的功能。一旦建立通信通道，我们就可以向meterpreter服务器发送命令调用，以便将其响应发送回我们的机器。随着本章的深入，我们将更详细地了解渗透测试机器与受损目标之间的通信。
- en: Privilege escalation and process migration
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特权升级和进程迁移
- en: In this recipe, we will focus on two very useful commands of meterpreter. The
    first one is for **privilege escalation**. This command is used to escalate the
    rights/authority on the target system. We might break in as a user who has less
    privilege to perform tasks on the system. So, we can escalate our privilege to
    the system admin in order to perform our tasks without interruption. The second
    command is for **process migration**. This command is used to migrate from one
    process to another process without writing anything on the disk.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将专注于meterpreter的两个非常有用的命令。第一个是**特权升级**。此命令用于提升目标系统上的权限/权限。我们可能以较低权限的用户身份进入系统。因此，我们可以提升我们的特权以成为系统管理员，以便在执行任务时不受干扰。第二个命令是**进程迁移**。此命令用于在不在磁盘上写入任何内容的情况下从一个进程迁移到另一个进程。
- en: How to do it...
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In order to escalate our privilege, meterpreter provides us with the `getsystem`
    command. This command automatically starts looking out for various possible techniques
    by which the user rights can be escalated to a higher level. Let us analyze different
    techniques used by the `getsystem` command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提升我们的特权，meterpreter为我们提供了`getsystem`命令。此命令会自动开始寻找各种可能的技术，通过这些技术，用户的权限可以提升到更高级别。让我们分析`getsystem`命令使用的不同技术：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: There are three different techniques by which the `getsystem` command tries
    to escalate privilege on the target. The default value `0` tries for all the listed
    techniques unless a successful attempt is made. Let us take a quick look at these
    escalation techniques.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`getsystem`命令尝试在目标上提升特权的三种不同技术。默认值`0`尝试所有列出的技术，除非成功尝试。让我们快速看一下这些提升技术。'
- en: A **named pipe** is a mechanism that enables inter-process communication for
    applications to occur locally or remotely. The application that creates the pipe
    is known as the pipe server, and the application that connects to the pipe is
    known as the pipe client. **Impersonation** is the ability of a thread to execute
    in a security context different from that of the process that owns the thread.
    Impersonation enables the server thread to perform actions on behalf of the client,
    but within the limits of the client's security context. The problem arises when
    the client has more rights than the server. This scenario would create a privilege
    escalation attack called a **Named Pipe Impersonation** escalation attack.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**命名管道**是一种机制，使应用程序能够在本地或远程进行进程间通信。创建管道的应用程序称为管道服务器，连接到管道的应用程序称为管道客户端。**模拟**是线程能够在与拥有该线程的进程不同的安全上下文中执行的能力。模拟使服务器线程能够代表客户端执行操作，但在客户端的安全上下文的限制内。当客户端拥有的权限超过服务器时，就会出现问题。这种情况将创建一个称为**命名管道模拟**提升攻击的特权提升攻击。'
- en: Note
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A detailed article on Named Pipe Impersonation can be found at [http://hackingalert.blogspot.com/2011/12/namedpipe-impersonation-attacks.html](http://hackingalert.blogspot.com/2011/12/namedpipe-impersonation-attacks.html).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 有关命名管道模拟的详细文章可以在[http://hackingalert.blogspot.com/2011/12/namedpipe-impersonation-attacks.html](http://hackingalert.blogspot.com/2011/12/namedpipe-impersonation-attacks.html)找到。
- en: Every user of an operating system is provided with a unique token ID. This ID
    is used to check the permission levels of various users of the system. Token duplication
    works by copying of a token ID of a higher privilege user by a low privilege user.
    The lower privilege user then behaves in a similar manner as the higher privilege
    user and it holds all the rights and authorities as that of the higher privilege
    user.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统的每个用户都有一个唯一的令牌ID。该ID用于检查系统中各个用户的权限级别。令牌复制是通过低特权用户复制高特权用户的令牌ID来实现的。然后，低特权用户会以与高特权用户类似的方式行事，并且具有与高特权用户相同的所有权利和权限。
- en: 'The KiTrapOD exploit was released in early 2010, which affected nearly every
    operating system that Microsoft had made until then. When access to 16-bit applications
    is enabled on a 32-bit x86 platform, it does not properly validate certain BIOS
    calls. This allows local users to gain privileges by crafting a `VDM_TIB` data
    structure in the **Thread Environment Block (TEB)**, to improperly handled exceptions
    involving the #GP trap handler (nt!KiTrap0D), a.k.a. "Windows Kernel Exception
    Handler Vulnerability."'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: KiTrapOD漏洞于2010年初发布，影响了微软此前制作的几乎所有操作系统。在32位x86平台上启用对16位应用程序的访问时，它没有正确验证某些BIOS调用。这允许本地用户通过构造**线程环境块（TEB）**中的`VDM_TIB`数据结构，来利用`#GP`陷阱处理程序（nt!KiTrap0D），也就是“Windows内核异常处理程序漏洞”，来获取特权。
- en: 'Now that we have understood the various escalation techniques used by the `getsystem`
    command, our next step will be to execute the command on our target to see what
    happens. First, we will use the `getuid` command to check our current user ID,
    and then we will try to escalate our privilege by using the `getsystem` command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了`getsystem`命令使用的各种提升技术，我们的下一步将是在目标上执行该命令，看看会发生什么。首先，我们将使用`getuid`命令来检查我们当前的用户ID，然后我们将尝试使用`getsystem`命令来提升我们的特权：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see that previously we were a less privileged user and after using
    the `getsystem` command we escalated our privilege to System user.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，以前我们是一个特权较低的用户，使用`getsystem`命令后，我们将特权提升为系统用户。
- en: 'The next important meterpreter command that we are going to discuss is the
    `migrate` command. This command is used to migrate from one process context to
    another. This command is helpful in situations where the current process, in which
    we have broken, in might crash. For example, if we use a browser exploit to penetrate
    the system, then the browser may hang after exploitation and the user may close
    it. So migrating to a stable system process can help us perform our penetration
    testing smoothly. We can migrate to any other active process by using the process
    ID. The `ps` command can be used to identify the ID of all active processes. For
    example, if the ID of `explorer.exe` is `2084`, then we can migrate to `explorer.exe`
    by executing the following command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论的下一个重要的meterpreter命令是`migrate`命令。该命令用于从一个进程上下文迁移到另一个进程上下文。在当前进程可能崩溃的情况下，该命令非常有用。例如，如果我们使用浏览器漏洞渗透系统，那么在利用后浏览器可能会挂起，用户可能会关闭它。因此，迁移到稳定的系统进程可以帮助我们顺利进行渗透测试。我们可以使用进程ID迁移到任何其他活动进程。`ps`命令可用于标识所有活动进程的ID。例如，如果`explorer.exe`的ID是`2084`，那么我们可以通过执行以下命令迁移到`explorer.exe`：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: These two meterpreter commands are very handy and are used frequently during
    penetration testing. Their simplicity and high productivity makes them optimal
    for usage. In our next recipe we will deal with communication channels and how
    to use them effectively to communicate with the target.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个meterpreter命令非常方便，并且在渗透测试期间经常使用。它们的简单性和高生产力使它们非常适合使用。在我们的下一个示例中，我们将处理通信渠道以及如何有效地使用它们与目标进行通信。
- en: Setting up multiple communication channels with the target
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与目标建立多个通信渠道
- en: In this recipe, we will look at how we can set up multiple channels for communication
    with the target. We have discussed in the chapter's introduction that the communication
    between client and server in meterpreter is in encrypted form and it uses **Type-Length-Value
    (TLV)** protocol for data transfer. The major advantage of using TLV is that it
    allows tagging of data with specific channel numbers, thus allowing multiple programs
    running on the victim to communicate with the meterpreter on the attacking machine.
    This facilitates in setting up several communication channels at a time.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将看看如何为与目标通信建立多个频道。我们在本章的介绍中讨论了meterpreter中客户端和服务器之间的通信是加密的，并且它使用**类型-长度-值（TLV）**协议进行数据传输。使用TLV的主要优势在于它允许将数据与特定的频道号标记，从而允许受害者上运行的多个程序与攻击机上的meterpreter进行通信。这有助于同时建立多个通信频道。
- en: Let us now analyze how to set up multiple communication channels with the target
    machine using meterpreter.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在分析如何使用meterpreter与目标机器建立多个通信频道。
- en: Getting ready
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Meterpreter provides us with a specific command named `execute` which can be
    used to start multiple communication channels. To start with, let us run the `execute
    -h` command to see the available options:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Meterpreter提供了一个名为`execute`的特定命令，可以用于启动多个通信频道。首先，让我们运行`execute -h`命令，查看可用选项：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can see the various parameters available to us with the `execute` command.
    Let us use some of these parameters in setting up multiple channels.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到`execute`命令提供给我们的各种参数。让我们使用其中一些参数来设置多个频道。
- en: How to do it...
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To start with creating channels, we will use the `-f` operator with the `execute`
    command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始创建频道，我们将使用`execute`命令的`-f`运算符：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Notice the use of different parameters. The `-f` parameter is used for setting
    an executable command and the `-c` operator is used to set up a channelized I/O.
    Now we can again run the execute command to start another channel without terminating
    the current channel:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 注意不同参数的使用。`-f`参数用于设置可执行命令，`-c`运算符用于设置通道化I/O。现在我们可以再次运行execute命令，启动另一个频道，而不终止当前频道：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now we have three different channels running simultaneously on the victim machine.
    To list the available channels, we can use the `channel -l` command. If we want
    to send some data or write something on a channel, we can use the `write` command
    followed by the channel ID we want to write in. Let us go ahead and write a message
    in one of our active channels:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在受害者机器上同时运行了三个不同的频道。要列出可用的频道，我们可以使用`channel -l`命令。如果我们想要发送一些数据或在频道上写入一些内容，我们可以使用`write`命令，后面跟着我们想要写入的频道ID。让我们继续在我们的一个活动频道中写入一条消息：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Executing the `write` command along with the channel ID prompted us to enter
    our data followed by a dot. We successfully wrote `Metasploit!!` on the channel.
    In order to read the data of any channel, we can use the `read` command followed
    by the channel ID.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`write`命令以及频道ID，提示我们输入数据，然后输入一个句号。我们成功地在频道上写入了`Metasploit!!`。为了读取任何频道的数据，我们可以使用`read`命令，后面跟着频道ID。
- en: 'Further, if we want to interact with any channel, we can use the `interact`
    command followed by the channel ID:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果我们想要与任何频道交互，我们可以使用`interact`命令，后面跟着频道ID：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see that our channel 2 was a command prompt channel so by using the
    `interact` command, we are directly dropped into the command prompt mode from
    where we can execute system commands. We can easily switch between channels by
    using the `interact` command. In order to end a channel, we can use the `close`
    command followed by the channel ID.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到我们的频道2是一个命令提示符频道，因此通过使用`interact`命令，我们直接进入了命令提示符模式，从那里我们可以执行系统命令。我们可以通过使用`interact`命令轻松地在频道之间切换。为了结束一个频道，我们可以使用`close`命令，后面跟着频道ID。
- en: This recipe demonstrates the power of using multiple channels. It also shows
    how easy it is to manage them simultaneously and switch between different channels.
    The use of channels becomes important when we are running multiple services on
    the target machine.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程演示了使用多个频道的强大功能。它还展示了同时管理它们和在不同频道之间切换有多么容易。当我们在目标机器上运行多个服务时，使用频道变得很重要。
- en: In the next recipe, we will focus on exploring the file system of the target
    machine using meterpreter.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个教程中，我们将专注于使用meterpreter探索目标机器的文件系统。
- en: How it works...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Metasploit tags each message with a separate channel ID which helps it in identifying
    the channel context in which the particular command should be executed. As stated
    earlier, the communication process in meterpreter follows the TLV protocol which
    gives the flexibility of tagging different messages with specific channel IDs
    in order to provide multi-channel communication support.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit使用单独的频道ID为每条消息打上标签，这有助于识别应在其中执行特定命令的频道上下文。正如前面所述，meterpreter中的通信过程遵循TLV协议，这使得可以使用特定的频道ID为不同的消息打上标签，以提供多频道通信支持的灵活性。
- en: Meterpreter filesystem commands
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Meterpreter文件系统命令
- en: In this recipe, we will move ahead with filesystem commands. These commands
    can be helpful in exploring the target system to perform various tasks such as
    searching for files, downloading files, and changing directory. You will notice
    how easy it is to control the target machine using meterpreter. So let us start
    working with some of the useful filesystem commands.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将继续使用文件系统命令。这些命令可以帮助我们探索目标系统，执行各种任务，比如搜索文件、下载文件和更改目录。您会注意到使用meterpreter轻松控制目标机器有多么容易。让我们开始使用一些有用的文件系统命令。
- en: How to do it...
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We will start with the simple `pwd` command which lists our present working
    directory on the target machine. Similarly, we can use the `cd` command to change
    our working directory to our preferred location:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从简单的`pwd`命令开始，该命令列出了我们在目标机器上的当前工作目录。同样，我们可以使用`cd`命令将我们的工作目录更改为我们喜欢的位置：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As you can see, we first listed our working directory using the `pwd` command
    and then changed our working directory to `c:` by using the `cd` command. We can
    also use the `ls` command to list the available files in the current directory.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们首先使用“pwd”命令列出了我们的工作目录，然后使用“cd”命令将我们的工作目录更改为“c：”。我们还可以使用“ls”命令列出当前目录中可用的文件。
- en: 'Now that we can work with directories, our next task will be to search for
    files on the drive. It will be very tedious to browse every directory and sub-directory
    to look for files. We can use the `search` command to quickly search for specific
    file types. Consider the following example:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们可以使用目录，我们的下一个任务将是在驱动器上搜索文件。浏览每个目录和子目录以寻找文件将非常乏味。我们可以使用“search”命令快速搜索特定文件类型。考虑以下示例：
- en: '[PRE15]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This command will search for all files in the `C` drive having `.doc` as the
    file extension. The `f` parameter is used to specify the file pattern to search
    for and the `d` parameter tells the directory which file is to be searched.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将搜索`C`驱动器中具有`.doc`作为文件扩展名的所有文件。使用“f”参数指定要搜索的文件模式，“d”参数告诉要搜索哪个文件的目录。
- en: 'So once we have searched for our specific file, the next thing we can do is
    download the file locally on the target machine. Let us first try to download
    the file to our attacking system:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 所以一旦我们搜索到我们特定的文件，我们可以做的下一件事是将文件下载到目标机器上。让我们首先尝试将文件下载到我们的攻击系统：
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: By using the `download` command, we can successfully download any file from
    the target machine to our machine. The `d:\secret.doc` file gets downloaded in
    the `root` folder of our attacking machine.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用“download”命令，我们可以成功地从目标机器下载任何文件到我们的机器。 “d：\secret.doc”文件在我们的攻击机器的“root”文件夹中下载。
- en: 'Similarly, we can use the `upload` command to send any file to the target machine:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以使用“upload”命令将任何文件发送到目标机器：
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Finally, we can use the `del` command to delete a file or a directory from the
    target machine.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以使用“del”命令从目标机器中删除文件或目录。
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Meterpreter gives us complete access to the target machine by setting up an
    interactive command prompt. We can also drop a shell session to work in the default
    windows DOS mode but it will not have as many functionalities. This was a quick
    reference to some of the important filesystem commands of meterpreter, which can
    help us in exploring the files present on the target machine. There are more commands
    as well; it is recommended that you should try them out and find the various possibilities
    that can exist.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Meterpreter通过设置交互式命令提示符为我们提供对目标机器的完全访问。我们还可以放置一个shell会话以在默认的Windows DOS模式下工作，但它不会有太多功能。这是对meterpreter的一些重要文件系统命令的快速参考，可以帮助我们探索目标机器上的文件。还有更多的命令；建议您应该尝试它们，并找出可能存在的各种可能性。
- en: In the next recipe, we will look at a very interesting meterpreter command called
    `timestomp` that can be used to modify the file attributes on the target machine.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个步骤中，我们将看到一个非常有趣的meterpreter命令，称为“timestomp”，它可以用于修改目标机器上的文件属性。
- en: Changing file attributes using timestomp
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用timestomp更改文件属性
- en: In the previous recipe, we read about some of the important and useful meterpreter
    file system commands that can be used to perform various tasks on the target machine.
    Meterpreter contains another interesting command called `timestomp`. This command
    is used to change the **Modified-Accessed-Created-Entry (MACE)** attributes of
    a file. The attribute value is the date and time when any of the MACE activities
    occurred with the file. Using the `timestomp` command, we can change these values.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个步骤中，我们了解了一些重要且有用的meterpreter文件系统命令，可用于在目标机器上执行各种任务。 Meterpreter还包含另一个有趣的命令，称为“timestomp”。此命令用于更改文件的**修改-访问-创建-输入（MACE）**属性。属性值是文件发生任何MACE活动的日期和时间。使用“timestomp”命令，我们可以更改这些值。
- en: Getting ready
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Before starting with the recipe, there is a question that may strike in your
    mind. Why change the MACE values? Hackers generally use the technique of changing
    the MACE values so as to make the target user feel that the file has been present
    on the system for long and that it has not been touched or modified. In case of
    suspicious activity, the administrators may check for recently modified files
    to find out if any of the files have been modified or accessed. So, using this
    technique, the file will not appear in the list of recently accessed or modified
    items. Even though there are other techniques as well, to find out if the file
    attributes have been modified, this technique can still be handy.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始配方之前，可能会有一个问题在你的脑海中出现。为什么要更改MACE值？黑客通常使用更改MACE值的技术，以使目标用户感到文件已经存在系统很长时间，并且没有被触摸或修改。在可疑活动的情况下，管理员可能会检查最近修改的文件，以查找是否已修改或访问任何文件。因此，使用此技术，文件将不会出现在最近访问或修改项目的列表中。即使还有其他技术可以找出文件属性是否已被修改，这种技术仍然很有用。
- en: Let's pick up a file from the target machine and change its MACE attributes.
    The following screenshot shows the various MACE values of a file before using
    `timestomp:`
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从目标机器中挑选一个文件并更改其MACE属性。以下屏幕截图显示了在使用“timestomp”之前文件的各种MACE值：
- en: '![Getting ready](img/7423_05_03.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/7423_05_03.jpg)'
- en: 'Now we will move ahead to change the various MACE values. Let us start with
    the common `timestomp -h` command that is used to list the various available options.
    We can use the `-v` operator to list the values of MACE attributes:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将继续前进，更改各种MACE值。让我们从常见的“timestomp -h”命令开始，该命令用于列出各种可用选项。我们可以使用“-v”运算符列出MACE属性的值：
- en: '[PRE19]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How to do it...
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We will start with changing the creation time of the file. Notice the various
    parameters passed with the `timestomp` command:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从更改文件的创建时间开始。注意使用“timestomp”命令传递的各种参数：
- en: '[PRE20]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works...
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `-c` operator is used to change the creation time of the file. Similarly,
    we can use the `-m` and `-a` operators to change the modified and last accessed
    attributes of the file:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`-c`运算符用于更改文件的创建时间。同样，我们可以使用`-m`和`-a`运算符来更改文件的修改和最后访问属性：'
- en: '[PRE21]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Once the attributes have been changed, we can again use the `-v` operator to
    check and verify whether we have successfully executed the commands or not. Let
    us move ahead and check the file attributes again:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 属性更改后，我们可以再次使用`-v`运算符来检查和验证我们是否成功执行了命令。让我们继续检查文件属性：
- en: '[PRE22]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Bingo! We have successfully modified the MACE attributes of the file. Now this
    file can be easily hidden from the list of recently modified or recently accessed
    files.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们已成功修改了文件的MACE属性。现在这个文件可以很容易地从最近修改或最近访问文件的列表中隐藏起来。
- en: Alternatively, we can also use the `-z` operator to change all four MACE values
    in a go. We will not have to pass the commands separately for each of them. But
    the `-z` operator will assign the same values to all four MACE attributes that
    is practically not possible. There has to be some time difference between creation
    and accessed time. So, the use of the `-z` operator should be avoided.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们也可以使用`-z`运算符一次性更改所有四个MACE值。我们不必为每个值单独传递命令。但是`-z`运算符会将相同的值分配给所有四个MACE属性，这在实际上是不可能的。创建和访问时间之间必须有一些时间差。因此，应避免使用`-z`运算符。
- en: This was a small recipe dealing with the `timestomp` utility. In the next recipe,
    we will look at some of the useful meterpreter networking commands that will be
    of great use to us when we will understand pivoting.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个处理`timestomp`实用程序的小技巧。在下一个技巧中，我们将看一些有用的Meterpreter网络命令，当我们了解枢纽转移时，这些命令将对我们非常有用。
- en: Using meterpreter networking commands
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用meterpreter网络命令
- en: Meterpreter provides us some useful networking commands as well. These commands
    can be useful in understanding the network structure of the target user. We can
    analyze whether the system belongs to a LAN or it is a standalone system. We can
    also know the IP range, DNS, and other information as well. Such network information
    can be useful when we have to perform pivoting. Pivoting is a concept by which
    we can compromise other machines on the same network in which our target is present.
    We will understand pivoting in our next chapter where we will focus on the advanced
    use of meterpreter.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Meterpreter还为我们提供了一些有用的网络命令。这些命令对于了解目标用户的网络结构很有用。我们可以分析系统是属于局域网还是独立系统。我们还可以了解IP范围、DNS和其他信息。在进行枢纽转移时，这些网络信息可能很有用。枢纽转移是一个概念，通过它我们可以攻击与我们的目标位于同一网络中的其他计算机。我们将在下一章中了解枢纽转移，重点是Meterpreter的高级用法。
- en: Getting ready
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做好准备
- en: 'Before we get into the recipe, there are three networking terms which we will
    encounter here. So let us give a quick brush to our memory by looking at the following
    terms:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入这个技巧之前，有三个网络术语我们将在这里遇到。因此，让我们通过查看以下术语来快速回顾一下我们的记忆：
- en: '**Subnetwork** or **subnet** is the concept of dividing a large network into
    smaller identifiable parts. Subnetting is done to increase the address utility
    and security.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**子网**是将一个大网络划分为更小可识别部分的概念。子网划分是为了增加地址的实用性和安全性。'
- en: A **netmask** is a 32-bit mask that is used to divide an IP address into subnets
    and specify the network's available hosts.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**子网掩码**是一个32位的掩码，用于将IP地址划分为子网并指定网络的可用主机。'
- en: '**Gateway** specifies the forwarding or the next hop IP address over which
    the set of addresses defined by the network destination and subnet mask are reachable.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网关**指定了转发或下一跳IP地址，通过它可以到达由网络目的地和子网掩码定义的地址集。'
- en: We will be using these three terms when we will deal with the `route` command.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们处理`route`命令时，我们将使用这三个术语。
- en: How to do it...
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: There are three networking commands provided by meterpreter. These are `ipconfig,
    route`, and `portfwd`. Let us give a quick look at each of them.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Meterpreter提供了三个网络命令。它们是`ipconfig`、`route`和`portfwd`。让我们快速看一下它们各自的功能。
- en: 'The `Ipconfig` command is used to display all the TCP/IP network configurations
    of the target machine. It lists information such as the target IP address, hardware
    MAC, and netmask:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`Ipconfig`命令用于显示目标机器的所有TCP/IP网络配置。它列出了目标IP地址、硬件MAC和子网掩码等信息：'
- en: '[PRE23]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As you can see, the output of `ipconfig` lists the various active TCP/IP configurations.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，`ipconfig`的输出列出了各种活动的TCP/IP配置。
- en: 'The next networking command is the `route` command. It is similar to the `route`
    command of MS DOS. This command is used to display or modify the local IP routing
    table on the target machine. Executing the `route` command lists the current table:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个网络命令是`route`命令。它类似于MS DOS的`route`命令。该命令用于显示或修改目标机器上的本地IP路由表。执行`route`命令会列出当前的表格：
- en: '[PRE24]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Let us execute the `route -h` command to figure out how we can modify the table.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行`route -h`命令，看看我们如何修改表格。
- en: '[PRE25]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If you take a look at the output of the `ipconfig` command, you can figure
    out that the IP address `115.242.228.85` is used by the target to connect to the
    Internet. So we can add a route value to pass the connection through `115.242.228.85`
    as the gateway. This can provide us a firewall bypass on the target machine:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看一下`ipconfig`命令的输出，你会发现IP地址`115.242.228.85`是目标用来连接互联网的。因此，我们可以添加一个路由值，通过`115.242.228.85`作为网关传递连接。这可以为我们提供目标机器上的防火墙绕过：
- en: '[PRE26]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Similarly, we can use the `delete` command to remove a route from the table.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以使用`delete`命令从表中删除路由。
- en: Let's move to the last networking command—`portfwd`. This command is used to
    forward incoming TCP and/or UDP connections to remote hosts. Consider the following
    example to understand port forwarding.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们转到最后一个网络命令——`portfwd`。这个命令用于将传入的TCP和/或UDP连接转发到远程主机。考虑以下示例以了解端口转发。
- en: Consider host "A", host "B" (in the middle), and host "C". Host A should connect
    to host C in order to do something, but if for any reason it's not possible, host
    B can directly connect to C. If we use host B in the middle, to get the connection
    stream from A and pass it to B while taking care of the connection, we say host
    B is doing **port forwarding**.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑主机“A”、主机“B”（中间）和主机“C”。主机A应该连接到主机C以执行某些操作，但如果由于任何原因不可能，主机B可以直接连接到C。如果我们在中间使用主机B，从A获取连接流并将其传递到B，同时处理连接，我们称主机B正在进行**端口转发**。
- en: 'This is how things will appear on the wire: host B is running a software that
    opens a TCP listener on one of its ports, say port 20\. Host C is also running
    a listener that is used to connect to host B when a packet arrives from port 20\.
    So, if A sends any packet on port 20 of B, it will automatically be forwarded
    to host C. Hence, host B is port forwarding its packets to host C.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是数据包在传输中的样子：主机B正在运行一个软件，该软件在其端口之一上打开TCP监听器，比如端口20。主机C也在运行一个监听器，用于在从端口20到达时连接到主机B。因此，如果A在B的20号端口上发送任何数据包，它将自动转发到主机C。因此，主机B正在将其数据包端口转发到主机C。
- en: How it works...
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'To start port forwarding with a remote host we can add a forwarding rule first.
    Consider the following command line:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要与远程主机开始端口转发，我们可以首先添加一个转发规则。考虑以下命令行：
- en: '[PRE27]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Notice the different command parameters. With the `-a` parameter we can add
    a new port forwarding rule. The `-L` parameter defines the IP address to bind
    a forwarded socket to. As we're running these all on host A, and want to continue
    our work from the same host, we set the IP address to `127.0.0.1`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 注意不同的命令参数。使用`-a`参数，我们可以添加一个新的端口转发规则。`-L`参数定义要将转发套接字绑定到的IP地址。由于我们都在主机A上运行这些命令，并且希望从同一主机继续工作，我们将IP地址设置为`127.0.0.1`。
- en: '`-l` is the port number which will be opened on host A, for accepting incoming
    connections. `-h` defines the IP address of host C, or any other host within the
    internal network. `-p` is the port you want to connect to, on host C.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`-l`是主机A上将打开的端口号，用于接受传入连接。`-h`定义了主机C的IP地址，或者内部网络中的任何其他主机。`-p`是您要连接到的主机C上的端口。'
- en: This was a simple demonstration of using port forwarding. This technique is
    actively used to bypass firewalls and intrusion detection systems.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用端口转发的简单演示。这种技术被积极用于绕过防火墙和入侵检测系统。
- en: The getdesktop and keystroke sniffing
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取桌面和按键嗅探
- en: In this recipe, we will deal with some of the `stdapi` user interface commands
    associated with desktops and keystroke sniffing. Capturing the keystrokes depends
    on the current active desktop, so it is essential to understand how we can sniff
    different keystrokes by switching between processes running in different desktop
    active sessions. Let us move ahead with the recipe to understand this deeply.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将处理与桌面和按键嗅探相关的一些`stdapi`用户界面命令。捕获按键取决于当前活动的桌面，因此了解我们如何通过切换到不同桌面活动会话中运行的进程来嗅探不同的按键是至关重要的。让我们继续深入了解这个示例。
- en: How to do it...
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let us start with executing some of the user interface commands which we will
    primarily deal with in this recipe. They are as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始执行一些用户界面命令，这些命令是我们在这个示例中将主要处理的。它们如下：
- en: '`enumdesktops:` This command will list all the accessible desktops and window
    stations.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enumdesktops:`此命令将列出所有可访问的桌面和窗口站点。'
- en: '[PRE28]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Here you can see that all the available desktop stations are associated with
    session 0\. We will see in a while what exactly we mean by session 0.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以看到所有可用的桌面站点都与会话0相关联。我们将很快看到我们所说的会话0的确切含义。
- en: '`getdesktop:` This command returns the current desktop in which our meterpreter
    session is working.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getdesktop:`此命令返回我们的meterpreter会话正在工作的当前桌面。'
- en: '[PRE29]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: You can relate the output of the `getdesktop` command with `enumdesktops` to
    understand about the current desktop station in which we are working.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将`getdesktop`命令的输出与`enumdesktops`相关联，以了解我们正在工作的当前桌面站点的情况。
- en: '`setdesktop:` This command is used to change the current meterpreter desktop
    to another available desktop station.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setdesktop:`此命令用于将当前的meterpreter桌面更改为另一个可用的桌面站点。'
- en: '`keyscan_start:` This command is used to start the keystroke sniffer in the
    current active desktop station.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keyscan_start:`此命令用于在当前活动的桌面站点中启动按键嗅探器。'
- en: '`keyscan_dump:` This command dumps the recorded keystrokes of the active meterpreter
    desktop session.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keyscan_dump:`此命令会转储活动meterpreter桌面会话的记录按键。'
- en: Let us now analyze how these commands work in a real-time scenario and how we
    can sniff keystrokes through different desktop stations.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们分析这些命令在实时场景中的工作方式，以及我们如何通过不同的桌面站点嗅探按键。
- en: How it works...
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Before we proceed further with the recipe, there is an important concept about
    Windows desktop that we will look at.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续进行示例之前，有一个关于Windows桌面的重要概念需要我们了解。
- en: Windows desktop is divided into different **sessions** in order to define the
    ways we can interact with the Windows machine. Session 0 represents the console.
    The other sessions —Session 1, Session 2, and so on represent remote desktop sessions.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Windows桌面被划分为不同的**会话**，以定义我们与Windows机器交互的方式。会话0代表控制台。其他会话——会话1、会话2等代表远程桌面会话。
- en: 'So, in order to capture the keystrokes of the system we broke in to, we must
    work in desktop Session 0:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了捕获我们侵入的系统的按键，我们必须在桌面会话0中工作：
- en: '![How it works...](img/7423_05_04.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7423_05_04.jpg)'
- en: Every Windows desktop session comprises of different stations. In the preceding
    diagram, you can see different stations associated with Session 0\. Out of these
    stations, WinSta0 is the only interactive station. This means that the user can
    interact with only the WinSta0 station. All the other stations are non-interactive.
    Now WinSta0 consists of three different desktops namely Default, Disconnect, and
    Winlogon. The Default desktop is associated with all the applications and tasks
    that we perform on our desktop. The `Disconnect` desktop is concerned with the
    screensaver lock desktop. The Winlogon desktop is concerned with the Windows login
    screen.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Windows桌面会话包括不同的站。在前面的图中，您可以看到与Session 0相关的不同站。在这些站中，WinSta0是唯一的交互式站。这意味着用户只能与WinSta0站互动。所有其他站都是非交互式的。现在WinSta0包括三个不同的桌面，即Default、Disconnect和Winlogon。默认桌面与我们在桌面上执行的所有应用程序和任务相关联。`Disconnect`桌面与屏幕保护程序锁定桌面有关。Winlogon桌面与Windows登录屏幕有关。
- en: The point to note here is that each desktop has its own keyboard buffer. So,
    if you have to sniff the keystrokes from the `Default` desktop, you will have
    to make sure that your current meterpreter active browser is set to `Session 0/WinSta0/Default`.
    If you have to sniff the logon password then you will have to change the active
    desktop `to Session 0/WinSta0/Winlogon`. Let us take an example to make it clearer.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的一点是每个桌面都有自己的键盘缓冲区。因此，如果您必须从`Default`桌面中嗅探按键记录，您必须确保您当前的meterpreter活动浏览器设置为`Session
    0/WinSta0/Default`。如果您必须嗅探登录密码，那么您将不得不将活动桌面更改为`Session 0/WinSta0/Winlogon`。让我们举个例子来让它更清楚。
- en: 'Let''s check our current desktop using the `getdesktop` command:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`getdesktop`命令检查我们当前的桌面：
- en: '[PRE30]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: As you can see, we are not in the `WinSta0` station which is the only interactive
    desktop station. So if we run a keystroke capturing here then it won't return
    any result. Let's change our desktop to `WinSta0\Default:`
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们不在`WinSta0`站，这是唯一的交互式桌面站。因此，如果我们在这里运行按键捕获，它不会返回任何结果。让我们将我们的桌面更改为`WinSta0\Default`：
- en: '[PRE31]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The preceding command line shows that we moved to the interactive Windows desktop
    station by using the `setdesktop` command. So, now we are ready to run a keystroke
    sniffer to capture the keys pressed by the user on the target machine:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令行显示我们使用`setdesktop`命令切换到了交互式Windows桌面站。因此，现在我们已经准备好运行按键记录嗅探器来捕获用户在目标机器上按下的按键：
- en: '[PRE32]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Looking at the dumped keystrokes, you can clearly identify that the target user
    went to [gmail.com](http://gmail.com) and entered his credentials to login.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 查看转储的按键记录，您可以清楚地识别出目标用户访问了[gmail.com](http://gmail.com)并输入了他的凭据进行登录。
- en: What if you want to sniff the windows login password? Obviously, you can switch
    your active desktop to `WinSta0\Winlogon` using the `setdesktop` command but here
    we will discuss an alternate approach as well. We can migrate to a process which
    runs during Windows logon. Let us execute the `ps` command to check the running
    processes.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想嗅探Windows登录密码怎么办？显然，您可以使用`setdesktop`命令将您的活动桌面切换到`WinSta0\Winlogon`，但在这里我们也将讨论另一种方法。我们可以迁移到在Windows登录期间运行的进程。让我们执行`ps`命令来检查正在运行的进程。
- en: 'You will find `winlogon.exe` running as a process with a process id. Let us
    assume that the **process ID (PID)** of `winlogon.exe` is `1180`. Now let''s migrate
    to this PID and check our active desktop again:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 您会发现`winlogon.exe`作为一个带有进程ID的进程在运行。让我们假设`winlogon.exe`的**进程ID（PID）**为`1180`。现在让我们迁移到这个PID并再次检查我们的活动桌面：
- en: '[PRE33]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: You can see that our active desktop has changed to `WinSta0\Winlogon`. Now we
    can run the `keyscan_start` command to start sniffing the keystrokes on the Windows
    logon screen.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到我们的活动桌面已更改为`WinSta0\Winlogon`。现在我们可以运行`keyscan_start`命令来开始嗅探Windows登录屏幕上的按键记录。
- en: Similarly, we can get back to the Default desktop by migrating to any process
    that is running on the default desktop. Consider `explorer.exe` with PID `884:`
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以通过迁移到运行在默认桌面上的任何进程来返回到默认桌面。考虑使用PID `884`的`explorer.exe`：
- en: '[PRE34]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: You might have noticed the importance of migrating to different processes and
    desktop environments for sniffing keystrokes. Generally, people get no results
    when they directly run `keyscan` without giving a look at the current active desktop.
    This is because the process in which they have penetrated might belong to a different
    session or station. So keep this concept of desktop in mind while working with
    keystroke sniffing.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到了迁移到不同进程和桌面环境以嗅探按键记录的重要性。通常，人们在直接运行`keyscan`而不查看当前活动桌面时得不到任何结果。这是因为他们渗透的进程可能属于不同的会话或站。因此，在使用按键记录嗅探时，请牢记桌面的概念。
- en: Using a scraper meterpreter script
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用刮削器meterpreter脚本
- en: So far, we learned about several meterpreter commands. Here, we will take a
    look at an important meterpreter script which can help us in exploring our target
    deeper. The next chapter extensively covers meterpreter scripts so here we will
    just focus on using the script. During penetration testing, you might require
    lot of time to dig out information on the target. So having a local backup of
    useful information can be really handy for penetration testers so that even if
    the target is down, they still have information to work on. It also makes sharing
    of information with other testers easy. Scraper accomplishes this task for us.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了几个meterpreter命令。在这里，我们将看一下一个重要的meterpreter脚本，它可以帮助我们更深入地探索目标。下一章将广泛涵盖meterpreter脚本，因此在这里我们将专注于使用脚本。在渗透测试期间，您可能需要大量时间来挖掘目标的信息。因此，对于渗透测试人员来说，拥有有用信息的本地备份可以真正方便，即使目标已经关闭，他们仍然有信息可以使用。它还使与其他测试人员共享信息变得容易。刮削器为我们完成了这项任务。
- en: Getting ready
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The scraper meterpreter script can dig out lots of information about the compromised
    target such as registry information, password hashes, and network information,
    and store it locally on the tester's machine.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 使用刮削器meterpreter脚本可以挖掘有关受损目标的大量信息，例如注册表信息、密码哈希和网络信息，并将其存储在测试人员的本地机器上。
- en: In order to execute a Ruby script on the target using meterpreter, we can use
    the `run` command. Executing the `run scraper -h` command will list the various
    available parameters we can pass with the script. Let's move ahead and analyze
    how we can download the information locally.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在目标上使用meterpreter执行Ruby脚本，我们可以使用`run`命令。执行`run scraper -h`命令将列出我们可以与脚本一起传递的各种可用参数。让我们继续分析如何可以在本地下载信息。
- en: How to do it...
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'The script does everything automatically after it is executed. It creates a
    directory under `/root/.msf4/logs/scripts/scraper` where all the files are saved.
    You might notice an error during the script execution which can be because a command
    may fail to execute on the target (the command line output has been shortened
    to fit):'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本在执行后会自动完成所有操作。它在`/root/.msf4/logs/scripts/scraper`下创建一个目录，其中保存了所有文件。您可能会在脚本执行过程中注意到错误，这可能是因为某个命令在目标上执行失败（命令行输出已经被缩短以适应）：
- en: '[PRE35]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The script automatically downloads and saves the information in the destination
    folder. Let us take a look at the source code to analyze if we can make some changes
    according to our needs.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本会自动下载并保存信息到目标文件夹。让我们看一下源代码，分析是否可以根据我们的需求进行一些更改。
- en: How it works...
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The source code for `scraper.rb` is present under `/pentest/exploits/framework3/scripts/meterpreter`.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`scraper.rb`的源代码位于`/pentest/exploits/framework3/scripts/meterpreter`下。'
- en: 'Ruby coding experience can help you in editing the scripts to add your own
    features. We can change the download location by editing the following line:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: Ruby编程经验可以帮助您编辑脚本以添加您自己的功能。我们可以通过编辑以下行来更改下载位置：
- en: '[PRE36]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Suppose you want to obtain the result of a list of available processes as well,
    then you can simply add the following line of code in the main body of the program:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您还想获取可用进程列表的结果，那么您可以简单地在程序的主体中添加以下代码行：
- en: '[PRE37]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: By using a little bit of Ruby language and code reuse, you can easily modify
    the code to fit according to your needs.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用一点点Ruby语言和代码重用，您可以轻松修改代码以适应您的需求。
- en: There's more...
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Let us learn about another meterpreter script that can be used for collecting
    information from the target machine.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解另一个可以用于从目标机器收集信息的meterpreter脚本。
- en: Using winenum.rb
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用winenum.rb
- en: '`winenum.rb` is another meterpreter script that can help you collect information
    about the target and download it locally. It works similar to `scraper.rb`. You
    can try out this script as well to see what extra information it can provide.
    The script can be found at the following location:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`winenum.rb`是另一个meterpreter脚本，可以帮助您收集有关目标的信息并在本地下载。它的工作方式类似于`scraper.rb`。您也可以尝试使用这个脚本，看看它可以提供什么额外的信息。该脚本可以在以下位置找到：'
- en: '`/pentest/exploits/framework3/scripts/meterpreter/winenum.rb`'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`/pentest/exploits/framework3/scripts/meterpreter/winenum.rb`'
