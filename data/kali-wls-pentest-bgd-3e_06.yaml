- en: Chapter 6. Attacking the Client
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章：攻击客户端
- en: '|   | *"Security is just as strong as the weakest link."* |   |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|   | *“安全就像是最弱的一环。”* |   |'
- en: '|   | --*Famous Quote in Information Security Domain* |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|   | --*信息安全领域的名言* |'
- en: '*Most penetration testers seem to give all their attention to the WLAN infrastructure
    and don''t give the wireless client even a fraction of that. However, it is interesting
    to note that a hacker can gain access to the authorized network by compromising
    a wireless client as well.*'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*大多数渗透测试人员似乎把所有注意力都集中在 WLAN 基础设施上，却没有给予无线客户端同等的关注。然而，有趣的是，黑客也可以通过攻破无线客户端来访问授权的网络。*'
- en: '*In this chapter, we will shift our focus from the WLAN infrastructure to the
    wireless client. The client can be either a connected or isolated unassociated
    client. We will take a look at the various attacks that can be used to target
    the client.*'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*在本章中，我们将把注意力从 WLAN 基础设施转移到无线客户端。客户端可以是已连接的，也可以是孤立的未关联客户端。我们将探讨可以用来针对客户端的各种攻击。*'
- en: 'We will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将覆盖以下主题：
- en: Honeypot and Misassociation attacks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蜜罐和错误关联攻击
- en: The Caffe Latte attack
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Caffe Latte 攻击
- en: Deauthentication and disassociation attacks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 去认证和断开关联攻击
- en: The Hirte attack
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hirte 攻击
- en: AP-less WPA-Personal cracking
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无 AP 的 WPA-Personal 破解
- en: Honeypot and Misassociation attacks
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 蜜罐和错误关联攻击
- en: Normally, when a wireless client such as a laptop is turned on, it will probe
    for networks it has previously connected to. These networks are stored in a list
    called the **Preferred Network List** (**PNL**) on Windows-based systems. Also,
    along with this list, the wireless client will display any networks available
    in its range.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当一个无线客户端（如笔记本电脑）开启时，它会探测之前连接过的网络。这些网络会存储在 Windows 系统中的 **首选网络列表** (**PNL**)
    中。同时，客户端会显示其范围内的任何可用网络。
- en: 'A hacker may do one or more of the following things:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客可能会做以下一项或多项事情：
- en: Silently monitor the probes and bring up a fake access point with the same ESSID
    the client is searching for. This will cause the client to connect to the hacker
    machine, thinking it is the legitimate network.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静默监控探测并启动一个虚假接入点，使用客户端正在搜索的相同 ESSID。这将导致客户端连接到黑客机器，认为它是合法的网络。
- en: Create fake access points with the same ESSID as neighboring ones to persuade
    the user to connect to him. Such attacks are very easy to conduct in coffee shops
    and airports where a user might be looking to connect to a Wi-Fi connection.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建具有相同 ESSID 的虚假接入点，以劝说用户连接到黑客的设备。这类攻击在咖啡馆和机场等场所非常容易进行，因为用户可能正在寻找 Wi-Fi 连接。
- en: Use recorded information to learn about the victim's movements and habits, as
    we show in detail in a later chapter.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用记录的信息来了解受害者的活动和习惯，我们将在后续章节中详细介绍。
- en: These attacks are called **Honeypot attacks**, because the hacker's access point
    is misassociated with the legitimate one.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些攻击被称为**蜜罐攻击**，因为黑客的接入点与合法的接入点发生了错误关联。
- en: In the next exercise, we will carry out both these attacks in our lab.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的练习中，我们将在实验室中进行这两种攻击。
- en: Time for action – orchestrating a Misassociation attack
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 策划一个错误关联攻击
- en: 'Follow these instructions to get started:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明开始操作：
- en: In the previous labs, we used a client that had connected to the `Wireless Lab`
    access point. Let's switch on the client but not the actual `Wireless Lab` access
    point. Let's now run `airodump-ng wlan0mon` and check the output. You will very
    soon find the client to be in the `not associated` mode and probing for `Wireless
    Lab` and other SSIDs in its stored profile:![Time for action – orchestrating a
    Misassociation attack](graphics/B09903_06_01.jpg)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的实验中，我们使用了一个已连接到 `Wireless Lab` 接入点的客户端。现在让我们打开客户端，但不启动实际的 `Wireless Lab`
    接入点。接下来运行 `airodump-ng wlan0mon` 并查看输出。你很快就会发现客户端处于 `未关联` 模式，并在其存储的配置文件中查找 `Wireless
    Lab` 和其他 SSID：![行动时间 – 策划一个错误关联攻击](graphics/B09903_06_01.jpg)
- en: To understand what is happening, let's run Wireshark and start sniffing on the
    `wlan0mon` interface. As expected, you might see a lot of packets that are not
    relevant to our analysis. Apply a Wireshark filter to only display Probe Request
    packets from the client MAC you are using. The filter should be `wlan.addr==<your
    mac> && wlan.fc.subtype==0x04)`:![Time for action – orchestrating a Misassociation
    attack](graphics/B09903_06_02.jpg)
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了了解发生了什么，让我们运行Wireshark并开始在`wlan0mon`接口上嗅探。正如预期的那样，你可能会看到很多与我们分析无关的数据包。应用Wireshark过滤器，只显示来自你使用的客户端MAC的探测请求数据包。过滤器应为`wlan.addr==<你的mac>
    && wlan.fc.subtype==0x04)`：![行动时刻 – 编排一个误关联攻击](graphics/B09903_06_02.jpg)
- en: You should now see Probe Request packets only from the client for the previously
    identified SSIDs.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你应该只看到来自客户端的探测请求数据包，且这些数据包是针对先前识别的SSID的。
- en: 'Let''s now start a fake access point for the network `Wireless Lab` on the
    hacker machine using the following command:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们在黑客机器上使用以下命令启动一个名为`Wireless Lab`的伪接入点：
- en: '[PRE0]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Time for action – orchestrating a Misassociation attack](graphics/B09903_06_03.jpg)'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时刻 – 编排一个误关联攻击](graphics/B09903_06_03.jpg)'
- en: Within a minute or so, the client should connect to us automatically. This shows
    how easy it is to have unassociated clients:![Time for action – orchestrating
    a Misassociation attack](graphics/B09903_06_04.jpg)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一分钟左右，客户端应该会自动连接到我们。这表明让客户端与伪接入点断开关联是多么容易：![行动时刻 – 编排一个误关联攻击](graphics/B09903_06_04.jpg)
- en: Now, we will try it in competition with another router. We will create a fake
    access point `Wireless Lab` in the presence of the legitimate one. Let's turn
    our access point on to ensure that `Wireless Lab` is available to the client.
    For this experiment, we have set the access point channel to `13`. Let the client
    connect to the access point. We can verify this from `airodump-ng`, as shown in
    the following screenshot:![Time for action – orchestrating a Misassociation attack](graphics/B09903_06_05.jpg)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将与另一个路由器竞争。我们将在合法接入点存在的情况下创建一个名为`Wireless Lab`的伪接入点。让我们打开我们的接入点，确保`Wireless
    Lab`对客户端可用。为了进行此实验，我们已将接入点的频道设置为`13`。让客户端连接到接入点。我们可以从`airodump-ng`中验证这一点，如下图所示：![行动时刻
    – 编排一个误关联攻击](graphics/B09903_06_05.jpg)
- en: Now, let's bring up our fake access point with the SSID `Wireless Lab`:![Time
    for action – orchestrating a Misassociation attack](graphics/B09903_06_06.jpg)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们启动一个SSID为`Wireless Lab`的伪接入点：![行动时刻 – 编排一个误关联攻击](graphics/B09903_06_06.jpg)
- en: Notice that the client is still connected to `Wireless Lab`, the legitimate
    access point:![Time for action – orchestrating a Misassociation attack](graphics/B09903_06_07.jpg)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，客户端仍然连接到`Wireless Lab`，即合法接入点：![行动时刻 – 编排一个误关联攻击](graphics/B09903_06_07.jpg)
- en: We will now send broadcast deauthentication messages to the client on behalf
    of the legitimate access point to break their connection:![Time for action – orchestrating
    a Misassociation attack](graphics/B09903_06_08.jpg)
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将代表合法接入点向客户端发送广播去认证消息，以断开它们的连接：![行动时刻 – 编排一个误关联攻击](graphics/B09903_06_08.jpg)
- en: Assuming the signal strength of our fake access point `Wireless Lab` is stronger
    than the legitimate one to the client, it connects to our fake access point instead
    of the legitimate access point.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们伪造的接入点`Wireless Lab`的信号强度比合法接入点的信号强，客户端将连接到我们的伪接入点，而不是合法接入点。
- en: 'We can verify this by looking at the `airbase-ng` output to see the new association
    of the client with our fake access point:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过查看`airbase-ng`的输出，验证客户端与我们伪接入点的新关联：
- en: '![Time for action – orchestrating a Misassociation attack](graphics/B09903_06_09.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![行动时刻 – 编排一个误关联攻击](graphics/B09903_06_09.jpg)'
- en: '*What just happened?*'
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We just created a Honeypot using the probed list from the client and using the
    same ESSID as that of neighboring access points. In the first case, the client
    automatically connected to us, as it was searching for the network. In the latter
    case, as we were closer to the client than the real access point, our signal strength
    was higher, and the client connected to us.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚使用客户端探测到的列表并使用与邻近接入点相同的ESSID创建了一个蜜罐。在第一种情况下，客户端在搜索网络时自动连接到了我们；在后一种情况下，由于我们离客户端比真实接入点更近，我们的信号强度更高，客户端连接到了我们。
- en: Have a go hero – forcing a client to connect to the Honeypot
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 来试试吧英雄 – 强制客户端连接到蜜罐
- en: In the previous exercise, what do we do if the client does not automatically
    connect to us? We would have to send a deauthentication packet to break the legitimate
    client-access point connection and then, if our signal strength is higher, the
    client will connect to our spoofed access point. Try this out by connecting a
    client to a legitimate access point, and then force them to connect to your Honeypot.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的练习中，如果客户端没有自动连接到我们，我们该怎么办？我们需要发送去认证包（deauthentication packet）来断开合法客户端与接入点的连接，然后，如果我们的信号强度更强，客户端就会连接到我们伪造的接入点。试试这个方法：将客户端连接到一个合法接入点，然后强制它连接到你的蜜罐。
- en: The Caffe Latte attack
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Caffe Latte攻击
- en: In the Honeypot attack, we noticed that clients will continuously probe for
    SSIDs they have connected to previously. If the client had connected to an access
    point using WEP, operating systems such as Windows cache and store the WEP key.
    The next time the client connects to the same access point, the Windows wireless
    configuration manager automatically uses the stored key.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在蜜罐攻击中，我们注意到客户端会不断地探测之前连接过的SSID。如果客户端曾连接到一个WEP加密的接入点，像Windows这样的操作系统会缓存并存储WEP密钥。下次客户端连接到同一个接入点时，Windows无线配置管理器会自动使用已存储的密钥。
- en: The **Caffe Latte attack** was invented by Vivek, one of the authors of this
    book, and was demonstrated in Toorcon 9, San Diego, USA. The Caffe Latte attack
    is a WEP attack that allows a hacker to retrieve the WEP key of the authorized
    network, using just the client. The attack does not require the client to be anywhere
    close to the authorized WEP network. It can crack the WEP key using just the isolated
    client.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**Caffe Latte攻击**是由本书的作者之一Vivek发明的，并在美国圣地亚哥的Toorcon 9大会上进行了展示。Caffe Latte攻击是一种WEP攻击，允许黑客通过客户端仅仅从客户端获取授权网络的WEP密钥。这个攻击不要求客户端必须靠近授权WEP网络，它可以仅使用隔离的客户端来破解WEP密钥。'
- en: In the next exercise, we will retrieve the WEP key of a network from a client
    using the Caffe Latte attack.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个练习中，我们将通过Caffe Latte攻击从客户端获取一个网络的WEP密钥。
- en: Time for action – conducting the Caffe Latte attack
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时刻 – 执行Caffe Latte攻击
- en: 'Follow these instructions to get started:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明开始操作：
- en: Let's first set up our legitimate access point with WEP for the network `Wireless
    Lab` with the `ABCDEFABCDEFABCDEF12` key in hex:![Time for action – conducting
    the Caffe Latte attack](graphics/B09903_06_10.jpg)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先为网络`Wireless Lab`设置一个合法的WEP接入点，使用`ABCDEFABCDEFABCDEF12`这个十六进制密钥：![行动时刻
    – 执行Caffe Latte攻击](graphics/B09903_06_10.jpg)
- en: 'Let''s connect our client to it and verify that the connection is successful
    using `airodump-ng`, as shown in the following screenshot:'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们将客户端连接到该接入点，并使用`airodump-ng`验证连接是否成功，如下图所示：
- en: '![Time for action – conducting the Caffe Latte attack](graphics/B09903_06_11.jpg)'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时刻 – 执行Caffe Latte攻击](graphics/B09903_06_11.jpg)'
- en: Let's unplug the access point and ensure that the client is in the unassociated
    stage and searches for the WEP network `Wireless Lab`.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们拔掉接入点电源，确保客户端处于未关联状态，并开始搜索WEP网络`Wireless Lab`。
- en: Now, we use `airbase-ng` to bring up an access point with `Wireless Lab` as
    the SSID, with the parameters `airbase-ng -a <AP MAC> --essid <AP SSID> -L -W
    1 -c <channel> wlan0mon`, as shown here:![Time for action – conducting the Caffe
    Latte attack](graphics/B09903_06_12.jpg)
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们使用`airbase-ng`启动一个接入点，SSID设置为`Wireless Lab`，命令参数为`airbase-ng -a <AP MAC>
    --essid <AP SSID> -L -W 1 -c <channel> wlan0mon`，如下所示：![行动时刻 – 执行Caffe Latte攻击](graphics/B09903_06_12.jpg)
- en: As soon as the client connects to this access point, `airbase-ng` starts the
    Caffe Latte attack, as shown here:![Time for action – conducting the Caffe Latte
    attack](graphics/B09903_06_13.jpg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦客户端连接到该接入点，`airbase-ng`将启动Caffe Latte攻击，如下所示：![行动时刻 – 执行Caffe Latte攻击](graphics/B09903_06_13.jpg)
- en: We now start `airodump-ng` to collect the data packets from this access point
    only, as we did before in the WEP cracking scenario `airodump-ng wlan0mon -c <AP
    channel> --essid <AP SSID> -w <prefix>`:![Time for action – conducting the Caffe
    Latte attack](graphics/B09903_06_14.jpg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们启动`airodump-ng`，只收集该接入点的数据包，正如我们在WEP破解场景中做的那样，命令为`airodump-ng wlan0mon -c
    <AP channel> --essid <AP SSID> -w <prefix>`：![行动时刻 – 执行Caffe Latte攻击](graphics/B09903_06_14.jpg)
- en: We also start `aircrack-ng` as in the WEP-cracking exercise we did before to
    begin the cracking process. The command line will be `aircrack-ng filename`, where
    the filename is the name of the file created by `airodump-ng`.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还像之前WEP破解练习中那样启动`aircrack-ng`来开始破解过程。命令行格式为`aircrack-ng filename`，其中filename是由`airodump-ng`创建的文件名。
- en: '*What just happened?*'
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We were successful in retrieving the WEP key from just the wireless client without
    requiring an actual access point to be used or present in the vicinity. This is
    the power of the Caffe Latte attack.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功地从无线客户端中提取了WEP密钥，而无需实际使用或接近接入点。这就是Caffe Latte攻击的威力。
- en: In basic terms, a WEP access point doesn't need to prove to a client that it
    knows the WEP key in order to receive encrypted traffic. The first piece of traffic
    that will always be sent to a router upon connecting to a new network will be
    an ARP request to ask for an IP.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，WEP接入点不需要向客户端证明它知道WEP密钥就能接收加密流量。每次连接到新网络时，发送到路由器的第一个数据流量将是一个ARP请求，请求一个IP地址。
- en: The attack works by bit flipping and replaying ARP packets sent by the wireless
    client post association with the fake access point created by us. These bit flipped
    ARP request packets cause more ARP response packets to be sent by the wireless
    client.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击通过翻转位并重放无线客户端在与我们创建的伪接入点关联后发送的ARP数据包来进行。这些翻转的ARP请求数据包导致无线客户端发送更多的ARP响应数据包。
- en: Bit-flipping takes an encrypted value and alters it to create a different encrypted
    value. In this circumstance, we can take an encrypted ARP request and create an
    ARP response with a high degree of accuracy. Once we send back a valid ARP response,
    we can replay this value over and over again to generate the traffic we need to
    decrypt the WEP key.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 位翻转会改变加密值，生成不同的加密值。在这种情况下，我们可以通过翻转加密的ARP请求来创建一个高精度的ARP响应。一旦我们发送回有效的ARP响应，就可以反复重放该值，以生成我们需要的流量来解密WEP密钥。
- en: Note that all these packets are encrypted using the WEP key stored on the client.
    Once we are able to gather a large number of these data packets, `aircrack-ng`
    is able to recover the WEP key easily.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，所有这些数据包都是使用存储在客户端上的WEP密钥加密的。一旦我们能够收集到大量这些数据包，`aircrack-ng`就能够轻松恢复WEP密钥。
- en: Have a go hero – practise makes you perfect!
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加油英雄 – 练习成就完美！
- en: Try changing the WEP key and repeat the attack. This is a difficult attack and
    requires some practice to orchestrate successfully. It would also be a good idea
    to use Wireshark and examine the traffic on the wireless network.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试更改WEP密钥并重复攻击。这是一个难度较大的攻击，成功组织它需要一些练习。使用Wireshark并检查无线网络上的流量也是一个不错的主意。
- en: Deauthentication and disassociation attacks
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 去认证和去关联攻击
- en: We have seen deauthentication attacks in previous chapters as well in the context
    of the access point. In this chapter, we will explore this attack in the context
    of the client.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在之前的章节中也看到过去认证攻击，尤其是在接入点的上下文中。在本章中，我们将探索客户端上下文中的这种攻击。
- en: In the next lab, we will send deauthentication packets to just the client and
    break an established connection between the access point and the client.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个实验中，我们将只向客户端发送去认证数据包，打破接入点与客户端之间已建立的连接。
- en: Time for action – deauthenticating the client
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 使客户端断开连接
- en: 'Follow these instructions to get started:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明开始：
- en: Let's first bring our access point `Wireless Lab` online again. Let's keep it
    running on WEP to prove that, even with encryption enabled, it is possible to
    attack the access point and client connection. Let's verify that the access point
    is up using `airodump-ng`:![Time for action – deauthenticating the client](graphics/B09903_06_15.jpg)
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先重新启动我们的接入点`Wireless Lab`。我们保持其在WEP模式下运行，以证明即使启用了加密，仍然可以攻击接入点和客户端连接。我们将使用`airodump-ng`验证接入点是否已启动：![行动时间
    – 使客户端断开连接](graphics/B09903_06_15.jpg)
- en: Let's connect our client to this access point and verify it with `airodump-ng`:![Time
    for action – deauthenticating the client](graphics/B09903_06_16.jpg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将客户端连接到这个接入点，并使用`airodump-ng`验证：![行动时间 – 使客户端断开连接](graphics/B09903_06_16.jpg)
- en: We will now run `aireplay-ng` to target the access point connection:![Time for
    action – deauthenticating the client](graphics/B09903_06_17.jpg)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将运行`aireplay-ng`来针对接入点连接进行攻击：![行动时间 – 使客户端断开连接](graphics/B09903_06_17.jpg)
- en: The client gets disconnected and tries to reconnect to the access point. We
    can verify this using Wireshark, just as we did earlier:![Time for action – deauthenticating
    the client](graphics/B09903_06_18.jpg)
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端被断开连接并尝试重新连接到接入点。我们可以使用Wireshark来验证这一点，就像我们之前做的一样：![行动时间 – 使客户端断开连接](graphics/B09903_06_18.jpg)
- en: We have now seen that, even in the presence of WEP encryption, it is possible
    to deauthenticate a client and disconnect it. The same is valid even in the presence
    of WPA/WPA2\. Let's now set our access point to WPA encryption and verify it:![Time
    for action – deauthenticating the client](graphics/B09903_06_19.jpg)
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在已经看到，即使在WEP加密存在的情况下，也可以取消认证客户端并断开连接。在WPA/WPA2加密存在的情况下也是如此。现在让我们将接入点设置为WPA加密并进行验证：![行动时间
    – 取消认证客户端](graphics/B09903_06_19.jpg)
- en: Let's connect our client to the access point and ensure that it is connected:![Time
    for action – deauthenticating the client](graphics/B09903_06_20.jpg)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将客户端连接到接入点并确保它已连接：![行动时间 – 取消认证客户端](graphics/B09903_06_20.jpg)
- en: Let's now run `aireplay-ng` to disconnect the client from the access point:![Time
    for action – deauthenticating the client](graphics/B09903_06_21.jpg)
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们运行`aireplay-ng`，将客户端从接入点断开：![行动时间 – 取消认证客户端](graphics/B09903_06_21.jpg)
- en: '*What just happened?*'
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We just learnt how to disconnect a wireless client selectively from an access
    point using deauthentication frames even in the presence of encryption schemas
    such as WEP/WPA/WPA2\. This was done by sending a deauthentication packet to just
    the access point-client pair, instead of sending a broadcast deauthentication
    to the entire network.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚学会了如何使用去认证帧在即使存在像WEP/WPA/WPA2这样的加密协议时，选择性地将无线客户端从接入点断开连接。这是通过仅向接入点-客户端对发送去认证数据包，而不是向整个网络发送广播去认证来实现的。
- en: Have a go hero – dissociation attack on the client
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动手吧，英雄 – 对客户端进行去关联攻击
- en: In the previous exercise, we used a deauthentication attack to break the connection.
    Try using a disassociation packet to break the established connection between
    a client and an access point.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个练习中，我们使用了取消认证攻击来中断连接。尝试使用去关联数据包来中断客户端与接入点之间的已建立连接。
- en: The Hirte attack
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hirte攻击
- en: We've already seen how to conduct the Caffe Latte attack. The Hirte attack extends
    the Caffe Latte attack using fragmentation techniques and allows almost any packet
    to be used.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何进行Caffe Latte攻击。Hirte攻击通过使用分片技术扩展了Caffe Latte攻击，并允许几乎任何数据包都能被使用。
- en: More information on the Hirte attack is available on the Aircrack-ng website
    at [http://www.aircrack-ng.org/doku.php?id=hirte](http://www.aircrack-ng.org/doku.php?id=hirte).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Hirte攻击的更多信息，请访问Aircrack-ng官网：[http://www.aircrack-ng.org/doku.php?id=hirte](http://www.aircrack-ng.org/doku.php?id=hirte)。
- en: We will now use `aircrack-ng` to conduct a Hirte attack on the same client.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用`aircrack-ng`对同一客户端进行Hirte攻击。
- en: Time for action – cracking WEP with the Hirte attack
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 使用Hirte攻击破解WEP
- en: 'Follow these instructions to get started:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤开始：
- en: Create a WEP access point exactly as in the Caffe Latte attack using the `airbase-ng`
    tool. The only additional option is the `-N` option instead of the `-L` option
    to launch the Hirte attack:![Time for action – cracking WEP with the Hirte attack](graphics/B09903_06_22.jpg)
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`airbase-ng`工具创建一个与Caffe Latte攻击中完全相同的WEP接入点。唯一的额外选项是使用`-N`选项而不是`-L`选项来启动Hirte攻击：![行动时间
    – 使用Hirte攻击破解WEP](graphics/B09903_06_22.jpg)
- en: Start `airodump-ng` in a separate window to capture packets for the `Wireless
    Lab` Honeypot:![Time for action – cracking WEP with the Hirte attack](graphics/B09903_06_23.jpg)
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个单独的窗口中启动`airodump-ng`，以捕获`无线实验室`蜜罐的数据包：![行动时间 – 使用Hirte攻击破解WEP](graphics/B09903_06_23.jpg)
- en: Now, `airodump-ng` will start monitoring this network and storing the packets
    in the `Hirte-01.cap` file:![Time for action – cracking WEP with the Hirte attack](graphics/B09903_06_24.jpg)
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，`airodump-ng`将开始监控该网络，并将数据包存储在`Hirte-01.cap`文件中：![行动时间 – 使用Hirte攻击破解WEP](graphics/B09903_06_24.jpg)
- en: Once the roaming client connects to our Honeypot AP, the Hirte attack is automatically
    launched by `airbase-ng`:![Time for action – cracking WEP with the Hirte attack](graphics/B09903_06_25.jpg)
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦漫游客户端连接到我们的蜜罐接入点，Hirte攻击将由`airbase-ng`自动启动：![行动时间 – 使用Hirte攻击破解WEP](graphics/B09903_06_25.jpg)
- en: We start `aircrack-ng` as in the case of the Caffe Latte attack and eventually,
    the key will be cracked.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们像进行Caffe Latte攻击一样启动`aircrack-ng`，最终密钥将被破解。
- en: '*What just happened?*'
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We launched the Hirte attack against a WEP client that was isolated and away
    from the authorized network. We cracked the key exactly the same way as in the
    Caffe Latte attack case.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们针对一个被隔离且远离授权网络的WEP客户端发起了Hirte攻击。我们用与Caffe Latte攻击相同的方式破解了密钥。
- en: Have a go hero – practise, practise, practise
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动手吧，英雄 – 练习，练习，再练习
- en: We recommend setting different WEP keys on the client and trying this exercise
    a couple of times to gain confidence. You may notice many times that you may have
    to reconnect the client to get it to work.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议在客户端设置不同的WEP密钥，并尝试多次进行这个练习，以增强信心。你可能会注意到，很多时候你需要重新连接客户端才能使其正常工作。
- en: AP-less WPA-Personal cracking
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无AP WPA-Personal破解
- en: In [Chapter 4](ch04.html "Chapter 4. WLAN Encryption Flaws"), *WLAN Encryption
    Flaws*, we saw how to crack WPA/WPA2 PSK using `aircrack-ng`. The basic idea was
    to capture a four-way WPA handshake and then launch a dictionary attack.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](ch04.html "第4章 WLAN加密漏洞")中，*WLAN加密漏洞*一节，我们演示了如何使用`aircrack-ng`破解WPA/WPA2
    PSK。基本的思路是捕获四路WPA握手数据包，然后发起字典攻击。
- en: 'The million-dollar question is: would it be possible to crack WPA-Personal
    with just the client? No, access point!'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 一百万美元的问题是：仅凭客户端是否能破解WPA-Personal？不，接入点不需要！
- en: 'Let''s revisit the WPA cracking exercise to jog our memory:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下WPA破解练习，唤起我们的记忆：
- en: '![AP-less WPA-Personal cracking](graphics/B09903_06_26.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![无AP WPA-Personal破解](graphics/B09903_06_26.jpg)'
- en: To crack WPA, we need the following four parameters from the four-way handshake—**Authenticator
    Nounce** (**ANonce**), **Supplicant Nounce** (**SNonce**), Authenticator MAC,
    and Supplicant MAC. Now, the interesting thing is that we do not need all of the
    four packets in the handshake to extract this information. We can get this information
    with four packets; packets 1 and 2 or just packets 2 and 3.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要破解WPA，我们需要从四路握手中获取以下四个参数——**认证者随机数**（**ANonce**）、**请求者随机数**（**SNonce**）、认证者MAC地址和请求者MAC地址。现在，有趣的是，我们并不需要四个握手数据包中的所有数据包就能提取这些信息。我们可以通过四个数据包，数据包1和2，或者仅仅是数据包2和3来获取这些信息。
- en: 'In order to crack WPA-PSK, we will bring up a WPA-PSK Honeypot and, when the
    client connects to us, only **Message 1** and **Message 2** will come through.
    As we do not know the passphrase, we cannot send **Message 3**. However, **Message
    1** and **Message 2** contain all the information required to begin the key cracking
    process:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了破解WPA-PSK，我们将启动一个WPA-PSK蜜罐，当客户端连接到我们时，只有**消息1**和**消息2**会传递过来。由于我们不知道密码短语，我们无法发送**消息3**。然而，**消息1**和**消息2**包含了开始破解密钥过程所需的所有信息：
- en: '![AP-less WPA-Personal cracking](graphics/B09903_06_27.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![无AP WPA-Personal破解](graphics/B09903_06_27.jpg)'
- en: Time for action – AP-less WPA cracking
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——无AP WPA破解
- en: We will set up a WPA-PSK Honeypot with the ESSID `Wireless Lab`. The `-z 2`
    option creates a WPA-PSK access point, which uses TKIP:![Time for action – AP-less
    WPA cracking](graphics/B09903_06_28.jpg)
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将设置一个WPA-PSK蜜罐，ESSID为`Wireless Lab`。`-z 2`选项会创建一个使用TKIP的WPA-PSK接入点：![行动时间——无AP
    WPA破解](graphics/B09903_06_28.jpg)
- en: Let's also start `airodump-ng` to capture packets from this network:![Time for
    action – AP-less WPA cracking](graphics/B09903_06_29.jpg)
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们同时启动`airodump-ng`来捕获这个网络的数据包：![行动时间——无AP WPA破解](graphics/B09903_06_29.jpg)
- en: Now, when our roaming client connects to this access point, it starts the handshake
    but fails to complete it after **Message 2**, as discussed previously; however,
    the data required to crack the handshake has been captured.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当我们的漫游客户端连接到这个接入点时，它会启动握手过程，但在**消息2**后未能完成，正如之前所讨论的那样；然而，破解握手所需的数据已经被捕获。
- en: We run the `airodump-ng` capture file through `aircrack-ng` with the same dictionary
    file as before; eventually, the passphrase is cracked as before.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将`airodump-ng`捕获的文件通过`aircrack-ng`与之前相同的字典文件进行处理；最终，密码短语像之前一样被破解。
- en: '*What just happened?*'
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We were able to crack the WPA key with just the client. This was possible because,
    even with just the first two packets, we have all the information required to
    launch a dictionary attack on the handshake.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功地通过仅使用客户端破解了WPA密钥。这是因为，即使只有前两个数据包，我们也已经具备了发起字典攻击所需的所有信息。
- en: Have a go hero – AP-less WPA cracking
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 来一场挑战吧——无AP WPA破解
- en: We recommend setting different WEP keys on the client and trying this exercise
    a couple of times to gain confidence. You may notice many times that you have
    to reconnect the client to get it to work.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议在客户端设置不同的WEP密钥，并尝试多次进行这个练习，以增强信心。你可能会注意到，很多时候你需要重新连接客户端才能使其正常工作。
- en: Pop quiz – attacking the client
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速测试——攻击客户端
- en: Q1\. What encryption key can the Caffe Latte attack recover?
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Q1. Caffe Latte攻击可以恢复哪个加密密钥？
- en: None
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无
- en: WEP
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WEP
- en: WPA
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WPA
- en: WPA2
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WPA2
- en: Q2\. What would a Honeypot access point typically use?
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Q2. 蜜罐接入点通常会使用什么？
- en: No Encryption, Open Authentication
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无加密，开放认证
- en: No Encryption, Shared Authentication
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无加密，共享认证
- en: WEP Encryption, Open Authentication
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WEP加密，开放认证
- en: None of the above
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述内容都不包括
- en: Q3\. Which one of the following is a DoS Attack?
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Q3. 以下哪个是DoS攻击？
- en: Misassociation attacks
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 误关联攻击
- en: Deauthentication attacks
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 去认证攻击
- en: Disassociation attacks
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 去关联攻击
- en: Both 2 and 3
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2和3都正确
- en: Q4\. What does the Caffe Latte attack require?
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Q4. Caffe Latte攻击需要什么？
- en: That the wireless client be in radio range of the access point
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无线客户端必须处于接入点的无线范围内
- en: That the client contains a cached and stored WEP key
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端包含一个缓存和存储的WEP密钥
- en: WEP encryption with at least 128-bit encryption
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WEP加密至少使用128位加密
- en: Both 1 and 3
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1和3都正确
- en: Summary
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned that even the wireless client is susceptible to
    attacks. These include the Honeypot and other Misassociation attacks; Caffe Latte
    attack, to retrieve the key from the wireless client, deauthentication and disassociation
    attacks causing a Denial of Service, Hirte attack as an alternative to retrieve
    the WEP key from a roaming client, and, finally, cracking the WPA-Personal passphrase
    with just the client.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们了解到即使是无线客户端也容易受到攻击。这些攻击包括蜜罐攻击和其他误关联攻击；Caffe Latte攻击，用来从无线客户端获取密钥，去认证和去关联攻击导致拒绝服务（Denial
    of Service），Hirte攻击作为从漫游客户端获取WEP密钥的替代方法，最后是仅通过客户端破解WPA-Personal密码。
- en: In the next chapter, we will use what we've learned so far to conduct various
    advanced wireless attacks on both the client and infrastructure side. So, quickly
    flip the page to the next chapter!
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将利用目前所学的知识，对客户端和基础设施侧进行各种高级无线攻击。所以，赶紧翻到下一章吧！
