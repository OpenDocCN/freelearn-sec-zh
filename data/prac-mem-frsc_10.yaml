- en: 'Chapter 7: Linux Memory Acquisition'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章：Linux内存获取
- en: 'Despite Windows being the most common desktop operating system, the role of
    Linux-based systems cannot be overstated. Due to their flexibility, Linux-based
    operating systems can be installed on a wide range of hardware: PCs, tablets,
    laptops, smartphones, and servers. The latter is especially true when it comes
    to Enterprise.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Windows是最常见的桌面操作系统，但Linux系统的角色不容忽视。由于其灵活性，基于Linux的操作系统可以安装在各种硬件上：个人电脑、平板、笔记本、智能手机和服务器。尤其在企业环境中，后者的应用尤为重要。
- en: Servers running Linux-based operating systems are an integral part of the infrastructure
    as they are often used as the basis for web, mail, application, database, and
    file servers. That is why, every year, attackers show more and more interest in
    these hosts. The number of attacks involving Linux-based systems steadily grows
    every year. More and more groups, both state-sponsored and financially motivated
    ones, have Linux-based tools and malware in their arsenals. For example, the notorious
    Fancy Bear APT was convinced by NSA and FBI in using an advanced Linux rootkit
    called **Drovorub**. Another good example is multiple ransomware operators – all
    major ransomware as a service programs now provide their affiliates with Linux
    versions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 运行Linux操作系统的服务器是基础设施的重要组成部分，因为它们常常作为网页、邮件、应用程序、数据库和文件服务器的基础。因此，攻击者每年对这些主机的兴趣与日俱增。涉及Linux系统的攻击数量每年稳步增长。越来越多的团体，无论是国家支持的还是出于财务动机的团体，都在其武器库中拥有基于Linux的工具和恶意软件。例如，臭名昭著的Fancy
    Bear APT曾被美国国家安全局和联邦调查局劝说使用一种先进的Linux rootkit，名为**Drovorub**。另一个很好的例子是多个勒索病毒运营商——所有主要的勒索病毒即服务程序现在都为其加盟商提供Linux版本。
- en: All this leads us to the necessity of mastering the tools and techniques required
    for analyzing Linux-based systems. This will be our main topic of discussion in
    this part of the book.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都引出了掌握分析基于Linux的系统所需工具和技术的必要性。这将是本书这一部分的主要讨论内容。
- en: As we did previously, it is paramount to collect the required data. In our case,
    this involves creating a memory dump. This is where we will start discussing this
    topic.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 就像之前做的一样，收集所需的数据至关重要。在我们的案例中，这涉及到创建内存转储。这将是我们开始讨论这一主题的地方。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding Linux memory acquisition issues
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Linux内存获取问题
- en: Preparing for Linux memory acquisition
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备Linux内存获取
- en: Acquiring memory with LiME
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用LiME获取内存
- en: Acquiring memory with AVML
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AVML获取内存
- en: Creating a Volatility profile
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Volatility配置文件
- en: Understanding Linux memory acquisition issues
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Linux内存获取问题
- en: In [*Chapter 2*](B17056_02_Final_JM_ePub.xhtml#_idTextAnchor023), *Acquisition
    Process*, we discussed general memory dumping issues, which are also relevant
    in the case of Linux-based systems. However, the process of creating Linux memory
    dumps also has unique problems that are specific to these systems. These are the
    problems we will focus on.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第2章*](B17056_02_Final_JM_ePub.xhtml#_idTextAnchor023)《获取过程》中，我们讨论了通用的内存转储问题，这些问题在基于Linux的系统中也同样适用。然而，创建Linux内存转储的过程也有一些特有的问题，这些问题是这些系统特有的。这些就是我们将重点讨论的问题。
- en: The main difficulty that's encountered by professionals when dumping memory
    is the number of distributions. Since the Linux kernel is open source and distributed
    under the GNU General Public License, it quickly gained popularity among the community
    and became the basis for many distributions, each of which has its own features.
    Naturally, this had an impact on the memory extraction process.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 专业人员在进行内存转储时遇到的主要难题是分发版的数量。由于Linux内核是开源的，并且根据GNU通用公共许可证进行分发，它迅速在社区中获得了普及，成为了许多分发版的基础，每个分发版都有其自己的特点。自然，这对内存提取过程产生了影响。
- en: Earlier versions of the kernel, before Linux 2.6, allowed access to memory via
    `/dev/mem and /dev/kmem` devices. The `/dev/mem` interface provided programs with
    root access to physical memory for read and write operations, while `/dev/kmem`
    allowed access to the kernel's virtual address space. Thus, to create a raw memory
    dump, it was sufficient to use the simple `cat` or `dd` utilities to read `/dev/mem`
    and redirect the output to a separate file. This approach was undoubtedly handy
    but created obvious security problems. For example, due to non-sequential memory
    mapping from physical offset `0`, inexperienced technicians could directly access
    sensitive memory regions, leading to system instability, memory corruption, or
    system crashes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 2.6 之前的较早版本内核中，可以通过 `/dev/mem` 和 `/dev/kmem` 设备访问内存。`/dev/mem` 接口允许程序以
    root 权限访问物理内存进行读写操作，而 `/dev/kmem` 则允许访问内核的虚拟地址空间。因此，要创建一个原始内存转储，仅需使用简单的 `cat`
    或 `dd` 工具读取 `/dev/mem` 并将输出重定向到一个单独的文件中。这种方法无疑非常方便，但也带来了明显的安全问题。例如，由于从物理偏移量 `0`
    开始的非顺序内存映射，缺乏经验的技术人员可能会直接访问敏感的内存区域，导致系统不稳定、内存损坏或系统崩溃。
- en: In newer versions of the Linux kernel, the interfaces described previously are
    disabled. The physical memory is now accessed by loading a special kernel module.
    The biggest challenge is that this kernel module must be built on the target system
    or a system with a matching distribution and kernel version to work properly.
    Naturally, it is not a good idea to build the module on the target system, as
    it requires many dependencies, and installing them may overwrite important data.
    Therefore, if you are using tools that require a kernel module to be loaded, it
    is best to build them in a testing environment.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在较新版本的 Linux 内核中，之前描述的接口已被禁用。现在，物理内存需要通过加载一个特殊的内核模块来访问。最大的挑战在于，必须在目标系统或具有匹配发行版和内核版本的系统上构建此内核模块，才能正常工作。显然，不建议在目标系统上构建模块，因为它需要许多依赖项，而安装这些依赖项可能会覆盖重要数据。因此，如果使用需要加载内核模块的工具，最好在测试环境中构建这些模块。
- en: There are various tools available from different developers for memory extraction.
    In this chapter, we will concentrate on the most convenient and effective tools
    for Linux memory dumping, but first, let's take a look at the preparation process.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同开发者提供的工具可以用于内存提取。在本章中，我们将集中介绍最方便有效的 Linux 内存转储工具，但首先，让我们来看看准备过程。
- en: Preparing for Linux memory acquisition
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备 Linux 内存获取
- en: 'Since some commonly used Linux memory extraction tools require a kernel module
    to be loaded, you need to build this module in a similar environment to the real
    one. To do this, you can build the module on a prepared virtual machine. You can
    create such a machine using **VMWare**, **VirtualBox**, or other similar solutions.
    The most important thing is to have the same operating system distribution with
    the same kernel version as the target host installed on the virtual machine. Therefore,
    the first step in preparing a virtual environment is to determine the distribution
    and exact kernel version of the target host. To determine the distribution, run
    the following command in the terminal on the target host:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于一些常用的 Linux 内存提取工具需要加载内核模块，因此需要在与真实环境相似的环境中构建该模块。为此，你可以在准备好的虚拟机上构建模块。你可以使用
    **VMWare**、**VirtualBox** 或其他类似的解决方案创建这样一台虚拟机。最重要的是，在虚拟机上安装与目标主机相同的操作系统发行版和内核版本。因此，准备虚拟环境的第一步是确定目标主机的发行版和确切的内核版本。要确定发行版，请在目标主机的终端中运行以下命令：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To get the exact kernel version, run the following command:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取确切的内核版本，请运行以下命令：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should get the following output:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 7.1 – Target distributive and kernel version'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.1 – 目标发行版和内核版本'
- en: '](img/Figure_7.1_B17056.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.1_B17056.jpg)'
- en: Figure 7.1 – Target distributive and kernel version
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – 目标发行版和内核版本
- en: We now know that `Ubuntu 21.04` is installed on the target host and that the
    kernel version is `5.11.0-34-generic`. This information can be used to create
    a virtual machine. As most distributions are freely available, you should have
    no problem finding the right one. The same goes for the kernel version. Alternatively,
    if you already have a virtual machine with the correct distribution and updated
    kernel, you can do a kernel downgrade.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道目标主机上安装的是 `Ubuntu 21.04`，内核版本是 `5.11.0-34-generic`。这些信息可以用于创建虚拟机。由于大多数发行版都是免费提供的，你应该不会遇到找不到合适版本的问题。内核版本也是如此。或者，如果你已经有了一个带有正确发行版和更新内核的虚拟机，也可以选择进行内核降级。
- en: You will also need to prepare removable media to dump the memory onto. We already
    went through this process in [*Chapter 3*](B17056_03_Final_JM_ePub.xhtml#_idTextAnchor041),
    *Windows Memory Acquisition*, so we will not go into it now. If you plan to capture
    the dump over the network, you will need to prepare a network share and make sure
    it is available for the target host. In this chapter, we will look at both methods
    of capturing dumps. In the meantime, we will start discussing specific tools.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要准备可移动存储介质以便转储内存。我们已经在[*第3章*](B17056_03_Final_JM_ePub.xhtml#_idTextAnchor041)中讲解过这个过程，*Windows内存获取*，所以这部分我们就不再详细讲解。如果你打算通过网络捕获内存转储，你需要准备一个网络共享，并确保目标主机能够访问。在本章中，我们将同时探讨这两种捕获转储的方法。与此同时，我们将开始讨论具体的工具。
- en: Acquiring memory with LiME
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用LiME获取内存
- en: 'The first tool we will look at is the **Linux Memory Extractor**, or **LiME**.
    LiME is a loadable kernel module that makes it possible to dump memory from Linux
    and Linux-based systems, including Android. The main advantage of this tool is
    its minimal process footprint and how it can calculate the hash of dumped memory.
    Lime can also create dumps over the network. This tool can be found in the following
    GitHub repository: [https://github.com/504ensicsLabs/LiME](https://github.com/504ensicsLabs/LiME).
    The following is a screenshot of LiME:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先介绍的工具是**Linux内存提取器**，或称**LiME**。LiME 是一个可加载的内核模块，使得从 Linux 及基于 Linux 的系统（包括
    Android）中提取内存成为可能。这个工具的主要优点是它对进程的占用非常小，并且可以计算转储内存的哈希值。LiME 还能够通过网络创建转储。这个工具可以在以下
    GitHub 仓库中找到：[https://github.com/504ensicsLabs/LiME](https://github.com/504ensicsLabs/LiME)。以下是
    LiME 的截图：
- en: '![Figure 7.2 – LiME GitHub repository'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.2 – LiME GitHub 仓库'
- en: '](img/Figure_7.2_B17056.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.2_B17056.jpg)'
- en: Figure 7.2 – LiME GitHub repository
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – LiME GitHub 仓库
- en: Let's start by looking at the process of building the kernel module. For this,
    we will use a virtual machine with the same distribution and kernel version –
    `Ubuntu 21.04` and `5.11.0-34-generic`, respectively.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从构建内核模块的过程开始。为此，我们将使用与目标主机相同的发行版和内核版本的虚拟机——分别是 `Ubuntu 21.04` 和 `5.11.0-34-generic`。
- en: 'As we are working with Linux, we will do everything using the terminal. First
    of all, we need to install LiME and all the required packages. To do this, use
    the following command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在使用Linux，我们将通过终端进行所有操作。首先，我们需要安装LiME及所有必需的包。为此，请使用以下命令：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The command''s execution will look as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的执行过程如下所示：
- en: '![Figure 7.3 – Package installation'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.3 – 包安装'
- en: '](img/Figure_7.3_B17056.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.3_B17056.jpg)'
- en: Figure 7.3 – Package installation
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – 包安装
- en: 'Once this process is complete, we can proceed to the next step: compilation.
    To do this, move to the `lime` directory with `cd` and run `make`, as shown here:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这个过程完成，我们就可以进入下一步：编译。为此，使用 `cd` 进入 `lime` 目录并运行 `make`，如下所示：
- en: '![Figure 7.4 – Kernel module creation'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.4 – 内核模块创建'
- en: '](img/Figure_7.4_B17056.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.4_B17056.jpg)'
- en: Figure 7.4 – Kernel module creation
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4 – 内核模块创建
- en: '`make` is a utility that''s needed to automate how files are converted from
    one form into another. The conversion rules themselves are defined in a script
    named `Makefile`, which is located in the root of the working directory – in our
    case, `/usr/src/lime-forensics-1.9.1-2`.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`make` 是一个工具，用于自动化将文件从一种形式转换为另一种形式的过程。转换规则本身是在一个名为 `Makefile` 的脚本中定义的，该脚本位于工作目录的根目录——在我们的例子中是
    `/usr/src/lime-forensics-1.9.1-2`。'
- en: Once `make` has finished running, we have a kernel module called `lime-5.11.0-34-generic.ko`.
    We can copy it to removable media or a network share and use it to dump the memory
    on the target host.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 `make` 执行完毕，我们将得到一个名为 `lime-5.11.0-34-generic.ko` 的内核模块。我们可以将其复制到可移动存储介质或网络共享上，并用它来转储目标主机上的内存。
- en: 'Let''s look at the process of creating a dump over the network. First, we need
    to make the kernel module file available on the target host. This can be done
    by placing it on a network share or copying it to the target host using `scp`,
    a utility that allows you to securely copy files and directories between two locations,
    including remote ones. When the module is available, you can use `insmod`, a program
    to load kernel modules. This requires specifying the location and name of the
    output file using the path parameter, as well as the file format – `raw`, `lime`,
    and so on– specified in the format parameter. Since we have agreed to create the
    dump over the network, we will pass the protocol to be used and the port that
    the output will be sent from to the `path` parameter:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下通过网络创建转储的过程。首先，我们需要使内核模块文件在目标主机上可用。这可以通过将其放置在网络共享中，或使用`scp`将其复制到目标主机来完成，`scp`是一个允许在两个位置之间（包括远程位置）安全地复制文件和目录的工具。当模块可用时，你可以使用`insmod`来加载内核模块。此操作需要通过路径参数指定输出文件的位置和名称，并且需要在格式参数中指定文件格式——例如`raw`、`lime`等。由于我们决定通过网络创建转储，因此我们将通过`path`参数传递要使用的协议和将从中发送输出的端口：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This command will load the kernel module, create a memory dump, and send it
    to port `4444`. Note the format of the file. If you want the created memory dump
    to be recognized by Volatility, it is best to create it in `lime` format.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将加载内核模块，创建内存转储，并将其发送到`4444`端口。请注意文件的格式。如果你希望所创建的内存转储能够被Volatility识别，最好以`lime`格式创建。
- en: 'You should then run `netcat` on the investigator''s host. `Netcat` or `nc`
    is a command-line utility that reads and writes data over network connections
    using the TCP or UDP protocols. You also need to redirect the output to a file.
    This can be done as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你需要在调查员的主机上运行`netcat`。`Netcat`或`nc`是一个命令行工具，能够通过TCP或UDP协议读取和写入网络连接上的数据。你还需要将输出重定向到一个文件。可以按以下方式进行：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In this case, `netcat` will receive data from the `192.168.3.132` IP address
    and write it to the `mem.lime` file. In the end, the kernel module can be unloaded
    using the following command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`netcat`将从`192.168.3.132` IP地址接收数据并写入`mem.lime`文件。最后，可以使用以下命令卸载内核模块：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The resulting `mem.lime` file can be used for analysis, but more on that later.
    For now, let's look at another tool for memory dump creation.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 结果生成的`mem.lime`文件可以用于分析，但我们稍后再详细讲解。现在，让我们看看另一个用于创建内存转储的工具。
- en: Acquiring memory with AVML
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AVML获取内存
- en: '**AVML**, or **Acquire Volatile Memory for Linux**, is a userland acquisition
    tool developed by Microsoft. The main advantage of AVML is that it does not need
    to be built on the target host and supports multiple sources:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**AVML**，即**获取Linux的易失性内存**，是微软开发的用户态获取工具。AVML的主要优点是，它不需要在目标主机上构建，并且支持多种来源：'
- en: '`/dev/crash`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/dev/crash`'
- en: '`/proc/kcore`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/proc/kcore`'
- en: '`/dev/mem`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/dev/mem`'
- en: If no particular source is specified when you run AVML, the tool will go through
    all the sources, looking for a valid one and collecting memory from it.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在运行AVML时没有指定特定的源，该工具将会遍历所有源，寻找有效源并从中收集内存。
- en: The disadvantage, perhaps, is that this tool has been tested on a limited number
    of distributions, so it is better to check it into a virtual environment before
    using it.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工具的缺点可能是，它只在有限数量的发行版上进行了测试，因此最好先在虚拟环境中进行检查，然后再使用。
- en: 'At the time of writing this book, the following distributions have been tested:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写本书时，以下发行版已经过测试：
- en: '**Ubuntu**: 12.04, 14.04, 16.04, 18.04, 18.10, 19.04, 19.10'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ubuntu**：12.04，14.04，16.04，18.04，18.10，19.04，19.10'
- en: '**Centos**: 6.5, 6.6, 6.7, 6.8, 6.9, 6.10, 7.0, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Centos**：6.5，6.6，6.7，6.8，6.9，6.10，7.0，7.1，7.2，7.3，7.4，7.5，7.6'
- en: '**RHEL**: 6.7, 6.8, 6.9, 7.0, 7.2, 7.3, 7.4, 7.5, 8'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RHEL**：6.7，6.8，6.9，7.0，7.2，7.3，7.4，7.5，8'
- en: '**Debian**: 8, 9'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Debian**：8，9'
- en: '**Oracle Linux**: 6.8, 6.9, 7.3, 7.4, 7.5, 7.6'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Oracle Linux**：6.8，6.9，7.3，7.4，7.5，7.6'
- en: So, the first thing you need to do is download the tool. To do this, open the
    repository on GitHub at [https://github.com/microsoft/avml](https://github.com/microsoft/avml)
    and go to the **Releases** tab.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你需要做的第一件事是下载该工具。为此，打开GitHub上的仓库页面：[https://github.com/microsoft/avml](https://github.com/microsoft/avml)，并转到**Releases**标签页。
- en: '![Figure 7.5 – AVML GitHub repository'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.5 – AVML GitHub 仓库'
- en: '](img/Figure_7.5_B17056.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.5_B17056.jpg)'
- en: Figure 7.5 – AVML GitHub repository
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5 – AVML GitHub 仓库
- en: 'Find AVML, download it, and put it on removable media or a network share where
    you can run it on the target host. We will use removable media this time. Before
    running it, you need to make the file executable by using the `chmod` command,
    which allows you to change the permissions of files and directories:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 找到AVML，下载它，并将其放到可移动媒体或网络共享中，这样你就可以在目标主机上运行它。这次我们将使用可移动媒体。在运行之前，你需要使用`chmod`命令使文件可执行，`chmod`命令可以让你更改文件和目录的权限：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After this, you can start creating the dump. Simply run AVML and specify the
    location and name of the output file. This will result in the following output:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，你可以开始创建内存转储。只需运行AVML并指定输出文件的位置和名称。结果将生成以下输出：
- en: '![Figure 7.6 – AVML usage'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.6 – AVML 使用示例'
- en: '](img/Figure_7.6_B17056.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.6_B17056.jpg)'
- en: Figure 7.6 – AVML usage
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6 – AVML 使用示例
- en: Note that AVML does not require the kernel module to be built. Once this command
    completes, you will get a memory dump in LiME format, ready for analysis. However,
    note that Volatility does not have prebuilt profiles for Linux-based systems.
    With this in mind, we should also discuss creating a profile for Volatility.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，AVML不要求构建内核模块。命令完成后，你将获得一个LiME格式的内存转储，准备进行分析。然而，注意Volatility没有为基于Linux的系统提供预构建的配置文件。考虑到这一点，我们还应该讨论如何为Volatility创建一个配置文件。
- en: Creating a Volatility profile
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Volatility配置文件
- en: 'To analyze Linux memory dumps, you need to create a Volatility profile that
    corresponds to the target host configurations. Let''s consider this with an example.
    First, you need to install the `zip` and `dwarfdump` packages, as shown in the
    following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要分析Linux内存转储，你需要创建一个与目标主机配置相对应的Volatility配置文件。我们通过一个例子来考虑这个问题。首先，你需要安装`zip`和`dwarfdump`包，如下图所示：
- en: '![Figure 7.7 – dwarfdump and zip installation'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.7 – dwarfdump 和 zip 安装'
- en: '](img/Figure_7.7_B17056.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.7_B17056.jpg)'
- en: Figure 7.7 – dwarfdump and zip installation
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.7 – dwarfdump 和 zip 安装
- en: 'Next, we need to download Volatility. To do this, we will use the `git clone`
    command, which allows us to clone repositories from GitHub. If you do not have
    `git`, it must be installed using `apt`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要下载Volatility。为此，我们将使用`git clone`命令，它允许我们从GitHub克隆仓库。如果你没有`git`，需要使用`apt`安装它：
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After that, you should go to the `volatility/tools/linux` directory and run
    the `make` command:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，你应该进入`volatility/tools/linux`目录并运行`make`命令：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The listed actions will look as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 列出的操作如下所示：
- en: '![Figure 7.8 – Creating the dwarf module'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.8 – 创建dwarf模块'
- en: '](img/Figure_7.8_B17056.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.8_B17056.jpg)'
- en: Figure 7.8 – Creating the dwarf module
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.8 – 创建dwarf模块
- en: As a result, you will get a `module.dwarf` file.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，你将得到一个`module.dwarf`文件。
- en: Important Note
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Depending on the distribution you are working with, executing `make` may cause
    a variety of errors, ranging from dependency problems to license issues. Unfortunately,
    there is no one-size-fits-all recipe for solving all problems, but searching the
    web for solutions to individual `make` errors may help you.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你所使用的发行版，执行`make`可能会导致各种错误，从依赖问题到许可证问题。遗憾的是，没有一种通用的解决方案可以解决所有问题，但在网上查找有关`make`错误的解决方案可能会有所帮助。
- en: 'The resulting `dwarf` module must be merged into an archive with `System-map`
    of the correct version. This can be done using the following command:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的`dwarf`模块必须与正确版本的`System-map`合并到一个归档中。可以使用以下命令完成此操作：
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s understand what is going on here:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们理解一下这里发生了什么：
- en: '`lsb_release -i -s` outputs the name of the current distribution.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lsb_release -i -s`命令输出当前发行版的名称。'
- en: '`uname -r` will show the kernel version.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uname -r`将显示内核版本。'
- en: This will name your archive `<distribution>_<kernel>.zip`, but you can name
    it as you wish.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把你的归档命名为`<distribution>_<kernel>.zip`，但你可以按需命名。
- en: 'The output of this command may look like this:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的输出可能如下所示：
- en: '![Figure 7.9 – Creating a Volatility profile'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.9 – 创建Volatility配置文件'
- en: '](img/Figure_7.9_B17056.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.9_B17056.jpg)'
- en: Figure 7.9 – Creating a Volatility profile
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.9 – 创建Volatility配置文件
- en: 'As you can see, we ended up with the `Ubuntu_4.15.0-117-generic.zip` archive,
    which is the Volatility profile for this host. You can place this file in the
    profiles folder and pass the path to this Volatility folder as the `--plugins`
    option, as shown in the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们最终得到了`Ubuntu_4.15.0-117-generic.zip`归档文件，这是该主机的Volatility配置文件。你可以将这个文件放入配置文件夹，并将该路径作为`--plugins`选项传递给Volatility文件夹，如下图所示：
- en: '![Figure 7.10 – Using a custom Volatility profile'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.10 – 使用自定义的Volatility配置文件'
- en: '](img/Figure_7.10_B17056.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.10_B17056.jpg)'
- en: Figure 7.10 – Using a custom Volatility profile
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.10 – 使用自定义Volatility配置文件
- en: 'As you have probably already noticed, the process of collecting Linux memory
    is not straightforward and requires a lot of different actions. However, in practice,
    you will often encounter such systems installed in virtual machines. In these
    cases, you will just need to create a snapshot of the virtual machine and simply
    work with the existing `.vmem` file. However, this will not save you from creating
    a Volatility profile. On the other hand, if you need to investigate a fairly popular
    distribution, you can always try to find ready-made profiles on the web. You can
    start with the official Volatility Foundation repository: [https://github.com/volatilityfoundation/profiles/tree/master/Linux](https://github.com/volatilityfoundation/profiles/tree/master/Linux).'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如你可能已经注意到的，收集Linux内存的过程并不简单，需要进行许多不同的操作。然而，在实践中，你经常会遇到安装在虚拟机中的系统。在这种情况下，你只需要创建虚拟机的快照，并简单地处理现有的`.vmem`文件。然而，这并不能让你免于创建Volatility配置文件。另一方面，如果你需要调查一个相当流行的发行版，你可以始终尝试在网上找到现成的配置文件。你可以从官方的Volatility
    Foundation仓库开始：[https://github.com/volatilityfoundation/profiles/tree/master/Linux](https://github.com/volatilityfoundation/profiles/tree/master/Linux)。
- en: Among other things, there are also tools you can use to automate the previous
    steps. For instance, Linux Memory Capturer ([https://github.com/cpuu/lmc](https://github.com/cpuu/lmc))
    is a fork of Linux Memory Grabber, which was developed by Hal Pomeranz. This tool
    allows you to automate the process of creating Linux memory dumps and Volatility
    profiles. All you need to do is install and run the tool.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 除了其他内容外，还有一些工具可以帮助你自动化之前的步骤。例如，Linux Memory Capturer（[https://github.com/cpuu/lmc](https://github.com/cpuu/lmc)）是Linux
    Memory Grabber的一个分支，后者由Hal Pomeranz开发。这个工具允许你自动化创建Linux内存转储和Volatility配置文件的过程。你只需要安装并运行该工具。
- en: As this tool uses LiME, you will be asked to create a kernel module where both
    the module itself and the memory dump it generates will be stored on the host.
    You will then be prompted to create a profile for Volatility.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此工具使用LiME，你将被要求创建一个内核模块，其中包括模块本身和它生成的内存转储文件，二者都会保存在主机上。然后，你将被提示为Volatility创建配置文件。
- en: 'The output is a folder like this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 输出是一个类似这样的文件夹：
- en: '![Figure 7.11 – lmc output'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.11 – lmc输出'
- en: '](img/Figure_7.11_B17056.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.11_B17056.jpg)'
- en: Figure 7.11 – lmc output
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.11 – lmc输出
- en: 'Here, you will find the following:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你会找到以下内容：
- en: '`hostname-YYYYY-MM-DD_hh.mm.ss-memory.lime`: The memory saved in LiME format'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hostname-YYYYY-MM-DD_hh.mm.ss-memory.lime`：以LiME格式保存的内存'
- en: '`hostname-YYYYY-MM-DD_hh.mm.ss-profile.zip`: The Volatility profile'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hostname-YYYYY-MM-DD_hh.mm.ss-profile.zip`：Volatility配置文件'
- en: '`hostname-YYYY-MM-DD_hh.mm.ss-bash`: A copy of `/bin/bash`'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hostname-YYYY-MM-DD_hh.mm.ss-bash`：`/bin/bash`的副本'
- en: '`volatilityrc`: The prototype Volatility config'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`volatilityrc`：Volatility配置文件的原型'
- en: The generated kernel module can be found in /`usr/src/lime-forensics`. You can
    then use the generated module to create a memory dump on the target host and the
    Volatility profile to analyze it further.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的内核模块可以在/`usr/src/lime-forensics`找到。你可以使用生成的模块在目标主机上创建内存转储，并使用Volatility配置文件进一步分析。
- en: Looks good, right? However, at the moment, the tool uses Python 2.7, which means
    you can only use it in a limited number of cases. Also, using tools such as this
    does not take away from the `make` issues described previously. So, before using
    such tools, it is best to test them in a virtual environment with a configuration
    similar to that of the target machine.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来不错吧？然而，目前，该工具使用的是Python 2.7，这意味着你只能在有限的情况下使用它。此外，使用此类工具并不会解决之前提到的`make`问题。因此，在使用这些工具之前，最好在与目标机器配置相似的虚拟环境中进行测试。
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: Creating memory dumps of Linux-based systems is a tedious process. You do not
    have a huge range of tools that do everything you need at the click of a button.
    However, there are fairly efficient solutions that, when used correctly, will
    help you get everything you need.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 创建基于Linux的系统内存转储是一个繁琐的过程。你没有一款可以一键完成所有需求的工具。然而，存在一些相当高效的解决方案，正确使用时，它们能帮助你获取所需的一切。
- en: Different tools may use different methods to access memory. The most common
    method is to load a kernel module; however, this method requires a lot of preparation
    as the module must be built on a system with a distribution and kernel version
    similar to the target host. The same conditions are needed to create Volatility
    profiles, without which further analysis of the dumps would be challenging.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的工具可能使用不同的方法来访问内存。最常见的方法是加载内核模块；然而，这种方法需要大量的准备工作，因为该模块必须在与目标主机相似的发行版和内核版本的系统上构建。创建
    Volatility 配置文件也需要相同的条件，否则进一步分析转储将变得困难。
- en: Several scripting solutions can automate the process of creating memory dumps
    and Volatility profiles, but such solutions will often work with a limited number
    of distributions, so it is better to test them in conditions similar to the real
    ones before using them.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种脚本解决方案可以自动化创建内存转储和 Volatility 配置文件的过程，但这些解决方案通常只适用于有限数量的发行版，因此最好在类似于真实环境的条件下测试它们，然后再使用。
- en: In this chapter, we reviewed the tools that allow you to create memory dumps
    of Linux-based systems. Now, it is time to talk about memory dumps analysis. This
    is what we will do in the next chapter.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了允许你创建基于 Linux 系统的内存转储的工具。现在，到了讨论内存转储分析的时刻。这就是我们将在下一章中要做的。
