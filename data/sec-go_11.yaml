- en: Host Discovery and Enumeration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主机发现与枚举
- en: Host discovery is the process of looking for hosts on a network. This is useful
    if you gained access to a machine on a private network, and you want to see which
    other machines are on the network and start to gather a picture of what the network
    looks like. You can also treat the entire internet as the network and look for
    certain types of hosts or just look for any hosts at all. Ping sweeps and port
    scanning are common techniques of identifying hosts. A common tool used for this
    purpose is nmap. In this chapter, we will cover basic port scanning with a TCP
    connect scan and banner grabbing, which are two of the most common use cases for
    nmap. We will also cover raw socket connections that can be used to manually interact
    and explore a server's ports.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 主机发现是查找网络上主机的过程。如果你已经访问了一个私有网络中的机器，并且想查看该网络上还有哪些机器，进而开始收集网络的概况，这个过程就很有用。你也可以将整个互联网视作网络，寻找某些类型的主机，或者只查找任何主机。Ping扫描和端口扫描是识别主机的常见技术。nmap是用于此目的的常用工具。在本章中，我们将介绍TCP连接扫描和横幅抓取的基本端口扫描，这两者是nmap的最常见用例之一。我们还将讨论可以用来手动交互并探索服务器端口的原始套接字连接。
- en: Enumeration is a similar idea, but refers to actively examining a specific machine
    to determine as much information as you can. This includes scanning a server's
    ports to see which one is open, grabbing banners to inspect services, making calls
    to various services to get version numbers and generally search for attack vectors.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举是一个类似的概念，但它指的是主动检查特定机器，尽可能多地获取信息。这包括扫描服务器的端口以查看哪些端口开放，抓取横幅以检查服务，调用各种服务获取版本号，并通常搜索攻击向量。
- en: Host discovery and enumeration are critical steps to an effective penetration
    test because you cannot exploit a machine if you don't even know it exists. For
    example, if an attacker only knows how to find hosts using the `ping` command,
    then you can easily hide all of your hosts from the attacker by simply ignoring
    ping requests.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 主机发现与枚举是有效渗透测试中的关键步骤，因为如果你甚至不知道某台机器存在，你就无法对其进行利用。例如，如果攻击者只知道如何使用`ping`命令来查找主机，那么你只需要忽略ping请求，就能轻松将所有主机隐藏起来，防止攻击者发现。
- en: Host discovery and enumeration require active connections to a machine so that
    you will leave logs, possibly trigger alarms, and otherwise, get noticed. There
    are some ways to be sneaky, such as performing TCP SYN-only scans so that a complete
    TCP connection is never made, or using a proxy when connecting, which will not
    hide your presence, but will make it appear as if you are connecting from somewhere
    else. Using a proxy to hide your IP can be useful if the IP gets blocked, because
    you can simply switch to a new proxy.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 主机发现与枚举需要与机器建立主动连接，这样会留下日志，可能触发警报，或者让你被注意到。有一些方法可以做到偷偷摸摸，比如只进行TCP SYN扫描，避免建立完整的TCP连接，或在连接时使用代理，虽然这样并不能完全隐藏你的存在，但会让你看起来像是从别的地方连接的。如果IP被封锁，使用代理隐藏你的IP会很有用，因为你可以轻松切换到新的代理。
- en: Fuzzing is also covered in this chapter, although it is only touched on very
    briefly. Fuzzing warrants its own chapter and, in fact, whole books have been
    written about the topic. Fuzzing is more useful when reverse engineering or searching
    for vulnerabilities, but can be useful for getting information about a service.
    For example, a service may return no response, giving you no clues about its purpose,
    but if you fuzz it with bad data and it returns an error, you may learn what kind
    of input it is expecting.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还会简要介绍模糊测试，虽然只是触及了这个话题。模糊测试本身值得一章的内容，实际上，已经有整本书专门讨论这个主题。模糊测试在逆向工程或寻找漏洞时更为有用，但也可以用于获取有关服务的信息。例如，某个服务可能不会返回任何响应，这样你就无法了解它的用途，但如果你用错误数据进行模糊测试，并且它返回了错误信息，你可能会了解到它期望什么类型的输入。
- en: 'In this chapter, we will specifically cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将专门讨论以下主题：
- en: TCP and UDP sockets
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TCP与UDP套接字
- en: Port scanning
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口扫描
- en: Banner grabbing
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 横幅抓取
- en: TCP proxies
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TCP代理
- en: Finding named hosts on a network
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在网络上查找命名主机
- en: Fuzzing network services
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络服务模糊测试
- en: TCP and UDP sockets
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TCP与UDP套接字
- en: Sockets are the building blocks of networking. Servers listen and clients dial
    using sockets to bind together and share information. The **Internet Protocol**
    (**IP**) layer specifies the address of a machine, but the **Transmission Control
    Protocol** (**TCP**) or the **User Datagram Protocol** (**UDP**) specify which
    port on the machine should be used.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 套接字是网络的构建块。服务器通过监听，客户端通过拨号来使用套接字绑定在一起并共享信息。**互联网协议**（**IP**）层指定了机器的地址，但**传输控制协议**（**TCP**）或**用户数据报协议**（**UDP**）指定了应使用机器上的哪个端口。
- en: The main difference between the two is the connection state. TCP keeps the connection
    alive and verifies that messages are received. UDP just sends a message off without
    receiving an acknowledgement from the remote host.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 两者之间的主要区别在于连接状态。TCP 保持连接并验证消息是否被接收，而 UDP 仅发送消息，而不接收来自远程主机的确认。
- en: Creating a server
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建服务器
- en: 'Here is an example server. The `tcp` argument for `net.Listen()` can be changed
    to `udp` if you want to change protocol:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例服务器。如果你想更改协议，可以将 `net.Listen()` 中的 `tcp` 参数改为 `udp`：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating a client
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建客户端
- en: 'This example creates a simple network client that will work with the server
    from the previous example. This example uses TCP but, like `net.Listen()`, you
    can simply swap `tcp` for `udp` in `net.Dial()` if you want to switch protocols:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例创建了一个简单的网络客户端，它将与前一个示例中的服务器一起工作。这个示例使用 TCP，但像 `net.Listen()` 一样，如果你想切换协议，只需在
    `net.Dial()` 中将 `tcp` 换成 `udp` 即可：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Port scanning
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 端口扫描
- en: After finding a host on the network, perhaps after doing a ping sweep or monitoring
    the network traffic, you typically want to scan the ports and see which ports
    are open and accepting connections. You can learn a lot about a machine just by
    seeing what ports are open. You might be able to determine whether it is Windows
    or Linux or whether it is hosting an email server, a web server, a database server,
    and more.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络上找到主机后，可能是通过执行 ping 扫描或监控网络流量，你通常会想要扫描端口，查看哪些端口是开放并接受连接的。通过查看哪些端口开放，你可以学到很多关于机器的信息。你可能能判断它是
    Windows 还是 Linux，或者它是否托管着邮件服务器、Web 服务器、数据库服务器等。
- en: There are many types of port scans, but this example demonstrates the most basic
    and straightforward port scan example, which is a TCP connect scan. It connects
    like any typical client and sees whether the server accepts the request. It does
    not send or receive any data and immediately disconnects, logging if it was successful.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 端口扫描有很多种类型，但这个示例演示了最基础和直接的端口扫描示例，这是一个 TCP 连接扫描。它像典型的客户端一样连接，看看服务器是否接受请求。它不会发送或接收任何数据，并在成功时立即断开连接，记录是否成功。
- en: The following example scans the localhost machine only and limits the ports
    checked to the reserved ports 0-1024\. Database servers, such as MySQL, often
    listen on higher number ports such as `3306`, so remove you will want to adjust
    the port range or use a predefined list of common ports.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例只扫描本地主机，并将检查的端口限制在保留端口 0-1024 范围内。数据库服务器，如 MySQL，通常监听较高的端口，如 `3306`，因此你可能需要调整端口范围或使用预定义的常见端口列表。
- en: 'Each TCP connect request is done in a separate goroutine, so they all will
    run concurrently and it finishes very quickly. The `net.DialTimeout()` function
    is used so that we can set the maximum duration of time we are willing to wait:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 TCP 连接请求都会在单独的 goroutine 中执行，因此它们将并发运行，并且非常快速地完成。`net.DialTimeout()` 函数被用来设置我们愿意等待的最大时间：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Grabbing a banner from a service
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从服务中抓取横幅
- en: After identifying the ports that are open, you can try to read from the connection
    and see whether the service provides a banner or an initial message.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 确定了开放的端口后，你可以尝试从连接中读取，看看服务是否提供了一个横幅或初始消息。
- en: 'The following example works like the previous, but instead of just connecting
    and disconnecting, it will connect and try to read an initial message from the
    server. If the server provides any data, it is printed, but if the server does
    not send any data, nothing is printed:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例与之前类似，但与仅连接和断开连接不同，它将连接并尝试从服务器读取初始消息。如果服务器提供任何数据，它会被打印出来；但如果服务器没有发送任何数据，则什么也不会显示：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Creating a TCP proxy
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 TCP 代理
- en: Much like the HTTP proxy in [Chapter 9](f15910a1-239e-49a5-b4d9-3881a524bfa9.xhtml),
    *Web Applications*, a TCP level proxy can be useful for debugging, logging, analyzing
    traffic, and privacy. When doing port scans, host discovery, and enumeration,
    a proxy can be useful to hide your location and source IP address. You may want
    to hide where you are coming from, disguise who you are, or just use a throwaway
    IP in case you get blacklisted for performing the requests.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在[第9章](f15910a1-239e-49a5-b4d9-3881a524bfa9.xhtml)中的HTTP代理一样，*Web应用程序*，TCP级代理也可以用于调试、日志记录、流量分析和隐私保护。在进行端口扫描、主机发现和枚举时，代理可以帮助隐藏你的位置信息和源IP地址。你可能想隐藏你的来源位置，伪装身份，或者在执行请求时使用一个临时IP，以防你因被列入黑名单而受阻。
- en: The following example will listen in on a local port, forward a request to a
    remote host, and then send the response of the remote server back to the client.
    It will also log any requests.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下例子将监听本地端口，将请求转发到远程主机，然后将远程服务器的响应返回给客户端。它还会记录所有请求。
- en: 'You can test out this proxy by running the server in the previous section and
    then setting up the proxy to forward to that server. When the echoing server and
    the proxy server are running, use the TCP client to connect to the proxy server:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行前一节中的服务器，并设置代理转发到该服务器，来测试这个代理。当回显服务器和代理服务器运行时，使用TCP客户端连接到代理服务器：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Finding named hosts on a network
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在网络上查找命名的主机
- en: If you have just gained access to a network, one of the first things you can
    do is to get an idea of what hosts are on the network. You can scan all IP addresses
    on a subnet and then do a DNS lookup to see if you can find any named hosts. Hostnames
    can have descriptive or informative names that give clues as to what a server
    may be running.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你刚刚获得对一个网络的访问权限，首先可以做的事情之一就是了解网络上有哪些主机。你可以扫描子网上的所有IP地址，然后进行DNS查询，看看能否找到任何命名的主机。主机名可以具有描述性或信息性名称，从中可以得知服务器可能运行的服务。
- en: 'The pure Go resolver is default and can only block a goroutine instead of a
    system thread, making it a little more efficient. You can explicitly set the DNS
    resolver with an environment variable:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，纯Go解析器只能阻塞一个goroutine，而不是系统线程，从而提高了一些效率。你可以通过设置环境变量显式指定DNS解析器：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This example looks for every possible host on a subnet and tries to resolve
    a hostname for each IP:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子查找子网中的所有可能主机，并尝试为每个IP解析主机名：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Fuzzing a network service
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对网络服务进行模糊测试
- en: Fuzzing is when you send intentionally malformed, excessive, or random data
    to an application in an attempt to make it misbehave, crash, or reveal sensitive
    information. You can identify buffer overflow vulnerabilities, which can result
    in remote code execution. If you cause an application to crash or stop responding
    after you send it data of a certain size, it may be due to a buffer overflow.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 模糊测试是向应用程序发送故意构造的错误格式、过多或随机的数据，试图使其行为异常、崩溃或泄露敏感信息。你可以通过模糊测试识别缓冲区溢出漏洞，这可能导致远程代码执行。如果你发送特定大小的数据后导致应用程序崩溃或停止响应，可能是由于缓冲区溢出引起的。
- en: Sometimes, you will just cause a denial of service by causing a service to use
    too much memory or tie up all the processing power. Regular expressions are notoriously
    slow and can be abused in the URL routing mechanisms of web applications to consume
    all the CPU with few requests.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能仅仅是通过让服务使用过多内存或占用所有处理能力，导致服务拒绝。正则表达式以其极慢而著称，且可能在Web应用程序的URL路由机制中被滥用，消耗大量CPU，尽管请求数很少。
- en: Nonrandom, but malformed, data can be just as dangerous, if not more so. A properly
    malformed video file can cause VLC to crash and expose code execution. A properly
    malformed packet, with 1 byte altered, can lead to sensitive data being exposed,
    as in the Heartbleed OpenSSL vulnerability.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 非随机但格式错误的数据可能同样危险，甚至更为严重。一个适当格式错误的视频文件可能导致VLC崩溃并暴露代码执行漏洞。一个适当格式错误的数据包，改变1个字节，就可能导致敏感数据泄露，就像Heartbleed
    OpenSSL漏洞一样。
- en: The following example will demonstrate a very basic TCP fuzzer. It sends random
    bytes of increasing length to a server. It starts with 1 byte and grows exponentially
    by a power of 2\. First, it sends 1 byte, then 2, 4, 8, 16, continuing until it
    returns an error or reaches the maximum configured limit.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下例子将演示一个非常基础的TCP模糊测试器。它向服务器发送长度逐渐增加的随机字节。它从1个字节开始，然后以2的幂指数增长。首先发送1个字节，然后是2、4、8、16，继续发送，直到出现错误或达到最大配置限制。
- en: 'Tweak `maxFuzzBytes` to set the maximum size of data you want to send to the
    service. Be aware that it launches all the threads at once, so be careful about
    the load on the server. Look for anomalies in the responses or for a total crash
    from the server:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 调整`maxFuzzBytes`以设置发送到服务的最大数据大小。注意，它会同时启动所有线程，所以要小心服务器负载。查看响应中的异常或服务器的完全崩溃：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Summary
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Having reading this chapter, you should now understand the basic concepts of
    host discovery and enumeration. You should be able to explain them at a high level
    and provide a basic example of each concept.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，你应该已经理解了主机发现和枚举的基本概念。你应该能够从高层次解释这些概念，并提供每个概念的基本示例。
- en: First, we discussed raw TCP sockets with an example of a simple server and client.
    These examples aren't incredibly useful by themselves, but they are the template
    for building tools that perform custom interactions with services. This will be
    helpful when trying to fingerprint an unidentified service.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们讨论了原始的 TCP 套接字，并通过一个简单的服务器和客户端的示例来说明。虽然这些示例本身并不是特别有用，但它们是构建与服务进行自定义交互的工具的模板。这在尝试指纹识别一个未识别的服务时会非常有帮助。
- en: You should now know how to run a simple port scan, and why you might want to
    run a port scan. You should understand how to use a TCP proxy and what benefits
    it offers. You should understand how banner grabbing works and why it is a useful
    method for gathering information.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该知道如何运行一个简单的端口扫描，并理解为什么你可能需要进行端口扫描。你应该理解如何使用 TCP 代理及其所带来的好处。你应该理解横幅抓取的原理，并知道为什么它是收集信息的一个有用方法。
- en: There are numerous other forms of enumeration. With web applications, you can
    enumerate usernames, user ids, emails, and more. For example, if a website used
    the URL format [www.example.com/user_profile/1234](http://www.example.com/user_profile/1234) you
    can potentially start with the number 1, and increment by 1, crawling through
    every single user profile available on the site. Other forms include SNMP, DNS,
    LDAP, and SMB.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他形式的枚举。在 Web 应用程序中，你可以枚举用户名、用户 ID、电子邮件等。例如，如果一个网站使用 URL 格式 [www.example.com/user_profile/1234](http://www.example.com/user_profile/1234)，你可以从数字
    1 开始，并每次递增 1，遍历网站上所有的用户个人资料。其他形式的枚举包括 SNMP、DNS、LDAP 和 SMB。
- en: What other forms of enumeration can you think of? What kind of enumeration can
    you think of if you were already on a server with a low privilege user? What kind
    of information would you want to gather about a server once you had a shell?
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你能想到其他什么形式的枚举？如果你已经是服务器上一个低权限用户，你能想到什么样的枚举？一旦你有了一个 shell，你想收集关于服务器的哪些信息？
- en: You can gather a lot of information once you are on a server: username and groups,
    hostnames, network device info, mounted filesystems, what services are running,
    iptables settings, cron jobs, startup services, and more. Refer to [Chapter 13](470c944c-e4ca-4a39-95e4-6c78d831aa27.xhtml),
    *Post Exploitation,* for more information about what to do once you already have
    access to a machine.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你进入服务器，你可以收集大量信息：用户名和用户组、主机名、网络设备信息、挂载的文件系统、正在运行的服务、iptables 设置、定时任务、启动服务等。有关获取机器访问权限后的更多信息，请参考[第13章](470c944c-e4ca-4a39-95e4-6c78d831aa27.xhtml)，*后期利用*。
- en: In the next chapter, we will look at social engineering and how to gather intel
    from the web via JSON REST APIs, send phishing emails, and generate QR codes.
    We will also look at multiple examples of honeypots including a TCP honeypot and
    two methods of HTTP honeypots.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将讨论社会工程学，以及如何通过 JSON REST API 从网络收集情报、发送钓鱼邮件并生成二维码。我们还将介绍多个蜜罐的示例，包括 TCP
    蜜罐和两种 HTTP 蜜罐的方法。
