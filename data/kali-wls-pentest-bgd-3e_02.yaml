- en: Chapter 2. WLAN and Its Inherent Insecurities
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章 WLAN 及其固有的不安全性
- en: '|   | *"The loftier the building, the deeper the foundation must be laid."*
    |   |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|   | *"建筑越高，基础必须越深。"* |   |'
- en: '|   | --*Thomas Kempis* |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|   | --*托马斯·阿·坎皮斯* |'
- en: '*Nothing great can be built on a weak foundation, and in our context, nothing
    secure can be built on something that is inherently insecure.*'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*没有伟大的东西可以建立在脆弱的基础上，在我们的背景下，没有安全的东西可以建立在本质上不安全的基础上。*'
- en: '*WLANs, by design, have certain insecurities that are relatively easy to exploit,
    for example, by packet spoofing, packet injection, and sniffing (this could even
    happen from far away). We will explore these flaws in this chapter.*'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*WLAN 设计上存在某些相对容易被利用的不安全性，例如数据包欺骗、数据包注入和嗅探（甚至可以远程进行）。我们将在本章探讨这些缺陷。*'
- en: 'In this chapter, we shall look at the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下内容：
- en: Revisiting WLAN frames
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重访 WLAN 帧
- en: Different frame types and subtypes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的帧类型和子类型
- en: Using Wireshark to sniff management, control, and data frames
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Wireshark 来嗅探管理、控制和数据帧
- en: Sniffing data packets for a given wireless network
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对给定无线网络进行数据包嗅探
- en: Injecting packets into a given wireless network
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向给定无线网络注入数据包
- en: Let's get started!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Revisiting WLAN frames
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重访 WLAN 帧
- en: As this book deals with the security aspects of wireless, we will assume that
    you already have a basic understanding of the protocol and the packet headers.
    If not, or if it's been some time since you worked on wireless, this would be
    a good time to revisit this topic again.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书涉及无线安全方面的内容，我们假定您已经对协议和数据包头部有基本了解。如果没有，或者如果您已经有一段时间没有处理无线网络，那么现在是重新学习这个主题的好时机。
- en: 'Let''s now quickly review some basic concepts of WLANs that most of you may
    already be aware of. In WLANs, communication happens over frames. A frame would
    have the following header structure:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们快速回顾一些大家可能已经了解的 WLAN 基本概念。在 WLAN 中，通信是通过帧来进行的。一个帧会有以下头部结构：
- en: '![Revisiting WLAN frames](graphics/B09903_02_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![重访 WLAN 帧](graphics/B09903_02_01.jpg)'
- en: 'The `Frame Control` field itself has a more complex structure:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`Frame Control`字段本身具有更复杂的结构：'
- en: '![Revisiting WLAN frames](graphics/B09903_02_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![重访 WLAN 帧](graphics/B09903_02_02.jpg)'
- en: 'The `Type` field defines three types of WLAN frame:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`Type`字段定义了三种 WLAN 帧类型：'
- en: '**Management frames**: Management frames are responsible for maintaining communication
    between access points and wireless clients. Management frames can have the following
    subtypes:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理帧**：管理帧负责维护接入点和无线客户端之间的通信。管理帧可以有以下子类型：'
- en: Authentication
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证
- en: Deauthentication
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注销认证
- en: Association request
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关联请求
- en: Association response
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关联响应
- en: Reassociation request
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新关联请求
- en: Reassociation response
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新关联响应
- en: Disassociation
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 断开连接
- en: Beacon
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信标
- en: Probe request
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探测请求
- en: Probe response
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探测响应
- en: '**Control frames**: Control frames are responsible for ensuring a proper exchange
    of data between access points and wireless clients. Control frames can have the
    following subtypes:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制帧**：控制帧负责确保接入点和无线客户端之间数据的正确交换。控制帧可以具有以下子类型：'
- en: '**Request to Send** (**RTS**)'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Request to Send** (**RTS**)'
- en: '**Clear to Send** (**CTS**)'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Clear to Send** (**CTS**)'
- en: '**Acknowledgement** (**ACK**)'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确认** (**ACK**)'
- en: '**Data frames**: Data frames carry the actual data that is sent on the wireless
    network. There are no subtypes for data frames.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据帧**：数据帧携带实际在无线网络上传输的数据。数据帧没有子类型。'
- en: We will discuss the security implications of each of these frames when we discuss
    different attacks in later chapters.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们讨论不同攻击时，我们将讨论每个帧的安全影响。
- en: We will now look at how to sniff these frames over a wireless network using
    Wireshark. There are other tools—such as Airodump-NG, Tcpdump, or Tshark—that
    you can use for sniffing as well. We will, however, mostly use Wireshark in this
    book, but we encourage you to explore other tools as well. The first step to do
    this is to create a monitor mode interface. This will create an interface for
    our adapter, which allows us to read all wireless frames in the air, regardless
    of whether they are destined for us or not. In the wired world, this is popularly
    called **promiscuous mode**.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看看如何使用 Wireshark 在无线网络上嗅探这些帧。还有其他工具——如 Airodump-NG、Tcpdump 或 Tshark，你也可以用来进行嗅探。在本书中，我们主要使用
    Wireshark，但我们鼓励你也探索其他工具。首先要做的是创建一个监视模式接口。这将为我们的适配器创建一个接口，允许我们读取空中的所有无线帧，无论它们是否是为我们而来的。在有线世界中，这通常称为**混杂模式**。
- en: Time for action – creating a monitor mode interface
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始操作 – 创建监控模式接口
- en: Let's now set our wireless adapter to monitor mode.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将无线适配器设置为监控模式。
- en: 'Follow these instructions to get started:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤开始操作：
- en: Boot Kali with your adapter connected. Once you are within the console, enter
    `iwconfig` to confirm that your card has been detected and the driver has been
    loaded properly:![Time for action – creating a monitor mode interface](graphics/B09903_02_03.jpg)
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Kali并连接适配器。进入控制台后，输入`iwconfig`命令确认网卡已经被检测到并且驱动程序已正确加载：![开始操作 – 创建监控模式接口](graphics/B09903_02_03.jpg)
- en: Use the `ifconfig wlan0 up` command to bring the card up (where `wlan0` is your
    adapter). Verify whether the card is up by running `ifconfig wlan0`. You should
    see the word `UP` in the first line of the output as shown in the following screenshot:![Time
    for action – creating a monitor mode interface](graphics/B09903_02_04.jpg)
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ifconfig wlan0 up`命令启用网卡（其中`wlan0`是你的适配器）。通过运行`ifconfig wlan0`命令验证网卡是否已启用。你应该在输出的第一行看到`UP`字样，如下图所示：![开始操作
    – 创建监控模式接口](graphics/B09903_02_04.jpg)
- en: To put our card into monitor mode, we will use the `airmon-ng` utility that
    is available by default on Kali. First run the `airmon-ng` command to verify whether
    it detects the available cards. You should see the `wlan0` or `wlan1` interface
    listed in the output:![Time for action – creating a monitor mode interface](graphics/B09903_02_05.jpg)
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将我们的网卡设置为监控模式，我们将使用Kali系统默认提供的`airmon-ng`工具。首先运行`airmon-ng`命令以验证是否能够检测到可用的网卡。你应该在输出中看到`wlan0`或`wlan1`接口：![开始操作
    – 创建监控模式接口](graphics/B09903_02_05.jpg)
- en: Now enter the `airmon-ng start wlan0` command to create a monitor mode interface
    corresponding to the `wlan0` device. This new monitor mode interface will be named
    `wlan0mon`. (You can verify if it has been created by running `airmon-ng` without
    arguments again):![Time for action – creating a monitor mode interface](graphics/B09903_02_06.jpg)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在输入`airmon-ng start wlan0`命令，为`wlan0`设备创建一个监控模式接口。这个新的监控模式接口将被命名为`wlan0mon`。（你可以通过再次运行`airmon-ng`命令来验证它是否已经创建）：![开始操作
    – 创建监控模式接口](graphics/B09903_02_06.jpg)
- en: Also, running `ifconfig wlan0mon` should now display a new interface called
    `wlan0mon`:![Time for action – creating a monitor mode interface](graphics/B09903_02_07.jpg)
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，运行`ifconfig wlan0mon`命令现在应该显示一个名为`wlan0mon`的新接口：![开始操作 – 创建监控模式接口](graphics/B09903_02_07.jpg)
- en: '*What just happened?*'
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We have successfully created a monitor mode interface called `wlan0mon`. This
    interface will be used to sniff wireless packets off the air. This interface has
    been created for our wireless adapter.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功创建了一个名为`wlan0mon`的监控模式接口。这个接口将用于捕获无线数据包。这个接口是为我们的无线适配器创建的。
- en: Have a go hero – creating multiple monitor mode interfaces
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 挑战一下英雄 – 创建多个监控模式接口
- en: It is possible to create multiple monitor mode interfaces using the same physical
    card. Use the `airmon-ng` utility to see how you can do this.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用相同的物理网卡创建多个监控模式接口。使用`airmon-ng`工具查看如何操作。
- en: Awesome! We have a monitor mode interface just waiting to read some packets
    off the air. So let's get started.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们已经有了一个监控模式接口，等待从空中捕获数据包。那么，让我们开始吧。
- en: In the next exercise, we will use Wireshark to sniff packets off the air using
    the `wlan0mon` monitor mode interface we just created.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个练习中，我们将使用Wireshark通过我们刚刚创建的`wlan0mon`监控模式接口来捕获无线数据包。
- en: Time for action – sniffing wireless packets
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始操作 – 捕获无线数据包
- en: 'Follow the following instructions to begin sniffing packets:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤开始捕获数据包：
- en: Power up the access point `Wireless Lab` that we configured in [Chapter 1](ch01.html
    "Chapter 1. Wireless Lab Setup"), *Wireless Lab Setup*.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动我们在[第1章](ch01.html "第1章. 无线实验室设置")中配置的接入点`Wireless Lab`，*无线实验室设置*。
- en: Start Wireshark by typing `Wireshark &` in the console. Once Wireshark is running,
    navigate to **Capture** | **Options**:![Time for action – sniffing wireless packets](graphics/B09903_02_08.jpg)
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台中输入`Wireshark &`启动Wireshark。一旦Wireshark启动，导航到**Capture** | **Options**：![开始操作
    – 捕获无线数据包](graphics/B09903_02_08.jpg)
- en: Select packet capture from the `wlan0mon` interface by clicking on the **Start**
    button at the bottom right of the interface as shown in the previous screenshot.
    Wireshark will begin the capture, and now you should see packets within the Wireshark
    window.![Time for action – sniffing wireless packets](graphics/B09903_02_09.jpg)
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击界面右下角的**开始**按钮，选择来自 `wlan0mon` 接口的数据包捕获，正如前面截图所示。Wireshark 将开始捕获，现在你应该能在
    Wireshark 窗口中看到数据包。![行动时间 – 嗅探无线数据包](graphics/B09903_02_09.jpg)
- en: These are wireless packets that your wireless adapter is sniffing off the air.
    In order to view any packet, select it in the top window and the entire packet
    will be displayed in the middle window.![Time for action – sniffing wireless packets](graphics/B09903_02_10.jpg)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些是无线数据包，你的无线适配器正在从空中嗅探它们。为了查看任何数据包，在顶部窗口中选择它，整个数据包将在中间窗口显示。![行动时间 – 嗅探无线数据包](graphics/B09903_02_10.jpg)
- en: Click on the triangle in front of **IEEE 802.11 Wireless LAN** management frame
    to expand and view additional information.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击**IEEE 802.11 无线局域网**管理帧前的三角形展开，查看更多信息。
- en: Look at the different header fields in the packet and correlate them with the
    WLAN frame types and subtypes you learned earlier.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 查看数据包中的不同头部字段，并将其与之前学过的 WLAN 帧类型和子类型进行关联。
- en: '*What just happened?*'
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We just sniffed our first set of packets off the air! We launched Wireshark,
    which used the monitor mode interface, `wlan0mon` we created previously. You should
    notice, by looking at Wireshark's footer region, the speed at which the packets
    are being captured and also the number of packets captured till now.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚从空中嗅探到第一组数据包！我们启动了 Wireshark，它使用了我们之前创建的监控模式接口 `wlan0mon`。通过查看 Wireshark
    的底部区域，你应该能看到数据包捕获的速度以及目前已捕获的数据包数量。
- en: Have a go hero – finding different devices
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 挑战时刻 – 查找不同的设备
- en: Wireshark traces can be a bit daunting at times; even for a reasonably populated
    wireless network, you could end up sniffing a few thousand packets. Hence, it
    is important to be able to drill down to those packets that interest us. This
    can be accomplished using filters in Wireshark. Explore how you can use these
    filters to identify unique wireless devices in the traces—both access points and
    wireless clients.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Wireshark 的跟踪信息有时可能让人望而生畏；即使是一个相对繁忙的无线网络，你也可能嗅探到几千个数据包。因此，能够深入分析我们感兴趣的数据包非常重要。通过在
    Wireshark 中使用过滤器可以实现这一点。探索如何使用这些过滤器来识别跟踪中独特的无线设备——包括接入点和无线客户端。
- en: If you are unable to do this, don't worry as this is the next thing we will
    learn.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你无法做到这一步，别担心，因为这是我们接下来要学习的内容。
- en: Time for action – viewing management, control, and data frames
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 查看管理帧、控制帧和数据帧
- en: Now we will learn how to apply filters in Wireshark to look at management, control,
    and data frames.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将学习如何在 Wireshark 中应用过滤器来查看管理帧、控制帧和数据帧。
- en: 'Please follow these instructions step by step:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 请按步骤逐一操作：
- en: To view all the management frames in the packets being captured, enter the filter
    `wlan.fc.type == 0` into the filter window and hit *Enter*. You can stop the packet
    capture if you want to prevent the packets from scrolling down too fast.![Time
    for action – viewing management, control, and data frames](graphics/B09903_02_11.jpg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 若要查看捕获的数据包中的所有管理帧，请在过滤器窗口中输入过滤器 `wlan.fc.type == 0` 并按 *Enter* 键。如果你希望防止数据包滚动得太快，可以停止数据包捕获。![行动时间
    – 查看管理帧、控制帧和数据帧](graphics/B09903_02_11.jpg)
- en: To view control frames, modify the filter expression to read `wlan.fc.type ==
    1`:![Time for action – viewing management, control, and data frames](graphics/B09903_02_12.jpg)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看控制帧，请修改过滤器表达式为 `wlan.fc.type == 1`：![行动时间 – 查看管理帧、控制帧和数据帧](graphics/B09903_02_12.jpg)
- en: To view data frames, modify the filter expression to `wlan.fc.type == 2`:![Time
    for action – viewing management, control, and data frames](graphics/B09903_02_13.jpg)
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看数据帧，请修改过滤器表达式为 `wlan.fc.type == 2`：![行动时间 – 查看管理帧、控制帧和数据帧](graphics/B09903_02_13.jpg)
- en: 'To additionally select a subtype, use the `wlan.fc.subtype` filter. For example,
    to view all the beacon frames among all management frames, use the following filter:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 若要额外选择一个子类型，请使用 `wlan.fc.subtype` 过滤器。例如，要查看所有管理帧中的信标帧，请使用以下过滤器：
- en: '[PRE0]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Time for action – viewing management, control, and data frames](graphics/B09903_02_14.jpg)'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – 查看管理帧、控制帧和数据帧](graphics/B09903_02_14.jpg)'
- en: Alternatively, you can right-click on any of the header fields in the middle
    window and then select **Apply as Filter** | **Selected** to add it as a filter:![Time
    for action – viewing management, control, and data frames](graphics/B09903_02_15.jpg)
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或者，你也可以右键单击中间窗口中的任何头字段，然后选择**应用为过滤器** | **所选内容**，将其添加为过滤器：![行动时刻——查看管理、控制和数据帧](graphics/B09903_02_15.jpg)
- en: This will automatically add the correct filter expression for you in the **Filter**
    field.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将自动在**过滤器**字段中为你添加正确的过滤器表达式。
- en: '*What just happened?*'
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We just learned how to filter packets in Wireshark using various filter expressions.
    This helps us monitor selected packets from devices we are interested in, instead
    of trying to analyze all the packets in the air.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚学习了如何使用各种过滤器表达式在Wireshark中过滤数据包。这有助于我们监控来自我们感兴趣设备的选定数据包，而不是试图分析空中的所有数据包。
- en: Also, we can see that the packet headers of management, control, and data frames
    are in plain text and are not encrypted. Anyone who can sniff the packets can
    read these headers. It is also important to note that it is also possible for
    a hacker to modify any of these packets and retransmit them. As there is no integrity
    or replay attack mitigation in the protocol, this is very easy to do. We will
    look at some of these attacks in later chapters.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们可以看到，管理帧、控制帧和数据帧的包头是明文的，并且没有加密。任何能够嗅探数据包的人都可以读取这些头部。还需要注意的是，黑客也有可能修改这些数据包中的任何内容并重新传输它们。由于协议中没有完整性检查或重放攻击的缓解措施，因此这是非常容易做到的。我们将在后续章节中探讨这些攻击。
- en: Have a go hero – playing with filters
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 英雄，来试试吧——玩转过滤器
- en: You can consult Wireshark's manual to learn more about available filter expressions
    and how to use them. Try playing around with various filter combinations till
    you are confident that you can drill down to any level of detail, even in a very
    large packet trace.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以查阅Wireshark的手册，了解更多可用的过滤器表达式及其使用方法。尝试通过各种过滤器组合进行实验，直到你有信心可以在非常大的数据包追踪中深入到任何细节层级。
- en: In the next exercise, we will look at how to sniff data packets transferred
    between our access point and wireless client.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个练习中，我们将学习如何嗅探在我们的接入点与无线客户端之间传输的数据包。
- en: Time for action – sniffing data packets for our network
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时刻——嗅探我们网络的数据包
- en: In this exercise, we will learn how to sniff data packets for a given wireless
    network. For the sake of simplicity, we will look at packets without any encryption.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，我们将学习如何嗅探给定无线网络的数据包。为了简化起见，我们将观察没有加密的数据包。
- en: 'Follow these instructions to get started:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 按照这些指令开始操作：
- en: Switch on the access point we named `Wireless Lab`. Let it remain configured
    to use no encryption.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们命名为`Wireless Lab`的接入点，并保持其配置为不使用加密。
- en: We will first need to find the channel on which the `Wireless Lab` access point
    is running. To do this, open a terminal and run `airodump-ng --bssid <mac> wlan0mon`,
    where <`mac`> is the MAC address of our access point. Let the program run, and
    shortly you should see your access point shown on the screen along with the channel
    it is running on.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先需要找出`Wireless Lab`接入点所在的频道。为此，打开终端并运行`airodump-ng --bssid <mac> wlan0mon`，其中<`mac`>是我们接入点的MAC地址。让程序运行，不久你应该能看到你的接入点和它运行的频道出现在屏幕上。
- en: We can see from the preceding screenshot that our access point `Wireless Lab`
    is running on channel 11\. Note that this may be different for your access point.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以从上面的截图看到，我们的接入点`Wireless Lab`正在频道11上运行。请注意，这可能与你的接入点不同。
- en: 'In order to sniff data packets going to and from this access point, we need
    to lock our wireless card on the same channel, that is channel 11\. To do this,
    run the `iwconfig wlan0mon channel 11` command and then run `iwconfig wlan0mon`
    to verify it. You should see the `Frequency: 2.462 GHz` value in the output. This
    corresponds to channel 11.'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '为了嗅探进出这个接入点的数据包，我们需要将我们的无线网卡锁定到相同的频道，即频道11。为此，运行命令`iwconfig wlan0mon channel
    11`，然后运行`iwconfig wlan0mon`进行验证。你应该在输出中看到`Frequency: 2.462 GHz`的值。这对应于频道11。'
- en: '![Time for action – sniffing data packets for our network](graphics/B09903_02_16.jpg)'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时刻——嗅探我们网络的数据包](graphics/B09903_02_16.jpg)'
- en: Now fire up Wireshark and start sniffing on the `wlan0mon` interface. After
    Wireshark has started sniffing the packets, apply a filter for the `bssid` of
    our access point as shown in the following screenshot using `wlan.bssid == <mac>`
    in the filter area. Use the appropriate MAC address for your access point.![Time
    for action – sniffing data packets for our network](graphics/B09903_02_17.jpg)
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在启动Wireshark并开始在`wlan0mon`接口上嗅探数据包。在Wireshark开始嗅探数据包后，应用一个过滤器，针对我们的接入点的`bssid`，如以下屏幕截图所示，使用`wlan.bssid
    == <mac>`进行过滤。请使用适合你的接入点的MAC地址。[操作时间 – 嗅探我们网络的数据包](graphics/B09903_02_17.jpg)
- en: In order to see the data packets for our access point, add the following to
    the filter `(wlan.bssid == <mac>) && (wlan.fc.type_subtype == 0x20)`. Open your
    browser on the client laptop and type the URL of the access point in the management
    interface. In my case, as we have seen in [Chapter 1](ch01.html "Chapter 1. Wireless
    Lab Setup"), *Wireless Lab Setup*, it is `http://192.168.0.1`. This will generate
    data packets that Wireshark will capture.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了查看我们接入点的数据包，请将以下内容添加到过滤器中`(wlan.bssid == <mac>) && (wlan.fc.type_subtype ==
    0x20)`。在客户端笔记本上打开浏览器，并在管理界面中输入接入点的URL。根据我们在[第1章](ch01.html "第1章 无线实验室设置")中看到的*无线实验室设置*，它是`http://192.168.0.1`。这将生成Wireshark可以捕获的数据包。
- en: Packet sniffing allows us to analyze unencrypted data packets very easily. This
    is the reason why we need to use encryption in wireless.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据包嗅探使我们能够非常容易地分析未加密的数据包。这就是我们需要在无线网络中使用加密的原因。
- en: '*What just happened?*'
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We have just sniffed data packets over the air with Wireshark using various
    filters. As our access point is not using any encryption, we are able to see all
    the data in plain text. This is a major security issue as anyone within RF range
    of the access point can see all the packets if he uses a sniffer such as Wireshark.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚通过Wireshark使用不同的过滤器嗅探了无线数据包。由于我们的接入点没有启用加密，所以我们能够看到所有的明文数据。这是一个重大的安全问题，因为任何处在接入点射频范围内的人都可以使用像Wireshark这样的嗅探工具看到所有数据包。
- en: Have a go hero – analyzing data packets
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 试试看，英雄 – 分析数据包
- en: Use Wireshark to analyze the data packets further. You will notice that a DHCP
    request is made by the client and, if a DHCP server is available, it responds
    with an address. Then you will find ARP packets and other protocol packets on
    the air. This is a nice and simple way to do passive host discovery on the wireless
    network. It is important to be able to see a packet trace and reconstruct how
    applications on the wireless host are communicating with the rest of the network.
    One of the interesting features Wireshark provides is the ability to follow a
    stream. This allows you to view multiple packets together, that are part of a
    TCP exchange, in the same connection.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Wireshark进一步分析数据包。你会注意到客户端发出了一个DHCP请求，并且如果有DHCP服务器可用，它会响应一个地址。然后你会看到ARP数据包和其他协议数据包。这是一种在无线网络上进行被动主机发现的简单有效方法。能够查看数据包的跟踪并重建无线主机如何与网络上的其他部分通信是非常重要的。Wireshark提供的一个有趣功能是能够跟踪流。这使你可以查看属于同一个TCP交换的多个数据包，集中在同一个连接中。
- en: Also, try logging into [www.gmail.com](http://www.gmail.com) or any other popular
    website and analyze the data traffic generated.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，尝试登录到[www.gmail.com](http://www.gmail.com)或任何其他流行的网站，并分析生成的数据流量。
- en: We will now see a demonstration of how to inject packets into a wireless network.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将演示如何向无线网络中注入数据包。
- en: Time for action – packet injection
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间 – 数据包注入
- en: We will be using the `aireplay-ng` tool, which is available in Kali, for this
    exercise.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 本次练习将使用`aireplay-ng`工具，该工具在Kali中可用。
- en: 'Follow these instructions carefully:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 请仔细遵循以下说明：
- en: In order to do an injection test, first start Wireshark and the filter expression
    `(wlan.bssid == <mac>) && !(wlan.fc.type_subtype == 0x08)`. This will ensure that
    we only see non-beacon packets for our lab network.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了进行注入测试，首先启动Wireshark，并应用过滤表达式`(wlan.bssid == <mac>) && !(wlan.fc.type_subtype
    == 0x08)`。这将确保我们只看到我们实验室网络中的非信标数据包。
- en: Now run the `aireplay-ng -9 -e Wireless Lab -a <mac> wlan0mon` command in a
    terminal.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在终端中运行命令`aireplay-ng -9 -e Wireless Lab -a <mac> wlan0mon`。
- en: Go back to Wireshark and you should see a lot of packets on the screen now.
    Some of these packets have been sent by `aireplay-ng`, which we launched, and
    others are from the access point `Wireless Lab` in response to the injected packets.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到Wireshark，你现在应该在屏幕上看到很多数据包。其中一些数据包是由我们启动的`aireplay-ng`发送的，其他的则是接入点`Wireless
    Lab`响应注入数据包后的数据包。
- en: '*What just happened?*'
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We just successfully injected packets into our test lab network using `aireplay-ng`.
    It is important to note that our card injected these arbitrary packets into the
    network without being actually connected to the access point `Wireless Lab`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚通过`aireplay-ng`成功向测试实验室网络注入了数据包。需要注意的是，我们的卡在没有实际连接到接入点`Wireless Lab`的情况下，向网络注入了这些任意的数据包。
- en: Have a go hero – installing Kali on VirtualBox
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 英雄出击 – 在VirtualBox上安装Kali
- en: We will look at packet injection in greater detail in later chapters; however,
    feel free to explore other options of the `aireplay-ng` tool to inject packets.
    You can verify whether injection succeeded by using Wireshark to monitor the air.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后面的章节中更详细地讨论数据包注入；不过，您可以随时探索`aireplay-ng`工具的其他选项来注入数据包。你可以使用Wireshark来监视无线电频谱，验证注入是否成功。
- en: Important note on WLAN sniffing and injection
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于WLAN嗅探和注入的重要注意事项
- en: WLANs typically operate within three different frequency ranges—2.4 GHz, 3.6
    GHz, and 4.9/5.0 GHz. Not all Wi-Fi cards support all these ranges and associated
    bands. For instance, older Alfa cards only support IEEE 802.11b/g. This would
    mean that these cards cannot operate in 802.11a/n. The key here is to sniff or
    inject packets in a particular band; your Wi-Fi card will need to support it.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: WLAN通常在三个不同的频段内工作——2.4 GHz、3.6 GHz和4.9/5.0 GHz。并非所有Wi-Fi卡都支持所有这些频段及其相关的子频带。例如，旧版的Alfa卡仅支持IEEE
    802.11b/g，这意味着这些卡无法在802.11a/n频段下工作。关键在于要在特定频段中进行嗅探或注入数据包；你的Wi-Fi卡需要支持该频段。
- en: Another interesting aspect of Wi-Fi is that, in each of these bands, there are
    multiple channels. It is important to note that your Wi-Fi card can only be on
    one channel at any given moment. It is not possible to tune into multiple channels
    at the same time. The best analogy I can give you is your car radio. You can tune
    it to only one of the available channels at any given time. If you want to hear
    something else, you will have to change the channel. The same principle applies
    to WLAN sniffing. This brings us to an important conclusion—we cannot sniff all
    channels at the same time; we will need to select the channel that is of interest
    to us. What this means is that, if our access point of interest is on channel
    1, we will need to set our card on channel 1.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Wi-Fi的另一个有趣方面是，在每个频段内都有多个频道。需要注意的是，你的Wi-Fi卡在任何时刻只能在一个频道上。无法同时调谐到多个频道。最好的类比是你的汽车收音机。你一次只能调到一个可用频道。如果你想听不同的频道，你必须换台。WLAN嗅探也遵循相同的原则。这让我们得出一个重要结论——我们不能同时嗅探所有频道；我们需要选择一个感兴趣的频道。这意味着，如果我们的目标接入点在频道1，我们就需要将卡设置到频道1。
- en: Though we have addressed WLAN sniffing in the preceding paragraphs, the same
    applies to injection as well. To inject packets on a specific channel, we will
    need to put the card radio on that channel.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们在前面的段落中已经讨论了WLAN嗅探，但注入的原理也相同。要在特定频道上注入数据包，我们需要将卡的无线电设置到那个频道。
- en: Let's now do some exercises on setting our card to specific channels, channel
    hopping, setting regulatory domains, power levels, and many more.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来做一些练习，设置我们的卡到特定频道，进行频道跳跃，设置监管域、功率级别等。
- en: Time for action – experimenting with your adapter
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始行动 – 实验你的适配器
- en: 'Follow these instructions carefully:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 请仔细按照以下步骤操作：
- en: To set the card on a particular channel, we use the `iwconfig wlan0mon channel
    X` commands:![Time for action – experimenting with your adapter](graphics/B09903_02_18.jpg)
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将卡设置到特定频道，我们使用`iwconfig wlan0mon channel X`命令：![开始行动 – 实验你的适配器](graphics/B09903_02_18.jpg)
- en: The `iwconfig` series of commands does not have a channel hopping mode. One
    could write a simple script over it to make it do so. An easier way is to use
    `airodump-ng` with options to either hop channels arbitrarily, use only a subset,
    or use only selected bands. All these options are illustrated in the following
    screenshot when we run `airodump-ng --help`:![Time for action – experimenting
    with your adapter](graphics/B09903_02_19.jpg)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`iwconfig`系列命令没有频道跳跃模式。可以编写一个简单的脚本来实现此功能。更简单的方法是使用`airodump-ng`，通过选项来任意跳跃频道、仅使用部分频道或仅使用特定频段。所有这些选项可以通过运行`airodump-ng
    --help`命令时的截图来查看：![开始行动 – 实验你的适配器](graphics/B09903_02_19.jpg)'
- en: '*What just happened?*'
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We understood that both wireless sniffing and packet injection depend on the
    hardware support available. This means that we can only operate on bands and channels
    allowed by our card. Also, the wireless card radio can only be on one channel
    at a time. Furthermore, this means that we can only sniff or inject in one channel
    at a time.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们理解到，无线嗅探和数据包注入都依赖于硬件的支持。这意味着我们只能操作网卡允许的频段和频道。此外，无线网卡的射频一次只能工作在一个频道上。因此，这意味着我们一次只能在一个频道上进行嗅探或注入。
- en: Have a go hero – sniffing multiple channels
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下，英雄 – 嗅探多个频道
- en: If you need to simultaneously sniff on multiple channels, you will require multiple
    physical Wi-Fi cards. If you can procure additional cards, then try to sniff on
    multiple channels simultaneously.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要同时在多个频道上进行嗅探，你将需要多个物理Wi-Fi网卡。如果能够获得额外的网卡，可以尝试同时在多个频道上进行嗅探。
- en: Pop quiz – WLAN packet sniffing and injection
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速测验 – WLAN数据包嗅探与注入
- en: Q1\. Which frame types are responsible for authentication in WLANs?
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Q1\. 哪些帧类型负责WLAN中的认证？
- en: Control
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制
- en: Management
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管理
- en: Data
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据
- en: QoS
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: QoS
- en: Q2\. What is the name of the second monitor mode interface that can be created
    on `wlan0` using `airmon-ng`?
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Q2\. 使用`airmon-ng`在`wlan0`上创建的第二个监视模式接口名称是什么？
- en: '`wlan0mon`'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`wlan0mon`'
- en: '`wlan0mon1`'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`wlan0mon1`'
- en: '`1mon`'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`1mon`'
- en: '`monb`'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`monb`'
- en: Q3\. What is the filter expression to view all non-beacon frames in Wireshark?
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Q3\. 在Wireshark中查看所有非信标帧的过滤表达式是什么？
- en: '`!(wlan.fc.type_subtype == 0x08)`'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`!(wlan.fc.type_subtype == 0x08)`'
- en: '`wlan.fc.type_subtype == 0x08`'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`wlan.fc.type_subtype == 0x08`'
- en: '`(no beacon)`'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`(无信标)`'
- en: '`wlan.fc.type == 0x08`'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`wlan.fc.type == 0x08`'
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have made some key observations about WLAN protocols.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们对WLAN协议进行了若干关键观察。
- en: Management, control, and data frames are unencrypted and thus can be easily
    read by someone who is monitoring the airspace. It is important to note here that
    the data packet payload can be protected using encryption to keep it confidential.
    We will talk about this in the next chapter.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 管理帧、控制帧和数据帧未加密，因此可以很容易地被监控空域的任何人读取。这里需要注意的是，数据包有效载荷可以通过加密来保护，从而保持机密性。我们将在下一章讨论这一点。
- en: We can sniff the entire airspace in our vicinity by putting our card into monitor
    mode.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将无线网卡设置为监视模式，嗅探我们周围的整个空域。
- en: As there is no integrity protection in management and control frames, it is
    very easy to inject these packets by modifying them or replaying them as-is using
    tools such as `aireplay-ng`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 由于管理帧和控制帧没有完整性保护，因此通过修改这些数据包或使用像`aireplay-ng`这样的工具将其重放为原样非常容易。
- en: Unencrypted data packets can also be modified and replayed back to the network.
    If the packet is encrypted, we can still replay the packet as-is, as WLAN by design
    does not have packet replay protection.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 未加密的数据包也可以被修改并重新播放回网络。如果数据包是加密的，我们仍然可以原样重新播放该数据包，因为WLAN设计上没有数据包重放保护。
- en: In the next chapter, we will look at different authentication mechanisms that
    are used in WLANs such as MAC filtering and shared authentication, and understand
    the various security flaws in them through live demonstrations.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨WLAN中使用的不同认证机制，如MAC过滤和共享认证，并通过现场演示了解它们的各种安全漏洞。
