- en: '*Chapter 7*: System Hacking'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第7章*：系统黑客'
- en: System hacking refers to the activities hackers use to gain access to, and compromise,
    digital devices such as computers, smartphones, tablets, and even entire networks.
    This course explains the main methods of system hacking—password cracking, privilege
    escalation, spyware installation, keylogging, and other tactics. We'll also learn
    the countermeasures **information technology** (**IT**) security professionals
    can use to fight different attacks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 系统黑客指的是黑客用来获取和妥协数字设备（如计算机、智能手机、平板电脑，甚至整个网络）的活动。本课程将解释系统黑客的主要方法——密码破解、特权升级、间谍软件安装、键盘记录以及其他战术。我们还将学习信息技术（**IT**）安全专业人员可以用来应对不同攻击的对策。
- en: Learning about system hacking will help you implement the strongest possible
    security practices and help you assess your current security protection and which
    possible vulnerabilities may be on your systems and networks. You'll learn which
    security features work the best for your environment, how to discover and fix
    security vulnerabilities, and how to anticipate them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 学习系统黑客技术将帮助你实施最强的安全实践，帮助你评估当前的安全防护，了解系统和网络中可能存在的漏洞。你将学习哪些安全功能在你的环境中最有效，如何发现和修复安全漏洞，以及如何预测这些漏洞。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding our objectives
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解我们的目标
- en: Phase 1 – Gaining access and cracking passwords
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一阶段 – 获取访问权限并破解密码
- en: Phase 2 – Escalating privileges
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二阶段 – 升级特权
- en: Phase 3 – Maintaining access and executing applications
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三阶段 – 维持访问并执行应用程序
- en: Phase 4 – Maintaining access and hiding your tools
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第四阶段 – 维持访问并隐藏你的工具
- en: Phase 5 – Covering your tracks – Clearing logs and evidence
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第五阶段 – 掩盖痕迹 – 清除日志和证据
- en: Understanding our objectives
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解我们的目标
- en: 'We have three goals for this chapter, as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章有三个目标，分别如下：
- en: '**Gain access to the target**: Identify the target, understanding the services
    available and which ports are open. Also, understand the user accounts that may
    be on the machine and, possibly, some vulnerabilities.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**获取目标的访问权限**：确定目标，了解可用的服务以及开放的端口。同时，了解可能存在于机器上的用户账户，以及可能存在的一些漏洞。'
- en: '**Maintain access**: Nothing''s worse than getting into a machine only to be
    kicked out later because someone has made it more difficult for us to get in a
    second time.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**维持访问**：没有什么比成功进入一台机器后，却被踢出去更糟糕的了，因为有人增加了我们的再次进入难度。'
- en: '**Covering your tracks**: If you love watching animal or nature documentaries,
    as I do, you know dogs are genetically related to wolves, which explains why they
    have a lot in common. They particularly share one disgusting habit—eating their
    feces to cover their tracks, because their feces would announce their presence
    to other predators or prey in the area. As with wolves and dogs, we need to cover
    our tracks. If we don''t, people will see that we''re in the system. They will
    reimage the system or take it offline, fix all the problems we''ve created, and
    restrict our access. Covering your tracks is part of maintaining that access.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**掩盖痕迹**：如果你像我一样喜欢看动物或自然纪录片，你知道狗和狼有共同的基因关系，这也解释了它们为何有很多相似之处。它们尤其有一个令人恶心的习惯——吃掉自己的粪便来掩盖痕迹，因为它们的粪便会向附近的捕食者或猎物透露它们的存在。就像狼和狗一样，我们也需要掩盖我们的痕迹。如果我们不这样做，人们就会发现我们进入了系统。然后他们会重新安装系统或将其下线，修复我们造成的所有问题，并限制我们的访问权限。掩盖痕迹是维持访问的一部分。'
- en: To accomplish these three goals, there are five phases we must pass through
    during the system hacking stage.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这三个目标，我们在系统黑客阶段必须经历五个阶段。
- en: The five phases
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 五个阶段
- en: 'Here is a brief overview of the five phases we will cover in this chapter:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将在本章中涵盖的五个阶段的简要概述：
- en: '**Phase 1: Gaining access to the system**. Again, we''ve identified the system,
    we understand which services are running, and—possibly—know user account information.
    We need *two* pieces of information to gain access to the machine: username and
    password. There are several methods we can use for cracking passwords.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第一阶段：获取系统访问权限**。再次，我们已经确定了系统，了解哪些服务在运行，并且——可能——知道用户账户信息。我们需要*两个*信息来获得机器的访问权限：用户名和密码。我们可以使用几种方法来破解密码。'
- en: '**Phase 2: Escalating privileges**. We can either escalate the privilege of
    an account we create or take an account that already exists—such as Billy Bob
    in the mailroom—and give the account user administrative rights. Guess who will
    be in trouble if I get discovered. Poor Billy Bob. Now, we don''t have to pick
    on a particular user account; we can use service accounts that are already active.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阶段2：提升权限**。我们可以提升自己创建的账户的权限，或者拿到一个已经存在的账户——比如邮件室的Billy Bob——并赋予该账户管理员权限。如果我被发现，猜猜谁会有麻烦。可怜的Billy
    Bob。现在，我们不必挑选特定的用户账户；我们可以使用已经活跃的服务账户。'
- en: '**Phase 3: Maintaining access**. How do we do that? By launching applications
    or our tools. We have a toolset of things we like to work with, and there are
    specific tools I enjoy. I will launch those applications to continue my attack
    from the inside. If I have hit the initial target, or this is my intended or final
    target, I need to launch my application so that I can get back in more easily.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阶段3：维持访问**。我们怎么做呢？通过启动应用程序或我们的工具。我们有一套喜欢使用的工具，我特别喜欢某些工具。我会启动这些应用程序，以便继续从内部发起攻击。如果我已经击中了初步目标，或者这是我预定的最终目标，我需要启动我的应用程序，这样我就能更轻松地重新进入系统。'
- en: '**Phase 4: Hiding your tools**. Because we don''t want people to see us on
    the system. You don''t want somebody browsing around seeing a particular application
    installed on your machine. You need to hide that information. There are several
    ways to hide tools, including rootkits and steganography.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阶段4：隐藏工具**。因为我们不想让别人看到我们在系统上的操作。你不想有人浏览时看到你的机器上安装了某个特定的应用程序。你需要隐藏这些信息。有很多方法可以隐藏工具，包括rootkit和隐写术。'
- en: '**Phase 5: Covering your tracks**. How do we do that? Well, what''s on a machine
    that typically tracks everything we do on a system? The **log files**. I sometimes
    refer to it as the big brother. This is where we separate the good hackers from
    the great hackers. To achieve our goal here, we will delete log files or modify
    them.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阶段5：掩盖痕迹**。我们怎么做呢？好吧，通常机器上有什么东西会跟踪我们在系统上做的所有操作？那就是**日志文件**。我有时把它称作“大哥”。这就是我们区分好黑客和伟大黑客的地方。为了达到我们的目标，我们将删除或修改日志文件。'
- en: Let's discuss each of the five phases in more working detail.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地讨论这五个阶段中的每一个。
- en: Phase 1 – Gaining access and cracking passwords
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阶段1 – 获取访问权限并破解密码
- en: If you know me, you know I have a big issue with passwords. I always jump on
    my soapbox whenever talking about passwords, because let's face it, we create
    online entities, and use accounts online all the time within our network or outside—on
    the internet. Everything about us is contained in these entities and we are to
    protect these with passwords. Now, here comes my soapbox…people are so stinking
    lazy when it comes to creating passwords—it drives me absolutely bonkers. As we
    move along, you'll understand why I'm so passionate about this subject.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你了解我，你知道我对密码有很大的问题。每次谈到密码，我总是忍不住站上我的讲台，因为说实话，我们创建在线身份，常常在我们自己的网络内或外部——在互联网上使用账户。我们的一切信息都包含在这些身份中，而我们必须用密码来保护这些身份。现在，准备好听我讲的“讲台”部分了吗……人们在创建密码时真的是懒到极点——这让我完全抓狂。随着我们继续深入，你会明白我为何对这个话题如此热衷。
- en: 'Matt Mullenweg, who created WordPress, had this great quote: *Love is great…but
    not as a password.* Did you know that *love* is one of the top 20 passwords that
    people use, with a variation at the end of it? So, again, our whole goal here
    in this phase of gaining access is attempting to crack a password. We don''t necessarily
    go after the big bad administrative password right away, because the second phase
    of gaining access is escalating privileges. So, we first need to see if we can
    find a password to gain access.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 创建WordPress的Matt Mullenweg有一句很棒的话：*爱是伟大的……但不是作为密码*。你知道吗，*love*是人们常用的前20个密码之一，甚至会在后面加个变种？所以，再次强调，在这个阶段我们获取访问权限的整个目标就是试图破解一个密码。我们不一定一开始就去破解那个超级管理员密码，因为获取访问权限的第二个阶段是提升权限。所以，我们首先需要看看能否找到一个密码来获得访问权限。
- en: What's cracking?
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是破解？
- en: '**Cracking** is going through and looking for or discovering passwords that
    are stored on a machine locally or trying to do this during transmission. A great
    example of this is **File Transfer Protocol** (**FTP**). When you log your username
    and password, the default is to transmit both the username and password in clear
    text. Obviously, that''s something I could pick up.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**破解**是指通过在本地机器上寻找或发现存储的密码，或者尝试在传输过程中进行破解。一个很好的例子是**文件传输协议**（**FTP**）。当你登录用户名和密码时，默认情况下会以明文传输用户名和密码。显然，这是我可以轻松捕捉到的。'
- en: 'People ask me: "Is there a really good reason for cracking?" Yes, there is.
    Often, people forget their passwords, especially when it comes to standalone machines.
    I would never recommend trying to crack someone''s password if you''re in a domain
    environment because that''s the purpose of the feature—being able to reset a password—but
    oftentimes, neighbors come over to me and say: "I forgot the password on my machine
    and I can''t get in." Of course, I usually have a lot of red flags going up in
    my brain when they say: "All of a sudden, I can''t get in." But we can reset local
    account passwords. Sometimes, a disgruntled person does something malicious in
    the domain environment, such as locking out everyone''s password. This shows there
    are some good purposes for cracking.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有人问我：“破解密码真的有充分的理由吗？”是的，确实有。通常，人们会忘记他们的密码，尤其是对于独立机器来说。我绝不会建议在域环境中尝试破解某人的密码，因为那是这个功能的目的——能够重置密码——但通常，邻居们会跑来对我说：“我忘记了我机器上的密码，进不去了。”当然，当他们说“突然间我进不去了”时，我的大脑通常会有很多警示信号。但我们可以重置本地账户密码。有时候，心情不好的某人会在域环境中做些恶意的事，比如锁定每个人的密码。这表明，破解密码确实有一些合理的目的。
- en: When it comes to cracking, we have two different ways we can do it—we can automate
    or do it manually by using some interesting tools.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在破解密码方面，我们有两种不同的方式——我们可以通过自动化工具进行破解，或者使用一些有趣的工具手动破解。
- en: The problem we have when it comes to cracking passwords is that most users pick
    something they know because they must remember it, and that's what makes it easy
    to crack people's passwords. Most people will use a name of a family member, their
    pet's name, their favorite sports team, comic book heroes, swear words, favorite
    city, religious names, or a school they went to—college, elementary, or high school.
    These things might be easy to remember because they mean something to you as the
    user, but that's the reason why passwords are easily hacked.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到破解密码时，我们面临的问题是大多数用户选择他们熟悉的东西，因为他们必须记住它，而这正是使得破解密码变得容易的原因。大多数人会用家庭成员的名字、宠物的名字、最喜欢的运动队、漫画书中的英雄、脏话、最喜欢的城市、宗教名词或他们曾经上的学校——大学、小学或高中。这些东西可能容易记住，因为它们对你作为用户来说有意义，但正是这些原因让密码容易被破解。
- en: Most people start off with these types of words and then add numbers at the
    end or the beginning of that password. Usually, those numbers also mean something
    to them. Most people use their birth year, graduation year, wedding anniversary,
    and so on.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人从这些类型的词开始，然后在密码的开头或结尾加上数字。通常，这些数字对他们也有意义。大多数人会使用他们的出生年份、毕业年份、结婚纪念日等等。
- en: 'However, while we require people to create difficult passwords, they still
    need to be easy to remember. Otherwise, we get help tickets being opened all day
    long: "Hey, I locked myself out. I don''t remember my password." So, in my book,
    as far as a proper password policy is concerned, we typically rely on four different
    options: biometrics, thumbprint, **two-factor authentication** (**2FA**), and
    retinal scans, which is one of the exciting things about Windows 10: Microsoft
    is building biometrics into it, and it can''t be tricked easily. If your laptop
    or tablet has a camera on it, it can use your face to log you in. And don''t worry—they''ve
    done it with a **three-dimensional** (**3D**) aspect, something they learned from
    Xbox. Remember the Kinect? It does 3D recognition of your face and—sometimes—your
    body, which I find scary.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，尽管我们要求人们创建复杂的密码，但它们仍然需要容易记住。否则，我们会整天收到帮助请求：“嘿，我把自己锁了出去，我不记得我的密码了。”所以，在我看来，关于一个合适的密码策略，我们通常依赖四种不同的选项：生物识别、指纹、**双因素认证**（**2FA**）和视网膜扫描，这也是
    Windows 10 的一些令人兴奋的特点：微软将生物识别技术嵌入其中，而且它不容易被欺骗。如果你的笔记本电脑或平板电脑有摄像头，它可以通过你的面部进行登录。而且不用担心——他们用的是**三维**（**3D**）技术，这是他们从
    Xbox 中学到的。还记得 Kinect 吗？它能进行面部和有时是身体的 3D 识别，这让我感到有点可怕。
- en: The geniuses behind this technology created it in such a way that if you hold
    up a picture of your face in front of the camera, it sees it as a flat structure.
    It realizes there's no depth. The demo they show you is of a gentleman holding
    a picture of himself up in front of his face and the laptop doesn't log him in.
    Once he removes the picture, exposing his face, the laptop immediately logs him
    in. With this, nobody can steal your biometrics, unless, of course, they cut your
    finger off.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这项技术背后的天才们创造了这样一种方式：如果你把自己脸部的照片举到摄像头前，它会将其视为一个平面结构。它意识到没有深度。他们给你展示的示范是，一个绅士把自己的照片举到自己脸前，笔记本电脑并没有让他登录。当他移开照片，露出真面目时，笔记本电脑立刻让他登录。这样一来，没人能窃取你的生物识别信息，除非，当然，他们把你的手指切掉。
- en: We also have the option of using the **Common Access Cards** (**CACs**) you
    swipe. Unfortunately, somebody can steal them, which is why utilizing a password
    would provide additional security. I'm a big fan of **multi-factor authentication**
    (**MFA**), whereby you type in a password, then receive a text message with a
    code on your cell phone or to your email confirming you've registered. You verify
    with a code that the company has sent to you.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用**公共访问卡**（**CACs**）这种刷卡方式。不幸的是，有人可能会偷走它们，这就是为什么使用密码可以提供额外安全性的原因。我是**多因素认证**（**MFA**）的忠实粉丝，你输入密码后，会收到一条短信或电子邮件，上面有一个验证码，确认你已经注册。你通过公司发给你的验证码来验证身份。
- en: With the number of passwords that are getting cracked, I think we're going to
    see a huge change, and we're probably leaning toward biometrics.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 随着越来越多的密码被破解，我认为我们将会看到巨大的变化，我们可能会逐步转向生物识别技术。
- en: Complexity
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复杂性
- en: 'Complexity means as we create these passwords, we need to make them more difficult
    for attackers to guess. Typically, at least in Microsoft, we handle this by using
    three of the following four options—and they''re good options as far as a rule
    of thumb is concerned:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂性意味着，当我们创建这些密码时，我们需要让它们更难被攻击者猜到。通常，至少在微软，我们通过使用以下四个选项中的三个来处理这个问题——这些选项作为经验法则是很不错的选择：
- en: The first option is using uppercase characters in your password. Now, I wouldn't
    necessarily make all my characters uppercase—my computer might think I'm yelling
    at it.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个选项是使用密码中的大写字母。现在，我不一定会把所有字符都设置为大写——我的电脑可能会以为我在对它喊叫。
- en: We can also use lowercase characters, and you can use these two in any order—you
    don't have to start off with an uppercase character then end with lowercase or
    vice versa.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们也可以使用小写字符，你可以随意组合这两种字符——你不需要先用大写字母再用小写字母，或者反过来。
- en: We can also inject numbers. So, at this point, we have what they refer to as
    an alphanumeric-based password.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还可以注入数字。所以，到目前为止，我们得到的就是他们所说的基于字母数字的密码。
- en: We can also use salting techniques (we'll talk about this later) to help randomize
    the password hashes.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还可以使用盐值技术（稍后我们会讲到）来帮助随机化密码的哈希值。
- en: However, if these four are the only ones you're using for your complexity, someone
    will eventually *pwn* you and, therefore, this is why we like special characters.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果这四个选项是你唯一使用的复杂性元素，总有人会最终*pwn*你，因此，这也是我们喜欢使用特殊字符的原因。
- en: However, we need to be careful with special characters because there are some
    assumptions that both users and attackers make.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们在使用特殊字符时需要小心，因为用户和攻击者都会做出一些假设。
- en: Any special characters will help you create complexity, but one of my favorite
    special characters—which drives attackers crazy—is the spacebar, but just because
    it's complex doesn't mean you're safe. You still must be careful.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 任何特殊字符都能帮助你增加复杂性，但我最喜欢的一种特殊字符——让攻击者抓狂的——就是空格键。但仅仅因为它复杂，并不意味着你就安全了，你仍然需要小心。
- en: First, you have to be careful about what we'll refer to as the **Fab Five**.
    This includes the **@**, **$**, **3**, **0**, and **!** characters, which a lot
    of people think will trick attackers, assuming they'll never guess that the dollar
    sign represents *S*, the zero an *O*, and the 3 an *E*. Well, attackers have dictionaries
    and mechanisms to help them figure these out. Don't try **0penm3up**, assuming
    attackers will not guess your 3 is *E* or **L3tm3in** is *Letmein*. My other favorite
    is **op3ns3same**. You don't think that's in a dictionary? I know this is a cool
    password, but it's not going to fool an attacker.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你必须小心我们所说的**五大要素**。这包括**@**、**$**、**3**、**0**和**!**字符，许多人认为这些字符会迷惑攻击者，假设攻击者永远不会猜到美元符号代表*S*，零代表*O*，3代表*E*。好吧，攻击者有字典和机制来帮助他们搞清楚这些。不要以为**0penm3up**会让攻击者猜不到你的3是*E*，或者**L3tm3in**是*Letmein*。我另一个喜欢的密码是**op3ns3same**。你不认为这会出现在字典里吗？我知道这是一个很酷的密码，但它不会欺骗攻击者。
- en: The reason why I always use **Pa$$w0rd** is that it's the default password for
    all Microsoft labs in the training environment. Microsoft requires that three
    of the four complexity requirements are fulfilled, and this one fulfills it. But
    complexity is not everything.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我之所以总是使用**Pa$$w0rd**，是因为它是所有微软实验室在训练环境中的默认密码。微软要求四个复杂性要求中的三个必须满足，而这个密码正好符合要求。但复杂性并非一切。
- en: The strength of a password lies in its length. Never use real words because
    they're what we refer to as dictionaries out there. A dictionary contains a bunch
    of words, and there are tons of dictionaries for different subjects.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 密码的强度在于其长度。永远不要使用真实单词，因为它们在外面有我们所说的字典。字典包含大量的单词，而且不同主题的字典有成千上万本。
- en: 'For example, assuming you know I like Batman, we''ll put **batmanrules** in
    the password file shown here:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，假设你知道我喜欢蝙蝠侠，我们会把**batmanrules**放入密码文件中，如下所示：
- en: '![Figure 7.1 – Password security checker at https://security.org'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.1 – 密码安全检查器，网址：https://security.org'
- en: '](Images/B17486_07_001.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17486_07_001.jpg)'
- en: Figure 7.1 – Password security checker at https://security.org
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – 密码安全检查器，网址：https://security.org
- en: If I try to brute-force attack this, it will take about 1 day to crack the password
    because it's made up of real words. In fact, if it wasn't as long as that (for
    example, **batman**), it would happen instantaneously because it will be in a
    dictionary somewhere.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我尝试暴力破解它，大约需要一天时间才能破解密码，因为它是由真实单词组成的。事实上，如果它没有这么长（例如，**batman**），它会瞬间被破解，因为它会出现在某个字典中。
- en: I do a lot of community-based talks and seminars, and one thing I try to teach
    users (because this is such a pet peeve for me) is how to create complex passwords
    but still make them easy to remember for the end user.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我经常做很多基于社区的演讲和研讨会，我试图教用户的一件事（因为这是我特别在意的）是如何创建复杂的密码，同时仍然使其对最终用户易于记住。
- en: One of the most effective ways to do this is by using a syntax we use daily.
    For example, I'm using a **Domain Name Service** (**DNS**) naming syntax, but
    because of the length and special characters of the periods, my password takes
    a little bit longer to brute-force attack. And hopefully, if my policy has me
    change my password before many years go by, it doesn't necessarily have to follow
    an actual DNS syntax. In fact, I'll do *M* because it's an upside-down *W*, or
    maybe I'll throw in a capital in there—**MMM.ilovecrafstmantools.whatever**. Yes,
    it doesn't have to be a real website—it can be anything you want.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 做到这一点最有效的方法之一是使用我们每天使用的语法。例如，我正在使用**域名服务**（**DNS**）命名语法，但由于点号的长度和特殊字符，我的密码需要更多时间来暴力破解。希望，如果我的政策要求我在多年后更改密码，那么它不必遵循实际的DNS语法。事实上，我可以使用*M*，因为它是倒立的*W*，或者我可以在其中添加一个大写字母——**MMM.ilovecrafstmantools.whatever**。是的，它不需要是一个真实的网站——可以是你想要的任何东西。
- en: 'Let''s try to crack **ilovecraftsman.tools**. It''s extremely long; we might
    have to go through the time-space continuum (or at least get our DeLorean up to
    88 miles an hour to go forward in time before it gets cracked through brute force),
    as it would take almost 900 trillion years to brute-force this password. I just
    typed in one of my passwords: 9 sextillion years to crack. Game over—I win!'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试着破解**ilovecraftsman.tools**。它极其长；我们可能需要穿越时间-空间连续体（或者至少让我们的DeLorean达到每小时88英里，才能向前推进时间，才能在通过暴力破解前破解它），因为暴力破解这个密码需要大约900万亿年。我刚刚输入了我的一个密码：破解它需要90
    sextillion年。游戏结束——我赢了！
- en: Password architecture
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密码架构
- en: We can try to hack a password either while it's in storage or while it's in
    transmission, or what's referred to as in motion. So, where are passwords stored?
    Well, that depends on your operating system and the environment you're in. For
    example, when it comes to Windows, if this is just a machine that is not part
    of a domain, maybe a home PC or grandma's PC, or your laptop, there's a database
    on the hard drive referred to as the **Security Account Manager (SAM) database**.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以尝试在密码存储时或者在传输时进行破解，后者称为“在传输中”或者“动态”状态。那么，密码是存储在哪里的呢？这取决于你的操作系统以及所处的环境。例如，在Windows中，如果这只是一个非域环境的机器，可能是家庭PC、祖母的电脑，或者你的笔记本电脑，硬盘上会有一个数据库，称为**安全账户管理器
    (SAM) 数据库**。
- en: 'The SAM database is located wherever you''ve installed Windows. The default
    is **C:windows/system32/config/sam**. In fact, let''s look at it here. In the
    following screenshot, I''ve opened my File Explorer and I''ve gone to my **C:**
    drive where I installed Windows under **System32**. There''s a directory called
    **config**—if you expand it, you''ll notice there''s this nifty little file called
    a **SAM** file inside. The passwords are stored in a *hash*, and this location
    or database is mounted up as a registry entry:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: SAM数据库位于你安装Windows的地方。默认路径是**C:windows/system32/config/sam**。实际上，让我们在这里看一下。在下面的截图中，我打开了文件资源管理器，进入了安装Windows的**C:**驱动器下的**System32**目录。这里有一个名为**config**的子目录——展开它，你会注意到里面有一个叫做**SAM**的文件。密码以*哈希*的形式存储，且这个位置或数据库作为注册表项挂载：
- en: '![Figure 7.2 – Location of the SAM database'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.2 – SAM数据库的位置](Images/B17486_07_002.jpg)'
- en: '](Images/B17486_07_002.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.2 – SAM数据库的位置](Images/B17486_07_002.jpg)'
- en: Figure 7.2 – Location of the SAM database
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – SAM数据库的位置
- en: If you're in a domain environment, user accounts are not stored on the local
    drive of the client machine but in a file known as **ntds.dit**, which is located
    on every single domain controller in your environment. On your domain controllers,
    it's stored inside of a directory known as **C:\windows\ntds.dit**.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在一个域环境中，用户账户不会存储在客户端机器的本地硬盘上，而是存储在一个名为**ntds.dit**的文件中，该文件存在于你环境中的每个域控制器上。在你的域控制器上，它存储在一个名为**C:\windows\ntds.dit**的目录中。
- en: 'So, here I am on the **C:** drive of my domain controller and inside of my
    Windows directory. I have a subdirectory called **NTDS**, which is short for **New
    Technology Directory Services**:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在我的域控制器的**C:**驱动器以及Windows目录下，我有一个名为**NTDS**的子目录，**NTDS**是**新技术目录服务 (New
    Technology Directory Services)**的缩写：
- en: '![Figure 7.3 – Location of the NTDS subdirectory](Images/B17486_07_003.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.3 – NTDS子目录的位置](Images/B17486_07_003.jpg)'
- en: Figure 7.3 – Location of the NTDS subdirectory
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – NTDS子目录的位置
- en: 'Therein is the famous **ntds.dit** file, the database file that has all my
    accounts for my infrastructure, as we can see here:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 其中就有著名的**ntds.dit**文件，它是包含我所有基础设施账户的数据库文件，如我们在这里看到的：
- en: '![Figure 7.4 – Location of the ntds.dit Active Directory (AD) account database](Images/B17486_07_004.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.4 – ntds.dit 活动目录 (AD) 账户数据库的位置](Images/B17486_07_004.jpg)'
- en: Figure 7.4 – Location of the ntds.dit Active Directory (AD) account database
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4 – ntds.dit 活动目录 (AD) 账户数据库的位置
- en: Now, don't think Linux doesn't do the same thing, because guess what? It does!
    It stores its passwords inside of the **etc** directory in a file that's called
    **shadow** **(etc/shadow)**.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，不要以为Linux没有做同样的事，因为，猜猜看？它有！它将密码存储在**etc**目录下的一个名为**shadow**的文件中（**etc/shadow**）。
- en: For Apple, we store it in a file that's called a **plist** file, located in
    the **var** directory under **/var/db/dslocal/nods/default/users**.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于苹果系统，我们将其存储在一个名为**plist**的文件中，该文件位于**/var/db/dslocal/nods/default/users**下的**var**目录中。
- en: With this file, the user is inside of the greater-than and less-than brackets
    **(<user>.plist**). **plist** has a shadow hash data property associated with
    it, and there are ways you can open this file up. Typically, you can't just grab
    these. If you're thinking you'll just go grab them, guess what? These files contain
    your authentication credentials, but they're stored as hash values. You can't
    just open it up. In fact, most of the files are going to be locked while the operating
    system is running. As far as it being hashed is concerned, you need to know that
    it's a one-way algorithm, which means I can't reverse the hash. "Okay, that's
    cool, then obviously I'm secure." Well—no, you're not, because as an attacker,
    I can steal it.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个文件，用户位于大于和小于括号之间**(<user>.plist**)。**plist**有一个与之关联的影子哈希数据属性，有办法可以打开这个文件。通常情况下，你不能随便拿这些。如果你认为你只需拿走它们，猜猜看？这些文件包含你的认证凭据，但它们以哈希值的形式存储。你不能随便打开它。事实上，大多数文件在操作系统运行时都会被锁定。至于它被哈希化的问题，你需要知道这是一个单向算法，这意味着我无法反向解密哈希。"好吧，那很酷，显然我是安全的。"嗯——不，你不是，因为作为攻击者，我可以窃取它。
- en: Methods for cracking/password hacking
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 破解/密码黑客的方法
- en: 'There are several techniques used for cracking, as outlined here:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种用于破解的技术，如下所述：
- en: Dictionary attacks (one of the most common ways we can go after passwords)
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字典攻击（我们可以使用的最常见的密码破解方式之一）
- en: Brute-force attacks
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暴力攻击
- en: Syllable attacks
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音节攻击
- en: Hybrid attacks
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 混合攻击
- en: Rule-based attacks
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于规则的攻击
- en: Good old reliable guessing
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 老实可靠的猜测
- en: Let's look at them in detail.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看一下。
- en: Dictionary attacks
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字典攻击
- en: Dictionary attacks are exactly what they sound like. We have files that we can
    go and download off the internet (**https://zip-password-cracker.com** or [https://apasscracker.com](https://apasscracker.com))
    and we can create our own because they are just text documents of words. When
    I say *words* in a dictionary attack, I mean I can find a dictionary based on
    different languages, whether that's English, French, German, Russian, or Klingon.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 字典攻击就是它听起来的样子。我们可以去互联网上下载文件（**https://zip-password-cracker.com**或[https://apasscracker.com](https://apasscracker.com)），我们也可以自己创建，因为它们只是单词的文本文档。当我说字典攻击中的*单词*时，我的意思是我可以找到基于不同语言的字典，无论是英语，法语，德语，俄语还是克林贡语。
- en: We also have dictionaries based on subjects. There's a dictionary out there
    that has medical terms in it, historical accounts, places, characters in books,
    their names, and even something specific to the book itself, such as a catchphrase.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有基于主题的字典。有一个字典里面有医学术语，历史记载，地点，书中的人物，他们的名字，甚至书本本身特有的东西，比如一个口头禅。
- en: Characters would also include movie characters—I have a dictionary that's filled
    with names from J.R.R. Tolkien's *Lord of the Rings* series. I also have a dictionary
    of famous people's names, movie stars, historical figures, locations, and events.
    Don't think you're getting tricky just because you're using a password that may
    not be a traditional password, because you're basing it on a real word. Please
    don't do that. And don't think for a second *I'll just put it in backward* because
    any password-cracking tool out there that's worth its weight in salt will do string
    manipulation. It'll take the word and try it in different combinations or reverse.
    So, no—you're not tricking me.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 字符也包括电影角色——我有一个字典，里面装满了J.R.R.托尔金的*指环王*系列中的名字。我还有一个字典，里面有著名人物的名字，电影明星，历史人物，地点和事件。不要认为你很聪明，只是因为你使用的密码可能不是传统密码，因为你是基于一个真实单词。请不要这样做。也不要认为*我只是把它倒过来*，因为任何值得一提的密码破解工具都会进行字符串操作。它会取这个单词并尝试不同的组合或反转。所以，不，你没有欺骗我。
- en: Brute-force attacks
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 暴力攻击
- en: Listen to me now, hear me later, understand me next week (using my Arnold Schwarzenegger
    voice). Brute-force attacks take longer to accomplish. What we mean by a brute-force
    attack is we try every combination of alphanumeric and specialized characters
    in a password. Now, obviously, if the password is only 6 characters long, brute-force
    attacks will go by relatively quickly, but when we get into passwords beyond 14
    characters, it gets a lot more difficult. It requires more cycles to go through,
    and brute force has to try every variation. Tools such as John the Ripper, Cain
    & Abel, or Aircrack-ng are very useful.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在听我说，下周理解我（用我的阿诺德·施瓦辛格的声音）。暴力攻击需要更长的时间来完成。我们所说的暴力攻击是尝试密码中每种字母数字和特殊字符的每种组合。显然，如果密码只有6个字符长，暴力攻击将相对快速，但当我们进入超过14个字符的密码时，情况就变得更加困难。需要更多的循环来进行，暴力攻击必须尝试每种变体。像约翰·里普尔、卡恩与亚伯尔或Aircrack-ng这样的工具非常有用。
- en: There's an upshot to brute-force attacks, even though it does take longer and
    it tries every combination, which takes more cycles. Guess what? It takes time,
    but it's 100% effective. And who has time? The attackers do.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 暴力攻击有一个好处，尽管它需要更长的时间并尝试每种组合，这需要更多的循环。猜猜看？虽然需要时间，但它是100%有效的。谁有时间？攻击者有。
- en: Syllable attacks
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 音节攻击
- en: With a syllable attack, we take a password—in this case, we'll say the password
    is **pass**—and then do a combination of a dictionary and brute force and try
    every possible arrangement of every entry in the dictionary.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用音节攻击，我们拿一个密码——在这种情况下，我们假设密码是**pass**——然后结合字典和暴力攻击，尝试字典中每个条目的每种可能排列。
- en: Hybrid attacks
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 混合攻击
- en: A hybrid attack still uses a dictionary, but based on users being complacent,
    we're going to try different variations by including numbers and special characters
    at the beginning or end of the password. So, let's say I have **Batman**, and
    next month I must change my password, so I change it to **Batman1**, and next
    month I change it to **Batman2**. Well, a hybrid attack is going to eventually
    crack this one.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 混合攻击仍然使用字典，但基于用户的懈怠，我们将尝试不同的变体，包括在密码的开头或结尾包含数字和特殊字符。所以，假设我有**Batman**，下个月我必须更改我的密码，所以我将其更改为**Batman1**，下个月我将其更改为**Batman2**。嗯，混合攻击最终会破解这个密码。
- en: By the way, if you or your users just modify passwords each month by adding
    a character or two to at the very end of it, smack yourself on the forehead and
    promise you'll never do that again. But don't smack your users' foreheads—you
    might get called in by **Human Resources** (**HR**)!
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，如果你或你的用户每个月只是在密码末尾添加一个或两个字符来修改密码，请拍一下自己的脑袋，并承诺再也不这样做。但不要拍你的用户的脑袋——你可能会被**人力资源**（**HR**）叫去。
- en: Rule-based attacks
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于规则的攻击
- en: What do I mean by rule-based attacks? Remember enumeration? If you're not familiar
    with this, you can reference [*Chapter 5*](B17486_05_ePub.xhtml#_idTextAnchor131)
    of this book, *Enumeration*. With enumeration, we can use the rules we've discovered,
    such as requiring users to have at least an 8-character password. I'm going to
    use those against you. And, knowing you use complexity, I'm able to discover you
    require two digits. So, I use a combination of brute-force, dictionary, and syllable
    attacks. Again, if I know that you only have 8 characters, it's all you require
    for your passwords, I won't try 9 or 10 characters. Or, if you don't require a
    digit, then why run through those digits?
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我所说的规则攻击是什么意思？还记得枚举吗？如果你对此不熟悉，可以参考本书的[*第5章*](B17486_05_ePub.xhtml#_idTextAnchor131)，*枚举*。通过枚举，我们可以使用我们发现的规则，比如要求用户至少有一个8位字符的密码。我将利用这些对付你。而且，我知道你使用复杂性，我能发现你需要两个数字。所以，我使用暴力、字典和音节攻击的组合。再次强调，如果我知道你只有8个字符，这就是你密码所需的全部，我不会尝试9或10个字符。或者，如果你不需要数字，那为什么要运行这些数字？
- en: Good old reliable guessing
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 传统可靠的猜测
- en: There's also good old reliable guessing, which entails some reconnaissance and
    footprinting. This is where we try to figure out as much as we can about the target,
    whether it's a user or a company. Often, users base passwords on things they know.
    So, if I go on social media, there's a chance I will figure out their favorite
    sports team, what their pet dog was growing up, and their spouse's birth date.
    We share way too much information.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 还有传统可靠的猜测，其中包括一些侦察和足迹。这是我们尽可能多地了解目标的地方，无论是用户还是公司。通常，用户的密码基于他们所知道的事情。所以，如果我上社交媒体，有机会我会发现他们最喜欢的运动队，他们成长时的宠物狗，以及他们配偶的生日。我们分享了太多信息。
- en: Types of attacks
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 攻击类型
- en: Now that we know the different techniques used to do some cracking, let's talk
    about types of attacks.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了用于破解的一些技术，接下来我们来谈谈攻击的类型。
- en: 'Attacks are typically summed up in four different categories, as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击通常分为四个不同的类别，如下所示：
- en: Passive online attacks
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 被动在线攻击
- en: Active online attacks
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主动在线攻击
- en: Offline attacks
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 离线攻击
- en: Non-electronic attacks
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非电子攻击
- en: Let's discuss each category and the attacks that relate to each category.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论每个类别以及与每个类别相关的攻击。
- en: Passive online attacks
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 被动在线攻击
- en: These types of attacks are passive, which means we're not necessarily going
    to have direct communication with the machine or the target.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这些攻击类型是被动的，这意味着我们不一定会与机器或目标进行直接的通信。
- en: Sniffing
  id: totrans-108
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 嗅探
- en: Passive online attacks include things such as sniffing the network to see if
    we can discover passwords going back and forth. An example of this is FTP, which
    uses clear text by default, so, just sitting there sniffing, we might be able
    to pick up some passwords.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 被动在线攻击包括诸如嗅探网络，看看我们是否能发现来回传输的密码。例如，FTP默认使用明文传输，因此仅仅通过嗅探，我们可能就能捕获一些密码。
- en: Man-in-the-Middle (MitM) attacks
  id: totrans-110
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 中间人攻击（MitM）
- en: This type of attack occurs when an attacker places their machine or their hacking
    device between the source and the destination. They just handle all the traffic
    going back and forth. Again, I'm not modifying anything—it's so passive that it's
    hard for anyone to tell I'm doing anything. I'll just be capturing the data, making
    sure it all passes through me before it goes to a switch.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这种攻击发生在攻击者将其机器或黑客设备置于源和目标之间时。他们只是处理所有来回的流量。再次强调，我并没有修改任何东西——它是如此被动，以至于很难让任何人察觉我在做什么。我只是捕获数据，确保所有数据都通过我再发送到交换机。
- en: Sidejacking
  id: totrans-112
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 会话劫持
- en: This attack was made famous by a Firefox plugin that was called **firesheep**.
    It allowed an attacker to go to any Wi-Fi access point, such as at a Starbucks,
    some coffee shop, or internet café, and if they were on the same Wi-Fi access
    point as other users, they could steal their cookies in the middle of their transaction.
    They could then do things such as log on to their Facebook account or take over
    their Facebook session. Again, these are relatively passive—I'm not attacking
    a specific target.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这种攻击因Firefox插件**firesheep**而广为人知。它允许攻击者前往任何Wi-Fi接入点，如星巴克、咖啡店或网吧，如果他们与其他用户处于同一Wi-Fi接入点，就能在他们交易的过程中窃取他们的Cookie。然后，他们可以做一些事情，比如登录他们的Facebook账户或接管他们的Facebook会话。再次强调，这些攻击相对被动——我并没有攻击特定的目标。
- en: Active online attacks
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主动在线攻击
- en: An active online attack is exactly that—it's a lot more active. We know the
    more active we are, the more chances we have of getting caught.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 主动在线攻击就是这样——它更加主动。我们知道，我们越活跃，就越容易被抓住。
- en: Hash injection
  id: totrans-116
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 哈希注入
- en: This is where we inject a compromised hash into a current session and then use
    the hash to authenticate to the network resources.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种将被攻陷的哈希注入当前会话并使用该哈希进行网络资源认证的攻击方式。
- en: A hash is basically an encrypted password, and passwords are basically stored
    in the systems in the form of hashes. Now, if I had a file that stored usernames
    and passwords and it was completely clear text, there would be no use in having
    security, right? The reason is anybody could find that file. Remember that SAM
    database? Well, it stores user accounts and passwords in a hashed format.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希基本上是加密后的密码，密码通常以哈希的形式存储在系统中。如果我有一个存储用户名和密码的文件，并且文件是完全明文的，那么根本没有安全性可言，对吧？原因是任何人都可以找到这个文件。还记得那个SAM数据库吗？它以哈希格式存储用户账户和密码。
- en: 'Back in the day, Microsoft used something called a **LAN Manager (LM) hash**,
    which was a nightmare and still is a nightmare sometimes. I get this all the time
    whenever I teach about ethical hacking: "*Why talk about hash words and all this
    stuff with older operating systems? Why not be talking about the new stuff?*"
    Well, I''ll be honest with you—it''s almost like being a hunter. If I''m going
    to go out and hunt my prey, I''m not going to go out after the latest, newest
    target out there—I want to go after the oldest, because it''s slower, and no one''s
    paying attention to it. Who knows if it''s been updated? The new stuff has newer
    technologies and sometimes makes it harder for me. I taught a class that had two
    IT people from a huge state organization, and as we were talking, they told me
    they still have some XP machines and some Server 2000 and 2003 systems.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，微软使用了一种叫做 **LAN 管理器 (LM) 哈希** 的方式，这在当时是一个噩梦，现在有时仍然是个噩梦。每当我教授关于道德黑客的课程时，我总是听到这样的问题：“*为什么要谈论这些旧操作系统中的哈希词和其他相关内容？为什么不谈论新的东西？*”
    好吧，我得跟你们说实话——这就像是当一个猎人。如果我要出去打猎，我不会去找最新、最现代的猎物——我想要猎取最古老的猎物，因为它更慢，而且没人关注它。谁知道它是否已经更新过呢？新的东西有新的技术，反而有时会让我更难应对。我曾教授一门课，里面有两位来自大型州政府组织的
    IT 人员，当我们聊天时，他们告诉我他们仍然有一些 XP 机器和一些 Server 2000 和 2003 系统。
- en: You may be shaking your head, wondering why you need to upgrade a machine that
    maybe does one task. In my two students' case, the machine handled their imaging
    system for documentation. In another manufacturing facility was a robotic arm
    being controlled by a Windows machine. It just went back and forth all day long.
    Do these machines need to have Windows 10 on them if they work just fine with
    XP? If you created a password that was 14 characters or fewer, the LM hash would
    take all the letters—it wouldn't matter if you had upper- and lowercase characters—and
    convert them to all uppercase. After converting them to all uppercase, it would
    then pad any leftover fields to fill out all 14 characters. So, in this case here,
    I'd have three padded spaces. Then, things got kind of crazy. The LM hash then
    went through and split up the password into two 7-character strings. The two 7-character
    strings were then encrypted and combined back together.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会摇头，想知道为什么你需要升级一台可能只做一项任务的机器。在我的两位学生的例子中，那台机器处理他们的文档成像系统。在另一个制造设施中，有一台由 Windows
    机器控制的机器人手臂。它整天来回移动。这些机器如果用 XP 就能正常工作，真的有必要装上 Windows 10 吗？如果你创建了一个不超过 14 个字符的密码，LM
    哈希会将所有字母转化——无论是大写字母还是小写字母——并将它们转换为全部大写。转换为大写后，它会将任何剩余字段填充至完整的 14 个字符。所以，在这个例子中，我会有三个填充空格。接着，事情变得有点疯狂。LM
    哈希接着会将密码分割成两个 7 字符的字符串。这两个 7 字符的字符串会被加密并合并回一起。
- en: 'For example, **BatmanR** would be hashed out to this value, and the leftover
    **ULES** with its padded spaces would be encrypted to this hash. Then, they would
    be combined, and that would be your LM hash, as illustrated here:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，**BatmanR** 会被哈希为这个值，而剩余的 **ULES** 和它的填充空格会被加密为这个哈希值。然后，它们会被合并，这就是你的 LM 哈希值，如图所示：
- en: '![Figure 7.5 – How LM hashes are created'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.5 – LM 哈希值的生成方式'
- en: '](Images/B17486_07_005.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17486_07_005.jpg)'
- en: Figure 7.5 – How LM hashes are created
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5 – LM 哈希值的生成方式
- en: Microsoft then added NTLM, which is the NT LAN Manager hash. So, the result
    we would see inside of the SAM account database would include the user's name
    (in this case, **Bwayne**), a number listed after their name, followed by the
    next 32 characters, which was the LM hash, and then an NTLM hash appended. Now,
    the big difference between these two was in the password hash algorithm. LM used
    what they referred to as **diz**, which was very easy to crack.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，微软加入了 NTLM，它是 NT LAN 管理器哈希。因此，我们在 SAM 账户数据库中看到的结果会包含用户的名字（在这个例子中是 **Bwayne**），名字后面跟着一个数字，然后是接下来的
    32 个字符，也就是 LM 哈希，最后附加上 NTLM 哈希。现在，这两者之间的最大区别在于密码哈希算法。LM 使用的是他们所称的 **diz**，这种算法非常容易被破解。
- en: Then, they came out with NTLM **version 1** (**v1**), which got us to using
    **Message Digest 4** (**MD4**), which was a better algorithm, but NTLM **version
    2** (**v2**) used MD5, which is even better, and technically, you should use it
    whenever possible. So, then you might see another account listed in there as **administrator**,
    followed by 500 for that number. 500's the **security identifier** (**SID**)—all
    administrative accounts in the Microsoft world end with 500 at the end of the
    SID. Again, I would see a combination of the LM hash and the NTLM hash.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，他们推出了NTLM **版本 1** (**v1**)，这使我们开始使用 **消息摘要4** (**MD4**)，它是一个更好的算法，但NTLM
    **版本 2** (**v2**)使用了MD5，它更好，理论上你应该尽可能使用它。所以，你可能会看到其中列出了另一个帐户作为 **administrator**，后面跟着数字500。500是**安全标识符**
    (**SID**)——在微软世界里，所有的管理帐户的SID最后都以500结尾。同样，我会看到LM哈希和NTLM哈希的组合。
- en: Note
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Anytime you see a hash that ends with a double **AAD3B435B51404EE**, this should
    mean something to you. This is a very common ending hash, and it describes the
    last 7 characters—remember that we must pad it to make sure we equal 14 characters?
    It tells me the password is 7 or fewer characters in length. Something similar
    happens if somebody types in a password that's over 14 characters. Remember that
    this happens with 14 characters. If it's over 14 characters, then the LM hash
    value is dumped and not utilized. Operating systems today, since Vista and higher,
    have the LM hash turned off.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你看到一个以双 **AAD3B435B51404EE** 结尾的哈希值时，这对你应该有所意义。这是一个非常常见的结尾哈希，它描述了最后的7个字符—记住我们需要填充它以确保总共有14个字符？它告诉我密码的长度是7个字符或更少。如果某人输入的密码超过14个字符，也会发生类似的情况。记住，这个情况会出现在14个字符的密码上。如果超过14个字符，那么LM哈希值就会被丢弃，而不再被使用。如今的操作系统（从Vista及更高版本开始）默认禁用LM哈希。
- en: Keyloggers
  id: totrans-129
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 键盘记录器
- en: When it comes to keyloggers, we monitor every single key stroke going on a particular
    system or target. All those keystrokes, depending on the keylogger itself, could
    be transmitted back to the attacker.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在涉及键盘记录器时，我们会监控特定系统或目标上每一击键。这些按键，取决于键盘记录器本身，可能会被传输回攻击者。
- en: Keyloggers are software programs that monitor and record keystrokes, mouse strokes,
    screenshots, who logged in, and at what time. It's amazing what some of these
    software programs do, but most of them will log keystrokes. There's a lot of software
    out there, and some have a legitimate purpose to them—for example, some parents
    or guardians want to monitor what their kids are doing on the computer.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 键盘记录器是监控并记录按键、鼠标操作、截图、谁登录以及登录时间的软件程序。令人惊讶的是，这些软件程序能做的事情，但大多数会记录按键。有很多这样的软件，其中一些有其合法用途——例如，一些父母或监护人希望监控孩子在电脑上做的事情。
- en: We also have hardware-based keyloggers, which are extremely hard to detect.
    They will monitor every keystroke, and it doesn't look like it's a big bad device,
    but some of them have small applications built into them so that they either keep
    a log file and I just recover the device or they will simply email me the logs.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有硬件驱动的键盘记录器，这些设备非常难以检测。它们会监控每一次按键，看起来不像是什么恶意的设备，但其中一些设备内置了小型应用程序，可以记录日志文件，或者直接将日志通过邮件发送给我。
- en: As a security expert, you need to know what's installed on your machines, both
    software and hardware. If you were to look on the back of a machine and saw one
    of the following devices plugged into the back of your system and the mouse was
    plugged into it, what would you assume?
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名安全专家，你需要知道你的机器上安装了什么，软件和硬件都需要了解。如果你查看一台机器的背面，看到下面列出的某个设备插入到系统背面，而且鼠标也插入到它上面，你会怎么判断？
- en: '![Figure 7.6 – Keyloggers](Images/B17486_07_006.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.6 – 键盘记录器](Images/B17486_07_006.jpg)'
- en: Figure 7.6 – Keyloggers
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6 – 键盘记录器
- en: 'The question is: *Is there a legitimate use for these devices?* It may be the
    company''s business to know what people are typing—what information they''re sharing.
    And it doesn''t stop at devices that look like these.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是：*这些设备有合法用途吗？* 可能对于公司来说，了解人们在键盘上输入的内容—他们分享的信息，是有商业价值的。而且，这种情况不仅限于看起来像这些的设备。
- en: There are keyboards you can modify—you can do this yourself and install a keylogger
    piece of hardware inside of the keyboard. You can also buy these new and deploy
    them out to your end users. Or, how about if I just send you a free one and it's
    connected to your system so that we're able to capture screenshots and record
    which websites you've visited? I can even read your email because as you type
    it in, it's going to be recorded. I could also capture login names. "*But hang
    on a second—when I type in my passwords, I get an asterisk.*" Well, guess what?
    Keyloggers don't log in asterisks—that's what you see visually.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 有些键盘你可以进行修改——你可以自己动手，在键盘内部安装一个键盘记录器硬件。你也可以购买这些键盘，并将它们部署到终端用户手中。或者，如果我直接给你寄一个免费的，它连接到你的系统，那么我们就可以捕捉截图，并记录你访问了哪些网站？我甚至可以读取你的电子邮件，因为你输入时，它会被记录下来。我还可以捕捉登录名。“*等一下——当我输入密码时，我看到的是星号*。”好吧，猜猜看？键盘记录器不会记录星号——那是你看到的视觉效果。
- en: If you are saying "*Those are physically connected devices*", I have bad news
    for you. There are Wi-Fi keyloggers out there. You are also in trouble if you
    have a Bluetooth keyboard (and most Microsoft keyboards are Bluetooth-based as
    far as connectivity from the keyboard to the system goes).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你说的是“*那些是物理连接的设备*”，我有个坏消息要告诉你。外面有Wi-Fi键盘记录器。如果你有蓝牙键盘（而且大多数微软键盘的连接方式是蓝牙），你也有麻烦了。
- en: 'This looks like a **Universal Serial Bus** (**USB**) charger, but built inside
    of it is a Bluetooth keylogger:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来像是一个**统一串行总线**（**USB**）充电器，但它内部却藏着一个蓝牙键盘记录器：
- en: '![Figure 7.7 – A keylogger hidden inside a USB charger](Images/B17486_07_007.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图7.7 – 隐藏在USB充电器中的键盘记录器](Images/B17486_07_007.jpg)'
- en: Figure 7.7 – A keylogger hidden inside a USB charger
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.7 – 隐藏在USB充电器中的键盘记录器
- en: 'I don''t have to be hooked up to your system. I can plug this in, and you''ll
    just think: "*As a matter of fact, I could use it as a charger for my phone.*"
    In the meantime, it''ll be picking up Bluetooth signals and detecting what people
    are typing on their Bluetooth keyboards.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我不需要连接到你的系统。我只需插上它，而你可能会想：“*实际上，我可以把它当做给手机充电的工具使用*。”与此同时，它会接收蓝牙信号，检测人们在蓝牙键盘上输入的内容。
- en: Here's where it gets scary… they have acoustic keyloggers now. What does that
    mean? There are apps that are being experimented with right now. It takes time
    because it has to learn the sound of the keystrokes, but after a while, it'll
    be able to predict via sound waves which keys are being typed.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这就有点吓人了……现在他们已经有声波键盘记录器了。这是什么意思？现在有些应用程序正在进行实验。它需要时间，因为它必须学习击键的声音，但过一段时间后，它会通过声音波预测打的是哪些键。
- en: If that doesn't scare you enough, how about a rootkit logger? Yes—there are
    two that have been found in the wild already. One of them is called **Jellyfish**,
    a keylogger that runs inside the **graphics processing unit** (**GPU**) of the
    video card instead of through the processor or the **central processing unit**
    (**CPU**) of the system, and I don't know very many antivirus products that are
    looking at what's running on GPUs!
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这还不够吓人，那怎么样来点根本性的木马日志记录器？是的——已经有两个在野外被发现了。其中一个叫做**水母**，这是一种键盘记录器，它运行在**显卡的图形处理单元**（**GPU**）中，而不是通过处理器或系统的**中央处理单元**（**CPU**），而且我并不知道有多少杀毒软件正在查看GPU上运行的内容！
- en: To raise the hair on the back of your neck, we also have hypervisor keyloggers.
    These are keyloggers that will reside in a piece of malware that is hypervised.
    It runs underneath the operating system, so it remains untouched, just like a
    **virtual machine** (**VM**).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 让你脊背发凉的是，我们还有虚拟机监控型的键盘记录器。这些键盘记录器会存在于一块被虚拟化的恶意软件中。它运行在操作系统之下，所以它不会被触碰，就像**虚拟机**（**VM**）一样。
- en: We also have form-grabbing-based keyloggers. These are basically a piece of
    software that's going to record web form data and then send it across the internet
    to show the attacker which form data you're filling out. And no—it's not specific
    to PCs.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有基于表单抓取的键盘记录器。这些基本上是一种软件，它会记录网页表单数据，然后通过互联网将你填写的表单数据发送给攻击者。不——它不仅限于PC。
- en: Offline attacks
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 离线攻击
- en: These are interesting because. with offline attacks, we have all the time in
    the world. What's meant by an offline attack? If I can somehow get access to whatever
    is storing your passwords and user accounts and I get to play with it offline,
    I'm not going to hit that machine. I grab a database such as the SAM account database,
    or maybe I grab your **ntds.dit** file, and I can start throwing things such as
    a rainbow attack (which we'll discuss in more detail later).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这些攻击方式很有意思，因为在离线攻击中，我们有的是时间。那么什么是离线攻击呢？如果我能以某种方式访问存储你密码和用户帐户的地方，并且可以在离线状态下进行操作，那么我就不会攻击那个机器。我会抓取一个数据库，比如SAM帐户数据库，或者可能我会抓取你的**ntds.dit**文件，然后我可以开始进行彩虹攻击（我们稍后会详细讨论）。
- en: We could also use one of the following.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用以下方法之一。
- en: Distributed network attacks
  id: totrans-150
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 分布式网络攻击
- en: A **distributed network attack** (**DNA**) extends decryption capabilities beyond
    a single computer by using the distributed power of multiple computers across
    a network to decrypt files, find passphrases, and recover passwords.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**分布式网络攻击**（**DNA**）通过利用多个计算机的分布式计算能力，扩展了解密功能，可以解密文件、找出密码短语并恢复密码，而不局限于单台计算机。'
- en: Precomputed hashes
  id: totrans-152
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 预计算哈希
- en: Here, an attacker can decrypt each word in a dictionary using a hash function
    and then compare it to the encrypted password. The downside to this is that it
    does require a lot of space, but the payoff is that it's extremely fast.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，攻击者可以使用哈希函数解密字典中的每个单词，然后将其与加密密码进行比较。这样做的缺点是它需要大量的空间，但它的优势在于速度极快。
- en: Non-electronic attacks
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 非电子攻击
- en: Non-electronic attacks are possible ways to gain access to valuable information
    without the use of technology. While these methods may be less common, they can
    still be very effective in obtaining the data or access you need.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 非电子攻击是通过不使用技术的方式获取有价值信息的可能方法。虽然这些方法可能不太常见，但它们在获取所需数据或访问权限时依然非常有效。
- en: Dumpster diving
  id: totrans-156
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 垃圾桶潜水
- en: This is where we look through trash. Now, that may seem beneath you, but trust
    me, it happens. Oracle caught Microsoft in a fib because they had done some dumpster
    diving in Microsoft trash bins.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们查看垃圾的方式。现在，这可能看起来不太体面，但相信我，这种事确实发生过。甲骨文曾因在微软的垃圾桶里做过垃圾桶潜水而抓到微软撒谎。
- en: Dumpster diving is a means for attackers to find information they could use
    to create trust. You can find medical records, resumes, personal photos, emails,
    bank statements, account details, information about software, tech support logs,
    government records, medical bills, resumes, and the like simply by exploring the
    intended victim's garbage. Once garbage is collected, the information is used
    to piece together identity profiles, making social engineering more likely to
    succeed.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 垃圾桶潜水是一种攻击者通过寻找可用信息的手段，这些信息可以用来建立信任。你可以通过探索目标受害人的垃圾，找到医疗记录、简历、个人照片、电子邮件、银行对账单、账户详情、软件信息、技术支持日志、政府记录、医疗账单、简历等内容。一旦垃圾被收集，信息就可以用来拼凑身份档案，从而使社会工程学攻击更容易成功。
- en: Shoulder surfing
  id: totrans-159
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 肩窥攻击
- en: In this type of attack, somebody is obviously watching over your shoulder or
    using some type of mechanism. The latest and greatest now is, I have an electronic
    cell phone in my hand that does video. How about if I hold it up to my ear as
    if I'm talking to somebody, but I point my camera to where you're typing in a
    password? As a matter of fact, I'm paranoid about such things. When I'm out shopping,
    if I'm going to run my credit card somewhere, I always stop and look around and
    see if somebody's pretending to be on their cell phone and it happens to be pointing
    my way.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种攻击类型中，某人显然是在监视你的肩膀，或者使用某种机制。现在最先进的方法是，我手里拿着一部可以拍摄视频的电子手机。假如我把它放在耳边，好像在和别人通话，但实际上我把摄像头指向你输入密码的地方？事实上，我对这种事情很警觉。当我去购物时，如果我打算在某个地方刷信用卡，我总是停下来环顾四周，看是否有人假装在用手机，而且手机正好指向我这边。
- en: Social engineering
  id: totrans-161
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 社会工程学
- en: 'There''s something we can do with social engineering that is a non-electronic
    attack, but kind of borderline. It''s a very famous attack and it entails using
    a USB switch blade. Here, as an attacker, I configure a USB drive, and when you
    plug it in, it goes through and does some interesting things such as installing
    a keylogger for me, maybe a piece of malware, and it does it all silently. Maybe
    even the emails knew your logging credentials that I detected, and what I do is
    take that USB drive and just arbitrarily leave it some place where I know somebody
    will find it—for example, at the parking lot of a company, in the main lobby,
    in a hallway, near a bathroom: some place near the target company. If somebody
    picks it up, what''s the first thing they''re going to try to do? Plug in this
    bad boy and bing—they just got *pwned*!'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种社交工程的手段是一种非电子攻击，虽然有点灰色地带。它是一种非常著名的攻击方式，涉及使用USB切换刀。在这种情况下，作为攻击者，我配置一个USB驱动器，当你插入时，它会悄悄地进行一些有趣的操作，比如为我安装一个键盘记录器，也许是恶意软件，并且这一切都在背后悄无声息地进行。也许它甚至能捕捉到我检测到的你的登录凭证，然后我做的事情是随便把这个USB驱动器放到某个我知道有人会找到的地方——比如在公司停车场、主大厅、走廊、洗手间附近：就在目标公司附近的某个地方。如果有人捡到，它们会做什么呢？第一时间插入这个坏家伙，啪——他们就被*pwned*了！
- en: Authentication methods designed to help
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 认证方法旨在提供帮助
- en: Included next are additional cracking concepts to assist you in the cracking
    process.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是一些额外的破解概念，帮助你在破解过程中取得进展。
- en: When NTLM authentication doesn't work for you
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当NTLM认证对你不起作用时
- en: 'This authentication mechanism is proprietary to Microsoft and it''s the default
    authentication that is used if some specific situations exist. I know you are
    saying: "They''re using Kerberos." I know that, except if the following situations
    apply to you. It''s only used when there is no Kerberos trust between two different
    forests and you''re trying to share resources.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这种认证机制是微软的专有技术，如果存在某些特定情况，它是默认使用的认证方式。我知道你会说：“他们在使用Kerberos。”我知道，除非以下情况适用于你。它仅在两个不同的森林之间没有Kerberos信任关系并且你尝试共享资源时使用。
- en: Another time NTLM gets utilized instead of Kerberos is if authentication is
    being attempted by an IP instead of by a DNS name because Kerberos requires DNS
    or a domain name environment. Also, if one or both systems are not a part of the
    same domain, don't think that you're not using NTLM, because you very well could
    be.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个使用NTLM而非Kerberos的情况是当通过IP而非DNS名称进行身份验证时，因为Kerberos要求DNS或域名环境。此外，如果一个或两个系统不属于同一域，请不要以为你没有使用NTLM，因为实际上你很可能正在使用它。
- en: Another situation is if you have a firewall that's blocking Kerberos. Now that
    we know when it's used, how is it used? Well, it's based on a challenge-response
    algorithm.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种情况是如果你有一个防火墙阻止了Kerberos。那么我们知道它在什么时候使用，那么它是如何使用的呢？实际上，它基于挑战-响应算法。
- en: The cool thing about this is passwords are never transmitted because you're
    just going to respond to a request or a challenge. As I mentioned before, NTLM
    came in v1 back with Windows NT. v2 was released with **Service Pack 4** (**SP
    4**), so if by chance you come across an older NT system, odds are it will be
    running v2.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这其中很酷的部分是，密码从未被传输，因为你只是回应一个请求或挑战。正如我之前提到的，NTLM从Windows NT的v1版本开始就有了。v2版本随**Service
    Pack 4**（**SP 4**）发布，所以如果你偶然遇到一个较老的NT系统，那么它很可能正在运行v2版本。
- en: 'This is how it works: you have your client machine, and the user gets their
    login screen and types in their username and password. After this, Windows takes
    that password and runs it through a hash algorithm to generate a hash for the
    password that''s been entered. The client then sends a login request to the domain
    controller, and since the computer has joined the domain, the domain controller
    is very much aware of that hash value associated with that login name. So, the
    domain controller then creates a random string and sends it and basically says:
    "If you are who you say you are, you should be able to answer this request." The
    client encrypts this request with the hash and sends it back to the domain controller.
    The domain controller then goes through, retrieves the password or the hash of
    the user''s password, and compares it to see if it''s the correct answer. If it''s
    the same answer, then you''re allowed to cross the bridge. If it''s wrong, you
    don''t get to pass. It reminds me of the famous *Monty Python and the Holy Grail*
    movie scene of the three questions and bridge of death.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 其工作原理是这样的：你有一台客户端机器，用户在登录界面输入用户名和密码。之后，Windows 会将该密码通过哈希算法处理，生成一个该密码的哈希值。然后，客户端将登录请求发送到域控制器，由于计算机已经加入了域，域控制器非常清楚与该登录名相关联的哈希值。因此，域控制器会生成一个随机字符串并发送过去，基本上是这样说的：“如果你说的是真的，你应该能够回答这个请求。”
    客户端使用哈希值对这个请求进行加密，并将其发送回域控制器。域控制器接着会处理，获取用户密码或密码的哈希值，并进行比较，看它是否是正确的答案。如果答案相同，那么你就可以过桥了。如果不对，你就不能通过。这让我想起了著名的*《蒙提·派森与圣杯》*电影中的三问死亡之桥的场景。
- en: Kerberos authentication
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Kerberos 认证
- en: This is what we're using, pretty much up to date with the latest and greatest
    from Microsoft. Kerberos gets its name from the three-headed dog that guards the
    gates of Hell—or Fluffy, if you're a *Harry Potter* fan. It is ticket-based, so
    we issue tickets that are then used to represent the credentials. It's fast, because
    we don't have to keep re-authenticating the user over and over—or, possibly, the
    computer. Again, it avoids the transmission of passwords.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们正在使用的，几乎是与微软最新、最强大的技术同步的。Kerberos 得名于三头狗，它守护着地狱的大门——如果你是*哈利·波特*的粉丝，它也叫“弗拉菲”。它是基于票证的，我们发放票证，票证用来代表凭据。它非常快速，因为我们不需要一次又一次地重新认证用户——或者，可能是计算机。再次，它避免了密码的传输。
- en: Now, there is one little kicker on this one and that is it's time-based. If
    you remember our chapter on enumeration, you should remember the **primary domain
    controller** (**PDC**). It's in charge of syncing everybody's clock to itself
    because when it comes to Kerberos, the default with Microsoft is you cannot have
    more than 5 minutes time difference between the PDC and your system clock. If
    you are, it won't authenticate you. So, let's look at how Fluffy is used.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这里有一个小细节，那就是它是基于时间的。如果你记得我们在枚举章节中提到的**主域控制器**（**PDC**），你应该记得它负责将每个人的时钟与自己同步，因为在
    Kerberos 中，微软的默认设置是 PDC 和你的系统时钟之间不能有超过 5 分钟的时间差。如果时间差超过了，它将无法认证你。那么，来看看弗拉菲是如何被使用的。
- en: 'First, we have a computer, a user, and a domain controller. The domain controllers
    have some special services running on them, and one of them is a **key distribution
    center** (**KDC**). If we have a file server that we''re trying to gain access
    to, the user is going to make a request to the domain controller, saying: "I need
    to be authenticated, please." The domain controller responds back with: "Yes,
    what can I do for you? I can authenticate you.", to which the user''s computer
    says: "I need to get a **ticket-granting ticket** (**TGT**)." Because the computer
    and the domain controller are members of the same domain, the domain controller
    can issue this TGT or ticket to the user or computer to be then utilized when
    they want to gain access to resources. When the user/computer wants to gain access
    to the file on the file server, they just simply present their TGT, the file server
    sees it''s from a trusted source, and it will quickly check with the domain controller
    and say: "Is this account still valid?" The reason it does this is in case an
    administrator has locked the user out. Now, just because tickets are being utilized
    here doesn''t mean that you''re safe. We''ll be looking at a tool later in another
    chapter called John the Ripper—a very famous tool, and probably one of the more
    powerful tools out there today. It''s a Linux tool that can crack Unix, LM hash
    passwords, NTLM passwords, and Kerberos passwords.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们有一台计算机、一个用户和一个域控制器。域控制器上运行着一些特殊的服务，其中之一就是**密钥分发中心**（**KDC**）。如果我们有一个文件服务器并尝试访问它，用户会向域控制器发出请求，说：“我需要进行身份验证，请。”域控制器则回应：“好的，我能为你做什么？我可以验证你。”接着，用户的计算机会说：“我需要获取**票据授权票**（**TGT**）。”因为计算机和域控制器属于同一域，所以域控制器可以向用户或计算机发放这个TGT或票据，以便在他们想访问资源时使用。当用户/计算机想要访问文件服务器上的文件时，他们只需提供他们的TGT，文件服务器看到这是来自一个可信来源，便会迅速向域控制器核实并问：“这个账户仍然有效吗？”这样做的原因是为了防止管理员锁定了该用户。现在，仅仅因为票据被使用并不意味着你是安全的。我们稍后会在另一章中看到一个名为
    John the Ripper 的工具——这是一个非常著名的工具，可能是现今最强大的工具之一。它是一个 Linux 工具，可以破解 Unix、LM 哈希密码、NTLM
    密码和 Kerberos 密码。
- en: Salting
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 盐值
- en: Salting? Yes...my hash needs a little salt. So, what happens if you have two
    users with the exact same, identical, password? What is their hash going to look
    like? The solution? We can randomize the hashes by appending or prepending random
    strings—we call these salts—to the password before we hash. This helps us in having
    duplicate hashes and makes it hard for an attacker to find out what's going on.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 盐值？是的……我的哈希需要一点盐。那么，如果你有两个用户，使用完全相同的密码，它们的哈希值会是什么样子呢？解决方案是什么？我们可以通过在密码前面或后面附加随机字符串——我们称这些为盐值——来随机化哈希值，这样可以避免出现重复的哈希值，并且使得攻击者很难弄清楚发生了什么。
- en: Each salt needs to make sure it's unique for each password. Don't use the same
    string of characters for every password. If you do, all I must do as an attacker
    is figure out what your salting string is, and I'll then get everybody's password.
    For example, I have two accounts that are both using the same password, the hash
    values will be identical. If I use a salt, I can append some unique characters
    to the end of the password; therefore, two different accounts using the same password
    have different hash values. To check if the password is correct, we must be able
    to have access to the salt, so it's usually stored in a user account database
    along with the hash or as part of the hash string itself.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 每个盐值都需要确保它对于每个密码都是唯一的。不要为每个密码使用相同的字符字符串。如果你这么做了，作为攻击者，我只需要弄清楚你的盐值字符串是什么，然后就能获得每个人的密码。例如，我有两个账户，它们都使用相同的密码，那么它们的哈希值将是相同的。如果我使用盐值，我可以将一些唯一的字符附加到密码的末尾；因此，两个使用相同密码的不同账户将具有不同的哈希值。为了检查密码是否正确，我们必须能够访问盐值，因此它通常与哈希一起存储在用户账户数据库中，或作为哈希字符串的一部分。
- en: Now, I'll give you an unfortunate shout-out here because Microsoft won't use
    this. They kind of use it, in the aspect that the passwords in AD are hashed,
    but the ending hash is just the username itself. So, again, make sure that if
    you're going to salt your passwords, each salt is unique to each password. If
    you're a developer and you're creating your application and want to make it so
    that people have to log in, a common mistake is they'll hardcode in a salt into
    the program or generate a salt only once and then reuse it. If I'm using the same
    salt for every password, two users with the same password will have the same hash.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我得给你一个不幸的提醒，因为微软并不使用这个方法。它们在某些方面有使用，AD中的密码是经过哈希处理的，但最终的哈希值实际上就是用户名本身。所以，再次提醒，确保如果你为密码加盐，每个盐值都是独一无二的。如果你是开发者，正在创建应用程序并希望让用户登录，一个常见的错误是他们会在程序中硬编码一个盐值，或者仅生成一个盐值并重复使用。如果我对每个密码都使用相同的盐值，两个使用相同密码的用户会有相同的哈希值。
- en: There's also the issue of your salts not being long enough—for example, 3 characters.
    3 characters narrow down the limits of the number of possibilities the attacker
    needs to consider. Now, because I just told you the hash needs to be available,
    that creates a dilemma, right? If the key is kept on the system and the attacker
    gains full access to the system, they'll be able to steal the key no matter how
    long the salt is. The key needs to be stored in external systems such as a physically
    separated server dedicated to password validation. There is specialized hardware
    out there that also helps with storing salt keys.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是你的盐值可能不够长——例如，只有3个字符。3个字符会缩小攻击者需要考虑的可能性范围。现在，因为我刚才告诉过你哈希值需要被存储，这就带来了一个难题，对吧？如果密钥存储在系统中，而攻击者获得了系统的完全访问权限，他们将能够窃取密钥，无论盐值多长。密钥需要存储在外部系统中，比如一个物理隔离的服务器，专门用于密码验证。市面上也有专用硬件帮助存储盐值密钥。
- en: Other cracking methods
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他破解方法
- en: Besides the methods we spoke about previously, there are a couple of other methods
    that deserve a mention.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们之前提到的方法，还有几种其他方法值得一提。
- en: Rainbow tables and other options
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 彩虹表和其他选项
- en: A rainbow table is a precomputed hash table, so I don't have to try every variation
    of the hash values—I precomputed them ahead of time. I just do comparisons. Unfortunately,
    these precomputed hashes take up a lot of storage space. There are, however, free
    rainbow tables you can download.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 彩虹表是一种预计算的哈希表，这样我就不必尝试每个哈希值的变种——我事先计算好了它们。我只需进行比较。不幸的是，这些预计算的哈希值占用大量存储空间。然而，你可以下载一些免费的彩虹表。
- en: Note
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You'd have to google them and be prepared for a HUGE file (**terabytes** (**TB**),
    in some cases). Go to [https://freerainbowtables.com](https://freerainbowtables.com)
    for examples.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须用谷歌搜索它们，并准备一个超大的文件（**太字节**（**TB**），在某些情况下）。可以访问[https://freerainbowtables.com](https://freerainbowtables.com)查看示例。
- en: You can also create your own rainbow tables if you have the storage space to
    handle these. What's interesting is, with new technology such as **solid-state
    drives** (**SSDs**) and cloud computing, attackers are utilizing these technologies
    to create rainbow tables at record speeds and utilizing the processing power of
    Amazon's cloud system or Azure. After they compile them, attackers will then go
    off and sell them.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有足够的存储空间，也可以创建自己的彩虹表。有趣的是，随着**固态硬盘**（**SSDs**）和云计算等新技术的出现，攻击者利用这些技术以创纪录的速度创建彩虹表，并利用亚马逊云系统或Azure的处理能力。在编译完这些彩虹表后，攻击者会去出售它们。
- en: Lookup tables
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查找表
- en: 'We can also utilize **lookup tables** (**LUTs**), which are just plain old
    tables. What this basically says is: "Does any hash out there equal this hash?
    Oh, look—I found one, and the password was password5," because that''s what the
    hash equaled.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以利用**查找表**（**LUTs**），它们就是普通的表格。基本上，这表示：“有没有哪个哈希值等于这个哈希值？哦，看——找到了，一个密码是password5，”因为这就是哈希值的结果。
- en: 'Here are some examples:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些示例：
- en: Does any hash equal the following?
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有没有哪个哈希值等于下面的？
- en: '**5f4dcc3b5aa765d61d8327deb882cf99: FOUND: password5**'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**5f4dcc3b5aa765d61d8327deb882cf99: 找到：password5**'
- en: 'It then continues to go through those tables, saying: "Hey, what about this
    one?" Oh, not in the database, so nobody has that password or hash.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它会继续查看这些表格，表示：“嘿，那个怎么样？”哦，不在数据库中，所以没人拥有这个密码或哈希值。
- en: What about the following?
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 那下面的怎么样？
- en: '**6cbe615c106f422d23669b610b564800: not in database**'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '**6cbe615c106f422d23669b610b564800: 不在数据库中**'
- en: 'Your cracking tool will then continue: "Hey, can I get a letMEin12? Any responses?"'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 你的破解工具将继续工作：“嘿，我能得到letMEin12吗？有回应吗？”
- en: Can I get the following?
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我能得到以下内容吗？
- en: '**630bf032efe4507f2c57b280995925a9: FOUND: letMEin12**'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '**630bf032efe4507f2c57b280995925a9: 找到：letMEin12**'
- en: '"Yes, here''s another one—try this one." Here it is:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: “是的，这是另一个——试试这个。”它是这样的：
- en: '**386f43fab5d096a7a66d67c8f213e5ec: FOUND: mcd0nalds**'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**386f43fab5d096a7a66d67c8f213e5ec: 找到：mcd0nalds**'
- en: And it will continue, depending on the size of the table you download.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 它会继续进行，具体取决于你下载的表格大小。
- en: Reverse LUTs
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 反向查找表（Reverse LUTs）
- en: 'Similar to a LUT is a reverse LUT. These operate by saying: "I have a hash
    for the password of apple123—who on this list uses that hash? Oh, a couple of
    accounts... There''s alice3, 0bob0, and charles8."'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于查找表（LUT）的东西就是反向查找表（reverse LUT）。它们的工作方式是：“我有一个密码的哈希值：apple123——在这个列表中，谁使用了这个哈希值？哦，有几个账户……有alice3，0bob0，还有charles8。”
- en: 'I love technology but sometimes, I look at new things and ask myself: "What''s
    this going to do me security-wise?"'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我热爱技术，但有时我看着新事物时会问自己：“这对我的安全有什么帮助？”
- en: 'Let me show you something. The following screenshot depicts a computer system
    with multiple video cards. It was done as a project:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 让我给你展示一些东西。下面的截图展示了一台装有多个显卡的计算机系统。这是一个项目：
- en: '![Figure 7.8 – GPU cracking system'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.8 – GPU 破解系统](Images/B17486_07_008.jpg)'
- en: '](Images/B17486_07_008.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17486_07_008.jpg)'
- en: Figure 7.8 – GPU cracking system
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.8 – GPU 破解系统
- en: Many of today's video cards have a GPU on them, and GPUs love cracking passwords.
    We typically think of a CPU as having multiple cores—for example, i7 might have
    8 cores, or maybe you got a dual-core. Well, GPUs have hundreds of cores in them.
    In this research project, they set up five of these systems. They had 25 **Advanced
    Micro Devices** (**AMD**) GPUs and, between the five systems, they were connected
    at 10 gigabits per second (Gbps). Guess what? We don't have to do rainbow tables
    anymore. With this system and brute force, this cluster went through 348 billion
    NTLM passwords per second. What this means is a 14-character password took only
    6 minutes to hack.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，许多视频卡上都配有GPU，而GPU非常适合破解密码。我们通常认为CPU有多个核心——例如，i7可能有8个核心，或者你可能有一个双核。实际上，GPU里有数百个核心。在这个研究项目中，他们建立了五个这样的系统。它们有25块**超威半导体**（**AMD**）GPU，并且五个系统之间的连接速度为每秒10吉比特（Gbps）。猜猜看？我们不再需要做彩虹表了。使用这个系统和暴力破解，这个集群每秒能破解3480亿个NTLM密码。这意味着，一个14位密码只需要6分钟就能破解。
- en: What about MD5? Well, I'll do 180 billion per second with this rig and, even
    if you think you're being secure and you're using **Secure Hash Algorithm 1**
    (**SHA-1**), you'll only slow me down to 63 billion passwords per second being
    brute-forced. Remember—a system such as this, I would use in an offline attack.
    I'll get your database and, probably, within a day or two, I'm going to have several
    login options for you.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 那MD5怎么样？嗯，我用这个设备每秒可以做1800亿次，即使你觉得你很安全并且在使用**安全哈希算法1**（**SHA-1**），我也只会把你的破解速度慢下来，变成每秒63亿次密码暴力破解。记住——这种系统，我会用在离线攻击中。我会获取你的数据库，然后可能在一两天内，就能为你找到几个登录选项。
- en: Now that we have worked on gaining access and cracking passwords, let's discuss
    escalating privileges next.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了获取访问权限和破解密码的工作，接下来让我们讨论如何提升权限。
- en: Phase 2 – Escalating privileges
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阶段 2 – 提升权限
- en: Wanting local administrative rights, even though you're not allowed them, is
    what escalating privileges is all about. So, the problem we have here is now we've
    gone through and hacked a password and figured out the user ID, we're stuck with
    the privilege of that user—or are we?
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 想要本地管理员权限，尽管你并不被允许拥有这些权限，这就是提升权限的核心问题。所以，我们现在面临的问题是：我们已经破解了密码并找到了用户ID，但我们被困在该用户的权限内——还是说我们没有？
- en: 'Kevin Mitnick, the world-famous hacker said the following:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 世界著名的黑客凯文·米特尼克（Kevin Mitnick）曾说过：
- en: It's true, I had hacked into a lot of companies and took copies of the source
    code to analyze it for security bugs. If I could locate security bugs, I could
    become better at hacking into their systems—it was all towards becoming a better
    hacker.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这是真的，我曾入侵过很多公司，拿走源代码并分析其中的安全漏洞。如果我能找到安全漏洞，就能在入侵他们的系统时做得更好——这一切都是为了成为一个更好的黑客。
- en: When you think about it, what he was doing was elevating his privileges by getting
    to know the source code and seeing which bugs or vulnerabilities he had to escalate
    out of.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 想一想，他所做的其实是通过了解源代码并查看哪些漏洞或问题可以帮助他提升权限，从而提升了自己的权限。
- en: We've made it in. What now?
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们已经进来了。接下来该做什么？
- en: What do we do now? Remember how we made it in this far? We found a user account
    and cracked their password. Our goal now is to give ourselves adequate rights
    and permissions to do what we wish. So, never assume that just because you're
    not an administrator or don't have administrative rights, you can't accomplish
    your goal.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们该怎么做？记得我们是如何进入的吗？我们找到了一个用户账户并破解了他们的密码。我们现在的目标是给自己足够的权限和许可来做我们想做的事。所以，永远不要认为因为你不是管理员或没有管理员权限，你就不能完成目标。
- en: 'Once we make it in, our next step is to look around. If we make it in as a
    local administrator, I''m going to look at any configuration mistakes that have
    been made. I might also check out any design errors from the network infrastructure
    level. Again, there are many times you might find a target through a Google hack,
    and you make your way in just using a default username and password. You get in
    and think to yourself: "Well, I haven''t fully reconned this environment yet",
    so, we may want to take another look at these design errors. Maybe they''ve been
    misconfigured or didn''t change default passwords or default settings.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们成功进入，下一步是四处查看。如果我们以本地管理员身份进入，我将查看是否有任何配置错误。我还可能会检查网络基础设施层面上的设计错误。再次强调，很多时候你可能会通过
    Google 黑客手段发现目标，然后仅凭默认的用户名和密码就进入了系统。进入后你会想：“嗯，我还没有完全侦察这个环境”，所以我们可能还需要再检查一下这些设计错误。也许它们被错误配置了，或者没有更改默认密码和默认设置。
- en: I also want to get a layout. This target I've hit, what is its purpose on the
    network? I'll also be looking at any programming flaws. I know—programmers *don't
    make mistakes*, right? They just come out with patches to enhance the application.
    That's kind of like IT people—they *don't make mistakes*. They just improve the
    performance.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我还想了解一下布局。这个我已经攻击过的目标，它在网络中的作用是什么？我还会查看是否有编程上的缺陷。我知道——程序员*从不犯错*，对吧？他们只是发布补丁来增强应用程序。这就像
    IT 人员——他们*从不犯错*，他们只是改善性能。
- en: 'Now, as far as our overall goals are concerned, we have four basic methods
    for escalation, as follows:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 至于我们的整体目标，我们有四种基本的提升权限方法，具体如下：
- en: '**Pwning the admin/root account**'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**征服管理员/root 账户**'
- en: One of the goals we're going to have is being able to *pwn* the **admin** or
    the **root** account.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标之一是能够*征服* **管理员** 或 **root** 账户。
- en: '**Taking advantage of vulnerabilities**'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用漏洞**'
- en: The second method is to take advantage of a vulnerability that may be in the
    application or in the operating system that's going to allow you access as a privileged
    user. There are many applications that raise the privilege of the currently logged-in
    user on the backend you may not have considered.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是利用应用程序或操作系统中的漏洞，这些漏洞将允许你以特权用户身份访问。有许多应用程序在后台提升当前登录用户的权限，而这些你可能没有考虑到。
- en: Try using [www.exploit-db.com](http://www.exploit-db.com). It gives insights
    about vulnerabilities you could take advantage of. Some of them we will go through.
    We can do a privilege escalation with this one.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用 [www.exploit-db.com](http://www.exploit-db.com)。它提供了关于你可以利用的漏洞的见解。我们将会详细了解其中的一些。我们可以通过这个来进行权限提升。
- en: '**Using escalation tools**'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用提升权限工具**'
- en: Another method of escalation is firing up a tool such as Metasploit, a complete
    framework and hacking suite designed to allow you to see if you have any exploits
    or any type of vulnerabilities in your network. But obviously, we know attackers
    are going to use these types of tools against us. The downside to Metasploit is
    it's extremely easy to use. You might find a YouTube video about it, which means
    that some 12-year-old is out there coming at your system.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种提升权限的方法是启动像 Metasploit 这样的工具，它是一个完整的框架和黑客套件，旨在让你查看网络中是否存在任何漏洞或其他类型的弱点。但显然，我们知道攻击者会利用这些工具来对付我们。Metasploit
    的缺点是它非常容易使用。你可能会在 YouTube 上找到相关的视频，这意味着可能有个 12 岁的小孩正在试图攻击你的系统。
- en: There are more tools such as these out there, including Canvas and Core Impact,
    which is a complete pentesting tool, and Armitage, which is basically a GUI frontend
    for Metasploit.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多类似的工具，包括 Canvas 和 Core Impact，这些都是完整的渗透测试工具，以及 Armitage，它基本上是 Metasploit
    的图形化前端。
- en: '**Social engineering**'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社会工程学**'
- en: What if we just get somebody to do it for us? That's called social engineering.
    As an attacker, I can persuade people to run an application for me or maybe to
    look at a file for me. I must entice them somehow using one of the core emotions
    of social engineering. Typically, I'm going to do it either out of fear or greed,
    or I need some help—which is a very reliable social engineering aspect, because
    as humans, we like to help, right? All I can do is send you an email, attach a
    script or a program to it, and ask you to double-click on it because it's going
    to *patch your system for you*. I'll make it look as though the email came from
    IT staff. I could create a **Portable Document Format** (**PDF**) file that, when
    opened, executes a program for me.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们让别人为我们做这件事怎么办？这就是所谓的社会工程学。作为攻击者，我可以说服人们为我运行一个程序，或者可能为我查看一个文件。我必须以某种方式引诱他们，利用社会工程学的核心情感之一。通常，我会通过恐惧或贪婪，或者寻求帮助来做这件事——这是一种非常可靠的社会工程学手段，因为作为人类，我们喜欢帮助他人，对吧？我做的就是发一封邮件给你，附上一个脚本或程序，要求你双击它，因为它会*为你修补系统*。我会让它看起来像是IT人员发来的邮件。我还可以创建一个**便携式文档格式**（**PDF**）文件，打开后它会为我执行程序。
- en: Countermeasures
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对策
- en: 'How do we stop this? Well, there are some countermeasures, but you need to
    remember your job is not to stop them – because you can''t. You can only slow
    them down. And how do we do that? Here''s how:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何阻止这种情况发生？好吧，确实有一些对策，但你需要记住，你的工作不是去阻止它们——因为你做不到。你只能减缓它们的速度。那么，我们如何做到这一点呢？以下是方法：
- en: The first way is using encryption, which helps you protect data that is considered
    sensitive. If I've encrypted data to a particular user, then regardless of what
    that user's permissions are or what my user permissions will be, I won't have
    access to that information.
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一种方法是使用加密，这有助于保护被认为是敏感的数据。如果我将数据加密到某个特定用户，那么无论该用户的权限是什么，或者我自己用户的权限是什么，我都无法访问这些信息。
- en: You could also consider giving least privilege when it comes to your users and
    applications. What we mean by this is don't overallocate your privileges. If somebody
    needs the ability to do something on a machine, take the time to figure out which
    rights and permissions they need and only give them those rights and permissions.
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还可以考虑在用户和应用程序方面实施最小权限。我们所说的是，不要过度分配你的权限。如果某人需要在机器上做某件事，花时间弄清楚他们需要哪些权限，并只给予他们这些权限。
- en: You could also look at making sure your updates are done. It drives me bonkers
    because a lot of the privilege escalation issues can be avoided by making sure
    you are patching your systems.
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还可以确保你的更新已完成。这让我感到非常恼火，因为许多权限提升问题可以通过确保你在修补系统来避免。
- en: Another thing you can do is limit the interactive login. Interactive login is
    the right to throw a three-finger salute or the *Ctrl + Delete* keys on a box
    and log in. By default, regular users don't have the right to log in interactively
    on a server.
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还可以做的一件事是限制交互式登录。交互式登录是指在计算机上按下“三指礼”或*Ctrl + Delete*键并登录的权限。默认情况下，普通用户没有权限在服务器上进行交互式登录。
- en: You could also make sure that your service accounts are limited, using the same
    concept that applies to least privilege. I see this mistake done all the time
    where IT will go to install an application—a server application such as **Structured
    Query Language** (**SQL**) or SharePoint—and they need a service account that
    utilizes the machine. As far as the machine is concerned, a user is doing all
    the work, but it's being done by this account. Sometimes, IT will use the administrator
    account on the local box. Again, you need to evaluate what access these service
    accounts need because it could create a vulnerability or a hole for you.
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还可以确保你的服务帐户是有限制的，使用类似于最小权限的概念。我经常看到这种错误，IT人员会去安装一个应用程序——例如**结构化查询语言**（**SQL**）或SharePoint——他们需要一个能够利用机器的服务帐户。就机器而言，所有的工作是由用户执行的，但实际上是由这个帐户来做。有时候，IT会使用本地计算机上的管理员帐户。再一次，你需要评估这些服务帐户需要什么访问权限，因为它可能为你创造了一个漏洞或漏洞点。
- en: Another option is limiting the extent of the code if you're the developer and
    you are creating an application that runs at a high privilege level. Again, typically,
    it's when we take shortcuts that we create issues.
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个选项是限制代码的范围，如果你是开发者并且正在创建一个以高权限级别运行的应用程序。再次强调，通常我们在走捷径时会导致问题的发生。
- en: You can also do privilege separation. With this type of approach, we limit the
    scope of programming errors and possible bugs.
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还可以做权限分离。采用这种方法时，我们可以限制编程错误和可能的漏洞的范围。
- en: 'You can also test the operating system and your apps meticulously and review
    code if you''re a developer. If you are an IT person and a developer says: "Here''s
    a new app we''re going to be using", there should be some type of documentation
    that says what was done where. You should question any type of code somebody wants
    you to place in your environment. And, if you are a developer, don''t go off and
    download somebody''s sample code and just copy and paste it. Make sure you understand
    what each line does.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你是开发者，你还可以仔细测试操作系统和应用程序，审查代码。如果你是IT人员，并且开发者说：“这是我们将要使用的新应用”，那么应该有一些文档说明做了哪些工作。你应该对任何要求你在环境中放置的代码提出质疑。如果你是开发者，不要随便下载某人的示例代码并直接复制粘贴。确保理解每一行代码的作用。
- en: Using multi-factor is another countermeasure. This way, we place another safety-net
    layer for us.
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多因素认证是另一种对策。通过这种方式，我们为自己增加了另一层安全防护网。
- en: Do some stress tests. This is because many times when an application or an operating
    system gets overloaded, it creates vulnerabilities. You may even want to consider
    performing debugging using **BoundsChecker**. However, please realize none of
    these will stop everything from happening, but at least it'll make you feel as
    though you've got a handle on things.
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 做一些压力测试。因为很多时候，当一个应用程序或操作系统过载时，它会产生漏洞。你甚至可能会考虑使用**BoundsChecker**进行调试。然而，请意识到，尽管这些措施无法完全防止所有事件的发生，但至少可以让你感觉自己已经掌握了一些主动权。
- en: Next, we'll discuss the types of escalation that will help us accomplish our
    purpose.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论有助于我们实现目标的不同类型的升级。
- en: Types of escalations
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 升级类型
- en: Now that we know the different countermeasures used, let's talk about the different
    types of escalations.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了不同的对策，让我们来讨论不同类型的升级。
- en: Privilege escalation
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特权升级
- en: This is any condition that allows an attacker to gain elevated access after
    the system has been compromised. So, we take a lower-end account and escalate
    its rights and permissions to a higher account, which allows us to pivot and have
    all kinds of fun. We also have what they refer to as **information disclosure**.
    This is basically any type of vulnerability that allows the attacker to gain access
    to data that is sensitive or protected. We also have what they refer to as **security
    feature bypass**. Now, this is typically caused by a software weakness that allows
    an attacker to bypass policies, validation, or even other safeguards such as bypassing
    **User Account Control** (**UAC**) or any type of filter. There are different
    types of escalation that you can perform. Determining which one you use will depend
    on what it is you're trying to accomplish. Privilege escalation can be accomplished
    by using **dynamic link library** (**DLL**) injection.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这是指任何能够让攻击者在系统被攻破后获得更高权限的情况。换句话说，我们将一个低权限账户的权限提升到更高的账户，这样我们就能进行横向移动，享受各种有趣的操作。我们还涉及到他们所称的**信息泄露**。这基本上是指任何类型的漏洞，允许攻击者访问敏感或受保护的数据。我们还涉及到他们所称的**安全功能绕过**。通常，这是由软件弱点引起的，允许攻击者绕过政策、验证，甚至其他保护措施，比如绕过**用户账户控制**（**UAC**）或任何类型的过滤器。你可以执行不同类型的升级，选择使用哪种方法将取决于你要实现的目标。特权升级可以通过使用**动态链接库**（**DLL**）注入来完成。
- en: Horizontal escalation
  id: totrans-248
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 横向升级
- en: In security terms, horizontal escalation is one of the most common methods used
    by attackers to achieve their objectives.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在安全术语中，横向升级是攻击者用来实现其目标的最常见方法之一。
- en: Attackers will often look for a way through the perimeter to get an initial
    foothold within a network. Often, they find a low-hanging fruit such as a user
    who has left their password blank or a web application that lacks proper security
    controls.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者通常会寻找穿透外围防御的方法，以便在网络内获得初步的立足点。通常，他们会发现一些低挂的果实，比如一个留下空白密码的用户，或者一个缺乏适当安全控制的Web应用程序。
- en: Once they have gained access to the network, the attackers will then look for
    ways to move laterally and spread their infection to as many systems as possible.
    By doing so, they can gather more valuable data or even take control of the entire
    network.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦攻击者获得了对网络的访问，他们将寻找横向移动的方式，并尽可能地将感染传播到更多的系统。通过这样做，他们可以收集更多有价值的数据，甚至控制整个网络。
- en: Offline access
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 离线访问
- en: Offline access is typically looking at machines that may not be always hooked
    up to the network. If a laptop gets stolen or if I'm able to compromise that laptop,
    I'm going to have all the time in the world because it's offline. And because
    of that, I can use some simple exploits to give myself total control of this machine,
    and then, hopefully, when you hook it back in, I'll be able to continue my total
    domination.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 离线访问通常是指那些可能不总是连接到网络的机器。如果一台笔记本电脑被盗，或者我能够攻陷这台笔记本电脑，我就有了无限的时间，因为它是离线的。正因为如此，我可以利用一些简单的漏洞来完全控制这台机器，然后希望当你重新连接它时，我能继续我的完全支配。
- en: DLL and DYLIB hijacking
  id: totrans-254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DLL 和 DYLIB 劫持
- en: 'DLLs haunt us. It''s something we must deal with. Most Windows applications
    don''t use a fully qualified path when they load a DLL, so there''s no structure.
    It basically says: *Run this DLL.* Instead, the default is that when an application
    launches, it first searches the directory from which it''s been launched. Knowing
    most application developers and people take shortcuts—by not specifying a path—an
    attacker can load up a DLL inside of the application directory with malicious
    intent. An example of this is if an application needs the **library.dll** file
    (which is in the system directory) to install the application. If it can''t find
    it, or if it finds it first in the path you''re installing at, it''ll never see
    the one in the system''s directory of Windows. So, when the user goes through
    and loads up the application, it uses the DLL and the attacker will have full
    remote access to that box. Hmm—maybe this should make you wonder about downloading
    torrent files now, right?'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: DLL 文件一直困扰我们。这是我们必须面对的问题。大多数 Windows 应用程序在加载 DLL 时并没有使用完全限定的路径，因此没有结构。它基本上是说：*运行这个
    DLL*。相反，默认情况下，当一个应用程序启动时，它首先会搜索其启动目录。考虑到大多数应用程序开发人员和用户会走捷径——不指定路径——攻击者可以在应用程序目录中加载一个带有恶意意图的
    DLL。一个例子是，如果一个应用程序需要 **library.dll** 文件（该文件位于系统目录中）来安装应用程序。如果它找不到该文件，或者如果它首先在你安装的路径中找到了该文件，它就不会看到
    Windows 系统目录中的文件。所以，当用户运行并加载应用程序时，它使用了该 DLL，攻击者就可以获得对该计算机的完全远程访问。嗯——也许这应该让你开始怀疑现在下载
    torrent 文件了，对吧？
- en: '*Fortnite*, a game that gets played by both children and adults, is extremely
    popular. Knowing this, attackers used to release *patches* to make players invincible
    or to give them extra guns. Well, sure it does, but it''s mostly loaded with something
    else. In fact, security researchers discovered that flaw.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '*Fortnite* 是一款深受儿童和成人喜爱的游戏，极为流行。了解这一点后，攻击者曾经发布 *补丁*，让玩家变得无敌或获得额外的枪支。好吧，当然可以，但它们通常是装载了其他东西。事实上，安全研究人员发现了这个漏洞。'
- en: Don't think for a second Windows is alone in this. Apple is very much a target.
    But instead of using DLLs, Apple uses **DYnamically linked LIBraries** (**DYLIBs**),
    which is basically the same concept. This is a dynamic library, hence the name,
    that an application may call, but DYLIBs are typically specific to a user. So,
    depending on how we want to deploy this, an attacker can just simply place a malicious
    DYLIB into a specific location. In a ton of cases, the loader in OS X is going
    to search for dynamic libraries in multiple paths. This is going to help the attacker
    inject a malicious DYLIB into one of the primary directories and then simply load
    the malicious DYLIB at runtime. This allows attackers to bypass security software,
    as well as even bypass Gatekeeper—a security feature of the macOS system that
    enforces code signing and verifies downloaded applications before allowing them
    to run. But again, I can bypass that all by doing a DYLIB hijack. Okay—let's stop
    picking on software. Let's talk about hardware!
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 别以为 Windows 是唯一的受害者。苹果也是一个非常大的目标。但与使用 DLL 不同，苹果使用 **DYnamically linked LIBraries**（**DYLIBs**），这基本上是相同的概念。这是一个动态库，因此得名，应用程序可以调用它，但
    DYLIBs 通常是特定于用户的。所以，根据我们想要部署的方式，攻击者可以简单地将恶意 DYLIB 放入特定位置。在很多情况下，OS X 中的加载器将会在多个路径中搜索动态库。这将帮助攻击者将恶意
    DYLIB 注入到其中一个主目录中，然后在运行时简单地加载该恶意 DYLIB。这使得攻击者能够绕过安全软件，甚至绕过 Gatekeeper——macOS 系统的安全功能，它强制代码签名并在允许应用程序运行之前验证下载的应用程序。但是，同样的，我可以通过劫持
    DYLIB 绕过这一切。好了——我们别再挑软件的毛病了，来谈谈硬件吧！
- en: Using CPU flaws
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 利用 CPU 漏洞
- en: Let's talk about Spectre and Meltdown, shall we? Both these vulnerabilities
    are CPU-based and, unfortunately, the vulnerability goes back through all different
    types of chips over a long period. Each one of them takes advantage of either
    the memory's cache and the execution order, and/or takes advantage of branch prediction.
    Now, these are geeky terms but know that the vulnerability is there.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来谈谈 Spectre 和 Meltdown，好吗？这两个漏洞都是基于 CPU 的，遗憾的是，这些漏洞跨越了不同类型的芯片，且存在了很长一段时间。它们每个都利用了内存缓存和执行顺序，和/或利用了分支预测。现在，这些术语可能有点难懂，但要知道，漏洞是存在的。
- en: The other issue we have, especially when focusing on things such as Spectre,
    is that it has some interesting issues here because it affects CPUs from Apple,
    AMD, **Advanced RISC Machines** (**ARM**) CPUs, Intel, Samsung, and even Qualcomm.
    These are basically all the mobile phones on the planet, right? This vulnerability
    tricks the processor into exploiting a speculative execution to read restricted
    data. What that means is that if the chip identifies a program that includes multiple
    conditional statements, it'll start to execute and then conclude all possible
    outputs before the program does, which makes the system faster. This vulnerability
    allows the attacker to force the processor to accomplish a speculative execution
    of a read before bounds checking is performed. The result? The attacker can access
    and read **out-of-bounds** (**OOB**) memory locations. Those locations could include
    things such as confidential information—such as credentials that are stored in
    a browser—or even reading kernel memory or performing a web-based attack using
    JavaScript.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们面临的另一个问题，特别是在关注像 Spectre 这样的安全漏洞时，就是它带来了一些有趣的问题，因为它影响了来自 Apple、AMD、**高级 RISC
    机器**（**ARM**）的 CPU、Intel、Samsung 甚至 Qualcomm 的处理器。这些基本上是地球上所有的手机，对吧？这个漏洞通过欺骗处理器，利用预测执行来读取受限数据。这意味着，如果芯片识别到一个包含多个条件语句的程序，它会开始执行，然后在程序执行之前得出所有可能的输出，从而加快系统速度。这个漏洞允许攻击者强制处理器在执行边界检查之前完成预测执行读取。结果是，攻击者可以访问并读取
    **越界**（**OOB**）内存位置。这些位置可能包括机密信息——例如存储在浏览器中的凭证——甚至是读取内核内存或利用 JavaScript 进行基于 Web
    的攻击。
- en: When it comes to Meltdown, this one's not as prevalent in all the CPUs, but
    it does affect any of the processors, whether Intel- or ARM-based, that Apple
    deployed. This vulnerability tricks a process to access OOB memory by exploiting
    CPU optimization mechanisms through speculative execution. The attacker can use
    either one of these vulnerabilities to execute or escalate their privileges by
    forcing an unprivileged process to read other adjacent memory locations, such
    as the kernel memory or physical memory.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 说到 Meltdown，这个漏洞并不是所有 CPU 都存在，但它确实影响了 Apple 部署的所有处理器，不论是基于 Intel 还是 ARM 的处理器。这个漏洞通过利用
    CPU 的优化机制和预测执行，欺骗进程访问越界内存。攻击者可以利用这两种漏洞之一，强制无特权进程读取其他相邻的内存位置，例如内核内存或物理内存，从而提升其权限。
- en: One of the biggest problems with both these vulnerabilities is they're built
    into the chip, and the only fixes that they've been able to come out with to support
    the CPUs that were released that had this vulnerability, which goes back years,
    was a software fix that ended up slowing down the performance of the CPUs.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个漏洞最大的一个问题是，它们是内建于芯片中的，唯一能够修复这些漏洞的方法是针对已发布的受影响 CPU，推出软件修复程序，但这导致了 CPU 性能的下降。
- en: Access token manipulation
  id: totrans-263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问令牌篡改
- en: An attacker can gain escalated privileges through things such as access token
    manipulation. Windows itself uses access tokens to determine the owner of a running
    process. A user or an attacker can manipulate access tokens to make a running
    process appear as though it belongs to someone else other than the user that started
    the process. We refer to those as spoofed tokens.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以通过诸如访问令牌篡改等方式提升权限。Windows 本身使用访问令牌来确定正在运行的进程的所有者。用户或攻击者可以篡改访问令牌，使一个运行中的进程看起来像是属于启动该进程的用户之外的其他人。我们将这些称为伪造令牌。
- en: Application shimming
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用程序修补
- en: This comes into play when the Windows operating system uses the **Windows Communication
    Framework** (**WCF**). We call it a **shim**, and it's what allows Windows 10
    to execute or run older programs. For example, for programs that were created
    under XP and you've upgraded to Windows 10, you still want the application to
    run. These shims provide a buffer between the program and the operating system.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 这在 Windows 操作系统使用 **Windows 通信框架**（**WCF**）时发挥作用。我们称之为 **Shim**，它允许 Windows
    10 执行或运行旧版本的程序。例如，对于那些在 XP 下创建的程序，如果你升级到 Windows 10，仍然希望该应用程序能够运行。这些 Shim 在程序与操作系统之间提供了一个缓冲区。
- en: 'If you have ever done a compatibility wizard for Windows when trying to run
    an application, it''ll ask you questions such as: "Does it need elevated privileges
    or did it run in previous versions of Windows?" That''s helping you to build that
    shim. Now, the buffer, which the shim creates, is referenced when a program is
    launched. It needs to verify whether the program has access to the shim database.
    Some shims can be used to bypass the UAC, inject malicious DLLs, capture memory
    addresses, or even give the attacker the ability to install backdoors or escalate
    their privileges.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经在 Windows 中使用过兼容性向导来尝试运行一个应用程序，它会问你一些问题，比如：“它是否需要提升的权限，或者它是否能在以前版本的 Windows
    中运行？”这帮助你构建那个 Shim。现在，当程序启动时，会引用 Shim 创建的缓冲区。它需要验证程序是否有权限访问 Shim 数据库。一些 Shim 可以用来绕过
    UAC，注入恶意 DLL，捕获内存地址，甚至赋予攻击者安装后门或提升权限的能力。
- en: Other Windows issues
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他 Windows 问题
- en: There are also a ton of processes within the Windows operating system that execute
    binaries automatically as part of their functionality or whatever it is they're
    trying to accomplish with this application. If the filesystem permissions on these
    binaries aren't set appropriately, the attacker can replace these with malicious
    files. We refer to this as a filesystem permission weakness. If the process that
    executes the binary has a higher-level permission, then the binary also executes
    under the higher-level permission, which may include the system account. Attackers
    can take advantage of this technique and replace the original binaries with their
    malicious ones to escalate or elevate their privileges.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 操作系统中还有许多进程会自动执行二进制文件，这是它们功能的一部分，或者是它们试图通过这个应用程序完成的某些任务。如果这些二进制文件的文件系统权限设置不当，攻击者就可以用恶意文件替换它们。我们称之为文件系统权限漏洞。如果执行二进制文件的进程具有更高权限，那么二进制文件也会在更高权限下执行，这可能包括系统账户。攻击者可以利用这种技术，替换原始二进制文件，使用恶意文件来提升或增强他们的权限。
- en: We also have something called **path interception**. This is a method attackers
    use of placing an executable in a particular path so that it'll be executed by
    the application in place of the legitimate target application. Path interception
    helps the attacker maintain persistence on the system as well as escalate their
    privileges.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一种叫做 **路径拦截** 的技术。这是攻击者通过将可执行文件放置在特定路径中，从而让应用程序执行它，而不是合法目标应用程序的方式。路径拦截帮助攻击者在系统中保持持久性，并提升他们的权限。
- en: Scheduled tasks
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定时任务
- en: The Windows operating system has this thing called task scheduler, which allows
    a user to configure to defragment their system every 3 days or so. A user with
    administrative privileges could use these utilities in conjunction with a task
    scheduler to schedule a script or a program that can be executed at a particular
    time and date. If a user provides proper authentication, they can schedule a task
    from a remote system using a **remote procedure call** (**RPC**). The attacker
    can use this technique to execute malicious programs at the system startup, during
    any type of maintenance, as well as performing remote execution and, of course,
    escalating our privileges.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 操作系统有一个叫做任务调度程序的东西，它允许用户配置每大约 3 天就进行一次系统碎片整理。具有管理员权限的用户可以将这些工具与任务调度程序结合使用，来调度在特定时间和日期执行的脚本或程序。如果用户提供了正确的认证，他们可以使用
    **远程过程调用**（**RPC**）从远程系统调度任务。攻击者可以利用这种技术在系统启动时、任何类型的维护过程中执行恶意程序，进行远程执行，当然，还可以提升他们的权限。
- en: Apple issues
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Apple 问题
- en: For non-Windows folks, for macOS or OS X, during the boot process, **launchd**
    is executed to complete the system initialization process. Parameters for each
    of the launch-on-demand and system-level daemons are loaded using **launchd**.
    These daemons have a property list file (**plist**) that's linked to the executables
    that run at the time of booting. The attackers can create and install a whole
    different launch daemon that can be configured to execute at bootup time. These
    weak configurations allow the attackers to alter the existing launch daemons executable
    to maintain persistence within the system or to escalate their privileges.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非 Windows 用户，macOS 或 OS X 系统在启动过程中，**launchd** 被执行以完成系统初始化过程。每个按需启动和系统级守护进程的参数都通过
    **launchd** 加载。这些守护进程有一个属性列表文件（**plist**），该文件与启动时运行的可执行文件关联。攻击者可以创建并安装一个完全不同的启动守护进程，并配置其在启动时执行。这些弱配置允许攻击者修改现有的启动守护进程可执行文件，以便在系统中保持持久性或提升其权限。
- en: 'I know—you''re saying: "Please tell me that''s all." No—there''s even more.
    Remember that **plist** file I just told you about? Well, these files exist for
    any application or service. It includes the necessary information that''s needed
    to configure them. The **plist** files themselves are technically just **Extensible
    Markup Language** (**XML**) files, and how easy is it to modify an XML file? Attackers
    can access and alter these **plist** files to execute malicious code on behalf
    of a legitimate user. They can also use them to maintain persistence, as well
    as escalate their privileges on that box.'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道，你在说：“请告诉我就这些了吧。”不，还有更多呢。记得我刚刚提到的 **plist** 文件吗？这些文件存在于任何应用或服务中。它们包含了配置所需的必要信息。**plist**
    文件本身实际上就是 **可扩展标记语言**（**XML**）文件，修改一个 XML 文件有多容易？攻击者可以访问并更改这些 **plist** 文件，以代表合法用户执行恶意代码。他们还可以利用它们来保持持久性，并提升在该设备上的权限。
- en: Linux issues
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux 问题
- en: 'If you are a Linux person, you''re probably saying: "Man, we''re safe!" Well,
    both in Linux and in macOS, if an application uses a **setuid** or a **setgid**
    flag, then the application will execute with the privileges of the owning user
    or the group. Typically, applications run under the current user''s privilege,
    but there are some circumstances where the program must be executed with elevated
    privileges, but the user running the program doesn''t have those elevated privileges.
    In this case, someone, maybe the developer, could set the **setuid** or the **setgid**
    flag for their application. An attacker could exploit the application with the
    **setuid** or the **setgid** flags to execute malicious code with elevated privileges.
    Do you see what''s going on here? We''re elevating our privileges all over the
    place.'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是 Linux 用户，你可能会说：“哥们，我们是安全的！”其实，不论是 Linux 还是 macOS，如果一个应用使用了 **setuid** 或
    **setgid** 标志，那么该应用将以所属用户或所属组的权限执行。通常情况下，应用是以当前用户的权限运行的，但也有一些情况，程序必须以更高权限执行，而运行程序的用户并没有这些权限。在这种情况下，可能是开发者设置了应用的
    **setuid** 或 **setgid** 标志。攻击者可以利用带有 **setuid** 或 **setgid** 标志的应用，执行具有更高权限的恶意代码。你看出问题了吗？我们在到处提升权限。
- en: Web shells
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Web Shell
- en: The last one is a web shell, which is just a script that can be uploaded to
    a web server—or maybe it becomes part of the server—that enables remote administration
    to a machine. This works well for things such as remote administration using PowerShell.
    The problem is, an attacker can create their own web shells and inject malicious
    scripts into the web server to maintain or escalate their privileges. They can
    also use them as a backdoor to gain access and control the server remotely. Typically,
    a web shell runs under the current user's privileges, but if that box has any
    type of vulnerabilities built into it, they can escalate their privilege and then
    install malicious software, change user permissions, add users and groups, steal
    credentials, read emails—almost anything.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一种是 Web Shell，这只是一种可以上传到 Web 服务器的脚本——或者它可能成为服务器的一部分——允许远程管理机器。这对于使用 PowerShell
    进行远程管理非常有效。问题在于，攻击者可以创建自己的 Web Shell，并将恶意脚本注入 Web 服务器，以维持或提升他们的权限。他们还可以利用它们作为后门，远程访问并控制服务器。通常情况下，Web
    Shell 在当前用户的权限下运行，但如果该机器存在任何类型的漏洞，攻击者就可以提升权限，安装恶意软件、更改用户权限、添加用户和组、窃取凭据、阅读电子邮件——几乎可以做任何事。
- en: Buffer overflows
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓冲区溢出
- en: Let's first back up and understand what the ultimate purpose of any program
    is that runs on a computer—it's to process data of some type. Usually, that data
    is going to be provided by a user, so the program needs to store the data somewhere,
    and the best place to put it into is memory. This is where our troubles begin.
    Many developers assume that user input will be reasonable to a certain extent.
    It would seem kind of unreasonable for, as an example, a URL address to be more
    than, say, 500 characters. And usually, developers will pad this by multiplying
    in either by 2 or even by 10\. So, based on this assumption, the developer could
    reserve memory for a web page address that could hold up to 5,000 characters.
    Now this memory space that's reserved is called a **buffer**, and it's a buffer
    in **random-access memory** (**RAM**). So, because the developer may never suspect
    that someone's going to use more than 5,000 characters, they usually don't apply
    any type of check. The data is just processed as it's applied. So, what happens
    if the user unintentionally—or possibly intentionally, with malicious motives—provides
    a web address that I don't know with 5,500 characters in it? Well, after writing
    that 5,000th character, anything else left over is bad, and it's placed in memory
    after the buffer, which results in a buffer overflow. Now, the purpose of these
    attacks is usually to allow the attacker to run their own code directly on this
    system. This is referred to as **arbitrary code execution**, or possibly they
    can execute their code and transmit it from one machine to another. This is sometimes
    referred to as **remote code execution**.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要回顾并理解任何运行在计算机上的程序的最终目的是处理某种类型的数据。通常，这些数据是由用户提供的，因此程序需要将数据存储在某个地方，而最好的存储位置就是内存。这就是我们麻烦的开始。许多开发者假设用户输入在某种程度上是合理的。例如，假设一个
    URL 地址超过 500 个字符似乎有些不合常理。通常，开发者会通过将其乘以 2 或者 10 来进行填充。基于这一假设，开发者可能会为一个网页地址保留最多可以容纳
    5,000 个字符的内存。那么，这块保留的内存空间就叫做**缓冲区**，并且它位于**随机存取内存**（**RAM**）中。所以，因为开发者可能永远不会怀疑有人会使用超过
    5,000 个字符的输入，他们通常不会进行任何检查。数据只是按原样处理。那么，如果用户无意中——或者可能有恶意动机——提供了一个包含 5,500 个字符的网页地址，会发生什么呢？嗯，在写入第
    5,000 个字符后，剩余的部分就会变坏，它会被放置在缓冲区后面的内存中，导致缓冲区溢出。这些攻击的目的通常是让攻击者能够直接在系统上运行自己的代码，这被称为**任意代码执行**，或者攻击者可以执行自己的代码并将其从一台机器传输到另一台机器，这有时被称为**远程代码执行**。
- en: Denial of service
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拒绝服务
- en: 'Then we have, obviously, our most famous one (probably): **denial of service**
    (**DoS**). This includes conditions that allow attackers to consume all the resources
    of the CPU—the drive, connections, RAM—so that the process can no longer service
    legitimate requests.'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，显然，我们有我们最著名的漏洞（可能是）：**拒绝服务**（**DoS**）。这包括允许攻击者消耗 CPU、硬盘、连接、RAM 等所有资源的条件，从而使进程无法再处理合法请求。
- en: Another type of vulnerability is another famous one, **cross-site scripting**
    (**XSS**). This is a vulnerability whereby a malicious script is injected into
    a website, and then that script is downloaded and executed by the browser on an
    end user's system—or, should I say—a different user's system.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种类型的漏洞是另一个著名漏洞，**跨站脚本攻击**（**XSS**）。这是一种漏洞，恶意脚本被注入到网站中，然后该脚本会被浏览器下载并在最终用户的系统上执行——或者应该说是在其他用户的系统上执行。
- en: Another famous one is directory transversal. This is a vulnerability that allows
    the attacker to access restricted directories from where they've entered. For
    example, if I were to maybe go to my home directory on my production network that
    is assigned to a **D.** **Meredith** directory on a server somewhere, if I'm able
    to execute some malicious code and be able to move over to B. Wayne's directory
    to see their information, or C. Kent's, or even L. Lane's, we might have some
    fun there. We also have what they refer to as **cross-site request forgery** (**CSRF**).
    These types of vulnerabilities allow unauthorized commands to be transmitted from
    the user to a web app.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个著名的漏洞是目录遍历。这是一种漏洞，允许攻击者访问他们进入的目录之外的受限目录。例如，如果我进入了我在生产网络上分配给**D. Meredith**的主目录，假如我能够执行一些恶意代码并转移到B.
    Wayne的目录查看他们的信息，或者C. Kent的，甚至L. Lane的，可能会玩得很开心。我们还称之为**跨站请求伪造**（**CSRF**）。这些类型的漏洞允许未经授权的命令从用户传递到
    Web 应用程序。
- en: So far, we have cracked a password, figured out our user account, got into the
    system, elevated our privileges—so, we're done, right? Well, we may have *pwned*
    the machine so far, but a total pwn is when we can maintain access via executing
    applications.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经破解了密码，找到了我们的用户帐户，进入了系统，并提升了权限——那么，我们就完成了吗？实际上，我们可能已经成功入侵了机器，但完全入侵是指我们能够通过执行应用程序来维持访问。
- en: Phase 3 – Maintaining access and executing applications
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三阶段 – 维持访问并执行应用程序
- en: 'Overall, the whole process in this phase is being able to make sure that we
    can always get back in. Again, from the attacker''s perspective, you don''t go
    through all the steps that we''ve gone through just to say: "Haha, I did it!"
    and walk away, right? We''re also here to see what''s going on and to get a clear
    picture of the system or the target machine. We are also detecting what other
    information could be available to us that might have been blocked to us before.'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，这一阶段的整个过程就是确保我们始终能够重新进入。再说一次，从攻击者的角度来看，你不会仅仅完成我们所经历的所有步骤之后说：“哈哈，我成功了！”然后就离开，对吧？我们还需要继续观察系统或目标机器的状态，获取清晰的画面。我们还会检测哪些以前可能被阻止的信息现在可以访问了。
- en: Let's say I'm an attacker who's created a piece of software, and I put it out
    into the wild and it phones home, and one day I see three systems have installed
    my piece of software. I'll use that software to get back in and then use some
    additional software to make sure I have an extremely clear understanding of the
    environment. One of the things I'll be looking for is if they have any type of
    **intrusion detection system** (**IDS**).
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我是一个攻击者，创建了一款软件，我将它放到网络上，让它与主服务器通讯，某天我发现有三台系统安装了我的软件。我会利用这款软件重新进入，然后使用一些额外的软件，确保我能对环境有极为清晰的理解。我要寻找的一件事是他们是否有任何类型的**入侵检测系统**（**IDS**）。
- en: How do we execute applications?
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何执行应用程序？
- en: 'Well, this is typically applied in one of the following three ways:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这通常是通过以下三种方式之一来实现的：
- en: '**Spyware**: The most common and easiest way is via spyware. I know that''s
    a hot word out in the industry and there are different levels of spyware—for example,
    there are legitimate spyware products out there. If I were to go in and install
    an application on my Android device, many times I''m saying: "Yes—go ahead and
    look at my contacts, or use my network connection."'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**间谍软件**：最常见且最简单的方式是通过间谍软件。我知道这个词在行业中很火，而且间谍软件有不同的层次——例如，市面上也有合法的间谍软件产品。如果我去安装一个应用程序到我的安卓设备上，很多时候我会说：“是的—继续，查看我的联系人，或者使用我的网络连接。”'
- en: 'My father taught me something very valuable. He said: "There is no free lunch."
    If you are old enough to understand that phrase, you know he meant there''s nothing
    for free out there. I know it says it''s free—Gmail says: "Hey, it''s free." But
    is it? We''re paying a price for that. The price is Google going through and looking
    at your emails and looking for specific words so that they can sell marketing.
    That''s how they make their money! Nobody''s out there saying: "I''d like to be
    a Good Samaritan, spend countless hours creating an application, and just give
    it away for free." It doesn''t work that way.'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 我的父亲教了我一件非常宝贵的事情。他说：“没有免费的午餐。”如果你足够大，能理解这句话的含义，你会明白他是说，世上没有什么是免费的。我知道它说是免费的——Gmail说：“嘿，这是免费的。”但真的是吗？我们为此付出了代价。代价就是谷歌会查看你的邮件，寻找特定的词汇，以便进行营销销售。那就是它们赚钱的方式！没人会说：“我想做个好人，花费无数小时创建一个应用程序，然后就免费赠送。”事情不是这样的。
- en: '**Backdoors**: We can execute applications via a backdoor, which allows a user
    or an attacker to come back in without being noticed. With a keylogger, I can
    say anytime a specific keystroke or combination of keystrokes are executed, please
    execute my program. Backdoors are great because they''re stealthy and can also
    be used in **command and control** (**C2**) scenarios to bypass firewalls and
    IDS systems.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后门**：我们可以通过后门来执行应用程序，这允许用户或攻击者在不被察觉的情况下重新进入。通过键盘记录器，我可以设置在特定按键或按键组合被按下时，执行我的程序。后门非常有效，因为它们很隐秘，还可以在**指挥与控制**（**C2**）场景中使用，以绕过防火墙和入侵检测系统（IDS）。'
- en: Spyware and backdoors
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 间谍软件和后门
- en: 'When we talk about spyware, we have this vision that comes up in our minds
    about uneducated users, such as grandmas (or, in my case, nieces and nephews),
    who install fake software or click on a link, and boom: "Bob''s your uncle."'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论间谍软件时，我们心中会浮现出一些没有经验的用户，比如奶奶（或者在我的情况下是侄子侄女），他们安装了假的软件或点击了链接，然后砰的一声：“事情完成了。”
- en: Spyware is normally installed by us when we download a file, app, or free product.
    Typically, the manufacturer wants to know how you're running that product, or
    maybe they are going to make money. In fact, I think it's funny that the last
    time I installed Java, if I hadn't hit the **Advanced** button during installation,
    I would have also installed some additional toolbars and software that I'm sure
    Oracle gets paid for.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 间谍软件通常是在我们下载文件、应用或免费产品时安装的。通常，制造商希望知道你如何使用该产品，或者他们可能会因此赚钱。事实上，我觉得很有趣的是，上次我安装Java时，如果我没有在安装过程中点击**高级**按钮，我也会安装一些额外的工具栏和软件，我敢肯定Oracle会因此赚钱。
- en: 'Spyware is designed to capture our authentication credentials as we type them
    in. An attacker might even capture emails or fire up and record information when
    we type in something on a web form. Again, I''ll use Google as an example since
    they''re the big boy on the block and they give *everything away for free*. A
    lot of it is they''re trying to capture habits. Well, think of that from the attacker''s
    perspective. Could they not profile you a little better if they understood your
    habits? "What kind of habits?" That could be: "Hey, this target uses this password
    when it comes to banking sites", or "They use this password when it comes to their
    social networking sites", or "The target is just using a variation of a specific
    password." If I''m capturing both screenshots and keystrokes, I can start to capture
    habits. Even on your Android phone, if you download a free app from a torrent
    and sideload, it could be malicious, and these apps could start capturing your
    habits. Some legitimate apps track how long the user is using the app or even
    finger-swiping actions on your devices.'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 间谍软件的设计目的是捕捉我们输入的身份验证凭证。攻击者甚至可能捕获电子邮件，或在我们填写网页表单时启动并记录信息。同样，我将以Google为例，因为他们是行业中的大佬，并且他们*免费提供一切*。其中很多目的就是为了捕捉用户的习惯。从攻击者的角度来看，能不能通过了解你的习惯更好地为你画像呢？“什么样的习惯？”那可能是：“嘿，这个目标在银行网站上使用这个密码”，或者“他们在社交网络网站上使用这个密码”，或者“目标只是使用特定密码的变体。”如果我同时捕获屏幕截图和按键，我就能开始捕捉习惯。即使在你的Android手机上，如果你从种子下载了一个免费的应用并进行旁加载，它也可能是恶意的，这些应用可能会开始捕捉你的习惯。有些合法应用会跟踪用户使用应用的时长，甚至记录你在设备上的滑动操作。
- en: 'Also, when you go to install an application on your tablet, phone, computer,
    do you sit down and read the **user license agreement** (**ULA**)? No? I know—I
    sometimes don''t either. But I understand the overall gist of it. That is—one:
    you don''t own the software; and two: we are going to collect information about
    you, possibly access your contacts, see how long you use our app, and maybe see
    which app you open after using our app. If I deem the app to be that worthwhile,
    I''ll accept that as a risk. However, I only accept it as a risk from legitimate
    software companies.'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当你要在平板电脑、手机、电脑上安装一个应用时，你会坐下来阅读**用户许可协议**（**ULA**）吗？不会吗？我知道——我有时候也不会。但我理解它的整体意思。也就是说——第一：你并不拥有软件；第二：我们将收集有关你的信息，可能访问你的联系人，查看你使用我们应用的时长，甚至看看你使用完我们的应用后打开了哪个应用。如果我认为这个应用值得信任，我会把它作为一种风险接受。然而，我只会接受来自合法软件公司的风险。
- en: Types of spyware
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 间谍软件的类型
- en: Spyware is typically installed while installing an application. For example,
    if I download a copy of WinZip, and then during installation, I just hit **Next**,
    **Next**, **Next**, **Next**, **Next**, **Next**, **Next**, **Next**—which they're
    hoping I do—I might install a new toolbar, and that toolbar in **Internet Explorer**
    (**IE**) will track some of my activities.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 间谍软件通常是在安装应用程序时安装的。例如，如果我下载了一个WinZip的副本，然后在安装过程中，我只是一直点击**下一步**，**下一步**，**下一步**，**下一步**，**下一步**，**下一步**，**下一步**，**下一步**——他们希望我这么做——我可能会安装一个新的工具栏，而该工具栏会在**Internet
    Explorer**（**IE**）中跟踪我的部分活动。
- en: Now, think of this from an attacker's perspective. Let's say a new version of
    Photoshop comes out, and as an attacker, I crack that product and put in my own
    piece of spyware so that when the user installs the app, my spyware gets installed.
    I'm going to make sure it's hidden so that they can't see it running. Yes, I can
    hide it from your Task Manager.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '现在，从攻击者的角度考虑这个问题。假设Photoshop推出了一个新版本，作为攻击者，我破解了这个产品，并插入了我自己的间谍软件，这样当用户安装应用时，我的间谍软件就会被安装。我会确保它是隐藏的，这样他们就看不到它在运行。是的，我可以把它隐藏在你的任务管理器中。 '
- en: It's in videos
  id: totrans-303
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它在视频中
- en: 'We also have spyware that comes across via video. I''m not talking about YouTube,
    although I''m pretty sure YouTube does monitor which videos you''re watching on
    their channel. But that would be legitimate, right? Other video sources might
    tempt you with the latest blockbuster movie for free, but the truth is… it''s
    not. I had a nephew who brought me his computer once and said: "Hey, it''s running
    really slow and sluggish."'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有通过视频传播的间谍软件。我不是在说 YouTube，尽管我很确定 YouTube 确实会监视你在他们频道上观看的视频。但那应该是合法的，对吧？其他视频来源可能会用最新的大片电影来诱惑你，免费观看，但事实是...并非如此。我有一个侄子曾经把他的电脑带给我，说：“嘿，运行得很慢而且迟钝。”
- en: Important Note
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Slow performance is one of the signs you have spyware installed.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 速度慢是你安装了间谍软件的迹象之一。
- en: 'As I''m going through and looking at it, I see all these programs that are
    firing up during startup, and as I''m talking to him, he tells me about finding
    this really cool website where he can stream movies that are still in the theater
    for free. Now, again, I''m sure Netflix spies on us; however, I''m more worried
    about someone coming to my house and making a mistake on my network or systems.
    My nephew tried to pull up the web page so that I could see it, and I jumped up:
    "Noooo", and quickly unplugged the network cable because I know what''s out there.'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 当我查看时，我看到所有这些程序在启动时启动，当我和他交谈时，他告诉我找到了一个非常酷的网站，他可以免费观看仍在影院上映的电影。现在，再次，我确信 Netflix
    在监视我们；然而，我更担心有人来到我的家里，对我的网络或系统犯错。我的侄子试图打开网页，以便我能看到它，我跳了起来：“不要”，然后迅速拔掉了网络电缆，因为我知道外面有什么。
- en: Your printer is spying on you
  id: totrans-308
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你的打印机正在监视你
- en: There's also spyware for printing. How about if I load a piece of spyware and
    everything you print, I get a copy of it, please? Think about that for a second.
    What do you print? Are you sure you've never printed tax forms, medical records,
    or—better yet—let's say your doctor gets a piece of spyware on their machine because
    the doctor's receptionist thinks every time a popup comes up saying "You need
    to install this piece of software" Is this because they visit inappropriate or
    malicious websites? An attacker can install a piece of spyware and get a copy
    of every single document printed.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 打印机也有间谍软件。如果我加载一段间谍软件，每次你打印东西，我都能得到一份副本，可以吗？想一想这个。你打印了什么？你确定你从未打印过税表、医疗记录，或者更好的是，假设你的医生的机器上安装了一段间谍软件，因为医生的接待员认为每次弹出窗口显示“您需要安装这个软件”是因为他们访问了不当或恶意的网站？攻击者可以安装一段间谍软件并获得每份打印的文档的副本。
- en: USB is guilty too
  id: totrans-310
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: USB 也有罪
- en: 'We also have USB-based spyware. Here, I have this piece of software that I
    show as kind of a **proof of concept** (**POC**). It''s used quite often out there
    but I always have students come up to me and say: "Is there any way you can give
    me a copy of this whitepaper?" Or, they say: "Can you give me a copy of these
    VMs?" If I had malicious intentions, I could simply say: "Sure, just bring me
    a USB drive", and when they do, I would plug it in. I would have a little program
    whereby as I''m copying files to their USB drive, I''m also injecting spyware
    onto their USB drive so that when they plug it into their system, it injects everything
    silently, without their knowledge. It would also download everything on their
    USB drive to my machine as well.'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有基于 USB 的间谍软件。这里，我有这个软件的一部分，我展示它作为一种**概念验证**（**POC**）。这在外面经常被使用，但我总是有学生过来问我：“你能给我一份这个白皮书的副本吗？”或者，他们说：“你能给我这些虚拟机的副本吗？”如果我有恶意意图，我可以简单地说：“当然，只要给我一个
    USB 驱动器”，当他们这样做时，我会插入它。我会有一个小程序，当我把文件复制到他们的 USB 驱动器时，我也会向他们的 USB 驱动器注入间谍软件，这样当他们将其插入系统时，它会在他们不知情的情况下悄悄注入所有内容。它还会将他们
    USB 驱动器上的所有内容下载到我的机器上。
- en: Mic check – 1,2…1,2
  id: totrans-312
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 麦克风测试 - 1,2...1,2
- en: We also have spyware that's injected into audio. There is no such thing as free
    MP3s! Again, let's think about both sides—legitimate reasons for spyware and the
    dark side of spyware.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有注入到音频中的间谍软件。没有免费的 MP3！再次，让我们思考间谍软件的合法原因和黑暗面。
- en: 'Let''s say you have an account with Spotify, Google, or Google Music. I guarantee
    those companies are monitoring and seeing what you''re doing with their audio
    files: how many machines you''ve installed it on, how many times you''ve listened
    to it, and so on. Some of this is done with cookies, but if you''re installing
    any type of application or plugin in your web browsers, I guarantee you''re getting
    some type of tracking software.'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 比如说你有一个 Spotify、Google 或 Google Music 的账户。我敢肯定这些公司正在监控并查看你在他们的音频文件上的操作：你安装了多少台设备，听了多少次，等等。有些监控是通过
    Cookies 实现的，但如果你在你的网页浏览器中安装了任何类型的应用程序或插件，我敢肯定你正在安装某种跟踪软件。
- en: If I want to get spyware on your machine, I'll go for a new album coming out
    by a popular musician or band, rip it, add my spyware, and post it on torrent
    sites. Whenever somebody downloads it and starts to play music, my spyware would
    kick in.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我想在你的机器上安装间谍软件，我会选择一张受欢迎的音乐人或乐队发布的新专辑，撕掉它，加入我的间谍软件，然后把它发布到 torrent 网站上。每当有人下载并开始播放音乐时，我的间谍软件就会启动。
- en: Email and phishing
  id: totrans-316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 电子邮件和钓鱼攻击
- en: 'We also have spyware that''s distributed via email and the internet. We''ve
    talked about malicious websites, and I''ve seen them. People get emails saying:
    "Hey, this is the IRS. We''re going to start filing charges against you because
    of your tax forms… click here." And you or the user clicks on the link, goes to
    a site, or executes a script that''s malicious in nature.'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有通过电子邮件和互联网传播的间谍软件。我们已经讨论过恶意网站，我也见过这些网站。人们收到邮件说：“嘿，这里是国税局。我们将开始对你提起诉讼，原因是你的税务表格……点击这里。”然后你或用户点击了链接，进入了一个网站，或者执行了一个本质上是恶意的脚本。
- en: Don't think for a second that attacks are limited to PCs/laptops. This is exploding
    on the mobile platform. One of the things I do before installing an application
    on my phone—because I know there could be something there to track what I'm doing—is
    look at the permissions to see what it is they need access to. If it's a game,
    I don't care how cool the game is. If it wants access to my contacts, there's
    no way it's going on my device. Likewise, review the permissions of applications.
    Most of the big vendors require you to do this, whether you're getting it from
    the iTunes Store, the App Store, Google, or Amazon—those I would consider somewhat
    trusted sources. History shows us that there have been many bad apps sneaking
    into their stores.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 不要以为攻击仅限于PC/笔记本电脑。这种攻击在移动平台上正爆炸性增长。每次在我的手机上安装应用程序之前——因为我知道可能会有东西追踪我做什么——我都会查看它所需的权限，看看它需要访问什么。如果是游戏，我不在乎游戏有多酷。如果它要求访问我的联系人，那我绝对不会把它安装在我的设备上。同样，也要查看应用程序的权限。大多数大厂商都要求你这样做，无论你是从
    iTunes 商店、App Store、Google 还是 Amazon 下载——这些我认为是相对值得信赖的来源。历史告诉我们，曾经有很多不良应用悄悄进入了他们的商店。
- en: Be very careful about downloading software or applications from different repositories
    out there, even if it's the coolest thing ever. In fact, that's part of the social
    engineering aspect of hacking. I'm counting on the fact that you want this so
    stinking bad, you're willing to justify and jump through some hoops and maybe
    install a piece of software that's going to help me *pwn* you.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在从不同的资源库下载软件或应用程序时要非常小心，即使它看起来是史上最酷的东西。事实上，这也是黑客社会工程学的一部分。我利用你想要这个东西的心情，靠你愿意为此做出一些妥协和跳过一些障碍，甚至可能安装一款会帮助我*控制*你的软件。
- en: Next, we'll discuss the use of backdoors to further our ability to access our
    targets.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论如何利用后门进一步提升我们访问目标的能力。
- en: More about backdoors
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多关于后门的内容
- en: When it comes to backdoors, we want to make sure we understand what they are.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 说到后门，我们需要确保理解它们的含义。
- en: Backdoors consist of two components—one of them is on the client side, while
    the other is on the server side.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 后门由两个组件组成——其中一个在客户端，另一个在服务器端。
- en: The client is what I want to hopefully install on my targets, while the server
    is the box that all the clients will report into.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端是我希望能安装到目标上的部分，而服务器是所有客户端汇报的地方。
- en: Many backdoors will also have automation built into them. Some of that automation
    could include things such as a **connect-back technique**. This is where I can
    get the client side installed on a target (maybe because they've downloaded my
    free evil copy of Photoshop), and, to bypass the security of most firewalls (most
    firewalls block all inbound connections unless they've been initiated by an outbound
    connection), I have the client connect back through the firewall to my server
    side.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 许多后门也会内置自动化功能。其中一些自动化功能可能包括**回连技术**。这就是我可以在目标上安装客户端（也许是因为他们下载了我的免费邪恶版本的Photoshop），为了绕过大多数防火墙的安全性（大多数防火墙会阻止所有入站连接，除非它们是由出站连接发起的），我让客户端通过防火墙回连到我的服务器端。
- en: We might also use what's referred to as the first-line backdoor, which is sending
    the initial malware. The primary backdoor acts as a downloader for other malware
    that we then get to install. Normally, when somebody is infected, there's going
    to be multiple backdoors created, not just one. So, if I get the first-line backdoor
    installed, then the second-line backdoor is what goes out and steals the information
    I'm looking for.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可能使用所谓的第一线后门，即发送初始恶意软件。主要后门充当其他恶意软件的下载器，然后我们安装这些恶意软件。通常，当某人被感染时，不仅会创建一个后门，而是会创建多个后门。因此，如果我安装了第一线后门，那么第二线后门就会出去并窃取我正在寻找的信息。
- en: You may be thinking "I'll just delete it if I detect it" or "I have antivirus
    installed". Well, the issue here is that part of the automation of most of these
    backdoors and spyware programs includes the ability to make it impossible to update
    Windows. They disable your antivirus product, infect your host file, make sure
    you can't open it, and lock down the system to stop you from fixing it. Or, at
    least, it's going to take somebody with some computer knowledge, which typically
    isn't the standard user, to repair it.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想：“如果我检测到了，我就删除它”或者“我已经安装了杀毒软件”。问题在于，大多数这些后门和间谍软件程序的自动化部分包括使Windows无法更新的能力。它们会禁用你的杀毒软件产品，感染你的主机文件，确保你无法打开它，并锁定系统以阻止你修复它。或者，至少需要一些计算机知识的人来修复它，而这通常不是标准用户。
- en: Common backdoors
  id: totrans-328
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常见后门
- en: Some of the more common backdoors are the most popular ones out there. Back
    Orifice was a popular one. This was created by an organization that was called
    *Cult of the Dead Cow*. They got the name *Back Orifice* from the fact that Microsoft
    had a product line for all their server platform products. Not only Server 2000,
    but also SQL and Exchange, were all part of the BackOffice product line, so, making
    fun of it, they called it Back Orifice.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 一些更常见的后门是最流行的。Back Orifice是一个流行的后门。这是由一个名为*Cult of the Dead Cow*的组织创建的。他们从Microsoft为所有服务器平台产品提供的产品线中得到了*Back
    Orifice*的名称。不仅是Server 2000，还有SQL和Exchange，都是BackOffice产品线的一部分，所以，为了取笑它，他们称之为Back
    Orifice。
- en: Sercomm manufactures most routers and parts that go on the router, and routers
    are sold by Netgear, Cisco, Linux and so on. Well, there was a backdoor in these
    devices, and it's funny that they came out with a patch that was supposed to fix
    the backdoor but didn't—all it did was hide the backdoor. Their backdoor worked
    across a particular port so that an attacker could open up a remote shell, reset
    the router, or even make modifications to the configuration.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: Sercomm制造大多数路由器和安装在路由器上的零部件，路由器由Netgear、思科、Linux等公司销售。嗯，这些设备中有一个后门，有趣的是，他们发布了一个应该修复后门的补丁，但实际上并没有——它只是隐藏了后门。他们的后门通过特定端口工作，以便攻击者可以打开远程shell，重置路由器，甚至对配置进行修改。
- en: When we talk about backdoors, I can't go very far without talking about some
    government agencies. Some of these backdoors were included in hardware being sold
    to other countries. The **National Security Agency** (**NSA**) has been working
    hard to come up with backdoors for encryption technologies. In fact, in early
    2015, Microsoft issued a security advisory where they admitted they were aware
    of a security feature bypass vulnerability, which was known as **FREAK**. **FREAK**
    is short for **Factoring Attack on RSA-EXPORT Keys** and is a known MitM vulnerability
    caused by weak website encryption. It made it possible for attackers to backdoor
    in and spy on secured communications. You'll never guess who took advantage of
    that one!
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论后门时，我无法避免提到一些政府机构。部分后门被植入了卖给其他国家的硬件中。**国家安全局**（**NSA**）一直在努力为加密技术开发后门。事实上，在2015年初，微软发布了一个安全公告，承认他们知道存在一个安全功能绕过漏洞，称为**FREAK**。**FREAK**是**RSA-EXPORT密钥的因式分解攻击**的缩写，是一种已知的中间人攻击漏洞，由于网站加密弱，使得攻击者可以利用该漏洞植入后门并窃听加密通信。你永远猜不到是谁利用了这个漏洞！
- en: 'There are also consumer products. Remote exec is probably one of the more popular
    ones out there. You can use this product to install applications silently, meaning
    that the user doesn''t see an application being installed, executing scripts,
    copying, modifying, or deleting files. Maybe do a filter and say: *send me all
    DOCs*. I could even change the admin password or turn the machine off or on at
    any given time. Again, this product is designed for administrators to manage their
    environment, but if I install something such as this on your machine or get a
    client to install it, and have it report back to my server, I''ll have total control
    of your box.'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 也有一些消费级产品。远程执行可能是其中更受欢迎的一种。你可以使用这个产品来悄悄地安装应用程序，意味着用户看不到安装过程、执行脚本、复制、修改或删除文件。你甚至可以做个过滤器，设置为：*只给我所有的DOC文件*。我甚至可以在任何时候更改管理员密码，或者关闭或开启机器。再说一遍，这个产品是为了管理员管理环境而设计的，但如果我在你的机器上安装了这样的东西，或者让某个客户端安装它，并让它向我的服务器回报，那我就能完全控制你的机器。
- en: We've discussed how to maintain access and execute applications through several
    different tools and options, allowing us continued access to a system or network
    while remaining undetected. Next, we'll discuss hiding our tools.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了如何通过几种不同的工具和选项维持访问并执行应用程序，这些方式允许我们在保持隐蔽的情况下继续访问系统或网络。接下来，我们将讨论如何隐藏我们的工具。
- en: Phase 4 – Maintaining access and hiding your tools
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4阶段 – 维持访问权限和隐藏工具
- en: 'I know what you''re thinking. There''s no way he can come up with a joke for
    this one, right? So, when I''m talking about hiding your tools, what we''re really
    getting into here is something I saw on one of those sarcastic t-shirts: *Shhhh…I''m
    hiding from stupid people!* That''s what we''re going to do here—hide our tools
    so that less intelligent people or those who are not security-minded will not
    be able to find them. Again, the last thing we want to do is go through all this
    effort to get our machine totally pwned and then lose it because we don''t hide
    our software from users or IT experts.'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道你在想什么。你肯定在想，他肯定想不出什么笑话来解释这一点吧？所以，当我谈到隐藏工具时，其实我们真正想讨论的是我在那些讽刺的T恤上看到的一句话：*嘘……我在躲避愚蠢的人！*
    这就是我们要做的——隐藏我们的工具，让那些智力水平较低或者不懂安全的人找不到它们。再说一次，我们最不希望做的事情就是在付出了所有努力，确保我们的机器完全被攻陷后，却因为没有将软件从用户或IT专家面前隐藏起来而丢失它。
- en: Rootkits
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Rootkit
- en: When you find a rootkit in your environment, you're going to be terrified beyond
    the capacity for rational thought. You'll think, mother-puss-bucket!
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在环境中发现rootkit时，你会恐惧得失去理智。你会想，天哪，真是个糟糕的情况！
- en: Security Note
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 安全提示
- en: If you discover a system with a rootkit installed, you should never trust it.
    Don't *clean* it. Don't try to fix it. You need to reimage the system from scratch—operating
    system and apps, all new. Please don't make the mistake of trying to *save* the
    system.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现一个系统上安装了rootkit，你永远不该信任它。不要*清理*它。不要尝试修复它。你需要从头开始重新安装系统——操作系统和应用程序，全部重新安装。请不要犯试图*拯救*这个系统的错误。
- en: 'Rootkits were first discovered by something that Sony tried to slip past everybody.
    This was back in 2005 when Sony started loading copy protection measures on about
    22 million **compact discs** (**CDs**). When you inserted the CD into a computer,
    the CD installed a piece of software that modified the operating system so that
    it would interfere if you tried to copy the CD. What was bad is this: 1) The rootkit
    couldn''t be uninstalled; 2) It created additional vulnerabilities. And one of
    the programs that they utilized actually installed even if the user denied or
    refused its **end-user license agreement** (**EULA**), and it phoned home and
    reported what the user''s listening habits were. Now, this is back during the
    height of things such as Napster.'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: Rootkit 最早是由索尼公司试图悄悄让大家忽视的事情发现的。这发生在 2005 年，当时索尼开始在约 2200 万张**光盘**（**CD**）上加载复制保护措施。当你将
    CD 插入计算机时，CD 会安装一段修改操作系统的软件，以便如果你试图复制 CD，它就会进行干扰。问题在于：1) 这个 rootkit 无法卸载；2) 它会创建额外的漏洞。而且他们使用的其中一个程序，即使用户拒绝或拒绝接受**最终用户许可协议**（**EULA**），也会被安装，并且会连接到主机报告用户的听歌习惯。那时正是像
    Napster 这样的服务盛行的时候。
- en: This was discovered by Mark Russinovich, the gentleman who created the Sysinternals
    software suite. He saw something going on with the CDs and he reported it. Nobody
    believed him, except for one small antivirus firm called **F-Secure**. F-Secure
    was one of the first companies that came out with one of the first rootkits and
    uninstallers.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 这件事是由 Mark Russinovich 发现的，他是 Sysinternals 软件套件的创建者。他注意到光盘出现了异常，并且报告了这一现象。没有人相信他，除了一个小型的
    antivirus 公司——**F-Secure**。F-Secure 是最早推出 rootkit 和卸载工具的公司之一。
- en: 'So, why do we use rootkits? Well, they have two primary functions associated
    with them: remote control or a backdoor. As well as eavesdropping, rootkits allow
    an attacker to gain administrative control over a computer. This means that they
    can run any program, see what people are doing on the system, and even change
    the system''s configuration.'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们为什么使用 rootkit 呢？其实它有两个主要功能：远程控制或后门，以及窃听。rootkit 允许攻击者获得计算机的管理员控制权限，这意味着他们可以运行任何程序，查看用户在系统上的操作，甚至更改系统的配置。
- en: There are different types of rootkits out there allowing for different functionality,
    but the biggest issue is these are extremely hard to remove. Rootkits are the
    mother of all infections if you want to think of it from a virus perspective.
    So, again, why are rootkits used? Well, we'll gain remote-control access and watch
    what's going on with the environment. If you're thinking "I just got my antivirus
    and it's doing just fine—it didn't detect it", you need to make sure your antivirus
    is always up to date, but there is something out there referred to as the polymorphism
    of rootkits. This technology makes rootkits extremely difficult to find because
    of what it allows a rootkit to do. It allows a rootkit to rewrite the core assembly
    code. So, now, suddenly, your antivirus, especially if it's signature-based, is
    useless.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 市面上有许多不同类型的 rootkit，具有不同的功能，但最大的问题是它们极其难以删除。从病毒的角度来看，rootkit 可以被认为是所有感染的“母体”。那么，rootkit
    为什么会被使用呢？嗯，我们通过它可以获得远程控制的权限，并观察环境中发生的情况。如果你认为“我刚装了杀毒软件，它一切都好——没有检测到”，那你需要确保你的杀毒软件始终保持更新，但有一种被称为
    rootkit 多态性（polymorphism）的技术。这项技术使得 rootkit 极难被发现，因为它允许 rootkit 重写核心汇编代码。结果，你的杀毒软件，尤其是基于签名的，几乎变得毫无用处。
- en: The only way to find rootkits that use polymorphism would be to use technology
    that looks deep inside the operating system and compares it against a baseline
    of what a good operating system, or a healthy operating system, would be like.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 发现使用多态性的 rootkit 的唯一方法是使用能够深入操作系统内部，并将其与健康操作系统的基准进行比较的技术。
- en: 'There are several types of rootkits out there, as outlined here:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出了几种不同类型的 rootkit：
- en: '**User-mode rootkit**: In user mode, the rootkit runs on the computer with
    administrative rights or privileges. This allows the rootkit to alter security,
    as well as hide processes, files, system drivers, and system services, and the
    rootkit stays installed by just simply copying the files to the computer''s hard
    drive and automatically launching them every time the system boots. The downside,
    at least from the attacker''s perspective, is that user mode is one of the only
    types that antivirus and anti-spyware applications can detect.'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户模式rootkit**：在用户模式下，rootkit在计算机上以管理员权限或特权运行。这使得rootkit能够修改安全设置，并隐藏进程、文件、系统驱动程序和系统服务，rootkit通过简单地将文件复制到计算机硬盘并在每次系统启动时自动启动，从而保持安装。缺点是，至少从攻击者的角度来看，用户模式是杀毒软件和反间谍软件应用程序能够检测到的少数几种类型之一。'
- en: '**Kernel-mode rootkit**: What the attackers have done at this point is they
    know user-mode rootkits can be detected—so, how about if we just load the rootkit
    at the same level as the operating system? At this point, the operating system
    can''t be trusted. One of the most famous kernel-mode rootkits was Da IOS Rootkit,
    which was focused on Cisco''s **iPhone OS** (**iOS**) operating system. So, yes—you
    can get rootkits on network devices.'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内核模式rootkit**：攻击者此时所做的是，他们知道用户模式的rootkit可以被检测到——那么，如何让rootkit与操作系统在同一级别加载呢？此时，操作系统就无法再被信任。最著名的内核模式rootkit之一是Da
    IOS Rootkit，它专注于思科的**iPhone操作系统**（**iOS**）。所以，是的——你可以在网络设备上找到rootkit。'
- en: '**Hybrid rootkit**: This is the best of both worlds, where we can take some
    of the characteristics from a user-mode rootkit, being that it''s easy to use
    and stable, along with the kernel-mode rootkit—meaning: I can hide this thing.
    This is one of the more popular rootkits out there today.'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混合型rootkit**：这是两者的最佳结合，我们可以从用户模式rootkit中借用一些特点，比如易于使用和稳定性，再结合内核模式rootkit——也就是说：我可以隐藏这个东西。这是目前比较流行的rootkit之一。'
- en: '**Firmware**: This type of rootkit is similar to a user-mode or a kernel-mode
    rootkit, but this rootkit actually hides in the firmware when the computer shuts
    down—so, when you restart the computer, the rootkit just reinstalls itself. When
    we say that it hides itself inside of firmware, it could be anything from a microprocessor
    code to a **Peripheral Component Interconnect** (**PCI**) expansion card firmware.
    And again, on every restart, the rootkit gets reinjected.'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**固件**：这种类型的rootkit类似于用户模式或内核模式的rootkit，但这种rootkit实际上藏匿在计算机关机时的固件中——所以，当你重新启动计算机时，rootkit会自动重新安装。当我们说它藏匿在固件中时，它可以是从微处理器代码到**外设组件互联**（**PCI**）扩展卡固件的任何东西。而且，每次重新启动时，rootkit都会被重新注入。'
- en: '**Virtual rootkit**: These are relatively new, and the most popular one I can
    think of is called Blue Pill, which is based on x86 virtualization. It was a POC
    that was presented in *Black Hat* back in 2006\. The concept of Blue Pill was
    to trap a running instance of an operating system by simply starting a thin hypervisor
    and then virtualizing the rest of the machine underneath it. The previous operating
    system would remain, and any references to devices or files, or anything that
    dealt with hardware interrupts or requests for data, including system time, could
    be intercepted or faked by the new hypervisor.'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟rootkit**：这些是相对较新的，我能想到的最流行的一个叫做Blue Pill，它基于x86虚拟化。它是2006年在*Black Hat*会议上展示的一个POC（概念验证）。Blue
    Pill的概念是通过简单启动一个薄型虚拟机监控器（hypervisor），然后将其余的机器虚拟化，从而陷入一个正在运行的操作系统实例。原本的操作系统仍然存在，任何对设备或文件的引用，或者涉及硬件中断或数据请求的任何操作，包括系统时间，都可以被新的虚拟机监控器拦截或伪造。'
- en: 'The gentleman who came up with this made a statement at *Black Hat* that he
    felt it would be 100% undetectable because the rootkit itself was virtualized.
    You might say: "Yes, but I still have an antivirus, and I keep it up to date."
    Well, it doesn''t matter. Your antivirus might pick up the fact that you have
    a rootkit on your machine, and you can try to clean it off, but I want you to
    repeat after me, this is SuperDale rule number 385: "Any system that''s been detected
    with a rootkit is no longer trusted." What that means is you''re going to take
    it offline, format the hard drive, and reinstall. Do not—this is my personal feeling—continue
    using an operating system that has already been compromised because you don''t
    know if it''s firmware-based; cleaning it may clean the one instance, but as soon
    as you restart the machine, you''re back to square one.'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 提出这个想法的绅士在*黑帽大会*上表示，他认为这将是100%无法被检测到的，因为根工具本身是虚拟化的。你可能会说：“是的，但我仍然有杀毒软件，并且我保持它的更新。”好吧，这没有关系。你的杀毒软件可能会发现你的计算机上有根工具，且你可以尝试清除它，但我希望你跟我重复一句话，这是SuperDale规则第385条：“任何被检测到有根工具的系统，都不再值得信任。”这意味着你将把它脱机，格式化硬盘并重新安装。不要——这是我个人的看法——继续使用已经被攻破的操作系统，因为你不知道它是否是基于固件的；清除它可能清除掉一个实例，但一旦你重启计算机，你就又回到了原点。
- en: Now that we're here, let's look at some interesting rootkits.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经到了这里，让我们来看一些有趣的根工具。
- en: Horse Pill
  id: totrans-353
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**马赛药丸**'
- en: This rootkit was presented at *Black Hat* back in 2016 by a security engineer
    and member of the Red Team for Intel. Horse Pill was a POC Linux rootkit. That
    was really kind of interesting because it infected the internal RAM disk. Once
    there, it was put into a mount and a **persistent ID** (**PID**) namespace that
    allowed it to run covertly, including its storage. This also allowed it to run
    some network systems without the user knowing, such as a DNS tunnel.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 这个根工具在2016年的*黑帽大会*上由英特尔的安全工程师和红队成员展示。马赛药丸是一个POC Linux根工具。那真的很有意思，因为它感染了内部RAM磁盘。一旦感染，它被放入一个挂载点和一个**持久ID**（**PID**）命名空间，这让它能够隐蔽地运行，包括它的存储。这还使它能够在用户不知情的情况下运行一些网络系统，比如DNS隧道。
- en: Don't worry—I'm not going to just pick on Linux! Yes—we've got Windows too.
    There's one out there known as the GrayFish rootkit, which runs inside the Windows
    operating system. It is one of the most modern and sophisticated malwares implanted
    from a group that was called the **Equation Group** and was designed to provide
    an almost invisible presence using hidden storage, as well as malicious commands
    executed inside the Windows operating system. This was developed around 2013,
    but variations of it have been popping up all over the place. The reason it's
    so malicious is when the computer starts, GrayFish hijacks the operating system
    loading mechanisms by injecting its own code into the boot record. This basically
    allows it to control the launching of Windows at each stage, bypassing the Windows
    Secure Boot controls. Rootkits use stealthy storage, but GrayFish implemented
    its own encrypted virtual filesystem inside of the Windows registry.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 别担心——我可不是只针对Linux！没错——我们也有Windows。那里有一个被称为GrayFish的根工具，它在Windows操作系统内部运行。它是由被称为**方程组**的一个组织植入的最现代、最复杂的恶意软件之一，旨在通过隐藏存储以及在Windows操作系统内部执行恶意命令，提供几乎不可见的存在。它大约是在2013年开发的，但其变种已经遍布各地。它如此恶意的原因在于，当计算机启动时，GrayFish通过将自己的代码注入到启动记录中来劫持操作系统加载机制。这基本上使它能够控制每个阶段Windows的启动，绕过Windows的安全启动控制。根工具使用隐秘存储，但GrayFish在Windows注册表中实现了自己的加密虚拟文件系统。
- en: 'If that''s not emough to scare you, check this out. Hold on to your socks here.
    You ready? The Equation Group has released a module named **nls_933w.dll** that
    was the first of its kind that was designed to reprogram or reflash a computer''s
    hard drive and its firmware with the malicious code. It has been found in drives
    from Seagate to Toshiba, Samsung, Western Digital, Micron, Nextdoor, IBM, and
    Hitachi. You may be saying: "Wow, whoever created this really thought this through."
    Yes—its origins are from some of the tools that my big brother—as I like to call
    the NSA—uses.'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这还不足以让你害怕，那就看看这个吧。抓紧你的袜子，准备好了吗？方程组发布了一个名为**nls_933w.dll**的模块，这是第一种旨在重新编程或重新刷新计算机硬盘及其固件的恶意代码。它已在从Seagate到Toshiba、Samsung、西部数据、Micron、Nextdoor、IBM和日立的硬盘中被发现。你可能会说：“哇，创造这个的人真是深思熟虑。”没错——它的起源来自于我的“大哥”——我喜欢称之为NSA——使用的一些工具。
- en: Alternate Data Streams
  id: totrans-357
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 替代数据流
- en: 'First, I need to make sure I have your attention. Next to passwords, this is
    my next biggest pet peeve. When it comes to **Alternate Data Streams** (**ADS**),
    there''s something you need to understand. First, this is not a well-known feature.
    I''m surprised how many times I teach a security class and I mention ADS to people
    that have been in IT for years whose jaws drop as they say: "I didn''t know that
    was something that could be done."'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我需要确保你注意到了。紧接着密码，这就是我最头痛的事。说到 **替代数据流**（**ADS**），有些事情你需要理解。首先，这并不是一个广为人知的功能。我惊讶的是，每次我在授课时提到
    ADS，都会有一些在 IT 领域工作多年的人的下巴掉下来，他们会说：“我不知道这竟然是可以做的。”
- en: ADS has been around since NT 3.1\. That's a long time ago, but it's still being
    used today. The reason this feature was first created was—thanks, Steve Jobs—so
    that Microsoft could be compatible with the Macintosh **Hierarchical File System**
    (**HFS**). Now, the Macintosh filesystem stores its data in two parts. There's
    a data fork and resource fork. The data fork is where we store the data itself
    about that file. The resource fork is what gives us additional information about
    a file. Because of these two forks, we're able to hide files extremely efficiently.
    So, this is one of those necessary evils. We want to be able to store additional
    data about a document, as well as the document itself.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: ADS 从 NT 3.1 就已经存在了。这是很久以前的事了，但至今仍在使用。这项功能最初的创建原因是——感谢史蒂夫·乔布斯——微软能够与 Macintosh
    **层次文件系统**（**HFS**）兼容。现在，Macintosh 文件系统将数据分为两部分存储。一部分是数据 fork，另一部分是资源 fork。数据
    fork 用于存储关于该文件的实际数据，而资源 fork 则提供关于文件的额外信息。正因为有了这两个 fork，我们能够极其高效地隐藏文件。因此，这是一种“必要的恶行”。我们希望能够存储与文档相关的附加数据以及文档本身。
- en: Detecting rootkits
  id: totrans-360
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测 rootkit
- en: 'As far as detecting rootkits is concerned, it depends on the type of rootkit
    that is installed. It could be one of the following methods:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 至于检测 rootkit，它取决于安装的 rootkit 类型。它可能采用以下几种方法之一：
- en: '**Integrity-based detection**: This can be regarded as a substitute to both
    signatures in a heuristic-based detection. What happens is the user will run a
    tool such as Tripwire or **Advanced Intrusion Detection Equipment** (**AIDE**)
    on a clean system. The tool then creates a baseline of a clean system and stores
    it in a database, and then we can use that database to compare existing workstations
    to see if there are any issues.'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于完整性的检测**：这可以看作是对启发式检测中签名的替代。其原理是用户会在干净的系统上运行一个工具，如 Tripwire 或 **高级入侵检测设备**（**AIDE**）。该工具会创建一个干净系统的基准，并将其存储在数据库中，然后我们可以利用该数据库将现有工作站与其进行比较，以查看是否存在问题。'
- en: '**Signature-based detection**: This is like a fingerprint. It compares the
    characteristics of all the system processes, as well as the executable files with
    a database that''s been created of known rootkit fingerprints—very similar to
    how most of our virus programs work.'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于签名的检测**：这就像指纹一样。它通过将所有系统进程及可执行文件的特征与已创建的已知 rootkit 指纹数据库进行比较——这与大多数病毒程序的工作方式非常相似。'
- en: '**Runtime execution path profiling**: This technique compares the runtime execution
    path of all the processes and the executable files. Normally, the rootkit adds
    new code near to the routine''s execution path, which destabilizes it, and this
    runtime execution path profile picks it up.'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行时执行路径分析**：该技术通过比较所有进程和可执行文件的运行时执行路径来工作。通常情况下，rootkit 会在常规执行路径附近添加新的代码，这会使得执行路径不稳定，而这个运行时执行路径分析方法可以检测到这种变化。'
- en: '**Heuristic/behavior-based detection**: This works by identifying the deviations
    of the normal operating system behaviors and their patterns. The cool thing about
    these types of detection is that they are normally capable of identifying new,
    as well as previously unidentified, rootkits. They''re able to do this because
    they can see a difference in what would be considered normal as far as the system
    pattern or its behaviors is concerned.'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启发式/行为基于检测**：这种方法通过识别操作系统正常行为及其模式的偏差来工作。关于这些类型的检测，有一点非常酷的是，它们通常能够识别新的以及以前未识别的
    rootkit。它们之所以能做到这一点，是因为它们能够看到在系统模式或行为方面，什么被认为是正常的。'
- en: There are tons of tools out in the world that will help you detect rootkits,
    and that's fine and dandy, but a lot of times, attackers are coming up with new
    ways of bypassing or being undetected by this type of protection. So, it's sometimes
    best to check manually, and there are *two* different steps to do that.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 世界上有很多工具可以帮助你检测 rootkit（根套件），这很好，但很多时候，攻击者会想出绕过这些保护或让它们无法被检测的新方法。所以，有时最好手动检查，而这有*两个*不同的步骤。
- en: 'The first and most common step is doing it through the filesystem by typing
    in **d-i-r**, which is short for directory; **/s** is to include subdirectories,
    followed by **/b**, which uses a bare format, meaning: I don''t need any header
    information or summary; I just need the information itself. We will then type
    **/a**, which basically says: I want to include the following attributes. The
    attribute we''re specifying here is **h**, which is hidden files. We would save
    that result, and then run a very similar command, except that you''ll notice it''s
    a little different on **ah**. Instead of **ah**, we do **a-h**. **h** means not—so,
    don''t give me the hidden attributes. You would save those results and boot off
    a clean CD—it could be a Windows CD, an installation CD—and you get to Command
    Prompt and run the same commands again and save that output.'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步也是最常见的一步，是通过文件系统来执行的，方法是输入**d-i-r**，它是目录（directory）的缩写；**/s**是包含子目录，接着输入**/b**，它使用简单格式，意思是：我不需要任何头部信息或摘要，只需要信息本身。然后我们输入**/a**，它基本上表示：我想包括以下属性。我们这里指定的属性是**h**，表示隐藏文件。我们将保存该结果，然后运行一个非常类似的命令，但你会注意到在**ah**上略有不同。不是**ah**，而是**a-h**。**h**表示不——所以，不要给我隐藏的属性。你会保存这些结果，并从一个干净的
    CD 启动——可以是 Windows CD，安装 CD——进入命令提示符，再次运行相同的命令并保存输出。
- en: The second step is where we determine what the differences are.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步是我们确定差异所在的步骤。
- en: We'll download a program called WinDiff by Microsoft and run that on the two
    sets of results to detect file-hiding ghostware. What we mean by that is files
    that aren't recognized while the system is on, which is what we did in the first
    two steps, versus files that are exposed or visible because we booted off the
    CD. Now, it should be noted that sometimes, you'll get some false positives, and
    you'll just need to track those down. This method doesn't detect stealth software
    that's hiding, for example, in the **basic input/output system** (**BIOS**) or
    in a bad disk sector or an alternate data stream, or even video card e-prompts.
    But it's something, right?
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将下载微软的一个名为 WinDiff 的程序，并将其运行在两组结果上，以检测隐藏的“幽灵”文件。我们所说的“幽灵文件”是指在系统运行时无法被识别的文件，这正是我们在前两步中所做的操作，与那些因为我们从
    CD 启动而被暴露或可见的文件不同。现在，需要注意的是，有时你会得到一些误报，届时你只需要追踪这些结果。这种方法无法检测到隐藏在**基本输入/输出系统**（**BIOS**）中的隐形软件，或者隐藏在坏磁盘扇区、替代数据流，甚至视频卡
    EEPROM 中的隐形软件。但至少这是一种方法，对吧？
- en: Steganography
  id: totrans-370
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 隐写术
- en: '**Steganography**, or—as we sometimes refer to it, **stega**—is the ability
    to take a document and hide it in plain sight. We do that by placing the document
    in—more commonly—a photo so that we can hide it behind or inside of other data.
    Unlike ADS, the size of the picture file—in this case, a photo—will increase in
    size. If I have a picture that''s 1 **megabyte** (**MB**) in a file and a document
    that''s 4 MB, the picture file becomes 5 MB in size. It hides inside of the other
    file by replacing the unused data bits with bits from the file you''re trying
    to hide. It''s extremely difficult to detect. In fact, some will say it''s almost
    impossible to detect.'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '**隐写术**，或者我们有时称之为**stega**，是将文件隐藏在明面上的能力。我们通常通过将文档放置在——更常见的是——一张照片中，从而将其隐藏在其他数据之后或内部。与
    ADS 不同，照片文件的大小——在这个例子中是照片——会增加。如果我有一张大小为 1 **兆字节**（**MB**）的图片和一个 4 MB 的文档，那么这张图片的文件大小将变为
    5 MB。它通过用你想隐藏的文件的比特来替换未使用的数据位，隐藏在其他文件中。这种方法极难检测。事实上，有人甚至说它几乎不可能被检测到。'
- en: Steganography is broken into two classifications, technical and linguistic.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 隐写术分为两类：技术性隐写和语言性隐写。
- en: Technical steganography hides the message using a scientific method, whereas
    linguistic steganography hides the message inside of what they refer to as a carrier
    or some type of media that's used to transfer files back and forth or communicate.
    As far as the type of steganography that's accessible to us is concerned, we can
    hide files in an image. We can also use steganography to hide files in another
    document, very similar to what we saw with ADS.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 技术隐写术使用科学方法隐藏消息，而语言隐写术则将消息隐藏在他们称之为载体的东西中，或者某种用于传输文件或通信的媒介。就我们能访问的隐写术类型而言，我们可以将文件隐藏在图像中。我们还可以使用隐写术将文件隐藏在另一个文档中，这与我们看到的ADS非常相似。
- en: Steganography can also be used to hide files inside of a folder, or the object
    representing the folder, and audio. Yes—I can hide a hidden message or file inside
    of an audio file. In fact, this is one of the things that's going on right now
    in fighting terrorism. A lot of terrorist organizations communicate with each
    other by hiding their messages inside audio and video-based files. You always
    hear on the news that a new video's been released by some terrorist organization
    and that the government is currently *reviewing* it. What they're doing here is
    going through and checking to see if there's anything hidden inside the video,
    as well as looking at the video in depth to find out if they can find out where
    it's coming from by looking at backgrounds and listening to background noises.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 隐写术还可以用来将文件隐藏在文件夹内，或者表示文件夹的对象和音频文件中。是的——我可以将隐藏的消息或文件隐藏在音频文件中。事实上，这是目前反恐斗争中正在进行的一项技术。许多恐怖组织通过将消息隐藏在音频和视频文件中与彼此通信。你总是在新闻中听到某个恐怖组织发布了新视频，而政府正在*审查*它。他们在做的就是检查视频中是否有隐藏的东西，同时深入分析视频，试图通过观察背景或听背景噪音来找出视频的来源。
- en: We can also hide our files inside of web-based applications or websites so that
    you must know exactly where to go within the website, either to a hidden image,
    a hidden URL, or just a hidden location on the page that would reveal information
    that is normally not visible.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将文件隐藏在基于网页的应用程序或网站中，这样你必须知道网站中的确切位置，无论是隐藏的图片、隐藏的URL，还是页面上隐藏的某个位置，这些位置会揭示通常不可见的信息。
- en: We can also use it to hide information that we refer to as white space. We do
    this with a program called **Snow** that conceals the message, which is normally
    in an **American Standard Code for Information Interchange** (**ASCII**) format
    by pinning white space to the end of each line. Now, because the space and tabs
    are generally not visible in text viewers, the message is effectively hidden,
    and if you use built-in encryption, the message can even be read even if it's
    detected.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以用它来隐藏我们称之为空白的内容。我们通过一个叫做**Snow**的程序来做到这一点，它通过将空白内容附加到每行的末尾来隐藏消息，通常是**美国信息交换标准代码**（**ASCII**）格式。由于空格和制表符通常在文本查看器中不可见，因此消息实际上是隐藏的，而且如果你使用内置加密，即使消息被检测到，也可以被读取。
- en: Steganography can also be used to hide files in emails. In fact, it's very similar
    to the web-based steganography types because most emails will support **HyperText
    Markup Language** (**HTML**). So, again, we can hide files or messages inside
    of emails.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 隐写术也可以用于在电子邮件中隐藏文件。实际上，它与基于网页的隐写术类型非常相似，因为大多数电子邮件都支持**超文本标记语言**（**HTML**）。因此，我们可以再次在电子邮件中隐藏文件或消息。
- en: 'We can also use it to hide files inside **digital versatile discs** (**DVDs**).
    So, again, I ask you this: Where did you get your last copy of the latest movie
    release? I could be hiding my tools, and when you run the movie or go to watch
    it, my tools inject.'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以用它将文件隐藏在**数字多功能光盘**（**DVD**）中。所以，再次提问：你上次获取最新电影的副本是从哪里来的？我可能在其中隐藏了我的工具，当你播放电影或观看时，我的工具就会注入。
- en: 'Natural text-based is another type of steganography. These types of programs
    will convert information you''re trying to transmit into a flow of text like a
    play. So, if somebody''s looking at your text document, they''ll be wondering:
    "What is this guy talking about? He''s just talking about one day he went for
    a walk with his dog."'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 自然文本隐写术是另一种隐写术类型。这类程序会将你试图传输的信息转换为一段像话剧一样的文本流。所以，如果有人查看你的文档，他们可能会疑惑：“这个人在说什么？他只是说有一天他和狗一起去散步。”
- en: One of the more popular programs out there, Sams Big G PlayMaker, goes through
    and you hide your text within the play itself.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 市面上一款比较流行的程序，Sams Big G PlayMaker，会在话剧本身中隐藏你的文本。
- en: Another type of steganography is hidden operating system-based. This is where
    I inject my tool inside of some of your hidden operating system files and my tools
    execute anytime your operating system needs to use those files.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种类型的隐写术是基于隐藏操作系统的。这是指我将我的工具注入到你的某些隐藏操作系统文件中，并且我的工具会在操作系统需要使用这些文件时执行。
- en: Now that we have been able to maintain access and hide our tools, let's discuss
    how we get out without leaving a trail and being detected by clearing logs and
    evidence we've been there.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经能够维持访问并隐藏我们的工具，现在让我们讨论如何在没有留下痕迹并避免被检测到的情况下，清除日志和证据，确保我们曾经存在过。
- en: Phase 5 – Covering your tracks – Clearing logs and evidence
  id: totrans-383
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五阶段 – 掩盖痕迹 – 清除日志和证据
- en: So, why do we clear our tracks?
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么我们要清除痕迹？
- en: First, we want to remain obscure. We don't want somebody knowing that we've
    gotten into the system. Otherwise, all our hard work has gone to waste.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要保持模糊性。我们不希望有人知道我们已经进入系统，否则我们所有的努力都将付诸东流。
- en: 'Second, we want to avoid tracebacks. This is where the victim hires a forensic
    expert to figure out exactly what happened. Back in the day when I had my own
    **internet service provider** (**ISP**) service, I had a customer who was complaining
    he wasn''t getting the speeds he was paying for. Together with one of my friends,
    a white hat from Microsoft and author of several security and **integrated security
    system** (**ISS**) books, we saw something going on with this customer''s antenna.
    We discovered the customer had plugged the internet connection directly into his
    company laptop without going through a router, and he got totally pwned. We found
    out the reason he wasn''t getting the speeds is because somebody had uploaded
    movies on his laptop and was using his laptop as a parted FTP server. My friend
    was able to use some of the log files we were looking at to see the IP addresses
    of the connections coming in, and we were able to trace it back to an IP address
    in Germany. There wasn''t much we could do about it at that point, which I guess
    really does sum up one of our biggest problems with the internet today: there
    is no sheriff in town. But that''s what we want to avoid. We want to avoid tracebacks.'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们需要避免回溯。这是指受害者雇佣取证专家来查明到底发生了什么事。以前我经营着自己的**互联网服务提供商**（**ISP**）服务时，有个客户抱怨说他的网速不如他支付的速度。和我的一个朋友，一位来自微软的白帽子黑客兼多本**集成安全系统**（**ISS**）书籍的作者，我们注意到这个客户的天线出现了问题。我们发现客户直接将互联网连接插入到他的公司笔记本电脑里，而没有通过路由器，这样他就完全被黑了。我们查明了他网速慢的原因，是因为有人将电影上传到他的笔记本电脑，并将其用作一个私人FTP服务器。我的朋友利用我们查看的日志文件，找到了连接进入的IP地址，我们追溯到了德国的一个IP地址。那时我们已无能为力，这也总结了我们今天面临的互联网最大问题之一：没有网络警察。但是这正是我们想要避免的情况，我们要避免回溯。
- en: Third, we want to convince the victim or victims there is nothing is going on.
    "This machine has not been compromised; continue to do what you're doing." In
    fact, it's when machines start acting funny that people start getting their suspicions
    up, right? Now, we could also talk about the big issue for attackers not wanting
    to be detected as they don't want to go to jail.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，我们要让受害者或多个受害者相信没有发生任何事情。“这台机器没有被攻破；继续做你正在做的事情。”事实上，正是当机器开始表现异常时，人们才会产生怀疑，对吧？现在，我们也可以谈论攻击者不希望被发现的重大问题，因为他们不想进监狱。
- en: Next, we'll look at a basic method of clearing our tracks, which would be the
    action of a good attacker, and then we'll look at what a great attacker might
    accomplish.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将介绍一种清除痕迹的基本方法，这也是一个优秀攻击者的做法，之后我们再看看一个伟大攻击者可能达成的成就。
- en: Basic method – Five things to do
  id: totrans-389
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本方法 – 五个必须做的事情
- en: 'A basic method is what a good attacker would accomplish or do while covering
    their tracks. They''re going to do some basic things, and most of this will be
    detected very easily. This is what they''ll do:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 一种基本方法是一个优秀攻击者在掩盖痕迹时会做的事情。他们会做一些基本的操作，而这些操作大多数很容易被检测出来。以下是他们会做的事情：
- en: '**Clear browser history**: A basic method would be to clear any browser history
    on that machine relating to looking up information about the target, the vulnerabilities
    that are on the target, or if they''re trying to upload a file or download a file
    from a website. If they''ve done any type of research, they''re going to want
    to clear out the browser history.'
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**清除浏览器历史记录**：一种基本的方法是清除与查看目标信息、目标上的漏洞或尝试从网站上传或下载文件相关的浏览器历史记录。如果他们进行过任何类型的研究，他们将想要清除浏览器历史记录。'
- en: '**Delete cookies**: There''s also the issue of internal users not wanting the
    IT department or security professionals to know that they are looking up things
    about how to crack a hash on a Windows 7 box. They might also delete cookies.
    In the case of a website, cookies are designed to contain information about your
    preferences for that website. I''m always amazed that I have a lot of people that
    will come to me and say: "Can you help me clean up my computer?" and I''ll be
    looking around only to notice their history and browser have been cleared out,
    but they forgot about the cookies. Well, it''s all about the cookie. Cookies contain
    information about the sites they''ve visited, so this would be another entry that
    an attacker would want to delete.'
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**删除 cookies**：还有一个问题是，内部用户可能不希望 IT 部门或安全专业人员知道他们正在查找如何破解 Windows 7 系统上的哈希值的内容。他们也可能删除
    cookies。在网站的情况下，cookies 用于存储有关你在该网站上偏好的信息。我总是感到惊讶的是，我经常会有很多人来找我说：“你能帮我清理一下我的电脑吗？”我会四处查看，结果发现他们的历史记录和浏览器已经被清空，但他们忘记了
    cookies。嗯，问题就在于 cookies。cookies 包含了关于他们访问过的网站的信息，所以这是攻击者希望删除的另一个条目。'
- en: '**Delete downloads**: You will want to delete any downloads that may have been
    done on this machine. Maybe as an attacker, I''ve downloaded a payload file that
    I made available on a website somewhere or an FTP site, so I would want to delete
    those.'
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**删除下载文件**：你将想要删除这台机器上可能下载的任何文件。也许作为攻击者，我下载了一个有效载荷文件，这个文件通过某个网站或 FTP 站点提供，因此我会想要删除这些文件。'
- en: '**Delete passwords**: I''d also want to clean out any password managers that
    may be on this machine. This would be more toward the aspect of an internal user
    who wants to make sure that nobody sees what their passwords are, but this would
    also possibly apply to an attacker.'
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**删除密码**：我还会想要清除机器上可能存在的任何密码管理器。这更倾向于内部用户，希望确保没有人看到他们的密码，但这也可能适用于攻击者。'
- en: '**Delete private data**: They''ll also want to delete any private data that
    may be on the machine.'
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**删除私人数据**：他们还会想要删除机器上可能存在的任何私人数据。'
- en: As an instructor, I go to different training centers, and most of them provide
    an instructor machine for me which I use while I'm teaching. While I'm using that
    machine, I may check my email, load up my Dropbox or my OneDrive, and on the very
    last day, I have a script I carry around with me now on a thumb drive I execute
    off. It goes through and clears out all that private data for me. You could say
    these would be some good guidelines to follow if you were ever in fear of somebody
    utilizing the same machine you've been using.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名讲师，我会去不同的培训中心，大多数培训中心会提供一台供我使用的讲师机器，而我在教学时会用这台机器。在使用那台机器时，我可能会查看我的电子邮件，打开我的
    Dropbox 或 OneDrive，而在最后一天，我会携带一个我现在随身携带的脚本，存储在一个 U 盘里，我会执行它。它会清除所有私人数据。你可以说，如果你担心别人会使用你曾使用的机器，这些就是一些不错的清理指南。
- en: Advanced methods
  id: totrans-397
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级方法
- en: Advanced methods are what great hackers do. This is about clearing out the logs.
    There are certain files on the system tracking everything happening on a machine
    and recording it inside of a text file. Now, you must be careful how this is done
    if you're clearing out the logs—you don't want to raise a flag about your activity.
    It can raise an obvious flag something has been messed with and removed. In fact,
    you'll see an event ID 1102, which is a *log was cleared* error.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 高级方法是优秀黑客使用的技术。这涉及到清除日志。系统上有一些文件会跟踪机器上发生的所有事件，并将其记录在文本文件中。现在，在清除日志时必须小心——你不想引起关于你活动的警觉。它可能会引起明显的警告，表明某些东西已经被篡改并删除。事实上，你会看到事件
    ID 1102，这是一个 *日志已被清除* 错误。
- en: 'The overall concept here with advanced methods is a great attacker is not going
    to just clear out the logs. They are going to use tools to help them do the following:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 这里高级方法的总体概念是，优秀的攻击者不会仅仅清除日志。他们将使用工具帮助他们完成以下任务：
- en: Disable and turn off auditing so that the system is no longer looking at what
    they are doing. Simply open Command Prompt and use a built-in utility called Auditpol
    for audit policy. I want to set a category called Logon/logoff, and I'd like to
    change the success rate, so that any successful logins are disabled, as well as
    any failures.After disabling auditing, they then do their damage, try to hack
    the password, make modifications to files—whatever they need to do.
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用并关闭审计，使得系统不再监视他们的操作。只需打开命令提示符并使用名为Auditpol的内置工具来设置审计策略。我想设置一个名为“Logon/logoff”的类别，并希望更改其成功率，这样任何成功的登录都将被禁用，任何失败也都一样。禁用审计后，他们就开始破坏，尝试破解密码，对文件进行修改——做他们需要做的事情。
- en: Then, after they are done, they simply turn the auditing back on.
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，在他们完成后，他们只需重新开启审计即可。
- en: We have now covered the necessary steps to leave a system that's been hacked
    and some of the best ways to leave while covering our tracks.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经讲解了离开被黑客入侵系统的必要步骤，以及一些在掩盖痕迹时的最佳离开方法。
- en: Summary
  id: totrans-403
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed the five phases of system hacking. In *Phase 1*,
    we covered how to gain access to the system. Once we understand the system and
    which services are running, we need to find out what the username and password
    are. We also discussed the various ways to crack passwords. *Phase 2* discussed
    escalating privileges. We can either escalate the privilege of an account we create
    or take an account that already exists. In *Phase 3*, we discussed how to maintain
    access by launching applications and tools that will allow you to continue your
    attack from inside the system and allow you to can get back in more easily. *Phase
    4* discussed the various ways of hiding our tools. This allows us to hide information
    or anything we may want to use in our attack. *Phase 5* discussed covering our
    tracks and how we do that. It covered how to disable auditing, allowing you to
    accomplish the purposes of your hacking, and then how to enable auditing and get
    back out of the system undetected.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了系统入侵的五个阶段。在*阶段 1*中，我们讲解了如何获取对系统的访问权限。一旦我们了解系统以及正在运行的服务，我们需要弄清楚用户名和密码是什么。我们还讨论了破解密码的各种方法。*阶段
    2*讲解了权限提升。我们可以提升我们创建的账户的权限，或者获取一个已经存在的账户。*阶段 3*讨论了如何通过启动应用程序和工具来保持访问权限，这将允许你继续在系统内部进行攻击，并使你能更轻松地再次进入。*阶段
    4*讨论了隐藏我们的工具的各种方法。这使我们能够隐藏信息或我们可能在攻击中使用的任何东西。*阶段 5*讨论了如何掩盖我们的痕迹及其方法。它讲解了如何禁用审计，使你能够完成黑客攻击的目的，然后如何重新启用审计并不被察觉地退出系统。
- en: There are plenty of advantages to learning how to hack a system. You will be
    able to discover holes in your security, and if you know how to hack, you'll know
    how to better set up and protect yourself from other hackers, and you'll know
    the main issues involved in keeping your systems safe.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 学习如何入侵系统有很多优势。你将能够发现自己安全中的漏洞，如果你知道如何入侵，你就能知道如何更好地设置并保护自己免受其他黑客攻击，同时你还会了解保持系统安全的主要问题。
- en: Next up, we get to hack humans, or what is called social engineering.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们要入侵人类，或者说是所谓的社会工程学。
- en: Questions
  id: totrans-407
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'As we conclude, here is a list of questions for you to test your knowledge
    regarding this chapter''s material. You will find the answers in the *Assessments*
    section of the *Appendix*:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们总结之前，这里有一系列问题，供你测试你对本章内容的理解。你可以在*附录*的*评估*部分找到答案：
- en: Which filesystems are supported by **Alternate Data Streams** (**ADSes**)?
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**备用数据流**（**ADSes**）支持哪些文件系统？'
- en: VHD
  id: totrans-410
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: VHD
- en: FAT32
  id: totrans-411
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: FAT32
- en: NTFS
  id: totrans-412
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: NTFS
- en: CDFS
  id: totrans-413
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: CDFS
- en: What utility can be used to stop the auditing or logging of events?
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以使用什么工具来停止事件的审计或日志记录？
- en: Auditpol
  id: totrans-415
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审计策略
- en: ADS
  id: totrans-416
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: ADS
- en: Regedit
  id: totrans-417
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册表编辑器
- en: NTFS
  id: totrans-418
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: NTFS
- en: An attacker adding higher privileges to their account (adding themselves to
    the administrators group) is called what?
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者将更高的权限添加到其账户（将自己添加到管理员组）被称为什么？
- en: Trinity slide
  id: totrans-420
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 三位一体幻灯片
- en: Vertical escalation
  id: totrans-421
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 垂直升级
- en: Sideloading
  id: totrans-422
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 边下载
- en: Pass the hash
  id: totrans-423
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Hash传递
- en: Clark brings in a new keyboard to work and gives it to Lois; soon after, Lois's
    credentials are being used on other systems. What do you suspect is the cause?
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克拉克带着一个新键盘来到工作，并把它交给了洛伊斯；不久后，洛伊斯的凭据被用在了其他系统上。你怀疑是什么原因造成的？
- en: A keylogger
  id: totrans-425
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 键盘记录器
- en: Malware
  id: totrans-426
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 恶意软件
- en: MFA attacks
  id: totrans-427
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: MFA攻击
- en: Ransomware
  id: totrans-428
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 勒索软件
