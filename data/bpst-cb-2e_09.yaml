- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Attacking the Client
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 攻击客户端
- en: Code available on the client that is executed in the browser requires testing
    to determine any presence of sensitive information or the allowance of user input
    without server-side validation. We will learn how to perform these tests using
    Burp Suite.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端可用的代码会在浏览器中执行，因此需要进行测试，以确定是否存在敏感信息，或是否允许用户输入而没有服务器端验证。我们将学习如何使用 Burp Suite
    执行这些测试。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍以下配方：
- en: Testing for clickjacking
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试点击劫持
- en: Testing for DOM-based cross-site scripting
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试基于 DOM 的跨站脚本攻击
- en: Leveraging DOM Invader to test for DOM XSS
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用 DOM Invader 测试 DOM XSS
- en: Testing for JavaScript execution
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试 JavaScript 执行
- en: Testing for HTML injection
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试 HTML 注入
- en: Testing for client-side resource manipulation
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试客户端资源篡改
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To complete the recipes in this chapter, you will need the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章中的配方，您需要以下内容：
- en: OWASP Broken Web Applications
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP 异常 Web 应用程序
- en: OWASP Mutillidae link
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP Mutillidae 链接
- en: Burp Suite Proxy Community or Professional ([https://portswigger.net/BurpSuite/](https://portswigger.net/BurpSuite/))
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Burp Suite Proxy 社区版或专业版 ([https://portswigger.net/BurpSuite/](https://portswigger.net/BurpSuite/))
- en: Testing for clickjacking
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试点击劫持
- en: '**Clickjacking** is also known as a **UI redress attack**. This attack is a
    deceptive technique that tricks a user into interacting with a transparent **iframe**
    and, potentially, sending unauthorized commands or sensitive information to an
    attacker-controlled website. Let’s see how to use Burp Clickbandit to test whether
    a site is vulnerable to clickjacking.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**点击劫持** 也称为 **UI 重定向攻击**。这是一种欺骗技术，它通过诱使用户与透明的 **iframe** 进行交互，从而可能将未经授权的命令或敏感信息发送到攻击者控制的网站。让我们看看如何使用
    Burp Clickbandit 测试网站是否容易受到点击劫持攻击。'
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We’ll use the OWASP Mutillidae II application and Burp Clickbandit to determine
    whether the application protects against clickjacking attacks.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 OWASP Mutillidae II 应用程序和 Burp Clickbandit 来确定该应用程序是否能防御点击劫持攻击。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the **Home** page of OWASP Mutillidae II.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 OWASP Mutillidae II 的 **首页**。
- en: 'Switch to **Burp** and, from the top-level menu, select **Burp Clickbandit**:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 **Burp**，然后从顶层菜单中选择 **Burp Clickbandit**：
- en: '![Figure 9.1 – Clickbandit menu item](image/B21173_Figure_9.01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.1 – Clickbandit 菜单项](image/B21173_Figure_9.01.jpg)'
- en: Figure 9.1 – Clickbandit menu item
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.1 – Clickbandit 菜单项
- en: 'A pop-up box explains the tool. Click the **Copy Clickbandit to** **clipboard**
    button:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 弹出框会解释该工具。点击 **复制 Clickbandit 到** **剪贴板** 按钮：
- en: '![Figure 9.2 – Copying code to the clipboard](image/B21173_Figure_9.02.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.2 – 复制代码到剪贴板](image/B21173_Figure_9.02.jpg)'
- en: Figure 9.2 – Copying code to the clipboard
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.2 – 复制代码到剪贴板
- en: 'Return to the Firefox browser and the landing page of Mutillidae. Make sure
    you are not logged into the application. Press *F12* to bring up the developer
    tools. From the developer tools menu, select **Console**, and look for the prompt
    at the bottom:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Firefox 浏览器和 Mutillidae 的着陆页面。确保您没有登录到应用程序。按 *F12* 以打开开发者工具。从开发者工具菜单中选择 **控制台**，然后查看底部的提示：
- en: '![Figure 9.3 – The F12 developer tools Console prompt](image/B21173_Figure_9.03.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.3 – F12 开发者工具控制台提示](image/B21173_Figure_9.03.jpg)'
- en: Figure 9.3 – The F12 developer tools Console prompt
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3 – F12 开发者工具控制台提示
- en: 'In the **Console** prompt (for example, **>>**), paste the Clickbandit script
    you copied to your clipboard:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **控制台** 提示框（例如 **>>**）中，粘贴您复制到剪贴板的 Clickbandit 脚本：
- en: '![Figure 9.4 – Pasted Clickbandit code](image/B21173_Figure_9.04.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.4 – 粘贴的 Clickbandit 代码](image/B21173_Figure_9.04.jpg)'
- en: Figure 9.4 – Pasted Clickbandit code
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.4 – 粘贴的 Clickbandit 代码
- en: 'After pasting the script into the prompt, press the *Enter* key. You should
    see Burp Clickbandit’s **Record mode**. Click the **Start** button to begin:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 粘贴脚本到提示框后，按下 *Enter* 键。您应该看到 Burp Clickbandit 的 **记录模式**。点击 **开始** 按钮开始：
- en: '![Figure 9.5 – Starting Clickbandit record mode](image/B21173_Figure_9.05.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.5 – 启动 Clickbandit 记录模式](image/B21173_Figure_9.05.jpg)'
- en: Figure 9.5 – Starting Clickbandit record mode
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.5 – 启动 Clickbandit 记录模式
- en: Start clicking around on the application after it appears. Click available links
    on the top Mutillidae menu, click available links on the side menu, or browse
    to pages within Mutillidae. Once you’ve clicked around, press the **Finish** button
    on the Burp Clickbandit menu.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序出现后开始点击。点击 Mutillidae 顶部菜单中的可用链接，点击侧边菜单中的可用链接，或浏览到 Mutillidae 内的页面。一旦您点击完毕，按下
    Burp Clickbandit 菜单上的**完成**按钮。
- en: You should notice big red blocks appear transparently on top of the Mutillidae
    web pages. Each red block indicates a place where a malicious **iframe** can appear.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该注意到，Mutillidae 网页上方透明地出现了大红色方块。每个红色方块都表示可能出现恶意 **iframe** 的位置。
- en: '![Figure 9.6 – Framing of victim web page](image/B21173_Figure_9.06.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.6 – 受害者网页框架](image/B21173_Figure_9.06.jpg)'
- en: Figure 9.6 – Framing of victim web page
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.6 – 受害者网页框架
- en: 'Feel free to click each red block to see the next red block appear, and so
    on, until you see the message **You’ve** **been clickjacked!**:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 随意点击每个红色方块，你会看到下一个红色方块出现，依此类推，直到你看到信息 **你已经被点击劫持！**：
- en: '![Figure 9.7 – Final confirmation message](image/B21173_Figure_9.07.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.7 – 最终确认消息](image/B21173_Figure_9.07.jpg)'
- en: Figure 9.7 – Final confirmation message
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.7 – 最终确认消息
- en: To save your results to a file for replay purposes (to give to your client as
    evidence), click the **Save** button. This will save the clickjacking **proof
    of concept** (**PoC**) in an HTML file for you to place inside your penetration
    test report.![Figure 9.8 – Saving to a file](image/B21173_Figure_9.08.jpg)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将结果保存到文件以便重放（提供给客户作为证据），点击 **保存** 按钮。这样会将点击劫持 **概念验证** (**PoC**) 保存在一个 HTML
    文件中，你可以将其放入渗透测试报告中。![图 9.8 – 保存到文件](image/B21173_Figure_9.08.jpg)
- en: Figure 9.8 – Saving to a file
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.8 – 保存到文件
- en: 'Click the **Reset** button to return to the normal application without the
    Clickbandit code:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **重置** 按钮以返回到没有 Clickbandit 代码的正常应用程序：
- en: '![Figure 9.9 – After the Reset button is clicked](image/B21173_Figure_9.09.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.9 – 点击重置按钮后](image/B21173_Figure_9.09.jpg)'
- en: Figure 9.9 – After the Reset button is clicked
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.9 – 点击重置按钮后
- en: How it works...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Since the Mutillidae application does not make use of the **X-FRAME-OPTIONS**
    header set to **DENY**, it is possible to inject a malicious **iframe** instance
    into the Mutillidae web pages. This is particularly dangerous on the login page
    in a phishing attack, luring victims into typing their credentials into an attacker-controlled
    page. You can increase the level of opaqueness of the **iframe** instance used
    by Clickbandit for visibility. You can use Clickbandit to create your PoC to illustrate
    how the vulnerability can be exploited. Applications can be secured against clickjacking
    attacks by adding the **X-FRAME-OPTIONS** header set to **DENY** or by adding
    the Content-Security-Policy **frame-ancestors** directive to a whitelisted domain.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Mutillidae 应用程序没有使用 **X-FRAME-OPTIONS** 头部设置为 **DENY**，因此有可能将恶意的 **iframe**
    实例注入到 Mutillidae 网页中。这在钓鱼攻击中的登录页面尤为危险，攻击者诱使受害者将凭据输入到一个由攻击者控制的页面中。你可以增加 Clickbandit
    使用的 **iframe** 实例的不透明度，以增强其可见性。你可以使用 Clickbandit 创建 PoC，展示漏洞如何被利用。通过将 **X-FRAME-OPTIONS**
    头部设置为 **DENY** 或通过将 Content-Security-Policy 的 **frame-ancestors** 指令添加到白名单域中，可以保护应用程序免受点击劫持攻击。
- en: Testing for DOM-based cross-site scripting
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试基于 DOM 的跨站脚本
- en: The **Document Object Model** (**DOM**) is a tree-like structural representation
    of all HTML web pages captured in a browser. Developers use the DOM to store information
    inside the browser for convenience. As a web penetration tester, it is important
    to determine the presence of DOM-based **cross-site scripting** (**XSS**) vulnerabilities.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**文档对象模型** (**DOM**) 是所有 HTML 网页在浏览器中捕获的树状结构表示。开发者使用 DOM 来方便地在浏览器内存储信息。作为一名网页渗透测试员，确定是否存在基于
    DOM 的 **跨站脚本** (**XSS**) 漏洞是非常重要的。'
- en: Getting ready
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the OWASP Mutillidae II HTML5 web storage exercise to determine
    whether the application is susceptible to DOM-based XSS attacks.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 OWASP Mutillidae II HTML5 网页存储练习来确定应用程序是否易受基于 DOM 的 XSS 攻击。
- en: How to do it...
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Navigate to **HTML 5** | **HTML5 Web Storage** | **HTML5 Storage**:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 **HTML 5** | **HTML5 网页存储** | **HTML5 存储**：
- en: '![Figure 9.10 – HTML5 Storage lesson](image/B21173_Figure_9.010.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.10 – HTML5 存储课程](image/B21173_Figure_9.010.jpg)'
- en: Figure 9.10 – HTML5 Storage lesson
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.10 – HTML5 存储课程
- en: 'Note the name/value pairs stored in the DOM using the **HTML5 Web Storage**
    locations. Web storage includes **Session** and **Local** variables. Developers
    use these storage locations to conveniently store information inside a user’s
    browser:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意通过 **HTML5 网页存储** 位置存储在 DOM 中的名称/值对。网页存储包括 **会话** 和 **本地** 变量。开发者使用这些存储位置方便地在用户的浏览器中存储信息：
- en: '![Figure 9.11 – Web storage entries](image/B21173_Figure_9.011.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.11 – 网页存储条目](image/B21173_Figure_9.011.jpg)'
- en: Figure 9.11 – Web storage entries
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.11 – 网页存储条目
- en: 'Switch to the Burp Suite **Proxy** | **Intercept** tab. Turn **Intercept**
    on with the **Intercept is** **on** button:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Burp Suite 的 **Proxy** | **Intercept** 标签。点击**Intercept 是开启的**按钮来开启拦截：
- en: '![Figure 9.12 – Turning Intercept on](image/B21173_Figure_9.012.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.12 – 开启拦截](image/B21173_Figure_9.012.jpg)'
- en: Figure 9.12 – Turning Intercept on
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.12 – 开启拦截
- en: Reload the **HTML 5 Web Storage** page in the Firefox browser by pressing *F5*
    or clicking the *reload* button.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按 *F5* 或点击 *刷新* 按钮，在 Firefox 浏览器中重新加载 **HTML 5 Web Storage** 页面。
- en: 'Switch to the Burp Suite **Proxy** | **Intercept** tab. Find the paused request
    created by the reload you just performed. Note that the **User-Agent** string
    is highlighted, as shown in the following screenshot:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Burp Suite 的 **Proxy** | **Intercept** 标签。找到刚才刷新所生成的暂停请求。注意**User-Agent**
    字符串被高亮显示，如下截图所示：
- en: '![Figure 9.13 – Note the original user-agent value](image/B21173_Figure_9.013.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.13 – 注意原始的用户代理值](image/B21173_Figure_9.013.jpg)'
- en: Figure 9.13 – Note the original user-agent value
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.13 – 注意原始的用户代理值
- en: 'Replace the preceding highlighted **User-Agent** with the following script.
    Note the XSS injection (e.g., **alert()**) inside of the payload:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下脚本替换前面高亮显示的**User-Agent**。注意有效载荷中的 XSS 注入（例如，**alert()**）：
- en: '[PRE0]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here is how the payload looks in the request held up in the **Proxy** interceptor:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是有效载荷在 **Proxy** 拦截器中被拦截时的请求内容：
- en: '![Figure 9.14 – Changing User-Agent to payload](image/B21173_Figure_9.014.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.14 – 将用户代理更改为有效载荷](image/B21173_Figure_9.014.jpg)'
- en: Figure 9.14 – Changing User-Agent to payload
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.14 – 将用户代理更改为有效载荷
- en: Click the **Forward** button. Now, turn **Intercept** off by clicking the toggle
    button to **Intercept** **is off**.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **前进** 按钮。然后，通过点击切换按钮，将 **拦截** 关闭至 **拦截已关闭**。
- en: 'Note the alert popup showing the contents of the DOM storage:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意弹出的警告框，显示了 DOM 存储的内容：
- en: "![Figure 9.15 – Evidence of XSS payload execution\uFEFF](image/B21173_Figure_9.015.jpg)"
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.15 – XSS 有效载荷执行的证据](image/B21173_Figure_9.015.jpg)'
- en: Figure 9.15 – Evidence of XSS payload execution
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.15 – XSS 有效载荷执行的证据
- en: How it works...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The injected script illustrates how the presence of an XSS vulnerability combined
    with sensitive information stored in the DOM can allow an attacker to steal sensitive
    data. The danger of storing sensitive data in web storage is that if XSS is possible
    anywhere within the application, then the sensitive data may be able to be exfiltrated
    and sent to an attacker via a malicious JavaScript payload.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 被注入的脚本演示了 XSS 漏洞与 DOM 中存储的敏感信息结合时，攻击者如何窃取敏感数据。将敏感数据存储在网页存储中的危险在于，如果应用程序中的任何地方都可能发生
    XSS，那么敏感数据可能会被提取并通过恶意的 JavaScript 有效载荷发送给攻击者。
- en: Leveraging DOM Invader for testing DOM XSS
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用 DOM Invader 测试 DOM XSS
- en: Let’s use PortSwigger’s integrated browser with an add-on called DOM Invader
    to cover more of the attack surface on the client, probing for potential DOM XSS
    and other weaknesses.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 PortSwigger 集成浏览器和名为 DOM Invader 的插件，覆盖客户端的更多攻击面，探测潜在的 DOM XSS 和其他弱点。
- en: Getting ready
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the same exercise, HTML5 Storage, and Burp Suite’s DOM Invader to
    help us determine whether there are any vulnerable sinks or sources on the web
    page.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用相同的练习、HTML5 存储和 Burp Suite 的 DOM Invader，帮助我们判断网页上是否存在任何易受攻击的目标或源。
- en: How to do it...
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Using the Burp Suite browser, click the *DOM Invader* icon at the top.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Burp Suite 浏览器，点击顶部的 *DOM Invader* 图标。
- en: '![Figure 9.16 – DOM Invader icon on the Burp Suite browser](image/B21173_Figure_9.016.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.16 – Burp Suite 浏览器上的 DOM Invader 图标](image/B21173_Figure_9.016.jpg)'
- en: Figure 9.16 – DOM Invader icon on the Burp Suite browser
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.16 – Burp Suite 浏览器上的 DOM Invader 图标
- en: 'Select the **DOM Invader** tab and make sure **DOM Invader is on** is set.
    Also, note the canary value that is assigned. This is randomized and you can customize
    the value if you like:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**DOM Invader**标签，确保设置了**DOM Invader 开启**。另外，注意分配的 canary 值。这个值是随机的，如果需要，你可以自定义这个值：
- en: '![Figure 9.17 – DOM Invader menu](image/B21173_Figure_9.017.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.17 – DOM Invader 菜单](image/B21173_Figure_9.017.jpg)'
- en: Figure 9.17 – DOM Invader menu
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.17 – DOM Invader 菜单
- en: 'Navigate to the **HTML 5 Storage** page in your Burp Suite browser:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Burp Suite 浏览器中，导航到**HTML 5 存储**页面：
- en: '![Figure 9.18 – HTML 5 Storage page](image/B21173_Figure_9.018.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.18 – HTML 5 存储页面](image/B21173_Figure_9.018.jpg)'
- en: Figure 9.18 – HTML 5 Storage page
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.18 – HTML 5 存储页面
- en: 'Press *F12* in the Burp Suite browser to open the development tools console.
    Go all the way to the end of the tabs in the development tools console and select
    **DOM Invader**. Note: DOM Invader is only available in the Burp Suite browser,
    so if you do not see this tab, you are using the wrong browser:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Burp Suite 浏览器中按 *F12* 键打开开发者工具控制台。将选项卡滚动到控制台的最末尾，并选择 **DOM Invader**。注意：DOM
    Invader 仅在 Burp Suite 浏览器中可用，因此如果你看不到这个标签，说明你使用的是错误的浏览器：
- en: '![Figure 9.19 – DOM Invader tab in F12 Developer Tools](image/B21173_Figure_9.019.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.19 – F12 开发者工具中的 DOM Invader 标签](image/B21173_Figure_9.019.jpg)'
- en: Figure 9.19 – DOM Invader tab in F12 Developer Tools
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.19 – F12 开发者工具中的 DOM Invader 标签
- en: 'Using DOM Invader, click the **Inject forms** button. Note how your canary
    value is now populated in all textboxes and button labels:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 DOM Invader，点击 **Inject forms** 按钮。注意你的金丝雀值现在已填充到所有文本框和按钮标签中：
- en: '![Figure 9.20 – Canary value used in DOM Invader injection points](image/B21173_Figure_9.020.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.20 – DOM Invader 注入点中的金丝雀值](image/B21173_Figure_9.020.jpg)'
- en: Figure 9.20 – Canary value used in DOM Invader injection points
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.20 – DOM Invader 注入点中的金丝雀值
- en: Now, click the **Add New** button, which is now displaying the canary value
    instead of **Add New**. It’s the only button on the web page.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击 **Add New** 按钮，注意现在显示的是金丝雀值而不是 **Add New**。这是网页上的唯一按钮。
- en: '![Figure 9.21 – After injection](image/B21173_Figure_9.021.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.21 – 注入后](image/B21173_Figure_9.021.jpg)'
- en: Figure 9.21 – After injection
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.21 – 注入后
- en: 'After clicking the button, note you have three findings (sinks) from DOM Invader,
    shown on the top icon:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击按钮后，请注意你从 DOM Invader 中获得了三个发现（漏洞），显示在顶部图标上：
- en: '![Figure 9.22 – DOM Invader icon with three findings](image/B21173_Figure_9.022.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.22 – 带有三个发现的 DOM Invader 图标](image/B21173_Figure_9.022.jpg)'
- en: Figure 9.22 – DOM Invader icon with three findings
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.22 – 带有三个发现的 DOM Invader 图标
- en: 'These are shown in the **Developer Tools** console, available by pressing *F12*
    in your Burp Suite browser (you must use the Burp Suite Browser to see this).
    Look for the **DOM** **Invader** tab:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信息显示在 **开发者工具** 控制台中，通过在 Burp Suite 浏览器中按 *F12* 键可以访问（你必须使用 Burp Suite 浏览器才能看到）。请寻找
    **DOM** **Invader** 标签：
- en: '![Figure 9.23 – DOM Invader findings](image/B21173_Figure_9.023.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.23 – DOM Invader 发现](image/B21173_Figure_9.023.jpg)'
- en: Figure 9.23 – DOM Invader findings
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.23 – DOM Invader 发现
- en: The DOM Invader findings give us enough clues to know we need to continue to
    craft a payload that will give us JavaScript execution. DOM Invader identified
    the sink as **element.innerHTML(1)**, which helps us to know that the potential
    for exploiting a DOM XSS is very high.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: DOM Invader 发现为我们提供了足够的线索，表明我们需要继续构造一个有效载荷来执行 JavaScript。DOM Invader 识别到的漏洞是
    **element.innerHTML(1)**，这帮助我们了解利用 DOM XSS 漏洞的潜力非常高。
- en: How it works...
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The presence of **innerHTML** on the web page of this recipe is a DOM XSS HTML
    sink. The **innerHTML** attribute receives user input and immediately renders
    inside the browser. The use of this attribute is very dangerous and usually avoided
    by most developers.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 该网页中 **innerHTML** 的存在是一个 DOM XSS HTML 漏洞。**innerHTML** 属性接收用户输入并立即在浏览器中呈现。使用该属性非常危险，大多数开发者通常会避免使用。
- en: There’s more...
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'PortSwigger provides background information about DOM Invader and its many
    features here: [https://portswigger.net/burp/documentation/desktop/tools/dom-invader](https://portswigger.net/burp/documentation/desktop/tools/dom-invader).
    We just barely touched on the multitude of scans that DOM Invader can perform
    in the browser. Other scan features include **postMessage** attacks, DOM clobbering,
    prototype pollution, and more.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: PortSwigger 在此提供了关于 DOM Invader 及其众多功能的背景信息：[https://portswigger.net/burp/documentation/desktop/tools/dom-invader](https://portswigger.net/burp/documentation/desktop/tools/dom-invader)。我们仅仅触及了
    DOM Invader 在浏览器中可以执行的多种扫描功能。其他扫描功能包括 **postMessage** 攻击、DOM 覆写、原型污染等。
- en: Testing for JavaScript execution
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试 JavaScript 执行
- en: JavaScript injection is a subtype of XSS attacks specific to the arbitrary injection
    of JavaScript. Vulnerabilities in this area can affect sensitive information held
    in the browser, such as user session cookies, or it can lead to the modification
    of page content, allowing script execution from attacker-controlled sites.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 注入是 XSS 攻击的一个子类型，特指任意注入 JavaScript。此类漏洞可能影响浏览器中保存的敏感信息，如用户会话 cookies，或者导致页面内容的修改，使得攻击者控制的网站脚本得以执行。
- en: Getting ready
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备开始
- en: We will the OWASP Mutillidae II **Password Generator** exercise to determine
    whether the application is susceptible to JavaScript XSS attacks.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 OWASP Mutillidae II **密码生成器** 练习，来确定该应用是否容易受到 JavaScript XSS 攻击。
- en: How to do it...
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Navigate to **OWASP 2013** | **A1 - Injection (Other)** | **JavaScript Injection**
    | **Password Generator**:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至 **OWASP 2013** | **A1 - 注入 (其他)** | **JavaScript 注入** | **密码生成器**：
- en: '![Figure 9.24 – Password Generator lesson](image/B21173_Figure_9.024.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.24 – 密码生成器教程](image/B21173_Figure_9.024.jpg)'
- en: Figure 9.24 – Password Generator lesson
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.24 – 密码生成器教程
- en: 'Note that after clicking the **Generate Password** button, a password is shown.
    Also, note that the username value provided in the URL is reflected in the browser
    *as is* on the web page: **http://192.168.56.101/mutillidae/index.php?page=password-generator.php&username=anonymous**.
    This means a potential XSS vulnerability may exist on the page:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，在点击 **生成密码** 按钮后，密码会显示出来。同时，还要注意，URL 中提供的用户名值会在网页上 *原样* 显示：**http://192.168.56.101/mutillidae/index.php?page=password-generator.php&username=anonymous**。这意味着该页面可能存在潜在的
    XSS 漏洞：
- en: '![Figure 9.25 – Generating a new password](image/B21173_Figure_9.025.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.25 – 生成新密码](image/B21173_Figure_9.025.jpg)'
- en: Figure 9.25 – Generating a new password
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.25 – 生成新密码
- en: 'Switch to the Burp Suite **Proxy** | **HTTP history** tab and find the HTTP
    message associated with the **Password Generator** page. Flip to the **Response**
    tab in the message editor and perform a search on the **catch** string. Note that
    the JavaScript returned has a **catch** block where error messages display to
    the user. We will use this position for the placement of a carefully crafted JavaScript
    injection attack:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Burp Suite **代理** | **HTTP 历史** 标签，找到与 **密码生成器** 页面相关的 HTTP 消息。在消息编辑器中切换到
    **响应** 标签，并对 **catch** 字符串进行搜索。注意，返回的 JavaScript 中包含一个 **catch** 块，错误信息会显示给用户。我们将利用这个位置进行精心设计的
    JavaScript 注入攻击：
- en: '![Figure 9.26 – Catch block for injection point](image/B21173_Figure_9.026.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.26 – 注入点的 Catch 块](image/B21173_Figure_9.026.jpg)'
- en: Figure 9.26 – Catch block for injection point
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.26 – 注入点的 Catch 块
- en: Switch to the Burp Suite **Proxy** | **Intercept** tab. Turn **Intercept** on
    with the **Intercept is** **on** button.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Burp Suite **代理** | **拦截** 标签。通过点击 **拦截已开启** 按钮开启 **拦截** 功能。
- en: Reload the **Password Generator** page in the Firefox browser by pressing *F5*
    or clicking the *reload* button.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Firefox 浏览器中通过按 *F5* 或点击 *重新加载* 按钮重新加载 **密码生成器** 页面。
- en: 'Switch to the Burp Suite **Proxy** | **Intercept** tab. While the request is
    paused, note the **username** parameter value highlighted as follows:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Burp Suite **代理** | **拦截** 标签。在请求暂停时，注意以下高亮显示的 **用户名** 参数值：
- en: '![Figure 9.27 – Username parameter](image/B21173_Figure_9.027.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.27 – 用户名参数](image/B21173_Figure_9.027.jpg)'
- en: Figure 9.27 – Username parameter
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.27 – 用户名参数
- en: 'Replace the preceding highlighted value of **anonymous** with the following
    carefully crafted JavaScript injection script:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将上述高亮的 **anonymous** 值替换为以下精心设计的 JavaScript 注入脚本：
- en: '[PRE1]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is how the payload looks in the request held up in the **Proxy** interceptor:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在 **代理** 拦截器中停留的请求中，负载的样子：
- en: '![Figure 9.28 – Injection point](image/B21173_Figure_9.028.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.28 – 注入点](image/B21173_Figure_9.028.jpg)'
- en: Figure 9.28 – Injection point
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.28 – 注入点
- en: Click the **Forward** button. Now, turn **Intercept** off by clicking the toggle
    button to **Intercept** **is off**.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **转发** 按钮。现在，通过点击切换按钮关闭 **拦截** 功能，确保 **拦截已关闭**。
- en: Note the alert popup. You’ve successfully demonstrated the presence of a JavaScript
    injection XSS vulnerability!
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意弹出的警报。你已经成功演示了 JavaScript 注入 XSS 漏洞的存在！
- en: "![Figure 9.29 – Evidence of JavaScript exec\uFEFFu\uFEFFtion](image/B21173_Figure_9.029.jpg)"
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.29 – JavaScript 执行证据](image/B21173_Figure_9.029.jpg)'
- en: Figure 9.29 – Evidence of JavaScript execution
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.29 – JavaScript 执行证据
- en: How it works...
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The JavaScript snippet injected into the web page matched the structure of the
    original **catch** statement. By creating a fake name of **canary** and ending
    the statement with a semicolon, a specially crafted *new* **catch** block was
    created, which contained the malicious JavaScript payload.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 注入到网页中的 JavaScript 代码与原始 **catch** 语句的结构匹配。通过创建一个伪造的 **canary** 名称，并以分号结束语句，创建了一个特别设计的
    *新* **catch** 块，其中包含恶意的 JavaScript 负载。
- en: Testing for HTML injection
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试 HTML 注入
- en: HTML injection is the insertion of arbitrary HTML code into a vulnerable web
    page. Vulnerabilities in this area may lead to the disclosure of sensitive information
    or the modification of page content for the purposes of socially engineering the
    user.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: HTML注入是将任意HTML代码插入到易受攻击的网页中。这类漏洞可能导致敏感信息泄露或修改页面内容，用于社会工程学攻击。
- en: Getting ready
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use OWASP Mutillidae II’s **Capture Data Page** to determine whether
    the application is susceptible to HTML injection attacks.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用OWASP Mutillidae II的**捕获数据页面**来确定应用程序是否易受HTML注入攻击。
- en: How to do it...
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Navigate to **OWASP 2013** | **A1 - Injection (Other)** | **HTMLi Via Cookie
    Injection** | **Capture** **Data Page**:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至**OWASP 2013** | **A1 - 注入（其他）** | **HTMLi 通过Cookie注入** | **捕获数据页面**：
- en: '![Figure 9.30 – Capture Data Page lesson](image/B21173_Figure_9.030.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.30 – 捕获数据页面课程](image/B21173_Figure_9.030.jpg)'
- en: Figure 9.30 – Capture Data Page lesson
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.30 – 捕获数据页面课程
- en: 'Note how the page looks before the attack:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意攻击前页面的样子：
- en: '![Figure 9.31 – Data Capture Page](image/B21173_Figure_9.031.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.31 – 数据捕获页面](image/B21173_Figure_9.031.jpg)'
- en: Figure 9.31 – Data Capture Page
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.31 – 数据捕获页面
- en: Switch to the Burp Suite **Proxy** | **Intercept** tab and turn **Intercept**
    on with the **Intercept is** **on** button.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到Burp Suite的**代理** | **拦截**选项卡，并点击**拦截已开启**按钮，启用**拦截**。
- en: 'While the request is paused, make a note of the last cookie, **acgroupswitchpersist=nada**:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当请求暂停时，记下最后一个Cookie的值，**acgroupswitchpersist=nada**：
- en: '![Figure 9.32 – Turning Intercept on](image/B21173_Figure_9.032.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.32 – 开启拦截](image/B21173_Figure_9.032.jpg)'
- en: Figure 9.32 – Turning Intercept on
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.32 – 开启拦截
- en: 'While the request is paused, replace the value of the last cookie with this
    HTML injection script:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当请求暂停时，将最后一个Cookie的值替换为此HTML注入脚本：
- en: '[PRE2]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is how the payload looks in the request held up in the **Proxy** interceptor:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在**代理**拦截器中暂停的请求中的负载样子：
- en: '![Figure 9.33 – Changing the value of the cookie to payload](image/B21173_Figure_9.033.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.33 – 更改Cookie值为负载](image/B21173_Figure_9.033.jpg)'
- en: Figure 9.33 – Changing the value of the cookie to payload
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.33 – 更改Cookie值为负载
- en: Click the **Forward** button. Now, turn **Intercept** off by clicking the toggle
    button to **Intercept** **is off**.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**前进**按钮。现在，点击切换按钮关闭**拦截**，使**拦截已关闭**。
- en: Note how the HTML is now included inside the page!
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意HTML现在已被包含在页面中！
- en: "![Figure 9.34 – Evidence of HTML inje\uFEFFc\uFEFFtion](image/B21173_Figure_9.034.jpg)"
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.34 – HTML注入证据](image/B21173_Figure_9.034.jpg)'
- en: Figure 9.34 – Evidence of HTML injection
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.34 – HTML注入证据
- en: How it works...
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Due to the lack of input validation and output encoding, an HTML injection vulnerability
    can exist. The result of exploiting this vulnerability is the insertion of arbitrary
    HTML code, which can lead to XSS attacks or social engineering schemes such as
    the one seen in the preceding recipe.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 由于缺乏输入验证和输出编码，可能存在HTML注入漏洞。利用此漏洞的结果是插入任意HTML代码，这可能导致XSS攻击或社会工程学攻击，如前面示例中所见。
- en: Testing for client-side resource manipulation
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试客户端资源操控
- en: If an application performs actions based on client-side URL information or pathing
    to a resource (that is, AJAX call, external JavaScript, or **iframe** source),
    the result can lead to a client-side resource manipulation vulnerability. This
    vulnerability relates to attacker-controlled URLs in, for example, the JavaScript
    **location** attribute, the location header found in an HTTP response, or a **POST**
    body parameter, which controls redirection. The impact of this vulnerability could
    lead to an XSS attack.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序基于客户端URL信息或资源路径（例如AJAX调用、外部JavaScript或**iframe**源）执行操作，结果可能会导致客户端资源操控漏洞。该漏洞涉及攻击者控制的URL，例如JavaScript中的**location**属性、HTTP响应中的位置头部，或者控制重定向的**POST**请求体参数。此漏洞的影响可能导致XSS攻击。
- en: Getting ready
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the OWASP Mutillidae II application to determine whether it is possible
    to manipulate any URL parameters that are exposed on the client side and whether
    the manipulation of those values causes the application to behave differently.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用OWASP Mutillidae II应用程序来确定是否可以操控任何在客户端暴露的URL参数，以及这些值的操控是否会导致应用程序行为异常。
- en: How to do it...
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Navigate to **OWASP 2013** | **A10 - Unvalidated Redirects and Forwards** |
    **Credits**:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至**OWASP 2013** | **A10 - 无效的重定向和转发** | **信用**：
- en: '![Figure 9.35 – Credits page](image/B21173_Figure_9.035.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.35 – Credits 页面](image/B21173_Figure_9.035.jpg)'
- en: Figure 9.35 – Credits page
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.35 – Credits 页面
- en: 'Click the **ISSA Kentuckiana** link available on the **Credits** page:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Credits** 页面上的 **ISSA Kentuckiana** 链接：
- en: '![Figure 9.36 – External links](image/B21173_Figure_9.036.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.36 – 外部链接](image/B21173_Figure_9.036.jpg)'
- en: Figure 9.36 – External links
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.36 – 外部链接
- en: 'Switch to the Burp Suite **Proxy** | **HTTP history** tab and find your request
    to the **Credits** page. Note that there are two query string parameters: **page**
    and **forwardurl**. What would happen if we manipulated the URL where the user
    is sent?'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Burp Suite 的 **Proxy** | **HTTP history** 标签，找到你对 **Credits** 页面发出的请求。注意到有两个查询字符串参数：**page**
    和 **forwardurl**。如果我们篡改用户被重定向的 URL，会发生什么情况？
- en: '![Figure 9.37 – Call to an external link](image/B21173_Figure_9.037.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.37 – 调用外部链接](image/B21173_Figure_9.037.jpg)'
- en: Figure 9.37 – Call to an external link
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.37 – 调用外部链接
- en: Switch to the Burp Suite **Proxy** | **Intercept** tab. Turn **Intercept** **on**
    with the **Intercept is** **on** button.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Burp Suite 的 **Proxy** | **Intercept** 标签。点击 **Intercept** **on** 按钮以开启
    **Intercept**。
- en: 'Click the **ISSA Kentuckiana** link again. While the request is paused, note
    the current value of the **forwardurl** parameter:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击 **ISSA Kentuckiana** 链接。当请求暂停时，注意 **forwardurl** 参数的当前值：
- en: '![Figure 9.38 – Changing the original value](image/B21173_Figure_9.038.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.38 – 更改原始值](image/B21173_Figure_9.038.jpg)'
- en: Figure 9.38 – Changing the original value
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.38 – 更改原始值
- en: 'Replace the value of the **forwardurl** parameter to [https://www.owasp.org](https://www.owasp.org)
    instead of the original choice of [http://www.issa-kentuckiana.org](http://www.issa-kentuckiana.org):'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **forwardurl** 参数的值替换为 [https://www.owasp.org](https://www.owasp.org)，而不是原始选择的
    [http://www.issa-kentuckiana.org](http://www.issa-kentuckiana.org)：
- en: '![Figure 9.39 – Changing to an attacker-controlled value](image/B21173_Figure_9.039.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.39 – 改变为攻击者控制的值](image/B21173_Figure_9.039.jpg)'
- en: Figure 9.39 – Changing to an attacker-controlled value
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.39 – 改变为攻击者控制的值
- en: Click the **Forward** button. Now, turn **Intercept** off by clicking the toggle
    button to **Intercept is off**. Note how we were redirected to a site other than
    the one originally clicked!
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Forward** 按钮。现在，通过点击切换按钮将 **Intercept** 关闭，状态变为 **Intercept is off**。注意我们被重定向到与最初点击的链接不同的站点！
- en: "![Figure 9.40 – Evidence of redi\uFEFFrect\uFEFFion](image/B21173_Figure_9.040.jpg)"
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.40 – 重定向证据](image/B21173_Figure_9.040.jpg)'
- en: Figure 9.40 – Evidence of redirection
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.40 – 重定向证据
- en: How it works...
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Application code decisions, such as where to redirect a user, should never rely
    on client-side available values. Such values can be tampered with and modified
    to redirect users to attacker-controlled websites or to execute attacker-controlled
    scripts.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序代码决策，例如重定向用户的地方，不应依赖客户端可用的值。这些值可能会被篡改，并修改为将用户重定向到攻击者控制的网站或执行攻击者控制的脚本。
