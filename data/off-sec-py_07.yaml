- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Exploiting Web Vulnerabilities Using Python
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python利用Web漏洞
- en: Welcome to the world of web vulnerability assessment with Python! This chapter
    takes us on an intriguing journey into the world of cybersecurity, where we will
    use Python to discover and exploit the vulnerabilities that lie behind web applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎进入使用Python进行Web漏洞评估的世界！本章将带领我们进入网络安全的有趣旅程，使用Python发现和利用Web应用背后的漏洞。
- en: This chapter serves as a complete guide, providing you with the knowledge and
    tools you need to dig into the complex world of web security. We’ll cover popular
    vulnerabilities such as SQL injection, **cross-site scripting** (**XSS**), and
    more while taking advantage of Python’s versatility and tools, all of which are
    designed for ethical hacking and penetration testing.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章作为一本完整的指南，提供了深入了解Web安全世界所需的知识和工具。我们将涵盖SQL注入、**跨站脚本**（**XSS**）等流行漏洞，并利用Python的多功能性和工具，所有这些都旨在进行道德黑客攻击和渗透测试。
- en: You’ll uncover the inner workings of these security problems by combining Python
    prowess with a thorough understanding of web vulnerabilities, gaining crucial
    insights into how attackers exploit vulnerabilities.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将Python的强大功能与对Web漏洞的深入理解相结合，您将揭示这些安全问题的内部机制，获得关于攻击者如何利用漏洞的宝贵见解。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Web application vulnerabilities – an overview
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web应用漏洞概述
- en: SQL injection attacks and Python exploitation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL注入攻击与Python利用
- en: XSS exploitation with Python
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python进行XSS攻击
- en: Python for data breaches and privacy exploitation
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用Python进行数据泄露和隐私滥用
- en: Web application vulnerabilities – an overview
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web应用漏洞概述
- en: Web application vulnerabilities pose serious risks, ranging from unauthorized
    access to severe data breaches. Understanding these flaws is essential for web
    developers, security professionals, and anybody else involved in the online ecosystem.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用漏洞带来了严重的风险，从未经授权的访问到重大的数据泄露。理解这些漏洞对Web开发人员、安全专业人员以及任何参与在线生态系统的人都至关重要。
- en: Web apps, while useful tools, are vulnerable to a variety of problems. Among
    the common risks that are discussed in this area are injection attacks, failed
    authentication, sensitive data disclosure, security misconfigurations, XSS, **cross-site
    request forgery** (**CSRF**), and insecure deserialization.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Web应用是有用的工具，但它们容易受到各种问题的攻击。在这个领域讨论的常见风险包括注入攻击、认证失败、敏感数据泄露、安全配置错误、XSS、**跨站请求伪造**（**CSRF**）和不安全的反序列化。
- en: You can acquire knowledge of the various attack channels and potential risks
    connected with poor security measures by thoroughly researching these vulnerabilities.
    Real-world examples and scenarios reveal how attackers exploit these flaws to
    corrupt systems, modify data, and violate user privacy.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 通过深入研究这些漏洞，您可以了解与不良安全措施相关的各种攻击渠道和潜在风险。现实世界的示例和场景展示了攻击者如何利用这些漏洞来破坏系统、修改数据并侵犯用户隐私。
- en: 'The following are some common web application vulnerabilities:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些常见的Web应用漏洞：
- en: '**Injection attacks**: A prevalent form of web application vulnerability, it
    involves injecting malicious code into input fields or commands, leading to unauthorized
    access or data manipulation. The following are common types of injection attacks:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注入攻击**：一种常见的Web应用漏洞形式，它通过向输入字段或命令中注入恶意代码，导致未经授权的访问或数据篡改。以下是常见的注入攻击类型：'
- en: '**SQL injection**: SQL injection occurs when an attacker inserts malicious
    SQL code into the input fields (for example, forms) of a web application, manipulating
    the execution of SQL queries. For instance, an attacker might input specially
    crafted SQL code to retrieve unauthorized data, modify databases, or even delete
    entire tables.'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQL注入**：SQL注入发生在攻击者将恶意的SQL代码插入Web应用的输入字段（例如表单），从而操控SQL查询的执行。例如，攻击者可能输入特制的SQL代码以获取未经授权的数据、修改数据库甚至删除整个表格。'
- en: '**NoSQL injection**: Similar to SQL injection but affecting NoSQL databases,
    attackers exploit poorly sanitized inputs to execute unauthorized queries against
    NoSQL databases. By manipulating input fields, attackers can modify queries to
    extract sensitive data or perform unauthorized actions.'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NoSQL注入**：与SQL注入类似，但影响NoSQL数据库，攻击者利用输入不当处理来执行未经授权的查询。通过操控输入字段，攻击者可以修改查询以提取敏感数据或执行未经授权的操作。'
- en: '**Operating system command injection**: This attack involves injecting malicious
    commands through input fields. If the application uses user input to construct
    system commands without proper validation, attackers can execute arbitrary commands
    on the underlying operating system. For instance, an attacker might inject commands
    to delete files or execute harmful scripts on the server.'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作系统命令注入**：此攻击涉及通过输入字段注入恶意命令。如果应用程序使用用户输入来构造系统命令而没有进行适当的验证，攻击者可以在底层操作系统上执行任意命令。例如，攻击者可能会注入命令来删除文件或在服务器上执行有害脚本。'
- en: '**Broken authentication**: Weaknesses in authentication mechanisms can allow
    attackers to gain unauthorized access. This includes vulnerabilities such as weak
    passwords, session hijacking, or flaws in session management. Attackers exploit
    these weaknesses to bypass authentication controls and impersonate legitimate
    users, gaining access to sensitive data or functionalities reserved for authorized
    users.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**认证缺陷**：认证机制的弱点可能允许攻击者获得未经授权的访问权限。这包括如弱密码、会话劫持或会话管理漏洞等问题。攻击者利用这些弱点绕过认证控制并冒充合法用户，从而访问敏感数据或功能，这些数据或功能通常是授权用户专有的。'
- en: '**Sensitive data exposure**: Sensitive data exposure occurs when critical information,
    such as passwords, credit card numbers, or personal details, is inadequately protected.
    Weak encryption, storing data in plaintext, or insecure data storage practices
    leave this information vulnerable to unauthorized access. Attackers exploit these
    vulnerabilities to steal confidential data, leading to identity theft or financial
    fraud.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**敏感数据暴露**：敏感数据暴露发生在关键数据（如密码、信用卡号码或个人详细信息）未得到充分保护时。弱加密、以明文存储数据或不安全的数据存储做法使这些信息容易遭到未经授权的访问。攻击者利用这些漏洞窃取机密数据，导致身份盗窃或金融诈骗。'
- en: '**Security misconfigurations**: Misconfigurations in servers, frameworks, or
    databases inadvertently expose vulnerabilities. Common misconfigurations include
    default credentials, open ports, or unnecessary services running on servers. Attackers
    leverage these misconfigurations to gain unauthorized access, escalate privileges,
    or execute attacks against the exposed services.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全配置错误**：服务器、框架或数据库中的配置错误无意中暴露了漏洞。常见的配置错误包括默认凭证、开放端口或服务器上运行的多余服务。攻击者利用这些配置错误获得未经授权的访问权限、提升权限或对暴露的服务执行攻击。'
- en: '**XSS**: XSS involves injecting malicious scripts, typically JavaScript, into
    web pages viewed by other users. Attackers exploit vulnerabilities in the application’s
    handling of user input to inject scripts, which, when executed by unsuspecting
    users, can steal cookies, redirect users to malicious sites, or perform actions
    on behalf of the user.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XSS**：XSS涉及将恶意脚本（通常是JavaScript）注入到其他用户查看的网页中。攻击者利用应用程序在处理用户输入时的漏洞来注入脚本，当这些脚本被毫不知情的用户执行时，可能会窃取Cookie、将用户重定向到恶意网站，或者代表用户执行操作。'
- en: '**CSRF**: CSRF attacks exploit the authenticated sessions of users to perform
    unintended actions. By tricking authenticated users into executing malicious requests,
    attackers can, for example, initiate fund transfers, change account settings,
    or perform actions without the user’s consent.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CSRF**：CSRF攻击利用用户的已认证会话执行未经授权的操作。攻击者通过诱使已认证的用户执行恶意请求，举例来说，可以发起资金转账、改变账户设置，或在用户未同意的情况下执行其他操作。'
- en: '**Insecure deserialization**: Insecure deserialization vulnerabilities arise
    when applications deserialize untrusted data without proper validation. Attackers
    can manipulate serialized data to execute arbitrary code, leading to remote code
    execution, DoS attacks, or the modification of object behavior in the application.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不安全的反序列化**：不安全的反序列化漏洞发生在应用程序在没有适当验证的情况下反序列化不可信的数据时。攻击者可以操控序列化数据来执行任意代码，从而导致远程代码执行、拒绝服务攻击或修改应用程序中的对象行为。'
- en: With this knowledge in hand, let’s take a closer look at a few prominent web
    vulnerabilities.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 掌握了这些知识后，让我们更深入地了解一些突出的网站漏洞。
- en: SQL injection
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL注入
- en: SQL injection is a common and potentially lethal hack that targets web-based
    applications that interact with databases. A SQL injection attack involves inserting
    malicious **Structured Query Language** (**SQL**) code into input fields or URL
    parameters. When an application fails to properly validate or sanitize user input,
    the injected SQL code executes directly in the database, which frequently results
    in unauthorized access, data manipulation, and potentially complete control over
    the database.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 注入是一种常见且可能致命的攻击，目标是与数据库交互的 Web 应用程序。SQL 注入攻击涉及将恶意的**结构化查询语言**（**SQL**）代码插入输入字段或
    URL 参数。当应用程序未能正确验证或清理用户输入时，注入的 SQL 代码会直接在数据库中执行，这通常会导致未经授权的访问、数据篡改，甚至可能完全控制数据库。
- en: How SQL injection works
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL 注入的工作原理
- en: 'Consider a typical login form in which a user enters their username and password.
    An attacker can enter a malicious SQL statement instead of a password if the web
    application’s code does not properly validate and sanitize the input. For instance,
    an input such as `''OR ''1''=''1` may be injected. In this situation, the SQL
    query might be as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一个典型的登录表单，其中用户输入用户名和密码。如果 Web 应用程序的代码没有正确验证和清理输入，攻击者可以输入恶意的 SQL 语句来代替密码。例如，输入类似`'OR
    '1'='1`的内容可能会被注入。在这种情况下，SQL 查询可能如下所示：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Because the conditional value, `'1'='1'`, always evaluates to true, the password
    check is essentially bypassed. By gaining unauthorized access to the system, the
    attacker can view sensitive information, change records, or even delete entire
    databases.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 因为条件值`'1'='1'`始终评估为真，密码检查实际上被绕过。通过获得未经授权的系统访问权限，攻击者可以查看敏感信息、修改记录，甚至删除整个数据库。
- en: Preventing SQL injection
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 防止 SQL 注入
- en: Using parameterized queries (prepared statements) is one of the most efficient
    ways to prevent SQL injection attacks. Instead of interpolating user input directly
    into the SQL query, placeholders are employed, and input values are later connected
    to these placeholders.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用参数化查询（预处理语句）是防止 SQL 注入攻击的最有效方法之一。与其直接将用户输入插入到 SQL 查询中，不如使用占位符，并在后续将输入值与这些占位符连接。
- en: 'The following is an example demonstrating the implementation of parameterized
    queries with the SQLite database in Python, showcasing how to safeguard against
    SQL injection attacks while interacting with the database:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例，演示如何在 Python 中使用 SQLite 数据库实现参数化查询，展示如何在与数据库交互时防范 SQL 注入攻击：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this example, the SQL query contains `?` placeholders and the real input
    values are supplied as a tuple to the `execute` method. The database driver ensures
    secure database interaction by performing adequate sanitization and preventing
    SQL injection.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，SQL 查询包含`?`占位符，实际的输入值作为元组传递给`execute`方法。数据库驱动程序通过执行适当的清理来确保安全的数据库交互，防止
    SQL 注入。
- en: By using best practices such as parameterized queries and validating and sanitizing
    user input, developers may protect their web applications from the potentially
    fatal consequences of SQL injection attacks, thereby strengthening the integrity
    and security of their systems.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用最佳实践，如参数化查询和验证、清理用户输入，开发人员可以保护他们的 Web 应用程序免受 SQL 注入攻击的潜在致命后果，从而增强系统的完整性和安全性。
- en: Transitioning to our next topic, let’s explore XSS, a prevalent web application
    vulnerability, and delve into its various forms and mitigation strategies.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡到下一个话题，让我们探讨 XSS，这是一种常见的 Web 应用程序漏洞，并深入了解其各种形式和缓解策略。
- en: XSS
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XSS
- en: 'XSS is a common web application vulnerability in which attackers inject malicious
    JavaScript scripts into web pages that users view. These scripts are then run
    in the context of the user’s browser, allowing attackers to steal sensitive data
    and session tokens or perform activities on the user’s behalf without their knowledge.
    There are three types of XSS attacks: **stored XSS** (where the malicious script
    is permanently stored on a website), **reflective XSS** (where the script is embedded
    in a URL and only appears when the victim clicks on the manipulated link), and
    **DOM-based XSS** (where the client-side script manipulates the **Document Object
    Model** (**DOM**) of a web page).'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: XSS 是一种常见的 web 应用程序漏洞，攻击者将恶意的 JavaScript 脚本注入到用户查看的网页中。这些脚本随后会在用户的浏览器中执行，使攻击者能够窃取敏感数据和会话令牌，或者在用户不知情的情况下代表他们执行操作。XSS
    攻击有三种类型：**存储型 XSS**（恶意脚本永久存储在网站上）、**反射型 XSS**（脚本嵌入在 URL 中，只有当受害者点击被篡改的链接时才会显示）、**基于
    DOM 的 XSS**（客户端脚本操控网页的**文档对象模型**（**DOM**））。
- en: How XSS works
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: XSS 是如何工作的
- en: Consider a scenario where a web application displays user-provided input without
    proper validation. For instance, a comment section on a blog may allow users to
    post messages. If the application does not sanitize user input, an attacker can
    insert a script into their comment. When other users view the comment section,
    the script executes in their browsers, potentially stealing their session cookies
    or performing actions on their behalf.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一个场景，web 应用程序没有正确验证用户提供的输入就将其显示。例如，一个博客的评论区可能允许用户发布消息。如果应用程序没有清理用户输入，攻击者可以在他们的评论中插入脚本。当其他用户查看评论区时，脚本会在他们的浏览器中执行，可能窃取他们的会话
    Cookie 或代表他们执行操作。
- en: 'Here’s an example of vulnerable JavaScript code that echoes user input directly
    to a web page:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个漏洞的 JavaScript 示例代码，直接将用户输入回显到网页上：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this code, if the user-provided input contains a script, it will be executed
    on the page, leading to a reflected XSS vulnerability.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，如果用户提供的输入包含脚本，它将在页面上执行，从而导致反射型 XSS 漏洞。
- en: Preventing XSS
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 防止 XSS
- en: To avoid XSS vulnerabilities, validate and sanitize user input before displaying
    it on a web page. Encoding content generated by users ensures that any potentially
    malicious HTML, JavaScript, or other code is regarded as plain text. CSP headers
    can be used to limit the sources from which scripts can be executed, hence reducing
    the impact of XSS assaults.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免 XSS 漏洞，在将用户输入显示到网页上之前应对其进行验证和清理。对用户生成的内容进行编码，可以确保任何潜在的恶意 HTML、JavaScript
    或其他代码都被视为纯文本。可以使用 CSP 头部限制脚本的执行来源，从而减少 XSS 攻击的影响。
- en: It is critical to use security libraries and frameworks that automatically sanitize
    input, perform suitable output encoding, and validate data on the server side.
    Furthermore, web developers should follow the principle of least privilege, ensuring
    that user accounts and scripts have only the permissions needed to do their tasks.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用自动清理输入、执行适当输出编码并在服务器端验证数据的安全库和框架至关重要。此外，网页开发者应遵循最小权限原则，确保用户帐户和脚本仅具备完成任务所需的权限。
- en: Developers may easily stop XSS attacks by implementing these practices, protecting
    their web apps against one of the most widespread and dangerous security risks
    in digital spaces.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者可以通过实施这些实践轻松阻止 XSS 攻击，保护他们的 web 应用免受数字空间中最广泛和最危险的安全风险之一。
- en: Moving on to our next topic, let’s investigate **Insecure Direct Object References**
    (**IDOR**), an important web application vulnerability, and explore its implications
    and methods for mitigation.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨 **不安全的直接对象引用**（**IDOR**），这是一个重要的 web 应用程序漏洞，并探讨其影响及缓解方法。
- en: IDOR
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IDOR
- en: IDOR is a web vulnerability that happens when an application provides access
    to objects based on user input. Attackers use IDOR vulnerabilities to obtain unauthorized
    access to sensitive data or resources by changing object references. Unlike classic
    access control vulnerabilities, in which an attacker impersonates another user,
    IDOR attacks involve changing direct references to objects, such as files, database
    entries, or URLs, to circumvent authorization checks.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: IDOR 是一种 web 漏洞，发生在应用程序根据用户输入提供对象访问时。攻击者利用 IDOR 漏洞，通过更改对象引用获取对敏感数据或资源的未经授权的访问。与经典的访问控制漏洞不同，攻击者在这些攻击中不会冒充另一个用户，而是通过更改直接引用对象（如文件、数据库条目或
    URL）绕过授权检查。
- en: How IDOR works
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IDOR 是如何工作的
- en: 'Consider the following scenario: a web application uses numeric IDs in URLs
    to access user-specific data. A URL such as `example.com/user?id=123` retrieves
    user data based on the ID provided in the query parameter. An attacker can alter
    the URL to access other users’ data if the program does not confirm the user’s
    authorization to access this unique ID. Changing the ID to `example.com/user?id=124`
    may allow access to sensitive information belonging to another user, thus exploiting
    the IDOR vulnerability.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 假设以下场景：一个Web应用程序使用数字ID来通过URL访问特定用户的数据。像`example.com/user?id=123`这样的URL根据查询参数中提供的ID检索用户数据。如果程序没有验证用户是否有权限访问这个唯一ID，攻击者就可以更改URL来访问其他用户的数据。更改ID为`example.com/user?id=124`可能会导致访问另一个用户的敏感信息，从而利用IDOR漏洞。
- en: 'Let’s examine a simplified Python Flask application showcasing an IDOR vulnerability,
    illustrating how such vulnerabilities can be present in real-world web applications:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看一个简化的Python Flask应用程序，展示了一个IDOR漏洞，说明了这种漏洞如何出现在现实世界的Web应用程序中：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding code, the application allows anyone to access user data based
    on the provided `id` parameter, making it vulnerable to IDOR attacks.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，应用程序允许任何人根据提供的`id`参数访问用户数据，这使得它容易受到IDOR攻击。
- en: Preventing IDOR attacks
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 防止IDOR攻击
- en: Applications should enforce correct access controls and never rely only on user-supplied
    input for object references to avoid IDOR vulnerabilities. Instead of exposing
    internal IDs directly, applications might utilize indirect references such as
    **universally unique identifiers** (**UUIDs**) or unique tokens that are mapped
    to internal objects on the server side. To guarantee that users have the requisite
    permissions to access specified resources, proper authorization checks should
    be done.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序应强制实施正确的访问控制，并且永远不应仅依赖用户提供的输入来进行对象引用，以避免IDOR漏洞。应用程序可以使用间接引用，例如**全局唯一标识符**（**UUIDs**）或映射到服务器端内部对象的唯一令牌，而不是直接暴露内部ID。为了确保用户拥有访问指定资源所需的权限，应进行适当的授权检查。
- en: Implementing strong access control methods, validating user input, and applying
    secure coding practices help eradicate potential IDOR vulnerabilities in web applications,
    assuring effective data access and manipulation protection.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 实施强有力的访问控制方法、验证用户输入并应用安全编码实践有助于消除Web应用程序中潜在的IDOR漏洞，确保有效的数据访问和操作保护。
- en: Next, we’ll delve into a case study that demonstrates the significance of implementing
    strong access control methods, validating user input, and applying secure coding
    practices in eradicating potential IDOR vulnerabilities in web applications. This
    case study will further highlight the practical application of the concepts discussed
    in the preceding section.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将深入探讨一个案例研究，展示实施强有力的访问控制方法、验证用户输入和应用安全编码实践在消除Web应用程序中潜在IDOR漏洞方面的重要性。这个案例研究将进一步突出前面部分讨论概念的实际应用。
- en: A case study concerning web application security
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个关于Web应用程序安全性的案例研究
- en: Real-world examples in cybersecurity serve as excellent lessons, demonstrating
    the terrible impact of vulnerabilities and breaches. These occurrences not only
    highlight the seriousness of security breaches but also emphasize the importance
    of taking proactive actions. Let’s have a look at a few.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 网络安全中的现实案例提供了极好的教训，展示了漏洞和数据泄露的严重影响。这些事件不仅突显了安全漏洞的严重性，还强调了采取主动措施的重要性。我们来看几个例子。
- en: Equifax data breach
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Equifax数据泄露
- en: The 2017 Equifax data leak was a historical moment. The Achilles’ heel was an
    unpatched Apache Struts vulnerability, which allowed unauthorized access to Equifax’s
    databases. This incident compromised sensitive personal information, affecting
    millions of people and reverberating around the world.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 2017年Equifax数据泄露是一个历史性的时刻。其薄弱环节是一个未修补的Apache Struts漏洞，使得未经授权的访问能够进入Equifax的数据库。这一事件泄露了敏感的个人信息，影响了数百万人的隐私，并在全球范围内引起了广泛关注。
- en: 'From a technological standpoint, this breach reveals the following far-reaching
    consequences:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术角度来看，这次数据泄露揭示了以下深远的后果：
- en: '**Vulnerability exploitation**: Attackers were able to bypass defenses and
    get access to crucial data repositories by exploiting an Apache Struts vulnerability.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**漏洞利用**：攻击者通过利用Apache Struts漏洞绕过防御措施，访问了关键的数据存储库。'
- en: '**Data exposure**: It demonstrated how unencrypted, sensitive data may slip
    into the hands of malevolent actors, emphasizing the importance of strong encryption
    and secure data processing.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据泄露**：它展示了未加密的敏感数据如何落入恶意行为者之手，强调了强加密和安全数据处理的重要性。'
- en: 'The consequences go beyond the technical:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 后果远不止技术层面：
- en: '**User data peril**: Names, Social Security numbers, and other sensitive information
    was exposed, increasing the risk of identity theft and financial crime for affected
    individuals.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户数据风险**：姓名、社会保险号码以及其他敏感信息被暴露，增加了受影响个人身份盗窃和金融犯罪的风险。'
- en: '**Financial and reputational fallout**: Fines, settlements, and significant
    legal bills were among the financial and reputational consequences. Equifax’s
    reputation suffered significantly as a result of consumer distrust and ongoing
    scrutiny.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**财务和声誉影响**：罚款、和解以及巨额法律费用是财务和声誉的后果之一。Equifax因消费者不信任和持续的审查而遭受了重大声誉损害。'
- en: Transitioning to our next case study, let’s explore Heartbleed and Shellshock,
    two significant security vulnerabilities that garnered widespread attention in
    the cybersecurity community. We’ll delve into the details of these vulnerabilities,
    their impact, and mitigation strategies.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进入下一个案例研究，探讨Heartbleed和Shellshock这两个在网络安全社区广泛关注的重大安全漏洞。我们将深入了解这些漏洞的细节、影响及其缓解策略。
- en: The Heartbleed and Shellshock vulnerabilities
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Heartbleed和Shellshock漏洞
- en: 'The Heartbleed vulnerability, unearthed in 2014, exposed critical flaws in
    OpenSSL, compromising sensitive data globally by exploiting a flaw in the heartbeat
    extension. Similarly, the Shellshock vulnerability, discovered in the same year,
    exploited the Bash shell’s ubiquity, allowing attackers to execute remote commands:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年暴露的Heartbleed漏洞揭示了OpenSSL中的致命缺陷，通过利用心跳扩展的漏洞，全球敏感数据被暴露。同年发现的Shellshock漏洞则利用了Bash
    shell的广泛应用，使攻击者能够远程执行命令：
- en: '**Heartbleed’s encryption risk**: It highlighted the vulnerability of ostensibly
    safe encryption technologies, weakening trust in data security.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Heartbleed的加密风险**：它暴露了看似安全的加密技术的漏洞，削弱了人们对数据安全的信任。'
- en: '**Shellshock’s command execution**: The ability of Shellshock to execute arbitrary
    instructions showed the seriousness of vulnerabilities in commonly used software.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Shellshock命令执行**：Shellshock能够执行任意指令，展示了常用软件中漏洞的严重性。'
- en: 'These flaws had far-reaching impacts beyond their technical aspects:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这些漏洞的影响远超其技术层面：
- en: '**Patching difficulties**: Addressing these widespread vulnerabilities caused
    immense logistical issues, requiring rapid and widespread software updates.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**补丁困难**：解决这些广泛的漏洞带来了巨大的后勤问题，要求快速而广泛的软件更新。'
- en: '**Global resonance**: Heartbleed and Shellshock resonated throughout numerous
    systems around the world, highlighting the interconnection of vulnerabilities.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全球共鸣**：Heartbleed和Shellshock影响了全球众多系统，突显了漏洞之间的相互关联。'
- en: 'Having explored various case studies, a recurring theme has become apparent:
    the critical importance of web application security. From preventing data breaches
    to ensuring the integrity and confidentiality of user information, the measures
    that are taken to secure web applications are paramount in today’s digital landscape.
    This brings us to the **Open Web Application Security Project** (**OWASP**), an
    invaluable resource in this field.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索了多个案例研究后，一个反复出现的主题变得显而易见：Web应用程序安全的重要性。从防止数据泄露到确保用户信息的完整性和机密性，确保Web应用程序安全所采取的措施在今天的数字化环境中至关重要。这也引出了**开放Web应用程序安全项目**（**OWASP**），这是这一领域中一个极为宝贵的资源。
- en: OWASP is an online community that creates freely available web application security
    articles, approaches, documentation, tools, and technologies.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP是一个在线社区，创建并提供免费的Web应用程序安全文章、方法、文档、工具和技术。
- en: The OWASP Testing Guide, a thorough compilation of methods and strategies for
    identifying and fixing web security vulnerabilities, is a priceless tool for more
    research. Security professionals may improve their abilities, strengthen their
    online applications, and keep one step ahead of attackers by utilizing the insights
    provided by the OWASP Testing Guide.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP测试指南是一本全面的收集了识别和修复Web安全漏洞方法与策略的工具书，它对于进一步的研究来说是无价的。安全专业人员可以利用OWASP测试指南提供的见解，提升自身能力，增强在线应用程序的安全性，并在攻击者之前采取预防措施。
- en: Everyone who is stepping into web application development and testing should
    have this guide as a tool in their arsenal.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 每个进入Web应用开发和测试领域的人都应该将这本指南作为工具之一。
- en: Next, we’ll turn our attention to SQL injection attacks and Python exploitation.
    We’ll delve into the intricacies of SQL injection vulnerabilities, explore how
    attackers exploit them, and discuss Python-based approaches for mitigating and
    defending against such attacks.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将重点讨论SQL注入攻击和Python利用技术。我们将深入探讨SQL注入漏洞的复杂性，研究攻击者如何利用这些漏洞，并讨论基于Python的方法来缓解和防御此类攻击。
- en: SQL injection attacks and Python exploitation
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL注入攻击和Python利用
- en: SQL injection is a vulnerability that occurs when user input is incorrectly
    filtered for SQL commands, allowing an attacker to execute arbitrary SQL queries.
    Let’s consider a simple example (with a fictional scenario) to illustrate how
    SQL injection can occur.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: SQL注入是一种漏洞，当用户输入未正确过滤SQL命令时，攻击者可以执行任意的SQL查询。我们以一个简单的例子（虚构的场景）来说明SQL注入是如何发生的。
- en: 'Let’s say there’s a login form on a website that takes a username and password
    to authenticate users. The backend code might look something like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 假设某网站有一个登录表单，需要输入用户名和密码进行身份验证。后端代码可能如下所示：
- en: '[PRE4]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In this example, the `login` function constructs a SQL query using the `username`
    and `password` inputs directly without proper validation or sanitization. An attacker
    could exploit this vulnerability by inputting specially crafted strings. For instance,
    if an attacker enters `'' OR ''1''=''1''` as the `password` value, the resulting
    query will become as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`login`函数直接使用`username`和`password`输入构建SQL查询，而没有进行适当的验证或清理。攻击者可以利用这个漏洞，通过输入精心构造的字符串来进行攻击。例如，如果攻击者将`password`值设置为`'
    OR '1'='1'`，最终的查询将变为：
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This query will always return true because the `'1'='1'` condition is always
    true, allowing the attacker to bypass the authentication and log in as the first
    user in the database.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这个查询总是返回真，因为`'1'='1'`条件始终为真，从而允许攻击者绕过身份验证，直接以数据库中的第一个用户身份登录。
- en: 'To reinforce defense against SQL injection, employing parameterized queries
    or prepared statements is crucial. These methods ensure that user input is treated
    as data rather than executable code. Let’s examine the following code to see these
    practices in action:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增强防御SQL注入的能力，采用参数化查询或预处理语句至关重要。这些方法确保用户输入被视为数据，而不是可执行的代码。让我们查看以下代码，看看这些实践如何在实际中应用：
- en: '[PRE6]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the safe version, query placeholders (`?`) are used, and the actual user
    input is provided separately, preventing the possibility of SQL injection.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在安全版本中，使用了查询占位符（`?`），并且实际的用户输入是单独提供的，这样就可以防止SQL注入的可能性。
- en: 'Creating a tool to check for SQL injection vulnerabilities in web applications
    involves a blend of various techniques, such as pattern matching, payload injection,
    and response analysis. Here’s an example of a simple Python tool that can be used
    to detect potential SQL injection vulnerabilities in URLs by sending crafted requests
    and analyzing responses:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个工具来检查Web应用程序中的SQL注入漏洞，涉及多种技术的结合，如模式匹配、载荷注入和响应分析。以下是一个简单的Python工具示例，可以通过发送特制的请求并分析响应来检测URL中可能存在的SQL注入漏洞：
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here’s how this tool works:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该工具的工作原理：
- en: The **check_sql_injection** function takes a URL as input.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**check_sql_injection**函数接受一个URL作为输入。'
- en: It generates various SQL injection payloads and appends them to the provided
    URL.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它会生成各种SQL注入载荷，并将其附加到提供的URL上。
- en: It then sends requests using the modified URLs and checks if the response contains
    common error or exception messages that might indicate a vulnerability.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，它使用修改后的URL发送请求，并检查响应中是否包含可能表明漏洞的常见错误或异常信息。
- en: If it detects such messages, it flags the URL as potentially vulnerable.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果检测到此类信息，它会将URL标记为潜在的漏洞。
- en: Important note
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: This tool is a basic illustration and might produce false positives or false
    negatives. Real-world SQL injection detection tools are more sophisticated, employing
    advanced techniques and databases of known payloads to better identify vulnerabilities.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工具是一个基本示例，可能会产生误报或漏报。现实中的SQL注入检测工具更加复杂，采用了先进的技术和已知载荷数据库来更好地识别漏洞。
- en: In our continuous effort to enhance web application security, it is essential
    to leverage tools that can automate and streamline the testing process. Two such
    powerful tools are **SQLMap** and **MITMProxy**.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们持续努力增强 Web 应用安全性的过程中，利用能够自动化并简化测试过程的工具至关重要。两个如此强大的工具就是 **SQLMap** 和 **MITMProxy**。
- en: SQLMap is an advanced penetration testing tool specifically designed to identify
    and exploit SQL injection vulnerabilities in web applications. It automates the
    detection and exploitation of these vulnerabilities, which are among the most
    critical security risks.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: SQLMap 是一款先进的渗透测试工具，专为识别和利用 Web 应用中的 SQL 注入漏洞而设计。它自动化了这些漏洞的检测和利用，这些漏洞是最关键的安全风险之一。
- en: MITMProxy, on the other hand, is an interactive HTTPS proxy that intercepts,
    inspects, modifies, and replays web traffic. It allows for detailed analysis of
    the interactions between a web application and its users, providing valuable insights
    into potential security weaknesses.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，MITMProxy 是一个交互式 HTTPS 代理，可以拦截、检查、修改和重放 Web 流量。它允许详细分析 Web 应用程序与用户之间的交互，提供对潜在安全弱点的有价值洞察。
- en: Let’s look at how SQLMap can be integrated with MITMProxy output to perform
    automated security testing. SQLMap is a robust tool for identifying and exploiting
    SQL injection vulnerabilities in online applications. By integrating SQLMap with
    the output of MITMProxy, which records and analyzes network traffic, we can automate
    the process of discovering and exploiting potential SQL injection vulnerabilities.
    This connection streamlines the testing process, resulting in more efficient and
    thorough security assessments.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何将 SQLMap 与 MITMProxy 的输出结合，进行自动化安全测试。SQLMap 是一个强大的工具，用于识别和利用在线应用中的 SQL
    注入漏洞。通过将 SQLMap 与 MITMProxy 记录和分析网络流量的输出集成，我们可以自动化发现和利用潜在的 SQL 注入漏洞的过程。这种连接简化了测试过程，使安全评估更加高效和彻底。
- en: Features of SQLMap
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQLMap 的特点
- en: 'Let’s consider the many capabilities of SQLMap, a powerful tool for detecting
    and exploiting SQL injection vulnerabilities in web applications:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看 SQLMap 的多种能力，这是一款用于检测和利用 Web 应用 SQL 注入漏洞的强大工具：
- en: '**Automated SQL injection detection**: SQLMap automates the process of detecting
    SQL injection vulnerabilities by analyzing web application parameters, headers,
    cookies, and POST data. It uses various techniques to probe for vulnerabilities.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化 SQL 注入检测**：SQLMap 通过分析 Web 应用程序的参数、头信息、Cookies 和 POST 数据，自动化 SQL 注入漏洞的检测过程。它使用多种技术来探测漏洞。'
- en: '**Support for various database management systems (DBMSs)**: It supports a
    multitude of database systems, including MySQL, PostgreSQL, Oracle, Microsoft
    SQL Server, SQLite, and more. SQLMap can adjust its queries and payloads based
    on the specific DBMS it’s targeting.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持多种数据库管理系统（DBMS）**：它支持多种数据库系统，包括 MySQL、PostgreSQL、Oracle、Microsoft SQL Server、SQLite
    等。SQLMap 可以根据其针对的特定 DBMS 调整查询和载荷。'
- en: '**Enumeration and information gathering**: SQLMap can enumerate the database’s
    structure, extract data, and gather sensitive information, such as database names,
    tables, and columns, and even dump entire database contents.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**枚举与信息收集**：SQLMap 可以枚举数据库结构、提取数据、收集敏感信息，如数据库名称、表格和列，甚至导出整个数据库内容。'
- en: '**Exploitation capabilities**: Once a vulnerability is detected, SQLMap can
    exploit it to gain unauthorized access, execute arbitrary SQL commands, retrieve
    data, or even escalate privileges in some cases.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用能力**：一旦发现漏洞，SQLMap 可以利用该漏洞获取未经授权的访问权限，执行任意 SQL 命令，检索数据，甚至在某些情况下提升权限。'
- en: '**Advanced techniques**: It offers a range of advanced techniques to evade
    detection, tamper with requests, leverage time-based attacks, and perform out-of-band
    exploitation.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高级技术**：它提供了一系列高级技术，以规避检测、篡改请求、利用基于时间的攻击以及进行带外利用。'
- en: Let’s summarize SQLMap’s extensive capabilities, which include identifying and
    exploiting SQL injection vulnerabilities in web applications. SQLMap provides
    security professionals with a comprehensive toolkit for robust security testing,
    including automated detection, support for various database management systems,
    enumeration and information gathering, exploitation capabilities, and advanced
    techniques for evasion and manipulation.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们总结一下 SQLMap 的广泛功能，包括识别和利用 Web 应用程序中的 SQL 注入漏洞。SQLMap 为安全专家提供了一个全面的工具包，用于强大的安全测试，包括自动化检测、支持各种数据库管理系统、枚举和信息收集、利用能力以及规避和操作的高级技术。
- en: How SQLMap works
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQLMap的工作原理
- en: 'Understanding how SQLMap works is critical for getting the most out of this
    powerful tool while performing security testing. SQLMap intends to automate the
    identification and exploitation of SQL injection vulnerabilities in web applications,
    making it a useful tool for security experts. Let’s look into the inner workings
    of SQLMap:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 了解SQLMap的工作原理对于在进行安全测试时充分利用这一强大工具至关重要。SQLMap旨在自动识别和利用Web应用程序中的SQL注入漏洞，是安全专家的有力工具。让我们深入了解SQLMap的内部工作原理：
- en: '**Target selection**: SQLMap requires the URL of the target web application
    or the raw HTTP request to begin testing for SQL injection vulnerabilities.'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**目标选择**：SQLMap需要目标Web应用程序的URL或原始HTTP请求才能开始测试SQL注入漏洞。'
- en: '**Detection phase**: SQLMap conducts a series of tests by sending specially
    crafted requests and payloads to identify potential injection points and determine
    if the application is vulnerable.'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**检测阶段**：SQLMap通过发送特殊构造的请求和有效载荷，进行一系列测试，以识别潜在的注入点并判断应用程序是否存在漏洞。'
- en: '**Enumeration and exploitation**: Upon finding a vulnerability, SQLMap proceeds
    to extract data, dump databases, or perform other specified actions, depending
    on the command-line parameters or options provided.'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**枚举和利用**：在发现漏洞后，SQLMap会根据命令行参数或选项的不同，提取数据、转储数据库或执行其他指定操作。'
- en: '**Output and reports**: SQLMap provides a detailed output of its findings,
    which includes information about the injection points, database structure, and
    extracted data. SQLMap can generate reports in various formats for further analysis.'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**输出和报告**：SQLMap提供了详细的结果输出，其中包括注入点、数据库结构和提取的数据等信息。SQLMap可以生成各种格式的报告供进一步分析。'
- en: Now that we understand how SQLMap operates, let’s explore practical applications
    and best practices for its use in security testing.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了SQLMap的操作方式，让我们探讨其在安全测试中的实际应用和最佳实践。
- en: Basic usage of SQLMap
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQLMap的基本用法
- en: 'Let’s take a look at an example SQLMap command that’s used to scan a web application
    for SQL injection vulnerabilities:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子，展示如何使用SQLMap命令扫描Web应用程序中的SQL注入漏洞：
- en: '[PRE8]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here’s a breakdown of the command and its parameters:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该命令及其参数的详细解析：
- en: The **-u** parameter specifies the target URL.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-u**参数指定目标URL。'
- en: The **--batch** parameter runs in batch mode (without user interaction).
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**--batch**参数以批处理模式运行（无需用户交互）。'
- en: The **--level** and **--risk** parameters specify the intensity of the tests
    (higher levels for more aggressive testing).
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**--level**和**--risk**参数指定测试的强度（较高的级别表示更为激进的测试）。'
- en: Intercepting with MITMProxy
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用MITMProxy进行拦截
- en: 'MITMProxy is a powerful tool for intercepting and analyzing HTTP traffic, while
    SQLMap is used for automating SQL injection detection and exploitation. Combining
    these tools allows for the automatic detection of SQL injection vulnerabilities
    in intercepted traffic. The following Python script showcases how to capture HTTP
    requests in real time using `mitmproxy`, extract the necessary information, and
    automatically feed it into SQLMap for vulnerability assessment:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: MITMProxy是一个强大的工具，用于拦截和分析HTTP流量，而SQLMap用于自动化SQL注入检测和利用。这两者的结合可以在拦截的流量中自动检测SQL注入漏洞。以下Python脚本展示了如何使用`mitmproxy`实时捕获HTTP请求，提取必要的信息，并自动将其输入SQLMap进行漏洞评估：
- en: '[PRE9]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let’s break down the functionality showcased in the preceding code block and
    examine its key components in detail:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细解析前面的代码块所展示的功能，审视其关键组件：
- en: '**Import libraries**: Import the necessary libraries, including **subprocess**
    for running external commands and the required **mitmproxy** modules.'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**导入库**：导入必要的库，包括**subprocess**（用于运行外部命令）和所需的**mitmproxy**模块。'
- en: '**Function definition**: Define a function, **automate_sqlmap_with_mitmproxy()**,
    to encapsulate the automation process.'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**函数定义**：定义一个函数，**automate_sqlmap_with_mitmproxy()**，以封装自动化过程。'
- en: '**SQLMap command template**: Set up a template for the **SQLMap** command with
    flags such as **-r** (for specifying input from a file) and other parameters.'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**SQLMap命令模板**：设置一个**SQLMap**命令模板，包含如**-r**（用于指定来自文件的输入）和其他参数。'
- en: '**MITMProxy configuration**: Configure **mitmproxy** options, such as listening
    on a specific host and port, and set up the **DumpMaster** instance.'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**MITMProxy配置**：配置**mitmproxy**选项，如在特定主机和端口上监听，并设置**DumpMaster**实例。'
- en: '**Start MITMProxy**: Begin the **mitmproxy** server on a separate thread to
    capture HTTP traffic.'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**启动MITMProxy**：在单独的线程上启动**mitmproxy**服务器，以捕获HTTP流量。'
- en: '**Continuously process captured requests**: Continuously check for captured
    HTTP requests (assuming they’re saved in **''captured_request.txt''**).'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**持续处理捕获的请求**：持续检查捕获的HTTP请求（假设它们保存在**''captured_request.txt''**文件中）。'
- en: '**Run SQLMap**: Use **subprocess** to execute SQLMap with the captured request
    as input, capturing its output and displaying it for analysis.'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**运行SQLMap**：使用**subprocess**执行SQLMap，捕获请求并作为输入，获取其输出并进行分析显示。'
- en: '**Error handling and shutdown**: Properly handle exceptions and shut down **mitmproxy**
    after completion or in case of an error.'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**错误处理和关闭**：在完成或出现错误时，正确处理异常并关闭**mitmproxy**。'
- en: This script demonstrates the seamless integration of `mitmproxy` with SQLMap,
    allowing for the automatic identification of potential SQL injection vulnerabilities
    in intercepted HTTP traffic. Real-time processing allows for fast analysis and
    proactive security testing, increasing the overall effectiveness of cybersecurity
    measures. Now, let’s move on to a different interesting vulnerability.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本演示了`mitmproxy`与SQLMap的无缝集成，允许自动识别拦截的HTTP流量中的潜在SQL注入漏洞。实时处理可以快速分析并进行主动的安全测试，从而提高网络安全措施的整体有效性。现在，让我们转到一个不同的有趣漏洞。
- en: XSS exploitation with Python
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XSS漏洞利用与Python
- en: XSS is a common security vulnerability in web applications. It allows attackers
    to embed malicious scripts in web pages, possibly compromising the security and
    integrity of data read by unsuspecting users. This exploit occurs when an application
    accepts and displays unvalidated or unsanitized user input. XSS attacks are prevalent
    and highly dangerous as they can affect any user interacting with the vulnerable
    web application.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: XSS是网页应用程序中常见的安全漏洞。它允许攻击者在网页中嵌入恶意脚本，可能危及无知用户读取的数据的安全性和完整性。当应用程序接受并显示未经验证或清理的用户输入时，就会发生这种漏洞。XSS攻击广泛存在且非常危险，因为它们可能影响任何与易受攻击的网页应用程序互动的用户。
- en: 'As mentioned previously, there are three types of XSS attacks:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，XSS攻击有三种类型：
- en: '**Reflected XSS**: In this type of attack, the malicious script is reflected
    off the web server to the victim’s browser. It usually happens when user input
    isn’t properly validated or sanitized before being returned to the user. For instance,
    a website might have a search feature where a user can input a query. If the site
    doesn’t properly sanitize the input and directly displays it in the search results
    page URL, an attacker could input a malicious script. When another user clicks
    on that manipulated link, the script executes in their browser.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反射型XSS**：在这种类型的攻击中，恶意脚本从网页服务器反射到受害者的浏览器。通常发生在用户输入没有经过适当验证或清理后返回给用户的情况下。例如，一个网站可能有一个搜索功能，用户可以输入查询。如果该网站没有正确清理输入并直接将其显示在搜索结果页面的URL中，攻击者可以输入恶意脚本。当另一个用户点击这个被篡改的链接时，脚本会在他们的浏览器中执行。'
- en: '**Stored XSS**: This type of attack involves storing a malicious script on
    the target server. It happens when user input isn’t properly sanitized before
    being saved in a database or other persistent storage. For example, if a forum
    allows users to input comments and doesn’t properly sanitize the input, an attacker
    could submit a comment containing a script. When other users view that particular
    comment, the script executes in their browsers, potentially affecting multiple
    users.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储型XSS**：这种类型的攻击涉及将恶意脚本存储在目标服务器上。当用户输入没有被正确清理并保存到数据库或其他持久化存储中时，就会发生这种情况。例如，如果一个论坛允许用户输入评论并且没有正确清理输入，攻击者可以提交一个包含脚本的评论。当其他用户查看该评论时，脚本会在他们的浏览器中执行，可能会影响多个用户。'
- en: '**DOM-based XSS**: This attack occurs in the DOM of a web page. The malicious
    script gets executed as a result of manipulating the DOM environment on the client
    side. It doesn’t necessarily involve sending data to the server; instead, it manipulates
    the page’s client-side scripts directly in the user’s browser. This could happen
    when a website uses client-side scripts that dynamically update the DOM based
    on user input without proper sanitization. For instance, if a web page includes
    JavaScript that takes data from the URL hash and updates the page without sanitizing
    or encoding it properly, an attacker could inject a script into the URL that gets
    executed when the page loads.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于 DOM 的 XSS**：此攻击发生在网页的 DOM 中。恶意脚本通过在客户端操控 DOM 环境而执行。它不一定涉及将数据发送到服务器；相反，它直接在用户浏览器中操控页面的客户端脚本。这种情况可能发生在网站使用基于用户输入动态更新
    DOM 的客户端脚本时，且没有进行适当的清理。例如，如果网页包含的 JavaScript 从 URL 哈希中获取数据并更新页面，但没有适当清理或编码，攻击者就可能将一个脚本注入到
    URL 中，并在页面加载时执行。'
- en: In all these cases, the core issue is the lack of proper validation, sanitization,
    or encoding of user input before it’s processed or displayed in a web application.
    Attackers exploit these vulnerabilities to inject and execute malicious scripts
    in the browsers of other users, potentially leading to various risks, such as
    stealing sensitive information, session hijacking, or performing unauthorized
    actions on behalf of the user. Preventing XSS attacks involves thorough input
    validation, output encoding, and proper sanitization of user-generated content
    before displaying it in a web application.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些情况下，核心问题是缺乏对用户输入的适当验证、清理或编码，在处理或显示之前没有进行正确的过滤。攻击者利用这些漏洞，注入并执行恶意脚本，可能导致各种风险，如窃取敏感信息、会话劫持或代表用户执行未经授权的操作。防止
    XSS 攻击需要进行全面的输入验证、输出编码，并在显示用户生成的内容之前进行适当的清理。
- en: 'XSS attacks can have the following severe consequences:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: XSS 攻击可能导致以下严重后果：
- en: '**Data theft**: Attackers can steal sensitive user information such as session
    cookies, login credentials, or personal data.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据窃取**：攻击者可以窃取敏感的用户信息，如会话 Cookie、登录凭据或个人数据。'
- en: '**Session hijacking**: By exploiting XSS, attackers can impersonate legitimate
    users, leading to unauthorized access and manipulation of accounts.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**会话劫持**：通过利用 XSS，攻击者可以冒充合法用户，从而导致未经授权的访问和账户操控。'
- en: '**Phishing**: Malicious scripts can redirect users to spoofed login pages or
    gather sensitive information by mimicking legitimate sites.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**钓鱼攻击**：恶意脚本可以将用户重定向到伪造的登录页面，或者通过模仿合法站点收集敏感信息。'
- en: '**Website defacement**: Attackers can modify the appearance or content of a
    website, damaging its reputation or credibility.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网站篡改**：攻击者可以修改网站的外观或内容，破坏其声誉或可信度。'
- en: In summary, XSS vulnerabilities pose serious risks to web applications.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，XSS 漏洞对 Web 应用程序构成了严重的风险。
- en: Understanding how XSS works
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解 XSS 的工作原理
- en: XSS occurs when an application dynamically includes untrusted data in a web
    page without proper validation or escaping. This allows an attacker to inject
    malicious code, often JavaScript, which executes in the victim’s browser within
    the context of the vulnerable web page.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: XSS 发生在应用程序动态地将不可信的数据包含到网页中，而没有进行适当的验证或转义。这使得攻击者可以注入恶意代码，通常是 JavaScript，并在受害者的浏览器中执行，在易受攻击的网页上下文中运行。
- en: 'Let’s look at an XSS attack’s flow and steps:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 XSS 攻击的流程和步骤：
- en: '**Injection point identification**: Attackers search for entry points in web
    applications, such as input fields, URLs, or cookies, where user-controlled data
    is echoed back to users without proper sanitization.'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**注入点识别**：攻击者会寻找 Web 应用中的入口点，例如输入字段、URL 或 Cookie，用户控制的数据在这些位置没有经过适当清理就被回显到用户端。'
- en: '**Payload injection**: Malicious scripts, typically JavaScript, are crafted
    and injected into vulnerable entry points. These scripts execute in the victims’
    browsers when they access the compromised page.'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**有效载荷注入**：恶意脚本，通常是 JavaScript，会被精心制作并注入到易受攻击的入口点。当受害者访问被破坏的页面时，这些脚本会在其浏览器中执行。'
- en: '**Execution**: Upon page access, the injected payload runs within the victim’s
    browser context, allowing attackers to perform various actions, including cookie
    theft, form manipulation, or redirecting users to malicious sites.'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**执行**：页面访问时，注入的有效载荷在受害者的浏览器上下文中运行，攻击者可以执行各种操作，包括窃取 Cookie、篡改表单或将用户重定向到恶意网站。'
- en: Reflected XSS (non-persistent)
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反射型 XSS（非持久性）
- en: Reflected XSS occurs when the malicious script is reflected off a web application
    without being stored on the server. It involves injecting code that gets executed
    immediately and is often linked to a particular request or action. As the injected
    code isn’t stored permanently, the impact of reflected XSS is typically limited
    to the victims who interact with the compromised link or input field.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 反射型 XSS 发生在恶意脚本在未存储在服务器上的情况下反射至 web 应用程序。它涉及注入立即执行的代码，通常与特定请求或操作相关联。由于注入的代码不是永久存储的，反射型
    XSS 的影响通常仅限于与受 compromised 的链接或输入字段交互的受害者。
- en: 'Let’s explore the exploitation method and an example scenario regarding reflected
    XSS attacks:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探讨关于反射型 XSS 攻击的开发方法和一个示例场景：
- en: '**Exploitation method**:'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发方法**：'
- en: An attacker crafts a malicious URL or input field that includes the payload
    (for example, **<****script>alert('Reflected XSS')</script>**).
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者制作一个包含 payload 的恶意 URL 或输入字段（例如，**<****script>alert('Reflected XSS')</script>**）。
- en: When a victim accesses this crafted link or submits the form with the malicious
    input, the payload gets executed in the context of the web page.
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当受害者访问这个精心制作的链接或提交带有恶意输入的表单时，payload 将在网页的上下文中执行。
- en: The user’s browser processes the script, leading to the execution of the injected
    code, potentially causing damage or exposing sensitive information.
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户的浏览器处理脚本，导致注入代码的执行，可能造成损害或泄露敏感信息。
- en: '**Example scenario**: An attacker sends a phishing email with a link containing
    the malicious payload. If the victim clicks the link, the script executes in their
    browser.'
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**示例场景**：攻击者发送包含恶意 payload 的钓鱼邮件链接。如果受害者点击链接，脚本将在其浏览器中执行。'
- en: Stored XSS (persistent)
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存储型 XSS（持久型）
- en: Stored XSS occurs when the malicious script is stored on the server, typically
    within a database or another storage mechanism, and is then rendered to users
    when they access a particular web page or resource. This type of XSS attack poses
    a significant threat as the injected script remains persistent and can affect
    all users who access the compromised page or resource, regardless of how they
    arrived there.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 存储型 XSS 发生在恶意脚本被存储在服务器上，通常是在数据库或其他存储机制内，然后当用户访问特定的网页或资源时呈现给他们。这种类型的 XSS 攻击构成了重大威胁，因为注入的脚本是持久的，可以影响所有访问受
    compromised 的页面或资源的用户，无论他们是如何到达那里的。
- en: 'Let’s look into the exploitation method and an example scenario regarding stored
    XSS attacks:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨关于存储型 XSS 攻击的开发方法和一个示例场景：
- en: '**Exploitation method**:'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发方法**：'
- en: Attackers inject a malicious script into a web application (for example, in
    a comment section or user profile) where the input is stored persistently.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者将恶意脚本注入到 web 应用程序中（例如，在评论部分或用户配置文件中），其中输入是持久存储的。
- en: When other users visit the affected page, the server retrieves the stored payload
    and sends it along with the legitimate content, executing the script in their
    browsers.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当其他用户访问受影响的页面时，服务器检索存储的 payload 并将其发送到合法内容中，执行其浏览器中的脚本。
- en: '**Example scenario**: An attacker posts a malicious script as a comment on
    a blog. Whenever anyone views the comment section, the script executes in their
    browser.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**示例场景**：攻击者将恶意脚本作为博客评论发布。每当有人查看评论部分时，脚本将在其浏览器中执行。'
- en: 'Here’s a basic example of a Python script that can be used to test for XSS
    vulnerabilities:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个用于测试 XSS 漏洞的 Python 脚本的基本示例：
- en: '[PRE10]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This Python script utilizes the `requests` library to send `GET` requests to
    a target URL with various XSS payloads appended as URL parameters. It checks the
    response content to detect if the payload is reflected or executed within the
    HTML content. This script can be adapted and extended to test different endpoints,
    forms, or input fields within a web application for XSS vulnerabilities by modifying
    the `target_url` and `xss_payloads` variables.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 此 Python 脚本利用 `requests` 库向目标 URL 发送 `GET` 请求，并将各种 XSS payload 附加为 URL 参数。它检查响应内容以检测
    payload 是否反射或在 HTML 内容中执行。通过修改 `target_url` 和 `xss_payloads` 变量，此脚本可被调整和扩展以测试
    web 应用程序中不同的端点、表单或输入字段的 XSS 漏洞。
- en: 'Discovering stored XSS vulnerabilities programmatically requires interacting
    with a web application that allows user input to be stored persistently, such
    as in a comment section or user profile. Here’s an example script that simulates
    the discovery of a stored XSS vulnerability by attempting to store a malicious
    payload and subsequently retrieve it:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 程序化地发现存储型 XSS 漏洞需要与允许用户输入持续存储的 Web 应用程序进行交互，例如评论区或用户个人资料。下面是一个示例脚本，模拟通过尝试存储恶意有效载荷并随后检索它来发现存储型
    XSS 漏洞：
- en: '[PRE11]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As mentioned previously, these are relatively basic XSS scanners that do not
    go deep into discovering XSS attacks in a web application. We are fortunate to
    have free open source tools that have been in active development for years and
    can perform more than these scripts and have a long list of use cases and advanced
    functionality. Two such examples are XSStrike and XSS Hunter.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，这些是相对基础的 XSS 扫描工具，并不会深入发掘 Web 应用中的 XSS 攻击。幸运的是，我们拥有一些免费且开源的工具，这些工具已经在积极开发多年，并且能够执行比这些脚本更多的操作，具有广泛的用例和高级功能。两个这样的例子是
    XSStrike 和 XSS Hunter。
- en: XSStrike is an XSS detection package that includes four hand-written parsers,
    an intelligent payload generator, a robust fuzzing engine, and an extremely fast
    crawler. Instead of injecting payloads and verifying their functionality, as other
    tools do, XSStrike evaluates the response using several parsers and then creates
    payloads that are guaranteed to work through context analysis integrated with
    a fuzzing engine.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: XSStrike 是一个 XSS 检测工具包，包含四个手写解析器、一个智能有效载荷生成器、一个强大的模糊测试引擎以及一个极快的爬虫。与其他工具通过注入有效载荷并验证其功能不同，XSStrike
    使用多个解析器评估响应，然后通过集成了模糊测试引擎的上下文分析创建保证有效的有效载荷。
- en: XSS Hunter, on the other hand, works by allowing security researchers and ethical
    hackers to create custom XSS payloads, which are then injected into various parts
    of a web application. XSS Hunter monitors these injections and tracks how they
    are handled by the application. When a payload is triggered, XSS Hunter captures
    critical information, such as the URL, user-agent, cookies, and other relevant
    data. This data helps in understanding the context and severity of the XSS vulnerability.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，XSS Hunter 允许安全研究人员和道德黑客创建自定义的 XSS 有效载荷，然后将这些载荷注入 Web 应用程序的各个部分。XSS Hunter
    监控这些注入并跟踪它们是如何被应用程序处理的。当有效载荷被触发时，XSS Hunter 捕获关键信息，如 URL、用户代理、Cookies 和其他相关数据。这些数据有助于理解
    XSS 漏洞的上下文和严重性。
- en: Moreover, XSS Hunter provides a dashboard where all captured XSS incidents are
    logged and presented comprehensively, enabling security professionals to analyze
    the attack vectors, assess the impact, and facilitate the process of fixing the
    vulnerabilities.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，XSS Hunter 提供了一个仪表盘，所有捕获到的 XSS 事件都会被记录并全面呈现，使安全专业人员能够分析攻击向量、评估影响，并帮助修复漏洞。
- en: 'Consider building an automation script similar to the SQL injection scenario,
    but this time focusing on XSS using XSStrike and XSS Hunter. Follow these steps:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑构建一个类似于 SQL 注入场景的自动化脚本，但这次重点是使用 XSStrike 和 XSS Hunter 进行 XSS 攻击的测试。请按照以下步骤进行操作：
- en: Configure a self-hosted instance of XSS Hunter to act as the platform for receiving
    XSS payloads.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置一个自托管的 XSS Hunter 实例，作为接收 XSS 有效载荷的平台。
- en: Utilize MITMProxy to intercept HTTP requests and responses.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 MITMProxy 拦截 HTTP 请求和响应。
- en: Direct the intercepted requests to XSStrike for testing against XSS vulnerabilities.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将拦截的请求引导到 XSStrike 进行 XSS 漏洞的测试。
- en: Pass the generated payloads from XSStrike to XSS Hunter for further analysis
    and detection of XSS vulnerabilities.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 XSStrike 生成的有效载荷传递给 XSS Hunter，以进一步分析和检测 XSS 漏洞。
- en: This exercise aims to familiarize you with the automation process involved in
    detecting and exploiting XSS vulnerabilities using tools such as XSStrike and
    XSS Hunter. Experimenting with these tools will enhance your understanding of
    XSS attack techniques and strengthen your ability to defend against them.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习旨在让你熟悉使用像 XSStrike 和 XSS Hunter 这样的工具来检测和利用 XSS 漏洞的自动化过程。通过这些工具的实验，你将增强对
    XSS 攻击技术的理解，并加强防御这些攻击的能力。
- en: Now, let’s explore the browser security implications in terms of the **Same-Origin
    Policy** (**SOP**) and **Content Security Policy** (**CSP**) in the context of
    mitigating XSS vulnerabilities.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在减轻 XSS 漏洞的背景下，探讨**同源策略**（**SOP**）和**内容安全策略**（**CSP**）对浏览器安全的影响。
- en: SOP
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 同源策略
- en: SOP is a fundamental security concept enforced by web browsers, governing how
    documents or scripts loaded from one origin (domain, protocol, or port) can interact
    with resources from another origin. Under SOP, JavaScript running on a web page
    is typically restricted to accessing resources such as cookies, DOM elements,
    or AJAX requests from the same origin.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: SOP 是由 Web 浏览器强制执行的基本安全概念，规定了从一个来源（域名、协议或端口）加载的文档或脚本如何与来自另一个来源的资源进行交互。在 SOP
    下，运行在网页上的 JavaScript 通常被限制为访问来自相同来源的资源，如 Cookies、DOM 元素或 AJAX 请求。
- en: SOP plays a crucial role in security by preventing unauthorized access to sensitive
    data. By restricting scripts from different origins, SOP helps mitigate risks
    such as CSRF and the theft of sensitive information.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: SOP 在安全性中起着至关重要的作用，防止未授权访问敏感数据。通过限制不同来源的脚本，SOP 有助于减轻诸如 CSRF 和敏感信息窃取等风险。
- en: However, it’s important to note that XSS attacks inherently bypass SOP. When
    attackers inject malicious scripts into vulnerable web applications, these scripts
    execute within the context of the compromised page, allowing them to access and
    manipulate data as if they were part of the legitimate content.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，需要注意的是，XSS 攻击本质上绕过了 SOP。当攻击者将恶意脚本注入到易受攻击的 Web 应用程序中时，这些脚本会在受感染页面的上下文中执行，从而使它们能够访问和操控数据，就像它们是合法内容的一部分一样。
- en: While SOP is essential for web security, it has its limitations. Despite its
    protection boundaries, SOP does not prevent XSS attacks. Since the injected malicious
    script runs in the context of the compromised page, it is considered part of the
    same origin.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 SOP 对于 Web 安全至关重要，但它也有局限性。尽管它设定了保护边界，SOP 并不能防止 XSS 攻击。由于被注入的恶意脚本在受感染页面的上下文中运行，它被视为同一来源的一部分。
- en: CSP
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CSP
- en: CSP is an added layer of security that allows web developers to control which
    resources are allowed to be loaded on a web page. It mitigates XSS vulnerabilities
    by offering several features.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: CSP 是一种额外的安全层，允许 Web 开发人员控制哪些资源可以在网页上加载。通过提供多个功能，CSP 有助于缓解 XSS 漏洞。
- en: First, CSP enables developers to define a whitelist of trusted sources from
    which certain types of content (scripts, stylesheets, and so on) can be loaded.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，CSP 允许开发人员定义一个受信任来源的白名单，从这些来源可以加载某些类型的内容（如脚本、样式表等）。
- en: Developers can specify the sources (for example, `'self'` and specific domains)
    from which scripts can be loaded and executed. Additionally, CSP allows nonces
    and hashes in script tags to ensure that only trusted scripts with specific nonces
    or hashes can execute.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员可以指定脚本可以加载和执行的来源（例如，`'self'` 和特定的域名）。此外，CSP 还允许在脚本标签中使用随机数和哈希值，以确保只有具有特定随机数或哈希值的受信任脚本能够执行。
- en: Among its advantages, CSP significantly reduces the attack surface for XSS vulnerabilities
    by restricting script execution to trusted sources and blocking inline scripts.
    However, the adoption of CSP may encounter challenges such as compatibility issues
    due to existing inline scripts or non-compliant resources.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: CSP 的优势之一是显著减少了 XSS 漏洞的攻击面，它通过将脚本执行限制在受信任的来源并阻止内联脚本来实现这一点。然而，采用 CSP 可能会遇到一些挑战，例如由于现有内联脚本或不符合标准的资源而导致的兼容性问题。
- en: While SOP sets foundational security boundaries by limiting cross-origin interactions,
    XSS attacks exploit the context of compromised pages, bypassing these restrictions.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 SOP 通过限制跨源交互设置了基础安全边界，但 XSS 攻击利用了受感染页面的上下文，从而绕过了这些限制。
- en: Furthermore, CSP adds an additional layer of defense by enabling developers
    to define and enforce stricter policies on resource loading, mitigating XSS risks
    by limiting trusted sources for content.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，CSP 通过使开发人员能够定义并执行更严格的资源加载策略，增加了一层额外的防御，从而通过限制受信任的内容来源来缓解 XSS 风险。
- en: Developers and security teams should consider both SOP and CSP as complementary
    measures in their defense strategy against XSS vulnerabilities, understanding
    their limitations and optimizing their usage for enhanced web security.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员和安全团队应将 SOP 和 CSP 作为防御策略中的互补措施来考虑，以应对 XSS 漏洞，理解它们的局限性并优化其使用，从而增强网站安全性。
- en: To summarize, recognizing and mitigating XSS vulnerabilities is critical to
    establishing strong web security. XSS, a common vulnerability, takes advantage
    of user trust in web applications, allowing attackers to inject and execute malicious
    scripts within the context of infected pages.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，识别并缓解 XSS 漏洞对于建立强大的网站安全至关重要。XSS 是一种常见的漏洞，它利用用户对 Web 应用程序的信任，允许攻击者在感染页面的上下文中注入并执行恶意脚本。
- en: This section provided critical insights for developers and security practitioners
    by investigating the mechanics of XSS, its impact, exploitation strategies, and
    the interplay between browser security features.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 本节通过研究XSS的原理、影响、利用策略以及浏览器安全特性的相互作用，为开发者和安全专家提供了重要的见解。
- en: Next, we’ll consider the usage of Python in data breaches and privacy exploitation.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将考虑Python在数据泄露和隐私滥用中的应用。
- en: Python for data breaches and privacy exploitation
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python在数据泄露和隐私滥用中的应用
- en: A data breach occurs when sensitive, protected, or confidential information
    is accessed or disclosed without authorization. Privacy exploitation, on the other
    hand, involves the misuse or unauthorized use of personal information for purposes
    not intended or without the individual’s consent. It encompasses a wide range
    of activities, including unauthorized data collection, tracking, profiling, and
    sharing of personal data without explicit permission.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 数据泄露发生在敏感、受保护或机密信息在未经授权的情况下被访问或披露时。另一方面，隐私滥用涉及个人信息的滥用或未经授权的使用，目的是非预期的，或在没有个人同意的情况下。它涵盖了广泛的活动，包括未经授权的数据收集、追踪、分析和在未明确许可的情况下共享个人数据。
- en: Both data breaches and privacy exploitation pose significant risks to individuals
    and businesses.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 数据泄露和隐私滥用对个人和企业构成重大风险。
- en: In this section, we will look into **web scraping** using Python and Playwright.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中，我们将探讨使用Python和Playwright进行**网页爬取**。
- en: Web scraping has become an essential aspect of the digital world, transforming
    how information is obtained and used on the internet. It refers to the process
    of automatically extracting data from websites, which allows individuals and organizations
    to acquire massive amounts of information in a timely and effective manner. This
    method entails navigating web pages using specialized tools or scripts to extract
    certain data items such as text, photographs, prices, or contact information.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 网页爬取已成为数字世界中的一个重要组成部分，改变了信息在互联网上的获取和使用方式。它指的是从网站上自动提取数据的过程，使个人和组织能够及时有效地获取大量信息。此方法通过使用专门的工具或脚本浏览网页，从中提取某些数据项，如文本、照片、价格或联系方式。
- en: The ethical ramifications of online scraping, on the other hand, are frequently
    disputed. While scraping provides useful insights and competitive advantages,
    it raises questions regarding intellectual property rights, data privacy, and
    website terms of service.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，关于在线爬取的伦理问题经常被争议。虽然爬取提供了有用的见解和竞争优势，但它也引发了有关知识产权、数据隐私和网站服务条款的问题。
- en: 'Here’s a simple Python script using Requests and Beautiful Soup to scrape data
    from a website:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用Requests和Beautiful Soup从网站爬取数据的简单Python脚本：
- en: '[PRE12]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This script sends a `GET` request to a URL, parses the HTML content using Beautiful
    Soup, extracts the title of the page, and prints all the links present on the
    page.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本向一个URL发送`GET`请求，使用Beautiful Soup解析HTML内容，提取页面的标题，并打印页面上的所有链接。
- en: As you can see, this script is very basic. Although we can extract some data,
    it’s not at the level we need. In these cases, we can make use of browser automations
    drivers such as Selenium or Playwright to automate the browser and extract whatever
    data we want from the website.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这段脚本非常基础。尽管我们可以提取一些数据，但它还达不到我们需要的水平。在这种情况下，我们可以利用浏览器自动化驱动程序，如Selenium或Playwright，来自动化浏览器并从网站上提取我们需要的任何数据。
- en: Playwright was designed specifically to meet the requirements of end-to-end
    testing. All recent rendering engines, including Chromium, WebKit, and Firefox,
    are supported by Playwright. You can test on Windows, Linux, and macOS, locally
    or via continuous integration, headlessly, or with native mobile emulation.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: Playwright是专门为满足端到端测试需求而设计的。Playwright支持包括Chromium、WebKit和Firefox在内的所有最新渲染引擎。你可以在Windows、Linux和macOS上进行测试，无论是本地测试、持续集成、无头模式，还是原生移动模拟。
- en: Some concepts that need to be understood before we move on to browser automation
    are **XML Path Language** (**XPath**) and **Cascading Style Sheets** (**CSS**)
    selectors.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续浏览器自动化之前，需要理解的一些概念是**XML路径语言**（**XPath**）和**层叠样式表**（**CSS**）选择器。
- en: XPath
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XPath
- en: XPath is a query language that’s used to navigate XML and HTML documents. It
    provides a way to traverse the elements and attributes in a structured way, allowing
    for specific element selection.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: XPath是一种查询语言，用于导航XML和HTML文档。它提供了一种结构化的方式来遍历元素和属性，从而允许特定元素的选择。
- en: XPath uses expressions to select nodes or elements in an XML/HTML document.
    These expressions can be used to pinpoint specific elements based on their attributes,
    structure, or position in the document tree.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: XPath 使用表达式选择 XML/HTML 文档中的节点或元素。这些表达式可以根据元素的属性、结构或在文档树中的位置精确定位特定元素。
- en: 'Here’s a basic overview of XPath expressions:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 XPath 表达式的基本概述：
- en: '**Absolute path**: This defines the location of an element from the root of
    the document – for example, **/html/body/div[1]/p**.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绝对路径**：这定义了一个元素在文档根目录中的位置——例如，**/html/body/div[1]/p**。'
- en: '**Relative path**: This defines the location of an element relative to its
    parent – for example, **//div[@class=''container'']//p**.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**相对路径**：这定义了一个元素相对于其父元素的位置——例如，**//div[@class=''container'']//p**。'
- en: '**Attributes**: Select elements based on their attributes – for example, **//input[@type=''text'']**.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性**：根据元素的属性选择元素——例如，**//input[@type=''text'']**。'
- en: '**Text content**: Target elements based on their text content – for example,
    **//****h2[contains(text(), ''Title'')]**.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本内容**：根据元素的文本内容选择元素——例如，**//h2[contains(text(), ''Title'')]**。'
- en: XPath expressions are extremely powerful and flexible, allowing you to traverse
    complex HTML structures and select elements precisely.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: XPath 表达式非常强大且灵活，允许你遍历复杂的 HTML 结构并精确地选择元素。
- en: CSS Selectors
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSS 选择器
- en: CSS selectors, commonly used for styling web pages, are also handy for web scraping
    due to their concise and powerful syntax for selecting HTML elements.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 选择器通常用于为网页添加样式，它们的简洁且强大的语法使其在网页抓取中也非常有用。
- en: CSS selectors can target elements based on their ID, class, tag name, attributes,
    and relationships between elements.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 选择器可以根据元素的 ID、类、标签名、属性以及元素之间的关系来选择元素。
- en: 'Here are some examples of CSS selectors:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些 CSS 选择器的示例：
- en: '**Element type**: Selects all elements of a specific type. For instance, **p**
    selects all **<****p>** elements'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**元素类型**：选择特定类型的所有元素。例如，**p** 选择所有 **<p>** 元素。'
- en: '**ID**: Targets elements with a specific ID. For example, **#header** selects
    the element with **id="header"**'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ID**：选择具有特定 ID 的元素。例如，**#header** 选择具有 **id="header"** 的元素。'
- en: '**Class**: Selects elements with a specific class. For instance, **.btn** selects
    all elements with the **btn** class'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类**：选择具有特定类的元素。例如，**.btn** 选择所有具有 **btn** 类的元素。'
- en: '**Attributes**: Targets elements based on their attributes. For example, **input[type=''text'']**
    selects all input elements of the **text** type'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性**：根据元素的属性选择元素。例如，**input[type=''text'']** 选择所有 **text** 类型的输入元素。'
- en: CSS selectors provide a more concise syntax compared to XPath and are often
    easier to use for simple selections. However, they might not be as versatile as
    XPath when dealing with complex HTML structures.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 与 XPath 相比，CSS 选择器提供了更简洁的语法，通常在进行简单选择时更易于使用。然而，在处理复杂 HTML 结构时，它们可能没有 XPath 那么灵活。
- en: 'Now that we’ve explored CSS selectors and their role in web scraping, let’s
    delve into how we can leverage these concepts using a powerful automation tool:
    **Playwright**.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探讨了 CSS 选择器及其在网页抓取中的作用，让我们深入了解如何利用这些概念，使用一个强大的自动化工具：**Playwright**。
- en: 'Playwright is a robust framework for automating browser interactions, allowing
    us to perform web scraping, testing, and more. By combining Playwright with our
    knowledge of CSS selectors, we can efficiently extract information from websites.
    The following example code snippet can be used to scrape information from a website
    using Playwright:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: Playwright 是一个强大的框架，用于自动化浏览器交互，允许我们进行网页抓取、测试等。通过将 Playwright 与我们对 CSS 选择器的理解结合，我们可以高效地从网站中提取信息。以下示例代码片段可用于使用
    Playwright 从网站抓取信息：
- en: '[PRE13]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Replace `'your_selector'` with the CSS selector that matches the element(s)
    you want to scrape from the website. You can use browser developer tools to inspect
    the HTML and find the appropriate CSS selector.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `'your_selector'` 替换为匹配你想要从网站抓取的元素的 CSS 选择器。你可以使用浏览器的开发者工具检查 HTML 并找到合适的 CSS
    选择器。
- en: 'Finding the right CSS selector for web scraping involves inspecting the HTML
    structure of the web page you want to scrape. Here’s a step-by-step guide to using
    your browser’s Developer Tools to find CSS selectors. In this example, we’ll be
    using Chrome Developer Tools (though similar tools can be used in other browsers):'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 为网页抓取找到正确的 CSS 选择器需要检查你想要抓取的网页的 HTML 结构。以下是使用浏览器开发者工具查找 CSS 选择器的逐步指南。在这个例子中，我们将使用
    Chrome 开发者工具（虽然其他浏览器也可以使用类似的工具）：
- en: '**Right-click on the element**: Go to the web page, right-click on the element
    you want to scrape, and select **Inspect** or **Inspect Element**. This will open
    the **Developer** **Tools** panel.'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**右键点击元素**：进入网页，右键点击您想要抓取的元素，并选择 **检查** 或 **检查元素**。这将打开 **开发者工具** 面板。'
- en: '**Identify the element in the HTML**: The **Developer Tools** panel will highlight
    the HTML structure corresponding to the selected element.'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**识别 HTML 中的元素**：**开发者工具**面板将突出显示与所选元素对应的 HTML 结构。'
- en: '**Right-click on the HTML element**: Right-click on the HTML code related to
    the element in the **Developer Tools** panel, and hover over **Copy**.'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**右键点击 HTML 元素**：右键点击与元素相关的 HTML 代码，在 **开发者工具**面板中，悬停在 **复制**上。'
- en: '**Copy the CSS selector**: From the **Copy** menu, choose **Copy selector**
    or **Copy selector path**. This will copy the CSS selector for that specific element.'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**复制 CSS 选择器**：从 **复制** 菜单中，选择 **复制选择器** 或 **复制选择器路径**。这将复制该特定元素的 CSS 选择器。'
- en: '**Use the selector in your code**: Paste the copied CSS selector into your
    Python code within the **page.query_selector_all()** function.'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在代码中使用选择器**：将复制的 CSS 选择器粘贴到您的 Python 代码中的 **page.query_selector_all()** 函数里。'
- en: 'For example, if you’re trying to scrape a paragraph with a class name of `content`,
    the selector might look like this: **.content**.'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您尝试抓取一个类名为 `content` 的段落，选择器可能是这样的：**.content**。
- en: Remember, sometimes, the generated CSS selector might be too specific or not
    specific enough, so you might need to modify or adjust it to accurately target
    the desired elements.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，有时候生成的 CSS 选择器可能过于具体或不够具体，您可能需要修改或调整它，以准确定位所需的元素。
- en: By leveraging Developer Tools in browsers, you can inspect elements, identify
    their structure in the HTML, and obtain CSS selectors to target specific elements
    for scraping. The same goes with the XPath selector.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用浏览器中的开发者工具，您可以检查元素、识别它们在 HTML 中的结构，并获取 CSS 选择器来定位要抓取的特定元素。XPath 选择器也是如此。
- en: This script uses Playwright’s sync API to launch a Chromium browser, navigate
    to the specified URL, and extract information based on the provided CSS selector(s).
    You can modify it to suit your specific scraping needs, such as extracting different
    types of data or navigating multiple pages.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本使用 Playwright 的同步 API 启动一个 Chromium 浏览器，导航到指定 URL，并根据提供的 CSS 选择器提取信息。您可以修改它以适应您的具体抓取需求，比如提取不同类型的数据或浏览多个页面。
- en: 'Even the preceding script doesn’t do anything special. So, let’s create a script
    that navigates to a website, logs in, and scrapes some data. For demonstration
    purposes, I’ll use a hypothetical scenario of scraping data from a user dashboard
    after logging in, such as the following one:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 即使前面的脚本没有做任何特别的事情。接下来，我们创建一个脚本，导航到一个网站，登录，并抓取一些数据。为了演示，我将使用一个假设场景，抓取用户登录后仪表板上的数据，如下所示：
- en: '[PRE14]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let’s take a closer look at the code:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看看代码：
- en: '**Imports**: Imports the necessary modules from Playwright'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导入**：导入 Playwright 所需的模块'
- en: '**scrape_data() function**: This is where the scraping logic resides'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**scrape_data() 函数**：这是抓取逻辑所在的位置'
- en: '**sync_playwright()**: This initiates a Playwright instance'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**sync_playwright()**：这将初始化一个 Playwright 实例'
- en: '**Browser launch**: Launches a Chromium browser instance'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启动浏览器**：启动一个 Chromium 浏览器实例'
- en: '**Context and page**: Creates a new browsing context and opens a new page'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上下文和页面**：创建一个新的浏览上下文并打开一个新页面'
- en: '**Navigation**: Navigates to the target website'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导航**：导航到目标网站'
- en: '**Login**: Fills in the login form with your credentials (replace with the
    actual login process)'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**登录**：用您的凭据填写登录表单（请替换为实际的登录过程）'
- en: '**Waiting for load**: Waits for the page to load after logging in'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**等待加载**：等待登录后页面加载'
- en: '**Scraping**: Uses CSS selectors to find and extract data elements from the
    page'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**抓取**：使用 CSS 选择器从页面中查找并提取数据元素'
- en: '**Processing data**: Prints or processes the scraped data'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**处理数据**：打印或处理抓取的数据'
- en: '**Closing the browser**: Closes the browser and context'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关闭浏览器**：关闭浏览器和上下文'
- en: Replace `'https://example.com'`, `your_username`, `your_password`, and `.data-element-selector`
    with the actual URL, your login credentials, and the specific CSS selectors corresponding
    to the elements you want to scrape, respectively.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 替换 `'https://example.com'`、`your_username`、`your_password` 和 `.data-element-selector`
    为实际的 URL、您的登录凭据和对应于要抓取的元素的具体 CSS 选择器。
- en: We’re getting somewhere! Now, we can implement some logic that navigates these
    pages systematically, scraping data on each page until there are no more pages
    left to crawl.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 我们取得了一些进展！现在，我们可以实现一些逻辑，系统地浏览这些页面，在每一页抓取数据，直到没有更多的页面可供爬取。
- en: 'The code is as follows:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下：
- en: '[PRE15]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here are the key changes from the last program:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是与上一个程序相比的关键变化：
- en: '**A while loop**: The script now uses a **while** loop to continuously scrape
    data and navigate pages. It will keep scraping until no **Next Page** button is
    found.'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**一个while循环**：脚本现在使用**while**循环持续抓取数据并浏览页面。它会一直抓取，直到找不到**下一页**按钮为止。'
- en: '**Scraping and data accumulation**: The data that’s scraped from each page
    is collected and stored in the **scraped_data** list.'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据抓取和积累**：从每一页抓取的数据会被收集并存储在**scraped_data**列表中。'
- en: '**Finding and clicking the Next Page button**: The script looks for the **Next
    Page** button or link and clicks it to navigate to the next page, if available.'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**寻找并点击下一页按钮**：脚本会查找**下一页**按钮或链接，并点击它以导航到下一页（如果有的话）。'
- en: '**Stopping condition**: When no **Next Page** button is found, the loop breaks,
    ending the crawling process.'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**停止条件**：当没有找到**下一页**按钮时，循环中断，结束爬取过程。'
- en: Make sure you replace `'https://example.com'`, `your_username`, `your_password`,
    `.data-element-selector`, and `.next-page-button-selector` with the appropriate
    values and selectors for the website you are targeting.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你将 `'https://example.com'`、`your_username`、`your_password`、`.data-element-selector`
    和 `.next-page-button-selector` 替换为针对目标网站的适当值和选择器。
- en: As we near the end of our look into exploiting online vulnerabilities with Python,
    we’ve discovered the complex landscape of web application vulnerabilities. Python
    has shown to be a flexible tool in the domain of cybersecurity, from learning
    the fundamental concepts to delving into particular attacks such as SQL injection
    and XSS.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们深入探讨如何利用Python进行网络漏洞利用，我们发现了网络应用漏洞的复杂景观。Python已经证明是网络安全领域中的一个灵活工具，从学习基础概念到深入探讨诸如SQL注入和XSS等特定攻击。
- en: The possibility of using Python for data breaches and privacy exploitation,
    such as web scraping, is significant. While I haven’t included explicit instructions
    on gathering personal data through scraping, you already know how and where to
    implement these techniques to obtain such information.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Python进行数据泄露和隐私利用（例如网页抓取）的可能性是显著的。虽然我没有提供收集个人数据的明确指示，但你已经知道如何以及在何处实现这些技术以获取此类信息。
- en: Summary
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter discussed how to use the Python programming language to detect
    and exploit vulnerabilities in web applications. We began by explaining the landscape
    of web vulnerabilities and why understanding them is critical for good security
    testing. Then, we delved into numerous forms of web vulnerabilities, such as SQL
    injection, XSS, and CSRF, explaining their mechanisms and their consequences.
    You learned how Python can be used to automate the detection and exploitation
    of these vulnerabilities through real examples and code snippets. Additionally,
    this chapter emphasized the importance of adequate validation, sanitization, and
    encoding approaches in mitigating these vulnerabilities. At this point, you are
    equipped with essential knowledge and tools to bolster the security posture of
    web applications through Python-based exploitation techniques.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了如何使用Python编程语言来检测和利用网络应用中的漏洞。我们首先解释了网络漏洞的概念以及理解它们为何对良好的安全测试至关重要。接着，我们深入探讨了多种网络漏洞形式，如SQL注入、XSS和CSRF，解释了它们的机制和后果。你将学到如何通过实际示例和代码片段，使用Python自动化检测和利用这些漏洞。此外，本章强调了有效的验证、清理和编码方法在缓解这些漏洞中的重要性。至此，你已经具备了利用Python技术提升网络应用安全防护的基本知识和工具。
- en: In the next chapter, we will explore how Python can be used for offensive security
    in cloud environments while focusing on techniques for cloud espionage and penetration
    testing.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将探讨如何使用Python进行云环境中的攻击性安全工作，重点是云间谍活动和渗透测试技术。
