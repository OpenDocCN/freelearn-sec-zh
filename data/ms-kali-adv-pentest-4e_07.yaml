- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Exploiting Web-Based Applications
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用 Web 应用程序
- en: In previous chapters, we reviewed the attacker’s cyber kill chain, the specific
    approach used to compromise networks and devices and disclose data or hinder access
    to network resources. In *Chapter 5*, *Advanced Social Engineering and Physical
    Security*, we examined the different routes of attack, starting with physical
    attacks and social engineering. In *Chapter 6*, *Wireless and Bluetooth Attacks*,
    we saw how wireless networks could be compromised.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们回顾了攻击者的网络攻击链，这是一种用于破坏网络和设备、泄露数据或阻碍访问网络资源的具体方法。在*第 5 章*，*高级社会工程学与物理安全*中，我们研究了从物理攻击和社会工程学出发的不同攻击路线。在*第
    6 章*，*无线和蓝牙攻击*中，我们看到无线网络是如何被破坏的。
- en: With the adoption of technology, we can see multiple virtual banks in the market.
    These banks do not have any physical infrastructure; they are just made up of
    simple web/mobile applications. Web-based services are ubiquitous, and most organizations
    allow remote access to these services with almost constant availability. In this
    chapter, we’ll focus on one of the most common attack routes through websites,
    web-based applications, and web services. To penetration testers and attackers,
    these web applications expose backend services on the network, client-side activities
    of users accessing the website, and the connection between users and the web application/service’s
    data.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 随着技术的应用，我们可以看到市场上有多家虚拟银行。这些银行没有任何物理基础设施，它们仅由简单的 Web/移动应用程序构成。基于 Web 的服务无处不在，大多数组织允许远程访问这些服务，并且几乎始终保持可用。在本章中，我们将重点介绍通过网站、Web
    应用程序和 Web 服务进行的最常见攻击路径之一。对于渗透测试人员和攻击者而言，这些 Web 应用程序暴露了网络上的后端服务、访问网站的用户的客户端活动以及用户与
    Web 应用程序/服务数据之间的连接。
- en: This chapter will focus on the attacker’s perspective when looking at web applications,
    web services, and client-side exploitation.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将重点从攻击者的角度来审视 Web 应用程序、Web 服务和客户端的利用。
- en: 'By the end of this chapter, you will have learned about the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将学习到以下内容：
- en: Web application hacking methodology
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web 应用程序攻击方法论
- en: The hacker’s mind map
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 黑客的思维导图
- en: Vulnerability scanning of web applications/services
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web 应用程序/服务的漏洞扫描
- en: Application-specific attacks
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定应用程序的攻击
- en: Exploiting vulnerabilities in crypto and web services
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用加密和 Web 服务中的漏洞
- en: Maintaining access to compromised systems with web backdoors
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Web 后门保持对被攻陷系统的访问
- en: Client-side web application attacks
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端 Web 应用程序攻击
- en: Cross-site scripting framework and the BeEF Framework
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨站脚本框架和 BeEF 框架
- en: Web application hacking methodology
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web 应用程序攻击方法论
- en: 'Systematic and goal-oriented penetration testing always starts with the right
    methodology. *Figure 7.1* shows a typical web application hack:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 系统化和目标导向的渗透测试总是从正确的方法论开始。*图 7.1* 显示了一个典型的 Web 应用程序攻击：
- en: '![Diagram  Description automatically generated](../Images/B17765_07_01.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图示说明自动生成](../Images/B17765_07_01.png)'
- en: 'Figure 7.1: Web application hacking methodology'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1：Web 应用程序攻击方法论
- en: 'The methodology is divided into six stages: set target, spider and enumerate,
    vulnerability scanning, exploitation, cover tracks, and maintain access. These
    are explained in detail as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 方法论分为六个阶段：设定目标、蜘蛛抓取和枚举、漏洞扫描、利用漏洞、掩盖痕迹和保持访问权限。以下是详细解释：
- en: '**Set the target**: Setting the right target during a penetration test is very
    important, as attackers will focus more on specific vulnerable systems to gain
    system-level access, as per the kill chain method.'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**设定目标**：在渗透测试中，设定正确的目标非常重要，因为攻击者将更多地关注特定的易受攻击系统，以便根据攻击链方法获得系统级的访问权限。'
- en: '**Spider and enumerate**: At this point, attackers have identified the list
    of web applications and are digging deeper into specific technology versions and
    their relevant vulnerabilities. Multiple methods are engaged to spider all the
    web pages, identify technology, and find everything relevant to advance to the
    next stage.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**蜘蛛抓取和枚举**：此时，攻击者已识别出 Web 应用程序列表，并开始深入研究特定技术版本及其相关的漏洞。使用多种方法来抓取所有网页，识别技术，并寻找一切与下一阶段相关的信息。'
- en: '**Vulnerability scanning**: All known vulnerabilities are collected during
    this phase, using well-known vulnerability databases containing public exploits
    or known common security misconfigurations.'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**漏洞扫描**：在此阶段，收集所有已知的漏洞，利用著名的漏洞数据库，其中包含公开的漏洞利用工具或已知的常见安全配置错误。'
- en: '**Exploitation**: This phase allows the penetration testers to exploit known
    and unknown vulnerabilities, including the business logic of the application.
    For example, if an application is vulnerable to admin interface exposure, attackers
    can try to gain access to the interface by performing various types of attacks
    such as password guessing or brute-force attacks, or by exploiting specific admin
    interface vulnerabilities (for example, a **Java Management eXtensions** (**JMX**)
    console attack on an admin interface without having to log in, deploy war files,
    and run a remote web shell or run commands directly using an exposed **Application
    Programming Interface** (**API**) endpoint).'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**利用**：这一阶段允许渗透测试人员利用已知和未知的漏洞，包括应用程序的业务逻辑。例如，如果某个应用程序存在管理员界面暴露的漏洞，攻击者可以尝试通过执行各种攻击（如密码猜测或暴力破解攻击）或利用特定的管理员界面漏洞（例如，**Java
    管理扩展**（**JMX**）控制台攻击，直接访问管理员界面，无需登录，部署 war 文件，运行远程 Web Shell，或通过暴露的 **应用程序编程接口**（**API**）端点直接执行命令）。'
- en: '**Cover tracks**: At this stage, attackers erase all evidence of the hack.
    For example, if a system has been compromised by a file upload vulnerability and
    remote commands were executed on the server, attackers would attempt to clear
    the application server log, web server log, system logs, and other logs. Once
    tracks are covered, attackers ensure no logs are left that could reveal the origin
    of their exploitation.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**掩盖痕迹**：在这一阶段，攻击者会抹去所有黑客攻击的证据。例如，如果系统通过文件上传漏洞被攻破并执行了远程命令，攻击者会尝试清除应用服务器日志、Web
    服务器日志、系统日志及其他日志。一旦掩盖痕迹，攻击者会确保没有留下任何能够揭示其利用来源的日志。'
- en: '**Maintain access**: Attackers could potentially plant a backdoor and also
    go on to perform privilege escalation or use the system as a zombie to perform
    more focused internal attacks. This could include spreading ransomware on files
    that are shared on network drives, or even (in the case of bigger organizations)
    adding the victim system to a domain to take over the enterprise domain.'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**维持访问**：攻击者可能会植入后门，并进行权限提升，或利用该系统作为僵尸计算机，进行更多针对内部的专门攻击。这可能包括在网络共享驱动器上的文件传播勒索病毒，甚至（在大规模组织中）将受害系统添加到域中，以接管企业域。'
- en: The hacker’s mind map
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 黑客的思维导图
- en: 'There is no substitute for the human mind. In this section, we will focus more
    on how a web application looks from the perspective of an attacker. *Figure 7.2*
    shows a mind map of a web application hack:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 人类思维是无可替代的。在本节中，我们将更多关注从攻击者的角度看待一个 web 应用程序的表现。*图 7.2* 显示了 web 应用程序黑客攻击的思维导图：
- en: '![Diagram  Description automatically generated](../Images/B17765_07_02.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![自动生成的图示描述](../Images/B17765_07_02.png)'
- en: 'Figure 7.2: Web application hacking mind map'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2：Web 应用程序黑客攻击思维导图
- en: 'The mind map is split into two categories: attackers can attack either server-side
    vulnerabilities or client-side vulnerabilities. These vulnerabilities normally
    occur for one of the following reasons:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 思维导图被分为两类：攻击者可以攻击服务器端漏洞或客户端漏洞。这些漏洞通常因以下原因之一而发生：
- en: Use of old or unpatched technology
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用过时或未修补的技术
- en: Poor security configuration for the latest technology
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最新技术的安全配置不足
- en: Design flaw or coding without security in mind
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计缺陷或编码时未考虑安全性
- en: 'The human factor: a lack of skilled staff'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人为因素：缺乏技术熟练的员工
- en: 'On the server side, attackers would typically perform the following list of
    attacks:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端，攻击者通常会执行以下攻击列表：
- en: Web application firewall evasion
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web 应用防火墙规避
- en: Injection attacks
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注入攻击
- en: Remote code execution
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程代码执行
- en: File inclusion – remote and local
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件包含——远程和本地
- en: Directory path traversal
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目录路径遍历
- en: Exploiting session management
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用会话管理
- en: Exploiting the business logic of the system or application implementation
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用系统或应用程序实现中的业务逻辑
- en: Web services misconfiguration or excess authorization privileges
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web 服务配置错误或权限过度授权
- en: Baiting the vulnerable services through shared infrastructure
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过共享基础设施引诱易受攻击的服务
- en: Identifying any relevant information that can help them to perform more dedicated
    attacks
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别任何相关信息，帮助他们进行更专门的攻击
- en: 'Client-side attacks target systems that typically lack the security controls
    (especially firewalls, intrusion detection systems, and endpoint security protections)
    found on enterprise systems and endpoints. If these attacks are successful and
    persistent communication is established, the client device can be used to launch
    attacks if it is reattached to the target’s network. These attacks are focused
    on exploiting the vulnerabilities that exist on the client side, rather than the
    server side. These could include browsers, applications (thick/thin clients),
    and networks, as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端攻击针对的系统通常缺乏企业系统和端点上存在的安全控制（尤其是防火墙、入侵检测系统和端点安全保护）。如果这些攻击成功并且建立了持久通信，一旦客户端设备重新连接到目标网络，就可以利用该设备发起攻击。这些攻击侧重于利用客户端而非服务器端的漏洞，可能包括浏览器、应用程序（厚客户端/薄客户端）和网络，具体如下：
- en: 'Internet Explorer vulnerabilities: Internet Explorer has 1,177 known vulnerabilities
    (see [https://www.cvedetails.com/product/9900/Microsoft-Internet-Explorer.html?vendor_id=26](https://www.cvedetails.com/product/9900/Microsoft-Internet-Explorer.html?vendor_id=26))
    as of December 2021.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Internet Explorer 漏洞：截至 2021 年 12 月，Internet Explorer 已知有 1,177 个漏洞（请见 [https://www.cvedetails.com/product/9900/Microsoft-Internet-Explorer.html?vendor_id=26](https://www.cvedetails.com/product/9900/Microsoft-Internet-Explorer.html?vendor_id=26)）。
- en: JavaScript and Java vulnerabilities.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript 和 Java 漏洞。
- en: 'DNS pinning/rebinding vulnerabilities: DNS rebinding is a DNS-based attack
    on the code embedded in web pages. Normally, requests from code embedded in web
    pages (JavaScript, Java, and Flash) are bound to the website they originate from
    (a same-origin policy). A DNS rebinding attack can be used to improve the ability
    of JavaScript-based malware to penetrate private networks and subvert the browser’s
    same-origin policy.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DNS 绑定/重绑定漏洞：DNS 重绑定是一种针对嵌入网页代码的基于 DNS 的攻击。通常，嵌入网页代码（如 JavaScript、Java 和 Flash）发出的请求会绑定到它们来源的网站（遵循同源策略）。DNS
    重绑定攻击可以提升基于 JavaScript 的恶意软件渗透私有网络并破坏浏览器同源策略的能力。
- en: 'Client script injection vulnerabilities/cross-site scripting: reflected, persistent
    (stored), and DOM-based.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端脚本注入漏洞/跨站脚本攻击：反射型、持久型（存储型）和基于 DOM 的。
- en: With these vulnerabilities in mind, attackers are equipped with a full list
    of exploitation kits and are ready to start reconnaissance.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这些漏洞，攻击者配备了完整的利用工具包，并准备开始侦察。
- en: Reconnaissance of web apps
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web 应用程序侦察
- en: Web applications and the delivery of services from those apps are particularly
    complex. Typically, services are delivered to the end user using a multi-tiered
    architecture with application servers and web servers that are accessible from
    the internet, while communicating with middleware services, backend servers, and
    databases located on the internal network.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Web 应用程序及其提供的服务特别复杂。通常，服务是通过多层架构交付给最终用户，其中包含可通过互联网访问的应用服务器和 web 服务器，同时与位于内部网络中的中间件服务、后端服务器和数据库进行通信。
- en: 'The complexity is increased by several additional factors that must be taken
    into account during testing, which include the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 需要在测试过程中考虑的几个额外因素增加了复杂性，其中包括以下内容：
- en: Network architecture, including security controls (firewalls, IDS/IPS, and honeypots),
    and configurations such as load balancers
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络架构，包括安全控制（防火墙、IDS/IPS 和蜜罐）以及负载均衡器等配置
- en: The platform architecture (hardware, operating system, and additional applications)
    of systems that host web services
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 托管 web 服务的系统平台架构（硬件、操作系统及附加应用程序）
- en: Applications, middleware, and final-tier databases, which may employ different
    platforms (Unix or Windows), vendors, programming languages, and a mix of open
    source, commercial, and proprietary software
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序、中间件和最终层数据库，它们可能使用不同的平台（Unix 或 Windows）、厂商、编程语言，以及开源、商业和专有软件的混合。
- en: Authentication and authorization processes, including the process for maintaining
    session state across the application
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份验证和授权过程，包括维持应用程序会话状态的过程。
- en: The underlying business logic that governs how the application will be used
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理应用程序使用方式的底层业务逻辑
- en: Client-side interactions and communications with the web service
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端与 web 服务之间的交互和通信
- en: Given the proven complexity of web services, it is important for a penetration
    tester to be adaptable to each site’s specific architecture and service parameters.
    At the same time, the testing process must be applied consistently to ensure that
    nothing is missed.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于 Web 服务的复杂性，渗透测试人员必须能够适应每个站点的特定架构和服务参数。同时，测试过程必须一致地应用，以确保没有遗漏任何内容。
- en: Several methodologies have been proposed to accomplish these goals. The most
    widely accepted one is the **Open Web Application Security Project** (**OWASP**;
    see [www.owasp.org](http://www.owasp.org)) and its list of the top 10 vulnerabilities.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这些目标，已经提出了几种方法论。最广泛接受的是**开放式 Web 应用安全项目**（**OWASP**；参见 [www.owasp.org](http://www.owasp.org)）及其列出的前
    10 大漏洞。
- en: As a minimum standard, OWASP provides direction to testers. However, focusing
    on only the top 10 vulnerabilities is short-sighted, and the methodology has demonstrated
    some gaps, particularly when applied to finding vulnerabilities in the logic of
    how an application should work to support business practices.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最低标准，OWASP 为测试人员提供了指导。然而，仅关注前 10 大漏洞是目光短浅的，并且该方法论已经展示出一些漏洞，特别是在应用程序如何支持业务实践的逻辑中发现漏洞时。
- en: 'Using the cyber kill chain approach, some activities specific to web application
    reconnaissance that should be highlighted include the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用网络杀伤链方法，一些特定于 Web 应用程序侦察的活动应包括以下内容：
- en: Identifying the target web app, especially with regard to where and how it is
    hosted.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定目标 web 应用程序，特别是关于它的托管位置和方式。
- en: Enumerating the site directory structure and files of the target website, including
    determining whether a **content management system** (**CMS**) is in use. This
    may include downloading the website for offline analysis, including document metadata
    analysis, and using the site to create a custom wordlist for password cracking
    (using a tool such as `crunch`). It also ensures that all support files are identified.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 枚举目标网站的站点目录结构和文件，包括确定是否使用了**内容管理系统**（**CMS**）。这可能包括下载网站进行离线分析，包括文档元数据分析，并使用该站点创建用于密码破解的自定义词汇表（使用
    `crunch` 等工具）。它还确保识别所有支持文件。
- en: Identifying the authentication and authorization mechanisms and determining
    how the session state is maintained during a transaction with that web service.
    This will usually involve an analysis of cookies and how they are used, utilizing
    a proxy tool.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定认证和授权机制，并确定在与该网络服务进行事务时如何保持会话状态。这通常需要分析 cookies 及其使用方式，并利用代理工具。
- en: Enumerating all forms. As these are the primary means for a client to input
    data and interact with the web app service, they are the location of several exploitable
    vulnerabilities, such as SQL/XML/JSON injection attacks and cross-site scripting.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 枚举所有表单。由于这些是客户端输入数据并与 Web 应用程序服务交互的主要方式，它们是多个可利用漏洞的所在，例如 SQL/XML/JSON 注入攻击和跨站脚本攻击。
- en: Identifying other areas that accept input, such as pages that allow file upload,
    as well as any restrictions on accepted upload types.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定接受输入的其他区域，例如允许文件上传的页面，以及任何对上传类型的限制。
- en: Identifying how errors are handled, and the actual error messages that are received
    by a user. Frequently, the error will provide valuable internal information such
    as the software version used, or internal filenames and processes.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定错误是如何处理的，以及用户接收到的实际错误信息。错误信息通常会提供有价值的内部信息，如使用的软件版本、内部文件名和进程。
- en: The first step is to conduct the passive and active reconnaissance previously
    described (refer to *Chapter 2*, *Open-Source Intelligence and Passive Reconnaissance*,
    and *Chapter 3*, *Active Reconnaissance of External and Internal Networks*).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是进行之前描述的被动和主动侦察（参见 *第二章*，*开源情报与被动侦察*，以及 *第三章*，*外部和内部网络的主动侦察*）。
- en: In particular, ensure that hosted sites are identified, and then use DNS mapping
    to identify all the hosted sites that are delivered by the same server. One of
    the most common and successful means of attack is to attack a non-target site
    hosted on the same physical server as the target website, exploit weaknesses in
    the server to gain root access, and then use the escalated privileges to attack
    the targeted site.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，确保识别托管站点，然后使用 DNS 映射来识别由同一服务器提供的所有托管站点。最常见且成功的攻击手段之一是攻击与目标网站托管在同一物理服务器上的非目标站点，利用服务器中的漏洞获取
    root 权限，然后使用提升的权限攻击目标站点。
- en: This approach works pretty well in a shared cloud environment, where many applications
    are hosted on the same **Software as a Service** (**SaaS**) model.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法在共享云环境中非常有效，在这种环境中，许多应用程序都托管在同一个 **软件即服务** (**SaaS**) 模型下。
- en: Detection of web application firewall and load balancers
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Web 应用防火墙和负载均衡器的检测
- en: The next step is to identify the presence of network-based protective devices,
    such as firewalls and IDS/IPS, and identify any deceptive technologies (honeypots).
    An increasingly common protective device is the **Web Application Firewall** (**WAF**)
    and DNS **Content Delivery Network** (**CDN**).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是识别网络保护设备的存在，如防火墙和 IDS/IPS，并识别任何欺骗性技术（蜜罐）。一种越来越常见的保护设备是 **Web 应用防火墙** (**WAF**)
    和 DNS **内容分发网络** (**CDN**)。
- en: If a WAF is being used, testers will need to ensure that the attacks, especially
    those that rely on crafted input, are encoded to bypass the WAF.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用了 WAF，测试人员需要确保攻击，特别是依赖于精心构造输入的攻击，已经被编码，以绕过 WAF。
- en: WAFs can be identified by manually inspecting cookies (some WAFs tag or modify
    the cookies that are communicated between the web server and the client), or by
    changes to the header information (identified when a tester connects to port `80`
    using a command-line tool such as Telnet).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: WAF 可以通过手动检查 cookies 来识别（一些 WAF 会标记或修改 Web 服务器和客户端之间传递的 cookies），或通过对头信息的更改来识别（当测试人员使用命令行工具如
    Telnet 连接到 `80` 端口时，可以发现这些变化）。
- en: 'The process of WAF detection can be automated using the `nmap` script `http-waf-detect.nse`,
    as shown in *Figure 7.3*:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: WAF 检测过程可以通过 `nmap` 脚本 `http-waf-detect.nse` 自动化，如 *图 7.3* 所示：
- en: '![](../Images/B17765_07_03.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_03.png)'
- en: 'Figure 7.3: nmap script detecting the WAF on port 80'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3：nmap 脚本在端口 80 上检测 WAF
- en: The `nmap` script identifies that a WAF is present; however, testing of the
    script has demonstrated that it is not always accurate in its findings, and that
    the returned data may be too general to guide an effective strategy to bypass
    the firewall.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`nmap` 脚本能够识别 WAF 的存在；然而，脚本的测试表明，它并不总是准确的，返回的数据可能过于笼统，无法为绕过防火墙提供有效的策略指导。'
- en: 'The `wafw00f` script is an automated tool to identify and fingerprint web-based
    firewalls; testing has determined that it is the most accurate tool for this purpose.
    The script is easy to invoke from Kali, and ample output is shown in *Figure 7.4*:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`wafw00f` 脚本是一个自动化工具，用于识别和指纹识别基于 Web 的防火墙；测试结果表明，它是最准确的工具。该脚本可以从 Kali 中轻松调用，且输出结果如
    *图 7.4* 所示：'
- en: '![](../Images/B17765_07_04.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_04.png)'
- en: 'Figure 7.4: wafw00f tool identifying the Cloudflare WAF on the target website'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4：wafw00f 工具识别目标网站上的 Cloudflare WAF
- en: '**Load balancing detector** (**lbd**) is a Bash shell script that determines
    whether a given domain uses DNS and/or HTTP load balancing. This is important
    information from the perspective of a tester, as it can explain seemingly anomalous
    results that occur when one server is tested, and then the load balancer switches
    requests to a different server. `lbd` uses a variety of checks to identify the
    presence of load balancing. Sample output is shown in *Figure 7.5*:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**负载均衡检测器** (**lbd**) 是一个 Bash shell 脚本，用于确定给定域名是否使用 DNS 和/或 HTTP 负载均衡。从测试人员的角度来看，这是一个重要信息，因为它可以解释当测试一个服务器时出现的异常结果，然后负载均衡器将请求切换到另一个服务器。`lbd`
    使用多种检查方法来识别负载均衡的存在。示例输出如 *图 7.5* 所示：'
- en: '![](../Images/B17765_07_05.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_05.png)'
- en: 'Figure 7.5: Load balancer detection using DNS HTTP diff'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5：使用 DNS HTTP 差异进行负载均衡器检测
- en: Fingerprinting a web application and CMS
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Web 应用和 CMS 的指纹识别
- en: Web application fingerprinting is the first task for the penetration tester,
    to find out the version and type of a running web server, and the web technologies
    implemented. These allow attackers to determine known vulnerabilities and the
    appropriate exploits.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Web 应用指纹识别是渗透测试人员的第一项任务，目的是找出运行中的 Web 服务器的版本和类型，以及所实现的 Web 技术。这些信息可以帮助攻击者确定已知的漏洞及其适用的利用方式。
- en: 'Attackers can utilize any type of command-line tool that has the capability
    to connect to the remote host. For example, we have used the `netcat` command
    in *Figure 7.6* to connect to the victim host on port `80`, and issued the `HTTP
    HEAD` command to identify what is being run on the server:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以使用任何能够连接到远程主机的命令行工具。例如，我们在 *图 7.6* 中使用了 `netcat` 命令连接到受害主机的 `80` 端口，并发出了
    `HTTP HEAD` 命令，以识别服务器上运行的内容：
- en: '![](../Images/B17765_07_06.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_06.png)'
- en: 'Figure 7.6: Banner grabbing through netcat and HTTP request headers'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6：通过 netcat 和 HTTP 请求头进行横幅抓取
- en: This returns an HTTP server response that includes the type of web server that
    the application is being run on, and the `server` section providing detailed information
    about the technology used to build the app—in this case, `PHP 7.1.30`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一个HTTP服务器响应，其中包含应用程序运行所在的Web服务器类型，以及`server`部分提供有关应用构建技术的详细信息——在本例中为`PHP
    7.1.30`。
- en: Now, attackers can determine known vulnerabilities using sources such as CVE
    Details (see [https://www.cvedetails.com/vulnerability-list/vendor_id-74/product_id-128/PHP-PHP.html](https://www.cvedetails.com/vulnerability-list/vendor_id-74/product_id-128/PHP-PHP.html)).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，攻击者可以使用诸如CVE Details之类的资源来确定已知漏洞（见 [https://www.cvedetails.com/vulnerability-list/vendor_id-74/product_id-128/PHP-PHP.html](https://www.cvedetails.com/vulnerability-list/vendor_id-74/product_id-128/PHP-PHP.html)）。
- en: The ultimate goal of penetration testing is to obtain sensitive information.
    The website should be inspected to determine the **CMS** that has been used to
    build and maintain it. CMS applications such as Drupal, Joomla, and WordPress,
    among others, may be configured with a vulnerable administrative interface that
    allows access to elevated privileges, or may contain exploitable vulnerabilities.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 渗透测试的最终目标是获取敏感信息。应检查网站，以确定用于构建和维护该网站的**CMS**。例如Drupal、Joomla和WordPress等CMS应用程序，可能配置有脆弱的管理界面，允许访问提升的权限，或者可能包含可被利用的漏洞。
- en: 'Kali includes an automated scanner, `wpscan`, that fingerprints a WordPress
    CMS to determine version information, as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Kali包含一个自动化扫描工具`wpscan`，可以识别WordPress CMS的指纹，以确定版本信息，如下所示：
- en: '[PRE0]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Sample output is shown in *Figure 7.7*:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 样本输出如*图7.7*所示：
- en: '![Text  Description automatically generated](../Images/B17765_07_07.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![文本描述自动生成](../Images/B17765_07_07.png)'
- en: 'Figure 7.7: Fingerprinting WordPress and scanning using wpscan'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.7：通过wpscan识别WordPress并进行扫描
- en: One particular scanning tool, automated web crawlers, can be used to validate
    information that has already been gathered, as well as determine the existing
    directory and file structure of a particular site. Typical findings of web crawlers
    include administration portals, configuration files (current and previous versions)
    that may contain hardcoded access credentials and information on the internal
    structure, backup copies of the website, administrator notes, confidential personal
    information, and source code.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一种特定的扫描工具——自动化网页爬虫——可用于验证已收集的信息，并确定特定网站的现有目录和文件结构。网页爬虫的典型发现包括管理门户、可能包含硬编码访问凭证和内部结构信息的配置文件（当前版本和历史版本）、网站备份副本、管理员备注、机密个人信息以及源代码。
- en: Kali supports several web crawlers, including Burp Suite Community Edition,
    DirBuster, ZAP, dirb, wfuzz, and CutyCapt. The most commonly used tool is DirBuster.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Kali支持多个网页爬虫，包括Burp Suite Community Edition、DirBuster、ZAP、dirb、wfuzz和CutyCapt。最常用的工具是DirBuster。
- en: DirBuster is a GUI-driven application that uses a list of possible directories
    and files to perform a brute-force analysis of a website’s structure. Responses
    can be viewed in a list or a tree format that reflects the site’s structure more
    accurately. Output from executing this application against a target website is
    shown in *Figure 7.8*.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: DirBuster是一个基于GUI的应用程序，使用可能的目录和文件列表来对网站结构进行暴力破解分析。响应结果可以以列表或树形格式显示，后者更准确地反映了网站结构。对目标网站执行此应用程序的输出如*图7.8*所示。
- en: 'The following are the steps to open DirBuster in the GUI and initiate a scan:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在GUI中打开DirBuster并启动扫描的步骤：
- en: Open the application by running `sudo dirbuster` in the terminal or by navigating
    from **Applications** > **03 web application analysis** > **Web crawlers and directory
    bruteforce** > **dirbuster**.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中运行`sudo dirbuster`，或从**应用程序** > **03 网络应用分析** > **网页爬虫与目录暴力破解** > **dirbuster**来打开该应用程序。
- en: Enter our target website address in **Target URL**.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**目标URL**中输入我们的网站地址。
- en: Select the wordlist by clicking on **Browse**; it can be customized, or you
    can use the well-known wordlists stored in `/usr/share/dirbuster/wordlists/`.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**浏览**来选择字典文件；该字典可以自定义，也可以使用存储在`/usr/share/dirbuster/wordlists/`中的常用字典。
- en: Enter the file extension and click on **Start**:![](../Images/B17765_07_08.png)
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入文件扩展名并点击**开始**：![](../Images/B17765_07_08.png)
- en: 'Figure 7.8: Running OWASP DirBuster to enumerate valid files on the target
    web application'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.8：运行OWASP DirBuster来枚举目标网站应用中的有效文件
- en: Mirroring a website from the command line
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从命令行镜像网站
- en: Attackers may need to spend a lot of time identifying the vulnerabilities in
    specific pages/URL locations. Common tactics include cloning or downloading all
    available website information locally to narrow down the right entry point to
    exploit and performing social engineering attacks to harvest email addresses and
    other relevant information.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可能需要花费大量时间识别特定页面/URL 位置的漏洞。常见策略包括克隆或下载所有可用的站点信息到本地，以缩小正确的入口点进行利用，并执行社交工程攻击以收集电子邮件地址和其他相关信息。
- en: It is also possible to copy a website directly to the tester’s location. This
    allows the tester to review the directory structure and its contents, extract
    metadata from local files, and use the site’s contents as input to a program such
    as `crunch`, which will produce a personalized wordlist to support password cracking.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以直接将网站复制到测试人员的位置。这使得测试人员可以查看目录结构及其内容，从本地文件中提取元数据，并将站点内容作为程序（如 `crunch`）的输入，从而生成个性化的密码破解字典。
- en: Once you have mapped out the basic structure of the website and/or web services
    that are being delivered, the next stage of the kill chain is to identify the
    vulnerabilities that can be exploited.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你绘制出网站和/或交付的网络服务的基本结构，接下来的步骤是识别可以被利用的漏洞。
- en: 'In Kali Linux 2021.4, this tool is not pre-installed; however, this can be
    installed by running `sudo apt install httrack` in the terminal, and then enter
    `httrack` to see the option for the penetration tester to download all the website’s
    contents to the local system. `Httrack` is both a command-line and GUI utility,
    widely used to make a local copy of any website. Attackers can directly issue
    the `httrack http://targetwebapp/ -O outputfolder` command, as shown in *Figure
    7.9*:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kali Linux 2021.4 中，工具没有预先安装；但是，可以通过在终端中运行 `sudo apt install httrack` 来安装，然后输入
    `httrack` 查看渗透测试人员下载网站内容到本地系统的选项。`Httrack` 是一个命令行和 GUI 工具，广泛用于制作任何网站的本地副本。攻击者可以直接发出
    `httrack http://targetwebapp/ -O outputfolder` 命令，如*图 7.9*所示：
- en: '![](../Images/B17765_07_09.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_09.png)'
- en: 'Figure 7.9: Running the website copier httrack'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.9：运行网站复制工具 httrack
- en: Once `httrack` is complete, testers must be able to load the application locally
    and harvest information, identify the hardcoded credentials in HTML comments or
    backup files, or identify design/implementation flaws.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 `httrack` 完成，测试人员就应该能够在本地加载应用程序并收集信息，识别 HTML 注释或备份文件中的硬编码凭据，或识别设计/实现缺陷。
- en: Client-side proxies
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端代理
- en: A client-side proxy intercepts HTTP and HTTPS traffic, allowing a penetration
    tester to examine communications between the user and the application. It allows
    the tester to copy the data or interact with requests that are sent to the application,
    therefore allowing them to manipulate or bypass the client-side restrictions.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端代理拦截 HTTP 和 HTTPS 流量，允许渗透测试人员检查用户与应用程序之间的通信。它允许测试人员复制数据或与发送到应用程序的请求进行交互，从而使他们能够操控或绕过客户端限制。
- en: Client-side proxies were initially designed for debugging applications; the
    same functionality can be abused by attackers to perform man-in-the-middle or
    man-in-the-browser attacks.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端代理最初是为调试应用程序而设计的；攻击者可以滥用相同的功能来执行中间人攻击或浏览器中间人攻击。
- en: Kali comes with several client-side proxies, including Burp Suite and ZAP. After
    extensive testing, we have come to rely on Burp Proxy, with ZAP as a backup tool.
    In this section, we will explore Burp Suite.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Kali 自带了多个客户端代理工具，包括 Burp Suite 和 ZAP。经过广泛测试，我们已依赖 Burp Proxy，并将 ZAP 作为备用工具。在本节中，我们将探讨
    Burp Suite。
- en: Burp Proxy
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Burp Proxy
- en: 'In this section, we’ll use Mutillidae, the web application that we installed
    when building our virtual lab in *Chapter 1*, *Goal-Based Penetration Testing*.
    Burp is primarily used to intercept HTTP(S) traffic; the latest version is Burp
    Suite Community Edition 2021.9.1 (version is 2021.8.2 is installed by default
    in Kali Linux 2021.4). However, it is part of a larger suite of tools that has
    several additional functions, including the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 Mutillidae，这个我们在构建虚拟实验室时安装的 Web 应用程序，安装过程见*第 1 章*，*基于目标的渗透测试*。Burp
    主要用于拦截 HTTP(S) 流量；最新版本是 Burp Suite Community Edition 2021.9.1（Kali Linux 2021.4
    默认安装的版本是 2021.8.2）。然而，它是一个包含多个附加功能的大型工具套件，功能包括以下几点：
- en: An application-aware (built-in information about the applications) tool that
    performs deep crawling on the target site
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一款应用感知工具（具有关于应用程序的内置信息），能够对目标网站进行深度爬取
- en: A vulnerability scanner, including a sequencer to test the randomness of session
    tokens, and a repeater to manipulate and resend requests between the client and
    the website (the vulnerability scanner is not included with the free version of
    Burp Proxy that is packaged in Kali)
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个漏洞扫描器，包括一个序列生成器，用于测试会话令牌的随机性，以及一个重复器，用于操控并重新发送客户端与网站之间的请求（漏洞扫描器不包括在 Kali 附带的
    Burp Proxy 的免费版本中）
- en: An intruder tool that can be used to launch customized attacks (there are speed
    limitations in the free version of the tool included with Kali; these are removed
    if you purchase the commercial version of the software)
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个入侵者工具，可用于发起自定义攻击（Kali附带的免费版工具有速度限制；如果购买软件的商业版，这些限制将被移除）
- en: The ability to edit existing plugins or write new ones in order to extend the
    number and type of attacks that can be used
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以编辑现有插件或编写新插件，以扩展可用的攻击类型和数量
- en: A decoder to decode well-known cipher text, a comparer to make word- or byte-level
    comparisons, and an extender to add any third-party add-ons or your own custom
    code
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个解码器，用于解码已知的密文，一个比较器，用于进行字词或字节级的比较，以及一个扩展器，用于添加任何第三方插件或自定义代码
- en: To use Burp, ensure that your web browser is configured to use a local proxy;
    usually, you will have to adjust the network settings to specify that HTTP and
    HTTPS traffic must use localhost (`127.0.0.1`) at port `8080`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Burp，确保你的网页浏览器配置为使用本地代理；通常，你需要调整网络设置，指定 HTTP 和 HTTPS 流量必须使用本地地址 (`127.0.0.1`)，端口为
    `8080`。
- en: After setting up the browser, open the proxy tool by running `burpsuite` in
    the terminal and manually map the application in the **Target** tab. This is accomplished
    by turning off proxy interception, and then browsing the entire application. Follow
    every link, submit the forms, and log in to as many areas of the site as possible.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好浏览器后，通过终端运行`burpsuite`打开代理工具，并手动在**目标**选项卡中映射应用程序。这通过关闭代理拦截来完成，然后浏览整个应用程序。点击每个链接，提交表单，并尽可能多地登录到网站的各个区域。
- en: Additional content will be inferred from various responses. The next step is
    to select the target website and right-click **Add to scope**, as seen in the
    following *Figure 7.10*.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 额外的内容将通过各种响应推断出来。下一步是选择目标网站并右键点击**添加到作用域**，如以下*图 7.10*所示。
- en: '![](../Images/B17765_07_10.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_10.png)'
- en: 'Figure 7.10: Adding a specific target web application to scope'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.10：将特定目标 Web 应用添加到作用域
- en: 'The site map will populate an area under the **Target** tab. Automated crawling
    can also be used by navigating to **Dashboard** in the main menu, selecting **New
    live task**, selecting **Live passive crawl**, then clicking on **Scan configuration**
    and then **New…**, typing the **Configuration name** as`crawl` or `deep crawl`,
    and then selecting **Links** from **Types of item to add** and **Everything**
    in **URLs to add**, as seen in the following *Figure 7.11.* However, the manual
    technique gives the tester the opportunity to become more familiar with the target,
    and it may identify areas to be avoided, such as `/.bak` files or `.svn` files,
    which penetration testers often overlook during assessments:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 站点地图将在**目标**选项卡下填充区域。也可以通过导航到主菜单中的**仪表板**，选择**新建实时任务**，选择**实时被动爬取**，然后点击**扫描配置**，再点击**新建…**，输入**配置名称**为`crawl`或`deep
    crawl`，然后在**要添加的项目类型**中选择**链接**，在**要添加的 URL**中选择**所有**，如以下*图 7.11*所示。然而，手动技术让测试人员有机会更熟悉目标，且可能识别出需要避免的区域，如`/.bak`文件或`.svn`文件，这些是渗透测试人员在评估过程中常常忽略的：
- en: '![](../Images/B17765_07_11.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_11.png)'
- en: 'Figure 7.11: Scan configuration to crawl a target'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.11：扫描配置以爬取目标
- en: 'Once this is completed, you can hide items that are not of interest on the
    site map using display filters. A site map created of a target website is shown
    in *Figure 7.12*:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，你可以使用显示过滤器隐藏站点地图中不感兴趣的项目。目标网站的站点地图显示在*图 7.12*中：
- en: '![](../Images/B17765_07_12.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_12.png)'
- en: 'Figure 7.12: Site map of the target web application in Burp Suite'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.12：Burp Suite 中目标 Web 应用的站点地图
- en: Once crawling has been completed, manually review the directory and file list
    for any structures that do not appear to be part of the public website, or that
    appear to be unintentionally disclosed. For example, directories titled `admin`,
    `backup`, `documentation`, or `notes` should be manually reviewed.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 爬取完成后，手动检查目录和文件列表，查看是否有任何结构似乎不属于公开网站，或者似乎无意间泄露了。例如，名为`admin`、`backup`、`documentation`或`notes`的目录应当手动检查。
- en: 'We will try some manual testing of the login page in our vulnerable web application
    running on `http://yourIP/mutillidae/` by submitting a single quote to the username
    and password form. This input produces an error code suggesting that it may be
    vulnerable to an SQL injection attack; a sample return of the error code is shown
    in *Figure 7.13*:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在运行于`http://yourIP/mutillidae/`的易受攻击的 Web 应用程序中对登录页面进行一些手动测试，方法是将单引号提交到用户名和密码表单中。这一输入将生成一个错误代码，暗示该页面可能受到
    SQL 注入攻击的威胁；错误代码的一个示例返回如*图 7.13*所示：
- en: '![](../Images/B17765_07_13.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_13.png)'
- en: 'Figure 7.13: Database error on Mutillidae'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.13：Mutillidae 中的数据库错误
- en: The real strength of a proxy is its ability to intercept and modify commands.
    For this particular example, we will perform an attack to bypass authentication
    through SQL injection.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 代理的真正强大之处在于它能够拦截并修改命令。对于这个特定的示例，我们将进行一次通过 SQL 注入绕过认证的攻击。
- en: To launch this attack, ensure that Burp Proxy is configured to intercept communications
    by going to the **Proxy** tab and selecting the **Intercept** subtab. Make sure
    to select **Intercept is on**, as shown in *Figure 7.14*. When this is completed,
    open a browser window and access the Mutillidae login page by entering `<IP address>/mutillidae/index.php?page=login.php`.
    Enter variables in the **Name** and **Password** fields, and then click on the
    **Login** button.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要发起此攻击，请确保 Burp Proxy 配置为拦截通信，方法是进入**Proxy**标签页并选择**Intercept**子标签。确保选择**Intercept
    is on**，如*图 7.14*所示。完成此操作后，打开浏览器窗口并访问 Mutillidae 登录页面，地址为`<IP address>/mutillidae/index.php?page=login.php`。在**Name**和**Password**字段中输入变量，然后点击**Login**按钮。
- en: 'If you return to Burp Proxy, you will see that the information that the user
    entered into the form on the web page was intercepted:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果返回到 Burp Proxy，你将看到用户在网页表单中输入的信息被拦截了：
- en: '![](../Images/B17765_07_14.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_14.png)'
- en: 'Figure 7.14: Intercepting the request sent to the server in Burp Proxy'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.14：在 Burp Proxy 中拦截发送到服务器的请求
- en: 'Click on the **Action** button and select the **Send to Intruder** option.
    Open the main **Intruder** tab, and you will see four subtabs, **Target**, **Positions**,
    **Payloads**, and **Options**, as shown in *Figure 7.15*:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**Action**按钮，选择**Send to Intruder**选项。打开主**Intruder**标签页，你将看到四个子标签，分别是**Target**、**Positions**、**Payloads**和**Options**，如*图
    7.15*所示：
- en: '![](../Images/B17765_07_15.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_15.png)'
- en: 'Figure 7.15: Loading the request into Burp Intruder module'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.15：将请求加载到 Burp Intruder 模块
- en: If you select **Positions**, you will see that five payload positions were identified
    from the intercepted information.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择**Positions**，你将看到从拦截的信息中识别出了五个有效载荷位置。
- en: This attack will use Burp Proxy’s **Sniper** mode, which takes a single input
    from a list provided by the tester and sends this input to a single payload position
    at a time. Testers will need to clear all the pre-defined positions and select
    only the ones needed before proceeding. For this example, we will target the `username`
    field, which we suspect is vulnerable based on the returned error message.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 该攻击将使用 Burp Proxy 的**Sniper**模式，该模式从测试人员提供的列表中获取一个输入，并将此输入一次性发送到一个有效载荷位置。测试人员需要清除所有预定义的有效载荷位置，并仅选择需要的那些位置，然后继续进行攻击。对于此示例，我们将针对`username`字段进行攻击，因为根据返回的错误消息，我们怀疑该字段存在漏洞。
- en: 'To define the payload position, we select the **Payloads** subtab. In this
    case, we have selected a simple list. This list can be manually entered or can
    be filled in by copying from other sources, as shown in *Figure 7.16*:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义有效载荷位置，我们选择**Payloads**子标签。在本例中，我们选择了一个简单的列表。这个列表可以手动输入，也可以通过从其他来源复制来填充，如*图
    7.16*所示：
- en: '![](../Images/B17765_07_16.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_16.png)'
- en: 'Figure 7.16: Adding the payload to the intruder module'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.16：将有效载荷添加到入侵者模块
- en: To launch the attack, select **Intruder** from the top menu and then select
    **Start Attack**. The proxy will iterate the wordlist against the selected payload
    positions as legitimate HTTP requests, and it will return the server’s status
    codes.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要发起攻击，请从顶部菜单中选择**Intruder**，然后选择**Start Attack**。代理将通过将单词列表与选定的有效载荷位置进行匹配，以合法的
    HTTP 请求形式进行迭代，并返回服务器的状态码。
- en: 'As you can see in *Figure 7.17*, most options produce a status code of `200`
    (request succeeded); however, some of the data returns a status code of `302`
    (request found, indicating that the requested resource is presently located under
    a different URI):'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图 7.17*所示，大多数选项返回的状态码为`200`（请求成功）；然而，部分数据返回状态码为`302`（请求已找到，表示请求的资源当前位于不同的
    URI 下）：
- en: '![](../Images/B17765_07_17.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_17.png)'
- en: 'Figure 7.17: Successful SQL injection on the login form to gain access to the
    application'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.17：在登录表单上成功进行 SQL 注入，获取应用程序访问权限
- en: The `302` status indicates successful attacks, and the data obtained can successfully
    be used to log in to the target site.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`302` 状态表示攻击成功，获得的数据可以成功用于登录目标网站。'
- en: Unfortunately, this is too brief of an overview of Burp Proxy and its capabilities.
    The free version included with Kali will suffice for many testing tasks; however,
    serious testers (and attackers) should consider purchasing the commercial version,
    which provides the option of an automated scanner with reporting capabilities
    and plugins for automating tasks.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这对 Burp Proxy 及其功能的概述过于简短。Kali 中包含的免费版本足以应对许多测试任务；然而，严肃的测试人员（和攻击者）应考虑购买商业版本，该版本提供自动化扫描器、报告功能以及插件以自动化任务。
- en: Web crawling and directory brute-force attacks
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络爬虫和目录暴力破解攻击
- en: Web crawling is the process of getting specific information from websites using
    a bot or automated script. Kali provides inbuilt applications to perform this
    activity. The benefit of web crawling is that it lets you scrape data without
    having to perform attacks manually, one by one.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 网络爬虫是使用机器人或自动化脚本从网站获取特定信息的过程。Kali 提供了内建应用来执行此活动。网络爬虫的好处是，它能让你无需手动逐个执行攻击即可抓取数据。
- en: Attackers can also make use of OWASP DirBuster, dirb, wfuzz, and CutyCapt to
    perform the same actions.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者还可以利用 OWASP DirBuster、dirb、wfuzz 和 CutyCapt 执行相同的操作。
- en: Web service-specific vulnerability scanners
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 针对 web 服务的特定漏洞扫描器
- en: Vulnerability scanners are automated tools that crawl an application to identify
    the signatures of known vulnerabilities.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞扫描器是自动化工具，用于爬行应用程序，识别已知漏洞的特征。
- en: Kali comes with several different preinstalled vulnerability scanners. Penetration
    testers will typically use two or three comprehensive scanners against the same
    target to ensure valid results are obtained to achieve the goal of the test. Note
    that some vulnerability scanners also include an attack functionality.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Kali 自带多种不同的预安装漏洞扫描器。渗透测试人员通常会针对同一目标使用两到三个综合扫描器，以确保获得有效的结果，从而实现测试目标。请注意，一些漏洞扫描器还包含攻击功能。
- en: Vulnerability scanners are mostly noisy and are usually detected by the victim.
    However, scans frequently get ignored as part of regular background activity.
    In fact, some attackers have been known to launch large-scale scans against a
    target to camouflage the real attack, or to induce defenders to disable detection
    systems to reduce the influx of reports that they have to manage.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞扫描器通常噪声较大，且通常会被受害者检测到。然而，扫描经常作为常规后台活动被忽略。事实上，一些攻击者已知会对目标发起大规模扫描，以掩盖真正的攻击，或诱使防御者禁用检测系统，以减少他们必须处理的报告数量。
- en: 'Important vulnerability scanners include the following:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的漏洞扫描器包括以下内容：
- en: '| **Application** | **Description** |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| **应用程序** | **描述** |'
- en: '| --- | --- |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Nikto | A Perl-based open source scanner that allows IDS evasion and user
    changes to scanned modules. This original web scanner is beginning to show its
    age and is not as accurate as some of the more modern scanners. |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| Nikto | 一个基于 Perl 的开源扫描器，允许 IDS 规避和用户对扫描模块的更改。这个原始的 web 扫描器开始显得有些老旧，准确性不如一些现代的扫描器。
    |'
- en: '| Skipfish | A scanner that completes a recursive crawl and dictionary-based
    crawl to generate an interactive site map of the targeted website, annotated with
    the output from additional vulnerability scans. |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| Skipfish | 一个完成递归爬行和基于字典的爬行的扫描器，用于生成目标网站的互动网站地图，并附有额外漏洞扫描的输出注释。 |'
- en: '| Wapiti | A Python-based open source vulnerability scanner. |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| Wapiti | 一个基于 Python 的开源漏洞扫描器。 |'
- en: '| WebSploit | An advanced **man-in-the-middle** (**MiTM**) framework, useful
    in wireless and Bluetooth attacks. |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| WebSploit | 一个高级的**中间人攻击**（**MiTM**）框架，适用于无线和蓝牙攻击。 |'
- en: '| ZAP | ZAP is an open-source web application security scanner that covers
    all the OWASP top 10 vulnerabilities with the ability to perform automated and
    manual techniques to test for business log flaws along with proxy capability.
    |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| ZAP | ZAP 是一个开源的 web 应用安全扫描器，涵盖了 OWASP 前十大漏洞，能够执行自动化和手动技术来测试业务登录漏洞，并具有代理功能。
    |'
- en: 'Table 7.1: Popular vulnerability scanners'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 7.1：流行的漏洞扫描器
- en: Kali also includes some application-specific vulnerability scanners. For example,
    WPScan is used specifically against **WordPress CMS** applications.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Kali 还包括一些应用程序特定的漏洞扫描工具。例如，WPScan 专门用于针对 **WordPress CMS** 应用程序。
- en: Application-specific attacks
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序特定的攻击
- en: Application-specific attacks outnumber attacks against specific operating systems.
    When you consider the misconfigurations, vulnerabilities, and logic errors that
    can affect each online application, it is surprising that any application can
    be considered secure.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 针对应用程序的攻击比针对特定操作系统的攻击更多。当考虑到可能影响每个在线应用程序的配置错误、漏洞和逻辑错误时，任何应用程序能被认为是安全的都令人惊讶。
- en: We will highlight some of the more important attacks against web services.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重点介绍一些针对 Web 服务的重要攻击。
- en: Brute-forcing access credentials
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 暴力破解访问凭据
- en: One of the most common initial attacks against a website or its services is
    a brute-force attack against access authentication, guessing the username and
    password. This attack has a high success rate because users tend to select easy-to-remember
    credentials or reuse credentials, and also because system administrators frequently
    don’t control multiple access attempts.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 针对网站或其服务的最常见初始攻击之一是对访问认证的暴力破解攻击，猜测用户名和密码。这种攻击的成功率很高，因为用户倾向于选择容易记住的凭据或重复使用凭据，而且系统管理员通常不控制多次访问尝试。
- en: Kali comes with `hydra`, a command-line tool, and `hydra-gtk`, which has a GUI
    interface. Both tools allow a tester to brute-force or iterate possible usernames
    and passwords against a specified service. Multiple communication protocols are
    supported, including FTP, FTPS, HTTP, HTTPS, ICQ, IRC, LDAP, MySQL, Oracle, POP3,
    pcAnywhere, SNMP, SSH, VNC, and others.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Kali 自带 `hydra`，一个命令行工具，以及带有图形用户界面的 `hydra-gtk`。这两个工具都允许测试人员对指定服务进行暴力破解或迭代可能的用户名和密码。支持多种通信协议，包括
    FTP、FTPS、HTTP、HTTPS、ICQ、IRC、LDAP、MySQL、Oracle、POP3、pcAnywhere、SNMP、SSH、VNC 等。
- en: 'The following screenshot shows `hydra` using a brute-force attack to determine
    the access credentials on an HTTP page:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了 `hydra` 使用暴力破解攻击来确定 HTTP 页面上的访问凭据：
- en: '[PRE1]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the coming section, we will explore common injection attacks that are exploited
    by attackers in general.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将探讨攻击者通常利用的常见注入攻击。
- en: OS command injection using commix
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 commix 进行操作系统命令注入
- en: '**Command injection exploiter** (**commix**) is an automated tool written in
    Python that is pre-compiled in Kali Linux to perform various OS commands if the
    application is vulnerable to command injection.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '**命令注入工具** (**commix**) 是一个用 Python 编写的自动化工具，已在 Kali Linux 中预编译，用于在应用程序易受命令注入攻击时执行各种操作系统命令。'
- en: It allows attackers to inject into any specific vulnerable parts of the application,
    or even into an HTTP header.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 它允许攻击者注入到应用程序的任何特定易受攻击部分，甚至是 HTTP 头部中。
- en: commix also comes as an additional plugin in various penetration testing frameworks
    such as TrustedSec’s **PenTesters Framework** (**PTF**) and OWASP’s **Offensive
    Web Testing Framework** (**OWTF**).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: commix 还作为附加插件出现在各种渗透测试框架中，如 TrustedSec 的 **PenTesters Framework** (**PTF**)
    和 OWASP 的 **Offensive Web Testing Framework** (**OWTF**)。
- en: Attackers may use all the functionalities provided by commix by entering `commix
    -h` in the terminal.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以通过在终端输入 `commix -h` 来使用 commix 提供的所有功能。
- en: 'To simulate an exploit, execute the following command in the terminal on the
    targeted vulnerable web server:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 要模拟攻击，在目标易受攻击的 Web 服务器的终端执行以下命令：
- en: '[PRE2]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When the commix tool is run against the vulnerable URL, penetration testers
    should be able to see the progress of command execution on the target server and
    also be able to see which parameter is vulnerable. In the preceding scenario,
    `target_host` is the variable that was injectable using classic injection techniques,
    as shown in *Figure 7.18*:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 当 commix 工具针对易受攻击的 URL 运行时，渗透测试人员应该能够看到命令执行在目标服务器上的进度，并且能够看到哪个参数是易受攻击的。在前面的场景中，`target_host`
    是使用经典注入技术可以注入的变量，如 *图 7.18* 所示：
- en: '![](../Images/B17765_07_18.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_18.png)'
- en: 'Figure 7.18: Command injection using commix'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.18：使用 commix 进行命令注入
- en: 'Once the injection is successful, attackers can run commands on the server,
    for example, `dir` to list all the files and folders, as shown in *Figure 7.19*:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦注入成功，攻击者可以在服务器上运行命令，例如，使用 `dir` 列出所有文件和文件夹，如 *图 7.19* 所示：
- en: '![](../Images/B17765_07_19.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_19.png)'
- en: 'Figure 7.19: Remote command execution using commix on the remote system'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.19：使用 commix 在远程系统上进行远程命令执行
- en: Testers must be careful while running commix on web applications on a shared
    infrastructure as it can cause a significant load “on” the memory of the hosting
    server.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 测试人员在共享基础设施上运行 Commix 时必须小心，因为这可能会对托管服务器的内存造成显著负载。
- en: sqlmap
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlmap
- en: The most common and exploitable vulnerability in websites is the injection vulnerability,
    which occurs when the victim site does not monitor user input, thereby allowing
    the attacker to interact with backend systems. An attacker can craft the input
    data to modify or steal content from a database, place an executable onto the
    server, or issue commands to the operating system.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 网站中最常见和最易利用的漏洞是注入漏洞，发生在受害网站没有监控用户输入时，从而允许攻击者与后台系统进行交互。攻击者可以构造输入数据来修改或窃取数据库中的内容，将可执行文件上传到服务器，或向操作系统发出命令。
- en: One of the most useful and powerful tools for assessing SQL injection vulnerabilities
    is `sqlmap`, a Python tool that automates the reconnaissance and exploitation
    of Firebird, Microsoft SQL, MySQL (now called MariaDB, a community-developed and
    commercially supported fork of MySQL), Oracle, PostgreSQL, Sybase, and SAP MaxDB
    databases.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 用于评估 SQL 注入漏洞的最有用且强大的工具之一是 `sqlmap`，它是一个 Python 工具，能够自动化对 Firebird、Microsoft
    SQL、MySQL（现称为 MariaDB，MySQL 的社区开发和商业支持分支）、Oracle、PostgreSQL、Sybase 和 SAP MaxDB
    数据库的侦察与利用。
- en: We’ll demonstrate an SQL injection attack against the Mutillidae database. The
    first step is to determine the web server, the backend database management system,
    and the available databases.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将演示对 Mutillidae 数据库进行 SQL 注入攻击。第一步是确定 web 服务器、后台数据库管理系统以及可用的数据库。
- en: Access the Mutillidae website and review the web pages to identify ones that
    accept user input (for example, the user login form that accepts a username and
    password from a remote user); these pages may be vulnerable to SQL injection.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 Mutillidae 网站并查看网页，找出接受用户输入的页面（例如，接受远程用户输入用户名和密码的用户登录表单）；这些页面可能存在 SQL 注入漏洞。
- en: 'Then, open Kali and from the terminal, enter the following (using the appropriate
    target IP address):'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开 Kali，在终端中输入以下命令（使用合适的目标 IP 地址）：
- en: '[PRE3]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`sqlmap` will return data, as shown in *Figure 7.20*:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`sqlmap` 将返回数据，如*图 7.20*所示：'
- en: '![](../Images/B17765_07_20.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_20.png)'
- en: 'Figure 7.20: Output of sqlmap execution on the vulnerable link'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.20：sqlmap 在易受攻击的链接上执行的输出
- en: 'The most likely database to store the application’s data is the Mutillidae
    database; therefore, we will check for all the tables of that database using the
    following command:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 最有可能存储应用程序数据的数据库是 Mutillidae 数据库；因此，我们将使用以下命令检查该数据库的所有表：
- en: '[PRE4]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The data returned from executing that command is shown in *Figure 7.21*:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 执行该命令返回的数据如*图 7.21*所示：
- en: '![](../Images/B17765_07_21.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_21.png)'
- en: 'Figure 7.21: Listing all the tables from the Mutillidae database using sqlmap'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.21：使用 sqlmap 列出 Mutillidae 数据库中的所有表
- en: Of all the tables that were enumerated, one was titled `accounts`. We will attempt
    to dump the data from this part of the table. If successful, the account credentials
    will allow us to return to the database if further SQL injection attacks fail.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有列出的表中，有一个表名为 `accounts`。我们将尝试从该表部分转储数据。如果成功，账户凭证将允许我们在进一步的 SQL 注入攻击失败时重新访问数据库。
- en: 'To dump the credentials, use the following command:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 要转储凭证，请使用以下命令：
- en: '[PRE5]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/B17765_07_22.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_22.png)'
- en: 'Figure 7.22: Dumping all the contents of a table within a selected database'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.22：在选定数据库中转储表的所有内容
- en: 'The above example focused on the HTTP `GET` parameter. However, attackers can
    utilize the HTTP `POST` parameter as well using any proxy tool and capture the
    complete `POST` from the client, copy it into a file, and then run `sudo sqlmap
    –r filename`, as shown in *Figure 7.23*:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例集中在 HTTP `GET` 参数上。然而，攻击者也可以使用任何代理工具利用 HTTP `POST` 参数，并捕获客户端的完整 `POST` 请求，将其复制到文件中，然后运行
    `sudo sqlmap –r 文件名`，如*图 7.23*所示：
- en: '![](../Images/B17765_07_23.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_23.png)'
- en: 'Figure 7.23: Running sqlmap with the HTTP POST method'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.23：使用 HTTP POST 方法运行 sqlmap
- en: Similar attacks can be used against the database to extract credit card numbers
    or other confidential information to achieve the objective of the penetration
    testing or red team exercise.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的攻击可以针对数据库进行，用以提取信用卡号或其他机密信息，以实现渗透测试或红队演练的目标。
- en: Attackers can also choose to run command execution using `sqlmap` by using `–os-shell`
    to switch to the `sqlmap` command in the terminal.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者还可以选择通过使用`sqlmap`的`–os-shell`在终端切换到`sqlmap`命令来执行命令。
- en: XML injection
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: XML注入
- en: Nowadays, there are plenty of applications using **Extensible Markup Language**
    (**XML**), which defines a set of rules for encoding documents that can be understood
    by both humans and machines. XML injection is a way to exploit the logic of an
    XML app or service by injecting unexpected messages into the XML structure or
    contents.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，许多应用程序使用**可扩展标记语言**（**XML**），它定义了一组规则，用于编码文档，使得人类和机器都能理解。XML注入是一种通过将意外的消息注入到XML结构或内容中，利用XML应用程序或服务逻辑的攻击方式。
- en: In this section, we will explore how to perform XML injection, and successfully
    gain access to the underlying operating system by exploiting the typical misconfigurations
    that are left by developers.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将探讨如何执行XML注入，并通过利用开发人员留下的典型配置错误成功获得底层操作系统的访问权限。
- en: 'Follow these steps to identify whether an XML injection is possible or not:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤识别是否可以进行XML注入：
- en: Go to `http:/Your IP/mutillidae/index.php?page=xml-validator.php`, as shown
    in *Figure 7.24*:![](../Images/B17765_07_24.png)
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问`http:/Your IP/mutillidae/index.php?page=xml-validator.php`，如*图 7.24*所示：![](../Images/B17765_07_24.png)
- en: 'Figure 7.24: XML validation on Mutillidae'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.24：Mutillidae上的XML验证
- en: 'Check whether we are getting a valid response or not by entering the following
    in the form:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在表单中输入以下内容，检查我们是否得到了有效的响应：
- en: '[PRE6]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The previous code should display `Hello` as a response, as shown in *Figure
    7.25*:'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的代码应显示`Hello`作为响应，如*图 7.25*所示：
- en: '![](../Images/B17765_07_25.png)'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_25.png)'
- en: 'Figure 7.25: Successful response from the server on the XML submitted'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.25：服务器响应XML提交的成功响应
- en: If the server is responding without an error message, it might potentially be
    vulnerable to XML injection.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果服务器在没有错误消息的情况下响应，它可能容易受到XML注入攻击。
- en: 'Now, we can create a payload by adding `SYSTEM` to the variable and calling
    a local file:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以通过将`SYSTEM`添加到变量中并调用本地文件来创建有效负载：
- en: '[PRE7]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If successful, you should be able to see the contents of the file that was
    called, as follows:'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果成功，你应该能够看到被调用文件的内容，如下所示：
- en: '![](../Images/B17765_07_26.png)'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_26.png)'
- en: 'Figure 7.26: XML injection successfully displaying the win.ini file contents
    in the server response'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.26：XML注入成功显示服务器响应中的win.ini文件内容
- en: Attackers can potentially run a PowerShell exploit by gaining direct access
    to the entire system and laterally moving within the target network.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可能通过直接访问整个系统并在目标网络内横向移动，运行PowerShell漏洞。
- en: Bit-flipping attack
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比特翻转攻击
- en: The majority of attackers do not focus much on crypto-type attacks as it is
    time consuming and requires significant computing power to crack the cipher text
    to extract meaningful information. But in some cases, the logic of the cryptography
    implemented can be understood easily.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数攻击者并不太关注加密类型的攻击，因为这既费时又需要大量计算能力来破解密文以提取有意义的信息。但在某些情况下，实施的加密逻辑可以很容易理解。
- en: In this section, we will explore bit-flipping attacks, which use **Cipher Block
    Chaining** (**CBC**) to encrypt the given plaintext.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将探索比特翻转攻击，这种攻击使用**密码块链**（**CBC**）来加密给定的明文。
- en: 'In CBC, before you encrypt a block, the plaintext will be XOR’ed with the encrypted
    output of the previous block by creating a logical chain of blocks, as shown in
    *Figure 7.27*:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在CBC中，在加密一个块之前，明文会与前一个块的加密输出进行XOR操作，通过创建一个逻辑链的块，如*图 7.27*所示：
- en: '![](../Images/B17765_07_27.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_27.png)'
- en: 'Figure 7.27: Initialization vector encryption using CBC'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.27：使用CBC进行初始化向量加密
- en: In a nutshell, XOR compares two values and returns `true` if they are different.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，XOR比较两个值，如果它们不同则返回`true`。
- en: 'What is the potential attack scenario here? If anyone can XOR the plaintext
    block with the encrypted message from the previous block, what would be the XOR
    input for the first block? All you need is an initialization vector. Access Mutillidae
    by navigating to **OWASP 2017** > **A1 - Injection (Other)** > **CBC bit flipping**:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的潜在攻击场景是什么？如果任何人都可以将明文块与前一个块的加密消息进行XOR操作，第一块的XOR输入会是什么？你所需要的只是一个初始化向量。通过导航至**OWASP
    2017** > **A1 - 注入（其他）** > **CBC比特翻转**来访问Mutillidae：
- en: '[PRE8]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Testers should be able to land on the following page, as seen in *Figure 7.28*:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 测试人员应能够访问以下页面，如*图 7.28*所示：
- en: '![](../Images/B17765_07_28.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_28.png)'
- en: 'Figure 7.28: Default value accessing the CBC bit-flipping page'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.28：默认值访问 CBC 位翻转页面
- en: As we can see, the current app user is running with User ID `100` and Group
    ID `100`. You need to be user `000` in group `000` to become the highly privileged
    root user.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，当前的应用用户正在使用用户 ID `100` 和组 ID `100` 运行。要成为具有高级权限的 root 用户，你需要是组 ID 和用户
    ID 都为 `000` 的用户。
- en: 'The only thing we need to manipulate is the IV value, `6bc24fc1ab650b25b4114e93a98f1eba`.
    As it is hexadecimal and 32 characters long, the length is 128 bits. We start
    assessing the initialization vector by splitting the value into two characters
    as a block and change the value in the URL by accessing them one by one:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要操作的唯一内容是 IV 值 `6bc24fc1ab650b25b4114e93a98f1eba`。由于它是十六进制且长度为 32 个字符，因此长度为
    128 位。我们开始评估初始化向量，将值分割成两个字符作为一个块，并通过逐一访问它们来更改 URL 中的值：
- en: '`http://yourIP/mutillidae/index.php?page=view-user-privilege-level.php&iv=``00``c24fc1ab650b25b4114e93a98f1eba`:
    No change to the User or Group ID'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://yourIP/mutillidae/index.php?page=view-user-privilege-level.php&iv=``00``c24fc1ab650b25b4114e93a98f1eba`：用户或组
    ID 无变化'
- en: '`http://YourIP/mutillidae/index.php?page=view-user-privilege-level.php&iv=6b``00``4fc1ab650b25b4114e93a98f1eba`:
    No change to the User or Group ID'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://YourIP/mutillidae/index.php?page=view-user-privilege-level.php&iv=6b``00``4fc1ab650b25b4114e93a98f1eba`：用户或组
    ID 无变化'
- en: 'When we get to the fifth block, `6bc24fc100650b25b4114e93a98f1eba`, we see
    a change in the User ID, as shown in *Figure 7.29*:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们到达第五块 `6bc24fc100650b25b4114e93a98f1eba` 时，我们会看到用户 ID 发生变化，如*图7.29*所示：
- en: '![](../Images/B17765_07_29.png)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_29.png)'
- en: 'Figure 7.29: Manipulation of the encrypted data and a change to the user ID'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.29：加密数据的操作及用户 ID 的变化
- en: 'Testers can utilize Python 2 (since the hex is not available in Python 3) to
    generate the hex value for us, as shown here. Type `python` in the Kali terminal,
    which should bring us to the Python shell 2.7.18 as default. We will XOR the value
    to give us the result, `000`:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 测试人员可以使用 Python 2（因为 Python 3 中没有十六进制支持）为我们生成十六进制值，如此处所示。在 Kali 终端中输入 `python`，应该会进入
    Python shell 2.7.18 默认版本。我们将对该值进行异或操作，得到结果 `000`：
- en: '[PRE9]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To become a root user, both the Group ID and User ID need to be `000`, so we
    repeat the same on all the blocks until the value changes. Finally, we get the
    eighth block, `6bc24fc1ab650b``14``b4114e93a98f1eba`, which changed the Group
    ID; now, we do the same as we did for the User ID:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 要成为 root 用户，组 ID 和用户 ID 都需要为 `000`，因此我们会在所有块上重复此操作，直到值发生变化。最终，我们得到第八块 `6bc24fc1ab650b``14``b4114e93a98f1eba`，它改变了组
    ID；现在，我们将对其执行与用户 ID 相同的操作：
- en: '[PRE10]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This gives us the following key: `6bc24fc1``aa``650b``24``b4114e93a98f1eba`.
    When you pass the IV with the new value, you should now gain access to the application
    with enhanced privileges, as shown in *Figure 7.30*:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们提供了以下密钥：`6bc24fc1``aa``650b``24``b4114e93a98f1eba`。当你传递具有新值的IV时，你现在应该能够以增强权限访问应用程序，如*图7.30*所示：
- en: '![](../Images/B17765_07_30.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_30.png)'
- en: 'Figure 7.30: Bypass of user privilege by shifting the right value of the encryption'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.30：通过改变加密右侧值绕过用户权限
- en: Even if the encryption is enabled at the highest level, such as TLS1.3, if the
    application accepts or performs authentication through an HTTP `GET` method, attackers
    could potentially exploit network devices such as routers and still be able to
    capture all the URL parameters.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 即使加密处于最高级别（如 TLS1.3），如果应用程序通过 HTTP `GET` 方法接受或执行身份验证，攻击者仍然有可能利用路由器等网络设备，并捕获所有
    URL 参数。
- en: Maintaining access with web shells
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过 Web Shell 维持访问
- en: Once a web server and its services have been compromised, it is important to
    ensure that secure access can be maintained. This is usually accomplished with
    the aid of a web shell, a small program that provides stealth backdoor access
    and allows the use of system commands to facilitate post-exploitation activities.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Web 服务器及其服务被攻破，确保能够维持安全访问非常重要。通常这可以通过 Web Shell 实现，它是一个小程序，提供隐秘的后门访问，并允许使用系统命令来促进后期的攻击活动。
- en: Kali comes with several web shells; here, we will use a popular PHP web shell
    called **Weevely**. For other technologies, attackers can leverage all the pre-collected
    web shells in Kali Linux that are stored in the `/usr/share/webshells` folder.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: Kali 附带了多个 Web Shell；在这里，我们将使用一个流行的 PHP Web Shell，称为 **Weevely**。对于其他技术，攻击者可以利用
    Kali Linux 中所有预先收集的 Web Shell，这些 Shell 存储在 `/usr/share/webshells` 文件夹中。
- en: 'Weevely simulates a Telnet session and allows the tester or attacker to take
    advantage of more than 30 modules for post-exploitation tasks, including the following:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: Weevely 模拟一个 Telnet 会话，允许测试者或攻击者利用 30 多个模块来执行后渗透任务，包括以下内容：
- en: Browsing the target filesystem
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览目标文件系统
- en: File transfer to and from the compromised system
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从被攻陷的系统传输文件
- en: Performing audits for common server misconfigurations
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行常见服务器配置错误的审计
- en: Brute-forcing SQL accounts through the target system
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过目标系统进行 SQL 账户的暴力破解
- en: Spawning reverse TCP shells
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动反向 TCP Shell
- en: Executing commands on remote systems that have been compromised, even if PHP
    security restrictions have been applied
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在已被攻陷的远程系统上执行命令，即使已经应用了 PHP 安全限制
- en: 'Finally, Weevely endeavors to hide communications in HTTP cookies to avoid
    detection. To create Weevely, issue the following command from the command prompt:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Weevely 试图将通信隐藏在 HTTP Cookies 中以避免被检测。要创建 Weevely，可以在命令提示符下输入以下命令：
- en: '[PRE11]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This will create the `404.php` file in the `/home/kali` directory of the path
    that you enter. Attackers can choose their own name during the penetration testing
    activity, however, filenames such as `404`, `403`, and `302` typically indicate
    a page that is served based on the client request, which will look less suspicious
    to the security monitoring blue teams. *Figure 7.31* provides instructions on
    how to run `weevely`:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为 `404.php` 的文件，存储在你输入的路径的 `/home/kali` 目录中。攻击者可以在渗透测试活动中自行选择文件名，不过，像
    `404`、`403` 和 `302` 这样的文件名通常表示基于客户端请求返回的页面，这样会让安全监控的蓝队感觉不那么可疑。*图 7.31*提供了如何运行
    `weevely` 的说明：
- en: '![](../Images/B17765_07_31.png)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_31.png)'
- en: 'Figure 7.31: Creating a PHP backdoor file with a password using Weevely'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.31：使用 Weevely 创建带有密码的 PHP 后门文件
- en: 'Navigate to **OWASP 2017** > **A6 -security misconfiguration** > **unrestricted
    file upload**. We will be exploiting the file upload vulnerability on Mutillidae.
    Upload `404.php`, which we created using `weevely`, to the website, as shown in
    *Figure 7.32*:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到 **OWASP 2017** > **A6 - 安全配置错误** > **无限制文件上传**。我们将利用 Mutillidae 上的文件上传漏洞。上传我们使用
    `weevely` 创建的 `404.php` 文件到网站，如*图 7.32*所示：
- en: '![](../Images/B17765_07_32.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_32.png)'
- en: 'Figure 7.32: Uploading the backdoor PHP file to our target application'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.32：将后门 PHP 文件上传到我们的目标应用程序
- en: 'To communicate with the web shell, issue the following command from the Command
    Prompt, ensuring that the target IP `address`, `directory`, and `password` variables
    are changed to reflect those of the compromised system:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 要与 Web Shell 进行通信，可以在命令提示符下输入以下命令，确保目标 IP `地址`、`目录` 和 `密码` 变量更改为被攻陷系统的相应值：
- en: '[PRE12]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the example shown in *Figure 7.33*, we have verified that we are connected
    to the web shell using the `whoami` command (which identifies the current system):'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图 7.33*所示的示例中，我们已经验证了使用 `whoami` 命令（用于识别当前系统）连接到 Web Shell：
- en: '![](../Images/B17765_07_33.png)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_33.png)'
- en: 'Figure 7.33: Successfully running the commands on the target as a high-privilege
    user through the backdoor'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.33：通过后门成功以高权限用户身份在目标上运行命令
- en: The web shell can also be used to establish a reverse shell connection back
    to the tester, using either `netcat` or the Metasploit framework as the local
    listener. This can be utilized to attack further inside the network by escalating
    privileges horizontally and vertically.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: Web Shell 还可以用来建立一个反向 Shell 连接回测试者，使用 `netcat` 或 Metasploit 框架作为本地监听器。这可以用于通过水平和垂直提权进一步攻击网络内部。
- en: 'Unfortunately, the Weevely backdoors will work only in PHP versions lower than
    7.2.x. If the target website is running 7.3 to 8.x, attackers can leverage the
    readily available backdoor that can be downloaded from [https://github.com/PacktPublishing/Mastering-Kali-Linux-for-Advanced-Penetration-Testing-4E/tree/main/Chapter%2007/backdoor.php](https://github.com/PacktPublishing/Mastering-Kali-Linux-for-Advanced-Penetration-Testing-4E/tree/main/Chapter%2007/backdoor.php)
    and upload the file to the same location as we did in *Figure 7.32*. We should
    now be able to see the backdoor working, as shown in *Figure 7.34*:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，Weevely 后门只能在 PHP 版本低于 7.2.x 的环境中工作。如果目标网站运行的是 7.3 到 8.x 版本，攻击者可以利用可以从[https://github.com/PacktPublishing/Mastering-Kali-Linux-for-Advanced-Penetration-Testing-4E/tree/main/Chapter%2007/backdoor.php](https://github.com/PacktPublishing/Mastering-Kali-Linux-for-Advanced-Penetration-Testing-4E/tree/main/Chapter%2007/backdoor.php)下载的现成后门，并将文件上传到与我们在*图
    7.32*中所做相同的位置。现在我们应该能够看到后门正常工作，如*图 7.34*所示：
- en: '![](../Images/B17765_07_34.png)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_34.png)'
- en: 'Figure 7.34: Running a backdoor on the latest versions of PHP'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.34：在最新版本的 PHP 上运行后门
- en: The Browser Exploitation Framework (BeEF)
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览器利用框架（BeEF）
- en: BeEF is an exploitation tool that focuses on a specific client-side application
    and the web browser. BeEF allows an attacker to inject JavaScript code into vulnerable
    HTML code using an attack such as XSS or SQL injection. This exploit code is known
    as a **hook**. A compromise is achieved when the hook is executed by the browser.
    The browser (**zombie**) connects back to the BeEF application, which serves JavaScript
    commands or modules to the browser.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: BeEF 是一个专注于特定客户端应用程序和网页浏览器的利用工具。BeEF 允许攻击者通过 XSS 或 SQL 注入等攻击将 JavaScript 代码注入到易受攻击的
    HTML 代码中。这段利用代码被称为**hook**。当浏览器执行这个 hook 时，攻击得以实现。浏览器（**僵尸**）会回连到 BeEF 应用程序，BeEF
    向浏览器提供 JavaScript 命令或模块。
- en: 'BeEF’s modules perform tasks such as the following:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: BeEF 的模块执行以下任务：
- en: Fingerprinting and the reconnaissance of compromised browsers. It can also be
    used as a platform to assess the presence of exploits and their behavior under
    different browsers.
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指纹识别和受损浏览器的侦察。它也可以作为一个平台，用于评估漏洞的存在以及它们在不同浏览器下的行为。
- en: Note that BeEF allows us to hook multiple browsers on the same client, as well
    as multiple clients across a domain, and then manage them during the exploitation
    and post-exploitation phases.
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，BeEF 允许我们在同一客户端上挂钩多个浏览器，并跨域管理多个客户端，然后在利用和后期利用阶段进行管理。
- en: Fingerprinting the target host, including the presence of virtual machines.
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对目标主机进行指纹识别，包括虚拟机的存在。
- en: Detecting software on the client (Internet Explorer only) and obtaining a list
    of the directories in the `Program Files` and `Program Files (x86)` directories.
    This may identify other applications that can be exploited to consolidate our
    hold on the client.
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测客户端上的软件（仅限 Internet Explorer）并获取 `Program Files` 和 `Program Files (x86)` 目录中的目录列表。这可能会识别出其他可以被利用的应用程序，从而巩固我们对客户端的控制。
- en: Taking photos using the compromised system’s webcam; these photos have a significant
    impact on reports.
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用受损系统的摄像头拍照；这些照片对报告有重大影响。
- en: Conducting searches of the victim’s data files and stealing data that may contain
    authentication credentials (clipboard content and browser cookies) or other useful
    information.
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对受害者的数据文件进行搜索，窃取可能包含身份验证凭证（剪贴板内容和浏览器 cookies）或其他有用信息的数据。
- en: Implementing browser keystroke logging.
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现浏览器按键记录。
- en: Conducting network reconnaissance using ping sweeps and fingerprint network
    appliances and scanning for open ports.
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 ping 扫描和指纹识别网络设备，进行网络侦察，并扫描开放端口。
- en: Launching attacks from the Metasploit framework.
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Metasploit 框架发起攻击。
- en: Using the tunneling proxy extension to attack the internal network using the
    security authority of the compromised web browser.
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用隧道代理扩展，利用受损网页浏览器的安全权限攻击内部网络。
- en: Because BeEF is written in Ruby, it supports multiple operating systems (Linux,
    Windows, and macOS). More importantly, it is easy to customize new modules in
    BeEF and extend its functionality.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 BeEF 是用 Ruby 编写的，它支持多种操作系统（Linux、Windows 和 macOS）。更重要的是，BeEF 易于自定义新的模块，并扩展其功能。
- en: Installing and configuring BeEF
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和配置 BeEF
- en: 'BeEF is not installed by default in Kali distributions. It can be directly
    downloaded from [https://github.com/beefproject/beef](https://github.com/beefproject/beef).
    This application can be installed in three simple steps:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: BeEF 在 Kali 发行版中并非默认安装。可以直接从 [https://github.com/beefproject/beef](https://github.com/beefproject/beef)
    下载。此应用程序可以通过三个简单的步骤进行安装：
- en: Run `sudo git clone https://github.com/beefproject/beef` in the terminal
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中运行`sudo git clone https://github.com/beefproject/beef`
- en: Change the folder with `cd beef`
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `cd beef` 命令更改文件夹
- en: Install the dependencies and all relevant packages by running `sudo ./install`
    from the terminal
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中运行 `sudo ./install` 安装所有依赖项和相关包。
- en: Finally, run `sudo bundle install` to install the relevant Ruby gems and packages
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，运行 `sudo bundle install` 安装相关的 Ruby gems 和包
- en: 'If testers receive any error messages during the BeEF installation (*step 3*),
    particularly relating to unmet dependencies such as `libgcc-9-dev`, it is recommended
    that they add the following repositories to the /`etc/apt/sources.list` file,
    then run `sudo apt update`, and finally, execute `sudo ./install`:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 如果测试人员在安装 BeEF 时收到任何错误信息（*第 3 步*），特别是与未满足的依赖项（如 `libgcc-9-dev`）相关的错误，建议他们将以下仓库添加到
    `/etc/apt/sources.list` 文件中，然后运行 `sudo apt update`，最后执行 `sudo ./install`：
- en: '`deb http://http.kali.org/kali kali-last-snapshot main non-free contrib`'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`deb http://http.kali.org/kali kali-last-snapshot main non-free contrib`'
- en: '`deb http://http.kali.org/kali kali-experimental main non-free contrib`'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`deb http://http.kali.org/kali kali-experimental main non-free contrib`'
- en: '`deb-src http://http.kali.org/kali kali-rolling main non-free contrib`'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`deb-src http://http.kali.org/kali kali-rolling main non-free contrib`'
- en: 'By default, BeEF is not integrated with the Metasploit framework. To integrate
    BeEF, you will need to perform the following steps:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，BeEF 未与 Metasploit 框架集成。要集成 BeEF，你需要执行以下步骤：
- en: Edit the main configuration file located in the same folder where you downloaded/cloned
    BeEF and open `config.yaml` with `sudo` privileges to edit the contents. The BeEF
    application will not launch if the username and password are not changed, so it
    is recommended that testers change the default credentials as the first step,
    as seen in *Figure 7.35*:![](../Images/B17765_07_35.png)
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑位于你下载/克隆 BeEF 的同一文件夹中的主配置文件，使用 `sudo` 权限打开 `config.yaml` 以编辑内容。如果没有更改默认的用户名和密码，BeEF
    应用程序将无法启动，因此建议测试人员将默认凭证作为第一步进行更改，如 *图 7.35* 所示：![](../Images/B17765_07_35.png)
- en: 'Figure 7.35: Changing the default credentials of the BeEF application'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.35：更改 BeEF 应用程序的默认凭证
- en: Edit the file located at /`Beef/extensions/metasploit/config.yml`. By default,
    everything is set to localhost (`127.0.0.1`). In case you’re running the Metasploit
    service over a LAN, you will need to edit the `host`, `callback_host`, and `os
    'custom', path` lines to include your IP address and the location for the Metasploit
    framework. A correctly edited `config.yml` file is shown in *Figure 7.36*:![](../Images/B17765_07_36.png)
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑位于 /`Beef/extensions/metasploit/config.yml` 的文件。默认情况下，所有内容都设置为 localhost（`127.0.0.1`）。如果你在局域网中运行
    Metasploit 服务，则需要编辑 `host`、`callback_host` 和 `os 'custom', path` 行，包含你的 IP 地址和
    Metasploit 框架的位置。正确编辑后的 `config.yml` 文件如 *图 7.36* 所示：![](../Images/B17765_07_36.png)
- en: 'Figure 7.36: Configuring the BeEF extension with the Metasploit framework'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.36：使用 Metasploit 框架配置 BeEF 扩展
- en: Start `msfconsole`, and load the `msgrpc` module, as shown in *Figure 7.37*.
    Make sure that you include the password as well:![](../Images/B17765_07_37.png)
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 `msfconsole`，并加载 `msgrpc` 模块，如 *图 7.37* 所示。确保包括密码：![](../Images/B17765_07_37.png)
- en: 'Figure 7.37: Allowing the MSGRPC service on the network IP with a custom password'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.37：使用自定义密码允许 MSGRPC 服务在网络 IP 上运行
- en: 'Start BeEF by using the following command from the same location where the
    application is downloaded:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在应用程序下载的相同位置使用以下命令启动 BeEF：
- en: '[PRE13]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Confirm startup by reviewing the messages generated during program launch. They
    should indicate that a successful connection with Metasploit occurred, which will
    be accompanied by an indication that Metasploit exploits have been loaded. A successful
    program launch is shown in *Figure 7.38*:![](../Images/B17765_07_38.png)
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过查看程序启动时生成的消息来确认启动。这些消息应表明与 Metasploit 的成功连接，并伴有 Metasploit 漏洞已加载的提示。成功启动的程序如
    *图 7.38* 所示：![](../Images/B17765_07_38.png)
- en: 'Figure 7.38: Successful launch of the BeEF application'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.38：成功启动 BeEF 应用程序
- en: When you restart BeEF, use the `-x` switch to reset the database.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 当你重新启动 BeEF 时，使用 `-x` 参数来重置数据库。
- en: In this example, the BeEF server is running on `10.10.10.12` and the hook URL
    (the one that we want the target to activate) is `10.10.10.12:3000/hook.js`.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，BeEF 服务器运行在 `10.10.10.12` 上，钩子 URL（我们希望目标激活的 URL）是 `10.10.10.12:3000/hook.js`。
- en: Most of the administration and management of BeEF is done via the web interface.
    To access the control panel, go to `http://<IP Address>:3000/ui/panel`.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: BeEF 大部分的管理和操作都是通过 Web 界面进行的。要访问控制面板，请前往 `http://<IP 地址>:3000/ui/panel`。
- en: 'Attackers should be taken to the following screenshot; the login credentials
    will be as entered in `config.yaml`:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者应该看到以下截图；登录凭证将按 `config.yaml` 中的设置输入：
- en: '![](../Images/B17765_07_39.png)'
  id: totrans-338
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_39.png)'
- en: 'Figure 7.39: Authenticating to the BeEF application'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.39：登录 BeEF 应用程序
- en: Understanding the BeEF browser
  id: totrans-340
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 BeEF 浏览器
- en: 'When the BeEF control panel is launched, it will present the **Getting Started**
    screen, featuring links to the online site as well as the demonstration pages
    that can be used to validate the various attacks. The BeEF control panel is shown
    in *Figure 7.40*:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 BeEF 控制面板时，它会展示 **入门指南** 页面，页面上有指向在线站点的链接，以及可以用于验证各种攻击的演示页面。BeEF 控制面板如 *图
    7.40* 所示：
- en: '![](../Images/B17765_07_40.png)'
  id: totrans-342
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_40.png)'
- en: 'Figure 7.40: BeEF browser following successful authentication'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.40：BeEF 浏览器在成功认证后跟随
- en: 'If you have hooked a victim, the interface will be divided into two panels:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经钩住了受害者，界面将分为两个面板：
- en: On the left-hand side of the panel, we have **Hooked Browsers**; the tester
    can see every connected browser listed with information about its host operating
    system, browser type, IP address, and installed plugins. Because BeEF sets a cookie
    to identify victims, it can refer to this information and maintain a consistent
    list of victims.
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在面板的左侧，我们有**钩住的浏览器**；测试人员可以看到每个连接的浏览器，并查看其主机操作系统、浏览器类型、IP地址和已安装的插件信息。由于BeEF会设置一个cookie来识别受害者，因此它可以参考这些信息并保持一致的受害者列表。
- en: The right-hand side of the panel is where all of the actions are initiated,
    and the results are obtained. In the **Commands** tab, we see a categorized repository
    of the different attack vectors that can be used against hooked browsers. This
    view will differ based on the type and version of each browser.
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面板的右侧是所有操作的发起地点，并且结果在此处显示。在**命令**选项卡中，我们可以看到针对已钩住浏览器的不同攻击向量的分类存储库。此视图会根据每个浏览器的类型和版本有所不同。
- en: 'BeEF uses a color-coding scheme to characterize the commands on the basis of
    their usability against a particular target. The colors used are as follows:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: BeEF使用一种颜色编码方案来根据命令对特定目标的可用性进行分类。使用的颜色如下：
- en: '**Green**: This indicates that the command module works against the target
    and should be invisible to the victim.'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绿色**：表示命令模块对目标有效，并且应该对受害者不可见。'
- en: '**Orange**: This indicates that the command module works against the target,
    but it may be detected by the victim.'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**橙色**：表示命令模块对目标有效，但可能会被受害者检测到。'
- en: '**Gray**: This indicates that the command module is not yet verified against
    the target.'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灰色**：表示命令模块尚未经过验证，无法针对目标使用。'
- en: '**Red**: This indicates that the command module does not work against the target.
    It can be used, but its success is not guaranteed, and its use may be detected
    by the target.'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**红色**：表示命令模块对目标无效。可以使用，但不保证成功，且可能会被目标检测到。'
- en: Take these indicators with a grain of salt, since variations in the client environment
    can make some commands ineffective or may cause other unintended results.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 请对这些指示保持谨慎态度，因为客户端环境的差异可能使某些命令无效，或导致其他意外结果。
- en: 'To start an attack or hook a victim, we need to get the user to click on the
    hook URL, which takes the form of `<IP ADDRESS>:<PORT>/hook.js`. This can be achieved
    using a variety of means, including:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始攻击或钩住受害者，我们需要让用户点击钩子URL，格式为`<IP 地址>:<端口>/hook.js`。这可以通过多种方式实现，包括：
- en: The original XSS vulnerabilities
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原始XSS漏洞
- en: Man-in-the-middle attacks (especially the ones using BeEF Shank, an ARP spoofing
    tool that specifically targets intranet sites on internal networks)
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中间人攻击（特别是使用BeEF Shank的攻击，这是一种ARP欺骗工具，专门针对内部网络中的内网网站）
- en: Social engineering attacks, including the BeEF web cloner and mass emailer,
    a custom hook point with iFrame impersonation, or the QR code generator
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社会工程学攻击，包括BeEF网页克隆器和群发邮件工具、自定义钩子点与iFrame伪装，或二维码生成器
- en: Once the browser has been hooked, it is referred to as a zombie. Select the
    IP address of the zombie from the **Hooked Browsers** panel on the left-hand side
    of the command interface and then refer to the available commands.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦浏览器被钩住，它就被称为僵尸。请选择命令界面左侧**钩住的浏览器**面板中的僵尸IP地址，然后查看可用的命令。
- en: In the example shown in the following screenshot, there are several different
    attacks and management options available for the hooked browser. One of the easiest
    attack options to use is the social engineering Clippy attack.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面截图所示的示例中，钩住的浏览器提供了几种不同的攻击和管理选项。最简单的攻击选项之一是社会工程学**Clippy**攻击。
- en: When **Clippy** is selected from **Module Tree** under **Commands**, a specific
    **Clippy** panel is launched on the far right, as shown in the following screenshot.
    It allows you to adjust the image, the text delivered, and the executable that
    will be launched locally if the victim clicks on the supplied link.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 当在**命令**下的**模块树**中选择**Clippy**时，将在最右侧启动一个特定的**Clippy**面板，如下图所示。它允许你调整图像、所传递的文本，以及如果受害者点击提供的链接时将在本地启动的可执行文件。
- en: 'By default, the custom text informs the victim that their browser is out of
    date, offers to update it for them, downloads an executable (non-malicious), and
    then thanks the user for performing the upgrade. All of these options can be changed
    by the tester:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，自定义文本会通知受害者他们的浏览器已过时，并提供为他们更新浏览器的选项，下载一个可执行文件（无害），然后感谢用户执行更新。所有这些选项都可以由测试者修改：
- en: '![](../Images/B17765_07_41.png)'
  id: totrans-361
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_41.png)'
- en: 'Figure 7.41: BeEF Clippy module'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.41：BeEF Clippy 模块
- en: 'When Clippy is executed, the victim will see a message, as shown in *Figure
    7.42*, on their browser:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Clippy 执行时，受害者会在他们的浏览器上看到一条消息，如*图 7.42*所示：
- en: '![](../Images/B17765_07_42.png)'
  id: totrans-364
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_42.png)'
- en: 'Figure 7.42: Victim browser with the BeEF module Clippy message'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.42：受害者浏览器显示 BeEF 模块 Clippy 消息
- en: This can be a very effective social engineering attack. When testing with clients,
    we have had success rates (the client downloaded a non-malicious indicator file)
    of approximately 70 percent.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以是一个非常有效的社会工程攻击。在与客户测试时，我们的成功率（客户下载了一个无害的指示文件）大约为 70%。
- en: 'One of the more interesting attacks is pretty theft, which asks users for their
    username and password for popular sites. For example, the pretty theft option
    for Facebook can be configured by the tester, as shown in *Figure 7.43*:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更有趣的攻击是 "pretty theft"，它要求用户提供他们在热门网站上的用户名和密码。例如，Facebook 的 "pretty theft"
    选项可以由测试者配置，如*图 7.43*所示：
- en: '![](../Images/B17765_07_43.png)'
  id: totrans-368
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_43.png)'
- en: 'Figure 7.43: Pretty theft module for fake Facebook popup'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.43：假 Facebook 弹窗的 Pretty theft 模块
- en: 'When the attack is executed, the victim is presented with a popup that appears
    to be legitimate, as shown in *Figure 7.44*:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 当攻击执行时，受害者会看到一个看似合法的弹出窗口，如*图 7.44*所示：
- en: '![](../Images/B17765_07_44.png)'
  id: totrans-371
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_44.png)'
- en: 'Figure 7.44: Victim’s browser with a fake Facebook session timeout'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.44：受害者浏览器显示假 Facebook 会话超时
- en: 'In BeEF, the tester reviews the history log for the attack and can derive the
    username and password from the data field in the **Command results** column, as
    shown in *Figure 7.45*:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 在 BeEF 中，测试者查看攻击历史日志，并可以从**命令结果**栏的数据字段中推导出用户名和密码，如*图 7.45*所示：
- en: '![](../Images/B17765_07_45.png)'
  id: totrans-374
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_45.png)'
- en: 'Figure 7.45: BeEF module pretty theft capturing the data entered by the victim'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.45：BeEF 模块 "pretty theft" 捕获受害者输入的数据
- en: Another attack that can be quickly launched is old-fashioned phishing; once
    the browser is hooked to BeEF, it’s fairly simple to redirect the users to an
    attacker-controlled website.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可以快速发起的攻击是老式的钓鱼攻击；一旦浏览器被 BeEF 控制，重定向用户到攻击者控制的网站就相当简单。
- en: Using BeEF as a tunneling proxy
  id: totrans-377
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 BeEF 作为隧道代理
- en: 'Tunneling is the process of encapsulating a payload protocol inside a delivery
    protocol, such as IP. Using tunneling, you can transmit incompatible protocols
    across a network, or you can bypass firewalls that are configured to block a particular
    protocol. BeEF can be configured to act as a tunneling proxy that mimics a reverse
    HTTP proxy—the browser session becomes the tunnel, and the hooked browser is the
    exit point. This configuration is extremely useful when an internal network has
    been compromised because the tunneling proxy can be used to do the following:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 隧道技术是将有效负载协议封装在传输协议中（如 IP）的过程。通过隧道技术，您可以跨网络传输不兼容的协议，或者绕过配置为阻止特定协议的防火墙。BeEF 可以配置为充当隧道代理，模拟反向
    HTTP 代理——浏览器会话成为隧道，被钩住的浏览器则是出口点。当内部网络被攻破时，这种配置非常有用，因为隧道代理可以用于以下操作：
- en: Browse authenticated sites in the security context (client-side SSL certificates,
    authentication cookies, NTLM hashes, and so on) of the victim’s browser
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在受害者浏览器的安全上下文中浏览已认证站点（客户端 SSL 证书、认证 cookie、NTLM 哈希等）
- en: Spider the hooked domain using the security context of the victim’s browser
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用受害者浏览器的安全上下文爬取被钩住的域
- en: Facilitate the use of tools such as SQL injection
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 便于使用诸如 SQL 注入等工具
- en: 'To use the tunneling proxy, select the hooked browser that you wish to target
    and right-click on its IP address. In the pop-up box, as shown in *Figure 7.46*,
    select the **Use as Proxy** option:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用隧道代理，选择您希望攻击的被钩住的浏览器，并右键单击其 IP 地址。在弹出框中，如*图 7.46*所示，选择**用作代理**选项：
- en: '![](../Images/B17765_07_46.png)'
  id: totrans-383
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_46.png)'
- en: 'Figure 7.46: Activating a man-in-the-browser attack through proxy'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.46：通过代理激活浏览器中的中间人攻击
- en: 'Configure a browser to use the BeEF tunneling proxy as an HTTP proxy. By default,
    the address of the proxy is `127.0.0.1`, and the port is `6789`. Attackers can
    utilize the **Forge Request** and force the user to download payloads or ransomware
    from the attacker-controlled websites, as shown in *Figure 7.47*:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 配置浏览器使用 BeEF 隧道代理作为 HTTP 代理。默认情况下，代理地址为 `127.0.0.1`，端口为 `6789`。攻击者可以利用 **Forge
    Request** 强迫用户从攻击者控制的网站下载有效载荷或勒索软件，如 *图 7.47* 所示：
- en: '![](../Images/B17765_07_47.png)'
  id: totrans-386
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_47.png)'
- en: 'Figure 7.47: Forcing the victim to download content from remote sites'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.47：强制受害者从远程站点下载内容
- en: 'If you visit a targeted website using the browser configured as the HTTP proxy,
    all raw request/response pairs will be stored in the BeEF database, which can
    be analyzed by navigating to **Rider** | **History**. An excerpt of the log is
    shown in *Figure 7.48*:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用配置为 HTTP 代理的浏览器访问目标网站，所有原始的请求/响应对将存储在 BeEF 数据库中，可以通过导航到 **Rider** | **History**
    来分析。日志的摘录如下所示，如 *图 7.48*：
- en: '![](../Images/B17765_07_48.png)'
  id: totrans-389
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_07_48.png)'
- en: 'Figure 7.48: Logs of the forge HTTP request submitted on behalf of the victim'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.48：代表受害者提交的 forge HTTP 请求日志
- en: 'Once an attack has been completed, there are some mechanisms to ensure that
    a persistent connection is retained, including the following:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦攻击完成，有一些机制可以确保保持持久连接，包括以下内容：
- en: '**Confirm close**: This is a module that presents the victim with a **Confirm
    Navigation - are you sure you want to leave this page?** popup when they try to
    close a tab. If the user elects to leave this page, it will not be effective,
    and the **Confirm Navigation** popup will continue to present itself.'
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确认关闭**：这是一个模块，当受害者尝试关闭标签页时，会弹出 **确认导航 - 您确定要离开此页面吗？** 的提示框。如果用户选择离开此页面，则此操作不会生效，**确认导航**
    提示框将继续显示。'
- en: '**Pop-under module**: This is configured to autorun in `config.yaml`. This
    module attempts to open a small pop-under window to keep the browser hooked if
    the victim closes the main browser tab. This may be blocked by pop-up blockers.'
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹出窗口下拉模块**：该模块配置为在 `config.yaml` 中自动运行。此模块尝试打开一个小的弹出下拉窗口，以便在受害者关闭主要浏览器标签页时，保持浏览器处于活跃状态。该行为可能会被弹窗拦截器阻止。'
- en: '**iFrame keylogger**: This facilitates rewrites of all of the links on a web
    page to an iFrame overlay that is 100 percent of the height and width of the original.
    For maximum effectiveness, it should be attached to a JavaScript keylogger. Ideally,
    you would load the login page of the hooked domain.'
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**iFrame 键盘记录器**：该模块将网页上的所有链接重写为一个 iFrame 覆盖层，覆盖原始页面的 100% 高度和宽度。为了最大效果，应该将其与
    JavaScript 键盘记录器结合使用。理想情况下，您应该加载被劫持域的登录页面。'
- en: '**Man-in-the-browser**: This module ensures that whenever the victim clicks
    on any link, the next page will be hooked as well. The only way to avoid this
    behavior is to type a new address in the address bar.'
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浏览器劫持**：该模块确保每当受害者点击任何链接时，下一页也会被劫持。避免此行为的唯一方法是手动在地址栏输入新地址。'
- en: Finally, although BeEF provides an excellent series of modules to perform the
    reconnaissance, as well as the exploit and post-exploit phases of the kill chain,
    known default activities of BeEF (`/hook.js` and server headers) are being used
    to detect attacks, reducing its effectiveness.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，尽管 BeEF 提供了一系列出色的模块，用于执行侦察以及杀伤链的漏洞利用和后期利用阶段，但 BeEF 的已知默认活动（`/hook.js` 和服务器头）正被用来检测攻击，从而降低了其有效性。
- en: Testers will have to obfuscate their attacks using techniques such as Base64
    encoding, whitespace encoding, randomizing variables, and removing comments to
    ensure full effectiveness in the future.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 测试人员必须使用如 Base64 编码、空白编码、随机化变量、删除注释等技术来混淆攻击，以确保未来的完全有效性。
- en: Summary
  id: totrans-398
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we examined web apps and the user authorization services they
    provide from the perspective of an attacker. We applied the kill chain perspective
    to web applications and their services in order to understand the correct application
    of reconnaissance and vulnerability scanning.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们从攻击者的角度审视了 Web 应用程序及其提供的用户授权服务。我们将杀伤链的视角应用于 Web 应用程序及其服务，以便理解侦察和漏洞扫描的正确应用。
- en: Several different techniques were presented; we focused on the hacker’s mindset
    while attacking a web application and looked at the methodology used when penetration
    testing a web application. We learned how client-side proxies can be used to perform
    various attacks, looked at tools to perform brute-forcing on websites, and covered
    OS-level commands through web applications. We completed the chapter with an examination
    of a web shell specific to web services.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 提出了几种不同的技术；我们聚焦于黑客心态，探讨了攻击网页应用程序时的思维方式，并了解了进行渗透测试时使用的方法论。我们学习了如何利用客户端代理执行各种攻击，查看了用于对网站进行暴力破解的工具，并通过网页应用程序覆盖了操作系统级命令。我们通过检查特定于网络服务的网页
    shell 完成了本章内容。
- en: In *Chapter 8*, *Cloud Security Exploitation*, we will learn how to identify
    and attack misconfigured cloud services that allow users to access resources,
    and how to escalate privileges to achieve the objective.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第8章*，*云安全漏洞利用*中，我们将学习如何识别和攻击配置错误的云服务，这些服务允许用户访问资源，以及如何提升权限以实现目标。
