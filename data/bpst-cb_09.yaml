- en: Attacking the Client
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 攻击客户端
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下示例：
- en: Testing for Clickjacking
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试点击劫持
- en: Testing for DOM-based cross-site scripting
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试基于DOM的跨站脚本
- en: Testing for JavaScript execution
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试JavaScript执行
- en: Testing for HTML injection
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试HTML注入
- en: Testing for client-side resource manipulation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试客户端资源操纵
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Code available on the client that is executed in the browser requires testing
    to determine any presence of sensitive information or the allowance of user input
    without server-side validation. Learn how to perform these tests using Burp.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中执行的客户端可用代码需要测试以确定是否存在敏感信息或允许用户输入而没有经过服务器端验证。学习如何使用Burp执行这些测试。
- en: Software tool requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件工具要求
- en: 'To complete the recipes in this chapter, you will need the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章的示例，您需要以下内容：
- en: '**OWASP Broken Web Applications** (**VM**)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP破损Web应用（VM）
- en: '**OWASP Mutillidae link**'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP Mutillidae链接
- en: '**Burp Proxy Community** or **Professional** ([https://portswigger.net/burp/](https://portswigger.net/burp/))'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Burp代理社区或专业版（[https://portswigger.net/burp/](https://portswigger.net/burp/)）
- en: Testing for Clickjacking
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试点击劫持
- en: '**Clickjacking** is also known as the **UI redress attack**. This attack is
    a deceptive technique that tricks a user into interacting with a transparent iframe
    and, potentially, send unauthorized commands or sensitive information to an attacker-controlled
    website. Let''s see how to use the Burp Clickbandit to test whether a site is
    vulnerable to Clickjacking.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**点击劫持**也被称为**UI重定向攻击**。这种攻击是一种欺骗性技术，可以诱使用户与透明iframe进行交互，并可能向受攻击者控制的网站发送未经授权的命令或敏感信息。让我们看看如何使用Burp
    Clickbandit来测试网站是否容易受到点击劫持攻击。'
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做好准备
- en: Using the OWASP Mutillidae II application and the Burp Clickbandit, let's determine
    whether the application protects against Clickjacking attacks.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OWASP Mutillidae II应用程序和Burp Clickbandit，让我们确定该应用程序是否能够防御点击劫持攻击。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Navigate to the Home page of the OWASP Mutillidae II.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到OWASP Mutillidae II的主页。
- en: 'Switch to Burp, and from the top-level menu, select Burp Clickbandit:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp，并从顶级菜单中选择Burp Clickbandit：
- en: '![](img/00315.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00315.jpeg)'
- en: 'A pop-up box explains the tool. Click the button entitled Copy Clickbandit
    to clipboard:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个弹出框解释了该工具。单击名为复制Clickbandit到剪贴板的按钮：
- en: '![](img/00316.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00316.jpeg)'
- en: 'Return to the Firefox browser, and press *F12* to bring up the developer tools.
    From the developer tools menu, select Console, and look for the prompt at the
    bottom:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到Firefox浏览器，按下*F12*以打开开发者工具。从开发者工具菜单中，选择控制台，并查找底部的提示：
- en: '![](img/00317.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00317.jpeg)'
- en: 'At the Console prompt (for example, `>>`), paste into the prompt the Clickbandit
    script you copied to your clipboard:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台提示（例如，`>>`），粘贴到提示中您复制到剪贴板的Clickbandit脚本：
- en: '![](img/00318.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00318.jpeg)'
- en: 'After pasting in the script into the prompt, press the *Enter* key. You should
    see the Burp Clickbandit Record mode. Click the Start button to begin:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示中粘贴脚本后，按*Enter*键。您应该看到Burp Clickbandit记录模式。单击开始按钮开始：
- en: '![](img/00319.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00319.jpeg)'
- en: Start clicking around on the application after it appears. Click available links
    at the top Mutillidae menu, click available links on the side menu, or browse
    to pages within Mutillidae. Once you've clicked around, press the Finish button
    on the Burp Clickbandit menu.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 出现后，开始在应用程序上四处点击。单击Mutillidae菜单顶部的可用链接，单击侧边菜单上的可用链接，或浏览Mutillidae内的页面。点击了一圈后，在Burp
    Clickbandit菜单上按完成按钮。
- en: 'You should notice big red blocks appear transparently on top of the Mutillidae
    web pages. Each red block indicates a place where a malicious iframe can appear.
    Feel free to click each red block to see the next red block appear, and so on:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该注意到大红色块透明地出现在Mutillidae网页的顶部。每个红色块表示恶意iframe可能出现的位置。随意单击每个红色块，以查看下一个红色块出现，依此类推：
- en: '![](img/00320.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00320.jpeg)'
- en: Once you wish to stop and save your results, click the Save button. This will
    save the Clickjacking PoC in an HTML file for you to place inside your penetration
    test report.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您希望停止并保存您的结果，请单击保存按钮。这将保存Clickjacking PoC在一个HTML文件中，供您放在您的渗透测试报告中。
- en: How it works...
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Since the Mutillidae application does not make use of the X-FRAME-OPTIONS header
    set to `DENY`, it is possible to inject a malicious iframe in to the Mutillidae
    web pages. The Clickbandit increases the level of opaqueness of the iframe for
    visibility and creates a **proof of concept** (**PoC**) to illustrate how the
    vulnerability can be exploited.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Mutillidae应用程序没有使用设置为`DENY`的X-FRAME-OPTIONS标头，因此可以将恶意iframe注入到Mutillidae网页中。Clickbandit增加了iframe的不透明度，以便查看，并创建了一个**概念验证**（**PoC**）来说明漏洞如何被利用。
- en: Testing for DOM-based cross-site scripting
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试基于DOM的跨站脚本
- en: The **Document Object Model** (**DOM**) is a tree-like structural representation
    of all HTML web pages captured in a browser. Developers use the DOM to store information
    inside the browser for convenience. As a web penetration tester, it is important
    to determine the presence of DOM-based **cross-site scripting** (**XSS**) vulnerabilities.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**文档对象模型**（**DOM**）是浏览器中捕获的所有HTML网页的树状结构表示。开发人员使用DOM在浏览器中存储信息以方便使用。作为Web渗透测试人员，确定是否存在基于DOM的**跨站脚本**（**XSS**）漏洞非常重要。'
- en: Getting ready
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做好准备
- en: Using OWASP Mutillidae II HTML5 web storage exercise, let’s determine whether
    the application is susceptible to DOM-based XSS attacks.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OWASP Mutillidae II HTML5 Web存储练习，让我们确定该应用程序是否容易受到基于DOM的XSS攻击。
- en: How to do it...
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Navigate to OWASP 2013 | HTML5 Web Storage | HTML5 Storage:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到OWASP 2013 | HTML5 Web Storage | HTML5 Storage：
- en: '![](img/00321.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00321.jpeg)'
- en: 'Note the name/value pairs stored in the DOM using HTML5 Web Storage locations.
    Web storage includes Session and Local variables. Developers use these storage
    locations to conveniently store information inside a user''s browser:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意使用HTML5 Web存储位置存储的DOM中的名称/值对。Web存储包括会话和本地变量。开发人员使用这些存储位置方便地在用户的浏览器中存储信息：
- en: '![](img/00322.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00322.jpeg)'
- en: Switch to the Burp Proxy Intercept tab. Turn Interceptor on with the button
    Intercept is on.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp代理拦截选项卡。通过点击拦截器打开按钮来打开拦截器。
- en: Reload the HTML 5 Web Storage page in Firefox browser by pressing *F5* or clicking
    the reload button.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按下*F5*或点击重新加载按钮在Firefox浏览器中重新加载HTML 5 Web存储页面。
- en: 'Switch to the Burp Proxy HTTP history tab. Find the paused request created
    by the reload you just performed. Note that the `User-Agent` string is highlighted,
    as shown in the following screenshot:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp代理HTTP历史选项卡。找到刚刚执行的重新加载创建的暂停请求。注意`User-Agent`字符串被高亮显示，如下截图所示：
- en: '![](img/00323.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00323.jpeg)'
- en: 'Replace the preceding highlighted `User-Agent` with the following script:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下脚本替换前面高亮显示的`User-Agent`：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Click the Forward button. Now, turn Interceptor off by clicking the toggle button
    to Intercept is off.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“Forward”按钮。现在，通过点击拦截器关闭按钮来关闭拦截器。
- en: 'Note the alert popup showing the contents of the DOM storage:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意弹出的警报显示DOM存储的内容：
- en: '![](img/00324.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00324.jpeg)'
- en: How it works...
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The injected script illustrates how the presence of a cross-site scripting vulnerability
    combined with sensitive information stored in the DOM can allow an attacker to
    steal sensitive data.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 注入的脚本说明了跨站脚本漏洞的存在，结合DOM中存储的敏感信息，可以允许攻击者窃取敏感数据。
- en: Testing for JavaScript execution
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试JavaScript执行
- en: JavaScript injection is a subtype of cross-site scripting attacks specific to
    the arbitrary injection of JavaScript. Vulnerabilities in this area can affect
    sensitive information held in the browser, such as user session cookies, or it
    can lead to the modification of page content, allowing script execution from attacker-controlled
    sites.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript注入是跨站脚本攻击的一个子类型，特指对JavaScript的任意注入。该领域的漏洞可能影响浏览器中保存的敏感信息，如用户会话cookie，或者可能导致页面内容的修改，允许来自攻击者控制站点的脚本执行。
- en: Getting ready
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using the OWASP Mutillidae II Password Generator exercise, let’s determine whether
    the application is susceptible to JavaScript XSS attacks.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OWASP Mutillidae II密码生成器练习，让我们确定应用程序是否容易受到JavaScript XSS攻击。
- en: How to do it...
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Navigate to OWASP 2013 | A1 – Injection (Other) | JavaScript Injection | Password
    Generator:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到OWASP 2013 | A1 – 注入（其他）| JavaScript注入 | 密码生成器：
- en: '![](img/00325.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00325.jpeg)'
- en: 'Note after clicking the Generate Password button, a password is shown. Also,
    note the username value provided in the URL is reflected back *as is* on the web
    page: `http://192.168.56.101/mutillidae/index.php?page=password-generator.php&username=anonymous`. This
    means a potential XSS vulnerability may exist on the page:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意点击“生成密码”按钮后，会显示一个密码。还要注意URL中提供的用户名值*原样*反映在网页上：`http://192.168.56.101/mutillidae/index.php?page=password-generator.php&username=anonymous`。这意味着页面可能存在潜在的XSS漏洞：
- en: '![](img/00326.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00326.jpeg)'
- en: 'Switch to the Burp Proxy HTTP history tab and find the HTTP message associated
    with the Password Generator page. Flip to the Response tab in the message editor,
    and perform a search on the string `catch`. Note that the JavaScript returned
    has a catch block where error messages display to the user. We will use this position for
    the placement of a carefully crafted JavaScript injection attack:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp代理HTTP历史选项卡，并找到与密码生成器页面相关的HTTP消息。切换到消息编辑器中的响应选项卡，并在字符串`catch`上执行搜索。注意返回的JavaScript具有一个catch块，其中显示给用户的错误消息。我们将使用这个位置来放置一个精心制作的JavaScript注入攻击：
- en: '![](img/00327.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00327.jpeg)'
- en: Switch to the Burp Proxy Intercept tab. Turn Interceptor on with the button
    Intercept is on.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp代理拦截选项卡。通过点击拦截器打开按钮来打开拦截器。
- en: Reload the Password Generator page in Firefox browser by pressing *F5* or clicking
    the reload button.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按下*F5*或点击重新加载按钮在Firefox浏览器中重新加载密码生成器页面。
- en: 'Switch to the Burp Proxy Interceptor tab. While the request is paused, note
    the `username` parameter value highlighted as follows:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp代理拦截器选项卡。在请求暂停时，注意`username`参数值如下所示高亮显示：
- en: '![](img/00328.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00328.jpeg)'
- en: 'Replace the preceding highlighted value of `anonymous` with the following carefully
    crafted JavaScript injection script:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下精心制作的JavaScript注入脚本替换前面高亮显示的`anonymous`值：
- en: '[PRE1]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Click the Forward button. Now, turn Interceptor off by clicking the toggle button
    to Intercept is off.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“Forward”按钮。现在，通过点击拦截器关闭按钮来关闭拦截器。
- en: Note the alert popup. You’ve successfully demonstrated the presence of a JavaScript
    injection XSS vulnerability!
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意弹出的警报。您已成功演示了JavaScript注入XSS漏洞的存在！
- en: '![](img/00329.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00329.jpeg)'
- en: How it works...
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: '[PRE2]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Testing for HTML injection
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试HTML注入
- en: HTML injection is the insertion of arbitrary HTML code into a vulnerable web
    page. Vulnerabilities in this area may lead to the disclosure of sensitive information
    or the modification of page content for the purposes of socially engineering the
    user.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: HTML注入是将任意HTML代码插入易受攻击的网页。该领域的漏洞可能导致敏感信息的泄露，或者出于社会工程目的修改页面内容。
- en: Getting ready
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using the OWASP Mutillidae II Capture Data Page, let's determine whether the
    application is susceptible to HTML injection attacks.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OWASP Mutillidae II捕获数据页面，让我们确定应用程序是否容易受到HTML注入攻击。
- en: How to do it...
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Navigate to OWASP 2013 | A1 – Injection (Other) | HTMLi Via Cookie Injection
    | Capture Data Page:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到OWASP 2013 | A1 – 注入（其他）| 通过Cookie注入的HTMLi | 捕获数据页面：
- en: '![](img/00330.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00330.jpeg)'
- en: 'Note how the page looks before the attack:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意攻击前页面的外观：
- en: '![](img/00331.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00331.jpeg)'
- en: Switch to the Burp Proxy Intercept tab, and turn Interceptor on with the button
    Intercept is on.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp代理拦截选项卡，并通过点击拦截器打开按钮来打开拦截器。
- en: 'While the request is paused, make note of the last cookie, `acgroupswitchpersist=nada`:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在请求暂停时，记下最后一个cookie的值，`acgroupswitchpersist=nada`：
- en: '![](img/00332.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00332.jpeg)'
- en: 'While the request is paused, replace the value of the last cookie, with this
    HTML injection script:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在请求暂停时，用这个HTML注入脚本替换最后一个cookie的值：
- en: '[PRE3]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Click the Forward button. Now turn Interceptor off by clicking the toggle button
    to Intercept is off.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“Forward”按钮。现在通过单击拦截器按钮将拦截器关闭。
- en: Note how the HTML is now included inside the page!
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意HTML现在包含在页面中！
- en: '![](img/00333.jpeg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00333.jpeg)'
- en: How it works...
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Due to the lack of input validation and output encoding, an HTML injection vulnerability
    can exist. The result of exploiting this vulnerability is the insertion of arbitrary
    HTML code, which can lead to XSS attacks or social engineering schemes such as
    the one seen in the preceding recipe.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 由于缺乏输入验证和输出编码，可能存在HTML注入漏洞。利用这个漏洞的结果是插入任意HTML代码，这可能导致XSS攻击或社会工程学方案，就像前面的示例中所看到的那样。
- en: Testing for client-side resource manipulation
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试客户端资源操纵
- en: If an application performs actions based on client-side URL information or pathing
    to a resource (that is, AJAX call, external JavaScript, iframe source), the result
    can lead to a client-side resource manipulation vulnerability. This vulnerability
    relates to attacker-controlled URLs in, for example, the JavaScript location attribute,
    the location header found in an HTTP response, or a POST body parameter, which
    controls redirection. The impact of this vulnerability could lead to a cross-site
    scripting attack.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序根据客户端URL信息或资源路径执行操作（即，AJAX调用，外部JavaScript，iframe源），则结果可能导致客户端资源操纵漏洞。这种漏洞涉及攻击者控制的URL，例如JavaScript位置属性中找到的位置标头，或者控制重定向的HTTP响应中找到的位置标头，或者POST主体参数。这种漏洞的影响可能导致跨站脚本攻击。
- en: Getting ready
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using the OWASP Mutillidae II application, determine whether it is possible
    to manipulate any URL parameters that are exposed on the client side and whether
    the manipulation of those values causes the application to behave differently.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OWASP Mutillidae II应用程序，确定是否可能操纵客户端暴露的任何URL参数，以及操纵这些值是否会导致应用程序行为不同。
- en: How to do it...
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Navigate to OWASP 2013 | A10 – Unvalidated Redirects and Forwards | Credits:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到OWASP 2013 | A10 – 未经验证的重定向和转发 | Credits：
- en: '![](img/00334.jpeg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00334.jpeg)'
- en: 'Click the ISSA Kentuckiana link available on the Credits page:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击Credits页面上的ISSA Kentuckiana链接：
- en: '![](img/00335.jpeg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00335.jpeg)'
- en: Switch to the Burp Proxy HTTP history tab, and find your request to the Credits
    page. Note that there are two query string parameters: `page` and `forwardurl`.
    What would happen if we manipulated the URL where the user is sent?
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp代理HTTP历史选项卡，并找到您对Credits页面的请求。注意有两个查询字符串参数：`page`和`forwardurl`。如果我们操纵用户被发送的URL会发生什么？
- en: '![](img/00336.jpeg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00336.jpeg)'
- en: Switch to the Burp Proxy Intercept tab. Turn Interceptor on with the button
    Intercept is on.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp代理拦截选项卡。使用按钮“Intercept is on”打开拦截器。
- en: 'While the request is paused, note the current value of the `fowardurl` parameter:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在请求暂停时，注意`fowardurl`参数的当前值：
- en: '![](img/00337.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00337.jpeg)'
- en: 'Replace the value of the `forwardurl` parameter to be `https://www.owasp.org`
    instead of the original choice of `http://www.issa-kentuckiana.org`:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`forwardurl`参数的值替换为`https://www.owasp.org`，而不是原始选择的`http://www.issa-kentuckiana.org`：
- en: '![](img/00338.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00338.jpeg)'
- en: Click the Forward button. Now turn Interceptor off by clicking the toggle button
    to Intercept is off.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“Forward”按钮。现在通过单击拦截器按钮将拦截器关闭。
- en: Note how we were redirected to a site other than the one originally clicked!
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意我们是如何被重定向到一个原本没有点击的网站！
- en: '![](img/00339.jpeg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00339.jpeg)'
- en: How it works...
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Application code decisions, such as where to redirect a user, should never rely
    on client-side available values. Such values can be tampered with and modified,
    to redirect users to attacker-controlled websites or to execute attacker-controlled
    scripts.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序代码决策，例如将用户重定向到何处，不应依赖于客户端可用的值。这些值可能被篡改和修改，以将用户重定向到攻击者控制的网站或执行攻击者控制的脚本。
