- en: Chapter 2. Network Fundamentals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。网络基础知识
- en: Before it's possible for us to use Nmap as a tool, we first need to understand
    the very basics of how it works. In order to scan networks (including the Internet),
    we must initially understand the concepts on which all networks are built. Although
    this book will not describe in-depth networking concepts—you won't become a *packet
    ninja* by learning to use Nmap—we do need to ensure that we can interpret the
    scan results from standard and advanced Nmap scans. Without the fundamentals of
    networking, we will not be able to scan at all!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够将Nmap作为工具使用之前，我们首先需要了解它的基本工作原理。为了扫描网络（包括互联网），我们必须首先了解构建所有网络的概念。尽管本书不会深入描述网络概念
    - 通过学习使用Nmap，你不会成为*数据包忍者* - 但我们确实需要确保我们能够解释标准和高级Nmap扫描的扫描结果。没有网络基础，我们将无法进行扫描！
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: How networks work
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络如何工作
- en: The difference between TCP and UDP
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TCP和UDP的区别
- en: An introduction to ports
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口简介
- en: How port scanning works
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口扫描的工作原理
- en: How service version detection and banner grabbing work
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务版本检测和横幅抓取的工作原理
- en: The structure of the Internet
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 互联网的结构
- en: Before we go into some of the complexities of networked software, it's important
    to understand how the Internet itself is designed. In many ways, the Internet
    functions the same as a large network that you might have at your home or office—the
    difference, of course, is that instead of workstations, the Internet has Internet-facing
    services. Most homes, for example, have many computers that are on the same **Local
    Area Network** (**LAN**), but only one IP address on the Internet. If someone
    were to scan this network from their Internet-connected device, they would only
    see Internet-facing services—not each family member's individual computer. This
    is important to note because across the Internet, only ports that are forwarded
    to a machine may be accessible on a given IP address. There are some exceptions
    to this rule that we will look at later.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入了解网络软件的一些复杂性之前，了解互联网本身的设计是很重要的。在许多方面，互联网的功能与您家或办公室可能拥有的大型网络相同 - 当然，不同之处在于，互联网具有面向互联网的服务，而不是工作站。例如，大多数家庭在同一个**局域网**（**LAN**）上有许多计算机，但在互联网上只有一个IP地址。如果有人从他们的互联网连接设备扫描这个网络，他们只会看到面向互联网的服务
    - 而不是每个家庭成员的个人计算机。这一点很重要，因为在互联网上，只有转发到某台机器的端口才能在给定的IP地址上访问。我们将在稍后看到一些例外情况。
- en: When scanning a computer on your LAN, however, you will generally be able to
    see all the ports that are open. This is because when packets are traveling on
    a local network, rather than over the Internet, you have direct access to the
    target machine—you don't have to pass through a router or switch that would block
    all of these ports over the Internet. This is why, for example, when hosting a
    server at a LAN party, no one has to forward any ports in a third-party device.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在您的局域网上扫描计算机时，通常可以看到所有打开的端口。这是因为当数据包在本地网络上传输时，而不是通过互联网传输时，您可以直接访问目标机器 - 您不必经过会阻止所有这些端口的路由器或交换机。这就是为什么，例如，在局域网聚会上托管服务器时，没有人需要在第三方设备中转发任何端口。
- en: When conducting scans throughout the rest of this book, please keep in mind
    that there are several different elements that may help or stop the scan from
    detecting every service that is listening. We'll go through some of the pitfalls
    in later chapters, and give useful work-arounds whenever possible.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的其余部分进行扫描时，请记住，有几个不同的因素可能有助于或阻止扫描检测到每个正在监听的服务。我们将在后面的章节中介绍一些问题，并在可能的情况下提供有用的解决方法。
- en: The OSI model
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OSI模型
- en: To understand how packets—which are the bits of information that travel from
    one machine to another—run networks, it's a good idea to have a basic idea of
    the **Open Systems Interconnection** (**OSI**) model. This is a conceptual way
    to think about how networks work on different layers. It's easy to understand
    that physically, networks are just pieces of hardware with electrical signals
    running across them; it's actually much more difficult to conceptualize the logical
    networks that developers and network operations staff (as well as computers) work
    with.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解数据包（即从一台机器传输到另一台机器的信息位）如何运行网络，最好先对**开放系统互连**（**OSI**）模型有一个基本的了解。这是一种概念上的方式，可以理解网络在不同层上的工作方式。从物理上来说，网络只是带有电信号的硬件部件；实际上，理解开发人员和网络运营人员（以及计算机）使用的逻辑网络要困难得多。
- en: The simplest explanation is that different protocols and bits of information
    work on different layers of the model, and work off of each other. The following
    diagram briefly explains which layer performs which role, so that we can understand
    how service banners and ports work later in this chapter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的解释是，不同的协议和信息位在模型的不同层上工作，并相互配合。下图简要解释了每个层次执行哪些角色，以便我们能够理解本章后面将介绍的服务横幅和端口的工作原理。
- en: '![The OSI model](img/4065OS_02_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![OSI模型](img/4065OS_02_01.jpg)'
- en: It isn't necessary to understand all the intricacies of the OSI model or low-level
    networking in order to use Nmap effectively, and to interpret scan results that
    are accurate. It is necessary, however, to realize that not all networking information
    is created equally—some information is readily accessible at certain times, while
    it is more difficult to access certain data at other times. If you're interested
    in learning more about networking from an in-depth perspective, it's worth checking
    out tools such as Wireshark that can capture packets or view them in transit.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要有效地使用Nmap并解释准确的扫描结果，并不需要完全理解OSI模型或低级网络，但需要意识到并非所有的网络信息都是平等的 - 有些信息在某些时候是容易获得的，而在其他时候则更难获得。如果您有兴趣从深入的角度了解更多关于网络的知识，值得查看一些可以捕获数据包或在传输中查看数据包的工具，比如Wireshark。
- en: Port scanning
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 端口扫描
- en: Nmap is a port scanner, but we haven't yet covered what a port actually is.
    As the name somewhat implies, a port is a way to access a networked service on
    a computer. Each computer has 65,535 ports that can be either open, or closed
    at any time. Some services such as HTTP (that serves web pages) or FTP (that allows
    file transfer) have ports that are associated with them by default. HTTP runs
    on port 80, FTP runs on port 21, and so on. There are huge lists of commonly used
    ports that we can reference later—fortunately for us, Nmap has these lists included
    with its distribution package.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap是一个端口扫描器，但我们还没有涵盖端口实际上是什么。顾名思义，端口是访问计算机上的网络服务的一种方式。每台计算机有65535个端口，可以随时打开或关闭。一些服务，如HTTP（用于提供网页）或FTP（允许文件传输），有默认关联的端口。HTTP运行在端口80上，FTP运行在端口21上，依此类推。我们可以稍后参考常用端口的大型列表，幸运的是，Nmap已经将这些列表包含在其分发包中。
- en: One way to conceptualize a port is to think about an apartment building. In
    this analogy, one apartment building would be an IP address—each apartment within
    the building would be a different port. In this case, the building would have
    to have 65,535 apartments—quite a big property!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 概念化端口的一种方式是想象一栋公寓楼。在这个类比中，一栋公寓楼就是一个IP地址，楼内的每个公寓就是一个不同的端口。在这种情况下，这栋楼将有65535个公寓，是一个相当大的物业！
- en: When you visit an IP address, it's just like delivering a pizza to the apartment
    building; you know where it is in the world, but you don't know exactly where
    you need to be. That's where ports come in! A port is analogous to an apartment
    number; using a port number, we will know that we're going to 5505 Internet St,
    Apartment 443, to deliver HTTPS traffic!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当您访问一个IP地址时，就像给公寓楼送披萨一样；您知道它在世界上的位置，但不知道确切的位置。这就是端口的作用！端口类似于公寓号码；使用端口号，我们将知道我们要去5505
    Internet St，公寓443，以传送HTTPS流量！
- en: Ports are commonly identified by putting a colon after an IP address. If you
    see an address that looks something like 127.0.0.1:22, then you can safely assume
    that you are being pointed to the IP address 127.0.0.1 and port 22.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 端口通常通过在IP地址后加冒号来识别。如果您看到类似127.0.0.1:22的地址，那么您可以安全地假设您被指向IP地址127.0.0.1和端口22。
- en: TCP and UDP
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TCP和UDP
- en: 'One area that is important to understand about networking is the two primary
    protocols that networked services can use: TCP and UDP. Services can listen on
    these ports using either of the protocol—and many a times do. TCP (frequently
    shown as TCP/IP) is used for connections that need things to be ordered specifically—for
    example, loading a web page. UDP, however, is a connectionless protocol; being
    connectionless means that UDP connections work like a fire hose of data moving
    from one IP address (the source address) to another (the destination address).
    Because of the way the Internet works, though—it is a large packet-switched network—these
    packets don''t always arrive in order. For something like loading a web page,
    this would be a huge problem. For other uses, however, it makes perfect sense
    to have data arrive in whatever order it received.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 关于网络的一个重要概念是网络服务可以使用的两种主要协议：TCP和UDP。服务可以使用这些端口监听任一协议，而且经常这样做。TCP（经常显示为TCP/IP）用于需要特定顺序的连接，例如加载网页。然而，UDP是一种无连接的协议；无连接意味着UDP连接就像从一个IP地址（源地址）到另一个IP地址（目标地址）的数据高压水枪。由于互联网的工作方式，它是一个大型分组交换网络，这些数据包并不总是按顺序到达。对于像加载网页这样的事情，这将是一个巨大的问题。然而，对于其他用途，让数据以任何顺序到达是完全合理的。
- en: '**Voice over IP** (**VoIP**) calls, for example, usually use the UDP protocol.
    It''s more important for the data to get to its source, even if a packet is missed
    or out of order. This way, while there might be a small audible hiccup in the
    connection, it would not lag while waiting for the data to load. Most of the services
    that we''ll examine in this book are TCP-based, but it''s certainly possible to
    use Nmap to scan UDP services as well (using the `-sU` flag). UDP does not receive
    a reply upon successful transmission of a packet, though; so it can be very time-consuming
    to find out if a service is actually listening on a given UDP port, or simply
    not replying at all.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，**VoIP**（语音IP）通话通常使用UDP协议。对于数据到达其源的重要性更大，即使数据包丢失或顺序错乱。这样，虽然连接可能会出现轻微的听觉中断，但不会因等待数据加载而出现滞后。我们将在本书中研究的大多数服务都是基于TCP的，但是使用Nmap扫描UDP服务也是可能的（使用`-sU`标志）。然而，UDP在成功传输数据包后不会收到回复；因此，要找出服务是否实际上正在监听给定的UDP端口，或者根本没有回复，可能需要花费很长时间。
- en: Service banners
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务横幅
- en: Now that we understand the very basics of how networks, ports, TCP, and UDP
    work, we can start to learn the intricacies of Nmap—a powerful tool that leverages
    various different elements of how computers and networks communicate, to help
    give us useful information about what services various different computers are
    running.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了网络、端口、TCP和UDP的基础知识，我们可以开始学习Nmap的复杂性——这是一个强大的工具，利用计算机和网络通信的各种不同元素，帮助我们获取有关各种不同计算机正在运行的服务的有用信息。
- en: The most common use of Nmap—and its original design—was a simple port scanner.
    A port scanner is simply a piece of software that attempts to connect to each
    specific target port and see if that port is open—determining whether or not a
    TCP three-way handshake can be established.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap最常见的用途，也是它最初的设计，是一个简单的端口扫描器。端口扫描器只是一种尝试连接到每个特定目标端口并查看该端口是否打开的软件，以确定是否可以建立TCP三次握手。
- en: 'A TCP three-way handshake is a simple way to establish a network-based connection
    before applications begin to communicate with one another. The structure is very
    simple—and don''t worry if these flags don''t mean much to you right now. The
    three-way handshake, as you might expect, consists of three steps between two
    speakers (let''s call them Alice and Bob). The handshake works as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: TCP三次握手是在应用程序开始相互通信之前建立网络连接的简单方法。结构非常简单，如果现在这些标志对你来说意义不大也不用担心。正如你所期望的，三次握手是在两个通信方（我们称他们为Alice和Bob）之间进行的三个步骤。握手的过程如下：
- en: Alice is requesting a connection with Bob. Alice sends a **SYN** to Bob at the
    specified port.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Alice正在请求与Bob建立连接。Alice向指定端口发送**SYN**给Bob。
- en: If Bob wants to establish this connection, Bob sends a response to Alice of
    **SYN/ACK**.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果Bob想要建立这个连接，Bob会向Alice发送**SYN/ACK**的响应。
- en: Alice receives the **SYN/ACK**, and verifies that the connection is established
    by sending Bob an **ACK**.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Alice接收到**SYN/ACK**，并通过发送**ACK**给Bob来验证连接是否建立。
- en: 'You can visually understand how this works by referring to the following diagram:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过参考以下图表来直观地理解这是如何工作的：
- en: '![Service banners](img/4065OS_02_02.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![服务横幅](img/4065OS_02_02.jpg)'
- en: Once you understand how a connection on a certain port is established, it is
    relatively easy to understand how the most basic Nmap port scan—a SYN scan—works.
    Nmap sends a **SYN** request to every port in scope (usually either the most common
    1,000 ports, or the full 65,535 ports on a host) and waits for a **SYN/ACK** response.
    If a **SYN/ACK** response is received, then there is a service listening on that
    open port. Congratulations! We've now covered how basic port scans work. There
    are many different types of scans—not just SYN scans—but the basic idea of the
    request/response model should now be fairly clear.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你理解了如何在特定端口上建立连接，就相对容易理解最基本的Nmap端口扫描——即SYN扫描是如何工作的。Nmap向范围内的每个端口（通常是最常见的1000个端口，或者主机上的全部65535个端口）发送一个**SYN**请求，并等待**SYN/ACK**响应。如果收到了**SYN/ACK**响应，那么该开放端口上有一个服务在监听。恭喜！我们现在已经介绍了基本端口扫描的工作原理。不仅仅是SYN扫描，还有许多不同类型的扫描，但请求/响应模型的基本思想现在应该相当清晰了。
- en: When we're scanning ports, though, we're usually interested in more than just
    whether or not a port is online. Although most web servers listen on port 80 (which
    is the HTTP assigned port), someone could just as easily put a web server on port
    12345 or 1337\. More than just understanding if a port is open, it's important
    to understand what service is actually listening.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当我们扫描端口时，通常我们感兴趣的不仅仅是端口是否在线。虽然大多数Web服务器监听在端口80上（这是HTTP分配的端口），但有人也可以将Web服务器放在端口12345或1337上。重要的不仅仅是了解端口是否开放，还要了解实际监听的是什么服务。
- en: Fortunately for us, Nmap comes with a service version detection module built
    in. This functionality works by creating a connection to the actual service listening,
    and looking for a service banner. Nearly every network-based service is identifiable
    by its initial service banner; even if it's not, though, protocol detection allows
    Nmap to identify the protocol, if not the exact server version that is running.
    We will learn how to conduct basic scans—including service version detection—in
    the next chapter.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Nmap自带了一个内置的服务版本检测模块。这个功能通过创建到实际监听服务的连接，并寻找服务横幅来实现。几乎每个基于网络的服务都可以通过其初始服务横幅来识别；即使不能，协议检测也允许Nmap识别正在运行的协议，即使不是确切的服务器版本。我们将在下一章学习如何进行基本扫描，包括服务版本检测。
- en: Summary
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: After reading this chapter, you should have a fundamental understanding of how
    computer networks work. Specifically, it's important to understand how TCP and
    UDP differ and how port scanning itself functions. Now that you know that the
    Internet works as a very large computer network—and that you can also scan machines
    locally on your LAN—you should have a solid foundation to continue learning how
    Nmap works, and the advanced features that you can use in a plethora of situations.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，你应该对计算机网络的工作原理有了基本的了解。具体来说，了解TCP和UDP的区别以及端口扫描本身的功能是很重要的。现在你知道互联网是一个非常庞大的计算机网络，你也可以在本地局域网上扫描机器，你应该有了一个坚实的基础，继续学习Nmap的工作原理以及你可以在各种情况下使用的高级功能。
- en: In the next chapter, we will learn how to conduct a basic Nmap scan in order
    to get results in the most common situations. This next chapter will get you on
    your feet and scanning different types of ports and services!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何进行基本的Nmap扫描，以便在最常见的情况下获得结果。下一章将让你开始扫描不同类型的端口和服务！
