- en: Target Exploitation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目标利用
- en: Target exploitation is one area that sets a penetration test apart from a vulnerability
    assessment. Now that vulnerabilities have been found, you will actually validate
    and take advantage of these vulnerabilities by exploiting the system, in the hope
    of gaining full control or additional information and visibility into the targeted
    network and the systems therein. This chapter will highlight and discuss practices
    and tools that are used to conduct real-world exploitation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 目标利用是一个让渗透测试与漏洞评估区分开的领域。现在漏洞已经被发现，你将通过利用系统来验证并利用这些漏洞，希望获得对目标网络和其中系统的完全控制或额外信息和可见性。本章将重点介绍和讨论用于进行真实世界利用的实践和工具。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: In the *Vulnerability research* section, we will explain what areas of vulnerability
    research are crucial in order to understand, examine, and test the vulnerability
    before transforming it into a practical exploit code.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*漏洞研究*部分，我们将解释漏洞研究的哪些领域是至关重要的，以便在将其转化为实际利用代码之前了解、检查和测试漏洞。
- en: We will point you to several exploit repositories that should keep you informed
    about publicly-available exploits and when to use them.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将指引你到几个利用库，这些库应该让你了解公开可用的利用和何时使用它们。
- en: We will illustrate the use of one of the infamous exploitation toolkits from
    a target-evaluation perspective. This will give you a clear idea about how to
    exploit the target in order to gain access to sensitive information. The *Advanced
    exploitation toolkit* section involves a couple of hands-on practical exercises.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将从目标评估的角度说明如何使用臭名昭著的利用工具包。这将让你清楚地了解如何利用目标以获取敏感信息。*高级利用工具包*部分包括一些实际操作的练习。
- en: In the end, we will attempt to briefly describe the steps for writing a simple
    exploit module for Metasploit.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们将尝试简要描述为Metasploit编写一个简单利用模块的步骤。
- en: Writing exploit code from scratch can be a time-consuming and expensive task.
    Hence, using publicly-available exploits and adjusting them to fit your target
    environment may require expertise, which would assist you in transforming the
    skeleton of one exploit into another, if the similarity and purpose is almost
    the same. We highly encourage the practice of publicly-available exploits in your
    own labs to further understand and kickstart writing your own exploit code.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 从头开始编写利用代码可能是一项耗时且昂贵的任务。因此，使用公开可用的利用并调整它们以适应你的目标环境可能需要专业知识，这将帮助你将一个利用的骨架转化为另一个，如果相似性和目的几乎相同的话。我们强烈鼓励在你自己的实验室中练习使用公开可用的利用，以进一步了解并开始编写你自己的利用代码。
- en: Vulnerability research
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 漏洞研究
- en: 'Understanding the capabilities of a specific software or hardware product may
    provide a starting point for investigating vulnerabilities that could exist in
    that product. Conducting vulnerability research is not easy, nor is it a one-click
    task. Hence, it requires a strong knowledge base with different factors to carry
    out security-analysis:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 理解特定软件或硬件产品的能力可能为调查该产品可能存在的漏洞提供一个起点。进行漏洞研究并不容易，也不是一键式的任务。因此，它需要一个强大的知识基础和不同的因素来进行安全分析：
- en: '**Programming skills**: This is a fundamental factor for ethical hackers. Learning
    the basic concepts and structures that exist with any programming language should
    grant the tester an advantage when finding vulnerabilities. Apart from basic knowledge
    of programming languages, you must be prepared to deal with the advanced concepts
    of processors, system memory, buffers, pointers, data types, registers, and caches.
    These concepts are implementable in almost any programming language, such as C/C++,
    Python, Perl, and Assembly.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编程技能**：这是道德黑客的基本因素。学习任何编程语言中存在的基本概念和结构应该能让测试人员在发现漏洞时获得优势。除了对编程语言的基本了解外，你必须准备好处理处理器、系统内存、缓冲区、指针、数据类型、寄存器和缓存的高级概念。这些概念可以在几乎任何编程语言中实现，比如C/C++、Python、Perl和汇编语言。'
- en: To learn the basics of writing an exploit code from a discovered vulnerability,
    visit [http://www.phreedom.org/presentations/exploit-code-development/exploit-code-development.pdf](http://www.phreedom.org/presentations/exploit-code-development/exploit-code-development.pdf).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解从发现的漏洞编写利用代码的基础知识，请访问[http://www.phreedom.org/presentations/exploit-code-development/exploit-code-development.pdf](http://www.phreedom.org/presentations/exploit-code-development/exploit-code-development.pdf)。
- en: '**Reverse-engineering**: This is another broad area for discovering the vulnerabilities
    that could exist in an electronic device, software, or system by analyzing its
    functions, structures, and operations. The purpose is to deduce code from a given
    system without any prior knowledge of its internal working; to examine it for
    error conditions, poorly-designed functions, and protocols; and to test the boundary
    conditions. There are several reasons to use your reverse-engineering skills,
    such as the removal of copyright protection from a software, security auditing,
    competitive technical intelligence, identification of patent infringement, interoperability,
    understanding the product workflow, and acquiring sensitive data. Reverse-engineering
    adds two layers of concept to examining the code of an application: source-code
    auditing and binary auditing. If you have access to the application source code,
    you can accomplish the security analysis through automated tools; or manually
    study the source in order to extract the conditions where a vulnerability can
    be triggered. On the other hand, binary auditing simplifies the task of reverse-engineering
    where the application exists without any source code. Disassemblers and decompilers
    are two generic types of tools that may assist the auditor with binary analysis.
    Disassemblers generate the assembly code from a complied binary program, while
    decompilers generate a high-level language code from a compiled binary program.
    However, dealing with either of these tools is quite challenging and requires
    a careful assessment.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**逆向工程**：这是发现电子设备、软件或系统可能存在的漏洞的另一个广泛领域，通过分析其功能、结构和操作来实现。其目的是在没有任何关于其内部工作的先前知识的情况下从给定系统中推导出代码；检查其错误条件、设计不良的功能和协议；以及测试边界条件。有几个原因可以使用逆向工程技能，比如从软件中去除版权保护、安全审计、竞争技术情报、识别专利侵权、互操作性、理解产品工作流程和获取敏感数据。逆向工程为审查应用程序的代码增加了两个概念层次：源代码审计和二进制审计。如果你可以访问应用程序的源代码，你可以通过自动化工具完成安全分析；或者手动研究源代码以提取漏洞可能被触发的条件。另一方面，二进制审计简化了没有任何源代码的应用程序的逆向工程任务。反汇编器和反编译器是两种可能协助审计员进行二进制分析的通用工具类型。反汇编器从编译的二进制程序生成汇编代码，而反编译器从编译的二进制程序生成高级语言代码。然而，使用这些工具中的任何一个都是非常具有挑战性的，并需要仔细评估。'
- en: '**Instrumented tools**: Instrumented tools, such as debuggers, data extractors,
    fuzzers, profilers, code coverage, flow analyzers, and memory monitors, play an
    important role in the vulnerability-discovery process, and provide a consistent
    environment for testing purposes. Explaining each of these tool categories is
    beyond the scope of this book. However, you may find several useful tools already
    present in Kali Linux. To keep track of the latest reverse-code-engineering tools,
    we strongly recommend that you visit the online library at [http://www.woodmann.com/collaborative/tools/index.php/Category:RCE_Tools](http://www.woodmann.com/collaborative/tools/index.php/Category:RCE_Tools).'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仪器化工具**：仪器化工具，如调试器、数据提取器、模糊测试器、性能分析器、代码覆盖率、流分析器和内存监视器，在发现漏洞的过程中发挥着重要作用，并为测试目的提供一致的环境。解释每个工具类别超出了本书的范围。然而，你可能会发现几个有用的工具已经存在于Kali
    Linux中。为了跟踪最新的逆向代码工程工具，我们强烈建议你访问在线图书馆[http://www.woodmann.com/collaborative/tools/index.php/Category:RCE_Tools](http://www.woodmann.com/collaborative/tools/index.php/Category:RCE_Tools)。'
- en: '**Exploitability and payload construction**: This is the final step in writing
    the **Proof of Concept** (**PoC**) code for a vulnerable element of an application,
    which could allow the penetration tester to execute custom commands on the target
    machine. We apply our knowledge of vulnerable applications from the reverse-engineering
    stage to polish shellcode with an encoding mechanism, in order to avoid bad characters
    that may result in the termination of the exploit process.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用性和有效载荷构造**：这是为应用程序的一个易受攻击的元素编写**概念验证**（**PoC**）代码的最后一步，这可以允许渗透测试人员在目标机器上执行自定义命令。我们将从逆向工程阶段对易受攻击的应用程序的知识应用到用编码机制打磨shellcode，以避免可能导致利用过程终止的不良字符。'
- en: Depending on the type and classification of vulnerability discovered, it is
    very important to follow the specific strategy that may allow you to execute an
    arbitrary code or command on the target system. As a professional penetration
    tester, you will always be looking for loopholes that will result in getting shell
    access to your target operating system. Thus, we will demonstrate a few scenarios
    with the Metasploit framework in a later section of this chapter, which will show
    these tools and techniques.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 根据发现的漏洞的类型和分类，遵循特定的策略非常重要，这可能允许你在目标系统上执行任意代码或命令。作为一名专业的渗透测试人员，你将始终寻找可能导致获取对目标操作系统的shell访问的漏洞。因此，我们将在本章的后面部分演示一些使用Metasploit框架的场景，展示这些工具和技术。
- en: Vulnerability and exploit repositories
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 漏洞和利用库
- en: For many years, a number of vulnerabilities have been reported in the public
    domain. Some of these were disclosed with the PoC exploit code to prove the feasibility
    and viability of a vulnerability found in the specific software or application.
    Many still remain unaddressed. This competitive era of finding publicly-available
    exploits and vulnerability information makes it easier for penetration testers
    to quickly search and retrieve the best-available exploit that may suit their
    target system environment. You can also port one type of exploit to another type
    (for example, Win32 architecture to Linux architecture) provided that you hold
    intermediate programming skills, and a clear understanding of OS-specific architecture.
    We have provided a combined set of online repositories that may help you to track
    down any vulnerability information, or its exploit, by searching through them.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，已经在公共领域报告了许多漏洞。其中一些是披露了PoC利用代码，以证明特定软件或应用中发现的漏洞的可行性和可行性。许多仍然未得到解决。在这个竞争激烈的时代，寻找公开可用的利用和漏洞信息使渗透测试人员能够快速搜索和检索最佳的利用，以适应其目标系统环境。您还可以将一种类型的利用移植到另一种类型（例如，从Win32架构到Linux架构），前提是您具有中级编程技能和对特定操作系统架构的清晰理解。我们提供了一组在线存储库，可以帮助您通过搜索来跟踪任何漏洞信息或其利用。
- en: Not every single vulnerability found has been disclosed to the public on the
    internet. Some are reported without any PoC exploit code, and some do not even
    provide detailed vulnerability information. For this reason, consulting more than
    one online resource is common practice among many security auditors.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有发现的漏洞都已在互联网上向公众披露。有些是报告的，但没有任何PoC利用代码，有些甚至没有提供详细的漏洞信息。因此，咨询多个在线资源是许多安全审计人员的常见做法。
- en: 'The following is a list of online repositories:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在线存储库的列表：
- en: '| Repository name | Website URL |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 存储库名称 | 网站网址 |'
- en: '| Bugtraq SecurityFocus | [http://www.securityfocus.com](http://www.securityfocus.com)
    |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| Bugtraq SecurityFocus | [http://www.securityfocus.com](http://www.securityfocus.com)
    |'
- en: '| OSVDB Packet Stormulnerabilities | [https://blog.osvdb.org/](https://blog.osvdb.org/)
    |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| OSVDB Packet Storm漏洞 | [https://blog.osvdb.org/](https://blog.osvdb.org/)
    |'
- en: '| Packet Storm | [http://www.packetstormsecurity.org](http://www.packetstormsecurity.org)
    |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| Packet Storm | [http://www.packetstormsecurity.org](http://www.packetstormsecurity.org)
    |'
- en: '| National Vulnerability Database | [http://nvd.nist.gov](http://nvd.nist.gov)  |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 国家漏洞数据库 | [http://nvd.nist.gov](http://nvd.nist.gov) |'
- en: '| IBM ISS X-Force | [https://exchange.xforce.ibmcloud.com/](https://exchange.xforce.ibmcloud.com/)
    |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| IBM ISS X-Force | [https://exchange.xforce.ibmcloud.com/](https://exchange.xforce.ibmcloud.com/)
    |'
- en: '| US-CERT Vulnerability Notes | [http://www.kb.cert.org/vuls](http://www.kb.cert.org/vuls)
    |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 美国计算机紧急响应小组漏洞注释 | [http://www.kb.cert.org/vuls](http://www.kb.cert.org/vuls)
    |'
- en: '| US-CERT Alerts | [http://www.us-cert.gov/cas/techalerts/](http://www.us-cert.gov/cas/techalerts/)
    |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 美国计算机紧急响应小组警报 | [http://www.us-cert.gov/cas/techalerts/](http://www.us-cert.gov/cas/techalerts/)
    |'
- en: '| SecuriTeam | [http://www.securiteam.com](http://www.securiteam.com) |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| SecuriTeam | [http://www.securiteam.com](http://www.securiteam.com) |'
- en: '| Secunia Advisories | [http://secunia.com/advisories/historic/](http://secunia.com/advisories/historic/)
    |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| Secunia公告 | [http://secunia.com/advisories/historic/](http://secunia.com/advisories/historic/)
    |'
- en: '| CXSecurity.com | [http://cxsecurity.com](http://cxsecurity.com) |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| CXSecurity.com | [http://cxsecurity.com](http://cxsecurity.com) |'
- en: '| XSSed XSS-Vulnerabilities | [http://www.xssed.com](http://www.xssed.com)
    |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| XSSed XSS-漏洞 | [http://www.xssed.com](http://www.xssed.com) |'
- en: '| Security Vulnerabilities Database | [http://securityvulns.com](http://securityvulns.com)
    |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 安全漏洞数据库 | [http://securityvulns.com](http://securityvulns.com) |'
- en: '| SEBUG | [http://www.sebug.net](http://www.sebug.net) |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| SEBUG | [http://www.sebug.net](http://www.sebug.net) |'
- en: '| MediaService Lab | [http://techblog.mediaservice.net](http://techblog.mediaservice.net)
    |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| MediaService Lab | [http://techblog.mediaservice.net](http://techblog.mediaservice.net)
    |'
- en: '| Intelligent Exploit Aggregation Network | [http://www.intelligentexploit.com](http://www.intelligentexploit.com)
    |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 智能利用聚合网络 | [http://www.intelligentexploit.com](http://www.intelligentexploit.com)
    |'
- en: 'Although there are many other internet resources available, we have listed
    only a few reviewed ones. Kali Linux comes with the integration of the Exploit
    database from Offensive Security. This provides the extra advantage of keeping
    all archived exploits to date on your system for future reference and use. To
    access Exploit-DB, execute the following commands on your shell:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然还有许多其他互联网资源可用，但我们只列出了一些经过审查的资源。 Kali Linux集成了Offensive Security的Exploit数据库。这提供了额外的优势，可以在系统上保持所有存档的利用以供将来参考和使用。要访问Exploit-DB，请在shell上执行以下命令：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will open a complete list of exploits currently available from Exploit-DB
    under the `/usr/share/exploitdb/platforms/directory`. These exploits are categorized
    in their relevant subdirectories based on the type of system (Windows, Linux,
    HP-UX, Novell, Solaris, BSD, IRIX, TRU64, ASP, PHP, and so on). Most of these
    exploits were developed using C, Perl, Python, Ruby, PHP, and other programming
    technologies. Kali Linux already comes with a handful of compilers and interpreters
    that support the execution of these exploits.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`/usr/share/exploitdb/platforms/`目录下打开当前可用的Exploit-DB的完整利用列表。这些利用根据系统类型（Windows、Linux、HP-UX、Novell、Solaris、BSD、IRIX、TRU64、ASP、PHP等）分类在其相关的子目录中。大多数这些利用是使用C、Perl、Python、Ruby、PHP和其他编程技术开发的。
    Kali Linux已经配备了一些支持执行这些利用的编译器和解释器。
- en: How do we extract particular information from the exploits list?
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何从利用列表中提取特定信息？
- en: Using the power of Bash commands, you can manipulate the output of any text
    file in order to retrieve the meaningful data. You can use Searchsploit or this
    can also be accomplished by typing `cat files.csv |cut -d"," -f3` on your console.
    It will extract the list of exploit titles from a `files.csv` file. To learn the
    basic shell commands, refer to [http://tldp.org/LDP/abs/html/index.html](http://tldp.org/LDP/abs/html/index.html).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 利用Bash命令的威力，您可以操纵任何文本文件的输出，以检索有意义的数据。您可以使用Searchsploit，或者在控制台上键入`cat files.csv
    |cut -d"," -f3`来实现。它将从`files.csv`文件中提取利用标题的列表。要了解基本的shell命令，请参阅[http://tldp.org/LDP/abs/html/index.html](http://tldp.org/LDP/abs/html/index.html)。
- en: Advanced exploitation toolkit
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 先进的利用工具包
- en: 'Kali Linux is preloaded with some of the best and most advanced exploitation
    toolkits. The Metasploit framework ([http://www.metasploit.com](http://www.metasploit.com))
    is one of these. Here, we have explained it in greater detail and presented a
    number of scenarios that will increase its productivity, and enhance your experience
    with penetration testing. The framework was developed in the Ruby programming
    language and supports modularization so that it makes it easier for the penetration
    tester, with optimum programming skills, to extend or develop custom plugins and
    tools. The architecture of a framework is divided into three broad categories:
    libraries, interfaces, and modules. A key part of our exercise is to focus on
    the capabilities of various interfaces and modules. Interfaces (console, CLI,
    web, and GUI) basically provide the frontend operational activity when dealing
    with any type of modules (exploits, payloads, auxiliaries, encoders, and NOP).
    Each of the following modules has their own meaning and are function-specific
    to the penetration testing process:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Kali Linux预装了一些最好和最先进的利用工具包。Metasploit框架（[http://www.metasploit.com](http://www.metasploit.com)）就是其中之一。在这里，我们详细解释了它，并提出了一些场景，这些场景将增加其生产力，并增强您对渗透测试的体验。该框架是用Ruby编程语言开发的，并支持模块化，使得渗透测试人员更容易扩展或开发自定义插件和工具。框架的架构分为三个广泛的类别：库、接口和模块。我们的重点是关注各种接口和模块的功能。接口（控制台、CLI、Web和GUI）基本上提供了前端操作活动，处理任何类型的模块（利用、有效载荷、辅助工具、编码器和NOP）时。以下每个模块都有其自己的含义，并且对于渗透测试过程具有特定功能：
- en: '**Exploit**: This module is the PoC code developed to take advantage of a particular
    vulnerability in a target system'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用**：这个模块是为了利用目标系统中的特定漏洞而开发的PoC代码'
- en: '**Payload**: This module is a malicious code intended, as a part of an exploit
    or independently compiled, to run the arbitrary commands on the target system'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有效载荷**：这个模块是恶意代码，作为利用的一部分或独立编译，用于在目标系统上运行任意命令'
- en: "**Auxiliaries**: These modules are the set of tools developed to perform scanning,\
    \ sniffing, wardialing, fingerprinting, and other security \Lassessment tasks"
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**辅助工具**：这些模块是一组用于执行扫描、嗅探、拨号、指纹识别和其他安全评估任务的工具'
- en: '**Encoders**: These modules are provided to evade the detection of antivirus,
    firewall, IDS/IPS, and other similar malware defences by encoding the payload
    during a penetration operation'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编码器**：这些模块用于在渗透操作期间对有效载荷进行编码，以规避杀毒软件、防火墙、IDS/IPS和其他类似恶意软件防御的检测'
- en: '**No Operation or No Operation Performed (NOP)**: This module is an assembly-language
    instruction often added into a shellcode to perform nothing but to cover a consistent
    payload space'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无操作或无操作执行（NOP）**：这个模块是汇编语言指令，通常添加到shellcode中，什么也不做，只是为了覆盖一致的有效载荷空间'
- en: For your understanding, we will explain the basic use of two well-known Metasploit
    interfaces with their relevant command-line options. Each interface has its own
    strengths and weaknesses. However, we strongly recommend that you stick to a console
    version as it supports most of the framework features.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让您了解，我们将解释两个众所周知的Metasploit接口的基本用法及其相关的命令行选项。每个接口都有其自己的优势和劣势。但是，我们强烈建议您坚持使用控制台版本，因为它支持大部分框架功能。
- en: MSFConsole
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MSFConsole
- en: 'The MSFConsole is one of the most efficient, powerful, and all-in-one centralized
    frontend interfaces for penetration testers to make the best use of the exploitation
    framework. To access `msfconsole`, navigate to Applications | Exploitation Tools
    | Metasploit or use the Terminal to execute the following command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: MSFConsole是渗透测试人员最有效、强大和一体化的前端界面之一，用于充分利用利用框架。要访问`msfconsole`，请转到应用程序 | 利用工具
    | Metasploit，或使用终端执行以下命令：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You will be dropped into an interactive console interface. To learn about all
    of the available commands, you can type the following command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您将进入一个交互式控制台界面。要了解所有可用命令，您可以输入以下命令：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will display two sets of commands; one set will be widely used across
    the framework, and the other will be specific to the database backend where the
    assessment parameters and results are stored. Instructions about other usage options
    can be retrieved through the use of `-h` following the core command. Let''s examine
    the use of the `show` command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示两组命令；一组将广泛用于整个框架，另一组将特定于存储评估参数和结果的数据库后端。关于其他使用选项的说明可以通过在核心命令后使用`-h`来获取。让我们来看看`show`命令的用法：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This command is typically used to display the available modules of a given
    type, or all, of the modules. The most frequently used commands could be any of
    the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令通常用于显示给定类型的可用模块，或所有模块。最常用的命令可能是以下之一：
- en: '`show auxiliary`: This command will display all of the auxiliary modules.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`show auxiliary`：此命令将显示所有辅助模块。'
- en: '`show exploits`: This command will get a list of all of the exploits within
    the framework.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`show exploits`：此命令将获取框架内所有利用的列表。'
- en: '`show payloads`: This command will retrieve a list of payloads for all platforms.
    However, using the same command in the context of a chosen exploit will display
    only compatible payloads. For instance, Windows payloads will only be displayed
    with the Windows-compatible exploits.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`show payloads`：此命令将检索所有平台的有效载荷列表。但是，在所选利用的上下文中使用相同的命令将仅显示兼容的有效载荷。例如，Windows有效载荷只会与兼容Windows的利用一起显示。'
- en: '`show encoders`: This command will print a list of available encoders.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`show encoders`：此命令将打印可用编码器的列表。'
- en: '`shownops`: This command will display all the available NOP generators.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shownops`：此命令将显示所有可用的NOP生成器。'
- en: '`show options`: This command will display the settings and options available
    for specific module.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`show options`：此命令将显示特定模块的设置和选项。'
- en: '`show targets`: This command will help us to extract a list of target OS supported
    by a particular exploit module.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示目标：此命令将帮助我们提取特定利用模块支持的目标操作系统列表。
- en: '`show advanced`: This command will provide you with more options to fine-tune
    your exploit execution.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`show advanced`：此命令将为您提供更多选项来微调您的利用执行。'
- en: 'We have compiled a short list of the most valuable commands in the following
    table; you can practice each one of them with the Metasploit console. The italicized
    terms next to the commands will need to be provided by you:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经编制了以下表中最有价值的命令的简短列表；您可以使用Metasploit控制台练习每一个。命令旁边的斜体术语将需要您提供：
- en: '| **Commands** | **Description** |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **描述** |'
- en: '| `check` | Verifies a particular exploit against your vulnerable target without
    exploiting it. This command is not supported by many exploits. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `check` | 验证特定利用针对您的易受攻击目标而不利用它。这个命令不被许多利用支持。 |'
- en: '| `connectip port` | Works similarly to the Netcat and Telnet tools. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `connectip port` | 类似于Netcat和Telnet工具。 |'
- en: '| `exploit` | Launches a selected exploit. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `exploit` | 启动所选的利用。 |'
- en: '| `run` | Launches a selected auxiliary. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `run` | 启动所选的辅助。 |'
- en: '| `jobs` | Lists all of the background modules currently running and provides
    the ability to terminate them. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `jobs` | 列出当前正在运行的所有后台模块，并提供终止它们的能力。 |'
- en: '| `route add subnet netmasksessionid` | Adds a route for the traffic through
    a compromised session for network-pivoting purposes. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `route add subnet netmasksessionid` | 为通过受损会话进行网络枢纽目的的流量添加路由。 |'
- en: '| `info module` | Displays detailed information about a particular module (exploit,
    auxiliary, and so on). |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `info module` | 显示有关特定模块（利用、辅助等）的详细信息。 |'
- en: '| `setparam value` | Configures the parameter value within a current module.
    |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `setparam value` | 配置当前模块内的参数值。 |'
- en: '| `setgparam value` | To set the parameter value globally across the framework
    to be used by all exploits and auxiliary modules. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `setgparam value` | 在框架中全局设置参数值，以供所有利用和辅助模块使用。 |'
- en: '| `unsetparam` | It is the reverse of the `set` command. You can also reset
    all of the variables at once by using the `unset all` command. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `unsetparam` | 它是`set`命令的反向。您也可以使用`unset all`命令一次重置所有变量。'
- en: '| `unsetgparam` | To unset one or more global variable. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `unsetgparam` | 取消设置一个或多个全局变量。 |'
- en: '| `sessions` | Ability to display, interact with, and terminate the target
    sessions. Use with `-l` for listing, `-i` ID for interaction, and `-k` ID for
    termination. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `sessions` | 能够显示、交互和终止目标会话。使用`-l`进行列出，使用`-i` ID进行交互，使用`-k` ID进行终止。 |'
- en: '| `search string` | Provides a search facility through module names and descriptions.
    |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `search string` | 通过模块名称和描述提供搜索功能。 |'
- en: '| `use module` | Selects a particular module in the context of penetration
    testing. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `use module` | 在渗透测试环境中选择特定模块。 |'
- en: We will demonstrate the practical use of some of these commands in the upcoming
    sections. It is important for you to understand their basic use with different
    sets of modules within the framework.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的部分演示一些这些命令的实际用法。重要的是要理解它们在框架内不同模块集的基本用法。
- en: MSFCLI
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MSFCLI
- en: As with the MSFConsole interface, a CLI provides extensive coverage of various
    modules that can be launched at any one instance. However, it lacks some of the
    advanced automation features of MSFConsole.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 与MSFConsole界面一样，CLI提供了各种模块的广泛覆盖，可以在任何一个实例中启动。但是，它缺少MSFConsole的一些高级自动化功能。
- en: 'To access `msfcli`, use the Terminal to execute the following command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问`msfcli`，请使用终端执行以下命令：
- en: '[PRE4]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will display all of the available modes similar to that of MSFConsole,
    as well as usage instructions for selecting the particular module and setting
    its parameters. Note that all of the variables or parameters should follow the
    convention of `param=value` and that all options are case-sensitive. We have presented
    a small exercise to select and execute a particular exploit:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示所有可用模式，类似于MSFConsole，并提供选择特定模块和设置其参数的用法说明。请注意，所有变量或参数都应遵循`param=value`的约定，并且所有选项都区分大小写。我们提供了一个小练习来选择和执行特定的利用：
- en: '[PRE5]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The use of `O` at the end of the preceding command instructs the framework
    to display the available options for the selected exploit. The following command
    sets the target IP using the `RHOST` parameter:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面命令的末尾使用`O`指令框架显示所选利用的可用选项。以下命令使用`RHOST`参数设置目标IP：
- en: '[PRE6]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, after setting the target IP using the `RHOST` parameter, it is time
    to select the compatible payload and execute our exploit:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在使用`RHOST`参数设置目标IP之后，是时候选择兼容的有效载荷并执行我们的利用了：
- en: '[PRE7]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, we have acquired local shell access to our target machine after
    setting the `LHOST` parameter for a chosen payload.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们在为所选有效载荷设置`LHOST`参数后，已经获得了对目标机器的本地shell访问。
- en: Ninja 101 drills
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 忍者101训练
- en: The examples provided in this section will clarify your understanding of how
    the exploitation framework can be used in various ways. It is not possible to
    pump every single aspect, or use the Metasploit framework, but we have carefully
    examined and extracted the most important features for your drills. To get an
    in-depth understanding of the Metasploit framework, we highly recommend you read
    the online tutorial, *Metasploit Unleashed*, at [http://www.offensive-security.com/metasploit-unleashed/](http://www.offensive-security.com/metasploit-unleashed/).
    This tutorial has been developed with advanced material that includes insights
    on exploit development, vulnerability research, and assessment techniques from
    a penetration testing perspective.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 本节提供的示例将阐明您对利用框架进行各种方式的理解。不可能涵盖每一个方面，或者使用Metasploit框架，但我们已经仔细研究并提取了最重要的功能供您练习。要深入了解Metasploit框架，我们强烈建议您阅读在线教程*Metasploit
    Unleashed*，网址为[http://www.offensive-security.com/metasploit-unleashed/](http://www.offensive-security.com/metasploit-unleashed/)。该教程包含了来自渗透测试角度的高级材料，包括有关利用开发、漏洞研究和评估技术的见解。
- en: Scenario 1
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 场景1
- en: 'During this exercise, we will demonstrate how the Metasploit framework can
    be utilized for port-scanning, OS-fingerprinting, and service-identification using
    an integrated Nmap facility. On your MSFConsole, execute the following commands:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将演示如何利用Metasploit框架进行端口扫描、操作系统指纹识别和服务识别，使用集成的Nmap工具。在MSFConsole上，执行以下命令：
- en: '[PRE8]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following two commands can be used if experiencing database connectivity
    errors:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果遇到数据库连接错误，可以使用以下两个命令：
- en: '`Systemclt start postgresql`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`Systemclt start postgresql`'
- en: '`Msfdb inint`'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`Msfdb inint`'
- en: 'The database tracker will save the data obtained for the sessions for further
    use. To start the Nmap scan, input the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库跟踪器将保存会话获取的数据以供进一步使用。要开始Nmap扫描，请输入以下内容：
- en: '[PRE9]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: At this point, we have successfully scanned our target and saved the results
    in our current database session. To list the target and services discovered, you
    can issue the `db_hosts and db_services` commands independently. Additionally,
    if you have already scanned your target using the Nmap program separately and
    saved the result in the XML format, you can import these results into Metasploit
    using the `db_import_nmap_xml` command.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已成功扫描了目标并将结果保存在当前数据库会话中。要列出发现的目标和服务，您可以分别使用`db_hosts`和`db_services`命令。此外，如果您已经单独使用Nmap程序扫描了目标并将结果保存为XML格式，您可以使用`db_import_nmap_xml`命令将这些结果导入Metasploit。
- en: Scenario 2
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 场景2
- en: In this example, we will illustrate a few auxiliaries from the Metasploit framework.
    The key is to understand their importance in the context of the vulnerability
    analysis process.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将说明Metasploit框架中的一些辅助功能。关键是要理解它们在漏洞分析过程中的重要性。
- en: SMB usernames
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SMB用户名
- en: This module will perform a sweep of target IP addresses attempting to locate
    usernames associated with the **Server Message Block** (**SMB**). This service
    is used by applications for access to file shares, printers, or for communication
    between devices on the network. Using one of the Metasploit auxiliary scanners,
    we can determine possible usernames.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块将对目标IP地址进行扫描，尝试查找与**服务器消息块**（**SMB**）相关联的用户名。该服务用于应用程序访问文件共享、打印机或网络设备之间的通信。使用Metasploit辅助扫描器之一，我们可以确定可能的用户名。
- en: 'First, search Metasploit for scanners by typing the following:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过输入以下内容在Metasploit中搜索扫描器：
- en: '[PRE10]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can then see the number of different scanners available to scan for open
    SMB services:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以看到用于扫描开放SMB服务的不同扫描器的数量：
- en: '![](img/3dab00b7-fa86-49c8-89fe-d537d2bc740b.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3dab00b7-fa86-49c8-89fe-d537d2bc740b.png)'
- en: 'To use the scanner, type the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用扫描器，请输入以下内容：
- en: '[PRE11]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Set the `RHOSTS` parameter to the network range, in this case `192.168.0.1/24`,
    by entering the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 将`RHOSTS`参数设置为网络范围，即`192.168.0.1/24`，输入以下内容：
- en: '[PRE12]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, type this:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，输入以下内容：
- en: '[PRE13]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The results of the scan indicate that there is an SMB service running with
    the `METASPLOITABLE` username:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描结果表明有一个带有`METASPLOITABLE`用户名的SMB服务正在运行：
- en: '![](img/3a9213aa-2a64-426c-a5cf-e9a889b71620.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a9213aa-2a64-426c-a5cf-e9a889b71620.png)'
- en: This may indicate open shares or other network services that can be attacked.
    The `METASPLOIT` username can also provide us with a starting point when we start
    cracking user credentials and passwords.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能表明存在可以被攻击的共享或其他网络服务。当我们开始破解用户凭据和密码时，`METASPLOIT`用户名也可以为我们提供一个起点。
- en: VNC blank authentication scanners
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VNC空白认证扫描器
- en: 'This module will scan the range of IP addresses for the **Virtual Network Computing**
    (**VNC**) servers that are accessible without any authentication details:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块将扫描IP地址范围内的**虚拟网络计算**（**VNC**）服务器，这些服务器可以在没有任何认证详细信息的情况下访问：
- en: '[PRE14]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note that we have found a couple of VNC servers that are accessible without
    authentication. This attack vector can become a serious threat for system administrators
    and can trivially invite unwanted guests to your VNC server from the internet
    if no authorization controls are enabled.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们发现了一些可以在没有认证的情况下访问的VNC服务器。如果没有启用授权控制，这种攻击向量可能对系统管理员构成严重威胁，并且可能轻易地邀请来自互联网的不受欢迎的访客访问您的VNC服务器。
- en: PostGRESQL logins
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PostGRESQL登录
- en: 'In previous chapters, we identified the PostgreSQL database service running
    on port `5432` during our Nmap scans against the Metasploitable operating system:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们在对Metasploitable操作系统进行Nmap扫描时发现了运行在端口`5432`上的PostgreSQL数据库服务：
- en: '![](img/ba867ce8-b274-4ebc-bc5b-2f435f5455c7.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba867ce8-b274-4ebc-bc5b-2f435f5455c7.png)'
- en: 'We can utilize a Metasploit auxiliary scanner to determine login information
    about the database. First, we configure Metasploit to utilize the scanner by typing
    the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用Metasploit辅助扫描器来确定数据库的登录信息。首先，我们通过输入以下内容来配置Metasploit来使用扫描器：
- en: '[PRE15]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, we want to configure two of the options. The first one sets the scanner
    to continue to scan, even if it finds a successful login. This allows us to scan
    a number of database instances as well as enumerate many usernames and passwords.
    We configure this by typing the following:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们想要配置两个选项。第一个选项设置扫描器继续扫描，即使它找到了成功的登录。这使我们能够扫描多个数据库实例，并枚举许多用户名和密码。我们通过输入以下内容来配置这个选项：
- en: '[PRE16]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Second, we set the hosts we want to scan. The scanner will take a CIDR range
    or a single IP address. In this case, we are going to point the scanner at the
    Metasploitable OS at `192.168.0.30` because we have determined, in our examination
    of the Nmap scan, that there is an active instance at that IP address. We set
    this by typing:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们设置要扫描的主机。扫描器将采用CIDR范围或单个IP地址。在这种情况下，我们将把扫描器指向`192.168.0.30`上的Metasploitable
    OS，因为我们在Nmap扫描中已经确定在该IP地址上有一个活动实例。我们通过输入以下内容来设置这一点：
- en: '[PRE17]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We then run the exploit. When we examine the output, we can see that the username
    and password were located for this database:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们运行利用程序。当我们检查输出时，我们可以看到该数据库的用户名和密码已被找到：
- en: '![](img/53efbb30-f0b7-4273-921e-3fcf0f6b65c4.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/53efbb30-f0b7-4273-921e-3fcf0f6b65c4.png)'
- en: Database security is critical to organizations as databases often contain confidential
    information. Scanners, such as PostgreSQL, allow us to test the security surrounding
    the crown jewels of the organization in an efficient manner.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库安全对组织至关重要，因为数据库通常包含机密信息。诸如PostgreSQL之类的扫描器使我们能够以高效的方式测试组织的核心机密信息周围的安全性。
- en: Scenario 3
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 情景3
- en: We will now explore the use of some common payloads (bind, reverse, and meterpreter),
    and discuss their capabilities from an exploitation point of view. This exercise
    will give you an idea of how and when to use a particular payload.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将探讨一些常见负载（绑定、反向和Meterpreter），并从利用的角度讨论它们的功能。这个练习将让你了解何时以及如何使用特定的负载。
- en: Bind shells
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绑定shell
- en: A bind shell is a remote shell connection that provides access to the target
    system on the successful exploitation and execution of shellcode by setting up
    a bind port listener. This opens a gateway for an attacker to connect back to
    the compromised machine on the bind shell port using a tool such as Netcat, which
    could tunnel the standard input (`stdin`) and output (`stdout`) over a TCP connection.
    This scenario works in a similar way to that of a Telnet client establishing a
    connection to a Telnet server, and is applicable in an environment where the attacker
    is behind the **Network Address Translation** (**NAT**) or firewall and direct
    contact from the compromised host to the attacker IP is not possible.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 绑定shell是一种远程shell连接，它在成功利用和执行shellcode设置绑定端口监听器后提供对目标系统的访问。这为攻击者打开了一个通道，使其能够使用Netcat等工具在绑定shell端口上连接回受损机器，从而可以通过TCP连接隧道传输标准输入（stdin）和输出（stdout）。这种情况的工作方式类似于Telnet客户端建立到Telnet服务器的连接，并且适用于攻击者位于**网络地址转换**（**NAT**）或防火墙之后，无法从受损主机直接联系攻击者IP的环境。
- en: 'The following are the commands to begin exploitation and set up a bind shell:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是开始利用和设置绑定shell的命令：
- en: '[PRE18]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Thus, we have analyzed that Metasploit also automates the process of connecting
    to the bind shell using an integrated multipayload handler. Tools such as Netcat
    can come in handy in situations where you write your own exploit with a bind shellcode,
    which should require a third-party handler to establish a connection to the compromised
    host. You can read some practical examples of Netcat usage for various network-security
    operations at [http://en.wikipedia.org/wiki/Netcat](http://en.wikipedia.org/wiki/Netcat).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经分析了Metasploit也自动化了使用集成的多负载处理程序连接到绑定shell的过程。在编写自己的利用程序并使用绑定shellcode时，Netcat等工具可以派上用场，这需要第三方处理程序来建立到受损主机的连接。您可以在[http://en.wikipedia.org/wiki/Netcat](http://en.wikipedia.org/wiki/Netcat)上阅读有关Netcat在各种网络安全操作中的实际用例。
- en: Reverse shells
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反向shell
- en: A reverse shell is the complete opposite of a bind shell. Instead of binding
    a port on the target system and waiting for the connection from the attacker's
    machine, it simply connects back to the attacker's IP and port, and spawns a shell.
    A visible dimension of the reverse shell is to consider a target behind the NAT
    or firewall that prevents public access to its system resources.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 反向shell是绑定shell的完全相反。它不是在目标系统上绑定端口并等待来自攻击者机器的连接，而是简单地连接回攻击者的IP和端口，并生成一个shell。反向shell的一个显著特点是考虑到目标位于NAT或防火墙之后，阻止公共访问其系统资源。
- en: 'The following are the commands to begin exploitation and set up a reverse shell:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是开始利用和设置反向shell的命令：
- en: '[PRE19]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You can clearly differentiate between a reverse shell and a bind shell using
    the attacker's IP. We have to provide the attacker's IP (for example, `LHOST`
    `192.168.0.3`) in a reverse shell configuration, while there is no need to provide
    it in a bind shell.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过攻击者的IP清楚地区分反向shell和绑定shell。在反向shell配置中，我们必须提供攻击者的IP（例如，`LHOST` `192.168.0.3`），而在绑定shell中则不需要提供。
- en: What is the difference between the inline and stager payloads? An inline payload
    is a single self-contained shellcode that is to be executed with one instance
    of an exploit, while the stager payload creates a communication channel between
    the attacker and victim machine to read off the rest of the staging shellcode
    in order to perform a specific task. It is common practice to choose stager payloads
    because they are much smaller than inline payloads.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 内联和分段负载之间有什么区别？内联负载是一个单独的自包含shellcode，它将在一次利用实例中执行，而分段负载创建了攻击者和受害者机器之间的通信通道，以读取其余分段shellcode以执行特定任务。选择分段负载是常见做法，因为它们比内联负载要小得多。
- en: Meterpreters
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Meterpreters
- en: A meterpreter is an advanced, stealthy, multifaceted, and dynamically-extensible
    payload that operates by injecting a reflective DLL into a target memory. Scripts
    and plugins can be dynamically loaded at runtime for the purpose of extending
    the post exploitation activity. This includes privilege-escalation, dumping system
    accounts, keylogging, persistent backdoor service, and enabling a remote desktop.
    Moreover, the whole communication of the meterpreter shell is encrypted by default.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: meterpreter是一种高级、隐秘、多面的、动态可扩展的有效载荷，通过将反射式DLL注入目标内存来操作。脚本和插件可以在运行时动态加载，以扩展后期利用活动的目的。这包括提权、转储系统帐户、键盘记录、持久后门服务和启用远程桌面。此外，整个meterpreter
    shell的通信默认情况下是加密的。
- en: 'The following are the commands to begin exploitation and set up a meterpreter
    payload:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是开始利用和设置meterpreter有效载荷的命令：
- en: '[PRE20]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'As you can see, we have successfully acquired a meterpreter shell. By typing,
    we will be able to see the various types of commands available to us. Let''s check
    our current privileges and escalate them to `SYSTEM` level using a meterpreter
    script named `getsystem`:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们已成功获得了meterpreter shell。通过输入，我们将能够看到各种可用于我们的命令。让我们检查我们当前的特权，并使用名为“getsystem”的meterpreter脚本将它们提升到“SYSTEM”级别：
- en: '[PRE21]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This will display the number of techniques available for elevating our privileges.
    By using a default command, `getsystem`, without any options, it will attempt
    every single technique against the target and will stop as soon as it is successful:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示提升我们特权的技术数量。通过使用默认命令“getsystem”，不带任何选项，它将针对目标尝试每种技术，并在成功时立即停止：
- en: '[PRE22]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: If you choose to execute the `-j -z` exploit command, you are pushing the exploit
    execution to the background, and will not be presented with an interactive meterpreter
    shell. However, if the session has been established successfully, then you can
    interact with that particular session using the sessions `-i` ID or get a list
    of the active session's by typing sessions `-l` to get the exact ID value.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择执行“-j -z”利用命令，则将利用执行推送到后台，并且不会出现交互式meterpreter shell。但是，如果会话已成功建立，那么您可以使用会话“-i”ID与特定会话进行交互，或者通过键入会话“-l”获取活动会话的列表以获取确切的ID值。
- en: 'Let''s use the power of the meterpreter shell and dump the current system accounts
    and passwords held by the target. These will be displayed in the NTLM hash format
    and can be reversed by cracking through several tools and techniques using the
    following commands:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们利用meterpreter shell的功能，并使用以下命令转储目标持有的当前系统帐户和密码。这些将以NTLM哈希格式显示，并可以通过使用以下命令的几种工具和技术来破解：
- en: '[PRE23]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, let''s take this activity further by recording the keystrokes using the
    keylogging capability of the meterpreter shell, using the following commands,
    which may reveal some useful data from our target:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过使用meterpreter shell的键盘记录功能，使用以下命令将此活动进一步记录下来，这可能会从我们的目标中揭示一些有用的数据：
- en: '[PRE24]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'At this stage, we will migrate the meterpreter shell to the `explorer.exe`
    process (`3172`) in order to start logging the current user activity on a system
    with the following commands:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们将将meterpreter shell迁移到“explorer.exe”进程（“3172”），以便使用以下命令开始记录系统上当前用户的活动：
- en: '[PRE25]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We have now started our keylogger and should wait for some time to get the
    chunks of recorded data:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经启动了我们的键盘记录器，应该等一段时间来获取记录的数据块：
- en: '[PRE26]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: As you can see, we have dumped the target's web-surfing activity. Similarly,
    we could also capture the credentials of all users logging into the system by
    migrating the `winlogon.exe` process (`648`).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们已经转储了目标的网络浏览活动。同样，我们还可以通过将“winlogon.exe”进程（“648”）迁移来捕获登录到系统的所有用户的凭据。
- en: 'You have exploited and gained access to the target system, but now want to
    keep this access permanent, even if the exploited service or application will
    be patched at a later stage. This kind of activity is typically known as a backdoor
    service. Note that the backdoor service provided by the meterpreter shell does
    not require authentication before accessing a particular network port on the target
    system. This may allow some uninvited guests to access your target and pose a
    significant risk. As part of following the rules of engagement for penetration
    testing, such an activity is generally not allowed. Therefore, we strongly suggest
    you keep the backdoor service away from an official pentest environment. You should
    also ensure that this was explicitly permitted in writing during the scoping and
    rules-of-engagement phases:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经利用并获得了对目标系统的访问权限，但现在希望保持此访问权限，即使在以后的阶段修补了被利用的服务或应用程序。这种活动通常被称为后门服务。请注意，meterpreter
    shell提供的后门服务在访问目标系统上的特定网络端口之前不需要进行身份验证。这可能允许一些不速之客访问您的目标，并构成重大风险。作为渗透测试规则的一部分，通常不允许这种活动。因此，我们强烈建议您将后门服务远离官方的渗透测试环境。您还应确保在范围和规则确定阶段明确允许了这一点：
- en: '[PRE27]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'So, we have finally started the backdoor service on our target. We will close
    the current meterpreter session and use the multi/handler with a `windows/metsvc_bind_tcp`
    payload to interact with our backdoor service whenever we want:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们最终在我们的目标上启动了后门服务。我们将关闭当前的meterpreter会话，并使用`windows/metsvc_bind_tcp`有效载荷的`multi/handler`与我们的后门服务进行交互：
- en: '[PRE28]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Let''s use another useful meterpreter script, `getgui`, to enable remote desktop
    access for our target. The following exercise will create a new user account on
    the target and enable remote desktop service if it was disabled previously:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用另一个有用的meterpreter脚本“getgui”，为我们的目标启用远程桌面访问。以下练习将在目标上创建一个新用户帐户，并在以前禁用远程桌面服务的情况下启用远程桌面服务：
- en: '[PRE29]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, we can log into our target system using the `rdesktop` program by entering
    the following command on another Terminal:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用“rdesktop”程序登录到我们的目标系统，方法是在另一个终端上输入以下命令：
- en: '[PRE30]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Note that, if you already hold a cracked password for any existing user on the
    target machine, you can simply execute the `run getgui -e` command to enable the
    remote desktop service, instead of adding a new user. Additionally, don't forget
    to clean up your tracks on the system by executing the `getgui/clean_up` script
    cited at the end of the previous output.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您已经拥有目标机器上任何现有用户的破解密码，您可以简单地执行`run getgui -e`命令来启用远程桌面服务，而不是添加新用户。此外，请不要忘记通过执行上一个输出末尾引用的`getgui/clean_up`脚本来清理系统中的痕迹。
- en: How should I extend my attack landscape by gaining deeper access to the targeted
    network that is inaccessible from the outside? Metasploit provides the capability
    to view and add new routes to the destination network using the `route add targetSubnettargetSubnetMaskSessionId`
    command (for example, route add `10.2.4.0 255.255.255.0 1`). Here, the `SessionId`
    parameter points to the existing meterpreter session (gateway), and the `targetsubnet`
    parameter is another network address (or dual-homed Ethernet network address)
    that resides beyond our compromised target. Once you set Metasploit to route all
    of the traffic through a compromised host session, we are ready to penetrate further
    into a network that is normally non-routable from our side. This is commonly known
    as pivoting or foot-holding.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我应该如何通过深入访问无法从外部访问的目标网络来扩展我的攻击范围？Metasploit提供了使用`route add targetSubnettargetSubnetMaskSessionId`命令查看和添加到目标网络的新路由的能力（例如，route
    add `10.2.4.0 255.255.255.0 1`）。这里，`SessionId`参数指向现有的meterpreter会话（网关），而`targetsubnet`参数是另一个网络地址（或双重家庭以太网网络地址），位于我们受损目标之外。一旦您设置Metasploit通过受损主机会话路由所有流量，我们就准备好进一步渗透通常无法从我们这边路由的网络。这通常被称为枢纽或立足点。
- en: Writing exploit modules
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写利用模块
- en: Developing an exploit is one of the most interesting aspects of the Metasploit
    framework. In this section, we will briefly discuss the core issues surrounding
    the development of an exploit, and explain its key skeleton by taking a live example
    from the existing framework's database. However, it is important to be adept with
    the Ruby programming language before you attempt to write your own exploit module.
    On the other hand, intermediate skills of reverse-engineering and a practical
    understanding of vulnerability-discovery tools (for example, fuzzers and debuggers)
    provide an open map toward the exploit construction. This section is meant only
    as an introduction to the topic, not a complete guide.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 开发利用是Metasploit框架中最有趣的方面之一。在本节中，我们将简要讨论围绕利用开发的核心问题，并通过从现有框架数据库中获取的实时示例解释其关键骨架。然而，在尝试编写自己的利用模块之前，熟练掌握Ruby编程语言非常重要。另一方面，中级的逆向工程技能和对漏洞发现工具（例如模糊测试工具和调试器）的实际理解为利用构建提供了一张开放的地图。本节仅作为该主题的介绍，而不是完整的指南。
- en: 'For our example, we have selected the exploit (EasyFTP Server <= 1.7.0.11 MKD
    Command Stack Buffer Overflow), which will provide a basic view of exploiting
    a buffer-overflow vulnerability in the Easy FTP Server application. You can port
    this module for a similar vulnerability found in other FTP server applications
    and so utilize your time effectively. The exploit code is located at `/usr/share/metasploit-framework/modules/exploits/windows/ftp/easyftp_mkd_fixret.rb`:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，我们选择了漏洞（EasyFTP Server <= 1.7.0.11 MKD Command Stack Buffer Overflow），它将提供对Easy
    FTP Server应用程序中缓冲区溢出漏洞的基本视图。您可以将此模块移植到其他FTP服务器应用程序中发现的类似漏洞，并有效利用您的时间。漏洞代码位于`/usr/share/metasploit-framework/modules/exploits/windows/ftp/easyftp_mkd_fixret.rb`：
- en: '[PRE31]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The preceding code is a basic header representing a file name, a revision number,
    and the date and time values of an exploit:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码是表示文件名、修订号以及漏洞的日期和时间值的基本标头：
- en: '[PRE32]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The MSF core library requires an initialization at the beginning of an exploit:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: MSF核心库需要在利用开始时进行初始化：
- en: '[PRE33]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In the preceding code, the `Exploitmixin/` class is the one that provides various
    options and methods for the remote TCP connections, such as `RHOST`, `RPORT`,
    `Connect()`, `Disconnect()`, and `SSL()`. The following code is the rank level
    assigned to the exploit on the basis of its frequent demand and usage:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，`Exploitmixin/`类是为远程TCP连接提供各种选项和方法的类，例如`RHOST`、`RPORT`、`Connect()`、`Disconnect()`和`SSL()`。以下代码是根据其频繁需求和使用分配给漏洞的等级：
- en: '[PRE34]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In the following code, the `Ftp mixin/` class establishes a connection with
    the FTP server:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，`Ftp mixin/`类与FTP服务器建立连接：
- en: '[PRE35]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The following code provides generic information about the exploit and points
    to known references:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码提供了有关漏洞的通用信息，并指向已知的参考资料：
- en: '[PRE36]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The following code instructs the payload to clean up itself once the execution
    process is completed:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码指示有效载荷在执行过程完成后清理自身：
- en: '[PRE37]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The following code snippet defines 512 bytes of space available for the shellcode,
    lists bad characters that should terminate our payload delivery, and disables
    the NOP-padding:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段定义了512字节的空间供shellcode使用，列出了应该终止我们有效载荷传递的不良字符，并禁用了NOP填充：
- en: '[PRE38]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The following code snippet provides instructions on what platform is being
    targeted and defines the vulnerable targets (`0` to `9`) that list the different
    versions of the Easy FTP Server (`1.7.0.2 to 1.7.0.11`), each representing a unique
    return address based on the application binary (`ftpbasicsvr.exe`). Furthermore,
    the exploit disclosure date was added, and the default target was set to `0` (`v1.7.0.2`):'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段提供了有关目标平台和定义易受攻击目标（`0`到`9`）的说明，列出了Easy FTP Server的不同版本（`1.7.0.2`至`1.7.0.11`），每个版本都基于应用程序二进制文件（`ftpbasicsvr.exe`）的唯一返回地址。此外，还添加了漏洞披露日期，并将默认目标设置为`0`（`v1.7.0.2`）：
- en: '[PRE39]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In the following code, the `check()` function determines whether the target
    is vulnerable:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，`check()`函数确定目标是否易受攻击：
- en: '[PRE40]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The following code defines a function that generates NOP sleds to aid with
    IDS/IPS/AV evasion. Some consider NOP sleds to be a quick and dirty solution to
    this problem and believe that they should not be used unless there is a particularly
    good reason. For simplicity, during this example of writing a module, we have
    left the function in the code:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码定义了一个生成NOP滑梯以帮助IDS/IPS/AV规避的函数。一些人认为NOP滑梯是解决这个问题的一个快速而肮脏的解决方案，并认为除非有特别好的理由，否则不应该使用它们。为简单起见，在编写模块的示例中，我们在代码中保留了该函数：
- en: '[PRE41]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The following procedure fixes a return address from where the payload can be
    executed. Technically, it resolves the issue of stack-addressing:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 以下过程修复了一个返回地址，从这个地址可以执行有效负载。从技术上讲，它解决了栈寻址的问题：
- en: '[PRE42]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Initially, the exploit buffer holds the encoded return address and the randomized
    NOP instructions:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，利用缓冲区包含编码的返回地址和随机化的NOP指令：
- en: '[PRE43]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The following code adds a dynamically-generated shellcode to our exploit at
    runtime:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码在运行时向我们的利用程序中添加了一个动态生成的shellcode：
- en: '[PRE44]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The following code fixes the stack data and makes a short jump over the return
    address holding our shellcode buffer:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码修复了堆栈数据，并在保存我们的shellcode缓冲区的返回地址上进行了短跳转：
- en: '[PRE45]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'At the end, using the preceding code, we send our finalized buffer to the specific
    target using the vulnerable MKD FTP post-authentication command. Since the MKD
    command in the Easy FTP Server is vulnerable to stack-based buffer-overflow, the `buf` command
    will overflow the target stack and exploit the target system by executing our
    payload:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用前面的代码，我们使用易受攻击的MKD FTP后身份验证命令将我们的最终缓冲区发送到特定目标。由于Easy FTP服务器中的MKD命令容易受到基于堆栈的缓冲区溢出的影响，`buf`命令将溢出目标堆栈，并通过执行我们的有效负载来利用目标系统：
- en: '[PRE46]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Close your connections using the following code:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码关闭您的连接：
- en: '[PRE47]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Metasploit is equipped with useful tools, such as `msfpescan` for Win32 and
    `msfelfscan` for Linux systems, that may assist you in finding a target-specific
    return address. For instance, to find a sustainable return address from your chosen
    application file, type `# msfpescan -p targetapp.ext`.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit配备了有用的工具，例如`msfpescan`用于Win32和`msfelfscan`用于Linux系统，这些工具可能会帮助您找到特定目标的返回地址。例如，要从您选择的应用程序文件中找到一个可持续的返回地址，请键入`#
    msfpescan -p targetapp.ext`。
- en: Summary
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we pointed out several key areas necessary for target exploitation.
    At the beginning, we provided an overview of vulnerability research that highlighted
    the requirement for a penetration tester to hold the necessary knowledge and skills,
    which in turn become effective for vulnerability assessment. Then, we presented
    a list of online repositories from where you can reach a number of publicly-disclosed
    vulnerabilities and exploit codes. In the final section, we demonstrated the practical
    use of an advanced exploitation toolkit called the Metasploit framework. The exercises
    provided are designed purely  to explore and understand the target-acquisition
    process through tactical exploitation methods. Additionally, we interpreted the
    insights into exploit development by analyzing each step of the sample exploit
    code from a framework, to help you understand the basic skeleton and construction
    strategy.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们指出了目标开发所需的几个关键领域。首先，我们概述了弱点研究，强调了渗透测试人员需要具备必要的知识和技能，这反过来又对弱点评估产生了影响。然后，我们提供了一个在线存储库列表，您可以从中获取许多公开披露的漏洞和利用代码。在最后一部分，我们演示了一个名为Metasploit框架的高级利用工具包的实际用途。所提供的练习纯粹旨在通过战术利用方法探索和理解目标获取过程。此外，我们通过分析框架中示例利用代码的每个步骤，解释了对利用开发的见解，以帮助您理解基本的骨架和构建策略。
- en: In the next chapter, we will discuss the process of privilege-escalation and
    maintaining access using various tools and techniques and how it is beneficial
    once the target is acquired.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论提权和使用各种工具和技术维持访问的过程，以及在获得目标后它如何有益。
