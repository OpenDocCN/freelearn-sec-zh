- en: Conclusions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Recapping the topics you have learned
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾你学到的内容
- en: 'So far in this book, we covered many topics about Go and information security.
    The topics covered are useful for a variety of people, including developers, penetration
    testers, SOC analysts, computer forensic analysts, network and security engineers,
    and DevOps engineers. Here is a high-level recap of the topics covered:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本书涵盖了许多关于 Go 和信息安全的主题。这些内容对多种人群都很有帮助，包括开发人员、渗透测试员、SOC 分析师、计算机取证分析师、网络与安全工程师以及
    DevOps 工程师。以下是涵盖主题的高级概览：
- en: The Go programming language
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 编程语言
- en: Working with files
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作文件
- en: Forensics
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取证
- en: Packet capture and injection
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据包捕获与注入
- en: Cryptography
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加密学
- en: Secure shell (SSH)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全外壳（SSH）
- en: Brute force
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暴力破解
- en: Web applications
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web 应用程序
- en: Web scraping
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网页抓取
- en: Host discovery and enumeration
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机发现与枚举
- en: Social engineering and honeypots
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社会工程学和蜜罐
- en: Post exploitation
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后期利用
- en: More thoughts on the usage of Go
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于 Go 使用的更多思考
- en: Go is a great language, and it is a reliable choice for many use cases, but,
    like any other language, it is not the be-all-and-end-all language. As the old
    saying goes, "Always choose the best tool for the job." Throughout this book,
    we looked at the versatility of Go and the standard library. Go is also great
    for performance, reliability in production, concurrency, and memory usage, but
    the strong static type system may slow development, making Python a better choice
    for a simple proof of concept. Interestingly, you can extend Python using Go by
    writing Python modules in Go.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Go 是一门非常棒的语言，它是许多用例中的可靠选择，但像其他任何语言一样，它并不是万能的语言。正如老话所说，“总是选择最适合工作的工具。”在本书中，我们探讨了
    Go 和标准库的多功能性。Go 也在性能、生产环境中的可靠性、并发性和内存使用方面表现出色，但强大的静态类型系统可能会减缓开发速度，使得 Python 更适合用于简单的概念验证。值得注意的是，你可以通过用
    Go 编写 Python 模块来扩展 Python。
- en: The C programming language may be a better choice in some situations when you
    don't want a garbage collector but need to compile the smallest binary possible.
    Go does provide an unsafe package, which allows you to bypass the type safety,
    but it does not give as much control as the C language. Go allows you to wrap
    C libraries and create bindings so that you can utilize any C library that does
    not have a Go equivalent.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些情况下，C 编程语言可能是一个更好的选择，尤其是当你不想使用垃圾回收器但又需要编译出最小的二进制文件时。Go 确实提供了一个不安全的包，可以绕过类型安全，但它没有
    C 语言那样提供更多的控制。Go 允许你封装 C 库并创建绑定，这样你就可以使用任何没有 Go 等价库的 C 库。
- en: Both Go and the cybersecurity industry show signs of growth. Go is continuing
    to evolve as a language, and some of the weaker areas of the language are starting
    to see promising signs. For example, GUI libraries such as Qt and Gtk are being
    wrapped in Go, and with 3D graphics libraries such as OpenGL also have wrappers.
    Even mobile development is possible and continuing to improve.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Go 和网络安全行业都显示出增长的迹象。Go 语言正在持续进化，语言中的一些较弱领域开始显示出有希望的迹象。例如，Qt 和 Gtk 等 GUI 库正在
    Go 中封装，而 OpenGL 等 3D 图形库也有了封装。即使是移动开发也是可能的，并且持续改进。
- en: There are other useful packages in the standard library we didn't even cover,
    such as the `binary` package for manipulation binary data, the `xml` package for
    encoding and decoding XML documents, and the `flag` package for parsing command-line
    arguments.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些我们未涉及的标准库中有用的包，比如用于处理二进制数据的 `binary` 包、用于编码和解码 XML 文档的 `xml` 包，以及用于解析命令行参数的
    `flag` 包。
- en: What I hope you take away from the book
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我希望你从这本书中获得的收获
- en: After reading this book, you should have a good idea of what packages are available
    in the standard library and how versatile Go can be out of the box. You should
    feel comfortable using Go for a variety of tasks, from simple tasks, such as working
    with files and making a network connection, to more advanced tasks, such as scraping
    websites and capturing packets. I also hope you gleaned some tips for writing
    idiomatic Go code.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 读完这本书后，你应该对标准库中有哪些包以及 Go 语言在开箱即用情况下的多功能性有一个清晰的了解。你应该能够自如地使用 Go 进行各种任务，从简单的任务，如操作文件和建立网络连接，到更高级的任务，如抓取网站和捕获数据包。我也希望你能从中获得一些编写地道
    Go 代码的技巧。
- en: The example programs provided should serve as references for building your own
    tools. Many of the programs are useful as-is and can be incorporated into your
    toolkit immediately, while a few are meant only to serve as a reference to help
    you perform common tasks.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的示例程序应作为构建你自己工具的参考。许多程序可以直接使用，可以立即纳入你的工具包，而少数程序仅作为参考，帮助你执行常见任务。
- en: Be aware of legal, ethical, and technical boundaries
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注意法律、伦理和技术边界
- en: It is critical to be aware of the possible repercussions for any action you
    take against a machine or network. There are legal boundaries that can result
    in a fine or imprisonment, depending on the laws and jurisdiction. For example,
    in the United States, the **Computer Fraud and Abuse Act** (**CFAA**) makes it
    illegal to access a computer without authorization. Don't always assume that the
    client authorizing the scope of your penetration test has the right to authorize
    you on every device. Companies can lease physical servers or rent virtual or physical
    space in a data center that they do not own, requiring you to get authorization
    from other sources as well.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你对机器或网络采取的任何行动，了解可能产生的后果至关重要。存在法律边界，可能会导致罚款或监禁，具体取决于法律和司法管辖区。例如，在美国，**计算机欺诈和滥用法案**（**CFAA**）使得未经授权访问计算机成为非法行为。不要总是认为授权渗透测试范围的客户有权在每一台设备上授权你。公司可以租赁物理服务器或租用他们不拥有的数据中心的虚拟或物理空间，这时你也需要从其他来源获得授权。
- en: There are also ethical boundaries to be aware of, which are different from the
    legal boundaries. Ethical boundaries can be a gray area for some people. For example,
    with social engineering, if you target employees, do you think it is acceptable
    to attempt the social engineering outside of work hours? Is it acceptable to send
    phishing emails to their personal email address? Is it acceptable to impersonate
    another employee and lie to someone? Other aspects of ethics involve how you behave
    on compromised servers and what you do with the data you find. Is it acceptable
    to store client data off-site if it was exfiltrated during a penetration test?
    Is it acceptable to create your own user on a client's production server during
    a penetration test? Some people may disagree on where the ethical boundary lies
    for different situations. It is important to be conscious of these types of things
    and to discuss them with any client prior to an engagement.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 还有需要注意的伦理边界，这与法律边界不同。伦理边界对某些人来说可能是一个灰色区域。例如，在社会工程学中，如果你针对员工，是否认为在工作时间外进行社会工程攻击是可以接受的？是否可以向他们的个人电子邮件地址发送钓鱼邮件？是否可以冒充另一个员工并对他人撒谎？伦理的其他方面包括你在被攻陷的服务器上的行为，以及你如何处理找到的数据。如果在渗透测试过程中获取了客户数据，是否可以将其存储在外部？在渗透测试中，是否可以在客户的生产服务器上创建自己的用户？对于不同的情况，某些人可能会对伦理边界的界定产生不同的看法。意识到这些问题并在开始工作前与客户进行讨论非常重要。
- en: In addition to the legal and ethical aspects, it is also imperative to understand
    the technical repercussions and the physical load your tools put on servers, networks,
    load balancers, switches, and so on. Make sure that you set sane limits on web
    crawlers and brute forcers. Also, make sure that you log and track any actions
    you take so that you can undo any permanent changes. If you are performing a penetration
    test for a client, you should never leave unnecessary files you created on their
    servers. For example, if you install a reverse bind shell, make sure that you
    uninstall it. If you modify file permissions or install a bind shell, make sure
    that you are not opening up the client to outside attacks.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 除了法律和伦理方面，理解技术后果以及你的工具对服务器、网络、负载均衡器、交换机等的物理负载也至关重要。确保为网络爬虫和暴力破解工具设置合理的限制。同时，确保记录和跟踪你所采取的任何行动，以便能够撤销任何永久性更改。如果你为客户执行渗透测试，不应在其服务器上留下不必要的文件。例如，如果你安装了反向绑定shell，请确保卸载它。如果你修改了文件权限或安装了绑定shell，请确保没有为客户打开外部攻击的漏洞。
- en: There are a lot of things to be conscious of when working in the security field,
    but a lot of it comes down to common sense and being cautious. Respect the servers
    you are attacking, and don't take any action if you don't understand the implications.
    If you are unsure, seek guidance from a trusted and experienced peer or the community.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在安全领域工作时需要注意很多事情，但很多事情归根结底都是常识和谨慎行事。尊重你攻击的服务器，如果不理解其影响，请不要采取任何行动。如果不确定，向可信赖的经验丰富的同行或社区寻求指导。
- en: Where to go from here
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来该做什么
- en: Start building your toolbox and cookbook. Use the examples that are useful to
    you and customize them to suit your needs. Take some of the existing examples
    and expand upon them. Can you think of other ideas? How can you modify some of
    the programs to be more useful? Are any of the examples useful as-is in your own
    toolbox? Do they give you any ideas for other custom tools? Explore more of the
    Go standard library and write applications to fill your toolbox.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 开始构建你的工具箱和手册。使用对你有用的示例，并根据需要进行定制。对现有的一些示例进行扩展。你能想到其他的想法吗？如何修改一些程序使其更加有用？这些示例能否直接作为你工具箱中的一部分？它们是否给你提供了其他自定义工具的灵感？深入探索Go标准库，编写应用程序来充实你的工具箱。
- en: Start practicing and using some of the tools provided. You may need to find
    or build your own test network, or just a simple VM, or find a bug bounty program.
    If you decide to try out bug bounties, be sure to read the scope and rules with
    a microscope. To put your new tools and skills in to action, research application
    testing and network penetration methodologies. If you want to become a penetration
    tester or just want to learn more about penetration testing methodology and practice
    in a safe lab environment, then, I highly recommend the **Offensive Security Certified
    Professional** (**OSCP**) course offered by Offensive Security at [https://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/](https://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 开始实践并使用一些提供的工具。你可能需要找到或建立自己的测试网络，或者仅仅是一个简单的虚拟机，或者找到一个漏洞奖励计划。如果你决定尝试漏洞奖励计划，请务必仔细阅读范围和规则。为了将你学到的新工具和技能付诸实践，研究应用测试和网络渗透方法。如果你想成为渗透测试员，或者仅仅是想了解更多关于渗透测试的方法论，并在安全的实验环境中进行实践，那么我强烈推荐**Offensive
    Security Certified Professional**（**OSCP**）课程，该课程由Offensive Security提供，链接为：[https://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/](https://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/)
- en: Getting help and learning more
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取帮助并深入学习
- en: 'To learn more about Go, its language design and specification, and the standard
    library, check out these links:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 想要更深入了解Go、其语言设计与规范以及标准库，查看以下链接：
- en: The built-in documentation of godoc
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: godoc内建文档
- en: 'Online Go documentation: [https://golang.org/doc/](https://golang.org/doc/)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '在线Go文档: [https://golang.org/doc/](https://golang.org/doc/)'
- en: 'A tour of learning the Go language: [https://tour.golang.org/](https://tour.golang.org/)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '学习Go语言之旅: [https://tour.golang.org/](https://tour.golang.org/)'
- en: 'Go standard library documentation: [https://golang.org/pkg/](https://golang.org/pkg/)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Go标准库文档: [https://golang.org/pkg/](https://golang.org/pkg/)'
- en: 'Communities are a great place to get help and find others to collaborate. Online
    communities and in-person communities each have their pros and cons. Here are
    a few places to seek help for Go:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 社区是获得帮助并与他人合作的好地方。在线社区和面对面的社区各有优缺点。以下是一些可以寻求Go帮助的地方：
- en: 'The #go-nuts Freenode.net IRC channel: [http://irc.lc/freenode/go-nuts](http://irc.lc/freenode/go-nuts)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '#go-nuts Freenode.net IRC频道: [http://irc.lc/freenode/go-nuts](http://irc.lc/freenode/go-nuts)'
- en: 'The Go Forum: [https://forum.golangbridge.org](https://forum.golangbridge.org)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Go论坛: [https://forum.golangbridge.org](https://forum.golangbridge.org)'
- en: 'The Go Nuts mailing list: [https://groups.google.com/group/golang-nuts](https://groups.google.com/group/golang-nuts)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Go Nuts邮件列表: [https://groups.google.com/group/golang-nuts](https://groups.google.com/group/golang-nuts)'
- en: 'Local meetups: [https://www.meetup.com](https://www.meetup.com)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '本地聚会: [https://www.meetup.com](https://www.meetup.com)'
- en: 'Go FAQ: [https://golang.org/doc/faq](https://golang.org/doc/faq)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Go常见问题: [https://golang.org/doc/faq](https://golang.org/doc/faq)'
- en: 'Stack Overflow: [https://stackoverflow.com](https://stackoverflow.com)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Stack Overflow: [https://stackoverflow.com](https://stackoverflow.com)'
- en: 'Golang Subreddit: [https://www.reddit.com/r/golang/](https://www.reddit.com/r/golang/)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Golang Subreddit: [https://www.reddit.com/r/golang/](https://www.reddit.com/r/golang/)'
- en: Continue learning by applying the knowledge learned from this book. Write your
    own tools to reach your goals. Explore other third-party packages, or consider
    wrapping or porting a C library that Go is lacking. Experiment with the language.
    The most important thing is just to continue learning!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通过应用本书中的知识继续学习。编写你自己的工具来实现目标。探索其他第三方包，或考虑封装或移植Go缺失的C语言库。尝试使用这门语言。最重要的是，继续学习！
