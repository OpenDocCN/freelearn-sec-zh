- en: Chapter 8. System and Password Exploitation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。系统和密码利用
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Using local password-attack tools
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用本地密码攻击工具
- en: Cracking password hashes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破解密码哈希
- en: Using Social-Engineer Toolkit
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用社会工程师工具包
- en: Using BeEF for Browser Exploitation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用BeEF进行浏览器利用
- en: Cracking NTLM hashes using rainbow tables
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用彩虹表破解NTLM哈希
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In this chapter, we will focus on obtaining the hashes and then cracking them
    to obtain access. This information can be put to much use, because there is a
    very high possibility of getting other systems in the same network that use the
    same password. Let us proceed to see how this can be achieved.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于获取哈希值，然后破解它们以获取访问权限。这些信息可以得到很好的利用，因为很有可能在同一网络中有其他使用相同密码的系统。让我们继续看看如何实现这一点。
- en: Using local password-attack tools
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用本地密码攻击工具
- en: 'In this recipe, we will see a few tools both for Windows and Linux that will
    perform password-guessing attacks. For Linux, we will use a tool called **sucrack**,
    and for Windows we will use **fgdump** and **pwdump**. Sucrack is used to crack
    passwords via the `su` command, which is a multithreaded tool. SU is a tool in
    Linux that allows you to run commands using a substitute user. But first let us
    understand these tools: Sucrack is a password cracker. Fgdump and pwdump are tools
    that dump the SAM hashes from LSASS memory. **JTR** (**John the Ripper**) is a
    cracker for SAM hashes. **Windows Credentials Editor** (**WCE**) is a security
    tool to list logon sessions and add, change, list, and delete associated credentials
    (for example, LM/NT hashes, plaintext passwords, and Kerberos tickets). Let us
    begin with the practical approach.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将看到一些用于Windows和Linux的工具，用于执行猜测密码攻击。对于Linux，我们将使用一个名为**sucrack**的工具，对于Windows，我们将使用**fgdump**和**pwdump**。Sucrack用于通过`su`命令破解密码，这是一个多线程工具。SU是Linux中的一个工具，允许您使用替代用户运行命令。但首先让我们了解这些工具：Sucrack是一个密码破解器。Fgdump和pwdump是从LSASS内存中转储SAM哈希的工具。**JTR**（**John
    the Ripper**）是用于SAM哈希的破解器。**Windows凭证编辑器**（**WCE**）是一个安全工具，用于列出登录会话并添加、更改、列出和删除相关的凭证（例如LM/NT哈希、明文密码和Kerberos票据）。让我们从实际操作开始。
- en: Getting ready
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To demonstrate this, we will require a Windows XP machine and our Kali Linux
    distro. The reader might also need to port `PwDump.exe` and `FgDump.exe` from
    Kali Linux to Windows XP.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这一点，我们需要一台Windows XP机器和我们的Kali Linux发行版。读者可能还需要将`PwDump.exe`和`FgDump.exe`从Kali
    Linux移植到Windows XP。
- en: How to do it...
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'For demo purposes, we have changed the password to `987654321`. Enter the following
    command to commence the sucrack attack:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 出于演示目的，我们已将密码更改为`987654321`。输入以下命令开始sucrack攻击：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下屏幕截图所示：
- en: '![How to do it...](img/image_08_001.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_08_001.jpg)'
- en: 'Once the attack is completed and the password matches one of those in the dictionary,
    we will get the following result:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦攻击完成并且密码与字典中的一个匹配，我们将得到以下结果：
- en: '![How to do it...](img/image_08_002.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_08_002.jpg)'
- en: Similarly, we can do the same for any user we want by entering his/her username
    in the `-u` parameter.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，我们可以为任何想要的用户执行相同的操作，只需在`-u`参数中输入他/她的用户名。
- en: Let us see how the same can be done on Windows machines. The binaries for `wce.exe`,
    `PwDump.exe` and `FgDump.exe` can be found in Kali Linux at the `/usr/share/windows-binaries/`
    path. Import the same to the Windows machine to continue.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们看看如何在Windows机器上完成相同的操作。`wce.exe`、`PwDump.exe`和`FgDump.exe`的二进制文件可以在Kali Linux的`/usr/share/windows-binaries/`路径中找到。将其导入到Windows机器以继续。
- en: Now that we have the tools, ensure that the terminal is pointing towards the
    same folder the files have been put in.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了工具，确保终端指向放置文件的同一文件夹。
- en: 'Enter the following command in the terminal:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中输入以下命令：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下屏幕截图所示：
- en: '![How to do it...](img/image_08_003.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_08_003.jpg)'
- en: Now open the test file created, with a notepad, in the same folder where the
    `PWDump.exe` command was executed:![How to do it...](img/image_08_004.jpg)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在用记事本打开在执行`PWDump.exe`命令的同一文件夹中创建的测试文件：![如何做...](img/image_08_004.jpg)
- en: This shows us that `PwDump.exe` extracts all the passwords and is shown in the
    NTLM hashed state; the same can be used on the NTLM decrypt websites, where they
    have tons of stored hashes with clear text passwords. These websites store a huge
    database of cracked hashes, which are compared to get the original string. One
    thing to keep in mind is that NTLM hashes are one-way hashes and cannot be decrypted
    back; the only way to get the actual password is if one has the word and its corresponding
    hash. One famous website is [https://hashkiller.co.uk](https://hashkiller.co.uk)
    . It has approximately 312.072 billion unique decrypted NTLM hashes.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明`PwDump.exe`提取了所有密码并以NTLM哈希状态显示；可以在NTLM解密网站上使用相同的方法，这些网站存储了大量带有明文密码的哈希值。这些网站存储了一个巨大的已破解哈希值数据库，可以进行比较以获取原始字符串。需要记住的一点是NTLM哈希是单向哈希，无法解密；获取实际密码的唯一方法是拥有单词及其对应的哈希值。一个著名的网站是[https://hashkiller.co.uk](https://hashkiller.co.uk)。它大约有312.0720亿个唯一解密的NTLM哈希。
- en: 'Now let us look at fgdump and its workings. Before we continue, we need to
    know that fgdump is the newer version of pwdump; it has an added functionality
    of displaying password histories if they are available. Enter the following command
    in the command prompt:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们来看看fgdump及其工作原理。在我们继续之前，我们需要知道fgdump是pwdump的更新版本；它具有显示密码历史记录的附加功能（如果可用）。在命令提示符中输入以下命令：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下屏幕截图所示：
- en: '![How to do it...](img/image_08_005.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_08_005.jpg)'
- en: 'This will create three files: two pwdump files and one cache-dump file:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建三个文件：两个pwdump文件和一个cache-dump文件：
- en: '![How to do it...](img/image_08_006.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_08_006.jpg)'
- en: On opening the pwdump file, we get the same NTLM hashes that we got in the previous
    tool we ran; the same can be entered on NTLM cracking sites to achieve the clear-text
    password.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开pwdump文件后，我们得到了与我们在之前运行的工具中得到的相同的NTLM哈希；可以将相同的内容输入到NTLM破解网站中以获得明文密码。
- en: How it works...
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We have made use of a few parameters. Let us understand how this works:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了一些参数。让我们了解一下它是如何工作的：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`-a`: This uses ANSI escape codes for nice-looking statistics'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-a`：这使用ANSI转义代码来显示漂亮的统计信息'
- en: '`-w`: This shows the number of worker threads to run with'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-w`：显示要运行的工作线程数'
- en: '`-s`: This shows the statistics display interval in seconds'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-s`：以秒为单位显示统计信息的间隔'
- en: '`-u`: This shows the user account to `su` to'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-u`：显示要`su`到的用户帐户'
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let us understand the parameter used for `Pwdump.exe`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解一下`Pwdump.exe`使用的参数：
- en: '`-o`: This is used to write into a file'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-o`：这用于写入文件'
- en: '`127.0.0.1`: Enter the IP address of the compromised machine'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`127.0.0.1`：输入受损机器的IP地址'
- en: There's more...
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are more options in sucrack, pwdump, and fgdump that can be explored.
    Simply issue the commands `sucrack`, `Pwdump -h`, and `fgdump -h` in the respective
    windows and in the terminal to get all the available options.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: sucrack、pwdump和fgdump中还有更多可以探索的选项。只需在各自的窗口和终端中发出命令`sucrack`、`Pwdump -h`和`fgdump
    -h`即可获取所有可用选项。
- en: Cracking password hashes
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 破解密码哈希
- en: In this recipe, we are going to see how we can crack the hashes for a clear-text
    password. We will be using John the Ripper. John the Ripper (JTR) is a fast password
    cracker, currently available for many flavors of Unix, Windows, DOS, and OpenVMS.
    Its primary purpose is to detect weak Unix passwords. Besides several crypt (3)
    password hash types most commonly found on various Unix systems, supported out
    of the box are Windows LM hashes, plus lots of other hashes and ciphers in the
    community-enhanced version.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将看到如何破解明文密码的哈希。我们将使用John the Ripper。John the Ripper（JTR）是一个快速的密码破解器，目前可用于多种Unix、Windows、DOS和OpenVMS版本。它的主要目的是检测弱Unix密码。除了在各种Unix系统上常见的几种crypt（3）密码哈希类型之外，支持的还有Windows
    LM哈希，以及社区增强版本中的许多其他哈希和密码。
- en: Getting ready
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will require the hash obtained on the Windows machine to be ported to our
    Kali machine, after which we can commence with a comparison of the hashes.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将在Windows机器上获得的哈希传输到我们的Kali机器上，之后我们可以开始比较哈希。
- en: How to do it...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Let us begin with one of the most efficient tools when it comes to cracking
    passwords, JTR. For the given example, we have taken the hash dump received previously.
    The file has been renamed `crackme` for ease of readability.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从破解密码时最有效的工具之一JTR开始。在给定的示例中，我们已经获取了哈希转储。该文件已重命名为`crackme`以便阅读。
- en: 'Enter the following command in the terminal:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中输入以下命令：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_08_007.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_08_007.jpg)'
- en: 'As we can see, the passwords are retrieved in clear text; for example, `dhruv:
    1` and `dhruv: 2` form an entire password, `Administrator`; it is similar for
    the others. The password is split like this because of the NTLM hash mechanism.
    The entire hash is actually divided into an 8:8 segment, where if the password
    is bigger than eight chars, the other section is used to hash the password as
    well.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '正如我们所看到的，密码是以明文检索的；例如，`dhruv: 1`和`dhruv: 2`形成了整个密码`Administrator`；其他密码也是类似的。密码之所以被分割成这样，是因为NTLM哈希机制。整个哈希实际上被分成了8:8的段，如果密码大于八个字符，另一部分也会用于哈希密码。'
- en: John the Ripper supports cracking of different types of hashes, with NTLM being
    one of them.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: John the Ripper支持破解不同类型的哈希，其中NTLM是其中之一。
- en: How it works...
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In the preceding recipe, we used the following command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的教程中，我们使用了以下命令：
- en: '`|john crackme`: Where `crackme` is the password file that contains the hashes'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`|john crackme`：其中`crackme`是包含哈希的密码文件'
- en: John the Ripper is an intelligent tool; it detects the type of encryption used
    and performs the cracking phase automatically.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: John the Ripper是一个智能工具；它可以检测使用的加密类型，并自动执行破解阶段。
- en: There's more...
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'A lot more information can be found on John the Ripper by using the `man john`
    or `john --help` command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`man john`或`john --help`命令找到更多关于John the Ripper的信息：
- en: '![There''s more...](img/image_08_008.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/image_08_008.jpg)'
- en: Using Social-Engineering Toolkit
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用社会工程工具包
- en: '**Social-Engineering Toolkit** (**SET**), as the name implies, focuses on exploiting
    the human nature of curiosity. SET was written by David Kennedy (ReL1K) and, with
    a lot of help from the community, it has incorporated attacks. In this recipe,
    we will look at how a malicious executable is created and how the attacker waits
    for the victim to execute the file. We will also look at how an attacker tricks
    a user to attain a reverse shell by luring the victim to visit a malicious website.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**社会工程工具包**（**SET**），顾名思义，专注于利用人类好奇心的特性。SET是由David Kennedy（ReL1K）编写的，并在社区的大力帮助下，已经整合了攻击。在这个教程中，我们将看看如何创建一个恶意可执行文件，以及攻击者如何等待受害者执行该文件。我们还将看看攻击者如何通过诱使受害者访问恶意网站来获得反向shell。'
- en: Getting ready
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will make use of Windows OS with Internet Explorer 6 and
    a Kali Linux machine; `Setoolkit` is installed by default as a part of Kali.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将使用带有Internet Explorer 6的Windows操作系统和Kali Linux机器；`Setoolkit`默认作为Kali的一部分安装。
- en: How to do it...
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Start Social-Engineering Toolkit using the following command:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令启动社会工程工具包：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_08_009.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_08_009.jpg)'
- en: 'In this activity, we will look at how to use `Social-Engineering Attacks` to
    host a fake website and exploit the user''s IE, if vulnerable, and gain a reverse
    shell to his account. We will go with `Social-Engineering Attacks`, which is option
    1:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，我们将看看如何使用“社会工程攻击”来托管一个假网站，并利用用户的IE（如果易受攻击），并获得对他账户的反向shell。我们将选择“社会工程攻击”，即选项1：
- en: '![How to do it...](img/image_08_010.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_08_010.jpg)'
- en: We will now select the website attack vector, that is, 2, which then looks as
    follows:![How to do it...](img/image_08_011.jpg)
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将选择网站攻击向量，即2，然后看起来如下：![操作步骤...](img/image_08_011.jpg)
- en: Now we will select the `Metasploit Browser Exploit Method` option 2:![How to
    do it...](img/image_08_012.jpg)
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将选择“Metasploit浏览器利用方法”选项2：![操作步骤...](img/image_08_012.jpg)
- en: 'After that, we will clone the site and fill up the necessary information:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们将克隆该网站并填写必要的信息：
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Screenshot for the same is shown as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的截图如下所示：
- en: '![How to do it...](img/image_08_013.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_08_013.jpg)'
- en: We will select the `Internet explorer 6 vulnerability of Aurora memory corruption
    (2010-01-14)`, option number 37, and select the Metasploit **Windows Shell Reverse_TCP**,
    option 1, and specify any desired port, preferably above 1,000, as the ones below
    1,000 are registered for operating systems. The output will be as shown in the
    following screenshot:![How to do it...](img/image_08_014.jpg)
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将选择“Internet Explorer 6的Aurora内存损坏漏洞（2010-01-14）”，选项37，并选择Metasploit **Windows
    Shell Reverse_TCP**，选项1，并指定任何所需的端口，最好是大于1,000，因为低于1,000的端口是为操作系统注册的。输出将如下截图所示：![操作步骤...](img/image_08_014.jpg)
- en: 'Once the setup of the malicious website is complete, it will look as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦恶意网站的设置完成，它将如下所示：
- en: '![How to do it...](img/image_08_015.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_08_015.jpg)'
- en: Now that our configuration at the attacker end is complete, all we have to do
    is call the victim on the malicious website. For this exercise, our victim is
    a Windows Machine with IE version 6:![How to do it...](img/image_08_016.jpg)
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们在攻击者端的配置已经完成，我们所要做的就是在恶意网站上呼叫受害者。在这个练习中，我们的受害者是一个带有IE 6版本的Windows机器：![操作步骤...](img/image_08_016.jpg)
- en: 'The malicious script is executed and, if all the conditions, such as an Internet
    Explorer browser, vulnerable version of the browser, and no antivirus detection
    are matched, we get a reverse shell as our payload, as previously mentioned:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意脚本被执行，如果满足所有条件，如Internet Explorer浏览器、易受攻击的浏览器版本和无杀毒软件检测，我们将获得反向shell作为我们的有效载荷，如前所述：
- en: '![How to do it...](img/image_08_017.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_08_017.jpg)'
- en: 'On checking to ensure that it is the same system, let''s run an ipconfig:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 检查以确保它是相同的系统，让我们运行ipconfig：
- en: '![How to do it...](img/image_08_018.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_08_018.jpg)'
- en: How it works...
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As you can see, the whole exercise is self-explanatory; we create or host a
    fake website in order to steal information or gain remote access to the system.
    This should be taken with the utmost care in corporate environments. There are
    no special commands executed; the flow is followed.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，整个练习是不言自明的；我们创建或托管一个假网站，以窃取信息或远程访问系统。在企业环境中，这应该被极度小心对待。没有执行特殊命令；只是按照流程进行。
- en: There's more...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Let's take a scenario where the attacker wants to attack a server, however,
    there are only three or four people who have access to that server on the firewall.
    The attacker would social-engineer, forcing one of the four users to access the
    website, and might be lucky enough to gain a shell. Once done, the attacker will
    be able to route his attack over the targeted server via the compromised machine.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们假设攻击者想要攻击一个服务器，然而，只有三到四个人在防火墙上有权访问该服务器。攻击者会进行社会工程，迫使这四个用户中的一个访问该网站，并可能幸运地获得一个shell。一旦完成，攻击者将能够通过受损的机器在目标服务器上发起攻击。
- en: Social-Engineering Toolkit not only restricts you to browser-based exploitation,
    it even contains modules such as Phishing, mass mailers, Arduino-based attacks,
    wireless attacks, and so on. Since this chapter is restricted to exploitation,
    we have taken a recipe to look at how exploitation can be done via SET.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 社会工程工具包不仅限制您进行基于浏览器的利用，甚至还包含诸如网络钓鱼、大规模邮件发送、基于Arduino的攻击、无线攻击等模块。由于本章节限制在利用方面，我们已经准备好了解如何通过SET进行利用的方法。
- en: Using BeEF for browser exploitation
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用BeEF进行浏览器利用
- en: '**BeEF** stands for **Browser Exploitation Framework**. It is a pen testing
    tool that focuses mainly on browser and related exploitation. Nowadays, there
    are a growing number of threats toward the client browser comprised of mobile
    clients, web clients, and so on. BeEF allows us to pen test the targets using
    client-side attack vectors such as creating users, executing malicious script,
    and so on. BeEF mainly focuses on web-client-based exploitation, for example,
    browser level.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**BeEF**代表**浏览器利用框架**。它是一个主要专注于浏览器和相关利用的渗透测试工具。如今，对客户端浏览器的威胁日益增多，包括移动客户端、Web客户端等。BeEF允许我们使用客户端攻击向量对目标进行渗透测试，例如创建用户、执行恶意脚本等。BeEF主要专注于基于Web客户端的利用，例如浏览器级别。'
- en: Getting ready
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: BeEF XSS is already a part of Kali Linux. For this exercise, we are using a
    Windows machine with a Firefox browser. We will be hooking the client via the
    Firefox browser. On accessing the hook, the JavaScript is executed and the hook
    is deployed. If there are any issues while running the BeEF-XSS framework, refer
    to the guide at [https://github.com/beefproject/beef/wiki/Installation](https://github.com/beefproject/beef/wiki/Installation)
    .
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: BeEF XSS已经是Kali Linux的一部分。在这个练习中，我们使用的是一个带有Firefox浏览器的Windows机器。我们将通过Firefox浏览器钩住客户端。在访问钩子时，JavaScript被执行并部署钩子。如果在运行BeEF-XSS框架时遇到任何问题，请参考[https://github.com/beefproject/beef/wiki/Installation](https://github.com/beefproject/beef/wiki/Installation)上的指南。
- en: How to do it...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Initiate the BeEF framework by entering the following in the terminal:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中输入以下内容来启动BeEF框架：
- en: '[PRE8]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_08_019.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_08_019.jpg)'
- en: Now open the Firefox browser in Kali and visit the UI panel, as stated in the
    output. Enter the username password as `beef:beef`:![How to do it...](img/image_08_020.jpg)
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在Kali中打开Firefox浏览器并访问UI面板，如输出中所述。输入用户名密码为`beef:beef`：![如何做...](img/image_08_020.jpg)
- en: To hook a browser, we will have to make it load the hook URL of BeEF; we will
    do the same with our Windows machine. We make the browser visit the hook URL of
    our BeEF framework:![How to do it...](img/image_08_021.jpg)
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要钩住浏览器，我们将不得不让它加载BeEF的钩URL；我们将对我们的Windows机器做同样的操作。我们让浏览器访问我们的BeEF框架的钩URL：![如何做...](img/image_08_021.jpg)
- en: 'As we can see, the framework has detected a hook and attached itself to it,
    and we can now browse the different capabilities provided by the BeEF to attack
    the user using the browser. Note: It is also possible to create a persistent hook
    by force-loading a hidden pop-up window from the exploit modules available so
    that when the user browses away from the hook-injected page, the attacker still
    has the session:![How to do it...](img/image_08_022.jpg)'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如我们所看到的，框架已经检测到了一个钩，并将其附加到了钩上，现在我们可以浏览BeEF提供的不同能力，以利用浏览器攻击用户。注意：也可以通过强制加载来自可用的利用模块的隐藏弹出窗口来创建持久的钩，以便当用户从注入钩的页面浏览时，攻击者仍然拥有会话：![如何做...](img/image_08_022.jpg)
- en: We have now managed to hook the client to the BeEF framework. Usually, this
    hook is an XSS vector and is pasted as an iframe over any application where a
    user would visit, and then as an attacker continues to attack the user.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经成功地将客户端钩到了BeEF框架上。通常，这个钩是一个XSS向量，并被粘贴为一个iframe覆盖任何用户访问的应用程序，然后攻击者继续攻击用户。
- en: Let us make a pop-up box over the client to see its workings. The reader should
    click on the IP of the browser that is hooked and go to the commands tab. Under
    the hooked domain, there is an option to **Create Alert Dialogue**. Click it,
    set your parameters straight, and click on **Execute**. Check to see if the hooked
    browser got an alert prompt or not:![How to do it...](img/image_08_023.jpg)
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在客户端上弹出一个框来查看它的工作原理。读者应该点击被钩住的浏览器的IP并转到命令选项卡。在被钩住的域下，有一个**Create Alert Dialogue**的选项。点击它，设置好参数，然后点击**Execute**。检查被钩住的浏览器是否收到了警报提示：![如何做...](img/image_08_023.jpg)
- en: 'Once the script is executed, the victim browser will have an alert-dialog box,
    as shown in the following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本执行后，受害者浏览器将出现一个警报对话框，如下截图所示：
- en: '![How to do it...](img/image_08_024.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_08_024.jpg)'
- en: So yes, it's working. Now there are various modules available in the command
    section. They are separated by colored balls, green, orange, red, and gray. Green
    symbolizes that the command module works against the target and should be invisible
    to the user; orange, the command module works against the target but may be visible
    to the user; gray, the command module is yet to be verified against this target;
    and red, the command module does not work against this target.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的，它正在运行。现在在命令部分有各种模块可用。它们由彩色的球分开，绿色，橙色，红色和灰色。绿色表示命令模块针对目标起作用，并且对用户应该是不可见的；橙色表示命令模块针对目标起作用，但可能对用户可见；灰色表示命令模块尚未针对该目标进行验证；红色表示命令模块不适用于该目标。
- en: Considering that the hooked browser is being operated by an admin for this activity,
    we are going to use the hook to create a user with remote-desktop capability.
    In our environment, we have Internet Explorer running on Windows XP with ActiveX
    enabled. To perform this activity, select the hook of the machine, then go to
    **Commands** | **Module Tree** | **Exploits** | **Local Host** | **ActiveX Command
    Execution**.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 考虑到被钩住的浏览器是由管理员操作的，我们将使用钩来创建具有远程桌面功能的用户。在我们的环境中，我们有Internet Explorer在启用ActiveX的Windows
    XP上运行。要执行此操作，请选择机器的钩，然后转到**Commands** | **Module Tree** | **Exploits** | **Local
    Host** | **ActiveX Command Execution**。
- en: 'In **ActiveX Command Execution**, set the command as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在**ActiveX Command Execution**中，设置命令如下：
- en: '[PRE9]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The option for setting the same can be seen in the following screenshot:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 设置相同的选项如下截图所示：
- en: '![How to do it...](img/image_08_025.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_08_025.jpg)'
- en: 'We will now proceed to attempt a remote desktop connection to the remote system,
    using the `rdesktop` command in Kali. Enter the username, password, and IP to
    connect to the machine:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将尝试使用Kali中的`rdesktop`命令对远程系统进行远程桌面连接。输入用户名、密码和IP以连接到机器：
- en: '[PRE10]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_08_026.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_08_026.jpg)'
- en: We have successfully managed to gain access to the system via a client browser.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功通过客户端浏览器访问系统。
- en: How it works...
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'BeEF uses JavaScript hook.js, which, when accessed by a browser, gives control
    to the BeEF framework. With the hook available, one can use the various functions
    available in the command module. They vary in ranging capabilities, right from
    enumeration to system exploitation, cookie stealing to session stealing, man-in-the-middle
    attacks, and so on. The easiest way the attacker gets the hook is via the XSS
    attack vector, causing them to load an iframe and attach a hook. Hooks can be
    made persistent, even if they browse away from the infected website. This part
    can be done as homework for the reader. The preceding exercise is self-explanatory:
    there are no extra commands involved that need more explanation.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: BeEF使用JavaScript hook.js，当被浏览器访问时，将控制权交给BeEF框架。有了可用的钩，可以使用命令模块中提供的各种功能。它们的能力各不相同，从枚举到系统利用，从窃取cookie到窃取会话，中间人攻击等等。攻击者最容易获得钩的方法是通过XSS攻击向量，导致它们加载一个iframe并附加一个钩。即使他们从感染的网站上浏览离开，钩也可以变得持久。这部分可以作为读者的家庭作业。前面的练习是不言自明的：没有额外需要解释的命令。
- en: There's more...
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: BeEF is a great pen-testing tool when it comes to client-side pen testing. In
    most cases, we demonstrate that XSS is possible. This is the next step, which
    shows how it is possible to root a remote system and steal from the browser via
    a simple XSS and JavaScript. More information can be found on the BeEF framework
    wiki.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: BeEF是一个很棒的客户端渗透测试工具。在大多数情况下，我们演示了XSS的可能性。这是下一步，展示了如何通过简单的XSS和JavaScript对远程系统进行root并从浏览器中窃取。更多信息可以在BeEF框架维基上找到。
- en: Cracking NTLM hashes using rainbow tables
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用彩虹表破解NTLM哈希
- en: For this activity, we will be using **Ophcrack**, along with a small rainbow
    table. Ophcrack is a free Windows password cracker based on rainbow tables. It
    is a very efficient implementation of rainbow tables done by the inventors of
    the method. It comes with a **graphical user interface** (**GUI**) and runs on
    multiple platforms. It is available by default in the Kali Linux distro. This
    recipe will focus on cracking the password using Ophcrack, with the help of rainbow
    tables.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个活动，我们将使用**Ophcrack**，以及一个小的彩虹表。Ophcrack是一个基于彩虹表的免费Windows密码破解工具。这是一种非常有效的彩虹表实现，由该方法的发明者完成。它带有**图形用户界面**（**GUI**）并在多个平台上运行。它默认在Kali
    Linux发行版中可用。本示例将重点介绍如何使用Ophcrack和彩虹表破解密码。
- en: Getting ready
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we are going to crack a Windows XP password. The rainbow table
    `db` can be downloaded from [http://ophcrack.sourceforge.net/tables.php](http://ophcrack.sourceforge.net/tables.php)
    . The Ophcrack tool is available in our Kali Linux Distro.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们将破解Windows XP密码。彩虹表`db`可以从[http://ophcrack.sourceforge.net/tables.php](http://ophcrack.sourceforge.net/tables.php)下载。Ophcrack工具在我们的Kali
    Linux发行版中可用。
- en: How to do it...
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First, download the `tables_xp_free_fast` file from Ophcrack sourceforge tables
    and put it in your Kali machine. Unzip it using the following command:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，从Ophcrack sourceforge表中下载`tables_xp_free_fast`文件，并将其放入您的Kali机器中。使用以下命令解压缩它：
- en: '[PRE11]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_08_027.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_08_027.jpg)'
- en: 'We already have the hash we will use from our compromised XP machine. Now,
    to run the Ophcrack with the preceding rainbow table, use the following command:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经从被入侵的XP机器中获得了要使用的哈希值。现在，要使用先前的彩虹表运行Ophcrack，使用以下命令：
- en: '[PRE12]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'A GUI that looks like the following screenshot will now load. Load your retrieved
    password hash using any of the hash-dumping methods. In this case, pwdump:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将加载一个看起来像以下截图的GUI。使用任何哈希转储方法加载检索到的密码哈希。在这种情况下，使用pwdump：
- en: '![How to do it...](img/image_08_028.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_08_028.jpg)'
- en: Once the password hashes are loaded, the screen will look as follows:![How to
    do it...](img/image_08_029.jpg)
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦密码哈希加载完成，屏幕将如下所示：![如何操作...](img/image_08_029.jpg)
- en: Click on **Tables**, select the **XP free fast** table, click on **Install**,
    and browse to the path where we downloaded the rainbow-table file from ophcrack:![How
    to do it...](img/image_08_030.jpg)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Tables**，选择**XP free fast**表，点击**Install**，并浏览到我们从ophcrack下载彩虹表文件的路径：![如何操作...](img/image_08_030.jpg)
- en: Now we click on a crack option available in the GUI and the cracking will begin:![How
    to do it...](img/image_08_031.jpg)
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们点击GUI中的破解选项，破解将开始：![如何操作...](img/image_08_031.jpg)
- en: As we can see, almost midway, we have managed to find a commonly used password
    using Ophcrack, with the help of the rainbow tables.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，几乎在中途，我们已经成功使用Ophcrack找到了一个常用密码，借助彩虹表的帮助。
- en: How it works...
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The tool is pretty much self-explanatory and works flawlessly without any trouble.
    It uses our found hashes' NT/LM and matches them with the rainbow table provided.
    When the hashes match, the rainbow table looks up the corresponding name that
    caused the hash and we end up getting our value in clear text.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具非常易于理解，可以无故障地运行。它使用我们找到的哈希的NT/LM并将它们与提供的彩虹表进行匹配。当哈希匹配时，彩虹表会查找导致哈希的相应名称，我们最终以明文形式获得我们的值。
- en: There's more...
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Here we have demonstrated using the smallest available size of rainbow table.
    The size of rainbow tables can range from 300 MB to 3 TB; plus, a premium account
    of Ophcrack tables can result in huge sizes of rainbow tables. This can be checked
    out on their previously shared sourceforge link.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们演示了使用最小可用大小的彩虹表。彩虹表的大小可以从300 MB到3 TB不等；此外，Ophcrack表的高级账户可能会导致巨大的彩虹表大小。这可以在他们之前分享的sourceforge链接上查看。
