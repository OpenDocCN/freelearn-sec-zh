- en: Visualizing with Armitage
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Armitage进行可视化
- en: We covered how Metasploit can help law enforcement agencies in the previous
    chapter. Let's continue with a great tool that can not only speed up exploitation
    but also provide an extensive red teaming environment for the testing teams.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们介绍了Metasploit如何帮助执法机构。让我们继续介绍一个不仅可以加快渗透速度，还可以为测试团队提供广泛的红队环境的强大工具。
- en: '**Armitage** is a GUI tool that acts as an attack manager for Metasploit. Armitage
    visualizes Metasploit operations and recommends exploits as well. Armitage is
    capable of providing shared access and team management to Metasploit.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**Armitage**是一个GUI工具，作为Metasploit的攻击管理器。Armitage可视化Metasploit操作并推荐利用。Armitage能够为Metasploit提供共享访问和团队管理。'
- en: In this chapter, we will look at Armitage and its features. We will also look
    at how we can conduct penetration testing with this GUI-enabled tool for Metasploit.
    In the later half of this chapter, we will work on Cortana scripting for Armitage.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍Armitage及其功能。我们还将看看如何使用这个支持GUI的工具进行Metasploit的渗透测试。在本章的后半部分，我们将介绍Armitage的Cortana脚本。
- en: 'Throughout this chapter, we will cover the following key points:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下关键点：
- en: Penetration testing with Armitage
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Armitage进行渗透测试
- en: Scanning networks and host management
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扫描网络和主机管理
- en: Post-exploitation with Armitage
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Armitage进行后渗透
- en: Red teaming using the team server
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用团队服务器进行红队行动
- en: The basics of Cortana scripting
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cortana脚本的基础知识
- en: Attacking with Cortana scripts in Armitage
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Armitage中的Cortana脚本进行攻击
- en: So, let's begin our journey of penetration testing with this great visual interface.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们开始使用这个出色的可视化界面进行渗透测试之旅。
- en: The fundamentals of Armitage
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Armitage的基础知识
- en: Armitage is an attack manager tool that graphically automates Metasploit. Armitage
    is built in Java, and it was created by Raphael Mudge. It is a cross-platform
    tool, and it can run on both Linux and Windows OS.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Armitage是一个图形化自动化Metasploit的攻击管理工具。Armitage是用Java构建的，由Raphael Mudge创建。它是一个跨平台工具，可以在Linux和Windows操作系统上运行。
- en: Getting started
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始
- en: 'Throughout this chapter, we will use Armitage in Kali Linux. To start Armitage,
    perform the following steps:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将在Kali Linux中使用Armitage。要启动Armitage，请执行以下步骤：
- en: 'Open a Terminal and type in the `armitage` command, as shown in the following
    screenshot:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，输入`armitage`命令，如下截图所示：
- en: '![](img/af461320-7762-4253-82d8-b5b32a9b3b46.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af461320-7762-4253-82d8-b5b32a9b3b46.png)'
- en: Click on the Connect button in the pop-up box to set up a connection.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击弹出框中的连接按钮以建立连接。
- en: 'For the `armitage` command to run, Metasploit''s **Remote Procedure Call**
    (**RPC**) server should be running. As soon as we click on the Connect button
    in the previous pop-up, a new pop-up will occur and ask if we want to start Metasploit''s
    RPC server. Click on Yes, as shown in the following screenshot:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行`armitage`命令，Metasploit的**远程过程调用**（**RPC**）服务器应该在运行中。当我们点击上一个弹出框中的连接按钮时，会出现一个新的弹出框询问我们是否要启动Metasploit的RPC服务器。如下截图所示，点击Yes：
- en: '![](img/3af11f8c-1231-4443-b981-641c756dba75.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af11f8c-1231-4443-b981-641c756dba75.png)'
- en: 'It takes a little time to get the Metasploit RPC server up and running. During
    this process, we will see messages such as Connection refused time and again.
    These errors are due to Armitage keeping checks on connection and testing if it''s
    established or not. We can see such errors, as shown in the following screenshot:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Metasploit RPC服务器需要一点时间。在此过程中，我们会看到诸如Connection refused等消息。这些错误是由于Armitage对连接进行检查并测试是否已建立。我们可以看到这样的错误，如下截图所示：
- en: '![](img/c54a8575-b5b1-4281-b91c-50753df51589.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c54a8575-b5b1-4281-b91c-50753df51589.png)'
- en: 'Some of the essential points to keep in mind while starting Armitage are as
    follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用Armitage时需要牢记的一些关键点如下：
- en: Make sure that you are the root user
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你是root用户
- en: For Kali Linux users, if Armitage isn't installed, install it by using the `apt-get
    install armitage` command
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Kali Linux用户，如果未安装Armitage，请使用`apt-get install armitage`命令进行安装
- en: In cases where Armitage fails to find the database file, make sure that the
    Metasploit database is initialized and running. The database can be initialized
    using the `msfdb init` command and started with the `msfdb start` command.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Armitage无法找到数据库文件，请确保Metasploit数据库已初始化并正在运行。可以使用`msfdb init`命令初始化数据库，并使用`msfdb
    start`命令启动数据库。
- en: Touring the user interface
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览用户界面
- en: 'If a connection is established correctly, we will see the Armitage interface
    panel. It will look similar to the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果连接正确建立，我们将看到Armitage界面面板。它将类似于以下截图：
- en: '![](img/0f986f67-a2cd-4917-8c61-c50fb92fdfaa.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f986f67-a2cd-4917-8c61-c50fb92fdfaa.png)'
- en: 'Armitage''s interface is straightforward, and it primarily contains three different
    panes, as marked in the preceding screenshot. Let''s see what these three panes
    are supposed to do:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Armitage的界面很简单，主要包含三个不同的窗格，如前面的截图所示。让我们看看这三个窗格应该做什么：
- en: 'The first pane from the top left contains references to all the various modules
    offered by Metasploit: auxiliary, exploit, payload, and post. We can browse and
    double-click a module to launch it instantly. Also, just following the first pane,
    there lies a small input box that we can use to search for the modules immediately
    without exploring the hierarchy.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左上角的第一个窗格包含了Metasploit提供的各种模块的引用：辅助、利用、有效载荷和后期。我们可以浏览并双击一个模块以立即启动它。此外，在第一个窗格之后，有一个小的输入框，我们可以使用它立即搜索模块，而不必探索层次结构。
- en: The second pane shows all the hosts that are present in the network. This pane
    generally displays the hosts in a graphical format. For example, it will display
    systems running Windows as monitors with a Windows logo. Similarly, a Linux logo
    for Linux and other logos are displayed for other systems running on MAC and so
    on. It will also show printers with a printer symbol, which is an excellent feature
    of Armitage as it helps us recognize the devices on the network.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个窗格显示了网络中存在的所有主机。例如，它将以图形格式显示运行Windows的系统为监视器，并显示Windows标志。同样，Linux系统显示Linux标志，其他系统显示其他标志。它还会显示打印机的打印机符号，这是Armitage的一个很好的功能，因为它帮助我们识别网络上的设备。
- en: The third pane shows all the operations performed, the post-exploitation process,
    scanning process, Metasploit's console, and results from the post-exploitation
    modules.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个窗格显示了所有操作、后渗透过程、扫描过程、Metasploit的控制台以及后渗透模块的结果。
- en: Managing the workspace
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理工作区
- en: As we have already seen in the previous chapters, workspaces are used to maintain
    various attack profiles without merging the results. Suppose that we are working
    on a single range and, for some reason, we need to stop our testing and test another
    range. In this instance, we would create a new workspace and use that workspace
    to test the new range to keep the results clean and organized. However, after
    we complete our work in this workspace, we can switch to a different workspace.
    Switching workspaces will load all the relevant data from a workspace automatically.
    This feature will help keep the data separate for all the scans made, preventing
    data from being merged from various scans.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在之前的章节中已经看到的，工作区用于维护各种攻击配置文件，而不会合并结果。假设我们正在处理一个范围，由于某种原因，我们需要停止测试并测试另一个范围。在这种情况下，我们将创建一个新的工作区，并使用该工作区来测试新的范围，以保持结果清晰和有组织。然而，在我们完成这个工作区的工作后，我们可以切换到另一个工作区。切换工作区将自动加载工作区的所有相关数据。这个功能将帮助保持所有扫描的数据分开，防止来自各种扫描的数据合并。
- en: 'To create a new workspace, navigate to the Workspaces tab and click on Manage.
    This will present us with the Workspaces tab, as shown in the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的工作区，导航到工作区选项卡并点击管理。这将呈现给我们工作区选项卡，如下面的截图所示：
- en: '![](img/7d4163ea-5193-4487-845e-c10de2c62e72.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7d4163ea-5193-4487-845e-c10de2c62e72.png)'
- en: A new tab will open in the third pane of Armitage, which will help display all
    the information about workspaces. We will not see anything listed here because
    we have not created any workspaces yet.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在Armitage的第三个窗格中将打开一个新选项卡，用于显示有关工作区的所有信息。我们在这里看不到任何列出的东西，因为我们还没有创建任何工作区。
- en: 'So, let''s create a workspace by clicking on Add, as shown in the following
    screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们通过点击添加来创建一个工作区，如下面的截图所示：
- en: '![](img/9c2cc7cc-1dfc-4a90-941d-59b9a89450ca.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9c2cc7cc-1dfc-4a90-941d-59b9a89450ca.png)'
- en: 'We can add workspace with any name we want. Suppose that we added an internal
    range of `192.168.10.0/24`. Let''s see what the Workspaces tab looks like after
    adding the range:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用任何想要的名称添加工作区。假设我们添加了一个内部范围`192.168.10.0/24`。让我们看看在添加范围后工作区选项卡是什么样子的：
- en: '![](img/9b6030d1-c559-4fca-96e0-55063fceb2db.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9b6030d1-c559-4fca-96e0-55063fceb2db.png)'
- en: We can switch between workspaces at any time by selecting the desired workspace
    and clicking on the Activate button.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以随时在所需的工作区之间切换，并点击激活按钮。
- en: Scanning networks and host management
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扫描网络和主机管理
- en: Armitage has a separate tab named Hosts to manage and scan hosts. We can import
    hosts to Armitage via file by clicking on Import Host from the Hosts tab, or we
    can manually add a host by clicking on the Add Host option from the Hosts tab.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Armitage有一个名为Hosts的单独选项卡，用于管理和扫描主机。我们可以通过在Hosts选项卡上点击从文件导入主机来将主机导入到Armitage中，或者我们可以通过在Hosts选项卡上点击添加主机选项来手动添加主机。
- en: 'Armitage also provides options to scan for hosts. There are two types of scan:
    **Nmap scan** and **MSF scan**. MSF scan makes use of various port and service-scanning
    modules in Metasploit, whereas the Nmap scan makes use of the popular port scanner
    tool, which is **Network Mapper** (**Nmap**).'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Armitage还提供了扫描主机的选项。有两种类型的扫描：Nmap扫描和MSF扫描。MSF扫描利用Metasploit中的各种端口和服务扫描模块，而Nmap扫描利用流行的端口扫描工具**Network
    Mapper**（Nmap）。
- en: 'Let''s scan the network by selecting the MSF scan option from the Hosts tab.
    However, after clicking on MSF scan, Armitage will display a pop-up that asks
    for the target range, as shown in the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过从Hosts选项卡中选择MSF扫描选项来扫描网络。但是，在点击MSF扫描后，Armitage将显示一个弹出窗口，询问目标范围，如下面的截图所示：
- en: '![](img/8c5d2d7b-8426-4b0c-95b5-479d2a995954.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c5d2d7b-8426-4b0c-95b5-479d2a995954.png)'
- en: 'As soon as we enter the target range, Metasploit will start scanning the network
    to identify ports, services, and operating systems. We can view the scan details
    in the third pane of the interface as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们输入目标范围，Metasploit将开始扫描网络以识别端口、服务和操作系统。我们可以在界面的第三个窗格中查看扫描详情，如下所示：
- en: '![](img/b0d56ce7-eac8-4881-97b4-88c6df9d5661.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b0d56ce7-eac8-4881-97b4-88c6df9d5661.png)'
- en: 'After the scan has completed, every host on the target network will be present
    in the second pane of the interface in the form of icons representing the operating
    system of the host, as shown in the following screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描完成后，目标网络上的每个主机都将以图标的形式出现在界面的第二个窗格中，代表主机的操作系统，如下面的截图所示：
- en: '![](img/626f0772-2489-41ea-8c46-8196794eb533.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/626f0772-2489-41ea-8c46-8196794eb533.png)'
- en: In the preceding screenshot, we have a Windows Server 2008, Windows Server 2012,
    and a Windows 10 system. Let's see what services are running on the target.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中，我们有一个Windows Server 2008，一个Windows Server 2012和一个Windows 10系统。让我们看看目标上运行着什么服务。
- en: Modeling out vulnerabilities
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建模漏洞
- en: 'Let''s see what services are running on the hosts in the target range by right-clicking
    on the desired host and clicking on Services. The results should look similar
    to the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过右键单击所需主机并点击服务，让我们看看目标范围内主机上运行着什么服务。结果应该类似于下面的截图：
- en: '![](img/f4a9346c-4753-4b6b-b518-89f3cf00cd6e.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f4a9346c-4753-4b6b-b518-89f3cf00cd6e.png)'
- en: We can see many services running on the `192.168.10.109` host, such as Microsoft
    IIS httpd 7.0, Microsoft Windows RPC, HttpFileServer httpd 2.3, and much more.
    Let's target one of these services by instructing Armitage to find a matching
    exploit for these services.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`192.168.10.109`主机上运行着许多服务，比如Microsoft IIS httpd 7.0、Microsoft Windows
    RPC、HttpFileServer httpd 2.3等等。让我们指示Armitage为这些服务找到匹配的漏洞。
- en: Finding the match
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 寻找匹配
- en: 'We can find the matching exploits for a target by selecting a host and then
    browsing the Attacks tab and clicking on the Find Attack option. The Find Attack
    option will match the exploit database against the services running on the target
    host. Armitage generates a pop-up after matching all of the services against the
    exploit database, as shown in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过选择一个主机，然后浏览Attacks选项卡并点击Find Attack来找到目标的匹配攻击。Find Attack选项将根据目标主机上运行的服务与攻击数据库进行匹配。Armitage在将所有服务与攻击数据库进行匹配后生成一个弹窗，如下截图所示：
- en: '![](img/1722499f-f824-4a69-ac44-6306fce700f9.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1722499f-f824-4a69-ac44-6306fce700f9.png)'
- en: After we click on OK, we will be able to notice that whenever we right-click
    on a host, a new option named Attack is available on the menu. The Attack submenu
    will display all the matching exploit modules that we can launch at the target
    host.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 点击OK后，我们会注意到每当右键单击主机时，菜单上会出现一个名为Attack的新选项。Attack子菜单将显示我们可以对目标主机发动的所有匹配的攻击模块。
- en: Exploitation with Armitage
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Armitage进行攻击
- en: 'After the Attack menu becomes available to a host, we are all set to exploit
    the target. Let''s target the HttpFileServer httpd 2.3 with the Rejetto HTTPFileServer
    Remote Command Execution exploit from the Attack menu. Clicking on the Exploit
    option will present a new pop-up that displays all the settings. Let''s set all
    the required options as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当攻击菜单对主机可用时，我们就可以开始利用目标了。让我们从攻击菜单中选择使用Rejetto HTTPFileServer远程命令执行漏洞来攻击HttpFileServer
    httpd 2.3。点击Exploit选项将弹出一个新的弹窗显示所有设置。让我们按照以下设置所有必需的选项：
- en: '![](img/94a67f31-b4dc-4122-9b48-118079587696.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/94a67f31-b4dc-4122-9b48-118079587696.png)'
- en: 'After setting all the options, click on Launch to run the exploit module against
    the target. We will be able to see exploitation being carried out on the target
    in the third pane of the interface after we launch the `exploit` module, as shown
    in the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好所有选项后，点击Launch来运行漏洞模块对目标进行攻击。在我们启动`exploit`模块后，我们将能够在界面的第三个窗格中看到对目标的利用正在进行，如下截图所示：
- en: '![](img/0b91d639-a6a6-437b-aea1-ff0bdad70c9c.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b91d639-a6a6-437b-aea1-ff0bdad70c9c.png)'
- en: We can see Meterpreter launching, which denotes the successful exploitation
    of the target. Also, the icon of the target host changes to the possessed system
    icon with red lightning.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到Meterpreter正在启动，这表示成功利用了目标。此外，目标主机的图标也会变成带有红色闪电的被控制系统图标。
- en: Post-exploitation with Armitage
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Armitage进行后渗透
- en: 'Armitage makes post-exploitation as easy as clicking on a button. To execute
    post-exploitation modules, right-click on the exploited host and choose Meterpreter
    4 as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Armitage使得后渗透变得如同点击按钮一样简单。要执行后渗透模块，右键单击被利用的主机，然后选择Meterpreter 4，如下所示：
- en: '![](img/492fcd22-b7d2-4c85-831d-0b0c8ab20dfc.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/492fcd22-b7d2-4c85-831d-0b0c8ab20dfc.png)'
- en: Choosing Meterpreter will present all the post-exploitation modules in sections.
    If we want to elevate privileges or gain system-level access, we will navigate
    to the Access submenu and click on the appropriate button, depending on our requirements.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 选择Meterpreter将在各个部分中显示所有后渗透模块。如果我们想提升权限或获得系统级访问权限，我们将导航到Access子菜单，并根据我们的需求点击适当的按钮。
- en: The Interact submenu will provide options for getting a command prompt, another
    Meterpreter, and so on. The Explore submenu will offer options such as Browse
    Files, Show Processes, Log Keystrokes, Screenshot, Webcam Shot, and Post Modules,
    which are used to launch other post-exploitation modules that are not present
    in this submenu.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 与Interact子菜单提供获取命令提示符、另一个Meterpreter等选项。Explore子菜单提供浏览文件、显示进程、记录按键、截图、摄像头拍摄和后模块等选项，用于启动不在此子菜单中的其他后渗透模块。
- en: 'This is shown in the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示：
- en: '![](img/4256f110-7ed2-4bea-bffb-ecd9fd036212.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4256f110-7ed2-4bea-bffb-ecd9fd036212.png)'
- en: 'Let''s run a simple post-exploitation module by clicking on Browse Files, as
    shown in the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 点击Browse Files来运行一个简单的后渗透模块，如下截图所示：
- en: '![](img/9082c863-794d-4ae1-bd6a-578ca07d5ed3.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9082c863-794d-4ae1-bd6a-578ca07d5ed3.png)'
- en: We can easily upload, download, and view any files we want on the target system
    by clicking on the appropriate button. This is the beauty of Armitage; it keeps
    commands far away and presents everything in a graphical format.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击适当的按钮，我们可以轻松地在目标系统上上传、下载和查看任何文件。这就是Armitage的美妙之处；它将命令远离我们，并以图形格式呈现一切。
- en: This concludes our remote-exploitation attack with Armitage.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了我们使用Armitage进行远程渗透攻击。
- en: Red teaming with Armitage team server
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Armitage团队服务器进行红队行动
- en: 'For a large penetration testing environment, red teaming is often required,
    where a group of penetration testers can work on a project collectively so that
    better results can be yielded. Armitage offers a team server that can be used
    to share operations with members of the penetration testing team efficiently.
    We can quickly start a team server using the `teamserver` command followed by
    the accessible IP address and a password of our choice, as shown in the following
    screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大型渗透测试环境，通常需要进行红队行动，即一组渗透测试人员可以共同开展项目，以获得更好的结果。Armitage提供了一个团队服务器，可以用于与渗透测试团队的成员高效共享操作。我们可以使用`teamserver`命令快速启动一个团队服务器，后面跟上可访问的IP地址和我们选择的密码，如下截图所示：
- en: '![](img/6b08fc56-4dbb-4220-a073-a4c5a03e27f4.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b08fc56-4dbb-4220-a073-a4c5a03e27f4.png)'
- en: 'We can see that we have started an instance of the team server on IP address
    `192.168.10.107` and used the password hackers for authentication. We can see
    that on successful initialization, we have the credential details that we need
    to spread between the team members. Now, let''s connect to this team server by
    initializing Armitage from the command line using the `armitage` command and typing
    in the connection details, as shown in the following screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们已经在IP地址`192.168.10.107`上启动了一个团队服务器的实例，并使用密码hackers进行身份验证。我们可以看到在成功初始化后，我们有了需要在团队成员之间传播的凭据详细信息。现在，让我们通过使用`armitage`命令从命令行初始化Armitage并输入连接详细信息来连接到这个团队服务器，如下面的屏幕截图所示：
- en: '![](img/c4289974-cba1-4f36-b98a-41b27b431e19.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4289974-cba1-4f36-b98a-41b27b431e19.png)'
- en: 'As soon as a successful connection is established, we will see a screen similar
    to the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦成功建立连接，我们将看到一个类似于以下的屏幕：
- en: '![](img/65136d4b-80ba-4c61-a52f-7ff9ce8ae8a3.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/65136d4b-80ba-4c61-a52f-7ff9ce8ae8a3.png)'
- en: 'We can see that the fingerprint is identical to the one presented by our team
    server. Let''s choose Yes to proceed:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到指纹与我们的团队服务器呈现的指纹相同。让我们选择是以继续：
- en: '![](img/b5ea2553-e86a-400b-b527-c79b4759abd3.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b5ea2553-e86a-400b-b527-c79b4759abd3.png)'
- en: 'We can select a nickname to join the team server. Let''s press OK to get connected:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以选择一个昵称加入团队服务器。让我们按下OK进行连接：
- en: '![](img/a71b0b64-4dcf-4342-a621-b3164e31ee8a.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a71b0b64-4dcf-4342-a621-b3164e31ee8a.png)'
- en: 'We can see that we are successfully connected to the team server from our local
    instance of Armitage. Also, all the connected users can chat with each other through
    the event log window. Consider that we have another user who joined the team server:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们已经成功从我们的本地Armitage实例连接到团队服务器。此外，所有连接的用户都可以通过事件日志窗口互相聊天。假设我们有另一个用户加入了团队服务器：
- en: '![](img/6efadf21-30e8-429c-99c5-1eb085286862.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6efadf21-30e8-429c-99c5-1eb085286862.png)'
- en: 'We can see two different users talking to each other and connected from their
    respective instances. Let''s initialize a port scan and see what happens:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到两个不同的用户互相交谈，并且从各自的实例连接。让我们初始化一个端口扫描，看看会发生什么：
- en: '![](img/74ce3220-9e8d-4767-97d8-95f3aecf8038.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/74ce3220-9e8d-4767-97d8-95f3aecf8038.png)'
- en: 'We can see that the user `Nipun` started a portscan, and it was immediately
    populated for the other user as well, and he can view the targets. Consider that `Nipun`
    adds a host to the test and exploits it:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到用户`Nipun`开始了一个端口扫描，并且立即为另一个用户填充了，他可以查看目标。考虑到`Nipun`添加了一个主机进行测试并利用它：
- en: '![](img/b8bb8e67-ee1b-4903-90be-929bedbb458a.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b8bb8e67-ee1b-4903-90be-929bedbb458a.png)'
- en: 'We can see that the user `Kislay` is also able to view all the activity of
    the scan. However, for user `Kislay` to access the Meterpreter, he needs to shift
    to the console space and type in the `sessions` command followed by the identifier,
    as shown in the following screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到用户`Kislay`也能够查看扫描的所有活动。但是，要让用户`Kislay`访问Meterpreter，他需要切换到控制台空间，并输入`sessions`命令，然后是标识符，如下面的屏幕截图所示：
- en: '![](img/8218027f-00c6-475a-829b-0ae2a630698d.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8218027f-00c6-475a-829b-0ae2a630698d.png)'
- en: We can see that Armitage has enabled us to work in a team environment much more
    efficiently than using a single instance of Metasploit. Let's see how we can script
    Armitage in the next section.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，Armitage使我们能够以比使用单个Metasploit实例更高效地在团队环境中工作。让我们在下一节中看看如何编写Armitage脚本。
- en: Scripting Armitage
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写Armitage脚本
- en: Cortana is a scripting language that is used to create attack vectors in Armitage.
    Penetration testers use Cortana for red teaming and virtually cloning attack vectors
    so that they act like bots. However, a red team is an independent group that challenges
    an organization to improve its effectiveness and security.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Cortana是一种用于在Armitage中创建攻击向量的脚本语言。渗透测试人员使用Cortana进行红队行动，并虚拟克隆攻击向量，使其像机器人一样行动。然而，红队是一个独立的团队，挑战组织以提高其效率和安全性。
- en: Cortana uses Metasploit's remote procedure client by making use of a scripting
    language. It provides flexibility in controlling Metasploit's operations and managing
    the database automatically.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Cortana使用Metasploit的远程过程客户端，利用一种脚本语言。它提供了在控制Metasploit的操作和自动管理数据库方面的灵活性。
- en: Also, Cortana scripts automate the responses of the penetration tester when
    a particular event occurs. Suppose we are performing a penetration test on a network
    of 100 systems, where 29 systems run on Windows Server 2012 and the other system
    run on the Linux OS, and we need a mechanism that will automatically exploit every
    Windows Server 2012 system, which is running HttpFileServer httpd 2.3 on port
    `8081` with the Rejetto HTTPFileServer Remote Command Execution exploit.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Cortana脚本可以在特定事件发生时自动化渗透测试人员的响应。假设我们正在对一个包含100个系统的网络进行渗透测试，其中29个系统运行Windows
    Server 2012，另一个系统运行Linux操作系统，我们需要一个机制，将自动利用每个运行HttpFileServer httpd 2.3的Windows
    Server 2012系统上的端口`8081`的Rejetto HTTPFileServer远程命令执行漏洞。
- en: We can quickly develop a simple script that will automate this entire task and
    save us a great deal of time. A script to automate this task will exploit each
    system as soon as they appear on the network with the `rejetto_hfs_exec` exploit,
    and it will perform predestinated post-exploitation functions on them too.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以快速开发一个简单的脚本，将自动化整个任务并节省大量时间。一个用于自动化此任务的脚本将利用`rejetto_hfs_exec`漏洞在每个系统上执行预定的后渗透功能。
- en: The fundamentals of Cortana
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cortana的基本原理
- en: 'Scripting a basic attack with Cortana will help us understand Cortana with
    a much wider approach. So, let''s see an example script that automates the exploitation
    on port `8081` for a Windows OS:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Cortana编写基本攻击将帮助我们更广泛地了解Cortana。因此，让我们看一个自动化在端口`8081`上对Windows操作系统进行利用的示例脚本：
- en: '[PRE0]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding script will execute when an Nmap or MSF scan finds port `8081`
    open. The script will check whether the target is running on a Windows 7 system
    upon which Cortana will automatically attack the host with the `rejetto_hfs_exec`
    exploit on port `8081`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当Nmap或MSF扫描发现端口`8081`开放时，前面的脚本将执行。脚本将检查目标是否在运行Windows 7系统，Cortana将自动攻击端口`8081`上的主机，使用`rejetto_hfs_exec`漏洞利用。
- en: In the preceding script, `$1` specifies the IP address of the host. `print_ln`
    prints out the strings and variables. `host_os` is a function in Cortana that
    returns the operating system of the host. The `exploit` function launches an exploit
    module at the address specified by the `$1` parameter, and `%` signifies options
    that it can be set for an exploit in case a service is running on a different
    port or requires additional details. `service_add_8081` specifies an event that
    is to be triggered when port `8081` is found open on a particular client.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的脚本中，`$1`指定了主机的IP地址。`print_ln`打印字符串和变量。`host_os`是Cortana中返回主机操作系统的函数。`exploit`函数在由`$1`参数指定的地址上启动一个利用模块，`%`表示可以为利用设置的选项，以防服务在不同端口运行或需要额外的详细信息。`service_add_8081`指定了在特定客户端上发现端口`8081`开放时要触发的事件。
- en: 'Let''s save the earlier-mentioned script and load this script into Armitage
    by navigating to the Armitage tab and clicking on Scripts:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们保存前面提到的脚本，并通过导航到Armitage选项卡并点击脚本来加载这个脚本到Armitage中：
- en: '![](img/584bf0a6-cd82-4782-bde6-2de4eae73c52.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/584bf0a6-cd82-4782-bde6-2de4eae73c52.png)'
- en: 'To run the script against a target, perform the following steps:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要针对目标运行脚本，请执行以下步骤：
- en: 'Click on the Load button to load a Cortana script into Armitage:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击加载按钮将Cortana脚本加载到Armitage中：
- en: '![](img/77a4eb4f-ef34-451f-9395-527561f9b591.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/77a4eb4f-ef34-451f-9395-527561f9b591.png)'
- en: 'Select the script and click on Open. The action will load the script into Armitage
    forever:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择脚本，然后点击打开。该操作将永久加载脚本到Armitage中：
- en: '![](img/140a0537-2c19-461c-a5f3-6b0ae464a308.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/140a0537-2c19-461c-a5f3-6b0ae464a308.png)'
- en: Move on to the Cortana console and type the `help` command to list the various
    options that Cortana can make use of while dealing with scripts.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到Cortana控制台，输入`help`命令以列出Cortana在处理脚本时可以使用的各种选项。
- en: 'Next, to see the various operations that are performed when a Cortana script
    run, we will use the `logon` command followed by the name of the script. The `logon`
    command will provide logging features to a script and will log every operation
    performed by the script, as shown in the following screenshot:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为了查看Cortana脚本运行时执行的各种操作，我们将使用`logon`命令，后跟脚本的名称。`logon`命令将为脚本提供日志记录功能，并记录脚本执行的每个操作，如下图所示：
- en: '![](img/f3932965-f2b2-4e18-9458-22c372f6d9f8.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f3932965-f2b2-4e18-9458-22c372f6d9f8.png)'
- en: Now, let's perform an intense scan of the target by browsing the Hosts tab and
    selecting Intense Scan from the Nmap submenu.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们通过浏览主机选项卡并从Nmap子菜单中选择强烈扫描来对目标进行强烈扫描。
- en: 'As we can see, we found a host with port `8081` open. Let''s move back on to
    our `Cortana` console and see whether some activity has occurred:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如我们所看到的，我们发现一个开放端口为`8081`的主机。让我们回到我们的`Cortana`控制台，看看是否发生了一些活动：
- en: '![](img/4b097d26-cb9d-4d41-b308-307cecae4d34.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4b097d26-cb9d-4d41-b308-307cecae4d34.png)'
- en: Bang! Cortana has already taken over the host by launching the exploit automatically
    on the target host.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 砰！Cortana已经通过在目标主机上自动启动漏洞利用程序来接管了主机。
- en: As we can see, Cortana made penetration testing very easy for us by performing
    the operations automatically. In the next few sections, we will look at how we
    can automate post-exploitation and handle further operations of Metasploit with
    Cortana.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，Cortana通过自动执行操作为我们简化了渗透测试。在接下来的几节中，我们将看看如何使用Cortana自动化后期利用并处理Metasploit的进一步操作。
- en: Controlling Metasploit
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制Metasploit
- en: 'Cortana controls Metasploit functions very well. We can send any command to
    Metasploit using Cortana. Let''s see an example script to help us understand more
    about controlling Metasploit functions from Cortana:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Cortana非常好地控制了Metasploit的功能。我们可以使用Cortana向Metasploit发送任何命令。让我们看一个示例脚本，以帮助我们更多地了解如何从Cortana控制Metasploit的功能：
- en: '[PRE1]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the preceding script, the `cmd_async` command sends the `hosts` and `services`
    commands to Metasploit and ensures that they are executed. Also, the `console_*`
    functions are used to print the output of the command sent by `cmd_async`. Metasploit
    will execute these commands; however, in order to print the output, we need to
    define the `console_*` function. Also, `$3` is the argument that holds the output
    of the commands executed by Metasploit. After loading the `ready.cna` script,
    let''s open the Cortana console to view the output:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的脚本中，`cmd_async`命令将`hosts`和`services`命令发送到Metasploit，并确保它们被执行。此外，`console_*`函数用于打印由`cmd_async`发送的命令的输出。Metasploit将执行这些命令；但是，为了打印输出，我们需要定义`console_*`函数。此外，`$3`是保存由Metasploit执行的命令的输出的参数。加载`ready.cna`脚本后，让我们打开Cortana控制台查看输出：
- en: '![](img/217527e6-be8f-4d29-bce9-fc01ff464459.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/217527e6-be8f-4d29-bce9-fc01ff464459.png)'
- en: Clearly, the output of the commands is shown in the preceding screenshot, which
    concludes our current discussion. However, more information on Cortana scripts
    and controlling Metasploit through Armitage can be gained at: [http://www.fastandeasyhacking.com/download/cortana/cortana_tutorial.pdf](http://www.fastandeasyhacking.com/download/cortana/cortana_tutorial.pdf).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，命令的输出显示在前面的截图中，这结束了我们目前的讨论。但是，有关Cortana脚本和通过Armitage控制Metasploit的更多信息可以在以下网址获得：[http://www.fastandeasyhacking.com/download/cortana/cortana_tutorial.pdf](http://www.fastandeasyhacking.com/download/cortana/cortana_tutorial.pdf)。
- en: Post-exploitation with Cortana
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Cortana进行后期利用
- en: 'Post-exploitation with Cortana is also simple. Cortana''s built-in functions
    can make post-exploitation easy to tackle. Let''s understand this using the following
    example script:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Cortana的后期利用也很简单。Cortana的内置功能可以使后期利用变得容易。让我们通过以下示例脚本来理解这一点：
- en: '[PRE2]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding script, we used a function named `heartbeat_15s`. This function
    repeats its execution every `15` seconds. Hence, it is called a **heart beat**
    function.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的脚本中，我们使用了一个名为`heartbeat_15s`的函数。这个函数每`15`秒重复执行一次。因此，它被称为**心跳**函数。
- en: The `local` function will denote that `$sid` is local to the current function.
    The next `foreach` statement is a loop that hops over every open session. The
    `if` statement will check whether the session type is a Windows Meterpreter and
    that it is ready to interact and accept commands.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`local`函数将表示`$sid`是当前函数的本地变量。下一个`foreach`语句是一个循环，遍历每个打开的会话。`if`语句将检查会话类型是否为Windows
    Meterpreter，并且它已准备好进行交互和接受命令。'
- en: The `m_cmd` function sends the command to the Meterpreter session with parameters
    such as `$sid,` which is the session ID, and the command to execute. Next, we
    define a function with `meterpreter_*`, where `*` denotes the command sent to
    the Meterpreter session. This function will print the output of the `sent` command,
    as we did in the previous exercise for `console_hosts` and `console_services`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`m_cmd`函数将使用参数`$sid`发送命令到Meterpreter会话，其中`$sid`是会话ID，以及要执行的命令。接下来，我们定义一个以`meterpreter_*`开头的函数，其中`*`表示发送到Meterpreter会话的命令。此函数将打印`sent`命令的输出，就像我们在上一个练习中为`console_hosts`和`console_services`所做的那样。'
- en: 'Let''s run this script and analyze the results, as shown in the following screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行这个脚本并分析结果，如下面的屏幕截图所示：
- en: '![](img/7a34370a-ad60-44c1-9130-df5be248b91e.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7a34370a-ad60-44c1-9130-df5be248b91e.png)'
- en: As soon as we load the script, it will display the user ID and the current process
    ID of the target after every `15` seconds.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们加载脚本，它将在每`15`秒后显示目标的用户ID和当前进程ID。
- en: For further information on post-exploitation, scripts, and functions in Cortana,
    refer to [http://www.fastandeasyhacking.com/download/cortana/cortana_tutorial.pdf](http://www.fastandeasyhacking.com/download/cortana/cortana_tutorial.pdf).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Cortana中的后期利用、脚本和函数的更多信息，请参阅[http://www.fastandeasyhacking.com/download/cortana/cortana_tutorial.pdf](http://www.fastandeasyhacking.com/download/cortana/cortana_tutorial.pdf)。
- en: Building a custom menu in Cortana
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Cortana中构建自定义菜单
- en: 'Cortana also delivers an exceptional output when it comes to building custom
    pop-up menus that attach to a host after getting the Meterpreter session and other
    types of session as well. Let''s build a custom key logger menu with Cortana and
    understand its workings by analyzing the following script:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Cortana在构建自定义弹出菜单方面也提供了出色的输出，这些菜单在获取Meterpreter会话和其他类型的会话后附加到主机上。让我们使用Cortana构建一个自定义键盘记录器菜单，并通过分析以下脚本来了解其工作原理：
- en: '[PRE3]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding example shows the creation of a pop-up in the Meterpreter submenu.
    However, this pop-up will only be available if we are able to exploit the target
    host and get a Meterpreter shell successfully.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例显示了在Meterpreter子菜单中创建弹出窗口。但是，只有在我们能够利用目标主机并成功获取Meterpreter shell时，此弹出窗口才可用。
- en: The `popup` keyword will denote the creation of a pop-up. The `meterpreter_bottom`
    function will signify that Armitage will display this menu at the bottom whenever
    a user right-clicks on an exploited host and chooses the `Meterpreter` option.
    The `item` keyword specifies various items in the menu. The `m_cmd` command is
    the command that will send the Meterpreter commands to Metasploit with their respective
    session IDs.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`popup`关键字将表示弹出窗口的创建。`meterpreter_bottom`函数将表示Armitage将在用户右键单击受损的主机并选择`Meterpreter`选项时在底部显示此菜单。`item`关键字指定菜单中的各个项目。`m_cmd`命令是将Meterpreter命令与其相应的会话ID发送到Metasploit的命令。'
- en: 'Therefore, in the preceding script, we have three items: Start Key Logger,
    Stop Key Logger, and Show Keylogs. They are used to start keylogging, stop keylogging,
    and display the data that is present in the logs, respectively. We have also declared
    three functions that will handle the output of the commands sent to the Meterpreter.
    Let''s load this script into Cortana, exploit the host, and right-click on the
    compromised host, which will present us with the following menu:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在上面的脚本中，我们有三个项目：启动键盘记录器，停止键盘记录器和显示键盘记录。它们分别用于启动键盘记录，停止键盘记录和显示日志中存在的数据。我们还声明了三个函数，用于处理发送到Meterpreter的命令的输出。让我们将这个脚本加载到Cortana中，利用主机，并在受损的主机上右键单击，这将呈现给我们以下菜单：
- en: '![](img/957b1aa2-bf28-492c-ba8f-c1db6e7d5da8.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/957b1aa2-bf28-492c-ba8f-c1db6e7d5da8.png)'
- en: 'We can see that whenever we right-click on an exploited host and browse the
    Meterpreter 3 menu, we will see a new menu named My Key Logger listed at the bottom
    of all the menus. This menu will contain all the items that we declared in the
    script. Whenever we select an option from this menu, the corresponding command
    runs and displays its output on the Cortana console. Let''s select the first option,
    Start Key Logger. Wait for a few seconds for the target to type something and
    click on the third option, Show Keylogs, from the menu, as shown in the following
    screenshot:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，每当我们右键单击受损的主机并浏览Meterpreter 3菜单时，我们将看到一个名为My Key Logger的新菜单列在所有菜单的底部。此菜单将包含我们在脚本中声明的所有项目。每当我们从此菜单中选择一个选项时，相应的命令将运行并在Cortana控制台上显示其输出。让我们选择第一个选项“启动键盘记录器”。等待一段时间，让目标输入一些内容，然后从菜单中选择第三个选项“显示键盘记录”，如下面的屏幕截图所示：
- en: '![](img/ec6a305a-960e-42b0-896f-546d7f7ca93f.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec6a305a-960e-42b0-896f-546d7f7ca93f.png)'
- en: 'After we click on the Show Keylogs option, we will see the characters typed
    by the person working on the compromised host in the Cortana console, as shown
    in the following screenshot:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击“显示键盘记录”选项时，我们将在Cortana控制台中看到在受损主机上工作的人键入的字符，如下面的屏幕截图所示：
- en: '![](img/437df24b-fe7f-47f2-9c1d-ac313072dcda.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/437df24b-fe7f-47f2-9c1d-ac313072dcda.png)'
- en: Working with interfaces
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用接口进行工作
- en: 'Cortana also provides a flexible approach while working with interfaces. Cortana
    provides options and functions to create shortcuts, tables, switching tabs, and
    various other operations. Suppose we want to add custom functionality, such as
    when we press the *F1* key from the keyboard; Cortana displays the `UID` of the
    target host. Let''s see an example of a script that will enable us to achieve
    this feature:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Cortana在处理界面时也提供了灵活的方法。Cortana提供了创建快捷方式、表格、切换选项卡和各种其他操作的选项和功能。假设我们想要添加自定义功能，比如当我们从键盘按下*F1*键时，Cortana会显示目标主机的`UID`。让我们看一个能实现这一功能的脚本的例子：
- en: '[PRE4]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The previous script will add a shortcut key, `F1`, that will display the `UID`
    of the target system when pressed. The `bind` keyword in the script denotes binding
    of the functionality with the *F1* key. Next, we define the value of the `$sid`
    variable as `3` (this is the value of the session ID which we'll be interacting
    with).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的脚本将添加一个快捷键`F1`，按下时将显示目标系统的`UID`。脚本中的`bind`关键字表示将功能与*F1*键绑定。接下来，我们将`$sid`变量的值定义为`3`（这是我们将要交互的会话ID的值）。
- en: The `spawn` function will create a new instance of Cortana, execute the `gu`
    function, and install the value `$sid` to the global scope of the new instance.
    The `gu` function will send the `getuid` command to the Meterpreter. The `meterpreter_getuid`
    command will handle the output of the `getuid` command.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`spawn`函数将创建一个新的Cortana实例，执行`gu`函数，并将值`$sid`安装到新实例的全局范围内。`gu`函数将向Meterpreter发送`getuid`命令。`meterpreter_getuid`命令将处理`getuid`命令的输出。'
- en: 'The `show_message` command will show a message displaying the output from the
    `getuid` command. Let''s load the script into Armitage and press the *F1* key
    to check and see whether our current script executes correctly:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`show_message`命令将显示一个消息，显示`getuid`命令的输出。让我们将脚本加载到Armitage中，按下*F1*键来检查并查看我们当前的脚本是否正确执行：'
- en: '![](img/a7bf4358-85b6-456c-a08f-d488d89452fa.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a7bf4358-85b6-456c-a08f-d488d89452fa.png)'
- en: Bang! We got the `UID` of the target system easily, which is WIN-SWIKKOTKSHXmm.
    This concludes our discussion on Cortana scripting using Armitage.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 砰！我们很容易得到了目标系统的`UID`，它是WIN-SWIKKOTKSHXmm。这结束了我们关于使用Armitage的Cortana脚本的讨论。
- en: For further information about Cortana scripting and its various functions, refer
    to: [http://www.fastandeasyhacking.com/download/cortana/cortana_tutorial.pdf](http://www.fastandeasyhacking.com/download/cortana/cortana_tutorial.pdf).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Cortana脚本及其各种功能的更多信息，请参阅：[http://www.fastandeasyhacking.com/download/cortana/cortana_tutorial.pdf](http://www.fastandeasyhacking.com/download/cortana/cortana_tutorial.pdf)。
- en: Summary
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we had a good look at Armitage and its multiple features. We
    kicked off by looking at the interface and building up workspaces. We also saw
    how we could exploit a host with Armitage. We looked at remote as well as client-side
    exploitation and post-exploitation. Furthermore, we jumped into Cortana and discussed
    about its fundamentals, using it to control Metasploit, writing post-exploitation
    scripts, custom menus, and interfaces as well.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们仔细研究了Armitage及其多种功能。我们首先看了界面和工作区的建立。我们还看到了如何利用Armitage对主机进行利用。我们研究了远程利用和客户端利用以及后期利用。此外，我们还深入研究了Cortana，并讨论了它的基本原理，使用它来控制Metasploit，编写后期利用脚本，自定义菜单和界面等。
