- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Parallel Processing
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并行处理
- en: In this chapter, we will explore the powerful capabilities of **parallel processing**
    within the realm of Bash scripting. As tasks become more data-intensive and time-sensitive,
    leveraging parallelism can significantly enhance the efficiency and effectiveness
    of Bash scripts. This chapter is designed to progressively build your understanding
    and skills in parallel processing, starting with fundamental concepts and advancing
    to practical applications and best practices.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨Bash脚本中**并行处理**的强大功能。随着任务变得更加数据密集和时间敏感，利用并行性可以显著提升Bash脚本的效率和效果。本章旨在逐步建立你对并行处理的理解和技能，从基础概念入手，进而扩展到实际应用和最佳实践。
- en: By the end of this chapter, you will have a comprehensive understanding of how
    to harness the power of parallel processing in Bash scripts, enabling you to handle
    tasks more efficiently and effectively in various cybersecurity and data processing
    scenarios.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束时，你将全面了解如何在Bash脚本中利用并行处理的力量，使你能够在各种网络安全和数据处理场景中更高效、更有效地处理任务。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要内容：
- en: Understanding parallel processing in Bash
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Bash中的并行处理
- en: Implementing basic parallel execution
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现基本的并行执行
- en: Advanced parallel processing with **xargs** and GNU parallel
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**xargs**和GNU parallel进行高级并行处理
- en: Practical applications and best practices
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际应用和最佳实践
- en: The code for this chapter can be found at [https://github.com/PacktPublishing/Bash-Shell-Scripting-for-Pentesters/tree/main/Chapter07](https://github.com/PacktPublishing/Bash-Shell-Scripting-for-Pentesters/tree/main/Chapter07)
    .
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在[https://github.com/PacktPublishing/Bash-Shell-Scripting-for-Pentesters/tree/main/Chapter07](https://github.com/PacktPublishing/Bash-Shell-Scripting-for-Pentesters/tree/main/Chapter07)找到。
- en: Understanding parallel processing in Bash
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Bash中的并行处理
- en: Parallel processing in Bash involves executing multiple tasks simultaneously,
    rather than sequentially, to improve efficiency and reduce execution time. This
    concept is particularly useful in scenarios where tasks are independent of each
    other and can be performed concurrently. Understanding the foundational principles
    of parallel processing is crucial for effectively leveraging this technique in
    Bash scripting.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Bash中的并行处理涉及同时执行多个任务，而不是按顺序执行，以提高效率并减少执行时间。这个概念在任务相互独立并且可以并行执行的情况下特别有用。理解并行处理的基础原理对于在Bash脚本中有效利用这一技巧至关重要。
- en: 'This section will cover the basics of parallel processing, including its benefits
    and drawbacks. So, let’s begin with understanding some of the key concepts of
    parallel processing, which are as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将介绍并行处理的基础知识，包括其优缺点。让我们从理解并行处理的一些关键概念开始，具体如下：
- en: '**Serial execution** : Tasks are executed one after another in a sequence.
    Each task must be completed before the next one begins. This approach is straightforward
    but can be time-consuming for large or complex tasks.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**串行执行**：任务按顺序一个接一个执行。每个任务必须完成后，下一个任务才能开始。这种方法简单直接，但对于大型或复杂任务可能比较耗时。'
- en: '**Parallel execution** : Multiple tasks are executed at the same time, independently
    of each other. This can significantly reduce the overall execution time, especially
    for tasks that can run concurrently without dependencies.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并行执行**：多个任务同时执行，彼此独立。这可以显著减少整体执行时间，特别是对于那些可以并行执行而没有依赖关系的任务。'
- en: '**Concurrency versus parallelism** : Concurrency refers to the ability to handle
    multiple tasks by switching between them, giving the illusion that they’re running
    simultaneously. Parallelism involves actually running multiple tasks simultaneously,
    typically utilizing multiple CPU cores.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并发与并行**：并发指的是通过在任务之间切换来处理多个任务，从而给人一种它们同时运行的假象。并行则是指实际同时运行多个任务，通常利用多个CPU核心。'
- en: '**Separate processes** : In Bash, parallel tasks are typically executed as
    separate processes. Each process runs independently, with its own memory space.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**独立进程**：在Bash中，并行任务通常作为独立进程执行。每个进程独立运行，拥有自己的内存空间。'
- en: '**Background processes** : Running tasks in the background allows the shell
    to execute other commands while the background task continues to run. This is
    a common technique for achieving parallelism in Bash.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后台进程**：在后台运行任务允许Shell在后台任务继续运行的同时执行其他命令。这是Bash中实现并行性的常见技巧。'
- en: 'The benefits of parallel processing include the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 并行处理的好处包括：
- en: '**Improved performance** : By utilizing multiple processors or cores, parallel
    processing can speed up the execution of scripts, making them more efficient'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高性能**：通过利用多个处理器或核心，並行处理能够加速脚本的执行，提高其效率。'
- en: '**Resource utilization** : Parallel processing allows for better utilization
    of system resources, such as CPU and memory, by distributing the workload across
    multiple processes'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源利用**：并行处理通过将工作负载分配给多个进程，可以更好地利用系统资源，如 CPU 和内存。'
- en: '**Scalability** : Scripts that use parallel processing can handle larger datasets
    and more complex tasks without a linear increase in execution time'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：使用并行处理的脚本能够处理更大的数据集和更复杂的任务，而执行时间不会线性增加。'
- en: 'There are drawbacks to parallel processing. They are as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 并行处理也有一些缺点，具体如下：
- en: '**Complexity** : Writing and debugging parallel scripts can be more complex
    than serial scripts due to the need for synchronization and coordination between
    tasks'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复杂性**：编写和调试并行脚本比串行脚本更为复杂，因为需要在任务之间进行同步和协调。'
- en: '**Resource exhaustion** : Multiple processes may compete for the same resources
    (e.g., CPU, memory), which can lead to contention and reduced performance if not
    managed properly'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源耗尽**：多个进程可能会争夺相同的资源（例如 CPU、内存），如果管理不当，可能导致争用和性能下降。'
- en: '**Error management** : Managing errors in parallel tasks can be challenging,
    as failures in one task may not immediately impact others, making it harder to
    detect and handle issues'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误管理**：在并行任务中管理错误可能具有挑战性，因为一个任务的失败可能不会立即影响其他任务，从而使问题的检测和处理变得更加困难。'
- en: By understanding these fundamental concepts, you will be well-equipped to explore
    and implement parallel processing techniques in Bash, enhancing their scripts’
    performance and efficiency.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通过理解这些基本概念，你将能够有效地探索和实现 Bash 中的并行处理技术，从而提升脚本的性能和效率。
- en: Implementing basic parallel execution
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现基本的并行执行
- en: So far, this chapter has been completely theoretical. This section will dive
    into the practical side and teach you how to implement basic parallel processing
    in Bash. Practical examples will be used to help you understand and learn this
    topic.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本章内容完全是理论性的。本节将深入探讨实际操作，并教你如何在 Bash 中实现基本的并行处理。将通过实际示例帮助你理解和学习这个主题。
- en: In Bash scripting, the ability to run commands or scripts in the background
    is a fundamental aspect of parallel processing. When a process is sent to the
    background, it allows the user to continue other work in the foreground. This
    is especially useful in a cybersecurity context where certain tasks such as network
    scans or data monitoring need to run continuously without tying up the terminal.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Bash 脚本中，能够在后台运行命令或脚本是并行处理的一个基本特性。当一个进程被发送到后台时，用户可以继续在前台进行其他工作。这在网络安全领域尤其有用，因为某些任务，如网络扫描或数据监控，需要不断运行而不占用终端。
- en: 'The simplest way to send a process to the background in Bash is by appending
    an ampersand ( **&** ) to the end of a command, as in this example:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Bash 中将进程发送到后台的最简单方法是在命令末尾添加一个“&”符号（**&**），如以下示例所示：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This command starts pinging **google.com** and immediately returns the command
    prompt to the user, allowing further commands to be entered without waiting for
    the **ping** process to finish.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令开始对 **google.com** 进行 ping 操作，并立即将命令提示符返回给用户，允许用户在不等待 **ping** 进程完成的情况下输入其他命令。
- en: 'Once a process is running in the background, it’s managed by the shell without
    any user interface. However, Bash provides several commands to manage these background
    processes:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦一个进程在后台运行，它将由 shell 管理，而无需任何用户界面。然而，Bash 提供了多个命令来管理这些后台进程：
- en: '**jobs** : Lists all current background processes running in the current shell
    session.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**jobs**：列出当前 shell 会话中所有正在运行的后台进程。'
- en: '**fg** : Brings a background process to the foreground. You can specify a job
    using its number (e.g., **fg %1** brings the first job back to the foreground).'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**fg**：将后台进程带回前台。你可以通过指定作业号来指定特定的任务（例如，**fg %1** 将第一个作业带回前台）。'
- en: '**bg** : Resumes a paused background process, keeping it in the background.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**bg**：恢复暂停的后台进程，并保持它在后台运行。'
- en: 'For instance, imagine you started a script that captures network packets and
    sent it to the bac kground:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你启动了一个脚本，该脚本捕获网络数据包并将其发送到后台：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can list this process with **jobs** , pause it with **kill -s STOP %1**
    , and resume it with **bg %1** .
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 **jobs** 列出这个进程，使用 **kill -s STOP %1** 暂停它，使用 **bg %1** 恢复它。
- en: 'Here’s an example of running this command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个运行该命令的示例：
- en: '![Figure 7.1 – An example of controlling jobs](image/B22229_07_1.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – 控制作业的示例](image/B22229_07_1.jpg)'
- en: Figure 7.1 – An example of controlling jobs
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – 控制作业的示例
- en: 'Background processes are extremely useful in cybersecurity for tasks that are
    time-consuming and do not require immediate interaction, such as the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 后台进程在网络安全中非常有用，用于那些耗时且不需要立即交互的任务，例如以下内容：
- en: '**Long-term monitoring** : Setting a network monitoring tool to run in the
    background to log traffic patterns or detect anomalies over time'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**长期监控**：设置一个网络监控工具在后台运行，记录流量模式或随时间检测异常'
- en: '**Automated scripts** : Running custom scripts that periodically check system
    logs or scan directories for changes without blocking access to the terminal'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化脚本**：运行定制脚本，定期检查系统日志或扫描目录以检测变化，而不阻塞对终端的访问'
- en: 'Here’s a simple script that monitors the system logs for specific security
    events, running in the background. You can find the script in this chapter’s folder
    in the book’s GitHub repository as **ch07_backgr ound_1.sh** :'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个简单的脚本，用于监视特定安全事件的系统日志，在后台运行。你可以在本章的书本 GitHub 存储库中找到该脚本，文件名为 **ch07_backgr
    ound_1.sh**：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This script filters the authentication log for failed login attempts and outputs
    the results to a temporary file, all while running in the background.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本过滤认证日志以查找失败的登录尝试，并将结果输出到临时文件中，所有这些操作均在后台运行。
- en: 'While background processing is a powerful tool, it should be used judiciously,
    keeping in mind the following aspects:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管后台处理是一个强大的工具，但应谨慎使用，注意以下几个方面：
- en: '**Monitor resource usage** : Background processes consume system resources.
    Use tools such as **top** or **htop** to monitor resource usage and ensure that
    background tasks do not adversely affect system performance.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控资源使用情况**：后台进程消耗系统资源。使用诸如 **top** 或 **htop** 的工具来监控资源使用情况，确保后台任务不会对系统性能产生不利影响。'
- en: '**Use nohup for unattended tasks** : If you start a background process and
    then log out, the process will terminate unless you use **nohup** to allow it
    to continue running: **$ nohup ./** **your-script.sh &** .'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 nohup 来处理无人看管的任务**：如果你启动一个后台进程然后退出登录，该进程会终止，除非你使用 **nohup** 允许它继续运行：**$
    nohup ./your-script.sh &**。'
- en: '**Error handling** : Redirect error messages to a file or a logging service
    to keep track of any issues that might occur during the execution of background
    processes.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误处理**：将错误消息重定向到文件或日志服务，以跟踪执行后台进程期间可能发生的任何问题。'
- en: Using background processes effectively allows pentesters to perform multiple
    tasks simultaneously, enhancing productivity and efficiency. By understanding
    and implementing the techniques discussed, you can optimize your Bash scripts
    for parallel processing tasks, essential in the field of cybersecurity.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有效地使用后台进程允许渗透测试人员同时执行多个任务，提升生产力和效率。通过理解和实施讨论的技术，你可以优化 Bash 脚本以处理并行处理任务，在网络安全领域尤为重要。
- en: In Bash, you can parallelize loops by running iterations in the background using
    **&** , and then synchronizing them with **wait** . This method is particularly
    useful when the tasks within each iteration do not depend on the completion of
    others.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Bash 中，你可以通过使用 **&** 将迭代运行在后台来并行化循环，然后使用 **wait** 同步它们。这种方法在每个迭代的任务不依赖于其他完成时特别有用。
- en: 'Here’s a basic example that can be found in this chapter’s folder in the book’s
    GitHub repository as **ch07_backg round_2.sh** :'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基本示例，可以在本章的书本 GitHub 存储库中找到，文件名为 **ch07_backg round_2.sh**：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this example, **sleep 1 &** simulates a task being processed in the background.
    The **wait** command is used after the loop to ensure that the script waits for
    all background processes to complete before moving on.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，**sleep 1 &** 模拟后台处理任务。循环后使用 **wait** 命令确保脚本等待所有后台进程完成后再继续。
- en: 'This example script for scanning multiple IP addresses concurrently can be
    found in the book’s GitHub repository as **ch07_backg round_3.sh** :'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子脚本用于并行扫描多个 IP 地址，可以在书本的 GitHub 存储库中找到，文件名为 **ch07_backg round_3.sh**：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Each **nmap** scan runs in the background, and **scan_$ip.txt** captures the
    output. Once all scans are initiated, **wait** ensures that the script only proceeds
    once all scans are complete.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 每个**nmap**扫描都在后台运行，**scan_$ip.txt**捕获输出。一旦所有扫描启动，**wait**确保脚本只有在所有扫描完成后才继续执行。
- en: Simple parallel loops with **&** and **wait** in Bash provide a straightforward
    way to implement parallel processing for repetitive tasks, particularly useful
    in cybersecurity for tasks such as network scanning or log processing.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Bash中的**&**和**wait**进行简单的并行循环为实现重复任务的并行处理提供了一种简便的方法，特别是在网络安全中，对于网络扫描或日志处理等任务特别有用。
- en: Up to this point, we have been using very basic parallel processing using built-in
    Bash features. The next section will demonstrate how to use **xargs** and GNU
    parallel for more advanced parallel processing.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用的是非常基本的并行处理，利用的是内建的Bash特性。下一节将展示如何使用**xargs**和GNU parallel来进行更高级的并行处理。
- en: Advanced parallel processing with xargs and GNU parallel
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用xargs和GNU parallel进行高级并行处理
- en: This section will jump ahead from the basic, and therefore, limited background
    processing you have seen thus far. You will learn more robust parallel processing
    with the more capable **xargs** and Gnu parallel to implement performance-critical
    Bash code.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将跳跃到比之前展示的基本且有限的后台处理更先进的内容。你将学习如何使用功能更强大的**xargs**和Gnu parallel来实现性能关键的Bash代码的并行处理。
- en: Introducing xargs for robust parallel processing
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引入xargs以实现强大的并行处理
- en: The **xargs** application is a powerful command-line utility in Linux. It is
    used to build and execute command lines from standard input. By default, **xargs**
    reads items from the standard input and executes the command specified, one or
    more times, with the input provided. This tool is particularly useful for handling
    a large number of arguments or for processing items in parallel to improve efficiency.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**xargs**应用程序是一个强大的Linux命令行工具。它用于从标准输入构建和执行命令行。默认情况下，**xargs**从标准输入读取项并执行指定的命令，执行一次或多次，使用提供的输入。这个工具对于处理大量参数或并行处理项目以提高效率特别有用。'
- en: 'The basic syntax of **xargs** is as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**xargs**的基本语法如下：'
- en: '[PRE5]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here’s a simple example:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个简单的示例：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this case, **xargs** takes the output of **echo** (which lists three filenames)
    and constructs a command to remove those files, executing **rm file1** **file2
    file3** .
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，**xargs**接受**echo**的输出（列出三个文件名），并构建一个命令来删除这些文件，执行**rm file1** **file2
    file3**。
- en: One of the most powerful features of **xargs** is its ability to execute commands
    in parallel using the **-P** option, which specifies the number of processes to
    run simultaneously. This can significantly speed up operations that can be performed
    independently.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**xargs**最强大的功能之一是能够使用**-P**选项并行执行命令，该选项指定同时运行的进程数。这可以显著加速可以独立执行的操作。'
- en: 'Imagine you have a list of files to compress. Instead of compressing them one
    by one, you can use **xargs** to process them in parallel:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一组文件需要压缩。你可以使用**xargs**并行处理它们，而不是逐个压缩：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here’s what each part of this command does:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是这个命令的每个部分的作用：
- en: '**ls *.log** lists all **.log** files in the current directory'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ls *.log**列出当前目录下的所有**.log**文件'
- en: '**xargs -P 4** tells **xargs** to use up to four parallel processes'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**xargs -P 4**告诉**xargs**使用最多四个并行进程'
- en: '**-I {}** is a placeholder for the argument from the input ( each filename)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-I {}**是输入参数的占位符（每个文件名）'
- en: '**gzip {}** compresses each file listed by **ls**'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**gzip {}**压缩**ls**列出的每个文件'
- en: This command will compress up to four log files simultaneously, making the operation
    much faster than processing each file sequentially.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将同时压缩最多四个日志文件，使得操作比顺序处理每个文件要快得多。
- en: 'In cybersecurity, **xargs** is extremely useful for parallelizing tasks such
    as scanning multiple hosts, analyzing large sets of log files, or executing commands
    across many systems. Here’s an example of using **xargs** for parallel network
    scanning:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络安全中，**xargs**对并行化任务非常有用，比如扫描多个主机、分析大量日志文件或在多个系统上执行命令。下面是使用**xargs**进行并行网络扫描的示例：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This command does the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令的作用如下：
- en: '**cat hosts.txt** reads a list of hostnames or IP addresses from the **hosts.txt**
    file'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**cat hosts.txt**从**hosts.txt**文件中读取主机名或IP地址列表'
- en: '**xargs -P 5** runs up to five parallel instances of the following command'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**xargs -P 5**运行最多五个并行实例的以下命令'
- en: '**-I {}** inserts the hostname or IP address from **hosts.txt** into the command'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-I {}** 将 **hosts.txt** 中的主机名或 IP 地址插入到命令中'
- en: '**nmap -sS -oN {}_scan.txt {}** runs an **nmap** scan on each host, saving
    the output to a file named after the host'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**nmap -sS -oN {}_scan.txt {}** 对每个主机运行 **nmap** 扫描，并将输出保存到以主机名命名的文件中'
- en: 'Managing output from parallel processes can be tricky. Here are a few tips:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 管理并行进程的输出可能会很棘手。以下是一些提示：
- en: '**Separate output files** : As shown in the examples, direct each command’s
    output to a unique file'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Separate output files** : 如示例所示，将每个命令的输出重定向到一个唯一的文件'
- en: '**Combine outputs** : Use **cat** or similar tools to combine output files
    after processing'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Combine outputs** : 使用 **cat** 或类似工具在处理后合并输出文件'
- en: '**Logging** : Redirect both standard output and error to log files for each
    process to ensure you capture all relevant information, as shown in the following
    code:'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Logging** : 将标准输出和错误输出重定向到每个进程的日志文件中，以确保捕获所有相关信息，如以下代码所示：'
- en: '[PRE9]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The **xargs** command is a versatile tool that can greatly enhance the efficiency
    of your Bash scripts by enabling parallel execution. Its ability to handle large
    numbers of arguments and process them in parallel makes it invaluable for various
    cybersecurity tasks, from network scanning to log file analysis. By mastering
    **xargs** , you can significantly reduce the time required for many repetitive
    tasks, improving both productivity and effectiveness in your cybersecurity operations.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**xargs** 命令是一个多功能的工具，可以通过启用并行执行大大提高 Bash 脚本的效率。它能够处理大量的参数并并行处理，这对于各种网络安全任务（从网络扫描到日志文件分析）来说非常有价值。通过掌握
    **xargs**，你可以显著减少许多重复任务所需的时间，从而提高网络安全操作中的生产力和效率。'
- en: Using GNU parallel for enhanced control
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 GNU parallel 提供更强的控制
- en: 'Before diving into the usage of **GNU parallel** , ensure that it is installed
    on your system. On most Linux distributions, you can install it using the package
    manager. For example, on Debian-based systems, use the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入使用 **GNU parallel** 之前，确保它已安装在你的系统上。在大多数 Linux 发行版中，可以使用包管理器进行安装。例如，在基于 Debian
    的系统上，使用以下命令：
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'GNU parallel allows you to run commands in parallel by reading input from standard
    input, files, or command-line arguments:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: GNU parallel 允许你通过从标准输入、文件或命令行参数读取输入来并行运行命令：
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here is an explanation:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个解释：
- en: '**parallel** : The command to invoke GNU parallel'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**parallel** : 用于调用 GNU parallel 的命令'
- en: '**echo** : The command to be executed in parallel'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**echo** : 要在并行中执行的命令'
- en: '**:::** : A separator indicating the start of input values from the command
    line'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**:::** : 一个分隔符，表示命令行输入值的开始'
- en: '**A B C D** : The input values that will be processed in parallel'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**A B C D** : 将并行处理的输入值'
- en: In this example, GNU parallel runs the **echo** command four times concurrently,
    each time with one of the input values ( **A** , **B** , **C** , **D** ).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，GNU parallel 会并行运行 **echo** 命令四次，每次用一个输入值（**A**、**B**、**C**、**D**）。
- en: 'GNU parallel shines when dealing with more complex tasks, such as processing
    files or executing scripts on multiple targets. Suppose you have a directory with
    multiple text files and you want to count the number of lines in each file simultaneously,
    use the following command:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: GNU parallel 在处理更复杂的任务时表现出色，例如处理文件或在多个目标上执行脚本。假设你有一个包含多个文本文件的目录，并且希望同时统计每个文件的行数，可以使用以下命令：
- en: '[PRE12]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here is an explanation:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个解释：
- en: '**ls *.txt** : Lists all text files in the current directory'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ls *.txt** : 列出当前目录中的所有文本文件'
- en: '**| parallel** : Pipes the list of files to GNU parallel'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**| parallel** : 将文件列表传递给 GNU parallel'
- en: '**wc -l** : The command to count the lines in each file'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**wc -l** : 用于统计每个文件中的行数'
- en: Here, GNU parallel runs **wc -l** on each file concurrently, significantly speeding
    up the process compared to running the command sequentially.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，GNU parallel 会并行地在每个文件上运行 **wc -l**，与按顺序运行命令相比，显著加快了处理速度。
- en: 'GNU parallel can handle more complex scenarios involving scripts and multiple
    input arguments. Imagine you have a **scan.sh** script that performs network scans,
    and you need to run this script on multiple IP addresses. The following code demonstrates
    basic parallel usage:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: GNU parallel 可以处理更复杂的场景，包括脚本和多个输入参数。假设你有一个 **scan.sh** 脚本用于执行网络扫描，你需要在多个 IP
    地址上运行此脚本。以下代码演示了基本的并行用法：
- en: '[PRE13]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here is an explanation:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个解释：
- en: '**cat ips.txt** : Outputs the contents of **ips.txt** , which contains a list
    of IP addresses'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**cat ips.txt** : 输出 **ips.txt** 文件的内容，该文件包含一组 IP 地址'
- en: '**| parallel** : Pipes the list of IP addresses to GNU parallel'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**| parallel** ：将IP地址列表通过管道传递给GNU parallel。'
- en: '**./scan.sh** : The script to be executed on each IP address'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**./scan.sh** ：要在每个IP地址上执行的脚本'
- en: In this example, GNU parallel runs **scan.sh** for each IP address listed in
    **ips.txt** concurrently, enhancing the efficiency of your network scanning operations.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，GNU parallel 并行运行**scan.sh**，针对**ips.txt**中列出的每个IP地址，提高了网络扫描操作的效率。
- en: GNU parallel offers advanced options for controlling the number of concurrent
    jobs, handling input from multiple sources, and managing output.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: GNU parallel提供了高级选项来控制并发任务的数量、处理来自多个来源的输入并管理输出。
- en: 'You can limit the number of jobs running simultaneously using the **-** **j**
    option:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用**-j**选项限制同时运行的任务数：
- en: '[PRE14]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, **-j 4** limits the number of concurrent jobs to **4** . This command
    ensures that no more than four instances of **scan.sh** run at the same time,
    which can be useful for managing system resources.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，**-j 4**将并发任务数限制为**4**。该命令确保不会同时运行超过四个**scan.sh**实例，这对于管理系统资源非常有用。
- en: 'Parallel can also handle multiple input sources, enabling more complex workflows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Parallel还可以处理多个输入源，支持更复杂的工作流：
- en: '[PRE15]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here is an explanation:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是解释：
- en: '**-a ips.txt** : Specifies **ips.txt** as an input file'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-a ips.txt** ：指定**ips.txt**作为输入文件'
- en: '**-a ports.txt** : Specifies **ports.txt** as another input file'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-a ports.txt** ：指定**ports.txt**作为另一个输入文件'
- en: '**./scan.sh** : The script to be executed with combined inputs'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**./scan.sh** ：结合输入执行的脚本'
- en: 'Here, **parallel** combines inputs from both **ips.txt** and **ports.txt**
    , running **scan.sh** with pairs of IP addresses and ports. In the **ch07_parallel_1.sh**
    script, the input from **ips.txt** and **ports.txt** are referenced as positional
    variables:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，**parallel**结合了来自**ips.txt**和**ports.txt**的输入，运行**scan.sh**，并为每对IP地址和端口执行任务。在**ch07_parallel_1.sh**脚本中，**ips.txt**和**ports.txt**中的输入被引用为位置变量：
- en: '[PRE16]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This code can be found in the book ’s GitHub repository as **ch07_parallel_1.sh**
    . Here’s the output:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码可以在书籍的GitHub仓库中找到，文件名为**ch07_parallel_1.sh**。以下是输出结果：
- en: '[PRE17]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Managing errors and outputs from parallel processes can be challenging, but
    **parallel** provides mechanisms to handle these scenarios, as shown here:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 管理并行进程中的错误和输出可能具有挑战性，但**parallel**提供了处理这些情况的机制，如下所示：
- en: '[PRE18]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here is an explanation:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是解释：
- en: '**{}''>''** : Redirects standard output to a file. Note that the **>** character
    is quoted. Other special shell characters (such as ***** , **;** , **$** , **>**
    , **<** , **|** , **>>** , and **<<** ) also need to be put in quotes, as they
    may otherwise be interpreted by the shell and not given to parallel.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**{}''>''** ：将标准输出重定向到文件。注意，**>**字符是被引号括起来的。其他特殊的Shell字符（如**\***、**;**、**$**、**>**、**<**、**|**、**>>**和**<<**）也需要用引号括起来，否则它们可能会被Shell解析，而不是传递给parallel。'
- en: '**results/{#}.out** : The file to store standard output, with **{#}** representing
    the job number.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**results/{#}.out** ：存储标准输出的文件，**{#}**代表任务编号。'
- en: '**2>** : Redirects standard error to a file.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**2>** ：将标准错误重定向到一个文件。'
- en: '**errors/{#}.err** : The file to store standard error, with **{#}** representing
    the job number.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**errors/{#}.err** ：存储标准错误的文件，**{#}**代表任务编号。'
- en: '**:::: ips.txt** : Specifies **ips.txt** as the input file. **::::** is used
    to specify that the following arguments are filenames containing input items.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**:::: ips.txt** ：指定**ips.txt**作为输入文件。**::::**用于指定后续的参数是包含输入项的文件名。'
- en: This command redirects the output and errors of each job to separate files,
    making it easier to review results and debug issues.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将每个任务的输出和错误重定向到不同的文件，方便查看结果并调试问题。
- en: 'Input to GNU parallel can be specified in four different ways:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: GNU parallel的输入可以通过四种不同的方式指定：
- en: '**:::** : Direct input list, **parallel echo ::: A** **B C**'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**:::** ：直接输入列表，**parallel echo ::: A** **B C**'
- en: '**::::** : Input from a file, **parallel echo ::::** **input.txt**'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**::::** ：来自文件的输入，**parallel echo ::::** **input.txt**'
- en: '**|** : Standard input, **cat input.txt |** **parallel echo**'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**|** ：标准输入，**cat input.txt |** **parallel echo**'
- en: '**--arg-file** or **-a** : Specify a file, **parallel --arg-file** **input.txt
    echo**'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**--arg-file**或**-a** ：指定一个文件，**parallel --arg-file** **input.txt echo**'
- en: 'Keep in mind that multiple inputs can be specified. The following example includes
    multiple fil e and argument inputs:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，可以指定多个输入。以下示例包括多个文件和参数输入：
- en: '[PRE19]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let’s break down this complex parallel command:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来解析这个复杂的并行命令：
- en: '**-a file1 -a file2** : The **-a** option specifies input sources. This tells
    **parallel** to read input lines from both **file1** and **file2** . Each line
    from these files will be used as an argument to the command.'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**-a file1 -a file2** : **-a** 选项指定输入源。这告诉 **parallel** 从 **file1** 和 **file2**
    中读取输入行。每一行将作为命令的参数。'
- en: '**::: arg1 arg2** : The **:::** separator introduces command-line arguments.
    **arg1** and **arg2** are literal arguments that will be used in each job.'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**::: arg1 arg2** : **:::** 分隔符引入命令行参数。**arg1** 和 **arg2** 是将用于每个任务的字面参数。'
- en: '**:::: file3** : The **::::** separator introduces another input source. **file3**
    will be read, and each of its lines will be used as an argument.'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**:::: file3** : **::::** 分隔符引入了另一个输入源。**file3** 将被读取，每一行将作为参数使用。'
- en: '**:::: file4** : Another input source, similar to **file3** . Each line from
    **file4** will be used as an argument.'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**:::: file4** : 另一个输入源，类似于 **file3**。**file4** 中的每一行将作为参数使用。'
- en: '**command** : This is the actual command that will be executed in parallel
    for each combination of inputs.'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**command** : 这是将并行执行的实际命令，每种输入组合都会执行。'
- en: 'Here’s how **parallel** will process this command. It will create a job for
    each combination of the following:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 **parallel** 如何处理此命令的方式。它会为以下每种组合创建一个任务：
- en: A line from **file1**
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 来自 **file1** 的一行
- en: A line from **file2**
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 来自 **file2** 的一行
- en: Either **arg1** or **arg2**
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**arg1** 或 **arg2**'
- en: A line from **file3**
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 来自 **file3** 的一行
- en: A line from **file4**
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 来自 **file4** 的一行
- en: For each of these combinations, it will execute **command** , substituting the
    arguments in order. The number of jobs that run simultaneously depends on the
    number of CPU cores available, unless specified otherwise.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每一种组合，它将执行 **command** ，按顺序替换参数。并行执行的任务数量取决于可用的 CPU 核心数，除非另行指定。
- en: Let’s create a real-world example where we use the **parallel** command to perform
    a series of automated security checks on multiple servers using different tools
    and configurations. This could be part of a pentesting or security audit exercise.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个实际的例子，使用 **parallel** 命令对多台服务器执行一系列自动化安全检查，使用不同的工具和配置。这可能是渗透测试或安全审计练习的一部分。
- en: 'Here are the contents of the **servers.txt** file:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 **servers.txt** 文件的内容：
- en: '[PRE20]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here are the conten ts of the **ports.txt** file:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 **ports.txt** 文件的内容：
- en: '[PRE21]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here are the contents of the **scan_types.txt** file:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 **scan_types.txt** 文件的内容：
- en: '[PRE22]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Here are the contents of the **output_formats.txt** file:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 **output_formats.txt** 文件的内容：
- en: '[PRE23]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, let’s create a script that will perform these security checks. You can
    find this file in the book’s GitHub repository as **ch07_parallel_3.sh** . The
    purpose of this script is to automate and parallelize a series of simulated security
    checks across multiple servers:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个脚本来执行这些安全检查。你可以在本书的 GitHub 仓库中找到这个文件，名为 **ch07_parallel_3.sh**。这个脚本的目的是自动化并行化跨多台服务器执行一系列模拟的安全检查：
- en: '[PRE24]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here’s the partial output of running the script:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这是运行脚本时的部分输出：
- en: '[PRE25]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This command structure is particularly useful when you need to process data
    from multiple sources in combination, allowing for complex parallel processing
    tasks.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这种命令结构在需要组合来自多个来源的数据进行处理时特别有用，可以执行复杂的并行处理任务。
- en: Now that you’ve been introduced to both **xargs** and parallel, I’ll explain
    in the next section when to choose one over the other.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了 **xargs** 和 **parallel**，接下来我将解释在何时选择其中一个而不是另一个。
- en: Comparing xargs and parallel
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较 **xargs** 和 **parallel**
- en: 'What are the key differences between **xargs** and parallel and how do you
    know when either one is the right tool for the job? The following table should
    help you choose the right tool for the job:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**xargs** 和 **parallel** 之间的关键区别是什么，如何知道何时使用其中一个作为合适的工具？以下表格可以帮助你选择适合的工具：'
- en: '| **Aspect** | **xargs** | **GNU parallel** |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| **方面** | **xargs** | **GNU parallel** |'
- en: '| **Execution** | Serial by default. Can run parallel with the **-P** option,
    but is less flexible. | Designed for efficient parallel execution out of the box.
    |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| **执行方式** | 默认串行。可以使用 **-P** 选项并行运行，但灵活性较差。 | 为高效并行执行设计，开箱即用。 |'
- en: '| **Complexity** | Simpler, lightweight. Good for straightforward tasks. |
    Feature-rich. Handles complex scenarios, job control, and load balancing. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| **复杂性** | 更简单，轻量级。适合简单任务。 | 功能丰富。处理复杂场景、任务控制和负载平衡。 |'
- en: '| **Error handling** | Basic. May stop on errors. | Robust. Can continue despite
    failures. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| **错误处理** | 基本。可能在出错时停止。 | 强健。即使遇到失败也能继续执行。 |'
- en: '| **Availability** | Installed by default on most Unix systems. | Requires
    separate installation. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| **可用性** | 大多数 Unix 系统默认安装。 | 需要单独安装。 |'
- en: Table 7.1 – A comparison of xargs and parallel features
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7.1 – xargs 与 parallel 功能的比较
- en: Having learned how Bash parallel processing works, in the next section, we’ll
    explore using these concepts in practical applications.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了 Bash 并行处理的工作原理后，接下来我们将探索在实际应用中使用这些概念。
- en: Achieving parallelism using screen
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 screen 实现并行性
- en: The **screen** command is a Linux utility that allows users to manage multiple
    terminal sessions within a single window. It’s particularly useful for running
    long processes, managing remote sessions, and achieving parallelism in Bash scripts.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**screen**命令是一个 Linux 工具，允许用户在一个窗口中管理多个终端会话。它特别适用于运行长时间的进程、管理远程会话和在 Bash 脚本中实现并行性。'
- en: 'Before proceeding, ensure you have **screen** installed by running the following
    command:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请通过运行以下命令确保已安装**screen**：
- en: '[PRE26]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Here’s how you can use **screen** to run multiple tasks in parallel. You can
    find the code in the book’s GitHub repository as **ch07_screen_1.sh** :'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何使用**screen**并行运行多个任务。你可以在书籍的 GitHub 仓库中找到代码，文件名为**ch07_screen_1.sh**：
- en: '[PRE27]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The **perform_task** function simply sleeps for five seconds to simulate performing
    work.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '**perform_task**函数只是休眠五秒钟，用来模拟执行任务。'
- en: 'The following code creates a new detached **screen** session named **parallel_tasks**
    :'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码创建一个名为**parallel_tasks**的新分离式**screen**会话：
- en: '[PRE28]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The **-d** flag starts the session in detached mode, and **m** creates a new
    session.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '**-d** 标志以分离模式启动会话，**-m** 创建一个新会话。'
- en: '[PRE29]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The preceding **for** loop starts multiple tasks in separate **screen** windows.
    This command creates a new window within the **parallel_tasks** session. The **-X**
    flag sends a command to the session, **screen** creates a new window, **-t** sets
    the window title, and **bash -c** executes the specified command in the new window.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 上述**for**循环在独立的**screen**窗口中启动多个任务。此命令在**parallel_tasks**会话中创建一个新窗口。**-X**标志将命令发送到会话，**screen**创建一个新窗口，**-t**设置窗口标题，**bash
    -c**在新窗口中执行指定的命令。
- en: '[PRE30]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The preceding command waits for all windows in the session to close. It’s useful
    for synchronizing the completion of parallel tasks.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令等待会话中的所有窗口关闭。它有助于同步并行任务的完成。
- en: '[PRE31]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The preceding command terminates the entire screen session once all tasks are
    complete.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令在所有任务完成后终止整个 screen 会话。
- en: Now that we have a solid foundation on the use of **xargs** , **parallel** ,
    and **screen** , let’s move on to the next section and look at some practical
    applications and review best practices for their use.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经掌握了**xargs**、**parallel**和**screen**的使用基础，接下来让我们进入下一部分，看看一些实际应用，并回顾它们的最佳实践。
- en: Practical applications and best practices
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实际应用和最佳实践
- en: This section will further solidify your understanding of parallel processing
    in Bash by showing practical applications. This will be followed by best practices
    to help you get the most out of learning these concepts.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将通过展示实际应用来进一步巩固你对 Bash 并行处理的理解。接下来是最佳实践，帮助你最大化地学习这些概念。
- en: Practical applications of Bash parallel processing
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bash 并行处理的实际应用
- en: In this section, we will use examples to show the real-world usage of Bash parallel
    processing in pentesting.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将通过示例展示 Bash 并行处理在渗透测试中的实际应用。
- en: 'The first example uses GNU parallel for **SQL injection** testing, as shown
    in the followin g code:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个示例使用 GNU parallel 进行**SQL 注入**测试，如下所示的代码：
- en: '[PRE32]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The code can be found in the book’s GitHub repository as **ch07_parallel_2.sh**
    . Here’s an explanation:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码可以在书籍的 GitHub 仓库中找到，文件名为**ch07_parallel_2.sh**。以下是解释：
- en: '**urls** is an array of URLs to test'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**urls**是一个待测试的 URL 数组'
- en: '**echo "${urls[@]}"** outputs the list of URLs'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**echo "${urls[@]}"** 输出 URL 列表'
- en: '**parallel -j 3 ''sqlmap -u {} --batch --crawl=2''** runs **sqlmap** on each
    URL with up to three concurrent jobs'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**parallel -j 3 ''sqlmap -u {} --batch --crawl=2''** 在每个 URL 上运行**sqlmap**，最多允许三项并发作业'
- en: 'The next example shows how to do network TCP port scanning in parallel, as
    sho wn here:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例展示了如何并行进行网络 TCP 端口扫描，如下所示：
- en: '[PRE33]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The code can be found in the book’s GitHub repository as **ch07_xargs_1.sh**
    . Here’s an explanation:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码可以在书籍的 GitHub 仓库中找到，文件名为**ch07_xargs_1.sh**。以下是解释：
- en: '**seq 1 254 | awk ''{print "192.168.1." $1}''** generates IP addresses from
    **192.168.1.1** to **192.168.1.254** .'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**seq 1 254 | awk ''{print "192.168.1." $1}''** 生成从**192.168.1.1**到**192.168.1.254**的
    IP 地址。'
- en: '**echo "$ips"** outputs the list of IPs.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**echo "$ips"** 输出 IP 列表。'
- en: '**xargs -n 1 -P 10 -I {} bash -c ''nmap -sP {}''** runs **nmap** ’s ping scan
    ( **-sP** ) on each IP, with up to 10 parallel jobs. The **-n 1** option tells
    **xargs** to use, at most, one argument per command line. In this context, it
    means that **xargs** will run the **nmap** command once for each IP address or
    hostname it receives as input.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**xargs -n 1 -P 10 -I {} bash -c ''nmap -sP {}''** 运行**nmap**的ping扫描（**-sP**）对每个IP进行扫描，最多支持10个并行作业。**-n
    1**选项告诉**xargs**每次最多使用一个参数。在这种情况下，意味着**xargs**每接收到一个IP地址或主机名作为输入，就会执行一次**nmap**命令。'
- en: While the preceding is an example of performing port scanning in parallel, **nmap**
    already has this capability. Therefore, let’s explore how to do this in Bash.
    You may find yourself in a shell on a system you have exploited and can’t install
    tools such as **nmap** for one reason or another so you should be prepared to
    use the system as a pivot into other networks.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前面的例子是并行执行端口扫描，**nmap**已经具备这种能力。因此，让我们探索如何在Bash中实现。你可能会遇到这样的情况：在一个已被你利用的系统上，无法安装像**nmap**这样的工具，出于某种原因你不能使用它，所以你需要准备好利用该系统作为跳板进入其他网络。
- en: 'The following Bash script has no external dependencies and scans for live hosts,
    then port-scans the top 100 TCP ports. It’s not nearly as fast as it could be
    if **xargs** or **parallel** were used. Just keep in mind that, someday, you’ll
    need something that doesn’t require any external dependencies and you can’t be
    assured that **xargs** and **parallel** will always be available. This script
    should work anywhere with Bash and the **ping** appl ication:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 以下Bash脚本没有外部依赖，它扫描活动主机并端口扫描前100个TCP端口。它的速度远不如使用**xargs**或**parallel**时那么快。只需要记住，总有一天你会需要一个不依赖外部工具的方案，而你无法确保**xargs**和**parallel**总是可用。这个脚本应该可以在任何有Bash和**ping**应用程序的地方运行：
- en: '[PRE34]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The code can be found in the book’s GitHub repository as **ch07_no_dependencies_scan.sh**
    . Here’s an explanation:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码可以在本书的GitHub代码库中找到，文件名为**ch07_no_dependencies_scan.sh**。以下是解释：
- en: '**#!/usr/bin/env bash** : The usual **shebang** that we’ve covered in earlier
    chapters. This basically tells the shell what program to use to execute the following
    code.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**#!/usr/bin/env bash** ：常见的**shebang**，我们在之前的章节中已经介绍过。它基本上告诉shell使用哪个程序来执行接下来的代码。'
- en: '**IP_RANGE** : Defines the range of IP addresses to scan using brace expansion
    ( **{1..20}** ), which denotes the last octet ranging from 1 to 20 for the base
    IP **192.168.1** .'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IP_RANGE** ：定义了使用大括号扩展（**{1..20}**）扫描的IP地址范围，表示基础IP **192.168.1** 的最后一个八位字节从1到20。'
- en: '**PORTS** : An array holding the **nmap** top 100 TCP ports.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PORTS** ：一个数组，保存**nmap**的前100个TCP端口。'
- en: '**LIVE_HOSTS** : An empty array to store the IP addresses of live hosts that
    respond to pings.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LIVE_HOSTS** ：一个空数组，用于存储响应ping请求的活动主机的IP地址。'
- en: '**for IP in $(eval echo $IP_RANGE)** : Iterates through the expanded list of
    IP addresses.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**for IP in $(eval echo $IP_RANGE)** ：遍历扩展后的IP地址列表。'
- en: '**ping -c 1 -W 1 $IP > /dev/null 2>&1** : Sends one ICMP echo request ( **-c
    1** ) with a 1-second timeout ( **-W 1** ) to check whether the host is up. The
    output is redirected to **/dev/null** to suppress it.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ping -c 1 -W 1 $IP > /dev/null 2>&1** ：发送一个ICMP回显请求（**-c 1**），并设置1秒的超时时间（**-W
    1**）来检查主机是否在线。输出被重定向到**/dev/null**以避免显示。'
- en: '**LIVE_HOSTS+=($IP)** : Adds the IP address to the **LIVE_HOSTS** array if
    the host is up.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LIVE_HOSTS+=($IP)** ：如果主机在线，将IP地址添加到**LIVE_HOSTS**数组中。'
- en: '**scan_ports $IP** : A function that takes an IP address as an argument.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**scan_ports $IP** ：一个以IP地址作为参数的函数。'
- en: '**(echo >/dev/tcp/$IP/$PORT) > /dev/null 2>&1** : Attempts to open a TCP connection
    to the specified port on the IP address. If successful, it prints the IP address
    and port.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**(echo >/dev/tcp/$IP/$PORT) > /dev/null 2>&1** ：尝试打开与指定IP地址和端口的TCP连接。如果成功，将打印IP地址和端口。'
- en: '**Export the function** : Using **export -f scan_ports** allows the function
    to be used in subshells.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Export the function** ：使用**export -f scan_ports**可以让该函数在子shell中使用。'
- en: '**for IP in "${LIVE_HOSTS[@]}"** : Iterates through the list of live hosts.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**for IP in "${LIVE_HOSTS[@]}"** ：遍历活动主机的列表。'
- en: '**scan_ports $IP &** : Calls the **scan_ports** function in the background
    for each IP address, allowing concurrent execution.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**scan_ports $IP &** ：在后台调用**scan_ports**函数处理每个IP地址，允许并发执行。'
- en: '**wait** : Waits for all background jobs to complete before exiting the script.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**wait** ：等待所有后台作业完成后再退出脚本。'
- en: 'The script checks 20 consecutive IP addresses for live hosts and then scans
    the top 100 TCP ports and completes in 10 seconds on my system:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本检查20个连续的IP地址以确认活动主机，然后扫描前100个TCP端口，并且在我的系统上10秒内完成：
- en: '![Figure 7.2 – A Bash TCP port scanner that should work on any system](image/B22229_07_2.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.2 – 一个在任何系统上都能运行的 Bash TCP 端口扫描器](image/B22229_07_2.jpg)'
- en: Figure 7.2 – A Bash TCP port scanner that should work on any system
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – 一个在任何系统上都能运行的 Bash TCP 端口扫描器
- en: 'Here’s an example of downloading multiple files in parallel:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个并行下载多个文件的示例：
- en: '[PRE35]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Here is the explanation:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 这是解释：
- en: '**parallel -j 3** : Executes three parallel jobs'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**parallel -j 3**：执行三个并行作业'
- en: '**wget :::** : The three URLs following the series of colon characters are
    the input'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**wget :::**：后面跟随的一组三个 URL 是输入'
- en: This command downloads three files concurrently using **wget** .
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令使用**wget**并发下载三个文件。
- en: Best practices for parallel execution in Bash
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bash 中的并行执行最佳实践
- en: This section explores best practices for using **xargs** and **parallel** to
    execute tasks concurrently, leveraging the full potential of your system’s resources.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 本节探讨了使用**xargs**和**parallel**并发执行任务的最佳实践，充分利用系统资源的潜力。
- en: 'The following are the best practices for parallel execution:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是并行执行的最佳实践：
- en: '**Determine the optimal number of jobs** : The ideal number of parallel jobs
    depends on your system’s CPU and memory capacity. Start with the number of CPU
    cores and adjust based on performance. If you don’t specify a number of jobs,
    the defaults are one job for **xargs** and one job per CPU core for GNU parallel.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确定作业的最佳数量**：理想的并行作业数量取决于系统的 CPU 和内存容量。可以从 CPU 核心数开始，并根据性能进行调整。如果不指定作业数量，**xargs**
    默认一个作业，而 GNU parallel 默认每个 CPU 核心一个作业。'
- en: '**Monitor resource usage** : Use tools such as **htop** or **vmstat** to monitor
    CPU and memory usage during parallel execution, ensuring your system remains responsive.
    See the man entry for these tools for examples.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控资源使用**：使用**htop**或**vmstat**等工具监控并行执行过程中 CPU 和内存的使用情况，确保系统保持响应。有关这些工具的示例，请参阅手册页。'
- en: '**Make a dry run** : You can check what will be run with parallel by including
    the **--** **dry-run** option.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进行干运行**：你可以通过包含**--** **dry-run**选项来检查并行将运行的内容。'
- en: '**Handle errors gracefully** : Both **xargs** and GNU parallel can capture
    and log errors. Use these features to identify and debug issues without halting
    the entire process.'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优雅地处理错误**：**xargs**和 GNU parallel 都可以捕获并记录错误。利用这些功能可以在不中断整个过程的情况下识别和调试问题。'
- en: '**Redirect output appropriately** : Redirect the output of each job to separate
    files or a log system to avoid interleaved and confusing outputs.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**适当重定向输出**：将每个作业的输出重定向到单独的文件或日志系统，以避免输出交织和混乱。'
- en: '**Use meaningful job names** : When using GNU Parallel, you can assign meaningful
    names to jobs to easily track their progress.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用有意义的作业名称**：使用 GNU Parallel 时，你可以为作业分配有意义的名称，以便轻松跟踪其进度。'
- en: Parallel execution with **xargs** and GNU parallel can vastly improve the efficiency
    of Bash scripts, particularly in cybersecurity and pentesting tasks. By following
    best practices such as optimizing job numbers, monitoring resources, handling
    errors, and managing output, you can harness the full potential of parallel processing
    to enhance your scripts and workflows.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**xargs**和 GNU parallel 的并行执行可以极大提高 Bash 脚本的效率，特别是在网络安全和渗透测试任务中。通过遵循优化作业数量、监控资源、处理错误和管理输出等最佳实践，你可以充分利用并行处理的潜力，提升脚本和工作流的效率。
- en: Summary
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about parallel processing techniques in Bash scripting.
    This helped you gain knowledge on the basics of parallel execution using background
    processes and job control. We also learned about advanced parallel processing
    using tools such as **xargs** and GNU parallel and covered managing errors and
    output in parallel tasks. The chapter also covered applying parallel processing
    to pentesting workflows.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们学习了 Bash 脚本中的并行处理技术。这帮助你掌握了使用后台进程和作业控制进行并行执行的基础知识。我们还学习了使用 **xargs** 和 GNU
    parallel 等工具进行高级并行处理，并讨论了如何管理并行任务中的错误和输出。本章还介绍了如何将并行处理应用于渗透测试工作流。
- en: This chapter will help you significantly speed up tasks that involve processing
    large amounts of data or executing multiple commands simultaneously. Parallel
    processing can greatly reduce the time required for network scans, brute-force
    attacks, or analyzing multiple targets concurrently. Understanding how to manage
    parallel tasks helps in creating more efficient and robust scripts for various
    pentesting scenarios. The skills learned can be applied to optimize resource usage
    and improve overall productivity during security assessments.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将帮助你显著加快处理大量数据或同时执行多个命令的任务。并行处理可以大大减少网络扫描、暴力破解攻击或同时分析多个目标所需的时间。理解如何管理并行任务有助于为各种渗透测试场景创建更高效、更健壮的脚本。所学的技能可以应用于优化资源使用，并提高安全评估中的整体生产力。
- en: By mastering parallel processing in Bash, pentesters can create more powerful
    and efficient scripts, allowing them to handle complex tasks and large-scale assessments
    more effectively.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 通过掌握Bash中的并行处理，渗透测试人员可以创建更强大、更高效的脚本，使他们能够更有效地处理复杂任务和大规模评估。
- en: In the next chapter, we dive into *Part 2,* where we put all of the Bash goodness
    that you’ve learned to work for a pentest.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将深入探讨*第二部分*，在这里你将运用所有学到的Bash知识进行渗透测试。
