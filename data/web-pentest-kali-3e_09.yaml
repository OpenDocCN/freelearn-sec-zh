- en: AJAX, HTML5, and Client-Side Attacks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AJAX、HTML5和客户端攻击
- en: In [Chapter 1](part0021.html#K0RQ0-d48f8b63a8cc440fbc92835fec01cc38), *Introduction
    to Penetration Testing and Web Applications*, we reviewed what AJAX and HTML5
    do and how they work. In this chapter, we will look deeper into their security
    aspects and how they can introduce or extend vulnerabilities in web applications
    and thereby pose new challenges for penetration testers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](part0021.html#K0RQ0-d48f8b63a8cc440fbc92835fec01cc38)中，我们回顾了AJAX和HTML5的功能和工作原理。在本章中，我们将深入探讨它们的安全方面以及它们如何在Web应用程序中引入或扩展漏洞，从而给渗透测试人员带来新的挑战。
- en: As stated in [Chapter 1](part0021.html#K0RQ0-d48f8b63a8cc440fbc92835fec01cc38),
    *Introduction to Penetration Testing and Web Applications*, AJAX is a combination
    of technologies, mainly JavaScript, XML and web services, which allow asynchronous
    HTTP communication between client and server.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第1章](part0021.html#K0RQ0-d48f8b63a8cc440fbc92835fec01cc38)所述，AJAX是一种组合技术，主要包括JavaScript、XML和Web服务，它们允许客户端和服务器之间进行异步HTTP通信。
- en: Crawling AJAX applications
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 爬取AJAX应用程序
- en: 'In an AJAX-based application, the links that the crawler can identify depend
    on the application''s logic flow. In this section, we will talk about three tools
    that can be used to crawl AJAX applications:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于AJAX的应用程序中，爬虫可以识别的链接取决于应用程序的逻辑流程。在本节中，我们将讨论三种用于爬取AJAX应用程序的工具：
- en: The AJAX Crawling Tool
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AJAX Crawling Tool
- en: Sprajax
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sprajax
- en: AJAX Spider OWASP ZAP
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AJAX Spider OWASP ZAP
- en: As with any automated task, crawling AJAX applications must be carefully configured,
    logged, and monitored, as they may cause calls to unexpected functions and trigger
    undesired effects on the application, affecting the contents of the database,
    for example.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何自动化任务一样，爬取AJAX应用程序必须仔细配置、记录和监控，因为它们可能会调用意外的函数并触发应用程序上的不希望的效果，例如影响数据库内容。
- en: AJAX Crawling Tool
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AJAX爬行工具
- en: '**AJAX Crawling Tool** (**ACT**) is used to enumerate AJAX applications. It
    can be integrated with web application proxies. Once crawled, the links are visible
    in the proxy interface. From there, you can test the application for vulnerabilities.
    To set up and use ACT, follow these instructions:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**AJAX Crawling Tool**（ACT）用于枚举AJAX应用程序。它可以与Web应用程序代理集成。爬取后，链接将在代理界面中可见。从那里，您可以测试应用程序的漏洞。要设置和使用ACT，请按照以下说明操作：'
- en: 'Download the ACT from the following URL:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下URL下载ACT：
- en: '[https://code.google.com/p/fuzzops-ng/downloads/list](https://code.google.com/p/fuzzops-ng/downloads/list)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://code.google.com/p/fuzzops-ng/downloads/list](https://code.google.com/p/fuzzops-ng/downloads/list)'
- en: 'After downloading ACT, start it from the bash shell using the following command:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载ACT后，使用以下命令从bash shell启动它：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This command will produce the output shown in the following screenshot:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将生成以下截图中显示的输出：
- en: '![](img/00228.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00228.jpeg)'
- en: Specify the target URL, and set the proxy setting to chain it with your proxy.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 指定目标URL，并将代理设置为与您的代理链接。
- en: In this case, use the ZAP proxy running on port `8010` on the localhost. You
    also need to specify the browser type. To start the crawling, click on the Crawl
    menu and select the Start Crawl option.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，使用运行在本地主机上端口`8010`的ZAP代理。您还需要指定浏览器类型。要开始爬取，请单击Crawl菜单，然后选择Start Crawl选项。
- en: 'Once the ACT starts **spidering** the application, new links will be visible
    in the proxy window, as shown in the following screenshot:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦ACT开始“蜘蛛爬行”应用程序，新的链接将在代理窗口中可见，如下面的截图所示：
- en: '![](img/00229.jpeg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00229.jpeg)'
- en: Sprajax
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Sprajax
- en: '**Sprajax** is a web application scanner specifically designed for applications
    built using AJAX frameworks. It''s a black box security scanner, which means that
    it doesn''t need to be preconfigured with details of the target application. It
    works by first identifying the AJAX framework used, which helps it to create test
    cases with fewer false positives. Sprajax can also identify typical application
    vulnerabilities such as XSS and SQL injections. It first identifies the functions,
    and then fuzzes them by sending random values. **Fuzzing** is the process of sending
    multiple probes to the target and analyzing their behavior in order to detect
    when one of the probes triggers a vulnerability. The URL for *OWASP Sprajax Project*
    is [https://www.owasp.org/index.php/Category:OWASP_Sprajax_Project](https://www.owasp.org/index.php/Category:OWASP_Sprajax_Project).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sprajax**是一个专门为使用AJAX框架构建的应用程序设计的Web应用程序扫描器。它是一个黑盒安全扫描器，这意味着它不需要预先配置目标应用程序的详细信息。它首先识别使用的AJAX框架，这有助于它创建具有较少误报的测试用例。Sprajax还可以识别典型的应用程序漏洞，如XSS和SQL注入。它首先识别函数，然后通过发送随机值来模糊它们。**模糊**是向目标发送多个探测并分析它们的行为，以便在其中一个探测触发漏洞时检测到的过程。*OWASP
    Sprajax项目*的URL是[https://www.owasp.org/index.php/Category:OWASP_Sprajax_Project](https://www.owasp.org/index.php/Category:OWASP_Sprajax_Project)。'
- en: Besides ACT and Sprajax, Burp Suite proxy and OWASP ZAP provide tools to crawl
    an AJAX website, but manually crawling the application is a major part of the
    reconnaissance process as the AJAX-based application may contain many hidden URLs
    which are only exposed if the logic of the application is understood.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 除了ACT和Sprajax，Burp Suite代理和OWASP ZAP提供了爬取AJAX网站的工具，但手动爬取应用程序是侦察过程的重要部分，因为基于AJAX的应用程序可能包含许多隐藏的URL，只有在了解应用程序的逻辑后才会暴露出来。
- en: The AJAX Spider – OWASP ZAP
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AJAX Spider - OWASP ZAP
- en: An AJAX Spider comes integrated with OWASP ZAP. It uses a simple methodology
    where it follows all of the links that it can find through a browser, even the
    ones generated by the client-side code, which helps it effectively spider a wide
    range of applications.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: AJAX Spider与OWASP ZAP集成。它使用一种简单的方法，通过浏览器跟踪所有可以找到的链接，甚至是由客户端代码生成的链接，从而有效地爬取各种应用程序。
- en: 'The AJAX Spider can be invoked from the Attack menu, as shown in the following
    screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从攻击菜单中调用AJAX Spider，如下面的截图所示：
- en: '![](img/00230.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00230.jpeg)'
- en: 'Next, there are parameters to configure before the Spider starts the crawling
    process. You can select the web browser to be used by the plugin. In the Options
    tab, you can also define the number of browser windows to open, crawl depth, and
    the number of threads. Be careful when modifying these options, as it can slow
    down the crawling:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在Spider开始爬行过程之前，有一些参数需要配置。您可以选择插件使用的Web浏览器。在选项选项卡中，您还可以定义要打开的浏览器窗口数量、爬行深度和线程数量。在修改这些选项时要小心，因为它可能会减慢爬行速度：
- en: '![](img/00231.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00231.jpeg)'
- en: 'When the crawling starts, a browser window opens and ZAP will automatically
    browse through the application while the results populate in the AJAX Spider tab
    in the bottom pane:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当爬行开始时，会打开一个浏览器窗口，ZAP将自动浏览应用程序，而结果将在底部窗格的AJAX Spider选项卡中显示：
- en: '![](img/00232.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00232.jpeg)'
- en: Analyzing the client-side code and storage
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析客户端代码和存储
- en: We have previously addressed how the increase in the client-side code can lead
    to potential security issues. AJAX uses **XMLHttpRequest** (**XHR**) objects to
    send asynchronous requests to the server. These XHR objects are implemented using
    client-side JavaScript code.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经讨论过客户端代码增加可能导致潜在安全问题的情况。AJAX使用XMLHttpRequest（XHR）对象向服务器发送异步请求。这些XHR对象是使用客户端JavaScript代码实现的。
- en: There are several ways to learn more about the client-side code. Viewing the
    source by pressing the *Ctrl* + *U* shortcut will reveal the underlying JavaScript
    that creates the XHR objects. If the web page and script are large, analyzing
    the application by viewing the source won't be helpful and/or practical.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以了解更多关于客户端代码的信息。通过按下Ctrl + U快捷键查看源代码将显示创建XHR对象的底层JavaScript。如果网页和脚本很大，通过查看源代码来分析应用程序将不会有帮助和/或实用。
- en: To learn more about the actual request sent by the script, you can use a web
    application proxy and intercept the traffic, but the request will reach the proxy
    after passing through a number of processes in the client's script code, which
    may include validation, encoding, encryption, and other modifications that will
    complicate your understanding of how the application works.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解脚本发送的实际请求，您可以使用Web应用程序代理并拦截流量，但请求将在通过客户端脚本代码的一系列过程后到达代理，这些过程可能包括验证、编码、加密和其他修改，这将使您对应用程序的工作原理的理解变得复杂。
- en: 'In this section, we will use the web browser''s built-in developer tools to
    analyze the behavior of the client-side code and how it affects what is seen in
    the page and what the server receives from the application. All major modern web
    browsers include tools to debug client-side code in web applications, although
    some may have more features than others. All of them include the following basic
    components:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用Web浏览器的内置开发工具来分析客户端代码的行为以及它对页面上显示的内容和服务器从应用程序接收到的内容的影响。所有主要的现代Web浏览器都包含用于调试Web应用程序中的客户端代码的工具，尽管有些浏览器可能具有更多的功能。它们都包括以下基本组件：
- en: An object inspector for elements in the page
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面元素的对象检查器
- en: A console output to display errors, warnings, and log messages
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制台输出以显示错误、警告和日志消息
- en: A script code debugger
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本代码调试器
- en: A network monitor to analyze the requests and responses
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络监视器以分析请求和响应
- en: A storage manager for cookies, cache, and HTML5 local storage
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于管理Cookie、缓存和HTML5本地存储的存储管理器
- en: Most of the browsers follow the design of the original Firefox plugin Firebug.
    We will cover Firefox's web developer tools, as it is the one included in Kali
    Linux.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数浏览器都遵循最初的Firefox插件Firebug的设计。我们将介绍Firefox的Web开发工具，因为它是Kali Linux中包含的工具。
- en: Browser developer tools
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览器开发工具
- en: 'In Firefox, as in all of the major browsers, developer tools can be activated
    using the *F12* key; other key combinations can also be used in Firefox, namely
    *Ctrl* + *C* and *Ctrl* + *I*. The following screenshot shows the settings panel,
    where you can select the tools that you want to have visible as well as other
    preferences such as color theme, available buttons, and key bindings:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在Firefox中，与所有主要浏览器一样，可以使用F12键激活开发工具；在Firefox中还可以使用其他组合键，例如Ctrl + C和Ctrl + I。下图显示了设置面板，您可以在其中选择要显示的工具以及其他首选项，如颜色主题、可用按钮和键绑定：
- en: '![](img/00233.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00233.jpeg)'
- en: The Inspector panel
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查器面板
- en: 'The Inspector panel, seen in the following screenshot, shows the HTML elements
    contained in the current page and their properties and style settings. You can
    change those properties and styles and remove or add elements as well:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 检查器面板（如下图所示）显示当前页面中包含的HTML元素及其属性和样式设置。您可以更改这些属性和样式，还可以删除或添加元素：
- en: '![](img/00234.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00234.jpeg)'
- en: The Debugger panel
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试器面板
- en: 'The Debugger panel is where you can get a deeper look at the actual JavaScript
    code. It includes a debugger where you can set breakpoints or execute the script
    step by step, while analyzing the flow of the client-side code and identifying
    vulnerable code. Each script can be viewed individually via the drop-down menu.
    The Watch side panel will display the values of the variables as they change during
    the execution of the script. The breakpoints set are visible beneath the Breakpoints
    panel, as shown in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器面板是您可以深入了解实际JavaScript代码的地方。它包括一个调试器，您可以在其中设置断点或逐步执行脚本，同时分析客户端代码的流程并识别出有漏洞的代码。每个脚本都可以通过下拉菜单单独查看。Watch侧面板将显示脚本执行过程中变量的值。设置的断点在Breakpoints面板下可见，如下图所示：
- en: '![](img/00235.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00235.jpeg)'
- en: 'A recent addition to the Debugger panel is the ability to format source code
    in a way that is more readable, as many JavaScript libraries are loaded as a single
    line of text. In Firefox, this option is called Prettify Source, and it can be
    activated per file by right-clicking over the code and selecting it from the context
    menu:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器面板的一个最新添加功能是能够以更易读的方式格式化源代码，因为许多JavaScript库加载为单行文本。在Firefox中，此选项称为Prettify
    Source，可以通过右键单击代码并从上下文菜单中选择来激活它：
- en: '![](img/00236.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00236.jpeg)'
- en: The Console panel
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制台面板
- en: 'The Console panel displays logs, errors, and warnings triggered by the HTML
    elements and the execution of script code. It also includes a JavaScript command-line
    interpreter, which is visible at the bottom of the window. It allows you to execute
    JavaScript code within the context of the current website:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台面板显示由HTML元素和脚本代码执行触发的日志、错误和警告。它还包括一个JavaScript命令行解释器，可在窗口底部可见。它允许您在当前网站的上下文中执行JavaScript代码：
- en: '![](img/00237.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00237.jpeg)'
- en: The Network panel
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络面板
- en: 'The Network panel shows all of the network traffic generated by the current
    web page. It lets you see where the page is communicating to and what requests
    it is making. It also includes a visual representation of how much time it takes
    to respond to and load each request:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 网络面板显示当前网页生成的所有网络流量。它可以让您看到页面正在与哪里通信以及它正在进行哪些请求。它还包括对每个请求的响应和加载所需时间的可视化表示：
- en: '![](img/00238.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00238.jpeg)'
- en: 'If you select any request, you will see the detail of the headers and body
    as well as the response and cookies:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择任何请求，您将看到头部和正文的详细信息，以及响应和cookie：
- en: '![](img/00239.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00239.jpeg)'
- en: The Storage panel
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储面板
- en: 'The Storage panel is also a recent addition, created to allow interaction with
    the HTML5 storage options and cookies. Here you can browse and edit cookies, web
    storage, indexed databases, and cache storage:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 存储面板也是最近添加的，用于允许与HTML5存储选项和cookie进行交互。在这里，您可以浏览和编辑cookie、Web存储、索引数据库和缓存存储：
- en: '![](img/00240.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00240.jpeg)'
- en: The DOM panel
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DOM面板
- en: 'The DOM panel lets you view and change the values of all DOM elements in the
    context of the current page:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: DOM面板允许您查看和更改当前页面上所有DOM元素的值：
- en: '![](img/00241.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00241.jpeg)'
- en: HTML5 for penetration testers
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML5用于渗透测试
- en: The latest version of the HTML standard comes with many new features that may
    help the developers prevent security flaws and attacks on their applications.
    However, it also poses new challenges for the design and implementation of new
    functionality, which may lead to applications opening up new and unexpected opportunities
    to attackers due to the use of not-yet-fully understood new technology.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: HTML标准的最新版本带来了许多新功能，这些功能可能有助于开发人员防止其应用程序的安全缺陷和攻击。然而，它也给新功能的设计和实现带来了新的挑战，这可能导致应用程序由于使用尚未完全理解的新技术而向攻击者开放新的和意想不到的机会。
- en: In general, penetration testing an HTML5 application is no different than testing
    any other web application. In this section, we will cover some of the key features
    of HTML5, their implication for penetration testing, and some ways that applications
    implementing these features can be attacked.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，渗透测试HTML5应用程序与测试任何其他Web应用程序没有区别。在本节中，我们将介绍HTML5的一些关键特性，它们对渗透测试的影响，以及实现这些特性的应用程序可能受到攻击的一些方式。
- en: New XSS vectors
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新的XSS向量
- en: '**Cross-Site Scripting** (**XSS**) is a major issue in HTML5 applications,
    as JavaScript is used to interact with all of the new features from client-side
    storage to WebSockets to Web Messaging.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**跨站脚本**（**XSS**）是HTML5应用程序中的一个重大问题，因为JavaScript用于与从客户端存储到WebSockets到Web Messaging的所有新功能进行交互。'
- en: Also, HTML includes new elements and tags that may be used as attack vectors
    for XSS.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，HTML包括可以用作XSS攻击向量的新元素和标签。
- en: New elements
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新元素
- en: 'Video and audio are new elements that can be put into web pages using the `<video>`
    and `<audio>` tags, these tags can also be used in an XSS attack with the `onerror`
    property, just as `<img>`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 视频和音频是可以使用`<video>`和`<audio>`标签放入网页的新元素，这些标签也可以与`onerror`属性一起在XSS攻击中使用，就像`<img>`一样：
- en: '[PRE1]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: New properties
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新属性
- en: 'Form elements have new properties that can be used to execute JavaScript code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 表单元素具有可以用于执行JavaScript代码的新属性：
- en: '[PRE2]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `autofocus` property specifies that the `<input>` element should get the
    focus automatically when the page loads, and `onfocus` sets the event handler
    for when the `<input>` element gets the focus. Combining these two actions ensures
    the execution of the script when the page loads:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`autofocus`属性指定在页面加载时`<input>`元素应自动获得焦点，`onfocus`设置当`<input>`元素获得焦点时的事件处理程序。结合这两个操作可以确保在页面加载时执行脚本：'
- en: '[PRE3]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'An event will be triggered when a change (value modification) is done to the
    form with the `form1` ID. The handler for that event is the `XSS` payload:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当对具有`form1` ID的表单进行更改（值修改）时，将触发一个事件。该事件的处理程序是`XSS`负载：
- en: '[PRE4]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The form's action indicates the place where the form's data is going to be sent.
    In this example, a button is setting the action to an XSS payload when it is pressed.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 表单的action指示表单数据将被发送到的位置。在这个例子中，当按钮被按下时，它将action设置为一个XSS负载。
- en: Local storage and client databases
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地存储和客户端数据库
- en: 'Before HTML5, the only mechanism allowing web applications to store information
    on the client side was a cookie. There were also some workarounds, such as Java
    and Adobe Flash, which brought many security concerns along with them. HTML5 now
    has the capability of storing structured and nonstructured persistent data in
    the client with two new features: Web Storage and IndexedDB.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML5之前，允许Web应用程序在客户端存储信息的唯一机制是cookie。还有一些解决方法，如Java和Adobe Flash，但它们带来了许多安全问题。HTML5现在具有在客户端存储结构化和非结构化持久数据的能力，其中包括两个新功能：Web存储和IndexedDB。
- en: As a penetration tester, you need to be aware of any usage of client-side storage
    by the application. If the information stored there is sensitive, make sure that
    it is properly protected and encrypted. Also, test whether stored information
    is used for operations further along in the application, and if it can be tampered
    with to generate an XSS scenario, for example. Finally, check to be sure that
    such information is correctly validated on input and sanitized on output.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 作为渗透测试人员，您需要注意应用程序对客户端存储的任何使用。如果存储的信息是敏感的，请确保它得到适当的保护和加密。还要测试存储的信息是否在应用程序中进一步使用，并且是否可以篡改以生成XSS场景。最后，请确保此类信息在输入时得到正确验证，并在输出时进行清理。
- en: Web Storage
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web Storage
- en: '**Web Storage** is HTML5''s way of allowing the applications to store non-structured
    information on the client other than cookies. Web Storage can be of two types:
    `localStorage`, which doesn''t have an expiration, and `sessionStorage`, which
    is deleted when the session ends. Web Storage is managed by the `window.localStorage`
    and `window.sessionStorage` by the JavaScript objects.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**Web Storage**是HTML5允许应用程序在客户端存储非结构化信息的方式，除了cookie之外。Web Storage可以是两种类型：`localStorage`（没有过期时间）和`sessionStorage`（会在会话结束时删除）。Web
    Storage由JavaScript对象`window.localStorage`和`window.sessionStorage`管理。'
- en: 'The following screenshot shows how Web Storage, the `localStorage` type in
    this case, can be seen using the browser''s developer tools. As can be seen in
    the screenshot, information is stored using pairs of keys and values:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的屏幕截图显示了如何使用浏览器的开发者工具查看Web Storage，本例中的类型为`localStorage`。如屏幕截图所示，信息使用键值对存储：
- en: '![](img/00242.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00242.jpeg)
- en: IndexedDB
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IndexedDB
- en: For structured storage (information organized in tables containing elements
    of the same type), HTML5 has **IndexedDB**.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于结构化存储（以表为单位组织的信息），HTML5提供了**IndexedDB**。
- en: Before IndexedDB, Web SQL Database was also used as part of HTML5, but that
    was deprecated in 2010.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在IndexedDB之前，Web SQL Database也被用作HTML5的一部分，但在2010年被弃用。
- en: 'The following screenshot shows an example of an indexed database stored by
    a web application and seen using the browser''s developer tools:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的屏幕截图显示了一个由Web应用程序存储的索引数据库的示例，可以使用浏览器的开发者工具查看：
- en: '![](img/00243.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00243.jpeg)
- en: Web Messaging
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web Messaging
- en: '**Web Messaging** permits communication between two documents that do not require
    DOM, and it can be used across domains (sometimes called, **Cross-Domain Messaging**).
    For an application to receive messages, it needs to set up an event handler that
    processes the incoming messages. The event triggered on receiving a message has
    the following properties:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**Web Messaging**允许两个不需要DOM的文档之间进行通信，并且可以跨域使用（有时称为**跨域消息传递**）。要接收消息，应用程序需要设置一个事件处理程序来处理传入的消息。接收消息时触发的事件具有以下属性：'
- en: '`data`: The message data'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`：消息数据'
- en: '`origin`: The domain name and port of the sender'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`origin`：发送者的域名和端口'
- en: '`lastEventId`: The unique ID of the current message event'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lastEventId`：当前消息事件的唯一ID'
- en: '`source`: This contains a reference to the document''s window that originated
    the message'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`source`：包含引发消息的文档窗口的引用'
- en: '`ports`: This is an array containing any `MessagePort` objects sent with the
    message'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ports`：这是一个包含与消息一起发送的任何`MessagePort`对象的数组'
- en: '[PRE5]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following example shows an event handler that does a proper origin validation:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例显示了一个事件处理程序，它进行了正确的来源验证：
- en: '[PRE7]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: WebSockets
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebSockets
- en: Maybe the most radical addition in HTML5 is the introduction of **WebSockets**
    as a persistent bidirectional communication between the client and server over
    the HTTP protocol, which is a stateless protocol.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5中最激进的新增功能可能是引入了**WebSockets**，它是客户端和服务器之间基于HTTP协议的持久双向通信，HTTP协议是无状态的协议。
- en: 'As mentioned in [Chapter 1](part0021.html#K0RQ0-d48f8b63a8cc440fbc92835fec01cc38),
    *Introduction to Penetration Testing and Web Applications*, WebSockets communication
    starts with the handshake between client and server. In the code shown in the
    following screenshot, taken from Damn Vulnerable Web Sockets ([https://github.com/snoopysecurity/dvws](https://github.com/snoopysecurity/dvws)),
    you can see a basic JavaScript implementation of WebSockets:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第1章](part0021.html#K0RQ0-d48f8b63a8cc440fbc92835fec01cc38)所述，*渗透测试和Web应用程序简介*，WebSockets通信始于客户端和服务器之间的握手。在下面的屏幕截图中，取自Damn
    Vulnerable Web Sockets（[https://github.com/snoopysecurity/dvws](https://github.com/snoopysecurity/dvws)），您可以看到WebSockets的基本JavaScript实现：
- en: '![](img/00244.jpeg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00244.jpeg)
- en: 'This code starts a WebSockets connection as soon as the HTML document is loaded.
    It then sets the event handlers for when the connection is established, when a
    message arrives, and when the connection closes or an error occurs. When the page
    loads the request to initiate the connection, it looks like this:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码在HTML文档加载后立即启动WebSockets连接。然后设置连接建立时、消息到达时以及连接关闭或发生错误时的事件处理程序。当页面加载请求以启动连接时，它看起来像这样：
- en: '![](img/00245.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00245.jpeg)
- en: 'When the connection is accepted, the server will respond as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当连接被接受时，服务器将作出以下响应：
- en: '![](img/00246.jpeg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00246.jpeg)
- en: Notice that `Sec-WebSocket-Key` in the request and `Sec-WebSocket-Accept` in
    the response are used only for the sake of the handshake and starting the connection.
    They are not an authentication or authorization control. This is something to
    which a penetration tester must pay attention. WebSockets, by themselves, don't
    provide any authentication or authorization control; this needs to be done at
    the application level.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，请求中的`Sec-WebSocket-Key`和响应中的`Sec-WebSocket-Accept`仅用于握手和启动连接。它们不是身份验证或授权控制。这是渗透测试人员必须注意的事项。WebSockets本身不提供任何身份验证或授权控制；这需要在应用程序级别完成。
- en: 'Also, the connection implemented in the previous example is not encrypted.
    This means that it can be sniffed and/or intercepted through **man-in-the-middle**
    (**MITM**) attacks. The next screenshot presents a traffic capture with Wireshark
    showing the exchange between client and server:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，前面示例中实现的连接没有加密。这意味着它可以通过中间人攻击进行嗅探和/或拦截。下一个截图显示了使用Wireshark捕获的流量，显示了客户端和服务器之间的交换：
- en: '![](img/00247.jpeg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00247.jpeg)'
- en: The first two packets are the WebSockets handshake. After that, the message
    interchange starts. In this case, the client sends a name and the server responds
    `Hello <NAME> :) How are you?`. The data sent from client to server should be
    masked, as per the protocol definition (RFC 6455, [http://www.rfc-base.org/txt/rfc-6455.txt](http://www.rfc-base.org/txt/rfc-6455.txt)),
    and the server must close the connection if it receives a non-masked message.
    On the contrary, messages from server to client are not masked, and the client
    closes the connection if masked data is received. **Masking** is not to be considered
    a security measure, as the masking key is included within the packet frame.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个数据包是WebSockets握手。之后，消息交换开始。在这种情况下，客户端发送一个名称，服务器回复`Hello <NAME> :) How are
    you?`。按照协议定义（RFC 6455，[http://www.rfc-base.org/txt/rfc-6455.txt](http://www.rfc-base.org/txt/rfc-6455.txt)），从客户端发送到服务器的数据应该被掩码处理，如果接收到非掩码消息，服务器必须关闭连接。相反，从服务器发送到客户端的消息不会被掩码处理，如果接收到掩码数据，客户端将关闭连接。掩码处理不应被视为安全措施，因为掩码密钥包含在数据包帧中。
- en: Intercepting and modifying WebSockets
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拦截和修改WebSockets
- en: Web proxies such as Burp Suite and OWASP ZAP can record WebSockets communication.
    They are also able to intercept and allow the addition of incoming and outgoing
    messages. OWASP ZAP also allows resending messages and use of the Fuzzer tool
    to identify vulnerabilities.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite和OWASP ZAP等Web代理可以记录WebSockets通信。它们还能够拦截并允许添加传入和传出的消息。OWASP ZAP还允许重新发送消息并使用Fuzzer工具来识别漏洞。
- en: 'In Burp Suite''s proxy, there is a tab that shows the history of WebSockets
    communication. The regular Intercept option in the proxy can be used to intercept
    and modify incoming and outgoing messages. It doesn''t include the capability
    of using Repeater to resend a message. The following screenshot shows a message
    being intercepted in Burp Suite:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在Burp Suite的代理中，有一个选项卡显示了WebSockets通信的历史记录。代理中的常规拦截选项可用于拦截和修改传入和传出的消息。它不包括使用Repeater重新发送消息的功能。下一个截图显示了在Burp
    Suite中拦截的消息：
- en: '![](img/00248.jpeg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00248.jpeg)'
- en: 'OWASP ZAP also has a special history tab for WebSockets. In that tab, one can
    set up breakpoints (like Burp Suite''s Intercept) by right-clicking on any of
    the messages and selecting Break... . A new dialog will pop up where the break
    parameters and conditions can be set, as shown in the following screenshot:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP ZAP还有一个专门的WebSockets历史选项卡。在该选项卡中，可以通过右键单击任何消息并选择Break...来设置断点（类似于Burp
    Suite的Intercept）。将弹出一个新对话框，可以设置断点参数和条件，如下图所示：
- en: '![](img/00249.jpeg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00249.jpeg)'
- en: 'When right-clicking on messages, there is also a Resend option, which opens
    the selected message for modification and resending. This works for both incoming
    and outgoing traffic. Thus, when resending an outgoing message, OWASP ZAP will
    deliver the message to the browser. The next screenshot shows the Resend dialog:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在右键单击消息时，还有一个Resend选项，它可以打开所选消息以进行修改和重新发送。这适用于传入和传出的流量。因此，当重新发送传出消息时，OWASP ZAP将将消息传递给浏览器。下一个截图显示了重新发送对话框：
- en: '![](img/00250.jpeg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00250.jpeg)'
- en: If you right-click the text in Resend, one of the options that appears is to
    fuzz that message.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在Resend中右键单击文本，会出现一个选项，可以对该消息进行模糊处理。
- en: 'The next screenshot shows how to add fuzzing strings to the default location.
    Here we are adding only a small set of XSS tests:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个截图显示了如何向默认位置添加模糊字符串。在这里，我们只添加了一小组XSS测试：
- en: '![](img/00251.jpeg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00251.jpeg)'
- en: 'When we run the Fuzzer, the corresponding tab opens and shows the successful
    results (that is, the results that got a response resembling a vulnerable application):'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行Fuzzer时，相应的选项卡会打开，并显示成功的结果（即，得到类似易受攻击应用程序的响应的结果）：
- en: '![](img/00252.jpeg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00252.jpeg)'
- en: Other relevant features of HTML5
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML5的其他相关功能
- en: As said before, HTML5 incorporates many features in different areas that may
    affect the application's security posture. In this section we will briefly cover
    other features presented by HTML5 that may also have an impact on how and where
    we look for security flaws.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，HTML5在不同领域中引入了许多功能，可能会影响应用程序的安全性。在本节中，我们将简要介绍HTML5提供的其他功能，这些功能也可能对我们寻找安全漏洞的方式和位置产生影响。
- en: Cross-Origin Resource Sharing (CORS)
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨域资源共享（CORS）
- en: 'When enabled in a server, the header `Access-Control-Allow-Origin` is sent
    in requests. This header tells the client that the server allows requests through
    XMLHttpRequest from origins (domains and ports) other than the one hosting the
    application. Having the following header allows requests from any source, making
    it possible for an attacker to use JavaScript to bypass CSRF protection:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器启用时，请求中会发送头部`Access-Control-Allow-Origin`。该头部告诉客户端，服务器允许来自托管应用程序的源（域名和端口）以外的源的XMLHttpRequest请求。拥有以下头部允许来自任何源的请求，使得攻击者可以使用JavaScript绕过CSRF保护：
- en: '[PRE8]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Geolocation
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地理位置
- en: Modern web browsers can grab geographic location data from the devices in which
    they are installed, be it the Wi-Fi network in a computer or the GPS and cellular
    information in a mobile phone. An application using HTML5 and vulnerable to XSS
    may expose location data of its users.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现代Web浏览器可以从安装了它们的设备中获取地理位置数据，无论是计算机中的Wi-Fi网络还是手机中的GPS和蜂窝信息。使用HTML5并且易受XSS攻击的应用程序可能会暴露其用户的位置数据。
- en: Web Workers
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web Workers
- en: '**Web Workers** are JavaScript code running in the background that have no
    access to the DOM of the page calling them. Apart from being able to run local
    tasks in the client, they can use the XMLHttpRequest object to perform in-domain
    and CORS requests.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**Web Workers**是在后台运行的JavaScript代码，无法访问调用它们的页面的DOM。除了能够在客户端运行本地任务外，它们还可以使用XMLHttpRequest对象执行域内和CORS请求。'
- en: Nowadays, it's becoming increasingly popular for web applications to use JavaScript
    code in order to use a client's processing power to mine cryptocurrencies. Most
    of the time, it is because these applications have been compromised. Web Workers
    present a unique opportunity for attackers if the application is vulnerable to
    XSS, especially if it uses user input to send messages to Web Workers or to create
    them.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，越来越多的Web应用程序使用JavaScript代码来利用客户端的处理能力来挖掘加密货币。大多数情况下，这是因为这些应用程序已经被入侵。如果应用程序容易受到XSS攻击，Web
    Workers为攻击者提供了独特的机会，特别是如果它使用用户输入来向Web Workers发送消息或创建它们。
- en: 'AppSec Labs has created a toolkit, *HTML5 Attack Framework* ([https://appsec-labs.com/html5/](https://appsec-labs.com/html5/)),
    for testing specific features of HTML5 applications such as the following:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: AppSec Labs创建了一个工具包，*HTML5 Attack Framework* ([https://appsec-labs.com/html5/](https://appsec-labs.com/html5/))，用于测试HTML5应用程序的特定功能，例如以下功能：
- en: Clickjacking
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击劫持
- en: CORS
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CORS
- en: HTML5 DoS
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML5 DoS
- en: Web Messaging
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web消息传递
- en: Storage Dumper
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储转储器
- en: Bypassing client-side controls
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绕过客户端控制
- en: With all of the capabilities of modern web applications on the client side,
    it's sometimes easier for developers to delegate checks and controls to client
    code executed by the browser, thus freeing the server of that extra processing.
    At first, this may seem like a good idea; that is, letting the client handle all
    of the data presentation, validation of user input, and formatting and use the
    server only to process business logic. However, when the client is a web browser,
    which is a multipurpose tool that is not used exclusively for one application,
    and which can use a proxy to tunnel all communications that can then be tampered
    with and controlled by the user, developers need to reinforce all security-related
    tasks such as authentication, authorization, validation, and integrity checks
    on the server side. As a penetration tester, you will find plenty of applications
    that fail to do this consistently.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 随着现代Web应用程序在客户端的能力，开发人员有时更容易将检查和控制委托给由浏览器执行的客户端代码，从而使服务器免于额外的处理。起初，这可能看起来是个好主意；也就是说，让客户端处理所有数据呈现、用户输入验证、格式化，并仅使用服务器处理业务逻辑。然而，当客户端是一个Web浏览器时，它是一个多功能工具，不仅仅用于一个应用程序，并且可以使用代理来隧道化所有通信，然后可以被用户篡改和控制，开发人员需要在服务器端加强所有与安全相关的任务，如身份验证、授权、验证和完整性检查。作为渗透测试人员，您会发现很多应用程序在这方面做得不够一致。
- en: A very common scenario is when applications show or hide GUI elements and/or
    data depending on the user's profile and privilege level. Many times, all of these
    elements and data are already retrieved from the server, and they are just disabled
    or hidden using style properties in the HTML code. An attacker or penetration
    tester could then use the Inspector option from the browser's developer tools
    to change those properties and gain access to the hidden elements.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常常见的情况是应用程序根据用户的配置文件和权限级别显示或隐藏GUI元素和/或数据。很多时候，所有这些元素和数据已经从服务器检索到，并且只是使用HTML代码中的样式属性禁用或隐藏。攻击者或渗透测试人员可以使用浏览器的开发者工具中的检查器选项更改这些属性并访问隐藏的元素。
- en: 'Let''s review an example of this using *Mutillidae II''s Client-side Control
    Challenge* (Others | Client-side "Security" Controls). It is a form with many
    input fields of different types, some of them disabled, hidden, or moving when
    you want to write on them. If you just fill some of them in and click Submit,
    you will get an error. You need to complete all of them:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过*Mutillidae II的客户端控制挑战*（其他 | 客户端“安全”控制）来回顾一个例子。这是一个具有许多不同类型的输入字段的表单，其中一些被禁用、隐藏或在您想要写入它们时移动。如果您只填写其中一些字段并点击提交，您将收到一个错误。您需要填写所有字段：
- en: '![](img/00253.jpeg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00253.jpeg)'
- en: 'Press the *F12* key to open the developer tools, or right-click on one of the
    disabled fields and select Inspect Element. The latter will also open the developer
    tools, but it will locate you within Inspector as well, and in the area specific
    to the element that you selected:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 按下*F12*键打开开发者工具，或右键点击其中一个禁用的字段并选择检查元素。后者也会打开开发者工具，但它还会将您定位到检查器中的特定区域，并且是您选择的元素所在的区域：
- en: '![](img/00254.jpeg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00254.jpeg)'
- en: 'You can see, for example, that the Disabled Text Box has a property `disabled`
    with a value of `1`. One may think that changing the value to `0` should enable
    it, but that''s not how it works. Having such property with any value makes the
    browser show the input as disabled. So double-click on the property name and delete
    it. Now you can add text to it:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以看到禁用的文本框具有一个属性`disabled`，其值为`1`。有人可能认为将值更改为`0`应该启用它，但事实并非如此。任何值都会使浏览器将输入显示为禁用状态。因此，双击属性名称并将其删除。现在您可以向其添加文本：
- en: '![](img/00255.jpeg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00255.jpeg)'
- en: 'You can continue altering the properties of all of the fields so that you can
    fill them. You will also find a Password field. If you inspect it, you will see
    that even when it shows only dots in the page, it actually contains a cleartext
    value, which in a real-application may be an actual password:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以继续更改所有字段的属性，以便填写它们。您还会找到一个密码字段。如果您检查它，您会发现即使页面上只显示点，它实际上包含明文值，在实际应用程序中可能是一个实际的密码：
- en: '![](img/00256.jpeg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00256.jpeg)'
- en: 'Finally, when you complete all of the fields and click Submit again, an alert
    pops up saying that some field doesn''t have the correct format:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当您填写完所有字段并再次点击提交时，会弹出一个警告，提示某些字段格式不正确：
- en: '![](img/00257.jpeg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00257.jpeg)'
- en: 'This message can be traced by going to the Debugger panel in the developer
    tools, and then by entering an exclamation mark `!` in the search box to search
    in all of the files, followed by part of the text you are seeking. The function
    in `index.php` does the validation:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过进入开发者工具中的调试器面板，并在搜索框中输入感叹号`!`来搜索所有文件中的部分文本，从而追踪此消息。`index.php`中的函数执行验证操作：
- en: '![](img/00258.jpeg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00258.jpeg)'
- en: 'Notice how this function uses regular expressions to validate the inputs, and
    these regular expressions are formed so that they only match one character string.
    Here, you can do two things—you can set a breakpoint after the regular expressions
    are defined and change their values in runtime, and/or you can fill all of the
    fields with values that match those checks so that the request can be sent and
    then intercept the request with a proxy and edit it in the proxy. We will now
    do the latter:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此函数使用正则表达式验证输入，并且这些正则表达式被形成为仅匹配一个字符字符串。在这里，您可以做两件事：您可以在定义正则表达式之后设置断点并在运行时更改其值，和/或者您可以使用与这些检查匹配的值填充所有字段，以便可以发送请求，然后使用代理拦截请求并在代理中进行编辑。现在我们将进行后者：
- en: '![](img/00259.jpeg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00259.jpeg)'
- en: You can enter any value you want in any field. You can even add or remove fields
    if you believe that it's relevant to your tests.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在任何字段中输入任何值。如果您认为这与您的测试相关，请甚至可以添加或删除字段。
- en: Thus, using the browser's developer tools, you can easily enable, disable, show,
    or hide any element in a web page. It also lets you monitor, analyze, and control
    the execution flow of JavaScript code. Even if there is a complex validation process
    that is inefficient timewise to alter or bypass, you can adjust the input out
    to it and use a proxy to alter it once the request leaves the browser.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使用浏览器的开发者工具，您可以轻松启用、禁用、显示或隐藏网页中的任何元素。它还可以让您监视、分析和控制JavaScript代码的执行流程。即使存在一个耗时低效的复杂验证过程，您也可以调整输入并在请求离开浏览器后使用代理进行修改。
- en: Mitigating AJAX, HTML5, and client-side vulnerabilities
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓解AJAX、HTML5和客户端漏洞
- en: The key to preventing client-side vulnerabilities, or at least to minimizing
    their impact, is *never to trust external information*, be it from a client application,
    web service, or the server inputs. These must always be validated before processing
    them, and all of the data being shown to users must be properly sanitized and
    formatted before displaying it in any format (such as HTML, CSV, JSON, and XML).
    It is a good practice to do a validation layer on the client-side, but that cannot
    be a replacement for server-side validation.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 防止客户端漏洞的关键，或者至少是最小化其影响的关键，是*永远不要相信外部信息*，无论是来自客户端应用程序、Web服务还是服务器输入。在处理之前，这些信息必须始终进行验证，并且在以任何格式（如HTML、CSV、JSON和XML）显示给用户之前，所有显示给用户的数据必须经过适当的清理和格式化。在客户端进行验证是一个好的实践，但不能替代服务器端验证。
- en: The same thing happens with authentication and authorization checks. Some effort
    can be made to reduce the number of invalid requests that reach the server, but
    the server-side code must verify that the requests that reach it are indeed valid
    and allowed to proceed to the user's session that is sending such requests.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证和授权检查也是如此。可以采取一些措施来减少到达服务器的无效请求的数量，但服务器端代码必须验证到达的请求确实是有效的，并且被允许继续到发送此类请求的用户会话。
- en: For AJAX and HTML5, correctly configuring the server and parameters, such as
    cross origin, content-type headers, and cookie flags will help in preventing a
    good number of attacks from causing damage.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 对于AJAX和HTML5，正确配置服务器和参数，如跨域、内容类型头和Cookie标志，将有助于防止许多攻击造成损害。
- en: Summary
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about crawling AJAX applications. We then moved
    on to reviewing the changes that HTML5 poses to penetration testers in terms of
    new functionality and new attack vectors. Then, we reviewed some techniques that
    let you bypass security controls implemented on the client-side. In the final
    section, we reviewed some key issues to take into account in order to prevent
    AJAX, HTML5, and client-side vulnerabilities.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了如何爬取AJAX应用程序。然后，我们继续审查HTML5对渗透测试人员的影响，包括新功能和新的攻击向量。然后，我们回顾了一些绕过客户端实施的安全控制的技术。在最后一节中，我们回顾了一些需要考虑的关键问题，以防止AJAX、HTML5和客户端漏洞。
- en: In the next chapter, you will learn about more everyday security flaws in web
    applications.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将了解更多关于Web应用程序中的日常安全漏洞。
