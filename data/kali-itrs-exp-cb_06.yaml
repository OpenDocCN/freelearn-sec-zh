- en: Chapter 6. Web Application Vulnerability Assessment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章. Web应用程序漏洞评估
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Running vulnerable web applications in Docker
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Docker中运行易受攻击的Web应用程序
- en: Using w3af for vulnerability assessment
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用w3af进行漏洞评估
- en: Using Nikto for web server assessment
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Nikto进行Web服务器评估
- en: Using Skipfish for vulnerability assessment
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Skipfish进行漏洞评估
- en: Using Burp Proxy to intercept HTTP traffic
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Burp Proxy拦截HTTP流量
- en: Using Burp Intruder for customized attack automation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Burp Intruder进行定制攻击自动化
- en: Using Burp Sequencer to check the session randomness
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Burp Sequencer检查会话随机性
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: A vulnerability assessment phase is the process of finding vulnerabilities on
    target machines.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞评估阶段是在目标机器上查找漏洞的过程。
- en: Performing vulnerability assessment simultaneously on web applications and the
    network together can be more useful as you will correlate different vulnerabilities
    and information gathered from network infrastructure and other protocols, such
    as SSH, telnet, databases, SNMP, SMB, and FTP. This will give you a better understanding
    of the purpose of the specific web application and its use within the organization.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 同时在Web应用程序和网络上执行漏洞评估可能更有用，因为您将能够将来自网络基础设施和其他协议（如SSH、telnet、数据库、SNMP、SMB和FTP）的不同漏洞和信息相关起来。这将让您更好地了解特定Web应用程序的目的及其在组织内的用途。
- en: However, to make things easier for the audience, we will specifically cover
    tools and techniques to perform vulnerability assessments on web applications.
    The recipes in this chapter are structured to enable you to find all the tools
    and techniques required for scanning and locating vulnerabilities within a web
    application in one place.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，为了让观众更容易理解，我们将专门介绍在Web应用程序上执行漏洞评估所需的工具和技术。本章的配方结构旨在使您能够在一个地方找到扫描和定位Web应用程序中所需的所有工具和技术。
- en: The vulnerability assessment phase is like a preparation phase in which we will
    find the vulnerabilities. To ensure that we find all the possible vulnerabilities
    lying within an application, a comprehensive test has to be performed. However,
    at times, using automated scanning tools generates false positives. For a successful
    pentest, it is of utmost importance that we remove all the false positives using
    the manual vulnerability assessment approach.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞评估阶段就像一个准备阶段，在这个阶段我们将找到漏洞。为了确保我们找到应用程序中所有可能的漏洞，必须进行全面的测试。然而，有时使用自动化扫描工具会产生误报。为了成功进行渗透测试，非常重要的是我们使用手动漏洞评估方法去除所有误报。
- en: Note
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Do not run the tools demonstrated in this chapter against public websites that
    are not your own and are not on your own servers. In this case, we have set up
    three vulnerable web applications over the cloud in order to demonstrate the tools/techniques
    in this chapter. *Be careful!*
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 不要对不是您自己的公共网站或不在您自己服务器上的网站运行本章演示的工具。在这种情况下，我们在云上设置了三个易受攻击的Web应用程序，以演示本章中的工具/技术。*小心！*
- en: These web applications are OWASP bricks, Damn Vulnerable Web Application (DVWA),
    and WordPress Version 2.2 (Vulnerable!).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这些Web应用程序是OWASP砖块、Damn Vulnerable Web Application (DVWA)和WordPress Version 2.2
    (易受攻击!)。
- en: These applications are vulnerable by design and hence we do not suggest that
    you install these web applications directly on your server or even on your local
    desktop/laptop. For the purpose of demonstration, we have installed these three
    vulnerable web applications in one Docker container and hosted it on the Docker
    hub for you to pull and use. Check out the next recipe.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些应用程序是有意设计成易受攻击的，因此我们不建议您直接在服务器上甚至在本地桌面/笔记本电脑上安装这些Web应用程序。为了演示目的，我们已经在一个Docker容器中安装了这三个易受攻击的Web应用程序，并将其托管在Docker
    hub上供您拉取和使用。查看下一个配方。
- en: Running vulnerable web applications in Docker
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Docker中运行易受攻击的Web应用程序
- en: 'In the previous recipe, we downloaded Docker and ran a hello-world example
    container. In this recipe, we will download a Docker container that we have prepared
    for you to download and use. It''s an already configured and ready-to-use container
    that has three vulnerable web applications:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个配方中，我们下载了Docker并运行了一个hello-world示例容器。在这个配方中，我们将下载一个我们为您准备好的Docker容器，供您下载和使用。这是一个已经配置好并准备好使用的容器，其中包含三个易受攻击的Web应用程序：
- en: OWASP bricks
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP砖块
- en: Damn vulnerable web applications
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Damn Vulnerable Web Applications
- en: WordPress 2.2 (Vulnerable!)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WordPress 2.2 (易受攻击!)
- en: Getting ready
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need Kali Linux running on Oracle Virtualbox
    or VMware and an Internet connection. This recipe is closely based on the previous
    recipe; it is highly recommended that you follow the previous recipe before moving
    on to this recipe. If you already have Docker installed on your Kali, you can
    directly start with this recipe.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此配方，您需要在Oracle Virtualbox或VMware上运行Kali Linux并连接到互联网。这个配方与前一个配方密切相关；强烈建议您在继续本配方之前先遵循前一个配方。如果您的Kali上已经安装了Docker，您可以直接开始本配方。
- en: How to do it...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'For this recipe, you need to perform the following steps:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，您需要执行以下步骤：
- en: 'Open the terminal and pull the Docker container image, as shown in the following
    command:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并拉取Docker容器镜像，如下命令所示：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You will see the different layers being downloaded, as shown in the following
    screenshot:![How to do it...](img/image_06_001.jpg)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到不同的层被下载，如下截图所示：![操作步骤...](img/image_06_001.jpg)
- en: After the container image has been downloaded successfully, you will see a screen
    similar to what is shown in the following screenshot:![How to do it...](img/image_06_002.jpg)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功下载容器镜像后，您将看到类似于以下截图的屏幕：![操作步骤...](img/image_06_002.jpg)
- en: 'Now, run the downloaded Docker container image using the following command:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用以下命令运行已下载的Docker容器镜像：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: On running the preceding command, you will see the following output:![How to
    do it...](img/image_06_003.jpg)
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行上述命令后，您将看到以下输出：![操作步骤...](img/image_06_003.jpg)
- en: If you see the same output, it means that your Docker container is up and running.
    Keep this terminal running and do not close it and do not press *Ctrl* + *C*.
    Pressing *Ctrl* + *C* will stop the running container; for now, keep it running
    and minimize the terminal so that you don't close it accidently.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您看到相同的输出，这意味着您的Docker容器正在运行。保持此终端运行，不要关闭它，也不要按*Ctrl* + *C*。按*Ctrl* + *C*将停止运行的容器；现在，保持它运行并最小化终端，以免意外关闭它。
- en: To see the vulnerable web applications installed on this container, you will
    first need to find out the current IP address of the running container.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看安装在此容器上的易受攻击的Web应用程序，您首先需要找出正在运行的容器的当前IP地址。
- en: 'To find out the current IP address of the running container, you will first
    need to list the running container in a new terminal window using the following
    command:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要找出正在运行的容器的当前IP地址，您首先需要在新的终端窗口中使用以下命令列出正在运行的容器：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output of this command will be as shown in the following screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令的输出将如下面的屏幕截图所示：
- en: '![How to do it...](img/image_06_004.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_06_004.jpg)'
- en: 'Then, copy the container ID and type the following command (remember that your
    container ID will be different from the one shown in this output) using the container
    ID shown in your output:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，复制容器ID并输入以下命令（请记住，您的容器ID将与此输出中显示的不同），使用输出中显示的容器ID：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The output will be as shown in the following screenshot:![How to do it...](img/image_06_005.jpg)
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出将如下面的屏幕截图所示：![操作步骤...](img/image_06_005.jpg)
- en: 'It will be a very long output; in order to find out the IP address quickly,
    you can use the following command as well:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将是一个非常长的输出；为了快速找到IP地址，您也可以使用以下命令：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The output is as shown in the following screenshot:![How to do it...](img/image_06_006.jpg)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出如下面的屏幕截图所示：![操作步骤...](img/image_06_006.jpg)
- en: As shown, `172.17.0.2` (please note that your IP address could be different
    from the one shown here.) is the IP address the container is running with; to
    see the vulnerable web applications installed on this container, copy this IP
    address and open this on your browser, as shown in the following screenshot:![How
    to do it...](img/image_06_007.jpg)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如图所示，`172.17.0.2`（请注意，您的IP地址可能与此处显示的不同。）是容器正在运行的IP地址；要查看安装在此容器上的易受攻击的Web应用程序，请复制此IP地址并在浏览器中打开，如下面的屏幕截图所示：![操作步骤...](img/image_06_007.jpg)
- en: As shown in the preceding screenshot, you will see that Apache server is up
    and running and you can see three different folders for each different web application.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，您将看到Apache服务器正在运行，并且您可以看到每个不同Web应用程序的三个不同文件夹。
- en: Moving forward, from the next recipe onward, we will be using these applications
    for web application vulnerability assessment.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下一个教程开始，我们将使用这些应用程序进行Web应用程序漏洞评估。
- en: How it works...
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we pulled a preconfigured Docker image from the Docker hub,
    and then we ran the downloaded image, listed the running containers, and tried
    finding out the IP address of the running container using container ID in order
    to view the installed vulnerable web applications on the browser.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们从Docker hub中拉取了一个预配置的Docker镜像，然后运行了下载的镜像，列出了正在运行的容器，并尝试使用容器ID找出正在运行的容器的IP地址，以便在浏览器上查看安装的易受攻击的Web应用程序。
- en: Using W3af for vulnerability assessment
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用W3af进行漏洞评估
- en: In this recipe, we will learn how to use W3af to find vulnerabilities within
    a target web application. W3af is a web application attack and audit framework.
    The project's goal is to create a framework to help you secure your web applications
    by finding and exploiting all web application vulnerabilities.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何使用W3af在目标Web应用程序中查找漏洞。W3af是一个Web应用程序攻击和审计框架。该项目的目标是创建一个框架，通过查找和利用所有Web应用程序漏洞来帮助您保护您的Web应用程序。
- en: Getting ready
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To step through this recipe, you will need Kali Linux running on Oracle Virtualbox
    and an Internet connection. No other prerequisites are required.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本教程，您需要在Oracle Virtualbox上运行Kali Linux并连接到互联网。不需要其他先决条件。
- en: How to do it...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'For this recipe, you need to perform the following steps:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此教程，您需要执行以下步骤：
- en: Open the terminal and type `w3af_gui`; the w3af window will be as shown in the
    following screenshot:![How to do it...](img/image_06_008.jpg)
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并输入`w3af_gui`；w3af窗口将如下面的屏幕截图所示：![操作步骤...](img/image_06_008.jpg)
- en: Select the **OWASP_TOP10** option from the profile selector in the left-hand
    side panel. Enter the target URL, as shown in the following screenshot:![How to
    do it...](img/image_06_009.jpg)
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧面板的配置选择器中选择**OWASP_TOP10**选项。输入目标URL，如下面的屏幕截图所示：![操作步骤...](img/image_06_009.jpg)
- en: Expand the **auth** menu, click on the **detailed** plugin, and enter the username
    and password (only for HTTP form credentials) and all other required parameters
    and then click on **Save**, as shown in the following screenshot:![How to do it...](img/image_06_010.jpg)
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开**auth**菜单，单击**详细**插件，并输入用户名和密码（仅适用于HTTP表单凭据）和所有其他必需的参数，然后单击**保存**，如下面的屏幕截图所示：![操作步骤...](img/image_06_010.jpg)
- en: Select **output** and expand it and select all output formats; in our case,
    we will check all for demonstration purposes, as shown in the following screenshot:![How
    to do it...](img/image_06_011.jpg)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**output**并展开它并选择所有输出格式；在我们的情况下，出于演示目的，我们将检查所有内容，如下面的屏幕截图所示：![操作步骤...](img/image_06_011.jpg)
- en: After that, click on the button next to the start button; on clicking it, the
    following window will open, and it will ask whether you know **target_os** and
    **target_framework** and save the details, as shown in the following screenshot:![How
    to do it...](img/image_06_012.jpg)
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，单击开始按钮旁边的按钮；单击后，将打开以下窗口，并询问您是否知道**target_os**和**target_framework**，然后保存详细信息，如下面的屏幕截图所示：![操作步骤...](img/image_06_012.jpg)
- en: Once all these steps are done, simply click on the **Start** button and the
    scan will begin, as shown in the following screenshot:![How to do it...](img/image_06_013.jpg)
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成所有这些步骤后，只需单击**开始**按钮，扫描将开始，如下面的屏幕截图所示：![操作步骤...](img/image_06_013.jpg)
- en: Once the scan has started, you can traverse the tabs and click on **Results**
    and start seeing the vulnerabilities appear as and when they are discovered, as
    shown in the following screenshot:![How to do it...](img/image_06_014.jpg)
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦扫描开始，您可以遍历选项卡并单击**结果**，随着漏洞的发现，漏洞将会出现，如下面的屏幕截图所示：![操作步骤...](img/image_06_014.jpg)
- en: Next, click on the **URL** subtab, where you can see all the URLs discovered
    and drawn in the form of a nice sitemap, as shown in the following screenshot:![How
    to do it...](img/image_06_015.jpg)
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，单击**URL**子选项卡，在那里您可以看到以漂亮站点地图形式发现和绘制的所有URL，如下面的屏幕截图所示：![操作步骤...](img/image_06_015.jpg)
- en: While your scan is running, you can still see the latest plugins running and
    the vulnerabilities found over in the log window, as shown in the following screenshot:![How
    to do it...](img/image_06_016.jpg)
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在扫描运行时，您仍然可以在日志窗口中看到最新的插件运行和发现的漏洞，如下面的屏幕截图所示：![操作步骤...](img/image_06_016.jpg)
- en: 'Once the scan is completed, the results will be saved in the directory from
    where you run w3af. In our case, we invoked from the default path, that is, `/root/`,
    as shown in the following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描完成后，结果将保存在运行w3af的目录中。在我们的情况下，我们从默认路径`/root/`调用，如下面的屏幕截图所示：
- en: '![How to do it...](img/image_06_017.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_06_017.jpg)'
- en: How it works...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we used `w3af_gui` and configured various plugins, started an
    authenticated scan on a vulnerable web application hosted in a Docker container
    at IP `http://172.17.0.2/dvwa/login.php` , and demonstrated how w3af will work
    while performing a real-life vulnerability assessment. W3af's capability is not
    limited to vulnerability assessment. It can also leverage sqlmap-, RFI-, and Metasploit-like
    tools and can be used to perform exploitation as well.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用了`w3af_gui`并配置了各种插件，在Docker容器中托管的易受攻击的Web应用程序上进行了经过身份验证的扫描，IP为`http://172.17.0.2/dvwa/login.php`，并演示了w3af在执行真实漏洞评估时的工作。W3af的能力不仅限于漏洞评估。它还可以利用类似sqlmap、RFI和Metasploit的工具，并且也可以用于执行利用。
- en: Using Nikto for web server assessment
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Nikto进行Web服务器评估
- en: In this recipe, we will learn about Nikto and its web server scanning capabilities.
    Nikto is an open source (GPL) web server scanner that performs comprehensive tests
    against web servers for multiple items, including over 6,700 potentially dangerous
    files/programs, checks for outdated versions of over 1,250 servers, and also checks
    for version-specific problems on over 270 servers.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习Nikto及其Web服务器扫描功能。Nikto是一个开源（GPL）的Web服务器扫描程序，可以针对多个项目对Web服务器执行全面测试，包括超过6700个潜在危险的文件/程序，检查超过1250个服务器的过时版本，并检查超过270个服务器的特定版本问题。
- en: Getting ready
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need Kali Linux running on Oracle Virtualbox
    and an Internet connection. No other prerequisites are required.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，您需要在Oracle Virtualbox上运行Kali Linux并连接到互联网。不需要其他先决条件。
- en: How to do it...
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'For this recipe, you need to perform the following steps:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，您需要执行以下步骤：
- en: Open the terminal and type `Nikto`, Nikto will display its help and switches
    available for use (you can also use the main Nikto for a detailed description
    of each switch), as shown in the following screenshot:![How to do it...](img/image_06_018.jpg)
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并输入`Nikto`，Nikto将显示其可用于使用的帮助和开关（您还可以使用主要的Nikto来获取每个开关的详细描述），如下面的屏幕截图所示：![操作步骤...](img/image_06_018.jpg)
- en: 'To start a scan, type the following command:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始扫描，请输入以下命令：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Let Nikto do its work and wait for it to complete; when it is complete, the
    console shows the following output:![How to do it...](img/image_06_019.jpg)
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让Nikto完成它的工作，并等待它完成；完成后，控制台将显示以下输出：![操作步骤...](img/image_06_019.jpg)
- en: How it works...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we had Nikto perform a scan on a web server and web application
    hosted locally in a Docker container at `http://172.17.0.2/wordpress/`. The `-host`
    switch is to specify the URL.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们让Nikto对托管在Docker容器中的Web服务器和Web应用程序进行扫描，URL为`http://172.17.0.2/wordpress/`。`-host`开关用于指定URL。
- en: Sometimes, like any other tool, Nikto also shows some false positives that need
    to verified manually by visiting the detected links from the tool and URL's. But
    stay assured; running Nikto is worth your time as it always surprises you by finding
    something unique and new to your list of findings.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，就像其他工具一样，Nikto也会显示一些需要通过访问工具和URL检测到的链接手动验证的误报。但请放心；运行Nikto是值得的，因为它总是会通过找到一些独特和新的东西来给您惊喜。
- en: Using Skipfish for vulnerability assessment
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Skipfish进行漏洞评估
- en: In this recipe, we will learn how to use Skipfish. Skipfish is entirely written
    in C. It is highly optimized to handle HTTP requests. Skipfish can handle 2,000
    requests per second, as mentioned at [http://tools.kali.org/web-applications/skipfish](http://tools.kali.org/web-applications/skipfish)
    .
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何使用Skipfish。Skipfish完全用C编写。它经过高度优化以处理HTTP请求。Skipfish可以处理每秒2000个请求，如[http://tools.kali.org/web-applications/skipfish](http://tools.kali.org/web-applications/skipfish)所述。
- en: Getting ready
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need Kali Linux running on Oracle Virtualbox
    and an Internet connection. No other prerequisites are required.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，您需要在Oracle Virtualbox上运行Kali Linux并连接到互联网。不需要其他先决条件。
- en: How to do it...
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'For this recipe, you need to perform the following steps:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，您需要执行以下步骤：
- en: 'Open the terminal. To start `Skipfish`, you have to mention the output directory
    name. If the output directory does not exist, it will automatically create the
    directory and save the results. To start Skipfish, type the following command
    in the terminal:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端。要启动`Skipfish`，您必须提到输出目录名称。如果输出目录不存在，它将自动创建目录并保存结果。要启动Skipfish，请在终端中输入以下命令：
- en: '[PRE6]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Before Skipfish starts scanning, it shows the list of tips on the screens, which
    helps you understand how Skipfish will behave for this specific scan:![How to
    do it...](img/image_06_020.jpg)
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Skipfish开始扫描之前，它会显示屏幕上的提示列表，这有助于您了解Skipfish将如何针对此特定扫描进行操作：![操作步骤...](img/image_06_020.jpg)
- en: Once Skipfish starts, it will start showing the scan details, the number of
    requests sent, and other details on the screens, as shown in the following screenshot:![How
    to do it...](img/image_06_021.jpg)
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦Skipfish开始，它将开始显示扫描详细信息，发送的请求数量以及屏幕上的其他详细信息，如下面的屏幕截图所示：![操作步骤...](img/image_06_021.jpg)
- en: Once the scan is complete, compile everything and create the HTML report in
    that folder. This will show the following output on the screen:![How to do it...](img/image_06_022.jpg)
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扫描完成后，编译所有内容并在该文件夹中创建HTML报告。这将在屏幕上显示以下输出：![操作步骤...](img/image_06_022.jpg)
- en: Go to the mentioned output directory and open the HTML in the browser, as shown
    in the following screenshot:![How to do it...](img/image_06_023.jpg)
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到指定的输出目录，并在浏览器中打开HTML，如下面的屏幕截图所示：![操作步骤...](img/image_06_023.jpg)
- en: How it works...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Since Skipfish is written in C language, it is one of the most efficient tools
    in terms of handling HTTP traffic. Skipfish is capable of running authenticated
    scans as well using `--auth-form`, `--auth-user`, and `-auth-password` switches.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Skipfish是用C语言编写的，它是处理HTTP流量方面最有效的工具之一。Skipfish能够使用`--auth-form`、`--auth-user`和`-auth-password`开关来运行经过身份验证的扫描。
- en: By default, Skipfish takes all the URLs as the scope; if there is any page or
    URL that is not in your scope of testing, you will explicitly mention using the
    `-X` switch to let Skipfish know that it need not be scanned.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Skipfish将所有URL视为范围；如果有任何页面或URL不在您的测试范围内，您将明确使用`-X`开关来告诉Skipfish不需要扫描它。
- en: In case of authenticated scans, you can mention logout links using the `-X`
    switch in order to ensure that Skipfish accidently doesn't crawl on that as well
    and ends up scanning the host with the logged out session.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行经过身份验证的扫描时，您可以使用`-X`开关指定注销链接，以确保Skipfish不会意外地爬取它，并最终扫描带有已注销会话的主机。
- en: Using Burp Proxy to intercept HTTP traffic
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Burp代理拦截HTTP流量
- en: In this recipe, we will use the Burp Proxy to intercept our browser traffic
    and manipulate the parameters on the go.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用Burp代理拦截我们的浏览器流量，并在路上操纵参数。
- en: Getting ready
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need Kali Linux running on Oracle Virtualbox
    and an Internet connection. No other prerequisites are required.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本教程，您需要在Oracle Virtualbox上运行Kali Linux并连接到互联网。不需要其他先决条件。
- en: How to do it...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'For this recipe, you need to perform the following steps:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此教程，您需要执行以下步骤：
- en: To start Burp, go to **Menu** | **Kali Linux** | **Applications** | **burpsuite**
    and click on the **Start burpsuite**, as shown in the following screenshot:![How
    to do it...](img/image_06_024.jpg)
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启动Burp，请转到**菜单** | **Kali Linux** | **应用程序** | **burpsuite**并单击**启动burpsuite**，如下面的屏幕截图所示：![操作步骤...](img/image_06_024.jpg)
- en: Also open Firefox and navigate to **Edit Menu** | **Preferences** | **Advance
    Tab** | **Network** | **Settings** and set the proxy as `127.0.0.1` and the port
    as `8080`, as shown in the following screenshot:![How to do it...](img/image_06_025.jpg)
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时打开Firefox，并导航到**编辑菜单** | **首选项** | **高级选项卡** | **网络** | **设置**，将代理设置为`127.0.0.1`，端口设置为`8080`，如下面的屏幕截图所示：![操作步骤...](img/image_06_025.jpg)
- en: Click on **OK** and go to **Burp** | **Proxy**, as shown in the following screenshot:![How
    to do it...](img/image_06_026.jpg)
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**确定**，然后转到**Burp** | **代理**，如下面的屏幕截图所示：![操作步骤...](img/image_06_026.jpg)
- en: Now, come back to the Firefox window and open `http://172.17.0.2/dvwa/login.php`
    and press *Enter*; the moment you press *Enter*, the request will be intercepted
    by Burp, as shown in the following screenshot:![How to do it...](img/image_06_027.jpg)
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，回到Firefox窗口，打开`http://172.17.0.2/dvwa/login.php`并按下*Enter*；当你按下*Enter*时，请求将被Burp拦截，如下面的屏幕截图所示：![操作步骤...](img/image_06_027.jpg)
- en: Click on **Forward** to let go of any requests that are being intercepted and
    let the login page load. Enter the username and password in the field and click
    on **Submit**, as shown in the following screenshot:![How to do it...](img/image_06_028.jpg)
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**转发**，放弃任何被拦截的请求，并让登录页面加载。在字段中输入用户名和密码，然后单击**提交**，如下面的屏幕截图所示：![操作步骤...](img/image_06_028.jpg)
- en: Open the **Burp** window. As you can see, the submit request gets intercepted
    here and can be manipulated in a raw form or in the parameter form:![How to do
    it...](img/image_06_029.jpg)
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**Burp**窗口。如您所见，提交请求在这里被拦截，并且可以以原始形式或参数形式进行操纵：![操作步骤...](img/image_06_029.jpg)
- en: How it works...
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we simply configured a web browser to a proxy running on our
    own local machine on port `8080` before it connects to the Internet. As we open
    any URL in our browser, it redirects all the traffic to the Burp running on port
    `8080`, where you can manipulate any request before it leaves your system.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们只需将Web浏览器配置为在连接到互联网之前在我们自己的本地机器上的端口`8080`上运行的代理。当我们在浏览器中打开任何URL时，它会将所有流量重定向到在端口`8080`上运行的Burp，您可以在流离开系统之前操纵任何请求。
- en: Proxy applications are usually used to bypass client-side restrictions in web
    applications in browsers.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 代理应用程序通常用于在浏览器中绕过Web应用程序的客户端限制。
- en: Using Burp Intruder for customized attack automation
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Burp Intruder进行定制的攻击自动化
- en: In this recipe, we will learn how we can use Burp Intruder to perform application
    login bruteforce and directory bruteforce. The intruder can be used in any scenario
    where bruteforcing needs to done and can be customized as per your requirement.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将学习如何使用Burp Intruder执行应用程序登录暴力破解和目录暴力破解。Intruder可以在需要进行暴力破解的任何场景中使用，并且可以根据您的要求进行定制。
- en: Getting ready
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need Kali Linux running on Oracle Virtualbox
    and an Internet connection. No other prerequisites are required.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本教程，您需要在Oracle Virtualbox上运行Kali Linux并连接到互联网。不需要其他先决条件。
- en: How to do it...
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'For this recipe, you need to perform the following steps:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，您需要执行以下步骤：
- en: Open the **Damn Vulnerable Web Application** page in the browser and traverse
    to the **Brute Force** section, as shown in the following screenshot:![How to
    do it...](img/image_06_030.jpg)
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开**Damn Vulnerable Web Application**页面，并转到**Brute Force**部分，如下截图所示：![操作步骤...](img/image_06_030.jpg)
- en: Intercept the request using Burp, as shown in the following screenshot:![How
    to do it...](img/image_06_031.jpg)
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拦截Burp的请求，如下截图所示：![操作步骤...](img/image_06_031.jpg)
- en: As shown earlier, send this request to the intruder within Burp, select the
    **Intruder** tab, and then select the **Positions** subtab, as shown in the following
    screenshot:![How to do it...](img/image_06_032.jpg)
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所示，将此请求发送给Burp内的入侵者，选择**Intruder**选项卡，然后选择**Positions**子选项卡，如下截图所示：![操作步骤...](img/image_06_032.jpg)
- en: To use intruder to bruteforce a common username and password, we will need to
    select only username and password; the rest of the highlighted parameters can
    be cleared by selecting them and clicking on the **Clear $** button, which will
    ensure that bruteforcing will happen only on selected parameters and not on all
    the parameters selected by default.![How to do it...](img/image_06_033.jpg)
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用入侵者暴力破解常见的用户名和密码，我们需要仅选择用户名和密码；其余的突出显示的参数可以通过选择它们并单击**Clear $**按钮来清除，这将确保暴力破解只会发生在选定的参数上，而不是默认情况下选择的所有参数上。![操作步骤...](img/image_06_033.jpg)
- en: Burp Intruder has four attack types, which are sniper, battering ram, pitchfork,
    and cluster bomb. It's set to sniper by default. Change it to battering ram.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Intruder有四种攻击类型，分别是sniper、battering ram、pitchfork和cluster bomb。它默认设置为sniper。将其更改为battering
    ram。
- en: Now, when we have parameters selected for bruteforcing, we need to set the payloads;
    for that, we will traverse the payload tab and set the payload set as **1** from
    the dropdown. Just to demonstrate how it works, we will enter a small list of
    usernames, as shown in the following screenshot:![How to do it...](img/image_06_034.jpg)
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当我们选择了暴力破解的参数时，我们需要设置有效负载；为此，我们将遍历有效负载选项卡，并从下拉菜单中设置有效负载集合为**1**。为了演示其工作原理，我们将输入一个小的用户名列表，如下截图所示：![操作步骤...](img/image_06_034.jpg)
- en: Now select the payload set as **2** and set the payload for the second parameter,
    as shown in the following screenshot:![How to do it...](img/image_06_035.jpg)
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在选择有效负载集合为**2**，并设置第二个参数的有效负载，如下截图所示：![操作步骤...](img/image_06_035.jpg)
- en: Now go to the **Options** tab; this is important because we need some kind of
    proof that bruteforcer has been able to detect a valid attempt, so for that, we
    will need to see an error message in case of wrong credentials and a message in
    case of correct credentials. Open the browser and enter the wrong password, as
    shown in the following screenshot:![How to do it...](img/image_06_036.jpg)
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在转到**选项**选项卡；这很重要，因为我们需要某种证据证明暴力破解程序已经能够检测到有效的尝试，因此，为此，我们需要在凭证错误的情况下看到错误消息，并在凭证正确的情况下看到消息。打开浏览器，输入错误的密码，如下截图所示：![操作步骤...](img/image_06_036.jpg)
- en: 'In the case of incorrect credentials, it shows the following message:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在凭证不正确的情况下，它会显示以下消息：
- en: '[PRE7]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![How to do it...](img/image_06_037.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_06_037.jpg)'
- en: Go to **Options** | **Grep Match Section** and remove all string patterns and
    add the **Welcome to the password protected area admin** pattern, which will indicate
    that the credentials are valid, as shown in the following screenshot:![How to
    do it...](img/image_06_038.jpg)
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**选项** | **Grep Match Section**，删除所有字符串模式，并添加**Welcome to the password protected
    area admin**模式，这将表明凭证是有效的，如下截图所示：![操作步骤...](img/image_06_038.jpg)
- en: Finally, click on the **Intruder** tab in the top-left corner and click on **Start
    attack**, as shown in the following screenshot:![How to do it...](img/image_06_039.jpg)
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在左上角的**Intruder**选项卡上单击**Start attack**，如下截图所示：![操作步骤...](img/image_06_039.jpg)
- en: Once started, intruder will try all possible combinations from these two payload
    lists and the grep match will show when there is any match with that in the response,
    as shown in the following screenshot:![How to do it...](img/image_06_040.jpg)
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦启动，入侵者将尝试从这两个有效负载列表中尝试所有可能的组合，并且当响应中有任何与之匹配时，grep匹配将显示出来，如下截图所示：![操作步骤...](img/image_06_040.jpg)
- en: How it works...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we used Burp Intruder and highly customized it for the specific
    bruteforce attack. Intruder capabilities are more than that. You can use this
    if you find SQL Injections as well.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们使用了Burp Intruder，并对其进行了高度定制，以进行特定的暴力攻击。入侵者的能力不仅限于此。您也可以在发现SQL注入时使用它。
- en: Using Burp Sequencer to test the session randomness
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Burp Sequencer测试会话的随机性
- en: In this recipe, we will learn how to use the Burp Sequencer tool to check the
    randomness of the session token in web applications.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将学习如何使用Burp Sequencer工具来检查Web应用程序中会话令牌的随机性。
- en: Getting ready
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To step through this recipe, you will need Kali Linux running on Oracle Virtualbox
    and an Internet connection. No other prerequisites are required.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要按照这个教程，您需要在Oracle Virtualbox上运行Kali Linux并连接到互联网。不需要其他先决条件。
- en: How to do it...
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'For this recipe, you need to perform the following steps:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，您需要执行以下步骤：
- en: Open the application in the browser and intercept the request using Burp, as
    shown in the following screenshot:![How to do it...](img/image_06_041.jpg)
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开应用程序，并使用Burp拦截请求，如下截图所示：![操作步骤...](img/image_06_041.jpg)
- en: We need to analyze the response for the request, forward this request, and capture
    the response from the server, as shown in the following screenshot:![How to do
    it...](img/image_06_042.jpg)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要分析请求的响应，转发此请求，并捕获服务器的响应，如下截图所示：![操作步骤...](img/image_06_042.jpg)
- en: Since the server has set up `Set-Cookie PHPSESSIONID`, in order to analyze this
    session token, we need to send it to the sequencer, as shown in the following
    screenshot:![How to do it...](img/image_06_043.jpg)
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于服务器设置了`Set-Cookie PHPSESSIONID`，为了分析这个会话令牌，我们需要将其发送到Sequencer，如下截图所示：![操作步骤...](img/image_06_043.jpg)
- en: Now open the Burp Sequencer. To check the randomness, Burp needs to know the
    location cookie in the request and then we will have start the live capture, as
    shown in the following screenshot:![How to do it...](img/image_06_044.jpg)
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开Burp Sequencer。为了检查随机性，Burp需要知道请求中的位置cookie，然后我们将开始实时捕获，如下面的屏幕截图所示：![如何做...](img/image_06_044.jpg)
- en: To perform the session randomness analysis, Burp requires at least 100 min.
    At least 100 PHPSessionID's at minimum to start analyzing:![How to do it...](img/image_06_045.jpg)
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了执行会话随机性分析，Burp至少需要100个PHP会话ID。至少需要100个PHP会话ID来开始分析：![如何做...](img/image_06_045.jpg)
- en: As we can see, the **Overall result** section shows information about the randomness
    of `PHPSESSID` within the sample of 462 requests. You can save the values of `PHPSESSID`
    to a file **Save tokens** button, as shown in the following screenshot:![How to
    do it...](img/image_06_046.jpg)
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如我们所看到的，**总体结果**部分显示了在462个请求样本中`PHPSESSID`的随机性信息。您可以将`PHPSESSID`的值保存到一个文件中，如下面的屏幕截图所示：![如何做...](img/image_06_046.jpg)
- en: How it works...
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The attacker can easily impersonate a users session over the application, if
    session tokens are easy to guess and not sufficiently random. In this recipe,
    we used the Burp Sequencer tool to import the session ID from the Burp proxy and
    run the analysis on it. This Sequencer can be used in other cases where we have
    to deal with tokens such as CSRF. Sequencer can also be used to check the randomness
    of CSRF tokens in a similar manner as well.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果会话令牌容易猜测并且不够随机，攻击者可以轻松模拟用户在应用程序上的会话。在这个示例中，我们使用Burp Sequencer工具从Burp代理导入会话ID并对其进行分析。这个Sequencer也可以用于其他情况，比如处理CSRF等令牌。Sequencer也可以用类似的方式来检查CSRF令牌的随机性。
