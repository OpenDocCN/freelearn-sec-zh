- en: Chapter 7. Applications and Malware Analysis
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章：应用程序与恶意软件分析
- en: Although malware for iOS devices is not so common, it is more common when considering
    jailbroken devices. As a forensic analyst, you may be required to analyze a malicious
    application, or more generally the behavior of a suspicious application you have
    never seen before. While we are not trying to write a comprehensive guide to static
    reverse engineer iOS applications, this chapter gives an overview of how to analyze
    an application, whether it is malicious or not. In this chapter, you will first
    learn how to set up the working environment, and install and configure the basic
    tools needed for iOS application analysis. Then, we will move on to application
    analysis principles, learning at which state data can exist and where to look
    for it. Finally, we will see some tools in action that can help to speed up analysis
    and automate some tasks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 iOS 设备的恶意软件并不常见，但在越狱设备中却更为常见。作为法医分析师，你可能需要分析一个恶意应用程序，或者更一般地说，分析一个你以前从未见过的可疑应用程序的行为。虽然我们并不打算编写一个全面的
    iOS 应用程序静态逆向工程指南，但本章将概述如何分析一个应用程序，无论它是否恶意。在本章中，你将首先学习如何设置工作环境，并安装和配置 iOS 应用分析所需的基本工具。然后，我们将进入应用分析原则，学习数据可能存在的状态及其查找位置。最后，我们将看到一些工具的实际应用，这些工具有助于加速分析并自动化某些任务。
- en: Setting up the environment
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置环境
- en: The first step to take in order to properly set up a testing environment for
    iOS application analysis is to jailbreak your testing device. This is because,
    as an analyst, you need to have full control of what is happening in the device,
    being able to access all kinds of information, whether they are stored in the
    memory or being sent over the network.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确设置 iOS 应用分析的测试环境，第一步是越狱你的测试设备。作为分析师，你需要完全控制设备上发生的事情，能够访问所有类型的信息，无论它们是存储在内存中还是通过网络传输的。
- en: How to jailbreak an iPhone is out of the scope of this book, so we will not
    go into the details on how to do it. It is also quite simple. Just download one
    of the software options available, such as Evasi0n (for iOS 7), Redsn0w (for iOS
    8), PanGu (for iOS 8 or 9), and TaiG9 (for iOS 9) and follow the instructions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如何越狱 iPhone 并不在本书的讨论范围之内，因此我们不会详细讲解如何操作。这也非常简单。只需下载一个可用的软件选项，如 Evasi0n（适用于 iOS
    7）、Redsn0w（适用于 iOS 8）、PanGu（适用于 iOS 8 或 9）和 TaiG9（适用于 iOS 9），并按照说明操作即可。
- en: 'Once the device has been jailbroken and Cydia installed, you also need to install
    the following tools:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设备已越狱并安装了 Cydia，你还需要安装以下工具：
- en: '**OpenSSH**: This tool allows you to log in to your jailbroken device via Wi-Fi
    or USB and have a root shell access into it'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OpenSSH**：此工具允许你通过 Wi-Fi 或 USB 登录到越狱设备，并获得 root shell 访问权限'
- en: '**MTerminal**: This tool allows you to run terminal commands on your device
    directly from your device, rather than logging in via SSH from a different system'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MTerminal**：此工具允许你直接在设备上运行终端命令，而不是通过 SSH 从其他系统登录'
- en: '**BigBoss recommended tools**: This package contains a series of useful command-line
    tools such as `apt`, `make`, `wget`, `sqlite3`, and so on'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BigBoss 推荐工具**：此包包含一系列有用的命令行工具，如 `apt`、`make`、`wget`、`sqlite3` 等'
- en: 'Something you will always need to do when analyzing a malicious application
    is to interact with your iPhone via shell, whether to install new tools or launch
    specific commands from the shell; this is why we installed OpenSSH. The first
    thing you need to do is to change your default root password, which is `alpine`,
    in order to prevent someone else logging remotely into your device (and with root
    privileges). To do this, launch the MTerminal application you just installed and
    run the following commands:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 分析恶意应用程序时，你总是需要通过 shell 与 iPhone 进行交互，无论是安装新工具还是从 shell 启动特定命令；这就是我们安装 OpenSSH
    的原因。你需要做的第一件事是更改默认的 root 密码，默认密码是 `alpine`，以防止其他人通过远程登录到你的设备（并获取 root 权限）。为此，启动你刚安装的
    MTerminal 应用并运行以下命令：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, there is a nice and comfortable way to connect to your iPhone via USB
    instead of being obliged to go over Wi-Fi. In your computer, edit the `~/.ssh/config`
    file by adding the following entry:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，有一种更加方便舒适的方式可以通过 USB 连接到你的 iPhone，而无需强制使用 Wi-Fi。在你的电脑上，通过编辑 `~/.ssh/config`
    文件并添加以下条目：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will map the `usb` hostname to the `ssh` connection with the proper parameters
    needed. Moreover, the last row sets up port forwarding such that any connections
    to port `8080` on the iPhone will be forwarded to port `8080` locally on the laptop.
    This will be useful when you have to set up a proxy to intercept the network communications,
    as you will see later in this chapter. Now, you need something listening on port
    `2222`: `usbmuxd`. This daemon is in charge of multiplexing connections over USB
    to the iDevice. To complete the procedure on OS X, you can simply use the following
    command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把`usb`主机名映射到具有所需参数的`ssh`连接。此外，最后一行设置了端口转发，使得对iPhone端口`8080`的任何连接都会被转发到本地笔记本的端口`8080`。当你需要设置代理来拦截网络通信时，这将非常有用，正如你在本章后面会看到的那样。现在，你需要某个程序监听端口`2222`：`usbmuxd`。这个守护进程负责通过USB复用到iDevice的连接。要在OS
    X上完成此过程，你只需使用以下命令：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Done! Now you have a shell in your iPhone via USB.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 完成！现在，你可以通过USB在iPhone上使用Shell了。
- en: 'Before installing the other tools, it is a good practice to make sure that
    the baseline is up to date. To do this, just execute the following commands from
    your root shell:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装其他工具之前，最好确保基准系统是最新的。为此，只需在你的根Shell中执行以下命令：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `update` command gets the latest packages list from the default repository,
    while the `upgrade` command will fetch the new versions of packages that already
    exist on the device and don't have the latest version installed using the information
    received by the `update` command run before.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`update`命令从默认仓库获取最新的包列表，而`upgrade`命令将根据之前运行的`update`命令获得的信息，提取设备上已安装但没有最新版本的包的更新版本。'
- en: The following sections will quickly introduce three important utilities, which
    you will find useful for dumping encrypted content from memory (for example, code)
    and the Keychain password container.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分将快速介绍三个重要的工具，这些工具对从内存中提取加密内容（例如代码）以及Keychain密码容器非常有用。
- en: class-dump
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: class-dump
- en: '**class-dump** is a command-line tool used to extract the **Objective-C** class
    information from (decrypted) iOS applications, and it comes installed with the
    Cydia package. Note that it will work only with Objective-C apps and not with
    Swift.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**class-dump**是一个命令行工具，用于提取（解密后的）iOS应用程序中的**Objective-C**类信息，它与Cydia包一起安装。请注意，它仅适用于Objective-C应用程序，而不适用于Swift应用程序。'
- en: Finally, be aware that the old `class-dump-z` is not compatible with 64-bit
    architectures, which means from iPhone 5s on.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，请注意，旧版的`class-dump-z`与64位架构不兼容，这意味着从iPhone 5s开始就无法使用。
- en: Keychain Dumper
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Keychain Dumper
- en: 'A very interesting and useful tool is Keychain Dumper that, as the name suggests,
    will let you dump the contents from the Keychain. Normally, the way an application
    is granted access to the Keychain is specified in its entitlements, which define
    the information that can be accessed by that application. The way this tool works
    is that the binary is signed with a self-signed certificate with wildcard entitlements.
    Hence, it is able to access all the Keychain items. To install `keychain_dumper`,
    just download the `zip` archive from the GitHub repo at [https://github.com/ptoomey3/Keychain-Dumper](https://github.com/ptoomey3/Keychain-Dumper)
    and unpack it. Then, you only need to copy the `keychain_dumper` binary to the
    phone as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常有趣且实用的工具是Keychain Dumper，顾名思义，它可以让你从Keychain中提取内容。通常，应用程序访问Keychain的方式在其权限中指定，这些权限定义了应用程序可以访问的信息。这个工具的工作方式是，二进制文件使用带有通配符权限的自签名证书进行签名。因此，它能够访问所有Keychain项。要安装`keychain_dumper`，只需从GitHub仓库[https://github.com/ptoomey3/Keychain-Dumper](https://github.com/ptoomey3/Keychain-Dumper)下载`zip`压缩包并解压。然后，只需将`keychain_dumper`二进制文件复制到手机中，方法如下：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, make sure that `keychain_dumper` is executable and validate that `/private/var/Keychains/keychain-2.db`
    is world readable. If not, you can set them as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，确保`keychain_dumper`是可执行文件，并验证`/private/var/Keychains/keychain-2.db`是否对所有用户可读。如果不是，你可以按如下方式设置：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You should now be able to run the tool without any issues:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该能够顺利运行该工具：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As you can see from the preceding output, by default, `keychain_dumper` only
    dumps generic and Internet passwords. However, you can also specify optional flags
    to dump additional information from the Keychain, as shown from the help (`-h`)
    command as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的输出所示，默认情况下，`keychain_dumper`仅提取通用密码和互联网密码。然而，你也可以指定可选标志，以提取Keychain中的更多信息，如下所示（通过`-h`命令获取帮助）：
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: dumpDecrypted
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: dumpDecrypted
- en: An executable of an application is encrypted when downloaded from the App Store.
    The `dumpDecrypted` tool, developed by Stefan Esser (his Twitter handle is `@i0n1c`),
    runs the targeted app and dumps it decrypted from memory to disk. To install `dumpDecrypted`,
    download the `zip` archive from its GitHub page ([https://github.com/stefanesser/dumpdecrypted](https://github.com/stefanesser/dumpdecrypted))
    in your Mac (it is for OS X only), unzip it, and compile it on your Mac first.
    Alternatively, `dumpDecrypted` comes also as a tool that can be installed via
    idb as we will see later.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 从App Store下载的应用程序的可执行文件在下载时已加密。由Stefan Esser开发的`dumpDecrypted`工具（他的Twitter用户名为`@i0n1c`），运行目标应用程序并将其从内存解密并转储到磁盘。要安装`dumpDecrypted`，请在Mac上从其GitHub页面（[https://github.com/stefanesser/dumpdecrypted](https://github.com/stefanesser/dumpdecrypted)）下载`zip`存档，解压缩并首先在Mac上进行编译。或者，可以通过idb安装`dumpDecrypted`作为工具。
- en: Application analysis
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序分析
- en: 'When analyzing an application, you need to look at all its activities and interactions
    with the system by analyzing all the traces and artifacts left on the system while
    it was running and after it has run and to/from the system. This means being able
    to understand how and with whom the application communicates by sending and receiving
    data. Therefore, you need to look at the three states where data can exist. The
    following are the three states where data can exist:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析应用程序时，需要通过分析系统运行时和运行后留在系统上的所有迹象和工件来查看其所有活动和与系统的交互，以及与系统之间的数据收发来了解应用程序如何以及与谁通信。因此，需要查看数据可能存在的三种状态。以下是数据可能存在的三种状态：
- en: Data at rest
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据静止
- en: With data at rest, we refer to all the data recorded on storage media; in our
    case, on the mobile device's internal memory. These are the `plist` files, the
    `sqlite` databases, logs, and any other information we can retrieve directly from
    the media itself. We will not go into much details here, since this procedure
    is the same as for the forensic analysis of a specific application that is going
    through the application directory tree structure to check its files and analyze
    the system logs. Refer to [Chapter 6](ch06.html "Chapter 6. Analyzing iOS Devices"),
    *Analyzing iOS Devices*, for more details.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 数据静止时，我们指的是存储介质上记录的所有数据；在我们的案例中，是指移动设备的内部存储器。这些包括`plist`文件、`sqlite`数据库、日志以及我们可以直接从介质本身检索的任何其他信息。我们在这里不会详细介绍，因为这个过程与通过分析应用程序目录树结构来检查其文件并分析系统日志的特定应用程序的取证分析相同。有关更多详细信息，请参阅[第6章](ch06.html
    "第6章。分析iOS设备")，《分析iOS设备》。
- en: Data in use
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据使用
- en: Data in use is, as the name suggests, all data being currently used by the application.
    Such data resides in the memory (RAM) of the device. In a standard malware analysis
    for computer malware, memory analysis is, whenever possible, part of the game.
    Unfortunately, for iOS, but in general, for the entire mobile panorama, memory
    acquisition and analysis is not well developed yet, although some utilities/proof-of-concepts
    to dump the memory have been implemented. However, memory analysis and runtime
    manipulation/abuse are out of the scope of this book, but you can explore them
    yourself and refer to **memscan** ([https://hexplo.it/introducing-memscan/](https://hexplo.it/introducing-memscan/))
    or **heapdump-ios** ([https://blog.netspi.com/ios-tutorial-dumping-the-application-heap-from-memory/](https://blog.netspi.com/ios-tutorial-dumping-the-application-heap-from-memory/))
    to learn about memory analysis, and *Hacking and Securing iOS Applications*, *Jonathan
    Zdziarski*, *O'Reilly Media*, to learn about runtime manipulation/abuse.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 数据在使用中，顾名思义，指的是应用程序当前正在使用的所有数据。这些数据存储在设备的内存（RAM）中。在计算机恶意软件的标准恶意软件分析中，内存分析尽可能是游戏的一部分。不幸的是，对于iOS，但一般而言，对整个移动景观来说，内存获取和分析尚未得到良好的发展，尽管已经实现了一些用于转储内存的实用程序/概念验证。然而，内存分析和运行时操纵/滥用超出了本书的范围，但您可以自行探索并参考**memscan**（[https://hexplo.it/introducing-memscan/](https://hexplo.it/introducing-memscan/)）或**heapdump-ios**（[https://blog.netspi.com/ios-tutorial-dumping-the-application-heap-from-memory/](https://blog.netspi.com/ios-tutorial-dumping-the-application-heap-from-memory/)）了解内存分析，以及*Hacking
    and Securing iOS Applications*，*Jonathan Zdziarski*，*O'Reilly Media*，了解运行时操纵/滥用。
- en: Another interesting tool you may want to keep in your arsenal is **Frida** ([http://www.frida.re/](http://www.frida.re/)),
    a dynamic instrumentation framework that allows you to inject your own scripts
    into processes to execute custom debugging logic. Frida has a client/server model,
    which means you will need to install it both on your computer and on the iDevice.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个你可能希望保留在工具箱中的有趣工具是**Frida**（[http://www.frida.re/](http://www.frida.re/)），它是一个动态插桩框架，允许你将自己的脚本注入到进程中以执行自定义调试逻辑。Frida采用客户端/服务器模型，这意味着你需要在计算机和iDevice上都安装它。
- en: 'On Mac, it is as easy as to type the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac上，只需键入以下内容：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'While on your jailbroken iDevice, start Cydia and add Frida''s repository by
    navigating to **Manage** | **Sources** | **Edit** |**Add** and entering [https://build.frida.re](https://build.frida.re).
    You should now be able to find and install the Frida package. You can find more
    details about the documentation on Frida''s official website. However, talking
    about memory, a very useful utility built on top of Frida is Fridump ([https://github.com/Nightbringer21/fridump](https://github.com/Nightbringer21/fridump)),
    an open source memory dumping tool. If Frida is correctly installed on both your
    computer and your iDevice (bear in mind that it would be better to have the same
    version installed on both), the approach to follow would be first to get the process
    name via Frida using the following command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的越狱iDevice上，启动Cydia并通过导航到**管理** | **源** | **编辑** | **添加**，输入[https://build.frida.re](https://build.frida.re)来添加Frida的仓库。现在，你应该能够找到并安装Frida包。你可以在Frida的官方网站上找到更多文档细节。关于内存，基于Frida构建的一个非常有用的工具是Fridump（[https://github.com/Nightbringer21/fridump](https://github.com/Nightbringer21/fridump)），一个开源内存转储工具。如果Frida在你的计算机和iDevice上都正确安装（请记住，最好在两者上安装相同版本），那么接下来的步骤是通过Frida使用以下命令获取进程名称：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `-U` parameter indicates that you are targeting the USB connected device.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`-U`参数表示你正在针对通过USB连接的设备。'
- en: 'Once you get the process name, you can pass it to `fridump` as shown in the
    following example:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你得到进程名称，就可以像下面的示例一样将它传递给`fridump`：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The preceding example will dump the Skype process from the device connected
    via USB (`-u`), reading in chunks of 1 MB (`--max-size`) and extracting also the
    strings on all dump files (`-s`).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例将从通过USB连接的设备中转储Skype进程（`-u`），以1MB为块读取数据（`--max-size`），并且还会提取所有转储文件中的字符串（`-s`）。
- en: 'Fridump has been tested successfully on iOS 8, while on iOS 9 from time to
    time the dump gets stuck close to the end. Even in this case, most of the content
    is being dumped and you will be able to retrieve what you would expect from any
    memory dump in the classical computer environment: configuration files, passwords,
    code executed, everything in clear. Some more information, as well as some case
    examples, is retrievable from the author''s website ([http://pentestcorner.com/introduction-to-fridump/](http://pentestcorner.com/introduction-to-fridump/)).'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Fridump已经在iOS 8上成功测试过，但在iOS 9上偶尔会在接近结束时卡住。即使在这种情况下，大部分内容也会被转储，你将能够从任何经典计算机环境中的内存转储中检索到你期望的信息：配置文件、密码、执行的代码，一切都以明文呈现。更多信息以及一些案例示例，可以从作者的网站获取（[http://pentestcorner.com/introduction-to-fridump/](http://pentestcorner.com/introduction-to-fridump/)）。
- en: Data in transit
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传输中的数据
- en: Data in transit refers to any information that is being transferred between
    two nodes in a network, which is, in our case, all data sent and received by the
    target application. Being able to observe and manipulate data sent over the network
    by an application is extremely interesting and useful for behavioral/dynamic analysis
    in the case of a suspicious app.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 传输中的数据指的是在网络中的两个节点之间传输的任何信息，在我们的案例中，就是目标应用程序发送和接收的所有数据。能够观察和操控应用程序通过网络发送的数据，对于在分析可疑应用程序时的行为/动态分析是非常有趣和有用的。
- en: Note
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Before starting, remember to isolate the device from the networks (all of them),
    especially if you are analyzing a malicious application. Therefore, create an
    ad hoc wireless network that is isolated (not connected to the Internet or to
    your internal network), then set your iPhone to Airplane Mode and switch on only
    the Wi-Fi afterwards so that the other network interfaces remain off.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，记得将设备与网络（所有网络）隔离，特别是当你正在分析恶意应用程序时。因此，创建一个与外部网络隔离的无线网络（不连接到互联网或你的内部网络），然后将你的iPhone设置为飞行模式，并且仅在之后打开Wi-Fi，这样其他网络接口就保持关闭。
- en: 'To begin with, you need to route the traffic of the phone through your computer
    in order to pose yourself as the man in the middle. To use the trick in your `ssh`
    configuration, as we did before, start by launching `iproxy` and establishing
    an `ssh` connection to your phone as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要通过计算机将手机的流量路由过来，从而充当中间人角色。为了在`ssh`配置中使用这个技巧，正如我们之前所做的，首先启动`iproxy`并建立一个到手机的`ssh`连接，具体如下：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, from your device network configuration, set up an HTTP proxy to manual
    toward localhost `127.0.0.1` port `8080`. It will be redirected to your Mac to
    port `8080` :'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从设备的网络配置中，设置HTTP代理为手动，指向本地主机`127.0.0.1`端口`8080`。它会被重定向到你的Mac的`8080`端口：
- en: '![Data in transit](img/image_07_001.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![数据传输](img/image_07_001.jpg)'
- en: 'Now that the iPhone is set up, you need to set up a proxy listening on your
    local host port `8080`. **Burp Proxy** is probably the most popular proxy ([http://portswigger.net/burp/](http://portswigger.net/burp/));
    it is cross-platform and there is a free version that works just fine for our
    purposes. However, there are many others out there, so pick your favorite one.
    Once an HTTP request has been intercepted, with Burp you can perform several actions,
    such as modifying the request parameters, intercepting and modifying the response,
    and much more:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在iPhone已经设置好，你需要在本地主机端口`8080`上设置一个代理监听。**Burp Proxy**可能是最受欢迎的代理工具（[http://portswigger.net/burp/](http://portswigger.net/burp/)）；它是跨平台的，而且有一个免费的版本，足以满足我们的需求。然而，市面上还有很多其他的代理工具，你可以选择你喜欢的一个。一旦HTTP请求被拦截，使用Burp你可以执行多种操作，如修改请求参数、拦截并修改响应等等：
- en: '![Data in transit](img/image_07_002.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![数据传输](img/image_07_002.jpg)'
- en: 'However, although Burp is great at intercepting the HTTP/HTTPS protocol, you
    may want to have a look at all the traffic, because some applications may not
    use standard HTTP to communicate, and record it for further analysis on a later
    stage. To do so, you will need to install Wireshark, the standard de facto packet
    analyzer, together with `tcpdump`, and run a capture on your loopback interface
    `127.0.0.1`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，尽管Burp在拦截HTTP/HTTPS协议时表现非常出色，你可能希望查看所有流量，因为有些应用可能不会使用标准的HTTP协议进行通信，并且可能会记录这些流量以便后续分析。为此，你需要安装Wireshark，这是一款标准的事实上的数据包分析工具，配合`tcpdump`使用，并在你的环回接口`127.0.0.1`上运行数据捕获：
- en: '![Data in transit](img/image_07_003.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![数据传输](img/image_07_003.jpg)'
- en: Of course, on a jailbroken iPhone, you have full control and may choose to install
    and go via `tcpdump` directly on the device.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在越狱的iPhone上，你拥有完全控制权，可以选择直接在设备上安装并使用`tcpdump`。
- en: Automating the analysis
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化分析
- en: This section will quickly introduce some tools that will help you during the
    analysis, either by speeding up the most common tasks or providing you with some
    extra and very useful functionalities.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将简要介绍一些工具，它们能在分析过程中帮助你，无论是加速最常见的任务，还是提供一些额外且非常有用的功能。
- en: idb
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: idb
- en: 'Developed and maintained by Daniel Mayer (his Twitter handle is `@DanlAMayer`),
    idb is a tool that simplifies some of the most common tasks related to iOS application
    analysis. Originally built with a penetration tester/researcher focus, it can
    be of great value for any type of application analysis, thanks to the number of
    tools that it incorporates and the features offered. Written in Ruby, the installation
    procedure is quite straightforward; you just need to run the following commands:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: idb是由Daniel Mayer（他的Twitter账号是`@DanlAMayer`）开发和维护的一个工具，它简化了与iOS应用分析相关的一些常见任务。最初是以渗透测试员/研究员为重点构建的，但由于它集成了许多工具并提供了丰富的功能，它对于任何类型的应用分析都非常有价值。idb是用Ruby编写的，安装过程非常简单；你只需要运行以下命令：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This is the procedure for Mac OS X. For more information on building and running
    it on other systems, you can refer to the official page at [http://www.idbtool.com/](http://www.idbtool.com/).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Mac OS X的操作流程。关于在其他系统上构建和运行的更多信息，你可以参考官方网站[http://www.idbtool.com/](http://www.idbtool.com/)。
- en: Once you have launched idb after following the configuration steps to install
    some needed extra tools on the device, you will have to connect idb to the USB
    device, select an application and start the analysis. Note that, even if it will
    be running a nice GUI, you will be prompted for the root password of the iDevice
    on the shell where you launched idb.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 完成配置步骤并安装设备所需的附加工具后，启动idb后，你需要将idb连接到USB设备，选择一个应用并开始分析。请注意，尽管它将运行一个漂亮的图形界面（GUI），但你仍然会在启动idb的shell中被提示输入iDevice的root密码。
- en: 'Clicking on **Analyze Binary...**, as you can see in the following screenshot,
    will give the first information on the binary itself, verifying, among other things,
    that **PIE**, Stack Smashing Protection, and **ARC** are enabled, which would
    reduce the likelihood of finding memory corruption vulnerabilities to exploit.
    Moreover, if the binary application is encrypted, `idb` will run `dumpdecrypted`
    to decrypt it before analyzing it:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**分析二进制文件...**，如下面的截图所示，将提供关于二进制文件的初步信息，验证包括**PIE**、堆栈溢出保护和**ARC**是否启用，这些都能降低发现并利用内存损坏漏洞的可能性。此外，如果二进制应用被加密，`idb`将运行`dumpdecrypted`来解密它，再进行分析：
- en: '![idb](img/image_07_004.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![idb](img/image_07_004.jpg)'
- en: Other information related to the binary app can also be extracted from the **Binary**
    tab. As you will see, idb extracts all the strings from the decrypted binary.
    This is a standard step you would do when analyzing standard computer malware.
    This is of great use since here you may find the API keys, credentials, encryption
    keys, URLs, and other useful hints. From a static analysis perspective, idb binary
    analysis allows you to dump all the class information.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以从**二进制**标签中提取与二进制应用相关的其他信息。正如你将看到的，idb会提取解密后的二进制文件中的所有字符串。这是分析标准计算机恶意软件时会执行的标准步骤。这个功能非常有用，因为你可以在这里找到API密钥、凭证、加密密钥、URL和其他有用的线索。从静态分析的角度来看，idb的二进制分析允许你提取所有类的信息。
- en: 'Talking about data at rest, under the **Storage** tab, you will be able to
    analyze all the files related to your target application, such as `plist`, the
    `sqlite` databases, and `Cache.db`, which contains cached HTTP requests/responses
    and offline data cached by web applications such as images, HTML, JavaScript,
    style sheets, and more. The idb tool will also allow you to navigate through the
    app tree structure from the **Filesystem** tab, taking and storing subsequent
    different snapshots to navigate and compare at a later stage:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 说到静态数据，在**存储**标签下，你可以分析所有与目标应用相关的文件，例如`plist`、`sqlite`数据库和`Cache.db`，其中包含缓存的HTTP请求/响应以及Web应用缓存的离线数据，如图片、HTML、JavaScript、样式表等。idb工具还允许你从**文件系统**标签中浏览应用的树状结构，并拍摄和存储不同的快照，以便后续在不同阶段进行导航和比较：
- en: '![idb](img/image_07_005.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![idb](img/image_07_005.jpg)'
- en: Two other interesting functionalities provided are **URL Handlers**, which shows
    you the list of URL handlers and includes a basic fuzzer that can be used to fuzz
    input data via the URL schemes, and the **Keychain** dumper, which is a functionality
    that allows you to dump the Keychain using `keychain_dump`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 另外两个有趣的功能是**URL处理程序**，它显示URL处理程序的列表，并包括一个基础的模糊测试工具，可以通过URL方案模糊输入数据，以及**Keychain**转储工具，它允许你使用`keychain_dump`转储Keychain。
- en: 'The **Tools** tab contains several different tools that are quite handy; they
    are as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**工具**标签包含几个非常实用的工具，具体如下：'
- en: '**Background screenshot**: Although this tool is more useful for forensics/security
    purposes, it looks for an eventual screenshot taken by the system when putting
    the application in the background by pushing the Home button.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后台截图**：尽管该工具更适用于取证/安全目的，但它会寻找系统在将应用置于后台（通过按下Home按钮）时拍摄的最终截图。'
- en: '**Certification manager**: This tool will speed up the management and installation
    of the CA certificate. This is extremely useful, for example, when using Burp
    for HTTPS traffic and an application that actually checks that SSL is in place.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**证书管理器**：此工具可以加速CA证书的管理和安装。例如，在使用Burp进行HTTPS流量分析时，它非常有用，尤其是当应用程序检查SSL是否正常时。'
- en: '**/etc/hosts file editor**: As we have seen before for the data in transit,
    apps do not always use the HTTP/S protocol, so Burp will not intercept. With this
    editor, you can quickly access and modify `/etc/hosts` of the iPhone in order
    to redirect the traffic toward custom services you may have fired up for the analysis.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**/etc/hosts文件编辑器**：正如我们之前所看到的，应用程序并不总是使用HTTP/S协议，因此Burp无法拦截。使用此编辑器，你可以快速访问并修改iPhone的`/etc/hosts`文件，以便将流量重定向到你为分析启动的自定义服务。'
- en: '![idb](img/image_07_006.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![idb](img/image_07_006.jpg)'
- en: Last but not least, `idb` offers a real-time log (`syslog`) and pasteboard viewer
    (refer to the following screenshot) via the **Log** and **Pasteboard** tabs, respectively.
    Although it may not seem of great use to monitor the pasteboard when you are the
    one testing the application, it may surprise you to know that applications use
    the pasteboard also for **Inter-Process Communication** (**IPC**). By default,
    idb monitors only the main (default) pasteboard, but you can add additional pasteboard
    names to the list on the right-hand side so that you will also be able to monitor
    the private pasteboards.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，`idb` 通过 **日志** 和 **粘贴板** 标签分别提供实时日志（`syslog`）和粘贴板查看器（参考以下截图）。虽然在你自己测试应用时监控粘贴板可能看起来并不是特别有用，但你可能会惊讶地发现，应用程序也使用粘贴板进行
    **进程间通信** (**IPC**)。默认情况下，idb 只监控主（默认）粘贴板，但你可以在右侧列表中添加其他粘贴板名称，这样你也可以监控私人粘贴板。
- en: 'Regarding the Log panel, idb includes both system messages and any log statements
    that the app produces using `NSLog`, which often discloses sensitive data:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 关于日志面板，idb 包含了系统消息和应用程序通过 `NSLog` 产生的任何日志信息，这些日志通常会暴露敏感数据：
- en: '![idb](img/image_07_007.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![idb](img/image_07_007.jpg)'
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we introduced some tools for analyzing iOS applications, suspicious
    or not, mainly from a behavioral/dynamic point of view. You learned how to quickly
    analyze the binary, review the data and logs produced by the targeted application,
    intercept, manipulate, and analyze the data sent and received over the network,
    and automate most of the tasks with ad hoc toolkits, such as idb.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了一些分析 iOS 应用程序的工具，无论它们是否可疑，主要从行为/动态角度出发。你学习了如何快速分析二进制文件，审查目标应用程序产生的数据和日志，拦截、操作和分析通过网络发送和接收的数据，并使用临时工具包（如
    idb）自动化大多数任务。
- en: Self-test questions
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自测题
- en: Q1\. Which tool can be used to extract Objective-C class information from iOS
    applications?
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Q1\. 哪个工具可以用来提取 iOS 应用程序中的 Objective-C 类信息？
- en: OpenSSH
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: OpenSSH
- en: MTerminal
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MTerminal
- en: class-dump
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: class-dump
- en: Keychain Dumper
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Keychain Dumper
- en: Q2\. Which tool can be used to dump an unencrypted application from memory?
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Q2\. 哪个工具可以用来从内存中转储未加密的应用程序？
- en: usbmuxd
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: usbmuxd
- en: Keychain Dumper
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Keychain Dumper
- en: dumpDecrypted
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: dumpDecrypted
- en: OpenSSH
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: OpenSSH
- en: Q3\. Which tool can be used to verify the pasteboard content?
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Q3\. 哪个工具可以用来验证粘贴板内容？
- en: dumpDecrypted
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: dumpDecrypted
- en: iRet
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: iRet
- en: iLoot
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: iLoot
- en: idb
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: idb
- en: Q4\. Which tools would you use to best analyze data in transit?
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Q4\. 你会使用哪些工具来分析传输中的数据？
- en: Burp Proxy + Wireshark
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Burp Proxy + Wireshark
- en: iproxy + Wireshark
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: iproxy + Wireshark
- en: dumpDecrypted + tcpdump
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: dumpDecrypted + tcpdump
- en: tcpdump + iproxy
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: tcpdump + iproxy
- en: Q5\. Which set of tools allow automating a series of tasks in order to analyze
    and reverse engineer iOS applications?
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Q5\. 哪一组工具可以实现任务自动化，以便分析和逆向工程 iOS 应用程序？
- en: iLoot
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: iLoot
- en: idb
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: idb
- en: class-dump
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: class-dump
- en: dumpDecrypted
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: dumpDecrypted
