- en: Metasploit for Secret Agents
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 秘密特工的Metasploit
- en: 'This chapter brings in a variety of techniques that will mostly be used by
    law enforcement agencies. The methods discussed in this chapter will extend the
    usage of Metasploit to surveillance and offensive cyber operations. Throughout
    this chapter, we will look at:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了执法机构将主要使用的各种技术。本章讨论的方法将扩展Metasploit的用途到监视和攻击性网络行动。在本章中，我们将探讨：
- en: Procedures for maintaining anonymity
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持匿名的程序
- en: Using obfuscation in payloads
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在有效负载中使用混淆
- en: Achieving persistence with APT techniques
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用APT技术实现持久性
- en: Harvesting files from the target
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从目标中获取文件
- en: The power of Python in Metasploit
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python在Metasploit中的力量
- en: Maintaining anonymity in Meterpreter sessions
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Meterpreter会话中保持匿名性
- en: As a law enforcement agent, it is advisable that you maintain anonymity throughout
    your command and control sessions. However, most law enforcement agencies use
    VPS servers for their command and control software, which is good since they introduce
    proxy tunnels within their endpoints. It is also another reason that law enforcement
    agents may not use Metasploit since it is trivial to add proxies between you and
    your targets.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作为执法人员，建议您在整个命令和控制会话中保持匿名性。然而，大多数执法机构使用VPS服务器来进行命令和控制软件，这是很好的，因为它们在其端点内引入了代理隧道。这也是执法人员可能不使用Metasploit的另一个原因，因为在您和目标之间添加代理是微不足道的。
- en: 'Let''s see how we can circumvent such situations and make Metasploit not only
    usable but a favorable choice for law enforcement. Consider the following scenario:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何规避这种情况，使Metasploit不仅可用，而且成为执法机构的首选。考虑以下情景：
- en: '![](img/c5d1199f-831a-465b-9bbb-ce30f5b33bb5.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5d1199f-831a-465b-9bbb-ce30f5b33bb5.png)'
- en: 'We can see that we have three public IPs in the plot. Our target is on `106.215.26.19,`
    and our Metasploit instance is running on `185.91.2xx.xxx` on port `8443`. We
    can leverage the power of Metasploit here by generating a reverse HTTPS payload
    which offers built-in proxy services. Let''s create a simple proxy payload, as
    shown in the following screenshot:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到图中有三个公共IP。我们的目标是`106.215.26.19`，我们的Metasploit实例正在`185.91.2xx.xxx`上的端口`8443`上运行。我们可以利用Metasploit的强大功能，在这里生成一个反向HTTPS有效负载，该有效负载提供了内置的代理服务。让我们创建一个简单的代理有效负载，如下面的屏幕截图所示：
- en: '![](img/5db36886-7391-46db-a4c9-3f316d63555b.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5db36886-7391-46db-a4c9-3f316d63555b.png)'
- en: 'We can see that we have set `HTTPProxyHost` and `HTTPProxyPort` to our proxy
    server, which is a Windows-based operating system running CCProxy software, as
    shown in the following screenshot:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，我们已经将`HTTPProxyHost`和`HTTPProxyPort`设置为我们的代理服务器，该服务器是运行CCProxy软件的基于Windows的操作系统，如下面的屏幕截图所示：
- en: '![](img/d9ac17d0-8916-4d15-b4a8-4df8e668c6c5.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9ac17d0-8916-4d15-b4a8-4df8e668c6c5.png)'
- en: 'The CCProxy software is proxy server software for Windows. We can easily configure
    ports and even authentication. It''s generally good practice to implement authentication
    so that no one can use your proxy without the use of proper credentials. You can
    define the credentials while generating payloads using the `HttpProxyPass` and
    `HttpProxyUser` options. Next, we need to start the handler at the `185.92.2xx.xxx`
    server, as shown in the following screenshot:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: CCProxy软件是Windows的代理服务器软件。我们可以轻松配置端口，甚至进行身份验证。通常最好实施身份验证，以便没有人可以在没有正确凭据的情况下使用您的代理。您可以在使用`HttpProxyPass`和`HttpProxyUser`选项生成有效负载时定义凭据。接下来，我们需要在`185.92.2xx.xxx`服务器上启动处理程序，如下面的屏幕截图所示：
- en: '![](img/a734dc6b-eb41-4c2b-9db1-a602762ce398.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a734dc6b-eb41-4c2b-9db1-a602762ce398.png)'
- en: 'Bingo! We can see that we quickly got access to our proxy server . This means
    that we no longer have to move our Metasploit setup from one server to another;
    we can have an intermediate proxy server that can be changed on the fly. Let''s
    inspect the traffic at our handler server and check if we are getting any direct
    hits from the target:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们可以看到我们很快就访问了我们的代理服务器。这意味着我们不再需要将我们的Metasploit设置从一个服务器移动到另一个服务器；我们可以有一个中间代理服务器，可以随时更改。让我们检查处理程序服务器上的流量，并检查我们是否从目标处获得任何直接命中：
- en: '![](img/192e645c-5d6d-4cf2-bcf6-ecaeb2b29a86.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/192e645c-5d6d-4cf2-bcf6-ecaeb2b29a86.png)'
- en: Nope. We got all the hits from the proxy server. We just saw how we could anonymize
    our Metasploit endpoint using an intermediate proxy server.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 不。我们从代理服务器得到了所有命中。我们刚刚看到了如何使用中间代理服务器对我们的Metasploit端点进行匿名化。
- en: Maintaining access using vulnerabilities in common software
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用常见软件中的漏洞保持访问
- en: The DLL search order hijacking/DLL planting technique is one of my favorite
    persistence-gaining methods in achieving long-time access while evading the eyes
    of the administrators. Let's talk about this technique in the next section.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: DLL搜索顺序劫持/DLL植入技术是我最喜欢的持久性获取方法之一，可以在长时间访问中躲避管理员的监视。让我们在下一节中讨论这种技术。
- en: DLL search order hijacking
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DLL搜索顺序劫持
- en: As the name suggests, the DLL search order hijacking vulnerability allows an
    attacker to hijack the search order of DLLs loaded by a program and will enable
    them to insert a malicious DLL instead of a legit one.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 顾名思义，DLL搜索顺序劫持漏洞允许攻击者劫持程序加载的DLL的搜索顺序，并使他们能够插入恶意DLL而不是合法的DLL。
- en: 'Mostly, software, once executed, will look for DLL files in its current folder
    and `System32` folder. However, sometimes the DLLs, which are not found in its
    current directory, are then searched in the `System32` folder instead of directly
    loading them from `System32` first-hand. This situation can be exploited by an
    attacker where they can put a malicious DLL file in the current folder and hijack
    the flow which would have otherwise loaded the DLL from the `System32` folder.
    Let''s understand this with the help of the following diagram:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，一旦执行软件，它将在当前文件夹和`System32`文件夹中查找DLL文件。然而，有时在当前目录中找不到DLL时，它们会在`System32`文件夹中搜索，而不是直接从`System32`加载它们。攻击者可以利用这种情况，在当前文件夹中放置一个恶意DLL文件，并劫持本来应该直接从`System32`加载DLL的流程。让我们通过下面的图示来理解这一点：
- en: '![](img/7593a117-ce5f-44e7-90a0-64f43f2fbcc6.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7593a117-ce5f-44e7-90a0-64f43f2fbcc6.png)'
- en: 'We can see from the preceding diagram that an application, once executed, loads
    three DLL files which are xx1, xx2, and xx3\. However, it also searches for a
    `yy1.dll` file which is not present in the directory. Failure to find `yy1.dll`
    in the current folder means the program will jump to `yy1.dll` from the `System32`
    folder. Now, consider that an attacker has placed a malicious DLL file named `yy1.dll`
    into the application''s current folder. The execution will never jump to the `System32`
    folder and will load the maliciously planted DLL file thinking that it''s the
    legit one. These situations will eventually present the attacker with a beautiful-looking
    Meterpreter shell. So, let''s try this on a standard application such as a VLC
    player, as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的图表中，我们可以看到一个应用程序一旦执行，就会加载三个DLL文件，分别是xx1、xx2和xx3。但是，它还会搜索一个当前目录中不存在的`yy1.dll`文件。在当前文件夹中找不到`yy1.dll`意味着程序将从`System32`文件夹跳转到`yy1.dll`。现在，假设攻击者将一个名为`yy1.dll`的恶意DLL文件放入应用程序的当前文件夹。执行将永远不会跳转到`System32`文件夹，并且将加载恶意植入的DLL文件，认为它是合法的。这些情况最终将为攻击者提供一个看起来很漂亮的Meterpreter
    shell。因此，让我们尝试在标准应用程序（如VLC播放器）上进行如下操作：
- en: '![](img/d90aa0ec-6293-4906-aace-250f6da334c9.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d90aa0ec-6293-4906-aace-250f6da334c9.png)'
- en: 'Let''s create a DLL file called `CRYPTBASE.dll`. The CryptBase file is a universal
    file shipped with most applications. However, the VLC player should have referred
    this directly from System32 instead of its current directory. To hijack the application''s
    flow, we need to place this file in the VLC player''s program files directory.
    Therefore, the check will not fail, and it will never go to System32\. This means
    that this malicious DLL will execute instead of the original one. Consider we
    have a Meterpreter at the target, and that we can see that the VLC player is already
    installed:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`CRYPTBASE.dll`的DLL文件。CryptBase文件是大多数应用程序随附的通用文件。但是，VLC播放器应该直接从System32引用它，而不是从当前目录引用它。为了劫持应用程序的流程，我们需要将此文件放在VLC播放器的程序文件目录中。因此，检查将不会失败，并且永远不会转到System32。这意味着这个恶意的DLL将执行，而不是原始的DLL。假设我们在目标端有一个Meterpreter，并且我们可以看到VLC播放器已经安装：
- en: '![](img/4c850531-abc5-42b8-a5d9-8d08e740d3d7.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4c850531-abc5-42b8-a5d9-8d08e740d3d7.png)'
- en: 'Let''s browse to the VLC directory and upload this malicious DLL into it:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们浏览到VLC目录并将这个恶意的DLL上传到其中：
- en: '![](img/086a4bf2-dd80-4c22-a6dd-9cbfa4cca67c.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/086a4bf2-dd80-4c22-a6dd-9cbfa4cca67c.png)'
- en: 'We can see that we used `cd` on the directory and uploaded the malicious DLL
    file. Let''s quickly spawn a handler for our DLL as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们在目录上使用了`cd`并上传了恶意的DLL文件。让我们快速为我们的DLL生成一个处理程序：
- en: '![](img/e6a8324a-9f2d-4003-824d-c884bef7b513.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e6a8324a-9f2d-4003-824d-c884bef7b513.png)'
- en: 'We have everything set. As soon as someone opens the VLC player, we will get
    a shell. Let''s try executing the VLC player on the user''s behalf as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好了。一旦有人打开VLC播放器，我们就会得到一个shell。让我们尝试代表用户执行VLC播放器如下：
- en: '![](img/a96056b0-f2ec-411c-bdbc-5c5f33e712d1.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a96056b0-f2ec-411c-bdbc-5c5f33e712d1.png)'
- en: 'We can see that our DLL was successfully placed in the folder. Let''s run VLC
    through Meterpreter as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们的DLL已成功放置在文件夹中。让我们通过Meterpreter运行VLC如下：
- en: '![](img/df28cbb5-8b59-4c1f-9a98-695227a9a1d3.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/df28cbb5-8b59-4c1f-9a98-695227a9a1d3.png)'
- en: 'Woo! We can see that as soon as we executed `vlc.exe`, we got another shell.
    Therefore, we now have control over the system so that as soon as someone executes
    VLC, we will get a shell back for sure. But hang on! Let''s look at the target''s
    side to see if everything went smoothly:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！我们可以看到，一旦我们执行了`vlc.exe`，我们就得到了另一个shell。因此，我们现在可以控制系统，以便一旦有人执行VLC，我们肯定会得到一个shell。但是等等！让我们看看目标方面，看看一切是否顺利进行：
- en: '![](img/3e6c9daa-7c87-41c3-b712-15b7f7c11b59.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3e6c9daa-7c87-41c3-b712-15b7f7c11b59.png)'
- en: The target's end looks fine, but there is no VLC player. We will need to spawn
    the VLC player somehow because a broken installation may get replaced/reinstalled
    soon enough. The VLC player crashed because it failed to load the proper functions
    from the `CRYPTBASE.DLL` file as we used our malicious DLL instead of the original
    DLL file. To overcome this problem, we will use the backdoor factory tool to backdoor
    an original DLL file and use it instead of a plain Meterpreter DLL. This means
    that our backdoor file will restore proper functioning of the VLC player along
    with providing us with access to the system.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 目标端看起来不错，但没有VLC播放器。我们需要以某种方式生成VLC播放器，因为损坏的安装可能很快被替换/重新安装。VLC播放器崩溃是因为它无法从`CRYPTBASE.DLL`文件中加载正确的函数，因为我们使用了恶意DLL而不是原始DLL文件。为了解决这个问题，我们将使用后门工厂工具来设置原始DLL文件的后门，并使用它来代替普通的Meterpreter
    DLL。这意味着我们的后门文件将恢复VLC播放器的正常功能，并为我们提供对系统的访问权限。
- en: Using code caves for hiding backdoors
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用代码洞藏隐藏后门
- en: 'The code caving technique is generally used when backdoors are kept hidden
    inside free space within the program executables and library files. The method
    masks the backdoor that is typically inside an empty memory region and then patches
    the binary to make a start from the backdoor itself. Let''s patch the CryptBase
    DLL file as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当后门被隐藏在程序可执行文件和库文件的空闲空间中时，通常会使用代码挖掘技术。该方法掩盖了通常位于空内存区域内的后门，然后修补了二进制文件，使其从后门开始运行。让我们按照以下方式修补CryptBase
    DLL文件：
- en: '![](img/36697485-50c9-4878-ac6f-074df9a61df7.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36697485-50c9-4878-ac6f-074df9a61df7.png)'
- en: The backdoor factory is shipped along with Kali Linux. We have used the `-f`
    switch to define the DLL file to be backdoored and the `-S` switch to specify
    the payload. The `-H` and `-P` denote the host and port, respectively, while the
    `-o` switch specifies the output file.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 后门工厂随Kali Linux一起提供。我们使用`-f`开关定义要设置后门的DLL文件，使用`-S`开关指定有效载荷。`-H`和`-P`表示主机和端口，而`-o`开关指定输出文件。
- en: The `-Z` switch denotes skipping the signing process for the executable.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`-Z`开关表示跳过可执行文件的签名过程。'
- en: 'As soon as the backdooring process starts, we will be presented with the following
    screen:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦后门进程开始，我们将看到以下屏幕：
- en: '![](img/337532ab-03da-4f65-b725-8f1d376274b4.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/337532ab-03da-4f65-b725-8f1d376274b4.png)'
- en: 'We can see that the backdoor factory tool is trying to find a code cave in
    the DLL which has a length of `343` or more. Let''s see what we get:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到后门工厂工具正在尝试在具有长度为`343`或更长的DLL中找到代码洞。让我们看看我们得到了什么：
- en: '![](img/4453c970-0340-4f13-894a-7533bb238a22.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4453c970-0340-4f13-894a-7533bb238a22.png)'
- en: 'Bingo! We got three different code caves to place our shellcode in. Let''s
    choose any random one, say, number three:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们得到了三个不同的代码洞，可以放置我们的shellcode。让我们选择任意一个，比如说，第三个：
- en: '![](img/dc4558bf-9fa4-4ec0-8b1f-786b0839b95f.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc4558bf-9fa4-4ec0-8b1f-786b0839b95f.png)'
- en: We can see that the DLL is now backdoored and patched, which means that the
    entry point of the DLL will now point to our shellcode in the `.reloc` section.
    We can place this file in the `Program Files` directory of the vulnerable software,
    which is VLC in our case, and it will start executing instead of crashing like
    the one we saw in the previous section that provided us with access to the machine.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到DLL现在已经被植入后门并修补，这意味着DLL的入口点现在将指向我们在`.reloc`部分中的shellcode。我们可以将此文件放在易受攻击软件的`Program
    Files`目录中，这在我们的案例中是VLC，并且它将开始执行，而不是像我们在前一节中看到的那样崩溃，这为我们提供了对机器的访问。
- en: Harvesting files from target systems
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从目标系统中收集文件
- en: 'Using file sweeping capabilities in Metasploit is effortless. The `enum_files`
    post exploitation module helps to automate file collection services. Let''s see
    how we can use it:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在Metasploit中使用文件扫描功能非常简单。`enum_files`后渗透模块有助于自动化文件收集服务。让我们看看如何使用它：
- en: '![](img/07d774f6-a28b-472a-b333-e25b963bfe11.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/07d774f6-a28b-472a-b333-e25b963bfe11.png)'
- en: We can see that we used the `enum_files` post-exploitation module. We used `FILE_GLOBS`
    as `*.docx OR *.pdf OR *.xlsx`, which means that the search will occur on these
    three types of file formats. Next, we just set the session ID to `5`, which is
    nothing but our session identifier. We can see that as soon as we ran the module,
    it collected all the files found during the search and downloaded them automatically.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们使用了`enum_files`后渗透模块。我们使用`FILE_GLOBS`作为`*.docx OR *.pdf OR *.xlsx`，这意味着搜索将发生在这三种文件格式上。接下来，我们只需将会话ID设置为`5`，这只是我们的会话标识符。我们可以看到，一旦我们运行了模块，它就会自动收集搜索期间找到的所有文件并下载它们。
- en: Using venom for obfuscation
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用毒液进行混淆
- en: 'In the previous chapter, we saw how we could defeat AVs with custom encoders.
    Let''s go one step ahead and talk about encryption and obfuscation in the Metasploit
    payloads; we can use a great tool called **venom** for this. Let''s create some
    encrypted Meterpreter shellcode, as shown in the following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到了如何使用自定义编码器击败AV。让我们再进一步谈谈Metasploit有效载荷中的加密和混淆；我们可以使用一个名为**venom**的强大工具。让我们创建一些加密的Meterpreter
    shellcode，如下截图所示：
- en: '![](img/91066b52-9866-428a-90ff-6a856f18f156.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/91066b52-9866-428a-90ff-6a856f18f156.png)'
- en: 'As soon as you start venom in Kali Linux, you will be presented with the screen
    shown in the preceding screenshot. The venom framework is a creative work from
    Pedro Nobrega and Chaitanya Haritash (**Suspicious-Shell-Activity**), who worked
    extensively to simplify shellcode and backdoor generation for various operating
    systems. Let''s hit *Enter* to continue:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在Kali Linux中启动毒液，您将看到前面截图中显示的屏幕。毒液框架是Pedro Nobrega和Chaitanya Haritash（**Suspicious-Shell-Activity**）的创意作品，他们致力于简化各种操作系统的shellcode和后门生成。让我们按*Enter*继续：
- en: '![](img/dd0e21e5-1e9d-471e-869e-ccb982f36c43.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd0e21e5-1e9d-471e-869e-ccb982f36c43.png)'
- en: 'As we can see, we have options to create payloads for a variety of operating
    systems, and we even have options to create multi-OS payloads. Let''s choose `2`
    to select `Windows-OS payloads`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，我们有各种操作系统的创建有效载荷的选项，甚至有创建多操作系统有效载荷的选项。让我们选择`2`来选择`Windows-OS有效载荷`：
- en: '![](img/fbf36017-9e5e-4bf9-a046-87df0a73c49c.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fbf36017-9e5e-4bf9-a046-87df0a73c49c.png)'
- en: 'We will see multiple agents supported on Windows-based operating systems. Let''s
    choose agent number `16`, which is a combination of C and Python with UUID obfuscation.
    Next, we will be presented with the option to enter the localhost, as shown in
    the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到在基于Windows的操作系统上支持多个代理。让我们选择代理编号`16`，这是C和Python的组合，并带有UUID混淆。接下来，我们将看到输入本地主机的选项，如下截图所示：
- en: '![](img/ee093683-4780-4122-969a-12bd29abf0c5.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee093683-4780-4122-969a-12bd29abf0c5.png)'
- en: 'Once added, we will get a similar option to add LPORT, the payload, and the
    name of the output file. We will choose `443` as LPORT, the payload as `reverse_winhttps`,
    and any suitable name as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 添加后，我们将获得类似的选项来添加LPORT、有效载荷和输出文件的名称。我们将选择`443`作为LPORT，有效载荷为`reverse_winhttps`，以及任何合适的名称如下：
- en: '![](img/9b9c1db1-9e56-45c5-aa80-c8cc30c27017.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9b9c1db1-9e56-45c5-aa80-c8cc30c27017.png)'
- en: 'Next, we will see that the generation process gets started and we will be presented
    with an option to select an icon for our executable as well:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看到生成过程开始，并且我们将有选择可执行文件图标的选项：
- en: '![](img/a9c2e20a-5fc8-4c0e-aacf-d74723501512.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a9c2e20a-5fc8-4c0e-aacf-d74723501512.png)'
- en: 'The venom framework will start a matching handler for the generated executable
    as well, as shown in the following screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 毒液框架还将为生成的可执行文件启动匹配处理程序，如下截图所示：
- en: '![](img/bf150214-64cf-4001-84e0-39d36814b758.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bf150214-64cf-4001-84e0-39d36814b758.png)'
- en: 'As soon as the file is executed on the target, we will get the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦文件在目标上执行，我们将得到以下结果：
- en: '![](img/eb732d36-722d-4c13-b576-34afd8f80890.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb732d36-722d-4c13-b576-34afd8f80890.png)'
- en: 'We got access with ease. But we can see that the venom tool has implemented
    best practices such as the usage of an SSL certificate from Gmail, staging, and
    the `shikata_ga_nai` encoder for communication. Let''s scan the binary on [http://virscan.org/](http://virscan.org/)
    as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们轻松地获得了访问权限。但我们可以看到毒液工具已经实现了最佳实践，例如使用来自Gmail的SSL证书、分段和用于通信的`shikata_ga_nai`编码器。让我们在[http://virscan.org/](http://virscan.org/)上扫描二进制文件如下：
- en: '![](img/d1e4214b-cba4-4af6-9778-c425206e5de5.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d1e4214b-cba4-4af6-9778-c425206e5de5.png)'
- en: We can see that the detection is almost negligible, with only one antivirus
    scanner detecting it as a backdoor.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到检测几乎可以忽略不计，只有一个杀毒软件扫描器将其检测为后门。
- en: Covering tracks with anti-forensics modules
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用反取证模块覆盖痕迹
- en: 'Metasploit does provide a good number of features to cover tracks. However,
    from a forensics standpoint, they still might lack some core areas which may reveal
    activities and useful information about the attack. There are many modules on
    the internet that tend to provide custom functionalities. Some of them do make
    it to the core Metasploit repos while some go unnoticed. The module we are about
    to discuss is an anti-forensics module offering a ton of features such as clearing
    event logs, clearing log files, and manipulating registries, .lnk files, .tmp,
    .log, browser history, **Prefetch Files** (**.pf**), RecentDocs, ShellBags, Temp/Recent
    folders, and also restore points. Pedro Nobrega, the author of this module, has
    worked extensively on identifying the forensic artifacts and created this module,
    keeping forensic analysis in mind. We can get this module from [https://github.com/r00t-3xp10it/msf-auxiliarys/blob/master/windows/auxiliarys/CleanTracks.rb](https://github.com/r00t-3xp10it/msf-auxiliarys/blob/master/windows/auxiliarys/CleanTracks.rb)
    and load this module in Metasploit using the `loadpath` command, as we did in
    the first few chapters, or by placing the file in the `post/windows/manage` directory.
    Let''s see what features we need to enable when we want to run this module:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit确实提供了许多功能来覆盖痕迹。但是，从取证的角度来看，它们仍然可能缺乏一些核心领域，这些领域可能会揭示有关攻击的活动和有用信息。互联网上有许多模块，这些模块倾向于提供自定义功能。其中一些模块会成为核心Metasploit存储库的一部分，而另一些则会被忽视。我们将要讨论的模块是一个提供大量功能的反取证模块，例如清除事件日志、清除日志文件、操纵注册表、.lnk文件、.tmp、.log、浏览器历史、**预取文件**（**.pf**）、最近文档、ShellBags、Temp/最近文件夹，以及还原点。该模块的作者Pedro
    Nobrega在识别取证证据方面进行了大量工作，并创建了这个模块，考虑到取证分析。我们可以从[https://github.com/r00t-3xp10it/msf-auxiliarys/blob/master/windows/auxiliarys/CleanTracks.rb](https://github.com/r00t-3xp10it/msf-auxiliarys/blob/master/windows/auxiliarys/CleanTracks.rb)获取此模块，并使用`loadpath`命令在Metasploit中加载此模块，就像我们在前几章中所做的那样，或者将文件放在`post/windows/manage`目录中。让我们看看在运行此模块时需要启用哪些功能：
- en: '![](img/aebd50a3-36bb-4365-aad6-ae9b101f60e8.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aebd50a3-36bb-4365-aad6-ae9b101f60e8.png)'
- en: 'We can see that we enabled `CLEANER`, `DEL_LOGS`, and `GET_SYS` on the module.
    Let''s see what happens when we execute this module:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们在模块上启用了`CLEANER`、`DEL_LOGS`和`GET_SYS`。让我们看看当我们执行此模块时会发生什么：
- en: '![](img/eac5f7f4-96a5-46e6-93ce-4385f2f8d15f.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eac5f7f4-96a5-46e6-93ce-4385f2f8d15f.png)'
- en: 'We can see that our module is running fine. Let''s see what actions it''s performing
    as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们的模块运行正常。让我们看看它执行的操作如下：
- en: '![](img/3dbefbc9-2025-43b8-ae9f-00aec11ec5ca.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3dbefbc9-2025-43b8-ae9f-00aec11ec5ca.png)'
- en: 'We can see that the log files, temp files, and shellbags are being cleared
    from the target system. To ensure that the module has worked adequately, we can
    see the following screenshot , which denotes a good number of logs before the
    module''s execution:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到目标系统中的日志文件、临时文件和shellbags已被清除。为了确保模块已经充分工作，我们可以看到以下截图，显示了模块执行前的大量日志：
- en: '![](img/2ee9201c-684c-4d49-9a87-45658b2d0afd.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ee9201c-684c-4d49-9a87-45658b2d0afd.png)'
- en: 'As soon as the module was executed, the state of the logs in the system changed,
    as shown in the following screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦模块被执行，系统中日志的状态发生了变化，如下截图所示：
- en: '![](img/9108095a-e613-4056-a18f-76cd046c038d.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9108095a-e613-4056-a18f-76cd046c038d.png)'
- en: 'The beautiful part of the module except those we saw in the preceding screenshot
    is its advanced options:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们在前面的截图中看到的部分，该模块的精选选项还包括：
- en: '![](img/0b4ee2ad-536f-4e6a-8292-8bdaf6246012.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b4ee2ad-536f-4e6a-8292-8bdaf6246012.png)'
- en: The `DIR_MACE` option takes any directory as input and modifies the modified,
    accessed, and created timestamps of the content that is present inside it. The
    `PANIC` option will format the NTFS system drive, and hence this can be dangerous.
    The `REVERT` option will set default values for most of the policies while the
    `PREVENT` option will try avoiding logs by setting such values in the system,
    which will prevent log creation and the generation of data on the target. This
    is one of the most desired functionalities, especially when it comes to law enforcement.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`DIR_MACE` 选项接受任何目录作为输入，并修改其中存在的内容的修改、访问和创建时间戳。`PANIC` 选项将格式化NTFS系统驱动器，因此这可能很危险。`REVERT`
    选项将为大多数策略设置默认值，而 `PREVENT` 选项将尝试通过在系统中设置这些值来避免日志记录，从而防止在目标上创建日志和生成数据。这是最受欢迎的功能之一，特别是在执法方面。'
- en: Summary
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Throughout this chapter, we looked at specialized tools and techniques that
    can aid law enforcement agencies. However, all these techniques must be carefully
    practiced as specific laws may restrict you while performing these exercises.
    Nevertheless, throughout this chapter, we covered how we could proxy Meterpreter
    sessions. We looked at APT techniques for gaining persistence, harvesting files
    from the target systems, using venom to obfuscate payloads, and how to cover tracks
    using anti-forensic third-party modules in Metasploit.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了一些专门的工具和技术，可以帮助执法机构。然而，所有这些技术必须小心实践，因为特定的法律可能会限制您在执行这些练习时。尽管如此，在本章中，我们介绍了如何代理Meterpreter会话。我们研究了获得持久性的APT技术，从目标系统中收集文件，使用毒液来混淆有效载荷，以及如何使用Metasploit中的反取证第三方模块来覆盖痕迹。
- en: 'Try the following exercises:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试以下练习：
- en: Try using Metasploit aggregator once its fixed officially
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦官方修复，尝试使用Metasploit聚合器
- en: Complete the code cave exercise and try binding legit DLLs to the payloads without
    crash the original application
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成代码洞练习，并尝试将合法的DLL绑定到有效载荷，而不会使原始应用程序崩溃
- en: Build your own post-exploitation module for DLL planting method
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建自己的后渗透模块，用于DLL植入方法
- en: In the upcoming chapter, we will switch to the infamous Armitage tool and will
    try setting up the red teaming environment while making the most of Armitage with
    custom scripts.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将转向臭名昭著的Armitage工具，并尝试设置红队环境，同时充分利用Armitage的自定义脚本。
