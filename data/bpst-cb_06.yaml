- en: Assessing Session Management Mechanisms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估会话管理机制
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下示例：
- en: Testing session token strength using Sequencer
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Sequencer测试会话令牌强度
- en: Testing for cookie attributes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试cookie属性
- en: Testing for session fixation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试会话固定
- en: Testing for exposed session variables
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试暴露的会话变量
- en: Testing for Cross-Site Request Forgery
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试跨站请求伪造
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: This chapter covers techniques used to bypass and assess session management
    schemes. Session management schemes are used by applications to keep track of
    user activity, usually by means of session tokens. Web assessments of session
    management also involve determining the strength of session tokens used and whether
    those tokens are properly protected. We will learn how to use Burp to perform
    such tests.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了用于绕过和评估会话管理方案的技术。应用程序使用会话管理方案来跟踪用户活动，通常是通过会话令牌。会话管理的Web评估还涉及确定所使用的会话令牌的强度以及这些令牌是否得到了适当的保护。我们将学习如何使用Burp执行这些测试。
- en: Software tool requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件工具要求
- en: 'To complete the recipes in this chapter, you will need the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章的示例，您需要以下内容：
- en: OWASP Broken Web Applications (VM)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP Broken Web Applications（VM）
- en: OWASP Mutillidae link
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP Mutillidae链接
- en: Burp Proxy Community or Professional ([https://portswigger.net/burp/](https://portswigger.net/burp/))
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Burp代理社区版或专业版（[https://portswigger.net/burp/](https://portswigger.net/burp/)）
- en: A Firefox browser configured to allow Burp to proxy traffic ([https://www.mozilla.org/en-US/firefox/new/](https://www.mozilla.org/en-US/firefox/new/))
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置了允许Burp代理流量的Firefox浏览器（[https://www.mozilla.org/en-US/firefox/new/](https://www.mozilla.org/en-US/firefox/new/)）
- en: Testing session token strength using Sequencer
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Sequencer测试会话令牌强度
- en: To track user activity from page to page within an application, developers create
    and assign unique session token values to each user. Most session token mechanisms
    include session IDs, hidden form fields, or cookies. Cookies are placed within
    the user's browser on the client-side.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟踪应用程序内页面到页面的用户活动，开发人员为每个用户创建和分配唯一的会话令牌值。大多数会话令牌机制包括会话ID、隐藏表单字段或cookie。Cookie被放置在用户的浏览器中，位于客户端。
- en: These session tokens should be examined by a penetration tester to ensure their
    uniqueness, randomness, and cryptographic strength, to prevent information leakage.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些会话令牌应该由渗透测试人员检查，以确保它们的唯一性、随机性和密码强度，以防止信息泄露。
- en: If a session token value is easily guessable or remains unchanged after login,
    an attacker could apply (or fixate) a pre-known token value to a user. This is
    known as a **session fixation attack**. Generally speaking, the purpose of the
    attack is to harvest sensitive data in the user's account, since the session token
    is known to the attacker.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果会话令牌值很容易被猜到或在登录后保持不变，攻击者可以将预先已知的令牌值应用（或固定）到用户身上。这被称为**会话固定攻击**。一般来说，攻击的目的是收集用户帐户中的敏感数据，因为攻击者知道会话令牌。
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We'll check the session tokens used in OWASP Mutillidae II to ensure they are
    created in a secure and an unpredictable way. An attacker who is able to predict
    and forge a weak session token can perform session fixation attacks.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将检查OWASP Mutillidae II中使用的会话令牌，以确保它们以安全和不可预测的方式创建。能够预测和伪造弱会话令牌的攻击者可以执行会话固定攻击。
- en: How to do it...
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: Ensure Burp and the OWASP BWA VM are running and that Burp is configured in
    the Firefox browser used to view OWASP BWA applications.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 确保Burp和OWASP BWA VM正在运行，并且已经在用于查看OWASP BWA应用程序的Firefox浏览器中配置了Burp。
- en: From the **OWASP BWA Landing** page, click the link to the OWASP Mutillidae
    II application.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**OWASP BWA Landing**页面，点击链接到OWASP Mutillidae II应用程序。
- en: 'Open the Firefox browser to access the home page of OWASP Mutillidae II (URL: 
    `http://<your_VM_assigned_IP_address>/mutillidae/`). Make sure you are starting
    a fresh session of the Mutillidae application and not logged into it already:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Firefox浏览器，访问OWASP Mutillidae II的主页（URL：`http://<your_VM_assigned_IP_address>/mutillidae/`）。确保您正在启动一个新的Mutillidae应用程序会话，而不是已经登录：
- en: '![](img/00205.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00205.jpeg)'
- en: Switch to the Proxy | HTTP History tab and select the request showing your initial
    browse to the Mutillidae home page.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到代理 | HTTP历史记录选项卡，并选择显示您最初浏览Mutillidae主页的请求。
- en: 'Look for the `GET` request and the associated response containing the `Set-Cookie:` assignments.
    Whenever you see this assignment, you can ensure you are getting a freshly created
    cookie for your session. Specifically, we are interested in the `PHPSESSID` cookie
    value:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找`GET`请求和包含`Set-Cookie:`分配的相关响应。每当看到这个分配时，您可以确保您获得了一个新创建的会话cookie。具体来说，我们对`PHPSESSID`
    cookie值感兴趣：
- en: '![](img/00206.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00206.jpeg)'
- en: 'Highlight the value of the of the `PHPSESSID` cookie, right-click, and select Send
    to Sequencer:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 突出显示`PHPSESSID` cookie的值，右键单击，并选择发送到Sequencer：
- en: '![](img/00207.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00207.jpeg)'
- en: Sequencer is a tool within Burp designed to determine the strength or the quality
    of the randomness created within a session token.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Sequencer是Burp中用于确定会话令牌内部创建的随机性或质量的工具。
- en: After sending the value of the `PHPSESSID` parameter over to Sequencer, you
    will see the value loaded in the Select Live Capture Request table.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`PHPSESSID`参数的值发送到Sequencer后，您将看到该值加载在“选择实时捕获请求”表中。
- en: 'Before pressing the Start live capture button, scroll down to the Token Location
    Within Response section. In the Cookie dropdown list, select `PHPSESSID=<captured
    session token value>`:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在按下“开始实时捕获”按钮之前，向下滚动到响应中的令牌位置部分。在Cookie下拉列表中，选择`PHPSESSID=<捕获的会话令牌值>`：
- en: '![](img/00208.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00208.jpeg)'
- en: Since we have the correct cookie value selected, we can begin the live capture
    process. Click the Start live capture button, and Burp will send multiple requests,
    extracting the PHPSESSID cookie out of each response. After each capture, Sequencer
    performs a statistical analysis of the level of randomness in each token.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们已经选择了正确的cookie值，我们可以开始实时捕获过程。单击开始实时捕获按钮，Burp将发送多个请求，从每个响应中提取PHPSESSID cookie。在每次捕获后，Sequencer对每个令牌的随机性水平进行统计分析。
- en: 'Allow the capture to gather and analyze at least 200 tokens, but feel free
    to let it run longer if you like:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许捕获收集和分析至少200个令牌，但如果您愿意，可以让其运行更长时间：
- en: '![](img/00209.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00209.jpeg)'
- en: 'Once you have at least 200 samples, click the Analyze now button. Whenever
    you are ready to stop the capturing process, press the Stop button and confirm
    Yes:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您至少有200个样本，点击立即分析按钮。每当您准备停止捕获过程时，按停止按钮并确认是：
- en: '![](img/00210.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00210.jpeg)'
- en: 'After the analysis is complete, the output of Sequencer provides an overall
    result. In this case, the quality of randomness for the PHPSESSID session token
    is excellent. The amount of effective entropy is estimated to be 112 bits. From
    a web pentester perspective, these session tokens are very strong, so there is
    no vulnerability to report here. However, though there is no vulnerability present,
    it is good practice to perform such checks on session tokens:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分析完成后，Sequencer的输出提供了一个总体结果。在这种情况下，PHPSESSID会话令牌的随机性质量非常好。有效熵的数量估计为112位。从Web渗透测试人员的角度来看，这些会话令牌非常强大，因此在这里没有漏洞可报告。但是，尽管没有漏洞存在，对会话令牌进行此类检查是一个良好的做法：
- en: '![](img/00211.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00211.jpeg)'
- en: How it works...
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'To better understand the math and hypothesis behind Sequencer, consult Portswigger''s
    documentation on the topic here: [https://portswigger.net/burp/documentation/desktop/tools/sequencer/tests](https://portswigger.net/burp/documentation/desktop/tools/sequencer/tests).'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要更好地理解Sequencer背后的数学和假设，请参阅Portswigger关于该主题的文档：[https://portswigger.net/burp/documentation/desktop/tools/sequencer/tests](https://portswigger.net/burp/documentation/desktop/tools/sequencer/tests)。
- en: Testing for cookie attributes
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试cookie属性
- en: Important user-specific information, such as session tokens, is often stored
    in cookies within the client browser. Due to their importance, cookies need to
    be protected from malicious attacks. This protection usually comes in the form
    of two flags—**secure** and **HttpOnly**.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的特定于用户的信息，例如会话令牌，通常存储在客户端浏览器的cookie中。由于它们的重要性，cookie需要受到恶意攻击的保护。这种保护通常以两个标志的形式出现——**安全**和**HttpOnly**。
- en: The secure flag informs the browser to only send the cookie to the web server
    if the protocol is encrypted (for example, HTTPS, TLS). This flag protects the
    cookie from eavesdropping over unencrypted channels.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 安全标志告诉浏览器，只有在协议加密时（例如HTTPS，TLS）才将cookie发送到Web服务器。该标志保护cookie免受在未加密通道上的窃听。
- en: The HttpOnly flag instructs the browser to not allow access or manipulation
    of the cookie via JavaScript. This flag protects the cookie from cross-site scripting
    attacks.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: HttpOnly标志指示浏览器不允许通过JavaScript访问或操纵cookie。该标志保护cookie免受跨站点脚本攻击。
- en: Getting ready
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做好准备
- en: Check the cookies used in the OWASP Mutillidae II application, to ensure the
    presence of protective flags. Since the Mutillidae application runs over an unencrypted
    channel (for example, HTTP), we can only check for the presence of the HttpOnly
    flag. Therefore, the secure flag is out of scope for this recipe.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 检查OWASP Mutillidae II应用程序中使用的cookie，以确保保护标志的存在。由于Mutillidae应用程序在未加密的通道上运行（例如HTTP），我们只能检查是否存在HttpOnly标志。因此，安全标志不在此处范围之内。
- en: How to do it...
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: Ensure Burp and OWASP BWA VM are running and that Burp is configured in the
    Firefox browser used to view OWASP BWA applications.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 确保Burp和OWASP BWA VM正在运行，并且Burp已配置在用于查看OWASP BWA应用程序的Firefox浏览器中。
- en: From the **OWASP BWA Landing** page, click the link to the OWASP Mutillidae
    II application.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**OWASP BWA着陆**页面，点击链接到OWASP Mutillidae II应用程序。
- en: 'Open the Firefox Browser, to access the home page of OWASP Mutillidae II (URL: 
    `http://<your_VM_assigned_IP_address>/mutillidae/`). Make sure you are starting
    a fresh session and you are not logged in to the Mutillidae application:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Firefox浏览器，访问OWASP Mutillidae II的主页（URL：`http://<your_VM_assigned_IP_address>/mutillidae/`）。确保您开始了一个新的会话，并且没有登录到Mutillidae应用程序：
- en: '![](img/00212.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00212.jpeg)'
- en: Switch to the Proxy | HTTP history tab, and select the request showing your
    initial browse to the Mutillidae home page. Look for the `GET` request and its
    associated response containing `Set-Cookie:` assignments. Whenever you see this
    assignment, you can ensure you are getting a freshly created cookie for your session.
    Specifically, we are interested in the `PHPSESSID` cookie value.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到代理| HTTP历史选项卡，并选择显示您最初浏览Mutillidae主页的请求。查找`GET`请求及其相关的包含`Set-Cookie:`分配的响应。每当看到这个分配时，您可以确保您获得了一个新创建的会话cookie。具体来说，我们对`PHPSESSID`
    cookie值感兴趣。
- en: 'Examine the end of the `Set-Cookie:` assignments lines. Notice the absence
    of the HttpOnly flag for both lines. This means the PHPSESSID and showhints cookie
    values are not protected from JavaScript manipulation. This is a security finding
    that you would include in your report:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`Set-Cookie:`分配行的末尾。注意两行都没有HttpOnly标志。这意味着PHPSESSID和showhints cookie值没有受到JavaScript操纵的保护。这是一个安全发现，您应该在报告中包括：
- en: '![](img/00213.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00213.jpeg)'
- en: How it works...
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'If the two cookies had HttpOnly flags set, the flags would appear at the end
    of the Set-Cookie assignment lines. When present, the flag would immediately follow
    a semicolon ending the path scope of the cookie, followed by the string HttpOnly.
    The display is similar for the `Secure` flag as well:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个cookie都设置了HttpOnly标志，那么标志将出现在Set-Cookie分配行的末尾。当存在时，该标志将紧随着结束cookie的路径范围的分号，后面是字符串HttpOnly。`Secure`标志的显示也类似：
- en: '[PRE0]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Testing for session fixation
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试会话固定
- en: Session tokens are assigned to users for tracking purposes. This means that
    when browsing an application as unauthenticated, a user is assigned a unique session
    ID, which is usually stored in a cookie. Application developers should always
    create a new session token after the user logs into the website. If this session
    token does not change, the application could be susceptible to a session fixation
    attack. It is the responsibility of web penetration testers to determine whether
    this token changes values from an unauthenticated state to an authenticated state.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 会话令牌被分配给用户以进行跟踪。这意味着在未经身份验证时浏览应用程序时，用户会被分配一个唯一的会话ID，通常存储在cookie中。应用程序开发人员应该在用户登录网站后创建一个新的会话令牌。如果这个会话令牌没有改变，应用程序可能容易受到会话固定攻击的影响。确定这个令牌是否从未经身份验证状态到经过身份验证状态改变的值是Web渗透测试人员的责任。
- en: Session fixation is present when application developers do not invalidate the
    unauthenticated session token, allowing the user to use the same one after authentication.
    This scenario allows an attacker with a stolen session token to masquerade as
    the user.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序开发人员不使未经身份验证的会话令牌失效时，会话固定就存在。这使得用户可以在身份验证后继续使用相同的会话令牌。这种情况允许具有窃取会话令牌的攻击者冒充用户。
- en: Getting ready
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using the OWASP Mutillidae II application and Burp's Proxy HTTP History and
    Comparer, we will examine unauthenticated PHPSESSID session token value. Then,
    we will log in to the application and compare the unauthenticated value against
    the authenticated value to determine the presence of the session fixation vulnerability.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OWASP Mutillidae II应用程序和Burp的Proxy HTTP历史和Comparer，我们将检查未经身份验证的PHPSESSID会话令牌值。然后，我们将登录应用程序，并将未经身份验证的值与经过身份验证的值进行比较，以确定会话固定漏洞的存在。
- en: How to do it...
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤
- en: Navigate to the login screen (click Login/Register from the top menu), but do
    not log in yet.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到登录界面（从顶部菜单中点击登录/注册），但暂时不要登录。
- en: 'Switch to Burp''s **Proxy** HTTP history tab, and look for the `GET` request
    showing when you browsed to the login screen. Make a note of the value assigned
    to the `PHPSESSID` parameter placed within a cookie:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp的**Proxy** HTTP历史选项卡，并查找显示您浏览到登录界面时的`GET`请求。记下放置在cookie中的`PHPSESSID`参数的值：
- en: '![](img/00214.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00214.jpeg)'
- en: 'Right-click the `PHPSESSID` parameter and send the request to Comparer:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`PHPSESSID`参数并将请求发送到Comparer：
- en: '![](img/00215.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00215.jpeg)'
- en: Return to the login screen (click Login/Register from the top menu), and, this
    time, log in under the username `ed` and the password `pentest`.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回登录界面（从顶部菜单中点击登录/注册），这次使用用户名`ed`和密码`pentest`登录。
- en: After logging in, switch to Burp's **Proxy** HTTP history tab. Look for the
    `POST` request showing your login (for example, the 302 HTTP status code) as well
    as the immediate `GET` request following the `POST`. Note the `PHPSESSID` assigned
    after login. Right-click and send this request to Comparer.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，切换到Burp的**Proxy** HTTP历史选项卡。查找显示您的登录的`POST`请求（例如，302 HTTP状态代码），以及紧随`POST`之后的即时`GET`请求。注意登录后分配的`PHPSESSID`。右键单击并将此请求发送到Comparer。
- en: 'Switch to Burp''s Comparer. The appropriate requests should already be highlighted
    for you. Click the Words button in the bottom right-hand corner:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp的Comparer。适当的请求应该已经为您突出显示。点击右下角的Words按钮：
- en: '![](img/00216.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00216.jpeg)'
- en: 'A popup shows a detailed comparison of the differences between the two requests. Note
    the value of `PHPSESSID` does not change between the unauthenticated session (on
    the left) and the authenticated session (on the right). This means the application
    has a session fixation vulnerability:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 弹出窗口显示了两个请求之间的差异的详细比较。注意`PHPSESSID`的值在未经身份验证的会话（左侧）和经过身份验证的会话（右侧）之间没有变化。这意味着应用程序存在会话固定漏洞：
- en: '![](img/00217.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00217.jpeg)'
- en: How it works...
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In this recipe, we examined how the `PHPSESSID` value assigned to an unauthenticated
    user remained constant even after authentication. This is a security vulnerability
    allowing for the session fixation attack.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们检查了未经身份验证用户分配的`PHPSESSID`值，即使在身份验证后仍保持不变。这是一个安全漏洞，允许进行会话固定攻击。
- en: Testing for exposed session variables
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试暴露的会话变量
- en: Session variables such as tokens, cookies, or hidden form fields are used by
    application developers to send data between the client and the server. Since these
    variables are exposed on the client-side, an attacker can manipulate them in an
    attempt to gain access to unauthorized data or to capture sensitive information.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如令牌、cookie或隐藏表单字段之类的会话变量被应用程序开发人员用于在客户端和服务器之间发送数据。由于这些变量在客户端暴露，攻击者可以操纵它们，试图获取未经授权的数据或捕获敏感信息。
- en: Burp's Proxy option provides a feature to enhance the visibility of so-called
    *hidden* form fields. This feature allows web application penetration testers
    to determine the level of the sensitivity of data held in these variables. Likewise, a
    pentester can determine whether the manipulation of these values produces a different
    behavior in the application.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Burp的Proxy选项提供了一个功能，可以增强所谓的*隐藏*表单字段的可见性。这个功能允许Web应用程序渗透测试人员确定这些变量中保存的数据的敏感级别。同样，渗透测试人员可以确定操纵这些值是否会导致应用程序行为不同。
- en: Getting ready
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using the OWASP Mutillidae II application and Burp's Proxy's Unhide hidden form
    fields feature, we'll determine whether manipulation of a hidden form field value
    results in gaining access to unauthorized data.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OWASP Mutillidae II应用程序和Burp的Proxy的Unhide hidden form fields功能，我们将确定隐藏表单字段值的操纵是否会导致获取未经授权的数据访问。
- en: How to do it...
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Switch to Burp''s **Proxy** tab, scroll down to the Response Modification section,
    and check the boxes for Unhide hidden form fields and Prominently highlight unhidden
    fields:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp的**Proxy**选项卡，向下滚动到响应修改部分，并选中Unhide hidden form fields和Prominently highlight
    unhidden fields的复选框：
- en: '![](img/00218.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00218.jpeg)'
- en: 'Navigate to the **User Info** page. OWASP 2013 | A1 – Injection (SQL) | SQLi
    – Extract Data | User Info (SQL):'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**User Info**页面。OWASP 2013 | A1 – Injection (SQL) | SQLi – Extract Data |
    User Info (SQL)：
- en: '![](img/00219.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00219.jpeg)'
- en: 'Note the hidden form fields now prominently displayed on the page:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意现在页面上明显显示的隐藏表单字段：
- en: '![](img/00220.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00220.jpeg)'
- en: 'Let''s try to manipulate the value shown, `user-info.php`, by changing it to
    `admin.php` and see how the application reacts. Modify the `user-info.php` to
    `admin.php` within the Hidden field [page] textbox:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试操纵所显示的值，将`user-info.php`更改为`admin.php`，并查看应用程序的反应。在隐藏字段[page]文本框中将`user-info.php`修改为`admin.php`：
- en: '![](img/00221.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00221.jpeg)'
- en: 'Hit the *Enter* key after making the change. You should now see a new page
    loaded showing **PHP Server Configuration** information:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在进行更改后按下*Enter*键。现在您应该看到一个新页面加载，显示**PHP服务器配置**信息：
- en: '![](img/00222.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00222.jpeg)'
- en: How it works...
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: As seen in this recipe, there isn't anything hidden about hidden form fields.
    As penetration testers, we should examine and manipulate these values, to determine
    whether sensitive information is, inadvertently, exposed or whether we can change
    the behavior of the application from what is expected, based on our role and authentication
    status. In the case of this recipe, we were not even logged into the application.
    We manipulated the hidden form field labeled **page** to access a page containing
    fingerprinting information. Access to such information should be protected from
    unauthenticated users.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本教程中所看到的，隐藏表单字段并没有什么隐秘。作为渗透测试人员，我们应该检查和操纵这些值，以确定是否无意中暴露了敏感信息，或者我们是否可以改变应用程序的行为，使其与我们的角色和身份验证状态所期望的不同。在本教程中，我们甚至没有登录到应用程序中。我们操纵了标记为**page**的隐藏表单字段，以访问包含指纹信息的页面。这样的信息访问应该受到未经身份验证的用户的保护。
- en: Testing for Cross-Site Request Forgery
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试跨站请求伪造
- en: '**Cross-Site Request Forgery** (**CSRF**) is an attack that rides on an authenticated
    user''s session to allow an attacker to force the user to execute unwanted actions
    on the attacker''s behalf. The initial lure for this attack can be a phishing
    email or a malicious link executing through a cross-site scripting vulnerability
    found on the victim''s website. CSRF exploitation may lead to a data breach or
    even a full compromise of the web application.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**跨站请求伪造**（**CSRF**）是一种利用经过身份验证的用户会话来允许攻击者强制用户代表其执行不需要的操作的攻击。这种攻击的初始诱饵可能是钓鱼邮件或通过受害者网站上发现的跨站脚本漏洞执行的恶意链接。CSRF利用可能导致数据泄露，甚至完全妥协Web应用程序。'
- en: Getting ready
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using the OWASP Mutillidae II application registration form, determine whether
    a CSRF attack is possible within the same browser (a different tab) while an authenticated
    user is logged into the application.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OWASP Mutillidae II应用程序注册表单，确定在同一浏览器（不同标签页）中是否可能发生CSRF攻击，同时已经有一个经过身份验证的用户登录到应用程序中。
- en: How to do it...
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To level set this recipe, let''s first baseline the current number of records
    in the account table and perform SQL Injection to see this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了对本教程进行基准测试，首先基线化账户表中当前的记录数量，并执行SQL注入来查看：
- en: Navigate to the **User Info** page: OWASP 2013 | A1 – Injection (SQL) | SQLi
    – Extract Data | User Info (SQL).
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**用户信息**页面：OWASP 2013 | A1 – Injection (SQL) | SQLi – Extract Data | User
    Info (SQL)。
- en: At the username prompt, type in a SQL Injection payload to dump the entire account
    table contents.  The payload is `' or 1=1--` <space>  (tick or 1 equals 1 dash
    dash space). Then press the View Account Details button.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在用户名提示处，输入一个SQL注入有效负载来转储整个账户表内容。有效负载是`' or 1=1--` <space>（单引号或1等于1破折号空格）。然后点击查看账户详情按钮。
- en: 'Remember to include the space after the two dashes, since this is a MySQL database;
    otherwise, the payload will not work:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请记住在两个破折号后包括空格，因为这是一个MySQL数据库；否则，有效负载将无法工作：
- en: '![](img/00223.jpeg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00223.jpeg)'
- en: 'When performed correctly, a message displays that there are 24 records found
    in the database for users. The data shown following the message reveals the usernames,
    passwords, and signature strings of all 24 accounts. Only two account details
    are shown here as a sample:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当操作正确时，会显示一个消息，指出数据库中找到了24条用户记录。消息后显示的数据显示了所有24个账户的用户名、密码和签名字符串。这里只显示了两个账户的详细信息作为示例：
- en: '![](img/00224.jpeg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00224.jpeg)'
- en: We confirmed 24 records currently exist in the accounts table of the database.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们确认数据库的账户表中目前存在24条记录。
- en: Now, return to the login screen (click Login/Register from the top menu) and
    select the link Please register here.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，返回到登录页面（从顶部菜单中点击登录/注册），并选择“请在此注册”链接。
- en: After clicking the Please register here link, you are presented with a registration
    form.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“请在此注册”链接后，会出现一个注册表格。
- en: 'Fill out the form to create a tester account. Type in the Username as *tester*,
    the Password as *tester*, and the Signature as `This is a tester account`:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写表格以创建一个测试账户。将用户名输入为*tester*，密码输入为*tester*，签名输入为`This is a tester account`：
- en: '![](img/00225.jpeg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00225.jpeg)'
- en: 'After clicking the Create Account button, you should receive a green banner
    confirming the account was created:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建账户按钮后，您应该收到一个绿色横幅，确认账户已创建：
- en: '![](img/00226.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00226.jpeg)'
- en: 'Return to the **User Info** page: **OWASP 2013| A1 – Injection (SQL) | SQLi
    – Extract Data | User Info (SQL)**.'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到**用户信息**页面：**OWASP 2013| A1 – Injection (SQL) | SQLi – Extract Data | User
    Info (SQL)**。
- en: 'Perform the SQL Injection attack again and verify that you can now see 25 rows
    in the account table, instead of the previous count of 24:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次执行SQL注入攻击，并验证您现在可以在账户表中看到25行，而不是之前的24行：
- en: '![](img/00227.jpeg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00227.jpeg)'
- en: Switch to Burp's Proxy HTTP history tab and view the `POST` request that created
    the account for the tester.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp的代理HTTP历史记录标签，并查看创建测试账户的`POST`请求。
- en: Studying this `POST` request shows the `POST` action (`register.php`) and the
    body data required to perform the action, in this case, `username`, `password`,
    `confirm_password`, and `my_signature`. Also notice there is no CSRF-token used.
    CSRF-tokens are placed within web forms to protect against the very attack we
    are about to perform. Let's proceed.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 研究这个`POST`请求显示了`POST`操作（`register.php`）和执行操作所需的主体数据，即`用户名`、`密码`、`确认密码`和`我的签名`。还要注意没有使用CSRF令牌。CSRF令牌被放置在Web表单中，以防止我们即将执行的攻击。让我们继续。
- en: 'Right-click the `POST` request and click on Send to Repeater:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`POST`请求，然后单击发送到Repeater：
- en: '![](img/00228.jpeg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00228.jpeg)'
- en: 'If you''re using Burp Professional, right-click select Engagement tools | Generate
    CSRF PoC:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您使用Burp Professional，请右键单击选择Engagement工具|生成CSRF PoC：
- en: '![](img/00229.jpeg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00229.jpeg)'
- en: 'Upon clicking this feature, a pop-up box generates the same form used on the
    registration page but without any CSRF token protection:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击此功能后，将生成一个弹出框，其中包含在注册页面上使用的相同表单，但没有任何CSRF令牌保护：
- en: '![](img/00230.jpeg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00230.jpeg)'
- en: 'If you are using Burp Community, you can easily recreate the **CSRF PoC** form
    by viewing the source code of the registration page:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您使用Burp Community，可以通过查看注册页面的源代码轻松重新创建**CSRF PoC**表单：
- en: '![](img/00231.jpeg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00231.jpeg)'
- en: 'While viewing the page source, scroll down to the `<form>` tag section. For
    brevity, the form is recreated next. Insert `attacker` as a value for the username,
    password, and the signature. Copy the following HTML code and save it in a file
    entitled `csrf.html`:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在查看页面源代码时，向下滚动到`<form>`标签部分。为简洁起见，下面重新创建了表单。将`attacker`作为用户名、密码和签名的值。复制以下HTML代码并将其保存在名为`csrf.html`的文件中：
- en: '[PRE1]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, return to the login screen (click Login/Register from the top menu), and
    log in to the application, using the username `ed` and the password `pentest`.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，返回到登录屏幕（从顶部菜单中单击登录/注册），并使用用户名`ed`和密码`pentest`登录应用程序。
- en: 'Open the location on your machine where you saved the `csrf.html` file. Drag
    the file into the browser where ed is authenticated. After you drag the file to
    this browser, `csrf.html` will appear as a separate tab in the same browser:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的计算机上保存了`csrf.html`文件的位置。将文件拖到已经通过身份验证的ed的浏览器中。在您将文件拖到此浏览器后，`csrf.html`将出现为同一浏览器中的单独标签：
- en: '![](img/00232.jpeg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00232.jpeg)'
- en: 'For demonstration purposes, there is a Submit request button. However, in the
    wild, a JavaScript function would automatically execute the action of creating
    an account for the attacker. Click the Submit request button:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 出于演示目的，有一个提交请求按钮。但是，在实际情况中，JavaScript函数会自动执行创建攻击者帐户的操作。单击提交请求按钮：
- en: '![](img/00233.jpeg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00233.jpeg)'
- en: 'You should receive a confirmation that the attacker account is created:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该收到一个确认消息，即攻击者帐户已创建：
- en: '![](img/00234.jpeg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00234.jpeg)'
- en: 'Switch to Burp''s Proxy | HTTP history tab and find the maliciously executed
    `POST` used to create the account for the attacker, while riding on the authenticated
    session of ed''s:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp的Proxy | HTTP history 选项卡，并找到恶意执行的用于在ed的经过身份验证的会话上创建攻击者帐户的`POST`：
- en: '![](img/00235.jpeg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00235.jpeg)'
- en: 'Return to the **User Info** page: OWASP 2013 | A1 – Injection (SQL) | SQLi
    – Extract Data | User Info (SQL), and perform the SQL Injection attack again.
    You will now see 26 rows in the account table instead of the previous count of
    25:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到**用户信息**页面：OWASP 2013 | A1 – Injection (SQL) | SQLi – Extract Data | User
    Info (SQL)，然后再次执行SQL注入攻击。现在，您将看到帐户表中的行数从之前的25行增加到26行：
- en: '![](img/00236.jpeg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00236.jpeg)'
- en: How it works...
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: CSRF attacks require an authenticated user session to surreptitiously perform
    actions within the application on behalf of the attacker. In this case, an attacker
    rides on ed's session to re-run the registration form, to create an account for
    the attacker. If `ed` had been an admin, this could have allowed the account role
    to be elevated as well.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: CSRF攻击需要一个经过身份验证的用户会话，以便代表攻击者在应用程序中秘密执行操作。在这种情况下，攻击者利用ed的会话重新运行注册表单，为攻击者创建一个帐户。如果`ed`是管理员，这可能会允许提升帐户角色。
