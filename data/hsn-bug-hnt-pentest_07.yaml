- en: Detecting XML External Entities
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测 XML 外部实体
- en: '**XXE** is an abbreviation of **XML External Entity**. As an attack, it takes
    advantage of a flaw in an application''s XML parser configuration to perform a
    number of malicious actions, including exposing the contents of protected files,
    or causing the exponential use of memory, resulting in a DoS attack.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**XXE** 是 **XML 外部实体**（**XML External Entity**）的缩写。作为一种攻击方式，它利用应用程序 XML 解析器配置中的缺陷，执行一系列恶意操作，包括暴露受保护文件的内容，或导致内存的指数级增长，最终引发拒绝服务（DoS）攻击。'
- en: XML, like JSON, comprises a big part of the data transfer that powers the modern
    internet. As a system for encoding documents in both human and machine-readable
    ways, XML is common in tech stacks of a certain age, and persists in older API
    architectures such as **Simple Object Access Protocol** (**SOAP**), even though
    web applications rely more and more on JSON as a common standard. In 2017, OWASP
    named XXE as number four on their list of the top ten web vulnerabilities—it wasn't
    included in the list in the previous survey in 2014.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: XML 与 JSON 一样，是驱动现代互联网数据传输的重要组成部分。作为一种同时支持人类和机器可读方式的文档编码系统，XML 在某些年代的技术栈中广泛应用，并且在一些老旧的
    API 架构中仍然存在，如 **简单对象访问协议**（**SOAP**），尽管现代 Web 应用越来越依赖于 JSON 作为标准格式。2017 年，OWASP
    将 XXE 列为十大 Web 漏洞中的第四位，而在 2014 年的调查中，它并未出现在名单中。
- en: The nature of the attack stems from XML's conceptions of entities, a primitive
    data type that combines a string with a unique alias or reserved word. When the
    XML parser expands the entity, the parser looks for and stores the contents of
    the URI in the final XML document. If the entity is pointing to a sensitive file
    on the web server, then that information is compromised. There are different vectors
    for inputting that XML, including application form inputs. Because the vulnerability
    includes XML code being mistakenly parsed (and executed) after it is submitted
    through a form input, XXE can be classified as a form of code injection.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击的本质源于 XML 的实体概念，这是一种将字符串与唯一别名或保留字组合的原始数据类型。当 XML 解析器展开实体时，它会查找并存储 URI 中的内容，并将其添加到最终的
    XML 文档中。如果该实体指向 Web 服务器上的敏感文件，则该信息将被泄露。输入 XML 的途径有多种，包括应用程序表单输入。由于该漏洞涉及通过表单输入提交后
    XML 代码被错误解析（并执行），因此 XXE 可以被归类为一种代码注入形式。
- en: 'There are a couple of risk factors for XXE, which are allowed in by weakly
    or misconfigured XML parsers: if a parser accepts tainted data within the **Document
    Type Declaration** (**DTD**), and it processes that DTD and resolves external
    entities, the site is at risk. As an example, if you''re using PHP, the language''s
    documentation specifically states that you need to set the `libxml_disable_entity_loader`
    variable to `true` in order to disable the ability to load external entities ([https://secure.php.net/manual/en/function.libxml-disable-entity-loader.php](https://secure.php.net/manual/en/function.libxml-disable-entity-loader.php)).'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: XXE 的一些风险因素来自于 XML 解析器的弱配置或错误配置：如果解析器接受包含有害数据的 **文档类型声明**（**DTD**），并且它处理该 DTD
    并解析外部实体，则该站点会面临风险。例如，如果你使用 PHP，该语言的文档明确说明你需要将 `libxml_disable_entity_loader` 变量设置为
    `true`，以禁用加载外部实体的能力（[https://secure.php.net/manual/en/function.libxml-disable-entity-loader.php](https://secure.php.net/manual/en/function.libxml-disable-entity-loader.php)）。
- en: 'This chapter will cover:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容包括：
- en: Details of how an XML processor can become compromised
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XML 处理器如何可能被攻破的详细信息
- en: How to craft XXE snippets and where to find community-sourced lists of them
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何构造 XXE 代码片段及在哪里找到社区提供的代码列表
- en: Tools to use in detecting XXE
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于检测 XXE 的工具
- en: How to take a XXE vulnerability from discovery, to validation, to inclusion
    in a bug report submission
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将 XXE 漏洞从发现、验证到包含在漏洞报告提交中
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, we'll be using our standard version of Chrome (`66.0.3359.139`),
    along with a new developer environment deployment system, Vagrant, which—coupled
    with VirtualBox—will allow us to bootstrap our deliberately vulnerable XXE app
    (which we're using thanks to [https://github.com/jbarone/xxelab](https://github.com/jbarone/xxelab)).
    VirtualBox is a **Virtual Machine** (**VM**) client, and Vagrant adds a layer
    of dependency and environment management on top of that.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用我们标准版本的 Chrome（`66.0.3359.139`），并搭配新的开发环境部署系统 Vagrant，它与 VirtualBox
    配合使用，将允许我们启动故意存在漏洞的 XXE 应用程序（我们之所以能使用它，得感谢 [https://github.com/jbarone/xxelab](https://github.com/jbarone/xxelab)）。VirtualBox
    是一个**虚拟机**（**VM**）客户端，而 Vagrant 在此基础上添加了一层依赖关系和环境管理。
- en: To install Vagrant and VirtualBox, pick the appropriate client for your system
    from their respective Downloads pages ([https://www.vagrantup.com/downloads.html](https://www.vagrantup.com/downloads.html)
    and [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Vagrant和VirtualBox，从各自的下载页面选择适合你系统的客户端（[https://www.vagrantup.com/downloads.html](https://www.vagrantup.com/downloads.html)
    和 [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)）。
- en: A simple XXE example
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个简单的XXE示例
- en: 'There are a few different types of XXE attack which can attempt **Remote Code
    Execution** (**RCE**) or – as we covered in the introduction – disclose information
    from targeted files. Here''s an example of the second variety, from OWASP''s entry
    for XXE:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: XXE攻击有几种不同类型，它们可以尝试**远程代码执行**（**RCE**）或——正如我们在引言中所讨论的——从目标文件中泄露信息。这里是第二种类型的一个例子，来自OWASP对XXE的介绍：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, you can see the external entity and its attempt—through the location string's
    `file` prefix and the following system path—to access a sensitive file on the
    vulnerable server.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到外部实体及其尝试——通过位置字符串的`file`前缀和随后的系统路径——访问易受攻击的服务器上的敏感文件。
- en: XXE can also be used to conduct DoS attacks through an XML variant of a popular
    logic bomb tactic called a **Billion Laughs**. A DoS attack that occurs via a
    logic bomb—a piece of code that when executed causes the host to max out its resource
    consumption—is a bit different from a DoS attack caused by one or more outside
    agents (if there is more than one outside agent, then it would be a DDoS attack).
    A DoS attack is usually considered easier to mitigate because there's only one
    source for the attack—network administrators don't have to play whack-a-mole with
    multiple sources of malicious traffic. But a DoS attack coming from a single source
    also means that an attacker only needs access to that vulnerable input, as opposed
    to a swarm of machines generating traffic as part of a botnet.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: XXE还可以用来通过一种名为**千亿笑声**的XML变体实施DoS攻击。通过逻辑炸弹（一段代码，当执行时会导致主机的资源消耗达到最大）触发的DoS攻击与通过一个或多个外部代理（如果有多个外部代理，那么将是DDoS攻击）引发的DoS攻击有所不同。DoS攻击通常被认为更容易缓解，因为它只有一个攻击源——网络管理员不需要与多个恶意流量源作斗争。但来自单一来源的DoS攻击也意味着攻击者只需访问该易受攻击的输入，而不是通过一个由恶意机器组成的僵尸网络生成流量。
- en: 'Here''s an example of the a billion laughs XML snippet from Wikipedia''s page
    on the attack:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是来自维基百科页面中关于“千亿笑声”XML片段的一个例子：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can see that there's only one root element, `<lolz>&lol9;</lolz>`. When
    the text of that element, `&lol9;`, is expanded (since it's a defined entity),
    the parser looks and sees the entity `&lol8;` and tries to expand it too, which
    leads it to `&lol7;`, then `&lol6;`, and on and on through the entity list – it's
    turtles and memory usage all the way down.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到只有一个根元素，`<lolz>&lol9;</lolz>`。当该元素的文本`&lol9;`被展开时（因为它是一个已定义的实体），解析器查看并看到实体`&lol8;`并试图展开它，接着是`&lol7;`，然后是`&lol6;`，依此类推，通过实体列表进行扩展——这就像是不断堆叠的海龟，最终导致内存的膨胀。
- en: The result is that after all the entity expansions have been processed, this
    small, less-than-1 KB snippet, will create 10 to the 9th power `lols`, totaling
    over 3 GB of memory usage.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是，在所有实体扩展处理完成后，这个小的、不到1 KB的片段将会生成10的9次方`lols`，总共使用超过3 GB的内存。
- en: Billion Laughs attacks are not unique to XML (you can do a similar attack in
    YAML or any other file format that supports references), but they do clearly illustrate
    the means through which an unguarded XXE vulnerability can wreak havoc.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 千亿笑声攻击不仅仅限于XML（你可以在YAML或任何其他支持引用的文件格式中进行类似的攻击），但它们清楚地展示了一个没有防护的XXE漏洞如何造成破坏。
- en: XML injection vectors
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XML注入向量
- en: XML injection and XML parsing-related vulnerabilities aren't always observable
    from the client-side code – the XML part of the processing chain could be occurring
    within the server formatting your client-side input.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: XML注入和XML解析相关的漏洞并不总是从客户端代码中可以观察到——XML处理链的一部分可能在服务器端处理你的客户端输入时发生。
- en: 'Following an OWASP XML injection example, the client-side form (assuming, for
    argument''s sake, that it''s making a `GET` request) will create an HTTP request
    that looks like this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在OWASP XML注入示例中，客户端表单（假设为了讨论的方便，它正在发起一个`GET`请求）将创建一个看起来像这样的HTTP请求：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, before inserting itself into an XML-document-like-database, the application
    will build an individual XML node:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在插入到类似XML文档的数据库之前，应用程序将构建一个单独的XML节点：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can exploit this behavior to do different kinds of injection, including
    tag-based injection. That''s when you would add a valid XML tag within your input,
    spoofing a valuable property (this assumes that a `<userid>` of 0 represents an
    admin user) by making an HTTP request along these lines:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以利用这种行为进行不同种类的注入攻击，包括基于标签的注入。这时，你会在输入中添加一个有效的 XML 标签，通过伪造一个有价值的属性（假设`<userid>`为
    0 代表管理员用户），并通过类似这样的 HTTP 请求进行操作：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: That HTTP request, when assembled into the XML-like datastore, results in one
    of the redundant `<userid>` tags being filtered out, resulting in a perfectly
    valid record that also escalates James's privileges.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个 HTTP 请求被组装成类似 XML 的数据存储时，结果是其中一个冗余的`<userid>`标签被过滤掉，生成一个完全有效的记录，同时也提升了 James
    的权限。
- en: 'The final result is as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果如下：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: XML injection and XXE – stronger together
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XML 注入与 XXE – 相辅相成
- en: We previously covered the anatomy of an XXE bug and how nested entity expansion
    can lead to exponential resource use. We've also covered how valid XML structures
    can be injected through RESTful APIs so that malicious tags are recreated in the
    XML formatting (we used a fictional case of an XML-like DB, but the analysis holds
    for any server-side XML processing layer).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前讲解了 XXE 漏洞的组成及嵌套实体扩展如何导致资源消耗呈指数增长。我们还讨论了如何通过 RESTful API 注入有效的 XML 结构，以便恶意标签在
    XML 格式化中得以重现（我们使用了类似 XML 数据库的虚构案例，但这种分析适用于任何服务器端的 XML 处理层）。
- en: You can see how these two dynamics complement one another—if you have discovered
    a valid XML injection vector, that gives you the delivery mechanism with which
    to define and execute your XXE validation.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到这两种攻击手段是如何互相补充的——如果你发现了一个有效的 XML 注入向量，那就为你定义和执行 XXE 验证提供了交付机制。
- en: Testing for XXE – where to find it, and how to verify it
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试 XXE – 在哪里找到它，以及如何验证它
- en: 'As we discussed previously, none of the inputs available to you need to state
    that the application accepts XML for a service to be vulnerable to XXE: the XML
    parsing layer of the application could be opaque to you, stitching together data
    that you sent as a `GET` or `POST` request into an XML document.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的那样，任何提供给你的输入项都不需要声明应用程序接受 XML，才可能使服务容易受到 XXE 攻击：应用程序的 XML 解析层对你来说可能是透明的，将你通过
    `GET` 或 `POST` 请求发送的数据拼接成一个 XML 文档。
- en: 'Besides services that use XML as their primary document formatting system under-the-hood,
    there are also many API services that support different data formats by default.
    Even if you''re making a GET request and receiving JSON in return, you can test
    whether or not that API endpoint can format your request as XML by trying the
    XML content header, that is, `Content-Type: application/xml`. Because services
    often have this capacity to switch between different content types that are built-in,
    the owner of the service might not know that it has the ability to format requests
    as XML.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '除了在后台使用 XML 作为主要文档格式的服务外，还有许多 API 服务默认支持不同的数据格式。即使你发出的是 GET 请求并返回 JSON，你也可以通过尝试
    XML 内容头（即 `Content-Type: application/xml`）来测试该 API 端点是否能将请求格式化为 XML。由于服务通常内建有在不同内容类型之间切换的能力，服务的拥有者可能并不知道它能将请求格式化为
    XML。'
- en: XXE – an end-to-end example
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XXE – 一个端到端的示例
- en: 'Let''s set up our XXE lab so that we can see the vulnerability in action. After
    downloading Vagrant, VirtualBox, and cloning the git repository from [https://github.com/jbarone/xxelab](https://github.com/jbarone/xxelab),
    we can start the application by navigating into the `xxelab` directory and running
    `vagrant up`. After downloading the Ubuntu images and other dependencies, your
    app should be up and running on `http://192.168.33.10/`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设置 XXE 实验环境，以便我们能看到该漏洞的实际表现。下载 Vagrant、VirtualBox，并从 [https://github.com/jbarone/xxelab](https://github.com/jbarone/xxelab)
    克隆 Git 仓库后，我们可以进入 `xxelab` 目录并运行 `vagrant up` 启动应用。下载完 Ubuntu 镜像和其他依赖项后，你的应用应该可以在
    `http://192.168.33.10/` 上运行：
- en: '![](assets/05c7cdca-0c14-48cd-9382-1e9c3cb5c7f4.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/05c7cdca-0c14-48cd-9382-1e9c3cb5c7f4.png)'
- en: 'Let''s enter some test values into our submission form, making sure that our
    Burp Suite proxy has its Intercept feature turned on:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在提交表单时输入一些测试值，确保我们的 Burp Suite 代理的拦截功能已开启：
- en: '![](assets/9f4086d6-24e8-496c-b4f0-e24f21d1d4ab.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9f4086d6-24e8-496c-b4f0-e24f21d1d4ab.png)'
- en: 'After trying to submit our form, we can head over to Burp to see what our intercepted
    raw HTTP request looks like:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试提交表单后，我们可以前往 Burp 查看我们拦截的原始 HTTP 请求是什么样的：
- en: '![](assets/cab50b14-5df3-4461-a19b-580ef04b6040.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cab50b14-5df3-4461-a19b-580ef04b6040.png)'
- en: 'Seeing that our submission is being formatted in XML, we can try a basic entity
    expansion test, substituting our `email` form value with a test message by using
    the `&example;` entity:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 看到我们的提交被格式化为XML后，我们可以尝试一个基本的实体扩展测试，使用`&example;`实体将我们的`email`表单值替换为测试信息：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here''s what it looks like when entered into our intercept proxy:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在拦截代理中输入的内容：
- en: '![](assets/c13069b1-9efa-4295-8d02-9b3bdcdc108b.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c13069b1-9efa-4295-8d02-9b3bdcdc108b.png)'
- en: 'Note that this app is designed to mimic the experience of trying to exfiltrate
    data through error messages, so it will always return an error message stating
    that the email in question (with the full email printed) is not available. This
    means that if the XML parser is susceptible to entity expansion, we''ll see success
    printed in the error message:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此应用程序旨在模拟通过错误信息尝试泄露数据的过程，因此它总是返回一个错误消息，声明所述的电子邮件（包含完整的电子邮件地址）不可用。这意味着，如果XML解析器容易受到实体扩展攻击，我们将在错误信息中看到成功的输出：
- en: '![](assets/e4ae1dc5-6f39-49cc-8da8-0ee6f9ca2df9.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e4ae1dc5-6f39-49cc-8da8-0ee6f9ca2df9.png)'
- en: Indeed, success has been registered.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，攻击成功被记录下来了。
- en: For validating an XML bug, this is enough to open a report and begin the submission
    process. Using the entity expansion to replace values is a harmless PoC that,
    nevertheless, points to the possible damage other XXE attacks could accomplish.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于验证XML漏洞来说，这足以打开报告并开始提交过程。使用实体扩展替换值是一个无害的PoC，但它指示了其他XXE攻击可能造成的损害。
- en: 'But, since we''re working locally, let''s do some of that damage. Leveraging
    our knowledge of the vulnerability, we can replace our intercepted values with
    an XXE snippet pulled from OWASP''s Testing for XML Injection ([https://www.owasp.org/index.php/Testing_for_XML_Injection_(OTG-INPVAL-008)](https://www.owasp.org/index.php/Testing_for_XML_Injection_(OTG-INPVAL-008)))
    page:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，由于我们在本地进行操作，让我们做一些实际的破坏。利用我们对漏洞的了解，我们可以将拦截到的值替换为从OWASP的《XML注入测试》（[https://www.owasp.org/index.php/Testing_for_XML_Injection_(OTG-INPVAL-008)](https://www.owasp.org/index.php/Testing_for_XML_Injection_(OTG-INPVAL-008)))页面中获取的XXE片段：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When the server attempts to expand the entity and access the contents of `/dev/random`,
    it can cause the server to crash. That''s because `/dev/random` is a special,
    pseudorandom number generator, that will block the thread if there''s insufficient
    entropy for the random number generation. Here, we''ve entered the snippet into
    another intercepted attempt to create an account:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器尝试扩展实体并访问`/dev/random`的内容时，它可能会导致服务器崩溃。这是因为`/dev/random`是一个特殊的伪随机数生成器，如果生成随机数时的熵不足，它会阻塞线程。在这里，我们将该片段输入到另一个拦截到的创建账户请求中：
- en: '![](assets/57ad7365-959d-4e75-80a9-b695e4c43b4f.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/57ad7365-959d-4e75-80a9-b695e4c43b4f.png)'
- en: After forwarding the request, we see the server hang—and hang. Upon opening
    a new tab, we can no longer get the IP address to resolve. We've successfully
    crashed it!
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 转发请求后，我们看到服务器挂起——并且一直挂起。打开新标签页时，我们再也无法解析IP地址。我们成功地让它崩溃了！
- en: '![](assets/28e4b721-53f0-4f2d-be2a-48de5cd32b93.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/28e4b721-53f0-4f2d-be2a-48de5cd32b93.png)'
- en: Gathering report information
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集报告信息
- en: Let's walk through the information we need to write our report.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来梳理一下写报告所需的信息。
- en: Category
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分类
- en: This is an XXE attack.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是XXE攻击。
- en: Timestamps
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间戳
- en: For our timestamp, we can use an approximate time for when we submitted our
    XXE entity replacement request.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的时间戳，我们可以使用提交XXE实体替换请求时的大致时间。
- en: URL
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: URL
- en: 'The location of the vulnerability is the application index, for example:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞的位置是应用程序索引，例如：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Payload
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 载荷
- en: 'Here, we can enter the XML snippet we used as our PoC for validating the capacity
    for entity expansion:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以输入我们用作验证实体扩展能力的PoC的XML片段：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Methodology
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方法论
- en: To prove that the service in question is susceptible to an XXE attack, we used
    Burp Suite to intercept and modify an HTTP `POST` request, replacing the XML document
    generated by our form submission with our payload.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了证明该服务容易受到XXE攻击，我们使用Burp Suite拦截并修改了一个HTTP `POST`请求，将我们表单提交生成的XML文档替换为我们的攻击载荷。
- en: Instructions to reproduce
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重现步骤
- en: Our instructions to reproduce are to navigate to the form and use a proxy tool
    (in our case, Burp Proxy) to replace the form data with our payload.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的重现步骤是导航到表单，并使用代理工具（在我们的例子中是Burp Proxy）将表单数据替换为我们的攻击载荷。
- en: Attack scenario
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 攻击场景
- en: We've already seen how an entity expansion pointing to `/dev/random` can cause
    a server to crash. Using an XXE attack, we can also disclose the contents of sensitive
    server files like `/etc/password` and, in some cases, perform RCE.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，指向 `/dev/random` 的实体扩展可以导致服务器崩溃。通过 XXE 攻击，我们还可以泄露像 `/etc/password` 这样的敏感服务器文件的内容，并且在某些情况下，执行远程代码执行（RCE）。
- en: Final report
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最终报告
- en: 'Let''s use this information to format our submission:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们利用这些信息来格式化我们的提交：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Summary
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered XXE and touched on the nature of XML parsing attacks,
    discussed XXE within the historical context of the Billion Laughs vulnerability,
    reviewed a specific weakness that makes many XML parsers vulnerable to XXE, and
    end-gamed some of the possible attack scenarios associated with an XXE bug, in
    addition to taking an XXE vulnerability all the way from discovery to report submission.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们介绍了 XXE，并涉及了 XML 解析攻击的性质，讨论了 XXE 在“亿万笑话”漏洞的历史背景下的情况，回顾了使许多 XML 解析器容易受到
    XXE 攻击的特定弱点，并讨论了与 XXE 漏洞相关的一些可能攻击场景，此外还将 XXE 漏洞从发现到报告提交的全过程进行了分析。
- en: In the next chapter, we will discuss access control and security through obscurity.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将讨论访问控制和通过模糊性增强安全性。
- en: Questions
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What makes an XML parser susceptible to XXE? What is an example misconfiguration?
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么导致 XML 解析器容易受到 XXE 攻击？什么是一个配置错误的示例？
- en: How do you use Burp to test for XXE?
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用 Burp 测试 XXE 漏洞？
- en: What are some impacts of an XXE vulnerability? What are some common attack scenarios
    involving the bug?
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: XXE 漏洞有哪些影响？涉及该漏洞的一些常见攻击场景是什么？
- en: What is `/dev/random`?
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 `/dev/random`？
- en: What's a non-impactful way you can test for the presence of an XXE vulnerability?
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过什么方式测试 XXE 漏洞的存在，而不会造成影响？
- en: What's the Billion Laughs attack?
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是亿万笑话攻击？
- en: How can some services (especially API endpoints) be vulnerable to XXE when they
    use JSON for data exchanges?
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当某些服务（特别是 API 端点）使用 JSON 进行数据交换时，如何可能受到 XXE 攻击？
- en: Further reading
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can find out more about some of the topics we have discussed in this chapter
    at:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下链接中找到我们在本章中讨论的一些主题的更多信息：
- en: '**Billion Laughs Attack**: [https://en.wikipedia.org/wiki/Billion_laughs_attack](https://en.wikipedia.org/wiki/Billion_laughs_attack)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**亿万笑话攻击**: [https://en.wikipedia.org/wiki/Billion_laughs_attack](https://en.wikipedia.org/wiki/Billion_laughs_attack)'
- en: '**Hunting XXE For Fun and Profit**: [https://www.bugcrowd.com/advice-from-a-bug-hunter-xxe/](https://www.bugcrowd.com/advice-from-a-bug-hunter-xxe/)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XXE 狩猎乐趣与利润**: [https://www.bugcrowd.com/advice-from-a-bug-hunter-xxe/](https://www.bugcrowd.com/advice-from-a-bug-hunter-xxe/)'
