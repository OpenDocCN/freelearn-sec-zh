- en: Chapter 8. Performance Tuning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章 性能调优
- en: 'In this chapter, we will cover the following troubleshooting topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下故障排除主题：
- en: Optimizing performance using `ping`
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`ping`优化性能
- en: Optimizing performance using `iperf`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`iperf`优化性能
- en: Comparing IPv4 and IPv6 speed
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较IPv4和IPv6速度
- en: OpenSSL cipher speed
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenSSL密码算法速度
- en: OpenVPN in Gigabit networks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenVPN在千兆网络中的应用
- en: Compression tests
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 压缩测试
- en: Traffic shaping
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流量整形
- en: Tuning UDP-based connections
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整基于UDP的连接
- en: Tuning TCP-based connections
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整基于TCP的连接
- en: Analyzing performance using `tcpdump`
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`tcpdump`分析性能
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: This chapter focuses on getting the best performance out of an OpenVPN setup.
    There are several parameters that can be tuned on both the server side and the
    client side for getting the highest throughput and the lowest latency. However,
    the optimal settings of these parameters largely depend on the network layout.
    The recipes in this chapter will therefore provide guidelines on how to tune these
    parameters and how to measure the increase or decrease in performance. These guidelines
    can then be applied to other network layouts to find the optimal performance.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍如何从OpenVPN设置中获取最佳性能。有几个参数可以在服务器端和客户端进行调整，以获得最高的吞吐量和最低的延迟。然而，这些参数的最佳设置在很大程度上取决于网络布局。因此，本章中的配方将提供如何调整这些参数以及如何衡量性能增减的指南。这些指南随后可以应用于其他网络布局，以找到最佳性能。
- en: Optimizing performance using ping
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ping优化性能
- en: In this recipe, we will use the low-level `ping` command to determine the optimal **Maximum
    Transfer Unit** (**MTU**) size for our OpenVPN setup. Finding the right MTU size
    can have a tremendous impact on performance, especially, when using satellite
    links, or even some cable/ADSL providers. Especially, broadband connections using
    the **PPPoE** (**PPP over Ethernet**) protocol often have a non-standard MTU size.
    In a regular LAN setup, it is hardly ever required to optimize the MTU size, as
    OpenVPN's' default settings are close to optimal.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用低级的`ping`命令来确定OpenVPN设置的最佳**最大传输单元**(**MTU**)大小。找到合适的MTU大小对性能有巨大影响，尤其是在使用卫星连接，或某些有线/ADSL提供商时。尤其是，使用**PPPoE**(**以太网点对点协议**)协议的宽带连接通常具有非标准的MTU大小。在常规的局域网设置中，几乎不需要优化MTU大小，因为OpenVPN的默认设置接近最佳。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the client and the server computers are connected over a network.
    For this recipe, the server computer was running CentOS 6 Linux. The client was
    running Fedora 22 Linux, but instructions for a Windows client are given as well.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 确保客户端和服务器计算机通过网络连接。在本节中，服务器计算机运行的是CentOS 6 Linux，客户端运行的是Fedora 22 Linux，但也提供了Windows客户端的相关说明。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We first verify that we can reach the server from the client:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先验证客户端是否能连接到服务器：
- en: '[PRE0]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will send two ICMP ping packets to the server and two replies should be
    returned. If not, then a firewall or `iptables` rule is blocking ICMP traffic.
    Ensure that the server can be reached using `ping` before proceeding.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将向服务器发送两个ICMP ping数据包，应该返回两个回复。如果没有返回，那么防火墙或`iptables`规则可能在阻止ICMP流量。在继续之前，确保服务器可以使用`ping`命令访问。
- en: Next, try sending a large ping packet from the client to the server, with the `Don't
    Fragment` (**DF**) bit set. Strangely enough, on Linux, this is done using the
    parameter `-M do`.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，尝试从客户端向服务器发送一个大的ping数据包，并设置`Don't Fragment`(**DF**)位。奇怪的是，在Linux上，这是通过参数`-M
    do`来完成的。
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Normally, this command is not successful:'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常，这个命令不会成功：
- en: '[PRE2]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The maximum size of a packet that can be sent from this interface is 1500 bytes.
    From this, the Ethernet headers (normally 28 bytes) need to be subtracted, which
    means that the maximum size of an ICMP packet is 1472 bytes:'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从这个接口发送的数据包的最大大小为1500字节。从中需要减去以太网头部（通常是28字节），这意味着ICMP数据包的最大大小为1472字节：
- en: '[PRE3]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For Windows clients, the syntax of the `ping` command is slightly different:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于Windows客户端，`ping`命令的语法略有不同：
- en: '[PRE4]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以及：
- en: '[PRE5]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The payload size of 1472 bytes is actually the regular size for an Ethernet-based
    network, even though this recipe was performed over a cable connection.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1472字节的有效载荷大小实际上是基于以太网网络的常规大小，尽管本节是在有线连接上进行的。
- en: A good initial value for OpenVPN's' `tun-mtu` setting is the maximum payload
    size plus the 28 bytes that were subtracted earlier. However, it does not mean
    this is the optimal value, as we will see in the later recipes.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于OpenVPN的`tun-mtu`设置，一个好的初始值是最大有效载荷大小加上之前减去的28字节。然而，这并不意味着这是最优值，正如我们在后面的配方中所看到的那样。
- en: How it works...
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The ICMP protocol which the `ping` command uses has the option to set a flag `Don't
    Fragment` (DF). With this bit set, an ICMP packet may not be broken up into separate
    pieces before it reaches its destination. If the packet were needed to be broken
    up by a router before it could be transmitted, it is dropped and an ICMP error
    code is returned. This provides a very easy method to determine the largest packet
    that can be transmitted to the server and vice versa. In particular, in high-latency
    networks, for example, when a satellite link is used, it is very important to
    limit the number of packets and to maximize the size of each packet.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`ping` 命令使用的 ICMP 协议有一个选项，用于设置标志 `Don''t Fragment`（DF）。启用该标志后，ICMP 数据包在到达目的地之前不能被拆分成多个片段。如果路由器需要将数据包拆分才能传输，它将被丢弃，并返回
    ICMP 错误代码。这提供了一种非常简单的方法来确定可以传输到服务器的最大数据包大小，反之亦然。特别是在高延迟网络中，例如使用卫星链接时，限制数据包数量并最大化每个数据包的大小非常重要。'
- en: By smartly using the `ping` command, the maximum packet size can be determined.
    This size can then be used to further optimize the OpenVPN performance.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过巧妙地使用 `ping` 命令，可以确定最大数据包大小。然后，可以利用这个大小进一步优化 OpenVPN 的性能。
- en: There's more...
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: In some network setups, ICMP traffic is filtered, rendering this recipe useless.
    If it is possible to reach the OpenVPN server, then the tunnel can also be used
    to find the maximum payload size.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些网络配置中，ICMP 流量会被过滤，从而使此方法失效。如果能够访问 OpenVPN 服务器，那么也可以通过隧道来找出最大负载大小。
- en: 'Start the OpenVPN server with the extra flags:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 OpenVPN 服务器并添加额外的标志：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Do the same for the OpenVPN client. Make sure compression is turned off (or
    simply not specified) and that the `fragment` option is not used. This will start
    a clear-text tunnel over which we can send ICMP packets of various sizes.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对 OpenVPN 客户端执行相同操作。确保禁用压缩（或简单地不指定）并且没有使用 `fragment` 选项。这将启动一个明文隧道，我们可以通过该隧道发送各种大小的
    ICMP 数据包。
- en: 'Ping the remote end''s VPN IP address, for example:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Ping 远程端的 VPN IP 地址，例如：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When the ICMP packet becomes too large, the traffic will be dropped by an intermittent
    router. Lower the ICMP packet size until the ping returns successfully. From that
    value, the MTU size can be derived.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当 ICMP 数据包变得太大时，流量将被一个间歇性的路由器丢弃。降低 ICMP 数据包的大小，直到 ping 命令成功返回。从这个值，可以推导出 MTU
    大小。
- en: See also
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Tuning UDP-based connections* recipe, which will explain in more detail
    how to tune the performance of UDP-based setups
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*调整基于 UDP 的连接* 配方，详细解释了如何调整基于 UDP 的配置性能'
- en: The *Tuning TCP-based connections* recipe, which goes deeper into the details
    of tuning TCP-based setups and also explains some of the intricacies of the MTU
    setting of the network adapter
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*调整基于 TCP 的连接* 配方，深入讲解了 TCP 基于连接的调优细节，并解释了网络适配器的 MTU 设置的一些复杂性'
- en: Optimizing performance using iperf
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 iperf 优化性能
- en: This recipe is not really about OpenVPN but more about how to use the network
    performance measurement tool `iperf` in an OpenVPN setup. The `iperf` utility
    can be downloaded from [http://sourceforge.net/projects/iperf/](http://sourceforge.net/projects/iperf/)
    for Linux, Windows, and MacOS.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 本方法并不真正关于 OpenVPN，而是更多地讲解如何在 OpenVPN 配置中使用网络性能测量工具 `iperf`。`iperf` 工具可以从 [http://sourceforge.net/projects/iperf/](http://sourceforge.net/projects/iperf/)
    下载，支持 Linux、Windows 和 macOS。
- en: In this recipe, we will run `iperf` outside of OpenVPN and over the VPN tunnel
    itself, after which the differences in performance will be explained.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在本方法中，我们将在 OpenVPN 外部以及通过 VPN 隧道运行 `iperf`，然后解释性能差异。
- en: Getting ready
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We use the following network layout:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下网络布局：
- en: '![Getting ready](img/image00394.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00394.jpeg)'
- en: Set up the client and server certificates using the *Setting up the public and
    private keys* recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks*. For this recipe, the server
    computer was running CentOS 6 Linux and OpenVPN 2.3.11\. The client was running
    Fedora 22 Linux and OpenVPN 2.3.11\. Keep the configuration file `basic-udp-server.conf`
    from the *Server-side routing* recipe from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*,
    as well as the client configuration file `basic-udp-client.conf`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[第2章](part0025.xhtml#aid-NQU21 "第2章. 客户端-服务器 IP 仅网络")中的*设置公共和私有密钥*食谱，配置客户端和服务器证书。对于这个食谱，服务器使用的是
    CentOS 6 Linux 和 OpenVPN 2.3.11，客户端使用的是 Fedora 22 Linux 和 OpenVPN 2.3.11。保留来自*服务器端路由*食谱的配置文件`basic-udp-server.conf`，以及客户端配置文件`basic-udp-client.conf`，这些都来自[第2章](part0025.xhtml#aid-NQU21
    "第2章. 客户端-服务器 IP 仅网络")，*客户端-服务器 IP 仅网络*。
- en: How to do it...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Start the server:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE8]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, start the client:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，启动客户端：
- en: '[PRE9]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, we start `iperf` on the server:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们在服务器上启动 `iperf`：
- en: '[PRE10]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'First, we measure the performance outside the tunnel:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们测量隧道外的性能：
- en: '[PRE11]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This actually measures the performance of data being sent to the server. The
    cable network used in this recipe has a theoretical upload limit of 4 Megabits
    per second (Mbps), which we are achieving in this test.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这实际上是测量发送到服务器的数据性能。本食谱中使用的有线网络的理论上传速限制为每秒 4 兆位（Mbps），我们在这次测试中达到了该速率。
- en: 'Next, we measure the performance inside the tunnel:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们测量隧道内的性能：
- en: '[PRE12]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: With this network setup, there is a small performance difference between traffic
    sent outside of the tunnel and traffic sent via the tunnel.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种网络设置下，隧道外的流量和通过隧道发送的流量之间存在小幅性能差异。
- en: 'A second test is done over a 802.11n wireless network:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 802.11n 无线网络上进行第二次测试：
- en: '[PRE13]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Versus:'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对比：
- en: '[PRE14]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, there is a noticeable drop in performance, suggesting that the OpenVPN
    is not configured optimally. There was a lot of noise on this wireless network,
    which makes it difficult to optimize.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，可以明显看到性能下降，表明 OpenVPN 配置并不理想。这个无线网络上噪声较多，导致优化变得困难。
- en: How it works...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `iperf` tool is very straightforward: it sets up a TCP connection (or UDP,
    if desired) and measures how fast it can send or receive data over this connection.
    Normally, traffic is tested in only one direction, although a dual test can be
    triggered using the `-r` flag.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`iperf` 工具非常直观：它建立一个 TCP 连接（或者 UDP，如果需要）并测量它在该连接上发送或接收数据的速度。通常，流量只测试一个方向，虽然也可以使用
    `-r` 标志触发双向测试。'
- en: There's more...
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Tuning network performance depends heavily on both the network latency and the
    available bandwidth, as is outlined in more detail here.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 网络性能的调优很大程度上依赖于网络延迟和可用带宽，详情请参考这里的内容。
- en: Client versus server iperf results
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 客户端与服务器 `iperf` 结果
- en: Both the client and the server `iperf` processes report the network throughput
    after a `iperf -c` session has ended. Practice shows that the numbers reported
    by the server used in this recipe were more accurate than the numbers reported
    by the client. On the cable network used when writing this recipe, the maximum
    upload speed is about 4 Mbps. The client sometimes reported speeds larger than
    4.4 Mbps, whereas the server reported a more accurate 4.1 Mbps.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端和服务器的 `iperf` 进程报告在 `iperf -c` 会话结束后网络吞吐量的结果。实践表明，本食谱中使用的服务器报告的数字比客户端报告的数字更为准确。在编写此食谱时使用的有线网络，最大上传速度约为
    4 Mbps。客户端有时会报告超过 4.4 Mbps 的速度，而服务器则报告更准确的 4.1 Mbps。
- en: Network latency
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网络延迟
- en: One of the main reasons for the lack of performance drop over the cable network
    versus the performance drop over the wireless network is due to network latency.
    On the cable network, the latency was very stable at about 11 ms. On the wireless
    network, the latency varied between 2 ms and 90 ms. Especially, this variation
    in latency can skew the  `iperf` performance measurements, making it very hard
    to optimize the OpenVPN parameters.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有线网络和无线网络在性能下降方面的主要差异之一，源于网络延迟。在有线网络中，延迟非常稳定，约为 11 毫秒。而在无线网络中，延迟在 2 毫秒到 90 毫秒之间波动。尤其是，延迟的这种波动会影响
    `iperf` 性能测试结果，使得优化 OpenVPN 参数变得非常困难。
- en: Gigabit networks
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 千兆网络
- en: Performance tests on Gigabit networks show that the VPN itself is becoming the
    bottleneck. A normal TCP connection would show a transfer rate of 900 Mbps, whereas
    a TCP connection via an untuned OpenVPN tunnel would not perform faster than about
    320 Mbps. We will come back to this later in this chapter.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 千兆网络上的性能测试显示，VPN本身正在成为瓶颈。正常的TCP连接将显示900 Mbps的传输速率，而通过未调优的OpenVPN隧道的TCP连接最多也不会超过320
    Mbps。我们将在本章后面回来详细讨论这个问题。
- en: See also
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The recipe *OpenVPN in Gigabit networks*, which will explain in more detail
    how to tune OpenVPN for better performance over high-speed networks
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《在千兆网络中使用OpenVPN》，将详细解释如何调优OpenVPN以在高速网络上提升性能的方法。
- en: Comparing IPv4 and IPv6 speed
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较IPv4和IPv6的速度
- en: This recipe is a continuation of the previous recipe, but here we will focus
    on the performance difference between tunneling Pv4 traffic and IPv6 traffic.
    In this recipe, we will run `iperf` over the VPN tunnel using IPv4 addresses and
    IPv6 addresses inside the tunnel, after which the differences in performance will
    be explained.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方案是前一个方案的延续，但我们将集中讨论IPv4流量和IPv6流量之间的性能差异。在这个方案中，我们将在VPN隧道中使用IPv4地址和IPv6地址运行`iperf`，之后将解释性能差异。
- en: Getting ready
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We use the following network layout:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下网络布局：
- en: '![Getting ready](img/image00395.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00395.jpeg)'
- en: Set up the client and server certificates using the *Setting up the public and
    private keys* recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks*. For this recipe, the server
    computer was running CentOS 6 Linux and OpenVPN 2.3.11\. The client was running
    Fedora 22 Linux and OpenVPN 2.3.11\. Keep the configuration file `example-2-4-server.conf`
    from the *Adding IPv6 support* recipe from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*,
    as well as the client configuration file `basic-udp-client.conf`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用《设置公共和私有密钥》一章的*设置客户端和服务器证书*方案来设置客户端和服务器证书，*客户端-服务器仅IP网络*。对于本方案，服务器计算机运行的是CentOS
    6 Linux和OpenVPN 2.3.11。客户端运行的是Fedora 22 Linux和OpenVPN 2.3.11。保留来自《添加IPv6支持》一章的配置文件`example-2-4-server.conf`，*客户端-服务器仅IP网络*，以及客户端配置文件`basic-udp-client.conf`。
- en: How to do it...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Start the server:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE15]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, start the client:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，启动客户端：
- en: '[PRE16]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, we start `iperf` on the server:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们在服务器上启动`iperf`：
- en: '[PRE17]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'First, we measure the performance when tunneling IPv4 traffic:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们测量通过IPv4流量进行隧道时的性能：
- en: '[PRE18]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, we measure the performance using IPv6 packets:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们测量使用IPv6数据包时的性能：
- en: '[PRE19]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This shows a performance difference of roughly 5%. This difference is measured
    consistently over all types of networks.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了大约5%的性能差异。这种差异在所有类型的网络上都能稳定测量到。
- en: How it works...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: An IPv6 address is longer than an IPv4 address. The source and destination addresses
    for all packets are stored inside the encrypted packets that go over the OpenVPN
    tunnel. Thus, the larger the addressing scheme used, the less bytes are left for
    the actual "payload". An IPv6 packet can actually carry 20 bytes less "payload"
    than an IPv4 packet. These 20 bytes account for the 5% performance difference.
    There is very little that can be done about this.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: IPv6地址比IPv4地址更长。所有数据包的源和目的地地址都存储在经过OpenVPN隧道的加密数据包中。因此，使用较大的寻址方案时，实际的“有效负载”所剩下的字节数就会减少。IPv6数据包实际上可以比IPv4数据包携带少20字节的“有效负载”。这20字节占了5%的性能差异。对此几乎无能为力。
- en: There's more...
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Tuning network performance depends heavily on the network characteristics, as
    well as the tuning tools used, as is outlined in more detail here.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 调整网络性能取决于网络特性，以及所使用的调整工具，这里将详细概述。
- en: Client versus server iperf results
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 客户端与服务器iperf结果
- en: Both the client and the server `iperf` processes report the network throughput
    after an `iperf -c` session has ended. Practice shows that the numbers reported
    by the server used in this recipe were more accurate than the numbers reported
    by the client. Also, more accurate results are achieved by running `iperf` with
    a fixed data size instead of the default fixed time interval of 10 seconds. We
    specify a fixed block size (1 Megabyte) and a fixed total size (8 Megabyte) using `iperf
    -l 1M -n 8M -c <IP-address>`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端和服务器的`iperf`进程在`iperf -c`会话结束后报告网络吞吐量。实践表明，本食谱中使用的服务器报告的数字比客户端报告的数字更准确。此外，通过使用固定数据大小而不是默认的10秒固定时间间隔来运行`iperf`，可以获得更准确的结果。我们通过`iperf
    -l 1M -n 8M -c <IP地址>`指定了固定的块大小（1MB）和固定的总大小（8MB）。
- en: This increases accuracy and improves the consistency of the numbers reported
    on the client and server side.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这增加了准确性并改善了客户端和服务器端报告数字的一致性。
- en: OpenSSL cipher speed
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenSSL加密算法速度
- en: OpenVPN uses OpenSSL to perform all cryptographic operations. This means that
    the performance of an OpenVPN client or server depends on how fast the incoming
    traffic can be decrypted and how fast the outgoing traffic can be encrypted. For
    a client with a single connection to the OpenVPN server, this is almost never
    an issue, but with an OpenVPN server with hundreds of clients, the cryptographic
    performance becomes very important. Also, when running OpenVPN over a high-speed
    network link (Gigabit or higher), the cryptographic performance also plays an
    important role.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVPN使用OpenSSL执行所有的加密操作。这意味着，OpenVPN客户端或服务器的性能取决于接收流量的解密速度以及发送流量的加密速度。对于一个与OpenVPN服务器连接的单个客户端，这通常不是问题，但当OpenVPN服务器同时连接数百个客户端时，加密性能变得非常重要。此外，在高速度网络链路（千兆位或更高）上运行OpenVPN时，加密性能也发挥着重要作用。
- en: In this recipe, we will show how to measure the performance of the OpenSSL cryptographic
    routines and how this measurement can be used to improve the performance of an
    OpenVPN server.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将展示如何测量OpenSSL加密例程的性能，以及如何使用这些测量结果来提高OpenVPN服务器的性能。
- en: Getting ready
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'This recipe is performed on a variety of computers:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱在多种计算机上进行：
- en: An old laptop with an Intel Core2 Duo T9300 processor running at 2.5 GHz, running
    Fedora Linux 22 64bit
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台老旧的笔记本电脑，配备2.5 GHz的Intel Core2 Duo T9300处理器，运行Fedora Linux 22 64位
- en: An older server with an Intel Xeon X5660 processor running at 2.8 GHz and with
    support for the AESNI instructions, running CentOS 6 64bit
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台较旧的服务器，配备2.8 GHz的Intel Xeon X5660处理器，并支持AESNI指令，运行CentOS 6 64位
- en: A high-end server with an Intel Xeon E5-2697A v4 processor running at 2.6 GHz
    and with support for the AESNI instructions, running CentOS 6 64bit
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台高端服务器，配备2.6 GHz的Intel Xeon E5-2697A v4处理器，并支持AESNI指令，运行CentOS 6 64位
- en: The recipe can easily be performed on MacOS as well. Each computer had OpenVPN
    2.3 installed, with the accompanying OpenSSL libraries.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱也可以轻松在MacOS上执行。每台计算机都安装了OpenVPN 2.3及其附带的OpenSSL库。
- en: How to do it...
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'On each system, the following OpenSSL commands are run:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个系统上，运行以下OpenSSL命令：
- en: '[PRE20]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The first command tests the speed of the OpenVPN default BlowFish cryptographic
    cipher. The second and third test the performance of the 128 and 256-bit AES ciphers,
    which are very commonly used to secure websites. All commands were run twice on
    the new high-end server: once with support for the AES-NI instruction set turned
    on and once with AES-NI support off using the `$ OPENSSL_ia32=0 openssl speed
    -evp <cipher>`.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令测试OpenVPN默认的BlowFish加密算法的速度。第二个和第三个命令测试128位和256位AES算法的性能，这些算法通常用于保护网站安全。所有命令在新高端服务器上运行了两次：一次启用了AES-NI指令集，另一次则关闭了AES-NI支持，使用命令`$
    OPENSSL_ia32=0 openssl speed -evp <cipher>`。
- en: The results are displayed in the following table. All numbers in the tables
    are the bytes per second processed when encrypting a block of data. The size of
    the block of data is listed in the columns.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示在下表中。表中的所有数字都是在加密一个数据块时每秒处理的字节数。数据块的大小列在表格的列中。
- en: 'For the `BlowFish` cipher, the following results were recorded:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`BlowFish`加密算法，记录了以下结果：
- en: '| **Type** | **256 bytes** | **1024 bytes** | **8192 bytes** |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| **类型** | **256字节** | **1024字节** | **8192字节** |'
- en: '| Laptop | 95851.54k | 95426.22k | 95862.84k |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| 笔记本电脑 | 95851.54k | 95426.22k | 95862.84k |'
- en: '| Old Server | 111466.67k | 111849.47k | 112162.13k |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| 旧服务器 | 111466.67k | 111849.47k | 112162.13k |'
- en: '| New Server | 151329.96k | 152054.10k | 152428.54k |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| 新服务器 | 151329.96k | 152054.10k | 152428.54k |'
- en: '| New Server, no AES-NI | 151128.49k | 151951.02k | 152048.98k |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| 新服务器，无 AES-NI | 151128.49k | 151951.02k | 152048.98k |'
- en: 'For the `AES128` cipher, the following results were recorded:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `AES128` 加密算法，记录了以下结果：
- en: '| **Type** | **256 bytes** | **1024 bytes** | **8192 bytes** |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| **类型** | **256 字节** | **1024 字节** | **8192 字节** |'
- en: '| Laptop | 85588.05k | 179870.91k | 183104.85k |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| 笔记本电脑 | 85588.05k | 179870.91k | 183104.85k |'
- en: '| Old Server | 758884.44k | 762378.58k | 755960.49k |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| 旧服务器 | 758884.44k | 762378.58k | 755960.49k |'
- en: '| New Server | 802229.85k | 806787.75k | 807682.05k |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| 新服务器 | 802229.85k | 806787.75k | 807682.05k |'
- en: '| New Server, no AES-NI | 160414.98k | 361608.53k | 368836.61k |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| 新服务器，无 AES-NI | 160414.98k | 361608.53k | 368836.61k |'
- en: 'And for `AES256`:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `AES256`：
- en: '| **Type** | **256 bytes** | **1024 bytes** | **8192 bytes** |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| **类型** | **256 字节** | **1024 字节** | **8192 字节** |'
- en: '| Laptop | 60698.20k | 130553.15k | 132085.73k |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| 笔记本电脑 | 60698.20k | 130553.15k | 132085.73k |'
- en: '| Old Server | 560398.93k | 562632.92k | 564687.49k |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| 旧服务器 | 560398.93k | 562632.92k | 564687.49k |'
- en: '| New Server | 577053.35k | 578981.21k | 579532.12k |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| 新服务器 | 577053.35k | 578981.21k | 579532.12k |'
- en: '| New Server, no AES-NI | 114444.29k | 266473.47k | 270030.17k |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| 新服务器，无 AES-NI | 114444.29k | 266473.47k | 270030.17k |'
- en: How it works...
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The output of the `openssl speed` command shows that the encryption and decryption
    performance is dependent on both the encryption key and the hardware used. Most
    OpenVPN packets are about 1500 bytes, so the column 1024 bytes is the most interesting
    column to look at.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`openssl speed` 命令的输出显示，加密和解密性能取决于加密密钥和使用的硬件。大多数 OpenVPN 数据包约为 1500 字节，因此 1024
    字节这一列是最值得关注的列。'
- en: 'The `BlowFish` cipher results are quite interesting if you take the processor
    speed into account: if you divide the `BlowFish` performance by the processor
    clock speed the numbers are very similar. This means that the `BlowFish` performance
    is bound purely by the processor clock speed. An older type processor running
    at a higher clock speed might actually outperform a newer processor with a slightly
    lower clock speed.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`BlowFish` 加密算法的结果非常有趣，如果考虑到处理器的速度：如果将 `BlowFish` 的性能除以处理器时钟速度，结果非常相似。这意味着
    `BlowFish` 的性能完全受限于处理器的时钟速度。运行在更高时钟速度的旧处理器可能实际上会超过时钟速度略低的新版处理器。'
- en: For the `AES128` and `AES256` ciphers, this is no longer true. Here the modern
    i5/i7 and Xeon architectures are much faster than the older Pentium 4 and Athlon
    architectures. With the AES-NI extensions, the performance jumps by a factor of
    4\. If an OpenVPN server is set up that must support many clients, then this cryptographic
    cipher is an excellent choice, provided that the server CPU supports these extensions.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `AES128` 和 `AES256` 加密算法，这个情况不再成立。现代的 i5/i7 和 Xeon 架构比旧的 Pentium 4 和 Athlon
    架构要快得多。启用 AES-NI 扩展后，性能提升了 4 倍。如果设置一个必须支持大量客户端的 OpenVPN 服务器，那么这个加密算法是一个非常好的选择，前提是服务器的
    CPU 支持这些扩展。
- en: This recipe also provides a simple test of whether the AES-NI instructions are
    available and whether they are actually picked up by the underlying OpenSSL library.
    If the speed results between `openssl` and `OPENSSL_ia32cap=0 openssl` do not
    differ, then the AES-NI instructions are not being used for encryption or decryption.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方还提供了一个简单的测试，检查 AES-NI 指令是否可用，并且底层的 OpenSSL 库是否实际调用了这些指令。如果 `openssl` 和 `OPENSSL_ia32cap=0
    openssl` 之间的速度结果没有差异，则说明 AES-NI 指令没有用于加密或解密。
- en: There's more...
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The choice of the cryptographic cipher on the performance of OpenVPN is minimal
    for a single client. Measurements done for this recipe indicate that the client
    CPU has a load of less than 8% when downloading a file at the highest speed over
    the VPN tunnel on a modern system. However, on the older desktop, the choice of
    cryptographic cipher does become important: upload speed drops from 760 kbps to
    720 kbps when the `BlowFish` cipher changes to the `AES256` cipher. In particular,
    when older hardware or certain home router equipment is used, this can quickly
    become a bottleneck. Most home wireless routers capable of running OpenVPN, for
    example, the wireless routers that support the DD-WRT or OpenWRT distributions,
    have a processor speed of about 250 MHz. This processor speed can quickly become
    the bottleneck if this router is also used as an OpenVPN server, especially when
    multiple clients connect simultaneously.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 加密算法的选择对 OpenVPN 性能的影响在单个客户端的情况下是最小的。根据本食谱的测量，当在现代系统上通过 VPN 隧道以最高速度下载文件时，客户端
    CPU 的负载低于 8%。然而，在较旧的桌面电脑上，选择加密算法变得很重要：当 `BlowFish` 算法切换为 `AES256` 算法时，上传速度从 760
    kbps 降至 720 kbps。特别是在使用较旧的硬件或某些家庭路由器设备时，这可能很快成为瓶颈。例如，大多数能够运行 OpenVPN 的家庭无线路由器（如支持
    DD-WRT 或 OpenWRT 的无线路由器）都拥有约 250 MHz 的处理器速度。如果此路由器还用作 OpenVPN 服务器，尤其是在多个客户端同时连接时，处理器速度很快就会成为瓶颈。
- en: See also
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Cipher mismatches* recipe from [Chapter 6](part0071.xhtml#aid-23MNU1 "Chapter 6. Troubleshooting
    OpenVPN - Configurations"), *Troubleshooting OpenVPN - Configurations*, which
    explains in more detail how to troubleshoot cipher mismatches in the client and
    server configuration files.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 6 章](part0071.xhtml#aid-23MNU1 "第 6 章 排除 OpenVPN 配置问题")中的 *加密不匹配* 配方，详细说明了如何排查客户端和服务器配置文件中的加密算法不匹配问题。'
- en: OpenVPN in Gigabit networks
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 千兆网络中的 OpenVPN
- en: With the advent of high-speed networks, the need for a high-speed VPN has also
    increased. OpenVPN is not particularly built for high speeds, but with modern
    hardware and the right encryption ciphers it is possible to achieve near-gigabit
    speeds with OpenVPN 2.4\. This recipe will show you how to achieve these speeds.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 随着高速网络的到来，对高速 VPN 的需求也增加了。OpenVPN 并非专门为高速设计，但通过现代硬件和正确的加密算法，使用 OpenVPN 2.4 可以达到接近千兆的速度。本食谱将展示如何实现这些速度。
- en: Getting ready
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We use the following network layout:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下网络布局：
- en: '![Getting ready](img/image00396.jpeg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00396.jpeg)'
- en: The client used in this recipe was a laptop with a Core i7-4810 processor with
    a maximum Turboboost speed of 3.8 GHz. The server was a server with an Xeon E5-2697A
    v4 processor with a maximum Turboboost speed of 3.6 GHz. Connect the client and
    the server both to a Gigabit Ethernet switch. Set up the client and server certificates
    using the *Setting up the public and private keys* recipe from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*.
    For this recipe, the server computer was running CentOS 6 Linux and OpenVPN 2.4.0.
    The client was running Fedora 22 Linux and OpenVPN 2.4.0\. Keep the configuration
    file `basic-udp-server.conf` from the *Server-side routing* recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*, as well as the client configuration file `basic-udp-client.conf`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱中使用的客户端是一台搭载 Core i7-4810 处理器的笔记本，最高 TurboBoost 速度为 3.8 GHz。服务器是一台搭载 Xeon
    E5-2697A v4 处理器的服务器，最高 TurboBoost 速度为 3.6 GHz。将客户端和服务器都连接到千兆以太网交换机。使用[第 2 章](part0025.xhtml#aid-NQU21
    "第 2 章 客户端-服务器仅 IP 网络")中的 *设置公钥和私钥* 配方设置客户端和服务器证书，*客户端-服务器仅 IP 网络*。在本食谱中，服务器计算机运行
    CentOS 6 Linux 和 OpenVPN 2.4.0，客户端运行 Fedora 22 Linux 和 OpenVPN 2.4.0。保留[第 2 章](part0025.xhtml#aid-NQU21
    "第 2 章 客户端-服务器仅 IP 网络")中 *服务器端路由* 配方中的配置文件 `basic-udp-server.conf`，以及客户端配置文件 `basic-udp-client.conf`。
- en: How to do it...
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Start the server:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE21]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, start the client:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，启动客户端：
- en: '[PRE22]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, we start `iperf` on the server:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们在服务器上启动`iperf`：
- en: '[PRE23]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'First, we measure the performance outside the tunnel:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们测量隧道外的性能：
- en: '[PRE24]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: For a Gigabit Ethernet network, this is close to the theoretical limit.
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于千兆以太网网络，这接近理论极限。
- en: 'Next, we measure the performance inside the tunnel:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们在隧道内测量性能：
- en: '[PRE25]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This is the performance of a default OpenVPN tunnel.
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是默认 OpenVPN 隧道的性能。
- en: Stop both the client and server OpenVPN processes.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止客户端和服务器上的 OpenVPN 进程。
- en: 'Now, we switch to an AES-256 cipher to make use of the AES-NI instructions
    that both processors support:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们切换到 AES-256 加密算法，以利用两款处理器都支持的 AES-NI 指令：
- en: '[PRE26]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'And the client:'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以及客户端：
- en: '[PRE27]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Again, we measure the performance inside the tunnel, testing both directions:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，我们在隧道内测量性能，测试两个方向：
- en: '[PRE28]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This clearly shows that the AES-NI instructions make a difference.
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这清楚地表明，AES-NI 指令确实有所不同。
- en: Stop both the client and server OpenVPN processes again.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次停止客户端和服务器的 OpenVPN 进程。
- en: 'Now, we switch to AES-256-GCM, a new cipher algorithm supported by OpenVPN
    2.4, which is more efficient compared to an AES-256 cipher and SHA2 HMAC function:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们切换到 AES-256-GCM，这是 OpenVPN 2.4 支持的新加密算法，相较于 AES-256 加密算法和 SHA2 HMAC 函数，它更为高效：
- en: '[PRE29]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'And the client:'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以及客户端：
- en: '[PRE30]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Again, we measure the performance inside the tunnel, testing both directions:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，我们在隧道内测量性能，测试两个方向：
- en: '[PRE31]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The last performance numbers are actually quite close to the maximum speed that
    can be achieved over an OpenVPN tunnel on a Gigabit Ethernet network.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的性能数据实际上非常接近通过千兆以太网 OpenVPN 隧道能够实现的最大速度。
- en: How it works...
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When processors are used that have a high clock speed and have support for the
    AES-NI instructions, OpenVPN and the operating system are capable of keeping up
    with the flood of packets that is coming in and needs to be sent out at Gigabit
    Ethernet speeds.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用具有高时钟频率并支持 AES-NI 指令的处理器时，OpenVPN 和操作系统能够跟上以千兆以太网速度进出的大量数据包。
- en: The new AES-256-GCM encryption cipher especially helps here, as the encryption
    and authentication (HMAC) are done in one step. This greatly improves performance,
    in part due to shorter computing time and in part due to the fact that this cipher
    has a smaller encryption overhead for each packet, leaving more bytes for the
    actual "payload".
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 AES-256-GCM 加密算法在这里尤其有帮助，因为加密和身份验证（HMAC）在一个步骤中完成。这大大提高了性能，部分原因是计算时间更短，部分原因是这种加密算法每个数据包的加密开销更小，为实际的“有效载荷”留下了更多字节。
- en: There's more...
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Tuning network performance on Gigabit Ethernet depends heavily on the hardware
    and operating system used.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在千兆以太网中调整网络性能在很大程度上取决于所使用的硬件和操作系统。
- en: Plain-text tunnel
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 明文隧道
- en: 'Another interesting test to run is to turn off all encryption and authentication
    (`--cipher none --auth none`) and then run the `iperf` tests once more. With the
    hardware used in this recipe the following numbers were achieved:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的测试是关闭所有加密和身份验证（`--cipher none --auth none`），然后再次运行`iperf`测试。在本配方中使用的硬件上，得到了以下结果：
- en: '[PRE32]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: These numbers are even closer to the actual line speed, mostly due to the fact
    that there is no encryption overhead, leaving optimal space for the "payload".
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数字甚至更接近实际的线路速度，主要是因为没有加密开销，为“有效载荷”留出了最佳空间。
- en: Windows performance
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows 性能
- en: The `iperf` tool is also available on Windows, so the above recipe can also
    be done using a Windows client and/or server. The results are very different compared
    to the Linux client or server. We can achieve similar "raw" Ethernet speeds by
    using `[WinClient]> iperf -w 128K -c <openvpn-server-ip>`.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`iperf` 工具也可以在 Windows 上使用，因此上述方法也可以通过 Windows 客户端和/或服务器完成。与 Linux 客户端或服务器相比，结果会有所不同。我们可以通过使用`[WinClient]>
    iperf -w 128K -c <openvpn-server-ip>`实现类似的“原始”以太网速度。'
- en: However, performance over the OpenVPN tunnel, with or without encryption, is
    well below 200 Mbps, even with the fastest processors used. Most likely, this
    is due to a design issue in the Windows TAP driver. This issue is currently under
    investigation.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，通过 OpenVPN 隧道的性能，无论是否加密，都远低于 200 Mbps，即使使用的是最快的处理器。这很可能是由于 Windows TAP 驱动程序的设计问题。此问题目前正在调查中。
- en: Compression tests
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 压缩测试
- en: OpenVPN has built-in support for LZO compression if compiled properly. All Windows
    binaries have LZO compression available by default. In this recipe, we will show
    what is the performance of using LZO compression when transferring both easily
    compressible data (such as web pages) and non-compressible data (such as photographs
    or binaries).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果正确编译，OpenVPN 内置支持 LZO 压缩。所有 Windows 二进制文件默认都支持 LZO 压缩。在本配方中，我们将展示在传输易于压缩的数据（如网页）和不可压缩数据（如照片或二进制文件）时，使用
    LZO 压缩的性能。
- en: Getting ready
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We use the following network layout:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下网络布局：
- en: '![Getting ready](img/image00397.jpeg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/image00397.jpeg)'
- en: Set up the client and server certificates using the *Setting up the public and
    private keys* recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks*. For this recipe, the server
    computer was running CentOS 6 Linux and OpenVPN 2.3.11\. The first client was
    running Fedora 22 Linux and OpenVPN 2.3.11\. Keep the configuration file `basic-udp-server.conf`
    from the *Server-side routing* recipe from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*,
    as well as the client configuration file `basic-udp-client.conf`. The recipe was
    repeated with a second client running Windows 7 64bit and OpenVPN 2.3.11\. Keep
    the configuration file `basic-udp-server.conf` from the *Server-side routing*
    recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only
    Networks"), *Client-server IP-only Networks*, as well as the client configuration
    file `basic-udp-client.ovpn` from the *Using an ifconfig-pool block* .
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[第二章](part0025.xhtml#aid-NQU21 "第二章。客户端-服务器IP仅网络")中的*设置公钥和私钥*食谱设置客户端和服务器证书，*客户端-服务器IP仅网络*。在这个食谱中，服务器计算机运行的是CentOS
    6 Linux和OpenVPN 2.3.11。第一个客户端运行的是Fedora 22 Linux和OpenVPN 2.3.11。保留[第二章](part0025.xhtml#aid-NQU21
    "第二章。客户端-服务器IP仅网络")中*服务器端路由*食谱中的`basic-udp-server.conf`配置文件，和客户端配置文件`basic-udp-client.conf`。该食谱还在第二个客户端运行Windows
    7 64位和OpenVPN 2.3.11时进行了重复。保留[第二章](part0025.xhtml#aid-NQU21 "第二章。客户端-服务器IP仅网络")中*服务器端路由*食谱中的`basic-udp-server.conf`配置文件，和来自*使用ifconfig-pool块*的客户端配置文件`basic-udp-client.ovpn`。
- en: How to do it...
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Append the following line to the `basic-udp-server.conf` file:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行添加到`basic-udp-server.conf`文件中：
- en: '[PRE33]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Save it as `example8-6-server.conf`.
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其保存为`example8-6-server.conf`。
- en: 'Start the server:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE34]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Similarly, for the client, add a line to the `basic-udp-client.conf` file:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样地，对于客户端，添加一行到`basic-udp-client.conf`文件中：
- en: '[PRE35]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Save it as `example8-6-client.conf`.
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其保存为`example8-6-client.conf`。
- en: 'Start the client:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动客户端：
- en: '[PRE36]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Next, we start `iperf` on the server:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们在服务器上启动`iperf`：
- en: '[PRE37]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'First, we measure the performance when transferring data outside of the tunnel:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们测量传输隧道外数据时的性能：
- en: '[PRE38]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This results in a throughput of about 50 Mbps over an 802.11n wireless network.
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这导致在802.11n无线网络上大约达到50 Mbps的吞吐量。
- en: 'Next, non-compressible data:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是不可压缩数据：
- en: '[PRE39]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: In the first step, we create a 60MB file with random data. Then, we measure
    the `iperf` performance when transferring this file.
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在第一步中，我们创建一个包含随机数据的60MB文件。然后，我们测量传输该文件时`iperf`的性能。
- en: 'And finally, compressible data (a file filled with zeroes):'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，压缩数据（一个填充零的文件）：
- en: '[PRE40]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The performance of the VPN tunnel when transferring compressible data such as
    text files and web pages is shown.
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 显示了当传输可压缩数据（如文本文件和网页）时，VPN隧道的性能。
- en: 'The same measurement can be made using a Windows PC. Add the following line
    to the `basic-udp-client.ovpn` file:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 相同的测量可以使用Windows PC进行。将以下行添加到`basic-udp-client.ovpn`文件中：
- en: '[PRE41]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Save it as `example8-6.ovpn`.
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其保存为`example8-6.ovpn`。
- en: Start the client.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动客户端。
- en: 'The results of the `iperf` measurement are slightly different:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`iperf` 测量结果略有不同：'
- en: 'Outside the tunnel: 50 Mbps'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隧道外：50 Mbps
- en: 'Non-compressible data: 16 Mbps'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不可压缩数据：16 Mbps
- en: 'Compressible data: 22 Mbps'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可压缩数据：22 Mbps
- en: Clearly, the OpenVPN configuration needs to be optimized, but that is outside
    the scope of this recipe. These results do show that for both Windows and Linux
    clients, there is a significant performance boost when the data that is sent over
    the tunnel is easily compressible.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，OpenVPN的配置需要优化，但这不在本食谱的范围内。结果显示，对于Windows和Linux客户端，当通过隧道传输的可压缩数据时，性能有显著提升。
- en: How it works...
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When compression is enabled, all packets that are sent over the tunnel are compressed
    before they are encrypted and transferred to the other side. Compression is done
    using the LZO library, which is integrated into OpenVPN. This compression is done
    on-the-fly, which means that the compression ratios achieved are not as good as
    when compressing the data in advance. When transferring text pages, the performance
    gain is nevertheless significant.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 启用压缩时，所有通过隧道发送的数据包会在加密和传输到另一端之前进行压缩。压缩使用LZO库，该库集成在OpenVPN中。此压缩是即时完成的，这意味着压缩比率没有事先压缩数据时那么好。但当传输文本页面时，性能提升依然显著。
- en: There's more...
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: 'When the following configuration directive is used, adaptive compression is
    enabled by default:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用以下配置指令时，默认启用自适应压缩：
- en: '[PRE42]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'When OpenVPN detects that a particular piece of data is not compressible, it
    sends the data to the remote VPN endpoint without compressing it first. By specifying
    the following on both ends each packet is always compressed:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 当 OpenVPN 检测到某个数据不可压缩时，它会在不先压缩的情况下将数据发送到远程 VPN 端点。通过在两端指定以下设置，每个数据包都始终会被压缩：
- en: '[PRE43]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Depending on the type of data that is transferred, the performance is slightly
    better.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 根据传输的数据类型，性能会稍微有所提高。
- en: Traffic shaping
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 流量整形
- en: In this recipe, we will use traffic shaping to limit the upload speed of an
    OpenVPN client. This can be used to throttle the bandwidth of a client to the
    server, or from client to client. Note that OpenVPN traffic shaping cannot be
    used to throttle the download speed of OpenVPN clients. Throttling download speeds
    can best be achieved using external traffic control tools, such as the `tc` utility
    on Linux, which is part of the LARTC package.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用流量整形来限制 OpenVPN 客户端的上传速度。这可以用来限制客户端到服务器之间的带宽，或客户端到客户端之间的带宽。请注意，OpenVPN
    流量整形不能用于限制 OpenVPN 客户端的下载速度。限制下载速度最好使用外部流量控制工具，例如 Linux 上的 `tc` 工具，它是 LARTC 软件包的一部分。
- en: Getting ready
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: 'We use the following network layout:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下网络布局：
- en: '![Getting ready](img/image00398.jpeg)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/image00398.jpeg)'
- en: Set up the client and server certificates using the *Setting up the public and
    private keys* recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks*. For this recipe, the server
    computer was running CentOS 6 Linux and OpenVPN 2.3.11\. The client was running
    Windows 7 64 bit and OpenVPN 2.3.11\. Keep the configuration file `basic-udp-server.conf`
    from the *Server-side routing* recipe from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*,
    as well as the client configuration file `basic-udp-client.ovpn` from the *Using
    an ifconfig-pool block* recipe.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [第 2 章](part0025.xhtml#aid-NQU21 "第 2 章 客户端-服务器 IP 仅网络") 中的*设置公钥和私钥*食谱设置客户端和服务器证书，*客户端-服务器
    IP 仅网络*。在本食谱中，服务器计算机运行 CentOS 6 Linux 和 OpenVPN 2.3.11，客户端运行 Windows 7 64 位和 OpenVPN
    2.3.11。保留来自 [第 2 章](part0025.xhtml#aid-NQU21 "第 2 章 客户端-服务器 IP 仅网络")，*客户端-服务器
    IP 仅网络* 的 `basic-udp-server.conf` 配置文件，以及来自*使用 ifconfig-pool 块*食谱的客户端配置文件 `basic-udp-client.ovpn`。
- en: How to do it...
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Append the following line to the `basic-udp-server.conf` file:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行追加到`basic-udp-server.conf`文件中：
- en: '[PRE44]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: This will throttle the upload speed of the VPN clients to 100,000 bytes per
    second (100 kbps). Save it as `example8-7-server.conf`.
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将限制 VPN 客户端的上传速度为每秒 100,000 字节（100 kbps）。将其保存为 `example8-7-server.conf`。
- en: 'Start the server:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE45]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Start the client:![How to do it...](img/image00399.jpeg)
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动客户端：![如何实现...](img/image00399.jpeg)
- en: 'Next, we start `iperf` on the server:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们在服务器上启动`iperf`：
- en: '[PRE46]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: When we run `iperf` on the Windows PC, the performance is close to 100 KB/s:![How
    to do it...](img/image00400.jpeg)
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们在 Windows PC 上运行`iperf`时，性能接近 100 KB/s：![如何实现...](img/image00400.jpeg)
- en: The PNG number of bytes being sent over the tunnel, including encryption overhead,
    is actually very close to 100,000 bytes per second.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 穿越隧道传输的 PNG 字节数（包括加密开销）实际上非常接近每秒 100,000 字节。
- en: How it works...
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'When the OpenVPN client connects to the server, the server pushes out an option
    to shape outgoing traffic over the VPN tunnel to 100 KB/s. Whenever traffic is
    sent over the tunnel, the OpenVPN client itself limits the outgoing traffic to
    a maximum of 100 KB/s. The download speed is not affected by this, and note that
    the following directive cannot be used on the OpenVPN server itself:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 当 OpenVPN 客户端连接到服务器时，服务器会推送一个选项，通过 VPN 隧道限制外发流量为 100 KB/s。每当流量通过隧道发送时，OpenVPN
    客户端会将外发流量限制为最大 100 KB/s。下载速度不受此限制，注意，以下指令不能在 OpenVPN 服务器本身使用：
- en: '[PRE47]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: To throttle traffic leaving the server, more advanced traffic control tools
    such as `tc` for Linux should be used.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 要限制离开服务器的流量，应该使用更高级的流量控制工具，例如 Linux 上的 `tc`。
- en: Tuning UDP-based connections
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整基于 UDP 的连接
- en: In this recipe, we focus on some of the basic techniques for optimizing UDP-based
    VPN tunnels. These techniques need to be applied with care, as there is no fool-proof
    method for optimizing OpenVPN performance. The actual performance gain varies
    with each network setup. Therefore, this recipe only shows some of the configuration
    directives that can be used for this optimization.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们重点介绍了一些优化基于UDP的VPN隧道的基本技巧。这些技巧需要谨慎使用，因为没有一种万无一失的方法可以优化OpenVPN性能。实际的性能提升因每个网络配置的不同而有所差异。因此，本教程仅展示了一些可以用于优化的配置指令。
- en: Getting ready
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We use the following network layout:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下网络布局：
- en: '![Getting ready](img/image00401.jpeg)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/image00401.jpeg)'
- en: Set up the client and server certificates using the *Setting up the public and
    private keys* recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks*. For this recipe, the server
    computer was running CentOS 6 Linux and OpenVPN 2.3.11\. The client was running
    Fedora 22 Linux and OpenVPN 2.3.11\. Keep the configuration file `basic-udp-server.conf`
    from the *Server-side routing* recipe from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*,
    as well as the client configuration file `basic-udp-client.conf`.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[第2章](part0025.xhtml#aid-NQU21 "第2章。客户端-服务器IP-only网络")中的*设置公共和私有密钥*教程设置客户端和服务器证书，*客户端-服务器IP-only网络*。对于本教程，服务器计算机运行的是CentOS
    6 Linux和OpenVPN 2.3.11，客户端运行的是Fedora 22 Linux和OpenVPN 2.3.11。保留[第2章](part0025.xhtml#aid-NQU21
    "第2章。客户端-服务器IP-only网络")中*服务器端路由*教程的`basic-udp-server.conf`配置文件，以及客户端配置文件`basic-udp-client.conf`。
- en: How to do it...
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Append the following line to the `basic-udp-server.conf` file:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行添加到`basic-udp-server.conf`文件中：
- en: '[PRE48]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Save it as `example8-8-server.conf`.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其保存为`example8-8-server.conf`。
- en: 'Start the server:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE49]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Similarly, for the client, add a line to the `basic-udp- client.conf` file:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样地，对于客户端，在`basic-udp-client.conf`文件中添加一行：
- en: '[PRE50]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Save it as `example8-8-client.conf`.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其保存为`example8-8-client.conf`。
- en: 'Start the client:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动客户端：
- en: '[PRE51]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Next, we start `iperf` on the server:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们在服务器上启动`iperf`：
- en: '[PRE52]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'First, we measure the performance outside the tunnel:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们测量隧道外的性能：
- en: '[PRE53]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: This actually measures the performance of data being sent to the server. The
    cable network used in this recipe has a theoretical upload limit of 4 Mbps. Note
    that this result is nearly the same as found in the recipe *Optimizing performance
    using iperf*.
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这实际上是测量发送到服务器的数据性能。本教程中使用的电缆网络理论上传输速率为4 Mbps。请注意，这个结果几乎与*使用iperf优化性能*教程中的结果相同。
- en: 'Next, we measure the performance inside the tunnel:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们在隧道内测量性能：
- en: '[PRE54]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: A slight penalty is incurred due to the OpenVPN tunnel, but the results are
    nearly identical to the results found in the recipe *Optimizing performance using
    iperf*.
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于OpenVPN隧道的存在，性能会有所下降，但结果几乎与教程*使用iperf优化性能*中的结果相同。
- en: Fragmentation does have an effect on the `ping` round-trip times, however.
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 分片确实会影响`ping`的往返时间。
- en: 'For various values of the `fragment` option, run the `ping` command from the
    client to server:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于不同的`fragment`选项值，从客户端到服务器运行`ping`命令：
- en: '[PRE55]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The results are listed in the following table:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 结果列在以下表格中：
- en: '| **Fragmentation size** | **Ping result** |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| **分片大小** | **Ping结果** |'
- en: '| Default (1500) | 9.4 +/- 1.0 ms |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| 默认 (1500) | 9.4 +/- 1.0 毫秒 |'
- en: '| 1400 | 9.9 +/- 1.5 ms |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| 1400 | 9.9 +/- 1.5 毫秒 |'
- en: '| 400 | 19.2 +/- 8 ms |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| 400 | 19.2 +/- 8 毫秒 |'
- en: Thus, adding the `fragment` option to the server configuration is not a viable
    option for this network setup. However, in other network setups, this might improve
    performance.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，向服务器配置中添加`fragment`选项对于此网络配置而言不是一个可行的选项。然而，在其他网络配置中，这可能会提高性能。
- en: How it works...
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The OpenVPN configuration directive `fragment 1400` causes all encrypted packets
    that are larger than 1400 bytes to be fragmented. If the network latency is low
    enough, this does not have a noticeable effect on performance, as the `iperf`
    results. By lowering the fragmentation size, packets are split into more and more
    packets. This causes the round-trip time for larger packets to increase. If the
    network latency is already high, this will cause even more latency issues. Hence,
    the `fragment` option and associated `mssfix` option must be used with care.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVPN配置指令`fragment 1400`会导致所有大于1400字节的加密数据包被分段。如果网络延迟足够低，则对性能没有明显影响，如`iperf`的结果所示。通过降低分段大小，数据包被分成更多的包。这会导致较大数据包的往返时间增加。如果网络延迟已经很高，这将导致更多的延迟问题。因此，`fragment`选项和相关的`mssfix`选项必须小心使用。
- en: There's more...
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The `fragment` directive is often used in conjunction with the `mssfix` directive:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '`fragment`指令通常与`mssfix`指令一起使用：'
- en: '[PRE56]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: This directive announces to TCP sessions running over the tunnel that they should
    limit their send packet sizes so that after OpenVPN has encapsulated them; the
    resulting UDP packet size that OpenVPN sends to its peer will not exceed the maximum
    segment size. It is also used internally by OpenVPN to set the maximum segment
    size of outbound packets. If no maximum segment size is specified, the value from
    the `fragment` directive is used.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 该指令通知通过隧道运行的TCP会话，要求它们限制发送数据包的大小，以便在OpenVPN将它们封装后，OpenVPN发送到其对等端的UDP数据包大小不会超过最大分段大小。它也被OpenVPN内部使用，用于设置出站数据包的最大分段大小。如果未指定最大分段大小，则使用`fragment`指令中的值。
- en: Ideally, the `mssfix` and `fragment` directives are used together, where `mssfix`
    will try to keep TCP from needing packet fragmentation in the first place, and
    if big packets come through anyhow (for example, from protocols other than TCP),
    the `fragment` directive will internally fragment them.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，`mssfix`和`fragment`指令一起使用，其中`mssfix`会尽量避免TCP需要数据包分段，如果仍然有大数据包通过（例如，来自非TCP协议的包），则`fragment`指令会对其进行内部分段。
- en: See also
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The next recipe in this chapter, which explains how to tune TCP-based connections
    in a very similar manner
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的下一个食谱解释了如何以非常相似的方式调整基于TCP的连接。
- en: Tuning TCP-based connections
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整基于TCP的连接
- en: In this recipe, we focus on some of the basic techniques for optimizing TCP-based
    VPN tunnels. In a TCP-based VPN setup, the connection between the VPN endpoints
    is a regular TCP connection. This has advantages and drawbacks. The main advantage
    is that it is often easier to set up a TCP connection than a UDP connection, mostly
    due to firewall restrictions. The main drawback of tunneling TCP traffic over
    a TCP-based tunnel is that there is chance of severe performance penalties, especially
    when the network connection is poor. This performance penalty is caused by the
    *tcp-over-tcp* syndrome. The TCP protocol guarantees the ordered delivery of packets,
    thus if a packet is dropped along the way, the packet will be resent. Once the
    new packet is received, the packet order is restored. Until that time, all packets
    after the `lost` packet are on hold. The problem with tunneling TCP traffic over
    a TCP connection is that both layers want to guarantee ordered packet delivery.
    This can lead to a large amount of retransmits and hence to a large performance
    penalty.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们专注于一些优化基于TCP的VPN隧道的基本技术。在基于TCP的VPN设置中，VPN端点之间的连接是一个常规的TCP连接。这有其优点和缺点。主要优点是，通常设置TCP连接比设置UDP连接更容易，主要是由于防火墙的限制。通过TCP隧道传输TCP流量的主要缺点是，当网络连接较差时，可能会出现严重的性能损失。这种性能损失是由*tcp-over-tcp*症状引起的。TCP协议保证数据包的顺序传送，因此如果某个数据包在传输过程中丢失，它将被重新发送。一旦新数据包被接收，数据包的顺序就会恢复。在此之前，所有在`丢失`数据包之后的数据包都将被暂停。通过TCP连接隧道传输TCP流量的问题在于，两个层都希望保证数据包按顺序传送。这可能会导致大量重传，从而带来巨大的性能损失。
- en: When tuned correctly, however, an OpenVPN tunnel over a TCP connection can achieve
    the same performance as an OpenVPN tunnel over a UDP connection. In this recipe,
    we will show some techniques for tuning such a TCP-based OpenVPN connection.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当正确调整时，通过TCP连接的OpenVPN隧道可以达到与通过UDP连接的OpenVPN隧道相同的性能。在本食谱中，我们将展示一些调整此类基于TCP的OpenVPN连接的技术。
- en: Getting ready
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备开始
- en: 'We use the following network layout:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下网络布局：
- en: '![Getting ready](img/image00402.jpeg)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![准备开始](img/image00402.jpeg)'
- en: Set up the client and server certificates using the *Setting up the public and
    private keys* recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks*. For this recipe, the server
    computer was running CentOS 6 Linux and OpenVPN 2.3.11\. The client was running
    Windows 7 64bit and OpenVPN 2.3.11\. Keep the configuration file `basic-udp-server.conf`
    from the *Server-side routing* recipe from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*,
    as well as the client configuration file `basic-udp-client.ovpn` from the *Using
    an ifconfig-pool block *recipe.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[第 2 章](part0025.xhtml#aid-NQU21 "Chapter 2. Client-server IP-only Networks")中的
    *设置公钥和私钥* 配方设置客户端和服务器证书，*客户端-服务器仅 IP 网络*。对于这个配方，服务器计算机运行的是 CentOS 6 Linux 和 OpenVPN
    2.3.11，而客户端运行的是 Windows 7 64 位和 OpenVPN 2.3.11。保留 [第 2 章](part0025.xhtml#aid-NQU21
    "Chapter 2. Client-server IP-only Networks")中的 *服务器端路由* 配方中的配置文件 `basic-udp-server.conf`，以及
    *使用 ifconfig-pool 块* 配方中的客户端配置文件 `basic-udp-client.ovpn`。
- en: How to do it...
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the server configuration file:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建服务器配置文件：
- en: '[PRE57]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Save it as `example8-9-server.conf`.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其保存为 `example8-9-server.conf`。
- en: 'Start the server:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE58]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Next, create the client configuration file:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建客户端配置文件：
- en: '[PRE59]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Save it as `example8-9.ovpn`.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其保存为 `example8-9.ovpn`。
- en: Start the client:![How to do it...](img/image00403.jpeg)
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动客户端：![如何操作...](img/image00403.jpeg)
- en: 'Next, start `iperf` on the server:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在服务器上启动 `iperf`：
- en: '[PRE60]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Then, measure the performance of the tunnel:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，测量隧道的性能：
- en: '[PRE61]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'On this particular network, the following settings were tested:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个特定网络上，测试了以下设置：
- en: '| **Protocol** | **Result** |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| **协议** | **结果** |'
- en: '| UDP | 147 Mbits/sec |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| UDP | 147 Mbits/sec |'
- en: '| TCP | 115 Mbits/sec |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
  zh: '| TCP | 115 Mbits/sec |'
- en: '| TCP with tcp-nodelay | 146 Mbits/sec |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| 带有 tcp-nodelay 的 TCP | 146 Mbits/sec |'
- en: As can be seen, the performance of running OpenVPN over TCP is almost identical
    to the performance of OpenVPN over UDP, when the `--tcp-nodelay` directive is
    used.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 如图所示，使用 TCP 运行 OpenVPN 的性能几乎与使用 UDP 运行 OpenVPN 时的性能相同，前提是使用了 `--tcp-nodelay`
    指令。
- en: How it works...
  id: totrans-334
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When OpenVPN uses TCP as its underlying protocol, all packets are transferred
    over a regular TCP connection. By default, TCP connections make use of the Nagle
    algorithm, where smaller packets are held back and collected before they are sent.
    For an OpenVPN tunnel, this has an adverse effect on performance in most cases,
    hence it makes sense to disable the Nagle algorithm. By adding the `--tcp-nodelay`
    directive, we disable the Nagle algorithm and we see an immediate increase in
    performance.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 当 OpenVPN 使用 TCP 作为底层协议时，所有数据包都通过常规的 TCP 连接传输。默认情况下，TCP 连接会使用 Nagle 算法，在该算法中，较小的数据包会被延迟并收集，直到它们被发送出去。对于
    OpenVPN 隧道来说，在大多数情况下，这会对性能产生不利影响，因此禁用 Nagle 算法是有意义的。通过添加 `--tcp-nodelay` 指令，我们禁用了
    Nagle 算法，并且性能得到了显著提升。
- en: There's more...
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The two important parameters that can be tweaked for TCP-based connections
    are:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 可调的两个重要参数是：
- en: The `--tcp-nodelay` directive
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--tcp-nodelay` 指令'
- en: The MTU size of the TUN/TAP-Win32 adapter via either the `--tun-mtu` or  `--link-mtu`
    directives
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 `--tun-mtu` 或 `--link-mtu` 指令调整 TUN/TAP-Win32 适配器的 MTU 大小
- en: 'On Linux, the MTU size of the TUN (or TAP) adapter can be adjusted on-the-fly,
    but on Windows, this is not as easy. OpenVPN must be configured to match the MTU
    size as specified on the server. Before the new MTU size is used, however, the
    MTU of the TAP adapter must be adjusted. Starting with Windows Vista, it is now
    also possible to do this on-the-fly, using the `netsh` command:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上，TUN（或 TAP）适配器的 MTU 大小可以动态调整，但在 Windows 上，这并不容易。必须配置 OpenVPN 以匹配服务器上指定的
    MTU 大小。然而，在使用新的 MTU 大小之前，必须调整 TAP 适配器的 MTU。自 Windows Vista 起，现在也可以使用 `netsh` 命令动态调整
    MTU：
- en: 'First, find the right sub-interface number:'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，找到正确的子接口编号：
- en: '[PRE62]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Next, in order to change the MTU size of a sub-interface, use:'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，要更改子接口的 MTU 大小，请使用：
- en: '[PRE63]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Note that these commands must be run with elevated privileges.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这些命令必须以提升的权限运行。
- en: 'If the MTU setting of the Windows TAP-Win32 adapter is larger than the MTU
    size configured by OpenVPN, the following message can appear in the OpenVPN log
    file:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Windows TAP-Win32 适配器的 MTU 设置大于 OpenVPN 配置的 MTU 大小，OpenVPN 日志文件中可能会出现以下消息：
- en: '[PRE64]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: For this particular network, all changes made to the MTU size (with the appropriate
    Windows reboot) did not have a positive effect on performance.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个特定的网络，所有对 MTU 大小的更改（包括适当的 Windows 重启）对性能没有产生积极的影响。
- en: Analyzing performance using tcpdump
  id: totrans-349
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 tcpdump 分析性能
- en: In this recipe, we will analyze the performance of an OpenVPN setup using the
    `tcpdump` utility. It is also possible to use the Wireshark utility, which is
    available for Linux, Windows, and Mac OS X. While this recipe does not cover any
    new OpenVPN functionality, it is useful to show how such an analysis can be made.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将分析使用`tcpdump`工具的OpenVPN配置性能。也可以使用Wireshark工具，它适用于Linux、Windows和Mac
    OS X。本食谱虽然没有介绍任何新的OpenVPN功能，但展示了如何进行这样的分析，依然很有帮助。
- en: Getting ready
  id: totrans-351
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We use the following network layout:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下网络布局：
- en: '![Getting ready](img/image00404.jpeg)'
  id: totrans-353
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00404.jpeg)'
- en: Set up the client and server certificates using the *Setting up the public and
    private keys* recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks*. For this recipe, the server
    computer was running CentOS 6 Linux and OpenVPN 2.3.11\. The client was running
    Fedora 22 Linux and OpenVPN 2.3.11\. Keep the configuration file `example8-8-server.conf`
    from the *Tuning UDP-based connections* recipe from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*,
    as well as the client configuration, `example8-8-client.conf`, from the same recipe.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*设置公钥和私钥*食谱来设置客户端和服务器证书，见[第2章](part0025.xhtml#aid-NQU21 "第2章。客户端-服务器仅限IP网络")，*客户端-服务器仅限IP网络*。在此食谱中，服务器计算机运行CentOS
    6 Linux和OpenVPN 2.3.11，客户端运行Fedora 22 Linux和OpenVPN 2.3.11。请保留`example8-8-server.conf`配置文件，来自[第2章](part0025.xhtml#aid-NQU21
    "第2章。客户端-服务器仅限IP网络")的*Tuning UDP-based connections*食谱，以及来自同一食谱的客户端配置`example8-8-client.conf`。
- en: How to do it...
  id: totrans-355
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Start the server:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE65]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Next, start the client:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，启动客户端：
- en: '[PRE66]'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'On the server, run `tcpdump` to watch for the incoming packets on the network
    interface (not the tunnel interface itself):'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器上，运行`tcpdump`来监控网络接口上的传入数据包（而不是隧道接口本身）：
- en: '[PRE67]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: This instructs `tcpdump` to listen on the local network interface for all UDP
    traffic on port `1194`, which is the OpenVPN default.
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这指示`tcpdump`在本地网络接口上监听所有UDP流量，端口为`1194`，这是OpenVPN的默认端口。
- en: 'From the client, ping the server''s VPN IP address with two different sizes:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从客户端ping服务器的VPN IP地址，使用两种不同的大小：
- en: '[PRE68]'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'The following packets are seen in the `tcpdump` screen:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 以下数据包出现在`tcpdump`屏幕上：
- en: '![How to do it...](img/image00405.jpeg)'
  id: totrans-366
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image00405.jpeg)'
- en: The first ICMP packets are sent unfragmented, as they are smaller than 1400
    bytes. The second set of encrypted ICMP packets is larger than the fragment size
    (1400) and hence are split into two parts.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个ICMP数据包未分段发送，因为它们小于1400字节。第二组加密的ICMP数据包大于分段大小（1400），因此被分成两部分。
- en: How it works...
  id: totrans-368
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'The OpenVPN configuration directive `fragment 1400` causes all the encrypted
    packets that are larger than 1400 bytes to be fragmented. When watching the encrypted
    traffic, this can be verified by pinging the OpenVPN server. Note that packets
    which need to be fragmented are fragmented evenly: all packets have the same size.'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVPN配置指令`fragment 1400`会导致所有大于1400字节的加密数据包被分段。在观察加密流量时，可以通过ping OpenVPN服务器来验证这一点。需要注意的是，需要分段的数据包会均匀分段：所有数据包的大小相同。
- en: 'Also, note that the following command causes the encrypted packet to be larger
    than 1400 bytes:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，请注意，以下命令会导致加密数据包大于1400字节：
- en: '[PRE69]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: The encryption needed for the secure tunnel adds extra overhead to the packets
    that are transmitted. This is one of the root causes for a performance penalty
    when using VPN tunnels (not just OpenVPN) compared to non-encrypted traffic. In
    most networks, this overhead is not noticed, but it always exists.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 用于安全隧道的加密会给传输的数据包增加额外的开销。这是使用VPN隧道（不仅仅是OpenVPN）相比非加密流量时性能下降的根本原因之一。在大多数网络中，这个开销并不会被注意到，但它始终存在。
- en: See also
  id: totrans-373
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Tuning UDP-based connections* recipe in this chapter, which explains how
    to use the `fragment` directive
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*Tuning UDP-based connections*食谱解释了如何使用`fragment`指令。
