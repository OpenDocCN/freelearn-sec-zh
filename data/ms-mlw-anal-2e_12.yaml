- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Introduction to macOS and iOS Threats
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: macOS 和 iOS 威胁简介
- en: Apple Inc. (originally Apple Computer Company) was founded back in 1976 to sell
    one of the world’s first **personal computers** (**PCs**) as we know them now.
    By now, Apple Inc. is an industry giant with a valuation of many billions of dollars.
    However, not everybody is aware that its modern operating systems (such as macOS,
    iOS, watchOS, and tvOS) are primarily based on the **NeXTSTEP** solution developed
    by the **NeXT, Inc.**, a company founded by Steve Jobs following his resignation
    from Apple in 1985 and later acquired by Apple in 1997\. All modern Apple operating
    systems are based on a set of components unified as the **Darwin** operating system,
    which is based on the XNU hybrid kernel.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Apple 公司（最初为 Apple 计算机公司）成立于 1976 年，旨在销售我们现在所知道的世界上最早的 **个人计算机** (**PCs**) 之一。到目前为止，Apple
    公司已经成为一个行业巨头，市值达到数十亿美元。然而，并非每个人都知道，其现代操作系统（如 macOS、iOS、watchOS 和 tvOS）主要基于 **NeXTSTEP**
    解决方案，这一解决方案由 **NeXT, Inc.** 开发，后者是 Steve Jobs 在 1985 年离开 Apple 后创立的公司，并在 1997
    年被 Apple 收购。所有现代的 Apple 操作系统都基于一组统一的组件，统称为 **Darwin** 操作系统，它基于 XNU 混合内核。
- en: Multiple Apple products became famous for their high quality and reliability,
    with their users enjoying the feeling of security and often strongly believing
    that there was no malware for Mac. Indeed, the number of malicious samples successfully
    targeting this platform is significantly lower than Windows. There are multiple
    reasons for this, including different security and business models, as well as
    the different markets of these platforms. However, as long as the number of potential
    targets that use these systems increases, we will also see an increase in effort
    to develop malware for Apple-driven platforms. Here, we will look at various threats
    that target users of macOS and iOS operating systems and will learn how to analyze
    them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 多款 Apple 产品因其高质量和可靠性而闻名，用户享受着安全感，并且通常坚信 Mac 上没有恶意软件。事实上，成功攻击该平台的恶意样本数量远低于 Windows。造成这一现象的原因有多个，包括不同的安全和商业模型，以及这些平台的不同市场。然而，随着使用这些系统的潜在目标数量的增加，我们也会看到针对
    Apple 驱动平台的恶意软件开发投入的增加。在这里，我们将了解针对 macOS 和 iOS 操作系统用户的各种威胁，并学习如何分析它们。
- en: 'To streamline our learning, the chapter is divided into the following main
    sections:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化学习，本章分为以下主要部分：
- en: Understanding the role of the security model
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解安全模型的作用
- en: File formats and APIs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件格式和 API
- en: Attack stages
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 攻击阶段
- en: Advanced techniques
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级技术
- en: Static and dynamic analysis of macOS and iOS samples
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS 和 iOS 样本的静态与动态分析
- en: The analysis workflow
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析工作流程
- en: Understanding the role of the security model
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解安全模型的作用
- en: In many cases, malware uses design weaknesses in the system architecture in
    order to achieve its goals. Examples could be unauthorized access to sensitive
    data, tampering with security measures, or modification of system files to achieve
    persistence or stealth. Thus, the security model plays a vital role in reducing
    the attack surface, and in this way, reducing the number of techniques available
    to malware authors.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，恶意软件利用系统架构中的设计弱点来实现其目标。例子可能包括未经授权访问敏感数据、篡改安全措施或修改系统文件以实现持久性或隐匿性。因此，安全模型在减少攻击面方面发挥着至关重要的作用，从而减少恶意软件作者可用的技术手段。
- en: Now, let’s take a look at security models introduced in macOS and iOS and see
    why they are important when we talk about malicious code.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看 macOS 和 iOS 中引入的安全模型，并了解它们为何在讨论恶意代码时非常重要。
- en: macOS
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: macOS
- en: macOS (previously Mac OS X and OS X) has gone through multiple iterations since
    it was first introduced in 2001\. Prior to that, a series of operating systems
    developed between 1984 to 2001 for the Macintosh family of PC was in use; now,
    they are known by the colloquial term **Classic Mac OS**. macOS belongs to the
    family of Macintosh operating systems derived from NeXTSTEP. This operating system
    was originally based on Unix (particularly, BSD with the Mach microkernel). Using
    a Unix-derived architecture was a completely new direction compared to the previous
    Mac OS solutions.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: macOS（以前称为 Mac OS X 和 OS X）自 2001 年首次发布以来经历了多次迭代。在此之前，从 1984 年到 2001 年间，为 Macintosh
    系列个人计算机开发的一系列操作系统已经在使用；现在，这些操作系统被称为通俗的 **经典 Mac OS**。macOS 属于由 NeXTSTEP 衍生的 Macintosh
    操作系统系列。该操作系统最初基于 Unix（特别是 BSD 和 Mach 微内核）。采用基于 Unix 的架构与之前的 Mac OS 解决方案相比，是一个完全新的方向。
- en: Apart from traditional C/C++ languages, the main programming languages that
    Apple supports in their products are **Objective-C** and **Swift** (since 2014).
    Interactions between applications and the OS are possible through the native API,
    called **Cocoa**, derived from OPENSTEP; prior to that, the Carbon API was used.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 除了传统的 C/C++ 语言外，苹果在其产品中主要支持的编程语言是 **Objective-C** 和 **Swift**（自 2014 年起）。应用程序与操作系统之间的交互通过本地
    API **Cocoa** 完成，Cocoa 源自 OPENSTEP；在此之前，使用的是 Carbon API。
- en: There are multiple mechanisms implemented in the operating system that aim to
    boost security while always keeping usability in the mind. Let’s go through some
    of the most important ones.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统中实现了多种机制，旨在增强安全性，同时始终保持可用性。我们来了解其中一些最重要的机制。
- en: Security policies
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全策略
- en: 'macOS utilizes several security controls derived from BSD. In particular, it
    utilizes traditional discretionary access restrictions to system resources and
    files that are based on user and group IDs. In this case, permissions are granted
    mainly at the level of folders, files, and apps, and are controlled at many levels,
    including kernel components. In addition, macOS implements mandatory access controls
    to power multiple important features, such as sandboxing or **System Integrity
    Protection**. System Integrity Protection was introduced in **OS X 10.11** and
    enforces read-only access to specific critical filesystem locations, even for
    the root user, which are applied to all running processes. The following locations
    are protected:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: macOS 使用多种源自 BSD 的安全控制措施。特别是，它利用基于用户和组 ID 的传统任意访问限制来管理系统资源和文件的访问。在这种情况下，权限主要在文件夹、文件和应用层级授予，并在多个层级进行控制，包括内核组件。此外，macOS
    实施了强制访问控制来支持多个重要功能，如沙盒和 **系统完整性保护**。系统完整性保护于 **OS X 10.11** 中引入，并强制对某些关键文件系统位置进行只读访问，即使是
    root 用户也无法修改，这些保护适用于所有运行中的进程。以下位置受到保护：
- en: '`/usr`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/usr`'
- en: '`/bin`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/bin`'
- en: '`/sbin`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/sbin`'
- en: '`/System`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/System`'
- en: Apps pre-installed with macOS
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS 上预装的应用
- en: '![Figure 12.1 – No write access for one of the protected directories even with
    sudo'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.1 – 即使使用 sudo，某些受保护目录也无法写入'
- en: '](img/Figure_12.1_B18500.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_12.1_B18500.jpg)'
- en: Figure 12.1 – No write access for one of the protected directories even with
    sudo
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.1 – 即使使用 sudo，某些受保护目录也无法写入
- en: These paths can be accessed only by the processes signed by Apple as having
    a reason to work with them, such as Apple software updates. Thus, system files
    and resources, including kernels, are separated from the user’s app space so that
    malicious code can’t easily access it. The root user is disabled by default, but
    it can be enabled in system preferences when necessary.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这些路径仅允许那些经过苹果签名、并且有理由与之交互的进程访问，比如苹果的软件更新。因此，系统文件和资源，包括内核，已与用户的应用空间分离，以防恶意代码轻易访问。默认情况下，root
    用户是禁用的，但在必要时可以通过系统偏好设置启用。
- en: Tasks and resources are administrated by introducing secure communication channels,
    called **Mach ports**. Ports are unidirectional endpoints that connect a client
    requesting service and a server that provides it, where a resource specified by
    a port generally has a single receiver and multiple possible senders. Permissions
    to access a port in particular ways by tasks are called port rights. Ports are
    an essential part of the macOS **inter-process communication** (**IPC**), which
    includes multiple forms, such as classic message queues, semaphores, or remote
    procedure calls. Bypassing the associated permissions shouldn’t be possible unless
    some vulnerability is discovered, such as CVE-2021-30869 used in the **DazzleSpy**
    threat.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 任务和资源的管理通过引入安全通信通道来实现，这些通道称为 **Mach 端口**。端口是单向的端点，连接请求服务的客户端与提供服务的服务器，其中端口指定的资源通常有一个接收者和多个可能的发送者。任务通过特定方式访问端口的权限称为端口权限。端口是
    macOS **进程间通信**（**IPC**）的核心部分，其中包括多种形式，如经典的消息队列、信号量或远程过程调用。除非发现某些漏洞（如 CVE-2021-30869，曾在
    **DazzleSpy** 威胁中被利用），否则不应能绕过相关权限。
- en: Filesystem hierarchy and encryption
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件系统层次结构和加密
- en: Let’s take a look at the most common directories that can be found on the modern
    versions of macOS and learn a bit more about them.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看现代版本的 macOS 上常见的一些目录，并了解它们的一些基本情况。
- en: Directory structure
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 目录结构
- en: 'Here are some of the most crucial directories (in terms of malware analysis)
    and their purpose:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些最关键的目录（在恶意软件分析中）及其作用：
- en: '`/Applications:` This location is automatically used to install apps shared
    by all users.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/Applications:` 该位置会自动用于安装所有用户共享的应用程序。'
- en: '`Library:` There are multiple library directories that can be used by apps:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Library:` 有多个库目录可以供应用程序使用：'
- en: '`~/Library`: The directory in the current user’s home directory.'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`~/Library`：当前用户主目录中的目录。'
- en: '`/Library`: A location to store libraries shared between users.'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/Library`：存储在用户之间共享的库的位置。'
- en: '`/System/Library`: This location can be used only by Apple.'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/System/Library`：此位置仅限Apple使用。'
- en: '`/Volumes`: Stores subdirectories for mounted disks.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/Volumes`：存储已挂载磁盘的子目录。'
- en: '`/System`: Contains system-related resources.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/System`：包含与系统相关的资源。'
- en: '`/Users`: Contains user home directories. Each contains its own subdirectories,
    including user-specific `Applications` and `Library` folders (the last one is
    hidden in more recent versions of macOS).'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/Users`：包含用户的主目录。每个主目录包含自己的子目录，包括特定用户的`Applications`和`Library`文件夹（在较新的macOS版本中，后者是隐藏的）。'
- en: Apart from that, there are various Unix-specific directories, such as `/bin`,
    `/sbin`, `/var`, `/usr`, and `/tmp`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，还有一些特定于Unix的目录，例如`/bin`、`/sbin`、`/var`、`/usr`和`/tmp`。
- en: Encryption
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加密
- en: Apple uses its own **Apple FileSystem** (**APFS**) that offers multiple modern
    features, including strong encryption. All Mac computers are shipped with the
    **FileVault** disk encryption system, which utilizes the **Advanced Encryption
    Standard** (**AES**) algorithm to protect critical data. It is also possible to
    encrypt the whole disk and make it accessible only with valid credentials or a
    recovery key (FileVault 2). Once the user enables the FileVault feature, authentication
    is required before using the **Target Disk mode**, where a device can be attached
    to another machine and become accessible as an external device (making it possible
    for attackers to access sensitive data). Newer models of Mac computers are shipped
    with a dedicated Apple T2 chip (or its successors) and have disk encryption enabled
    by default. In this case, the optional FileVault provides extra protection by
    requiring credentials to be provided before decryption – otherwise, encrypted
    SSDs can be decrypted by simply attaching them to the corresponding Mac. In addition,
    the Apple T2 security chip enables **Secure Boot** to implement a chain of trust
    rooted in hardware, where the software integrity is assured at every next step
    of booting, making bootkit creation extremely hard.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果使用自己的**Apple FileSystem**（**APFS**），它提供了多种现代特性，包括强加密。所有Mac电脑都配备了**FileVault**磁盘加密系统，该系统利用**高级加密标准**（**AES**）算法来保护关键数据。还可以加密整个磁盘，仅凭有效凭据或恢复密钥（FileVault
    2）才能访问。一旦用户启用FileVault功能，使用**Target Disk模式**时需要进行身份验证，在该模式下，设备可以连接到另一台机器并作为外部设备访问（这使得攻击者能够访问敏感数据）。较新的Mac电脑配备了专用的Apple
    T2芯片（或其后继产品），并默认启用磁盘加密。在这种情况下，FileVault提供了额外的保护，要求在解密前提供凭据——否则，通过将加密的SSD连接到相应的Mac，数据可以被解密。此外，Apple
    T2安全芯片启用了**Secure Boot**，通过实现硬件根信任链，在每个启动步骤中确保软件完整性，从而使得启动工具包的创建变得极其困难。
- en: All Macs are also shipped with the built-in **Time Machine** backup feature,
    which allows you to restore files once they are lost or damaged, for example,
    due to a ransomware attack. In this case, it is also possible to encrypt backups
    for extra security and use external storage to make them inaccessible to malware
    (especially wipers and ransomware).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Mac电脑都配备了内建的**Time Machine**备份功能，允许你在文件丢失或损坏后恢复它们，例如由于勒索病毒攻击。在这种情况下，还可以加密备份以增加额外的安全性，并使用外部存储使其不易受到恶意软件（尤其是擦除工具和勒索病毒）的攻击。
- en: Finally, it is possible to create encrypted disk images using **Disk Utility**
    and use them as secure containers for sensitive information. In this case, either
    128-bit or 256-bit AES encryption is possible.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，可以使用**磁盘工具**创建加密磁盘镜像，并将其作为敏感信息的安全容器。在这种情况下，可以使用128位或256位AES加密。
- en: All these techniques make it more difficult for attackers to get access to sensitive
    information.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些技术使得攻击者更难访问敏感信息。
- en: Apps protection
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用程序保护
- en: There are several built-in features available in macOS that ensure that only
    trusted applications are installed on the system.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: macOS提供了几项内建功能，确保只有受信任的应用程序才能安装到系统中。
- en: Gatekeeper
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Gatekeeper
- en: One of the first technologies worth mentioning is called **Gatekeeper**. It
    gives users direct control over which apps are allowed to be installed. Thus,
    it is possible to enforce the policy by allowing only apps from the App Store
    to be used. All apps aiming to appear on the App Store should be signed with a
    certificate issued by Apple and reviewed by its engineers to ensure that they
    are generally free of bugs, up to date, secure, and don’t compromise the user
    experience in any way.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的第一项技术叫做**Gatekeeper**。它让用户可以直接控制允许安装哪些应用。因此，可以通过只允许来自App Store的应用来强制执行政策。所有想要出现在App
    Store中的应用都应使用Apple颁发的证书进行签名，并由其工程师进行审查，以确保应用通常没有漏洞，保持更新，安全且不妥协用户体验。
- en: Default Gatekeeper settings also allow applications from outside the App Store
    that still have a valid developer ID signature, which means the app is signed
    using a certificate issued by Apple. In addition, it is possible to submit an
    app to Apple for **notarizing**. In this case, the files are checked by automatic
    malware scanning and signature checking; as a result, the ticket is distributed
    with the app and available online. So, when the user executes such an app, they
    get a notification that it has been checked by Apple for the presence of malicious
    functionality. Unsigned applications will be restricted in rights by mandatory
    access controls and cause alerts.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的Gatekeeper设置还允许来自App Store以外的应用，只要它们具有有效的开发者ID签名，这意味着应用是使用Apple颁发的证书进行签名的。此外，也可以将应用提交给Apple进行**公证**。在这种情况下，文件会经过自动恶意软件扫描和签名检查；因此，公证票证会随应用一起分发并在线提供。所以，当用户执行这样的应用时，他们会收到通知，告知该应用已由Apple检查过是否存在恶意功能。未签名的应用将会受到强制访问控制的权限限制，并且会触发警报。
- en: 'Another anti-malware feature implemented in Gatekeeper is `ls –l@` command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Gatekeeper中实现的另一个反恶意软件功能是`ls –l@`命令：
- en: '![Figure 12.2 – An extended attribute com.apple.quarantine in action'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.2 – 扩展属性com.apple.quarantine的应用'
- en: '](img/Figure_12.2_B18500.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_12.2_B18500.jpg)'
- en: Figure 12.2 – An extended attribute com.apple.quarantine in action
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2 – 扩展属性com.apple.quarantine的应用
- en: All apps from the App Store are sandboxed and don’t have access to the data
    of other apps, other than by using dedicated APIs. For apps distributed outside
    the App Store, this feature is optional but highly recommended.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 来自App Store的所有应用都被沙盒化，并且不能访问其他应用的数据，除非通过专用的API。对于App Store外分发的应用，这一功能是可选的，但强烈推荐启用。
- en: 'A non-sandboxed app has the same access rights as the user executing it, which
    means if it gets compromised by exploiting some vulnerability, the attacker gets
    user privileges. The way **App Sandbox** handles this is by only providing an
    app with the access rights it needs to perform its tasks; additional access may
    be explicitly granted by a user:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 非沙盒化的应用具有与执行它的用户相同的访问权限，这意味着如果应用通过某种漏洞被攻击者攻破，攻击者将获得用户权限。**应用沙盒**通过仅向应用提供它执行任务所需的访问权限来处理这个问题；额外的权限可能会由用户显式授权：
- en: '![Figure 12.3 – App Sandbox explained'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.3 – 应用沙盒解释'
- en: '](img/Figure_12.3_B18500.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_12.3_B18500.jpg)'
- en: Figure 12.3 – App Sandbox explained
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3 – 应用沙盒解释
- en: 'Here are examples of the resources that a sandboxed app has to request explicitly
    in order to use:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是沙盒应用必须明确请求才能使用的资源示例：
- en: Hardware (such as a camera or microphone)
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬件（如摄像头或麦克风）
- en: Networks
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络
- en: App data (such as a calendar or contacts)
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用数据（例如日历或联系人）
- en: User files
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户文件
- en: Other technologies
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他技术
- en: macOS features an embedded antivirus solution called **XProtect** that detects
    malware using signatures and can block its installation. This technology aims
    to prevent infection, but if it happens, another built-in program called the **Malware
    Removal Tool** (**MRT**) is supposed to monitor potential malware activity and
    remediate infections.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: macOS具有一个嵌入式的抗病毒解决方案，名为**XProtect**，它使用签名检测恶意软件，并能阻止其安装。这项技术旨在防止感染，但如果发生感染，另一个内置的程序，称为**恶意软件移除工具**（**MRT**），将监控潜在的恶意软件活动并修复感染。
- en: In addition, a built-in firewall can provide network protection. Finally, automatic
    security updates improve the overall level of system security.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，内置的防火墙可以提供网络保护。最后，自动安全更新提升了系统安全性的整体水平。
- en: Now, let’s compare it with the iOS setup.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们与iOS设置进行比较。
- en: iOS
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: iOS
- en: In contrast with macOS, which is mainly developed for PC use cases, iOS was
    created later to power mobile devices—and this fact affects the security model
    introduced with it. Other newer operating systems, such as watchOS and tvOS, are
    extensively based on it, so we will focus mainly on iOS in this chapter.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 与主要为 PC 使用场景开发的 macOS 不同，iOS 是后来为移动设备设计的——这一事实影响了随之引入的安全模型。其他较新的操作系统，如 watchOS
    和 tvOS，广泛基于 iOS，因此本章我们将主要关注 iOS。
- en: Similar to macOS, the development can be done in the Objective-C and Swift programming
    languages, and the API in this case is called **Cocoa Touch**, which also includes
    mobile-oriented features, such as gesture recognition. All iOS-powered devices
    use ARM-based processors.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 macOS，iOS 开发可以使用 Objective-C 和 Swift 编程语言，且该 API 称为 **Cocoa Touch**，它还包括面向移动的特性，如手势识别。所有
    iOS 设备都使用基于 ARM 的处理器。
- en: Now, let’s take a look at the different layers of protection implemented in
    iOS.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看 iOS 中实现的不同保护层。
- en: System security
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 系统安全
- en: 'The first thing that is worth mentioning here is the secure boot chain. This
    means that all components involved in the system code execution are signed by
    Apple and thus comprise a chain of trust, including the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这里值得提到的第一件事是安全启动链。这意味着，所有参与系统代码执行的组件都由 Apple 签名，因此构成了一个信任链，包括以下内容：
- en: '**Boot ROM**: The first code that is being executed once the device is turned
    on. Located in the read-only memory, it verifies the next stage, either the **iBoot**
    bootloader (on newer processors) or the **Low-Level Bootloader** (**LLB**). A
    failure at this stage results in the device entering **Device Firmware Upgrade**
    (**DFU**) mode.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**引导 ROM**：设备开启后执行的第一段代码。它位于只读存储器中，验证下一个阶段，可能是 **iBoot** 引导加载程序（在较新的处理器上）或
    **低级引导加载程序**（**LLB**）。此阶段失败会导致设备进入 **设备固件升级**（**DFU**）模式。'
- en: '**LLB**: Available on older devices shipped with A9 and older A-series CPUs,
    it is eventually responsible for verifying and loading the iBoot.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LLB**：适用于配备 A9 和较旧 A 系列 CPU 的旧设备，最终负责验证和加载 iBoot。'
- en: '**iBoot**: Once finished, it verifies the OS kernel before allowing it to be
    loaded. A failure at either the iBoot or LLB stage results in the device entering
    recovery mode.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**iBoot**：完成后，它会验证操作系统内核，然后才允许其加载。如果 iBoot 或 LLB 阶段失败，设备将进入恢复模式。'
- en: '**iOS kernel**: After the initialization, a mechanism called **Kernel Integrity
    Protection** (**KIP**) is enabled. The idea behind it is to keep the kernel and
    driver code in a protected memory region that is not accessible for write operations
    once the booting completes.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**iOS 内核**：初始化后，会启用一个叫做 **内核完整性保护**（**KIP**）的机制。其理念是将内核和驱动程序代码保存在一个受保护的内存区域中，启动完成后，该区域不能进行写操作。'
- en: In both recovery and DFU modes, the device can be updated or restored to a valid
    state of the OS. The difference between them is that the recovery mode works mainly
    through iBoot, which is essentially a part of the operating system, so it can
    be updated or modified if necessary. In contrast, the DFU is part of the **Read-Only
    Memory** (**ROM**) and cannot be tampered with.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在恢复模式和 DFU 模式下，设备都可以更新或恢复到操作系统的有效状态。它们的区别在于，恢复模式主要通过 iBoot 工作，而 iBoot 本质上是操作系统的一部分，因此在必要时可以更新或修改。相比之下，DFU
    是 **只读存储器**（**ROM**）的一部分，无法被篡改。
- en: When available, the secure enclave coprocessor is responsible for cryptographic
    operations that confirm the integrity and overall data protection. It runs a dedicated
    updatable Secure Enclave OS that is also verified by the Secure Enclave boot ROM.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当可用时，安全协处理器负责进行加密操作，以确认完整性和整体数据保护。它运行一个专门的可更新的安全协处理器操作系统，并且该操作系统也通过安全协处理器引导
    ROM 进行验证。
- en: As we can see, the startup process ensures that only Apple-signed code can be
    installed and executed, which serves as protection against bootkits and similar
    threats. Apart from this, Apple strongly opposes downgrading software to older,
    less secure versions (either by a user or by an attacker), so it introduces a
    mechanism called **system software authorization** that prevents its installation.
    All system updates can be installed either through iTunes, when a full image of
    the OS is being downloaded and installed, or through an **Over-The-Air** (**OTA**)
    mechanism, where only components related to updates are used.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，启动过程确保只有Apple签名的代码才能被安装和执行，这可以防止启动劫持和类似的威胁。除此之外，Apple强烈反对将软件降级到较旧、较不安全的版本（无论是由用户还是攻击者操作），因此它引入了一种名为**系统软件授权**的机制，防止其安装。所有的系统更新可以通过iTunes进行安装，当操作系统的完整镜像被下载并安装时，或者通过**空中下载**（**OTA**）机制，只使用与更新相关的组件。
- en: Data encryption and password management
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据加密和密码管理
- en: 'In terms of encryption, Apple introduced several important features to make
    it both extremely robust and highly productive. Each iOS device has its **Unique
    ID** (**UID**) and **Group ID** (**GID**) to be used in cryptographic operations,
    where the UID is unique to the device and the GID is shared across all processors
    of the same type. These values are fused or compiled into the Secure Enclave and
    CPU during manufacturing; each device gets its own values that are not accessible
    directly by either software, firmware, or through debugging interfaces (such as
    JTAG). Cryptographic keys are generated inside the Secure Enclave utilizing a
    true **Hardware Random Number Generator** (**HRNG**), which are generally more
    secure than **Pseudo-Random Number Generators** (**PRNGs**). In addition, a dedicated
    technology called **Effaceable Storage** is responsible for securely erasing saved
    keys once they are no longer needed. File encryption is implemented based on the
    technology called Data Protection. It generates a new 256-bit AES key for each
    file created on the device. On newer devices, AES-XTS encryption mode is used,
    while older devices feature AES-CBC mode. This per-file key is then wrapped (encrypted)
    with the corresponding class key, which varies for different types of data and
    is handled differently according to it. Here are the classes supported at the
    moment:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在加密方面，Apple引入了几个重要特性，使其既极为强大又高效。每个iOS设备都有其**唯一ID**（**UID**）和**组ID**（**GID**），用于加密操作，其中UID是设备特有的，而GID在相同类型的所有处理器之间共享。这些值在制造过程中被融合或编译到安全隔离区（Secure
    Enclave）和CPU中；每个设备都有自己独特的值，这些值不能被软件、固件直接访问，也无法通过调试接口（如JTAG）访问。加密密钥是在安全隔离区内部通过真正的**硬件随机数生成器**（**HRNG**）生成的，通常比**伪随机数生成器**（**PRNGs**）更加安全。此外，还有一种专门的技术叫做**可擦除存储**，它负责在密钥不再需要时安全地删除它们。文件加密基于一种名为数据保护（Data
    Protection）的技术实现。它为设备上创建的每个文件生成一个新的256位AES密钥。在较新的设备上，使用AES-XTS加密模式，而较旧的设备则使用AES-CBC模式。然后，这个每个文件的密钥会被相应的类密钥加密（包装），不同类型的数据使用不同的类密钥，并根据不同的类型进行不同的处理。以下是目前支持的类别：
- en: '**Class A – complete protection**: Class keys are wrapped using both a UID
    and passcode; decrypted keys are discarded after the device is locked.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Class A – 完全保护**：类密钥同时使用UID和密码进行包装；解密后的密钥在设备锁定后会被丢弃。'
- en: '**Class B – protected unless open**: Class keys are used together with elliptic
    curve cryptography to handle files that should be written when the device is locked.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Class B – 除非已打开，否则受保护**：类密钥与椭圆曲线加密一起使用，用于处理在设备锁定时应当写入的文件。'
- en: '**Class C – protected until first user authentication**: The default class
    for all third-party app data. It’s pretty much the same as Class A, but the main
    difference is that the decrypted class keys are not wiped once the device is locked.
    This provides protection against attacks that utilize a reboot.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Class C – 直到首次用户身份验证前受保护**：这是所有第三方应用数据的默认类别。它与Class A基本相同，但主要的区别在于，解密后的类密钥在设备锁定后不会被清除。这为防止利用重启攻击提供了保护。'
- en: '**Class D – no protection**: Class keys are encrypted using only the UID. They
    are stored in Effaceable Storage and can be quickly wiped if necessary.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Class D – 无保护**：类密钥仅使用UID加密。它们存储在可擦除存储中，必要时可以快速擦除。'
- en: Finally, the wrapped key is stored in the file’s metadata, which is encrypted
    using the filesystem key. While the class keys are encrypted/wrapped using UID
    and some of them with the passcode, the filesystem key is wrapped using the effaceable
    key stored in the Effaceable Storage. Once the effaceable key is deleted (for
    example, using a remote wipe or the **Erase All Content and Settings** options),
    it makes the content of all files inaccessible by any means.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，封装的密钥存储在文件的元数据中，并使用文件系统密钥进行加密。虽然类密钥使用UID进行加密/封装，并且有些还使用密码，文件系统密钥则使用存储在可抹除存储中的可抹除密钥进行封装。一旦可抹除密钥被删除（例如，通过远程擦除或使用**抹掉所有内容和设置**选项），它将使所有文件的内容无法通过任何方式访问。
- en: When the user sets a passcode, Data Protection becomes enabled automatically.
    As it is connected to the device’s UID (which we now know is not accessible),
    it is impossible to brute-force passcodes without the device being physically
    present. There are several other mechanisms implemented to complicate brute-forcing,
    for example, a large count of iterations to slow it down, time delays, or automatic
    data wiping after entering several consecutive invalid values. Other authentication
    mechanisms, such as TouchID and FaceID, work closely with this technology.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户设置密码时，数据保护会自动启用。由于它与设备的UID（我们现在知道它不可访问）相连接，因此没有设备的物理存在，无法通过暴力破解密码。还实现了几种其他机制来使暴力破解变得更加复杂，例如，使用大量迭代来减慢速度、时间延迟，或者在连续输入多个无效值后自动擦除数据。其他身份验证机制，如TouchID和FaceID，与这项技术紧密合作。
- en: 'All sensitive data that belongs to apps can be stored in the iOS keychain,
    which is an SQLite database where values are encrypted using the AES-256-GCM algorithm.
    This keychain also introduces its own classes to handle different types of data.
    This way, developers can prevent access to certain data under particular circumstances,
    for example, when the device is locked. Keychain items can be shared by several
    apps, but only when they come from the same developer. Finally, all class keys
    for file protection and keychain are administrated using **keybags**. There are
    several types of them used at the moment in iOS:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 所有属于应用程序的敏感数据可以存储在iOS钥匙串中，这是一个SQLite数据库，数据使用AES-256-GCM算法加密。该钥匙串还引入了自己的类来处理不同类型的数据。这样，开发者可以在特定情况下防止访问某些数据，例如，当设备处于锁定状态时。钥匙串项可以由多个应用程序共享，但只有当它们来自同一开发者时才可以。最后，所有文件保护和钥匙串的类密钥都通过**钥匙包**进行管理。目前，iOS中使用了几种类型的钥匙包：
- en: '**User keybag**: This stores wrapped class keys involved in the normal device
    operation.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户钥匙包**：它存储与设备正常操作相关的加密类密钥。'
- en: '**Device keybag**: This stores wrapped class keys associated with device-specific
    data operations.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设备钥匙包**：它存储与设备特定数据操作相关的加密类密钥。'
- en: '**Backup keybag**: This is used when the encrypted backup is created using
    iTunes.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**备份钥匙包**：当使用iTunes创建加密备份时，会使用此钥匙包。'
- en: '**iCloud backup**: Similar to the backup keybag, it is used for iCloud backups.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**iCloud备份**：类似于备份钥匙包，它用于iCloud备份。'
- en: '**Escrow keybag**: This is used for iTunes syncing and **Mobile Device Management**
    (**MDM**).'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**托管钥匙包**：它用于iTunes同步和**移动设备管理**（**MDM**）。'
- en: Saved user passwords are kept in the dedicated storage, called the **Password
    AutoFill** keychain. In addition, the iCloud keychain mechanism is responsible
    for synchronizing credentials across multiple devices. Together, these technologies
    provide functionality to generate strong passwords, fill in credentials on the
    websites and apps of your choosing, and securely share them.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 保存的用户密码保存在专用的存储空间中，称为**密码自动填充**钥匙串。此外，iCloud钥匙串机制负责在多个设备之间同步凭证。这些技术共同提供了生成强密码、在你选择的网站和应用上填写凭证以及安全共享凭证的功能。
- en: It is impossible for apps to access credentials without explicit user consent.
    In addition, you may need approval from the application or website developer.
    This approach makes unsolicited data access much more difficult.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序在没有明确用户同意的情况下无法访问凭证。此外，你可能需要获得应用程序或网站开发者的批准。这种方式使得未经请求的数据访问变得更加困难。
- en: App security
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用程序安全
- en: iOS requires all code running on the device to be signed using a valid Apple-issued
    certificate, to ensure its integrity and that it comes from a trusted source.
    Unlike macOS, this rule is enforced, and the sideloading of apps outside the App
    Store is not supported for purposes other than app development. A notable exception
    to this rule is code signed with **Enterprise Program** certificates, which mainly
    aim to allow the distribution of proprietary software for internal use or intra-organization
    beta testing. Later, we will see how this technology can be misused by malware.
    Usually, this is done using MDM; in this case, a special enterprise-provisioning
    profile is created on the device.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: iOS 要求设备上运行的所有代码必须使用有效的苹果签发证书进行签名，以确保其完整性，并且来自受信任的源。与 macOS 不同，这项规则是强制执行的，除非是为了应用开发，否则不支持从
    App Store 之外的方式侧加载应用。这个规则的一个显著例外是使用**企业计划**证书签名的代码，主要是为了允许分发用于内部使用或组织内 beta 测试的专有软件。稍后我们将看到恶意软件如何滥用这项技术。通常，这通过
    MDM 实现；在这种情况下，会在设备上创建一个特殊的企业配置文件。
- en: Once the developer joins the Apple developer program, their identity needs to
    be verified before the certificate can be issued. Since 2015, there is also an
    option for developers to sign their code for free, but it has multiple limitations,
    such as a short expiration date, lack of access to certain features for apps,
    and a small number of devices on which the app can be executed. In addition, all
    app code must be verified by Apple to confirm that it is free of obvious bugs
    and doesn’t pose a risk to users. While it frameworks can be loaded inside the
    apps, the system validates the signatures of all loaded libraries at launch time
    using team identifiers.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦开发者加入苹果开发者计划，他们的身份需要验证后才能颁发证书。从 2015 年起，开发者也可以免费签署代码，但这有多项限制，例如较短的到期日期、应用无法访问某些功能、以及应用只能在少数设备上运行。此外，所有应用代码必须经过苹果验证，确认其没有明显的
    bug，且不会对用户造成风险。尽管框架可以加载到应用中，系统会在启动时使用团队标识符验证所有加载的库的签名。
- en: It may be quite difficult for the attacker to obtain a full valid certificate,
    but even in the case of success, Apple has an option to promptly revoke the compromised
    entry and thus protect the majority of devices.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可能很难获得有效的完整证书，但即使成功，苹果也有选项及时撤销被破坏的条目，从而保护大多数设备。
- en: All apps are sandboxed, so they can only access the resources necessary to perform
    their function. They run under the non-privileged mobile user and there are no
    APIs that allow self-privilege escalation. Each app has its own directory to store
    files and can’t gather or alter information associated with other applications
    – only apps that belong to the same App Group and come from the same developer
    can access a limited set of shared items.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 所有应用都处于沙盒环境中，因此它们只能访问执行其功能所必需的资源。它们以非特权的移动用户身份运行，并且没有允许自我提权的 API。每个应用都有自己的目录来存储文件，不能收集或更改与其他应用相关的信息——只有属于同一应用组并且来自同一开发者的应用才能访问一组有限的共享项。
- en: 'The following directories are commonly used by sandboxed apps:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下目录通常被沙盒应用使用：
- en: '`<app_name>.app`: The app’s bundle, available for read-only operations.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<app_name>.app`：应用的捆绑包，可供只读操作使用。'
- en: '`Documents/`: This location is supposed to be used to store user-generated
    content.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Documents/`：此位置用于存储用户生成的内容。'
- en: '`Library/`: This can be used to store any non-user files. Some of the most
    commonly used subdirectories here are `Application Support` and `Caches`.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Library/`：可以用来存储任何非用户文件。这里最常用的子目录包括 `Application Support` 和 `Caches`。'
- en: '`tmp/`: This is used to store temporary files that don’t persist between app
    launches.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tmp/`：用于存储在应用启动之间不会持久保存的临时文件。'
- en: The exact location at which apps are installed varies among the different versions
    of iOS.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 应用的安装位置在不同版本的 iOS 中有所不同。
- en: There are dedicated APIs that can be used to allow safe interaction between
    apps. In addition, the apps’ extensions (signed executables shipped with the app)
    can be used for inter-process communications as well; in this case, each extension
    has its own address space. All this makes it very difficult for attackers to access
    or tamper with sensitive information, or to affect the system.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 有专门的 API 可供使用，允许应用之间安全互动。此外，应用的扩展（与应用一起发布的签名可执行文件）也可以用于进程间通信；在这种情况下，每个扩展都有自己的地址空间。这一切使得攻击者非常难以访问或篡改敏感信息，或影响系统。
- en: The way that third-party apps can access sensitive data is controlled by mechanisms
    called **entitlements**. These are digitally signed credentials, associated with
    apps, for handling privileged operations. Beyond this, features such as **Address
    Space Layout Randomization** (**ASLR**), ARM’s **Execute Never** (**XN**), and
    stack canaries are used to provide protection against exploits that leverage memory-corruption
    vulnerabilities. Finally, the entire partition that stores the operating system
    is mounted as read-only to prevent tampering.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方应用访问敏感数据的方式是通过名为 **授权** 的机制进行控制的。这些是与应用关联的数字签名凭证，用于处理特权操作。除此之外，像 **地址空间布局随机化**
    (**ASLR**)、ARM 的 **永不执行** (**XN**) 和栈金丝雀等功能也被用来防止利用内存破坏漏洞的攻击。最后，存储操作系统的整个分区以只读方式挂载，以防止篡改。
- en: One last thing worth mentioning is the Apple **FairPlay** DRM protection, which
    may also be used to apply encryption to the app once it is downloaded so that
    the encrypted block can be decrypted only on the approved device that is requesting
    it. It may complicate the life of reverse-engineers doing a static analysis of
    the sample, as the decrypted version needs to be obtained first, so this is worth
    keeping in mind.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一件值得提及的事，就是 Apple **FairPlay** DRM 保护，它也可能用于在应用下载后对应用进行加密，以便加密的部分只能在请求它的批准设备上解密。这可能会给进行静态分析的逆向工程师带来一些困难，因为需要先获得解密版本，因此这一点值得记住。
- en: Now, it is time to dive deeper into the various file formats widely used in
    Apple operating systems to manage executables.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候深入研究 Apple 操作系统中广泛使用的各种文件格式，以管理可执行文件。
- en: File formats and APIs
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件格式和 API
- en: Knowing about file formats and their structure is important for static analysis,
    as it becomes possible to know exactly where to search for particular artifacts
    of interest. In terms of dynamic analysis, knowledge about the structure is particularly
    useful, as this way, we know how to run the sample properly and the order in which
    the code is going to be executed, so we won’t miss an important part of the functionality.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 了解文件格式及其结构对于静态分析至关重要，因为它可以让我们准确知道在哪里搜索特定的兴趣点。就动态分析而言，了解结构特别有用，因为这样我们就知道如何正确运行样本，以及代码将执行的顺序，这样就不会遗漏功能的关键部分。
- en: Mach-O
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mach-O
- en: 'This format is the main executable format on macOS and iOS operating systems.
    It has pretty much the same role as PE on Windows or ELF on Linux-based systems.
    It is also used to store object code, shared libraries, and core dumps. There
    are two types of these files: **thin** and **fat**.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这种格式是 macOS 和 iOS 操作系统上的主要可执行格式。它与 Windows 上的 PE 格式或基于 Linux 的系统上的 ELF 格式具有相同的作用。它也用于存储目标代码、共享库和核心转储。这些文件有两种类型：**薄**和**胖**。
- en: Thin
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 薄
- en: 'This is the most common type of Mach-O file. It is composed of the following
    parts:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最常见的 Mach-O 文件类型。它由以下部分组成：
- en: '**A header**: Contains general information about the file. Here is its structure
    according to the official source code:'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标题**：包含关于文件的一般信息。以下是根据官方源代码的结构：'
- en: '[PRE0]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The difference between 32-bit and 64-bit versions of this header lies mainly
    in the extra reserved field added to the end of this structure, and the slightly
    different magic values used: `0xfeedface` for 32-bit and `0xfeedfacf` for 64-bit.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 32 位和 64 位版本的这个标题之间的区别主要在于结构末尾添加的额外保留字段，以及使用的略有不同的魔法值：`0xfeedface` 用于 32 位，`0xfeedfacf`
    用于 64 位。
- en: '**Load commands**: These can perform multiple actions, most importantly defining
    the segments present in the file, where each block contains information about
    a particular segment and the corresponding sections, including offsets and sizes.
    This data can be used to load the executable correctly in memory. Here is the
    structure of the command describing a segment:'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加载命令**：这些命令可以执行多个操作，最重要的是定义文件中存在的段，其中每个块包含有关特定段和相应部分的信息，包括偏移量和大小。此数据可用于正确加载可执行文件到内存中。以下是描述段的命令结构：'
- en: '[PRE1]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The same fields are used within 32-bit and 64-bit architectures (`LC_SEGMENT`
    and `LC_SEGMENT_64` commands, respectively) – the difference will only be the
    sizes of the fields.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在 32 位和 64 位架构中使用相同的字段（分别为 `LC_SEGMENT` 和 `LC_SEGMENT_64` 命令）——不同之处仅在于字段的大小。
- en: 'It is followed by a set of structures that describe the sections:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是一组描述各个部分的结构：
- en: '[PRE2]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In terms of malware analysis, another load command that might be of interest
    to an analyst is `LC_LOAD_DYLIB`, which is responsible for loading additional
    libraries.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 就恶意软件分析而言，另一个可能对分析人员有兴趣的加载命令是 `LC_LOAD_DYLIB`，它负责加载额外的库。
- en: '`__DATA` or `__text`, respectively. Here are some of the most important segments
    and sections in terms of malware analysis that can be found in the majority of
    Mach-O files:'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__DATA` 或 `__text`，分别如下。以下是恶意软件分析中最重要的一些段和部分，它们可以在大多数 Mach-O 文件中找到：'
- en: '`TEXT`: This segment is read-only, as it contains executable code and constant
    data:'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TEXT`：此段是只读的，因为它包含可执行代码和常量数据：'
- en: '`text`: Contains actual compiled machine code'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text`：包含实际编译后的机器代码'
- en: '`const`: Generic constant data used by the executable'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`const`：可执行文件使用的通用常量数据'
- en: '`cstring`: Stores string constants'
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cstring`：存储字符串常量'
- en: '`DATA`: This contains non-constant data, so it is available for both read and
    write operations:'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DATA`：包含非常量数据，因此可进行读写操作：'
- en: '`data`: Used to store initialized global variables'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`：用于存储已初始化的全局变量'
- en: '`common`: Stores uninitialized external global variables'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`common`：存储未初始化的外部全局变量'
- en: '`bss`: Keeps uninitialized static variables'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bss`：保存未初始化的静态变量'
- en: '`const`: Contains constant data available for relocation'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`const`：包含可重新定位的常量数据'
- en: The files that implement this format contain machine code associated with one
    platform only. At the moment, it is ARM for iOS and x86-64 or ARM for macOS; older
    versions of macOS were based on PowerPC and later, IA-32 architectures.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 实现该格式的文件仅包含与某一平台相关的机器代码。目前，iOS 使用的是 ARM 架构，macOS 使用的是 x86-64 或 ARM 架构；旧版本的 macOS
    基于 PowerPC 和稍后的 IA-32 架构。
- en: 'The format has undergone a few changes with the introduction of Mac OS X 10.6,
    which made newer executables incompatible with older versions of the OS. These
    changes included the following:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 该格式随着 Mac OS X 10.6 的推出发生了一些变化，这使得较新的可执行文件与旧版本的操作系统不兼容。这些变化包括以下内容：
- en: Different load commands
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的加载命令
- en: A new format for the link-edit table data used by a dynamic linker (the `__LINKEDIT`
    segment)
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于动态链接器的链接编辑表数据的新格式（`__LINKEDIT` 段）
- en: Fat
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Fat
- en: 'Fat binaries (also known as multi-architecture binaries or universal binaries)
    are quite unique, as they are used to store code for several different architectures.
    The format includes a custom fat header, followed by a set of Mach-O files:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Fat 二进制文件（也称为多架构二进制文件或通用二进制文件）非常独特，因为它们用于存储多个不同架构的代码。该格式包括一个自定义的 fat 头部，后跟一组
    Mach-O 文件：
- en: '![Figure 12.4 – A fat Mach-O executable ﬁle'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.4 – 一个 fat Mach-O 可执行文件'
- en: '](img/Figure_12.4_B18500.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_12.4_B18500.jpg)'
- en: Figure 12.4 – A fat Mach-O executable ﬁle
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.4 – 一个 fat Mach-O 可执行文件
- en: 'Here is the header structure:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这是头部结构：
- en: '[PRE3]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The magic value, in this case, is `0xcafebabe`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 魔术值在本例中是 `0xcafebabe`。
- en: 'This header is followed by several `fat_arch` structures, whose amount is equal
    to the value specified by the `nfat_arch` field:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这个头部后面跟着多个 `fat_arch` 结构，其数量等于 `nfat_arch` 字段指定的值：
- en: '[PRE4]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: All these structures can be found in the officially published Apple source code.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些结构都可以在官方发布的 Apple 源代码中找到。
- en: '![Figure 12.5 – IDA conﬁrming which thin Mach-O ﬁle in the fat binary should
    be analyzed'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.5 – IDA 确认应分析的 fat 二进制中的哪个薄 Mach-O 文件'
- en: '](img/Figure_12.5_B18500.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_12.5_B18500.jpg)'
- en: Figure 12.5 – IDA conﬁrming which thin Mach-O ﬁle in the fat binary should be
    analyzed
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.5 – IDA 确认应分析的 fat 二进制中的哪个薄 Mach-O 文件
- en: Usually, it makes sense to stick to the architecture that the engineer is most
    comfortable working with.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 通常来说，选择工程师最熟悉的架构进行工作是比较明智的。
- en: Application bundles (.app)
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序包（.app）
- en: 'Bundles are directories that store everything that the app needs in order to
    successfully perform its operations. It allows related files to be grouped together
    and distributed as a single entity. In the case of both macOS and iOS systems,
    they generally include the following:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 包含的文件夹是存储应用程序成功执行所需的所有内容的目录。它允许将相关文件组合在一起，并作为一个整体分发。在 macOS 和 iOS 系统中，它们通常包括以下内容：
- en: '**An executable**: Contains the code that defines the logic behind an application
    with the main entry point.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可执行文件**：包含定义应用程序逻辑的代码，并具有主要的入口点。'
- en: '**Resources**: All data files located outside the executable, such as images,
    sounds, or configuration files.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源**：位于可执行文件之外的所有数据文件，如图像、声音或配置文件。'
- en: '**Additional support files**: Examples include various templates, plugins,
    and frameworks.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**附加支持文件**：例如各种模板、插件和框架。'
- en: '**Info.plist**: This is an obligatory information property list that contains
    configuration information required by the system.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Info.plist**：这是一个强制性的配置信息列表，包含系统所需的配置信息。'
- en: The most common extension associated with application bundles here is `.app`.
    The file hierarchy is slightly different for iOS and macOS; for the former, all
    required files are located in the root folder, while for the latter, they are
    located in the dedicated `Contents` folder, with the code located in the `MacOS`
    subdirectory and resources in the `Resources` subdirectory inside it. Other common
    standard subdirectories used are `PlugIns`, `Frameworks`, and `SharedSupport`.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 与应用程序包相关的最常见扩展名是 `.app`。iOS 和 macOS 的文件层次结构略有不同；对于前者，所有所需的文件都位于根文件夹中，而对于后者，它们位于专用的
    `Contents` 文件夹中，代码位于其中的 `MacOS` 子目录，而资源则位于 `Resources` 子目录中。其他常见的标准子目录包括 `PlugIns`、`Frameworks`
    和 `SharedSupport`。
- en: Info.plist
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Info.plist
- en: As has already been mentioned, `Info.plist` provides important app-related metadata
    to the system at runtime. The required values are slightly different for macOS
    and iOS; let’s go through the most important of them.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`Info.plist` 在运行时向系统提供了重要的应用程序相关元数据。macOS 和 iOS 的要求值略有不同；让我们逐一了解其中最重要的部分。
- en: macOS
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: macOS
- en: 'Here is a list of important values with a brief explanation for each:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个重要值的列表，并附上每个值的简要解释：
- en: '`CFBundleName`: The short name of the bundle'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CFBundleName`: 程序包的短名称'
- en: '`CFBundleDisplayName`: The localized name of the app'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CFBundleDisplayName`: 应用程序的本地化名称'
- en: '`CFBundleIdentifier`: A string that identifies an app in the system in reverse
    `com.example.hello`)'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CFBundleIdentifier`: 一个字符串，用于反向标识系统中的应用程序 `com.example.hello`'
- en: '`CFBundleVersion`: The build version number of the bundle'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CFBundleVersion`: 程序包的构建版本号'
- en: '`CFBundlePackageType`: Always `APPL` for applications'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CFBundlePackageType`: 对于应用程序始终为 `APPL`'
- en: '`CFBundleSignature`: The short code for the bundle'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CFBundleSignature`: 程序包的短代码'
- en: '`CFBundleExecutable`: Probably the most important field for malware analysis,
    as it defines the name of the main executable file'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CFBundleExecutable`: 可能是恶意软件分析中最重要的字段，因为它定义了主可执行文件的名称'
- en: iOS
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: iOS
- en: 'Now, let’s take a look at the fields for iOS apps:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下 iOS 应用程序的字段：
- en: '`CFBundleDisplayName`: The localized name of the app, displayed underneath
    the application icon.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CFBundleDisplayName`: 应用程序的本地化名称，显示在应用程序图标下方。'
- en: '`CFBundleIdentifier`: The string that identifies an app in the system in reverse
    DNS format, which is the same as in macOS.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CFBundleIdentifier`: 以反向 DNS 格式标识系统中应用程序的字符串，和 macOS 中的相同。'
- en: '`CFBundleVersion`: The build version number of the bundle.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CFBundleVersion`: 程序包的构建版本号。'
- en: '`CFBundleIconFiles`: This stores an array with the filenames of the icons used.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CFBundleIconFiles`: 存储一个数组，其中包含使用的图标的文件名。'
- en: '`LSRequiresIPhoneOS`: A Boolean value indicating whether the bundle should
    run only on iOS; it is automatically set to `True` by the Xcode IDE.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LSRequiresIPhoneOS`: 一个布尔值，指示程序包是否仅应在 iOS 上运行；它由 Xcode IDE 自动设置为 `True`。'
- en: '`UIRequiredDeviceCapabilities`: Defines device-related features required for
    the app to run.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UIRequiredDeviceCapabilities`: 定义应用程序运行所需的设备相关功能。'
- en: '`CFBundleExecutable`: The name of the main executable. It is generally expected
    to be the same as the application name without the `.app` extension.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CFBundleExecutable`: 主可执行文件的名称。通常，它应该与应用程序的名称相同，且不带 `.app` 扩展名。'
- en: '![Figure 12.6 – A CFBundleExecutable field in the Info.plist file of an AceDeceiver
    threat'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.6 – AceDeceiver 威胁的 Info.plist 文件中的 CFBundleExecutable 字段'
- en: '](img/Figure_12.6_B18500.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_12.6_B18500.jpg)'
- en: Figure 12.6 – A CFBundleExecutable field in the Info.plist file of an AceDeceiver
    threat
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.6 – AceDeceiver 威胁的 Info.plist 文件中的 CFBundleExecutable 字段
- en: 'Besides XML and JSON, `.plist` files can also be encoded using the binary format.
    In this case, they will look as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 XML 和 JSON 格式，`.plist` 文件还可以使用二进制格式进行编码。在这种情况下，它们将如下所示：
- en: '![Figure 12.7 – A binary-encoded .plist file of the ZergHelper threat'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.7 – ZergHelper 威胁的二进制编码 .plist 文件'
- en: '](img/Figure_12.7_B18500.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_12.7_B18500.jpg)'
- en: Figure 12.7 – A binary-encoded .plist file of the ZergHelper threat
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.7 – ZergHelper 威胁的二进制编码 .plist 文件
- en: 'The standard `file` tool will display the following message for such files:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的 `file` 工具将显示如下信息：
- en: '[PRE5]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To convert them to a human-readable format, use the standard `plutil` tool:
    `plutil -convert xml1 Info.plist`.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 要将其转换为人类可读的格式，可以使用标准的 `plutil` 工具：`plutil -convert xml1 Info.plist`。
- en: Installer packages (.pkg)
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装程序包 (.pkg)
- en: 'These files commonly have the `.pkg` file extension and are used to group and
    store related files together, preserving the file hierarchy. Then, they can be
    extracted and installed using the installer application on macOS. Internally,
    they implement `xar` tool:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件通常以 `.pkg` 文件扩展名结尾，用于将相关文件组合和存储在一起，保持文件层次结构。然后，您可以使用 macOS 上的安装程序应用程序提取并安装它们。内部实现使用了
    `xar` 工具：
- en: '![Figure 12.8 – The content of the .pkg file listed using the xar tool'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.8 – 使用 xar 工具列出的 .pkg 文件内容](img/Figure_12.8_B18500.jpg)'
- en: '](img/Figure_12.8_B18500.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_12.8_B18500.jpg)'
- en: Figure 12.8 – The content of the .pkg file listed using the xar tool
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.8 – 使用 xar 工具列出的 .pkg 文件内容
- en: Important note
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It is not recommended to use 7-Zip for extraction in this case, as it doesn’t
    see all the files present in the archive compared to the `xar` tool, which may
    lead to some artifacts that are important from the analysis perspective being
    overlooked. *Figure 12.9* is an example of the incomplete data visible when using
    7-Zip.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，不建议使用 7-Zip 来进行解压，因为与 `xar` 工具相比，7-Zip 无法识别归档中所有文件，这可能会导致一些从分析角度重要的文件被忽视。*图
    12.9* 是使用 7-Zip 时，未显示完整数据的示例。
- en: '![Figure 12.9 – 7-Zip only displaying a subset of the files present in the
    archive compared to the xar tool'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.9 – 与 xar 工具相比，7-Zip 仅显示归档中部分文件](img/Figure_12.9_B18500.jpg)'
- en: '](img/Figure_12.9_B18500.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_12.9_B18500.jpg)'
- en: Figure 12.9 – 7-Zip only displaying a subset of the files present in the archive
    compared to the `xar` tool
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.9 – 与 `xar` 工具相比，7-Zip 仅显示归档中部分文件
- en: Aside from looking for Mach-O executables in the `Payload` directory, also check
    the `PackageInfo` file, as it may point to scripts that will be executed during
    the installation, commonly located in the `Scripts` archive. Another place to
    check is the `Distribution` file if present, as it may contain executable JavaScript
    code.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在 `Payload` 目录中查找 Mach-O 可执行文件外，还应检查 `PackageInfo` 文件，因为它可能指向在安装过程中执行的脚本，通常位于
    `Scripts` 归档中。另一个需要检查的地方是 `Distribution` 文件（如果存在），它可能包含可执行的 JavaScript 代码。
- en: Apple disk images (.dmg)
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 苹果磁盘映像文件（.dmg）
- en: This is another common way to distribute applications for macOS; the corresponding
    disk image files generally have the `.dmg` file extension. They can be used as
    a mountable disk or volume for storing files of various types. The native format
    used for this nowadays is the `koly` value at its start. In order to get access
    to the files inside, the disk image can be mounted or converted using standard
    tools bundled with Apple operating systems, such as the **hdiutil** console. On
    other operating systems, it is possible to use tools such as **dmg2img** to convert
    these files into a non-proprietary disk image format and then mount them as usual.
    Alternatively, they can be unpacked using tools such as 7-Zip.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一种常见的 macOS 应用分发方式；相应的磁盘映像文件通常以 `.dmg` 文件扩展名结尾。它们可以作为可挂载的磁盘或卷，用于存储各种类型的文件。现在使用的原生格式是文件开头的
    `koly` 值。为了访问其中的文件，可以使用标准工具挂载或转换磁盘映像，Apple 操作系统自带的 **hdiutil** 控制台工具就可以做到这一点。在其他操作系统上，也可以使用如
    **dmg2img** 等工具将这些文件转换为非专有的磁盘映像格式，然后像平常一样挂载它们。或者，可以使用像 7-Zip 这样的工具将其解包。
- en: iOS app store packages (.ipa)
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: iOS 应用商店包（.ipa）
- en: '`.ipa`. All `.ipa` files should contain the `Payload` directory with the `.app`
    bundle directory inside, which may also contain various metadata for iTunes and
    the App Store. In terms of implementation, the ZIP format is used here, which
    means that these files can be unpacked using any standard tools able to handle
    ZIP files.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`.ipa` 文件。所有 `.ipa` 文件应包含 `Payload` 目录，目录内有 `.app` 包文件，可能还包含用于 iTunes 和应用商店的各种元数据。在实现上，这里使用了
    ZIP 格式，这意味着这些文件可以通过任何能够处理 ZIP 文件的标准工具解压。'
- en: Now that we are familiar with the most common file types used in Apple systems,
    let’s explore their APIs.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经熟悉了苹果系统中最常见的文件类型，让我们探索它们的 APIs。
- en: APIs
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: APIs
- en: 'Apple provides a rich set of APIs to developers that aim to let them perform
    any task in a robust and secure way. The `NS` prefix commonly used in names stands
    for NeXTSTEP – the platform that they were originally designed for. The `CF` prefix
    is an abbreviation of the **Core Foundation** framework, which is a C API for
    macOS and iOS. The reason they co-exist and sometimes provide similar functionalities
    is mainly historical, as this is the result of merging the Classic Mac OS toolbox
    and OPENSTEP specification. There is even a special term for using the corresponding
    logic interchangeably: toll-free bridging.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果为开发者提供了一套丰富的API，旨在让他们以健壮且安全的方式执行各种任务。`NS`前缀通常用于名称中，代表NeXTSTEP——最初为其设计的平台。`CF`前缀是**Core
    Foundation**框架的缩写，这是一个用于macOS和iOS的C语言API。它们共存并有时提供相似的功能，主要是历史原因，源于经典Mac OS工具箱和OPENSTEP规范的合并。实际上，有一个专门的术语来描述它们的相互替代使用：免税桥接（toll-free
    bridging）。
- en: 'Here are some examples of classes commonly misused by malware:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些常被恶意软件滥用的类的示例：
- en: '`NSFileHandle` and `NSFileManager`.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSFileHandle` 和 `NSFileManager`。'
- en: Low-level functionality can also be implemented using classes from the `InputStream`
    and its counterpart, `CFReadStream`. Another option is the `NSWorkspace` class
    from `NSString` methods; for example, `stringWithContentsOfFile`.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 低级功能也可以通过`InputStream`及其对应类`CFReadStream`来实现。另一种选择是使用`NSString`方法中的`NSWorkspace`类；例如，`stringWithContentsOfFile`。
- en: '`NSTask` class. The `NSWorkspace` class, among others, can also be used to
    iterate through running apps (for example, to search for antivirus solutions)
    and launch new ones. It is also possible to use the `Process` class from the **Streams,
    Sockets, and Port** group of the Foundation framework.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSTask`类。`NSWorkspace`类等也可以用来遍历正在运行的应用程序（例如，搜索防病毒解决方案）并启动新的应用程序。也可以使用来自**Streams,
    Sockets, and Port**组的`Process`类。'
- en: '`NSURLSession`.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSURLSession`。'
- en: '`NSHost` or `NSSocketPort`.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSHost`或`NSSocketPort`。'
- en: '`CFNetwork`: This framework can be utilized to work with network artifacts
    as well. Some examples of the corresponding classes are `CFHTTP` and `CFFTP`.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CFNetwork`：此框架也可以用于处理网络相关的内容。对应的类有`CFHTTP`和`CFFTP`等。'
- en: '`CFSocket`: This class from the Core Foundation framework can also be used,
    which represents a communication channel implemented with a BSD socket.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CFSocket`：来自Core Foundation框架的这个类也可以使用，它表示通过BSD套接字实现的通信通道。'
- en: '`NSString`: This method can be used to access networking functionality as well,
    for example, `stringWithContentsOfURL`.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSString`：此方法也可以用于访问网络功能，例如，`stringWithContentsOfURL`。'
- en: 'In disassembly, things will look a little bit different. Particularly, the
    `objc_msgSend` function will appear quite often, as it is used by the compiler
    to interact with instances of classes by sending messages and receiving the results.
    In order to figure out the actual functionality, we need to map selector arguments
    to the corresponding human-readable values, a job generally done by disassemblers
    and decompilers. Here is how it may be presented in the debugger:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在反汇编中，情况会稍微有所不同。特别是，`objc_msgSend`函数会频繁出现，因为编译器通过它与类实例进行交互，发送消息并接收结果。为了弄清楚实际的功能，我们需要将选择器的参数映射到对应的可读值，这通常由反汇编器和反编译器完成。以下是调试器中可能的表现形式：
- en: '![Figure 12.10 – An example of XcodeGhost’s disassembly in IDA preparing a
    web request'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.10 – XcodeGhost在IDA中反汇编的示例，正在准备一个网页请求'
- en: '](img/Figure_12.10_B18500.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_12.10_B18500.jpg)'
- en: Figure 12.10 – An example of XcodeGhost’s disassembly in IDA preparing a web
    request
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.10 – XcodeGhost在IDA中反汇编的示例，正在准备一个网页请求
- en: We have already learned enough about how malware samples may look, so now let’s
    explore what their most common functions would be.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了恶意软件样本可能的外观，现在让我们来探讨一下它们最常见的功能。
- en: Attack stages
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 攻击阶段
- en: Regardless of the targeted architecture, generally, malware has to go through
    the same stages in order to achieve its goals; however, the implementation can
    be quite different. Let’s go through the most important of them.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 无论目标架构如何，通常，恶意软件必须经历相同的阶段才能实现其目标；然而，具体的实现方式可能会有很大不同。让我们逐一了解最重要的阶段。
- en: Jailbreaks on demand
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按需越狱
- en: 'To begin, let’s talk about jailbreaks in greater detail. Jailbreaking generally
    applies to iOS mobile devices and involves obtaining elevated privileges in order
    to remove certain software restrictions. There are multiple reasons why users
    may want to do this to their devices:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们更详细地讨论一下越狱。越狱通常适用于iOS移动设备，涉及获得更高权限以移除某些软件限制。用户可能希望对设备进行越狱的原因有很多：
- en: '**Getting access to extra functionality**: In this case, a user becomes able
    to tweak the operating system appearance or get access to unsupported features.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**获得额外功能**：在这种情况下，用户能够调整操作系统外观或访问不支持的功能。'
- en: '**Unlocking carrier-locked phones**: This may help unlock devices so that they
    can be used with other mobile carriers.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解锁运营商锁定的手机**：这有助于解锁设备，以便可以使用其他移动运营商的服务。'
- en: '**Installing unapproved or pirated software**: Here, examples include older
    versions of software, custom input systems (popular in China), or generic App
    Store software from other markets without paying for it.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装未批准或盗版软件**：这里的例子包括旧版本的软件、定制输入法（在中国很流行）或来自其他市场的通用应用商店软件，但未支付费用。'
- en: While the terms jailbreaking and rooting are often used interchangeably, jailbreaking
    is actually a broader term, as it also involves unlocking the bootloader in order
    to modify the operating system, for example, to allow easy app sideloading (that
    is, the installation of unsigned apps or apps distributed outside the App Store).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管“越狱”和“root”这两个术语通常可以互换使用，但越狱实际上是一个更广泛的术语，因为它还涉及解锁引导加载程序，从而修改操作系统，例如，允许轻松安装侧载应用（即安装未签名的应用或分发到应用商店外的应用）。
- en: 'There are several common types of jailbreaks for iOS, based on the way the
    kernel is patched:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 针对iOS的越狱有几种常见类型，基于内核打补丁的方式：
- en: '**Untethered**: The jailbreak is applied after simply rebooting the device,
    without any need to use a PC during the booting process.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**脱离式**：越狱在设备重启后应用，无需在启动过程中使用PC。'
- en: '**Tethered**: A PC is required to turn on the mobile device each time it is
    rebooted – otherwise, the device becomes dysfunctional.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**脱离式**：每次重启设备时都需要PC来启动该设备，否则设备将无法工作。'
- en: '**Semi-tethered**: The PC is required to run the modified code during the boot,
    but it can still boot on its own, providing limited access to some basic functionality.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**半脱离式**：需要PC在启动过程中运行修改后的代码，但设备仍能自行启动，提供对一些基本功能的有限访问。'
- en: '**Semi-untethered**: This requires the kernel to be patched every time the
    device is rebooted. In this case, it can be accomplished without a PC, with the
    help of a dedicated app installed on the device.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**半脱离式**：这种方式要求每次重启设备时都必须打补丁。此时，可以通过安装在设备上的专用应用，无需PC的帮助来完成。'
- en: Older jailbreaking tools, such as `sshd` files in the filesystem.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 较旧的越狱工具，例如文件系统中的`sshd`文件。
- en: As we can see, generally, there is no obvious solution for generic malware to
    silently apply a jailbreak when running either on the device itself or the connected
    PC without interaction with a legitimate user. Thus, many malware families prefer
    to either target already-jailbroken devices or rely on other techniques in order
    to achieve their goals.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，通常没有明显的解决方案可以让普通恶意软件在运行时通过设备本身或连接的PC静默地应用越狱，而无需与合法用户进行交互。因此，许多恶意软件家族更倾向于选择针对已经越狱的设备，或者依赖其他技术来实现他们的目标。
- en: Initial access
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始访问
- en: As we know now, the application-related policies are quite different for macOS
    and iOS. If macOS still makes it possible for users to install programs outside
    the App Store, lower their security settings to allow unsigned applications, and
    create programs that don’t incorporate App Sandbox, all this is not possible on
    iOS without jailbreaking the device. Thus, the common penetration vectors differ
    for these operating systems.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们现在所知道的，macOS和iOS在应用程序相关政策上有很大的不同。如果macOS仍然允许用户安装应用商店外的程序，降低安全设置以允许未签名的应用程序，并创建不包含应用沙盒的程序，那么在iOS上，如果不越狱设备，这一切都无法实现。因此，这些操作系统的常见渗透向量是不同的。
- en: As the App Store infrastructure is quite well-protected against malicious apps,
    especially because of the obligatory signing of quite expensive certificates that
    can be promptly revoked, therefore deactivating the corresponding threat on the
    vast majority of devices, mass malware authors rarely follow this path. Still,
    there are some exceptions to this rule, for example, when malware authors get
    access to stolen certificates or inject malicious functionality into legitimate
    software. An example of this could be an **XcodeGhost** threat that managed to
    get access to developers’ machines via a compromised Xcode IDE downloaded from
    a third-party website and injected malicious logic into legitimate iOS apps. Another
    approach was chosen by the authors of **XcodeSpy** and **XCSSET** threats, which
    embedded into distributed Xcode projects and executed payloads when the developer
    would build them.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 由于App Store的基础设施对恶意应用有着相当好的保护，尤其是因为必须签署那些相对昂贵的证书，这些证书可以被迅速撤销，从而在绝大多数设备上禁用相应的威胁，因此，大多数恶意软件作者很少选择这条路径。尽管如此，仍然有一些例外，比如当恶意软件作者获取到被盗的证书或将恶意功能注入合法软件时。例如，**XcodeGhost**
    就是一个成功通过第三方网站下载的被感染Xcode IDE获取开发者机器访问权限，并将恶意代码注入到合法iOS应用中的威胁。**XcodeSpy** 和 **XCSSET**
    的作者则采取了不同的方法，他们将恶意软件嵌入到分发的Xcode项目中，并在开发者构建这些项目时执行有效载荷。
- en: 'A creative way to bypass the revocation of malicious apps was used by the authors
    of **AceDeceiver**, who managed to upload their app to the App Store by checking
    the physical location and presenting benign functionality to users located outside
    of China. The attackers managed to intercept the authorization token used by the
    Apple FairPlay DRM technology, which is unique to each app but the same for all
    devices. Eventually, this token allowed the attackers to perform FairPlay MITM
    attacks – when a client running on the connected PC can use it to install an app
    to non-jailbroken iOS devices, even after the actual app was removed from the
    App Store. Another app that managed to bypass the Apple review was **ZergHelper**.
    In order to install apps on non-jailbroken devices, it implemented a part of the
    Xcode functionality responsible for automatically obtaining free developer certificates.
    Originally intended to be used to sign apps that can run only on the personal
    developer’s device, in this case, they were used to sign unwanted apps on the
    fly, before installing them on the victim’s device associated with the requested
    certificate:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '**AceDeceiver** 的作者使用了一种创造性的方法绕过恶意应用的撤销，他们通过检查物理位置并向位于中国以外的用户展示无害功能，成功将应用上传到App
    Store。攻击者成功拦截了Apple FairPlay DRM技术所使用的授权令牌，该令牌对于每个应用都是唯一的，但对于所有设备都是相同的。最终，这个令牌使得攻击者能够执行FairPlay
    MITM攻击——当连接的PC上的客户端可以利用它将应用安装到非越狱的iOS设备上，即使实际应用已经从App Store下架。另一个绕过Apple审核的应用是**ZergHelper**。为了在非越狱设备上安装应用，它实现了Xcode功能的一部分，负责自动获取免费的开发者证书。这个功能本来是用来签署只能在个人开发者设备上运行的应用程序的，但在这里它被用来在安装不受欢迎的应用之前动态签署这些应用，以便它们能安装到与请求的证书关联的受害者设备上：'
- en: '![Figure 12.11 – ZergHelper dynamically obtaining developer certificates'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.11 – ZergHelper 动态获取开发者证书'
- en: '](img/Figure_12.11_B18500.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_12.11_B18500.jpg)'
- en: Figure 12.11 – ZergHelper dynamically obtaining developer certificates
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.11 – ZergHelper 动态获取开发者证书
- en: One more notable example is **WireLurker**, distributed via Chinese app stores
    where it trojanized hundreds of apps. In this case, even if the device wasn’t
    jailbroken, it was possible to collect some basic information about the system
    and install unwanted apps signed with Enterprise Program certificates.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个显著的例子是**WireLurker**，它通过中国的应用商店传播，并将数百个应用程序感染成特洛伊木马。在这种情况下，即使设备没有越狱，也有可能收集到一些关于系统的基本信息，并安装签署了企业计划证书的不受欢迎的应用程序。
- en: Overall, many iOS threats primarily target jailbroken devices to be able to
    get access to sensitive information or required system features – on modern systems,
    there is no easy way to elevate privileges from the device itself, so users commonly
    jailbreak their own devices by manually signing jailbreaking apps using their
    own certificates and allowing them access to the device settings. Cydia repositories
    are among the most common places where malware authors host their brainchildren.
    A notable exception to this rule was the **Pegasus** malware, which leveraged
    a zero-day exploit that targeted the Safari browser, so it was enough for users
    to click on the phishing link in order to get infected.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，许多 iOS 威胁主要针对越狱设备，以便访问敏感信息或所需的系统功能——在现代系统中，从设备本身提升权限并不容易，因此用户通常通过手动签名越狱应用并允许它们访问设备设置，来越狱自己的设备。Cydia
    仓库是恶意软件作者托管其创作物的最常见地方之一。一个显著的例外是 **Pegasus** 恶意软件，它利用了一个针对 Safari 浏览器的零日漏洞，因此用户只需点击钓鱼链接就会感染。
- en: For macOS, attackers these days mainly focus on simpler options, such as hosting
    malicious apps on third-party websites, application stores, or torrent networks
    and relying on social engineering techniques to trick users into installing them.
    In the case of the **KeRanger** threat, a legitimate website was compromised and
    the corresponding software was trojanized. The use of exploits that target browsers
    is quite rare nowadays. In addition, just as with Windows users, it is possible
    to get infected by opening a Microsoft Office document that contains a malicious
    macro and allowing it to be executed. In some cases, malware authors may still
    prefer to propagate through the App Store using stolen certificates to bypass
    Gatekeeper. This particularly applies to malware families that don’t care whether
    they are detected and deleted in a day or two, as their aim is to affect as many
    users as possible in a very short time. A good example is ransomware, whose job
    is done as long as it manages to encrypt a victim’s files and then deliver instructions
    on how to pay a ransom.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 macOS，当前攻击者主要专注于更简单的方式，例如在第三方网站、应用商店或种子网络上托管恶意应用程序，并利用社会工程学技巧欺骗用户安装它们。在 **KeRanger**
    威胁的案例中，一个合法网站被攻陷，相应的软件被植入了木马程序。如今，利用浏览器漏洞的攻击相当罕见。此外，就像 Windows 用户一样，用户也可能通过打开包含恶意宏的
    Microsoft Office 文档并允许其执行而感染。某些情况下，恶意软件作者仍可能更倾向于通过 App Store 传播，使用被盗的证书绕过 Gatekeeper。特别是对于那些不在乎自己是否在一两天内被发现并删除的恶意软件家族，因为它们的目标是尽可能快速地影响尽可能多的用户。一个很好的例子是勒索软件，只要它成功加密了受害者的文件并提供了支付赎金的说明，它的工作就算完成了。
- en: Execution and persistence
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行和持久性
- en: Once the first-stage malware enters the targeted machine, it generally needs
    to settle down, deliver, and configure additional modules (commonly by downloading
    or extracting them from its body), and then make sure it will survive the system
    reboot. That’s what execution and persistence stages are mainly about.The deployment
    mechanisms vary for macOS and iOS systems. Let’s take a look at each of them in
    greater detail.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦第一阶段的恶意软件进入目标机器，它通常需要稳定下来，交付并配置额外的模块（通常通过下载或从其自身提取），然后确保在系统重启后仍能存活。这就是执行和持久性阶段的主要内容。macOS
    和 iOS 系统的部署机制各不相同。让我们更详细地看看它们。
- en: macOS
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: macOS
- en: 'There are multiple places where malware can hide from the user on the macOS
    system. Here are some of the most common locations:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 系统上，有多个地方可以让恶意软件从用户视野中隐藏。以下是一些最常见的位置：
- en: '`/tmp`: One of the most popular locations to put intermediate files, as malware
    can be sure it will have write access there with pretty much any standard privileges.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/tmp`：这是存放临时文件的最常用位置之一，因为恶意软件几乎可以确保在任何标准权限下都可以写入此位置。'
- en: '`~/Library` and `/Library`: Another location misused by malware aiming to look
    benign and hide among legitimate apps. The `Application Support` subdirectory
    is commonly used here as well.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`~/Library` 和 `/Library`：这是恶意软件常常被滥用的另一个位置，旨在看起来无害并隐藏在合法应用程序中。`Application
    Support` 子目录也常常用于这里。'
- en: '`~/Library/Safari/Extensions`: This location is generally used to install unwanted
    browser extensions for Safari.'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`~/Library/Safari/Extensions`：此位置通常用于为 Safari 安装不需要的浏览器扩展。'
- en: '`~/Library/Application Support/Google/Chrome/Default/Extensions`: Here, unwanted
    browser extensions are installed for Chrome.'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`~/Library/Application Support/Google/Chrome/Default/Extensions`：此位置用于为 Chrome
    安装不需要的浏览器扩展。'
- en: 'Persistence is commonly achieved by adding the corresponding `.plist` file
    to one of the following locations:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 通常通过将相应的 `.plist` 文件添加到以下位置来实现持久性：
- en: '`/Library/LaunchDaemons`: System-wide daemons provided by the administrator,
    which can start without a user being logged in.'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/Library/LaunchDaemons`：由管理员提供的系统范围守护程序，可以在用户未登录时启动。'
- en: '![Figure 12.12 – Malware establishing persistence by copying its .plist file
    to /Library/LaunchDaemons/'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.12 – 恶意软件通过复制其 .plist 文件到 /Library/LaunchDaemons/'
- en: '](img/Figure_12.12_B18500.jpg)'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_12.12_B18500.jpg)'
- en: Figure 12.12 – Malware establishing persistence by copying its .plist file to
    /Library/LaunchDaemons/
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.12 – 恶意软件通过复制其 .plist 文件到 /Library/LaunchDaemons/
- en: '`/Library/LaunchAgents`: Per-user agents provided by the administrator that
    are invoked when the user logs in.'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/Library/LaunchAgents`：由管理员提供的逐用户代理，在用户登录时调用。'
- en: '`~/Library/LaunchAgents`: Per-user agents provided by the user that are invoked
    when the user logs in.'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`~/Library/LaunchAgents`：用户提供的逐用户代理，在用户登录时调用。'
- en: '`/System/Library/LaunchDaemons` and `/System/Library/LaunchAgents`: Per-user
    agents provided by the OS that are invoked when the user logs in. Here is an example
    of it being used by malware:'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/System/Library/LaunchDaemons` 和 `/System/Library/LaunchAgents`：由操作系统提供的逐用户代理，在用户登录时调用。这是恶意软件使用的一个例子：'
- en: '![Figure 12.13 – The WireLurker threat using the /System/Library/LaunchDaemons
    path'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.13 – WireLurker威胁使用 /System/Library/LaunchDaemons 路径'
- en: '](img/Figure_12.13_B18500.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_12.13_B18500.jpg)'
- en: Figure 12.13 – The WireLurker threat using the /System/Library/LaunchDaemons
    path
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.13 – WireLurker威胁使用 /System/Library/LaunchDaemons 路径
- en: Persistence can be also achieved by various other means such as using the `cron`
    tool or performing `dylib`) is placed in a path that a legitimate victim application
    searches for and loads at runtime.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 持久性也可以通过各种其他方式实现，例如使用`cron`工具或执行`dylib`）放置在合法受害者应用程序在运行时搜索和加载的路径中。
- en: Now, let’s take a quick look at how things are organized in iOS.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们快速看看iOS中的组织方式。
- en: iOS
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: iOS
- en: For non-jailbroken devices, malware often hides in trojanized legitimate software
    packages (clean software with inserted malicious code). For the end user, the
    app looks and behaves as expected, while simultaneously performing malicious actions
    in the background.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 对于未越狱的设备，恶意软件经常隐藏在木马化的合法软件包中（带有插入的恶意代码的干净软件）。对于最终用户来说，该应用程序看起来和行为都如预期，同时在后台执行恶意操作。
- en: For jailbroken devices, malware has access to multiple locations throughout
    the system, so in this case, the choice depends mainly on the preferences of the
    attackers.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 对于越狱设备，恶意软件可以访问系统中的多个位置，因此在这种情况下，选择主要取决于攻击者的偏好。
- en: As with macOS, persistence can be achieved by placing a `.plist` file in one
    of the `.../Library/LaunchDaemons` directories.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 与macOS类似，可以通过将 `.plist` 文件放置在 `.../Library/LaunchDaemons` 目录之一来实现持久性。
- en: Impact
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 影响
- en: Now, let’s talk about the actual negative effects that malware may cause. In
    many cases, the motivation behind the attack can be the same whether it occurs
    on a mobile device or a PC. Nowadays, both provide access to a large amount of
    sensitive information and have enough computational power to perform actions that
    malware authors may be interested in.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们谈谈恶意软件可能造成的实际负面影响。在许多情况下，攻击背后的动机可能是相同的，无论它是在移动设备还是PC上发生。如今，两者都可以访问大量敏感信息，并具有足够的计算能力来执行恶意软件作者可能感兴趣的操作。
- en: macOS
  id: totrans-280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: macOS
- en: 'To begin, most of the malware types affecting Mac users strongly resemble the
    threats targeting Windows users – the difference is mainly in the scope and implementation.
    Thus, macOS Terminal actually uses Unix shells, so malware can create shell scripts
    and utilize the various commands that we discussed in the previous [*Chapter 11*](B18500_11.xhtml#_idTextAnchor1188),
    *Dissecting Linux and IoT Malware*. Here are some of the other commands that are
    commonly misused on Mac computers:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，影响大多数影响Mac用户的恶意软件类型与影响Windows用户的威胁非常相似 – 主要区别在于范围和实现。因此，macOS Terminal实际上使用Unix
    shell，因此恶意软件可以创建shell脚本并利用我们在之前 [*Chapter 11*](B18500_11.xhtml#_idTextAnchor1188)
    讨论的各种命令。以下是在Mac计算机上常被滥用的一些其他命令：
- en: '`curl`: As with Linux, this tool can be used to interact with the C&C.'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`curl`：与Linux一样，此工具可用于与C＆C进行交互。'
- en: '`killall`: This allows you to kill particular processes by their names.'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`killall`：这允许您通过它们的名称杀死特定进程。'
- en: '`openssl`: This can be used to decode next-stage payloads.'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`openssl`：这可用于解码下一个阶段的载荷。'
- en: '`funzip`: This standard tool allows attackers to easily chain decompression
    with other commands supporting both ZIP and GZIP formats.'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`funzip`：此标准工具允许攻击者轻松地将解压缩与其他支持 ZIP 和 GZIP 格式的命令链在一起。'
- en: '`sqlite3`: Commonly used to parse the history of downloaded files.'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlite3`：常用于解析已下载文件的历史记录。'
- en: '`pfctl`: This allows attackers to communicate with the `iptables` on Linux.'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pfctl`：允许攻击者与 Linux 上的 `iptables` 通信。'
- en: '`launchctl`: A command-line tool for interacting with services. For example,
    as we can see in *Figure 12.6*, malware may attempt to load another payload executing
    `launchctl load` functionality.'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`launchctl`：一个与服务交互的命令行工具。例如，正如我们在*图 12.6*中看到的，恶意软件可能会尝试加载另一个有效载荷，执行`launchctl
    load`功能。'
- en: '`pbcopy` and `pbpaste`: This allows the attackers to copy-paste the content
    of the clipboard.'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pbcopy` 和 `pbpaste`：允许攻击者复制和粘贴剪贴板的内容。'
- en: '`chflags`: This tool can be used to change a file’s or folder’s flag, for example,
    to hide or unhide it.'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chflags`：此工具可用于更改文件或文件夹的标志，例如，用于隐藏或取消隐藏文件。'
- en: '`mdfind`: An alternative to the classic `find` tool that allows the attackers
    to search for files indexed by Spotlight.'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mdfind`：这是经典 `find` 工具的替代工具，允许攻击者搜索 Spotlight 索引的文件。'
- en: '`defaults`: This can be used to read and modify system preferences, such as
    configuration profiles to control the browser’s behavior. For example, the following
    entries can be used to change the start pages:'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`defaults`：此命令可用于读取和修改系统偏好设置，例如配置文件，以控制浏览器行为。例如，以下条目可以用来更改启动页面：'
- en: '`HomePage` (Safari)'
  id: totrans-293
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HomePage`（Safari）'
- en: '`HomepageLocation` (Chrome)'
  id: totrans-294
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HomepageLocation`（Chrome）'
- en: '`NewTabPageLocation` (Chrome)'
  id: totrans-295
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NewTabPageLocation`（Chrome）'
- en: '`RestoreOnStartupURLs` (Chrome)'
  id: totrans-296
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RestoreOnStartupURLs`（Chrome）'
- en: 'Meanwhile, the following entries can be used to set a custom search engine:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，以下条目可以用来设置自定义搜索引擎：
- en: '`NSPreferredWebServices` | `NSWebServicesProviderWebSearch` (Safari)'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSPreferredWebServices` | `NSWebServicesProviderWebSearch`（Safari）'
- en: '`DefaultSearchProviderSearchURL` (Chrome)'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DefaultSearchProviderSearchURL`（Chrome）'
- en: '`DefaultSearchProviderNewTabURL` (Chrome)'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DefaultSearchProviderNewTabURL`（Chrome）'
- en: '`DefaultSearchProviderName` (Chrome)'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DefaultSearchProviderName`（Chrome）'
- en: In addition, unlike many Linux distributions, modern macOS is shipped with Python,
    so malware can rely on its presence as well.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，与许多 Linux 发行版不同，现代 macOS 默认安装了 Python，因此恶意软件也可以依赖其存在。
- en: '![Figure 12.14 – Python code used by the CookieMiner malware'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.14 – CookieMiner 恶意软件使用的 Python 代码'
- en: '](img/Figure_12.14_B18500.jpg)'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_12.14_B18500.jpg)'
- en: Figure 12.14 – Python code used by the CookieMiner malware
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.14 – CookieMiner 恶意软件使用的 Python 代码
- en: 'Now, let’s go through some of the recent examples of malware categories commonly
    targeting Mac users:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看一些近期针对 Mac 用户的恶意软件分类常见示例：
- en: '**Infostealers**: Generally, there is a lot of sensitive information stored
    on PCs that attackers might be interested in, especially financial information.
    A good example in this case is the **CookieMiner** family, which steals browser
    credentials and cookies to get access to cryptocurrency wallets. In addition,
    it accesses iTunes backups to access private text messages, as well as saved credentials
    and credit card details. Another example is **MaMi**, which installs an additional
    root CA certificate and incorporates DNS hijacking to intercept victims’ traffic
    by performing a MITM attack.'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信息窃取者**：通常，PC 上存储着大量攻击者可能感兴趣的敏感信息，尤其是财务信息。一个很好的例子是**CookieMiner**家族，它窃取浏览器凭证和
    Cookie 以获取加密货币钱包的访问权限。此外，它还访问 iTunes 备份，获取私人短信，以及保存的凭证和信用卡信息。另一个例子是**MaMi**，它安装了一个额外的根
    CA 证书，并通过 DNS 劫持进行中间人攻击（MITM），从而拦截受害者的流量。'
- en: '![Figure 12.15 – MaMi malware installing a custom root certificate'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.15 – MaMi 恶意软件安装自定义根证书'
- en: '](img/Figure_12.15_B18500.jpg)'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_12.15_B18500.jpg)'
- en: Figure 12.15 – MaMi malware installing a custom root certificate
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.15 – MaMi 恶意软件安装自定义根证书
- en: '**Cryptocurrency miners**: As with any other platform, this type of malware
    utilizes the infected system’s resources to mine cryptocurrencies for attackers.
    Examples of such tools are **mshelper** and the aforementioned **CookieMiner**.'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加密货币矿工**：与其他平台一样，这类恶意软件利用感染系统的资源为攻击者挖掘加密货币。此类工具的示例有**mshelper**和前文提到的**CookieMiner**。'
- en: '**Adware and Potentially Unwanted Programs** (**PUPs**): There are multiple
    types of programs that don’t perform a truly malicious activity, but still create
    problems for users. For example, **Shlayer** (also known as **Crossrider**) and
    **Bundlore**, commonly distributed as cracks, keygens, or Flash Player installers,
    use shell scripts to deliver various undesirable programs. One of the programs
    discovered is **Advanced Mac Cleaner**, which is unique, as it utilizes Siri’s
    voice to notify users about bogus problems with their machine. Some threats change
    the homepages or search engines in browsers (such as **Smart Search** or **WeKnow**);
    in many cases, configuration profiles and browser extensions are used for this
    purpose. PUPs can have quite serious consequences if they are implemented in a
    particular way. One example is a **Pirrit** family, which can set up a proxy mainly
    using the PF to redirect user traffic through it, and in this way, inject ads.'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**广告软件和潜在不需要的程序**（**PUPs**）：有多种类型的程序，虽然它们不执行真正的恶意活动，但仍会给用户带来问题。例如，**Shlayer**（也称为
    **Crossrider**）和 **Bundlore**，通常以破解、密钥生成器或 Flash Player 安装程序的形式分发，使用 shell 脚本传送各种不需要的程序。发现的其中一个程序是
    **Advanced Mac Cleaner**，它具有独特性，因为它利用 Siri 的语音通知用户有关其机器的虚假问题。一些威胁会更改浏览器的首页或搜索引擎（例如
    **Smart Search** 或 **WeKnow**）；在许多情况下，配置文件和浏览器扩展程序会被用来实现这一目的。如果以特定方式实现，PUPs 可能会带来相当严重的后果。一个例子是
    **Pirrit** 家族，它可以使用 PF 设置代理，主要通过它重定向用户流量，并通过这种方式注入广告。'
- en: '**Backdoors or Remote Access Tools** (**RATs**): A classic example of a full-fledged
    backdoor is **Fruitfly**, which managed to remain undetected for several years.
    It had multiple functions, such as screenshot capturing, controlling the mouse,
    and executing arbitrary commands. Its propagation involved scanning for specific
    ports, such as **Back to My Mac** (**BTMM**, discontinued in macOS Mojave), the
    **Apple Filing Protocol** (**AFP**), formerly the **AppleTalk Filing Protocol**,
    **Apple Remote Desktop** (based on the VNC protocol), and the traditional SSH
    port, and then testing them against weak credentials. Some notorious APT actors,
    such as Lazarus, also develop tools to target Mac users. In this case, their functionality
    remains identical to the one available for Windows payloads, such as the ability
    to search for, read, write, and wipe arbitrary files, execute arbitrary commands,
    as well as carry out self-updating and deleting mechanisms.'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后门或远程访问工具**（**RATs**）：一个典型的完整后门例子是 **Fruitfly**，它成功地在多年内未被发现。它具有多种功能，例如截图、控制鼠标和执行任意命令。其传播方式涉及扫描特定端口，如
    **Back to My Mac**（**BTMM**，在 macOS Mojave 中已停用）、**Apple Filing Protocol**（**AFP**，前身为
    **AppleTalk Filing Protocol**）、**Apple Remote Desktop**（基于 VNC 协议）以及传统的 SSH 端口，然后通过弱密码进行测试。某些臭名昭著的
    APT 组织，如 Lazarus，也开发了针对 Mac 用户的工具。在这种情况下，它们的功能与 Windows 平台上的有效负载相同，例如能够搜索、读取、写入和擦除任意文件、执行任意命令，以及执行自我更新和删除机制。'
- en: '**Downloaders**: Microsoft Office for macOS re-enabled support for macros back
    in 2011, and after this, it became possible to target Mac users with bogus documents
    that also contained malicious macros. In most cases, these macros are used to
    download and deploy other, more powerful modules. While many attackers nowadays
    execute PowerShell commands from macros on the Windows platform, for macOS, the
    Python language is generally used for this purpose.'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**下载器**：微软为 macOS 重新启用了宏支持，从 2011 年起，之后，伪造文档可以针对 Mac 用户，且这些文档内含恶意宏。大多数情况下，这些宏被用来下载并部署其他更强大的模块。虽然如今很多攻击者在
    Windows 平台上通过宏执行 PowerShell 命令，但在 macOS 上，通常使用 Python 语言来实现这一功能。'
- en: '**Ransomware**: macOS users are not immune to ransomware either. A classic
    example is **KeRanger**, which encrypts victims’ files and then leaves instructions
    on paying money in order to get them back.'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**勒索软件**：macOS 用户同样不免受勒索软件的威胁。一个经典的例子是 **KeRanger**，它会加密受害者的文件，并留下支付赎金以恢复文件的说明。'
- en: '![Figure 12.16 – The KeRanger malware preparing a ransom-related note'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.16 – KeRanger 恶意软件准备一份与赎金相关的说明'
- en: '](img/Figure_12.16_B18500.jpg)'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_12.16_B18500.jpg)'
- en: Figure 12.16 – The KeRanger malware preparing a ransom-related note
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.16 – KeRanger 恶意软件准备一份与赎金相关的说明
- en: The KeRanger threat was signed with a valid certificate to bypass Gatekeeper
    and used a C&C located in the Tor network. A more creative way to do this was
    used by the `<a href=”mailto:...”` and `<a href=”itunes:...”` attributes.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: KeRanger 威胁通过有效证书签名，以绕过 Gatekeeper，并使用位于 Tor 网络中的 C&C。一个更具创意的方式是使用 `<a href="mailto:..."`
    和 `<a href="itunes:..."` 属性。
- en: A more recent example of ransomware malware is **EvilQuest**.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 最近的一个勒索软件例子是**EvilQuest**。
- en: iOS
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: iOS
- en: 'It’s worth mentioning that the number of threats successfully targeting iOS
    devices is significantly lower than on macOS, thanks to the strong security architecture
    enforced on it. Over the last few years, there were very few big incidents involving
    malware for this platform. Here are some of the most notorious ones:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，成功攻击 iOS 设备的威胁数量显著低于 macOS，因为 iOS 强大的安全架构得到了严格执行。在过去的几年里，涉及这一平台的重大恶意软件事件非常少。以下是一些最臭名昭著的案例：
- en: '**Droppers or installers**: Examples of such threats include **YiSpecter**
    and **WireLurker**, which were able to target both jailbroken and non-jailbroken
    devices, as the samples were signed with enterprise certificates. Here, private
    APIs were misused in order to install arbitrary apps. Another example is **AceDeceiver**,
    which abused Apple FairPlay DRM tokens, instead of using enterprise certificates
    in order to install unwanted apps on the victims’ devices.'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**掉落器或安装程序**：此类威胁的例子包括**YiSpecter**和**WireLurker**，它们能够同时针对越狱和未越狱的设备，因为这些样本是用企业证书签名的。在这里，私人
    API 被滥用来安装任意应用程序。另一个例子是**AceDeceiver**，它滥用 Apple FairPlay DRM 令牌，而不是使用企业证书，在受害者的设备上安装不需要的应用程序。'
- en: '**Backdoors or RATs**: This category of malware is commonly used by surveillance
    agencies and governments to target particular individuals. Over the past few years,
    there were multiple reports that mentioned them, including the following:'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后门或远程控制木马**（RATs）：这一类恶意软件通常被监控机构和政府用于针对特定个人。在过去的几年中，出现了多起提到这些恶意软件的报告，包括以下内容：'
- en: '**FinFisher**: Developed by Gamma Group, which sells surveillance tools to
    governments, this allows access to various types of data on a victim’s jailbroken
    device, such as communications, including messages, calls, and emails, as well
    as contacts, arbitrary files, geolocation data, and the ability to eavesdrop on
    live calls.'
  id: totrans-325
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FinFisher**：由 Gamma Group 开发，该公司向政府销售监控工具，能够访问受害者越狱设备上的各种数据，如通讯（包括消息、电话和电子邮件）、联系人、任意文件、地理位置数据以及窃听实时通话的能力。'
- en: '**Remote Control System** (**RCS**): A surveillance tool developed by HackingTeam
    that requires the targeted device to be jailbroken. The platform functionality
    includes the recording of video and audio communications and accessing the camera
    and GPS data.'
  id: totrans-326
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远程控制系统**（**RCS**）：由 HackingTeam 开发的监控工具，要求目标设备必须越狱。该平台的功能包括录制视频和音频通信，以及访问相机和
    GPS 数据。'
- en: '**Inception** (also known as **Cloud Atlas**): Malware involved in this espionage
    campaign targeted multiple platforms, including implants for jailbroken iOS devices.'
  id: totrans-327
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**起源**（也称为**云图**）：此间谍活动中涉及的恶意软件针对多个平台，包括针对越狱 iOS 设备的植入。'
- en: '**XAgent**: This tool is supposed to provide rich functionality, including
    the retrieval of messages and pictures, contacts lists, and geolocation information,
    as well as the ability to control a microphone to record audio.'
  id: totrans-328
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XAgent**：此工具提供丰富的功能，包括获取消息和图片、联系人列表、地理位置数据，并能够控制麦克风进行音频录制。'
- en: '**Pegasus**: This was developed by the NSO group. Apart from the usual data
    collection, this threat also collects users’ credentials and can perform audio
    and video recording. A distinctive feature of this threat was the ability to silently
    jailbreak devices using a set of exploits that all leveraged zero-day vulnerabilities
    at the time of its discovery.'
  id: totrans-329
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pegasus**：由 NSO Group 开发，除了常规的数据收集外，该威胁还收集用户凭证，并能够进行音频和视频录制。此威胁的一个独特特点是，能够利用一组利用零日漏洞的漏洞，悄无声息地越狱设备。'
- en: '**Infostealers**: One of the examples where stolen credentials immediately
    led to a financial loss for the users was the **AppBuyer** threat, which was hooking
    network APIs to get access to victims’ Apple IDs and passwords and using them
    to buy apps. Another example threat that targeted jailbroken devices and incorporated
    a similar hooking mechanism is **KeyRaider**, only in this case, it was used to
    steal credentials, certificates, and private keys.'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信息窃取工具**：其中一个例子是**AppBuyer**威胁，它通过挂钩网络 API 获取受害者的 Apple ID 和密码，并用其购买应用程序，导致用户立即遭受财务损失。另一个类似的威胁是**KeyRaider**，它也针对越狱设备，采用了相似的挂钩机制，只不过在这种情况下，它被用来窃取凭证、证书和私钥。'
- en: '**Adware fee stealers**: Here, malware generates revenue for the attackers
    by simulating or hijacking user views or clicks on advertisements. An example
    of such a threat is **AdThief**, built on top of Cydia Substrate, which targeted
    jailbroken devices in order to redirect advertisement revenues to its authors.'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**广告软件费用窃取**：在这种情况下，恶意软件通过模拟或劫持用户点击或查看广告来为攻击者创造收入。此类威胁的一个例子是**AdThief**，它基于
    Cydia Substrate 构建，针对越狱设备，将广告收入重定向到其作者。'
- en: Other attack techniques
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他攻击技术
- en: Apart from using traditional malicious code that executes on the system, there
    are other attack vectors that can be used to access sensitive information or enable
    surveillance. While not all of them involve using malicious software as we know
    it, it is still important to be aware of them, as in many cases, they may be the
    actual reason for a system compromise. Here is a list of the most notorious examples
    for macOS and iOS.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用传统的恶意代码执行系统外，还有其他攻击途径可以访问敏感信息或启用监控。虽然并非所有攻击都涉及我们通常所知道的恶意软件，但仍然需要注意这些攻击方式，因为在许多情况下，它们可能是系统被攻破的真正原因。以下是
    macOS 和 iOS 上一些最臭名昭著的例子。
- en: macOS
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: macOS
- en: 'There are multiple types of attack that can be performed once the attacker
    gets physical access to the device. They are commonly known as **evil maid attacks**,
    based on the scenario where a hotel maid can subvert unattended devices left in
    the room. Many of them have been addressed over the last few years. Let’s have
    a look at the most common techniques:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦攻击者获得物理访问权限，就可以执行多种类型的攻击。它们通常被称为**邪恶女仆攻击**，这一名称源于酒店女仆可以篡改放在房间内无人看管的设备这一场景。许多这类攻击在过去几年中已经得到解决。让我们来看一下最常见的攻击技术：
- en: '**A DMA attack**: Attackers can access the content of the RAM that contains
    sensitive information through the **Direct Memory Access** (**DMA**) mechanism.
    An example of such a threat is **ThunderClap**, which utilizes Thunderbolt ports.'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DMA 攻击**：攻击者可以通过**直接内存访问**（**DMA**）机制访问包含敏感信息的 RAM 内容。此类威胁的一个例子是**ThunderClap**，它利用
    Thunderbolt 端口。'
- en: '**A cold boot attack**: Attackers rely on the data remanence of the RAM. The
    target machine is cold-booted (after a hard reboot), using an OS from the removable
    disk. Then, the attacker dumps the content of the pre-boot physical memory into
    a file. The firmware password aims to prevent this type of attack by requesting
    authentication before letting anybody boot from an external drive.'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**冷启动攻击**：攻击者依赖于 RAM 中的数据残留。目标机器被冷启动（硬重启后），并使用来自可移动磁盘的操作系统。接着，攻击者将预启动的物理内存内容转储到文件中。固件密码旨在通过请求身份验证来防止这种类型的攻击，只有通过验证后才允许从外部驱动器启动。'
- en: '**Direct access to a physical drive**: This approach works very well when the
    hard drive is not encrypted. The attacker may be able to boot from a removable
    drive or connect it to another machine in order to read the data from it. In the
    case that the hard drive is encrypted (by FileVault 2 for Mac computers), a possible
    way to bypass this is to replace the startup disk with a bogus one that displays
    a lock screen that has the same appearance as the normal one, steal the credentials
    entered by the user once they return, and then access the hard drive. To address
    this issue, a firmware password can be enabled. While it is still possible to
    wipe a firmware password on older devices by connecting directly to the EFI chip
    with dedicated hardware, the Secure Boot option is supposed to handle this attack
    vector.'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**直接访问物理硬盘**：这种方法在硬盘未加密的情况下效果非常好。攻击者可能会通过可移动驱动器启动或将硬盘连接到另一台机器以读取数据。如果硬盘被加密（例如
    Mac 电脑使用 FileVault 2），一种可能的绕过方法是用一个虚假的启动磁盘替换真实的启动磁盘，这个虚假磁盘显示与正常启动界面相同的锁屏，攻击者在用户返回时窃取其输入的凭证，进而访问硬盘。为了解决此问题，可以启用固件密码。虽然通过专用硬件直接连接到
    EFI 芯片，仍然可以擦除旧设备的固件密码，但**安全启动**选项应该能防止这种攻击方式。'
- en: '**A network evil maid attack**: This can be considered more of a phishing attack,
    where the whole victim’s device is replaced by an identical-looking one that sends
    firmware or lockscreen passwords to the attacker, who now owns the original device.'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络邪恶女仆攻击**：这种攻击可以看作是一种钓鱼攻击，攻击者将受害者的设备替换为一台外观相同的设备，这台设备会将固件或锁屏密码发送给攻击者，之后攻击者便拥有了原始设备。'
- en: iOS
  id: totrans-340
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: iOS
- en: 'These techniques generally require physical access to the device. Many of them
    are known under the umbrella term of **malicious charger attacks**, as they can
    be performed once the mobile device is connected (using its physical port) to
    malevolent hardware:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 这些技术通常需要对设备的物理访问。它们中的许多被统称为**恶意充电器攻击**，因为一旦移动设备通过其物理端口连接到恶意硬件，就可以执行这些攻击：
- en: '**Juice jacking**: Named after the natural need to “juice up” (as in, charge)
    devices, this classic attack relies on the USB transfer mode turning on once the
    device is connected to the attacker’s device simulating a charging socket, which
    gives attackers access to the phone’s data. To address this issue, Apple now asks
    the user to confirm whether they trust the connected device.'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Juice jacking**：这个名字源自“充电”（即为设备“注入电量”）的自然需求，这种经典攻击依赖于 USB 传输模式在设备连接到模拟充电插口的攻击者设备时启用，从而让攻击者访问手机的数据。为了解决这个问题，Apple
    现在要求用户确认是否信任连接的设备。'
- en: '**Videojacking**: In this case, the attacker exploits the fact that the Apple
    connector can be used as an HDMI connector. Once the device is connected, it becomes
    possible to monitor everything that happens on the mobile device’s screen.'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视频劫持**：在这种情况下，攻击者利用 Apple 连接器可用作 HDMI 连接器的事实。一旦设备连接，便可以监控移动设备屏幕上发生的所有操作。'
- en: '**Trustjacking**: This is a relatively new type of attack that utilizes iTunes
    Wi-Fi Sync technology. The idea here is that once the user connects their device
    to a PC or a malicious charger and confirms that they trust it, the attacker can
    silently enable iTunes Wi-Fi Sync, which allows them to control the device remotely
    once it is connected to the network. As a result, the attacker has the following
    powerful remote abilities:'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Trustjacking**：这是一种相对较新的攻击类型，利用 iTunes Wi-Fi 同步技术。其原理是，一旦用户将设备连接到 PC 或恶意充电器并确认信任该设备，攻击者就可以悄悄启用
    iTunes Wi-Fi 同步，这使得攻击者可以在设备连接到网络后远程控制该设备。因此，攻击者具有以下强大的远程控制能力：'
- en: Viewing the device’s screen by making a series of screenshots
  id: totrans-345
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过截取一系列屏幕截图查看设备屏幕
- en: Accessing a wide range of sensitive information through iTunes backup, including
    SMS/iMessage history, private photos, and app data
  id: totrans-346
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 iTunes 备份访问广泛的敏感信息，包括短信/iMessage 历史、私人照片和应用数据
- en: Installing other apps
  id: totrans-347
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装其他应用
- en: 'Here are some notable exceptions that don’t rely on physical access:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些不依赖物理访问的显著例外：
- en: '**Malicious profiles**: This attack utilizes iOS profiles, generally used by
    mobile carriers and MDM administrators to set up network settings. There are multiple
    ways the user may receive such a profile, including through social engineering
    or via replacing a legitimate profile by utilizing an MITM attack over an insecure
    connection. This allows an attacker to perform various malicious actions, such
    as installing root CA certificates and setting up a VPN or proxy, and thus intercepting
    all of the user’s traffic. To address this issue, newer iOS versions added an
    extra step for the user to manually approve the installation of a root CA certificate
    (unless it is done via MDM).'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**恶意配置文件**：这种攻击利用 iOS 配置文件，通常由移动运营商和 MDM 管理员用来设置网络配置。用户可能通过多种方式接收到这样的配置文件，包括通过社会工程学或通过替换合法配置文件，利用中间人攻击在不安全的连接上进行。这使得攻击者可以执行各种恶意操作，例如安装根证书（Root
    CA）和设置 VPN 或代理，从而拦截用户的所有流量。为了解决这个问题，更新的 iOS 版本添加了额外的步骤，要求用户手动批准根证书的安装（除非通过 MDM
    执行）。'
- en: '**Activation Lock**: This is a **Find My iPhone** feature that allows users
    to remotely lock their lost or stolen device, so it can’t be used by thieves.
    However, once the Apple ID and the corresponding passwords are stolen (for example,
    through phishing), it becomes possible for the attackers to activate it remotely
    and demand a ransom for unlocking the device. These are some of the most common
    attacks affecting macOS and iOS systems. Now, let’s talk about less common techniques.'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**激活锁**：这是一个**查找我的 iPhone**功能，允许用户远程锁定丢失或被盗的设备，从而防止窃贼使用它。然而，一旦 Apple ID 和相应的密码被窃取（例如，通过网络钓鱼），攻击者就可以远程激活它，并要求解锁设备的赎金。这些是影响
    macOS 和 iOS 系统的最常见攻击之一。现在，我们来讨论一些不太常见的技术。'
- en: Advanced techniques
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级技术
- en: Even though the number of malicious samples targeting macOS and iOS users is
    significantly lower than for other more prevalent platforms, such as Windows and
    Android, we can still distinguish between the generic and more advanced techniques
    implemented. They involve non-standard or difficult-to-implement approaches that
    usually aim to complicate the analysis and to prolong the infection.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管针对macOS和iOS用户的恶意样本数量明显低于其他更常见的平台，如Windows和Android，但我们仍然可以区分出通用的和更高级的技术实现。它们涉及非标准或难以实施的方法，通常旨在复杂化分析并延长感染时间。
- en: Anti-analysis and detection tricks
  id: totrans-353
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反分析和检测技巧
- en: 'Some malware families that target macOS and iOS incorporate universal techniques
    to complicate analysis and detections that work for most other platforms as well.
    Here are some examples:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 一些针对macOS和iOS的恶意软件家族采用通用技术来复杂化分析和检测，这些技术对大多数其他平台也有效。以下是一些例子：
- en: '**Detection of protection software**: In this case, malware checks for the
    presence of the corresponding files or processes and generally either terminates
    itself, or tries to disable them in order to remain undetected. An example is
    the **CookieMiner** family checking for the presence of the **Little Snitch**
    firewall on macOS. Classic AV checks are also possible, as you can see in the
    following figure:'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保护软件检测**：在这种情况下，恶意软件检查相应的文件或进程是否存在，通常要么终止自身，要么尝试禁用它们，以保持隐匿。例如，**CookieMiner**家族检查macOS上是否存在**Little
    Snitch**防火墙。经典的AV检测也可能出现，如下图所示：'
- en: '![Figure 12.17 – A list of antiviruses to search for in CrescentCore malware'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.17 – 查找CrescentCore恶意软件中的杀毒软件列表'
- en: '](img/Figure_12.17_B18500.jpg)'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_12.17_B18500.jpg)'
- en: Figure 12.17 – A list of antiviruses to search for in CrescentCore malware
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.17 – 查找CrescentCore恶意软件中的杀毒软件列表
- en: '**Code and data obfuscation**: The malware tries to complicate the analysis
    by making itself unreadable in disassembly.'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码和数据混淆**：恶意软件通过使自己在反汇编过程中变得不可读来复杂化分析。'
- en: '![Figure 12.18 – Custom xor-based encryption used in Pirrit malware'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.18 – Pirrit恶意软件中使用的自定义异或加密'
- en: '](img/Figure_12.18_B18500.jpg)'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_12.18_B18500.jpg)'
- en: Figure 12.18 – Custom xor-based encryption used in Pirrit malware
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.18 – Pirrit恶意软件中使用的自定义异或加密
- en: '**Checks for self-integrity**: The malware calculates checksums against its
    body in order to detect any changes taking place.'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自我完整性检查**：恶意软件计算其自身的校验和，以便检测任何变化。'
- en: '`ptrace` with the `PT_DENY_ATTACH` argument.'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ptrace` 与 `PT_DENY_ATTACH` 参数。'
- en: '**Detection of reverse-engineering tools**: One of the most common approaches
    here is the detection of attached debuggers.'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反工程工具检测**：最常见的方法之一是检测附加的调试器。'
- en: '`ioreg` and `sysctl`, returning information about the system’s hardware, as
    done by the **MacRansom** malware family.'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ioreg` 和 `sysctl`，返回有关系统硬件的信息，正如**MacRansom**恶意软件家族所做的那样。'
- en: '**Sandbox evasion**: In this case, the malware exploits some limitations of
    the sandboxing software in order to avoid exposure. The most common approach here
    would be to start a malicious activity after a certain delay to reach the sandbox’s
    timeout limit. If a sandbox is aware of this technique and skips the sleep stage,
    the malware can easily detect it by checking whether the time passed during the
    sleep stage matches its expectations.'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**沙盒逃逸**：在这种情况下，恶意软件利用沙盒软件的一些限制来避免暴露。最常见的做法是，在一定延迟后启动恶意活动，以达到沙盒的超时限制。如果沙盒意识到这一技巧并跳过睡眠阶段，恶意软件可以通过检查睡眠阶段经过的时间是否符合其预期来轻松检测到这一点。'
- en: Now, let’s talk about other techniques.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们谈谈其他技术。
- en: Misusing dynamic data exchange (DDE)
  id: totrans-369
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误使用动态数据交换（DDE）
- en: Apart from using macros in MS Office documents, there is another, less common
    way to execute code. In this case, attackers rely on the DDE functionality. One
    way to do so is to use the `DDEAUTO` statement (currently disabled by default).
    Another option recently used to spread the cross-platform **Adwind** RAT is to
    abuse the function logic implemented in Microsoft Excel. Please refer to [*Chapter
    10*](B18500_10.xhtml#_idTextAnchor1106), *Scripts and Macros – Reversing, Deobfuscation,
    and Debugging*, for more information. Attackers can always try to utilize social
    engineering tricks in order to make the user enable any required functionality.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在 MS Office 文档中使用宏外，还有一种不太常见的执行代码方式。在这种情况下，攻击者依赖于 DDE 功能。实现此功能的一种方式是使用 `DDEAUTO`
    语句（默认情况下已禁用）。另一种最近用于传播跨平台 **Adwind** RAT 的方法是滥用 Microsoft Excel 中实现的函数逻辑。更多信息请参考
    [*第 10 章*](B18500_10.xhtml#_idTextAnchor1106)，*脚本与宏 - 逆向、去混淆与调试*。攻击者总是会尝试利用社会工程学技巧来诱使用户启用所需的功能。
- en: User hiding
  id: totrans-371
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户隐藏
- en: This technique can be used to hide a newly created user from the configuration
    and login screens. The idea here is to set a `Hide500Users` property within the
    `/Library/Preferences/com.apple.loginwindow.plist` file. In this case, all users
    with a UID lower than 500 won’t be present on these screens. An example of a threat
    that uses this technique to hide an illegitimate user is Pirrit malware.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 该技术可用于从配置和登录屏幕上隐藏新创建的用户。其原理是将 `Hide500Users` 属性设置在 `/Library/Preferences/com.apple.loginwindow.plist`
    文件中。在这种情况下，所有 UID 小于 500 的用户将不会出现在这些屏幕上。使用此技术来隐藏非法用户的威胁之一是 Pirrit 恶意软件。
- en: Using AppleScript
  id: totrans-373
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 AppleScript
- en: 'AppleScript was originally developed to automate certain tasks within Apple
    systems. However, its functionality is commonly misused by various malware families
    as well. For example, the aforementioned Pirrit threat managed to use it to inject
    JavaScript payloads into browsers. To perform code injection, the `osascript`
    command-line tool can be used. Here are snippets with examples for different browsers:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: AppleScript 最初是为自动化 Apple 系统中的某些任务而开发的。然而，许多恶意软件家族常常滥用其功能。例如，前面提到的 Pirrit 威胁就利用它向浏览器注入
    JavaScript 有效载荷。为了执行代码注入，可以使用 `osascript` 命令行工具。以下是不同浏览器的示例片段：
- en: 'Safari:'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Safari:'
- en: '[PRE6]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Chrome:'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Chrome:'
- en: '[PRE7]'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Besides this, it is possible to use `osascript` for other purposes; for example,
    **CookieMiner** used it to set up environments before delivering other modules,
    as you can see in the following figure:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，还可以将 `osascript` 用于其他目的；例如，**CookieMiner** 就使用它在交付其他模块之前设置环境，如下图所示：
- en: '![Figure 12.19 – The ﬁrst-stage payload of the CookieMiner threat misusing
    the osascript functionality'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.19 – CookieMiner 威胁的第一阶段有效载荷滥用 osascript 功能'
- en: '](img/Figure_12.19_B18500.jpg)'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_12.19_B18500.jpg)'
- en: Figure 12.19 – The ﬁrst-stage payload of the CookieMiner threat misusing the
    osascript functionality
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.19 – CookieMiner 威胁的第一阶段有效载荷滥用 osascript 功能
- en: Finally, malware can use so-called `.scpt`. `osadecompile` tool cannot decompile
    run-only scripts, so other tools such as `applescript-disassembler` and `aevt_decompile`
    have to be used to present the script’s functionality in a human-readable form.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，恶意软件还可以使用所谓的 `.scpt` 文件。`osadecompile` 工具无法反编译仅能运行的脚本，因此必须使用其他工具，如 `applescript-disassembler`
    和 `aevt_decompile`，以便将脚本功能以人类可读的形式呈现。
- en: API hijacking
  id: totrans-384
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API 劫持
- en: 'This technique is found when infostealers target jailbroken iOS devices. The
    idea here is to intercept certain APIs in order to get access to sensitive data
    before it gets encrypted or after it has been decrypted. One example could be
    `SSLRead` and `SSLWrite` from the `itunesstored` process with the help of **Cydia
    Substrate**, otherwise known as **MobileSubstrate**:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术出现在信息窃取者针对越狱 iOS 设备时。其原理是拦截某些 API，以便在数据加密之前或解密之后获取敏感数据。一个例子是通过 **Cydia Substrate**（也称为
    **MobileSubstrate**）来拦截 `itunesstored` 进程中的 `SSLRead` 和 `SSLWrite`：
- en: '![Figure 12.20 – A parsed .plist ﬁle from one of KeyRaider’s modules'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.20 – 来自 KeyRaider 模块之一的已解析 .plist 文件'
- en: '](img/Figure_12.20_B18500.jpg)'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_12.20_B18500.jpg)'
- en: Figure 12.20 – A parsed .plist ﬁle from one of KeyRaider’s modules
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.20 – 来自 KeyRaider 模块之一的已解析 .plist 文件
- en: Other techniques
  id: totrans-389
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他技术
- en: 'There are other techniques that are not common among macOS malware developers
    and serve more as features of certain malware families. For example, while most
    threats that target Apple systems rely on Bash, AppleScript, and Python for scripting,
    the `installation-check` element in the standard `Distribution` XML file present
    in `.pkg` samples:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他技术，这些技术在macOS恶意软件开发者中并不常见，更多的是某些恶意软件家族的特征。例如，虽然大多数针对Apple系统的威胁依赖于Bash、AppleScript和Python进行脚本编写，但`.pkg`样本中的标准`Distribution`
    XML文件中的`installation-check`元素却有所不同：
- en: '![Figure 12.21 – The Silver Sparrow threat using JavaScript code during its
    installation'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.21 – Silver Sparrow威胁在安装过程中使用JavaScript代码](img/Figure_12.21_B18500.jpg)'
- en: '](img/Figure_12.21_B18500.jpg)'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_12.21_B18500.jpg)'
- en: Figure 12.21 – The Silver Sparrow threat using JavaScript code during its installation
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.21 – Silver Sparrow威胁在安装过程中使用JavaScript代码
- en: 'Another interesting example is the `.dmg` files that don’t contain executables
    as they are. Instead, the next-stage payload is dynamically decrypted and loaded
    using an embedded bash script, as you can see in the following figure:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的例子是`.dmg`文件，它们本身不包含可执行文件。而是通过嵌入的bash脚本动态解密并加载下一阶段的有效载荷，正如你在下图中看到的那样：
- en: '![Figure 12.22 – Bundlore using an embedded script to decrypt the next-stage
    payload'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.22 – Bundlore使用嵌入脚本解密下一阶段有效载荷](img/Figure_12.22_B18500.jpg)'
- en: '](img/Figure_12.22_B18500.jpg)'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_12.22_B18500.jpg)'
- en: Figure 12.22 – Bundlore using an embedded script to decrypt the next-stage payload
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.22 – Bundlore使用嵌入脚本解密下一阶段有效载荷
- en: Sometimes, malware developers get quite creative at introducing new ways to
    run their malware. For example, the authors of the **LoudMiner** threat have the
    whole VM running with the help of QEMU to mine cryptocurrency and utilize their
    victim’s resources.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，恶意软件开发者会非常有创意，想出新的方法来运行他们的恶意软件。例如，**LoudMiner**威胁的作者利用QEMU让整个虚拟机运行，用来挖掘加密货币并利用受害者的资源。
- en: Finally, let’s briefly mention the topic of rootkits.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们简要提一下rootkit的话题。
- en: Rootkits for Mac – do they exist?
  id: totrans-400
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 针对Mac的Rootkit – 它们存在吗？
- en: It might be surprising to some people, but rootkits targeting macOS do exist.
    One of the most notable examples in this category of threats is the **Rubylin**
    rootkit. Among its features is the ability to hide files, directories, and processes,
    as well as users and ports from particular tools. Most of the techniques used
    in this case are different implementations of the approaches that we covered in
    [*Chapter 7*](B18500_07.xhtml#_idTextAnchor669), *Understanding Kernel-Mode Rootkits*,
    dedicated to Windows kernel-mode threats, but this time for the XNU kernel. As
    there are pretty much no notorious malware families that extensively use these
    techniques for malicious purposes, it falls outside the scope of this book. If
    you’re curious, you can find more information about its internals by reading the
    Phrack article, *Revisiting Mac OS X Kernel Rootkits*, in *issue 69*.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会让一些人感到惊讶，但针对macOS的rootkit确实存在。这个类别中最著名的一个例子是**Rubylin** rootkit。它的特点之一是能够隐藏文件、目录和进程，以及特定工具中的用户和端口。这个案例中使用的大部分技术与我们在[*第7章*](B18500_07.xhtml#_idTextAnchor669)中讨论的、专门针对Windows内核模式威胁的*理解内核模式Rootkit*中介绍的方法有所不同，但这次应用于XNU内核。由于几乎没有臭名昭著的恶意软件家族广泛使用这些技术进行恶意活动，因此超出了本书的讨论范围。如果你感兴趣，可以通过阅读Phrack文章《*Revisiting
    Mac OS X Kernel Rootkits*》，在*第69期*中找到更多关于其内部工作的资料。
- en: Now that we know enough about how macOS and iOS are organized and what their
    executable files look like, let’s talk about how to analyze the malware targeting
    them.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了macOS和iOS的组织方式以及它们的可执行文件是什么样子的，接下来我们来谈谈如何分析针对它们的恶意软件。
- en: Static and dynamic analysis of macOS and iOS samples
  id: totrans-403
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: macOS和iOS样本的静态与动态分析
- en: As we know now, the most common programming languages that are used to write
    code for Apple platforms are Objective-C and Swift. The disassembly will look
    different depending on which language the malware author chooses, but in both
    cases, pretty much the same tools can be used for analysis.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 如今我们知道，用于编写Apple平台代码的最常见编程语言是Objective-C和Swift。根据恶意软件作者选择的语言，反汇编的结果会有所不同，但在这两种情况下，几乎可以使用相同的工具进行分析。
- en: Let’s take a look at the options available on the market in order to facilitate
    the reverse-engineering of macOS and iOS programs.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看市场上有哪些可用的选项，以便于macOS和iOS程序的逆向工程。
- en: Static analysis
  id: totrans-406
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静态分析
- en: For engineers who don’t have immediate access to a Mac computer or a VM available
    to run malware on, it is beneficial that most of the static analysis tools are
    available on multiple platforms, so the analysis can be performed on other operating
    systems as well.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 对于没有直接访问Mac计算机或虚拟机的工程师来说，大多数静态分析工具在多个平台上可用，这样分析也能在其他操作系统上进行。
- en: Retrieving samples
  id: totrans-408
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取样本
- en: 'Before any actual malicious code can be analyzed, it first needs to be obtained.
    Here is how it can be done, depending on the way it is distributed:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析任何实际的恶意代码之前，首先需要获取样本。根据它的分发方式，以下是获取方法：
- en: '**7-Zip**: This tool can be used to extract actual executables from both DMG
    and IPA packages:'
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**7-Zip**：此工具可以用来从DMG和IPA包中提取实际的可执行文件：'
- en: '![Figure 12.23 – Looking inside the DMG ﬁle'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.23 – 查看DMG文件内部'
- en: '](img/Figure_12.23_B18500.jpg)'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_12.23_B18500.jpg)'
- en: Figure 12.23 – Looking inside the DMG ﬁle
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.23 – 查看DMG文件内部
- en: While it is possible to extract some files from `.deb` packages using this tool,
    a more reliable way here is to use the standard `ar` tool with the `x` argument,
    `ar x <sample>.deb`. As we have already mentioned, for `.pkg` archives, the `xar`
    tool is highly recommended over 7-Zip.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以使用此工具从`.deb`包中提取一些文件，但更可靠的方法是使用标准的`ar`工具，带上`x`参数，命令为`ar x <sample>.deb`。正如我们之前提到的，对于`.pkg`档案，推荐使用`xar`工具，而非7-Zip。
- en: '`Mobile Applications` subdirectory.'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mobile Applications`子目录。'
- en: '**iMazing**: This commercial third-party alternative to iTunes can be used
    to manage apps from the official App Store and get app data from the device without
    jailbreaks.'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**iMazing**：这一商业化的第三方替代工具可以用来管理来自官方App Store的应用，并在不越狱的情况下从设备获取应用数据。'
- en: Disassemblers and decompilers
  id: totrans-417
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 反汇编器和反编译器
- en: 'Here is a list of tools commonly used to work with the disassembly of samples:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是常用的工具列表，用于处理样本的反汇编：
- en: '**IDA**: As with Windows and Linux, this powerful tool can also be used to
    analyze Mach-O files.'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IDA**：与Windows和Linux类似，这款强大的工具也可以用来分析Mach-O文件。'
- en: '**Hopper**: This product actually started from the Mac platform, so the authors
    are perfectly familiar with its internals. It features both a disassembler and
    decompiler and supports both the Objective-C and Swift languages.'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Hopper**：这个产品最初来自Mac平台，因此作者对其内部非常熟悉。它具有反汇编器和反编译器，支持Objective-C和Swift语言。'
- en: '**radare2**: A strong open source alternative to the previous tools, this framework
    allows engineers to disassemble and analyze Mach-O files:'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**radare2**：作为前述工具的强大开源替代品，该框架允许工程师反汇编并分析Mach-O文件：'
- en: '![Figure 12.24 – An example of the disassembled Mach-O ﬁle for the ARM platform
    in radare2'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.24 – 在radare2中反汇编的ARM平台Mach-O文件示例'
- en: '](img/Figure_12.24_B18500.jpg)'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_12.24_B18500.jpg)'
- en: Figure 12.24 – An example of the disassembled Mach-O ﬁle for the ARM platform
    in radare2
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.24 – 在radare2中反汇编的ARM平台Mach-O文件示例
- en: In order to load a 64-bit ARM Mach-O sample (either as a standalone thin file
    or as part of a fat binary), use `-a arm -b 64` arguments.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 为了加载64位ARM的Mach-O样本（无论是作为独立的瘦文件还是作为fat二进制文件的一部分），可以使用`-a arm -b 64`参数。
- en: '**RetDec**: This cross-platform decompiler supports multiple file formats,
    including Mach-O, for several architectures.'
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RetDec**：这一跨平台反编译器支持多种文件格式，包括Mach-O，适用于多种架构。'
- en: '**Ghidra**: A newcomer in the arsenal of reverse-engineers, Ghidra also supports
    Apple executables.'
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ghidra**：作为逆向工程领域的新手，Ghidra也支持Apple的可执行文件。'
- en: Auxiliary tools and libraries
  id: totrans-428
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 辅助工具和库
- en: 'The following are the auxiliary tools and libraries for static analysis:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是静态分析的辅助工具和库：
- en: '`.plist` into readable formats, such as XML. For non-macOS platforms, it is
    installed together with iTunes.'
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.plist`转化为可读格式，如XML。对于非macOS平台，它与iTunes一起安装。'
- en: '**otool** or **MachOView**: Mac console tools that allows us to view different
    parts of Mach-O files.'
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**otool**或**MachOView**：Mac控制台工具，允许我们查看Mach-O文件的不同部分。'
- en: '**class-dump** or **class-dump-z**: These tools can be used to generate Objective-C
    headers from Mach-O files.'
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**class-dump**或**class-dump-z**：这些工具可以用来从Mach-O文件生成Objective-C头文件。'
- en: '**LIEF**: A cross-platform library that can be used to both parse and modify
    Mach-O executables.'
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LIEF**：一个跨平台的库，可以用来解析和修改Mach-O可执行文件。'
- en: '**Capstone**: A cross-platform disassembly framework that powers multiple reverse-engineering
    tools.'
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Capstone**：一个跨平台的反汇编框架，支持多个逆向工程工具。'
- en: Apart from this, many basic universal tools, such as `file`, `strings`, or `nm`,
    can be used to extract information from executables.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，许多基本通用工具，如`file`、`strings`或`nm`，都可以用来从可执行文件中提取信息。
- en: Dynamic and behavioral analysis
  id: totrans-436
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动态和行为分析
- en: While static analysis tools are pretty much the same for macOS and iOS files,
    the dynamic analysis toolset varies drastically due to different security models
    implemented in both operating systems. It is possible to install macOS on the
    virtual machine, but for iOS, having a real device is usually the only reliable
    option.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然静态分析工具在macOS和iOS文件中几乎相同，但由于两种操作系统中实施的不同安全模型，动态分析工具集差异巨大。可以在虚拟机上安装macOS，但对于iOS，通常只有真实设备才是可靠的选择。
- en: macOS
  id: totrans-438
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: macOS
- en: Dynamic analysis of executables for macOS is quite straightforward and doesn’t
    involve any special extra steps.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 对macOS可执行文件的动态分析非常简单，不涉及任何特别的额外步骤。
- en: Debuggers
  id: totrans-440
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 调试器
- en: 'Performing step-by-step debugging is extremely useful in many cases, for example,
    when we have to deal with obfuscated code and understand the logic behind certain
    operations. Luckily, there are multiple powerful tools available that make this
    possible:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤逐步调试在许多情况下非常有用，例如，当我们必须处理混淆代码并理解某些操作背后的逻辑时。幸运的是，有许多强大的工具可以使这一过程成为可能：
- en: '`mac_server` and `mac_server64` (as well as `mac_server_arm64` and `mac_server_arm64e`
    for ARM-based systems), making it possible to perform debugging on another machine
    under the OS of preference. When you perform debugging using them, make sure that
    they are executed on the remote machine with sudo privileges. In the IDA dialog
    window, after selecting the `23946`), and the parameters required by a sample
    (if there are any).'
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mac_server`和`mac_server64`（以及适用于基于ARM的系统的`mac_server_arm64`和`mac_server_arm64e`），使得在首选操作系统下可以对另一台机器进行调试。当使用这些工具进行调试时，请确保它们在远程机器上以sudo权限执行。在IDA对话框窗口中，选择`23946`后，以及样本所需的参数（如果有的话）。'
- en: 'In case the other fields are incorrect (for example, left untouched and this
    way, associated with a local file, rather than a remote machine), modern versions
    of IDA will ask whether it should copy the file specified in the **Input file**
    field to the remote computer:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 如果其他字段不正确（例如，保持不变并以这种方式与本地文件相关联，而不是远程机器），现代版本的IDA将询问是否应该将**输入文件**字段中指定的文件复制到远程计算机：
- en: '![Figure 12.25 – Debugging WireLurker targeting macOS remotely in IDA located
    on a Windows machine'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.25 – 在位于Windows机器上的IDA中远程调试针对macOS的WireLurker'
- en: '](img/Figure_12.25_B18500.jpg)'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_12.25_B18500.jpg)'
- en: Figure 12.25 – Debugging WireLurker targeting macOS remotely in IDA located
    on a Windows machine
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.25 – 在位于Windows机器上的IDA中远程调试针对macOS的WireLurker
- en: '`r2`, it is generally required to either run this tool with sudo permissions
    or sign it.'
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r2`，通常需要以sudo权限运行该工具或对其进行签名。'
- en: '**GDB or LLDB**: It is also possible to debug programs using the GDB debugger
    or LLDB, which shares many of GDB’s commands.'
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GDB或LLDB**：也可以使用GDB调试器或LLDB来调试程序，LLDB共享许多GDB的命令。'
- en: These tools have already been described in detail in [*Chapter 11*](B18500_11.xhtml#_idTextAnchor1188),
    *Dissecting Linux and IoT Malware*, and all that knowledge can be applied here
    as well.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具已经在[*第11章*](B18500_11.xhtml#_idTextAnchor1188)《剖析Linux和物联网恶意软件》中详细描述，所有这些知识同样可以在这里应用。
- en: Monitoring and dynamic instrumentation
  id: totrans-450
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 监控和动态仪器
- en: 'Commonly referred to as behavioral analysis, running malware in a real or simulated
    environment with various monitors to track system changes can provide a quick
    and valuable insight into malware functionality. In addition, it may be useful
    to change the behavior of the executed sample on the fly. Here are some of the
    most popular tools that make it possible on macOS:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 通常称为行为分析，在真实或模拟环境中运行恶意软件，并使用各种监视工具跟踪系统变化，可以快速并有价值地洞察恶意软件的功能。此外，动态修改执行样本的行为也可能很有用。以下是一些在macOS上实现此目的的最流行工具：
- en: '`syscall` details, as an alternative to **strace** on Linux.'
  id: totrans-452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`syscall`细节，作为Linux上**strace**的替代工具。'
- en: Important note
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: In order to make this tool work, you may need `csrutil status` command to check
    whether it is currently enabled.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使该工具正常工作，您可能需要使用`csrutil status`命令检查它当前是否已启用。
- en: '**fsmon**: Allows an analyst to retrieve filesystem events for a specified
    location.'
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**fsmon**：允许分析人员检索指定位置的文件系统事件。'
- en: Beyond these, there are multiple standard macOS tools that can be used to monitor
    system activity, such as `lsof` or `fs_usage` for file operations.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，还有多个标准的 macOS 工具可用于监控系统活动，例如 `lsof` 或 `fs_usage` 用于文件操作。
- en: '![Figure 12.26 – Using the fs_usage tool for behavioral analysis'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.26 – 使用 fs_usage 工具进行行为分析'
- en: '](img/Figure_12.26_B18500.jpg)'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_12.26_B18500.jpg)'
- en: Figure 12.26 – Using the fs_usage tool for behavioral analysis
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.26 – 使用 fs_usage 工具进行行为分析
- en: '`frida-trace` utility. It understands Objective-C methods, so their names can
    be passed using the `-m` argument.'
  id: totrans-460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`frida-trace` 工具。它理解 Objective-C 方法，因此可以使用 `-m` 参数传递方法名。'
- en: '**Cycrypt**: Another option for engineers to explore and modify running applications
    – it utilizes Objective-C++ and JavaScript syntax.'
  id: totrans-461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cycrypt**：工程师探索和修改正在运行的应用程序的另一个选项——它使用 Objective-C++ 和 JavaScript 语法。'
- en: '**Mac-A-Mal**: Not exactly a monitoring tool, this project extends Cuckoo Sandbox
    to macOS threats.'
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Mac-A-Mal**：这个项目并不完全是一个监控工具，而是将 Cuckoo Sandbox 扩展到 macOS 威胁。'
- en: '**Qiling**: This powerful emulation framework supports Mach-O files.'
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qiling**：这个强大的仿真框架支持 Mach-O 文件。'
- en: All these tools are pretty easy to set up and start using – just follow the
    latest official documentation for them.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些工具都相当容易设置和使用——只需按照最新的官方文档进行操作即可。
- en: Network analysis
  id: totrans-465
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网络分析
- en: In terms of network analysis, this can be easily done on the device itself.
    In this case, popular solutions such as **Wireshark** and **tcpdump** can be used.
    To intercept and decode HTTPS traffic, **Fiddler** and the commercial **Charles**
    proxy can be used. In addition, it is always possible to redirect the traffic
    of interest (for example, by setting up a proxy or performing DNS hijacking) to
    a MITM solution, such as **Burp Suite**.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 就网络分析而言，可以很容易地在设备本身上完成。在这种情况下，可以使用 **Wireshark** 和 **tcpdump** 等流行解决方案。为了拦截和解码
    HTTPS 流量，可以使用 **Fiddler** 和商业版的 **Charles** 代理。此外，始终可以将感兴趣的流量（例如，通过设置代理或进行 DNS
    劫持）重定向到 MITM 解决方案，如 **Burp Suite**。
- en: iOS
  id: totrans-467
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: iOS
- en: More stringent security controls and App Sandbox on iOS generally prevent researchers
    from performing analysis straight away, so often the use of jailbroken devices
    with the **Cydia** package manager installed is preferred here. Its name derives
    from *Cydia pomonella*, known as the codling moth, a major pest in the apple industry.
    Cydia provides an alternative app market with lots of tools that are useful for
    reverse-engineering purposes.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 更严格的安全控制和 iOS 上的应用沙盒通常会阻止研究人员立即进行分析，因此通常会使用已安装**Cydia**包管理器的越狱设备。其名称来源于*Cydia
    pomonella*，即苹果蛾，是苹果产业中的一种主要害虫。Cydia 提供了一个替代的应用市场，里面有许多对逆向工程非常有用的工具。
- en: Besides Cydia, it makes sense to get OpenSSH (if it is not already installed)
    because it enables the engineer to execute commands on the testing device from
    the connected PC.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Cydia，获取 OpenSSH（如果尚未安装）也是有意义的，因为它使工程师能够从连接的 PC 上执行命令。
- en: Installers and loaders
  id: totrans-470
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装程序和加载器
- en: 'The first thing that may be tricky is to deliver malware to the testing system.
    The following tools should be used on the PC that the jailbroken device is connected
    to:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步可能比较棘手的是将恶意软件传送到测试系统。以下工具应在与越狱设备连接的 PC 上使用：
- en: '**Cydia Impactor**: A cross-platform GUI tool to install IPA files on iOS.
    It doesn’t necessarily require jailbreaking, as it can sign apps using a free
    developer certificate associated with the device owner:'
  id: totrans-472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cydia Impactor**：一个跨平台的 GUI 工具，用于在 iOS 上安装 IPA 文件。它不一定需要越狱，因为它可以使用与设备所有者关联的免费开发者证书来签名应用。'
- en: '![Figure 12.27 – The interface of the Cydia Impactor tool'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.27 – Cydia Impactor 工具的界面'
- en: '](img/Figure_12.27_B18500.jpg)'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_12.27_B18500.jpg)'
- en: Figure 12.27 – The interface of the Cydia Impactor tool
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.27 – Cydia Impactor 工具的界面
- en: In order to use this tool, there is no need to install `.ipa` file over its
    interface. Then, the tool will ask for an Apple ID and the corresponding password.
    Keep in mind that this should be not the main set of credentials used to log in
    to the Apple website but an app-specific password that can be generated at [https://appleid.apple.com](https://appleid.apple.com).
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此工具时，无需通过界面安装 `.ipa` 文件。然后，工具会要求输入 Apple ID 和相应的密码。请记住，这不应是用于登录 Apple 网站的主凭据，而应该是可以在
    [https://appleid.apple.com](https://appleid.apple.com) 生成的应用特定密码。
- en: If the developer certificate hasn’t been recently approved, it should be done
    on the device by going to **Settings** | **General** and then either selecting
    the **Profiles** or **Device Management** option (the exact name may vary depending
    on the iOS version). There, it is possible to manually approve the loaded app,
    which requires an internet connection.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 如果开发者证书最近没有被批准，可以通过前往**设置**|**通用**，然后选择**配置文件**或**设备管理**选项（具体名称可能根据iOS版本有所不同）来在设备上手动批准加载的应用，这需要连接互联网。
- en: '**ios-deploy**: Designed to work on non-jailbroken devices, this console Mac
    tool allows the installation and debugging of apps on the connected device.'
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ios-deploy**：设计用于非越狱设备的控制台Mac工具，允许在连接的设备上安装和调试应用。'
- en: '**iFunbox**: A free file-management and app-management tool for iOS devices,
    it also allows the installation of IPA packages.'
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**iFunbox**：一款免费的iOS设备文件管理和应用管理工具，此外它还支持安装IPA包。'
- en: '`.ipa` files, relying on the standard `codesign` tool. These tools are distributed
    in the form of apps and tools to be executed on the mobile device:'
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.ipa`文件，依赖于标准的`codesign`工具。这些工具以应用和工具的形式分发，需在移动设备上执行：'
- en: '`-b` argument) apps using the command line.'
  id: totrans-481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命令行中的`-b`参数）调试应用。
- en: '`.deb` files on iOS devices.'
  id: totrans-482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.deb`文件在iOS设备上的使用。'
- en: '**AppSync Unified**: This app allows the installation of unsigned IPA files
    on iOS devices. Even though anybody can get a free certificate for sideloading,
    there are multiple limitations, such as a limited number of devices or apps allowed,
    so the user may want to bypass using it.'
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AppSync Unified**：这个应用允许在iOS设备上安装未签名的IPA文件。尽管任何人都可以获得免费的证书进行侧载，但它有多个限制，例如允许的设备或应用数量有限，因此用户可能希望绕过它。'
- en: Now, let’s talk about debuggers.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们来谈谈调试器。
- en: Debuggers
  id: totrans-485
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 调试器
- en: 'The list of the most common debuggers in this case is pretty much the same
    as for macOS. The main difference here will be in the setup, as iOS is used to
    power mobile devices, and it is generally more convenient to perform debugging
    on the PC:'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，最常见的调试器列表与macOS几乎相同。主要的区别在于设置，因为iOS用于驱动移动设备，通常在PC上执行调试会更加方便：
- en: '`debugserver`. In order to use IDA this way, generally, a separate `ios_deploy`
    tool should be obtained from its official website.'
  id: totrans-487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`debugserver`。为了以这种方式使用IDA，通常需要从其官方网站获取一个单独的`ios_deploy`工具。'
- en: '**radare2**: Unsurprisingly, this powerful toolset can be used for both the
    static and dynamic analysis of iOS samples. For debugging, a **r2lldb** plugin
    can be used.'
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**radare2**：毫不意外，这套强大的工具集可以用于iOS样本的静态和动态分析。对于调试，可以使用**r2lldb**插件。'
- en: '`debugserver`.'
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`debugserver`。'
- en: Dumping and decryption
  id: totrans-490
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 转储和解密
- en: 'As we know now, as part of the copyright protection measures implemented in
    iOS, apps that come from the official App Store are encrypted. While this technology
    is supposed to fight piracy, it may also complicate malware analysis. Here are
    some of the best tools that can be used to decrypt samples:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们现在所知，作为iOS中实施的版权保护措施的一部分，来自官方App Store的应用都是加密的。虽然这一技术旨在打击盗版，但它也可能使恶意软件分析变得更加复杂。以下是一些可以用来解密样本的最佳工具：
- en: '**Clutch**: This tool can be used to dump iOS apps so that they can be disassembled
    and analyzed. For newer versions of iOS, the entitlements may need to be fixed
    with a help of the **ldid** tool available on Cydia.'
  id: totrans-492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Clutch**：这个工具可以用来转储iOS应用，以便它们能够被反汇编并分析。对于较新的iOS版本，可能需要借助Cydia上的**ldid**工具来修复授权问题。'
- en: '**frida-ios-dump**: A newer IPA dumping script based on the **Frida** framework.'
  id: totrans-493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**frida-ios-dump**：基于**Frida**框架的更新版IPA转储脚本。'
- en: Now, what about monitoring apps running in memory?
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如何监控内存中运行的应用程序呢？
- en: Monitors and in-memory patching
  id: totrans-495
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 显示器和内存补丁
- en: 'It is also possible to set up monitoring tools for iOS, even though it may
    require some non-standard approaches. Luckily, there are multiple existing tools
    that make this possible:'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，即使这可能需要一些非标准的方法，也可以设置iOS的监控工具。幸运的是，有多个现有工具使得这成为可能：
- en: '**Cydia Substrate**: Formerly called **MobileSubstrate**, this is a framework
    for developing runtime patches for system functions on iOS.'
  id: totrans-497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cydia Substrate**：以前称为**MobileSubstrate**，这是一个用于开发iOS系统函数运行时补丁的框架。'
- en: '**Theos**: A suite of development tools for iOS. One of these utilities is
    **logify**, which can be used to generate files that allow engineers to hook class
    methods.'
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Theos**：一套iOS开发工具集，其中包括**logify**，它可以用来生成允许工程师挂钩类方法的文件。'
- en: '**Cycrypt**: A set of tools that enables engineers to modify the functionality
    of the running app through injections of the required logic.'
  id: totrans-499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cycrypt**：一组工具，使工程师能够通过注入所需逻辑来修改正在运行的应用程序的功能。'
- en: '`frida-trace`.'
  id: totrans-500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`frida-trace`。'
- en: '**objection**: A runtime exploration toolset based on **Frida**, it provides
    a solution to many real-world situations that engineers may face when analyzing
    iOS samples, such as bypassing SSL pinning.'
  id: totrans-501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**objection**：基于**Frida**的运行时探索工具集，它为工程师在分析iOS样本时可能遇到的许多实际情况提供了解决方案，如绕过SSL
    pinning。'
- en: '**fsmon**: This open source tool can be used to monitor filesystem events.'
  id: totrans-502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**fsmon**：这个开源工具可以用于监视文件系统事件。'
- en: '**FLEX**: A unique set of tools that runs on the device itself and allows in-app
    exploration, such as network history or the state of App Sandbox’s filesystem.'
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FLEX**：一组独特的工具，可在设备本身上运行，并允许应用内探索，例如网络历史或App Sandbox文件系统的状态。'
- en: Alright, what about analyzing network activity?
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，那么分析网络活动呢？
- en: Network analysis
  id: totrans-505
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网络分析
- en: Apple provides a `tcpdump` on the Mac to record the mobile device’s traffic.
    In addition, just as with macOS, it is possible to redirect required network traffic
    to a MITM solution of your choice and review or modify it if necessary.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果在Mac上提供了`tcpdump`以记录移动设备的流量。此外，与macOS一样，可以将所需的网络流量重定向到您选择的MITM解决方案，并在必要时进行审查或修改。
- en: Now we know what tools we should use at different stages of the analysis, let’s
    summarize the steps that we may need to go through to define the workflow.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道在分析的不同阶段应该使用哪些工具，让我们总结一下可能需要通过的步骤来定义工作流程。
- en: The analysis workflow
  id: totrans-508
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析工作流程
- en: 'When analyzing malware that is targeting Apple systems (whether it be macOS
    or iOS), the following workflow can be used:'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析针对苹果系统（无论是macOS还是iOS）的恶意软件时，可以使用以下工作流程：
- en: Understand the available indicators of a compromise. Is it possible that they
    are related to an activity that doesn’t involve the usage of malicious code?
  id: totrans-510
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 理解妥协的可用指标。是否可能它们与不涉及恶意代码的活动有关？
- en: Once the candidate for a malicious sample is identified, start by obtaining
    it and any related files and performing static analysis.
  id: totrans-511
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦确定了恶意样本的候选者，首先获取它及其相关文件，并进行静态分析。
- en: If there are multiple files available within one bundle, find out which one
    is supposed to be executed first. Generally, it is defined in the `Info.plist`
    file in the `CFBundleExecutable` field. Also, check the executable that has the
    same name as the bundle, but without the `.app` extension.
  id: totrans-512
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一个捆绑包中有多个文件可用，请找出应该首先执行哪个文件。通常在`Info.plist`文件的`CFBundleExecutable`字段中定义。此外，还要检查具有与捆绑包相同但没有`.app`扩展名的名称的可执行文件。
- en: Carefully review the strings and import functions present in binary payloads,
    as they may offer some insight into the malware’s functionality. Pay particular
    attention to the import functions mentioned in the *File formats and APIs* section
    and their analogous. If there are no valid strings, check for the presence of
    encryption and obfuscation code.
  id: totrans-513
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仔细审查二进制载荷中存在的字符串和导入函数，因为它们可能提供有关恶意软件功能的一些见解。特别关注*文件格式和API*部分提到的导入函数及其类似功能。如果没有有效的字符串，请检查加密和混淆代码的存在。
- en: Continue the analysis using references to strings as landmarks, keeping the
    markup accurate. Also, carefully review the code close to the sample’s entry point,
    as it may contain arguments that parse functionality.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 继续使用字符串作为标志点进行分析，并保持标记的准确性。此外，仔细审查样本入口点附近的代码，因为它可能包含解析功能的参数。
- en: Extract all indicators of compromise, such as contacted IP addresses and URLs,
    the file paths and names used, and other modules delivered. This information can
    be used not only to find additional related samples and identify the exact malware
    family involved but also to better protect already-affected systems and prevent
    further infections by sharing them with other organizations, security providers,
    and law enforcement agencies (it may also help track down the attackers).
  id: totrans-515
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取所有妥协指标，例如联系的IP地址和URL、使用的文件路径和名称以及提供的其他模块。这些信息不仅可用于查找其他相关样本和确定确切的恶意软件系列，还可通过与其他组织、安全提供商和执法机构共享来更好地保护已受影响的系统并防止进一步感染（这也有助于追踪攻击者）。
- en: If possible, try to understand the full infection chain. How did the malware
    enter the target system – can it spread further? To answer this question, you
    may need to perform a forensic analysis on the affected machine(s) or review security
    logs. This is helpful for securing existing systems and preventing the infection
    from reoccurring.
  id: totrans-516
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果可能，尽量了解完整的感染链。恶意软件是如何进入目标系统的——它能否进一步传播？为了回答这个问题，你可能需要对受影响的机器进行取证分析，或者查看安全日志。这有助于保护现有系统，并防止感染再次发生。
- en: All this information will allow you to confirm the exact purpose and type of
    the malware (at this stage, we already know how they look), which is extremely
    useful for estimating the risks and losses involved.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些信息将帮助你确认恶意软件的确切目的和类型（在这一阶段，我们已经知道它们的样子），这对于评估涉及的风险和损失非常有用。
- en: Before performing dynamic analysis, during the static analysis stage, confirm
    what environment the malware expects and whether any command-line arguments or
    dependencies are required.
  id: totrans-518
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在进行动态分析之前，在静态分析阶段，确认恶意软件所需的环境以及是否需要任何命令行参数或依赖项。
- en: If the testing system is already set up, run the malware with monitors to confirm
    the functionality identified during the static analysis (this is usually a quick
    task to complete).
  id: totrans-519
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果测试系统已经设置好，运行恶意软件并进行监控，以确认在静态分析阶段识别的功能（这通常是一个快速完成的任务）。
- en: If you need to understand some complicated interaction with the system, or decrypt
    or deobfuscate certain logic, perform a step-by-step dynamic analysis for related
    code blocks in your debugger of choice.
  id: totrans-520
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你需要理解与系统的某些复杂交互，或解密或去混淆某些逻辑，可以在你选择的调试器中对相关代码块进行逐步的动态分析。
- en: Choose your analysis strategy depending on the questions that need to be answered,
    and the time and setup available. Some steps may be modified or completely omitted
    if they fall outside the scope of the report that needs to be delivered.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 根据需要回答的问题，以及可用的时间和环境选择你的分析策略。如果某些步骤超出了报告的范围，它们可能会被修改或完全省略。
- en: Summary
  id: totrans-522
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about the security models of macOS and iOS to understand
    potential attack vectors, and dived deeper into the file formats used on these
    operating systems to see what malicious samples may look like. Then, we went through
    the tools available to analyze malware that targets macOS and iOS users and provided
    guidelines on how they can be used. After this, we put our knowledge into practice
    and went through all the major attack stages generally implemented by malware,
    from the initial penetration to the action phase, and learned how they may look
    in real-life scenarios. Finally, we covered the advanced techniques utilized by
    more high-profile malware families.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了macOS和iOS的安全模型，以了解潜在的攻击路径，并深入探讨了这些操作系统上使用的文件格式，看看恶意样本可能是什么样子。然后，我们介绍了可用于分析针对macOS和iOS用户的恶意软件的工具，并提供了如何使用它们的指南。之后，我们将这些知识付诸实践，回顾了恶意软件通常实施的所有主要攻击阶段，从初始渗透到行动阶段，并了解它们在现实场景中的表现。最后，我们介绍了更高级的技术，这些技术被一些更高调的恶意软件家族所利用。
- en: Equipped with this knowledge, you now have the upper hand in analyzing pretty
    much any type of threat that targets these systems. As a result, you can provide
    better protection from unwarranted cyberattacks and mitigate further risks.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 凭借这些知识，你现在可以在分析几乎任何类型的针对这些系统的威胁时占据上风。因此，你可以提供更好的保护，防止无理的网络攻击，并减轻进一步的风险。
- en: In [*Chapter 13*](B18500_13.xhtml#_idTextAnchor1503), *Analyzing Android Malware
    Samples*, we are going to cover another popular mobile operating system, Android,
    and we will learn how to deal with the malware that targets it. Read on!
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第13章*](B18500_13.xhtml#_idTextAnchor1503)，*分析安卓恶意软件样本*中，我们将介绍另一种流行的移动操作系统——安卓，并学习如何应对针对它的恶意软件。继续阅读！
