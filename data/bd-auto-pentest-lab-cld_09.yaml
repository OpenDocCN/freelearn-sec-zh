- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Recommended Strategies and Best Practices
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推荐策略和最佳实践
- en: Great job reaching the last chapter of this book! The last few chapters have
    been focused primarily on giving you the hands-on experience needed to help you
    build more complex penetration testing labs in the cloud. If you took the time
    to understand what’s happening in the hands-on examples and solutions in this
    book, then you should be a bit more confident about what you can accomplish with
    your current knowledge and skills. In this chapter, we will build on top of what
    you learned in the previous chapters, and we will explore how we can take things
    to the next level!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你已完成本书的最后一章！最后几章主要专注于提供实践经验，帮助你在云端构建更复杂的渗透测试实验室。如果你花时间理解了本书中的实践示例和解决方案，那么你应该对自己目前的知识和技能能达到的成就更有信心了。在这一章中，我们将建立在你前几章学到的基础上，探索如何将工作提升到一个新高度！
- en: 'We will cover the following in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Increasing the complexity of penetration testing lab environments
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高渗透测试实验室环境的复杂性
- en: Leveraging Generative AI for estimating penetration testing lab costs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用生成性人工智能估算渗透测试实验室的成本
- en: Unleashing the power of AI-powered tools to accelerate automation script development
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 释放 AI 驱动工具的强大功能，加速自动化脚本开发
- en: Using AI-powered solutions to generate and explain IaC template code
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用人工智能驱动的解决方案生成和解释 IaC 模板代码
- en: Recognizing relevant considerations and practical strategies when building and
    automating lab environments
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在构建和自动化实验室环境时，识别相关考虑因素和实际策略
- en: With these in mind, let’s begin!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 牢记这些，让我们开始吧！
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Before we start, you must have the following ready:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，你必须准备好以下内容：
- en: '**Visual Studio Code** (**VS Code**) installed and set up on your local machine'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装并设置好的 **Visual Studio Code**（**VS Code**）本地开发环境
- en: '**GitHub Copilot** set up and configured with VS Code – sign up for a free
    trial subscription (**Copilot for Individuals**) using the following link: [https://github.com/features/copilot](https://github.com/features/copilot).
    Make sure that the **GitHub Copilot extension** is installed and set up completely.
    You may check the following link for more information: [https://docs.github.com/en/copilot/getting-started-with-github-copilot?tool=vscode](https://docs.github.com/en/copilot/getting-started-with-github-copilot?tool=vscode).'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub Copilot** 已设置并配置与 VS Code – 请使用以下链接注册免费试用订阅（**个人版 Copilot**）：[https://github.com/features/copilot](https://github.com/features/copilot)。确保安装并完全配置了
    **GitHub Copilot 扩展**。你可以查看以下链接了解更多信息：[https://docs.github.com/en/copilot/getting-started-with-github-copilot?tool=vscode](https://docs.github.com/en/copilot/getting-started-with-github-copilot?tool=vscode)。'
- en: '**GitHub Copilot Labs** set up and configured with VS Code – sign up using
    the following link: [https://githubnext.com/projects/copilot-labs/](https://githubnext.com/projects/copilot-labs/).
    Make sure that the **GitHub Copilot Labs extension** is installed and set up completely.
    You may check the following link for more information: [https://marketplace.visualstudio.com/items?itemName=GitHub.copilot-labs](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot-labs).'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub Copilot Labs** 已设置并配置与 VS Code – 请使用以下链接注册：[https://githubnext.com/projects/copilot-labs/](https://githubnext.com/projects/copilot-labs/)。确保安装并完全配置了
    **GitHub Copilot Labs 扩展**。你可以查看以下链接了解更多信息：[https://marketplace.visualstudio.com/items?itemName=GitHub.copilot-labs](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot-labs)。'
- en: '**Amazon CodeWhisperer** set up and configured with VS Code – we will be utilizing
    **CodeWhisperer Professional** for a single user ([https://aws.amazon.com/codewhisperer/pricing/](https://aws.amazon.com/codewhisperer/pricing/)).
    Before we install and set up the CodeWhisperer extension in VS Code, we need to
    (1) enable **IAM Identity Center** and create an **AWS organization**, (2) create
    an **IAM organization user**, (3) set up CodeWhisperer for a single user, and
    (4) set up the **AWS Toolkit** for VS Code ([https://aws.amazon.com/visualstudiocode/](https://aws.amazon.com/visualstudiocode/)).
    Make sure that the **CodeWhisperer extension** is installed and set up completely.
    You may check the following link for more information: [https://docs.aws.amazon.com/codewhisperer/latest/userguide/whisper-setup-prof-devs.html](https://docs.aws.amazon.com/codewhisperer/latest/userguide/whisper-setup-prof-devs.html).'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon CodeWhisperer** 配置并与 VS Code 配合使用 – 我们将使用 **CodeWhisperer Professional**
    版进行单用户使用 ([https://aws.amazon.com/codewhisperer/pricing/](https://aws.amazon.com/codewhisperer/pricing/))。在我们安装并配置
    CodeWhisperer 扩展到 VS Code 之前，我们需要完成以下步骤：(1) 启用 **IAM 身份中心** 并创建 **AWS 组织**，(2)
    创建 **IAM 组织用户**，(3) 为单个用户设置 CodeWhisperer，(4) 设置 **AWS Toolkit** 与 VS Code 配合使用
    ([https://aws.amazon.com/visualstudiocode/](https://aws.amazon.com/visualstudiocode/))。确保安装并完全配置了
    **CodeWhisperer 扩展**。你可以查看以下链接获取更多信息：[https://docs.aws.amazon.com/codewhisperer/latest/userguide/whisper-setup-prof-devs.html](https://docs.aws.amazon.com/codewhisperer/latest/userguide/whisper-setup-prof-devs.html)。'
- en: '**Tabnine Pro** set up and configured with VS Code – sign up for a free trial
    subscription (**Pro**) using the following link: [https://www.tabnine.com/pricing](https://www.tabnine.com/pricing).
    Make sure that the **Tabnine extension** is installed and set up completely. You
    may check the following link for more information: [https://www.tabnine.com/install/vscode](https://www.tabnine.com/install/vscode).'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Tabnine Pro** 配置并与 VS Code 配合使用 – 使用以下链接注册免费试用订阅（**Pro**）：[https://www.tabnine.com/pricing](https://www.tabnine.com/pricing)。确保安装并完全配置了
    **Tabnine 扩展**。你可以查看以下链接获取更多信息：[https://www.tabnine.com/install/vscode](https://www.tabnine.com/install/vscode)。'
- en: 'A **ChatGPT Plus** account – sign up for an account using the following link:
    [https://chat.openai.com/auth/login](https://chat.openai.com/auth/login). Since
    we will be using the **Advanced Data Analysis** feature in this chapter, we would
    need to upgrade our plan to **ChatGPT Plus** so that we can access GPT-4 along
    with other beta features exclusively available to ChatGPT Plus users.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ChatGPT Plus** 账户 – 使用以下链接注册账户：[https://chat.openai.com/auth/login](https://chat.openai.com/auth/login)。由于我们将在本章中使用
    **高级数据分析** 功能，因此需要升级我们的计划为 **ChatGPT Plus**，以便我们能够访问 GPT-4 以及其他仅对 ChatGPT Plus
    用户提供的 beta 功能。'
- en: You may proceed with the next steps once these are ready. If you don’t intend
    to commit to these subscriptions long term, feel free to unsubscribe or downgrade
    your current plan for each of these subscriptions after completing the hands-on
    examples in this chapter.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这些准备就绪，你可以继续进行下一步。如果你不打算长期使用这些订阅，可以在完成本章中的实践示例后，随时取消订阅或降级当前的计划。
- en: Note
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'To avoid any conflict that may arise with the newly added extensions, you can
    temporarily disable all currently installed extensions in VS Code. *How?* Click
    on the **Extensions** icon in the sidebar on the left side of the VS Code window.
    In the **Extensions** view, click the three dots (**···**) button and select **Disable
    All Installed Extensions** from the list of options available in the context menu.
    Do not worry as we can easily enable these extensions later on. For more information,
    feel free to check the following link: [https://code.visualstudio.com/docs/editor/extension-marketplace](https://code.visualstudio.com/docs/editor/extension-marketplace).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免与新添加的扩展产生冲突，你可以暂时禁用 VS Code 中所有已安装的扩展。*怎么做？* 点击 VS Code 窗口左侧边栏中的 **扩展**
    图标。在 **扩展** 视图中，点击右上角的三个点（**···**）按钮，然后从上下文菜单中选择 **禁用所有已安装扩展**。不用担心，因为我们可以稍后轻松启用这些扩展。欲了解更多信息，可以查看以下链接：[https://code.visualstudio.com/docs/editor/extension-marketplace](https://code.visualstudio.com/docs/editor/extension-marketplace)。
- en: 'The source code and other files used for each chapter are available in this
    book’s GitHub repository: [https://github.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud](https://github.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中每章使用的源代码和其他文件可以在该书的 GitHub 仓库中找到：[https://github.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud](https://github.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud)。
- en: Increasing the complexity of penetration testing lab environments
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增加渗透测试实验室环境的复杂度
- en: If you have been to a bouldering (rock-climbing) gym before, you would realize
    how similar a penetration testing lab environment is to an indoor facility filled
    with climbing walls of varying difficulty. Just like how indoor rock-climbing
    gyms provide climbers with a controlled environment to exercise and practice their
    climbing skills, penetration testing labs provide cybersecurity professionals
    with an isolated environment to practice and perfect their hacking techniques.
    Both environments challenge users with various types of scenarios with increasing
    complexity and difficulty to push their limits. Given that these environments
    have been built to mimic real-world challenges and obstacles, we should expect
    these environments to evolve and grow in complexity so that users are presented
    with new challenges to solve.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经去过一个攀岩（室内岩壁）馆，你会发现渗透测试实验室环境与充满各种难度攀岩墙的室内设施非常相似。就像室内攀岩馆为攀岩者提供了一个受控的环境，让他们锻炼和练习攀岩技巧一样，渗透测试实验室为网络安全专业人士提供了一个隔离的环境，用于练习和完善他们的黑客技术。这两种环境通过增加复杂性和难度，挑战用户，推动他们的极限。考虑到这些环境是为了模拟现实世界的挑战和障碍而建立的，我们应该预期这些环境会不断发展和增长复杂度，以便为用户提供新的挑战。
- en: In this section, we will discuss how we can further evolve and increase the
    complexity of the penetration testing lab environments we have built in the previous
    chapters of this book. Let’s start with the lab environment we have prepared in
    *[Chapter 4](B19755_04.xhtml)*, *Setting Up Isolated Penetration Testing Lab Environments*
    *on GCP*.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论如何进一步发展并增加我们在本书前几章中构建的渗透测试实验室环境的复杂性。让我们从我们在*[第4章](B19755_04.xhtml)*中准备的实验室环境开始，*设置隔离的渗透测试实验室环境*
    *在 GCP 上*。
- en: '![](image/B19755_09_01.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](image/B19755_09_01.jpg)'
- en: Figure 9.1 – High-level diagram of our penetration testing lab environment in
    GCP
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.1 – 我们在 GCP 中的渗透测试实验室环境的高层次图示
- en: In this lab setup, we have an isolated network for securing the lab environment
    resources from external attacks. This isolated network environment consists of
    two VPCs along with a VPC peering connection bridging these VPC networks. We have
    a single target VM instance deployed inside the first VPC while we have the attacker
    VM instance in the other VPC. Inside the target VM instance, we have a container
    running an intentionally vulnerable application called the **OWASP Juice Shop**.
    While we had the opportunity to add more vulnerable services, applications, and
    containers inside the VM instance, we decided to keep things simple by having
    only a single running container to reduce the setup work required. In addition
    to this, we could have launched more VM instances inside the VPC as well. *What
    if we had more time (and more pages to spare) to set up a more complex* *lab environment?*
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实验室设置中，我们有一个隔离的网络，用来保护实验室环境资源免受外部攻击。这个隔离的网络环境由两个 VPC 组成，并且这两个 VPC 网络通过一个
    VPC 对等连接桥接在一起。我们在第一个 VPC 内部署了一个目标虚拟机实例，而攻击者虚拟机实例则位于另一个 VPC 内。在目标虚拟机实例内部，我们有一个运行着故意存在漏洞的应用程序的容器，名为**OWASP
    Juice Shop**。虽然我们本可以在虚拟机实例中添加更多易受攻击的服务、应用程序和容器，但为了简化设置工作，我们决定只保留一个运行的容器。除此之外，我们还可以在
    VPC 内启动更多的虚拟机实例。*如果我们有更多的时间（以及更多的页面空间）来设置一个更复杂的* *实验室环境，会怎么样呢？*
- en: 'Let’s imagine a hypothetical lab environment (similar to what is shown in *Figure
    9**.2*) consisting of various cloud resources running inside a **Google Cloud
    Platform** (**GCP**) account. In this new lab environment, we have three VM instances
    running vulnerable services, applications, and containers inside them: (1) **vm-target**,
    (2) **vm-target-02**, and (3) **vm-target-03**.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设想一个假想的实验室环境（类似于*图 9.2*中所示），该环境由运行在**Google Cloud Platform**（**GCP**）账户中的各种云资源组成。在这个新的实验室环境中，我们有三个虚拟机实例，它们分别运行着易受攻击的服务、应用程序和容器：(1)
    **vm-target**，(2) **vm-target-02**，和(3) **vm-target-03**。
- en: '![](image/B19755_09_02.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](image/B19755_09_02.jpg)'
- en: Figure 9.2 – A more complex version of the penetration testing lab environment
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.2 – 渗透测试实验室环境的更复杂版本
- en: The first target VM instance (**vm-target**) is similar to the target VM instance
    we prepared in *[Chapter 4](B19755_04.xhtml)*, *Setting Up Isolated Penetration
    Testing Lab Environments on GCP*. To make things a bit more exciting, we will
    also run a few more containers running vulnerable applications and services inside
    this instance (**vm-target**). In addition to this, similar to what we set up
    in *[Chapter 5](B19755_05.xhtml)*, *Setting Up Isolated Penetration Testing Lab
    Environments on Azure*, we can configure some of these containers to run with
    the **--privileged** flag. This will allow lab users to practice container breakout
    techniques as well. The second target VM instance (**vm-target-02**) is a new
    VM instance running a different operating system. This instance would be running
    various vulnerable services without any containers involved. We also have a third
    target VM instance (**vm-target-03**) running a different set of vulnerable applications
    and services. The network configuration is configured to not allow direct access
    from the attacker VM instance to the third target VM instance (**vm-target-03**).
    This will force lab users to compromise the second target VM instance (**vm-target-02**)
    first and use that to access the third target VM instance (**vm-target-03**) similar
    to the pivoting lab we set up in *[Chapter 6](B19755_06.xhtml)*, *Setting Up Isolated
    Penetration Testing Lab Environments on AWS*. Finally, from the third target VM
    instance (**vm-target-03**), a Cloud Storage bucket (with a flag) can be accessed
    through a service account.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个目标虚拟机实例（**vm-target**）类似于我们在*[第 4 章](B19755_04.xhtml)*，*在 GCP 上设置隔离渗透测试实验室环境*中准备的目标虚拟机实例。为了增加一点趣味性，我们还将在这个实例（**vm-target**）内运行更多的容器，这些容器将运行存在漏洞的应用和服务。除此之外，类似于我们在*[第
    5 章](B19755_05.xhtml)*，*在 Azure 上设置隔离渗透测试实验室环境*中所做的，我们可以配置一些容器以**--privileged**标志运行。这将允许实验室用户练习容器突破技巧。第二个目标虚拟机实例（**vm-target-02**）是一个新的虚拟机实例，运行不同的操作系统。该实例将运行各种漏洞服务，不涉及容器。我们还有第三个目标虚拟机实例（**vm-target-03**），它运行一组不同的漏洞应用和服务。网络配置被设置为不允许攻击者虚拟机实例直接访问第三个目标虚拟机实例（**vm-target-03**）。这将迫使实验室用户先攻破第二个目标虚拟机实例（**vm-target-02**），并利用它访问第三个目标虚拟机实例（**vm-target-03**），这类似于我们在*[第
    6 章](B19755_06.xhtml)*，*在 AWS 上设置隔离渗透测试实验室环境*中设置的“横向渗透”实验。最后，通过第三个目标虚拟机实例（**vm-target-03**），可以通过服务账户访问一个带有旗标的云存储桶。
- en: 'To further increase the complexity of the lab environment, we can replace the
    third target VM instance (**vm-target-03**) with a vulnerable-by-design **Kubernetes**
    cluster environment similar to what we have in *Figure 9**.3*:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步增加实验环境的复杂性，我们可以将第三个目标虚拟机实例（**vm-target-03**）替换为一个设计上存在漏洞的**Kubernetes**集群环境，类似于*图
    9**.3*所示：
- en: '![](image/B19755_09_03.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](image/B19755_09_03.jpg)'
- en: Figure 9.3 – Including a vulnerable-by-design cluster environment
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3 – 包括一个设计上存在漏洞的集群环境
- en: If this is your first time learning about Kubernetes, it is a popular open source
    container orchestration system that provides a framework for running resilient
    distributed systems. By setting up this vulnerable-by-design Kubernetes cluster,
    users can gain hands-on experience with various attack scenarios inside an isolated
    environment. Inside this cluster, we would have multiple scenarios involving misconfigurations,
    risks, and vulnerabilities discussed in the **OWASP Kubernetes Top 10**. These
    scenarios may include overly permissive **Role-Based Access Control** (**RBAC**)
    configurations, broken authentication mechanisms, container breakouts due to insecure
    workload configurations, and more.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是你第一次了解 Kubernetes，它是一个流行的开源容器编排系统，提供了一个框架来运行具有弹性的分布式系统。通过搭建这个设计上存在漏洞的 Kubernetes
    集群，用户可以在隔离的环境中获得有关各种攻击场景的实践经验。在这个集群中，我们将涉及多种场景，包括**OWASP Kubernetes Top 10**中讨论的配置错误、风险和漏洞。这些场景可能包括过于宽松的**基于角色的访问控制**（**RBAC**）配置、破损的认证机制、不安全的工作负载配置导致的容器突破等。
- en: Note
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information about this topic, feel free to check the following link:
    [https://owasp.org/www-project-kubernetes-top-ten/](https://owasp.org/www-project-kubernetes-top-ten/).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此主题的更多信息，请访问以下链接：[https://owasp.org/www-project-kubernetes-top-ten/](https://owasp.org/www-project-kubernetes-top-ten/)。
- en: Instead of a Kubernetes cluster, we could also introduce a **Windows Active
    Directory** setup similar to what is shown in *Figure 9**.4*.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Kubernetes 集群，我们还可以引入类似于*图 9**.4*所示的**Windows Active Directory**设置。
- en: '![](image/B19755_09_04.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](image/B19755_09_04.jpg)'
- en: Figure 9.4 – Including a Windows Active Directory lab
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.4 – 包括一个 Windows Active Directory 实验室
- en: Here, we have two Windows VM instances similar to what we prepared in *[Chapter
    8](B19755_08.xhtml)*, *Designing and Building a Vulnerable Active Directory Lab*.
    One of the VM instances will be the domain controller (**vm-target-03**) and the
    other one will be a workstation machine (**vm-target-04**) that will be joined
    to the domain. Of course, we can add more machines to this setup and make the
    lab environment a bit more realistic. To increase the difficulty a bit, we can
    make the Windows VM instances not accessible directly from the attacker machine
    and require the second target VM instance (**vm-target-02**) to be compromised
    first, and use that to access and attack the domain controller instance (**vm-target-03**)
    and the workstation machine instance (**vm-target-04**).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有两个 Windows 虚拟机实例，类似于我们在*[第 8 章](B19755_08.xhtml)*中准备的内容，*设计和构建易受攻击的 Active
    Directory 实验室*。其中一个虚拟机实例将作为域控制器（**vm-target-03**），另一个则是作为工作站机器（**vm-target-04**），并且会加入到域中。当然，我们可以向这个设置中添加更多的机器，使实验室环境看起来更真实。为了增加一点难度，我们可以让
    Windows 虚拟机实例不能直接从攻击者机器访问，并要求先让第二个目标虚拟机实例（**vm-target-02**）被攻破，再通过它来访问和攻击域控制器实例（**vm-target-03**）和工作站机器实例（**vm-target-04**）。
- en: Important note
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: When designing lab environments, it is essential that we take into account the
    penetration testing skills (or techniques) being focused on as certain lab components
    are required depending on the techniques and actions we want the lab user to perform
    inside the lab environment. In addition to this, it is important that we have
    a good idea of who will use the lab to help us identify the experience level of
    the lab users. This will help us manage the varying levels of difficulty across
    the various sections of the lab environment. That said, we can increase the complexity
    and difficulty of certain parts of the lab by adding web application firewalls
    to allow lab users to practice more advanced web penetration testing techniques.
    We can also increase the difficulty even further by adding specific resources
    such as an **intrusion prevention system** (**IPS**) for practicing evasion techniques.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计实验室环境时，必须考虑到所关注的渗透测试技能（或技术），因为根据我们希望实验室用户在实验室环境中执行的技术和操作，某些实验室组件是必需的。除此之外，了解谁将使用该实验室也非常重要，这有助于我们识别实验室用户的经验水平。这将帮助我们管理实验室环境中各个部分的不同难度等级。也就是说，我们可以通过添加
    Web 应用防火墙来提高实验室中某些部分的复杂性和难度，让实验室用户能够练习更高级的 Web 渗透测试技术。我们还可以通过添加特定的资源，例如**入侵防御系统**（**IPS**），进一步提高难度，以便练习规避技术。
- en: Another possibility is to have a more complex lab setup with all of these included!
    Of course, this would entail a significantly higher cost of running the cloud
    resources within the lab environment. In addition to this, we would need to invest
    a bit more time in automating the setup of the various components deployed in
    our penetration testing lab setup. At this point, you might be wondering how we
    could significantly accelerate the preparation of complex lab environments! The
    good news is that we now have AI-powered solutions that could help us in various
    types of tasks, such as estimating penetration testing lab costs, generating automation
    scripts and **Infrastructure-as-Code** (**IaC**) templates, along with explaining
    existing code written by other engineers and professionals. We’ll see this in
    action in the next sections of this chapter!
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种可能性是拥有一个更复杂的实验室设置，包含所有这些内容！当然，这将涉及在实验室环境中运行云资源的显著更高成本。此外，我们还需要在自动化部署我们渗透测试实验室设置中的各种组件上投入更多时间。此时，您可能会想知道我们如何能显著加速复杂实验室环境的准备！好消息是，现在我们有了
    AI 驱动的解决方案，可以帮助我们完成各种任务，比如估算渗透测试实验室成本、生成自动化脚本和**基础设施即代码**（**IaC**）模板，以及解释其他工程师和专业人士编写的现有代码。在本章的下一节中，我们将看到这一点的实际应用！
- en: Leveraging Generative AI for estimating penetration testing lab costs
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用生成性 AI 来估算渗透测试实验室成本
- en: The way we design our penetration testing lab environments can have a significant
    impact on the overall cost of running these labs in the cloud. Certain implementations
    and variations may require more resources than others, which would lead to increased
    costs. By carefully considering the architecture of our lab setup, we can identify
    opportunities to reduce costs without compromising the quality, performance, and
    stability of our penetration testing lab environment. Estimating the associated
    costs when running these environments is another crucial aspect as this allows
    security professionals (and teams) to plan their budget and maintain a sustainable
    lab setup in the long run.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设计渗透测试实验室环境的方式，可能会对在云中运行这些实验室的整体成本产生重大影响。某些实现方式和变化可能需要比其他方式更多的资源，这会导致成本增加。通过仔细考虑我们的实验室架构设计，我们可以找到在不影响渗透测试实验室环境的质量、性能和稳定性的情况下降低成本的机会。估算运行这些环境时的相关费用是另一个至关重要的方面，因为这可以帮助安全专业人员（和团队）规划预算，并在长期内维持可持续的实验室设置。
- en: 'In *[Chapter 6](B19755_06.xhtml)*, *Setting Up Isolated Penetration Testing
    Lab Environments on AWS*, we prepared a lab setup where we can practice network
    pivoting techniques. In case you’ve forgotten already, here’s a simplified diagram
    showing what our lab environment looks like:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在*[第6章](B19755_06.xhtml)*，*在AWS上设置隔离的渗透测试实验室环境*中，我们准备了一个实验室设置，可以在其中练习网络跳板技术。如果你已经忘记了，下面是一个简化的示意图，展示了我们的实验环境是什么样子的：
- en: '![](image/B19755_09_05.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](image/B19755_09_05.jpg)'
- en: Figure 9.5 – Our lab environment setup in Chapter 6
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5 – 第6章中的实验环境设置
- en: Here, we have an attacker VM instance running inside one VPC network and two
    target VM instances running inside another VPC network. *Have you ever wondered
    how much it would cost to run this lab environment?* While it is possible to compute
    the costs manually, we can use Generative AI tools, capabilities, and plugins
    to help us estimate and compute the costs automatically!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有一个攻击者虚拟机（VM）实例运行在一个VPC网络内，另外两个目标虚拟机（VM）实例运行在另一个VPC网络内。*你是否曾经想过运行这个实验环境的费用是多少？*虽然可以手动计算费用，但我们可以利用生成型AI工具、功能和插件来帮助我们自动估算和计算费用！
- en: In *[Chapter 7](B19755_07.xhtml)*, *Setting Up an IAM Privilege Escalation Lab*,
    we had our first look into how we can use Generative AI solutions to automatically
    generate code for penetration testing simulations and activities. There’s more
    to where that came from! In this section, we will use **ChatGPT Advanced Data
    Analysis** to help us estimate the cost using the Terraform configuration files
    we used to generate a lab environment. All we need to do is input the right set
    of prompts and let the AI model generate the cost calculations and insights for
    us. Amazing, right?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在*[第7章](B19755_07.xhtml)*，*设置IAM权限提升实验室*中，我们首次探讨了如何利用生成型AI解决方案自动生成渗透测试模拟和活动的代码。这里还有更多内容！在本节中，我们将使用**ChatGPT高级数据分析**帮助我们通过Terraform配置文件估算费用，这些文件用于生成实验环境。我们只需要输入正确的提示，让AI模型为我们生成费用计算和见解。很棒，对吧？
- en: 'With this in mind, let’s proceed with the estimation of the associated costs
    for running our lab environment:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些信息后，让我们继续估算运行实验环境相关的费用：
- en: 'Navigate to this book’s GitHub repository and locate the ZIP file we used to
    prepare the lab environment for *[Chapter 6](B19755_06.xhtml)*, *Setting Up Isolated
    Penetration Testing Lab Environments on AWS*. Feel free to use the following link
    to help you locate the ZIP file:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往本书的GitHub仓库，找到我们用来为*[第6章](B19755_06.xhtml)*，*在AWS上设置隔离的渗透测试实验室环境*准备实验环境时使用的ZIP文件。你可以使用以下链接帮助你找到该ZIP文件：
- en: '[PRE0]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Locate and click the **Download raw file** button (located near the **Raw**
    button in the right-hand corner of the page). This will download the **pentest_lab.zip**
    ZIP file from the GitHub repository to your local machine.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 找到并点击**下载原始文件**按钮（位于页面右上角的**原始**按钮附近）。这将把GitHub仓库中的**pentest_lab.zip**文件下载到你的本地机器上。
- en: 'In a new browser tab, access your **ChatGPT Plus** account using the following
    URL: [https://chat.openai.com/](https://chat.openai.com/). Ensure that you configure
    your account to have **Advanced data analysis** enabled before proceeding.![](image/B19755_09_06.jpg)'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的浏览器标签页中，使用以下URL访问你的**ChatGPT Plus**账户：[https://chat.openai.com/](https://chat.openai.com/)。确保在继续之前配置你的账户，启用**高级数据分析**功能。![](image/B19755_09_06.jpg)
- en: Figure 9.6 – Enabling Advanced data analysis
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.6 – 启用高级数据分析
- en: Enabling **Advanced data analysis** will allow us to automate complex data computations
    and analyze valuable information from uploaded files. Yes, you heard that right!
    We can upload files and leverage the AI model’s capabilities to generate detailed
    analyses, visualize trends, and extract meaningful patterns directly from the
    uploaded data.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 启用**高级数据分析**将允许我们自动化复杂的数据计算，并从上传的文件中分析有价值的信息。没错，你没听错！我们可以上传文件并利用 AI 模型的能力生成详细分析、可视化趋势，并直接从上传的数据中提取有意义的模式。
- en: Important note
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: As of writing, **Advanced Data Analysis** is in Beta. By the time you read this
    book, it may have transitioned out of the Beta phase already!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 截至写作时，**高级数据分析**处于测试版阶段。等到你阅读这本书时，它可能已经脱离测试阶段了！
- en: Create a new chat session and select **GPT-4** (or the latest model available
    exclusively to ChatGPT Plus users):![](image/B19755_09_07.jpg)
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的聊天会话并选择**GPT-4**（或最新版本，仅对 ChatGPT Plus 用户可用）：![](image/B19755_09_07.jpg)
- en: Figure 9.7 – Selecting GPT-4 and Advanced Data Analysis for our chat session
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.7 – 为我们的聊天会话选择 GPT-4 和高级数据分析
- en: Make sure that **Advanced Data Analysis** is selected (instead of **Default**)
    similar to what we have in *Figure 9**.7*.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保选择了**高级数据分析**（而不是**默认**），类似于我们在*图 9.7*中看到的那样。
- en: Click the **+** button (highlighted in *Figure 9**.8*):![](image/B19755_09_08.jpg)
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**+**按钮（在*图 9.8*中突出显示）：![](image/B19755_09_08.jpg)
- en: Figure 9.8 – Uploading the pentest_lab.zip file
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.8 – 上传 pentest_lab.zip 文件
- en: Upload the **pentest_lab.zip** file we downloaded to our local machine in a
    previous step.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上传我们在之前步骤中下载到本地计算机的**pentest_lab.zip**文件。
- en: Important note
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: Do not press *Enter* or click the **Send a message** button yet as we will be
    specifying a prompt (in the next step).
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在不要按*Enter*键或点击**发送消息**按钮，因为我们将在下一步中指定提示。
- en: 'Type the following prompt inside the text bar:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本框中输入以下提示：
- en: '[PRE1]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Press the *Enter* key afterward to submit the uploaded file along with the
    prompt. This should yield a response similar to what is shown in *Figure 9**.9*:'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后按*Enter*键提交上传的文件和提示。这应该会生成类似于*图 9.9*所示的响应：
- en: '![](image/B19755_09_09.jpg)'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_09_09.jpg)'
- en: Figure 9.9 – Analyzing what the ZIP file contains
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.9 – 分析 ZIP 文件包含的内容
- en: Simply enter **No need** when asked a question similar to **Would you like a
    brief overview of each** **file’s contents?**
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当被问到类似于**你是否需要简要概述每个** **文件的内容？**的问题时，只需输入**无需**。
- en: Important note
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Note that even with the same prompt, you may get a different set of responses
    from ChatGPT. That said, feel free to modify and adjust your prompts accordingly.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，即使使用相同的提示，你也可能会从 ChatGPT 获得不同的响应。话虽如此，随时可以根据需要修改和调整你的提示。
- en: Open a new browser tab and navigate to [https://instances.vantage.sh/](https://instances.vantage.sh/).
    This should open a website built to help compare various EC2 instance types.![](image/B19755_09_10.jpg)
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的浏览器标签页，访问 [https://instances.vantage.sh/](https://instances.vantage.sh/)。这应该会打开一个用于比较不同
    EC2 实例类型的网页！[](image/B19755_09_10.jpg)
- en: Figure 9.10 – Website built for comparing various EC2 instance types
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.10 – 用于比较不同 EC2 实例类型的网页
- en: Click the **Export** button highlighted in *Figure 9**.10*. This will download
    an **Amazon EC2 Instance Comparison.csv** file to the **Downloads** folder (or
    alternative) of your local machine.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击*图 9.10*中突出显示的**导出**按钮。这将把**Amazon EC2 实例比较.csv**文件下载到你本地计算机的**下载**文件夹（或其他文件夹）。
- en: Navigate back to the browser tab where we have our ChatGPT session open.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到我们打开 ChatGPT 会话的浏览器标签页。
- en: 'Now, let’s compute the monthly cost of running each EC2 instance specified
    in the Terraform configuration files. Let’s do this by uploading the **Amazon
    EC2 Instance Comparison.csv** file and entering the following prompt:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们计算在 Terraform 配置文件中指定的每个 EC2 实例的月度成本。我们可以通过上传**Amazon EC2 实例比较.csv**文件并输入以下提示来实现：
- en: '[PRE2]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will yield the following (final) output:'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将产生以下（最终）输出：
- en: '![](image/B19755_09_11.jpg)'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_09_11.jpg)'
- en: Figure 9.11 – Breakdown of the monthly costs for the EC2 instances defined
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.11 – EC2 实例的月度成本分解
- en: Here, we can see that ChatGPT successfully returned a breakdown of the monthly
    costs for the identified EC2 instances from the Terraform configuration files
    inside the ZIP file we uploaded earlier. To simplify things a bit, we have only
    considered the cost of running the EC2 instances in this example. Note that there
    are other costs we must take into account as well to get a more accurate monthly
    cost estimate. These include the data transfer fees, the storage costs associated
    with the EBS volumes attached to the EC2 instances, as well as the potential charges
    for using other services in the account.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到 ChatGPT 成功地返回了我们之前上传的 ZIP 文件中 Terraform 配置文件中标识的 EC2 实例的月度成本细分。为了简化问题，我们只考虑了在本示例中运行
    EC2 实例的成本。请注意，我们还必须考虑其他费用，以获取更准确的月度成本估算。这些包括数据传输费用、附加到 EC2 实例的 EBS 卷的存储成本，以及使用账户中其他服务可能产生的费用。
- en: Important note
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: By identifying which components and resources of the lab setup contribute the
    most to the overall cost, we can focus our optimization efforts on these areas
    to achieve maximum cost savings.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通过确定实验室设置的哪些组件和资源对总成本贡献最大，我们可以将优化工作集中在这些领域，以实现最大的成本节约。
- en: 'Since we are not planning to have the resources running for an entire month,
    let’s enter the following prompt and specify that we will only have the resources
    running for 6 hours:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们不计划资源运行一个整月，让我们输入以下提示，并指定我们只会让资源运行 6 小时：
- en: '[PRE3]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This should yield a response similar to what is shown in *Figure 9**.12*:'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该产生类似于图 **9**.12 的响应：
- en: '![](image/B19755_09_12.jpg)'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_09_12.jpg)'
- en: Figure 9.12 – Estimated cost of running the resources for 6 hours instead of
    1 month
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.12 – 运行资源 6 小时而不是 1 个月的估算成本
- en: This time, we have the estimated cost of running the EC2 instances for 6 hours
    (instead of a month). *Cool, right?*
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这次，我们有运行 EC2 实例 6 小时的估算成本（而不是一个月）。*很酷，对吧？*
- en: Important note
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: One of the simplest yet most effective ways to manage costs is to ensure that
    resources are turned off or deleted when they are not actively being used. It
    is common for lab environments to consist of multiple VMs, databases, and other
    resources that contribute the most to the overall cost. By setting up automated
    scripts (that create and delete resources), we can ensure that these resources
    are running only when they are needed.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 管理成本最简单但最有效的方法之一是确保资源在未被积极使用时关闭或删除。实验环境通常由多个虚拟机、数据库和其他资源组成，这些资源对总成本的贡献最大。通过设置自动化脚本（用于创建和删除资源），我们可以确保这些资源仅在需要时运行。
- en: 'Let’s take things one step further by generating a bar chart using the following
    prompt:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过以下提示进一步生成条形图：
- en: '[PRE4]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This should give us the following output:'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该给我们以下输出：
- en: '![](image/B19755_09_13.jpg)'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_09_13.jpg)'
- en: Figure 9.13 – Bar chart comparing the cost associated per Terraform file
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.13 – 每个 Terraform 文件关联的成本的条形图比较
- en: Here, we can see that a significant portion of the cost comes from the resources
    defined in **network_02.tf**. Again, note that we have only considered the cost
    of running the EC2 instances when generating the bar chart.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到成本的大部分来自于 **network_02.tf** 中定义的资源。再次注意，我们在生成条形图时仅考虑了运行 EC2 实例的成本。
- en: 'To help us identify which blocks of code in our Terraform files have a contribution
    to the overall cost, enter the following prompt:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了帮助我们确定我们的 Terraform 文件中哪些代码块对总成本有贡献，请输入以下提示：
- en: '[PRE5]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This should give us the following output:'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该给我们以下输出：
- en: '![](image/B19755_09_14.jpg)'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_09_14.jpg)'
- en: Figure 9.14 – Identifying which blocks of code have a contribution to the overall
    cost
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.14 – 确定哪些代码块对总成本有贡献
- en: Looks like ChatGPT was able to successfully identify and provide the (simplified)
    resource blocks that have associated EC2 instance costs!
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 看起来 ChatGPT 成功识别并提供了（简化的）与 EC2 实例成本相关联的资源块！
- en: 'Finally, let’s enter the following prompt:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们输入以下提示：
- en: '[PRE6]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This should return the following response:'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该返回以下响应：
- en: '![](image/B19755_09_15.jpg)'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_09_15.jpg)'
- en: Figure 9.15 – Checking how updating the instance type affects the estimated
    cost
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.15 – 检查更新实例类型对估算成本的影响
- en: In *Figure 9**.15*, we can see that the cost associated with the **vm_kali**
    resource has been updated automatically as well.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在图 **9**.15 中，我们可以看到与 **vm_kali** 资源相关的成本也已自动更新。
- en: To accommodate various workloads, cloud providers offer instance types with
    varying performance levels and costs. By properly assessing the performance requirements
    of the applications, services, and tools that would run inside the cloud resources,
    we would be able to choose the right instance type. With this, we can make informed
    decisions to help us manage and reduce costs significantly.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了适应各种工作负载，云服务商提供了性能水平和成本各不相同的实例类型。通过正确评估将要在云资源中运行的应用程序、服务和工具的性能要求，我们将能够选择合适的实例类型。这样，我们就能做出明智的决策，帮助我们有效管理和大幅减少成本。
- en: Important note
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: In addition to the initial set of resources created using the Terraform configuration
    files, we must take into account any additional resources that might be created
    by the lab environment users (while they are using the lab). What if lab environment
    users could create cloud resources that could potentially be expensive? What if
    extensive network traffic is generated by the user? In a lab environment where
    users have the capability to create cloud resources, it’s crucial to implement
    safeguards to prevent accidental or intentional overspending.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用 Terraform 配置文件创建的初始资源外，我们还必须考虑实验室环境用户可能创建的任何额外资源（在他们使用实验室时）。如果实验室环境用户能够创建可能非常昂贵的云资源呢？如果用户生成了大量网络流量呢？在一个允许用户创建云资源的实验室环境中，至关重要的是要实施安全措施，以防止意外或故意的过度支出。
- en: At this point, we should have a good idea of how to use Generative AI solutions
    to estimate the cost of running our penetration testing lab environment in the
    cloud. The example scenario we just discussed is just one of the many practical
    applications of Generative AI. It is important to note that the capabilities of
    AI-powered solutions extend *far beyond* this example scenario! We’ll see more
    of this in the next sections of this chapter.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 到这个阶段，我们应该已经有了一个很好的思路，如何利用生成性人工智能解决方案来估算在云中运行渗透测试实验室环境的成本。我们刚刚讨论的示例场景只是生成性人工智能的众多实际应用之一。值得注意的是，人工智能驱动的解决方案的能力*远远超出*这一示例场景！在本章的后续部分，我们将看到更多相关内容。
- en: Unleashing the power of AI-powered tools to accelerate automation script development
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用人工智能驱动的工具释放其潜力，加速自动化脚本开发
- en: Being able to fully automate the creation and deletion of our penetration testing
    lab environment would help us significantly reduce the cost of running these lab
    environments in the cloud. While the potential benefits are undeniable, in reality,
    *fully* *automating* the preparation of lab environments is not as easy as it
    sounds. Coding automation scripts takes time, skill, and effort, and it may sometimes
    involve an entire team of experienced (and expensive) engineers to get the job
    done properly.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 完全自动化创建和删除渗透测试实验室环境，将大大帮助我们降低在云中运行这些实验室环境的成本。尽管潜在的好处是不可否认的，但实际上，*完全* *自动化* 实验室环境的准备工作并不像听起来那么简单。编写自动化脚本需要时间、技能和精力，有时可能需要一个经验丰富（且昂贵）的工程师团队来确保任务的顺利完成。
- en: Maybe AI-powered tools can help! In addition to ChatGPT, there are many other
    AI-powered solutions available to help us significantly speed up the preparation
    of the automation scripts for building our penetration testing lab environments.
    In this section, we will take a closer look at how AI-powered tools such as **GitHub
    Copilot**, **Amazon CodeWhisperer**, and **Tabnine** can help us accelerate automation
    script development. These cutting-edge tools leverage machine learning and natural
    language processing to accelerate the coding and scripting process. These tools
    help developers by suggesting code snippets, autocompleting lines of code, and
    even generating blocks of code through comments. Amazing, right?
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 或许人工智能驱动的工具能帮忙！除了 ChatGPT，还有许多其他人工智能解决方案可以帮助我们显著加快渗透测试实验室环境自动化脚本的准备过程。在这一部分，我们将深入了解**GitHub
    Copilot**、**Amazon CodeWhisperer** 和 **Tabnine** 等人工智能驱动的工具，看看它们如何帮助我们加速自动化脚本开发。这些前沿工具利用机器学习和自然语言处理技术加速代码编写和脚本开发过程。这些工具通过建议代码片段、自动完成代码行，甚至通过注释生成代码块来帮助开发人员。很神奇吧？
- en: Important note
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: Make sure that you have the **GitHub Copilot**, **Amazon CodeWhisperer**, and
    **Tabnine** extensions set up (completely) as specified in the *Technical requirements*
    section at the start of this chapter. It may take around 15 minutes to set up
    and complete all the prerequisites and dependencies for these to work in VS Code.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已按照本章开始部分的*技术要求*部分，完全设置好**GitHub Copilot**、**Amazon CodeWhisperer**和**Tabnine**扩展。这些扩展的设置和所有先决条件可能需要大约15分钟来完成。
- en: Let’s see these AI-powered tools in action in the next set of steps.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在接下来的步骤中看到这些AI驱动的工具是如何工作的。
- en: Part 1 of 3 – Leveraging GitHub Copilot to speed up shell scripting
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1部分/共3部分 – 利用GitHub Copilot加速Shell脚本编写
- en: 'Now, let’s try using GitHub Copilot to help speed up the preparation of a sample
    script that can create specific lab environment resources in our GCP account:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试使用GitHub Copilot来帮助加速准备一个示例脚本，该脚本可以在我们的GCP账户中创建特定的实验环境资源：
- en: Let’s start by making sure that all VS Code extensions are disabled. This will
    help prevent any conflict that may arise with the newly added AI-powered extensions.![](image/B19755_09_16.jpg)
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先确保禁用所有VS Code扩展。这将帮助防止与新添加的AI扩展发生冲突！[](image/B19755_09_16.jpg)
- en: Figure 9.16 – Disabling all installed extensions in VS Code
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.16 – 在VS Code中禁用所有已安装的扩展
- en: Click on the **Extensions** icon in the sidebar on the left side of the VS Code
    window. In the **Extensions** view, click the three dots (**···**) button and
    select **Disable All Installed Extensions** from the list of options available
    in the context menu.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击VS Code窗口左侧边栏的**扩展**图标。在**扩展**视图中，点击三个点（**···**）按钮，并从右键菜单中选择**禁用所有已安装的扩展**。
- en: Note
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Feel free to check [https://code.visualstudio.com/docs/editor/extension-marketplace](https://code.visualstudio.com/docs/editor/extension-marketplace)
    for more information about this topic.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 随时查看[https://code.visualstudio.com/docs/editor/extension-marketplace](https://code.visualstudio.com/docs/editor/extension-marketplace)以了解有关此主题的更多信息。
- en: 'Now, let’s enable the GitHub Copilot extension. In the **EXTENSIONS: MARKETPLACE**
    view, we should see a search bar at the top. Type **GitHub Copilot** in this search
    bar to locate the extension we need to enable.![](image/B19755_09_17.jpg)'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们启用GitHub Copilot扩展。在**扩展：市场**视图中，我们应该能看到顶部的搜索框。在这个搜索框中输入**GitHub Copilot**来找到我们需要启用的扩展！[](image/B19755_09_17.jpg)
- en: Figure 9.17 – Enabling the GitHub Copilot extension
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.17 – 启用GitHub Copilot扩展
- en: Scroll through the list of extensions to find the **GitHub Copilot** extension.
    Right-click on the extension and then select **Enable** from the list of options
    available in the context menu.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 浏览扩展列表，找到**GitHub Copilot**扩展。右键点击该扩展，然后从右键菜单中选择**启用**。
- en: Note
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure that the setup is complete before proceeding. In some cases, VS Code
    may prompt you to restart the application. If prompted, go ahead and restart VS
    Code.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，确保设置已完成。在某些情况下，VS Code可能会提示你重新启动应用程序。如果出现提示，请重新启动VS Code。
- en: With our AI-powered extension enabled already, let’s proceed by creating a new
    file named **copilot.sh**.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在启用我们的AI扩展后，让我们继续创建一个名为**copilot.sh**的新文件。
- en: 'Type the following in the first line of our script file:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们脚本文件的第一行输入以下内容：
- en: '[PRE7]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, add the following line of code (in the second or third line):'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加以下代码行（在第二行或第三行）：
- en: '[PRE8]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Make sure to replace **<BUCKET NAME>** with a globally unique bucket name (for
    a bucket that is yet to be created).
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保将**<BUCKET NAME>**替换为一个全球唯一的桶名称（用于尚未创建的桶）。
- en: 'In the fourth or fifth line, type the following single-line comment:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第四或第五行，输入以下单行注释：
- en: '[PRE9]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'At this point, our **copilot.sh** script file should look similar to what we
    have in *Figure 9**.18*:'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此时，我们的**copilot.sh**脚本文件应类似于*图9.18*中所示：
- en: '![](image/B19755_09_18.jpg)'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_09_18.jpg)'
- en: Figure 9.18 – Typing a single-line comment
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.18 – 输入单行注释
- en: Here, you can see that we’ve specified **my-sample-bucket-abc123** for the **<BUCKET
    NAME>** placeholder value.
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，你可以看到我们已经为**<BUCKET NAME>**占位符指定了**my-sample-bucket-abc123**。
- en: Press *Enter*. You should see the following suggested code generated automatically:![](image/B19755_09_19.jpg)
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*Enter*键。你应该看到以下自动生成的建议代码：![](image/B19755_09_19.jpg)
- en: Figure 9.19 – Copilot suggesting a line of code
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.19 – Copilot建议一行代码
- en: Here, we can see that GitHub Copilot suggested **gsutil mb gs://$BUCKET_NAME**
    for the next line in our script file!
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到GitHub Copilot建议将**gsutil mb gs://$BUCKET_NAME**作为脚本文件中的下一行！
- en: Note
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that you might get a different suggestion while working on this example.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在此示例中工作时，您可能会收到不同的建议。
- en: Press *Tab* to accept the suggestion and complete the code.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Tab*键接受建议并完成代码。
- en: 'Now, add the following line of code (after the existing lines of code in our
    file):'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加以下代码行（在我们文件中现有的代码行之后）：
- en: '[PRE10]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, type the following single-line comment (in a new line):'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，输入以下单行注释（在新的一行中）：
- en: '[PRE11]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Press *Enter*. You should see the following suggested code generated automatically:'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 按*Enter*键。你应该会看到以下建议的代码自动生成：
- en: '![](image/B19755_09_20.jpg)'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_09_20.jpg)'
- en: Figure 9.20 – Copilot suggesting a line of code
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.20 – Copilot建议一行代码
- en: Here, we can see that GitHub Copilot suggested **gsutil cp flag.txt gs://$BUCKET_NAME**
    for the next line in our script file!
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到GitHub Copilot为我们脚本文件中的下一行代码建议了**gsutil cp flag.txt gs://$BUCKET_NAME**！
- en: Important note
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Do not press *Tab* yet as we will be checking the other suggestions first!
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 不要按*Tab*键，因为我们将首先检查其他建议！
- en: Press the right arrow key (*→*) a few times to see the other suggestions, similar
    to what we have in *Figure 9**.21*:![](image/B19755_09_21.jpg)
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按右箭头键（*→*）几次查看其他建议，类似于我们在*图 9.21*中的内容：![](image/B19755_09_21.jpg)
- en: Figure 9.21 – Checking the other suggestions using the arrow key
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.21 – 使用箭头键检查其他建议
- en: Press *Tab* to accept the suggestion and complete the code. At this point, we
    have a small script ready for use! It is important to note that the code generated
    by the AI tool/extension may not always work. Make sure to review, run, and test
    the code generated thoroughly before using it in a real project.
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 按*Tab*键接受建议并完成代码。此时，我们已经准备好了一个小脚本！重要的是要注意，AI工具/扩展生成的代码可能并不总是有效。使用之前，务必仔细检查、运行和测试生成的代码。
- en: Note
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'We won’t discuss all the features of GitHub Copilot in this book. Feel free
    to check the following video (*Get Started with the Future of Coding: GitHub Copilot*)
    for more information about this topic: [https://www.youtube.com/watch?v=Fi3AJZZregI](https://www.youtube.com/watch?v=Fi3AJZZregI).'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中我们不会讨论GitHub Copilot的所有功能。请随时查看以下视频（*开始使用编程的未来：GitHub Copilot*）以获取更多关于此主题的信息：[https://www.youtube.com/watch?v=Fi3AJZZregI](https://www.youtube.com/watch?v=Fi3AJZZregI)。
- en: Part 2 of 3 – Accelerating Python coding with Amazon CodeWhisperer
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第2部分中的第3部分 – 使用Amazon CodeWhisperer加速Python编码
- en: 'Now, let’s try using Amazon CodeWhisperer to assist us while we code a portion
    of the script we prepared in *[Chapter 7](B19755_07.xhtml)*, *Setting Up an IAM
    Privilege* *Escalation Lab*:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试使用Amazon CodeWhisperer在编写我们在*[第7章](B19755_07.xhtml)*中准备的部分脚本时提供帮助，*设置IAM权限升级实验*：
- en: Let’s start by making sure that all VS Code extensions are disabled to avoid
    any conflict that may arise with the newly added AI-powered extensions. Click
    on the **Extensions** icon in the sidebar on the left side of the VS Code window.
    In the **Extensions** view, click the three dots (**···**) button and select **Disable
    All Installed Extensions** from the list of options available in the context menu.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先确保禁用所有VS Code扩展，以避免与新添加的AI扩展发生任何冲突。点击VS Code窗口左侧边栏中的**扩展**图标。在**扩展**视图中，点击三个点（**···**）按钮，然后从上下文菜单中选择**禁用所有已安装的扩展**。
- en: 'Now, let’s enable the **AWS Toolkit** extension. In the **EXTENSIONS: MARKETPLACE**
    view, we should see a search bar at the top. Type **CodeWhisperer** in this search
    bar to locate the extension we need to enable.![](image/B19755_09_22.jpg)'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们启用**AWS Toolkit**扩展。在**扩展：市场**视图中，我们应该能看到顶部的搜索栏。在搜索栏中输入**CodeWhisperer**以定位我们需要启用的扩展。![](image/B19755_09_22.jpg)
- en: Figure 9.22 – Enabling the AWS Toolkit extension
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.22 – 启用AWS Toolkit扩展
- en: Scroll through the list of extensions to find the **AWS Toolkit** extension.
    Right-click on the extension and then select **Enable** from the list of options
    available in the context menu.
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向下滚动扩展列表，找到**AWS Toolkit**扩展。右键点击该扩展，然后从上下文菜单中选择**启用**。
- en: Note
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When prompted with the message **Connection expired. To continue using CodeWhisperer,
    connect with AWS Builder ID or AWS IAM Identity center.**, click the **Connect
    with AWS** button and ensure that the setup is complete before proceeding.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 当提示出现**连接已过期。要继续使用CodeWhisperer，请使用AWS Builder ID或AWS IAM身份中心进行连接。**时，点击**与AWS连接**按钮，并确保在继续之前完成设置。
- en: With our AI-powered extension enabled already, let’s proceed by creating a new
    file named **whisperer.py**.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的AI扩展已经启用的情况下，接下来创建一个名为**whisperer.py**的新文件。
- en: 'Let’s start by typing the following single-line comment (in the first line):'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从输入以下单行注释开始（在第一行）：
- en: '[PRE12]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Press *Enter*. You should see the following suggested code (or similar) generated
    automatically:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Enter*键。你应该会看到以下建议的代码（或类似的代码）被自动生成：
- en: '[PRE13]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note that you might get a different suggestion while working on this example.
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，在进行此示例时，你可能会得到不同的建议。
- en: Important note
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Do not press *Tab* yet as we will be checking the other suggestions first!
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在不要按*Tab*键，因为我们将首先检查其他建议！
- en: Press the right arrow key (*→*) a few times to see the other suggestions, similar
    to what we have in *Figure 9**.23*:![](image/B19755_09_23.jpg)
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按右箭头键（*→*）几次，以查看其他建议，类似于*图9.23*中的内容：![](image/B19755_09_23.jpg)
- en: Figure 9.23 – Checking the other suggestions using the arrow key
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.23 – 使用箭头键检查其他建议
- en: Here, we can see that accepting the current suggested block of code would automatically
    add **import boto3** as well.
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到，接受当前建议的代码块会自动添加**import boto3**。
- en: Press *Tab* to accept the suggestion and complete the code.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Tab*键接受建议并完成代码。
- en: In a new line, type **if** with a space after it (similar to what is shown in
    *Figure 9**.24*). You should see Amazon Whisperer suggesting lines of code that
    would call the function we just defined:![](image/B19755_09_24.jpg)
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的一行中，输入**if**并在其后加一个空格（类似于*图9.24*中的显示）。你应该会看到Amazon Whisperer建议几行代码，这些代码将调用我们刚定义的函数：![](image/B19755_09_24.jpg)
- en: Figure 9.24 – More code suggestions from Amazon CodeWhisperer
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.24 – 来自Amazon CodeWhisperer的更多代码建议
- en: Press *Tab* to accept the suggestion and complete the code. At this point, we
    have a small Python script ready for use! It is important to note that the code
    generated by the AI tools and extensions may not always work. Make sure to review,
    run, and test the code generated thoroughly before using it in a real project.
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 按*Tab*键接受建议并完成代码。此时，我们已准备好一个小型Python脚本！需要注意的是，AI工具和扩展生成的代码可能并不总是有效。务必在实际项目中使用之前，仔细审查、运行并测试所生成的代码。
- en: Note
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: 'We won’t dive deep into the features of Amazon CodeWhisperer in this book.
    Feel free to check the following video (*Amazon CodeWhisperer Overview*) for more
    information about this topic: [https://www.youtube.com/watch?v=j8BoVmHKFlI](https://www.youtube.com/watch?v=j8BoVmHKFlI).'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中我们不会深入探讨Amazon CodeWhisperer的功能。您可以查看以下视频（*Amazon CodeWhisperer概述*）了解更多关于此主题的信息：[https://www.youtube.com/watch?v=j8BoVmHKFlI](https://www.youtube.com/watch?v=j8BoVmHKFlI)。
- en: Part 3 of 3 – Coding PowerShell scripts faster with Tabnine Pro
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3部分，共3部分 – 使用Tabnine Pro更快编写PowerShell脚本
- en: 'Now, let’s try using Tabnine Pro to accelerate the preparation of a sample
    PowerShell script that can help us review and manage the resources running in
    our Microsoft Azure account:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试使用Tabnine Pro加速准备一个示例PowerShell脚本，该脚本可以帮助我们审查和管理我们Microsoft Azure账户中的资源：
- en: Let’s start by making sure that all VS Code extensions are disabled to avoid
    any conflict that may arise with the newly added AI-powered extensions. Click
    on the **Extensions** icon in the sidebar on the left side of the VS Code window.
    In the **Extensions** view, click the three dots (**···**) button and select **Disable
    All Installed Extensions** from the list of options available in the context menu.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，确保禁用所有VS Code扩展，以避免与新添加的AI驱动扩展发生冲突。点击VS Code窗口左侧边栏中的**扩展**图标。在**扩展**视图中，点击三点（**···**）按钮，从上下文菜单中选择**禁用所有已安装的扩展**。
- en: 'Now, let’s enable the **Tabnine** extension. In the **EXTENSIONS: MARKETPLACE**
    view, we should see a search bar at the top. Type **Tabnine** in this search bar
    to locate the extension we need to enable.![](image/B19755_09_25.jpg)'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们启用**Tabnine**扩展。在**扩展：市场**视图中，我们应该看到顶部有一个搜索框。在这个搜索框中输入**Tabnine**，以找到我们需要启用的扩展。![](image/B19755_09_25.jpg)
- en: Figure 9.25 – Enabling the Tabnine extension
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.25 – 启用Tabnine扩展
- en: 'Scroll through the list of extensions to find the **Tabnine: AI Autocomplete
    & Chat for Javascript, Python, Typescript, PHP, Go, Java & more** extension. Right-click
    on the extension and then select **Enable** from the list of options available
    in the context menu.'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '滚动浏览扩展列表，找到**Tabnine: AI Autocomplete & Chat for Javascript, Python, Typescript,
    PHP, Go, Java & more**扩展。右键点击该扩展，然后从上下文菜单中选择**启用**。'
- en: Note
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: Make sure that the setup is complete before proceeding. In some cases, VS Code
    may prompt you to restart the application. If prompted, go ahead and restart VS
    Code.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，确保设置已经完成。在某些情况下，VS Code可能会提示你重新启动应用程序。如果有提示，请继续并重新启动VS Code。
- en: With our AI-powered extension enabled already, let’s proceed by creating a new
    file named **tabnine.ps1**.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的AI扩展已经启用的情况下，接下来我们将创建一个名为**tabnine.ps1**的新文件。
- en: 'Type the following single-line comment in the first line of our script:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的脚本的第一行键入以下单行注释：
- en: '[PRE14]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Press *Enter*. You should see the following suggested code (or similar) generated
    automatically:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*Enter*。你应该会看到以下自动生成的建议代码（或类似代码）：
- en: '[PRE15]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Amazing, right?
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 很棒吧？
- en: Note
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that you might get a different suggestion while working on this example.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在进行此示例时，您可能会收到不同的建议。
- en: Press *Tab* to accept the suggestion and complete the code.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*Tab*键接受建议并完成代码。
- en: 'Now, type the following comment in a new line:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在新的一行中键入以下注释：
- en: '[PRE16]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Press *Enter*. You should see the following suggested code generated automatically:![](image/B19755_09_26.jpg)
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*Enter*。你应该会看到自动生成的以下建议代码：![](image/B19755_09_26.jpg)
- en: Figure 9.26 – Tabnine suggesting a line of code
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.26 – Tabnine建议的代码行
- en: Here, we can see one of the suggestions generated by Tabnine. Note that you
    might get a different suggestion while working on this example.
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到Tabnine生成的一个建议。请注意，在进行此示例时，您可能会收到不同的建议。
- en: Important note
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Do not press *Tab* yet as we will be checking the other suggestions first!
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 还不要按*Tab*，因为我们将先检查其他建议！
- en: Press the right arrow key (*→*) a few times to see other suggestions, similar
    to what we have in *Figure 9**.27*:![](image/B19755_09_27.jpg)
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下右箭头键（*→*）几次，以查看其他建议，类似于*图 9.27*中所示：![](image/B19755_09_27.jpg)
- en: Figure 9.27 – Checking the other suggestions using the arrow key
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.27 – 使用箭头键检查其他建议
- en: Press *Tab* to accept a suggestion similar to what we have in *Figure 9**.27*.
    If there’s an extra line (at the end) with triple backticks (**[PRE17]
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 按下*Tab*键接受类似于*图 9.27*中所示的建议。如果末尾有一行多余的三重反引号（**[PRE17]）。
- en: 'Generate Terraform code to create the following resources in GCP:'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 生成Terraform代码以在GCP中创建以下资源：
- en: '- a VPC named vpc-01 with a single subnet subnet-01'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 一个名为vpc-01的VPC，包含一个子网subnet-01'
- en: '- the VPC vpc-01 should have the auto create subnetworks configuration set
    to false'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- VPC vpc-01的自动创建子网配置应设置为false'
- en: '- the subnet subnet-01 should have the following IP CIDR range: 10.1.0.0/20'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 子网subnet-01应具有以下IP CIDR范围：10.1.0.0/20'
- en: Make sure that the generated Terraform code is valid
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保生成的Terraform代码有效
- en: '[PRE18]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Update the previous answer by using "us-central1" for the region
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用“us-central1”作为区域来更新之前的答案
- en: '[PRE19]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Draw a diagram to help visualize how this network environment looks like
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 绘制一张图来帮助可视化这个网络环境的样子
- en: '[PRE20]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: https://github.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud/blob/main/ch04/pentest_lab/attacker_vm/main.tf
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: https://github.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud/blob/main/ch04/pentest_lab/attacker_vm/main.tf
- en: '```'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: Copy the code (from the browser) and paste the Terraform template code to the
    **copilot_labs.tf** file (in VS Code) we created in an earlier step.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将代码（从浏览器中）复制并粘贴到我们在前面步骤中创建的**copilot_labs.tf**文件（在VS Code中）。
- en: Click the **GitHub Copilot Labs** icon in the sidebar on the left side of the
    VS Code window.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击VS Code窗口左侧边栏中的**GitHub Copilot Labs**图标。
- en: Highlight the code corresponding to the resource block for creating the **vm-kali**
    attacker VM instance:![](image/B19755_09_33.jpg)
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 突出显示创建**vm-kali**攻击者虚拟机实例的资源块对应的代码：![](image/B19755_09_33.jpg)
- en: Figure 9.33 – Explaining the highlighted code with GitHub Copilot Labs
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.33 – 使用GitHub Copilot Labs解释突出显示的代码
- en: 'Make sure that **Explain code** is selected before clicking the **Ask Copilot**
    button. Clicking the **Ask Copilot** button will produce the following result:'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保在点击**Ask Copilot**按钮之前选择了**Explain code**。点击**Ask Copilot**按钮将产生以下结果：
- en: '![](image/B19755_09_34.jpg)'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_09_34.jpg)'
- en: Figure 9.34 – Result after clicking the Ask Copilot button
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.34 – 点击Ask Copilot按钮后的结果
- en: Here, we can see that we are able to use GitHub Copilot to help us interpret
    and explain an existing block of code. Imagine using this on longer and more complex
    code bases! Amazing, right? Reading code is equally as important as writing code.
    As you get to work with a larger team while building complex penetration testing
    lab environments, you’ll realize that you’ll be spending more time reading code
    (written by other members) than writing new code.
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到我们能够使用GitHub Copilot来帮助我们解释和说明现有的代码块。试想一下在更长、更复杂的代码库中使用这个工具！很棒吧？阅读代码和编写代码同样重要。当你在构建复杂的渗透测试实验室环境时，与更大的团队合作，你会意识到你花更多时间阅读代码（由其他成员编写）而不是编写新的代码。
- en: Important note
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'We won’t dive deep into the features of the GitHub Copilot Labs extension in
    this book. Feel free to check the following link for more information on this
    topic: [https://githubnext.com/projects/copilot-labs/](https://githubnext.com/projects/copilot-labs/).'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本书中不会深入探讨GitHub Copilot Labs扩展的功能。如果您需要更多信息，请随时查看以下链接：[https://githubnext.com/projects/copilot-labs/](https://githubnext.com/projects/copilot-labs/)。
- en: At this point, we should have a good idea of how AI-powered tools can help us
    read and write IaC template code faster. Before we end this section, it is important
    to note that while these tools can certainly speed up the generation and interpretation
    of code, their output may sometimes contain inaccuracies, suboptimal configurations,
    or even security vulnerabilities. That said, it is essential that we exercise
    caution when using these tools.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们应该已经对AI驱动的工具如何帮助我们更快地读取和编写IaC模板代码有了一个清晰的了解。在本节结束之前，重要的是要注意，尽管这些工具确实能加速代码的生成和解释，但它们的输出有时可能包含不准确、次优配置甚至安全漏洞。因此，在使用这些工具时，我们必须谨慎行事。
- en: Recognizing relevant considerations and practical strategies when building and
    automating lab environments
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别在构建和自动化实验室环境时需要考虑的相关事项和实际策略
- en: We are down to the last major section of this book! In the previous few sections
    of this chapter, we learned how to use various AI-powered solutions and tools
    to accelerate and automate relevant tasks when building lab environments. In addition
    to the strategies and solutions we have discussed already, we have a few more
    considerations and recommended practices we must take into account when building
    penetration testing lab environments in the cloud.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 本书已经进入最后一个主要章节！在本章前面的几个部分中，我们学习了如何使用各种AI驱动的解决方案和工具来加速和自动化构建实验室环境时的相关任务。除了我们已经讨论过的策略和解决方案外，在构建云端渗透测试实验室环境时，还有一些我们必须考虑的事项和推荐的实践。
- en: 'Here is a quick list of the things we should consider and plan for when designing
    lab environments:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这是设计实验室环境时我们应考虑和规划的事项的快速列表：
- en: '**Identifying the purpose of the lab**: Before designing and building a lab
    environment, it is important that we identify why we are building the lab in the
    first place. We need to know how the lab will be used as this will dictate the
    necessary resources and configurations required for the lab environment. For one
    thing, it’s possible that we could be building a lab environment specifically
    for practicing **exploit development**. Maybe we are building a lab environment
    for **red teams** and **blue teams** to simulate real-world attack and defense
    scenarios. It is also possible that we are building a lab environment to test
    AI-powered penetration testing tools such as **PentestGPT**. Given that there
    are various reasons for building a lab, it is essential that we identify and understand
    the purpose of what we’ll be setting up so that we can design the best environment
    for our needs.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确定实验室的目的**：在设计和构建实验室环境之前，重要的是我们要明确为何要构建实验室。我们需要了解实验室的使用目的，因为这将决定实验室环境所需的资源和配置。例如，可能我们是专门为**漏洞开发**而构建实验室环境。也许我们正在为**红队**和**蓝队**构建实验室环境，以模拟现实世界中的攻防场景。还可能我们是在构建一个实验室环境，用于测试AI驱动的渗透测试工具，如**PentestGPT**。考虑到构建实验室的目的多种多样，明确并理解我们要设置的实验室目的非常重要，以便设计出最符合需求的环境。'
- en: '**Identifying the number of users of the lab environment**: Lab resources may
    be shared (or not shared) by multiple lab users playing the role of the attacker.
    If the penetration testing lab environment is shared, the overall cost of running
    the lab environment may be lower. However, this may affect the experience of the
    lab users trying to attack and compromise the same set of resources.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确定实验室环境的用户数量**：实验室资源可能由多个实验室用户共享（或不共享），这些用户扮演攻击者的角色。如果渗透测试实验室环境是共享的，那么运行实验室环境的整体成本可能会较低。然而，这可能会影响尝试攻击并妥协相同资源集的实验室用户的体验。'
- en: '**Identifying the lab environment size**: Penetration testing lab environments
    don’t need to have the same size network environment as an enterprise company.
    That’s because having more resources would entail a higher cost associated with
    running the lab environment in the cloud.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确定实验室环境的规模**：渗透测试实验室环境不需要与企业公司的网络环境规模相同。这是因为拥有更多资源会带来更高的成本，尤其是在云中运行实验室环境时。'
- en: '**Identifying which attacks or techniques are not allowed in cloud environments**:
    Understanding which attacks and techniques are harmful to the lab environment
    and prohibited by the cloud provider is critical. As discussed in the *Examining
    the considerations when building penetration testing lab environments in the cloud*
    section of *[Chapter 1](B19755_01.xhtml)*, *Getting Started with Penetration Testing
    Labs in the Cloud*, cloud providers have policies and guidelines that we need
    to review before doing penetration tests on applications running in the cloud.
    If you don’t follow these guidelines, your cloud account might get suspended or
    even terminated!'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**识别哪些攻击或技术在云环境中是不允许的**：了解哪些攻击和技术对实验室环境有害并被云服务提供商禁止是至关重要的。如在*《构建云中渗透测试实验室环境时需要考虑的因素》*章节中所讨论的内容，*《云中渗透测试实验室入门》*一书提到，云服务提供商有一些政策和指南，在进行云中运行的应用程序渗透测试之前，我们需要先进行审查。如果不遵循这些指南，你的云账户可能会被暂停甚至终止！'
- en: 'Surprised to see just four considerations? Of course, there’s more where they
    came from! In addition to what was just discussed, we need to be mindful of the
    following implementation considerations and recommended practices as well:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 看到只有四个考虑因素感到惊讶吗？当然，这只是其中的一部分！除了刚才讨论的内容外，我们还需要注意以下实施考虑事项和推荐实践：
- en: '**Creating custom vulnerable applications versus using existing vulnerable
    applications**: By designing our own vulnerable-by-design applications, we have
    full control over the complexity along with the types of security weaknesses,
    vulnerabilities, and misconfigurations present in the application. However, one
    of the major downsides of creating custom applications is that this requires additional
    time and effort, especially if we need to prepare these from scratch. On the other
    hand, using existing vulnerable containers or applications (such as **Metasploitable**
    and **OWASP WebGoat**) can speed things up a bit during the preparation of lab
    environments.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建自定义漏洞应用程序与使用现有漏洞应用程序**：通过设计我们自己的“设计即漏洞”应用程序，我们可以完全控制应用程序中的复杂性以及安全弱点、漏洞和配置错误的类型。然而，创建自定义应用程序的一个主要缺点是这需要额外的时间和精力，尤其是当我们需要从零开始准备这些应用程序时。另一方面，使用现有的漏洞容器或应用程序（例如**Metasploitable**和**OWASP
    WebGoat**）可以在准备实验室环境时加速一些进程。'
- en: '**Identifying the best way to automate certain components of the lab environment**:
    There are various ways and tools to automate the setup and configuration of lab
    resources and components. Instead of just using Terraform to set up cloud resources,
    it might make sense to use tools such as **Ansible** (or other alternatives) for
    configuration management as well. Here, we can utilize more than one tool. Some
    tools can focus on infrastructure provisioning while other tools take care of
    configuration management. By strategically selecting and combining tools, we can
    leverage their unique strengths when building various components of our penetration
    testing lab environment.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确定自动化实验室环境某些组件的最佳方式**：有各种方法和工具可以自动化实验室资源和组件的设置与配置。与其仅仅使用Terraform来设置云资源，可能还需要使用像**Ansible**（或其他替代工具）进行配置管理。在这里，我们可以使用不止一个工具。一些工具可以专注于基础设施提供，而其他工具则处理配置管理。通过战略性地选择和组合工具，我们可以在构建渗透测试实验室环境的不同组件时，充分利用它们的独特优势。'
- en: '**Providing the lab users the ability to reset specific components in the lab
    setup**: While using the penetration testing lab environments, lab users playing
    the role of the attacker may encounter scenarios where they would need to restore
    a specific component or resource to its initial state. That said, a “reset” button
    (or an alternative solution) for restoring specific VM instances and other cloud
    resources to their initial state would be useful. In case you are wondering what
    they would do next... of course, they would try attacking and compromising these
    resources again!'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为实验室用户提供重置实验室设置中特定组件的功能**：在使用渗透测试实验室环境时，扮演攻击者角色的实验室用户可能会遇到需要将特定组件或资源恢复到初始状态的情况。因此，一个用于将特定虚拟机实例和其他云资源恢复到初始状态的“重置”按钮（或其他替代解决方案）会很有用。如果你在想他们接下来会做什么...当然，他们会再次尝试攻击并入侵这些资源！'
- en: '**Understanding cloud platform differences**: Understanding the major and minor
    differences between various cloud platforms is critical as this will affect how
    we design and implement our penetration testing lab environments. In addition
    to this, we need to stay up to date with the announcements from these cloud providers
    as they constantly update their services, features, pricing models, and even the
    security defaults of the cloud resources.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**理解云平台差异**：了解不同云平台之间的主要和次要差异至关重要，因为这将影响我们如何设计和实现渗透测试实验室环境。除此之外，我们还需要时刻关注这些云服务提供商的公告，因为他们会不断更新服务、功能、定价模型，甚至是云资源的安全默认设置。'
- en: '**Enforcing a Code of Conduct**: Maintaining a **Code of Conduct** for lab
    users helps set clear expectations and guidelines to govern their behavior while
    performing penetration testing activities and simulations inside the environment.
    This document should outline what’s allowed and what’s not allowed inside the
    lab set up in the cloud account. You could also set up and install various monitoring
    tools to quickly identify any potential violations and ensure the compliance of
    the lab users.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**执行行为规范**：为实验室用户维护**行为规范**有助于明确期望并为其在实验室环境中进行渗透测试活动和模拟时的行为制定指导方针。本文件应概述在云账户中设置的实验室内允许和不允许的事项。你还可以设置和安装各种监控工具，以便快速识别任何潜在违规行为，并确保实验室用户遵守规范。'
- en: '**Documenting the setup**: Proper documentation can help onboard new members
    who will also be maintaining the same lab environment and help troubleshoot issues
    faster. In addition to these, a well-documented setup promotes consistency across
    multiple deployments or iterations of the lab. This will help ensure that the
    lab is (mis)configured the way it should be. Note that this is not just about
    preparing detailed documentation with diagrams and step-by-step instructions on
    how each component of the lab environment is configured. This also includes writing
    self-documenting code, preparing automated tests as needed, and following the
    best practices when using version control systems (such as **Git**) to manage
    the automation scripts and IaC templates.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档化设置**：适当的文档可以帮助新成员快速上手，他们也将维护相同的实验室环境，并能更快地解决问题。除此之外，良好的文档化设置能在多个部署或迭代的实验室中促进一致性。这将有助于确保实验室的配置是（误）按照预期方式进行的。请注意，这不仅仅是准备包含图示和逐步说明每个实验室组件如何配置的详细文档。这还包括编写自文档化代码，按需准备自动化测试，并在使用版本控制系统（如**Git**）管理自动化脚本和IaC模板时遵循最佳实践。'
- en: There’s definitely more we can add here, but these should do the trick for now.
    Feel free to read this section twice (or as many times as needed!) as these considerations
    and practical strategies will help you manage the risks and challenges involved
    when running penetration testing labs in the cloud.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 这里确实还有更多内容可以添加，但这些应该足够应付当前的需求了。可以随时反复阅读这一部分（或者根据需要阅读多次！），因为这些考虑因素和实践策略将帮助你管理在云中运行渗透测试实验室时涉及的风险和挑战。
- en: Summary
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we took a closer look at how we can increase the complexity
    and difficulty of the penetration testing lab environments we set up in the previous
    chapters of this book. In addition to this, we learned how to utilize various
    AI-powered solutions such as ChatGPT, GitHub Copilot, Amazon CodeWhisperer, and
    Tabnine to significantly speed up relevant tasks when building these vulnerable-by-design
    labs. These include estimating the cost of running these labs in the cloud, generating
    automation scripts and IaC templates, and explaining existing code written by
    other professionals. We ended the chapter by tackling relevant recommendations,
    considerations, and strategies when building penetration testing lab environments
    in the cloud.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入探讨了如何增加前几章中设置的渗透测试实验室环境的复杂性和难度。此外，我们还学习了如何利用各种基于AI的解决方案，如ChatGPT、GitHub
    Copilot、Amazon CodeWhisperer和Tabnine，显著加快在构建这些有设计缺陷的实验室时的相关任务。这些任务包括估算在云中运行这些实验室的成本、生成自动化脚本和IaC模板，以及解释其他专业人士编写的现有代码。我们在本章的结尾讨论了在云中构建渗透测试实验室时的相关建议、注意事项和策略。
- en: You’ve finally reached the end of this book! Congratulations on completing all
    the chapters along with the hands-on examples and solutions. Close your eyes and
    take a moment to reflect on everything you have learned. I hope this book inspires
    you to embark on many more adventures to explore this fascinating world of cybersecurity.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 你终于读完了这本书！恭喜你完成了所有章节以及实际操作的例子和解决方案。闭上眼睛，花点时间回顾一下你所学到的一切。我希望这本书能够激励你开启更多的冒险，去探索这个迷人的网络安全世界。
