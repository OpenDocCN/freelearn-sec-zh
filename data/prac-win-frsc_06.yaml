- en: Chapter 6. Filesystem Analysis and Data Recovery
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 文件系统分析与数据恢复
- en: Although there are many automated and commercial tools available nowadays, understanding
    how these tools perform can distinguish one from another, and this can provide
    great support during expert testimony in the courtroom. Filesystem analysis and
    data recovery are considered as the main categories in the digital forensics process.
    Extracting files from a storage device or recovering deleted ones with evidential
    related data can solve a case.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管现在有许多自动化和商业工具可供使用，理解这些工具的工作原理可以将它们区分开来，并在法庭上的专家证词中提供很大支持。文件系统分析和数据恢复被认为是数字取证过程中的主要类别。从存储设备中提取文件或恢复已删除的文件及其相关证据数据，能够解决案件。
- en: 'In this chapter, we will go through two different filesystems: the FAT and
    the NTFS. We will basically explain how the files are structured in each one and
    how the recovery process of deleted files actually works. We will start with the
    famous TSK or The Sleuth Kit and how its command line tools are categorized, as
    they are based on each layer in the hard drive or the forensic image. After this,
    we will discuss Autopsy, the TSK graphical user interface. At the end of this
    chapter, we will show you Foremost of these, which is the Linux-based file carving
    tool that is used to recover files based on their signature.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍两种不同的文件系统：FAT和NTFS。我们将基本上解释每个文件系统中文件的结构，以及删除文件的恢复过程是如何工作的。我们将从著名的TSK（The
    Sleuth Kit）开始，讲解其命令行工具如何分类，因为这些工具是基于硬盘或取证镜像中的每一层。之后，我们将讨论TSK的图形用户界面——Autopsy。最后，我们将向您展示Foremost，它是一个基于Linux的文件雕刻工具，用于根据文件签名恢复文件。
- en: Hard drive structure
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬盘结构
- en: 'Before we start explaining the different filesystem structures, we need to
    illustrate the different parts in a partitioned hard drive in Windows OS. The
    following figure illustrates simply the structure of a whole partitioned hard
    drive:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始解释不同的文件系统结构之前，我们需要说明Windows操作系统中分区硬盘的不同部分。下图简单地展示了整个分区硬盘的结构：
- en: '![Hard drive structure](img/image_06_001.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![硬盘结构](img/image_06_001.jpg)'
- en: Simple hard drive logical parts
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的硬盘逻辑分区
- en: Master boot record
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主引导记录
- en: The master boot record is the first sector (512 bytes) of the hard drive. It
    contains, besides the boot code, all the information about the hard drive. One
    of the important pieces of information that can be found in the MBR is the partition
    table, which contains information about the partition structure in the hard drive,
    and for each partition, it can tell where it starts, its size, and type.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 主引导记录是硬盘的第一个扇区（512字节）。它包含除了引导代码之外的所有硬盘信息。在MBR中可以找到的一项重要信息是分区表，它包含关于硬盘分区结构的信息，对于每个分区，它能告诉分区的起始位置、大小和类型。
- en: The investigator can check the existing partition with the information in the
    MBR and the printed size of the hard drive for a match. If there is some missing
    space, the handler may assume the presence of an intended action to hide some
    space contains usually some related important information.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 调查员可以通过MBR中的信息以及硬盘的打印大小来检查现有的分区是否匹配。如果有部分空间丢失，处理程序可能会假设有意图的操作隐藏了一些包含通常相关重要信息的空间。
- en: Partition boot sector
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分区引导扇区
- en: The first sector (512 bytes) of each partition contains information, such as
    the type of the filesystem, the booting code location, the sector size, and the
    cluster size in reference to sector.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每个分区的第一个扇区（512字节）包含诸如文件系统类型、引导代码位置、扇区大小和与扇区相关的簇大小等信息。
- en: The filesystem area in partition
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分区中的文件系统区域
- en: If the user formatted the partition, for example, in the NTFS filesystem, some
    sectors at the beginning of the partition will be reserved for the **Master File
    Table** or **MFT**. MFT is the location that contains the metadata about the files
    in the system. Each entry is 1KB in size, and when a user deletes a file, the
    file's entry in the MFT is marked as unallocated. However, the file's information
    still exists until another file uses this MFT entry and overwrites the previous
    file's information.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户将分区格式化为例如NTFS文件系统，分区开始的某些扇区将被保留给**主文件表**（**MFT**）。MFT是存储系统中文件元数据的位置。每个条目的大小为1KB，当用户删除文件时，文件在MFT中的条目会被标记为未分配。然而，文件的信息仍然存在，直到另一个文件使用该MFT条目并覆盖之前文件的信息。
- en: Normal backups usually store the allocated entries only and ignore the unallocated
    areas in the MFT. This won't be helpful in recovering deleted files during the
    analysis step.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 正常的备份通常只存储已分配的条目，忽略 MFT 中的未分配区域。这在分析步骤中无法帮助恢复已删除的文件。
- en: Data area
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据区
- en: After reserving the filesystem's area, the rest of the partition space will
    be available for the file's data, which contains the actual data of the file.
    Each unit of the data area is called **cluster** or **block**. In the same way,
    if a user deletes a file from the hard drive, the clusters that contain data that
    is related to this file will be marked as unallocated, and the data will exist
    until new data that is related to a new file overwrites it.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在保留文件系统区域后，分区的其余空间将用于存储文件的数据，这些数据包含文件的实际内容。数据区的每个单元称为**簇**或**块**。同样，如果用户从硬盘中删除文件，包含与该文件相关的数据的簇将被标记为未分配，数据将一直存在，直到新的文件数据覆盖它。
- en: 'These clusters are considered either allocated or unallocated:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些簇被视为已分配或未分配：
- en: '**Allocated cluster**: This is a cluster that contains data that is related
    to a file that exists and has an entry in the filesystem MFT area'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已分配簇**：这是包含与现有文件相关的数据的簇，并且该文件在文件系统 MFT 区域中有一个条目。'
- en: '**Unallocated cluster**: This is a cluster that isn''t connected to an existing
    file and it may be any of the following:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**未分配簇**：这是一个未连接到现有文件的簇，它可能是以下任何一种：'
- en: '**Empty**: This means that it has no data of a deleted file or its content
    has been wiped'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**空**：这意味着没有已删除文件的数据，或者其内容已被擦除。'
- en: '**Not** **empty**: This contains data that is related to a deleted file and
    still hasn''t been overwritten with a new file''s data.'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非空**：这包含与已删除文件相关的数据，并且仍未被新文件的数据覆盖。'
- en: While running a backup tool to the system, it backs up only the files that exist
    in the current filesystem MFT area and identifies its related cluster in the data
    area as allocated. This is NOT a forensically sound image which needs to acquire
    all the hard drive areas even if it was deleted by the user. That is why, when
    you backup your system using no compression, the size of the backup will be the
    size of the used space in the partition.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行备份工具时，它只备份当前文件系统 MFT 区域中存在的文件，并将其相关的簇标记为数据区中的已分配。这不是一个取证上有效的影像，它需要获取所有硬盘区域，即使这些区域是用户删除的。这就是为什么当你使用无压缩方式备份系统时，备份的大小将是分区中已使用空间的大小。
- en: However, when using forensic imaging techniques, the size of the resulting image
    will be equal to exactly the size of the source; it will either comprise the whole
    hard drive or a single partition.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当使用取证影像技术时，生成的影像的大小将与源的大小完全相等；它将包括整个硬盘或单个分区。
- en: In the following section, we will quickly overview how FAT and NTFS work.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将快速概述 FAT 和 NTFS 的工作原理。
- en: The FAT filesystem
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FAT 文件系统
- en: FAT or File Allocation Table became famous with the announcement of the DOS
    operating system from Microsoft in 1980\. After this, FAT went through many improvements
    trying to make it adapt with the rapidly improving technology. So, we can see
    FAT12, FAT16, FAT32, and exFAT. Each version overcame some of the limitations
    of the filesystem until the announcement of NTFS filesystem.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: FAT 或文件分配表随着 1980 年微软发布 DOS 操作系统而广为人知。此后，FAT 经历了许多改进，试图使其适应快速发展的技术。因此，我们可以看到
    FAT12、FAT16、FAT32 和 exFAT。每个版本都克服了文件系统的一些限制，直到 NTFS 文件系统的发布。
- en: FAT components
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FAT 组件
- en: 'FAT partition contains five main areas. They comprise the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: FAT 分区包含五个主要区域。它们包括以下内容：
- en: '**Boot sector**: This is the first sector of the partition that is loaded in
    memory. If this partition is the active partition, it contains information such
    as, but not limited to, the following:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**引导扇区**：这是分区的第一个扇区，加载到内存中。如果这个分区是活动分区，它包含的信息包括但不限于以下内容：'
- en: '**Jump code**: This is the location of the bootstrap and OS initialization
    code'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跳转代码**：这是引导程序和操作系统初始化代码的位置。'
- en: '**Sector size**: This is almost fixed (512 bytes)'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扇区大小**：这是几乎固定的（512 字节）。'
- en: '**Cluster size**: This is in sectors (sectors/clusters)'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**簇大小**：这是以扇区为单位（扇区/簇）。'
- en: '**Number of sectors**: The total number of sectors in the partition'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扇区数量**：分区中的扇区总数。'
- en: '**Number of root entries**: This value is used with FAT12 and FAT16 only'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**根目录项数量**：此值仅在 FAT12 和 FAT16 中使用。'
- en: '**FAT table**: This is the filesystem, which is named after this area. Starting
    from the first cluster of the file, which can be found in the root directory entry
    of a file, the FAT area tracks the rest of the file in the data area. Each data
    cluster, for example, cluster X is the first cluster that contains the data of
    file Y, has an entry in the FAT area. This entry can have four values:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FAT 表**：这是文件系统，其名称来源于该区域。从文件的第一个簇开始，可以在文件的根目录项中找到，FAT 区域跟踪文件在数据区域中的其余部分。例如，簇
    X 是包含文件 Y 数据的第一个簇，它在 FAT 区域中有一个条目。该条目可以有四个值：'
- en: '0: This indicates that cluster X is an unallocated cluster'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0：这表示簇 X 是一个未分配的簇
- en: '**Number**: This indicates the number of the next cluster following cluster
    X, and it contains the next part of file Y'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Number**：这表示簇 X 后续簇的编号，它包含文件 Y 的下一部分'
- en: '**EOF**: This is end of the file, and it indicates that cluster X is the last
    cluster that contains the data of file Y, End of File Y'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**EOF**：这是文件结束符，它表示簇 X 是包含文件 Y 数据的最后一个簇，即文件 Y 的结束。'
- en: '**BAD**: This indicates that cluster X is a bad cluster, and it cannot be used
    or accessed by the operating system. This data tracking schema is called the FAT
    chain, and it must exist for each file.'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BAD**：这表示簇 X 是一个坏簇，操作系统不能使用或访问它。此数据跟踪模式被称为 FAT 链，并且每个文件必须存在该链。'
- en: '**Another copy of the FAT table**: This is used if the first FAT got corrupted.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FAT 表的另一个副本**：如果第一个 FAT 损坏，则使用此副本。'
- en: '**Root directory entries**: This is when each entry describes either directory
    or file in the filesystem, and its location from the root directory. Each entry
    contains information, such as the following:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**根目录项**：每个条目描述文件系统中的目录或文件，以及它从根目录的起始位置。每个条目包含以下信息：'
- en: Short File name with an 8.3 naming schema; eight characters for the name and
    three characters for the extension
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 8.3 命名规则的短文件名；文件名有 8 个字符，扩展名有 3 个字符
- en: Long file name if the file name exceeds the 8.3 schema, it will reserve another
    complete entry to store the file name
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 长文件名：如果文件名超过 8.3 规则，则会保留另一个完整条目来存储文件名
- en: Entry's status such as directory, file, or deleted
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条目的状态，如目录、文件或已删除
- en: Some file properties, such as read only, hidden and archive
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些文件属性，如只读、隐藏和归档
- en: File size, which is not important in the case of a directory
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件大小，在目录的情况下不重要
- en: Timestamps of the file
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件的时间戳
- en: The address of the first cluster, which contains the file's data
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含文件数据的第一个簇的地址
- en: As we can see no modern properties can be added to the file, such as compression,
    permissions, and encryption, which was one of the FAT filesystem limitations.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正如我们所看到的，无法向文件添加现代属性，如压缩、权限和加密，这也是 FAT 文件系统的局限之一。
- en: '**Data area**: This is the rest of the partition. It contains the actual contents
    of the files in the partition, and it is divided in clusters with a size mentioned
    in the boot sector. Cluster numbering starts with cluster 2, so cluster 0 and
    cluster 1 don''t exist.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据区域**：这是分区的其余部分。它包含分区中文件的实际内容，并且它被分为簇，簇的大小在引导扇区中定义。簇编号从簇 2 开始，因此簇 0 和簇 1
    不存在。'
- en: 'For an example of how this works, we have created table 1\. Each major column
    represents one of the FAT areas, excluding the boot sector. Now, let''s suppose
    that the first file, `F1.txt`, has a size of 1KB and starts at cluster 2:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个工作原理的示例，我们创建了表 1。每一列代表 FAT 区域之一，不包括引导扇区。现在，假设第一个文件 `F1.txt` 的大小为 1KB，并且从簇
    2 开始：
- en: Cluster 2 contains the first part of the `F1.txt` file
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 簇 2 包含 `F1.txt` 文件的第一部分
- en: In the FAT entry that describes cluster 2, we will find the next cluster in
    the chain which, in our case, is cluster 3
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在描述簇 2 的 FAT 条目中，我们将找到链中下一个簇，在我们的例子中是簇 3
- en: At cluster 3, we can find the next part of the `F1.txt` file
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在簇 3 中，我们可以找到 `F1.txt` 文件的下一部分
- en: In the FAT entry that describes cluster 3, we can find EoF because no more data
    in the `F1.txt` file needs to be stored
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在描述簇 3 的 FAT 条目中，我们可以找到 EOF，因为 `F1.txt` 文件中不再需要存储其他数据。
- en: 'The same can be applied to the other files:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 同样适用于其他文件：
- en: '![FAT components](img/image123.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![FAT 组件](img/image123.jpg)'
- en: The FAT filesystem
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: FAT 文件系统
- en: FAT limitations
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FAT 的局限性
- en: 'FAT had some serious limitations, which raised the need for a more advanced
    filesystem:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: FAT 存在一些严重的局限性，这引发了对更先进文件系统的需求：
- en: 'The number after each FAT, such as `FAT12`, `FAT16`, or `FAT32`, represents
    the number of bits that are assigned to address clusters in the FAT table:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个FAT后面的数字，如`FAT12`、`FAT16`或`FAT32`，代表在FAT表中分配给簇的位数：
- en: '**FAT12**: This is 2^12 = 4,096 clusters at the maximum.'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FAT12**：这是2^12 = 4,096个簇的最大值。'
- en: '**FAT16**: This is 2^16 = 65,536 clusters at the maximum.'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FAT16**：这是2^16 = 65,536个簇的最大值。'
- en: '**FAT32**: This is 2^32 = 4,294,967,296 clusters, but it has 4 reserved bits,
    so it is actually 28 bits. So, 2^28 = 268,435,456 at the maximum.'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FAT32**：这是2^32 = 4,294,967,296个簇，但它有4个保留位，因此实际上是28位。所以，2^28 = 268,435,456为最大值。'
- en: '**exFAT**: This uses the whole 32 bits for addressing.'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**exFAT**：使用全部32位进行寻址。'
- en: The maximum partition size in FAT32 = the maximum number of clusters, which
    is 268,435,456, multiplied by the maximum cluster size, which is 23 KB = 8,589,934,592
    KB = 8 TB.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FAT32中的最大分区大小 = 最大簇数，即268,435,456，乘以最大簇大小，即23 KB = 8,589,934,592 KB = 8 TB。
- en: For the maximum file size in FAT32, as an example, the bit file used to store
    the file size in bytes is 32 bit long. The maximum number this can store is 2^32=
    4,294,967,296 bytes = 4 GB. So, the maximum file size that FAT32 can handle is
    4 GB. That is why we can't store files whose size exceeds 4 GB in the FAT32 filesystem.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以FAT32为例，FAT32中的最大文件大小，存储文件大小的比特字段为32位。它能够存储的最大数字是2^32 = 4,294,967,296字节 = 4
    GB。所以，FAT32能够处理的最大文件大小为4 GB。这就是为什么我们无法在FAT32文件系统中存储大于4 GB的文件。
- en: Properties such as access control and encryption weren't available in the FAT
    filesystem.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 诸如访问控制和加密等属性在FAT文件系统中不可用。
- en: The NTFS filesystem
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NTFS文件系统
- en: '**NTFS** or **New Technology Filesystem** is the default filesystem in Windows
    NT as a result of the storage capacity increasing and the need for a more secure,
    scalable, and advanced filesystem. NTFS overcame the FAT limitations and was more
    suitable for high storage capacity. In NTFS, everything is a file including the
    filesystem area itself, as we will see in the following section.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**NTFS**或**新技术文件系统**是Windows NT中的默认文件系统，源于存储容量的增加，以及对更安全、可扩展和高级文件系统的需求。NTFS克服了FAT的限制，更适合高存储容量。在NTFS中，一切都是文件，包括文件系统区域本身，正如我们将在下一节中看到的。'
- en: NTFS components
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NTFS组件
- en: 'Like FAT and any other filesystem, NTFS has its components as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 像FAT和其他任何文件系统一样，NTFS也有以下组件：
- en: The boot sector is the first sector in the partition, and it contains some information
    about the filesystem itself, such as start code, sector size, cluster size in
    sectors, and the number of reserved sectors. The filesystem area contains many
    files, including the MFT or Master File Table, which contains the metadata of
    the files and directories in the partition. It will be discussed later.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 引导扇区是分区中的第一个扇区，包含有关文件系统本身的一些信息，如启动代码、扇区大小、簇大小以及保留扇区数量。文件系统区域包含许多文件，包括MFT（主文件表），它存储分区中文件和目录的元数据。稍后会详细讨论。
- en: The data area holds the actual contents of the files, and it is divided in clusters
    with a size determined during formatting and mentioned in the boot sector.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据区存储文件的实际内容，并且它被分成簇，簇的大小是在格式化时确定并在引导扇区中标明的。
- en: Master File Table (MFT)
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主文件表（MFT）
- en: As everything in NTFS is a file, the filesystem area is also a single file called
    $MFT. In this file, there is an entry for each file in the partition. This entry
    is 1,024 bytes in size. Actually, $MFT file has an entry for itself. Each entry
    has a header of 42 bytes at the beginning and has a signature of 0xEB52904E, which
    is equivalent to FILE as ASCII.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 由于NTFS中的一切都是文件，因此文件系统区域也是一个名为$MFT的单一文件。在这个文件中，每个分区中的文件都有一个条目。每个条目的大小为1,024字节。实际上，$MFT文件本身也有一个条目。每个条目开头都有一个42字节的头部，并且具有0xEB52904E的签名，这在ASCII中等同于FILE。
- en: The signature also can be BAD, in this case, it indicates an error that occurred
    in this entry. After the header, there will be another 982 bytes left to store
    the file metadata. If there is space left to store the file contents, typically
    in small size files, the file's data is stored in the entry itself and no space
    in the data area is used by this file.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 签名也可以是BAD，这表明此条目发生了错误。头部之后，会有剩余的982字节用于存储文件元数据。如果还有空间存储文件内容，通常是小文件，文件的数据会直接存储在条目中，而不会占用数据区的空间。
- en: Each MFT entry has another substructure called **attributes**. MFT uses attributes
    to store the metadata of the file. Different attribute types can be used in single
    MFT entry. Each attribute is assigned to store different information. For example,
    the Standard Information Attribute contains the timestamp and the size of the
    file, whereas the Data Attribute holds the actual contents of the file.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 MFT 条目都有另一个称为**属性**的子结构。MFT 使用属性来存储文件的元数据。在单个 MFT 条目中可以使用不同类型的属性。每个属性都被指定用于存储不同的信息。例如，标准信息属性包含文件的时间戳和大小，而数据属性则包含文件的实际内容。
- en: 'The attribute can be either of the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 属性可以是以下之一：
- en: '**Resident**: This contains all its data within the MFT entry.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**驻留**：此属性将其所有数据保存在 MFT 条目内。'
- en: '**Non-resident**: Because of the limitation of the MFT size, some attributes
    may need to store their data in the data area. A clear example of this kind of
    attribute is the data attribute.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非驻留**：由于 MFT 大小的限制，一些属性可能需要将其数据存储在数据区。这种属性的一个明显例子就是数据属性。'
- en: Storing the file metadata in attributes creates flexibility for NTFS to add
    more types of attributes that are recognized by the operating system in the future.
    If one file has many attributes and needs more than one MFT entry to store its
    metadata, it can use another entry and link both entries with a sequence number.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件元数据存储在属性中为 NTFS 提供了灵活性，使其能够在未来添加操作系统可以识别的更多属性类型。如果一个文件有多个属性并且需要多个 MFT 条目来存储其元数据，它可以使用另一个条目，并通过序列号将两个条目链接在一起。
- en: The Sleuth Kit (TSK)
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: The Sleuth Kit (TSK)
- en: The Sleuth Kit or TSK is a collection of open source digital forensic tools
    developed by *Brian Carrier* and *Wieste Venema*. TSK can read and parse different
    types of filesystems, such as FAT, NTFS, and EXT. Each area of the hard drive
    in the figure in the *Hard drive structure* section has a set of tools in The
    Sleuth Kit that parses that area and extracts forensically important information
    for the investigator. Usually, each step leads to the next while using TSK in
    analysis.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: The Sleuth Kit（TSK）是由*Brian Carrier* 和 *Wieste Venema* 开发的一组开源数字取证工具。TSK 可以读取并解析不同类型的文件系统，如
    FAT、NTFS 和 EXT。图中硬盘的每个区域在*硬盘结构*部分都有一组工具，这些工具会解析该区域并提取对调查人员重要的取证信息。通常，在分析时使用 TSK
    的每一步都会引导到下一步。
- en: In the upcoming sections, we will go through the different tool sets of The
    Sleuth Kit. We will use an image of the hard drive with Windows 7 installed, which
    shows the results from each part in the hard drive. The image was acquired using
    the FTK Imager lite from a Windows 7 virtual machine with a size of only 15 GB
    and a single NTFS partition.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将详细介绍 The Sleuth Kit 的不同工具集。我们将使用一张安装了 Windows 7 的硬盘映像，展示硬盘各部分的结果。该映像是通过
    FTK Imager lite 从一台 Windows 7 虚拟机获取的，大小仅为 15 GB，并且只有一个 NTFS 分区。
- en: As we will see, TSK tool names are easy to understand as they consist of two
    parts. The first part represents the area or the layer under investigation, such
    as `mm` for media management, `fs` for filesystem, `i` for metadata, and `f` for
    filename layer. The second part is the normal Linux command that reflects the
    effect of this tool, such as ls to list and cat to display the contents, for example,
    the `mmls` tool.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们将看到的，TSK 工具的名称易于理解，因为它们由两部分组成。第一部分代表正在调查的区域或层次，例如 `mm` 表示媒体管理，`fs` 表示文件系统，`i`
    表示元数据，`f` 表示文件名层次。第二部分是正常的 Linux 命令，反映该工具的作用，例如 `ls` 列出和 `cat` 显示内容，例如 `mmls`
    工具。
- en: Volume layer (media management)
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 卷层（媒体管理）
- en: In this area of the hard drive, TSK parses information about the structure of
    the whole hard drive from the **MBR** or **Master Boot Record**, which is the
    first sector of the hard drive. We can parse this area with TSK using different
    tools.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在硬盘的这一部分，TSK 从**MBR**（主引导记录）中解析有关整个硬盘结构的信息，MBR 是硬盘的第一个扇区。我们可以使用 TSK 和不同的工具解析这一部分。
- en: 'The information about each partition is in the hard drive, and it can be determined
    from the partition table at the end of the MBR sector. The offset of each partition
    will be used as an input to the upcoming TSK tools to specify the partition of
    interest. The `mmls` tool is used to list information, such as in the following
    screenshot:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 每个分区的信息都位于硬盘上，并且可以从 MBR 扇区末尾的分区表中确定。每个分区的偏移量将作为输入传递给即将使用的 TSK 工具，用以指定感兴趣的分区。`mmls`
    工具用于列出信息，如下图所示：
- en: '![Volume layer (media management)](img/image_06_002.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![卷层（媒体管理）](img/image_06_002.jpg)'
- en: The mmls tool
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: mmls 工具
- en: 'From the result of running `mmls` against the image, we can see that there
    is only one NTFS partition that starts at sector (2,048). This is the partition
    of interest, so we will use the start sector as the offset with the rest of the
    tools when needed. This also provides the partition table type, which is normal
    DOS in our case here. To display only the allocated volumes, we can use the `-a`
    option:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 从对图像运行 `mmls` 的结果中，我们可以看到只有一个 NTFS 分区，从扇区（2,048）开始。这个分区是我们关注的分区，因此在需要时，我们将使用起始扇区作为其他工具的偏移量。此结果还提供了分区表类型，在我们的例子中为正常的
    DOS 类型。要仅显示已分配的卷，我们可以使用 `-a` 选项：
- en: '![Volume layer (media management)](img/image_06_003.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![卷层（媒体管理）](img/image_06_003.jpg)'
- en: A list allocated volumes only
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 仅列出已分配的卷
- en: 'The next command is `mmcat`, which displays the partition contents as shown
    in the following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个命令是 `mmcat`，它显示分区内容，如下图所示：
- en: '![Volume layer (media management)](img/image_06_004.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![卷层（媒体管理）](img/image_06_004.jpg)'
- en: The mmcat tool
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: mmcat 工具
- en: In the previous figure, we used `mmcat` with the image name `sampleimage.dd`
    and the number of the target partition as in the `mmls` output `02`. Then, we
    pipelined the output to the `hexdump` tool. You can see in the beginning of the
    partition, the volume boot record starts with the NTFS partition signature at
    offset 0x03 with a value of (NTFS) or 0x(4E54465320202020).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，我们使用 `mmcat` 和图像名 `sampleimage.dd` 以及目标分区编号 `mmls` 输出中的 `02`。然后，我们将输出管道传递给
    `hexdump` 工具。你可以看到在分区的开头，卷引导记录以 NTFS 分区签名从偏移量 0x03 开始，值为 (NTFS) 或 0x(4E54465320202020)。
- en: Filesystem layer
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件系统层
- en: 'The TSK tool for this layer parses the filesystem used in the provided partition
    and displays some information about it to the investigator. With this tool, we
    must provide the offset of the target partition from the output of the mmls tool,
    which in our case is (2,048):'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 该层的 TSK 工具解析提供的分区中使用的文件系统，并向调查员显示一些相关信息。使用此工具时，我们必须提供从 mmls 工具输出中获得的目标分区的偏移量，在我们这里是（2,048）：
- en: '![Filesystem layer](img/image_06_005.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![文件系统层](img/image_06_005.jpg)'
- en: The fsstat tool
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: fsstat 工具
- en: We can find the MFT location within the partition, cluster size, and information
    about the NTFS attributes, which may be used later in further analysis.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在分区中找到 MFT 位置、簇大小以及有关 NTFS 属性的信息，这些信息可能在进一步分析中使用。
- en: The metadata layer
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 元数据层
- en: The metadata layer (or inode) parses and describes the information or the metadata
    record of the file as described in the filesystem. Also, the output of this tool
    can be used with other tools to narrow the results for a specific file in the
    image.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 元数据层（或称 inode）解析并描述文件系统中记录的文件信息或元数据。此工具的输出也可以与其他工具一起使用，以便在图像中针对特定文件缩小结果范围。
- en: The `i` character in the commands in this layer stands for inode—the metadata
    unique number of a file in the EXT filesystem.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 此层命令中的 `i` 字符代表 inode——EXT 文件系统中文件的唯一元数据编号。
- en: The `ils` command is used to list the inode numbers of the deleted files in
    the image until told to list all the inode information for all the files in the
    image. All the results of the `ils` are information about the file, including
    the inode of the file, the timestamps (MACB) in Unix time, and size of the file.
    We can use `ils` with the `-m` option to create a compatible output for the `mactime`
    tool in case we need to create a timeline for the file activity in the image.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`ils` 命令用于列出图像中已删除文件的 inode 编号，直到被告知列出图像中所有文件的 inode 信息。`ils` 的所有结果都包含关于文件的信息，包括文件的
    inode、Unix 时间格式的时间戳（MACB）以及文件大小。如果需要为文件活动创建时间线，我们可以使用带有 `-m` 选项的 `ils` 生成与 `mactime`
    工具兼容的输出。'
- en: 'Also, using `--m` will allow us to read the filename as well, as shown in the
    following screenshot:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，使用 `--m` 选项将允许我们读取文件名，如下图所示：
- en: '![The metadata layer](img/image_06_006.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![元数据层](img/image_06_006.jpg)'
- en: ils to list the deleted files
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `ils` 列出已删除文件
- en: The result only shows the deleted files as we can notice the 'dead' status of
    all the files in the results.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 结果仅显示已删除的文件，因为我们可以注意到所有文件在结果中的 'dead' 状态。
- en: istat
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: istat
- en: This is used to parse the MFT or the inode record by its unique metadata number
    and view all the information in the provided record. The resulting information
    is only metadata, so we can find the timestamps, file attributes, and so on, not
    the data itself even if the data is short enough to fit in the 1,024 KB length
    of one MFT record, which is called resident.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具用于通过唯一的元数据编号解析 MFT 或 inode 记录，并查看提供的记录中的所有信息。结果信息仅包含元数据，因此我们可以找到时间戳、文件属性等，但不能看到数据本身，即使数据足够小，可以适应一个
    MFT 记录的 1,024 KB 长度，这种情况称为“驻留”数据。
- en: 'Displaying the data contents of the file can be determined by another tool
    in TSK, which will be discussed next. Each file in the NTFS filesystem has an
    entry of this kind, even the MFT file itself. In the following figure, we will
    list information about the first record number 0, which is the $MFT itself:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 显示文件的数据内容可以通过 TSK 中的另一个工具来确定，接下来将讨论这个工具。NTFS 文件系统中的每个文件都有这种类型的条目，甚至包括 MFT 文件本身。在下面的图中，我们将列出关于第一个记录号
    0 的信息，这就是 $MFT 文件本身：
- en: '![istat](img/image_06_007.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![istat](img/image_06_007.jpg)'
- en: The istat tool to view the metadata of a file
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: istat 工具用于查看文件的元数据
- en: icat
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: icat
- en: 'This is used to view the contents of a specific data unit. It uses the inode
    number as a reference to view the data blocks that are related to this file. In
    the forensic image under investigation, we will view the contents of the $MFT
    file with inode 0:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工具用于查看特定数据单元的内容。它使用 inode 号作为参考，查看与该文件相关的数据块。在正在调查的取证镜像中，我们将查看 inode 0 的 $MFT
    文件内容：
- en: '![icat](img/image_06_008.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![icat](img/image_06_008.jpg)'
- en: Contents of the $MFT file
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: $MFT 文件的内容
- en: 'In some cases, recovery of deleted files will be useful to the case under investigation.
    We can use the icat tool to copy the contents of any deleted file to another file
    in the investigator machine for further analysis. For the $MFT file, there are
    some other tools, which can parse the MFT file individually and list the contents
    of the filesystem in tree view:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，恢复已删除的文件对正在调查的案件会有帮助。我们可以使用 icat 工具将任何已删除文件的内容复制到调查员机器上的另一个文件中以供进一步分析。对于
    $MFT 文件，还有一些其他工具，可以单独解析 MFT 文件并以树状视图列出文件系统的内容：
- en: '![icat](img/image_06_009.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![icat](img/image_06_009.jpg)'
- en: Using icat to copy contents of a deleted file
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 icat 复制已删除文件的内容
- en: ifind
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ifind
- en: During the analysis, if the investigator, for instance, conducted a word search
    and got a hit in one of the data units in the partition, they would now need to
    link this data unit to an entry in the filesystem, and `ifind` is what they need.
    Unlike the previous tools, `ifind` can take a data unit number or filename as
    an input and map this input to the equivalent entry in the filesystem to collect
    other information about this file. In our case, we will try to find the `hiberfile.sys`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析过程中，如果调查员例如进行了一次文字搜索，并且在某个分区的数据单元中找到匹配项，那么他们现在需要将这个数据单元与文件系统中的一个条目关联起来，`ifind`
    正是他们需要的工具。与之前的工具不同，`ifind` 可以接受数据单元号或文件名作为输入，并将该输入映射到文件系统中相应的条目，以收集关于该文件的其他信息。在我们的例子中，我们将尝试找到
    `hiberfile.sys` 文件。
- en: 'To search with the name, we need to use the `--n` option:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 若要通过文件名进行搜索，我们需要使用 `--n` 选项：
- en: '![ifind](img/image_06_010.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![ifind](img/image_06_010.jpg)'
- en: ifind to search by filename
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ifind 按文件名搜索
- en: 'The result shows that the inode number related to the file named `hiberfil.sys`
    is `563`. Using `istat` again to view the information related to this file will
    reveal information about this file:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示，与名为 `hiberfil.sys` 的文件相关的 inode 号是 `563`。再次使用 `istat` 查看与该文件相关的信息，将揭示该文件的详细信息：
- en: '![ifind](img/image_06_011.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![ifind](img/image_06_011.jpg)'
- en: Full information about the file with inode 563
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 inode 563 的文件的完整信息
- en: The `hiberfil.sys` file is the copy of memory stored to the hard drive when
    the user elects to use the hibernate option of the machine in case of a dead system
    analysis. This file can provide a great benefit to the investigator as it provides
    them with a snapshot of the memory during the last usage of hibernation that can
    be provided from the timestamp of this file. As we can see, this file is an allocated
    file, and it can be extracted from the image like we did earlier with the $MFT
    file, and then used in memory analysis.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`hiberfil.sys` 文件是在用户选择使用休眠选项时，将内存的副本存储到硬盘中，用于死机系统分析。该文件对调查员有很大帮助，因为它提供了系统在上次休眠时内存的快照，并且可以从该文件的时间戳中获取。这文件是一个已分配文件，像之前处理
    $MFT 文件一样，它可以从镜像中提取出来，然后用于内存分析。'
- en: 'In case we need to use the ifind tool with the data unit number, we need to
    use the -d option. We will get another unique ID, describing the location of the
    file in the image. This unique ID will be discussed in the next part, the filename
    layer. In this example, we used the data unit ID of 3269280, which is one of the
    data units of the `hiberfil.sys` file:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要使用ifind工具与数据单元号一起使用，则需要使用-d选项。我们将获得另一个唯一ID，描述文件在镜像中的位置。这个唯一ID将在下一部分——文件名层中讨论。在此示例中，我们使用了数据单元ID
    3269280，这是`hiberfil.sys`文件的一个数据单元：
- en: '![ifind](img/image_06_012.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![ifind](img/image_06_012.jpg)'
- en: A data block address with ifind
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ifind进行数据块地址查找
- en: The filename layer
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件名层
- en: Tools work in this layer to list the file structure in the hard drive image.
    Each file will be assigned a unique ID, which can be used with other tools to
    especially target this file.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 工具在此层中工作，用于列出硬盘镜像中的文件结构。每个文件都会分配一个唯一的ID，可以与其他工具结合使用，特别地定位此文件。
- en: 'To list the files under the partition, we only need to provide the partition
    offset to the tool:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出分区下的文件，我们只需提供分区偏移量给工具：
- en: '![The filename layer](img/image_06_013.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![The filename layer](img/image_06_013.jpg)'
- en: The fls tools to browse the partition contents
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 使用fls工具浏览分区内容
- en: In the preceding figure, we can see the deleted `hiberfil.sys` with a metadata
    address of 57745 and the allocated one with a metadata address of 563.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，我们可以看到已删除的`hiberfil.sys`，其元数据地址为57745，已分配的则是元数据地址563。
- en: 'In case we need to browse another directory (for example, the Users directory),
    we can provide the tool with the Users directory''s unique ID (457-144-5):'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要浏览另一个目录（例如，Users目录），我们可以向工具提供Users目录的唯一ID（457-144-5）：
- en: '![The filename layer](img/image_06_014.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![The filename layer](img/image_06_014.jpg)'
- en: Using the directory ID for content listing with the fls tool
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 使用目录ID与fls工具进行内容列举
- en: As we can see here, we are browsing through the contents of the image without
    mounting any partition or filesystem to the running OS.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，我们正在浏览镜像的内容，而无需将任何分区或文件系统挂载到运行中的操作系统。
- en: 'The ffind tool is only used to map the metadata address to the filename, either
    its related file was deleted or allocated:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: ffind工具仅用于将元数据地址映射到文件名，无论其相关文件是已删除还是已分配：
- en: '![The filename layer](img/image_06_015.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![The filename layer](img/image_06_015.jpg)'
- en: Mapping metadata address to its filename
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 映射元数据地址到其文件名
- en: Data unit layer (Block)
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据单元层（块）
- en: In this layer, the actual contents of the file are stored. The metadata of the
    file must point to the location of the file contents in this area, as we discussed
    before with the `ifind` tool.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一层中，文件的实际内容被存储。文件的元数据必须指向文件内容在此区域中的位置，正如我们之前用`ifind`工具讨论的那样。
- en: blkcat
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: blkcat
- en: 'This is used to display the contents of the specific data unit in the image.
    Let''s say we need to display the first data unit of the `ntdll.dll` file in a
    Windows directory. First, we can find the metadata address for this file using
    the `ils` tool and grep with the `ntdll.dll` filename:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于显示镜像中特定数据单元内容的。假设我们需要显示Windows目录中`ntdll.dll`文件的第一个数据单元。首先，我们可以使用`ils`工具找到该文件的元数据地址，并用`ntdll.dll`文件名进行grep查找：
- en: '![blkcat](img/image_06_016.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![blkcat](img/image_06_016.jpg)'
- en: The metadata address for the ntdll.dll file
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: ntdll.dll文件的元数据地址
- en: 'From the results, one of the `ntdll.dll` files has the metadata address of
    `25833`. The second step is to use the `istat` tool to find the allocated data
    units to this file using its metadata address:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 从结果来看，`ntdll.dll`文件中的一个文件有元数据地址`25833`。第二步是使用`istat`工具通过其元数据地址查找分配给该文件的数据单元：
- en: '![blkcat](img/image_06_017.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![blkcat](img/image_06_017.jpg)'
- en: Full information about the ntdll.dll file from the istat tool
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 通过istat工具获取的ntdll.dll文件的完整信息
- en: 'The result shows that the first data unit of the file has the number of `1118226`.
    What we need to do now is use the `blkcat` tool to view the contents of this data
    unit. We will use the `--h` option to view the contents in hex view:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示，该文件的第一个数据单元号为`1118226`。我们现在需要做的是使用`blkcat`工具查看该数据单元的内容。我们将使用`--h`选项以十六进制视图查看内容：
- en: '![blkcat](img/image_06_018.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![blkcat](img/image_06_018.jpg)'
- en: Using blkcat to display the contents of one data unit
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 使用blkcat显示一个数据单元的内容
- en: blkls
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: blkls
- en: The default of this tool is to display the unallocated clusters in an image
    file for further analysis, such as file carving and recovery. If we used this
    tool with the -e option, it will collect all the blocks of one filesystem, which
    is useful if we need to extract one partition from a multi-partitions larger image.
    Here, we need to only collect all the unallocated space in the image and direct
    the output to a file called `unallocated.blkls` on to the screen.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具的默认设置是显示镜像文件中的未分配簇，以便进行进一步分析，如文件雕刻和恢复。如果我们使用带有 -e 选项的该工具，它会收集一个文件系统的所有块，如果我们需要从一个多分区的大镜像中提取一个分区，这将非常有用。在这里，我们只需收集镜像中的所有未分配空间，并将输出定向到一个名为`unallocated.blkls`的文件或屏幕上。
- en: 'The resulting file will be in the same size of free space in the partition.
    Then, further analysis can be done on this file:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的文件将具有分区中空闲空间的相同大小。然后，可以对该文件进行进一步分析：
- en: '![blkls](img/image_06_019.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![blkls](img/image_06_019.jpg)'
- en: blkls to collect all unallocated space in a single file
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 使用blkls收集所有未分配空间到一个文件中
- en: Blkcalc
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Blkcalc
- en: To understand the purpose of this tool, let's suppose some analysis on the unallocated
    space has been conducted, such as a keyword search, and a match that is related
    to the case under investigation is found. To map the founded location to the full
    image, we need to use the `blkcalc` tool.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解这个工具的目的，假设我们对未分配空间进行了某些分析，例如关键词搜索，并且找到了与正在调查的案件相关的匹配项。为了将找到的位置映射到完整镜像，我们需要使用`blkcalc`工具。
- en: Autopsy
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Autopsy
- en: 'Autopsy is a web-based interface for TSK, which uses the same tools in TSK
    and presents the results in a graphical interface. To conduct analysis with TSK,
    the investigator needs to start the server first from the command line. After
    starting the autopsy, it will give the investigator the URL to access it from
    the Internet, which in this case is `http://localhost:9999/autopsy`. Don''t shut
    down the process of the autopsy during the analysis; otherwise, the analysis won''t
    be active:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Autopsy 是一个基于 Web 的 TSK 界面，它使用 TSK 中相同的工具并以图形界面展示结果。为了使用 TSK 进行分析，调查员需要首先从命令行启动服务器。启动
    Autopsy 后，它会给调查员提供一个 URL，通过该 URL 可以从互联网上访问它，在此案例中为`http://localhost:9999/autopsy`。在分析过程中不要关闭
    Autopsy 进程，否则分析将无法进行：
- en: '![Autopsy](img/image_06_020.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![Autopsy](img/image_06_020.jpg)'
- en: Starting Autopsy
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 Autopsy
- en: 'Then, from the browser, open that URL to start creating the case:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从浏览器中打开该URL以开始创建案件：
- en: '![Autopsy](img/image_06_021.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![Autopsy](img/image_06_021.jpg)'
- en: Autopsy interface
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Autopsy 界面
- en: 'We need to create a new case, and then enter some information about the case
    to make it easy for the investigator to follow up about the cases and who is working
    on each case:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个新案件，然后输入一些案件信息，以便调查员能够方便地跟踪案件以及每个案件的负责人：
- en: '![Autopsy](img/image_06_022.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![Autopsy](img/image_06_022.jpg)'
- en: Creating a new case
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新案件
- en: After creating the case, a directory for this case will be created by default
    at `/var/lib/autopsy` (which is named after the case name), including all the
    files of the case. What we did is just create the case; now, we need to add all
    the hosts related to the case and add the image that we previously acquired from
    each host. We need to do this to follow up with the results of the analysis and
    to be able to differentiate between the sources of the results.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 创建案件后，默认会在`/var/lib/autopsy`下创建一个与案件同名的目录，其中包含案件的所有文件。我们所做的仅仅是创建案件；现在，我们需要添加与案件相关的所有主机，并添加我们之前从每个主机获取的镜像。这样做是为了跟进分析结果，并能够区分结果的来源。
- en: 'If the case under investigation took place in different time zones, that is,
    it includes hard drives which were running under different time zones, it is a
    very good idea to adjust the time zone of each host to get normalized results:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如果调查中的案件发生在不同的时区，也就是说，涉及的硬盘运行在不同的时区，调整每个主机的时区是一个非常好的主意，以便获得标准化的结果：
- en: '![Autopsy](img/image_06_023.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![Autopsy](img/image_06_023.jpg)'
- en: Adding a host to the case
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 将主机添加到案件中
- en: 'After adding a host, we need to map the host to an image:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 添加主机后，我们需要将主机映射到一个镜像：
- en: '![Autopsy](img/image_06_024.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![Autopsy](img/image_06_024.jpg)'
- en: Mapping the host to a forensic image
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 将主机映射到取证镜像
- en: 'After this, you need to map each host to its corresponding image. You need
    to enter the path to the image and specify whether it is a disk image or partition
    image. In our case, it is a complete disk image. We have the option to work with
    the same image and use only a symbolic link to it, or just copy or move this image:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，您需要将每个主机映射到其对应的镜像。您需要输入镜像路径并指定它是磁盘镜像还是分区镜像。在我们的例子中，它是完整的磁盘镜像。我们可以选择使用同一个镜像并仅使用符号链接，或者直接复制或移动该镜像：
- en: '![Autopsy](img/image_06_025.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![Autopsy](img/image_06_025.jpg)'
- en: Adding an image to the host
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 向主机添加图片
- en: 'Then, automatically, this will list all the allocated partitions in this image
    with the start and end of each one in a sector. This is the same result we got
    from using the `mmls` tool in the command line where it asked us to select the
    mount point of each partition. In our case, we have only one NTFS partition, and
    we will mount this one as `C:` partition:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，系统会自动列出该镜像中所有已分配的分区，并显示每个分区的起始和结束扇区。这与我们在命令行中使用`mmls`工具时得到的结果相同，后者要求我们选择每个分区的挂载点。在我们的案例中，只有一个NTFS分区，我们将把它挂载为`C:`分区：
- en: '![Autopsy](img/image_06_026.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![Autopsy](img/image_06_026.jpg)'
- en: Mounting the allocated partition to the case
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 将已分配的分区挂载到案件中
- en: 'A confirmation message will summarize the configuration that you established:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 一条确认消息将总结您所建立的配置：
- en: '![Autopsy](img/image_06_027.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![Autopsy](img/image_06_027.jpg)'
- en: Confirmation message
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 确认消息
- en: 'Then, a home page for the case will be shown from where the investigator can
    select what he needs to do with the partition or the whole disk image:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将显示一个案件首页，调查员可以在其中选择对分区或整个磁盘镜像进行的操作：
- en: '![Autopsy](img/image_06_028.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![Autopsy](img/image_06_028.jpg)'
- en: Start analysis on the case
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 开始案件分析
- en: Now, we will go with the `C:` partition, it is the equivalent of specifying
    the offset with `-o` option in each command that we used in the command line tools,
    where we provided the offset of the working partition. Here, the upcoming analysis
    will target the contents of the `C:` partition.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用`C:`分区，它相当于在每个命令中使用`-o`选项指定偏移量，这样我们就为工作分区提供了偏移量。这里，接下来的分析将针对`C:`分区的内容。
- en: 'After stating the analysis, the investigator will find some tabs targeting
    all the layers of investigation that we mentioned before, such as the file analysis,
    metadata analysis, and data clusters analysis. However, the command line tools
    are still better for results customization. For example, if we need to redo what
    we did with the `ntdll.dll` file using autopsy, we need to first search for the
    filename from the file analysis tab:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在声明分析之后，调查员将找到一些选项卡，针对我们之前提到的所有调查层次，例如文件分析、元数据分析和数据集群分析。然而，命令行工具在定制结果方面仍然更为强大。例如，如果我们需要使用Autopsy重新做我们在`ntdll.dll`文件上的工作，我们需要首先从文件分析标签中搜索文件名：
- en: '![Autopsy](img/image_06_029.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![Autopsy](img/image_06_029.jpg)'
- en: Search for the file by name
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 按文件名搜索文件
- en: 'We now have the metadata number `25833`. You can either click on this number
    or under the **Meta Data** tab to search for this number. This will list all the
    information of this file, including all the clusters that hold the contents of
    this file. We are interested in the first cluster number 1118226 as shown in the
    following image:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有了元数据编号`25833`。您可以点击该编号或在**Meta Data**标签下搜索该编号。这将列出该文件的所有信息，包括所有包含该文件内容的集群。我们关注的是第一个集群编号1118226，如下图所示：
- en: '![Autopsy](img/image_06_030.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![Autopsy](img/image_06_030.jpg)'
- en: Listing the metadata information with the metadata ID
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 按元数据ID列出元数据信息
- en: 'Then, in the same way, either click on the cluster number or type its number
    under the DATA UNIT tab, it will display the contents the file in ASCII, Hex,
    or ASCII Strings views:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，以相同的方式，您可以点击集群编号或在“DATA UNIT”标签下输入集群编号，它将以ASCII、十六进制或ASCII字符串视图显示文件内容：
- en: '![Autopsy](img/image_06_031.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![Autopsy](img/image_06_031.jpg)'
- en: Listing the contents of cluster by cluster number
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 按集群编号列出集群内容
- en: We can see the status of the cluster is allocated and the signature of the file
    as before in its hex view is `0x4D5A` (MZ).
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到集群的状态为已分配，文件的签名（在其十六进制视图中）依然是`0x4D5A`（MZ）。
- en: Foremost
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 首先
- en: With TSK, we could find and recover the deleted files. These deleted files still
    have their information in the metadata area, which is why we could identify their
    information and know their location in the data area. This leaves us with a simple
    step to recover these files by redirecting the contents of each file to a new
    file. What if there are no entries for the deleted file, and we only have the
    contents of the file in the data area and no metadata about this file (which under
    this assumption will be in the unallocated area of the hard drive)? In this case,
    the file carving technique will be useful to recover such files.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 TSK，我们可以找到并恢复已删除的文件。这些已删除的文件仍然在元数据区域中保留其信息，这就是我们能够识别其信息并知道它们在数据区域位置的原因。如果没有已删除文件的条目，而我们只在数据区域中有文件的内容且没有该文件的元数据（根据这一假设，该文件将位于硬盘的未分配区域），在这种情况下，文件雕刻技术将有助于恢复此类文件。
- en: Each file has a different type, such as Microsoft Office, Adobe, exe, and AVI.
    The extension at the end of the filename is not what is needed to differentiate
    between one file type and another. There is a header in the beginning of each
    file which differs from one type to another. Some file types have a footer in
    the end of the file, but this is not mandatory. File carving techniques use these
    headers and footers to carve and identify the locations of the files in the unallocated
    area of the image or hard drive to recover these files.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 每个文件有不同的类型，例如 Microsoft Office、Adobe、exe 和 AVI。文件名末尾的扩展名并不是区分文件类型的依据。每个文件的开头都有一个头部，且各类型文件的头部不同。有些文件类型在文件的结尾有一个尾部，但这并非强制要求。文件雕刻技术利用这些头部和尾部在图像或硬盘的未分配区域中切割并识别文件的位置，以恢复这些文件。
- en: '**Foremost** is a Linux tool that is used to recover data based on file carving
    techniques. We can apply foremost to all the images, but we already know that
    the carving will work on the unallocated area. So, why don''t we apply foremost
    against the unallocated area as a single file? This single file was produced from
    the image using the `blkls` tool from `tsk` named as `unallocated.blkls`. We can
    carve this produced file from the hard drive to find the deleted files, if there
    are any.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '**Foremost** 是一款基于文件雕刻技术恢复数据的 Linux 工具。我们可以将 foremost 应用到所有图像上，但我们已经知道，雕刻操作将仅对未分配区域有效。那么，为什么不将
    foremost 应用于未分配区域作为一个单独的文件呢？这个单独的文件是通过 `tsk` 的 `blkls` 工具从图像中生成的，命名为 `unallocated.blkls`。我们可以从硬盘中雕刻出这个生成的文件，以查找已删除的文件（如果有的话）。'
- en: 'The output of foremost is different directories under the working directory,
    which are named after each file type when using the `--o` option. As we know that
    each file will start at the beginning of a cluster, we don''t need to search the
    rest of the cluster contents. We can use the `--q` option to search the beginning
    of the clusters only for quick results:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: foremost 的输出结果是在工作目录下的不同目录，使用 `--o` 选项时，每个文件类型都会有一个以文件类型命名的目录。如我们所知，每个文件会从簇的开始处开始，因此我们不需要搜索簇中其余的内容。我们可以使用
    `--q` 选项，仅搜索簇的开始部分，以快速得到结果：
- en: '![Foremost](img/image_06_032.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![Foremost](img/image_06_032.jpg)'
- en: Foremost to carve the unallocated area in the image
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Foremost 在图像中雕刻未分配区域
- en: 'Then, in the results of running this tool, we will find that one `audit.txt`
    file and one PDF directory were created under the foremost-results directory.
    Opening the `audit.txt` file will show us some information about the process of
    file carving, such as the time, size, and the extracted files. In our case, one
    single PDF file was extracted from the unallocated area in this image:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在运行该工具的结果中，我们会发现一个 `audit.txt` 文件和一个 PDF 目录被创建在 foremost-results 目录下。打开 `audit.txt`
    文件，我们可以看到一些关于文件雕刻过程的信息，例如时间、大小和提取的文件。在我们的案例中，只有一个 PDF 文件是从图像的未分配区域中提取的：
- en: '![Foremost](img/image_06_033.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![Foremost](img/image_06_033.jpg)'
- en: Extracted files by foremost
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 foremost 提取的文件
- en: 'Due to the absence of the metadata of this file as we discussed before, we
    won''t be able to know any information about this file except for the size and
    the contents of this file. This PDF file was created for testing purposes and
    we assumed that it contains evidential data related to the case under investigation:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 由于如前所述，这个文件缺乏元数据，我们无法知道关于该文件的任何信息，除了文件的大小和内容。这个 PDF 文件是为了测试目的而创建的，我们假设它包含与正在调查的案件相关的证据数据：
- en: '![Foremost](img/image_06_034.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![Foremost](img/image_06_034.jpg)'
- en: Extracted PDF file
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 提取的 PDF 文件
- en: Summary
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw how the files are organized in the filesystem, and how
    it differs from FAT to NTFS. Then, we learned about reading files from a forensic
    image using TSK and its GUI Autopsy. We also discussed file carving and how to
    recover a file, based on its signature using Foremost.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章，我们了解了文件在文件系统中的组织方式，以及它如何从 FAT 到 NTFS 发生变化。接着，我们学习了如何使用 TSK 和它的图形界面工具 Autopsy
    从取证镜像中读取文件。我们还讨论了文件切割技术以及如何根据文件的签名使用 Foremost 恢复文件。
- en: In the next chapter, we will learn about Windows registry—a complex yet very
    important artifact in the Windows operating system. We will learn about registry
    structure, and its important value to the investigation and different tools to
    parse and analyze the registry.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将学习关于 Windows 注册表的内容——这是 Windows 操作系统中一个复杂但非常重要的组成部分。我们将了解注册表结构及其在调查中的重要性，以及不同的工具来解析和分析注册表。
