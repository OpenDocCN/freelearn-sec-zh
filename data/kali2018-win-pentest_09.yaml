- en: Maintaining Access on Server or Desktop
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在服务器或桌面上保持访问权限
- en: Ever wonder how hackers are able to get into a secure network and be in the
    network for months and sometimes years without being caught? Well, the following
    are some of the big tricks for staying inside once you are there. Not only will
    we discuss maintaining access for a local machine you have owned, but also how
    to use a **Drop Box** inside a network, and have it phone home.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经想过黑客是如何能够进入一个安全网络并在网络中呆上几个月甚至几年而不被发现的吗？好吧，以下是一些留在网络内部的大招。我们不仅将讨论如何维持已经拥有的本地机器的访问权限，还将讨论如何在网络内部使用**Drop
    Box**，并让它回家。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Maintaining access, or ET Phone Home
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持访问或ET回家
- en: Maintaining access with Ncat
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ncat保持访问
- en: The Drop Box
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Drop Box
- en: Cracking the **Network Access Controller** (**NAC**)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破解**网络访问控制器**（**NAC**）
- en: Creating a spear-phishing attack with the Social Engineering Toolkit
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用社会工程学工具包创建钓鱼攻击
- en: Using Backdoor Factory to evade antivirus
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用后门工厂来规避杀毒软件
- en: Maintaining access or ET Phone Home
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持访问或ET回家
- en: Persistent connections in the hacker world are called **Phoning Home**. Persistence
    gives the attacker the ability to leave a connection back to the attacking machine
    and have a full command line or a desktop connection to the victim machine.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在黑客世界中，持久连接被称为**回家**。持久性使攻击者能够留下一个连接返回到攻击机器，并对受害机器进行完整的命令行或桌面连接。
- en: Why do this? Your network is protected by a firewall normally and port connections
    to the internal machines are controlled by the firewall and not the local machine.
    Sure, if you're in a box, you could turn on telnet and you could access the telnet
    port from the local network. It is unlikely that you would be able to get to this
    port from the public network. Any local firewall may block this port, and a network
    scan would reveal that telnet is running on the victim machine. This would alert
    the target organization's network security team. So, instead of having a port
    to call on the compromised server, it is safer and more effective to have your
    victim machine call out to your attacking machine.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要这样做？你的网络通常受到防火墙的保护，对内部机器的端口连接由防火墙控制，而不是由本地机器控制。当然，如果你在一个盒子里，你可以打开telnet，并且你可以从本地网络访问telnet端口。但是你很难从公共网络访问到这个端口。任何本地防火墙都可能阻止这个端口，而网络扫描会显示受害机器上正在运行telnet。这将警示目标组织的网络安全团队。因此，与其在受损服务器上开放一个端口，不如让你的受害机器呼叫你的攻击机器更安全、更有效。
- en: In this chapter, we will use HTTPS reverse shells, for the most part. The reason
    for this is you could have your compromised machine call any port on your attacking
    machine but a good IDS/IPS system could pick this connection up if it was sent
    out to an unusual destination, such as port `4444` on the attacking machine. Most
    IDS/IPS systems will whitelist outbound connections to HTTPS ports because system
    updates for most systems work over the HTTPS protocol. Your outbound connection
    to the attacking machine will look more like an update than an outbound hacked
    port.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将主要使用HTTPS反向shell。之所以这样做是因为你的受损机器可以呼叫攻击机器上的任何端口，但是如果发送到一个不寻常的目的地，比如攻击机器上的端口`4444`，一个良好的IDS/IPS系统可能会检测到这种连接。大多数IDS/IPS系统将对HTTPS端口的出站连接进行白名单处理，因为大多数系统的系统更新都是通过HTTPS协议进行的。你的出站连接到攻击机器看起来更像是一个更新而不是一个被黑客攻击的端口。
- en: A persistent connection does have to go back directly to the attacker's machine.
    You can pivot this type of connection off one or more machines to cover your tracks.
    Pivoting off one machine inside the target network, and a couple outside the target
    network, makes it more difficult for the defenders to see what is happening.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 持久连接确实必须直接返回到攻击者的机器。你可以将这种类型的连接从一个或多个机器上转移，以掩盖你的踪迹。从目标网络内部的一台机器和目标网络外部的一对机器上进行转移，使得防御者更难以看清发生了什么。
- en: Yes, you can pivot this type of attack off a machine in North Korea or China,
    and it will look like the attack is coming from there. Every time we hear in the
    media that a cyber attack is coming from some dastardly foreign attacker, we roll
    our eyes. There is no way to be sure of the original source of an attack, unless
    you have access to the attacking machine and its logs. Even with access to this
    attacking machine, you still don't know how many pivots the attacker made to get
    to that machine. You still don't know with a full back-trace to the last connection.
    Use something like Tor in the process and there is no way anyone can be sure exactly
    where the hack came from.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，你可以将这种类型的攻击从朝鲜或中国的一台机器上转移出来，看起来就像攻击来自那里。每当我们在媒体上听到一个网络攻击来自某个可恶的外国攻击者时，我们都会翻白眼。除非你能够访问攻击机器及其日志，否则无法确定攻击的原始来源。即使有了对攻击机器的访问，你仍然不知道攻击者经过了多少次转移才到达那台机器。你仍然不知道最后一个连接的完整回溯。在这个过程中使用类似Tor的东西，没有人能确定这次黑客攻击到底来自哪里。
- en: In this demo, we will be doing an attack from a four-way pivot going across
    the world, and through four different countries to show you how this is done.
    Yes, we are doing this for real!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个演示中，我们将进行一次四向枢纽的攻击，横跨世界，穿越四个不同的国家，向您展示这是如何完成的。是的，我们正在真正做这件事！
- en: Do *not* ever attack the public IP addresses we will be using in this book.
    These are servers that we personally leased for this project. They will no longer
    be under our control by the time this book is published.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*绝对不要*攻击我们在本书中将要使用的公共IP地址。这些是我们为这个项目租用的服务器。在本书出版时，它们将不再在我们的控制之下。'
- en: One problem with persistent connections is that they can be seen. One can never
    underestimate the careful eye of a paranoid sysadmin (*Why has server 192.168.202.4
    had a HTTP connection to a Chinese IP address for four days?*). A real attacker
    will use this method to cover his tracks in case he gets caught and the attacking
    server is checked for evidence of the intruder. After a good clearing of the logs
    after you back out of each machine and, tracing back the connection is almost
    impossible. This first box to which the persistent connection is made will be
    viewed as hostile in the eyes of the attacker and they will remove traces of connections
    to this machine after each time they connect.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 持久连接的一个问题是它们可能会被发现。一个人永远不能低估偏执的系统管理员的细心眼睛（*为什么服务器192.168.202.4已经与中国IP地址建立了四天的HTTP连接？*）。一个真正的攻击者将使用这种方法来掩盖他的踪迹，以防被抓住并且攻击服务器被检查是否有入侵者的证据。在你退出每台机器后清除日志后，追溯连接几乎是不可能的。持久连接所连接的第一个盒子将被攻击者视为敌对的，他们将在每次连接后删除与这台机器的连接痕迹。
- en: 'Notice in the following diagram that the victim machine has an internal address.
    Since the victim machine is calling out, we are bypassing the inbound protection
    of NAT and inbound firewall rules. The victim machine will be calling out to a
    server in Singapore. The attacker is interacting with the compromised machine
    in the USA, but is pivoting through two hops before logging into the evil server
    in Singapore. We are only using four hops here for this demo, but you can use
    as many hops as you want. The more hops, the more confusing the back-trace. A
    good attacker will also mix up the hops the next time he comes in, changing his
    route and the IP address of the inbound connection:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意以下图表中受害机器具有内部地址。由于受害机器正在呼叫，我们正在绕过NAT和入站防火墙规则的入站保护。受害机器将呼叫新加坡的服务器。攻击者正在与美国的受损机器进行交互，但在登录新加坡的恶意服务器之前，会通过两个跳转进行转向。我们在这里仅使用了四个跳转进行演示，但您可以使用任意数量的跳转。跳数越多，反向跟踪就越混乱。一个优秀的攻击者还将在下一次进入时改变他的路线和入站连接的IP地址：
- en: '![](img/715bacf3-aff5-4522-84a3-fd250a55924e.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/715bacf3-aff5-4522-84a3-fd250a55924e.png)'
- en: 'For our first hop, we are going to Amsterdam `178.62.241.119`! If we run  `whois` we
    can see this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第一个跳转，我们将前往阿姆斯特丹`178.62.241.119`！如果我们运行`whois`，我们可以看到这个：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Hacker tip:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客提示：
- en: A good investigator, seeing this information, would just subpoena DigitalOcean
    to find out who was renting that IP when the victim phoned home, but it could
    just as likely be a machine belonging to a little old lady in Leningrad. The infrastructure
    of a botnet is developed from a group of compromised boxes. This chapter describes
    a small do-it-yourself botnet.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一个优秀的调查员看到这些信息后，可能会传唤DigitalOcean以找出在受害者回家时租用该IP的人，但同样可能是属于列宁格勒的一位老太太的机器。一个僵尸网络的基础是由一组受损的盒子开发而成。本章描述了一个小型的自制僵尸网络。
- en: 'We will now pivot to the host in Germany, `46.101.191.216`. Again, if we run
    a `whois` command, we can see this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将转向德国的主机，`46.101.191.216`。再次，如果我们运行`whois`命令，我们可以看到这个：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now move on to the pivot host in Singapore, `128.199.190.69`, and run a `whois`
    command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在转向新加坡的转向主机`128.199.190.69`，并运行`whois`命令：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We are now set up to attack from Singapore. We are only a few miles from our
    target machine, but to the unsuspecting IT system's security administrator, it
    will appear that the attack is coming from half a world away.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经准备好从新加坡发动攻击。我们离目标机器只有几英里，但对于毫无戒心的IT系统安全管理员来说，攻击看起来就像是来自半个地球之外。
- en: Covering our tracks
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 掩盖我们的踪迹
- en: 'If we have either root or sudo access to these machines, we can back out cleanly
    by running the following commands. This removes the traces of our login. Since
    this is our attacking machine, we will be running as root. The file that contains
    the login information for the SSH service is `/var/log/auth.log`. If we delete
    it and then make a new file, the logs from our logging in are now gone:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们对这些机器有root或sudo访问权限，我们可以通过运行以下命令干净地退出。这将删除我们登录的痕迹。由于这是我们的攻击机器，我们将以root身份运行。包含SSH服务登录信息的文件是`/var/log/auth.log`。如果我们删除它然后创建一个新文件，我们登录的日志现在已经消失：
- en: 'Go into the `/var/log` directory:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入`/var/log`目录：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Delete the `auth.log` file:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`auth.log`文件：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Make a new empty file:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的空文件：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Drop the Terminal session:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭终端会话：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now exit from the server and you're out clean. If you do this on every machine
    as you back out of your connections, then you can't be found. Since this is all
    text-based, there isn't really any lag that you will notice when running commands
    through this many pivots. Also, all this traffic is encrypted by SSH so no one
    can see what you are doing or where you are going.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在从服务器退出，你就可以干净地离开了。如果你在退出连接时在每台机器上都这样做，那么你就不会被发现。由于这都是基于文本的，当通过这么多的转向运行命令时，你不会真正注意到任何延迟。此外，所有这些流量都是通过SSH加密的，因此没有人可以看到你在做什么或者你要去哪里。
- en: Maintaining access with Ncat
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ncat保持访问
- en: '**NetCat** (**Ncat**) is a little known yet powerful tool designed to make
    raw socket connections to network ports. It''s a small tool designed to run from
    one executable file that is easily transferred to a system and can also be renamed
    to anything to hide the executable within an operating system. Ncat will call
    back to an attacking server with only user-level access. Ncat is an open source
    application brought to you by [https://www.insecure.org](https://www.insecure.org),
    the same fine folks that maintain Nmap. Ncat and its older cousin, **nc**, both
    come installed on Kali. Ncat is bundled with any install of Nmap.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**NetCat**（**Ncat**）是一个鲜为人知但功能强大的工具，旨在与网络端口建立原始套接字连接。它是一个小型工具，设计为从一个可执行文件运行，可以轻松传输到系统，并且还可以重命名为任何名称，以隐藏操作系统中的可执行文件。Ncat将仅使用用户级访问权限回拨到攻击服务器。Ncat是一个开源应用程序，由[https://www.insecure.org](https://www.insecure.org)提供，这些人也是维护Nmap的同样出色的人。Ncat及其较老的表亲**nc**都已安装在Kali上。Ncat与Nmap的任何安装捆绑在一起。'
- en: 'Actually, as already mentioned, there are two versions of Ncat. The older version''s
    executable is `nc`. `nc` will also make raw socket connections to any TCP/UDP
    ports:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，如前所述，Ncat有两个版本。旧版本的可执行文件是`nc`。`nc`也会对任何TCP/UDP端口进行原始套接字连接：
- en: '![](img/2fa89d8d-7a0b-4e55-ac77-1d8eee17a960.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2fa89d8d-7a0b-4e55-ac77-1d8eee17a960.png)'
- en: The big advantage of Ncat is that it supports SSL encryption where all of nc's
    traffic is in clear text. Nc's traffic can sometimes be picked up by IDS/IPS and
    other security devices. Ncat's traffic can be encrypted and hidden and appear
    as an HTTPS stream. Ncat also has the ability to only allow connections from certain
    IP addresses or IP subnets.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Ncat的一个重要优势是它支持SSL加密，而nc的所有流量都是明文的。nc的流量有时会被IDS/IPS和其他安全设备捕获。Ncat的流量可以被加密和隐藏，并且看起来像一个HTTPS流。Ncat还有能力只允许来自某些IP地址或IP子网的连接。
- en: The initial attack to compromise the machine could either be by a network attack
    or by using some method of social engineering, such as a spear-phishing email
    carrying a payload to connect back to our attacking server.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 破坏机器的初始攻击可以是网络攻击，也可以是使用某种社会工程方法，比如携带负载以连接回我们攻击服务器的鱼叉式网络钓鱼邮件。
- en: 'The following screenshot shows a PDF of an offer you will want to refuse. This
    PDF contains the same *phone home* payload and is designed to install the malware
    payload without any interaction or approval by the user. This PDF is created in
    a nifty tool, which we will look at in the next section, *Creating a spear-phishing
    attack with the Social Engineering Toolkit*:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了一份你会想要拒绝的报价PDF。这个PDF包含相同的*phone home*负载，并旨在在用户没有任何交互或批准的情况下安装恶意软件负载。这个PDF是使用一个巧妙的工具创建的，我们将在下一节中看到，*使用社会工程工具包创建一个鱼叉式网络钓鱼攻击*：
- en: '![](img/04540190-f411-4a24-89d2-df46b690f59d.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/04540190-f411-4a24-89d2-df46b690f59d.png)'
- en: Once the initial attack has compromised it, we want the system to call home
    on a regular basis. An exploit like this can be set to maintain a constant connection
    whereby every time the connection is lost it resets the connection. It can also
    be set to reconnect at specified intervals. We like to set these up so the exploit
    calls home at a certain time and if there is not a port to connect to on the attacking
    machine then the exploit goes silent until that time comes again. A totally persistence
    connection can draw attention from network security.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦初始攻击被破坏，我们希望系统定期回拨。这样的攻击可以设置为保持恒定的连接，每次连接丢失时都会重置连接。它也可以设置为在指定的时间间隔重新连接。我们喜欢设置这些，这样攻击会在某个特定时间回拨，如果攻击机器上没有要连接的端口，那么攻击会保持沉默，直到再次到达那个时间。一个完全持久的连接可能会引起网络安全的注意。
- en: 'We are now connected to the victim machine and we upload a copy of Ncat to
    the victim. We can see from the session that this is an internal attack. The `ncat.exe`
    file is in the `/usr/share/ncat-w32/` directory on Kali. Once connected, run the
    following command in Meterpreter:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在连接到受害者机器，并向受害者上传Ncat的副本。从会话中可以看出，这是一次内部攻击。`ncat.exe`文件位于Kali的`/usr/share/ncat-w32/`目录中。连接后，在Meterpreter中运行以下命令：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](img/4004b209-0f77-40bb-80cb-e3ce44e863da.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4004b209-0f77-40bb-80cb-e3ce44e863da.png)'
- en: This will transfer the Ncat executable to the victim system. Notice that we
    are using the `/` and not the `\` for directory slashes. Since you are on Linux,
    you must use the forward slash **/**. If you use **\** and run the command, you
    will find that the directory names will run together and the file will not upload
    properly.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把Ncat可执行文件传输到受害者系统。请注意，我们在使用`/`而不是`\`作为目录斜杠。由于您使用的是Linux，必须使用正斜杠**/**。如果您使用**\**并运行命令，您会发现目录名称会连在一起，文件将无法正确上传。
- en: 'Going to the Windows 7 victim, we can see the file in the `Windows` directory:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 转到Windows 7受害者，我们可以在`Windows`目录中看到该文件：
- en: '![](img/778d4198-086b-4d65-94ac-42d33336a070.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/778d4198-086b-4d65-94ac-42d33336a070.png)'
- en: Setting up a NetCat Client
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置NetCat客户端
- en: 'Windows since Windows NT 3.14 has had a command-line tool to run scheduled
    tasks. This tool is called the `AT` command. This command is very similar to the
    `cron` command available on Linux or UNIX. You can set a time, date, and number
    of times to run any command-line tool or script. So, `shell` into the system using
    your Meterpreter connection to the machine:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 自Windows NT 3.14以来，Windows一直有一个命令行工具来运行计划任务。这个工具叫做`AT`命令。这个命令与Linux或UNIX上可用的`cron`命令非常相似。您可以设置时间、日期和运行任何命令行工具或脚本的次数。因此，使用您的Meterpreter连接`shell`到系统：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You''re now in the victim system. Type the following command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在在受害者系统中。输入以下命令：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](img/8b165c75-b0db-46fc-8286-c7a655ad0d07.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8b165c75-b0db-46fc-8286-c7a655ad0d07.png)'
- en: This sets up a job to run at 5:00 P.M. every day. It will run the `ncat.exe`
    executable with the following variables. It is calling to the attacking server
    `128.199.190.69` on port `443`. The `-ssl` flag tells the connection to use SSL.
    The `-e cmd.exe` flag tells the executable to run the `cmd.exe` executable through
    the connection.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这设置了一个每天下午5:00运行的作业。它将使用以下变量运行`ncat.exe`可执行文件。它正在调用攻击服务器`128.199.190.69`的端口`443`。`-ssl`标志告诉连接使用SSL。`-e
    cmd.exe`标志告诉可执行文件通过连接运行`cmd.exe`可执行文件。
- en: Before 5:00 P.M. we log into our evil server using our various pivots and start
    up `ncat` in listening mode and wait for 5:00 P.M. to come around.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在下午5:00之前，我们使用各种枢纽登录到我们的恶意服务器，并启动`ncat`进入监听模式，等待下午5:00到来。
- en: 'Note that we are connected to `//rogue3` here and running the following command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在这里连接到`//rogue3`并运行以下命令：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `-n` flag tells the system to not use DNS. The `-v` tells the system to
    make the output verbose so you can see the input and output. The `-l` tells Ncat
    to listen. The `-p` tells Ncat to listen on port `443` and the `-ssl` tells Ncat
    to use SSL to encrypt the session:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`-n`标志告诉系统不使用DNS。`-v`告诉系统使输出详细，这样您可以看到输入和输出。`-l`告诉Ncat监听。`-p`告诉Ncat在端口`443`上监听，`-ssl`告诉Ncat使用SSL加密会话：'
- en: '![](img/e1b49e7f-fac4-48f5-9702-2df3bcf23a15.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e1b49e7f-fac4-48f5-9702-2df3bcf23a15.png)'
- en: We now have a connection to our hacked Windows 7 machine with full administrator
    access and this exploit will be ready to use at 5:00 P.M. every day without any
    further attacks on the network.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经连接到我们黑客入侵的Windows 7机器，具有完整的管理员访问权限，这个漏洞利用将在每天下午5:00准备好使用，而无需对网络进行进一步攻击。
- en: Warning!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 警告！
- en: A real attacker will change the name of Ncat to something more vague and hard
    to spot in your filesystem. Beware of two `calc.exe` or `notepad.exe` living on
    your system. The one in a strange place could very well be Ncat or another type
    of exploit such as the one we are next going to build.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一个真正的攻击者会将Ncat的名称更改为更模糊和难以在您的文件系统中发现的名称。小心您的系统上存在两个`calc.exe`或`notepad.exe`。一个在奇怪的地方很可能是Ncat或我们接下来要构建的另一种类型的漏洞利用。
- en: Phoning home with Metasploit
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit打电话回家
- en: 'Well, that was the old-school method. Now, let''s do the same thing using Metasploit''s
    tools. We will have Metasploit loaded on `//rogue3`, our evil server, for our
    victim machine to connect to a Meterpreter shell on that machine. We will be building
    and uploading this exploit from our internal hack from earlier. We will be using
    a couple of other tools from the Metasploit toolkit besides `msfconsole`. Metasploit
    comes with an independent application to build custom exploits and shellcode.
    This tool is called `msfvenom`, and we are going to use it to build an exploit.
    The full use of `msfvenom` could be a full chapter in itself and is beyond the
    scope of the book so here we will be building a reverse HTTP exploit using the
    most common flags to generate our executable. We will build the exploit by running
    the following command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，那是老派的方法。现在，让我们使用Metasploit的工具来做同样的事情。我们将在`//rogue3`上加载Metasploit，我们邪恶的服务器，让我们的受害者机器连接到该机器上的Meterpreter
    shell。我们将从之前的内部黑客中构建和上传这个漏洞利用。除了`msfconsole`之外，我们还将使用Metasploit工具包中的其他工具。Metasploit配备了一个独立的应用程序来构建自定义漏洞和shellcode。这个工具叫做`msfvenom`，我们将使用它来构建一个漏洞利用。完全使用`msfvenom`可能是一个完整的章节，超出了本书的范围，所以在这里我们将使用最常见的标志来生成我们的可执行文件来构建一个反向HTTP漏洞利用。我们将通过运行以下命令来构建漏洞利用：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: MSFvenom is a powerful and configurable tool. MSFvenom has the power to build
    custom exploits that will bypass any antivirus software. Antivirus software works
    by looking at the signatures of files. MSFvenom has the ability to encode an exploit
    is such a way that the antivirus software will not be able to detect it. It is
    a case of hiding an exploit, as another common executable, such as Notepad MSFvenom,
    can add NOPs or null code to the executable to bring it up to the same size as
    the original. Scary, isn't it?
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: MSFvenom是一个强大且可配置的工具。MSFvenom具有构建自定义漏洞的能力，可以绕过任何防病毒软件。防病毒软件通过查看文件的签名来工作。MSFvenom具有编码漏洞的能力，使得防病毒软件无法检测到它。这是隐藏漏洞的情况，就像另一个常见的可执行文件，比如记事本MSFvenom，可以向可执行文件添加NOP或空代码，使其大小与原始文件相同。很可怕，不是吗？
- en: 'The following table shows a list of the flags:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了标志的列表：
- en: '| Usage: |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 用法： |'
- en: '| `/opt/metasploit/apps/pro/msf3/msfvenom [options] <var=val>` |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `/opt/metasploit/apps/pro/msf3/msfvenom [options] <var=val>` |'
- en: '| **Options** | **Long options** | **Variables** | **Comment** |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| **选项** | **长选项** | **变量** | **注释** |'
- en: '| `-p` | `--payload` | `<payload>` | Payload to use. Specify a `-` or `stdin`
    to use custom payloads |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `-p` | `--payload` | `<payload>` | 要使用的负载。指定`-`或`stdin`以使用自定义负载 |'
- en: '| `-l` | `--list` | `[module_type]` | List a module type example: payloads,
    encoders, nops, all |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `-l` | `--list` | `[module_type]` | 列出模块类型示例：负载、编码器、NOP、全部 |'
- en: '| `-n` | `--nopsled` | `<length>` | Prepend a nopsled of [length] size on to
    the payload |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `-n` | `--nopsled` | `<length>` | 在负载上添加一个大小为[length]的nopsled |'
- en: '| `-f` | `--format` | `<format>` | Output format (use `--help-formats` for
    a list) |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `-f` | `--format` | `<format>` | 输出格式（使用`--help-formats`列出） |'
- en: '| `-e` | `--encoder` |  | The encoder to use |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `-e` | `--encoder` |  | 要使用的编码器 |'
- en: '| `-a` | `--arch` | `<architecture>` | The architecture to use |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `-a` | `--arch` | `<architecture>` | 要使用的架构 |'
- en: '|  | `--platform` | `<platform>` | The platform of the payload |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '|  | `--platform` | `<platform>` | 负载的平台 |'
- en: '| `-s` | `--space` | `<length>` | The maximum size of the resulting payload
    |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `-s` | `--space` | `<length>` | 结果负载的最大大小 |'
- en: '| `-b` | `--bad-chars` | `<list>` | The list of characters to avoid; example:
    `\x00\xff` |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `-b` | `--bad-chars` | `<list>` | 要避免的字符列表；示例：`\x00\xff` |'
- en: '| `-i` | `--iterations` | `<count>` | The number of times to encode the payload
    |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `-i` | `--iterations` | `<count>` | 编码负载的次数 |'
- en: '| `-c` | `--add-code` | `<path>` | Specify an additional win32 shellcode file
    to include |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `-c` | `--add-code` | `<path>` | 指定要包含的额外win32 shellcode文件 |'
- en: '| `-x` | `--template` | `<path>` | Specify a custom executable file to use
    as a template |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `-x` | `--template` | `<path>` | 指定要用作模板的自定义可执行文件 |'
- en: '| `-k` | `--keep` |  | Preserve the template behavior and inject the payload
    as a new thread |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `-k` | `--keep` |  | 保留模板行为，并将负载注入为新线程 |'
- en: '| `-o` | `--options` |  | List the payload''s standard options |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `-o` | `--options` |  | 列出负载的标准选项 |'
- en: '| `-h` | `--help` |  | Show this message |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `-h` | `--help` |  | 显示此消息 |'
- en: '|  | `--help-formats` |  | List available formats |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '|  | `--help-formats` |  | 列出可用格式 |'
- en: 'The following screenshot shows the output of the command. `msfvenom` has shown
    that no encoders were used, and there was no checking for bad characters implemented
    in the build. For this demo, they''re not needed:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了命令的输出。`msfvenom`显示没有使用编码器，并且在构建中没有检查坏字符。对于这个演示，它们是不需要的：
- en: '![](img/3e1676cc-08b2-4d69-8f8d-0ca3f078f49a.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3e1676cc-08b2-4d69-8f8d-0ca3f078f49a.png)'
- en: 'Now, by running the `ls` command, we can see our file:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过运行`ls`命令，我们可以看到我们的文件：
- en: '![](img/d691b71a-d30d-485e-ab9c-9f5c3c102ced.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d691b71a-d30d-485e-ab9c-9f5c3c102ced.png)'
- en: 'Now we have something to upload. Just like with the Ncat example, we will use
    our internal compromising of the system to upload our exploit:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有东西要上传。就像Ncat示例一样，我们将使用我们对系统的内部妥协来上传我们的漏洞利用：
- en: '![](img/88154cef-8391-4a74-b654-6e58255622c3.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/88154cef-8391-4a74-b654-6e58255622c3.png)'
- en: 'As with Ncat, we will shell into our victim machine and set up the `AT` command
    to run `svchost13.exe`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 与Ncat一样，我们将进入受害者机器并设置`AT`命令运行`svchost13.exe`：
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Just before 5:25 P.M., log into the evil server `//rogue3`. Fire up the Metasploit
    service, `msfconsole`, to get your listener set up and running to accept the connection.
    Then set up the common handler module using the following commands:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在下午5:25之前，登录到恶意服务器`//rogue3`。启动Metasploit服务`msfconsole`，设置监听器并接受连接。然后使用以下命令设置常见处理程序模块：
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: After running the exploit, the handler will start listening for a connection
    on port `443`, waiting for your helpless victim to call home. After waiting a
    bit, we see a connection come up from `69.131.155.226`. That is the address of
    the firewall our victim machine is behind. The handler then gives us a command
    prompt to the system. Running the Meterpreter command, `sysinfo`, we see the name
    and machine information. From here, you have complete control!
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 运行exploit后，处理程序将开始监听端口`443`，等待你无助的受害者打电话回家。等待一会儿后，我们看到一个来自`69.131.155.226`的连接。这是我们受害者机器背后防火墙的地址。然后处理程序给我们系统的命令提示符。运行Meterpreter命令`sysinfo`，我们可以看到名称和机器信息。从这里，你拥有完全的控制权！
- en: A real attacker may set up this exploit and not come back for months. The only
    sign of a problem would be just a single connection going out and failing at 5:25
    P.M. every day. Just a small blip on the network.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一个真正的攻击者可能设置这个漏洞并且几个月后才回来。唯一的问题迹象将是每天下午5:25只有一个连接出去并失败。这只是网络上的一个小问题。
- en: '![](img/2b717544-7a22-40d9-ac8d-fdb754939ad5.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b717544-7a22-40d9-ac8d-fdb754939ad5.png)'
- en: 'You might be excited to move on to the next conquest, but since we are here
    on a machine behind the network''s firewall, let''s look around at the rest of
    the network. By running `ipconfig`, we see that there are two network interfaces
    on this machine. One is on the 10-network, at `10.100.0.0/24`, but the other is
    on a 192.168-network at `192.168.202.0`. These are both protected networks, but
    the big deal is that the network is not flat. You cannot route packets across
    two dissimilar network classes in the private ranges. The 10-network has access
    to the internet, so it may be a DMZ, and the machines on it may both be more hardened
    and contain less valuable data. This probably means there are some treasures in
    the data on the other network. This type of pivot could go to either network but
    let''s attack the backend network here and go for the real gold:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会兴奋地继续下一个征服，但由于我们在网络防火墙后面的机器上，让我们看看网络的其他部分。通过运行`ipconfig`，我们看到这台机器上有两个网络接口。一个在10网络上，地址为`10.100.0.0/24`，另一个在192.168网络上，地址为`192.168.202.0`。这两个都是受保护的网络，但重要的是网络不是平面的。你不能在私有范围内的两个不同网络类之间路由数据包。10网络可以访问互联网，所以它可能是一个DMZ，上面的机器可能更加强化并且包含的数据价值更少。这可能意味着另一个网络上有一些宝藏。这种枢纽可以连接到任一网络，但让我们在这里攻击后端网络并寻找真正的黄金：
- en: '![](img/b67fd131-5de9-47de-a5b6-42efc01d3b90.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b67fd131-5de9-47de-a5b6-42efc01d3b90.png)'
- en: The path marked in red is the pivot path we will be taking from our persistent
    connection to attack the domain controller on the backend network.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 红色标记的路径是我们将要从持久连接到后端网络攻击域控制器的枢纽路径。
- en: That time of day has come around and we have started our listener on our evil
    server and the victim machine has phoned home. We are ready to go further. We
    will use the Meterpreter command, `autoroute,` to get a route into the `192.168.202.0/24`
    network.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 那个时间已经过去，我们在我们的恶意服务器上启动了监听器，受害者机器已经打来电话。我们准备进一步。我们将使用Meterpreter命令`autoroute`来进入`192.168.202.0/24`网络。
- en: 'This time, when we set up the handler, we will send the session into the background
    using the `-j` flag when we run the `exploit` command:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，当我们设置处理程序时，我们将在运行`exploit`命令时使用`-j`标志将会话发送到后台：
- en: '![](img/dbec0765-7d32-470c-842f-e60639c1319b.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dbec0765-7d32-470c-842f-e60639c1319b.png)'
- en: 'Then the victim machine calls in. This tells us that the firewall in the target
    network has not been adjusted to block that outbound packet-stream, and that the
    anomalous behavior has not alerted their **intrusion detection system** (**IDS**).
    We have a connection:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然后受害者机器打来电话。这告诉我们目标网络中的防火墙没有调整以阻止出站数据流，并且异常行为没有引起他们的**入侵检测系统**（**IDS**）的警报。我们建立了连接：
- en: '![](img/038c6f49-36e2-4411-8df5-9456164eac08.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/038c6f49-36e2-4411-8df5-9456164eac08.png)'
- en: 'We are inside the victim machine, so we can run DOS commands. If we run `ipconfig,`
    we see the two interfaces and their addresses:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在受害者机器内部，所以我们可以运行DOS命令。如果我们运行`ipconfig`，我们可以看到两个接口及其地址：
- en: '![](img/efb5ee64-fc9b-4a58-93e4-1c2ec6604db6.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efb5ee64-fc9b-4a58-93e4-1c2ec6604db6.png)'
- en: As we know, sysadmins often reuse passwords all across their networks, so let's
    get the hash from this machine and try it on the DC. Save these hashes to a text
    file or to your **KeepNote**. You'll need them later.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道，系统管理员经常在他们的网络上重复使用密码，所以让我们从这台机器获取哈希并尝试在DC上使用它。将这些哈希保存到文本文件或您的**KeepNote**中。稍后会用到它们。
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Notice that the `hashdump` command has also found and downloaded the password
    hint for `BO Weaver`. The hint is `funny`. This may make your password guessing
    easier. Some people make their password hint almost their password, such as *Raiders
    Star Qback 1970*. A tiny bit of research could tell you the Quarterback was George
    Blanda, he was 43 years old, and that was the first season for the Raiders in
    the NFL. His jersey number was 16\. Your password list would need to include *GeorgeBlanda16*,
    *Blanda1970*, and other related things:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`hashdump`命令还找到并下载了`BO Weaver`的密码提示。提示是`funny`。这可能会让你猜密码更容易。有些人的密码提示几乎就是他们的密码，比如*Raiders
    Star Qback 1970*。一点点研究就能告诉你四分卫是乔治·布兰达，他当时43岁，那是雷德队在NFL的第一个赛季。他的球衣号码是16。你的密码列表需要包括*GeorgeBlanda16*，*Blanda1970*和其他相关的东西：
- en: '![](img/9b53d897-6728-46bf-8cd5-d0ef0bd8a3e2.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9b53d897-6728-46bf-8cd5-d0ef0bd8a3e2.png)'
- en: 'Type the following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 输入以下内容：
- en: '[PRE15]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then run the following to print out the route:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行以下命令打印路由表：
- en: '[PRE16]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We see we have a route into the backend network:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到我们有一条通往后端网络的路由：
- en: '![](img/faee21d5-13de-4f22-b275-1137be0bdf16.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/faee21d5-13de-4f22-b275-1137be0bdf16.png)'
- en: Running a port scanner inside Metasploit
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Metasploit内部运行端口扫描器
- en: 'Now you have a route, it is time to reconnoiter. To keep down the noise, we
    will use a simple port scanner within Metasploit:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了一条路线，是时候进行侦察了。为了减少噪音，我们将在Metasploit中使用一个简单的端口扫描程序：
- en: 'Back out of our Meterpreter by typing the following command:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入以下命令退出Meterpreter：
- en: '[PRE17]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This keeps the session running open and in the background.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得会话保持运行并处于后台状态。
- en: 'Set up the scanner as follows:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置扫描仪如下：
- en: '[PRE18]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We have set the port `389` to find the domain controller.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已将端口`389`设置为查找域控制器。
- en: 'Set the number of active threads as follows:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按以下方式设置活动线程数：
- en: '[PRE19]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Run the scanner as follows:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按以下方式运行扫描仪：
- en: '[PRE20]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The scanner runs and we see a Windows domain controller. This is our new target:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描程序运行，我们看到了一个Windows域控制器。这是我们的新目标：
- en: '![](img/77fa5d16-fc3c-481e-98ec-8cce27a5ad62.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/77fa5d16-fc3c-481e-98ec-8cce27a5ad62.png)'
- en: 'We now have our target and a password hash so the next step is to upload an
    exploit. Since we have login credentials, we''re going to use the `psexec` module
    to connect to the domain controller:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了目标和密码哈希，下一步是上传一个漏洞利用。由于我们有登录凭据，我们将使用`psexec`模块连接到域控制器：
- en: '![](img/6ae67851-4bd6-48f0-bb90-cea423f45265.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6ae67851-4bd6-48f0-bb90-cea423f45265.png)'
- en: We are not using a clear-text password because we captured the hash from the
    Win7 machine's administrator's account. Since we have the hash, we do not have
    to brute-force the password. It is always possible that the passwords for the
    different classes of the machine might be different, but in this case they are
    one and the same.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有使用明文密码，因为我们从Win7机器的管理员帐户中捕获了哈希。由于我们有哈希，我们不必暴力破解密码。不同类别的机器的密码可能不同，但在这种情况下，它们是一样的。
- en: Passing the Hash
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 传递哈希
- en: Hashes work as well as passwords in Metasploit. This is known as **Passing the
    Hash**. Pass-the-Hash exploits have been around for at least a decade, and they
    use the Windows login session information available on the network. The exploit
    takes the **Local Security Authority** (**LSA**) information to get a list of
    the NTLM hashes for users logged into the machines on the network. Tools, such
    as the Metasploit Framework or the Pass-the-Hash Toolkit, that are used to get
    the information get the username, domain name, and LM and NT hashes.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在Metasploit中，哈希与密码一样有效。这被称为**传递哈希**。传递哈希漏洞至少已经存在了十年，它们使用网络上可用的Windows登录会话信息。该漏洞利用**本地安全机构**（**LSA**）信息来获取网络上登录到计算机的用户的NTLM哈希列表。用于获取信息的工具，如Metasploit框架或传递哈希工具包，获取用户名、域名和LM和NT哈希。
- en: 'Once the exploit has run, we get a Meterpreter shell and, by running `sysinfo`,
    we can see we are in the domain controller:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦利用运行，我们就会得到一个Meterpreter shell，并通过运行`sysinfo`，我们可以看到我们在域控制器中：
- en: '[PRE21]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![](img/32c79140-c39a-4e26-880f-9bdb40322e4f.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/32c79140-c39a-4e26-880f-9bdb40322e4f.png)'
- en: 'As we covered earlier, Windows Active Directory stores the password hashes
    in the SAM database, so we can use `hashdump` command to dump all the hashes in
    the domain:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Windows Active Directory将密码哈希存储在SAM数据库中，因此我们可以使用`hashdump`命令来转储域中的所有哈希值：
- en: '[PRE22]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![](img/9688cb6c-ea24-4620-ad42-3d41bc0c63da.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9688cb6c-ea24-4620-ad42-3d41bc0c63da.png)'
- en: We now have all the keys to the kingdom compromised from a backend network with
    no internet access. If you notice the numbers behind the usernames in the `hashdump`,
    you can see that the administrator is user `500`. Many experts tell Windows network
    administrators to change the name of the admin account, so that nobody can tell
    which users have which permissions. Clearly, this will not work. Even with the
    username `NegligibleNebbish`, just having a UID of `500` shows that this is a
    user with administrative powers.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在从没有互联网访问权限的后端网络中妥协了王国的所有关键。如果你注意到`hashdump`中用户名后面的数字，你会发现管理员是用户`500`。许多专家告诉Windows网络管理员更改管理员帐户的名称，这样就没有人能够知道哪些用户具有哪些权限。显然，这是行不通的。即使使用用户名`NegligibleNebbish`，只要具有`500`的UID，就表明这是一个具有管理权限的用户。
- en: 'If we put this session in the background and run the sessions command, we can
    see both sessions running from the `//rogue3` evil server to our compromised systems:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将此会话放在后台并运行会话命令，我们可以看到从`//rogue3`恶意服务器到我们受损系统的两个会话正在运行：
- en: '[PRE23]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![](img/17112a06-c06a-4d3f-91ce-58b35ad7c583.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17112a06-c06a-4d3f-91ce-58b35ad7c583.png)'
- en: The Drop Box
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 投递盒
- en: A Drop Box, sometimes also called a **Jump Box**, is a small device that you
    can hide somewhere within a physical location that you are targeting. Getting
    the device into the location will sometimes take other skills, such as social
    engineering, or even a little breaking and entering, to get the device into the
    location. A Drop Box can also be a box sent by the security consultant firm to
    be installed on a network for internal pentesting from a remote location.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 投递盒，有时也被称为**跳板盒**，是一个小设备，你可以将其隐藏在你正在瞄准的物理位置内。将设备放入位置有时需要其他技能，比如社会工程，甚至是一点点的闯入，以便将设备放入位置。投递盒也可以是安全顾问公司发送的一个箱子，用于在远程位置对网络进行内部渗透测试。
- en: '![](img/becbafe6-9120-49b3-ac03-c4137c157153.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/becbafe6-9120-49b3-ac03-c4137c157153.png)'
- en: The Pineapple
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 菠萝
- en: These days, small full-fledged computers are cheap and easy to configure. There
    are also devices on the market that are specifically designed for this use and
    are ready to go right out of the box. The Raspberry Pi is a small computer on
    a board that runs a full Linux distro and can be configured for this work. Two
    devices made for this use are the Wi-Fi Pineapple and Pwnie Express. The Wi-Fi
    Pineapple is our personal favorite. It comes with two separately configurable
    Wi-Fi access points. It is only slightly larger than a pack of cigarettes. Having
    the two Wi-Fi radios makes this device capable of connecting and pivoting from
    any network. A USB CAT5 adapter can also be attached for connections to a wired
    network. These devices are full-fledged Linux systems that any Linux application
    can be installed on.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，小型全功能计算机价格便宜且易于配置。市场上还有一些专门设计用于此目的并且可以立即使用的设备。树莓派是一款运行完整Linux发行版的小型单板计算机，可以为此工作进行配置。专为此目的设计的两款设备是Wi-Fi
    Pineapple和Pwnie Express。Wi-Fi Pineapple是我们的个人最爱。它配备了两个可分别配置的Wi-Fi接入点。它的大小只比一包香烟稍大。拥有两个Wi-Fi无线电使得这个设备能够连接并从任何网络进行跳板连接。还可以连接USB
    CAT5适配器以连接有线网络。这些设备是全功能的Linux系统，可以安装任何Linux应用程序。
- en: The Raspberry Pi is another neat device that can be used for this. The Raspberry
    Pi is a small single-board ARM system that can run many versions of the Linux
    operating system. Yes, our good friends at Offensive Security have built us a
    version of Kali just for the Raspberry Pi. A simple copy of the image to a micro
    SD and the system is ready to go. They also have another neat trick with this
    image for covert operations. A Pi setup can be fully encrypted and set up to fully
    boot from a remote system. This system can also be remotely bricked or disabled
    by deleting the private encryption key with the use of a special password. The
    full details of how to set up this device can be found in the links at the end
    of this chapter.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派是另一个可以用于这个目的的好设备。树莓派是一款小型的单板ARM系统，可以运行许多版本的Linux操作系统。是的，我们的好朋友Offensive Security为树莓派构建了一款Kali的版本。将镜像简单复制到微型SD卡上，系统就准备好了。他们还在这个镜像中使用了另一个巧妙的技巧，用于秘密行动。树莓派设置可以完全加密，并设置为完全从远程系统启动。通过使用特殊密码删除私人加密密钥，也可以远程使系统变砖或禁用。如何设置这个设备的完整细节可以在本章末尾的链接中找到。
- en: So, now you have to sneak this onto the network. For a wired network, a perennial
    favorite intrusion is the friendly Telco guy approach. Employee badges can be
    easily found for various companies on the internet. Making a badge is also an
    easy process. You can find out who provides Telco services for your target during
    your passive footprinting phase. Once you have your badge, you show up at the
    target location carrying your tool bag and laptop, go to the front desk and say
    *"Hi, I'm here from Telco Provider"*. We had a ticket turned in that the internet
    is running slow." You'll be surprised how easily this works to get into the door
    and be led directly to the phone closet. Once in the phone closet, you can hide
    and connect your preconfigured Drop Box. When it fires up, it phones home and
    you are in! Remember, the weakest link to security is always the human interface.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你必须将这个设备偷偷放入网络中。对于有线网络，一个长期受欢迎的入侵方法是友好的电信公司员工的方式。员工的工作证很容易在互联网上找到。制作工作证也是一个简单的过程。在被动足迹阶段，你可以找出谁为你的目标提供电信服务。一旦你有了工作证，你就可以出现在目标地点，携带你的工具包和笔记本电脑，去前台说：“嗨，我是来自电信公司的。”我们收到了一张关于互联网速度变慢的工单。”你会惊讶地发现这种方法多么容易就能进入大门，并直接被带到电话间。一旦进入电话间，你可以隐藏并连接你预先配置的Drop
    Box。当它启动时，它会自动连接到家里，你就进入了！记住，安全的最薄弱环节始终是人的接口。
- en: For a less intrusive method, if your target has Wi-Fi in the office, you can
    use it as your attack vector. This is where the two Wi-Fi radios come in to play.
    One can be used to attack and connect to the target network and the other can
    be used as your connection to pivot from. The Pineapple is designed to be powered
    by a USB battery pack like one that you would use to recharge you phone. Depending
    on the battery size, a Pineapple can be powered to run up to 72 hours or more
    before power loss. With this arrangement, your evil package can even be easily
    hidden in the bushes and run without AC power. Captured data can also be copied
    to a flash card on the device if being in the area during your attack isn't feasible,
    and you can't phone home to the evil server.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一种不那么侵入性的方法，如果你的目标办公室有Wi-Fi，你可以将其用作攻击向量。这就是两个Wi-Fi无线电的用武之地。一个可以用来攻击和连接到目标网络，另一个可以用作你的跳板连接。Pineapple设计为由USB电池包供电，就像你用来给手机充电的那种。根据电池大小，Pineapple可以在断电之前运行长达72小时甚至更长时间。通过这种安排，你的恶意软件甚至可以轻松地隐藏在灌木丛中，无需交流电源即可运行。如果在你的攻击期间无法在现场，也无法与恶意服务器联系，捕获的数据也可以复制到设备上的闪存卡上。
- en: When doing your physical recon of a location, look for cabling running outside
    the building. Sometimes when expansions are done at a location, the people running
    the cable will run a drop on the outside of a building just to make the install
    easier but this leaves a door open to attack. With a good hiding place, a couple
    of RJ45 connectors, and a cheap switch, you can get access to a wired network.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在对位置进行物理侦察时，寻找建筑物外部的电缆。有时在某个地点进行扩建时，负责布线的人员会在建筑物外部布线，以便更容易进行安装，但这也为攻击留下了一个漏洞。通过一个良好的藏身之处，几个RJ45连接器和一个廉价的交换机，你就可以接入有线网络。
- en: Cracking the Network Access Controller (NAC)
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 破解网络访问控制器（NAC）
- en: These days NAC appliances are becoming more common on networks. NACs do give
    an increased level of security, but they are not the *end all* solution that their
    vendors' marketing and sales materials suggest that they are. We will show you
    a simple method of bypassing NAC controls on a company network.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，NAC设备在网络上变得越来越普遍。NAC确实提供了更高级别的安全性，但它们并不是它们的供应商营销和销售材料所暗示的“终极解决方案”。我们将向您展示一种简单的绕过公司网络上NAC控制的方法。
- en: The following information comes from a real hack to a real company we performed
    a while back. Of course, all the names and IP addresses have been changed to protect
    the company. This is not theory. This is a real-world hack. The good thing for
    the company in this dramatization is that we are the good guys. The sad thing
    is it only took about 30 minutes to figure this out, and maybe 2 hours to fully
    implement it.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 以下信息来自我们一段时间前对一家真实公司进行的真实黑客攻击。当然，所有的名称和IP地址都已更改以保护公司。这不是理论。这是真实世界的黑客攻击。对于这个戏剧化的公司来说，好消息是我们是好人。令人沮丧的是，我们只用了大约30分钟来弄清楚这一点，也许花了2个小时来完全实施。
- en: 'We will be bypassing the NAC for the company, https://www.widgetmakers.com.
    The Widget Makers company has two networks: one, the corporate LAN (CorpNET),
    and the other, a production network (ProdNET) containing classified data. The
    two networks are of a flat design, and both networks have full access to each
    other. A NAC appliance was configured and installed on the CorpNET. Employees
    must now use a NAC agent on their machines to connect to the CorpNET. Widget Makers
    uses SIP phones for voice communications. These phones are not on a separate VLAN.
    They are connected to the CorpNET VLAN for ease of use. Widget Makers also has
    a number of network printers on the CorpNET.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将绕过公司的NAC，https://www.widgetmakers.com。Widget Makers公司有两个网络：一个是企业局域网（CorpNET），另一个是包含机密数据的生产网络（ProdNET）。这两个网络都是扁平设计，两个网络都可以互相完全访问。在CorpNET上配置并安装了一个NAC设备。员工现在必须在他们的机器上使用NAC代理才能连接到CorpNET。Widget
    Makers使用SIP电话进行语音通信。这些电话不在一个单独的VLAN上。它们连接到CorpNET VLAN以方便使用。Widget Makers还在CorpNET上有许多网络打印机。
- en: NAC appliances use an agent that is installed on the user's machine for login
    and verification of the user and the machine's identity. These appliances can
    be configured to use a **Remote Authentication Dial in User System** (**RADIUS**)
    server or domain controller for the user credentials. Sometimes, NAC appliances
    use certificates to authenticate the machine. Trying to spoof an internal machine's
    MAC address without an agent and a login will normally result in the MAC address
    getting locked out of the network.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: NAC设备使用安装在用户机器上的代理进行用户登录和验证用户和机器的身份。这些设备可以配置为使用**远程身份验证拨号用户系统**（**RADIUS**）服务器或域控制器进行用户凭据的验证。有时，NAC设备使用证书对机器进行身份验证。试图伪造内部机器的MAC地址而没有代理和登录通常会导致MAC地址被锁定在网络之外。
- en: The weakness in the system is the agents. Most NAC systems are proprietary and
    tied to one vendor. One vendor's agent will not work with another, and there is
    no standard for NAC controls. Most vendors only make agents that run on Windows
    so if you have Macs or Linux workstations on your network, these cannot be joined
    to the network using NAC controls. Now the vendor will tell you to run a Windows
    Only network. If you are a sysadmin reading this book, you know that in reality
    there is no such thing. Even if all workstations and servers are running Windows
    on any network, there are other devices that either don't or can't run Windows.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的弱点在于代理。大多数NAC系统都是专有的，与一个供应商绑定。一个供应商的代理将无法与另一个供应商的代理一起使用，而且没有NAC控制的标准。大多数供应商只制作运行在Windows上的代理，所以如果你的网络上有Mac或Linux工作站，这些设备无法使用NAC控制加入网络。现在供应商会告诉你只能运行Windows网络。如果你是一名系统管理员，你知道在现实中根本就没有这样的事情。即使所有工作站和服务器都在任何网络上运行Windows，还有其他设备要么不运行Windows，要么无法运行Windows。
- en: So what do you do with phones, printers, and workstations not running a Windows
    operating system to get them to work within the NAC controls? You have to whitelist
    their MAC and IP addresses within the NAC settings. So, by taking one of these
    devices off the network and spoofing its identity you now have access to the restricted
    VLAN with the access level of the device you have spoofed. On a flat network,
    normally you have access to everything in all local networks.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，对于不运行Windows操作系统的电话、打印机和工作站，你该如何让它们在NAC控制范围内工作？你必须在NAC设置中将它们的MAC和IP地址列入白名单。因此，通过将这些设备之一从网络中移除并伪装其身份，你现在可以访问受限VLAN，并具有你伪装设备的访问级别。在扁平网络中，通常你可以访问所有本地网络中的所有内容。
- en: 'One of the easiest marks for this hack is a SIP phone. People would definitely
    notice if a printer went offline. Everyone uses printers. To use a printer for
    this type of exploit, you must pick a printer that isn''t used often. Phones are
    a different case. Offices always have extra phones for guests, and often, if you
    know the work schedule of the employees, you can pick the phone of someone who
    is away on vacation. Unplug their phone, tape your Drop Box under the desk, and
    connect it to the phone drop and you are in:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这种黑客攻击最容易的目标之一是SIP电话。如果打印机离线，人们肯定会注意到。每个人都使用打印机。要利用打印机进行这种利用，你必须选择一个不经常使用的打印机。电话是另一回事。办公室总是有额外的电话供客人使用，而且通常情况下，如果你知道员工的工作时间表，你可以选择一个度假的人的电话。拔掉他们的电话，把你的Drop
    Box贴在桌子下面，然后连接到电话插座，你就进入了：
- en: '![](img/375f89d6-1116-4bed-b615-df5524e59717.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/375f89d6-1116-4bed-b615-df5524e59717.png)'
- en: So how do you protect from this?
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 那么你该如何保护自己呢？
- en: First thing, don't count on NAC being the ultimate security feature on your
    network. NAC should be only one layer of many in the security architecture of
    the network. Actually, it should be one of the upper layers of your network security.
    One simple workaround is to turn off (unplug) network ports that are not in use.
    This will not save you from a hacker subverting a desk-phone of somebody who is
    on vacation, but it can keep an empty cube from becoming a hacker's headquarters.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，不要指望NAC成为网络上的终极安全功能。NAC应该只是网络安全架构中的一个层面。实际上，它应该是网络安全的一个较高层面。一个简单的解决方法是关闭（拔掉）未使用的网络端口。这不会阻止黑客篡改度假的人的桌面电话，但可以防止一个空的工作区成为黑客的总部。
- en: The first layer in any network security should be proper segmentation. If you
    can't route to it, you can't get to it. Notice in the preceding diagram that **CorpNET**
    and **ProdNET** have full access to each other. An attacker coming in through
    **CorpNET**, spoofing a network device, can gain access to the restricted **ProdNET**.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 任何网络安全的第一层应该是适当的分割。如果不能路由到它，就无法到达它。请注意在前图中**CorpNET**和**ProdNET**可以完全访问彼此。通过**CorpNET**进入的攻击者，伪造网络设备，可以访问受限的**ProdNET**。
- en: Creating a spear-phishing attack with the Social Engineering Toolkit
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用社会工程工具包创建鱼叉式网络钓鱼攻击
- en: 'The **Social Engineering Toolkit** (**SET**) license agreement states that
    SET is designed purely for good and not evil. Any use of this tool for malicious
    purposes that are unauthorized by the owner of the network and equipment violates
    the **terms of service** (**TOS**) and license of this toolset. To find this tool,
    go through the menu Kali Linux 08- Exploitation Tools | social engineering toolkit,
    or type `setoolkit` on the command line:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**社会工程工具包**（**SET**）许可协议规定，SET纯粹是为了善良而设计的。未经网络和设备所有者授权的恶意目的使用此工具违反了此工具集的**服务条款**（**TOS**）和许可证。要找到此工具，通过菜单Kali
    Linux 08-渗透测试工具 | 社会工程工具包，或在命令行中键入`setoolkit`：'
- en: '![](img/a4c42417-c224-4786-bd86-26828aab53a9.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a4c42417-c224-4786-bd86-26828aab53a9.png)'
- en: 'This attack is going to use a Metasploit reverse HTTP payload, so there are
    a couple of steps that you have to put in place before using the SET:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这次攻击将使用Metasploit反向HTTP有效载荷，因此在使用SET之前，您必须执行一些步骤：
- en: Start the Metasploit service. Start up the Metasploit console by going through
    the menus: Applications | 08 - Exploitation Tools | metasploit framework. You
    can also start the Metasploit Framework console by typing `msfconsole` at a Command
    Prompt, avoiding the GUI menu altogether.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Metasploit服务。通过菜单启动Metasploit控制台：应用程序 | 08-渗透测试工具 | Metasploit框架。您还可以通过在命令提示符中键入`msfconsole`来启动Metasploit框架控制台，完全避免使用GUI菜单。
- en: Ascertain the local host address your listener will be listening on, so that
    your malware has something to phone home to. In our test network, the Kali server
    is running on a virtual machine running on a physical host. Either the host's
    IP or a bridged pseudo-Ethernet card from the virtual machine must be the destination
    when the malware calls in. If you were running your Kali from a VMS machine on
    the internet, this would be slightly less difficult.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定本地主机地址，您的侦听器将在该地址上侦听，以便您的恶意软件有东西可以回家。在我们的测试网络中，Kali服务器正在运行在物理主机上的虚拟机上。当恶意软件呼叫时，主机的IP或虚拟机的桥接伪以太网卡必须是目的地。如果您在互联网上从VMS机器上运行Kali，这将稍微困难一些。
- en: Here are the configs for the test network. There are two machines with internet
    access, and two servers that are only accessible from the internal network. Kali
    186 is the attacker's laptop, and the Windows 10 workstation is the jump box for
    the internal network.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是测试网络的配置。有两台具有互联网访问权限的机器，以及两台只能从内部网络访问的服务器。Kali 186是攻击者的笔记本电脑，而Windows 10工作站是内部网络的跳板。
- en: Once you have started Metasploit, you need to start the listener, so the malware
    you are about to create has something with which to answer the call when it phones
    home.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您启动了Metasploit，您需要启动侦听器，这样您即将创建的恶意软件在回家时有东西可以回答。
- en: 'Type the following command in the MSF Command Prompt:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在MSF命令提示符中输入以下命令：
- en: '[PRE24]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The listener is an open running process, and so the cursor does not return
    to the ready state. To show that the listener is active, we can run a port scan
    against it with `nmap`:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 侦听器是一个正在运行的开放进程，因此光标不会返回到就绪状态。为了显示侦听器是活动的，我们可以使用`nmap`对其进行端口扫描：
- en: '![](img/21521e32-60f1-4665-83d5-deccdcb5c9ac.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/21521e32-60f1-4665-83d5-deccdcb5c9ac.png)'
- en: 'On the other side, the listener has responded to the `nmap` scan with a readout
    of the data from the scan:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，侦听器已经对`nmap`扫描做出了响应，并输出了扫描数据：
- en: '![](img/f0ff3f00-86bb-4235-a0d8-f2aaf3f0a7da.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f0ff3f00-86bb-4235-a0d8-f2aaf3f0a7da.png)'
- en: 'In the following diagram, we can see that the source of the scan is marked
    by the listener, and all of the scan requests are recorded as coming from `10.0.2.15`,
    which is the internal IP of the Kali machine:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，我们可以看到扫描源由侦听器标记，并且所有扫描请求都记录为来自`10.0.2.15`，这是Kali机器的内部IP：
- en: '![](img/277a7f2e-2df2-41fa-a9ff-c3bfe4bf48cd.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/277a7f2e-2df2-41fa-a9ff-c3bfe4bf48cd.png)'
- en: The malware we are going to create will be an executable file wrapped in a PDF
    file. This will be an attachment, on an email that is from a purportedly safe
    source, to an identified systems administrator in the target company. We will
    start with a review of the menu structure of the Social Engineering Toolkit.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要创建的恶意软件将是一个包含在PDF文件中的可执行文件。这将作为附件发送到目标公司中一个被确认的系统管理员的电子邮件，该邮件来自一个据称是安全来源的电子邮件。我们将从社会工程工具包的菜单结构开始进行审查。
- en: 'The main menu has six entries, and an exit cue:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 主菜单有六个条目和一个退出提示：
- en: '`1) Social-Engineering Attacks`'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1）社会工程攻击
- en: '`2) Fast-Track Penetration Testing`'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2）快速跟踪渗透测试
- en: '`3) Third-Party Modules`'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 3）第三方模块
- en: '`4) Update the Social-Engineer Toolkit`'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 4）更新社会工程师工具包
- en: '`5) Update SET configuration`'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 5）更新SET配置
- en: '`6) Help, Credits, and About`'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 6）帮助、积分和关于
- en: '`99) Exit the Social Engineering Toolkit`'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 99）退出社会工程工具包
- en: 'Under entry #1, `Social-Engineering Attacks`, there are 11 entries:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在条目＃1下，`社会工程攻击`，有11个条目：
- en: '`1) Spear-Phishing Attack Vectors`'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1）鱼叉式网络钓鱼攻击向量
- en: '`2) Website Attack Vectors`'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2）网站攻击向量
- en: '`3) Infectious Media Generator`'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 3）传染性媒体生成器
- en: '`4) Create a Payload and Listener`'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 4）创建有效载荷和侦听器
- en: '`5) Mass Mailer Attack`'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 5）大规模邮件发送攻击
- en: '`6) Arduino-Based Attack Vector`'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 6）基于Arduino的攻击向量
- en: '`7) Wireless Access Point Attack Vector`'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 7）无线接入点攻击向量
- en: '`8) QRCode Generator Attack Vector`'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 8）QR码生成器攻击向量
- en: '`9) Powershell Attack Vectors`'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 9）Powershell攻击向量
- en: '`10) Third Party Modules`'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 10）第三方模块
- en: '`99) Return back to the main menu.`'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 99）返回主菜单。
- en: Using the Spear-Phishing Attack Vectors menu
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用鱼叉式网络钓鱼攻击向量菜单
- en: 'The `Spear-Phishing Attack Vectors` menu has four options:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`鱼叉式网络钓鱼攻击向量`菜单有四个选项：'
- en: '`1) Perform a Mass Email Attack`'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1) 执行大规模电子邮件攻击
- en: '`2) Create a FileFormat Payload`'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2) 创建一个文件格式有效负载
- en: '`3) Create a Social-Engineering Template`'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 3) 创建社会工程模板
- en: '`99) Return to Main Menu`'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 99) 返回主菜单
- en: Since we are going to set up a persistent threat that lets us stay in command
    of the victim's machine, and have to overcome a user's possible reluctance to
    double-click an attachment, we have to create an irresistible spear-phishing mail
    piece. To do this properly, it is important to have done effective reconnaissance
    ahead of time.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将建立一个持久的威胁，让我们能够控制受害者的机器，并且必须克服用户可能不愿意双击附件的可能性，我们必须创建一个不可抗拒的鱼叉式网络钓鱼邮件。为了做到这一点，提前进行有效的侦察是很重要的。
- en: 'Company address books and calendars are useful for creating the urgency needed
    to get an email opened. Just like with marketing by email, either legitimate or
    spammy, a spear-phishing email title has to be interesting, intriguing, or frightening
    to the victim:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 公司通讯录和日历对于制造打开邮件所需的紧迫感是有用的。就像通过电子邮件进行营销一样，无论是合法的还是垃圾邮件，鱼叉式网络钓鱼邮件的标题必须对受害者有趣、引人入胜或令人恐惧。
- en: '![](img/501e35a9-7355-4c94-8bd9-cd6a2a64c88a.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](img/501e35a9-7355-4c94-8bd9-cd6a2a64c88a.png)'
- en: 'This email is short, interesting, and can create urgency by greed. The attachment
    could be any of the following:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这封电子邮件简短、有趣，并且可以通过贪婪来制造紧迫感。附件可以是以下任何一种：
- en: A ZIP file, presumed to have a document inside
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个ZIP文件，假定里面有一个文档
- en: A Word document
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Word文档
- en: A PDF file
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个PDF文件
- en: 'The SET gives 21 possible payloads. Some of these will work better on Mac operating
    systems than Windows systems. Most Windows workstations are not provisioned to
    handle RAR-compressed files. The following are the choices available:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: SET提供了21种可能的有效负载。其中一些在Mac操作系统上的效果会比在Windows系统上更好。大多数Windows工作站没有配置处理RAR压缩文件。以下是可用的选择：
- en: '`1) SET Custom Written DLL Hijacking Attack Vector (RAR, ZIP)`'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1) SET自定义编写的DLL劫持攻击向量（RAR，ZIP）
- en: '`2) SET Custom Written Document UNC LM SMB Capture Attack`'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2) SET自定义编写的文档UNC LM SMB捕获攻击
- en: '`3) MS14-017 Microsoft Word RTF Object Confusion (2014-04-01)`'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 3) MS14-017 Microsoft Word RTF对象混淆（2014-04-01）
- en: '`4) Microsoft Windows CreateSizedDIBSECTION Stack Buffer Overflow`'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 4) Microsoft Windows CreateSizedDIBSECTION堆栈缓冲区溢出
- en: '`5) Microsoft Word RTF pFragments Stack Buffer Overflow (MS10-087)`'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 5) Microsoft Word RTF pFragments Stack Buffer Overflow (MS10-087)
- en: '`6) Adobe Flash Player "Button" Remote Code Execution`'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 6) Adobe Flash Player“Button”远程代码执行
- en: '`7) Adobe CoolType SING Table "uniqueName" Overflow`'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 7) Adobe CoolType SING表“uniqueName”溢出
- en: '`8) Adobe Flash Player "newfunction" Invalid Pointer Use`'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 8) Adobe Flash Player“newfunction”无效指针使用
- en: '`9) Adobe Collab.collectEmailInfo Buffer Overflow`'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 9) Adobe Collab.collectEmailInfo缓冲区溢出
- en: '`10) Adobe Collab.getIcon Buffer Overflow`'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 10) Adobe Collab.getIcon缓冲区溢出
- en: '`11) Adobe JBIG2Decode Memory Corruption Exploit`'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 11) Adobe JBIG2Decode内存损坏利用
- en: '`12) Adobe PDF Embedded EXE Social Engineering`'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 12) Adobe PDF嵌入式EXE社会工程
- en: '`13) Adobe util.printf() Buffer Overflow`'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 13) Adobe util.printf()缓冲区溢出
- en: '`14) Custom EXE to VBA (sent via RAR) (RAR required)`'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 14) 自定义EXE到VBA（通过RAR发送）（需要RAR）
- en: '`15) Adobe U3D CLODProgressiveMeshDeclaration Array Overrun`'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 15) Adobe U3D CLODProgressiveMeshDeclaration数组超限
- en: '`16) Adobe PDF Embedded EXE Social Engineering (NOJS)`'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 16) Adobe PDF嵌入式EXE社会工程（NOJS）
- en: '`17) Foxit PDF Reader v4.1.1 Title Stack Buffer Overflow`'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 17) Foxit PDF Reader v4.1.1标题堆栈缓冲区溢出
- en: '`18) Apple QuickTime PICT PnSize Buffer Overflow`'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 18) Apple QuickTime PICT PnSize缓冲区溢出
- en: '`19) Nuance PDF Reader v6.0 Launch Stack Buffer Overflow`'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 19) Nuance PDF Reader v6.0启动堆栈缓冲区溢出
- en: '`20) Adobe Reader u3D Memory Corruption Vulnerability`'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 20) Adobe Reader u3D内存损坏漏洞
- en: '`21) MSCOMCTL ActiveX Buffer Overflow (ms12-027)`'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 21) MSCOMCTL ActiveX缓冲区溢出（ms12-027）
- en: '![](img/dd7b9407-5bf6-410d-8623-38eaf4fbd7b7.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd7b9407-5bf6-410d-8623-38eaf4fbd7b7.png)'
- en: 'Let''s just choose the default, which is item 12\. When you hit *Enter*, the
    next screen lets you use a doctored PDF file of your own choosing, or to use the
    built-in blank PDF. Choosing the second option, we see seven options:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们只选择默认的项目12。当您按*Enter*时，下一个屏幕让您选择自己选择的经过处理的PDF文件，或者使用内置的空白PDF。选择第二个选项，我们看到七个选项：
- en: '`1) Windows Reverse TCP Shell`'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1) Windows反向TCP Shell
- en: '`2) Windows Meterpreter Reverse_TCP`'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2) Windows Meterpreter Reverse_TCP
- en: '`3) Windows Reverse VNC DLL`'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 3) Windows反向VNC DLL
- en: '`4) Windows Reverse TCP Shell (x64)`'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 4) Windows反向TCP Shell（x64）
- en: '`5) Windows Meterpreter Reverse_TCP (X64)`'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 5) Windows Meterpreter Reverse_TCP（X64）
- en: '`6) Windows Shell Bind_TCP (X64)`'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 6) Windows Shell Bind_TCP (X64)
- en: '`7) Windows Meterpreter Reverse HTTPS`'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 7) Windows Meterpreter Reverse HTTPS
- en: '![](img/6ce59fb0-5deb-462b-a6a3-4f605a32b927.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6ce59fb0-5deb-462b-a6a3-4f605a32b927.png)'
- en: Since three of the options are going to run code that gets the victim machine
    to phone home to your Metasploit Framework Meterpreter tool, and you have been
    practicing with that tool, it might make sense to choose one of those as your
    evil payload. Let's choose option, `7) Windows Meterpreter Reverse HTTPS`.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其中三个选项将运行代码，使受害者机器联系到您的Metasploit Framework Meterpreter工具，而且您已经在使用该工具进行练习，选择其中一个作为您的恶意有效负载可能是有意义的。让我们选择选项`7)
    Windows Meterpreter Reverse HTTPS`。
- en: 'When we type `7`, we get several options:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们输入`7`时，会得到几个选项：
- en: '`IP address of the listener (LHOST)`: Use the host address where you are going
    to have the listener. My Kali workstation thinks it is 10.0.2.15.'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监听器的IP地址（LHOST）：使用您将拥有监听器的主机地址。我的Kali工作站认为它是10.0.2.15。
- en: '`Port to connect back to [443]`: Port `443` is the default here, but you can
    have the listener at any port on your listening device. `443` is the HTTPS port,
    so it would not look unusual because of its number. Port `12234` would look unusual
    and might also be blocked if the firewall administrators are whitelisting approved
    ports, and blacklisting all the others. It states that payloads are sent to the
    `/root/.set/template.pdf` directory.'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接回[443]端口：端口`443`在这里是默认的，但您可以在监听设备上的任何端口上设置监听器。`443`是HTTPS端口，因此由于其编号，它看起来不会不寻常。端口`12234`看起来不寻常，如果防火墙管理员正在将批准的端口列入白名单，并将其他所有端口列入黑名单，则可能也会被阻止。它说明有效负载被发送到`/root/.set/template.pdf`目录。
- en: 'This is not what it does. The executable is set as `legit.exe` in this case.
    When you enter the name of the file, as in shown the following screenshot, you
    need to use the full path:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是它的作用。在这种情况下，可执行文件被设置为`legit.exe`。当您输入文件名时，如下面的截图所示，您需要使用完整的路径：
- en: '![](img/5be5dade-6d9e-460a-8dfe-d068018856f0.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5be5dade-6d9e-460a-8dfe-d068018856f0.png)'
- en: Once you have chosen the name of the PDF, fire up the Social-Engineering Toolkit
    Mass E-Mailer.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 选择PDF的名称后，启动社会工程工具包大规模邮件发送程序。
- en: 'The mailer will use an open mail relay, if you have found one, a Gmail account,
    or any legitimate email SMTP server. The SET does not contain its own SMTP server.
    You might want to find a free email service that you can use for this purpose,
    or use an open relay mail server:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您找到了一个开放的邮件中继，邮件发送程序将使用该中继，一个Gmail帐户或任何合法的电子邮件SMTP服务器。SET不包含自己的SMTP服务器。您可能希望找到一个可以用于此目的的免费电子邮件服务，或者使用一个开放的中继邮件服务器：
- en: '![](img/a860d416-3adb-4f5a-85b0-3715dd2b0fa6.png)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a860d416-3adb-4f5a-85b0-3715dd2b0fa6.png)'
- en: Choose a subject, or write a new email message
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择一个主题，或者编写一封新的电子邮件消息
- en: 'The SET allows you to choose several different tasty email subjects for your
    phishing email attack, and you can easily add new templates to customize the approach.
    The fourth choice in the following list is the one we just created:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: SET允许您为钓鱼电子邮件攻击选择几个不同的有吸引力的电子邮件主题，并且您可以轻松添加新模板以自定义方法。以下列表中的第四个选择是我们刚刚创建的选择：
- en: '![](img/ea8b6337-4dc8-4013-acec-c973d0042ed6.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ea8b6337-4dc8-4013-acec-c973d0042ed6.png)'
- en: 'For this test of the system, I chose to send the attack to and from a Gmail
    account over which I have control. The SET does not return to the mailer section
    in the event of an error in sending the message. Google Mail caught the bogus
    PDF file and sent back a link to its security pages:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试系统，我选择将攻击发送到一个我控制的Gmail帐户。如果发送消息时出现错误，SET不会返回到邮件发送程序部分。Google Mail捕获了虚假的PDF文件，并发送了一个指向其安全页面的链接：
- en: '![](img/8ad7cd15-7d83-4f80-bab7-3c1070ecc993.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8ad7cd15-7d83-4f80-bab7-3c1070ecc993.png)'
- en: 'Use an email account from a server that does not check for infected attachments.
    We used `evilhacker@act23.com`, and sent the email to `kalibook@act23.com`, and
    this worked:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 使用不检查感染附件的服务器的电子邮件帐户。我们使用了`evilhacker@act23.com`，并将电子邮件发送到`kalibook@act23.com`，这起作用了：
- en: '![](img/4c9f74d7-6cfe-431d-8be3-2b32c54f5793.png)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4c9f74d7-6cfe-431d-8be3-2b32c54f5793.png)'
- en: Using Backdoor Factory to evade antivirus
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用后门工厂来规避杀毒软件
- en: The exploit code worked well on an XP SP2 machine with no antivirus software,
    and would work well on any machine that didn't have AV installed, but it was less
    effective on a Windows 10 machine with the basic default Windows antivirus installed.
    We had to turn off the real-time checking feature on the antivirus to get the
    email to read without errors, and the antivirus scrubbed out our doctored file.
    As security engineers, we are happy that Microsoft Windows 10 has such an effective
    anti-malware feature, right out of the gate. As penetration testers, we are disappointed.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 这个利用代码在没有杀毒软件的XP SP2机器上运行良好，并且在任何没有安装AV的机器上都会运行良好，但在安装了基本默认Windows杀毒软件的Windows
    10机器上效果较差。我们不得不关闭杀毒软件的实时检查功能，才能使电子邮件在没有错误的情况下读取，而杀毒软件则清除了我们的篡改文件。作为安全工程师，我们很高兴微软Windows
    10拥有如此有效的反恶意软件功能。作为渗透测试人员，我们感到失望。
- en: 'Backdoor Factory inserts shellcode into working EXE files without otherwise
    changing the original all that much. You can use the executables in the `/usr/share/windows-binaries`
    directory, as shown in the following screenshot, or any other Windows binary that
    does not have protection coded into it:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 后门工厂将shellcode插入工作中的EXE文件，而不会对原始文件进行太多更改。您可以使用`/usr/share/windows-binaries`目录中的可执行文件，如下面的截图所示，或者任何其他没有内置保护的Windows二进制文件：
- en: '![](img/28f499f6-38d8-4c5d-a6b7-98ee4b56d76b.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![](img/28f499f6-38d8-4c5d-a6b7-98ee4b56d76b.png)'
- en: 'The code to run Backdoor Factory and create a remote shell with a listener
    at `10.0.0.2`, on port `43434` is as follows. The cave-jumping option spreads
    your code across the voids in the executable to further confuse the antivirus
    scans:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 运行Backdoor Factory并在`10.0.0.2`上的端口`43434`创建一个远程shell的代码如下。跳洞选项将您的代码传播到可执行文件中的空白，以进一步混淆杀毒软件扫描：
- en: '[PRE25]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If you make an error in the shellcode choice, the application shows you your
    choices:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在shellcode选择中出现错误，应用程序会显示您的选择：
- en: '![](img/c25fd43e-5741-4d32-bb29-1b3ffa7e30af.png)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c25fd43e-5741-4d32-bb29-1b3ffa7e30af.png)'
- en: '[PRE26]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The Backdoor Factory then carries on and gives options for injecting the shellcode
    into all the voids or caves in the binary:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，后门工厂继续并提供选项，将shellcode注入二进制文件中的所有空白或洞：
- en: '![](img/a5df754f-1f57-41b9-a382-f03992a1216f.png)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a5df754f-1f57-41b9-a382-f03992a1216f.png)'
- en: 'We will just choose Cave 1:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将选择Cave 1：
- en: '![](img/6d2fbe20-617e-428e-afeb-d6f2c5db0cf8.png)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d2fbe20-617e-428e-afeb-d6f2c5db0cf8.png)'
- en: The `backdoored` directory is in the root `home` directory, `~/backdoored/`,
    so it is easy to find. We could use the SET to push this doctored file to a mass
    mailing, but you can just email it from a spoofed account to the Windows 10 box
    to see if it can clear the antivirus hurdle. The executable had to be zipped to
    get past the filters on our mail server, and as soon as it was unzipped on the
    Windows 10 machine, it was scrubbed away as a malware file.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`backdoored`目录位于根`home`目录`~/backdoored/`中，因此很容易找到。我们可以使用SET将这个篡改过的文件推送到大规模邮件中，但您可以只需从伪造的帐户发送电子邮件到Windows
    10框，以查看它是否可以清除杀毒软件障碍。可执行文件必须被压缩以通过我们的邮件服务器上的过滤器，一旦它在Windows 10机器上解压缩，它就会被删除为恶意软件文件。'
- en: Windows 10's default antivirus found this file as it found the other file from
    the SET. Unpatched, older versions of Windows are plainly at risk.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 10的默认杀毒软件发现了这个文件，就像它发现了SET中的其他文件一样。未打补丁的旧版本的Windows明显存在风险。
- en: Summary
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you have seen five different ways to gain control and put in
    back-doors on Windows machines, from Ncat scripting, to Metasploit Meterpreter
    attacks, to adding a Drop Box, to using SET for sending phishing emails, and to
    using Backdoor Factory to create executables with shell-script backdoors.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经看到了五种不同的方法来控制并在Windows机器上设置后门，从Ncat脚本编写，到Metasploit Meterpreter攻击，再到添加一个Drop
    Box，再到使用SET发送钓鱼邮件，以及使用Backdoor Factory创建带有shell脚本后门的可执行文件。
- en: In this chapter, we have also learned the set up and use of a Jump Box on various
    devices.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们还学习了在各种设备上设置和使用跳板机。
- en: In the next chapter, we will address reverse-engineering malware you collect,
    so you can understand what it is likely to do in the wild or in your network,
    and stress-testing your equipment.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论反向工程恶意软件的收集，以便您了解它在野外或您的网络中可能会做什么，并对您的设备进行压力测试。
- en: Further reading
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '**Kali Raspberry Pi set up**: [https://docs.kali.org/kali-on-arm/install-kali-linux-arm-raspberry-pi](https://docs.kali.org/kali-on-arm/install-kali-linux-arm-raspberry-pi)'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kali树莓派设置**：[https://docs.kali.org/kali-on-arm/install-kali-linux-arm-raspberry-pi](https://docs.kali.org/kali-on-arm/install-kali-linux-arm-raspberry-pi)'
- en: '**Raspberry Pi disk encryption**: [https://docs.kali.org/kali-dojo/04-raspberry-pi-with-luks-disk-encryption](https://docs.kali.org/kali-dojo/04-raspberry-pi-with-luks-disk-encryption)'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**树莓派磁盘加密**：[https://docs.kali.org/kali-dojo/04-raspberry-pi-with-luks-disk-encryption](https://docs.kali.org/kali-dojo/04-raspberry-pi-with-luks-disk-encryption)'
