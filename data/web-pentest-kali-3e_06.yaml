- en: Finding and Exploiting Cross-Site Scripting (XSS) Vulnerabilities
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发现和利用跨站脚本（XSS）漏洞
- en: A web browser is a code interpreter that takes HTML and script code to present
    a document to the user in an attractive and useful format, including text, images,
    and video clips. It allows the user to interact with dynamic elements including
    search fields, hyperlinks, forms, video and audio controls, and many others.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Web浏览器是一个代码解释器，它接受HTML和脚本代码以以吸引人和有用的格式向用户呈现文档，包括文本、图像和视频剪辑。它允许用户与动态元素进行交互，包括搜索字段、超链接、表单、视频和音频控件等等。
- en: There are many ways for an application to manage this dynamic interaction with
    users. The one way that is most common in today's web applications is the use
    of client-side script code. This means that the server sends code to the client
    that will be executed by the web browser.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序有许多方法来管理与用户的这种动态交互。在当今的Web应用程序中，最常见的方式是使用客户端脚本代码。这意味着服务器向客户端发送将由Web浏览器执行的代码。
- en: When user input is used to determine the script code behavior, and this input
    is not properly validated and sanitized in order to prevent it from containing
    code, rather than information, the injected code will be executed by the browser
    and you will have a **Cross-Site Scripting** (**XSS**) vulnerability.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户输入用于确定脚本代码行为，并且此输入未经适当验证和清理以防止其包含代码而不是信息时，浏览器将执行注入的代码，您将拥有**跨站脚本**（**XSS**）漏洞。
- en: XSS is a type of code injection that happens when script code is added to the
    user's input and processed as code instead of data by the web browser, which then
    executes it, altering the way the user sees the page and/or its functionality.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: XSS是一种代码注入类型，当脚本代码被添加到用户的输入并被Web浏览器作为代码而不是数据处理时，就会发生XSS漏洞，然后执行它，改变用户看到页面和/或其功能的方式。
- en: An overview of Cross-Site Scripting
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨站脚本攻击概述
- en: The name, Cross-Site Scripting, may not intuitively relate to its current definition.
    This is because the term originally referred to a related, but different attack.
    In the late 1990s and early 2000s, it was possible to read data from web pages
    loaded in adjacent windows or frames using JavaScript code. Thus, a malicious
    website could cross the boundary between the two and interact with contents loaded
    on an entirely different web page not related to its domain. This was later fixed
    by browser developers, but the attack name was inherited by the technique that
    makes web pages load and execute malicious scripts in the browser rather than
    reading contents from adjacent frames.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 名称“跨站脚本”可能与其当前定义不直观相关。这是因为该术语最初指的是一种相关但不同的攻击。在20世纪90年代末和21世纪初，可以使用JavaScript代码从加载在相邻窗口或框架中的Web页面中读取数据。因此，恶意网站可以跨越两者之间的边界，并与与其域无关的完全不相关的Web页面上加载的内容进行交互。浏览器开发人员后来修复了这个问题，但攻击名称被继承，用于使Web页面加载和执行恶意脚本而不是从相邻框架中读取内容的技术。
- en: In simple terms, an XSS attack allows the attacker to execute malicious script
    code in another user's browser. It could be JavaScript, VBScript, or any other
    script code, although JavaScript is by far the one used most commonly. The malicious
    script is delivered to the client via a website that is vulnerable to XSS. On
    the client side, the web browser sees the scripts as a legitimate part of the
    website and executes them. When the script runs in the victim's browser, it can
    force it to perform actions similar to the ones a user could do. The script can
    also make the browser execute fraudulent transactions, steal cookies, or redirect
    the browser to another website.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，XSS攻击允许攻击者在另一个用户的浏览器中执行恶意脚本代码。它可以是JavaScript、VBScript或任何其他脚本代码，尽管JavaScript是最常用的。恶意脚本通过易受XSS攻击的网站传递给客户端。在客户端上，Web浏览器将脚本视为网站的合法部分并执行它们。当脚本在受害者的浏览器中运行时，它可以强制浏览器执行类似于用户可以执行的操作。脚本还可以使浏览器执行欺诈性交易、窃取Cookie或将浏览器重定向到另一个网站。
- en: 'An XSS attack typically involves the following participants:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: XSS攻击通常涉及以下参与者：
- en: The attacker who is executing the attack
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行攻击的攻击者
- en: The vulnerable web application
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易受攻击的Web应用程序
- en: The victim using a web browser
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Web浏览器的受害者
- en: A third-party website to which the attacker wants to redirect the browser or
    attack through the victim
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 攻击者希望通过受害者重定向浏览器或攻击第三方网站
- en: 'Let''s look at an example of an attacker executing an XSS attack:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个攻击者执行XSS攻击的例子：
- en: 'The attacker first tests the various input fields for the XSS flaw using legitimate
    data. Input fields that reflect the data back to the browser might be candidates
    for an XSS flaw. The following screenshot shows an example, where the website
    passes the input using the `GET` method and displays it back to the browser:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者首先使用合法数据测试各个输入字段的XSS漏洞。将数据反映回浏览器的输入字段可能是XSS漏洞的候选项。以下截图显示了一个示例，其中网站使用`GET`方法传递输入并将其显示回浏览器：
- en: '![](img/00168.jpeg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00168.jpeg)'
- en: Once the attacker finds a parameter to inject on which insufficient or no input
    validation has been done, they will have to devise a way to deliver the malicious
    URL containing the JavaScript to the victim. The attacker could use an email as
    a delivery mechanism, or entice the victim into viewing the email by through a
    phishing attack.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦攻击者找到一个参数来注入，该参数上没有进行足够或没有进行输入验证，他们将不得不设计一种方法将包含JavaScript的恶意URL传递给受害者。攻击者可以使用电子邮件作为传递机制，或者通过网络钓鱼攻击引诱受害者查看电子邮件。
- en: 'The email would contain a URL to the vulnerable web application along with
    the injected JavaScript. When the victim clicks on it, the browser parses the
    URL and also sends the JavaScript to the website. The input, in the form of JavaScript,
    is reflected in browser; consider the following example:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 电子邮件将包含一个指向易受攻击的Web应用程序的URL以及注入的JavaScript。当受害者点击它时，浏览器解析URL并将JavaScript发送到网站。以JavaScript形式的输入在浏览器中反映出来；考虑以下示例：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The complete URL is `http://example.org/hello.php?name=<script>alert('Pwned!!')</script>`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的URL是`http://example.org/hello.php?name=<script>alert('Pwned!!')</script>`。
- en: The alert method is often used for demonstration purpose and to test if the
    application is vulnerable. We will explore other JavaScript methods that attackers
    often use, later in this chapter.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 警报方法通常用于演示目的和测试应用程序是否存在漏洞。在本章后面，我们将探讨攻击者经常使用的其他JavaScript方法。
- en: 'If the web application is vulnerable, a dialog box will pop up in the victim''s
    browser, as shown in the following screenshot:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果Web应用程序存在漏洞，将在受害者的浏览器中弹出对话框，如下面的屏幕截图所示：
- en: '![](img/00169.jpeg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00169.jpeg)
- en: 'The main objective of XSS is to execute JavaScript in the victim''s browser,
    but there are different ways to achieve it depending on the design and purpose
    of the website. Here are the three major categories of XSS:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: XSS的主要目标是在受害者的浏览器中执行JavaScript，但根据网站的设计和目的，有不同的实现方式。以下是XSS的三个主要类别：
- en: Persistent XSS
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持久性XSS
- en: Reflected XSS
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反射型XSS
- en: DOM-based XSS
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于DOM的XSS
- en: Persistent XSS
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持久性XSS
- en: An XSS flaw is called **persistent** or **stored** when the injected data is
    stored on the web server or the database, and the application serves it back to
    one or all users of the application without validation. An attacker whose goal
    is to infect every visitor to the website would use a persistent XSS attack. This
    enables the attacker to exploit the website on a large scale.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当注入的数据存储在Web服务器或数据库上，并且应用程序在不进行验证的情况下将其返回给应用程序的一个或所有用户时，XSS漏洞被称为**持久性**或**存储型**。一个目标是感染网站的每个访问者的攻击者将使用持久性XSS攻击。这使得攻击者能够大规模地利用网站。
- en: 'Typical targets of persistent XSS flaws are as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 持久性XSS漏洞的典型目标如下：
- en: Web-based discussion forums
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于Web的讨论论坛
- en: Social networking websites
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社交网络网站
- en: News websites
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新闻网站
- en: '**Persistent XSS** is considered to be more serious than other XSS flaws, as
    the attacker''s malicious script is injected into the victim''s browser automatically.
    It does not require a phishing attack to lure the user into clicking on a link.
    The attacker uploads the malicious script onto a vulnerable website, and it is
    then delivered to the victim''s browser as part of their normal browsing activity.
    As XSS can also be used to load scripts from an external site. This is especially
    damaging in stored XSS. When injected, the following code will query the remote
    server for the JavaScript to be executed:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**持久性XSS**被认为比其他XSS漏洞更严重，因为攻击者的恶意脚本会自动注入到受害者的浏览器中。它不需要钓鱼攻击来诱使用户点击链接。攻击者将恶意脚本上传到一个易受攻击的网站，然后作为受害者正常浏览活动的一部分传递给受害者的浏览器。由于XSS也可以用于从外部网站加载脚本，这在存储型XSS中尤其具有破坏力。注入后，以下代码将查询远程服务器以执行JavaScript：'
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'An example of a web application vulnerable to persistent XSS is shown in the
    following diagram. The application is an online forum where users can create accounts
    and interact with others. The application stores the user''s profile in a database
    along with other details. The attacker determines that the application fails to
    sanitize the data kept in the comments section and uses this opportunity to add
    a malicious JavaScript to that field. This JavaScript gets stored in the database
    of the web application. During normal browsing, when an innocent victim views
    these comments, the JavaScript gets executed in the victim''s browser, which then
    grabs the cookie and delivers it to a remote server under the control of the attacker:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了一个易受持久性XSS攻击的Web应用程序示例。该应用程序是一个在线论坛，用户可以创建帐户并与其他人互动。应用程序将用户的个人资料与其他详细信息一起存储在数据库中。攻击者确定该应用程序未对评论部分中的数据进行过滤，并利用此机会向该字段添加恶意JavaScript。此JavaScript被存储在Web应用程序的数据库中。在正常浏览时，当一个无辜的受害者查看这些评论时，JavaScript会在受害者的浏览器中执行，然后获取cookie并将其传递给攻击者控制的远程服务器：
- en: '![](img/00170.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00170.jpeg)
- en: Recently, persistent XSS has been used on multiple sites across the internet
    to exploit user's websites as workers for cryptocurrency mining or to form botnets
    of browsers.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，持久性XSS已经在互联网上的多个网站上被用来利用用户的网站作为加密货币挖矿的工人或组成浏览器僵尸网络。
- en: Reflected XSS
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反射型XSS
- en: A **reflected XSS** is a nonpersistent form of attack. The malicious script
    is part of the victim's request to the web application, which is then reflected
    back by the application in form of the response. This may appear difficult to
    exploit, as a user won't willingly send a malicious script to a server, but there
    are several ways to trick the user into launching a reflected XSS attack against
    their own browser.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**反射型XSS**是一种非持久性的攻击形式。恶意脚本是受害者对Web应用程序的请求的一部分，然后由应用程序以响应的形式反射回来。这可能看起来很难利用，因为用户不会自愿向服务器发送恶意脚本，但有几种方法可以诱使用户对自己的浏览器发起反射型XSS攻击。'
- en: Reflected XSS is mostly used in targeted attacks where the hacker deploys a
    phishing email containing the malicious script along with the URL. Alternatively,
    the attack could involve publishing a link on a public website and enticing the
    user to click on it. These methods, combined with a URL-shortening service that
    abridges the URL and hides the long, odd-looking script that would raise doubts
    in the mind of the victim, can be used to execute a reflected XSS attack with
    a high success rate.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 反射型XSS主要用于有针对性的攻击，黑客部署了包含恶意脚本和URL的钓鱼邮件。或者，攻击可能涉及在公共网站上发布一个链接，并引诱用户点击它。结合缩短URL的服务，缩短URL并隐藏在受害者心中会产生疑问的长而奇怪的脚本，可以用于执行反射型XSS攻击，成功率很高。
- en: 'As shown in the following diagram, the victim is tricked into clicking a URL
    that delivers the script to the application, which is then reflected back without
    proper validation:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，受害者被欺骗点击一个将脚本传递给应用程序的URL，然后没有适当验证地反射回来：
- en: '![](img/00171.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00171.jpeg)
- en: DOM-based XSS
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于DOM的XSS
- en: The third type of XSS is local and directly affects the victim's browser. This
    attack does not rely on malicious content being sent to the server, but it uses
    the **Document Object Model** (**DOM**), which is the browser's API in order to
    manipulate and present the web pages. In persistent and reflected XSS, the script
    is included in the response by the server. The victim's browser accepts it, assuming
    it to be a legitimate part of the web page, and executes it as the page loads.
    In **DOM-based XSS**, only the legitimate script that is provided by the server
    is executed.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种类型的XSS是本地XSS，直接影响受害者的浏览器。这种攻击不依赖于向服务器发送恶意内容，而是使用浏览器的API——**文档对象模型**（**DOM**）来操作和呈现网页。在持久型和反射型XSS中，脚本被服务器包含在响应中。受害者的浏览器接受它，并将其视为网页的合法部分，在页面加载时执行。在**基于DOM的XSS**中，只有服务器提供的合法脚本会被执行。
- en: An increasing number of HTML pages are generated by downloading JavaScript on
    the client side and using configuration parameters to adjust what the user sees,
    rather than being sent by the server as they should be shown. Any time an element
    of the page is to be changed without refreshing the entire page, it is done using
    JavaScript. A typical example is a website that allows a user to change the pages'
    language or colors, or resize the elements within it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 越来越多的HTML页面是通过在客户端下载JavaScript并使用配置参数来调整用户所见内容生成的，而不是像应该显示的那样由服务器发送。每当页面的某个元素需要在不刷新整个页面的情况下更改时，都会使用JavaScript来完成。一个典型的例子是一个允许用户更改页面语言或颜色，或调整其中元素大小的网站。
- en: DOM-based XSS makes use of this legitimate client-side code to execute a scripting
    attack. The most important part of DOM-based XSS is that the legitimate script
    is using a user-supplied input to add HTML content to the web page displayed on
    the user's browser.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 基于DOM的XSS利用这个合法的客户端代码来执行脚本攻击。基于DOM的XSS最重要的部分是，合法的脚本使用用户提供的输入来向用户浏览器上显示的网页添加HTML内容。
- en: 'Let''s discuss an example of DOM-based XSS:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一个基于DOM的XSS的例子：
- en: 'Suppose a web page is created to display customized content depending on the
    city name passed in the URL, the city name in the URL is also displayed in the
    HTML web page on the user''s browser, as follows:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设创建了一个网页，根据URL中传递的城市名称显示定制内容，URL中的城市名称也会显示在用户浏览器上的HTML网页中，如下所示：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When the browser receives the preceding URL, it sends a request to `http://www.cityguide.test`
    to receive the web page. On the user's browser, a legitimate JavaScript is downloaded
    and run, which edits the HTML page to add the city name on the top in the heading
    of the loaded page as a heading. The city name is taken from the URL (in this
    case, `Mumbai`). So, the city name is the parameter the user can control.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当浏览器接收到上述URL时，它会发送一个请求到`http://www.cityguide.test`以接收网页。在用户的浏览器上，会下载并运行一个合法的JavaScript，它会编辑HTML页面，在加载的页面顶部添加城市名称作为标题。城市名称是从URL中获取的（在这种情况下是`Mumbai`）。因此，城市名称是用户可以控制的参数。
- en: As discussed earlier, the malicious script in DOM-based XSS is not sent to the
    server. To achieve this, the `#` sign is used to prevent any content that comes
    after the sign from being sent to the server. Therefore, the server-side code
    has no access to it, even though the client-side code can access it.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所述，基于DOM的XSS中的恶意脚本不会被发送到服务器。为了实现这一点，使用`#`符号来阻止发送到服务器的符号后面的任何内容。因此，服务器端代码无法访问它，尽管客户端代码可以访问它。
- en: 'The malicious URL may look something like the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意URL可能看起来像以下内容：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When the page is being loaded, the browser hits the legitimate script that uses
    the city name from the URL to generate the HTML content. In this case, the legitimate
    script encounters a malicious script and writes the script to the HTML body instead
    of the city name. When the web page is rendered, the script gets executed, resulting
    in a DOM-based XSS attack.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当页面加载时，浏览器会调用使用URL中的城市名称生成HTML内容的合法脚本。在这种情况下，合法脚本遇到恶意脚本，并将脚本写入HTML正文而不是城市名称。当网页呈现时，脚本被执行，导致基于DOM的XSS攻击。
- en: 'The following diagram illustrates DOM-based XSS:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 下图说明了基于DOM的XSS：
- en: '![](img/00172.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00172.jpeg)'
- en: XSS using the POST method
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用POST方法的XSS攻击
- en: In the previous examples, you have seen the use of the `GET` method to deliver
    a malicious link to the victim or to store the payload in the server. Although
    it may require a more elaborate setup to attack in real life, XSS attacks using
    `POST` requests are also possible.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，你已经看到了使用`GET`方法向受害者传递恶意链接或将载荷存储在服务器上的方法。虽然在现实生活中可能需要更复杂的设置来进行攻击，但使用`POST`请求进行XSS攻击也是可能的。
- en: 'As the `POST` parameters are sent in the body of the request and not in the
    URL, an XSS attack using this method would require the attacker to convince the
    victim to browse to a site controlled by the attacker. This will be the one sending
    the malicious request to the vulnerable server, which will thus respond to the
    user, as shown in the following diagram:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`POST`参数是发送到请求的正文中而不是URL中，使用这种方法进行XSS攻击需要攻击者说服受害者浏览到由攻击者控制的站点。这将是向易受攻击的服务器发送恶意请求的站点，并向用户响应，如下图所示：
- en: '![](img/00173.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00173.jpeg)'
- en: Other XSS attack vectors
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 其他XSS攻击向量
- en: Form parameters sent by the `POST` or `GET` methods are not the only ones used
    for XSS attacks. Header values such as `User-Agent`, `Cookie`, `Host`, and any
    other header whose information is reflected to the client are also vulnerable
    and susceptible to XSS attacks, even through the `OPTIONS` or `TRACE` methods.
    As penetration testers, you need to test completely all components of the request
    that are processed by the server and reflected back to the user.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`POST`或`GET`方法发送的表单参数并不是唯一用于XSS攻击的参数。头部值，如`User-Agent`、`Cookie`、`Host`以及任何其他将信息反映给客户端的头部，甚至通过`OPTIONS`或`TRACE`方法也是易受XSS攻击的。作为渗透测试人员，您需要完全测试由服务器处理并反射回用户的请求的所有组件。
- en: Exploiting Cross-Site Scripting
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用跨站脚本攻击
- en: 'Hackers have been very creative when exploiting the XSS flaw, and with the
    capabilities of JavaScript in current browsers, the attack possibilities have
    increased. XSS combined with JavaScript can be used for the following types of
    attacks:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客在利用XSS漏洞时非常有创意，结合当前浏览器中JavaScript的功能，攻击可能性增加了。结合JavaScript的XSS可以用于以下类型的攻击：
- en: Account hijacking
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 账户劫持
- en: Altering contents
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改内容
- en: Defacing websites
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 篡改网站
- en: Running a port scan from the victim's machine
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从受害者的机器上运行端口扫描
- en: Logging key strokes and monitoring a user's activity
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录按键和监控用户活动
- en: Stealing browser information
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 窃取浏览器信息
- en: Exploiting browser vulnerabilities
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用浏览器漏洞
- en: 'There are many different ways of triggering an XSS vulnerability, not only
    the `<script></script>` tag. Refer to OWASP''s cheat sheet at the following link:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 触发XSS漏洞的方式有很多种，不仅仅是`<script></script>`标签。请参考OWASP的防御备忘单，链接如下：
- en: '[https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet](https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet](https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet)'
- en: In the following sections, we will look at some practical examples.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我们将看一些实际的例子。
- en: Cookie stealing
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 窃取cookie
- en: One of the immediate implications of an XSS vulnerability is the possibility
    of an attacker using script code to steal a valid session cookie and use it to
    hijack a user's session if the cookie's parameters are not well configured.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: XSS漏洞的一个直接影响是攻击者可以使用脚本代码窃取有效的会话cookie，并使用它劫持用户的会话，如果cookie的参数没有配置好的话。
- en: 'In order to gather session cookies, an attacker needs to have a web server
    running and listening for requests sent by the injected applications. In the most
    basic case, this can be done with anything from a basic Python HTTP server, up
    to a proper Apache or nginx server running an application receiving and storing
    the IDs and even using them to perform further attacks automatically. For the
    sake of demonstration, we will use the basic Python server. Execute the following
    command in a Terminal session in Kali Linux to run the server on port `8000`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了收集会话cookie，攻击者需要运行一个Web服务器，并监听被注入应用程序发送的请求。在最基本的情况下，可以使用从基本的Python HTTP服务器到运行接收和存储ID甚至使用它们自动执行进一步攻击的正确的Apache或nginx服务器。为了演示起见，我们将使用基本的Python服务器。在Kali
    Linux的终端会话中执行以下命令以在端口`8000`上运行服务器：
- en: '[PRE4]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once the server is running, you will exploit a persistent XSS in the WackoPicko
    web application included in the OWASP BWA virtual machine. Browse to WackoPicko
    in Kali Linux, and in the Guestbook form, submit a comment with the following
    code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦服务器运行起来，你将在OWASP BWA虚拟机中的WackoPicko Web应用程序中利用一个持久性XSS漏洞。在Kali Linux中浏览到WackoPicko，在Guestbook表单中提交以下代码的评论：
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Notice that `127.0.0.1` is Kali Linux''s local IP address. It should be replaced
    by the address of the server set up to receive the cookies:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`127.0.0.1`是Kali Linux的本地IP地址。它应该被设置为接收cookie的服务器的地址：
- en: '![](img/00174.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00174.jpeg)'
- en: 'Every time the Guestbook page loads, it will execute the script and attempt
    to get an image from an external server. The request made to get such an image
    includes the session cookie in the URL, which will be recorded on the receiving
    server, as can be seen in the following screenshot:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 每次加载Guestbook页面时，它都会执行脚本并尝试从外部服务器获取图像。用于获取此类图像的请求在URL中包含会话cookie，这将被记录在接收服务器上，如下面的截图所示：
- en: '![](img/00175.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00175.jpeg)'
- en: Website defacing
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 篡改网站
- en: Using XSS to deface a website (change its visual appearance) is not a very common
    attack. Nonetheless, it can be done, especially for persistent vulnerabilities,
    and it can cause serious reputation damage for a company whose website has been
    defaced, even if no change is made to the server's files.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用XSS来篡改网站（改变其视觉外观）并不是一种非常常见的攻击。尽管如此，它是可以做到的，特别是对于持久性漏洞，它可以给一个网站被篡改的公司带来严重的声誉损害，即使服务器的文件没有发生任何改变。
- en: You can change a website's appearance with JavaScript in many ways. For example,
    inserting HTML elements such as `div` or `iframe`, replacing style values, changing
    image sources, and many other techniques can alter a website's appearance. You
    can also use the `innerHTML` property of the document's body to replace the entire
    HTML code of the page.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用JavaScript以多种方式改变网站的外观。例如，插入HTML元素如`div`或`iframe`，替换样式值，改变图像源，以及许多其他技术都可以改变网站的外观。你还可以使用文档的`body`的`innerHTML`属性来替换整个页面的HTML代码。
- en: 'Mutillidae II has a DOM XSS test form that will help us test this. In the menu,
    go to OWASP 2013 | A3 - Cross-Site Scripting (XSS) | DOM Injection | HTML5 Storage.
    This demo application saves information to the browser''s HTML5 storage, and it
    contains a number of vulnerabilities. Here we will focus on the fact that it reflects
    the key when an element is added to storage, as can be seen in the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Mutillidae II有一个DOM XSS测试表单，可以帮助我们测试这个漏洞。在菜单中，转到OWASP 2013 | A3 - 跨站脚本攻击（XSS）|
    DOM注入 | HTML5存储。这个演示应用程序将信息保存到浏览器的HTML5存储中，并且它包含许多漏洞。在这里，我们将重点关注当一个元素被添加到存储中时，它会反映出键的事实，如下面的截图所示：
- en: '![](img/00176.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00176.jpeg)'
- en: 'The form has some level of sanitization, as the `script` tags don''t get reflected:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 该表单有一定程度的过滤，因为`script`标签不会被反映出来：
- en: '![](img/00177.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00177.jpeg)'
- en: 'After some trial and error with different injection strings, you will find
    that an `img` tag with a nonexistent source (for example, the `src` parameter)
    works:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 经过一些不同注入字符串的试验和错误，你会发现一个带有不存在源（例如，`src`参数）的`img`标签是有效的：
- en: '[PRE6]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Setting that code as the key of the new element and clicking on Add New displays
    the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 将该代码设置为新元素的键，并点击“添加新元素”将显示如下内容：
- en: '![](img/00178.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00178.jpeg)'
- en: As mentioned earlier, an attack like this will not change the files on the web
    server, and the changes will be noticeable only to those users that run the malicious
    script. When a persistent XSS is exploited, the defacement may affect a large
    number of users as the attacker doesn't need to target every victim individually,
    as is the case with reflected and DOM-based XSS. Either way, this may lead users
    into giving sensitive information to attackers while thinking that they are submitting
    it to a legitimate website.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，这样的攻击不会改变Web服务器上的文件，只有运行恶意脚本的用户才能注意到这些变化。当利用持久性XSS时，篡改可能会影响大量用户，因为攻击者不需要逐个地针对每个受害者，这与反射型和基于DOM的XSS不同。无论哪种方式，这可能会导致用户将敏感信息提供给攻击者，同时认为他们正在提交给一个合法的网站。
- en: Key loggers
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 键盘记录器
- en: Another way to take advantage of XSS's ability to gather users' sensitive information
    is by turning the browser into a key logger that captures every keystroke and
    sends it to a server controlled by the attacker. These keystrokes may include
    sensitive information that the user enters in the page, such as names, addresses,
    passwords, secret questions and responses, credit card information, and other
    types, depending on the purpose of the vulnerable page.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 利用XSS收集用户敏感信息的另一种方法是将浏览器转变为一个键盘记录器，捕获每个按键并将其发送到攻击者控制的服务器。这些按键可能包含用户在页面中输入的敏感信息，如姓名、地址、密码、秘密问题和答案、信用卡信息等，具体取决于受攻击页面的目的。
- en: 'We will use the Apache web server, which is preinstalled in Kali Linux, in
    order to store the keystrokes in a file so that we can check the keys sent by
    the vulnerable application once we exploit the XSS. The server will have two files:
    `klog.php` and `klog.js`.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用预先安装在Kali Linux中的Apache Web服务器，以便将按键存储在文件中，以便我们在利用XSS后可以检查受攻击应用程序发送的按键。服务器将有两个文件：`klog.php`和`klog.js`。
- en: 'This is how the `klog.php` file will look:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`klog.php`文件的外观：
- en: '[PRE7]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This is how the `klog.js` file will look:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`klog.js`文件的外观：
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here, `10.7.7.4` is the address of the Kali Linux machine, so that the victims
    will send the buffer to that server. Also, depending on the system''s configuration,
    you may have to create the `keys.txt` file in the path specified in the code.
    In this example, it is the web root (`/var/www/html/`). Also, add write permissions
    or set the ownership to the Apache''s user to prevent permission errors when the
    web server tries to update a local file:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`10.7.7.4`是Kali Linux机器的地址，所以受害者将把缓冲区发送到该服务器。此外，根据系统的配置，您可能需要在代码中指定的路径中创建`keys.txt`文件。在这个例子中，它是Web根目录(`/var/www/html/`)。此外，添加写权限或将所有权设置为Apache的用户，以防止Web服务器在尝试更新本地文件时出现权限错误：
- en: '[PRE9]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This is the simplest version of a key logger. A more sophisticated version
    could include the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这是键盘记录器的最简单版本。更复杂的版本可能包括以下内容：
- en: Timestamp of the capture
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获的时间戳
- en: Identifier of the user or machine sending the information
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送信息的用户或机器的标识符
- en: Saving keys to a database to facilitate queries, grouping, and sorting
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将键保存到数据库以便查询、分组和排序
- en: Controlling functionality, such as starting and stopping key loggers, triggering
    actions on certain keys or combinations
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制功能，如启动和停止键盘记录器，触发特定键或组合的操作
- en: Capturing information from clients or users during a penetration test should
    be avoided when possible, although sometimes it's necessary for correct coverage
    of certain attack vectors. If this is the case, proper security measures must
    be taken on the transmission, storage, and handling of such information. If any
    information is sent to a server controlled by the penetration tester, communication
    must be encrypted using HTTPS, SSH, or other secure protocol. The storage must
    also be encrypted. Full disk encryption is recommended, but database and file
    encryption on top of it is also required. Furthermore, depending on the rules
    of engagement, secure erase of all information may be requested.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在渗透测试期间，应尽量避免从客户端或用户中捕获信息，尽管有时为了正确覆盖某些攻击向量是必要的。如果是这种情况，必须采取适当的安全措施来传输、存储和处理这些信息。如果任何信息被发送到渗透测试人员控制的服务器，通信必须使用HTTPS、SSH或其他安全协议进行加密。存储也必须进行加密。建议使用全盘加密，但还需要在其上进行数据库和文件加密。此外，根据约定规则，可能需要安全擦除所有信息。
- en: 'Using WackoPicko''s Guestbook again, submit the following comment:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 再次使用WackoPicko的留言板，提交以下评论：
- en: '![](img/00179.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00179.jpeg)'
- en: This will load the external JavaScript file in the page every time a user accesses
    the Guestbook page and capture all of the keystrokes issued by them. You can now
    type anything while in the page, and it will be sent to your server.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在每次用户访问留言板页面时加载外部JavaScript文件，并捕获他们发出的所有按键。现在您可以在页面中键入任何内容，它将被发送到您的服务器。
- en: 'If you want to check what has been recorded so far, you just need to see the
    `keys.txt` file in Kali Linux:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想查看到目前为止记录的内容，只需查看Kali Linux中的`keys.txt`文件：
- en: '![](img/00180.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00180.jpeg)'
- en: 'You can see that as keys are buffered in the client and sent at regular intervals,
    there are groups of varying lengths separated by commas and the nonprintable keys
    are written by name: `ArrowLeft`, `ArrowRight`, `Backspace`, `Home`, `End`, and
    so on.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，由于键在客户端缓冲并定期发送，所以有一些由逗号分隔的不同长度的组，并且非可打印键以名称的形式写入：`ArrowLeft`，`ArrowRight`，`Backspace`，`Home`，`End`等等。
- en: Taking control of the user's browser with BeEF-XSS
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用BeEF-XSS控制用户的浏览器
- en: 'An attack known as **Man-in-the-Browser** (**MITB**) uses JavaScript to hook
    the user''s browser to a **Command and Control** (**C2**) server that uses a script
    to issue orders to the browser and gathers information from it. XSS can be used
    as the vehicle to make a user load such a script while accessing a vulnerable
    application. Among the actions that an attacker could perform are the following:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 一种被称为**浏览器中间人**（**MITB**）的攻击使用JavaScript将用户的浏览器连接到一个**命令和控制**（**C2**）服务器，该服务器使用脚本向浏览器发出指令并从中收集信息。XSS可以用作载体，使用户在访问易受攻击的应用程序时加载这样的脚本。攻击者可以执行的操作包括：
- en: Reading keystrokes
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取按键
- en: Extracting passwords saved in the browsers
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提取浏览器中保存的密码
- en: Reading cookies and HTML5 storage
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取cookie和HTML5存储
- en: Enabling microphone and webcam (may require user interaction)
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用麦克风和摄像头（可能需要用户交互）
- en: Exploiting browser vulnerabilities
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用浏览器漏洞
- en: Using the browser as pivot to the internal network of an organization
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用浏览器作为进入组织内部网络的枢纽
- en: Controlling the behavior of browser's tabs and windows
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制浏览器标签和窗口的行为
- en: Installing malicious browser extensions
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装恶意浏览器扩展
- en: Kali Linux includes **Browser Exploitation Framework** (**BeEF**), which is
    a tool that sets up a web server hosting a C2 center as well as the hook code
    to be called by the victims in a MITB attack.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Kali Linux包含**浏览器利用框架**（**BeEF**），它是一个设置了托管C2中心的Web服务器以及在MITB攻击中由受害者调用的钩子代码的工具。
- en: 'Next, we will demonstrate how an attacker can use XSS to get a client (user''s
    browser) to call that hook file and how to use that to execute actions remotely
    on such a browser:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将演示攻击者如何使用XSS来让客户端（用户的浏览器）调用那个钩子文件，以及如何使用它在这样的浏览器上远程执行操作：
- en: 'First, you need to start the `beef-xss` service in Kali Linux. This can be
    done through the Applications menu: Applications | 13 - Social Engineering Tools
    | beef xss framework, or through Terminal as follows:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，您需要在Kali Linux中启动`beef-xss`服务。可以通过应用程序菜单完成：应用程序 | 13 - 社会工程学工具 | beef xss
    framework，或通过终端执行以下命令：
- en: '[PRE10]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](img/00181.jpeg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00181.jpeg)'
- en: 'If the service starts correctly, you should be able to browse to the control
    panel. By default, BeEF runs on port `3000`, so browse to [`http://127.0.0.1:3000/ui/panel`](http://127.0.0.1:3000/ui/panel)
    and log in with the default username and password: `beef`/`beef`, as shown here:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务正确启动，您应该能够浏览到控制面板。默认情况下，BeEF运行在端口`3000`上，所以浏览到[`http://127.0.0.1:3000/ui/panel`](http://127.0.0.1:3000/ui/panel)并使用默认的用户名和密码`beef`/`beef`登录，如下所示：
- en: '![](img/00182.jpeg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00182.jpeg)'
- en: The next step for an attacker would be to exploit a persistent XSS or to trick
    a user into clicking on a link to a malicious site or to a site vulnerable to
    XSS.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者的下一步将是利用持久性XSS或诱使用户点击指向恶意站点或易受XSS攻击的站点的链接。
- en: 'Now, as the victim, go to Mutillidae (OWASP 2013 | A3 - Cross Site Scripting
    (XSS) | Reflected (first order) | DNS Lookup) and submit the following in the
    Hostname/IP textbox:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，作为受害者，转到Mutillidae（OWASP 2013 | A3 - 跨站脚本（XSS） | 反射（一级） | DNS查找）并在主机名/IP文本框中提交以下内容：
- en: '[PRE11]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](img/00183.jpeg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00183.jpeg)'
- en: 'Again, `10.7.7.4` is the address of the server running BeEF. In this case,
    your Kali Linux machine. You can see that the result appears to be empty, but
    if you browse to your BeEF control panel, you will see that you have a new browser
    connected. In the Details tab, you can see all of the information about this browser:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，`10.7.7.4`是运行BeEF的服务器的地址。在这种情况下，是您的Kali Linux机器。您可以看到结果似乎是空的，但如果您浏览到BeEF控制面板，您将看到您有一个新的浏览器连接。在详细信息选项卡中，您可以看到有关此浏览器的所有信息：
- en: '![](img/00184.jpeg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00184.jpeg)'
- en: 'If you go to the Logs tab inside Current Browser, you will see that the hook
    registers everything the user does in the browser, from clicks and keystrokes
    to changes of windows or tabs:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您转到当前浏览器的日志选项卡，您将看到钩子记录用户在浏览器中的所有操作，从点击和按键到窗口或标签的更改：
- en: '![](img/00185.jpeg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00185.jpeg)'
- en: 'In the Commands tab, you can issue commands to the victim browser. For example,
    in the following screenshot, a cookie was requested:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令选项卡中，您可以向受害者浏览器发出命令。例如，在下面的截图中，请求了一个cookie：
- en: '![](img/00186.jpeg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00186.jpeg)'
- en: Scanning for XSS flaws
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扫描XSS漏洞
- en: With hundreds of possible payload variants, and being one of the most common
    vulnerabilities in web applications, XSS can sometimes be difficult to find or,
    if found, difficult to generate a convincing proof of concept exploit that motivates
    the client's team to dedicate the time and effort to fix it. Additionally, big
    applications with hundreds or thousands of input parameters are nearly impossible
    to cover completely in time-boxed tests.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 有了数百种可能的有效载荷变体，并且是Web应用程序中最常见的漏洞之一，XSS有时很难找到，或者如果找到了，很难生成一个令客户团队投入时间和精力来修复它的令人信服的概念验证利用。此外，具有数百或数千个输入参数的大型应用程序几乎不可能在时间限制的测试中完全覆盖。
- en: For these reasons, you may need to make use of automation to be able to generate
    results faster, even when some degree of precision may be sacrificed and with
    an increased risk of triggering some service disruption in the application. There
    are many web vulnerability scanners, both free and paid, with a wide range of
    degrees of accuracy, stability, and safety. We will now review a couple of specialized
    scanners for XSS vulnerabilities that have proven to be efficient and reliable.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您可能需要使用自动化工具来加快生成结果的速度，即使可能会牺牲一定程度的准确性，并增加触发应用程序中某些服务中断的风险。有许多Web漏洞扫描器，免费和付费都有，具有各种不同的准确性、稳定性和安全性。现在我们将回顾一些已被证明高效可靠的XSS漏洞专用扫描器。
- en: XSSer
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XSSer
- en: '**Cross Site "Scripter"** (**XSSer**) is an automatic framework designed to
    detect, exploit, and report XSS vulnerabilities in web-based applications. It
    is included in Kali Linux.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**跨站“脚本者”**（**XSSer**）是一个自动化框架，旨在检测、利用和报告基于Web的应用程序中的XSS漏洞。它包含在Kali Linux中。'
- en: XSSer can detect persistent, reflected, and DOM-based XSS, scan an indicated
    URL or search Google for potential targets based on a given query, authenticate
    through different mechanisms, and perform many other tasks.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: XSSer可以检测持久性、反射性和基于DOM的XSS，扫描指定的URL或根据给定的查询在Google上搜索潜在目标，通过不同的机制进行身份验证，并执行许多其他任务。
- en: 'Let''s try a simple scan using BodgeIt''s search request as a target. To do
    that, issue the following command in Kali Linux''s Terminal:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用BodgeIt的搜索请求作为目标进行简单的扫描。为此，请在Kali Linux的终端中发出以下命令：
- en: '[PRE12]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here, XSSer is running over the URL indicated by the `-u` parameter and scanning
    using the `GET` method and the `q` (`-g ?q=`) parameter. This means that the scanner
    will append its payloads to the string specified after `-g`, and the result of
    that will be appended to the URL, as it is using `GET`. After running the command,
    you''ll see the result indicating that the URL tested is vulnerable to XSS:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，XSSer在由`-u`参数指示的URL上运行，并使用`GET`方法和`q`（`-g ?q=`）参数进行扫描。这意味着扫描器将其有效负载附加到`-g`之后指定的字符串，并将其结果附加到URL上，因为它使用`GET`。运行命令后，您将看到结果表明测试的URL易受XSS攻击：
- en: '![](img/00187.jpeg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00187.jpeg)
- en: 'There is also the option of using a GUI using the following command:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以使用以下命令使用GUI：
- en: '[PRE13]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here is how the GUI looks:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这是GUI的外观：
- en: '![](img/00188.jpeg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00188.jpeg)
- en: XSS-Sniper
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XSS-Sniper
- en: XSS-Sniper is not included in Kali Linux, but is definitely worth trying. It
    is an open source tool by Gianluca Brindisi that can search for XSS vulnerabilities,
    including DOM-based XSS in a specific URL, or it can crawl an entire site. Although
    not as feature-rich as XSSer, it is a good option when XSSer is not available
    or to verify results.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: XSS-Sniper不包含在Kali Linux中，但绝对值得一试。这是Gianluca Brindisi的一个开源工具，可以搜索XSS漏洞，包括特定URL中的基于DOM的XSS，或者可以爬行整个站点。虽然不像XSSer那样功能丰富，但在XSSer不可用或验证结果时，它是一个不错的选择。
- en: 'XSS-Sniper can be downloaded from its GitHub repository:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: XSS-Sniper可以从其GitHub存储库下载：
- en: '[PRE14]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To run a basic scan over a `GET` request, use only the `-u` parameter followed
    by the full URL including a test value:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要对`GET`请求进行基本扫描，只需使用`-u`参数后跟完整的URL，包括测试值：
- en: '[PRE15]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](img/00189.jpeg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00189.jpeg)
- en: Burp Suite Professional and OWASP ZAP include a vulnerability scan functionality
    that can detect many XSS instances with good accuracy. Scanners such as W3af,
    Skipfish, and Wapiti can also be used.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite Professional和OWASP ZAP包括可以准确检测到许多XSS实例的漏洞扫描功能。还可以使用W3af、Skipfish和Wapiti等扫描器。
- en: Preventing and mitigating Cross-Site Scripting
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预防和减轻跨站脚本攻击
- en: As with any other injection vulnerability, a proper input validation is the
    first line of defense in order to prevent XSS. Also, if possible, avoid using
    user inputs as output information. Sanitization and encoding are key aspects of
    preventing XSS.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何其他注入漏洞一样，适当的输入验证是防止XSS的第一道防线。此外，如果可能的话，避免使用用户输入作为输出信息。清理和编码是防止XSS的关键方面。
- en: '**Sanitization** means removing inadmissible characters from the string. This
    is useful when no special characters should exist in input strings.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**清理**意味着从字符串中删除不可接受的字符。当输入字符串中不应存在特殊字符时，这很有用。'
- en: Encoding converts special characters to their HTML code representation. For
    example, `&` to `&amp;` or `<` to `&lt;`. Some types of applications may need
    to allow the use of special characters in input strings. For those applications,
    sanitization is not an option. Thus, they should encode the output data before
    inserting it into the page and storing it in the database.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 编码将特殊字符转换为其HTML代码表示。例如，`&`转换为`&amp;`或`<`转换为`&lt;`。某些类型的应用程序可能需要允许在输入字符串中使用特殊字符。对于这些应用程序，清理是不可选的。因此，它们应该在将输出数据插入页面和存储在数据库中之前对其进行编码。
- en: The validation, sanitization, and encoding processes must be done on both the
    client side and the server side in order to prevent all types of XSS and other
    code injections.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 验证、清理和编码过程必须在客户端和服务器端都进行，以防止所有类型的XSS和其他代码注入。
- en: 'More information about prevention of Cross-Site Scripting can be found at the
    following URLs:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 有关预防跨站脚本攻击的更多信息，请访问以下网址：
- en: '[https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet](https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet)'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet](https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet)'
- en: '[https://docs.microsoft.com/en-us/aspnet/core/security/cross-site-scripting](https://docs.microsoft.com/en-us/aspnet/core/security/cross-site-scripting)'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/aspnet/core/security/cross-site-scripting](https://docs.microsoft.com/en-us/aspnet/core/security/cross-site-scripting)'
- en: '[https://www.acunetix.com/blog/articles/preventing-xss-attacks/](https://www.acunetix.com/blog/articles/preventing-xss-attacks/)'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.acunetix.com/blog/articles/preventing-xss-attacks/](https://www.acunetix.com/blog/articles/preventing-xss-attacks/)'
- en: Summary
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed the XSS flaw in detail. We began by looking at
    the origin of the vulnerability and how it evolved over the years. You then learned
    about the different forms of XSS and their attack potential. We also analyzed
    how an attacker can make use of different JavaScript capabilities to perform a
    variety of actions in the victim's browser, such as stealing session cookies,
    logging key presses, defacing websites, and remotely controlling a web browser.
    Kali Linux has several tools to test and exploit the XSS flaw. We used XSSer and
    XSS-Sniper to detect vulnerabilities in a web application. In the last section,
    we reviewed the general measures that should be taken in order to prevent or fix
    a XSS vulnerability in a web application.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们详细讨论了XSS漏洞。我们首先看了漏洞的起源以及它在多年来的演变过程中如何发展。然后，您了解了不同形式的XSS及其攻击潜力。我们还分析了攻击者如何利用不同的JavaScript功能在受害者的浏览器中执行各种操作，例如窃取会话cookie、记录按键、篡改网站和远程控制Web浏览器。Kali
    Linux有几个工具可以测试和利用XSS漏洞。我们使用XSSer和XSS-Sniper来检测Web应用程序中的漏洞。在最后一节中，我们回顾了应采取的一般措施，以防止或修复Web应用程序中的XSS漏洞。
- en: In the next chapter we describe Cross-Site Request Forgery and show how it can
    be exploited to trick an authenticated user into performing undesired actions,
    recommendation on how to prevent such flaws is also given.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将描述跨站请求伪造，并展示如何利用它来欺骗已验证用户执行不希望的操作，同时还提供了如何预防此类缺陷的建议。
