- en: Chapter 9. Windows Files
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。Windows文件
- en: In the previous chapter, we discussed the Windows log files and discussed how
    important they are for analysis. However, Windows logs aren't the only important
    artifact in Windows. In this chapter, we will discuss more important Windows files
    that are usually created in the normal Windows operations but may have evidential
    importance from our prospective of the case under investigation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了Windows日志文件，并讨论了它们在分析中的重要性。然而，Windows日志并不是Windows中唯一重要的证据文件。本章将讨论更多重要的Windows文件，这些文件通常是在正常的Windows操作过程中创建的，但从我们调查案件的角度来看，可能具有证据价值。
- en: Windows prefetch files
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows预取文件
- en: 'The Windows operating system uses what are called prefetch files to speed up
    the program starting process. It will store a list of all the files and DLLs used
    by the program when started in order to preload these files into the memory when
    the program starts to make it faster to start. Each executable has a prefetch
    file which contains the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Windows操作系统使用所谓的预取文件来加速程序启动过程。它会存储程序启动时使用的所有文件和DLL的列表，以便在程序启动时预先将这些文件加载到内存中，从而加快启动速度。每个可执行文件都有一个预取文件，其中包含以下内容：
- en: The executable's name
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可执行文件的名称
- en: The path to the executable
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可执行文件的路径
- en: The number of times that the program ran within the system
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序在系统中运行的次数
- en: The last run time
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一次运行时间
- en: A list of DLLs used by the program
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序使用的DLL列表
- en: 'The prefetch files are located at `%SystemRoot%\Prefetch`, and each file has
    a "pf" extension. The naming schema of these files consists of adding the executable
    name in capital letters, followed by -, and then an eight character hash of the
    application''s start location, as shown in Figure1 for the `calc.exe` Windows
    native tool:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 预取文件位于`%SystemRoot%\Prefetch`目录中，每个文件都有“pf”扩展名。这些文件的命名规则是：将可执行文件名大写后，加上“-”，然后是应用程序启动位置的八字符哈希值，如图1所示，`calc.exe`是Windows自带工具：
- en: '![Windows prefetch files](img/image_09_001.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![Windows预取文件](img/image_09_001.jpg)'
- en: 'Figure 1: A prefetch file example'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：预取文件示例
- en: If you find two different pf files on the same executable, this means that either
    there are two executables with the same name, or the same executable ran from
    two different locations. Also, the user who ran this program won't store this
    in the prefetch information. However, this can be compensated by correlating the
    last run time and the pf modification timestamp in the filesystem with the security
    logging information to see which user ran this executable the last time.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您发现同一个可执行文件有两个不同的pf文件，这意味着要么是两个具有相同名称的可执行文件，要么是同一个可执行文件从两个不同的路径运行。此外，运行此程序的用户不会在预取信息中存储该信息。然而，可以通过将最后一次运行时间和文件系统中pf文件的修改时间戳与安全日志信息相关联，查看哪个用户最后运行了该可执行文件，从而弥补这一点。
- en: The maximum number of prefetch files is 1,024 starting from Windows 8\. From
    Windows XP to Windows 7, it was 128 files only. When the maximum number of files
    is reached, Windows will delete the oldest file in order to create a new one.
    This means that in case you found the maximum number of prefetch files in the
    prefetch folder, you can assume that there might be another pf file for any existing
    executable and it was overwritten before and recreated again, so the first run
    and last run of the program might not be the right times.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 从Windows 8开始，预取文件的最大数量为1,024个。从Windows XP到Windows 7，最大数量为128个。当达到文件的最大数量时，Windows会删除最旧的文件，以便创建一个新的文件。这意味着，如果您在预取文件夹中找到了最大数量的预取文件，您可以假设可能存在另一个pf文件用于任何现有的可执行文件，并且它之前被覆盖并重新创建，因此程序的首次运行时间和最后一次运行时间可能不准确。
- en: 'Windows prefetch can be used in speeding up the booting process of the applications''
    start time or both. This information will be written in the following registry
    key: `HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Memory
    Management\PrefetchParameters`.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Windows预取可以加速应用程序启动时间或两者兼有的启动过程。这些信息将写入以下注册表键值：`HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session
    Manager\Memory Management\PrefetchParameters`。
- en: 'Under a `EnablerPrefetcher` registry value, you can find one of four data values:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在`EnablerPrefetcher`注册表值下，您可以找到四个数据值中的一个：
- en: '0: This means that prefetching is disabled.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '0: 这意味着预取功能已禁用。'
- en: '1: This means enable applications prefetching only.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '1: 这意味着仅启用应用程序预取。'
- en: '2: This means enable boot prefetching only.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '2: 这意味着仅启用引导预取。'
- en: '3: This means enable both boot and applications prefetching:![Windows prefetch
    files](img/image_09_002.jpg)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '3: 这意味着启用引导和应用程序的预取功能：![Windows预取文件](img/image_09_002.jpg)'
- en: 'Figure 2: Prefetch in Registry'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2：注册表中的预取
- en: A piece of malware is a program as well. So, if the prefetch was configured
    to enable prefetching for applications, a prefetch file will be created for that
    malware in the `prefetch` folder. Finding a malware's prefetch file will add great
    evidential value as it will indicate all the files and DLLs that were used by
    the malware, which will give indications about its operations and a start point
    for the rest of the analysis.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件也是一种程序。因此，如果预取功能配置为启用应用程序的预取，则会在`prefetch`文件夹中为该恶意软件创建一个预取文件。找到恶意软件的预取文件将具有极大的证据价值，因为它将显示恶意软件使用的所有文件和DLL，这将提供关于其操作的线索，并为后续分析提供起点。
- en: Also, in some attacks, the kill chain requires running different tools on the
    local system to remotely control it by attackers. Ordering prefetch files by time
    and filtering the files by the incident time will give us the timely ordered tools
    which ran within the system and caused the infection. These facts will help us
    make better assumptions about an attack scenario and will help in the eradication
    and recovery phases of the incident response cycle.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在某些攻击中，攻击链需要在本地系统上运行不同的工具，以便攻击者远程控制该系统。按时间顺序排列预取文件，并按事件时间过滤文件，将帮助我们及时排序在系统中运行并导致感染的工具。这些事实将帮助我们对攻击场景做出更好的假设，并有助于事件响应周期中的根除和恢复阶段。
- en: Another file named `layout.ini` is located in the same `prefetch` folder as
    well. In this file, there are some paths to the files that are frequently used
    and loaded by the prefetching process. This file is used by the Windows Defragment
    process to move all the files that are opened frequently in a contiguous location
    physically in the system disk in order to load it quickly and reduce the time
    required to physically access these disk locations sequentially. This process's
    effect can be noticed in the HDD more than SSD, where the access to any physical
    location in the HDD requires mechanical motion.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个名为`layout.ini`的文件也位于相同的`prefetch`文件夹中。在此文件中，有一些路径指向频繁使用和加载的文件，这些文件被预取过程加载。Windows磁盘碎片整理过程使用此文件，将所有频繁打开的文件物理上移动到系统磁盘中的连续位置，以便快速加载并减少顺序访问这些磁盘位置所需的时间。这个过程的效果在HDD中比在SSD中更为明显，因为在HDD中访问任何物理位置都需要机械运动。
- en: Prefetch file analysis
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预取文件分析
- en: It is worth mentioning that the structure of the prefetch file changes from
    one Windows version to another. To analyze the prefetch file, the investigator
    can open it manually with a hex-editor, for example, understand its structure,
    and start parsing the contents of the file and even create an automated tool to
    perform this function faster. Fortunately, there is a tool already created, and
    it supports the prefetch files up to Windows 10\. The WinPrefetchView tool can
    be downloaded from [http://nirsoft.com/](http://nirsoft.com/).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，预取文件的结构在不同版本的Windows之间有所变化。为了分析预取文件，调查员可以手动使用十六进制编辑器打开它，了解其结构，并开始解析文件内容，甚至创建自动化工具以更快地执行此功能。幸运的是，已经有一个现成的工具，并且支持Windows
    10及以前版本的预取文件。WinPrefetchView工具可以从[http://nirsoft.com/](http://nirsoft.com/)下载。
- en: WinPrefetchView automatically parses the location of the prefetch files in the
    live system and views it for further analysis. In order to parse prefetch files
    in a postmortem analysis on our Linux analysis machine, we can run the WinPrefetch
    program within the Wine environment and copy the `prefetch` folder from the mounted
    image.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: WinPrefetchView自动解析活动系统中预取文件的位置，并对其进行查看以供进一步分析。为了在我们的Linux分析机器上进行事后分析并解析预取文件，我们可以在Wine环境中运行WinPrefetch程序，并从挂载的镜像中复制`prefetch`文件夹。
- en: 'The program interface consists of two small windows, one for the applications
    that are related to each prefetch file and another one to list all the files that
    are used by the selected program from the upper window. In Figure 3, we can see
    the ntosboot file, which refers to the boot process of the system and lists all
    the files that are opened during this operation. In Figure 3, the program is running
    from the Linux machine under the Wine environment:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 程序界面由两个小窗口组成，一个用于显示与每个预取文件相关的应用程序，另一个则列出从上方窗口选择的程序所使用的所有文件。在图3中，我们可以看到ntosboot文件，它指的是系统的引导过程，并列出了在此过程中打开的所有文件。在图3中，程序在Wine环境下的Linux机器上运行：
- en: '![Prefetch file analysis](img/image_09_003.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![预取文件分析](img/image_09_003.jpg)'
- en: 'Figure 3: WinPrefetchView'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图3：WinPrefetchView
- en: Windows tasks
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows任务
- en: 'Some programs need to perform specific events at a specific time in the Windows
    environment. To do this, Windows allows programs to create what is called a **scheduled
    task**. Tasks are stored in `C:\Windows\System32\Tasks`. Each task is stored in
    the XML file format, which contains the user who created the task, the time or
    the trigger of the task to take place, and the path to the command or the program
    that will be executed, which is the task itself. Starting from Task Scheduler
    2.0, which was first introduced with Windows Vista, the trigger can be calendar-based
    or an event, such as starting the task when a specific event is logged to the
    event log system. The actions can also be: running the program, sending an e-mail,
    or viewing a message to the user.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一些程序需要在Windows环境中在特定时间执行特定事件。为此，Windows允许程序创建所谓的**计划任务**。任务存储在`C:\Windows\System32\Tasks`中。每个任务以XML文件格式存储，其中包含创建任务的用户、任务发生的时间或触发条件，以及将要执行的命令或程序的路径，这就是任务本身。从Task
    Scheduler 2.0开始，它首次出现在Windows Vista中，触发条件可以是基于日历的，也可以是事件，例如当特定事件被记录到事件日志系统时启动任务。操作还可以是：运行程序、发送电子邮件或向用户显示消息。
- en: 'In the live system, the investigator can open the tasks using the usual `Task
    Scheduler`. From the forensic image, the investigator can extract the tasks from
    `C:\Windows\System32\Tasks`, where each file is a single task in the XML format.
    In Figure 4, we can see the task that is used by Google in the Windows operating
    system to update Google products in the system:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在实时系统中，调查员可以使用常规的`任务计划程序`来打开任务。从取证镜像中，调查员可以从`C:\Windows\System32\Tasks`提取任务，其中每个文件都是以XML格式存储的单个任务。在图4中，我们可以看到Google在Windows操作系统中用于更新Google产品的任务：
- en: '![Windows tasks](img/image_09_004.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![Windows tasks](img/image_09_004.jpg)'
- en: 'Figure 4: Google Update Task'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图4：Google更新任务
- en: A piece of malware can create a task to start itself after a specific trigger,
    such as running the malware executable each morning, or after a specific period
    of time. This is another way used by malware authors to ensure the existence of
    the malware on the infected machine besides adding its executable to the startup
    registry keys or as a service in the system.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一些恶意软件可以创建一个任务，在特定触发条件下启动自身，比如每天早晨运行恶意软件可执行文件，或在特定时间段后运行。这是恶意软件作者确保恶意软件在感染机器上存在的另一种方式，除了将其可执行文件添加到启动注册表键或作为系统服务。
- en: Windows Thumbs DB
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows Thumbs DB
- en: 'When the user uses the **Thumbnails** or **Filmstrip** views from the `Windows`
    folder viewing options, a small thumbnail version of the pictures will be created
    and stored in a single file. This file is located in the same directory as the
    pictures in Windows XP and named `Thumbs.db`. The `Thumbs.db` file has a thumbnail
    version of the existing and also deleted pictures. `Thumbs.db` is a hidden file,
    and usually the user ignores it:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户使用`Windows`文件夹查看选项中的**缩略图**或**胶片条**视图时，系统会创建一个小的图片缩略图版本并将其存储在一个文件中。这个文件在Windows
    XP中与图片位于同一目录，并命名为`Thumbs.db`。`Thumbs.db`文件包含了现有图片以及已删除图片的缩略图版本。`Thumbs.db`是一个隐藏文件，通常用户不会注意到它：
- en: '![Windows Thumbs DB](img/image_09_005.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![Windows Thumbs DB](img/image_09_005.jpg)'
- en: 'Figure 5: Files viewing options'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图5：文件查看选项
- en: If the user has deleted the pictures but hasn't delete the `Thumbs.db` file,
    it will be possible to recover the thumbnail version of the pictures deleted from
    that directory, which provide a good clue about the pictures' contents. Besides
    the thumbnail version of the picture, `Thumbs.db` contains the file name and the
    date and time of the last modification.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户删除了图片，但没有删除`Thumbs.db`文件，那么就有可能恢复该目录中已删除图片的缩略图版本，这为图片内容提供了很好的线索。除了图片的缩略图版本，`Thumbs.db`还包含文件名以及最后修改的日期和时间。
- en: This `Thumbs.db` file is very important in cases related to pictures, such as
    child pornography cases.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`Thumbs.db`文件在与图片相关的案件中非常重要，例如儿童色情案件。
- en: Starting from Windows 7, the process of handling thumbnails files changed. All
    the `Thumbs.db` files are allocated in a single folder in `C:\Users\<UserName>\AppData\Local\Microsoft\Windows\Explorer`.
    This is better from the forensics prospective, as all the files are in the same
    place and there is no need to search for any `Thumbs.db` files in the whole partition
    or disk, and it won't be deleted if the user deleted the whole photos' folder.
    Also, the file name has changed to `Thumbcache.db`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Windows 7 开始，处理缩略图文件的过程发生了变化。所有 `Thumbs.db` 文件都分配在一个文件夹中，即 `C:\Users\<UserName>\AppData\Local\Microsoft\Windows\Explorer`。从取证角度来看，这更为便捷，因为所有文件都在同一位置，无需在整个分区或磁盘中搜索任何
    `Thumbs.db` 文件，并且如果用户删除了整个照片文件夹，文件也不会被删除。此外，文件名已更改为 `Thumbcache.db`。
- en: 'In the modern Windows version, the files'' view has different sizes: small,
    medium, large, and extra-large. Different thumbcache files need to be allocated
    for each size of the viewing layout. Each size has a separate Thumbcache database,
    and the name of the Thumbcache file has a number, which indicates the size of
    the viewing layout, for example, `thumbcache_32.db` or `thumbcache_256.db`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代 Windows 版本中，文件的视图有不同的大小：小、中、大和超大。每种视图布局大小都需要分配不同的 Thumbcache 文件。每种大小都有一个单独的
    Thumbcache 数据库，Thumbcache 文件的名称带有一个数字，表示视图布局的大小，例如 `thumbcache_32.db` 或 `thumbcache_256.db`：
- en: '![Windows Thumbs DB](img/image_09_006.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![Windows Thumbs DB](img/image_09_006.jpg)'
- en: 'Figure 6: Files viewing options in modern Windows Oses'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6：现代 Windows 操作系统中的文件视图选项
- en: Thumbcache analysis
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Thumbcache 分析
- en: 'Thumbcache Viewer is a free tool, and it can be downloaded from [https://thumbcacheviewer.github.io/](https://thumbcacheviewer.github.io/).
    It extracts thumbnail images from Thumcache files, as shown in the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Thumbcache Viewer 是一个免费工具，可从 [https://thumbcacheviewer.github.io/](https://thumbcacheviewer.github.io/)
    下载。它从 Thumbcache 文件中提取缩略图图像，如下截图所示：
- en: '![Thumbcache analysis](img/image_09_007.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![Thumbcache 分析](img/image_09_007.jpg)'
- en: 'Figure 7: Thumbcache Viewer'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7：Thumbcache Viewer
- en: Note that there is another version to parse `Thumbs.db` files.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，还有另一种版本用于解析 `Thumbs.db` 文件。
- en: 'The original file path is not stored in the `Thumbcache` file. To map the file
    to its original location, we can run the program in the target Windows system
    itself and start mapping from the live system. Or, we can extract and use the
    Windows search database `Windows.edb` file from the target system, the system
    under investigation. It is an ESE database located at `C:\ProgramData\Microsoft\Search\Data\Applications\Windows\`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 原始文件路径未存储在 `Thumbcache` 文件中。要将文件映射到其原始位置，我们可以在目标 Windows 系统中运行程序，并从活动系统开始映射。或者，我们可以提取并使用来自目标系统（正在调查的系统）的
    Windows 搜索数据库 `Windows.edb` 文件，这是位于 `C:\ProgramData\Microsoft\Search\Data\Applications\Windows\`
    下的 ESE 数据库：
- en: '![Thumbcache analysis](img/image_09_008.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![Thumbcache 分析](img/image_09_008.jpg)'
- en: 'Figure 8: Mapping Thumbcache files to location'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8：映射 Thumbcache 文件到位置
- en: 'This is created by the Windows indexing service that is used to speed the search
    process in Windows OS. Thumbcache viewer uses this file to map the entries to
    their original locations in the target system. Thumbcache viewer can run on another
    Windows system and use only this database file from the target Windows system.
    However, in this case, the host Windows OS must be the same version or higher
    of the target Windows system. Not all the entries will be mapped based on the
    data in the `Windows.edb` file, but the successfully mapped entries will be viewed
    in green:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这是由 Windows 索引服务创建的，用于加速 Windows 操作系统中的搜索过程。Thumbcache Viewer 使用此文件将条目映射到其在目标系统中的原始位置。Thumbcache
    Viewer 可以在另一个 Windows 系统上运行，并且仅使用目标 Windows 系统中的此数据库文件。但是，在此情况下，主机 Windows 操作系统必须是目标
    Windows 系统的相同或更高版本。基于 `Windows.edb` 文件中的数据，不会映射所有条目，但成功映射的条目将以绿色显示：
- en: '![Thumbcache analysis](img/image_09_009.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![Thumbcache 分析](img/image_09_009.jpg)'
- en: 'Figure 9: Mapped entries using the Windows.edb file.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9：使用 Windows.edb 文件映射条目。
- en: Corrupted Windows.edb files
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 损坏的 Windows.edb 文件
- en: 'Extracted `Windows.edb` files will be corrupted in some cases. If the `Windows.edb`
    file is corrupted, the tool will give you a warning about this and request a recovery
    first on this file to use it in mapping. Fortunately, the recovery of such a file
    can be done using the `esentutl.exe` Windows native tool with a /p switch:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 提取的 `Windows.edb` 文件在某些情况下可能会损坏。如果 `Windows.edb` 文件损坏，该工具将警告您，并要求首先恢复此文件以在映射中使用。幸运的是，可以使用
    `esentutl.exe` Windows 原生工具并带有 /p 开关来恢复这样的文件：
- en: '![Corrupted Windows.edb files](img/image_09_010.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![损坏的 Windows.edb 文件](img/image_09_010.jpg)'
- en: 'Figure 10: Fixing corrupted Windows.edb file'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10：修复损坏的 Windows.edb 文件
- en: Windows RecycleBin
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows 回收站
- en: When a user deletes file with the normal deletion process, the file actually
    doesn't leave the HDD. It will be only marked as deleted on the filesystem, and
    all the file's metadata and contents will continue existing on the hard disk until
    it is overwritten by another file's metadata and content. This will allow the
    user to recover such a file if it was deleted by mistake, for example. The deleted
    files will be located in what is called a **Recycle Bin** in the Windows OS.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户使用正常的删除过程删除文件时，文件实际上并没有从硬盘中消失。它只会在文件系统中标记为已删除，所有文件的元数据和内容会继续存在于硬盘上，直到被其他文件的元数据和内容覆盖。这使得用户可以在误删文件的情况下进行恢复。已删除的文件将位于
    Windows 操作系统中的**回收站**中。
- en: Usually, the advanced forensics tools will be able to find and view the deleted
    files if the system still has their metadata and can read them without carving.
    However, if the investigator only has the recycle bin file and needs to understand
    which files were deleted, this can be done by analyzing the `Recycle Bin` folder.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，先进的取证工具能够找到并查看已删除的文件，如果系统仍然保存其元数据，并且能够在不进行数据雕刻的情况下读取这些文件。然而，如果调查员只有回收站文件，并且需要了解哪些文件被删除了，可以通过分析
    `回收站` 文件夹来实现。
- en: The name of the Recycle Bin differs from one version of Windows to another.
    In Windows versions 95 and 98, the location is under the system partition in a
    folder named `RECYCLED`. From Windows XP until before Vista, the location was
    the same, but the folder name changed to `RECYCLER`. Starting from Windows Vista,
    the name was changed to `$Recycle.Bin`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 回收站的名称在不同版本的 Windows 中有所不同。在 Windows 95 和 98 版本中，回收站位于系统分区下的一个名为 `RECYCLED`
    的文件夹中。从 Windows XP 到 Vista 之前，位置相同，但文件夹名称更改为 `RECYCLER`。从 Windows Vista 开始，名称更改为
    `$Recycle.Bin`。
- en: The ordinary user on a live system can browse to the Recycle Bin, but they need
    to display hidden files and protected system files from the Explorer's view menu.
    From the Recycle Bin, the user can recover the file to its previous location by
    simply right-clicking on the file. As long the file exists in the Recycle Bin,
    it is still recoverable.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 实时系统中的普通用户可以浏览回收站，但他们需要在资源管理器的查看菜单中显示隐藏文件和受保护的系统文件。从回收站中，用户可以通过右键单击文件来将其恢复到原来的位置。只要文件仍然存在于回收站中，它就可以被恢复。
- en: In postmortem analysis, the files won't be shown as in the live system, and
    it will need more understanding of its structure, which differs from one Windows
    version to another.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在事后分析中，文件不会像在实时系统中那样显示，且需要更多了解其结构，而这种结构在不同的 Windows 版本之间有所不同。
- en: RECYCLER
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RECYCLER
- en: 'In the `RECYCLER` folder, there are other subfolders named after the users''
    IDs. In these folders, the deleted files don''t have their normal names, but rather
    they have sequential names: DC1, DC2, and so on. There is another binary file
    named INFO2, which maps the Recycle Bin files to the real filename, date and time,
    and the recycler name of the file. In the following screenshot, we can see the
    structure of `RECYCLER` using FTK imager while opening a live Windows XP system:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `RECYCLER` 文件夹中，还有其他以用户 ID 命名的子文件夹。在这些文件夹中，已删除的文件没有正常名称，而是按顺序命名：DC1、DC2 等等。还有一个名为
    INFO2 的二进制文件，它将回收站文件映射到实际的文件名、日期和时间，以及文件的回收站名称。在以下截图中，我们可以看到使用 FTK Imager 打开 Windows
    XP 实时系统时 `RECYCLER` 的结构：
- en: '![RECYCLER](img/image_09_011.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![RECYCLER](img/image_09_011.jpg)'
- en: 'Figure 11: Recycler in Windows XP with FTK Imager'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11：使用 FTK Imager 查看 Windows XP 中的回收站
- en: 'As we can see, the files have no names, only sequential DC# names. The INFO2
    file has all the names and paths of the actual file mapped to their DC names.
    We can see that by opening the INFO2 file with any hex editor or by the FTK Imager
    itself:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，文件没有名称，只有按顺序编号的 DC# 名称。INFO2 文件包含所有实际文件的名称和路径，并将它们映射到相应的 DC 名称。通过使用任意十六进制编辑器或
    FTK Imager 本身打开 INFO2 文件，可以看到这一点：
- en: '![RECYCLER](img/image_09_012.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![RECYCLER](img/image_09_012.jpg)'
- en: 'Figure 12: INFO2 file in Hex'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12：十六进制格式的 INFO2 文件
- en: 'The values can be parsed, as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这些值可以解析，具体如下：
- en: The file sequence number in the Recycler: `Dc1`
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回收站中的文件序列号：`Dc1`
- en: 'Deletion date: Wed, 24 December 2014 12:20:03 UTC. The deletion time can be
    decoded using the Dcode program, as follows:![RECYCLER](img/image_09_013.jpg)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除日期：2014年12月24日，星期三 12:20:03 UTC。可以使用 Dcode 程序解码删除时间，具体如下：![RECYCLER](img/image_09_013.jpg)
- en: 'Actual file size in bytes: 929792 =908 KB'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际文件大小（字节）：929792 = 908 KB
- en: File location and name:`C:\Documents and Settings\Administrator\Desktop\<FileName>`
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件位置和名称：`C:\Documents and Settings\Administrator\Desktop\<FileName>`
- en: $Recycle.bin
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: $Recycle.bin
- en: 'This was used starting from Windows Vista. Instead of the DC naming schema
    and the INFO2 file from RECYCLER, for each deleted file, there will be an INFO2-like
    file and another file that holds the content of the file instead of DC files.
    The content of each deleted file will be found under a file with a name that starts
    with `$R`, and its INFO2-like file will start with $I with the same name, as shown
    in the following screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Windows Vista 开始使用此功能。与 RECYCLER 中的 DC 命名方案和 INFO2 文件不同，对于每个删除的文件，将有一个类似 INFO2
    的文件和另一个包含文件内容的文件，而不是 DC 文件。每个删除的文件的内容将位于一个以 `$R` 开头的文件中，其类似 INFO2 的文件将以 `$I` 开头，并且名字相同，如下图所示：
- en: '![$Recycle.bin](img/image_09_014.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![$Recycle.bin](img/image_09_014.jpg)'
- en: 'Figure 13: Recycle.bin in Windows 8.1'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图13：Windows 8.1中的 Recycle.bin
- en: 'If we tried to parse the INFO2-like file and the $I file, we can extract the
    following information as before but from different offsets:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试解析类似 INFO2 的文件和 $I 文件，我们可以像以前一样从不同的偏移量提取以下信息：
- en: '![$Recycle.bin](img/image_09_015.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![$Recycle.bin](img/image_09_015.jpg)'
- en: 'Figure 14: $I file opened in Hex'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图14：以十六进制打开的 $I 文件
- en: '$I file header: 0x0000000000000001'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: $I 文件头：0x0000000000000001
- en: 'Actual file size in bytes: 14942208 = 14592 KB'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际文件大小（字节）：14942208 = 14592 KB
- en: 'Deletion date: Mon, 16 February 2015 00:20:37 UTC'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除日期：2015年2月16日，星期一 00:20:37 UTC
- en: File location and name:`C:\Users\AymanT\Desktop\SYSTEM`
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件位置和名称：`C:\Users\AymanT\Desktop\SYSTEM`
- en: Windows shortcut files
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows 快捷方式文件
- en: The ordinary user of the Windows system can create a shortcut to any file in
    the system. The shortcut is like a pointer to a specific file from another location
    in the filesystem. The user creates this file to achieve easy access to some locations
    or files in the filesystem.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 系统的普通用户可以创建指向系统中任何文件的快捷方式。快捷方式就像是从文件系统中另一个位置指向特定文件的指针。用户创建这个文件以便于访问文件系统中的某些位置或文件。
- en: 'The Windows operating system creates shortcut files for the recently opened
    files by default in the following locations:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 操作系统默认在以下位置为最近打开的文件创建快捷方式文件：
- en: '`C:\users\<username>\AppData\Roaming\Microsoft\Windows\Recent`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`C:\users\<username>\AppData\Roaming\Microsoft\Windows\Recent`'
- en: '`C:\users\<username>\AppData\Roaming\Microsoft\Office\Recent`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`C:\users\<username>\AppData\Roaming\Microsoft\Office\Recent`'
- en: 'Windows XP saves the shortcut files at the following location:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Windows XP 将快捷方式文件保存在以下位置：
- en: '`C:\Documents and Settings\<username>\Recent\`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`C:\Documents and Settings\<username>\Recent\`'
- en: Windows stores these shortcut files if the user has opened data or media files
    in the system. It stores the timestamps, the name and location of the original
    file, and the volume name.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 会存储这些快捷方式文件，如果用户在系统中打开了数据或媒体文件。它会存储时间戳、原始文件的名称和位置，以及卷标名称。
- en: The importance of these link files is that they won't be deleted even if the
    original file was deleted from the system specially in the automatically created
    shortcut files in the 'Recent' folder in the Windows OS. In this case, you can
    prove that a specific file, maybe an infected pdf file, has been opened in the
    system under investigation even if the file has been opened from an external storage
    that is now removed from the system. Also, in this case, you will find the path
    to this file in the external storage saved in the link file.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这些链接文件的重要性在于，即使原始文件已经从系统中删除，它们也不会被删除，特别是在 Windows 操作系统中“最近使用”文件夹中自动创建的快捷方式文件。在这种情况下，你可以证明一个特定的文件（可能是一个被感染的
    pdf 文件）在被调查的系统中已被打开，即使该文件是从一个现在已被移除的外部存储中打开的。此外，在这种情况下，你将会在链接文件中找到指向该外部存储中文件的路径。
- en: Shortcut analysis
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快捷方式分析
- en: 'The filesystem timestamps of the shortcut file can reveal some information
    about the file itself. We can consider the creation time of the shortcut file
    as the first time the file was opened and the modification time is the last time
    the file was opened. If both timestamps are the same, this indicates that the
    file was opened only once from the location mentioned in the shortcut file:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 快捷方式文件的文件系统时间戳可以揭示一些关于文件本身的信息。我们可以将快捷方式文件的创建时间视为文件第一次被打开的时间，而修改时间则是文件最后一次被打开的时间。如果两个时间戳相同，这表明该文件仅从快捷方式文件中提到的位置打开过一次：
- en: '![Shortcut analysis](img/image_09_016.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![快捷方式分析](img/image_09_016.jpg)'
- en: 'Figure 15: Filesystem timestamps for shortcut files'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图15：快捷方式文件的文件系统时间戳
- en: To show the contents of the shortcut file in postmortem analysis, we can show
    it in a live system. However, the content may change to match some paths in the
    running Windows machine, or we can use a tool, such as Exiftool tool from [http://www.sno.phy.queensu.ca/~phil/exiftool/](http://www.sno.phy.queensu.ca/~phil/exiftool/).
    Exiftool is a platform-independent Perl library that was designed to read and
    edit Meta information for a wide variety of files, including photos with different
    formats and the `.lnk` files. All the supported files can be found at [http://www.sno.phy.queensu.ca/~phil/exiftool/#supported](http://www.sno.phy.queensu.ca/~phil/exiftool/#supported).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在事后分析中显示快捷方式文件的内容，我们可以在运行中的系统中展示它。然而，内容可能会发生变化，以匹配正在运行的 Windows 机器中的某些路径，或者我们可以使用一个工具，如
    Exiftool 工具，网址为 [http://www.sno.phy.queensu.ca/~phil/exiftool/](http://www.sno.phy.queensu.ca/~phil/exiftool/)。Exiftool
    是一个平台独立的 Perl 库，旨在读取和编辑多种文件的元信息，包括具有不同格式的照片和 `.lnk` 文件。所有支持的文件可以在 [http://www.sno.phy.queensu.ca/~phil/exiftool/#supported](http://www.sno.phy.queensu.ca/~phil/exiftool/#supported)
    上找到。
- en: 'We can use the command line version of this tool in opening any shortcut file,
    and it will display different information, including the original file location
    and the timestamps of the shortcut file:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用此工具的命令行版本打开任何快捷方式文件，它将显示不同的信息，包括原始文件位置和快捷方式文件的时间戳：
- en: '![Shortcut analysis](img/image_09_017.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![快捷方式分析](img/image_09_017.jpg)'
- en: 'Figure 16: Exiftool opening a lnk file'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图16：Exiftool 打开 .lnk 文件
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: So, in this chapter, we discussed different extra Windows artifacts that are
    important to digital forensics analysis. We discussed the prefetch files, and
    how they can be used to track a malicious executable that ran within the system.
    We also showed the Windows tasks that can be used to preserve a malware existence
    in the infected Windows system. Then, we showed you how to investigate the photos
    existing in the system even after deletion using the Thumbcache files. By mentioning
    deletion, we discussed the Recycle Bin and its structure in different Windows
    OS versions. In the end, we discussed the shortcut or `.lnk` files and illustrated
    how to read their data and their forensic importance.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章节中，我们讨论了对数字取证分析重要的不同 Windows 系统额外工件。我们讨论了预取文件，以及它们如何用于追踪在系统中运行的恶意可执行文件。我们还展示了可以用于保留恶意软件在感染的
    Windows 系统中存在的 Windows 任务。然后，我们向您展示了如何通过 Thumbcache 文件调查即使在删除后仍存在于系统中的照片。通过提到删除，我们讨论了回收站及其在不同
    Windows 操作系统版本中的结构。最后，我们讨论了快捷方式或 `.lnk` 文件，并说明了如何读取它们的数据及其取证重要性。
- en: As opening a malicious URL or opening malicious attachments are the most common ways
    to infect a machine, in the following chapter, we will discuss browser forensics
    and show you how to track user activities and investigate the visited websites
    using different tools with different browsers. Also, we will explain how to conduct
    e-mail forensics and investigate received e-mails and their attachments or embedded
    links.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 由于打开恶意 URL 或恶意附件是感染计算机最常见的方式，在接下来的章节中，我们将讨论浏览器取证，并向您展示如何使用不同的工具和浏览器跟踪用户活动，调查访问过的网站。同时，我们将解释如何进行电子邮件取证，调查收到的电子邮件及其附件或嵌入的链接。
