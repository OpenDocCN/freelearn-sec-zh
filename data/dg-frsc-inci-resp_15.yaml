- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Ransomware Investigations
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 勒索软件调查
- en: Spend even the shortest amount of time in incident response and you will most
    likely respond to a ransomware investigation. As we saw in the previous chapter,
    the threat from such attacks is widespread, impacting organizations of every size.
    These include government entities, large corporations, healthcare, and critical
    infrastructure. Given the nature of ransomware attacks, analysts and responders
    should be familiar with how to investigate the common tactics and techniques of
    ransomware.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在应急响应中只花费短短的时间，你也很可能会参与勒索软件调查。如我们在前一章中所见，这类攻击的威胁范围广泛，影响各类组织，包括政府实体、大型企业、医疗保健和关键基础设施。鉴于勒索软件攻击的性质，分析人员和响应人员应熟悉如何调查勒索软件的常见战术和技术。
- en: 'In this chapter, we will look at a few of the more common tactics and associated
    evidence. Specifically, we will examine the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将查看一些常见的战术和相关证据。具体来说，我们将检查以下内容：
- en: Ransomware initial access and execution
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 勒索软件初始访问和执行
- en: Discovering credential access and theft
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现凭证访问和窃取
- en: Investigating post-exploitation frameworks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调查后期利用框架
- en: Command and Control
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令与控制
- en: Investigating lateral movement techniques
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调查横向移动技术
- en: Ransomware initial access and execution
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 勒索软件初始访问和执行
- en: The first stage of ransomware attacks is initially accessing the target environment
    and executing the first stage of malware. This provides the initial foothold that
    threat actors need to carry out the remainder of the attack. Having an awareness
    of how this initial foothold is achieved allows analysts to extract the IOCs related
    to this stage of the attack with the intent of determining the scope and potential
    source of the attack.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 勒索软件攻击的第一阶段是最初访问目标环境并执行第一阶段的恶意软件。这为威胁行为者提供了进行其余攻击所需的初步立足点。了解如何实现这个初步立足点，可以帮助分析人员提取与此攻击阶段相关的IOC（指标），旨在确定攻击的范围和潜在来源。
- en: Initial access
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始访问
- en: The primary method that ransomware threat actors utilize to get the initial
    foothold into the target environment is using a **Spear Phishing Attachment attack
    [T1566.001]**. In many cases, this involves the use of a Microsoft Word or Excel
    spreadsheet that has a macro that can execute a **Virtual Basic Application**
    (**VBA**). This macro is often the first stage in a multi-stage attack where the
    unsuspecting user executes the macro, which then reaches out to the adversary’s
    infrastructure to pull down additional malware such as RAT or tools associated
    with a post-exploitation framework such as Cobalt Strike.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 勒索软件威胁行为者用来获得初步立足点的主要方法是使用**矛式钓鱼附件攻击 [T1566.001]**。在许多情况下，这涉及到使用 Microsoft Word
    或 Excel 表格，其中包含可以执行**虚拟基本应用程序**（**VBA**）的宏。这个宏通常是多阶段攻击的第一阶段，用户在不知情的情况下执行该宏，宏随后连接到攻击者的基础设施，以下载其他恶意软件，如远程访问木马（RAT）或与后期利用框架（如
    Cobalt Strike）相关的工具。
- en: In this case, we are going to look at a macro that executes from a Microsoft
    Word document and calls down an instance of Emotet. A sample of the document can
    be found at [https://app.any.run/tasks/c9ba8b96-5f45-4cb5-8b3d-8dc16910b930/#](https://app.any.run/tasks/c9ba8b96-5f45-4cb5-8b3d-8dc16910b930/#).
    As with any potentially malicious code, the following process was executed in
    a properly configured malware sandbox.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将查看一个从 Microsoft Word 文档执行并调用 Emotet 实例的宏。该文档的样本可以在[https://app.any.run/tasks/c9ba8b96-5f45-4cb5-8b3d-8dc16910b930/#](https://app.any.run/tasks/c9ba8b96-5f45-4cb5-8b3d-8dc16910b930/#)找到。与任何可能的恶意代码一样，以下过程是在正确配置的恶意软件沙箱中执行的。
- en: 'Before we begin this process, it is important to see what the target user or
    users would see. In this case, if they were to click on the Word attachment in
    an email, the following would appear:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始这个过程之前，了解目标用户或用户看到的内容是很重要的。在这种情况下，如果他们点击电子邮件中的 Word 附件，以下内容将会显示：
- en: '![Figure 15.1 – Microsoft Word document – Enable Content ](img/B18571_15_001.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.1 – Microsoft Word 文档 – 启用内容](img/B18571_15_001.jpg)'
- en: Figure 15.1 – Microsoft Word document – Enable Content
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.1 – Microsoft Word 文档 – 启用内容
- en: By clicking the `OleDump.py`. This tool, developed by Didier Stevens, can be
    used to analyze **Object Linking and Embedding** (**OLE**) or compound documents.
    The tool is available at [https://blog.didierstevens.com/programs/oledump-py/](https://blog.didierstevens.com/programs/oledump-py/).
    There is also a handy cheat sheet to go along with the tool at [https://sansorg.egnyte.com/dl/3ydBhha67l](https://sansorg.egnyte.com/dl/3ydBhha67l).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击`OleDump.py`。该工具由Didier Stevens开发，可用于分析**对象链接与嵌入**（**OLE**）或复合文档。该工具可以在[https://blog.didierstevens.com/programs/oledump-py/](https://blog.didierstevens.com/programs/oledump-py/)找到。同时，工具也提供了一份便捷的备忘单，可以通过[https://sansorg.egnyte.com/dl/3ydBhha67l](https://sansorg.egnyte.com/dl/3ydBhha67l)下载。
- en: OLE background
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: OLE背景
- en: OLE is a feature of Microsoft documents for containing additional data types
    or components. This provides additional features for users but also creates a
    tool that can be leveraged by threat actors. Microsoft provides an overview of
    OLE at [https://docs.microsoft.com/en-us/cpp/mfc/ole-background?view=msvc-170](https://docs.microsoft.com/en-us/cpp/mfc/ole-background?view=msvc-170)
    that is worth a review.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: OLE是Microsoft文档的一项功能，用于包含额外的数据类型或组件。它为用户提供了附加功能，但也创造了一个可以被威胁行为者利用的工具。Microsoft在[https://docs.microsoft.com/en-us/cpp/mfc/ole-background?view=msvc-170](https://docs.microsoft.com/en-us/cpp/mfc/ole-background?view=msvc-170)提供了OLE的概述，值得一读。
- en: 'First, point `Oledump.py` to the suspect file, which can be downloaded with
    the following command:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，指向可疑文件的`Oledump.py`，可以使用以下命令下载：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This produces the following output:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![Figure 15.2 – Oledump.py output ](img/B18571_15_002.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图15.2 – Oledump.py输出](img/B18571_15_002.jpg)'
- en: Figure 15.2 – Oledump.py output
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.2 – Oledump.py输出
- en: 'In the `Oledump.py` output, three lines indicate the presence of a macro. Line
    16 has a lowercase `m`, indicating that a macro module is defined but there is
    no code associated with that line. The two remaining lines with the uppercase
    `M` indicate the presence of macro code. In this case, we can dump that macro
    code to an output that can be analyzed with a tool such as `Oledump.py` commands.
    To extract the VBA code from line 17, the following command can be used:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Oledump.py`输出中，三行显示了宏的存在。第16行有一个小写的`m`，表示定义了一个宏模块，但该行没有关联的代码。其余两行的大写`M`表示宏代码的存在。在这种情况下，我们可以将该宏代码转储到一个输出中，然后使用像`Oledump.py`这样的工具进行分析。要从第17行提取VBA代码，可以使用以下命令：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `-s` argument indicates that Oledump should dump the strings from line
    17\. The VBA code will be compressed. The `-v` argument decompresses the output.
    This process should be repeated with the same command for line 18:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`-s`参数表示Oledump应该从第17行转储字符串。VBA代码将被压缩。`-v`参数用于解压输出。这个过程应该使用相同的命令重复执行，以处理第18行：'
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'From here, we will analyze the output from line 18 first. Line 9, in *Figure
    17**.3*, shows what triggers the action of the macro – in this case, it is when
    the document is opened. Line 10 shows the entry point with the `Tbcepkcgnhpwx`
    method:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，我们将首先分析第18行的输出。第9行，在*图17.3*中，展示了触发宏操作的原因——在这种情况下，当文档被打开时会触发。第10行显示了入口点，并使用`Tbcepkcgnhpwx`方法：
- en: '![Figure 15.3 – Oledump.py macro identification ](img/B18571_15_003.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图15.3 – Oledump.py宏识别](img/B18571_15_003.jpg)'
- en: Figure 15.3 – Oledump.py macro identification
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.3 – Oledump.py宏识别
- en: 'Opening the output from macro17, we can see a significant amount of code. Using
    the entry point that was found in macro18, we can use the `Tbcepkcgnhpwx()` function
    reveals several instances of those characters on line 79, as shown here:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 打开宏17的输出，我们可以看到大量代码。使用在宏18中找到的入口点，我们可以使用`Tbcepkcgnhpwx()`函数在第79行揭示出几个字符实例，如下所示：
- en: '![Figure 15.4 – Macro obfuscation ](img/B18571_15_004.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图15.4 – 宏混淆](img/B18571_15_004.jpg)'
- en: Figure 15.4 – Macro obfuscation
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.4 – 宏混淆
- en: 'What follows on line 80 of macro17 appears to be obfuscated code. This is typical
    for malicious scripts as it is a way to bypass detective controls. This obfuscated
    code presents the next set of characters that can be leveraged. In this case,
    the series of `//====dsfnnJJJsm388//=` characters appears to be a token used to
    obfuscate the code. That token can be used to obfuscate some of the script. Take
    the character set and use the **Find** tool to locate all instances. Then, replace
    them with nothing; the following will appear on line 80:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macro17 的第 80 行之后似乎是混淆的代码。这是恶意脚本的典型做法，因为它是一种绕过检测控制的方法。这段混淆代码呈现了下一组可用的字符。在这个例子中，`//====dsfnnJJJsm388//=`
    这一系列字符似乎是用来混淆代码的令牌。可以使用该令牌来混淆部分脚本。利用**查找**工具，查找所有该令牌的实例。然后将它们替换为空白，接下来第 80 行会显示如下内容：
- en: '![Figure 15.5 – Macro code plaintext ](img/B18571_15_005.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.5 – 宏代码明文](img/B18571_15_005.jpg)'
- en: Figure 15.5 – Macro code plaintext
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.5 – 宏代码明文
- en: 'At this point, we have an unobstructed view of the VBA script and can begin
    the process of static analysis. The drawback is that we still do not have any
    specific IOCs to leverage. At this stage, we need to return to the beginning and
    identify any specific lines in the `OleDump.py` results in *Figure 17**.2*. In
    this case, line 14 shows a lot more data. Using `Oledump.py` again, we want to
    dump the contents of that line out with the following command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经能够清晰地看到 VBA 脚本，并可以开始静态分析的过程。缺点是我们仍然没有任何具体的 IOCs 可以利用。在此阶段，我们需要回到最开始的地方，识别在
    *图 17.2* 中 `OleDump.py` 的任何特定行。在此例中，第 14 行显示了更多的数据。再次使用 `Oledump.py`，我们希望通过以下命令导出该行的内容：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the preceding command, we do not have to worry about compression but do
    want to use the `-d` argument so that the entire contents of the line are outputted
    to macro14\. This file can be opened either with Visual Studio Code or a simple
    text editor such as Notepad++, as shown in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的命令中，我们不需要担心压缩，但需要使用 `-d` 参数，以便将整行内容输出到 macro14 文件中。此文件可以通过 Visual Studio
    Code 或简单的文本编辑器（如 Notepad++）打开，如下图所示：
- en: '![Figure 15.6 – Macro file text output ](img/B18571_15_006.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.6 – 宏文件文本输出](img/B18571_15_006.jpg)'
- en: Figure 15.6 – Macro file text output
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.6 – 宏文件文本输出
- en: 'In the previous screenshot, we can see the same token, `//====dsfnnJJJsm388//=`,
    that was previously identified, along with other code. Further down in the output,
    we can see the same pattern:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的截图中，我们可以看到之前已识别出的相同令牌 `//====dsfnnJJJsm388//=`，以及其他代码。稍后输出中，我们可以看到相同的模式：
- en: '![Figure 15.7 – Macro obfuscated code ](img/B18571_15_007.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.7 – 宏代码混淆](img/B18571_15_007.jpg)'
- en: Figure 15.7 – Macro obfuscated code
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.7 – 宏代码混淆
- en: 'From here, we can repeat a similar process and remove the token characters
    with the **Find** tool and replace them with nothing. What we are left with is
    data encoded with Base64, as shown here:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，我们可以重复类似的过程，使用**查找**工具移除令牌字符并将其替换为空白。我们剩下的是经过 Base64 编码的数据，如下所示：
- en: '![Figure 15.8 – Base64-encoded command ](img/B18571_15_008.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.8 – Base64 编码命令](img/B18571_15_008.jpg)'
- en: Figure 15.8 – Base64-encoded command
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.8 – Base64 编码命令
- en: 'To extract the IOCs related to the macro, we can copy the Base64 characters
    and decode them using any tool that will decode Base64\. In this case, we will
    use the open source tool **CyberChef**. This tool, created by the United Kingdom’s
    GHCQ, allows analysts to carve up and manipulate data using “recipes” or a series
    of commands. CyberChef can be accessed via the web at [https://gchq.github.io/CyberChef/](https://gchq.github.io/CyberChef/)
    or downloaded to a local machine. This is often a good option if you are using
    an air-gapped sandbox. The tool consists of four major sections, as shown in the
    following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提取与宏相关的 IOCs，我们可以复制 Base64 字符并使用任何能够解码 Base64 的工具进行解码。在本例中，我们将使用开源工具 **CyberChef**。这个工具由英国的
    GHCQ 创建，允许分析人员使用“配方”或一系列命令来分割和处理数据。CyberChef 可以通过网页访问，网址为 [https://gchq.github.io/CyberChef/](https://gchq.github.io/CyberChef/)，或者下载到本地计算机。如果你使用的是隔离的沙箱环境，下载到本地机器通常是一个不错的选择。该工具由四个主要部分组成，如下图所示：
- en: '![Figure 15.9 – CyberChef interface ](img/B18571_15_009.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.9 – CyberChef 界面](img/B18571_15_009.jpg)'
- en: Figure 15.9 – CyberChef interface
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.9 – CyberChef 界面
- en: The first of these sections is **Operations**. These are the specific commands
    that can be run. The operations are dragged into the **Recipe** section and run
    against the input. Clicking the **BAKE!** button runs the recipe. CyberChef also
    allows the analyst to save a recipe or use community-sourced recipes such as those
    found on GitHub at [https://github.com/mattnotmax/cyberchef-recipes](https://github.com/mattnotmax/cyberchef-recipes).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这些部分的第一个是**操作**。这些是可以运行的特定命令。操作被拖动到**配方**部分，并对输入进行处理。点击**BAKE!**按钮运行配方。CyberChef还允许分析人员保存配方或使用社区提供的配方，例如在GitHub上的[https://github.com/mattnotmax/cyberchef-recipes](https://github.com/mattnotmax/cyberchef-recipes)。
- en: 'In this case, we will use two operations to decode the encoded text and extract
    the IOCs. In this case, we will use the **From Base64** and **Decode text** operations.
    Simply click on the specific operation and drag it into the **Recipe** section:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在本案例中，我们将使用两个操作来解码编码的文本并提取IOC（指标）。在此，我们将使用**从Base64**和**解码文本**操作。只需点击特定操作并将其拖动到**配方**部分：
- en: '![Figure 15.10 – CyberChef – Recipe ](img/B18571_15_010.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.10 – CyberChef – 配方](img/B18571_15_010.jpg)'
- en: Figure 15.10 – CyberChef – Recipe
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.10 – CyberChef – 配方
- en: 'Once the recipe has been set, hit **BAKE!**; the following results should appear:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 配方设置好后，点击**BAKE!**，以下结果应该会显示出来：
- en: '![Figure 15.11 – CyberChef decoding ](img/B18571_15_011.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.11 – CyberChef 解码](img/B18571_15_011.jpg)'
- en: Figure 15.11 – CyberChef decoding
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.11 – CyberChef 解码
- en: 'The output appears to be a combination of commands and URLs:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 输出看起来是命令和URL的组合：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'From here, we extract several URLs. For example, the URL [http://pmthome.com](http://pmthome.com)
    has been identified as hosting malware, as indicated by the following screenshot
    from VirusTotal:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，我们提取了几个URL。例如，URL [http://pmthome.com](http://pmthome.com) 已被确定为托管恶意软件，如VirusTotal的以下屏幕截图所示：
- en: '![Figure 15.12 – VirusTotal analysis ](img/B18571_15_012.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.12 – VirusTotal 分析](img/B18571_15_012.jpg)'
- en: Figure 15.12 – VirusTotal analysis
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.12 – VirusTotal 分析
- en: A macro-enabled document is usually the first step in a chain of events where
    the victim user executes the macro which, in turn, executes a script that reaches
    out to one of the URLs and downloads a secondary payload for execution. This secondary
    payload is often a repurposed banking Trojan that is used to gain some remote
    access so that additional tools can be placed on the system.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 启用宏的文档通常是事件链中的第一步，其中受害者用户执行宏，从而执行一个脚本，该脚本会访问某个URL并下载二级有效载荷以供执行。这个二级有效载荷通常是一个重新利用的银行木马，用于获取远程访问权限，以便可以在系统上部署更多工具。
- en: Execution
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行
- en: Following up with the previous discussion regarding the initial access, we will
    now look at how threat actors execute the payloads that are loaded via the scripts
    we previously examined. There are several ways that malware is executed. A cursory
    examination of the execution tactic within the MITRE ATT&CK framework demonstrates
    this. With that, the old saying holds; *“malware can hide but it has to run.”*
    Considering this sentiment, we will look at leveraging Velociraptor and some of
    the evidence sources to find the execution of malicious code.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 紧接着前面的讨论关于初始访问，我们现在来看看威胁行为者如何执行通过之前我们检查过的脚本加载的有效载荷。恶意软件的执行方式有多种。通过简要检查MITRE
    ATT&CK框架中的执行战术可以证明这一点。由此可以得出老话一句；*“恶意软件可以隐藏，但它必须执行。”* 基于这个观点，我们将探讨如何利用Velociraptor和一些证据来源来查找恶意代码的执行情况。
- en: 'First, we will look at the execution technique **System Binary Proxy Execution:
    Rundll32 [T1218.011]**. In this technique, the threat actor uses the legitimate
    Microsoft Windows binary to execute a malicious action. Threat actors use Rundll32
    for several reasons. This can be to bypass access controls, abuse legitimate system
    DLL files for malicious purposes, or move legitimate DLL files as part of an overall
    attack. In this example, we will examine how a threat actor can use Rundll32 to
    execute its own malicious DLL file.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将查看执行技术**系统二进制代理执行：Rundll32 [T1218.011]**。在这个技术中，威胁行为者使用合法的Microsoft Windows二进制文件来执行恶意操作。威胁行为者使用Rundll32有多种原因。这可能是为了绕过访问控制，滥用合法的系统DLL文件进行恶意操作，或者将合法的DLL文件作为整体攻击的一部分进行移动。在本示例中，我们将检查威胁行为者如何使用Rundll32来执行其自有的恶意DLL文件。
- en: From the previous section, we saw how a threat actor can use a VBA script embedded
    in a Microsoft Word document that, when executed, reaches out to an external server
    and downloads a file. In this case, we will start with the same process, where
    we downloaded an Emotet binary in the form of a DLL file. (The live Emotet binary
    can be found at [https://bazaar.abuse.ch/browse.php?search=sha256%3Acd13a9a774197bf84bd25a30f4cd51dbc4908138e2e008c
    81fc1feef881c6da7](https://bazaar.abuse.ch/browse.php?search=sha256%3Acd13a9a774197bf84bd25a30f4cd51dbc4908138e2e008c81fc1feef881c6da7).)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 从上一节中，我们看到威胁行为者如何使用嵌入在 Microsoft Word 文档中的 VBA 脚本，该脚本执行时会连接到外部服务器并下载文件。在这种情况下，我们将从相同的过程开始，下载一个
    DLL 文件形式的 Emotet 二进制文件。（活跃的 Emotet 二进制文件可以在 [https://bazaar.abuse.ch/browse.php?search=sha256%3Acd13a9a774197bf84bd25a30f4cd51dbc4908138e2e008c81fc1feef881c6da7](https://bazaar.abuse.ch/browse.php?search=sha256%3Acd13a9a774197bf84bd25a30f4cd51dbc4908138e2e008c81fc1feef881c6da7)
    找到。）
- en: 'One location where malicious DLL files can be found is in the logged-on user’s
    AppData directory. This is often due to the file being downloaded via the macro.
    In this case, we will execute the Emotet binary from that location on the victim’s
    system. Threat actors can conduct this remotely by simply using the following
    command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意 DLL 文件的一个可能位置是在登录用户的 AppData 目录中。这通常是由于文件通过宏下载的。在这种情况下，我们将在受害者系统上的该位置执行 Emotet
    二进制文件。威胁行为者可以通过以下命令远程执行此操作：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the previous command, the `sample.dll` file is executed via Rundll32 with
    ordinal `#1`. From here, the DLL file executes, and the malware runs.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的命令中，`sample.dll` 文件通过 Rundll32 使用序号 `#1` 执行。从这里，DLL 文件执行，并且恶意软件开始运行。
- en: 'Going back to the quote “*malware can hide but it has to run*,” there are several
    locations where evidence of the execution can be found. In this case, we will
    look at using Velociraptor and the **Windows.Analysis.EvidenceOfExecution** evidence
    collection. In Velociraptor, click on the plus (**+**) icon:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 回到那句引述“*恶意软件可以隐藏，但必须运行*”，有几个位置可以找到执行证据。在这种情况下，我们将使用 Velociraptor 和 **Windows.Analysis.EvidenceOfExecution**
    证据收集。在 Velociraptor 中，点击加号（**+**）图标：
- en: '![Figure 15.13 – Velociraptor evidence collection ](img/B18571_15_013.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.13 – Velociraptor 证据收集](img/B18571_15_013.jpg)'
- en: Figure 15.13 – Velociraptor evidence collection
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.13 – Velociraptor 证据收集
- en: 'Search for `evidence execution` and select **Windows.Analysis.EvidenceOfExecution**:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索 `evidence execution` 并选择**Windows.Analysis.EvidenceOfExecution**：
- en: '![Figure 15.14 – Velociraptor – Select Artifacts to collect ](img/B18571_15_014.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.14 – Velociraptor – 选择要收集的工件](img/B18571_15_014.jpg)'
- en: Figure 15.14 – Velociraptor – Select Artifacts to collect
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.14 – Velociraptor – 选择要收集的工件
- en: 'This evidence collection leverages several different sources to show evidence
    of execution. Review the parameters and then click **Launch**. Once the collection
    is complete, select **Download Results** and select **Prepare Collection Report**.
    A report will appear in the **Available** **Downloads** section:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 该证据收集利用了多个不同来源来展示执行证据。查看参数后，点击**启动**。收集完成后，选择**下载结果**，然后选择**准备收集报告**。报告将显示在**可用下载**部分：
- en: '![Figure 15.15 – Results ](img/B18571_15_015.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.15 – 结果](img/B18571_15_015.jpg)'
- en: Figure 15.15 – Results
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.15 – 结果
- en: 'From here, click on the report. This will download an HTML file that contains
    the output of the evidence collection. In the Prefetch view of the report, we
    can see that Rundll32 was executed on 20220908T15:50:14Z:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，点击报告。这将下载一个包含证据收集输出的 HTML 文件。在报告的预取视图中，我们可以看到 Rundll32 于 20220908T15:50:14Z
    执行：
- en: '![Figure 15.16 – RunDll32 Prefetch entry ](img/B18571_15_016.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.16 – RunDll32 预取项](img/B18571_15_016.jpg)'
- en: Figure 15.16 – RunDll32 Prefetch entry
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.16 – RunDll32 预取项
- en: 'Scrolling through the additional results, we can see that in addition to what
    appear to be legitimate DLL files executed out of the `System32` directory, there
    is an entry that is executed out of the `TEMP` directory:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动查看其他结果，我们可以看到除了看起来是从 `System32` 目录中执行的合法 DLL 文件外，还有一个从 `TEMP` 目录中执行的条目：
- en: '![Figure 15.17 – RunDLL32 Prefetch entry details ](img/B18571_15_017.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.17 – RunDLL32 预取项详细信息](img/B18571_15_017.jpg)'
- en: Figure 15.17 – RunDLL32 Prefetch entry details
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.17 – RunDLL32 预取项详细信息
- en: Reviewing the RunDLL32 and associated DLLs executed is an excellent way to find
    evidence of malware execution. Given the location now, the analyst can then retrieve
    the file and send it off for malware analysis.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 审查 RunDLL32 和相关 DLL 的执行是寻找恶意软件执行证据的一个好方法。鉴于当前的位置，分析师可以随后检索该文件并将其发送进行恶意软件分析。
- en: The process of establishing the initial foothold can be a combination of scripted
    file execution and human interaction. Next, we will look at credential access
    or theft, where the threat actors attempt to gain access to legitimate credentials
    necessary to carry out the rest of their attack.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 建立初始立足点的过程可能是脚本文件执行与人工交互的组合。接下来，我们将讨论凭据访问或窃取，在这一过程中，攻击者试图获取合法的凭据，以便执行攻击的其余部分。
- en: Discovering credential access and theft
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发现凭据访问与窃取
- en: One key vulnerability that ransomware threat actors will often leverage is the
    way that the Windows OS manages credentials within memory. Credentials and their
    associated password hashes are managed by the **Local Security Authority Subsystem
    Service** (**LSASS**). This process, which runs in memory, contains the credentials
    of user accounts that have logged into or are currently logged into the system.
    In addition, Kerberos authentication tickets can be on the system within this
    process’ address space. Because of its role in managing credentials, LSASS is
    a high-value target for ransomware threat actors.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 勒索软件攻击者常常利用的一个关键漏洞是 Windows 操作系统在内存中管理凭据的方式。凭据及其关联的密码哈希由**本地安全授权子系统服务**（**LSASS**）管理。这个在内存中运行的进程包含了已登录或当前登录系统的用户账户凭据。此外，Kerberos
    认证票据也可以存储在此进程的地址空间中。由于它在管理凭据方面的作用，LSASS 成为勒索软件攻击者的高价值目标。
- en: The MITRE ATT&CK framework contains a full list of **Credential Access [TA0006]**
    techniques. In this case, we will look at two common techniques of OS credential
    dumping where the adversary accesses the LSASS process in running memory **[T1003.001]**,
    along with the associated tools that are very common in ransomware attacks. In
    both cases, the tools and techniques described involve commonly available tools
    and can be executed with easy.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: MITRE ATT&CK 框架包含了完整的**凭据访问 [TA0006]**技术列表。在这种情况下，我们将讨论两种常见的操作系统凭据转储技术，攻击者通过访问运行内存中的
    LSASS 进程 **[T1003.001]**，以及在勒索软件攻击中非常常见的相关工具。在这两种情况下，所描述的工具和技术涉及常用的工具，并且可以轻松执行。
- en: ProcDump
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ProcDump
- en: 'The first of the techniques involves the use of the Microsoft Windows Sysinternals
    tool ProcDump. In this case, the threat actor either utilizes a local copy of
    this tool or transfers it to the victim system for execution. From here, ProcDump
    is executed against the LSASS process using the command line, like so:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一种技术是使用 Microsoft Windows Sysinternals 工具 ProcDump。在这种情况下，攻击者要么使用该工具的本地副本，要么将其传输到受害者系统中执行。接下来，使用命令行对
    LSASS 进程执行 ProcDump，如下所示：
- en: '[PRE6]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: From here, the threat actor can transfer the dump file and extract the password
    hashes for cracking.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，攻击者可以传输转储文件并提取密码哈希以进行破解。
- en: Detecting this activity is often difficult if controls such as EDR tools or
    SIEM are not specifically looking for this activity. From a detective control
    standpoint, this activity is legitimate and is used by system administrators.
    Due to the frequency of this type of activity being used by ransomware threat
    actors, it is sound security practice to remove ProcDump or any utility that can
    dump the LSASS process or detect and verify any use as being legitimate.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有专门监控此活动的控制措施（如 EDR 工具或 SIEM），通常很难检测到这种活动。从检测控制的角度来看，这种活动是合法的，并且系统管理员会使用它。由于勒索软件攻击者经常使用这种类型的活动，安全实践建议删除
    ProcDump 或任何可以转储 LSASS 进程的工具，或者检测并验证任何使用行为是否为合法。
- en: 'The best location to find evidence of the use of ProcDump is within the application
    execution, which we discussed in the previous section. Prefetch files that show
    the execution of ProcDump help us find the time and location of the execution.
    Another option for organizations that have enhanced Sysmon logging is to look
    for **Type 1: Process Create** entries, such as the one shown here:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 查找 ProcDump 使用证据的最佳位置是在应用程序执行中，我们在上一节中讨论过。显示 ProcDump 执行的预取文件可以帮助我们找到执行的时间和位置。另一个选项是对于启用了
    Sysmon 日志记录的组织，可以查找 **类型 1：进程创建** 记录，如下所示：
- en: '![Figure 15.18 – ProcDump Sysmon entry ](img/B18571_15_018.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.18 – ProcDump Sysmon 记录 ](img/B18571_15_018.jpg)'
- en: Figure 15.18 – ProcDump Sysmon entry
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.18 – ProcDump Sysmon 记录
- en: 'Within the log entry, the following is the key data point to determine if credentials
    have been accessed:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在日志条目中，以下是判断是否访问了凭据的关键数据点：
- en: '[PRE7]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the output, we can see that the threat actor executed ProcDump against the
    LSASS process and placed the output in the `C:\Windows\Temp` directory for later
    exfiltration. This is a good use case for the enhanced logging of systems and
    detecting the use of ProcDump.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出中，我们可以看到威胁行为者对 LSASS 进程执行了 ProcDump，并将输出文件放置在`C:\Windows\Temp`目录中，准备后续窃取。这是增强系统日志记录和检测
    ProcDump 使用的一个很好的应用场景。
- en: Mimikatz
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mimikatz
- en: In [*Chapter 14*](B18571_14.xhtml#_idTextAnchor239)*,* we examined the tool
    Mimikatz. Mimikatz is another favorite tool of threat actors due to its ease of
    use and that it is built into a wide variety of post-exploitation frameworks.
    When integrated into tools such as Cobalt Strike or PowerSploit, the tool can
    be in memory without us having to write any files to the disk. This makes looking
    for trace evidence difficult, but not impossible.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第14章*](B18571_14.xhtml#_idTextAnchor239)中，我们研究了工具 Mimikatz。Mimikatz 是威胁行为者的另一个常用工具，因为它易于使用，并且已经集成在各种后期利用框架中。当集成到如
    Cobalt Strike 或 PowerSploit 等工具中时，该工具可以在内存中运行，而不需要将任何文件写入磁盘。这使得寻找痕迹证据变得困难，但并非不可能。
- en: 'For example, the exploitation tool PowerSploit, available on GitHub at [https://github.com/PowerShellMafia/PowerSploit](https://github.com/PowerShellMafia/PowerSploit),
    has a module called `Invoke-Mimikatz`. While the tool bypasses writing a binary
    to the disk and executing it, there are traces within the PowerShell log, specifically
    Event 403, that will show the command execution, as shown in the following screenshot:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，GitHub 上可用的利用工具 PowerSploit（网址：[https://github.com/PowerShellMafia/PowerSploit](https://github.com/PowerShellMafia/PowerSploit)）有一个名为
    `Invoke-Mimikatz` 的模块。虽然该工具避免了将二进制文件写入磁盘并执行，但 PowerShell 日志中仍有痕迹，特别是事件 403，能够显示命令执行情况，如下图所示：
- en: '![Figure 15.19 – Mimikatz PowerSploit entry ](img/B18571_15_019.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.19 – Mimikatz PowerSploit 条目](img/B18571_15_019.jpg)'
- en: Figure 15.19 – Mimikatz PowerSploit entry
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.19 – Mimikatz PowerSploit 条目
- en: 'Within the log entry is the following key data point of interest:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 日志条目中包含以下关键数据点：
- en: '[PRE8]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This provides the analyst with definitive proof that the credential hashes have
    been accessed. In the case of seeing the use of Mimikatz or ProcDump, it is best
    practice to assume that the credentials or Kerberos authentication mechanisms
    on that system have been compromised. It is therefore advisable that a password
    reset, as discussed in [*Chapter 16*](B18571_16.xhtml#_idTextAnchor284), be performed.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这为分析师提供了凭证哈希已被访问的确凿证据。在发现使用 Mimikatz 或 ProcDump 的情况下，最佳实践是认为该系统上的凭证或 Kerberos
    认证机制已经被攻破。因此，建议按照[*第16章*](B18571_16.xhtml#_idTextAnchor284)中讨论的内容，进行密码重置。
- en: Understanding credential access and theft is important not only from an investigation
    standpoint but also in recovering from such an attack. Uncovering the use of these
    tools and what credentials are potentially compromised provides decision-makers
    with the data needed to make decisions about resetting or disabling user and administrator
    passwords.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 理解凭证访问和窃取不仅对调查非常重要，还对于从此类攻击中恢复也至关重要。揭示这些工具的使用情况以及潜在的被盗凭证，能够为决策者提供必要的数据，以便做出是否重置或禁用用户和管理员密码的决策。
- en: Investigating post-exploitation frameworks
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调查后期利用框架
- en: The primary post-exploitation framework that analysts will encounter is Cobalt
    Strike. There are other frameworks such as PowerSploit or Meterpreter that are
    commonly available and can be used by even the most novice threat actor. One primary
    mechanism that these exploitation frameworks utilize is encoded PowerShell scripts
    to establish a reverse connection back to the threat actor’s command and control
    infrastructure.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 分析师遇到的主要后期利用框架是 Cobalt Strike。还有其他框架，如 PowerSploit 或 Meterpreter，这些框架通常可用，即使是最初级的威胁行为者也可以使用。一个主要机制是这些利用框架利用编码的
    PowerShell 脚本，建立一个反向连接回威胁行为者的指挥与控制基础设施。
- en: There are a few benefits to this approach from an adversary’s perspective. First,
    the scripts can be loaded in a variety of places to survive a reboot. For example,
    MITRE ATT&CK technique `HKLM\Software\Microsoft\Windows\CurrentVersion\Run` registry
    key.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 从对手的角度来看，这种方法有几个好处。首先，脚本可以加载到多个位置，从而在重启后依然能够存活。例如，MITRE ATT&CK 技术 `HKLM\Software\Microsoft\Windows\CurrentVersion\Run`
    注册表键。
- en: The second benefit is that malicious PowerShell scripts can be executed remotely
    utilizing Windows OS tools such as Windows Management Instrumentation to remotely
    execute malicious scripts. Cobalt Strike uses this functionality as one of its
    features.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个好处是，恶意PowerShell脚本可以通过使用Windows操作系统工具（如Windows管理工具）远程执行，这些工具能够远程执行恶意脚本。Cobalt
    Strike将此功能作为其特点之一。
- en: Finally, malicious scripts can often be run directly into memory without us
    having to put a file on the system, which would increase the chances of the script
    being detected. Executing the script remotely and in memory can bypass some antivirus
    controls.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，恶意脚本通常可以直接在内存中运行，而不需要将文件放到系统中，这样可以增加脚本被检测到的机会。通过远程执行并在内存中运行脚本可以绕过一些杀毒控制。
- en: 'In terms of locating evidence of the use of tools such as Cobalt Strike and
    malicious scripts, the best location is in Windows PowerShell event logs. Look
    for the execution of remote scripts with Event ID 400 and or the use of PowerShell
    with Event ID 600\. An additional source is the Windows PowerShell Operational
    event logs, Event ID 4104\. The following screenshot shows the content of such
    logs:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在查找使用Cobalt Strike等工具和恶意脚本的证据时，最好的位置是Windows PowerShell事件日志。查找事件ID为400的远程脚本执行，或事件ID为600的PowerShell使用。另一个来源是Windows
    PowerShell操作事件日志，事件ID为4104。以下截图显示了此类日志的内容：
- en: '![Figure 15.20 – Cobalt Strike PowerShell Event Log entry ](img/B18571_15_020.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图15.20 – Cobalt Strike PowerShell事件日志条目](img/B18571_15_020.jpg)'
- en: Figure 15.20 – Cobalt Strike PowerShell Event Log entry
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.20 – Cobalt Strike PowerShell事件日志条目
- en: Two key items will often stand out regarding malicious scripts. The first is
    the Base64 encoding, as seen in the preceding screenshot. In addition, commands
    such as `Powershell -nop - w hidden -noni -e` and `powershell.exe -EncodedCommand`
    are often red flags and can serve as keywords to search for when conducting log
    analysis.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 关于恶意脚本，通常有两个关键点需要注意。第一个是Base64编码，如前面的截图所示。此外，像`Powershell -nop - w hidden -noni
    -e`和`powershell.exe -EncodedCommand`这样的命令通常是红旗警告，可以作为在进行日志分析时的搜索关键字。
- en: 'To extract IOCs from these scripts, we can use the CyberChef tool that we previously
    used when decoding the Base64 data within the macro. In this case, we will decode
    a common Cobalt Strike script that installs a beacon on a target system:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要从这些脚本中提取IOC，我们可以使用之前解码宏中Base64数据时使用的CyberChef工具。在这种情况下，我们将解码一个常见的Cobalt Strike脚本，该脚本会在目标系统上安装一个信标：
- en: 'The first step is to simply copy the Base64 characters out of either the event
    logs, scheduled task, or registry. A good technique is to copy them to a text
    editor, just in case you make a small error; this means you can always go back
    to a clean output:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是简单地从事件日志、计划任务或注册表中复制Base64字符。一种好的技巧是将其复制到文本编辑器中，以防万一发生小错误，这样你可以随时返回到干净的输出：
- en: '![Figure 15.21 – Cobalt Strike Base64-encoded script ](img/B18571_15_021.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图15.21 – Cobalt Strike Base64编码脚本](img/B18571_15_021.jpg)'
- en: Figure 15.21 – Cobalt Strike Base64-encoded script
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.21 – Cobalt Strike Base64编码脚本
- en: 'Next, we will place the encoded data into the **Input** field in CyberChef
    and use **From** **Base64** operations:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将把编码数据放入CyberChef的**输入**字段，并使用**从** **Base64**操作：
- en: '![Figure 15.22 – First Base64 decode ](img/B18571_15_022.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图15.22 – 第一次Base64解码](img/B18571_15_022.jpg)'
- en: Figure 15.22 – First Base64 decode
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.22 – 第一次Base64解码
- en: 'What you will often notice is that embedded in the encoded PowerShell script
    is another set of Base64-encoded characters. Simply repeat the process by decoding
    the newly encoded characters:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会经常注意到，在编码后的PowerShell脚本中，嵌入了另一组Base64编码的字符。只需重复解码新编码字符的过程：
- en: '![Figure 15.23 – Second Base64 decode ](img/B18571_15_023.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图15.23 – 第二次Base64解码](img/B18571_15_023.jpg)'
- en: Figure 15.23 – Second Base64 decode
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.23 – 第二次Base64解码
- en: 'Again, there is another set of Base64-encoded characters with the following
    text preceding it:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，前面会有一组新的Base64编码字符：
- en: '[PRE9]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After the encoded characters, there is this string:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在编码字符后，出现了以下字符串：
- en: '[PRE10]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The preceding string indicates that the preceding characters are not only encoded
    but have been put through an XOR function. In this case, copy the encoded commands
    and place them in the input. Here, we will use the same **From Base64** operation
    but this time, we will add another operation that addresses the XOR function,
    as shown in the following screenshot:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前面的字符串表明，前面的字符不仅被编码过，还经过了 XOR 函数的处理。在这种情况下，复制编码后的命令并将其放入输入框。这里，我们将使用相同的**From
    Base64**操作，但这次，我们将添加另一个操作来处理 XOR 函数，如下截图所示：
- en: '![Figure 15.24 – Base64 XOR recipe ](img/B18571_15_024.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.24 – Base64 XOR 配方](img/B18571_15_024.jpg)'
- en: Figure 15.24 – Base64 XOR recipe
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.24 – Base64 XOR 配方
- en: 'This produces the following shellcode output:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将产生以下 shellcode 输出：
- en: '![Figure 15.25 – Shellcode output ](img/B18571_15_025.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.25 – Shellcode 输出](img/B18571_15_025.jpg)'
- en: Figure 15.25 – Shellcode output
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.25 – Shellcode 输出
- en: An analysis of the shellcode reveals several key pieces of data. The first and
    most obvious is the IP address `47.242.164.33`. There are also additional data
    points, such as the `User-Agent` string. Now that we have this shellcode and the
    associated IOCs, we can stop here, but it may be important to evaluate the shellcode
    independently using `scdbg`, an open-source shellcode analysis application available
    at [http://sandsprite.com/blogs/index.php?uid=7&pid=152](http://sandsprite.com/blogs/index.php?uid=7&pid=152).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 对 shellcode 的分析揭示了几个关键数据点。第一个也是最明显的就是 IP 地址 `47.242.164.33`。还有其他数据点，例如 `User-Agent`
    字符串。现在我们已经获得了这个 shellcode 和相关的 IOC，我们可以在这里停止，但使用开源的 shellcode 分析工具 `scdbg` 进行独立评估可能也很重要，该工具可以在
    [http://sandsprite.com/blogs/index.php?uid=7&pid=152](http://sandsprite.com/blogs/index.php?uid=7&pid=152)
    下载。
- en: 'First, use the save icon located in the `.dat`. Next, download `scdbg` and
    uncompress the file to the desired location. Finally, run the following command
    against the downloaded shellcode:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用位于 `.dat` 文件中的保存图标。接着，下载 `scdbg` 并将文件解压到目标位置。最后，运行以下命令对下载的 shellcode 进行分析：
- en: '[PRE11]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This will produce the following output:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下输出：
- en: '![Figure 15.26 – Shellcode analysis ](img/B18571_15_026.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.26 – Shellcode 分析](img/B18571_15_026.jpg)'
- en: Figure 15.26 – Shellcode analysis
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.26 – Shellcode 分析
- en: The output indicates that a connection has been established with the IP address
    `47.242.164.33` using the destination port `8083`. Taken in conjunction with the
    user agent string that we observed previously, the Cobalt Strike beacon is attempting
    to blend in with other internet traffic to obfuscate the C2 traffic.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示已经与 IP 地址 `47.242.164.33` 建立了连接，并使用目标端口 `8083`。结合我们之前观察到的用户代理字符串，Cobalt
    Strike 信标正在尝试与其他互联网流量融合，以混淆 C2 流量。
- en: Locating, extracting, and analyzing a post-exploitation script or beacon is
    critical as it often reveals the C2 infrastructure the threat actor is using.
    It is also critical for understanding how the threat actor is maintaining control
    over the system and provides data for proper eradication and recovery.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 定位、提取和分析后渗透脚本或信标至关重要，因为它通常揭示了威胁行为者正在使用的 C2 基础设施。这对于理解威胁行为者如何维持对系统的控制也很关键，并为适当的根除和恢复提供数据。
- en: Command and Control
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令与控制
- en: In this case, we will look at traffic associated with the post-exploitation
    tool Cobalt Strike. This is a commonly used tool by ransomware threat actors.
    In this case, we will look at examining a full packet capture to uncover previously
    unidentified IOCs related to the adversary’s infrastructure. For this review,
    we will look at a packet capture related to an attack using the Squirrelwaffle
    loader with the Qakbot RAT and finally how to install Cobalt Strike, which is
    available at [https://www.malware-traffic-analysis.net/2021/09/22/index.html](https://www.malware-traffic-analysis.net/2021/09/22/index.html).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将查看与后渗透工具 Cobalt Strike 相关的流量。这是勒索软件威胁行为者常用的工具。我们将检查一个完整的数据包捕获，以揭示与攻击者基础设施相关的先前未识别的
    IOC。在本次审查中，我们将查看与使用 Squirrelwaffle 加载器和 Qakbot RAT 进行的攻击相关的数据包捕获，并最终讲解如何安装 Cobalt
    Strike，该工具可通过 [https://www.malware-traffic-analysis.net/2021/09/22/index.html](https://www.malware-traffic-analysis.net/2021/09/22/index.html)
    获取。
- en: Security Onion
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全洋葱
- en: 'One tool that we briefly covered previously is Security Onion. This open source
    intrusion detection system can aid in identifying potential command and control
    traffic. In this case, the packet capture was run against the existing rule set
    and Security Onion indicated several hits. One that is of note is the **ET MALWARE
    Observed Qbot Style** **SSL Certificate**:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前简要介绍过的一个工具是 Security Onion。这个开源入侵检测系统可以帮助识别潜在的指挥与控制流量。在这个案例中，数据包捕获是根据现有规则集运行的，Security
    Onion 指示了多个命中的事件。其中一个值得注意的是 **ET MALWARE 观察到的 Qbot 风格** **SSL 证书**：
- en: '![Figure 15.27 – Cobalt Strike Security Onion detection ](img/B18571_15_027.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.27 – Cobalt Strike 安全洋葱检测](img/B18571_15_027.jpg)'
- en: Figure 15.27 – Cobalt Strike Security Onion detection
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.27 – Cobalt Strike 安全洋葱检测
- en: 'This hit indicates that the SSL certificate matches those previously observed
    in conjunction with the Qbot malware. A further examination of the IP addresses
    associated with the malicious traffic indicated 27 connections with a non-standard
    HTTP port:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这个警报表明 SSL 证书与之前在 Qbot 恶意软件相关联时观察到的证书匹配。进一步检查与恶意流量相关的 IP 地址，发现有 27 个连接使用了非标准的
    HTTP 端口：
- en: '![Figure 15.28 – Security Onion alert network connections ](img/B18571_15_028.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.28 – 安全洋葱警报网络连接](img/B18571_15_028.jpg)'
- en: Figure 15.28 – Security Onion alert network connections
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.28 – 安全洋葱警报网络连接
- en: IDS tools such as Security Onion can focus attention very quickly on key indicators.
    Even without that, some tools can give us data points to focus on, specifically
    those regarding C2 traffic.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 像 Security Onion 这样的 IDS 工具可以迅速将注意力集中到关键指标上。即使没有这些工具，一些工具仍然可以为我们提供值得关注的数据点，特别是那些与
    C2 流量相关的数据。
- en: RITA
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RITA
- en: 'It is in very rare circumstances that analysts will have a full packet capture
    of the entire attack chain, but a review of the packet capture can provide us
    with some insight into how to identify potential command and control traffic simply
    by looking at the specific elements of network flow data. To start, let’s go ahead
    and use the tool RITA that was introduced in [*Chapter 9*](B18571_09.xhtml#_idTextAnchor156):'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 分析师通常很少会拥有整个攻击链的完整数据包捕获，但通过审查数据包捕获，可以让我们通过查看网络流量数据的具体元素来洞察如何识别潜在的指挥与控制流量。首先，我们可以使用在
    [*第 9 章*](B18571_09.xhtml#_idTextAnchor156) 中介绍的 RITA 工具：
- en: 'First, we need to process the packet capture with Zeek:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要使用 Zeek 处理数据包捕获：
- en: '[PRE12]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, import the Zeek output to RITA:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将 Zeek 输出导入到 RITA：
- en: '[PRE13]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The screenshot for reference is as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 参考截图如下：
- en: '![Figure 15.29 – Packet capture Zeek import ](img/B18571_15_029.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.29 – 数据包捕获 Zeek 导入](img/B18571_15_029.jpg)'
- en: Figure 15.29 – Packet capture Zeek import
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.29 – 数据包捕获 Zeek 导入
- en: 'Process the PCAP to show beacons and output it to a CSV file for analysis:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理 PCAP 显示信标并将其输出到 CSV 文件进行分析：
- en: '[PRE14]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The results of the RITA analysis reveal many of the same IP addresses that
    we saw in the Security Onion analysis:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: RITA 分析的结果显示了许多与 Security Onion 分析中看到的相同的 IP 地址：
- en: '![Figure 15.30 – RITA beacon IP addresses ](img/B18571_15_030.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.30 – RITA 信标 IP 地址](img/B18571_15_030.jpg)'
- en: Figure 15.30 – RITA beacon IP addresses
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.30 – RITA 信标 IP 地址
- en: This allows the analyst to focus on specific IP addresses within the full packet
    capture and perform a more detailed analysis using a tool such as Arkime.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得分析人员可以在完整的数据包捕获中专注于特定的 IP 地址，并使用像 Arkime 这样的工具进行更详细的分析。
- en: Arkime
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Arkime
- en: 'Now that we have identified some potential Command and Control IOCs, we can
    pivot to a tool that will give us some more insight into the traffic. While Wireshark
    is an option, in this instance, Arkime may be a better choice as it provides that
    flow-like view that is easier to look at. Let’s run the following query for the
    IP address `108.62.141.222`:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经识别出一些潜在的指挥与控制 IOC（指标），可以转向一个能为我们提供更多流量洞察的工具。虽然 Wireshark 是一个选择，但在这种情况下，Arkime
    可能是更好的选择，因为它提供了那种流量样式的视图，更容易查看。让我们为 IP 地址 `108.62.141.222` 运行以下查询：
- en: '[PRE15]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This provides some key details that are of interest. First, the destination
    port for this traffic is `8888`, which is not in and of itself malicious but is
    not a standard port for HTTPS traffic. Second, there is a consistent byte back
    and forth with two spikes. The first of these is at the beginning of the traffic;
    then, there’s another later on. If we dig deeper into one of the packets, we will
    see that the traffic is encrypted:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这提供了一些关键的细节，值得关注。首先，这个流量的目标端口是 `8888`，它本身不是恶意的，但也不是 HTTPS 流量的标准端口。其次，存在一个一致的字节交换，且有两个尖峰。第一个出现在流量的开始，然后稍后又出现另一个。如果我们深入查看其中一个数据包，将会发现流量是加密的：
- en: '![Figure 15.31 – Cobalt Strike connections in Arkime ](img/B18571_15_031.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![图15.31 – Arkime中的Cobalt Strike连接](img/B18571_15_031.jpg)'
- en: Figure 15.31 – Cobalt Strike connections in Arkime
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.31 – Arkime中的Cobalt Strike连接
- en: 'If we drill into one of the data streams, we will see that the data is encrypted.
    One area that analysts will often have no visibility into is the actual activity
    of the C2 channel:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们深入分析其中一个数据流，我们会发现数据是加密的。分析人员通常无法看到的一个领域是C2通道的实际活动：
- en: '![Figure 15.32 – TCP stream ](img/B18571_15_032.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图15.32 – TCP流](img/B18571_15_032.jpg)'
- en: Figure 15.32 – TCP stream
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.32 – TCP流
- en: 'Finally, leveraging threat intelligence, analysts can input the IP address
    into a source such as AlienVault’s OTX, which reveals that the IP address `108.62.141.222`
    is associated with infrastructure utilizing Cobalt Strike:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，借助威胁情报，分析人员可以将IP地址输入到如AlienVault的OTX这样的来源中，这样就能揭示出IP地址`108.62.141.222`与使用Cobalt
    Strike的基础设施相关联：
- en: '![Figure 15.33 – AlienVault OTX threat intelligence ](img/B18571_15_033.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图15.33 – AlienVault OTX威胁情报](img/B18571_15_033.jpg)'
- en: Figure 15.33 – AlienVault OTX threat intelligence
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.33 – AlienVault OTX威胁情报
- en: In some instances, the first indication that an organization has been attacked
    is tools such as IDS and IPS systems that hit on a suspect connection. Other times,
    command and control traffic remains undetected. Determining how an adversary is
    maintaining control is critical to ensuring that that control is removed during
    eradication and recovery.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，组织遭受攻击的第一个迹象是IDS和IPS系统等工具对可疑连接进行了报警。其他时候，命令与控制流量保持未被检测的状态。确定对手如何保持控制对于确保在清除和恢复过程中移除该控制至关重要。
- en: Investigating lateral movement techniques
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调查横向移动技术
- en: When investigating lateral movement techniques, the primary technique that is
    used is the **Exploitation of Remote Services [T1210]**. In this technique, the
    threat actor utilizes a combination of compromised credentials and existing remote
    access tools such as SMB and RDP to access other systems on the same network.
    Vulnerabilities such as EternalBlue were widely exploited by threat actors such
    as NotPetya, as well as malware variants such as Trickbot.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在调查横向移动技术时，主要使用的技术是**远程服务利用 [T1210]**。在此技术中，威胁行为者利用已被泄露的凭证和现有的远程访问工具，如SMB和RDP，访问同一网络中的其他系统。像EternalBlue这样的漏洞被威胁行为者广泛利用，例如NotPetya以及恶意软件变种如Trickbot。
- en: The primary source of data that should be leveraged to identify lateral movement
    is NetFlow. As we saw in [*Chapter 9*](B18571_09.xhtml#_idTextAnchor156), a review
    of NetFlow can often reveal the use of SMB or RDP through multiple connections
    from one or a few machines to the rest of the network over a short period. For
    example, a systems administrator that is performing remote maintenance on a server
    within a server LAN segment will RDP to a single box, perform some of the maintenance
    tasks over say a 10- to 15-minute period, and then move to another system. It
    is highly suspect to see a non-administrator system initiate an RDP connection,
    let alone dozens in a matter of minutes.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 确定横向移动的主要数据来源应该是NetFlow。正如我们在[*第9章*](B18571_09.xhtml#_idTextAnchor156)中所看到的，通过审查NetFlow，通常可以揭示通过一个或几个机器与网络其他部分在短时间内进行多次连接时使用了SMB或RDP。例如，进行远程维护的系统管理员会通过RDP连接到一台服务器，并在10到15分钟内完成一些维护任务，然后再转到另一台系统。如果看到非管理员系统发起RDP连接，更不用说在几分钟内发起数十次连接，那就非常可疑了。
- en: 'If NetFlow is not available, Windows Event Logs can provide some critical details
    as to how a threat actor was able to access a remote image. The first place to
    start is the Windows Security Event Log 4624, which indicates that a user or administrator
    has successfully logged on. In this case, we are interested in two types of logons:
    the SMB or remote share logon and the remote desktop logon.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果NetFlow不可用，Windows事件日志可以提供一些关键细节，说明威胁行为者是如何访问远程镜像的。首先要查看的是Windows安全事件日志4624，它表示用户或管理员已成功登录。在这种情况下，我们关注的是两种类型的登录：SMB或远程共享登录和远程桌面登录。
- en: 'In the remote share or SMB logon, the threat actor will often use a post-exploitation
    framework that can use SMB to pivot to another system. On the remote system that
    the threat actor is connecting to, an Event ID 4624 Type 3 entry will be made
    in the Windows Event Log, such as the one that follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在远程共享或SMB登录中，威胁行为者通常会使用一种后渗透框架，该框架可以使用SMB向另一个系统进行跳转。在威胁行为者连接到的远程系统上，Windows事件日志中会记录一个事件ID
    4624 类型3的条目，如下所示：
- en: '![Figure 15.34 – SMB logon event log entry ](img/B18571_15_034.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.34 – SMB 登录事件日志条目 ](img/B18571_15_034.jpg)'
- en: Figure 15.34 – SMB logon event log entry
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.34 – SMB 登录事件日志条目
- en: 'As can be seen in the log entry, the system DEKSTOP-9SK5KPF was logged in with
    the account Atomic Red Team. Drilling further down into the entry, we can see
    the IP address `192.168.0.22` associated with the system LAPTOP-CHL1KGT5, indicating
    that was the machine that initiated the connection:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如日志条目所示，系统 DEKSTOP-9SK5KPF 使用 Atomic Red Team 帐户登录。进一步深入分析条目，我们可以看到与 LAPTOP-CHL1KGT5
    系统关联的 IP 地址 `192.168.0.22`，表明这是发起连接的机器：
- en: '![Figure 15.35 – SMB logon entry details ](img/B18571_15_035.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.35 – SMB 登录条目详细信息 ](img/B18571_15_035.jpg)'
- en: Figure 15.35 – SMB logon entry details
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.35 – SMB 登录条目详细信息
- en: 'The other type of logon that we can see in the Windows Event Logs is RDP connections.
    The same Event ID, 4624, is used but with RDP connections, there are two types
    of logon types. The first is a type 10\. This indicates that a new RDP connection
    was made to a system. A type 7 indicates that the remote machine is reconnecting
    from a previous session or had not properly logged off the last time a session
    was established:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 事件日志中我们可以看到的另一种登录类型是 RDP 连接。相同的事件 ID，4624，用于 RDP 连接，但是对于 RDP 连接，有两种登录类型。第一种是类型
    10。这表明向系统建立了新的 RDP 连接。类型 7 表示远程机器正在重新连接前一个会话或者上次建立会话时未正确注销：
- en: '![Figure 15.36 – RDP logon entry ](img/B18571_15_036.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.36 – RDP 登录条目 ](img/B18571_15_036.jpg)'
- en: Figure 15.36 – RDP logon entry
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.36 – RDP 登录条目
- en: 'Again, digging through the entry, the logs provide the same information that
    we saw in the type 7 event:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 再次查看记录，日志提供了与类型 7 事件相同的信息：
- en: '![Figure 15.37 – RDP logon entry details ](img/B18571_15_037.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.37 – RDP 登录条目详细信息 ](img/B18571_15_037.jpg)'
- en: Figure 15.37 – RDP logon entry details
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.37 – RDP 登录条目详细信息
- en: 'Conducting this type of analysis does not scale with large-scale incidents,
    so the best approach is to use a SIEM or another platform such as Skadi. In this
    case, we can still get the same data, as shown here:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 对大规模事件进行这种类型的分析并不适用，因此最好的方法是使用 SIEM 或其他平台，如 Skadi。在这种情况下，我们仍然可以获取相同的数据，如下所示：
- en: '[PRE16]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: With that we have concluded how to investigate lateral movement techniques.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这一步骤，我们已经总结了如何调查横向移动技术。
- en: Summary
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The unfortunate reality of the situation is that ransomware is here to stay.
    The takeaway from that is that responders and analysts need to be able to identify,
    extract, and analyze evidence related to these types of attacks. In this chapter,
    we learned how to examine a common initial infection vector, how to determine
    the theft of credentials, how to detect lateral movement, and how to identify
    the threat actor’s command and control. This is a solid starting point, and it
    is imperative to keep up to date with how threat actors operate through the continuous
    review and incorporation of threat intelligence.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的现实是勒索软件已经来临。从中得到的教训是，响应者和分析师需要能够识别、提取和分析与这些类型攻击相关的证据。在本章中，我们学习了如何检查常见的初始感染向量，如何确定凭证的窃取，如何检测横向移动，以及如何识别威胁行动者的命令和控制。这是一个坚实的起点，通过持续审查和整合威胁情报来了解威胁行动者的操作方式是至关重要的。
- en: In the next chapter, we will look at how to apply the tools and techniques we
    have examined in previous chapters to the proactive practice of threat hunting.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何将我们在前几章中讨论过的工具和技术应用于威胁狩猎的积极实践。
- en: Questions
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Answer the following questions to test your knowledge of this chapter:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题以测试您对本章的知识掌握：
- en: Which of these is not a post-exploitation framework?
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个不是后渗透框架？
- en: Cobalt Strike
  id: totrans-212
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Cobalt Strike
- en: Metasploit
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Metasploit
- en: ProcDump
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: ProcDump
- en: PowerSploit
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: PowerSploit
- en: Windows OS credentials are stored in what process?
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Windows 操作系统的凭证存储在哪个进程中？
- en: LSASS
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: LSASS
- en: Services
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务
- en: Netstat
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Netstat
- en: credsman
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: credsman
- en: The use of Rundll32 can be observed within the Prefetch files.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Prefetch 文件中可以观察到 Rundll32 的使用。
- en: 'True'
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真实
- en: 'False'
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误
- en: What type of Windows Security Event Log is indicative of a Remote Desktop Connection?
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪种类型的 Windows 安全事件日志表明远程桌面连接？
- en: Event ID 4625 Type 3
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 事件 ID 4625 类型 3
- en: Event ID 4625 Type 10
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 事件 ID 4625 类型 10
- en: Event ID 4624 Type 3
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 事件 ID 4624 类型 3
- en: Event ID 4264 Type 10
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 事件 ID 4264 类型 10
- en: Further reading
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Refer to the following for more details about the topics covered in this chapter:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 关于本章涵盖的主题的更多详细信息，请参考以下内容：
- en: '*Cobalt Strike PowerShell* *Analysis*: [https://michaelkoczwara.medium.com/cobalt-strike-powershell-payload-analysis-eecf74b3c2f7](
    https://michaelkoczwara.medium.com/cobalt-strike-powershell-payload-analysis-eecf74b3c2f7
    )'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Cobalt Strike PowerShell* *分析*：[https://michaelkoczwara.medium.com/cobalt-strike-powershell-payload-analysis-eecf74b3c2f7](https://michaelkoczwara.medium.com/cobalt-strike-powershell-payload-analysis-eecf74b3c2f7)'
- en: '*Deobfuscating* *PowerShell*: [https://medium.com/mii-cybersec/malicious-powershell-deobfuscation-using-cyberchef-dfb9faff29f](https://medium.com/mii-cybersec/malicious-powershell-deobfuscation-using-cyberchef-dfb9faff29f
    )'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*去混淆* *PowerShell*：[https://medium.com/mii-cybersec/malicious-powershell-deobfuscation-using-cyberchef-dfb9faff29f](https://medium.com/mii-cybersec/malicious-powershell-deobfuscation-using-cyberchef-dfb9faff29f)'
- en: '*CyberChef*: [https://docs.securityonion.net/en/2.3/cyberchef.html](https://docs.securityonion.net/en/2.3/cyberchef.html)'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*CyberChef*：[https://docs.securityonion.net/en/2.3/cyberchef.html](https://docs.securityonion.net/en/2.3/cyberchef.html)'
- en: 'Part 5: Threat Intelligence and Hunting'
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五部分：威胁情报与狩猎
- en: To supplement the first three parts of the book, Part 5 delves into several
    of the specialized aspects of incident response and digital forensics that have
    a direct impact on the successful investigation of incidents. These topics include
    the analysis of malicious code, the integration of threat intelligence, and how
    to integrate various digital forensic techniques into the practice of threat hunting.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 为了补充本书的前三部分，第五部分深入探讨了与事件响应和数字取证相关的多个专业方面，这些方面直接影响事件调查的成功。这些主题包括恶意代码分析、威胁情报的整合，以及如何将各种数字取证技术融入威胁狩猎的实践中。
- en: 'This part comprises the following chapters:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 16*](B18571_16.xhtml#_idTextAnchor284)*, Malware Analysis for Incident
    Response*'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第16章*](B18571_16.xhtml#_idTextAnchor284)*，恶意软件分析与事件响应*'
- en: '[*Chapter 17*](B18571_17.xhtml#_idTextAnchor304)*, Leveraging Threat Intelligence*'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第17章*](B18571_17.xhtml#_idTextAnchor304)*，利用威胁情报*'
- en: '[*Chapter 18*](B18571_18.xhtml#_idTextAnchor323)*, Threat Hunting*'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第18章*](B18571_18.xhtml#_idTextAnchor323)*，威胁狩猎*'
