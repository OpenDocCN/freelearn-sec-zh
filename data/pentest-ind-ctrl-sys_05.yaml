- en: '*Chapter 6*: Packet Deep Dive'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第六章*：数据包深度剖析'
- en: Previously, we discussed what **Switch Port Analyzer** (**SPAN**)/**Mirror**
    and **Test Access Point** (**TAP**) are and how to configure a mirror port in
    our lab environment using Wireshark, Tcpdump, and TShark to listen to the traffic
    communicating between the engineering software and our Koyo Click **Programmable
    Logic Controller** (**PLC**). We also reviewed how **intrusion detection system**
    (**IDS**) technology utilizes SPAN/Mirror and TAP to perform **deep packet i****nspection**
    on industrial network traffic. Additionally, we touched on some methods and tactics
    that we can use to bypass IDS monitoring during a pentesting engagement.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们讨论了什么是**交换机端口分析仪**（**SPAN**）/**镜像**和**测试接入点**（**TAP**），以及如何使用 Wireshark、Tcpdump
    和 TShark 配置镜像端口，以监听工程软件与我们的 Koyo Click **可编程逻辑控制器**（**PLC**）之间的通信流量。我们还回顾了**入侵检测系统**（**IDS**）技术如何利用
    SPAN/Mirror 和 TAP 对工业网络流量进行 **深度数据包分析**。此外，我们还简要提到了一些在渗透测试过程中绕过 IDS 监控的方式和策略。
- en: In this chapter, we are going to take a closer look at the communication pathway
    between the software and the PLC, and we will be using Wireshark in greater detail
    to analyze these packets. During a pentest, capturing and analyzing traffic is
    crucial for success, as mentioned in the last chapter. Additionally, an understanding
    of the environment, assets, activities, and protocols is paramount. This chapter
    will help guide you through capturing traffic and analyzing that traffic to pull
    out key information that will guarantee success in the future.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将更深入地了解软件与 PLC 之间的通信路径，并将使用 Wireshark 更详细地分析这些数据包。在渗透测试中，捕获和分析流量对于成功至关重要，正如上一章所提到的。此外，理解环境、资产、活动和协议是至关重要的。本章将帮助你通过捕获流量并分析这些流量提取出关键信息，为未来的成功奠定基础。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: How are packets formed?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据包是如何形成的？
- en: Capturing packets on the wire
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获网络中的数据包
- en: Analyzing packets for key information
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析数据包中的关键信息
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you will need the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章你将需要以下内容：
- en: 'Wireshark/TShark installed from the following link: [https://www.wireshark.org/#download](https://www.wireshark.org/#download).'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从以下链接安装 Wireshark/TShark：[https://www.wireshark.org/#download](https://www.wireshark.org/#download)。
- en: 'Netresec Industrial PCAPs; download the three PCAP files from the following
    link, as we will be using them in the *Analyzing packets for key information*
    section: [https://www.netresec.com/?page=PCAP4SICS](https://www.netresec.com/?page=PCAP4SICS).'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Netresec 工业 PCAP 文件；请从以下链接下载三个 PCAP 文件，因为我们将在*分析数据包中的关键信息*部分使用它们：[https://www.netresec.com/?page=PCAP4SICS](https://www.netresec.com/?page=PCAP4SICS)。
- en: 'You can view this chapter''s code in action here: [https://bit.ly/3veDRlW](https://bit.ly/3veDRlW)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在此查看本章的代码实际操作：[https://bit.ly/3veDRlW](https://bit.ly/3veDRlW)
- en: How are packets formed?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据包是如何形成的？
- en: To fully comprehend what is occurring in the network, let's do a quick packet
    101\. **Packets** are byte-sized relays of data, and they carry information between
    a source asset and a destination asset. Focusing on the traffic that powers the
    internet, protocols such as **Transmission Control Protocol** (**TCP**) and **Internet
    Protocol** (**IP**) make up the well-known acronym **TCP/IP**. These relays of
    data route through a series of switches and are reassembled, allowing us to send
    emails, navigate websites, download patches for software, stream movies, monitor
    elevators, manage trains, manufacture products, produce energy, and many more
    interesting and dynamic things.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了全面理解网络中发生的事情，让我们快速了解一下数据包基础知识。**数据包**是字节大小的数据中继，它们在源资产和目标资产之间传递信息。以推动互联网流量的协议为例，**传输控制协议**（**TCP**）和**互联网协议**（**IP**）组成了著名的缩写
    **TCP/IP**。这些数据中继通过一系列交换机路由，并重新组装，使我们能够发送电子邮件、浏览网站、下载软件补丁、观看电影、监控电梯、管理火车、制造产品、生产能源，以及许多其他有趣和动态的事情。
- en: 'To fully understand packets and how they work, it is important to understand
    how they flow through the layers of the **Open Systems Interconnection** (**OSI**)
    model. In the mid-80s, the OSI model was created and adopted to set a standard
    for describing the seven layers that systems use in order to communicate over
    a network. Starting at the topmost layer and working down, you can view the list
    of layers in the following diagram:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了全面理解数据包及其工作方式，了解它们如何在**开放系统互联**（**OSI**）模型的各层之间流动至关重要。OSI模型在80年代中期被创建并采用，旨在为描述系统通过网络进行通信所使用的七个层次设定标准。从最上层开始，逐层向下，您可以在以下图表中查看各层的列表：
- en: '![Figure 6.1 – The OSI model'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.1 – OSI模型'
- en: '](image/Figure_6.01_B16321.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.01_B16321.jpg)'
- en: Figure 6.1 – The OSI model
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 – OSI模型
- en: Now, referencing the preceding diagram, we are going to break down each layer
    and quickly explain what each layer does and how it contributes to the OSI model.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，参考前面的图表，我们将逐层解析每个层，并简要说明每个层的功能以及它如何为OSI模型做出贡献。
- en: The Application layer
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用层
- en: This layer provides a user with direct interaction, such as web browsers that
    host SCADA interfaces, **Human Machine Interfaces** (**HMIs**), data historians,
    and any other such software that can be directly viewed and controlled. Protocols
    associated with this layer include **http**, **ftp**, and **dns**.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这一层为用户提供直接交互，例如承载SCADA接口的网页浏览器、**人机接口**（**HMIs**）、数据历史记录器，以及任何其他可直接查看和控制的软件。与此层相关的协议包括**http**、**ftp**和**dns**。
- en: The Presentation layer
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表示层
- en: This is the layer where data encoding, encryption, and decryption occur to allow
    data to pass from the Session layer to the Application layer.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是数据编码、加密和解密发生的层，以便数据从会话层传递到应用层。
- en: The Session layer
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 会话层
- en: When devices such as RTUs, PLCs, flow computers, controllers, **Gas Chromatographs**
    (**GCs**), servers, and other such equipment need to communicate with one another,
    *communication pipes* are created. These are called sessions. This layer oversees
    the opening of these pipes, ensuring they work and remain open while data passes
    through them.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当设备如RTU、PLC、流量计算机、控制器、**气相色谱仪**（**GCs**）、服务器和其他设备需要相互通信时，*通信通道*会被创建。这些被称为会话。该层负责打开这些通道，确保它们正常工作，并在数据通过时保持开启。
- en: The Transport layer
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传输层
- en: In the Transport layer, negotiations regarding speed, data rate, flow control,
    and error checking occur. This is the layer in which TCP and UDP function.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在传输层，会就速度、数据速率、流量控制和错误检查进行协商。TCP和UDP就是在这一层运行的。
- en: The Network layer
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络层
- en: This is the layer where routing occurs by utilizing IP addresses to ship data
    between the source and destination nodes on the network.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过利用IP地址在网络上源节点和目标节点之间传输数据的路由层。
- en: The Data Link layer
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据链路层
- en: There are two parts associated with this layer, **Logical Link Control** (**LLC**)
    and **Media Access Control** (**MAC**), which provide direct node-to-node communication.
    Network switches typically operate on this layer.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 与这一层相关的有两个部分，**逻辑链路控制**（**LLC**）和**媒体访问控制**（**MAC**），它们提供直接的节点对节点通信。网络交换机通常在这一层工作。
- en: The Physical layer
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 物理层
- en: Once again, we are back in the user's hands. This layer refers to a physical
    connection, such as a cable plugged into the Ethernet port or a wireless card
    that is communicating on the network.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 再次回到用户的手中。这一层指的是物理连接，例如插入以太网端口的电缆或在网络上通信的无线网卡。
- en: Now that we have a general idea of the OSI model and how every layer relates
    to each other, we are going to run through a general overview of how an IPv4 packet
    is structured.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们大致了解了OSI模型及各层之间的关系，接下来我们将快速概述IPv4数据包的结构。
- en: Note
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you have stuck with me this far, you are probably asking yourself "Why all
    this basic stuff?" To be honest, when I started this book, I had the idea of writing
    an introduction to industrial pentesting that would focus on people coming from
    the IT security side. As of late, I have had many conversations with friends who
    work in the automation space and are looking to break into security. Therefore,
    I am trying to close the gap for individuals who might be reading this from two
    uniquely different backgrounds. I wanted to provide a reference book to friends
    of mine who would be able to skim over the parts that they are comfortable with
    and get a general overview of topics that they will be seeing for the first time.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你跟我走到这里，你可能会问自己：“为什么要讲这些基础内容？”说实话，当我开始写这本书时，我的想法是写一本关于工业渗透测试的介绍，主要面向来自IT安全领域的人。最近，我和很多在自动化领域工作的朋友进行了对话，他们希望转行做安全。因此，我正在努力弥合这两类不同背景的读者之间的差距。我希望能为我的朋友们提供一本参考书，他们可以跳过自己已经熟悉的部分，快速了解他们第一次接触的主题。
- en: 'Okay, with that disclaimer out of the way, let''s now take a look at the structure
    of a packet. The following is the general design of an IPv4 packet:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，既然免责声明已经说完，我们现在来看一下数据包的结构。以下是一个IPv4数据包的一般设计：
- en: '![Figure 6.2 – An IPv4 packet'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.2 – 一个IPv4数据包'
- en: '](image/Figure_6.02_B16321.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.02_B16321.jpg)'
- en: Figure 6.2 – An IPv4 packet
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 – 一个IPv4数据包
- en: 'The header fields outlined in the preceding diagram are detailed as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 上图中概述的头部字段详细说明如下：
- en: '**Version**: This is always set to the number **4** as this is the latest IP
    version.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本**：这个字段始终设置为**4**，因为这是最新的IP版本。'
- en: '**IP Header Length** (**IHL**): This field conveys the length of the IP header
    in 32-bit increments.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IP头长度** (**IHL**)：这个字段表示IP头的长度，以32位为单位。'
- en: '**Type of Service** (**ToS**): This field is used to determine the quality
    or priority of the service.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务类型** (**ToS**)：这个字段用于确定服务的质量或优先级。'
- en: '**Total Length**: This field indicates the entire size of the packet in bytes.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**总长度**：这个字段表示数据包的整体大小，以字节为单位。'
- en: '**Identification**: This is used by the network to reassemble any fragmented
    packets.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标识**：网络使用这个字段来重新组装任何被分片的数据包。'
- en: '**Flags**: This field is used to control fragmentation. It consists of 3 bits;
    the first being a 0, the second is a don''t fragment bit, and the third is a more
    fragment bit.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标志**：这个字段用于控制数据包的分片。它由3位组成；第一位为0，第二位是“不要分片”位，第三位是“更多分片”位。'
- en: '**Fragment Offset**: This field establishes the position of the fragment for
    the packet.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**片段偏移**：这个字段确定数据包片段的位置。'
- en: '**Time To Live** (**TTL**): This field is used as a loop prevention mechanism.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生存时间** (**TTL**)：这个字段用作防止数据包循环的机制。'
- en: '**Protocol**: This field is used to communicate what the protocol is. TCP has
    a value of **6** and UDP has a value of **17**.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协议**：这个字段用来表示协议类型。TCP的值为**6**，UDP的值为**17**。'
- en: '**Header Checksum**: This field is used to store a checksum and is used for
    error handling.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**头部校验和**：这个字段用于存储校验和，并用于错误处理。'
- en: '**Source Address**: This field contains the source IP address.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源地址**：这个字段包含源IP地址。'
- en: '**Destination Address**: This field contains the destination IP address.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目的地址**：这个字段包含目的IP地址。'
- en: '**Options**: This field is normally not used.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选项**：这个字段通常不会使用。'
- en: '**Data**: This includes information that is to be sent to the node.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据**：这部分包含要发送给节点的信息。'
- en: That was a quick overview of how an IPv4 packet is structured, and there is
    much more information that can be researched on this specific topic. I simply
    wanted to give you a little bit of background so that when we start looking at
    frames and packets inside of Wireshark, you will understand the references and
    why details and artifacts are displayed the way they are. A direct link to Wireshark's
    reference material can be found at https://www.wireshark.org/docs/wsug_html_chunked/ChUsePacketDetailsPaneSection.html.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对IPv4数据包结构的简要概述，关于这个特定主题还有更多可以研究的信息。我只是想提供一些背景知识，这样当我们开始在Wireshark中查看帧和数据包时，你能够理解引用的内容以及为什么细节和信息以这种方式显示。Wireshark参考资料的直接链接可以在https://www.wireshark.org/docs/wsug_html_chunked/ChUsePacketDetailsPaneSection.html找到。
- en: 'Here, I took a screenshot of Wireshark''s packet details pane:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我截取了Wireshark的“数据包详情”面板的截图：
- en: '![Figure 6.3 – The packet details pane'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.3 – 数据包详情面板'
- en: '](image/Figure_6.03_B16321.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.03_B16321.jpg)'
- en: Figure 6.3 – The packet details pane
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 – 数据包详情面板
- en: 'Now, on your system, try expanding the elements as they relate to the layers
    that we discussed previously. The first element that I will expand is the **Ethernet
    II** element, as shown in the following screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在你的系统上，尝试扩展与我们先前讨论的各层相关的元素。我将扩展的第一个元素是**以太网II**元素，如下图所示：
- en: '![Figure 6.4 – The Ethernet layer'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.4 – 以太网层'
- en: '](image/Figure_6.04_B16321.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.04_B16321.jpg)'
- en: Figure 6.4 – The Ethernet layer
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 – 以太网层
- en: 'This **Ethernet II** element directly relates to the **Data Link layer**, as
    discussed earlier. We can see that we have a **Destination** MAC address, a **Source**
    MAC address, **Type**, and **Padding**. The **Organizational Unique Identifier**
    (**OUI**), which is associated with the first 3 bytes of the MAC address, is very
    interesting. Here, you can see that Wireshark is resolving the OUI and that both
    VMware and our KoyoElec PLC have been resolved. In the following screenshot, we
    can see the Network layer:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这个**以太网II**元素与前面讨论过的**数据链路层**直接相关。我们可以看到我们有**目的地**MAC地址、**源**MAC地址、**类型**和**填充**。与MAC地址的前3个字节相关的**组织唯一标识符**（**OUI**）非常有趣。在这里，你可以看到Wireshark正在解析OUI，并且VMware和我们的KoyoElec
    PLC都已解析。在以下的截图中，我们可以看到网络层：
- en: '![Figure 6.5 – The Network layer'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.5 – 网络层'
- en: '](image/Figure_6.05_B16321.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.05_B16321.jpg)'
- en: Figure 6.5 – The Network layer
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 – 网络层
- en: 'In this layer, we can directly map the IPv4 layout, which we overviewed earlier,
    to a packet that we captured moving between the Koyo Click PLC and the engineering
    software. The following is a list of the important fields in the Network layer:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一层，我们可以直接将先前概述的IPv4布局映射到我们捕获到的在Koyo Click PLC和工程软件之间传输的包。以下是网络层中重要字段的列表：
- en: '**Version: 4**'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本：4**'
- en: '**IHL: 20 bytes**'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IHL：20字节**'
- en: '**TOS: 0x00**'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TOS：0x00**'
- en: '**Total Length: 43**'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**总长度：43**'
- en: '**Identification: 0x61ff**'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标识：0x61ff**'
- en: '**Flags: 0x00**'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标志：0x00**'
- en: '**Fragment Offset: 0**'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**片偏移：0**'
- en: '**Time to Live: 128**'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生存时间：128**'
- en: '**Protocol: UDP (17)**'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协议：UDP（17）**'
- en: '**Header Checksum: 0x5354**'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**头部校验和：0x5354**'
- en: '**Source Address: 192.168.3.10**'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源地址：192.168.3.10**'
- en: '**Destination Address: 192.168.1.20**'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目的地址：192.168.1.20**'
- en: 'The next layer that we will review is the Transport layer. This is where applications
    use ports to communicate with each other. The following screenshot shows the Transport
    layer:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要审查的是传输层。在这一层，应用程序通过端口与彼此通信。以下截图显示了传输层：
- en: '![Figure 6.6 – The Transport layer'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.6 – 传输层'
- en: '](image/Figure_6.06_B16321.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.06_B16321.jpg)'
- en: Figure 6.6 – The Transport layer
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 – 传输层
- en: 'Here, we can see that **Source Port: 54782** and **Destination Port: 25425**
    are being used. Finally, we will take a look at the **Data** element/the Application
    layer of the Wireshark packet details pane. This is where the application data
    can be found. Typically, this is the most interesting section of the packet as
    things such as credentials can be found here in plaintext. The following screenshot
    represents the Application layer:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到使用了**源端口：54782**和**目的端口：25425**。最后，我们将查看Wireshark数据包详情面板中的**数据**元素/应用层。这就是可以找到应用程序数据的地方。通常，这是数据包中最有趣的部分，因为像凭证这样的内容通常以明文形式出现在这里。以下截图代表了应用层：
- en: '![Figure 6.7 – The Application layer'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.7 – 应用层'
- en: '](image/Figure_6.07_B16321.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.07_B16321.jpg)'
- en: Figure 6.7 – The Application layer
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7 – 应用层
- en: 'The data here has not been parsed out into nice elements as I am not running
    a dedicated Koyo Click protocol dissector. We can take a look at the ASCII translation
    in the packet bytes pane as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的数据尚未解析为清晰的元素，因为我没有运行专用的Koyo Click协议解析器。我们可以查看数据包字节面板中的ASCII转换，如下所示：
- en: '![Figure 6.8 – The packet bytes pane'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.8 – 数据包字节面板'
- en: '](image/Figure_6.08_B16321.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.08_B16321.jpg)'
- en: Figure 6.8 – The packet bytes pane
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8 – 数据包字节面板
- en: As you can see in the preceding screenshot, **4b 4f 50** starts the data section
    off. If you look at the ASCII conversion, you will see that it has the characters
    of **KOP**. This is a direct marker for the Koyo Click protocol.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面截图所示，**4b 4f 50**开始了数据部分。如果你查看ASCII转换，你会看到它包含了**KOP**的字符。这是Koyo Click协议的直接标记。
- en: In this section, we covered the OSI model and the packet structure. Then, we
    tied the theory of the OSI model and the packet structure back to our real-time
    captured traffic. This helped us to visualize and connect the dots between theories
    and practical applications. In the next section, we will take a closer look at
    running commands in our engineering software, capturing traffic with Wireshark
    through our mirror port, and then analyzing the **KOP protocol** in greater detail.
    This analysis will help us in our future pentests, as we can start to build and
    sharpen our skills around analyzing unknown protocols – something that you will
    most definitely encounter during your career.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了OSI模型和数据包结构。然后，我们将OSI模型和数据包结构的理论与我们实时捕获的流量进行了关联。这帮助我们在理论和实际应用之间建立了联系。在下一节中，我们将更详细地观察在我们的工程软件中运行命令，通过镜像端口使用Wireshark捕获流量，然后更深入地分析**KOP协议**。这个分析将帮助我们在未来的渗透测试中，因为我们可以开始构建并提高分析未知协议的技能——这是你在职业生涯中一定会遇到的挑战。
- en: Capturing packets on the wire
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在网络中捕获数据包
- en: In the last section, we discussed what the OSI model is and the layers that
    formulate and structure the model. We reviewed how a packet is constructed and
    then directly compared the packet structure to the communication exchange we see
    between the PLC and engineering software. In this section, we are going to dive
    deeper into Wireshark and focus on some key features that I personally use during
    my engagements to capture traffic. As a recap, in [*Chapter 5*](B16321_05_Epub_AM.xhtml#_idTextAnchor049)*,
    Span Me If You Can, w*e used Wireshark to verify that our mirror port was set
    up and configured correctly.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们讨论了OSI模型是什么，以及构成和构建该模型的各层。我们回顾了数据包是如何构建的，然后直接将数据包结构与PLC与工程软件之间的通信交换进行比较。在本节中，我们将更深入地探讨Wireshark，并关注我在参与项目时常用的一些关键功能来捕获流量。回顾一下，在[*第5章*](B16321_05_Epub_AM.xhtml#_idTextAnchor049)*《如果你能找到我》*中，我们使用Wireshark验证了我们的镜像端口是否已正确设置和配置。
- en: 'Now, I want to preface this upcoming content with two very distinct points,
    and give shout-outs to fellow security experts in the industry, as well as to
    content that I have personally leveraged in the past to hone my skills:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我想在即将到来的内容中强调两个非常重要的点，并向同行的安全专家们致敬，同时也向我个人过去曾用来提高技能的资源致谢：
- en: '[https://www.chappell-university.com/](https://www.chappell-university.com/)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.chappell-university.com/](https://www.chappell-university.com/)'
- en: '[https://tryhackme.com/room/wireshark](https://tryhackme.com/room/wireshark)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://tryhackme.com/room/wireshark](https://tryhackme.com/room/wireshark)'
- en: Both these resources provide different types of content. I have *Wireshark 101*
    by *Laura Chappell* as part of my core library, and the first link is a shout-out
    to Laura for doing such a great job at providing content that is focused on utilizing
    Wireshark for network troubleshooting and security forensics. The second link
    is to a room dedicated to Wireshark. If you want to have hands-on interactive
    training, then I strongly recommend this website and room. The site is a great
    resource for anyone in the red teaming space to utilize. I personally spend my
    time on this site brushing up on new tactics that have been shared by the community.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个资源提供了不同类型的内容。我将*Wireshark 101* by *Laura Chappell* 作为我的核心图书馆的一部分，第一个链接是向Laura致敬，她为提供专注于使用Wireshark进行网络故障排除和安全取证的内容做出了出色的贡献。第二个链接是指向一个专门讲解Wireshark的房间。如果你想进行互动式的实操训练，我强烈推荐这个网站和房间。这个网站是红队领域任何人都可以利用的一个好资源。我个人花时间在这个网站上更新由社区分享的新战术。
- en: 'With that said, let''s jump right into it. We will open Wireshark and select
    our capture interface. You should see a list of possible interfaces that you can
    utilize to capture traffic, similar to the following screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 话不多说，我们直接开始。我们将打开Wireshark并选择我们的捕获接口。你应该会看到一个可能的接口列表，类似于以下屏幕截图：
- en: '![Figure 6.9 – The Capture interface'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.9 – 捕获接口'
- en: '](image/Figure_6.09_B16321.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.09_B16321.jpg)'
- en: Figure 6.9 – The Capture interface
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.9 – 捕获接口
- en: In the preceding screenshot, I want to zero in on the **…using this filter**
    input field. This allows us to provide laser focus when capturing traffic. If
    we are specifically looking for unique hosts, a range of hosts, protocols, or
    anything specific regarding the engagement, this is where we can define a capture
    filter.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，我希望聚焦于**…使用此过滤器**输入字段。这使我们在捕获流量时能够提供精确的焦点。如果我们特别寻找唯一的主机、一系列主机、协议或与参与相关的任何特定内容，这就是我们可以定义捕获过滤器的地方。
- en: Note
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: A **capture filter** should not be confused with a **display filter**. A capture
    filter drops or ignores packets that fall outside of the filter, whereas a display
    filter simply hides the packets but allows you to maintain them for deeper analysis.
    During an engagement, if you don't have a clear idea of what you are capturing,
    I would recommend capturing everything and using display filters afterward.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**捕获过滤器**不应与**显示过滤器**混淆。捕获过滤器会丢弃或忽略超出过滤条件的数据包，而显示过滤器仅隐藏数据包但允许您保留它们以进行更深入的分析。在参与时，如果您不清楚自己正在捕获的内容，我建议捕获所有内容，然后稍后使用显示过滤器。'
- en: Capture filters
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 捕获过滤器
- en: 'Some simple examples of capture filters that can be used in the field include
    the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在现场使用的一些简单的捕获过滤器示例包括以下内容：
- en: '**host**: This will capture all communication to and from a given host. In
    this example, all communication originating from or designated to **192.168.120**
    will be captured and all other traffic will be dropped. This comes in handy if
    you have been limited to a very focused pentest from your customer. You can use
    the following command to achieve this:'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主机**: 这将捕获与给定主机相关的所有通信。在本例中，所有源自或指定为**192.168.120**的通信将被捕获，所有其他流量将被丢弃。如果您的客户对非常专注的渗透测试有限制，这将非常有用。您可以使用以下命令来实现这一点：'
- en: '**host 192.168.1.20**'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**主机 192.168.1.20**'
- en: '**net**: This will capture all communication to and from a given subnet. This
    example only captures traffic with a destination to or from the **192.168.1.0/24**
    subnet. Once again, this is very handy if your customers do not want you to engage
    with other networks or communication. This is commonly referred to as a **gray
    box or white box** penetration test, which we will go into more detail about in
    the next chapter. You can use the following command:'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络**: 这将捕获与给定子网相关的所有通信。本例仅捕获目标为或来自**192.168.1.0/24**子网的流量。如果您的客户不希望您与其他网络或通信交互，这非常方便。这通常被称为**灰盒或白盒**渗透测试，我们将在下一章节详细介绍。您可以使用以下命令：'
- en: '**net 192.168.1.0/24**'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**net 192.168.1.0/24**'
- en: '**port**: This will capture all communication to and from a given port. In
    this example, we will focus on **Modbus** traffic communicating over port **502**.
    This comes in very handy when we want to go after a specific protocol related
    to a specific process inside the facility. You can refer to the following command:'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端口**: 这将捕获与给定端口相关的所有通信。在本例中，我们将专注于通过端口**502**进行的**Modbus**流量通信。当我们想追踪特定流程内相关的特定协议时，这非常方便。您可以参考以下命令：'
- en: '**port 502**'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**端口 502**'
- en: There are far more complex methods that can be used for filtering if you want
    to specifically track **File Transfer Protocol** (**FTP**), **Network File System**
    (**NFS**), SMB file movements, TELNET, or basic HTTP authentication. Using capture
    filters allows you to focus on key packets and keep things to a manageable size
    once your goal has been achieved. Everything you can do with capture filters you
    can also do with display filters. The most notable difference between capture
    and display filters will be the file size after using the filters for the same
    duration of capture time. In very noisy networks, it only takes a few seconds
    to capture millions of packets. It is possible to capture gigabytes of data before
    ever achieving your goal. Although the trade-off is that yes, you do have small
    and easy-to-manage packet captures after using capture filters, you do lose out
    on all that other traffic that could be hidden nuggets of gold. Moving forward,
    and for the remainder of this book, we will focus on display filters. This is
    because they will capture all packets, which will allow us to perform further
    forensics on the interesting attack vectors that could go unnoticed if a capture
    filter is being used instead because capture filters drop all packets but what
    the filter is set to.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想专门跟踪**文件传输协议**（**FTP**）、**网络文件系统**（**NFS**）、SMB 文件传输、TELNET 或基本的 HTTP 认证，还有许多更复杂的过滤方法可以使用。使用捕获过滤器可以让您专注于关键数据包，并在实现目标后将数据保持在可管理的大小。一切可以通过捕获过滤器做的事情，您也可以通过显示过滤器来完成。捕获过滤器与显示过滤器之间最显著的区别是，在相同捕获时间下，文件大小的变化。在非常嘈杂的网络中，只需几秒钟就可以捕获到数百万个数据包。在达到目标之前，可能已经捕获了数GB的数据。虽然使用捕获过滤器的好处是您确实可以得到小且易于管理的数据包捕获，但您会失去其他流量中可能隐藏的宝贵信息。接下来，在本书的剩余部分，我们将专注于显示过滤器。这是因为它们能够捕获所有数据包，从而让我们对有趣的攻击向量进行进一步的取证分析。如果使用捕获过滤器，可能会错过这些向量，因为捕获过滤器只会保留符合过滤条件的数据包。
- en: Display filters
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示过滤器
- en: 'Stop your current Wireshark capture, remove your capture filter, and select
    your interface once again. This will allow us to record every packet on the network.
    Now you should be able to view your Koyo Click PLC or whatever PLC you have set
    up in your lab to communicate with the engineering software. Here is an example
    screenshot of what you should see:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 停止当前的 Wireshark 捕获，移除捕获过滤器，并重新选择您的接口。这将允许我们记录网络上的每个数据包。现在，您应该能够看到您的 Koyo Click
    PLC 或您在实验室中设置的任何 PLC 与工程软件进行通信的情况。以下是您应该看到的示例截图：
- en: '![Figure 6.10 – Communication between the PLC and the workstation'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.10 – PLC 与工作站之间的通信'
- en: '](image/Figure_6.10_B16321.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.10_B16321.jpg)'
- en: Figure 6.10 – Communication between the PLC and the workstation
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.10 – PLC 与工作站之间的通信
- en: 'I want to focus on the display filter input bar, as shown in the following
    screenshot:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我想重点介绍显示过滤器输入栏，如以下截图所示：
- en: '![Figure 6.11 – Display filter'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.11 – 显示过滤器'
- en: '](image/Figure_6.11_B16321.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.11_B16321.jpg)'
- en: Figure 6.11 – Display filter
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.11 – 显示过滤器
- en: This is where the analysis happens. For this specific section, I am going to
    discuss key filters that are used during pentesting. For this, I feel the best
    approach is to narrow in on certain protocols that are uniquely interesting to
    gain a foothold inside the **Operational Technology** (**OT**) environment. Inside
    the network, there are and will be many ICS-centric protocols, such as Modbus,
    Ethernet/IP, DNP3, S7, HART, and more. These will be covered in greater detail
    in the next chapter. However, in this section, I want to focus on some low-hanging
    fruit. These specific protocols have helped me the most in terms of carrying the
    most information on the network and when pivoting through a customer's infrastructure.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是分析发生的地方。对于这个特定部分，我将讨论在渗透测试过程中使用的关键过滤器。为此，我认为最好的方法是专注于一些特别有趣的协议，这些协议能够帮助我们在**操作技术**（**OT**）环境中获得立足点。在网络内部，会有很多以工业控制系统（ICS）为中心的协议，如
    Modbus、Ethernet/IP、DNP3、S7、HART 等。下一章将更详细地介绍这些内容。然而，在本节中，我希望关注一些容易获取的内容。这些特定协议在我的渗透测试过程中帮助最大，它们在网络中携带了大量信息，并且在穿透客户的基础设施时非常有用。
- en: HTTP
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTTP
- en: 'Many things can be gleaned from the HTTP protocol, hence the reason why everyone
    in security is pushing for the implementation of HTTPS. The fortunate part for
    us is that in the ICS space, there are SCADA systems, HMIs, RTUs, PLCs, flow computers,
    and GCs that use legacy web interfaces to serve up information and/or run control.
    There are so many gold nuggets of data that are wrapped inside the HTTP protocol.
    You can extract credentials using basic authentication, you can find more sophisticated
    forms of obfuscation and filter for digest at **http.authorization**, you can
    capture request methods, you can capture asset details and devices communicating
    across internal networks, and more. The following is a list of important HTTP
    filters:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 从HTTP协议中可以获取许多信息，这也是为什么每个人在安全领域都在推动实现HTTPS的原因。对我们来说，幸运的是，在工业控制系统（ICS）领域，有SCADA系统、HMI、RTU、PLC、流量计算机和GC等设备使用传统的Web界面来提供信息和/或执行控制。HTTP协议中包含了许多重要的数据点。你可以通过基本认证提取凭证，可以找到更复杂的混淆形式并在**http.authorization**中过滤摘要，可以捕获请求方法，可以捕获资产细节以及在内部网络中通信的设备等等。以下是一些重要的HTTP过滤器：
- en: '**http.authbasic**: This filter is used to find basic authentication, which
    we can easily extract and decode as the username and password are Base64-encoded.
    Depending on the security maturity of a company, these pieces of data are still
    readily found on older systems that haven''t been updated.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**http.authbasic**: 这个过滤器用于查找基本认证，我们可以轻松地提取并解码，因为用户名和密码是Base64编码的。根据公司的安全成熟度，这些数据仍然可以在未更新的旧系统中轻松找到。'
- en: '**http.authorization**: This is a filter that can be used to extract authorization
    and digest access for negotiated credentials and then use a tool such as *hashcat*
    or *John the Ripper* to **brute force** the credentials. We will cover brute-forcing
    passwords in the next chapter.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**http.authorization**: 这是一个可以用来提取授权和摘要访问的过滤器，用于协商凭证，然后使用*hashcat*或*John the
    Ripper*等工具进行**暴力破解**凭证。我们将在下一章中介绍如何暴力破解密码。'
- en: '**http.request.method**: This filter provides a lot of interesting information
    as it will extract all the **GET**, **POST**, **PUT**, and **DELETE** methods.
    This can be very useful if you are looking for **Application Programming Interface**
    (**API**) calls and commands.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**http.request.method**: 这个过滤器提供了很多有趣的信息，因为它会提取所有的**GET**、**POST**、**PUT**和**DELETE**方法。如果你在寻找**应用程序编程接口**（**API**）调用和命令，这将非常有用。'
- en: Story time
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 故事时间
- en: I have been involved in several airport-related engagements. This particular
    airport engagement happened to have a flat network on their public Wi-Fi; well,
    they didn't think it was flat, but for all intents and purposes, it was a flat
    network. By simply sniffing the Wi-Fi broadcast and multicast traffic, it was
    very apparent that they hadn't changed the default credentials in their gateway.
    By setting up a remote sniffing session, I was able to capture all the communication
    on the internal side of their network through their public Wi-Fi. As it turns
    out, they hadn't enabled HTTPS on their **SIEM**, and they were using one account
    to log and access all traffic going to and from their SIEM of choice. Once I had
    the credentials that were being passed encoded in Base64, a little decode and
    logging enabled me to see the entire infrastructure of the airport, including
    all the terminals, baggage handling, HVAC, people movers, lights, and more.
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我曾参与过多个与机场相关的项目。这个特定的机场项目恰好在其公共Wi-Fi上使用了一个平面网络；虽然他们并不认为这是平面网络，但就实际情况而言，它确实是一个平面网络。通过简单地嗅探Wi-Fi的广播和多播流量，很明显他们没有更改网关的默认凭证。通过设置远程嗅探会话，我能够捕获到通过他们的公共Wi-Fi传输的所有内部网络通信。结果发现，他们没有在**SIEM**上启用HTTPS，而且他们使用一个账户记录并访问所有进出其SIEM的数据。一旦我获取了这些使用Base64编码的凭证，稍微解码并启用日志记录，我就能够看到机场的整个基础设施，包括所有航站楼、行李处理、暖通空调、自动扶梯、照明等。
- en: Understanding that HTTP contains a plethora of data, it is my first go-to filter
    when using Wireshark. I want to see all the low-hanging fruit that it contains
    and document it for later exploitation. Next, I will utilize FTP as a display
    filter and take a deep dive into the data to find interesting information.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 由于HTTP包含大量数据，这是我使用Wireshark时的首选过滤器。我希望看到它所包含的所有简单数据并记录下来，以便以后利用。接下来，我将使用FTP作为显示过滤器，深入分析数据，寻找有趣的信息。
- en: FTP
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FTP
- en: As one of the most explored protocols in the ICS network, FTP has almost been
    abusively overused by automation vendors. The fact that FTP's entire premise is
    around moving files using a non-encrypted protocol means all of the things moved
    via this protocol are vulnerable to exploitation. We have vendors that use FTP
    to update firmware or programmable logic. Imagine that you had the ability to
    forge a plaintext file that could easily trigger a downgrade from a stable firmware
    version to a previous vulnerable firmware version. This can occur all because
    metaphorically speaking they didn't mention that they were trying to put a Band-Aid
    on the flu.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 ICS 网络中最常被探索的协议之一，FTP 几乎被自动化供应商滥用。事实上，FTP 的整个前提是使用非加密协议传输文件，这意味着通过该协议传输的所有内容都容易受到利用。我们有一些供应商使用
    FTP 来更新固件或可编程逻辑。试想一下，如果你能够伪造一个明文文件，轻松触发从稳定的固件版本降级到之前的脆弱固件版本。所有这些都可能发生，因为比喻来说，他们并没有提到他们只是试图为流感贴个创可贴。
- en: 'Go ahead and try using the following display filters in Wireshark:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在 Wireshark 中使用以下显示过滤器：
- en: '**ftp.request.command == "USER"**'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ftp.request.command == "USER"**'
- en: '**ftp.request.command == "PASS"**'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ftp.request.command == "PASS"**'
- en: This filter goes straight for the user and passwords that have attempted to
    access the box and failed. It finds brute-forced attempts during login with a
    tool such as *Hydra* or if we are really lucky, the true credentials of a valid
    user.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 该过滤器直接针对试图访问该主机并失败的用户和密码。它可以找到使用 *Hydra* 等工具进行的暴力破解尝试，或者如果非常幸运，可能会找到有效用户的真实凭证。
- en: '**ftp-data**: Using this filter, you can parse out files that have been transmitted
    between devices over the FTP protocol. This can be useful if you find a data share
    that contains a list of files that have sensitive information inside them.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**ftp-data**：使用此过滤器，你可以解析通过 FTP 协议在设备之间传输的文件。如果你发现一个数据共享，其中包含一些敏感信息的文件，这个过滤器会非常有用。'
- en: Knowing that FTP is still widely used in the industrial world makes it a key
    factor to analyze when capturing packets on the network. There are credentials
    and files that can be extracted and reused for potential deeper exploitations
    into the network. Who knows, this in itself could validate a completed pentest,
    as there are some companies that have lingering intellectual property residing
    inside an internal file share. Keeping with the theme of file shares, we are going
    to analyze NFS next.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 FTP 在工业领域仍然被广泛使用，因此在捕获网络数据包时，它是一个需要分析的关键因素。可以提取和重复使用凭证和文件，从而为网络中的潜在更深层次的攻击提供可能性。谁知道，这本身可能就能验证一项完成的渗透测试，因为有些公司内部的文件共享中可能存在滞留的知识产权。继续探讨文件共享的主题，我们接下来将分析
    NFS。
- en: NFS
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NFS
- en: 'This is another dynamic protocol that is utilized in the program delivery side
    of industrial automation. Writing a simple Python script that can be anonymously
    authenticated to a remote share and dropping a corrupted firmware version via
    NFS could essentially impact and *brick* all controllers in an accessible subnet.
    Disclaimer: *with great power comes great responsibility*. Even though it is possible,
    this is never an acceptable tactic during a pentest. I am simply calling out the
    fundamental flaws of some of the legacy implementations that still exist in the
    industry and that have been globally adopted. Therefore, I don''t focus solely
    on NFS as it is a firmware delivery method but also because of **root_squashing**.
    In some instances, you can find that **root_squashing** is turned off and the
    ability to quickly find this allows us to rapidly escalate privileges on a machine
    in the OT environment. Here are some of the display filters that can be used to
    narrow down on a system that might be exposed:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个在工业自动化的程序交付端使用的动态协议。编写一个简单的 Python 脚本，能够匿名认证到远程共享，并通过 NFS 上传一个损坏的固件版本，实际上可能会影响并*使*所有在可访问子网中的控制器无法工作。免责声明：*权力越大，责任越大*。尽管这是可能的，但在渗透测试中绝不应采用这种策略。我只是指出一些仍然存在于行业中的传统实现的基本缺陷，并且这些缺陷已经被全球采用。因此，我不仅关注
    NFS 作为固件交付方法，还因为**root_squashing**。在某些情况下，你可能会发现**root_squashing**已被关闭，能够迅速找到这一点可以帮助我们在
    OT 环境中的机器上快速提升权限。以下是一些可以用来缩小可能暴露的系统范围的显示过滤器：
- en: '**nfs.readdir.entry**: This filter helps pull out communications that will
    show us if there are file shares that are open to exploitation. Inside the protocol,
    in plaintext, there will be files listed that will help us map out what assets
    there are and possibly a point of entry into the system.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**nfs.readdir.entry**：此过滤器帮助提取通信内容，以显示是否存在可被利用的文件共享。在协议内部，明文显示的文件列表将帮助我们绘制出现有资产，并可能指示进入系统的入口点。'
- en: '**nfs.access_rights**: This next filter allows us to weed out the locked-down
    file shares. If we run this filter, it will extract the packets that are related
    to privileged access such as **READ, LOOKUP, MODIFY,** **EXTEND, and DELETE**.
    These are very important to identify as they will save you time and headache during
    a pentest.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**nfs.access_rights**：下一个过滤器允许我们筛选出被锁定的文件共享。如果我们运行此过滤器，它将提取与特权访问相关的数据包，如**读取（READ）、查找（LOOKUP）、修改（MODIFY）、扩展（EXTEND）**和**删除（DELETE）**。这些信息非常重要，能够帮助你节省时间并减少在渗透测试过程中遇到的麻烦。'
- en: In this section, we discussed capturing network traffic with Wireshark. We narrowed
    down what capture filters are, the benefits of using them, and how to use them
    during a pentest engagement. We also discussed the differences between capture
    filters and display filters. We then dove deeper into some key display filters
    that can help you to find valuable information inside a network and can be enabled
    for asset identification, possible exploitation avenues, privilege escalation
    avenues, and possible pivot points into the network. In the next section, we will
    put what we have just discussed into practice by using display filters on packet
    captures to analyze traffic for key information.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分中，我们讨论了如何使用Wireshark捕获网络流量。我们缩小了捕获过滤器的定义，讲解了它们的优势以及在渗透测试中的应用方法。我们还讨论了捕获过滤器与显示过滤器之间的区别。接着，我们深入探讨了一些关键的显示过滤器，它们可以帮助你发现网络内部的有价值信息，并且可以用于资产识别、潜在的利用途径、权限提升途径，以及可能的网络中转点。在下一部分，我们将通过使用显示过滤器分析数据包捕获文件，实际演练如何提取关键流量信息。
- en: Analyzing packets for key information
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析数据包中的关键信息
- en: 'In the previous section, part of our discussion was about utilizing display
    filters for protocols such as **http**, **ftp**, and **nfs**. Understanding how
    to apply these filters and extracting key data is crucial to a successful pentesting
    engagement. Additionally, understanding who is communicating with who on the network
    and quickly applying a filter to hone in on critical details are an absolute must
    and require ongoing practice to get good at performing traffic analysis. In the
    previous section, I supplied some links, and I just want to reiterate that you
    need to practice honing your skills. People refer to pentesters as cyber Samurai
    or digital ninjas: they practice daily in order to strengthen and master their
    skills. In this section, we will perform analyses on multiple packet captures
    to demonstrate how to approach a network packet capture file and extract the key
    information required to drive success to our assessment.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分，我们讨论了如何使用显示过滤器分析**http**、**ftp**和**nfs**等协议。了解如何应用这些过滤器并提取关键数据，对成功进行渗透测试至关重要。此外，理解网络中谁与谁进行通信，并迅速应用过滤器聚焦于关键信息，是必不可少的技能，并且需要不断练习，才能提高流量分析的能力。在前面的部分，我提供了一些链接，我想再次强调，你需要不断练习，提高你的技能。人们通常将渗透测试人员称为网络武士或数字忍者：他们每天都在练习，以加强并精通自己的技能。在本部分中，我们将对多个数据包捕获文件进行分析，展示如何处理网络数据包捕获文件，并提取成功进行评估所需的关键信息。
- en: Note
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: One of the key elements of success for a pentester is not just the ability to
    compromise a system but to clearly and concisely communicate where the security
    gaps are and how you leveraged them to gain access to an environment. This is
    the first time that I am really talking about this topic. But now that we are
    diving into traffic analysis and will come across lots of interesting information,
    I can't stress enough that you need to keep a running notepad to identify the
    assets seen, information captured, pivot points that can be exploited, and credentials
    sniffed on the wire. All of this information needs to be documented and made easily
    referenceable for when the time comes to turn in your final report. You will thank
    me that you started taking notes and documenting the trove of interesting information
    that you discovered on the network.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 渗透测试者成功的关键要素之一不仅仅是能够攻破系统，而是能够清晰简明地沟通安全漏洞所在，以及你是如何利用这些漏洞获取环境访问权限的。这是我第一次真正谈论这个话题。但现在我们深入到流量分析中，并会遇到很多有趣的信息，我必须强调，你需要保持一个便签本，记录下看到的资产、捕获的信息、可以被利用的枢纽点，以及在网络中嗅探到的凭证。所有这些信息都需要记录下来，并确保在需要提交最终报告时可以轻松查阅。你会感谢自己开始做笔记并记录下你在网络中发现的那些有趣的信息。
- en: 'Now, if you glance back at the *Technical requirements* section, I posted a
    link to 4SICS Geek Lounge packet captures. As a refresher, here is the link again:
    [https://www.netresec.com/?page=PCAP4SICS](https://www.netresec.com/?page=PCAP4SICS).'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你回顾一下*技术要求*部分，我发布了一个关于4SICS Geek Lounge数据包捕获的链接。为了复习，这里再次给出链接：[https://www.netresec.com/?page=PCAP4SICS](https://www.netresec.com/?page=PCAP4SICS)。
- en: Now you can utilize any PCAPs that you have. These are freely open to the industry
    and help us really put the power of display filters to work.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以利用你拥有的任何PCAP文件。这些文件在行业中是开放的，可以帮助我们真正发挥显示过滤器的强大功能。
- en: 'Go ahead and open the PCAP file labeled **4SICS-GeekLounge-151021.pcap** with
    Wireshark. You should see roughly 1.2 million packets loaded into Wireshark. I
    want you to go ahead and try the first display filter that was covered in the
    last section. With the **http.authbasic** filter, you should see an output that
    is similar to the following screenshot:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 继续用 Wireshark 打开名为**4SICS-GeekLounge-151021.pcap**的PCAP文件。你应该能看到大约120万个数据包被加载到
    Wireshark 中。我希望你能尝试上一节中提到的第一个显示过滤器。使用**http.authbasic**过滤器，你应该能看到类似以下截图的输出：
- en: '![Figure 6.12 – The http.authbasic display filter'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.12 – http.authbasic 显示过滤器'
- en: '](image/Figure_6.12_B16321.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.12_B16321.jpg)'
- en: Figure 6.12 – The http.authbasic display filter
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.12 – http.authbasic 显示过滤器
- en: 'If you notice the **Authorization: Basic YWRtaW46YWRtaW4=** field and value,
    you can utilize your command-line skills by running the following command:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你注意到**Authorization: Basic YWRtaW46YWRtaW4=**字段和值，你可以通过运行以下命令，运用你的命令行技能：'
- en: echo YWRtaW46YWRtaW4= | base64 -d
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: echo YWRtaW46YWRtaW4= | base64 -d
- en: On your command line, you will use the **admin:admin** credentials.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的命令行中，你将使用**admin:admin**凭证。
- en: If you are more of a tool type of person, then I strongly recommend *CyberChef*,
    which can be found at [https://gchq.github.io/CyberChef/](https://gchq.github.io/CyberChef/).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更倾向于使用工具，那么我强烈推荐*CyberChef*，可以在[https://gchq.github.io/CyberChef/](https://gchq.github.io/CyberChef/)找到。
- en: 'CyberChef is a great graphical tool to perform encoding/decoding, cryptography
    analyses and conversions, and more. As a very quick rundown, you have inputs,
    outputs, and recipes. In our case, we want to place the basic hash into the **Input**
    section and apply the **From Base64** recipe. In the **Output** section, you will
    see the **admin:admin** credentials, as shown in the following screenshot:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: CyberChef是一个很棒的图形工具，用于执行编码/解码、密码学分析和转换等操作。简单来说，它有输入、输出和配方。在我们的案例中，我们希望将基本哈希值放入**输入**部分并应用**From
    Base64**配方。在**输出**部分，你将看到**admin:admin**凭证，如下图所示：
- en: '![Figure 6.13 – CyberChef From Base64'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.13 – 从 Base64 解码的 CyberChef'
- en: '](image/Figure_6.13_B16321.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.13_B16321.jpg)'
- en: Figure 6.13 – CyberChef From Base64
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.13 – 从 Base64 解码的 CyberChef
- en: I personally like using the Base64 from the command line for decoding and other
    such tasks and only relying on CyberChef for more intense items such as encoding
    *Node.js reverse shells* in Base64 and injecting them into a malformed web portal,
    but I digress. Now looking through that filter, you should notice a second set
    of credentials; can you find them?
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人喜欢使用命令行中的 Base64 来进行解码和其他任务，只在进行更复杂的任务时依赖 CyberChef，比如在 Base64 中编码 *Node.js
    反向 Shell* 并将其注入到格式错误的 Web 门户中，不过我有点跑题了。现在在查看该过滤器时，你应该会注意到第二组凭证；你能找到它们吗？
- en: 'The second set of credentials will be **Authorization: Basic cm9vdDpyb290**,
    which is **root:root**.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '第二组凭证将是**Authorization: Basic cm9vdDpyb290**，即**root:root**。'
- en: 'Now, remember when I suggested taking notes earlier? Let''s review what we
    have found by running a simple display filter. We have the following:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，记得我之前建议你做笔记吗？让我们通过运行一个简单的显示过滤器来回顾一下我们发现了什么。我们得到了以下信息：
- en: Asset **192.168.2.42** is communicating over HTTP to port **80** on **192.168.88.25**
    using **admin:admin** as its credentials.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资产**192.168.2.42**通过 HTTP 与**192.168.88.25**的**80**端口进行通信，凭证为**admin:admin**。
- en: Asset **192.168.2.88** is communicating over HTTP to port **80** on **192.168.88.49**
    using **root:root** as its credentials, and the user agent indicates that it is
    possibly Ubuntu Linux x86_64 running Firefox for access.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资产**192.168.2.88**通过 HTTP 与**192.168.88.49**的**80**端口进行通信，凭证为**root:root**，用户代理表明它可能是运行
    Firefox 的 Ubuntu Linux x86_64。
- en: 'All this information is very useful. We know that there are two distinct subnets
    and that **.2** can communicate with **.88**. We know that there are two web servers
    running and that they are using an old authentication method, which leads me to
    believe that these two servers are vulnerable to further exploitation. Similarly
    to the following diagram, I also tend to draw the connections for a visual reference
    later:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些信息都非常有用。我们知道有两个不同的子网，并且**.2**可以与**.88**通信。我们知道有两个 web 服务器在运行，并且它们使用的是一种旧的认证方式，这让我相信这两个服务器可能容易受到进一步的利用。和下面的图示类似，我还习惯于绘制连接图，以便后续作为视觉参考：
- en: '![Figure 6.14 – A visual aid of the HTTP access'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.14 – HTTP 访问的视觉辅助图'
- en: '](image/Figure_6.14_B16321.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.14_B16321.jpg)'
- en: Figure 6.14 – A visual aid of the HTTP access
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.14 – HTTP 访问的视觉辅助图
- en: 'Next, we want to change up the filter from **http.authbasic** to **http.request.method**,
    and you should see around 5,800 packets with **GET**, **POST**, and **OPTIONS**
    requests. From here, I can quickly scan the **Info** column for anything super
    interesting, such as filenames, **DELETE**, **PUT**, or **POST** requests, authorization
    attempts, or basically anything that can provide more details and insights into
    the network. As we can see **POST** requests, I am going to adjust my filter to
    focus on just the **POST** requests, as shown in the following screenshot:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们想要将过滤器从**http.authbasic**更改为**http.request.method**，此时你应该会看到大约 5,800 个包含**GET**、**POST**
    和 **OPTIONS** 请求的数据包。在这里，我可以快速扫描**信息**列，寻找任何特别有趣的内容，比如文件名、**DELETE**、**PUT** 或
    **POST** 请求、授权尝试，或者任何能够提供更多网络细节和见解的内容。由于我们可以看到**POST**请求，我将调整过滤器，专注于**POST**请求，如下图所示：
- en: '![Figure 6.15 – The POST requests'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.15 – POST 请求'
- en: '](image/Figure_6.15_B16321.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.15_B16321.jpg)'
- en: Figure 6.15 – The POST requests
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.15 – POST 请求
- en: 'Now, we have managed to filter 5,800 packets down to 15\. Take a look at the
    **Info** column, as shown in the following screenshot, and check whether you can
    find anything that might be interesting:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经将 5,800 个数据包过滤为 15 个。请查看**信息**列，如下图所示，看看是否能找到任何可能感兴趣的内容：
- en: '![Figure 6.16 – The Info column'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.16 – 信息列'
- en: '](image/Figure_6.16_B16321.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.16_B16321.jpg)'
- en: Figure 6.16 – The Info column
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.16 – 信息列
- en: 'We can see from the filter that we have some interesting URLs that are being
    posted to:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从过滤器中看到有一些有趣的 URL 正在被 POST 到：
- en: '**/goform/svLogin**'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**/goform/svLogin**'
- en: '**/home.asp**'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**/home.asp**'
- en: '**/view/**'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**/view/**'
- en: 'By clicking on the first **/goform/svLogin** **POST** request and navigating
    to the **application/x-www-form-urlencoded** section, we can see the form items
    being passed in plaintext, as shown in the following screenshot:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 点击第一个**/goform/svLogin** **POST** 请求并导航到**application/x-www-form-urlencoded**部分，我们可以看到表单项以明文传递，如下图所示：
- en: '![Figure 6.17 – The /goform/svLogin POST request'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.17 – /goform/svLogin POST 请求'
- en: '](image/Figure_6.17_B16321.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.17_B16321.jpg)'
- en: Figure 6.17 – The /goform/svLogin POST request
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.17 – /goform/svLogin POST 请求
- en: 'We have now found another set of **root:dbps** credentials. Jotting down this
    information, we can now add the following:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在找到了另一组**root:dbps**凭证。记下这些信息后，我们可以继续添加以下内容：
- en: Asset **192.168.2.42** is communicating over HTTP to port **80** on asset **192.168.88.115**,
    which happens to be a Digiboard device using the **root:dbps** credentials.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资产**192.168.2.42**正在通过HTTP与**192.168.88.115**的端口**80**进行通信，后者是一个使用**root:dbps**凭证的Digiboard设备。
- en: 'The next packet would be the **POST** request for **/home.asp**. If we look
    at the packet dissection, we come across a very interesting find, that is, **Cookie**,
    as shown in the following screenshot:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个数据包将是**POST**请求，目标为**/home.asp**。如果我们查看数据包的详细信息，会发现一个非常有趣的发现，那就是**Cookie**，如下面的截图所示：
- en: '![Figure 6.18 – The Cookie field'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.18 – Cookie字段'
- en: '](image/Figure_6.18_B16321.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.18_B16321.jpg)'
- en: Figure 6.18 – The Cookie field
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.18 – Cookie字段
- en: 'Here, we can see another set of credentials:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到另一组凭证：
- en: '**AccountName508=admin**'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AccountName508=admin**'
- en: '**Password508=0192023a7bbd73250516f069df18b500**'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Password508=0192023a7bbd73250516f069df18b500**'
- en: This is very interesting as that password looks as though it is encrypted. What
    we can do is use a few different methods to determine what the encrypted type
    might be. I personally switch between **hash-identifier** and **haiti**. For this
    example, we will use **hash-identifier** and run the following command on our
    Kali instance, which we installed in [*Chapter 1*](B16321_01_Epub_AM.xhtml#_idTextAnchor013)*,
    Using Virtualization:*
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常有趣，因为该密码看起来像是加密的。我们可以使用几种不同的方法来确定它可能的加密类型。我个人在**hash-identifier**和**haiti**之间切换。对于这个例子，我们将使用**hash-identifier**，并在我们的Kali实例上运行以下命令，这是我们在[*第1章*](B16321_01_Epub_AM.xhtml#_idTextAnchor013)*，使用虚拟化中安装的：
- en: echo 0192023a7bbd73250516f069df18b500 | hash-identifier
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: echo 0192023a7bbd73250516f069df18b500 | hash-identifier
- en: 'You should get a response that is similar to the following:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会收到类似以下的响应：
- en: '![Figure 6.19 – Hash ID'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.19 – Hash ID'
- en: '](image/Figure_6.19_B16321.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.19_B16321.jpg)'
- en: Figure 6.19 – Hash ID
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.19 – Hash ID
- en: 'Now that we know that this hash is possibly an MD5 hash, we can attempt to
    crack it using a number of different tools such as *hashcat* or *John the Ripper*.
    However, I am going to run over to **crackstation.net**, load in the hash, and
    quickly check whether it has been cracked already. Low and behold, it has, as
    shown in the following screenshot:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道这个哈希值可能是MD5哈希，我们可以尝试使用多种工具进行破解，如*hashcat*或*John the Ripper*。但是，我将访问**crackstation.net**，加载哈希并快速检查它是否已被破解。果然，它已经破解了，如下图所示：
- en: '![Figure 6.20 – crackstation.net MD5'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.20 – crackstation.net MD5'
- en: '](image/Figure_6.20_B16321.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.20_B16321.jpg)'
- en: Figure 6.20 – crackstation.net MD5
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.20 – crackstation.net MD5
- en: 'Now I am going to go through each of the requests and extract the hashes and
    check them in **crackstation.net**. You should find the following results:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我将逐一检查这些请求，提取哈希值并在**crackstation.net**上检查。你应该会看到以下结果：
- en: '![Figure 6.21 – CrackStation passwords found'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.21 – CrackStation找到的密码'
- en: '](image/Figure_6.21_B16321.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.21_B16321.jpg)'
- en: Figure 6.21 – CrackStation passwords found
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.21 – CrackStation找到的密码
- en: 'The discovered credential pairs are as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 发现的凭证对如下：
- en: '**admin:admin123**'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**admin:admin123**'
- en: '**user:user123**'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**user:user123**'
- en: '**admin:123**'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**admin:123**'
- en: '**admin:ADMIN123**'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**admin:ADMIN123**'
- en: '**root:root123**'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**root:root123**'
- en: 'Now it should be noted that not all of these credentials work, and we need
    to take a deeper look into the communication between the devices to find which
    credentials are real and which ones are invalid. We can do this by highlighting
    one of the packets and right-clicking on the highlighted packet. Then, we can
    select **Follow** | **HTTP Stream**, as shown in the following screenshot:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 现在需要注意的是，并非所有这些凭证都有效，我们需要更深入地查看设备之间的通信，以找出哪些凭证是真实的，哪些是无效的。我们可以通过高亮显示其中一个数据包并右键单击它来做到这一点。然后，我们可以选择**跟踪**
    | **HTTP流**，如下面的截图所示：
- en: '![Figure 6.22 – Follow | HTTP Stream'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.22 – 跟踪 | HTTP流'
- en: '](image/Figure_6.22_B16321.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.22_B16321.jpg)'
- en: Figure 6.22 – Follow | HTTP Stream
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.22 – 跟踪 | HTTP流
- en: 'This particular received packet has the following output:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这个接收到的数据包输出如下：
- en: '![Figure 6.23 – HTTP 302 redirect'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.23 – HTTP 302重定向'
- en: '](image/Figure_6.23_B16321.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.23_B16321.jpg)'
- en: Figure 6.23 – HTTP 302 redirect
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.23 – HTTP 302重定向
- en: 'Because we see an **HTTP/1.0 302** redirect, we can safely assume the credentials
    that were supplied were incorrect. If you keep analyzing the packets in this manner,
    you should see an **HTTP/1.0 200 OK** response, which indicates that the credentials
    are valid and that the user is authenticated inside the web portal:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们看到一个 **HTTP/1.0 302** 重定向，我们可以合理推测提供的凭据是错误的。如果你继续以这种方式分析数据包，你应该会看到一个 **HTTP/1.0
    200 OK** 响应，这表示凭据是有效的，用户已经在网页门户中通过认证：
- en: '![Figure 6.24 – HTTP 200 OK'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.24 – HTTP 200 OK'
- en: '](image/Figure_6.24_B16321.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.24_B16321.jpg)'
- en: Figure 6.24 – HTTP 200 OK
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.24 – HTTP 200 OK
- en: 'Now, we should go back and update our diagram from earlier and make sure to
    update our notes. Here is what the new diagram will look like:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们应该回去更新之前的图示，并确保更新我们的笔记。以下是新图示的样子：
- en: '![Figure 6.25 – HTTP data detection'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.25 – HTTP 数据检测'
- en: '](image/Figure_6.25_B16321.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.25_B16321.jpg)'
- en: Figure 6.25 – HTTP data detection
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.25 – HTTP 数据检测
- en: 'Here, we have simply used two HTTP-specific filters, and we have already discovered
    valid credentials that will work on switch technology, allowing us to dive deeper
    into the network. There are far more extensive filters that can be used to parse
    out even larger swaths of information; I simply wanted to demonstrate how easy
    it is to obtain critical information in a very short period. In the last section,
    we will discuss the FTP protocol and display filters for this protocol. Using
    the same PCAP, update your display filter to simply find all of the FTP traffic,
    as shown in the following screenshot:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们仅使用了两个特定于 HTTP 的过滤器，并且已经发现了可以在交换机技术中使用的有效凭据，这让我们能够深入网络。还有更多广泛的过滤器可以用来解析出更大量的信息；我只是想展示在非常短的时间内获取关键信息有多么容易。在最后一节中，我们将讨论
    FTP 协议并展示该协议的显示过滤器。使用相同的 PCAP 文件，更新你的显示过滤器，仅仅查找所有的 FTP 流量，如下图所示：
- en: '![Figure 6.26 – FTP traffic'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.26 – FTP 流量'
- en: '](image/Figure_6.26_B16321.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.26_B16321.jpg)'
- en: Figure 6.26 – FTP traffic
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.26 – FTP 流量
- en: 'Selecting the top packet, which is **No.** **480883**, and looking at the packet
    information, we can quickly find very relevant and identifiable asset details,
    as shown here:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 选择第一个数据包，即 **No.** **480883**，查看数据包信息，我们可以迅速找到非常相关且易于识别的资产详情，如下所示：
- en: '![Figure 6.27 – AXIS 206 Network Camera'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.27 – AXIS 206 网络摄像头'
- en: '](image/Figure_6.27_B16321.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.27_B16321.jpg)'
- en: Figure 6.27 – AXIS 206 Network Camera
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.27 – AXIS 206 网络摄像头
- en: 'Here, we happened to find an AXIS Network Camera that is publishing an asset
    model number and version for the camera inside the packet. Now recall the chapter
    where we discussed open source intel; we should be able to open [https://www.exploit-db.com/](https://www.exploit-db.com/)
    and type **axis network camera** into the search bar. You should get the following
    results:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们碰巧找到了一个 AXIS 网络摄像头，该摄像头在数据包内发布了资产型号和版本号。现在回想一下我们讨论开源情报的章节；我们应该能够打开 [https://www.exploit-db.com/](https://www.exploit-db.com/)
    并在搜索框中输入 **axis network camera**。你应该能看到以下结果：
- en: '![Figure 6.28 – Exploit Database'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.28 – Exploit 数据库'
- en: '](image/Figure_6.28_B16321.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.28_B16321.jpg)'
- en: Figure 6.28 – Exploit Database
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.28 – Exploit 数据库
- en: 'Let''s click on the very first listing we can see, **Axis Network Camera -
    .srv to parhand Remote Code Execution (Metasploit)**. After viewing the details
    of this listing, we find that there is a nice little Metasploit module that will
    allow us to run remote execution against this camera. Excellent! Let''s add that
    to the diagram and documentation. With this new information, let''s go back to
    our notes and determine what we have now found. Here is the newly updated diagram:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们点击看到的第一个条目，**Axis 网络摄像头 - .srv 到 parhand 远程代码执行（Metasploit）**。查看该条目的详细信息后，我们发现有一个很好的
    Metasploit 模块，可以让我们对这个摄像头进行远程执行。太棒了！让我们将其添加到图示和文档中。有了这些新信息，让我们回到笔记中，看看我们现在发现了什么。以下是更新后的图示：
- en: '![Figure 6.29 – The HTTP server to the AXIS Network Camera'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.29 – HTTP 服务器与 AXIS 网络摄像头'
- en: '](image/Figure_6.29_B16321.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.29_B16321.jpg)'
- en: Figure 6.29 – The HTTP server to the AXIS Network Camera
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.29 – HTTP 服务器与 AXIS 网络摄像头
- en: Notice that by using the HTTP filter, we have discovered a web server on IP
    address **192.168.88.49** with the credentials of **root:root**. Now, after running
    the FTP display filter, we can see another device communicating with that previous
    asset. However, we now have more asset information to determine that the endpoint
    is a network camera, so we update our notes and jot down the vulnerability that
    we discovered. Open the next two PCAP files and run the same filters that we did
    on **4SICS-GeekLounge-151021.pcap** and make sure to record your findings.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，通过使用HTTP过滤器，我们发现了一个位于IP地址**192.168.88.49**的Web服务器，凭证为**root:root**。现在，在运行FTP显示过滤器后，我们可以看到另一个设备与该先前的资产进行通信。然而，我们现在有了更多的资产信息，可以确定该端点是一个网络摄像头，于是我们更新了我们的笔记，并记录下我们发现的漏洞。打开接下来的两个PCAP文件，并运行我们在**4SICS-GeekLounge-151021.pcap**上使用的相同过滤器，确保记录下你的发现。
- en: In this section, we really drilled down into display filters and the data that
    can be extracted. We used PCAPs that have been freely published on [https://www.netresec.com/?page=PCAP4SICS](https://www.netresec.com/?page=PCAP4SICS).
    We then proceeded to explore the data by utilizing various HTTP and FTP display
    filters. We were able to capture valid credentials that were being used on the
    network and identify some strategic vulnerable assets. This section helped us
    to understand why capturing and analyzing network traffic is vital to pentesting,
    as far more useful and critical data can be extracted from the wire.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们深入探讨了显示过滤器和可以提取的数据。我们使用了在[https://www.netresec.com/?page=PCAP4SICS](https://www.netresec.com/?page=PCAP4SICS)上公开发布的PCAP文件。然后，我们通过使用各种HTTP和FTP显示过滤器来探索数据。我们能够捕获正在网络上使用的有效凭证，并识别出一些具有战略意义的易受攻击资产。这一部分帮助我们理解了为什么捕获和分析网络流量对于渗透测试至关重要，因为可以从网络中提取到更多有用和关键的数据。
- en: Summary
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at how packets are formed by reviewing the OSI model
    and understanding the various layers that exist in the model. We took this one
    step further by analyzing the structure of an IPv4 packet and performing a side-by-side
    comparison of this with a packet that we captured from our lab equipment. After
    providing a better understanding of what packets are and how they are constructed,
    we went on to use Wireshark to capture these packets. We made use of the mirror
    port that we created in the previous chapter, and we discussed the differences
    between capture filters and display filters.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过回顾OSI模型并理解模型中存在的各种层次，了解了数据包的形成方式。我们进一步分析了IPv4数据包的结构，并与从实验设备上捕获的数据包进行了对比。在对数据包是什么以及它们如何构建有了更好的理解后，我们使用Wireshark捕获了这些数据包。我们利用了上一章中创建的镜像端口，并讨论了捕获过滤器和显示过滤器之间的区别。
- en: Finally, we downloaded some PCAPs from an open source ICS lab and we used Wireshark
    to analyze the traffic that we found in these packet captures. We leveraged display
    filters to narrow down key network data, such as valid credentials, operational
    web portals, and working network cameras. Understanding and practicing these techniques
    and methods will allow you to have very successful engagements in the future.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们从一个开源的ICS实验室下载了一些PCAP文件，并使用Wireshark分析了我们在这些数据包捕获中发现的流量。我们利用显示过滤器来缩小关键网络数据的范围，如有效凭证、操作中的Web门户和工作中的网络摄像头。理解并实践这些技术和方法将使你在未来的渗透测试中取得非常成功的成果。
- en: In the next chapter, we will be taking everything that we have learned so far
    and utilizing it in a lab. We will discuss multiple topics such as enumeration,
    protocol deep diving, exploitation, and privilege escalation. These are all the
    key elements you need to drive home a successful pentest.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将把迄今为止学到的所有内容应用到实验中。我们将讨论多个主题，如枚举、协议深度分析、利用和权限提升。这些都是成功进行渗透测试所需的关键要素。
