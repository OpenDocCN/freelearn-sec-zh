- en: Chapter 9. Privilege Escalation and Exploitation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。权限提升和利用
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下配方：
- en: Using WMIC to find privilege-escalation vulnerabilities
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用WMIC查找权限提升漏洞
- en: Sensitive-information gathering
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敏感信息收集
- en: Unquoted service-path exploitation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未引用的服务路径利用
- en: Service permissions issues
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务权限问题
- en: Misconfigured software installations/insecure file permissions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置错误的软件安装/不安全的文件权限
- en: Linux privilege escalation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux权限提升
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In the previous chapter, we looked at how one can exploit into the service and
    gain access to the server as a user with either a low or system privilege. In
    this chapter, we will look at how to exploit a low-privilege user to an escalated
    user - even the system user in this case. We will be covering escalation techniques
    for both Windows and Linux in this chapter. Usually in a network, when a server
    is compromised, an attacker always tries to elevate the privileges to do more
    damage. Once an attacker gains access to a higher-privilege user, he gains the
    capability to run system-level commands, steal password hashes and domain passwords,
    or even set up a backdoor and pivot the attack to target other systems in the
    network. Let us proceed to understand how these privileges are escalated.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到了如何利用服务并以低权限或系统权限用户的身份访问服务器。在本章中，我们将看看如何将低权限用户提升为提升用户 - 甚至是系统用户。本章将涵盖Windows和Linux的提升技术。通常在网络中，当服务器被攻击时，攻击者总是试图提升权限以造成更多的破坏。一旦攻击者获得了更高权限的用户访问权限，他就能够运行系统级命令，窃取密码哈希和域密码，甚至设置后门并将攻击转移到网络中的其他系统。让我们继续了解这些权限是如何提升的。
- en: Using WMIC to find privilege-escalation vulnerabilities
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用WMIC查找权限提升漏洞
- en: In this recipe, we will understand how an attacker gains an insight of escalating
    privileges through WMIC. WMIC extends WMI for operation from several command-line
    interfaces and through batch scripts. **WMI** stands for **Windows Management
    Instrumentation**. WMIC can be used, apart from several other things, to query
    the patches that are installed on the system. To better understand it provides
    a list of all the details of the security patches installed during a Windows update
    or manual patches being put into place. They usually look like (KBxxxxx).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将了解攻击者如何通过WMIC获得提升权限的洞察力。WMIC扩展了WMI，可以从几个命令行界面和批处理脚本中操作。**WMI**代表**Windows管理工具**。除了其他几件事情外，WMIC还可以用来查询系统上安装的补丁。为了更好地理解它，它提供了在Windows更新期间安装的所有安全补丁的详细信息列表，或者手动放置的补丁。它们通常看起来像（KBxxxxx）。
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To demonstrate this, we will require a Windows 7 machine with a minimum of two
    cores. If we are testing it in the VM, we can set the number of cores to 2\. The
    patch has to be missing as well for this recipe to work.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这一点，我们将需要一个至少有两个核心的Windows 7机器。如果我们在虚拟机中测试它，我们可以将核心数设置为2。此外，此配方需要缺少该补丁。
- en: How to do it...
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Open the command prompt and execute the following query:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符并执行以下查询：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_09_001.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![How to do it...](img/image_09_001.jpg)'
- en: 'We get a list of all the patches installed on the operating system. There are
    two ways to find a possible vulnerability to escalate privilege: by checking the
    KB sequence number check for the last sequence number installed and then finding
    the vulnerabilities disclosed after that patch number, or by the installed date.
    In this case, we search via the installed date and come across the following vulnerability:![How
    to do it...](img/image_09_002.jpg)'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们得到了安装在操作系统上的所有补丁的列表。有两种方法可以找到可能的提升权限漏洞：通过检查KB序列号检查最后安装的序列号，然后找到该补丁号之后披露的漏洞，或者通过安装日期。在这种情况下，我们通过安装日期搜索，发现了以下漏洞：![How
    to do it...](img/image_09_002.jpg)
- en: As we can see, the date of discovery is around **2016-04-21** and our machine
    was last updated in December 2015\. We will take this vulnerability and find its
    patch number. A quick Google search for the patch MS16-032 gives us the path number:![How
    to do it...](img/image_09_003.jpg)![How to do it...](img/image_09_004.jpg)
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如我们所看到的，发现日期大约是**2016-04-21**，而我们的机器最后更新是在2015年12月。我们将利用这个漏洞并找到其补丁号。快速搜索MS16-032的补丁号给我们带来了路径号：![How
    to do it...](img/image_09_003.jpg)![How to do it...](img/image_09_004.jpg)
- en: 'We see that the KB number is `313991`. Let us check if this is installed on
    the system. Execute the following query in the command prompt:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们看到KB号是`313991`。让我们检查一下它是否安装在系统上。在命令提示符中执行以下查询：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_09_005.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![How to do it...](img/image_09_005.jpg)'
- en: Great. There is no patch applied for it; now we will download the exploit from
    exploit-db from [https://www.exploit-db.com/exploits/39719/](https://www.exploit-db.com/exploits/39719/)
    . Once it is downloaded, rename it to `Invoke-MS16-032.ps1`.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 太好了。没有为其应用补丁；现在我们将从[https://www.exploit-db.com/exploits/39719/](https://www.exploit-db.com/exploits/39719/)下载漏洞利用。下载完成后，将其重命名为`Invoke-MS16-032.ps1`。
- en: 'Now open PowerShell and enter the following command:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开PowerShell并输入以下命令：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_09_006.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![How to do it...](img/image_09_006.jpg)'
- en: Bingo! We got a system level shell. From here onwards, the system is all ours
    to control; the post-exploitation phase can begin from here.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 太棒了！我们得到了一个系统级shell。从这里开始，系统完全由我们控制；后期利用阶段可以从这里开始。
- en: How it works...
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let us understand how this works:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解一下它是如何工作的：
- en: '`wmic qfe get Caption,Description,HotFixID,InstalledOn`: This command executes
    the WMIC interface; `qfe` stands for `Quick Fix Engineering` and `get` parameter
    allows us to set the specific columns that one wants to view'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wmic qfe get Caption,Description,HotFixID,InstalledOn`：此命令执行WMIC接口；`qfe`代表`快速修复工程`，`get`参数允许我们设置要查看的特定列'
- en: '`. ./ Invoke-MS16-032.ps1`: This command executes and loads the script'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`. ./ Invoke-MS16-032.ps1`：此命令执行并加载脚本'
- en: '`Invoke-MS16-032`: This command executes the file'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Invoke-MS16-032`：此命令执行文件'
- en: There's more...
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are other ways to escalate using the `wmic` command; this is not the only
    vulnerability one can find when querying for `wmic`. We may find more patches
    that might not have been installed. Let us now look at how sensitive information
    can be gathered to aid in escalating privileges.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`wmic`命令还有其他升级权限的方法；当查询`wmic`时，这不是唯一的漏洞。我们可能会发现更多尚未安装的补丁。现在让我们看看如何收集敏感信息以帮助提升权限。
- en: Sensitive-information gathering
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 敏感信息收集
- en: Often there are scenarios where network admins have to write scripts to automate
    the process on thousands of computers in a corporate network. Being on each and
    every system to configure them individually is a tedious and time consuming task.
    There could be situations where, because of negligence, sensitive files just keep
    lying around in the systems. Such files may contain passwords. Once we retrieve
    hashes of a compromised system we can use them to perform **PTH** (**Pass the
    Hash**) attack and gain access to different accounts found on the system. Similary,
    if users have same passwords being used over multiple systems the same hash can
    be used on another machine to gain that users access using the PTH attack. There
    are ample places we might find sensitive information that could help us elevate
    privileges.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，网络管理员必须编写脚本来自动化公司网络中数千台计算机的流程。在每台系统上进行单独配置是一项繁琐且耗时的任务。可能会出现因疏忽而导致敏感文件在系统中被遗留的情况。这些文件可能包含密码。一旦我们检索到受损系统的哈希值，我们就可以使用它们来执行**PTH**（**传递哈希**）攻击，并访问系统中找到的不同帐户。同样，如果用户在多个系统上使用相同的密码，可以使用相同的哈希值在另一台机器上执行PTH攻击来获得该用户的访问权限。我们可能会找到许多可能帮助我们提升权限的敏感信息。
- en: Getting ready
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: A Windows system, a Kali machine, and remote-shell access to the compromised
    machine is pretty much all that is needed for this recipe.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Windows系统，一个Kali机器，以及对受损机器的远程shell访问基本上就是这个配方所需要的一切。
- en: How to do it...
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Use the following command to search the file system for file names containing
    certain keywords that might reveal sensitive information:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令搜索文件系统中包含某些关键字的文件名：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示的屏幕截图：
- en: '![How to do it...](img/image_09_007.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_09_007.jpg)'
- en: 'To search for a certain file type matching a given keyword, use the following
    command:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要搜索与给定关键字匹配的特定文件类型，请使用以下命令：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示的屏幕截图：
- en: '![How to do it...](img/image_09_008.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_09_008.jpg)'
- en: 'To grep registries for keywords such as passwords, use the following command:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要搜索包含密码等关键字的注册表，请使用以下命令：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can also search for unattended or configuration files that might expose
    certain information. Have a look to see if the following files can be found on
    the system:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以搜索可能暴露某些信息的未经处理或配置文件。看看系统上是否可以找到以下文件：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'There are other sample XML files that may interest us. Have a look at them:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还有其他一些样本XML文件可能会引起我们的兴趣。看看它们：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: There's more...
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There could be files lying on the desktop, or in shared folders, containing
    passwords. There could also be schedulers with stored passwords in them. It is
    always better to scour the OS once to find sensitive information that might help
    in escalating privileges.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 桌面上可能有文件，或者在共享文件夹中，包含密码。其中可能还有包含存储密码的计划程序。最好在操作系统中搜索一次，找到可能有助于提升权限的敏感信息。
- en: Unquoted service-path exploitation
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 未引用服务路径利用
- en: In this recipe, we are going to practice exploiting and gaining the additional
    privileges of a high-level user over an unquoted service path. First, let us understand
    what an unquoted service path is. What we are talking about is the path related
    to the service binary that is specified/configured without quotes. This specifically
    works only when a low-privilege user has been given access to the system drive.
    This generally happens in corporate networks where a user is given exception to
    add files.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将练习利用和获取高级用户对未引用服务路径的额外权限。首先，让我们了解什么是未引用的服务路径。我们所说的是指定/配置的服务二进制文件路径没有加引号。这只有在低权限用户被赋予对系统驱动器的访问权限时才有效。这通常发生在公司网络中，用户被允许添加文件的例外情况。
- en: 'Let us have a look at the following screenshot to better understand this problem:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下屏幕截图，更好地理解这个问题：
- en: '![Unquoted service-path exploitation](img/image_09_009.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![未引用服务路径利用](img/image_09_009.jpg)'
- en: 'If we look at the path to the executable, it is specified without quotes. In
    this case, the execution method of Windows can be bypassed. When the path has
    a space in between, and is not specified in quotes, Windows basically executes
    in the following manner:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看一下可执行文件的路径，它是没有加引号指定的。在这种情况下，可以绕过Windows的执行方法。当路径之间有空格，并且没有用引号指定时，Windows基本上是以以下方式执行的：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the preceding situation, the Foxit Cloud Safe Update Service has the path
    mentioned without quotes, which basically means it will search for the absolute
    path and cause a scenario where the `Program.exe` file will be executed. Let us
    now perform this practical example and see how it works.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的情况下，Foxit Cloud Safe Update Service的路径是没有引号的，这基本上意味着它将搜索绝对路径，并导致`Program.exe`文件被执行的情况。现在让我们执行这个实际的例子，看看它是如何工作的。
- en: Getting ready
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to get ready, we will need Metasploit and Foxit Reader, which can be
    found at [http://filehippo.com/download_foxit/59448/](http://filehippo.com/download_foxit/59448/)
    . The vulnerable version is Foxit Reader 7.0.6.1126\. Once Foxit is installed
    we can proceed with our recipe.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做好准备，我们需要Metasploit和Foxit Reader，可以在[http://filehippo.com/download_foxit/59448/](http://filehippo.com/download_foxit/59448/)找到。易受攻击的版本是Foxit
    Reader 7.0.6.1126。一旦安装了Foxit，我们就可以继续我们的配方。
- en: How to do it...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Run a Windows cmd and type the following command:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行Windows cmd并输入以下命令：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截屏所示：
- en: '![How to do it...](img/image_09_010.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_09_010.jpg)'
- en: 'We see that the binary path is not enclosed in quotation marks. Now we will
    proceed to make a reverse shell on our Kali machine, using `msfvenom` for this
    Windows framework. Open a Kali terminal and enter the following command, replacing
    the IP you have got for your Kali and the desired port:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们看到二进制路径没有被引号括起来。现在我们将继续在我们的Kali机器上使用`msfvenom`制作一个反向shell，用于这个Windows框架。在Kali终端中输入以下命令，替换您在Kali上获得的IP和所需的端口：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截屏所示：
- en: '![How to do it...](img/image_09_011.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_09_011.jpg)'
- en: 'Start a reverse handler on your Kali machine using the following commands:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的Kali机器上使用以下命令启动一个反向处理程序：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截屏所示：
- en: '![How to do it...](img/image_09_012.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_09_012.jpg)'
- en: Now, let's get this file on the Windows system. Since we are focusing on privilege
    escalation, we will simply host it on the web server and download it on the Windows
    machine.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将这个文件放在Windows系统上。由于我们专注于权限提升，我们将简单地将其托管在Web服务器上，并在Windows机器上下载它。
- en: Once the file is downloaded, we find a way to put it in the `C` drive so that
    the path resembles `C:\Program.exe`. This is only possible if the permissions
    are set incorrectly, or a misconfigured FTP setting points the path to the `C`
    drive, or any misconfiguration that allows us to paste our code on the path:![How
    to do it...](img/image_09_013.jpg)
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦文件下载完成，我们找到一种方法将其放在`C`驱动器中，以便路径类似于`C:\Program.exe`。只有在权限设置不正确，或者错误配置的FTP设置将路径指向`C`驱动器，或者允许我们将我们的代码粘贴到路径上的任何错误配置时，才有可能实现这一点：![如何操作...](img/image_09_013.jpg)
- en: Now we will restart the Windows 7 system and wait for our handler, to see if
    we get a back-connection:![How to do it...](img/image_09_014.jpg)
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将重新启动Windows 7系统，并等待我们的处理程序，看看是否会得到一个反向连接：![如何操作...](img/image_09_014.jpg)
- en: We have successfully got a reverse connection on restart; this is due to the
    unquoted service-path vulnerability.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们成功地在重新启动时获得了一个反向连接；这是由于未加引号的服务路径漏洞。
- en: Let us check the user level we received the connection of:![How to do it...](img/image_09_015.jpg)
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们检查我们收到连接的用户级别：![如何操作...](img/image_09_015.jpg)
- en: We are in the system. Now we can perform any task on the OS without any restriction.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经进入系统。现在我们可以在操作系统上执行任何任务而不受任何限制。
- en: How it works...
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As discussed in the introduction, this is because of the execution flow of how
    Windows treats the path of service binaries. We are able to exploit any service
    that has a space in between and is not enclosed in quotation marks.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如介绍中所讨论的，这是因为Windows处理服务二进制路径的执行流程。我们能够利用任何有空格并且没有被引号括起来的服务。
- en: 'Let us understand the `msfvenom` command:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解`msfvenom`命令：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding command, `-p` stands for the payload, `LHOST` and `LPORT` are
    the payload requirements, and `-f` states the format in which the payload is to
    be generated.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述命令中，`-p`代表有效载荷，`LHOST`和`LPORT`是有效载荷的要求，`-f`表示生成有效载荷的格式。
- en: 'For more information, type the following command:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取更多信息，请输入以下命令：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There's more...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'More examples of unquoted service-path exploitation are available on exploit-db.
    Use the following Google dork command for more information:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 更多未加引号的服务路径利用示例可在exploit-db上找到。使用以下Google dork命令获取更多信息：
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: See also...
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见...
- en: Two good white papers on unquoted service-path exploitation can be found at
    [https://trustfoundry.net/practical-guide-to-exploiting-the-unquoted-service-path-vulnerability-in-windows/](https://trustfoundry.net/practical-guide-to-exploiting-the-unquoted-service-path-vulnerability-in-windows/)
    and [https://www.gracefulsecurity.com/privesc-unquoted-service-path/](https://www.gracefulsecurity.com/privesc-unquoted-service-path/)
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于未加引号的服务路径利用的两篇优秀白皮书可以在[https://trustfoundry.net/practical-guide-to-exploiting-the-unquoted-service-path-vulnerability-in-windows/](https://trustfoundry.net/practical-guide-to-exploiting-the-unquoted-service-path-vulnerability-in-windows/)和[https://www.gracefulsecurity.com/privesc-unquoted-service-path/](https://www.gracefulsecurity.com/privesc-unquoted-service-path/)找到。
- en: Service permission issues
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务权限问题
- en: In this recipe, we are going to look at how to escalate privileges on weakly
    configured services. The core area of interest here is, when a service has been
    given all access. One can imagine the horrors of giving all access on a service
    when it runs with system privileges. In this recipe, we will look at a case study
    where Windows XP was shipped with vulnerable services and it was possible to execute
    system-level commands as low-privileged users. When such a case is possible, it
    is very easy to exploit and escalate privileges to a system.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将看看如何提升弱配置服务的权限。这里的核心关注点是，当一个服务被赋予所有访问权限时。可以想象当一个服务以系统权限运行时给予所有访问权限的恐怖。在这个教程中，我们将看一个案例研究，Windows
    XP被装载了有漏洞的服务，并且可以以低权限用户的身份执行系统级命令。当这种情况可能发生时，很容易利用并提升权限到系统级。
- en: Getting ready
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this activity, we will require a Windows XP machine. We will be exploiting
    the UPnP service that runs on the Windows XP OS. **UPnP** stands for **Universal
    Plug and Play** protocol. We will also need the **AccessChk** tool which is available
    in the Windows Sysinternals suite. It can be downloaded from ([https://technet.microsoft.com/en-us/bb842062](https://technet.microsoft.com/en-us/bb842062)).
    Let's go ahead and start with our recipe.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个活动，我们将需要一台Windows XP机器。我们将利用运行在Windows XP操作系统上的UPnP服务。**UPnP**代表**通用即插即用**协议。我们还需要Windows
    Sysinternals套件中提供的**AccessChk**工具。它可以从([https://technet.microsoft.com/en-us/bb842062](https://technet.microsoft.com/en-us/bb842062))下载。让我们继续并开始我们的教程。
- en: How to do it...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Once the Windows XP machine has been started, log in with a username with user
    privileges, open the command prompt in the folder where the `accesschk.exe` file
    is located, and run the following command:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Windows XP机器启动后，使用具有用户权限的用户名登录，在`accesschk.exe`文件所在的文件夹中打开命令提示符，并运行以下命令：
- en: '[PRE15]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_09_016.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_09_016.jpg)'
- en: 'Once we know that there are two services with access rights to all the users,
    we will check the service configuration. Enter the following command in the command
    prompt:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们知道有两个服务可以访问所有用户的权限，我们将检查服务配置。在命令提示符中输入以下命令：
- en: '[PRE16]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_09_017.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_09_017.jpg)'
- en: 'We will now change the binary path of the service, since the application has
    given all access. Keep a copy of the service configuration in case we need to
    revert it back to the original state. Now enter the following command in the terminal:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将更改服务的二进制路径，因为应用程序已经给予了所有访问权限。在需要恢复到原始状态时，保留服务配置的副本。现在在终端中输入以下命令：
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_09_018.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_09_018.jpg)'
- en: 'We see that our commands have executed successfully. Now let us verify and
    restart the service by issuing the following command:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们看到我们的命令已成功执行。现在让我们通过发出以下命令来验证并重新启动服务：
- en: '[PRE18]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_09_019.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_09_019.jpg)'
- en: 'Once that is done, we see a service not responding error. However, this was
    bound to happen: since the binary path is incorrect, it will try to execute the
    binary path using the system privileges. In this scenario, it should have created
    a user. Let''s check by issuing the following command:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，我们会看到一个服务无响应的错误。然而，这是注定会发生的：由于二进制路径不正确，它将尝试使用系统权限执行二进制路径。在这种情况下，它应该创建一个用户。让我们通过发出以下命令来检查：
- en: '[PRE19]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_09_020.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_09_020.jpg)'
- en: 'The `attack` user was successfully created; however, it will be a low-level
    user. Let us rewrite the binary path. Start and stop the UPnP activity again and
    get him/her admin privileges:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`attack`用户已成功创建；然而，它将是一个低级用户。让我们重新编写二进制路径。再次启动和停止UPnP活动，并获得管理员权限：'
- en: '[PRE20]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_09_021.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_09_021.jpg)'
- en: Let's check the user details of the user attack to verify if he/she has become
    an admin user or not:![How to do it...](img/image_09_022.jpg)
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们检查用户attack的用户详细信息，以验证他/她是否已成为管理员用户：![操作步骤...](img/image_09_022.jpg)
- en: How it works...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'What we see here is a normal user being able to create a user and make that
    user an admin as well. There are usually rights given to an admin or a system
    user; the flaw exists in the `upnphost` service, as it has given all access to
    services even to a normal user. Let us analyze the commands:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里看到的是一个普通用户能够创建一个用户并将该用户也设为管理员。通常只有管理员或系统用户才有权限；漏洞存在于`upnphost`服务中，因为它已经给予了所有用户对服务的访问权限。让我们分析这些命令：
- en: '`accesschk.exe /accepteula -uwcqv "Authenticated Users" *`: The `accesschk.exe`
    file is a tool that checks the access rights of a particular service. The `/accepteula`
    command is meant to silently bypass the license-acceptance notification where
    we have to click on **I Agree** to continue.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accesschk.exe /accepteula -uwcqv "Authenticated Users" *`：`accesschk.exe`文件是一个检查特定服务访问权限的工具。`/accepteula`命令是为了在我们不得不点击**我同意**继续的许可接受通知时静默地绕过。'
- en: '`sc qc upnphost`: The `sc` is a command-line program used for communicating
    with the NT service controller and services. The `qc` command queries the configuration
    information for a service.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sc qc upnphost`：`sc`是一个用于与NT服务控制器和服务通信的命令行程序。`qc`命令查询服务的配置信息。'
- en: '`sc config upnphost binpath= "net user attack attack@123 /add"`: The `config`
    command specifies edits to the service configurations. Here we are setting the
    binary path to create a new user.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sc config upnphost binpath= "net user attack attack@123 /add"`：`config`命令指定了对服务配置的编辑。在这里，我们将二进制路径设置为创建一个新用户。'
- en: '`sc config upnphost obj= ".\LocalSystem" password= ""`: The `obj` command specifies
    the type with which the service binary is to be executed.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sc config upnphost obj= ".\LocalSystem" password= ""`：`obj`命令指定了服务二进制文件执行的类型。'
- en: There's more...
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: As we can see, there was one more service that was vulnerable. It is a good
    idea to see if privileges can be escalated via that service as well.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，还有一个服务是有漏洞的。看看是否也可以通过该服务提升权限是个好主意。
- en: Misconfigured software installations/insecure file permissions
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置错误的软件安装/不安全的文件权限
- en: In this recipe, we look at how an attacker can exploit misconfigured software
    installations and escalate privileges on the application. This is one of the classic
    examples where the installed setup is configured without considering the user's
    rights over the files and folders of the application.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将看到攻击者如何利用配置错误的软件安装并提升应用程序的权限。这是一个经典的例子，安装设置配置时没有考虑用户对应用程序文件和文件夹的权限。
- en: Getting ready
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will need to install an application called WinSMS. This
    can be downloaded from [https://www.exploit-db.com/exploits/40375/](https://www.exploit-db.com/exploits/40375/)
    and can be installed on any Windows machine running XP, Vista, 7, or 10\. For
    demo purposes, we will be using Windows 7\. Apart from this, we will need our
    Kali system up and running to take the reverse shell.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们需要安装一个名为WinSMS的应用程序。这可以从[https://www.exploit-db.com/exploits/40375/](https://www.exploit-db.com/exploits/40375/)下载，并且可以安装在运行XP、Vista、7或10的任何Windows机器上。出于演示目的，我们将使用Windows
    7。除此之外，我们还需要我们的Kali系统运行以获取反向shell。
- en: How to do it...
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到的...
- en: 'Once we install the application, we will execute our command prompt and check
    for the permissions on the folder where the file has installed itself. Enter the
    following command:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们安装了应用程序，我们将执行命令提示符并检查文件安装的文件夹的权限。输入以下命令：
- en: '[PRE21]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_09_023.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到...](img/image_09_023.jpg)'
- en: 'As we can see, there is `Everyone` access, with full rights. That is a serious
    blunder, which means that anyone who has access to the system can make modifications
    to any files in that folder. An attacker can pretty much do anything. An attacker
    can place his malicious file with the executable file of WinSMS, or even replace
    a DLL file and get his commands executed. For demo purposes, we are going to place
    a reverse shell that we will create from Kali, and wait for a connection. Let''s
    begin. On your Kali Terminal, enter the following to create a reverse `exe` shell:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如我们所看到的，有`Everyone`访问权限，并且拥有完全权限。这是一个严重的失误，这意味着任何有权访问系统的人都可以修改该文件夹中的任何文件。攻击者几乎可以做任何事情。攻击者可以将他的恶意文件与WinSMS的可执行文件放在一起，甚至替换DLL文件并执行他的命令。出于演示目的，我们将放置一个我们将从Kali创建的反向shell，并等待连接。让我们开始。在您的Kali终端中，输入以下内容创建一个反向`exe`
    shell：
- en: '[PRE22]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_09_024.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到...](img/image_09_024.jpg)'
- en: We download this executable and replace it with the `WinSMS.exe` file in the
    folder where the software is installed:![How to do it...](img/image_09_025.jpg)
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们下载这个可执行文件，并将其替换为安装软件的文件夹中的`WinSMS.exe`文件：![如何做到...](img/image_09_025.jpg)
- en: 'We now replace the WinSMS file with the newly created meterpreter file:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们用新创建的meterpreter文件替换WinSMS文件：
- en: '![How to do it...](img/image_09_026.jpg)![How to do it...](img/image_09_027.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到...](img/image_09_026.jpg)![如何做到...](img/image_09_027.jpg)'
- en: 'Now that we have placed the file, let''s open a listener on our Metasploit
    and wait to see what happens when a user executes the file. Enter the following
    commands in the terminal to set up the Metasploit listener:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经放置了文件，让我们在Metasploit上打开一个监听器，等待看看当用户执行文件时会发生什么。在终端中输入以下命令设置Metasploit监听器：
- en: '[PRE23]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_09_028.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到...](img/image_09_028.jpg)'
- en: Now all we have to do is wait for a high-level user to execute the file and,
    voilà, we will have a reverse shell of that user, complete with his privileges.
    For demo purposes, we will be executing this file as an administrator. Let's have
    a look:![How to do it...](img/image_09_029.jpg)
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们所要做的就是等待高级用户执行该文件，然后，哇，我们将获得该用户的反向shell，完整地拥有他的权限。出于演示目的，我们将以管理员身份执行此文件。让我们来看一下：![如何做到...](img/image_09_029.jpg)
- en: Now we have an escalated shell to interact with.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了一个升级的shell可以进行交互。
- en: How it works...
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The working is very simple: the attacker exploits the insecure folder permission,
    replaces the file with his malicious one, and gets it to execute while waiting
    for a reverse connection. We have already seen how `msfvenom` works in the previous
    recipes. So, once an attacker replaces the file, he will simply wait for a connection
    from a high-privilege user.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 工作原理非常简单：攻击者利用不安全的文件夹权限，替换文件为恶意文件，并在等待反向连接时执行它。我们已经在之前的示例中看到了`msfvenom`的工作原理。因此，一旦攻击者替换了文件，他将简单地等待高权限用户的连接。
- en: There's more...
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Now, we have purposely left a scenario here for the readers: in the preceding
    case, what will happen is that the file will execute. However, it won''t launch
    the application, which will obviously raise suspicion. The reader''s task is to
    use `msfvenom` to append the backdoor on the existing executable so that when
    it''s initialized, the user will have no clue what happened, as the program will
    execute.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们故意留下了一个场景给读者：在前面的情况下，文件将被执行。但是，它不会启动应用程序，这显然会引起怀疑。读者的任务是使用`msfvenom`将后门附加到现有的可执行文件上，这样当它被初始化时，用户将不会知道发生了什么，因为程序将被执行。
- en: See also...
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: 'More examples on this can be found using the dork: Insecure file permission
    site: [exploit-db.com](http://exploit-db.com)'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用dork找到更多关于此的示例：不安全的文件权限站点：[exploit-db.com](http://exploit-db.com)
- en: Linux privilege escalation
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux权限提升
- en: For this recipe, we will use a vulnerable OS called Stapler. The image can be
    downloaded from [https://www.vulnhub.com/entry/stapler-1,150/](https://www.vulnhub.com/entry/stapler-1,150/)
    and loaded on VirtualBox. In the previous chapter, we learned how to perform a
    vulnerability assessment and gain low-level or high-level access. As part of the
    exercise, the reader can perform penetration testing and gain a shell on the Stapler
    OS. We will be continuing from the point where we receive a low-privilege shell.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们将使用一个名为Stapler的易受攻击的操作系统。该镜像可以从[https://www.vulnhub.com/entry/stapler-1,150/](https://www.vulnhub.com/entry/stapler-1,150/)下载并加载到VirtualBox中。在前一章中，我们学习了如何进行漏洞评估并获得低级或高级访问权限。作为练习的一部分，读者可以进行渗透测试并在Stapler
    OS上获得shell。我们将从接收低权限shell的地方继续。
- en: Getting ready
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做好准备
- en: For this recipe, the reader needs to have a low-privilege shell on the vulnerable
    Stapler OS. In this scenario, we managed to get an SSH connection to one of the
    users by doing some information gathering and password bruting.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，读者需要在易受攻击的Stapler OS上拥有低权限shell。在这种情况下，我们通过一些信息收集和密码破解成功地获得了一个用户的SSH连接。
- en: How to do it...
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: We have logged in to the Stapler machine with the username `SHayslett`, as shown
    in the following screenshot:![How to do it...](img/image_09_030.jpg)
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经使用用户名`SHayslett`成功登录到Stapler机器，如下截图所示：![如何做…](img/image_09_030.jpg)
- en: 'We will enumerate the OS kernel version of the system. Enter the following
    command to check the version flavor and kernel details:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将枚举系统的操作系统内核版本。输入以下命令来检查版本类型和内核详细信息：
- en: '[PRE24]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果将如下截图所示：
- en: '![How to do it...](img/image_09_031.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/image_09_031.jpg)'
- en: On searching for vulnerabilities to escalate privileges, it was observed that
    Ubuntu 16.04 had vulnerabilities:![How to do it...](img/image_09_032.jpg)
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索提升权限的漏洞时，发现Ubuntu 16.04存在漏洞：![如何做…](img/image_09_032.jpg)
- en: 'The first search looks to match our kernel version and Ubuntu OS version. Let
    us proceed to download it on the machine where we want to escalate privileges.
    It can be downloaded using the following command:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一次搜索是为了匹配我们的内核版本和Ubuntu操作系统版本。让我们继续在我们想要提升权限的机器上下载它。可以使用以下命令进行下载：
- en: '[PRE25]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果将如下截图所示：
- en: '![How to do it...](img/image_09_033.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/image_09_033.jpg)'
- en: 'Now we go inside folder `39772` and deflate the `exploit.tar` file. Enter the
    following command in the terminal:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们进入`39772`文件夹并解压`exploit.tar`文件。在终端中输入以下命令：
- en: '[PRE26]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果将如下截图所示：
- en: '![How to do it...](img/image_09_034.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/image_09_034.jpg)'
- en: 'On entering the `ebpf*` folder there will be a `compile.sh` file. Let''s compile
    and execute the file:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在输入`ebpf*`文件夹后，会有一个`compile.sh`文件。让我们编译并执行该文件：
- en: '[PRE27]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果将如下截图所示：
- en: '![How to do it...](img/image_09_035.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/image_09_035.jpg)'
- en: Great. We have successfully managed to get root privileges over the system.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 很好。我们已成功地获得了系统的root权限。
- en: How it works...
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'This was a pretty simple and straightforward way of figuring out how to escalate
    privileges on a Linux machine. We went through the following steps:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单和直接的方法，用来弄清楚如何在Linux机器上提升权限。我们经历了以下步骤：
- en: Finding the OS and kernel version
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找操作系统和内核版本
- en: Searching the Internet for flaws, if any
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在互联网上搜索漏洞，如果有的话
- en: Finding a few exploits
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找到一些利用方法
- en: Cross-verifying with our available vectors
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与我们可用的向量进行交叉验证
- en: All vectors compiled, so we downloaded and executed the Kernel exploit
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有向量已编译，因此我们下载并执行了内核利用程序
- en: There are other ways to escalate Linux privileges, such as misconfigured services,
    insecure permissions, and so on.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他提升Linux权限的方法，比如配置错误的服务、不安全的权限等等。
- en: There's more...
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有…
- en: In this recipe, we looked at how to escalate privileges with a low-level user
    by leveraging the OS-based vulnerability. There are other ways to escalate privileges
    as well. The key factor to all of this is enumeration.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们看了如何通过利用基于OS的漏洞来提升低级用户的权限。还有其他提升权限的方法。所有这些的关键因素都是枚举。
- en: 'In order to find out more, check the following for vulnerabilities:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解更多，请检查以下漏洞：
- en: Operating system and kernel version
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统和内核版本
- en: Applications and services
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序和服务
- en: Under this one, we search for services running under high privileges, or even
    root, and if there are any flaws in the configuration
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个中，我们搜索正在以高权限或甚至root权限运行的服务，以及配置中是否存在任何漏洞
- en: Scheduled jobs and permission to access or edit them
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计划任务和访问或编辑它们的权限
- en: Access to confidential information or files such as `/etc/passwd` or `/etc/shadow`
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问机密信息或文件，如`/etc/passwd`或`/etc/shadow`
- en: Unattended password files
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无人值守密码文件
- en: Console history/activity history
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制台历史/活动历史
- en: Log files
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志文件
- en: See also...
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅…
- en: There is a very beautiful write-up by g0tm1lk on his website, where he has provided
    a good amount of information to understand how to enumerate and find the right
    kind of exploits:  [https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/](https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/)
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: g0tm1lk在他的网站上有一篇非常好的文章，他在其中提供了大量信息，以便了解如何枚举和找到合适的利用方法：[https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/](https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/)
