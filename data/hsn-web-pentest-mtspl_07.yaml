- en: Web Application Enumeration Using Metasploit
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit进行Web应用程序枚举
- en: 'Enumeration is a subset of footprinting, which comes under the second phase
    of **Penetration Testing Execution Standard** (**PTES**) intelligence gathering.
    The main advantage of performing enumeration is to find the attack endpoints from
    where we can launch the attacks or launch a pseudo attack payload to confirm whether
    the vulnerability exists in the same endpoint. In most penetration test cases,
    the tester spends around 60-70% of their time looking for information. This information
    is used by the tester to identify some new vulnerabilities. The better the enumeration,
    the better the result of the penetration test. In this chapter, we''ll cover the
    following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举是足迹的一个子集，属于**渗透测试执行标准**（PTES）情报收集的第二阶段。执行枚举的主要优势是找到攻击端点，从中我们可以发动攻击或发动伪攻击有效负载，以确认漏洞是否存在于同一端点。在大多数渗透测试案例中，测试人员花费大约60-70%的时间寻找信息。测试人员使用这些信息来识别一些新的漏洞。枚举越好，渗透测试的结果就越好。在本章中，我们将涵盖以下主题：
- en: Introduction to enumeration
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 枚举简介
- en: DNS enumeration
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DNS枚举
- en: Enumerating files
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 枚举文件
- en: Crawling and scraping with Metasploit
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Metasploit进行爬取和抓取
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following are the prerequisites for this chapter:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章的先决条件：
- en: Metasploit **Community Edition** (**CE**) with the web interface installed
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装了Metasploit社区版（CE）的Web界面
- en: '*nix-based systems or Microsoft Windows systems'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于*nix系统或Microsoft Windows系统
- en: Generic wordlists for the enumeration—SecLists recommended
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于枚举的通用单词列表-推荐使用SecLists
- en: Introduction to enumeration
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 枚举简介
- en: 'During the enumeration process, all of the information that we retrieved from
    the initial footprinting/reconnaissance will be in use for the first time. For
    pentesting a web application, we need to have an excellent understanding of the
    enumeration process. The better the recon and enumeration, the quicker and easier
    it is for us to find vulnerabilities in the web application. Using enumeration,
    we can find the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在枚举过程中，我们从最初的足迹/侦察中检索到的所有信息将首次使用。对于渗透测试Web应用程序，我们需要对枚举过程有很好的理解。越好的侦察和枚举，我们就越快、越容易地找到Web应用程序中的漏洞。使用枚举，我们可以找到以下内容：
- en: Hidden files and directories
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐藏文件和目录
- en: Backup and configuration files
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 备份和配置文件
- en: Subdomains and virtual hosts
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子域和虚拟主机
- en: Let's first look at DNS enumeration and how we can enumerate the DNS using Metasploit.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看一下DNS枚举以及如何使用Metasploit进行DNS枚举。
- en: DNS enumeration
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DNS枚举
- en: 'Metasploit can also be used to fetch information about a host from DNS records
    using the `dns_enum` auxiliary. This script uses DNS queries to fetch information
    such as **MX **(**mail exchanger**), **SOA **(**Start of Authority**), and **SRV **(**Service**)
    records. It can be used both inside or outside a network. Sometimes, a DNS service
    is configured to be accessible by the public; in such cases, we can use `dns_enum`
    to find internal network hosts, MAC addresses, and IP addresses. In this section,
    we will look at the usage of `dns_enum`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit还可以用于从DNS记录中获取有关主机的信息，使用`dns_enum`辅助功能。此脚本使用DNS查询来获取信息，如**MX**（邮件交换器）、**SOA**（授权起始）、**SRV**（服务）记录。它可以在网络内外使用。有时，DNS服务配置为可被公众访问；在这种情况下，我们可以使用`dns_enum`来查找内部网络主机、MAC地址和IP地址。在本节中，我们将看一下`dns_enum`的用法：
- en: 'We can use the `enum_dns` keyword in the module search option to look for the
    auxiliary:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在模块搜索选项中使用`enum_dns`关键字来查找辅助功能：
- en: '![](img/86063e91-ef33-46fa-a9a9-0f17c3ee0ddc.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/86063e91-ef33-46fa-a9a9-0f17c3ee0ddc.png)'
- en: 'Clicking on the Modules name will redirect us to the options page, as shown
    in the following screenshot:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击模块名称将重定向我们到选项页面，如下图所示：
- en: '![](img/576a1d83-d7e2-4755-a277-81b1de9fbe03.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/576a1d83-d7e2-4755-a277-81b1de9fbe03.png)'
- en: Here, we can set the target details such as the DNS servers we're using, the
    domain name, and what records we want the script to fetch.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以设置目标详细信息，例如我们正在使用的DNS服务器、域名以及我们希望脚本获取的记录。
- en: 'Clicking on Run Module will create a new task where the output will be displayed,
    as shown in the following screenshot:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“运行模块”将创建一个新任务，输出将显示在下面的截图中：
- en: '![](img/d9e200dc-743a-4632-9a6b-247cf1ae88ab.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9e200dc-743a-4632-9a6b-247cf1ae88ab.png)'
- en: Let's now look at how we can improve this even further to meet our needs and
    make the module fetch more results.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何进一步改进以满足我们的需求，并使模块获取更多结果。
- en: Going the extra mile – editing source code
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外的工作-编辑源代码
- en: 'The `enum_dns` module in Metasploit is a bit outdated (we can check the TLD
    wordlist for updates). So, let''s customize the module to meet our needs. The
    idea is to provide `enum_dns` with the **Top** **Level Domain **(**TLD**) wordlist
    and the entries will be parsed and checked to query a record. Looking at the source
    code of the auxiliary, we can see that the TLDs it looks for do not have the new
    TLDs that were launched recently:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit中的`enum_dns`模块有点过时（我们可以检查TLD单词列表是否有更新）。因此，让我们定制模块以满足我们的需求。我们的想法是为`enum_dns`提供**顶级域**（TLD）单词列表，然后解析并检查条目以查询记录。从辅助功能的源代码中可以看到，它寻找的TLD不包括最近推出的新TLD：
- en: '![](img/be14fc73-abc2-4747-a2ce-8931e95ab362.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/be14fc73-abc2-4747-a2ce-8931e95ab362.png)'
- en: 'This can be seen in *line 302*, in the `modules/auxiliary/gather/enum.dns.rb` file,
    which can also be accessed online by visiting the following link:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以在*第302行*中看到，在`modules/auxiliary/gather/enum.dns.rb`文件中，也可以通过访问以下链接在线访问：
- en: '[https://github.com/rapid7/metasploit-framework/blob/f41a90a5828c72f34f9510d911ce176c9d776f47/modules/auxiliary/gather/enum_dns.rb#L302](https://github.com/rapid7/metasploit-framework/blob/f41a90a5828c72f34f9510d911ce176c9d776f47/modules/auxiliary/gather/enum_dns.rb#L302)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/rapid7/metasploit-framework/blob/f41a90a5828c72f34f9510d911ce176c9d776f47/modules/auxiliary/gather/enum_dns.rb#L302](https://github.com/rapid7/metasploit-framework/blob/f41a90a5828c72f34f9510d911ce176c9d776f47/modules/auxiliary/gather/enum_dns.rb#L302)'
- en: 'From the preceding source code, we can see that the TLDs are stored in the `tlds[]`
    array. Let''s edit the code to update the TLDs by performing the following steps
    . The updated TLD list can be found from the **Internet Assigned Numbers Authority**
    (**IANA**) website: [http://data.iana.org/TLD/tlds-alpha-by-domain.txt](http://data.iana.org/TLD/tlds-alpha-by-domain.txt):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的源代码中，我们可以看到TLD存储在`tlds[]`数组中。让我们编辑代码以通过以下步骤更新TLD。更新的TLD列表可以从**互联网编号分配机构**（**IANA**）网站找到：[http://data.iana.org/TLD/tlds-alpha-by-domain.txt](http://data.iana.org/TLD/tlds-alpha-by-domain.txt)：
- en: 'Download the TLD file from the preceding URL and remove the first line, starting
    with `#`:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从上述URL下载TLD文件并删除以`#`开头的第一行：
- en: '![](img/f4eb972f-0849-4f3e-a127-1f9e8caf708d.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f4eb972f-0849-4f3e-a127-1f9e8caf708d.png)'
- en: 'Make a backup of the `enum_dns.rb` file using the following command before
    modifying the Metasploit module:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在修改Metasploit模块之前，使用以下命令备份`enum_dns.rb`文件：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that the Metasploit framework is installed in the `/usr/local/share` directory.
    In our case, we have named the file `enum_dns.rb.bak`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Metasploit框架安装在`/usr/local/share`目录中。在我们的情况下，我们已将文件命名为`enum_dns.rb.bak`。
- en: 'Now, open the `enum_dns.rb` file in any text editor of your choosing and go
    to line 29:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用您选择的任何文本编辑器打开`enum_dns.rb`文件并转到第29行：
- en: '![](img/4bf600d0-633b-440f-816a-696a40ce9811.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4bf600d0-633b-440f-816a-696a40ce9811.png)'
- en: 'Let''s add another register entry to the code so that we can provide our TLD
    wordlist to the Metasploit module:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们向代码添加另一个注册条目，以便我们可以将我们的TLD单词列表提供给Metasploit模块：
- en: '![](img/b8660043-be68-4f86-bfa5-e1b19d29c204.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b8660043-be68-4f86-bfa5-e1b19d29c204.png)'
- en: In this module, the TLD enumeration is disabled by default. As we can see from
    the preceding screenshot, the `ENUM_TLD` option will perform a TLD expansion by
    replacing the TLD with the IANA TLD list (old list) when set to `TRUE`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个模块中，默认情况下禁用了TLD枚举。正如我们从上面的屏幕截图中所看到的，当`ENUM_TLD`选项设置为`TRUE`时，`ENUM_TLD`选项将通过用IANA
    TLD列表（旧列表）替换TLD来执行TLD扩展。
- en: Let's search for the `ENUM_TLD` string to look for `function()`, which will
    be called when the TLD enumeration option is enabled.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们搜索`ENUM_TLD`字符串以查找`function()`，这将在启用TLD枚举选项时调用。
- en: 'As we can see from the following screenshot, the `get_tld()` function will
    be called if `ENUM_TLD` is set to `TRUE`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们从下面的屏幕截图中所看到的，如果`ENUM_TLD`设置为`TRUE`，将调用`get_tld()`函数：
- en: '![](img/0bda60f4-49f2-423f-b003-e8a81f296bc7.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0bda60f4-49f2-423f-b003-e8a81f296bc7.png)'
- en: 'Let''s now look into the `get_tld()` function:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们看看`get_tld()`函数：
- en: '![](img/b1e4ff33-bfa1-4b75-9f21-3b546f3eca9f.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b1e4ff33-bfa1-4b75-9f21-3b546f3eca9f.png)'
- en: 'Let''s now add a code section that will load the latest TLD wordlist and save
    it in the `tlds[]` array. Note that we have emptied the TLD array from the preceding
    screenshot:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们添加一个代码部分，它将加载最新的TLD单词列表并将其保存在`tlds[]`数组中。请注意，我们已经从前面的屏幕截图中清空了TLD数组：
- en: '![](img/f1fe9b4a-4d97-4b51-9ea1-788638054bde.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f1fe9b4a-4d97-4b51-9ea1-788638054bde.png)'
- en: 'What did we do here? The following table explains the functions and code structures
    used in the previous screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里做了什么？以下表格解释了前面屏幕截图中使用的函数和代码结构：
- en: '| **Code** | **Description** |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| **代码** | **描述** |'
- en: '| `tlds = []` | This declares an array. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `tlds = []` | 这声明了一个数组。 |'
- en: '| `tld_file = datastore[''TLD_WORDLIST'']` | This saves the wordlist filename
    (with location) in the `tld_file` variable. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `tld_file = datastore[''TLD_WORDLIST'']` | 这将单词列表文件名（带位置）保存在`tld_file`变量中。
    |'
- en: '| `File.readlines(tld_file).each do &#124;tld_file_loop&#124;` | This reads
    the TLD wordlist line by line. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `File.readlines(tld_file).each do &#124;tld_file_loop&#124;` | 这逐行读取TLD单词列表。
    |'
- en: '| `tlds << tld_file_loop.strip` | This strips off the `\n` from each line and
    saves it in the `tlds[]` array. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `tlds << tld_file_loop.strip` | 这会从每行中剥离`\n`并将其保存在`tlds[]`数组中。 |'
- en: 'Now, save the file and execute the `reload` command in msfconsole to reload
    the modules in the framework:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，保存文件并在msfconsole中执行`reload`命令以重新加载框架中的模块：
- en: '![](img/7934daa7-d143-4cc8-8dcf-5ed1475fc940.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7934daa7-d143-4cc8-8dcf-5ed1475fc940.png)'
- en: 'Let''s use the customized `enum_dns` module now and execute `show options`:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们使用定制的`enum_dns`模块并执行`show options`：
- en: '![](img/ce31cf36-6ceb-43ff-b29b-d5c3d62e045d.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ce31cf36-6ceb-43ff-b29b-d5c3d62e045d.png)'
- en: 'As we can see in the preceding screenshot, we have set the domain to `google.com`
    to find TLDs for Google. We have also set the `TLD_WORDLIST` option to our updated
    TLD wordlist. Let''s execute it:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们从前面的屏幕截图中所看到的，我们已经将域设置为`google.com`以查找Google的TLD。我们还将`TLD_WORDLIST`选项设置为我们更新的TLD单词列表。让我们执行它：
- en: '![](img/166f726a-4d14-44e3-a1ef-da829a0e53b7.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/166f726a-4d14-44e3-a1ef-da829a0e53b7.png)'
- en: Bingo! The updated Metasploit module now shows us the TLDs, which are provided
    to the module itself. Let's now move on to the next section where we will be enumerating
    files and directories using Metasploit.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！更新后的Metasploit模块现在向我们显示了TLD，这些TLD是提供给模块本身的。现在让我们继续下一节，在那里我们将使用Metasploit枚举文件和目录。
- en: Enumerating files
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 枚举文件
- en: 'Enumerating files and directories is one of the most important steps during
    a pentest activity. A small misconfiguration on the server''s end can lead us
    to the following files:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在渗透测试活动期间，枚举文件和目录是最重要的步骤之一。服务器端的小配置错误可能导致我们找到以下文件：
- en: Hidden files
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐藏文件
- en: Backup files
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 备份文件
- en: Config files
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文件
- en: Duplicate files
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重复文件
- en: Files containing juicy information, such as credentials files, password backup,
    error logs, access logs, and debug trace
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含重要信息的文件，例如凭据文件、密码备份、错误日志、访问日志和调试跟踪
- en: Information contained in such files can help us to plan further attacks on an
    organization.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件中包含的信息可以帮助我们计划对组织的进一步攻击。
- en: 'The following are a few auxiliaries that are available in the Metasploit framework
    that can help us to gather information:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Metasploit框架中可用的一些辅助功能，可以帮助我们收集信息：
- en: '`dir_scanner`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dir_scanner`'
- en: '`brute_dirs`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`brute_dirs`'
- en: '`prev_dir_same_name_file`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prev_dir_same_name_file`'
- en: '`dir_listing`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dir_listing`'
- en: '`copy_of_file`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`copy_of_file`'
- en: '`Backup_file`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Backup_file`'
- en: 'Here are some examples of the aforementioned auxiliaries:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述辅助功能的一些示例：
- en: 'We can look for a directory listing, as well as hidden directories, using the
    HTTP Directory Scanner module. We can use the `dir_scanner` keyword to find the
    module, as shown in the following screenshot:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用HTTP目录扫描模块来查找目录列表，以及隐藏目录。我们可以使用`dir_scanner`关键字来查找模块，如下面的屏幕截图所示：
- en: '![](img/2e16a2d3-9416-4d3b-a707-0b6244e8b5f1.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2e16a2d3-9416-4d3b-a707-0b6244e8b5f1.png)'
- en: 'Clicking on the module name will take us to the options page, where we can
    specify the target IP/domain name and port number, as shown in the following screenshot:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击模块名称将带我们到选项页面，在那里我们可以指定目标IP/域名和端口号，如下面的屏幕截图所示：
- en: '![](img/fc888306-d73b-4752-baee-d7eb52530630.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fc888306-d73b-4752-baee-d7eb52530630.png)'
- en: 'Clicking on the Run Module will create a new task and we can see the output
    in the task window:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击运行模块将创建一个新任务，我们可以在任务窗口中看到输出：
- en: '![](img/f4a4d35c-781d-4d7b-9f08-41497755b2c2.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f4a4d35c-781d-4d7b-9f08-41497755b2c2.png)'
- en: The preceding screenshot shows the different directories discovered by the script.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的屏幕截图显示了脚本发现的不同目录。
- en: 'We can also view the directory list once the scan is complete in the Hosts
    tab:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扫描完成后，我们还可以在主机标签中查看目录列表：
- en: '![](img/766de6fd-2ccd-452e-a9ac-27610d144367.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/766de6fd-2ccd-452e-a9ac-27610d144367.png)'
- en: We go to the Analysis tab and choose the host on which we performed the scan.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们转到分析标签，并选择进行扫描的主机。
- en: 'Clicking on the Vulnerabilities tab will show us a list of all the directories
    found by the auxiliaries, as shown in the following screenshot. Similarly, we
    can use other modules listed at the beginning of this section to perform further
    enumeration:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击漏洞标签将显示辅助工具找到的所有目录的列表，如下面的屏幕截图所示。同样，我们可以使用本节开头列出的其他模块来执行进一步的枚举：
- en: '![](img/3c59a87f-6d52-4f6e-9de0-5b24d8347c16.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c59a87f-6d52-4f6e-9de0-5b24d8347c16.png)'
- en: In the next section, we will be learning about crawling and scraping using web
    auxiliaries.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将学习使用web辅助程序进行爬行和抓取。
- en: Crawling and scraping with Metasploit
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit进行爬行和抓取
- en: 'Metasploit also allows us to crawl and scrape the web using auxiliaries. Scraping
    is useful when we want to grab something from the source code of a website via
    a defined pattern. It could give us information such as directories mentioned
    in comments, developer emails, and API calls being made in the background:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit还允许我们使用辅助程序进行爬行和抓取网页。当我们想要通过定义的模式从网站的源代码中抓取内容时，抓取是很有用的。它可以为我们提供诸如在注释中提到的目录、开发人员电子邮件和后台进行的API调用等信息：
- en: 'For crawling, we can use the `crawl` keyword to find the module:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于爬行，我们可以使用`crawl`关键字来查找模块：
- en: '![](img/c4c96131-923d-4396-ab2e-430e75b4bef6.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4c96131-923d-4396-ab2e-430e75b4bef6.png)'
- en: 'We will use `msfcrawler`. Clicking on the module will redirect us to the options
    page where we define our target, port, and depth. Then, click Run Module:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用`msfcrawler`。单击模块将重定向我们到选项页面，在那里我们定义我们的目标、端口和深度。然后，单击运行模块：
- en: '![](img/950e3cfa-5abf-43ed-bc6b-765f5c886045.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/950e3cfa-5abf-43ed-bc6b-765f5c886045.png)'
- en: 'A new task will be created and we will see the list of pages found in the task
    window:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将创建一个新任务，并在任务窗口中看到找到的页面列表：
- en: '![](img/0745ce83-4605-4686-bfca-be33c6b6f2b3.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0745ce83-4605-4686-bfca-be33c6b6f2b3.png)'
- en: 'Similarly, we can use the HTTP Scrape module, `auxiliary/scanner/http/scraper`,
    to scrape a web page:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，我们可以使用HTTP Scrape模块`auxiliary/scanner/http/scraper`来抓取网页：
- en: '![](img/5360b1fc-bfc6-4bf5-ac85-f15c5593368f.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5360b1fc-bfc6-4bf5-ac85-f15c5593368f.png)'
- en: The pattern field is a regex that we define to find whatever element we want.
    In our case, we want to grab everything inside the script tags on the [https://prod.packtpub.com/](https://prod.packtpub.com/) website, so
    our pattern is `<script \ type=\"text\/javascript\" \ src=\"(.*)\"><\/script>)`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 模式字段是我们定义的用于查找我们想要的任何元素的正则表达式。在我们的情况下，我们想要抓取[https://prod.packtpub.com/](https://prod.packtpub.com/)网站上脚本标记内的所有内容，所以我们的模式是`<script
    \ type=\"text\/javascript\" \ src=\"(.*)\"><\/script>)`。
- en: 'Running the module will create a new task and the auxiliary will extract all
    of the data listed in the script tags, as shown in the following screenshot:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 运行模块将创建一个新任务，辅助程序将提取脚本标记中列出的所有数据，如下面的屏幕截图所示：
- en: '![](img/80c8f359-fcf1-40a1-a4bf-ba440c0c7eec.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/80c8f359-fcf1-40a1-a4bf-ba440c0c7eec.png)'
- en: Next, let's scan for virtual hosts.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们扫描虚拟主机。
- en: Scanning virtual hosts
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扫描虚拟主机
- en: 'Metasploit also allows us to scan for virtual hosts configured on the same
    IP. Virtual hosting is the hosting of multiple domains on a single server and
    each domain name is configured with a different service. It allows a single server
    to share resources:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit还允许我们扫描配置在同一IP上的虚拟主机。虚拟主机是在单个服务器上托管多个域名，并且每个域名都配置有不同的服务。它允许单个服务器共享资源：
- en: 'We will use the Metasploit console for this module. To search for the `vhost`
    module, we can use the `vhost_scanner` keyword:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用Metasploit控制台进行此模块。要搜索`vhost`模块，我们可以使用`vhost_scanner`关键字：
- en: '![](img/532d57b5-0f46-4d7e-8d0e-68b252ada96e.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/532d57b5-0f46-4d7e-8d0e-68b252ada96e.png)'
- en: 'We set `rhosts` and `domain`. In our case, we have used the `packtpub.com` domain and
    the `151.101.21.124` IP:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们设置`rhosts`和`domain`。在我们的情况下，我们使用了`packtpub.com`域和`151.101.21.124` IP：
- en: '![](img/4dd23bf9-b5be-432d-ade0-bf7ed0f1b07f.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4dd23bf9-b5be-432d-ade0-bf7ed0f1b07f.png)'
- en: 'We run the module by typing `run`. The auxiliary will scan and all of the `vhosts`
    found will be printed:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过输入`run`来运行模块。辅助程序将进行扫描，并打印出所有找到的`vhosts`：
- en: '![](img/3c55d495-4b42-4ceb-b061-449f8d25b12b.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c55d495-4b42-4ceb-b061-449f8d25b12b.png)'
- en: This auxiliary can be used against internal networks as well to find different
    internal applications that are hosted on the same server, but are configured with
    different domains.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这个辅助工具也可以用于内部网络，以查找托管在同一服务器上但配置有不同域的不同内部应用程序。
- en: Summary
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered enumeration, which is the most important part of
    a pentesting life cycle. We started with enumerating DNS with Metasploit modules
    and then moved on to enumerating files and directories. Finally, we looked at
    crawling modules as well as the `vhost` lookup module.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了枚举，这是渗透测试生命周期中最重要的部分。我们从使用Metasploit模块枚举DNS开始，然后转向枚举文件和目录。最后，我们还研究了爬行模块以及`vhost`查找模块。
- en: In the next chapter, we'll be learning about using the web application scanning
    tool or WMAP. WMAP is a Metasploit plugin that is used to perform vulnerability
    scanning on a target web application.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用Web应用程序扫描工具或WMAP。WMAP是一个用于对目标Web应用程序进行漏洞扫描的Metasploit插件。
- en: Questions
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Can we use a custom dictionary for files and directory enumeration?
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用自定义字典来枚举文件和目录吗？
- en: Can we customize the Metasploit payload to automate all of the enumeration in
    one go?
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以定制Metasploit有效载荷以一次性自动执行所有枚举吗？
- en: Do we really need to provide a regular expression for scraping an HTTP page?
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们真的需要为抓取HTTP页面提供正则表达式吗？
- en: Further reading
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Here are a number of URLs that can be referred to for further reading:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些可以供进一步阅读的网址：
- en: '[https://www.offensive-security.com/metasploit-unleashed/](https://www.offensive-security.com/metasploit-unleashed/)'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.offensive-security.com/metasploit-unleashed/](https://www.offensive-security.com/metasploit-unleashed/)'
- en: '[https://resources.infosecinstitute.com/what-is-enumeration/](https://resources.infosecinstitute.com/what-is-enumeration/)'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://resources.infosecinstitute.com/what-is-enumeration/](https://resources.infosecinstitute.com/what-is-enumeration/)'
