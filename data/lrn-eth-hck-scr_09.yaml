- en: Network Penetration Testing, Detection, and Security
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络渗透测试、检测与安全
- en: In this chapter, we are going to learn about how to detect ARP poisoning; to
    do that, we will first look at what ARP poisoning is, how to perform the attack
    ourselves, and then how to detect it. This chapter also cover how to detect suspicious behavior
    for which we will be using the Wireshark tool.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何检测ARP中毒；为此，我们将首先了解ARP中毒是什么，如何执行该攻击，然后如何检测它。本章还涵盖了如何检测可疑行为，我们将使用Wireshark工具来实现。
- en: 'To sum up, in this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，在本章中，我们将涵盖以下主题：
- en: Detecting ARP poisoning
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测ARP中毒
- en: Detecting suspicious behavior
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测可疑行为
- en: Detecting ARP poisoning
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测ARP中毒
- en: 'Let''s take a look at how to detect ARP poisoning attacks. First of all, we
    need to gain an understanding of the ARP table. On our Windows device, which is
    the device that we always attack, we are going to run the `arp -a` command to
    list all the entries in the ARP table. Each computer has an ARP table, and that
    table associates IP addresses with MAC addresses. We have the IP address of a
    router, which is `10.0.2.1` and is associated with the MAC address `52-54-00-12-35-00`,
    as shown in the following screenshot:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下如何检测ARP中毒攻击。首先，我们需要了解ARP表。在我们的Windows设备上，这也是我们总是攻击的设备，我们将运行`arp -a`命令来列出ARP表中的所有条目。每台计算机都有一个ARP表，该表将IP地址与MAC地址关联起来。我们有一个路由器的IP地址`10.0.2.1`，它与MAC地址`52-54-00-12-35-00`相关联，如下图所示：
- en: '![](assets/dbffd319-fd45-4439-916e-9e44905f3c21.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dbffd319-fd45-4439-916e-9e44905f3c21.png)'
- en: 'ARP poisoning works via trusted requests; as you can see in the previous screenshot,
    when a request is trusted, responses are accepted by the client even if a request
    isn''t actually sent. The hacker sends a response to the client telling them that
    they are the router, which is automatically trusted and then accepted. Hacker
    will now send another response to the router, telling it that we''re the client.
    This will modify the entries in the ARP tables for both the router and the client,
    associating the hacker''s MAC address with the router''s IP address. In other
    words, the router''s MAC address is now the attacker''s MAC address. By doing
    this, the hacker will be able to read, analyze, and modify any packets flowing
    through the device, as shown in the following diagram:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: ARP中毒通过可信请求来实现；正如你在之前的截图中看到的，当一个请求被信任时，客户端会接受响应，即使实际上并未发送请求。黑客向客户端发送一个响应，告诉它他们是路由器，这个响应会被自动信任并接受。接着，黑客会向路由器发送另一个响应，告诉它我们是客户端。这将修改路由器和客户端的ARP表中的条目，将黑客的MAC地址与路由器的IP地址关联起来。换句话说，路由器的MAC地址现在是攻击者的MAC地址。通过这种方式，黑客将能够读取、分析并修改通过该设备的任何数据包，如下图所示：
- en: '![](assets/ea954b71-c2ad-41ac-b3e3-62f44e47a7d9.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ea954b71-c2ad-41ac-b3e3-62f44e47a7d9.png)'
- en: 'We''ll now run a normal ARP poisoning attack from Kali machine. Following is
    the command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将从Kali机器上执行一次正常的ARP中毒攻击。以下是命令：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When we return and execute the same command as earlier, `arp -a`, we should
    see a different MAC address, as illustrated in the following screenshot:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们返回并执行与之前相同的命令`arp -a`时，我们应该看到不同的MAC地址，如下图所示：
- en: '![](assets/210714d0-cf0b-4e77-82e4-82e56516e2b4.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/210714d0-cf0b-4e77-82e4-82e56516e2b4.png)'
- en: The MAC address for the router used to be `52-54-00-12-35-00` but that has since
    changed to `08-00-27-0b-91-66`, the MAC address of the network card the attacker
    is using.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 路由器的MAC地址曾经是`52-54-00-12-35-00`，但现在已更改为`08-00-27-0b-91-66`，这是攻击者使用的网卡的MAC地址。
- en: 'If we run `ifconfig eth0` on Kali machine, we will get the same MAC address,
    as shown in the previous screenshot:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在Kali机器上运行`ifconfig eth0`，我们将得到相同的MAC地址，如之前的截图所示：
- en: '![](assets/77725ea2-b151-4730-9404-8d47d744290e.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/77725ea2-b151-4730-9404-8d47d744290e.png)'
- en: This is the simplest way to detect ARP poisoning attacks but not the most efficient.
    To save time, it is recommend to use a tool called XArp, which performs the `ifconfig`
    command for us. XArp is available on Linux and Windows and can be downloaded from
    the web. When XArp stops an attack, the altered IP address is reverted back to
    the original value; in this case, the router's MAC address returns to the default
    address.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是检测ARP中毒攻击最简单的方法，但不是最有效的。为了节省时间，建议使用一个名为XArp的工具，它为我们执行`ifconfig`命令。XArp可在Linux和Windows上使用，并且可以从网络上下载。当XArp停止攻击时，修改过的IP地址会恢复为原始值；在这种情况下，路由器的MAC地址会恢复为默认地址。
- en: 'Running XArp triggers a similar process to the `arp -a` command, as shown in
    the following screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 XArp 会触发一个类似于`arp -a`命令的过程，如下图所示：
- en: '![](assets/0a438be2-3cad-4110-9422-600a5816bb1f.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0a438be2-3cad-4110-9422-600a5816bb1f.png)'
- en: As we can see in the previous screenshot, the XArp tool has provided us with
    an IP address and the MAC address associated with it. The tool will then automatically
    monitor these values, notifying the user of any changes or duplicates.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的截图中看到的，XArp 工具为我们提供了与之关联的 IP 地址和 MAC 地址。该工具会自动监控这些值，通知用户任何变化或重复情况。
- en: 'If we run an ARP poisoning attack similar to the one we did earlier, XArp should
    display an alert, as shown in the following screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们执行一个类似之前的 ARP 欺骗攻击，XArp 应该会显示警报，如下图所示：
- en: '![](assets/725282de-6087-4b9f-a8fb-3f6840a84160.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/725282de-6087-4b9f-a8fb-3f6840a84160.png)'
- en: The notification will convey a message that the MAC address for IP changed from
    52-54-00-12-35-00 to 08-00-27-0b-91-66.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通知将传达一条消息，表示 IP 的 MAC 地址从 52-54-00-12-35-00 更改为 08-00-27-0b-91-66。
- en: 'Once we click OK, we can see that the affected machines are the router, our
    Windows machine, and our attacker Kali machine as shown in the following screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们点击“确定”，我们可以看到受影响的机器是路由器、我们的 Windows 机器和我们的攻击者 Kali 机器，如下图所示：
- en: '![](assets/a052096d-7a4a-4003-9420-ed7dc8f43914.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a052096d-7a4a-4003-9420-ed7dc8f43914.png)'
- en: The preceding screenshot tells us that the machine at `10.0.2.15` is trying
    to perform an ARP poisoning attack because that's the value the router's MAC address
    has changed to.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的截图告诉我们，`10.0.2.15` 机器正在尝试执行 ARP 欺骗攻击，因为路由器的 MAC 地址已更改为该值。
- en: As we can see, the XArp tool is really handy because not only does it automatically
    monitor your machine, it also tell you when someone is trying to ARP poison your
    network.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，XArp 工具非常方便，因为它不仅自动监控你的机器，还会告诉你什么时候有人试图进行 ARP 欺骗攻击。
- en: Detecting suspicious behavior
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测可疑行为
- en: 'We will now look at how to use Wireshark to find suspicious activity within
    our network. Before we go any further, we need to change a few settings inside
    Wireshark; go to Edit | Preferences... under Protocols, find ARP/RARP and enable
    the option to Detect ARP request storms:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将学习如何使用 Wireshark 来查找网络中的可疑活动。在继续之前，我们需要更改 Wireshark 内的一些设置；前往 Edit | Preferences...，在
    Protocols 下找到 ARP/RARP 并启用 Detect ARP request storms 选项：
- en: '![](assets/fcb5f449-a00c-4c71-8364-468296abc0b0.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fcb5f449-a00c-4c71-8364-468296abc0b0.png)'
- en: 'This will notify us if anybody is trying to discover any devices on the network.
    Click on OK and begin starting the capture by clicking on Capture | Start:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这将通知我们如果有人试图发现网络上的设备。点击“确定”并通过点击 Capture | Start 开始捕获：
- en: '![](assets/a7205381-ed4d-4679-9935-bfcb6e0cf2f2.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a7205381-ed4d-4679-9935-bfcb6e0cf2f2.png)'
- en: 'Now we need to switch to the Kali machine and use `netdiscover`. Instead of
    ARP poisoning, we are trying to discover what devices are connected to network.
    This is done by launching the following command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要切换到 Kali 机器并使用`netdiscover`。与 ARP 欺骗不同，我们要尝试发现哪些设备连接到了网络。这是通过执行以下命令来完成的：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once we have launched the `netdiscover` command, it quickly discovered the
    available devices on the network:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们启动了`netdiscover`命令，它会迅速发现网络上的可用设备：
- en: '![](assets/0b0ee1aa-8ef5-404f-aa35-92fb1121e013.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0b0ee1aa-8ef5-404f-aa35-92fb1121e013.png)'
- en: 'Wireshark will then generate packets that include the name of a device, what
    its destination is, and what it''s inquiring from each IP address, as shown in
    the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，Wireshark 会生成包含设备名称、目标和每个 IP 地址请求内容的数据包，如下图所示：
- en: '![](assets/753acd29-f7c0-449b-8542-189bb0a8964e.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/753acd29-f7c0-449b-8542-189bb0a8964e.png)'
- en: As the results show, a device is checking to see whether any possible IP in
    a particular range exists. The device is asking for responses to be sent to `10.0.2.67`,
    so it's safe to deduce that whoever is trying to discover our connected devices
    has the IP address `10.0.2.67`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如结果所示，一台设备正在检查某个特定范围内是否存在任何可能的 IP 地址。该设备要求将响应发送到`10.0.2.67`，因此可以安全地推断，试图发现我们连接设备的人具有
    IP 地址`10.0.2.67`。
- en: 'If we go to Analyze | Expert Information, you''ll see that an ARP packet storm
    has been detected:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们进入 Analyze | Expert Information，你会看到检测到 ARP 数据包风暴：
- en: '![](assets/61cd1c36-7a8b-46f7-8ce8-72329a531b60.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/61cd1c36-7a8b-46f7-8ce8-72329a531b60.png)'
- en: This means that there is a single device sending a large number of ARP packets,
    more than likely with the aim of finding connected devices and ports.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着有一个设备正在发送大量 ARP 数据包，很可能是为了寻找连接的设备和端口。
- en: 'We are now going to perform an ARP poisoning attack using a man-in-the-middle
    framework in order to see if we get any notifications or warnings in Wireshark.
    If we go to Analyze | Expert Information again, a warning telling us that a duplicate
    IP address has been configured should appear:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将使用中间人框架执行 ARP 欺骗攻击，以查看是否会在 Wireshark 中收到任何通知或警告。如果我们再次进入 **Analyze | Expert
    Information**，应该会出现一条警告，告诉我们配置了重复的 IP 地址：
- en: '![](assets/df6b4196-6b36-4e5d-990d-c3cf2ebbd466.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/df6b4196-6b36-4e5d-990d-c3cf2ebbd466.png)'
- en: This means the IP address of the router has two different MAC addresses, which
    indicates that someone is tampering with the connections and trying to place themselves
    in the middle using an ARP poisoning attack.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着路由器的 IP 地址有两个不同的 MAC 地址，这表明有人正在篡改连接，并试图通过 ARP 欺骗攻击将自己置于中间。
- en: 'Now that we''ve explored a number of ways to detect ARP poisoning, let''s discuss
    how we can prevent those attacks and protect ourselves from them. Running the `arp
    -a` command will generate the following table:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探讨了多种检测 ARP 欺骗的方法，接下来我们来讨论如何防止这些攻击并保护自己免受攻击。运行 `arp -a` 命令将生成以下表格：
- en: '![](assets/89414b0e-6def-44cf-9a2c-d6577c09bc4a.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/89414b0e-6def-44cf-9a2c-d6577c09bc4a.png)'
- en: As you can see in the previous screenshot, the `arp -a` command monitors our
    network and will notify us of, or even prevent, any ARP poisoning attacks. Another
    way of doing this is utilizing the dynamic entries seen in the router's table.
    A dynamic type is essentially a physical address that the system will allow to
    be changed. In the previous screenshot, those values are static, which means the
    values cannot be changed. Although using static ARP tables means that configuring
    each IP address, ARP table, and MAC address manually, the system will refuse any
    outside attempts to change those values.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面截图所示，`arp -a` 命令监控我们的网络，并会通知我们，甚至防止任何 ARP 欺骗攻击。另一种方法是利用路由器表中看到的动态条目。动态类型本质上是一个物理地址，系统会允许其发生更改。在前面的截图中，这些值是静态的，这意味着这些值无法更改。尽管使用静态
    ARP 表意味着需要手动配置每个 IP 地址、ARP 表和 MAC 地址，但系统将拒绝任何外部更改这些值的尝试。
- en: The static solution is not very efficient when used in a big company or firm,
    but is an ideal solution for small companies where values are more likely to be
    configured. If a table is set up so that it's fixed and not dynamic, any ARP poisoning
    attack should fail.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 静态解决方案在大公司或企业中使用效率不高，但对于小公司来说，这是理想的解决方案，因为这些公司更可能配置这些值。如果表格被设置为固定且非动态的，那么任何
    ARP 欺骗攻击都应该失败。
- en: Summary
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at how we can detect ARP attacks on a system. First,
    we learned what an ARP attack is and launched one ourselves. Then we saw how to
    detect an ARP attack, as well as general suspicious behavior with the use of Wireshark.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了如何检测系统上的 ARP 攻击。首先，我们了解了什么是 ARP 攻击并亲自发起了一次攻击。接着，我们学习了如何使用 Wireshark
    检测 ARP 攻击以及一般可疑行为。
- en: The next few chapters we are going to look at how we can gain access to the
    victims machines for which we will be learning about the server-side and client-side
    attacks.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几章中，我们将研究如何访问受害者的机器，并学习服务器端和客户端攻击。
