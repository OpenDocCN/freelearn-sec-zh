- en: Using Automated Scanners on Web Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Web应用程序上使用自动化扫描器
- en: So far, you have learned about finding and exploiting vulnerabilities in web
    applications, mostly by manually testing one parameter or one request at a time.
    Although this is the best way to discover security flaws, especially flaws related
    to the flow of information within the application or those within the business
    logic and authorization controls, sometimes in professional penetration testing
    there are projects that due to time, scope, or volume cannot be fully addressed
    through manual testing, and which require the use of automated tools that help
    accelerate the process of finding vulnerabilities.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经学习了如何通过逐个测试参数或请求来查找和利用Web应用程序中的漏洞。尽管这是发现安全漏洞的最佳方法，特别是与应用程序内部信息流相关的漏洞或与业务逻辑和授权控制相关的漏洞，但在专业渗透测试中，有些项目由于时间、范围或数量的原因无法通过手动测试完全解决，需要使用帮助加速发现漏洞过程的自动化工具。
- en: In this chapter, we will discuss the aspects that you need to consider when
    using automated vulnerability scanners on web applications. You will also get
    to know about the scanners and fuzzers included in Kali Linux and how to use them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论在Web应用程序上使用自动化漏洞扫描器时需要考虑的方面。您还将了解Kali Linux中包含的扫描器和模糊测试工具以及如何使用它们。
- en: Considerations before using an automated scanner
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在使用自动化扫描工具之前的考虑事项
- en: '**Web application vulnerability scanners** operate a little differently than
    other types of scanners, such as OpenVAS or Nessus. The latter typically connects
    to a port on a host, obtain the type and version of the service running on such
    ports, and then check this information against their vulnerability database. On
    the contrary, a web application scanner identifies input parameters within the
    application''s pages and submits a multitude of requests probing different payloads
    on each parameter.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序漏洞扫描器的操作方式与其他类型的扫描器（如OpenVAS或Nessus）略有不同。后者通常连接到主机上的端口，获取运行在这些端口上的服务的类型和版本，然后将此信息与其漏洞数据库进行比对。相反，Web应用程序扫描器会识别应用程序页面中的输入参数，并在每个参数上提交大量请求，探测不同的有效负载。
- en: As a result of operating in this manner, an automated scan will almost certainly
    record information in the database, generate activity logs, alter existing information,
    and if the application has delete or restore functionality, it may even erase
    the database.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 由于以这种方式操作，自动化扫描几乎肯定会在数据库中记录信息，生成活动日志，修改现有信息，并且如果应用程序具有删除或恢复功能，甚至可能擦除数据库。
- en: 'The following are the key considerations a penetration tester must take into
    account before including a web vulnerability scanner as a means for testing:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是渗透测试人员在将Web漏洞扫描器作为测试手段之前必须考虑的关键因素：
- en: Check the scope and project documentation to make sure that the use of automated
    tools is allowed.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查范围和项目文档，确保允许使用自动化工具。
- en: Perform the testing in an environment set up especially for that purpose (QA,
    development, or testing). Use the production environment only under an explicit
    request by the client and let them know that there is an inherent risk of damaging
    the data.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在专门为此目的设置的环境中进行测试（QA、开发或测试）。仅在客户明确要求的情况下使用生产环境，并让他们知道存在损坏数据的固有风险。
- en: Update the tool's plugins and modules so that the results are up to date with
    the latest vulnerability disclosures and techniques.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新工具的插件和模块，以使结果与最新的漏洞披露和技术保持同步。
- en: Check the scanning tool parameters and scope before launching the scan.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在启动扫描之前检查扫描工具的参数和范围。
- en: Configure the tools to the maximum level of logging. Logs will prove to be very
    useful in case of any incident as well as for verifying the findings and reporting.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将工具配置到最高级别的日志记录。日志将在任何事件发生时非常有用，以及用于验证结果和报告。
- en: Do not leave the scanner unattended. You don't need to be staring at the progress
    bar, but you should constantly be checking how the scanner is doing and the status
    of the server being tested.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要让扫描器无人看管。您不需要盯着进度条，但应不断检查扫描器的运行情况和被测试服务器的状态。
- en: Do not rely on a single tool—sometimes different tools will obtain different
    results for the same kind of test. When one misses some vulnerabilities, another
    may find it but miss something else. Thus, if you are using automated scanners
    in the scope of testing, use more than one and also consider the use of commercial
    products such as Burp Suite Professional or Acunetix.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要依赖单一工具-有时不同的工具会对相同类型的测试产生不同的结果。当一个工具错过了一些漏洞时，另一个工具可能会找到它，但会错过其他东西。因此，如果您在测试范围内使用自动化扫描工具，请使用多个工具，并考虑使用商业产品，如Burp
    Suite Professional或Acunetix。
- en: Web application vulnerability scanners in Kali Linux
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kali Linux中的Web应用漏洞扫描器
- en: Kali Linux includes multiple tools for automated vulnerability scanning of web
    applications. We have examined some of these already, particularly the ones focused
    on specific vulnerabilities such as sqlmap for SQL injection or XSSer for Cross-Site
    Scripting (XSS).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Kali Linux包括多个用于自动化扫描Web应用程序漏洞的工具。我们已经检查了其中一些，特别是那些专注于特定漏洞的工具，如用于SQL注入的sqlmap或用于跨站脚本（XSS）的XSSer。
- en: 'Next, we will cover the basic usage of some of the more general web vulnerability
    scanners listed here:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将介绍这里列出的一些更通用的Web漏洞扫描器的基本用法：
- en: Nikto
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nikto
- en: Skipfish
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Skipfish
- en: Wapiti
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wapiti
- en: OWASP-ZAP
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP-ZAP
- en: Nikto
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nikto
- en: A long-time classic, **Nikto** is perhaps the most widely used and well-known
    web vulnerability scanner in the world. Even though its scanning operation is
    not very deep and its findings are somewhat generic (they are, by and large, related
    to outdated software versions, the use of vulnerable components, or misconfigurations
    detected by analyzing the response headers), Nikto is still a very useful tool
    because of its extensive set of tests and due to its low likelihood of breaking
    things.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 长期以来的经典之作，**Nikto**可能是世界上使用最广泛、最知名的网络漏洞扫描器。尽管它的扫描操作不是很深入，其发现结果有些通用（主要与过时的软件版本、使用的易受攻击的组件或通过分析响应头检测到的配置错误有关），但Nikto仍然是一个非常有用的工具，因为它拥有广泛的测试集和低破坏性的特点。
- en: 'Nikto is a command-line tool. In the following screenshot, `nikto` is used
    with the parameters `-h` for the host or URL that we want to scan and `-o` to
    specify the output file. The extension of the file determines the format of the
    report. Other common formats are `.csv` (for comma separated file) and `.txt`
    (for text files):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Nikto是一个命令行工具。在下面的截图中，使用`nikto`命令和参数`-h`指定要扫描的主机或URL，`-o`指定输出文件。文件的扩展名确定报告的格式。其他常见的格式有`.csv`（逗号分隔文件）和`.txt`（文本文件）：
- en: For more details and other options to use with `nikto`, run it with the `-H`
    option, for full help.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有关使用`nikto`的更多详细信息和其他选项，请使用`-H`选项运行它以获取完整的帮助。
- en: '![](img/00275.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00275.jpeg)'
- en: 'Now let''s see what the report from the previous scan looks like:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看上次扫描的报告是什么样子的：
- en: '![](img/00276.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00276.jpeg)'
- en: Based on these two screenshots, you can see that Nikto identified the server
    version and some issues in the response header. In particular, an IP address disclosed
    the lack of some protection headers, such as `X-Frame-Options` and `X-XSS-Protection`,
    and that the session cookie does not include the `HttpOnly` flag. This means that
    it can be retrieved through script code.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这两个屏幕截图，您可以看到Nikto识别出了服务器版本和响应头中的一些问题。特别是，一个IP地址泄露了一些保护头的缺失，比如`X-Frame-Options`和`X-XSS-Protection`，以及会话cookie不包含`HttpOnly`标志。这意味着它可以通过脚本代码检索到。
- en: Skipfish
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Skipfish
- en: '**Skipfish** is a very fast scanner that can help identify vulnerabilities
    like the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**Skipfish**是一个非常快速的扫描器，可以帮助识别以下漏洞：'
- en: Cross-Site Scripting
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨站脚本攻击
- en: SQL injection
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL注入
- en: Command injection
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令注入
- en: XML/XPath injection
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XML/XPath注入
- en: Directory traversal and file inclusions
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目录遍历和文件包含
- en: Directory listing
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目录列表
- en: 'According to its Google *Code* page ([http://code.google.com/p/skipfish/](http://code.google.com/p/skipfish/)):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 根据其Google *Code*页面（[http://code.google.com/p/skipfish/](http://code.google.com/p/skipfish/)）：
- en: Skipfish is an active web application security reconnaissance tool. It prepares
    an interactive site map for the targeted site by carrying out a recursive crawl
    and dictionary-based probes. The resulting map is then annotated with the output
    from a number of active (but hopefully non-disruptive) security checks. The final
    report generated by the tool is meant to serve as a foundation for professional
    web application security assessments.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Skipfish是一款主动的网络应用安全侦察工具。它通过递归爬行和基于字典的探测来为目标站点准备一个交互式站点地图。然后，该地图会被一些主动的（但希望不会造成破坏的）安全检查的输出进行注释。该工具生成的最终报告旨在作为专业网络应用安全评估的基础。
- en: 'The use of Skipfish is very straightforward. You just need to provide the URL
    to be scanned as a parameter. Optionally, you can add the output file and fine-tune
    the scan. To run Skipfish over the WackoPicko application in the test VM and generate
    an HTML report, use the following command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Skipfish非常简单。您只需要提供要扫描的URL作为参数。可选地，您可以添加输出文件并对扫描进行微调。要在测试虚拟机中运行Skipfish并生成HTML报告，请使用以下命令：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `-o` option indicates the directory where the report is to be stored. The
    `-I` option tells Skipfish only to scan URLs that include the string `WackoPicko`,
    excluding the rest of the applications in the VM. The last parameter is the URL
    where you want the scanning to start.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`-o`选项指示报告存储的目录。`-I`选项告诉Skipfish只扫描包含字符串`WackoPicko`的URL，排除虚拟机中的其他应用程序。最后一个参数是您希望扫描开始的URL。'
- en: 'When the command is launched, an information screen appears. You can press
    any key or wait for 60 seconds for the scan to start. Once the scan starts, the
    following status screen is displayed:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当启动命令时，会出现一个信息屏幕。您可以按任意键或等待60秒开始扫描。一旦扫描开始，将显示以下状态屏幕：
- en: '![](img/00277.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00277.jpeg)'
- en: 'When the scan finishes, a summary screen like the following is shown:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当扫描完成时，会显示如下的摘要屏幕：
- en: '![](img/00278.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00278.jpeg)'
- en: 'Also, once the scan completes, the report will be ready in the specified folder.
    The following screenshot shows what a Skipfish report looks like:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，一旦扫描完成，报告将准备好在指定的文件夹中。以下截图显示了Skipfish报告的样子：
- en: '![](img/00279.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00279.jpeg)'
- en: The report shows the vulnerabilities identified by Skipfish in the order of
    higher risk (red dots) to lower risk (orange dots). For example, Skipfish identified
    an SQL injection vulnerability in the login page, Query injection vector, rated
    as high risk by the scanner. It also identified a directory traversal or file
    inclusion and a possible XSS vulnerability rated as medium, among others.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 报告显示了Skipfish在高风险（红点）到低风险（橙点）的顺序中识别出的漏洞。例如，Skipfish在登录页面中识别出了一个SQL注入漏洞，查询注入向量，被扫描器评为高风险。它还识别出了一个目录遍历或文件包含和一个可能的XSS漏洞，被评为中风险，等等。
- en: Wapiti
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Wapiti
- en: '**Wapiti** is an actively-maintained, command-line tool based web vulnerability
    scanner. Wapiti version 3.0 was released in January 2018 ([http://wapiti.sourceforge.net/](http://wapiti.sourceforge.net/));
    however, Kali Linux still includes the previous version (2.3.0). According to
    the Wapiti website, this tool includes modules to detect the following vulnerabilities:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**Wapiti**是一个活跃维护的基于命令行的网络漏洞扫描工具。Wapiti 3.0版本于2018年1月发布（[http://wapiti.sourceforge.net/](http://wapiti.sourceforge.net/)）；然而，Kali
    Linux仍然包含先前版本（2.3.0）。根据Wapiti网站的介绍，该工具包括检测以下漏洞的模块：'
- en: File disclosure (Local and remote include/require, `fopen`, `readfile`...)
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件泄露（本地和远程包含/引用，`fopen`，`readfile`...）
- en: Database Injection (PHP/JSP/ASP SQL injections and XPath injections)
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库注入（PHP/JSP/ASP SQL注入和XPath注入）
- en: XSS (Cross-Site Scripting) injection (reflected and permanent)
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XSS（跨站脚本）注入（反射和永久）
- en: Command Execution detection (`eval()`, `system()`, `passtru()`...)
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令执行检测（`eval()`，`system()`，`passtru()`...）
- en: CRLF Injection (HTTP Response Splitting, session fixation...)
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CRLF注入（HTTP响应拆分，会话固定...）
- en: XXE (XML External Entity) injection
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XXE（XML外部实体）注入
- en: Use of known potentially dangerous files (thanks to the Nikto database)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用已知的潜在危险文件（感谢Nikto数据库）
- en: Weak `.htaccess` configurations that can be bypassed
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以绕过的弱`.htaccess`配置
- en: Presence of backup files providing sensitive information (source code disclosure)
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在备份文件，提供敏感信息（源代码泄露）
- en: Shellshock (aka Bash bug)
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Shellshock（又名Bash漏洞）
- en: To start Wapiti, you need to issue the `launch` command in the command line,
    followed by the URL to be scanned and the options.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动Wapiti，您需要在命令行中输入`launch`命令，然后输入要扫描的URL和选项。
- en: 'In the following screenshot, Wapiti is run over the HTTPS site for BodgeIt
    on the vulnerable VM, generating the report in the `wapiti_output` directory (the `-o`
    option). You can skip the SSL certificate verification, as the test VM has a self-signed
    certificate. Wapiti would stop without scanning, so use `--verify-ssl 0` to bypass
    such a verification. You should not send more than 50 variants of the same request
    (the `-n` option). This is done to prevent loops. Finally, `2> null` is used to
    prevent the standard error output to overpopulate the screen, as multiple requests
    with non-expected values will be made by the scanner and Wapiti can be very verbose:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，Wapiti在易受攻击的虚拟机上通过HTTPS站点运行，生成报告存储在`wapiti_output`目录中（使用`-o`选项）。您可以跳过SSL证书验证，因为测试虚拟机具有自签名证书。如果不进行此类验证，Wapiti将停止扫描，因此使用`--verify-ssl
    0`来绕过验证。您不应发送超过50个相同请求的变体（使用`-n`选项）。这样做是为了防止循环。最后，使用`2> null`来防止标准错误输出过多，因为扫描器将发送多个具有非预期值的请求，而Wapiti可能会非常冗长：
- en: '[PRE1]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You will then see the following output on your screen:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您将在屏幕上看到以下输出：
- en: '![](img/00280.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00280.jpeg)
- en: 'The scan will take some time. When it finishes, open the `index.html` file
    in the specified directory to see the results. The following is an example of
    how Wapiti reports vulnerabilities:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描需要一些时间。完成后，打开指定目录中的`index.html`文件以查看结果。以下是Wapiti报告漏洞的示例：
- en: '![](img/00281.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00281.jpeg)
- en: Wapiti's report is very detailed, and it includes a description of each finding,
    the request used to trigger the potential vulnerability, proposed solutions, and
    references to get more information about these. In the preceding screenshot, you
    can see that it found XSS in BodgeIt's search page.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Wapiti的报告非常详细，包括每个发现的描述，用于触发潜在漏洞的请求，建议的解决方案以及获取有关这些信息的参考资料。在前面的屏幕截图中，您可以看到它在BodgeIt的搜索页面中发现了XSS漏洞。
- en: OWASP-ZAP scanner
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OWASP-ZAP扫描器
- en: Among OWASP-ZAP's many features, there is an active vulnerability scanner. In
    this case, *active* means that the scanner actively sends crafted requests to
    the server, as opposed to a passive scanner, which only analyzes the requests
    and responses sent by the web server through the proxy while normally browsing
    the application.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在OWASP-ZAP的众多功能中，有一个主动漏洞扫描器。在这种情况下，“主动”意味着扫描器会主动向服务器发送精心设计的请求，而不是被动扫描器，后者仅通过代理分析Web服务器发送的请求和响应，而正常浏览应用程序。
- en: 'To use the scanner, you need to right-click on the site or directory to be
    scanned and select Attack | Active Scan...:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用扫描器，您需要右键单击要扫描的站点或目录，然后选择攻击 | 主动扫描...：
- en: '![](img/00282.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00282.jpeg)
- en: The active scanner doesn't do any crawling or spidering on the selected target.
    Thus, it is advisable that you manually browse through the target site while having
    the proxy set up, or run the spider prior to scanning a directory or host.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 主动扫描器不会对所选目标进行任何爬行或蜘蛛行为。因此，建议您在设置代理的同时手动浏览目标站点，或在扫描目录或主机之前运行蜘蛛。
- en: 'In the Active Scan dialog box, you can select the target, whether you want
    the scan to be recursive, and if you enable the advanced options, you can choose
    the scanning policy, attack vectors, target technologies, and other options:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在主动扫描对话框中，您可以选择目标，是否要进行递归扫描，以及如果启用高级选项，可以选择扫描策略、攻击向量、目标技术和其他选项：
- en: '![](img/00283.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00283.jpeg)
- en: 'Once you click on Start Scan, the Active Scan tab will gain focus and the scanning
    progress and requests log will appear within it:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“开始扫描”后，主动扫描选项卡将获得焦点，并且扫描进度和请求日志将显示在其中：
- en: '![](img/00284.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00284.jpeg)
- en: 'The scan results will be logged in the Alerts tab:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描结果将记录在警报选项卡中：
- en: '![](img/00285.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00285.jpeg)
- en: 'Also, using Report in the main menu, you can export the results to a number
    of formats such as HTML, XML, Markdown, or JSON. The following screenshot shows
    what an HTML report looks like:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，使用主菜单中的报告，您可以将结果导出为HTML、XML、Markdown或JSON等多种格式。以下屏幕截图显示了HTML报告的外观：
- en: '![](img/00286.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00286.jpeg)
- en: OWASP-ZAP also sorts its scan results by risk level, and it includes a detailed
    description of the issues found, payloads used, recommendations for solutions,
    and references.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP-ZAP还按风险级别对其扫描结果进行排序，并包括对发现的问题的详细描述、使用的有效负载、解决方案建议和参考资料。
- en: Burp Suite, in its professional version, also has an active scanner that gives
    very accurate results with a low rate of false positives.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite在其专业版中也有一个主动扫描器，可以提供非常准确的结果，并且误报率很低。
- en: Content Management Systems scanners
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内容管理系统扫描器
- en: '**Content Management Systems** (**CMSs**), such as WordPress, Joomla, or Drupal
    are frameworks used to create websites with little or no programming required.
    They incorporate third-party plugins to ease tasks such as login and session management,
    searches, and even include full shopping cart modules.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**内容管理系统**（**CMS**），如WordPress、Joomla或Drupal，是用于创建网站的框架，几乎不需要编程。它们集成了第三方插件，以简化诸如登录和会话管理、搜索甚至包括完整购物车模块等任务。'
- en: Therefore, CMSs are vulnerable, not only within their own code, but also in
    the plugins they include. The latter are not subject to consistent quality controls,
    and they are generally made by independent programmers in their spare time, releasing
    updates and patches according to their own schedule.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，CMS不仅在其自身的代码中容易受到攻击，而且在其包含的插件中也容易受到攻击。后者不受一致的质量控制，并且通常由独立程序员在业余时间制作，根据自己的时间表发布更新和补丁。
- en: Thus, we will now cover some of the most popular vulnerability scanners for
    CMSs.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们现在将介绍一些最受欢迎的CMS漏洞扫描工具。
- en: WPScan
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WPScan
- en: '**WPScan**, as its name suggests, is a vulnerability scanner focused on the
    WordPress CMS. It will identify the version numbers of WordPress and those of
    the installed plugins and then match them against a database of known vulnerabilities
    in order to identify possible security risks.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**WPScan**正如其名称所示，是一个专注于WordPress CMS的漏洞扫描工具。它将识别WordPress的版本号和已安装插件的版本号，然后将它们与已知漏洞的数据库进行匹配，以确定可能的安全风险。'
- en: 'The following screenshot shows the basic use of WPScan, just adding the target
    URL as a parameter:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了WPScan的基本用法，只需将目标URL作为参数添加即可：
- en: '![](img/00287.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00287.jpeg)'
- en: On first run, you may be required to update the database using the `--update`
    option.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 首次运行时，您可能需要使用`--update`选项更新数据库。
- en: JoomScan
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JoomScan
- en: '**JoomScan** is the vulnerability scanner for the Joomla sites included in
    Kali Linux. To use it, you only need to add the `-u` option followed by the site''s
    URL as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**JoomScan**是包含在Kali Linux中的用于Joomla网站的漏洞扫描工具。要使用它，只需添加`-u`选项，后跟站点的URL，如下所示：'
- en: '[PRE2]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'JoomScan first tries to fingerprint the server by detecting the Joomla version
    and plugin, as shown in the following screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: JoomScan首先尝试通过检测Joomla版本和插件来识别服务器，如下图所示：
- en: '![](img/00288.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00288.jpeg)'
- en: 'After that, JoomScan will show the vulnerabilities related to the detected
    configuration or installed plugins:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，JoomScan将显示与检测到的配置或已安装插件相关的漏洞：
- en: '![](img/00289.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00289.jpeg)'
- en: CMSmap
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CMSmap
- en: '**CMSmap** is not included in Kali Linux, but it can be easily installed from
    its Git repository as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**CMSmap**未包含在Kali Linux中，但可以从其Git存储库轻松安装，如下所示：'
- en: '[PRE3]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'CMSmap scans for vulnerabilities in WordPress, Joomla, or Drupal sites. It
    has the ability to autodetect the CMS used by the site. It is a command-line tool,
    and you need to use the `-t` option to specify the target site. CMSmap displays
    the vulnerabilities it finds preceded by an indicator of the severity rating that
    it determines: `[I]` for informational, `[L]` for low, `[M]` for medium, and `[H]`
    for high, as shown in the following screenshot:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: CMSmap用于扫描WordPress、Joomla或Drupal网站的漏洞。它具有自动检测站点使用的CMS的能力。它是一个命令行工具，您需要使用`-t`选项指定目标站点。CMSmap显示它找到的漏洞，并在前面加上一个指示严重程度的标识：`[I]`表示信息，`[L]`表示低，`[M]`表示中，`[H]`表示高，如下图所示：
- en: '![](img/00290.jpeg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00290.jpeg)'
- en: The `--noedb` option used in the screenshot prevents WordPress from looking
    for exploits for the identified vulnerabilities in the Exploit Database ([https://www.exploit-db.com/](https://www.exploit-db.com/)),
    as our Kali Linux VM is not connected to the internet. Trying to connect to an
    external server would result in errors and delays in obtaining the results.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在截图中使用的`--noedb`选项可以防止WordPress在Exploit Database（[https://www.exploit-db.com/](https://www.exploit-db.com/)）中寻找已识别漏洞的利用程序，因为我们的Kali
    Linux虚拟机未连接到互联网。尝试连接到外部服务器将导致错误和获取结果的延迟。
- en: Fuzzing web applications
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模糊测试Web应用程序
- en: '**Fuzzing** is a testing mechanism that sends specially-crafted (or random,
    depending on the type of fuzzing) data to a software implementation through its
    regular inputs. The implementation may be a web application, thick client, or
    a process running on a server. It is a black-box testing technique that injects
    data in an automated fashion. Though fuzzing is mostly used for security testing,
    it can also be used for functional testing.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**模糊测试**是一种测试机制，通过常规输入将特制的（或随机的，取决于模糊测试的类型）数据发送到软件实现中。实现可以是Web应用程序、厚客户端或运行在服务器上的进程。它是一种黑盒测试技术，以自动化方式注入数据。尽管模糊测试主要用于安全测试，但也可用于功能测试。'
- en: One may think from the preceding definition that fuzzing is the same as any
    vulnerability scanning. And yes, fuzzing is part of the vulnerability scanning
    process that can also involve the fingerprinting and crawling of the web application
    and the analysis of the responses in order to determine if a vulnerability is
    present.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的定义中，人们可能认为模糊测试与任何漏洞扫描是相同的。是的，模糊测试是漏洞扫描过程的一部分，还可以涉及指纹识别和Web应用程序的爬行以及响应分析，以确定是否存在漏洞。
- en: Sometimes, we need to take the fuzzing part out of the scanning process and
    execute it alone, so that it's on us and not the scanner to determine the test
    inputs and analyze the test results. This way, we can obtain a finer control on
    what test values in which parameters are sent to the server.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们需要将模糊测试从扫描过程中分离出来，单独执行，这样我们就可以决定测试输入并分析测试结果，而不是由扫描器来决定。这样，我们可以更好地控制将哪些参数中的测试值发送到服务器。
- en: Using the OWASP-ZAP fuzzer
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用OWASP-ZAP模糊器
- en: 'The **OWASP-ZAP fuzzer** can be run from the site map, the proxy''s history,
    or the request panel by right-clicking on the request that you want to fuzz and
    selecting Attack | Fuzz..., as shown in the following screenshot:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**OWASP-ZAP模糊器**可以从站点地图、代理历史或请求面板中运行，只需右键单击要模糊的请求，然后选择Attack | Fuzz...，如下图所示：'
- en: '![](img/00291.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00291.jpeg)'
- en: 'After doing that, the fuzzing dialog appears where you can select the insert
    points; that is, the part of the request where you want to try different values
    in order to analyze server''s responses. In the following example, we are selecting
    the `q` parameter''s value in BodgeIt''s search from the OWASP BWA vulnerable
    virtual machine:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行此操作后，模糊测试对话框将出现，您可以在其中选择插入点；也就是说，您想要尝试不同值以分析服务器响应的请求的部分。在下面的示例中，我们选择了OWASP
    BWA易受攻击的虚拟机中BodgeIt的搜索中的`q`参数的值：
- en: '![](img/00292.jpeg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00292.jpeg)'
- en: Notice that two lists of payloads have already been added. To do that, select
    the text that you want to fuzz, the value of `q` in this case, and click on Add...
    on the right-hand side (in the Fuzz Locations tab) for the Payloads dialog to
    appear. Then click on Add... in that dialog box. You'll take the first payload
    list from the file `/usr/share/wfuzz/wordlist/injections/SQL.txt`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，已经添加了两个有效负载列表。要做到这一点，选择要模糊测试的文本，本例中为`q`的值，并单击右侧的"添加..."（在模糊测试位置选项卡中）以显示有效负载对话框。然后在该对话框中单击"添加..."。您将从文件`/usr/share/wfuzz/wordlist/injections/SQL.txt`中获取第一个有效负载列表。
- en: 'This file contains fuzzing strings that will help identify SQL injection vulnerabilities.
    Select File in the payload type, click on Select..., and browse to the file to
    load it, as shown in the following screenshot. Then click on Add to add that list
    to the fuzzer:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件包含将帮助识别SQL注入漏洞的模糊测试字符串。在有效负载类型中选择文件，单击"选择..."，然后浏览到要加载的文件，如下面的截图所示。然后单击"添加"将该列表添加到模糊测试器中：
- en: '![](img/00293.jpeg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00293.jpeg)'
- en: 'Next, use the second payload to test for XSS. This time you will use File Fuzzers
    as the type. This is a collection of fuzzing strings that OWASP-ZAP includes out
    of the box. From these fuzzers, select some XSS lists from JbroFuzz | XSS:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用第二个有效负载来测试XSS。这次您将使用文件模糊测试器作为类型。这是OWASP-ZAP默认包含的一组模糊测试字符串。从这些模糊测试器中，从JbroFuzz
    | XSS中选择一些XSS列表：
- en: '![](img/00294.jpeg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00294.jpeg)'
- en: 'Other options for fuzzing strings that can be used in OWASP-ZAP are as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP-ZAP中可用于模糊测试字符串的其他选项如下：
- en: '**Empty/Null**: This option submits the original value (no change)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**空/空值**：此选项提交原始值（无更改）'
- en: '**Numberzz**: This option generates a sequence of numbers, allowing you to
    define the start value, end value, and increment'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数字**：此选项生成一系列数字，允许您定义起始值、结束值和增量'
- en: '**Regex**: This option generates a defined number of strings that match the
    given regular expression'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**正则表达式**：此选项生成与给定正则表达式匹配的一定数量的字符串'
- en: '**Script**: This option lets you to use a script (loaded from Tools | Options...
    | Scripts) to generate the payloads'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**脚本**：此选项允许您使用脚本（从"工具" | "选项..." | "脚本"加载）生成有效负载'
- en: '**Strings**: This option shows a simple list of strings, manually provided'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字符串**：此选项显示手动提供的简单字符串列表'
- en: Once all of the insertion points and their corresponding fuzzing inputs have
    been selected, you can launch the fuzzer by clicking on Start Fuzzer. The Fuzzer
    tab will then show up in the bottom panel.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦选择了所有插入点及其相应的模糊测试输入，您可以通过点击"开始模糊测试"来启动模糊测试器。然后，模糊测试器选项卡将显示在底部面板中。
- en: 'In the next screenshot, you can see the fuzzing results. The State column shows
    a preliminary diagnosis made by the tool indicating how likely it is that such
    requests will lead to an exploitable vulnerability. Notice the word Reflected
    in the example. This means that the string sent by the fuzzer has been returned
    by the server as part of the response. We know that this is a string indicator
    of XSS:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个截图中，您可以看到模糊测试的结果。状态列显示了工具进行的初步诊断，指示此类请求导致可利用的漏洞的可能性有多大。请注意示例中的单词"Reflected"。这意味着模糊测试器发送的字符串已作为响应的一部分由服务器返回。我们知道这是XSS的字符串指示器：
- en: '![](img/00295.jpeg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00295.jpeg)'
- en: To explore further the possibility of finding an exploitable vulnerability from
    the results shown in the Fuzzer tab, you can select any request and its header
    and body. The corresponding response will be shown in the associated sections
    in the central panel. The response will show the *suspicious* string highlighted.
    This way, you can tell at first glance if a vulnerability is present, and if that
    particular test case is worth digging into a little more. If that's the case,
    you can right-click on the request and select Open/Resend with Request Editor
    to launch the Request Editor and manipulate and resend the request.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步探索在模糊测试器选项卡中显示的结果中是否存在可利用的漏洞，您可以选择任何请求及其头部和正文。相应的响应将显示在中央面板中的相关部分。响应将突出显示*可疑*字符串。这样，您可以一眼看出是否存在漏洞，以及该特定测试用例是否值得进一步挖掘。如果是这种情况，您可以右键单击请求并选择"使用请求编辑器打开/重新发送"来启动请求编辑器并操作和重新发送请求。
- en: 'Another option for further investigating a request that you think might lead
    to an exploitation is to replay the request in a browser so that you can see how
    it behaves and how the server responds. To do this, right-click on the request,
    select Open URL In Browser, and then select your preferred browser. This will
    open the browser and make it submit the selected request:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步调查您认为可能导致利用的请求的另一个选项是在浏览器中重放该请求，以便您可以查看其行为和服务器的响应。要做到这一点，右键单击请求，选择"在浏览器中打开URL"，然后选择您首选的浏览器。这将打开浏览器并使其提交所选的请求：
- en: '![](img/00296.jpeg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00296.jpeg)'
- en: Burp Intruder
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Burp Intruder
- en: You have already used Intruder for various tasks in previous chapters, and you
    are aware of its power and flexibility. Now we will use it to fuzz the BodgeIt
    login page looking for SQL injection vulnerabilities. The first thing that you
    need to do is to send a valid login request from the proxy history to Intruder.
    This is accomplished by right-clicking on the request and selecting Send to Intruder.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经在前几章中使用了Intruder进行各种任务，并且您已经意识到它的强大和灵活性。现在我们将使用它来对BodgeIt登录页面进行模糊测试，以寻找SQL注入漏洞。您需要做的第一件事是将有效的登录请求从代理历史发送到Intruder。这可以通过右键单击请求并选择"发送到Intruder"来完成。
- en: 'Once in Intruder, you will clear all of the insertion points and add one in
    the username value, as shown in the following screenshot:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 进入Intruder后，你将清除所有插入点，并在用户名值中添加一个插入点，如下图所示：
- en: '![](img/00297.jpeg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00297.jpeg)'
- en: 'The next step is to set the payloads. To do this, go to the Payloads tab, click
    on Load... to load a file, and go to `/usr/share/wfuzz/wordlist/injections/SQL.txt`:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是设置负载。为此，转到负载选项卡，点击“加载...”加载一个文件，并转到`/usr/share/wfuzz/wordlist/injections/SQL.txt`：
- en: '![](img/00298.jpeg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00298.jpeg)'
- en: 'Next, to make it easier to identify interesting requests, you will add some
    matching rules so that you can tell from the attack dialog when a request is causing
    errors or contains interesting words. Add the following terms to the Grep - Match
    section in Options:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为了更容易识别有趣的请求，你将添加一些匹配规则，这样你就可以从攻击对话框中判断一个请求是否导致错误或包含有趣的词语。在选项中的Grep - Match部分添加以下术语：
- en: '`error`: Adding this will be useful when you want to know when an input triggers
    errors, as basic SQL injections display error messages when altering the syntax
    of a query'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`error`：当你想知道输入触发错误时，添加这个将很有用，因为基本的SQL注入在修改查询语法时会显示错误消息'
- en: '`SQL`: In case the error message doesn''t contain the word `error`, you want
    to know when an input triggers a response that contains the word `SQL`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SQL`：如果错误消息不包含单词`error`，你希望在输入触发包含单词`SQL`的响应时得到通知'
- en: '`table`: Add when you expect to read an SQL detailed error message that contains
    table names'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table`：当你期望读取包含表名的SQL详细错误消息时添加'
- en: '`select`: Add this in case there is an SQL sentence disclosed'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`select`：在有SQL语句泄露的情况下添加这个'
- en: 'The preceding list of terms is in no way an optimum list for response matching.
    It is provided simply for demonstration purposes. In a real-life scenario, one
    would manually analyze the actual responses given by the application first and
    then choose the terms that match that context and the vulnerabilities being sought.
    The following screenshot shows what the example match list would look like:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 上述术语列表绝不是用于响应匹配的最佳列表。它仅供演示目的。在实际情况中，人们会首先手动分析应用程序给出的实际响应，然后选择与上下文和所寻找的漏洞相匹配的术语。下面的截图显示了示例匹配列表的样子：
- en: '![](img/00299.jpeg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00299.jpeg)'
- en: Once all attack parameters have been configured, you are ready to start the
    attack. It doesn't take much time for `error` to start getting matches. You can
    see that `table` is matched by every response, so it was not a good choice. `SQL`
    and `select` get no matches, at least in the first responses. If you select one
    of the responses that have `error` checked, you will see that there is a message
    System error. at the top of the page, which seems to be triggered when the payload
    contains a single quote.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有攻击参数都配置好了，你就可以开始攻击了。`error`很快就开始匹配了。你可以看到每个响应都匹配了`table`，所以这不是一个好选择。至少在最初的响应中，`SQL`和`select`没有匹配。如果你选择一个已经勾选了`error`的响应，你会看到页面顶部有一个“系统错误”的消息，这似乎是在负载包含单引号时触发的。
- en: 'This can be an indicator of SQL injection, and it may worth digging into a
    little more:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是SQL注入的一个指标，值得进一步挖掘一下：
- en: '![](img/00300.jpeg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00300.jpeg)'
- en: 'To see how this request would behave if executed from a browser in every request
    or response in any Burp Suite component, you can right-click and select Request
    in browser. You get to choose if you want the original session (send the request''s
    session cookies) or current session (the session cookies the browser has at the
    moment):'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 为了查看如果从浏览器中执行此请求，它会在Burp Suite的任何组件的每个请求或响应中的行为，你可以右键单击并选择“在浏览器中请求”。你可以选择是否要使用原始会话（发送请求的会话cookie）或当前会话（浏览器当前拥有的会话cookie）：
- en: '![](img/00301.jpeg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00301.jpeg)'
- en: 'When you send a request from Burp Suite to the browser, you get a URL starting
    with `http://burp/repeat/` that you need to copy and paste into the browser that
    you want to replay the request on. Burp Suite doesn''t launch the browser like
    ZAP does:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将请求从Burp Suite发送到浏览器时，你会得到一个以`http://burp/repeat/`开头的URL，你需要将其复制并粘贴到要重放请求的浏览器中。Burp
    Suite不像ZAP那样启动浏览器：
- en: '![](img/00302.jpeg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00302.jpeg)'
- en: 'The following screenshot shows how the request in the example appears in the
    browser. It definitely looks like the System error. message should not be there,
    and you should look deeper into that request and manually try variants in order
    to gain SQL injection:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了示例中的请求在浏览器中的显示方式。它明显看起来不应该有“系统错误”的消息，你应该深入研究该请求，并手动尝试变体以获得SQL注入：
- en: '![](img/00303.jpeg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00303.jpeg)'
- en: Post-scanning actions
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扫描后的操作
- en: Sadly, it is more common than it should be that companies that offer penetration
    testing services end up doing only a vulnerability scan and customizing and adapting
    their reports without a manual testing phase, and without validating that the
    alleged vulnerabilities found by the scanner are actual vulnerabilities. Not only
    does this fail to provide any value to the customers, who by themselves could
    download a vulnerability scanner and run it against their applications, but it
    also damages the perception that companies have about security services and security
    companies, making it harder for those who provide quality services to position
    those services in the marketplace at competitive prices.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 遗憾的是，提供渗透测试服务的公司往往只进行漏洞扫描，并在没有手动测试阶段的情况下定制和调整报告，而且没有验证扫描器发现的所谓漏洞是否真的存在。这不仅无法为客户提供任何价值，他们自己可以下载一个漏洞扫描器并对其应用程序进行扫描，而且还会损害公司对安全服务和安全公司的认知，使那些提供优质服务的人更难以以竞争性价格在市场上定位这些服务。
- en: After a scanner generates the scanning report, you cannot just take that report
    and say that you found *X* and *Y* vulnerabilities. As scanners always produce
    false positives (that is, report vulnerabilities that don't exist) and false negatives
    (such as vulnerabilities missed by the scanner), it is mandatory that you also
    conduct a manual test so that you can find and report vulnerabilities that were
    not covered by automated tools, such as authorization issues or business logic
    bypasses or abuses among others, so that you can verify that all findings reported
    by the scanner are actual vulnerabilities.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在扫描器生成扫描报告之后，您不能仅凭报告就说您发现了*X*和*Y*漏洞。因为扫描器总是会产生误报（即报告不存在的漏洞）和误报（例如扫描器错过的漏洞），所以您还必须进行手动测试，以便找到并报告自动化工具未覆盖的漏洞，例如授权问题、业务逻辑绕过或滥用等，以便验证扫描器报告的所有发现是否真正是漏洞。
- en: Summary
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed the use of automated vulnerability scanners in
    web application penetration testing, the risks posed by the use of automated tools
    when testing production environments, and considerations that needed to be taken
    into account before using them.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了在Web应用程序渗透测试中使用自动化漏洞扫描器的风险，以及在使用这些工具之前需要考虑的问题。
- en: Next, we moved on to the use of some of the scanners included in Kali Linux,
    such as Nikto, Skipfish, Wapiti, and OWASP-ZAP. We also talked about specialized
    scanners for Content Management Systems such as WordPress, Joomla, and Drupal.
    We addressed the topic of fuzzing as a separate technique from scanning. We used
    the OWASP-ZAP fuzzer and Burp Intruder to test multiple inputs over a single input.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们介绍了Kali Linux中包含的一些扫描器的使用，如Nikto、Skipfish、Wapiti和OWASP-ZAP。我们还讨论了针对内容管理系统（如WordPress、Joomla和Drupal）的专用扫描器。我们将模糊测试作为一种与扫描不同的技术进行了讨论。我们使用了OWASP-ZAP模糊测试器和Burp
    Intruder来测试单个输入上的多个输入。
- en: Finally, we discussed some of the tasks necessary to be done after automated
    scanning or fuzzing is complete. You need to validate the scanner's results in
    order to eliminate all false positives, and you need to test the application manually,
    as there are vulnerabilities that an automated scanner will not be able to find.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们讨论了在自动化扫描或模糊测试完成后需要完成的一些任务。您需要验证扫描器的结果，以消除所有误报，并且需要手动测试应用程序，因为自动化扫描器无法找到某些漏洞。
- en: With this chapter, we come to the end of the book. Penetration testing is a
    field of eternal students. Penetration testers need to keep up with the pace of
    technology, and though methodologies change, you shouldn't forget the old ways,
    as it is not unusual for today's organizations to have applications that use obsolete
    frameworks while cohabiting with top-notch technology.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章，我们结束了本书。渗透测试是一个永远学习的领域。渗透测试人员需要跟上技术的步伐，尽管方法论在变化，但不应忘记旧的方法，因为如今的组织往往会使用过时的框架与先进的技术共存。
- en: This book provides a general overview of web penetration testing, its methodology,
    and techniques to help you identify, exploit, and remediate some of the most common
    vulnerabilities found in web applications. You will need to continue your journey
    by learning more from different sources, researching, practicing, and then practicing
    some more. Also, learning about other fields such as development, networking,
    and operating systems is advantageous, as it allows you to put the application
    in context with its environment and better assess the risks it genuinely poses.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 本书提供了对Web渗透测试的概述，方法论和技术的一般概述，以帮助您识别，利用和纠正Web应用程序中最常见的漏洞。您需要通过从不同的来源学习更多知识，进行研究，实践，然后再进行更多的实践来继续您的学习之旅。此外，了解其他领域，如开发，网络和操作系统，也是有利的，因为它可以让您将应用程序与其环境联系起来，并更好地评估其真正带来的风险。
- en: Apart from the valuable applications mentioned in this book and other similar
    ones that are available, public bug bounty programs, such as HackerOne ([https://www.hackerone.com/](https://www.hackerone.com/))
    and BugCrowd ([https://www.bugcrowd.com/](https://www.bugcrowd.com/)), are an
    excellent way for the inexperienced tester to gain experience by testing real
    applications with the authorization of the owner and with the opportunity of getting
    paid for finding vulnerabilities.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 除了本书提到的有价值的应用程序和其他可用的类似应用程序之外，公开的漏洞赏金计划，如HackerOne（[https://www.hackerone.com/](https://www.hackerone.com/)）和BugCrowd（[https://www.bugcrowd.com/](https://www.bugcrowd.com/)），是一个非常好的方式，让经验不足的测试人员通过测试真实应用程序来积累经验，并获得报酬。
- en: I hope that you, dear reader, have found this book interesting and useful for
    your purposes, whether it is to learn about web application security in order
    to improve your development process, to pursue a career on penetration testing
    or as a seasoned penetration tester, to improve your skills and expand your testing
    arsenal. Thank you for reading the book.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望您，亲爱的读者，发现本书有趣且对您的目的有用，无论是为了了解Web应用程序安全以改进您的开发过程，还是为了追求渗透测试职业，或者作为一名经验丰富的渗透测试人员，以提高您的技能并扩展您的测试工具库。感谢您阅读本书。
