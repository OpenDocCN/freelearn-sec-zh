- en: Chapter 4. Attacking Mobile Application Traffic
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 攻击移动应用程序流量
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Setting up the wireless pentesting lab for mobile devices
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为移动设备设置无线渗透测试实验室
- en: Configuring traffic interception with Android
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 Android 中的流量拦截
- en: Intercepting traffic using Burp Suite and Wireshark
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Burp Suite 和 Wireshark 拦截流量
- en: Using MITM proxy to modify and attack
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 MITM 代理修改和攻击
- en: Configuring traffic interception with iOS
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 iOS 中的流量拦截
- en: Analyzing traffic and extracting sensitive information from iOS App traffic
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析 iOS 应用程序流量并提取敏感信息
- en: WebKit attacks on mobile applications
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对移动应用程序的 WebKit 攻击
- en: Performing SSL traffic interception by certificate manipulation
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过证书操作执行 SSL 流量拦截
- en: Using a mobile configuration profile to set up a VPN and intercept traffic in
    iOS devices
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用移动配置文件在 iOS 设备中设置 VPN 并拦截流量
- en: Bypassing SSL certificate validation in Android and iOS
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绕过 Android 和 iOS 中的 SSL 证书验证
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Mobile application architecture involves communication between an application
    running on mobile devices (`.apk`, `.ipa`, and so on) and the server-side application
    component, where the business logic resides. This communication is over various
    channels like HTTP, GPRS, USSD, SMS, and so on. Communication channels are open
    for attackers, and so, the communication security or the security for data in
    transit becomes important.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 移动应用程序架构涉及移动设备上运行的应用程序（`.apk`、`.ipa` 等）与服务器端应用程序组件之间的通信，业务逻辑驻留在其中。此通信通过 HTTP、GPRS、USSD、SMS
    等各种通道进行。通信渠道对攻击者开放，因此，通信安全或数据传输安全变得重要。
- en: This chapter focuses on attacking the mobile application traffic. For the sake
    of simplicity, we selected the HTTP communication layer in the recipes that follow.
    Sensitive mobile applications have implemented SSL for implementing confidentiality,
    but we will learn in the recipes that follow that the SSL traffic can be attacked
    too.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点是攻击移动应用程序流量。为了简化起见，我们选择了后续配方中的 HTTP 通信层。敏感的移动应用程序已经实现了 SSL 以实现保密性，但我们将在后续的配方中了解到
    SSL 流量也可以被攻击。
- en: Setting up the wireless pentesting lab for mobile devices
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为移动设备设置无线渗透测试实验室
- en: Let us start with setting up a lab for wireless pentesting of mobile devices.
    To be able to sniff traffic originating from mobile devices, we need to see how
    mobile applications communicate, that is, what is the communication channel? How
    do HTTP or HTTPS requests flow out of mobile?
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始为移动设备的无线渗透测试设置实验室。为了能够嗅探移动设备发出的流量，我们需要了解移动应用程序如何通信，即通信渠道是什么？移动设备如何发送 HTTP
    或 HTTPS 请求？
- en: Mobile application HTTP/HTTPS traffic flows via GPRS or a Wi-Fi channel. With
    either channel we need to set up a lab to sniff over the air. GPRS sniffing requires
    a specific set of hardware and various black hat techniques around it are available
    to do the rest. Be careful with it, GPRS (telecom) traffic interception is illegal
    in some countries. We will focus on lab setup for a Wi-Fi channel.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 移动应用程序的 HTTP/HTTPS 流量通过 GPRS 或 Wi-Fi 通道流动。无论使用哪种通道，我们都需要设置一个实验室来嗅探空中的流量。GPRS
    嗅探需要特定的硬件设备，并且周围有各种黑客技术可以完成剩下的工作。请注意，某些国家禁止对 GPRS（电信）流量进行拦截。我们将专注于设置 Wi-Fi 通道的实验室。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We need a Wi-Fi network (wireless access point connected to the Internet). We
    need mobile device(s) running the target applications, whose traffic will be sniffed.
    We also need a laptop (or computer), with any proxy tool installed on it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个连接到互联网的 Wi-Fi 网络（无线接入点）。我们需要运行目标应用程序的移动设备，其流量将被嗅探。我们还需要一台安装了任何代理工具的笔记本电脑（或计算机）。
- en: Note
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: Note that both the mobile device and laptop should have wireless cards; they
    should be able to connect to the Wi-Fi network and participate in the HTTP communication.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，移动设备和笔记本电脑都应该有无线网卡；它们应该能够连接到 Wi-Fi 网络并参与 HTTP 通信。
- en: How to do it...
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'Perform the following steps to set up the wireless pentesting lab:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 设置无线渗透测试实验室的步骤如下：
- en: Set up the wireless network and check to make sure that the Wi-Fi network is
    broadcasting and the SSID is available to connect various Wi-Fi enabled devices
    to it.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置无线网络并确保 Wi-Fi 网络正在广播，并且 SSID 可供连接各种 Wi-Fi 设备使用。
- en: Connect your mobile device to the Wi-Fi network.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的移动设备连接到 Wi-Fi 网络。
- en: Browse certain applications to verify that the application communication works.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览特定应用程序以验证应用程序通信是否正常工作。
- en: Now, install a web proxy tool like Burp Suite or Fiddler in a laptop. Connect
    this laptop also to the same Wi-Fi network. This setup should look like as shown
    in the following diagram:![How to do it...](graphics/image_04_001.jpg)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在笔记本电脑中安装一个网络代理工具，如Burp Suite或Fiddler。将这台笔记本电脑也连接到相同的Wi-Fi网络。这个设置应该如下图所示：![如何操作...](graphics/image_04_001.jpg)
- en: How it works...
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Usual communication from mobile applications would traverse the path: **Mobile**
    | **Wireless Access Point** | **Server** on the **Internet**. In the following
    diagram, this is the path `1` | `4`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 移动应用的常规通信路径是：**移动设备** | **无线接入点** | **服务器**（通过互联网）。在下图中，这条路径为`1` | `4`：
- en: '![How it works...](graphics/image_04_002.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](graphics/image_04_002.jpg)'
- en: The wireless   pentest lab is designed to insert steps **2** and **3**, in between
    the usual communication path of **1** to **4** (please refer to the preceding
    diagram for steps).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 无线渗透测试实验室的设计是在常规的通信路径**1**到**4**之间插入**2**和**3**步骤（请参考前面的图表了解步骤）。
- en: Mobile devices are configured to set a network proxy for the Wi-Fi network,
    so we forced the traffic to take the step **2** route. Now we are running a proxy
    tool on the proxy machine; this proxy tool is capable of viewing and editing the
    mobile application traffic before forwarding it via step **3** to the wireless
    access point. Thereafter, routine step **4** of communication to the server happens.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 移动设备被配置为设置Wi-Fi网络的网络代理，因此我们将流量强制通过**2**步骤。现在我们在代理机器上运行代理工具；该代理工具能够在将流量通过**3**步骤转发到无线接入点之前，查看并编辑移动应用的流量。之后，常规的**4**步骤用于与服务器的通信。
- en: This way, the wireless lab is set up for a pentest environment. Here, the mobile
    application traffic can be tampered to bypass business logic. Even an SSL application's
    traffic can be modified this way. We will see this in the recipes that follow.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，建立了一个用于渗透测试的无线实验室环境。在这里，移动应用的流量可以被篡改以绕过业务逻辑。即便是SSL应用的流量，也可以通过这种方式进行修改。接下来的教程中我们将会看到这一点。
- en: There's more...
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: An alternative to using mobile phones is to use emulators. When using emulators,
    lab requirements are further simplified. The same machine can run emulators and
    proxy tools and edit the traffic before it reaches the server. So, having emulators,
    ADB, and proxy tools in the same laptop is also an essential requirement of the
    mobile wireless pentest lab. However, please note that for some production applications,
    it is not possible to test in emulators. We have seen the SMS activation step
    as a reason in banking apps for not being able to work the mobile app in emulators.
    The same can be worked around with cooperation from application developers to
    bypass such steps. When doing a black-box pentest, such an option is not available.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用移动电话的替代方案是使用模拟器。使用模拟器时，实验室的要求进一步简化。相同的机器可以同时运行模拟器和代理工具，并在流量到达服务器之前进行编辑。因此，在同一台笔记本电脑中拥有模拟器、ADB和代理工具也是移动无线渗透测试实验室的必要要求。然而，请注意，对于一些生产环境的应用，无法在模拟器中进行测试。我们曾看到银行应用中的短信激活步骤是无法在模拟器中工作的原因之一。这个问题可以通过与应用开发人员的合作来绕过。进行黑盒渗透测试时，这样的选项是不可用的。
- en: In a specific case, we came across a mobile application which was tied to a
    specific telecom 3G network and did not work on Wi-Fi or another operator's 3G
    network.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个特定的案例中，我们遇到了一款绑定到特定电信3G网络的移动应用，且无法在Wi-Fi或其他运营商的3G网络上运行。
- en: This requires a slightly different laboratory. In the preceding diagram, we
    replaced the wireless access point with a 3G and Wi-Fi-enabled tab. This tab was
    used to create a hotspot, thereby providing the wireless network, and final communication
    via this tab is over 3G to the server. So steps **1**, **2**, and **3** of the
    interception setup remain the same. In step **4**, instead of a wired network,
    we followed a 3G channel to connect to the server.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要稍微不同的实验室配置。在前面的图中，我们将无线接入点替换为一个支持3G和Wi-Fi的设备。该设备用于创建热点，从而提供无线网络，最终通过该设备的3G连接到服务器。因此，拦截设置的**1**、**2**和**3**步骤保持不变。在**4**步骤中，我们没有使用有线网络，而是通过3G通道连接到服务器。
- en: See also
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Configuring traffic interception with iOS*'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*配置iOS的流量拦截*'
- en: '[https://www.blackhat.com/presentations/bh-dc-08/Steve-DHulton/Whitepaper/bh-dc-08-steve-dhulton-WP.pdf](https://www.blackhat.com/presentations/bh-dc-08/Steve-DHulton/Whitepaper/bh-dc-08-steve-dhulton-WP.pdf)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.blackhat.com/presentations/bh-dc-08/Steve-DHulton/Whitepaper/bh-dc-08-steve-dhulton-WP.pdf](https://www.blackhat.com/presentations/bh-dc-08/Steve-DHulton/Whitepaper/bh-dc-08-steve-dhulton-WP.pdf)'
- en: Configuring traffic interception with Android
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Android 流量拦截
- en: In the previous recipe, we learned how to create a penetration testing lab for
    mobile device interception, where we said we need to configure a mobile device
    to force step **2** to follow a network proxy. Let us learn in this recipe how
    to do this in Android phones.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的教程中，我们学会了如何为移动设备拦截创建渗透测试实验室，其中提到我们需要配置移动设备，强制执行步骤 **2** 来跟随网络代理。在本教程中，让我们学习如何在
    Android 手机上实现这一过程。
- en: Getting ready
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: An Android phone. A rooted phone is required for mobile applications. (We learned
    rooting in the *Introduction to rooting and jailbreaking* recipe of [Chapter 1](ch01.html
    "Chapter 1.  Introduction to Mobile Security") , *Introduction to Mobile Security*).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一部 Android 手机。移动应用程序需要一部已 root 的手机。（我们在 [第 1 章](ch01.html "第 1 章 移动安全简介") 的
    *“Root 和越狱简介”* 中学到了 root 技巧，*移动安全简介*）
- en: Android proxy tools like ProxyDroid are available for download from Play Store.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 像 ProxyDroid 这样的 Android 代理工具可以从 Play 商店下载。
- en: How to do it...
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'It is very easy to set up traffic interception for WAP-based applications (that
    is, applications that run on a browser in Android). For this, go to Wi-Fi settings
    and select the **Wi-Fi** you wish to connect to; there you can see **Proxy settings**
    under **Advanced Options**. Select **Proxy settings** as **Manual** to configure
    the **Proxy hostname**/**IP address**, **Proxy port** number, and so on. This
    is also shown in the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于 WAP 的应用程序（即在 Android 浏览器中运行的应用程序），设置流量拦截非常简单。为此，进入 Wi-Fi 设置，选择你希望连接的 **Wi-Fi**，然后在
    **高级选项**下可以看到 **代理设置**。选择 **代理设置** 为 **手动**，然后配置 **代理主机名**/**IP 地址**，**代理端口**
    等信息。以下截图也展示了这一过程：
- en: '![How to do it...](graphics/image_04_003.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](graphics/image_04_003.jpg)'
- en: 'While the preceding approach is good for WAP applications, it does not work
    for downloaded and installed applications (that is, native and hybrid apps). For
    these applications, we need to install Android proxy tools on the phone. ProxyDroid
    is one such tool and can be downloaded free from Google Play Store. The proxy
    settings using these tools work only on rooted phones. So the sequence for proxying
    using third-party proxy tools is as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前述方法适用于 WAP 应用程序，但它不适用于下载并安装的应用程序（即原生应用和混合应用）。对于这些应用程序，我们需要在手机上安装 Android
    代理工具。ProxyDroid 就是其中一款工具，可以从 Google Play 商店免费下载。这些工具的代理设置仅在已 root 的手机上有效。所以，使用第三方代理工具的代理顺序如下：
- en: Root your Android device.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对你的 Android 设备进行 root。
- en: Install proxy tools such as **ProxyDroid** or **Autoproxy lite**.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装诸如 **ProxyDroid** 或 **Autoproxy lite** 等代理工具。
- en: Configure the proxy tools.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置代理工具。
- en: 'The first two steps are already known to you by now. The third step is pictorially
    represented as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个步骤你已经了解了。第三步如图所示：
- en: '![How to do it...](graphics/image_04_004.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](graphics/image_04_004.jpg)'
- en: ProxyDroid requires superuser permission to allow it to be able to set a proxy.
    Move to the next step and enable **Proxy Switch** to configure the name of the
    **Host**, **Port**, and so on. A final, optional step is, if the proxy requires
    authentication, to provide the authentication credentials. Since the proxy is
    in our control, we would like to keep it simple by not configuring authentication
    for seamless testing.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: ProxyDroid 需要超级用户权限，以便能够设置代理。进入下一步，启用 **代理开关**，配置 **主机名**、**端口** 等。最后，如果代理需要身份验证，可以提供身份验证凭据。由于代理由我们控制，我们希望保持简单，不配置身份验证，以便进行无缝测试。
- en: How it works...
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Android OS is built on a Linux base. Linux uses a routing table for routing
    packets over the network. So, we need to modify the routing table entries in Android
    to be able to route packets to the network proxy we are willing to intercept at.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Android 操作系统基于 Linux 构建。Linux 使用路由表来通过网络路由数据包。因此，我们需要修改 Android 中的路由表条目，以便将数据包路由到我们愿意拦截的网络代理。
- en: Access to the underlying components (like routing tables) is not allowed, and
    hence we need to root the phone so that the proxy tools are able to obtain superuser
    permission on OS. This way, the proxy tools on a rooted phone overwrite the routing
    tables based on the proxy settings provided by the user.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 由于无法访问底层组件（如路由表），因此我们需要对手机进行 root，使得代理工具能够在操作系统上获得超级用户权限。这样，根目录手机上的代理工具可以根据用户提供的代理设置覆盖路由表。
- en: There's more...
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'When using Android emulators, a proxy can be set using the ADB tool. Both the
    emulator and web proxy tool can be run on the same machine. Use the following
    command for starting the emulator with a local proxy on port `7000`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Android 模拟器时，可以使用 ADB 工具设置代理。模拟器和 Web 代理工具可以在同一台机器上运行。使用以下命令启动模拟器，并将本地代理设置为端口
    `7000`：
- en: '[PRE0]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: See also
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Intercepting traffic using Burp Suite and Wireshark*'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 Burp Suite 和 Wireshark 拦截流量*'
- en: https://play.google.com/store/apps/details?id=org.proxydroid&hl=en
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: https://play.google.com/store/apps/details?id=org.proxydroid&hl=en
- en: https://play.google.com/store/apps/details?id=com.mgranja.autoproxy_lite&hl=en
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: https://play.google.com/store/apps/details?id=com.mgranja.autoproxy_lite&hl=en
- en: Intercepting traffic using Burp Suite and Wireshark
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Burp Suite 和 Wireshark 拦截流量
- en: Traffic interception is the next thing to target after setting the proxy on
    the phone. Traffic interception opens up another layer to attack in the applications.
    In this recipe, we will learn to set up traffic interception while the next recipe
    discusses attacking the application using proxy interception of traffic.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 流量拦截是设置代理后需要进行的下一个目标。流量拦截为应用程序攻击提供了另一层攻击面。在这个配方中，我们将学习如何设置流量拦截，而下一个配方将讨论如何通过代理拦截流量来攻击应用程序。
- en: Two primary tools for intercepting or sniffing the traffic are web proxy tools
    such as Burp Suite or Charles Proxy, and network sniffers such as Wireshark or
    Shark for Root on Android. While Burp Suite inserts itself in the middle of the
    communication (stop, modify, and forward), Shark for Root sniffs the network packets
    (on Wi-Fi or 3G both).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截或嗅探流量的两种主要工具是 Web 代理工具（如 Burp Suite 或 Charles Proxy）和网络嗅探工具（如 Wireshark 或
    Android 上的 Shark for Root）。Burp Suite 将自己插入到通信中（暂停、修改并转发），而 Shark for Root 则嗅探网络数据包（支持
    Wi-Fi 或 3G）。
- en: Getting ready
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For intercepting the mobile traffic, set up the lab and tools as described in
    the previous two recipes. Additionally, download and install **Shark** from Play
    Store.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要拦截移动设备流量，请按照前两个配方中描述的设置实验室和工具。另请从 Play 商店下载并安装 **Shark**。
- en: How to do it...
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following, are the steps that need to be followed to set up using Burp
    Suite and Shark for Root respectively:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用 Burp Suite 和 Shark for Root 分别进行设置时需要遵循的步骤：
- en: '**Burp Suite**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**Burp Suite**'
- en: Set up the wireless pentest lab as described in the *Setting up the Wireless
    Pentesting Lab for mobile devices* recipe. Burp Suite (Burp Proxy) should now
    be running on your laptop, and it must be listening on default port `8080`.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照 *为移动设备设置无线渗透测试实验室* 配方中描述的步骤，设置无线渗透测试实验室。此时，Burp Suite（Burp Proxy）应当在你的笔记本电脑上运行，并监听默认端口
    `8080`。
- en: Now configure the Android phone to route traffic to the Burp Proxy running on
    your laptop (use the previous recipe for this configuration). Make sure that the
    IP address, Port, and so on are configured correctly. Now you can see the intercepted
    traffic and tamper it as well. Let us park the malicious activities for the next
    recipe.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在配置 Android 手机，将流量路由到你笔记本电脑上运行的 Burp Proxy（可以参考之前的配置方法）。确保 IP 地址、端口等配置正确。现在你可以看到被拦截的流量并进行篡改。让我们将恶意活动留到下一个配方中。
- en: '**Shark for Root**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**Shark for Root**'
- en: 'Like the proxy tools on Android, Shark for Root also requires superuser permission.
    This needs to be on a rooted phone and needs to be allowed for the creation of
    packet dump. This step is shown in the following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Android 上的代理工具类似，Shark for Root 也需要超级用户权限。它需要在已 Root 的手机上运行，并且需要允许创建数据包转储。此步骤显示在下面的截图中：
- en: '![How to do it...](graphics/image_04_005.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](graphics/image_04_005.jpg)'
- en: 'Finally, set the parameters for capturing the traffic. Shark for Root dumps
    all the packets in the `.pcap` file, as you can also see in the following screenshot,
    indicating that `pcap` dumping has started. The same screenshot on the right-hand
    side shows the path in the phone where the `.pcap` file is created and stored:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，设置捕获流量的参数。Shark for Root 会将所有数据包转储到 `.pcap` 文件中，正如你在下图中所看到的，表示 `pcap` 转储已经开始。右侧的截图显示了
    `.pcap` 文件在手机中创建并存储的路径：
- en: '![How to do it...](graphics/image_04_006.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](graphics/image_04_006.jpg)'
- en: The `.pcap` file can be transferred to the computer and can be interpreted better
    by Wireshark.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`.pcap` 文件可以转移到计算机上，并通过 Wireshark 进行更好的解析。'
- en: How it works...
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The working of a network proxy (or Burp Suite) is simple. It inserts itself
    in the network path like a man-in-the-middle and listens or modifies the traffic.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 网络代理（或 Burp Suite）的工作原理很简单。它像中间人一样插入网络路径，监听或修改流量。
- en: Shark for Root works by obtaining superuser permission on the underlying OS
    and gets access to networking files; thereby, it is able to sniff packets and
    create a packet dump.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Shark for Root通过在底层操作系统上获取超级用户权限并访问网络文件来工作；因此，它能够嗅探数据包并创建数据包转储。
- en: There's more...
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The packet dump (`.pcap`) file created by Shark for Root is very useful in analyzing
    the kind of packets being transmitted over the network. Sometimes the web proxies
    are not able to capture the traffic. Reasons for this could be specific SSL certificates
    bundled into the mobile applications, or specific TCP packets or protocols used
    (not necessarily HTTP). In such cases when proxy tools fail, Shark for Root can
    be useful to understand the failure reasons, which give further direction to interception
      troubleshooting.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Shark for Root创建的数据包转储（.pcap）文件在分析网络上传输的数据包类型方面非常有用。有时，Web代理无法捕获流量。造成这种情况的原因可能是特定的SSL证书捆绑到移动应用程序中，或者使用特定的TCP数据包或协议（不一定是HTTP）。在代理工具失败时，Shark
    for Root可以帮助理解失败原因，从而为拦截和故障排除提供进一步方向。
- en: See also
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Using MITM Proxy to modify and attack*'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用MITM代理进行修改和攻击*'
- en: '[https://portswigger.net/burp/](https://portswigger.net/burp/)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://portswigger.net/burp/](https://portswigger.net/burp/)'
- en: '[https://play.google.com/store/apps/details?id=lv.n3o.shark&hl=en](https://play.google.com/store/apps/details?id=lv.n3o.shark&hl=en)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://play.google.com/store/apps/details?id=lv.n3o.shark&hl=en](https://play.google.com/store/apps/details?id=lv.n3o.shark&hl=en)'
- en: Using MITM proxy to modify and attack
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MITM代理进行修改和攻击
- en: Burp Suite is set as a **Man-in-the-middle** (**MITM**) proxy. A man-in-the-middle
    has control over every transaction (request and response) being exchanged by the
    two parties, that is, the mobile application on the phone and the mobile server
    where business logic resides.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite被设置为**中间人攻击**（**MITM**）代理。中间人攻击者控制着双方交换的每一笔交易（请求和响应），即手机上的移动应用程序和存放业务逻辑的移动服务器之间的交换。
- en: A MITM proxy is used to attack the application business logic, like the transfer
    limit of 1000 Dollars can be attempted to bypass by making higher amount transactions;
    specific workflows such as OTP bypass can also be attempted. MITM proxies can
    also be used to obtain privileged access in the application by accessing an object
    or modifying a parameter value to serve privileged content.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用MITM代理攻击应用程序的业务逻辑，比如尝试绕过1000美元的转账限制，通过进行更高金额的交易；还可以尝试特定工作流程，如绕过一次性密码。MITM代理还可以用于通过访问对象或修改参数值来获取应用程序中的特权访问以提供特权内容。
- en: Getting ready
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For intercepting the mobile traffic, set up the lab and tools as described in
    the previous recipes in this chapter. Once you are done, your Burp Suite is already
    ready to modify and attack.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要拦截移动流量，请按照本章中先前的步骤设置实验室和工具。完成后，您的Burp Suite已经准备好进行修改和攻击。
- en: How to do it...
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let us take a business case and employ the *modify and attack* method. All
    mobile banking applications allow a basic feature to view balance for self-owned
    bank accounts. Let us attack this feature to view the balance of other user accounts:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个业务案例，并采用*修改和攻击*方法。所有移动银行应用程序都允许查看自有银行账户余额的基本功能。让我们攻击这个功能以查看其他用户账户的余额：
- en: Firstly, select a mobile banking application.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，选择一个移动银行应用程序。
- en: 'Log in and go to the view balance feature; the application allows you to select
    one of the self-owned accounts and subsequently sends a request to the server
    requesting user balance. This request is intercepted in the Burp Proxy as shown:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录并转到查看余额功能；该应用程序允许您选择其中一个自有账户，随后向服务器发送请求请求用户余额。此请求在Burp代理中被拦截，如下所示：
- en: '![How to do it...](graphics/image_04_007.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](graphics/image_04_007.jpg)'
- en: Notice the `Payment Instrument Id` highlighted in the screenshot. This parameter
    value was tampered to another value like `10001856` and it resulted in revealing
    the account balance of an account which does not belong to the logged-in user.
    Unfortunately, this being a live mobile banking application, we are unable to
    show you further application screenshots.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 注意截图中突出显示的`Payment Instrument Id`。该参数值被篡改为另一个值，如`10001856`，导致显示不属于已登录用户的账户余额。不幸的是，由于这是一个实时的移动银行应用程序，我们无法向您展示更多应用程序截图。
- en: This way, a MITM proxy is used to modify and attack the parameters in the applications.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，MITM代理用于修改和攻击应用程序中的参数。
- en: How it works...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: MITM proxy medication attacks are to target server-side application logic. Since
    the proxy is acting as a man-in-the-middle, it can fully control the data being
    transferred. The parameters that could be responsible for resulting in data in
    response are selected and modified to achieve something that is not functionally
    allowed in the application.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: MITM代理药物攻击是针对服务器端应用程序逻辑的。由于代理充当中间人，它可以完全控制正在传输的数据。选择可能导致响应数据的参数，并对其进行修改以实现应用程序中不允许的功能。
- en: In this particular case, there is a unique session token allocated for each
    user but the application fails to validate that the parameter value (`Payment
    Instrument Id`) being requested does not belong to the logged-in user. So it displays
    the account balance of other customers, allowing business logic validation to
    be bypassed.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种特殊情况下，为每个用户分配了一个唯一的会话令牌，但应用程序未验证请求的参数值（`支付工具 ID`）是否不属于已登录用户。因此，它显示其他客户的账户余额，允许绕过业务逻辑验证。
- en: This MITM proxy is responsible for various notorious attacks on the application
    logic. The key is to select the right variable to manipulate, which may sometimes
    be time consuming.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这种MITM代理对应用程序逻辑进行了各种臭名昭著的攻击。关键是选择正确的变量进行操作，有时可能会耗费时间。
- en: There's more...
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We can only discuss one case. A lot more can be achieved via this MITM modify
    and attack method. Think about the application functions and validations which
    are built and then decide which one should be attacked using this method.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只能讨论一个案例。通过这种 MITM 修改和攻击方法可以实现更多。考虑一下应用程序功能和验证，然后决定使用这种方法攻击哪一个。
- en: 'For a mobile banking application, here is an indicative list of possible attacks
    you can attempt:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 对于移动银行应用程序，以下是您可以尝试的可能攻击的指示性列表：
- en: View account balance of others
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看他人的账户余额
- en: View transaction history of others
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看他人的交易历史记录
- en: Transfer funds from other users' accounts
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从其他用户的账户中转账
- en: Transfer funds to a non-added beneficiary
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将资金转账给未添加为受益人的人
- en: Register or de-register credit cards in other users' accounts
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在其他用户的账户中注册或注销信用卡
- en: Register or de-register billers in other users' accounts
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在其他用户的账户中注册或注销账单支付者
- en: Similarly, in an application involving multiple roles like user, manager, and
    admin, you would like to play around with the request variable responsible for
    serving privileged content. If successful, a user can obtain manager's or admin's
    access, thereby successfully conducting a privilege escalation attack.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在涉及多个角色（用户、经理和管理员）的应用程序中，您可能希望玩弄负责提供特权内容的请求变量。如果成功，用户可以获得经理或管理员的访问权限，从而成功进行特权升级攻击。
- en: See also
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Analyzing traffic and extracting sensitive information from iOS App traffic*'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*分析iOS应用程序流量并提取敏感信息*'
- en: Configuring traffic interception with iOS
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置iOS的流量拦截
- en: A penetration testing lab for mobile device interception is conceptualized in
    the, *Setting up the wireless pentesting lab for mobile devices*, recipe of this
    chapter. We have to configure an iOS device to force step 2 (described in the
    first recipe) to follow a network proxy. Let us learn in this recipe how to do
    this in iOS devices.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 移动设备拦截的渗透测试实验室是在本章的*为移动设备设置无线渗透测试实验室*配方中构想的。我们必须配置iOS设备以强制第2步（在第一个配方中描述）遵循网络代理。让我们在这个配方中学习如何在iOS设备中做到这一点。
- en: Getting ready
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: An iOS device, along with other necessities of lab setup like Wi-Fi network
    and a laptop with web proxy tools (as discussed in the first recipe of this chapter)
    are required.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 需要iOS设备，以及实验室设置的其他必需品，如Wi-Fi网络和带有网络代理工具的笔记本电脑（如本章第一个配方中讨论的）。
- en: How to do it...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: iOS provides a proxy as a feature to iDevice users. This makes it very easy
    for users or attackers to set up traffic interception for iOS applications. The
    device proxy settings are global and apply for applications too.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: iOS为iDevice用户提供了代理作为一个功能。这使得用户或攻击者可以很容易地为iOS应用程序设置流量拦截。设备代理设置是全局的，也适用于应用程序。
- en: The settings can be configured by navigating to settings in an iPhone or iPad.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在 iPhone 或 iPad 上导航到设置来配置设置。
- en: 'For this, go to Wi-Fi settings and select the Wi-Fi you wish to connect to;
    there you can see **Proxy Settings** under Advanced Options. Select **Manual**
    under **HTTP PROXY** to configure the Proxy Hostname/IP address, Proxy Port number,
    and so on. This is also shown in the following screenshot:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，进入Wi-Fi设置，选择要连接的Wi-Fi；在高级选项下可以看到**代理设置**。在**HTTP代理**下选择**手动**以配置代理主机名/IP地址、代理端口号等。如下截图所示：
- en: How it works...
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: iOS has provided a feature to set proxy using which users set a network proxy
    and capture the traffic. This is complicated in the case of Android, as the proxy
    feature itself was not present by default. In the case of iOS, the presence of
    a proxy as a feature has made it direct.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: iOS提供了一个设置代理的功能，用户可以设置网络代理并捕获流量。这在Android中比较复杂，因为代理功能本身不是默认存在的。在iOS中，代理作为一个功能的存在使得它更加直接。
- en: There's more...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'For iOS applications and Xcode projects, which can be run on iOS Simulator,
    a proxy can be set. Xcode and iOS Simulator run on Mac OS X. We can set global
    proxy settings in MacBook. Under Wi-Fi settings, for the connected Wi-Fi network,
    navigate to **Proxies** and to **Web Proxy (HTTP)**. There, set a local proxy
    (`127.0.0.1`) and provide the proxy port (`8080` for Burp Proxy). This is shown
    in the following screenshot and it will ensure that the traffic from iOS Simulator
    goes to the server via the proxy tool running on the same machine (MacBook):'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 对于可以在iOS模拟器上运行的iOS应用程序和Xcode项目，可以设置代理。Xcode和iOS模拟器运行在Mac OS X上。我们可以在MacBook上设置全局代理设置。在Wi-Fi设置中，对于连接的Wi-Fi网络，导航至**代理**和**Web代理（HTTP）**。在那里，设置本地代理（`127.0.0.1`）并提供代理端口（Burp
    Proxy的`8080`）。如下截图所示，这将确保iOS模拟器的流量通过运行在同一台机器上的代理工具发送到服务器：
- en: '![There''s more...](graphics/image_04_008.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![更多内容...](graphics/image_04_008.jpg)'
- en: See also
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[http://www.charlesproxy.com/documentation/faqs/using-charles-from-an-iphone/](http://www.charlesproxy.com/documentation/faqs/using-charles-from-an-iphone/)'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.charlesproxy.com/documentation/faqs/using-charles-from-an-iphone/](http://www.charlesproxy.com/documentation/faqs/using-charles-from-an-iphone/)'
- en: Analyzing traffic and extracting sensitive information from iOS App traffic
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析流量并从iOS应用程序流量中提取敏感信息
- en: When the interception setup is ready, traffic analysis has started. The most
    difficult task from traffic is to extract sensitive information, or rather, to
    find the HTTP requests and variables which can help further extract sensitive
    information.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当拦截设置准备就绪时，流量分析已经开始。从流量中提取敏感信息是最困难的任务，或者说是找到可以帮助进一步提取敏感信息的HTTP请求和变量。
- en: Let us take the case of an iOS application we came across. Let us first analyze
    the traffic and later see how to extract sensitive information.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以一款iOS应用为例。首先分析流量，然后看如何提取敏感信息。
- en: Getting ready
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For intercepting the iOS application traffic, set up the lab and tools as discussed
    in the previous recipe. Once you are done, the proxy tool (Charles Proxy) is ready
    to intercept the traffic.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截iOS应用程序流量，按照前面的步骤设置实验室和工具。完成后，代理工具（Charles Proxy）已准备好拦截流量。
- en: How to do it...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Log in to the mobile app, as shown in the following screenshot. Enter the wrong
    password for the correct username:![How to do it...](graphics/image_04_009.jpg)Note
    that a login request goes and a response is received.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录移动应用程序，如下截图所示。为正确的用户名输入错误的密码：![如何操作...](graphics/image_04_009.jpg)请注意，登录请求已发送并收到响应。
- en: Closely monitor the response traffic. For the incorrect password, there is a
    `ERR_PWD` text in the response, as shown in the following screenshot:![How to
    do it...](graphics/image_04_010.jpg)
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 密切监视响应流量。对于密码错误，响应中会显示`ERR_PWD`文本，如下截图所示：![如何操作...](graphics/image_04_010.jpg)
- en: This results in an error response on the iPhone screen, as shown in the following
    screenshot:![How to do it...](graphics/image_04_011.jpg)
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将导致iPhone屏幕上显示错误响应，如下截图所示：![如何操作...](graphics/image_04_011.jpg)
- en: Now try logging in to the application with the correct username and password.
    Notice the response to the login request. It contains a text `SUCCESS_LOGIN` in
    the response, as shown in the following screenshot. This action displays the internal
    screen of the mobile application:![How to do it...](graphics/image_04_012.jpg)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在尝试使用正确的用户名和密码登录应用程序。注意登录请求的响应。响应中包含文本`SUCCESS_LOGIN`，如下截图所示。此操作将显示移动应用程序的内部屏幕：![如何操作...](graphics/image_04_012.jpg)
- en: This analysis of iOS application traffic shows the difference in the responses
    of two cases. Let us now try pasting the response of one case to another.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 对iOS应用程序流量的分析显示了两种情况下响应的差异。现在让我们尝试将一种情况的响应粘贴到另一种情况中。
- en: When we log in with an incorrect password, we get `ERR_PWD` in the response.
    Now, from the Charles Proxy tool, manipulate the response `ERR_PWD` to `SUCCESS_LOGIN`
    and forward the response from Charles. This action logs the user in to the application
    and the internal application screen is shown in the iPhone. This way, we obtained
    sensitive information from an iOS application, with a wrong password.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们用错误的密码登录时，我们会在响应中得到`ERR_PWD`。现在，通过Charles Proxy工具，将响应中的`ERR_PWD`操纵为`SUCCESS_LOGIN`，并将响应从Charles转发。这样做会将用户登录到应用程序中，并在iPhone上显示内部应用程序屏幕。这样，我们通过错误的密码从iOS应用程序中获取了敏感信息。
- en: There's more...
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The possibilities are numerous with application traffic to reveal sensitive
    information. Another case worth mentioning is when we found an iPad application
    to be sending a request containing username, password, and **Unique Device Identifier**
    (**UDID**) number. The application tried to implement user locking to a particular
    iPad only, so that the same user is not able to log in from other iPads.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序流量揭示敏感信息的可能性是多种多样的。另一个值得一提的案例是，当我们发现一个iPad应用程序发送一个包含用户名、密码和**唯一设备标识符**（**UDID**）号码的请求时。该应用程序试图实现用户仅能在特定iPad上登录，以便同一用户无法从其他iPad登录。
- en: We could bypass this and log in the same user from another iPad by tampering
    the UDID number of the other iPad to the previous iPad in the outgoing request.
    This way, the iPad binding of the application was proved useless.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过篡改另一台iPad的UDID号码到前一台iPad的出站请求中，绕过这一点，并从另一台iPad登录相同的用户。这样，应用程序的iPad绑定被证明是无用的。
- en: Depending on the application functionalities and the traffic analysis, many
    things can be attempted and bypassed.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 根据应用程序功能和流量分析，可以尝试和绕过许多事情。
- en: See also
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Using MITM Proxy to modify and attack*'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用MITM代理进行修改和攻击*'
- en: WebKit attacks on mobile applications
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 针对移动应用程序的WebKit攻击
- en: Safari and other mobile applications use **WebKit**. It is a web browser engine.
    It provides browser capabilities to the applications wherever it is implemented.
    Most Hybrid Mobile Applications use WebKit for the applications feature to be
    able to invoke browser components and make it a seamless integration for application
    users.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Safari和其他移动应用程序使用**WebKit**。它是一个Web浏览器引擎。它为实现的应用程序提供浏览器功能。大多数混合移动应用程序使用WebKit来调用浏览器组件，并使其对应用程序用户进行无缝集成。
- en: WebKit-based attacks for mobile applications are similar to the web applications
    browser-based attacks. The **cross-site scripting** (**XSS**) or HTML injection
    are the most common attacks on the WebKit components of mobile applications.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 基于WebKit的移动应用程序攻击类似于基于Web应用程序浏览器的攻击。**跨站脚本**（**XSS**）或HTML注入是移动应用程序的WebKit组件上最常见的攻击。
- en: Cross-site scripting takes advantage of the application feature of reflecting
    user inputs back to the user without sanitizing the outputs. So, if the application
    reflects a malicious JavaScript posted by the attacker to the user, then the script
    is executed at the user's browser. These scripts could steal a user session token
    or could download and install malwares and backdoors.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 跨站脚本利用应用程序将用户输入反射回用户而不对输出进行消毒的功能。因此，如果应用程序将攻击者发布的恶意JavaScript反射给用户，则脚本将在用户的浏览器中执行。这些脚本可能窃取用户会话令牌，或者下载和安装恶意软件和后门。
- en: The HTML injection slightly varies from XSS. Here, the HTML tags or code is
    sent, which upon reflection back to the user, modifies the HTML view. This could
    eventually bypass certain client side restrictions or completely change the presentation,
    including loading of a new HTML file.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: HTML注入与XSS略有不同。在这里，发送HTML标签或代码，当反射回用户时，修改HTML视图。这最终可能绕过某些客户端限制或完全改变呈现方式，包括加载新的HTML文件。
- en: Getting ready
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this, we need applications that use WebKit components. Testing tools are
    the same as described in previous recipes in this chapter.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们需要使用WebKit组件的应用程序。测试工具与本章中先前描述的相同。
- en: How to do it...
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Let us take an iOS application that uses UIWebView to embed the web content
    in the mobile application.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个使用UIWebView在移动应用程序中嵌入Web内容的iOS应用程序。
- en: In this application, a web page is loaded inside the application by simply passing
    the URL to the `UIWebView` class object. This object renders the HTML as the iOS
    Safari browser (WebKit) would do it.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在此应用程序中，网页通过简单地将 URL 传递给 `UIWebView` 类对象加载。该对象将 HTML 渲染成 iOS Safari 浏览器（WebKit）一样的方式。
- en: 'Let us look at the WebKit attack possibility in this scenario:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在这种情况下 WebKit 攻击的可能性：
- en: Tamper the path variable to load another stored or compromised HTML file (HTML
    injection variant).
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 篡改路径变量以加载另一个存储或被入侵的 HTML 文件（HTML 注入变体）。
- en: Load some other page with embedded malicious JavaScript, resulting in execution
    of JavaScript at the user's context (XSS variant).
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载一些其他页面，嵌入恶意 JavaScript，导致在用户上下文中执行 JavaScript（XSS 变体）。
- en: How it works...
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'To understand how the WebKit attack works in this case, let us have a look
    at how the iOS application code associated with view generation looks:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解 WebKit 攻击在这种情况下是如何工作的，让我们看看与视图生成相关的 iOS 应用程序代码长什么样：
- en: '![How it works...](graphics/image_04_013.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](graphics/image_04_013.jpg)'
- en: From the code, note that the HTML file present at index location is going to
    be loaded.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 从代码中可以注意到，位于索引位置的 HTML 文件将被加载。
- en: If this index file can be compromised or modified to contain JavaScript, it
    can result in cross-site scripting attacks. This requires the attacker to hold
    control over the user's mobile device.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此索引文件可以被攻破或修改以包含 JavaScript，可能导致跨站脚本攻击（XSS）。这需要攻击者能够控制用户的移动设备。
- en: 'For demonstration purposes, an HTML code was inserted into the `index.html`
    file and loaded to show that the HTML injection attack is also possible. The result
    of this is shown in the following screenshot:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，向 `index.html` 文件中插入了 HTML 代码，并加载显示 HTML 注入攻击也是可能的。以下截图展示了这个结果：
- en: '![How it works...](graphics/image_04_014.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](graphics/image_04_014.jpg)'
- en: There's more...
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: For similar categories of WebKit attacks, you need mobile applications that
    use the WebKit component and reflect user input. You need proxy tools like Burp
    Proxy to attack network traffic, tampering and inserting specific payloads. These
    payloads are reflected under the WebKit instantly to execute the attack.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 对于类似类别的 WebKit 攻击，您需要使用 WebKit 组件并反射用户输入的移动应用程序。您需要像 Burp Proxy 这样的代理工具来攻击网络流量，篡改并插入特定的有效载荷。这些有效载荷会立即在
    WebKit 下反射并执行攻击。
- en: Look at the applications with WebView, WebKit, and so on in the mobile side
    code. Employ web application proxy techniques to figure out the parameters that
    reflect in response. Create a payload and work out your custom attack.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 查看移动端代码中包含 WebView、WebKit 等的应用程序。使用 Web 应用程序代理技术找出在响应中反射的参数。创建有效载荷并制定自定义攻击。
- en: See also
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Finding vulnerabilities in WAP-based mobile apps*, [Chapter 3](ch03.html "Chapter 3. Auditing
    Mobile Applications"), *Auditing Mobile Applications*'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在基于 WAP 的移动应用中寻找漏洞*，[第 3 章](ch03.html "第 3 章 审计移动应用程序")，*审计移动应用程序*'
- en: '[https://cansecwest.com/slides/2015/Liang_CanSecWest2015.pdf](https://cansecwest.com/slides/2015/Liang_CanSecWest2015.pdf)'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://cansecwest.com/slides/2015/Liang_CanSecWest2015.pdf](https://cansecwest.com/slides/2015/Liang_CanSecWest2015.pdf)'
- en: Performing SSL traffic interception by certificate manipulation
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过证书操作执行 SSL 流量拦截
- en: In *Intercepting traffic using Burp Suite and Wireshark* and *Using MITM proxy
    to modify and attack* recipes, we intercepted traffic of mobile applications.
    Today, most organizations are using SSL to protect data over the network. So,
    expect most real-world mobile applications to be under SSL. The next challenge
    we need to address is the interception of SSL traffic of mobile applications.
    This requires certification manipulation at the user or victim end.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在*使用 Burp Suite 和 Wireshark 拦截流量*以及*使用 MITM 代理修改并攻击*的配方中，我们拦截了移动应用程序的流量。如今，大多数组织都使用
    SSL 来保护网络上的数据。因此，期望大多数现实世界中的移动应用程序都使用 SSL。我们需要解决的下一个挑战是拦截移动应用程序的 SSL 流量。这需要在用户或受害者端进行证书操作。
- en: Getting ready
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Primary requirements for this recipe are mobile applications that use SSL. Additionally,
    you need all the tools we have used in the *Intercepting traffic using Burp Suite
    and Shark* and *Using MITM proxy to modify and attack* recipes in this chapter.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方的主要要求是使用 SSL 的移动应用程序。此外，您还需要本章中*使用 Burp Suite 和 Wireshark 拦截流量*以及*使用 MITM
    代理修改并攻击*配方中使用的所有工具。
- en: How to do it...
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Try to set up a proxy tool and intercept the traffic of an Android or iOS application
    as per the previously described methods in this chapter. You will notice for WAP-based
    applications, the SSL error occurs on the mobile browser. In the case of installed
    or hybrid applications, you might not see any error and the traffic will not be
    captured.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试根据本章前面描述的方法设置代理工具并拦截安卓或iOS应用的流量。你会注意到，对于基于WAP的应用，SSL错误会出现在移动浏览器中。对于已安装的应用或混合应用，你可能不会看到任何错误，流量也不会被捕获。
- en: In the case of WAP applications, if it provides an option of certificate acceptance,
    you can proceed and still capture the traffic in a proxy tool.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在WAP应用的情况下，如果提供证书接受选项，你可以继续操作并在代理工具中捕获流量。
- en: In the case of non-WAP applications, you need to forcefully make the application
    accept the proxy certificate. This can be achieved by adding the proxy certificate
    to the trusted credentials store.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非WAP应用，您需要强制应用接受代理证书。可以通过将代理证书添加到受信任的凭据存储中来实现。
- en: 'Let us use Charles Proxy for this recipe:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在本教程中使用Charles Proxy：
- en: Install Charles Proxy in our Android phone to be able to intercept Android applications
    traffic.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的安卓手机上安装Charles Proxy，以便能够拦截安卓应用的流量。
- en: The SSL Certificate for Charles Proxy prior to v3.10 can be downloaded from
    [http://www.charlesproxy.com/assets/legacy-ssl/charles.crt](http://www.charlesproxy.com/assets/legacy-ssl/charles.crt)
    .
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以从[http://www.charlesproxy.com/assets/legacy-ssl/charles.crt](http://www.charlesproxy.com/assets/legacy-ssl/charles.crt)下载Charles
    Proxy 版本v3.10之前的SSL证书。
- en: To install the Charles Proxy certificate, open the preceding URL from the Android
    phone.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装Charles Proxy证书，请在安卓手机上打开前述网址。
- en: The proxy installation screen asks you to provide a name; we will write `charles`
    here, as shown in the following screenshot:![How to do it...](graphics/image_04_015.jpg)
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代理安装界面会要求你提供一个名称；我们将在这里输入`charles`，如下截图所示：![如何操作...](graphics/image_04_015.jpg)
- en: The next steps prompt us to provide a lock screen PIN or password. Once we do
    so, we get a message that `Charles is installed`.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来的步骤提示我们提供锁屏PIN码或密码。完成后，我们会收到一条消息，表示`Charles已安装`。
- en: 'Let us go to the **Trusted credentials** store to verify that the certificate
    is installed. Navigation to this is: **Settings** | **Security** | **Trusted credentials**
    | **User**:![How to do it...](graphics/image_04_016.jpg)'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '让我们进入**受信任的凭据**存储，验证证书是否已安装。导航路径为：**设置** | **安全性** | **受信任的凭据** | **用户**: ![如何操作...](graphics/image_04_016.jpg)'
- en: Notice from the preceding screenshot that the `Charles Proxy SSL Certificate`
    is present and installed.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的截图中可以看到，`Charles Proxy SSL证书`已存在并安装。
- en: The next steps are smooth and are similar to the fourth recipe of this chapter.
    This way, SSL Proxy can be set for mobile applications and traffic can be tampered
    to attack the application business logic.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的步骤非常简单，类似于本章第四个操作步骤。通过这种方式，可以为移动应用设置SSL代理，并篡改流量以攻击应用的业务逻辑。
- en: How it works...
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: SSL proxy interception works because SSL protocol is inherently vulnerable to
    MITM attacks. If two people (`A` and `B`) communicate using SSL, each of them
    has their public and private keys. Consider the MITM scenario where an attacker
    comes in between the communication path of `A` and `B`.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: SSL代理拦截之所以有效，是因为SSL协议天生容易受到MITM攻击。如果两个人（`A`和`B`）通过SSL进行通信，每个人都有自己的公钥和私钥。假设发生MITM攻击，攻击者介入了`A`和`B`之间的通信路径。
- en: This attacker (or MITM) intercepts and exchanges the key with `A` and `B`. With
    this changed key, the attacker is able to encrypt and decrypt the communication
    initiated by either `A` or `B` and send it seamlessly to the other party.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者（或MITM）拦截并与`A`和`B`交换密钥。通过这个更改后的密钥，攻击者能够加密和解密由`A`或`B`发起的通信，并将其无缝地发送给对方。
- en: This attack does pop up a SSL certificate error, and only when the user accepts
    the fake (or attacker's) certificate, is the communication initiated. In this
    recipe, we forced the acceptance of Charles Proxy on an Android phone by manual
    installation of the same. Real world MITM attacks rely either on the user somehow
    accepting the certificate or to figure out an alternate attack channel to install
    the fake certificate in the trusted store.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这种攻击会弹出SSL证书错误，只有当用户接受伪造（或攻击者的）证书时，通信才会被发起。在本教程中，我们通过手动安装相同证书，强制安卓手机接受Charles
    Proxy。现实中的MITM攻击通常依赖于用户以某种方式接受证书，或者通过其他攻击渠道将伪造证书安装到受信任的存储中。
- en: There's more...
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: Similar to how a proxy certificate was installed for Charles Proxy, SSL certificates
    for other proxy tools such as Burp Suite, Fiddler, and so on, can be installed
    in various mobile devices. The same steps can be followed to install the SSL certificates
    in emulators or simulators.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于为 Charles Proxy 安装代理证书的方法，可以在其他代理工具（如 Burp Suite、Fiddler 等）上为 SSL 证书进行安装，适用于各种移动设备。可以按照相同的步骤在模拟器或仿真器中安装
    SSL 证书。
- en: See also
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '[https://en.wikipedia.org/wiki/Man-in-the-middle_attack](https://en.wikipedia.org/wiki/Man-in-the-middle_attack)'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Man-in-the-middle_attack](https://en.wikipedia.org/wiki/Man-in-the-middle_attack)'
- en: '[http://www.symantec.com/connect/blogs/android-mobile-app-pen-test-tricks-part-i-installing-ca-certificates](http://www.symantec.com/connect/blogs/android-mobile-app-pen-test-tricks-part-i-installing-ca-certificates)'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.symantec.com/connect/blogs/android-mobile-app-pen-test-tricks-part-i-installing-ca-certificates](http://www.symantec.com/connect/blogs/android-mobile-app-pen-test-tricks-part-i-installing-ca-certificates)'
- en: '[http://resources.infosecinstitute.com/android-application-penetration-testing-setting-certificate-installation-goatdroid-installation/](http://resources.infosecinstitute.com/android-application-penetration-testing-setting-certificate-installation-goatdroid-installation/)'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://resources.infosecinstitute.com/android-application-penetration-testing-setting-certificate-installation-goatdroid-installation/](http://resources.infosecinstitute.com/android-application-penetration-testing-setting-certificate-installation-goatdroid-installation/)'
- en: Using a mobile configuration profile to set up a VPN and intercept traffic in
    iOS devices
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用移动配置文件设置 VPN 并在 iOS 设备中截获流量
- en: iOS allows iDevices to configure and participate in VPN. This VPN channel opens
    up another communication channel and so we can use this channel also for setting
    a proxy to intercept traffic.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: iOS 允许 iDevice 配置并参与 VPN。这个 VPN 通道打开了另一条通信通道，我们也可以利用这个通道设置代理以截获流量。
- en: Getting ready
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We require proxy tools, an iDevice, and other requirements of a wireless pentesting
    lab.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要代理工具、iDevice 以及无线渗透测试实验室的其他要求。
- en: Additionally, you need to configure a VPN server on a machine. Open VPN or PPTP
    Server can be used for the same.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还需要在一台计算机上配置 VPN 服务器。可以使用 Open VPN 或 PPTP 服务器来完成此操作。
- en: How to do it...
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作方法...
- en: 'Once you are ready, perform the following steps:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦准备好，执行以下步骤：
- en: Download **PPTP Server** from http://poptop.sourceforge.net/dox/ and install
    it on a Linux machine.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 http://poptop.sourceforge.net/dox/ 下载**PPTP Server**并将其安装在 Linux 机器上。
- en: Edit the `pptpd.conf` files to allocate **IP ranges** for the VPN clients and
    provide a static IP to the VPN server, which will also act as a gateway.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `pptpd.conf` 文件，为 VPN 客户端分配**IP范围**，并为 VPN 服务器提供静态 IP，VPN 服务器还将充当网关。
- en: Further configure **DNS****servers** for the **VPN** clients.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进一步配置**DNS** **服务器**为**VPN**客户端。
- en: Lastly, configure the **VPN** password and adjust network settings if required.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，配置**VPN**密码，并在需要时调整网络设置。
- en: Once the configuration edits are done, save the `pptpd.conf` file and restart
    the VPN service. This makes sure that the VPN server is up and working.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置编辑完成后，保存 `pptpd.conf` 文件并重新启动 VPN 服务。这确保 VPN 服务器已启动并正常工作。
- en: Now the mobile VPN client needs to be configured in the iDevice. Locate the
    **VPN settings** on your iDevice and edit the **PPTP** settings.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在需要在 iDevice 中配置移动 VPN 客户端。找到 iDevice 上的**VPN设置**并编辑**PPTP**设置。
- en: Configure the server **IP address**, **VPN authentication credentials**, and
    so on. These settings are shown in the following screenshot:![How to do it...](graphics/image_04_017.jpg)
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置服务器**IP地址**、**VPN认证凭据**等。以下截图显示了这些设置：![操作方法...](graphics/image_04_017.jpg)
- en: The preceding step makes sure that the iDevice is now part of the VPN, where
    the default gateway is under our control.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述步骤确保 iDevice 现在已经是 VPN 的一部分，其中默认网关已由我们控制。
- en: Now let us set a proxy to this VPN client, that is, our iDevice. Under the **VPN
    settings**, scroll down to locate the **Proxy settings**, where you can configure
    **Proxy server IP address** and **Port** and provide proxy authentication details
    if required. This is shown in the following screenshot:![How to do it...](graphics/image_04_018.jpg)
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们为这个 VPN 客户端设置代理，即我们的 iDevice。在**VPN设置**下，向下滚动找到**代理设置**，在这里您可以配置**代理服务器
    IP 地址**和**端口**，并在需要时提供代理身份验证详细信息。如下截图所示：![操作方法...](graphics/image_04_018.jpg)
- en: Now the Burp or Charles Proxy running at the proxy IP address starts capturing
    the traffic.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在代理 IP 地址上运行的 Burp 或 Charles Proxy 开始捕获流量。
- en: How it works...
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: This recipe may sound complicated, with VPN server, client configuration, and
    proxy. In reality, it works very simply. Once a VPN network is set, all the components
    such as iDevice, VPN server, and Proxy tool are part of the same network. Now
    a network proxy is in this VPN network. So nothing has changed, just that it is
    a VPN proxy rather than a Wi-Fi proxy, as we have seen earlier. The fact that
    iOS provides VPN configuration as a feature on iDevices makes it fairly easy.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方听起来可能很复杂，涉及 VPN 服务器、客户端配置和代理。但实际上，操作起来非常简单。一旦设置了 VPN 网络，像 iDevice、VPN 服务器和代理工具这样的所有组件都是同一个网络的一部分。现在，网络代理位于这个
    VPN 网络中。所以一切都没有改变，只是这是一个 VPN 代理，而不是我们之前见过的 Wi-Fi 代理。iOS 提供 VPN 配置作为 iDevices 功能使得操作相当简单。
- en: The importance of this recipe can be realized more on cellular network traffic
    interception, which can be very difficult otherwise.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 可以更好地认识到此配方在拦截移动网络流量方面的重要性，否则可能非常困难。
- en: There's more...
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容…
- en: 'OpenVPN server and clients can be looked at as an alternative to PPTP Server.
    The steps are quite similar:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVPN 服务器和客户端可以作为 PPTP 服务器的替代方案来看待。步骤非常相似：
- en: Install the OpenVPN server on a machine.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一台计算机上安装 OpenVPN 服务器。
- en: Install the OpenVPN client on an iDevice.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 iDevice 上安装 OpenVPN 客户端。
- en: Run a proxy tool like Burp or Charles proxy.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行类似 Burp 或 Charles 代理的代理工具。
- en: Once all the preceding three components are on the same VPN network, configure
    proxy settings in the iDevice to initiate the traffic interception.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦上述三个组件都在同一 VPN 网络中，配置 iDevice 中的代理设置以启动流量拦截。
- en: See also
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[https://thesprawl.org/research/ios-data-interception/](https://thesprawl.org/research/ios-data-interception/)'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://thesprawl.org/research/ios-data-interception/](https://thesprawl.org/research/ios-data-interception/)'
- en: '[http://poptop.sourceforge.net/dox/](http://poptop.sourceforge.net/dox/)'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://poptop.sourceforge.net/dox/](http://poptop.sourceforge.net/dox/)'
- en: '[https://itunes.apple.com/in/app/openvpn-connect/id590379981?mt=8](https://itunes.apple.com/in/app/openvpn-connect/id590379981?mt=8)'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://itunes.apple.com/in/app/openvpn-connect/id590379981?mt=8](https://itunes.apple.com/in/app/openvpn-connect/id590379981?mt=8)'
- en: Bypassing SSL certificate validation in Android and iOS
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绕过 Android 和 iOS 的 SSL 证书验证
- en: SSL certificate validation is implemented in mobile applications for forceful
    usage of SSL with trusted certificates. A server certificate is pinned to the
    mobile application. SSL certificates get stored in the mobile device's trusted
    store and the mobile application is coded to use the same, while initiating connection
    to the server. This is also known as **certificate pinning**.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: SSL 证书验证在移动应用中实现，强制使用带有受信任证书的 SSL。服务器证书被固定到移动应用中。SSL 证书存储在移动设备的信任存储中，并且移动应用被编码为在与服务器建立连接时使用相同的证书。这也被称为**证书
    pinning**。
- en: Certificate pinning can be bypassed, which results in overall SSL certificate
    validation bypass. Let us learn certificate pinning bypass for both Android and
    iOS devices.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 可以绕过证书 pinning，这导致整体 SSL 证书验证绕过。让我们学习如何在 Android 和 iOS 设备上绕过证书 pinning。
- en: Getting ready
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will need the SSL interception tools and other tools as mentioned across
    various recipes in this chapter, application reverse engineering or decompiler
    tools, and the applications that use SSL pinning.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要 SSL 拦截工具和其他在本章节中提到的工具，如应用程序逆向工程或反编译工具，以及使用 SSL pinning 的应用程序。
- en: How to do it...
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Follow these steps to bypass pinning:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤绕过 pinning：
- en: Install a mobile application that uses SSL pinning.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装使用 SSL pinning 的移动应用程序。
- en: Try to set Burp proxy and notice that there is an error, and a successful connection
    is not established. This happens because the mobile application is coded to use
    a pinned certificate only. Since the Burp proxy certificate is not pinned, the
    application does not initiate the SSL communication. So, this makes it obvious
    that we are required to pin the Burp proxy certificate to the mobile application.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试设置 Burp 代理，并注意出现错误，无法建立成功连接。这是因为移动应用程序只编码为仅使用固定的证书。由于 Burp 代理证书未固定，应用程序不会启动
    SSL 通信。因此，显而易见，我们需要将 Burp 代理证书固定到移动应用程序中。
- en: Let us first install the Burp proxy certificate to the mobile device trusted
    certificate store. For this, please follow the *Performing SSL Traffic Interception
    by Certificate Manipulation* recipe, previously explained in this chapter.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先将 Burp 代理证书安装到移动设备的信任证书存储中。为此，请按照之前在本章节中解释过的 *通过证书操作执行 SSL 流量拦截* 配方进行操作。
- en: The application now needs to be configured to remove pinning and/or use the
    new certificate stored on the mobile device. For this, you need to locate the
    application code that is responsible for using the pinned certificate, remove
    this code, and repack the application. The newly-packed application does not use
    the pinned certificate now and uses the trusted certificate of the Burp proxy.
    This way, the SSL proxy is set and the certificate validation is bypassed.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，应用程序需要配置以删除钉扎或使用存储在移动设备上的新证书。为此，您需要找到负责使用钉扎证书的应用程序代码，删除此代码，并重新打包应用程序。重新打包的应用程序现在不使用钉扎证书，而是使用
    Burp 代理的受信任证书。通过这种方式，SSL 代理得以设置，证书验证被绕过。
- en: How it works...
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The SSL pinning bypass works because it relies on checking that the user-supplied
    certificates are not allowed and only pinned certificates are used. It does not
    try to match the pinned certificate to the parameters belonging to the server
    certificate. In the whole process, it forgets that the mobile device is in user
    control and that they can conduct hacks to disable pinning.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: SSL 钉扎绕过之所以有效，是因为它依赖于检查用户提供的证书是否被允许，且只使用钉扎证书。它并没有尝试将钉扎证书与服务器证书相关联的参数进行匹配。在整个过程中，它忽略了移动设备由用户控制这一事实，而用户可以进行黑客攻击来禁用钉扎。
- en: Proxy certificates (or fake certificates) can be pushed into the mobile device's
    trusted store via different hacks. Also, the application is modified to drop the
    use of pinned certificates. Mobile applications fall for it and start communicating
    using fake or proxy certificates, which are already trusted by the mobile device.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 代理证书（或伪造证书）可以通过不同的黑客手段被推送到移动设备的受信任存储中。此外，应用程序被修改为丢弃钉扎证书的使用。移动应用程序因此受到影响，开始使用已经被移动设备信任的伪造或代理证书进行通信。
- en: There's more...
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The preceding method relied on application code being manipulated to drop the
    pinned certificate. There is another method where code need not be manipulated
    but the keystore is manipulated to add proxy (or fake) certificates to the keystore.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 前述方法依赖于操作应用代码以删除钉扎证书。还有另一种方法不需要操作代码，而是通过操作密钥库将代理（或伪造）证书添加到密钥库中。
- en: This requires a keystore password, which is hardcoded into the mobile application
    code. Keystore passwords can be obtained from decompiled code. Tools like **smali**/baksmali
    can be used for the same.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要一个密钥库密码，它是硬编码在移动应用程序代码中的。密钥库密码可以从反编译的代码中获得。像 **smali**/baksmali 这样的工具可以用来完成此操作。
- en: Finally, locate the keystore. The most probable location in Android is under
    the `res` folder. Now use the `keytool` command to add the proxy certificate to
    the keystore. Repack and sign the application. Now, it uses the proxy certificate
    and traffic interception works, thus bypassing the SSL certificate validation.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，找到密钥库。在 Android 中，最可能的位置是在 `res` 文件夹下。现在，使用 `keytool` 命令将代理证书添加到密钥库中。重新打包并签名应用程序。现在，它使用代理证书，流量拦截生效，从而绕过
    SSL 证书验证。
- en: Tip
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Make a point to check that the mobile application source code does not have
    any type of code to bypass SSL validation. A few developers prefer to write SSL
    validation bypass code for testing and debugging purposes. This code, when moved
    to production, should be sanitized to remove such bypass code.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 要特别检查移动应用程序源代码中是否存在绕过 SSL 验证的代码。一些开发者喜欢编写绕过 SSL 验证的代码用于测试和调试目的。该代码在进入生产环境时，应当经过清理，去除此类绕过代码。
- en: See also
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Examining iOS App Data storage* and *Keychain security vulnerabilities*, [Chapter
    3](ch03.html "Chapter 3. Auditing Mobile Applications"), *Auditing Mobile Applications*.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*检查 iOS 应用数据存储* 和 *钥匙串安全漏洞*，[第 3 章](ch03.html "第 3 章：移动应用审计")，*移动应用审计*。'
- en: '[https://media.blackhat.com/bh-us-12/Turbo/Diquet/BH_US_12_Diqut_Osborne_Mobile_Certificate_Pinning_Slides.pdf](https://media.blackhat.com/bh-us-12/Turbo/Diquet/BH_US_12_Diqut_Osborne_Mobile_Certificate_Pinning_Slides.pdf)'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://media.blackhat.com/bh-us-12/Turbo/Diquet/BH_US_12_Diqut_Osborne_Mobile_Certificate_Pinning_Slides.pdf](https://media.blackhat.com/bh-us-12/Turbo/Diquet/BH_US_12_Diqut_Osborne_Mobile_Certificate_Pinning_Slides.pdf)'
