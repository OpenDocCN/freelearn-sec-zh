- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Key Management with KMS and CloudHSM
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用KMS和CloudHSM进行密钥管理
- en: Encryption is like turning our message into a secret code so that only the intended
    recipient can understand it. Imagine that we have a message that we do not want
    anyone else to read. The message, in its original form, is called **plain text**
    . After we encode it, it becomes **cipher text** , which looks like gibberish
    to anyone who does not know how to decode it. Converting the plain text into cipher
    text is called **encryption** , and converting the cipher text back into plain
    text is called **decryption** . To carry out encryption and decryption, we use
    a set of mathematical rules known as an **encryption algorithm** . Examples of
    encryption algorithms include **Rivest-Shamir-Adleman** ( **RSA** ), **Advanced
    Encryption Standard** ( **AES** ), **Data Encryption Standard** ( **DES** ), **Triple
    Data Encryption Standard** ( **3DES** ), **Blowfish** , **Twofish** , **Elliptic
    Curve Cryptography** ( **ECC** ), **International Data Encryption Algorithm**
    ( **IDEA** ), and **Pretty Good** **Privacy** ( **PGP** ).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 加密就像将我们的消息转换成秘密代码，以便只有预期的接收者能够理解。想象一下，我们有一条不希望任何其他人阅读的消息。原始形式的消息被称为**明文**。在我们对其进行编码后，它变成了**密文**，对于不知道如何解码的人来说，看起来像无意义的话语。将明文转换为密文称为**加密**，将密文转换回明文称为**解密**。为了进行加密和解密，我们使用一组称为**加密算法**的数学规则。加密算法的示例包括**Rivest-Shamir-Adleman**（**RSA**）、**高级加密标准**（**AES**）、**数据加密标准**（**DES**）、**三重数据加密标准**（**3DES**）、**Blowfish**、**Twofish**、**椭圆曲线加密**（**ECC**）、**国际数据加密算法**（**IDEA**）和**非常好的隐私**（**PGP**）。
- en: 'You might be wondering, if encryption algorithms are public knowledge, what’s
    to prevent anyone from decrypting the data? The answer lies in the use of **encryption
    keys** – unique strings of characters that safeguard data when used alongside
    the algorithm. There are two primary types of encryptions: **symmetric** and **asymmetric**
    . Symmetric encryption employs the same key for both encryption and decryption,
    necessitating that this key be kept confidential between the parties involved.
    Asymmetric encryption, in contrast, utilizes a key pair – one key for encryption
    and the other for decryption. For instance, a public key, which can be openly
    shared, can be used for encryption, and a private key, which is strictly guarded
    by the intended recipient, can be used for decryption. Thus, the privacy of encrypted
    data remains protected, even with the widespread knowledge of the algorithm, due
    to the confidential nature of the encryption keys.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，如果加密算法是公开的知识，那么有什么阻止任何人解密数据呢？答案在于使用**加密密钥** - 一组唯一的字符字符串，与算法一起使用时保护数据。有两种主要类型的加密：**对称**和**非对称**。对称加密使用相同的密钥进行加密和解密，这要求该密钥在涉及的各方之间保密。相比之下，非对称加密使用密钥对
    - 一个用于加密，另一个用于解密。例如，公钥可以公开共享，用于加密，而私钥则由预期接收者严格保护，用于解密。因此，即使算法的广泛知识，由于加密密钥的机密性，加密数据的隐私仍然受到保护。
- en: AWS **Key Management Service** ( **KMS** ) is the primary service within the
    AWS cloud that helps us create and manage encryption keys and is the primary focus
    of this chapter. KMS supports both symmetric and asymmetric encryption keys. Based
    on ownership, we can categorize KMS keys as **customer-managed keys** , **AWS-managed
    keys** , and **AWS-owned keys** . With customer-managed keys, we create and manage
    keys. With AWS-managed keys, AWS creates a key in our account for a particular
    service, such as S3, EBS, and so on, and manages the key for us. AWS also has
    another key type called AWS-owned keys that AWS creates and manages for use cases
    such as default encryption for services such as S3. With both customer-managed
    and AWS-managed keys, we have visibility into various keys and their usage through
    CloudTrail logs. However, with AWS-owned keys, we do not have any visibility.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: AWS **密钥管理服务**（**KMS**）是AWS云中的主要服务，帮助我们创建和管理加密密钥，也是本章的主要焦点。KMS支持对称和非对称加密密钥。根据所有权，我们可以将KMS密钥分类为**客户管理的密钥**、**AWS管理的密钥**和**AWS拥有的密钥**。使用客户管理的密钥，我们创建和管理密钥。使用AWS管理的密钥，AWS在我们的账户中为特定服务（如S3、EBS等）创建密钥，并为我们管理密钥。AWS还有另一种称为AWS拥有的密钥，AWS为服务（如S3的默认加密）创建和管理的密钥。使用客户管理和AWS管理的密钥，我们可以通过CloudTrail日志查看各种密钥及其使用情况。然而，对于AWS拥有的密钥，我们没有任何可见性。
- en: In this chapter, we will learn how to work with AWS **CloudHSM** . CloudHSM
    is another service within AWS that allows us to manage encryption keys but uses
    dedicated HSMs for enhanced security. KMS makes use of shared **hardware security**
    **modules** ( **HSMs** ).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用AWS **CloudHSM**。CloudHSM是AWS中的另一个服务，它允许我们管理加密密钥，但使用专用的HSM来增强安全性。KMS则使用共享的**硬件安全模块**（**HSMs**）。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将涵盖以下配方：
- en: Creating keys in KMS
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在KMS中创建密钥
- en: Creating keys with external key material (BYOK)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用外部密钥材料创建密钥（BYOK）
- en: Rotating keys in KMS
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在KMS中旋转密钥
- en: Granting permissions programmatically with grants
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用授权程序化授予权限
- en: Using key policies with conditional keys
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用带条件密钥的密钥策略
- en: Sharing customer-managed keys across accounts
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在账户之间共享客户管理的密钥
- en: Creating, initializing, and activating a CloudHSM cluster
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建、初始化和激活CloudHSM集群
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Before diving into the recipes in this chapter, we need to ensure we have the
    following requirements in place:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究本章的配方之前，我们需要确保已经具备以下要求：
- en: We need an active AWS account to complete the recipes in this chapter. We can
    use an account that is part of AWS Organizations or a standalone account. I will
    be using the **awsseccb-sandbox-1** account that we created in the *Multi-account
    management with AWS Organizations* recipe in [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020)
    . However, I won’t be utilizing any AWS Organizations features, meaning you can
    follow these steps with a standalone account too.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要一个有效的AWS账户来完成本章中的配方。可以使用属于AWS Organizations的账户或独立账户。我将使用我们在[*第1章*](B21384_01.xhtml#_idTextAnchor020)中为*使用AWS
    Organizations进行多账户管理*创建的**awsseccb-sandbox-1**账户。但我不会使用AWS Organizations的任何功能，这意味着你也可以使用独立账户来跟随这些步骤。
- en: For administrative actions, we need a user who has **AdministratorAccess** permission
    to the AWS account we are working with. This can be an **IAM Identity Center user**
    or an IAM user. I will be using the IAM Identity Center user **awsseccbadmin1**
    we created in the *User management and SSO with IAM Identity Center* recipe in
    [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020) . However, I won’t be utilizing
    any IAM Identity Center features, meaning you can follow these steps with an IAM
    user, too, if the user has **AdministratorAccess** permission within the account.
    You can create an IAM user by following the *Setting up IAM, account aliases,
    and billing alerts* recipe in [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020)
    .
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于管理员操作，我们需要一个具有**AdministratorAccess**权限的用户来操作我们正在使用的AWS账户。这个用户可以是**IAM身份中心用户**或IAM用户。我将使用在[*第1章*](B21384_01.xhtml#_idTextAnchor020)中我们为*用户管理和使用IAM身份中心的单点登录*创建的IAM身份中心用户**awsseccbadmin1**。不过，我不会使用IAM身份中心的任何功能，这意味着如果用户在账户中拥有**AdministratorAccess**权限，你也可以使用IAM用户来执行这些步骤。你可以参考[*第1章*](B21384_01.xhtml#_idTextAnchor020)中的*设置IAM、账户别名和账单警报*配方来创建IAM用户。
- en: Basic knowledge of encryption, including symmetric keys, asymmetric keys, and
    **public key infrastructure** ( **PKI** ) will help you understand the recipes
    within this chapter.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对加密的基本知识（包括对称密钥、非对称密钥和**公钥基础设施**（**PKI**））有一定了解，将帮助你理解本章中的配方。
- en: The code files for this book are available at [https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition](https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition)
    . The code files for this chapter are available at [https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition/tree/main/Chapter03](https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition/tree/main/Chapter03)
    .
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的代码文件可以在[https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition](https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition)
    找到。本章的代码文件可以在[https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition/tree/main/Chapter03](https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition/tree/main/Chapter03)
    找到。
- en: Creating keys in KMS
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在KMS中创建密钥
- en: In this recipe, we will create a customer-managed KMS key with the key type
    set to **symmetric key** . A symmetric key is the most common key that we will
    create with KMS. It is also worth noting that KMS keys, which are the primary
    resources within KMS, were once known as **customer master keys** ( **CMKs** ).
    This renaming helps avoid confusion with the term customer-managed keys, which
    could also be abbreviated as CMKs.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将创建一个自定义管理的KMS密钥，密钥类型设置为**对称密钥**。对称密钥是我们使用KMS创建的最常见的密钥。还需要注意的是，KMS密钥，作为KMS中的主要资源，曾被称为**客户主密钥**（**CMKs**）。这种更名有助于避免与“客户管理密钥”这一术语混淆，后者也可以缩写为CMKs。
- en: Getting ready
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We’ll need the following to complete this recipe:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要以下内容来完成此操作：
- en: A working AWS account ( **awsseccb-sandbox-1** ) and a user ( **awsseccbadmin1**
    ), as described in the *Technical* *requirements* section.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有效的 AWS 账户（**awsseccb-sandbox-1**）和一个用户（**awsseccbadmin1**），如*技术* *要求*部分所述。
- en: Two users or roles. These could be IAM users or roles, including those corresponding
    to IAM Identity Center users. I will be using the **awsseccb_admin1** user as
    the **key administrator** . Key administrators can administer the key through
    the KMS API. I will use another user, **awsseccb_user1** , as the **key user**
    . Key users can use the customer-managed key to encrypt and decrypt data. We can
    even use the same user as both a key administrator and a key user. I will also
    explain how we can use a role corresponding to an IAM Identity Center user as
    a key administrator or key user.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个用户或角色。这些可以是 IAM 用户或角色，包括与 IAM 身份中心用户对应的角色。我将使用**awsseccb_admin1**用户作为**密钥管理员**。密钥管理员可以通过
    KMS API 管理密钥。我将使用另一个用户**awsseccb_user1**作为**密钥用户**。密钥用户可以使用客户管理的密钥加密和解密数据。我们甚至可以使用相同的用户同时作为密钥管理员和密钥用户。我还将解释如何使用与
    IAM 身份中心用户对应的角色作为密钥管理员或密钥用户。
- en: How to do it...
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can create a customer-managed key in KMS from the console as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过控制台在 KMS 中创建一个客户管理的密钥，具体步骤如下：
- en: Log in to the AWS Management Console and go to **Key** **Management Service**
    .
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到 AWS 管理控制台并进入**密钥管理服务**。
- en: Click on **Customer-managed keys** from the left sidebar.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧边栏点击**客户管理密钥**。
- en: Click **Create key** .
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建密钥**。
- en: 'In the **Configure key** step, as shown in the following figure, select **Symmetric**
    for **Key type** , and choose **Encrypt and decrypt** for **Key usage** :'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**配置密钥**步骤中，如下图所示，选择**对称**作为**密钥类型**，并选择**加密和解密**作为**密钥用途**：
- en: '![Figure 3.1 – Configuring Key type and Key usage](image/B21384_03_1.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.1 – 配置密钥类型和密钥使用](image/B21384_03_1.jpg)'
- en: Figure 3.1 – Configuring Key type and Key usage
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – 配置密钥类型和密钥使用
- en: 'Expand **Advanced options** and verify that **Key material origin** is set
    to **KMS - recommended** and **Regionality** is set to **Single-region key** ,
    as shown in the following figure. Then, click **Next** to proceed to the **Add**
    **labels** steps:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开**高级选项**并验证**密钥材料来源**已设置为**KMS - 推荐**，并且**区域性**已设置为**单一区域密钥**，如图所示。然后，点击**下一步**进入**添加标签**步骤：
- en: '![Figure 3.2 – Advanced options](image/B21384_03_2.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.2 – 高级选项](image/B21384_03_2.jpg)'
- en: Figure 3.2 – Advanced options
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2 – 高级选项
- en: In the **Add labels** step, enter **seccb-dev-encryption** for **Alias** and
    **Dev Encryption Key for the Sec CB project** for **Description** . Optionally,
    add tags by clicking on the **Add tag** button. Click **Next** to proceed to the
    **Define key administrative** **permissions** step.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**添加标签**步骤中，输入**seccb-dev-encryption**作为**别名**，并为**描述**输入**Sec CB 项目的开发加密密钥**。可选地，通过点击**添加标签**按钮添加标签。点击**下一步**进入**定义关键管理权限**步骤。
- en: In the **Define key administrative permissions** step, select **Key administrators**
    , who are the IAM users and roles who can administer this key through the KMS
    API. I have selected **awsseccb_admin1** . However, as we can see, if we are using
    an IAM Identity Center user, we can select a role corresponding to the combination
    of that IAM Identity Center user and a **permission set** .
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**定义关键管理权限**步骤中，选择**关键管理员**，这些是可以通过 KMS API 管理此密钥的 IAM 用户和角色。我已选择**awsseccb_admin1**。然而，正如我们所见，如果使用
    IAM 身份中心用户，我们可以选择与该 IAM 身份中心用户和**权限集**组合对应的角色。
- en: '![Figure 3.3 – Defining key administrative permissions](image/B21384_03_3.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.3 – 定义关键管理权限](image/B21384_03_3.jpg)'
- en: Figure 3.3 – Defining key administrative permissions
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – 定义关键管理权限
- en: For **Key deletion** , check **Allow key administrators to delete this key**
    . Click **Next** to proceed to the **Define key usage** **permissions** step.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**密钥删除**，勾选**允许密钥管理员删除此密钥**。点击**下一步**进入**定义密钥使用权限**步骤。
- en: Regarding the **Define key usage permissions** step, select **Key users** ,
    who are IAM users and roles who can use the customer-managed key to encrypt and
    decrypt data. In the same step, we can optionally add **Other AWS accounts** that
    can use this key. I have selected the **awsseccb_user1** user. Similar to *Step
    7* , if we are using an IAM Identity Center user, we can select a role corresponding
    to the combination of that IAM Identity Center user and a permission set. Click
    **Next** .
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关于**定义密钥使用权限**步骤，选择**密钥用户**，即可以使用客户管理密钥进行数据加密和解密的 IAM 用户和角色。在同一步骤中，我们还可以选择**其他
    AWS 账户**，使其能够使用该密钥。我选择了**awsseccb_user1**用户。与*步骤 7*类似，如果我们使用 IAM Identity Center
    用户，我们可以选择与该 IAM Identity Center 用户和权限集组合对应的角色。点击**下一步**。
- en: 'Review **Key configuration** , **Alias and description** , **Tags** , and **Key
    policy** in JSON format. Click **Finish** to create the key. We should see a message
    stating that the key has been created, as well as details of the key ID, as shown
    in the following figure:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审查**密钥配置**、**别名和描述**、**标签**和**密钥策略**（JSON 格式）。点击**完成**以创建密钥。我们应该看到一条消息，显示密钥已创建，并显示密钥
    ID 的详细信息，如下图所示：
- en: '![Figure 3.4 – Key creation success message](image/B21384_03_4.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.4 – 密钥创建成功消息](image/B21384_03_4.jpg)'
- en: Figure 3.4 – Key creation success message
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4 – 密钥创建成功消息
- en: The key policy that’s generated by AWS is kept within the code files for reference
    as **generated-key-policy.json** .
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 生成的密钥策略保存在代码文件中，供参考，文件名为**generated-key-policy.json**。
- en: In this recipe, we created a KMS key. We will go through some important concepts
    related to KMS keys in the next section.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们创建了一个 KMS 密钥。在下一节中，我们将介绍一些与 KMS 密钥相关的重要概念。
- en: How it works...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Creating encryption keys within AWS KMS involves a straightforward process.
    First, we need an active AWS account with an IAM or IAM Identity Center user with
    administrative privileges to create and manage keys. We should have the **kms:CreateKey**
    permission to create new KMS keys. To add tags, we need **kms:TagResource** permission.
    We used a user with **AdministratorAccess** for this recipe and hence had both
    of these permissions.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AWS KMS 中创建加密密钥是一个简单的过程。首先，我们需要一个具有管理权限的 IAM 用户或 IAM Identity Center 用户的有效
    AWS 账户，以便创建和管理密钥。我们需要**kms:CreateKey**权限来创建新的 KMS 密钥。为了添加标签，我们还需要**kms:TagResource**权限。在本教程中，我们使用了一个具有**AdministratorAccess**权限的用户，因此拥有这两项权限。
- en: While configuring the key, we selected the symmetric KMS key option for general
    encryption and decryption purposes, as shown in *Figure 3* *.1* . In the **Advanced
    options** section, we selected the **key material** origin as KMS, which is the
    recommended option. In the world of cryptography, key material refers to the string
    of bits that are used in a cryptographic algorithm and is the core element that
    encrypts and decrypts our data. Each AWS KMS key is associated with a key material,
    as referenced in its metadata. By default, AWS is responsible for creating the
    key material using FIPS-validated hardware security modules, and it never leaves
    AWS KMS unencrypted. The sole exception lies in the public keys of asymmetric
    key pairs, which can be exported for outside use.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置密钥时，我们选择了用于一般加密和解密目的的对称 KMS 密钥选项，如*图 3.1*所示。在**高级选项**部分，我们将**密钥材料**的来源选择为
    KMS，这是推荐的选项。在加密学领域，密钥材料指的是在加密算法中使用的比特字符串，是加密和解密我们数据的核心元素。每个 AWS KMS 密钥都与一个密钥材料相关联，相关信息存储在其元数据中。默认情况下，AWS
    负责使用 FIPS 验证的硬件安全模块创建密钥材料，并且该材料永远不会以未加密的形式离开 AWS KMS。唯一的例外是非对称密钥对的公钥，它可以导出供外部使用。
- en: 'The key material’s origin is a specific attribute of a KMS key in AWS KMS,
    which indicates the source from which its key material is derived. The key material
    origin values for a KMS key can be one of the following, as we saw in *Figure
    3* *.2* :'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥材料的来源是 AWS KMS 中 KMS 密钥的一个特定属性，用于指示其密钥材料的来源。从*图 3.2*中我们可以看到，KMS 密钥的密钥材料来源值可以是以下之一：
- en: '**KMS - recommended** is the default and most recommended. If we select this
    option, AWS handles the creation and management of the key material.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**KMS - 推荐**是默认选项，也是最推荐的选项。如果选择此选项，AWS 会处理密钥材料的创建和管理。'
- en: '**External (Import key material)** is for people who prefer to import their
    own key material. This requires us to manage and secure this material.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外部（导入密钥材料）**适用于那些希望导入自己密钥材料的用户。这样我们就需要管理和保护这些材料。'
- en: With **AWS CloudHSM key store** , AWS KMS creates the key material in our AWS
    CloudHSM cluster.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**AWS CloudHSM 密钥库**时，AWS KMS 在我们的 AWS CloudHSM 集群中创建密钥材料。
- en: '**External key store** is used when the key material is in an external key
    manager outside AWS. This is specific to KMS keys in an external key store.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外部密钥存储** 用于当密钥材料存储在 AWS 之外的外部密钥管理器中时。这是专门针对外部密钥存储中的 KMS 密钥。'
- en: As we saw in *Figure 3* *.3* , we can assign IAM users or roles as key administrators.
    Key administrators are the IAM users and roles who can administer this key through
    the KMS API. We also chose the option to allow key administrators to delete the
    key. Similarly, we can assign IAM users or roles as key users. Key users are IAM
    users and roles that can use the customer-managed key to encrypt and decrypt data.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在 *图 3* *.3* 中看到的那样，我们可以将 IAM 用户或角色指定为密钥管理员。密钥管理员是可以通过 KMS API 管理此密钥的 IAM
    用户和角色。我们还选择了允许密钥管理员删除密钥的选项。类似地，我们可以将 IAM 用户或角色指定为密钥用户。密钥用户是能够使用客户管理的密钥来加密和解密数据的
    IAM 用户和角色。
- en: A KMS key policy is a JSON document that specifies who can access the key and
    under what conditions. Along with the key, AWS will create a default key policy
    and assign required permissions for the key administrators and key users we select.
    If we explore the generated key policy, we should be able to see the **kms:Create***
    , **kms:Describe*** , **kms:Enable*** , **kms:List*** , **kms:Put*** , **kms:Update***
    , **kms:Revoke*** , **kms:Disable*** , **kms:Get*** , **kms:Delete*** , **kms:TagResource**
    , **kms:UntagResource** , **kms:ScheduleKeyDeletion** , and **kms:CancelKeyDeletion**
    permissions for key administators. For key users, we should see the **kms:Encrypt**
    , **kms:Decrypt** , **kms:ReEncrypt*** , **kms:GenerateDataKey*** , and **kms:DescribeKey**
    permissions. These permissions should also give us an idea about the operations
    we can perform within KMS.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: KMS 密钥策略是一个 JSON 文档，指定谁可以访问该密钥以及在什么条件下访问。与密钥一起，AWS 会创建一个默认的密钥策略，并为我们选择的密钥管理员和密钥用户分配所需的权限。如果我们查看生成的密钥策略，应该能够看到
    **kms:Create*** 、 **kms:Describe*** 、 **kms:Enable*** 、 **kms:List*** 、 **kms:Put***
    、 **kms:Update*** 、 **kms:Revoke*** 、 **kms:Disable*** 、 **kms:Get*** 、 **kms:Delete***
    、 **kms:TagResource** 、 **kms:UntagResource** 、 **kms:ScheduleKeyDeletion** 和
    **kms:CancelKeyDeletion** 等权限，适用于密钥管理员。对于密钥用户，我们应该看到 **kms:Encrypt** 、 **kms:Decrypt**
    、 **kms:ReEncrypt*** 、 **kms:GenerateDataKey*** 和 **kms:DescribeKey** 等权限。这些权限也能帮助我们了解在
    KMS 中可以执行哪些操作。
- en: There’s more...
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In this recipe, we created a key using the standard options available within
    KMS. We can configure these options based on our requirements. For example, in
    this recipe, we chose the option to allow key administrators to delete the key.
    Based on our security requirements, we may unselect this option to not allow key
    administrators to delete the key.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实例中，我们使用 KMS 提供的标准选项创建了一个密钥。我们可以根据自己的需求配置这些选项。例如，在这个实例中，我们选择了允许密钥管理员删除密钥的选项。根据我们的安全需求，我们可以取消选择该选项，禁止密钥管理员删除密钥。
- en: Tip
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Play around with all the options available within KMS and get familiar with
    them. This will help you decide on what options to choose when you are faced with
    a scenario at work, in an exam, or in an interview.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用 KMS 中所有可用的选项，并熟悉它们。这将帮助您在工作场景、考试或面试中遇到类似情境时，做出正确的选择。
- en: 'Let’s quickly go through some important points about the AWS KMS service:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速了解一些关于 AWS KMS 服务的重要要点：
- en: We created a symmetric key in this recipe. AWS KMS also has support for asymmetric
    keys. AWS KMS allows you to create and manage asymmetric key pairs for encryption
    and signing, facilitating scenarios that require PKI, such as encrypting data
    so that only the private key holder can decrypt it, or signing data for sender
    verification.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在这个实例中创建了一个对称密钥。AWS KMS 也支持非对称密钥。AWS KMS 允许您创建和管理用于加密和签名的非对称密钥对，方便那些需要公钥基础设施（PKI）场景的应用，例如加密数据，使得只有私钥持有者才能解密，或者为数据签名以验证发送者身份。
- en: AWS KMS keys can encrypt data up to 4 KB in size and hence are generally used
    to encrypt other keys, such as **data keys** . These data keys are then used to
    encrypt the actual data. These data keys are not created and managed within the
    AWS KMS service.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS KMS 密钥最多可以加密 4 KB 大小的数据，因此通常用于加密其他密钥，例如 **数据密钥**。这些数据密钥然后用来加密实际的数据。这些数据密钥并不在
    AWS KMS 服务中创建和管理。
- en: KMS is a region-specific service and, hence, the keys managed by KMS are region-specific.
    Therefore, to use KMS keys, the respective services should also be in the same
    region. For example, to use the key that we created for encrypting S3 data, the
    S3 bucket needs to be in the same region.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: KMS 是一个区域性服务，因此 KMS 管理的密钥是区域特定的。因此，要使用 KMS 密钥，相应的服务也应位于同一地区。例如，要使用我们为加密 S3 数据而创建的密钥，S3
    存储桶需要位于相同区域。
- en: KMS supports a feature called **multi-region keys** , which allows data to be
    decrypted in a region different from the one where it was encrypted. It is important
    to note that these keys are not currently global. Instead, there is a primary
    key that is replicated to replica keys in other regions.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: KMS 支持一个叫做 **多区域密钥** 的功能，它允许数据在与加密数据时不同的区域进行解密。需要注意的是，这些密钥当前并不是全球性的。相反，存在一个主密钥，并将其复制到其他区域的副本密钥中。
- en: A user with S3 administrator permissions will not have permission to view a
    file encrypted using KMS key encryption unless they are a key user for the key
    being used to encrypt that file.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有 S3 管理员权限的用户，除非是用于加密该文件的密钥的密钥用户，否则没有权限查看使用 KMS 密钥加密的文件。
- en: Key administrators do not have permission to encrypt or decrypt data using those
    keys. Key administrators, however, can modify the key policy to add themselves
    as key users. This is where the audit and logging services become important.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密钥管理员没有权限使用这些密钥加密或解密数据。然而，密钥管理员可以修改密钥策略，将自己添加为密钥用户。这也是审计和日志服务变得重要的地方。
- en: AWS KMS integrates with AWS CloudTrail to provide logs of all key usage to help
    meet compliance and regulatory requirements. This integration allows users to
    track when and who used KMS keys for encryption and decryption, providing an audit
    trail that can be crucial for forensic analysis and compliance audits.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS KMS 与 AWS CloudTrail 集成，提供所有密钥使用的日志，帮助满足合规性和监管要求。这一集成功能使用户能够跟踪何时以及是谁使用了
    KMS 密钥进行加密和解密，提供审计日志，这对于取证分析和合规性审计至关重要。
- en: 'We cannot directly delete a key. A key administrator can disable and/or schedule
    a key for deletion. At the time of writing, the administrator can specify a waiting
    period between 7 and 30 days inclusive while scheduling a key deletion. With multi-region
    keys, we need to first delete the replica keys; only then can we delete the primary
    key. Therefore, the minimum number of days to delete a multi-region key is 14
    days: 7 days for deleting the replica keys and 7 days for deleting the primary
    key.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们无法直接删除密钥。密钥管理员可以禁用密钥和/或安排删除密钥。在写这篇文章时，管理员可以在安排删除密钥时指定一个 7 到 30 天（含）的等待期。对于多区域密钥，我们需要首先删除副本密钥；只有在删除副本密钥后，才能删除主密钥。因此，删除多区域密钥的最短天数是
    14 天：7 天用于删除副本密钥，7 天用于删除主密钥。
- en: Once a key has been disabled, we cannot decrypt any data that is encrypted with
    that key until we enable that key again.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦密钥被禁用，我们将无法解密使用该密钥加密的任何数据，直到我们重新启用该密钥。
- en: Once a key has been deleted, we cannot decrypt any data encrypted with that
    key.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦密钥被删除，我们将无法解密任何使用该密钥加密的数据。
- en: See also
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'A good understanding of encryption can help you better understand the AWS KMS
    service. You can learn about encryption here: [https://www.secdops.com/blog/getting-started-with-encryption](https://www.secdops.com/blog/getting-started-with-encryption)
    .'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对加密的良好理解将帮助你更好地理解 AWS KMS 服务。你可以在这里了解加密的相关知识：[https://www.secdops.com/blog/getting-started-with-encryption](https://www.secdops.com/blog/getting-started-with-encryption)。
- en: 'AWS KMS is a service with a lot of features. You can start reading more about
    KMS and its features here: [https://www.cloudericks.com/blog/getting-started-with-aws-key-management-service-kms](https://www.cloudericks.com/blog/getting-started-with-aws-key-management-service-kms)
    .'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS KMS 是一项功能丰富的服务。你可以在这里了解更多关于 KMS 及其功能的信息：[https://www.cloudericks.com/blog/getting-started-with-aws-key-management-service-kms](https://www.cloudericks.com/blog/getting-started-with-aws-key-management-service-kms)。
- en: Creating keys with external key material (BYOK)
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用外部密钥材料创建密钥（BYOK）
- en: When we create keys within AWS KMS, AWS creates and manages the key material
    for that key. We can also create keys using our own key material that has been
    created outside of AWS. In this recipe, we will learn how to import a key material
    into AWS KMS. Using external key material for our keys is called **Bring Your
    Own Key** ( **BYOK** ) and is useful for organizations that have strict compliance
    or policy requirements that mandate the use of keys they control. This key should
    be a 256-bit symmetric key. Asymmetric keys are not supported for BYOK.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在 AWS KMS 中创建密钥时，AWS 会为该密钥创建并管理密钥材料。我们也可以使用在 AWS 外部创建的自有密钥材料来创建密钥。在这个操作中，我们将学习如何将密钥材料导入到
    AWS KMS。使用外部密钥材料来创建密钥被称为 **自带密钥** (**BYOK**)，对于那些有严格合规性或政策要求，强制使用他们控制的密钥的组织来说，这非常有用。该密钥应该是一个
    256 位的对称密钥。BYOK 不支持使用非对称密钥。
- en: Getting ready
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We’ll need the following to complete this recipe:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要以下内容来完成这个操作：
- en: A working AWS account, **awsseccb-sandbox-1** , and a user, **awsseccbadmin1**
    , as described in the *Technical* *requirements* section.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有效的AWS账户，**awsseccb-sandbox-1**，以及一个用户，**awsseccbadmin1**，如*技术要求*部分所述。
- en: The latest OpenSSL setup on our local machine. If it’s not already installed,
    go to the OpenSSL website at [https://www.openssl.org](https://www.openssl.org)
    , download the latest version of OpenSSL, and set it up locally while following
    the instructions. Run the **openssl version** command to make sure OpenSSL is
    installed with the latest version.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本地机器上安装最新的OpenSSL。如果尚未安装，请访问OpenSSL官方网站：[https://www.openssl.org](https://www.openssl.org)，下载最新版本的OpenSSL并根据说明进行安装。运行**openssl
    version**命令以确保安装的是最新版本的OpenSSL。
- en: Important note
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'If you’re a macOS user, you might encounter an important compatibility issue:
    macOS defaults to using LibreSSL with the **openssl** command, not OpenSSL. To
    ensure you’re using the correct version of OpenSSL, you may need to install it
    via Homebrew and invoke it directly while specifying the full path or even adjust
    your system’s **PATH** settings. A simple step-by-step guide on how to do this
    is provided in the following blog post: [https://www.secdops.com/blog/using-openssl-alongside-the-default-libressl-on-macos](https://www.secdops.com/blog/using-openssl-alongside-the-default-libressl-on-macos)
    .'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是macOS用户，可能会遇到一个重要的兼容性问题：macOS默认使用LibreSSL配合**openssl**命令，而不是OpenSSL。为了确保使用正确版本的OpenSSL，你可能需要通过Homebrew安装它，并在指定完整路径时直接调用它，或者甚至调整系统的**PATH**设置。如何操作的简易步骤指南可以参考以下博客文章：[https://www.secdops.com/blog/using-openssl-alongside-the-default-libressl-on-macos](https://www.secdops.com/blog/using-openssl-alongside-the-default-libressl-on-macos)。
- en: Assuming we have set up and can run the **openssl version** command correctly,
    let’s proceed to use it to create external key material.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经设置并能正确运行**openssl version**命令，接下来我们将使用它创建外部密钥材料。
- en: How to do it...
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We will start by creating our key from AWS KMS by setting the key material origin
    to **External** . Then, we will download the key import wrapper from the AWS KMS
    service, generate the key on our local machine, and wrap it with the import wrapper.
    Finally, we will upload our wrapped key material with the import wrapper to finish
    key creation.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过将密钥材料来源设置为**外部**，从AWS KMS开始创建我们的密钥。然后，我们将从AWS KMS服务下载密钥导入包装器，在本地生成密钥，并使用导入包装器将其包装。最后，我们将上传我们包装好的密钥材料及导入包装器来完成密钥创建。
- en: Creating a key configuration for an external key
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为外部密钥创建密钥配置
- en: 'We can create a key configuration for an external key as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为外部密钥创建一个密钥配置，如下所示：
- en: Log in to the AWS Management Console and go to **Key** **Management Service**
    .
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到AWS管理控制台，进入**密钥管理服务**。
- en: Click on **Customer-managed keys** from the left sidebar and click **Create
    key** at the top right of the page.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧边栏点击**客户管理密钥**，然后点击页面右上角的**创建密钥**。
- en: In the **Configure key** step, for **Key type** , select **Symmetric** , and
    for **Key usage** , select **Encrypt** **and decrypt** .
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**配置密钥**步骤中，对于**密钥类型**，选择**对称密钥**，对于**密钥用途**，选择**加密**和**解密**。
- en: Expand the **Advanced options** menu and select **External (Import Key material)**
    . Then, check the checkbox to agree that you understand the security and durability
    implications while using an external key. For **Regionality** , select **Single-region
    key** . Click **Next** to proceed to the **Add** **labels** step.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开**高级选项**菜单，选择**外部（导入密钥材料）**。然后，勾选复选框表示你理解使用外部密钥时的安全性和持久性影响。对于**区域性**，选择**单区域密钥**。点击**下一步**进入**添加标签**步骤。
- en: In the **Add labels** step, set **Alias** to **seccb-dev-external-key** and
    **Description** to **External Key for the Dev env** . Optionally, add tags by
    clicking on the **Add tag** button. Click **Next** to proceed to the **Define
    key administrative** **permissions** step.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**添加标签**步骤中，将**别名**设置为**seccb-dev-external-key**，将**描述**设置为**开发环境的外部密钥**。可选地，通过点击**添加标签**按钮来添加标签。点击**下一步**进入**定义密钥管理权限**步骤。
- en: In the **Define key administrative permissions** step, select **Key administrators**
    , who are the IAM users and roles who can administer this key through the KMS
    API. I have selected the **awsseccb_admin1** user, as shown in *Figure 3* *.3*
    . If you’re using an IAM Identity Center user, you can select a role corresponding
    to the combination of that IAM Identity Center user and a permission set.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**定义密钥管理权限**步骤，选择**密钥管理员**，即可以通过KMS API管理此密钥的IAM用户和角色。我选择了**awsseccb_admin1**用户，如*图3*.*3*所示。如果您使用的是IAM身份中心用户，您可以选择一个角色，该角色对应于该IAM身份中心用户与权限集的组合。
- en: For **Key deletion** , check **Allow key administrators to delete this key**
    . Click **Next** to proceed to the **Define key usage** **permissions** step.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**密钥删除**，选中**允许密钥管理员删除此密钥**。点击**下一步**进入**定义密钥使用权限**步骤。
- en: Regarding the **Define key usage permissions** step, select **Key users** –
    that is, IAM users and roles who can use the customer-managed key to encrypt and
    decrypt data. In the same step, optionally, you can add **Other AWS accounts**
    that can use this key. I have selected the **awsseccb_user1** user. If you’re
    using an IAM Identity Center user, you can select a role corresponding to the
    combination of that IAM Identity Center user and a permission set. Click **Next**
    .
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关于**定义密钥使用权限**步骤，选择**密钥用户**——即可以使用客户管理密钥进行加密和解密数据的IAM用户和角色。在同一步骤中，您可以选择性地添加可以使用此密钥的**其他AWS账户**。我选择了**awsseccb_user1**用户。如果您使用的是IAM身份中心用户，可以选择一个角色，该角色对应于该IAM身份中心用户与权限集的组合。点击**下一步**。
- en: Review **Key configuration** , **Alias and description** , **Tags** , and **Key
    policy** in JSON format. Click **Finish** to create the key. The key will be created,
    as shown in *Figure 3* *.4* . You should also see the **Download wrapping public
    key and import token** step now.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审查**密钥配置**、**别名和描述**、**标签**以及**密钥策略**的JSON格式。点击**完成**以创建密钥。密钥将如*图3*.*4*所示创建。您现在应该还会看到**下载包装公钥和导入令牌**步骤。
- en: Regarding the **Download wrapping public key and import token** step, under
    the **Configuration** section, for **Select wrapping key spec** , select **RSA_4096
    - recommended** , and for **Select wrapping algorithm** , select **RSAES_OAEP_SHA_256**
    .
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关于**下载包装公钥和导入令牌**步骤，在**配置**部分，对于**选择包装密钥规格**，选择**RSA_4096 - 推荐**，对于**选择包装算法**，选择**RSAES_OAEP_SHA_256**。
- en: '![Figure 3.5 – Download wrapping public key and import token](image/B21384_03_5.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图3.5 – 下载包装公钥和导入令牌](image/B21384_03_5.jpg)'
- en: Figure 3.5 – Download wrapping public key and import token
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5 – 下载包装公钥和导入令牌
- en: Click **Download wrapping public key and import token** to download the token
    on your desktop. Then, click **Next** to reach the **Upload your wrapped key material**
    page. Keep the downloaded import parameters file for the steps we will follow
    shortly.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下载包装公钥和导入令牌**将令牌下载到您的桌面。然后，点击**下一步**进入**上传您的包装密钥材料**页面。保留下载的导入参数文件，以便我们接下来的步骤使用。
- en: In this section we created a key configuration. In the next section, we will
    generate our key material and then return to this screen and click **Next** to
    go to the **Upload your wrapped key material** step. If we check the **Customer
    managed keys** page, we should see that **Status** is now set to **Pending import**
    .
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们创建了一个密钥配置。在下一节中，我们将生成我们的密钥材料，然后返回此页面并点击**下一步**进入**上传您的包装密钥材料**步骤。如果我们查看**客户管理密钥**页面，我们应该看到**状态**现在设置为**待导入**。
- en: Generating key material using OpenSSL
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用OpenSSL生成密钥材料
- en: 'Assuming we have set up OpenSSL as mentioned in the *Getting ready* section,
    we can follow these steps to generate key material and encrypt it using the wrapping
    key provided by AWS KMS in the previous section:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经按照*准备工作*部分设置了OpenSSL，我们可以按照以下步骤生成密钥材料并使用AWS KMS在上一节中提供的包装密钥对其进行加密：
- en: 'As we are using a symmetric key, we can use the following command to generate
    256 bytes of random data and save it to a file named **MyExternalKeyMaterial.bin**
    . This will serve as our key material:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们使用的是对称密钥，我们可以使用以下命令生成256字节的随机数据并将其保存到名为**MyExternalKeyMaterial.bin**的文件中。这将作为我们的密钥材料：
- en: '[PRE0]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will generate a file called **ExternalKeyMaterialPlaintext.bin** .
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将生成一个名为**ExternalKeyMaterialPlaintext.bin**的文件。
- en: 'Execute the following command from the same folder while providing the name
    of our wrapping key for the **inkey** parameter:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同的文件夹中执行以下命令，并为**inkey**参数提供我们包装密钥的名称：
- en: '[PRE1]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will generate a file called **ExternalKeyMaterialEncrypted.bin** .
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将生成一个名为**ExternalKeyMaterialEncrypted.bin**的文件。
- en: With that, we’ve generated the key material. In the next section, we will upload
    this key material to AWS.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个，我们已经生成了密钥材料。在接下来的部分，我们将把这些密钥材料上传到AWS。
- en: Continuing with key creation from the Management Console
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从管理控制台继续创建密钥
- en: 'We can upload our key material in the AWS Management Console as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按以下方式在AWS管理控制台上传我们的密钥材料：
- en: Go back to the **Upload your wrapped key material** step’s page in the console.
    This is where we stopped in the *Creating a key configuration for an external*
    *key* section.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到控制台中**上传已包装的密钥材料**步骤的页面。这是我们在*为外部密钥创建密钥配置*部分中停止的地方。
- en: If we are not on the **Upload your wrapped key material** step’s page, we can
    go to **Key Management Service** via the dashboard, click **Customer-managed keys**
    from the left sidebar, and then click on the hyperlink under **Aliases** for the
    key for which we downloaded the wrapping key. Go to the **Key material** tab and
    click **Import key material** . Then, click **Next** to go to the **Upload your
    wrapped key material** step’s page.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们不在**上传已包装的密钥材料**步骤的页面上，我们可以通过仪表板进入**密钥管理服务**，点击左侧边栏中的**客户管理的密钥**，然后点击我们为其下载了包装密钥的密钥下的**别名**超链接。进入**密钥材料**标签并点击**导入密钥材料**。然后，点击**下一步**进入**上传已包装的密钥材料**步骤的页面。
- en: On the **Upload your wrapped key material** step’s page, click **Choose file**
    under **Wrapped key material** and select the **ExternalKeyMaterialEncrypted.bin**
    file.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**上传已包装的密钥材料**步骤的页面，点击**选择文件**，然后在**包装密钥材料**下选择**ExternalKeyMaterialEncrypted.bin**文件。
- en: Click **Choose file** under **Import token** and select the import token we
    downloaded from KMS in the previous section.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**选择文件**，然后在**导入令牌**下选择我们在前一部分从KMS下载的导入令牌。
- en: Leave the **Key material expires - optional** option unchecked and click **Upload
    key material** . We should see a message that the key has been uploaded.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保留**密钥材料到期 - 可选**选项未勾选，然后点击**上传密钥材料**。我们应该会看到一个消息，提示密钥已上传。
- en: The key is now ready for use. If we check the **Customer managed keys** page,
    we should see that **Status** has changed from **Pending import** to **Enabled**
    .
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 密钥现在已经可以使用。如果我们检查**客户管理的密钥**页面，我们应该看到**状态**已从**待导入**变为**启用**。
- en: How it works...
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we created an AWS KMS key by setting the key material origin
    to **External** . After that, we selected one of the allowed encryption schemes
    for the key wrapper and downloaded the key wrapper. This key wrapper is the public
    key that is used to encrypt and securely upload our key material to the AWS KMS
    service. An import token from the AWS KMS service was also downloaded, along with
    the key wrapper. The import token is used to make sure the key that’s uploaded
    is the right one for the key that we downloaded for the wrapper token.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们通过将密钥材料来源设置为**外部**创建了一个AWS KMS密钥。之后，我们选择了一个允许的加密方案来包装密钥并下载了密钥包装器。这个密钥包装器是用来加密并安全上传我们的密钥材料到AWS
    KMS服务的公钥。我们还下载了一个来自AWS KMS服务的导入令牌，连同密钥包装器一起。导入令牌用于确保上传的密钥是我们为包装令牌下载的正确密钥。
- en: There’s more...
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'In this recipe, we used **SHA_256** to wrap our external key material before
    uploading it. We may also use **SHA_1** , but it is less secure. If we are using
    SHA-1, we can generate the encrypted external key material, **ExternalKeyMaterialEncrypted.bin**
    , with the following command:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们在上传外部密钥材料之前，使用**SHA_256**对其进行包装。我们也可以使用**SHA_1**，但它的安全性较差。如果我们使用SHA-1，我们可以使用以下命令生成加密的外部密钥材料，**ExternalKeyMaterialEncrypted.bin**：
- en: '[PRE2]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let’s quickly go through some more details regarding importing keys into AWS
    KMS:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速浏览一些关于将密钥导入AWS KMS的更多细节：
- en: When we import our key material, we are responsible for generating the key material
    with randomness, as per our security requirements. We are also responsible for
    the durability of the key material.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们导入密钥材料时，我们需要根据安全要求生成具有随机性的密钥材料。我们还需要对密钥材料的持久性负责。
- en: With imported key material, we can set an expiration date for the key material
    and also manually delete it. We can make the key available again in the future
    by importing the key material into the KMS key.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用导入的密钥材料，我们可以为密钥材料设置到期日期，也可以手动删除它。我们可以通过将密钥材料导入KMS密钥的方式在未来重新启用该密钥。
- en: We cannot delete the key material for a KMS key with AWS key material. We can,
    however, schedule the deletion of that KMS key with 7-30 days’ notice.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不能删除具有AWS密钥材料的KMS密钥。然而，我们可以在7到30天的通知期内安排删除该KMS密钥。
- en: Once a KMS key has been deleted, any data that’s been encrypted by it cannot
    be decrypted. This is true for both KMS keys with AWS key material and KMS keys
    with imported key material.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦 KMS 密钥被删除，通过该密钥加密的任何数据都无法解密。这对于 AWS 密钥材料的 KMS 密钥和导入密钥材料的 KMS 密钥都适用。
- en: A key material imported into a KMS key is permanently associated with that KMS
    key.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入到 KMS 密钥中的密钥材料将永久与该 KMS 密钥关联。
- en: We can reimport the key material. However, we cannot import a different key
    material again for that KMS key.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以重新导入密钥材料。然而，我们不能再次导入不同的密钥材料到该 KMS 密钥。
- en: A ciphertext encrypted with a KMS key with an external key material cannot be
    decrypted by another KMS key, even if we use the same key material.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用具有外部密钥材料的 KMS 密钥加密的密文无法通过另一个 KMS 密钥解密，即使我们使用相同的密钥材料。
- en: A KMS key with an imported key material must be deleted before we can reimport
    the key material again into another KMS Key.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须先删除带有导入密钥材料的 KMS 密钥，然后才能将密钥材料重新导入到另一个 KMS 密钥中。
- en: We can reimport the key material into an existing KMS key if the key material
    is deleted.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果密钥材料被删除，我们可以将密钥材料重新导入到现有的 KMS 密钥中。
- en: In the case of region-wide failures that affect KMS keys, AWS won’t automatically
    restore any imported key material. In such scenarios, we need to have a copy of
    our key material to reimport it.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在影响 KMS 密钥的区域性故障情况下，AWS 不会自动恢复任何导入的密钥材料。在这种情况下，我们需要拥有密钥材料的副本以便重新导入。
- en: See also
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'You can read more about external keys and BYOK in the following blog post:
    [https://www.cloudericks.com/blog/aws-kms-with-external-key-material-the-byok-solution](https://www.cloudericks.com/blog/aws-kms-with-external-key-material-the-byok-solution)
    .'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下博客文章中阅读更多关于外部密钥和 BYOK 的信息：[https://www.cloudericks.com/blog/aws-kms-with-external-key-material-the-byok-solution](https://www.cloudericks.com/blog/aws-kms-with-external-key-material-the-byok-solution)。
- en: Rotating keys in KMS
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 KMS 中轮换密钥
- en: '**Key rotation** refers to the process of changing the encryption key that’s
    used to secure our data. This practice is crucial for minimizing risk in case
    a key is compromised. AWS supports automatic and manual key rotation for customer-managed
    keys.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**密钥轮换**是指更改用于保护数据的加密密钥的过程。这一做法对于在密钥被泄露时最小化风险至关重要。AWS 支持客户管理密钥的自动和手动密钥轮换。'
- en: Rotating keys regularly is a best practice that needs to be followed while using
    keys. Key rotation may also be a requirement based on regulatory rules or corporate
    policies. These rules and policies may also provide guidelines on the key rotation
    frequencies. We will look at the different cases of key rotation in this recipe.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 定期轮换密钥是一项最佳实践，在使用密钥时需要遵循。根据监管规则或公司政策，密钥轮换也可能是一个要求。这些规则和政策可能还会提供有关密钥轮换频率的指导。我们将在本食谱中查看密钥轮换的不同情况。
- en: Getting ready
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We’ll need the following to complete this recipe:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个食谱，我们需要以下内容：
- en: A working AWS account, **awsseccb-sandbox-1** , and a user, **awsseccbadmin1**
    , as described in the *Technical* *requirements* section.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有效的 AWS 账户，**awsseccb-sandbox-1**，和一个用户，**awsseccbadmin1**，如*技术要求*部分所述。
- en: A customer-managed KMS key with AWS key material. I will be using the key with
    the **seccb-dev-encryption** alias that we created in the *Creating keys in* *KMS*
    recipe.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个具有 AWS 密钥材料的客户管理的 KMS 密钥。我将使用我们在*创建 KMS 密钥*食谱中创建的别名为**seccb-dev-encryption**的密钥。
- en: How to do it...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'We can specify automatic key rotation every year (365 days) for customer-managed
    KMS keys with AWS key material as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为具有 AWS 密钥材料的客户管理的 KMS 密钥指定每年（365 天）的自动密钥轮换，如下所示：
- en: Log in to the AWS Management Console and go to **Key** **Management Service**
    .
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到 AWS 管理控制台，并转到**密钥管理服务**。
- en: Click on **Customer-managed keys** on the navigation pane to list all the keys
    we have created.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航窗格中点击**客户管理的密钥**，列出我们创建的所有密钥。
- en: Click on the **Aliases** or **Key ID** property of our customer-managed key
    for which we need to do the rotation.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击我们需要进行轮换的客户管理密钥的**别名**或**密钥 ID**属性。
- en: Go to the **Key rotation** tab and click **Edit** .
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**密钥轮换**选项卡并点击**编辑**。
- en: 'For **Key rotation** , select **Enable** and set **Rotation period (in days)**
    with a value of **365** , as shown in the following figure:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**密钥轮换**，选择**启用**并设置**轮换周期（天数）**，其值为**365**，如下面的图所示：
- en: '![Figure 3.6 – Automatic key rotation](image/B21384_03_6.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.6 – 自动密钥轮换](image/B21384_03_6.jpg)'
- en: Figure 3.6 – Automatic key rotation
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6 – 自动密钥轮换
- en: Click **Save** . We will get a notification that the operation was successful.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**。我们将收到操作成功的通知。
- en: With that, we’ve learned how to enable automatic key rotation. We will learn
    more about key rotation in the subsequent sections of this recipe.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，我们已经学会了如何启用自动密钥轮换。我们将在本方案的后续部分进一步学习密钥轮换。
- en: How it works...
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: AWS-managed keys are automatically rotated every year. Previously, it was every
    3 years. For customer-managed keys, AWS supports both automatic and manual key
    rotation. With automatic rotation, only the backing key of a KMS key is rotated.
    This means that the KMS key ID, ARN, region, policies, permissions, and other
    properties remain the same. Therefore, we do not need to change applications or
    aliases that use this KMS key.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 管理的密钥每年会自动轮换一次，之前是每 3 年轮换一次。对于客户管理的密钥，AWS 支持自动和手动两种密钥轮换方式。在自动轮换模式下，只有 KMS
    密钥的支持密钥会进行轮换。这意味着 KMS 密钥的 ID、ARN、区域、策略、权限和其他属性保持不变。因此，我们不需要更改使用此 KMS 密钥的应用程序或别名。
- en: In this recipe, we selected the option to automatically rotate our KMS key every
    year. AWS will now rotate the key every year but keep a copy of the old backing
    key to decrypt any data that was encrypted with the old backing key. AWS keeps
    the older backing keys until we delete them.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方案中，我们选择了每年自动轮换 KMS 密钥的选项。AWS 现在每年轮换一次密钥，并保留旧的支持密钥的副本，用于解密使用旧支持密钥加密的数据。AWS
    会保留较旧的支持密钥，直到我们删除它们。
- en: There’s more...
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: 'Let’s quickly go through some of the important points related to AWS KMS key
    rotation:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速回顾一下与 AWS KMS 密钥轮换相关的一些重要点：
- en: Automatic key rotation every year (365 days) is only supported for KMS keys
    with AWS key materials.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每年（365 天）自动轮换密钥仅适用于具有 AWS 密钥材料的 KMS 密钥。
- en: We can do a manual key rotation for KMS keys with AWS key material if we want
    a different duration for the key rotation.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们希望密钥轮换有不同的周期，可以手动轮换带有 AWS 密钥材料的 KMS 密钥。
- en: With automatic key rotation, only the KMS key is rotated, not the data keys
    encrypted with it.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在自动密钥轮换中，只有 KMS 密钥会被轮换，而与其加密的数据密钥不会被轮换。
- en: With automatic key rotation, new encryptions are made using the new backing
    key. However, data encrypted using an older backing key is decrypted using that
    old key. For this purpose, AWS keeps all backing keys available until we delete
    the KMS key.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在自动密钥轮换中，新的加密操作会使用新的支持密钥。然而，使用旧支持密钥加密的数据会用该旧密钥进行解密。为此，AWS 会保留所有支持密钥，直到我们删除 KMS
    密钥。
- en: With automatic key rotation, even if we disable key rotation, old backing keys
    will still be available to decrypt data that was encrypted using that key.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在自动密钥轮换中，即使我们禁用了密钥轮换，旧的支持密钥仍然可用来解密使用该密钥加密的数据。
- en: With automatic key rotation, if you disable rotation and re-enable it again,
    it will continue with the old key rotation schedule if the backing key is less
    than a year old. If the backing key is older than 365 days, it is rotated immediately
    and then rotated again every 365 days.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自动密钥轮换时，如果禁用轮换并重新启用，它将继续使用旧的密钥轮换计划（如果支持密钥不到一年）。如果支持密钥已经超过 365 天，它将立即进行轮换，然后每
    365 天再轮换一次。
- en: With automatic key rotation, key rotation will not happen if a key is pending
    deletion. If deletion is canceled, it will continue with the old key rotation
    schedule if the backing key is less than a year old. If the backing key is older
    than 365 days, it is rotated immediately and then rotated again every 365 days.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在自动密钥轮换中，如果密钥处于待删除状态，则不会发生密钥轮换。如果取消删除操作，则如果支持密钥不到一年，它将继续使用旧的密钥轮换计划。如果支持密钥超过
    365 天，则会立即进行轮换，并且每 365 天进行一次轮换。
- en: Automatic key rotation is not supported for custom key stores backed by AWS
    CloudHSM clusters. For such KMS keys, the value of the **Origin** field is **AWS_CloudHSM**
    . In this case, we need to manually rotate keys and change any encrypted data
    or aliases to use the new key.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于由 AWS CloudHSM 集群支持的自定义密钥存储，不支持自动密钥轮换。对于这样的 KMS 密钥，**Origin** 字段的值为 **AWS_CloudHSM**。在这种情况下，我们需要手动轮换密钥，并更改任何加密数据或别名以使用新密钥。
- en: For AWS-managed keys, we cannot change the rotation frequency, which is currently
    1 year.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 AWS 管理的密钥，我们无法更改轮换频率，目前为 1 年。
- en: Automatic key rotation can be monitored using the KMS key rotation event in
    EventBridge.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动密钥轮换可以通过 EventBridge 中的 KMS 密钥轮换事件进行监控。
- en: We can use the AWS KMS API to enable and disable automatic key rotation. It
    is good practice to use aliases to refer to KMS keys when we do manual key rotation.
    We can update the alias so that it points to the new target KMS key instead of
    the old one.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用 AWS KMS API 启用和禁用自动密钥轮换。在手动密钥轮换时，使用别名来引用 KMS 密钥是一种良好的实践。我们可以更新别名，使其指向新的目标
    KMS 密钥，而不是旧的密钥。
- en: Even with manual rotation, AWS KMS can identify the right backing key that was
    used for encryption and use it for decryption, so long as we keep the older KMS
    keys available.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使是手动轮换，AWS KMS 也能识别用于加密的正确密钥并用于解密，只要我们保留旧的 KMS 密钥。
- en: We can update aliases using the **update-alias** subcommand of the AWS KMS API.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用 AWS KMS API 的 **update-alias** 子命令来更新别名。
- en: See also
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: You can read more about AWS KMS key rotation, including manual key rotation,
    at [https://www.cloudericks.com/blog/understanding-aws-kms-key-rotation](https://www.cloudericks.com/blog/understanding-aws-kms-key-rotation)
    .
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以阅读更多关于 AWS KMS 密钥轮换的内容，包括手动密钥轮换，访问 [https://www.cloudericks.com/blog/understanding-aws-kms-key-rotation](https://www.cloudericks.com/blog/understanding-aws-kms-key-rotation)。
- en: Granting permissions programmatically with grants
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过授权编程方式授予权限
- en: '**KMS grants** can be used to give temporary granular permissions to AWS KMS
    API operations such as encrypting, decrypting, and describing keys, and more.
    We can use grants to provide access to a user in their account or even another
    account. In this recipe, we will grant access to a user so that they can encrypt
    and decrypt files using AWS KMS.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '**KMS 授权**可用于为 AWS KMS API 操作（如加密、解密、描述密钥等）提供临时细粒度的权限。我们可以使用授权向某个账户中的用户或甚至另一个账户中的用户提供访问权限。在这个配方中，我们将授权一个用户，使其能够使用
    AWS KMS 加密和解密文件。'
- en: Getting ready
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We’ll need the following to complete this recipe:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要以下内容来完成这个配方：
- en: 'A working AWS account with two users: a user with **AdministratorAccess** permission
    and a user with no permissions. The CLI profiles should be configured for these
    users. I will be calling these users and their CLI profiles **Adminuserprofile**
    and **testusernopermission** , respectively, following the recipes in [*Chapter
    1*](B21384_01.xhtml#_idTextAnchor020) .'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有效的 AWS 账户，其中有两个用户：一个具有**AdministratorAccess**权限的用户和一个没有权限的用户。这些用户的 CLI 配置文件应已配置好。我将分别称这些用户及其
    CLI 配置文件为**Adminuserprofile**和**testusernopermission**，按照 [*第 1 章*](B21384_01.xhtml#_idTextAnchor020)
    中的配方。
- en: 'A KMS key. We can create one by following previous recipes in this chapter.
    Alternatively, use the following command to create a KMS key from the AWS CLI:'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 KMS 密钥。我们可以通过遵循本章之前的配方来创建一个。或者，可以使用以下命令通过 AWS CLI 创建 KMS 密钥：
- en: '[PRE3]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will provide an output similar to the following:'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将提供类似于以下的输出：
- en: '![Figure 3.7 – Creating a key using the CLI](image/B21384_03_7.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.7 – 使用 CLI 创建密钥](image/B21384_03_7.jpg)'
- en: Figure 3.7 – Creating a key using the CLI
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7 – 使用 CLI 创建密钥
- en: 'Before proceeding, we have to check whether our test user has any permissions
    by running the following command. Ensure you replace my **key-id** with your **key-id**
    :'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我们必须通过运行以下命令检查我们的测试用户是否拥有任何权限。确保将我的 **key-id** 替换为你的 **key-id**：
- en: '[PRE4]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We should get an error message similar to the one shown in the following screenshot:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该会收到类似于以下截图中的错误信息：
- en: '![Figure 3.8 – Response to the user permission check](image/B21384_03_8.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.8 – 用户权限检查的响应](image/B21384_03_8.jpg)'
- en: Figure 3.8 – Response to the user permission check
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.8 – 用户权限检查的响应
- en: In the preceding command, we can specify the key ID alone (as we did), the complete
    key ARN, or an alias (if one is available).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的命令中，我们可以仅指定密钥 ID（如我们所做的），也可以指定完整的密钥 ARN，或使用别名（如果有的话）。
- en: Next, we will learn how to use grants so that we can give permissions programmatically.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习如何使用授权，以便我们可以通过编程方式授予权限。
- en: How to do it...
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can grant encrypt permission to **testuser** and then use it to encrypt
    as follows:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以授予 **testuser** 加密权限，然后按如下方式使用它进行加密：
- en: 'We can get the user’s ARN from the IAM dashboard or prepare one based on the
    preceding format. We can also use the **aws iam get-user** command to get the
    user’s ARN from the console:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以从 IAM 控制台获取用户的 ARN，或者根据前面的格式准备一个。我们还可以使用 **aws iam get-user** 命令从控制台获取用户的
    ARN：
- en: '[PRE5]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This command will return a response similar to the following:'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令将返回类似于以下的响应：
- en: '![Figure 3.9 – Response for the get-user command](image/B21384_03_9.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.9 – 获取用户命令的响应](image/B21384_03_9.jpg)'
- en: Figure 3.9 – Response for the get-user command
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.9 – 获取用户命令的响应
- en: 'Grant **Encrypt** permission to **testuser** using the **create-grant** subcommand
    by providing the user’s ARN:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**create-grant**子命令为**testuser**授予**Encrypt**权限，提供用户的ARN：
- en: '[PRE6]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We should get a response similar to the one shown in the following screenshot:'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们应该获得类似以下截图所示的响应：
- en: '![Figure 3.10 – Response for the create-grant subcommand](image/B21384_03_10.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.10 – **create-grant**子命令的响应](image/B21384_03_10.jpg)'
- en: Figure 3.10 – Response for the create-grant subcommand
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.10 – **create-grant**子命令的响应
- en: 'Encrypt data with **testuser** using the **encrypt** subcommand:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**testuser**通过**encrypt**子命令加密数据：
- en: '[PRE7]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This time, we should get a successful response, as follows:'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一次，我们应该获得如下所示的成功响应：
- en: '![Figure 3.11 – Response for the encrypt command after getting the permission](image/B21384_03_11.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.11 – 获取权限后加密命令的响应](image/B21384_03_11.jpg)'
- en: Figure 3.11 – Response for the encrypt command after getting the permission
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.11 – 获取权限后加密命令的响应
- en: 'Verify the grants for the key using the **list-grants** subcommand:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**list-grants**子命令验证密钥的授权：
- en: '[PRE8]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This should return a response similar to the following:'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该返回一个类似以下的响应：
- en: '![Figure 3.12 – Response for the list-grant command](image/B21384_03_12.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.12 – **list-grant**命令的响应](image/B21384_03_12.jpg)'
- en: Figure 3.12 – Response for the list-grant command
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.12 – **list-grant**命令的响应
- en: 'Revoke the grant with the **revoke-grant** subcommand:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**revoke-grant**子命令撤销授权：
- en: '[PRE9]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can verify that the grant has been revoked by trying to encrypt it using
    **testuser** and by running the **list-grants** subcommand. Run the **encrypt**
    command, similar to *Step 2* of this recipe. We should now get an error message
    similar to the following:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过尝试使用**testuser**加密，并运行**list-grants**子命令来验证授权是否已被撤销。运行**encrypt**命令，类似于此示例中的*第2步*。我们现在应该获得一个类似以下的错误消息：
- en: '![Figure 3.13 – Response for the encrypt command after revoking the permission](image/B21384_03_13.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.13 – 撤销权限后加密命令的响应](image/B21384_03_13.jpg)'
- en: Figure 3.13 – Response for the encrypt command after revoking the permission
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13 – 撤销权限后加密命令的响应
- en: 'Run the **list-grant** subcommand, similar to *Step 3* of this recipe. We should
    now get a response similar to the following:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行**list-grant**子命令，类似于此示例中的*第3步*。我们现在应该获得类似以下的响应：
- en: '![Figure 3.14 – Response for the list-grant command after revoking all the
    grants](image/B21384_03_14.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.14 – 撤销所有授权后的**list-grant**命令响应](image/B21384_03_14.jpg)'
- en: Figure 3.14 – Response for the list-grant command after revoking all the grants
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.14 – 撤销所有授权后的**list-grant**命令响应
- en: Similarly, we can grant permission for other operations.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以为其他操作授予权限。
- en: How it works...
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we granted permission to a user using the **create-grant** subcommand
    of the **aws kms** CLI command. We verified that the user could not perform encryption
    before granting permission. We verified that the user could perform encryption
    after granting permission.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用**aws kms** CLI命令的**create-grant**子命令授予了用户权限。我们验证了在授权之前，用户无法执行加密操作。我们验证了授权之后，用户可以执行加密操作。
- en: Then, we revoked the grant using the **revoke-grant** subcommand of the **aws
    kms** CLI command. We also used other subcommands, such as **list-grants** to
    list the grants for a particular key ID and **encrypt** to encrypt the plain text.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用**aws kms** CLI命令的**revoke-grant**子命令撤销了授权。我们还使用了其他子命令，如**list-grants**来列出特定密钥ID的授权，以及**encrypt**来加密明文数据。
- en: There’s more...
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: 'In this recipe, we granted permission to only one operation. We can grant permission
    to multiple operations, as shown here:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们只为一个操作授予了权限。我们可以为多个操作授予权限，如下所示：
- en: '[PRE10]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let’s quickly go through some important concepts related to granting and revoking
    permissions:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速浏览一些与授权和撤销权限相关的重要概念：
- en: The supported grant operations are **Encrypt** , **Decrypt** , **GenerateDataKey**
    , **GenerateDataKeyWithoutPlaintext** , **ReEncryptFrom** , **ReEncryptTo** ,
    **CreateGrant** , **RetireGrant** , and **DescribeKey** .
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持的授权操作包括**Encrypt**、**Decrypt**、**GenerateDataKey**、**GenerateDataKeyWithoutPlaintext**、**ReEncryptFrom**、**ReEncryptTo**、**CreateGrant**、**RetireGrant**和**DescribeKey**。
- en: We can use the **encrypt** subcommand of the AWS KMS API to convert plain text
    into ciphertext with the help of a key.
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用AWS KMS API的**encrypt**子命令，通过密钥将明文转换为密文。
- en: We can use the **decrypt** subcommand of AWS KMS API to convert ciphertext into
    plain text with the help of the same key that was used for encryption.
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用 AWS KMS API 的 **decrypt** 子命令，在加密时使用的相同密钥的帮助下，将密文转换为明文。
- en: We can use the **re-encrypt** subcommand of the AWS KMS API to decrypt and re-encrypt
    data on the server side with a new CMK without exposing the plain text on the
    client side. This subcommand can also be used to change the encryption context
    of a ciphertext.
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用 AWS KMS API 的 **re-encrypt** 子命令，在服务器端使用新的 CMK 解密并重新加密数据，而无需在客户端暴露明文。此子命令还可以用来更改密文的加密上下文。
- en: Encryption context is an optional additional set of key-value pairs that form
    an additional authentication check. The same encryption context that is used for
    encryption needs to be used for decryption and re-encryption. Since the encryption
    context is not a secret, it will appear in plain text within AWS CloudTrail logs,
    making it useful for monitoring and auditing cryptographic operations.
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加密上下文是一组可选的附加键值对，作为额外的身份验证检查。用于加密的相同加密上下文需要在解密和重新加密时使用。由于加密上下文不是秘密信息，它将以明文形式出现在
    AWS CloudTrail 日志中，因此对于监控和审计加密操作非常有用。
- en: Grants are an alternative to key policies.
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 授权是密钥策略的替代方案。
- en: Within the same account, we can use the key ID or key ARN with the **create-grant**
    subcommand. For users in other accounts, the ARN needs to be specified.
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在同一账户内，我们可以使用密钥 ID 或密钥 ARN 与 **create-grant** 子命令。对于其他账户的用户，需指定 ARN。
- en: The **create-grant** subcommand has a constraints parameter that accepts an
    encryption context.
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**create-grant** 子命令具有一个约束参数，接受加密上下文。'
- en: When we create grants, the permissions may not be reflected immediately due
    to the eventual consistency model followed by AWS. By using the grant tokens that
    are received from the **create-grant** subcommand in further requests, we can
    avoid any delays due to eventual consistency.
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们创建授权时，由于 AWS 遵循最终一致性模型，权限可能不会立即反映出来。通过在后续请求中使用从 **create-grant** 子命令接收到的授权令牌，我们可以避免由于最终一致性导致的延迟。
- en: The **list-grants** subcommand is used to list all the grants for a key and
    provides the additional **starting-token** , **page-size** , and **max-items**
    parameters for paginating the result.
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**list-grants** 子命令用于列出某个密钥的所有授权，并提供附加的 **starting-token**、**page-size** 和
    **max-items** 参数，用于分页结果。'
- en: 'The AWS CLI pagination parameters, **starting-token** , **page-size** , and
    **max-items** , have the following functions:'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CLI 分页参数 **starting-token**、**page-size** 和 **max-items** 的功能如下：
- en: The **max-items** parameter states the maximum number of items that need to
    be returned by the API.
  id: totrans-242
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**max-items** 参数指定 API 需要返回的最大项目数量。'
- en: If there are more results from the API calls than specified by **max-items**
    , then **NextToken** is provided in the response, which needs to be passed as
    **starting-token** in the next request.
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 API 调用返回的结果超过了 **max-items** 所指定的数量，则响应中会提供 **NextToken**，需要将其作为 **starting-token**
    传递到下一次请求中。
- en: The **page-size** parameter specifies the maximum number of elements to retrieve
    in a single API call. For example, if **page-size** is **10** and **max-items**
    is **100** , 10 API calls will be made in the background and then 100 items will
    be returned.
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**page-size** 参数指定单次 API 调用中要检索的最大元素数。例如，如果 **page-size** 为 **10** 且 **max-items**
    为 **100**，则后台会发起 10 次 API 调用，并返回 100 个项目。'
- en: The **revoke-grant** subcommand can be run by the root user of the account that
    created it, **RetiringPrincipal** of the grant, or **GranteePrincipal** if they’ve
    been given the grant for the **RetireGrant** operation.
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**revoke-grant** 子命令可以由创建该授权的账户的根用户、授权的 **RetiringPrincipal** 或被授予该授权进行 **RetireGrant**
    操作的 **GranteePrincipal** 运行。'
- en: The AWS documentation recommends that, when cleaning up, we retire a grant when
    we’re done using it using the **retire-grant** subcommand. However, we should
    revoke a grant using the **revoke-grant** subcommand when we intend to actively
    deny operations that depend on it.
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS 文档建议，在清理时，当我们不再使用授权时，通过 **retire-grant** 子命令撤销该授权。然而，当我们有意拒绝依赖该授权的操作时，应使用
    **revoke-grant** 子命令撤销授权。
- en: The **list-retirable-grants** subcommand can be used to list all grants with
    the specified **RetiringPrincipal** .
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**list-retirable-grants** 子命令可以用来列出所有具有指定 **RetiringPrincipal** 的授权。'
- en: The **list-retirable-grants** subcommand provides the **limit** and **maker**
    parameters to limit the retriable grants that need to be returned. Here, **limit**
    is the maximum number of items that need to be returned, while **marker** is the
    value of **NextMarker** that is returned with the previous request when more items
    than what’s specified by the limit parameter need to be returned.
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**list-retirable-grants**子命令提供了**limit**和**marker**参数，用于限制需要返回的可重试授权。这里，**limit**是需要返回的最大项数，而**marker**是上次请求返回的**NextMarker**的值，当需要返回的项数超过**limit**参数所指定的数目时使用。'
- en: See also
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'To understand the basics of grants in AWS KMS, refer to this blog post: [https://www.cloudericks.
    com/blog/understanding-grants-in-aws-kms](https://www.cloudericks.com/blog/understanding-grants-in-aws-kms)
    .'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解AWS KMS中的授权基础，请参考这篇博客文章：[https://www.cloudericks.com/blog/understanding-grants-in-aws-kms](https://www.cloudericks.com/blog/understanding-grants-in-aws-kms)。
- en: Using key policies with conditional keys
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用带条件密钥的密钥策略
- en: In this recipe, we will learn how to use **key policies** , especially with
    conditions. Resource-based policies for KMS keys are called key policies. When
    managing access to KMS resources, we can use key policies alone, or we can use
    IAM policies and grants along with key policies. Unlike other resource-based policies
    such as bucket policies, which are not mandatory, key policies are mandatory to
    manage and use keys. When a key is created, a default key policy is created by
    AWS, as we saw in the *Creating keys in* *KMS* recipe.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何使用**密钥策略**，特别是带条件的密钥策略。KMS密钥的基于资源的策略被称为密钥策略。管理KMS资源的访问时，我们可以单独使用密钥策略，也可以将IAM策略和授权与密钥策略一起使用。与其他基于资源的策略（如桶策略）不同，密钥策略是强制性的，用于管理和使用密钥。当密钥被创建时，AWS会自动创建一个默认的密钥策略，就像我们在*创建KMS密钥*示例中看到的那样。
- en: Getting ready
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: 'We’ll need the following to complete this recipe:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要以下内容来完成这个示例：
- en: A working AWS account, **awsseccb-sandbox-1** , and a user, **awsseccbadmin1**
    , as described in the *Technical* *requirements* section.
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有效的AWS账户，**awsseccb-sandbox-1**，和一个用户，**awsseccbadmin1**，如*技术要求*部分所述。
- en: An S3 bucket created in the **us-east-1** region. I will use a bucket called
    **awssecuritykmsbucket** .
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**us-east-1**区域创建一个S3桶。我将使用一个名为**awssecuritykmsbucket**的桶。
- en: How to do it...
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'We can demonstrate the use of key policies with condition keys as follows:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式演示如何使用带条件密钥的密钥策略：
- en: 'Create a key with the default configuration from the console, as follows:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用控制台的默认配置创建密钥，如下所示：
- en: Go to **Key Management Service (KMS)** in the Management Console.
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到管理控制台中的**密钥管理服务（KMS）**。
- en: Select **Customer-managed keys** from the left sidebar and click **Create key**
    .
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧边栏选择**客户管理的密钥**并点击**创建密钥**。
- en: In the **Configure key** pane, under **Key type** , select **Symmetric** . Then,
    under **Key usage** , select **Encrypt and decrypt** . Click **Next** .
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**配置密钥**面板中，选择**密钥类型**下的**对称**。然后，在**密钥使用**下选择**加密和解密**。点击**下一步**。
- en: Provide **Alias** and **Description** values, leave the other selections as-is,
    and click **Next** .
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供**别名**和**描述**值，保持其他选择不变，然后点击**下一步**。
- en: On the next screen, do not add any **Key administrators** . Instead, simply
    click **Next** .
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，不要添加任何**密钥管理员**。相反，直接点击**下一步**。
- en: In the **Define key usage permissions** pane, do not add any **Key users** either.
    Simply click **Next** .
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**定义密钥使用权限**面板中，也不要添加任何**密钥用户**。直接点击**下一步**。
- en: 'At this point, we should see the policy, as shown in the following figure.
    Review and click **Finish** :'
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，我们应该看到如下图所示的策略。请审阅并点击**完成**：
- en: '![Figure 3.15 – The key policy for review](image/B21384_03_15.jpg)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![图3.15 – 密钥策略审核](image/B21384_03_15.jpg)'
- en: Figure 3.15 – The key policy for review
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.15 – 密钥策略审核
- en: 'We can add this KMS key as the encryption key for an S3 bucket in the same
    region as follows:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以按照以下方式，将此KMS密钥添加为同一区域内S3桶的加密密钥：
- en: Go to the **Properties** tab of our S3 bucket.
  id: totrans-270
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到我们S3桶的**属性**标签页。
- en: Scroll down to **Default encryption** and click **Edit** .
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动到**默认加密**并点击**编辑**。
- en: In the **Default encryption** pane, under **Encryption type** , select **Server-side
    encryption with AWS Key Management Service** **keys (SSE-KMS)** .
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**默认加密**面板中，选择**加密类型**下的**使用AWS密钥管理服务（KMS）密钥的服务器端加密（SSE-KMS）**。
- en: Under **AWS KMS key** , enter the ARN of the key that we created.
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**AWS KMS密钥**下，输入我们创建的密钥的ARN。
- en: For **Bucket Key** , select **Disable** .
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**Bucket Key**，选择**禁用**。
- en: Click **Save changes** .
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存更改**。
- en: '![Figure 3.16 – Adding an encryption key for an S3 bucket](image/B21384_03_16.jpg)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.16 – 为 S3 存储桶添加加密密钥](image/B21384_03_16.jpg)'
- en: Figure 3.16 – Adding an encryption key for an S3 bucket
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.16 – 为 S3 存储桶添加加密密钥
- en: 'Upload a file to S3 and verify that encryption and decryption are working:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件上传到 S3，并验证加密和解密是否正常工作：
- en: Upload a file into the S3 bucket.
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件上传到 S3 存储桶中。
- en: Click on that file and click **Open** . We should be able to view the file’s
    contents.
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击该文件，然后点击**打开**。我们应该能查看文件的内容。
- en: '![Figure 3.17 – Viewing the content of the S3 bucket](image/B21384_03_17.jpg)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.17 – 查看 S3 存储桶内容](image/B21384_03_17.jpg)'
- en: Figure 3.17 – Viewing the content of the S3 bucket
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.17 – 查看 S3 存储桶内容
- en: 'Deny key usages from the S3 service by adding a key policy statement:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加密钥策略声明来拒绝 S3 服务的密钥使用：
- en: Go to **Key Management Service** in the Management Console.
  id: totrans-284
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在管理控制台中转到 **密钥管理服务**。
- en: Click **Customer-managed keys** .
  id: totrans-285
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**客户管理的密钥**。
- en: Click on the key we need to modify.
  id: totrans-286
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击我们需要修改的密钥。
- en: Click on the **Key** **policy** tab.
  id: totrans-287
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**密钥** **策略**选项卡。
- en: Click **Switch to** **policy view** .
  id: totrans-288
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**切换到** **策略视图**。
- en: Click **Edit** , add the following key policy statement with proper commas,
    and click **Save changes** .
  id: totrans-289
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**编辑**，添加以下密钥策略声明并确保逗号正确，然后点击**保存更改**。
- en: '[PRE11]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Go back to the same file we opened in *Step 3* and click **Open** to open the
    file. We won’t be able to view the file now and will get the following error.
    This has happened because S3 doesn’t have permission to use the key to perform
    decryption:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到我们在*步骤 3*中打开的相同文件，点击**打开**以打开文件。现在我们将无法查看文件，并将收到以下错误。这是因为 S3 没有权限使用密钥执行解密操作：
- en: '![Figure 3.18 – Error while trying to view the content of the S3 bucket after
    encryption](image/B21384_03_18.jpg)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.18 – 尝试查看 S3 存储桶内容时发生的错误](image/B21384_03_18.jpg)'
- en: Figure 3.18 – Error while trying to view the content of the S3 bucket after
    encryption
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.18 – 尝试查看 S3 存储桶内容时发生的错误
- en: If we try to run the URL directly on a browser without clicking **Open** from
    the S3 console, the file won’t be displayed with or without the key condition
    policy since we’re using SSE-KMS encryption.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们直接在浏览器中运行 URL，而不从 S3 控制台点击**打开**，则无论是否有密钥条件策略，由于使用了 SSE-KMS 加密，文件将无法显示。
- en: How it works...
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we created a key with default permissions and tried encrypting
    and decrypting files in the S3 bucket with that key. We were able to successfully
    encrypt and decrypt. Then, we added an explicit **Deny** for the S3 service using
    the **kms:ViaService** condition key and tried decrypting the same file again.
    This time, we weren’t able to decrypt.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们创建了一个具有默认权限的密钥，并尝试使用该密钥对 S3 存储桶中的文件进行加密和解密。我们成功地完成了加密和解密操作。然后，我们为 S3
    服务使用 **kms:ViaService** 条件密钥添加了显式的**拒绝**，并再次尝试解密相同的文件。这一次，我们无法解密。
- en: As we saw in *Step 1* of this recipe, the default key policy gives full permission
    to the owner account’s root user and enables the IAM policies that are required
    to access the KMS key. It also allows key administrators to administrate the KMS
    key and key users to use the KMS key. Also, we need to specify the region for
    the S3 service while using it within the **ViaService** API. I used **us-east-1**
    since my bucket is present in **us-east-1** .
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本食谱的*步骤 1*中看到的，默认的密钥策略为所有者账户的根用户提供完全权限，并启用访问 KMS 密钥所需的 IAM 策略。它还允许密钥管理员管理
    KMS 密钥，并允许密钥用户使用 KMS 密钥。此外，我们在使用 **ViaService** API 时，需要指定 S3 服务的区域。我使用了**us-east-1**，因为我的存储桶位于
    **us-east-1**。
- en: 'In our key policy JSON, we used the following elements:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的密钥策略 JSON 中，我们使用了以下元素：
- en: '**Effect** : Specifies whether to allow or deny permissions.'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Effect** ：指定是否允许或拒绝权限。'
- en: '**Principal** : Specifies who gets the permissions. Allowed values include
    AWS accounts (root), IAM users, IAM roles, and supported AWS services.'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Principal** ：指定谁获得权限。允许的值包括 AWS 账户（根账户）、IAM 用户、IAM 角色和支持的 AWS 服务。'
- en: '**Action** : Specifies the operations (for example, **kms:Encrypt** ) to allow
    or deny.'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Action** ：指定要允许或拒绝的操作（例如，**kms:Encrypt**）。'
- en: '**Resource** : Specifies the resource to apply the policy. We specified *****
    to denote all the resources.'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Resource** ：指定应用策略的资源。我们使用 ***** 来表示所有资源。'
- en: '**Condition** : Used to specify any condition for the key policy to take effect.
    This is an optional element.'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Condition** ：用于指定密钥策略生效的任何条件。这是一个可选元素。'
- en: We can also specify an optional **Sid** parameter. **Sid** stands for **statement
    identifier** and can contain a string value that describes our policy.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以指定一个可选的 **Sid** 参数。**Sid** 代表 **语句标识符**，可以包含描述我们策略的字符串值。
- en: There’s more...
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Let’s quickly go through some important concepts about using key policies:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速了解一些关于使用密钥策略的重要概念：
- en: To manage access to KMS resources, we can use key policies alone, or we can
    use IAM policies and grants along with key policies.
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了管理 KMS 资源的访问，我们可以单独使用密钥策略，也可以将 IAM 策略和授权与密钥策略一起使用。
- en: To allow access to KMS keys, we always need to use key policies, either alone
    or along with IAM policies or grants.
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了允许访问 KMS 密钥，我们始终需要使用密钥策略，可以单独使用，或者与 IAM 策略或授权一起使用。
- en: The primary resource within KMS is the KMS key.
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: KMS 中的主要资源是 KMS 密钥。
- en: 'A KMS key’s ARN has the following form: **arn:aws:kms:<region>:<accountID>:key/<key
    ID>** .'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: KMS 密钥的 ARN 具有以下形式：**arn:aws:kms:<region>:<accountID>:key/<key ID>**。
- en: 'Some KMS operations also allow the use of an alias as a resource. An alias
    ARN has the following form: **arn:aws:kms:<region>:<account** **ID>:alias/<alias
    name>** .'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些 KMS 操作还允许使用别名作为资源。别名 ARN 具有以下形式：**arn:aws:kms:<region>:<accountID>:alias/<alias
    name>**。
- en: Any user, including the root user, can access the KMS key, but only if the key
    policy allows it.
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何用户，包括根用户，都可以访问 KMS 密钥，但前提是密钥策略允许。
- en: The default key policy when a KMS key is created from the Management Console
    gives full permission to the owner’s account root user and also enables IAM policies
    that are required to access the KMS key. It will also allow key administrators
    to administrate the KMS key and key users to use the KMS key. The default key
    policy when a KMS key is created programmatically gives full permission to the
    owner’s account root user. It also enables IAM policies that are required to access
    the KMS key.
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从管理控制台创建 KMS 密钥时，默认的密钥策略会将完全权限授予所有者账户的根用户，并启用访问 KMS 密钥所需的 IAM 策略。它还将允许密钥管理员管理
    KMS 密钥，并允许密钥用户使用 KMS 密钥。从程序方式创建 KMS 密钥时，默认的密钥策略将完全权限授予所有者账户的根用户。它还启用访问 KMS 密钥所需的
    IAM 策略。
- en: When we add key administrators or key users, they are added to the policy document
    statement with the required permissions. We saw the complete list of permissions
    for both key administrators and key users in the *Creating keys in* *KMS* recipe.
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们添加密钥管理员或密钥用户时，他们会被添加到策略文档语句中，并授予所需的权限。我们在 *创建 KMS 密钥* 配方中看到了密钥管理员和密钥用户的完整权限列表。
- en: AWS has added a wildcard to some of the default permissions, such as **kms:Create***
    , **kms:Describe*** , and others, so that if AWS creates a new action that starts
    with the same prefix, the administrators or users will get those permissions automatically.
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS 在一些默认权限中添加了通配符，例如 **kms:Create***、**kms:Describe*** 等，以便如果 AWS 创建一个新的以相同前缀开头的操作，管理员或用户将自动获得这些权限。
- en: AWS provides global condition keys, as well as service-specific keys.
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS 提供了全局条件密钥以及特定服务的密钥。
- en: The global condition keys include **aws:PrincipalTag** , **aws:PrincipalType**
    , **aws:RequestTag** , **aws:SourceIp** , **aws:SourceVpc** , **aws:SourceVpce**
    , **aws:TagKeys** , **aws:TokenIssueTime** , **aws:userid** , and **aws:username**
    .
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局条件密钥包括 **aws:PrincipalTag**、**aws:PrincipalType**、**aws:RequestTag**、**aws:SourceIp**、**aws:SourceVpc**、**aws:SourceVpce**、**aws:TagKeys**、**aws:TokenIssueTime**、**aws:userid**
    和 **aws:username**。
- en: The AWS KMS condition keys include **kms:BypassPolicyLockoutSafetyCheck** ,
    **kms:CallerAccount** , **kms:EncryptionContext** , **kms:EncryptionContextKeys**
    , **kms:ExpirationModel** , **kms:GrantConstraintType** , **kms:GrantIsForAWSResource**
    , **kms:GrantOperations** , **kms:GranteePrincipal** , **kms:KeyOrigin** , **kms:ReEncryptOnSameKey**
    , **kms:RetiringPrincipal** , **kms:ValidTo** , **kms:ViaService** , **kms:WrappingAlgorithm**
    , and **kms:WrappingKeySpec** .
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS KMS 条件密钥包括 **kms:BypassPolicyLockoutSafetyCheck**、**kms:CallerAccount**、**kms:EncryptionContext**、**kms:EncryptionContextKeys**、**kms:ExpirationModel**、**kms:GrantConstraintType**、**kms:GrantIsForAWSResource**、**kms:GrantOperations**、**kms:GranteePrincipal**、**kms:KeyOrigin**、**kms:ReEncryptOnSameKey**、**kms:RetiringPrincipal**、**kms:ValidTo**、**kms:ViaService**、**kms:WrappingAlgorithm**
    和 **kms:WrappingKeySpec**。
- en: See also
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: 'You can read more about AWS KMS key policies here: [https://www.cloudericks.
    com/blog/understanding-key-policies-in-aws-kms](https://www.cloudericks.com/blog/understanding-key-policies-in-aws-kms)
    .'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在这里阅读更多关于 AWS KMS 密钥策略的内容：[https://www.cloudericks.com/blog/understanding-key-policies-in-aws-kms](https://www.cloudericks.com/blog/understanding-key-policies-in-aws-kms)。
- en: 'You can read about the differences between key policies and grants here: [https://www.cloudericks.com/blog/understanding-aws-kms-key-policies-vs-grants](https://www.cloudericks.com/blog/understanding-aws-kms-key-policies-vs-grants)
    .'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在这里阅读关于密钥策略和授权之间的区别：[https://www.cloudericks.com/blog/understanding-aws-kms-key-policies-vs-grants](https://www.cloudericks.com/blog/understanding-aws-kms-key-policies-vs-grants)。
- en: 'You can read more about AWS KMS condition keys here: [https://www.cloudericks.com/blog/understanding-aws-kms-condition-keys](https://www.cloudericks.com/blog/understanding-aws-kms-condition-keys)
    .'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在这里阅读更多关于 AWS KMS 条件密钥的内容：[https://www.cloudericks.com/blog/understanding-aws-kms-condition-keys](https://www.cloudericks.com/blog/understanding-aws-kms-condition-keys)。
- en: 'You can read more about policies and permissions within AWS here: [https://www.cloudericks.com/blog/demystifying-aws-policies-and-permissions](https://www.cloudericks.com/blog/demystifying-aws-policies-and-permissions)
    .'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在这里阅读更多关于 AWS 中的策略和权限的内容：[https://www.cloudericks.com/blog/demystifying-aws-policies-and-permissions](https://www.cloudericks.com/blog/demystifying-aws-policies-and-permissions)。
- en: Sharing customer-managed keys across accounts
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨账户共享客户管理的密钥
- en: In this recipe, we will learn how to use a KMS key from one account in another
    account.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个操作中，我们将学习如何在一个账户中使用来自另一个账户的 KMS 密钥。
- en: Getting ready
  id: totrans-326
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We’ll need the following to complete this recipe:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要以下内容来完成此操作：
- en: Two working AWS accounts. I will be using the accounts we created in *Chapter
    1* , with the account ID of the first account being **135301570106** and the account
    ID of the second account being **380701114427** .
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个工作中的 AWS 账户。我将使用我们在*第一章*中创建的账户，第一个账户的账户 ID 为**135301570106**，第二个账户的账户 ID 为**380701114427**。
- en: A user from account 2 with **AdministratorAccess** permission. This could be
    an IAM user or an IAM Identity Center user. The CLI profile should be configured
    for this user. I will be calling the CLI profile **Adminuserprofile** .
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 账户 2 中拥有**AdministratorAccess**权限的用户。这可以是一个 IAM 用户或一个 IAM 身份中心用户。CLI 配置文件应为该用户配置。我将称这个
    CLI 配置文件为**Adminuserprofile**。
- en: Another user without administrator permissions in account 2. The CLI profile
    should be configured for this user. I will be calling this user and its CLI profile
    **Testuserprofile** .
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个没有管理员权限的账户 2 用户。CLI 配置文件应为该用户配置。我将称这个用户及其 CLI 配置文件为**Testuserprofile**。
- en: How to do it...
  id: totrans-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: First, we will create a new KMS key in the first account. After that, we will
    provide permission to use it from the second account. Finally, we will test the
    first account from the second account using that KMS key.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在第一个账户中创建一个新的 KMS 密钥。然后，我们将授权第二个账户使用它。最后，我们将使用该 KMS 密钥从第二个账户测试第一个账户。
- en: Creating a key and giving permission to the other account
  id: totrans-333
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建密钥并授权给另一个账户
- en: 'In this section, we will create a key in account 1 with key usage permission
    to account 2. Let’s get started:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将在账户 1 中创建一个密钥，并赋予账户 2 密钥使用权限。让我们开始吧：
- en: Log in to the AWS Management Console and go to **Key** **Management Service**
    .
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到 AWS 管理控制台并进入**密钥管理服务**。
- en: Click on **Customer managed keys** from the left sidebar and click on **Create
    key** at the top right of the page.
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧边栏点击**客户管理的密钥**，然后在页面右上角点击**创建密钥**。
- en: In the **Configure key** pane, for **Key type** , select **Symmetric** , and
    for **Key usage** , select **Encrypt and decrypt** . Then, click **Next** .
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**配置密钥**窗格中，选择**密钥类型**为**对称**，选择**密钥使用**为**加密和解密**。然后点击**下一步**。
- en: In the **Add labels** pane, provide **Alias** and **Description** values. Click
    **Next** .
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**添加标签**窗格中，提供**别名**和**描述**值。点击**下一步**。
- en: On the **Define key administrative permissions** screen, we can add any **Key
    administrators** if we want to and select the checkbox for **Allow key administrators
    to delete this key** . Click **Next** .
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**定义关键管理权限**屏幕上，如果需要，我们可以添加任何**密钥管理员**，并勾选**允许密钥管理员删除此密钥**的复选框。然后点击**下一步**。
- en: 'On the **Define key usage permissions** screen, scroll down to the **Other
    AWS accounts** section and click **Add another AWS account** , as shown in the
    following figure:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**定义密钥使用权限**屏幕上，向下滚动到**其他 AWS 账户**部分，然后点击**添加另一个 AWS 账户**，如下面的图所示：
- en: '![Figure 3.19 – The Other AWS accounts section](image/B21384_03_19.jpg)'
  id: totrans-341
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.19 – 其他 AWS 账户部分](image/B21384_03_19.jpg)'
- en: Figure 3.19 – The Other AWS accounts section
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.19 – 其他 AWS 账户部分
- en: Enter the account ID of the second AWS account and click **Next** .
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入第二个 AWS 账户的账户 ID，然后点击**下一步**。
- en: '![Figure 3.20 – Adding other AWS accounts](image/B21384_03_20.jpg)'
  id: totrans-344
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.20 – 添加其他 AWS 账户](image/B21384_03_20.jpg)'
- en: Figure 3.20 – Adding other AWS accounts
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.20 – 添加其他 AWS 账户
- en: On the **Review** screen, review the **Key policy** details and click **Finish**
    . The statement that’s been added to the key policy is available within the code
    files as **key-policy-sharing-keys.json** .
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**审查**页面，审查**密钥策略**详细信息并点击**完成**。已添加到密钥策略中的声明可以在代码文件中找到，文件名为**key-policy-sharing-keys.json**。
- en: 'Once we get a success message that the key has been created, click **View key**
    to see the details of the key. The ARN for my newly created key is as follows:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦收到密钥创建成功的消息，点击**查看密钥**以查看密钥的详细信息。我的新创建的密钥的 ARN 如下：
- en: '[PRE12]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this section, we created a key in account 1 and gave permission to account
    2. In the next section, we will use this key in account 2.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们在账户 1 中创建了一个密钥，并授予账户 2 权限。在下一节中，我们将在账户 2 中使用此密钥。
- en: Using the key as an administrator user from account 2
  id: totrans-350
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以来自账户 2 的管理员用户身份使用该密钥
- en: Now, let’s try using the key as a user with administrator permission from account
    2.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试以来自账户 2 的管理员权限用户身份使用该密钥。
- en: 'Encrypt the data with the profile of an administrator user from account 2 from
    the CLI using the following command:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令，通过账户 2 中的管理员用户配置文件在CLI中加密数据：
- en: '[PRE13]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We should see the following response:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到以下响应：
- en: '![Figure 3.21 – Response after running the encrypt command for the admin user](image/B21384_03_21.jpg)'
  id: totrans-355
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.21 – 运行加密命令后，管理员用户的响应](image/B21384_03_21.jpg)'
- en: Figure 3.21 – Response after running the encrypt command for the admin user
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.21 – 运行加密命令后，管理员用户的响应
- en: In the next section, we will use the key as a non-admin user from account 2.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将以来自账户 2 的非管理员用户身份使用该密钥。
- en: Using the key as a non-admin user from account 2
  id: totrans-358
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以来自账户 2 的非管理员用户身份使用该密钥
- en: 'Before proceeding, we can verify that the non-admin user doesn’t have access
    to encrypt the data in account 1 by running the command shown in *Step 1* of the
    previous section while using the non-admin user profile. Now, follow these steps:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我们可以通过使用非管理员用户配置文件运行上一节中*步骤 1* 显示的命令，验证非管理员用户是否没有权限加密账户 1 中的数据。现在，按照以下步骤操作：
- en: 'To use the KMS key as a non-admin user, the root or the admin user of account
    2 has to delegate the permission to the non-admin user. To do so, they must follow
    these steps:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将 KMS 密钥作为非管理员用户使用，账户 2 的根用户或管理员用户必须将权限委托给非管理员用户。为此，他们必须执行以下步骤：
- en: Go to the **IAM** dashboard of account 2.
  id: totrans-361
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到账户 2 的**IAM**仪表盘。
- en: Click on **Policies** on the left pane.
  id: totrans-362
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧面板中的**策略**。
- en: Click **Create policy** .
  id: totrans-363
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建策略**。
- en: Go to the **JSON** tab.
  id: totrans-364
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**JSON**标签。
- en: 'Enter the following policy. Make sure you update the **Sid** value and the
    **Resource** parameters to reflect your resource details:'
  id: totrans-365
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下策略。确保更新**Sid**值和**Resource**参数，以反映您的资源详细信息：
- en: '[PRE14]'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Click **Next** .
  id: totrans-367
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**。
- en: In the **Review and create** pane, for **Policy details** , provide **Name**
    and **Description** detail for our policy.
  id: totrans-368
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**审查并创建**面板中，针对**策略详细信息**，为我们的策略提供**名称**和**描述**详细信息。
- en: Click **Create policy** .
  id: totrans-369
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建策略**。
- en: If you’re using an IAM user, assign this policy directly to that IAM user or
    a group that the user is part of. If you have an IAM Identity Center user, you
    can assign this policy using a custom permission set, as we saw in the *Creating
    customer-managed policies in IAM Identity Center* recipe of *Chapter 2* .
  id: totrans-370
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您使用的是 IAM 用户，请将此策略直接分配给该 IAM 用户或该用户所在的组。如果您使用的是 IAM 身份中心用户，您可以使用自定义权限集分配此策略，正如我们在*第二章*的*在
    IAM 身份中心中创建客户管理的策略*示例中所看到的那样。
- en: 'Encrypt the data with the profile of a non-administrator user from account
    2 from the CLI using the following command:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令，通过账户 2 的非管理员用户配置文件在CLI中加密数据：
- en: '[PRE15]'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We should see the following response:'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们应该看到以下响应：
- en: '![Figure 3.22 – Response after running the encrypt command for the non-admin
    user](image/B21384_03_22.jpg)'
  id: totrans-374
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.22 – 运行加密命令后，非管理员用户的响应](image/B21384_03_22.jpg)'
- en: Figure 3.22 – Response after running the encrypt command for the non-admin user
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.22 – 运行加密命令后，非管理员用户的响应
- en: In this recipe, we created a new KMS key. We can also edit an existing KMS key
    and add another account’s details.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们创建了一个新的 KMS 密钥。我们也可以编辑现有的 KMS 密钥，并添加另一个账户的详细信息。
- en: How it works...
  id: totrans-377
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we created a KMS key in account 1 with permissions for account
    2. After that, we successfully encrypted data on the other account with an administrator
    user’s profile from CLI. To encrypt using a non-administrator user, the administrator
    user of account 2 needs to delegate permissions to the user or role that needs
    access. We did this through an IAM policy.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们在账户1中创建了一个KMS密钥，并为账户2授予了权限。之后，我们成功地通过管理员用户的配置文件从CLI对另一个账户的数据进行了加密。要使用非管理员用户进行加密，账户2的管理员用户需要将权限委托给需要访问的用户或角色。我们通过IAM策略完成了这一步骤。
- en: For more details on the policy document’s structure, refer to the *Using key
    policies with conditional* *keys* recipe.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 有关策略文档结构的更多详细信息，请参考*使用带条件的密钥的密钥策略*教程。
- en: There’s more...
  id: totrans-380
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: In this recipe, we tried encrypting data from the AWS CLI. Even though delegating
    key permissions across accounts is supported for most integrated services, such
    as S3 and EC2, their support for selecting the key automatically from the console
    may not be supported. Check out each service’s documentation for more details.
    If there is a limitation from the Management Console, then we will need to do
    this through the API by specifying the ARN of the key.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们尝试通过AWS CLI对数据进行加密。尽管大多数集成服务（如S3和EC2）支持跨账户委托密钥权限，但它们可能不支持在控制台中自动选择密钥。请查看每个服务的文档以获取更多详情。如果在管理控制台中存在限制，则需要通过API并指定密钥的ARN来完成此操作。
- en: See also
  id: totrans-382
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: We’ve explored many features of AWS KMS within this chapter. There are many
    applications and integrations for KMS within the AWS cloud, such as S3 encryption,
    EBS encryption, and more. Including all of those applications and integrations
    would require a book dedicated to KMS. You may explore more applications and integrations
    of KMS within the AWS cloud at [https://www.cloudericks.com/blog/applications-of-aws-kms-within-aws-cloud](https://www.cloudericks.com/blog/applications-of-aws-kms-within-aws-cloud)
    .
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们探讨了AWS KMS的许多功能。KMS在AWS云中有许多应用和集成，如S3加密、EBS加密等。包括所有这些应用和集成需要一本专门讲解KMS的书。您可以在[https://www.cloudericks.com/blog/applications-of-aws-kms-within-aws-cloud](https://www.cloudericks.com/blog/applications-of-aws-kms-within-aws-cloud)上探索更多关于KMS在AWS云中的应用和集成。
- en: Creating, initializing, and activating a CloudHSM cluster
  id: totrans-384
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建、初始化和激活CloudHSM集群
- en: In this recipe, we will create an AWS CloudHSM cluster. CloudHSM is a dedicated
    **hardware security module** ( **HSM** ) on the AWS cloud that we can use to generate
    and use encryption keys. AWS KMS, on the other hand, uses shared HSM. CloudHSM
    is ideal for scenarios demanding the highest level of isolation and control.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将创建一个AWS CloudHSM集群。CloudHSM是AWS云上的专用**硬件安全模块**（**HSM**），我们可以用它来生成和使用加密密钥。而AWS
    KMS则使用共享HSM。CloudHSM非常适合那些要求最高隔离和控制的场景。
- en: Getting ready
  id: totrans-386
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We’ll need the following to complete this recipe:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本教程，我们需要以下资源：
- en: A working AWS account, **awsseccb-sandbox-1** , and a user, **awsseccbadmin1**
    , as described in the *Technical* *requirements* section.
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有效的AWS账户，**awsseccb-sandbox-1**，以及一个用户，**awsseccbadmin1**，如*技术要求*部分所述。
- en: Knowledge of VPCs and EC2. If you are new to EC2 or want to refresh the concepts,
    you may first practice the recipes in [*Chapter 5*](B21384_05.xhtml#_idTextAnchor169)
    , and then come back to this recipe.
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解VPC和EC2。如果您是EC2的新手或想复习相关概念，可以先练习[*第5章*](B21384_05.xhtml#_idTextAnchor169)中的教程，然后再回来完成本教程。
- en: Important note
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: AWS CloudHSM typically incurs higher costs compared to AWS KMS, and it does
    not offer a free tier option. For those utilizing CloudHSM for educational or
    learning purposes, it is crucial to promptly delete the resources you’ve created
    once you’ve completed the relevant recipes. This proactive step helps prevent
    any unexpected charges.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 与AWS KMS相比，AWS CloudHSM通常会产生更高的费用，并且不提供免费层选项。对于那些出于教育或学习目的使用CloudHSM的人来说，至关重要的是在完成相关教程后立即删除已创建的资源。这一主动步骤有助于防止任何意外费用的产生。
- en: How to do it...
  id: totrans-392
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: First, we need to create a cluster, initialize it, and then activate it from
    an EC2 instance within the same VPC as the cluster.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个集群，初始化它，然后从与集群位于同一VPC中的EC2实例激活它。
- en: Creating a CloudHSM cluster
  id: totrans-394
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建CloudHSM集群
- en: 'In this section, we will create a CloudHSM cluster using the default VPCs,
    as follows:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用默认VPC创建一个CloudHSM集群，具体步骤如下：
- en: Go to the **CloudHSM** service in the Management Console.
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入管理控制台中的**CloudHSM**服务。
- en: Click on **Create cluster** . If we can’t see the **Create cluster** option,
    we can click on **Clusters** from the left sidebar and then click on **Create
    cluster** in the right pane.
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Create cluster**。如果我们看不到**Create cluster**选项，可以点击左侧边栏中的**Clusters**，然后点击右侧窗格中的**Create
    cluster**。
- en: For **VPC** , select the VPC that we want to use or select the default VPC.
    This cannot be changed later.
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**VPC**，选择我们要使用的VPC或选择默认VPC。此项设置之后无法更改。
- en: Tip
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: You may also create a custom VPC with private and public subnets and use them
    instead of the default VPCs that we’re using in this chapter, especially if you’re
    configuring CloudHSM for production. We will be covering VPCs in depth in [*Chapter
    5*](B21384_05.xhtml#_idTextAnchor169) .
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以创建一个带有私有和公共子网的自定义VPC，并使用它们替代我们在本章中使用的默认VPC，尤其是在为生产环境配置CloudHSM时。我们将在[*第5章*](B21384_05.xhtml#_idTextAnchor169)中深入讨论VPC。
- en: Select subnets in at least two Availability Zones based on AWS’s recommendations.
    I have chosen three for this recipe in **us-east-1a** , **us-east-1b** , and **us-east-1c**
    .
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据AWS的建议，选择至少两个可用区中的子网。我为本例选择了三个子网，分别位于**us-east-1a**、**us-east-1b**和**us-east-1c**。
- en: Scroll down and, under **Cluster source** , select the **Create a new cluster**
    option. Click **Next** to proceed to the **Back-up retention** step. We also have
    a **Restore cluster from existing** **backup** option.
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动，在**Cluster source**下，选择**Create a new cluster**选项。点击**Next**进入**Back-up
    retention**步骤。我们还有一个**Restore cluster from existing** **backup**选项。
- en: In the **Back-up retention** step, under the **Backup retention** screen, for
    **Backup retention period (in days)** , based on your requirements, enter a period
    between 7 to 379 days. I have entered **7** . Click **Next** to proceed to the
    **Add** **tags** step.
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Back-up retention**步骤中，在**Backup retention**页面的**Backup retention period
    (in days)**字段中，根据您的需求，输入一个7到379天之间的期限。我输入的是**7**。点击**Next**进入**Add** **tags**步骤。
- en: In the **Add tags** step, optionally add tags to categorize our clusters. Then,
    click **Next** to proceed to the **Review** step.
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Add tags**步骤中，可选地为集群添加标签以进行分类。然后，点击**Next**进入**Review**步骤。
- en: Review the details on the **Review** screen, including **VPC** , **Availability
    Zone(s)** , **Days to expire under Back-up retention policy** , and **Tags** .
    We’ll also see a warning stating that we cannot change VPC or subnets after cluster
    creation.
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Review**页面查看详细信息，包括**VPC**、**Availability Zone(s)**、**Days to expire under
    Back-up retention policy**和**Tags**。我们还会看到一个警告，说明在集群创建后无法更改VPC或子网。
- en: After the review, click **Create cluster** . We should immediately see a message
    stating that the cluster is being created and that its state is **Creation in
    progress** . It may take a few minutes for cluster creation to complete. If the
    cluster creation operation is successful, we should see a screen with a success
    message and the state will be **Uninitialised** .
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审核后，点击**Create cluster**。我们应该会立即看到一条消息，说明集群正在创建中，状态为**Creation in progress**。集群创建完成可能需要几分钟。如果集群创建成功，我们将看到一条成功消息，状态为**Uninitialised**。
- en: In this section, we created a CloudHSM cluster. Next, we need to initialize
    and activate the cluster.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们创建了一个CloudHSM集群。接下来，我们需要初始化并激活集群。
- en: Initializing the cluster and creating our first HSM
  id: totrans-408
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 初始化集群并创建我们的第一个HSM
- en: 'We can initialize our cluster and create our first HSM by following these steps:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下步骤初始化集群并创建我们的第一个HSM：
- en: Select our cluster and click on **Initialize** from the **Actions** dropdown.
    Assuming we haven’t created any HSM yet, this will take us to the creation wizard
    for our first HSM.
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们的集群，然后从**Actions**下拉菜单中点击**Initialize**。假设我们尚未创建任何HSM，这将引导我们进入创建第一个HSM的向导。
- en: In the **Create HSM in the cluster** step, select one of the Availability Zones
    we selected while creating the cluster and click **Create** .
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Create HSM in the cluster**步骤中，选择创建集群时选择的一个可用区并点击**Create**。
- en: 'HSM creation can take some time. Once this process is successful, we should
    be taken to the **Download certificate signing request** step and see a success
    message, similar to the one shown in the following figure:'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建HSM可能需要一些时间。此过程成功后，我们应该会进入**Download certificate signing request**步骤，并看到一条成功消息，如下图所示：
- en: '![Figure 3.23 – Download certificate signing request](image/B21384_03_23.jpg)'
  id: totrans-413
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.23 – 下载证书签名请求](image/B21384_03_23.jpg)'
- en: Figure 3.23 – Download certificate signing request
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.23 – 下载证书签名请求
- en: Click the **Cluster CSR** button to download the **certificate signing request**
    ( **CSR** ). Optionally, as shown in *Figure 3* *.23* , we can verify the identity
    and authenticity of the cluster’s HSM by following the *There’s more...* section
    and the *See also* section of this recipe.
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Cluster CSR**按钮下载**证书签名请求**（**CSR**）。可选地，如*图 3.23*所示，我们可以通过遵循本食谱中的*更多信息...*部分和*另见*部分，验证集群HSM的身份和真实性。
- en: Click **Next** to proceed to the **Upload** **certificates** step.
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**进入**上传证书**步骤。
- en: 'Generate a private key by running the **openssl** command on your local machine,
    like so:'
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在本地机器上运行**openssl**命令生成私钥，如下所示：
- en: '[PRE16]'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: When prompted, enter and re-enter a passphrase in 4 to 1,023 characters.
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当提示时，输入并重新输入一个长度为4到1,023个字符的密码短语。
- en: 'As this is for testing and development purposes, we can create a self-signed
    certificate using our private key by running the following command:'
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于这是用于测试和开发目的，我们可以通过运行以下命令，使用我们的私钥创建一个自签名证书：
- en: '[PRE17]'
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Answer the prompt questions while providing values similar to the ones shown
    in the following screenshot:'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在提示时回答问题，并提供与以下截图中显示的值类似的答案：
- en: '![Figure 3.24 – Generating a self-signed certificate](image/B21384_03_24.jpg)'
  id: totrans-423
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.24 – 生成自签名证书](image/B21384_03_24.jpg)'
- en: Figure 3.24 – Generating a self-signed certificate
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.24 – 生成自签名证书
- en: 'Sign the cluster CSR using the OpenSSL command syntax that’s available from
    the AWS documentation. Remember to mention the exact name of the **csr** file
    you downloaded from the AWS Management Console and run it from the same folder
    where it is present:'
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用AWS文档中提供的OpenSSL命令语法签署集群CSR。记得提到您从AWS管理控制台下载的**csr**文件的准确名称，并在其所在文件夹中运行它：
- en: '[PRE18]'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This should create a file named **cluster-2i67czpb6yy_ClusterCsr.crt** .
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会创建一个名为**cluster-2i67czpb6yy_ClusterCsr.crt**的文件。
- en: 'Go back to the **Upload certificates** screen from *Step 5* of this section
    and upload the signed cluster certificate and signing certificate ( issuing certificate):'
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到本节*步骤 5*的**上传证书**页面，并上传签名的集群证书和签名证书（颁发证书）：
- en: '![Figure 3.25 – Upload certificates](image/B21384_03_25.jpg)'
  id: totrans-429
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.25 – 上传证书](image/B21384_03_25.jpg)'
- en: Figure 3.25 – Upload certificates
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.25 – 上传证书
- en: Click **Upload and initialise** . We should immediately see a message that cluster
    initialization is now in progress. Once the initialization is done, we should
    get a message stating that we must set the cluster password before we can use
    the cluster. We need to do this from an EC2 instance that’s been launched in the
    same VPC as our CloudHSM cluster.
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**上传并初始化**。我们应该立即看到集群初始化正在进行的消息。初始化完成后，我们将看到一条消息，说明我们必须在使用集群之前设置集群密码。我们需要在与CloudHSM集群相同VPC中的EC2实例上执行此操作。
- en: Click on **Clusters** on the left sidebar and verify that our cluster’s **State**
    is set to **Initialised** .
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧边栏上的**集群**，并验证我们集群的**状态**是否设置为**已初始化**。
- en: We also need to go inside our cluster and copy the **ENI IP address** value
    of our HSM.
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要进入集群并复制我们HSM的**ENI IP地址**值。
- en: In this section, we initialized the cluster and created our first HSM. In the
    next section, we will launch an EC2 client instance into the same VPC as our cluster
    and activate the cluster.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们初始化了集群并创建了第一个HSM。在下一节中，我们将启动一个EC2客户端实例，放入与集群相同的VPC中并激活集群。
- en: Activating the cluster
  id: totrans-435
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 激活集群
- en: 'In this section, we will launch an EC2 client instance for our HSM from the
    AWS Management Console and activate the cluster. Follow these steps:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将从AWS管理控制台启动一个EC2客户端实例以为我们的HSM激活集群。请按照以下步骤操作：
- en: 'First, we need to launch an EC2 client instance and set up the following options:'
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要启动一个EC2客户端实例，并设置以下选项：
- en: Select **Amazon Linux 2023** under **Operating system** .
  id: totrans-438
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**操作系统**下选择**Amazon Linux 2023**。
- en: Select **t2.micro** under **Instance type** .
  id: totrans-439
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**实例类型**下选择**t2.micro**。
- en: Use the **Create new key pair** link to create a new key pair and save the private
    key securely. I have named it **ec2forhsm.pem** .
  id: totrans-440
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**创建新密钥对**链接来创建新密钥对，并安全保存私钥。我将其命名为**ec2forhsm.pem**。
- en: Under **Network settings** , select the same VPC as our cluster, which is the
    default VPC in my case. The **Auto-assign public IP** option should be set to
    **Enable** . In the **Firewall (security groups)** subsection, select **Select
    an existing security group** , and for **Common security groups** , choose the
    default security group and the security group of our HSM.
  id: totrans-441
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**网络设置**下，选择与我们集群相同的VPC，在我的情况下是默认VPC。**自动分配公共IP**选项应设置为**启用**。在**防火墙（安全组）**子部分，选择**选择现有安全组**，对于**常见安全组**，选择默认安全组和我们HSM的安全组。
- en: Edit the security group to add an inbound rule for SSH (port range 22) for the
    IP of the system we are connecting from by selecting the **My** **IP** option.
  id: totrans-442
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑安全组，添加一个入站规则以允许SSH（端口范围22）从我们连接的系统的IP地址进行访问，选择**我的** **IP**选项。
- en: 'Copy the self-signed certificate, **customerCA.crt** , into the EC2 machine.
    On Mac or Linux, we can use the **scp** command to do this, as follows. Remember
    to use your EC2 **Public IPv4 DNS** value instead of mine, which is **ec2-user@ec2-54-172-128-95.compute-1.amazonaws.com**
    :'
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将自签名证书**customerCA.crt**复制到EC2机器上。在Mac或Linux上，我们可以使用**scp**命令来完成，命令如下。记得使用你的EC2**公共IPv4
    DNS**值替换我的值，它是**ec2-user@ec2-54-172-128-95.compute-1.amazonaws.com**：
- en: '[PRE19]'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'SSH into the EC2 instance. The exact command or steps may differ between operating
    systems. On Mac or Linux, we can use the following command. If you face any issues
    with the permission key permissions, you can run the **chmod 400 ec2forhsm.pem**
    command to resolve this:'
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SSH进入EC2实例。不同操作系统的确切命令或步骤可能会有所不同。在Mac或Linux上，我们可以使用以下命令。如果遇到权限密钥权限问题，可以运行**chmod
    400 ec2forhsm.pem**命令来解决：
- en: '[PRE20]'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Update the operating system by running the **sudo yum** **update** command.
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行**sudo yum** **update**命令更新操作系统。
- en: 'Run the following command to get the latest CloudHSM client RPM:'
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以获取最新的CloudHSM客户端RPM：
- en: '[PRE21]'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Run the following command to install the CloudHSM client:'
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以安装CloudHSM客户端：
- en: '[PRE22]'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add the **ENI IP address** value of our HSM to the configuration. We took note
    of it in *Step 12* of the previous section, *Initializing the cluster and creating
    our first HSM* . Remember to replace my IP with your IP:'
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们HSM的**ENI IP地址**值添加到配置中。我们在前一节的*步骤12*中提到过该值，*初始化集群并创建我们的第一个HSM*。记得用你的IP替换我的IP：
- en: '[PRE23]'
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Copy the self-signed certificate, **customerCA.crt** , into **/opt/cloudhsm/etc/**
    :'
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将自签名证书**customerCA.crt**复制到**/opt/cloudhsm/etc/**：
- en: '[PRE24]'
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Run the CloudHSM CLI in interactive mode:'
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以交互模式运行CloudHSM CLI：
- en: '[PRE25]'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Use the **cluster activate** command to set the initial admin password:'
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**cluster activate**命令设置初始管理员密码：
- en: '![Figure 3.26 – Activate CloudHSM cluster](image/B21384_03_26.jpg)'
  id: totrans-459
  prefs: []
  type: TYPE_IMG
  zh: '![图3.26 – 激活CloudHSM集群](image/B21384_03_26.jpg)'
- en: Figure 3.26 – Activate CloudHSM cluster
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.26 – 激活CloudHSM集群
- en: 'Use the **user list** command to verify that the user list:'
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**user list**命令验证用户列表：
- en: '![Figure 3.27 – List Users in cluster](image/B21384_03_27.jpg)'
  id: totrans-462
  prefs: []
  type: TYPE_IMG
  zh: '![图3.27 – 在集群中列出用户](image/B21384_03_27.jpg)'
- en: Figure 3.27 – List Users in cluster
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.27 – 在集群中列出用户
- en: We can quit the utility using the **quit** command.
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用**quit**命令退出该工具。
- en: Go back to our cluster within the console and verify that we can’t see a display
    message stating that the cluster can’t be used until the password is updated.
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回控制台中的集群，并验证是否没有显示一条消息，提示集群在更新密码之前无法使用。
- en: In this section, we activated our HSML cluster. HSM clusters don’t fall under
    the free tier. Therefore, if you created this cluster for development or testing
    purposes, remember to delete the HSM and the cluster to avoid incurring unexpected
    charges.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们激活了我们的HSM集群。HSM集群不属于免费套餐。因此，如果你创建该集群用于开发或测试目的，请记得删除HSM和集群，以避免产生意外费用。
- en: How it works...
  id: totrans-467
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we created a CloudHSM cluster, initialized it, and then created
    our first HSM within it. I used the default VPC for convenience. For practical
    use cases, you should install HSM into a private subnet within a custom VPC. We
    will look at VPCs in detail in [*Chapter 5*](B21384_05.xhtml#_idTextAnchor169)
    .
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个步骤中，我们创建了一个CloudHSM集群，对其进行了初始化，然后在其中创建了我们的第一个HSM。我为了方便使用了默认VPC。对于实际应用场景，建议将HSM安装在自定义VPC中的私有子网内。我们将在[*第5章*](B21384_05.xhtml#_idTextAnchor169)中详细讨论VPC。
- en: 'Before initializing the cluster, we need to download a CSR and sign it. We
    used a self-signed certificate while following these steps:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始化集群之前，我们需要下载CSR并签署它。我们在执行这些步骤时使用了自签名证书：
- en: Create a private key using OpenSSL.
  id: totrans-470
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用OpenSSL创建私钥。
- en: Use the private key to create a self-signed signing certificate ( issuing certificate).
  id: totrans-471
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用私钥创建一个自签名的签名证书（发行证书）。
- en: Use the self-signed signing certificate (issuing certificate) to sign the CSR
    we downloaded from the AWS Management Console.
  id: totrans-472
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用自签名的签名证书（发行证书）签署我们从AWS管理控制台下载的CSR。
- en: Finally, upload both our signed CSR certificate and the self-signed issuing
    certificate to AWS.
  id: totrans-473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将我们签名的CSR证书和自签发的发行证书上传到AWS。
- en: For practical use cases, a certificate authority such as Verisign should sign
    it to create a signed certificate. For development and testing purposes, we can
    use a self-signed certificate to sign it using OpenSSL, as we saw in this recipe.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 对于实际使用案例，应该由证书授权机构（例如Verisign）签署它以创建一个签名证书。对于开发和测试目的，我们可以使用自签名证书并通过OpenSSL签署它，就像我们在本教程中看到的那样。
- en: First, we logged in to the system as a user with the PRECO role, which is a
    temporary user role that exists on the first HSM in our cluster. After we changed
    the default password for this user, we observed that its type changed from PRECO
    to CO. A user of the AU type was also present.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们以具有PRECO角色的用户身份登录系统，PRECO是我们集群中第一个HSM上存在的临时用户角色。更改此用户的默认密码后，我们观察到其类型从PRECO变更为CO。AU类型的用户也存在。
- en: 'With CloudHSM, we have four main user types:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 在CloudHSM中，我们有四种主要的用户类型：
- en: '**Precrypto** **Officer** ( **PRECO** )'
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预加密** **管理员**（**PRECO**）'
- en: '**Crypto** **Officer** ( **CO** )'
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加密** **管理员**（**CO**）'
- en: '**Crypto** **User** ( **CU** )'
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加密** **用户**（**CU**）'
- en: '**Appliance** **User** ( **AU** )'
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设备** **用户**（**AU**）'
- en: PRECO is a user role that is created by AWS that we can use until we update
    the password. Once updated, the user’s type is changed to CO. We can create more
    users with the CO role. The first CO user is referred to as the primary PCO. A
    CO is responsible for managing users. A CU is responsible for managing keys, including
    creating, deleting, sharing, importing, and exporting them. A CU is also responsible
    for cryptographic operations such as encryption, decryption, signing, verifying,
    and more. Finally, an AU is a limited permission user that is generally used by
    AWS for cloning and synchronization activities.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: PRECO是AWS创建的用户角色，我们可以在更新密码之前使用它。更新密码后，用户类型会变更为CO。我们可以创建更多CO角色的用户。第一个CO用户被称为主PCO。CO负责管理用户。CU负责管理密钥，包括创建、删除、共享、导入和导出它们。CU还负责执行加密操作，如加密、解密、签名、验证等。最后，AU是权限有限的用户，通常由AWS用于克隆和同步活动。
- en: There’s more...
  id: totrans-482
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容…
- en: 'We can verify the HSM’s identity using the certificates that we can download
    from AWS. At the time of writing, six certificates can be downloaded from CloudHSM
    and verified: Cluster CSR, HSM certificate, AWS hardware certificate, Manufacturer
    hardware certificate, AWS root certificate, and Manufacturer root certificate.'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用可以从AWS下载的证书来验证HSM的身份。写本文时，可以从CloudHSM下载并验证六个证书：集群CSR、HSM证书、AWS硬件证书、制造商硬件证书、AWS根证书和制造商根证书。
- en: See also
  id: totrans-484
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: 'You can read more about CloudHSM here: [https://www.cloudericks.com/blog/getting-started-with-cloud-hsm](https://www.cloudericks.com/blog/getting-started-with-cloud-hsm)
    .'
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在这里了解更多关于CloudHSM的内容：[https://www.cloudericks.com/blog/getting-started-with-cloud-hsm](https://www.cloudericks.com/blog/getting-started-with-cloud-hsm)。
- en: 'You can learn more about the similarities and differences between CloudHSM
    and KMS here: [https://www.cloudericks.com/blog/aws-cloudhsm-vs-aws-kms](https://www.cloudericks.com/blog/aws-cloudhsm-vs-aws-kms)
    .'
  id: totrans-486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在这里了解更多关于CloudHSM与KMS之间的异同：[https://www.cloudericks.com/blog/aws-cloudhsm-vs-aws-kms](https://www.cloudericks.com/blog/aws-cloudhsm-vs-aws-kms)。
