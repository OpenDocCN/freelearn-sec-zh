- en: Vulnerability Assessment Using Metasploit (Nessus)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit（Nessus）进行漏洞评估
- en: In this chapter, we will look at some of the ways in which we can perform vulnerability
    assessments using the Nessus bridge for the Metasploit framework. Nessus is a
    vulnerability scanner built by Tenable, Inc. It is widely used to perform network
    security assessments. A Nessus bridge allows Metasploit to parse and import the
    scan results of Nessus into its own database for further analysis and exploitation.
    We can even initiate Nessus scans from within Metasploit using the bridge.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍使用Nessus桥接Metasploit框架进行漏洞评估的一些方法。Nessus是Tenable公司开发的漏洞扫描器。它被广泛用于进行网络安全评估。Nessus桥接允许Metasploit解析和导入Nessus的扫描结果到其自己的数据库进行进一步分析和利用。我们甚至可以使用桥接在Metasploit内部启动Nessus扫描。
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introduction to Nessus
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nessus简介
- en: Using Nessus with Metasploit
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Metasploit的Nessus
- en: Basic commands
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本命令
- en: Patching the Metasploit library
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修补Metasploit库
- en: Performing a Nessus scan via Metasploit
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Metasploit执行Nessus扫描
- en: Using Metasploit DB for Nessus scans
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Metasploit DB进行Nessus扫描
- en: Importing Nessus scan in Metasploit DB
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Metasploit DB中导入Nessus扫描
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following are the prerequisites for this chapter:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的先决条件如下：
- en: Metasploit Framework
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit框架
- en: '*nix-based systems/Microsoft Windows systems for the host machine'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*nix系统/微软Windows系统用于主机机器'
- en: Nessus Home Edition or Professional Edition
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nessus Home Edition或Professional Edition
- en: Introduction to Nessus
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nessus简介
- en: 'Nessus is one of the most common and easy-to-use vulnerability scanners developed
    by Tenable. This vulnerability scanner is generally used to perform vulnerability
    assessment on the network, and Tenable Research has published 138,005 plugins,
    covering 53,957 CVE IDs and 30,392 Bugtraq IDs. A vast collection of Nessus scripts
    (NASL) helps the tester to broaden their reach to find vulnerabilities. Some of
    the features of Nessus are as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Nessus是由Tenable开发的最常见和易于使用的漏洞扫描器之一。这种漏洞扫描器通常用于对网络进行漏洞评估，Tenable Research已发布了138,005个插件，涵盖了53,957个CVE
    ID和30,392个Bugtraq ID。大量的Nessus脚本（NASL）帮助测试人员扩大他们发现漏洞的范围。Nessus的一些特点如下：
- en: Vulnerability scanning (network, web, cloud, and so on)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 漏洞扫描（网络、Web、云等）
- en: Asset discovery
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资产发现
- en: Configuration auditing (MDM, network, and so on)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置审计（MDM、网络等）
- en: Target profiling
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标配置
- en: Malware detection
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恶意软件检测
- en: Sensitive data discovery
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敏感数据发现
- en: Patch auditing and management
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 补丁审计和管理
- en: Policy compliance auditing
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 策略合规审计
- en: Nessus can be downloaded from [https://www.tenable.com/downloads/nessus](https://www.tenable.com/downloads/nessus).
    Once the installation is complete, we have to activate the tool. The activation
    can be completed with a code from [https://www.tenable.com/products/nessus/activation-code](https://www.tenable.com/products/nessus/activation-code).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Nessus可以从[https://www.tenable.com/downloads/nessus](https://www.tenable.com/downloads/nessus)下载。安装完成后，我们必须激活该工具。激活可以通过[https://www.tenable.com/products/nessus/activation-code](https://www.tenable.com/products/nessus/activation-code)上的代码完成。
- en: Using Nessus with Metasploit
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit的Nessus
- en: 'Nessus is used by many pentesters because it can be used with Metasploit. We
    can integrate Nessus with Metasploit to perform its scans through Metasploit itself.
    In this section, we will integrate Nessus with the infamous Metasploit by following
    these steps:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 许多渗透测试人员使用Nessus，因为它可以与Metasploit一起使用。我们可以将Nessus与Metasploit集成，通过Metasploit执行其扫描。在本节中，我们将按照以下步骤将Nessus与臭名昭著的Metasploit集成：
- en: 'Before moving forward, make sure that you have installed Nessus successfully
    and that the Nessus web interface is accessible from the browser:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在继续之前，请确保您已成功安装Nessus，并且可以从浏览器访问Nessus Web界面：
- en: '![](img/b533025a-f883-481b-82c4-7eada2d01b4c.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b533025a-f883-481b-82c4-7eada2d01b4c.png)'
- en: 'In Metasploit, we first have to load the Nessus plugin using the `load nessus` command
    in msfconsole. This will load the Nessus bridge for Metasploit as follows:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Metasploit中，我们首先要使用`load nessus`命令在msfconsole中加载Nessus插件。这将加载Metasploit的Nessus桥接，如下所示：
- en: '![](img/806d0da9-4606-4566-bebf-b8ff7aa0a828.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/806d0da9-4606-4566-bebf-b8ff7aa0a828.png)'
- en: 'To see what commands the plugin is offering, execute the `nessus_help` command
    in msfconsole as follows:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看插件提供的命令，请在msfconsole中执行`nessus_help`命令，如下所示：
- en: '![](img/a784d701-d6b8-4e69-8124-4b3eeae27467.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a784d701-d6b8-4e69-8124-4b3eeae27467.png)'
- en: Before we can perform a vulnerability scan on Nessus, we need to authenticate
    it first, which will be done in the next subsection.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以对Nessus进行漏洞扫描之前，我们需要首先对其进行身份验证，这将在下一小节中完成。
- en: Nessus authentication via Metasploit
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过Metasploit进行Nessus身份验证
- en: 'Metasploit uses the Nessus RESTful API to interact with the Nessus Core Engine,
    which can only be done following successful authentication. This can be done as
    follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit使用Nessus RESTful API与Nessus Core Engine进行交互，只有在成功验证后才能完成。可以按以下方式完成：
- en: 'We can authenticate with Nessus using the following command syntax:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令语法对Nessus进行身份验证：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了前面命令的输出：
- en: '![](img/7baf7045-fc1b-45ee-9526-a2443628007f.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7baf7045-fc1b-45ee-9526-a2443628007f.png)'
- en: '`username` and `password` are the ones we use to log in to the Nessus web frontend.
    `hostname` can be the IP address or DNS name of the Nessus server, and `port`
    is the RPC port that the Nessus web frontend runs on. By default, it is TCP port
    `8834`.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`用户名`和`密码`是我们用来登录Nessus Web前端的。`主机名`可以是Nessus服务器的IP地址或DNS名称，`端口`是Nessus Web前端运行的RPC端口。默认情况下，它是TCP端口`8834`。'
- en: '`ssl_verify` verifies the SSL certificate used by the Nessus frontend. By default,
    the server uses a self-signed certificate, and therefore, users should use `ssl_ignore`.
    If we don''t want to use the same command again and again, we can save the credentials
    in a configuration file that Metasploit can use for authenticating with Nessus.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`ssl_verify`用于验证Nessus前端使用的SSL证书。默认情况下，服务器使用自签名证书，因此用户应该使用`ssl_ignore`。如果我们不想一遍又一遍地使用相同的命令，我们可以将凭据保存在Metasploit可以用于与Nessus进行身份验证的配置文件中。'
- en: 'To save the credentials, we can execute the `nessus_save` command. This will
    save the credentials in a YAML file format, as follows:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要保存凭据，我们可以执行`nessus_save`命令。这将以YAML文件格式保存凭据，如下所示：
- en: '![](img/05ae4a10-2efd-484c-83ab-0c5396eff77c.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/05ae4a10-2efd-484c-83ab-0c5396eff77c.png)'
- en: 'The content of this YAML configuration file is as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此YAML配置文件的内容如下：
- en: '![](img/9e1f9f47-54f2-4516-b360-e9648f4a5902.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9e1f9f47-54f2-4516-b360-e9648f4a5902.png)'
- en: 'In case we want to log out, we can execute the `nessus_logout` command in msfconsole,
    as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要注销，我们可以在msfconsole中执行`nessus_logout`命令，如下所示：
- en: '![](img/792ac3d5-6492-476b-8130-381ac7d3bbee.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/792ac3d5-6492-476b-8130-381ac7d3bbee.png)'
- en: Now that we have successfully authenticated with the Nessus RESTful API, we
    can execute some basic commands for getting started.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经成功通过Nessus RESTful API进行了身份验证，我们可以执行一些基本命令来开始。
- en: Basic commands
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本命令
- en: 'Let''s say we''re working in an organization and we are provided with the credentials
    to access Nessus via the Metasploit terminal **ONLY**. In situations like these,
    it''s always better to run some basic commands to understand what we can and cannot
    do. Let''s have a look at these commands over the course of the following steps:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们在一个组织中工作，并且只能通过Metasploit终端提供的凭据来访问Nessus。在这种情况下，最好运行一些基本命令，以了解我们可以做什么和不能做什么。让我们在接下来的步骤中看看这些命令：
- en: 'The first command we can execute is `nessus_server_properties` in msfconsole.
    This command will give us the details regarding the scanner (Type, Version, UUID,
    and so on). Based on the type of scanner, we can set our scanning preferences,
    as shown here:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在msfconsole中执行的第一个命令是`nessus_server_properties`。此命令将为我们提供有关扫描仪（类型、版本、UUID等）的详细信息。根据扫描仪的类型，我们可以设置我们的扫描首选项，如下所示：
- en: '![](img/a4cfe25a-287b-4fbf-a9be-437521e7f606.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a4cfe25a-287b-4fbf-a9be-437521e7f606.png)'
- en: 'The `nessus_server_status` command is used to confirm the status of the scanner
    so that we can determine whether it is ready. This is helpful in situations where
    the organization is using a cloud-based Nessus with distributed scanner agents.
    The output of the command is shown in the following screenshot:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`nessus_server_status`命令用于确认扫描仪的状态，以便我们可以确定它是否已准备就绪。这在组织使用具有分布式扫描仪代理的基于云的Nessus时非常有帮助。该命令的输出如下截图所示：'
- en: '![](img/faa12f16-6646-4c7b-86fa-292f9421971a.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/faa12f16-6646-4c7b-86fa-292f9421971a.png)'
- en: 'The `nessus_admin` command is used to check whether the authenticated user
    is an administrator, as shown here:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`nessus_admin`命令用于检查经过身份验证的用户是否是管理员，如下所示：'
- en: '![](img/29b246f1-0669-4f5e-b8c9-d95e88c76880.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/29b246f1-0669-4f5e-b8c9-d95e88c76880.png)'
- en: 'The `nessus_folder_list` command is used to see the directories in Nessus that
    are available for us to use. Running the command will give us the output shown
    here:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`nessus_folder_list`命令用于查看Nessus中可供我们使用的目录。运行该命令将给出以下输出：'
- en: '![](img/12bc1b14-a19e-47d6-96cb-cfbc7fe0a5f1.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/12bc1b14-a19e-47d6-96cb-cfbc7fe0a5f1.png)'
- en: 'The `nessus_template_list` command is used to list all of the templates available
    in Nessus. (**Note**: We can use the `-h` flag to see the help section for this
    command). The accessible templates have Subscription Only set to `TRUE`. To use
    all of the templates, we have to look for the subscription online. The output
    of the preceding command is shown in the following screenshot:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`nessus_template_list`命令用于列出Nessus中所有可用的模板。（**注意**：我们可以使用`-h`标志来查看此命令的帮助部分）。可访问的模板将“Subscription
    Only”设置为`TRUE`。要使用所有模板，我们必须在线查找订阅。上述命令的输出如下截图所示：'
- en: '![](img/aa697452-e348-4f96-a401-dd7c73df44ac.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aa697452-e348-4f96-a401-dd7c73df44ac.png)'
- en: The `-h` flag in the preceding screenshot is used to see the help section of
    the command.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，`-h`标志用于查看命令的帮助部分。
- en: 'To see a list of categories that are configured in Nessus, we execute the `nessus_family_list` command.
    Upon executing this command, we will see all of the available categories (Family
    Names) with their respective Family ID and number of plugins, as shown here:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看在Nessus中配置的类别列表，我们执行`nessus_family_list`命令。执行此命令后，我们将看到所有可用类别（Family Names）及其相应的Family
    ID和插件数量，如下所示：
- en: '![](img/1f78a5a8-5858-43dd-a4b2-9e952e039606.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f78a5a8-5858-43dd-a4b2-9e952e039606.png)'
- en: 'To list all of the plugins in a family, we can execute the `nessus_plugin_list
    <family ID>` command. This will show us all of the plugins that are available
    to use in Nessus, as shown in the following screenshot:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要列出某个类别中的所有插件，我们可以执行`nessus_plugin_list <family ID>`命令。这将显示我们在Nessus中可以使用的所有插件，如下截图所示：
- en: '![](img/5df58389-a68d-415c-8a58-acbf98847830.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5df58389-a68d-415c-8a58-acbf98847830.png)'
- en: 'To learn more about the plugin in detail, we can execute the `nessus_plugin_details
    <plugin ID>` command in msfconsole, as shown here:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要详细了解插件，我们可以在msfconsole中执行`nessus_plugin_details <plugin ID>`命令，如下所示：
- en: '![](img/45106ddc-01a7-4e64-ad27-0b3f739b93b2.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/45106ddc-01a7-4e64-ad27-0b3f739b93b2.png)'
- en: 'To list all of the available custom policies, we can execute the `nessus_policy_list` command.
    This will give us the policy UUID, which we''ll be using to perform vulnerability
    scanning. These policies are used to perform custom scans. Policy UUIDs can be
    used to differentiate between the different scans performed using multiple policies,
    as shown here:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要列出所有可用的自定义策略，我们可以执行`nessus_policy_list`命令。这将给我们提供策略UUID，我们将使用它来执行漏洞扫描。这些策略用于执行自定义扫描。策略UUID可用于区分使用多个策略执行的不同扫描，如下所示：
- en: '![](img/dab12abf-4214-4360-a790-ed57b3287ee7.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dab12abf-4214-4360-a790-ed57b3287ee7.png)'
- en: 'To begin scanning, we first need to patch the Metasploit Gem, which is responsible
    for communicating with the Nessus RESTful API (as the official patch is not yet
    released) for the errors we may face while running the scan. This is a workaround
    developed by `@kost` ([https://github.com/kost](https://github.com/kost)). If
    not patched, Metasploit will throw an error, as shown in the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始扫描，我们首先需要修补Metasploit Gem，它负责与Nessus RESTful API通信（因为官方补丁尚未发布），以应对我们在运行扫描时可能遇到的错误。这是由`@kost`（[https://github.com/kost](https://github.com/kost)）开发的一个解决方法。如果不修补，Metasploit将会抛出错误，如下截图所示：
- en: '![](img/56f16c03-eab5-4f53-9075-425ba3779b3e.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/56f16c03-eab5-4f53-9075-425ba3779b3e.png)'
- en: In the next section, we will look at patching the Metasploit library.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看一下修补Metasploit库。
- en: Patching the Metasploit library
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修补Metasploit库
- en: 'Since Nessus version 7.0, the state altering requests (for example, the create/launch/pause/stop/delete
    scans) are protected by a new authentication mechanism. For Metasploit to follow
    the newly updated mechanism for user authentication, we need to patch the `nessus_rest` RubyGem.
    To do this, just search for the `nessus_rest.rb` file in the `RubyGems` directory.
    The code that doesn''t interact with the new authentication mechanism of Nessus
    can be found at **line 152**:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 自Nessus 7.0版本以来，状态更改请求（例如，创建/启动/暂停/停止/删除扫描）受到新的身份验证机制的保护。为了让Metasploit遵循新更新的用户身份验证机制，我们需要修补`nessus_rest`
    RubyGem。要做到这一点，只需在`RubyGems`目录中搜索`nessus_rest.rb`文件。不与Nessus的新身份验证机制交互的代码可以在**第152行**找到：
- en: '![](img/736150c9-b043-4bfc-93f1-3de027cf4841.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/736150c9-b043-4bfc-93f1-3de027cf4841.png)'
- en: 'We need to replace the code on **line 152** with the one given here:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要用这里给出的代码替换**第152行**的代码：
- en: '![](img/0071c2f0-8e20-4b9c-893a-6d9092f8e223.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0071c2f0-8e20-4b9c-893a-6d9092f8e223.png)'
- en: 'The code can be found here: [https://github.com/kost/nessus_rest-ruby/pull/7/files](https://github.com/kost/nessus_rest-ruby/pull/7/files).'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 代码可以在这里找到：[https://github.com/kost/nessus_rest-ruby/pull/7/files](https://github.com/kost/nessus_rest-ruby/pull/7/files)。
- en: Next, we will be performing a Nessus scan.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将执行Nessus扫描。
- en: Performing a Nessus scan via Metasploit
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过Metasploit执行Nessus扫描
- en: 'Now that we have patched the Metasploit library, let''s perform a Nessus scan
    using Metasploit:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经修补了Metasploit库，让我们使用Metasploit进行Nessus扫描：
- en: 'After patching the gem, we can now create a vulnerability scanning task using
    the `nessus_scan_new <UUID of Policy> <Scan name> <Description> <Targets>` command,
    as shown here:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修补完gem后，我们现在可以使用`nessus_scan_new <策略的UUID> <扫描名称> <描述> <目标>`命令创建一个漏洞扫描任务，如下所示：
- en: '![](img/97bdcdbd-be5e-445c-9940-af9e77c55c23.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/97bdcdbd-be5e-445c-9940-af9e77c55c23.png)'
- en: 'Once the task is created, we can confirm it by executing the `nessus_scan_list` command. `Scan
    ID` will be used to launch the task, so let''s make a note of it, as shown here:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任务创建后，我们可以通过执行`nessus_scan_list`命令来确认。`扫描ID`将用于启动任务，所以让我们记下来，如下所示：
- en: '![](img/6bd1ef53-48fd-467a-848c-c4f240d6c57f.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6bd1ef53-48fd-467a-848c-c4f240d6c57f.png)'
- en: 'Let''s confirm the same by accessing the Nessus web interface:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过访问Nessus web界面来确认一下相同的内容：
- en: '![](img/594d7e0a-1ed7-4daf-8745-96d0ef4f7029.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/594d7e0a-1ed7-4daf-8745-96d0ef4f7029.png)'
- en: As we can see in the preceding screenshot, the scanning task is created but
    it has not yet launched.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的截图中看到的，扫描任务已经创建，但尚未启动。
- en: 'To launch the scanning task, we need to execute the `nessus_scan_launch <scan
    ID>` command:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启动扫描任务，我们需要执行`nessus_scan_launch <扫描ID>`命令：
- en: '![](img/8f794d63-38e1-41a8-b51b-d8e9dead0134.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8f794d63-38e1-41a8-b51b-d8e9dead0134.png)'
- en: We have successfully launched the scanning task.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功启动了扫描任务。
- en: 'Let''s confirm it on the Nessus web interface:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在Nessus web界面上确认一下：
- en: '![](img/71927e81-7c25-465b-83ae-b13fc120bed4.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/71927e81-7c25-465b-83ae-b13fc120bed4.png)'
- en: 'We can see the same details from the preceding screenshot in msfconsole by
    executing the `nessus_scan_details <scan ID> <category>` command:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过执行`nessus_scan_details <扫描ID> <类别>`命令在msfconsole中看到与前面截图相同的详情：
- en: '![](img/2f367d5e-fbc5-4d6d-b8e8-a4c73898c017.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2f367d5e-fbc5-4d6d-b8e8-a4c73898c017.png)'
- en: 'The available categories that can be used to view the scanning details are
    the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 可以用以下可用类别来查看扫描详情：
- en: '**Info**: General scanning information, which includes scan status, the policy
    used for the scan, the scan name, the scan targets, and the scan start and end
    times'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信息**：一般的扫描信息，包括扫描状态，用于扫描的策略，扫描名称，扫描目标，以及扫描的开始和结束时间'
- en: '**Vulnerabilities**: A list of vulnerabilities found by Nessus on the given
    targets, which include the plugin name used for scanning the target with its plugin
    ID, the plugin family (category), and the total number of instances found on the
    target'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**漏洞**：Nessus在给定目标上发现的漏洞列表，其中包括用于扫描目标的插件名称及其插件ID，插件家族（类别）以及在目标上找到的实例总数'
- en: 'The following screenshot shows the output of the vulnerabilities command:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了漏洞命令的输出：
- en: '![](img/1ceddb0e-6408-4179-ae60-298e19ab0433.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1ceddb0e-6408-4179-ae60-298e19ab0433.png)'
- en: '**History**: This is the last time the same scanning task was launched. This
    includes the **History ID**, the **Status** of the scan, the **Creation Date**, and
    the **Last Modification Date**.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**历史**：这是上次启动相同扫描任务的时间。这包括**历史ID**，扫描的**状态**，**创建日期**和**最后修改日期**。'
- en: 'The following screenshot shows the output of the history command:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了历史命令的输出：
- en: '![](img/1c121956-c0b3-420a-af2d-abec8b45a95a.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1c121956-c0b3-420a-af2d-abec8b45a95a.png)'
- en: 'Let''s confirm the scanning details from the Nessus web interface:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从Nessus web界面上确认一下扫描详情：
- en: '![](img/07936ea5-dfe1-4e8c-b025-4c4b3586b0f3.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/07936ea5-dfe1-4e8c-b025-4c4b3586b0f3.png)'
- en: 'Let''s now execute the `nessus_report_hosts <scan ID>` command to see an overall
    summary of the scan, as shown here:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们执行`nessus_report_hosts <扫描ID>`命令来查看扫描的总体摘要，如下所示：
- en: '![](img/b2abc66d-6678-489c-b477-c6909e353624.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b2abc66d-6678-489c-b477-c6909e353624.png)'
- en: 'To get a list of the vulnerabilities identified, we can execute the `nessus_report_vulns
    <scan ID>` command, as shown here:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取已识别的漏洞列表，可以执行`nessus_report_vulns <scan ID>`命令，如下所示：
- en: '![](img/2a2c4965-d5f9-4f84-bfda-3b0a755a6cd3.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a2c4965-d5f9-4f84-bfda-3b0a755a6cd3.png)'
- en: 'Using Nessus from Metasploit comes with a perk: being able to use the Metasploit
    DB for the scan. This can be very useful in cases where we have a list of targets
    stored in the Metasploit DB and we want to perform a vulnerability scan on those
    targets.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Metasploit中的Nessus带来了一个好处：能够使用Metasploit DB进行扫描。在我们有一个存储在Metasploit DB中的目标列表并且想要对这些目标进行漏洞扫描的情况下，这可能非常有用。
- en: Using the Metasploit DB for Nessus scan
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit DB进行Nessus扫描
- en: 'All of the targets that are stored in the Metasploit DB can be passed on to
    Nessus using the `nessus_db_scan <policy ID> <scan name> <scan description>` command.
    In our case, we have the target `192.168.2.1` IP stored in our Metasploit DB;
    upon executing this command, Nessus will start the scan (NOT only creating the
    task, but launching it as well) on the target IP, which is stored in the Metasploit
    DB:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`nessus_db_scan <policy ID> <scan name> <scan description>`命令，可以将存储在Metasploit
    DB中的所有目标传递给Nessus。在我们的情况下，我们在Metasploit DB中存储了目标`192.168.2.1` IP；执行此命令后，Nessus将开始对存储在Metasploit
    DB中的目标IP进行扫描（不仅创建任务，还启动任务）：
- en: '![](img/fc616bc7-03e5-4007-97f8-ef2ab16bf3c1.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fc616bc7-03e5-4007-97f8-ef2ab16bf3c1.png)'
- en: 'Follow these steps:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行：
- en: 'Let''s confirm the preceding execution from the Nessus web interface:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过Nessus web界面确认前面的执行：
- en: '![](img/dde21120-d705-479b-9b54-a45d5bfafd2d.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dde21120-d705-479b-9b54-a45d5bfafd2d.png)'
- en: 'As we can see in the preceding screenshot, the scan is up and running. In cases
    where we are managing a Metasploit workspace, we can use the `nessus_db_scan_workspace` command.
    In the following screenshot, we have a target IP stored in the `NESSUS-WEB` workspace:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如我们在前面的截图中所看到的，扫描正在进行中。在我们管理Metasploit工作区的情况下，我们可以使用`nessus_db_scan_workspace`命令。在下面的截图中，我们有一个目标IP存储在`NESSUS-WEB`工作区中：
- en: '![](img/a8de8828-a0a6-46c0-94fb-2a3cd001da59.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a8de8828-a0a6-46c0-94fb-2a3cd001da59.png)'
- en: 'Let''s execute the `nessus_db_scan_workspace <policy ID> <scan name> <scan
    description> <workspace>` command to run the scan on `192.168.2.1` , which is
    stored in the `NESSUS-WEB` workspace:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们执行`nessus_db_scan_workspace <policy ID> <scan name> <scan description> <workspace>`命令，在`192.168.2.1`上运行扫描，该扫描存储在`NESSUS-WEB`工作区中：
- en: '![](img/c485dc8e-4dc7-4955-abd7-19be1825f05c.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c485dc8e-4dc7-4955-abd7-19be1825f05c.png)'
- en: As we can see in the preceding screenshot, we have successfully created a scanning
    task that will scan all the hosts stored in the `NESSUS-WEB` workspace.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的截图中所看到的，我们已经成功创建了一个扫描任务，将扫描存储在`NESSUS-WEB`工作区中的所有主机。
- en: We have to launch the scanning task manually if we are executing the `nessus_db_scan_workspace`
    command.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们执行`nessus_db_scan_workspace`命令，就必须手动启动扫描任务。
- en: 'Let''s launch the scan using the `nessus_scan_launch <scan ID>` command. Upon
    successful launch of the scanning task, we''ll use the `nessus_scan_details` command
    again to get the scanning status:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用`nessus_scan_launch <scan ID>`命令启动扫描。成功启动扫描任务后，我们将再次使用`nessus_scan_details`命令获取扫描状态：
- en: '![](img/3478944c-f855-4383-9f16-80523def20f7.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3478944c-f855-4383-9f16-80523def20f7.png)'
- en: As we can see from the preceding screenshot, the scan is complete.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们从前面的截图中所看到的，扫描已完成。
- en: The scanning result is not saved in the workspace; rather, we can either import
    the result manually or by using the `nessus_db_import` command. Keep in mind that
    some of the features are only accessible if we're using Nessus Manager.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描结果不会保存在工作区中；相反，我们可以手动导入结果，或者使用`nessus_db_import`命令导入结果。请记住，只有在使用Nessus Manager时，才能访问一些功能。
- en: Now that we have mentioned how to use the Metasploit DB for performing a Nessus
    scan, let's move on to the next section and cover how to import the Nessus scan
    results into the Metasploit DB.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了如何使用Metasploit DB执行Nessus扫描，让我们继续下一部分，介绍如何将Nessus扫描结果导入Metasploit DB。
- en: Importing Nessus scan in the Metasploit DB
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Metasploit DB中导入Nessus扫描
- en: 'This method is used when we don''t have access to REST APIs, which are responsible
    for importing the result directly into the DB. The simple workaround is as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们没有访问REST API时，就会使用这种方法，这些API负责将结果直接导入到DB中。简单的解决方法如下：
- en: First, export the Nessus result in a file, download the file, and then import
    the same file using the `db_import` command.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将Nessus结果导出到文件中，下载文件，然后使用`db_import`命令导入相同的文件。
- en: To export the result, use the `nessus_scan_export <scan ID> <export format>` command.
    (The available export formats are Nessus, HTML, PDF, CSV, or DB). A file ID will
    be allotted during the process.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要导出结果，请使用`nessus_scan_export <scan ID> <export format>`命令。（可用的导出格式为Nessus、HTML、PDF、CSV或DB）。在过程中将分配文件ID。
- en: 'Once the export is ready, execute the `nessus_scan_report_download <scan ID>
    <file ID>` command:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导出准备就绪后，执行`nessus_scan_report_download <scan ID> <file ID>`命令：
- en: '![](img/dc195a73-c979-431d-a94f-4e13f721f335.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc195a73-c979-431d-a94f-4e13f721f335.png)'
- en: As we can see in the preceding screenshot, we have exported the results into
    Nessus format and downloaded the file.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的截图中所看到的，我们已将结果导出为Nessus格式并下载了文件。
- en: Now, import the same file using the `db_import` command.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用`db_import`命令导入相同的文件。
- en: 'Next, let''s execute the `vulns` command to confirm whether the Nessus results
    have been successfully imported into the DB:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们执行`vulns`命令，确认Nessus结果是否已成功导入到DB中：
- en: '![](img/b7c13ac1-a15c-4c16-8904-3576687ef4cc.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b7c13ac1-a15c-4c16-8904-3576687ef4cc.png)'
- en: 'We can also confirm whether the preceding method has worked by executing the
    `hosts `and `services` commands, as shown here:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以通过执行`hosts`和`services`命令来确认前面的方法是否有效，如下所示：
- en: '![](img/49f77ce9-ff96-4809-9d3b-2c979476a66b.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/49f77ce9-ff96-4809-9d3b-2c979476a66b.png)'
- en: If used properly, we can manage VA projects quite efficiently with the click
    of a button (of course, by also including the custom Metasploit scripts for managing
    projects and automation).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用正确，我们可以通过点击按钮（当然，还包括自定义的Metasploit脚本来管理项目和自动化）来高效地管理VA项目。
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we started by introducing the Nessus bridge. We then learned
    about configuring the bridge. Next, we saw how to initiate Nessus scans from the
    Metasploit console, and finally, we learned how to import scan results into the
    Metasploit database for further use.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先介绍了Nessus桥。然后我们学习了如何配置桥接。接下来，我们看到了如何从Metasploit控制台启动Nessus扫描，最后，我们学习了如何将扫描结果导入Metasploit数据库以供进一步使用。
- en: In the next chapter, we'll be learning how to perform a penetration test on
    a **Content Management Systems** (**CMS**), starting with the popular system,
    WordPress.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何对**内容管理系统**（**CMS**）进行渗透测试，首先从流行的系统WordPress开始。
- en: Questions
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Do I need Nessus installed on my system to run it with Metasploit?
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我需要在系统上安装Nessus才能与Metasploit一起运行吗？
- en: Can I use other vulnerability scanners instead of Nessus in Metasploit?
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我可以在Metasploit中使用其他漏洞扫描器代替Nessus吗？
- en: Can Nessus Professional be used with Metasploit?
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Nessus专业版可以与Metasploit一起使用吗？
- en: How many systems can I scan through Nessus via Metasploit?
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我可以通过Metasploit扫描多少个系统？
- en: Further reading
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following link is an official blog post about Nessus, explaining why and
    how Nessus can be used with Metasploit:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接是关于Nessus的官方博客文章，解释了为什么以及如何将Nessus与Metasploit一起使用：
- en: '[https://www.tenable.com/blog/using-nessus-and-metasploit-together](https://www.tenable.com/blog/using-nessus-and-metasploit-together)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.tenable.com/blog/using-nessus-and-metasploit-together](https://www.tenable.com/blog/using-nessus-and-metasploit-together)'
