- en: Other (Out of Scope) Vulnerabilities
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他（超出范围）漏洞
- en: We've covered a lot about what you should look for—the structure of vulnerabilities,
    and how to test for them in both programmatic and manual ways.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讲解了很多关于你应该关注的内容——漏洞的结构，以及如何通过编程和手动的方式进行测试。
- en: It seems unimportant to talk about what you shouldn't look for—if you don't
    care about it, you'll just ignore it, right? But there are several common findings
    and false positives that you'll see being spit out by scanners, passive analysis
    tools, extensions, and command-line logs again and again. It's useful to have
    an idea of what vulnerabilities companies are not interested in so that you can
    both avoid wasting your time submitting doomed bug reports and configure your
    tools to report less noise to you in the first place.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 看似不重要的部分是你不应该关注的内容——如果你不在意它，你就会忽略它，对吧？但实际上，有几个常见的发现和误报是你会看到扫描工具、被动分析工具、扩展程序和命令行日志反复输出的。了解哪些漏洞是公司不感兴趣的，这非常有用，这样你既可以避免浪费时间提交注定失败的漏洞报告，也能在一开始就配置你的工具，减少不必要的噪音。
- en: The common theme for most of the vulnerabilities we'll cover here are that they
    don't have a clear path to exploitation. They either only affect the attacker,
    require other (more serious) vulnerabilities to be present before they can be
    exploited, or in the case of leaked information, don't give an attacker any actionable
    information.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里讨论的大多数漏洞的共同主题是，它们没有明确的利用路径。它们要么只影响攻击者，要么需要其他（更严重的）漏洞的存在才能被利用，或者在泄露信息的情况下，攻击者没有任何可操作的信息。
- en: This chapter will cover what vulnerabilities companies often exclude from bug
    bounty programs, including how they work and why they're often not covered, and
    some of the common themes in what excludes a bug from reward consideration.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍公司通常从漏洞奖励计划中排除的漏洞，包括它们如何工作以及为什么通常不被覆盖，还有一些关于哪些漏洞不符合奖励考虑的常见主题。
- en: Technical Requirements
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Since we'll mostly be discussing and using examples of vulnerabilities that
    you need to exclude from your workflow, we'll be able to get by with just our
    browser (Chrome version `66.0.3359.139`).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们主要讨论并举例说明需要从工作流中排除的漏洞，我们只需要使用浏览器（Chrome 版本`66.0.3359.139`）就能完成。
- en: DoS/DDoS – The Denial-of-Service Problem
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DoS/DDoS – 拒绝服务问题
- en: '**Denial-of-Service** (**DoS**) and **Distributed Denial-of-Service** (**DDoS**)
    are familiar strains of cyberattack to anyone who follows security news. Flooding
    a target with traffic indistinguishable from a legitimate surge of visitors remains
    a popular method for either taking down or crippling a web property, especially
    when combined with amplification attacks caused by hijacking other servers, spoofing
    connected services, or taking advantage of an internal performance flaw or bottleneck.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**拒绝服务**（**DoS**）和**分布式拒绝服务**（**DDoS**）是任何关注安全新闻的人都熟悉的网络攻击类型。通过将目标淹没在与合法访问量无差别的流量中，仍然是一种流行的方式，用于攻击或瘫痪网站，尤其是当与放大攻击结合时，攻击者通过劫持其他服务器、伪造连接服务或利用内部性能缺陷或瓶颈来实现。'
- en: In 2018, GitHub was hit by what was then the largest DDoS attack ever recorded
    (the record was broken just five days later), clocking in at a saturation rate
    of about 1.3 TBps. One reason the attackers were able to achieve such a high throughput
    was because they relied on commandeering unsecured Memcached database servers
    (Memcache is a general-purpose distributed memory caching system), where they
    could spoof a query packet meant to look like the target server asking for data
    from the memcache server. Then, the memcache server would batter the target server
    with data up to 50,000 times the size of the spoofed request. GitHub in particular
    has been repeatedly targeted, with this incident just the latest in a sustained
    campaign against the site.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 2018年，GitHub遭遇了当时有记录以来最大的DDoS攻击（五天后该记录被打破），该攻击的流量饱和率达到了大约1.3 TBps。攻击者能够实现如此高的吞吐量的一个原因是，他们依赖于控制不安全的Memcached数据库服务器（Memcache是一种通用的分布式内存缓存系统），在这些服务器上，他们能够伪造一个查询包，看起来像是目标服务器请求从memcache服务器获取数据。然后，memcache服务器会向目标服务器发送的数据量是伪造请求的50,000倍。GitHub特别频繁成为攻击目标，这一事件只是该网站长期攻击活动中的最新一次。
- en: 'If you look at GitHub''s bug bounty program, you''ll notice they do call out
    DDoS attacks specifically—that they don''t allow them:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看GitHub的漏洞奖励计划，你会注意到他们特别指出DDoS攻击——他们不允许这种攻击：
- en: Don't perform any attack that could harm the reliability/integrity of our services
    or data. DDoS/spam attacks are not allowed. (emphasis theirs)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 不要进行任何可能危害我们服务或数据可靠性/完整性的攻击。禁止进行 DDoS/垃圾邮件攻击。（这是他们特别强调的）
- en: DoS/DDoS attacks often aren't a result of anything that the victim of the attacks
    did – they didn't miscode the application, or leave some critical network vector
    open. Defending against DDoS attacks requires an entire proactive security architecture,
    redistributing the load across different networks and throttling/isolating malicious
    sources of traffic.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: DoS/DDoS 攻击通常并不是受害者做了什么导致的——他们并没有错误地编码应用程序，也没有留下某些关键的网络漏洞。防御 DDoS 攻击需要一个完整的主动安全架构，将负载分配到不同的网络，并对恶意流量源进行限流/隔离。
- en: The exception is when a DoS/DDoS attack is more effective *because* it can leverage
    a security flaw that exists on the victim network. If, as a security researcher,
    you come across, for example, an unsecured NTP server that could be hijacked to
    amplify a DDoS attack, you should certainly report it as a vulnerability that
    could be used to threaten either you or another bystander's network.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例外情况是，当 DoS/DDoS 攻击因能够利用受害者网络上的安全漏洞而更有效时。如果作为安全研究人员，你发现例如一个不安全的 NTP 服务器可能被劫持来放大
    DDoS 攻击，你应该报告这个漏洞，它可能被用来威胁你或其他旁观者的网络安全。
- en: You should not try to validate any vulnerabilities like this by leveraging them
    for increased bot traffic, even if you think it falls below the threshold of something
    that could damage the target's infrastructure. The fact that DDoS prohibitions
    are so common is a sign of how seriously they're taken by bounty program operators.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你不应该通过利用这些漏洞来增加机器人的流量，即使你认为它低于可能损害目标基础设施的门槛。DDoS 禁令如此普遍，表明漏洞奖励计划运营商对此的重视程度。
- en: Sandboxed and Self-XSS – Low-Threat XSS Varieties
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 沙盒和自我 XSS——低威胁 XSS 变种
- en: Self-XSS is a variety of XSS that relies heavily on social engineering, which
    is the primary reason it is excluded from most bug bounty programs. Sandboxed
    XSS, a similar term for a related strain, is typically used to describe an XSS
    vulnerability that happens on a machine isolated from sensitive user data or operations.
    Since Self-XSS refers to the specific phenomenon of executing code within your
    browser environment to make yourself vulnerable to an XSS attack, it also means
    that your XSS bug is isolated in terms of what information it can access.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 自我 XSS 是一种高度依赖社会工程学的 XSS 变种，这也是它被大多数漏洞奖励计划排除的主要原因。沙盒 XSS，一个相关变种的术语，通常用于描述发生在与敏感用户数据或操作隔离的机器上的
    XSS 漏洞。由于自我 XSS 指的是在浏览器环境中执行代码使自己容易受到 XSS 攻击的现象，因此也意味着你的 XSS 漏洞在能够访问的信息方面是被隔离的。
- en: For Self-XSS to take place, the attacker must get the victim to execute code
    within the browser context. That execution is what makes the victim susceptible
    to further exploitation by the attacker.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使自我 XSS 攻击发生，攻击者必须让受害者在浏览器上下文中执行代码。正是这种执行使受害者容易受到攻击者的进一步利用。
- en: 'A simple example of self-XSS in action would be as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的自我 XSS 实例是这样的：
- en: An attacker advertises a hacking-kit-in-a-box - H4x0rs l18e 1337! or whatever
    the kids say these days. All you have to do is copy this code snippet and paste
    it into the developer console of your browser.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者宣传一个黑客工具包——H4x0rs l18e 1337！或者现在孩子们说的其他话。你只需复制这段代码并将其粘贴到浏览器的开发者控制台中。
- en: You, beautifully gullible, happily copy the code and paste it into your console,
    imagining the terror of your digital wrath.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你，美丽的天真，愉快地复制代码并将其粘贴到你的控制台中，幻想着你数字怒火的恐怖。
- en: Instead of hacking someone else, the code you pasted into your console just
    exposed you to hackers. Any sensitive session cookies or information available
    in your browser is now the property of a shadowy cabal of cyberanarchists.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你粘贴到控制台中的代码并没有攻击别人，而是暴露了你自己给黑客。你浏览器中任何可用的敏感会话 Cookie 或信息现在都成了一个神秘网络极客组织的财产。
- en: 'For an example of this in action, check out the link in the *Further reading*
    section for a write-up of a very similar scam that got passed around on Facebook
    a few years ago: the post (also) encouraged you to follow the directions to hack
    any Facebook account, (also) asking you to copy and execute code in your developer
    console, and (also) hacking you when you actually complied.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个实际例子的说明，请查看“*进一步阅读*”部分中的链接，其中包含了一个类似的诈骗案例，该案件几年前在 Facebook 上传播：这篇文章（也）鼓励你按照指示来破解任何
    Facebook 账户，（也）要求你复制并执行开发者控制台中的代码，（也）在你实际遵从后进行攻击。
- en: Because this particular bug, like so many of these un-rewardable, almost-vulnerabilities,
    requires either action outside the application context (a phone support worker
    initiating a change under the influence of social engineering) or other application-based
    vulnerabilities to be present and ripe for exploitation, it falls outside the
    scope of most programs and is not eligible for a reward.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这个特定的漏洞，像许多这些不能奖励的、几乎是漏洞的情况一样，需要应用外的行动（例如电话支持工作人员在社交工程影响下发起更改）或其他应用程序级的漏洞存在并准备好被利用，所以它超出了大多数计划的范围，不符合获得奖励的条件。
- en: 'Even as companies write guides to avoiding these kinds of scams, they''re limited
    in terms of the preventative action they can take: there''s only so many ways
    to secure a house if the owner is intent on giving away their keys.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 即使公司写了避免这些类型诈骗的指南，它们在预防措施方面也有局限性：如果房主决心要把钥匙交出去，房子也只有有限的安全措施可以采取。
- en: Non-Critical Data Leaks – What Companies Don’t Care About
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 非关键数据泄漏——公司不在乎的内容
- en: 'In [Chapter 8](24cf74e7-2770-4c3f-b804-3e52aaa6f852.xhtml), *Access Control
    and Security Through Obscurity*,as part of our discussion about access control,
    security by obscurity, and data leakage, we briefly covered different types of
    data that companies weren''t interested in rewarding: usernames, descriptive-but-not-sensitive
    error messages, different kinds of error codes, and so on.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第八章](24cf74e7-2770-4c3f-b804-3e52aaa6f852.xhtml)《*访问控制与通过模糊性保障安全*》中，作为我们关于访问控制、安全性模糊性和数据泄漏讨论的一部分，我们简要介绍了公司不愿意为其奖励的不同类型数据：用户名、描述性但不敏感的错误信息、不同类型的错误代码等等。
- en: Here are some other, specific examples about information that security researchers
    often report, but that companies very rarely pay for.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些其他具体的例子，关于安全研究人员常常报告的信息，但公司很少为其支付奖励。
- en: Emails
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电子邮件
- en: 'Emails are an item of information many people try to deny to bots and automated
    agents crawling their site. One typical strategy is encoding email links as HTML
    entities to make them harder to collect. That means you can hide an email such
    as `nessus@generalproducts.biz` as the following entity code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 电子邮件是许多人尝试阻止爬虫和自动化代理访问的一项信息。一种典型的策略是将电子邮件链接编码为 HTML 实体，以使其更难被收集。这意味着你可以将一个电子邮件地址，比如`nessus@generalproducts.biz`，隐藏为以下实体代码：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Unless the crawler is expecting to detect and decode entities as part of its
    scraping process, this little obfuscation trick can be surprisingly effective.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 除非爬虫程序预期在抓取过程中检测并解码实体，否则这个小小的混淆技巧可能出奇有效。
- en: But if an email is exposed on a company site, it's usually meant to be a public-facing
    handle. Submitting a bug report about `support@company.com` or even because you've
    deduced the employee email naming convention is something like `lastname.firstname@company.com`
    doesn't meet the standard for a payout.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果电子邮件暴露在公司网站上，通常是为了作为公共的联系方式。如果你提交关于`support@company.com`的漏洞报告，甚至因为你推测出了员工邮件命名规范是类似于`lastname.firstname@company.com`，这都不符合获得奖励的标准。
- en: There are too many extra steps beyond simply enumerating a company's email username
    registry before the disclosure becomes a vulnerability.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在披露变成漏洞之前，除了简单列举公司邮件用户名注册表外，还有太多额外的步骤。
- en: HTTP Request Banners
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP 请求横幅
- en: HTTP banners are an integral part of the protocol that stitches the entire web
    together. On common services, that might be privy to many different types of devices.
    They can include encoding data, device information, general information about
    the nature of the HTTP request, and other data.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 横幅是协议的一个重要部分，它将整个网络连接在一起。在常见服务中，可能涉及许多不同类型的设备。它们可以包括编码数据、设备信息、HTTP 请求的基本信息以及其他数据。
- en: All of that is to be expected as part of the service and doesn't constitute
    a leaked source of sensitive system information. This includes both information
    contained in the present banners as well as "missing" security banners.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都是服务的一部分，并不构成敏感系统信息的泄露。这包括当前横幅中包含的信息以及“缺失”的安全横幅。
- en: Known Public Files
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 已知的公共文件
- en: 'This is simple: some files are designed to be accessible! Reporting on the
    configuration or availability of `robots.txt`, `wp-uploads` , or `sitemap.xml`
    isn''t going to merit a payout—or probably even a response.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单：有些文件就是设计为可访问的！报告 `robots.txt`、`wp-uploads` 或 `sitemap.xml` 的配置或可用性并不会获得奖励——甚至可能不会得到任何回应。
- en: Missing HttpOnly Cookie Flags
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缺失的 HttpOnly Cookie 标志
- en: HttpOnly cookie flags are anti-XSS prevention devices. If a server-side process
    flags a cookie as HttpOnly, it can't be accessed client-side (when the browser
    attempts to read the cookie, it just returns an empty string). Every major browser
    supports HttpOnly cookies. But whatever their value, they are a safeguard, and
    their absence does not directly imply a vulnerability. If there's no additional
    XSS, there's no issue.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: HttpOnly Cookie 标志是防止 XSS 攻击的工具。如果服务器端进程将 cookie 标记为 HttpOnly，它就不能在客户端访问（当浏览器尝试读取该
    cookie 时，它将返回空字符串）。所有主流浏览器都支持 HttpOnly cookies。无论其值如何，它们都是一种保护措施，其缺失并不直接意味着存在漏洞。如果没有额外的
    XSS 攻击，便不会产生问题。
- en: Other Common No-Payout Vulnerabilities
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他常见的无奖励漏洞
- en: In addition to the larger categories of bugs that we've discussed that typically
    don't merit a payout, and keeping in mind that these are in addition to previously-submitted
    vulnerabilities, which are ineligible for payout everywhere, there are also a
    lot of one-offs and miscellaneous would-be vulnerabilities you should try to avoid
    submitting.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们已经讨论过的通常不符合支付条件的更大类别的漏洞，并且请记住，这些漏洞是附加在先前提交的漏洞上，这些漏洞在任何地方都不符合支付条件之外，还有很多一类的单独漏洞和杂项潜在漏洞，你应该避免提交。
- en: Weak or Easily Nypassed Captchas
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 弱或易被绕过的验证码
- en: CAPTCHA (and their successor, reCAPTCHAs) are Google-administered Turing tests
    designed to block bot form submission spam by asking a bot to do things (sophisticated
    natural language detection, image pattern recognition, performing tasks on dynamic
    challenges, and so on) that your average bot can't do. Because they represent
    a third-party service whose security posture is managed by an outside company,
    most companies that host CAPTCHAs themselves won't reward any CAPTCHA-related
    bugs or vulnerabilities.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: CAPTCHA（及其继任者 reCAPTCHA）是由 Google 管理的图灵测试，旨在通过要求机器人执行一些普通机器人无法完成的任务（例如复杂的自然语言检测、图像模式识别、在动态挑战中执行任务等）来阻止机器人的表单提交垃圾邮件。由于它们代表一个第三方服务，其安全性由外部公司管理，因此大多数托管
    CAPTCHA 的公司不会奖励任何与 CAPTCHA 相关的漏洞或安全问题。
- en: The HTTP OPTIONS Method Enabled
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用了 HTTP OPTIONS 方法
- en: HTTP supports a variety of requests outside the standard `GET`, `PUT`/`PATCH`,
    `POST`, and `DELETE` requests. `OPTIONS` is a diagnostic method that can enable
    debugging and stack trace data that can potentially be useful to an attacker.
    Although it increases your attack surface and is something you should definitely
    avoid as an application developer, having `OPTIONS` enabled is not a vulnerability
    per-se. Like other wannabe bugs that we've discussed, it requires too many extra
    steps in order to demonstrate a valid attack scenario.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 支持多种请求方式，除了标准的 `GET`、`PUT`/`PATCH`、`POST` 和 `DELETE` 请求。`OPTIONS` 是一种诊断方法，能够启用调试和堆栈跟踪数据，这可能对攻击者有用。虽然它增加了你的攻击面，并且作为应用程序开发者应该避免启用，但启用
    `OPTIONS` 本身并不是一个漏洞。像我们之前讨论过的其他潜在漏洞一样，它需要额外的步骤来证明有效的攻击场景。
- en: BEAST (CVE-2011-3389) and Other SSL-Based Attacks
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BEAST（CVE-2011-3389）和其他基于 SSL 的攻击
- en: The **Browser Exploit Against SSL/TLS** (**BEAST**) attack assumes a fair degree
    of client-side control, with the attacker able to inject packets in the browser's
    TLS stream by performing a **Man-in-The-Middle** (**MiTM**) attack, which then
    allows the attacker to guess the initialization vector involved and decrypt other
    information.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**浏览器对 SSL/TLS 的攻击**（**BEAST**）假设攻击者具有相当程度的客户端控制，能够通过执行**中间人攻击**（**MiTM**）向浏览器的
    TLS 流中注入数据包，从而使攻击者能够猜测初始化向量并解密其他信息。'
- en: 'As the security product company, Acunetix, notes in one of its blog posts about
    the attack:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 正如安全产品公司 Acunetix 在其关于该攻击的博客文章中提到的：
- en: It’s worth noting that for the BEAST attack to succeed, an attacker must have
    reasonable control of the victim’s browser, in which case it's [sic] more probable
    that an easier attack vector is chosen.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，要让 BEAST 攻击成功，攻击者必须对受害者的浏览器有合理的控制权，在这种情况下，选择一个更简单的攻击途径的可能性更大。
- en: 'This exemplifies a couple of themes common to our no-reward staple of would-be
    vulnerabilities: the vulnerability in question is one that affects the actual
    TLS/SSL connection, which means it''s the responsibility of the underlying tech,
    and not just that particular implementation of it; it''s also a bug that requires
    several other vulnerabilities to be exploited, meaning that if it''s present,
    it''s not the issue that should be our greatest concern. Both of these dynamics
    work to invalidate it and other SSL-based attacks as reportable submissions.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这例证了我们常见的没有奖励的潜在漏洞主题：相关漏洞影响的是实际的 TLS/SSL 连接，这意味着它是底层技术的责任，而不仅仅是该技术的特定实现；它也是一个需要多个其他漏洞才能被利用的漏洞，这意味着如果它存在，它并不是我们最应该关注的问题。这两种动态作用于使其以及其他基于
    SSL 的攻击无效，无法作为可报告的提交。
- en: Brute Forcing Authentication Systems
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暴力破解认证系统
- en: If an authentication system (a GUI form, an API request, or any other implementation
    or layer) doesn't lock a user out after a certain number of failed login attempts,
    it leaves itself open to being brute forced, with an attacker trying every possible
    combination of credentials until he/she is successful. Locking a user out after
    X failed attempts is a common security best practice, but missing that feature
    doesn't immediately make an application insecure. The amount of resources involved
    in brute forcing and the high level of noise it would make to any observing system
    engineer, means that, by itself, brute-force-ability isn't a compelling enough
    foundation for a severe attack scenario. Additionally, testing the efficacy of
    a brute force attack means *making* a brute force attack, which can deal serious
    damage to the target company's infrastructure and computing resources.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个认证系统（GUI 表单、API 请求或任何其他实现或层）在多次登录失败后没有锁定用户，这使得系统容易受到暴力破解攻击，攻击者会尝试每一种可能的凭证组合，直到成功为止。在失败登录尝试超过一定次数后锁定用户是常见的安全最佳实践，但缺少这一功能并不意味着应用程序立即不安全。暴力破解所涉及的资源量及其产生的高噪音意味着，单靠暴力破解能力本身并不足以构成严重的攻击场景。此外，测试暴力破解攻击的有效性意味着
    *进行* 暴力破解攻击，这可能对目标公司的基础设施和计算资源造成严重损害。
- en: CSRF Logout
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSRF 注销
- en: Traditionally considered to be a security non-issue (and still not rewarded
    by many bounty programs), the ability for a cross-site request to forcefully log
    a user out is being reevaluated as a possible security threat by organizations
    like Detectify Labs, who have published a couple of different attack scenarios
    outlining when logout functionality being susceptible to CSRF is a problem (check
    the *Further reading* section for the link). Despite the constant reevaluation
    of the bug, it still often requires several extra steps to become a true vulnerability
    with a credible attack scenario, and is therefore not a priority for bug bounty
    programs.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上被认为是一个安全非问题（而且许多漏洞赏金计划至今仍未给予奖励），跨站请求强制注销用户的能力正在被像 Detectify Labs 这样的组织重新评估为潜在的安全威胁，这些组织发布了几种不同的攻击场景，概述了何时注销功能容易受到
    CSRF 攻击时会成为问题（请查看 *进一步阅读* 部分中的链接）。尽管这个漏洞不断被重新评估，但它通常仍然需要几个额外的步骤才能成为一个真正的漏洞，并且具备可信的攻击场景，因此并不是漏洞赏金计划的优先事项。
- en: Anonymous Form CSRF
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 匿名表单 CSRF
- en: Another common CSRF-related vulnerability that doesn't often receive a payout
    is an anonymous form (for example, Contact Us) that is susceptible to CSRF. If
    an anonymous form is susceptible to CSRF, it means that an attacker could trick
    the victim into submitting it with different or modified fields.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的与 CSRF 相关的漏洞是匿名表单（例如，联系我们表单），它容易受到 CSRF 攻击。如果一个匿名表单容易受到 CSRF 攻击，意味着攻击者可以欺骗受害者提交带有不同或修改字段的表单。
- en: Taking the contact form as our example, this bug doesn't merit a payout because
    there's no relevant attack scenario that we can derive from it. Even if we submit
    the form with a different email address or message, it's not clear what damage
    that would do. For more mission-critical forms (filling out payment information,
    changing account settings, or authentication methods), we can come up with some
    bone-chilling scenarios, but if a form is anonymous, that usually means it's expected
    to receive a bunch of spam, and is isolated from important functions accordingly.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以联系表单为例，这个漏洞不值得支付奖励，因为我们无法从中推导出任何相关的攻击场景。即使我们使用不同的电子邮件地址或信息提交表单，也不清楚会造成什么损害。对于更为关键的表单（例如填写支付信息、修改账户设置或身份验证方式），我们可以想出一些令人毛骨悚然的场景，但如果一个表单是匿名的，通常意味着它预期会接收到大量垃圾邮件，因此与重要功能隔离开来。
- en: 'This example drives home a general point we''ve been making (and will continue
    to make) throughout this book: attack scenarios modeling a critical attack are
    essential to making sure that your submission is rewarded.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子强调了我们在本书中反复提到的一个普遍观点：模拟关键攻击场景对于确保你的提交能获得奖励至关重要。
- en: Clickjacking and Clickjacking-Enabled Attacks
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 点击劫持和点击劫持启用攻击
- en: '`Clickjacking` is when an attacker hides a malicious link in a transparent
    or obscured link *under* a legitimate, safe, button so that users are tricked
    into following the black hat URL.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`Clickjacking`（点击劫持）是指攻击者将恶意链接隐藏在一个透明或被遮掩的链接*下*，使得用户被诱导点击这个黑帽网址。'
- en: Clickjacking is omitted from bounty programs because it requires that the company
    itself is use dark patterns (malicious UX/UI techniques), tricking users into
    following harmful links on a platform they control. Since any company *actually*
    doing that most certainly wouldn't advertise it, bounty programs aren't interested
    in paying out for a vulnerability that can otherwise only exist if a user modifies
    code on their own machine. That's why clickjacking (and vulnerabilities that can
    only occur via clickjacking) don't get rewarded.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 点击劫持被排除在奖励计划之外，因为它要求公司自身使用黑暗模式（恶意的用户体验/用户界面技巧），诱使用户在他们控制的平台上点击有害链接。既然任何公司*实际上*在做这件事时肯定不会宣传它，那么奖励计划也不会支付那种只能通过用户在自己机器上修改代码才可能存在的漏洞。这就是为什么点击劫持（以及只能通过点击劫持发生的漏洞）不会获得奖励的原因。
- en: Physical Testing Findings
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物理测试发现
- en: Sometimes, firms interested in rigorous security audits go several steps further
    than just hiring a team to test a website or probe a network—they pay for a researcher
    to test the physical security perimeter controlling access to their data center.
    This type of testing is most common in industries with strong compliance policies
    around access control—PCI compliance, for example, entails that you have taken
    certain physical security measures (ID cards required for access to the premises,
    limited access to actual server boxes, and so on) for safeguarding your infrastructure.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，寻求严格安全审计的公司会走得更远，不仅仅是雇佣一个团队来测试网站或探测网络——他们还会为研究人员支付费用，测试控制其数据中心访问的物理安全外围。这种类型的测试在那些有强大访问控制合规政策的行业中最为常见——例如，PCI
    合规性要求你采取一定的物理安全措施（例如，访问场所需要身份证，限制对实际服务器机箱的访问等），以保护你的基础设施。
- en: Anything even close to physical testing is out-of-bounds for the type of work
    this book is concerned with. If you've identified a vulnerability that consists
    of you sneaking in through the company break room and messing with someone's unlocked
    laptop, that is not a vulnerability. That activity is very much out-of-scope and
    potentially legally actionable.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 任何接近物理测试的内容都超出了本书关注的工作范围。如果你发现了一个漏洞，要求你偷偷溜进公司休息室，弄乱某人的解锁笔记本电脑，那并不是一个漏洞。这样的活动完全超出了范围，且可能触及法律责任。
- en: Outdated Browsers
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过时的浏览器
- en: When you find a vulnerability that depends on an outdated browser for an attack
    vector, especially for a comparably ancient install (older than IE 8), it doesn't
    make sense for a company to reward it with a payout—outdated browsers aren't receiving
    security updates (and any fix the company might want to apply), after all. Even
    if the issue can be patched server-side, it makes no sense to carve out exceptions
    to an applicable end-of-life policy.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当你发现一个依赖过时浏览器作为攻击载体的漏洞，尤其是对于一个相当古老的安装（例如早于 IE 8 的版本），让公司通过支付奖励来补偿这个漏洞是不合理的——毕竟，过时的浏览器没有接收安全更新（以及公司可能想要应用的任何修复）。即使这个问题可以通过服务器端修补，也没有必要为适用的生命周期结束政策开辟例外。
- en: Server Information
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器信息
- en: Although it's a valuable part of the discovery phase in any engagement, discovering
    the type of server or hosting service is not a bug. Obfuscation is nice, but superfluous,
    and basic public server data itself doesn't suggest a compelling attack chain
    worthy of a payout.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管它是任何合作中的发现阶段中有价值的一部分，但发现服务器类型或托管服务并不是一个漏洞。混淆技术虽然不错，但多余，而且基本的公共服务器数据本身并不能说明一个有足够价值的攻击链值得奖励。
- en: Rate-Limiting
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限速
- en: Rate-limiting might surprise you as something that has to be explicitly excluded
    in a program's out-of-scope vulnerabilities, but obviously rate-limiting (protecting
    your server from getting hosed by selectively throttling requests) is a feature,
    not a bug.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 限速可能会让你感到意外，它必须明确排除在程序的范围外漏洞中，但显然限速（通过选择性地限制请求来保护你的服务器免受攻击）是一项特性，而非漏洞。
- en: Summary
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter has covered different types of security flaws that typically don't
    rise to the level of a profitable vulnerability, including DoS/DDoS, Self-XSS,
    and other types of attacks, as well as information that is commonly reported by
    scanners and pentesting tools but that don't necessarily interest bug bounty program
    operators. Along with various miscellaneous out-of-scope vulnerabilities, and
    an analysis of the common features that link these bugs together (they require
    other exploits, they have limited reach, they require social engineering or attacks
    on third-party services, and so on), you should have an understanding of not only
    what bugs don't get rewarded but *why* they aren't valuable. Now, moving forward,
    you can tune your own workflow to lower the noise in your reporting, and build
    a pentesting regimen that cuts down on time-wasting dead ends and focuses on the
    vulnerabilities that matter.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 本章已经涵盖了不同类型的安全漏洞，这些漏洞通常不足以构成有利可图的漏洞，包括DoS/DDoS攻击、自我XSS（Self-XSS）以及其他类型的攻击，还有一些常见的被扫描器和渗透测试工具报告的内容，但这些内容不一定引起漏洞悬赏计划运营者的兴趣。除了各种杂项的范围外漏洞和分析这些漏洞共同特征的内容（它们需要其他漏洞的配合，它们的影响范围有限，它们需要社会工程学或对第三方服务的攻击，等等），你应该已经理解了不仅是哪些漏洞不会得到奖励，*为什么*它们没有价值。接下来，你可以调整自己的工作流程，减少报告中的噪声，并建立一个能减少浪费时间的死胡同，专注于真正有价值漏洞的渗透测试方法。
- en: Questions
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Why are DoS/DDoS attacks typically out-of-scope? What's a scenario where a DoS/DDoS-related
    bug would merit a reward?
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么DoS/DDoS攻击通常超出范围？在什么情况下，DoS/DDoS相关的漏洞会得到奖励？
- en: What is Self-XSS? Why does it not usually merit an award?
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是Self-XSS？为什么它通常不值得奖励？
- en: What's the potential damage of leaving HTTP's `OPTIONS` method enabled?
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用HTTP的`OPTIONS`方法会带来什么潜在危害？
- en: Why don't BEAST and other SSL vulnerabilities typically qualify for bug bounty
    programs?
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么BEAST和其他SSL漏洞通常不符合漏洞悬赏计划的条件？
- en: What is clickjacking?
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是点击劫持（clickjacking）？
- en: What is physical testing?
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是物理测试？
- en: What are some things that can make a CSRF vulnerability out-of-scope?
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么情况会使CSRF漏洞超出范围？
- en: What are dark patterns?
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是黑暗模式（dark patterns）？
- en: Why aren't brute force-related vulnerabilities rewarded with payouts?
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么与暴力破解相关的漏洞不会得到奖励？
- en: Further Reading
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can find out more about some of the topics we have discussed in this chapter
    at:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下链接了解更多关于本章讨论的一些话题：
- en: '**Facebook Self-XSS Scam**: [https://www.tomsguide.com/us/facebook-self-xss,news-19224.html](https://www.tomsguide.com/us/facebook-self-xss,news-19224.html)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Facebook Self-XSS骗局**：[https://www.tomsguide.com/us/facebook-self-xss,news-19224.html](https://www.tomsguide.com/us/facebook-self-xss,news-19224.html)'
- en: '**GitHub DDoS Attack**: [https://www.theregister.co.uk/2018/03/05/worlds_biggest_ddos_attack_record_broken_after_just_five_days/](https://www.theregister.co.uk/2018/03/05/worlds_biggest_ddos_attack_record_broken_after_just_five_days/)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub DDoS攻击**：[https://www.theregister.co.uk/2018/03/05/worlds_biggest_ddos_attack_record_broken_after_just_five_days/](https://www.theregister.co.uk/2018/03/05/worlds_biggest_ddos_attack_record_broken_after_just_five_days/)'
- en: '**TLS/SSL Vulnerability Attacks**: [https://www.acunetix.com/blog/articles/tls-vulnerabilities-attacks-final-part/](https://www.acunetix.com/blog/articles/tls-vulnerabilities-attacks-final-part/)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TLS/SSL漏洞攻击**：[https://www.acunetix.com/blog/articles/tls-vulnerabilities-attacks-final-part/](https://www.acunetix.com/blog/articles/tls-vulnerabilities-attacks-final-part/)'
- en: '**Detectify Labs on CSRF Logouts**: [https://labs.detectify.com/2017/03/15/loginlogout-csrf-time-to-reconsider/](https://labs.detectify.com/2017/03/15/loginlogout-csrf-time-to-reconsider/)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Detectify实验室关于CSRF登出**：[https://labs.detectify.com/2017/03/15/loginlogout-csrf-time-to-reconsider/](https://labs.detectify.com/2017/03/15/loginlogout-csrf-time-to-reconsider/)'
- en: '**Dark Patterns**: [https://darkpatterns.org/](https://darkpatterns.org/)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**黑暗模式**：[https://darkpatterns.org/](https://darkpatterns.org/)'
