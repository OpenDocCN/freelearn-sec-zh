- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Network and EC2 Security with VPCs
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 VPC 进行网络和 EC2 安全性
- en: An Amazon **Virtual Private Cloud** ( **VPC** ) is a foundational component
    within the AWS cloud that allows the creation of private networks within the AWS
    cloud, distinct and isolated from the broader AWS public cloud. It enables us
    to launch AWS resources into a **Virtual Private Network** ( **VPN** ) that we
    have defined within our AWS account. This virtual network is similar to a traditional
    network we might run in our own data center but comes with the added advantage
    of AWS’s scalable infrastructure.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊 **虚拟私有云**（**VPC**）是 AWS 云中的基础组件，允许在 AWS 云内创建与广泛的 AWS 公共云隔离的私有网络。它使我们能够将
    AWS 资源部署到我们在 AWS 账户内定义的**虚拟专用网络**（**VPN**）中。这个虚拟网络类似于我们可能在自己的数据中心运行的传统网络，但具有 AWS
    可扩展基础设施的额外优势。
- en: Users have complete control over their virtual network environment. This means
    they can choose their IP address ranges, set up public and private subnets, and
    customize route tables and network gateways to suit their requirements. This flexibility
    enables the deployment of internet-accessible instances, such as web servers,
    in public subnets, while positioning internal-use instances, such as database
    servers, in private subnets.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 用户对其虚拟网络环境拥有完全控制权。这意味着他们可以选择 IP 地址范围，设置公共和私有子网，并自定义路由表和网络网关，以满足自己的需求。这种灵活性使得可以在公共子网中部署可以访问互联网的实例（例如
    Web 服务器），同时将仅限内部使用的实例（例如数据库服务器）放置在私有子网中。
- en: Additionally, Amazon VPC enhances security with a robust suite of features such
    as **security groups** , **Network Access Control Lists** ( **NACLs** ), **flow
    logs** , VPN connections, integration with AWS **Identity and Access Management**
    ( **IAM** ), **PrivateLink** , **endpoint services** , and **gateway endpoints**
    . Together, these security features significantly fortify the security measures
    within a VPC, creating a secure, robust, and controlled network environment for
    the deployment and management of AWS resources.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Amazon VPC 提供了一套强大的安全功能，如**安全组**、**网络访问控制列表**（**NACLs**）、**流日志**、VPN 连接、与
    AWS **身份与访问管理**（**IAM**）的集成、**PrivateLink**、**终端节点服务**和**网关终端节点**。这些安全特性共同增强了
    VPC 内的安全措施，为 AWS 资源的部署和管理创造了一个安全、强大且受控的网络环境。
- en: 'This chapter includes the following recipes:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包括以下操作：
- en: Setting up VPC plus VPC resources with minimal effort
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻松设置 VPC 及 VPC 资源
- en: Creating a bare VPC and setting up public and private subnets
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个裸 VPC 并设置公共和私有子网
- en: Launching an EC2 instance with a web server using user data
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用用户数据启动带有 Web 服务器的 EC2 实例
- en: Creating and configuring security groups
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和配置安全组
- en: Working with NACLs
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 NACL（网络访问控制列表）
- en: Using a VPC gateway endpoint to connect to S3
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 VPC 网关终端节点连接到 S3
- en: Configuring and using VPC flow logs
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置和使用 VPC 流日志
- en: Setting up and configuring NAT gateways
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置和配置 NAT 网关
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Before diving into the recipes of this chapter, we need to ensure we have the
    following knowledge and requirements in place:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解本章的操作之前，我们需要确保具备以下知识和要求：
- en: We need an active AWS account to complete the recipes within this chapter. We
    can use an account that is part of an AWS Organization or a standalone account.
    I will be using the **awsseccb-sandbox-1** account that we created in the *Multi-account
    management with AWS Organizations* recipe in [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020)
    . However, I won’t be utilizing any AWS Organizations features, meaning you can
    follow these steps with a standalone account too.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要一个有效的 AWS 账户才能完成本章的操作。我们可以使用一个属于 AWS 组织的账户或一个独立账户。我将使用我们在[*第 1 章*](B21384_01.xhtml#_idTextAnchor020)中创建的**awsseccb-sandbox-1**账户，该账户来自于*多账户管理与
    AWS 组织*的操作实例。但是，我不会使用任何 AWS 组织功能，这意味着你也可以使用独立账户按照这些步骤进行操作。
- en: For administrative actions, we need a user who has **AdministratorAccess** permission
    to the AWS account we are working with. This can be an IAM Identity Center user
    or an IAM user. I will be using the **awsseccbadmin1** IAM Identity Center user
    we created in the *User management and SSO with IAM Identity Center* recipe in
    [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020) . However, I won’t be utilizing
    any IAM Identity Center features, meaning you can follow these steps with an IAM
    user, too, if the user has **AdministratorAccess** permission within the account.
    You can create an IAM user by following the *Setting up IAM, account aliases,
    and billing alerts* recipe in [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020)
    .
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于管理操作，我们需要一个具有**AdministratorAccess** 权限的用户来访问我们正在使用的 AWS 账户。这个用户可以是 IAM 身份中心用户，也可以是
    IAM 用户。我将使用我们在[*第 1 章*](B21384_01.xhtml#_idTextAnchor020)中创建的**awsseccbadmin1**
    IAM 身份中心用户。但是，我不会使用任何 IAM 身份中心的功能，因此，如果用户在账户中具有**AdministratorAccess**权限，你也可以使用
    IAM 用户跟随这些步骤。你可以通过遵循[*第 1 章*](B21384_01.xhtml#_idTextAnchor020)中的*设置 IAM、账户别名和账单警报*方法来创建
    IAM 用户。
- en: It is beneficial to have a foundational understanding of essential computer
    networking concepts. You can learn the computer networking concepts needed for
    this chapter at [https://www.secdops.com/blog/essential-computer-networking-concepts-for-the-cloud](https://www.secdops.com/blog/essential-computer-networking-concepts-for-the-cloud)
    .
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对计算机网络的基本概念有一定的基础理解会很有帮助。你可以在[https://www.secdops.com/blog/essential-computer-networking-concepts-for-the-cloud](https://www.secdops.com/blog/essential-computer-networking-concepts-for-the-cloud)
    学习本章所需的计算机网络概念。
- en: The code files for this book are available at [https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition](https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition)
    . The code files for this chapter are available at [https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition/tree/main/Chapter05](https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition/tree/main/Chapter05)
    .
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的代码文件可以在[https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition](https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition)找到。本章的代码文件可以在[https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition/tree/main/Chapter05](https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition/tree/main/Chapter05)找到。
- en: Setting up VPC plus VPC resources with minimal effort
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 VPC 及 VPC 资源，轻松完成
- en: In this recipe, we will create a VPC along with network resources such as **public
    subnets** , **private subnets** , **route tables** , **Internet Gateway** ( **IGW**
    ), **Network Address Translation** ( **NAT** ) **gateway** , and **VPC Endpoints**
    ( **S3 Gateway** ). We can also create these components individually if needed,
    as we will see in subsequent recipes within this chapter. To explore all possibilities,
    I will be selecting all network resource components available to select in this
    recipe. Some of these components, such as the NAT gateway, have associated charges.
    Select components and their quantity as per your needs.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本方法中，我们将创建一个 VPC，并包括一些网络资源，如**公有子网**、**私有子网**、**路由表**、**Internet 网关**（**IGW**）、**网络地址转换**（**NAT**）**网关**以及**VPC
    终端节点**（**S3 网关**）。如果需要，我们也可以单独创建这些组件，正如在本章后续的其他方法中所看到的那样。为了探索所有可能性，我将在此方法中选择所有可供选择的网络资源组件。其中一些组件，如
    NAT 网关，可能会产生费用。根据需要选择组件及其数量。
- en: Getting ready
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To follow this recipe, we need a working **awsseccb-sandbox-1** AWS account,
    and a **awsseccbadmin1** user, as described in the *Technical* *requirements*
    section.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要遵循这个方法，我们需要一个有效的**awsseccb-sandbox-1** AWS 账户，以及一个**awsseccbadmin1** 用户，正如在*技术*
    *要求* 部分所描述的那样。
- en: How to do it...
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Please also note that the default options shown here may change over time,
    so check the preview to make sure you are only creating the resources that you
    need before creating the VPC. Let us get started:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里展示的默认选项可能会随时间变化，因此在创建 VPC 之前，请检查预览，确保仅创建你所需要的资源。让我们开始吧：
- en: Log into the AWS Management Console and go to the **VPC** service.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录 AWS 管理控制台并进入**VPC** 服务。
- en: From the left sidebar, under the **Virtual private cloud** heading, click on
    **Your VPCs** . We will be taken to the **Your VPCs** page, where we can see our
    VPCs. If we are using VPCs for the first time, we will only see the default VPC.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧边栏，点击**虚拟私有云**下的**您的 VPC**。我们将进入**您的 VPC**页面，在那里可以看到我们的 VPC。如果这是我们第一次使用 VPC，我们将只看到默认的
    VPC。
- en: 'On the **Your VPCs** page, click on **Create VPC** . Within the **Create VPC**
    screen, select **VPC and more** , then select **Auto-generate** . After that,
    provide the **awsseccb** project prefix, as shown in the following figure:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Your VPCs**页面，点击**Create VPC**。在**Create VPC**屏幕中，选择**VPC and more**，然后选择**Auto-generate**。之后，提供**awsseccb**项目前缀，如下图所示：
- en: '![Figure 5.1 – Creating a VPC with network resources](image/B21384_05_1.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – 创建带有网络资源的VPC](image/B21384_05_1.jpg)'
- en: Figure 5.1 – Creating a VPC with network resources
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – 创建带有网络资源的VPC
- en: Provide the **10.0.0.0/16** value under **IPv4** **CIDR block** .
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**IPv4** **CIDR块**下提供**10.0.0.0/16**值。
- en: 'For **IPv6 CIDR block** , we have two options: **No IPv6 CIDR block** and **Amazon-provided
    IPv6 CIDR block** . Select **No IPv6** **CIDR block** .'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**IPv6 CIDR块**，我们有两个选项：**No IPv6 CIDR block**和**Amazon-provided IPv6 CIDR
    block**。选择**No IPv6** **CIDR block**。
- en: 'For **Tenancy** , there are two options: **Default** and **Dedicated** . Select
    **Default** .'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**Tenancy**，有两个选项：**Default**和**Dedicated**。选择**Default**。
- en: 'For **Number of Availability Zones (AZs)** , select **2** ; for **Number of
    public subnets** , select **2** ; and for **Number of private subnets** , select
    **2** , as shown in the following figure:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**可用区（AZ）数量**，选择**2**；对于**公共子网数量**，选择**2**；对于**私有子网数量**，选择**2**，如下面的图所示：
- en: '![Figure 5.2 – Configuring the number of AZs and subnets](image/B21384_05_2.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2 – 配置可用区（AZ）数量和子网](image/B21384_05_2.jpg)'
- en: Figure 5.2 – Configuring the number of AZs and subnets
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 – 配置可用区（AZ）数量和子网
- en: Optionally, we can select AZs for our subnets after expanding **Customize AZs**
    and customize the CIDR blocks using the **Customize subnets CIDR** **blocks**
    option.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，在展开**Customize AZs**后，我们可以为子网选择AZ，并使用**Customize subnets CIDR** **blocks**选项来自定义CIDR块。
- en: For **NAT gateways ($)** , select **1 in 1 AZ** ; for **VPC endpoints** , select
    **S3 Gateway** ; and for **DNS options** , select **Enable DNS hostnames** and
    **Enable** **DNS resolution** .
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**NAT网关 ($)**，选择**1 in 1 AZ**；对于**VPC端点**，选择**S3 Gateway**；对于**DNS选项**，选择**Enable
    DNS hostnames**和**Enable** **DNS resolution**。
- en: '![Figure 5.3 – Configuring NAT gateways, VPC endpoints and DNS options](image/B21384_05_3.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.3 – 配置NAT网关、VPC端点和DNS选项](image/B21384_05_3.jpg)'
- en: Figure 5.3 – Configuring NAT gateways, VPC endpoints and DNS options
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – 配置NAT网关、VPC端点和DNS选项
- en: 'AWS will show us a preview of the VPC in the right pane of the page and network
    resources it will create as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: AWS将在页面的右侧窗格中显示VPC预览以及它将创建的网络资源，如下所示：
- en: A VPC with the **awsseccb-vpc** name
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名为**awsseccb-vpc**的VPC
- en: Subnets named **awsseccb-subnet-public1-us-east-1a** , **awsseccb-subnet-private1-us-east-1a**
    , **us-east-1b, awsseccb-subnet-public2-us-east-1b** , and **awsseccb-subnet-private2-us-east-1b**
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子网名为**awsseccb-subnet-public1-us-east-1a**、**awsseccb-subnet-private1-us-east-1a**、**us-east-1b,
    awsseccb-subnet-public2-us-east-1b**和**awsseccb-subnet-private2-us-east-1b**
- en: Route tables named **awsseccb-rtb-public** , **awsseccb-rtb-private1-us-east-1a**
    , and **awsseccb-rtb-private2-us-east-1b**
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由表名为**awsseccb-rtb-public**、**awsseccb-rtb-private1-us-east-1a**和**awsseccb-rtb-private2-us-east-1b**
- en: Network connections named **awsseccb-igw** , **awsseccb-nat-public1-us-east-1a**
    and **awsseccb-vpce-s3**
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络连接名为**awsseccb-igw**、**awsseccb-nat-public1-us-east-1a**和**awsseccb-vpce-s3**
- en: Important note
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: A single route table is shared among all public subnets while there is a route
    table per private subnet. Even though this is not shown in the preview, a main
    route table is also created that dictates the default rules for subnets not associated
    with any route table. The selection of public subnets necessitates the creation
    of an IGW, which is then linked to these public subnets, facilitating internet
    access. Additionally, NAT gateways, which provide internet access to instances
    in private subnets while preventing direct inbound internet traffic, must be deployed
    within a public subnet and, thus, also rely on the existence of an IGW for outbound
    internet traffic.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 所有公共子网共享一个路由表，而每个私有子网都有一个路由表。尽管预览中没有显示，但也会创建一个主路由表，用于规定未与任何路由表关联的子网的默认规则。选择公共子网时，必须创建一个IGW，并将其连接到这些公共子网，从而实现互联网访问。此外，NAT网关提供对私有子网实例的互联网访问，同时防止直接的入站互联网流量，必须部署在公共子网中，因此也依赖于IGW来处理外向互联网流量。
- en: Click on **Create VPC** to create the VPC with the network resources shown in
    the preview.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Create VPC**以创建包含预览中显示的网络资源的VPC。
- en: Verify that all the resources that were listed in the preview have been created.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证预览中列出的所有资源是否已经创建。
- en: In this recipe, we created a VPC along with VPC resources. To create only a
    VPC without additional resources, we can select the **VPC only** option instead
    of **VPC and more** as we saw in *Figure 5* *.1* .
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们创建了一个VPC及其VPC资源。要仅创建VPC而不添加其他资源，我们可以选择**仅VPC**选项，而不是如*图5* *1*中所示的**VPC及更多**选项。
- en: How it works...
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: In this recipe, we successfully configured a VPC and its associated network
    resources. Let us learn more about these components. A VPC is a virtual network
    dedicated to our AWS account. It is isolated from other virtual networks in the
    AWS Cloud. It allows us to launch AWS resources, such as EC2 instances, into a
    network that we have defined.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们成功配置了一个VPC及其相关的网络资源。让我们更深入了解这些组件。VPC是专属于我们AWS账户的虚拟网络。它与AWS云中的其他虚拟网络隔离。它允许我们将AWS资源（如EC2实例）部署到我们定义的网络中。
- en: The **IPv4 CIDR block** defines a range of private IPv4 addresses allocated
    to our VPC, facilitating internal communication within our VPC while keeping it
    isolated from external networks. In this recipe, we chose a **10.0.0.0/16** **Classless
    Inter-Domain Routing** ( **CIDR** ) block for our VPC, representing the broadest
    range of addresses AWS permits for a VPC. CIDR is a method for allocating IP addresses
    and routing IP packets. It allows multiple IP addresses to be represented as a
    single expression, significantly simplifying network configuration and management.
    CIDR is a slightly complex topic for beginners. You can learn more about CIDR
    at [https://www.secdops.com/blog/understanding-ip-addresses-and-subnetting](https://www.secdops.com/blog/understanding-ip-addresses-and-subnetting)
    .
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**IPv4 CIDR块**定义了分配给我们VPC的一系列私有IPv4地址，便于VPC内部的通信，同时保持与外部网络的隔离。在这个示例中，我们为VPC选择了一个**10.0.0.0/16**
    **无类域间路由**（**CIDR**）块，它代表了AWS为VPC允许的最广泛的地址范围。CIDR是一种分配IP地址和路由IP数据包的方法。它允许将多个IP地址表示为一个单一的表达式，从而大大简化了网络配置和管理。对于初学者来说，CIDR是一个稍微复杂的话题。你可以通过[https://www.secdops.com/blog/understanding-ip-addresses-and-subnetting](https://www.secdops.com/blog/understanding-ip-addresses-and-subnetting)了解更多有关CIDR的信息。'
- en: '**IPv6 CIDR Block** is an optional range of IPv6 addresses for our VPC. Selecting
    **No IPv6 CIDR block** means our VPC will only use IPv4 addresses. IPv6 addresses
    provide a much larger address space and are becoming increasingly important for
    future-proofing and global reach.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**IPv6 CIDR块**是我们VPC的可选IPv6地址范围。选择**无IPv6 CIDR块**意味着我们的VPC将只使用IPv4地址。IPv6地址提供了更大的地址空间，并且在未来的技术发展和全球范围扩展中变得越来越重要。'
- en: The **Tenancy** option lets us choose between a shared or dedicated hardware
    host for our VPC. The **Default** option allows AWS to place our instances on
    any shared hardware, which is sufficient for most use cases. The **Dedicated**
    option is typically used for compliance or regulatory requirements.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**租用模式**选项让我们可以选择为VPC选择共享或专用的硬件主机。**默认**选项允许AWS将我们的实例部署在任何共享硬件上，这对于大多数使用场景已足够。**专用**选项通常用于合规或监管要求。'
- en: '**Availability Zones** ( **AZs** ) are distinct locations within a region engineered
    to be isolated from failures in other AZs. By selecting multiple AZs, we can achieve
    high availability. Each subnet is tied to a specific AZ for fault tolerance and
    low latency. In this recipe, we created two AZs.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**可用区**（**AZs**）是区域内的不同位置，旨在与其他AZ中的故障隔离。通过选择多个AZ，我们可以实现高可用性。每个子网与特定的AZ绑定，以确保容错和低延迟。在这个示例中，我们创建了两个AZ。'
- en: A subnet is a logical subdivision of an IP network. Within cloud environments
    such as AWS, subnets facilitate the organization of a VPC by segmenting the network
    and directing traffic flow between resources. This segmentation allows for the
    creation of **public subnets** , which provide direct internet access for resources
    such as web servers, and **private subnets** . These are designed for resources
    such as database servers that require restricted access, typically only from within
    the network or a specific subnet, such as a web server subnet.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 子网是IP网络的逻辑子划分。在AWS等云环境中，子网通过细分网络并在资源之间引导流量来帮助组织VPC。这种细分允许创建**公共子网**，为如Web服务器等资源提供直接的互联网访问，以及**私有子网**。私有子网专为需要受限访问的资源（如数据库服务器）设计，通常只允许从网络内部或特定子网（如Web服务器子网）访问。
- en: With the **VPC and more** option when creating a VPC, subnets are allocated
    equally across AZs. Therefore, we can select subnets in multiples of the number
    of AZs we selected. If we select **1 AZ** , we get the **0** and **1** options
    for the public subnet and **0** , **1** , and **2** for the private subnet. Similarly,
    if we select 3 AZs, we get the **0** and **2** options for the public subnets
    and **0** , **3** , and **6** for the private subnets. In this recipe, we created
    four subnets – two public subnets and two private subnets.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**VPC及更多**选项创建 VPC 时，子网会在可用区（AZs）之间平均分配。因此，我们可以选择多个子网，数量是我们选择的 AZs 数量的倍数。如果我们选择**1
    个 AZ**，则公共子网有**0**和**1**选项，私有子网有**0**、**1**和**2**选项。类似地，如果我们选择 3 个 AZs，则公共子网有**0**和**2**选项，私有子网有**0**、**3**和**6**选项。在这个配方中，我们创建了四个子网——两个公共子网和两个私有子网。
- en: An IGW is a resource that allows communication between instances in our VPC
    and the internet. It is necessary for any subnet that requires direct access to
    the internet. As we opted to create a public subnet within our recipe, AWS created
    an IGW and associated our public subnets with the IGW. For public subnets, we
    also need to route all internet-bound traffic to the IGW. This is done using **route
    tables** .
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: IGW 是一种资源，允许我们 VPC 中的实例与互联网进行通信。任何需要直接访问互联网的子网都必须使用 IGW。由于我们选择在配方中创建公共子网，AWS
    创建了一个 IGW，并将我们的公共子网与该 IGW 关联。对于公共子网，我们还需要将所有互联网流量路由到 IGW。这是通过使用**路由表**来完成的。
- en: 'Route tables contain a set of rules, known as routes, that determine where
    network traffic from our subnets or the VPC router is directed. The following
    are the routes created by AWS in the route table associated with our public subnets:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 路由表包含一组规则，称为路由，这些规则决定了来自我们子网或 VPC 路由器的网络流量的去向。以下是 AWS 在与我们公共子网关联的路由表中创建的路由：
- en: '![Figure 5.4 – A route table with a route for an IGW](image/B21384_05_4.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.4 – 包含 IGW 路由的路由表](image/B21384_05_4.jpg)'
- en: Figure 5.4 – A route table with a route for an IGW
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – 包含 IGW 路由的路由表
- en: When we select the **VPC and more** option, a single route table is shared among
    all public subnets while each private subnet is associated with a distinct route
    table. Apart from these, there is also a **main route table** created per VPC
    irrespective of whether we use the **VPC only** or **VPC and more** options. The
    main route table dictates the default rules for subnets not associated with any
    route table. By default, no subnets are associated explicitly with the main route
    table.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们选择**VPC及更多**选项时，所有公共子网共享一个路由表，而每个私有子网都与一个独立的路由表关联。除此之外，每个 VPC 都会创建一个**主路由表**，无论我们是选择**仅
    VPC**还是**VPC及更多**选项。主路由表规定了未与任何路由表关联的子网的默认规则。默认情况下，任何子网都不会显式地与主路由表关联。
- en: All subnets not associated with any route table explicitly within a VPC are
    associated implicitly with the main route table. This means that the main route
    table’s routing behavior applies to all subnets not associated with any other
    route tables. In this recipe, all subnets are associated with a route table and
    hence there will not be any association for the main route table. We can experiment
    by removing a subnet’s association with a route table and we can see that it will
    be implicitly associated with the default route table. We can set a different
    route table as the main route table if we want to.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 所有没有在 VPC 内显式关联任何路由表的子网，都会隐式地与主路由表关联。这意味着主路由表的路由行为适用于所有未与其他路由表关联的子网。在这个配方中，所有子网都与路由表关联，因此主路由表不会有任何关联。我们可以通过移除某个子网与路由表的关联来进行实验，届时我们会看到它将隐式地与默认路由表关联。如果需要，我们可以设置不同的路由表作为主路由表。
- en: 'Consequently, with a configuration of two public subnets and two private subnets,
    there will be four route tables: one for the public subnets, one for each private
    subnets, and one main route table. If the configuration includes two public subnets
    and four private subnets, the total rises to six route tables: one for the public
    subnets, one for each of the private subnets, and one main route table.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，配置了两个公共子网和两个私有子网时，将会有四个路由表：一个用于公共子网，一个用于每个私有子网，以及一个主路由表。如果配置包含两个公共子网和四个私有子网，则总共有六个路由表：一个用于公共子网，一个用于每个私有子网，以及一个主路由表。
- en: A NAT gateway allows instances in a private subnet to initiate outbound internet
    traffic but prevents unsolicited inbound traffic from the internet. This is crucial
    for updating, patching, or downloading dependencies for instances that do not
    need to be directly accessible from the outside world. NAT is a method that enables
    private subnet resources to access the internet or other network services without
    exposing their private IP addresses. By translating these private IP addresses
    to a public one, NAT gateways facilitate secure internet access for services within
    a private subnet, ensuring that the internal structure of a private network remains
    shielded from external traffic and threats. NAT gateways are deployed on a public
    subnet and therefore, if we opt not to create any public subnet with the **VPC
    and more** option and try to select the NAT gateway option, then we will get an
    error message.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: NAT 网关允许私有子网中的实例发起出站互联网流量，但阻止来自互联网的无请求入站流量。这对于更新、修补或下载不需要直接从外部访问的实例的依赖项至关重要。NAT
    是一种使私有子网资源能够访问互联网或其他网络服务，而不暴露其私有 IP 地址的方法。通过将这些私有 IP 地址转换为公共 IP 地址，NAT 网关为私有子网内的服务提供了安全的互联网访问，从而确保私有网络的内部结构不会受到外部流量和威胁的影响。NAT
    网关部署在公共子网中，因此，如果我们选择不使用**VPC 和更多**选项创建任何公共子网，并尝试选择 NAT 网关选项，则会收到错误消息。
- en: VPC endpoints enable private connections between our VPC and AWS services without
    requiring traffic to traverse the internet. Selecting an **S3 Gateway** endpoint
    allows our instances to securely access S3 buckets without an IGW or NAT gateway,
    improving security and potentially reducing costs. Finally, enabling DNS options
    such as **DNS hostnames** and **DNS resolution** within our VPC allows our AWS
    resources to communicate with each other using hostnames instead of IP addresses,
    simplifying network management and configuration.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: VPC 端点使我们的 VPC 与 AWS 服务之间可以进行私密连接，无需流量经过互联网。选择**S3 网关**端点允许我们的实例安全地访问 S3 存储桶，而无需使用
    IGW 或 NAT 网关，从而提高安全性并可能降低成本。最后，在 VPC 中启用**DNS 主机名**和**DNS 解析**等 DNS 选项，可以使我们的
    AWS 资源通过主机名而不是 IP 地址进行通信，从而简化网络管理和配置。
- en: 'Even though it was not shown in the preview while creating the VPC, a NACL
    was also created. An NACL acts as a firewall for controlling traffic at the subnet
    level. NACLs examine and filter traffic entering and leaving every subnet within
    our VPC. When we create the VPC using the **VPC and more** option or the **VPC
    only** option, a default NACL is created that allows all inbound and outbound
    traffic. Subnets created are associated automatically with the default NACL. However,
    we can change the associate to a different NACL. The following are the inbound
    rules for the default NACL:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在创建 VPC 时未在预览中显示，但也创建了一个 NACL。NACL 充当防火墙，用于控制子网级别的流量。NACL 会检查并过滤进入和离开我们 VPC
    内每个子网的流量。当我们使用**VPC 和更多**选项或**仅 VPC**选项创建 VPC 时，系统会创建一个默认的 NACL，该 NACL 允许所有入站和出站流量。创建的子网会自动与默认
    NACL 关联。然而，我们可以将其关联更改为其他 NACL。以下是默认 NACL 的入站规则：
- en: '![Figure 5.5 – Inbound rules for default NACL](image/B21384_05_5.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.5 – 默认 NACL 的入站规则](image/B21384_05_5.jpg)'
- en: Figure 5.5 – Inbound rules for default NACL
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5 – 默认 NACL 的入站规则
- en: When we created the VPC, a security group called **default** was created by
    AWS within our VPC. In AWS, a security group functions as a virtual firewall that
    governs inbound and outbound traffic for EC2 instances. It operates at the instance
    level, whereas NACLs control traffic at the subnet level. Security groups and
    NACLs complement each other, providing layered security within AWS environments.
    We can use security groups for fine-grained, stateful control over individual
    instances, while NACLs provide an additional layer of stateless, subnet-level
    security, allowing or blocking types of traffic before they reach your instances.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建 VPC 时，AWS 会在我们的 VPC 内创建一个名为**default**的安全组。在 AWS 中，安全组充当虚拟防火墙，管理 EC2 实例的入站和出站流量。它在实例级别操作，而
    NACL 控制子网级别的流量。安全组和 NACL 相辅相成，在 AWS 环境中提供分层安全性。我们可以使用安全组对单个实例进行细粒度的、有状态的控制，而 NACL
    提供额外的无状态、子网级别的安全性，在流量到达实例之前允许或阻止某些类型的流量。
- en: There’s more...
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: 'A default VPC is provided in every AWS region by AWS and includes a public
    subnet in each AZ, an IGW, and a configured DNS resolution. The default VPC allows
    the instant launch of Amazon EC2 instances without creating a VPC. The following
    are some of the important settings of the default VPC:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 每个AWS区域都有一个由AWS提供的默认VPC，其中包括每个AZ中的公共子网、一个IGW以及配置的DNS解析。默认VPC使得可以立即启动Amazon EC2实例，而无需创建VPC。以下是默认VPC的一些重要设置：
- en: Subnets in the default VPC have an outbound route to the internet through an
    IGW.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认VPC中的子网通过IGW具有外向互联网路由。
- en: A subnet is created per AZ.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个AZ都会创建一个子网。
- en: '**DHCP options set** is updated. My default VPC has the following options set:
    **domain-name = ec2.internal** and **domain-name-servers =** **AmazonProvidedDNS**
    .'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DHCP选项集**已更新。我的默认VPC具有以下选项：**domain-name = ec2.internal** 和 **domain-name-servers
    =** **AmazonProvidedDNS**。'
- en: 'Let’s quickly go through some more important concepts related to AWS VPCs:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速回顾一下与AWS VPC相关的更多重要概念：
- en: AWS VPCs consist of subresources such as IGWs, route tables, NACLs, subnets,
    and security groups.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS VPC由子资源组成，如IGW、路由表、NACL、安全组和子网。
- en: 'AWS creates a default VPC ready for us to use in every region. The following
    are some of its important characteristics:'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS在每个区域都创建了一个默认VPC供我们使用。以下是它的一些重要特性：
- en: Subnets in the default VPC are routed to the internet.
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认VPC中的子网可以路由到互联网。
- en: A subnet is created per AZ.
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个AZ都会创建一个子网。
- en: '**DHCP Options Set** is updated.'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DHCP选项集**已更新。'
- en: VPC peering can be used to connect one VPC to another through a direct route
    using private IP addresses, making the associated instances behave as though they
    are on the same network.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VPC对等连接可以通过使用私有IP地址的直接路由将一个VPC连接到另一个VPC，使关联的实例表现得像是处于同一个网络中。
- en: VPC peering can be done within the same region, across regions, and even across
    AWS accounts.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VPC对等连接可以在同一区域内进行，也可以跨区域，甚至跨AWS账户进行。
- en: Transitive peering is currently not supported for AWS VPCs. Every VPC must be
    peered to every other required VPC in a star topology-like structure.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前不支持VPC的传递对等连接。每个VPC必须与每个所需的VPC通过类似星形拓扑的结构进行对等连接。
- en: To avoid the overhead of managing many point-to-point connections with VPC peering,
    we can make use of the AWS Transit Gateway to connect all the VPCs and even on-premises
    networks to a single gateway.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了避免管理多个VPC对等连接的开销，我们可以使用AWS Transit Gateway将所有VPC甚至本地网络连接到一个网关。
- en: Apart from the standard reserved IP addresses of network address and broadcast
    address, AWS also reserves three more IP addresses. So, a total of five addresses
    are reserved in a VPC.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了标准的网络地址和广播地址的保留IP地址外，AWS还保留了三个额外的IP地址。因此，VPC中总共保留了五个地址。
- en: 'Let’s quickly go through some important concepts related to subnets in AWS:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速回顾一下与AWS子网相关的一些重要概念：
- en: The first IP address of a subnet represents the subnet ID, while the last IP
    address represents the subnet’s directed broadcast address. Therefore, we cannot
    use the first and last IP address of a subnet for hosts. AWS reserves additional
    IP addresses.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子网的第一个IP地址代表子网ID，而最后一个IP地址代表子网的定向广播地址。因此，我们不能将子网的第一个和最后一个IP地址分配给主机。AWS会保留额外的IP地址。
- en: The first IP address of the first subnet of a network represents the subnet
    ID, as well as the network’s ID. Similarly, the last IP address of the last subnet
    of a network represents the subnet’s and the network’s directed broadcast address.
    When using these IP addresses from outside the network, they will be considered
    as the networks’ IPs, and when using them within the network, they will be considered
    as the subnets’ IPs.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络中第一个子网的第一个IP地址表示子网ID，同时也表示网络ID。同样，网络中最后一个子网的最后一个IP地址表示子网和网络的定向广播地址。当从网络外部使用这些IP地址时，它们将被视为网络的IP地址，而在网络内部使用时，它们将被视为子网的IP地址。
- en: A subnet in AWS VPC is always associated with one AZ. While we cannot have one
    subnet associated with more than one AZ at a time, we can have multiple subnets
    associated with a single AZ.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS VPC中的子网始终与一个AZ关联。虽然我们不能将一个子网与多个AZ同时关联，但我们可以将多个子网与一个AZ关联。
- en: AWS allows us to choose a subnet without contiguous IP addresses, as shown in
    the following figure. However, it is good practice to use contiguous IP address
    ranges, just like we did in this recipe with **10.0.1.0/24** and **10.0.2.0/24**
    .
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS允许我们选择没有连续IP地址的子网，如下图所示。然而，使用连续IP地址范围是一种良好的实践，就像我们在本示例中使用的**10.0.1.0/24**和**10.0.2.0/24**一样。
- en: '![Figure 5.6 – Subnets without continuous IP addresses](image/B21384_05_6.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.6 – 没有连续IP地址的子网](image/B21384_05_6.jpg)'
- en: Figure 5.6 – Subnets without continuous IP addresses
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.6 – 没有连续IP地址的子网
- en: We will learn about network ACLs, security groups, and IGW in later recipes
    within this chapter.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章后续的配方中学习网络ACL、安全组和IGW。
- en: See also
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: We can read more about default VPC at [https://www.cloudericks.com/blog/understanding-aws-default-vpc](https://www.cloudericks.com/blog/understanding-aws-default-vpc)
    .
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在[https://www.cloudericks.com/blog/understanding-aws-default-vpc](https://www.cloudericks.com/blog/understanding-aws-default-vpc)
    上阅读更多关于默认VPC的信息。
- en: Read more about the main route table at [https://www.cloudericks.com/blog/understanding-the-main-route-table-in-aws-vpc](https://www.cloudericks.com/blog/understanding-the-main-route-table-in-aws-vpc)
    .
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读更多关于主路由表的信息，访问[https://www.cloudericks.com/blog/understanding-the-main-route-table-in-aws-vpc](https://www.cloudericks.com/blog/understanding-the-main-route-table-in-aws-vpc)。
- en: While we have expanded our understanding of VPCs and their associated network
    resources, it is important to keep in mind that the primary focus of this book
    is on security rather than networking. A solid grasp of networking principles
    is undoubtedly crucial for developing effective security measures; however, delving
    too deeply into the intricacies of networking could shift our attention away from
    the broad spectrum of security topics we aim to explore. Readers keen on deepening
    their networking knowledge can do so at [https://www.cloudericks.com/blog/beginners-roadmap-to-mastering-aws-networking](https://www.cloudericks.com/blog/beginners-roadmap-to-mastering-aws-networking)
    .
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虽然我们已经扩展了对VPC及其相关网络资源的理解，但需要记住，本书的主要焦点是安全性，而不是网络。牢固掌握网络原理无疑对开发有效的安全措施至关重要；然而，深入探讨网络的复杂性可能会将我们的注意力从我们旨在探讨的广泛安全主题上转移开。希望深入了解网络知识的读者可以在[https://www.cloudericks.com/blog/beginners-roadmap-to-mastering-aws-networking](https://www.cloudericks.com/blog/beginners-roadmap-to-mastering-aws-networking)
    上进一步学习。
- en: Creating a bare VPC and setting up public and private subnets
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建裸VPC并设置公有和私有子网
- en: A public subnet is specifically designed to enable instances within it to be
    accessible from the internet. This is achieved by routing the internet traffic
    through an IGW by configuring route tables. In the *Setting up VPC plus VPC resources
    with minimal effort* recipe from this chapter, we selected the **VPC and more**
    option while creating the VPC as we saw in *Figure 5* *.1* , which automatically
    set up public and private subnets, along with a pre-configured IGW and route tables.
    For this recipe, we will choose the **VPC only** option to create a VPC without
    the additional networking resources and set up an IGW and a route table to enable
    internet access to the instances in our subnet.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 公有子网专门设计用于使其中的实例能够从互联网访问。这是通过通过配置路由表将互联网流量路由到IGW来实现的。在本章中的*最小化努力设置VPC及其资源*配方中，我们在创建VPC时选择了**VPC及更多**选项，如*图5.1*所示，这会自动设置公有和私有子网，并配置一个预设的IGW和路由表。在这个配方中，我们将选择**仅VPC**选项，创建一个没有额外网络资源的VPC，并设置IGW和路由表，以便为我们子网中的实例提供互联网访问。
- en: Getting ready
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To follow this recipe, we need a working **awsseccb-sandbox-1** AWS account,
    and a **awsseccbadmin1** user, as described in the *Technical* *requirements*
    section.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随这个配方，我们需要一个有效的**awsseccb-sandbox-1** AWS账户和一个**awsseccbadmin1**用户，正如*技术要求*部分所述。
- en: How to do it...
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: First, we will create a bare VPC and a subnet, and then we will set up IGW and
    route tables.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个裸VPC和一个子网，然后设置IGW和路由表。
- en: Creating a bare VPC
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建裸VPC
- en: 'We can create a VPC only without additional resources as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按如下方式仅创建VPC，而不添加其他资源：
- en: Log in to the AWS Management Console and go to the **VPC** service in the console.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录AWS管理控制台，进入控制台中的**VPC**服务。
- en: From the left sidebar, under the **Virtual private cloud** heading, click on
    **Your VPCs** . We will be taken to the **Your VPCs** page, where we can see our
    VPCs. If we are using VPCs for the first time, we should see the default VPC.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧边栏中，点击**虚拟私有云**标题下的**您的VPC**。我们将被带到**您的VPC**页面，在那里可以看到我们的VPC。如果是第一次使用VPC，我们应该会看到默认VPC。
- en: On the **Your VPCs** page, click on **Create VPC** , and on the **Create VPC**
    screen, select the **VPC only** option. Give the **awsseccb-vpc2** name. For **IPv4
    CIDR block** , select **IPv4 CIDR manual input** and give the value as **10.0.0.0/24**
    . For **IPv6 CIDR block** , select **No IPv6** **CIDR block** .
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**您的VPC**页面，点击**创建VPC**，在**创建VPC**屏幕上，选择**仅VPC**选项。为**awsseccb-vpc2**命名。对于**IPv4
    CIDR块**，选择**IPv4 CIDR手动输入**并将值设置为**10.0.0.0/24**。对于**IPv6 CIDR块**，选择**没有IPv6**
    **CIDR块**。
- en: '![Figure 5.7 – Only creating a VPC](image/B21384_05_7.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.7 – 仅创建VPC](image/B21384_05_7.jpg)'
- en: Figure 5.7 – Only creating a VPC
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.7 – 仅创建VPC
- en: Scroll down, leave the automatically generated tag ( **Key** is **Name** and
    **Value** is **awsseccb-vpc2** ) as-is, optionally add any new tags, and click
    **Create VPC** .
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动，保持自动生成的标签（**键**为**名称**，**值**为**awsseccb-vpc2**）不变，可选择性地添加新标签，然后点击**创建VPC**。
- en: Our VPC is created now. Next, we will create a subnet within the VPC.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的VPC现在已经创建好了。接下来，我们将在VPC中创建一个子网。
- en: Creating a subnet within a VPC
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在VPC中创建子网
- en: We created a VPC with a CIDR block range of **10.0.0.0/24** in the previous
    section. We will add a subnet with a netmask of **/25** . We need to create subnets
    within a VPC’s IP address range without any overlap with other subnets. Let us
    get started.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一节中创建了一个CIDR块范围为**10.0.0.0/24**的VPC。接下来我们将添加一个子网，子网的子网掩码为**/25**。我们需要在VPC的IP地址范围内创建子网，并确保与其他子网没有重叠。让我们开始吧。
- en: Go to the **VPC** service in the console.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入控制台中的**VPC**服务。
- en: Click on **Subnets** in the left sidebar.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧边栏点击**子网**。
- en: Click on **Create subnet** .
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建子网**。
- en: On the **Create subnet** page, under **VPC ID** , select the VPC we created
    in the previous section using the drop-down box.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**创建子网**页面下，选择我们在上一节中创建的VPC，使用下拉框选择**VPC ID**。
- en: Under **Subnet settings** , set the **Subnet name** field to **awsseccb-vpc2-public-subnet**
    . If we plan to create a private subnet, give the **awsseccb-vpc2-private-subnet**
    name. Complete the remaining steps within the current section, but skip the remaining
    sections of this chapter.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**子网设置**下，将**子网名称**字段设置为**awsseccb-vpc2-public-subnet**。如果我们计划创建一个私有子网，请将其命名为**awsseccb-vpc2-private-subnet**。完成本节的剩余步骤，但跳过本章的剩余部分。
- en: Select **No preference** under **Availability Zone** .
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**可用区**下选择**无偏好**。
- en: For the **IPv4 VPC CIDR block** , keep the default value.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**IPv4 VPC CIDR块**，保持默认值。
- en: For **IPv4 subnet CIDR block** , provide an IP address range that is a subset
    of our VPC’s IP address range. I will be using **10.0.0.0/25** .
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**IPv4子网CIDR块**，提供一个IP地址范围，该范围应为我们VPC的IP地址范围的一个子集。我将使用**10.0.0.0/25**。
- en: Scroll down and click on **Create subnet** to create the subnets.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动并点击**创建子网**来创建子网。
- en: Go to the **Subnets** page from the sidebar. We should be able to see the new
    subnet.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从侧边栏进入**子网**页面，我们应该能够看到新的子网。
- en: We have created a subnet within this recipe without any internet connectivity
    yet. If you are looking to create a private subnet, you have done it. To set up
    the subnet as a public subnet, continue with the rest of the sections of this
    recipe.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在这个操作步骤中创建了一个子网，但目前没有互联网连接。如果你打算创建一个私有子网，那么你已经完成了。如果你想将子网设置为公共子网，请继续按照本食谱中的其余部分进行操作。
- en: Enable auto-assign public IPv4 address
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用自动分配公共IPv4地址
- en: 'To make the subnet a public subnet, it is good to enable the auto-assign public
    IPv4 address feature as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将子网设置为公共子网，建议启用自动分配公共IPv4地址功能，操作如下：
- en: Select the subnet we created, click on the **Actions** dropdown, and click on
    **Edit** **subnet settings** .
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们创建的子网，点击**操作**下拉菜单，点击**编辑** **子网设置**。
- en: Select **Enable auto-assign public IPv4 address** and click **Save** .
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**启用自动分配公共IPv4地址**并点击**保存**。
- en: Go to the **Subnets** page from the sidebar. We should be able to see **Auto-assign
    public IPv4 address** set to **Yes** for our first subnet.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从侧边栏进入**子网**页面。我们应该能够看到我们的第一个子网的**自动分配公共IPv4地址**已设置为**是**。
- en: Next, we will create an IGW.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个IGW。
- en: Creating and configuring an IGW
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建并配置IGW
- en: 'We can create and attach an IGW to our VPC for setting up a public subnet as
    follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为设置公共子网创建并附加一个IGW，步骤如下：
- en: Go to the **VPC** service in the console.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入控制台中的**VPC**服务。
- en: Click on **Internet gateways** from the left sidebar.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧边栏点击**互联网网关**。
- en: Click on **Create** **internet gateway** .
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建** **互联网网关**。
- en: Give a descriptive name for **Name tag** such as **awsseccb-vpc2-igw** . Leave
    the automatically generated tag ( **Key** is **Name** and **Value** is **awsseccb-vpc2-igw**
    ) as-is, optionally add any new tags, and click **Create internet gateway** .
    We should get a success message stating that the IGW has been created. If we go
    to the **Internet gateways** screen, we will see that the **State** of our IGW
    is currently **Detached** .
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 **名称标签** 给予一个描述性名称，例如 **awsseccb-vpc2-igw**。保持自动生成的标签（**键**是**Name**，**值**是**awsseccb-vpc2-igw**），可以选择添加其他标签，然后点击
    **创建互联网网关**。我们应该看到一条成功消息，表明 IGW 已经创建。如果我们进入 **互联网网关** 页面，我们会看到我们创建的 IGW 的 **状态**
    当前是 **未连接**。
- en: Select the IGW we created, click on the **Actions** dropdown, and click on **Attach**
    **to VPC** .
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们创建的 IGW，点击 **操作** 下拉菜单，然后点击 **附加到 VPC**。
- en: On the **Attach to VPC** screen, select the VPC we created in this recipe and
    click on **Attach internet gateway** . If we go to the **Internet gateways** screen,
    we will see that the **State** of our IGW is now **Attached** .
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **附加到 VPC** 页面，选择我们在本教程中创建的 VPC，并点击 **附加互联网网关**。如果我们进入 **互联网网关** 页面，我们会看到我们创建的
    IGW 的 **状态** 现在是 **已附加**。
- en: Next, we will create and configure a route table.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建和配置路由表。
- en: Creating and configuring a route table
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建和配置路由表
- en: 'We can create and configure the route table for setting up a public subnet
    as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按照以下方式创建和配置路由表，以设置公共子网：
- en: Click on **Route tables** from the left sidebar.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧边栏中的 **路由表**。
- en: Click on **Create** **route table** .
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建路由表**。
- en: Provide the **awsseccb-vpc2-rtb-public** name and select the VPC we created
    in this recipe.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供 **awsseccb-vpc2-rtb-public** 名称并选择我们在本教程中创建的 VPC。
- en: Leave the automatically generated tag ( **Key** is **Name** and **Value** is
    **awsseccb-vpc2-rtb-public** ) as-is, optionally add any new tags, and click on
    **Create** **route table** .
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持自动生成的标签（**键**是**Name**，**值**是**awsseccb-vpc2-rtb-public**），可以选择添加其他标签，然后点击
    **创建路由表**。
- en: Click on **Route tables** from the left sidebar, select the route table we created,
    click on the **Actions** dropdown or go to the **Routes** tab, and click on **Edit
    routes** .
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧边栏中的 **路由表**，选择我们创建的路由表，点击 **操作** 下拉菜单或进入 **路由** 标签，然后点击 **编辑路由**。
- en: On the **Edit routes** page, click **Add route** .
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **编辑路由** 页面，点击 **添加路由**。
- en: For **Destination** , select **0.0.0.0/0** . For **Target** , select **Internet
    Gateway** , then select the IGW we created in this recipe, and click **Save changes**
    . If we want to add a route for the IPv6 address, we can add a similar entry with
    the destination set to **::/0** .
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **目标** 中选择 **0.0.0.0/0**，在 **目标** 中选择 **互联网网关**，然后选择我们在本教程中创建的 IGW，点击 **保存更改**。如果我们想要为
    IPv6 地址添加路由，可以添加类似的条目，将目标设置为 **::/0**。
- en: Go to our route table and go to the **Subnet** **associations** tab.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入我们的路由表并选择 **子网关联** 标签。
- en: Click on **Edit subnet associations** , select the subnet we created in this
    recipe, and click on **Save associations** .
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **编辑子网关联**，选择我们在本教程中创建的子网，然后点击 **保存关联**。
- en: We can now launch EC2 instances into our public subnet with the appropriate
    security group rules and verify the changes.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以将 EC2 实例启动到我们的公共子网，并设置适当的安全组规则来验证这些更改。
- en: How it works...
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We first created a bare VPC. When we create a bare VPC using the **VPC only**
    option, a main route table, a default NACL, and a default security group are also
    created along with the VPC. The main route table dictates the default rules for
    subnets not associated with any route table. In our case, the main route table
    includes only a local route that enables communication within the VPC. This is
    crucial for allowing instances within the same VPC to communicate with each other
    without needing to traverse the internet or any other external network.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建了一个裸VPC。当我们使用 **仅VPC** 选项创建裸VPC时，VPC 还会创建一个主路由表、一个默认 NACL 和一个默认安全组。主路由表决定了未与任何路由表关联的子网的默认规则。在我们的例子中，主路由表仅包括一个本地路由，允许
    VPC 内部的通信。这对于允许同一 VPC 内的实例彼此通信而不需要通过互联网或其他外部网络非常重要。
- en: A network ACL acts as a firewall for controlling traffic at the subnet level.
    In our case, a default NACL was created that allows all traffic. A security group
    in AWS acts like a virtual firewall for our EC2 instances to control inbound and
    outbound traffic. In our case, a default security group was created that will
    allow all traffic. We will see NACLs and security groups again in later recipes
    within this chapter.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 网络ACL充当子网级别的防火墙，用于控制流量。在我们的情况下，创建了一个默认的NACL，允许所有流量。AWS中的安全组就像虚拟防火墙一样，用于控制EC2实例的入站和出站流量。在我们的情况下，创建了一个默认的安全组，允许所有流量。我们将在本章的后续配方中再次看到NACL和安全组的使用。
- en: We selected the **Enable auto-assign public IPv4 address** option, which makes
    it the default option while creating an EC2 instance within this subnet. We can
    override this if we want during the instance creation. We can also create and
    attach an Elastic IP address later to our EC2 instance.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择了**启用自动分配公共IPv4地址**选项，这使得它在创建EC2实例时成为该子网的默认选项。如果我们在实例创建时需要，我们可以覆盖这一设置。我们还可以稍后为我们的EC2实例创建并附加一个弹性IP地址。
- en: We created and attached an IGW. We also created and configured a route table
    for internet access. We can make the main route table public if we want to, by
    editing the routes. However, if we make the main route table public, it will implicitly
    make all the new subnets public until we associate it with a private route table.
    Therefore, it is a good practice to create a separate route table for public access
    and then attach the subnets that need public access to that VPC. We will do this
    next.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建并附加了一个IGW（互联网网关）。我们还创建并配置了一个路由表以实现互联网访问。如果需要，我们可以通过编辑路由来将主路由表设置为公共路由。然而，如果我们将主路由表设置为公共路由，它将隐式地使所有新子网成为公共子网，直到我们将其与私有路由表关联。因此，最好为公共访问创建一个单独的路由表，然后将需要公共访问的子网附加到该VPC。接下来，我们将执行这一操作。
- en: There’s more...
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In the previous recipe from this chapter, *Setting up VPC plus VPC resources
    with minimal effort* , we discussed VPC and VPC resources in detail. Therefore,
    I will not repeat. Please refer to the *How it works* , *There’s more…* , and
    *See also* sections of that recipe even if you do not want to practice the *How
    to do* *it* section.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章前面的配方中，*以最小的努力设置VPC及VPC资源*，我们详细讨论了VPC和VPC资源。因此，我不会再重复。即使您不想实践*如何操作*部分，请参考该配方的*工作原理*、*更多内容...*和*另见*部分。
- en: See also
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: Read more about IGWs at [https://www.cloudericks.com/blog/understanding-internet-gateway-in-aws](https://www.cloudericks.com/blog/understanding-internet-gateway-in-aws)
    .
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读更多关于IGW的信息，见[https://www.cloudericks.com/blog/understanding-internet-gateway-in-aws](https://www.cloudericks.com/blog/understanding-internet-gateway-in-aws)。
- en: Read more about AWS VPC route tables at [https://www.cloudericks.com/blog/understanding-aws-vpc-route-tables](https://www.cloudericks.com/blog/understanding-aws-vpc-route-tables)
    .
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读更多关于AWS VPC路由表的信息，见[https://www.cloudericks.com/blog/understanding-aws-vpc-route-tables](https://www.cloudericks.com/blog/understanding-aws-vpc-route-tables)。
- en: Launching an EC2 instance with a web server using user data
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用用户数据启动带有Web服务器的EC2实例
- en: In this recipe, we will use the EC2 user data feature to set up a simple web
    server during the launch of an EC2 instance. We will use this instance to test
    the VPC and public subnet we created in the previous recipes. We will also use
    this recipe in future recipes where we need to launch an EC2 instance. The EC2
    user data feature also significantly enhances security by enabling automated security
    patching, ensuring instances are updated with the latest protections upon booting
    and reducing vulnerabilities. Moreover, it guarantees consistent security configurations
    across all instances, fostering a uniform security posture that prevents configuration
    drifts and strictly adheres to established security standards from the start.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将使用EC2用户数据功能，在启动EC2实例时设置一个简单的Web服务器。我们将使用这个实例来测试在前面配方中创建的VPC和公共子网。我们还将在未来的配方中使用这个实例，任何需要启动EC2实例的地方都将用到它。EC2用户数据功能还通过启用自动安全补丁，确保实例在启动时更新到最新的保护措施，从而显著提高了安全性，并减少了漏洞。此外，它保证了所有实例的安全配置一致，防止配置漂移，并从一开始就严格遵循既定的安全标准。
- en: Getting ready
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We need the following to successfully complete this recipe:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要以下内容来成功完成此配方：
- en: A working **awsseccb-sandbox-1** AWS account, and a **awsseccbadmin1** user,
    as described in the *Technical* *requirements* section.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有效的**awsseccb-sandbox-1** AWS账户，以及一个**awsseccbadmin1**用户，如*技术要求*部分所述。
- en: An **awsseccb-vpc** VPC following the *Setting up VPC plus VPC resources with
    minimal effort* recipe from this chapter.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为**awsseccb-vpc**的 VPC，按照本章中的*通过最小努力设置 VPC 及其资源*步骤创建。
- en: How to do it...
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We will first set up an EC2 instance as a web server using EC2 user data and
    verify it from the browser. Then we will see how we can log into the instance
    using **Secure** **Shell** ( **SSH** ).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先使用 EC2 用户数据设置一个作为 Web 服务器的 EC2 实例，并通过浏览器验证它。然后我们将看到如何使用**安全外壳（SSH）**登录到该实例。
- en: Setting up a web server using EC2 user data
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 EC2 用户数据设置 Web 服务器
- en: 'We can launch an EC2 instance with a web server using user data as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式使用用户数据启动一个带有 Web 服务器的 EC2 实例：
- en: Log into the AWS Management Console and go to the **EC2** dashboard.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到 AWS 管理控制台并转到**EC2**仪表板。
- en: Click on **Instances** from the left sidebar.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧边栏点击**实例**。
- en: Click on **Launch instances** at the top right of the page.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面右上角的**启动实例**。
- en: For **Name** , provide the **Cloudericks Web** **Server** value.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**名称**，输入**Cloudericks Web Server**。
- en: In the **Application and OS Images (Amazon Machine Image)** section, select
    **Amazon Linux** , and for **Amazon Machine Image (AMI)** , select **Amazon Linux**
    **2023 AMI** .
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**应用程序和操作系统镜像（Amazon 机器镜像）**部分，选择**Amazon Linux**，在**Amazon 机器镜像（AMI）**中选择**Amazon
    Linux 2023 AMI**。
- en: '![Figure 5.8 – Selecting Amazon Linux](image/B21384_05_8.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.8 – 选择 Amazon Linux](image/B21384_05_8.jpg)'
- en: Figure 5.8 – Selecting Amazon Linux
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.8 – 选择 Amazon Linux
- en: For **Instance type** , select **t2.micro** .
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**实例类型**，选择**t2.micro**。
- en: 'For **Key pair (login)** , either select the key pair name of a key pair we
    have already generated and have access to or, if we do not have a key pair, click
    on the **Create new key pair** link and complete the following steps:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**密钥对（登录）**，请选择我们已经生成并且可以访问的密钥对名称，或者，如果没有密钥对，请点击**创建新的密钥对**链接并完成以下步骤：
- en: Enter a key pair name.
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一个密钥对名称。
- en: Set **Key pair type** to **RSA** .
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置**密钥对类型**为**RSA**。
- en: Set **Private key file format** to **.pem** .
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置**私钥文件格式**为**.pem**。
- en: Click on **Create** **key pair** .
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建密钥对**。
- en: Important note
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: We should save the key safely. If we are using a Unix or Mac system, then we
    need to change the file permission to read-only access with the **chmod** **400**
    command.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应当妥善保存密钥。如果使用的是 Unix 或 Mac 系统，则需要使用**chmod 400**命令将文件权限更改为只读访问。
- en: 'In the **Network settings** section, click on **Edit** and do the following:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**网络设置**部分，点击**编辑**并执行以下操作：
- en: For **VPC** , select our VPC, which is named **awsseccb-vpc** .
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**VPC**，选择我们命名为**awsseccb-vpc**的 VPC。
- en: For **Subnet** , select a public subnet in the **us-east-1a** AZ. If you have
    created a subnet as mentioned in the *Getting ready* section, these details are
    included in the name of the subnet.
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**子网**，选择**us-east-1a** 可用区中的公共子网。如果您已按照*准备工作*部分中的说明创建了子网，则这些信息已包含在子网名称中。
- en: Set **Auto-assign public IP** to **Enable** .
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置**自动分配公共 IP**为**启用**。
- en: '![Figure 5.9 – The launch instance network settings](image/B21384_05_9.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.9 – 启动实例的网络设置](image/B21384_05_9.jpg)'
- en: Figure 5.9 – The launch instance network settings
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.9 – 启动实例的网络设置
- en: Under **Firewall (security groups)** in the **Networks** settings section, select
    **Create security group** . For **Security group name** , enter **cloudericks-web-server**
    . For **Description** , replace the default security group name within the **Description**
    field with **cloudericks-web-server** .
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**防火墙（安全组）**部分的**网络**设置中，选择**创建安全组**。对于**安全组名称**，输入**cloudericks-web-server**。对于**描述**，在**描述**字段中将默认的安全组名称替换为**cloudericks-web-server**。
- en: '![Figure 5.10 Creating a security group](image/B21384_05_10.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.10 创建安全组](image/B21384_05_10.jpg)'
- en: Figure 5.10 Creating a security group
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.10 创建安全组
- en: Under **Inbound Security Group Rules** within the **Network settings** section,
    add rules for **HTTP** and **HTTPS** with **Source type** as **Anywhere** . Add
    the **SSH** rule with the **Source type** as **My IP** to allow SSH only from
    our IP.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**网络设置**部分的**入站安全组规则**中，添加**HTTP**和**HTTPS**的规则，**源类型**选择**任何地方**。添加**SSH**规则，**源类型**选择**我的
    IP**，只允许来自我们 IP 的 SSH。
- en: Important note
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: We allowed SSH traffic from our own IP address. In a production environment,
    SSH access is typically restricted to a bastion host or jump host, which is a
    dedicated server configured to provide a secure and controlled access point to
    the internal network from an external source. With a bastion host setup, we first
    log in to the bastion host and, from there, securely log in to our web server.
    We may also use one of the options shown such as EC2 Instance Connect, Session
    Manager, and EC2 serial console, as shown in *Figure 5* *.13* .
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们允许了来自自己 IP 地址的 SSH 流量。在生产环境中，SSH 访问通常会被限制为跳板主机或堡垒主机，这是一台专门配置的服务器，用于从外部来源安全且受控地访问内部网络。通过堡垒主机设置，我们首先登录到堡垒主机，然后从那里安全地登录到我们的
    Web 服务器。我们还可以使用如 *图 5.13* 所示的选项之一，如 EC2 实例连接、会话管理器和 EC2 串行控制台。
- en: 'In the **Advanced details** section, copy and paste the following script code
    into the **User** **data** field:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **高级详情** 部分，将以下脚本代码复制并粘贴到 **用户数据** 字段中：
- en: '[PRE0]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Leave other values and selections as-is and click on **Launch instance** . Once
    the instance is launched successfully, go to the **Instances** page, select our
    new EC2 instance, and explore its parameters.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持其他值和选择不变，点击 **启动实例**。实例启动成功后，转到 **实例** 页面，选择我们的新 EC2 实例，并查看其参数。
- en: Copy either the **Public IPv4 DNS** or the **Public IPv4** address, open it
    from a browser tab, and use **http** instead of **https** . We should see our
    web server’s index.html page.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制 **Public IPv4 DNS** 或 **Public IPv4** 地址，在浏览器标签页中打开，并使用 **http** 而不是 **https**。我们应该能够看到
    Web 服务器的 index.html 页面。
- en: '![Figure 5.11 – The web server’s index.html page from a browser](image/B21384_05_11.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.11 – 从浏览器访问 Web 服务器的 index.html 页面](image/B21384_05_11.jpg)'
- en: Figure 5.11 – The web server’s index.html page from a browser
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.11 – 从浏览器访问 Web 服务器的 index.html 页面
- en: 'In this section, we created a simple web server and accessed the web page from
    the internet using HTTP. It is listed as **Not Secure** since we are using HTTP
    and not HTTPS. If we try to run the URL with HTTPS, it will give a response similar
    to this:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们创建了一个简单的 Web 服务器，并通过 HTTP 从互联网访问网页。由于我们使用的是 HTTP 而不是 HTTPS，因此它被列为 **不安全**。如果我们尝试使用
    HTTPS 运行该 URL，它将返回类似于以下的响应：
- en: '![Figure 5.12 – No HTTPS website](image/B21384_05_12.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.12 – 无 HTTPS 网站](image/B21384_05_12.jpg)'
- en: Figure 5.12 – No HTTPS website
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.12 – 无 HTTPS 网站
- en: In the next section, we will connect to the instance using SSH, and in [*Chapter
    6*](B21384_06.xhtml#_idTextAnchor220) , we will enable HTTPS on this machine.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将使用 SSH 连接到实例，并在 [*第 6 章*](B21384_06.xhtml#_idTextAnchor220) 中启用该机器的
    HTTPS。
- en: Connecting to EC2 instance using SSH
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 SSH 连接到 EC2 实例
- en: 'We can connect to the EC2 instance over SSH as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按如下方式通过 SSH 连接到 EC2 实例：
- en: Go to the **Instances** page in the **EC2** dashboard.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 **EC2** 仪表盘中的 **实例** 页面。
- en: Select our instance and, from the **Actions** drop-down menu, click on **Connect**
    . This will give us ways to connect to an EC2 instance such as **EC2 Instance
    Connect** , **Session Manager** , **SSH client** , and **EC2** **serial console**
    .
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们的实例，并从 **操作** 下拉菜单中点击 **连接**。这将为我们提供连接 EC2 实例的方式，如 **EC2 实例连接**、**会话管理器**、**SSH
    客户端** 和 **EC2 串行控制台**。
- en: '![Figure 5.13 – The Connect to instance options](image/B21384_05_13.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.13 – 连接实例选项](image/B21384_05_13.jpg)'
- en: Figure 5.13 – The Connect to instance options
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.13 – 连接实例选项
- en: 'Go to the **SSH client** tab. We should see the steps to connect to our instance
    using SSH, as shown in the following figure:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 **SSH 客户端** 标签页。我们应该能看到通过 SSH 连接到实例的步骤，如下图所示：
- en: '![Figure 5.14 – Connecting to an instance with the SSH client](image/B21384_05_14.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.14 – 使用 SSH 客户端连接到实例](image/B21384_05_14.jpg)'
- en: Figure 5.14 – Connecting to an instance with the SSH client
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.14 – 使用 SSH 客户端连接到实例
- en: 'We can follow the given steps and connect to our EC2 instance. If we are connecting
    to the instance for the first time, we will get a confirmation message to trust
    the site and continue connecting. Enter **yes** for the same:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以按照给定步骤连接到 EC2 实例。如果是第一次连接实例，我们会收到确认消息，要求信任该站点并继续连接。输入 **yes** 以继续：
- en: '![Figure 5.15 – Connecting to the instance with SSH](image/B21384_05_15.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.15 – 使用 SSH 连接到实例](image/B21384_05_15.jpg)'
- en: Figure 5.15 – Connecting to the instance with SSH
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.15 – 使用 SSH 连接到实例
- en: We connected to our instance using SSH. It is worth noting that there are a
    few other options available, such as EC2 Instance Connect, Session Manager, and
    EC2 serial console, as we saw in *Figure 5* *.13* .
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 SSH 连接到我们的实例。值得注意的是，除了传统的 SSH 连接外，还有一些其他的选项，例如 EC2 实例连接、会话管理器和 EC2 串行控制台，正如我们在
    *图 5* *.13* 中所看到的那样。
- en: How it works...
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: First, we set up a web server using EC2 user data. The EC2 user data feature
    allows us to configure a set of scripts or commands that will be run only once
    when the instance first starts. This capability is helpful for installing software,
    updating the system, downloading files, or configuring settings to match specific
    requirements. The user data script is injected into the instance before it is
    even booted, making it an efficient method to bootstrap the instance with all
    the necessary configurations and software. This helps to ensure that the instance
    is fully prepared for its role, whether it be a web server, database, or any other
    service, from the moment it becomes operational. This feature significantly streamlines
    the deployment process, eliminating the need for manual setup and allowing for
    more agile and scalable cloud architecture designs.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用 EC2 用户数据设置了一个 Web 服务器。EC2 用户数据功能允许我们配置一组脚本或命令，这些脚本或命令在实例首次启动时仅运行一次。此功能对于安装软件、更新系统、下载文件或配置符合特定要求的设置非常有用。用户数据脚本在实例启动之前就会注入到实例中，因此它是一种高效的启动方式，能够在实例变为可用的瞬间就为其配置所需的所有设置和软件。这有助于确保实例从投入使用之初就已经为其角色做好了充分准备，无论是
    Web 服务器、数据库还是其他任何服务。此功能显著简化了部署过程，避免了手动设置，并使得云架构设计更加灵活且具有可扩展性。
- en: We also connected to our instance using SSH. SSH is a cryptographic network
    protocol employed for secure communication between a client and a server over
    an unsecured network. It’s widely used for a variety of network services, with
    the most common being remote command-line login and execution. SSH provides a
    secure channel over an unsecured network, encrypting the data exchanged to prevent
    unauthorized access, eavesdropping, and hijacking. Aside from its primary function
    of secure remote administration, SSH also supports tunneling, forwarding **Transmission
    Control Protocol** ( **TCP** ) ports, and transferring files using associated
    protocols such as SFTP or SCP. Its versatility and security features make SSH
    an essential tool for managing servers, configuring networks, and securely transferring
    data across the internet.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也使用 SSH 连接到我们的实例。SSH 是一种加密网络协议，用于在不安全的网络上实现客户端与服务器之间的安全通信。它广泛应用于多种网络服务，其中最常见的是远程命令行登录和执行。SSH
    提供了一个安全的通道，即使在不安全的网络上也能加密交换的数据，以防止未经授权的访问、窃听和劫持。除了其主要的远程安全管理功能外，SSH 还支持隧道、转发 **传输控制协议**（**TCP**）端口，并使用相关协议（如
    SFTP 或 SCP）传输文件。由于其多功能性和安全特性，SSH 成为管理服务器、配置网络和通过互联网安全传输数据的必备工具。
- en: There’s more...
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We connected to our instance using SSH. AWS also provides a few alternatives
    to connect to our instance, as we saw in *Figure 5* *.14* . Let us quickly explore
    them.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 SSH 连接到我们的实例。AWS 还提供了一些连接实例的其他选项，正如我们在 *图 5* *.14* 中所看到的那样。让我们快速探索一下它们。
- en: EC2 Instance Connect provides a simple and secure way to connect to your instances
    using SSH directly from the AWS Management Console. Unlike traditional SSH, which
    requires you to manage SSH keys, Instance Connect handles key management for you,
    generating a one-time-use SSH key for each connection session. This method enhances
    security by avoiding the need to share and manage SSH keys manually and provides
    an easy way to control access through AWS IAM policies.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: EC2 实例连接提供了一种简单且安全的方式，让你可以直接从 AWS 管理控制台使用 SSH 连接到你的实例。与传统的 SSH 不同，传统 SSH 需要你管理
    SSH 密钥，而实例连接会为每个连接会话生成一次性使用的 SSH 密钥，自动处理密钥管理。这种方法通过避免手动共享和管理 SSH 密钥来增强安全性，并通过
    AWS IAM 策略提供了一个简单的访问控制方式。
- en: '**AWS Systems Manager Session Manager** is a feature of AWS Systems Manager
    that lets you manage your EC2 instances through an interactive shell or automation
    scripts without needing to open inbound ports, set up a bastion host, or manage
    SSH keys. It provides secure, auditable instance management without the complexity
    of traditional access methods. Session Manager sessions are encrypted and can
    be logged and audited, making it an ideal choice for enterprises concerned with
    security and compliance. It also integrates with AWS IAM for access control.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '**AWS Systems Manager会话管理器**是AWS Systems Manager的一项功能，允许你通过交互式Shell或自动化脚本管理EC2实例，而无需打开入站端口、设置堡垒主机或管理SSH密钥。它提供了安全的、可审计的实例管理，而不需要传统访问方法的复杂性。会话管理器的会话是加密的，并且可以被记录和审计，是企业在关注安全性和合规性时的理想选择。它还与AWS
    IAM集成，用于访问控制。'
- en: The EC2 serial console allows you to troubleshoot boot and network connectivity
    issues by providing secure, serial access to your EC2 instances. This is particularly
    useful when you cannot connect to your instance using SSH or RDP. Access to the
    serial console does not require network connectivity, making it an invaluable
    tool for resolving issues that prevent an instance from starting up correctly.
    Access to the EC2 serial console is controlled through IAM policies, ensuring
    that only authorized users can use this feature.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: EC2串行控制台允许你通过提供安全的串行访问来排查启动和网络连接问题。这在无法通过SSH或RDP连接实例时特别有用。访问串行控制台不需要网络连接，因此它是解决防止实例正确启动问题的宝贵工具。对EC2串行控制台的访问通过IAM策略进行控制，确保只有授权用户可以使用此功能。
- en: Each of these connection methods serves different use cases, from simplifying
    SSH key management with EC2 Instance Connect, offering secure and auditable access
    with Session Manager, to providing a last-resort troubleshooting tool with the
    EC2 Serial Console. Depending on our security requirements, operational practices,
    and troubleshooting needs, we can choose the method that best fits our scenario.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这些连接方式各自适用于不同的使用场景，从通过EC2实例连接简化SSH密钥管理、通过会话管理器提供安全且可审计的访问，到通过EC2串行控制台提供最后的故障排除工具。根据我们的安全需求、操作实践和故障排除需求，我们可以选择最适合我们场景的方法。
- en: See also
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: Read more about the different ways to connect to an EC2 instance at [https://www.cloudericks.com/blog/different-ways-to-connect-to-ec2-instances-in-aws](https://www.cloudericks.com/blog/different-ways-to-connect-to-ec2-instances-in-aws)
    .
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读更多关于不同方式连接到EC2实例的内容，请访问[https://www.cloudericks.com/blog/different-ways-to-connect-to-ec2-instances-in-aws](https://www.cloudericks.com/blog/different-ways-to-connect-to-ec2-instances-in-aws)。
- en: We can further increase EC2 security by encrypting the EBS instance following
    the steps available at [https://www.cloudericks.com/blog/steps-to-encrypt-ebs-data-with-aws-kms](https://www.cloudericks.com/blog/steps-to-encrypt-ebs-data-with-aws-kms)
    .
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以通过加密EBS实例来进一步提高EC2的安全性，具体步骤请参考[https://www.cloudericks.com/blog/steps-to-encrypt-ebs-data-with-aws-kms](https://www.cloudericks.com/blog/steps-to-encrypt-ebs-data-with-aws-kms)。
- en: Creating and configuring security groups
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和配置安全组
- en: In this recipe, we will learn how to create a security group from the VPC dashboard.
    Similar steps can be followed to create a security group from the EC2 dashboard.
    We can also create a security group while launching an EC2 instance.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何通过VPC仪表板创建安全组。也可以按照类似的步骤从EC2仪表板创建安全组。我们还可以在启动EC2实例时创建安全组。
- en: Getting ready
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To complete the steps within this recipe, we need the following configurations:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本食谱中的步骤，我们需要以下配置：
- en: A working AWS account is essential. I will be using the **awsseccb-sandbox-1**
    account that we created in [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020) . However,
    I will not be using any features of the AWS Organizations or the IAM Identity
    Center.
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有效的AWS账户是必需的。我将使用在[ *第1章* ](B21384_01.xhtml#_idTextAnchor020)中创建的**awsseccb-sandbox-1**账户。但我不会使用AWS
    Organizations或IAM身份中心的任何功能。
- en: We need to create a VPC and a public subnet under that. We can create a VPC
    and subnet by following the *Creating a bare VPC and setting up public and private
    subnets* recipe from this chapter.
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要创建一个VPC并在其下创建一个公有子网。可以按照本章中的*创建一个裸VPC并设置公有和私有子网*的食谱来创建VPC和子网。
- en: How to do it...
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can create a security group from the VPC dashboard as follows:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按如下方式从VPC仪表板创建安全组：
- en: Go to the VPC dashboard.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到VPC仪表板。
- en: On the left sidebar under **Security** , click on **Security groups** .
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧边栏的**安全性**下，点击**安全组**。
- en: On the **Security Groups** page, click on **Create** **security group** .
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**安全组**页面，点击**创建** **安全组**。
- en: Provide values for **Security group name** and **Description** ; select our
    VPC.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供**安全组名称**和**描述**的值；选择我们的VPC。
- en: '![Figure 5.16 – Creating a security group](image/B21384_05_16.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.16 – 创建安全组](image/B21384_05_16.jpg)'
- en: Figure 5.16 – Creating a security group
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.16 – 创建安全组
- en: 'Under **Inbound rules** on the same page, we need to add the rules that follow:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一页面的**入站规则**下，我们需要添加以下规则：
- en: Click on **Add rule** . Set **Type** to **HTTP** , **Source type** to **Anywhere-IPv4**
    , and **Source** to **0.0.0.0/0** .
  id: totrans-252
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加规则**。将**类型**设置为**HTTP**，将**源类型**设置为**Anywhere-IPv4**，并将**源**设置为**0.0.0.0/0**。
- en: Click **Add rule** . Set **Type** to **HTTPS** , **Source type** to **Anywhere-IPv4**
    , and **Source** to **0.0.0.0/0** .
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加规则**。将**类型**设置为**HTTPS**，将**源类型**设置为**Anywhere-IPv4**，并将**源**设置为**0.0.0.0/0**。
- en: Click **Add rule** . Set **Type** to **SSH** and **Source type** to **My IP**
    . Our IP address should be populated under **Source** .
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加规则**。将**类型**设置为**SSH**，将**源类型**设置为**我的IP**。我们的IP地址应自动填充在**源**下。
- en: '![Figure 5.17 – Setting the inbound rules for the security group](image/B21384_05_17.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.17 – 设置安全组的入站规则](image/B21384_05_17.jpg)'
- en: Figure 5.17 – Setting the inbound rules for the security group
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.17 – 设置安全组的入站规则
- en: Tip
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'If IPv6 traffic is required, we can also add a CIDR range of **: :/0** under
    **Source** to the rules.'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要IPv6流量，我们还可以在规则中将**Source**下的CIDR范围设置为**::/0**。
- en: 'Under **Outbound rules** , we can see a default rule already created as follows:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**出站规则**下，我们可以看到已经创建了一个默认规则，如下所示：
- en: '![Figure 5.18 – The default outbound rule](image/B21384_05_18.jpg)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.18 – 默认出站规则](image/B21384_05_18.jpg)'
- en: Figure 5.18 – The default outbound rule
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.18 – 默认出站规则
- en: Important Note
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Default outbound rules for a security group allow all outbound traffic. For
    added security, we can provide outbound access to only the required protocols,
    such as HTTP and HTTPS.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的安全组出站规则允许所有出站流量。为了增强安全性，我们可以只为所需的协议提供出站访问，如HTTP和HTTPS。
- en: 'If we need to change the outbound rules so that we only allow HTTP and HTTPS
    traffic, edit the default rule on the same page as follows:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要更改出站规则，以便仅允许HTTP和HTTPS流量，可以在同一页面编辑默认规则，如下所示：
- en: Set **Type** to **HTTP** , **Destination type** to **Anywhere-IPv4** , and **Destination**
    to **0.0.0.0/0** .
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**类型**设置为**HTTP**，将**目标类型**设置为**Anywhere-IPv4**，并将**目标**设置为**0.0.0.0/0**。
- en: Click **Add rule** . Set **Type** to **HTTPS** , **Destination type** to **Anywhere-IPv4**
    , and **Destination** to **0.0.0.0/0** .
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加规则**。将**类型**设置为**HTTPS**，将**目标类型**设置为**Anywhere-IPv4**，并将**目标**设置为**0.0.0.0/0**。
- en: '![Figure 5.19 – Outbound rules for the security group](image/B21384_05_19.jpg)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.19 – 安全组的出站规则](image/B21384_05_19.jpg)'
- en: Figure 5.19 – Outbound rules for the security group
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.19 – 安全组的出站规则
- en: Tip
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'If IPv6 traffic is required, we can also add a CIDR range of **: :/0** under
    **Destination** to the rules.'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要IPv6流量，我们还可以在规则中将**Destination**下的CIDR范围设置为**::/0**。
- en: Scroll down and click **Create** **security group** .
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动并点击**创建** **安全组**。
- en: We should get a success message stating that the security group was created.
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们应该会看到一条成功消息，表示安全组已创建。
- en: Important note
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The exact rules will be different for each recipe. The preceding rules may be
    used for instances of a public subnet that hosts a web server. We also provided
    SSH access to our local IP; however, in most projects, we would give SSH access
    to a dedicated machine, referred to as a jump host or a bastion host.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 确切的规则对于每个方案会有所不同。前述规则可能适用于托管Web服务器的公共子网实例。我们还为本地IP提供了SSH访问；然而，在大多数项目中，我们通常会为专用机器提供SSH访问，这些机器被称为跳跃主机或堡垒主机。
- en: How it works...
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we created and configured a security group with inbound and
    outbound rules that are applicable to an EC2 instance in a public subnet running
    a web server. We will use these steps to create security groups in other recipes.
    The exact rules may differ based on the use case. Instead of providing the CIDR
    range, we can also specify another security group in a rule to say that only instances
    with that security group should be allowed.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方案中，我们创建并配置了一个包含入站和出站规则的安全组，适用于在公共子网中运行Web服务器的EC2实例。我们将使用这些步骤在其他方案中创建安全组。具体规则可能会根据使用案例有所不同。我们也可以指定另一个安全组，而不是提供CIDR范围，以表明只有具有该安全组的实例才应该被允许。
- en: In the *Working with NACLs* recipe later in this chapter, we will explicitly
    allow the **1024** – **65535** **ephemeral port** range for outbound requests.
    This isn’t needed for security groups since security groups are stateful. If an
    outbound port is opened, the response for a request going through that port is
    also allowed, irrespective of the inbound rules. Similarly, if an inbound port
    is opened, the response for a request coming through that port is also allowed,
    irrespective of the outbound rules.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章节后面的*使用NACL*食谱中，我们将显式允许**1024** – **65535** **临时端口**范围的出站请求。由于安全组是有状态的，这在安全组中不需要。如果打开了一个出站端口，则通过该端口发送的请求的响应也会被允许，而不受入站规则的限制。同样，如果打开了一个入站端口，则通过该端口发送的请求的响应也会被允许，而不受出站规则的限制。
- en: There’s more...
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We created security groups from the VPC dashboard. We can also create them from
    the EC2 dashboard. Refer to the links within the *See also* section of this recipe
    for more details.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过VPC仪表板创建了安全组。我们也可以通过EC2仪表板创建安全组。有关更多详细信息，请参阅本食谱中*另请参阅*部分的链接。
- en: 'Let’s quickly go through some important concepts related to security groups:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速浏览一些与安全组相关的重要概念：
- en: Security groups do not span across VPCs.
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全组不能跨VPC使用。
- en: We can create security groups from the EC2 launch wizard, EC2 dashboard, or
    VPC dashboard.
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以通过EC2启动向导、EC2仪表板或VPC仪表板来创建安全组。
- en: Security groups are stateful, unlike NACLs.
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全组是有状态的，不像NACL那样无状态。
- en: 'It is good practice to have multiple security groups based on usage. For example,
    we can create separate security groups: one for SSH and one for application-specific
    ports. We can configure the rules for a security group to allow instances from
    another security group instead of providing a CIDR. We can also specify our own
    security group to allow only instances within the same security group to talk
    to each other.'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于使用情况，最好创建多个安全组。例如，我们可以创建单独的安全组：一个用于SSH，另一个用于应用程序特定的端口。我们可以配置安全组规则，允许来自另一个安全组的实例，而不是提供CIDR。我们还可以指定自己的安全组，只允许同一安全组中的实例相互通信。
- en: See also
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Read more about security groups in AWS at [https://www.cloudericks.com/blog/understanding-security-groups-in-aws](https://www.cloudericks.com/blog/understanding-security-groups-in-aws)
    .
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读有关AWS中安全组的更多信息，请访问[https://www.cloudericks.com/blog/understanding-security-groups-in-aws](https://www.cloudericks.com/blog/understanding-security-groups-in-aws)。
- en: A rules reference for security groups can be found at [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html)
    .
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关安全组规则的参考资料，请访问[https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html)。
- en: Working with NACLs
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NACL
- en: In this recipe, we will create a new NACL with no SSH support and associate
    one of our subnets with that NACL. By doing this, we will see that we cannot do
    SSH into EC2 instances within that subnet. After, we will add SSH support to the
    NACL and try to SSH again.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将创建一个新的NACL，且不支持SSH，并将我们的一个子网与该NACL关联。通过这样做，我们将看到无法通过SSH连接到该子网中的EC2实例。之后，我们将为NACL添加SSH支持，并再次尝试SSH。
- en: Getting ready
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To complete the steps within this recipe, we need the following:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本食谱中的步骤，我们需要以下内容：
- en: We need to create a VPC and a public subnet under that. We can create a VPC
    and subnet by following the *Creating a bare VPC and setting up public and private
    subnets* recipe from this chapter.
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要创建一个VPC并在其下创建一个公共子网。我们可以通过参考本章节中的*创建一个裸VPC并设置公共和私有子网*食谱来创建VPC和子网。
- en: We need to create a security group for our instance; this security group should
    allow inbound traffic for SSH. We can do this by referring to the *Creating and
    configuring security groups* recipe in this chapter.
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要为我们的实例创建一个安全组；该安全组应允许SSH的入站流量。我们可以通过参考本章节中的*创建和配置安全组*食谱来完成此操作。
- en: We need an EC2 instance launched into a public subnet; we can do this by referring
    to the *Launching an EC2 instance with a web server using user data* recipe in
    this chapter.
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要一个启动到公共子网中的EC2实例；我们可以通过参考本章节中的*使用用户数据启动带有Web服务器的EC2实例*食谱来完成此操作。
- en: How to do it...
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can create an NACL with no SSH permission as follows:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个没有SSH权限的NACL，如下所示：
- en: Go to the **VPC** service in the console.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入控制台中的**VPC**服务。
- en: Click on **Network ACLs** on the left sidebar.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧边栏中的**网络ACL**。
- en: Click on **Create network ACL** at the top of the page.
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面顶部的**创建网络ACL**。
- en: In **Create network ACL** under **Network ACL settings** , provide a name and
    select the VPC we created in the previous section from the dropdown for the **VPC**
    field.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **创建网络 ACL** 的 **网络 ACL 设置** 中，提供一个名称并从下拉列表中选择我们在上一节中创建的 VPC 作为 **VPC** 字段。
- en: Click on **Create network ACL** to create the network ACL.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建网络 ACL** 来创建网络 ACL。
- en: '![Figure 5.20 – Creating a network ACL](image/B21384_05_20.jpg)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.20 – 创建网络 ACL](image/B21384_05_20.jpg)'
- en: Figure 5.20 – Creating a network ACL
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.20 – 创建网络 ACL
- en: If we go to the NACL list, we will see that our new NACL doesn’t have any subnets
    associated with it.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们进入 NACL 列表，我们会看到新创建的 NACL 没有任何关联的子网。
- en: '![Figure 5.21 – A new NACL is created without any associated subnets](image/B21384_05_21.jpg)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.21 – 没有任何关联子网的新 NACL](image/B21384_05_21.jpg)'
- en: Figure 5.21 – A new NACL is created without any associated subnets
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.21 – 没有任何关联子网的新 NACL
- en: Select our new NACL, scroll down, and verify the inbound and outbound rules
    of the new NACL from its **Inbound Rules** and **Outbound Rules** tabs, respectively.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们的新 NACL，向下滚动，并分别从其 **入站规则** 和 **出站规则** 标签中验证新 NACL 的入站和出站规则。
- en: 'The inbound rules should be as follows:'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 入站规则应如下所示：
- en: '![Figure 5.22 – The inbound rules for the new NACL created](image/B21384_05_22.jpg)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.22 – 新创建的 NACL 的入站规则](image/B21384_05_22.jpg)'
- en: Figure 5.22 – The inbound rules for the new NACL created
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.22 – 新创建的 NACL 的入站规则
- en: 'The outbound rules should be as follows:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 出站规则应如下所示：
- en: '![Figure 5.23 – The outbound rules for the new NACL created](image/B21384_05_23.jpg)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.23 – 新创建的 NACL 的出站规则](image/B21384_05_23.jpg)'
- en: Figure 5.23 – The outbound rules for the new NACL created
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.23 – 新创建的 NACL 的出站规则
- en: Click on the **Subnet** **associations** tab.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **子网** **关联** 标签。
- en: Click on **Edit** **subnet associations** .
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **编辑** **子网关联**。
- en: Select the subnet we created ( **AWSPublicSubnet** ) and click **Save changes**
    .
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们创建的子网（**AWSPublicSubnet**），然后点击 **保存更改**。
- en: '![Figure 5.24 – Associating subnets](image/B21384_05_24.jpg)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.24 – 关联子网](image/B21384_05_24.jpg)'
- en: Figure 5.24 – Associating subnets
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.24 – 关联子网
- en: Select our new network ACL and check its subnet associations. Our public subnet
    should now be associated with it.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 选择我们的新网络 ACL 并检查其子网关联。我们的公共子网现在应该已经与其关联。
- en: '![Figure 5.25 – The NACL with the associated subnets](image/B21384_05_25.jpg)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.25 – 关联子网的 NACL](image/B21384_05_25.jpg)'
- en: Figure 5.25 – The NACL with the associated subnets
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.25 – 关联子网的 NACL
- en: 'Try to SSH into our public EC2 instance. Run the command that follows in the
    CLI:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试 SSH 连接到我们的公共 EC2 实例。在 CLI 中运行以下命令：
- en: '[PRE1]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The **<key path>** path is the path to the key pair that you had downloaded
    as part of the *Launching an EC2 instance with a web server using user data* recipe
    mentioned in the *Getting ready* section of this recipe. For **<EC2 user name@the
    public ip>** , go to **Instances** , select the EC2 instance we created, and click
    on **Connect** . Click on the **SSH client** tab. Copy the second part of the
    **Example** command like **ec2-user@54.198.244.252** . It will look similar to
    the following:'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**<key path>** 路径是你下载的密钥对路径，它是 *通过用户数据启动带有 Web 服务器的 EC2 实例* 配方中提到的 *准备工作* 部分的一部分。对于
    **<EC2 用户名@公共 IP>**，请进入 **实例**，选择我们创建的 EC2 实例，然后点击 **连接**。点击 **SSH 客户端** 标签。复制
    **示例** 命令的第二部分，如 **ec2-user@54.198.244.252**。它将类似于以下内容：'
- en: '[PRE2]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: If we are using AWS CloudShell, we can use the **Example** command from the
    **SSH client** tab without any modification. It will look similar to **ssh -i
    "awsdemo.pem" ec2-user@35.174.184.142** . Make sure to upload the key pair file
    before running the command.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用 AWS CloudShell，我们可以直接使用 **SSH 客户端** 标签中的 **示例** 命令，而无需任何修改。它看起来类似于 **ssh
    -i "awsdemo.pem" ec2-user@35.174.184.142**。确保在运行命令之前上传密钥对文件。
- en: The exact command or steps may differ between operating systems. On Windows,
    macOS, and most Linux systems, we can use the SSH command.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 具体的命令或步骤可能因操作系统而异。在 Windows、macOS 和大多数 Linux 系统上，我们可以使用 SSH 命令。
- en: 'The operation should time out, as shown in the following screenshot:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 操作应该会超时，如下图所示：
- en: '![Figure 5.26 – A connection time-out response without SSL](image/B21384_05_26.jpg)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.26 – 没有 SSL 的连接超时响应](image/B21384_05_26.jpg)'
- en: Figure 5.26 – A connection time-out response without SSL
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.26 – 没有 SSL 的连接超时响应
- en: 'Now, we can add SSH support to our NACL as follows:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以按照以下方式为我们的 NACL 添加 SSH 支持：
- en: Go back to the VPC dashboard, click on **Network ACLs** from the left sidebar,
    and select our NACL.
  id: totrans-333
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到 VPC 控制台，点击左侧边栏中的 **网络 ACLs**，然后选择我们的 NACL。
- en: Click on **Inbound rules** .
  id: totrans-334
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **入站规则**。
- en: Click on **Edit** **inbound rules** .
  id: totrans-335
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **编辑** **入站规则**。
- en: Click on **Add** **new rule** .
  id: totrans-336
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加** **新规则**。
- en: Enter **100** under **Rule number** , select **SSH (22)** under **Type** , leave
    the source as **0.0.0.0/0** , set **Allow/Deny** to **Allow** , and click on **Save
    changes** .
  id: totrans-337
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **规则编号** 下输入 **100**，在 **类型** 下选择 **SSH (22)**，将源设置为 **0.0.0.0/0**，将 **允许/拒绝**
    设置为 **允许**，然后点击 **保存更改**。
- en: Important note
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If we try to SSH into the EC2 instance now, the SSH will fail, as we have not
    enabled the ephemeral ports for outbound traffic.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在尝试 SSH 连接到 EC2 实例，SSH 将会失败，因为我们没有启用出站流量的临时端口。
- en: Click on **Outbound rules** .
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **出站规则**。
- en: Click on **Edit** **outbound rules** .
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **编辑** **出站规则**。
- en: Click on **Add** **new rule** .
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加** **新规则**。
- en: Enter **100** under **Rule number** , select **Custom TCP** under **Type** ,
    set **Port range** to **1024 - 65535** , set **Allow/Deny** to **Allow** , set
    **Destination** to **0.0.0.0/0** , and click on **Save changes** .
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **规则编号** 下输入 **100**，在 **类型** 下选择 **自定义 TCP**，将 **端口范围** 设置为 **1024 - 65535**，将
    **允许/拒绝** 设置为 **允许**，将 **目标** 设置为 **0.0.0.0/0**，然后点击 **保存更改**。
- en: 'Try to SSH into our public EC2 instance. The exact command or steps may differ
    between operating systems. On Windows, macOS, and most Linux systems, we can use
    the SSH command that follows:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试 SSH 连接到我们的公共 EC2 实例。不同操作系统间的具体命令或步骤可能有所不同。在 Windows、macOS 和大多数 Linux 系统上，我们可以使用以下
    SSH 命令：
- en: '[PRE3]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, we should be able to SSH successfully.
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们应该能够成功 SSH 连接了。
- en: '![Figure 5.27 – A successful SSH response](image/B21384_05_27.jpg)'
  id: totrans-347
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.27 – 成功的 SSH 响应](image/B21384_05_27.jpg)'
- en: Figure 5.27 – A successful SSH response
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.27 – 成功的 SSH 响应
- en: In this recipe, we only added one inbound rule and one outbound rule. We can
    add more rules as required.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们只添加了一个入站规则和一个出站规则。根据需要，我们可以添加更多规则。
- en: How it works...
  id: totrans-350
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: NACLs allow us to define inbound and outbound rules for the subnets of our VPC.
    We can explicitly allow or deny traffic through a port, or a range of ports. The
    default NACL that was created by AWS allows all inbound and outbound traffic.
    However, by default, a custom NACL denies all inbound and outbound traffic. First,
    we created a new NACL. Then, we associated our public subnet with that NACL and
    verified that we could not SSH from our local machine. A new NACL denies inbound
    and outbound traffic by default. To allow SSH, we added an inbound rule for SSH
    in our NACL and an outbound rule to allow the **1024** – **65535** ephemeral port
    range.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: NACL 允许我们为 VPC 的子网定义入站和出站规则。我们可以明确地允许或拒绝通过某个端口或端口范围的流量。AWS 创建的默认 NACL 允许所有入站和出站流量。然而，默认情况下，自定义
    NACL 会拒绝所有入站和出站流量。首先，我们创建了一个新的 NACL。然后，我们将公共子网与该 NACL 关联，并验证我们无法从本地机器 SSH 连接。新的
    NACL 默认会拒绝所有入站和出站流量。为了允许 SSH，我们在 NACL 中添加了一个入站规则用于 SSH，并添加了一个出站规则以允许 **1024**
    – **65535** 的临时端口范围。
- en: Important Note
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: An ephemeral port is a short-lived port for IP communications with transport
    protocols such as TCP, **User Datagram Protocol** ( **UDP** ), **Stream Control
    Transmission Protocol** ( **SCTP** ), and so on. It is usually used for the return
    traffic from the instance or service we are connecting to. For example, the server
    accepts SSH traffic on port **22** and then communicates to the client through
    one of the ephemeral ports. In this recipe, we added outbound rules that allow
    the ephemeral port range as suggested by AWS for public-facing instances to cover
    various client types.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 临时端口是用于 IP 通信的短暂端口，适用于 TCP、**用户数据报协议**（**UDP**）、**流控制传输协议**（**SCTP**）等传输协议。它通常用于返回流量，即我们连接的实例或服务的返回流量。例如，服务器在端口
    **22** 接收 SSH 流量，然后通过某个临时端口与客户端通信。在本教程中，我们添加了允许临时端口范围的出站规则，这是 AWS 针对面向公众的实例建议的端口范围，适用于不同类型的客户端。
- en: There’s more...
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: 'Let’s quickly go through some important concepts related to network ACLs:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速回顾一下与网络 ACL 相关的一些重要概念：
- en: When we create a VPC, a default NACL is created by AWS. The value of the **Default**
    column will be **Yes** for the default NACL within the NACL list in our VPC.
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们创建一个 VPC 时，AWS 会创建一个默认的 NACL。在 VPC 的 NACL 列表中，**默认** 列的值会显示为 **是**，表示这是默认的
    NACL。
- en: Default NACL allows all inbound and outbound traffic. However, when we create
    a new custom NACL, all inbound and outbound traffic is denied by default.
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认的 NACL 允许所有入站和出站流量。然而，当我们创建一个新的自定义 NACL 时，默认情况下所有的入站和出站流量都会被拒绝。
- en: Every subnet needs to be associated with one NACL at a time. By default, a subnet
    is associated with the default NACL.
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个子网只能与一个 NACL 关联。默认情况下，一个子网会与默认的 NACL 关联。
- en: One subnet can only be associated with one NACL at a time. When we associate
    it with a new NACL, the current association will be removed.
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个子网一次只能与一个NACL关联。当我们将其与新的NACL关联时，当前的关联将被移除。
- en: A single NACL can be associated with multiple subnets.
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个NACL可以与多个子网关联。
- en: NACLs contain a numbered set of rules. These rules are evaluated in the order
    of the rule numbers. If we have an **Allow** rule before a **Deny** rule for the
    same port, access will be allowed for that port. Similarly, if we have a **Deny**
    rule before an **Allow** rule for the same port, access will be denied for that
    port. AWS recommends using rule numbers in multiples of 100 initially as that
    will let us add new rules in between if needed.
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NACL包含一组编号的规则，这些规则按规则编号的顺序进行评估。如果我们在**Deny**规则之前有**Allow**规则，且规则针对相同端口，那么该端口的访问将被允许。类似地，如果我们在**Allow**规则之前有**Deny**规则，且规则针对相同端口，那么该端口的访问将被拒绝。AWS建议最初使用100的倍数作为规则编号，这样如果需要添加新规则，就能在其间添加。
- en: We can block specific IP addresses with NACL, but this is not possible with
    security groups.
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用NACL阻止特定IP地址，但使用安全组无法做到这一点。
- en: NACLs are evaluated before security groups.
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NACL在安全组之前进行评估。
- en: Security groups are considered stateful, while NACLs are considered stateless.
    With a security group, if we send a request from the instance, the response is
    allowed, irrespective of the inbound rules. Similarly, if we allow an inbound
    request, the corresponding outbound response can go, regardless of the outbound
    rules. With NACL, we need to allow both inbound and outbound traffic explicitly
    for any port.
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全组被视为有状态的，而NACL被视为无状态的。使用安全组时，如果我们从实例发送请求，响应会被允许，无论入站规则如何。类似地，如果我们允许入站请求，相应的出站响应也会被允许，无论出站规则如何。使用NACL时，我们需要显式地为任何端口允许入站和出站流量。
- en: See also
  id: totrans-365
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: Read more about NACLs at [https://www.cloudericks.com/blog/understanding-network-acls-in-aws-vpc](https://www.cloudericks.com/blog/understanding-network-acls-in-aws-vpc)
    .
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读更多关于NACL的信息，请访问[https://www.cloudericks.com/blog/understanding-network-acls-in-aws-vpc](https://www.cloudericks.com/blog/understanding-network-acls-in-aws-vpc)。
- en: Using a VPC gateway endpoint to connect to S3
  id: totrans-367
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用VPC网关端点连接到S3
- en: In this recipe, we will create a **VPC gateway endpoint** for S3 and connect
    to S3 from our private subnet without any internet access.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配方中，我们将为S3创建一个**VPC网关端点**，并从我们的私有子网连接到S3，而不使用互联网访问。
- en: Getting ready
  id: totrans-369
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To complete the steps within this recipe, we need to have the following ready:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成此配方中的步骤，我们需要准备以下内容：
- en: We need a VPC with associated subnets. We can create one by referring to the
    *Creating a bare VPC and setting up public and private subnets* recipe from this
    chapter.
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要一个VPC以及关联的子网。我们可以参考本章中的*创建一个裸VPC并设置公共和私有子网*配方来创建。
- en: We need to configure a gateway and a route table for internet access. We may
    refer to the *Creating a bare VPC and setting up public and private subnets* recipe
    from this chapter.
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要配置一个网关和路由表以实现互联网访问。我们可以参考本章中的*创建一个裸VPC并设置公共和私有子网*配方。
- en: Subnets should be associated with the default NACL. Otherwise, we should define
    proper inbound and outbound rules so that we can log in to the private EC2 instance
    through the public EC2 instance. We can refer to the *Working with NACLs* recipe
    from this chapter.
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子网应与默认的NACL关联。否则，我们应定义适当的入站和出站规则，以便可以通过公共EC2实例登录到私有EC2实例。我们可以参考本章中的*使用NACL*配方。
- en: We need an S3 bucket in any region. I will be using **us-east-1** .
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要在任何区域中创建一个S3存储桶。我将使用**us-east-1**区域。
- en: We should have no internet access for the private subnet. Verify this by running
    **aws s3 ls --region us-east-1** from our private subnet. Our requests should
    fail with a timeout. If a NAT gateway or a NAT instance has been configured, remove
    its route from the main route table.
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们应该确保私有子网没有互联网访问权限。通过在私有子网中运行**aws s3 ls --region us-east-1**来验证这一点。我们的请求应该会因超时而失败。如果已配置了NAT网关或NAT实例，请从主路由表中删除其路由。
- en: Associate an IAM role with S3 access to a private EC2 instance.
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将具有S3访问权限的IAM角色与私有EC2实例关联。
- en: Tip
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: If you have not configured an IAM role correctly, you might get an error that
    says **Unable to locate credentials** . You can configure credentials by running
    **aws configure** . Fix the issue and test again before proceeding.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有正确配置IAM角色，可能会遇到**无法定位凭证**的错误。你可以通过运行**aws configure**来配置凭证。解决问题后，请再次测试，然后再继续操作。
- en: How to do it...
  id: totrans-379
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can create a VPC endpoint gateway for S3 as follows:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按如下方式为S3创建一个VPC端点网关：
- en: Go to the **VPC** service in the console.
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台中进入**VPC**服务。
- en: Click on **Endpoints** from the left sidebar.
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧边栏点击**终端节点**。
- en: Click on **Create endpoint** .
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建终端节点**。
- en: In the **Create endpoint** pane, under **Endpoint settings** , enter **VPCEndpoint**
    as the value for **Name tag** .
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**创建终端节点**面板中，在**终端节点设置**下，输入**VPCEndpoint**作为**名称标签**的值。
- en: Under **Service category** , select **AWS services** .
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**服务类别**下，选择**AWS 服务**。
- en: Under **Service Name** , select **com.amazonaws.us-east-1.s3**
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**服务名称**下，选择**com.amazonaws.us-east-1.s3**
- en: '![Figure 5.28 – Selecting the service name for endpoint creation](image/B21384_05_28.jpg)'
  id: totrans-387
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.28 – 为终端节点创建选择服务名称](image/B21384_05_28.jpg)'
- en: Figure 5.28 – Selecting the service name for endpoint creation
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.28 – 为终端节点创建选择服务名称
- en: For **VPC** , select the VPC we created in the *Getting* *ready* section.
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**VPC**，选择我们在*准备工作*部分创建的 VPC。
- en: For **Route tables** , select the route table we created in the *Getting* *ready*
    section.
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**路由表**，选择我们在*准备工作*部分创建的路由表。
- en: Leave the **Policy** field set to **Full access** .
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持**策略**字段设置为**完全访问**。
- en: Click on **Create endpoint** . We should get a success message.
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建终端节点**。我们应该看到成功消息。
- en: 'Connect to our EC2 instance and try running the following S3 command from the
    private subnet:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接到我们的 EC2 实例，并尝试从私有子网运行以下 S3 命令：
- en: '[PRE4]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Figure 5.29 – A successful response for S3 list operation](image/B21384_05_29.jpg)'
  id: totrans-395
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.29 – S3 列表操作的成功响应](image/B21384_05_29.jpg)'
- en: Figure 5.29 – A successful response for S3 list operation
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.29 – S3 列表操作的成功响应
- en: This should list the S3 items successfully.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该能够成功列出 S3 项目。
- en: How it works...
  id: totrans-398
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: VPC endpoints allow us to connect to supported AWS services from our VPC privately.
    With VPC endpoints, instances in the VPC do not need a public IP address to communicate
    with supported AWS services. The traffic between our VPC and the supported AWS
    services does not leave AWS. VPC endpoints can be considered highly available
    virtual devices.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: VPC 终端节点允许我们从 VPC 私密地连接到支持的 AWS 服务。通过 VPC 终端节点，VPC 中的实例不需要公共 IP 地址就可以与支持的 AWS
    服务通信。VPC 与支持的 AWS 服务之间的流量不会离开 AWS。VPC 终端节点可以视为高可用的虚拟设备。
- en: In this recipe, we configured a VPC endpoint of the gateway endpoint type to
    access S3 from our subnet. We removed all public routes from our subnet, and we
    could still connect to S3. VPC gateway endpoints are also supported by **DynamoDB**
    and work similarly to a VPC gateway. For most other services, VPC endpoints are
    supported through interface endpoints.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们配置了一个网关类型的 VPC 终端节点，以便从子网访问 S3。我们从子网中删除了所有公共路由，但仍然能够连接到 S3。VPC 网关终端节点也支持**DynamoDB**，并且与
    VPC 网关类似工作。对于大多数其他服务，VPC 终端节点通过接口终端节点进行支持。
- en: There’s more...
  id: totrans-401
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Let’s quickly go through some important concepts related to VPC endpoints.
    There are two types of VPC endpoints:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速回顾一些与 VPC 终端节点相关的重要概念。有两种类型的 VPC 终端节点：
- en: '**Interface endpoints** : This is an **Elastic Network Interface** ( **ENI**
    ) with a private address that allows traffic to a supported service. There are
    around 20 supported services. Examples of such supported services include Amazon
    API Gateway, Amazon CloudWatch, AWS Config, AWS KMS, and so on.'
  id: totrans-403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**接口终端节点**：这是一种具有私有地址的**弹性网络接口**（**ENI**），允许流量进入支持的服务。大约有 20 种支持的服务。这些服务的例子包括
    Amazon API Gateway、Amazon CloudWatch、AWS Config、AWS KMS 等。'
- en: '**Gateway endpoints** : Like NAT gateways, they do not have private IP addresses.
    This is only supported for limited services such as S3 and DynamoDB.'
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网关终端节点**：像 NAT 网关一样，它们没有私有 IP 地址。仅支持有限的服务，如 S3 和 DynamoDB。'
- en: See also
  id: totrans-405
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: Read more about the VPC gateway endpoint at [https://www.cloudericks.com/blog/understanding-aws-vpc-gateway-endpoint](https://www.cloudericks.com/blog/understanding-aws-vpc-gateway-endpoint)
    .
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读更多关于 VPC 网关终端节点的内容，请访问 [https://www.cloudericks.com/blog/understanding-aws-vpc-gateway-endpoint](https://www.cloudericks.com/blog/understanding-aws-vpc-gateway-endpoint)。
- en: Configuring and using VPC flow logs
  id: totrans-407
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置和使用 VPC 流日志
- en: In this recipe, we will enable flow logs at the VPC level.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将在 VPC 级别启用流日志。
- en: Getting ready
  id: totrans-409
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We need the following resources for completing the steps within this recipe:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要以下资源来完成本教程中的步骤：
- en: A **CloudWatch log group** will be needed. The detailed steps are provided later
    in this section.
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要一个**CloudWatch 日志组**。详细步骤将在本节后续提供。
- en: We need to set up a VPC. If one hasn’t been created previously, please refer
    to the *Creating a bare VPC and setting up public and private* *subnets* recipe.
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要设置一个VPC。如果之前没有创建VPC，请参考*创建一个裸VPC并设置公有和私有* *子网* 的食谱。
- en: An IAM role with permissions to publish to the CloudWatch log group with full
    access will also be needed.
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还需要一个具有发布权限的IAM角色，该角色能够完全访问CloudWatch日志组。
- en: 'We can perform the following steps to create a CloudWatch log group:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以执行以下步骤来创建CloudWatch日志组：
- en: Go to the CloudWatch service in the AWS console.
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到AWS控制台中的CloudWatch服务。
- en: Click on **Logs** from the left sidebar.
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧边栏点击**日志**。
- en: Click on **Log groups** and click on **Create** **log group** .
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**日志组**，然后点击**创建** **日志组**。
- en: Give the log group a name that describes its purpose, keep the other values
    as their defaults, and click on **Create** .
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给日志组命名，以描述其目的，保持其他值为默认值，然后点击**创建**。
- en: How to do it...
  id: totrans-419
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can configure VPC flow logs from the console as follows:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过控制台按以下步骤配置VPC流日志：
- en: Go to the **VPC** service in the console.
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到控制台中的**VPC**服务。
- en: Click on **Your VPCs** .
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**您的VPC**。
- en: Select our VPC.
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们的VPC。
- en: Click on the **Flow** **Logs** tab.
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**流** **日志**选项卡。
- en: Click on the **Actions** dropdown and select **Create** **flow log** .
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**操作**下拉菜单，然后选择**创建** **流日志**。
- en: Under **Flow log settings** , provide a name, and for the **Filter** , select
    **All** .
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**流日志设置**下，提供名称，并在**过滤器**中选择**全部**。
- en: For **Maximum aggregation interval** , select the time based on your preferences.
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**最大聚合间隔**，根据个人偏好选择时间。
- en: Set **Destination** to **Send to** **CloudWatch Logs** .
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**目标**设置为**发送到** **CloudWatch日志**。
- en: Select **Destination log group** as the log group we created in the *Getting
    ready* section of this recipe.
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**目标日志组**下拉菜单中选择我们在*准备工作*部分创建的日志组。
- en: Select the option we created in the *Getting ready* section of this recipe from
    the drop-down list for the **IAM role** .
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉列表中选择我们在*准备工作*部分创建的**IAM角色**选项。
- en: For **Log record format** , select **AWS** **default format** .
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**日志记录格式**，选择**AWS** **默认格式**。
- en: 'Click on **Create flow log** . We should see a success message. We should be
    able to see all further IP traffic logs within our flow logs. The following is
    an example of a log record from the log group for VPC logs:'
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建流日志**。我们应该看到一个成功的消息。我们应该能够在流日志中查看所有后续的IP流量日志。以下是来自VPC日志日志组的日志记录示例：
- en: '![Figure 5.30 – A sample log record](image/B21384_05_30.jpg)'
  id: totrans-433
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.30 – 一个示例日志记录](image/B21384_05_30.jpg)'
- en: Figure 5.30 – A sample log record
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.30 – 一个示例日志记录
- en: How it works...
  id: totrans-435
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: VPC flow logs help us capture IP traffic to and from our VPCs. Data from VPC
    flow logs can be published to either CloudWatch logs or to an S3 bucket. We can
    choose to log only accepted traffic, rejected traffic, or both. VPC flow logs
    can be created at different levels, such as the VPC level, subnet level, and network
    interface level.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: VPC流日志帮助我们捕获到达和离开VPC的IP流量。VPC流日志的数据可以发布到CloudWatch日志或S3存储桶。我们可以选择仅记录接受的流量、拒绝的流量或两者。VPC流日志可以在不同级别创建，例如VPC级别、子网级别和网络接口级别。
- en: In the recipe, within the **Filter** dropdown, we selected **All** to log all
    IP traffic to and from our VPCs. We can choose **Accept** to log only accepted
    traffic, **Reject** to log only rejected traffic, and **All** to log both accepted
    and rejected traffic. We needed a CloudWatch log group and an IAM role with permission
    to log to that log group.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，在**过滤器**下拉菜单中，我们选择了**全部**，以记录所有进出VPC的IP流量。我们可以选择**接受**来记录仅接受的流量，选择**拒绝**来记录仅拒绝的流量，选择**全部**来记录接受和拒绝的流量。我们需要一个CloudWatch日志组和一个具有权限的IAM角色，以便记录到该日志组。
- en: There’s more...
  id: totrans-438
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Let’s quickly go through some more important concepts related to flow logs:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速了解一些与流日志相关的重要概念：
- en: Currently, we cannot change a flow log configuration, such as changing the associated
    IAM role, once it’s been created.
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目前，一旦流日志配置创建完成，我们无法更改其配置，例如更改关联的IAM角色。
- en: 'Some of the IP traffic, including the ones listed here, are not monitored by
    flow logs:'
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是一些流量类型，包括此处列出的流量，不会被流日志监控：
- en: Traffic to the reserved IP addresses of the default VPC router
  id: totrans-442
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流量到达默认VPC路由器的保留IP地址
- en: '**Dynamic Host Configuration Protocol** ( **DHCP** ) traffic'
  id: totrans-443
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态主机配置协议**（**DHCP**）流量'
- en: Traffic set to **169.254.169.254** for querying instance metadata
  id: totrans-444
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流量设置为**169.254.169.254**以查询实例元数据
- en: Traffic while contacting Amazon DNS servers via instances; however, traffic
    to our own DNS server is logged
  id: totrans-445
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Amazon DNS服务器通信时的流量；但是，指向我们自己DNS服务器的流量会被记录。
- en: Windows license activation traffic
  id: totrans-446
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows许可证激活流量
- en: See also
  id: totrans-447
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: Read more about VPC flow logs at [https://www.cloudericks.com/blog/understanding-aws-vpc-flow-logs](https://www.cloudericks.com/blog/understanding-aws-vpc-flow-logs)
    .
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://www.cloudericks.com/blog/understanding-aws-vpc-flow-logs](https://www.cloudericks.com/blog/understanding-aws-vpc-flow-logs)了解更多关于VPC流日志的信息。
- en: Find examples of log records at [https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs-records-examples.html](https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs-records-examples.html)
    .
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs-records-examples.html](https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs-records-examples.html)查找日志记录的示例。
- en: Setting up and configuring NAT gateways
  id: totrans-450
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置和配置NAT网关
- en: In this recipe, we will learn how to create and configure NAT gateways, which
    is the latest and preferred option for NAT in AWS.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何创建和配置NAT网关，这是AWS中最新和首选的NAT选项。
- en: Getting ready
  id: totrans-452
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To complete the steps within this recipe, we need the following:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本教程中的步骤，我们需要以下内容：
- en: A working AWS account is essential. I will be using the **awsseccb-sandbox-1**
    account that we created in [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020) .
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有效的AWS账户是必需的。我将使用我们在[*第1章*](B21384_01.xhtml#_idTextAnchor020)中创建的**awsseccb-sandbox-1**账户。
- en: Create a VPC, subnets, an IGW, and a route table by following the *Creating
    a bare VPC and setting up public and private subnets* recipe from this chapter.
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过遵循本章中的*创建裸VPC并设置公共和私有子网*教程，创建一个VPC、子网、IGW和路由表。
- en: Launch instances in the public and private subnets with the appropriate security
    group configurations by following the *Creating and configuring a security group*
    recipe and the *Getting ready* section of the *Working with NACLs* recipe in this
    chapter.
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按照*创建和配置安全组*教程和*与NACLs一起使用*教程的*准备工作*部分，在公共和私有子网中启动具有适当安全组配置的实例。
- en: How to do it...
  id: totrans-457
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'We can create a NAT gateway as follows:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按如下方式创建NAT网关：
- en: Go to **VPC dashboard** .
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**VPC仪表板**。
- en: Click on **NAT gateways** on the left pane.
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧面板中的**NAT网关**。
- en: Click on **Create** **NAT gateway** .
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建** **NAT网关**。
- en: Under the **NAT gateway settings** , type **NAT-Gateway** under **Name** .
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**NAT网关设置**下，输入**NAT-Gateway**作为**名称**。
- en: For **Subnet** , in the drop-down list, select our public subnet.
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**子网**，在下拉列表中选择我们的公共子网。
- en: For **Connectivity type** , select **Public** .
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**连接类型**，选择**公共**。
- en: 'Click on **Allocate Elastic IP** to populate the allocation ID for an Elastic
    IP and select it for **Elastic IP allocation ID** or, if we already have an Elastic
    IP created, we can select one of them. The filled page should look as follows:'
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**分配弹性IP**，填充弹性IP的分配ID并选择它作为**弹性IP分配ID**，或者如果我们已经创建了弹性IP，我们可以选择其中一个。填写后的页面应如下所示：
- en: '![Figure 5.31 – NAT gateway settings](image/B21384_05_31.jpg)'
  id: totrans-466
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.31 – NAT 网关设置](image/B21384_05_31.jpg)'
- en: Figure 5.31 – NAT gateway settings
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.31 – NAT网关设置
- en: Click on **Create a NAT gateway** . We will get a message saying that the NAT
    gateway was created successfully.
  id: totrans-468
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建NAT网关**。我们会看到一条消息，提示NAT网关已成功创建。
- en: Click on **Route tables** , select our public route table, and go to the **Routes**
    tab. Click on **Edit routes** and then on **Add route** . Select **0.0.0.0/8**
    as the **Destination** . From the dropdown for **Target** , select **NAT Gateway**
    and then select the NAT gateway we created in *Step 8* . Click on **Save changes**
    .
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**路由表**，选择我们的公共路由表，转到**路由**标签页。点击**编辑路由**，然后点击**添加路由**。选择**0.0.0.0/8**作为**目标**。在**目标**的下拉菜单中，选择**NAT网关**，然后选择我们在*步骤8*中创建的NAT网关。点击**保存更改**。
- en: Go back to EC2 instances, select our instance, click on **Connect** , then on
    the **Connect to instance** page, click on **Connect** again.
  id: totrans-470
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到EC2实例，选择我们的实例，点击**连接**，然后在**连接到实例**页面上，再次点击**连接**。
- en: 'Try running any command from the terminal that requires internet access, as
    follows:'
  id: totrans-471
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试从终端运行任何需要互联网访问的命令，示例如下：
- en: '[PRE5]'
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We should get back a successful response if there is a route to the internet;
    otherwise, it will time out:'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果有通向互联网的路由，我们应该收到成功的响应；否则，连接会超时：
- en: '![Figure 5.32 – A successful response to the ping command](image/B21384_05_32.jpg)'
  id: totrans-474
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.32 – ping命令的成功响应](image/B21384_05_32.jpg)'
- en: Figure 5.32 – A successful response to the ping command
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.32 – ping命令的成功响应
- en: 'We can also run a yum update command as follows:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以运行如下的yum更新命令：
- en: '[PRE6]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Follow the remaining prompts. The update will happen successfully if there is
    a route to the internet; otherwise, it will time out.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 按照剩余提示操作。如果有通往互联网的路由，更新将会成功；否则，操作将超时。
- en: How it works...
  id: totrans-479
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: 'Internet access may be required for instances in our private subnets for activities
    such as patching, downloading software, and so on. NAT allows a private subnet
    in our VPC to talk to the internet. NAT is a process of remapping the IP address
    of a packet by modifying its IP header while in transit. AWS provides us with
    two ways to achieve NAT with VPCs: NAT gateways and NAT instances. We created
    and configured a NAT gateway in this recipe. Unlike NAT instances, NAT gateways
    are not associated with any security groups and hence, we did not create or configure
    any security groups.'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 私有子网中的实例可能需要访问互联网，进行补丁管理、软件下载等操作。NAT允许VPC中的私有子网与互联网进行通信。NAT是通过修改数据包的IP头部，在传输过程中重新映射IP地址的过程。AWS为我们提供了两种在VPC中实现NAT的方式：NAT网关和NAT实例。在本示例中，我们创建并配置了一个NAT网关。与NAT实例不同，NAT网关不与任何安全组关联，因此我们没有创建或配置任何安全组。
- en: After creating the NAT gateway, we need to add a route for it within the route
    table that our private subnets are associated with. We added the route to our
    main route table since our private subnets are associated with the main route
    table. A subnet that is not associated explicitly with any route table will be
    implicitly associated with the main route table. If our architecture has a different
    route table for private subnets, we will need to add the route for the NAT gateway
    within that route table.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建NAT网关后，我们需要在与私有子网关联的路由表中为其添加一条路由。由于我们的私有子网与主路由表关联，因此我们在主路由表中添加了该路由。如果某个子网没有明确与任何路由表关联，它将隐式地与主路由表关联。如果我们的架构中私有子网使用了不同的路由表，我们需要在该路由表中为NAT网关添加路由。
- en: There’s more...
  id: totrans-482
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: 'Let’s quickly go through some more important concepts related to NAT gateways:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速浏览一些与NAT网关相关的重要概念：
- en: NAT gateways are maintained by AWS and AWS takes care of patching, availability,
    and scaling.
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NAT网关由AWS维护，AWS负责补丁管理、可用性和扩展。
- en: NAT gateways are not associated with any security groups. NAT gateways are redundant
    within an AZ, but cannot span an AZ. Therefore, for better availability, we may
    need to create a NAT gateway per region.
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NAT网关不与任何安全组关联。NAT网关在一个可用区内是冗余的，但不能跨可用区使用。因此，为了更好的可用性，我们可能需要为每个区域创建一个NAT网关。
- en: NAT is currently not supported for IPv6 traffic. We need to use an egress-only
    IGW instead of NAT for IPv6 traffic. We can create an egress-only IGW from the
    VPC dashboard.
  id: totrans-486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前，NAT不支持IPv6流量。我们需要使用仅出口的IGW而不是NAT来处理IPv6流量。我们可以从VPC控制台创建一个仅出口的IGW。
- en: See also
  id: totrans-487
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: Read more about NAT gateways at [https://www.cloudericks.com/blog/understanding-nat-gateways-in-aws](https://www.cloudericks.com/blog/understanding-nat-gateways-in-aws)
    .
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解更多关于NAT网关的信息，请访问[https://www.cloudericks.com/blog/understanding-nat-gateways-in-aws](https://www.cloudericks.com/blog/understanding-nat-gateways-in-aws)。
- en: Read about how we can securely connect our VPC to supported AWS services, other
    VPCs, and on-premises applications, without exposing our traffic to the public
    internet using PrivateLink, at [https://www.cloudericks.com/blog/understanding-aws-privatelink](https://www.cloudericks.com/blog/understanding-aws-privatelink)
    .
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解如何使用PrivateLink安全地将我们的VPC连接到支持的AWS服务、其他VPC和本地应用程序，而无需将流量暴露到公共互联网，请访问[https://www.cloudericks.com/blog/understanding-aws-privatelink](https://www.cloudericks.com/blog/understanding-aws-privatelink)。
