- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Bash Command-Line and Its Hacking Environment
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bash 命令行及其黑客环境
- en: In this foundational chapter, you will embark on your journey into the world
    of Bash shell scripting for **penetration testers** ( **pentesters** ). You will
    gain a clear understanding of what Bash is, why it is essential for **penetration
    testing** ( **pentesting** ), and how to set up your scripting environment. Through
    hands-on examples and explanations, you will lay the groundwork for becoming a
    proficient Bash scripter in the context of cybersecurity.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一基础章节中，你将开始踏上进入 Bash shell 脚本世界的旅程，特别是面向**渗透测试员**(**pentesters**)。你将清楚地了解什么是
    Bash，为什么它对**渗透测试**(**pentesting**)至关重要，以及如何设置你的脚本环境。通过实际的示例和解释，你将为成为网络安全领域的熟练
    Bash 脚本编写者打下基础。
- en: Bash is more than just a command interpreter – it’s a tool for automating the
    complex and tedious tasks that we encounter daily in cybersecurity. In the hands
    of the untrained, Bash is a club. It seems heavy, overly complex, and uncomfortable.
    In the hands of those able to see the benefits and invest time in learning its
    intricacies, it’s a scalpel that you can use to slice through data with the skill
    of a surgeon and automate pentesting methodology like a robotics engineer.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Bash 不仅仅是一个命令解释器——它是一个自动化我们每天在网络安全中遇到的复杂和繁琐任务的工具。在没有训练的人的手中，Bash 就像一根大棒，显得沉重、过于复杂且不舒服。而在那些能够看到其好处并投入时间去学习其细节的人手中，Bash
    就像一把外科医生使用的手术刀，你可以像机器人专家一样使用它来切割数据并自动化渗透测试方法。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: Introduction to Bash
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bash 简介
- en: Lab setup
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实验室设置
- en: Configuring your hacker shell
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置你的黑客终端
- en: Setting up essential pentesting tools
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置基本的渗透测试工具
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow along with the exercises in this chapter, you’ll need a Linux environment.
    This book assumes you have enough skill to install an operating system and are
    familiar with installing and configuring virtual machine environments. If you
    need help setting up your lab environment, the VirtualBox online manual ( *Oracle
    VM VirtualBox User Manual* , ( [https://download.virtualbox.org/virtualbox/UserManual.pdf](https://download.virtualbox.org/virtualbox/UserManual.pdf)
    ) and several YouTube videos (VirtualBox – YouTube [https://www.youtube.com/results?search_query=virtualbox](https://www.youtube.com/results?search_query=virtualbox)
    ) will be helpful.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章的练习，你需要一个 Linux 环境。本书假设你具备安装操作系统的能力，并熟悉虚拟机环境的安装与配置。如果你需要帮助来设置实验室环境，可以参考
    VirtualBox 在线手册（*Oracle VM VirtualBox 用户手册*，[https://download.virtualbox.org/virtualbox/UserManual.pdf](https://download.virtualbox.org/virtualbox/UserManual.pdf)）和一些
    YouTube 视频（VirtualBox – YouTube [https://www.youtube.com/results?search_query=virtualbox](https://www.youtube.com/results?search_query=virtualbox)）。
- en: Fortunately, there are many ways to configure a Bash learning environment for
    free. All examples will be shown using Kali Linux. However, any Linux or macOS
    environment will work.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有许多免费的方式可以配置 Bash 学习环境。所有示例将使用 Kali Linux 展示。然而，任何 Linux 或 macOS 环境都可以使用。
- en: '*“Kali Linux is an open source, Debian-based Linux distribution geared toward
    various information security tasks, such as penetration testing, security research,
    computer forensics, and reverse engineering.”* ( *Kali* *Linux* , [https://www.kali.org/](https://www.kali.org/)
    )'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*“Kali Linux 是一个开源的、基于 Debian 的 Linux 发行版，旨在进行各种信息安全任务，如渗透测试、安全研究、计算机取证和逆向工程。”*（*Kali*
    *Linux*， [https://www.kali.org/](https://www.kali.org/)）'
- en: I strongly suggest that you use a fresh Kali Linux virtual machine to follow
    along with the exercises or when performing pentests. Throughout this book and
    your pentests, you will be installing a lot of tools and their dependencies. It’s
    common for tool dependencies to clash and create what is known as *dependency
    hell* . This could result in damage to your main system if you haven’t properly
    isolated the tools during installation. You also don’t want to risk infecting
    your main system with malware.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议你使用一个全新的 Kali Linux 虚拟机来跟随本书中的练习或进行渗透测试。在本书和你的渗透测试过程中，你将安装很多工具及其依赖项。工具依赖项之间的冲突是常见的，这种情况被称为*依赖地狱*。如果在安装过程中没有正确地隔离这些工具，可能会对你的主系统造成损害。你也不希望冒险让恶意软件感染你的主系统。
- en: Kali offers a wide variety of solutions. They provide installer images, virtual
    machines, cloud images, and **Windows Subsystem for Linux** ( **WSL** ) packages.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Kali 提供了多种解决方案。它们提供安装镜像、虚拟机、云镜像和**Windows 子系统 for Linux** (**WSL**) 包。
- en: You can download Kali from [https://www.kali.org/get-kali/#kali-platforms](https://www.kali.org/get-kali/#kali-platforms)
    .
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从 [https://www.kali.org/get-kali/#kali-platforms](https://www.kali.org/get-kali/#kali-platforms)
    下载 Kali。
- en: All the commands that will be used in this chapter can be found in this book’s
    GitHub repository at [https://github.com/PacktPublishing/Bash-Shell-Scripting-for-Pentesters/tree/main/Chapter01](https://github.com/PacktPublishing/Bash-Shell-Scripting-for-Pentesters/tree/main/Chapter01)
    .
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中将使用的所有命令可以在本书的 GitHub 仓库中找到：[https://github.com/PacktPublishing/Bash-Shell-Scripting-for-Pentesters/tree/main/Chapter01](https://github.com/PacktPublishing/Bash-Shell-Scripting-for-Pentesters/tree/main/Chapter01)。
- en: Introduction to Bash
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bash 简介
- en: Bash, also known as the *Bourne Again Shell* , is a command-line shell interpreter
    and scripting language. Bash was created by Brian Fox in 1989 as a free software
    replacement for the Bourne shell, which was proprietary software. (Bash – GNU
    Project – Free Software Foundation, [https://www.gnu.org/software/bash/](https://www.gnu.org/software/bash/)
    ). It’s the most common Linux shell. Bash also introduced the ability to combine
    multiple commands into shell scripts that could be run by entering one command.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Bash，亦称为 *Bourne Again Shell*，是一个命令行 shell 解释器和脚本语言。Bash 由 Brian Fox 于 1989
    年创建，作为 Bourne shell（一个专有软件）的自由软件替代品。（Bash – GNU 项目 – 自由软件基金会，[https://www.gnu.org/software/bash/](https://www.gnu.org/software/bash/)）。它是最常见的
    Linux shell。Bash 还引入了将多个命令组合成脚本的功能，用户只需输入一个命令即可执行这些脚本。
- en: When you open a Terminal on a Linux system and enter commands, your Bash shell
    manages interactions with the operating system and running executables and scripts.
    Bash and Linux executables form a symbiotic relationship, each enhancing the functionality
    and efficiency of the other. Bash serves as the gateway for users and scripts
    to interact with the Linux kernel, the core of the operating system. It interprets
    user commands, whether entered directly into the Terminal or scripted in files,
    and initiates actions within the system. Linux executables, on the other hand,
    are the workhorses that carry out these actions. They are binary files, often
    written in programming languages such as C or C++, compiled to run efficiently
    on Linux systems. When a user issues a command in Bash, it often involves invoking
    one or more of these executables to perform a task.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在 Linux 系统中打开终端并输入命令时，你的 Bash shell 管理着与操作系统的交互以及运行可执行文件和脚本。Bash 和 Linux 可执行文件形成了共生关系，彼此增强对方的功能性和效率。Bash
    作为用户和脚本与 Linux 内核（操作系统的核心）互动的门户。它解析用户命令，无论是直接输入到终端还是写入文件中的脚本，并在系统中启动相应的操作。另一方面，Linux
    可执行文件是执行这些操作的“工作马”。它们是二进制文件，通常使用 C 或 C++ 等编程语言编写，并被编译以在 Linux 系统上高效运行。当用户在 Bash
    中发出命令时，通常涉及调用一个或多个可执行文件来执行某项任务。
- en: 'The following are some of Bash’s features:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Bash 的一些功能：
- en: '**Command execution with arguments** : Commands can be binaries, built-in shell
    commands, and scripts.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**带参数的命令执行**：命令可以是二进制文件、内建的 shell 命令或脚本。'
- en: '**Command completion** : A feature that helps the user by automatically completing
    partially typed commands or filenames upon the *Tab* key being pressed.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令补全**：这是一个通过按下 *Tab* 键自动补全部分输入的命令或文件名的功能，帮助用户提高效率。'
- en: '**Command history** : Command history allows you to quickly reuse commands
    previously entered in the shell.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令历史**：命令历史允许你快速重用先前在 shell 中输入的命令。'
- en: '**Job control** : Sending commands to the background and bringing them to the
    foreground.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**作业控制**：将命令发送到后台并将其带到前台。'
- en: '**Shell functions and alias** : A function groups related code under a name
    that can be called when needed. An alias allows the user to shorten complex commands
    to a single name.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Shell 函数和别名**：函数将相关代码组织成一个可以在需要时调用的名称。别名允许用户将复杂命令简化为单个名称。'
- en: '**Arrays** : Arrays store elements in a list that we can later retrieve and
    process.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数组**：数组将元素存储在一个列表中，我们可以在之后检索和处理这些元素。'
- en: '**Command and brace expansion** : Command expansion uses the result of a command
    as the input for another command. Brace expansion allows strings to be generated.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令与大括号扩展**：命令扩展使用一个命令的结果作为另一个命令的输入。大括号扩展允许生成字符串。'
- en: '**Pipelines and redirection** : The output of one command is used as input
    for another command.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管道与重定向**：一个命令的输出作为另一个命令的输入。'
- en: '**Environment variables** : Dynamic values are assigned to name tags, which
    are frequently used to represent system configuration or store information about
    the environment.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境变量**：动态值被分配到标签名，这些标签通常用于表示系统配置或存储环境相关信息。'
- en: '**Filesystem navigation** : Bash provides commands to change directories, print
    the current directory, and find files and directories.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件系统导航**：Bash提供了更改目录、打印当前目录以及查找文件和目录的命令。'
- en: '**Help** : The **man** command, short for *manual* , provides the user with
    information and examples of how to execute commands.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**帮助**：**man**命令，简写为*manual*，为用户提供有关如何执行命令的信息和示例。'
- en: Bash scripting is one of the most important skills that I’ve learned in my pentesting
    career and that I use daily. When you’re developing applications, at some point,
    you’ll find the need to use another scripting language, such as Python. In most
    cases, anything you could want to do at the Terminal can be done in Bash, with
    Bash orchestrating the input and output and parsing the data from multiple tools.
    Bash is so deeply integrated with the Linux operating system that it makes sense
    to learn it before branching out into scripting languages such as Python or Ruby.
    Despite knowing multiple scripting and programming languages, Bash is the one
    that I use most often due to its tight integration with the shell and how easy
    it is to quickly get results with a one-line or even one-word command.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Bash脚本是我在渗透测试生涯中学到的最重要的技能之一，并且我每天都会使用。当你在开发应用程序时，某一时刻你可能会需要使用其他脚本语言，例如Python。在大多数情况下，你在终端中想做的任何事情，都可以通过Bash完成，Bash负责协调输入输出以及解析来自多个工具的数据。Bash与Linux操作系统紧密集成，因此在学习其他脚本语言如Python或Ruby之前，学习Bash是非常有意义的。尽管我知道多种脚本和编程语言，但由于Bash与Shell的紧密集成以及通过一行甚至一个单词的命令快速获得结果的便利性，Bash仍是我最常使用的工具。
- en: On any given day in my work as a pentester, I use Bash to parse data or automate
    chaining together multiple tools. When a customer gives me scoping data, I must
    frequently copy a list of scoped IP addresses or hostnames from a *Rules of Engagement*
    document, email, or Excel spreadsheet and paste it into a text file. Inevitably,
    there are stray characters in the data, or the data isn’t formatted cleanly for
    use as a list of scan targets. I can use Bash to clean up the file data and format
    it as I need for testing purposes with one simple line of code entered in my Terminal.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在我作为渗透测试员的工作中，每天我都会使用Bash来解析数据或自动化将多个工具串联在一起。当客户给我提供范围数据时，我通常需要从*参与规则*文档、电子邮件或Excel表格中复制一个范围内的IP地址或主机名列表，并粘贴到文本文件中。数据中难免会有多余的字符，或者数据的格式不适合用作扫描目标列表。我可以使用Bash清理文件数据，并通过在终端中输入一行简单的代码，将其格式化成我需要的样子以便测试。
- en: Pentesting tools accept data in various formats, and output scan results or
    data in common formats such as XML, JSON, or plain text. The plain text output
    may be formatted with multiple spaces, tabs, or a combination. I pipe the contents
    of a source file and pass it through the Bash pipeline to parse, clean, reformat,
    and sort the data. I may use a combination of Bash commands to perform these actions
    in between the output of one command and the input of another in an automation
    pipeline. Bash truly is an indispensable tool in a pentester’s toolbox.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 渗透测试工具接受各种格式的数据，并输出扫描结果或以常见格式如XML、JSON或纯文本显示的数据。纯文本输出可能会通过多个空格、制表符或两者的组合进行格式化。我通过管道将源文件的内容传递到Bash管道中，以解析、清理、重新格式化并排序数据。我可能会使用一组合适的Bash命令，在一个命令的输出和另一个命令的输入之间执行这些操作，形成自动化管道。Bash确实是渗透测试工具箱中不可或缺的工具。
- en: 'The following are some common uses for Bash scripting in my pentesting workflow:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我在渗透测试工作流中常用的一些Bash脚本应用：
- en: '**Automated network scanning** : I frequently process the output of Masscan,
    a fast TCP scanner, and feed it to Nmap for in-depth service detection and script
    scanning.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化网络扫描**：我经常处理Masscan（一个快速的TCP扫描器）的输出，并将其输入到Nmap中进行深入的服务检测和脚本扫描。'
- en: '**Password cracking** : I use a Bash script for a complex series of password
    cracking functions related to cracking Microsoft LM and NTLM hashes and formatting
    the output of Hashcat for input into a reporting tool.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密码破解**：我使用一个Bash脚本，执行一系列复杂的密码破解功能，涉及破解Microsoft LM和NTLM哈希值，并将Hashcat的输出格式化，以便输入到报告工具中。'
- en: '**Searching text** : Searching for IP addresses or other details in text.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本搜索**：在文本中搜索IP地址或其他细节。'
- en: '**Scoping automation** : I use subdomain enumeration tools with a Bash script
    to ensure the discovered subdomains are in the scope of the pentest rules of engagement.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**范围自动化**：我使用子域枚举工具和 Bash 脚本，确保发现的子域在渗透测试的规则范围内。'
- en: '**Formatting data** : I use Bash to parse and reformat the output of Nuclei
    scans to enumerate subdomains and web applications from TLS certificates and reformat
    the data for use in bypassing **content delivery networks** ( **CDNs** ) to bypass
    a **web application firewall** ( **WAF** ) and scan the target directly.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据格式化**：我使用 Bash 解析和重新格式化 Nuclei 扫描的输出，从 TLS 证书中枚举子域和 Web 应用，并重新格式化数据以用于绕过
    **内容分发网络**（**CDN**）绕过 **Web 应用防火墙**（**WAF**）并直接扫描目标。'
- en: '**Searching and sorting Nmap reports** : After scanning hundreds or even thousands
    of IP addresses, I use Bash to parse the **gnmap** files to create text files
    containing targets organized by TCP or UDP ports for use in more targeted scans.
    For example, all SMB servers or HTTP servers’ IP addresses are carved out and
    placed into files named **smb.txt** and **http.txt** .'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索和排序 Nmap 报告**：在扫描数百或甚至数千个 IP 地址后，我使用 Bash 解析 **gnmap** 文件，创建包含按 TCP 或 UDP
    端口组织的目标的文本文件，以便进行更有针对性的扫描。例如，所有的 SMB 服务器或 HTTP 服务器的 IP 地址会被提取并放入名为 **smb.txt**
    和 **http.txt** 的文件中。'
- en: '**Sorting data and deduplication** : Sort the unique IP addresses into a file
    for deduplication.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**排序数据和去重**：将唯一的 IP 地址按顺序放入一个文件中进行去重。'
- en: '**Data conversion** : Convert first and last names into various formats for
    password spraying. If I can get a list of employee names through **Open Source
    Intelligence** ( **OSINT** ), I’ll look at anything that may tip me off to how
    their Active Directory names are formatted, such as **f.last** or **first.last**
    , and use Bash to format the names appropriately.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据转换**：将姓名转换为多种格式用于密码喷洒。如果我能通过 **开源情报**（**OSINT**）获取员工姓名列表，我会查看任何可能提示他们的
    Active Directory 姓名格式的信息，例如 **f.last** 或 **first.last**，然后使用 Bash 按适当的格式转换姓名。'
- en: '**Data filtering** : Occasionally, I have to remove Terminal color codes from
    tool output log files for use in reporting because I forgot to include a command-line
    flag for no color, or the tool may not have this option. I don’t want to screenshot
    data for my customer’s report with it containing color codes that make the data
    confusing to read.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据过滤**：有时，我需要从工具的输出日志文件中删除终端颜色代码，以便用于报告，因为我忘记了包括不显示颜色的命令行标志，或者该工具可能没有此选项。我不想为客户的报告截图时包含颜色代码，这会使数据难以阅读。'
- en: '**Iterating over data** : I use Bash **for** and **while** loops to loop through
    a file and run a command on each line. A good example of this is when you need
    to use a tool that scans one host at a time with no option to process multiple
    targets.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据迭代**：我使用 Bash **for** 和 **while** 循环来遍历文件，并对每一行运行一个命令。一个典型的例子是当你需要使用一个每次只能扫描一个主机的工具，且该工具没有处理多个目标的选项时。'
- en: I’m confident that learning Bash scripting will make you more efficient with
    your time and more effective in your job. When you can automate time-intensive,
    boring tasks using Bash, it frees up your time to take on more important things.
    Wouldn’t it be great to have more time for learning or research instead of wasting
    it on manual tasks that can be automated with little effort?
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信学习 Bash 脚本会让你在工作中更加高效，节省时间。当你能用 Bash 自动化那些时间密集、无聊的任务时，你就可以腾出时间去做更重要的事。难道不是很棒吗？你可以有更多时间用于学习或研究，而不是浪费在那些可以用很少的努力就能自动化的手动任务上。
- en: Now that we have a basic understanding of Bash and why it’s useful in our pentesting
    endeavors, let’s explore how to set up a lab environment where you can safely
    learn and follow along with the exercises. In the next section, we’ll explore
    setting up your lab environment so that you can follow along with me.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对 Bash 有了基本了解，也明白了它在渗透测试中的用处，接下来我们来看看如何搭建一个实验室环境，在这里你可以安全地学习并跟随我的练习。下一节我们将介绍如何搭建实验室环境，以便你能跟着我一起学习。
- en: Lab setup
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实验室搭建
- en: Bash isn’t the only shell interpreter for Linux and Unix systems, but it is
    the most common. Other shells were influenced by Bash. You may also encounter
    Zsh on macOS and Kali Linux.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Bash 不是 Linux 和 Unix 系统上唯一的 Shell 解释器，但它是最常见的。其他 Shell 受到了 Bash 的影响。你可能还会在 macOS
    和 Kali Linux 上遇到 Zsh。
- en: You might be wondering why this book has chosen to focus on Bash, despite some
    operating systems switching to Zsh. While macOS and Kali have switched to Zsh
    for new user accounts, they still have Bash installed. Most code written for Bash
    will also work on Zsh with a few minor changes. You can include a **shebang**
    line in your shell scripts to ensure that the Bash interpreter runs your script
    on systems where multiple shells are installed. While performing security assessments,
    you’re very likely to encounter Linux servers where Bash is the default shell.
    It will be essential for a pentester to understand how to interact with Bash to
    exploit applications, escalate privileges, and move laterally.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会好奇，尽管一些操作系统已经转向 Zsh，本书为何仍专注于 Bash。虽然 macOS 和 Kali 在新用户账户中已经转为使用 Zsh，但它们依然安装有
    Bash。大多数为 Bash 编写的代码在 Zsh 上也能运行，只需做一些小的调整。你可以在脚本中加入 **shebang** 行，确保在多个 shell
    系统中使用 Bash 解释器来执行脚本。在进行安全评估时，你很可能会遇到 Bash 是默认 shell 的 Linux 服务器。对于渗透测试人员来说，理解如何与
    Bash 交互以利用应用程序、提升权限和横向移动是至关重要的。
- en: Fortunately, there are many ways you can access a Bash shell for free. This
    section will explore a variety of ways you can access a Bash shell in an ideal
    setting so that you can follow along and learn how to use Bash for pentesting.
    We will also explore vulnerable lab environments where you can safely practice
    using Bash and pentesting tools.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，你可以通过多种方式免费访问 Bash shell。本节将探讨在理想环境中访问 Bash shell 的各种方式，这样你可以跟随学习并掌握如何使用
    Bash 进行渗透测试。我们还将探索一些易受攻击的实验环境，你可以在这些环境中安全地练习使用 Bash 和渗透测试工具。
- en: Virtual machines are the preferred way to follow along with this book’s activities,
    as well as when performing pentesting. You may be tempted to install your pentesting
    tools and exploit code on the same system you use for business or personal activities.
    It’s easy to damage your system by installing software prerequisites for various
    tools. There’s always a risk of hacking tools containing malware and infecting
    the same system that you use from day to day to send emails or access the web.
    A virtual machine provides a convenient sandbox environment with everything you
    need to quickly refresh or replace a testing environment. I have chosen to use
    Kali Linux in all demonstrations. We want to avoid installing pentesting tools
    and exploit code in the same system we use daily for business or personal use.
    It’s best to use a clean testing environment to avoid creating software dependency
    issues for us. Kali makes it easy to install the needed software packages related
    to pentesting.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机是跟随本书活动以及进行渗透测试时的首选方式。你可能会想在同一系统上安装渗透测试工具和漏洞利用代码，来处理日常的业务或个人事务。但安装各种工具的软件先决条件很容易破坏你的系统。黑客工具中可能包含恶意软件，感染你日常用来发送邮件或上网的系统。虚拟机提供了一个便捷的沙盒环境，所有你需要的内容都能快速恢复或更换测试环境。我在所有示范中都选择使用
    Kali Linux。我们希望避免在日常工作或个人使用的同一系统中安装渗透测试工具和漏洞利用代码。最好使用一个干净的测试环境，以避免产生软件依赖问题。Kali
    让安装与渗透测试相关的软件包变得非常简单。
- en: Virtual machines
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 虚拟机
- en: Using a **virtual machine** is the preferred method. During a pentest, you’ll
    likely install a multitude of tools and exploit proof of concept code. At some
    point, you’ll also save sensitive data about your customer or target. A virtual
    machine provides a convenient container that you can snapshot and restore, or
    delete and replace easily after an assessment.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **虚拟机** 是首选方法。在进行渗透测试时，你很可能会安装大量的工具和漏洞利用概念验证代码。到某个阶段，你还可能会保存客户或目标的敏感数据。虚拟机提供了一个便捷的容器，你可以对其进行快照并恢复，或者在评估后轻松删除和替换。
- en: 'There are numerous free and paid virtualization solutions to fit any need:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多免费和付费的虚拟化解决方案，可以满足各种需求：
- en: Oracle VirtualBox is a free x86 virtualization hypervisor. It’s available for
    Windows, macOS (Intel chipset), and Linux. VirtualBox is user-friendly, making
    it a popular choice for beginners and professionals alike. It supports a wide
    range of guest operating systems and offers features such as snapshots, seamless
    mode, and shared folders.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle VirtualBox 是一款免费的 x86 虚拟化管理程序。它适用于 Windows、macOS（Intel 芯片组）和 Linux。VirtualBox
    用户友好，深受初学者和专业人士的喜爱。它支持广泛的客户操作系统，并提供如快照、无缝模式和共享文件夹等功能。
- en: VMware offers a free version of their virtualization software called VMware
    Workstation Player for non-commercial use. It’s compatible with Windows and Linux
    hosts. Workstation Player is easy to use and supports VMware’s VMDK virtual disk
    format, and it’s also compatible with virtual machines created by other VMware
    products.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VMware 提供了一款免费的虚拟化软件版本，名为 VMware Workstation Player，仅供非商业使用。它与 Windows 和 Linux
    主机兼容。Workstation Player 使用简便，支持 VMware 的 VMDK 虚拟磁盘格式，并且与其他 VMware 产品创建的虚拟机兼容。
- en: Microsoft Hyper-V is free and available on Windows 10 Pro, Enterprise, and Education
    editions. While it’s more commonly used in server environments, Hyper-V can also
    be a good option for desktop virtualization on Microsoft Windows hosts.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Hyper-V 在 Windows 10 Pro、Enterprise 和 Education 版本中是免费的。虽然它更常用于服务器环境，但
    Hyper-V 也可以作为 Microsoft Windows 主机上的桌面虚拟化的良好选择。
- en: Tip
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: For those on macOS with the Apple CPU, your virtualization options are UTM,
    Parallels, and VMWare Fusion. UTM is the only free option.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用 Apple CPU 的 macOS 用户，您的虚拟化选项有 UTM、Parallels 和 VMWare Fusion。UTM 是唯一免费的选项。
- en: Docker containers
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker 容器
- en: '**Docker containers** offer a lightweight option over virtual machines. Docker
    offers a runtime for Windows, Linux, and macOS. Containers are more lightweight
    and efficient on lower-end hardware than virtual machines because they use the
    host’s kernel, so they don’t have to virtualize hardware as traditional hypervisors
    do.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**Docker 容器**相比虚拟机提供了一个轻量级的选择。Docker 为 Windows、Linux 和 macOS 提供运行时。由于 Docker
    使用主机的内核，它不需要像传统虚拟化软件那样虚拟化硬件，因此在低端硬件上，容器比虚拟机更加轻量和高效。'
- en: Because Docker uses the host’s kernel, you’re limited to running containers
    while utilizing the same operating system as the host. Docker Desktop is an alternative
    that uses a virtual machine to run containers with a different operating system
    from the host.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Docker 使用主机的内核，您只能在与主机相同的操作系统上运行容器。Docker Desktop 是一个替代方案，它使用虚拟机运行与主机操作系统不同的容器。
- en: Based on my experience, there are some positive and negative points to consider
    about using Docker.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的经验，使用 Docker 有一些积极和消极的因素需要考虑。
- en: Docker is more lightweight and is a good alternative to traditional hypervisors
    when your hardware is less robust. The minimum hardware resources I would assign
    to a virtual machine running Kali Linux is 4 GB of RAM and 40 GB of disk space.
    You’re not always going to be using that 4 GB/40 GB. At the same time, you’re
    limited to those values unless you shut down the virtual machine, adjust the RAM,
    and extend the disk. A Docker container runs in a native process (excluding Docker
    Desktop), so it uses only as much memory and disk space as needed to run the container.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 更加轻量，是传统虚拟机的良好替代方案，尤其是在硬件不够强大的情况下。我为运行 Kali Linux 的虚拟机分配的最小硬件资源是 4 GB
    的内存和 40 GB 的磁盘空间。您并不总是会使用到这 4 GB/40 GB 的资源。同时，除非您关闭虚拟机、调整内存并扩展磁盘，否则您会被限制在这些数值范围内。Docker
    容器以本地进程运行（不包括 Docker Desktop），因此它只会使用运行容器所需的内存和磁盘空间。
- en: On a Linux host, you can attach a container directly to the host network and
    open and close ports as needed, provided you include specific command-line arguments.
    This allows you to dynamically open listening server ports on the host’s network
    adapter without stopping and starting the container. You can also attach a container
    to a USB or serial port to interface with hardware devices. I sometimes use this
    option when I need to run an old Python2 pentesting application that interfaces
    with a USB or serial device for radio frequency and hardware hacking.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 主机上，您可以将容器直接附加到主机网络，并根据需要打开和关闭端口，前提是您包含特定的命令行参数。这使您可以在不停止和启动容器的情况下，动态地打开主机网络适配器上的监听服务器端口。您还可以将容器附加到
    USB 或串行端口，以便与硬件设备进行交互。当我需要运行一个与 USB 或串行设备接口的旧 Python2 渗透测试应用程序，用于无线频率和硬件黑客攻击时，我有时会使用这个选项。
- en: When using Docker Desktop, NAT is used to connect container network ports to
    the host’s network, so the container must be stopped and restarted if you need
    to close or open additional ports. With Docker Desktop, it isn’t possible to attach
    a container to hardware devices. This can be aggravating when you’ve configured
    an application and its dependencies on a container and then lose your work and
    have to start over when you destroy the container and start a new instance, just
    to open another TCP port for a reverse listener or server application.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Docker Desktop 时，NAT 用于将容器网络端口连接到主机网络，因此，如果需要关闭或打开额外的端口，必须停止并重新启动容器。在 Docker
    Desktop 中，无法将容器附加到硬件设备。当你在容器中配置了应用程序及其依赖项，之后摧毁容器并启动一个新实例时，你可能会失去工作进度并需要重新开始，特别是当你只是想为反向监听器或服务器应用程序打开另一个
    TCP 端口时，这会让人感到沮丧。
- en: 'In summary, my preference is to use Docker only on a Linux host, and I use
    it for three specific pentesting use cases:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，我更倾向于仅在 Linux 主机上使用 Docker，并且我将其用于三种特定的渗透测试场景：
- en: It provides an easy way to isolate old Python 2 applications and avoid dependency
    hell. There are official Docker containers for all Python 2 and 3 versions.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了一种轻松隔离旧版 Python 2 应用程序并避免依赖地狱的方式。对于所有 Python 2 和 3 版本，Docker 都有官方容器。
- en: I use it to create and run applications that aren’t available through my package
    manager, and I want to avoid wasting time solving dependency issues. For example,
    a particular hacking tool is available through the Kali software repository, but
    not in Ubuntu. I can create a thin Kali container that uses only enough resources
    to run the contained application and use an alias in my **~/.bashrc** file to
    reduce a long **docker run** command to a single word I can enter in my Terminal.
    This is a much faster and more lightweight option than a heavy virtual machine
    when I just want to run a single application that can’t be run or would be difficult
    to run on my host system.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我用它来创建和运行通过我的包管理器无法获得的应用程序，并且我想避免浪费时间解决依赖问题。例如，某个黑客工具可以通过 Kali 软件库获得，但在 Ubuntu
    中无法使用。我可以创建一个简洁的 Kali 容器，只使用足够的资源来运行其中的应用程序，并在 **~/.bashrc** 文件中使用别名，将冗长的 **docker
    run** 命令缩短为我可以在终端中输入的单个单词。当我只想运行一个无法或难以在主机系统上运行的应用程序时，这是比沉重的虚拟机更快、更轻量的选择。
- en: When I want to practice exploiting or creating an exploit tool for a recently
    announced vulnerable web application, I can frequently find a Docker container
    that allows me to immediately start the vulnerable application without spending
    precious time installing and configuring it.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我想练习利用或创建针对最近公布的易受攻击的 web 应用程序的利用工具时，我通常可以找到一个 Docker 容器，让我立即启动这个易受攻击的应用程序，而无需花费宝贵的时间进行安装和配置。
- en: Docker containers are perfect for specific use cases. However, they’re less
    preferred than virtual machines. Next, we’ll explore using live USB systems as
    an alternative to virtual machines and containers.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 容器非常适合特定的使用场景。然而，它们不如虚拟机更受青睐。接下来，我们将探讨将 live USB 系统作为虚拟机和容器的替代方案。
- en: Live USB
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Live USB
- en: A **live USB** is an operating system image written to a USB disk in a way that
    makes it bootable. Live USB is a good choice to use when your computer doesn’t
    have the hardware resources to run a virtual machine. You can use imaging software
    to burn Linux ISO disks to USB and boot a Linux operating system. After you finish
    your work on Linux, you simply restart the computer and remove the USB drive to
    revert to the installed operating system. Some Linux distributions enable you
    to create persistent storage on the USB drive so that you don’t lose your changes
    when you reboot.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**Live USB** 是一种将操作系统镜像写入 USB 硬盘的方式，使其可以启动。Live USB 是当计算机没有足够的硬件资源运行虚拟机时的一个不错选择。你可以使用镜像软件将
    Linux ISO 镜像刻录到 USB 并启动 Linux 操作系统。在 Linux 上完成工作后，你只需重新启动计算机并拔掉 USB 驱动器，即可恢复到已安装的操作系统。某些
    Linux 发行版允许你在 USB 驱动器上创建持久存储，这样你在重启时就不会丢失更改。'
- en: 'The following are some general steps for running a Linux distribution from
    live USB:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是通过 live USB 运行 Linux 发行版的一些常规步骤：
- en: Download the ISO image. Some popular Linux distributions for pentesters include
    Kali, Parrot Security OS, and BlackArch.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 ISO 镜像。一些受渗透测试者喜爱的 Linux 发行版包括 Kali、Parrot Security OS 和 BlackArch。
- en: Create a live USB drive. Common tools for this purpose include Rufus, balenaEtcher,
    and the Linux **dd** command.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 live USB 驱动器。常用的工具包括 Rufus、balenaEtcher 和 Linux 的**dd**命令。
- en: Configure persistence (optional). This usually involves creating a separate
    partition on the USB drive and configuring the bootloader to recognize and use
    this partition. You can find the documented steps required to create a live USB
    Kali system at [https://www.kali.org/docs/usb/usb-persistence/](https://www.kali.org/docs/usb/usb-persistence/)
    .
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置持久性（可选）。这通常涉及在 USB 驱动器上创建一个独立的分区，并配置引导加载程序以识别并使用此分区。你可以在 [https://www.kali.org/docs/usb/usb-persistence/](https://www.kali.org/docs/usb/usb-persistence/)
    找到创建 live USB Kali 系统所需的文档步骤。
- en: 'There are some considerations and drawbacks to using live USB:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 live USB 时有一些考虑事项和缺点：
- en: USB storage is usually much slower than running directly from an SSD. If you
    use live USB, be sure to use the USB 3.0 or 3.1 standard for best performance.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: USB 存储通常比直接从 SSD 运行要慢。如果你使用 live USB，请确保使用 USB 3.0 或 3.1 标准，以获得最佳性能。
- en: Always download the ISO image from official sources and verify the checksum
    before trusting it.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终从官方来源下载 ISO 镜像，并在信任之前验证其校验和。
- en: If you’re planning to use it for production use, be sure to use encrypted persistence
    due to the risk of exposing the sensitive data on the drive to someone not authorized
    to have it.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你计划将其用于生产环境，请务必使用加密的持久性存储，因为存在将驱动器上的敏感数据暴露给未授权人员的风险。
- en: Now, let’s move on and discuss cloud-based systems.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续讨论基于云的系统。
- en: Cloud-based systems
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于云的系统
- en: Many cloud platforms create free tiers for access to Linux systems with enough
    resources for modest workloads. Cloud providers with free tiers include **Google
    Cloud Platform** ( **GCP** ), Microsoft Azure, and Amazon EC2. Be aware that the
    free tier may not provide enough RAM for production use and will not be suitable
    for running Kali Linux images.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 许多云平台为访问具有足够资源以应对适度工作负载的 Linux 系统创建了免费层。提供免费层的云服务商包括**Google Cloud Platform**（**GCP**）、Microsoft
    Azure 和 Amazon EC2。请注意，免费层可能不足以提供生产环境所需的 RAM，且不适合运行 Kali Linux 镜像。
- en: Kali Linux provides documentation and marketplace images for running on AWS,
    Digital Ocean, Linode, and Azure ( [https://www.kali.org/docs/cloud/](https://www.kali.org/docs/cloud/)
    ). I have experience with customers who have configured Kali in the cloud for
    cloud security assessments, or connected via VPN to their internal network infrastructure
    to facilitate internal network pentests. If the customer’s internal network is
    already connected to a cloud provider over VPN, it’s relatively easy for them
    to spin up a Kali image and create a firewall rule to allow SSH access from my
    IP address. Now that we’ve explored options for running a pentesting system with
    Bash, let’s discover a few vulnerable systems we can use to practice within our
    lab.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Kali Linux 提供了用于在 AWS、Digital Ocean、Linode 和 Azure 上运行的文档和市场镜像（[https://www.kali.org/docs/cloud/](https://www.kali.org/docs/cloud/)）。我有与客户合作的经验，他们在云中配置
    Kali 以进行云安全评估，或通过 VPN 连接到其内部网络基础设施以促进内部网络渗透测试。如果客户的内部网络已经通过 VPN 与云服务提供商连接，那么他们可以相对轻松地启动
    Kali 镜像并创建防火墙规则，允许从我的 IP 地址进行 SSH 访问。现在我们已经探讨了使用 Bash 运行渗透测试系统的选项，让我们来发现一些可以在实验室中使用的易受攻击的系统，以进行实践。
- en: Vulnerable lab targets
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 易受攻击的实验室目标
- en: While following along with some of the later chapters related to pentesting
    methodology, it will be beneficial for you to have access to vulnerable targets
    when running the commands and developing your Bash scripts. There are several
    great sources of vulnerable targets you can use for practice in your lab.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在后续章节中跟随一些与渗透测试方法论相关的内容时，能够访问易受攻击的目标会对你运行命令并开发 Bash 脚本有很大帮助。你可以从几个很好的来源获取易受攻击的目标，用于在你的实验室中进行实践。
- en: Metasploitable 2 is a vulnerable virtual machine provided by Rapid7. It was
    designed to showcase the capabilities of the Metasploit Framework. Metasploitable
    2 is also a good beginner-level challenge for developing your hacker methodology
    and learning Bash for pentesting. The project requires modest resources to run
    the virtual machine and includes documentation on the machine’s vulnerabilities
    ( *Metasploitable 2 | Metasploit* *Documentation* , [https://docs.rapid7.com/metasploit/metasploitable-2/](https://docs.rapid7.com/metasploit/metasploitable-2/)
    ).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploitable 2 是由 Rapid7 提供的一个易受攻击的虚拟机。它的设计目的是展示 Metasploit 框架的功能。Metasploitable
    2 也是一个很好的初学者挑战，帮助你发展黑客方法论，并学习用于渗透测试的 Bash。该项目需要适度的资源来运行虚拟机，并包含有关机器漏洞的文档（*Metasploitable
    2 | Metasploit* *Documentation* ，[https://docs.rapid7.com/metasploit/metasploitable-2/](https://docs.rapid7.com/metasploit/metasploitable-2/)）。
- en: Game of Active Directory (GOAD) is also an option.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 活跃目录游戏（GOAD）也是一个选项。
- en: '*“GOAD is a pentesting Active Directory LAB project. The purpose of this lab
    is to give pentesters a vulnerable Active Directory environment ready to use for
    them to practice usual attack techniques* *.”* ( *Game of Active Directory –*
    *Orange-CyberDefense* , [https://github.com/Orange-Cyberdefense/GOAD](https://github.com/Orange-Cyberdefense/GOAD)
    )'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*“GOAD 是一个渗透测试的 Active Directory 实验室项目。该实验室的目的是为渗透测试人员提供一个易受攻击的 Active Directory
    环境，供他们练习常见的攻击技术。”* (*Active Directory 的游戏 –* *Orange-CyberDefense*，[https://github.com/Orange-Cyberdefense/GOAD](https://github.com/Orange-Cyberdefense/GOAD))'
- en: Note that GOAD is free to use and uses free Microsoft Windows licenses that
    are activated for 180 days. GOAD is the best resource I’ve found for practicing
    hacking on internal Active Directory network environments.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，GOAD 是免费的，并且使用免费的微软 Windows 许可证，激活期限为 180 天。GOAD 是我找到的用于在内部 Active Directory
    网络环境中练习黑客技术的最佳资源。
- en: MayFly is the creator of GOAD. Their website contains plenty of articles on
    how to set GOAD up on different virtual machine hypervisors, as well as lab guides
    for using common pentesting tools to hack Active Directory.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: MayFly 是 GOAD 的创建者。他们的网站上有大量关于如何在不同虚拟机虚拟化平台上设置 GOAD 的文章，以及使用常见渗透测试工具进行 Active
    Directory 攻击的实验室指南。
- en: Tip
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: MayFly also published a comprehensive mind map for pentesting Active Directory.
    Despite having years of experience in hacking Active Directory, I still find times
    that I’m running out of things to test and will refer to this mind map when I
    get stuck or want to ensure that I’ve left no stone unturned. This mind map is
    also the number one resource I recommend to junior pentesters who are learning
    Active Directory hacking techniques and tools (you can find more details at [https://orange-cyberdefense.github.io/ocd-mindmaps/img/pentest_ad_dark_2022_11.svg](https://orange-cyberdefense.github.io/ocd-mindmaps/img/pentest_ad_dark_2022_11.svg)
    ).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: MayFly 还发布了一个全面的 Active Directory 渗透测试思维导图。尽管我在黑客攻击 Active Directory 上有多年的经验，但我仍然发现自己有时会用尽测试的项目，并且在遇到卡壳或者想确保自己没有遗漏任何地方时，我会参考这张思维导图。这张思维导图也是我推荐给初学渗透测试的年轻渗透测试员的首要资源，帮助他们学习
    Active Directory 黑客技术和工具（你可以在 [https://orange-cyberdefense.github.io/ocd-mindmaps/img/pentest_ad_dark_2022_11.svg](https://orange-cyberdefense.github.io/ocd-mindmaps/img/pentest_ad_dark_2022_11.svg)
    上查看更多细节）。
- en: If you wish to practice your Bash scripts, tools, and methodology on web applications,
    OWASP Juice Shop is a great resource.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望在 web 应用程序上练习 Bash 脚本、工具和方法，OWASP Juice Shop 是一个很好的资源。
- en: '*“OWASP Juice Shop is probably the most modern and sophisticated insecure web
    application! It can be used in security training, awareness demos, CTFs, and as
    a guinea pig for security tools! Juice Shop encompasses vulnerabilities from the
    entire OWASP Top Ten* ( [https://owasp.org/www-project-top-ten/](https://owasp.org/www-project-top-ten/)
    ) *, along with many other security flaws found in real-world applications!”*
    ( *OWASP Juice Shop – OWASP* *Foundation* , [https://owasp.org/www-project-juice-shop/](https://owasp.org/www-project-juice-shop/)
    )'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '*“OWASP Juice Shop 可能是最现代、最复杂的不安全 web 应用程序！它可以用于安全培训、意识演示、CTF 以及作为安全工具的试验品！Juice
    Shop 包含了整个 OWASP 前十漏洞（[https://owasp.org/www-project-top-ten/](https://owasp.org/www-project-top-ten/)）的漏洞，以及在现实世界应用程序中发现的许多其他安全缺陷！”*
    (*OWASP Juice Shop – OWASP* *基金会*，[https://owasp.org/www-project-juice-shop/](https://owasp.org/www-project-juice-shop/))'
- en: An older yet still very relevant vulnerable web application is Mutillidae II.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一个较老但仍然非常相关的脆弱 web 应用程序是 Mutillidae II。
- en: '*“OWASP Mutillidae II is a free, open source, deliberately vulnerable web application
    that provides a target for web-security training. With dozens of vulnerabilities
    and hints to help the user, this is an easy-to-use web hacking environment designed
    for labs, security enthusiasts, classrooms, CTF, and vulnerability assessment
    tool targets.”* ( *OWASP Mutillidae II – OWASP* *Foundation* [https://owasp.org/www-project-mutillidae-ii/](https://owasp.org/www-project-mutillidae-ii/)
    )'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '*“OWASP Mutillidae II 是一个免费的开源故意设计为脆弱的 web 应用程序，旨在为 web 安全培训提供目标。它包含了数十个漏洞，并提供了帮助用户的提示，是一个易于使用的
    web 黑客环境，专为实验室、安全爱好者、课堂、CTF 和漏洞评估工具目标设计。”* (*OWASP Mutillidae II – OWASP* *基金会*，[https://owasp.org/www-project-mutillidae-ii/](https://owasp.org/www-project-mutillidae-ii/))'
- en: One of the things I love about Mutillidae is that it embeds hints, tutorials,
    and video tutorials in the content. Mutillidae is a resource I used many years
    ago to learn web app testing when I was a junior pentester. The difference between
    Juice Shop and Mutillidae is that Juice Shop is a modern web application that
    uses JavaScript frameworks, whereas Mutillidae is a more traditional web application.
    While Juice Shop has a scoreboard and you can find third-party walkthroughs online,
    Mutillidae has a large amount of training text and video embedded in the application.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢 Mutillidae 的一件事是它在内容中嵌入了提示、教程和视频教程。Mutillidae 是我很多年前作为初级渗透测试员时学习 Web 应用测试的资源。Juice
    Shop 和 Mutillidae 之间的区别在于，Juice Shop 是一个现代化的 Web 应用，使用了 JavaScript 框架，而 Mutillidae
    是一个更传统的 Web 应用。虽然 Juice Shop 有一个排行榜，并且你可以在线找到第三方的教程，Mutillidae 在应用中嵌入了大量的培训文本和视频。
- en: The cybersecurity landscape is always changing, and new vulnerabilities are
    discovered regularly. A lab setup is an ideal place for research and development,
    allowing you to experiment with these vulnerabilities safely. It’s where you can
    contribute to the cybersecurity community by discovering new vulnerabilities or
    enhancing existing pentesting methodologies.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 网络安全领域始终在变化，新的漏洞定期被发现。实验室设置是进行研究和开发的理想场所，它让你能够安全地实验这些漏洞。这里是你通过发现新漏洞或改进现有渗透测试方法来为网络安全社区做出贡献的地方。
- en: Now that we’ve explored vulnerable targets for your pentesting lab, next up,
    we’ll talk about customizing your Bash shell so that it suits your needs and personal
    style.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探索了渗透测试实验室中的易受攻击目标，接下来，我们将讨论如何定制你的 Bash shell，以便它符合你的需求和个人风格。
- en: Configuring your hacker shell
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置你的黑客 shell
- en: If you’re following along using Kali Linux or macOS, note that your Terminal
    shell uses Zsh by default instead of Bash. Zsh has more features (such as better
    tab completion and theme support) but Bash is more widespread and standard. Bash
    has been around since the late 80s, making it a veteran in the shell world. It’s
    the default on most Linux distributions and macOS (up until Catalina, where Zsh
    took over). Bash’s longevity means it’s extremely stable and well-supported.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用 Kali Linux 或 macOS，请注意，默认情况下你的终端 shell 使用的是 Zsh，而不是 Bash。Zsh 有更多功能（例如更好的标签补全和主题支持），但
    Bash 更加广泛且标准。Bash 自 80 年代末期就已经存在，是 shell 领域的老将。它是大多数 Linux 发行版和 macOS（直到 Catalina
    版本，Zsh 才接管）的默认 shell。Bash 的长寿意味着它极为稳定并且得到良好的支持。
- en: Zsh, on the other hand, came a bit later. It’s known for its improvements over
    Bash, including better interactive use and more powerful scripting capabilities.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Zsh，相比之下，稍晚一些出现。它以比 Bash 更优秀的交互性和更强大的脚本功能而闻名。
- en: You can determine which shell is configured by entering the **echo $SHELL**
    command in your terminal. Almost all code shown in this book will work in both
    Bash and Zsh, except where noted. In my day-to-day pentesting activities, I rarely
    notice any difference. However, if you want to change your shell from Zsh to Bash,
    execute the **chsh -s /bin/bash** command in your Terminal, then log out and log
    in to see the change take place.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在终端中输入**echo $SHELL**命令来确定配置了哪个 shell。书中展示的几乎所有代码都可以在 Bash 和 Zsh 中运行，除非特别注明。在我的日常渗透测试活动中，我很少注意到任何区别。然而，如果你想将
    shell 从 Zsh 更改为 Bash，可以在终端中执行**chsh -s /bin/bash**命令，然后登出并重新登录，以查看更改生效。
- en: 'Bash configuration files can be found in the user home directory, **/home/username**
    . Because the filenames begin with a period character, they are commonly referred
    to as *dotfiles* . The following configuration files are used to configure the
    Bash shell:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Bash 配置文件可以在用户的主目录**/home/username** 中找到。由于文件名以点（.）开头，它们通常被称为*dotfiles*。以下配置文件用于配置
    Bash shell：
- en: '**~/.bash_profile** : This file is executed at the start of an interactive
    login and is used to initialize the user environment. Think of an interactive
    login as logging in via the command line via a text-based Terminal such as an
    SSH session.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**~/.bash_profile** : 此文件在交互式登录时执行，用于初始化用户环境。可以把交互式登录看作是通过命令行登录，例如通过 SSH 会话访问一个基于文本的终端。'
- en: '**~/.bashrc** : This file is used to configure the Terminal when you’ve logged
    in through the **graphical user interface** ( **GUI** ). This file contains settings
    including aliases, functions, prompt customizations, and environment variables.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**~/.bashrc** : 此文件用于在通过**图形用户界面**（**GUI**）登录时配置终端。此文件包含别名、函数、提示符定制和环境变量等设置。'
- en: '**~/.bash_logout** : This file is executed when your session ends. It’s used
    to perform tasks related to cleaning up the environment when you log out.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**~/.bash_logout**：当你的会话结束时会执行此文件。它用于执行与注销时清理环境相关的任务。'
- en: Tip
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: If you don’t understand the purpose of the tilde ( **~** ) character and forward
    slash preceding the dotfile name, the tilde character represents the user’s home
    directory. The **~/.bashrc** path is equivalent to **/home/username/.bashrc**
    . This concept will be covered in [*Chapter 2*](B22229_02.xhtml#_idTextAnchor034)
    .
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不理解波浪号（**~**）字符和点文件名前的斜杠的作用，波浪号字符代表用户的主目录。**~/.bashrc** 路径相当于 **/home/username/.bashrc**。这个概念将在
    [*第2章*](B22229_02.xhtml#_idTextAnchor034) 中讲解。
- en: The most common edits you’ll want to make will include adding aliases and functions
    and customizing your command prompt in your **~/.bashrc** file. Aliases are a
    great way to shorten long or complex commands to a single word. Functions are
    more complex. Think of functions as a short script that you can include in your
    shell configuration and call by name in your Terminal. Functions will be discussed
    later in [*Chapter 5*](B22229_05.xhtml#_idTextAnchor089) .
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你最常见的编辑包括添加别名和函数，以及自定义 **~/.bashrc** 文件中的命令提示符。别名是一个很好的方法，可以将长的或复杂的命令缩短为一个单词。函数更为复杂，可以把函数看作是一个短脚本，你可以将其包含在shell配置中，并通过名字在终端中调用。函数将在稍后的
    [*第5章*](B22229_05.xhtml#_idTextAnchor089) 中讲解。
- en: 'Here’s an example alias from my **~/.bashrc** file that I use to search for
    IP addresses in text:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我在**~/.bashrc**文件中用于搜索文本中IP地址的别名示例：
- en: '[PRE0]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can see how this command would be difficult to remember, so it helps to
    create an alias for any complex command you may need to use repeatedly.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到这个命令很难记住，所以创建一个别名对于任何你可能需要反复使用的复杂命令是很有帮助的。
- en: Important note
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: When you make edits to your Bash configuration files, you must either log out
    and log in or source the file to enact the change.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编辑Bash配置文件时，你必须退出并重新登录，或者获取文件以使更改生效。
- en: 'Enter the following command to source a file and enact changes immediately:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 输入以下命令以获取文件并立即生效：
- en: '[PRE1]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now that you understand the purpose of Bash’s dotfiles, let’s move on and take
    a look at how we can edit them to personalize our environment.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经理解了Bash点文件的作用，让我们继续了解如何编辑它们来个性化我们的环境。
- en: Customizing the Bash prompt
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义Bash提示符
- en: The prompt is where you enter commands in the Bash Terminal. Your prompt can
    be as simple or complex as you desire to meet your tastes and reflect your personality.
    Think of your prompt design choices like how a painter chooses their palate.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 提示符是你在Bash终端中输入命令的地方。你的提示符可以简单或复杂，取决于你的喜好和个性。可以把你的提示符设计选择想象成画家挑选调色板的方式。
- en: 'You can find your currently configured prompt by looking in your **~/.bashrc**
    file for a line that begins with **PS1** . A common Bash prompt would use a **PS1**
    value such as **export PS1="\u@\h \w\$ "** , and it would look like **username@hostname
    ~$** at the prompt. Let’s break this down. Here’s what each part does:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在 **~/.bashrc** 文件中查找以 **PS1** 开头的行来找到当前配置的提示符。一个常见的Bash提示符会使用类似 **export
    PS1="\u@\h \w\$ "** 的 **PS1** 值，它会在提示符处显示为 **username@hostname ~$**。让我们来拆解一下。以下是每个部分的作用：
- en: '**\u** will be replaced by the current username.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**\u** 会被当前用户名替换。'
- en: '**@** is a literal character and will appear after the username.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**@** 是一个字面字符，会出现在用户名之后。'
- en: '**\h** will be replaced by the hostname up to the first period.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**\h** 会被主机名替换，直到第一个句点为止。'
- en: '**\w** will be replaced by the current working directory, with **$HOME** abbreviated
    to a tilde character.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**\w** 会被当前工作目录替换，**$HOME** 会被缩写为波浪号字符。'
- en: '**\$** displays a **$** character for a regular user, or **#** for the root
    user.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**\$** 显示普通用户的 **$** 字符，或显示根用户的 **#** 字符。'
- en: Once you edit your **PS1** prompt, be sure to source the file to see the changes
    take effect.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你编辑了 **PS1** 提示符，记得获取文件，以便看到更改生效。
- en: You can also get really fancy with your prompt. I’ve been known to insert the
    **$(ip a show eth0 | grep -m 1 inet | tr -s ' ' | cut -d ' ' -f 3)** string in
    the middle of my **PS1** prompt to show my IP address for capturing in my logs
    or report screenshots for the customer to correlate my activity with their **Security
    Information and Event Management** ( **SIEM** ) alerts. See [https://bash-prompt-generator.org/](https://bash-prompt-generator.org/)
    for a graphical Bash prompt generator, or the official Bash manual for all options.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以非常炫酷地定制你的提示符。我曾经在我的**PS1**提示符中插入**$(ip a show eth0 | grep -m 1 inet | tr
    -s ' ' | cut -d ' ' -f 3)**字符串，用来显示我的 IP 地址，以便在我的日志或报告截图中捕捉，并帮助客户将我的活动与他们的**安全信息和事件管理**（**SIEM**）警报关联起来。请参见[https://bash-prompt-generator.org/](https://bash-prompt-generator.org/)
    了解图形化的 Bash 提示符生成器，或者查阅官方 Bash 手册获取所有选项。
- en: Customizing your Bash environment is about making your Terminal work for you.
    It’s a process of trial and improvement, finding what makes you more productive,
    and what brings a bit of joy into your command-line sessions. Start small, experiment,
    and see how a few changes can make a big difference in your daily tasks.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 定制 Bash 环境就是让你的终端为你工作。这是一个不断试验和改进的过程，找出什么能让你更高效，什么能为你的命令行会话带来一点乐趣。从小处着手，实验一下，看看一些改变能如何大大改善你每天的任务。
- en: Setting up essential pentesting tools
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置基本的渗透测试工具
- en: In this section, we’ll go over setting up our pentesting environment by updating
    system software packages and installing the tools required to follow along. Most
    of the tools needed will already be installed in Kali, so we’ll only need to install
    a few more software packages.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将介绍通过更新系统软件包并安装必要的工具来设置我们的渗透测试环境。大多数所需的工具已经预装在 Kali 中，所以我们只需要再安装几个软件包。
- en: Update the package manager
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新包管理器
- en: Your first step when using a new Linux installation should be updating packages.
    As stated earlier, I’ll be using Kali Linux in all demonstrations. Kali is based
    on the Debian Linux distribution, which uses the **Advanced Package Tool** ( **APT**
    ) package manager. At its core, **apt** streamlines software management. It automates
    the process of retrieving, configuring, and installing software packages from
    predefined repositories. This automation not only saves time but also ensures
    that software dependencies are resolved without manual intervention.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新 Linux 安装时的第一步应该是更新软件包。正如前面所说，我将在所有演示中使用 Kali Linux。Kali 基于 Debian Linux
    发行版，使用**高级包管理工具**（**APT**）包管理器。在其核心，**apt**简化了软件管理。它自动化了从预定义的仓库中获取、配置和安装软件包的过程。这个自动化不仅节省了时间，还确保在没有人工干预的情况下解决软件依赖关系。
- en: 'Running **sudo apt update** refreshes the local database of available packages
    and their versions, ensuring you have the latest information from the repositories.
    This step is crucial before installing new software or updating existing packages
    to ensure you’re getting the latest versions. If you’re using Kali, Ubuntu, or
    Debian Linux, the following commands to update and upgrade will work as expected
    because they all use the **apt** package manager:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 运行**sudo apt update**可以刷新本地可用软件包及其版本的数据库，确保你从仓库获取到最新的信息。在安装新软件或更新现有软件包之前，这一步是至关重要的，确保你得到的是最新版本。如果你使用的是
    Kali、Ubuntu 或 Debian Linux，以下的更新和升级命令将按预期工作，因为它们都使用**apt**包管理器：
- en: '[PRE2]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding command, we use **sudo** to elevate privileges and **apt**
    to update the list of available packages. The double ampersand symbols ( **&&**
    ) operate like a logical AND operator; the second command to upgrade packages
    without prompting ( **-y** ) is only run if the first command results in success.
    Finally, we reboot to ensure that all services and kernel updates take effect.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的命令中，我们使用**sudo**提升权限，使用**apt**更新可用软件包的列表。双重与符号（**&&**）像逻辑与操作符一样工作；第二个命令用于在不提示的情况下升级软件包（**-y**），仅在第一个命令成功执行时才会运行。最后，我们重启系统以确保所有服务和内核更新生效。
- en: Install ProjectDiscovery tools
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 ProjectDiscovery 工具
- en: '**ProjectDiscovery** offers some great tools I recommend for pentesting (PDTM
    – ProjectDiscovery, [https://github.com/projectdiscovery/pdtm](https://github.com/projectdiscovery/pdtm)
    ). Before we can install them, we must install the Go programming language runtime
    and libraries. Follow these steps to do so:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**ProjectDiscovery**提供了一些我推荐用于渗透测试的工具（PDTM – ProjectDiscovery，[https://github.com/projectdiscovery/pdtm](https://github.com/projectdiscovery/pdtm)）。在安装它们之前，我们必须安装
    Go 编程语言运行时和库。按照以下步骤操作：'
- en: In your web browser, navigate to [https://go.dev/dl/](https://go.dev/dl/) .
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中，导航到[https://go.dev/dl/](https://go.dev/dl/)。
- en: Download the correct package for your Linux distribution. Be sure to look closely
    at the processor architecture. Typically, this would be a **Kind** value of **archive**
    , an **OS** value of **Linux** , and an **Arch** value of either **x86-64** or
    **ARM64** .
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载适用于你Linux发行版的正确包。确保仔细查看处理器架构。通常，这将是一个**Kind**值为**archive**，**OS**值为**Linux**，**Arch**值为**x86-64**或**ARM64**。
- en: 'Extract the downloaded archive. Be sure to change the package version so that
    it matches what you downloaded:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压下载的压缩包。确保更改包版本，以使其与所下载的版本匹配：
- en: '[PRE3]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add **/usr/local/go/bin** to the **PATH** environment variable in your **~/.bashrc**
    file. The **PATH** environment variable tells your Bash shell where to find the
    full path to an executable program when you don’t include the path before your
    command. The **echo** command prints the text inside quotes to the Terminal and
    the greater-than symbol ( **>** ) redirects the output to a file. Notice that
    we use two greater-than symbols here to redirect the output. If we were to use
    only one, it would overwrite the file contents. We want to append to the file
    by using two:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**/usr/local/go/bin**添加到你**~/.bashrc**文件中的**PATH**环境变量中。**PATH**环境变量告诉你的Bash
    shell在你没有在命令前加上路径时在哪里找到可执行程序的完整路径。**echo**命令会将引号内的文本打印到终端，且大于号（**>**）将输出重定向到文件。请注意，我们在这里使用了两个大于号来重定向输出。如果只使用一个，它将覆盖文件内容。我们希望通过使用两个符号将内容追加到文件中：
- en: '[PRE4]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Source the file to enact your changes:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取文件以执行你的更改：
- en: '[PRE5]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Check to ensure that **/usr/local/go/bin** has been appended to your **PATH**
    (look after the last colon character):'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查确保**/usr/local/go/bin**已被添加到你的**PATH**中（请查看最后一个冒号字符之后的部分）：
- en: '[PRE6]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Verify that Go has been installed properly and can be found in your **PATH**
    . Your version and architecture may vary:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证Go是否已正确安装，并且可以在你的**PATH**中找到。你的版本和架构可能有所不同：
- en: '[PRE7]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Install **pdtm** from ProjectDiscovery. This is the tool that installs and
    manages updates for all of ProjectDiscovery ’s tools:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从ProjectDiscovery安装**pdtm**。这是一个安装和管理所有ProjectDiscovery工具更新的工具：
- en: '[PRE8]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add **pdtm** to your path:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**pdtm**添加到你的路径中：
- en: '[PRE9]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Run the following **pdtm** command to install all tools:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下**pdtm**命令以安装所有工具：
- en: '[PRE10]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Install **libpcap** for **naabu** :'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为**naabu**安装**libpcap**：
- en: '[PRE11]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: That wraps up installing all of the needed ProjectDiscovery tools.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了安装所有必需的ProjectDiscovery工具。
- en: Install NetExec
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装NetExec
- en: '*NetExec is a network service exploitation tool that helps automate assessing
    the security of large networks* ( *NetExec* *wiki* , [https://www.netexec.wiki/](https://www.netexec.wiki/)
    ).'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '*NetExec是一个网络服务利用工具，帮助自动化评估大型网络的安全性*（*NetExec* *wiki*，[https://www.netexec.wiki/](https://www.netexec.wiki/)）。'
- en: In my opinion, NetExec is one of the most useful tools for internal network
    pentesting. It supports most of the network protocols needed during internal network
    pentesting, plus Microsoft Active Directory testing.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，NetExec是内部网络渗透测试中最有用的工具之一。它支持大多数在内部网络渗透测试中需要的网络协议，还支持Microsoft Active Directory测试。
- en: 'There are far too many features to list here. Some of the things I use NetExec
    for include the following:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列举的功能太多，无法一一列出。我使用NetExec的一些功能包括以下内容：
- en: Scanning for vulnerabilities; NetExec includes some useful modules to test for
    common vulnerabilities
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扫描漏洞；NetExec包括一些有用的模块来测试常见漏洞
- en: Brute-force attacks on authentication to test for weak passwords
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对身份验证进行暴力破解攻击，以测试弱密码
- en: Spraying a password or password hash against servers to find where the supplied
    credentials have local administrator access
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向服务器喷射密码或密码哈希，以查找提供的凭据在哪些地方具有本地管理员访问权限
- en: Command execution
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令执行
- en: Gathering credentials
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集凭据
- en: Enumerating SMB shares for read/write access
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 枚举SMB共享的读/写访问权限
- en: 'Enter the following command to install NetExec:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 输入以下命令来安装NetExec：
- en: '[PRE12]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: That wraps up the process of installing the most common pentesting tools that
    are not installed by default.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了安装最常用的渗透测试工具的过程，这些工具默认情况下未安装。
- en: Summary
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you were introduced to the indispensable world of Bash shell
    scripting, a cornerstone skill for anyone aspiring to excel in pentesting. This
    chapter began by demystifying what Bash is and underscoring its significance in
    cybersecurity tasks. It wasn’t just about memorizing commands; it was about leveraging
    Bash to automate repetitive tasks, manipulate data, and conduct security assessments
    with efficiency. The journey continued with guidance on selecting the appropriate
    operating system that supports Bash, setting the stage for successful scripting
    endeavors. Then, we rolled up our sleeves to configure our hacker shell, customizing
    its appearance and behavior to reflect personal tastes and preferences. This customization
    wasn’t just for aesthetics; it was about creating a functional and efficient working
    environment. Finally, this chapter introduced essential pentesting tools, walking
    you through their installation and basic usage. At this point, you're equipped
    with a well-prepared environment and a foundational understanding of how Bash
    scripting can significantly enhance your pentesting capabilities.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经了解了不可或缺的 Bash Shell 脚本世界，这是任何有志于在渗透测试中脱颖而出的人必备的核心技能。本章开始时，我们解开了 Bash
    的神秘面纱，并强调了它在网络安全任务中的重要性。这不仅仅是记住命令，更是利用 Bash 来自动化重复任务、处理数据，并高效地进行安全评估。接下来的内容提供了如何选择支持
    Bash 的操作系统的指导，为成功的脚本编写奠定了基础。然后，我们卷起袖子，配置了我们的黑客 Shell，定制了其外观和行为，以反映个人的品味和偏好。这种定制不仅仅是为了美观，更是为了创建一个功能强大且高效的工作环境。最后，本章介绍了必备的渗透测试工具，带领您完成了它们的安装和基础使用。到此为止，您已经具备了一个准备充分的环境，并对
    Bash 脚本如何显著提升您的渗透测试能力有了基础的理解。
- en: The next chapter will cover techniques for working with files and directories.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将介绍处理文件和目录的技巧。
