- en: Metasploit Extended
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metasploit扩展
- en: This chapter will cover the extended usage and hardcore post-exploitation features
    of Metasploit. Throughout this chapter, we will focus on out-of-the-box approaches
    for post-exploitation, and will also cover tedious tasks such as privilege escalation,
    getting passwords in clear text, finding juicy information, and much more.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖Metasploit的扩展用法和核心后渗透功能。在本章中，我们将专注于后渗透的开箱即用方法，并将涵盖繁琐的任务，如提权、获取明文密码、查找有价值的信息等。
- en: 'During this chapter, we will cover and understand the following key aspects:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖和理解以下关键方面：
- en: Using advanced post-exploitation modules
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用高级后渗透模块
- en: Speeding up penetration testing using automated scripts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自动化脚本加速渗透测试
- en: Privilege escalation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提权
- en: Finding passwords from the memory
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从内存中找到密码
- en: Let's now jump into the post-exploitation features of Metasploit and start with
    the basics in the next section.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们进入Metasploit的后渗透功能，并从下一节开始学习基础知识。
- en: Basics of post-exploitation with Metasploit
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metasploit的后渗透基础
- en: We have already covered many post-exploitation modules and scripts in the previous
    chapters. In this chapter, we will focus on the features that we did not include
    previously. So, let's get started with the most basic commands used in post-exploitation
    in the next section.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们已经涵盖了许多后渗透模块和脚本。在本章中，我们将专注于之前未包括的功能。所以，让我们从下一节中开始使用后渗透中最基本的命令。
- en: Basic post-exploitation commands
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本后渗透命令
- en: Core Meterpreter commands provide the essential core post-exploitation features
    that are available on most of the exploited systems through a Meterpreter. Let's
    get started with some of the most basic commands that aid post-exploitation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 核心Meterpreter命令提供了大多数被利用系统上可用的基本后渗透功能。让我们从一些最基本的命令开始，这些命令有助于后渗透。
- en: The help menu
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 帮助菜单
- en: 'We can always refer to the help menu to list all the various commands that
    are usable on the target by issuing `help` or `?`, as shown in the following screenshot:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以随时参考帮助菜单，通过发出`help`或`?`命令来列出在目标上可用的各种命令，如下面的截图所示：
- en: '![](img/a4fcbe96-4d90-4a61-a0fc-8dfe18839536.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a4fcbe96-4d90-4a61-a0fc-8dfe18839536.png)'
- en: The background command
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后台命令
- en: 'While carrying out post-exploitation, we may run into a situation where we
    need to perform additional tasks, such as testing for a different exploit, or
    running a privilege escalation exploit. In such cases, we need to put our current
    Meterpreter session in the background. We can do this by issuing the `background`
    command, as shown in the following screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行后渗透时，我们可能会遇到需要执行其他任务的情况，比如测试不同的漏洞利用，或者运行提权漏洞利用。在这种情况下，我们需要将当前的Meterpreter会话放到后台。我们可以通过发出`background`命令来做到这一点，如下面的截图所示：
- en: '![](img/70a3bdcc-dd91-4991-ac83-8b33abcfca26.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/70a3bdcc-dd91-4991-ac83-8b33abcfca26.png)'
- en: We can see in the preceding screenshot that we successfully managed to put our
    session in the background and re-interacted with the session using the `sessions
    -i` command followed by the session identifier, which is `1` in the case of the
    preceding screenshot.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到在前面的截图中，我们成功地将会话放到后台，并使用`sessions -i`命令重新与会话交互，后面跟着会话标识符，即前面截图中的`1`。
- en: Reading from a channel
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从通道中读取
- en: 'Meterpreter interacts with the target through numerous channels. Carrying out
    post-exploitation, we may be required to list and read from a particular channel.
    We can do this by issuing the `channel` command as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Meterpreter通过多个通道与目标进行交互。在进行后渗透时，我们可能需要列出并从特定通道读取。我们可以通过发出`channel`命令来做到这一点，如下所示：
- en: '![](img/0a766419-c1ba-4172-9a22-9994b9755d42.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a766419-c1ba-4172-9a22-9994b9755d42.png)'
- en: In the preceding screenshot, we listed all the available channels by issuing
    the `channel -l` command. We can read a channel by issuing `channel -r [channel-id]`.
    The channel subsystem allows for reading, listing, and writing through all the
    logical channels that exist as communication sub-channels through the Meterpreter
    shell.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们通过发出`channel -l`命令列出了所有可用的通道。我们可以通过发出`channel -r [channel-id]`来读取一个通道。通道子系统允许通过Meterpreter
    shell作为通信子通道存在的所有逻辑通道进行读取、列出和写入。
- en: File operation commands
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件操作命令
- en: 'We covered some of the file operations in the previous chapters. Let''s revise
    a few of the file operation commands like `pwd`. Using the `pwd` command, we can
    view the present directory as shown in the following screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在之前的章节中涵盖了一些文件操作。让我们复习一下一些文件操作命令，比如`pwd`。使用`pwd`命令，我们可以查看当前目录，如下面的截图所示：
- en: '![](img/d0b489dc-ff22-4b63-b7a1-cceb4b4c5910.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d0b489dc-ff22-4b63-b7a1-cceb4b4c5910.png)'
- en: 'Additionally, we can browse the target filesystem using the `cd` command and
    create directories with the `mkdir` command, as shown in the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以使用`cd`命令浏览目标文件系统，并使用`mkdir`命令创建目录，如下面的截图所示：
- en: '![](img/a28c5146-202d-4a15-adef-7ff2ebfd597a.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a28c5146-202d-4a15-adef-7ff2ebfd597a.png)'
- en: 'The Meterpreter shell allows us to upload files to the target system using
    the `upload` command. Let''s see how it works:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Meterpreter shell允许我们使用`upload`命令将文件上传到目标系统。让我们看看它是如何工作的：
- en: '![](img/443076ec-30ca-42f0-8a2a-ed7aa7f07248.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/443076ec-30ca-42f0-8a2a-ed7aa7f07248.png)'
- en: 'We can edit any file on the target by issuing the `edit` command followed by
    the filename, as shown:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过发出`edit`命令后跟文件名来编辑目标上的任何文件，如下所示：
- en: '![](img/c2d0a2ad-c18f-4098-97ec-ee54ff6c4fe2.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c2d0a2ad-c18f-4098-97ec-ee54ff6c4fe2.png)'
- en: 'Let''s now view the content of the file by issuing the `cat` command as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过发出`cat`命令来查看文件的内容：
- en: '![](img/dd284c93-8114-46b9-9b30-ded5be62b877.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd284c93-8114-46b9-9b30-ded5be62b877.png)'
- en: 'We can use the `ls` command to list all files in the directory as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`ls`命令列出目录中的所有文件，如下所示：
- en: '![](img/81cd0b2e-60a6-44e4-b33b-9b6bcd61b0ba.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81cd0b2e-60a6-44e4-b33b-9b6bcd61b0ba.png)'
- en: 'We can use the `rmdir` command to remove a particular directory from the target
    and the `rm` command to remove a file as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`rmdir`命令从目标中删除特定目录，使用`rm`命令删除文件，如下所示：
- en: '![](img/654088e5-a2a3-4fbb-bafa-6f279cdefe6b.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/654088e5-a2a3-4fbb-bafa-6f279cdefe6b.png)'
- en: 'Also, we can download files from the target using the `download` command as
    follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以使用`download`命令从目标下载文件，如下所示：
- en: '![](img/a00d089d-188d-469d-b70a-029fe54f30f8.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a00d089d-188d-469d-b70a-029fe54f30f8.png)'
- en: Desktop commands
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 桌面命令
- en: 'Metasploit features desktop commands such as enumerating desktops, taking pictures
    with a web camera, recording from the mic, streaming cams, and much more. Let''s
    look at these features:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit具有枚举桌面、使用网络摄像头拍照、录制麦克风声音、流式传输摄像头等桌面命令。让我们看看这些功能：
- en: '![](img/6bf5748e-803b-4795-81d3-d79def888efc.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6bf5748e-803b-4795-81d3-d79def888efc.png)'
- en: Information associated with the target desktop can be gained using `enumdesktops`
    and `getdesktop`. The `enumdesktop` command lists all the available desktops,
    whereas `getdesktop` lists information related to the current desktop.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`enumdesktops`和`getdesktop`可以获取与目标桌面相关的信息。`enumdesktop`命令列出所有可用的桌面，而`getdesktop`列出与当前桌面相关的信息。
- en: Screenshots and camera enumeration
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 屏幕截图和摄像头枚举
- en: 'It is mandatory for the tester to get prior permissions before taking screenshots,
    taking webcam shots, running a live stream, or keylogging. Nevertheless, we can
    view the target''s desktop by taking a snapshot using the `snapshot` command,
    as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行屏幕截图、摄像头拍摄、运行实时流或记录按键之前，测试人员必须事先获得许可。然而，我们可以使用`snapshot`命令拍摄目标的桌面快照，如下所示：
- en: '![](img/e05c7cf8-bc4c-4bc9-8024-9a8ea9dfd1d9.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e05c7cf8-bc4c-4bc9-8024-9a8ea9dfd1d9.png)'
- en: 'Viewing the saved JPEG file, we have this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 查看保存的JPEG文件，我们有：
- en: '![](img/32e72209-18bb-486a-ad64-9ec15725c418.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/32e72209-18bb-486a-ad64-9ec15725c418.png)'
- en: 'Let''s see if we can enumerate the cameras and see who is working on the system:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看是否可以枚举摄像头并查看谁正在系统上工作：
- en: '![](img/d6899588-d2a7-411f-bb02-2cf25f3e6119.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d6899588-d2a7-411f-bb02-2cf25f3e6119.png)'
- en: 'Using the `webcam_list` command, we can find out the number of cameras associated
    with the target. Let''s stream the cameras using the `webcam_stream` command as
    follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`webcam_list`命令，我们可以找出与目标关联的摄像头数量。让我们使用以下`webcam_stream`命令来流式传输摄像头：
- en: '![](img/ab6b0917-a7e9-4610-88c1-53a37ee1c199.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab6b0917-a7e9-4610-88c1-53a37ee1c199.png)'
- en: 'Issuing the preceding command opens a web camera stream in the browser, as
    shown in the following screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 发出上述命令会在浏览器中打开一个网络摄像头流，如下截图所示：
- en: '![](img/e1e6e105-6734-4e13-a83b-6104cb44f406.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e1e6e105-6734-4e13-a83b-6104cb44f406.png)'
- en: 'We can also opt for a snapshot instead of streaming, by issuing the `webcam_snap`
    command as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以选择快照而不是流式传输，通过发出以下`webcam_snap`命令：
- en: '![](img/c5600898-9c41-403f-9a54-a7909966cd73.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5600898-9c41-403f-9a54-a7909966cd73.png)'
- en: 'Sometimes, we are required to listen to the environment for surveillance purposes.
    To achieve that, we can use the `record_mic` command, as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们需要监听环境进行监视。为了实现这一点，我们可以使用`record_mic`命令，如下所示：
- en: '![](img/bc725fed-cd3a-44b3-a574-0cff3a635cb6.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bc725fed-cd3a-44b3-a574-0cff3a635cb6.png)'
- en: We can set the duration of capture with the `record_mic` command by passing
    the number of seconds with the `-d` switch.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`record_mic`命令设置捕获持续时间，通过使用`-d`开关传递秒数。
- en: 'Another great feature is finding the idle time to figure out the usage timelines,
    and attacking the system when the user on the target machine is less active. We
    can achieve this by using the `idletime` command, as shown in the following screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个很棒的功能是查找空闲时间以了解使用时间线，并在目标机器上的用户较不活跃时攻击系统。我们可以使用`idletime`命令来实现这一点，如下截图所示：
- en: '![](img/ffddb760-3c26-49c9-9ec9-2dac7cfad893.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ffddb760-3c26-49c9-9ec9-2dac7cfad893.png)'
- en: 'Other interesting information that can be gained from the target is **keylogs**.
    We can dump keylogs by starting the keyboard sniffer module by issuing the `keyscan_start`
    command, as shown here:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 从目标获取的其他有趣信息是**按键记录**。我们可以通过发出`keyscan_start`命令启动键盘嗅探模块来转储按键记录，如下所示：
- en: '![](img/6f2c1124-70ea-42e0-8eb9-8b4d3c307af6.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6f2c1124-70ea-42e0-8eb9-8b4d3c307af6.png)'
- en: 'After a few seconds, we can dump the keylogs using the `keyscan_dump` command,
    as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，我们可以使用`keyscan_dump`命令转储按键记录，如下所示：
- en: '![](img/41fe6e25-60e9-415f-87f1-40c840d2701f.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/41fe6e25-60e9-415f-87f1-40c840d2701f.png)'
- en: Throughout this section, we've seen many commands. Let's now move on to the
    advanced section for post-exploitation.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经看到了许多命令。现在让我们继续进行后期利用的高级部分。
- en: Advanced post-exploitation with Metasploit
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit进行高级后期利用
- en: In this section, we will use the information gathered from primary commands
    to achieve further success and access the levels of the target.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将利用从主要命令中收集的信息来取得进一步的成功并访问目标的级别。
- en: Obtaining system privileges
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取系统权限
- en: 'If the application we broke into is running with administrator privileges,
    it is effortless to gain system-level privileges by issuing the `getsystem` command,
    as shown in the following screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们侵入的应用程序以管理员权限运行，通过发出`getsystem`命令轻松获得系统级权限，如下截图所示：
- en: '![](img/ebf35d62-73ba-45f8-b7ea-9c4b5f36a044.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ebf35d62-73ba-45f8-b7ea-9c4b5f36a044.png)'
- en: The system-level privileges provide the highest level of rights, with the ability
    to perform almost anything on to the target system.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 系统级权限提供了最高级别的权限，能够在目标系统上执行几乎任何操作。
- en: The `getsystem` module is not as reliable on the newer version of Windows. It
    is advisable to try local privilege escalation methods and modules to elevate.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在较新版本的Windows上，`getsystem`模块并不是很可靠。建议尝试本地权限提升方法和模块来提升权限。
- en: Changing access, modification, and creation time with timestomp
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用timestomp更改访问、修改和创建时间
- en: 'Metasploit is used everywhere, from private organizations to law enforcement.
    Therefore, while carrying out covert operations, it is highly recommended to change
    the time of the files accessed, modified, or created. We can alter the time and
    date of files using the `timestomp` command. In the previous section, we created
    a file called `creditcard.txt`. Let''s change its time properties with the `timestomp`
    command, as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit被广泛应用，从私人组织到执法部门。因此，在进行隐秘行动时，强烈建议更改文件的访问、修改或创建时间。我们可以使用`timestomp`命令来更改文件的时间和日期。在前面的部分中，我们创建了一个名为`creditcard.txt`的文件。让我们使用`timestomp`命令更改其时间属性，如下所示：
- en: '![](img/7e4b3834-1676-4654-a95c-f6d41ee9cc20.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/7e4b3834-1676-4654-a95c-f6d41ee9cc20.png)
- en: 'We can see the access time is `2016-06-19 23:23:15`. We can use the `-z` switch
    to modify it to `1999-11-26 15:15:25`, as shown in the preceding screenshot. Let''s
    see if the file was modified correctly or not:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到访问时间是`2016-06-19 23:23:15`。我们可以使用`-z`开关将其修改为`1999-11-26 15:15:25`，如前面的截图所示。让我们看看文件是否被正确修改了：
- en: '![](img/f5dc327e-4a6a-4b0c-ab46-59ac669d06b5.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/f5dc327e-4a6a-4b0c-ab46-59ac669d06b5.png)
- en: 'We successfully managed to change the timestamp of the `creditcard.txt` file.
    We can also blank all the time details for a file using the `-b` switch, as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功地改变了`creditcard.txt`文件的时间戳。我们还可以使用`-b`开关来清除文件的所有时间细节，如下所示：
- en: '![](img/e9894411-9156-4a83-ad23-617ff91aa4c6.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/e9894411-9156-4a83-ad23-617ff91aa4c6.png)
- en: By using `timestomp,` we can individually change modified, accessed, and creation
    times as well.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`timestomp`，我们可以单独更改修改、访问和创建时间。
- en: Additional post-exploitation modules
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他后渗透模块
- en: Metasploit offers 250 plus post-exploitation modules; however, we will only
    cover a few interesting ones, and will leave the rest for you to cover as an exercise.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit提供了250多个后渗透模块；但是，我们只会介绍一些有趣的模块，其余的留给你作为练习。
- en: Gathering wireless SSIDs with Metasploit
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit收集无线SSID
- en: 'Wireless networks around the target system can be discovered efficiently using
    the `wlan_bss_list` module. The module allows us to fingerprint the location and
    other necessary information about the Wi-Fi networks around the target, as shown
    in the following screenshot:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`wlan_bss_list`模块有效地发现目标系统周围的无线网络。该模块允许我们对目标周围的Wi-Fi网络的位置和其他必要信息进行指纹识别，如下图所示：
- en: '![](img/6841ec66-4ec0-4787-8147-c8e3a0bbe904.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/6841ec66-4ec0-4787-8147-c8e3a0bbe904.png)
- en: Gathering Wi-Fi passwords with Metasploit
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit收集Wi-Fi密码
- en: 'Similar to the preceding module, we have the `wlan_profile` module, which collects
    all saved credentials for the Wi-Fi from the target system. We can use the module
    as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的模块类似，我们还有`wlan_profile`模块，它可以收集目标系统中保存的所有Wi-Fi凭据。我们可以使用该模块如下：
- en: '![](img/98437bb3-1d01-483f-b071-d2852096ff46.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/98437bb3-1d01-483f-b071-d2852096ff46.png)
- en: We can see the name of the network in the `<name>` tag, and the password in
    the `<keyMaterial>` tag in the preceding screenshot.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在前面的截图中看到网络的名称在`<name>`标签中，密码在`<keyMaterial>`标签中。
- en: Getting the applications list
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取应用程序列表
- en: 'Metasploit offers credential harvesters for various types of application; however,
    to figure out which apps are installed on the target, we need to fetch the list
    of the applications using the `get_application_list` module, as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit提供了各种类型应用程序的凭证收集器；但是，要找出目标上安装了哪些应用程序，我们需要使用`get_application_list`模块获取应用程序列表，如下所示：
- en: '![](img/525ef5c8-2200-462c-9152-41409accf66b.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/525ef5c8-2200-462c-9152-41409accf66b.png)
- en: Figuring out the applications, we can run various information-gathering modules
    over the target.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 找出应用程序后，我们可以在目标上运行各种信息收集模块。
- en: Gathering Skype passwords
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集Skype密码
- en: 'Suppose we figured out that the target system was running Skype. Metasploit
    offers a great module to fetch Skype passwords using the `skype` module:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们发现目标系统正在运行Skype。Metasploit提供了一个很好的模块，可以使用`skype`模块获取Skype密码：
- en: '![](img/94bd060a-827d-4dd3-bc3e-7958d15de06f.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/94bd060a-827d-4dd3-bc3e-7958d15de06f.png)
- en: Gathering USB history
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集USB历史
- en: Metasploit features a USB history recovery module that figures out which USB
    devices were used on the target system. This module is handy in scenarios where
    USB protection is set in place, and only specific devices are allowed to connect.
    Spoofing the USB descriptors and hardware IDs becomes a lot easier with this module.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit具有USB历史恢复模块，可以找出目标系统上使用过哪些USB设备。该模块在USB保护设置的情况下非常方便，只允许连接特定设备。使用该模块可以更轻松地欺骗USB描述符和硬件ID。
- en: For more on Spoofing USB descriptors and bypassing endpoint protection, refer
    to [https://www.slideshare.net/the_netlocksmith/defcon-2012-hacking-using-usb-devices](https://www.slideshare.net/the_netlocksmith/defcon-2012-hacking-using-usb-devices).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 有关欺骗USB描述符和绕过端点保护的更多信息，请参阅[https://www.slideshare.net/the_netlocksmith/defcon-2012-hacking-using-usb-devices](https://www.slideshare.net/the_netlocksmith/defcon-2012-hacking-using-usb-devices)。
- en: 'Let''s see how we can use the module:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用该模块：
- en: '![](img/8dfbd30f-6b8a-4e93-bd04-c06fbfe9fb74.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/8dfbd30f-6b8a-4e93-bd04-c06fbfe9fb74.png)
- en: Searching files with Metasploit
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit搜索文件
- en: 'Metasploit offers a cool command to search for interesting files, which can
    be downloaded further. We can use the `search` command to list all the files with
    particular file extensions, such as `*.doc`, `*.xls`, and so on, as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit提供了一个很酷的命令来搜索有趣的文件，可以进一步下载。我们可以使用`search`命令列出所有具有特定文件扩展名的文件，例如`*.doc`、`*.xls`等，如下所示：
- en: '![](img/0e091a3c-a77c-4b41-8f30-20f9d7604e1c.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/0e091a3c-a77c-4b41-8f30-20f9d7604e1c.png)
- en: Wiping logs from the target with the clearev command
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`clearev`命令从目标中清除日志
- en: 'All logs from the target system can be cleared using the `clearev` command:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`clearev`命令清除目标系统的所有日志：
- en: '![](img/0affc886-7466-46f4-85e0-52cf1206aac5.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/0affc886-7466-46f4-85e0-52cf1206aac5.png)
- en: 'However, if you are not a law enforcement agent, you should not clear logs
    from the target, because logs provide essential information to the blue teams
    to strengthen their defenses. Another excellent module for playing with logs,
    known as `event_manager`, exists in Metasploit, and can be used as shown in the
    following screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你不是执法人员，你不应该清除目标的日志，因为日志为蓝队提供了重要信息，以加强他们的防御。另一个用于处理日志的优秀模块，称为`event_manager`，存在于Metasploit中，并且可以如下截图所示使用：
- en: '![](img/ae0e6e98-3c17-4fb7-a66a-ceac56003dff.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0e6e98-3c17-4fb7-a66a-ceac56003dff.png)'
- en: Let's jump into the advanced extended features of Metasploit in the next section.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一节中深入了解Metasploit的高级扩展功能。
- en: Advanced extended features of Metasploit
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metasploit的高级扩展功能
- en: Throughout this chapter, we've covered a lot of post-exploitation. Let's now
    cover some of the advanced features of Metasploit in this section.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经涵盖了许多后渗透技术。现在让我们在本节中介绍一些Metasploit的高级功能。
- en: Using pushm and popm commands
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pushm和popm命令
- en: Metasploit offers two great commands, `pushm` and `popm`. The `pushm` command
    pushes the current module on to the module stack, while `popm` pops the pushed
    module from the top of the module stack; however, this is not the standard stack
    available to processes. Instead, it is the utilization of the same concept by
    Metasploit, but it's otherwise unrelated. The advantage of using these commands
    is speedy operations, which saves a lot of time and effort.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit提供了两个很棒的命令，`pushm`和`popm`。`pushm`命令将当前模块推送到模块堆栈上，而`popm`则从模块堆栈顶部弹出推送的模块；然而，这不是进程可用的标准堆栈。相反，这是Metasploit利用相同概念，但与之无关。使用这些命令的优势是快速操作，节省了大量时间和精力。
- en: Consider a scenario where we are testing an internal server with multiple vulnerabilities.
    We have two exploitable services running on every system on the internal network.
    To exploit both services on every machine, we require a fast-switching mechanism
    between modules for both the vulnerabilities, without leaving the options. In
    such cases, we can use the `pushm` and `popm` commands. We can test a server for
    a single vulnerability using a module, and then can push the module on the stack
    and load the other module. After completing tasks with the second module, we can
    pop the first module from the stack using the `popm` command with all the options
    intact.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这样一个场景，我们正在测试一个具有多个漏洞的内部服务器。在内部网络的每台计算机上都运行着两个可利用的服务。为了利用每台机器上的两个服务，我们需要在两个漏洞之间快速切换模块的机制，而不离开选项。在这种情况下，我们可以使用`pushm`和`popm`命令。我们可以使用一个模块测试服务器的单个漏洞，然后可以将模块推送到堆栈上并加载另一个模块。完成第二个模块的任务后，我们可以使用`popm`命令从堆栈中弹出第一个模块，所有选项都保持不变。
- en: 'Let''s learn more about the concept through the following screenshot:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过下面的截图了解更多关于这个概念：
- en: '![](img/3ca2192e-6b8e-4657-a229-1533997c4f12.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ca2192e-6b8e-4657-a229-1533997c4f12.png)'
- en: 'In the preceding screenshot, we can see that we pushed the `psexec` module
    on to the stack using the `pushm` command, and we loaded the `exploit/multi/handler`
    module. As soon as we are done carrying out operations with the `multi/handler`
    module, we can use the `popm` command to reload the `psexec` module from the stack,
    as shown in the following screenshot:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中，我们可以看到我们使用`pushm`命令将`psexec`模块推送到堆栈上，并加载了`exploit/multi/handler`模块。一旦我们完成了`multi/handler`模块的操作，我们可以使用`popm`命令从堆栈中重新加载`psexec`模块，如下图所示：
- en: '![](img/9dc88576-e245-4778-a707-abe9db238ebe.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9dc88576-e245-4778-a707-abe9db238ebe.png)'
- en: We can see that all the options for the `psexec` module were saved, along with
    the modules on the stack. Therefore, we do not need to set the options again.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`psexec`模块的所有选项都被保存了，堆栈上的模块也是如此。因此，我们不需要再次设置选项。
- en: Speeding up development using the reload, edit, and reload_all commands
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用重新加载、编辑和重新加载所有命令加快开发速度
- en: During the development phase of a module, we may need to test a module several
    times. Shutting down Metasploit every time while making changes to the new module
    is a tedious, tiresome, and time-consuming task. There must be a mechanism to
    make module development an easy, short, and fun job. Fortunately, Metasploit provides
    the `reload`, `edit`, and `reload_all` commands, which make the lives of module
    developers comparatively easy. We can edit any Metasploit module on the fly using
    the `edit` command, and reload the edited module using the `reload` command, without
    shutting down Metasploit. If changes are made in multiple modules, we can use
    the `reload_all` command to reload all Metasploit modules at once.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在模块的开发阶段，我们可能需要多次测试一个模块。每次对新模块进行更改时都关闭Metasploit是一项繁琐、令人厌倦和耗时的任务。必须有一种机制使模块开发变得简单、快捷和有趣。幸运的是，Metasploit提供了`reload`、`edit`和`reload_all`命令，使模块开发者的生活相对容易。我们可以使用`edit`命令即时编辑任何Metasploit模块，并使用`reload`命令重新加载编辑后的模块，而无需关闭Metasploit。如果对多个模块进行了更改，我们可以使用`reload_all`命令一次重新加载所有Metasploit模块。
- en: 'Let''s look at an example:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子：
- en: '![](img/58ff579f-e73e-451a-9458-e6adedda87ae.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/58ff579f-e73e-451a-9458-e6adedda87ae.png)'
- en: 'In the preceding screenshot, we are editing the `freefloatftp_user.rb` exploit
    from the `exploit/windows/ftp` directory, because we issued the `edit` command.
    We changed the payload size from `444` to `448`, and saved the file. Next, we
    need to issue the `reload` command to update the source code of the module in
    Metasploit, as shown in the following screenshot:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中，我们正在编辑`exploit/windows/ftp`目录中的`freefloatftp_user.rb`漏洞，因为我们发出了`edit`命令。我们将有效载荷大小从`444`更改为`448`，并保存了文件。接下来，我们需要发出`reload`命令来更新Metasploit中模块的源代码，如下图所示：
- en: '![](img/045e9bfd-2c9c-421c-b1ed-26b8436fe2b6.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/045e9bfd-2c9c-421c-b1ed-26b8436fe2b6.png)'
- en: Using the `reload` command, we eliminated the need to restart Metasploit while
    working on the new modules.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`reload`命令，我们消除了在开发新模块时重新启动Metasploit的需要。
- en: The `edit` command launches Metasploit modules for editing in the vi editor.
    Learn more about vi editor commands at [http://www.tutorialspoint.com/unix/unix-vi-editor.htm](http://www.tutorialspoint.com/unix/unix-vi-editor.htm).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`edit`命令在vi编辑器中启动Metasploit模块进行编辑。在[http://www.tutorialspoint.com/unix/unix-vi-editor.htm](http://www.tutorialspoint.com/unix/unix-vi-editor.htm)了解更多关于vi编辑器命令的信息。'
- en: Making use of resource scripts
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用资源脚本
- en: Metasploit offers automation through resource scripts. The resource scripts
    eliminate the task of setting the options manually by setting up everything automatically,
    thus saving the time that is required to set up the options of a module and the
    payload.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit通过资源脚本提供自动化。资源脚本通过自动设置一切来消除手动设置选项的任务，从而节省了设置模块和有效载荷选项所需的时间。
- en: 'There are two ways to create a resource script: either by which are creating
    the script manually, or using the `makerc` command. I recommend the `makerc` command
    over manual scripting, since it eliminates typing errors. The `makerc` command
    saves all the previously issued commands in a file, which can be used with the
    `resource` command. Let''s see an example:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 创建资源脚本有两种方法：一种是手动创建脚本，另一种是使用`makerc`命令。我建议使用`makerc`命令而不是手动编写脚本，因为它可以消除打字错误。`makerc`命令会将之前输入的所有命令保存在一个文件中，该文件可以与`resource`命令一起使用。让我们看一个例子：
- en: '![](img/c63d7b93-6767-48e3-b5c5-48c735fd7ae3.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c63d7b93-6767-48e3-b5c5-48c735fd7ae3.png)'
- en: 'We can see in the preceding screenshot that we launched an exploit handler
    module by setting up its associated payload and options, such as `LHOST` and `LPORT`.
    Issuing the `makerc` command will systematically save all these commands into
    a file of our choice, which is `multi_hand` in this case. We can see that `makerc`
    successfully saved the last six commands into the `multi_hand` resource file.
    Let''s use the resource script as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，在前面的截图中，我们通过设置相关有效载荷和选项（如`LHOST`和`LPORT`）来启动了一个利用处理程序模块。发出`makerc`命令将系统地将所有这些命令保存到我们选择的文件中，本例中为`multi_hand`。我们可以看到，`makerc`成功地将最后六个命令保存到`multi_hand`资源文件中。让我们按以下方式使用资源脚本：
- en: '![](img/af00fb54-a71d-4baf-8647-46bd7d2af595.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af00fb54-a71d-4baf-8647-46bd7d2af595.png)'
- en: We can see that just by issuing the `resource` command followed by our script,
    it replicated all the commands we saved automatically, which eliminated the task
    of setting up the options repeatedly.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，只需发出`resource`命令，然后跟上我们的脚本，它就会自动复制我们保存的所有命令，从而消除了重复设置选项的任务。
- en: Using AutoRunScript in Metasploit
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Metasploit中使用AutoRunScript
- en: Metasploit offers another great feature of using `AutoRunScript`. The `AutoRunScript`
    option can be populated by issuing the `show advanced` command. The `AutoRunScript`
    automates post-exploitation, and executes once access to the target is gained.
    We can either set the `AutoRunScript` option manually by issuing `set AutoRunScript
    [script-name]`, or in the resource script itself, which automates exploitation
    and post-exploitation together.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit还提供了使用`AutoRunScript`的另一个很棒的功能。`AutoRunScript`选项可以通过发出`show advanced`命令来填充。`AutoRunScript`可以自动执行后渗透，并在获得对目标的访问后执行。我们可以通过发出`set
    AutoRunScript [script-name]`命令手动设置`AutoRunScript`选项，或者在资源脚本本身中设置，从而自动化利用和后渗透。
- en: 'The `AutoRunScript` can also run more than one post-exploitation script, by
    making use of the `multi_script` and `multi_console_command` modules as well.
    Let''s take an example in which we have two scripts, one for automating the exploitation,
    and the other for automating the post-exploitation, as shown in the following
    screenshot:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`AutoRunScript`也可以通过使用`multi_script`和`multi_console_command`模块运行多个后渗透脚本。让我们以一个例子来说明，其中有两个脚本，一个用于自动化利用，另一个用于自动化后渗透，如下面的截图所示：'
- en: '![](img/97a51a26-82ea-4e0c-bcec-62818316faf0.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/97a51a26-82ea-4e0c-bcec-62818316faf0.png)'
- en: 'This a small post-exploitation script that automates `checkvm` (a module to
    check if the target is running on virtual environment) and `migrate` (a module
    that helps to migrate from the exploited process to safer ones). Let''s have a
    look at the exploitation script:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个小的后渗透脚本，自动化了`checkvm`（用于检查目标是否在虚拟环境中运行的模块）和`migrate`（帮助从被利用的进程迁移到更安全的进程的模块）。让我们来看一下利用脚本：
- en: '![](img/c33ec025-632f-44b9-a8cf-36d5442a61c5.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c33ec025-632f-44b9-a8cf-36d5442a61c5.png)'
- en: The preceding resource script automates the exploitation of the HFS file server
    by setting up all the required parameters. We also set the `AutoRunScript` option
    with the `multi_console_command` option, which allows for execution of the multiple
    post-exploitation scripts. We define our post-exploitation script to `multi_console_command`
    using `-rc` switch, as shown in the preceding screenshot.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的资源脚本通过设置所有必需的参数来自动化HFS文件服务器的利用。我们还使用`multi_console_command`选项设置了`AutoRunScript`选项，该选项允许执行多个后渗透脚本。我们使用`-rc`开关将后渗透脚本定义为`multi_console_command`，如前面的截图所示。
- en: 'Let''s run the exploitation script and analyze its results in the following
    screenshot:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行利用脚本，并在下面的截图中分析其结果：
- en: '![](img/536bfcae-84f4-4dcc-8f56-1a4ac1bf57e8.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/536bfcae-84f4-4dcc-8f56-1a4ac1bf57e8.png)'
- en: 'We can see in the preceding screenshot that soon after the exploit is completed,
    the `checkvm` and `migrate` modules are executed, which states that the target
    is a `Sun VirtualBox Virtual Machine`, and the process is migrated to `notepad.exe`.
    The successful execution of our script can be seen in the following remaining
    section of the output:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，在利用完成后不久，执行了`checkvm`和`migrate`模块，这表明目标是`Sun VirtualBox Virtual Machine`，并且进程已迁移到`notepad.exe`。我们可以在输出的剩余部分中看到脚本的成功执行：
- en: '![](img/b761b85f-fabb-4ccf-ade2-965f6d6cd7b9.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b761b85f-fabb-4ccf-ade2-965f6d6cd7b9.png)'
- en: We successfully migrated to the `notepad.exe` process; however, if there are
    multiple instances of `notepad.exe`, the process migration may hop over other
    processes as well.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功迁移到了`notepad.exe`进程；但是，如果有多个`notepad.exe`实例，进程迁移也可能跳过其他进程。
- en: Using the multiscript module in AutoRunScript option
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AutoRunScript选项中使用multiscript模块
- en: 'We can also use a `multiscript` module instead of the `multi_console_command`
    module. Let''s create a new post-exploitation script, as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`multiscript`模块代替`multi_console_command`模块。让我们创建一个新的后渗透脚本，如下所示：
- en: '![](img/ece24491-5185-4601-af5a-81b4b6c9f739.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ece24491-5185-4601-af5a-81b4b6c9f739.png)'
- en: 'As we can see in the preceding screenshot, we created a new post-exploitation
    script named `multi_scr.rc`. We need to make changes to our exploitation script
    to accommodate the changes, as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的屏幕截图中所看到的，我们创建了一个名为`multi_scr.rc`的新后渗透脚本。我们需要对我们的利用脚本进行更改以适应这些更改，如下所示：
- en: '![](img/8bf54c36-68fc-4fe1-ad9b-73ed3593cd2c.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8bf54c36-68fc-4fe1-ad9b-73ed3593cd2c.png)'
- en: 'We merely replaced `multi_console_command` with `multiscript`, and updated
    the path of our post-exploitation script, as shown in the preceding screenshot.
    Let''s see what happens when we run the `exploit` script:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仅仅用`multiscript`替换了`multi_console_command`，并更新了我们的后渗透脚本的路径，如前面的屏幕截图所示。让我们看看当我们运行`exploit`脚本时会发生什么：
- en: '![](img/16b2b873-b862-4aff-9cc1-182325892a17.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16b2b873-b862-4aff-9cc1-182325892a17.png)'
- en: 'We can see that after access to the target is gained, the `checkvm` module
    executes, which is followed by the `migrate`, `get_env`, and `event_manager` commands,
    as shown in the following screenshot:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，在获得对目标的访问权限之后，`checkvm`模块被执行，然后是`migrate`、`get_env`和`event_manager`命令，如下面的屏幕截图所示：
- en: '![](img/d68f52d2-70fb-443a-9aa0-e7fe512decc9.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d68f52d2-70fb-443a-9aa0-e7fe512decc9.png)'
- en: 'The `event_manager` module displays all the logs from the target system, because
    we supplied the `-i` switch along with the command in our resource script. The
    results of the `event_manager` command are as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`event_manager`模块显示了来自目标系统的所有日志，因为我们在我们的资源脚本中使用了`-i`开关。`event_manager`命令的结果如下：'
- en: '![](img/5c58aa65-de2b-4411-a9f1-ed0dd9bc8048.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5c58aa65-de2b-4411-a9f1-ed0dd9bc8048.png)'
- en: Privilege escalation using Metasploit
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit进行权限提升
- en: 'During a penetration test, we often run into situations where we have limited
    access, and if we run commands such as `hashdump`, we might get the following
    error:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在渗透测试中，我们经常遇到有限的访问权限的情况，如果我们运行诸如`hashdump`之类的命令，可能会出现以下错误：
- en: '![](img/4d754ab2-cdb9-472a-a892-e045ad18b44c.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4d754ab2-cdb9-472a-a892-e045ad18b44c.png)'
- en: 'In such cases, if we try to get system privileges with the `getsystem` command,
    we get the following errors:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，如果我们尝试使用`getsystem`命令获取系统权限，我们会得到以下错误：
- en: '![](img/eefae71d-7266-45e2-885d-71f47fe7f14f.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eefae71d-7266-45e2-885d-71f47fe7f14f.png)'
- en: 'So, what shall we do in these cases? The answer is to escalate privileges using
    post-exploitation to achieve the highest level of access. The following demonstration
    is conducted over a Windows Server 2008 SP1 OS, where we used a local exploit
    to bypass the restrictions and gain complete access to the target:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，在这种情况下我们该怎么办呢？答案是使用后渗透来提升权限，以实现最高级别的访问。以下演示是在Windows Server 2008 SP1操作系统上进行的，我们使用本地漏洞来绕过限制并完全访问目标：
- en: '![](img/db955683-4dc3-4d9b-9bca-ee4737b3226b.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/db955683-4dc3-4d9b-9bca-ee4737b3226b.png)'
- en: 'In the preceding screenshot, we used the `exploit/windows/local/ms10_015_kitrap0d`
    exploit to escalate privileges, and to gain the highest level of access. Let''s
    check the level of access using the `getuid` command:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们使用了`exploit/windows/local/ms10_015_kitrap0d`漏洞来提升权限，并获得了最高级别的访问权限。让我们使用`getuid`命令来检查访问级别：
- en: '![](img/c2839884-d17f-4473-9835-6add414c3f6c.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c2839884-d17f-4473-9835-6add414c3f6c.png)'
- en: Now, we can see that we have system-level access, and can now perform anything
    on the target.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以看到我们已经具有系统级别的访问权限，并且现在可以在目标上执行任何操作。
- en: For more info on the KiTrap0D exploit, refer to [https://docs.microsoft.com/en-us/security-updates/SecurityBulletins/2010/ms10-015](https://docs.microsoft.com/en-us/security-updates/SecurityBulletins/2010/ms10-015).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 有关KiTrap0D漏洞的更多信息，请参阅[https://docs.microsoft.com/en-us/security-updates/SecurityBulletins/2010/ms10-015](https://docs.microsoft.com/en-us/security-updates/SecurityBulletins/2010/ms10-015)。
- en: 'Let''s now run the `hashdump` command, and check if it works:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们运行`hashdump`命令，并检查它是否有效：
- en: '![](img/c6748078-134a-4bb3-a641-b295ae2e7671.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c6748078-134a-4bb3-a641-b295ae2e7671.png)'
- en: Bingo! We got the hashes with ease.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们轻松地得到了哈希值。
- en: Finding passwords in clear text using mimikatz
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用mimikatz在明文中查找密码
- en: '**mimikatz** is an excellent addition to Metasploit that can recover passwords
    in clear text from the lsass service. We have already used the hash by using the
    pass-the-hash attack; however, sometimes, passwords can also be required to save
    time in the first place, as well as for the use of HTTP basic authentication,
    which requires the other party to know the password rather than the hash.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**mimikatz**是Metasploit的一个很好的补充，可以从lsass服务中以明文形式恢复密码。我们已经使用了通过传递哈希攻击来使用哈希值；然而，有时也可能需要密码来节省时间，以及用于HTTP基本身份验证的使用，后者需要对方知道密码而不是哈希值。'
- en: 'mimikatz can be loaded using the `load mimikatz` command in Metasploit. The
    passwords can be found using the `kerberos` command made available by the mimikatz
    module:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用Metasploit中的`load mimikatz`命令加载mimikatz。可以使用mimikatz模块提供的`kerberos`命令来查找密码：
- en: '![](img/fbb58de2-f09d-4d25-96f6-703dd8a8f21a.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fbb58de2-f09d-4d25-96f6-703dd8a8f21a.png)'
- en: Sniffing traffic with Metasploit
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit嗅探流量
- en: 'Yes, Metasploit does provide the feature of sniffing traffic from the target
    host. Not only can we sniff a particular interface, but also any specified interface
    on the target. To run this module, we will first need to list all interfaces,
    and choose any one amongst them:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，Metasploit确实提供了从目标主机嗅探流量的功能。我们不仅可以嗅探特定接口，还可以嗅探目标上的任何指定接口。要运行此模块，我们首先需要列出所有接口，并在其中选择任何一个：
- en: '![](img/b5f859bb-2615-437e-8cbb-9a7b2e5b07e2.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b5f859bb-2615-437e-8cbb-9a7b2e5b07e2.png)'
- en: 'We can see we have multiple interfaces. Let''s start sniffing on the wireless
    interface, which is assigned `2` as the ID, as shown in the following screenshot:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们有多个接口。让我们开始在无线接口上进行嗅探，该接口被分配为ID`2`，如下面的屏幕截图所示：
- en: '![](img/f287b005-361a-4791-b6d4-2607c6775669.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f287b005-361a-4791-b6d4-2607c6775669.png)'
- en: 'We start the sniffer by issuing a `sniffer_start` command on the wireless interface
    with the ID as `2`, and `1000` packets as the buffer size. We can see that by
    issuing the `sniffer_dump` command, we downloaded the PCAP successfully. Let''s
    see what data we have gathered by launching the captured PCAP file in Wireshark.
    We can do this by issuing the following command:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过在无线接口上使用ID为`2`的`sniffer_start`命令和`1000`数据包作为缓冲区大小来启动嗅探器。通过发出`sniffer_dump`命令，我们成功下载了PCAP。让我们看看通过在Wireshark中启动捕获的PCAP文件来收集了什么数据。我们可以通过发出以下命令来做到这一点：
- en: '![](img/a94dc1c9-588d-485f-b232-e113c4b652e8.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a94dc1c9-588d-485f-b232-e113c4b652e8.png)'
- en: 'We can see a variety of data in the PCAP file, which comprises DNS queries,
    HTTP requests, and clear-text passwords:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在PCAP文件中看到各种数据，包括DNS查询、HTTP请求和明文密码：
- en: '![](img/d2994157-6e20-4ca5-8716-325633b3dd92.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d2994157-6e20-4ca5-8716-325633b3dd92.png)'
- en: Host file injection with Metasploit
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit进行host文件注入
- en: We can perform a variety of phishing attacks on the target by injecting the
    host file. We can add entries to the host file for specific domains, allowing
    us to leverage our phishing attacks with ease.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过注入host文件对目标进行各种钓鱼攻击。我们可以为特定域添加host文件条目，从而轻松利用我们的钓鱼攻击。
- en: 'Let''s see how we can perform a host file injection with Metasploit:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用Metasploit进行host文件注入：
- en: '![](img/3052c857-2477-463a-b014-3318fe8201ff.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3052c857-2477-463a-b014-3318fe8201ff.png)'
- en: 'We can see that we used the `post/windows/manage/inject_host` module on `SESSION
    1`, and inserted the entry into the target''s host file. Let''s see what happens
    when a target opens [https://www.yahoo.com/](https://www.yahoo.com/):'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们在`SESSION 1`上使用了`post/windows/manage/inject_host`模块，并将条目插入了目标的host文件。让我们看看当目标打开[https://www.yahoo.com/](https://www.yahoo.com/)时会发生什么：
- en: '![](img/5c1a3514-af96-45ad-aa98-357832081bb6.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5c1a3514-af96-45ad-aa98-357832081bb6.png)'
- en: We can see that the target is redirected to our malicious server, which can
    host phishing pages with ease.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到目标被重定向到我们的恶意服务器，这可以轻松地托管钓鱼页面。
- en: Phishing Windows login passwords
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 钓取Windows登录密码
- en: 'Metasploit includes a module that can phish for login passwords. It generates
    a login popup similar to an authentic Windows popup that can harvest credentials,
    and since it is posing as a legitimate login, the user is forced to fill in the
    credentials and then proceed with this ongoing operation. We can phish for a user''s
    login by running `post/windows/gather/phish_login_pass`. As soon as we run this
    module, the fake login box pops up at the target, as shown in the following screenshot:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit包括一个可以钓取登录密码的模块。它生成一个类似于真实Windows弹出窗口的登录弹出窗口，可以收集凭据，由于它伪装成合法的登录，用户被迫填写凭据，然后继续进行此操作。我们可以通过运行`post/windows/gather/phish_login_pass`来钓取用户的登录。一旦我们运行这个模块，假的登录框就会在目标处弹出，如下面的屏幕截图所示：
- en: '![](img/eb87be4a-7342-4df6-bfde-56d761df3ae2.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb87be4a-7342-4df6-bfde-56d761df3ae2.png)'
- en: 'Once the target fills out the credentials, we are provided with the credentials
    in plain text, as shown in the following screenshot:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦目标填写凭据，我们将以纯文本形式提供凭据，如下面的屏幕截图所示：
- en: '![](img/2da7e422-f896-4e66-82e9-1e209329ba2f.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2da7e422-f896-4e66-82e9-1e209329ba2f.png)'
- en: Voila! We got the credentials with ease. As we have seen in this chapter, Metasploit
    provides tons of great features for post-exploitation, by working with standalone
    tools such as mimikatz and native scripts as well.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！我们轻松地获得了凭据。正如我们在本章中所看到的，Metasploit通过与独立工具（如mimikatz和本地脚本）合作，为后渗透提供了大量出色的功能。
- en: Summary and exercises
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结和练习
- en: Throughout this chapter, we covered post-exploitation in detail. We looked at
    post-exploitation scenarios, from basic to advanced. We also looked at privileged
    escalation in a Windows environment, and a couple of other advanced techniques.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们详细介绍了后渗透。我们从基本到高级的后渗透场景进行了讨论。我们还研究了在Windows环境中的特权升级以及其他一些高级技术。
- en: 'Following are the exercises you should try on your own:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是你应该自己尝试的练习：
- en: Develop your own post-exploitation modules for the features which are not already
    present in Metasploit
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为那些Metasploit中尚不存在的功能开发自己的后渗透模块
- en: Develop automation scripts for gaining access, maintaining access, and clearing
    tracks
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发自动化脚本以获取访问权限、保持访问权限和清除痕迹。
- en: Try contributing to Metasploit with at least one post-exploitation module for
    Linux based operating systems
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试为基于Linux的操作系统贡献至少一个Metasploit的后渗透模块
- en: In the next chapter, we will make use of most of the post-exploitation tricks
    we covered in this chapter to circumvent and evade protections at the target system.
    We will perform some of the most cutting-edge Metasploit Kung Fu, and will try
    to defeat the AVs and firewalls.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将利用本章中涵盖的大部分后渗透技巧来规避和逃避目标系统的保护。我们将执行一些最尖端的Metasploit Kung Fu，并尝试击败杀毒软件和防火墙。
