- en: Assessing Authentication Schemes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估身份验证方案
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下示例：
- en: Testing for account enumeration and guessable accounts
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试帐户枚举和可猜测的帐户
- en: Testing for weak lock-out mechanisms
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试弱锁定机制
- en: Testing for bypassing authentication schemes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试绕过身份验证方案
- en: Testing for browser cache weaknesses
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试浏览器缓存弱点
- en: Testing the account provisioning process via REST API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过REST API测试帐户配置过程
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: This chapter covers the basic penetration testing of authentication schemes.
    *Authentication* is the act of verifying whether a person or object claim is true.
    Web penetration testers must make key assessments to determine the strength of
    a target application's authentication scheme. Such tests include launching attacks,
    to determine the presence of account enumeration and guessable accounts, the presence
    of weak lock-out mechanisms, whether the application scheme can be bypassed, whether
    the application contains browser-caching weaknesses, and whether accounts can
    be provisioned without authentication via a REST API call. You will learn how
    to use Burp to perform such tests.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了对身份验证方案的基本渗透测试。*身份验证*是验证个人或对象声明是否真实的行为。Web渗透测试人员必须进行关键评估，以确定目标应用程序的身份验证方案的强度。此类测试包括发动攻击，以确定帐户枚举和可猜测的帐户的存在，弱锁定机制的存在，应用程序方案是否可以被绕过，应用程序是否包含浏览器缓存弱点，以及是否可以通过REST
    API调用进行身份验证来配置帐户。您将学习如何使用Burp执行此类测试。
- en: Software tool requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件工具要求
- en: 'To complete the recipes in this chapter, you will need the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章的示例，您需要以下内容：
- en: OWASP Broken Web Applications (VM)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP Broken Web Applications（VM）
- en: OWASP Mutillidae link
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP Mutillidae链接
- en: GetBoo link
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GetBoo链接
- en: Burp Proxy Community or Professional ([https://portswigger.net/burp/](https://portswigger.net/burp/))
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Burp代理社区或专业版（[https://portswigger.net/burp/](https://portswigger.net/burp/)）
- en: The Firefox browser configured to allow Burp to proxy traffic ([https://www.mozilla.org/en-US/firefox/new/](https://www.mozilla.org/en-US/firefox/new/))
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置为允许Burp代理流量的Firefox浏览器（[https://www.mozilla.org/en-US/firefox/new/](https://www.mozilla.org/en-US/firefox/new/)）
- en: Testing for account enumeration and guessable accounts
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试帐户枚举和可猜测的帐户
- en: By interacting with an authentication mechanism, a tester may find it possible
    to collect a set of valid usernames. Once the valid accounts are identified, it
    may be possible to brute-force passwords. This recipe explains how Burp Intruder
    can be used to collect a list of valid usernames.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 通过与身份验证机制进行交互，测试人员可能会发现可以收集一组有效的用户名。一旦识别出有效帐户，就可能有可能对密码进行暴力破解。本示例解释了如何使用Burp
    Intruder来收集有效用户名列表。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做好准备
- en: Perform username enumeration against a target application.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 针对目标应用程序执行用户名枚举。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Ensure Burp and the OWASP BWA VM are running and that Burp is configured in
    the Firefox browser used to view the OWASP BWA applications.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 确保Burp和OWASP BWA VM正在运行，并且Burp已在用于查看OWASP BWA应用程序的Firefox浏览器中进行配置。
- en: 'From the OWASP BWA Landing page, click the link to the GetBoo application:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从OWASP BWA登陆页面，单击GetBoo应用程序的链接：
- en: '![](img/00135.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00135.jpeg)'
- en: 'Click the **Log In** button, and at the login screen, attempt to log in with
    an account username of `admin` and a password of `aaaaa`:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**登录**按钮，在登录屏幕上，尝试使用帐户用户名`admin`和密码`aaaaa`登录：
- en: '![](img/00136.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00136.jpeg)'
- en: Note the message returned is **The password is invalid**. From this information,
    we know admin is a valid account. Let's use Burp **Intruder** to find more accounts.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意返回的消息是**密码无效**。根据这个信息，我们知道admin是一个有效的帐户。让我们使用Burp **入侵者**来查找更多帐户。
- en: 'In Burp''s **Proxy** | **HTTP history** tab, find the failed login attempt
    message. View the **Response** | **Raw** tab to find the same overly verbose error
    message, **The password is invalid**:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Burp的**代理**|**HTTP历史**选项卡中，找到登录失败的消息。查看**响应**|**原始**选项卡，找到相同的过于冗长的错误消息，**密码无效**：
- en: '![](img/00137.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00137.jpeg)'
- en: 'Flip back to the **Request** | **Raw** tab and right-click to send this request
    to **Intruder**:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回**请求**|**原始**选项卡，右键单击将此请求发送到**入侵者**：
- en: '![](img/00138.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00138.jpeg)'
- en: 'Go to Burp''s **Intruder** tab and leave the **Intruder** | **Target** tab
    settings as it is. Continue to the **Intruder** | **Positions** tab. Notice how
    Burp places payload markers around each parameter value found. However, we only
    need a payload marker around the password value. Click the **Clear § **button
    to remove the payload markers placed by Burp:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到Burp的**入侵者**选项卡，将**入侵者**|**目标**选项卡设置保持不变。继续到**入侵者**|**位置**选项卡。注意Burp如何在找到的每个参数值周围放置有效载荷标记。但是，我们只需要在密码值周围放置有效载荷标记。单击**清除**按钮以删除Burp放置的有效载荷标记：
- en: '![](img/00139.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00139.jpeg)'
- en: 'Then, highlight the name value of admin with your cursor and click the **Add
    §** button:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用光标突出显示admin的名称值，并单击**添加§**按钮：
- en: '![](img/00140.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00140.jpeg)'
- en: Continue to the **Intruder** | **Payloads** tab. Many testers use word lists
    to enumerate commonly used usernames within the payload marker placeholder. For
    this recipe, we will type in some common usernames, to create a custom payload
    list.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续到**入侵者**|**有效载荷**选项卡。许多测试人员使用单词列表来枚举有效载荷标记占位符中常用的用户名。对于这个示例，我们将输入一些常见的用户名，以创建自定义有效载荷列表。
- en: 'In the **Payload Options [Simple list]** section, type the string `user` and
    click the **Add** button:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**有效载荷选项[简单列表]**部分，键入字符串`user`，然后单击**添加**按钮：
- en: '![](img/00141.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00141.jpeg)'
- en: 'Add a few more strings such as `john`, `tom`, `demo`, and, finally, `admin`
    to the payload-listing box:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在有效载荷列表框中添加一些字符串，如`john`，`tom`，`demo`，最后是`admin`：
- en: '![](img/00142.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00142.jpeg)'
- en: 'Go to the **Intruder** | **Options** tab and scroll down to the **Grep – Match**
    section. Click the checkbox **Flag result** **items with responses matching these
    expressions**. Click the **Clear** button to remove the items currently in the
    list:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**入侵者**|**选项**选项卡，向下滚动到**Grep - 匹配**部分。单击复选框**标记结果**，**与这些表达式匹配的响应项**。单击**清除**按钮以删除当前列表中的项目：
- en: '![](img/00143.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00143.jpeg)'
- en: Click **Yes** to confirm you wish to clear the list.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**是**以确认您希望清除列表。
- en: 'Type the string `The password is invalid` within the textbox and click the
    **Add** button. Your **Grep – Match** section should look as shown in the following
    screenshot:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本框中输入字符串`密码无效`，然后单击**Add**按钮。您的**Grep - Match**部分应如下截图所示：
- en: '![](img/00144.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00144.jpeg)'
- en: Click the **Start attack** button located at the top of the **Options** page.
    A pop-up dialog box appears displaying the payloads defined, as well as the new
    column we added under the **Grep – Match** section. This pop-up window is the
    attack results table.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**Options**页面顶部的**Start attack**按钮。弹出对话框显示定义的有效负载，以及我们在**Grep - Match**部分下添加的新列。这个弹出窗口是攻击结果表。
- en: 'The attack results table shows each request with the given payload resulted
    in a status code of **200** and that two of the payloads, **john** and **tom**,
    did not produce the message **The password is invalid** within the responses.
    Instead, those two payloads returned a message of **The user does not exist**:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击结果表显示每个请求的给定有效负载导致状态代码为**200**，其中两个有效负载**john**和**tom**在响应中没有产生**密码无效**的消息。相反，这两个有效负载返回了**用户不存在**的消息：
- en: '![](img/00145.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00145.jpeg)'
- en: 'The result of this attack results table provide a username enumeration vulnerability
    based upon the overly verbose error message **The password is invalid**, which
    confirms the user account exists on the system:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这次攻击的结果表明，基于过于冗长的错误消息**密码无效**，存在用户名枚举漏洞，这证实了用户帐户存在于系统中：
- en: '![](img/00146.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00146.jpeg)'
- en: This means we are able to confirm that accounts already exist in the system
    for the users `user`, `demo`, and `admin`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们能够确认系统中已经存在用户`user`，`demo`和`admin`的帐户。
- en: Testing for weak lock-out mechanisms
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试弱锁定机制
- en: Account lockout mechanisms should be present within an application to mitigate
    brute-force login attacks. Typically, applications set a threshold between three
    to five attempts. Many applications lock for a period of time before a re-attempt
    is allowed.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序应该设置锁定机制以减轻暴力登录攻击。通常，应用程序在三到五次尝试之间设置阈值。许多应用程序在允许重新尝试之前会锁定一段时间。
- en: Penetration testers must test all aspects of login protections, including challenge
    questions and response, if present.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 渗透测试人员必须测试登录保护的所有方面，包括挑战问题和响应（如果存在）。
- en: Getting ready
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做好准备
- en: Determine whether an application contains proper lock-out mechanisms in place.
    If they are not present, attempt to brute-force credentials against the login
    page to achieve unauthorized access to the application. Using the OWASP Mutillidae
    II application, attempt to log in five times with a valid username but an invalid
    password.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 确定应用程序是否存在适当的锁定机制。如果不存在，尝试针对登录页面的凭据进行暴力破解，以实现对应用程序的未经授权访问。使用OWASP Mutillidae
    II应用程序，尝试使用有效用户名但无效密码登录五次。
- en: How to do it...
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Ensure Burp and the OWASP BWA VM are running and that Burp is configured in
    the Firefox browser used to view the OWASP BWA applications.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 确保Burp和OWASP BWA VM正在运行，并且Burp已在用于查看OWASP BWA应用程序的Firefox浏览器中进行配置。
- en: From the OWASP BWA Landing page, click the link to the OWASP Mutillidae II application.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从OWASP BWA登陆页面，单击链接到OWASP Mutillidae II应用程序。
- en: Open the Firefox browser to the login screen of OWASP Mutillidae II. From the
    top menu, click **Login**.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Firefox浏览器，转到OWASP Mutillidae II的登录屏幕。从顶部菜单中，单击**登录**。
- en: 'At the login screen, attempt to login five times with username `admin` and
    the wrong password of `aaaaaa`. Notice the application does not react any differently
    during the five attempts. The application does not change the error message shown,
    and the admin account is not locked out. This means the login is probably susceptible
    to brute-force password-guessing attacks:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在登录屏幕上，尝试使用用户名`admin`和错误密码`aaaaaa`登录五次。请注意，在这五次尝试期间，应用程序没有做出任何不同的反应。应用程序没有更改显示的错误消息，管理员帐户也没有被锁定。这意味着登录可能容易受到暴力破解密码猜测攻击的影响：
- en: '![](img/00147.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00147.jpeg)'
- en: Let's continue the testing, to brute-force the login page and gain unauthorized
    access to the application.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续测试，以暴力破解登录页面并未经授权地访问应用程序。
- en: 'Go to the **Proxy** | **HTTP history** tab, and look for the failed login attempts.
    Right-click one of the five requests and send it to **Intruder**:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**Proxy** | **HTTP history**选项卡，并查找登录失败的尝试。右键单击五个请求中的一个，并将其发送到**Intruder**：
- en: '![](img/00148.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00148.jpeg)'
- en: 'Go to Burp''s **Intruder** tab, and leave the **Intruder** | **Target** tab
    settings as it is. Continue to the **Intruder** | **Positions** tab and notice
    how Burp places payload markers around each parameter value found. However, we
    only need a payload marker around the password''s value. Click the **Clear § **button
    to remove the payload markers placed by Burp:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到Burp的**Intruder**选项卡，并将**Intruder** | **Target**选项卡设置保持不变。继续到**Intruder**
    | **Positions**选项卡，并注意Burp如何在找到的每个参数值周围放置有效负载标记。但是，我们只需要在密码的值周围放置有效负载标记。单击**Clear
    §**按钮以删除Burp放置的有效负载标记：
- en: '![](img/00149.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00149.jpeg)'
- en: Then, highlight the password value of **aaaaaa** and click the **Add §** button.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，突出显示**aaaaaa**的密码值，然后单击**Add §**按钮。
- en: Continue to the **Intruder** | **Payloads** tab.  Many testers use word lists
    to brute-force commonly used passwords within the payload marker placeholder.
    For this recipe, we will type in some common passwords to create our own unique
    list of payloads.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续到**Intruder** | **Payloads**选项卡。许多测试人员使用单词列表来暴力破解有效负载标记占位符中常用的密码。对于这个示例，我们将输入一些常用密码来创建我们自己的独特有效负载列表。
- en: 'In the **Payload Options [Simple list]** section, type the string `admin123`
    and click the **Add** button:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Payload Options [Simple list]**部分，输入字符串`admin123`，然后单击**Add**按钮：
- en: '![](img/00150.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00150.jpeg)'
- en: 'Add a few more strings, such as `adminpass`, `welcome1`, and, finally, `admin`
    to the payload-listing box:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在有效负载列表框中添加一些字符串，例如`adminpass`，`welcome1`，最后是`admin`：
- en: '![](img/00151.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00151.jpeg)'
- en: 'Go to the **Intruder** | **Options** tab and scroll down to the **Grep – Extract**
    section:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**Intruder** | **Options**选项卡，向下滚动到**Grep – Extract**部分：
- en: '![](img/00152.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00152.jpeg)'
- en: Click the checkbox **Extract the following items from responses** and then click
    the **Add** button. A pop-up box appears, displaying the response of the unsuccessful
    login attempt you made with the `admin`/`aaaaaa` request.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击复选框**Extract the following items from responses**，然后点击**Add**按钮。一个弹出框会显示，显示你使用`admin`/`aaaaaa`请求进行的登录尝试的响应。
- en: 'In the search box at the bottom, search for the words `Not Logged In`. After
    finding the match, you must highlight the words **Not Logged In**, to assign the
    grep match correctly:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在底部的搜索框中搜索`Not Logged In`这几个单词。找到匹配后，你必须正确地突出显示**Not Logged In**这几个单词，以正确地分配grep匹配：
- en: '![](img/00153.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00153.jpeg)'
- en: If you do not highlight the words properly, after you click **OK**, you will
    see **[INVALID]** inside the **Grep – Extract** box. If this happens, remove the
    entry by clicking the **Remove** button and try again by clicking the **Add**
    button, perform the search, and highlight the words.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你没有正确地突出显示单词，在点击**确定**后，你会在**Grep – Extract**框内看到**[INVALID]**。如果发生这种情况，点击**删除**按钮删除条目，然后再次点击**添加**按钮，执行搜索，突出显示单词。
- en: 'If you highlight the words properly, you should see the following in the **Grep
    – Extract** box:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你正确地突出显示了单词，你应该在**Grep – Extract**框中看到以下内容：
- en: '![](img/00154.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00154.jpeg)'
- en: Now, click the **Start attack** button at the top right-hand side of the **Options**
    page.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在**Options**页面的右上角点击**Start attack**按钮。
- en: A pop-up attack results table appears, displaying the request with the payloads
    you defined placed into the payload marker positions. Notice the attack table
    produced shows an extra column entitled **ReflectedXSSExecution**. This column
    is a result of the **Grep – Extract Option** set previously.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 弹出的攻击结果表格会显示请求和你定义的有效负载放置到有效负载标记位置中。注意到产生的攻击表格显示了一个名为**ReflectedXSSExecution**的额外列。这一列是之前设置的**Grep
    – Extract Option**的结果。
- en: 'From this attack table, viewing the additional column, a tester can easily
    identify which request number successfully brute-forced the login screen. In this
    case, **Request 4**, using credentials of the username `admin` and the password
    `admin` logged us into the application:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这个攻击表格中，查看额外的列，测试人员可以轻松地确定哪个请求号成功地暴力破解了登录界面。在这种情况下，**Request 4**，使用用户名`admin`和密码`admin`成功地登录了应用程序：
- en: '![](img/00155.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00155.jpeg)'
- en: 'Select **Request 4** within the attack table, and view the **Response** | **Render**
    tab. You should see the message **Logged In Admin: admin (g0t r00t?)** on the
    top right-hand side:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在攻击表格中选择**Request 4**，查看**Response** | **Render**选项卡。你应该在右上角看到消息**Logged In
    Admin: admin (g0t r00t?)**：'
- en: '![](img/00156.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00156.jpeg)'
- en: Close the attack table by clicking the **X** in the top right-hand corner.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击攻击表格右上角的**X**关闭攻击表格。
- en: You successfully brute-forced the password of a valid account on the system,
    due to the application having a weak lock-out mechanism.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你成功地暴力破解了系统上一个有效账户的密码，因为应用程序的锁定机制较弱。
- en: Testing for bypassing authentication schemes
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试绕过身份验证方案
- en: Applications may contain flaws, allowing unauthorized access by means of bypassing
    the authentication measures in place. Bypassing techniques include a **direct
    page request** (that is, forced browsing), **parameter modification**, **session
    ID prediction**, and **SQL Injection**.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序可能存在缺陷，允许绕过已经存在的身份验证措施进行未经授权的访问。绕过技术包括**直接页面请求**（即强制浏览）、**参数修改**、**会话ID预测**和**SQL注入**。
- en: For the purposes of this recipe, we will use parameter modification.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本教程的目的，我们将使用参数修改。
- en: Getting ready
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Add and edit parameters in an unauthenticated request to match a previously
    captured authenticated request. Replay the modified, unauthenticated request to
    gain access to the application through bypassing the login mechanism.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 添加和编辑参数，使未经身份验证的请求与先前捕获的经过身份验证的请求匹配。重放修改后的未经身份验证的请求，以绕过登录机制获取对应用程序的访问权限。
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Open the Firefox browser to the home page of OWASP Mutillidae II, using the
    **Home** button from the top menu, on the left-hand side. Make sure you are *not
    logged into* the application. If you are logged in, select **Logout** from the
    menu:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Firefox浏览器，使用顶部菜单左侧的**Home**按钮，打开OWASP Mutillidae II的主页。确保你*没有登录*该应用程序。如果你已经登录，从菜单中选择**Logout**：
- en: '![](img/00157.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00157.jpeg)'
- en: 'In Burp, go to the **Proxy** | **HTTP history** tab and select the request
    you just made, browsing to the home page as unauthenticated. Right-click, and
    then select **Send to Repeater**:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Burp中，转到**Proxy** | **HTTP history**选项卡，并选择刚刚进行的未经身份验证的主页浏览请求。右键单击，然后选择**Send
    to Repeater**：
- en: '![](img/00158.jpeg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00158.jpeg)'
- en: 'Using this same request and location, right-click again, and then select **Send
    to Comparer** (request):'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用相同的请求和位置，再次右键单击，然后选择**Send to Comparer**（请求）：
- en: '![](img/00159.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00159.jpeg)'
- en: Return to the home page of your browser and click the **Login/Register** button.
    At the login page, log in with the username of `admin` and the password of `admin`.
    Click **Login**.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回浏览器的主页，然后点击**登录/注册**按钮。在登录页面，使用用户名`admin`和密码`admin`进行登录。点击**登录**。
- en: After you log in, go ahead and log out. Make sure you press the **Logout** button
    and are logged out of the admin account.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，继续注销。确保你按下**注销**按钮并从管理员账户注销。
- en: 'In Burp, go to the **Proxy** | **HTTP history** tab and select the request
    you just made, logging in as `admin`. Select `GET` request immediately following
    the `POST 302` redirect. Right-click and then select **Send to** **Repeater**
    (request):'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Burp中，转到**Proxy** | **HTTP history**选项卡，并选择刚刚进行的请求，以`admin`身份登录。选择`POST 302`重定向后立即进行的`GET`请求。右键单击，然后选择**Send
    to** **Repeater**（请求）：
- en: '![](img/00160.jpeg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00160.jpeg)'
- en: 'Using this same request and location, right-click again and **Send to Comparer **(request):'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用相同的请求和位置，再次右键单击并选择**Send to Comparer**（请求）：
- en: '![](img/00161.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00161.jpeg)'
- en: 'Go to Burp''s **Comparer** tab. Notice the two requests you sent are highlighted.
    Press the **Words** button on the bottom right-hand side, to compare the two requests
    at the same time:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到Burp的**Comparer**选项卡。注意您发送的两个请求都被突出显示。按下右下角的**Words**按钮，同时比较这两个请求：
- en: '![](img/00162.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00162.jpeg)'
- en: 'A dialog pop-up displays the two requests with color-coded highlights to draw
    your eyes to the differences. Note the changes in the **Referer** header and the
    additional name/value pair placed in the admin account cookie. Close the pop-up
    box with the **X** on the right-hand side:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个对话框弹出显示两个请求，使用颜色编码的高亮显示来吸引您的注意。注意**Referer**标头中的更改以及放置在管理员帐户cookie中的附加名称/值对。使用右侧的**X**关闭弹出框：
- en: '![](img/00163.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00163.jpeg)'
- en: Return to **Repeater**, which contains your first `GET` request you performed
    as unauthenticated. Prior to performing this attack, make sure you are completely
    logged out of the application.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到**Repeater**，其中包含您作为未经身份验证的用户执行的第一个`GET`请求。在执行此攻击之前，请确保您已完全注销应用程序。
- en: 'You can verify you are logged out by clicking the **Go** button in **Repeater**
    associated to your unauthenticated request:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过单击与您未经身份验证请求相关的**Repeater**中的**Go**按钮来验证您已注销：
- en: '![](img/00164.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00164.jpeg)'
- en: 'Now flip over to the **Repeater** tab, which contains your second `GET` request
    as authenticated user `admin`. Copy the values for **Referer** header and **Cookie**
    from the authenticated request. This attack is parameter modification for the
    purpose of bypassing authentication:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在切换到**Repeater**选项卡，其中包含您作为经过身份验证的用户`admin`执行的第二个`GET`请求。从经过身份验证的请求中复制**Referer**标头和**Cookie**的值。这是用于绕过身份验证的参数修改攻击：
- en: '![](img/00165.jpeg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00165.jpeg)'
- en: Copy the highlighted headers (**Referer and Cookie**) from the authenticated
    `GET` request. You are going to paste those values into the unauthenticated `GET`
    request.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从经过身份验证的`GET`请求中复制突出显示的标头（**Referer和Cookie**）。您将把这些值粘贴到未经身份验证的`GET`请求中。
- en: Replace the same headers in the unauthenticated `GET` request by highlighting
    and right-clicking, and select **Paste**.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过突出显示并右键单击，然后选择**粘贴**，在未经身份验证的`GET`请求中替换相同的标头。
- en: Right-click and select **Paste** in the **Repeater** | **Raw** tab of the first `GET`
    request you performed as unauthenticated.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击并选择**粘贴**在您作为未经身份验证的用户执行的第一个`GET`请求的**Repeater** | **Raw**选项卡中。
- en: Click the **Go** button to send your modified `GET` request. Remember, this
    is the first `GET` request you performed as unauthenticated.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**Go**按钮发送您修改后的`GET`请求。请记住，这是您作为未经身份验证的用户执行的第一个`GET`请求。
- en: 'Verify that you are now logged in as admin in the **Response** | **Render**
    tab. We were able to bypass the authentication mechanism (that is, the log in
    page) by performing parameter manipulation:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证您现在在**Response** | **Render**选项卡中以管理员身份登录。我们能够通过执行参数操作绕过身份验证机制（即登录页面）：
- en: '![](img/00166.jpeg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00166.jpeg)'
- en: How it works
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理
- en: By replaying both the token found in the cookie and the referer value of the
    authenticated request into the unauthenticated request, we are able to bypass
    the authentication scheme and gain unauthorized access to the application.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将cookie中找到的令牌和经过身份验证的请求的referer值重新播放到未经身份验证的请求中，我们能够绕过身份验证方案并未经授权地访问应用程序。
- en: Testing for browser cache weaknesses
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试浏览器缓存的弱点
- en: Browser caching is provided for improved performance and better end-user experience.
    However, when sensitive data is typed into a browser by the user, such data can
    also be cached in the browser history. This cached data is visible by examining
    the browser's cache or simply by pressing the browser's *back* button.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器缓存可提供改进的性能和更好的最终用户体验。但是，当用户在浏览器中输入敏感数据时，这些数据也可能被缓存在浏览器历史记录中。通过检查浏览器的缓存或简单地按下浏览器的*返回*按钮，可以查看这些缓存数据。
- en: Getting ready
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Using the browser's back button, determine whether login credentials are cached,
    allowing for unauthorized access. Examine these steps in Burp, to understand the
    vulnerability.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 使用浏览器的返回按钮，确定登录凭据是否被缓存，从而允许未经授权的访问。在Burp中检查这些步骤，以了解漏洞。
- en: How to do it...
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Log into the Mutillidae application as `admin` with the password `admin`.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以`admin`身份使用密码`admin`登录Mutillidae应用程序。
- en: Now log out of the application by clicking the **Logout** button from the top
    menu.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在通过单击顶部菜单中的**注销**按钮注销应用程序。
- en: Verify you are logged out by noting the **Not Logged In** message.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过注意**未登录**消息来验证您已注销。
- en: 'View these steps as messages in Burp''s **Proxy** | **History** as well. Note
    the logout performs a **302** redirect in an effort to not cache cookies or credentials
    in the browser:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Burp的**Proxy** | **History**中查看这些步骤作为消息。请注意，注销会执行**302**重定向，以防止在浏览器中缓存cookie或凭据：
- en: '![](img/00167.jpeg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00167.jpeg)'
- en: From the Firefox browser, click the back button and notice that you are now
    logged in as admin even though you did not log in! This is possible because of
    cached credentials stored in the browser and the lack of any cache-control protections
    set in the application.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Firefox浏览器，单击返回按钮，注意即使您没有登录，您现在已经以管理员身份登录！这是因为浏览器中存储的缓存凭据以及应用程序中未设置任何缓存控制保护。
- en: Now refresh/reload the page in the browser, and you will see you are logged
    out again.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在浏览器中刷新/重新加载页面，您会看到您再次被注销。
- en: 'Examine the steps within the **Proxy** | **HTTP history** tab. Review the steps
    you did through the browser against the messages captured in the **Proxy** | **HTTP
    history** table:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Proxy** | **HTTP history**选项卡中检查这些步骤。通过浏览器执行的步骤与**Proxy** | **HTTP history**表中捕获的消息进行对比：
- en: Request 1 in the following screenshot is unauthenticate
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下截图中的请求1是未经身份验证的
- en: Request 35 is the successful login (302) as ``admin``
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求35是成功登录（302）为`admin`
- en: Request 37 is the logout of the `admin` account
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求37是`admin`帐户的注销
- en: Requests 38 and 39 are the refresh or reload of the browser page, logging us
    out again
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求38和39是刷新或重新加载浏览器页面，再次将我们注销
- en: 'There is no request captured when you press the browser''s back button. This
    is because the back button action is contained in the browser. No message was
    sent through Burp to the web server to perform this action. This is an important
    distinction to note. Nonetheless, we found a vulnerability associated with weak
    browser-caching protection. In cases such as this, penetration testers will take
    a screenshot of the logged-in cached page, seen after clicking the back button:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您按浏览器的返回按钮时，不会捕获任何请求。这是因为返回按钮操作包含在浏览器中。没有通过Burp发送消息到Web服务器执行此操作。这是一个重要的区别需要注意。尽管如此，我们发现了与弱浏览器缓存保护相关的漏洞。在这种情况下，渗透测试人员将拍摄已登录缓存页面的截图，然后点击返回按钮后看到：
- en: '![](img/00168.jpeg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00168.jpeg)'
- en: Testing the account provisioning process via the REST API
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过REST API测试帐户配置过程
- en: Account provisioning is the process of establishing and maintaining user accounts
    within an application. Provisioning capabilities are usually restricted to administrator
    accounts. Penetration testers must validate account-provisioning functions are
    done by users providing proper identification and authorization. A common venue
    for account provisioning is through **Representational State Transfer** (**REST**)
    API calls. Many times, developers may not put the same authorization checks in
    place for API calls that are used in the UI portion of an application.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 帐户配置是在应用程序中建立和维护用户帐户的过程。配置功能通常仅限于管理员帐户。渗透测试人员必须验证用户提供适当的身份识别和授权来完成帐户配置功能。帐户配置的常见方式是通过**表述性状态转移**（**REST**）API调用。许多时候，开发人员可能不会为应用程序的UI部分使用的API调用设置相同的授权检查。
- en: Getting ready
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using REST API calls available in the OWASP Mutillidae II application, determine
    whether an unauthenticated API call can provision or modify users.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OWASP Mutillidae II应用程序中提供的REST API调用，确定未经身份验证的API调用是否可以配置或修改用户。
- en: How to do it...
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: Make sure you are not logged into the application. If you are, click the **Logout**
    button from the top menu.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您没有登录到应用程序中。如果登录了，请从顶部菜单中单击**Logout**按钮。
- en: 'Within Mutillidae, browse to the **User Lookup (SQL) Page** and select **OWASP
    2013** | **A1 Injection (SQL)** | **SQLi – Extract Data** | **User Info (SQL)**:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Mutillidae中，浏览到**User Lookup (SQL) Page**，然后选择**OWASP 2013** | **A1 Injection
    (SQL)** | **SQLi – Extract Data** | **User Info (SQL)**：
- en: '![](img/00169.jpeg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00169.jpeg)'
- en: 'Type `user` for **Name** and `user` for **Password**,and click **View Account
    Details***.* You should see the results shown in the next screenshot. This is
    the account we will test provisioning functions against, using REST calls:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Name**中键入`user`，在**Password**中键入`user`，然后单击**View Account Details**。您应该看到下一个截图中显示的结果。这是我们将使用REST调用测试配置功能的帐户：
- en: '![](img/00170.jpeg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00170.jpeg)'
- en: Through Spidering, Burp can find `/api` or `/rest` folders. Such folders are
    clues that an application is REST API enabled. A tester needs to determine which
    functions are available through these API calls.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Spidering，Burp可以找到`/api`或`/rest`文件夹。这些文件夹是应用程序启用REST API的线索。测试人员需要确定通过这些API调用可以使用哪些功能。
- en: For Mutillidae, the `/webservices/rest/` folder structure offers account provisioning
    through REST API calls.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于Mutillidae，`/webservices/rest/`文件夹结构通过REST API调用提供帐户配置。
- en: 'To go directly to this structure within Mutillidae, select **Web Services**
    | **REST** | **SQL Injection** | **User** **Account Management**:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要直接转到Mutillidae中的此结构，选择**Web Services** | **REST** | **SQL Injection** | **User**
    **Account Management**：
- en: '![](img/00171.jpeg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00171.jpeg)'
- en: 'You are presented with a screen describing the supported REST calls and parameters
    required for each call:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到一个屏幕，描述了支持的REST调用以及每个调用所需的参数：
- en: '![](img/00172.jpeg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00172.jpeg)'
- en: 'Let''s try to invoke one of the REST calls. Go to the **Proxy** | **HTTP history**
    table and select the latest request you sent from the menu, to get to the **User
    Account Management** page. Right-click and send this request to **Repeater**:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试调用其中一个REST调用。转到**Proxy** | **HTTP history**表，并选择您从菜单中发送的最新请求，以进入**User
    Account Management**页面。右键单击并将此请求发送到**Repeater**：
- en: '![](img/00173.jpeg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00173.jpeg)'
- en: 'In Burp''s **Repeater**, add the `?`, followed by a parameter name/value pair
    of `username=user` to the URL. The new URL should be as follows:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Burp的**Repeater**中，将`?`添加到URL后面，然后加上参数名/值对`username=user`。新的URL应该如下所示：
- en: '[PRE0]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](img/00174.jpeg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00174.jpeg)'
- en: 'Click the **Go** button and notice we are able to retrieve data as an unauthenticated
    user! No authentication token is required to perform such actions:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**Go**按钮，注意我们能够以未经身份验证的用户身份检索数据！执行此类操作无需身份验证令牌：
- en: '![](img/00175.jpeg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00175.jpeg)'
- en: Let's see what else we can do. Using the SQL Injection string given on the **User
    Account Management** page, let's attempt to dump the entire user table.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们看看还能做什么。使用**User Account Management**页面上给出的SQL注入字符串，让我们尝试转储整个用户表。
- en: 'Append the following value after `username=`:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`username=`后附加以下值：
- en: '[PRE1]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The new URL should be the following one:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 新的URL应该是以下一个：
- en: '[PRE2]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Click the **Go** button after making the change to the `username` parameter.
    Your request should look as shown in the following screenshot:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在更改`username`参数后，单击**Go**按钮。您的请求应如下所示：
- en: '![](img/00176.jpeg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00176.jpeg)'
- en: 'Notice we dumped all of the accounts in the database, displaying all usernames,
    passwords, and signatures:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，我们已经转储了数据库中的所有帐户，显示了所有用户名、密码和签名：
- en: '![](img/00177.jpeg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00177.jpeg)'
- en: Armed with this information, return to **Proxy** | **HTTP History**, select
    the request you made to see the **User** **Account Management** page, right-click,
    and send to **Repeater**.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 掌握了这些信息后，返回到**Proxy** | **HTTP History**，选择您发送到**User** **Account Management**页面的请求，右键单击，并发送到**Repeater**。
- en: 'In **Repeater**, modify the `GET` verb and replace it with `DELETE` within
    the **Raw** tab of the **Request**:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Repeater**中，修改`GET`动词，并在**Request**的**Raw**选项卡中用`DELETE`替换它：
- en: '![](img/00178.jpeg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00178.jpeg)'
- en: 'Move to the **Params** tab, click the **Add** button, and add two `Body` type
    parameters: first, a username with the value set to `user`, and second, a password
    with the value set to `user`, and then click the **Go** button:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**Params**选项卡，点击**添加**按钮，然后添加两个`Body`类型参数：首先，用户名设置为`user`，其次，密码设置为`user`，然后点击**Go**按钮：
- en: '![](img/00179.jpeg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00179.jpeg)'
- en: Notice we deleted the account! We were able to retrieve information and even
    modify (delete) rows within the database without ever showing an API key or authentication
    token!
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，我们已经删除了该账户！我们能够检索信息，甚至在不显示API密钥或身份验证令牌的情况下修改（删除）数据库中的行！
- en: '![](img/00180.jpeg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00180.jpeg)'
- en: 'Note: If you wish to re-create the user account, repeat the previous steps,
    replacing *delete *with *put*. A signature is optional. Click the **Go** button.
    The user account is re-created again.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：如果您希望重新创建用户账户，请重复上述步骤，将*delete*替换为*put*。签名是可选的。点击**Go**按钮。用户账户将被重新创建。
