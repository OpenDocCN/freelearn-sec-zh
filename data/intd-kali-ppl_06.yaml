- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Configuring the ELK Stack
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 ELK 堆栈
- en: In the previous chapter, you learned how to install Kali Linux on a device –
    which is only half the toolset of Kali Purple. This chapter will help you grasp
    the other half, the **ELK stack**. Now that Kali Linux is installed, you will
    use the command line to install and configure Elasticsearch, Logstash, and Kibana
    so that you can begin developing a fully functioning robust *Purple* cybersecurity
    system.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章，你学习了如何在设备上安装 Kali Linux —— 这只是 Kali Purple 工具集的一半。本章将帮助你掌握另一半，即 **ELK 堆栈**。现在
    Kali Linux 已经安装完毕，你将使用命令行来安装和配置 Elasticsearch、Logstash 和 Kibana，确保你可以开始开发一个功能完善、强大的
    *Purple* 网络安全系统。
- en: Note
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We will break the tide a tiny bit as we’ll install these utilities in an order
    that is different from how we mention them. Elasticsearch will come first. However,
    to fully appreciate and utilize this utility from a beginner standpoint, we are
    going to install Kibana right afterward and integrate the two. Logstash will be
    last. You will understand why as we negotiate the process. So, you might say the
    ELK stack is the EKL stack! It doesn’t matter what we call it, so long as we get
    them all up and running properly.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将稍微改变一下顺序，因为我们会按照与我们提到的顺序不同的方式安装这些工具。Elasticsearch 会先安装。然而，为了从初学者的角度完全理解和利用这个工具，我们将紧接着安装
    Kibana，并将二者进行集成。Logstash 将最后安装。在我们谈论整个过程时，你会明白为什么如此。所以，你可以说 ELK 堆栈就是 EKL 堆栈！我们怎么称呼它并不重要，只要确保它们都能正常运行。
- en: As we did in [*Chapter 3*](B21223_03.xhtml#_idTextAnchor052), we’re going to
    inject a generous dose of troubleshooting and solutions for issues that users
    commonly encounter while configuring the ELK stack. It is impossible to account
    for every possible issue because of product changes and improvements that are
    longstanding and will continue to occur long after this book is published. For
    that reason, we encourage you to read the troubleshooting scenarios even if they
    don’t apply to you because that will help mold and enhance your thinking into
    that of an analyst’s mindset.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在 [*第 3 章*](B21223_03.xhtml#_idTextAnchor052)所做的那样，我们将注入大量的故障排除方法和解决方案，来处理用户在配置
    ELK 堆栈时常遇到的问题。由于产品变更和改进是长期的，并且会在本书出版后继续发生，因此不可能预见到每一个可能的问题。因此，我们建议你阅读所有故障排除场景，即使它们与您无关，因为这将帮助你培养和增强分析师思维。
- en: By the end of this chapter, you’ll have set up a barebones SIEM technology.
    You’ll have also gained an understanding of how basic SIEM technologies manage
    data on the analyst side of things and how that data flows and is stored.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，你将搭建一个基础的 SIEM 技术平台。你还将理解基本 SIEM 技术如何在分析师侧管理数据，以及这些数据如何流动和存储。
- en: 'In this chapter, you will do the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容包括：
- en: Install Elasticsearch
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Elasticsearch
- en: Install Kibana and integrate it with Elasticsearch
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Kibana 并与 Elasticsearch 集成
- en: Install and integrate Logstash
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装并集成 Logstash
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You should be using the same device that you completed [*Chapter 3*](B21223_03.xhtml#_idTextAnchor052)
    with. However, the demands for Elasticsearch are more stringent. You can work
    with less RAM than stated here, but it will be sluggish. Here are the requirements:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该使用完成 [*第 3 章*](B21223_03.xhtml#_idTextAnchor052)的同一设备。然而，Elasticsearch 对设备要求更高。虽然你可以使用比这里列出的更少的内存，但会导致系统变慢。以下是要求：
- en: '**Minimum requirements**: A computing device with either the *amd64 (x86_64/64-bit)*
    or *i386 (x86/32-bit)* architecture. It should contain at least *8 GB of RAM*
    and an additional *10 GB* of disk space. Note that these minimum requirements
    are known to cause significant performance issues, so you should aim to meet or
    exceed the recommended requirements for a stress-free experience.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最低要求**：一台计算设备，架构为 *amd64 (x86_64/64-bit)* 或 *i386 (x86/32-bit)*，至少应该拥有 *8
    GB 的 RAM* 和额外的 *10 GB* 硬盘空间。请注意，这些最低要求已知会导致性能问题，因此你应该尽量满足或超过推荐要求，以获得更流畅的体验。'
- en: '**Recommended requirements**: Based on feedback from cybersecurity field practitioners,
    aim for the *amd64 (x86_64/64-bit)* architecture with *16 GB of RAM* – more is
    better – and up to *64 GB* of additional disk space.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**推荐要求**：根据网络安全领域从业人员的反馈，建议使用 *amd64 (x86_64/64-bit)* 架构，配备 *16 GB 的 RAM* ——
    更多内存更好 —— 以及最多 *64 GB* 的额外硬盘空间。'
- en: Elasticsearch
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Elasticsearch
- en: We learned a lot about the functionality of Elasticsearch in [*Chapter 2*](B21223_02.xhtml#_idTextAnchor039).
    Namely, we discovered that it’s an enhanced type of database for enriched SIEM
    information. Now that we’ve set up our Kali Purple operating system within a **virtual
    machine** (**VM**), what do you say we go out and grab ourselves a real copy of
    this famed Elasticsearch, and then install and configure it so that we can play
    with it?
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第2章*](B21223_02.xhtml#_idTextAnchor039)中学习了 Elasticsearch 的很多功能。特别是，我们发现它是一种增强型数据库，用于丰富
    SIEM 信息。现在我们已经在**虚拟机**(**VM**)中设置了 Kali Purple 操作系统，那么怎么样，我们去下载一份这个著名的 Elasticsearch，安装并配置它，好让我们可以开始使用它呢？
- en: Feel free to go back to [*Chapter 3*](B21223_03.xhtml#_idTextAnchor052) if you
    need a refresher on how to get up and running, as well as log in. Otherwise, start
    by opening VirtualBox and selecting the Kali Purple VM we’ve created. Assuming
    you’ve done no renegade independent adjustments on your own since then, that should
    be the only VM you have available to select at this time. Highlight it and click
    the **Start** button near the top-right of the window. Enter the credentials you
    created in [*Chapter 3*](B21223_03.xhtml#_idTextAnchor052) for your non-administrative
    account and click **Log In** to get yourself into the Kali Purple environment.
    Once there, select the small black square/rectangle on the top navigation pane
    to bring up a terminal window. You should now have a command prompt that includes
    your username to work with.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要复习如何启动和登录，可以随时回到[*第3章*](B21223_03.xhtml#_idTextAnchor052)。否则，首先打开 VirtualBox，选择我们之前创建的
    Kali Purple 虚拟机。假设你此后没有进行任何独立的修改，那么现在应该只有这一台虚拟机可以选择。选中它并点击窗口右上角的**启动**按钮。输入在[*第3章*](B21223_03.xhtml#_idTextAnchor052)中为非管理员账户创建的凭据，并点击**登录**进入
    Kali Purple 环境。进入后，选择顶部导航栏上的小黑色方块/矩形图标，打开终端窗口。此时，你应该能看到一个包含你用户名的命令提示符。
- en: Begin by typing **sudo apt update** and take note of the number of packages
    the terminal says you have available for upgrading. You must do this because after
    taking the next step, you will run this command again as a measure of quality
    control to ensure your upgrades are successful. The second time, that number should
    be significantly lower and possibly even zero.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，输入**sudo apt update**并注意终端显示的可升级软件包数量。你必须执行这一步，因为接下来的步骤中，你需要再次运行这个命令作为质量控制的手段，确保升级成功。第二次运行时，那个数字应该会显著减少，甚至可能为零。
- en: 'It is best practice to update and upgrade packages with each Linux boot:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的做法是在每次启动 Linux 时更新和升级软件包：
- en: '![Figure 4.1 – sudo apt update](image/B21223_04_1.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图4.1 – sudo apt update](image/B21223_04_1.jpg)'
- en: Figure 4.1 – sudo apt update
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1 – sudo apt update
- en: Bear in mind that this command doesn’t update your packages. It only fetches
    a list of available updates. It is good form to follow this command by updating
    the available packages. To perform the actual update, you must type **sudo apt
    upgrade**. However, make sure you do this after you run the update command; otherwise,
    any new packages will not be found and updated! The very first time you perform
    this action, it could take a significant amount of time, depending on the number
    of packages you have to upgrade. As shown in *Figure 4**.1*, there were over 800
    packages with upgrades available!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这个命令并不会更新你的软件包，它只是获取一个可用更新的列表。遵循此命令之后，通常应该更新可用的软件包。要执行实际的更新，你必须输入**sudo
    apt upgrade**。不过，要确保在运行更新命令之后再执行，否则任何新包都不会被找到和更新！第一次执行这个操作时，根据需要升级的软件包数量，这可能需要相当长的时间。如*图4.1*所示，当时有超过
    800 个可升级的软件包！
- en: Once the upgrade is complete, you will want to run the original **sudo apt update**
    command again. There may still be some packages with upgrades available, especially
    after your very first time doing this. This is because of the way some software
    teams develop improvements for their product. Sometimes, software teams will push
    out an update that only builds upon the previous update and is not an all-inclusive
    upgrade. This means that you must install a previous update first before installing
    the most recent update. Some software teams will ensure that every upgrade is
    standalone and can be applied after the initial installation. There’s no rhyme
    or reason to this other than the development and packaging methodology that’s
    used by any organization’s software team.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 升级完成后，你需要再次运行原始的 **sudo apt update** 命令。可能仍然会有一些可用的升级包，尤其是当你第一次进行此操作时。因为某些软件团队为其产品开发改进的方式，某些软件团队可能会发布一个仅基于前一个更新的更新，而不是一个完全的升级包。这意味着你必须先安装一个先前的更新，然后才能安装最新的更新。有些软件团队会确保每次升级都是独立的，并且可以在初始安装后应用。除此之外，其他原因主要是各个组织的软件团队采用的开发和打包方法。
- en: Lather. Rinse. Repeat. When you are satisfied with your total package upgrades,
    you will want to ensure any configuration or other changes made by any of those
    applications are recognized by your system. So, type **systemctl daemon-reload**.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 反复操作。每当你对整个软件包的升级感到满意时，你将希望确保系统能够识别任何由这些应用程序所做的配置或其他更改。所以，输入 **systemctl daemon-reload**。
- en: This command causes systemd to re-read its configuration files and reload the
    unit files. **Systemd** is a system and service manager for Linux operating systems
    that is responsible for controlling and managing the operating system, including
    processes, services, and attached devices. Any time you modify any configuration
    or unit files, you will want to run the preceding **daemon-reload** command to
    cause those modifications to be applied. In short, the command makes systemd aware
    that those changes were made. It’s a good habit to run this command after each
    major step of installing and/or configuring a new application or application suite.
    Doing so can prevent the frustrations of troubleshooting conflict resolution or
    why certain expected results aren’t happening.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令会导致 systemd 重新读取其配置文件并重新加载单元文件。**Systemd** 是一个用于 Linux 操作系统的系统和服务管理器，负责控制和管理操作系统，包括进程、服务和附加设备。每次修改任何配置或单元文件时，都需要运行前述的
    **daemon-reload** 命令，以便将这些修改应用到系统中。简而言之，该命令让 systemd 知道这些更改已被做出。养成在安装和/或配置新应用程序或应用程序套件的每个重要步骤后运行此命令的习惯，可以避免在解决冲突或发现某些预期结果未出现时的烦恼。
- en: Elasticsearch may already be installed by default, depending on what level of
    experimenter you are or have been in the past. If so, it just needs to make some
    configuration changes. In the odd chance it isn’t, you can type **sudo apt install
    elasticsearch**. However, try the following commands to see if it’s already installed.
    If they execute, then that means it was.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Elasticsearch 可能已经默认安装，这取决于你是哪个层次的实验者，或者过去是否曾经安装过。如果是这样，只需进行一些配置更改即可。如果没有安装，你可以输入
    **sudo apt install elasticsearch**。不过，先尝试以下命令，看看它是否已经安装。如果命令能够执行，那就说明它已经安装。
- en: To enable Elasticsearch to start up upon booting, type **sudo systemctl** **enable
    elasticsearch**.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使 Elasticsearch 在启动时自动启动，输入 **sudo systemctl** **enable elasticsearch**。
- en: The benefit of not having this service automatically start upon booting, as
    you might have guessed, is performance and potentially quicker loading of the
    environment. Just remember that if you choose not to enable Elasticsearch, you
    will have to manually start it each time you boot your Kali Purple instance. You
    can do that by running the **sudo systemctl start** **elasticsearch** command/
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 不让这个服务在启动时自动启动的好处，正如你可能猜到的，是性能和可能加快环境的加载速度。只需记住，如果你选择不启用 Elasticsearch，那么每次启动
    Kali Purple 实例时，你都需要手动启动它。你可以通过运行 **sudo systemctl start** **elasticsearch** 命令来做到这一点。
- en: 'Record the initial password and note the password reset and token generation
    commands:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 记录初始密码，并记录密码重置和令牌生成的命令：
- en: '![Figure 4.2 – Initial Elasticsearch configuration](image/B21223_04_2.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.2 – 初始 Elasticsearch 配置](image/B21223_04_2.jpg)'
- en: Figure 4.2 – Initial Elasticsearch configuration
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2 – 初始 Elasticsearch 配置
- en: If you haven’t started Elasticsearch in this instance, go ahead and do that
    now before proceeding to the next step. As highlighted in *Figure 4**.2*, you
    will want to take note of the default password because this is the only time it
    will be provided to you. Also, record the commands that are needed to change the
    password, if you so choose, and grab tokens for integrating Kibana with Elasticsearch.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在此实例中尚未启动Elasticsearch，请先启动它，再继续下一步。正如*图 4.2*中所突出显示的，你需要记下默认密码，因为这是唯一一次会提供给你密码的机会。另外，记录下更改密码所需的命令，如果需要的话，还可以获取用于将Kibana与Elasticsearch集成的令牌。
- en: Type **sudo systemctl status elasticsearch** to view the status of Elasticsearch.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 输入**sudo systemctl status elasticsearch**来查看Elasticsearch的状态。
- en: 'Its status will show as **Active** if it’s running. You can press *Ctrl* +
    *Z* to break out of the status screen if needed:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它正在运行，状态会显示为**活动**。如果需要，你可以按*Ctrl* + *Z*退出状态界面：
- en: '![Figure 4.3 – Status of Elasticsearch](image/B21223_04_3.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.3 – Elasticsearch 状态](image/B21223_04_3.jpg)'
- en: Figure 4.3 – Status of Elasticsearch
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3 – Elasticsearch 状态
- en: 'Elasticsearch will bind to localhost (IP address **127.0.0.1**) by default.
    If you want to access it remotely, you’ll want to configure it so that it binds
    to a different IP address. Do this by opening the configuration file using the
    nano text editor. Type **sudo nano /etc/elasticsearch/elasticsearch.yml** and
    look for the line that starts with **network.host** so that you can uncomment
    it by removing **#** at the beginning. You can use the arrow keys on your keyboard
    to physically navigate any file opened with the nano file editor. Even though
    the localhost IP of **127.0.0.1** that we are using for our example is a default,
    it’s good practice to still manually type that address in the **network.host**
    setting and uncomment it. That will establish a good habit of making sure you
    know where to go and adjust the setting. If you want that setting to bind to all
    interfaces, set it to **network.host: 0.0.0.0**, then save the changes before
    exiting the editor. This is virtually automatic since nano prompts you to save
    when you press *Ctrl* + *X* to leave the editor. Since adjusting this line created
    a new configuration change, you must type **sudo systemctl** **restart elasticsearch**.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '默认情况下，Elasticsearch会绑定到本地主机（IP地址**127.0.0.1**）。如果你想远程访问它，你需要配置它绑定到一个不同的IP地址。通过打开配置文件使用nano文本编辑器来完成此操作。输入**sudo
    nano /etc/elasticsearch/elasticsearch.yml**，然后查找以**network.host**开头的行，取消注释该行，即删除行首的**#**。你可以使用键盘上的箭头键来导航任何用nano文本编辑器打开的文件。尽管我们示例中使用的本地主机IP**127.0.0.1**是默认值，但手动在**network.host**设置中输入该地址并取消注释仍然是一个良好的实践。这会帮助你养成确保知道在哪里进行调整设置的好习惯。如果你希望该设置绑定到所有接口，可以将其设置为**network.host:
    0.0.0.0**，然后在退出编辑器之前保存更改。由于nano在你按*Ctrl* + *X*离开编辑器时会提示你保存，这个过程几乎是自动的。由于调整此行会创建新的配置更改，因此你必须输入**sudo
    systemctl restart elasticsearch**。'
- en: Open a web browser and point it to [https://localhost:9200](https://localhost:9200)
    while paying particular attention to the *s* after *http*. You can find an icon
    for the Firefox web browser in the top-left menu. It is critical to notice this
    detail because when you load Elasticsearch through the Kibana interface later,
    you will not include the *s*. The *s* stands for secure and it is there because
    all Elasticsearch versions after 8.0 distributed with security toggled on as a
    default setting. In this case, that means **Secure Socket Layer** (**SSL**) and
    **Transport Security Layer** (**TLS**) will be required for any HTTP protocol
    – browser – communications. While you certainly could turn security off, we’ll
    skip that walkthrough here because it’s simply not necessary for what we’re doing,
    not to mention discouraged.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个网页浏览器并指向[https://localhost:9200](https://localhost:9200)，特别注意*http*后的*s*。你可以在左上角的菜单中找到Firefox浏览器的图标。注意这个细节很重要，因为当你通过Kibana界面加载Elasticsearch时，稍后将不会包括这个*s*。*s*代表安全，它的存在是因为自8.0版本之后，所有的Elasticsearch版本默认启用了安全功能。在这种情况下，这意味着**安全套接层**（**SSL**）和**传输安全层**（**TLS**）将是任何HTTP协议
    – 浏览器 – 通信所必须的。虽然你确实可以关闭安全功能，但我们在这里不讨论这个过程，因为对于我们正在做的事情来说完全没有必要，更不用说它是不推荐的。
- en: If you provide the proper URL, your browser will initially display a security
    error, as shown in *Figure 4**.4*; that is a result of security being toggled
    on. There will either be a blue **Learn more…** link at the bottom left, an **Advanced...**
    button at the bottom right, or both. You should be able to select either one of
    those and be presented with an option to **Accept the Risk and Continue**. If
    one doesn’t give you that option, then the other will. It is perfectly okay to
    accept the risk in this instance because you’re attempting to connect to your
    own self and unless you have a hidden personality lurking somewhere inside your
    brain, you should be acutely aware that you’re not a threat to yourself.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你提供了正确的URL，浏览器最初会显示一个安全错误，如*图 4.4*所示；这是因为安全设置已启用。页面左下角会有一个蓝色的**Learn more…**链接，右下角会有一个**Advanced...**按钮，或者两者都有。你应该能选择其中任意一个，并且会看到一个**Accept
    the Risk and Continue**的选项。如果一个没有这个选项，另一个会有。在这种情况下，接受风险是完全可以的，因为你试图连接的是你自己的系统，除非你大脑里潜藏着某种隐藏人格，否则你应该非常清楚自己不会对自己构成威胁。
- en: 'Select **Learn more…** or **Advanced…** and then **Accept the Risk and Continue**.
    A login popup will appear:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**Learn more…**或**Advanced…**，然后点击**Accept the Risk and Continue**。登录弹窗将会出现：
- en: '![Figure 4.4 – Elasticsearch – initial web access](image/B21223_04_4.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.4 – Elasticsearch – 初始网页访问](image/B21223_04_4.jpg)'
- en: Figure 4.4 – Elasticsearch – initial web access
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – Elasticsearch – 初始网页访问
- en: Once you accept the risk, the browser will display a popup where you can enter
    the Elasticsearch superuser – which is simply the word **elastic** and the default
    password that you recorded earlier when you ran Elasticsearch for the first time.
    If for some reason you forgot to record that password, you can return to the command-line
    terminal and request a new one by typing **sudo /usr/share/elasticsearch/bin/elasticsearch-reset-password
    -u elastic**, where **-u** identifies the next word in the command as the username
    and **elastic** is the username of the superuser. You will be asked for your sudo
    password before it issues you a new Elasticsearch password. Make sure you are
    in the default home directory when you type that command. You can type **cd**
    to return home if you aren’t. You can type **pwd** to see where in the default
    filesystem you are located. It should return something like **/home/<username>**,
    where **username** is the account name you created for your non-administrative
    Kali Purple account. If it doesn’t, you aren’t in the home directory. Alternatively,
    you can navigate directly to the **/usr/share/elasticsearch/bin/** directory using
    the **cd** command. Once there, you only need to type **elasticsearch-reset-password
    -u elastic** to reset your password.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你接受风险，浏览器将显示一个弹窗，你可以在其中输入Elasticsearch超级用户——即**elastic**这个词，以及你在第一次运行Elasticsearch时记录的默认密码。如果出于某种原因你忘记了记录该密码，你可以返回命令行终端，通过输入**sudo
    /usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic**来请求一个新的密码，其中**-u**指定命令中的下一个词为用户名，**elastic**是超级用户的用户名。系统会要求你输入sudo密码，然后才会为你发放新的Elasticsearch密码。确保在输入该命令时，你处于默认的主目录。如果你不在主目录，可以输入**cd**返回主目录。你可以输入**pwd**查看当前所在的默认文件系统位置，应该返回类似**/home/<username>**的内容，其中**username**是你为非管理员的Kali
    Purple账户创建的账户名。如果不是，说明你不在主目录。或者，你也可以直接使用**cd**命令导航到**/usr/share/elasticsearch/bin/**目录。到了该目录后，你只需输入**elasticsearch-reset-password
    -u elastic**即可重置密码。
- en: Now, be prepared to be underwhelmed. If you’ve entered the correct credentials,
    a simple web page will load, showing your default Elasticsearch cluster in JSON
    format. If you look closely at the top left of this new display, you will see
    additional tabs to display the same data in raw format or to peek at the page
    header.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，准备好迎接失望吧。如果你输入了正确的凭证，一个简单的网页将加载，显示你默认的Elasticsearch集群，格式为JSON。如果你仔细观察新界面左上角，你会看到额外的标签，可以以原始格式显示相同的数据，或者查看页面头部。
- en: 'So, why on Earth did we put you through all this torturous effort just to show
    a few lines of text on your screen? There are three reasons:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，究竟为什么要让你经历这么多繁琐的步骤，仅仅为了在屏幕上显示几行文本呢？有三个原因：
- en: Rumor has it that pulling you apart at the rack is now illegal
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有传闻说，现在将你拉到刑架上是违法的。
- en: You get a visual confirmation that your Elasticsearch installation was successful
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你将看到一个视觉上的确认，表明你的Elasticsearch安装成功。
- en: You’ll appreciate the Kibana graphic interface that much more once we install
    it
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦我们安装Kibana，你会更加欣赏其图形界面。
- en: With that, you now understand why we are going to install the ELK stack as an
    EKL stack. We are going to completely disrespect the ELK acronym and do this our
    own rebellious way. Installing and configuring Elasticsearch first is the only
    true necessary order of precedence but installing these items the way we are going
    to covers the dependencies each product has on others. So, there is a method to
    our madness.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这样一来，你现在明白了为什么我们要以 EKL 栈的形式安装 ELK 栈。我们将完全无视 ELK 这一缩写，并以我们自己的反叛方式进行操作。首先安装和配置
    Elasticsearch 是唯一真正必要的优先顺序，但我们按照这种方式安装这些项目，是为了涵盖每个产品对其他产品的依赖关系。所以，我们的疯狂之中其实有方法。
- en: If you’re the gambling type and decide to install your items in an order we
    don’t present here, be prepared to encounter additional errors and challenges.
    That’s not an instruction for you not to do so, however. Some engineering personality
    types will purposely do things that way for the sheer enjoyment of learning by
    creating problems to solve. Others will do it because they are non-conformists
    by nature and simply don’t like to be told what to do. Both types are loved and
    welcomed in the Kali Purple community! If either of these apply to you, we hereby
    validate your feelings. It’s folks like you who help others learn. Please share
    your lessons in community forums. It will help and empower others to discover
    and process the finer details.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是那种喜欢冒险的人，决定按照我们这里没有提到的顺序安装项目，做好遇到额外错误和挑战的准备。不过，这并不是告诉你不要这样做。某些工程师性格的人会故意以这种方式做事，因为他们享受通过制造问题来解决问题的学习过程。还有一些人则是天生的反叛者，不喜欢别人告诉他们该做什么。两种类型的人在
    Kali Purple 社区中都受到喜爱和欢迎！如果你符合其中之一，我们在此验证你的感受。正是像你这样的人帮助别人学习。请在社区论坛分享你的经验，这将帮助并赋能他人发现和处理那些细节。
- en: Nevertheless, this is an introductory process and because this is introductory,
    you shouldn’t need to concern yourself with those finer details at this point
    if you don’t wish to. It’s something you will still discover as time goes on and
    you become more adept at using these products. Onward to Kibana!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这只是一个入门过程，由于这是入门阶段，如果你不愿意，现在不需要过于关注那些细节。这些细节你会随着时间的推移，在使用这些产品时逐渐发现。接下来，让我们继续了解
    Kibana！
- en: Kibana
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kibana
- en: For Kibana to have any real value here, it’s mission-critical that you have
    first installed Elasticsearch. As we have already discussed, that’s the most important
    order of operations for installing and configuring the ELK stack. Assuming you’ve
    done that, we’ll proceed with the best practice of updating the package index.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让 Kibana 在这里发挥实际作用，首先安装 Elasticsearch 是至关重要的。正如我们已经讨论过的那样，这是安装和配置 ELK 栈时最重要的操作顺序。假设你已经完成了这一部分，我们将继续进行更新软件包索引的最佳实践。
- en: Begin by typing **sudo apt update** to get a list of packages that have updates
    available. Whether you choose to perform the update or not is up to you. It’s
    good form to do so but certainly not required. To perform the update, you must
    type **sudo apt upgrade** after the previous command has finished executing.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，输入 **sudo apt update**，以获取可用更新的软件包列表。是否执行更新由你决定。执行更新是好习惯，但绝对不是必须的。要执行更新，在前一个命令执行完毕后，输入
    **sudo apt upgrade**。
- en: Then, as a best practice, you will also want to type **systemctl daemon-reload**
    just to develop the habit of doing so. This will ensure any configuration changes
    you’ve made that you might have forgotten about are first recognized by systemd
    before restarting the services. Then, you will want to restart the services you’ve
    used since your last package to apply any such changes to the service. In this
    case, the only service we’ve worked with so far is Elasticsearch. So, the command
    you seek is **sudo systemctl restart elasticsearch**. Don’t forget to type **sudo
    systemctl status elasticsearch** after the command prompt returns to verify that
    Elasticsearch did, indeed, start and is active.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，作为最佳实践，你还应该输入 **systemctl daemon-reload**，以养成这个习惯。这将确保你所做的任何配置更改，即使你可能忘记了，也会被
    systemd 首先识别到，然后再重新启动服务。接下来，你需要重启自上次安装包以来使用的服务，以应用这些更改。在这种情况下，到目前为止我们唯一操作过的服务是
    Elasticsearch。所以，你需要的命令是 **sudo systemctl restart elasticsearch**。命令提示符返回后，别忘了输入
    **sudo systemctl status elasticsearch**，以验证 Elasticsearch 是否确实启动并且处于活动状态。
- en: Now, we can grab Kibana by typing **sudo apt install kibana**. As we did with
    Elasticsearch, we can enable Kibana to automatically start up upon booting by
    typing **sudo systemctl** **enable kibana**.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过输入 **sudo apt install kibana** 来安装 Kibana。和 Elasticsearch 一样，我们可以通过输入
    **sudo systemctl** **enable kibana** 来启用 Kibana 在启动时自动启动。
- en: To start Kibana, type **sudo systemctl** **start kibana**.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动 Kibana，输入 **sudo systemctl** **start kibana**。
- en: To verify the status and ensure Kibana is successfully running, type **sudo
    systemctl** **status kibana**.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证状态并确保 Kibana 正常运行，输入 **sudo systemctl** **status kibana**。
- en: 'Kibana will show as active if it’s been installed and started correctly:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Kibana 已正确安装并启动，它将显示为活动状态：
- en: '![Figure 4.5 – Kibana status with the initial login URL and verification code](image/B21223_04_5.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![Figure 4.5 – Kibana 状态与初始登录 URL 和验证代码](image/B21223_04_5.jpg)'
- en: Figure 4.5 – Kibana status with the initial login URL and verification code
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 4.5 – Kibana 状态与初始登录 URL 和验证代码
- en: If the status does not return to the command prompt promptly, you can hold down
    *Ctrl* + *Z* to forcefully break out of the status screen. The next step, as suggested
    near the bottom of *Figure 4**.5*, is to load a browser, as we did with Elasticsearch.
    However, this time, we’re using a different port number and we’re also leaving
    the *s* off the end of http.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果状态没有及时返回命令提示符，您可以按住 *Ctrl* + *Z* 强制退出状态屏幕。接下来的步骤，如 *Figure 4**.5* 底部所示，是加载浏览器，和我们之前操作
    Elasticsearch 时一样。不过这次，我们使用的是不同的端口号，并且也没有在 http 后加上 *s*。
- en: While best practices suggest that Kibana should also use the secure HTTPS protocol,
    it is configured to use the HTTP protocol by default for performance reasons.
    Kibana, being a visual utility, is heavy on CPU resources by default. For the
    data to be compromised, it would have to be intercepted between Kibana and Elasticsearch,
    which are usually both located within the same internal network. Elasticsearch,
    in contrast, can be receiving data externally, from data shippers and agents outside
    of your network, so the data is far more vulnerable, making a default security-on
    approach more practical and necessary.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管最佳实践建议 Kibana 应该使用安全的 HTTPS 协议，但出于性能考虑，默认配置为使用 HTTP 协议。由于 Kibana 是一个可视化工具，默认情况下会占用大量的
    CPU 资源。为了使数据受到威胁，它必须在 Kibana 和 Elasticsearch 之间被拦截，而这两者通常位于同一个内部网络中。与此相对，Elasticsearch
    可能会接收来自外部网络的数据，这使得数据更容易受到威胁，因此默认开启安全性措施更加实际和必要。
- en: This subtle discrepancy often tends to cause confusion among first-time ELK
    stack users/installers. Just remember that for any part of this process, if you
    get hung up or if you’re simply the experimental type and like to color outside
    the lines by doing things we haven’t talked about, you can inspect any error messages
    regarding Elasticsearch, Kibana, or Logstash by using the change directory command.
    To do so, navigate to the file by typing **cd /var/log/**; then, once in the directory,
    type **ls** to view the available log file options. Each application that you
    have installed up to that point should have a file listed in that directory. To
    view any particular file, type **cat <filename>**. So, to view Kibana logs, you
    would type **cat Kibana**. Replace the word **Kibana** with the filename of whichever
    log you’d like to view out of the options presented when you typed **ls**.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这种细微的差异常常让第一次使用 ELK 堆栈的用户/安装人员感到困惑。只需记住，在整个过程中，如果您遇到卡住的情况，或者您是喜欢进行实验、超出我们讨论范围的用户，您可以通过使用更改目录命令来检查任何关于
    Elasticsearch、Kibana 或 Logstash 的错误消息。为此，通过输入 **cd /var/log/** 来导航到文件夹；然后进入目录后，输入
    **ls** 查看可用的日志文件选项。在此之前安装的每个应用程序应该都在该目录下有一个文件列出。要查看某个特定文件，输入 **cat <filename>**。例如，要查看
    Kibana 的日志，您可以输入 **cat Kibana**。将 **Kibana** 替换为您希望查看的任何日志文件的文件名，该文件名会在您输入 **ls**
    后列出的选项中。
- en: 'The verification code shown at the bottom of *Figure 4**.5* will not be shown
    on that screen if you haven’t yet loaded the Kibana interface in a web browser
    and entered the enrollment token. That token may have been provided to you during
    Elasticsearch’s and/or Kibana’s initial startup. However, if you missed it, you
    can create a new one by going into the command line and typing **sudo /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token
    -s kibana**. A very long and obscure alphanumeric code will print to your terminal
    screen. Select and copy that code before pasting it into the **Enrollment token**
    box that appears in your browser the first time you load Kibana, as seen in *Figure
    4**.6*:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有在网页浏览器中加载 Kibana 界面并输入注册令牌，*图 4**.5*底部显示的验证码将不会出现在该屏幕上。该令牌可能是在 Elasticsearch
    和/或 Kibana 初始启动期间提供给你的。如果你错过了它，你可以通过进入命令行并键入**sudo /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token
    -s kibana**来创建一个新的令牌。一个非常长且难以理解的字母数字代码会显示在你的终端屏幕上。选择并复制该代码，然后将其粘贴到你第一次加载 Kibana
    时浏览器中出现的**Enrollment token**框中，如*图 4**.6*所示：
- en: '![Figure 4.6 – First Kibana browser instance asking for the enrollment token](image/B21223_04_6.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.6 – 第一个 Kibana 浏览器实例请求注册令牌](image/B21223_04_6.jpg)'
- en: Figure 4.6 – First Kibana browser instance asking for the enrollment token
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6 – 第一个 Kibana 浏览器实例请求注册令牌
- en: Load your browser and either point it to http://localhost:5601/?code=<VERIFICATION_CODE>,
    where **VERIFICATION_CODE** is what your screen shows instead of **754098**, which
    is shown in *Figure 4**.5*, or point it to the simpler [http://localhost:5601](http://localhost:5601);
    the browser will prompt you to enter the code manually. Either way, you’ll get
    the same result. If you forget the verification code, you can type **sudo systemctl
    status kibana** to view it again at the bottom of the output.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器并将其指向 http://localhost:5601/?code=<VERIFICATION_CODE>，其中**VERIFICATION_CODE**是屏幕上显示的验证码，而不是*图
    4**.5*中显示的**754098**，或者直接指向更简单的[http://localhost:5601](http://localhost:5601)；浏览器将提示你手动输入验证码。无论哪种方式，你都会得到相同的结果。如果你忘记了验证码，可以键入**sudo
    systemctl status kibana**来再次查看它，该验证码将显示在输出的底部。
- en: Note
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: When you first launch a browser session after installing and starting Kibana,
    you will likely get your first test of computing resources. If at this point or
    any point hereafter you find that your VM’s performance is sluggish, you’ll be
    happy to know that you can adjust the memory, CPU, and other resources you allocated
    to the VM when you first created it.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在安装并启动 Kibana 后第一次启动浏览器会话时，你可能会遇到计算资源的第一次测试。如果此时或之后的任何时候，你发现虚拟机的性能较慢，您会很高兴地知道，你可以调整在创建虚拟机时分配给虚拟机的内存、CPU
    和其他资源。
- en: In VirtualBox, this can be done by powering down your VM and selecting **Settings**
    from the Oracle VM VirtualBox Manager lobby screen (the first screen that loads
    when you launch VirtualBox). Keep in mind that the **Settings** button will address
    whichever VM you have selected, should you have more than one VM. Alternatively,
    you can right-click on your desired VM and select **Settings** from that angle.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在 VirtualBox 中，可以通过关闭虚拟机并从 Oracle VM VirtualBox 管理器主屏幕（即启动 VirtualBox 时加载的第一个屏幕）选择**设置**来完成此操作。请记住，**设置**按钮将针对你选择的虚拟机，如果你有多个虚拟机的话。或者，你也可以右键点击你想要的虚拟机，并从该角度选择**设置**。
- en: The two tabs in the resulting left column that are most likely pertinent to
    your performance are **System** and **Display**. From within those two areas,
    you can adjust your processing power, RAM, video RAM, and more. It is paramount
    that you do not try to allocate more resources to your VM than your host machine
    has available, considering other applications outside of your virtualization software.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在出现的左侧列中的两个选项卡，**系统**和**显示**，最有可能与你的性能相关。在这两个区域内，你可以调整处理能力、RAM、视频内存等。务必记住，不要尝试为虚拟机分配超过主机机器可用资源的量，因为还需要考虑虚拟化软件以外的其他应用程序。
- en: We provided instructions for VirtualBox because that’s what we’ll be using in
    this book. However, nearly any virtualization software will have the same options
    available. It would be impractical for us to provide instructions for each of
    the virtualization applications on the market. However, the skill of independent
    research is expected of a security professional. A simple Google or other search
    engine inquiry asking how to adjust resource allocation with your brand of virtualization
    software should more than suffice.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供了 VirtualBox 的使用说明，因为本书中我们将使用它。然而，几乎所有虚拟化软件都提供相同的选项。为每种市场上的虚拟化应用程序提供说明是不切实际的。然而，作为安全专业人员，独立研究的能力是必备的。只需简单地在
    Google 或其他搜索引擎中查询如何调整资源分配，就足以解决问题。
- en: 'Once you’ve confirmed your verification code, addressed any performance and/or
    VM settings, and logged in to the Kibana interface using the same Elastic credentials
    you used for Elasticsearch, you will be presented with a screen giving you the
    option to **Add integrations** or **Explore on my own**. Go ahead and select the
    **Add integrations** button and prepare to feel like a rich kid in an overstocked
    candy store:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确认了你的验证码，解决了任何性能和/或虚拟机设置问题，并使用与 Elasticsearch 相同的 Elastic 凭据登录到 Kibana 界面，你将看到一个屏幕，提供**添加集成**或**自行探索**的选项。点击**添加集成**按钮，准备好像在过剩糖果店的富家子弟一样：
- en: '![Figure 4.7 – Kibana’s visual lobby upon logging in to Elasticsearch](image/B21223_04_7.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.7 – 登录到 Elasticsearch 后 Kibana 的视觉大厅](image/B21223_04_7.jpg)'
- en: Figure 4.7 – Kibana’s visual lobby upon logging in to Elasticsearch
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.7 – 登录到 Elasticsearch 后 Kibana 的视觉大厅
- en: You will be presented with over 350 options of potential Kibana integrations.
    Just above the **All categories** column on the left, you’ll see the option to
    **Browse integrations**. This should be highlighted in blue to indicate you are
    currently at that location. Just to the right of that, you will see a black **Installed
    integrations** option, which is meant to catalog any integrations you might have
    already installed. Go ahead and click **Installed integrations**.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到超过 350 种可能的 Kibana 集成选项。在左侧的**所有类别**列上方，你会看到**浏览集成**的选项。此选项应以蓝色突出显示，表示你当前在该位置。紧挨着它的右侧，你将看到一个黑色的**已安装集成**选项，用于列出你可能已安装的任何集成。点击**已安装集成**。
- en: 'Kibana offers 350+ stable integrations – approximately 400 if you select the
    **Display beta** **integrations** button:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Kibana 提供 350 多种稳定的集成 —— 如果你选择**显示 beta** **集成**按钮，则大约有 400 种：
- en: '![Figure 4.8 – Kibana’s Integrations page](image/B21223_04_8.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.8 – Kibana 的集成页面](image/B21223_04_8.jpg)'
- en: Figure 4.8 – Kibana’s Integrations page
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.8 – Kibana 的集成页面
- en: You will see that you already have an item installed called **Elastic Synthetics**.
    This is the core Elastic agent that is installed by default. Each time you add
    a new integration, it will appear in this list. Return to **Browse integrations**
    and take some time to play around with some or all those options.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到已经安装了一个名为**Elastic Synthetics**的项目。这是默认安装的核心 Elastic 代理。每次你添加新的集成时，它都会出现在这个列表中。返回到**浏览集成**，花些时间尝试其中的某些或所有选项。
- en: 'If for some reason you back yourself into a corner, you can utilize the following
    command sequence to remove Kibana:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于某些原因你将自己逼入困境，你可以使用以下命令序列来移除 Kibana：
- en: Type **sudo systemctl** **stop kibana**.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入**sudo systemctl** **stop kibana**。
- en: Type **sudo systemctl** **disable kibana**.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入**sudo systemctl** **disable kibana**。
- en: Type **sudo apt** **remove kibana**.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入**sudo apt** **remove kibana**。
- en: Type **sudo apt** **purge kibana**.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入**sudo apt** **purge kibana**。
- en: Purging will attempt to clean up any residual configuration files so that you
    don’t have unexpected discrepancies on any future installations.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 清除操作将尝试清理任何残留的配置文件，以便在未来的安装中避免出现意外的差异。
- en: This same process works for Elasticsearch and Logstash as well, should you decide
    to start over on any of these utilities. You can simply substitute the names of
    those applications with **kibana** in the commands listed earlier. Should you
    feel confident and playful, it might not be a bad idea to install and uninstall
    some of these items several times anyway just to get a feel for the process. Repetition
    is the mother of all learning and practical application is the father. Here, you’re
    getting both.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定重新开始安装这些工具，同样的过程也适用于 Elasticsearch 和 Logstash。你只需将之前命令中的应用名称替换为**kibana**即可。如果你感觉自信并且想要尝试，安装和卸载这些工具几次也是个不错的主意，这样你可以更好地了解整个过程。重复是学习之母，而实践是学习之父。在这里，你将同时获得两者。
- en: Amid your well-deserved gloating of having successfully installed Elasticsearch
    and Kibana, you might have noticed that, in the **Browse integrations** section,
    you have the option to install Logstash from within the Kibana environment. We’ll
    cover that in the next chapter, which focuses on acquiring the data we will be
    running through the ELK stack. Graphically adding Logstash comes with the option
    of adding the Elastic agent – an alternative to Beats. For the sake of consistency
    and developing a necessary skill regarding command-line work, we are going to
    install Logstash from the command line in the next section. We’re on a roll! So,
    let’s charge forward with Logstash.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在你成功安装 Elasticsearch 和 Kibana 后，或许你会注意到，在**浏览集成**部分，你可以选择在 Kibana 环境中安装 Logstash。我们将在下一章讨论这一点，重点讲解如何获取我们将在
    ELK 堆栈中处理的数据。通过图形化界面添加 Logstash 时，你还有选择添加 Elastic 代理的选项——这是 Beats 的替代方案。为了保持一致性并培养必要的命令行操作技能，我们将在下一节通过命令行安装
    Logstash。我们已经有了一个不错的开局！那么，让我们继续推进，安装 Logstash。
- en: Logstash
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Logstash
- en: You may have already done so but since we don’t know when you will take a break
    from reading this, we will continue to develop the best practice habit of updating
    your package lists before every single new installation, just like we did when
    we transitioned from Elasticsearch to Kibana.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经这么做了，但因为我们不知道你何时会停下来看书，所以我们将继续养成在每次新安装之前更新软件包列表的最佳实践，就像我们从 Elasticsearch
    切换到 Kibana 时做的那样。
- en: Begin by typing **sudo apt update**. If you’re new to working within a Linux
    environment, you might have noticed by now that even with the frequency of us
    utilizing this command, there is an almost constant stream of new updates for
    one thing or another. If you haven’t experienced this yet, then that just means
    you’re working at a quick pace and covering a lot of ground at once. There’s nothing
    wrong with that but don’t let it fool you. The first time you step away for a
    day or two, you’ll come back and run this command to find there are new package
    updates available. That’s why we will make a habit of running it after every package
    installation and every time we log on to our Kali Purple system.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 首先输入 **sudo apt update**。如果你是第一次在 Linux 环境中工作，你可能已经注意到，即使我们频繁使用这个命令，几乎总有新更新不断推出。如果你还没有遇到这种情况，那意味着你正在快速工作，覆盖的内容也很多。没有什么问题，但不要被这个速度迷惑。当你第一次休息一两天后，再回来运行这个命令时，你会发现有新的软件包更新可用。这就是为什么我们会养成在每次安装软件包后、以及每次登录到
    Kali Purple 系统时运行它的习惯。
- en: Go ahead and plop a **sudo apt update** command in there, followed by **sudo
    apt upgrade** to update your packages if you’re willing. Then, type **systemctl
    daemon-reload**. This isn’t something you necessarily need to do with every logon
    but it should be a habit when you’re in the midst of a project that involves having
    to install and configure a lot of new packages – as we are now.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 继续输入 **sudo apt update** 命令，接着输入 **sudo apt upgrade** 来更新你的软件包（如果你愿意的话）。然后输入
    **systemctl daemon-reload**。这不是每次登录都必须做的事情，但如果你正在进行一个涉及大量新软件包安装和配置的项目——像我们现在这样时，这个步骤应该成为一种习惯。
- en: Logstash is one of the applications we spoke of in [*Chapter 3*](B21223_03.xhtml#_idTextAnchor052)
    that requires the **Java Development Kit** (**JDK**). If you followed the directions
    in that chapter, then you already have it installed. Otherwise, you might wish
    to peek back near the end of that chapter and get it taken care of. It’s quick
    and painless.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Logstash 是我们在[ *第 3 章*](B21223_03.xhtml#_idTextAnchor052)中提到的需要 **Java 开发工具包**（**JDK**）的应用。如果你按照那一章的指示操作，说明你已经安装好了
    JDK。如果没有，或许你可以返回那一章的结尾部分，赶紧安装一下。过程简单且无痛苦。
- en: Begin installing Logstash by typing **sudo apt** **install logstash**.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 输入 **sudo apt install logstash** 开始安装 Logstash。
- en: Set Logstash to automatically start upon system boot by typing **sudo systemctl
    enable logstash**. If you ever wish to adjust this setting for any of the applications
    you’ve set to automatically start thus far, you can simply type **sudo systemctl
    disable logstash** – a command you were briefly introduced to at the end of the
    previous section – to set it to manually start. This means you will have to manually
    turn it on every time you boot your system by running the start command.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通过输入 **sudo systemctl enable logstash**，将 Logstash 设置为在系统启动时自动启动。如果您希望调整此前设置为自动启动的任何应用程序的此设置，可以输入
    **sudo systemctl disable logstash** – 这是上一节末尾简要介绍过的命令 – 以将其设置为手动启动。这意味着每次启动系统时，您必须手动运行启动命令才能启动它。
- en: Start the Logstash service by typing **sudo service logstash start**. Next,
    you will want to verify the status and ensure Logstash is successfully running
    by typing **sudo systemctl status logstash**. When ready and if needed, press
    *Ctrl* + *Z* to break out of the status screen.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 输入 **sudo service logstash start** 启动 Logstash 服务。接下来，您需要输入 **sudo systemctl
    status logstash** 来验证状态，确保 Logstash 正在成功运行。准备好后，如果需要，可以按 *Ctrl* + *Z* 退出状态屏幕。
- en: Now, because one of Logstash’s primary functions is dependent upon moving data,
    we need to test it out and make sure the pipeline for doing so is functioning
    as expected. We will do that by going into Logstash itself, creating a basic pipeline,
    typing a command, and examining whether that command was taken and processed by
    Logstash. It’s simpler than it sounds. Using the **change directory** (**cd**)
    command, navigate to the Logstash installation. To get there, type **cd /usr/share/logstash**.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Logstash 的主要功能之一依赖于数据传输，我们需要进行测试，确保用于此操作的管道正常工作。我们将通过进入 Logstash，创建一个基本的管道，输入一个命令，并检查该命令是否被
    Logstash 接收并处理来进行测试。其实比听起来简单。使用 **change directory**（**cd**）命令，导航到 Logstash 安装目录。要到达该目录，输入
    **cd /usr/share/logstash**。
- en: 'If you’re uncertain of yourself, you can use the **print working directory**
    (**pwd**) command after you type the preceding command to verify your location.
    Type **pwd**; it should return **/usr/share/logstash**. Before you attempt to
    open the pipeline, you will want to ensure you and any other applications trying
    to access Logstash have the ability and permissions to do so. Type **sudo chmod
    -R 777 /usr/share/logstash/data** to set the correct permissions for the entire
    file path. From that location, open a pipeline within the Logstash application
    by typing **bin/logstash -e ''input { stdin {} } output { stdout {} }''** while
    paying particular attention to the single quote and braces instead of parenthesis.
    Wait a few moments for the pipeline to open. You’ll know this was successful when
    your terminal delivers some text stating that the main pipeline or Java pipeline
    has started, as seen in *Figure 4**.9*:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不确定自己所在的位置，可以在输入前述命令后，使用 **print working directory**（**pwd**）命令来验证您的位置。输入
    **pwd**，它应返回 **/usr/share/logstash**。在尝试打开管道之前，您需要确保您和任何其他尝试访问 Logstash 的应用程序都有访问权限。输入
    **sudo chmod -R 777 /usr/share/logstash/data** 来为整个文件路径设置正确的权限。在该位置，输入 **bin/logstash
    -e 'input { stdin {} } output { stdout {} }'** 来打开 Logstash 应用程序中的管道，特别注意使用单引号和大括号，而不是圆括号。稍等片刻，等待管道打开。您会知道这是成功的，当您的终端显示一些文本，表明主管道或
    Java 管道已启动，如 *图 4.9* 中所示：
- en: '![Figure 4.9 – Logstash – basic Java pipeline](image/B21223_04_9.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.9 – Logstash – 基本的 Java 管道](image/B21223_04_9.jpg)'
- en: Figure 4.9 – Logstash – basic Java pipeline
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.9 – Logstash – 基本的 Java 管道
- en: Note
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: During this process, you may notice some warnings. You can safely ignore these
    if you followed our lead exactly. Those warnings are there with a valid purpose,
    but the machine has no way of knowing that we are installing and configuring these
    applications for the first time. They should go away after the ELK stack has been
    fully configured and is functional.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程中，您可能会看到一些警告。如果您完全按照我们的指引操作，可以安全地忽略这些警告。这些警告是有其有效目的的，但计算机无法知道我们是在首次安装和配置这些应用程序。在
    ELK 堆栈完全配置并正常运行后，这些警告应该会消失。
- en: The exact text that’s returned to you might vary depending on which version
    of Logstash you have installed since the product is actively updated and will
    continue to be long after this book goes to press. Sometimes, this process takes
    a while to set itself up in the background properly. If you encounter an error,
    wait a few minutes and type the command again. It has been reported by testers
    that simply having to wait and re-enter the command has been necessary. In the
    previous command, everything after **-e** is the command to open the pipeline.
    This **-e** tells Kali that it’s okay for us to attach this command to Logstash
    and execute it in one statement at the command line. Programmers and software
    engineers, especially those of you who’ve worked with the C family of languages,
    will recognize **stdin** and **stdout** as core functions for managing input and
    output. They stand for **standard input** and **standard output**, respectively.
    The command is more or less telling Logstash to take the input it is about to
    receive and process it as output.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给你的确切文本可能会根据你安装的 Logstash 版本有所不同，因为该产品正在积极更新，并将在本书出版后继续更新。有时，设置过程需要一段时间才能在后台正确配置。如果你遇到错误，等待几分钟后再输入一次命令。测试人员报告说，通常需要等待并重新输入命令。之前的命令中，**-e**
    后面的内容是打开管道的命令。这个 **-e** 告诉 Kali，可以将该命令附加到 Logstash 并在命令行中执行。程序员和软件工程师，尤其是那些有过
    C 类语言工作经验的你们，会认识到 **stdin** 和 **stdout** 是用于管理输入和输出的核心功能。它们分别代表 **标准输入** 和 **标准输出**。这个命令基本上是告诉
    Logstash 获取即将接收到的输入并将其处理为输出。
- en: 'Now, let’s test this new pipeline we’ve opened within Logstash by typing **I
    love Kali Purple** within our terminal window. If Logstash was installed correctly,
    started without error, and the pipeline from the previous step was set up correctly,
    then you should see that a timestamp has been added and the output has been returned
    to you, as seen in *Figure 4**.10*:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过在终端窗口中输入 **I love Kali Purple** 来测试我们在 Logstash 中打开的这个新管道。如果 Logstash
    安装正确、没有错误启动，并且之前步骤中的管道设置正确，那么你应该会看到已添加时间戳，并且输出已经返回给你，如 *图 4.10* 所示：
- en: '![Figure 4.10 – Logstash’s successful input/output processing](image/B21223_04_10.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.10 – Logstash 成功的输入/输出处理](image/B21223_04_10.jpg)'
- en: Figure 4.10 – Logstash’s successful input/output processing
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.10 – Logstash 成功的输入/输出处理
- en: Press *Ctrl* + *D* to break out of Logstash and return to your command prompt.
    One last task you must complete is to configure Logstash so that it can index
    your data within Elasticsearch.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 按 *Ctrl* + *D* 退出 Logstash 并返回到命令提示符。你必须完成的最后一项任务是配置 Logstash，使其能够在 Elasticsearch
    中索引你的数据。
- en: '*“But Karl, I have no data!”* I hear ya. I feel the same way every morning
    until about my second or third cup of coffee. In the next chapter, we will focus
    on acquiring the data and passing it through the ELK stack using Beats and sample
    datasets. For now, though, we are simply setting the tools up for use.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '*“但是 Karl，我没有数据！”* 我理解你。我每天早上也有同样的感受，直到喝到第二或第三杯咖啡为止。在下一章，我们将专注于获取数据并通过 ELK
    堆栈使用 Beats 和示例数据集进行处理。不过现在，我们只是为使用工具做准备。'
- en: To configure Logstash to index your data within Elasticsearch, you will want
    to use the **cd** function to navigate to the Logstash home folder. To do that,
    type **cd /etc/logstash**. There are many ways to accomplish this Elasticsearch
    indexing goal, but we don’t know what future iterations of these applications
    will be. We also have no clue whether you leave your Kali Purple instance completely
    exposed while you walk your dog so that prankster teenagers can delete your files.
    Therefore, we are going to show you the bare-bones, from-scratch, effort-exerting,
    sweat-producing method first.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置 Logstash 在 Elasticsearch 中索引你的数据，你需要使用 **cd** 命令导航到 Logstash 的主目录。为此，输入
    **cd /etc/logstash**。有很多方法可以实现 Elasticsearch 索引目标，但我们无法预测这些应用程序的未来版本。我们也不知道你是否在遛狗时把
    Kali Purple 实例完全暴露，任由恶作剧的青少年删除你的文件。因此，我们将首先展示最基础、从零开始、需要努力的、流汗的方法。
- en: To do so, you need to create a pipeline file; within that file, you must identify
    where your input is coming from, any special filters (both in the next chapter),
    and where your output is going. Type **sudo touch learning-purple.conf** to create
    the file and then use the list command – **ls** – to verify that your file exists
    in the directory. If it isn’t, it’s likely the result of a typo, so try again.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，你需要创建一个管道文件；在该文件中，你必须指定输入来源、任何特殊过滤器（将在下一章介绍），以及输出去向。输入**sudo touch learning-purple.conf**来创建文件，然后使用列表命令
    – **ls** – 验证该文件是否存在于目录中。如果文件不存在，很可能是由于输入错误，所以请重试。
- en: 'Once it’s been created, we can edit the file with nano. Type **sudo nano learning-purple.conf**
    while in the same directory to open the newly created and completely blank file.
    If you’re no longer in the directory, either navigate to it or prepend the previous
    command with the **/etc/logstash/** filepath. If you’re unfamiliar with that term,
    think of the word append. If you’re appending something, you’re adding to the
    end of it. An appendix in a book, for example, means you’re adding an index at
    the end. In this case, prepend means you’re adding to the beginning of something
    – you’re adding the file before the previous command: **sudo nano /etc/logstash/learning-purple.conf**.
    That’s a free bonus lesson that has nothing to do with Kali Purple or the ELK
    stack because you’ll likely encounter that term again throughout your cybersecurity
    career. Once the file is open, insert the following code:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 创建完成后，我们可以使用nano编辑文件。在相同的目录下输入**sudo nano learning-purple.conf**来打开新创建的完全空白的文件。如果你已经不在该目录中，可以导航到该目录，或者在前面的命令前添加**/etc/logstash/**文件路径。如果你不熟悉这个术语，可以将其理解为“添加”。当你添加某物时，意味着你将它放在后面。比如书籍中的附录，意味着你在书的末尾添加了索引。在这个例子中，prepend意思是将内容添加到某事的开头
    – 你是在前面的命令之前添加文件：**sudo nano /etc/logstash/learning-purple.conf**。这是一个额外的知识点，和Kali
    Purple或ELK堆栈无关，因为你很可能会在网络安全的职业生涯中再次遇到这个术语。一旦文件打开，插入以下代码：
- en: '[PRE0]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding scenario, make sure you substitute **ElasticSuperUserPassword**
    with the password you received and/or created when you launched Elasticsearch
    for the very first time. This will be the same password you used to log in to
    Kibana for the first time, helping Kibana to integrate with Elasticsearch.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述场景中，确保将**ElasticSuperUserPassword**替换为你首次启动Elasticsearch时收到的密码和/或你创建的密码。这将是你首次登录Kibana时使用的相同密码，帮助Kibana与Elasticsearch进行集成。
- en: Keep in mind that if you change this password at any time, you will have to
    go through each application that is integrated with Elasticsearch manually and
    update their configuration files, lest they no longer be able to access Elasticsearch
    to do their job!
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果你在任何时候更改了这个密码，你将必须手动检查与Elasticsearch集成的每个应用程序，并更新它们的配置文件，否则它们将无法访问Elasticsearch，无法正常工作！
- en: Note
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This type of non-human authentication is what is generally referred to as a
    **service account** in the world of technology. You will want to study more about
    service accounts, especially well-known service accounts, as a cybersecurity analyst
    because having that knowledge may help you to examine security alerts to determine
    what’s occurring. One popular service account you are likely to see frequently
    is called **NT AUTHORITY\SYSTEM**. This is a built-in Windows user account that
    contains the absolute highest level of system privileges on a Windows operating
    system. It is created during the initial installation of a Windows operating system
    and is used to integrate services and processes within. That makes it a ripe target
    for bad actors and why its presence in a security alert justifies a deeper analysis.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这种非人工认证通常被称为**服务账户**，在技术领域中是如此。作为一名网络安全分析师，你需要深入了解服务账户，特别是那些知名的服务账户，因为这些知识可以帮助你分析安全警报，判断发生了什么。你很可能经常遇到的一个流行服务账户是**NT
    AUTHORITY\SYSTEM**。这是一个内置的Windows用户账户，具有Windows操作系统中最高级别的系统权限。它在Windows操作系统初始安装时创建，并用于集成系统内部的服务和进程。这使得它成为恶意攻击者的目标，因此它出现在安全警报中时，值得进行深入分析。
- en: 'Press *Ctrl* + *X* and select *Y* if prompted to save and close the file we
    just created. Now, our job isn’t done quite yet. We want to perform a configuration
    validation and syntax check of our newly created file. With the following command,
    make sure you use two tack symbols (minus signs) before the term **--path.config**
    but elsewhere leave only one. Enter the following behemoth of a command into your
    terminal all on one line:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 按下*Ctrl* + *X*并选择*Y*，如果系统提示你保存并关闭我们刚才创建的文件。现在，我们的工作还没完全结束。我们想要对我们新创建的文件进行配置验证和语法检查。使用以下命令时，请确保在**--path.config**前面使用两个连字符（减号），但其他地方只用一个。将以下庞大的命令输入到你的终端中，全部在一行内：
- en: '[PRE1]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Be patient. This may take a minute or two to complete.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 请耐心等待。这可能需要一两分钟才能完成。
- en: 'Logstash has a built-in configuration file validator and syntax checker:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Logstash内置了一个配置文件验证器和语法检查工具：
- en: '![Figure 4.11 – The configuration file passes validation](image/B21223_04_11.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.11 – 配置文件通过验证](image/B21223_04_11.jpg)'
- en: Figure 4.11 – The configuration file passes validation
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.11 – 配置文件通过验证
- en: Another method of setting up Logstash to report its data to Elasticsearch for
    indexing would be to edit **logstash-sample.conf** if you have one in your version
    of the product. It can be found in the same directory where we created **learning-purple.conf**.
    It is a best practice, however, not to edit default sample files in any technology
    but rather make a copy of them and edit the copy. That way, you always have a
    fresh unaltered original to work from if you make a mistake.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种将Logstash设置为将数据报告给Elasticsearch进行索引的方法是编辑**logstash-sample.conf**（如果你的产品版本中有该文件）。它可以在我们创建**learning-purple.conf**的同一目录下找到。然而，最佳实践是不要编辑任何技术中的默认示例文件，而是复制它们并编辑副本。这样，如果你犯了错误，始终可以从未修改过的原始文件开始工作。
- en: The format of the command to copy a file is **sudo cp <originalFile><newFileCopy>**
    if you’re in the same directory. For example, **sudo cp logstash-sample.conf logstash-sample-two.conf**
    will create a new file named **logstash-sample-two.conf** that will have identical
    contents to **logstash-sample.conf**. If you aren’t inside that directory, then
    you must prepend the file path for each file within the command – for example,
    **sudo cp /etc/logstash/logstash-sample.conf /etc/logstash/logstash-sample-two.conf**.
    You should do this even if you want the file copy to reside in the same directory
    as the original (otherwise, the copy will be placed inside the directory where
    you’re currently residing).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在同一目录下，复制文件的命令格式是**sudo cp <originalFile><newFileCopy>**。例如，**sudo cp logstash-sample.conf
    logstash-sample-two.conf**将创建一个名为**logstash-sample-two.conf**的新文件，其内容与**logstash-sample.conf**相同。如果你不在该目录下，那么你必须在命令中为每个文件添加文件路径，例如**sudo
    cp /etc/logstash/logstash-sample.conf /etc/logstash/logstash-sample-two.conf**。即使你希望文件副本与原文件在同一目录下，也应该这样做（否则，副本将被放置在你当前所在的目录中）。
- en: Keep in mind that you still need to edit the new file and add the credentials
    for the Elastic service account. You will also want to ensure you remove any **#**
    symbols in front of the lines for the user and password so that the file can be
    read. Otherwise, the **#** symbols tell Logstash to ignore everything that comes
    after it on the line because whatever information might be there is meant for
    humans only, not machines. This convention allows developers and users of the
    application to read the files and understand what’s going on. The addition of
    such comments is considered a best practice for coding and/or scripting and is
    highly encouraged.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，你仍然需要编辑新文件并添加Elastic服务帐户的凭据。你还需要确保删除用户和密码行前的**#**符号，这样文件才能被读取。否则，**#**符号会告诉Logstash忽略该行后面的内容，因为那部分信息仅供人类阅读，而不是机器。这种约定使开发者和应用用户可以读取文件并理解文件内容。添加此类注释被认为是编码和/或脚本编写的最佳实践，并且强烈推荐使用。
- en: The ELK stack is not exclusive to Kali Purple. It is cross-platform-compatible
    and available in many different formats, including cloud-hosted. However, this
    book is about Kali Purple and our focus with the ELK stack is going to be how
    it relates to Kali Purple. Keep in mind that this is only one small piece of the
    overall Purple puzzle. Once we’ve finished configuring the ELK stack and have
    it running by the end of the next chapter, we will transition to other Kali Purple
    tools in future chapters. Those tools will integrate with the ELK stack and provide
    us with our full SOC solution.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: ELK栈并不只限于Kali Purple。它是跨平台兼容的，并且有多种格式，包括云托管版本。然而，本书主要讲的是Kali Purple，我们对ELK栈的关注将集中在它如何与Kali
    Purple相关联。请记住，这只是整个Purple解决方案中的一小部分。一旦我们完成配置ELK栈并让它在下一章结束时运行，我们将转向Kali Purple的其他工具。那些工具将与ELK栈集成，提供完整的SOC解决方案。
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered how to install and configure the three key components
    of the ELK stack. These components work together to receive, enrich, index, and
    display what data analysts need to do their jobs. Along the way, we learned about
    a bunch of related useful information that is likely to be seen again and again
    as you progress through your cybersecurity career.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们介绍了如何安装和配置ELK栈的三个关键组件。这些组件共同工作，接收、丰富、索引并显示数据分析人员所需的信息。在此过程中，我们还学到了一些相关的有用信息，这些内容可能会在你未来的网络安全职业中反复出现。
- en: Then, we learned about some best practices, such as updating and upgrading after
    each new system boot and adding human-readable comments to code and configuration
    files. We also covered how to view the status of the applications after we start
    them, along with a bunch of commands to manipulate them, such as setting them
    to autostart upon boot and how to stop, disable, and remove them if needed.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们学习了一些最佳实践，比如在每次系统启动后进行更新和升级，并且在代码和配置文件中添加易于阅读的注释。我们还介绍了如何在启动应用程序后查看其状态，以及一系列操作命令，比如设置应用程序开机自启，以及如何在需要时停止、禁用或删除它们。
- en: These tasks provided us with a robust skill set to manipulate the ELK stack’s
    components so that they fit our needs. That includes our experiences testing our
    configurations and how to integrate the components using a service account.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这些任务为我们提供了一套强大的技能，能够操作ELK栈的组件，使其符合我们的需求。这包括测试我们的配置的经验以及如何使用服务账户集成这些组件。
- en: In the next chapter, we’re going to take this a step further and learn about
    some additional components of the ELK stack that are meant to collect the data
    we need and ship it to us. We’ll learn how to deploy these endpoint agents and
    set up a Logstash filter for data enrichment. We will also grab a sample set of
    data to run through our new SIEM system and finally begin to see it working as
    a full unit!
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将进一步学习ELK栈的其他组件，这些组件用于收集我们需要的数据并将其传送给我们。我们将学习如何部署这些端点代理并设置Logstash过滤器来丰富数据。我们还将获取一组数据样本，通过我们的新SIEM系统进行处理，并最终看到它作为一个完整单元运行！
- en: Questions
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Answer the following questions to test your knowledge of this chapter:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题来测试你对本章的理解：
- en: Which ELK stack component covered in this chapter relies on the JDK we installed?
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本章介绍的ELK栈组件中，依赖我们安装的JDK的是哪个？
- en: Kibana
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kibana
- en: Elasticsearch
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Elasticsearch
- en: Logstash
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Logstash
- en: 'True or false: Logstash can be installed through the Kibana GUI.'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对或错：可以通过Kibana GUI安装Logstash。
- en: 'True'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误
- en: What is the significance of the password that’s provided during the very first
    Elasticsearch run?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一次运行Elasticsearch时提供的密码有何重要意义？
- en: It is a service account password that’s used to integrate the ELK stack components
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它是一个服务账户密码，用于集成ELK栈组件。
- en: It can never be changed
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它永远不能更改。
- en: It’s used to integrate the ELK stack components but is not technically a service
    account
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它用于集成ELK栈组件，但技术上不是一个服务账户。
- en: It can be changed a maximum of four times.
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它最多可以更改四次。
- en: What is the primary function of a service account?
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务账户的主要功能是什么？
- en: It manages running background services
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它管理运行中的后台服务。
- en: It’s a non-human account to assist applications integrating with each other
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它是一个非人类账户，用于帮助应用程序之间的集成。
- en: It holds services accountable for their actions
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它让服务对其行为负责。
- en: It sends you an automated text to notify you when your car is due for an oil
    change
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它会自动向你发送短信，提醒你汽车需要更换机油。
- en: What is the default port Elasticsearch binds to?
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Elasticsearch绑定的默认端口是什么？
- en: '**5601**'
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**5601**'
- en: '**5400**'
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**5400**'
- en: '**9201**'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**9201**'
- en: '**9200**'
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**9200**'
- en: Which of the following commands cleans up residual configuration files?
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个命令用于清理残留的配置文件？
- en: '**sudo apt** **purge <package>**'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**sudo apt** **清除 <package>**'
- en: '**sudo apt** **remove <package>**'
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**sudo apt** **移除 <package>**'
- en: '**sudo apt** **disable <package>**'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**sudo apt** **禁用 <package>**'
- en: '**sudo apt** **disintegrate <package>**'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**sudo apt** **分解 <package>**'
- en: Further reading
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To learn more about the topics that were covered in this chapter, take a look
    at the following resources:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解本章中涉及的更多主题，请查看以下资源：
- en: '**Elasticsearch** **guide**: [https://www.elastic.co/guide/en/elasticsearch/reference/current/index.xhtml](https://www.elastic.co/guide/en/elasticsearch/reference/current/index.xhtml)'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Elasticsearch** **指南**: [https://www.elastic.co/guide/en/elasticsearch/reference/current/index.xhtml](https://www.elastic.co/guide/en/elasticsearch/reference/current/index.xhtml)'
- en: '**Kibana** **guide**: [https://www.elastic.co/guide/en/kibana/current/index.xhtml](https://www.elastic.co/guide/en/kibana/current/index.xhtml)'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kibana** **指南**: [https://www.elastic.co/guide/en/kibana/current/index.xhtml](https://www.elastic.co/guide/en/kibana/current/index.xhtml)'
- en: '**Logstash** **guide**: [https://www.elastic.co/guide/en/logstash/current/index.xhtml](https://www.elastic.co/guide/en/logstash/current/index.xhtml)'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Logstash** **指南**: [https://www.elastic.co/guide/en/logstash/current/index.xhtml](https://www.elastic.co/guide/en/logstash/current/index.xhtml)'
