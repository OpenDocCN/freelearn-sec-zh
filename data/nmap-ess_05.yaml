- en: Chapter 5. Performance Optimization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。性能优化
- en: 'We are now completely able to scan many different types of hosts, and overcome
    a plethora of methods that system administrators and network engineers use to
    defend or mask their machines. Excellent! At this juncture, we will begin to look
    at some of the broader strokes that Nmap can address: specifically, the difficulty
    we may encounter if we attempt to scan large swaths of IP addresses that may create
    performance disruptions.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在完全能够扫描许多不同类型的主机，并克服系统管理员和网络工程师用来保护或隐藏他们的机器的各种方法。太棒了！在这一点上，我们将开始研究Nmap可以解决的一些更广泛的问题：特别是，如果我们尝试扫描可能会导致性能中断的大量IP地址。
- en: Unfortunately, using advanced Nmap options, which we learned about in the last
    chapter, can make scans take significantly longer time than we may have. Performance
    optimization techniques are some of the least used but most useful Nmap flags,
    so it's worth it to learn them well—and to employ them when needed.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，使用我们在上一章学到的高级Nmap选项可能会使扫描花费比我们预期的时间更长。性能优化技术是一些最少使用但最有用的Nmap标志，因此值得好好学习它们—并在需要时使用它们。
- en: 'In this chapter, we will cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Basic Nmap timing optimization
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本的Nmap时间优化
- en: Customized host group sizes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义主机组大小
- en: How to increase or decrease Nmap's parallelism
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何增加或减少Nmap的并行性
- en: How to deal with stuck hosts
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何处理卡住的主机
- en: How to delay (or increase the rate of) individual packets
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何延迟（或增加）单个数据包的速率
- en: Nmap timing optimization
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nmap时间优化
- en: The easiest way to make a scan run faster is to use the built-in `timing` flags.
    These flags are invoked using `-T` and a number from 1 (slowest) to 5 (fastest).
    The default scanning speed is `-T3`, right in the middle.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使扫描运行更快的最简单方法是使用内置的`timing`标志。这些标志使用`-T`和数字从1（最慢）到5（最快）来调用。默认的扫描速度是`-T3`，正好在中间。
- en: There are a few risks to use significantly faster scanning, since it creates
    certain unreliable aspects in the scan. Particularly, if your network interface
    is known to be reliable, these options should be used with caution!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用显著更快的扫描存在一些风险，因为它会在扫描中产生某些不可靠的方面。特别是，如果您的网络接口被认为是可靠的，这些选项应该谨慎使用！
- en: The default timing flags change six different elements—many of which we'll go
    into specific detail, later in this chapter. Specifically, the timing flags change
    the individual values of `initial_rtt_timeout`, `min_rtt_timeout`, `max_rtt_timeout`,
    `max_parallelism`, `scan_delay`, and `max_scan_delay`. Don't worry if these flags
    sound strange to you—we'll cover the different ones you need to know in enough
    detail that you should be able to debug a large variety of network and performance
    issues.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的时间标志改变了六个不同的元素—其中许多我们稍后会详细介绍。具体来说，时间标志改变了`initial_rtt_timeout`、`min_rtt_timeout`、`max_rtt_timeout`、`max_parallelism`、`scan_delay`和`max_scan_delay`的各个值。如果这些标志对您听起来很奇怪，不要担心—我们将详细介绍您需要了解的不同标志，以便您能够调试各种网络和性能问题。
- en: '![Nmap timing optimization](img/BO4089_05_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![Nmap时间优化](img/BO4089_05_01.jpg)'
- en: The preceding screenshot, downloaded from [http://www.professormesser.com/](http://www.professormesser.com/),
    shows how the `-T` flags optimize in various different ways. The most important
    distinctions are the parallel to serial transition between `-T3` and `-T2` (meaning
    that hosts are no longer scanned at the same time), and the significant time out
    differences across the board.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图是从[http://www.professormesser.com/](http://www.professormesser.com/)下载的，显示了`-T`标志在各种不同方式上的优化。最重要的区别是在`-T3`和`-T2`之间的并行到串行转换（意味着主机不再同时扫描），以及整体上显著的超时差异。
- en: System administrators also make the target less vulnerable by increasing the
    time to respond, as much of the time host information can be read from TTL values,
    as well.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 系统管理员也通过增加响应时间来减少目标的脆弱性，因为大部分时间主机信息可以从TTL值中读取。
- en: Running an "insane" scan can clearly make a large network block go faster, but
    it's interesting to note that on the other end of the spectrum, "sneaky" and "paranoid"
    scans (`-T1` and `-T0`) can be very effective at "hiding" port scans.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 运行“疯狂”扫描显然可以使大型网络块更快，但有趣的是，另一端的“隐秘”和“偏执”扫描（`-T1`和`-T0`）在“隐藏”端口扫描方面非常有效。
- en: If we are working on a penetration testing engagement with intrusion detection
    systems and intrusion prevention systems running, it can be very beneficial to
    run these slow scans.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在进行渗透测试时，入侵检测系统和入侵预防系统正在运行，运行这些慢速扫描可能非常有益。
- en: '![Nmap timing optimization](img/BO4089_05_02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![Nmap时间优化](img/BO4089_05_02.jpg)'
- en: As you can see in the preceding screenshot, a `-T5` scan against `scanme.nmap.org`
    (including all ports) took only one minute (and one second), as is visible in
    the output from the `time` command and Nmap's own timing calculator. On the other
    hand, running a `-T1` scan—otherwise called "sneaky"—takes significantly longer.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的截图中所看到的，对`scanme.nmap.org`进行的`-T5`扫描（包括所有端口）只花了一分钟（一秒），这在`time`命令的输出和Nmap自己的时间计算器中都可以看到。另一方面，运行一个“隐秘”的`-T1`扫描花费的时间要长得多。
- en: In order to show the true effect of a long-term slow scan, we ran a `-T1` scan
    against the same host—you can see here that after sixteen hours, the scan was
    still only 2.75% done—that is a very slow scan! It's easy to see how we wouldn't
    want these scanning options to go through a large block of IP addresses, but that
    to be extra stealthy on a client engagement (such as one running an IDS or IPS),
    it could be invaluable.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示长期慢速扫描的真实效果，我们对同一台主机运行了一个`-T1`扫描—您可以在这里看到，经过十六个小时，扫描仍然只完成了2.75%—这是一个非常慢的扫描！很容易看出，我们不希望这些扫描选项通过大量的IP地址，但是在客户参与中额外隐蔽（比如运行IDS或IPS的客户）可能非常宝贵。
- en: '![Nmap timing optimization](img/BO4089_05_03.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![Nmap时间优化](img/BO4089_05_03.jpg)'
- en: Customized host group sizes
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义主机组大小
- en: In order to scan hosts efficiently, Nmap uses groups of hosts that it scans
    at the same time. Assuming your Internet connection (and computer processing power)
    is sufficient, it's generally better to increase the host group sizes to finish
    large scans quickly. For example, if you're scanning 1,000 hosts with a host group
    size of 250, it will only take four "sweeps" to complete the full scan in parallel.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效地扫描主机，Nmap使用同时扫描的主机组。假设你的互联网连接（和计算机处理能力）足够，通常最好增加主机组的大小以快速完成大型扫描。例如，如果你正在扫描1000个主机，主机组大小为250，那么只需要四次“扫描”就可以并行完成整个扫描。
- en: However, one should carefully weigh what they're looking to achieve by changing
    the host group sizes. The benefit of scanning many hosts at once is clear, but
    the downside may not be—if you're scanning a large group, you have to wait for
    the entire host group to be finished scanning before seeing any results and moving
    onto another group. If you are trying to see results quickly, a smaller host group
    would be better for your specific scan.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一个人应该仔细权衡他们通过改变主机组大小所希望实现的目标。一次扫描许多主机的好处是明显的，但坏处可能并不明显——如果你正在扫描一个大组，你必须等待整个主机组完成扫描，然后才能看到任何结果并继续下一个组。如果你想快速看到结果，一个较小的主机组对于你的特定扫描会更好。
- en: 'By default, Nmap tries to take a dynamic middle-ground approach to host group
    sizes: it dynamically changes the host groups to accommodate a verbose scan (so
    we can see what''s happening) and efficiency (so the full scan finishes quickly).
    Nmap starts host groups as low as 4 or 5, and increases them to as high as 1024—all
    automatically.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Nmap会尝试采取动态的中间路线来处理主机组大小：它会动态改变主机组以适应详细扫描（这样我们可以看到发生了什么）和效率（这样完整扫描会很快完成）。Nmap从4或5开始主机组，并将它们自动增加到1024。
- en: 'If you''re looking for fine-tuned control, however, there are two host group
    flags you should keep in mind: `--min-hostgroup` and `--max-hostgroup`. If you''re
    planning to scan a full class C network, for example, specifying a group size
    of 256 would finish this run-through in one large, parallel pass—greatly increasing
    the efficiency of the scanning engine.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你正在寻求精细调控，有两个主机组标志你应该记住：`--min-hostgroup`和`--max-hostgroup`。例如，如果你计划扫描一个完整的C类网络，指定一个大小为256的组将在一个大的并行通道中完成这次运行，大大提高了扫描引擎的效率。
- en: It's worth noting that host group specification does not work for host discovery
    scans, including ping sweeps—Nmap will automatically use very large (usually 4096)
    host groups in order to make these run efficiently.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，主机组规范对主机发现扫描并不起作用，包括ping扫描——Nmap将自动使用非常大（通常为4096）的主机组，以便使这些扫描运行高效。
- en: Increasing and decreasing parallelism
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增加和减少并行性
- en: Although the host group size customization we just learned about can help increase
    or decrease parallelism in full scans, it doesn't deal with the numbers of probes
    that are being sent out at a time. The actual parallelism flags, however, can
    help us deal with that!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们刚刚学到的主机组大小定制可以帮助增加或减少完整扫描的并行性，但它并不处理同时发送的探测数量。然而，实际的并行性标志可以帮助我们处理这个问题！
- en: As with many things, Nmap will attempt to automatically create the most efficient
    scanning groups, which is great for almost all instances. In my experience, changing
    the number of simultaneous probes being sent out without having a serious education
    in networking can result in disaster—but that's not always the case.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 和许多事情一样，Nmap会尝试自动创建最有效的扫描组，这对几乎所有情况都很好。根据我的经验，在没有进行严肃的网络教育的情况下，改变同时发送的探测数量可能会导致灾难，但并非总是如此。
- en: By increasing the value of `--min-parallelism`—say up to 10 or 12—you can force
    Nmap to scan at least that fast. Nmap will still make the scan run faster if it
    needs to, which reduces some of the risk.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过增加`--min-parallelism`的值，比如增加到10或12，你可以强制Nmap至少以这样的速度进行扫描。Nmap仍然会使扫描运行得更快，如果需要的话，这样可以减少一些风险。
- en: On the other hand, it's possible to set the value of `--max-parallelism` as
    low as 1\. This is very useful; in the sense that you can force Nmap to send out
    only one probe at a time, but also force the tool to run extremely slowly (as
    you might imagine). We can use tricks like this to fool security systems, or to
    ensure that the reliability of our scans are never impacted by network-related
    issues.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，将`--max-parallelism`的值设置得低至1是非常有用的；这样可以强制Nmap一次只发送一个探测，但也会使工具运行得非常慢（正如你所想象的那样）。我们可以利用这样的技巧来愚弄安全系统，或者确保我们的扫描可靠性永远不会受到网络相关问题的影响。
- en: If you see hosts that appear to not be finishing, or you're very concerned with
    the number of hosts that are scanned in a current group, adjusting parallelism
    can be very useful.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到主机似乎无法完成，或者你非常关心当前组中扫描的主机数量，调整并行性可能非常有用。
- en: Dealing with stuck hosts
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理卡住的主机
- en: Unfortunately, when dealing with large blocks of IP addresses—which is a very
    common occurrence if you're scanning a large enterprise, whether for internal
    security purposes or as a client engagement—it isn't uncommon to deal with stuck
    hosts.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，当处理大量IP地址块时——如果你正在扫描一个大型企业，无论是出于内部安全目的还是作为客户参与，这是一个非常常见的情况——遇到卡住的主机并不罕见。
- en: When a host gets stuck, it means that something is stopping the scan from completing
    at a normal rate. This could be caused by something benign such as a network hiccup
    on either end of the connection, or something more intentional such as a security
    software that is intentionally making the target host respond very slowly or inconsistently—effectively
    breaking the scan.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个主机卡住时，意味着有些东西阻止了扫描以正常速度完成。这可能是由于一些无害的原因，比如连接的任一端出现了网络故障，也可能是更有意图的原因，比如一个安全软件故意使目标主机响应非常缓慢或不一致——有效地破坏了扫描。
- en: For the purposes of demonstration, I am going to start a ping agnostic (`-Pn`)
    scan against a host that doesn't exist on my network. There's no way you can get
    results from it, but it can still take a very long time to scan.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示目的，我将开始对我的网络上不存在的主机进行一个ping不可知（`-Pn`）扫描。你无法从中获得结果，但扫描可能需要很长时间。
- en: '![Dealing with stuck hosts](img/BO4089_05_04.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![处理卡住的主机](img/BO4089_05_04.jpg)'
- en: You can see in the preceding screenshot that it took 1,051 seconds—or seventeen
    minutes—to scan this non-existent host. Nmap did the best it could to change RTT
    variables in an attempt to compensate for any network problems, but in the end
    it took a very long time to realize that nothing was there. Think about what would
    happen if you were scanning a Class B network! We would be waiting for days, weeks,
    or years for the scan to complete. No one wants to watch an unresponsive Nmap
    screen!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在上面的截图中看到，扫描这个不存在的主机花了1,051秒，或者十七分钟。Nmap尽其所能改变RTT变量，试图补偿任何网络问题，但最终花了很长时间才意识到那里什么都没有。想象一下，如果您正在扫描一个B类网络会发生什么！我们将等待几天、几周或几年才能完成扫描。没有人想看一个无响应的Nmap屏幕！
- en: '![Dealing with stuck hosts](img/BO4089_05_05.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![处理卡住的主机](img/BO4089_05_05.jpg)'
- en: In this second scan against a host that doesn't exist, we kept the same flags,
    but changed `--host-timeout` to 1 minute. As you can see, after 60 seconds, Nmap
    gave up on the host and finished the scan—one seventeenth of the time it would
    have taken to complete!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在对一个不存在的主机进行第二次扫描时，我们保持了相同的标志，但将`--host-timeout`更改为1分钟。如您所见，60秒后，Nmap放弃了对主机的扫描，并完成了扫描——这比完成扫描所需的时间少了十七分之一！
- en: The `--host-timeout` flag is very useful, especially in large scans, but make
    sure that you don't set the time too low—or Nmap will give up on hosts that it
    was still actively scanning! In many assessments, my team will set `--host-timeout`
    to 10 minutes, which generally is enough time for many port scans to complete
    without any error per host. Combined with parallelism and host group customization,
    setting a host time out flag can save significant amounts of time on larger target
    hosts.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`--host-timeout`标志非常有用，特别是在大型扫描中，但要确保不要将时间设置得太低——否则Nmap会放弃仍在积极扫描的主机！在许多评估中，我的团队会将`--host-timeout`设置为10分钟，这通常足够多个端口扫描在每个主机上完成而没有任何错误。结合并行性和主机组定制，设置主机超时标志可以节省大型目标主机的大量时间。'
- en: Delaying and increasing probe rates
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 延迟和增加探测速率
- en: The last important timing improvement flag to understand is delaying and increasing
    rates directly. This is probably the most fine-tuned of the performance optimization,
    and should generally only be used if there is a specific problem you are trying
    to solve, or a situation you are trying to create.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个重要的定时改进标志是直接延迟和增加速率。这可能是性能优化中最精细调整的部分，通常只有在您试图解决特定问题或创建特定情况时才会使用。
- en: The first of these flags, `--scan-delay`, specifies the amount of time that
    Nmap should wait, not doing anything, between probes. This can be extremely useful
    in slowing scans down (and sometimes speeding them up, with a low scan-delay).
    Again, the most common usage of slowing down scans is to avoid detection of a
    target administrator or security system, or to try to avoid network throttling
    issues. Since many systems use the rate at which requests are being made to determine
    whether or not the machine is under attack, this can be a very stealthy technique
    without very much effort on the part of the tester. It's also useful to note that
    `--max-scan-delay` can be used in conjunction with other timing flags to supersede
    them, and ensure that scan delays are never slower than a certain amount of time.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个标志`--scan-delay`指定了Nmap在探测之间等待不做任何事情的时间。这在减慢扫描速度（有时候加快扫描速度，使用较低的scan-delay）方面非常有用。再次强调，减慢扫描的最常见用途是为了避免目标管理员或安全系统的检测，或者尝试避免网络限速问题。由于许多系统使用请求速率来确定机器是否受到攻击，这可以是一种非常隐秘的技术，而测试人员几乎不需要付出太多努力。还值得注意的是，`--max-scan-delay`可以与其他定时标志一起使用，以取代它们，并确保扫描延迟永远不会慢于某个时间。
- en: '![Delaying and increasing probe rates](img/BO4089_05_06.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![延迟和增加探测速率](img/BO4089_05_06.jpg)'
- en: You can see in the preceding screenshot that increasing `--scan-delay` to 5
    seconds made a four-port scan (plus ping sweep) take 41 seconds. Not great for
    efficiency, but perfect to conceal what's happening!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在上面的截图中看到，将`--scan-delay`增加到5秒使得四个端口扫描（加上ping扫描）花了41秒。效率不高，但完美地掩盖了发生的事情！
- en: Lastly, direct control of Nmap's rates can also be set using a combination of
    `--min-rate` and `--max-rate`, which controls the packets per second sent over
    the network. It's worth noting that Nmap's internal controls for these settings
    are very good, but on occasion, more fine-tuned control is necessary. By setting
    flags such as `--min-rate 1` and `--max-rate 100`", we can allow Nmap's built-in
    timing engine to control efficiency—but never send more than 100 packets per second
    or less than 1 per second. As with many of these flags, it's important to never
    set the minimum value too high or the maximum value too low!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，也可以使用`--min-rate`和`--max-rate`的组合来直接控制Nmap的速率，从而控制发送到网络上的每秒数据包数量。值得注意的是，Nmap对这些设置的内部控制非常好，但偶尔需要更精细的控制。通过设置诸如`--min-rate
    1`和`--max-rate 100`的标志，我们可以允许Nmap的内置定时引擎控制效率，但永远不会发送超过100个数据包或少于1个数据包。与许多这些标志一样，重要的是永远不要将最小值设置得太高或最大值设置得太低！
- en: Summary
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter taught us some very valuable timing flags—Nmap is versatile enough
    to include many options that can help us make sure we have complete control over
    timing, in order to maximize efficiency and overcome potential pitfalls.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 本章教会了我们一些非常有价值的定时标志——Nmap足够灵活，包括许多选项，可以帮助我们确保完全控制定时，以最大限度地提高效率并克服潜在的问题。
- en: In this chapter, we covered basic Nmap timing optimization, customized host
    group sizes, how to increase or decrease Nmap's parallelism, how to deal with
    stuck hosts, and how to delay (or increase the rate of) individual packets.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了基本的Nmap定时优化、定制主机组大小、如何增加或减少Nmap的并行性、如何处理卡住的主机，以及如何延迟（或增加）单个数据包的速率。
- en: 'In the next chapter, we will talk about one of the most interesting and powerful
    features of Nmap: the **Nmap Scripting Engine** (**NSE**). We''ll talk about what
    the NSE is, what it can do, and how to invoke interesting scripts using it.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论Nmap最有趣和强大的功能之一：Nmap脚本引擎（NSE）。我们将讨论NSE是什么，它能做什么，以及如何使用它调用有趣的脚本。
