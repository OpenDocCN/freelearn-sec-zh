- en: Setting Up a Development Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置开发环境
- en: We are slowly approaching the point where we will be able to begin to actually
    deal with Assembly language itself--writing code, examining programs, solving
    problems. We are just one step away, and the step is setting up a development
    environment for Assembly programming.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正慢慢接近能够开始实际处理汇编语言的时刻——编写代码、检查程序、解决问题。我们只差一步，那就是为汇编编程设置开发环境。
- en: 'Despite the fact that the assembler used in this book is a **Flat Assembler**
    (**FASM**), it is important to cover at least two other options and, therefore,
    in this chapter, you will learn how to configure three types of development environment:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本书使用的汇编器是**平面汇编器**（**FASM**），但重要的是至少要了解另外两种选择，因此在本章中，您将学习如何配置三种类型的开发环境：
- en: '**Setting up a development environment for Windows-based applications using
    Visual Studio 2017 Community**: This will allow the direct integration of Assembly
    projects with existing solutions'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为Windows平台应用程序设置开发环境（使用Visual Studio 2017 Community）**：这将使汇编项目能够与现有解决方案直接集成'
- en: '**Installing GNU Compilers Collection** (**GCC**): Although it is possible
    to use GCC on both Windows and *nix platforms, we will emphasize GCC usage on
    Linux'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装GNU编译器集合**（**GCC**）：虽然GCC可以在Windows和*nix平台上使用，但我们将重点强调在Linux上使用GCC'
- en: '**Flat Assembler**: This one seems to be the simplest and most comfortable
    one to use for Assembly programming on either Windows or Linux'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平面汇编器**：这个汇编器似乎是最简单且最舒适的，用于Windows或Linux上的汇编编程'
- en: We will end each section with a short test program written in the Assembly language
    specifically for the assembler described in the section.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在每个章节结束时提供一个用汇编语言编写的简单测试程序，该程序是专门为该章节描述的汇编器编写的。
- en: Microsoft Macro Assembler
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微软宏汇编器
- en: As the name of this assembler states, it supports macros and has a nice set
    of built-in ones. However, it is hard to find a more or less valuable assembler
    without this feature today.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 正如这个汇编器的名字所示，它支持宏并且内置了一些很好的宏。然而，今天如果没有这个特性，很难找到一个多少有点价值的汇编器。
- en: The first assembler I ever used was **Macro Assembler** (**MASM**) (I do not
    remember which version) on DOS installed on a Sony laptop with 4-MB RAM and a
    100-MB hard disk (ah, good old times), and MS-DOS edit.exe was the only IDE. Needless
    to say, the compilation and linking was performed manually in the command line
    (as if DOS had any other interface).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我第一次使用的汇编器是**宏汇编器**（**MASM**）（我不记得是哪一版本），它安装在一台配备4MB RAM和100MB硬盘的索尼笔记本电脑上（啊，那个美好的旧时光），而MS-DOS的edit.exe是唯一的集成开发环境。无需多言，编译和链接都需要在命令行中手动完成（就像DOS有其他界面一样）。
- en: In my opinion, this is the best way to learn Assembly or any other programming
    language--just a simple editor with as few features as possible (however, syntax
    highlighting is a great advantage, as it helps in avoiding typos) and a set of
    command-line tools. Modern **integrated development environments** (**IDEs**)
    are very complex, yet very powerful tools, and I am not trying to underestimate
    them; however, it is much better to use them once you understand what happens
    behind this complexity.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，这是学习汇编语言或任何其他编程语言的最佳方式——仅仅是一个功能尽可能少的简单编辑器（不过，语法高亮是一个很大的优势，因为它有助于避免拼写错误）和一组命令行工具。现代的**集成开发环境**（**IDEs**）是非常复杂的，但也非常强大的工具，我并不是想低估它们；然而，一旦你了解了这些复杂背后的内容，使用它们会更好。
- en: 'However, the intent behind this book is to learn the language the CPU speaks,
    not a specific Assembly dialect or specific assembler command-line options. Not
    to mention the fact that the currently available Microsoft Visual Studio 2017
    Community (the easiest way to get MASM is to install Visual Studio 2017 Community--free
    and convenient) comes with several assembler binaries:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，本书的目的是学习CPU所使用的语言，而不是特定的汇编方言或特定汇编器命令行选项。更不用说，目前可用的Microsoft Visual Studio
    2017 Community（获取MASM最简单的方法是安装Visual Studio 2017 Community——免费且方便）附带了多个汇编器二进制文件：
- en: A 32-bit binary that produces 32-bit code
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个生成32位代码的32位二进制文件
- en: A 32-bit binary that produces 64-bit code
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个生成64位代码的32位二进制文件
- en: A 64-bit binary that produces 32-bit code
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个生成32位代码的64位二进制文件
- en: A 64-bit binary that produces 64-bit code
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个生成64位代码的64位二进制文件
- en: Our goal is to know how the CPU thinks rather than how to make it understand
    our thoughts and how we can find the location of libraries and executables installed
    on the system. Therefore, if MASM is your choice, it's good to use Visual Studio
    2017 Community, as it will save you a lot of time.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是了解 CPU 是如何思考的，而不是如何让它理解我们的思维，并且我们如何找到系统中已安装的库和可执行文件的位置。因此，如果 MASM 是你的选择，使用
    Visual Studio 2017 Community 会节省你大量时间。
- en: Installing Microsoft Visual Studio 2017 Community
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Microsoft Visual Studio 2017 Community
- en: You may safely skip this step if you already have Microsoft Visual Studio 2017
    Community or any other version of Microsoft Visual Studio installed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了 Microsoft Visual Studio 2017 Community 或任何其他版本的 Microsoft Visual Studio，你可以安全跳过这一步。
- en: This is one of the easiest actions described in this book. Go to [https://www.visualstudio.com/downloads/](https://www.visualstudio.com/downloads/)
    and download and run the installer for Visual Studio 2017 Community.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本书中描述的最简单的操作之一。访问 [https://www.visualstudio.com/downloads/](https://www.visualstudio.com/downloads/)
    下载并运行 Visual Studio 2017 Community 的安装程序。
- en: The installer has many options that you may want to select depending on your
    development needs; however, there is one that we need for Assembly development,
    and it is called Desktop development with C++.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 安装程序有许多选项，你可能根据开发需求选择一些选项；然而，我们用于汇编开发的选项是“使用 C++ 的桌面开发”。
- en: 'If you insist on using the command line to build your Assembly programs, you
    can find MASM executables at the following locations:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你坚持使用命令行构建你的汇编程序，可以在以下位置找到 MASM 可执行文件：
- en: '`VS_2017_install_dir\VC\bin\amd64_x86\ml.exe`'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`VS_2017_install_dir\VC\bin\amd64_x86\ml.exe`'
- en: '`VS_2017_install_dir\VC\bin\amd64\ml64.exe`'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`VS_2017_install_dir\VC\bin\amd64\ml64.exe`'
- en: '`VS_2017_install_dir\VC\bin\ml.exe`'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`VS_2017_install_dir\VC\bin\ml.exe`'
- en: '`VS_2017_install_dir\VC\bin\x86_amd64\ml64.exe`'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`VS_2017_install_dir\VC\bin\x86_amd64\ml64.exe`'
- en: Setting up the Assembly project
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置程序集项目
- en: 'Unfortunately, Visual Studio, by default, has no template for Assembly language
    projects, therefore, we have to create one ourselves:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，Visual Studio 默认没有汇编语言项目的模板，因此我们需要自己创建一个：
- en: 'Launch Visual Studio and create an empty solution, as shown in the following
    screenshot:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Visual Studio 并创建一个空的解决方案，如下图所示：
- en: '![](img/55af3526-45f6-46dc-aa46-b4c56a13670d.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/55af3526-45f6-46dc-aa46-b4c56a13670d.png)'
- en: Creating blank VS2017 solution
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 创建空白的 VS2017 解决方案
- en: Look at the bottom-right part of the Start Page window, where you will see the
    option to create a blank solution. If there is no such option, click on More project
    templates... and select Blank Solution from there.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 查看开始页面窗口的右下角，你会看到创建空白解决方案的选项。如果没有该选项，点击“更多项目模板...”并从中选择“空白解决方案”。
- en: 'Once the solution has been created for us, we may add a new project. Right-click
    on the name of the solution and go to Add | New Project:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦解决方案创建完成，我们可以添加一个新项目。右键点击解决方案的名称，然后选择添加 | 新建项目：
- en: '![](img/7314b70a-8938-4b95-8c39-b9a5e2e2f372.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7314b70a-8938-4b95-8c39-b9a5e2e2f372.png)'
- en: Adding a new project to the solution
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 向解决方案添加新项目
- en: 'As Visual Studio has no built-in template for an Assembly project, we will
    add an empty C++ project to our solution:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Visual Studio 没有内置的汇编项目模板，我们将向解决方案中添加一个空的 C++ 项目：
- en: '![](img/591ac333-ae73-4aee-be46-1e99bfd0dbfb.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/591ac333-ae73-4aee-be46-1e99bfd0dbfb.png)'
- en: Creating an empty project
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个空项目
- en: Choose a name for the project and click on OK. There are a two more things we
    have to do before we can add source files. To be more precise, we can add sources
    and then take care of these two things, as the order does not really matter. Just
    keep in mind that we will not be able to build (or, correctly build) our project
    before we take care of these.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个项目名称并点击确定。在我们可以添加源文件之前，还有两件事需要做。更准确地说，我们可以先添加源文件，然后再处理这两件事，因为顺序其实不重要。只需记住，在处理完这些之前，我们是无法构建（或者正确构建）项目的。
- en: The first thing to take care of is setting the subsystem for the project; otherwise,
    the linker will not know what kind of executable to generate.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个需要处理的事情是为项目设置子系统；否则，链接器将无法知道生成哪种可执行文件。
- en: 'Right-click on the project name in the Solution Explorer tab and go to Properties.
    In the project properties window, we go to Configuration Properties | Linker |
    System and select Windows (/SUBSYSTEM:WINDOWS) under SubSystem:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 右键点击解决方案资源管理器标签中的项目名称，选择属性。在项目属性窗口中，依次选择配置属性 | 链接器 | 系统，并在子系统下选择 Windows (/SUBSYSTEM:WINDOWS)：
- en: '![](img/6607db15-b944-43f2-9c20-adc4bf14bdb8.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6607db15-b944-43f2-9c20-adc4bf14bdb8.png)'
- en: Setting the target subsystem
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 设置目标子系统
- en: 'The next step is to tell Visual Studio that this is an Assembly language project:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是告诉 Visual Studio 这是一个汇编语言项目：
- en: '![](img/6f7ed48d-65b7-4ce5-b503-49c5640a6b47.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6f7ed48d-65b7-4ce5-b503-49c5640a6b47.png)'
- en: Opening the "Build Customizations" window
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 打开“构建自定义”窗口
- en: 'Right-click on the project name and go to Build Dependencies in the context
    menu, click on Build Customizations…, and from the build customizations window,
    select `masm(.targets, .props)`:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击项目名称，在上下文菜单中选择构建依赖项，点击构建自定义...，然后在构建自定义窗口中选择 `masm(.targets, .props)`：
- en: '![](img/de28f203-e473-4739-b338-677df284b96b.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de28f203-e473-4739-b338-677df284b96b.png)'
- en: Setting proper targets
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 设置适当的目标
- en: 'We are now ready to add the first Assembly source file:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们准备好添加第一个汇编源文件了：
- en: '![](img/4b592922-ad41-4af4-ab45-742a2b2145cd.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4b592922-ad41-4af4-ab45-742a2b2145cd.png)'
- en: Adding a new Assembly source file
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 添加新的汇编源文件
- en: Unfortunately, Visual Studio does not seem to be prepared for Assembly projects
    and, therefore, has no built-in template for Assembly files. So, we right-click
    on Source Files in the Solution Explorer, select New Item under Add, and since
    there is no template for the Assembly source file, we select C++ File (.cpp),
    but set the name of the file with the `.asm` extension. We click on Add, and voila!
    Our first Assembly source file is shown in the IDE.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，Visual Studio 似乎并没有为汇编项目做准备，因此没有内置的汇编文件模板。所以，我们右键点击解决方案资源管理器中的源文件，选择“添加”下的“新建项”，由于没有汇编源文件的模板，我们选择
    C++ 文件（.cpp），但将文件名设置为 `.asm` 扩展名。点击添加，瞧！我们的第一个汇编源文件就出现在了 IDE 中。
- en: 'Just for fun, let''s add some code:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了好玩，让我们添加一些代码：
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Do not worry if the code does not "speak" to you yet; we will begin to get acquainted
    with the instructions and program structure in [Chapter 3](57c5447c-2cc4-4a48-9c46-6825e4a83a9c.xhtml),
    *Intel Instruction Set Architecture (ISA)*.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果代码目前还没有“跟你说话”，不要担心；我们将在[第3章](57c5447c-2cc4-4a48-9c46-6825e4a83a9c.xhtml)开始熟悉指令和程序结构，*英特尔指令集架构（ISA）*。
- en: 'Right now, let''s build the project and run it. The code does not do much,
    as it simply displays a message box and terminates the program:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们构建项目并运行它。代码并不做太多事情，它只是显示一个消息框并终止程序：
- en: '![](img/574ca98e-c5b5-4027-b82a-1204fbda8a3d.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/574ca98e-c5b5-4027-b82a-1204fbda8a3d.png)'
- en: Sample output
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 示例输出
- en: By now, we have a working setup for Assembly development on Windows.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经在 Windows 上设置好了 Assembly 开发环境。
- en: GNU Assembler (GAS)
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GNU 汇编器（GAS）
- en: The GNU Assembler or GAS, or simply AS, is the most used assembler on *nix (Unix
    and Linux) platforms. While it is cross-platform (having the right build of GAS,
    we can compile Assembly code for a wide variety of platforms including Windows),
    flexible and powerful, it defaults to the AT&T syntax, which is, for those used
    to Intel syntax, weird, to say the least. GAS is free software released under
    the terms of GNU General Public License v3.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: GNU 汇编器（GAS），简称 AS，是在 *nix（Unix 和 Linux）平台上使用最广泛的汇编器。虽然它是跨平台的（通过正确版本的 GAS，我们可以为各种平台编译汇编代码，包括
    Windows），灵活且功能强大，但它默认使用 AT&T 语法，对于习惯 Intel 语法的人来说，至少可以说有些奇怪。GAS 是自由软件，遵循 GNU 通用公共许可证
    v3 发布。
- en: Installing GAS
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 GAS
- en: GAS is distributed as part of the `binutils` package, but since it is the default
    backend for GCC (GNU Compilers Collection), it would be better if we install GCC.
    In fact, installing GCC instead of `binutils` alone will slightly simplify the
    creation of executables out of our Assembly code, as GCC would automatically handle
    a few tasks during the linking process. Despite having its roots in *nix systems,
    GAS is also available for Windows and may be downloaded from [https://sourceforge.net/projects/mingw-w64/](https://sourceforge.net/projects/mingw-w64/)
    (just remember to add the `bin` subfolder in the installation folder to the `PATH`
    environment variable). Installation on Windows is quite straightforward--simply
    follow the steps in the GUI installation wizard.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: GAS 是作为 `binutils` 包的一部分分发的，但由于它是 GCC（GNU 编译器集合）的默认后端，最好还是安装 GCC。事实上，安装 GCC
    而不是仅安装 `binutils` 会稍微简化从汇编代码生成可执行文件的过程，因为 GCC 在链接过程中会自动处理一些任务。尽管 GAS 起源于 *nix
    系统，但它也可在 Windows 上使用，可以从 [https://sourceforge.net/projects/mingw-w64/](https://sourceforge.net/projects/mingw-w64/)
    下载（只需记得将安装文件夹中的 `bin` 子文件夹添加到 `PATH` 环境变量中）。在 Windows 上的安装过程相当简单，只需按照 GUI 安装向导的步骤进行操作。
- en: Another option for those of us using Windows is "Bash on Windows;" however,
    this is only available on 64-bit Windows 10 with Anniversary/Creators Update installed.
    The installation steps for GAS would then be the same as those for running Ubuntu
    or Debian Linux.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们这些使用Windows的人，另一个选择是“Windows上的Bash”；然而，这只在安装了周年更新或创意者更新的64位Windows 10上可用。安装GAS的步骤与运行Ubuntu或Debian
    Linux时的步骤相同。
- en: As this book is intended for developers, it might be safe to assume that you
    already have it installed on your system, if you are on a *nix system, however,
    let's leave assumptions aside and install GAS.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书面向开发人员，假设你已经在系统上安装了它是可以的，但如果你使用的是*nix系统，我们还是不做假设，直接安装GAS。
- en: Step 1 - installing GAS
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1步 - 安装GAS
- en: 'Open your favorite terminal emulator and issue the following command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你最喜欢的终端模拟器并执行以下命令：
- en: '[PRE1]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you are on a Debian-based distribution or if it is RH based, then use the
    following command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是基于Debian的发行版，或者是基于RH的发行版，可以使用以下命令：
- en: '[PRE2]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Alternatively, you can use the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你也可以使用以下方法：
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Step 2 - let's test
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2步 - 测试一下
- en: Once ready, let's build our first Assembly program on Linux. Create an Assembly
    source file named, for example, `test.S`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好之后，让我们在Linux上构建我们的第一个汇编程序。创建一个名为`test.S`的汇编源文件。
- en: Assembly source files on *nix platforms have the extension `.S` or `.s` instead
    of `.asm`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在*nix平台上，汇编源文件的扩展名是`.S`或`.s`，而不是`.asm`。
- en: 'Fill in the following code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 填入以下代码：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Prepend `printf` and `main` with an underscore (`_`) if you are on Windows.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在Windows上，请在`printf`和`main`前加上下划线（`_`）。
- en: 'If on Linux, build the code with the following command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在Linux上，可以使用以下命令来构建代码：
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In order for this code to be compiled correctly on a 64-bit system, as it is
    written for 32-bit assembler, you should install the 32-bit toolchain and libraries,
    as well as add the `-m32` option, which tells GCC to generate code for a 32-bit
    platform, with this command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保这段代码能够在64位系统上正确编译，因为它是为32位汇编器编写的，你应该安装32位工具链和库，并添加`-m32`选项，这告诉GCC为32位平台生成代码，命令如下：
- en: '**`gcc -m32 -o test test.S`**'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**`gcc -m32 -o test test.S`**'
- en: Refer to the documentation of your Linux distro for instructions on how to install
    32-bit libraries.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考你所使用的Linux发行版的文档，了解如何安装32位库。
- en: 'If you''re on Windows, change the name of the output executable accordingly:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在Windows上，请相应地更改输出的可执行文件名称：
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Run the executable in the Terminal. You should see the message followed by
    a new line:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端运行可执行文件。你应该看到一条消息，后面跟着一个新行：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you may have noticed, the syntax of this Assembly source is different from
    that supported by MASM. While MASM supports what is called Intel syntax, GAS originally
    supported only the AT&T syntax. However, the support for Intel syntax was added
    at some point, thus making the life of new adepts significantly easier.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这段汇编源代码的语法不同于MASM所支持的语法。MASM支持所谓的Intel语法，而GAS最初只支持AT&T语法。然而，后来添加了对Intel语法的支持，从而大大简化了新手的学习过程。
- en: Flat Assembler
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flat Assembler
- en: Now that we have seen the complexities introduced by MASM and GAS, whether it
    is syntax or setup complexity, let's take a look at Flat Assembler, a free, portable,
    self-compiling assembler for Windows and Linux with Intel syntax (very similar
    to that of MASM, but much less complicated and much more understandable). Exactly
    the tool we need for easier and faster understanding of Intel Assembly language
    and usage thereof.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了MASM和GAS带来的复杂性，无论是语法还是配置的复杂性，我们来看看Flat Assembler，它是一个免费的、便携的、自编译的汇编器，适用于Windows和Linux，使用Intel语法（与MASM非常相似，但复杂性更低，更容易理解）。这正是我们需要的工具，可以更轻松、更快速地理解Intel汇编语言及其使用。
- en: In addition to support for various executable file formats (DOS COM files to
    begin with, through Windows PE (both 32 bit and 64 bit) and up to ELF (both 32
    bit and 64 bit)), FASM has a very powerful macro engine, which we will definitely
    take advantage of. Not to mention the fact that FASM can be easily integrated
    into existing development environments for more complex projects.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 除了支持各种可执行文件格式（最初是DOS COM文件，通过Windows PE（包括32位和64位），直到ELF（包括32位和64位）），FASM还有一个非常强大的宏引擎，我们肯定会加以利用。更不用说FASM可以轻松集成到现有的开发环境中，适用于更复杂的项目。
- en: Installing the Flat Assembler
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Flat Assembler
- en: 'Regardless of whether you are on Windows or on Linux, you can get the Flat
    Assembler in the same easy way:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是在Windows还是Linux上，都可以通过相同的简单方式获取Flat Assembler：
- en: 'First, visit [https://flatassembler.net/download.php](https://flatassembler.net/download.php)
    and select the proper package for your operating system:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，访问 [https://flatassembler.net/download.php](https://flatassembler.net/download.php)
    并选择适合你操作系统的包：
- en: '![](img/404e2f83-c55c-489d-8b0c-f5b92f84a1d1.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/404e2f83-c55c-489d-8b0c-f5b92f84a1d1.png)'
- en: Flat Assembler download page
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Flat Assembler 下载页面
- en: 'Unpack the package. Both Windows and Linux packages come with FASM sources,
    documentation, and examples. As we see in the following screenshot, the Windows
    version comes with two executables: `fasm.exe` and `fasmw.exe`. The only difference
    between the two is that `fasmw.exe` is a GUI implementation of Flat Assembler,
    while `fasm.exe` is the command line only:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压包。Windows 和 Linux 版本的包都包含了 FASM 源码、文档和示例。如我们在以下截图中所见，Windows 版本包含了两个可执行文件：`fasm.exe`
    和 `fasmw.exe`。两者之间的唯一区别是，`fasmw.exe` 是 Flat Assembler 的图形界面实现，而 `fasm.exe` 仅支持命令行：
- en: '![](img/827183a1-e26f-484d-89de-8346c68a845a.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/827183a1-e26f-484d-89de-8346c68a845a.png)'
- en: Content of the Flat Assembler package
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Flat Assembler 包的内容
- en: Both executables may be run from the directory you unpacked the package to,
    as they have no external dependencies. If you decide to move it elsewhere, do
    not forget to put the `INCLUDE` folder and the `FASMW.INI` file (if one has already
    been created) into the same directory. If you copy `FASMW.INI`, then you will
    have to manually edit the `Include` path under the `[Environment]` section. Alternatively,
    you may skip copying `FASMW.INI`, as it will be automatically created the first
    time you launch `FASMW.EXE`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个可执行文件可以从你解压包的目录运行，因为它们没有外部依赖。如果你决定将其移动到其他地方，别忘了将 `INCLUDE` 文件夹和 `FASMW.INI`
    文件（如果已经创建的话）一起放入同一目录。如果你复制了 `FASMW.INI` 文件，你需要手动编辑 `[Environment]` 部分下的 `Include`
    路径。或者，你可以跳过复制 `FASMW.INI`，因为它会在你第一次启动 `FASMW.EXE` 时自动创建。
- en: 'The Linux version lacks the GUI part, but it still contains the `fasm` source
    code, documentation, and examples:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 版本缺少图形界面部分，但它仍然包含 `fasm` 源代码、文档和示例：
- en: '![](img/3bfd5451-679b-416c-8fb1-ba6e53688407.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3bfd5451-679b-416c-8fb1-ba6e53688407.png)'
- en: The content of the Flat Assembler package for Linux
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Flat Assembler Linux 版本包的内容
- en: While the `fasm` executable for Linux, just like its Windows counterpart, has
    no external dependencies and may be executed directly from the folder you unpacked
    the package to, it is a matter of convenience to copy it to a more proper location,
    for example, to `/usr/local/bin`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Windows 版本一样，Linux 版本的 `fasm` 可执行文件没有外部依赖，可以直接从解压包所在的文件夹运行，但为了方便，最好将其复制到一个更合适的位置，例如
    `/usr/local/bin`。
- en: The first FASM program
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一个 FASM 程序
- en: Now that we have installed the Flat Assembler, we cannot move further on unless
    we build a tiny test executable for either Windows or Linux. Interestingly enough,
    both examples may be compiled with the same assembler, meaning that the Linux
    example may be compiled on Windows and vice versa. But let's get to the example
    itself.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了 Flat Assembler，除非我们为 Windows 或 Linux 构建一个小的测试可执行文件，否则无法继续。很有趣的是，这两个示例可以用相同的汇编器编译，这意味着
    Linux 示例也可以在 Windows 上编译，反之亦然。但让我们直接看一下这个示例。
- en: Windows
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows
- en: 'If you are on Windows, launch `fasmw.exe` and enter the following code:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Windows，启动 `fasmw.exe` 并输入以下代码：
- en: '[PRE8]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Again, do not worry if you hardly understand anything in this code; it will
    begin to become clearer starting with the next chapter.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，如果你对代码中的内容几乎不理解，也无需担心；接下来的章节会让它变得更清晰。
- en: In order to run the preceding code, go to the Run menu and select Run.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行前面的代码，进入“运行”菜单并选择“运行”。
- en: '![](img/7ac22574-311d-40fc-9675-963ceaefc682.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7ac22574-311d-40fc-9675-963ceaefc682.png)'
- en: Compiling sources in FASMW
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在 FASMW 中编译源代码
- en: Admire the result for a few seconds.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 欣赏结果几秒钟。
- en: '![](img/1868385c-240a-4f02-8700-37292c4f43c5.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1868385c-240a-4f02-8700-37292c4f43c5.png)'
- en: Example output
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 示例输出
- en: Linux
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux
- en: 'If you are on Linux, the source code will be even shorter. Open your favorite
    source editor, whether it is `nano`, `emacs`, or `vi`, or whatever, and enter
    the following code:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Linux，源代码会更简短。打开你最喜欢的源代码编辑器，无论是 `nano`、`emacs`、`vi` 或其他任何编辑器，并输入以下代码：
- en: '[PRE9]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The code is much more compact than that on Windows, as we are not using any
    high-level API functions; we''d rather use Linux system calls directly (this could
    turn into a nightmare on Windows). Save the file as `fasm1lin.asm` (this is not
    GAS or GCC, so we are free to give the Assembly source file its usual extension)
    and go to the terminal emulator. Issue the following command (assuming the `fasm`
    executable is in the place mentioned in the `PATH` environment variable) in order
    to build the executable out of this code:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码比在 Windows 上的要紧凑得多，因为我们没有使用任何高级 API 函数；我们宁愿直接使用 Linux 系统调用（在 Windows 上这样做可能会变成一场噩梦）。将文件保存为
    `fasm1lin.asm`（这不是 GAS 或 GCC，因此我们可以给汇编源文件使用常规扩展名），然后打开终端模拟器。输入以下命令（假设 `fasm` 可执行文件在
    `PATH` 环境变量中提到的地方），以便从这段代码中构建可执行文件：
- en: '[PRE10]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, try to run the file with the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，尝试使用以下命令运行该文件：
- en: '[PRE11]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You should see something like this:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到类似这样的内容：
- en: '![](img/29d2fb0e-c2e8-4036-a8f0-99fd33905e69.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/29d2fb0e-c2e8-4036-a8f0-99fd33905e69.png)'
- en: Building and running a Linux executable with Flat Assembler
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 使用平面汇编器构建和运行 Linux 可执行文件
- en: As simple as that.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 就这么简单。
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'By now, we have reviewed three different assemblers: **Microsoft Macro Assembler**
    (**MASM**), this is an integral part of Visual Studio, **GNU Assembler** (**GAS**),
    this is the default backend for GNU Compilers Collection (GCC), **Flat Assembler**
    (**FASM**), this is a standalone, portable, flexible, and powerful assembler.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经回顾了三种不同的汇编器：**微软宏汇编器** (**MASM**)，这是 Visual Studio 的一个重要组成部分；**GNU
    汇编器** (**GAS**)，这是 GNU 编译器集合（GCC）的默认后端；**平面汇编器** (**FASM**)，这是一个独立的、便携的、灵活的强大汇编器。
- en: Although we will be using FASM, we may still refer to the other two from time
    to time, when the need arises (and it will).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们将使用 FASM，但在某些情况下（而且这些情况确实会发生），我们仍然会参考其他两种汇编器。
- en: Having an installed and working assembler, we are ready to proceed to [Chapter
    3](57c5447c-2cc4-4a48-9c46-6825e4a83a9c.xhtml), *Intel Instruction Set Architecture
    (ISA)*, and start working with the Assembly language itself. There is a long road
    ahead, and we have not made the first step yet. In [Chapter 3](https://cdp.packtpub.com/mastering_assembly_programming/wp-admin/post.php?post=52&action=edit&save=save#post_108),
    *Intel Instruction Set Architecture (ISA)*, we will go through the instruction
    set architecture of Intel processors, and you will learn how to write simple programs
    for both Windows and Linux, 32 and 64-bit.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 有了安装并正常工作的汇编器，我们可以继续进行 [第 3 章](57c5447c-2cc4-4a48-9c46-6825e4a83a9c.xhtml)，*Intel
    指令集架构 (ISA)*，并开始直接使用汇编语言了。前方的路还很长，我们甚至还没有迈出第一步。在 [第 3 章](https://cdp.packtpub.com/mastering_assembly_programming/wp-admin/post.php?post=52&action=edit&save=save#post_108)，*Intel
    指令集架构 (ISA)* 中，我们将深入了解 Intel 处理器的指令集架构，并学习如何为 Windows 和 Linux 编写简单程序，支持 32 位和
    64 位。
