- en: Chapter 1.  Introduction to Mobile Security
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章：移动安全简介
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下内容：
- en: Installing and configuring Android SDK and ADB
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置 Android SDK 和 ADB
- en: Creating a simple Android app and running it in an emulator
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的 Android 应用并在模拟器中运行
- en: Analyzing the Android permission model using ADB
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 ADB 分析 Android 权限模型
- en: Bypassing Android lock screen protection
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绕过 Android 锁屏保护
- en: Setting up the iOS development environment - Xcode and iOS simulator
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 iOS 开发环境 - Xcode 和 iOS 模拟器
- en: Creating a simple iOS app and running it in the simulator
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的 iOS 应用并在模拟器中运行
- en: Setting up the Android pentesting environment
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Android 渗透测试环境
- en: Setting up the iOS pentesting environment
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 iOS 渗透测试环境
- en: Introduction to rooting and jailbreaking
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根植和越狱简介
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Today, smartphone usage is a much talked about subject. The world is quickly
    moving towards smartphone ownership, rather than traditional feature phones. Various
    studies and surveys have predicted increasing future usage of smartphones and
    tablets. There are incentives to do so; a lot of things are doable with these
    smartphones.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，智能手机的使用是一个广泛讨论的话题。世界正在迅速转向智能手机拥有量，而非传统的功能手机。各种研究和调查预测智能手机和平板电脑的使用量将在未来持续增长。这样做有很多好处；许多事情都可以通过智能手机来完成。
- en: With increasing mobility comes risk. Attackers or cyber criminals look at all
    possible ways to attack users in order to obtain their personal data, credit card
    details, passwords, and other secrets. There have been threat reports from various
    security vendors on the increase in mobile attacks that comes with increased usage.
    Today, corporations are worried about data confidentiality and the resultant financial
    and reputational losses.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 随着移动性增加，风险也在增加。攻击者或网络犯罪分子会寻找各种可能的方式来攻击用户，窃取他们的个人数据、信用卡信息、密码和其他秘密。各种安全厂商的威胁报告显示，随着智能手机使用量的增加，移动攻击也在增加。今天，企业非常关注数据的机密性以及由此带来的财务和声誉损失。
- en: In this book, we introduce readers to some mobile device exploitation recipes,
    to let everyone understand the kind of attacks that are possible. Once people
    understand this, they will be more aware of such attack vectors and be better
    prepared to deal with them and secure their stuff.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将向读者介绍一些移动设备漏洞利用的方法，让大家了解可能出现的攻击类型。一旦人们了解这些，他们就会更加意识到这些攻击向量，并能更好地准备应对并保护自己的信息安全。
- en: This chapter will give the reader an idea about the basic security models of
    the two most popular mobile device platforms, Android and iOS. We will cover an
    introduction to their development environments and basic security models. We will
    set up a penetration testing environment and will introduce you to rooting and
    jailbreaking. This chapter builds the foundation for what is to be covered in
    the upcoming chapters, and is a pre-requisite for exploitation.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将让读者了解两个最流行的移动设备平台（Android 和 iOS）的基本安全模型。我们将介绍它们的开发环境和基本安全模型。我们将设置一个渗透测试环境，并向你介绍根植和越狱。本章为接下来要介绍的内容打下基础，也是进行漏洞利用的前提。
- en: Installing and configuring Android SDK and ADB
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置 Android SDK 和 ADB
- en: The very first step in Android development and security testing is to learn
    to install and configure the Android SDK and ADB. The **software development kit**
    (**SDK**) for Android comes in two installable versions; Android Studio and the
    standalone SDK tools. This recipe primarily uses Android Studio and later provides
    additional information about standalone SDK tools.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Android 开发和安全测试的第一步是学习如何安装和配置 Android SDK 和 ADB。Android 的 **软件开发工具包** (**SDK**)
    有两个可安装版本：Android Studio 和独立的 SDK 工具。本教程主要使用 Android Studio，之后将提供有关独立 SDK 工具的额外信息。
- en: Android Debug Bridge (**ADB**) is a very useful tool, which can connect to Android
    devices and emulators and is used to perform debugging and security testing for
    mobile applications.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Android 调试桥 (**ADB**) 是一个非常有用的工具，它可以连接到 Android 设备和模拟器，并用于执行移动应用程序的调试和安全测试。
- en: Note
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Whenever we use the words "Android devices" in this book, this means Android
    smartphones and tablets.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中提到的“Android 设备”是指 Android 智能手机和平板电脑。
- en: Getting ready
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做好准备
- en: Navigate to [https://developer.android.com](https://developer.android.com) and
    download either **Android Studio** or standalone SDK tools. You will also require
    JDK v7 or newer.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 [https://developer.android.com](https://developer.android.com) 并下载 **Android
    Studio** 或独立的 SDK 工具。你还需要 JDK v7 或更新版本。
- en: How to do it...
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s set up using the first method, Android Studio:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们先使用第一种方法进行设置，即 Android Studio：
- en: Go to [http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html)
    and download the latest Android Studio.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html)
    下载最新版本的 Android Studio。
- en: Once you have downloaded the Android Studio installer file, the installer guides
    you through the next steps and you just have to follow the instructions.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 Android Studio 安装程序文件后，安装程序会引导你完成接下来的步骤，你只需按照说明操作即可。
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As of writing this, the installer file used is `android-studio-bundle-135.1740770-windows.exe`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 截至本文写作时，使用的安装程序文件是`android-studio-bundle-135.1740770-windows.exe`。
- en: Android SDK and ABD are installed as part of the default installation. Unless
    you deselect these, they will be installed.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Android SDK 和 ABD 会作为默认安装的一部分进行安装。除非你取消选择这些选项，否则它们会被安装。
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**AVD** stands for Android Virtual Device, which in turn refers to the Android
    emulator. Emulators provide a virtualized setup to test, run, and debug Android
    applications. These are especially useful in cases where hardware devices are
    not available. Most development testing works using emulators. We will use an
    emulator in the next recipe.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**AVD** 代表 Android 虚拟设备，实际上指的就是 Android 模拟器。模拟器提供了一个虚拟化的环境，用于测试、运行和调试 Android
    应用程序。在没有硬件设备的情况下，模拟器尤其有用。大多数开发测试都通过模拟器进行。我们将在下一个教程中使用模拟器。'
- en: 'Note the Android Studio and SDK installation paths. You will need them repeatedly
    in setup:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 Android Studio 和 SDK 的安装路径。你将在设置过程中多次用到这些路径：
- en: '![How to do it...](graphics/image_01_001.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](graphics/image_01_001.jpg)'
- en: Once Android Studio is installed, run it. It will guide you through the next
    set of instructions. It downloads the Android SDK tools, which may take up to
    4 hours depending upon the Internet speed.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Android Studio 安装完成，运行它。它会引导你完成接下来的步骤。它会下载 Android SDK 工具，这个过程可能会根据网络速度花费最多
    4 小时。
- en: How it works...
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: 'The development environment is ready. Take a moment to make yourself familiar
    with the SDK installation directory (the path shown in the preceding screenshot).
    There are a few quick things you must know:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 开发环境已准备好。花点时间熟悉一下 SDK 安装目录（前面截图中显示的路径）。有一些你必须知道的快速要点：
- en: '**SDK Manager**: This is used to manage Android packages and can be used to
    install or uninstall newer/older versions as required.![How it works...](graphics/image_01_002.jpg)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SDK 管理器**：用于管理 Android 包，并可用于根据需要安装或卸载新版/旧版。![如何工作...](graphics/image_01_002.jpg)'
- en: '**AVD Manager**: This is used to manage AVD. Use it to create a few emulators
    that we will use at the appropriate time.![How it works...](graphics/image_01_003.jpg)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AVD 管理器**：用于管理 AVD。使用它可以创建一些模拟器，稍后在适当的时机使用。[如何工作...](graphics/image_01_003.jpg)'
- en: Now run one of the emulators to test whether the installed setup is working
    well. An emulator takes 2-3 minutes to start up, so be patient and if the installation
    has gone well, the emulator should be up and running. (Please refer to the next
    recipe if you want to look at the emulator screenshot now.)
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在运行其中一个模拟器，测试已安装的环境是否正常工作。模拟器启动需要 2-3 分钟，所以请耐心等待。如果安装没有问题，模拟器应该会启动并运行。（如果你现在想查看模拟器的截图，请参考下一个教程。）
- en: '**platform-tools**: This folder contains useful tools such as ADB, SQLite3,
    and so on. We will use these tools in various recipes throughout this book.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**platform-tools**：此文件夹包含一些有用的工具，例如 ADB、SQLite3 等。我们将在本书的不同教程中使用这些工具。'
- en: '**tools**: This folder contains batch files and other executables. We will
    mostly use `emulator.exe`, as well as other `.exe` files in this folder.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**tools**：此文件夹包含批处理文件和其他可执行文件。我们主要使用`emulator.exe`，以及此文件夹中的其他`.exe`文件。'
- en: There's more...
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: There is an alternative way to develop in Android, as many people prefer other
    IDEs. In such cases, the standalone SDK tools can be downloaded. This provides
    the SDK tools required for application development and these tools can be invoked
    from the command line.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种替代的 Android 开发方式，很多人更喜欢使用其他 IDE。在这种情况下，可以下载独立的 SDK 工具。这些工具提供了应用程序开发所需的 SDK
    工具，可以从命令行调用这些工具。
- en: These standalone tools are also useful for pentesters and black hats, for quick
    analysis of underlying, application-related stuff. A lot of the time, application
    development is not needed and there is a need to debug; in such cases, the standalone
    SDK tools can be used.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这些独立工具对于渗透测试人员和黑客来说也很有用，可以快速分析底层的应用相关内容。在很多情况下，应用程序开发不是必须的，而是需要调试；在这种情况下，可以使用独立的
    SDK 工具。
- en: See also
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Analyzing the Android permission model using ADB*'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 ADB 分析 Android 权限模型*'
- en: Creating a simple Android app and running it in an emulator
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个简单的 Android 应用并在模拟器中运行
- en: Now that we are ready with the Android SDK, let's write our first Android application.
    A little bit of coding skill is needed to get started. However, don't worry if
    source code scares you. There is a lot of sample code available in the Internet
    communities for you to use to get started.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了 Android SDK，接下来让我们编写第一个 Android 应用程序。开始时需要一点编程技能。不过，别担心，如果源代码让你感到害怕。互联网上有很多示例代码可以供你使用，帮助你入门。
- en: Getting ready
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To get ready to code the Android application, you need the SDK to be working
    well. If you have followed the first recipe and know a little bit of Java programming,
    the rest is easy and you are all set to code your very first Android application.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备编写 Android 应用程序，你需要确保 SDK 工作正常。如果你已经完成了第一部分并且知道一些 Java 编程，接下来的部分就很容易了，你已准备好编写第一个
    Android 应用程序。
- en: How to do it...
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做……
- en: 'Let''s write a very simple program to add two numbers together. I used the
    Eclipse IDE and created an Android application project called `Addition`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个非常简单的程序来将两个数字相加。我使用了 Eclipse IDE，并创建了一个名为 `Addition` 的 Android 应用程序项目：
- en: Create the graphical layout. Drag and drop three text fields (one each for the
    first number and the second number, and the last one to print the sum of the first
    two numbers), two TextView boxes to display text so that the user knows to enter
    two numbers, and finally a button for the addition action.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建图形布局。拖放三个文本框（分别用于输入第一个数字和第二个数字，最后一个用来显示前两个数字的和），两个 TextView 框以显示文本，提示用户输入两个数字，最后添加一个按钮用于执行加法操作。
- en: 'The `activity_main.xml` file is autogenerated. Edit it to look like the following
    code:'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`activity_main.xml` 文件是自动生成的。编辑它，使其看起来像以下代码：'
- en: '[PRE0]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the declared button:'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加声明的按钮：
- en: '[PRE1]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, the third variable, which will contain the sum of the two numbers,
    is declared:'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，声明第三个变量，它将包含两个数字的和：
- en: '[PRE2]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now we have to write Java code to input and add the numbers, and output the
    sum. At this point, don''t worry if you do not know Activity, Intent, and so on.
    Just focus on getting the code error-free. Eclipse guides you at each step. We
    start our program with `MainActivity`, coded like this:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要编写 Java 代码来输入和相加数字，并输出和。在这一点上，如果你不懂 Activity、Intent 等也没关系。只需专注于使代码没有错误。Eclipse
    会在每一步为你提供指导。我们从 `MainActivity` 开始编写程序，代码如下：
- en: '[PRE3]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: See how straightforward this program is; it just takes two numbers, adds them
    together, and provides the result.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 看看这个程序多么简单；它只需接受两个数字，将它们相加，并提供结果。
- en: Debug and run the program. The emulator opens up and the program runs.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调试并运行程序。模拟器启动，程序运行。
- en: See also
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Android In Action*, *Ableson, Sen*, *King*, *Manning Publications Co*.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Android In Action*，*Ableson, Sen*，*King*，*Manning Publications Co*。'
- en: Analyzing the Android permission model using ADB
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ADB 分析 Android 权限模型
- en: Having set up the development environment and coded your first Android application,
    now it's time to understand the underlying permission model of the Android operating
    system. The underlying operating system is Linux; the Android operating system
    is built using Linux as the basis. Applications in Linux run with a specific user
    ID and group ID. Android uses the same Linux model to set permissions for applications;
    this separates and protects Android applications from each other.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好开发环境并编写完第一个 Android 应用后，现在是时候理解 Android 操作系统底层的权限模型了。底层操作系统是 Linux，Android
    操作系统是基于 Linux 构建的。Linux 中的应用程序以特定的用户 ID 和组 ID 运行。Android 使用相同的 Linux 模型为应用程序设置权限，这样可以将
    Android 应用程序彼此隔离并进行保护。
- en: Getting ready
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have ADB installed. You also need an Android emulator or an Android
    device to connect to ADB.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经安装了 ADB。你还需要一个 Android 模拟器或 Android 设备来连接到 ADB。
- en: A device or emulator that has been used frequently is best for this purpose
    (as a newly created emulator or device may not contain much data to view using
    ADB). Furthermore, for learning purposes, a rooted phone is preferred.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 经常使用的设备或模拟器最适合此目的（因为新创建的模拟器或设备可能没有很多数据可以通过 ADB 查看）。此外，为了学习目的，推荐使用已 root 的手机。
- en: How to do it...
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做……
- en: 'Follow the steps given here for analyzing the Android permission model using
    ADB:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 按照这里给出的步骤使用 ADB 分析 Android 权限模型：
- en: 'Enable **USB debugging** mode on your Android device and connect it via a data
    cable to a computer on which ADB is running. ADB is a very powerful tool and can
    be used to run various useful commands, which can help us with the following tasks:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的安卓设备上启用**USB调试**模式，并通过数据线将其连接到运行ADB的计算机。ADB是一个非常强大的工具，可以用来运行各种有用的命令，帮助我们完成以下任务：
- en: Pushing data into the phone/emulator
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向手机/模拟器中推送数据
- en: Pulling data from the phone/emulator
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从手机/模拟器中提取数据
- en: Obtaining a shell in the phone/emulator
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取手机/模拟器中的shell
- en: Installing and removing applications
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和卸载应用程序
- en: Navigating the filesystem
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航文件系统
- en: Stealing key system files
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 窃取关键系统文件
- en: Stealing application-related files such as preferences and SQLite files
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 窃取与应用程序相关的文件，如偏好设置和SQLite文件
- en: Viewing device logs
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看设备日志
- en: Use ADB to analyze the application permissions. To do this, we will have to
    first obtain the shell in the device using the `adb shell` command and then we
    will have to run the `ps` command to find the details of the process that is running.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用ADB分析应用程序权限。为此，我们首先需要通过`adb shell`命令获取设备的shell，然后运行`ps`命令查找正在运行的进程的详细信息。
- en: 'The following screenshot depicts this process for a phone connected to the
    Linux machine on which ADB was run:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了这个过程，手机连接到运行ADB的Linux机器：
- en: '![How to do it...](graphics/image_01_004.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](graphics/image_01_004.jpg)'
- en: How it works...
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Take a while to analyze the preceding screenshot. Make a note of the first,
    second, and last columns which show `USER`, `PID`, and application `NAME` respectively.
    Note that each application has a unique `PID` and is run from a specific user.
    Only a few privileged processes run with the user root. Other applications run
    via specific users. For example, the `com.android.datapass` application with `PID
    299` runs as user `app_47`. Also, `com.svox.pico` runs with user `app_28`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 花点时间分析前面的截图。注意第一列、第二列和最后一列，分别显示了`USER`、`PID`和应用程序`NAME`。请注意，每个应用程序都有一个唯一的`PID`，并且由特定用户运行。只有少数特权进程以root用户身份运行。其他应用程序通过特定用户运行。例如，`com.android.datapass`应用程序的`PID
    299`以用户`app_47`身份运行。同时，`com.svox.pico`以用户`app_28`身份运行。
- en: Each application in Android runs in its own **sandbox**. A sandbox is a virtual
    environment where the application runs within its limited context and is not allowed
    access to, or to be accessed from, other applications. The permissions model in
    Android (applications running with specific users) helps create a sandbox, thereby
    restricting applications within their own context and allowing no or limited interaction
    (as chosen by the application developer) with other applications. This also secures
    applications against data theft or other attacks from rogue applications and malware.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Android中的每个应用程序都运行在自己的**沙箱**中。沙箱是一个虚拟环境，应用程序在其中运行，并且不能访问其他应用程序，或者不允许其他应用程序访问它。Android中的权限模型（应用程序在特定用户下运行）有助于创建沙箱，从而将应用程序限制在自己的上下文中，并根据应用程序开发者的选择，限制与其他应用程序的互动（无论是完全没有互动还是有限的互动）。这也保护应用程序免受数据盗窃或其他恶意应用程序和恶意软件的攻击。
- en: There's more...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The Android permissions model and sandbox implementation attempts to build in
    security by design. This has been the target of attackers and evangelists. Android
    sandbox bypass attacks and attacks originating from insecure code implementation
    are a couple of the types of attack against this security feature. Nevertheless,
    security by design is implemented in the Android OS itself in the form of the
    permissions model.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Android的权限模型和沙箱实现力求通过设计内建安全性。这一目标成为攻击者和宣传者的对象。Android沙箱绕过攻击和来自不安全代码实现的攻击是针对这一安全特性的几种攻击方式。然而，设计内建的安全性已经在Android操作系统中通过权限模型得以实现。
- en: See also
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: Refer to [http://developer.android.com/tools/help/adb.html](http://developer.android.com/tools/help/adb.html)
    for more information
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多信息请参考[http://developer.android.com/tools/help/adb.html](http://developer.android.com/tools/help/adb.html)
- en: Bypassing Android lock screen protection
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绕过Android锁屏保护
- en: Android users are advised to protect their devices by setting up a password,
    pin, or lock screen (graphical pattern). When users talk about lock screen bypass,
    they usually mean they have locked their phone or forgotten their pattern, not
    how to bypass the screen and get into the device. We are approaching the topic
    in a more aggressive fashion, as this book is about mobile device exploitation.
    As an attacker, how could we bypass a victim's lock screen? Now, this topic is
    widely spoken about and there is already a wide range of tricks to do it; various
    exploits/methods may work in specific Android or device versions but may not work
    with others.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 建议 Android 用户通过设置密码、PIN 或锁屏（图形密码）来保护他们的设备。当用户谈论绕过锁屏时，通常指的是他们将手机锁定或忘记了图形密码，而不是如何绕过锁屏进入设备。我们从更具攻击性的角度来探讨这个话题，因为本书涉及的是移动设备的利用。作为攻击者，我们如何绕过受害者的锁屏？现在，这个话题已经被广泛讨论，并且已经有很多方法可以实现；各种漏洞/方法可能适用于特定的
    Android 或设备版本，但在其他版本上可能不起作用。
- en: Getting ready
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We are going to take a case where we reset the lock pattern in a phone via ADB.
    So for this recipe, you need ADB ready. We learned about ADB in the previous recipe.
    Let's now use that what we learnt, to hack. Apart from ADB, you need to obtain
    an Android device with **USB debugging** enabled, and has a that password needs
    to be reset.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以通过 ADB 重置手机锁屏图案为例。因此，对于这个操作，你需要准备好 ADB。在前面的教程中我们已经学习了 ADB，现在我们将利用所学的知识来进行黑客攻击。除了
    ADB，你还需要一部已启用**USB 调试**并且需要重置密码的 Android 设备。
- en: How to do it...
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to bypass the lock screen protection:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤绕过锁屏保护：
- en: Connect to the target Android device using ADB. If we have obtained a phone
    with **USB debugging** enabled and the phone is rooted, things are much easier.
    If the phone is not rooted, then there are hacks to do so as well. For this recipe,
    let's consider a rooted phone.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 ADB 连接到目标 Android 设备。如果我们获得了一部已启用**USB 调试**并且已 root 的手机，那么操作会更加简单。如果手机未 root，也有方法可以实现。对于这个操作，我们假设使用的是一部已
    root 的手机。
- en: 'Now that you are connected via ADB, type the following command:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你已经通过 ADB 连接，输入以下命令：
- en: '[PRE4]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This gives you the shell in a connected Android device.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将为你提供一个连接的 Android 设备的 shell。
- en: 'Next, change the current working directory to /data/system, which is where
    keys are located. To do this, we have to type the following command to change
    the directory:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将当前工作目录更改为`/data/system`，这是存放密钥的地方。为此，我们需要输入以下命令来更改目录：
- en: '[PRE5]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then finally you need to delete the relevant key. Simply run the remove command
    to delete it:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，最后需要删除相关的密钥。只需运行删除命令即可：
- en: '[PRE6]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It can also be run as follows:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 也可以如下运行：
- en: '[PRE7]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In case you are prompted for superuser permissions, you can run the `su` command.
    The preceding commands delete the key files containing lock screen information.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果提示你进行超级用户权限操作，可以运行 `su` 命令。前面的命令会删除包含锁屏信息的密钥文件。
- en: Next, do a device reboot and the lock screen should have gone.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，重启设备，锁屏应该已经消失。
- en: How it works...
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: This works because the key files in the `/data/system` folder contain system
    information, such as the lock screen's password information. If these key files
    are deleted, on reboot the device is not able to locate a lock screen setting,
    so effectively it allows access without a password.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 之所以有效，是因为`/data/system`文件夹中的关键文件包含系统信息，例如锁屏的密码信息。如果这些关键文件被删除，设备在重启时无法找到锁屏设置，因此实际上它允许在没有密码的情况下访问设备。
- en: Note
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A device already in USB debugging mode, and rooted as well, allows this recipe
    to work quite easily.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 处于 USB 调试模式且已 root 的设备可以很容易地实现此方法。
- en: There's more...
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: The key message is; this is not the only way to bypass the lock screen, nor
    is this method guaranteed to work in all cases. Hackers have come up with multiple
    ways to bypass Android lock screens. To further complicate matters, not all methods
    work for all Android versions. So you may have to spend a lot of effort in certain
    cases to figure out how to bypass the Android lock screen.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 关键提示是：这不是绕过锁屏的唯一方法，也不能保证在所有情况下都有效。黑客已经想出了多种绕过 Android 锁屏的方法。更复杂的是，并非所有方法都适用于所有
    Android 版本。所以在某些情况下，你可能需要花费很多精力来弄清楚如何绕过 Android 锁屏。
- en: Setting up the iOS development environment - Xcode and iOS simulator
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 iOS 开发环境 - Xcode 和 iOS 模拟器
- en: By now, you have got the hang of Android development. Now it's time to be introduced
    to the iOS development environment. Apple's iPhone and iPad run on the iOS operating
    system. Application development for iOS requires the Xcode IDE, which runs on
    Mac OS X. Xcode, together with iOS simulator, can be used to develop and test
    iOS applications.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经掌握了Android开发。现在是时候了解iOS开发环境了。苹果的iPhone和iPad运行的是iOS操作系统。iOS应用程序的开发需要使用Xcode
    IDE，该IDE在Mac OS X上运行。Xcode与iOS模拟器一起使用，可以开发和测试iOS应用程序。
- en: Note
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note we say emulators when we talk about Android, and we say simulators when
    talk about iOS. These two are similar to each other, but with one major difference.
    An emulator can use some OS features to test specific applications.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当我们谈论Android时，我们说的是仿真器；而谈论iOS时，我们说的是模拟器。这两者相似，但有一个主要区别：仿真器可以利用一些操作系统功能来测试特定的应用程序。
- en: For example, an Emulator can use a laptop's webcam to run an application that
    requires a camera, whereas such application testing will be limited in an iOS
    simulator. Emulators can also send an SMS to other emulators.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，仿真器可以使用笔记本电脑的摄像头来运行需要摄像头的应用程序，而在iOS模拟器中，类似的应用程序测试会受到限制。仿真器还可以向其他仿真器发送短信。
- en: Some people say that emulators are smarter than simulators. However, generalizing
    that much may not be fair, as long as both serve the job they are designed for.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人说仿真器比模拟器更智能。然而，将其一概而论可能不公平，只要两者都能完成它们设计的工作。
- en: Getting ready
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Xcode is the IDE for developing iOS applications. Xcode runs on Mac OS X, so
    a MacBook is required for iOS application development. So get a MacBook, install
    Xcode, install the iOS SDK, and start coding in iOS.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode是用于开发iOS应用程序的IDE。Xcode运行在Mac OS X上，因此进行iOS应用程序开发需要一台MacBook。所以，准备一台MacBook，安装Xcode，安装iOS
    SDK，开始进行iOS编程。
- en: Note
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that there are useful guidelines at [https://developer.apple.com/programs/ios/gettingstarted/](https://developer.apple.com/programs/ios/gettingstarted/)
    to help you out with this.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在[https://developer.apple.com/programs/ios/gettingstarted/](https://developer.apple.com/programs/ios/gettingstarted/)网站上有一些有用的指南，能帮助你完成此操作。
- en: How to do it...
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps for setting up Xcode and iOS simulator:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤设置Xcode和iOS模拟器：
- en: Locate App Store on your MacBook. Now use App Store to download Xcode (this
    is just like any other App download on mobile phones). You will need an Apple
    ID to download from the App Store. Note that Xcode is free to download from Apple's
    App Store.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的MacBook上找到App Store。现在使用App Store下载Xcode（这与在手机上下载其他应用程序类似）。你需要一个Apple ID才能从App
    Store下载。请注意，Xcode可以免费从Apple的App Store下载。
- en: Once Xcode is installed, you can explore the IDE. It can be used to develop
    Mac OS X applications. Xcode is a common IDE for both OS X applications and iOS
    application development. To be able to develop an iOS application, you also need
    to install the iOS SDK. The latest versions of Xcode include both OS X and the
    iOS SDK. Simulators and instruments are also part of Xcode now.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦Xcode安装完成，你可以开始探索IDE。它可以用来开发Mac OS X应用程序。Xcode是一个通用的IDE，既可以用于OS X应用程序开发，也可以用于iOS应用程序开发。为了能够开发iOS应用程序，你还需要安装iOS
    SDK。最新版本的Xcode包括了OS X和iOS SDK。模拟器和工具现在也成为Xcode的一部分。
- en: Thankfully this is not complicated and the installation of Xcode takes care
    of everything.
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 幸运的是，这并不复杂，Xcode的安装会处理所有相关内容。
- en: 'Once you have everything set up, create a new project. Note that if things
    are properly installed, you get the option to create an iOS and OS X application,
    as shown here:'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦你完成了所有的设置，创建一个新项目。请注意，如果一切安装正常，你将看到可以创建iOS和OS X应用程序的选项，如下所示：
- en: '![How to do it...](graphics/image_01_005.jpg)'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](graphics/image_01_005.jpg)'
- en: How it works...
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Let's make ourselves familiar with the Xcode IDE.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们熟悉一下Xcode IDE。
- en: From the preceding screenshot, let's create a project. We will choose the **Single
    View Application** template for simplicity's sake. This action opens up the **Choose
    options for your new project** window. Provide a name for your project, which
    appends the organization identifier to create a bundle identifier.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的截图开始，我们来创建一个项目。为了简化操作，我们将选择**单视图应用程序**模板。此操作会打开**为新项目选择选项**窗口。为你的项目提供一个名称，系统会自动附加组织标识符，以创建一个捆绑标识符。
- en: '![How it works...](graphics/image_01_006.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](graphics/image_01_006.jpg)'
- en: Note we selected **Swift**, which is a new language introduced in iOS 8\. There
    is another option, to choose traditional **Objective-C**.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们选择了**Swift**，它是iOS 8中引入的一种新语言。还有一个选项是选择传统的**Objective-C**。
- en: Note
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Swift is new programming language for iOS and OS X. It is interactive and is
    intended to make coding fun. Swift makes app development easier and can work alongside
    traditional Objective-C.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 是一种新的 iOS 和 OS X 编程语言。它具有互动性，旨在让编程变得有趣。Swift 使应用开发更加容易，并且可以与传统的 Objective-C
    一起使用。
- en: Some people say that emulators are smarter than simulators. However, generalizing
    that may not be fair, as long as both serve the job they are designed for.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人认为模拟器比仿真器更聪明。然而，将这一点概括为普遍的观点可能不公平，只要它们都能完成设计的任务。
- en: Finally, it is also important that the appropriate device option is selected
    from **iPhone**, **iPad**, or **Universal**. We select **iPhone**, just for the
    sake of this demonstration.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，选择合适的设备选项也很重要，设备选项包括 **iPhone**、**iPad** 或 **通用**。为了演示，我们选择了 **iPhone**。
- en: 'Once you select **Next** and **Create**, we see our project window:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你选择 **下一步** 和 **创建**，我们就会看到我们的项目窗口：
- en: '![How it works...](graphics/image_01_007.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](graphics/image_01_007.jpg)'
- en: The left-hand pane is the project navigator. You can find all your project files
    in this area. The center part of the workspace is the editor area. Depending on
    the type of file, Xcode shows different interfaces in the editing area.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧窗格是项目导航器。你可以在此区域找到所有的项目文件。工作区的中央部分是编辑区。根据文件的类型，Xcode 会在编辑区显示不同的界面。
- en: The right-hand pane is the utility area. This area displays the properties of
    files, and allows you to access **Quick Help**.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧窗格是工具区。此区域显示文件的属性，并允许你访问 **快速帮助**。
- en: There's more...
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Up to now we have written zero lines of code. Even so, we can run our app using
    the built-in simulator. In the toolbar, we can see the *run* button (top left,
    the one resembling the traditional *play* music icon):'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们还没有写任何代码。不过，我们仍然可以通过内置的模拟器运行我们的应用。在工具栏中，我们可以看到 *运行* 按钮（位于左上角，类似传统的 *播放*
    音乐图标）：
- en: '![There''s more...](graphics/image_01_008.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](graphics/image_01_008.jpg)'
- en: 'When we hit the run button, Xcode automatically builds the app and runs it
    on the default iPhone 6 simulator. Of course, since we haven''t programmed our
    app to do anything, it will just display a white screen with nothing inside:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击运行按钮时，Xcode 会自动构建应用程序并在默认的 iPhone 6 模拟器上运行它。当然，由于我们还没有编程让应用执行任何功能，它将仅显示一个空白的白色屏幕：
- en: '![There''s more...](graphics/image_01_009.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](graphics/image_01_009.jpg)'
- en: The *stop* button next to the *run* button terminates the app.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 位于 *运行* 按钮旁边的 *停止* 按钮可以终止应用程序。
- en: See also
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Setting up the iOS pentesting environment*'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*设置 iOS 渗透测试环境*'
- en: Creating a simple iOS app and running it in the simulator
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个简单的 iOS 应用程序并在模拟器中运行
- en: Having introduced you to Xcode and the simulator, now we will create our first
    iOS application.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在向你介绍 Xcode 和模拟器之后，接下来我们将创建我们的第一个 iOS 应用程序。
- en: Getting ready
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To get ready to code the iOS application, you need Xcode and iOS Simulator in
    your MacBook and working. If you have followed the previous recipe, and know a
    little bit of Objective-C, you are all set to code your very first iOS application.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在准备编写 iOS 应用程序的代码之前，你需要在 MacBook 中安装并配置好 Xcode 和 iOS 模拟器。如果你已经按照之前的步骤操作，并且稍微了解一点
    Objective-C，你就可以开始编写你的第一个 iOS 应用程序了。
- en: How to do it...
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Now that we have a basic idea of Xcode, let''s start by building the user interface:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对 Xcode 有了基本了解，让我们从构建用户界面开始：
- en: In the project navigator, select `Main.storyboard`. Xcode then brings up a visual
    editor for storyboards, called **interface builder**.![How to do it...](graphics/image_01_010.jpg)
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中，选择 `Main.storyboard`。Xcode 会弹出一个用于 storyboard 的可视化编辑器，叫做 **界面构建器**。![如何操作...](graphics/image_01_010.jpg)
- en: A storyboard is used to lay out views and transition between different views.
    As we use a single-view application, the storyboard already includes a View Controller.
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Storyboard 用于布局视图并在不同视图之间进行过渡。由于我们使用的是单视图应用程序，Storyboard 已经包含了一个视图控制器。
- en: Next, we will add a button to the view. The bottom part of the utility area
    shows the Object Library, as shown in the following screenshot:![How to do it...](graphics/image_01_011.jpg)
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在视图中添加一个按钮。工具区的底部显示了对象库，如下图所示：![如何操作...](graphics/image_01_011.jpg)
- en: Drag the **Button** object from the Object Library to the view:![How to do it...](graphics/image_01_012.jpg)
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从对象库中将 **按钮** 对象拖动到视图中：![如何操作...](graphics/image_01_012.jpg)
- en: Stop dragging and move the button to the area of your choice. Double-click on
    the button and rename it `Click Me`.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止拖动并将按钮移动到你选择的区域。双击按钮并将其重命名为 `Click Me`。
- en: Next we will add a few lines of code to display our message. In the project
    navigator, you should find the `ViewController.swift` file. We will be adding
    a method to the already present `ViewController` class. When this method is called,
    our code will tell iOS to display a certain message.![How to do it...](graphics/image_01_013.jpg)
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来我们将添加几行代码来显示我们的消息。在项目导航器中，你应该能找到`ViewController.swift`文件。我们将在已经存在的`ViewController`类中添加一个方法。当这个方法被调用时，我们的代码将指示iOS显示一条特定的消息。![如何操作...](graphics/image_01_013.jpg)
- en: 'Now let''s code our method. This is what our method looks like:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们编写我们的方法。这就是我们方法的样子：
- en: '[PRE8]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This is what the finished work will look like:![How to do it...](graphics/image_01_014.jpg)
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是完成后的效果：![如何操作...](graphics/image_01_014.jpg)
- en: Now we need to connect our **Click Me** button in the storyboard to our `showMessage`
    method. This part is easy; we click on `Main.storyboard`, where we have displayed
    our screen.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要将故事板中的**Click Me**按钮与我们的`showMessage`方法连接起来。这部分很简单；我们点击`Main.storyboard`，在那里我们已经展示了我们的屏幕。
- en: Press and hold the **Ctrl** key on your keyboard, click the **Click Me** button,
    and drag it to the **View Controller** icon.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按住键盘上的**Ctrl**键，点击**Click Me**按钮，并将其拖到**视图控制器**图标上。
- en: Release both buttons, and we see a pop-up message with the `showMessage` option.
    Select it to make a connection between the button and our function:![How to do
    it...](graphics/image_01_015.jpg)
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 松开两个按钮，我们会看到一个弹出消息，里面有`showMessage`选项。选择它将按钮与我们的函数连接起来：![如何操作...](graphics/image_01_015.jpg)
- en: That's it! If everything is correct, we can now run our app perfectly when we
    click on the *run* button:![How to do it...](graphics/image_01_016.jpg)
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就是这样！如果一切正常，当我们点击*运行*按钮时，应用应该能完美运行：![如何操作...](graphics/image_01_016.jpg)
- en: How it works...
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `@IBAction` attribute, introduced in Swift, is used to connect storyboard
    actions to the code. Here, we wanted to connect the click of a button to a message
    being displayed. So, we defined the function `showMessage` as `func`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在Swift中引入的`@IBAction`属性，用于将故事板中的动作连接到代码。在这里，我们希望将按钮点击事件与显示消息连接起来。所以，我们将函数`showMessage`定义为`func`。
- en: Note
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Starting from iOS 8, `UIActionSheet` and `UIAlertView` were replaced by the
    new `UIAlertController`.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 从iOS 8开始，`UIActionSheet`和`UIAlertView`被新的`UIAlertController`所取代。
- en: 'In our function, we call `UIAlertController` and ask it to display an alert
    popup, with the title `My First App` and the message `Hello World`. We also add
    an action:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的函数中，我们调用`UIAlertController`并请求它显示一个警报弹窗，标题为`My First App`，消息为`Hello World`。我们还添加了一个动作：
- en: '[PRE9]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This essentially means we add an option to close the popup when **OK** is clicked
    on.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上意味着我们添加了一个选项，当点击**OK**时关闭弹窗。
- en: When we dragged our button to the `ViewController` and selected our `showMessage`
    function, we essentially linked the clicking of the button to the calling of our
    function.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将按钮拖到`ViewController`并选择`showMessage`函数时，我们实际上是将按钮的点击与我们函数的调用连接了起来。
- en: There's more...
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: You can experiment by trying different styles of button, or using table views,
    links, and so on. Add more functionality to experiment in ways of learning iOS
    app development.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过尝试不同风格的按钮，或者使用表格视图、链接等来进行实验。增加更多功能以便在学习iOS应用开发的过程中进行尝试。
- en: 'A good starting place would be the documentation from the creators of iOS:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的起点是来自iOS创建者的文档：
- en: '[https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/index.html](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/index.html)'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/index.html](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/index.html)'
- en: See also
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: You can find a lot of resources on starting out with app development, along
    with videos, tutorials, and sample code, from [https://developer.apple.com/swift/resources/](https://developer.apple.com/swift/resources/)
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在[https://developer.apple.com/swift/resources/](https://developer.apple.com/swift/resources/)找到许多关于应用开发入门的资源，包括视频、教程和示例代码。
- en: Setting up the Android pentesting environment
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Android渗透测试环境
- en: 'By this time, you will be familiar with the Android development environment,
    ADB, and emulators. You have also coded your first application. Now let''s get
    into penetration testing. Penetration testing for mobile applications can be broadly
    classified under four categories:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 到这个时候，你应该已经熟悉了Android开发环境、ADB和模拟器。你也编写了第一个应用程序。现在让我们进入渗透测试的领域。移动应用渗透测试可以大致分为四个类别：
- en: Mobile application traffic-related attacks
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与移动应用程序流量相关的攻击
- en: Mobile device storage-related attacks
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与移动设备存储相关的攻击
- en: Mobile application source code-related attacks
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与移动应用程序源代码相关的攻击
- en: Attacks involving mobile OS features used by mobile applications
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 涉及移动应用程序使用的移动操作系统功能的攻击
- en: This is the most complicated category. There are various Android OS features
    that applications interact with, such as Bluetooth, NFC, intents, broadcast receivers,
    and so on. These also need to be covered in an offensive penetration test.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最复杂的类别。有各种Android操作系统功能与应用程序互动，比如蓝牙、NFC、意图、广播接收器等等。这些也需要在渗透测试中进行覆盖。
- en: Getting ready
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We have to set up a lab for Android pentesting, which should be sufficiently
    well equipped to be able to conduct testing for test cases that fall into the
    four categories listed previously.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为Android渗透测试搭建实验室，实验室应该具备足够的设备来进行测试，涵盖前面提到的四个类别的测试用例。
- en: 'To get going, we need the following:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们需要以下工具：
- en: The Android SDK, emulators, and ADB
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android SDK、模拟器和ADB
- en: Emulators with different Android versions configured
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置了不同Android版本的模拟器
- en: One or two Android handsets or tablets (rooted)
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一到两部Android手机或平板（已root）
- en: Proxy tools such as Charles, Burp Suite, and Fiddler
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代理工具如Charles、Burp Suite和Fiddler
- en: A Wi-Fi network
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Wi-Fi网络
- en: Tools such as SQLite browser, text editors, and XML viewers
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具如SQLite浏览器、文本编辑器和XML查看器
- en: A data cable
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一根数据线
- en: Tools such as a DEX to JAR convertor, jdgui, or Java decompilers
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具如DEX到JAR转换器、jdgui或Java反编译器
- en: Tools such as DroidProxy or Autoproxy for Android
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具如DroidProxy或Autoproxy for Android
- en: How to do it...
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s look at each of these tools:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这些工具：
- en: Android SDK, emulators, and ADB
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android SDK、模拟器和ADB
- en: We already learned about these in previous recipes in this chapter.
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们已经在本章前面的教程中学到过这些。
- en: Emulators with different Android versions configured
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置了不同Android版本的模拟器
- en: Refer to the AVD Manager screenshot shown in a previous recipe. There, we used
    API level 21 and created an emulator for Android version 5.0.1\. Using the new
    option there, we can create more emulators for different API levels and for different
    Android versions.
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参考前面教程中展示的AVD管理器截图。我们当时使用了API级别21，并创建了一个Android 5.0.1版本的模拟器。利用那里的新选项，我们可以为不同的API级别和不同的Android版本创建更多模拟器。
- en: These different versions will come in handy when applications to be pentested
    are developed for specific versions. They also come in handy when specific mobile
    application features are present in specific Android versions.
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些不同版本的模拟器会在对特定版本的应用程序进行渗透测试时派上用场。当某些特定的移动应用功能仅在特定的Android版本中存在时，它们也会非常有用。
- en: One or two Android handsets or tablets (rooted)
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一到两部Android手机或平板（已root）
- en: It is optional to have physical devices, but they do come in handy. Sometimes
    we see that applications crash, emulators are slow, or proxy tools in combination
    with emulators are too slow/crash often, making it difficult to test the application
    with emulators. Having a physical mobile device comes in handy in such cases.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 拥有物理设备是可选的，但它们确实很有用。有时我们会发现应用程序崩溃、模拟器运行缓慢，或者代理工具与模拟器结合使用时速度过慢/经常崩溃，这使得用模拟器测试应用程序变得困难。在这种情况下，拥有一部物理移动设备就很有用了。
- en: Proxy tools such as Charles, Burp Suite, and Fiddler
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代理工具如Charles、Burp Suite和Fiddler
- en: Various proxy tools can be downloaded from their websites. These are quite straightforward
    and there are guides and help forums about them as well. The installation of such
    tools is outside the scope of this book, but we will cover their configuration
    for mobile applications.
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 各种代理工具可以从它们的网站上下载。这些工具相当直观，而且也有相关的指南和帮助论坛。工具的安装超出了本书的范围，但我们会介绍它们在移动应用程序中的配置方法。
- en: 'Here are some links to the most common proxy tools:'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是一些常见代理工具的下载链接：
- en: '[http://portswigger.net/burp/download.html](http://portswigger.net/burp/download.html)'
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://portswigger.net/burp/download.html](http://portswigger.net/burp/download.html)'
- en: '[http://www.charlesproxy.com/download/](http://www.charlesproxy.com/download/)'
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.charlesproxy.com/download/](http://www.charlesproxy.com/download/)'
- en: '[http://www.telerik.com/download/fiddler](http://www.telerik.com/download/fiddler)'
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.telerik.com/download/fiddler](http://www.telerik.com/download/fiddler)'
- en: A Wi-Fi network
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Wi-Fi网络
- en: We need a Wi-Fi network to intercept Wi-Fi traffic. We will later set up a proxy
    for a mobile device to a laptop running a proxy tool, both on the same Wi-Fi network.
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们需要一个Wi-Fi网络来拦截Wi-Fi流量。稍后我们将为移动设备设置代理，将其与运行代理工具的笔记本连接，并确保它们在同一Wi-Fi网络下。
- en: You can either use a Wi-Fi router to set up your personal Wi-Fi network, or
    you can use one of the free tools available to create a hotspot from your laptop.
    In our experience, it is sometimes difficult to work with the latter option, so
    we prefer using the former.
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以使用 Wi-Fi 路由器设置个人 Wi-Fi 网络，也可以使用一些免费的工具通过笔记本电脑创建热点。根据我们的经验，有时使用后者会比较困难，因此我们更倾向于使用前者。
- en: Tools such as SQLite browser, text editors, and XML viewers
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具如 SQLite 浏览器、文本编辑器和 XML 查看器
- en: These are additional tools to read the data extracted from phones. Again, these
    are free downloads or you may already have them.
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些是读取从手机中提取的数据的附加工具。再次强调，这些工具是免费的下载，或者您可能已经拥有它们。
- en: A data cable
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一根数据线
- en: It is also important to own a data cable. Later we will use it to connect the
    phone in order to read its data and conduct attacks that originate via USB.
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 同样，拥有一根数据线也很重要。稍后我们将使用它连接手机，以便读取其数据并执行通过 USB 发起的攻击。
- en: Tools such as a DEX to JAR convertor, jdgui, or Java decompilers
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具如 DEX 到 JAR 转换器、jdgui 或 Java 反编译器
- en: It is also important that these tools are ready in our lab. These small tools
    help us in the decompilation of Android applications.
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另外，确保这些工具在我们的实验室中准备好也很重要。这些小工具帮助我们进行 Android 应用程序的反编译。
- en: Tools such as DroidProxy or Autoproxy for Android
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具如 DroidProxy 或 Autoproxy for Android
- en: Since previous versions of Android did not have a feature to direct the OS to
    set a proxy, we need such tools to be downloaded from Google Play Store.
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于之前版本的 Android 没有设置代理的功能，我们需要从 Google Play 商店下载这些工具。
- en: How it works...
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: 'With the tools ready in our pentesting lab, let''s see how we can link the
    penetration testing use cases to different categories while using the tools:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的渗透测试实验室准备好工具后，让我们看看如何将渗透测试用例与使用这些工具时的不同类别进行关联：
- en: '**Mobile application traffic-related attacks**: This is where Wi-Fi network
    and proxy tools are going to come in handy. A laptop with a Charles or Burp proxy
    installed is connected to Wi-Fi. A mobile device running the application is directed
    to the laptop proxy, using the proxy configuration on the device. Since both the
    laptop and the mobile device are on the same Wi-Fi network, application traffic
    gets routed via the Charles or Burp proxy tool. Use tools like DroidProxy or Autoproxy
    for Android devices to set a proxy if required.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与移动应用程序流量相关的攻击**：这时 Wi-Fi 网络和代理工具将变得非常有用。安装了 Charles 或 Burp 代理的笔记本通过 Wi-Fi
    连接。运行应用程序的移动设备通过设备上的代理配置，指向笔记本代理。由于笔记本和移动设备处于同一 Wi-Fi 网络中，应用程序流量将通过 Charles 或
    Burp 代理工具进行路由。若需要，可以使用如 DroidProxy 或 Autoproxy 等工具为 Android 设备设置代理。'
- en: Effectively, this whole process makes application traffic readable and editable
    via proxy tools so we can conduct various attacks, which will be seen in another
    chapter.
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实际上，这整个过程使得应用程序流量可以通过代理工具进行读取和编辑，从而进行各种攻击，这将在另一个章节中看到。
- en: '**Mobile device storage-related attacks**: We have a data cable to connect
    the phone to the laptop. We have the emulator on the laptop. Both of them can
    run mobile applications. We also have a very powerful tool, ADB, with us; it can
    connect to, and steal data from, devices or emulators, as well as performing many
    other possible attacks.'
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与移动设备存储相关的攻击**：我们有一根数据线可以将手机连接到笔记本电脑。笔记本上有模拟器，二者都能运行移动应用程序。我们还携带了一款非常强大的工具
    ADB，它可以连接设备或模拟器，窃取数据，还能执行其他许多可能的攻击。'
- en: '**Mobile application source code-related attacks**: Decompiling the Android
    application can be broken into two steps: APK to DEX conversion and DEX to JAR
    conversion.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与移动应用程序源代码相关的攻击**：反编译 Android 应用程序可以分为两个步骤：APK 到 DEX 转换和 DEX 到 JAR 转换。'
- en: APK is the Android application package. Once the Android application is developed
    and packed, the resulting file format is `.apk`. Mobile applications are named
    `<filename>.apk`.
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: APK 是 Android 应用程序包。一旦 Android 应用程序开发完成并打包，生成的文件格式就是 `.apk`。移动应用程序的命名格式为 `<filename>.apk`。
- en: APK to DEX conversion is quite straightforward; it just involves renaming and
    unzipping the archived files.
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: APK 到 DEX 的转换相当简单；它只涉及重命名和解压归档文件。
- en: '`.dex` to `.jar` conversion is achieved via tools such as DEX to JAR converters.'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`.dex` 到 `.jar` 的转换是通过工具如 DEX 到 JAR 转换器来实现的。'
- en: There's more...
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: '*Attacks involving mobile OS features used by mobile applications*'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*涉及移动操作系统功能的攻击，这些功能被移动应用程序使用*'
- en: Setting up the iOS pentesting environment
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 iOS 渗透测试环境
- en: 'Now that you are well acquainted with the iOS development environment and simulators,
    and have coded your first application as well, it is time to learn about penetration
    testing for iOS applications. Penetration testing for mobile applications can
    be broadly classified into four categories, as we saw in the previous recipe:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经熟悉了 iOS 开发环境和模拟器，并且也编写了你的第一个应用程序，是时候学习 iOS 应用程序的渗透测试了。移动应用程序的渗透测试可以大致分为四个类别，就像我们在前面的章节中看到的那样：
- en: Mobile application traffic-related attacks
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与移动应用流量相关的攻击
- en: Mobile device storage-related attacks
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与移动设备存储相关的攻击
- en: Mobile application source code-related attacks
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与移动应用源代码相关的攻击
- en: Attacks involving mobile OS features used by mobile applications
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 涉及移动操作系统功能的攻击，这些功能被移动应用程序使用
- en: Getting ready
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We have to set up a lab for iOS pentesting, which should be sufficiently well
    equipped to be able to conduct testing for test cases that fall into the four
    categories listed previously.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为 iOS 渗透测试建立一个实验室，该实验室应该装备完善，能够进行前面提到的四个类别的测试案例。
- en: 'To get going, we need a minimum of the following tools. The list is not very
    different from Android, but includes some specific tools:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始，我们至少需要以下工具。这个列表与 Android 相差不多，但包含了一些特定的工具：
- en: iOS simulators
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iOS 模拟器
- en: Xcode
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xcode
- en: iExplorer
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iExplorer
- en: One or two iPhones or iPads (jailbroken)
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一到两个越狱的 iPhone 或 iPad
- en: Proxy tools such as Charles, Burp Suite, and Fiddler
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 像 Charles、Burp Suite 和 Fiddler 这样的代理工具
- en: A Wi-Fi network
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一条 Wi-Fi 网络
- en: Tools such as SQLite browser, text editors, XML viewers, and plist editors
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 像 SQLite 浏览器、文本编辑器、XML 查看器和 plist 编辑器这样的工具
- en: A data cable
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一根数据线
- en: Tools such as otool and **classdump**
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 像 otool 和 **classdump** 这样的工具
- en: How to do it...
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s look at each of these tools:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐个看看这些工具：
- en: iOS simulators
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iOS 模拟器
- en: We will use iOS Simulators to run iOS applications where we have the application
    code available to us. In such cases, testing can be conducted from just one MacBook
    with all the tools installed (no need for Wi-Fi or mobile handsets).
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将使用 iOS 模拟器来运行那些我们可以访问应用程序代码的 iOS 应用程序。在这种情况下，只需一台安装了所有工具的 MacBook 就可以进行测试（无需
    Wi-Fi 或移动设备）。
- en: Xcode
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xcode
- en: Xcode is the IDE for iOS applications. It is not only helpful for reviewing
    the source code of an iOS application, but also comes in handy in terms of viewing
    certain files, which open in Xcode only.
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Xcode 是 iOS 应用程序的 IDE，它不仅有助于审查 iOS 应用程序的源代码，还可以方便地查看某些只在 Xcode 中打开的文件。
- en: iExplorer
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iExplorer
- en: iExplorer can be downloaded on a MacBook from the Apple App Store. A Windows
    version of this can also be downloaded when working with iPhones or iPads connected
    to a Windows machine via a data cable.
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: iExplorer 可以从 MacBook 上的 Apple App Store 下载。在通过数据线将 iPhone 或 iPad 连接到 Windows
    计算机时，也可以下载 Windows 版本。
- en: iExplorer, like Windows Explorer, helps to navigate the filesystem. It can be
    used to explore, read files, and steal data from iOS devices.
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: iExplorer 像 Windows 资源管理器一样，帮助导航文件系统。它可以用来浏览、读取文件并从 iOS 设备中窃取数据。
- en: One or two iPhones or iPads (jailbroken)
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一到两个越狱的 iPhone 或 iPad
- en: A jailbroken iOS device comes in handy. The applications installed on these
    devices can be pentested from the device itself, eliminating the requirement for
    Simulators.
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 越狱的 iOS 设备非常实用。安装在这些设备上的应用程序可以直接从设备本身进行渗透测试，省去了模拟器的需求。
- en: Proxy tools such as Charles, Burp Suite, and Fiddler
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 像 Charles、Burp Suite 和 Fiddler 这样的代理工具
- en: Various proxy tools can be downloaded from their websites. These are quite straightforward
    and there are guides and help forums about them as well. The installation of such
    tools is outside the scope of this book, but we will cover the configuration of
    them for mobile applications.
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 各种代理工具可以从它们的官网上下载。这些工具使用起来相对简单，并且有相关的指南和帮助论坛。虽然本书不涉及这些工具的安装，但我们会讲解如何为移动应用配置这些工具。
- en: 'Here are links to the most common proxy tools:'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是一些常见代理工具的链接：
- en: '[http://portswigger.net/burp/download.html](http://portswigger.net/burp/download.html)'
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://portswigger.net/burp/download.html](http://portswigger.net/burp/download.html)'
- en: '[http://www.charlesproxy.com/download/](http://www.charlesproxy.com/download/)'
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.charlesproxy.com/download/](http://www.charlesproxy.com/download/)'
- en: '[http://www.telerik.com/download/fiddler](http://www.telerik.com/download/fiddler)'
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.telerik.com/download/fiddler](http://www.telerik.com/download/fiddler)'
- en: A Wi-Fi network
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一条 Wi-Fi 网络
- en: We need a Wi-Fi network to intercept Wi-Fi traffic. We will later set up a proxy
    for a mobile device to a laptop running a proxy tool, with both on the same Wi-Fi
    network.
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们需要一个 Wi-Fi 网络来拦截 Wi-Fi 流量。稍后我们将为移动设备设置代理，连接到运行代理工具的笔记本电脑，且两者处于同一 Wi-Fi 网络中。
- en: Either you can use a Wi-Fi router to set up your personal Wi-Fi network, or
    you can use one of the free tools available to create a hotspot from your laptop.
    In our experience, it is sometimes difficult to work with the latter option, so
    we prefer using the former.
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以使用 Wi-Fi 路由器设置个人 Wi-Fi 网络，或者使用一些可用的免费工具从笔记本电脑创建一个热点。根据我们的经验，后者有时难以使用，因此我们更倾向于使用前者。
- en: Tools such as SQLite browser, text editors, XML viewers, and plist editors
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具如 SQLite 浏览器、文本编辑器、XML 查看器和 plist 编辑器
- en: These are additional tools for reading the data extracted from phones. Again
    these are free to download, or you may already have them.
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些是用于读取从手机提取的数据的附加工具。这些工具可以免费下载，或者你可能已经拥有它们。
- en: plist files are used in iOS applications to store data, and plist editors are
    useful in reading such files.
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: plist 文件在 iOS 应用程序中用于存储数据，plist 编辑器在读取这些文件时非常有用。
- en: A data cable
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一条数据线
- en: It is also important to own a data cable. Later, we will use it to connect to
    the phone in order to read data and conduct attacks that originate via USB.
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 拥有一条数据线也很重要。稍后我们将用它连接到手机，以读取数据并进行通过 USB 发起的攻击。
- en: Tools such as otool and classdump
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具如 otool 和 classdump
- en: These tools are decompilation tools for iOS applications.
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些工具是 iOS 应用程序的反编译工具。
- en: How it works...
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'With the tools ready in our pentesting lab, let''s see how we can link the
    penetration testing use cases to different categories while using these tools:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好渗透测试实验室的工具后，接下来我们来看一下如何将渗透测试用例与不同类别进行关联，同时使用这些工具：
- en: '**Mobile application traffic-related attacks**: This is where a Wi-Fi network
    and proxy tools are going to come in handy. A laptop with a Charles or Burp proxy
    installed is connected to Wi-Fi. An iOS device running the application is directed
    to the laptop proxy, using the proxy configuration on the device. Since both the
    laptop and the mobile device are on the same Wi-Fi network, application traffic
    is routed via the Charles or Burp proxy tool. This setup does not require a MacBook
    (any other laptop will do), but an iOS device is needed.'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与移动应用程序流量相关的攻击**：在这里，Wi-Fi 网络和代理工具将发挥重要作用。一台安装了 Charles 或 Burp 代理的笔记本电脑连接到
    Wi-Fi。运行应用程序的 iOS 设备通过代理配置，连接到笔记本电脑的代理。由于笔记本电脑和移动设备在同一 Wi-Fi 网络上，应用程序流量通过 Charles
    或 Burp 代理工具进行路由。这种设置不需要 MacBook（任何其他笔记本电脑都可以），但需要 iOS 设备。'
- en: Another possibility is that we can use a MacBook but not an iOS device. In this
    case, we will run the application via Xcode and the Simulator. The proxy is set
    to localhost on the MacBook, where we are running a proxy tool such as Burp or
    Charles.
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一种可能性是我们可以使用 MacBook，但不使用 iOS 设备。在这种情况下，我们将通过 Xcode 和模拟器运行应用程序。代理设置为 MacBook
    上的 localhost，那里运行着如 Burp 或 Charles 之类的代理工具。
- en: Effectively, both approaches make application traffic readable and editable
    via proxy tools, and we can conduct various attacks, which will be seen in another
    chapter.
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实际上，这两种方法都使应用程序流量通过代理工具变得可读和可编辑，我们可以进行各种攻击，这将在另一个章节中讨论。
- en: '**Mobile device storage-related attacks**: We have a data cable to connect
    the iPhone or iPad to the laptop. We can use the iExplorer tool on the laptop
    to read and steal files and other data.'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与移动设备存储相关的攻击**：我们有一条数据线将 iPhone 或 iPad 连接到笔记本电脑。我们可以在笔记本电脑上使用 iExplorer 工具读取和窃取文件及其他数据。'
- en: '**Mobile application source code-related attacks**: We discussed the otool
    and classdump tools. Only a limited decompilation is possible in the case of iOS
    applications, and these tools can help only up to a certain point. This will be
    covered in detail in one of the later chapters.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与移动应用程序源代码相关的攻击**：我们讨论了 otool 和 classdump 工具。在 iOS 应用程序的情况下，只能进行有限的反编译，而这些工具只能帮助到一定程度。稍后的某一章节将详细介绍这一点。'
- en: There's more...
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: '*Attacks involving mobile OS features used by mobile applications*'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*涉及移动操作系统功能的攻击，这些功能被移动应用程序使用*'
- en: This is the most complicated category and becomes further complicated in the
    case of the iOS platform. There are various iOS features that applications interact
    with, such as screenshot backgrounding, Bluetooth, NFC, and so on. The interaction
    of these features with the application, along with the insecure implementation
    of these features in the application, results in vulnerabilities. A popular example
    is the screenshot backgrounding vulnerability in iOS applications.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最复杂的类别，尤其在 iOS 平台上更为复杂。iOS 系统中有多个应用程序交互的功能，比如截屏后台、蓝牙、NFC 等等。这些功能与应用程序的交互，以及这些功能在应用程序中的不安全实现，会导致漏洞。一个常见的例子是
    iOS 应用程序中的截屏后台漏洞。
- en: Introduction to rooting and jailbreaking
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rooting 和越狱介绍
- en: Fundamentally, rooting is obtaining root access to the underlying Linux system,
    in order to perform operations such as mounting/unmounting filesystems; running
    SSH, HTTP, DHCP, DNS or proxy daemons; killing system processes; and so on.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 从根本上讲，rooting（获取 root 权限）是获取对底层 Linux 系统的 root 访问权限，以便执行诸如挂载/卸载文件系统、运行 SSH、HTTP、DHCP、DNS
    或代理守护进程、终止系统进程等操作。
- en: Being able to run commands as the root user allows us to do anything on Linux
    and thus, by extension, on an Android system.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 能够以 root 用户身份运行命令，使我们能够在 Linux 上做任何事情，因此，也可以在 Android 系统上执行任何操作。
- en: Jailbreaking is the process of privilege escalation, by which we can remove
    the hardware level restrictions imposed by Apple on iOS devices. Jailbreaking
    permits root access to the iOS filesystem and manager, allowing the downloading
    of additional applications, extensions, and themes that are unavailable through
    the official Apple App Store.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 越狱是特权提升过程，通过这个过程我们可以移除 Apple 在 iOS 设备上施加的硬件级限制。越狱允许访问 iOS 文件系统和管理器，从而可以下载官方
    Apple 应用商店无法提供的额外应用、扩展和主题。
- en: Getting ready
  id: totrans-302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: All that is needed to root an Android device is a USB cable; an unrooted Android
    device; and an exploit code to be run on the device, either through ADB, one-click-root
    programs/apps, or a modified ROM that can be flashed onto the device.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: Root 一个 Android 设备所需的只是一个 USB 数据线、一台未 root 的 Android 设备，以及一个可以通过 ADB、一键 root
    程序/应用或可以刷入设备的修改版 ROM 运行的漏洞代码。
- en: The requirements for an iOS jailbreak are a USB Cable, an iOS device, and a
    jailbreaking program.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: iOS 越狱所需的设备是 USB 数据线、iOS 设备和越狱程序。
- en: How to do it...
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Here we will go through two steps; rooting and jailbreaking.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们将介绍两个步骤：rooting 和越狱。
- en: Rooting
  id: totrans-307
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Rooting
- en: 'The actual rooting process itself should only take a single click. However,
    you''ll need to do a few quick things first:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的 rooting 过程本身应该只需点击一次。但在此之前，你需要先做一些快速的设置：
- en: Download and install the Java JDK and Android SDK on your computer before continuing.
    Java must be installed before the Android SDK.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在继续操作之前，下载并安装 Java JDK 和 Android SDK。必须先安装 Java，之后才能安装 Android SDK。
- en: Enable **USB debugging** on your Android. On the device, go into the **Settings**
    screen, tap **Applications**, tap **Development**, and enable the **USB debugging**
    checkbox:![Rooting](graphics/image_01_017.jpg)
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 Android 设备上启用**USB 调试**。在设备上，进入**设置**屏幕，点击**应用程序**，点击**开发**，然后勾选**USB 调试**复选框：![Rooting](graphics/image_01_017.jpg)
- en: 'After this, the rooting process essentially involves finding tested rooting
    methods for your specific device by searching the Internet. The rooting processes
    for most Android devices can be categorized into the following:'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成这些操作后，rooting 过程本质上是通过在互联网上搜索适合你特定设备的测试过的 root 方法。大多数 Android 设备的 root 过程可以归类为以下几种：
- en: '**Using a rooting application**: In this process you perform the following
    tasks:'
  id: totrans-312
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 rooting 应用程序**：在这个过程中，你需要执行以下任务：'
- en: Install the rooting application on your machine
  id: totrans-313
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的计算机上安装 rooting 应用程序
- en: Connect the Android device with **USB debugging** enabled
  id: totrans-314
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将启用了**USB 调试**的 Android 设备连接到电脑
- en: Follow the simple instructions to root your device
  id: totrans-315
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照简单的说明操作以 root 你的设备
- en: '**Using rooting apps**: In this process you perform the following tasks:'
  id: totrans-316
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 rooting 应用程序**：在此过程中，你需要执行以下任务：'
- en: Download the rooting APK
  id: totrans-317
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 rooting APK 文件
- en: Enable **USB debugging** mode and allow installation from unknown sources, from
    the development settings of the Android device
  id: totrans-318
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Android 设备的开发设置中启用**USB 调试**模式并允许来自未知来源的安装
- en: Install the rooting APK using `adb install /path/to/apk`
  id: totrans-319
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `adb install /path/to/apk` 安装 rooting APK 文件
- en: Follow the onscreen instructions to root the Android device
  id: totrans-320
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照屏幕上的指示完成 Android 设备的 root 操作
- en: '**Flashing a custom ROM**: In this process you perform the following tasks:'
  id: totrans-321
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**刷入自定义 ROM**：在此过程中你需要执行以下任务：'
- en: Copy the modified ROM to the SD card of the Android device (as a `.zip` file)
  id: totrans-322
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将修改后的 ROM 复制到 Android 设备的 SD 卡中（作为 `.zip` 文件）
- en: Reboot the device in recovery mode
  id: totrans-323
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在恢复模式下重启设备
- en: Head to the **install** or **install zip from sdcard** section of the recovery
    menu
  id: totrans-324
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往恢复菜单的 **安装** 或 **从 SD 卡安装 zip** 部分
- en: Navigate to the `.zip` file, and select it from the list to flash it
  id: totrans-325
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `.zip` 文件，并从列表中选择它进行刷机
- en: Jailbreaking
  id: totrans-326
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 越狱
- en: Before performing a jailbreak, you should back up your device. If for any reason
    the jailbreak fails, you can restore the backup.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行越狱之前，你应该备份设备。如果因为某种原因越狱失败，你可以恢复备份。
- en: 'The jailbreaking process involves downloading the program to a Mac/Windows
    machine, connecting our iOS device to our machine via a USB cable, and running
    the tool. One such tool is **evasi0n**:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 越狱过程包括将程序下载到 Mac/Windows 机器上，通过 USB 数据线将 iOS 设备连接到计算机，然后运行该工具。其中一个工具是 **evasi0n**：
- en: '![Jailbreaking](graphics/image_01_018.jpg)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
  zh: '![越狱](graphics/image_01_018.jpg)'
- en: The instructions are mentioned along with the tool, and should be followed methodically.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 这些说明已与工具一起提供，应该按步骤遵循。
- en: As a part of the jailbreaking process, the tool installs Cydia on the target
    iOS device.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 作为越狱过程的一部分，该工具会在目标 iOS 设备上安装 Cydia。
- en: Cydia is an alternative App store containing iOS apps other than ones provided
    and usually *approved* by Apple. Most of these apps are developed by the jailbreaking
    community, such as tools for using custom themes and widgets, changing default
    apps, and so on.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: Cydia 是一个替代的 App Store，包含除了 Apple 提供的并通常被 *批准* 的 iOS 应用之外的其他应用。大多数这些应用由越狱社区开发，例如用于使用自定义主题和小部件、改变默认应用等的工具。
- en: '![Jailbreaking](graphics/image_01_019.jpg)'
  id: totrans-333
  prefs: []
  type: TYPE_IMG
  zh: '![越狱](graphics/image_01_019.jpg)'
- en: How it works...
  id: totrans-334
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: Let's take a look at the details with reference to the processes individually.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐个查看与这些过程相关的详细信息。
- en: Rooting
  id: totrans-336
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Root 权限
- en: Being able to run commands as the root user allows us to do anything on Linux
    and thus, by extension, on an Android system.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 能够以 root 用户身份运行命令使我们能够在 Linux 系统上执行任何操作，因此，也可以扩展到 Android 系统上。
- en: 'The process for rooting an Android device typically involves two steps:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 为 Android 设备进行 root 的过程通常包括两个步骤：
- en: Find an exploit that allows the execution of arbitrary code as `root`.
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到一个允许作为 `root` 执行任意代码的漏洞。
- en: Use the exploit to install `su`.
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用漏洞来安装 `su`。
- en: If the target device has an unlocked **bootloader**, the process is pretty easy.
    An unpackaged bootloader allows the flashing of arbitrary ROMs, so `su` can be
    added to a stock ROM and repackaged into a modified ROM. All the user needs to
    do is to reboot the device into flashing mode by pressing a combination of keys
    during bootup, and use the device's utilities to flash the modified ROM onto the
    device.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 如果目标设备解锁了 **bootloader**，那么这个过程相当简单。未打包的 bootloader 允许刷入任意的 ROM，因此可以将 `su` 添加到官方
    ROM 中，然后将其重新打包为修改版 ROM。用户只需在开机时按下组合键将设备重启到刷机模式，并使用设备的工具将修改版 ROM 刷入设备。
- en: But, what about devices that have locked bootloaders? You can only interact
    with unprivileged programs on the system and they cannot help you execute any
    privileged code.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，对于那些具有锁定 bootloader 的设备怎么办？你只能与系统中的非特权程序进行交互，它们无法帮助你执行任何特权代码。
- en: Many programs, such as system services, run as root on Android, to be able to
    access underlying hardware resources.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 许多程序，例如系统服务，都会以 root 身份在 Android 上运行，以便能够访问底层硬件资源。
- en: All one-click-root methods exploit vulnerabilities in one of these system processes
    running in privileged mode to execute a particular piece of code that mounts the
    system in read-write mode and installs the `su` binary on the system, thus gaining
    privileged access to the system.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 所有一键 Root 方法都利用了运行在特权模式下的系统进程中的漏洞，执行特定的代码，使系统以读写模式挂载并安装 `su` 二进制文件，从而获得对系统的特权访问。
- en: Jailbreaking
  id: totrans-345
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 越狱
- en: The jailbreaking process differs from tool to tool, and different procedures
    are followed for different iOS versions. Here, we analyze the anatomy of one such
    tool, used to jailbreak an iPhone 5.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 越狱过程因工具而异，对于不同的 iOS 版本需要遵循不同的步骤。在这里，我们分析一个用于越狱 iPhone 5 的工具的结构。
- en: The jailbreaking program begins by running `libimobiledevice` to exploit a bug
    in iOS's mobile backup system in order to gain access to a normally restricted
    file containing the time zone settings.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 越狱程序首先通过运行 `libimobiledevice` 利用 iOS 的移动备份系统中的漏洞，获取通常受限的文件（该文件包含时区设置）的访问权限。
- en: Note
  id: totrans-348
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: libimobiledevice is a cross-platform software library which "talks" the protocols
    that support iOS devices. It allows other software to easily access the device's
    filesystem; retrieve information about the device and its internals; back up and
    restore the device; manage installed applications; retrieve address books, calendars,
    notes and bookmarks; and synchronize music and video to the device.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: libimobiledevice 是一个跨平台的软件库，支持与 iOS 设备进行协议通信。它允许其他软件轻松访问设备的文件系统；获取关于设备及其内部信息；备份和恢复设备；管理已安装的应用程序；获取通讯录、日历、笔记和书签；并将音乐和视频同步到设备。
- en: More information can be found at [http://www.libimobiledevice.org/](http://www.libimobiledevice.org/).
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息可以在 [http://www.libimobiledevice.org/](http://www.libimobiledevice.org/)
    上找到。
- en: It then inserts a "symbolic link" to a certain altered "socket," which allows
    programs to communicate with **launchd**, a master process which is loaded whenever
    an iOS device boots up and can launch applications that require "root" privileges.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它插入一个“符号链接”指向某个已修改的“套接字”，使得程序能够与 **launchd** 通信，launchd 是一个主进程，每当 iOS 设备启动时会加载它，并且可以启动需要“root”权限的应用程序。
- en: So now, whenever an iOS mobile backup runs, all programs will automatically
    be granted access to the time zone file, and therefore access to launchd.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在，每当 iOS 移动备份运行时，所有程序都会自动获得访问时区文件的权限，从而获得对 launchd 的访问权限。
- en: Pretty neat, huh?
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 挺酷的，对吧？
- en: iOS implements code-signing as a safeguard to prevent any "untrusted" application
    from gaining access to launchd.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: iOS 实现了代码签名作为一种防护措施，防止任何“未受信任”的应用程序获得访问 launchd 的权限。
- en: So to defeat code signing, the jailbreaking tool launches a new, unsigned, seemingly
    benign app. But when the user is prompted to tap the app's icon, the app uses
    a technique called shebang to call up code from another signed application, which
    in this case was launchd.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 所以为了破解代码签名，越狱工具启动了一个新的、未签名的、看似无害的应用程序。但当用户被提示点击应用程序图标时，该应用程序使用了一种名为 shebang
    的技术，调用了另一个已签名应用程序的代码，在这种情况下是 launchd。
- en: A shebang is a character sequence consisting of the hash symbol and exclamation
    mark characters (that is, `#!`) at the beginning of a script.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: Shebang 是一个字符序列，由井号符号和感叹号符号组成（即 `#!`），位于脚本的开头。
- en: In Unix, when a script with a shebang is run as a program, the program loader
    parses the rest of the script's initial line as an interpreter directive; the
    specified interpreter program is run instead, passing to it as an argument the
    path that was initially used when attempting to run the script.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unix 中，当带有 shebang 的脚本作为程序运行时，程序加载器会将脚本的初始行解析为解释器指令；然后指定的解释器程序将被运行，并将原本用于运行脚本的路径作为参数传递给它。
- en: For example, if a code has the path `path/to/code`, and it starts with `#!/bin/sh`,
    then the program loader is instructed to run the program `/bin/sh` instead, passing
    `path/to/code` as the first argument.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果代码的路径是 `path/to/code`，并且它以 `#!/bin/sh` 开头，那么程序加载器会指示程序运行 `/bin/sh`，并将 `path/to/code`
    作为第一个参数传递给它。
- en: launchd is then used to run the `remount` command, which changes the memory
    settings of the read-only root file system to be writable.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，launchd 被用来运行 `remount` 命令，该命令将只读根文件系统的内存设置更改为可写。
- en: To make the jailbreak "persistent", the `launchd.conf` file is called to alter
    the launchd configurations. The user now does not need to re-run the program on
    every reboot.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使越狱“持久化”，调用了 `launchd.conf` 文件来更改 launchd 配置。用户现在不需要在每次重启时重新运行该程序。
- en: The jailbreaking tool then moves on to its last feat, removing restrictions
    at the kernel level. The iOS kernel uses **Apple Mobile File Integrity Daemon**
    (**AMFID**) to run unapproved apps from using a process. The jailbreaking program
    leverages launchd once again, to load a library of functions into AMFID in order
    to always approve all apps.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 越狱工具接着进行最后的突破，去除内核级别的限制。iOS 内核使用 **Apple Mobile File Integrity Daemon**（**AMFID**）来防止未批准的应用程序运行。越狱程序再次利用
    launchd，向 AMFID 加载一个功能库，以便始终批准所有应用程序。
- en: The second restriction posed by the kernel is **Address Space Layout Randomization**
    (**ASLR**), used to prevent the alteration of memory by randomizing or "hiding"
    the device's code every time it boots. This would prevent someone from write over
    a particular part of the code.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 内核施加的第二个限制是 **地址空间布局随机化**（**ASLR**），用于通过随机化或“隐藏”设备代码每次启动时的方式，防止内存被篡改。这将防止有人覆盖代码的特定部分。
- en: The jailbreaking tool then uses a neat trick to locate one particular area in
    memory; the ARM exception vector. This part handles app crashes, indicating the
    part of memory where the crash occurred.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，越狱工具利用一个巧妙的技巧定位内存中的一个特定区域；ARM 异常向量。该部分处理应用崩溃，指示崩溃发生的内存位置。
- en: A crash is simulated by the jailbreaking tool, checking the ARM exception vector
    to see where the crash occurred and collecting minimal information, enough to
    map out the rest of the kernel.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 崩溃是通过越狱工具模拟的，通过检查 ARM 异常向量来查看崩溃发生的位置，并收集最少的信息，足以映射出其余的内核。
- en: The tool, as its final step, uses a bug in iOS's USB interface that passes an
    address in the kernel's memory to a program and expects the program to return
    it untampered.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具的最后一步利用了 iOS USB 接口中的一个漏洞，该漏洞将内核内存中的地址传递给程序，并期望程序返回未被篡改的地址。
- en: This allows the tool to write to the part of the kernel that restricts code
    changes, thus taking complete control, and fulfilling its purpose successfully!
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得该工具能够写入内核中限制代码更改的部分，从而完全控制并成功实现其目的！
