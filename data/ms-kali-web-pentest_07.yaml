- en: Chapter 8. Exploiting Trust Through Cryptography Testing
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第8章。通过加密测试利用信任
- en: The development of commercially available encryption and cryptographic methods
    has been crucial to the adoption of the internet as the engine of the global economy.
    The web has come a long way from its early days with early browsers such as Erwise
    and Mosaic delivering static, open information to mainly education users. It is
    hard to imagine a time when the web was plain-text, when information was transmitted
    (and stored, for that matter) without any protection against theft or snooping.
    Now, the financial, personal, and intellectual transactions that the internet
    facilitates are protected by mathematically-driven algorithms such as the **Secure
    Socket Layer** (**SSL**)/Â **Transport Layer Security** (**TLS**), **Advanced
    Encryption Standard**Â (**AES**), **Secure Hashing Algorithm** (**SHA**), and
    **Diffie-Helman** (**DH**). Together, these standards and more, coupled with an
    extensive infrastructure for the sharing of keys are what enable us to trust these
    transactions. That trust is understandable; consumer-grade electronics and open-source
    software are readily available to implement cryptographic techniques to provide
    the three key tenets of information security; **Confidentiality**, **Integrity**,
    and **Availability** (**CIA**). This, of course, assumes everyone is using the
    right standards and protocols and that they are configured properly.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 商用加密和密码方法的发展对于互联网作为全球经济引擎的采用至关重要。网络已经走过了很长的路，从早期的浏览器如Erwise和Mosaic向主要教育用户提供静态、开放信息的日子。很难想象网络曾经是纯文本的时代，信息在没有任何防盗或窥探保护的情况下传输（以及存储）。现在，互联网促进的金融、个人和知识交易受到数学驱动算法的保护，如安全套接字层（SSL）/传输层安全性（TLS）、高级加密标准（AES）、安全散列算法（SHA）和Diffie-Helman（DH）。这些标准以及更多，再加上用于共享密钥的广泛基础设施，使我们能够信任这些交易。这种信任是可以理解的；消费级电子产品和开源软件可以轻松实现加密技术，以提供信息安全的三个关键原则；保密性、完整性和可用性（CIA）。当然，这假设每个人都在使用正确的标准和协议，并且它们被正确配置。
- en: Attacks focused on cryptographic methods (and related fields, like steganography)
    often avoid trying to break the encryption itself. The *Apple vs. United States
    Department of Justice* battle over backdoors into iPhones is telling; it is cheap
    and easy to encrypt communications, but incredibly hard to break that same encryption.
    Attackers might instead look to head encryption off at the pass; to intercept
    the information before it is encrypted, or after it is decrypted by the recipient.
    This is easier technically, but practically speaking, they have to be on those
    hosts. Wouldn't it be easier to fool both the sender and recipient; source and
    destination into believing that their own system is one of the two interested
    parties? This is in essence the **Man-in-the-Middle** (**MITM**) attack, and its
    uses extend far beyond mere intercepts. This is a sort of *if you can't beat 'em,
    join 'em* approach.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 针对加密方法（以及相关领域，如隐写术）的攻击通常避免尝试破解加密本身。苹果公司与美国司法部之间关于iPhone后门的战斗说明了这一点；加密通信是廉价且容易的，但要破解相同的加密却非常困难。攻击者可能会试图在加密之前拦截信息，或者在接收方解密后拦截信息。从技术上讲，这更容易，但从实际上讲，他们必须在这些主机上。欺骗发送方和接收方；源和目的地相信他们自己的系统是两个感兴趣的方之一会更容易吗？这本质上就是中间人攻击，其用途远不止拦截。
- en: MITM attacks are popular for many forms of hacking; credential capture, poisoned
    web traffic resulting in malware delivery, redirection to a malicious portal,
    or the collection and potential manipulation of the flows themselves are possible.
    Defending against these malicious uses is made more difficult because the same
    techniques have legitimate uses in the enterprise. Web proxies and firewalls use
    SSL/TLS MITM for good, helping to hide and protect the end users and their clients,
    allowing for full inspection and content filtering, and ensuring protection from
    denial of service attacks and privacy. As long as these two opposed uses of these
    techniques exist, attackers can leverage them in their hacking of our customers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 中间人攻击在许多形式的黑客攻击中很受欢迎；捕获凭据、导致恶意软件传递的污染的网络流量、重定向到恶意门户，或者收集和潜在操纵流本身都是可能的。防御这些恶意用途变得更加困难，因为相同的技术在企业中也有合法用途。Web代理和防火墙使用SSL/TLS中间人攻击是有益的，帮助隐藏和保护最终用户和他们的客户端，允许进行全面检查和内容过滤，并确保免受拒绝服务攻击和隐私侵犯。只要这两种相反的用途存在，攻击者就可以利用它们来黑客我们的客户。
- en: 'We must be able to uncover and validate all perceivable flaws, via both circumvention
    and MITM. In this chapter, we''ll see how encryption is used in web application
    communications, peer into encrypted sessions, and either circumvent encryption
    or breach it using MITM attacks. In this chapter, we''ll go through the following
    topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须能够发现和验证所有可察觉的缺陷，无论是通过规避还是中间人攻击。在本章中，我们将看到加密是如何在Web应用程序通信中使用的，窥视加密会话，并使用中间人攻击规避加密或突破加密。在本章中，我们将讨论以下主题：
- en: Learning how weak ciphers can be compromised by persistent attackers and how
    we can detect them using OpenSSL, **SSLyze**, and **SSLscan**
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何持久攻击者可以通过OpenSSL，SSLyze和SSLscan检测到弱密码的妥协以及我们如何检测它们
- en: Experiencing how we perform MITM attacks against a secure connection, spot interesting
    payloads, and manipulate them using **SSLsplit** and **SSLsniff**
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 体验我们如何对安全连接执行中间人攻击，发现有趣的有效载荷，并使用SSLsplit和SSLsniff进行操纵。
- en: Defeating SSL altogether by acting as a MITM and removing encryption from the
    flow usingÂ **SSLstrip**
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过充当中间人并使用SSLstrip从流中删除加密来完全击败SSL
- en: How secret is your secret?
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你的秘密有多保密？
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Estimates place SSL/TLS use in web traffic at over 60%, and with public sentiment
    regarding snooping and intercept by both hackers and governments, we should expect
    that to continue to rise. While it is difficult in practice, it is indeed well
    worth an attacker''s time if the data gleaned is of sufficient value. OWASP''s
    Top 10 list has had **Sensitive Data Exposure** as a top threat for several cycles,
    with both the 2013 and 2017 ([https://github.com/OWASP/Top10/blob/master/2017/OWASP%20Top%2010%20-%202017%20RC1-English.pdf?platform=hootsuite](https://github.com/OWASP/Top10/blob/master/2017/OWASP%20Top%2010%20-%202017%20RC1-English.pdf?platform=hootsuite))
    iterations ranking it number 6: the most concerning threat to web applications.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 据估计，SSL/TLS在网络流量中的使用率超过60％，并且由于公众对黑客和政府的窥探和拦截的看法，我们应该预计这一比例将继续上升。虽然在实践中很困难，但如果获取的数据价值足够大，攻击者的时间确实是值得的。OWASP的十大威胁列表在多个周期中都将**敏感数据暴露**列为最严重的威胁，2013年和2017年的版本都将其排名为第6位：对Web应用程序最令人担忧的威胁。
- en: In the summary of their Sensitive Data Exposure section (as shown in the following
    screenshot), it would be much harder if web developers properly configured it
    and used current technologies and module versions to provide protection. A considerable
    portion of our tests will revolve around checking for obsolete packages, insufficient
    key strengths, and misconfigured endpoints. That being said, should all of those
    things have been properly configured, we'll see how some MITM attacks can assist
    in overcoming that protection.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在他们的敏感数据暴露部分的总结中（如下图所示），如果Web开发人员正确配置并使用当前技术和模块版本来提供保护，那么将会更加困难。我们的测试中相当大一部分将围绕检查过时的软件包、不足的密钥强度和配置错误的端点展开。也就是说，如果所有这些事情都得到了正确的配置，我们将看到一些中间人攻击如何帮助克服这种保护。
- en: '![](img/B03918_08_01.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_08_01.png)'
- en: OWASP's Broken Auth and Session Hijacking Characterization
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP的破坏身份验证和会话劫持特征化
- en: 'Before jumping in, it is helpful to understand what type of cryptographic application
    we are discussing. Given its wide spread use in information technology, we need
    to restrict this discussion to the scope of web servers and their server-client
    relationships. Even then, there are many potential topologies out there, but they
    all share some common elements, as seen in the following screenshot:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，了解我们正在讨论的加密应用程序的类型是有帮助的。鉴于它在信息技术中的广泛应用，我们需要将此讨论范围限制在Web服务器及其服务器-客户端关系的范围内。即使在这种情况下，存在许多潜在的拓扑结构，但它们都有一些共同的元素，如下图所示：
- en: '![](img/B03918_08_02.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_08_02.png)'
- en: Basic SSL/TLS Structure and Attack Points
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 基本SSL/TLS结构和攻击点
- en: An on-the-rise means of attack involves exploiting the DNS and PKI infrastructure
    to augment MITM and fool wary clients into believing they are indeed attaching
    to the appropriate server or legitimate proxy (not shown). Each of the elements
    here will have their own capabilities.Â  Our job as testers is to find which elements
    are compromising the integrity end to end.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一种不断增长的攻击手段涉及利用DNS和PKI基础设施来增强中间人攻击，并欺骗警惕的客户端，使其相信它们确实连接到适当的服务器或合法的代理（未显示）。这里的每个元素都将有自己的能力。我们作为测试人员的工作是找出哪些元素正在损害端到端的完整性。
- en: Assessing encryption like a pro
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 像专业人士一样评估加密
- en: '* * *'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Much of an application's crypto configuration and potential flaws can be identified
    and verified simply through connecting to the application and seeing what was
    negotiated. This can be pretty labor-intensive, so luckily we have some fast scanning
    tools that will systematically negotiate all potential configurations from a server
    to better help us understand what they are allowing.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通过连接到应用程序并查看协商的内容，可以简单地识别和验证应用程序的加密配置和潜在缺陷。这可能是相当费力的，所以幸运的是我们有一些快速扫描工具，可以系统地协商服务器的所有潜在配置，以更好地帮助我们了解它们允许的内容。
- en: I would still recommend spending some quality time learning how to test SSL/TLS
    manually, as it is always handy to have a quick check to ensure versions, cipher
    preference, and similar ones.Â  A great writeup and cheatsheet is available atÂ Â [http://www.exploresecurity.com/wp-content/uploads/custom/SSL_manual_cheatsheet.html](http://www.exploresecurity.com/wp-content/uploads/custom/SSL_manual_cheatsheet.html).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我仍然建议花一些时间学习如何手动测试SSL/TLS，因为随时进行快速检查以确保版本、密码偏好和类似内容是非常方便的。[http://www.exploresecurity.com/wp-content/uploads/custom/SSL_manual_cheatsheet.html](http://www.exploresecurity.com/wp-content/uploads/custom/SSL_manual_cheatsheet.html)提供了一份很好的说明和备忘录。
- en: SSLyze - it slices, it scansâ�¦
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SSLyze-它切片，它扫描â�¦
- en: Our first tool in this regard may be the only one you need.Â  Written in Python,
    SSLyze ([https://github.com/iSECPartners/sslyze](https://github.com/iSECPartners/sslyze))
    will reach out to a server using pretty much any transport protocol in use today,
    and do so fast! By initiating StartTLS handshakes with the server across all manner
    of protocols, it can scan for cipher suite issues, negotiation flaws, certificate
    inconsistencies, and common SSL-focused vulnerabilities that have put many in
    the news (Heartbleed, CRIME, and so on.)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这方面，我们的第一个工具可能是你唯一需要的工具。用Python编写的SSLyze ([https://github.com/iSECPartners/sslyze](https://github.com/iSECPartners/sslyze))将使用几乎任何当前使用的传输协议与服务器进行通信，并且速度很快！通过在所有类型的协议上启动StartTLS握手与服务器进行通信，它可以扫描密码套件问题，协商缺陷，证书不一致以及许多在新闻中引起关注的SSL相关漏洞（Heartbleed，CRIME等）。
- en: 'Using SSLyze is a piece of cake; you can select a number of options to pass,
    and then test multiple servers at the same time. The options can help refine the
    versions being tested, the timeouts and retries associated with the connections,
    adding a client-side certificate orÂ *cert* to test for mutual authentication,
    and testing for compression and resumptions.Â  The option I tend to use is the
    regular option coupled with the Heartbleed module, and I tend to write the output
    to a text file. In this example, we''ll run against the site [www.hackthissite.org](http://www.hackthissite.org):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SSLyze是小菜一碟；您可以选择一些选项进行传递，然后同时测试多个服务器。这些选项可以帮助细化被测试的版本，与连接相关的超时和重试，添加客户端证书或*cert*以进行相互认证测试，并测试压缩和恢复。我倾向于使用常规选项和Heartbleed模块，并将输出写入文本文件。在这个例子中，我们将针对网站[www.hackthissite.org](http://www.hackthissite.org)运行：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see in the following screenshot, there is a ton of testing that they
    handily take care of for us in SSLyze. I dumped the extensive input into a text
    file to better snip out the whitespace, but the major areas they provide insight
    into are a complete health check of a site.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在下面的截图中所见，SSLyze为我们提供了大量的测试。我将广泛的输入转储到文本文件中，以更好地剪裁空白部分，但它们提供的主要见解领域是对站点的完整健康检查。
- en: '![](img/B03918_08_03-861x1024.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_08_03-861x1024.png)'
- en: SSLyze Scan Output
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: SSLyze扫描输出
- en: As you can see from the output, there is a lot to digest. Section 1 outlines
    the tool's instantiation and the basic connectivity. If the server was not properly
    input, this would be where the script exits. Section 2 (snipped for brevity) covers
    certificate checks with known, trusted PKI certificate authorities to ensure that
    a certificate is adequately associated. Issues with certs can allow attackers
    to assume the identity of the legitimate server and thus hijack traffic for their
    own malicious needs. Section 3 will help us see the results of special stress
    testing associated with plugins such as the Heartbleed module and resilience through
    the session resumption capabilities of the server. Section 4 highlights the ciphers
    available; servers supporting weaker or known vulnerable cipher suites are just
    asking for trouble. Section 5 is pretty straightforward; how long did the scan
    take? In the past, testing with Cisco firewalls, the manual process of inferring
    which cipher suites are enabled and negotiated can take a couple of hours.Â  Not
    bad, but occasionally, it may provide different results, so let's look at another
    tool that can help cross-check and give us another data point.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从输出中所见，有很多内容需要消化。第1部分概述了工具的实例化和基本连接。如果服务器输入不正确，脚本将在此退出。第2部分（为简洁起见剪裁）涵盖了使用已知的受信任的PKI证书颁发机构进行证书检查，以确保证书充分关联。证书存在问题可能会使攻击者假冒合法服务器的身份，从而劫持流量用于其自己的恶意需求。第3部分将帮助我们查看与插件相关的特殊压力测试的结果，例如Heartbleed模块和服务器的会话恢复能力。第4部分突出显示了可用的密码；支持较弱或已知易受攻击的密码套件的服务器只会招来麻烦。第5部分非常直接；扫描花了多长时间？过去，在测试Cisco防火墙时，推断启用和协商的密码套件的手动过程可能需要几个小时。还不错，但偶尔可能会提供不同的结果，因此让我们看看另一个工具，它可以帮助交叉检查并为我们提供另一个数据点。
- en: SSLscan can do it!
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SSLscan也可以！
- en: 'SSLscan is another tool provided in Kali that is adept at automating the scanning
    process and helping us assess the versions of software, ciphers in use, and many
    other aspects of secure connectivity. Built in C and leveraging the OpenSSL 1.0.1
    libraries, SSLscan is also cross-platform, so if you happen to need a Microsoft
    Windows or Mac OS version of the application, they are available. SSLscan''s options
    are much more straightforward and they help file brief, and while this makes it
    very easy to run, it is also helpful to run another tool with greater detail on
    the PKI-side of things alongside it. To run SSLscan, you can simply use the following
    syntax with the scan I ran for this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: SSLscan是Kali中提供的另一个工具，擅长自动化扫描过程，帮助我们评估软件版本、使用的密码以及安全连接的许多其他方面。SSLscan是用C语言构建的，利用了OpenSSL
    1.0.1库，也是跨平台的，因此如果您需要Microsoft Windows或Mac OS版本的应用程序，它们是可用的。SSLscan的选项更加简单直接，它们有助于文件简洁，虽然这使得它非常容易运行，但同时也有助于运行另一个具有更多PKI方面细节的工具。要运行SSLscan，您可以简单地使用以下语法进行扫描：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As you can see from the following screenshot, it offers a more compact output,
    but some of this is at the expense of certificate checks and details that may
    be useful in your penetration testing. The same color code and numbering schemes
    were used to help contrast with the SSLyze output: section 1 outlines the tool''s
    basic connectivity testing; section 2 shows a much less verbose certificate check;
    section 3 is limited to Heartbleed scanning results; section 4 highlights the
    ciphers available. A timer is not included, but the timing is comparable to SSLyze
    across a test of common sites.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从下面的截图中所见，它提供了更紧凑的输出，但其中一些是以牺牲证书检查和细节为代价的，这些在您的渗透测试中可能会有用。使用相同的颜色代码和编号方案来帮助与SSLyze输出形成对比：第1部分概述了工具的基本连接测试；第2部分显示了较少冗长的证书检查；第3部分仅限于Heartbleed扫描结果；第4部分突出显示了可用的密码。虽然没有包括计时器，但在对常见站点进行测试时，其时间与SSLyze相当。
- en: '![](img/B03918_08_04.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_08_04.png)'
- en: Â SSLscan scan output
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: SSLscan扫描输出
- en: In this particular scenario, both the tools detected the same preferred cipher
    suite of **`ECDHE-RSA-AES128-SHA`**, but in some tests, people have reported some
    issues with SSLyze properly interpreting or negotiating the same cipher suites
    SSLscan does. Issues like these warrant running both tools and using manual analysis
    to resolve any conflicts. Another tool in the Kali distribution, **tlssled**,
    reformats the output into a summary style view based on underlying SSLscan results,
    but offers little beyond SSLscan's capability.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种特殊情况下，两个工具都检测到了相同的首选密码套件**`ECDHE-RSA-AES128-SHA`**，但在一些测试中，人们报告了SSLyze正确解释或协商与SSLscan相同的密码套件时出现了一些问题。这样的问题需要运行两个工具并使用手动分析来解决任何冲突。
    Kali发行版中的另一个工具**tlssled**，根据底层SSLscan结果重新格式化输出为摘要样式视图，但除了SSLscan的功能外，几乎没有其他功能。
- en: Nmap has SSL skills too
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Nmap也具有SSL技能
- en: The last tool we'll look into for general SSL/TLS scanning is the venerable
    **Nmap**. Armed with a script, specific to the task (`ssl-enum-ciphers`), NmapÂ can
    enumerate all of the ciphers available on a host and even provide a grading for
    each based on current best practices. While it lacks the completeness of SSLyze
    and SSLscan, this feature makes it a useful and well-known engine for making recommendations
    to customers.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要研究的最后一个通用SSL/TLS扫描工具是备受推崇的**Nmap**。配备了一个特定于任务的脚本（`ssl-enum-ciphers`），Nmap可以枚举主机上所有可用的密码，并根据当前最佳实践为每个密码提供评分。虽然它缺乏SSLyze和SSLscan的完整性，但这个功能使它成为向客户提出建议的有用且知名的引擎。
- en: 'The output in the following screenshotÂ shows what a scan might look like against
    the OWASP BWA itself (the homepage, not a specific application):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图中的输出显示了针对OWASP BWA本身（主页，而不是特定应用程序）的扫描可能是什么样子：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](img/B03918_08_05.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_08_05.png)'
- en: Nmap with ssl-enum-ciphers Scan Output
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap与ssl-enum-ciphers扫描输出
- en: Exploiting the flaws
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用漏洞
- en: '* * *'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Once you've scanned for SSL/TLS cipher issues or certificate woes, there is
    a lot that can be done to look for specific weaknesses that attackers will be
    using, and these same attacks can be delivered via some of the tools we have already
    visited in previous chapters.Â  Let's look at a few of the more famous vulnerabilities.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您扫描了SSL/TLS密码问题或证书问题，就可以做很多工作来寻找攻击者将使用的特定弱点，这些攻击也可以通过我们已经在之前章节中访问过的一些工具来传递。让我们看看一些更著名的漏洞。
- en: POODLE â�� all bark, no bite (usually)
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: POODLE â�� 只会吠，不会咬（通常）
- en: '**Padding Oracle On Downgraded Legacy Encryption** (**POODLE**) (CVE-2014-3566)
    is a vulnerability that allows a man-in-the-middle exploit by taking advantage
    of a downward negotiation of the cipher to the affected SSLv3.0 **Cipher Block
    Chaining** (**CBC**)**Â **cipher suites. Using a MITM attack, POODLE requires
    256 SSL requests to reveal each byte of data, and itÂ is not used often unless
    a large-scale, powerful, and persistent MITM proxy is in place for a period of
    time. Nonetheless, it is a hot button issue, and you can infer that this may exist
    on a host if SSLscan or SSLyze show that this combination exists, or you can opt
    to run `nmap` with its `ssl-poodle` module to verify that the conditions exist.
    The following script will check it on your target:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**降级遗留加密的填充Oracle**（**POODLE**）（CVE-2014-3566）是一种漏洞，它利用了对受影响的SSLv3.0 **Cipher
    Block Chaining**（**CBC**）**Â **密码套件的向下协商，从而允许中间人利用。使用中间人攻击，POODLE需要256个SSL请求来揭示每个数据字节，并且除非存在大规模、强大且持久的中间人代理，否则它不经常使用。尽管如此，这是一个敏感问题，如果SSLscan或SSLyze显示存在这种组合，或者您可以选择使用`nmap`和其`ssl-poodle`模块来验证条件是否存在，那么您可以推断这可能存在于主机上。以下脚本将在目标上检查它：'
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Unlike the Nmap scan for the `ssl-enum-ciphers` script, this scan stops short
    and only delves into the specifics around this CVE (as shown in the following
    screenshot). You can also see that we picked up the CVE in the `ssl-enum-ciphers`
    scan, but flagged it without its commonly referred-to name.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 与`ssl-enum-ciphers`脚本的Nmap扫描不同，这个扫描停止并且只深入到围绕这个CVE的具体细节（如下图所示）。您还可以看到我们在`ssl-enum-ciphers`扫描中捕获了CVE，但没有标记它的常用名称。
- en: '![](img/B03918_08_06.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_08_06.png)'
- en: Nmap with SSL-poodle Module Scan Output
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap与SSL-poodle模块扫描输出
- en: The OpenSSL team discusses the background ([https://www.openssl.org/~bodo/ssl-poodle.pdf](https://www.openssl.org/~bodo/ssl-poodle.pdf))
    and the methods used to take advantage of this vulnerability. My friend Joey Muniz
    also wrote about this flaw in his *The Security Blogger* blog ([http://www.thesecurityblogger.com/ssl-broken-again-in-poodle-attack/](http://www.thesecurityblogger.com/ssl-broken-again-in-poodle-attack/)),
    and it describes at a high level how it is implemented.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: OpenSSL团队讨论了背景（[https://www.openssl.org/~bodo/ssl-poodle.pdf](https://www.openssl.org/~bodo/ssl-poodle.pdf)）和利用此漏洞的方法。我的朋友Joey
    Muniz也在他的*The Security Blogger*博客中写到了这个缺陷（[http://www.thesecurityblogger.com/ssl-broken-again-in-poodle-attack/](http://www.thesecurityblogger.com/ssl-broken-again-in-poodle-attack/)），并且在高层次上描述了它是如何实现的。
- en: Heartbleed-ing out
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 心脏出血
- en: Another flaw that gained a ton of press and attention is the very serious **Heartbleed**
    vulnerability (CVE-2014-0160, [http://heartbleed.com](http://heartbleed.com)).
    Unlike POODLE, this couldn't just be configured away but requires a patch to the
    underlying OpenSSL software that was used by roughly three-quarters of internet-connected
    hosts at the time. Where POODLE allows an attacker to guess a session cookie one
    byte at a time, Heartbleed is a vulnerability that allows the attacker to read
    all of the private encryption keys, usernames and passwords, certificates, and
    all the protected communications on a vulnerable host. Whereas POODLE seems to
    be an academic exercise against a long-replaced cipher category, Heartbleed impacted
    the vast majority of networked equipment, worldwide.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个引起大量媒体关注的漏洞是非常严重的**Heartbleed**漏洞（CVE-2014-0160，[http://heartbleed.com](http://heartbleed.com)）。与POODLE不同，这不能简单地通过配置来解决，而是需要对当时大约四分之三的互联网连接主机使用的基础OpenSSL软件进行修补。POODLE允许攻击者一次一个字节地猜测会话cookie，而Heartbleed是一种漏洞，允许攻击者读取所有私有加密密钥、用户名和密码、证书以及易受攻击主机上的所有受保护通信。尽管POODLE似乎是针对长期替换的密码类别的学术练习，但Heartbleed影响了全球绝大多数的网络设备。
- en: We've seen in SSLyze and SSLscan that they are both capable of detecting the
    Heartbleed vulnerability, but what if you want to take advantage of it as part
    of a larger pen-test? Metasploit just happens to be able to deliver, so let's
    take a look!
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到SSLyze和SSLscan都能够检测到Heartbleed漏洞，但如果您想利用它作为更大的渗透测试的一部分，该怎么办？Metasploit恰好能够提供，所以让我们来看看！
- en: After starting up Metasploit (with the `msfconsole` command), we can use the
    `auxiliary/scanner/ssl/openssl_heartbleed` module to support us in exploiting
    Heartbleed.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 启动Metasploit（使用`msfconsole`命令）后，我们可以使用`auxiliary/scanner/ssl/openssl_heartbleed`模块来支持我们利用Heartbleed。
- en: 'Let''s go ahead and check out the options (as shown in the following screenshot)
    we''ll need to consider as we configure the exploit:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续查看选项（如下面的屏幕截图所示），我们需要考虑在配置利用时：
- en: '![](img/B03918_08_07.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_08_07.png)'
- en: Â Configuration options for Heartbleed Module in Metasploit
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在Metasploit中的Heartbleed模块的配置选项
- en: We're going to look into the BeeBox VM ([http://www.itsecgames.com](http://www.itsecgames.com))
    and hit **`Heartbleed Vulnerability`**Â in the drop-down list, as shown in the
    following screenshot. Notice that there are older attacks such as the aforementioned
    **`POODLE`** available for you to practice on. We can see that the lab would like
    us to work on the port namedÂ `8443`, and my **RHOSTS** are just the single server
    `172.16.30.134`. I also set **VERBOSE** (not shown in the options, as it is a
    more global, module-agnostic setting) to *true* so that we can see all of the
    transactions. I'll also leave the rest of the settings at their default.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将研究BeeBox VM（[http://www.itsecgames.com](http://www.itsecgames.com)）并在下拉列表中选择**`Heartbleed
    Vulnerability`**，如下面的屏幕截图所示。请注意，还有其他旧的攻击，如前面提到的**`POODLE`**，可供您练习。我们可以看到实验室希望我们在名为`8443`的端口上工作，我的**RHOSTS**只是单个服务器`172.16.30.134`。我还将**VERBOSE**（在选项中未显示，因为它是一个更全局的、模块不可知的设置）设置为*true*，这样我们就可以看到所有的交易。我也会将其余的设置保持为默认设置。
- en: '![](img/B03918_08_08.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_08_08.png)'
- en: Finding a Heartbleed vulnerable server.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找一个受Heartbleed漏洞影响的服务器。
- en: After modifying these settings, we can simply type `run` or `exploit` and Metasploit
    will now attempt to compromise the server and scrape all of the credentials and
    cookies it can find, as seen in the following screenshot. Something this lethal
    should not be this easy, and you can see why we need to be testing and protecting
    against these attacks.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 修改这些设置后，我们只需输入`run`或`exploit`，Metasploit现在将尝试破坏服务器并获取它能找到的所有凭据和cookie，如下面的屏幕截图所示。这么致命的东西不应该这么容易，您可以看到为什么我们需要测试和防范这些攻击。
- en: '![](img/B03918_08_09.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_08_09.png)'
- en: Metasploit's Heartbleed Exploit is a success.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit的Heartbleed利用是成功的。
- en: DROWNing HTTPS
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 淹没HTTPS
- en: The **DROWN** (CVE-2016-0800) vulnerability identifies a server that is open
    to a non-trivial attack that relies on SSLv2 support, to which at least a third
    of all internet servers were vulnerable as of March 2016\. Attackers will take
    advantage of SSLv2 supported by an application using the same keys as are used
    to *salt* or help randomize TLS (the more recent protocol versions). By initiating
    tens of thousands of SSLv2 messages,Â  they are able to glean the keys used in
    more robust and current versions of TLS, and thus break the higher-grade encryption
    with stolen private keys. Once thought to be impractical based on the sheer number
    of messages believed to be needed; they also call this the *million message attack;*
    it is now known to be achievable through commercially available resources in hours
    using tens of thousands of messages.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**DROWN**（CVE-2016-0800）漏洞识别了一个开放SSLv2支持的服务器，这使得至少三分之一的互联网服务器在2016年3月时是脆弱的。攻击者将利用应用程序支持的SSLv2，使用与用于*盐*或帮助随机化TLS（更近期的协议版本）相同的密钥。通过启动数以万计的SSLv2消息，他们能够获取更强大和当前版本的TLS中使用的密钥，从而使用窃取的私钥破解更高级别的加密。曾经被认为是不切实际的，因为需要大量消息；他们也称之为*百万消息攻击*；现在已经知道可以通过商业可用的资源在几小时内使用数以万计的消息来实现。'
- en: Detecting DROWN vulnerabilities is as simple as seeing if SSLv2 is supported
    on the target server or any other servers sharing the same keys. Another tool
    that can be used to identify the vulnerability is located on the [http://test.drownattack.com](http://test.drownattack.com)
    website.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 检测DROWN漏洞就像看看目标服务器或共享相同密钥的其他服务器是否支持SSLv2一样简单。还有另一个工具可以用来识别这个漏洞，它位于[http://test.drownattack.com](http://test.drownattack.com)网站上。
- en: Revisiting the classics
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重温经典
- en: 'SSL and TLS have both seen their share of vulnerabilities as time has marched
    on; thisÂ is inevitable given the huge dependence on modules such as OpenSSL that
    are maintained by a small band of overworked and under-supported volunteers. Some
    of the other vulnerabilities we should understand and check for are described
    here:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，SSL和TLS都经历了各自的漏洞；这是不可避免的，因为它们对由一小群过度工作和得不到支持的志愿者维护的OpenSSL等模块的巨大依赖。我们应该了解和检查的其他一些漏洞在这里描述：
- en: '**BEAST**: Our customers need to practice good patching and configuration hygiene
    to avoid attacks such as the **Browser Exploit Against SSL/TLS** (CVE-2011-3389)
    attack. BEAST targets TLSv1.0 **Initialization Vectors** (**IVs**), which are
    seed values to help randomize the encryption. Guessing IVs helps attackers reconstruct
    the conversation and reveal the very plain text that was supposed to be obscured.
    They can avoid these issues with newer versions of TLS.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BEAST**：我们的客户需要练习良好的补丁和配置卫生习惯，以避免像**浏览器针对SSL/TLS的利用**（CVE-2011-3389）攻击这样的攻击。BEAST针对TLSv1.0的**初始化向量**（**IVs**），这些是用来帮助随机加密的种子值。猜测IVs有助于攻击者重构对话并揭示本应被掩盖的明文。他们可以通过更新的TLS版本避免这些问题。'
- en: '**CRIME**: **Compression Ratio Info-leak Made Easy** (CVE-2012-4929) is a vulnerability
    when TLS compression is used in older versions. By injecting bytes and comparing
    the size of responses, hackers can identify and deduce the cookie itself, which
    can allow them to hijack the session for their own nefarious uses. Modern browsers
    are not vulnerable â�� so customers should always remain current.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CRIME**：**压缩比例信息泄漏变得容易**（CVE-2012-4929）是在旧版本中使用TLS压缩时的一个漏洞。通过注入字节并比较响应的大小，黑客可以识别和推断出cookie本身，这可以让他们为自己的邪恶用途劫持会话。现代浏览器不容易受到攻击，所以客户应该始终保持更新。'
- en: '**BREACH**: **Browser Reconnaissance and Exfiltration via Adaptive Compression
    of Hypertext** (CVE-2013-3587) uses a similar technique but with the HTTP compression,
    so there is no dependence on TLS compression to use BREACH. You can advise customers
    to block compression and break up and obscure any passwords or authentication
    values across multiple transactions, or you can also obscure the requests with
    wrappers and operations.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BREACH**：**通过对超文本进行自适应压缩的浏览器侦察和外泄**（CVE-2013-3587）使用类似的技术，但使用HTTP压缩，因此不依赖于TLS压缩来使用BREACH。您可以建议客户阻止压缩，并在多个事务中分割和掩盖任何密码或认证值，或者还可以使用包装器和操作来掩盖请求。'
- en: Hanging out as the Man-in-the-Middle
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 中间人攻击
- en: '* * *'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: MITM attacks get a lot of attention from network and application security vendors,
    and rightfully so. MITM attacks can be conducted near the application server but
    are more commonly seen near the clients. The grade of MITM attack will vary greatly,
    from passively monitoring traffic patterns to active interference and credential
    harvesting. Given the prevalence of higher-priority compromises that can yield
    the same information (such asÂ **Cross Site Scripting** or **XSS**), web application
    penetration testers need to evaluate the risk against theÂ reward of pursuing
    a MITM attack. Let's take a look at one of the most popular tools in detail and
    survey some similar tools for different MITM objectives.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 中间人攻击受到网络和应用安全供应商的高度关注，这是理所当然的。中间人攻击可以在应用服务器附近进行，但更常见的是在客户端附近。中间人攻击的等级会有很大的变化，从
    passively 监视流量模式到主动干扰和凭证收集。鉴于可以产生相同信息的更高优先级的妥协的普遍存在（例如**跨站脚本**或**XSS**），Web应用程序渗透测试人员需要评估追求中间人攻击的风险与回报。让我们详细了解一下最受欢迎的工具，并调查一些不同中间人攻击目标的类似工具。
- en: Scraping creds with SSLstrip
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用SSLstrip刮取凭证
- en: '**SSLstrip** ([https://moxie.org/software/sslstrip/](https://moxie.org/software/sslstrip/)
    ) is anÂ MITM attack tool created by a hacker by the name of Moxie Marlinspike
    that transparently intercepts HTTPS traffic and replaces any HTTPS links and redirects
    with HTTP look-alikes, which we can see are completely unprotected. This attack
    is like a test of browser configurations and user diligence, but it can also stress
    the importance of DNS Security, PKI, two-way certificate checks, and two-factor
    authorization.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**SSLstrip**（[https://moxie.org/software/sslstrip/](https://moxie.org/software/sslstrip/)）是由一个名叫Moxie
    Marlinspike的黑客创建的中间人攻击工具，它可以透明地拦截HTTPS流量，并用HTTP的替代品替换任何HTTPS链接和重定向，我们可以看到这些完全没有保护。这种攻击就像对浏览器配置和用户勤勉的测试，但它也可以强调DNS安全、PKI、双向证书检查和双因素授权的重要性。'
- en: '*Jason Beltrame* and I wrote about it in our book *Penetration Testing with
    the Raspberry Pi, Second Edtition* ([https://www.packtpub.com/networking-and-servers/penetration-testing-raspberry-pi-second-edition](https://www.packtpub.com/networking-and-servers/penetration-testing-raspberry-pi-second-edition)),
    but in this case, we''ll forgo the physical in-line configuration and instead
    aim for MITM by hair-pinning traffic back through our Kali VM (please note, this
    is a LAN-based attack, so you''ll want to be on the browsing victim''s LAN). The
    unsuspecting victim believes he/she is indeed securely connected.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*Jason Beltrame*和我在我们的书*《使用树莓派进行渗透测试，第二版》*（[https://www.packtpub.com/networking-and-servers/penetration-testing-raspberry-pi-second-edition](https://www.packtpub.com/networking-and-servers/penetration-testing-raspberry-pi-second-edition)）中写到了这一点，但在这种情况下，我们将放弃物理内联配置，而是通过将流量通过我们的Kali
    VM进行中间人攻击（请注意，这是一种基于LAN的攻击，所以您需要在受害者的LAN上）。毫无戒心的受害者相信他/她确实是安全连接的。'
- en: 'A high-level overview is shown in the following screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了一个高层概述：
- en: '![](img/B03918_08_10.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_08_10.png)'
- en: Â MITM Topology
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 中间人攻击拓扑
- en: 'First things first; we need to fool the host into thinking we''re the real
    default gateway. We can do this by determining why the Default GW on the segment
    is using `route -n`, identifying our browsing victim''s IP (I am using a Windows
    7 VM with IE9). With a couple of commands, we can turn on IP forwarding and `arpspoof`
    the victim with our MAC address, as shown here:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要欺骗主机，让它认为我们是真正的默认网关。我们可以通过使用`route -n`确定段上的默认GW为什么使用，识别我们浏览受害者的IP（我使用的是带有IE9的Windows
    7虚拟机）。通过几个命令，我们可以打开IP转发并用我们的MAC地址对受害者进行`arpspoof`，如下所示：
- en: '[PRE4]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We''ll now need to modify our `iptables` configuration. Iptables, in case you
    haven''t run into it before, act as the interface to the kernel''s host-based
    firewall for Linux, so you can imagine we need some magic here to allow traffic
    to enter and exit that wasn''t really meant for us. In my example, I am using
    port `80` for the HTTP, and port `1111` for SSLstrip, but feel free to modify
    the latter if needed:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要修改我们的`iptables`配置。如果你之前没有遇到过iptables，它是Linux内核基于主机的防火墙的接口，所以你可以想象我们需要一些魔法来允许流量进入和离开，这些流量实际上并不是为我们准备的。在我的例子中，我使用端口`80`用于HTTP，端口`1111`用于SSLstrip，但如有需要，可以随意修改后者：
- en: '[PRE5]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We''ll now want to start up SSLstrip from either the command line or the GUI
    shortcut:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要启动SSLstrip，可以从命令行或GUI快捷方式启动：
- en: '[PRE6]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once I''ve done that I usually surf to a site such asÂ [https://www.aol.com/](https://www.aol.com/)Â and
    enter in some fake credentials in the hope I can capture them in my SSLstrip logs,
    as shown in the following screenshot:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我通常会浏览一些网站，比如[https://www.aol.com/](https://www.aol.com/)，然后输入一些假证书，希望能在我的SSLstrip日志中捕获它们，如下面的截图所示：
- en: '![](img/B03918_08_11.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_08_11.png)'
- en: Any SSL Site can be used to test.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 任何SSL网站都可以用来测试。
- en: More often than not, I get a bunch of errors kicking back from the Python script
    in the last terminal session where I invoked SSLstrip, but it still works like
    a champ. Simply open the `ssltrip.log` file (mine was located in the `root` directory),
    and scroll to the end of the search for one of the field strings; in my case I
    used password.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，我会从上一个终端会话中的Python脚本中收到一堆错误，但它仍然像一个冠军一样工作。只需打开`ssltrip.log`文件（我的文件位于`root`目录中），并滚动到搜索的末尾，查找其中一个字段字符串；在我的情况下，我使用了密码。
- en: 'The following screenshot shows us the fake credentials I was hoping to see:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我希望看到的假证书：
- en: '![](img/B03918_08_12.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_08_12.png)'
- en: SSLstrip's logs with captured creds.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: SSLstrip的日志和捕获的凭证。
- en: Looking legit with SSLsniff and SSLsplit
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用SSLsniff和SSLsplit看起来很正规
- en: 'We''d hope our customers wouldn''t fall for a MITM that removes the SSL/TLS
    protection. More savvy customers will both train their users and restrict non-HTTPS
    traffic in browsers. For those cases, Moxie is back again with SSLsniff, which,
    like Daniel Roethlisberger''s **SSLsplit** ([https://github.com/droe/sslsplit](https://github.com/droe/sslsplit)),
    can provide a higher-grade MITM attack by acting as a transparent proxy and serving
    up a SSL/TLS connection to both the server and the client. Both SSLsniff and SSLsplit
    will forge X.509 certificates and mimic the server for most relevant certificate
    fields, so this is a fantastic approach for environments where we suspect users
    aren''t paying attention to their certificate checks or where enforcement may
    be weak. Both tools rely on spoofed certificates, but use the same IP forwarding
    and `iptables` configurations to funnel traffic. In order to pull this off, you
    need to have a running certificate authority; if you have yet to establish one
    of your own, here is a fantastic tutorial on it: [https://jamielinux.com/docs/openssl-certificate-authority/](https://jamielinux.com/docs/openssl-certificate-authority/).'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望我们的客户不会上当受骗，去除SSL/TLS保护的中间人攻击。更精明的客户将培训他们的用户并限制浏览器中的非HTTPS流量。对于这些情况，Moxie再次使用SSLsniff，就像Daniel
    Roethlisberger的**SSLsplit**（[https://github.com/droe/sslsplit](https://github.com/droe/sslsplit)）一样，可以通过充当透明代理并为服务器和客户端提供SSL/TLS连接来提供更高级别的中间人攻击。SSLsniff和SSLsplit都将伪造X.509证书，并模仿服务器的大多数相关证书字段，因此这是一个适用于我们怀疑用户不注意他们的证书检查或执法可能较弱的环境的绝佳方法。这两个工具都依赖于伪造的证书，但使用相同的IP转发和`iptables`配置来传输流量。为了实现这一点，您需要运行证书颁发机构；如果您还没有建立自己的证书颁发机构，这是一个很棒的教程：[https://jamielinux.com/docs/openssl-certificate-authority/](https://jamielinux.com/docs/openssl-certificate-authority/)。
- en: SSLsniff
  id: totrans-98
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: SSLsniff
- en: 'We can look at SSLsniff first. SSLsniff then requires you to either have the
    private keys and certificates for your target web application (unlikely) or that
    you generate spoofed certificates, as seen in the following screenshot:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们先来看看SSLsniff。然后，SSLsniff要求您拥有目标Web应用程序的私钥和证书（不太可能），或者您生成伪造的证书，如下面的截图所示：
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](img/B03918_08_13.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_08_13.png)'
- en: Spoofing Certs for SSLsniff and SSLsplit.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为SSLsniff和SSLsplit伪造证书。
- en: 'We''re using a Unicode `\x00` in our **Common Name** (**CN**) as a placeholder,
    following along with the guidance provided by the excellent tutorial at [http://www.kimiushida.com/bitsandpieces/articles/attacking_ssl_with_sslsniff_and_null_prefixes/](http://www.kimiushida.com/bitsandpieces/articles/attacking_ssl_with_sslsniff_and_null_prefixes/).
    Creating a real spoofed cert as back-end programming is needed to create null
    characters that allow this to be accepted by victim browsers as the real deal.
    Once we''ve created `cert` and `key`, we''ll need to sign the cert using our own
    CA, concatenate `key` and `cert`, and then place it in our fake site''s own directory:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在**通用名称**（**CN**）中使用Unicode `\x00`作为占位符，遵循优秀教程提供的指导，链接在这里：[http://www.kimiushida.com/bitsandpieces/articles/attacking_ssl_with_sslsniff_and_null_prefixes/](http://www.kimiushida.com/bitsandpieces/articles/attacking_ssl_with_sslsniff_and_null_prefixes/)。创建一个真正的欺骗证书作为后端编程是必要的，以创建允许受害者浏览器接受的空字符。创建`cert`和`key`后，我们需要使用自己的CA签署证书，连接`key`和`cert`，然后将其放置在我们假网站的目录中：
- en: '[PRE8]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Assuming that you have already configured IP forwarding and `iptables` properly,
    SSLsniff can be started using a single command:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您已经正确配置了IP转发和`iptables`，SSLsniff可以使用一个命令启动：
- en: '[PRE9]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now that we''ve got SSLsniff waiting for our victim''s traffic, we can start
    redirecting traffic from the client using the same sort of `arpspoof`Â we used
    in SSLstrip:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经让SSLsniff等待我们受害者的流量，我们可以开始使用与SSLstrip中使用的相同类型的`arpspoof`来重定向来自客户端的流量：
- en: '[PRE10]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can reveal the contents of your `sslsniff.log` file and see the credentials
    (as shown in the following screenshot). This attack offers a greater likelihood
    of success than SSLstrip, as users still will see an HTTPS session in their browser''s
    address bar; and depending on the trusted CA configurations, they may have little
    warning that things are not on the up-and-up. If you are using a real spoofed
    certificate (take a look at this tutorial for how that might happen: [https://blog.leetsys.com/2012/01/18/insider-rogue-certification-authority-attack/](https://blog.leetsys.com/2012/01/18/insider-rogue-certification-authority-attack/)),
    it will even look valid.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看`sslsniff.log`文件的内容并查看凭证（如下图所示）。这种攻击的成功可能性比SSLstrip更大，因为用户仍然会在其浏览器的地址栏中看到一个HTTPS会话；并且根据受信任的CA配置，他们可能很少意识到事情并不顺利。如果您使用真正的欺骗证书（查看此教程了解可能发生的情况：[https://blog.leetsys.com/2012/01/18/insider-rogue-certification-authority-attack/](https://blog.leetsys.com/2012/01/18/insider-rogue-certification-authority-attack/)），它甚至看起来是有效的。
- en: '![](img/B03918_08_14.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_08_14.png)'
- en: Viewing SSLsniff's credentials scrape
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 查看SSLsniff的凭证抓取
- en: SSLsplit
  id: totrans-112
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: SSLsplit
- en: 'SSLsplit follows a similar approach; first you''ll need to ensure IP forwarding
    is enabled. It is common to use more `iptables` entries to pull in a greater number
    of ports, provide NAT, and use the typical remapping ports of `80`, `8080`, `443`,
    and `8443`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: SSLsplit采用类似的方法；首先，您需要确保启用了IP转发。通常会使用更多的`iptables`条目来拉取更多的端口，提供NAT，并使用`80`、`8080`、`443`和`8443`的典型重新映射端口：
- en: '[PRE11]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can now kick off SSLsplit using a single command. Notice that there is no
    labor-intensive overhead associated with the generation of spoofed certificates;
    this is very helpful, in that we can deploy this to gather information on multiple
    sites without having to generate fake certs for each:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用一个命令启动SSLsplit。请注意，与生成欺骗证书相关的繁重开销已经消除；这非常有帮助，因为我们可以部署它来收集多个站点的信息，而无需为每个站点生成假证书：
- en: '[PRE12]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As with SSLsniff, the output is pointed toward a log file that tells you that
    you can find the logs in the `~/scrapes` folder.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 与SSLsniff一样，输出指向一个日志文件，告诉您可以在`~/scrapes`文件夹中找到日志。
- en: Alternate MITM motives
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 替代中间人攻击动机
- en: There are a ton of MITM attack approaches that we can implement with Kali Linux
    as our base. If you are looking for HTTP-only MITM (some internal sites might
    still use unprotected HTTP), or if you are looking for something pretty specific,
    take a look at **Driftnet** ([http://www.ex-parrot.com/~chris/driftnet/](http://www.ex-parrot.com/~chris/driftnet/)
    ) and **Urlsnarf**. Each of these use the same IP forwarding and arpspoof configurations,
    but offers some different capabilities than SSLstrip. Driftnet focuses on pulling
    images and multimedia from HTTP streams passing through your Kali VM, which can
    be helpful in intercepting corporate training. Urlsnarf simply pulls all of the
    websites visited by a host, which can help you map internal sites that are explicitly
    visited and may not appear in a DNS recon task.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Kali Linux作为基础实施大量中间人攻击方法。如果您正在寻找仅限HTTP的中间人攻击（一些内部站点可能仍在使用不受保护的HTTP），或者如果您正在寻找某些非常特定的东西，请查看**Driftnet**（[http://www.ex-parrot.com/~chris/driftnet/](http://www.ex-parrot.com/~chris/driftnet/)）和**Urlsnarf**。这两者都使用相同的IP转发和arpspoof配置，但提供了一些与SSLstrip不同的功能。Driftnet专注于从通过您的Kali
    VM传递的HTTP流中提取图像和多媒体，这对拦截企业培训非常有帮助。Urlsnarf只是拉取主机访问的所有网站，这可以帮助您映射明确访问的内部站点，并且可能不会出现在DNS侦察任务中。
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: '* * *'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'While some attacks get a lot of press and glory, the trust relationships that
    drive society''s reliance on the web are paramount. Attacks on these trust mechanisms
    are very concerning given that they often leave users and application developers
    unaware of the compromise. Many of the other threats covered in this book and
    represented on the OWASP Top 10 are something that the web application''s owners
    can control or have in their power to remediate. Cryptographic or PKI-based attacks,
    however, involve other aspects outside their realm, such as the certificate authority''s
    integrity, the network''s tolerance for ARP injections, and the integrity of local
    area networks outside the application''s own domain. In the case of attacks such
    as Heartbleed and POODLE, even the software relied upon to deliver these services
    can be guilty of the ultimate compromise: the leakage of sensitive data and credentials.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管一些攻击受到了很多关注和荣耀，但推动社会对网络的依赖的信任关系至关重要。对这些信任机制的攻击非常令人担忧，因为它们经常让用户和应用程序开发人员对妥协毫不知情。本书涵盖的许多其他威胁以及OWASP十大威胁中所代表的威胁是网站应用程序所有者可以控制或有权利纠正的。然而，基于加密或PKI的攻击涉及到其他领域的方面，比如证书颁发机构的完整性，网络对ARP注入的容忍度，以及应用程序自身域之外的局域网的完整性。在Heartbleed和POODLE等攻击中，甚至提供这些服务的软件也可能会有最终妥协的问题：敏感数据和凭证的泄露。
- en: In this chapter, we scratched the surface of how to scan for known vulnerabilities
    in the software that the applications run on. We also saw how SSLscan and SSLyze
    differ in their detection of PKI details, and how we can use them and Nmap to
    identify weakspots. We also discussed a couple of the more prevalent attacks of
    interest, how to take advantage of Heartbleed, and how to approach MITM attacks
    several ways.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们只是初步了解了如何扫描应用程序运行的软件中已知的漏洞。我们还看到了SSLscan和SSLyze在检测PKI细节方面的不同之处，以及如何使用它们和Nmap来识别弱点。我们还讨论了一些更常见的攻击方式，如如何利用Heartbleed以及如何以多种方式进行中间人攻击。
- en: In [Chapter 9](000.html#)*, Stress Testing Authentication and Session Management*,
    we'll assume that the crypto is in great shape and that the easier path is to
    compromise the authentication at the application's end. These authentication and
    session management attacks are much more focused on potential flaws on the specific
    application's configuration and maintenance, which, in reality, tend to have a
    higher probability of being vulnerable. These attacks also have the added benefit
    of using the same secure pathways into the environment that a legitimate user
    would have â�� essential for persistent testing and deeper analysis of the target
    systems. [Chapter 9](000.html#), *Stress Testing Authentication and Session Management,*
    will also mark a return to some of the tool sets that we've already invested in,
    so grab a drink and let's get to work!
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](000.html#)*，压力测试认证和会话管理*中，我们将假设加密技术非常完善，更容易的路径是在应用程序端破坏认证。这些认证和会话管理攻击更加关注特定应用程序配置和维护可能存在的缺陷，实际上，这些缺陷往往更容易受到攻击。这些攻击还具有利用与合法用户相同的安全通道进入环境的附加好处，这对于持续测试和对目标系统的深入分析至关重要。[第9章](000.html#)*，压力测试认证和会话管理*，也将标志着我们回归到一些已经投资的工具集，所以拿杯饮料，让我们开始工作吧！
