- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Exploitation
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 漏洞利用
- en: 'The key purpose of a penetration test is to exploit a data system and gain
    the credentials or direct access to the data of interest. It is exploitation that
    gives penetration testing its meaning. In this chapter, we will examine various
    means of exploiting systems, including both public exploits and available exploit
    frameworks. By the end of this chapter, you should be able to understand the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 渗透测试的关键目的是利用数据系统并获取凭证或直接访问感兴趣的数据。正是漏洞利用赋予了渗透测试意义。在本章中，我们将研究利用系统的各种方式，包括公共漏洞和可用的漏洞框架。到本章结束时，你应该能够理解以下内容：
- en: The Metasploit Framework
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit 框架
- en: The exploitation of targets using Metasploit
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Metasploit 对目标进行漏洞利用
- en: Using public exploits
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用公共漏洞
- en: Developing sample Windows-specific exploits
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发特定于 Windows 的示例漏洞
- en: Empire PowerShell Framework
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Empire PowerShell 框架
- en: The Metasploit Framework
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metasploit 框架
- en: The **Metasploit Framework** (**MSF**) is an open-source tool designed to facilitate
    penetration testing. Written in the Ruby programming language, it uses a modular
    approach to facilitating exploits during the exploitation phase in cyber kill
    chain methodology. This makes it easier to develop and code exploits, and it also
    allows for complex attacks to be easily implemented.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**Metasploit 框架** (**MSF**) 是一款开源工具，旨在简化渗透测试。它使用 Ruby 编程语言编写，采用模块化方法来促进在网络杀伤链方法论中的漏洞利用阶段。这使得开发和编写漏洞变得更加容易，同时也使复杂的攻击得以轻松实现。'
- en: '*Figure 10.1* depicts an overview of the MSF architecture and components:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10.1* 展示了 MSF 架构及其组件的概述：'
- en: '![](../Images/B17765_10_01.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_10_01.png)'
- en: 'Figure 10.1: Metasploit architecture and its components'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1：Metasploit 架构及其组件
- en: 'The framework can be split into three main sections:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 框架可以分为三个主要部分：
- en: Libraries
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库
- en: Interfaces
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口
- en: Modules
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块
- en: Libraries
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 库
- en: MSF is built using various functions and libraries and a programming language,
    such as Ruby. To utilize these functions, penetration testers must understand
    what these functions are, how to trigger them, what parameters should be passed
    to the function, and what the expected results are.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: MSF 是通过多种功能、库以及编程语言（如 Ruby）构建的。为了利用这些功能，渗透测试员必须了解这些功能是什么，如何触发它们，应该传递什么参数，以及预期的结果是什么。
- en: 'All of the libraries are listed in the `/usr/share/Metasploit-framework/lib/`
    folder, as shown in *Figure 10.2*:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 所有库都列在 `/usr/share/Metasploit-framework/lib/` 文件夹中，如 *图 10.2* 所示：
- en: '![Graphical user interface, text  Description automatically generated](../Images/B17765_10_02.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本描述自动生成](../Images/B17765_10_02.png)'
- en: 'Figure 10.2: Metasploit libraries folder'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2：Metasploit 库文件夹
- en: REX
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: REX
- en: REX is a library included in Metasploit that was initially developed by Jackob
    Hanmack and was made official by the Rapid 7 development team later on. This library
    provides various classes that are useful for exploit development. In the current
    MSF, REX handles all of the core functions such as socket connections, raw functions,
    and other reformatting.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: REX 是 Metasploit 中的一个库，最初由 Jackob Hanmack 开发，后来由 Rapid 7 开发团队正式化。这个库提供了多种对漏洞开发有用的类。在当前的
    MSF 中，REX 处理所有核心功能，如套接字连接、原始函数和其他格式化操作。
- en: Framework core
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 框架核心
- en: This library is located in `/usr/share/metasploit-framework/lib/msf/core`, which
    provides the basic **Application Programming Interface** (**API**) for all the
    new modules that are going to be written.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 该库位于 `/usr/share/metasploit-framework/lib/msf/core`，为所有将要编写的新模块提供基本的 **应用程序编程接口**
    (**API**)。
- en: Framework base
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 框架基础
- en: This library provides a good API for sessions, a shell, Meterpreter, VNC, and
    other default APIs, but it is dependent on Framework core.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 该库为会话、shell、Meterpreter、VNC 和其他默认 API 提供了良好的 API，但它依赖于框架核心。
- en: Other extended parts that can be a part of MSF include custom plugins, protocol
    tools, security tools, web services, and other integration services.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: MSF 的其他扩展部分包括自定义插件、协议工具、安全工具、Web 服务和其他集成服务。
- en: Interfaces
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接口
- en: MSF used to have multiple interfaces, such as a command-line interface, web
    interface, and others. All of the interfaces were sunset by the Rapid 7 development
    team in the latest versions (Community and Pro). In this chapter, we will explore
    the console and GUI (Armitage) interfaces. The console interface is the fastest
    because it presents attack commands, and it has the required configuration parameters
    in an easy-to-use interface.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: MSF以前有多种接口，例如命令行界面、Web界面等。在最新版本（社区版和专业版）中，Rapid 7开发团队已经淘汰了所有这些接口。在本章中，我们将探索控制台和GUI（Armitage）接口。控制台界面是最快的，因为它直接呈现攻击命令，并且提供易于使用的配置参数界面。
- en: 'To access this interface, enter `sudo msfconsole` in a command prompt. *Figure
    10.3* shows the splash screen that appears when the application launches:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问这个界面，在命令提示符下输入`sudo msfconsole`。*图10.3*显示了应用程序启动时出现的启动画面：
- en: '![Graphical user interface, chart  Description automatically generated](../Images/B17765_10_03.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，图表 描述自动生成](../Images/B17765_10_03.png)'
- en: 'Figure 10.3: Metasploit console main menu'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3：Metasploit控制台主菜单
- en: Modules
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块
- en: 'MSF consists of modules that are combined to affect an exploit. The modules
    and their specific functions are as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: MSF由模块组成，这些模块组合起来形成一个攻击方式。各模块及其特定功能如下：
- en: '**Exploits**: The code fragments that target specific vulnerabilities. Active
    exploits will exploit a specific target, run until completed, and then exit (for
    example, a buffer overflow). Passive exploits wait for incoming hosts, such as
    web browsers or FTP clients, and exploit them when they connect.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**漏洞利用**：针对特定漏洞的代码片段。主动漏洞利用会针对特定目标进行攻击，执行直到完成，然后退出（例如缓冲区溢出）。被动漏洞利用则等待连接的主机，例如Web浏览器或FTP客户端，当它们连接时进行攻击。'
- en: '**Payloads**: These are the malicious code that implement commands immediately
    following a successful exploitation.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有效载荷**：这些是紧随成功漏洞利用后执行的恶意代码。'
- en: '**Auxiliary modules**: These modules do not establish or directly support access
    between the tester and the target system; instead, they perform related functions
    such as scanning, fuzzing, or sniffing, which support the exploitation phase.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**辅助模块**：这些模块不会在测试者和目标系统之间建立或直接支持访问；相反，它们执行相关的功能，如扫描、模糊测试或嗅探，支持漏洞利用阶段。'
- en: '**Post modules**: Following a successful attack, these modules run on compromised
    targets to gather useful data and pivot the attacker deeper into the target network.
    We will learn more about the post modules in *Chapter 11*, *Action on the Objective
    and Lateral Movement*.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后期模块**：在成功攻击后，这些模块在受控目标上运行，以收集有用数据，并帮助攻击者深入目标网络。在*第11章*中，我们将深入学习后期模块，*目标行动与横向移动*。'
- en: '**Encoders**: When exploits must bypass antivirus defenses, these modules encode
    the payload so that it cannot be detected using signature matching techniques.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编码器**：当漏洞利用必须绕过防病毒防御时，这些模块会对有效载荷进行编码，使其无法通过签名匹配技术被检测到。'
- en: '**No operations** (**NOPs**): These are used to facilitate buffer overflows
    during attacks.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无操作**（**NOPs**）：这些用于攻击时促进缓冲区溢出。'
- en: 'These modules are used together to conduct reconnaissance and launch attacks
    against targets. The steps for exploiting a target system using MSF can be summarized
    as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模块一起使用，用于进行侦察并对目标发起攻击。利用MSF利用目标系统的步骤可以总结如下：
- en: Choose and configure an exploit (the code that compromises a specific vulnerability
    on the target system).
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择并配置漏洞利用（针对目标系统中某一特定漏洞的代码）。
- en: Check the target system to determine whether it is susceptible to attack by
    the exploit. This step is optional and is usually omitted to minimize detection.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查目标系统，以确定它是否容易受到该漏洞的攻击。此步骤是可选的，通常为了减少被检测的风险会省略。
- en: Choose and configure the payload (the code that will be executed on the target
    system following a successful exploitation; for example, a reverse shell from
    the compromised system back to the source).
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择并配置有效载荷（在成功利用后将在目标系统上执行的代码；例如，从受控系统到源系统的反向Shell）。
- en: Choose an encoding technique to bypass detection controls (IDs/IPs or antivirus
    software).
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一种编码技术，以绕过检测控制（例如IDS/IPs或防病毒软件）。
- en: Execute the exploit.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行漏洞利用。
- en: Database setup and configuration
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库设置与配置
- en: 'It is fairly simple to set up the new version of Metasploit, since Metasploit
    does not run as a service anymore, since version `msf3`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 设置Metasploit的新版本相对简单，因为从`msf3`版本开始，Metasploit不再作为服务运行：
- en: Start PostgreSQL by running `sudo systemctl start postgresql.service` in the
    terminal.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中运行 `sudo systemctl start postgresql.service` 启动 PostgreSQL。
- en: Initialize the Metasploit database by running `sudo msfdb init`. Unless it is
    your first time doing this, the initialization will create the `msf` database,
    create a role, and add the `msf_test` and `msf` databases to the `/usr/share/metasploit-framework/config/database.yml`
    configuration file; otherwise, by default, the `msf` database will be created
    in the prebuild of Kali Linux, as shown in *Figure 10.4*:![Text  Description automatically
    generated](../Images/B17765_10_04.png)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行 `sudo msfdb init` 来初始化 Metasploit 数据库。除非是第一次操作，否则初始化将创建 `msf` 数据库、创建角色，并将
    `msf_test` 和 `msf` 数据库添加到 `/usr/share/metasploit-framework/config/database.yml`
    配置文件中；如果不是第一次，默认情况下，`msf` 数据库将在 Kali Linux 的预构建环境中创建，如 *图 10.4* 所示：![文本说明自动生成](../Images/B17765_10_04.png)
- en: 'Figure 10.4: Initializing the Metasploit database'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.4：初始化 Metasploit 数据库
- en: Now, you are ready to access `msfconsole`.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你已经准备好访问 `msfconsole`。
- en: 'Once inside the console, you can verify the status of the database by typing
    `db_status`. You should be able to see the following:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入控制台后，你可以通过输入 `db_status` 来验证数据库的状态。你应该能够看到以下内容：
- en: '[PRE0]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the case of there being multiple targets, all of which are different company
    units, or maybe two different companies, it is a good practice to create a workspace
    within Metasploit. This can be achieved by running the `workspace` command in
    the `msfconsole`. The following extract shows the help menu, where you can add/delete
    workspaces so that you can organize these exploits to achieve your objective:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果有多个目标，且这些目标属于不同的公司单位，或可能是两个不同的公司，最好在 Metasploit 中创建一个工作区。这可以通过在 `msfconsole`
    中运行 `workspace` 命令来实现。以下摘录显示了帮助菜单，在这里你可以添加/删除工作区，以便组织这些漏洞利用，从而实现你的目标：
- en: '[PRE1]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following example represents a simple **Unreal IRCD** attack against the
    target Linux-based operating system. When installed as a virtual machine (covered
    in *Chapter 1*, *Goal-Based Penetration Testing*), Metasploitable3 Ubuntu running
    on 10.10.10.8 can be scanned using the `db_nmap` command, which identifies open
    ports and associated applications. An excerpt of the `db_nmap` scan is shown in
    *Figure 10.5*:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例表示针对目标基于 Linux 的操作系统进行的简单 **Unreal IRCD** 攻击。安装为虚拟机后（如 *第 1 章*、*基于目标的渗透测试*
    中所述），运行在 10.10.10.8 上的 Metasploitable3 Ubuntu 可以通过 `db_nmap` 命令扫描，该命令识别开放端口和关联应用程序。`db_nmap`
    扫描的摘录如 *图 10.5* 所示：
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Text  Description automatically generated](../Images/B17765_10_05.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![文本说明自动生成](../Images/B17765_10_05.png)'
- en: 'Figure 10.5: Running db_nmap scans within Metasploit'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.5：在 Metasploit 中运行 db_nmap 扫描
- en: When the --save option is used, all the output of the scan results will be saved
    in `/root/.msf4/local/ folder`. Several applications were identified by `nmap`
    in the preceding example.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 --save 选项时，扫描结果的所有输出将保存在 `/root/.msf4/local/` 文件夹中。在前面的示例中，通过 `nmap` 已识别了几个应用程序。
- en: If the scan was completed using `nmap` separately, those results can also be
    imported into Metasploit using the `db_import` command. The `nmap` output will
    normally produce three types of output, that is, `xml`, `nmap`, and `gnmap`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果扫描是单独使用 `nmap` 完成的，这些结果也可以通过 `db_import` 命令导入到 Metasploit 中。`nmap` 输出通常会产生三种类型的输出，分别是
    `xml`、`nmap` 和 `gnmap`。
- en: 'The `.xml` format can be imported into the database using the Nmap `nokogiri`
    parser. Once the results have been imported into the database, multiple options
    can be utilized in the case of a large `nmap` dataset:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`.xml` 格式可以通过 Nmap 的 `nokogiri` 解析器导入到数据库中。导入结果后，在处理大型 `nmap` 数据集时，可以利用多种选项：'
- en: '![Text  Description automatically generated](../Images/B17765_10_06.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![文本说明自动生成](../Images/B17765_10_06.png)'
- en: 'Figure 10.6: Importing independent Nmap scans into Metasploit'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.6：将独立的 Nmap 扫描导入 Metasploit
- en: 'As a tester, we should investigate each one for any known vulnerabilities.
    If we run the `services` command in the `msfconsole`, the database should include
    the host and its listed services, as shown in *Figure 10.7*:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 作为测试人员，我们应该检查每个目标是否存在已知的漏洞。如果我们在 `msfconsole` 中运行 `services` 命令，数据库应包括主机及其列出的服务，如
    *图 10.7* 所示：
- en: '![Graphical user interface, text  Description automatically generated](../Images/B17765_10_07.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本说明自动生成](../Images/B17765_10_07.png)'
- en: 'Figure 10.7: Listing all the services within Metasploit'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.7：列出 Metasploit 中的所有服务
- en: 'One of the first places to start is Metasploit’s own collection of exploits.
    This can be searched from the command line using the following command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 开始的一个重要地方是 Metasploit 自带的漏洞集合。可以通过以下命令从命令行进行搜索：
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The search returned a particular exploit for the `UnrealIRCd` service. *Figure
    10.8* shows an excerpt of the exploit that’s available. If the testers choose
    to exploit any other listed service, they can search for keywords in Metasploit:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索返回了针对 `UnrealIRCd` 服务的特定漏洞。*图 10.8* 显示了可用漏洞的摘录。如果测试人员选择利用任何其他列出的服务，他们可以在 Metasploit
    中搜索关键字：
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](../Images/B17765_10_08.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，聊天或文本消息 说明自动生成](../Images/B17765_10_08.png)'
- en: 'Figure 10.8: Keyword searching within the Metasploit console for exploits'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.8：在 Metasploit 控制台中进行关键字搜索以查找漏洞
- en: The new version of Metasploit indexes modules and allows testers to just enter
    the number in the index to use it. The `exploit/unix/irc/unreal_ircd_3281_backdoor`
    exploit was selected for use in the remainder of this example because it is ranked
    as excellent. This ranking was determined by the Metasploit development team and
    identifies how reliably the exploit works for a skilled tester against a stable
    target system. In real life, multiple variables (tester skills, protective devices
    on the network, and modifications to the operating system and hosted applications)
    can work together to significantly alter the reliability of the exploit.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本的 Metasploit 索引了模块，并允许测试人员仅通过输入索引中的数字来使用它。由于 `exploit/unix/irc/unreal_ircd_3281_backdoor`
    漏洞被评为优秀，因此在本示例的其余部分中选择了此漏洞。此排名由 Metasploit 开发团队确定，标识该漏洞对于经验丰富的测试人员在稳定的目标系统上工作的可靠性。在现实中，多个变量（测试人员的技能、网络中的保护设备、操作系统和托管应用程序的修改）可能会共同作用，显著改变漏洞的可靠性。
- en: 'Additional information pertaining to that exploit was obtained using the following
    `info` command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下 `info` 命令获得了有关该漏洞的更多信息：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The returned information includes references as well as the information that’s
    shown in *Figure 10.9*:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的信息包括参考资料以及在*图 10.9*中显示的信息：
- en: '![Text  Description automatically generated with medium confidence](../Images/B17765_10_09.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![文本 说明自动生成，信心中等](../Images/B17765_10_09.png)'
- en: 'Figure 10.9: Detailed information about the exploit using the info command'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.9：使用 info 命令获取漏洞的详细信息
- en: 'To instruct Metasploit that we will attack the target with this exploit, we
    issue the following command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要指示 Metasploit 使用此漏洞进行攻击，我们发出以下命令：
- en: '[PRE5]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Metasploit changes the command prompt from `msf>` to `msf exploit(unix/irc/unreal_ircd_3281_backdoor)
    >`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit 将命令提示符从 `msf>` 更改为 `msf exploit(unix/irc/unreal_ircd_3281_backdoor)
    >`。
- en: 'Metasploit prompts the tester to select the payload (a reverse shell from the
    compromised system back to the attacker) and sets the other variables, which are
    listed as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit 提示测试人员选择有效载荷（从受损系统到攻击者的反向 shell）并设置其他变量，列举如下：
- en: '**Remote host** (**RHOST**): This is the IP address of the system being attacked.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远程主机** (**RHOST**)：这是被攻击系统的 IP 地址。'
- en: '**Remote port** (**RPORT**): This is the port number that is used for the exploit.
    In this case, we can see that the service has been exploited on default port `6667`,
    but in our case, the same service is running on port `6697`.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远程端口** (**RPORT**)：这是用于漏洞利用的端口号。在此案例中，我们可以看到该服务已在默认端口 `6667` 上被利用，但在我们的情况下，同样的服务运行在端口
    `6697` 上。'
- en: '**Local host** (**LHOST**): This is the IP address of the system that’s used
    to launch the attack.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地主机** (**LHOST**)：这是用于发起攻击的系统的 IP 地址。'
- en: The attack is launched by entering the `exploit` command at the Metasploit prompt
    after all variables have been set. Metasploit initiates the attack and confirms
    that a reverse shell between Kali Linux and the target system is open. In other
    exploits, a successful exploit is presented by using `command shell 1 opened`
    and giving the IP addresses that originate and terminate the reverse shell.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有变量都设置好之后，通过在 Metasploit 提示符下输入 `exploit` 命令来发起攻击。Metasploit 启动攻击并确认 Kali
    Linux 与目标系统之间的反向 shell 已经打开。在其他漏洞中，成功的漏洞利用通过使用 `command shell 1 opened` 来表示，并给出发起和终止反向
    shell 的 IP 地址。
- en: 'To verify that a shell is present, the tester can issue queries for the hostname,
    username (`uname -a`), and `whoami` to confirm that the results are specific to
    the target system that is located at a remote location. Take a look at *Figure
    10.10*:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证是否存在 shell，测试人员可以查询主机名、用户名（`uname -a`）和 `whoami`，以确认返回的结果是特定于位于远程位置的目标系统。请查看
    *图 10.10*：
- en: '![Text  Description automatically generated](../Images/B17765_10_10.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![Text  Description automatically generated](../Images/B17765_10_10.png)'
- en: 'Figure 10.10: Successfully exploiting UnrealIRC using Metasploit with a reverse
    shell'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.10：使用 Metasploit 通过反向 shell 成功利用 UnrealIRC
- en: This exploit can further be explored by using post-exploit modules. Run Meterpreter
    in the background by pressing *Ctrl* + *Z*. You should receive `Background session
    1? [y/N] y enter y`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此漏洞可以通过使用后渗透模块进一步探索。通过按 *Ctrl* + *Z* 在后台运行 Meterpreter。你应当收到 `Background session
    1? [y/N] y enter y`。
- en: When a system is compromised to this extent, it is ready for the post-exploitation
    activities (see *Chapter 11*, *Action on the Objective and Lateral Movement*,
    and *Chapter 13*, *Command and Control*, to find out how to escalate the privilege
    and maintain access to the system).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当系统被攻击到这种程度时，便可以进行后续的利用活动（参见 *第11章*，*目标行动与横向移动*，以及 *第13章*，*命令与控制*，了解如何提升权限并保持对系统的访问）。
- en: Exploiting targets using MSF
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用 MSF 攻击目标
- en: MSF is equally effective against vulnerabilities in the operating system as
    well as third-party applications. We will take an example for both scenarios.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: MSF 对操作系统的漏洞和第三方应用程序的漏洞同样有效。我们将举例说明这两种情况。
- en: Single targets using a simple reverse shell
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用简单反向 shell 的单一目标
- en: 'In this example, we’ll exploit two different vulnerabilities. The first one
    is the famous ProxyLogon vulnerability that the Hafnium threat actor group exploited
    by misuing Microsoft Exchange Server in March 2021, which stormed the internet
    and led to many cybersecurity incidents and also financial fraud around the globe.
    There are four vulnerabilities that were primarily exploited:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将利用两个不同的漏洞。第一个是著名的 ProxyLogon 漏洞，该漏洞被 Hafnium 威胁组织滥用，利用 Microsoft Exchange
    Server 在 2021 年 3 月发起攻击，造成了互联网风暴，并引发了全球范围内的多个网络安全事件和金融欺诈。主要被利用的四个漏洞是：
- en: '**CVE-2021-26855**: **Server Side Request Forgery** (**SSRF**) – Where attackers
    are able to submit specifically crafted HTTP requests remotely without any authentication
    and the server accepts untrusted connections on TCP port `443`.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CVE-2021-26855**：**服务器端请求伪造**（**SSRF**） – 攻击者可以远程提交特制的 HTTP 请求，且无需身份验证，服务器接受来自
    TCP 端口 `443` 的不信任连接。'
- en: '**CVE-2021-26857** – An insecure deserialization vulnerability within the Microsoft
    Exchange **Unified Messaging Service** (**UMS**), allowing attackers to run malicious
    code under a high-privilege SYSTEM account. This can be exploited either with
    SSRF or stolen credentials.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CVE-2021-26857** – 微软 Exchange **统一消息服务**（**UMS**）中的不安全反序列化漏洞，允许攻击者以高权限的
    SYSTEM 账户运行恶意代码。此漏洞可以通过 SSRF 或被窃取的凭证进行利用。'
- en: '**CVE-2021-26858** and **CVE-2021-27065** – These both relate to arbitrary
    file write vulnerability to write files to a given directory.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CVE-2021-26858** 和 **CVE-2021-27065** – 这两个漏洞都涉及到任意文件写入漏洞，允许将文件写入指定目录。'
- en: In the following example, we will be demonstrating a combination of **CVE-2021-26855**,
    to bypass the authentication and additionally impersonate an administrator account,
    and **CVE-2021-27065** to write an arbitrary file with the payload to provide
    us with remote code execution on the server.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将演示如何结合利用 **CVE-2021-26855** 绕过身份验证并冒充管理员账户，以及利用 **CVE-2021-27065**
    写入任意文件并通过载荷提供远程代码执行权限。
- en: As the first step, attackers will need the target running on-premises Microsoft
    Exchange Server exposed and enumerate all the email addresses to perform a successful
    attack. Testers can leverage the Python ProxyShell enumeration script to list
    all the users who are connected to the Exchange servers. This script is available
    at [https://github.com/PacktPublishing/Mastering-Kali-Linux-for-Advanced-Penetration-Testing-4E/blob/main/Chapter%2010/ProxyShell-enumerate.py](https://github.com/PacktPublishing/Mastering-Kali-Linux-for-Advanced-Penetration-Testing-4E/blob/main/Chapter%2010/ProxyShell-enumerate.py).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第一步，攻击者需要确保目标上的Microsoft Exchange Server是暴露的，并枚举出所有电子邮件地址，以执行成功的攻击。测试者可以利用Python
    ProxyShell枚举脚本列出所有连接到Exchange服务器的用户。此脚本可以在[https://github.com/PacktPublishing/Mastering-Kali-Linux-for-Advanced-Penetration-Testing-4E/blob/main/Chapter%2010/ProxyShell-enumerate.py](https://github.com/PacktPublishing/Mastering-Kali-Linux-for-Advanced-Penetration-Testing-4E/blob/main/Chapter%2010/ProxyShell-enumerate.py)上找到。
- en: 'Attackers can run `python3 proxyshell-enumerate.py –u <Exchange server IP`>.
    The output of the script against the target should display all the email addresses
    within the Exchange server, as seen in *Figure 10.11*:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以运行`python3 proxyshell-enumerate.py –u <Exchange server IP>`。该脚本在目标上的输出应该会显示Exchange服务器中的所有电子邮件地址，如在*图10.11*中所示：
- en: '![](../Images/B17765_10_11.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_10_11.png)'
- en: 'Figure 10.11: Enumeration of user email addresses on the Exchange server'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.11：Exchange服务器上用户电子邮件地址的枚举
- en: 'To initiate this attack, the first step is to open MSF by running the following,
    as shown in *Figure 10.12*:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动此攻击，第一步是通过运行以下命令来打开MSF，如*图10.12*所示：
- en: '[PRE6]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/B17765_10_12.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_10_12.png)'
- en: 'Figure 10.12: Running the exploit on the Exchange vulnerability'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.12：在Exchange漏洞上运行利用代码
- en: If there are any error messages or if the exploit is completed without a Meterpreter
    shell, ensure you disable Defender in the Microsoft Exchange Server by running
    `Set-MpPreference -DisableRealtimeMonitoring $true` in PowerShell as an administrator.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现任何错误消息，或者利用攻击完成后没有Meterpreter Shell，确保通过在PowerShell中以管理员身份运行`Set-MpPreference
    -DisableRealtimeMonitoring $true`来禁用Microsoft Exchange Server中的Defender。
- en: 'Successful exploitation results in arbitrary code execution under the context
    of the high-privileged SYSTEM user. Successful execution of the code should provide
    you with the Meterpreter shell shown in *Figure 10.13*:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的漏洞利用会导致在高权限的SYSTEM用户上下文中执行任意代码。成功执行代码后，你应该能获得在*图10.13*中显示的Meterpreter Shell：
- en: '![](../Images/B17765_10_13.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_10_13.png)'
- en: 'Figure 10.13: Successful exploitation leading to the Meterpreter HTTPS reverse
    shell'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.13：成功的漏洞利用导致Meterpreter HTTPS反向Shell
- en: 'When the exploit is completed, it should open up the Meterpreter reverse shell
    between two systems. The Meterpreter prompt session will be opened up and the
    tester can effectively access the remote system with a command shell. One of the
    first steps after the compromise is to verify that you are on the target system.
    As you can see in *Figure 10.14*, the `sysinfo` command identifies the computer
    name and operating system, verifying a successful attack:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当利用漏洞成功完成后，它应该会在两个系统之间打开Meterpreter反向Shell。Meterpreter提示符会打开，测试者可以有效地通过命令行Shell访问远程系统。攻击成功后的第一步之一是验证你是否已经进入目标系统。正如在*图10.14*中所示，`sysinfo`命令能够识别计算机名和操作系统，验证攻击是否成功：
- en: '![](../Images/B17765_10_14.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_10_14.png)'
- en: 'Figure 10.14: System information of the compromised server'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.14：被攻陷服务器的系统信息
- en: The second exploit that we will explore in this section is MS070-10, which rocked
    the world with WannaCry ransomware by exploiting EternalBlue back in April 2017\.
    The vulnerability exists in the way the SMB version was implemented in Windows,
    specifically, SMBv1 and NBT over TCP ports `445` and port `139` – which is used
    to share data in a secure way.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本节中探索的第二个漏洞是MS070-10，它通过利用EternalBlue漏洞在2017年4月引发了全球范围的WannaCry勒索病毒。该漏洞存在于Windows中SMB版本的实现方式，具体来说，是SMBv1和通过TCP端口`445`及端口`139`传输NBT的方式——这用于安全地共享数据。
- en: 'A successful exploit results in an adversary being able to run arbitrary code
    on the remote system. Although this exploit is old, many organizations still have
    to rely on some legacy systems. This might be due to various reasons, such as
    OEM dependency or the business simply cannot get rid of of old systems, such as
    Windows XP, 7, 2003, Windows 2008, and Windows 2008 R2\. To demonstrate how easy
    it is to exploit these legacy systems, we would utilize Metasploitable3 (running
    on `10.10.10.4`) to conduct this exploitation by setting the following in the
    Kali terminal:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的利用会导致攻击者能够在远程系统上运行任意代码。尽管这个漏洞较为陈旧，但许多组织仍然不得不依赖一些遗留系统。这可能是由于各种原因，如OEM依赖性，或是业务本身无法摆脱旧系统，比如Windows
    XP、7、2003、Windows 2008和Windows 2008 R2。为了展示如何轻松利用这些遗留系统，我们将利用Metasploitable3（运行在`10.10.10.4`）进行该漏洞利用，通过在Kali终端中设置以下内容：
- en: '[PRE7]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/B17765_10_15.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_10_15.png)'
- en: 'Figure 10.15: Exploitation of EternalBlue using Metasploit'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.15：使用Metasploit利用EternalBlue漏洞
- en: 'Finally, exploitation should provide us with a similar Meterpreter shell to
    what we saw in the previous exploit. The `hashdump` command should disclose all
    the usernames and password hashes, as shown in *Figure 10.16*:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，漏洞利用应该为我们提供类似于之前漏洞利用中看到的Meterpreter Shell。`hashdump`命令应该显示所有用户名和密码哈希值，如*图10.16*所示：
- en: '![A screenshot of a computer  Description automatically generated with low
    confidence](../Images/B17765_10_16.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![A screenshot of a computer  Description automatically generated with low
    confidence](../Images/B17765_10_16.png)'
- en: 'Figure 10.16: Extracting usernames and hashes using hashdump within Meterpreter'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.16：在Meterpreter中使用hashdump提取用户名和哈希值
- en: Furthermore, to store this information for the enhancement of lateral movement
    within the network, testers can utilize the `incognito` and `kiwi` modules within
    the `msfconsole`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，为了存储这些信息以增强网络中的横向移动，测试人员可以在`msfconsole`中利用`incognito`和`kiwi`模块。
- en: Exploiting multiple targets using MSF resource files
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MSF资源文件利用多个目标
- en: 'MSF resource files are basically line-separated text files that include a sequence
    of commands that need to be executed in `msfconsole`. Let’s go ahead and create
    a resource file that can exploit the same vulnerability on multiple hosts:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: MSF资源文件基本上是按行分隔的文本文件，其中包含需要在`msfconsole`中执行的一系列命令。让我们创建一个资源文件，该文件可以在多个主机上利用相同的漏洞：
- en: '[PRE8]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Save the file as `multiexploit.rc`. Now you are ready to invoke the resource
    file by running `msfconsole -r filename.rc`, where `-r` refers to the resource
    file. The preceding resource file will exploit the same vulnerability sequentially.
    Once the first exploit is complete, the specification of `exploit -j` will move
    the running exploit to the background, allowing the next exploit to proceed. Once
    all of the targets’ exploitation is complete, we should be able to see multiple
    Meterpreter shells available in Metasploit.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件保存为`multiexploit.rc`。现在，您可以通过运行`msfconsole -r filename.rc`来调用资源文件，其中`-r`表示资源文件。上述资源文件将按顺序利用相同的漏洞。一旦第一个漏洞利用完成，指定`exploit
    -j`将把正在运行的漏洞利用转移到后台，允许下一个漏洞利用继续。一旦所有目标的漏洞利用完成，我们应该能够在Metasploit中看到多个Meterpreter
    Shell。
- en: If the exploit is designed to run only on one host, it may not be possible to
    enter multiple hosts or IP ranges in the exploit. However, the alternative is
    to run the same exploit with different port numbers per host. We will be discussing
    pre-existing MSF resource files that can be utilized while escalating privileges
    in more detail in the next chapter.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果漏洞利用设计仅在单个主机上运行，可能无法在漏洞利用中输入多个主机或IP范围。然而，替代方法是对每个主机使用不同的端口号运行相同的漏洞利用。我们将在下一章详细讨论在提升权限时可以利用的现有MSF资源文件。
- en: Using public exploits
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用公共漏洞
- en: Every attacker always has their eyes out, looking for public exploits and modifying
    them according to their requirements. The latest exploit was on August 6, 2021,
    that is, ProxyLogon, which shook most of the companies running on-premises Exchange
    servers that host all their mission-critical business emails, thus creating an
    awareness of what information theft malware is all about. However, in this section,
    we will take a deep dive into utilizing known available exploit forums and also
    how we can onboard them into our Kali Linux system.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 每个攻击者都始终在寻找公共漏洞，并根据自己的需求修改它们。最近的一个漏洞利用是在2021年8月6日发布的ProxyLogon漏洞，它震惊了大多数运行本地Exchange服务器的公司，这些服务器承载了所有关键业务邮件，进而提高了对信息窃取恶意软件的认识。然而，在本节中，我们将深入探讨如何利用已知的可用漏洞论坛，以及如何将它们整合到我们的Kali
    Linux系统中。
- en: Locating and verifying publicly available exploits
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定位并验证公开可用的漏洞
- en: Many a time, penetration testers find a zero-day exploit during their tests,
    which they normally inform the company of. However, in the case of real attackers,
    any vulnerabilities that are found will be made into an exploit, which is then
    sold for money/fame to companies such as VUPEN. One of the important aspects of
    penetration testing is to find publicly available exploits on the internet and
    provide proof of concept.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 渗透测试人员在测试过程中经常发现零日漏洞，通常会通知公司。然而，对于真正的攻击者来说，发现的任何漏洞都会被制作成漏洞利用工具，然后卖给像VUPEN这样的公司，以获取金钱或名声。渗透测试的一个重要方面是寻找互联网上公开可用的漏洞并提供概念验证。
- en: 'The initial exploit database that was born on the internet was Milw0rm. Using
    the same concept, we can see multiple similar databases that can be utilized by
    the penetration testing community. The following is a list of places where attackers
    would primarily look for exploits:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 最初的漏洞数据库诞生于互联网上，名为Milw0rm。基于相同的概念，我们可以看到多个类似的数据库，渗透测试社区可以利用它们。以下是攻击者主要查找漏洞的地方列表：
- en: '**Exploit-DB** (**EDB**): The name says it all—it is a database archive of
    public exploits on the internet, along with the software versions that are vulnerable.
    EDB was developed by vulnerability researchers and penetration testers, who are
    driven by the community.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Exploit-DB**（**EDB**）：顾名思义，它是一个包含互联网上公共漏洞的数据库档案，并列出了易受攻击的软件版本。EDB由漏洞研究人员和渗透测试人员开发，旨在服务于社区。'
- en: 'Penetration testers often use Exploit-DB as a proof of concept rather than
    an advisory tool, making it more valuable during a penetration test or red team
    exercise:'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 渗透测试人员通常将Exploit-DB作为概念验证工具，而非咨询工具，这使得它在渗透测试或红队演习中更具价值：
- en: EDB is embedded into Kali Linux 2.0 as part of the build release and it has
    made it fairly simple to search for all the available exploits through SearchSploit.
    The advantage of EDB is that it’s also **common vulnerabilities and exposures **(**CVEs**)
    compatible. Wherever applicable, the exploits will include the CVE details.
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: EDB被嵌入到Kali Linux 2.0中，作为构建版本的一部分，使得通过SearchSploit搜索所有可用漏洞变得相对简单。EDB的优势在于它还兼容**常见漏洞和暴露**（**CVEs**）。在适用的情况下，漏洞将包括CVE详细信息。
- en: '**SearchSploit:** SearchSploit is a simple utility in Kali Linux for finding
    all the exploits from EDB with a keyword search to narrow down an attack. Once
    you open the terminal and type `searchsploit exchange windows remote`, you should
    be able to see the following:![](../Images/B17765_10_17.png)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SearchSploit：** SearchSploit是Kali Linux中的一个简单工具，用于通过关键词搜索EDB中的所有漏洞，从而缩小攻击范围。打开终端并输入`searchsploit
    exchange windows remote`后，您应该能够看到以下内容：![](../Images/B17765_10_17.png)'
- en: 'Figure 10.17: Searching for custom exploits from searchsploit'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.17：从searchsploit搜索自定义漏洞
- en: Compiling and using exploits
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编译并使用漏洞
- en: Attackers will collate all the relevant exploits, publish and compile them,
    and make them ready to use as a weapon to exploit the target. In this section,
    we will take a deep dive into compiling different types of files and add all the
    exploits written in Ruby that have `msfcore` as the base of Metasploit modules.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者将收集所有相关的漏洞，发布并汇编它们，然后准备好作为武器来利用目标。在本节中，我们将深入探讨如何汇编不同类型的文件，并添加所有以`msfcore`为Metasploit模块基础的用Ruby编写的漏洞。
- en: Compiling C files and executing exploits
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编译C文件并执行漏洞
- en: Older versions of exploits are written in C, especially buffer overflow attacks.
    Let’s look at an example of compiling a C file from the EDB and make an exploit
    for a vulnerable Apache server.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 旧版本的漏洞通常是用C语言编写的，特别是缓冲区溢出攻击。让我们看看从EDB编译C文件并为易受攻击的Apache服务器制作漏洞的一个例子。
- en: 'Attackers can utilize a GNU compiler collection to compile a C file into an
    executable with the following commands:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以利用GNU编译器集合将C文件编译成可执行文件，使用以下命令：
- en: '[PRE9]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once the file is compiled without any error or warning, attackers should be
    able to see the exploit running, as shown in *Figure 10.18*:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦文件成功编译且没有任何错误或警告，攻击者应该能够看到漏洞正在运行，如*图 10.18*所示：
- en: '![](../Images/B17765_10_18.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_10_18.png)'
- en: 'Figure 10.18: Compiling a C file and running it from EDB'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.18：编译C文件并从EDB运行
- en: Adding the exploits that are written using the MSF as a base
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加使用MSF作为基础编写的漏洞
- en: Copy the exploit file/script either from `exploit-db.com` directly from the
    browser or from `/usr/share/exploitdb/exploits/`, depending on the platform and
    the type of exploit you are running.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 根据平台和运行的漏洞类型，可以直接从浏览器或从`/usr/share/exploitdb/exploits/`复制漏洞文件/脚本。
- en: In this example, we will use `/usr/share/exploitdb/exploits/windows/remote/16756.rb`.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用`/usr/share/exploitdb/exploits/windows/remote/16756.rb`。
- en: 'Add the Ruby script as a custom exploit to the Metasploit module, move or copy
    the file to `/usr/share/metasploit-framework/modules/exploits/windows/http/`,
    and name the file `NewExploit.rb`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 将Ruby脚本作为定制漏洞添加到Metasploit模块，将文件移动或复制到`/usr/share/metasploit-framework/modules/exploits/windows/http/`，并将文件命名为`NewExploit.rb`：
- en: '[PRE10]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once the file has been copied or moved to its new location, you must restart
    `msfconsole` just to ensure that the file has been loaded into the available module
    in Metasploit. You will be able to use the module with your custom name that you
    set as part of the available Metasploit module:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦文件被复制或移动到新的位置，必须重新启动`msfconsole`，以确保文件已被加载到Metasploit中的可用模块中。你将能够使用你设置的自定义名称，作为Metasploit可用模块的一部分：
- en: '![Text  Description automatically generated](../Images/B17765_10_19.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![文本描述自动生成](../Images/B17765_10_19.png)'
- en: 'Figure 10.19: Adding custom exploits to the Metasploit Framework from EDB'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.19：将定制漏洞从EDB添加到Metasploit框架
- en: That concludes adding an existing exploit in EDB to Metasploit. We will explore
    writing our own custom exploit in the next section.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了将EDB中的现有漏洞添加到Metasploit的过程。我们将在下一节中探讨编写我们自己的定制漏洞。
- en: Developing a Windows exploit
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发Windows漏洞
- en: 'Exploit development is a tough art that requires attackers to have a fair bit
    of understanding of the assembly language and underlying system architecture.
    We can utilize the following five-stage approach to develop a custom exploit:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞开发是一项艰难的艺术，要求攻击者对汇编语言和底层系统架构有一定的理解。我们可以利用以下五阶段方法来开发一个定制漏洞：
- en: '![Text, application  Description automatically generated](../Images/B17765_10_20.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![文本，应用程序描述自动生成](../Images/B17765_10_20.png)'
- en: 'Figure 10.20: Five-stage custom exploit development'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.20：五阶段定制漏洞开发
- en: 'In this section, we will cover some basics that are required to develop a Windows
    exploit by building a vulnerable application. From the exploit development perspective,
    the following are the basic terms that penetration testers must understand when
    they develop an exploit:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍开发Windows漏洞所需的一些基础知识，通过构建一个易受攻击的应用程序。从漏洞开发的角度来看，渗透测试人员在开发漏洞时必须了解以下基本术语：
- en: '**Registers**: All of the processes execute via registers; these are used to
    store information.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**寄存器**：所有进程通过寄存器执行；这些寄存器用于存储信息。'
- en: '**x86**: This includes 32-bit systems that are mostly Intel-based; 64-bit systems
    are represented as x64.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**x86**：这包括大多数基于Intel的32位系统；64位系统表示为x64。'
- en: '**Assembly language**: This includes low-level programming languages.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**汇编语言**：这包括低级编程语言。'
- en: '**Buffer**: This is a static memory holder in a program that stores data on
    top of the stack or heap.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓冲区**：这是程序中一个静态的内存存储器，用于在栈或堆上存储数据。'
- en: '**Debugger**: Debuggers are the programs that can be utilized so that you can
    see the runtime of a program while executing. You can also use them to look at
    the state of registry and memory. Some of the tools that we will be using are
    immunity debuggers, GDB, and OllyDbg.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试器**：调试器是可以在程序执行时查看程序运行状态的工具。你还可以使用它们查看寄存器和内存的状态。我们将使用的一些工具包括Immunity Debugger、GDB和OllyDbg。'
- en: '**ShellCode**: This is the code that is created by the attackers in a successful
    exploitation.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ShellCode**：这是攻击者在成功利用过程中创建的代码。'
- en: 'The following are the different types of registers:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是不同类型的寄存器：
- en: '**EAX**: This is a 32-bit register that is used as an accumulator and stores
    data and operands.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**EAX**：这是一个32位寄存器，用作累加器并存储数据和操作数。'
- en: '**EBX**: This is a 32-bit base register and acts as a pointer to the data.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**EBX**：这是一个32位基寄存器，作为数据的指针。'
- en: '**ECX**: This is a 32-bit register that’s used for looping purposes.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ECX**：这是一个32位寄存器，用于循环目的。'
- en: '**EDX**: This is a 32-bit data register that stores I/O pointers.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**EDX**：这是一个32位数据寄存器，用于存储I/O指针。'
- en: '**ESI/EDI**: These are 32-bit index registers that act as data pointers for
    all the memory operations.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ESI/EDI**：这两个是32位索引寄存器，作为所有内存操作的数据指针。'
- en: '**EBP**: This is a 32-bit stack data pointer register.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**EBP**：这是一个32位的堆栈数据指针寄存器。'
- en: '**Extended Instruction Pointer** (**EIP**): This is a 32-bit program counter/instruction
    pointer that holds the next instruction to be executed.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展指令指针** (**EIP**): 这是一个32位的程序计数器/指令指针，用于保存下一条待执行的指令。'
- en: '**Extended Stack Pointer** (**ESP**): This is a 32-bit stack pointer register
    that points exactly to where the stack is pointing.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展堆栈指针** (**ESP**): 这是一个32位堆栈指针寄存器，精确地指向堆栈所在的位置。'
- en: '**SS**, **DS**, **ES**, **CS**, **FS**, and **GS**: These are 16-bit segment
    registers.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SS**、**DS**、**ES**、**CS**、**FS** 和 **GS**: 这些是16位的段寄存器。'
- en: '**NOP**: This stands for no operations.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NOP**: 这是空操作的缩写。'
- en: '**JMP**: This stands for jump instructions.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JMP**: 这是跳转指令的缩写。'
- en: Identify the vulnerability through fuzzing
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过模糊测试识别漏洞
- en: Attackers must be able to identify the right fuzzing parameters in any given
    application to find a vulnerability and then exploit it. In this section, we will
    look at an example of a **vulnerable server**, which was created by Stephen Bradshaw.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者必须能够识别任何给定应用程序中的正确模糊测试参数，以找到漏洞并加以利用。在本节中，我们将通过Stephen Bradshaw创建的**易受攻击的服务器**示例进行讲解。
- en: This vulnerable software can be downloaded from [https://github.com/PacktPublishing/Mastering-Kali-Linux-for-Advanced-Penetration-Testing-4E/tree/main/Chapter%2010/](https://github.com/PacktPublishing/Mastering-Kali-Linux-for-Advanced-Penetration-Testing-4E/tree/main/Chapter%2010/)
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 该易受攻击的软件可以从[https://github.com/PacktPublishing/Mastering-Kali-Linux-for-Advanced-Penetration-Testing-4E/tree/main/Chapter%2010/](https://github.com/PacktPublishing/Mastering-Kali-Linux-for-Advanced-Penetration-Testing-4E/tree/main/Chapter%2010/)下载
- en: In this example, we will be using Windows 10 to host the vulnerable server.
    Once the application is downloaded, we will be unzipping the file and running
    the server.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用Windows 10来托管易受攻击的服务器。一旦下载完应用程序，我们将解压文件并运行服务器。
- en: 'This should open TCP port `9999` for the remote clients to connect to. When
    the vulnerable server is up and running, you should be able to see the following:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为远程客户端打开`9999`端口以进行连接。当易受攻击的服务器启动并运行时，你应该能看到如下内容：
- en: '![](../Images/B17765_10_21.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_10_21.png)'
- en: 'Figure 10.21: Vulnerable server running on Windows 10'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.21：Windows 10上运行的易受攻击服务器
- en: 'Attackers can connect to the server on port `9999`, using `netcat` to communicate
    to the server from Kali Linux, as shown in *Figure 10.22*:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以通过`netcat`连接到`9999`端口的服务器，从Kali Linux与服务器进行通信，如*图10.22*所示：
- en: '![](../Images/B17765_10_22.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_10_22.png)'
- en: 'Figure 10.22: Connecting to the vulnerable server from Kali Linux'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.22：从Kali Linux连接到易受攻击的服务器
- en: Fuzzing is a technique in which attackers specifically send malformed packets
    to the target to generate errors in the application or create general failures.
    These failures indicate bugs that exist in the code written by the developer of
    the application.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Fuzzing（模糊测试）是一种技术，攻击者专门向目标发送格式错误的数据包，以产生应用程序错误或一般性故障。这些故障指示应用程序开发者编写的代码中存在漏洞。
- en: The attacker can find out how it can be exploited to allow remote access by
    running their own code. Now that the application is accessible and everything
    is set, attackers can begin the art of fuzzing.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以通过运行他们自己的代码，找出如何利用该漏洞来实现远程访问。现在，应用程序已可访问，一切准备就绪，攻击者可以开始模糊测试的工作。
- en: 'Although there are a number of fuzzing tools available, SPIKE is one of the
    defaults that is installed on Kali Linux. SPIKE is a fuzzing toolkit that’s used
    to create fuzzers by providing scripting capabilities; however, it is written
    in the C language. The following is a list of interpreters written in SPIKE that
    can be utilized:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有许多模糊测试工具可供选择，但SPIKE是Kali Linux上默认安装的工具之一。SPIKE是一个模糊测试工具包，它通过提供脚本编写功能来创建模糊测试工具；然而，它是用C语言编写的。以下是可以在SPIKE中使用的解释器列表：
- en: '`generic_chunked`'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generic_chunked`'
- en: '`generic_send_tcp`'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generic_send_tcp`'
- en: '`generic_send_udp`'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generic_send_udp`'
- en: '`generic_web_server_fuzz`'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generic_web_server_fuzz`'
- en: '`generic_web_server_fuzz2`'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generic_web_server_fuzz2`'
- en: '`generic_listen_tcp`'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generic_listen_tcp`'
- en: SPIKE allows you to add your own set of scripts without having to write a few
    hundred lines of code in C. Other fuzzing tools that attackers can consider are
    Peach Fuzzer, BooFuzz, and FilFuzz.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: SPIKE允许你添加自己的脚本集，而无需用C语言编写几百行代码。攻击者还可以考虑使用其他模糊测试工具，如Peach Fuzzer、BooFuzz和FilFuzz。
- en: 'Once attackers connect to the target application, they should be able to see
    multiple options available in the vulnerable server, which they can then play
    with. This includes `STATS`, `RTIME`, `LTIME`, `SRUN`, `TRUN`, `GMON`, `GDOG`,
    `KSTET`, `GTER`, `HTER`, `LTER`, and `KSTAN` as part of valid commands that take
    input. We will utilize the `generic_send_tcp` interpreter to fuzz the application.
    The format to use the interpreter is as follows: `. /generic_send_tcp host port
    spike_script SKIPVAR SKIPSTR`:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦攻击者连接到目标应用程序，他们应该能够在易受攻击的服务器中看到多个可用选项，然后可以进行操作。这包括`STATS`、`RTIME`、`LTIME`、`SRUN`、`TRUN`、`GMON`、`GDOG`、`KSTET`、`GTER`、`HTER`、`LTER`和`KSTAN`等有效命令的一部分，这些命令需要输入。我们将使用`generic_send_tcp`解释器来对应用程序进行模糊测试。使用该解释器的格式如下：`.
    /generic_send_tcp 主机 端口 spike_script SKIPVAR SKIPSTR`：
- en: '`host`: This is the target host or IP.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host`：这是目标主机或IP地址。'
- en: '`port`: This is the port number to be connected to.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`port`：这是要连接的端口号。'
- en: '`spike_script`: This is the SPIKE script to run on the interpreter.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spike_script`：这是要在解释器中运行的SPIKE脚本。'
- en: '`SKIPVAR` and `SKIPSTR`: This allows the testers to jump into the middle of
    the fuzzing session, as defined in the SPIKE script.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SKIPVAR`和`SKIPSTR`：这使得测试人员可以在模糊测试会话的中间跳入，如SPIKE脚本中所定义。'
- en: 'As the key next step, let’s go ahead and create a simple SPIKE script for `readline`,
    run `SRUN`, and assign a string value as the parameter:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 作为下一关键步骤，让我们继续创建一个简单的SPIKE脚本来进行`readline`，运行`SRUN`，并将字符串值作为参数传递：
- en: '[PRE11]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The script will read the first line (`s_readline`) of the input after connecting
    to the IP/hostname and then run `SRUN`, along with a randomly generated value.
    Note that to run a SPIKE script, it must be saved with the `.spk` file format.
    Now let’s save the file with the above three lines as `exploitfuzzer.spk` and
    run the SPIKE script against the target, as shown in *Figure 10.23*:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本将在连接到IP/主机名后读取输入的第一行（`s_readline`），然后运行`SRUN`，并生成一个随机值。注意，要运行SPIKE脚本，必须将其保存为`.spk`文件格式。现在，让我们将上述三行保存为`exploitfuzzer.spk`文件，并如*图10.23*所示，对目标运行SPIKE脚本：
- en: '![](../Images/B17765_10_23.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_10_23.png)'
- en: 'Figure 10.23: Fuzzing the vulnerable server with SRUN'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.23：使用SRUN对易受攻击的服务器进行模糊测试
- en: 'After fuzzing the application, it confirms no server crash or anything similar,
    so the `SRUN` parameter is not vulnerable. The next step is to pick another one.
    This time, we will pick `TRUN` as the parameter to fuzz within the same script:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在对应用程序进行模糊测试后，确认没有服务器崩溃或类似问题，因此`SRUN`参数并不容易受攻击。接下来的步骤是选择另一个参数。这次我们将选择`TRUN`作为参数，在相同脚本中进行模糊测试：
- en: '[PRE12]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Save the `exploitfuzz.spk` file and run the same command, as shown in *Figure
    10.24*:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 保存`exploitfuzz.spk`文件并运行相同的命令，如*图10.24*所示：
- en: '![](../Images/B17765_10_24.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_10_24.png)'
- en: 'Figure 10.24: Fuzzing the vulnerable server with TRUN'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.24：使用TRUN对易受攻击的服务器进行模糊测试
- en: Fuzzing the application with TRUN has resulted in the application crashing,
    so now we can confirm that this function can be abused and exploited. As a key
    next step, we must now debug and replicate the crash in a more verbose way.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TRUN对应用程序进行模糊测试导致应用程序崩溃，因此现在我们可以确认此功能可以被滥用和利用。作为下一关键步骤，我们必须调试并以更详细的方式复制崩溃。
- en: Debug and replicate the crash
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试并复制崩溃
- en: 'On the server side, we must debug the application. To perform debugging, we
    will download Immunity Debugger from [https://www.immunityinc.com/products/debugger/](https://www.immunityinc.com/products/debugger/).
    This debugger is used mostly in finding exploits, analyzing malware, and reverse
    engineering any binary files. The vulnerable server can be attached as a process
    to the debugger after running `vulnserver.exe` or can be directly executable and
    opened by the debugger, as shown in *Figure 10.25*:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端，我们必须调试应用程序。为了进行调试，我们将从[https://www.immunityinc.com/products/debugger/](https://www.immunityinc.com/products/debugger/)下载Immunity
    Debugger。该调试器主要用于查找漏洞、分析恶意软件和逆向工程任何二进制文件。在运行`vulnserver.exe`后，可以将易受攻击的服务器作为进程附加到调试器中，或者直接通过调试器可执行并打开，如*图10.25*所示：
- en: '![Graphical user interface, text  Description automatically generated](../Images/B17765_10_25.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本  自动生成的描述](../Images/B17765_10_25.png)'
- en: 'Figure 10.25: Loading vulnserver using Immunity Debugger'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.25：使用Immunity Debugger加载vulnserver
- en: Once the application runs through the debugger and the fuzzing script is run
    from our Kali Linux, as seen in *Figure 10.25*, you should now be able to see
    that the server has crashed on the victim’s PC.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序通过调试器运行，并且我们的Kali Linux系统中运行了模糊测试脚本，如*图10.25*所示，您应该能够看到服务器在受害者的计算机上崩溃。
- en: 'The debugger also gives us some useful information on exception offset `41414141`, which
    we can take note of (which is converted as `AAAA`) in the **Registers** section
    within Immunity Debugger, as shown in *Figure 10.26*:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器还为我们提供了一些有用的信息，如异常偏移量 `41414141`，我们可以在 Immunity Debugger 中的 **Registers**
    部分记下它（转换为 `AAAA`），如 *图 10.26* 所示：
- en: '![Text  Description automatically generated](../Images/B17765_10_26.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![Text  Description automatically generated](../Images/B17765_10_26.png)'
- en: 'Figure 10.26: Registers after the vulnserver crash due to fuzzing'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.26：因模糊测试导致 vulnserver 崩溃后的寄存器信息
- en: 'To conduct the successful buffer overflow for the given application involves
    the following steps:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 为了成功进行给定应用程序的缓冲区溢出攻击，涉及以下步骤：
- en: Finding the right length of the spiking
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 寻找正确的尖峰长度
- en: Fuzzing the right pattern
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模糊测试正确的模式
- en: Finding the offset
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 寻找偏移量
- en: Overwriting the EIP
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 覆盖 EIP
- en: Finding the right address of the JMP ESP operation
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 寻找 JMP ESP 操作的正确地址
- en: Checking for bad characters and placing a NOPS sled
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查坏字符并放置 NOPS sled
- en: Generating shellcode
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成 shellcode
- en: Setting up listeners and exploiting
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置监听器并进行利用
- en: 'The first step is to identify exactly how many characters caused the server
    crash and what buffer size can be utilized. We will start debugging the application
    that has crashed and take a look at the ESP address in the **Registers** section,
    right-click within Immunity Debugger, and click on **Follow in Dump** to see where
    the payload was inserted initially and note down the memory address `00ACF1F0`,
    as shown in *Figure 10.27*:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是准确找出导致服务器崩溃的字符数量，以及可以利用的缓冲区大小。我们将开始调试崩溃的应用程序，查看 **Registers**（寄存器）部分中的 ESP
    地址，在 Immunity Debugger 中右键点击并选择 **Follow in Dump**，查看有效载荷最初是如何插入的，并记下内存地址 `00ACF1F0`，如
    *图 10.27* 所示：
- en: '![](../Images/B17765_10_27.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_10_27.png)'
- en: 'Figure 10.27: Initial memory where the fuzzing began'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.27：模糊测试开始时的初始内存
- en: If we traverse all the way to the end where the fuzzing AAA stops, you will
    see `00ACFD98`, as seen in *Figure 10.28*. Note that these addresses will change
    according to the operating system that you utilize while debugging or disassembling
    the executable.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们一直遍历到模糊测试 AAA 停止的地方，你会看到 `00ACFD98`，如 *图 10.28* 所示。请注意，这些地址会根据你在调试或反汇编可执行文件时使用的操作系统发生变化。
- en: '![](../Images/B17765_10_28.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_10_28.png)'
- en: 'Figure 10.28: End of the fuzzing memory address'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.28：模糊测试内存地址的结束
- en: 'Now that we have the start and end addresses, let’s use `python3` to identify
    the length of the buffer by running `python3` in the terminal and just simply
    put `0x00ACFD98` (the end of the memory address) and `0x00ACF1F0` (the start of
    the memory address), as seen below. It should provide us with the buffer length:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了开始和结束地址，接下来让我们使用 `python3` 通过在终端运行 `python3`，并简单地输入 `0x00ACFD98`（内存地址的结束位置）和
    `0x00ACF1F0`（内存地址的起始位置），如下所示。它应该会给我们提供缓冲区的长度：
- en: '[PRE13]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this case, we have a buffer length of `2984`. The next stage is to control
    the execution of our exploit code.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们有一个 `2984` 的缓冲区长度。下一步是控制我们利用代码的执行。
- en: Control the application execution
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制应用程序的执行
- en: 'We now have the length of the buffer. The next step is to identify the right
    offset to EIP to control it. Let’s write a quick Python script to connect the
    vulnerable server with the exact length that crashed the server, save the file
    as `crash.py`, and run it against the target IP:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经知道了缓冲区的长度。下一步是找到正确的偏移量来控制 EIP。让我们编写一个快速的 Python 脚本，通过精确的长度连接到脆弱的服务器，这个长度会使服务器崩溃，保存文件为
    `crash.py`，并在目标 IP 上运行：
- en: '[PRE14]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The next step is to create a pattern using MSF by locating the `/usr/share/etasploit-framework/tools/exploit/`
    folder and running `./pattern_create -l 2984` in the Kali Linux terminal.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是使用 MSF 创建一个模式，通过定位到 `/usr/share/etasploit-framework/tools/exploit/` 文件夹，并在
    Kali Linux 终端中运行 `./pattern_create -l 2984`。
- en: 'You can either output the content that is generated into a file or copy it
    from the terminal. Alternatively, you can add to your Python program by adding
    another variable. This time, we will disable the buffer and use the pattern that
    was created by the exploit tool with a length of `2984`:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将生成的内容输出到文件中，也可以从终端复制它。或者，你可以通过在 Python 程序中添加另一个变量来使用它。这次我们将禁用缓冲区，并使用由攻击工具生成的长度为
    `2984` 的模式：
- en: '[PRE15]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Again, running `crash.py` against the target will result in the server crashing
    again. However, all of the `A` characters are replaced by the pattern that was
    created. On the vulnerable server, we should be able to see the registers from
    Immunity Debugger, which provides the next instruction that will be stored in
    `EIP`, as shown in *Figure 10.29*:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，运行`crash.py`对目标进行攻击将导致服务器再次崩溃。然而，所有的`A`字符都被创建的模式替换了。在易受攻击的服务器上，我们应该能够看到Immunity
    Debugger中的寄存器，它提供了将存储在`EIP`中的下一条指令，如*图10.29*所示：
- en: '![Text  Description automatically generated](../Images/B17765_10_29.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![自动生成的文本说明](../Images/B17765_10_29.png)'
- en: 'Figure 10.29: EIP of the application after injecting the pattern'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.29：注入模式后的应用程序EIP
- en: That’s the end of fuzzing with the next EIP `386F4337`. To create a Windows-specific
    exploit, we must identify the right offset of the EIP. This can be extracted by
    exploit tools such as `pattern_offset`, which takes the input of the EIP with
    the same length that was used to create the pattern.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 这是与下一个EIP `386F4337`进行模糊测试的结束。要创建一个特定于Windows的漏洞利用，我们必须识别EIP的正确偏移量。可以使用像`pattern_offset`这样的漏洞利用工具提取该偏移量，`pattern_offset`接受EIP输入，并且输入长度与创建模式时使用的长度相同。
- en: '[PRE16]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This means that an offset match was found in the pattern that was created with
    the EIP. Now, we know that buffer `2003` is enough to crash the server, and we
    can begin the overflow and see if we can overwrite the EIP:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着在使用EIP创建的模式中找到了偏移匹配。现在，我们知道缓冲区`2003`足以使服务器崩溃，我们可以开始溢出，并查看是否能够覆盖EIP：
- en: '[PRE17]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Upon execution of the preceding Python code from Kali Linux, you should see
    the EIP that we overwrote. If everything is correct, you should see the following
    on the server side with the EIP as `42424242` in the immunity debugger:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kali Linux中执行前面的Python代码后，您应该看到我们覆盖的EIP。如果一切正确，您应该在服务器端看到EIP为`42424242`，并在Immunity调试器中显示：
- en: '![](../Images/B17765_10_30.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_10_30.png)'
- en: 'Figure 10.30: Successfully overwriting the EIP address'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.30：成功覆盖EIP地址
- en: Identify the right bad characters and generate shellcode
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 识别正确的坏字符并生成shellcode
- en: Our next task is to identify the address of JMP ESP, since our payload will
    be loaded into the ESP register. For that, we will utilize the `mona.py` script,
    which is a Python tool that speeds up searches while developing exploits. This
    tool can be downloaded directly from [https://github.com/PacktPublishing/Mastering-Kali-Linux-for-Advanced-Penetration-Testing-4E/blob/main/Chapter%2010/mona.py](https://github.com/PacktPublishing/Mastering-Kali-Linux-for-Advanced-Penetration-Testing-4E/blob/main/Chapter%2010/mona.py).
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一个任务是识别JMP ESP的地址，因为我们的有效载荷将被加载到ESP寄存器中。为此，我们将使用`mona.py`脚本，这是一个Python工具，可以加速在开发漏洞利用时的搜索。这个工具可以直接从[https://github.com/PacktPublishing/Mastering-Kali-Linux-for-Advanced-Penetration-Testing-4E/blob/main/Chapter%2010/mona.py](https://github.com/PacktPublishing/Mastering-Kali-Linux-for-Advanced-Penetration-Testing-4E/blob/main/Chapter%2010/mona.py)下载。
- en: 'Upon downloading the Python script, it should be placed in the `PyCommands`
    folder of Immunity Debugger’s installed location (`c:\program files(x86)\Immunity
    Inc\Immunity Debugger\Pycommands\`). Once the `mona.py` script is placed in PyCommands,
    testers need to reopen Immunity Debugger and run `!mona jmp –r esp` . in the Immunity
    terminal. That should display the JMP ESP. In our case, it is `0x62501203`, as
    shown in *Figure 10.31*:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 下载Python脚本后，应将其放置在Immunity Debugger安装位置的`PyCommands`文件夹中（`c:\program files(x86)\Immunity
    Inc\Immunity Debugger\Pycommands\`）。将`mona.py`脚本放入PyCommands后，测试人员需要重新打开Immunity
    Debugger并在Immunity终端中运行`!mona jmp –r esp`。这应该会显示JMP ESP。在我们的例子中，它是`0x62501203`，如*图10.31*所示：
- en: '![Text  Description automatically generated](../Images/B17765_10_31.png)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![自动生成的文本说明](../Images/B17765_10_31.png)'
- en: 'Figure 10.31: Running mona to identify the JMP ESP address'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.31：运行mona以识别JMP ESP地址
- en: If the mona display goes away, just do `!mona help` in the same terminal within
    Immunity Debugger to bring the screen back. Now we are all set to create the payload.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 如果mona的显示消失了，只需在Immunity Debugger的相同终端中执行`!mona help`即可将屏幕恢复过来。现在我们已经准备好创建有效载荷。
- en: You can use mona to identify bad chars. Testers can utilize any public material
    to find more ways to exploit the vulnerability. This topic deserves a book on
    its own.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用mona来识别坏字符。测试人员可以利用任何公开的资料，寻找更多漏洞利用的方式。这个话题本身值得出一本书。
- en: To create a default array in mona, you can use `!mona bytearray`, which will
    generate output of two files named `bytearray.txt` and `bytearray.bin` with all
    the bad characters.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 要在mona中创建默认的字节数组，可以使用`!mona bytearray`，这将生成两个名为`bytearray.txt`和`bytearray.bin`的文件，其中包含所有的坏字符。
- en: 'We will go ahead and create a Windows payload with `''\x00''` as a bad character
    using `msfvenom` by running the following command in the terminal. This will generate
    a shellcode that will provide a Meterpreter reverse shell on the attacker’s IP:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用 `msfvenom` 创建一个 Windows 载荷，将 `'\x00'` 作为一个坏字符，通过在终端中运行以下命令来实现。这将生成一个
    shellcode，提供一个反向 Meterpreter shell，连接到攻击者的 IP 地址：
- en: '[PRE18]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Obtain the shell
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取 shell
- en: 'Finally, we are in the last stage of creating the full-fledged exploit—we just
    need to add a NOP sled and then overflow the buffer and write our shellcode to
    the system running the vulnerable application server. The following code extract
    is the full Python code for exploiting the vulnerable server:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们进入创建完整漏洞利用的最后阶段——我们只需要添加一个 NOP sled，然后溢出缓冲区并将我们的 shellcode 写入运行易受攻击应用程序服务器的系统。以下代码片段是利用易受攻击的服务器进行攻击的完整
    Python 代码：
- en: '[PRE19]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Save the final Python script as `exploit.py` and before you execute, ensure
    that your listener is up in Metasploit by running the following commands in the
    terminal:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 将最终的 Python 脚本保存为 `exploit.py`，在执行之前，确保你的监听器已在 Metasploit 中启动，可以通过在终端中运行以下命令来检查：
- en: '[PRE20]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Everything is now set. Attackers will now be able to perform and craft a Windows-specific
    exploit using Python programming. The next step is to run `exploit.py` from the
    terminal:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 一切已准备就绪。攻击者现在将能够使用 Python 编程执行并制作 Windows 特定的漏洞利用。下一步是从终端运行 `exploit.py`：
- en: '[PRE21]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The successful exploitation will overwrite the buffer with our shellcode and
    then execute it to spawn a reverse shell to the attacker, as shown in *Figure
    10.32*:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的漏洞利用将覆盖缓冲区并写入我们的 shellcode，然后执行它以生成一个反向 shell 到攻击者，如 *图 10.32* 所示：
- en: '![Text  Description automatically generated](../Images/B17765_10_32.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![Text  Description automatically generated](../Images/B17765_10_32.png)'
- en: 'Figure 10.32: Successful TCP reverse shell from vulnserver'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.32：成功的 TCP 反向 shell 来自 vulnserver
- en: That concludes the five-stage approach to developing a Windows-specific exploit.
    We will explore the PowerShell Empire framework, which can be leveraged by attackers
    during post-exploitation activities.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 这标志着开发 Windows 特定漏洞利用的五个阶段的结束。我们将探索 PowerShell Empire 框架，攻击者可以在后期利用它进行后渗透活动。
- en: PowerShell Empire framework
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PowerShell Empire 框架
- en: The initial Empire tool was one of the most powerful post-exploitation tools,
    which was based on Python 2.7, but progress has been quiet for the last 3 years.
    The same fork of this project was picked up with active contributions from BC-Security
    and has now been rewritten in Python 3 and is used by penetration testers around
    the globe to perform a variety of different attacks in penetration tests to demonstrate
    system vulnerabilities. This tool runs PowerShell agents that, by nature, are
    persistent. It also utilizes other important tools, such as `mimikatz`. In this
    section, we will look closer at how to use PowerShell’s Empire framework.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 最初的 Empire 工具是最强大的后渗透工具之一，它基于 Python 2.7，但在过去的 3 年里进展缓慢。这个项目的同一分支被 BC-Security
    接手，并活跃贡献，现在已经用 Python 3 重写，并被全球的渗透测试人员用于执行各种不同的攻击，以在渗透测试中展示系统漏洞。该工具运行 PowerShell
    代理，天生具有持久性。它还利用了其他重要工具，如 `mimikatz`。在这一部分，我们将详细了解如何使用 PowerShell 的 Empire 框架。
- en: 'This tool can be installed by running `sudo apt install powershell-empire`
    in the terminal. Once the application is installed, testers should be able to
    see the following options:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具可以通过在终端中运行 `sudo apt install powershell-empire` 来安装。安装完成后，测试人员应该能够看到以下选项：
- en: '![Text  Description automatically generated](../Images/B17765_10_33.png)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![Text  Description automatically generated](../Images/B17765_10_33.png)'
- en: 'Figure 10.33: PowerShell Empire’s main menu'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.33：PowerShell Empire 主菜单
- en: 'Attackers need to first run the server before connecting the client. So the
    first step would be to run `sudo powershell-empire server` and then run `sudo
    powershell-empire client`, and that should bring us to the following screen:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者需要先运行服务器，然后再连接客户端。所以第一步是运行 `sudo powershell-empire server`，然后运行 `sudo powershell-empire
    client`，这将带我们进入以下界面：
- en: '![Text  Description automatically generated](../Images/B17765_10_34.png)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![Text  Description automatically generated](../Images/B17765_10_34.png)'
- en: 'Figure 10.34: PowerShell Empire’s client menu'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.34：PowerShell Empire 客户端菜单
- en: 'The current Empire tool has around 393 built-in modules. The following table
    provides a list of commands that are crucial when using the Powershell Empire
    tool, since it is similar to Metasploit; however, these commands are used in their
    own particular way:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的 Empire 工具大约有 393 个内置模块。下表列出了在使用 PowerShell Empire 工具时至关重要的命令，因为它类似于 Metasploit，但这些命令以其独特的方式使用：
- en: '| **Command** | **Description** |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **描述** |'
- en: '| `agents` | Access a list of agents that are connected |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| `agents` | 访问连接的代理列表 |'
- en: '| `creds` | Add/display credentials to/from the database |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| `creds` | 向数据库添加/显示凭据 |'
- en: '| `exit` | Exit Empire |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| `exit` | 退出帝国 |'
- en: '| `help` | Display the help menu |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| `help` | 显示帮助菜单 |'
- en: '| `interact` | Interact with a particular agent |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| `interact` | 与特定代理互动 |'
- en: '| `list` | List active agents or listeners |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| `list` | 列出活动的代理或监听器 |'
- en: '| `listeners` | Interact with active listeners |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| `listeners` | 与活动监听器互动 |'
- en: '| `load` | Load Empire modules from a nonstandard folder |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| `load` | 从非标准文件夹加载帝国模块 |'
- en: '| `reload` | Reload one (or all) Empire modules |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: '| `reload` | 重新加载一个（或所有）帝国模块 |'
- en: '| `reset` | Reset a global option (for example, IP whitelists) |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
  zh: '| `reset` | 重置全局选项（例如，IP白名单） |'
- en: '| `searchmodule` | Search Empire module names/descriptions |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| `searchmodule` | 搜索帝国模块名称/描述 |'
- en: '| `set` | Set a global option (for example, IP whitelists) |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| `set` | 设置全局选项（例如，IP白名单） |'
- en: '| `show` | Show a global option (for example, IP whitelists) |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| `show` | 显示全局选项（例如，IP白名单） |'
- en: '| `usemodule` | Use an Empire module |'
  id: totrans-304
  prefs: []
  type: TYPE_TB
  zh: '| `usemodule` | 使用帝国模块 |'
- en: '| `usestager` | Use an Empire stager |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| `usestager` | 使用帝国阶段器 |'
- en: 'Table 10.1: PoweShell Empire commands'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '表 10.1: PowerShell 帝国命令'
- en: 'There are four important roles that the Empire tool consists of:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 帝国工具由四个重要角色组成：
- en: '**Listeners**: This is similar to the Meterpreter listener, waiting for the
    connection from the compromised systems. Listener management provides the interface
    to create listeners locally with different types—`dbx`, `http`, `http_com`, `http_foreign`,
    `http_hop`, and `meterpreter`. We will explore `http`.'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监听器**：这类似于 Meterpreter 监听器，等待来自被攻陷系统的连接。监听器管理提供了本地创建监听器的接口，支持不同类型—`dbx`、`http`、`http_com`、`http_foreign`、`http_hop`
    和 `meterpreter`。我们将探讨 `http`。'
- en: '**Stagers**: Stagers provide a list of modules for macOS (OS X), Windows, and
    other operating systems. These are DLLs, macros, one-liners, and others that can
    be utilized using an external device to perform more informed social engineering
    and physical console attacks.'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阶段器**：阶段器提供了适用于 macOS (OS X)、Windows 和其他操作系统的模块列表。这些包括 DLL 文件、宏、一行代码等，可以通过外部设备利用这些模块进行更具信息性的社会工程和物理控制台攻击。'
- en: '**Agents**: The agents are the zombies that connect to the listeners. All of
    the agents can be accessed by running the `agent` command, which will take us
    straight to the agents menu.'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代理**：代理是连接到监听器的僵尸。所有代理都可以通过运行 `agent` 命令来访问，这将直接带我们进入代理菜单。'
- en: '**Logging and downloads**: This section can only be accessed when a successful
    agent is connected to the listeners. Similar to Meterpreter, the Empire tool allows
    us to run `mimikatz` on the local machine via PowerShell and export the details
    to perform more focused attacks.'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志记录和下载**：只有在成功连接到监听器的代理后，才能访问此部分。与 Meterpreter 类似，帝国工具允许我们通过 PowerShell
    在本地机器上运行 `mimikatz` 并导出细节，以便执行更具针对性的攻击。'
- en: 'The first thing we must do is set up the local listeners. The `listeners` command
    will help us jump to the listener menu. If there are any active listeners, then
    those will be displayed. Use the `listener http` command to create a listener,
    as shown in *Figure 10.35*:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须做的第一件事是设置本地监听器。`listeners` 命令将帮助我们跳转到监听器菜单。如果有任何活动的监听器，它们将显示出来。使用 `listener
    http` 命令创建监听器，如 *图 10.35* 所示：
- en: '![Graphical user interface, text  Description automatically generated](../Images/B17765_10_35.png)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本 说明自动生成](../Images/B17765_10_35.png)'
- en: 'Figure 10.35: Different types of listeners'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '图 10.35: 不同类型的监听器'
- en: By running the following within the PowerShell Empire client terminal, you should
    set up the Empire listener.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PowerShell 帝国客户端终端中运行以下命令，你应该能够设置帝国监听器。
- en: '[PRE22]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Once the listeners have been selected, by default, port `80` is set. If you
    are running an HTTP service, you can change the port number by typing `set Port
    portnumber`. Always remember that all of the commands in the Empire tool are case-sensitive.
    You can utilize the tab feature, which will autocorrect the command and provide
    options. To get the stager, use the `usestager multi/launcher` and then set the
    `Listener` to `http`, as seen in *Figure 10.36*, and that’s it. When we run the
    `execute` command, we should have the PowerShell script that we can run on the
    target machines:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦选择了监听器，默认情况下，端口 `80` 被设置。如果你运行的是 HTTP 服务，可以通过输入 `set Port portnumber` 来更改端口号。请始终记住，Empire
    工具中的所有命令都是区分大小写的。你可以使用 Tab 键功能，它会自动更正命令并提供选项。要获取起始器，请使用 `usestager multi/launcher`，然后将
    `Listener` 设置为 `http`，如*图 10.36*所示，完成后即可。当我们运行 `execute` 命令时，应该会得到可以在目标机器上运行的
    PowerShell 脚本：
- en: '![Text  Description automatically generated](../Images/B17765_10_36.png)'
  id: totrans-318
  prefs: []
  type: TYPE_IMG
  zh: '![文本描述自动生成](../Images/B17765_10_36.png)'
- en: 'Figure 10.36: Successfully creating a payload using the stagers'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.36：成功使用起始器创建有效负载
- en: We have now explored the PowerShell Empire framework. We will be taking a deep
    dive into this tool in the coming chapters.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经探索了 PowerShell Empire 框架。在接下来的章节中，我们将深入了解这个工具。
- en: Summary
  id: totrans-321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we focused on the fundamentals of exploitation and the different
    tools that convert findings from reconnaissance into a defined action that establishes
    the right connection between the tester and the target.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们重点介绍了漏洞利用的基本原理以及将侦察结果转化为明确行动的不同工具，这些行动帮助建立测试者与目标之间正确的连接。
- en: Kali provides several tools to facilitate the development, selection, and activation
    of exploits, including the internal Exploit-DB as well as several frameworks that
    simplify the use and management of these exploits. We took a deep dive into the
    MSF and learned how to compile different types of files from Exploit-DB into a
    real exploit.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: Kali 提供了多种工具来促进漏洞利用的开发、选择和激活，包括内部的 Exploit-DB 以及多个简化漏洞利用使用和管理的框架。我们深入研究了 MSF，并学习了如何将
    Exploit-DB 中的不同类型文件编译成实际的漏洞利用。
- en: We also focused on how to develop Windows exploits by identifying different
    fuzzing techniques. We also loaded the shell code into the custom exploits. Additionally,
    we took a quick tour using the PowerShell Empire tool, which can be instrumental
    for pentesters once the exploitation phase is complete.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还关注了如何通过识别不同的模糊测试技术来开发 Windows 漏洞利用。我们还将 shell 代码加载到自定义漏洞中。此外，我们还快速浏览了 PowerShell
    Empire 工具，一旦漏洞利用阶段完成，它对于渗透测试人员来说非常有用。
- en: In the next chapter (*Chapter 11*, *Action on the Objective and Lateral Movement*),
    we will learn about the most important part of the attackers’ cyber kill chain
    as well as post-exploitation, privilege escalation, lateral movement in the network,
    compromising domain trusts, and port forwarding.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章（*第 11 章*，*目标行动与横向移动*）中，我们将学习攻击者网络杀伤链中最重要的部分，以及后期利用、权限提升、网络中的横向移动、域信任的妥协和端口转发。
