- en: Client-Side Exploitation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端利用
- en: We covered coding and performed penetration tests in numerous environments in
    the earlier chapters; we are now ready to introduce client-side exploitation.
    Throughout this section and a couple more, we will learn client-side exploitation
    in detail.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们涵盖了编码并在许多环境中执行了渗透测试；现在我们准备介绍客户端利用。在本节和接下来的几节中，我们将详细学习客户端利用。
- en: 'Throughout this chapter, we will focus on the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点关注以下内容：
- en: Attacking the target's browser
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 攻击目标的浏览器
- en: Sophisticated attack vectors to trick the client
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欺骗客户端的复杂攻击向量
- en: Attacking Android and using Kali NetHunter
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 攻击Android并使用Kali NetHunter
- en: Using Arduino for exploitation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Arduino进行利用
- en: Injecting payloads into various files
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将payload注入各种文件
- en: Client-side exploitation sometimes requires the victim to interact with malicious
    files, which makes its success dependable on the interaction. These interactions
    could be visiting a malicious URL or downloading and executing a file, which means
    we need the help of the victims to exploit their systems successfully. Therefore,
    the dependency on the victim is a critical factor in client-side exploitation.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端利用有时需要受害者与恶意文件进行交互，这使得其成功取决于交互。这些交互可能是访问恶意URL或下载并执行文件，这意味着我们需要受害者的帮助才能成功地利用他们的系统。因此，对受害者的依赖是客户端利用的关键因素。
- en: Client-side systems may run different applications. Applications such as a PDF
    reader, a word processor, a media player, and web browsers are the essential software
    components of a client's system. In this chapter, we will discover the various
    flaws in these applications that can lead to the entire system being compromised,
    allowing us to use the exploited system as a launch pad to test the whole of the
    internal network.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端系统可能运行不同的应用程序。PDF阅读器、文字处理器、媒体播放器和Web浏览器是客户端系统的基本软件组件。在本章中，我们将发现这些应用程序中的各种缺陷，这可能导致整个系统被攻破，从而使我们能够利用被攻破的系统作为测试整个内部网络的发射台。
- en: Let's get started with exploiting the client through numerous techniques, and
    analyze the factors that can cause success or failure while exploiting a client-side
    bug.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始利用多种技术攻击客户端，并分析可能导致成功或失败的因素，同时利用客户端漏洞。
- en: Exploiting browsers for fun and profit
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用浏览器进行娱乐和盈利
- en: Web browsers are used primarily for surfing the web; however, an outdated web
    browser can lead to the entire system being compromised. Clients may never use
    the preinstalled web browsers and instead choose one based on their preference;
    however, the default preinstalled web browser can still lead to various attacks
    on the system. Exploiting a browser by finding vulnerabilities in the browser
    components is known as **browser-based exploitation**.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Web浏览器主要用于浏览网页；然而，过时的Web浏览器可能导致整个系统被攻破。客户端可能永远不会使用预安装的Web浏览器，而是根据自己的喜好选择一个；然而，默认预安装的Web浏览器仍然可能导致对系统的各种攻击。通过发现浏览器组件中的漏洞来利用浏览器被称为**基于浏览器的利用**。
- en: For more information on Firefox vulnerabilities, refer to [https://www.cvedetails.com/product/3264/Mozilla-Firefox.html?vendor_id=452](https://www.cvedetails.com/product/3264/Mozilla-Firefox.html?vendor_id=452).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Firefox漏洞的更多信息，请参阅[https://www.cvedetails.com/product/3264/Mozilla-Firefox.html?vendor_id=452](https://www.cvedetails.com/product/3264/Mozilla-Firefox.html?vendor_id=452)。
- en: Refer to Internet Explorer vulnerabilities at [https://www.cvedetails.com/product/9900/Microsoft-Internet-Explorer.html?vendor_id=26](https://www.cvedetails.com/product/9900/Microsoft-Internet-Explorer.html?vendor_id=26).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 参考Internet Explorer漏洞[https://www.cvedetails.com/product/9900/Microsoft-Internet-Explorer.html?vendor_id=26](https://www.cvedetails.com/product/9900/Microsoft-Internet-Explorer.html?vendor_id=26)。
- en: The browser autopwn attack
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览器autopwn攻击
- en: Metasploit offers browser autopwn, a collection of various attack modules that
    aim to exploit the target's browser by triggering the relevant vulnerabilities.
    To understand the inner workings of this module, let's discuss the technology
    behind the attack.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit提供了浏览器autopwn，这是一组旨在通过触发相关漏洞来利用目标浏览器的各种攻击模块。为了了解这个模块的内部工作原理，让我们讨论一下攻击背后的技术。
- en: The technology behind the browser autopwn attack
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览器autopwn攻击背后的技术
- en: The autopwn refers to the automatic exploitation of the target. The autopwn
    module sets up most of the browser-based exploits in listening mode by automatically
    configuring them one after the other. On an incoming request from a particular
    browser, it launches the set of matching exploits. Therefore, irrespective of
    the browser a victim is using, if there are vulnerabilities in the browser, the
    autopwn script attacks it automatically with the matching exploit modules.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: autopwn指的是对目标的自动利用。autopwn模块通过自动配置它们一个接一个地将大多数基于浏览器的利用程序设置为监听模式。在特定浏览器发来的请求时，它会启动一组匹配的利用程序。因此，无论受害者使用的是哪种浏览器，如果浏览器中存在漏洞，autopwn脚本都会自动使用匹配的利用程序模块对其进行攻击。
- en: 'Let''s understand the workings of this attack vector in detail using the following
    diagram:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下图表详细了解这种攻击向量的工作原理：
- en: '![](img/af0e3d45-40f4-46b8-8943-71d8f3a0fe42.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af0e3d45-40f4-46b8-8943-71d8f3a0fe42.png)'
- en: In the preceding scenario, an exploit server base is up and running, with some
    browser-based exploits configured with their matching handlers. As soon as the
    victim's browser connects to the exploit server, the exploit server base checks
    for the type of browser, and tests it against the matching exploits. In the preceding
    diagram, we have Internet Explorer as the victim's browser. Therefore, exploits
    matching Internet Explorer are fired at the victim's browser. The succeeding exploits
    make a connection back to the handler, and the attacker gains shell or meterpreter
    access to the target.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的场景中，一个利用服务器基地正在运行，并配置了一些基于浏览器的利用程序及其匹配的处理程序。一旦受害者的浏览器连接到利用服务器，利用服务器基地会检查浏览器的类型，并将其与匹配的利用程序进行测试。在前面的图表中，我们有Internet
    Explorer作为受害者的浏览器。因此，与Internet Explorer匹配的利用程序将被发送到受害者的浏览器。随后的利用程序将与处理程序建立连接，攻击者将获得对目标的shell或meterpreter访问权限。
- en: Attacking browsers with Metasploit browser autopwn
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit浏览器autopwn攻击浏览器
- en: 'To conduct a browser exploitation attack, we will use the `browser_autopwn`
    module in Metasploit, as shown in the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行浏览器利用攻击，我们将使用Metasploit中的`browser_autopwn`模块，如下截图所示：
- en: '![](img/1898ad2e-6e22-423e-bf5e-92f8a0aa073b.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1898ad2e-6e22-423e-bf5e-92f8a0aa073b.png)'
- en: 'We can see we loaded the `browser_autopwn` module residing at `auxiliary/server/browser_autpown2`
    successfully in Metasploit. To launch the attack, we need to specify `LHOST`,
    `URIPATH`, and `SRVPORT`. `SRVPORT` is the port on which our exploit server base
    will run. It is recommended to use port `80` or `443`, since the addition of port
    numbers to the `URL` catch many eyes and looks fishy. `URIPATH` is the directory
    path for the various exploits, and should be kept in the root directory by specifying
    `URIPATH` as `/`. Let''s set all the required parameters and launch the module,
    as shown in the following screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，我们成功在Metasploit中加载了位于`auxiliary/server/browser_autpown2`的`browser_autopwn`模块。要发动攻击，我们需要指定`LHOST`、`URIPATH`和`SRVPORT`。`SRVPORT`是我们的利用服务器基础运行的端口。建议使用端口`80`或`443`，因为在`URL`中添加端口号会引起许多人的注意，看起来可疑。`URIPATH`是各种利用的目录路径，并且应通过将`URIPATH`指定为`/`来保持在根目录中。让我们设置所有必需的参数并启动模块，如下截图所示：
- en: '![](img/e91a437a-0af0-43ef-80a6-bfccc81dfb6e.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e91a437a-0af0-43ef-80a6-bfccc81dfb6e.png)'
- en: 'Starting the `browser_autopwn` module will set up browser exploits in listening
    mode, waiting for the incoming connections, as shown in the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 启动`browser_autopwn`模块将设置浏览器利用处于监听模式，等待传入连接，如下截图所示：
- en: '![](img/bab6c08e-2dc6-491a-8e26-bd9229dd9db5.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bab6c08e-2dc6-491a-8e26-bd9229dd9db5.png)'
- en: 'Any target connecting on port `80` of our system will get an arsenal of exploits
    thrown at it based on his browser. Let''s analyze how a victim connects to our
    malicious exploit server:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 任何连接到我们系统端口`80`的目标都将根据其浏览器获得一系列的利用。让我们分析一下受害者如何连接到我们的恶意利用服务器：
- en: '![](img/dc8b15eb-e65d-4635-9714-493896c05c78.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc8b15eb-e65d-4635-9714-493896c05c78.png)'
- en: 'We can see that as soon as a victim connects to our IP address, the `browser_autopwn`
    module responds with various exploits until it gains Meterpreter access, as shown
    in the following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，一旦受害者连接到我们的IP地址，`browser_autopwn`模块会以各种利用方式做出响应，直到获得Meterpreter访问，如下截图所示：
- en: '![](img/b0594259-ab91-4c3c-8095-61af4f4342f4.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b0594259-ab91-4c3c-8095-61af4f4342f4.png)'
- en: As we can see, the `browser_autopwn` module allows us to test and actively exploit
    the victim's browser for numerous vulnerabilities; however, client-side exploits
    may cause service interruptions. It is a good idea to acquire prior permission
    before conducting a client-side exploitation test. In the upcoming section, we
    will see how a module such as a `browser_autopwn` can be deadly against numerous
    targets.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，`browser_autopwn`模块允许我们测试和积极利用受害者浏览器的多个漏洞；然而，客户端利用可能会导致服务中断。在进行客户端利用测试之前，最好获得事先许可。在接下来的部分中，我们将看到像`browser_autopwn`这样的模块如何对多个目标造成致命打击。
- en: Compromising the clients of a website
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 危害网站客户端
- en: In this section, we will try to develop approaches using which we can convert
    common attacks into a deadly weapon of choice.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将尝试开发方法，通过这些方法可以将常见攻击转化为致命的选择武器。
- en: As demonstrated in the previous section, sending an IP address to the target
    can be catchy, and a victim may regret browsing the IP address you sent; however,
    if a domain address is sent to the victim instead of a bare IP address, the chances
    of evading the victim's eye becomes more probable, and the results are guaranteed.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一节所示，向目标发送IP地址可能会引起注意，受害者可能会后悔浏览您发送的IP地址；然而，如果向受害者发送的是域名地址而不是裸IP地址，则逃避受害者的注意的可能性更大，结果是有保证的。
- en: Injecting the malicious web scripts
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注入恶意Web脚本
- en: A vulnerable website can serve as a launch pad to the browser autopwn server.
    An attacker can embed a hidden iFrame into web pages of the vulnerable server,
    so that anyone visiting the server will face off against the browser autopwn attack.
    Hence, whenever a person visits the injected page, the browser autopwn exploit
    server tests their browser for vulnerabilities and, in most cases, exploits it
    as well.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有漏洞的网站可以作为浏览器autopwn服务器的发射台。攻击者可以将隐藏的iFrame嵌入到有漏洞服务器的网页中，这样任何访问服务器的人都将面对浏览器autopwn攻击。因此，每当有人访问被注入的页面时，浏览器autopwn利用服务器都会测试他们的浏览器是否存在漏洞，并且在大多数情况下也会利用它。
- en: Mass hacking users of a site can be achieved by using **iFrame injection**.
    Let's understand the anatomy of the attack in the next section.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**iFrame注入**可以实现对网站用户的大规模黑客攻击。让我们在下一节中了解攻击的解剖。
- en: Hacking the users of a website
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 黑客攻击网站用户
- en: 'Let''s understand how we can hack users of a website using browser exploits
    through the following diagram:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下图表了解如何使用浏览器利用来黑客攻击网站用户：
- en: '![](img/d47c58f9-d31a-467b-b2e0-d36c724afc31.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d47c58f9-d31a-467b-b2e0-d36c724afc31.png)'
- en: 'The preceding diagram makes things very clear. Let''s now find out how to do
    it. But remember, the most important requirement for this attack is access to
    a vulnerable server with appropriate permissions. Let''s understand more about
    injecting the malicious script through the following screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图表非常清晰。现在让我们找出如何做到这一点。但请记住，这种攻击最重要的要求是访问具有适当权限的有漏洞服务器。让我们通过以下截图更多地了解如何注入恶意脚本：
- en: '![](img/69db68ca-2c5b-42cb-bf8a-a419149329af.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/69db68ca-2c5b-42cb-bf8a-a419149329af.png)'
- en: 'We have an example website with a web application vulnerability that allows
    us to upload a PHP-based third-party web shell. To execute the attack, we need
    to add the following line to the `index.php` page, or any other page of our choice:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个示例网站，存在一个允许我们上传基于PHP的第三方Web shell的Web应用程序漏洞。要执行攻击，我们需要将以下行添加到`index.php`页面，或者我们选择的任何其他页面：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding line of code will load the malicious browser autopwn in the iFrame
    whenever a victim visits the website. Due to this code being in an `iframe` tag,
    it will include the browser autopwn automatically from the attacker's system.
    We need to save this file and allow the visitors to view the website and browse
    it.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码行将在受害者访问网站时在iFrame中加载恶意的浏览器autopwn。由于这段代码在一个`iframe`标签中，它将自动从攻击者的系统中包含浏览器autopwn。我们需要保存这个文件并允许访问者查看网站并浏览它。
- en: 'As soon as the victim browses to the infected website, browser autopwn will
    run on their browser automatically; however, make sure that the `browser_autopwn`
    module is running. If not, you can use the following commands:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦受害者浏览到被感染的网站，浏览器autopwn将自动在他们的浏览器上运行；但是，请确保`browser_autopwn`模块正在运行。如果没有，您可以使用以下命令：
- en: '![](img/d0a36848-5ab7-4e7c-a6a8-1685ca963f2d.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d0a36848-5ab7-4e7c-a6a8-1685ca963f2d.png)'
- en: 'If everything goes well, we will be able to get Meterpreter running on the
    target system. The whole idea is to use the target site to lure the maximum number
    of victims and gain access to their systems. This method is convenient while working
    on a white box test, where the users of an internal web server are the target.
    Let''s see what happens when the victim browses to the malicious website:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们将能够在目标系统上运行Meterpreter。整个想法是利用目标网站来诱使尽可能多的受害者，并获取对其系统的访问权限。这种方法在进行白盒测试时非常方便，其中内部Web服务器的用户是目标。让我们看看当受害者浏览到恶意网站时会发生什么：
- en: '![](img/871b6a25-7d7c-4dcf-accb-858c3528ace9.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/871b6a25-7d7c-4dcf-accb-858c3528ace9.png)'
- en: 'We can see that a call is made to the IP `192.168.10.107`, which is our browser
    autopwn server. Let''s see the view from the attacker''s side, as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到对IP `192.168.10.107`发起了调用，这是我们的浏览器autopwn服务器。让我们从攻击者的角度来看一下：
- en: '![](img/470284b3-7f5d-4d16-9853-8ab12baa9562.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/470284b3-7f5d-4d16-9853-8ab12baa9562.png)'
- en: We can see that exploitation is being carried out with ease. On successful exploitation,
    we will be presented with Meterpreter access, as demonstrated in the previous
    example.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到利用正在轻松进行。成功利用后，我们将获得Meterpreter访问，就像前面的例子中演示的那样。
- en: The autopwn with DNS spoofing and MITM attacks
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有DNS欺骗和MITM攻击的autopwn
- en: The primary motive behind all attacks on a victim's system is to gain access
    with minimal detection, and the lowest risk of catching the eye of the victim.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对受害者系统进行所有攻击的主要动机是以最小的检测和最低的被发现风险获得访问权限。
- en: Now, we have seen the traditional browser autopwn attack and its modification
    to hack into the website's target audience as well. Still, we have the constraint
    of sending the link to the victim somehow.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经看到了传统的浏览器autopwn攻击以及修改以侵入网站目标受众的方式。但是，我们仍然有以某种方式将链接发送给受害者的限制。
- en: Nevertheless, in this attack, we will conduct the same browser autopwn attack
    on the victim, but in a different way. In this case, we will not send any links
    to the victim. Instead, we will wait for them to browse to their favorite websites.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在这种攻击中，我们将以不同的方式对受害者进行相同的浏览器autopwn攻击。在这种情况下，我们不会向受害者发送任何链接。相反，我们将等待他们浏览他们喜欢的网站。
- en: This attack will work only in the LAN environment. This is because to execute
    this attack we need to perform ARP spoofing, which works on layer 2, and works
    just under the same broadcast domain; however, if we can modify the `hosts` file
    of the remote victim somehow, we can also perform this over WAN, and this is called
    a **Pharming attack**.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这种攻击只能在局域网环境中工作。这是因为要执行这种攻击，我们需要进行ARP欺骗，它在第2层上工作，并且只在相同的广播域下工作；然而，如果我们可以以某种方式修改远程受害者的`hosts`文件，我们也可以在广域网上执行这种攻击，这被称为**Pharming攻击**。
- en: Tricking victims with DNS hijacking
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用DNS劫持欺骗受害者
- en: Let's get started. Here, we will conduct an ARP poisoning attack against the
    victim, and spoof the DNS queries. Therefore, if the victim tries to open a standard
    website, such as [http://google.com](http://google.com), which is most commonly
    browsed to, they will get the browser autopwn service in return, which will result
    in their system getting attacked by the browser autopwn server.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。在这里，我们将对受害者进行ARP毒化攻击，并欺骗DNS查询。因此，如果受害者尝试打开一个标准网站，比如[http://google.com](http://google.com)，这是最常浏览的网站，他们将得到浏览器autopwn服务作为回报，这将导致他们的系统受到浏览器autopwn服务器的攻击。
- en: 'We will first create a list of entries for poisoning the DNS, so that whenever
    a victim tries to open a domain, the name of the domain points to the IP address
    of our browser autopwn service, instead of [http://www.google.com](http://www.google.com).
    The spoofed entries for the DNS reside in the following file:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将创建一个用于毒化DNS的条目列表，这样每当受害者尝试打开一个域时，域的名称将指向我们的浏览器autopwn服务的IP地址，而不是[http://www.google.com](http://www.google.com)。DNS的欺骗条目存储在以下文件中：
- en: '![](img/ac92e6ad-e001-436e-94f3-5cddee1b7d79.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac92e6ad-e001-436e-94f3-5cddee1b7d79.png)'
- en: 'In this example, we will use one of the most popular sets of ARP poisoning
    tools, `ettercap`. First, we will search the file and create a fake DNS entry
    in it. This is important because when a victim tries to open the website instead
    of its original IP, they will get our custom-defined IP address. To do this, we
    need to modify the entries in the `etter.dns` file, as shown in the following
    screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用最流行的ARP毒化工具集之一，`ettercap`。首先，我们将搜索文件并在其中创建一个虚假的DNS条目。这很重要，因为当受害者尝试打开网站时，他们将得到我们自定义的IP地址，而不是原始IP。为了做到这一点，我们需要修改`etter.dns`文件中的条目，如下面的截图所示：
- en: '![](img/1f3fe98c-81c5-4768-bf75-35390c3901d6.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f3fe98c-81c5-4768-bf75-35390c3901d6.png)'
- en: 'We need to make the following changes in this section:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在这一部分做以下更改：
- en: '![](img/38c5267b-3a0e-4116-b08b-375adb388762.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/38c5267b-3a0e-4116-b08b-375adb388762.png)'
- en: 'This entry will send the IP address of the attacker''s machine whenever a victim
    requests [http://google.com](http://google.com). After creating an entry, save
    this file and open `ettercap`, using the command shown in the following screenshot:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个条目将在受害者请求[http://google.com](http://google.com)时发送攻击者机器的IP地址。创建条目后，保存该文件并打开`ettercap`，使用下面截图中显示的命令：
- en: '![](img/280ce278-5fe7-4895-b530-aeb727208753.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/280ce278-5fe7-4895-b530-aeb727208753.png)'
- en: 'The preceding command will launch Ettercap in graphical mode, as shown in the
    following screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将以图形模式启动Ettercap，如下面的屏幕截图所示：
- en: '![](img/fcba4a43-ca9f-48bf-9cd7-9168eaf3949f.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fcba4a43-ca9f-48bf-9cd7-9168eaf3949f.png)'
- en: 'We need to select the Unified sniffing... option from the Sniff tab and choose
    the interface as the default interface, which is eth0, as shown in the following
    screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要从“嗅探”选项卡中选择“统一嗅探…”选项，并选择默认接口，即eth0，如下面的屏幕截图所示：
- en: '![](img/eaebae02-2630-4ab9-8a74-46bbe5743ad9.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eaebae02-2630-4ab9-8a74-46bbe5743ad9.png)'
- en: 'The next step is to scan the range of the network to identify all the hosts
    that are present on the network, which includes the victim and the router, as
    shown in the following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是扫描网络范围，以识别网络上存在的所有主机，包括受害者和路由器，如下面的屏幕截图所示：
- en: '![](img/7c1b8166-b56a-4b7a-a1db-c1b067b8e300.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7c1b8166-b56a-4b7a-a1db-c1b067b8e300.png)'
- en: 'Depending on the range of addresses, all the scanned hosts are filtered upon
    their existence, and all existing hosts on the network are added to the host list,
    as shown in the following screenshot:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 根据地址范围，所有扫描的主机都根据其存在进行过滤，并将网络上所有现有的主机添加到主机列表中，如下面的屏幕截图所示：
- en: '![](img/bbabecee-d538-4515-88de-29f649a5fbc9.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bbabecee-d538-4515-88de-29f649a5fbc9.png)'
- en: 'To open the host list, we need to navigate to the Hosts tab and select Host
    List, as shown in the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开主机列表，我们需要导航到“主机”选项卡并选择“主机列表”，如下面的屏幕截图所示：
- en: '![](img/b64c9bc6-87dd-47df-84b0-760efffb7003.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b64c9bc6-87dd-47df-84b0-760efffb7003.png)'
- en: The next step is to add the router address to **Target 2** and the victim to
    **Target 1**. We have used the router as **Target 2** and the victim as **Target
    1**, because we need to intercept information coming from the victim and going
    to the router.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将路由器地址添加到**目标2**，将受害者添加到**目标1**。我们将路由器用作**目标2**，将受害者用作**目标1**，因为我们需要拦截来自受害者并发送到路由器的信息。
- en: 'The next step is to browse to the Mitm tab and select ARP Poisoning, as shown
    in the following screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是浏览到Mitm选项卡并选择ARP毒化，如下面的屏幕截图所示：
- en: '![](img/ba297a6b-0c36-4488-9df6-0720dfbd8ffc.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba297a6b-0c36-4488-9df6-0720dfbd8ffc.png)'
- en: 'Next, click on OK and proceed to the next step, which is to browse to the Start
    tab and choose Start Sniffing. Clicking on the Start Sniffing option will notify
    us with a message saying `Starting Unified sniffing...`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，点击“确定”并继续下一步，即浏览到“开始”选项卡并选择“开始嗅探”。点击“开始嗅探”选项将通知我们一个消息，显示“开始统一嗅探…”：
- en: '![](img/c114c818-adfe-4b05-8bc2-e1a4f53a30f1.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c114c818-adfe-4b05-8bc2-e1a4f53a30f1.png)'
- en: 'The next step is to activate the DNS spoofing plugin from the Plugins tab,choosing
    Manage the plugins, as shown in the following screenshot:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是从“插件”选项卡中激活DNS欺骗插件，选择“管理插件”，如下面的屏幕截图所示：
- en: '![](img/2a1de148-5074-420b-bf44-e7b8e73b31c8.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a1de148-5074-420b-bf44-e7b8e73b31c8.png)'
- en: 'Double-click on DNS spoof plug-in to activate DNS spoofing. Now, what happens
    after activating this plugin is that it will start sending the fake DNS entries
    from the `etter.dns` file that we modified previously. Therefore, whenever a victim
    requests a particular website, the fraudulent DNS entry from the `etter.dns` file
    returns instead of the website''s original IP. This phony entry is the IP address
    of our browser autopwn service. Therefore, instead of going to the original website,
    a victim is redirected to the browser autopwn service, where their browser will
    be compromised:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 双击DNS欺骗插件以激活DNS欺骗。激活此插件后会发生的情况是，它将开始从我们之前修改的`etter.dns`文件中发送虚假的DNS条目。因此，每当受害者请求特定网站时，来自`etter.dns`文件的欺骗性DNS条目将返回，而不是网站的原始IP。这个虚假的条目是我们浏览器autopwn服务的IP地址。因此，受害者不会进入原始网站，而是被重定向到浏览器autopwn服务，从而使他们的浏览器被攻破：
- en: '![](img/8934ff24-fe87-4ac6-a09a-502c28151de8.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8934ff24-fe87-4ac6-a09a-502c28151de8.png)'
- en: 'Let''s also start our malicious `browser_autopwn` service on port `80`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们还在端口`80`上启动我们的恶意`browser_autopwn`服务：
- en: '![](img/1d65b390-e000-4596-b44d-ce92de05b118.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1d65b390-e000-4596-b44d-ce92de05b118.png)'
- en: 'Now, let''s see what happens when a victim tries to open [http://google.com/](http://google.com/):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看当受害者尝试打开[http://google.com/](http://google.com/)时会发生什么：
- en: '![](img/923abff6-f76b-4fe2-b0e2-5a78860e8ac8.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/923abff6-f76b-4fe2-b0e2-5a78860e8ac8.png)'
- en: 'Let''s also see if we got something interesting on the attacker side, or not:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也看看攻击者端是否有什么有趣的东西，或者没有：
- en: '![](img/52c01a0b-36e2-42a0-9603-4b6ebc8f9648.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52c01a0b-36e2-42a0-9603-4b6ebc8f9648.png)'
- en: 'Amazing! We opened Meterpreter in the background, which concludes that our
    attack has been successful, without sending any links to the victim. The advantage
    of this attack is that we never posted any links to the victim, since we poisoned
    the DNS entries on the local network; however, to execute this attack on WAN networks,
    we need to modify the host file of the victim, so that whenever a request to a
    specific URL is made, an infected entry in the host file redirects it to our malicious
    autopwn server, as shown in the following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们在后台打开了Meterpreter，这表明我们的攻击已经成功，而不需要向受害者发送任何链接。这种攻击的优势在于我们从未向受害者发布任何链接，因为我们在本地网络上毒害了DNS条目；然而，要在WAN网络上执行这种攻击，我们需要修改受害者的主机文件，这样每当对特定URL的请求被发出时，主机文件中的受感染条目将把它重定向到我们的恶意autopwn服务器，如下面的屏幕截图所示：
- en: '![](img/95c5e863-7d54-4cc0-bd80-45bd7041b3c3.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/95c5e863-7d54-4cc0-bd80-45bd7041b3c3.png)'
- en: So, many other techniques can be reinvented using a variety of attacks supported
    in Metasploit.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，许多其他技术可以使用Metasploit中支持的各种攻击重新发明。
- en: Using Kali NetHunter with browser exploits
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Kali NetHunter进行浏览器漏洞利用
- en: 'We saw how we could spoof the DNS queries and use it against the target on
    the same network. We can perform a similar yet hassle-free attack with the NetHunter
    Android device as well. To evade the eyes of the victim, we won''t use any specific
    website like Google, as we did in the previous demonstration. In this attack type,
    we will inject all the sites a target is browsing using a script injection attack
    through the **cSploit** tool in Kali NetHunter. So, let''s browse through cSploit
    as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了如何欺骗DNS查询并在同一网络上利用它对目标进行攻击。我们也可以使用NetHunter Android设备执行类似但无麻烦的攻击。为了避开受害者的眼睛，我们不会像在之前的演示中那样使用特定的网站，比如Google。在这种攻击类型中，我们将使用Kali
    NetHunter中的**cSploit**工具通过脚本注入攻击注入目标正在浏览的所有网站。因此，让我们通过cSploit进行浏览：
- en: '![](img/a219f45f-6784-487c-82e1-7eb195fb3e0b.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a219f45f-6784-487c-82e1-7eb195fb3e0b.png)'
- en: 'We assume that our target is `DESKTOP-PESQ21S` clicking on it will open a submenu
    containing all the options listed:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设我们的目标是`DESKTOP-PESQ21S`，点击它将打开一个包含所有列出选项的子菜单：
- en: '![](img/28e22458-77d1-44d4-b0d3-a592c98d11fc.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/28e22458-77d1-44d4-b0d3-a592c98d11fc.png)'
- en: 'Let''s choose MITM, followed by Script Injection and CUSTOM CODE, which will
    result in the following screen:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们选择MITM，然后是脚本注入和自定义代码，结果将是以下屏幕：
- en: '![](img/b91ce379-7a05-41a9-9f34-965a27679df8.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b91ce379-7a05-41a9-9f34-965a27679df8.png)'
- en: 'We will use a custom script attack and the default script to get started. Now,
    what this will do is that it will inject this script into all the web pages being
    browsed by the target. Let''s press OK to launch the attack. Once the target opens
    a new website, the victim will be presented with the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用自定义脚本攻击和默认脚本来开始。现在，这将会将此脚本注入到目标正在浏览的所有网页中。让我们按“确定”来启动攻击。一旦目标打开新网站，受害者将看到以下内容：
- en: '![](img/71587fdc-23ca-4556-92d0-1e7e77b4d3cc.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/71587fdc-23ca-4556-92d0-1e7e77b4d3cc.png)'
- en: 'We can see that our attack succeeded flawlessly. We can now create some JavaScript
    that can load the browser autopwn service. I am intentionally leaving the JavaScript
    exercise for you to complete, so that while creating the script, you can research
    more techniques such as a JavaScript-based cookie logger; however, on running
    the JavaScript, which will load the browser autopwn service in the background,
    we will have the following output:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们的攻击完美地成功了。我们现在可以创建一些JavaScript，用于加载浏览器的autopwn服务。我故意留下JavaScript练习给你完成，这样在创建脚本时，你可以研究更多技术，比如基于JavaScript的cookie记录器；然而，运行JavaScript后，将在后台加载浏览器的autopwn服务，我们将得到以下输出：
- en: '![](img/93235454-fb60-409a-bedd-96f0d8188d91.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/93235454-fb60-409a-bedd-96f0d8188d91.png)'
- en: 'Amazing, right? NetHunter and cSploit are the game changers. Nevertheless,
    if you somehow are unable to create JavaScript, you can redirect the target using
    the Redirect option, as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 太神奇了，对吧？ NetHunter和cSploit是改变游戏规则的。然而，如果你不知何故无法创建JavaScript，你可以使用重定向选项来重定向目标，如下所示：
- en: '![](img/1a27093b-9793-4e0a-a676-661c7cdc5b15.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a27093b-9793-4e0a-a676-661c7cdc5b15.png)'
- en: Clicking the OK button will force all the traffic to the preceding address on
    port `8080` which is nothing but the address of our autopwn server.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“确定”按钮将强制所有流量转到端口`8080`上的前一个地址，这只是我们的autopwn服务器的地址。
- en: Metasploit and Arduino - the deadly combination
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metasploit和Arduino - 致命的组合
- en: 'Arduino-based microcontroller boards are tiny and unusual pieces of hardware
    that can act as lethal weapons when it comes to penetration testing. A few of
    the Arduino boards support keyboard and mouse libraries, which means that they
    can serve as HID devices:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 基于Arduino的微控制器板是微小而不寻常的硬件，当涉及到渗透测试时，它们可以充当致命武器。一些Arduino板支持键盘和鼠标库，这意味着它们可以作为HID设备：
- en: '![](img/805955d7-654d-41b1-a4c5-153611bc715b.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/805955d7-654d-41b1-a4c5-153611bc715b.jpg)'
- en: Therefore, these little Arduino boards can stealthily perform human actions
    such as typing keys, moving and clicking with a mouse, and many other things.
    In this section, we will emulate an Arduino Pro Micro board as a keyboard to download
    and execute our malicious payload from the remote site; however, these little
    boards do not have enough memory to hold the payload within their memory, so a
    download is required.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这些小型Arduino板可以偷偷地执行诸如键盘输入、鼠标移动和点击等人类动作，以及许多其他操作。在本节中，我们将模拟Arduino Pro Micro板作为键盘，从远程站点下载并执行我们的恶意载荷；然而，这些小板没有足够的内存来保存载荷，因此需要下载。
- en: For more on exploitation using HID devices, refer to USB Rubber Ducky, or Teensy.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 有关使用HID设备进行利用的更多信息，请参阅USB Rubber Ducky或Teensy。
- en: The **Arduino Pro Micro** costs less than $4 on popular shopping sites such
    as [https://www.aliexpress.com/](https://www.aliexpress.com/) and many others.
    Therefore, it is much cheaper to use Arduino Pro Micro rather than Teensy and
    USB Rubber Ducky.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**Arduino Pro Micro**在诸如[https://www.aliexpress.com/](https://www.aliexpress.com/)等知名购物网站上的价格不到4美元。因此，使用Arduino
    Pro Micro比Teensy和USB Rubber Ducky要便宜得多。'
- en: It is effortless to configure Arduino using its compiler software. Readers who
    are well versed in programming concepts will find this exercise very easy.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用其编译器软件配置Arduino非常容易。精通编程概念的读者会发现这个练习非常容易。
- en: Refer to [https://www.arduino.cc/en/Guide/Windows](https://www.arduino.cc/en/Guide/Windows) for
    more on setting up and getting started with Arduino.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 有关设置和开始使用Arduino的更多信息，请参阅[https://www.arduino.cc/en/Guide/Windows](https://www.arduino.cc/en/Guide/Windows)。
- en: 'Let''s see what code we need to burn on the Arduino chip:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们需要在Arduino芯片上烧录的代码：
- en: '[PRE1]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We have a function called `type` that takes two arguments, which are the name
    of the key to press and release, which determines if we need to release a particular
    key. The next function is `print`, which overwrites the default `print` function
    by outputting text directly on the keyboard press function. Arduino has mainly
    two functions, which are `loop` and `setup`. Since we only require our payload
    to download and execute once, we will keep our code in the `setup` function. The
    `Loop` function is required when we need to repeat a block of instructions. The
    `delay` function is equivalent to the `sleep` function that halts the program
    for a number of milliseconds. `type(KEY_LEFT_GUI, false);` will press the left
    Windows key on the target, and since we need to keep it pressed, we will pass
    `false` as the release parameter. Next, in the same way, we pass the `d` key.
    Now, we have two keys pressed, which are Windows + *D* (the shortcut to show the
    desktop). As soon as we provide `Keyboard.releaseAll();`, the `Windows+d` command
    is pushed to execute on the target, which will minimize everything from the desktop.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个名为`type`的函数，它接受两个参数，即要按下和释放的键的名称，这决定了我们是否需要释放特定的键。下一个函数是`print`，它通过直接在键盘按下函数上输出文本来覆盖默认的`print`函数。Arduino主要有两个函数，即`loop`和`setup`。由于我们只需要我们的payload下载和执行一次，所以我们将代码放在`setup`函数中。当我们需要重复一组指令时，需要`Loop`函数。`delay`函数相当于`sleep`函数，它暂停程序一定的毫秒数。`type(KEY_LEFT_GUI,
    false);`将按下目标上的左Windows键，由于我们需要保持按下，所以我们将`false`作为释放参数传递。接下来，以同样的方式，我们传递`d`键。现在，我们按下了两个键，即Windows
    + *D*（显示桌面的快捷键）。一旦我们提供`Keyboard.releaseAll();`，`Windows+d`命令就会被推送到目标上执行，这将最小化桌面上的所有内容。
- en: Find out more about Arduino keyboard libraries at [https://www.arduino.cc/en/Reference/KeyboardModifiers](https://www.arduino.cc/en/Reference/KeyboardModifiers).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://www.arduino.cc/en/Reference/KeyboardModifiers](https://www.arduino.cc/en/Reference/KeyboardModifiers)了解更多关于Arduino键盘库的信息。
- en: 'Similarly, we provide the next combination to show the run dialog box. Next,
    we print the PowerShell command in the run dialog box, which will download our
    payload from the remote site, which is `192.168.10.107/pay2.exe`, to the `Temp`
    directory, and will execute it from there. Providing the command, we need to press
    *Enter* to run the command. We can do this by passing `KEY_RETURN` as the key
    value. Let''s see how we write to the Arduino board:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们提供下一个组合来显示运行对话框。接下来，我们在运行对话框中打印PowerShell命令，该命令将从远程站点`192.168.10.107/pay2.exe`下载我们的payload到`Temp`目录，并将其从那里执行。提供命令后，我们需要按*Enter*来运行命令。我们可以通过将`KEY_RETURN`作为键值来实现这一点。让我们看看如何向Arduino板写入：
- en: '![](img/60db5ac4-e456-44a9-be61-089f6f46890f.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/60db5ac4-e456-44a9-be61-089f6f46890f.png)'
- en: 'We can see we have to choose our board type by browsing to Tools menu, as shown
    in the preceding screenshot. Next, we need to select the communication port for
    the board:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们需要通过浏览Tools菜单来选择我们的板类型，如前面的截图所示。接下来，我们需要为板选择通信端口：
- en: '![](img/48473637-2cad-4666-a1bd-e0317a13d2e6.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/48473637-2cad-4666-a1bd-e0317a13d2e6.png)'
- en: 'Next, we need to write the program to the board by pressing the -> icon:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要通过按->图标将程序写入板：
- en: '![](img/0b48c16d-a8e2-4b7a-991c-88cebff09851.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b48c16d-a8e2-4b7a-991c-88cebff09851.png)'
- en: Our Arduino is now ready to be plugged into the victim's system. The good news
    is that it emulates a keyboard. Therefore, you do not have to worry about detection;
    however, the payload needs to be obfuscated well enough that it evades AV detection.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Arduino现在已经准备好插入受害者的系统。好消息是它模拟键盘。因此，您不必担心被检测到；但是，payload需要被混淆得足够好，以避开杀毒软件的检测。
- en: 'Plug in the device like so:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样插入设备：
- en: '![](img/5e5af455-79e3-4533-af20-750fcbbf1590.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e5af455-79e3-4533-af20-750fcbbf1590.jpg)'
- en: 'As soon as we plug in the device, within a few milliseconds, our payload is
    downloaded, executes on the target system, and provides us with the following
    information:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们插入设备，几毫秒内，我们的payload就会被下载，在目标系统上执行，并为我们提供以下信息：
- en: '![](img/3a9f2dae-4f3e-49d8-8cf4-57e79493cbfb.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a9f2dae-4f3e-49d8-8cf4-57e79493cbfb.png)'
- en: 'Let''s have a look at how we generated the payload:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看我们如何生成payload：
- en: '![](img/e3acb414-54c6-428e-84ee-ecc40da7ce96.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e3acb414-54c6-428e-84ee-ecc40da7ce96.png)'
- en: 'We can see we created a simple x64 Meterpreter payload for Windows, which will
    connect back to port `5555`. We saved the executable directly to the Apache folder,
    and initiated Apache as shown in the preceding screenshot. Next, we merely started
    an exploit handler that will listen for an incoming connection on port `5555`,
    as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们为Windows创建了一个简单的x64 Meterpreter payload，它将连接到端口`5555`。我们将可执行文件直接保存到Apache文件夹，并按照前面的截图启动了Apache。接下来，我们只是启动了一个利用处理程序，它将监听端口`5555`上的传入连接，如下所示：
- en: '![](img/9047da23-c2d0-4452-ac55-63c27bf4cfa2.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9047da23-c2d0-4452-ac55-63c27bf4cfa2.png)'
- en: We saw a very new attack here. Using a cheap microcontroller, we were able to
    gain access to a Windows 10 system. Arduino is fun to play with, and I would recommend
    further reading on Arduino, USB Rubber Ducky, Teensy, and Kali NetHunter. Kali
    NetHunter can emulate the same attack using any Android phone.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里看到了一个非常新的攻击。使用廉价的微控制器，我们能够访问Windows 10系统。Arduino很有趣，我建议进一步阅读有关Arduino、USB
    Rubber Ducky、Teensy和Kali NetHunter的信息。Kali NetHunter可以使用任何Android手机模拟相同的攻击。
- en: For more on Teensy, go to [https://www.pjrc.com/teensy/](https://www.pjrc.com/teensy/).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Teensy的更多信息，请访问[https://www.pjrc.com/teensy/](https://www.pjrc.com/teensy/)。
- en: For more on USB Rubber Ducky, go to [http://hakshop.myshopify.com/products/usb-rubber-ducky-deluxe](http://hakshop.myshopify.com/products/usb-rubber-ducky-deluxe).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 有关USB Rubber Ducky的更多信息，请访问[http://hakshop.myshopify.com/products/usb-rubber-ducky-deluxe](http://hakshop.myshopify.com/products/usb-rubber-ducky-deluxe)。
- en: File format-based exploitation
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于文件格式的利用
- en: We will be covering various attacks on the victim using malicious files in this
    section. Whenever these malicious files run, Meterpreter or shell access is provided
    to the target system. In the next section, we will cover exploitation using malicious
    documents and PDF files.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将涵盖使用恶意文件对受害者进行各种攻击。每当这些恶意文件运行时，Meterpreter或shell访问将提供给目标系统。在下一节中，我们将介绍使用恶意文档和PDF文件进行利用。
- en: PDF-based exploits
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于PDF的漏洞利用
- en: 'PDF file format-based exploits are those that trigger vulnerabilities in various
    PDF readers and parsers, which are made to execute the payload carrying PDF files,
    presenting the attacker with complete access to the target system in the form
    of a Meterpreter shell or a command shell; however, before getting into the technique,
    let''s see what vulnerability we are targeting, and what the environment details
    are:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 基于PDF文件格式的利用是触发各种PDF阅读器和解析器中的漏洞，这些漏洞被设计为执行携带PDF文件的有效负载，向攻击者提供对目标系统的完全访问，以Meterpreter
    shell或命令shell的形式；然而，在进入技术之前，让我们看看我们正在针对什么漏洞，以及环境细节是什么：
- en: '| **Test cases** | **Description** |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| **测试案例** | **描述** |'
- en: '| Vulnerability | This module exploits an unsafe JavaScript API implemented
    in Nitro and Nitro Pro PDF Reader version 11\. The `saveAs()` Javascript API function
    allows for writing arbitrary files to the filesystem. Additionally, the `launchURL()`
    function allows an attacker to execute local files on the filesystem, and bypass
    the security dialog. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| 漏洞 | 该模块利用了Nitro和Nitro Pro PDF Reader版本11中实现的不安全的JavaScript API。`saveAs()`
    Javascript API函数允许将任意文件写入文件系统。此外，`launchURL()`函数允许攻击者执行文件系统上的本地文件，并绕过安全对话框。 |'
- en: '| Exploited on the operating system | Windows 10 |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| 在操作系统上利用 | Windows 10 |'
- en: '| Software version | Nitro Pro 11.0.3.173 |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| 软件版本 | Nitro Pro 11.0.3.173 |'
- en: '| CVE details | [https://www.cvedetails.com/cve/CVE-2017-7442/](https://www.cvedetails.com/cve/CVE-2017-7442/)
    |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| CVE细节 | [https://www.cvedetails.com/cve/CVE-2017-7442/](https://www.cvedetails.com/cve/CVE-2017-7442/)
    |'
- en: '| Exploit details | `exploit/windows/fileformat/nitro_reader_jsapi` |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| 利用细节 | `exploit/windows/fileformat/nitro_reader_jsapi` |'
- en: 'To exploit the vulnerability, we will create a PDF file and send it to the
    victim. When the victim tries to open our malicious PDF file, we will be able
    to get the Meterpreter shell or the command shell based on the payload used. Let''s
    take a step further, and try to build the malicious PDF file:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 为了利用这个漏洞，我们将创建一个PDF文件并发送给受害者。当受害者尝试打开我们的恶意PDF文件时，我们将能够获得Meterpreter shell或基于使用的有效负载的命令shell。让我们进一步，尝试构建恶意的PDF文件：
- en: '![](img/f3020904-f84d-48b1-b77f-8769dde6541a.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f3020904-f84d-48b1-b77f-8769dde6541a.png)'
- en: 'We will need to set `LHOST` to our IP address, and the `LPORT` and `SRVPORT`
    of our choice. For demonstration purposes, we will choose to leave the port set
    default to `8080` and `LPORT` to `4444`. Let''s run the module as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将`LHOST`设置为我们的IP地址，并选择`LPORT`和`SRVPORT`。出于演示目的，我们将选择将端口设置为默认的`8080`，`LPORT`设置为`4444`。让我们按照以下方式运行模块：
- en: '![](img/505520d9-05a4-409e-aaad-d4c2ffde20ac.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/505520d9-05a4-409e-aaad-d4c2ffde20ac.png)'
- en: 'We need to send the `msf.pdf` file to the victim through one of many means,
    such as uploading the file and sending the link to the victim, dropping the file
    in a USB stick, or maybe sending a compressed ZIP file format through an email;
    however, for demonstration purposes, we have hosted the file on our Apache server.
    Once the victim downloads and executes the file, they will see something similar
    to the following screen:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要通过多种方式之一向受害者发送`msf.pdf`文件，例如上传文件并将链接发送给受害者，将文件放入USB存储设备中，或者通过电子邮件发送压缩的ZIP文件格式；然而，出于演示目的，我们已经将文件托管在我们的Apache服务器上。一旦受害者下载并执行文件，他们将看到类似于以下屏幕的内容：
- en: '![](img/1deb1462-865f-4d77-98af-ae64aa9b6c63.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1deb1462-865f-4d77-98af-ae64aa9b6c63.png)'
- en: 'Within a fraction of a second, the overlayed window will disappear, and will
    result in a successful Meterpreter shell, as shown in the following screenshot:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在一小部分时间内，覆盖的窗口将消失，并将导致成功的Meterpreter shell，如下面的屏幕截图所示：
- en: '![](img/5ea1162a-a9e8-4015-a241-b6386f513749.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ea1162a-a9e8-4015-a241-b6386f513749.png)'
- en: Word-based exploits
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于Word的漏洞利用
- en: 'Word-based exploits focus on various file formats that we can load into Microsoft
    Word; however, a few file formats execute malicious code, and can let the attacker
    gain access to the target system. We can take advantage of Word-based vulnerabilities
    in the same way as we did for PDF files. Let''s quickly see some basic facts related
    to this vulnerability:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 基于Word的漏洞利用侧重于我们可以加载到Microsoft Word中的各种文件格式；然而，一些文件格式执行恶意代码，并可以让攻击者访问目标系统。我们可以像对待PDF文件一样利用基于Word的漏洞。让我们快速看一些与这个漏洞相关的基本事实：
- en: '| **Test cases** | **Description** |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| **测试案例** | **描述** |'
- en: '| --- | --- |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Vulnerability | This module creates a malicious RTF file which, when opened
    in vulnerable versions of Microsoft Word, will lead to code execution. The flaw
    exists in how an **olelink** object can make an HTTP(s) request and execute HTA
    code in response. |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| 漏洞 | 该模块创建一个恶意的RTF文件，当在易受攻击的Microsoft Word版本中打开时，将导致代码执行。缺陷存在于**olelink**对象如何发出HTTP(s)请求并执行HTA代码的方式。
    |'
- en: '| Exploited on the operating system | Windows 7 32-bit |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| 在操作系统上利用 | Windows 7 32位 |'
- en: '| Software version in our environment | Microsoft Word 2013 |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| 我们环境中的软件版本 | Microsoft Word 2013 |'
- en: '| CVE details | [https://www.cvedetails.com/cve/cve-2017-0199](https://www.cvedetails.com/cve/cve-2017-0199)
    |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| CVE细节 | [https://www.cvedetails.com/cve/cve-2017-0199](https://www.cvedetails.com/cve/cve-2017-0199)
    |'
- en: '| Exploit details | `exploit/windows/fileformat/office_word_hta` |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| 利用细节 | `exploit/windows/fileformat/office_word_hta` |'
- en: 'Let''s try gaining access to the vulnerable system with the use of this vulnerability.
    So, let''s quickly launch Metasploit and create the file, as demonstrated in the
    following screenshot:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试利用这个漏洞来访问易受攻击的系统。因此，让我们快速启动Metasploit并创建文件，如下面的屏幕截图所示：
- en: '![](img/4c8845b2-71db-4f51-9e19-10f9d2e3e99d.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4c8845b2-71db-4f51-9e19-10f9d2e3e99d.png)'
- en: 'Let''s set the `FILENAME` and `SRVHOST` parameters to `Report.doc` and our
    IP address respectively, as shown in the following screenshot:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将`FILENAME`和`SRVHOST`参数分别设置为`Report.doc`和我们的IP地址，如下图所示：
- en: '![](img/0698f567-a9c4-454b-a423-7f54b66e54ac.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0698f567-a9c4-454b-a423-7f54b66e54ac.png)'
- en: 'The generated file is stored in the `/root/.msf4/local/Report.doc` path. Let''s
    move this file to our Apache `htdocs` directory:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的文件存储在`/root/.msf4/local/Report.doc`路径下。让我们将这个文件移动到我们的Apache `htdocs`目录：
- en: '![](img/ce9289e2-89a4-4269-aa05-c9628e20aa43.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ce9289e2-89a4-4269-aa05-c9628e20aa43.png)'
- en: 'We need to send the `Report.doc` file to the victim through one of many means,
    such as uploading the file and sending the link to the victim, dropping the file
    in a USB stick, or maybe sending a compressed ZIP file format through an email;
    however, for demonstration purposes, we have hosted the file on our Apache server.
    Let''s download it on the victim machine as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要通过多种方式之一将`Report.doc`文件发送给受害者，例如上传文件并将链接发送给受害者，将文件放入USB存储设备，或者通过电子邮件以压缩的ZIP文件格式发送；但是，出于演示目的，我们已经将文件托管在我们的Apache服务器上。让我们在受害者机器上下载它，如下所示：
- en: '![](img/62a25f69-a9c3-4d83-872a-7d6967238dce.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62a25f69-a9c3-4d83-872a-7d6967238dce.png)'
- en: 'Let''s open this file and check whether something happens or not:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开这个文件，看看是否发生了什么：
- en: '![](img/cfa24d6a-0d90-4b1f-b4b4-21b4cc699ab0.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cfa24d6a-0d90-4b1f-b4b4-21b4cc699ab0.png)'
- en: 'We can see nothing much has happened here. Let''s go back to our Metasploit
    console, and see if we got something:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到这里没有发生太多事情。让我们回到我们的Metasploit控制台，看看我们得到了什么：
- en: '![](img/3a219fea-6305-4fa8-9b08-92bd2fd18f04.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a219fea-6305-4fa8-9b08-92bd2fd18f04.png)'
- en: Bang bang! We got Meterpreter access to the target with ease. We just saw how
    easy it is to create a malicious Word document, and to gain access to target machines.
    But wait! Is it this easy? Nope, we have not taken the security of the target
    system into account yet! In real-world scenarios, we have plenty of antivirus
    solutions and firewalls running on the target machines, which will eventually
    ruin our party. We will tackle such defenses in the next chapter.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 哇哇！我们轻松地获得了对目标的Meterpreter访问权限。我们刚刚看到了创建恶意Word文档并访问目标机器有多么容易。但等等！是这么容易吗？不，我们还没有考虑目标系统的安全性！在现实世界的场景中，我们有很多在目标机器上运行的防病毒解决方案和防火墙，这最终会破坏我们的计划。我们将在下一章中解决这些防御措施。
- en: Attacking Android with Metasploit
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit攻击Android
- en: 'The Android platform can be attacked either by creating a simple APK file,
    or by injecting the payload into the existing APK. We will cover the first one.
    Let''s get started by generating an APK file with `msfvenom`, as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Android平台可以通过创建简单的APK文件或将有效负载注入现有APK来进行攻击。我们将介绍第一种方法。让我们开始使用`msfvenom`生成一个APK文件，如下所示：
- en: '![](img/a6c135fd-7c18-4d05-aede-dcaec72610bb.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6c135fd-7c18-4d05-aede-dcaec72610bb.png)'
- en: 'On producing the APK file, all we need to do is either convince the victim
    (perform social engineering) to install the APK, or physically gain access to
    the phone. Let''s see what happens on the phone as soon as a victim downloads
    the malicious APK:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 生成APK文件后，我们只需要说服受害者（进行社会工程）安装APK，或者物理上获取手机的访问权限。让我们看看受害者下载恶意APK后手机上会发生什么：
- en: '![](img/7eaa041d-4e0e-4115-9ccb-c9f6a7910c4e.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7eaa041d-4e0e-4115-9ccb-c9f6a7910c4e.png)'
- en: 'Once the download is complete, the user installs the file as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，用户按照以下步骤安装文件：
- en: '![](img/d9ebb820-b4b5-4318-b360-500c999f7004.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9ebb820-b4b5-4318-b360-500c999f7004.png)'
- en: 'Most people never notice what permissions an app asks for while installing
    a new application on the smartphone. So, an attacker gains complete access to
    the phone and steals personal data. The preceding screenshot lists the required
    permissions an application needs to operate correctly. Once the install happens
    successfully, the attacker gains complete access to the target phone:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人在智能手机上安装新应用程序时都不会注意应用程序请求的权限。因此，攻击者可以完全访问手机并窃取个人数据。上述屏幕截图列出了应用程序需要正确运行的所需权限。一旦安装成功，攻击者就可以完全访问目标手机：
- en: '![](img/46575e06-9f78-4eac-a0e0-bd57c55b21e2.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/46575e06-9f78-4eac-a0e0-bd57c55b21e2.png)'
- en: 'Whoa! We got Meterpreter access easily. Post-exploitation is widely covered
    in the next chapter; however, let''s see some of the basic functionalities:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！我们轻松获得了Meterpreter访问权限。后期利用在下一章中广泛涵盖；但是，让我们看一些基本功能：
- en: '![](img/39e3fc1b-9ac2-41db-936b-b780e749d90f.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/39e3fc1b-9ac2-41db-936b-b780e749d90f.png)'
- en: 'We can see that running the `check_root` command states that the device is
    rooted. Let''s see some other functions:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到运行`check_root`命令时显示设备已被root。让我们看一些其他功能：
- en: '![](img/16336ba2-8434-4dcb-9f86-0743f0c1c8d1.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16336ba2-8434-4dcb-9f86-0743f0c1c8d1.png)'
- en: 'We can use the `send_sms` command to send an SMS to any number from the exploited
    phone. Let''s see if the message was delivered or not:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`send_sms`命令从被利用手机向任何号码发送短信。让我们看看消息是否已发送：
- en: '![](img/d515fdf6-33e4-4bac-9c00-0d68772e17e1.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d515fdf6-33e4-4bac-9c00-0d68772e17e1.png)'
- en: 'Bingo! The message was delivered successfully. Meanwhile, let''s see what system
    we broke into using the `sysinfo` command:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！消息已成功传递。同时，让我们看看使用`sysinfo`命令我们侵入了哪个系统：
- en: '![](img/a68d758a-139e-4f60-871b-4ba04ae54042.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a68d758a-139e-4f60-871b-4ba04ae54042.png)'
- en: 'Let''s geolocate the mobile phone:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对手机进行地理定位：
- en: '![](img/57c4bd84-9e55-4cd6-8957-60ff7555654a.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57c4bd84-9e55-4cd6-8957-60ff7555654a.png)'
- en: 'Browsing to the Google Maps link, we can get the exact location of the mobile
    phone:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览到Google Maps链接，我们可以得到手机的确切位置：
- en: '![](img/0879a63b-aed1-4a9b-aa99-f640e3435960.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0879a63b-aed1-4a9b-aa99-f640e3435960.png)'
- en: 'Let''s take some pictures with the exploited phone''s camera:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用被利用手机的摄像头拍几张照片：
- en: '![](img/64f00608-de17-4222-8901-45ca7e320564.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](img/64f00608-de17-4222-8901-45ca7e320564.png)'
- en: 'We can see we got the picture from the camera. Let''s view the image:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们从相机得到了图片。让我们查看这张图片：
- en: '![](img/51d63ae1-66b8-43d9-b720-714248135412.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](img/51d63ae1-66b8-43d9-b720-714248135412.png)'
- en: Summary and exercises
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结和练习
- en: This chapter explained a hands-on approach to client-based exploitation. Learning
    client-based exploitation will ease a penetration tester into internal audits,
    or into a situation where internal attacks can be more impactful than external
    ones.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了一种实用的基于客户端的利用方法。学习基于客户端的利用将使渗透测试人员更容易进行内部审计，或者在内部攻击比外部攻击更具影响力的情况下进行操作。
- en: In this chapter, we looked at a variety of techniques that can help us attack
    client-based systems. We looked at browser-based exploitation and its variants.
    We exploited Windows-based systems using Arduino. We learned how we could create
    various file format-based exploits, and how to use Metasploit with DNS-spoofing
    attack vectors. Lastly, we also learned how to exploit Android devices.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了各种技术，可以帮助我们攻击基于客户端的系统。我们研究了基于浏览器的利用及其变种。我们利用Arduino攻击了基于Windows的系统。我们学习了如何创建各种基于文件格式的利用，以及如何使用Metasploit进行DNS欺骗攻击。最后，我们还学习了如何利用Android设备。
- en: 'You can feel free to perform the following exercises in order to enhance your
    skills:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以随意进行以下练习，以提高您的技能：
- en: Try performing the DNS spoofing exercise with BetterCAP
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试使用BetterCAP执行DNS欺骗练习
- en: Generating PDF and Word exploit documents from Metasploit and try evading signature
    detection
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Metasploit生成PDF和Word利用文档，并尝试规避签名检测
- en: Try binding the generated APK for Android with some other legit APK
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试将生成的Android APK与其他合法APK绑定
- en: In the next chapter, we will look at post-exploitation in detail. We will cover
    some advance post-exploitation modules which will allow us to harvest tons of
    useful information from the target systems.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将详细介绍后期利用。我们将介绍一些高级的后期利用模块，这些模块将允许我们从目标系统中收集大量有用的信息。
