- en: Access Control and Security Through Obscurity
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问控制与通过模糊安全性
- en: Security through (or by) obscurity is a strategy in web application development
    that assumes a hacker can't hack what he can't see; even if a vulnerability exists,
    as long as it's appropriately hidden or obfuscated, it'll never be discovered
    and used for malicious purposes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 通过（或借助）模糊性来实现安全性，是一种在Web应用程序开发中假设黑客无法破解他们看不见的东西的策略；即使存在漏洞，只要它被恰当地隐藏或模糊化，它就永远不会被发现并用于恶意目的。
- en: While this can feel true (how could someone find this thing I've cleverly hidden—I've
    cleverly hidden it), it ignores a basic understanding of computers and programming.
    Computers are great at finding needles in haystacks. And it's not just one person
    programming one script on one machine who's interested in probing your site for
    vulnerabilities; any site exposed to the internet faces a `24/7/365` crowd-sourced
    attempt to compromise its network. When you assume that no one will find your
    hidden exploit, you're actually assuming no one, among the many people targeting
    you (directly or indirectly), over the course of your site's lifetime, with the
    resources of the entire internet, will be successful. It's a dangerous bet to
    make.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种想法似乎有道理（怎么可能有人找到我巧妙隐藏的东西——我已经巧妙地隐藏了它），但它忽略了计算机和编程的基本理解。计算机在大海捞针方面非常擅长。而且，寻找你网站漏洞的不仅仅是一个人在一台机器上编写脚本；任何暴露在互联网上的网站都会面临一个`24/7/365`的群体协作攻击，试图破坏其网络。当你认为没有人能发现你隐藏的漏洞时，实际上你是在假设，针对你的大量人群（无论是直接还是间接的），在你网站的生命周期中，凭借整个互联网的资源，没有人能成功。这是一个危险的赌注。
- en: 'In this chapter, we''ll be demonstrating the use of various tools to find hidden
    content, and discussing the differences between what merits a payout and what
    doesn''t: There''s so much data flooding every corner of the web, it''s important
    to have an understanding about what programs value. We''ll also cover the shortcomings
    of the security mindset that can make data leakage such a critical vulnerability
    for so many sites. Of course, we''ll also take an example of data leakage through
    the full life cycle of the bug bounty process, from discovery, to validation,
    to submission.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章节中，我们将演示如何使用各种工具查找隐藏内容，并讨论什么值得获得奖励，什么不值得：每个角落都充斥着大量数据，了解程序如何评估这些数据非常重要。我们还将讨论安全思维方式的不足之处，这些不足会使数据泄露成为许多网站的严重漏洞。当然，我们还将以数据泄露为例，展示整个漏洞悬赏过程的生命周期，从发现到验证再到提交。
- en: Technical Requirements
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, we'll be using Burp Suite and its hidden content features,
    as well as Chrome (`66.0.3359.139`). We'll also be using WebGoat, an intentionally
    vulnerable app created by OWASP that you can download and practice against.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章节中，我们将使用Burp Suite及其隐藏内容功能，以及Chrome（`66.0.3359.139`）。我们还将使用WebGoat，这是一个由OWASP创建的有意脆弱的应用程序，你可以下载并进行实践。
- en: Please clone or download the repository to your local system ([https://github.com/WebGoat/WebGoat](https://github.com/WebGoat/WebGoat)).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 请将代码库克隆或下载到你的本地系统中（[https://github.com/WebGoat/WebGoat](https://github.com/WebGoat/WebGoat)）。
- en: There are several ways you can set up WebGoat. You can download and run it as
    a `jar` executable (as we've been doing with Burp Suite), you can download a Docker
    image, or you can build it directly from source. Although using `jvm` to manage
    Java dependencies works for Burp, I prefer to use Docker when it's available,
    since there's so much great tooling around it.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方式可以设置WebGoat。你可以将其下载并作为`jar`可执行文件运行（就像我们使用Burp Suite时那样），也可以下载Docker镜像，或者直接从源代码构建它。尽管使用`jvm`管理Java依赖项对Burp有效，但我更喜欢在有Docker的情况下使用它，因为围绕Docker有许多优秀的工具。
- en: 'There is one concern: if you''re running the Burp Suite proxy and using the
    default proxy ports (`localhost:8080`), you''ll need to make sure you start the
    WebGoat server on a different port so as not to cross traffic with Burp. These
    are the commands the GitHub page references to pull and start the server:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个问题：如果你正在运行Burp Suite代理并使用默认的代理端口（`localhost:8080`），你需要确保在不同的端口上启动WebGoat服务器，以避免与Burp产生流量冲突。以下是GitHub页面参考的命令，用于拉取并启动服务器：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In our case, since we want it to run on `localhost:8081` instead of `localhost:8080`,
    we''ll simply change the second command to map our Docker process to the correct
    port:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，因为我们希望它运行在`localhost:8081`而不是`localhost:8080`，我们只需将第二个命令更改为将Docker进程映射到正确的端口：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now we can use Burp and WebGoat together without any port clashes.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以一起使用Burp和WebGoat，而不会发生端口冲突。
- en: Security by Obscurity – The Siren Song
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过模糊性来实现安全性——美丽的诱惑
- en: The appeal—and trap—of security by obscurity is the ease with which strategies
    can be implemented, especially when compared to more rigorous credential management
    systems. Obscuring a piece of sensitive information just means scrambling it,
    rearranging and reordering it, until it looks like gibberish. Looks like is the
    operative phrase, since patterns can be detected outside the scope of human intuition
    or estimation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性通过模糊化的吸引力——以及陷阱——在于其实施策略的简便性，尤其是与更严格的凭证管理系统相比。模糊化一条敏感信息只是意味着将其打乱、重新排列和排序，直到它看起来像胡言乱语。“看起来像”是关键，因为模式可以在超出人类直觉或估计范围之外被检测到。
- en: The assumptions behind this sort of strategy invariably contain an element of
    human fallibility—someone couldn't find *X*, or trip across *Y*, because the odds
    are so stupendously against them, considering the scope of the application, the
    minimal nature of the vulnerability, and the implicitly assumed man-hours of brute-forcing
    a solution to the problem. But, of course, computers aren't constrained by such
    limitations, and the actual audience for the site is larger than assumed. And
    when a large set of users, augmented by crawlers, fuzzers, and all other sorts
    of web agents, train their tools on a target, they can uncover flaws and make
    that site (and others) safer.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这种策略背后的假设通常包含一个人类易犯错误的元素——某人无法找到*X*，或者跨越*Y*，因为考虑到应用的范围、漏洞的最小性质以及假定的暴力破解问题的工作量，成功的概率极低。但当然，计算机并不受这些限制的约束，而且实际的站点访问者比预想的要多。而当大量用户，以及爬虫、模糊测试工具和各种网络代理，针对某个目标训练它们的工具时，它们可以发现缺陷，使该站点（及其他站点）更加安全。
- en: There is an important caveat here that even though security by obscurity is
    not valid as the only or principal layer of security for a network; it is valid
    as just one defense among many. The strategy, artfully employed, can help increase
    the cost of compromising the site in order to repel less determined adversaries
    and at least deter opportunistic exploitation.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个重要的警告，即虽然单独或作为网络的主要安全层，安全性通过模糊化并不成立；它作为众多防御手段之一是有效的。巧妙地运用这一策略可以帮助提高攻击成本，迫使不那么坚定的对手退却，至少可以防止机会主义的利用。
- en: Data Leaks – What Information Matters?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据泄露——哪些信息重要？
- en: There are a few categories of data that have instant and recognizable value.
    It should be clear to just about any developer that these should be treated as
    higher value pieces of information in any threat-modeling exercise.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有几类数据具有即时和明显的价值。几乎任何开发人员都应该清楚，这些数据应该在任何威胁建模过程中被视为更高价值的信息。
- en: API Keys
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API 密钥
- en: API keys are typically used to provide project-level authorization for an API,
    service, or other organization-type object. APIs can be critical pieces of information
    to expose because of the extent of their permissions and the generally wider scope
    of API keys. A ready example of an API key might be the API key for a SaaS app,
    such as Twilio. A Twilio API Key doesn't differentiate access based on the role
    of the user; it just gives everyone who has it the ability to make API calls to
    the associated Twilio account.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: API 密钥通常用于为 API、服务或其他组织类型的对象提供项目级授权。API 可能是暴露的重要信息，因为它们的权限范围广泛，且 API 密钥的权限通常也较大。API
    密钥的一个现成示例可能是 SaaS 应用的 API 密钥，例如 Twilio。Twilio API 密钥不会根据用户角色区分访问权限；它只是让持有者能够向关联的
    Twilio 账户发出 API 调用。
- en: Access Tokens
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问令牌
- en: Tokens are different from API keys. Access tokens are usually used to authenticate
    an individual (for example, session tokens and generally all cookies) as opposed
    to an entire service or project. Access tokens can still be sensitive data, depending
    on the scope of the token's authentication.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 令牌与 API 密钥不同。访问令牌通常用于验证个人（例如，session 令牌和一般的所有 cookies），而不是整个服务或项目。访问令牌仍然可能是敏感数据，这取决于令牌认证的范围。
- en: API keys are something that should generally never be public (unless it's the
    public half of a multi-key system) but your browser trades session authentication
    tokens back and forth with the sites you visit every day.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: API 密钥通常不应该公开（除非它是多密钥系统的公开部分），但你的浏览器每天与访问的网站交换会话认证令牌。
- en: These distinctions aren't ironclad—they only describe a convention that can
    be freely broken—but they do provide a great jumping-off point for understanding
    some of the distinctions between different kinds of authentication data.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些区分并非铁定不变——它们仅描述了一种可以自由打破的约定——但它们为理解不同类型的身份验证数据之间的一些区别提供了一个很好的起点。
- en: A common example of a popular access token would be an AWS **Identity and Access
    Management** (**IAM**) access token, which provides the basis for regulating an
    IAM role's access to different Amazon resources owned by the larger organizational
    account.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的流行访问令牌示例是 AWS **身份与访问管理** (**IAM**) 访问令牌，它为调节 IAM 角色对由更大的组织账户拥有的不同 Amazon
    资源的访问提供了基础。
- en: Passwords
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 密码
- en: This is a no-brainer. Team/role-based and individual passwords, if stored in
    plaintext (or insufficiently encrypted) and exposed, are obviously dangerous points
    of vulnerability that hackers can use to infiltrate even more privileged systems.
    The username/password credential pattern underpins most of the services consumers
    interact with regularly, from social media profiles to bank accounts.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一项显而易见的任务。如果团队/角色密码和个人密码以明文（或加密不足）形式存储并暴露，显然是危险的漏洞点，黑客可以利用这些漏洞渗透到更高权限的系统。用户名/密码凭证模式是大多数消费者定期使用的服务的基础，从社交媒体账户到银行账户。
- en: Hostnames
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主机名
- en: This can be a bit more of a gray area. Quite often, if a hostname is exposed
    in publicly available logs or in an API, if it's meant to be internal, it will
    be locked down to a VPN or privileged network. However, if they aren't protected
    by a VPN or firewall, even the IP or hostname of a box can be an exploitable liability.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是一个有些模糊的领域。通常情况下，如果一个主机名暴露在公开可用的日志中或 API 中，并且它本应是内部的，那么它将被限制在 VPN 或特权网络中。然而，如果没有
    VPN 或防火墙保护，即使是一个机器的 IP 或主机名也可能成为一个可被利用的风险点。
- en: Machine RSA/Encryption Keys
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器 RSA/加密密钥
- en: Unlike API keys, which describe permissions for services, projects, and roles,
    a machine RSA, or similar key, represents the cryptographic identity of an individual
    machine (whether it's a laptop, server, and so on). Exposed RSA keys for even
    lesser services, such as continuous deployment build servers for smaller or staging
    environments, can provide the necessary foothold for an attacker to inject malicious
    elements into other parts of your network. If you're using a macOS-powered machine,
    you'll typically store the SSH keys associated with your machine in a hidden `.ssh`
    folder. A typical naming convention is `id_rsa` for you private key and `id_rsa.pub`
    for your public one.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 不像 API 密钥那样描述服务、项目和角色的权限，机器 RSA 密钥或类似的密钥代表了单个机器的加密身份（无论是笔记本电脑、服务器等）。即便是对较小服务（例如较小或暂存环境中的持续部署构建服务器）暴露的
    RSA 密钥，也可能为攻击者提供必要的立足点，将恶意元素注入到你网络的其他部分。如果你使用的是 macOS 机器，通常会将与你的机器相关的 SSH 密钥存储在隐藏的
    `.ssh` 文件夹中。典型的命名约定是 `id_rsa` 作为私钥，`id_rsa.pub` 作为公钥。
- en: Account and Application Data
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 账户和应用数据
- en: The information we've described up until now has all existed at the network
    level, with the exception of access tokens tied to in-app behavior (like session
    cookies). But data within the account itself—account settings, billing information,
    application configs, and so on—are all valuable targets for any attacker.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 迄今为止我们描述的信息都存在于网络层级，除了与应用行为相关的访问令牌（例如会话 cookies）。但账户内部的数据——账户设置、账单信息、应用配置等——都是任何攻击者都非常感兴趣的目标。
- en: Low Value Data – What Doesn’t Matter
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 低价值数据——什么不重要
- en: Any discussion that includes important information to scout for bug bounties
    should cover data that is routinely leaked (without issue) by web apps every day.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 任何包含关于漏洞悬赏的讨论，都应该涵盖 web 应用每天常常无问题地泄露的重要数据。
- en: Generally Descriptive Error Messages
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一般性描述的错误信息
- en: 'Although error messages can be a valid source of sensitive information that''s
    only if, well, the message contains sensitive data. By itself, a stack trace that
    includes function names, exception types, and other common debugging info is not
    a vulnerability. The key differentiator here is: can you imagine an attack scenario
    using the information?'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管错误信息可能是敏感信息的有效来源，但这只有在消息中确实包含敏感数据的情况下才成立。仅仅是包含函数名称、异常类型和其他常见调试信息的堆栈跟踪并不是一个漏洞。这里的关键区分点是：你能想象一个利用这些信息的攻击场景吗？
- en: 404 and Other Non-200 Error Codes
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 404 和其他非 200 错误代码
- en: 404s and more exotic error codes are part of the normal functioning of an application.
    If sensitive information is exposed in a message, that's an issue, but otherwise,
    the code is to be expected.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 404 错误和其他更复杂的错误代码是应用程序正常运行的一部分。如果敏感信息暴露在错误信息中，那是一个问题，但其他情况下，代码是可以预期的。
- en: Username Enumeration
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户名枚举
- en: 'Savvy sites will contain error messages for sign-up and login pages that don''t
    indicate whether a username exists: invalid credentials are vague enough to make
    it unclear whether it was the username or password that was incorrect, while the
    message username already exists instantly tells an attacker that there''s a valid
    user target with that account.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 精明的网站会在注册和登录页面中显示错误信息，但不会指明用户名是否存在：无效的凭据足够模糊，不清楚是用户名错误还是密码错误，而“用户名已存在”的信息则立刻告诉攻击者该账户已经有有效的目标用户。
- en: Combined with a script that fuzzes different possible usernames (based on something
    like a dictionary attack), a determined assailant could create a list of all the
    site's users. Regardless, because it's so resource-intensive, common, and since
    it doesn't lead directly to a serious vulnerability like remote code execution,
    username enumeration does not merit a bug bounty payout for most companies.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果结合一个模糊不同可能的用户名（基于类似字典攻击的东西）的脚本，一个决心坚定的攻击者可以创建一个网站所有用户的列表。尽管如此，由于这种方法消耗资源大、常见，并且并没有直接导致像远程代码执行那样严重的漏洞，用户名枚举通常不值得大多数公司支付漏洞悬赏。
- en: Browser Autocomplete or Save Password Functionality
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览器自动填充或保存密码功能
- en: Enabling a browser's form autocomplete or save password functionality is often
    recommended against because attackers who gain access to your browser can look
    back to leverage stored credentials. Since it already depends on another vulnerability
    to allow an attacker to access your browser in the first place, this bug does
    not merit a bounty payout.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 启用浏览器的表单自动填充或保存密码功能通常是不推荐的，因为攻击者一旦获取了对你的浏览器的访问权限，就可以回溯利用存储的凭据。由于它已经依赖于另一个漏洞，允许攻击者首先访问你的浏览器，因此这个漏洞通常不值得支付悬赏。
- en: Data Leak Vectors
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据泄露途径
- en: So far we've listed different types of information, but not where we can expect
    to find anything. Here are a few places where a website or app can unintentionally
    expose sensitive information.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们列出了不同类型的信息，但并没有说明这些信息可能出现在什么地方。以下是一些网站或应用程序可能无意中暴露敏感信息的地方。
- en: Config Files
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置文件
- en: Config management is an entire branch of operations that ensures configuration
    credentials are never exposed. Whether you're injecting them at runtime via a
    service such as consul (see *Further reading* for a link) or simply leaving them
    unversioned by including them in your project's `.gitignore`, there are varying
    degrees of sophistication in the available solutions.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理是一个独立的操作分支，确保配置凭据永远不会暴露。无论你是通过像 consul 这样的服务在运行时注入它们（有关链接，请参见*进一步阅读*），还是仅仅通过将它们包含在项目的
    `.gitignore` 中以避免版本控制，它们的解决方案在复杂性上各有不同。
- en: But sometimes those measures fail and a config file is included in a server's
    root directory, logs on an exposed build server, application error messages, or
    a public code repository. That can make the sensitive contents of that config
    fair game for any attackers.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 但有时这些措施会失败，导致配置文件被包含在服务器的根目录中、暴露的构建服务器的日志中、应用程序的错误信息中，或者公共代码仓库中。这可能会使该配置文件中的敏感内容暴露给任何攻击者。
- en: Earlier, we discussed discovering sensitive config files in the context of applying
    fuzzing tools such as `wfuzz` that use wordlists to attempt to access files that
    have been left on a web server and mistakenly left accessible. We used the `SecLists`
    repository of curated pentesting resources for our wordlist ([https://github.com/danielmiessler/SecLists](https://github.com/danielmiessler/SecLists))
    in [Chapter 3](23759e04-8982-41fd-b936-580865a51439.xhtml), *Preparing for an
    Engagement*,  but there are several great options for dictionaries of sensitive
    filenames. Check out [chapter 11](ed465f46-31a7-429c-b0d2-6616dace7167.xhtml),
    *Other Tools,* for more info.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们讨论了在应用模糊测试工具（如 `wfuzz`）的背景下发现敏感配置文件，这些工具利用字典列表尝试访问那些错误地暴露在网络服务器上的文件。在[第
    3 章](23759e04-8982-41fd-b936-580865a51439.xhtml)，*为参与做好准备*，我们使用了 `SecLists` 仓库中的精选渗透测试资源作为字典列表
    ([https://github.com/danielmiessler/SecLists](https://github.com/danielmiessler/SecLists))，但还有其他几个优秀的敏感文件名字典选项。有关更多信息，请查看[第
    11 章](ed465f46-31a7-429c-b0d2-6616dace7167.xhtml)，*其他工具*。
- en: Public Code Repos
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 公共代码库
- en: With more developers using open-source sites, such as GitHub, to network and
    share code, it's easy for flat file credentials and text-based secrets to be mistakenly
    included in a repo's commit history. It's important to note here that if you mistakenly
    commit sensitive data to your project's Git history, the first thing you should
    do is rotate those credentials.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 随着越来越多的开发人员使用像 GitHub 这样的开源网站来建立网络并共享代码，错误地将平面文件凭证和基于文本的机密信息包含在仓库的提交历史中变得非常容易。这里需要特别注意的是，如果你错误地将敏感数据提交到项目的
    Git 历史中，第一件事应该做的是更换那些凭证。
- en: Don't try and push a commit removing the info (keep in mind, it can still be
    found in a previous commit); just refresh those API keys or passwords first, and
    then worry about removing the info from the repo later.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 不要尝试提交一个删除这些信息的 commit（请记住，它仍然可以在以前的 commit 中找到）；首先刷新那些 API 密钥或密码，然后再考虑以后从仓库中删除这些信息。
- en: Committing sensitive credentials to a public GitHub/Bitbucket repo has become
    so common that blogs such as A *Very Expensive AWS Mistake* have become their
    own content niche ([https://medium.com/@morgannegagne/a-very-expensive-aws-mistake-56a3334ed9ad](https://medium.com/@morgannegagne/a-very-expensive-aws-mistake-56a3334ed9ad)).
    In that particular blog post, a developer working through the Flatiron development
    bootcamp commits her AWS IAM credentials to GitHub and only discovers her error
    when she starts exceeding her free-tier limits, finally seeing the $3,000+ bill
    she's racked up in the short time her creds have been exposed.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 将敏感凭证提交到公共 GitHub/Bitbucket 仓库已经变得非常普遍，以至于像 *非常昂贵的 AWS 错误* 这样的博客已经成为了一个独特的内容领域（[https://medium.com/@morgannegagne/a-very-expensive-aws-mistake-56a3334ed9ad](https://medium.com/@morgannegagne/a-very-expensive-aws-mistake-56a3334ed9ad)）。在这篇特定的博客文章中，一位正在参加
    Flatiron 开发训练营的开发人员将她的 AWS IAM 凭证提交到了 GitHub，直到她开始超过免费的使用额度时才发现自己的错误，最终看到她在凭证暴露的短短时间内已经产生了超过
    3,000 美元的账单。
- en: The practice has even spawned a variety of SaaS businesses designed to scan
    your public source code and notify you if you've included any sensitive information.
    Businesses such as GitGuardian ([https://www.gitguardian.com/tweet](https://www.gitguardian.com/tweet))
    and GitMonkey ([https://gitmonkey.io/](https://gitmonkey.io/)) are designed to
    provide a notification safety net if a tired or junior developer mistakenly versions
    credentials.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这一做法甚至催生了各种 SaaS 商业公司，旨在扫描你的公开源代码，并在你不小心将任何敏感信息包含其中时通知你。像 GitGuardian（[https://www.gitguardian.com/tweet](https://www.gitguardian.com/tweet)）和
    GitMonkey（[https://gitmonkey.io/](https://gitmonkey.io/)）这样的公司就是为了提供安全通知服务，如果一个疲惫或初级的开发人员不小心提交了凭证版本历史时，能为你提供安全保障。
- en: Client Source Code
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端源代码
- en: Client source code—the static JavaScript, HTML, and CSS executed in your browser—is
    different from the entire source code repo represented by an entire Git project.
    You're less likely to find a config file with application-level secrets and the
    scope of the business logic exposed will probably be minimal (even an all-JavaScript,
    Angular, or React app will feature most logic in a connected API) but there are
    still opportunities to harvest weak cookies, `futz` with client-side validations,
    and look for old settings, resources, and functionality in commented-out code.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端源代码——即在浏览器中执行的静态 JavaScript、HTML 和 CSS——不同于由整个 Git 项目表示的完整源代码仓库。你不太可能找到包含应用程序级机密的配置文件，并且暴露的业务逻辑的范围可能是最小的（即使是完全基于
    JavaScript 的 Angular 或 React 应用，也通常将大部分逻辑放在连接的 API 中），但仍然有可能窃取弱密码、`futz` 客户端验证，或者查找在注释掉的代码中的旧设置、资源和功能。
- en: Hidden Fields
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 隐藏字段
- en: Hidden fields are technically a part of the client code, but merit extra consideration
    as a prime vector for malicious data input. It's important if you're messing with
    hidden fields to avoid submitting values for honeypot fields. Honeypot fields
    are hidden `input` tags that, since a a normal GUI user can't see them, usually
    don't get don't get submitted—unless that form is being fuzzed by a script that's
    injecting values into every available `input` field it can.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏字段技术上是客户端代码的一部分，但由于它们是恶意数据输入的主要传播途径，因此需要额外的关注。如果你正在操作隐藏字段，务必避免为蜜罐字段提交值。蜜罐字段是隐藏的
    `input` 标签，因为正常的图形用户界面（GUI）用户看不见它们，所以通常不会被提交——除非这个表单被脚本模糊测试，脚本会将值注入到它可以找到的每个 `input`
    字段中。
- en: Error Messages
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误信息
- en: Just like we covered in [Chapter 5](847090b6-8871-4977-9538-17cc1ad52954.xhtml),
    *SQL, Code Injection, and Scanners*, where we discussed the error-based SQL injection
    attack and how a determined attacker can often use public error messages propagated
    up from the SQL DB to enumerate information, error messages can leak data in other
    contexts. In application error logs, GUI error messages, API errors, and other
    error vectors, everything from machine-level RSA keys to user info can be exposed.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在[第 5 章](847090b6-8871-4977-9538-17cc1ad52954.xhtml)中讨论的，*SQL、代码注入和扫描器*，我们讨论了基于错误的
    SQL 注入攻击，以及如何通过 SQL 数据库传播上来的公共错误信息，决心坚定的攻击者往往可以利用这些信息枚举数据，错误信息在其他上下文中也能泄露数据。在应用错误日志、GUI
    错误信息、API 错误和其他错误渠道中，从机器级 RSA 密钥到用户信息，任何东西都有可能被暴露。
- en: Unmasking Hidden Content – How to Pull the Curtains Back
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 揭开隐藏内容 – 如何拉开帷幕
- en: Exploring obfuscated, neglected, or otherwise exposed data is a critical exercise,
    both as part of a site's opening reconnaissance and as a dedicated end in itself.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 探索混淆、忽视或以其他方式暴露的数据是一个关键的练习，既是站点初步侦察的一部分，也是一个独立的目标。
- en: We'll cover a couple of different ways, some passive and some more active, that
    will help you discover sensitive information that will win you a bounty payout.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将介绍几种不同的方法，其中一些是被动的，另一些则更为主动，这些方法可以帮助你发现敏感信息，并获得赏金奖励。
- en: Preliminary Code Analysis
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初步代码分析
- en: It's a simple step, but walking through the page's source and being able to
    get a sense of the code style and quality, framework, any extra connected services,
    and just a general feel for the code base powering the app is essential, and can
    lead to surprising finds.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的步骤，但浏览页面的源代码并了解代码风格和质量、框架、任何额外的连接服务，以及对驱动应用的代码库的总体感觉是非常重要的，这可以导致一些令人惊讶的发现。
- en: Using Burp to Uncover Hidden Fields
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Burp 揭示隐藏字段
- en: 'There are two ways to use Burp to discover hidden input fields: one is easy,
    the other absurdly easy.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Burp 揭示隐藏输入字段有两种方法：一种是简单的，另一种是极其简单的。
- en: The first way is to examine any HTTP traffic generated by forms to ensure you
    catch any information being passed that wasn't available in the GUI.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方式是检查表单生成的任何 HTTP 流量，确保你捕捉到任何在 GUI 中不可见的信息。
- en: 'The other (easier) way is a simple configuration setting in the Options pane
    within the Proxy tab:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种（更简单）方式是在 Proxy 选项卡中的 Options 面板中进行简单的配置设置：
- en: '![](assets/2c8029f0-3ebf-4154-8da7-a3c414d77c14.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2c8029f0-3ebf-4154-8da7-a3c414d77c14.png)'
- en: 'Now when you walk through an application using the proxy-linked browser, you
    can see any hidden fields on a page highlighted in a bright red `div`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你通过代理链接的浏览器浏览应用时，页面上任何隐藏的字段都会在一个鲜红色的 `div` 中高亮显示：
- en: '![](assets/53b1e853-5377-4d1e-9489-d8a91c59d50a.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/53b1e853-5377-4d1e-9489-d8a91c59d50a.png)'
- en: By highlighting any fields you come across, Burp allows you to pick up on secret
    info at the same time you're mapping your target application's attack surface.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 通过高亮显示你遇到的任何字段，Burp 允许你在绘制目标应用攻击面时同时捕捉到秘密信息。
- en: Data Leakage – An End-to-End Example
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据泄露 – 从头到尾的示例
- en: Let's try out some of our new techniques on WebGoat, OWASP's deliberately-vulnerable
    Java application. After navigating to `localhost:8081/WebGoat`, go ahead and click
    on the link to register a new user and then log in.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 WebGoat 上尝试一些新技巧，WebGoat 是 OWASP 的故意漏洞化的 Java 应用。导航到 `localhost:8081/WebGoat`
    后，点击链接注册一个新用户并登录。
- en: 'After you''ve logged in, you should be on the main WebGoat welcome page:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，你应该看到 WebGoat 的主欢迎页面：
- en: '![](assets/855d54a9-833f-4bb1-88c8-2b430c8ba124.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/855d54a9-833f-4bb1-88c8-2b430c8ba124.png)'
- en: 'Now we''re going to click through to the Client side lesson:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将点击进入客户端教程：
- en: '![](assets/06549b13-d85d-4def-bc1f-5c9e014e3e8f.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/06549b13-d85d-4def-bc1f-5c9e014e3e8f.png)'
- en: 'Landing on the page, we can immediately see a couple of hidden fields of interest.
    We also get the gist of the lesson—we''re a disgruntled employee that wants to
    get the personal info of our CEO, even though we (naturally) don''t have access
    to it—and what it is that we''re trying to subvert: a small, employee directory
    application.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 打开页面后，我们可以立即看到几个隐藏的感兴趣字段。我们也能大致了解这节课的内容——我们是一个不满的员工，想获取我们 CEO 的个人信息，尽管我们（自然地）没有权限访问这些信息——而我们想要颠覆的是：一个小型的员工目录应用。
- en: 'Looking at the hidden fields, they seem to be associated with an employee ID
    that''s connected to an employee info record. If we use our `dev` tools to inspect
    the markup, we can see the `select` tag where the employee we want info on is
    chosen, and the associated IDs:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 查看隐藏字段时，它们似乎与与员工信息记录相关联的员工 ID 相关。如果我们使用开发工具来检查标记，我们可以看到选择我们想要信息的员工的`select`标签，以及相关的ID：
- en: '![](assets/f956e5f5-fcf5-4cb8-abc2-c16cb36b2420.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f956e5f5-fcf5-4cb8-abc2-c16cb36b2420.png)'
- en: Now if we can dive into that `onchange` callback—wait, what's that there in
    the bottom right of our pane?
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果我们可以深入研究那个`onchange`回调函数——等等，在我们面板的右下角那是什么？
- en: '![](assets/7343110f-01fd-4c8e-bb05-9581ae6bbaa1.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7343110f-01fd-4c8e-bb05-9581ae6bbaa1.png)'
- en: 'This is obviously an extreme example—naming a class with a super-incriminating
    string—but exposing sensitive client-side data simply because the mechanisms used
    to keep it hidden rely on the GUI or no one tampering with it is unfortunately
    a real-life issue:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这是一个极端的例子——用一个超级污名化的字符串来命名一个类——但是由于用于隐藏数据的机制依赖于 GUI 或没有人篡改它，所以暴露敏感客户端数据不幸地是一个现实问题：
- en: '![](assets/0f843ad2-138a-4508-8a69-927800a166db.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0f843ad2-138a-4508-8a69-927800a166db.png)'
- en: Now, diving into that class, we can see the markup does in fact contain the
    CEO and other's info. We now have the CEO's salary (a cool $450,000) and are just
    a little bit more accomplished in corporate espionage then we were a few moments
    ago.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，深入研究这个类，我们可以看到标记确实包含CEO和其他人的信息。我们现在知道CEO的薪水（高达$450,000），在企业间谍活动中有了一点进展。
- en: Gathering Report Information
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集报告信息
- en: 'Now that we''ve brought our company to its knees, let''s walk through the info
    we need to write our report:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经让公司陷入困境，让我们来详细说明我们写报告所需的信息：
- en: '**Category**: This is a data leak of sensitive information. In this case, the
    CEO''s salary and SSN.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类别**: 这是敏感信息泄露事件。在这种情况下，是CEO的薪水和社会安全号码。'
- en: '**Timestamps**: For our timestamp, we can just approximate a time manually.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间戳**: 对于我们的时间戳，我们可以手动近似一个时间。'
- en: '**URL**: For our URL, we can use the page where we discovered the info in the
    source code:'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网址**: 对于我们的网址，我们可以使用在源代码中发现信息的页面：'
- en: '[PRE2]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Methodology**: Skipping payload, we can just head to the methodology. In
    this case, we simply came across the information after a close inspection of the
    page''s source code.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方法**: 跳过有效载荷，我们可以直接进入方法。在这种情况下，我们仅仅是在仔细检查页面源代码后发现了这些信息。'
- en: '**Instructions to reproduce**: Simple enough. Navigate to the affected page
    and look at its source.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复现指令**: 相当简单。导航到受影响的页面并查看其源代码。'
- en: '**Attack scenario**: For our attack scenario, it''s important to prove the
    danger the data poses in the wrong hands. In this case, it''s clear. Exposing
    sensitive financial information along with his SSN puts the CEO at a clear risk
    of cyberattack and identity theft.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**攻击场景**: 对于我们的攻击场景，证明数据在错误手中的危险性非常重要。在这种情况下，很明显。泄露敏感财务信息和社会安全号码使CEO明显面临网络攻击和身份盗窃的风险。'
- en: Final Report
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最终报告
- en: 'Let''s use this information to format our submission:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们利用这些信息来格式化我们的提交：
- en: '**Category**: Data leak of sensitive employee data.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类别**: 敏感员工数据泄露。'
- en: '**Time**: 2017-03-25 17:27 (17:27) UTC.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间**: 2017-03-25 17:27 (17:27) UTC.'
- en: '**URL**: `http://localhost:8081/WebGoat/start.mvc#lesson/ClientSideFiltering.lesson/1`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网址**: `http://localhost:8081/WebGoat/start.mvc#lesson/ClientSideFiltering.lesson/1`'
- en: '**Methodology**: Vulnerability detected after inspecting the source code of
    the affected page.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方法**: 在检查受影响页面的源代码后检测到的漏洞。'
- en: '**Instructions to procedure**:'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作指示**:'
- en: Navigate to the affected URL
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到受影响的网址
- en: Inspect the page's source code
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查页面的源代码
- en: '**Attack scenario**: With access to the CEO and other privileged employees''
    personal information, an attacker could steal those individuals'' identities,
    engage in spear-phishing campaigns to compromise company resources, and generally
    wreck havoc with the financial health of both the company and its employees.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**攻击场景**: 有了CEO和其他特权员工的个人信息访问权，攻击者可以窃取这些个人身份，通过鱼叉式钓鱼攻击来入侵公司资源，并且通常会破坏公司及其员工的财务健康。'
- en: Summary
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you've learned about the deficiency (and sometimes validity)
    of security by obscurity as a philosophy, how to unmask a site's hidden content
    with Burp and other tools, how to distinguish between different types of sensitive
    information, a rough guide to information that doesn't merit a bounty payout,
    and taking a data leak vulnerability from discovery to report formatting and submission.
    You should now feel prepared to incorporate at least basic hidden content discovery
    methods into your pentesting regimen.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你已了解了作为一种哲学理念，模糊安全（Security by Obscurity）的缺陷（有时也有其有效性），如何使用 Burp 和其他工具揭示网站的隐藏内容，如何区分不同类型的敏感信息，哪些信息不值得获得奖励的粗略指南，以及如何将数据泄露漏洞从发现到报告格式化和提交。你现在应该已经准备好将至少基本的隐藏内容发现方法融入到你的渗透测试工作中。
- en: Questions
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Is security by obscurity a valid security layer?
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模糊安全是否是一个有效的安全层？
- en: What are some common pieces of information reported for bounties?
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一些常见的漏洞报告信息是什么？
- en: What's a good tool for uncovering hidden content?
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个工具适合用来揭示隐藏内容？
- en: What's the difference between an API key and an access token?
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: API 密钥与访问令牌之间有什么区别？
- en: What information typically does not merit a payout as a data leak vulnerability?
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通常哪些信息不值得作为数据泄露漏洞获得奖励？
- en: What's a downside to relying on client-side data filtering?
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 依赖客户端数据过滤有什么缺点？
- en: What are some common vectors through which web application data leaks?
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Web 应用程序中数据泄露的常见途径有哪些？
- en: Further Reading
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'You can find out more about some of the topics we have discussed in this chapter
    at:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下链接中了解更多我们在本章讨论的某些话题：
- en: 'Google Cloud Endpoints on API Keys versus Authentication Tokens: [https://cloud.google.com/endpoints/docs/openapi/when-why-api-key](https://cloud.google.com/endpoints/docs/openapi/when-why-api-key)'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Cloud 端点：API 密钥与认证令牌的比较：[https://cloud.google.com/endpoints/docs/openapi/when-why-api-key](https://cloud.google.com/endpoints/docs/openapi/when-why-api-key)
- en: 'Consul Config Management: [https://www.consul.io/](https://www.consul.io/)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Consul 配置管理：[https://www.consul.io/](https://www.consul.io/)
