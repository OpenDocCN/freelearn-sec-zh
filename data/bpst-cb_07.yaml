- en: Assessing Business Logic
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估业务逻辑
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Testing business logic data validation
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试业务逻辑数据验证
- en: Unrestricted file upload – bypassing weak validation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无限制的文件上传 - 绕过弱验证
- en: Performing process-timing attacks
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行进程时间攻击
- en: Testing for the circumvention of workflows
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试工作流的规避
- en: Uploading malicious files – polyglots
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传恶意文件 - 多语言
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: This chapter covers the basics of **business logic testing**, including an explanation
    of some of the more common tests performed in this area. Web penetration testing
    involves key assessments of business logic to determine how well the design of
    an application performs integrity checks, especially within sequential application
    function steps, and we will be learning how to use Burp to perform such tests.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了**业务逻辑测试**的基础知识，包括对该领域中一些常见测试的解释。Web渗透测试涉及对业务逻辑的关键评估，以确定应用程序设计在执行完整性检查方面的表现如何，特别是在连续的应用程序功能步骤中，我们将学习如何使用Burp执行此类测试。
- en: Software tool requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件工具要求
- en: 'To complete the recipes in this chapter, you will need the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章的练习，您将需要以下内容：
- en: OWASP Broken Web Applications (VM)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP Broken Web Applications (VM)
- en: OWASP Mutillidae link
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP Mutillidae链接
- en: Burp Proxy Community or Professional ([https://portswigger.net/burp/](https://portswigger.net/burp/))
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Burp Proxy Community或Professional ([https://portswigger.net/burp/](https://portswigger.net/burp/))
- en: Testing business logic data validation
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试业务逻辑数据验证
- en: Business logic data validation errors occur due to a lack of server-side checks,
    especially in a sequence of events such as shopping cart checkouts. If design
    flaws, such as thread issues, are present, those flaws may allow an attacker to
    modify or change their shopping cart contents or prices, prior to purchasing them,
    to lower the price paid.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 业务逻辑数据验证错误是由于缺乏服务器端检查，特别是在一系列事件中，如购物车结账。如果存在设计缺陷，如线程问题，这些缺陷可能允许攻击者在购买之前修改或更改其购物车内容或价格，以降低支付的价格。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using the **OWASP WebGoat** application and Burp, we will exploit a business
    logic design flaw, to purchase many large ticket items for a very cheap price.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**OWASP WebGoat**应用程序和Burp，我们将利用业务逻辑设计缺陷，以非常便宜的价格购买许多大额商品。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Ensure the **owaspbwa** VM is running. Select the OWASP WebGoat application
    from the initial landing page of the VM. The landing page will be configured to
    an IP address specific to your machine:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保**owaspbwa**虚拟机正在运行。从虚拟机的初始登陆页面选择OWASP WebGoat应用程序。登陆页面将配置为与您的机器特定的IP地址：
- en: '![](img/00237.jpeg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00237.jpeg)'
- en: 'After you click the OWASP WebGoat link, you will be prompted for some login
    credentials. Use these credentials: User Name: `guest` Password: `guest`.'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击OWASP WebGoat链接后，将提示您输入一些登录凭据。使用以下凭据：用户名：`guest`密码：`guest`。
- en: 'After authentication, click the **Start WebGoat** button to access the application
    exercises:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 认证后，点击**开始WebGoat**按钮以访问应用程序练习：
- en: '![](img/00238.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00238.jpeg)'
- en: 'Click **Concurrency** | **Shopping Cart Concurrency Flaw** from the left-hand
    menu:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧菜单中点击**并发性** | **购物车并发性缺陷**：
- en: '![](img/00239.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00239.jpeg)'
- en: The exercise explains there is a thread issue in the design of the shopping
    cart that will allow us to purchase items at a lower price. Let's exploit the
    design flaw!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 练习解释了购物车设计中存在线程问题，将允许我们以较低的价格购买商品。让我们利用这个设计缺陷！
- en: 'Add `1` to the `Quantity` box for the `Sony - Vaio with Intel Centrino` item.
    Click the Update Cart button:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`1`添加到`数量`框中的`Sony - Vaio with Intel Centrino`项目。点击更新购物车按钮：
- en: '![](img/00240.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00240.jpeg)'
- en: 'Switch to Burp Proxy | HTTP history tab. Find the cart request, right-click,
    and click Send to Repeater:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp Proxy | HTTP历史选项卡。找到购物车请求，右键单击，点击发送到Repeater：
- en: '![](img/00241.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00241.jpeg)'
- en: 'Inside Burp''s Repeater tab, change the`QTY3` parameter from `1` to `10`:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Burp的Repeater选项卡中，将`QTY3`参数从`1`更改为`10`：
- en: '![](img/00242.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00242.jpeg)'
- en: 'Stay in Burp Repeater, and in the request pane, right-click and select **Request
    in browser** | **In current browser session**:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 留在Burp Repeater中，在请求窗格中，右键单击并选择**在浏览器中请求** | **在当前浏览器会话中**：
- en: '![](img/00243.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00243.jpeg)'
- en: 'A pop-up displays the modified request. Click the **Copy** button:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 弹出窗口显示修改后的请求。点击**复制**按钮：
- en: '![](img/00244.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00244.jpeg)'
- en: 'Using the same Firefox browser containing the shopping cart, open a new tab
    and paste in the URL that you copied into the clipboard in the previous step:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在包含购物车的同一Firefox浏览器中，打开一个新标签，并粘贴上一步中复制到剪贴板中的URL：
- en: '![](img/00245.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00245.jpeg)'
- en: 'Press the *Enter* key to see the request resubmitted with a modified quantity
    of `10`:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*Enter*键，查看修改后的数量为`10`的请求重新提交：
- en: '![](img/00246.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00246.jpeg)'
- en: 'Switch to the original tab containing your shopping cart (the cart with the
    original quantity of `1`). Click the Purchase button:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到包含您购物车的原始标签（原始数量为`1`的购物车）。点击购买按钮：
- en: '![](img/00247.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00247.jpeg)'
- en: 'At the next screen, before clicking the Confirm button, switch to the second
    tab, and update the cart again, but this time with our new quantity of `10`, and
    click on Update Cart:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，在点击确认按钮之前，切换到第二个标签，并再次更新购物车，但这次使用我们的新数量`10`，然后点击更新购物车：
- en: '![](img/00248.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00248.jpeg)'
- en: 'Return to the first tab, and click the Confirm button:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回第一个标签，并点击确认按钮：
- en: '![](img/00249.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00249.jpeg)'
- en: Notice we were able to purchase 10 Sony Vaio laptops for the price of one!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们能够以一个商品的价格购买10台Sony Vaio笔记本电脑！
- en: '![](img/00250.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00250.jpeg)'
- en: How it works...
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Thread-safety issues can produce unintended results. For many languages, the
    developer's knowledge of how to declare variables and methods as thread-safe is
    imperative. Threads that are not isolated, such as the cart contents shown in
    this recipe, can result in users gaining unintended discounts on products.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 线程安全问题可能会产生意外结果。对于许多语言，开发人员对如何将变量和方法声明为线程安全的了解至关重要。未被隔离的线程，例如本教程中显示的购物车内容，可能导致用户获得意外的产品折扣。
- en: Unrestricted file upload – bypassing weak validation
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无限制文件上传-绕过弱验证
- en: Many applications allow for files to be uploaded for various reasons. Business
    logic on the server-side must include checking for acceptable files; this is known
    as **whitelisting**. If such checks are weak or only address one aspect of file
    attributes (for example, file extensions only), attackers can exploit these weaknesses
    and upload unexpected file types that may be executable on the server.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 许多应用程序允许上传文件以各种原因。服务器端的业务逻辑必须包括检查可接受的文件；这被称为**白名单**。如果此类检查薄弱或仅涉及文件属性的一个方面（例如，仅限于文件扩展名），攻击者可以利用这些弱点并上传可能在服务器上可执行的意外文件类型。
- en: Getting ready
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做好准备
- en: Using the **Damn Vulnerable Web Application** (**DVWA**)application and Burp,
    we will exploit a business logic design flaw in the file upload page.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**Damn Vulnerable Web Application**（**DVWA**）应用程序和Burp，我们将利用文件上传页面中的业务逻辑设计缺陷。
- en: How to do it...
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Ensure the owaspbwa VM is running. Select DVWA from the initial landing page
    of the VM. The landing page will be configured to an IP address specific to your
    machine.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保owaspbwa VM正在运行。从VM的初始登陆页面选择DVWA。登陆页面将配置为与您的计算机特定的IP地址。
- en: 'At the login page, use these credentials: Username: `user`; Password: `user`.'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在登录页面，使用以下凭据：用户名：`user`；密码：`user`。
- en: 'Select the DVWA Security option from the menu on the left. Change the default
    setting of low to medium and then click Submit:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧菜单中选择DVWA安全选项。将默认设置从低更改为中，然后单击提交：
- en: '![](img/00251.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00251.jpeg)'
- en: 'Select the Upload page from the menu on the left:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧菜单中选择“上传”页面：
- en: '![](img/00252.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00252.jpeg)'
- en: 'Note the page instructs users to only upload images. If we try another type
    of file other than a JPG image, we receive an error message in the upper left-hand
    corner:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意页面指示用户只能上传图像。如果我们尝试上传除JPG图像以外的其他类型的文件，我们将在左上角收到错误消息：
- en: '![](img/00253.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00253.jpeg)'
- en: On your local machine, create a file of any type, other than JPG. For example,
    create a Microsoft Excel file called `malicious_spreadsheet.xlsx`. It does not
    need to have any content for the purpose of this recipe.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地计算机上创建任何类型的文件，除了JPG。例如，创建一个名为`malicious_spreadsheet.xlsx`的Microsoft Excel文件。出于本教程的目的，它不需要任何内容。
- en: Switch to Burp's Proxy | Intercept tab. Turn Interceptor on with the button
    Intercept is on.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp的代理|拦截选项卡。使用“拦截器”按钮打开拦截器。
- en: 'Return to Firefox, and use the Browse button to find the `malicious_spreadsheet.xlsx`
    file on your system and click the Upload button:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到Firefox，并使用浏览按钮在系统上找到`malicious_spreadsheet.xlsx`文件，然后单击上传按钮：
- en: '![](img/00254.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00254.jpeg)'
- en: With the request paused in Burp's Proxy | Interceptor, change the **Content-type**
    from `application/vnd.openxmlformats-officedocument.spreadsheet.sheet` to `image/jpeg`
    instead.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Burp的代理|拦截器中暂停请求，将**Content-type**从`application/vnd.openxmlformats-officedocument.spreadsheet.sheet`更改为`image/jpeg`。
- en: 'Here is the original:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是原始版本：
- en: '![](img/00255.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00255.jpeg)'
- en: 'Here is the modified version:'
  id: totrans-71
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是修改后的版本：
- en: '![](img/00256.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00256.jpeg)'
- en: Click the Forward button. Now turn Interceptor off by clicking the toggle button
    to Intercept is off.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击前进按钮。现在通过单击拦截器上的切换按钮将拦截器关闭。
- en: 'Note the file uploaded successfully!  We were able to bypass the weak data
    validation checks and upload a file other than an image:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意文件上传成功！我们能够绕过弱数据验证检查并上传除图像以外的文件：
- en: '![](img/00257.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00257.jpeg)'
- en: How it works...
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Due to weak server-side checks, we are able to easily circumvent the image-only restriction
    and upload a file type of our choice. The application code only checks for content
    types matching `image/jpeg`, which is easily modified with an intercepting proxy
    such as Burp. Developers need to simultaneously whitelist both content-type as
    well as file extensions in the application code to prevent this type of exploit
    from occurring.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 由于服务器端检查薄弱，我们能够轻松规避仅限于图像的限制并上传我们选择的文件类型。应用程序代码仅检查与`image/jpeg`匹配的内容类型，这很容易通过Burp等拦截代理进行修改。开发人员需要同时在应用程序代码中将内容类型和文件扩展名列入白名单，以防止此类利用发生。
- en: Performing process-timing attacks
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行过程时间攻击
- en: By monitoring the time an application takes to complete a task, it is possible
    for attackers to gather or infer information about how an application is coded.
    For example, a login process using valid credentials receives a response quicker
    than the same login process given invalid credentials. This delay in response
    time leaks information related to system processes. An attacker could use a response
    time to perform account enumeration and determine valid usernames based upon the
    time of the response.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 通过监视应用程序完成任务所需的时间，攻击者可以收集或推断有关应用程序编码的信息。例如，使用有效凭据的登录过程比使用无效凭据的登录过程更快地收到响应。响应时间的延迟泄漏了与系统进程相关的信息。攻击者可以使用响应时间执行帐户枚举，并根据响应时间确定有效用户名。
- en: Getting ready
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做好准备
- en: 'For this recipe, you will need the `common_pass.txt` wordlist from `wfuzz`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此教程，您将需要来自`wfuzz`的`common_pass.txt`单词列表：
- en: '[https://github.com/xmendez/wfuzz](https://github.com/xmendez/wfuzz)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/xmendez/wfuzz](https://github.com/xmendez/wfuzz)'
- en: 'Path: `wordlists` | `other` | `common_pass.txt`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路径：`wordlists` | `other` | `common_pass.txt`
- en: Using OWASP Mutillidae II, we will determine whether the application provides
    information leakage based on the response time from forced logins.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OWASP Mutillidae II，我们将确定应用程序是否基于强制登录的响应时间提供信息泄漏。
- en: How to do it...
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Ensure Burp is running, and also ensure that the owaspbwa VM is running and
    that Burp is configured in the Firefox browser used to view owaspbwa applications.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 确保Burp正在运行，并确保owaspbwa VM正在运行，并且已经在用于查看owaspbwa应用程序的Firefox浏览器中配置了Burp。
- en: From the owaspbwa landing page, click the link to OWASP Mutillidae II application.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从owaspbwa登陆页面，单击链接到OWASP Mutillidae II应用程序。
- en: 'Open Firefox browser to the home of OWASP Mutillidae II (URL: `http://<your_VM_assigned_IP_address>/mutillidae/`).'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Firefox浏览器，转到OWASP Mutillidae II的主页（URL：`http://<your_VM_assigned_IP_address>/mutillidae/`）。
- en: Go to the login page and log in using the username `ed` and the password `pentest`.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到登录页面，使用用户名`ed`和密码`pentest`登录。
- en: 'Switch to Burp''s Proxy | HTTP history tab, find the login you just performed,
    right-click, and select Send to Intruder:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp的代理|HTTP历史选项卡，找到刚刚执行的登录，右键单击，并选择发送到入侵者：
- en: '![](img/00258.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00258.jpeg)'
- en: 'Go to the Intruder | Positions tab, and clear all the payload markers, using
    the Clear § button on the right-hand side:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到入侵者|位置选项卡，并清除所有有效负载标记，使用右侧的清除§按钮：
- en: '![](img/00259.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00259.jpeg)'
- en: 'Select the password field and click the Add §button to wrap a payload marker
    around that field:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择密码字段，并单击“添加§”按钮以在该字段周围添加有效负载标记：
- en: '![](img/00260.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00260.jpeg)'
- en: 'Also, remove the `PHPSESSID` token. Delete the value present in this token
    (the content following the equals sign) and leave it blank. This step is very
    important, because if you happen to leave this token in the requests, you will
    be unable to see the difference in the timings, since the application will think
    you are already logged in:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还要删除`PHPSESSID`令牌。删除此令牌中的值（等号后面的内容），并将其留空。这一步非常重要，因为如果您不小心在请求中留下此令牌，您将无法看到时间差异，因为应用程序会认为您已经登录：
- en: '![](img/00261.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00261.jpeg)'
- en: 'Go to the Intruder | Payloads tab. Within the Payload Options [Simple list],
    we will add some invalid values by using a `wordlist` from `wfuzz` containing
    common passwords: `wfuzz` | `wordlists` | `other` | `common_pass.txt`:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到入侵者|有效负载选项卡。在有效负载选项[简单列表]中，我们将使用来自`wfuzz`的`wordlist`添加一些无效值，其中包含常见密码：`wfuzz`
    | `wordlists` | `other` | `common_pass.txt`：
- en: '![](img/00262.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00262.jpeg)'
- en: 'Scroll to the bottom and uncheck the checkbox for `Payload Encoding`:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到底部，取消“有效负载编码”的复选框：
- en: '![](img/00263.jpeg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00263.jpeg)'
- en: 'Click the Start attack button. An attack results table appears. Let the attacks
    complete. From the attack results table, select Columns and check Response received.
    Check Response completed to add these columns to the attack results table:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“开始攻击”按钮。将显示一个攻击结果表。让攻击完成。从攻击结果表中，选择列并选中“接收响应”。选中“完成响应”以将这些列添加到攻击结果表中：
- en: '![](img/00264.jpeg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00264.jpeg)'
- en: 'Analyze the results provided. Though not obvious on every response, note the
    delay when an invalid password is used such as `administrator`. The `Response
    received` timing is `156`, but the `Response completed` timing is `166`. However,
    the valid password of `pentest` (only `302`) receives an immediate response: `50`
    (received), and `50` (completed):'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分析提供的结果。虽然并非在每个响应中都明显，但请注意当使用无效密码（如`administrator`）时的延迟。`接收响应`时间为`156`，但`完成响应`时间为`166`。然而，有效密码`pentest`（仅`302`）会立即收到响应：`50`（接收），和`50`（完成）：
- en: '![](img/00265.jpeg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00265.jpeg)'
- en: How it works...
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Information leakage can occur when processing error messages or invalid coding
    paths takes longer than valid code paths. Developers must ensure the business
    logic does not give away such clues to attackers.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理错误消息或无效编码路径时，可能会发生信息泄露，这比有效的编码路径花费更长的时间。开发人员必须确保业务逻辑不会向攻击者透露这些线索。
- en: Testing for the circumvention of work flows
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试工作流的规避
- en: Shopping cart to payment gateway interactions must be tested by web app penetration
    testers to ensure the workflow cannot be performed out of sequence. A payment
    should never be made unless a verification of the cart contents is checked on
    the server-side first. In the event this check is missing, an attacker can change
    the price, quantity, or both, prior to the actual purchase.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 必须由Web应用程序渗透测试人员测试购物车到支付网关的交互，以确保工作流程不能按顺序执行。除非在服务器端首先验证了购物车内容，否则不应进行付款。如果缺少此检查，攻击者可以在实际购买之前更改价格、数量或两者。
- en: Getting ready
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Using the OWASP WebGoat application and Burp, we will exploit a business logic
    design flaw in which there is no server-side validation prior to a purchase.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OWASP WebGoat应用程序和Burp，我们将利用业务逻辑设计缺陷，在购买之前没有服务器端验证。
- en: How to do it...
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Ensure the owaspbwa VM is running. Select the OWASP WebGoat application from
    the initial landing page of the VM. The landing page will be configured to an
    IP address specific to your machine.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保owaspbwa VM正在运行。从VM的初始登陆页面选择OWASP WebGoat应用程序。登陆页面将配置为特定于您的计算机的IP地址。
- en: 'After you click the OWASP WebGoat link, you will be prompted for login credentials.
    Use these credentials: User Name: `guest`; password: `guest`.'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击OWASP WebGoat链接后，将提示您输入登录凭据。使用以下凭据：用户名：`guest`；密码：`guest`。
- en: After authentication, click the Start WebGoat button to access the application
    exercises.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 认证后，单击“开始WebGoat”按钮以访问应用程序练习。
- en: 'Click AJAX Security | Insecure Client Storage from the left-hand menu. You
    are presented with a shopping cart:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击左侧菜单中的AJAX安全性|不安全的客户端存储。您将看到一个购物车：
- en: '![](img/00266.jpeg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00266.jpeg)'
- en: 'Switch to Burp''s **Proxy** | **HTTP history** tab, Click the Filter button,
    and ensure your Filter by MIME type section includes Script. If Script is not
    checked, be sure to check it now:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp的**代理**|**HTTP历史**选项卡，单击“过滤”按钮，并确保您的“按MIME类型过滤”部分包括“脚本”。如果未选中“脚本”，请务必现在选中它：
- en: '![](img/00267.jpeg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00267.jpeg)'
- en: 'Return to the Firefox browser with WebGoat and specify a quantity of `2` for
    the `Hewlett-Packard - Pavilion Notebook with Intel Centrino` item:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到Firefox浏览器，使用WebGoat并为“惠普 - 带英特尔Centrino的Pavilion笔记本”项目指定数量为`2`：
- en: '![](img/00268.jpeg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00268.jpeg)'
- en: 'Switch back to Burp''s **Proxy** | **HTTP history** tab and notice the JavaScript
    (`*.js`) files associated with the change you made to the quantity. Note a script
    called `clientSideValiation.js`*. *Make sure the status code is `200` and not
    `304` (not modified). Only the *200* status code will show you the source code
    of the script:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回Burp的**代理**|**HTTP历史**选项卡，并注意与您对数量所做的更改相关的JavaScript（`*.js`）文件。注意一个名为`clientSideValiation.js`的脚本。确保状态码为`200`而不是`304`（未修改）。只有*200*状态码才会显示脚本的源代码：
- en: '![](img/00269.jpeg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00269.jpeg)'
- en: Select the `clientSideValidation.js` file and view its source code in the Response
    tab.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`clientSideValidation.js`文件，并在响应选项卡中查看其源代码。
- en: 'Note that coupon codes are hard-coded within the JavaScript file. However,
    used literally as they are, they will not work:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，优惠码在JavaScript文件中是硬编码的。但是，如果按照它们的字面意思使用，它们将不起作用：
- en: '![](img/00270.jpeg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00270.jpeg)'
- en: 'Keep looking at the source code and notice there is a `decrypt` function found
    in the JavaScript file. We can test one of the coupon codes by sending it through
    this function. Let’s try this test back in the Firefox browser:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续查看源代码，并注意在JavaScript文件中找到了一个`decrypt`函数。我们可以通过这个函数测试其中一个优惠码。让我们在Firefox浏览器中尝试这个测试：
- en: '![](img/00271.jpeg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00271.jpeg)'
- en: 'In the browser, bring up the developer tools (*F12*) and go to the Console
    tab. Paste into the console (look for the `>>` prompt) the following command:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开开发者工具（*F12*），转到控制台选项卡。在控制台中粘贴（查找`>>`提示）以下命令：
- en: '[PRE0]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You may use this command to call the `decrypt` function on any of the coupon
    codes declared within the array:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用此命令对数组中声明的任何优惠码调用`decrypt`函数：
- en: '![](img/00272.jpeg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00272.jpeg)'
- en: 'After pressing *Enter*, you will see the coupon code is decrypted to the word
    `GOLD`:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*Enter*键后，您将看到优惠码被解密为单词`GOLD`：
- en: '![](img/00273.jpeg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00273.jpeg)'
- en: 'Place the word `GOLD` within the Enter your coupon code box. Notice the amount
    is now much less. Next, click the Purchase button:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“输入您的优惠码”框中输入单词`GOLD`。注意金额现在要少得多。接下来，点击“购买”按钮：
- en: '![](img/00274.jpeg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00274.jpeg)'
- en: 'We receive confirmation regarding stage 1 completion. Let''s now try to get
    the purchase for free:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们收到有关第1阶段完成的确认。现在让我们试着免费购买：
- en: '![](img/00275.jpeg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00275.jpeg)'
- en: Switch to Burp's **Proxy** | **Intercept** tab and turn Interceptor on with
    the button **Intercept is on**.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp的**代理** | **拦截**选项卡，并使用**拦截器打开**按钮打开拦截器。
- en: 'Return to Firefox and press the **Purchase** button. While the request is paused,
    modify the $1,599.99 amount to $0.00\. Look for the `GRANDTOT` parameter to help
    you find the grand total to change:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到Firefox并按下**购买**按钮。在请求暂停时，将$1,599.99的金额修改为$0.00。查找`GRANDTOT`参数以帮助您找到要更改的总金额：
- en: '![](img/00276.jpeg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00276.jpeg)'
- en: Click the **Forward** button. Now turn Interceptor off by clicking the toggle
    button to Intercept is off.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**转发**按钮。现在通过单击拦截器关闭切换按钮来关闭拦截器。
- en: 'You should receive a success message. Note the total charged is now $0.00:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该收到一个成功的消息。请注意，现在收取的总费用为$0.00：
- en: '![](img/00277.jpeg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00277.jpeg)'
- en: How it works...
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Due to a lack of server-side checking for both the coupon code as well as the
    grand total amount prior to charging the credit card, we are able to circumvent
    the prices assigned and set our own prices instead.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在收取信用卡之前，未对优惠码和总金额进行服务器端检查，因此我们能够规避分配的价格并自行设置价格。
- en: Uploading malicious files – polyglots
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传恶意文件 - 多语言
- en: '**Polyglot** is a term defined as something that uses several languages. If
    we carry this concept into hacking, it means the creation of a **cross-site scripting**
    (**XSS**) attack vector by using different languages as execution points. For
    example, attackers can construct valid images and embed JavaScript with them.
    The placement of the JavaScript payload is usually in the comments section of
    an image. Once the image is loaded in a browser, the XSS content may execute,
    depending upon the strictness of the content-type declared by the web server and
    the interpretation of the content-type by the browser.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**多语言**是一个使用多种语言的术语。如果我们将这个概念引入黑客行为，它意味着通过使用不同的语言作为执行点来创建**跨站脚本**（**XSS**）攻击向量。例如，攻击者可以构造有效的图像并嵌入JavaScript。
    JavaScript有效负载的放置通常在图像的注释部分。一旦图像在浏览器中加载，取决于Web服务器声明的内容类型的严格性以及浏览器对内容类型的解释，XSS内容可能会执行。'
- en: Getting ready
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Download a JPG file containing a cross-site scripting vulnerability from the
    PortSwigger blog page: [https://portswigger.net/blog/bypassing-csp-using-polyglot-jpegs](https://portswigger.net/blog/bypassing-csp-using-polyglot-jpegs)'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从PortSwigger博客页面下载一个包含跨站脚本漏洞的JPG文件：[https://portswigger.net/blog/bypassing-csp-using-polyglot-jpegs](https://portswigger.net/blog/bypassing-csp-using-polyglot-jpegs)
- en: Here is a direct link to the polyglot image: [http://portswigger-labs.net/polyglot/jpeg/xss.jpg](http://portswigger-labs.net/polyglot/jpeg/xss.jpg)
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一个多语言图像的直接链接：[http://portswigger-labs.net/polyglot/jpeg/xss.jpg](http://portswigger-labs.net/polyglot/jpeg/xss.jpg)
- en: Using the OWASP WebGoat file upload functionality, we will plant an image into
    the application that contains an XSS payload.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用OWASP WebGoat文件上传功能，我们将在应用程序中植入一个包含XSS有效负载的图像。
- en: How to do it...
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Ensure the owaspbwa VM is running. Select the OWASP WebGoat application from
    the initial landing page of the VM. The landing page will be configured to an
    IP address specific to your machine.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保owaspbwa虚拟机正在运行。从虚拟机的初始登陆页面选择OWASP WebGoat应用程序。登陆页面将配置为与您的机器特定的IP地址。
- en: 'After you click the OWASP WebGoat link, you will be prompted for login credentials.
    Use these credentials: username: `guest`*;* password: `guest`*.*'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击OWASP WebGoat链接后，将提示您输入登录凭据。使用以下凭据：用户名：`guest`*；*密码：`guest`*。*
- en: After authentication, click the Start WebGoat button to access the application
    exercises.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 经过身份验证后，单击“启动WebGoat”按钮以访问应用程序练习。
- en: 'Click **Malicious Execution** | **Malicious File Execution** from the left-hand
    menu. You are presented with a file upload functionality page. The instructions
    state that only images are allowed for upload:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧菜单中点击**恶意执行** | **恶意文件执行**。您将看到一个文件上传功能页面。说明中指出，只允许上传图像：
- en: '![](img/00278.jpeg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00278.jpeg)'
- en: Browse to the location where you saved the `xss.jpg` image that you downloaded
    from the PortSwigger blog page mentioned at the beginning of this recipe.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到您从本食谱开头提到的PortSwigger博客页面下载的`xss.jpg`图像所保存的位置。
- en: The following screenshot how the image looks. As you can see, it is difficult
    to detect any XSS vulnerability contained within the image. It is hidden from
    plain view.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是图像的屏幕截图。正如你所看到的，很难检测到图像中包含的任何XSS漏洞。它被隐藏得很隐蔽。
- en: 'Click the **Browse** button to select the `xss.jpg` file:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**浏览**按钮选择`xss.jpg`文件：
- en: '![](img/00279.jpeg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00279.jpeg)'
- en: 'Switch to Burp''s **Proxy** | **Options**. Make sure you are capturing **Client
    responses** and have the following settings enabled. This will allow us to capture
    HTTP responses modified or intercepted:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp的**代理** | **选项**。确保你正在捕获**客户端响应**并且已启用以下设置。这将允许我们捕获修改或拦截的HTTP响应：
- en: '![](img/00280.jpeg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00280.jpeg)'
- en: Switch to Burp's **Proxy** | **Intercept** tab. Turn Interceptor on with the
    button Intercept is on.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp的**代理** | **拦截**选项卡。通过单击拦截器打开按钮打开拦截器。
- en: Return to the Firefox browser, and click the **Start Upload** button. The message
    should be paused within Burp's Interceptor.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到Firefox浏览器，然后点击**开始上传**按钮。消息应该在Burp的拦截器中暂停。
- en: '![](img/00281.jpeg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00281.jpeg)'
- en: 'Within the Intercept window while the request is paused, type `Burp rocks`
    into the search box at the bottom. You should see a match in the middle of the
    image. This is our polyglot payload. It is an image, but it contains a hidden
    XSS script within the comments of the image:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在请求暂停时的拦截窗口中，在底部的搜索框中键入`Burp rocks`。你应该在图像中间看到一个匹配项。这是我们的多语言有效负载。它是一张图片，但它包含了图像注释中的隐藏XSS脚本：
- en: '![](img/00282.jpeg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00282.jpeg)'
- en: Click the **Forward** button. Now turn Interceptor off by clicking the toggle
    button to Intercept is off.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**转发**按钮。现在通过单击拦截器关闭按钮关闭拦截器。
- en: 'Using Notepad or your favorite text editor, create a new file called `poly.jsp`,
    and write the following code within the file:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用记事本或你喜欢的文本编辑器，创建一个名为`poly.jsp`的新文件，并在文件中写入以下代码：
- en: '![](img/00283.gif)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00283.gif)'
- en: 'Return to the **Malicious File Execution** page, and browse to the `poly.jsp`
    file you created, and then click the **Start Upload** button. The `poly.jsp` is
    a Java Server Pages file that is executable on this web server. Following the
    instructions, we must create a `guest.txt` file in the path provided. This code
    creates that file in JSP scriptlet tag code:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到**恶意文件执行**页面，并浏览到你创建的`poly.jsp`文件，然后点击**开始上传**按钮。`poly.jsp`是一个可以在这个Web服务器上执行的Java服务器页面文件。根据说明，我们必须在提供的路径中创建一个`guest.txt`文件。此代码在JSP脚本标记代码中创建该文件：
- en: '![](img/00284.jpeg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00284.jpeg)'
- en: Right-click the unrecognized image, and select **Copy Image Location**.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击未识别的图像，然后选择**复制图像位置**。
- en: Open a new tab within the same Firefox browser as WebGoat, and paste the image
    location in the new tab. Press *Enter* to execute the script, and give the script
    a few seconds to run in the background before moving to the next step.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与WebGoat相同的Firefox浏览器中打开一个新标签，并在新标签中粘贴图像位置。按*Enter*执行脚本，并在转到下一步之前给脚本几秒钟在后台运行。
- en: 'Flip back to the first tab, *F5*, to refresh the page, and you should receive
    the successfully completed message. If your script is running slowly, try uploading
    the `poly.jsp` on the upload page again. The success message should appear:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回第一个标签，*F5*，刷新页面，你应该收到成功完成的消息。如果你的脚本运行缓慢，尝试在上传页面上再次上传`poly.jsp`。成功消息应该出现：
- en: '![](img/00285.jpeg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00285.jpeg)'
- en: How it works...
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Due to unrestricted file upload vulnerability, we can upload a malicious file
    such as a polyglot without detection from the web server. Many sites allow images
    to be uploaded, so developers must ensure such images do not carry XSS payloads
    within them. Protection in this area can be in the form of magic number checks
    or special proxy servers screening all uploads.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 由于不受限制的文件上传漏洞，我们可以上传恶意文件，如多语言文件，而不会被Web服务器检测到。许多网站允许上传图片，因此开发人员必须确保这些图片不携带其中的XSS有效负载。在这方面的保护可以采用魔术数字检查或特殊代理服务器筛选所有上传。
- en: There's more...
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: To read more about polyglots, please refer to the Portswigger blog: [https://portswigger.net/blog/bypassing-csp-using-polyglot-jpegs](https://portswigger.net/blog/bypassing-csp-using-polyglot-jpegs).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于多语言的信息，请参考Portswigger博客：[https://portswigger.net/blog/bypassing-csp-using-polyglot-jpegs](https://portswigger.net/blog/bypassing-csp-using-polyglot-jpegs)。
