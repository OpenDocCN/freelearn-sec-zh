- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Secure Coding Practices for APIs
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API的安全编码实践
- en: Welcome to the end of our book, which matches the beginning of your **Application
    Programming Interface** (**API**) pentesting journey! If you’ve been reading this
    book from [*Chapter 1*](B19657_01.xhtml#_idTextAnchor014), we’ve been together
    for quite a while, covering and learning about different aspects of APIs in their
    most diverse forms, sticking with penetration techniques but still having an eye
    on what application owners and developers should pay attention to before releasing
    their APIs. An API opens the door of applications, services, and entire businesses
    to the world. This door represents an immense responsibility for a software and
    is surely extensible for all the infrastructure that supports it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到本书的结尾，这也标志着你**应用程序编程接口**（**API**）渗透测试之旅的开始！如果你从[*第一章*](B19657_01.xhtml#_idTextAnchor014)开始阅读本书，我们已经一起走过了一段不短的路，涵盖并学习了API的不同方面，以其最广泛的形式，专注于渗透技术，但仍然关注应用程序所有者和开发者在发布API之前需要注意的事项。API为世界打开了应用程序、服务和整个业务的大门。这扇门代表着软件的巨大责任，当然也可以扩展到支撑它的所有基础设施。
- en: 'The upcoming sections bring recommendations when coding to build APIs. You
    will find tips and practices in some modern programming languages and technologies,
    the ones that are more applied when creating APIs: Golang, GraphQL, Java, JavaScript,
    and Python. All major problems that were tackled in this book are covered. As
    you may already know, security is about layered protection. There’s no one-size-fits-all.
    We should pay attention to the eventual attack surface we are creating when coding.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分提供了在编码时构建API的建议。你将找到一些现代编程语言和技术的技巧和实践，这些语言和技术在创建API时应用得最广泛：Golang、GraphQL、Java、JavaScript和Python。书中讨论的所有主要问题都涵盖了。正如你可能已经知道的，安全是分层保护的概念。没有一种放之四海而皆准的方法。我们应该注意在编码时可能创造的攻击面。
- en: This book is about attacking, but it’s ethical enough to discuss the prevention
    of attacks too. It doesn’t hurt to say that. At the end of the day, we are security
    professionals, and our main intent is to reinforce the software we are testing
    for the sake of reducing the chances of an invasion or data leakage.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书讲的是攻击，但它也足够道德，讨论了攻击的预防。说这些并不为过。归根结底，我们是安全专业人员，我们的主要目的是加强我们测试的软件，以减少入侵或数据泄漏的机会。
- en: 'In this chapter, we’re going to cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The importance of secure coding practices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全编码实践的重要性
- en: Implementing secure authentication mechanisms
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施安全的认证机制
- en: Validating and sanitizing user input
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证和清理用户输入
- en: Implementing proper error handling and exception management
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施适当的错误处理和异常管理
- en: Best practices for data protection and encryption
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据保护和加密的最佳实践
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: As we are not going to do any practical exercise in this chapter, there are
    no technical requirements. If you, however, feel compelled to put the code into
    practice, be my guest. As the saying goes, practice makes perfect. Just go for
    it and enjoy it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在本章中不会进行任何实际练习，因此没有技术要求。不过，如果你感觉有必要将代码付诸实践，随时欢迎。俗话说，熟能生巧。尽管去做，享受其中吧。
- en: The importance of secure coding practices
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全编码实践的重要性
- en: I’m not trying to teach your grandmother to suck eggs. Not at all. However,
    as I like to say in person and while writing this book, it never hurts to emphasize
    concepts and ideas that are paramount to something. Putting API-secure coding
    into practice is important because of the intricate and complex role APIs play
    in software development. They act as links between diverse applications and services,
    making them able to talk to each other and exchange data. This feature-rich scenario
    results in a situation in which the vulnerabilities embedded in some API may be
    explored (or, as is most commonly said, exploited), allowing unauthorized data
    access, privilege escalation, service disruption, or system criminal ownership,
    and sometimes resulting in data ransom. Thus, secure coding practices aid in mitigating
    these risks by increasing API robustness against common threats, such as injection
    (SQL or NoSQL), **Cross-site Scripting** (**XSS**), and **Man-in-the-middle**
    (**MitM**).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我并不是想教你的祖母如何吸鸡蛋。完全不是。然而，正如我在亲自和写这本书时常说的那样，强调一些对某件事至关重要的概念和想法从来不会有坏处。将API安全编码付诸实践非常重要，因为API在软件开发中扮演着复杂且关键的角色。它们充当不同应用程序和服务之间的桥梁，使它们能够相互通信和交换数据。这个功能丰富的场景导致了某些API中嵌入的漏洞可能被探测（或者，更常见地说，被利用），从而允许未经授权的数据访问、权限提升、服务中断或系统被非法控制，有时还会导致数据勒索。因此，安全编码实践有助于通过增强API对常见威胁的防御能力，降低这些风险，如注入攻击（SQL或NoSQL）、**跨站脚本**（**XSS**）和**中间人攻击**（**MitM**）。
- en: Moreover, these practices collaborate to sustain the business’ trust and reputation
    among its customers. Nowadays, data leaks and security incidents may impose significant
    damages on companies, which include but are not limited to financial losses, legal
    penalties (some due to compliance mechanisms), and cracks in the company’s reputation.
    Customers and regular users expect not only that the services provided by APIs
    work smoothly and are always available but also that their data is correctly handled
    and protected.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这些实践共同帮助维持企业在客户中的信任与声誉。如今，数据泄露和安全事件可能对公司造成重大损害，包括但不限于财务损失、法律处罚（其中一些是由于合规机制）、以及公司声誉的裂痕。客户和常规用户不仅期望API提供的服务能顺利运行并始终可用，还期望他们的数据能够得到正确处理和保护。
- en: 'There are some secure coding methodologies that can be adopted by companies
    to help them establish a decent **Software Development Life Cycle** (**SDLC**).
    If you haven’t heard about this yet, it’s just a process that is applicable when
    software is being developed. Such a process has stages, such as planning, designing,
    coding, testing, deployment, and maintenance. With the help of an SDLC, the software
    progresses in each of the phases, which increases the efficiency of project management
    as well as producing high-quality software as a result. Here, you find a humble
    list of SDLC methodologies:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 公司可以采用一些安全编码方法来帮助他们建立一个体面的**软件开发生命周期**（**SDLC**）。如果你还没有听说过，它只是一个在软件开发过程中适用的流程。这样的流程有多个阶段，如规划、设计、编码、测试、部署和维护。在SDLC的帮助下，软件会在每个阶段取得进展，从而提高项目管理的效率，并最终产生高质量的软件。这里列出了一些简单的SDLC方法：
- en: '**Building Security in Maturity Model** (**BSIMM**): Originally a part of the
    **Software Assurance Maturity Model** (**SAMM**), BSIMM has transitioned from
    offering prescriptive guidance to taking a descriptive approach and is regularly
    updated to reflect the latest best practices. Rather than suggesting specific
    actions, BSIMM outlines the activities and practices of its member organizations.
    More information can be found at [https://www.synopsys.com/glossary/what-is-bsimm.html](https://www.synopsys.com/glossary/what-is-bsimm.html).'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全建设成熟度模型**（**BSIMM**）：最初是**软件保障成熟度模型**（**SAMM**）的一部分，BSIMM已经从提供规范性指导转变为采用描述性方法，并定期更新以反映最新的最佳实践。BSIMM并不建议采取具体的行动，而是概述了其成员组织的活动和实践。更多信息可以在[https://www.synopsys.com/glossary/what-is-bsimm.html](https://www.synopsys.com/glossary/what-is-bsimm.html)找到。'
- en: '**Microsoft Secure Development Life Cycle** (**SDL**): This prescriptive approach
    addresses a wide range of security concerns and offers organizations guidance
    on achieving more secure coding practices. It assists in developing software that
    complies with regulatory standards and helps reduce costs. More information can
    be found at [https://www.microsoft.com/en-us/securityengineering/sdl](https://www.microsoft.com/en-us/securityengineering/sdl).'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微软安全开发生命周期**（**SDL**）：这种指导性方法涵盖了广泛的安全问题，并为组织提供了关于实现更安全编码实践的指导。它有助于开发符合监管标准的软件，并有助于降低成本。更多信息请访问[https://www.microsoft.com/en-us/securityengineering/sdl](https://www.microsoft.com/en-us/securityengineering/sdl)。'
- en: '**OWASP Software Assurance Maturity Model** (**SAMM**): SAMM is an open source
    initiative that uses a prescriptive methodology to incorporate security into the
    SDLC. It is maintained by OWASP and benefits from contributions by companies of
    various sizes and sectors. More information can be found at [https://owasp.org/www-project-samm/](https://owasp.org/www-project-samm/).'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OWASP软件保障成熟度模型**（**SAMM**）：SAMM是一个开源倡议，采用指导性方法将安全性纳入SDLC。它由OWASP维护，并得益于各种规模和行业的公司的贡献。更多信息请访问[https://owasp.org/www-project-samm/](https://owasp.org/www-project-samm/)。'
- en: Demonstrating a commitment to security through rigorous coding practices can
    help build and maintain trust with stakeholders. It also shows regulatory bodies
    that the company is serious about compliance with data protection laws and industry
    standards, which can prevent legal issues down the line. Another helpful resource
    is the OWASP Developer Guide ([https://owasp.org/www-project-developer-guide/](https://owasp.org/www-project-developer-guide/)),
    which provides a fairly complete list of definitions and guidelines on how to
    generally increase code security. When this book was being written, the guide
    was on version `4.1.0`. Of course, do not ever forget to check the OWASP Top Ten
    API, which is available at [https://owasp.org/API-Security/editions/2023/en/0x11-t10/](https://owasp.org/API-Security/editions/2023/en/0x11-t10/).
    The current release is from 2023 and it details the ten most dangerous threats
    to APIs. We discussed them in *Chapters 1* and *3*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通过严格的编码实践展示对安全的承诺可以帮助与利益相关者建立和维护信任。它还向监管机构表明公司对遵守数据保护法律和行业标准非常认真，这可以避免后续的法律问题。另一个有用的资源是OWASP开发人员指南（[https://owasp.org/www-project-developer-guide/](https://owasp.org/www-project-developer-guide/)），它提供了一个相当完整的定义和指南列表，介绍了如何普遍提高代码安全性。在编写本书时，该指南的版本是`4.1.0`。当然，永远不要忘记检查OWASP十大API，可在[https://owasp.org/API-Security/editions/2023/en/0x11-t10/](https://owasp.org/API-Security/editions/2023/en/0x11-t10/)找到。当前版本是2023年，详细介绍了API的十大最危险威胁。我们在*第1*和*第3*章中讨论了它们。
- en: Lastly, secure coding practices help ensure the long-term sustainability and
    scalability of software systems. As applications grow and evolve, maintaining
    a secure foundation becomes increasingly complex. Early adoption of secure coding
    practices helps create a culture of security within development teams, making
    it easier to identify and fix vulnerabilities before they become significant issues.
    This proactive approach to security can save time and resources by reducing the
    need for extensive security patches and mitigating the impact of potential security
    breaches. In turn, this leads to more stable, resilient applications that can
    adapt to new challenges and threats in the ever-evolving digital landscape. Let’s
    start discussing the various relevant topics.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，安全编码实践有助于确保软件系统的长期可持续性和可扩展性。随着应用程序的增长和演变，维护安全基础变得越来越复杂。早期采用安全编码实践有助于在开发团队内建立安全文化，使更容易识别和修复漏洞，避免它们成为重大问题。这种积极的安全方法可以通过减少对广泛安全补丁的需求和减轻潜在安全漏洞的影响来节省时间和资源。反过来，这将导致更稳定、更具弹性的应用程序，能够适应不断发展的数字环境中的新挑战和威胁。让我们开始讨论各种相关主题。
- en: Implementing secure authentication mechanisms
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施安全的身份验证机制
- en: 'We covered attacks on secure authentication mechanisms in [*Chapter 4*](B19657_04.xhtml#_idTextAnchor056).
    Authentication is a crucial component of API security, ensuring that only authorized
    users can access protected resources. Implementing secure authentication mechanisms
    requires careful consideration of various factors. For instance, using strong,
    unique passwords and hashing them with modules such as `bcrypt` in Python can
    significantly enhance security. Avoid storing passwords in plaintext or using
    weak hashing algorithms such as MD5\. In Java, libraries such as Spring Security
    provide robust authentication mechanisms, including support for OAuth2 and JWTs.
    An insecure implementation might directly accept user credentials and return a
    token without proper validation, making it vulnerable to attacks. Instead, developers
    should enforce `bcrypt`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第4章*](B19657_04.xhtml#_idTextAnchor056)中讨论了针对安全身份验证机制的攻击。身份验证是 API 安全的关键组成部分，确保只有授权的用户才能访问受保护的资源。实现安全的身份验证机制需要仔细考虑各种因素。例如，在
    Python 中，使用强大且独特的密码，并通过像 `bcrypt` 这样的模块进行哈希处理，可以显著增强安全性。避免以明文形式存储密码，或使用像 MD5 这样的弱哈希算法。在
    Java 中，像 Spring Security 这样的库提供了强大的身份验证机制，包括对 OAuth2 和 JWT 的支持。不安全的实现可能直接接受用户凭据并返回令牌，而没有进行适当的验证，这样就容易受到攻击。相反，开发者应强制使用
    `bcrypt`：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In JavaScript, especially in Node.js environments, using libraries such as
    `Passport.js` can help manage authentication effectively. However, ensure that
    tokens are stored securely, preferably using `HttpOnly` cookies, to prevent XSS
    attacks. Similarly, in Golang, using middleware such as `gorilla/sessions` to
    handle session management securely is advisable. Flaws in authentication mechanisms
    often arise from improper session management or insecure token storage. Developers
    should ensure that tokens are rotated regularly and that sessions have a timeout
    to mitigate the risk of session hijacking. In GraphQL, make sure to limit the
    query complexity and depth to prevent abuse. Failing to do this might expose sensitive
    user details in error messages, which should be sanitized and kept minimal. The
    following JavaScript code replaces an insecure way of storing tokens by applying
    httpOnly:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，尤其是在 Node.js 环境中，使用像 `Passport.js` 这样的库可以有效地管理身份验证。然而，必须确保安全存储令牌，最好使用
    `HttpOnly` cookies，以防止 XSS 攻击。类似地，在 Golang 中，使用像 `gorilla/sessions` 这样的中间件来安全处理会话管理是明智的。身份验证机制中的漏洞通常源于会话管理不当或令牌存储不安全。开发者应确保令牌定期轮换，并设置会话超时，以减少会话劫持的风险。在
    GraphQL 中，确保限制查询的复杂度和深度，以防滥用。未能做到这一点可能会在错误消息中暴露敏感的用户细节，因此这些消息应该经过清理并保持最小化。以下 JavaScript
    代码通过应用 httpOnly 来替代不安全的令牌存储方式：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the next section, we’ll talk about how to properly manipulate user input.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将讨论如何正确地处理用户输入。
- en: Validating and sanitizing user input
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证和清理用户输入
- en: 'We covered attacks leveraging user input in [*Chapter 5*](B19657_05.xhtml#_idTextAnchor078).
    Validating and sanitizing user input is paramount to prevent injection attacks,
    such as SQL injection, XSS, and command injection. In Python, frameworks such
    as `Django` and `Flask` provide built-in validation tools, but developers must
    ensure that they use them correctly. For instance, relying on raw SQL queries
    without parameterized inputs can lead to SQL injection. Instead, use **Object
    Relational Mapper** (**ORM**) methods that automatically handle parameterization.
    The Python code that follows shows the slight difference of using parameters:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第5章*](B19657_05.xhtml#_idTextAnchor078)中讨论了利用用户输入的攻击。验证和清理用户输入是防止注入攻击的关键，诸如
    SQL 注入、XSS 和命令注入等攻击都可以通过这一措施来避免。在 Python 中，像 `Django` 和 `Flask` 这样的框架提供了内置的验证工具，但开发者必须确保正确使用它们。例如，依赖原始的
    SQL 查询而不使用参数化输入可能导致 SQL 注入。相反，应使用**对象关系映射器**（**ORM**）方法，这些方法可以自动处理参数化。以下 Python
    代码展示了使用参数的细微差异：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In Java, using libraries such as `Hibernate` can help prevent injection attacks
    by utilizing **Hibernate Query Language** (**HQL**) or **Java Persistence Query
    Language** (**JPQL**), which are inherently safe when used properly. However,
    developers must avoid concatenating strings to build queries. The Java excerpt
    that follows applies parameterized queries with HQL replacing the original or
    insecure query:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Java 中，使用像 `Hibernate` 这样的库可以通过使用**Hibernate 查询语言**（**HQL**）或**Java 持久化查询语言**（**JPQL**）来帮助防止注入攻击，这些语言在正确使用时天生是安全的。然而，开发者必须避免拼接字符串来构建查询。以下
    Java 代码示例使用 HQL 替代原始或不安全的查询，并应用参数化查询：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In JavaScript, especially with Node.js, developers should use ORM libraries
    such as `Sequelize` or `Mongoose`, which support parameterized queries. Additionally,
    input validation libraries such as `Joi` can help enforce schema validation. However,
    a common mistake is failing to validate input from all sources, including headers,
    cookies, and query parameters. Look at the snippet that follows, which shows how
    to create a parameterized query with `Sequelize`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，特别是使用 Node.js 时，开发者应使用如`Sequelize`或`Mongoose`这样的 ORM 库，它们支持带参数的查询。此外，像`Joi`这样的输入验证库可以帮助强制执行模式验证。然而，一个常见的错误是没有验证来自所有来源的输入，包括头部、cookie
    和查询参数。请看下面的代码片段，它展示了如何使用`Sequelize`创建带参数的查询：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Golang developers should use libraries such as `validator` to enforce strict
    input validation rules. For example, a flawed input validation might accept unchecked
    user input directly into the application logic, leading to potential vulnerabilities.
    Instead, sanitize and validate all inputs rigorously before processing them. The
    following code uses Golang’s `sql` package to send a parameterized query to a
    database. The `db` variable is generated from this package as well (with `sql.Open()`).
    The difference is quite subtle in the eyes of an attentive reader (or human security
    auditor) but it is impactful in the final result:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Golang 开发者应使用诸如`validator`等库来强制执行严格的输入验证规则。例如，错误的输入验证可能会直接将未经检查的用户输入传递到应用程序逻辑中，从而导致潜在的安全漏洞。相反，应该在处理之前严格地清理和验证所有输入。以下代码使用
    Golang 的`sql`包向数据库发送带参数的查询。`db`变量也是通过该包生成的（使用`sql.Open()`）。对于一个细心的读者（或安全审计员）来说，二者之间的区别非常微妙，但它在最终结果中的影响是显著的：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'GraphQL poses unique challenges for input validation due to its flexible query
    structure. Developers should define strict schemas and use validation middleware
    to ensure that only valid inputs are processed. For instance, an insecure GraphQL
    endpoint might accept arbitrary inputs, leading to resource exhaustion or other
    attacks. By enforcing strict type definitions and validation rules, developers
    can mitigate these risks effectively. The next JavaScript excerpt compares an
    insecure strategy with a secure one. Observe how `user` is internally defined
    with the help of a middleware:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL 因其灵活的查询结构而在输入验证方面带来了独特的挑战。开发者应该定义严格的模式，并使用验证中间件来确保只处理有效的输入。例如，一个不安全的
    GraphQL 端点可能会接受任意输入，从而导致资源耗尽或其他攻击。通过强制执行严格的类型定义和验证规则，开发者可以有效地减轻这些风险。接下来的 JavaScript
    代码片段比较了不安全策略和安全策略。请注意，`user`是如何借助中间件在内部定义的：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the next section, you’ll learn the best practices for how to correctly handle
    errors and exceptions.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分中，你将学习如何正确处理错误和异常的最佳实践。
- en: Implementing proper error handling and exception management
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现适当的错误处理和异常管理
- en: 'We covered attacks with bad error and exception handling in [*Chapter 6*](B19657_06.xhtml#_idTextAnchor102).
    Proper error handling and exception management are critical for maintaining the
    security and stability of APIs. In Python, developers should use `try-except`
    blocks to handle exceptions gracefully and avoid exposing stack traces to the
    client. A common flaw is returning detailed error messages that reveal internal
    logic, which can be exploited by attackers. Instead, provide generic error messages
    and log detailed errors server-side. Do not forget to rotate and encrypt such
    logs. Also, restrict access to the logs only to people and applications that have
    legitimate reasons. The following code block shows two ways of handling exceptions:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第 6 章*](B19657_06.xhtml#_idTextAnchor102)中讨论了错误和异常处理不当的攻击。适当的错误处理和异常管理对于维护
    API 的安全性和稳定性至关重要。在 Python 中，开发者应该使用`try-except`块优雅地处理异常，并避免将堆栈跟踪暴露给客户端。一个常见的缺陷是返回详细的错误信息，这些信息揭示了内部逻辑，攻击者可以利用这些信息进行攻击。相反，应该提供通用的错误信息，并在服务器端记录详细的错误日志。不要忘记定期轮换和加密这些日志。同时，限制只有具有合法理由的人和应用程序才能访问这些日志。以下代码块展示了两种处理异常的方法：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Java developers can leverage the equivalent `try-catch` blocks and custom exception-handling
    mechanisms provided by frameworks such as `Spring` to manage errors securely.
    Avoid exposing sensitive information in exception messages and use logging frameworks
    such as `Logback` or `SLF4J` to log errors securely. The implementation that follows
    is equivalent to the previous one, but in Java, it is as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Java 开发者可以利用 `Spring` 等框架提供的等效 `try-catch` 块和自定义异常处理机制，安全地管理错误。避免在异常消息中暴露敏感信息，并使用如
    `Logback` 或 `SLF4J` 等日志框架安全地记录错误。下面的实现与之前的实现等效，但在 Java 中是这样写的：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In JavaScript, using global error handling middleware in `Express.js` can help
    catch unhandled exceptions and prevent application crashes. However, a common
    mistake is logging errors directly to the console, which can be a security risk.
    Instead, use secure logging mechanisms and ensure that logs do not contain sensitive
    information. Look at how this could be implemented:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，使用 `Express.js` 中的全局错误处理 middleware 可以帮助捕获未处理的异常，并防止应用程序崩溃。然而，一个常见的错误是直接将错误记录到控制台，这可能构成安全风险。相反，应该使用安全的日志记录机制，并确保日志中不包含敏感信息。请看看如何实现：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Golang developers should use **defer-recover patterns** to handle panics and
    ensure that the application does not crash unexpectedly. For example, an insecure
    implementation might panic and expose sensitive data in the response. By recovering
    from panics and returning a generic error message, developers can enhance security.
    Observe in the next code snippet two ways of using a deferred function. They show
    how panic messages are generated:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Golang 开发者应使用**defer-recover 模式**来处理 panic，并确保应用程序不会意外崩溃。例如，一个不安全的实现可能会触发 panic，并在响应中暴露敏感数据。通过从
    panic 中恢复并返回通用的错误信息，开发者可以增强安全性。请观察下方代码示例中使用延迟函数的两种方式，它们展示了 panic 消息的生成方式：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally, in GraphQL, error handling should be implemented carefully to avoid
    revealing internal schema details. Use custom error classes and middleware to
    catch and handle errors gracefully. An insecure GraphQL implementation might return
    detailed error messages that expose field names or other schema details, making
    it easier for attackers to craft malicious queries. By implementing proper error
    handling and sanitizing error messages, developers can protect their APIs from
    exploitation. The JavaScript code follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 GraphQL 中，错误处理应该小心实现，以避免暴露内部架构的细节。使用自定义错误类和中间件来优雅地捕获和处理错误。不安全的 GraphQL
    实现可能会返回详细的错误信息，暴露字段名称或其他架构细节，使得攻击者更容易构造恶意查询。通过实现适当的错误处理并清理错误信息，开发者可以保护他们的 API
    免受攻击。接下来的 JavaScript 代码演示了这一点：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the next section, we’ll discuss the best practices for data protection.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将讨论数据保护的最佳实践。
- en: Best practices for data protection and encryption
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据保护和加密的最佳实践
- en: 'We covered attacks accessing data in unauthorized ways in [*Chapter 8*](B19657_08.xhtml#_idTextAnchor131).
    Data protection and encryption are essential for securing sensitive information
    transmitted via APIs. In Python, using libraries such as `cryptography` to encrypt
    data at rest and in transit is crucial. For instance, encrypting sensitive information
    such as passwords and personal data before storing it in the database can prevent
    unauthorized access. Observe the following code that applies the `cryptography`
    library to make use of Fernet tokens and keys:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第8章*](B19657_08.xhtml#_idTextAnchor131)中讨论了通过未经授权的方式访问数据的攻击。数据保护和加密对于确保通过
    API 传输的敏感信息至关重要。在 Python 中，使用如 `cryptography` 这样的库来加密静态和传输中的数据是至关重要的。例如，在将敏感信息如密码和个人数据存储到数据库之前进行加密，可以防止未经授权的访问。请观察下面的代码，它使用
    `cryptography` 库来应用 Fernet 令牌和密钥：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In Java, leveraging the **Java Cryptography Architecture** (**JCA**) provides
    robust encryption mechanisms. However, developers must avoid using outdated encryption
    algorithms such as DES or RC4\. Instead, it’s better to use modern algorithms
    such as AES with appropriate key management practices. Observe the example that
    follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Java 中，利用**Java 加密架构**（**JCA**）提供了强大的加密机制。然而，开发者必须避免使用过时的加密算法，如 DES 或 RC4。相反，最好使用现代算法，如
    AES，并采取适当的密钥管理措施。请观察接下来的示例：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'JavaScript developers should use libraries such as `crypto` in Node.js to implement
    encryption and decryption routines securely. For example, an insecure implementation
    might use hardcoded encryption keys or weak algorithms. Instead, use environment
    variables to store keys securely and implement key rotation policies. Look at
    the following code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 开发者应使用如 `crypto` 等库，在 Node.js 中安全地实现加密和解密操作。例如，一个不安全的实现可能会使用硬编码的加密密钥或弱加密算法。相反，应使用环境变量安全地存储密钥，并实现密钥轮换策略。请查看以下代码：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the preceding snippet, the JavaScript code leverages environment variables
    to store some sensitive data. Such data may be controlled by a `.env` file, which
    is an approach followed by many modern programming languages. This file simply
    has associations between variables and their contents and usually lies in the
    very same directory where the source code is. Of course, it’s not the best solution
    whatsoever, but it’s definitely better than hardcoding the key into the logic.
    Another solution when you have a secrets manager at hand (either a local one or
    a service provided by a public cloud player) is to store all sensitive data there
    and then. This can be done using an ephemeral session by assuming a role with
    the necessary permissions; you simply access such a manager and then retrieve
    the data.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，JavaScript 代码利用环境变量存储一些敏感数据。这些数据可能由 `.env` 文件控制，这种方式被许多现代编程语言采用。该文件仅包含变量与其内容之间的关联，通常位于与源代码相同的目录下。当然，这不是最佳的解决方案，但它绝对比将密钥硬编码到逻辑中要好。另一个解决方案是，当你有一个密钥管理工具（无论是本地的还是由公有云提供的服务）时，将所有敏感数据存储在其中。这可以通过假设一个具有必要权限的角色来使用临时会话完成；你只需访问该管理工具并提取数据。
- en: 'In Golang, using packages such as `crypto/aes` for encryption and ensuring
    proper key management can enhance data security. A common flaw is failing to secure
    keys or using weak keys, which can be mitigated by following the best practices
    for key management. The excerpt that follows demonstrates what is being said:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Golang 中，使用如 `crypto/aes` 等加密包并确保正确的密钥管理可以增强数据安全性。一个常见的缺陷是未能保护密钥或使用弱密钥，这可以通过遵循最佳的密钥管理实践来缓解。下面的摘录展示了这一点：
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'GraphQL poses unique challenges for data protection, especially when dealing
    with sensitive queries and mutations. Implementing field-level encryption and
    ensuring that sensitive data is encrypted before being returned in responses is
    crucial. For instance, an insecure GraphQL implementation might return sensitive
    data without encryption, exposing it to potential interception. By encrypting
    sensitive fields and using secure transport protocols such as HTTPS, developers
    can protect data effectively. The following JavaScript block shows how to return
    sensitive data only after correctly encrypting it:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL 对数据保护提出了独特的挑战，特别是在处理敏感查询和变更时。实现字段级加密并确保敏感数据在响应中返回之前被加密至关重要。例如，一个不安全的
    GraphQL 实现可能在未加密的情况下返回敏感数据，从而暴露给潜在的拦截风险。通过加密敏感字段并使用安全的传输协议，如 HTTPS，开发者可以有效保护数据。以下
    JavaScript 代码块展示了如何在正确加密后仅返回敏感数据：
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In conclusion, secure coding practices for APIs are fundamental to building
    robust and secure APIs and applications. By implementing secure authentication
    mechanisms, validating and sanitizing user input, handling errors properly, and
    protecting data through encryption, developers can significantly enhance the security
    of their APIs. These practices, combined with continuous security testing and
    monitoring, can help mitigate risks and protect sensitive information from potential
    threats.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，API 的安全编码实践是构建稳健和安全的 API 和应用程序的基础。通过实现安全的身份验证机制、验证和清理用户输入、正确处理错误以及通过加密保护数据，开发者可以显著增强
    API 的安全性。这些实践，结合持续的安全测试和监控，能够帮助减轻风险，并保护敏感信息免受潜在威胁。
- en: As we’ve seen several times in this book, there’s no one-size-fits-all solution.
    No single technique or principle will protect the whole API. Secure coding best
    practices are a vital part of the protection universe, but they must be combined
    with a secure API architecture design and be followed by continuous monitoring
    and checking, triggering general verifications every time a major change is needed
    in the code or the data flow.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本书中多次看到的那样，并没有一种适用于所有情况的解决方案。没有单一的技术或原则可以保护整个 API。安全编码最佳实践是保护体系中的一个重要部分，但它们必须与安全的
    API 架构设计相结合，并且在每次代码或数据流发生重大变化时，必须进行持续的监控和检查，触发常规验证。
- en: Summary
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered important actions that should be taken toward avoiding
    major incidents in different aspects that were covered throughout previous chapters.
    We learned tips on how to better code APIs for the sake of reducing risks in authentication
    mechanisms, user input, error handling and exception management, and data protection.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们讨论了应该采取的重要措施，以避免在之前章节中涉及的不同方面发生重大事故。我们学习了如何更好地编写 API，以减少身份验证机制、用户输入、错误处理和异常管理以及数据保护中的风险。
- en: In general, we learned that it’s about leveraging widely used open source libraries
    that implement secure mechanisms or open algorithms, combined with some practices
    such as avoiding hardcoding important things in the logic and continuously monitoring
    the activities. Never reinvent the wheel. Avoid obscure solutions as much as possible.
    In the end, if neither you nor the community nor a compliance authority can audit
    such a product or service, it’s nearly impossible to truly know what’s going on
    behind the scenes, as we learned in this chapter.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，我们学到的是，利用广泛使用的开源库，这些库实现了安全机制或开放算法，结合一些实践，例如避免在逻辑中硬编码重要内容并持续监控活动。永远不要重复发明轮子。尽量避免晦涩的解决方案。最终，如果你、社区或合规机构都无法审计某个产品或服务，那么几乎不可能真正知道背后发生了什么，就像我们在这一章中学到的那样。
- en: Furthermore, we learned that it’s important for developers and development managers
    to discuss, in their companies, the possibility of adopting a secure coding methodology.
    They are especially useful when you are completely clueless about where to start
    to transform your API software into something more secure.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还了解到，对于开发人员和开发经理来说，在公司内部讨论采纳安全编码方法论的可能性是很重要的。特别是当你完全不知道从何开始将 API 软件转变为更安全的产品时，这些方法尤其有用。
- en: Finally, I hope you enjoyed reading this book as much as I did writing it. This
    is my very first book; hopefully it’s the first of many more to come.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我希望你和我一样喜欢阅读这本书。这是我的第一本书；希望这只是众多书籍中的第一本。
- en: Further reading
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Python `bcrypt`, a hashing alternative module: [https://pypi.org/project/bcrypt/](https://pypi.org/project/bcrypt/)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python `bcrypt`，一种替代的哈希模块：[https://pypi.org/project/bcrypt/](https://pypi.org/project/bcrypt/)
- en: 'Python `scrypt`, a more mature implementation of encryption library: [https://pypi.org/project/scrypt/](https://pypi.org/project/scrypt/)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python `scrypt`，一个更成熟的加密库实现：[https://pypi.org/project/scrypt/](https://pypi.org/project/scrypt/)
- en: 'Java Spring, a major framework for Java: [https://spring.io/](https://spring.io/)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java Spring，Java的一个主要框架：[https://spring.io/](https://spring.io/)
- en: 'Java Spring Security, a framework for protecting applications written in Java
    Spring: [https://spring.io/projects/spring-security](https://spring.io/projects/spring-security)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java Spring Security，保护 Java Spring 编写的应用程序的框架：[https://spring.io/projects/spring-security](https://spring.io/projects/spring-security)
- en: 'JavaScript Passport.js, an authentication middleware for Node.js: [https://www.passportjs.org/](https://www.passportjs.org/)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript Passport.js，一个为 Node.js 提供身份验证中间件的库：[https://www.passportjs.org/](https://www.passportjs.org/)
- en: 'Gorilla Sessions, a Golang package that provides cookie and filesystem sessions
    for applications: [https://github.com/gorilla/sessions](https://github.com/gorilla/sessions)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gorilla Sessions，一个为应用程序提供 cookie 和文件系统会话的 Golang 包：[https://github.com/gorilla/sessions](https://github.com/gorilla/sessions)
- en: 'Python Django, a framework for building modern Python applications and APIs:
    [https://www.djangoproject.com/](https://www.djangoproject.com/)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python Django，构建现代 Python 应用程序和 API 的框架：[https://www.djangoproject.com/](https://www.djangoproject.com/)
- en: 'Python Flask, another framework, which is lighter than Django: [https://flask.palletsprojects.com/en/](https://flask.palletsprojects.com/en/)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python Flask，另一个框架，比 Django 更轻量：[https://flask.palletsprojects.com/en/](https://flask.palletsprojects.com/en/)
- en: 'Java Hibernate, a library that facilitates and protects data handling: [https://hibernate.org/](https://hibernate.org/)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java Hibernate，一个促进和保护数据处理的库：[https://hibernate.org/](https://hibernate.org/)
- en: 'Java HQL, the query language behind Hibernate: [https://docs.jboss.org/hibernate/orm/3.3/reference/en/html/queryhql.html](https://docs.jboss.org/hibernate/orm/3.3/reference/en/html/queryhql.html).'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java HQL，Hibernate 背后的查询语言：[https://docs.jboss.org/hibernate/orm/3.3/reference/en/html/queryhql.html](https://docs.jboss.org/hibernate/orm/3.3/reference/en/html/queryhql.html)
- en: 'Java JPQL, a query language used for data persistence: [https://openjpa.apache.org/builds/1.2.3/apache-openjpa/docs/jpa_langref.html](https://openjpa.apache.org/builds/1.2.3/apache-openjpa/docs/jpa_langref.html)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java JPQL，一种用于数据持久化的查询语言：[https://openjpa.apache.org/builds/1.2.3/apache-openjpa/docs/jpa_langref.html](https://openjpa.apache.org/builds/1.2.3/apache-openjpa/docs/jpa_langref.html)
- en: 'JavaScript Sequelize, an ORM for Node.js: [https://sequelize.org/](https://sequelize.org/)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript Sequelize，一个 Node.js 的 ORM：[https://sequelize.org/](https://sequelize.org/)
- en: 'JavaScript Mongoose, an intelligent and elegant way to deal with data on Node.js
    when connecting with MongoDB: [https://mongoosejs.com/docs/](https://mongoosejs.com/docs/)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript Mongoose，一个智能且优雅的方式，在与 MongoDB 连接时处理 Node.js 中的数据：[https://mongoosejs.com/docs/](https://mongoosejs.com/docs/)
- en: 'Joi, a tool that helps you validate data when coding in JavaScript: [https://joi.dev/](https://joi.dev/)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Joi，一个在 JavaScript 编程中帮助你验证数据的工具：[https://joi.dev/](https://joi.dev/)
- en: 'Golang Package Validator, an aid to valid user input before taking it into
    consideration: [https://pkg.go.dev/github.com/go-playground/validator/](https://pkg.go.dev/github.com/go-playground/validator/)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Golang 包验证器，一个在考虑用户输入之前验证其有效性的工具：[https://pkg.go.dev/github.com/go-playground/validator/](https://pkg.go.dev/github.com/go-playground/validator/)
- en: 'Golang SQL Package, which should be used when interacting with SQL databases
    rather than directly sending queries to them: [https://pkg.go.dev/database/sql](https://pkg.go.dev/database/sql)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Golang SQL 包，在与 SQL 数据库交互时应该使用，而不是直接发送查询：[https://pkg.go.dev/database/sql](https://pkg.go.dev/database/sql)
- en: 'Java Logback, a framework to correctly handle logging: [https://logback.qos.ch/](https://logback.qos.ch/)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java Logback，一个正确处理日志记录的框架：[https://logback.qos.ch/](https://logback.qos.ch/)
- en: 'Simple Log Facade for Java, a wrapper for logging frameworks such as Logback:
    [https://www.slf4j.org/](https://www.slf4j.org/)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 简单日志外观，一个用于包装像 Logback 这样的日志框架的工具：[https://www.slf4j.org/](https://www.slf4j.org/)
- en: 'JavaScript Express.js, a minimal web framework: [https://expressjs.com/](https://expressjs.com/)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript Express.js，一个最小化的 Web 框架：[https://expressjs.com/](https://expressjs.com/)
- en: 'Python cryptography, a module to facilitate encryption activities: [https://pypi.org/project/cryptography/](https://pypi.org/project/cryptography/)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 加密模块，一个促进加密活动的模块：[https://pypi.org/project/cryptography/](https://pypi.org/project/cryptography/)
- en: 'Java Cryptography Architecture, a reference and set of implementations for
    dealing with cryptographic primitives with the language (the current version is
    22): [https://docs.oracle.com/en/java/javase/22/security/java-cryptography-architecture-jca-reference-guide.html](https://docs.oracle.com/en/java/javase/22/security/java-cryptography-architecture-jca-reference-guide.html)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 加密架构，一个用于处理加密原语的参考和实现集（当前版本是 22）：[https://docs.oracle.com/en/java/javase/22/security/java-cryptography-architecture-jca-reference-guide.html](https://docs.oracle.com/en/java/javase/22/security/java-cryptography-architecture-jca-reference-guide.html)
- en: 'Golang crypto, a package that handles encryption and hashing tasks: [https://pkg.go.dev/crypto](https://pkg.go.dev/crypto)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Golang 加密包，一个处理加密和哈希任务的包：[https://pkg.go.dev/crypto](https://pkg.go.dev/crypto)
- en: 'A blog post discussing what`.env` is and how it can be leveraged to grant some
    protection to sensitive data: [https://platform.sh/blog/we-need-to-talk-about-the-env/](https://platform.sh/blog/we-need-to-talk-about-the-env/)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一篇讨论 `.env` 是什么，以及如何利用它为敏感数据提供一些保护的博客文章：[https://platform.sh/blog/we-need-to-talk-about-the-env/](https://platform.sh/blog/we-need-to-talk-about-the-env/)
