- en: Attack and Detect Trojans with BeEF
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 BeEF 进行攻击和检测特洛伊木马
- en: In this chapter, we will learn about the BeEF tool and how to hook it using
    a **man-in-the-middle framework** (**MITMf**). We'll then learn how to steal a
    username and password by redirecting the user to a dummy website where we will
    capture all their credentials. Then, we will gain access to the Meterpreter section
    using BeEF. Lastly, we will learn how to detect Trojans both manually and with
    a sandbox.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习 BeEF 工具以及如何使用**中间人框架**（**MITMf**）将其连接。接着，我们将学习如何通过将用户重定向到一个虚假网站来窃取用户名和密码，在那里我们将捕获他们的所有凭证。然后，我们将使用
    BeEF 获得 Meterpreter 部分的访问权限。最后，我们将学习如何通过手动方式和使用沙箱检测特洛伊木马。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The BeEF tool
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BeEF 工具
- en: BeEF – hook using a MITMf
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BeEF – 使用 MITMf 进行连接
- en: BeEF – basic commands
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BeEF – 基本命令
- en: BeEF – Pretty Theft
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BeEF – 精美盗窃
- en: BeEF – Meterpreter 1
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BeEF – Meterpreter 1
- en: Detecting Trojans manually
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动检测特洛伊木马
- en: Detecting Trojans using a sandbox
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用沙箱检测特洛伊木马
- en: The BeEF tool
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BeEF 工具
- en: In this and the coming sections, we're going to have a look at a tool called
    BeEF. The **Browser Exploitation Framework** (**BeEF**) allows us to run a number
    of commands and attacks on a hooked target. A hooked target is basically a target
    that executes an URL or a JavaScript code given to us by BeEF. Once the target
    is hooked, we'll be able to run all the commands that BeEF allows us to.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节及接下来的章节中，我们将了解一个叫做 BeEF 的工具。**浏览器利用框架**（**BeEF**）允许我们对连接的目标执行一系列命令和攻击。一个被连接的目标基本上是指执行了由
    BeEF 提供的 URL 或 JavaScript 代码的目标。一旦目标被连接，我们就能执行 BeEF 允许的所有命令。
- en: 'The first thing we''re going to have a look at is the main interface of BeEF,
    how to run it, and a very simple way to hook a target to BeEF. To run BeEF, we
    just have to click on the BeEF icon on the desktop. It''ll automatically run the `http://127.0.0.1:3000/ui/panel` URL,
    which contains the browser interface or the web interface of the tool. It''ll
    ask for a username and a password. The username is `beef` and the password is
    `beef` as well. Once logged in, on the left, we''ll see the browsers that we have
    access to, in the Hooked Browsers pane:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要了解的是 BeEF 的主界面，如何运行它，以及一种非常简单的方式将目标连接到 BeEF。要运行 BeEF，我们只需点击桌面上的 BeEF 图标。它将自动运行`http://127.0.0.1:3000/ui/panel`
    URL，其中包含工具的浏览器界面或网页界面。它会要求输入用户名和密码。用户名是`beef`，密码也是`beef`。登录后，在左侧，我们将看到我们可以访问的浏览器，在“已连接浏览器”面板中：
- en: '![](assets/72880417-40f7-41a7-901c-538cf10211e1.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/72880417-40f7-41a7-901c-538cf10211e1.png)'
- en: The Online Browsers are the browsers that we currently have access to, and the
    Offline Browsers are the ones that we had access to. At the moment, we can't run
    any commands on the browsers; we had access to these browsers before, but we can't
    currently do anything on them.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在线浏览器是我们当前能够访问的浏览器，离线浏览器是我们曾经访问过的浏览器。目前，我们无法对这些浏览器执行任何命令；我们曾经可以访问这些浏览器，但现在不能对它们做任何操作。
- en: 'What interests us is the Online Browsers. There are a number of methods to
    get browsers or targets hooked to BeEF. If we just go back to the Terminal window,
    we can see that it''s telling us the script URL that has to be executed on the
    target browser so that they get hooked to BeEF:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们感兴趣的是在线浏览器。有多种方法可以将浏览器或目标连接到 BeEF。如果我们回到终端窗口，我们可以看到它告诉我们需要在目标浏览器上执行的脚本 URL，以便将其连接到
    BeEF：
- en: '![](assets/4986caee-2df3-4712-9265-40821c0646f8.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4986caee-2df3-4712-9265-40821c0646f8.png)'
- en: If we can find or think of a way to get the preceding piece of URL to be executed
    on the target computer, then that target will be hooked to BeEF, and then we will
    be able to run all types of commands on that computer.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们能找到或想到一种方法让前面提到的 URL 在目标计算机上执行，那么该目标将会被连接到 BeEF，我们就能够在该计算机上执行各种命令。
- en: We can use methods that we've already learned, we can use DNS-spoofing to spoof
    any request to any page or to a page containing the hook, or we can do ARP poisoning
    and inject the hook URL into any page that the target browses. We can use an XSS
    exploit, which we'll talk about in [Chapter 21](d9f62886-a663-460f-8159-95d066337c38.xhtml),
    *Cross-Site Scripting Vulnerabilities*. Or we could create a page and social engineer
    our target to open that page, a hook page. We are going to create a hook page
    and see how a target will be hooked. The hook page that we're going to create
    can be used with social engineering and DNS-spoofing.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用我们已经学过的方法，利用 DNS 欺骗来伪造任何页面请求，或伪造包含钩子的页面，或者我们可以进行 ARP 欺骗，将钩子 URL 注入到目标浏览的任何页面中。我们还可以使用
    XSS 漏洞进行攻击，我们将在[第 21 章](d9f62886-a663-460f-8159-95d066337c38.xhtml)中讨论 *跨站脚本漏洞*。或者我们可以创建一个页面，并通过社交工程诱使目标打开该页面，成为钩子页面。我们将创建一个钩子页面，看看目标是如何被钩住的。我们将创建的钩子页面可以与社交工程和
    DNS 欺骗一起使用。
- en: 'The page that we are going to create is very simple. We can use any page we
    want and place the hook URL at the end of the page. We can go on any website,
    copy the source of that website, and then place the hook URL under that. We are
    going to be doing something simpler; we are just going to put it into our `/var/www/html`
    directory—that''s where the web server files are stored. We are going to modify
    our `index.html` file, we''ll delete everything, and put in the hook URL that
    was given to us by the tool. We also need to modify the IP and put in the IP of
    the attacking machine. So the IP of the Kali machine and our IP is `10.0.2.15`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要创建的页面非常简单。我们可以使用任何页面，并将钩子 URL 放在页面的末尾。我们可以访问任何网站，复制该网站的源代码，然后将钩子 URL 放在其下方。我们将做得更简单一些；我们只需要将其放入
    `/var/www/html` 目录——这是 Web 服务器文件存储的位置。我们将修改 `index.html` 文件，删除其中所有内容，然后放入工具给我们的钩子
    URL。我们还需要修改 IP 地址，填写攻击机器的 IP 地址。也就是 Kali 机器的 IP 地址和我们的 IP 地址 `10.0.2.15`：
- en: '![](assets/236b3d25-612b-4b96-b53c-d5b63c860416.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/236b3d25-612b-4b96-b53c-d5b63c860416.png)'
- en: Now we're good to go, and any person that browses the `index.html` page will
    be hooked to the BeEF browser, or to the BeEF framework. We also need to start
    the web server, Apache. To start it, we run the `service apache2 start` command.
    Now the Apache server should be running. Again, we can use social engineering
    or we can use DNS-spoofing to get our target person to browse to the `index.html`
    page. We can upload the same page onto a remote server and get access to it, or
    we can think of any other way we want.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以开始了，任何访问 `index.html` 页面的人都会被钩住，连接到 BeEF 浏览器或 BeEF 框架。我们还需要启动 Web 服务器
    Apache。启动命令是运行 `service apache2 start`。现在 Apache 服务器应该已经运行了。我们可以通过社交工程或 DNS 欺骗引导目标访问
    `index.html` 页面。我们还可以将相同的页面上传到远程服务器，并访问它，或者我们可以想到任何其他方法。
- en: 'At the moment, we are going to just browse to it on our Windows browser, enter
    the `10.0.2.15` IP, and hit *Enter* – a blank page should open up:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将通过 Windows 浏览器访问 `10.0.2.15` 的 IP 地址，并按 *Enter* 键——应该会打开一个空白页面：
- en: '![](assets/c8207302-f818-438a-8504-e96dd74284e0.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c8207302-f818-438a-8504-e96dd74284e0.png)'
- en: 'Our page doesn''t really say anything, but if we go to our BeEF browser, we
    will see that we have a new IP in the Online Browsers, and if we click on that
    IP, we will see some basic details about the target computer:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的页面实际上没有显示任何内容，但如果我们进入 BeEF 浏览器，我们会看到在线浏览器中有一个新的 IP 地址，如果点击该 IP，我们将看到目标计算机的一些基本信息：
- en: '![](assets/5aa93606-00b7-4740-a792-9d5d35b8537b.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5aa93606-00b7-4740-a792-9d5d35b8537b.png)'
- en: We can see that the target is using Mozilla/5.0 with Windows NT 10.0, it's Firefox/61.0.
    We can also see the installed Browser Plugins. These are very useful if we want
    to run buffer-overflow exploits on the target computer. We can also see the Page
    URL that we managed to get the hook from, and we can see the Cookies information
    at the bottom, as well and details about the date and the Window Size.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到目标计算机使用的是 Mozilla/5.0，Windows NT 10.0 操作系统，浏览器版本是 Firefox/61.0。我们还可以看到已安装的浏览器插件。如果我们想要对目标计算机进行缓冲区溢出攻击，这些插件非常有用。我们还可以看到我们通过钩子获取到的页面
    URL，页面底部有 Cookies 信息，以及日期和窗口大小的详细信息。
- en: 'The Commands tab is the one we''ll use the most. The following screenshot shows
    a large number of commands and attacks on the target computer—we''ll be dealing
    with this later:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '"命令" 标签是我们最常使用的标签。以下截图展示了大量的命令和对目标计算机的攻击——我们稍后会处理这些：'
- en: '![](assets/cb9a06b8-5581-484a-8c82-13ff996bc061.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cb9a06b8-5581-484a-8c82-13ff996bc061.png)'
- en: 'The Rider tab will allow us to see and create HTTP requests:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Rider标签页将允许我们查看和创建HTTP请求：
- en: '![](assets/a90e3a19-ad44-4340-a678-cc1380e61882.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a90e3a19-ad44-4340-a678-cc1380e61882.png)'
- en: 'The XssRays tab will show us whether the target web page has any XSS vulnerabilities:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: XssRays标签页会显示目标网页是否存在XSS漏洞：
- en: '![](assets/1ea26ed9-1c33-43aa-8541-97767f16c98f.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1ea26ed9-1c33-43aa-8541-97767f16c98f.png)'
- en: 'The Ipec tab is a BeEF Command Prompt, which will allow us to run BeEF commands
    from the Command Prompt instead of using the interface:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Ipec标签页是一个BeEF命令提示符，它允许我们从命令提示符运行BeEF命令，而不需要使用界面：
- en: '![](assets/7eaf3d57-62ba-4e6e-ada9-ed9fa4fa26a1.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7eaf3d57-62ba-4e6e-ada9-ed9fa4fa26a1.png)'
- en: 'The Network tab will give us an overview of the current network:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 网络标签页会给我们展示当前网络概况：
- en: '![](assets/b8c10e2b-13ef-4aa6-8607-53300966944c.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b8c10e2b-13ef-4aa6-8607-53300966944c.png)'
- en: Once we're done with everything, we can click on the Logout link and we will
    be logged out of the tool.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有操作后，我们可以点击注销链接，退出工具。
- en: This is just a basic overview of BeEF, the main commands and the interface,
    and a really basic way of hooking a target. Again, we can get people to run the
    hook page by using social engineering, such as a URL-shortening service to make
    the link shorter and look nicer, or we can do DNS-spoofing and get the target
    person to redirect to our own web page where the BeEF framework is working.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是BeEF的基本概览，包括主要命令和界面，以及一种基本的钩取目标方法。再次说明，我们可以通过社会工程学手段让别人访问钩子页面，比如使用URL缩短服务让链接更短、更美观，或者通过DNS欺骗让目标访问我们自己的网页，从而使BeEF框架生效。
- en: BeEF – hook using a MITMf
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BeEF – 使用MITMf进行钩取
- en: 'Another method to hook targets to BeEF is to inject the JavaScript that BeEF
    gives us using MITMf. So, if the target and attacker are in the same network,
    and if we can become the man-in-the-middle (or if we manage to the become the
    man-in-the-middle because we had a fake access point or because we are physically
    connected to the target computer, regardless of the way that we became the man-in-the-middle),
    we can inject the hook code into the browser, into the pages (HTTP pages) that
    the target person browses, and they''ll be hooked to BeEF without clicking on
    anything, and without our having to send them anything. We''re going to use the
    exact same link in the page that we used before, which is `http://10.0.2.15:3000/hook.js`,
    or the script. We are going to copy it and then we''ll paste it into our `--inject`
    plugin with MITMf. The command is going to be `mitmf`, and then we''re going to
    use the `--inject` and `--js-url` options, and we''re going to give it the URL
    of the hook. The command is as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种将目标钩取到BeEF的方法是使用MITMf注入BeEF提供的JavaScript。因此，如果目标和攻击者在同一网络中，并且我们能够成为中间人（无论是通过伪造接入点，还是通过物理连接到目标计算机，无论我们通过什么方式成为中间人），我们就可以将钩子代码注入目标浏览器中，让目标在浏览的页面（HTTP页面）中直接被钩取到BeEF，无需点击任何东西，也不需要我们发送任何内容。我们将使用之前页面中的相同链接，即`http://10.0.2.15:3000/hook.js`，或者脚本。我们将复制它，然后粘贴到`--inject`插件中，使用MITMf。命令如下：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It''s the same command that we always use, `mitmf`. We''re doing ARP-spoofing,
    we''re giving the gateway `10.0.2.1`, the target `10.0.2.5`, the interface `eth0`,
    and we''re using the `--inject` plugin, and a `--js-url` option, a URL for a JavaScript,
    the URL where the hook is stored, in our example its placed at `http://10.0.2.15:3000/hook.js`.
    After launching the command, browse the web normally, or just go to the BBC website.
    Now, if we go back to our BeEF, we can see that we have a target, and that target
    is a Windows device:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直使用的命令是`mitmf`。我们正在进行ARP欺骗，设置网关为`10.0.2.1`，目标为`10.0.2.5`，接口为`eth0`，并且使用`--inject`插件和`--js-url`选项，指定一个JavaScript的URL，即钩子存储的位置，在我们的例子中，它位于`http://10.0.2.15:3000/hook.js`。启动命令后，正常浏览网页，或者直接访问BBC网站。现在，如果我们返回到BeEF界面，可以看到我们已经有了一个目标，而这个目标是一台Windows设备：
- en: '![](assets/8ed3c4dc-15bb-4436-b54c-182d8dc69a69.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8ed3c4dc-15bb-4436-b54c-182d8dc69a69.png)'
- en: 'The code has been automatically injected into the BBC website, so the user
    didn''t have to visit anything or click a URL. The code will be injected into
    any web page they visit and they''ll get hooked. The user will get hooked as soon
    as they go to any website. If we go to the page source, and look at the bottom,
    we will see that we have the hook script at the bottom of the page source—that''s
    why it''s been executed:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 代码已自动注入到 BBC 网站中，因此用户无需访问任何内容或点击 URL。代码将被注入到他们访问的任何网页中，他们将被连接。用户只要访问任何网站，就会被连接。如果我们查看页面源代码，并查看底部，我们将看到我们在页面源代码底部有挂钩脚本，这就是为什么它被执行：
- en: '![](assets/3cdcb119-612a-4675-bad2-6db7328829fe.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3cdcb119-612a-4675-bad2-6db7328829fe.png)'
- en: That's the reason why we could actually put the script under any page. If we
    are making fake pages, we can just copy the source of any page and put the script
    at the bottom. Then, it will be executed on the target page and we will be able
    to hook our target to the browser.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么我们实际上可以将脚本放在任何页面下的原因。如果我们制作假页面，我们只需复制任何页面的源代码并将脚本放在底部。然后，它将在目标页面上执行，我们将能够将我们的目标连接到浏览器。
- en: BeEF – basic commands
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BeEF – 基本命令
- en: 'Now that we have our browser or target hooked, we can go to the Commands tab
    and start executing commands on the target:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的浏览器或目标已经连接，我们可以转到命令选项卡并开始在目标上执行命令：
- en: '![](assets/0b83d035-9ec0-433f-8910-377a5b00ded4.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0b83d035-9ec0-433f-8910-377a5b00ded4.png)'
- en: We can use the Search option to look for a certain command, or we can use the
    categories and look for commands suitable for what we want to perform on the target
    computer. Some of the commands are information-gathering commands, some of them
    are social engineering, some of them will even give us full control over the target
    computer. There are a lot of commands, so we won't be able to go over all of them,
    but we will be looking at some of the most important commands so we know how to
    experiment and run them.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用搜索 选项来查找特定命令，或者我们可以使用类别并查找适合我们想要在目标计算机上执行的命令。一些命令是信息收集命令，一些是社会工程，一些甚至会让我们完全控制目标计算机。有很多命令，所以我们不可能涵盖所有命令，但我们将查看一些最重要的命令，以便知道如何进行实验和运行它们。
- en: 'If we click on the Browser (53) option, we will see commands related to attacks
    that we can do inside the browser:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击浏览器 (53) 选项，我们将看到与浏览器内可以执行的攻击相关的命令：
- en: '![](assets/f2725e1d-feee-4aa2-a945-1f70b856d680.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f2725e1d-feee-4aa2-a945-1f70b856d680.png)'
- en: 'We can see attacks that will allow us to get a screenshot, we can try to turn
    on the webcam and see whether it works, and open the webcam on the target. If
    we click on Exploits (78), we will see a number of exploits that we can run:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到一些攻击，这些攻击可以让我们获得屏幕截图，我们可以尝试打开网络摄像头并查看其是否工作，并在目标上打开网络摄像头。如果我们点击 Exploits (78)，我们将看到一些可以运行的漏洞利用：
- en: '![](assets/648e413a-46d6-419a-a183-9d4bdf97aa3c.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/648e413a-46d6-419a-a183-9d4bdf97aa3c.png)'
- en: 'All we have to do is click on the module that we want to run and click on the Execute
    button:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需点击我们想要运行的模块，然后点击 执行 按钮：
- en: '![](assets/8ae96233-e1b6-4932-a9cc-072a1ab754e1.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8ae96233-e1b6-4932-a9cc-072a1ab754e1.png)'
- en: There are some modules that need some options to be set up, and we'll have examples
    of them as well.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些模块需要设置一些选项，我们也将给出这些模块的示例。
- en: 'In the Social Engineering (21) option, we can show fake updates, fake notification
    bars, and so on:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在社会工程 (21) 选项中，我们可以显示虚假更新、虚假通知栏等：
- en: '![](assets/503aedb1-8290-4a79-968d-0687327b13ff.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/503aedb1-8290-4a79-968d-0687327b13ff.png)'
- en: 'Let''s have an example of a very simple command. We''re going to run an alert
    to show an alert box. So, we are just using Search to filter, and we can see that
    it will just create an alert dialog, and it''s going to say `BeEF Alert Dialog`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举一个非常简单的命令的例子。我们将运行一个警报以显示一个警报框。所以，我们只是使用 搜索 进行过滤，我们可以看到它只会创建一个警报对话框，并且会显示
    `BeEF Alert Dialog`：
- en: '![](assets/ee010a13-79a0-4a7c-85f5-7e636d01ec7b.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ee010a13-79a0-4a7c-85f5-7e636d01ec7b.png)'
- en: 'We can modify the alert and type to anything we want, for example, change Alert
    text to `test`, and then, when we hit the Execute button, in the target browser,
    we will see a message saying test has been injected into the target browser, as
    shown in the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以修改警报和类型为任何我们想要的内容，例如，将警报文本更改为 `test`，然后，当我们点击 执行 按钮时，在目标浏览器中，我们将看到一个消息，显示
    test 已被注入到目标浏览器中，如下图所示：
- en: '![](assets/0325e71c-5051-4b9c-8154-0de1475f7672.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0325e71c-5051-4b9c-8154-0de1475f7672.png)'
- en: 'Another interesting thing that we can do is the raw JavaScript. It will allow
    us to execute any JavaScript we want. So, again, we search Google for a useful
    JavaScript code, such as a keylogger, or we can write our own script if we know
    JavaScript, and whatever we write will be executed on the target. Again, we''re
    going to pop in an alert, and it is going to return `BeEF Raw JavaScript`, and
    hit the Execute button:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的功能是原始 JavaScript。它允许我们执行任何我们想要的 JavaScript。所以，我们可以再次搜索 Google 寻找有用的 JavaScript
    代码，比如键盘记录器，或者如果我们懂 JavaScript，也可以自己编写脚本，无论我们写什么，它都会在目标上执行。再一次，我们将插入一个警告，它将返回 `BeEF
    Raw JavaScript`，然后点击执行按钮：
- en: '![](assets/9ccd227d-c633-45d8-8441-3f3b567e0b38.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9ccd227d-c633-45d8-8441-3f3b567e0b38.png)'
- en: 'It will give us a dialog saying BeEF Raw JavaScript, just like we got in the
    previous example:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 它会弹出一个对话框，显示 BeEF 原始 JavaScript，就像我们在前面的示例中看到的一样：
- en: '![](assets/09bc8b3b-9339-496d-8d13-53bd0d6dcc18.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/09bc8b3b-9339-496d-8d13-53bd0d6dcc18.png)'
- en: 'Now, let''s see whether we can get a screenshot of the target computer. For
    this, we''re going to use a plugin called Spyder Eye. So, again, click on the
    plugin, hit Execute, give it a second, then we''re going to click on command 4
    in the Module Results History tab:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看是否可以获取目标计算机的截图。为此，我们将使用一个名为 Spyder Eye 的插件。所以，再次点击插件，点击执行，稍等片刻，然后我们将点击“模块结果历史”标签页中的命令
    4：
- en: '![](assets/1950a38e-a22b-4d70-83ed-26bb9a3566ea.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1950a38e-a22b-4d70-83ed-26bb9a3566ea.png)'
- en: The preceding image shows us a screenshot of what the target person is looking
    at.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图片展示了目标用户所看到的截图。
- en: 'Another really good plugin is a Redirect Browser plugin. It will allow us to
    redirect the browser to any web page we want. This could be very useful because
    we can use it to redirect the target person and tell them that they need to download
    an update, and instead of giving them an update, we give them a backdoor. We can
    redirect them to a fake login page for Facebook – we can do anything we want with
    the Redirect Browser plugin. We can set the website that we want the target to
    be redirected to. We''re going to redirect them to [http://beefproject.com](http://beefproject.com) in
    this example, and once we hit Execute, the target is redirected to [http://beefproject.com](http://beefproject.com) or
    to any specific link mentioned in the Redirect URL textbox:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常好的插件是重定向浏览器插件。它允许我们将浏览器重定向到任何我们想要的网页。这非常有用，因为我们可以用它来引导目标用户，告诉他们需要下载更新，而实际上我们并不会提供更新，而是给他们一个后门。我们可以把他们重定向到一个假的
    Facebook 登录页面——我们可以通过重定向浏览器插件做任何想做的事。我们可以设置希望目标被重定向到的网站。在这个例子中，我们将把他们重定向到 [http://beefproject.com](http://beefproject.com)，点击执行后，目标将被重定向到
    [http://beefproject.com](http://beefproject.com) 或任何在重定向 URL 文本框中提到的特定链接：
- en: '![](assets/fec6c166-3b5b-4b1a-b74f-f018ba10b032.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fec6c166-3b5b-4b1a-b74f-f018ba10b032.png)'
- en: These are some of the basic modules that we can use.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们可以使用的一些基本模块。
- en: BeEF – Pretty Theft
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BeEF – 精美盗窃
- en: 'Now let''s have a look at a Social Engineering plugin that will allow us to
    steal usernames and passwords from accounts. Basically, it will dim the screen
    and will tell the person that they got logged out of the session so they need
    to log in again to get authenticated. This will allow us to bypass HTTPS, HSTS,
    and all the security that''s used by the target account page. For example, if
    we are trying to get usernames and passwords for Facebook, we will be able to
    bypass all the security that Facebook uses, because we are just showing a fake
    Facebook page, so the user will never actually make contact with Facebook. Let''s
    click on Pretty Theft, which will open the tab:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看一个社交工程插件，它可以帮助我们窃取账户的用户名和密码。基本上，它会让屏幕变暗，并告诉目标用户他们已从会话中退出，因此需要重新登录以进行身份验证。这样我们就能绕过
    HTTPS、HSTS 和目标账户页面所使用的所有安全措施。例如，如果我们试图获取 Facebook 的用户名和密码，我们将能够绕过 Facebook 使用的所有安全措施，因为我们只是在展示一个假的
    Facebook 页面，因此用户实际上并未与 Facebook 进行联系。我们点击“精美盗窃”插件，它将打开标签页：
- en: '![](assets/e79a26ba-34a5-4082-a7cd-bffa9da64176.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e79a26ba-34a5-4082-a7cd-bffa9da64176.png)'
- en: In the preceding screenshot, we can click which account we want to hijack. Let's
    say we're going with Facebook. We can select what the Backlight will be, so we're
    just leaving that as Grey, and then we hit Execute.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们可以点击我们想要劫持的账户。假设我们选择 Facebook。我们可以选择背景光的颜色，这里我们就留作灰色，然后点击执行。
- en: 'When we go to our target, we can see that they''re being told that they got
    logged out of their session so they need to log in with their username and password:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们转到目标时，我们可以看到他们被告知他们已经注销了会话，因此他们需要使用用户名和密码登录：
- en: '![](assets/d21d8f4c-4cfd-4b89-a399-719676e46077.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d21d8f4c-4cfd-4b89-a399-719676e46077.png)'
- en: Enter the username as `zaid`, then we are going to put our password as `12345`,
    and hit Log in.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 输入用户名为`zaid`，然后我们将密码输入为`12345`，然后点击登录。
- en: 'If we go back to the Terminal, we can see that we got our username as zaid
    and the password as 12345:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回到终端，我们可以看到我们的用户名是zaid，密码是12345：
- en: '![](assets/40ce5c9c-9ec9-4e7a-b231-833c89b3d814.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/40ce5c9c-9ec9-4e7a-b231-833c89b3d814.png)'
- en: 'We can use this to hijack a number of accounts. Let''s look at another example.
    If we go with YouTube, we give it an Execute:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用这一点来劫持多个账户。让我们看另一个例子。如果我们选择YouTube，我们执行：
- en: '![](assets/c3f1a269-2df6-40db-9256-e1633db84852.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c3f1a269-2df6-40db-9256-e1633db84852.png)'
- en: 'At the target screen, we see the YouTube logo and we can try to log in. Put
    in a Username and Password, click Sign In, and the credentials will be captured:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在目标屏幕上，我们看到了YouTube的标志，我们可以尝试登录。输入用户名和密码，点击登录，凭证将被捕获：
- en: '![](assets/34a5b5ca-5213-43ff-a0df-d44700f643df.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/34a5b5ca-5213-43ff-a0df-d44700f643df.png)'
- en: So, again, this is a really good way to gain access to accounts because, even
    if the user is not planning on logging into the account that we are trying to
    steal, we will kind of force them to enter their username and password to be logged
    back into their account, and then we will be able to capture the username and
    password.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这是一个非常好的获取账户访问权限的方法，因为即使用户没有打算登录我们试图窃取的账户，我们也会迫使他们输入用户名和密码以重新登录他们的账户，然后我们就能够捕获用户名和密码。
- en: BeEF – Meterpreter 1
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BeEF – Meterpreter 1
- en: 'In this section, we are going to see how we can gain full control and get a
    Meterpreter session from the target computer. So, again, go to the Commands tab,
    and then Social Engineering. There are a number of ways that we can get a reverse
    shell. Now, it all depends on how we want to perform our social-engineering attack.
    We''re going to use a notification bar, Fake Notification Bar (Firefox)—we''re
    choosing Firefox because our target runs a Firefox browser:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何从目标计算机获得完全控制并获得一个Meterpreter会话。因此，再次转到命令选项卡，然后选择社会工程。有许多方法可以获得反向shell。现在，这一切取决于我们想要执行社会工程攻击的方式。我们将使用一个通知栏，伪造通知栏（Firefox）—我们选择Firefox，因为我们的目标使用Firefox浏览器：
- en: '![](assets/b8d40cba-a7b1-479d-9c5a-0503c75f4386.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b8d40cba-a7b1-479d-9c5a-0503c75f4386.png)'
- en: Basically, it will display a notification bar telling the user that there is
    a new update or a plugin that they need to install. Once they install the plugin,
    they'll actually install a backdoor and we will gain full access to their computer.
    We'll implement it by using the same backdoor that we created and have been using
    throughout this book.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，它会显示一个通知栏，告诉用户有一个新的更新或插件需要安装。一旦他们安装了插件，实际上他们会安装一个后门，我们将获得对他们计算机的完全访问权限。我们将通过使用我们在本书中创建并一直使用的相同后门来实现。
- en: 'We have stored the backdoor in our web server in `/var/www/html` and named
    it `update.exe`, but it''s the same backdoor, the same reverse-HTTP Meterpreter
    that we used before. Provide the full address of the backdoor inside the Plugin
    URL textbox, which is `http://10.0.2.15/update.exe`, change the Notification text
    to `Critical update for Firefox, click here to install`, as shown in the following
    screenshot, and hit the Execute button:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将后门存储在我们的Web服务器中的`/var/www/html`目录下，并命名为`update.exe`，但它是相同的后门，我们之前使用过的相同的反向HTTP
    Meterpreter。在插件URL文本框中提供后门的完整地址，即`http://10.0.2.15/update.exe`，将通知文本更改为`Firefox的关键更新，点击这里安装`，如下面的屏幕截图所示，然后点击执行按钮：
- en: '![](assets/77ffa2c3-1a39-4dff-8c09-1b719438ac5c.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/77ffa2c3-1a39-4dff-8c09-1b719438ac5c.png)'
- en: 'At the target, we can see that they''re getting a message telling them that
    there is a new update for Firefox:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在目标处，我们可以看到他们收到一条消息，告诉他们有一个Firefox的新更新：
- en: '![](assets/e1b3c0b7-5534-47e4-8f17-3b395046fdbb.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e1b3c0b7-5534-47e4-8f17-3b395046fdbb.png)'
- en: Once the target downloads and installs it, they'll have a backdoor downloaded
    onto their machine. Once they try to run this backdoor to install the update,
    they'll actually run a backdoor that will give us full access to their computer.
    Before we run the backdoor, we need to listen on the port, exactly as we did before.
    Open a `msfconsole` Terminal and run `show options`. Use the Metasploit multi-handler,
    the same way we've done throughout this book to listen on ports. Use `meterpreter/reverse/http`,
    we have our IP and the port. So, we are just going to run `exploit`, and we are
    listening for the connections now. Let's run the update we just downloaded. If
    we go on the target, we will see that we got full control over it using a Meterpreter
    session.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦目标下载并安装它，木马就会被下载到他们的机器上。一旦他们尝试运行这个木马来安装更新，实际上他们运行的是一个木马，它会给我们完全的计算机访问权限。在运行木马之前，我们需要像之前一样监听端口。打开一个
    `msfconsole` 终端并运行 `show options`。使用 Metasploit 的 multi-handler，就像本书中讲过的那样，来监听端口。使用
    `meterpreter/reverse/http`，输入我们的 IP 地址和端口。所以，我们只需运行 `exploit`，现在我们就开始监听连接了。接着运行我们刚刚下载的更新。如果我们去目标计算机，我们将看到我们通过
    Meterpreter 会话获得了完全控制。
- en: Again, this is just an example of one way of gaining full control over the target
    computer. There are a number of ways that we can do this using BeEF, and there
    are many social engineering attacks that we can do to gain full access to the
    target computer. It's highly recommended to go over the plugins, experiment with
    them, and see what attacks can be performed.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 再次说明，这只是获得完全控制目标计算机的一种方式的示例。我们可以通过使用 BeEF 来做很多事，也有很多社交工程攻击可以用来获得目标计算机的完全访问权限。强烈推荐你浏览插件，进行实验，看看可以执行哪些攻击。
- en: Detecting Trojans manually
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动检测木马
- en: 'The Trojans we''ve created so far are amazing; they can bypass antivirus programs – they
    run two pieces of code, the first one runs in the background, which runs our own
    code and does what we want it to do, such as opening a port or connecting back
    to us and giving us a shell, and it runs another piece of code that the user expects.
    It could display an image, play an MP3, or display a PDF file. This functionality
    makes it very difficult to detect, so the best thing to do is to check the properties
    of the file and make sure that it is what it''s claiming to be. In the following
    screenshot, we have a Packt image and we can see that it''s a `.jpg`, so it looks
    like a picture, it has an icon, and if we run it we will get a picture, like we
    saw in [Chapter 13](ed4df884-d2d6-4c71-a1a4-28e4a508ed19.xhtml), *Client-Side
    Attacks - Social Engineering*:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止我们创建的木马非常强大；它们能够绕过杀毒程序——它们运行两段代码，第一段代码在后台运行，执行我们的代码，完成我们想要它做的事情，比如打开一个端口、连接回我们的机器并给我们一个
    shell，同时它也运行第二段用户预期的代码，可能是显示一张图片、播放一个 MP3 文件，或者显示一个 PDF 文件。这种功能使得它非常难以被检测出来，所以最好的做法是检查文件的属性，确保它的确是它所宣称的类型。在下面的截图中，我们看到这是一个
    Packt 图片，并且它是 `.jpg` 文件，看起来像一张图片，具有图标，如果我们运行它，就会得到一张图片，就像我们在[第13章](ed4df884-d2d6-4c71-a1a4-28e4a508ed19.xhtml)中看到的那样，*客户端攻击
    - 社交工程*：
- en: '![](assets/00a6c225-dd59-4416-981b-c9c06177c433.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/00a6c225-dd59-4416-981b-c9c06177c433.png)'
- en: 'Right-click on it and go to Properties. When we go to Properties, we will see
    that this is an application, not a picture:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 右键点击它并选择“属性”。当我们进入“属性”时，我们会看到它是一个应用程序，而不是图片：
- en: '![](assets/5ec6ea85-f9c6-4b22-b06a-e14cc1fa7d93.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5ec6ea85-f9c6-4b22-b06a-e14cc1fa7d93.png)'
- en: 'The same goes for PDFs and MP3s; it should say MP3 if it''s an MP3, it should
    say PDF if it''s a PDF, and it should say `.jpg` if it''s a `jpg`. But in this
    case, it''s telling us that it''s an executable. Going through the Details, we
    will see that it is an application and not a picture – if it was a picture, it
    would tell us that it was a picture:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 PDF 和 MP3 也是一样；如果是 MP3，它应该显示为 MP3；如果是 PDF，它应该显示为 PDF；如果是 `.jpg`，它应该显示为 `jpg`。但在这个情况下，它告诉我们这是一个可执行文件。查看详细信息后，我们会发现它是一个应用程序，而不是一张图片——如果它是图片，它会告诉我们它是一张图片：
- en: '![](assets/3a6373d5-4e52-4fd4-a933-6d5c13a53e25.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3a6373d5-4e52-4fd4-a933-6d5c13a53e25.png)'
- en: 'From this, we''ll know that we''re being tricked. We can also play with the
    filename and we will be able to reset it; if we rename the file to anything else,
    we will see that it''s an `.exe` file and not a `.jpg`. If we change it to test,
    we will see that the name has been changed to test.exe:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，我们就能知道自己正被欺骗。我们也可以调整文件名，重命名后我们会看到它其实是一个 `.exe` 文件，而不是 `.jpg`。如果我们将文件名改为
    test，我们会看到它的名字已经改成了 test.exe：
- en: '![](assets/0c9ad277-a3af-4ed0-a918-d5e8506c67a6.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0c9ad277-a3af-4ed0-a918-d5e8506c67a6.png)'
- en: Now, let's assume this Trojan was combined with an executable. If we run it,
    we expect to get `.exe` and an application. Let's assume that it's combined with
    Download Accelerator Plus software, instead of being combined with a picture.
    This task is going to be more difficult because we are expecting an application
    anyway. With the picture and with the PDF, Windows will tell us that we are trying
    to run an executable, but if we are expecting an executable, then we are going
    to run it anyway, such as with DAP. It will play the executable we are looking
    for and the executable will send a reverse session to Kali.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们假设这个特洛伊木马与一个可执行文件结合在一起。如果我们运行它，我们期望得到一个`.exe`和一个应用程序。假设它与Download Accelerator
    Plus软件结合在一起，而不是与一张图片结合在一起。这个任务会更加困难，因为我们无论如何都期望得到一个应用程序。对于图片和PDF，Windows会告诉我们我们正在尝试运行一个可执行文件，但如果我们期望得到一个可执行文件，那么我们无论如何都会运行它，比如使用DAP。它将播放我们正在寻找的可执行文件，并且该可执行文件将发送一个反向会话到Kali。
- en: 'Go to a tool called Resource Monitor, and from that tool, go to the Network
    tab. There, we will be able to see all the open ports on our machine:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 进入一个名为资源监视器的工具，并从该工具中进入网络选项卡。在那里，我们将能够看到我们计算机上所有打开的端口：
- en: '![](assets/23a09142-e38a-4a9d-904a-9603b39d633f.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/23a09142-e38a-4a9d-904a-9603b39d633f.png)'
- en: We can see that we have port 8080 and it's connecting to the 10.0.2.15 IP address.
    Obviously port 8080 is not very suspicious, even if it was on port `80`, it wouldn't
    look suspicious, and also, it's coming from a process called browser.exe, which
    is not very suspicious either. The suspicious part is the remote address; it's
    accessing 10.0.2.15 and we don't know what that is. If it was a website, putting
    the IP in the browser should take us to a website or to a server of that website.
    In most cases, if this is a hacker computer, it will not take us to a website,
    and then we will know that this person is an attacker.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们有端口8080，并且它连接到`10.0.2.15` IP地址。显然，端口`8080`并不是很可疑，即使它在端口`80`上，看起来也不可疑，而且，它来自一个名为browser.exe的进程，这也不是很可疑。可疑的部分是远程地址；它正在访问`10.0.2.15`，我们不知道那是什么。如果这是一个网站，将IP放入浏览器应该会带我们到一个网站或该网站的服务器。在大多数情况下，如果这是一个黑客计算机，它不会带我们到一个网站，然后我们就会知道这个人是一个攻击者。
- en: 'To verify the attack, we can use a tool called Reverse DNS Lookup. It gives
    us an IP and tells us which website this IP belongs to, or which domain this IP
    belongs to. Let''s look at an example on Facebook. Let''s say we saw a suspicious-looking
    IP in our Resource Manager. We are actually going to get a proper IP address for
    Facebook by pinging:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证攻击，我们可以使用一个名为反向DNS查找的工具。它给我们一个IP，并告诉我们这个IP属于哪个网站，或者这个IP属于哪个域。让我们以Facebook为例。假设我们在资源管理器中看到了一个看起来可疑的IP。我们实际上将通过ping获取Facebook的正确IP地址：
- en: '![](assets/707a9a06-52cd-48d7-adf7-9a3e9222cd0e.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/707a9a06-52cd-48d7-adf7-9a3e9222cd0e.png)'
- en: 'We have seen the `157.240.7.38` IP; there is a connection on port `80` going
    to this IP. Copy this IP and use Google to search for `Reverse DNS`, open the
    first site, paste the IP, and click Reverse Lookup. We can see the IP that we
    saw in our resources:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了`157.240.7.38` IP；有一个连接在端口`80`上连接到这个IP。复制这个IP并使用谷歌搜索`反向DNS`，打开第一个网站，粘贴IP，然后点击反向查找。我们可以看到我们在资源中看到的IP：
- en: '![](assets/fa75a09a-39e7-431f-b91f-3bd730de59c3.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fa75a09a-39e7-431f-b91f-3bd730de59c3.png)'
- en: If it's for a proper website, then there is nothing to be concerned about; if
    it looks suspicious, then we will know that this is going to a suspicious person.
    Now, as we can see in the preceding screenshot, it's going to Facebook and we
    are browsing Facebook – this is normal, we are using Facebook so there's a connection
    between us and Facebook.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是用于一个正常的网站，那么就没有什么好担心的；如果看起来可疑，那么我们就会知道这是连接到一个可疑人的。现在，正如我们在上面的截图中看到的，它正在连接到Facebook，我们正在浏览Facebook
    - 这是正常的，我们正在使用Facebook，所以我们和Facebook之间有一个连接。
- en: Detecting Trojans using a sandbox
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用沙箱检测特洛伙
- en: Now we are going to look at another way to discover malicious files, by using
    a sandbox. A sandbox is basically a place where our file will be executed and
    analyzed. It will check whether any ports will be opened, if it's going to modify
    registry entries—basically, if it's going to do any suspicious stuff. It's not
    an antivirus program. Our Trojan might pass antivirus programs, our Trojan passed
    all antivirus programs, but the sandbox applications, or the sandbox environments,
    will run it in a controlled environment, see whether it does anything suspicious,
    and give us a report. We can Google `sandbox` online, and an example of it is
    a website called Hybrid Analysis ([https://www.hybrid-analysis.com/](https://www.hybrid-analysis.com/)).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们要看另一种发现恶意文件的方法，通过使用沙箱。沙箱基本上是一个执行和分析我们文件的地方。它会检查是否会打开任何端口，是否会修改注册表项——基本上就是查看它是否会做任何可疑的事情。它不是杀毒软件。我们的特洛伊木马可能会通过杀毒程序，我们的特洛伊木马通过了所有的杀毒程序，但沙箱应用程序或沙箱环境会在受控环境中运行它，查看它是否做了任何可疑的事情，并给我们报告。我们可以在线搜索`sandbox`，例如一个叫做Hybrid
    Analysis的网站([https://www.hybrid-analysis.com/](https://www.hybrid-analysis.com/))。
- en: 'Using the website is very simple: just go to the URL, select a file, and upload
    it. We can see the report in the following screenshot; analyzing the file and
    generating the report might take some time:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用该网站非常简单：只需访问网址，选择一个文件并上传即可。我们可以在以下截图中看到报告；分析文件并生成报告可能需要一些时间：
- en: '![](assets/201ab1fd-89ad-4ea8-a628-1f903b081cb7.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/201ab1fd-89ad-4ea8-a628-1f903b081cb7.png)'
- en: Once we get the report, we will see some basic information; we will see that Malicious
    Indicators have been found. They're hiding it from us and we have to use the full
    version to see them, but we don't really need to see them; if we read the whole
    report, we will know that this file is malicious and it's going to do something
    bad on our computer.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们获取了报告，我们将看到一些基本信息；我们会看到发现了**恶意指标**。它们被隐藏了，我们必须使用完整版才能看到它们，但我们实际上并不需要看到它们；如果我们阅读整份报告，我们会知道这个文件是恶意的，并且它将在我们的计算机上做一些坏事。
- en: 'We can see that the file suppresses error boxes, so it doesn''t display error
    boxes:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到文件抑制了错误框，因此不会显示错误框：
- en: '![](assets/f8b57bbe-d9e8-493d-a72f-5a8a79769e56.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f8b57bbe-d9e8-493d-a72f-5a8a79769e56.png)'
- en: 'It also modifies the registry, and we can see the registry parameters in the
    following screenshot:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 它还会修改注册表，我们可以在以下截图中看到注册表参数：
- en: '![](assets/052e286c-a5ef-49ed-8a31-2bacc078404a.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/052e286c-a5ef-49ed-8a31-2bacc078404a.png)'
- en: 'We can see, in the preceding screenshot, that it''s playing with the Internet
    Settings and with the Connections. We can also see that it''s using the Windows
    Sockets service, that is, WinSock2, so it''s trying to create connections. We
    can also see that it''s playing with the address of the process:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，在前面的截图中，它正在操作互联网设置和连接。我们还可以看到它正在使用Windows Sockets服务，即WinSock2，所以它试图建立连接。我们还可以看到它正在操作进程的地址：
- en: '![](assets/4117d295-21af-45ef-8291-a243609d8eb5.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4117d295-21af-45ef-8291-a243609d8eb5.png)'
- en: 'If we scroll down, we will see one of the most important indicators. There
    will be more information in the following screenshot on Network Analysis. It tries
    to connect to Host Address on Host Port `8080`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们向下滚动，我们将看到一个最重要的指标。以下截图中会有更多关于网络分析的信息。它尝试连接到主机地址上的主机端口`8080`：
- en: '![](assets/a630b741-dd20-465e-b628-4b8dfba4904a.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a630b741-dd20-465e-b628-4b8dfba4904a.png)'
- en: We can go on the `10.20.14.203` IP and do a reverse DNS lookup to check whether
    the IP is related to a website. Also, when we upload the payload, it's never going
    to be executed on our computer, it's going to be executed on their server in a
    sandbox environment. Now, obviously, for the method we have seen, we should always
    use it in a VirtualBox when we are executing it on Windows. Always perform it
    on a virtual machine; don't perform it on our main machine. Or we can upload it
    into a sandbox environment, it'll be analyzed for us, and then we can read the
    report.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以访问`10.20.14.203`这个IP并进行反向DNS查找，以检查该IP是否与某个网站相关联。此外，当我们上传有效载荷时，它永远不会在我们的计算机上执行，而是在他们的服务器上以沙箱环境执行。显然，针对我们所看到的方法，我们应该始终在执行时使用VirtualBox，尤其是在Windows系统上。始终在虚拟机上执行，不要在主机上执行。或者我们可以将其上传到沙箱环境，它会为我们进行分析，然后我们可以阅读报告。
- en: Summary
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we studied a tool called BeEF and hooked it using MITMf. Then,
    by redirecting the user, we captured their credentials by saying they had been
    logged out and asked them to re-enter their username and password. Finally, we
    gained access to the Meterpreter session and also learned how we can detect Trojans
    both manually and by using a sandbox.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了一个名为BeEF的工具，并通过MITMf进行了钩取。然后，通过重定向用户，我们通过告知用户他们已被注销并要求他们重新输入用户名和密码的方式捕获了他们的凭据。最后，我们获得了Meterpreter会话，并学习了如何通过手动和使用沙盒来检测木马。
- en: In the next chapter, we are going to look at performing attacks on an external
    network.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将研究如何对外部网络进行攻击。
