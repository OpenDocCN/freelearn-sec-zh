- en: Exploiting Vulnerabilities Using Burp Suite - Part 2
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Burp Suite利用漏洞 - 第2部分
- en: As we saw in the previous chapter, Burp Suite is a flexible tool used to detect
    and exploit vulnerabilities. In this chapter, we will be exploiting other types
    of vulnerabilities, showing more options and capabilities in Burp Suite.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一章中看到的，Burp Suite是一个灵活的工具，用于检测和利用漏洞。在本章中，我们将利用其他类型的漏洞，展示Burp Suite的更多选项和功能。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Using SSRF/XSPA to perform internal port scans
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SSRF/XSPA执行内部端口扫描
- en: Using SSRF/XSPA to extract data from internal machines
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SSRF/XSPA从内部机器提取数据
- en: Extracting data using Insecure Direct Object Reference (IDOR) flaws
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用不安全的直接对象引用（IDOR）漏洞提取数据
- en: Exploiting security misconfigurations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用安全配置错误
- en: Using insecure deserialization to execute OS commands
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用不安全的反序列化来执行操作系统命令
- en: Exploiting crypto vulnerabilities
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用加密漏洞
- en: Brute forcing HTTP basic authentication
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暴力破解HTTP基本身份验证
- en: Brute forcing forms
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暴力破解表单
- en: Bypassing file upload restrictions
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绕过文件上传限制
- en: Using SSRF/XSPA to perform internal port scans
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SSRF/XSPA执行内部端口扫描
- en: A **Server-Side Request Forgery** (**SSRF**) is a vulnerability where a malicious
    user can send a manual request to the server where the application is hosted,
    usually a server that has no direct access from the user's perspective.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务器端请求伪造**（SSRF）是一种漏洞，恶意用户可以向托管应用程序的服务器发送手动请求，通常是从用户角度无法直接访问的服务器。'
- en: Currently, this is a vulnerability that is getting a lot of popularity because
    it has a great impact on cloud infrastructures that use technologies, such as
    Elasticsearch, and NoSQL databases.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，这是一个备受欢迎的漏洞，因为它对使用Elasticsearch和NoSQL数据库等技术的云基础设施产生了巨大影响。
- en: 'In the following code snippet, we can see its effect:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码片段中，我们可以看到它的效果：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This code is vulnerable because it is receiving the `url` parameter without
    validations, and then ...
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码是有漏洞的，因为它在没有验证的情况下接收`url`参数，然后...
- en: Performing an internal port scan to the backend
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行对后端的内部端口扫描
- en: A port scan is one of the most basic and useful activities of network discovery
    when you are assessing a network. In applications, security assessment is limited
    to the scope determined in the assessment, but SSRF and XSPA allow users to perform
    port scanning from the application. To demonstrate how you can perform this technique,
    we will use a vulnerable test application, created by Acunetix, which you can
    find at [http://testphp.vulnweb.com/](http://testphp.vulnweb.com/).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 端口扫描是在评估网络时进行网络发现的最基本和最有用的活动之一。在应用程序中，安全评估受到评估范围的限制，但SSRF和XSPA允许用户从应用程序中执行端口扫描。为了演示您如何执行此技术，我们将使用Acunetix创建的一个有漏洞的测试应用程序，您可以在[http://testphp.vulnweb.com/](http://testphp.vulnweb.com/)找到。
- en: 'This is a vulnerable application that you can use to learn some attacks and
    test scripts or tools, as shown in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个有漏洞的应用程序，您可以用来学习一些攻击和测试脚本或工具，如下面的屏幕截图所示：
- en: '![](img/b7194d52-807a-4f01-a610-0e6048023915.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b7194d52-807a-4f01-a610-0e6048023915.png)'
- en: 'Open Burp Suite''s Dashboard, and click on New scan. Add Acunetix''s URL in
    the scope and click on Start, as demonstrated in the following screenshot:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Burp Suite的仪表板，然后点击新扫描。将Acunetix的URL添加到范围中，然后点击开始，如下面的屏幕截图所示：
- en: '![](img/3a756b75-6dc6-406d-bdf1-cee5b2bfe41d.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a756b75-6dc6-406d-bdf1-cee5b2bfe41d.png)'
- en: 'After scanning the application, Burp Suite detected that the URL ([http://testphp.vulnweb.com/showimage.php](http://testphp.vulnweb.com/showimage.php))
    is vulnerable to SSRF. This PHP file accepts the URL as a parameter, as shown
    in the following line:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扫描应用程序后，Burp Suite检测到URL（[http://testphp.vulnweb.com/showimage.php](http://testphp.vulnweb.com/showimage.php)）对SSRF存在漏洞。这个PHP文件接受URL作为参数，如下行所示：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To perform an automatic port scan, we can use Intruder. First, stop the request,
    and send it to Intruder, as shown in the following screenshot:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要执行自动端口扫描，我们可以使用Intruder。首先，停止请求，并将其发送到Intruder，如下面的屏幕截图所示：
- en: '![](img/66226f38-91db-48dd-9b1d-1464636571f5.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/66226f38-91db-48dd-9b1d-1464636571f5.png)'
- en: 'Clean the wildcard created by default, and add a new one by your own, as shown
    in the following screenshot:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除默认创建的通配符，并按照您自己的方式添加一个新的，如下面的屏幕截图所示：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, you can define your payloads as a list, from 0 to 65,535, and we will
    choose the Random option. Why? Because some **intrusion prevention systems** (**IPS**) detect
    a sequential request to the same IP, so by using the Random option, we can try
    to avoid being detected:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以将您的有效负载定义为一个列表，从0到65,535，并选择随机选项。为什么？因为一些**入侵防护系统**（IPS）会检测对同一IP的顺序请求，因此通过使用随机选项，我们可以尝试避免被检测到：
- en: '![](img/b7eba87e-7db4-4b2e-9e06-876df72faf7f.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b7eba87e-7db4-4b2e-9e06-876df72faf7f.png)'
- en: 'Now, launch the attack, as shown in the following screenshot:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，启动攻击，如下面的屏幕截图所示：
- en: '![](img/29ada021-e7e8-4e43-a64c-a20747811370.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/29ada021-e7e8-4e43-a64c-a20747811370.png)'
- en: 'Why it works? If you see the response, it is possible to see whether the connection
    was successful or not, as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么有效？如果您查看响应，就可以看到连接是否成功，如下所示：
- en: '![](img/7eb1282c-cb77-404e-8a32-fbcaed7f5adc.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7eb1282c-cb77-404e-8a32-fbcaed7f5adc.png)'
- en: When a port is open, the response will not show any error. As a tip, you can
    analyze the length column to detect when there is a change in the response and
    see whether the error appears or not.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当端口打开时，响应不会显示任何错误。作为提示，您可以分析长度列，以检测响应何时发生变化，并查看错误是否出现。
- en: Using SSRF/XSPA to extract data from internal machines
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SSRF/XSPA从内部机器提取数据
- en: 'SSRF and XSPA vulnerabilities can also be used for other actions, such as extracting
    information from the servers into the network where the backend is located, or
    from the server where the application is hosted. Let''s analyze the following
    request:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: SSRF和XSPA漏洞也可以用于其他操作，例如从服务器中提取信息到后端所在的网络，或从托管应用程序的服务器中提取信息。让我们分析以下请求：
- en: '![](img/3ced569c-8afd-4646-b71f-2b49aa0a716a.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ced569c-8afd-4646-b71f-2b49aa0a716a.png)'
- en: 'Here, the `filehookURL` parameter is vulnerable, so send it to the Repeater
    tool, using the secondary button of the mouse, and modify the parameter to extract
    a file, in `/etc/passwd`, as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`filehookURL`参数是易受攻击的，因此将其发送到Repeater工具，使用鼠标的辅助按钮，修改参数以提取一个文件，如`/etc/passwd`，如下所示：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Send it to the application. If it works, the application will show you the ...
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 将其发送到应用程序。如果有效，应用程序将显示...
- en: Extracting data using Insecure Direct Object Reference (IDOR) flaws
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用不安全的直接对象引用（IDOR）漏洞提取数据
- en: IDOR is a vulnerability that allows a malicious user to access files, databases,
    or sensitive files in the server that hosts the application.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: IDOR是一种漏洞，允许恶意用户访问托管应用程序的服务器中的文件、数据库或敏感文件。
- en: To identify vulnerable applications to IDOR, it is necessary to test each variable
    that manages paths into the application. Let's look at an example of how to exploit
    this kind of vulnerability.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要识别易受IDOR攻击的应用程序，需要测试每个管理应用程序路径的变量。让我们看一个如何利用这种漏洞的例子。
- en: Exploiting IDOR with Burp Suite
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用Burp Suite的IDOR
- en: 'In the following screenshot, you have a vulnerable application and you have
    intercepted the next request:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下的截图中，你有一个易受攻击的应用程序，并且你已经拦截了下一个请求：
- en: '![](img/19761a53-0504-4c29-9984-ac5c63ac67e1.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/19761a53-0504-4c29-9984-ac5c63ac67e1.png)'
- en: We have their parameters in this request; login, action, and secret. The vulnerable
    parameter here is login. The `secret` variable is the data assigned by the user
    during their registration; the vulnerability that exists is that if the malicious
    user modifies the login parameter, the application changes the secret value for
    the user specified without validation. So, we have created another user called
    **vendetta2**, to try to modify the secret value pertaining to this individual,
    as demonstrated in the following ...
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这个请求中有它们的参数；登录、操作和秘密。这里易受攻击的参数是登录。`secret`变量是用户在注册时分配的数据；存在的漏洞是，如果恶意用户修改了登录参数，应用程序会在不经过验证的情况下更改用户指定的秘密值。因此，我们创建了另一个名为**vendetta2**的用户，试图修改与该个人相关的秘密值，如下所示...
- en: Exploiting security misconfigurations
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用安全配置错误
- en: The term *misconfiguration* is so open that it could mean a lot of things related
    to security. At the same time, it is so difficult to determine the impact of these
    kinds of vulnerabilities; some of these vulnerabilities could be just informational,
    showing information about the technology used to construct an application, and
    others could be so critical, providing access to the server, or to the application,
    thereby exposing all of it.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: “配置错误”这个术语是如此开放，它可能意味着与安全相关的许多事情。同时，确定这些漏洞的影响是如此困难；其中一些漏洞可能只是信息性的，显示有关用于构建应用程序的技术的信息，而其他一些可能非常关键，提供对服务器或应用程序的访问，从而暴露所有内容。
- en: So, in this section, we will be showing different common errors, and how to
    exploit them using Burp Suite.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本节中，我们将展示不同的常见错误，以及如何使用Burp Suite来利用它们。
- en: Default pages
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 默认页面
- en: 'It is common that server administrators install web servers or other applications,
    and they do not configure them to avoid showing the default pages, so, it is normal
    to find pages like the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，服务器管理员安装Web服务器或其他应用程序时，他们没有配置它们以避免显示默认页面，因此，通常会发现以下页面：
- en: '![](img/fc8d3fb5-35f5-43e4-add7-7415e547a647.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fc8d3fb5-35f5-43e4-add7-7415e547a647.png)'
- en: This default page may be generic, but it shows information, which, depending
    on the environment, could be useful. For example, in this case, we are seeing
    Apache Tomcat's default page. Tomcat is an application server that has an administrative
    section, and Tomcat has a default user and password. So, if you detect this default
    page, you just need to enter the `tomcat` credentials, to see all of the options.
    One common attack consists ...
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个默认页面可能是通用的，但它显示了信息，根据环境的不同，可能会很有用。例如，在这种情况下，我们看到了Apache Tomcat的默认页面。Tomcat是一个应用服务器，有一个管理部分，Tomcat有一个默认的用户名和密码。因此，如果您检测到这个默认页面，您只需要输入`tomcat`凭据，就可以看到所有选项。一个常见的攻击包括...
- en: Directory listings
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目录列表
- en: It is normal for system administrators and developers to assign incorrect access
    permissions in the filesystem, allowing users to access sensible files, such as
    backups, configurations files, source code files, or just a directory that allows
    users to know more about the server and where the application is hosted.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 系统管理员和开发人员通常会在文件系统中分配不正确的访问权限，允许用户访问敏感文件，如备份、配置文件、源代码文件，或者只是一个允许用户了解服务器和应用程序所在位置的目录。
- en: 'To discover all of this structure, we can use three main methods, which are
    as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了发现所有这些结构，我们可以使用三种主要方法，如下所示：
- en: Scanning
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扫描
- en: Mapping the application
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射应用程序
- en: Intruder
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 入侵者
- en: Let's explore each method in detail.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细探讨每种方法。
- en: Scanning
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扫描
- en: Scanners, including Burp Suite scanner, have algorithms to detect sensible paths
    and commons files; actually, common files could be used as banner grabbing to
    detect potential vulnerabilities.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描器，包括Burp Suite扫描器，具有检测敏感路径和常见文件的算法；实际上，常见文件可以用作横幅抓取，以检测潜在的漏洞。
- en: 'If a sensible file is detected, it will be shown in the scanner results as
    an issue, as demonstrated in the following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果检测到敏感文件，它将在扫描结果中显示为一个问题，如下截图所示：
- en: '![](img/ea91811c-7536-4fcd-8616-0d981234efee.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ea91811c-7536-4fcd-8616-0d981234efee.png)'
- en: Mapping the application
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 映射应用程序
- en: 'In Burp Suite, you can find all of the different files that are mapped in the
    Target tool, where it creates a tree with all of the website structure. If you
    click on a file, it will be shown in detail on the right, detailing whether it
    is accessible or not, as well as what kind of file it is:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在Burp Suite中，您可以在目标工具中找到所有不同的文件，它会创建一个包含所有网站结构的树。如果您点击一个文件，它将在右侧详细显示，详细说明它是否可访问，以及它是什么类型的文件：
- en: '![](img/80f192be-9241-40e2-8350-01e1fc47c26d.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/80f192be-9241-40e2-8350-01e1fc47c26d.png)'
- en: This mapping is largely automatic; you just need to work in the application,
    while Burp Suite is caching all of the requests and creating this tree, but also
    Burp Suite has a specific tool for this purpose.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这种映射基本上是自动的；您只需在应用程序中工作，而Burp Suite会缓存所有请求并创建这个树，但Burp Suite也有一个专门用于此目的的工具。
- en: 'In the Target tool, there is a tab called Scope; here, it is possible to define
    a URL or path as scope in order to map it deep. When you make a request, the request
    has a lot of resources that link to other resources. Burp Suite analyzes the requests
    and responses looking for these links and maps the site using the information
    that it can retrieve from them, as demonstrated in the following screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在目标工具中，有一个名为Scope的选项卡；在这里，可以定义URL或路径作为范围，以便进行深度映射。当您发出请求时，该请求会有许多链接到其他资源的资源。Burp
    Suite分析请求和响应，寻找这些链接，并使用它们可以检索到的信息来映射站点，如下面的屏幕截图所示：
- en: '![](img/6b948f96-fa82-496f-994a-bc7da71beb83.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b948f96-fa82-496f-994a-bc7da71beb83.png)'
- en: If the application has authenticated sections, it's recommended that you provide
    credentials, because each time Burp Suite tries to access the authenticated section,
    the proxy will launch a popup that could be annoying. When this happens, just
    enter the credentials and the proxy will save them for future requests.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序有经过身份验证的部分，建议您提供凭据，因为每次Burp Suite尝试访问经过身份验证的部分时，代理都会弹出一个可能会让人讨厌的弹窗。当这种情况发生时，只需输入凭据，代理将保存它们以备将来使用。
- en: Using Intruder
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Intruder
- en: I think Intruder is the most flexible of Burp Suite's tools. You can use it
    for everything. While working with the Burp Suite Community Edition, where you
    do not have the advanced options and tools, Intruder can supply all of them with
    restrictions, which means more time in performing the tasks, but it can do any
    kind of task.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为Intruder是Burp Suite工具中最灵活的。您可以用它做任何事情。在使用Burp Suite社区版时，您没有高级选项和工具，Intruder可以提供所有这些功能，但有一些限制，这意味着执行任务需要更多时间，但它可以执行任何类型的任务。
- en: So, to detect directory listings and sensitive files, we are going to use common
    lists. For example, we can have a list with common directories, such as usual
    paths in **content management systems** (**CMS**), eCommerce applications, and
    normal paths used in a homemade application, such as `/users/`, `/admin/`, `/administrator/`,
    `process.php`, `/config/`, and more.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了检测目录列表和敏感文件，我们将使用常见的列表。例如，我们可以有一个包含常见目录的列表，例如**内容管理系统**（**CMS**）、电子商务应用程序中的常用路径，以及自制应用程序中使用的常规路径，例如`/users/`、`/admin/`、`/administrator/`、`process.php`、`/config/`等等。
- en: On the other hand, we need to have a list with common ...
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，我们需要有一个包含常见……
- en: Default credentials
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 默认凭据
- en: As mentioned previously, in this section, there are applications that have default
    credentials when they are installed. With some of them, this is because they are
    not installed directly, but use packages with the OS or because they are part
    of another application. For example, some **integrated development environments**
    (**IDE**) have web or application servers in their installations, which are used
    for testing purposes.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在本节中，有些应用程序在安装时具有默认凭据。其中一些是因为它们不是直接安装的，而是使用操作系统的软件包，或者是其他应用程序的一部分。例如，一些**集成开发环境**（**IDE**）在其安装中具有Web或应用程序服务器，用于测试目的。
- en: Also, there are testing tools or packages that use **database management systems**
    (**DBMS**), but these systems have vulnerabilities or default access that exposes
    them.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一些测试工具或包使用**数据库管理系统**（**DBMS**），但这些系统存在漏洞或默认访问权限暴露它们。
- en: 'After doing some scouting, you will be able to know the applications, servers, and
    technology behind an application, and just looking for the term default password
    find the correct credentials, or accessing to the web that stores them, as shown
    in the following screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 经过一些侦察之后，您将能够了解应用程序、服务器和技术背后的应用程序，并且只需搜索默认密码一词即可找到正确的凭据，或者访问存储它们的网站，如下面的屏幕截图所示：
- en: '![](img/61fd3d16-a956-4669-9a34-660beeaeaea5.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/61fd3d16-a956-4669-9a34-660beeaeaea5.png)'
- en: To identify the correct ones, you just need to load them as payload in Intruder
    and launch the applications, as we will see in more detail in this chapter.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要识别正确的内容，您只需将它们作为Intruder中的有效负载加载并启动应用程序，我们将在本章中更详细地介绍。
- en: Untrusted HTTP methods
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不受信任的HTTP方法
- en: The HTTP protocol has different methods, usually, we use to know the `GET`,
    `POST`, and `CONNECT` methods because they are the most commonly used. However,
    there are others that can be used to get information about the server, upload
    and delete files into the application, or obtain debug information.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP协议有不同的方法，通常我们用来了解`GET`、`POST`和`CONNECT`方法，因为它们是最常用的。然而，还有其他方法可以用来获取有关服务器的信息，上传和删除文件到应用程序中，或者获取调试信息。
- en: 'Testing these methods using Burp Suite is easy. From the proxy, just modify
    the request in the following way:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Burp Suite测试这些方法很容易。只需从代理中修改请求如下：
- en: '[PRE4]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Actually, `OPTIONS` is a method that allows us to know what methods are allowed
    on the web server. The methods that can appear are `PUT`, `DELETE`, `TRACE`, `TRACK`,
    and `HEAD`. The exploitation of these methods is beyond the scope of this book
    because a lot depends on the environment in the application.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，`OPTIONS`是一种方法，允许我们知道Web服务器上允许使用哪些方法。可能出现的方法有`PUT`、`DELETE`、`TRACE`、`TRACK`和`HEAD`。利用这些方法超出了本书的范围，因为很多事情取决于应用程序的环境。
- en: Using insecure deserialization to execute OS commands
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用不安全的反序列化来执行操作系统命令
- en: Serialization is a process, in some programming languages, for converting the
    state of an object into a byte stream, this means 0's and 1's. The deserialization
    process converts a byte stream into an object in memory.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 序列化是一种过程，在一些编程语言中，用于将对象的状态转换为字节流，这意味着0和1。反序列化过程将字节流转换为内存中的对象。
- en: In web technologies, there are more simple cases, for example, a common deserialization
    is the process to pass a JSON format into an XML format. This is so simple, but
    the real problems start in technologies that use native objects, for example,
    Java, where we can pass to direct calls in memory.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web技术中，还有更简单的情况，例如，常见的反序列化是将JSON格式转换为XML格式。这很简单，但真正的问题在于使用本机对象的技术，例如Java，在这些技术中，我们可以直接在内存中进行调用。
- en: The vulnerability, in fact, occurs when the application deserializes an input
    that is not valid, creating a new object that could be potentially risky to the
    application.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，漏洞发生在应用程序对无效输入进行反序列化时，创建了一个可能对应用程序有潜在风险的新对象。
- en: Exploiting the vulnerability
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用漏洞
- en: 'Imagine you have a vulnerable application that is using the pickle library.
    This is a Python module that implements different functions to serialize and deserialize.
    However, this module does not implement protection by itself. It needs to be implemented
    with validation by the developer. Look at the following vulnerable code snippet:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，您有一个使用pickle库的易受攻击的应用程序。这是一个实现不同函数进行序列化和反序列化的Python模块。然而，这个模块本身并没有实现保护。它需要开发人员进行验证实现。看看以下易受攻击的代码片段：
- en: '[PRE5]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This code reads a YAML file without any validations. A malicious user can enter
    an input that could execute other actions, for example, a command, as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码读取一个YAML文件而没有任何验证。恶意用户可以输入一个可能执行其他操作的输入，例如一个命令，如下所示：
- en: '[PRE6]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Exploiting crypto vulnerabilities
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用加密漏洞
- en: More than exploiting vulnerabilities related to cryptography, Burp Suite allows
    users to perform analysis to detect weak algorithms.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 除了利用与加密相关的漏洞外，Burp Suite还允许用户进行分析以检测弱算法。
- en: To perform this analysis, we need to create a capture. This capture is just
    a navigation where we log in and log out from an application in order to create
    sessions, tokens, and IDs. The idea is to create the biggest capture that we can
    in order to have a sample.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行此分析，我们需要创建一个捕获。这个捕获只是一个导航，我们在应用程序中登录和注销，以创建会话、令牌和ID。想法是尽可能创建最大的捕获，以便有一个样本。
- en: 'After creating the capture, use the normal history in Burp Suite, go to the
    Sequencer tool, and click on Analyze now, as demonstrated in the following screenshot:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 创建捕获后，在Burp Suite中使用正常历史记录，转到Sequencer工具，然后点击“立即分析”，如下截图所示：
- en: '![](img/03e9e9b1-b2a1-4ef3-84fd-73d24a87557d.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/03e9e9b1-b2a1-4ef3-84fd-73d24a87557d.png)'
- en: 'Here, you can see the final analysis, as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以看到最终分析，如下所示：
- en: '![](img/710838f0-a0b1-499e-b00c-b48997aba3b8.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/710838f0-a0b1-499e-b00c-b48997aba3b8.png)'
- en: The Final Analysis
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 最终分析
- en: Now, you can determine whether the algorithm used is weak or not based on the
    entropy, the charset, and the probability.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以根据熵、字符集和概率来确定所使用的算法是否弱。
- en: Brute forcing HTTP basic authentication
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暴力破解HTTP基本身份验证
- en: 'Basic authentication is a type of access control mostly used in internal environments
    to restrict access to restricted areas in a website. It has a lot of weaknesses,
    including the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 基本身份验证是一种在内部环境中广泛使用的访问控制类型，用于限制网站中受限区域的访问。它有很多弱点，包括以下内容：
- en: The basic authentication sends the information in plain text. This means that
    a malicious user can intercept the information sent by the client to the server
    and extract the credentials.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本身份验证以明文发送信息。这意味着恶意用户可以拦截客户端发送到服务器的信息并提取凭据。
- en: 'The password is protected by a Base64 encoding. It does not mean that the password
    is encrypted; anyone can get the plain password using a decoder, like the one
    included in Burp Suite, as shown in the following screenshot:'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码受Base64编码保护。这并不意味着密码被加密；任何人都可以使用解码器获取明文密码，就像Burp Suite中包含的解码器一样，如下截图所示：
- en: '![](img/85bb0cab-7106-4191-8568-83344cce6d0c.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/85bb0cab-7106-4191-8568-83344cce6d0c.png)'
- en: Brute forcing it with Burp Suite
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Burp Suite进行暴力破解
- en: 'We are going to show how to attack a basic authentication using Burp Suite.
    Imagine we have a domestic router that is used to provide us with the internet
    in our home. Most of these devices use basic authentication. So, access to the
    URL router and the web browser will display a window, as in the following screenshot:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将展示如何使用Burp Suite攻击基本身份验证。想象一下，我们有一个用于在家中提供互联网的家用路由器。这些设备中的大多数使用基本身份验证。因此，访问URL路由器和Web浏览器将显示一个窗口，如下截图所示：
- en: '![](img/9786bec3-220c-4572-a1f3-8f62a11a0628.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9786bec3-220c-4572-a1f3-8f62a11a0628.png)'
- en: 'Now, configure Burp Suite to intercept the credentials sent to the server,
    as demonstrated in the following screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，配置Burp Suite以拦截发送到服务器的凭据，如下截图所示：
- en: '![](img/84489aa7-dd9e-45af-a60a-7740e03e0967.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/84489aa7-dd9e-45af-a60a-7740e03e0967.png)'
- en: 'Here, you can see the parameter authorization in the header. So, copy the value
    assigned to the parameter, and paste it in the Decoder section to know what it
    is. Remember that basic authentication uses Base64 encoding to protect the information:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以看到标头中的参数授权。因此，复制分配给参数的值，并将其粘贴到解码器部分以了解其含义。请记住，基本身份验证使用Base64编码来保护信息：
- en: '![](img/cade33a9-097a-4b08-98c7-bff5620e4eae.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cade33a9-097a-4b08-98c7-bff5620e4eae.png)'
- en: 'Now, we know that the structure used by the basic authentication is `user:password`,
    so to brute force the control, we need to send credentials following this structure.
    We are going to use a list of potential users and passwords, and store them in
    TXT files, in order to use them as payloads. I recommend that you look for leaked
    passwords in common services, such as Facebook, LinkedIn, and Yahoo, because they
    are real passwords, and not just a common dictionary, so it is more probable that
    you can get access to the restricted area. Here, we have a small example list
    as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们知道基本身份验证使用的结构是`user:password`，因此为了暴力破解控制，我们需要按照这个结构发送凭据。我们将使用潜在用户和密码的列表，并将它们存储在TXT文件中，以便将它们用作有效负载。我建议您在常见服务中寻找泄露的密码，如Facebook、LinkedIn和Yahoo，因为它们是真实的密码，而不仅仅是常见的词典，所以您更有可能能够访问受限区域。这里有一个小例子列表如下：
- en: '![](img/2d9616fc-e501-42e8-b841-0f126bd9f903.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d9616fc-e501-42e8-b841-0f126bd9f903.png)'
- en: 'Now that we have our password and users list, click on the original request,
    using the secondary button of the mouse, and send it to the Intruder tool:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了密码和用户列表，点击鼠标的辅助按钮，将原始请求发送到入侵者工具：
- en: 'First, we are going to select the Cluster bomb option to send our request.
    As we only have one list, we want Burp Suite to test all of the possible combinations
    on the list, as shown in the following screenshot:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将选择“集群炸弹”选项来发送我们的请求。由于我们只有一个列表，我们希望Burp Suite测试列表中的所有可能组合，如下面的截图所示：
- en: '![](img/58ed6b25-9667-41f6-8847-73ea5952a0ee.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/58ed6b25-9667-41f6-8847-73ea5952a0ee.png)'
- en: 'Then, we are going to select the value assigned to the authorization parameter
    as a wildcard. The trick however, is to create wildcards on the same parameter
    because we have to insert values to the password and the user, as demonstrated
    in the following screenshot:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将选择授权参数分配的值作为通配符。然而，诀窍是在同一个参数上创建通配符，因为我们必须为密码和用户插入值，如下面的截图所示：
- en: '![](img/0efb4232-4d7f-4ab6-afc6-ca48a1fd02e8.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0efb4232-4d7f-4ab6-afc6-ca48a1fd02e8.png)'
- en: 'Then, go to the Payloads tab and here, we are going to select our lists. However,
    the most important step is that we need to encode our inputs in Base64 with the
    structure used by the basic authentication. First, in the Payload Sets section,
    select the use of two payload sets. It is not important if we will use the same
    list, but we need to use them as separate payloads, as shown in the following
    screenshot:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，转到有效负载选项卡，在这里，我们将选择我们的列表。然而，最重要的一步是，我们需要使用基本身份验证的结构对我们的输入进行Base64编码。首先，在有效负载集部分，选择使用两个有效负载集。我们将使用相同的列表并不重要，但我们需要将它们用作单独的有效负载，如下面的截图所示：
- en: '![](img/30b18b92-3434-4471-9fad-3e86092271d5.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/30b18b92-3434-4471-9fad-3e86092271d5.png)'
- en: 'Afterward, select the first payload list and, in the textbox separator for
    position 1, add the `:` character. This will be inserted after the first value,
    as demonstrated in the following screenshot:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，选择第一个有效负载列表，在第1个位置的文本框分隔符中添加`:`字符。这将在第一个值之后插入，如下面的截图所示：
- en: '![](img/3f342fc1-fea5-4b0e-9685-7db3a6d3a056.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f342fc1-fea5-4b0e-9685-7db3a6d3a056.png)'
- en: 'Then, to encode the payload, click on Add payload processing rule. Here, select
    the Encode option in the list, and then Base64-encode. With this configuration,
    all of our payloads will be sent in Base64-encode, as shown in the following screenshot:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击“添加有效负载处理规则”来对有效负载进行编码。在这里，选择列表中的“编码”选项，然后选择Base64编码。通过这种配置，我们所有的有效负载都将以Base64编码发送，如下面的截图所示：
- en: '![](img/2864f3a8-aed5-4db2-8b07-84dbe5c089de.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2864f3a8-aed5-4db2-8b07-84dbe5c089de.png)'
- en: 'Now, go back to the Payload Sets section and select the second position. Here,
    select the list of users and passwords, but in the textbox leave empty the textbox
    separator for position 2\. Also, create the rule to encode the payload. Go back
    to the Positions tab and click on Start attack, as demonstrated in the following
    screenshot:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，返回到有效负载集部分，并选择第二个位置。在这里，选择用户和密码列表，但在文本框中留空第2个位置的文本框分隔符。还要创建规则来对有效负载进行编码。返回到位置选项卡，然后点击开始攻击，如下面的截图所示：
- en: '![](img/4b901b74-620c-4ad4-916d-fbd1089a08fa.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4b901b74-620c-4ad4-916d-fbd1089a08fa.png)'
- en: When the Intruder shows an HTTP error code 200, this means that the combination
    is correct.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当入侵者显示HTTP错误代码200时，这意味着组合是正确的。
- en: Brute forcing forms
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暴力破解表单
- en: As mentioned previously, basic authentication is not recommendable due to its
    security issues. More common is the use of authentication forms. These authentication
    forms consist in an HTML or another client technology form, which is passed to
    a backend where the credentials are processed to determine whether the user has
    access or not to the resource.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，基本身份验证由于其安全问题而不可取。更常见的是使用身份验证表单。这些身份验证表单包括HTML或其他客户端技术表单，将其传递到后端，那里处理凭据以确定用户是否有权访问资源。
- en: It is important to note that all the processing to determine whether the user
    is valid or not will be in the backend. Sometimes, it is recommendable to use
    structure validations in the client side, just to limit the number of incorrect
    attempts.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，确定用户是否有效的所有处理都将在后端进行。有时，在客户端使用结构验证是可取的，只是为了限制错误尝试的次数。
- en: Automation with Burp Suite
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Burp Suite进行自动化
- en: 'To execute a brute forcing on a form, we are going to stop the request where
    the credentials are uploaded to the application, as can be seen in the following
    code block, where the user is accessing a login section:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要在表单上执行暴力破解，我们将停止上传凭据到应用程序的请求，如下面的代码块所示，用户正在访问登录部分：
- en: '[PRE7]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this request, we can identify the parameters where the application receives
    the username and password. So, using the secondary button of the mouse, click
    on the emergent menu and select Send to Intruder. Here, we are going to create
    wildcards in the place where we have the parameters. Note that this is not a common `POST`
    request where the parameters are assigned as values. Here, we have a different
    structure, but it works in the same way.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个请求中，我们可以确定应用程序接收用户名和密码的参数。因此，使用鼠标的辅助按钮，点击弹出菜单，并选择发送到Intruder。在这里，我们将在参数所在的位置创建通配符。请注意，这不是一个常见的`POST`请求，其中参数被分配为值。在这里，我们有一个不同的结构，但它的工作方式相同。
- en: 'In this case, the application is not using any kind of encoding. We just configure
    the payload as a normal list, selecting Cluster bomb as the attack type, and our
    previous list, as shown in the following screenshot:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，应用程序没有使用任何编码。我们只需将负载配置为正常列表，选择集群炸弹作为攻击类型，并使用我们之前的列表，如下面的屏幕截图所示：
- en: '![](img/0dd09b83-fee8-4b1e-b9dd-5ea9572a6971.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0dd09b83-fee8-4b1e-b9dd-5ea9572a6971.png)'
- en: 'To finish, click on Start attack. Intruder will launch a window where we can
    see the results. There are some applications, which, when the credentials are
    incorrect, respond with a 302 error code to redirect the user to the login page
    again. In this case, the application always responds with a 200 error code, so
    is needed to analyze the response in detail. To do this in an easy way, we can
    check the column length and look for a variation in the value that indicates a
    different result, as demonstrated in the following screenshot:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，点击开始攻击。Intruder将启动一个窗口，我们可以在其中看到结果。有一些应用程序，当凭据不正确时，会以302错误代码响应，将用户重定向到登录页面。在这种情况下，应用程序总是以200错误代码响应，因此需要详细分析响应。为了简单起见，我们可以检查列长度，并寻找指示不同结果的值的变化，如下面的屏幕截图所示：
- en: '![](img/30af46b5-ca2e-440b-8951-c5d8f2bb8488.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/30af46b5-ca2e-440b-8951-c5d8f2bb8488.png)'
- en: Bypassing file upload restrictions
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绕过文件上传限制
- en: 'Many applications allow users to upload files. There are different ways to
    manage these files: some applications directly upload the file as binary, and
    others encode the file to reduce the size and manage in a database. Let''s explore
    how we can modify the restrictions established by an application to manage the
    files.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 许多应用程序允许用户上传文件。管理这些文件有不同的方式：一些应用程序直接将文件作为二进制文件上传，而其他应用程序对文件进行编码以减小大小并在数据库中进行管理。让我们探讨如何修改应用程序建立的文件限制。
- en: Bypassing type restrictions
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绕过类型限制
- en: When an application allows you to upload files, usually the developer knows
    what types of files are allowed, so it is important to validate that a malicious
    user cannot upload other kinds of files. The common way to validate this is by
    using the extension file. So, if an application manages documents, maybe the developer
    allows PDF files and DOCX documents, but is this secure?
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个应用程序允许您上传文件时，通常开发人员知道允许上传哪种类型的文件，因此验证恶意用户不能上传其他类型的文件非常重要。验证这一点的常见方法是使用文件扩展名。因此，如果一个应用程序管理文档，也许开发人员允许PDF文件和DOCX文档，但这安全吗？
- en: The file extension is not the only validation that the application needs to
    undertake. A malicious user can upload a malicious file with a valid extension;
    for example, to propagate malware.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 文件扩展名不是应用程序需要进行的唯一验证。恶意用户可以上传带有有效扩展名的恶意文件；例如，传播恶意软件。
- en: First, we are going to create a malicious PDF using a tool called Metasploit.
    Metasploit is an exploitation framework that allows attack vulnerabilities, mainly
    in infrastructure; but it also has auxiliary modules to perform some tasks, such
    as creating binary files with embedded malicious code. You can get a copy of Metasploit
    in [https://www.metasploit.com/](https://www.metasploit.com/).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用一个名为Metasploit的工具创建一个恶意PDF。Metasploit是一个利用框架，允许攻击漏洞，主要是基础设施；但它也有辅助模块来执行一些任务，比如创建带有嵌入恶意代码的二进制文件。您可以在[https://www.metasploit.com/](https://www.metasploit.com/)上获取Metasploit的副本。
- en: 'To install it, you just need to uncompress the file in a directory. To create
    a PDF, follow these steps:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装它，您只需要在一个目录中解压文件。要创建PDF，请按照以下步骤操作：
- en: Use the `adobe_utilprintf` tool, which will convert our PDF to a malicious PDF.
    You can use any PDF to do this.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`adobe_utilprintf`工具，它将把我们的PDF转换为恶意PDF。您可以使用任何PDF来做到这一点。
- en: Select the PDF to use the instruction set.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择要使用的PDF来使用指令集。
- en: Select the payload to use. Metasploit has different payloads to perform actions
    when the file is executed, or in this case, opened. The simplest payload is to
    create a connection from the computer where the file is open to a remote computer.
    This is a reverse shell.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择要使用的负载。Metasploit有不同的负载来执行文件执行时的操作，或者在这种情况下，打开时的操作。最简单的负载是从打开文件的计算机到远程计算机创建连接。这是一个反向shell。
- en: 'Set the remote IP address and the port, as demonstrated in the following screenshot:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置远程IP地址和端口，如下面的屏幕截图所示：
- en: '![](img/6394fa52-92a2-4751-a5c5-e9bb597acd5f.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6394fa52-92a2-4751-a5c5-e9bb597acd5f.png)'
- en: 'After selecting all of the options, use the instruction exploit to create the
    file, as shown in the following screenshot:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择所有选项后，使用exploit指令创建文件，如下面的屏幕截图所示：
- en: '![](img/4daf1e92-6adf-48a8-8cfd-21cc4f2f3e09.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4daf1e92-6adf-48a8-8cfd-21cc4f2f3e09.png)'
- en: 'Open the application that you are assessing using Burp Suite and intercept
    a request in a section where the user is allowed to upload files. Imagine we have
    the following vulnerable request:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您正在使用Burp Suite评估的应用程序，并拦截一个用户被允许上传文件的部分的请求。想象一下我们有以下易受攻击的请求：
- en: '![](img/12f9c3dc-896d-4d5d-824b-cd472e6dc290.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/12f9c3dc-896d-4d5d-824b-cd472e6dc290.png)'
- en: A sample vulnerable request
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一个易受攻击的请求示例
- en: 'In this request, we can see we have two restrictions. First, we have a size
    limit, which is established to avoid uploading the biggest files. We can see this
    restriction in the following lines:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个请求中，我们可以看到有两个限制。首先，我们有一个大小限制，这是为了避免上传最大的文件。我们可以在以下行中看到这个限制：
- en: '[PRE8]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: So, if we modify these values, it's possible to upload files with a size bigger
    than what is expected by the user.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们修改这些值，就有可能上传比用户预期的更大的文件。
- en: 'The other restriction is the file, as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个限制是文件，如下所示：
- en: '[PRE9]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This application is waiting for a specific extension, if we upload another file,
    such as our modified PDF, see what happens.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序正在等待特定的扩展名，如果我们上传另一个文件，比如我们修改过的PDF文件，看看会发生什么。
- en: You will see how the file is uploaded in a binary way to the server. At this
    point, the server has a malicious PDF that could be downloaded by other users,
    which will be infected. In order to confirm that the file is the same, you can
    download it and compare the downloaded file with your own file.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到文件是以二进制方式上传到服务器的。在这一点上，服务器有一个恶意的PDF文件，其他用户可以下载，这将导致感染。为了确认文件是否相同，您可以下载它并将下载的文件与您自己的文件进行比较。
- en: The conclusion for this point is that a file is just another type of input in
    an application, and you can modify it using Burp Suite like inputs in a form.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这一点的结论是，文件只是应用程序中的另一种输入类型，您可以像表单中的输入一样使用Burp Suite来修改它。
- en: Summary
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned the normal tools that Burp Suite uses to exploit
    different types of vulnerabilities. In particular, we exploited SSRF and XSPA
    to execute commands, extract information and perform tasks in the internal networks.
    Also, we reviewed the origin of these vulnerabilities. We reviewed an IDOR vulnerability,
    learned how to exploit it manually, and how to automate its exploitation using
    Intruder. Next, we reviewed some vulnerabilities related to configurations; how
    they could be critical and not critical, and how we can automate some of them.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了Burp Suite用于利用不同类型漏洞的常规工具。特别是，我们利用SSRF和XSPA来执行命令，提取信息并在内部网络中执行任务。此外，我们还回顾了这些漏洞的起源。我们回顾了IDOR漏洞，学会了如何手动利用它，以及如何使用Intruder自动化其利用。接下来，我们回顾了一些与配置相关的漏洞；它们可能是关键的，也可能不是关键的，以及我们如何自动化其中一些漏洞。
- en: We also performed brute forcing to look for valid credentials in two different
    types of authentications. We created a malicious PDF and learned how to upload
    it to a website ...
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还进行了暴力破解，以寻找两种不同类型认证的有效凭据。我们创建了一个恶意的PDF文件，并学会了如何将其上传到网站上...
