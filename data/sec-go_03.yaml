- en: Working with Files
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件操作
- en: One of the defining features of Unix and Linux systems is how everything is
    treated as a file. Processes, files, directories, sockets, devices, and pipes
    are all treated as files. Given this fundamental feature of the operating system,
    learning how to manipulate files is a critical skill. This chapter provides several
    examples of the different ways to manipulate files.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Unix和Linux系统的一个显著特点是将所有内容都视为文件。进程、文件、目录、套接字、设备和管道都被视为文件。鉴于操作系统的这一基本特性，学习如何操作文件是一项关键技能。本章提供了几个不同的文件操作示例。
- en: First, we will look at the basics, namely creating, truncating, deleting, opening,
    closing, renaming, and moving files. We will also look at how to get detailed
    attributes about a file, such as permissions and ownership, size, and symlink
    information.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将查看基础知识，即创建、截断、删除、打开、关闭、重命名和移动文件。我们还将查看如何获取有关文件的详细属性，例如权限和所有权、大小和符号链接信息。
- en: A whole section in this chapter is dedicated to the different ways you can read
    from and write to files. There are multiple packages that contain useful functions;
    moreover, the reader and writer interfaces enable many different options, such
    as buffered readers and writers, direct read and writes, scanners, and helper
    functions for quick operations.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的一个重要部分专门讨论了从文件中读取和写入数据的不同方式。有多个包含有用函数的包；此外，阅读器和写入器接口支持许多不同的选项，如缓冲读取器和写入器、直接读写、扫描器以及快速操作的辅助函数。
- en: Additionally, examples are provided for archiving and unarchiving, compressing
    and uncompressing, creating temporary files and directories, and downloading files
    over HTTP.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还提供了有关归档和解档、压缩和解压缩、创建临时文件和目录以及通过HTTP下载文件的示例。
- en: 'Specifically, this chapter will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，本章将涵盖以下主题：
- en: Creating empty files and truncating files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建空文件和截断文件
- en: Getting detailed file information
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取详细的文件信息
- en: Renaming, moving, and deleting files
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重命名、移动和删除文件
- en: Manipulating permissions, ownership, and timestamps
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改权限、所有权和时间戳
- en: Symlinks
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 符号链接
- en: Multiple ways of reading and writing files
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多种文件的读写方式
- en: Archives
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存档
- en: Compression
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 压缩
- en: Temporary files and directories
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 临时文件和目录
- en: Downloading files over HTTP
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过HTTP下载文件
- en: File basics
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件基础知识
- en: Because files are such an integral part of the computing ecosystem, it is crucial
    to understand the options available in Go for working with files. This section
    covers some basic operations, such as opening, closing, creating, and deleting
    files. Additionally, it covers renaming and moving, seeing if files exist, modifying
    permissions, ownership, timestamps, and working with symbolic links. Most of these
    examples use a hard-coded filename of `test.txt`. Change this filename if you
    want to operate on a different file.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因为文件是计算生态系统中不可或缺的一部分，了解在Go中处理文件的选项非常重要。本节涵盖了一些基本操作，如打开、关闭、创建和删除文件。此外，还涉及重命名、移动、检查文件是否存在、修改权限、所有权、时间戳以及处理符号链接。这些示例大多使用了一个硬编码的文件名`test.txt`。如果要操作其他文件，请更改此文件名。
- en: Creating an empty file
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建空文件
- en: A common tool used in Linux is the **touch** program. It's frequently used when
    you need to quickly create an empty file with a specific name. The following example
    replicates one of the common **touch** use case of creating an empty file.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中常用的一个工具是**touch**程序。当您需要快速创建具有特定名称的空文件时，经常会使用它。以下示例复制了**touch**的常见用例之一，即创建空文件。
- en: 'There are limited uses to creating an empty file, but let''s consider one example.
    What if there was a service that wrote logs to a rotating set of files. Every
    day a new file is created with the current date, and the day''s logs are written
    to that file. The developer might have been smart and put very strict permissions
    on the log files so that only administrators can read them. But, what if they
    left loose permissions on the directory? What would happen if you created an empty
    file with the next day''s date? The service may only create a new log file if
    one does not exist, but if one does exist it will use it without checking the
    permissions. You could take advantage of this by creating an empty file that you
    have read permissions to. The file should be named the same way the service would
    name the log file. For example, if the service uses a format like this for logs:
    `logs-2018-01-30.txt`, you could create an empty file named `logs-2018-01-31.txt`
    and the next day, the service will write to that file since it already exists
    and you will have read permissions, as opposed to the service creating a new file
    with root only permissions if no file existed.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 创建空文件的用途有限，但我们可以考虑一个例子。如果有一个服务将日志写入一组旋转的文件。每天会创建一个带有当前日期的新文件，并将当天的日志写入该文件。开发者可能已经非常聪明地为日志文件设置了非常严格的权限，只允许管理员读取。但如果他们在目录上留下了松散的权限呢？如果你创建一个带有第二天日期的空文件会发生什么？服务可能只有在文件不存在时才会创建新文件，但如果文件已经存在，它会使用该文件，而不检查权限。你可以利用这一点，创建一个你有读取权限的空文件。这个文件应该以与服务命名日志文件相同的方式命名。例如，如果服务使用类似
    `logs-2018-01-30.txt` 这样的格式来命名日志文件，你可以创建一个名为 `logs-2018-01-31.txt` 的空文件，第二天，服务将写入该文件，因为它已经存在，而你有读取权限，相比之下，如果没有文件存在，服务将创建一个只有
    root 用户权限的新文件。
- en: 'The following is the code implementation of this example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这个示例的代码实现：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Truncating a file
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 截断文件
- en: Truncating a file is when you trim a file down to a maximum length. Truncating
    is often used to completely remove all contents of a file, but it can also be
    used to limit a file to a specific maximum size. One notable characteristic of
    `os.Truncate()` is that it will actually increase the length of a file if it is
    smaller than the specified truncate limit. It will fill any blank space with null
    bytes.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 截断文件是指将文件修剪到最大长度。截断通常用于完全移除文件的所有内容，但也可以用于限制文件到特定的最大大小。`os.Truncate()` 的一个显著特点是，如果文件小于指定的截断限制，它实际上会增加文件的长度。它会用空字节填充任何空白空间。
- en: Truncating a file has more practical uses than creating an empty file. When
    log files get too big, they can be truncated to save disk space. If you are attacking,
    you may want to truncate `.bash_history` and other log files to cover your tracks.
    Genuinely, malicious actors may truncate files just for the sake of destroying
    data.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 截断文件比创建空文件有更多实际用途。当日志文件过大时，可以通过截断来节省磁盘空间。如果你在进行攻击，你可能希望截断 `.bash_history` 和其他日志文件，以掩盖你的痕迹。实际上，恶意行为者可能仅仅是为了销毁数据而截断文件。
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Getting the file info
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取文件信息
- en: 'The following example will print out all the metadata available about a file.
    It includes the obvious attributes, namely name, size, permissions, last modified
    time, and whether it is a directory. The last data piece it contains is the `FileInfo.Sys()`
    interface. This contains information about the underlying source of the file,
    which is most commonly a filesystem on a hard disk:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将打印出文件的所有元数据。它包括明显的属性，如文件名、大小、权限、最后修改时间以及是否是目录。它包含的最后一项数据是 `FileInfo.Sys()`
    接口。该接口包含关于文件底层来源的信息，通常来源于硬盘上的文件系统：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Renaming a file
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重命名文件
- en: 'The standard library provides a convenient function for moving a file. Renaming
    and moving are synonymous terms; if you want to move a file from one directory
    to another, use the `os.Rename()` function, as shown in the following code block:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 标准库提供了一个方便的函数来移动文件。重命名和移动是同义词；如果你想将文件从一个目录移动到另一个目录，可以使用 `os.Rename()` 函数，如以下代码块所示：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Deleting a file
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除文件
- en: 'This following example is straightforward, and it demonstrates how to delete
    a file. The standard package provides `os.Remove()`, which expects a file path:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例很简单，演示了如何删除一个文件。标准库提供了 `os.Remove()`，该函数接受一个文件路径：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Opening and closing files
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打开和关闭文件
- en: 'When opening a file, there are several options. When calling `os.Open()`, it
    just requires a filename and provides a read-only file. Another option is to use
    `os.OpenFile()`, which expects more options. You can specify whether you want
    a read-only or write-only file. You can also choose to read and write, append,
    create if does not exist, or truncate upon opening. Pass the desired options combined
    with the logical OR operator. Closing files is done by calling `Close()` on the
    file object. You can close a file explicitly or you can defer the call. Refer
    to [Chapter 2](1537b549-81fb-4988-b72b-33fbad866d5b.xhtml), *The Go Programming
    Language* for more details on the `defer` keyword. The following example does
    not use the `defer` keyword option, but later examples will:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 打开文件时，有几种选项。当调用`os.Open()`时，只需要文件名，并提供只读文件。另一个选项是使用`os.OpenFile()`，它需要更多的选项。你可以指定是只读文件、只写文件，还是可读写文件。你还可以选择在打开时进行追加、创建（如果文件不存在）或截断。通过逻辑“或”操作符结合所需选项。关闭文件是通过对文件对象调用`Close()`来完成的。你可以显式地关闭文件，或者你也可以延迟调用。有关`defer`关键字的更多细节，请参考[第2章](1537b549-81fb-4988-b72b-33fbad866d5b.xhtml)，*Go语言程序设计*。下面的示例没有使用`defer`关键字选项，但后面的示例将会使用：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Checking whether a file exists
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查文件是否存在
- en: Checking whether a file exists is a two-step process. First, `os.Stat()` must
    be called on the file to get `FileInfo`. If the file does not exist, then a `FileInfo`
    struct is not returned, but an error is returned. There are multiple errors that
    `os.Stat()` might return, so the error type must be inspected. The standard library
    provides a function called `os.IsNotExist()` that will inspect an error to see
    whether it was caused because a file does not exist.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 检查文件是否存在是一个两步过程。首先，必须对文件调用`os.Stat()`以获取`FileInfo`。如果文件不存在，则不会返回`FileInfo`结构体，而是返回一个错误。`os.Stat()`可能会返回多种错误，因此必须检查错误类型。标准库提供了一个名为`os.IsNotExist()`的函数，它将检查错误是否因为文件不存在而导致。
- en: 'The following example will call `log.Fatal()` if the file does not exist, but
    you can handle the error gracefully and move on without exiting if desired:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件不存在，下面的示例将调用`log.Fatal()`，但你可以优雅地处理错误并继续操作，而无需退出：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Checking read and write permissions
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查读写权限
- en: 'Similar to the previous example, checking the read and write permissions is
    done by inspecting an error using a function called `os.IsPermission()`. This
    function will return true if the error passed was caused due to a permission problem,
    as shown in the following example:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于前面的示例，检查读写权限是通过使用名为`os.IsPermission()`的函数来检查错误完成的。如果传递的错误是由于权限问题引起的，该函数将返回true，以下例子展示了这一点：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Changing permissions, ownership, and timestamps
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改权限、所有权和时间戳
- en: 'If you own a file or have the right privileges, you can change the ownership,
    timestamp, and permissions. A set of functions are provided by the standard library.
    They are given here:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你拥有文件或具有适当的权限，你可以更改所有权、时间戳和权限。标准库提供了一组函数，以下是这些函数：
- en: '`os.Chmod()`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`os.Chmod()`'
- en: '`os.Chown()`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`os.Chown()`'
- en: '`os.Chtimes()`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`os.Chtimes()`'
- en: 'The following example demonstrates how to use these functions to alter the
    metadata of a file:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了如何使用这些函数来更改文件的元数据：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Hard links and symlinks
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬链接和符号链接
- en: A typical file is just a pointer to a place on the hard disk, called an inode.
    A hard link creates a new pointer to the same place. A file will only be deleted
    from the disk after all links to it are removed. Hard links only work on the same
    filesystem. A hard link is what you might consider a "normal" link.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的文件只是硬盘上的一个指针，称为inode。硬链接会创建指向相同位置的新指针。文件只有在所有指向它的链接被移除后，才会从磁盘中删除。硬链接仅在同一文件系统上有效。硬链接就是你可能认为的“正常”链接。
- en: A symbolic link, or soft link, is a little different, it does not point directly
    to a place on the disk. Symlinks only reference other files by name. They can
    point to files on different filesystems. However, not all systems support symlinks.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 符号链接，或软链接，稍有不同，它不直接指向磁盘上的位置。符号链接仅通过名称引用其他文件。它们可以指向不同文件系统上的文件。然而，并非所有系统都支持符号链接。
- en: Windows historically did not have good support for symlinks, but the examples
    were tested in Windows 10 Pro, and both hard links and symlinks work properly
    if you have administrator privileges. To execute a Go program from the command
    line as an administrator, first open Command Prompt as an administrator by right
    clicking on it and selecting Run as administrator. From there you can execute
    the program, and the symlinks and hard links will work as expected.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Windows历史上对符号链接的支持较差，但这些示例已在Windows 10 Pro上测试过，若拥有管理员权限，硬链接和符号链接均能正常工作。要以管理员身份从命令行执行Go程序，首先通过右键点击命令提示符并选择“以管理员身份运行”打开命令提示符。然后你就可以执行程序，符号链接和硬链接将按预期工作。
- en: 'The following example demonstrates how to create a hard link and a symbolically
    linked file, as well as determine if a file is a symlink and how to modify the
    symlink file metadata without altering the original file:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了如何创建硬链接和符号链接文件，以及如何判断一个文件是否是符号链接，并在不修改原始文件的情况下修改符号链接文件的元数据：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Reading and writing
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取和写入
- en: Reading and writing files can be done in numerous ways. Go provides interfaces
    that make it easy to write your own functions that work with files or any other
    reader/writer interface.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 读取和写入文件有很多种方法。Go提供了接口，使得你可以轻松编写与文件或其他读取/写入接口一起工作的函数。
- en: Between the `os`, `io`, and `ioutil` packages, you can find the right function
    for your needs. These examples cover a number of the options available.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在`os`、`io`和`ioutil`包之间，你可以找到满足你需求的正确函数。这些示例涵盖了许多可用选项。
- en: Copying a file
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复制文件
- en: 'The following example uses the `io.Copy()` function to copy the contents from
    one reader to another writer:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例使用`io.Copy()`函数将内容从一个读取器复制到另一个写入器：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Seeking positions in a file
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在文件中寻址
- en: The `Seek()` function is useful for setting the file cursor in a specific location.
    By default, it starts at offset 0 and moves forward as you read bytes. You might
    want to reset the cursor back to the beginning of a file or jump directly to a
    specific location. The `Seek()` function allows you to do this.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`Seek()`函数用于将文件指针设置到特定位置。默认情况下，它从偏移量0开始，并随着读取字节向前移动。你可能想将指针重置回文件开头，或直接跳转到特定位置。`Seek()`函数可以实现这一功能。'
- en: '`Seek()` takes two parameters. The first one is distance; you want to move
    the cursor in bytes. It can move forward with a positive integer, or backward
    in a file if a negative number is provided. The first parameter, the distance,
    is a relative value, not an absolute position in the file. The second parameter
    specifies where the relative point starts and is called `whence`. The `whence` parameter
    is the point of reference for the relative offset. It can either be `0`, `1`,
    or `2`, representing the beginning of the file, the current position, and the
    end of the file, respectively.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`Seek()`函数接受两个参数。第一个参数是距离，表示你想将指针移动多少字节。如果传入正整数，指针会向前移动；如果传入负数，则指针会向后移动。第一个参数是相对值，而不是文件中的绝对位置。第二个参数指定相对位置的起始点，称为`whence`。`whence`参数是相对偏移的参考点。它可以是`0`、`1`或`2`，分别表示文件的开头、当前位置和文件的末尾。'
- en: 'As an example, if `Seek(-1, 2)` was specified, it would set the file cursor
    one byte back from the end of the file. `Seek(2, 0)` would seek the second byte
    from the beginning of `file.Seek(5, 1)`, which would move the cursor forward 5
    bytes from its current position:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，如果指定`Seek(-1, 2)`，它会将文件指针从文件末尾向后移动一个字节。`Seek(2, 0)`会将文件指针移动到文件开头后的第二个字节，`file.Seek(5,
    1)`会将指针从当前位移向前5个字节：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Writing bytes to a file
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写入字节到文件
- en: 'You can write using just the `os` package, which is needed already to open
    the file. Since all Go executables are statically linked binaries, every package
    you import increases the size of your executable. Other packages such as `io`,
    `ioutil`, and `bufio` provide some more help, but they are not necessary:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以只使用`os`包来进行写操作，它本身就用于打开文件。由于Go程序是静态链接的二进制文件，导入的每个包都会增加可执行文件的大小。其他包如`io`、`ioutil`和`bufio`提供了一些额外的帮助，但它们不是必须的：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Quickly writing to a file
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速写入文件
- en: 'The `ioutil` package has a useful function called `WriteFile()`, that will
    handle creating/opening, writing a slice of bytes, and closing. It is useful if
    you just need a quick way to dump a slice of bytes to a file:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`ioutil`包有一个非常有用的函数`WriteFile()`，可以处理创建/打开文件、写入字节切片并关闭文件。如果你只是需要快速将字节切片写入文件，这个函数非常方便：'
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Buffered writer
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓冲写入器
- en: The `bufio` package lets you create a buffered writer so that you can work with
    a buffer in memory before writing it to disk. This is useful if you need to do
    a lot of manipulation on the data before writing it to disk to save time from
    disk IO. It is also useful if you only write one byte at a time and want to store
    a large number in a memory buffer before dumping it to file at once, otherwise
    you would be performing disk IO for every byte. This puts wear and tear on your
    disk as well as it slows down the process.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`bufio` 包允许你创建一个缓冲写入器，以便在将数据写入磁盘之前在内存中处理缓冲区。这在你需要在写入磁盘之前对数据进行大量操作时非常有用，可以节省磁盘
    I/O 时间。如果你每次只写一个字节，并且希望在一次写入文件之前将大量数据存储在内存缓冲区中，那么它也很有用，否则你将为每个字节都进行磁盘 I/O 操作，这会导致磁盘磨损，并且会减慢过程。'
- en: Buffered writers can be inspected to see how much unbuffered data it is currently
    storing and how much buffer space is remaining. A buffer can also be reset to
    undo any changes since the last flush. The buffers are also resizable.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 可以检查缓冲写入器，查看它当前存储了多少未缓冲的数据，以及剩余多少缓冲区空间。缓冲区还可以重置，以撤销自上次刷新以来的所有更改。缓冲区的大小也可以调整。
- en: 'The following example opens a file named `test.txt` and creates a buffered
    writer that wraps the file object. A few bytes are written to the buffer and then
    a string is written. The in-memory buffer is then inspected before flushing the
    contents of the buffer to the file on disk. It also demonstrates how to reset
    a buffer, undoing any changes that have not been flushed, and how to inspect the
    space left in a buffer. Finally, it demonstrates how to resize the buffer to a
    specific size:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例打开名为 `test.txt` 的文件，并创建一个缓冲写入器来包装该文件对象。一些字节被写入缓冲区，然后写入一个字符串。在将缓冲区的内容刷新到磁盘上的文件之前，检查内存中的缓冲区。它还演示了如何重置缓冲区，撤销所有尚未刷新到磁盘的更改，以及如何检查缓冲区中剩余的空间。最后，它展示了如何将缓冲区调整为特定大小：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Reading up to n bytes from a file
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从文件中读取最多 n 字节
- en: The `os.File` type comes with a couple of basic functions. One of them is `File.Read()`.
    `Read()`, which expects a byte slice to be passed as a parameter. Bytes are read
    from the file and placed in the byte slice. `Read()` will read as many bytes as
    it can or until the buffer fills up, and then it will stop reading.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`os.File` 类型包含一些基本函数，其中之一是 `File.Read()`。`Read()` 函数期望传入一个字节切片作为参数。字节会从文件中读取并放入字节切片中。`Read()`
    会尽可能多地读取字节，直到缓冲区填满为止，然后停止读取。'
- en: 'Multiple calls to `Read()` may be necessary before getting to the end of a
    file, depending on the size of the buffer provided and the size of the file. An
    `io.EOF` error is returned if the end of a file is reached during a call to `Read()`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 根据提供的缓冲区大小和文件的大小，可能需要多次调用 `Read()` 才能读取完整个文件。如果在调用 `Read()` 时到达文件末尾，将返回 `io.EOF`
    错误：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Reading exactly n bytes
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精确读取 n 字节
- en: 'In the previous example, `File.Read()` will not return an error if a file only
    contains 10 bytes, but you provide a byte slice buffer with 500 bytes. There are
    some occasions where you want to ensure that the entire buffer is filled up. The
    `io.ReadFull()` function will return an error if the entire buffer is not filled
    up. If `io.ReadFull()` does not have any data to read, an EOF error is returned.
    If it reads some data, but then encounters an EOF, it will return an `ErrUnexpectedEOF` error:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，如果文件仅包含 10 个字节，而你提供了一个大小为 500 字节的字节切片缓冲区，`File.Read()` 不会返回错误。某些情况下，你可能希望确保整个缓冲区都被填满。`io.ReadFull()`
    函数将返回错误，如果缓冲区没有被填满。如果 `io.ReadFull()` 没有任何数据可以读取，将返回 EOF 错误；如果读取了一些数据，但随后遇到 EOF，它将返回
    `ErrUnexpectedEOF` 错误：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Reading at least n bytes
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 至少读取 n 字节
- en: 'Another useful function provided by the `io` package is `io.ReadAtLeast()`.
    This will return an error if at least specific number of bytes are not. Similar
    to `io.ReadFull()`, an `EOF` error is returned if no data is found, and an `ErrUnexpectedEOF`
    error is returned if some data is read before encountering the end of the file:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`io` 包提供的另一个有用函数是 `io.ReadAtLeast()`。如果没有读取到指定数量的字节，它将返回一个错误。与 `io.ReadFull()`
    类似，如果没有读取到数据，将返回 `EOF` 错误；如果读取到一些数据，但遇到文件末尾，则会返回 `ErrUnexpectedEOF` 错误：'
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Reading all bytes of a file
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取文件的所有字节
- en: The `ioutil` package provides a function to read every byte in a file and return
    it as byte slice. This function is convenient because you do not have to define
    the byte slice before doing the read. The drawback is that a really large file
    will return a large slice that may be bigger than expected.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`ioutil`包提供了一个函数来读取文件中的每个字节，并将其返回为字节切片。这个函数很方便，因为在读取之前你不需要定义字节切片。缺点是，如果文件非常大，它会返回一个可能比预期还大的字节切片。'
- en: 'The `io.ReadAll()` function expects a file that has already been opened with
    `os.Open()` or `Create()`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`io.ReadAll()`函数期望一个已经通过`os.Open()`或`Create()`打开的文件：'
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Quickly reading whole files to memory
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速将整个文件读取到内存
- en: Similar to the `io.ReadAll()` function in the previous example, `io.ReadFile()`
    will read all the bytes in a file and return a byte slice. The primary difference
    between the two is that `io.ReadFile()` expects a file path, not a file object
    that has already been opened. The `io.ReadFile()` function will take care of opening,
    reading, and closing the file. You just provide a filename and it provides the
    bytes. This is often the quickest and easiest method to load file data.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于前面示例中的`io.ReadAll()`函数，`io.ReadFile()`将读取文件中的所有字节并返回一个字节切片。这两者之间的主要区别是，`io.ReadFile()`期望的是文件路径，而不是已经打开的文件对象。`io.ReadFile()`函数将负责打开、读取和关闭文件。你只需提供文件名，它就会提供字节数据。这通常是加载文件数据最快且最简便的方法。
- en: 'While this method is very convenient, it has limitations; because it reads
    the entire file directly to memory, very large files may exhaust a system''s memory
    limit:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种方法非常方便，但它有一定的局限性；因为它将整个文件直接读取到内存中，过大的文件可能会超出系统的内存限制：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Buffered reader
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓冲区读取器
- en: 'Creating a buffered reader will store a memory buffer with some of the contents.
    A buffered reader also provides some more functions that are not available on
    the `os.File` or `io.Reader` types. The default buffer size is 4096 and the minimum
    size is 16\. Buffered readers provide a set of useful functions. Some of the functions
    available include, but are not limited to, the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个缓冲区读取器将会存储一个内存缓冲区，其中包含一些内容。缓冲区读取器还提供一些在`os.File`或`io.Reader`类型中不可用的功能。默认缓冲区大小为4096，最小大小为16。缓冲区读取器提供了一组有用的函数，包括但不限于以下功能：
- en: '`Read()`: This is to read data into a byte slice'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Read()`：用于将数据读取到字节切片中'
- en: '`Peek()`: This is to inspect the next bytes without moving the file cursor'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Peek()`：用于查看下一个字节，而不移动文件指针'
- en: '`ReadByte()`: This is to read a single byte'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ReadByte()`：用于读取单个字节'
- en: '`UnreadByte()`: This unreads the last byte read'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UnreadByte()`：取消读取上一个读取的字节'
- en: '`ReadBytes()`: This reads bytes until the specified delimiter is reached'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ReadBytes()`：读取字节直到达到指定的分隔符'
- en: '`ReadString()`: This reads a string until the specified delimiter is reached'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ReadString()`：读取字符串直到遇到指定的分隔符'
- en: 'The following example demonstrates how to use a buffered reader to get data
    from a file. First, it opens a file and then creates a buffered reader that wraps
    the file object. Once the buffered reader is ready, it shows how to use the preceding
    functions:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了如何使用缓冲区读取器从文件中获取数据。首先，它打开一个文件，然后创建一个包装该文件对象的缓冲区读取器。一旦缓冲区读取器准备好后，接下来展示如何使用前述函数：
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Reading with a scanner
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用扫描器进行读取
- en: Scanner is part of the `bufio` package. It is useful for stepping through files
    at specific delimiters. Commonly, the newline character is used as the delimiter
    to break up a file by lines. In a CSV file, commas would be the delimiter. The
    `os.File` object can be wrapped in a `bufio.Scanner` object just like a buffered
    reader. We will call `Scan()` to read up to the next delimiter, and then, use
    `Text()` or `Bytes()` to get the data that was read.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描器是`bufio`包的一部分。它对于按特定分隔符逐步读取文件非常有用。通常，换行符被用作分隔符来按行分割文件。在CSV文件中，逗号会作为分隔符。`os.File`对象可以像缓冲区读取器一样被包装在`bufio.Scanner`对象中。我们将调用`Scan()`方法读取到下一个分隔符，然后使用`Text()`或`Bytes()`获取读取的数据。
- en: The delimiter is not just a simple byte or character. There is actually a special
    function, which you have to implement, that will determine where the next delimiter
    is, how far forward to advance the pointer, and what data to return. If no custom
    `SplitFunc` type is provided, it defaults to `ScanLines`, which will split at
    every newline character. Other split functions included in `bufio` are `ScanRunes` and
    `ScanWords`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 分隔符不仅仅是一个简单的字节或字符。实际上，存在一个特殊的函数，你需要实现它，该函数将决定下一个分隔符的位置，指针应该向前推进多少，并返回哪些数据。如果未提供自定义的`SplitFunc`类型，它默认为`ScanLines`，将在每个换行符处分割。`bufio`中还包含其他分割函数，如`ScanRunes`和`ScanWords`。
- en: 'To define your own split function, define a function that matches this fingerprint:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义自己的分割函数，定义一个与此指纹匹配的函数：
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Returning (`0`, `nil`, `nil`) will tell the scanner to scan again, but with
    a bigger buffer because it wasn't enough data to reach the delimiter.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 返回（`0`，`nil`，`nil`）将告诉扫描器重新扫描，但需要更大的缓冲区，因为当前数据不足以达到分隔符。
- en: 'In the following example, `bufio.Scanner` is created from the file, and then
    the file is scanned word by word:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，从文件创建了`bufio.Scanner`，然后按单词扫描文件：
- en: '[PRE22]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Archives
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 归档
- en: Archives are a file format that stores multiple files. Two of the most common
    archive formats are tar balls ZIP archives. The Go standard library has both the
    `tar` and `zip` packages. These examples use the ZIP format, but the tar format
    can easily be interchanged.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 归档是一种存储多个文件的文件格式。最常见的两种归档格式是tar包和ZIP归档。Go标准库同时支持`tar`和`zip`包。这些示例使用ZIP格式，但tar格式可以轻松互换。
- en: Archive (ZIP) files
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 归档（ZIP）文件
- en: 'The following example demonstrates how to create an archive with multiple files
    inside. The files in the example are hard-coded with only a few bytes, but should
    be easily adapted to suit other needs:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了如何创建一个包含多个文件的归档文件。示例中的文件是硬编码的，仅包含几个字节，但应该可以轻松适应其他需求：
- en: '[PRE23]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Extracting (unzip) archived files
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取（解压）归档文件
- en: 'The following example demonstrates how to unarchive a ZIP format file. It will
    replicate the directory structure it finds inside the archive by creating directories
    if necessary:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了如何解压ZIP格式的文件。它会通过创建必要的目录来复制归档文件中的目录结构：
- en: '[PRE24]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Compression
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 压缩
- en: The Go standard library also supports compression, which is different than archiving.
    Often, archiving and compressing are combined to package a large number of files
    in to a single compact file. The most common format is probably the `.tar.gz`
    file, which is a gzipped tar ball. Do not confuse zip and gzip as they are two
    different things.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Go标准库还支持压缩功能，这与归档不同。通常，归档和压缩是结合使用的，用来将大量文件打包成一个单一的紧凑文件。最常见的格式可能是`.tar.gz`文件，它是一个gzip压缩的tar包。不要将zip和gzip混淆，它们是两种不同的东西。
- en: 'The Go standard library has support for multiple compression algorithms:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Go标准库支持多种压缩算法：
- en: '**bzip2**: bzip2 format'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**bzip2**：bzip2格式'
- en: '**flate**: DEFLATE (RFC 1951)'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**flate**：DEFLATE（RFC 1951）'
- en: '**gzip**: gzip format (RFC 1952)'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**gzip**：gzip格式（RFC 1952）'
- en: '**lzw**: Lempel-Ziv-Welch format from *A Technique for High-Performance Data
    Compression, Computer, 17(6) (June 1984), pp 8-19*'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**lzw**：Lempel-Ziv-Welch格式，出自 *A Technique for High-Performance Data Compression,
    Computer, 17(6) (1984年6月)，第8-19页*'
- en: '**zlib**: zlib format (RFC 1950)'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**zlib**：zlib格式（RFC 1950）'
- en: Read more about each package at [https://golang.org/pkg/compress/](https://golang.org/pkg/compress/).
    These examples use gzip compression, but it should be easy to interchange any
    of the above packages.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 了解更多关于每个包的内容，请访问 [https://golang.org/pkg/compress/](https://golang.org/pkg/compress/)。这些示例使用gzip压缩，但应该很容易将上述任何包互换使用。
- en: Compressing a file
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 压缩文件
- en: 'The following example demonstrates how to compress a file using the `gzip`
    package:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了如何使用`gzip`包压缩文件：
- en: '[PRE25]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Uncompressing a File
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解压文件
- en: 'The following example demonstrates how to uncompress a file using the `gzip`
    algorithm:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了如何使用`gzip`算法解压文件：
- en: '[PRE26]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Before we wrap up this chapter about working with files, let's look at two more
    practical examples that may be useful. Temporary files and directories are useful
    when you don't want to create a permanent file, but need a file to work with.
    Additionally, a common way to obtain files is by downloading them over the internet.
    The next examples demonstrate these operations.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在结束本章关于文件操作的内容之前，让我们看两个可能有用的实际示例。临时文件和目录在你不想创建永久文件，但又需要一个文件进行操作时非常有用。此外，获取文件的常见方式是通过互联网下载。以下示例展示了这些操作。
- en: Creating temporary files and directories
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建临时文件和目录
- en: 'The `ioutil` package provides two functions: `TempDir()` and `TempFile()`.
    It is the caller''s responsibility to delete the temporary items when done. The
    only benefit these functions provide is that you can pass it an empty string for
    the directory, and it will automatically create the item in the system''s default
    temporary folder (`/tmp` on Linux), since the `os.TempDir()` function will return
    the default system temporary directory:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`ioutil` 包提供了两个函数：`TempDir()` 和 `TempFile()`。调用者有责任在使用完毕后删除临时文件。这些函数提供的唯一好处是你可以传递一个空字符串作为目录，它会自动在系统的默认临时文件夹中创建该文件（在
    Linux 上是 `/tmp`），因为 `os.TempDir()` 函数将返回默认的系统临时目录：'
- en: '[PRE27]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Downloading a file over HTTP
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 HTTP 下载文件
- en: A common task in modern computing is downloading a file over the HTTP protocol.
    The following example shows how to quickly download a specific URL to a file.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现代计算中的一个常见任务是通过 HTTP 协议下载文件。以下示例展示了如何快速下载一个特定 URL 到文件。
- en: 'Other common tools that accomplish this task are `curl` and `wget`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 其他常见的完成此任务的工具包括`curl`和`wget`：
- en: '[PRE28]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Summary
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: After reading this chapter, you should be now familiar with some of the different
    ways to interact with files and feel comfortable performing basic operations.
    The goal is not to memorize all of these function names, but to be aware of what
    tools are available. This chapter can be used as a reference if you need sample
    code, but I encourage you to create a cookbook repository with snippets like these.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，你应该已经熟悉了一些与文件交互的不同方式，并且能够自如地执行基本操作。目标不是记住所有这些函数名，而是意识到有哪些工具可用。如果你需要示例代码，本章可以作为参考，但我鼓励你创建一个食谱库，收集像这样的代码片段。
- en: The useful file functions are spread across multiple packages. The `os` package
    contains only the basic operations for working with files such as opening, closing,
    and simple reads. The `io` package provides functions that can be used on reader
    and writer interfaces at a higher level than the `os` package. The `ioutil` package
    provides even higher-level convenience functions for working with files.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 有用的文件函数分布在多个包中。`os` 包仅包含用于处理文件的基本操作，如打开、关闭和简单的读取操作。`io` 包提供了比 `os` 包更高层次的可以在读取和写入接口上使用的函数。`ioutil`
    包提供了更高级的便捷函数，用于处理文件。
- en: In the next chapter, we will cover the topic of forensics. It will cover things
    such as looking for anomalous files that are extremely large or recently modified.
    In addition to file forensics, we will cover some network forensic investigation
    topics, namely looking up hostnames, IPs, and MX records for a host. The forensics
    chapter also covers basic examples of steganography, showing how to hide data
    in images and how to find hidden data inside images.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论取证的主题。内容将包括如何查找异常的文件，如异常大的或最近修改的文件。除了文件取证外，我们还将讨论一些网络取证调查话题，即查找主机的主机名、IP
    地址和 MX 记录。取证章节还包括一些基本的隐写术示例，展示如何在图像中隐藏数据以及如何在图像中查找隐藏的数据。
