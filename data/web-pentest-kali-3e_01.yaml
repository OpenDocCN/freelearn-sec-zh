- en: Introduction to Penetration Testing and Web Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渗透测试和Web应用程序简介
- en: A web application uses the HTTP protocol for client-server communication and
    requires a web browser as the client interface. It is probably the most ubiquitous
    type of application in modern companies, from Human Resources' organizational
    climate surveys to IT technical services for a company's website. Even thick and
    mobile applications and many **Internet of Things** (**IoT**) devices make use
    of web components through web services and the web interfaces that are embedded
    into them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序使用HTTP协议进行客户端和服务器之间的通信，并需要Web浏览器作为客户端界面。它可能是现代公司中最普遍的应用程序类型，从人力资源的组织气候调查到公司网站的IT技术服务。甚至厚客户端应用程序、移动应用程序和许多**物联网**（**IoT**）设备也通过Web服务和嵌入到其中的Web界面使用Web组件。
- en: Not long ago, it was thought that security was necessary only at the organization's
    perimeter and only at network level, so companies spent considerable amount of
    money on physical and network security. With that, however, came a somewhat false
    sense of security because of their reliance on web technologies both inside and
    outside of the organization. In recent years and months, we have seen news of
    spectacular data leaks and breaches of millions of records including information
    such as credit card numbers, health histories, home addresses, and the **Social
    Security Numbers** (**SSNs**) of people from all over the world. Many of these
    attacks were started by exploiting a web vulnerability or design failure.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 不久前，人们认为安全只在组织的边界和网络层面上是必要的，因此公司在物理和网络安全上花费了大量资金。然而，由于他们对组织内外的Web技术的依赖，这也带来了一种有些虚假的安全感。近年来，我们看到了关于数百万条记录的惊人数据泄露和违规事件的新闻，其中包括信用卡号码、健康历史、家庭地址以及来自世界各地的人们的社会安全号码（**SSN**）。其中许多攻击都是通过利用Web漏洞或设计失误开始的。
- en: Modern organizations acknowledge that they depend on web applications and web
    technologies, and that they are as prone to attack as their network and operating
    systems—if not more so. This has resulted in an increase in the number of companies
    who provide protection or defense services against web attacks, as well as the
    appearance or growth of technologies such as **Web Application Firewall** (**WAF**),
    **Runtime Application Self-Protection** (**RASP**), web vulnerability scanners,
    and source code scanners. Also, there has been an increase in the number of organizations
    that find it valuable to test the security of their applications before releasing
    them to end users, providing an opportunity for talented hackers and security
    professionals to use their skills to find flaws and provide advice on how to fix
    them, thereby helping companies, hospitals, schools, and governments to have more
    secure applications and increasingly improved software development practices.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现代组织承认他们依赖于Web应用程序和Web技术，并且它们与网络和操作系统一样容易受到攻击，甚至更容易。这导致提供防护或防御Web攻击服务的公司数量增加，以及**Web应用程序防火墙**（**WAF**）、**运行时应用程序自我保护**（**RASP**）、Web漏洞扫描器和源代码扫描器等技术的出现或增长。此外，越来越多的组织发现在向最终用户发布应用程序之前测试其安全性非常有价值，这为有才华的黑客和安全专业人员提供了机会，他们可以利用自己的技能发现漏洞并提供修复建议，从而帮助公司、医院、学校和政府拥有更安全的应用程序和日益改进的软件开发实践。
- en: Proactive security testing
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主动安全测试
- en: '**Penetration testing** and **ethical hacking** are proactive ways of testing
    web applications by performing attacks that are similar to a real attack that
    could occur on any given day. They are executed in a controlled way with the objective
    of finding as many security flaws as possible and to provide feedback on how to
    mitigate the risks posed by such flaws.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**渗透测试**和**道德黑客**是通过执行类似于任何一天可能发生的真实攻击的攻击方式来主动测试Web应用程序的方法。它们以受控的方式执行，目的是尽可能发现多个安全漏洞，并提供有关如何减轻这些漏洞带来的风险的反馈。'
- en: It is very beneficial for companies to perform security testing on applications
    before releasing them to end users. In fact, there are security-conscious corporations
    that have nearly completely integrated penetration testing, vulnerability assessments,
    and source code reviews in their software development cycle. Thus, when they release
    a new application, it has already been through various stages of testing and remediation.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在向最终用户发布应用程序之前，对应用程序进行安全测试对公司非常有益。事实上，有一些安全意识很强的公司几乎已经将渗透测试、漏洞评估和源代码审查完全整合到了软件开发周期中。因此，当他们发布新的应用程序时，它已经经历了各个测试和修复阶段。
- en: Different testing methodologies
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不同的测试方法论
- en: 'People are often confused by the following terms, using them interchangeably
    without understanding that, although some aspects of these terms overlap, there
    are also subtle differences that require your attention:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 人们经常对以下术语感到困惑，他们互换使用，但并不理解这些术语的某些方面虽然有重叠，但也存在细微的差异，需要您注意：
- en: Ethical hacking
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 道德黑客
- en: Penetration testing
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渗透测试
- en: Vulnerability assessment
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 漏洞评估
- en: Security audits
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全审计
- en: Ethical hacking
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 道德黑客
- en: Very few people realize that hacking is a misunderstood term; it means different
    things to different people, and more often than not a hacker is thought of as
    a person sitting in a dark enclosure with no social life and malicious intent.
    Thus, the word ethical is prefixed here to the term, hacking. The term, **ethical
    hacker** is used to refer to professionals who work to identify loopholes and
    vulnerabilities in systems, report it to the vendor or owner of the system, and,
    at times, help them fix the system. The tools and techniques used by an ethical
    hacker are similar to the ones used by a cracker or a black hat hacker, but the
    aim is different as it is used in a more professional way. Ethical hackers are
    also known as *security researchers*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 很少有人意识到黑客是一个被误解的术语；它对不同的人有不同的含义，而且往往黑客被认为是一个坐在黑暗的地方没有社交生活且有恶意意图的人。因此，在术语“黑客”前面加上了“道德”一词。术语“道德黑客”用来指称那些致力于发现系统漏洞和脆弱性、向系统的供应商或所有者报告，并有时帮助他们修复系统的专业人士。道德黑客使用的工具和技术与黑客或黑帽黑客使用的工具和技术类似，但目的不同，因为它以更专业的方式使用。道德黑客也被称为“安全研究员”。
- en: Penetration testing
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渗透测试
- en: Penetration testing is a term that we will use very often in this book, and
    it is a subset of ethical hacking. It is a more professional term used to describe
    what an ethical hacker does. If you are planning a career in ethical hacking or
    security testing, then you would often see job postings with the title, Penetration
    Tester. Although penetration testing is a subset of ethical hacking, it differs
    in many ways. It's a more streamlined way of identifying vulnerabilities in systems
    and finding out if the vulnerability is exploitable or not. Penetration testing
    is governed by a contract between the tester and owner of the systems to be tested.
    You need to define the scope of the test in order to identify the systems to be
    tested. Rules of Engagement need to be defined, which determines the way in which
    the testing is to be done.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 渗透测试是本书中我们经常使用的一个术语，它是道德黑客的一个子集。它是一个更专业的术语，用来描述道德黑客的工作内容。如果你计划从事道德黑客或安全测试的职业，那么你经常会看到职位为渗透测试员的招聘信息。尽管渗透测试是道德黑客的一个子集，但它在很多方面有所不同。它是一种更简化的方式，用于识别系统中的漏洞，并确定漏洞是否可利用。渗透测试受到测试人员和被测试系统的所有者之间的合同的约束。为了确定要测试的系统，您需要定义测试的范围。需要定义“参与规则”，确定测试的方式。
- en: Vulnerability assessment
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 漏洞评估
- en: At times, organizations might want only to identify the vulnerabilities that
    exist in their systems without actually exploiting them and gaining access. Vulnerability
    assessments are broader than penetration tests. The end result of **vulnerability
    assessment** is a report prioritizing the vulnerabilities found, with the most
    severe ones listed at the top and the ones posing a lesser risk appearing lower
    in the report. This report is very helpful for clients who know that they have
    security issues and who need to identify and prioritize the most critical ones.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，组织可能只想识别其系统中存在的漏洞，而不实际利用它们并获取访问权限。漏洞评估比渗透测试更广泛。漏洞评估的最终结果是一个报告，按照发现的漏洞进行优先排序，最严重的漏洞排在前面，风险较低的漏洞排在报告的较低位置。这份报告对于知道自己存在安全问题并需要确定和优先处理最关键问题的客户非常有帮助。
- en: Security audits
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全审计
- en: '**Auditing** is a systematic procedure that is used to measure the state of
    a system against a predetermined set of standards. These standards can be industry
    best practices or an in-house checklist. The primary objective of an audit is
    to measure and report on conformance. If you are auditing a web server, some of
    the initial things to look out for are the open ports on the server, harmful HTTP
    methods, such as `TRACE`, enabled on the server, the encryption standard used,
    and the key length.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 审计是一种系统性的程序，用于根据预先确定的一组标准来衡量系统的状态。这些标准可以是行业最佳实践或内部清单。审计的主要目标是衡量和报告符合情况。如果你正在审计一个Web服务器，一些最初需要注意的事项包括服务器上的开放端口、启用的有害HTTP方法（如TRACE）、使用的加密标准和密钥长度。
- en: Considerations when performing penetration testing
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行渗透测试时需要考虑的因素
- en: When planning to execute a penetration testing project, be it for a client as
    a professional penetration tester or as part of a company's internal security
    team, there are aspects that always need to be considered before starting the
    engagement.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在计划执行渗透测试项目时，无论是作为专业渗透测试员为客户工作，还是作为公司内部安全团队的一部分，都需要在开始参与之前考虑一些方面。
- en: Rules of Engagement
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参与规则
- en: '**Rules of Engagement** (**RoE**) is a document that deals with the manner
    in which the penetration test is to be conducted. Some of the directives that
    should be clearly spelled out in RoE before you start the penetration test are
    as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 参与规则（RoE）是一份文件，涉及渗透测试的进行方式。在开始渗透测试之前，应明确规定RoE中的一些指令，例如：
- en: The type and scope of testing
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试的类型和范围
- en: Client contact details
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户联系方式
- en: Client IT team notifications
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户IT团队通知
- en: Sensitive data handling
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敏感数据处理
- en: Status meeting and reports
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态会议和报告
- en: The type and scope of testing
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试的类型和范围
- en: The type of testing can be black box, white box, or an intermediate gray box,
    depending on how the engagement is performed and the amount of information shared
    with the testing team.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 测试的类型可以是黑盒测试、白盒测试或中间的灰盒测试，这取决于参与方式和与测试团队共享的信息量。
- en: There are things that can and cannot be done in each type of testing. With **black
    box testing**, the testing team works from the view of an attacker who is external
    to the organization, as the penetration tester starts from scratch and tries to
    identify the network map, the defense mechanisms implemented, the internet-facing
    websites and services, and so on. Even though this approach may be more realistic
    in simulating an external attacker, you need to consider that such information
    may be easily gathered from public sources or that the attacker may be a disgruntled
    employee or ex-employee who already possess it. Thus, it may be a waste of time
    and money to take a black box approach if, for example, the target is an internal
    application meant to be used by employees only.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在每种类型的测试中，都有可以做和不可以做的事情。在**黑盒测试**中，测试团队从组织外部的攻击者的视角出发，渗透测试人员从零开始，试图识别网络地图、实施的防御机制、面向互联网的网站和服务等。尽管这种方法在模拟外部攻击者方面可能更加真实，但需要考虑到这些信息可能很容易从公共来源获取，或者攻击者可能是一个已经拥有这些信息的不满意的员工或前员工。因此，如果目标是仅供员工使用的内部应用程序，采用黑盒方法可能是浪费时间和金钱。
- en: '**White box testing** is where the testing team is provided with all of the
    available information about the targets, sometimes even including the source code
    of the applications, so that little or no time is spent on reconnaissance and
    scanning. A gray box test then would be when partial information, such as URLs
    of applications, user-level documentation, and/or user accounts are provided to
    the testing team.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**白盒测试**是指测试团队获得有关目标的所有可用信息，有时甚至包括应用程序的源代码，以便在侦察和扫描上花费很少或没有时间。然后，灰盒测试是指向测试团队提供部分信息，例如应用程序的URL、用户级文档和/或用户帐户。'
- en: '**Gray box testing** is especially useful when testing web applications, as
    the main objective is to find vulnerabilities within the application itself, not
    in the hosting server or network. Penetration testers can work with user accounts
    to adopt the point of view of a malicious user or an attacker that gained access
    through social engineering.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**灰盒测试**在测试Web应用程序时特别有用，因为主要目标是在应用程序本身中发现漏洞，而不是在托管服务器或网络中。渗透测试人员可以使用用户帐户来采用恶意用户或通过社交工程获得访问权限的攻击者的视角。'
- en: When deciding on the scope of testing, the client along with the testing team
    need to evaluate what information is valuable and necessary to be protected, and
    based on that, determine which applications/networks need to be tested and with
    what degree of access to the information.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在确定测试范围时，客户与测试团队需要评估哪些信息是有价值且需要保护的，并基于此确定需要测试哪些应用程序/网络以及对信息的访问程度。
- en: Client contact details
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户联系方式
- en: We can agree that even when we take all of the necessary precautions when conducting
    tests, at times the testing can go wrong because it involves making computers
    do nasty stuff. Having the right contact information on the client-side really
    helps. A penetration test is often seen turning into a **Denial-of-Service** (**DoS**)
    attack. The technical team on the client side should be available 24/7 in case
    a computer goes down and a hard reset is needed to bring it back online.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以认同，即使在进行测试时采取了所有必要的预防措施，有时测试也可能出错，因为它涉及让计算机执行恶意操作。在客户端拥有正确的联系信息确实非常有帮助。渗透测试经常会变成**拒绝服务**（**DoS**）攻击。客户端的技术团队应该全天候可用，以防计算机崩溃，需要硬重启才能恢复在线状态。
- en: Penetration testing web applications has the advantage that it can be done in
    an environment that has been specially built for that purpose, allowing the testers
    to reduce the risk of negatively affecting the client's productive assets.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 渗透测试Web应用程序的优势在于可以在专门为此目的构建的环境中进行，从而使测试人员降低对客户生产资产的负面影响的风险。
- en: Client IT team notifications
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户IT团队通知
- en: Penetration tests are also used as a means to check the readiness of the support
    staff in responding to incidents and intrusion attempts. You should discuss this
    with the client whether it is an announced or unannounced test. If it's an announced
    test, make sure that you inform the client of the time and date, as well as the
    source IP addresses from where the testing (attack) will be done, in order to
    avoid any real intrusion attempts being missed by their IT security team. If it's
    an unannounced test, discuss with the client what will happen if the test is blocked
    by an automated system or network administrator. Does the test end there, or do
    you continue testing? It all depends on the aim of the test, whether it's conducted
    to test the security of the infrastructure or to check the response of the network
    security and incident handling team. Even if you are conducting an unannounced
    test, make sure that someone in the escalation matrix knows about the time and
    date of the test. Web application penetration tests are usually announced.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 渗透测试还用作检查支持人员对事件和入侵尝试的响应准备情况的手段。您应该与客户讨论此事，无论是宣布还是未宣布的测试。如果是宣布的测试，请确保通知客户测试（攻击）将在何时何地进行，并提供测试的源IP地址，以避免其IT安全团队错过任何真正的入侵尝试。如果是未宣布的测试，请与客户讨论如果测试被自动系统或网络管理员阻止会发生什么。测试是否在那里结束，还是继续进行？这完全取决于测试的目的，是为了测试基础设施的安全性还是检查网络安全和事件处理团队的响应。即使进行未宣布的测试，也要确保升级矩阵中的某人知道测试的时间和日期。Web应用程序渗透测试通常是宣布的。
- en: Sensitive data handling
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 敏感数据处理
- en: During test preparation and execution, the testing team will be provided with
    and may also find sensitive information about the company, the system, and/or
    its users. Sensitive data handling needs special attention in the RoE and proper
    storage and communication measures should be taken (for example, full disk encryption
    on the testers' computers, encrypting reports if they are sent by email, and so
    on). If your client is covered under the various regulatory laws such as the **Health
    Insurance Portability and Accountability Act** (**HIPAA**), the **Gramm-Leach-Bliley
    Act** (**GLBA**), or the European data privacy laws, only authorized personnel
    should be able to view personal user data.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试准备和执行过程中，测试团队将获得并可能发现有关公司、系统和/或其用户的敏感信息。敏感数据处理在RoE中需要特别注意，并且应采取适当的存储和通信措施（例如，对测试人员计算机进行全盘加密，如果通过电子邮件发送报告，则对报告进行加密等）。如果您的客户受到各种监管法律的覆盖，例如《健康保险可携带性和责任法》（HIPAA）、《格拉姆-利奇-布莱利法》（GLBA）或欧洲数据隐私法，只有授权人员才能查看个人用户数据。
- en: Status meeting and reports
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 状态会议和报告
- en: Communication is key for a successful penetration test. Regular meetings should
    be scheduled between the testing team and the client organization and routine
    status reports issued by the testing team. The testing team should present how
    far they have reached and what vulnerabilities have been found up to that point.
    The client organization should also confirm whether their detection systems have
    triggered any alerts resulting from the penetration attempt. If a web server is
    being tested and a WAF was deployed, it should have logged and blocked attack
    attempts. As a best practice, the testing team should also document the time when
    the test was conducted. This will help the security team in correlating the logs
    with the penetration tests.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 沟通是成功的渗透测试的关键。测试团队和客户组织之间应定期安排会议，并由测试团队发布例行状态报告。测试团队应介绍他们已经达到的进展以及到目前为止发现的漏洞。客户组织还应确认他们的检测系统是否触发了由渗透尝试引起的任何警报。如果正在测试Web服务器并且部署了WAF，则应记录和阻止攻击尝试。作为最佳实践，测试团队还应记录测试进行的时间。这将帮助安全团队将日志与渗透测试相关联。
- en: WAFs work by analyzing the HTTP/HTTPS traffic between clients and servers, and
    they are capable of detecting and blocking the most common attacks on web applications.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: WAF通过分析客户端和服务器之间的HTTP/HTTPS流量工作，并且能够检测和阻止对Web应用程序的最常见攻击。
- en: The limitations of penetration testing
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渗透测试的限制
- en: 'Although penetration tests are recommended and should be conducted on a regular
    basis, there are certain limitations to penetration testing. The quality of the
    test and its results will directly depend on the skills of the testing team. Penetration
    tests cannot find all of the vulnerabilities due to the limitation of scope, limitation
    of access of penetration testers to the testing environment, and limitations of
    tools used by the tester. The following are some of the limitations of a penetration
    test:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管渗透测试被推荐并应定期进行，但渗透测试存在一定的限制。测试的质量和结果将直接取决于测试团队的技能。由于范围的限制、渗透测试人员对测试环境的访问限制以及测试人员使用的工具的限制，渗透测试无法找到所有的漏洞。以下是渗透测试的一些限制：
- en: '**Limitation of skills**: As mentioned earlier, the success and quality of
    the test will directly depend on the skills and experience of the penetration
    testing team. Penetration tests can be classified into three broad categories:
    network, system, and web application penetration testing. You will not get correct
    results if you make a person skilled in network penetration testing work on a
    project that involves testing a web application. With the huge number of technologies
    deployed on the internet today, it is hard to find a person skillful in all three.
    A tester may have in-depth knowledge of Apache web servers, but might be encountering
    an IIS server for the first time. Past experience also plays a significant role
    in the success of the test; mapping a low-risk vulnerability to a system that
    has a high level of threat is a skill that is only acquired through experience.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技能限制：如前所述，测试的成功和质量将直接取决于渗透测试团队的技能和经验。渗透测试可以分为三个广泛的类别：网络、系统和Web应用程序渗透测试。如果让一个擅长网络渗透测试的人参与测试Web应用程序的项目，将无法获得正确的结果。由于当今互联网上部署了大量的技术，很难找到一个精通这三个领域的人。一个测试人员可能对Apache
    Web服务器有深入的了解，但可能是第一次遇到IIS服务器。过去的经验也在测试的成功中起着重要作用；将一个低风险漏洞映射到具有高威胁级别的系统是一种只能通过经验获得的技能。
- en: '**Limitation of time**: Penetration testing is often a short-term project that
    has to be completed in a predefined time period. The testing team is required
    to produce results and identify vulnerabilities within that period. Attackers,
    on the other hand, have much more time to work on their attacks and can plan them
    carefully. Penetration testers also have to produce a report at the end of the
    test, describing the methodology, vulnerabilities identified, and an executive
    summary. Screenshots have to be taken at regular intervals, which are then added
    to the report. Clearly, an attacker will not be writing any reports and can therefore
    dedicate more time to the actual attack.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间限制：渗透测试通常是一个短期项目，必须在预定的时间段内完成。测试团队需要在该期限内产生结果并确定漏洞。另一方面，攻击者有更多的时间来进行攻击，并可以仔细计划。渗透测试人员还必须在测试结束时提交报告，描述方法论、确定的漏洞和执行摘要。必须定期拍摄屏幕截图，然后将其添加到报告中。显然，攻击者不会编写任何报告，因此可以将更多时间用于实际攻击。
- en: '**Limitation of custom exploits**: In some highly secure environments, normal
    penetration testing frameworks and tools are of little use and the team is required
    to think outside of the box, such as by creating a custom exploit and manually
    writing scripts to reach the target. Creating exploits is extremely time consuming,
    and it affects the overall budget and time for the test. In any case, writing
    custom exploits should be part of the portfolio of any self-respecting penetration
    tester.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义利用的限制：在某些高度安全的环境中，常规的渗透测试框架和工具几乎没有用处，团队需要跳出常规思维，例如创建自定义利用和手动编写脚本以达到目标。创建利用非常耗时，它会影响测试的总预算和时间。无论如何，编写自定义利用应该是任何自重的渗透测试人员的技能组合的一部分。
- en: '**Avoiding DoS attack**: Hacking and penetration testing is the art of making
    a computer or application do things that it was not designed to do. Thus, at times,
    a test may lead to a DoS attack rather than gaining access to the system. Many
    testers do not run such tests in order to avoid inadvertently causing downtime
    on the system. Since systems are not tested for DoS attacks, they are more prone
    to attacks by script kiddies, who are just out there looking for such internet-accessible
    systems in order to seek fame by taking them offline. **Script kiddies** are unskilled
    individuals who exploit easy-to-find and well-known weaknesses in computer systems
    in order to gain notoriety without understanding, or caring about, the potential
    harmful consequences. Educating the client about the pros and cons of a DoS test
    should be done, as this will help them to make the right decision.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免DoS攻击：黑客和渗透测试是一种让计算机或应用程序执行其设计之外功能的艺术。因此，有时候测试可能导致DoS攻击，而不是获取系统访问权限。许多测试人员为了避免意外造成系统停机而不进行此类测试。由于系统未经过DoS攻击测试，它们更容易受到脚本小子的攻击，这些脚本小子只是在寻找此类可通过互联网访问的系统，以便通过将其下线来获得声誉。脚本小子是指那些利用计算机系统中易于发现和众所周知的弱点来获取声誉，而不理解或关心潜在的有害后果的技术水平低下的个人。应该向客户介绍DoS测试的利弊，以帮助他们做出正确的决策。
- en: '**Limitation of access**: Networks are divided into different segments, and
    the testing team will often have access and rights to test only those segments
    that have servers and are accessible from the internet in order to simulate a
    real-world attack. However, such a test will not detect configuration issues and
    vulnerabilities on the internal network where the clients are located.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问限制：网络被划分为不同的段，测试团队通常只能访问和测试那些具有服务器并可从互联网访问的段，以模拟真实世界的攻击。然而，这样的测试无法检测到客户所在的内部网络上的配置问题和漏洞。
- en: '**Limitations of tools used**: Sometimes, the penetration testing team is only
    allowed to use a client-approved list of tools and exploitation frameworks. No
    one tool is complete irrespective of it being a free version or a commercial one.
    The testing team needs to be knowledgeable about these tools, and they will have
    to find alternatives when features are missing from them.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用工具的限制：有时，渗透测试团队只被允许使用客户批准的工具和利用框架清单。无论是免费版本还是商业版本，没有一种工具是完整的。测试团队需要了解这些工具，并在它们缺少功能时寻找替代品。
- en: In order to overcome these limitations, large organizations have a dedicated
    penetration testing team that researches new vulnerabilities and performs tests
    regularly. Other organizations perform regular configuration reviews in addition
    to penetration tests.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了克服这些限制，大型组织设有专门的渗透测试团队，负责研究新的漏洞并定期进行测试。其他组织除了进行渗透测试外，还进行定期的配置审查。
- en: The need for testing web applications
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试Web应用程序的需求
- en: With the huge number of internet-facing websites and the increase in the number
    of organizations doing business online, web applications and web servers make
    an attractive target for attackers. Web applications are everywhere across public
    and private networks, so attackers don't need to worry about a lack of targets.
    Only a web browser is required to interact with a web application. Some of the
    defects in web applications, such as logic flaws, can be exploited even by a layman.
    For example, due to bad implementation of logic, if a company has an e-commerce
    website that allows the user to add items to their cart after the checkout process
    and a malicious user finds this out through trial and error, they would then be
    able to exploit this easily without needing any special tools.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 随着互联网面向的网站数量的增加以及进行在线业务的组织数量的增加，Web应用程序和Web服务器成为攻击者的有吸引力的目标。Web应用程序无处不在，遍布公共和私有网络，因此攻击者不需要担心目标的缺乏。只需要一个Web浏览器就可以与Web应用程序进行交互。一些Web应用程序的缺陷，如逻辑错误，甚至可以被一个外行人利用。例如，由于逻辑实现不当，如果一家公司拥有一个电子商务网站，在结账过程之后允许用户将商品添加到购物车，那么一个恶意用户通过试错发现这一点后，就可以轻松地利用这个漏洞，而无需任何特殊工具。
- en: Vulnerabilities in web applications also provide a means for spreading malware
    and viruses, and these can spread across the globe in a matter of minutes. Cybercriminals
    realize considerable financial gains by exploiting web applications and installing
    malware that will then be passed on to the application's users.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序的漏洞也为恶意软件和病毒的传播提供了手段，这些恶意软件和病毒可以在几分钟内传播到全球。黑客通过利用Web应用程序和安装恶意软件获得可观的经济利益，然后将其传播给应用程序的用户。
- en: Firewalls at the edge are more permissive to inbound HTTP traffic flowing towards
    the web server, so the attacker does not require any special ports to be open.
    The HTTP protocol, which was designed many years ago, does not provide any built-in
    security features; it's a cleartext protocol, and it requires the additional layering
    of using the HTTPS protocol in order to secure communication. It also does not
    provide individual session identification, and it leaves it to the developer to
    design it in. Many developers are hired directly out of college, and they have
    only theoretical knowledge of programming languages and no prior experience with
    the security aspects of web application programming. Even when the vulnerability
    is reported to the developers, they take a long time to fix it as they are busier
    with the feature creation and enhancement portion of the web application.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 边缘防火墙对流向Web服务器的入站HTTP流量更加宽松，因此攻击者不需要打开任何特殊端口。HTTP协议是多年前设计的，没有提供任何内置的安全功能；它是一个明文协议，需要使用HTTPS协议进行额外的层次保护通信。它也没有提供个别会话标识，而是由开发人员自行设计。许多开发人员直接从大学毕业后被雇佣，他们只具备编程语言的理论知识，没有Web应用程序编程的安全方面的实际经验。即使漏洞被报告给开发人员，他们也需要很长时间来修复，因为他们忙于Web应用程序的功能创建和增强部分。
- en: Secure coding starts with the architecture and designing phase of web applications,
    so it needs to be integrated early into the development cycle. Integrating security
    later will prove to be difficult, and it requires a lot of rework. Identifying
    risks and threats early in the development phase using threat modeling really
    helps in minimizing vulnerabilities in the production-ready code of the web application.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 安全编码从Web应用程序的架构和设计阶段开始，因此需要早期集成到开发周期中。后期集成安全将证明困难，并且需要大量的重做工作。在开发阶段早期使用威胁建模来识别风险和威胁，对于减少生产就绪的Web应用程序代码中的漏洞非常有帮助。
- en: Investing resources in writing secure code is an effective method for minimizing
    web application vulnerabilities. However, writing secure code is easy to say but
    difficult to implement.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 投入资源编写安全代码是减少Web应用程序漏洞的有效方法。然而，编写安全代码很容易说，但很难实施。
- en: Reasons to guard against attacks on web applications
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 防范对Web应用的攻击的原因
- en: 'Some of the most compelling reasons to guard against attacks on web applications
    are as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 防范对Web应用的攻击的一些最有说服力的原因如下：
- en: Protecting customer data
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护客户数据
- en: Compliance with law and regulation
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵守法律法规
- en: Loss of reputation
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声誉损失
- en: Revenue loss
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收入损失
- en: Protection against business disruption.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护免受业务中断的影响。
- en: If the web application interacts with and stores credit card information, then
    it needs to be in compliance with the rules and regulations laid out by **Payment
    Card Industry** (**PCI**). PCI has specific guidelines, such as reviewing all
    code for vulnerabilities in the web application or installing a WAF in order to
    mitigate the risk.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Web应用程序与信用卡信息进行交互和存储，则需要符合**支付卡行业**（**PCI**）制定的规则和法规。PCI有具体的指南，例如审查Web应用程序中的所有代码以查找漏洞，或安装WAF以减轻风险。
- en: When the web application is not tested for vulnerabilities and an attacker gains
    access to customer data, it can severely affect the brand of the company if a
    customer files a lawsuit against the company for not adequately protecting their
    data. It may also lead to revenue losses, since many customers will move to competitors
    who might assure better security.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当Web应用程序未经漏洞测试，攻击者获得访问客户数据的权限时，如果客户对公司提起诉讼，这可能严重影响公司的品牌。这也可能导致收入损失，因为许多客户将转移到可能提供更好安全性的竞争对手那里。
- en: Attacks on web applications may also result in severe disruption of service
    if it's a DoS attack, if the server is taken offline to clean up the exposed data,
    or for a forensics investigation. This might be reflected negatively in the financial
    statements.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对Web应用的攻击也可能导致严重的服务中断，如果是DoS攻击，服务器可能会被关闭以清理暴露的数据，或进行取证调查。这可能会在财务报表中产生负面影响。
- en: These reasons should be enough to convince the senior management of your organization
    to invest resources in terms of money, manpower, and skills in order to improve
    the security of your web applications.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这些原因足以说服您组织的高级管理层投入资源（包括资金、人力和技能）来提高Web应用程序的安全性。
- en: Kali Linux
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kali Linux
- en: In this book, we will use the tools provided by Kali Linux to accomplish our
    testing. Kali Linux is a Debian-based GNU/Linux distribution. Kali Linux is used
    by security professionals to perform offensive security tasks, and it is maintained
    by a company known as Offensive Security. The predecessor of Kali Linux is BackTrack,
    which was one of the primary tools used by penetration testers for more than six
    years until 2013, when it was replaced by Kali Linux. In August 2015, the second
    version of Kali Linux was released with the code name Kali Sana, and in January
    2016, it switched to a *rolling release*.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用Kali Linux提供的工具来完成我们的测试。Kali Linux是一个基于Debian的GNU/Linux发行版。Kali Linux被安全专业人员用于执行攻击性安全任务，并由一家名为Offensive
    Security的公司维护。Kali Linux的前身是BackTrack，它是渗透测试人员使用的主要工具之一，使用了超过六年，直到2013年被Kali Linux取代。2015年8月，Kali
    Linux的第二个版本以代号Kali Sana发布，2016年1月，它转换为“滚动发布”。
- en: This means that the software is continuously updated without the need to change
    the operating system version. Kali Linux comes with a large set of popular hacking
    tools, which are ready to use with all of the prerequisites installed. We will
    take a deep dive into the tools and use them to test web applications that are
    vulnerable to major flaws which are found in real-world web applications.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着软件会持续更新，而无需更改操作系统版本。Kali Linux附带了一套大量的流行黑客工具，这些工具已经安装了所有的先决条件，可以直接使用。我们将深入研究这些工具，并使用它们来测试那些存在于现实世界Web应用程序中的重大缺陷的Web应用程序。
- en: A web application overview for penetration testers
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渗透测试人员的Web应用程序概述
- en: Web applications involve much more than just HTML code and web servers. If you
    are not a programmer who is actively involved in the development of web applications,
    then chances are that you are unfamiliar with the inner workings of the HTTP protocol,
    the different ways web applications interact with the database, and what exactly
    happens when a user clicks a link or enters the URL of a website into their web
    browser.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序涉及的远不止HTML代码和Web服务器。如果您不是积极参与Web应用程序开发的程序员，那么您可能对HTTP协议的内部工作原理、Web应用程序与数据库的交互方式以及用户单击链接或在Web浏览器中输入网站URL时发生的情况一无所知。
- en: 'As a penetration tester, understanding how the information flows from the client
    to the server and database and then back to the client is very important. This
    section will include information that will help an individual who has no prior
    knowledge of web application penetration testing to make use of the tools provided
    in Kali Linux to conduct an end-to-end web penetration test. You will get a broad
    overview of the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 作为渗透测试人员，了解信息如何从客户端流向服务器和数据库，然后再返回客户端非常重要。本节将包括一些信息，帮助没有Web应用程序渗透测试先验知识的个人利用Kali
    Linux提供的工具进行端到端的Web渗透测试。您将对以下内容有一个广泛的概述：
- en: HTTP protocol
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP协议
- en: Headers in HTTP
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP中的头部
- en: Session tracking using cookies
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用cookie进行会话跟踪
- en: HTML
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML
- en: Architecture of web applications
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web应用程序的架构
- en: HTTP protocol
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP协议
- en: The underlying protocol that carries web application traffic between the web
    server and the client is known as the **Hypertext Transport Protocol** (**HTTP**).
    HTTP/1.1, the most common implementation of the protocol, is defined in RFCs 7230-7237,
    which replaced the older version defined in RFC 2616\. The latest version, known
    as HTTP/2, was published in May 2015, and it is defined in RFC 7540\. The first
    release, HTTP/1.0, is now considered obsolete and is not recommended.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web服务器和客户端之间传输Web应用程序流量的底层协议称为**超文本传输协议**（**HTTP**）。协议的最常见实现是HTTP/1.1，定义在RFC
    7230-7237中，取代了在RFC 2616中定义的旧版本。最新版本称为HTTP/2，于2015年5月发布，并在RFC 7540中定义。第一个版本HTTP/1.0现在被认为已过时，不推荐使用。
- en: As the internet evolved, new features were added to the subsequent releases
    of the HTTP protocol. In HTTP/1.1, features such as persistent connections, `OPTIONS`
    method, and several other improvements in the way HTTP supports caching were added.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 随着互联网的发展，HTTP协议的后续版本添加了新功能。在HTTP/1.1中，添加了持久连接、`OPTIONS`方法以及HTTP支持缓存的几项改进功能。
- en: RFC is a detailed technical document describing internet standards and protocols
    created by the **Internet Engineering Task Force** (**IETF**). The final version
    of the RFC document becomes a standard that can be followed when implementing
    the protocol in your applications.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: RFC是由**互联网工程任务组**（**IETF**）创建的详细技术文档，描述了互联网标准和协议。RFC文档的最终版本成为实现协议时可以遵循的标准。
- en: HTTP is a client-server protocol, wherein the client (web browser) makes a request
    to the server and in return the server responds to the request. The response by
    the server is mostly in the form of HTML-formatted pages. By default, HTTP protocol
    uses port `80`, but the web server and the client can be configured to use a different
    port.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP是一种客户端-服务器协议，其中客户端（Web浏览器）向服务器发出请求，服务器则响应请求。服务器的响应主要以HTML格式的页面形式呈现。默认情况下，HTTP协议使用端口`80`，但可以配置Web服务器和客户端以使用不同的端口。
- en: HTTP is a cleartext protocol, which means that all of the information between
    the client and server travels unencrypted, and it can be seen and understood by
    any intermediary in the communication chain. To tackle this deficiency in HTTP's
    design, a new implementation was released that establishes an encrypted communication
    channel with the **Secure Sockets Layer** (**SSL**) protocol and then sends HTTP
    packets through it. This was called HTTPS or HTTP over SSL. In recent years, SSL
    has been increasingly replaced by a newer protocol called **Transport Layer Security**
    (**TLS**), currently in version 1.2.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP是一种明文协议，这意味着客户端和服务器之间的所有信息都是未加密的，任何中间人都可以看到并理解它。为了解决HTTP设计中的这个缺陷，发布了一种新的实现，它通过**安全套接字层**（**SSL**）协议建立了一个加密的通信通道，然后通过该通道发送HTTP数据包。这被称为HTTPS或HTTP
    over SSL。近年来，SSL越来越多地被一种名为**传输层安全**（**TLS**）的新协议取代，目前版本为1.2。
- en: Knowing an HTTP request and response
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解HTTP请求和响应
- en: 'An HTTP request is the message a client sends to the server in order to get
    some information or execute some action. It has two parts separated by a blank
    line: the header and body. The header contains all of the information related
    to the request itself, response expected, cookies, and other relevant control
    information, and the body contains the data exchanged. An HTTP response has the
    same structure, changing the content and use of the information contained within
    it.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP请求是客户端向服务器发送的消息，以获取一些信息或执行某些操作。它由一个空行分隔的两个部分组成：头部和正文。头部包含与请求本身、预期的响应、cookie和其他相关控制信息相关的所有信息，正文包含交换的数据。HTTP响应具有相同的结构，只是内容和所包含信息的使用有所不同。
- en: The request header
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求头
- en: 'Here is an HTTP request captured using a web application proxy when browsing
    to `www.bing.com`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在浏览`www.bing.com`时使用Web应用程序代理捕获的HTTP请求：
- en: '![](img/00005.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00005.jpeg)'
- en: 'The first line in this header indicates the method of the request: `GET`, the
    resource requested: `/` (that is, the root directory) and the protocol version:
    `HTTP 1.1`. There are several other fields that can be in an HTTP header. We will
    discuss the most relevant fields:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 此标头中的第一行指示请求的方法：`GET`，请求的资源：`/`（即根目录）和协议版本：`HTTP 1.1`。HTTP标头中还可以有其他几个字段。我们将讨论最相关的字段：
- en: '**Host**: This specifies the host and port number of the resource being requested.
    A web server may contain more than one site, or it may contain technologies such
    as shared hosting or load balancing. This parameter is used to distinguish between
    different sites/applications served by the same infrastructure.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主机**：这指定了被请求资源的主机和端口号。一个web服务器可能包含多个站点，或者可能包含共享托管或负载均衡等技术。该参数用于区分由同一基础设施提供的不同站点/应用程序。'
- en: '**User-Agent**: This field is used by the server to identify the type of client
    (that is, web browser) which will receive the information. It is useful for developers
    in that the response can be adapted according to the user''s configuration, as
    not all features in the HTTP protocol and in web development languages will be
    compatible with all browsers.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户代理**：该字段用于服务器识别将接收信息的客户端类型（即Web浏览器）。对于开发人员来说，它很有用，因为响应可以根据用户的配置进行适应，因为并非所有HTTP协议和Web开发语言中的所有功能都与所有浏览器兼容。'
- en: '**Cookie**: Cookies are temporary values exchanged between the client and server
    and used, among other reasons, to keep session information.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cookie**：Cookie是客户端和服务器之间交换的临时值，用于保持会话信息等其他原因。'
- en: '**Content-Type**: This indicates to the server the media type contained within
    the request''s body.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内容类型**：这指示服务器请求体中包含的媒体类型。'
- en: '**Authorization**: HTTP allows for per-request client authentication through
    this parameter. There are multiple modes of authenticating, with the most common
    being `Basic`, `Digest`, `NTLM`, and `Bearer`.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**授权**：HTTP允许通过此参数进行每个请求的客户端身份验证。有多种身份验证模式，最常见的是`Basic`、`Digest`、`NTLM`和`Bearer`。'
- en: The response header
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应标头
- en: 'Upon receiving a request and processing its contents, the server may respond
    with a message such as the one shown here:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在接收到请求并处理其内容后，服务器可能会以如下所示的消息作出响应：
- en: '![](img/00006.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00006.jpeg)'
- en: 'The first line of the response header contains the status code (`200`), which
    is a three-digit code. This helps the browser understand the status of operation.
    The following are the details of a few important fields:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 响应标头的第一行包含状态码（`200`），这是一个三位数的代码。这有助于浏览器理解操作的状态。以下是一些重要字段的详细信息：
- en: '**Status code**: There is no field named status code, but the value is passed
    in the header. The `2xx` series of status codes are used to communicate a successful
    operation back to the web browser. The `3xx` series is used to indicate redirection
    when a server wants the client to connect to another URL when a web page is moved.
    The `4xx` series is used to indicate an error in the client request and that the
    user will have to modify the request before resending. The `5xx` series indicates
    an error on the server side, as the server was unable to complete the operation.
    In the preceding header, the status code is `200`, which means that the operation
    was successful. A full list of HTTP status codes can be found at [https://developer.mozilla.org/en-US/docs/Web/HTTP/Status](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status).'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态码**：没有名为状态码的字段，但该值通过标头传递。`2xx`系列状态码用于向Web浏览器传达成功的操作。`3xx`系列用于指示重定向，当服务器希望客户端连接到另一个URL时，当网页被移动时。`4xx`系列用于指示客户端请求中的错误，并要求用户在重新发送之前修改请求。`5xx`系列表示服务器端错误，因为服务器无法完成操作。在前面的标头中，状态码为`200`，表示操作成功。完整的HTTP状态码列表可以在[https://developer.mozilla.org/en-US/docs/Web/HTTP/Status](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status)找到。'
- en: '**Set-Cookie**: This field, if defined, will establish a cookie value in the
    client that can be used by the server to identify the client and store temporary
    data.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置Cookie**：如果定义了此字段，将在客户端中建立一个Cookie值，服务器可以使用该值来识别客户端并存储临时数据。'
- en: '**Cache-Control**: This indicates whether or not the contents of the response
    (images, script code, or HTML) should be stored in the browser''s cache to reduce
    page loading times and how this should be done.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存控制**：这指示是否将响应的内容（图像、脚本代码或HTML）存储在浏览器缓存中以减少页面加载时间，以及如何进行存储。'
- en: '**Server**: This field indicates the server type and version. As this information
    may be of interest for potential attackers, it is good practice to configure servers
    to omit its responses, as is the case in the header shown in the preceding screenshot.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器**：该字段指示服务器类型和版本。由于这些信息可能对潜在攻击者有兴趣，因此最好将服务器配置为省略其响应，就像前面截图中显示的标头一样。'
- en: '**Content-Length**: This field will contain a value indicating the number of
    bytes in the body of the response. It is used so that the other party can know
    when the current request/response has finished.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内容长度**：该字段将包含一个值，指示响应体中的字节数。它用于使另一方知道当前请求/响应何时完成。'
- en: The exhaustive list of all of the header fields and their usage can be found
    at the following URL: [http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在以下URL找到所有标头字段及其用法的详尽列表：[http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html)。
- en: HTTP methods
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP方法
- en: When a client sends a request to the server, it should also inform the server
    what action is to be performed on the desired resource. For example, if a user
    only wants to view the contents of a web page, it will invoke the `GET` method,
    which informs the servers to send the contents of the web page to the client web
    browser.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端向服务器发送请求时，还应通知服务器对所需资源执行何种操作。例如，如果用户只想查看网页的内容，它将调用`GET`方法，该方法通知服务器将网页的内容发送给客户端的Web浏览器。
- en: Several methods are described in this section. They are of interest to a penetration
    tester, as they indicate what type of data exchange is happening between the two
    endpoints.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了几种方法。对于渗透测试人员来说，它们很有趣，因为它们指示两个端点之间正在发生的数据交换类型。
- en: The GET method
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GET方法
- en: 'The `GET` method is used to retrieve whatever information is identified by
    the URL or generated by a process identified by it. A `GET` request can take parameters
    from the client, which are then passed to the web application via the URL itself
    by appending a question mark `?` followed by the parameters'' names and values.
    As shown in the following header, when you send a search query for `web penetration
    testing` in the Bing search engine, it is sent via the URL:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: GET方法用于检索由URL标识或由其标识的过程生成的任何信息。GET请求可以从客户端获取参数，然后通过URL本身将这些参数的名称和值附加到Web应用程序中。如下所示的标头中，当您在Bing搜索引擎中发送“网络渗透测试”的搜索查询时，它是通过URL发送的：
- en: '![](img/00007.jpeg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00007.jpeg)
- en: The POST method
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: POST方法
- en: 'The `POST` method is similar to the `GET` method. It is used to retrieve data
    from the server, but it passes the content via the body of the request. Since
    the data is now passed in the body of the request, it becomes more difficult for
    an attacker to detect and attack the underlying operation. As shown in the following
    `POST` request, the username (`login`) and password (`pwd`) are not sent in the
    URL but rather in the body, which is separated from the header by a blank line:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: POST方法与GET方法类似。它用于从服务器检索数据，但是它通过请求的正文传递内容。由于数据现在通过请求的正文传递，攻击者更难检测和攻击底层操作。如下所示的POST请求中，用户名（login）和密码（pwd）不是通过URL发送的，而是通过与标头之间的空行分隔的正文发送的：
- en: '![](img/00008.jpeg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00008.jpeg)
- en: The HEAD method
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HEAD方法
- en: The `HEAD` method is identical to `GET`, except that the server does not include
    a message body in the response; that is, the response of a `HEAD` request is just
    the header of the response to a `GET` request.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: HEAD方法与GET方法相同，只是服务器在响应中不包含消息体；也就是说，HEAD请求的响应只是GET请求的响应头。
- en: The TRACE method
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TRACE方法
- en: When a `TRACE` method is used, the receiving server bounces back the `TRACE`
    response with the original request message in the body of the response. The `TRACE`
    method is used to identify any alterations to the request by intermediary devices
    such as proxy servers and firewalls. Some proxy servers edit the HTTP header when
    the packets pass through it, and this can be identified using the `TRACE` method.
    It is used for testing purposes, as it lets you track what has been received by
    the other side.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用TRACE方法时，接收服务器会将TRACE响应与响应体中的原始请求消息一起返回。TRACE方法用于识别中间设备（如代理服务器和防火墙）对请求所做的任何更改。某些代理服务器在数据包通过时会编辑HTTP标头，可以使用TRACE方法来识别这一点。它用于测试目的，因为它可以让您跟踪对方接收到了什么。
- en: The PUT and DELETE methods
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PUT和DELETE方法
- en: The `PUT` and `DELETE` methods are part of WebDAV, which is an extension of
    the HTTP protocol and allows for the management of documents and files on a web
    server. It is used by developers to upload production-ready web pages onto the
    web server. `PUT` is used to upload data to the server whereas `DELETE` is used
    to remove it. In modern day applications, `PUT` and `DELETE` are also used in
    web services to perform specific operations on the database. `PUT` is used for
    insertion or modification of records and `DELETE` is used to delete, disable,
    or prevent future reading of pieces of information.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: PUT和DELETE方法是WebDAV的一部分，它是HTTP协议的扩展，允许在Web服务器上管理文档和文件。开发人员使用它将生产就绪的网页上传到Web服务器上。PUT用于将数据上传到服务器，而DELETE用于删除数据。在现代应用程序中，PUT和DELETE也用于Web服务以执行数据库上的特定操作。PUT用于插入或修改记录，而DELETE用于删除、禁用或防止将来读取某些信息。
- en: The OPTIONS method
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OPTIONS方法
- en: 'The `OPTIONS` method is used to query the server for the communication options
    available to the requested URL. In the following header, we can see the response
    to an `OPTIONS` request:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: OPTIONS方法用于查询服务器以获取请求的URL可用的通信选项。在下面的标头中，我们可以看到对OPTIONS请求的响应：
- en: '![](img/00009.jpeg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00009.jpeg)
- en: Understanding the layout of the HTTP packet is really important, as it contains
    useful information and several of the fields can be controlled from the user end,
    giving the attacker a chance to inject malicious data or manipulate certain behavior
    of applications.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 了解HTTP数据包的布局非常重要，因为它包含有用的信息，并且用户可以控制其中的几个字段，从而给攻击者注入恶意数据或操纵应用程序的某些行为提供了机会。
- en: Keeping sessions in HTTP
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在HTTP中保持会话
- en: HTTP is a stateless client-server protocol, where a client makes a request and
    the server responds with the data. The next request that comes is treated as an
    entirely new request, unrelated to the previous one. The design of HTTP requests
    is such that they are all independent of each other. When you add an item to your
    shopping cart while shopping online, the application needs a mechanism to tie
    the items to your account. Each application may use a different way to identify
    each session.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP是一种无状态的客户端-服务器协议，客户端发出请求，服务器以数据作为响应。下一个请求被视为完全独立的新请求，与之前的请求无关。HTTP请求的设计使得它们彼此独立。当您在网上购物时将商品添加到购物车中时，应用程序需要一种机制将商品与您的账户关联起来。每个应用程序可能使用不同的方式来标识每个会话。
- en: The most widely used technique to track sessions is through a session ID (identifier)
    set by the server. As soon as a user authenticates with a valid username and password,
    a unique random session ID is assigned to that user. On each request sent by the
    client, the unique session ID is included to tie the request to the authenticated
    user. The ID could be shared using the `GET` or `POST` method. When using the
    `GET` method, the session ID would become a part of the URL; when using the `POST`
    method, the ID is shared in the body of the HTTP message. The server maintains
    a table mapping usernames to the assigned session ID. The biggest advantage of
    assigning a session ID is that even though HTTP is stateless, the user is not
    required to authenticate every request; the browser would present the session
    ID and the server would accept it.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 追踪会话最常用的技术是通过服务器设置的会话ID（标识符）。一旦用户使用有效的用户名和密码进行身份验证，就会为该用户分配一个唯一的随机会话ID。在客户端发送的每个请求中，都会包含唯一的会话ID，以将请求与经过身份验证的用户关联起来。会话ID可以使用`GET`或`POST`方法共享。使用`GET`方法时，会话ID将成为URL的一部分；使用`POST`方法时，ID将在HTTP消息的正文中共享。服务器维护一个将用户名映射到分配的会话ID的表。分配会话ID的最大优势是，即使HTTP是无状态的，用户也不需要在每个请求中进行身份验证；浏览器会提供会话ID，服务器会接受它。
- en: 'Session ID also has a drawback: anyone who gains access to the session ID could
    impersonate the user without requiring a username and password. Furthermore, the
    strength of the session ID depends on the degree of randomness used to generate
    it, which could help defeat brute force attacks.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 会话ID也有一个缺点：任何获得会话ID的人都可以冒充用户，而无需用户名和密码。此外，会话ID的强度取决于用于生成它的随机程度，这可能有助于防止暴力破解攻击。
- en: Cookies
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cookie
- en: In HTTP communication, a **cookie** is a single piece of information with name,
    value, and some behavior parameters stored by the server in the client's filesystem
    or web browser's memory. Cookies are the de facto standard mechanism through which
    the session ID is passed back and forth between the client and the web server.
    When using cookies, the server assigns the client a unique ID by setting the `Set-Cookie`
    field in the HTTP response header. When the client receives the header, it will
    store the value of the cookie; that is, the session ID within a local file or
    the browser's memory, and it will associate it with the website URL that sent
    it. When a user revisits the original website, the browser will send the cookie
    value across, identifying the user.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTTP通信中，**Cookie**是由服务器存储在客户端文件系统或Web浏览器内存中的具有名称、值和一些行为参数的单个信息。Cookie是客户端和Web服务器之间传递会话ID的事实上的标准机制。使用Cookie时，服务器通过在HTTP响应头中设置`Set-Cookie`字段为客户端分配一个唯一的ID。当客户端接收到头部时，它将存储Cookie的值，即会话ID，存储在本地文件或浏览器的内存中，并将其与发送它的网站URL关联起来。当用户重新访问原始网站时，浏览器将发送Cookie值，以识别用户。
- en: Besides session tracking, cookies can also be used to store preferences information
    for the end client, such as language and other configuration options that will
    persist among sessions.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 除了会话跟踪，Cookie还可以用于存储终端客户端的偏好信息，例如语言和其他配置选项，这些信息将在会话之间持久存在。
- en: Cookie flow between server and client
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器和客户端之间的Cookie流程
- en: 'Cookies are always set and controlled by the server. The web browser is only
    responsible for sending them across to the server with every request. In the following
    diagram, you can see that a `GET` request is made to the server, and the web application
    on the server chooses to set some cookies to identify the user and the language
    selected by the user in previous requests. In subsequent requests made by the
    client, the cookie becomes part of the request:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Cookie始终由服务器设置和控制。Web浏览器只负责在每个请求中将其发送到服务器。在下图中，您可以看到向服务器发出了一个`GET`请求，并且服务器上的Web应用程序选择设置一些Cookie来识别用户和用户在先前请求中选择的语言。在客户端发出的后续请求中，Cookie成为请求的一部分：
- en: '![](img/00010.jpeg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00010.jpeg)'
- en: Persistent and nonpersistent cookies
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持久性和非持久性Cookie
- en: Cookies are divided into two main categories. Persistent cookies are stored
    on the client device's internal storage as text files. Since the cookie is stored
    on the hard drive, it would survive a browser crash or persist through various
    sessions. Different browsers will store persistent cookies differently. Internet
    Explorer, for example, saves cookies in text files inside the user's folder, `AppData\Roaming\Microsoft\Windows\Cookie`,
    while Google Chrome uses a SQLite3 database also stored in the user's folder,
    `AppData\Local\Google\Chrome\User Data\Default\cookies`. A cookie, as mentioned
    previously, can be used to pass sensitive information in the form of session ID,
    preferences, and shopping data among other types. If it's stored on the hard drive,
    it cannot be protected from modification by a malicious user.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Cookie被分为两个主要类别。持久性Cookie以文本文件的形式存储在客户端设备的内部存储中。由于Cookie存储在硬盘上，它可以在浏览器崩溃或不同会话之间持久存在。不同的浏览器会以不同的方式存储持久性Cookie。例如，Internet
    Explorer将Cookie保存在用户文件夹内的文本文件中，路径为`AppData\Roaming\Microsoft\Windows\Cookie`，而Google
    Chrome使用一个SQLite3数据库，也存储在用户文件夹内，路径为`AppData\Local\Google\Chrome\User Data\Default\cookies`。正如前面提到的，Cookie可以用于传递会话ID、偏好设置和购物数据等敏感信息。如果存储在硬盘上，它无法防止恶意用户对其进行修改。
- en: To solve the security issues faced by persistent cookies, programmers came up
    with another kind of cookie that is used more often today, known as a **nonpersistent
    cookie**, which is stored in the memory of the web browser, leaves no traces on
    the hard drive, and is passed between the web browser and server via the request
    and response header. A nonpersistent cookie is only valid for a predefined time
    specified by the server.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决持久性Cookie面临的安全问题，程序员提出了另一种更常用的Cookie类型，称为**非持久性Cookie**，它存储在Web浏览器的内存中，在硬盘上不留痕迹，并通过请求和响应头在Web浏览器和服务器之间传递。非持久性Cookie仅在服务器指定的预定义时间内有效。
- en: Cookie parameters
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cookie参数
- en: 'In addition to the name and value of the cookie, there are several other parameters
    set by the web server that defines the reach and availability of the cookie, as
    shown in the following response header:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 除了cookie的名称和值之外，Web服务器还设置了其他几个参数，用于定义cookie的范围和可用性，如下所示的响应头：
- en: '![](img/00011.jpeg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00011.jpeg)'
- en: 'The following are details of some of the parameters:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些参数的详细信息：
- en: '**Domain**: This specifies the domain to which the cookie would be sent.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**域**：指定将发送cookie的域。'
- en: '**Path**: To lock down the cookie further, the `Path` parameter can be specified.
    If the domain specified is `email.com` and the path is set to `/mail`, the cookie
    would only be sent to the pages inside `email.com/mail`.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：为了进一步锁定cookie，可以指定`路径`参数。如果指定的域是`email.com`，路径设置为`/mail`，那么cookie只会发送到`email.com/mail`内的页面。'
- en: '**HttpOnly**: This is a parameter that is set to mitigate the risk posed by
    **Cross-site Scripting** (**XSS**) attacks, as JavaScript won''t be able to access
    the cookie.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HttpOnly**：这是一个参数，用于减轻**跨站脚本攻击**（**XSS**）带来的风险，因为JavaScript无法访问cookie。'
- en: '**Secure**: If this is set, the cookie must only be sent over secure communication
    channels, namely SSL and TLS.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全**：如果设置了此参数，cookie只能通过安全通信渠道发送，即SSL和TLS。'
- en: '**Expires**: The cookie will be stored until the time specified in this parameter.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过期时间**：cookie将存储到此参数指定的时间。'
- en: HTML data in HTTP response
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP响应中的HTML数据
- en: The data in the body of the response is the information that is of use to the
    end user. It usually contains HTML-formatted data, but it can also be **JavaScript
    Object Notation** (**JSON**) or **eXtensible Markup Language** (**XML**) data,
    script code, or binary files such as images and videos. Only plaintext information
    was originally stored on the web, formatted in a way that was more appropriate
    for reading while being capable of including tables, images, and links to other
    documents. This was called **Hypertext Markup Language** (**HTML**), and the web
    browser was the tool meant to interpret it. HTML text is formatted using tags.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 响应体中的数据是对最终用户有用的信息。它通常包含HTML格式的数据，但也可以是**JavaScript对象表示法**（**JSON**）或**可扩展标记语言**（**XML**）数据、脚本代码或二进制文件，如图像和视频。最初在Web上存储的只有纯文本信息，以一种更适合阅读的方式进行格式化，同时能够包含表格、图像和链接到其他文档的内容。这被称为**超文本标记语言**（**HTML**），Web浏览器是用来解释它的工具。HTML文本使用标签进行格式化。
- en: HTML is not a programming language.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: HTML不是一种编程语言。
- en: The server-side code
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端代码
- en: Script code and HTML formatting are interpreted and presented by the web browser.
    This is called **client-side code**. The processes involved in retrieving the
    information requested by the client, session tracking, and most of the application's
    logic are executed in the server through the **server-side code**, written in
    languages such as PHP, ASP.NET, Java, Python, Ruby, and JSP. This code produces
    an output that can then be formatted using HTML. When you see a URL ending with
    a `.php` extension, it indicates that the page may contain PHP code. It then must
    run through the server's PHP engine, which allows dynamic content to be generated
    when the web page is loaded.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本代码和HTML格式化由Web浏览器解释和呈现。这被称为**客户端代码**。涉及到通过服务器检索客户端请求的信息、会话跟踪以及大部分应用程序逻辑的过程是通过**服务器端代码**在服务器上执行的，使用的语言有PHP、ASP.NET、Java、Python、Ruby和JSP等。该代码生成一个输出，然后可以使用HTML进行格式化。当您看到以`.php`扩展名结尾的URL时，表示该页面可能包含PHP代码。然后必须通过服务器的PHP引擎运行，以便在加载Web页面时生成动态内容。
- en: Multilayer web application
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多层Web应用程序
- en: As more complex web applications are being used today, the traditional means
    of deploying web applications on a single system is a story from the past. Placing
    all of your eggs in one basket is not a clever way to deploy a business-critical
    application, as it severely affects the performance, security, and availability
    of the application. The simple design of a single server hosting the application,
    as well as data, works well only for small web applications with not much traffic.
    The three-layer method of designing web application is the way forward.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 随着今天使用的Web应用程序变得越来越复杂，将Web应用程序部署在单个系统上的传统方式已经成为过去的故事。将所有的鸡蛋放在一个篮子里并不是部署关键业务应用程序的明智方式，因为它严重影响应用程序的性能、安全性和可用性。单个服务器托管应用程序和数据的简单设计仅适用于流量不大的小型Web应用程序。设计Web应用程序的三层方法是未来的发展方向。
- en: Three-layer web application design
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 三层Web应用程序设计
- en: 'In a three-layer web application, there is physical separation between the
    presentation, application, and data layer, which is described as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在三层Web应用程序中，表示层、应用程序层和数据层之间存在物理分离，具体描述如下：
- en: '**Presentation layer**: This is the server that receives the client connections
    and is the exit point through which the response is sent back to the client. It
    is the frontend of the application. The **presentation layer** is critical to
    the web application, as it is the interface between the user and the rest of the
    application. The data received at the presentation layer is passed to the components
    in the application layer for processing. The output received is formatted using
    HTML, and it is displayed on the web client of the user. Apache and nginx are
    open source software programs, and Microsoft IIS is commercial software that is
    deployed in the presentation layer.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表示层**：这是接收客户端连接并将响应发送回客户端的服务器。它是应用程序的前端。**表示层**对于Web应用程序至关重要，因为它是用户与应用程序的其余部分之间的接口。在表示层接收到的数据会传递给应用程序层的组件进行处理。接收到的输出使用HTML格式化，并显示在用户的Web客户端上。Apache和nginx是开源软件程序，而Microsoft
    IIS是商业软件，部署在表示层。'
- en: '**Application layer**: The processor-intensive processing and the main application''s
    logic is taken care of in the **application layer**. Once the presentation layer
    collects the required data from the client and passes it to the application layer,
    the components working at this layer can apply business logic to the data. The
    output is then returned to the presentation layer to be sent back to the client.
    If the client requests data, it is extracted from the data layer, processed into
    a useful form for the client, and passed to the presentation layer. Java, Python,
    PHP, and ASP.NET are programming languages that work at the application layer.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用层**：处理密集型处理和主要应用程序逻辑在**应用层**中完成。一旦演示层从客户端收集所需数据并将其传递给应用层，工作在该层的组件可以对数据应用业务逻辑。然后将输出返回到演示层，以发送回客户端。如果客户端请求数据，则从数据层提取数据，将其处理成对客户端有用的形式，并传递给演示层。Java、Python、PHP和ASP.NET是在应用层工作的编程语言。'
- en: '**Data access layer**: The actual storage and the data repository works at
    the **data access layer.** When a client requires data or sends data for storage,
    it is passed down by the application layer to the data access layer for persistent
    storage. The components working at this layer are responsible for maintaining
    the data and keeping its integrity and availability. They are also responsible
    for managing concurrent connections from the application layer. MySQL and Microsoft
    SQL are two of the most commonly used technologies that work at this layer. **Structured
    Query Language** (**SQL**) relational databases are the most commonly used nowadays
    in web applications, although NoSQL databases, such as MongoDB, CouchDB, and other
    NoSQL databases, which store information in a form different than the traditional
    row-column table format of relational databases, are also widely used, especially
    in Big Data Analysis applications. SQL is a data definition and query language
    that many database products support as a standard for retrieving and updating
    data.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据访问层**：实际存储和数据存储库工作在**数据访问层**。当客户端需要数据或发送数据进行存储时，它会被应用层传递到数据访问层进行持久存储。在该层工作的组件负责维护数据并保持其完整性和可用性。它们还负责管理应用层的并发连接。MySQL和Microsoft
    SQL是两种最常用的在该层工作的技术。**结构化查询语言**（**SQL**）关系数据库是当今Web应用程序中最常用的，尽管NoSQL数据库（如MongoDB、CouchDB和其他NoSQL数据库）也被广泛使用，特别是在大数据分析应用程序中，它们以与关系数据库传统的行列表格格式不同的形式存储信息。SQL是一种数据定义和查询语言，许多数据库产品都支持它作为检索和更新数据的标准。'
- en: 'The following diagram shows how the presentation, application, and data access
    layers work together:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了演示层、应用层和数据访问层如何协同工作：
- en: '![](img/00012.jpeg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00012.jpeg)'
- en: Web services
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web服务
- en: Web services can be viewed as web applications that don't include a presentation
    layer. Service-oriented architecture allows a web service provider to integrate
    easily with the consumer of that service. Web services enable different applications
    to share data and functionality among themselves. They allow consumers to access
    data over the internet without the application knowing the format or the location
    of the data.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Web服务可以被视为不包含演示层的Web应用程序。面向服务的架构允许Web服务提供者与该服务的消费者轻松集成。Web服务使不同的应用程序可以共享数据和功能。它们允许消费者在不知道数据的格式或位置的情况下通过互联网访问数据。
- en: This becomes extremely critical when you don't want to expose the data model
    or the logic used to access the data, but you still want the data readily available
    for its consumers. An example would be a web service exposed by a stock exchange.
    Online brokers can use this web service to get real-time information about stocks
    and display it on their own websites, with their own presentation style and branding
    for purchase by end users. The broker's website only needs to call the service
    and request the data for a company. When the service replies back with the data,
    the web application can parse the information and display it.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当您不想公开数据模型或用于访问数据的逻辑，但仍希望数据对其消费者随时可用时，这变得非常关键。一个例子是由股票交易所提供的Web服务。在线经纪人可以使用此Web服务获取有关股票的实时信息，并在其自己的网站上显示，具有自己的演示风格和品牌，以供最终用户购买。经纪人的网站只需要调用服务并请求公司的数据。当服务回复数据时，Web应用程序可以解析信息并显示它。
- en: Web services are platform independent. The stock exchange application can be
    written in any language, and the service can still be called regardless of the
    underlying technology used to build the application. The only thing the service
    provider and the consumer need to agree on are the rules for the exchange of the
    data.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Web服务是平台无关的。股票交易应用程序可以用任何语言编写，而服务仍然可以被调用，而不管用于构建应用程序的底层技术是什么。服务提供者和消费者需要达成一致的只有数据交换的规则。
- en: 'There are currently two different ways to develop web services:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有两种不同的开发Web服务的方式：
- en: '**Simple Object Access Protocol** (**SOAP**)'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单对象访问协议**（**SOAP**）'
- en: '**Representational State Transfer** (**REST**), also known as RESTful web services.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表述性状态转移**（**REST**），也称为RESTful Web服务。'
- en: Introducing SOAP and REST web services
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍SOAP和REST Web服务
- en: SOAP has been the traditional method for developing a web service, but it has
    many drawbacks, and applications are now moving over to REST or RESTful web service.
    XML is the only data exchange format available when using a SOAP web service,
    whereas REST web services can work with JSON and other data formats. Although
    SOAP-based web services are still recommended in some cases due to the extra security
    specifications, the lightweight REST web service is the preferred method of many
    web service developers due to its simplicity. SOAP is a protocol, whereas REST
    is an architectural style. Amazon, Facebook, Google, and Yahoo! have already moved
    over to REST web services.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: SOAP一直是开发Web服务的传统方法，但它有许多缺点，现在应用程序正在转向REST或RESTful Web服务。在使用SOAP Web服务时，XML是唯一可用的数据交换格式，而REST
    Web服务可以使用JSON和其他数据格式。尽管基于SOAP的Web服务在某些情况下仍然被推荐使用，因为它具有额外的安全规范，但由于其简单性，轻量级的REST
    Web服务是许多Web服务开发人员首选的方法。SOAP是一种协议，而REST是一种架构风格。亚马逊、Facebook、谷歌和雅虎已经转向REST Web服务。
- en: 'Some of the features of REST web services are as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: REST Web服务的一些特点如下：
- en: They work really well with CRUD operations
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们与CRUD操作非常配合
- en: They have better performance and scalability
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们具有更好的性能和可扩展性
- en: They can handle multiple input and output formats
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们可以处理多种输入和输出格式
- en: The smaller learning curve for developers connecting to web services
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于连接到Web服务的开发人员来说，学习曲线较小
- en: The REST design philosophy is similar to web applications
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST设计理念与Web应用程序类似
- en: CRUD stands for create, read, update, and delete; it describes the four basic
    functions of persistent storage.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: CRUD代表创建、读取、更新和删除；它描述了持久存储的四个基本功能。
- en: The major advantage that SOAP has over REST is that SOAP is transport independent,
    whereas REST works only over HTTP. REST is based on HTTP, and therefore the same
    vulnerabilities that affect a standard web application could be used against it.
    Fortunately, the same security best practices can be applied to secure the REST
    web service.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: SOAP相对于REST的主要优势在于SOAP是独立于传输的，而REST仅在HTTP上工作。REST基于HTTP，因此影响标准Web应用程序的相同漏洞也可以用于攻击它。幸运的是，相同的安全最佳实践可以应用于保护REST
    Web服务。
- en: The complexity inherent in developing SOAP services where the XML data is wrapped
    in a SOAP request and then sent using HTTP forced many organizations to move to
    REST services. It also needed a **Web Service Definition Language** (**WSDL**)
    file, which provided information related to the service. A UDDI directory had
    to be maintained where the WSDL file is published.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发SOAP服务时，将XML数据包装在SOAP请求中，然后使用HTTP发送的复杂性迫使许多组织转向REST服务。它还需要一个Web服务定义语言（WSDL）文件，该文件提供与服务相关的信息。必须维护一个UDDI目录，其中发布了WSDL文件。
- en: The basic idea of a REST service is, rather than using a complicated mechanism
    such as SOAP, it directly communicates with the service provider over HTTP without
    the need for any additional protocol. It uses HTTP to create, read, update, and
    delete data.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: REST服务的基本思想是，与使用SOAP等复杂机制不同，它直接通过HTTP与服务提供者进行通信，无需任何额外的协议。它使用HTTP来创建、读取、更新和删除数据。
- en: 'A request sent by the consumer of a SOAP-based web service is as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: SOAP基于Web服务的消费者发送的请求如下所示：
- en: '[PRE0]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'On the other hand, a request sent to a REST web service could be as simple
    as this:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，发送到REST Web服务的请求可能如下所示：
- en: '[PRE1]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The application uses a `GET` request to read data from the web service, which
    has low overhead and, unlike a long and complicated SOAP request, is easy for
    developers to code. While REST web services can also return data using XML, it
    is the rarely used-JSON that is the preferred method for returning data.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序使用`GET`请求从Web服务中读取数据，这种方法开销较低，与冗长复杂的SOAP请求不同，开发人员编码起来更容易。虽然REST Web服务也可以使用XML返回数据，但很少使用的JSON是首选的返回数据的方法。
- en: HTTP methods in web services
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web服务中的HTTP方法
- en: 'REST web services may treat HTTP methods differently than in a standard web
    application. This behavior depends on the developer''s preferences, but it''s
    becoming increasingly popular to correlate `POST`, `GET`, `PUT`, and `DELETE`
    methods to CRUD operations. The most common approach is as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: REST Web服务可能会以与标准Web应用程序不同的方式处理HTTP方法。这种行为取决于开发人员的偏好，但将`POST`、`GET`、`PUT`和`DELETE`方法与CRUD操作相关联的做法越来越流行。最常见的方法如下：
- en: 'Create: `POST`'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建：`POST`
- en: 'Read: `GET`'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取：`GET`
- en: 'Update: `PUT`'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新：`PUT`
- en: 'Delete: `DELETE`'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除：`DELETE`
- en: Some **Application Programming Interface** (**API**) implementations swap the `PUT`
    and `POST` functionalities.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 一些API实现交换了`PUT`和`POST`的功能。
- en: XML and JSON
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XML和JSON
- en: Both XML and JSON are used by web services to represent structured sets of data
    or objects.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: Web服务使用XML和JSON来表示结构化的数据集或对象。
- en: 'As discussed in previous sections, XML uses a syntax based on tags and properties,
    and values for those tags; for example, the File menu of an application, can be
    represented as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的章节所讨论的，XML使用基于标签、属性和标签的值的语法；例如，应用程序的文件菜单可以表示如下：
- en: '[PRE2]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'JSON, on the contrary, uses a more economic syntax resembling that of C and
    Java programming languages. The same menu in JSON format will be as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，JSON使用一种更经济的语法，类似于C和Java编程语言。JSON格式的相同菜单如下所示：
- en: '[PRE3]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: AJAX
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AJAX
- en: '**Asynchronous JavaScript and XML** (**AJAX**) is the combination of multiple
    existing web technologies, which let the client send requests and process responses
    in the background without a user''s direct intervention. It also lets you relieve
    the server of some part of the application''s logic processing tasks. AJAX allows
    you to communicate with the web server without the user explicitly making a new
    request in the web browser. This results in a faster response from the server,
    as parts of the web page can be updated separately and this improves the user
    experience. AJAX makes use of JavaScript to connect and retrieve information from
    the server without reloading the entire web page.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '**异步JavaScript和XML**（AJAX）是多个现有Web技术的组合，它允许客户端在没有用户直接干预的情况下发送请求和处理响应。它还可以减轻服务器对应用程序逻辑处理任务的负担。AJAX允许您与Web服务器进行通信，而无需用户在Web浏览器中明确发出新请求。这导致服务器的响应更快，因为Web页面的部分可以单独更新，从而改善用户体验。AJAX利用JavaScript连接并从服务器检索信息，而无需重新加载整个Web页面。'
- en: 'The following are some of the benefits of using AJAX:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用AJAX的一些好处：
- en: '**Increased speed**: The goal of using AJAX is to improve the performance of
    the web application. By updating individual form elements, minimum processing
    is required on the server, thereby improving performance. The responsiveness on
    the client side is also drastically improved.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高速度**：使用AJAX的目标是提高Web应用程序的性能。通过更新单个表单元素，服务器上只需要进行最少的处理，从而提高性能。客户端的响应速度也得到了显著提高。'
- en: '**User friendly**: In an AJAX-based application, the user is not required to
    reload the entire page to refresh specific parts of the website. This makes the
    application more interactive and user friendly. It can also be used to perform
    real-time validation and autocompletion.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户友好**：在基于AJAX的应用程序中，用户无需重新加载整个页面以刷新网站的特定部分。这使应用程序更具交互性和用户友好性。它还可以用于实时验证和自动完成。'
- en: '**Asynchronous calls**: AJAX-based applications are designed to make asynchronous
    calls to the web server, hence the name Asynchronous JavaScript and XML. This
    lets the user interact with the web page while a section of it is updated behind
    the scenes.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异步调用**：基于AJAX的应用程序设计为对Web服务器进行异步调用，因此称为异步JavaScript和XML。这使用户可以在幕后更新部分网页时与网页进行交互。'
- en: '**Reduced network utilization**: By not performing a full-page refresh every
    time, network utilization is reduced. In a web application where large images,
    videos or dynamic content such as Java applets or Adobe Flash programs are loaded,
    use of AJAX can optimize network utilization.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减少网络利用率**：通过不进行完整页面刷新，减少网络利用率。在加载大型图像、视频或动态内容（如Java小程序或Adobe Flash程序）的Web应用程序中，使用AJAX可以优化网络利用率。'
- en: Building blocks of AJAX
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AJAX的构建块
- en: 'As mentioned previously, AJAX is a mixture of the common web technologies that
    are used to build a web application. The way the application is designed using
    these web technologies results in an AJAX-based application. The following are
    the components of AJAX:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，AJAX是使用常见Web技术构建Web应用程序的混合体。使用这些Web技术设计应用程序会产生基于AJAX的应用程序。以下是AJAX的组成部分：
- en: '**JavaScript**: The most important component of an AJAX-based application is
    the client-side JavaScript code. The JavaScript interacts with the web server
    in the background and processes the information before being displayed to the
    user. It uses the **XMLHttpRequest** (**XHR**) API to transfer data between the
    server and the client. XHR exists in the background, and the user is unaware of
    its existence.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JavaScript**：基于AJAX的应用程序最重要的组成部分是客户端的JavaScript代码。JavaScript在后台与Web服务器进行交互，并在显示给用户之前处理信息。它使用**XMLHttpRequest**（XHR）API在服务器和客户端之间传输数据。XHR存在于后台，用户对其存在毫无察觉。'
- en: '**Dynamic HTML (DHTML)**: Once the data is retrieved from the server and processed
    by the JavaScript, the elements of the web page need to be updated to reflect
    the response from the server. A perfect example would be when you enter a username
    while filling out an online form. The form is dynamically updated to reflect and
    inform the user if the username is already registered on the website. Using DHTML
    and JavaScript, you can update the page contents on the fly. DHTML was in existence
    long before AJAX. The major drawback of only using DHTML is that it is heavily
    dependent on the client-side code to update the page. Most of the time, you do
    not have everything loaded on the client side and you need to interact with the
    server-side code. This is where AJAX comes into play by creating a connection
    between the client-side code and the server-side code via the XHR objects. Before
    AJAX, you had to use JavaScript applets.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态HTML（DHTML）**：一旦从服务器检索到数据并由JavaScript处理，Web页面的元素需要更新以反映来自服务器的响应。一个完美的例子是在填写在线表单时输入用户名。表单会动态更新，以反映并告知用户用户名是否已在网站上注册。使用DHTML和JavaScript，您可以实时更新页面内容。DHTML在AJAX出现之前就已存在。仅使用DHTML的主要缺点是它严重依赖于客户端代码来更新页面。大多数情况下，您没有在客户端加载所有内容，需要与服务器端代码进行交互。这就是AJAX通过创建客户端代码和服务器端代码之间的连接来发挥作用的地方，通过XHR对象实现。在AJAX之前，您必须使用JavaScript小程序。'
- en: '**Document Object Model (DOM)**: A DOM is a framework used to organize elements
    in an HTML or XML document. It is a convention for representing and interacting
    with HTML objects. Logically, imagine that an HTML document is parsed as a tree,
    where each element is seen as a tree node and each node of the tree has its own
    attributes and events. For example, the body object of the HTML document will
    have a specific set of attributes such as `text`, `link`, `bgcolor`, and so on.
    Each object also has events. This model allows an interface for JavaScript to
    access and update the contents of the page dynamically using DHTML. DHTML is a
    browser function, and DOM acts as an interface to achieve it.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档对象模型（DOM）：DOM是一种用于组织HTML或XML文档中的元素的框架。它是一种表示和与HTML对象交互的约定。从逻辑上讲，可以将HTML文档解析为一棵树，其中每个元素被视为树节点，树的每个节点都有自己的属性和事件。例如，HTML文档的body对象将具有一组特定的属性，如`text`、`link`、`bgcolor`等。每个对象还具有事件。这个模型允许JavaScript通过DHTML访问和动态更新页面内容。DHTML是一个浏览器功能，DOM充当实现它的接口。
- en: The AJAX workflow
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AJAX工作流程
- en: 'The following image illustrates the interaction between the various components
    of an AJAX-based application. When compared against a traditional web application,
    the AJAX engine is the major addition. The additional layer of the AJAX engine
    acts as an intermediary for all of the requests and responses made through AJAX.
    The AJAX engine is the JavaScript interpreter:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 下图说明了基于AJAX的应用程序各个组件之间的交互。与传统的Web应用程序相比，AJAX引擎是主要的新增内容。AJAX引擎的额外层作为所有通过AJAX进行的请求和响应的中间人。AJAX引擎是JavaScript解释器：
- en: '![](img/00013.jpeg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00013.jpeg)
- en: 'The following is the workflow of a user interacting with an AJAX-based application.
    The user interface and the AJAX engine are the components on the client''s web
    browser:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用户与基于AJAX的应用程序交互的工作流程。用户界面和AJAX引擎是客户端Web浏览器上的组件：
- en: The user types in the URL of the web page, and the browser sends a HTTP request
    to the server. The server processes the request and responds back with the HTML
    content, which is displayed by the browser through the web-rendering engine. In
    HTML, a web page is embedded in JavaScript code which is executed by the JavaScript
    interpreter when an event is encountered.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户在浏览器中输入网页的URL，浏览器向服务器发送一个HTTP请求。服务器处理请求并返回HTML内容，浏览器通过Web渲染引擎显示该内容。在HTML中，网页嵌入在JavaScript代码中，当遇到事件时由JavaScript解释器执行。
- en: When interacting with the web page, the user encounters an element that uses
    the embedded JavaScript code and triggers an event. An example would be the Google
    search page. As soon as the user starts entering a search query, the underlying
    AJAX engine intercepts the user's request. The AJAX engine forwards the request
    to the server via an HTTP request. This request is transparent to the user, and
    the user is not required to click explicitly on the submit button or refresh the
    entire page.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当与网页交互时，用户遇到一个使用嵌入的JavaScript代码并触发事件的元素。一个例子是谷歌搜索页面。当用户开始输入搜索查询时，底层的AJAX引擎拦截用户的请求。AJAX引擎通过HTTP请求将请求转发给服务器。这个请求对用户来说是透明的，用户不需要显式地点击提交按钮或刷新整个页面。
- en: On the server side, the application layer processes the request and returns
    the data back to the AJAX engine in JSON, HTML, or XML form. The AJAX engine forwards
    this data to the web-rendering engine to be displayed by the browser. The web
    browser uses DHTML to update only the selected section of the web page in order
    to reflect the new data.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器端，应用程序层处理请求并将数据以JSON、HTML或XML形式返回给AJAX引擎。AJAX引擎将此数据转发给Web渲染引擎，以便由浏览器显示。Web浏览器使用DHTML仅更新Web页面的选定部分，以反映新数据。
- en: 'Remember the following additional points when you encounter an AJAX-based application:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 当你遇到一个基于AJAX的应用程序时，请记住以下额外的要点：
- en: The XMLHttpRequest API does the magic behind the scenes. It is commonly referred
    to as XHR due to its long name. A JavaScript object named `xmlhttp` is first instantiated,
    and it is used to send and capture the response from the server. Browser support
    for XHR is required for AJAX to work. All of the recent versions of leading web
    browsers support this API.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XMLHttpRequest API在幕后完成了这个魔术。由于其名称过长，它通常被称为XHR。首先实例化一个名为`xmlhttp`的JavaScript对象，并用它来发送和捕获来自服务器的响应。要使AJAX工作，需要浏览器支持XHR。所有最新版本的主流Web浏览器都支持此API。
- en: The XML part of AJAX is a bit misleading. The application can use any format
    besides XML, such as JSON, plaintext, HTTP, or even images when exchanging data
    between the AJAX engine and the web server. JSON is the preferred format, as it
    is lightweight and can be turned into a JavaScript object, which further allows
    the script to access and manipulate the data easily.
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AJAX的XML部分有点误导人。应用程序可以使用除XML之外的任何格式，例如JSON、纯文本、HTTP，甚至是在AJAX引擎和Web服务器之间交换数据时使用的图像。JSON是首选的格式，因为它是轻量级的，并且可以转换为JavaScript对象，进一步允许脚本轻松访问和操作数据。
- en: Multiple asynchronous requests can happen concurrently without waiting for one
    request to finish.
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个异步请求可以同时进行，而不需要等待一个请求完成。
- en: Many developers use AJAX frameworks, which simplifies the task of designing
    the application. JQuery, Dojo Toolkit, **Google Web Toolkit** (**GWT**), and Microsoft
    AJAX library (.NET applications) are well-known frameworks.
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多开发人员使用简化应用程序设计任务的AJAX框架。JQuery、Dojo Toolkit、Google Web Toolkit（GWT）和Microsoft
    AJAX库（.NET应用程序）是众所周知的框架。
- en: 'An example for an AJAX request is as follows:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 一个AJAX请求的示例如下：
- en: '[PRE4]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The function `loadfile()` first instantiates the `xmlhttp` object. It then uses
    this object to pull a text file from the server. When the text file is returned
    by the server, it displays the contents of the file. The file and its contents
    are loaded without user involvement, as shown in the preceding code snippet.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`loadfile()`首先实例化`xmlhttp`对象。然后使用该对象从服务器获取一个文本文件。当服务器返回文本文件时，它显示文件的内容。文件及其内容是在没有用户参与的情况下加载的，如上面的代码片段所示。
- en: HTML5
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML5
- en: The fifth version of the HTML specification was first published in October 2014\.
    This new version specifies APIs for media playback, drag and drop, web storage,
    editable content, geolocation, local SQL databases, cryptography, web sockets,
    and many others, which may become interesting from the security testing perspective
    as they open new paths for attacks or attempt to tackle some of the security concerns
    in previous HTML versions.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: HTML规范的第五个版本于2014年10月首次发布。这个新版本指定了用于媒体播放、拖放、Web存储、可编辑内容、地理位置、本地SQL数据库、加密、Web套接字等的API，这些API可能从安全测试的角度来看很有趣，因为它们为攻击打开了新的路径或试图解决以前HTML版本中的一些安全问题。
- en: WebSockets
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebSockets
- en: HTTP is a **stateless** protocol as noted previously. This means that a new
    connection is established for every request and closed after every response. An
    HTML5 **WebSocket** is a communication interface that allows for a permanent bidirectional
    connection between client and server.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前所述，HTTP是一种无状态协议。这意味着每个请求都会建立一个新的连接，并在每个响应后关闭。HTML5的WebSocket是一种通信接口，允许客户端和服务器之间建立永久的双向连接。
- en: 'A WebSocket is opened by the client through a `GET` request such as the following:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端通过以下`GET`请求打开WebSocket连接：
- en: '[PRE5]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If the server understands the request and accepts the connection, its response
    would be as follows:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器理解请求并接受连接，其响应将如下所示：
- en: '[PRE6]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The HTTP connection is then replaced by the WebSocket connection, and it becomes
    a bidirectional binary protocol not necessarily compatible with HTTP.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，HTTP连接被WebSocket连接取代，并且它变成了一个双向的二进制协议，不一定与HTTP兼容。
- en: Summary
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter served as an introduction to ethical hacking and penetration testing
    of web applications. We started by identifying different ways of testing web applications.
    We also discussed the important rules of engagements to be defined before starting
    a test. Next, we examined the importance of testing web applications in today's
    world, and the risks of not doing regular testing. We then briefly presented Kali
    Linux as a testing platform and finished with a quick review of the concepts and
    technologies in use by modern web applications.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 本章作为对Web应用程序的道德黑客和渗透测试的介绍。我们首先确定了测试Web应用程序的不同方法。我们还讨论了在开始测试之前需要定义的重要规则。接下来，我们研究了在今天的世界中测试Web应用程序的重要性以及不进行定期测试的风险。然后，我们简要介绍了Kali
    Linux作为测试平台，并快速回顾了现代Web应用程序中使用的概念和技术。
