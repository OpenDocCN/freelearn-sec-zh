- en: Chapter 2. Metasploit Framework Organization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。Metasploit框架组织
- en: In this chapter we will investigate the organization of Metasploit Framework.
    Metasploit Framework is an open source project created by *HD Moore* in 2003,
    and then acquired by Rapid7 LLC on October 21, 2009\. Metasploit 2.0 was released
    in April 2004 and this version included 19 exploits with over 27 payloads. There
    has been constant development since then and now we have Metasploit 4.5.2, which
    includes hundreds of exploits and payloads. Moore created this framework for exploit
    code development and attacking vulnerable remote systems. It is considered one
    of the best penetration testing tools with support for vulnerability assessment
    using Nessus and other famous tools. The development of this project started off
    in Perl and was later rewritten in Ruby. Since its acquisition, Rapid7 has added
    two more proprietary editions known as Metasploit Express and Metasploit Pro.
    Metasploit supports all platforms including Windows, Linux, and Mac OS.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将调查Metasploit框架的组织结构。Metasploit框架是由*HD Moore*于2003年创建的开源项目，后来于2009年10月21日被Rapid7
    LLC收购。Metasploit 2.0于2004年4月发布，这个版本包括19个漏洞利用和27个有效载荷。从那时起一直在不断开发，现在我们有Metasploit
    4.5.2，其中包括数百个漏洞利用和有效载荷。Moore创建了这个框架用于开发利用代码和攻击易受攻击的远程系统。它被认为是支持使用Nessus和其他著名工具进行漏洞评估的最佳渗透测试工具之一。这个项目最初是用Perl开发的，后来用Ruby重写。自收购以来，Rapid7还添加了两个专有版本，称为Metasploit
    Express和Metasploit Pro。Metasploit支持包括Windows、Linux和Mac OS在内的所有平台。
- en: Metasploit interfaces and basics
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metasploit接口和基础知识
- en: First we will see how to access Metasploit Framework from terminal and in other
    ways. Open your terminal and type in `msfconsole`. In the terminal it will appear
    as `root@bt:~# msfconsole`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 首先我们将看看如何从终端和其他方式访问Metasploit框架。打开你的终端，输入`msfconsole`。在终端中会显示为`root@bt:~# msfconsole`。
- en: '![Metasploit interfaces and basics](img/3589OS_02_01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![Metasploit接口和基础知识](img/3589OS_02_01.jpg)'
- en: Now we have opened `msfconsole` from the terminal program; however there are
    other ways in which we can access Metasploit Framework, these include MsfGUI,
    Msfconsole, Msfcli, Msfweb, Metasploit Pro, and Armitage. For our purposes, in
    this book we will use `msfconsole` for the most part.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经从终端程序打开了`msfconsole`；然而我们还可以通过其他方式访问Metasploit框架，包括MsfGUI、Msfconsole、Msfcli、Msfweb、Metasploit
    Pro和Armitage。在本书中，我们将大部分时间使用`msfconsole`。
- en: '![Metasploit interfaces and basics](img/3589OS_02_02.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![Metasploit接口和基础知识](img/3589OS_02_02.jpg)'
- en: So how is Metasploit really organized? We can see many interfaces here. We will
    look at details of the architecture as we dig deeper into the various aspects
    of Metasploit. Now the important thing we need to understand is the overall architecture.
    The architecture is open source, and this allows you to create your own modules,
    scripts, and many other interesting things in Metasploit.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 那么Metasploit的组织结构是怎样的呢？我们可以在这里看到许多接口。随着我们深入挖掘Metasploit的各个方面，我们将详细了解架构的细节。现在我们需要理解的重要事情是整体架构。这个架构是开源的，这允许你在Metasploit中创建自己的模块、脚本和许多其他有趣的东西。
- en: 'The library architecture in Metasploit is as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit的库架构如下：
- en: '**Rex**: This is the basic library used in Metasploit for various protocols,
    transformations, and socket handling. It supports SSL, SMB, HTTP, XOR, Base64,
    and random text.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Rex**：这是Metasploit中用于各种协议、转换和套接字处理的基本库。它支持SSL、SMB、HTTP、XOR、Base64和随机文本。'
- en: '**Msf::Core**: This library defines the framework and provides the basic application
    interface for Metasploit.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Msf::Core**：这个库定义了框架并为Metasploit提供了基本的应用程序接口。'
- en: '**Msf::Base**: This library provides a simplified and friendly application
    interface for the Metasploit Framework.![Metasploit interfaces and basics](img/3589OS_02_03.jpg)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Msf::Base**：这个库为Metasploit框架提供了一个简化和友好的应用程序接口。'
- en: 'Now we will explore the Metasploit directory a little more. Just follow these
    steps to explore the directory:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将更详细地探索Metasploit目录。只需按照以下步骤探索目录：
- en: Open your BackTrack5 R2 virtual machine and your terminal. Type `cd /opt/metasploit/msf3`
    and then press *Enter*. Now we have entered the Metasploit Framework directory.
    To view the list of files and directories in the Metasploit directory type in
    `ls`.![Metasploit interfaces and basics](img/3589OS_02_04.jpg)
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的BackTrack5 R2虚拟机和你的终端。输入`cd /opt/metasploit/msf3`，然后按*Enter*。现在我们已经进入了Metasploit
    Framework目录。要查看Metasploit目录中的文件和目录列表，输入`ls`。![Metasploit接口和基础知识](img/3589OS_02_04.jpg)
- en: After typing the `ls` command we can see a bunch of directories and scripts
    here. The important directories listed are `data`, `external`, `tools`, `plugins`,
    and `scripts`.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`ls`命令后，我们可以看到这里有许多目录和脚本。列出的重要目录包括`data`、`external`、`tools`、`plugins`和`scripts`。
- en: 'We will explore all of these important directories one-by-one:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将逐个探索所有这些重要的目录：
- en: We enter the `data` directory by typing the command `cd data/`. This directory
    contains a lot of helper modules such as `meterpreter`, `exploits`, `wordlists`,
    `templates`, and many more.![Metasploit interfaces and basics](img/3589OS_02_05.jpg)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们通过输入命令`cd data/`进入`data`目录。这个目录包含许多辅助模块，如`meterpreter`、`exploits`、`wordlists`、`templates`等。![Metasploit接口和基础知识](img/3589OS_02_05.jpg)
- en: Next we will explore the `meterpreter` directory. To enter the directory, type
    in `cd meterpreter/` and we will see many `.dll` files. Actually it contains `.dll`
    files as well as other interesting things, which are typically required to enable
    the Meterpreter functionality called **post exploitation**. As an example we can
    see different types of DLL files here, such as OLE, Java version, PHP version,
    and so on.![Metasploit interfaces and basics](img/3589OS_02_06.jpg)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来我们将探索`meterpreter`目录。输入`cd meterpreter/`进入目录，我们会看到许多`.dll`文件。实际上，它包含`.dll`文件以及其他有趣的东西，通常需要启用Meterpreter功能的**后期利用**。例如，我们可以在这里看到不同类型的DLL文件，如OLE、Java版本、PHP版本等。![Metasploit接口和基础知识](img/3589OS_02_06.jpg)
- en: Another directory is the `wordlist` directory in the `data` directory. This
    directory contains the list of usernames and passwords for different services
    such as HTTP, Oracle, Postgres, VNC, SNMP, and more. Let us explore the wordlist
    directory, type in `cd ..` and press *Enter* to get back into the `data` directory
    from the `meterpreter` directory. After that, type in `cd wordlists` and press
    *Enter*.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`目录中的另一个目录是`wordlist`目录。该目录包含不同服务的用户名和密码列表，如HTTP、Oracle、Postgres、VNC、SNMP等。让我们探索`wordlist`目录，输入`cd
    ..`并按*Enter*键从`meterpreter`目录返回到`data`目录。之后，输入`cd wordlists`并按*Enter*键。'
- en: '![Metasploit interfaces and basics](img/3589OS_02_07.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![Metasploit接口和基础知识](img/3589OS_02_07.jpg)'
- en: Another interesting directory is `external` in `msf3`, which contains external
    libraries used by Metasploit. Let us explore the `external` directory by typing
    `cd external`.![Metasploit interfaces and basics](img/3589OS_02_08.jpg)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个有趣的目录是`msf3`中的`external`，其中包含Metasploit使用的外部库。让我们通过输入`cd external`来探索`external`目录。![Metasploit接口和基础知识](img/3589OS_02_08.jpg)
- en: Then have a look at the `scripts` directory, which is contained in the `msf3`
    directory. This directory contains a lot of scripts that are used by Metasploit.
    To enter the `scripts` directory type in `cd scripts` and then type in the `ls`
    command to view the list of files and folders.![Metasploit interfaces and basics](img/3589OS_02_09.jpg)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后看看`scripts`目录，该目录包含在`msf3`目录中。该目录包含许多被Metasploit使用的脚本。输入`cd scripts`然后输入`ls`命令来查看文件和文件夹列表。![Metasploit接口和基础知识](img/3589OS_02_09.jpg)
- en: Another important directory in `msf3` is the `tools` directory. This directory
    contains tools to be used in exploitation. We will explore the `tools` directory
    by typing in `cd tools` and then the `ls` command to see the list of tools such
    as `pattern_create.rb` and `pattern_offset.rb`, which are extremely useful for
    exploit research.![Metasploit interfaces and basics](img/3589OS_02_10.jpg)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msf3`中的另一个重要目录是`tools`目录。该目录包含用于利用的工具。我们将通过输入`cd tools`然后输入`ls`命令来探索`tools`目录，以查看诸如`pattern_create.rb`和`pattern_offset.rb`之类的工具列表，这些工具对于利用研究非常有用。![Metasploit接口和基础知识](img/3589OS_02_10.jpg)'
- en: The last useful directory is `plugins` in the `msf3` directory. The `plugins`
    directory contains plugins for integrating third-party tools such as nessus plugins,
    nexpose plugins, wmap plugins, and other plugins with Metasploit. Let us have
    a look at the `plugins` directory by typing `cd plugins` and then the `ls` command
    to see the list of plugins.![Metasploit interfaces and basics](img/3589OS_02_11.jpg)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个有用的目录是`msf3`目录中的`plugins`。`plugins`目录包含用于将第三方工具（如nessus插件、nexpose插件、wmap插件等）与Metasploit集成的插件。让我们通过输入`cd
    plugins`然后输入`ls`命令来查看插件列表。![Metasploit接口和基础知识](img/3589OS_02_11.jpg)
- en: From the preceding explanation, we now have a brief understanding of the directory
    structure of Metasploit and its functions. One important thing is to update Metasploit
    to have the latest versions of the exploits. Open your terminal and type in `msfupdate`.
    It may take a few hours to update the latest modules.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 通过前面的解释，我们现在对Metasploit的目录结构和功能有了简要的了解。一个重要的事情是更新Metasploit以获得最新版本的利用。打开你的终端，输入`msfupdate`。更新最新模块可能需要几个小时。
- en: '![Metasploit interfaces and basics](img/3589OS_02_12.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![Metasploit接口和基础知识](img/3589OS_02_12.jpg)'
- en: Exploit modules
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用模块
- en: Before moving to the exploitation techniques, first we should understand the
    basic concepts of an exploit. An exploit is a computer program that takes advantage
    of a particular vulnerability.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在转向利用技术之前，首先我们应该了解利用的基本概念。利用是利用特定漏洞的计算机程序。
- en: Now look at the exploit modules in the modules directory of `msf3`. Open your
    terminal and type in `cd /opt/metasploit/msf3/modules/exploits` followed by the
    `ls` command to see the list of exploits.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看看`msf3`的模块目录中的利用模块。打开你的终端，输入`cd /opt/metasploit/msf3/modules/exploits`，然后输入`ls`命令来查看利用列表。
- en: '![Exploit modules](img/3589OS_02_13.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![利用模块](img/3589OS_02_13.jpg)'
- en: Here we can see the list of exploit modules. Basically exploits are categorized
    on the basis of operating systems. So let us look at the `windows` directory of
    exploit modules by typing `cd windows`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们可以看到利用模块的列表。基本上，利用是根据操作系统进行分类的。因此，让我们通过输入`cd windows`来查看利用模块的`windows`目录。
- en: '![Exploit modules](img/3589OS_02_14.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![利用模块](img/3589OS_02_14.jpg)'
- en: In the `windows` directory we can see a lot of exploit modules which are categorized
    according to the Windows services such as `ftp`, `smb`, `telnet`, `browser`, `email`,
    and more. Here we will show you one type of service exploit by exploring a directory.
    As an example we select `smb`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在`windows`目录中，我们可以看到许多根据Windows服务进行分类的利用模块，如`ftp`、`smb`、`telnet`、`browser`、`email`等。在这里，我们将通过探索一个目录来展示一种类型的服务利用。例如，我们选择`smb`。
- en: '![Exploit modules](img/3589OS_02_15.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![利用模块](img/3589OS_02_15.jpg)'
- en: We see the list of `smb` service exploits which are basically Ruby scripts.
    So to view the code of any exploit we type in `cat <exploitname>`. As an example
    here we select `ms08_067_netapi.rb`. So we type in `cat ms08_067_netapi.rb`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了基本上是Ruby脚本的`smb`服务利用的列表。因此，要查看任何利用的代码，我们输入`cat <exploitname>`。例如，这里我们选择了`ms08_067_netapi.rb`。所以我们输入`cat
    ms08_067_netapi.rb`。
- en: '![Exploit modules](img/3589OS_02_16.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![利用模块](img/3589OS_02_16.jpg)'
- en: Similarly, we can explore all types of exploits according to the operating systems
    and their services.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以根据操作系统和其服务来探索所有类型的利用。
- en: Auxiliary modules
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 辅助模块
- en: Auxiliary modules are exploits without payload. They are used for a variety
    of tasks such as port scanning, fingerprinting, service scanners, and more. There
    are different types of auxiliary modules such as scanners for protocols, Network
    protocol fuzzers, Port scanner modules, wireless, Denial of Service modules, Server
    modules, Administrative access exploits, and so on.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 辅助模块是没有有效载荷的利用。它们用于各种任务，如端口扫描、指纹识别、服务扫描等。辅助模块有不同类型，如协议扫描器、网络协议模糊器、端口扫描器模块、无线模块、拒绝服务模块、服务器模块、管理访问利用等。
- en: Now let us explore the auxiliary modules directory under the `msf` directory.
    Type `cd /opt/metasploit/msf3/modules/auxiliary` and then the `ls` command to
    view the list of auxiliary modules.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们探索`msf`目录下的辅助模块目录。输入`cd /opt/metasploit/msf3/modules/auxiliary`，然后使用`ls`命令查看辅助模块列表。
- en: '![Auxiliary modules](img/3589OS_02_17.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![辅助模块](img/3589OS_02_17.jpg)'
- en: Here we can see the list of auxiliary modules such as `admin`, `client`, `fuzzers`,
    `scanner`, `vsploit`, and more. Now we will explore the scanner directory as an
    auxiliary module.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们可以看到辅助模块的列表，比如`admin`、`client`、`fuzzers`、`scanner`、`vsploit`等。现在我们将作为辅助模块探索scanner目录。
- en: '![Auxiliary modules](img/3589OS_02_18.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![辅助模块](img/3589OS_02_18.jpg)'
- en: In the `scanner` directory we will see modules that are categorized according
    to the service scans. We can select any service module for exploration. Here we
    will select `ftp` as the scanner module.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在`scanner`目录中，我们将看到根据服务扫描进行分类的模块。我们可以选择任何服务模块进行探索。在这里我们将选择`ftp`作为扫描器模块。
- en: '![Auxiliary modules](img/3589OS_02_19.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![辅助模块](img/3589OS_02_19.jpg)'
- en: In the `ftp` directory we can see three Ruby scripts. To view the exploit Ruby
    code just type in `cat <module name>`; for example, here we would type `cat anonymous.rb`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ftp`目录中，我们可以看到三个Ruby脚本。要查看exploit Ruby代码，只需输入`cat <module name>`；例如，在这里我们会输入`cat
    anonymous.rb`。
- en: '![Auxiliary modules](img/3589OS_02_20.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![辅助模块](img/3589OS_02_20.jpg)'
- en: Payloads – in-depth
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入了解Payloads
- en: A payload is a piece of software that runs after a system is compromised. The
    payload is typically attached to and delivered with an exploit. There are three
    different types of payloads in Metasploit, which are `singles`, `stagers`, and
    `stages`. The main role of Stages payloads is that they use tiny stagers to fit
    into small exploitation spaces. During exploitation, an exploit developer has
    a very limited amount of memory that he can play with. The stagers use this space
    and their work is to pull down the rest of the staged payload. On the other hand,
    singles are self-contained and completely standalone. It is as simple as running
    a small executable.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Payload是在系统被入侵后运行的软件。Payload通常附加到exploit并随其一起交付。在Metasploit中有三种不同类型的payload，分别是`singles`、`stagers`和`stages`。Stages
    payload的主要作用是它们使用小型stagers来适应小的利用空间。在利用过程中，exploit开发者可以使用的内存非常有限。stagers使用这个空间，它们的工作是拉取其余的staged
    payload。另一方面，singles是独立的和完全独立的。就像运行一个小的可执行文件一样简单。
- en: 'Let us have a look at the `payload` `modules` directory in the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下截图中的`payload` `modules`目录：
- en: '![Payloads – in-depth](img/3589OS_02_21.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![深入了解Payloads](img/3589OS_02_21.jpg)'
- en: Singles are self-contained payloads for a specific task such as creating a user,
    binding a shell, and so on. As an example, the `windows`/`adduser` payload creates
    a user account. Now we will explore the `singles` payload directory. Here we will
    see that the payloads are categorized according to operating systems such as AIX,
    BSD, Windows, Linux, and so on.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Singles是用于特定任务的独立payload，比如创建用户、绑定shell等。举个例子，`windows`/`adduser` payload用于创建用户账户。现在我们将探索`singles`
    payload目录。在这里我们会看到payload被根据操作系统进行分类，比如AIX、BSD、Windows、Linux等。
- en: '![Payloads – in-depth](img/3589OS_02_22.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![深入了解Payloads](img/3589OS_02_22.jpg)'
- en: We will use the `windows` directory as a demonstration of how the payload works.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`windows`目录来演示payload的工作原理。
- en: '![Payloads – in-depth](img/3589OS_02_23.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![深入了解Payloads](img/3589OS_02_23.jpg)'
- en: We will use the `adduser` payload, which has already been explained. We can
    view the code of this payload by typing in `cat adduser.rb`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用已经解释过的`adduser` payload。我们可以通过输入`cat adduser.rb`来查看这个payload的代码。
- en: '![Payloads – in-depth](img/3589OS_02_24.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![深入了解Payloads](img/3589OS_02_24.jpg)'
- en: Stagers are payloads that make a connection between the attacker and the victim
    machine. As an example, if we want to inject a `meterpreter` payload we cannot
    fit the entire Meterpreter DLL into one payload, so the entire process is broken
    up into two parts. The first is the smaller payload called stagers. After the
    stagers are executed they make a network connection between the attacker and the
    victim. Over this network connection a larger payload is delivered to the victim
    machine and this larger payload is known as stages.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Stagers是使攻击者和受害者机器之间建立连接的payload。举个例子，如果我们想要注入`meterpreter` payload，我们无法将整个Meterpreter
    DLL放入一个payload中，因此整个过程被分成两部分。第一部分是称为stagers的较小的payload。在执行stagers后，它们会在攻击者和受害者之间建立网络连接。通过这个网络连接，一个更大的payload被传递到受害者机器上，这个更大的payload被称为stages。
- en: 'We will now explore the `stagers` payload directory. As we can see in the following
    screenshot, the payloads are categorized according to the different operating
    systems:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将探索`stagers` payload目录。正如我们在下面的截图中所看到的，payload被根据不同的操作系统进行分类：
- en: '![Payloads – in-depth](img/3589OS_02_25.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![深入了解Payloads](img/3589OS_02_25.jpg)'
- en: As an example we will explore the `bsd` directory and examine the list of payloads.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，我们将探索`bsd`目录并检查payload列表。
- en: '![Payloads – in-depth](img/3589OS_02_26.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![深入了解Payloads](img/3589OS_02_26.jpg)'
- en: Stages are the type of payload that are downloaded and executed by the stagers
    payload such as Meterpreter, VNC server, and so on.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Stages是被stagers payload下载并执行的payload类型，比如Meterpreter、VNC服务器等。
- en: Now we will explore the `stages` directory to view the list of payloads.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将探索`stages`目录以查看payload列表。
- en: '![Payloads – in-depth](img/3589OS_02_27.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![深入了解Payloads](img/3589OS_02_27.jpg)'
- en: Here we have the same result we saw in the `singles` and `stagers` directory;
    the payloads are categorized according to the different operating systems. We
    open the `netware` directory to view the list.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们看到了与`singles`和`stagers`目录中相同的结果；payload被根据不同的操作系统进行分类。我们打开`netware`目录查看列表。
- en: '![Payloads – in-depth](img/3589OS_02_28.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![深入了解Payloads](img/3589OS_02_28.jpg)'
- en: Summary
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we covered the different interfaces and the architecture of
    Metasploit Framework. The chapter flow included operation techniques of Metasploit
    followed by the architectural base. We further covered the various Metasploit
    libraries and application interfaces such as Rex, Msf core, and Msf base. We then
    explored the Metasploit directories deeply along with descriptions of the important
    ones.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了Metasploit Framework的不同接口和架构。本章的流程包括了Metasploit的操作技术，然后是架构基础。我们进一步介绍了各种Metasploit库和应用接口，如Rex、Msf
    core和Msf base。然后我们深入探讨了Metasploit目录以及重要目录的描述。
- en: We then moved on to the exploit directory and briefly explained how exploits
    are categorized according to operating systems and their services. We then moved
    to the auxiliary directory, and explored how auxiliary modules are classified
    according to services such as scanning and fuzzing.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们转向exploit目录，并简要解释了如何根据操作系统和其服务对exploits进行分类。然后我们转向辅助目录，并探讨了如何根据服务对辅助模块进行分类，如扫描和模糊测试。
- en: Another important directory we covered was the payload directory which shows
    how the payloads are categorized into three different types. We further classified
    the payloads according to operating system.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了另一个重要的目录，即payload目录，它展示了payloads如何被分类为三种不同类型。我们还根据操作系统对payloads进行了进一步分类。
- en: Through this chapter we were able to cover the description of the basic Metasploit
    Framework and architecture. In the next chapter we will start some hands on action
    with Exploitation basics.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章，我们能够介绍基本的Metasploit Framework和架构。在下一章中，我们将开始一些有关利用基础的实际操作。
- en: References
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: 'The following are some helpful references that shed further light on some of
    the topics covered in this chapter:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些有用的参考资料，进一步阐明了本章涉及的一些主题。
- en: '[http://en.wikipedia.org/wiki/Metasploit_Project](http://en.wikipedia.org/wiki/Metasploit_Project)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://en.wikipedia.org/wiki/Metasploit_Project](http://en.wikipedia.org/wiki/Metasploit_Project)'
- en: '[http://www.offensive-security.com/metasploit-unleashed/Metasploit_Architecture](http://www.offensive-security.com/metasploit-unleashed/Metasploit_Architecture)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.offensive-security.com/metasploit-unleashed/Metasploit_Architecture](http://www.offensive-security.com/metasploit-unleashed/Metasploit_Architecture)'
- en: '[http://www.offensive-security.com/metasploit-unleashed/Metasploit_Fundamentals](http://://www.offensive-security.com/metasploit-unleashed/Metasploit_Fundamentals)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.offensive-security.com/metasploit-unleashed/Metasploit_Fundamentals](http://://www.offensive-security.com/metasploit-unleashed/Metasploit_Fundamentals)'
- en: '[http://www.offensive-security.com/metasploit-unleashed/Exploits](http://://www.offensive-security.com/metasploit-unleashed/Exploits)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.offensive-security.com/metasploit-unleashed/Exploits](http://://www.offensive-security.com/metasploit-unleashed/Exploits)'
- en: '[http://www.offensive-security.com/metasploit-unleashed/Payloads](http://://www.offensive-security.com/metasploit-unleashed/Payloads)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.offensive-security.com/metasploit-unleashed/Payloads](http://://www.offensive-security.com/metasploit-unleashed/Payloads)'
- en: '[http://www.securitytube.net/video/2635](http://www.securitytube.net/video/2635)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.securitytube.net/video/2635](http://www.securitytube.net/video/2635)'
- en: '[http://metasploit.hackplanet.in/2012/07/architecture-of-metasploit.html](http://metasploit.hackplanet.in/2012/07/architecture-of-metasploit.html)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://metasploit.hackplanet.in/2012/07/architecture-of-metasploit.html](http://metasploit.hackplanet.in/2012/07/architecture-of-metasploit.html)'
