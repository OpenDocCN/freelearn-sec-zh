- en: Vulnerability Assessment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 漏洞评估
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Using the infamous Burp
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用臭名昭著的Burp
- en: Exploiting WSDLs with Wsdler
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Wsdler利用WSDL
- en: Using Intruder
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用入侵者
- en: Web app pentest with Vega
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Vega进行Web应用程序渗透测试
- en: Exploring SearchSploit
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索SearchSploit
- en: Exploiting routers with RouterSploit
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用RouterSploit利用路由器
- en: Using Metasploit
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Metasploit
- en: Automating Metasploit
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化Metasploit
- en: Writing a custom resource script
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写自定义资源脚本
- en: Databases in Metasploit
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit中的数据库
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In the previous chapters, we covered various recipes to collect information
    about our target. Now, once we have all that data, we need to start hunting for
    vulnerabilities. To become a good pentester, we need to make sure no small details
    are overlooked.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们介绍了收集有关目标信息的各种方法。现在，一旦我们拥有了所有这些数据，我们就需要开始寻找漏洞。要成为一名优秀的渗透测试人员，我们需要确保没有忽视任何细节。
- en: Using the infamous Burp
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用臭名昭著的Burp
- en: Burp has been around for years now; it is a collection of multiple tools built
    in Java by PortSwigger web security. It has various products, such as Decoder,
    Proxy, Scanner, Intruder, Repeater, and so on. Burp features an Extender, which
    allows a user to load different extensions that can be used to make pentesting
    even more efficient! You will learn about some of them in the upcoming recipes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Burp已经存在多年了；它是由PortSwigger web security用Java构建的多个工具的集合。它有各种产品，如解码器、代理、扫描器、入侵者、重复者等等。Burp具有一个扩展程序，允许用户加载不同的扩展，可以用来使渗透测试更加高效！您将在即将到来的食谱中了解其中一些。
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s take a look at how we can use Burp effectively:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何有效地使用Burp：
- en: 'Kali already has a free version of Burp, but we will need a full version to
    fully use its features. So, we open up Burp:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kali已经有一个免费版本的Burp，但我们需要一个完整版本才能充分利用其功能。所以，我们打开Burp：
- en: '![](img/6bf67c4c-eb69-4f39-8bc5-333e104d5d5f.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6bf67c4c-eb69-4f39-8bc5-333e104d5d5f.png)'
- en: 'Click on Start Burp and we will see the Burp load up:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击开始Burp，我们将看到Burp加载：
- en: '![](img/881391ce-4318-44cc-b771-bb20cb3a3b99.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/881391ce-4318-44cc-b771-bb20cb3a3b99.png)'
- en: 'Before we start hunting for bugs, we first install some extensions that may
    come in handy. Select BApp Store from the Extender menu:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们开始寻找错误之前，我们首先安装一些可能会派上用场的扩展。从Extender菜单中选择BApp Store：
- en: '![](img/56de3da9-f7fd-426b-b191-3188d1cc0b62.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/56de3da9-f7fd-426b-b191-3188d1cc0b62.png)'
- en: 'We will see a list of extensions. Some of the extensions we will have to install
    are as follows:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将看到一个扩展列表。我们将不得不安装一些扩展，如下所示：
- en: J2EEScan
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: J2EEScan
- en: Wsdler
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wsdler
- en: Java Deserialization Scanner
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java反序列化扫描器
- en: HeartBleed
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HeartBleed
- en: Click on Install after selecting each of these extensions.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择每个扩展后，点击安装。
- en: 'Once the extensions are all set, we prepare for scanning. We fire up a browser
    and go to its preferences:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦扩展都设置好了，我们就准备开始扫描。我们启动浏览器并进入其偏好设置：
- en: '![](img/f088c533-6da8-4c7b-979f-28ad3e567ed3.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f088c533-6da8-4c7b-979f-28ad3e567ed3.png)'
- en: 'In Network settings, we add our HTTP Proxy IP and Port:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网络设置中，我们添加我们的HTTP代理IP和端口：
- en: '![](img/ad3ce255-442e-41c4-ac44-daee68e5ac46.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ad3ce255-442e-41c4-ac44-daee68e5ac46.png)'
- en: 'We can verify this with the Burp''s Options tab under the Proxy menu:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在Burp的选项选项卡下的代理菜单下验证这一点：
- en: '![](img/0eadca98-90a7-4d1b-80e1-4a330497aad0.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0eadca98-90a7-4d1b-80e1-4a330497aad0.png)'
- en: 'Click on Intercept is on to start intercepting the requests:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击拦截开启请求拦截：
- en: '![](img/908cb3b6-f9b7-48d6-9dc6-c035a410a276.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/908cb3b6-f9b7-48d6-9dc6-c035a410a276.png)'
- en: Now we browse the website we need to scan.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们浏览我们需要扫描的网站。
- en: Once all requests are captured, we can simply go to Target and select our domain.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦所有请求都被捕获，我们可以简单地转到目标并选择我们的域。
- en: 'To perform a scan, we can select individual requests and send them for an active
    scan:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要执行扫描，我们可以选择单个请求并将其发送进行主动扫描：
- en: '![](img/4f18b48c-ab13-4ad2-924d-fd4a832c2a57.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4f18b48c-ab13-4ad2-924d-fd4a832c2a57.png)'
- en: 'Or, we can select the whole domain to send for an active scan:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或者，我们可以选择整个域发送进行主动扫描：
- en: '![](img/7b894203-9fc2-4916-a035-0b43f5533e88.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b894203-9fc2-4916-a035-0b43f5533e88.png)'
- en: 'Once we have sent the requests to the Scanner, we will go to the Scanner tab
    and choose Options. Here, we can actually tell the scanner what exactly we want
    it to look for in our application:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们将请求发送到扫描器，我们将转到扫描器选项卡并选择选项。在这里，我们可以告诉扫描器我们希望在我们的应用程序中查找什么：
- en: '![](img/0c0c7984-3605-491a-99ad-2ef2e5461d70.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0c0c7984-3605-491a-99ad-2ef2e5461d70.png)'
- en: 'We can see the results of our scan in the Scan queue tab:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在扫描队列选项卡中看到我们的扫描结果：
- en: '![](img/3b2e1bd4-a5ca-466a-8641-92abb9e7983f.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3b2e1bd4-a5ca-466a-8641-92abb9e7983f.png)'
- en: 'The Scan queue tab can be seen in the following screenshot:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扫描队列选项卡可以在以下截图中看到：
- en: '![](img/ea2ad651-5969-474e-b98e-b247da52af27.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ea2ad651-5969-474e-b98e-b247da52af27.png)'
- en: 'The following screenshot shows the results of the Scan queue tab in more detail:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了更详细的扫描队列选项卡的结果：
- en: '![](img/a8c06bbe-5d51-40a3-b5f9-2f9bc4cff143.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a8c06bbe-5d51-40a3-b5f9-2f9bc4cff143.png)'
- en: While we are using only a few extensions here, you can view the whole list and
    choose your own extensions too. Extensions are easy to set up.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们这里只使用了几个扩展，但你也可以查看整个列表并选择你自己的扩展。扩展很容易设置。
- en: Exploiting WSDLs with Wsdler
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Wsdler利用WSDL
- en: '**Web Services Description Language** (**WSDL**) is an XML-based language used
    to describe the functionality offered by a web service. Often while executing
    a pentest project, we may find a WSDL file out in the open, unauthenticated. In
    this recipe, we will look at how we can benefit from WSDL.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**Web服务描述语言**（**WSDL**）是一种基于XML的语言，用于描述Web服务提供的功能。在执行渗透测试项目时，我们经常会发现一个WSDL文件是公开的，没有经过身份验证。在这个食谱中，我们将看看我们如何从WSDL中受益。'
- en: How to do it...
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We intercept the request of WSDL in Burp:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们拦截Burp中的WSDL请求：
- en: 'Right-click on the request and select Parse WSDL:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击请求并选择解析WSDL：
- en: '![](img/7d94e544-5fd8-4c3b-b84f-d65e4537647b.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7d94e544-5fd8-4c3b-b84f-d65e4537647b.png)'
- en: 'Switch to the Wsdler tab, and we will see all the service calls. We can see
    the complete request by clicking on any one of them:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Wsdler选项卡，我们将看到所有的服务调用。我们可以通过点击其中任何一个来查看完整的请求：
- en: '![](img/4f434c5f-9019-454b-afe9-9e6ed8e47d78.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4f434c5f-9019-454b-afe9-9e6ed8e47d78.png)'
- en: 'To be able to play around with it, we will need to send it to the Repeater:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了能够进行调试，我们需要将其发送到Repeater：
- en: '![](img/2dc82b0f-2bd7-452e-b24f-fd1f8d47d489.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2dc82b0f-2bd7-452e-b24f-fd1f8d47d489.png)'
- en: 'We right-click and select Send to Repeater:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击并选择“发送到Repeater”：
- en: '![](img/de63411d-954c-4652-a657-0f657911650f.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de63411d-954c-4652-a657-0f657911650f.png)'
- en: In our case, we can see that putting a single quote throws up an error. And
    voila! We have an SQL injection possibility!
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们可以看到输入单引号会引发错误。哇！我们有了一个SQL注入的可能性！
- en: '![](img/b106fb9d-d181-431a-b43a-41bad8c5c726.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b106fb9d-d181-431a-b43a-41bad8c5c726.png)'
- en: 'The following screenshot shows the SQL injection:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了SQL注入：
- en: '![](img/4b62972b-ff6e-47b5-9118-94cbae4919d7.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4b62972b-ff6e-47b5-9118-94cbae4919d7.png)'
- en: You will learn more about exploiting SQL in the later chapters of the book.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在本书的后面章节中了解更多关于利用SQL的内容。
- en: Using Intruder
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用入侵者
- en: 'Intruder is a great tool which allows us to perform different types of attacks
    that can be used to find all kinds of vulnerabilities. Some of the most common
    attacks that can be performed with Intruder are as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 入侵者是一个很棒的工具，可以让我们执行不同类型的攻击，用来发现各种漏洞。入侵者可以执行的一些最常见的攻击如下：
- en: Bruteforce
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暴力破解
- en: Fuzzing
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模糊
- en: Enumeration
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 枚举
- en: Application layer DoS
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用层DoS
- en: How to do it...
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'We start off picking up a request from our captured requests:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先从捕获的请求中获取一个请求：
- en: 'Right-click on the request and select Send to Intruder:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击请求并选择“发送到Intruder”：
- en: '![](img/5408a3db-b6f0-42ab-a8fd-419cd4a25254.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5408a3db-b6f0-42ab-a8fd-419cd4a25254.png)'
- en: 'Switch to the Intruder tab. We need to specify a payload position, and we can
    do that by selecting the place we want or selecting the payload and clicking on
    the Add § button:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Intruder选项卡。我们需要指定有效载荷位置，可以通过选择我们想要的位置或选择有效载荷，然后单击“添加§”按钮来完成：
- en: '![](img/a5dd2684-8d7a-4065-8c23-9119be59390d.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a5dd2684-8d7a-4065-8c23-9119be59390d.png)'
- en: 'In our case, since we are performing a login brute force, we will use the attack
    type Pitchfork:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的情况下，由于我们正在执行登录暴力破解，我们将使用攻击类型Pitchfork：
- en: '![](img/3085617a-88a0-46ee-9733-a433c0a6f8c3.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3085617a-88a0-46ee-9733-a433c0a6f8c3.png)'
- en: 'Next, we switch to the Payloads tab. This is where we will enter our payloads:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们切换到有效载荷选项卡。这是我们将输入有效载荷的地方：
- en: '![](img/28531766-4ed7-4078-b317-c4a345c5d6dc.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/28531766-4ed7-4078-b317-c4a345c5d6dc.png)'
- en: We choose set 1, and as we are bruteforcing, we can choose a simple list as
    the Payload type.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们选择set 1，并且由于我们正在进行暴力破解，我们可以选择一个简单的列表作为有效载荷类型。
- en: 'In the Payload options, we specify the list of words we want the app to be
    tested against. We can either enter them manually, or we can choose a pre-built
    list:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在有效载荷选项中，我们指定要对应用程序进行测试的单词列表。我们可以手动输入它们，也可以选择预先构建的列表：
- en: '![](img/924c877b-729e-46d0-8292-c6b5a6d608c0.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/924c877b-729e-46d0-8292-c6b5a6d608c0.png)'
- en: 'Now we choose set 2 and again specify a list of passwords we want the tool
    to try:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们选择set 2，并再次指定我们希望工具尝试的密码列表：
- en: '![](img/c0a732d6-084b-4b88-85f3-203de8f3e2bb.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c0a732d6-084b-4b88-85f3-203de8f3e2bb.png)'
- en: 'Burp allows us to customize the attack with the option of configuring stuff
    such as the Number of threads, choosing Redirections options, and even a Grep
    - Match in the Options tab:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Burp允许我们通过配置选项来自定义攻击，例如线程数量、选择重定向选项，甚至在选项标签中进行Grep - 匹配：
- en: '![](img/b2c713a0-b51e-4bbb-928c-8a7ac0832f43.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b2c713a0-b51e-4bbb-928c-8a7ac0832f43.png)'
- en: 'We click on Start attack:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们点击“开始攻击”：
- en: '![](img/ac6e145b-78c9-474a-8eca-b7f95fa3352a.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac6e145b-78c9-474a-8eca-b7f95fa3352a.png)'
- en: A new window will pop up, showing all the results of the attack performed.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个新窗口将弹出，显示执行的攻击的所有结果。
- en: Here, we have used only one type of attack mode (Pitchfork). More can be learned
    about the different types of attack modes for Intruder at [https://nitstorm.github.io/blog/burp-suite-intruder-attack-types/](https://nitstorm.github.io/blog/burp-suite-intruder-attack-types/).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只使用了一种攻击模式（Pitchfork）。可以在[https://nitstorm.github.io/blog/burp-suite-intruder-attack-types/](https://nitstorm.github.io/blog/burp-suite-intruder-attack-types/)了解有关入侵者不同攻击模式的更多信息。
- en: Web app pentest with Vega
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vega进行Web应用程序渗透测试
- en: Vega is an open source web app pentesting tool built in to Java. It has a JavaScript-based
    API, which makes it even more powerful and flexible. Vega is pretty easy to use
    in the following recipe, and you will learn how to perform a scan with it.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Vega是一个内置的Java Web应用程序渗透测试工具。它具有基于JavaScript的API，使其更加强大和灵活。Vega在以下配方中非常容易使用，您将学习如何使用它执行扫描。
- en: Getting ready
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Some Kali versions do not come with Vega installed, but it can be installed
    using the command:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一些Kali版本没有安装Vega，但可以使用以下命令进行安装：
- en: '[PRE0]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Vega is inbuilt in Kali and can be started using this command:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Vega内置在Kali中，可以使用以下命令启动：
- en: '[PRE1]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding command opens up the Vega tool:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令打开了Vega工具：
- en: '![](img/dd0ff0c4-1db1-4e5c-adf6-c57ca45dbf31.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd0ff0c4-1db1-4e5c-adf6-c57ca45dbf31.png)'
- en: There are two ways to start a scan in Vega—by choosing either the scanner mode
    or the proxy mode. We look at the scanner mode here.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Vega中有两种启动扫描的方式——选择扫描器模式或代理模式。我们在这里看看扫描器模式。
- en: 'We choose the Start New Scan options from the Scan menu:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从扫描菜单中选择“开始新扫描”选项：
- en: '![](img/3efd37ca-7e6e-469a-b239-55630cc190f7.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3efd37ca-7e6e-469a-b239-55630cc190f7.png)'
- en: 'In the window, we enter the website URL and click on Next:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在窗口中，我们输入网站的URL并点击“下一步”：
- en: '![](img/ebd88c24-7d30-4b3a-969f-552b98a805ea.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ebd88c24-7d30-4b3a-969f-552b98a805ea.png)'
- en: 'Then, we can choose the modules we want to run:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以选择要运行的模块：
- en: '![](img/f9230493-ffa3-45f8-a5de-a2df2afbc070.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f9230493-ffa3-45f8-a5de-a2df2afbc070.png)'
- en: 'In this step, we can enter the cookies:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一步中，我们可以输入cookies：
- en: '![](img/a47506c5-a4ab-44cc-bfca-9616bcf37933.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a47506c5-a4ab-44cc-bfca-9616bcf37933.png)'
- en: 'Next, we specify whether we want to exclude any parameters and then we click
    on Finish:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们指定是否要排除任何参数，然后点击“完成”：
- en: '![](img/c61afa2f-d25d-4de9-8008-50a7ebd4466f.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c61afa2f-d25d-4de9-8008-50a7ebd4466f.png)'
- en: 'We can see the results and vulnerabilities in the left-hand side pane:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在左侧窗格中看到结果和漏洞：
- en: '![](img/5c6ae148-0784-4aa1-801e-1c2dcad3eec1.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5c6ae148-0784-4aa1-801e-1c2dcad3eec1.png)'
- en: 'Clicking on an alert shows us the details:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击警报会显示详细信息：
- en: '![](img/19eb884e-162a-4216-bded-2ba3962e2b34.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/19eb884e-162a-4216-bded-2ba3962e2b34.png)'
- en: Similar to Burp, Vega also has proxy feature, where we can intercept and analyze
    the requests manually too!
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与Burp类似，Vega也具有代理功能，我们可以手动拦截和分析请求！
- en: 'We can edit and replay the requests to perform a manual check:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以编辑和重放请求以执行手动检查：
- en: '![](img/315fef04-154f-49c8-b465-d349170c1841.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/315fef04-154f-49c8-b465-d349170c1841.png)'
- en: Exploring SearchSploit
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索SearchSploit
- en: SearchSploit is a command-line tool that allows us to search and browse all
    the exploits available at `exploitdb`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: SearchSploit是一个命令行工具，允许我们搜索和浏览`exploitdb`中所有可用的漏洞利用。
- en: How to do it...
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To view help, we type the following command:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看帮助，我们输入以下命令：
- en: '[PRE2]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令的输出：
- en: '![](img/ca6b78a7-aa82-4b0d-bc64-d2c659baa498.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca6b78a7-aa82-4b0d-bc64-d2c659baa498.png)'
- en: 'We can perform a search by simply entering the keyword, and if want to copy
    the exploit into our working directory, we use this:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过简单输入关键字来进行搜索，如果想将漏洞利用复制到我们的工作目录中，我们使用这个：
- en: '[PRE3]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following screenshot is an example of the preceding command:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是前面命令的示例：
- en: '![](img/aae516a3-7de5-42b4-ad58-64f0f165e9c2.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aae516a3-7de5-42b4-ad58-64f0f165e9c2.png)'
- en: Exploiting routers with RouterSploit
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用RouterSploit来利用路由器
- en: 'RouterSploit is a router exploitation framework that is designed especially
    for embedded devices. It consists of three main modules:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: RouterSploit是专为嵌入式设备设计的路由器利用框架。它由三个主要模块组成：
- en: '`exploits`: This contains a list of all the publically available exploits'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exploits`：这包含了所有公开可用的漏洞利用列表'
- en: '`creds`: This is used for testing logins for different devices'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`creds`：这用于测试不同设备的登录'
- en: '`scanners`: This is used for checking a particular exploit against a particular
    device'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scanners`：这用于检查特定设备的特定漏洞利用'
- en: Getting ready
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before we begin, we will have to install RouterSploit in Kali; unfortunately,
    it does not come with the official installation of the OS. RouterSploit installation
    is very simple, just like we installed some tools in the beginning of the book.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我们将不得不在Kali中安装RouterSploit；不幸的是，它不随操作系统的官方安装而来。RouterSploit的安装非常简单，就像我们在书的开头安装一些工具一样。
- en: How to do it...
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We use the following command to clone the GitHub repository:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用以下命令克隆GitHub存储库：
- en: '[PRE4]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We go to the directory using the `cd routersploit` command and run the file
    as follows:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`cd routersploit`命令进入目录，并按以下方式运行文件：
- en: '[PRE5]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following screenshot shows the output of *step 1*:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了*步骤1*的输出：
- en: '![](img/3f7fefa3-8c45-4573-b70d-c251b6cca0ee.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f7fefa3-8c45-4573-b70d-c251b6cca0ee.png)'
- en: 'To run an exploit against a router, we simply type this:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要对路由器运行漏洞利用，我们只需输入：
- en: '[PRE6]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following screenshot shows an example of the preceding command:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令的示例：
- en: '![](img/dc034ba9-22c5-46ff-811d-e8f167bd9838.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc034ba9-22c5-46ff-811d-e8f167bd9838.png)'
- en: 'Now we see the options that are available for the exploit we chose. We use
    the following command:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们看到了我们选择的漏洞利用的可用选项。我们使用以下命令：
- en: '[PRE7]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令的输出：
- en: '![](img/ac6a4589-24be-407d-a1fb-a66a15d7f9e1.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac6a4589-24be-407d-a1fb-a66a15d7f9e1.png)'
- en: 'We set the target with the following command:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用以下命令设置目标：
- en: '[PRE8]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令的输出：
- en: '![](img/79807c37-6bc6-45a9-9f7f-e88b5b280159.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/79807c37-6bc6-45a9-9f7f-e88b5b280159.png)'
- en: 'To exploit, we simply type `exploit` or `run`:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要进行利用，我们只需输入`exploit`或`run`：
- en: '![](img/4b14af80-182d-4e6c-b576-77cda8d9544b.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4b14af80-182d-4e6c-b576-77cda8d9544b.png)'
- en: Using the scanners command
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`scanners`命令
- en: 'The following steps demonstrate the use of `scanners`:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤演示了`scanners`的使用：
- en: 'To scan a Cisco router, we use the following command:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要扫描Cisco路由器，我们使用以下命令：
- en: '[PRE9]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We now check for other options:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们检查其他选项：
- en: '[PRE10]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令的输出：
- en: '![](img/d3d83d46-d35b-4783-a65b-68a4cffd3872.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d3d83d46-d35b-4783-a65b-68a4cffd3872.png)'
- en: 'To run a scan against a target, we first set the target:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要对目标运行扫描，我们首先设置目标：
- en: '[PRE11]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令的输出：
- en: '![](img/a4e40abe-76c7-4260-b735-d6ddf5212e13.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a4e40abe-76c7-4260-b735-d6ddf5212e13.png)'
- en: 'Now we run it, and it will show all the exploits that the router is vulnerable
    to:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们运行它，它会显示路由器易受攻击的所有漏洞：
- en: '![](img/7e46083b-be3e-4932-be13-71b3a3f05aa6.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7e46083b-be3e-4932-be13-71b3a3f05aa6.png)'
- en: Using creds
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用凭证
- en: 'This can be used to test default password combinations on the services via
    the dictionary attack:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以用来测试服务上的默认密码组合，通过字典攻击：
- en: 'We use the `creds` command to run the dictionary attack on various services:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`creds`命令对各种服务运行字典攻击：
- en: '[PRE12]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令的输出：
- en: '![](img/fe7dc234-f3e6-42b5-afea-4cfb6953c4fb.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fe7dc234-f3e6-42b5-afea-4cfb6953c4fb.png)'
- en: 'Next, we look at the options:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们看看选项：
- en: '[PRE13]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令的输出：
- en: '![](img/5cfd579c-e373-44be-a295-bbc829969bda.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5cfd579c-e373-44be-a295-bbc829969bda.png)'
- en: 'Now we set the target IP:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们设置目标IP：
- en: '[PRE14]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We let it run, and it will show us any login it finds.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们让它运行，它会显示任何找到的登录。
- en: '![](img/88cc6d26-eb66-4748-a271-2e05757c2ed3.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/88cc6d26-eb66-4748-a271-2e05757c2ed3.png)'
- en: Using Metasploit
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit
- en: Metasploit is the most widely used open source tool for pentesting. It was first
    developed by HD Moore in 2001 in Perl; later, it was completely rewritten in Ruby
    and then it was acquired by Rapid7.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit是最广泛使用的开源渗透测试工具。它最初是由HD Moore在2001年用Perl开发的；后来，它完全重写为Ruby，然后被Rapid7收购。
- en: Metasploit contains a collection of exploits, payloads, and encoders, which
    can be used to identify and exploit vulnerabilities during a pentest project.
    In this chapter, we will cover a few recipes that will enable the use of the **Metasploit
    Framework** (**MSF**) more efficiently.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit包含一系列利用、有效载荷和编码器，可用于在渗透测试项目中识别和利用漏洞。在本章中，我们将介绍一些能够更有效地使用**Metasploit
    Framework**（**MSF**）的示例。
- en: How to do it...
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'The following steps demonstrate the use of MSF:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤演示了MSF的使用：
- en: 'Start the MSF by typing the following command:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入以下命令启动MSF：
- en: '[PRE15]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令的输出：
- en: '![](img/5f9ac818-4f38-4c8d-b717-084f59b1e80e.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5f9ac818-4f38-4c8d-b717-084f59b1e80e.png)'
- en: 'To search for an exploit, we type this:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要搜索漏洞，我们输入：
- en: '[PRE16]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令的输出：
- en: '![](img/f4b5869b-e3cb-40ff-bf45-f6c6b6def95e.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f4b5869b-e3cb-40ff-bf45-f6c6b6def95e.png)'
- en: 'To use an exploit, we type this:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用漏洞利用，我们输入：
- en: '[PRE17]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令的输出：
- en: '![](img/a470cc8f-a78a-45b8-a55c-673832a22eef.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a470cc8f-a78a-45b8-a55c-673832a22eef.png)'
- en: 'Next, we look at the options by typing the following:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们通过输入以下内容来查看选项：
- en: '[PRE18]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here, we will need to set the payload, target IP, localhost, and port we want
    for the back connection.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们需要设置有效载荷、目标IP、本地主机和我们想要的后向连接端口。
- en: 'We set the target using the following:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用以下命令设置目标：
- en: '[PRE19]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We set the payload with this:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用以下命令设置有效载荷：
- en: '[PRE20]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, we set the `lhost` and `lport` in which we want the connection:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们设置我们想要连接的`lhost`和`lport`：
- en: '[PRE21]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now we run the exploit command:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们运行利用命令：
- en: '[PRE22]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Once it''s successfully exploited, we will look at a `meterpreter` session:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功利用后，我们将查看`meterpreter`会话：
- en: '![](img/1d04530a-772f-4990-b211-bfaf55a3e5d7.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1d04530a-772f-4990-b211-bfaf55a3e5d7.png)'
- en: Although we used only Windows `reverse_tcp` here, Metasploit has a lot of other
    payloads depending on the backend OS or web application used. A complete list
    of payloads can be found at [https://www.offensive-security.com/metasploit-unleashed/msfpayload/](https://www.offensive-security.com/metasploit-unleashed/msfpayload/).
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们这里只使用了Windows的`reverse_tcp`，但Metasploit还有很多其他有效载荷，取决于后端操作系统或使用的Web应用程序。可以在[https://www.offensive-security.com/metasploit-unleashed/msfpayload/](https://www.offensive-security.com/metasploit-unleashed/msfpayload/)找到有效载荷的完整列表。
- en: Automating Metasploit
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化Metasploit
- en: Metasploit supports automation in different ways. One such way we will cover
    here is resource script.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit支持不同方式的自动化。我们将在这里介绍一种方式，即资源脚本。
- en: 'A **resource script** is basically a set of commands that run automatically
    when a script is loaded. Metasploit already contains a set of prebuilt scripts
    that prove to be most useful in a corporate pentesting environment. The complete
    list of scripts available can be seen in the `/usr/share/metasploit-framework/scripts/resource`
    directory:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '**资源脚本**基本上是一组在加载脚本时自动运行的命令。Metasploit已经包含了一组预先构建的脚本，在企业渗透测试环境中非常有用。可在`/usr/share/metasploit-framework/scripts/resource`目录中看到可用脚本的完整列表：'
- en: '![](img/e679e4ce-09df-4c2e-9d1f-8b10715d156f.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e679e4ce-09df-4c2e-9d1f-8b10715d156f.png)'
- en: How to do it...
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'The following steps demonstrate the automation of Metasploit:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤演示了Metasploit的自动化：
- en: 'We start Metasploit using the following command:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用以下命令启动Metasploit：
- en: '[PRE23]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The preceding command''s output is shown in the following screenshot:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的输出如下截图所示：
- en: '![](img/7a93f94e-349d-4db7-8a4e-c8c15d21aa23.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7a93f94e-349d-4db7-8a4e-c8c15d21aa23.png)'
- en: 'Some scripts require `RHOSTS` to be set globally, so we set `RHOSTS` using
    the following command:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一些脚本需要全局设置`RHOSTS`，因此我们使用以下命令设置`RHOSTS`：
- en: '[PRE24]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The preceding command''s output is shown in the following screenshot:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的输出如下截图所示：
- en: '![](img/fb6463b9-936d-429a-8bad-06e8dbb4f965.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb6463b9-936d-429a-8bad-06e8dbb4f965.png)'
- en: 'Now we run the script using the following command:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们使用以下命令运行脚本：
- en: '[PRE25]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This script will do a basic host discovery scan on the subnet provided:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此脚本将在提供的子网上进行基本主机发现扫描：
- en: '![](img/c1249d0f-a3d2-474f-bf38-51672ab1938a.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c1249d0f-a3d2-474f-bf38-51672ab1938a.png)'
- en: Writing a custom resource script
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写自定义资源脚本
- en: In the following recipe, we will look at how to write a basic script.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，我们将看看如何编写一个基本脚本。
- en: How to do it...
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Follow the given steps for writing a basic script:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤编写基本脚本：
- en: We open up any editor—`nano`, `leafpad`, and so on.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们打开任何编辑器—`nano`，`leafpad`等等。
- en: 'Here, we type all the commands we would want MSF to execute:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们输入所有我们希望MSF执行的命令：
- en: '[PRE26]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We save the script with a `.rc` extension:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将脚本保存为`.rc`扩展名：
- en: '![](img/e727ff55-006e-444e-b02a-0593fef1e1d6.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e727ff55-006e-444e-b02a-0593fef1e1d6.png)'
- en: 'Now we start `msfconsole` and type the command to automatically exploit the
    machine:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们启动`msfconsole`并输入命令自动利用机器：
- en: '![](img/af6731d6-1700-4a87-bb00-b9390cc6effd.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af6731d6-1700-4a87-bb00-b9390cc6effd.png)'
- en: A resource script is just one way of automating Metasploit; you can learn about
    other ways of automating Metasploit in this article at [https://community.rapid7.com/community/metasploit/blog/2011/12/08/six-ways-to-automate-metasploit](https://community.rapid7.com/community/metasploit/blog/2011/12/08/six-ways-to-automate-metasploit).
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 资源脚本只是自动化Metasploit的一种方式；您可以在[https://community.rapid7.com/community/metasploit/blog/2011/12/08/six-ways-to-automate-metasploit](https://community.rapid7.com/community/metasploit/blog/2011/12/08/six-ways-to-automate-metasploit)中了解其他自动化Metasploit的方式。
- en: Databases in Metasploit
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metasploit中的数据库
- en: In Kali Linux, we will have to set up a database before we use the database
    functionality.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kali Linux中，我们必须在使用数据库功能之前设置数据库。
- en: How to do it...
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'The following steps demonstrate the setting up of a database:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤演示了数据库的设置：
- en: 'First, we start the `postgresql` server using the following command:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们使用以下命令启动`postgresql`服务器：
- en: '[PRE27]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令的输出：
- en: '![](img/75cdedfd-4341-4541-b9ac-2938b9a7a2bf.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![](img/75cdedfd-4341-4541-b9ac-2938b9a7a2bf.png)'
- en: 'Then, we create the database and initialize it:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们创建数据库并初始化：
- en: '[PRE28]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Once this is done, we load `msfconsole`. Now we can create and manage workspaces
    in Metasploit. A workspace can be considered a space where we can save all out
    Metasploit data with categorizations. To set up a new workspace, we use the following
    command:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，我们加载`msfconsole`。现在我们可以在Metasploit中创建和管理工作空间。工作空间可以被视为一个空间，我们可以在其中保存所有Metasploit数据并进行分类。要设置新的工作空间，我们使用以下命令：
- en: '[PRE29]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了上述命令的输出：
- en: '![](img/438548c2-354b-4659-ab1f-82fdc7c75ade.png)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![](img/438548c2-354b-4659-ab1f-82fdc7c75ade.png)'
- en: 'To see all the commands related to the workspace, we can execute this:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看与工作空间相关的所有命令，我们可以执行以下命令：
- en: '[PRE30]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Now that we have our database and workspace set up, we can use various commands
    to interact with the database.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了数据库和工作空间，我们可以使用各种命令与数据库进行交互。
- en: 'To import an existing Nmap scan into our database, we use the following command:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将现有的Nmap扫描导入到我们的数据库中，我们使用以下命令：
- en: '[PRE31]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了上述命令的输出：
- en: '![](img/4478c309-75d2-4616-8dc6-fc6c63fd4abf.png)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4478c309-75d2-4616-8dc6-fc6c63fd4abf.png)'
- en: 'Once the import is complete, we can view the hosts using the following command:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入完成后，我们可以使用以下命令查看主机：
- en: '[PRE32]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了上述命令的输出：
- en: '![](img/266e7cd8-0819-4edc-a9a0-323bc2b6477c.png)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![](img/266e7cd8-0819-4edc-a9a0-323bc2b6477c.png)'
- en: 'To view only the IP address and OS type, we use the following command:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只查看IP地址和操作系统类型，我们使用以下命令：
- en: '[PRE33]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了上述命令的输出：
- en: '![](img/f1ba6382-bac9-4b40-aa78-761d3cae2dd5.png)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f1ba6382-bac9-4b40-aa78-761d3cae2dd5.png)'
- en: 'Now suppose we want to perform a TCP auxiliary scan. We can set all these hosts
    as `RHOSTS` for an auxiliary too. We do this using the following command:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在假设我们想要执行TCP辅助扫描。我们也可以将所有这些主机设置为辅助扫描的`RHOSTS`。我们使用以下命令来实现这一点：
- en: '[PRE34]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了上述命令的输出：
- en: '![](img/4020a77c-f88c-445e-b1f4-d640e1bb0926.png)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4020a77c-f88c-445e-b1f4-d640e1bb0926.png)'
- en: As the `RHOSTS` have been set, they can be used across the Metasploit for any
    module required.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于`RHOSTS`已经设置，它们可以在Metasploit中的任何所需模块中使用。
- en: 'Let''s look at one more example where our imported Nmap scan already has all
    the data we need. We can use the following command to list all the services in
    the database:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们再看一个例子，我们导入的Nmap扫描已经包含了我们需要的所有数据。我们可以使用以下命令列出数据库中的所有服务：
- en: '[PRE35]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'To see only those services that are up, we can use the `-u` switch:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要仅查看已启动的服务，我们可以使用`-u`开关：
- en: '![](img/2932bf4e-58b5-4ada-9ad2-901cf81a9510.png)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2932bf4e-58b5-4ada-9ad2-901cf81a9510.png)'
- en: 'We can even see the list by specific ports using the `-p` switch:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们甚至可以使用`-p`开关按特定端口查看列表：
- en: '![](img/3f610f40-b83d-4e50-a504-ecab8ea4bc89.png)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f610f40-b83d-4e50-a504-ecab8ea4bc89.png)'
