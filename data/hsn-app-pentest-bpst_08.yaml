- en: Exploiting Vulnerabilities Using Burp Suite - Part 1
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用Burp Suite进行漏洞利用-第1部分
- en: Burp Suite is an excellent tool to detect vulnerabilities. As we've seen in
    the previous chapters, it has a large variety of tools and options, and of course,
    extensions to help us to be more accurate and efficient while looking for bugs
    in an application. However, Burp Suite also has options to help us to exploit
    vulnerabilities, generate a proof about the exploitation, and reproduce the exploitation
    all of the times this is needed.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite是一个优秀的工具，用于检测漏洞。正如我们在之前的章节中所看到的，它有各种各样的工具和选项，当然还有扩展，可以帮助我们在查找应用程序中的漏洞时更加准确和高效。然而，Burp
    Suite也有选项来帮助我们利用漏洞，生成关于利用的证据，并在需要时重现利用。
- en: 'In this chapter, we will check how to exploit different kinds of vulnerabilities
    using Burp Suite''s options, and in some cases the tools and extensions. We will
    be looking at the following topics in the chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将检查如何利用Burp Suite的选项以及在某些情况下使用工具和扩展来利用不同类型的漏洞。本章将涵盖以下主题：
- en: Data exfiltration via a blind Boolean-based ...
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过盲布尔型基于布尔的数据泄露...
- en: Data exfiltration via a blind Boolean-based SQL injection
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过盲布尔型基于布尔的SQL注入进行数据泄露
- en: An SQL injection is a vulnerability based on an input validation error, which
    allows a malicious user to insert unexpected SQL statements into an application
    to perform different actions on it. For example, extract information, delete data
    or modify the original statements.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: SQL注入是基于输入验证错误的漏洞，允许恶意用户将意外的SQL语句插入应用程序以执行不同的操作。例如，提取信息，删除数据或修改原始语句。
- en: 'There are three types of SQL injections, as follows:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种类型的SQL注入，如下所示：
- en: '**In-band SQL injection**: This type of SQL injection has the characteristic
    that is possible to analyze using the same channel used to send the statement.
    It means that the response generated by the **database management system** (**DBMS**)
    is received in the same analyzed application.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带内SQL注入：这种类型的SQL注入具有可以使用发送语句的相同通道进行分析的特点。这意味着由数据库管理系统（DBMS）生成的响应是在相同的分析应用程序中接收的。
- en: '**Inferential**: This type of SQL injection is different from the previous
    one, as it is not possible to see the errors or the results in the application''s
    response. We need to infer what is happening in the application''s backend or
    use external channels to get the information. At the same time, into the inferential
    SQL injections are further divided into two types:'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推断性：这种类型的SQL注入与前一种不同，因为在应用程序的响应中无法看到错误或结果。我们需要推断应用程序后端发生了什么，或者使用外部通道获取信息。同时，推断性SQL注入进一步分为两种类型：
- en: '**Boolean-based blind SQL injection**: In this type of SQL injection, the statements
    are focused on changing a Boolean value into the application in order to get different
    responses. Even though the SQL injection result is not showed directly, the HTTP
    response content could change to infer the result.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于布尔的盲SQL注入：在这种类型的SQL注入中，语句集中于改变应用程序中的布尔值以获得不同的响应。即使SQL注入结果没有直接显示，HTTP响应内容也可能会改变以推断结果。
- en: '**Time-based blind SQL injection**: This inferential SQL injection depends
    on the time lapsed to generate a response by the database server. With time variations,
    it is possible to infer whether the SQL injection is successful or not. To do
    so, the malicious user inserts functions included in the DBMS to determine what
    is happening in the backend.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于时间的盲SQL注入：这种推断性SQL注入取决于数据库服务器生成响应所经过的时间。通过时间变化，可以推断SQL注入是否成功。为此，恶意用户插入包含在DBMS中的函数，以确定后端发生了什么。
- en: '**Out-of-band SQL injection**: In this type of SQL injection, it is not possible
    to use the same channel to see the error response or infer the result directly.
    So, we need to use an external channel to know whether the SQL injection is successful
    or not. For example, using second data storage to receive the results, such as
    DNS resolution to infer the time lapsed in a request, which is not possible to
    see in the application.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 盲注SQL注入：在这种类型的SQL注入中，不可能使用相同的通道来查看错误响应或直接推断结果。因此，我们需要使用外部通道来知道SQL注入是否成功。例如，使用第二个数据存储来接收结果，比如使用DNS解析来推断请求中经过的时间，这是在应用程序中无法看到的。
- en: We will see how it is possible to use Burp Suite to exploit a Boolean-based
    SQL injection vulnerability.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到如何使用Burp Suite来利用基于布尔的SQL注入漏洞。
- en: The vulnerability
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 漏洞
- en: 'Analyze the following snippet of PHP code:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 分析以下PHP代码片段：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This code uses the `$id` variable, which is a number, to pass information to
    a query that is directly executed on the database in a `SELECT` statement. The
    `$id` variable is used in a `WHERE` expression to look for the exact `$id` variable
    passed by the user and only display filtered information depending on the number
    in the variable `$id` variable.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码使用`$id`变量，这是一个数字，将信息传递给直接在数据库中执行的查询中的`SELECT`语句。`$id`变量用于`WHERE`表达式，以查找用户传递的确切`$id`变量，并根据变量`$id`中的数字仅显示过滤后的信息。
- en: The most important thing about ...
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 关于最重要的事情...
- en: The exploitation
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用
- en: Imagine this database just has 10 registers, so if a user passes a number `1`
    as value to the `$id` variable, the application returns the first register. When
    the user enters the number `10`, the application returns the last register. However,
    when the user enters the value `11`, the application does not have a register
    to show, but it does not show any error explaining to the user that it is not
    showing anything because it has nothing more to show. The output just doesn't
    do anything.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 假设这个数据库只有10条记录，所以如果用户将数字`1`作为值传递给`$id`变量，应用程序将返回第一条记录。当用户输入数字`10`时，应用程序将返回最后一条记录。然而，当用户输入值`11`时，应用程序没有记录可以显示，但它也不显示任何错误来解释为什么不显示任何内容，因为没有更多内容可以显示。输出什么也不做。
- en: As the application is not validating the value entered into the `$id` variable,
    a user can enter any kind of information. For example, a `'1` or `1=1--` string,
    which is a common string used to detect SQL injection flaws. However, as we said,
    the application will not show an error.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于应用程序未验证输入到`$id`变量的值，用户可以输入任何类型的信息。例如，`'1`或`1=1--`字符串，这是用于检测SQL注入漏洞的常见字符串。但是，正如我们所说，应用程序不会显示错误。
- en: 'Forgetting that the application is not showing errors, why is it possible to
    enter a string, such as `''1` or `1=1--`? We will see in the flow given here:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 忘记应用程序不显示错误，为什么可以输入`'1`或`1=1--`这样的字符串？我们将在这里给出的流程中看到：
- en: When the user enters the `'1` or `1=1--` string, this string is converted to
    a true value, which is interpreted by the application as a number `1`, so, the
    application returns the first register.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户输入`'1`或`1=1--`字符串时，这个字符串被转换为一个真值，应用程序将其解释为数字`1`，因此应用程序返回第一个注册。
- en: What happens if we pass a value out of 1 to 10? If we pass the number `11` to
    the `$id` variable, the `WHERE` conditional will try to look for the eleventh
    register, but as it is missing, the `$query_statement` variable will not have
    a register stored in itself. When the following `if` statement in the PHP code
    verifies the register stored in the `$query_statement` variable, the application
    will fail.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们传递一个超出1到10的值会发生什么？如果我们将数字`11`传递给`$id`变量，`WHERE`条件将尝试查找第11个注册，但由于缺少，`$query_statement`变量将不会有一个存储在其中的注册。当PHP代码中的以下`if`语句验证存储在`$query_statement`变量中的注册时，应用程序将失败。
- en: We know that when the application receives a number between 1 to 10, the application
    will work; and also, we know that we can pass an arbitrary statement when a result
    is a number between 1 to 10\. Keeping this in mind, it is valid if we pass the
    `11-1` value.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们知道，当应用程序接收到1到10之间的数字时，应用程序将工作；而且，我们知道当结果是1到10之间的数字时，我们可以传递任意语句。牢记这一点，如果我们传递`11-1`值是有效的。
- en: The result of *11-1* is *10;* therefore, when the `WHERE` conditional verifies
    the `$id` value, it will have a number `10`, so the application will show the
    last value. This is the key for exploiting this vulnerability!
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*11-1*的结果是*10;*因此，当`WHERE`条件验证`$id`值时，它将有一个数字`10`，因此应用程序将显示最后一个值。这是利用此漏洞的关键！'
- en: 'Now, use a more complex statement, as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用更复杂的语句，如下：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This statement produces a final number `10` as value to `$id`; now, also consider
    the following statement:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个声明产生了最终的数字`10`作为值传递给`$id`；现在，还要考虑以下声明：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding statement produces the same result. So, both of them could be
    accepted, executed by the backend and without showing the result. Also, if we
    generate a statement which is executed, but the final value is different from
    1 to 10, the error will not be shown.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的声明产生了相同的结果。因此，两者都可以被接受，由后端执行而不显示结果。此外，如果我们生成一个被执行的语句，但最终值不是1到10，错误将不会显示。
- en: With this statement as the base, we can use Burp Suite to perform data exfiltration
    in the following section.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个声明作为基础，我们可以使用Burp Suite在以下部分执行数据外泄。
- en: Performing exfiltration using Burp Suite
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Burp Suite进行数据外泄
- en: 'Execute the following steps to perform data exfiltration using Burp Suite:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤使用Burp Suite执行数据外泄：
- en: 'First, configure Burp Suite to intercept the request made by the application,
    and stop when the request which sends the `$id` value, using the `Intercept is
    on` option in the Proxy tab, as shown in the following screenshot:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，配置Burp Suite以拦截应用程序发出的请求，并在发送`$id`值的请求时停止，使用代理选项卡中的`拦截打开`选项，如下面的屏幕截图所示：
- en: '![](img/7d73c09d-beb0-4fd2-bed4-0c91dc130a42.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7d73c09d-beb0-4fd2-bed4-0c91dc130a42.png)'
- en: 'Once the request is stopped, right-click on it, and select the Send to intruder
    option, as follows:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请求停止后，右键单击它，然后选择发送到入侵者选项，如下所示：
- en: '![](img/76beb704-7156-48fa-a156-2c3ac0ee617d.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/76beb704-7156-48fa-a156-2c3ac0ee617d.png)'
- en: By default, Burp Suite creates wildcards for each variable detected in the request
    and creates values in the ...
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Burp Suite为请求中检测到的每个变量创建通配符，并创建值...
- en: Executing OS commands using an SQL injection
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SQL注入执行操作系统命令
- en: One of the most severe impacts of SQL injection attacks is the command execution
    at the OS level. Most of the time, if the user executes system commands, this
    results in the whole server and the application being compromised.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: SQL注入攻击最严重的影响之一是在操作系统级别执行命令。大多数情况下，如果用户执行系统命令，这将导致整个服务器和应用程序被攻破。
- en: The vulnerability
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 漏洞
- en: The command injection vulnerabilities into SQL injections usually occur because
    the DBMS has a stored procedure or an allowed native option, which interacts directly
    with the OS. For example, `xp_cmdshell` on SQL Server, or a specially stored procedure
    developed in Java for Oracle.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: SQL注入中的命令注入漏洞通常发生是因为DBMS具有存储过程或允许的本地选项，直接与操作系统交互。例如，在SQL Server上的`xp_cmdshell`，或者为Oracle开发的特殊存储过程。
- en: In some cases, it is also possible that the application stores the database
    strings that are extracted by a query and executed; so, if we can update the database,
    we could inject a command into the server. However, as I mentioned, this is not
    a common case.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，应用程序还可能存储通过查询提取并执行的数据库字符串；因此，如果我们可以更新数据库，我们可以向服务器注入命令。但是，正如我提到的，这不是常见情况。
- en: 'Once we have detected a vulnerability related to command injection, we can
    use Burp Suite to exploit it. For example, let''s examine the following request
    from an application:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们发现与命令注入相关的漏洞，我们可以使用Burp Suite来利用它。例如，让我们检查应用程序的以下请求：
- en: This request was ...
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个请求是...
- en: Executing an out-of-band command injection
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行带外命令注入
- en: As we've mentioned many times, the most important Burp Suite feature is the
    automation capability. As we will explore later on this book, we can create our
    own plugins to extend Burp Suite, or we can find a lot of extensions made by the
    community.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经多次提到的那样，Burp Suite最重要的功能是自动化能力。正如我们将在本书的后面探讨的那样，我们可以创建自己的插件来扩展Burp Suite，或者我们可以找到社区制作的许多扩展。
- en: There is an extension called **SHELLING**, which is focused on the payload list
    creation for command injection attacks. We'll look at this more closely in the
    following section.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为**SHELLING**的扩展，专注于为命令注入攻击创建有效负载列表。我们将在下一节更仔细地研究这个问题。
- en: SHELLING
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SHELLING
- en: 'SHELLING is a plugin that is not available in the BApps Store, so you will
    need to go the GitHub to get it [https://github.com/ewilded/shelling](https://github.com/ewilded/shelling).
    Download the `.jar` file and install it using the Extender option in Burp Suite:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: SHELLING是一个在BApps Store中不可用的插件，因此您需要转到GitHub获取它[https://github.com/ewilded/shelling](https://github.com/ewilded/shelling)。下载`.jar`文件并使用Burp
    Suite中的Extender选项安装它：
- en: 'To do this, click on the Extender tab, and click on the Manual install button.
    Burp Suite will launch a window to select the `.jar` file. Because SHELLING is
    not included as an official extension, Burp Suite will launch the following warning
    message to confirm that you want to install it:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要做到这一点，点击Extender选项卡，然后点击手动安装按钮。Burp Suite将启动一个窗口来选择`.jar`文件。因为SHELLING不是官方扩展的一部分，Burp
    Suite将启动以下警告消息以确认您是否要安装它：
- en: '![](img/44863719-cf5f-417a-8360-5325e87e9f49.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44863719-cf5f-417a-8360-5325e87e9f49.png)'
- en: After it is installed, you will not see anything different on your Burp Suite
    instance. This is because SHELLING does not modify ...
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，您在Burp Suite实例上看不到任何不同之处。这是因为SHELLING不会修改...
- en: Stealing session credentials using XSS
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用XSS窃取会话凭据
- en: XSS is a vulnerability which can be used for many purposes. It launches a popup
    with a message to take control of the computer affected by the XSS. A common attack
    is to steal credentials or sessions using XSS.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: XSS是一种可以用于许多目的的漏洞。它会弹出一个消息框，以控制受XSS影响的计算机。常见的攻击是利用XSS窃取凭据或会话。
- en: Exploiting the vulnerability
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用漏洞
- en: 'Imagine we have the following vulnerable request, where the `name` parameter
    is vulnerable to XSS:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，我们有以下易受攻击的请求，其中`name`参数容易受到XSS攻击：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can catch it with the Burp Suite''s proxy, and modify the parameter''s
    value using the common testing string, as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用Burp Suite的代理捕获它，并使用常见的测试字符串修改参数的值，如下所示：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Quit Intercept ...
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 退出拦截...
- en: Taking control of the user's browser using XSS
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用XSS控制用户的浏览器
- en: As I mentioned before, perhaps the highest impact by an XSS is to take control
    of the user who is affected.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前提到的，XSS的最大影响可能是控制受影响的用户。
- en: 'The way to do this essentially depends on the actions allowed by the web browser
    to execute actions using JavaScript or other client interactions, which can be
    passed by the malicious user in the XSS. In fact, it is not necessary to execute
    the JavaScript directly. For example, it''s possible to exploit XSS in Internet
    Explorer executing ActiveX controls, like the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上取决于Web浏览器允许使用JavaScript或其他客户端交互执行操作的操作方式，这些操作方式可以通过XSS由恶意用户传递。实际上，不需要直接执行JavaScript。例如，可以在Internet
    Explorer中利用XSS执行ActiveX控件，如下所示：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This code will launch another program in the remote computer, so it's possible
    to execute any kind of attacks on the client side.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将在远程计算机中启动另一个程序，因此可以在客户端执行任何类型的攻击。
- en: Extracting server files using XXE vulnerabilities
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用XXE漏洞提取服务器文件
- en: XXE is a vulnerability that affects an application that parses XML and made
    a mistaking when parsing an XML that has reference to an XXE.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: XXE是一种影响解析XML并在解析具有对XXE的引用时出现错误的应用程序的漏洞。
- en: Exploiting the vulnerability
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用漏洞
- en: 'Imagine we have an application susceptible to an XXE vulnerability, where we
    have a vulnerable request as shown in the following screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，我们有一个容易受到XXE漏洞影响的应用程序，其中我们有一个易受攻击的请求，如下面的屏幕截图所示：
- en: '![](img/edf64d0e-2897-44bd-ba3f-273484aa6940.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/edf64d0e-2897-44bd-ba3f-273484aa6940.png)'
- en: 'Here, the `xml` parameter is vulnerable to an XXE and the header, as shown
    in the following block:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`xml`参数容易受到XXE的影响，如下面的块所示：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It means that this is a request that is accepting XML as the input. So, we
    will modify the input using the Burp Suite''s Proxy, to see if the application
    is accepting our testing string. To do this, we are going to use the following
    input:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着这是一个接受XML作为输入的请求。因此，我们将使用Burp Suite的代理修改输入，以查看应用程序是否接受我们的测试字符串。为此，我们将使用以下输入：
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If it''s accepted, the application will show the message that we are passing
    in the XML input. So, modify the `xml` parameter with this input, and click on
    Intercept is on to send the request. The result will be displayed in the HTML
    website, as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果被接受，应用程序将显示我们在XML输入中传递的消息。因此，使用此输入修改`xml`参数，并点击拦截以发送请求。结果将显示在HTML网站中，如下所示：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, we know the vulnerability is exploitable, so we''re going to send a string
    to extract files from the server. To extract files using an XXE attack, we need
    to have more information about the server where the application is hosted, at
    least the OS. Using the headers included in the response, it is possible to know
    what the OS is, as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们知道漏洞是可利用的，所以我们将发送一个字符串来从服务器中提取文件。要使用XXE攻击提取文件，我们需要更多关于托管应用程序的服务器的信息，至少是操作系统。使用响应中包含的标头，可以知道操作系统是什么，如下所示：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This header could be modified by a system administrator, if you have doubts
    you can use a network tool, such as Nmap ([www.nmap.org](http://www.nmap.org)),
    to confirm.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您怀疑，可以使用网络工具（如Nmap ([www.nmap.org](http://www.nmap.org)））来确认，此标头可能会被系统管理员修改。
- en: 'In this case, the server is Debian Linux. So, the testing string that we need
    to use for our attack needs to be in compliance with the Unix-like file systems,
    as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，服务器是Debian Linux。因此，我们需要使用符合类Unix文件系统的测试字符串进行攻击，如下所示：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Using this, we are going to retrieve the `/etc/passwd` file, which, in some
    cases, are stored as password hashes in a Linux system. So, send the original
    request to the Repeater tool, modify the `xml` parameter with this string, and
    click on Go, as shown in the following screenshot:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个，我们将检索`/etc/passwd`文件，在某些情况下，它们作为密码哈希值存储在Linux系统中。因此，将原始请求发送到Repeater工具，使用此字符串修改`xml`参数，并单击“Go”，如下截图所示：
- en: '![](img/920f6273-fd0f-4598-a157-f208a61c373f.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/920f6273-fd0f-4598-a157-f208a61c373f.png)'
- en: Currently, not all of the Linux systems use the `/etc/passwd` file to store
    the hashes; in the past, as a pentester, presenting a screenshot like the preceding
    one was the perfect evidence to show the vulnerability risk. However, nowadays,
    there are a lot of Linux systems that store their hashes in `/etc/shadow`, which
    is ciphered, or in many cases, limit the access that the server user has to the
    file system.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，并非所有的Linux系统都使用`/etc/passwd`文件来存储哈希值；过去，作为渗透测试人员，呈现类似前面的截图是展示漏洞风险的完美证据。然而，如今有很多Linux系统将它们的哈希值存储在`/etc/shadow`中，该文件是加密的，或者在许多情况下，限制了服务器用户对文件系统的访问。
- en: Depending on the context of the application, you need to determine which files
    to extract. For example, as a tip, it's very useful to extract files from the
    web server's root directory, in order to get access to source code.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 根据应用程序的上下文，您需要确定要提取哪些文件。例如，作为提示，从Web服务器的根目录中提取文件非常有用，以便访问源代码。
- en: Performing out-of-data extraction using XXE and Burp Suite collaborator
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用XXE和Burp Suite collaborator执行过时数据提取
- en: Burp Suite collaborator is a service used to detect vulnerabilities mostly when
    an application tries to interact with external services. Burp Suite analyzes the
    interactions with external systems and detects unusual behaviors. In order to
    analyze the application, Burp Suite collaborator sends inputs or payloads to the
    application and waits for a response.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite collaborator是一个用于检测漏洞的服务，主要是当应用程序尝试与外部服务进行交互时。Burp Suite分析与外部系统的交互并检测异常行为。为了分析应用程序，Burp
    Suite collaborator向应用程序发送输入或有效载荷，并等待响应。
- en: So, in this case, Burp Suite is working a server, where the application interacts
    using common services, such as DNS, SMTP, or HTTP.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这种情况下，Burp Suite正在工作一个服务器，应用程序使用常见服务进行交互，如DNS、SMTP或HTTP。
- en: Using Burp Suite to exploit the vulnerability
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Burp Suite来利用漏洞
- en: 'Open Burp Suite in the main Dashboard tab, and click on the New scan option,
    as demonstrated in the following screenshot. Remember that these options are only
    available in Burp Suite Professional, and not in the Community Edition:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在主仪表板选项卡中打开Burp Suite，单击“新扫描”选项，如下截图所示。请记住，这些选项仅在Burp Suite专业版中可用，而不在社区版中可用：
- en: '![](img/d50fcee4-b164-4b3a-86a0-151c17dc7bf3.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d50fcee4-b164-4b3a-86a0-151c17dc7bf3.png)'
- en: When you use the scanner, Burp Suite tests the application for vulnerabilities.
    Here, you can modify options about how the scanner did its job, and also configure
    credentials for automatic login. This is very important for the most part of application,
    because most of them have authentication control. For exploiting the XXE, we are
    going to launch a simple scan to the URL that we have. After clicking on the OK
    button, the scan starts.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用扫描器Burp Suite测试应用程序的漏洞时，您可以修改有关扫描器工作方式的选项，并配置用于自动登录的凭据。这对于大多数应用程序来说非常重要，因为它们大多数都有身份验证控制。为了利用XXE，我们将对我们拥有的URL进行简单的扫描。单击“确定”按钮后，扫描开始。
- en: 'When the scan finishes, Burp Suite will show us the XXE detected in the URL,
    as shown in the following screenshot:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当扫描完成时，Burp Suite将在URL中显示检测到的XXE，如下截图所示：
- en: '![](img/ecac7d4c-b9d6-4e75-8c63-14a0b90f3727.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ecac7d4c-b9d6-4e75-8c63-14a0b90f3727.png)'
- en: 'In the preceding list, we can see that there are some issues that include the
    phrase External service interaction, followed by the protocol used. If we select
    one of these issues, Burp Suite will show us a new tab called Collaborator interaction,
    as demonstrated in the following screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述列表中，我们可以看到一些包含短语“External service interaction”的问题，后面跟着使用的协议。如果我们选择其中一个问题，Burp
    Suite将显示一个名为Collaborator interaction的新选项卡，如下截图所示：
- en: '![](img/56410108-9297-44e2-a71b-231c63537bbd.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/56410108-9297-44e2-a71b-231c63537bbd.png)'
- en: 'Burp Suite collaborator allows the users to configure their own server, but
    if you do not configure one, the collaborator uses the Portswigger''s server by
    default. By analyzing the request, we can detect that the collaborator sent the
    following parameter:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite collaborator允许用户配置自己的服务器，但如果您没有配置一个，collaborator将默认使用Portswigger的服务器。通过分析请求，我们可以检测到collaborator发送了以下参数：
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The response was as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 响应如下：
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The collaborator used a string to identify the vulnerability. If we review
    the collaborator''s request and response, not the HTTP request, it is different.
    We can see which string is used as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: collaborator使用一个字符串来识别漏洞。如果我们审查collaborator的请求和响应，而不是HTTP请求，它是不同的。我们可以看到使用的字符串如下：
- en: '![](img/8d0908f5-3088-4842-80fb-ecd98349801d.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d0908f5-3088-4842-80fb-ecd98349801d.png)'
- en: 'Reading the HTML code in the response, we can find the following string:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读响应中的HTML代码，我们可以找到以下字符串：
- en: '[PRE13]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Exploiting SSTI vulnerabilities to execute server commands
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用SSTI漏洞执行服务器命令
- en: SSTI is a vulnerability that occurs when an application is using a framework
    to display how it is presented to the user. These templates are inputs, and if
    those inputs are not correctly validated, they can change the behavior.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: SSTI是一种漏洞，当应用程序使用框架来显示其呈现给用户的方式时发生。这些模板是输入，如果这些输入没有得到正确验证，它们可能会改变行为。
- en: These vulnerabilities depend a lot on the technology used by the developers
    to create the application, so not all of the cases are the same, and as a pentester,
    you need to identify these differences and its effects on how vulnerability is
    exploited.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这些漏洞在很大程度上取决于开发人员用来创建应用程序的技术，因此并非所有情况都相同，作为渗透测试人员，您需要识别这些差异以及其对漏洞利用的影响。
- en: Using Burp Suite to exploit the vulnerability
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Burp Suite来利用这个漏洞
- en: Imagine you have a vulnerable application to SSTI that is using Twig. Twig ([https://twig.symfony.com/](https://twig.symfony.com/))
    is a template engine developed in PHP.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有一个易受SSTI攻击的应用程序正在使用Twig。Twig ([https://twig.symfony.com/](https://twig.symfony.com/))
    是一个在PHP中开发的模板引擎。
- en: 'We can detect the use of an engine because of the source code. Consider the
    following code snippet:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过源代码检测引擎的使用。考虑以下代码片段：
- en: '[PRE14]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here, we can see that the application is waiting for data to present the final
    website to the user. When PHP reads the template, it executes all of the things
    that are contained there. For example, in 2015, James Kettle published a vulnerability
    that allows injecting a backdoor in Twig using the following string:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到应用程序正在等待数据以向用户呈现最终网站。当PHP读取模板时，它会执行其中包含的所有内容。例如，2015年，James Kettle发布了一个漏洞，允许使用以下字符串在Twig中注入后门：
- en: '[PRE15]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Following the same idea, it is possible to execute any command, even getting
    shell, using the following string:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循相同的思路，可以使用以下字符串执行任何命令，甚至获取shell：
- en: '[PRE16]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This happens because, in the code, it is possible to inject any PHP function,
    without validation. Kettle showed the vulnerability in the source code, as demonstrated
    in the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为在代码中，可以注入任何PHP函数，而不需要验证。Kettle在源代码中展示了漏洞，如下所示：
- en: '[PRE17]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Basically, the code accepts any kind of PHP function, so, in the string, Kettle
    entered the `exec()` function to execute a command directly to the server.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，该代码接受任何类型的PHP函数，因此，在字符串中，Kettle输入了`exec()`函数来直接向服务器执行命令。
- en: Twig is not the only engine that has problems. The other engines researched
    by Kettle included Smarty, another PHP engine that in theory disallows the direct
    use of the `system()` function. However, Kettle discovered that it allows invoking
    methods in other classes.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Twig并不是唯一存在问题的引擎。Kettle研究的其他引擎包括Smarty，另一个PHP引擎，理论上不允许直接使用`system()`函数。然而，Kettle发现它允许调用其他类中的方法。
- en: 'The vulnerable code snippet is shown in the following screenshot:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 易受攻击的代码片段如下截图所示：
- en: '![](img/e83a91da-a8ce-4c53-a9f9-6ff3a3ce96d4.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e83a91da-a8ce-4c53-a9f9-6ff3a3ce96d4.png)'
- en: In this snippet of code, we can see that the `getStreamVariable()` method could
    be susceptible to read any file, with the server permissions. Furthermore, we
    can call other methods.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码片段中，我们可以看到`getStreamVariable()`方法可能容易读取任何文件，具体取决于服务器权限。此外，我们还可以调用其他方法。
- en: 'So, to execute a command on the server, Kettle showed us the following testing
    string:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了在服务器上执行命令，Kettle向我们展示了以下测试字符串：
- en: '[PRE18]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Where we can add the command in the `$_GET` variable.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`$_GET`变量中添加命令。
- en: 'In Burp Suite, we can add these testing strings for different template engines
    as a list, and then launch the attack using the payloads options in the Intruder
    tool, as shown in the following screenshot:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在Burp Suite中，我们可以将这些测试字符串添加到不同模板引擎的列表中，然后使用Intruder工具中的负载选项发动攻击，如下面的截图所示：
- en: '![](img/499cb38c-972e-45a5-8f4d-6961fb673c3b.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/499cb38c-972e-45a5-8f4d-6961fb673c3b.png)'
- en: Summary
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned the normal tools that Burp Suite uses to exploit
    different types of vulnerabilities. In particular, we explored blind SQL injections,
    OS command injections, exploiting XSS, stealing sessions using XSS, taking control
    of web browsers using XSS, exploiting XXE, extracting files from servers using
    XXE, and exploiting SSTI through template engines.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了Burp Suite用于利用不同类型漏洞的常规工具。特别是，我们探讨了盲SQL注入、OS命令注入、利用XSS、利用XSS窃取会话、利用XSS控制Web浏览器、利用XXE、利用XXE从服务器提取文件以及通过模板引擎利用SSTI。
- en: In the next chapter, we will be exploiting other types of vulnerabilities, showing
    more options and capabilities in Burp Suite.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将利用其他类型的漏洞，展示Burp Suite中更多的选项和功能。
