- en: Extending Metasploit and Exploit Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展Metasploit和利用开发
- en: 'In the preceding chapter, you learned how to effectively use Armitage for easily
    performing some of the complex penetration testing tasks. In this chapter, we''ll
    have a high-level overview of exploit development. Exploit development can be
    quite complex and tedious and is such a vast topic that an entire book can be
    written on this. However, in this chapter, we''ll try to get a gist of what exploit
    development is, why it is required, and how the Metasploit Framework helps us
    develop exploit. The topics to be covered in this chapter are as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您学习了如何有效地使用Armitage轻松执行一些复杂的渗透测试任务。在本章中，我们将对利用开发进行高层次的概述。利用开发可能非常复杂和繁琐，是一个如此广泛的主题，以至于可以写一整本书。然而，在本章中，我们将试图了解利用开发是什么，为什么需要它，以及Metasploit框架如何帮助我们开发利用。本章将涵盖以下主题：
- en: Exploit development concepts
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用开发概念
- en: Adding external exploits to Metasploit
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将外部利用添加到Metasploit
- en: Introduction to Metasploit exploit templates and mixins
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit利用模板和混合技术介绍
- en: Exploit development concepts
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用开发概念
- en: 'Exploits can be of many different types. They can be classified based on various
    parameters such as platforms, architecture, and purpose served. Whenever any given
    vulnerability is discovered, there are either of three following possibilities:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 利用可以有许多不同的类型。它们可以根据平台、架构和服务目的等各种参数进行分类。每当发现任何给定的漏洞时，通常存在以下三种可能性之一：
- en: An exploit code already exists
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已经存在利用代码
- en: Partial exploit code exists that needs some modification to execute malicious
    payload
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部分利用代码已经存在，需要一些修改才能执行恶意载荷
- en: No exploit code exists, and there's a need to develop new exploit code from
    scratch
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有利用代码存在，需要从头开始开发新的利用代码
- en: 'The first two cases look quite easy as the exploit code exists and may need
    some minor tweaks to get it executed. However, the third case, wherein a vulnerability
    has just been discovered and no exploit code exists, is the real challenge. In
    such a case, you might need to perform some of the following tasks:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 前两种情况看起来很容易，因为利用代码已经存在，可能只需要一些小的调整就可以执行。然而，第三种情况，即刚刚发现漏洞且没有利用代码存在的情况，才是真正的挑战。在这种情况下，您可能需要执行以下一些任务：
- en: Gather basic information, such as the platform and architecture the vulnerability
    is supported on
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集基本信息，例如漏洞支持的平台和架构
- en: Get all possible details about how the vulnerability can be exploited and what
    the possible attack vectors are
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集有关漏洞如何被利用以及可能的攻击向量的所有可能细节
- en: Use techniques such as fuzzing to specifically pinpoint the vulnerable code
    and parameters
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模糊测试等技术来具体确定脆弱的代码和参数
- en: Write a pseudo code or prototype to test whether the exploit is working for
    real
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写伪代码或原型来测试利用是否真正有效
- en: Write the complete code with all required parameters and values
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写带有所有必需参数和值的完整代码
- en: Publish the code for the community and convert it into a Metasploit module
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布代码供社区使用，并将其转换为Metasploit模块
- en: All these activities are quite intense and require a lot of research and patience.
    The exploit code is parameter sensitive; for example, in the case of a buffer
    overflow exploit, the return address is the key to run the exploit successfully.
    Even if one of the bits in the return address is mentioned incorrectly, the entire
    exploit would fail.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些活动都非常紧张，需要大量的研究和耐心。利用代码对参数非常敏感；例如，在缓冲区溢出利用的情况下，返回地址是成功运行利用的关键。即使返回地址中的一个位被错误地提及，整个利用都会失败。
- en: What is a buffer overflow?
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是缓冲区溢出？
- en: Buffer overflow is one of the most commonly found vulnerabilities in various
    applications and system components. A successful buffer overflow exploit may allow
    remote arbitrary code execution leading, to elevated privileges.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 缓冲区溢出是各种应用程序和系统组件中最常见的漏洞之一。成功的缓冲区溢出利用可能允许远程任意代码执行，从而提升权限。
- en: 'A buffer overflow condition occurs when a program tries to insert more data
    in a buffer than it can accommodate, or when a program attempts to insert data
    into a memory area past a buffer. In this case, a buffer is nothing but a sequential
    section of memory allocated to hold anything from a character string to an array
    of integers. Attempting to write outside the bounds of a block of the allocated
    memory can cause data corruption, crash the program, or even lead to the execution
    of malicious code. Let''s consider the following code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序尝试在缓冲区中插入的数据超过其容量时，或者当程序尝试将数据插入到缓冲区之后的内存区域时，就会发生缓冲区溢出条件。在这种情况下，缓冲区只是分配的内存的连续部分，用于保存从字符串到整数数组的任何内容。尝试在分配的内存块的边界之外写入数据可能会导致数据损坏，使程序崩溃，甚至导致恶意代码的执行。让我们考虑以下代码：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding code is vulnerable to buffer overflow. If you carefully notice,
    the buffer size has been set to 25 characters. However, what if the user enters
    data more than 25 characters? The buffer will simply overflow and the program
    execution will end abruptly.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码存在缓冲区溢出漏洞。如果仔细注意，缓冲区大小已设置为25个字符。但是，如果用户输入的数据超过25个字符会怎么样？缓冲区将简单地溢出，程序执行将突然结束。
- en: What are fuzzers?
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模糊测试是什么？
- en: In the preceding example, we had access to the source code, and we knew that
    the variable buffer can hold a maximum of 25 characters. So, in order to cause
    a buffer overflow, we can send 30, 40, or 50 characters as input. However, it's
    not always possible to have access to the source code of any given application.
    So, for an application whose source code isn't available, how would you determine
    what length of input should be sent to a particular parameter so that the buffer
    gets overflowed? This is where fuzzers come to the rescue. Fuzzers are small programs
    that send random inputs of various lengths to specified parameters within the
    target application and inform us the exact length of the input that caused the
    overflow and crash of the application.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们可以访问源代码，并且我们知道变量缓冲区最多可以容纳25个字符。因此，为了引起缓冲区溢出，我们可以发送30、40或50个字符作为输入。然而，并非总是可能访问任何给定应用程序的源代码。因此，对于源代码不可用的应用程序，您如何确定应该发送多长的输入到特定参数，以便缓冲区溢出？这就是模糊器发挥作用的地方。模糊器是发送随机输入到目标应用程序中指定参数的小程序，并告知我们导致溢出和应用程序崩溃的输入的确切长度。
- en: Did you know? Metasploit has fuzzers for fuzzing various protocols. These fuzzers
    are a part of auxiliary modules within the Metasploit Framework and can be found
    in the `auxiliary/fuzzers/`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道吗？Metasploit有用于模糊化各种协议的模糊器。这些模糊器是Metasploit框架中的辅助模块的一部分，可以在`auxiliary/fuzzers/`中找到。
- en: Exploit templates and mixins
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 漏洞利用模板和混合
- en: 'Let''s consider that you have written an exploit code for a new zero-day vulnerability.
    Now, to include the exploit code officially into the Metasploit Framework, it
    has to be in a particular format. Fortunately, you just need to concentrate on
    the actual exploit code, and then simply use a template (provided by the Metasploit
    Framework) to insert it in the required format. The Metasploit Framework offers
    an exploit module skeleton, as shown in the following code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您已经为一个新的零日漏洞编写了漏洞利用代码。现在，要将漏洞利用代码正式包含到Metasploit框架中，它必须以特定格式呈现。幸运的是，您只需要专注于实际的漏洞利用代码，然后简单地使用模板（由Metasploit框架提供）将其插入所需的格式中。Metasploit框架提供了一个漏洞利用模块骨架，如下所示：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, let''s try to understand the various fields in the preceding exploit skeleton:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们试着理解前面的漏洞利用骨架中的各个字段：
- en: 'The **Name** field: This begins with the name of the vendor, followed by the
    software. The **Root Cause** field points to the component or function in which
    the bug is found and finally, the type of vulnerability the module is exploiting.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**字段：以供应商名称开头，然后是软件。**根本原因**字段指向发现错误的组件或功能，最后是模块正在利用的漏洞类型。'
- en: 'The **Description** field: This field elaborates what the module does, things
    to watch out for, and any specific requirements. The aim is to let the user get
    a clear understanding of what he''s using without the need to actually go through
    the module''s source.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**字段：此字段详细说明模块的功能、需要注意的事项和任何特定要求。目的是让用户清楚地了解他正在使用的内容，而无需实际查看模块的源代码。'
- en: 'The **Author** field: This is where you insert your name. The format should
    be Name. In case you want to insert your Twitter handle as well, simply leave
    it as a comment, for example, `Name #Twitterhandle`.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**作者**字段：这是您插入姓名的地方。格式应为姓名。如果您想插入您的Twitter账号，只需将其作为注释留下，例如`姓名 #Twitterhandle`。'
- en: 'The **References** field: This is an array of references related to the vulnerability
    or the exploit, for example, an advisory, a blog post, and much more. For more
    details on reference identifiers, visit [https://github.com/rapid7/metasploit-framework/wiki/Metasploit-module-reference-identifiers](https://github.com/rapid7/metasploit-framework/wiki/Metasploit-module-reference-identifiers)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**参考**字段：这是与漏洞或漏洞利用相关的参考数组，例如公告、博客文章等。有关参考标识符的更多详细信息，请访问[https://github.com/rapid7/metasploit-framework/wiki/Metasploit-module-reference-identifiers](https://github.com/rapid7/metasploit-framework/wiki/Metasploit-module-reference-identifiers)'
- en: 'The **Platform** field: This field indicates all platforms the exploit code
    will be supported on, for example, Windows, Linux, BSD, and Unix.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平台**字段：此字段指示漏洞利用代码将支持的所有平台，例如Windows、Linux、BSD和Unix。'
- en: 'The **Targets** field: This is an array of systems, applications, setups, or
    specific versions your exploit is targeting. The second element or each target
    array is where you store specific metadata of the target, for example, a specific
    offset, a gadget, a `ret` address, and much more. When a target is selected by
    the user, the metadata is loaded and tracked by a `target index`, and can be retrieved
    using the target method.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标**字段：这是一个系统、应用程序、设置或特定版本的数组，您的漏洞利用的目标。每个目标数组的第二个元素是您存储目标特定元数据的位置，例如特定偏移量、小工具、`ret`地址等。当用户选择一个目标时，元数据将被加载并由`目标索引`跟踪，并可以使用目标方法检索。'
- en: 'The **Payloads** field: This field specifies how the payload should be encoded
    and generated. You can specify Space, SaveRegisters, Prepend, PrependEncoder,
    BadChars, Append, AppendEncoder, MaxNops, MinNops, Encoder, Nop, EncoderType,
    EncoderOptions, ExtendedOptions, and EncoderDontFallThrough.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有效载荷**字段：此字段指定有效载荷应如何编码和生成。您可以指定Space、SaveRegisters、Prepend、PrependEncoder、BadChars、Append、AppendEncoder、MaxNops、MinNops、Encoder、Nop、EncoderType、EncoderOptions、ExtendedOptions和EncoderDontFallThrough。'
- en: 'The **DisclosureDate** field: This field specifies when the vulnerability was
    disclosed in public, in the format of M D Y, for example, "Jun 29, 2017."'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**披露日期**字段：此字段指定漏洞是在公开披露的日期，格式为M D Y，例如，“2017年6月29日”。'
- en: Your exploit code should also include a `check` method to support the `check`
    command, but this is optional in case it's not possible. The `check` command will
    probe the target for the feasibility of the exploit.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您的漏洞利用代码还应包括一个`check`方法，以支持`check`命令，但如果不可能的话，这是可选的。`check`命令将探测目标是否可利用漏洞。
- en: And finally, the exploit method is like your main method. Start writing your
    code there.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，漏洞利用方法就像您的主要方法。从那里开始编写您的代码。
- en: What are Metasploit mixins?
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metasploit混合是什么？
- en: If you are familiar with programming languages such as C and Java, you must
    have come across terms such as functions and classes. Functions in C and classes
    in Java basically allow code reuse. This makes the program more efficient. The
    Metasploit Framework is written in the Ruby language. So, from the perspective
    of the Ruby language, a mixin is nothing but a simple module that is included
    in a class. This will enable the class to have access to all methods of this module.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉C和Java等编程语言，你一定听说过函数和类等术语。C中的函数和Java中的类基本上都允许代码重用。这使得程序更加高效。Metasploit框架是用Ruby语言编写的。因此，从Ruby语言的角度来看，mixin只是一个简单的包含在类中的模块。这将使类能够访问此模块的所有方法。
- en: So, without going into much details about programming, you can simply remember
    that mixins help in modular programming; for instance, you may want to perform
    some TCP operations, such as connecting to a remote port and fetching some data.
    Now, to perform this task, you might have to write quite a lot of code altogether.
    However, if you make use of the already available TCP mixin, you will end up saving
    the efforts of writing the entire code from scratch! You will simply include the
    TCP mixin and call the appropriate functions as required. So, you need not reinvent
    the wheel and can save a lot of time and effort using the mixin.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，不需要深入了解编程细节，你只需记住mixin有助于模块化编程；例如，你可能想执行一些TCP操作，比如连接到远程端口并获取一些数据。现在，要执行这个任务，你可能需要编写相当多的代码。但是，如果你使用已有的TCP
    mixin，你将节省写整个代码的工作！你只需包含TCP mixin并根据需要调用相应的函数。因此，你无需重新发明轮子，可以节省大量时间和精力。
- en: 'You can view the various mixins available in the Metasploit Framework by browsing
    the `/lib/msf/core/exploit` directory, as shown in the following screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过浏览`/lib/msf/core/exploit`目录来查看Metasploit框架中提供的各种mixin，如下截图所示：
- en: '![](img/d8e73b36-7848-4376-ad43-1a2db9858a2e.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d8e73b36-7848-4376-ad43-1a2db9858a2e.jpg)'
- en: 'Some of the most commonly used mixins in the Metasploit Framework are as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit框架中最常用的一些mixin如下：
- en: '`Exploit::Remote::Tcp`: The code of this mixin is located at `lib/msf/core/exploit/tcp.rb` and
    provides the following methods and options:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exploit::Remote::Tcp`：此mixin的代码位于`lib/msf/core/exploit/tcp.rb`，并提供以下方法和选项：'
- en: TCP options and methods
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TCP选项和方法
- en: Defines RHOST, RPORT, and ConnectTimeout
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义RHOST、RPORT和ConnectTimeout
- en: '`connect()` and `disconnect()`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connect()`和`disconnect()`'
- en: Creates self.sock as the global socket
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建self.sock作为全局套接字
- en: Offers SSL, Proxies, CPORT, and CHOST
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供SSL、代理、CPORT和CHOST
- en: Evasion via small segment sends
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过小段发送进行规避
- en: Exposes user options as methods such as `rhost()` `rport()` `ssl()`
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将用户选项公开为`rhost()`、`rport()`、`ssl()`等方法
- en: '`Exploit::Remote::SMB`: The code of this mixin is inherited from the TCP mixin,
    is located at `lib/msf/core/exploit/smb.rb`, and provides the following methods
    and options:'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exploit::Remote::SMB`：此mixin的代码是从TCP mixin继承而来，位于`lib/msf/core/exploit/smb.rb`，并提供以下方法和选项：'
- en: '`smb_login()`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`smb_login()`'
- en: '`smb_create()`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`smb_create()`'
- en: '`smb_peer_os()`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`smb_peer_os()`'
- en: Provides the options of SMBUser, SMBPass, and SMBDomain
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供了SMBUser、SMBPass和SMBDomain的选项
- en: Exposes IPS evasion methods such as `SMB::pipe_evasion`, `SMB::pad_data_level`,
    and `SMB::file_data_level`
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公开IPS规避方法，如`SMB::pipe_evasion`、`SMB::pad_data_level`和`SMB::file_data_level`
- en: Adding external exploits to Metasploit
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向Metasploit添加外部利用
- en: New vulnerabilities across various applications and products are found on a
    daily basis. For most newly found vulnerabilities, an exploit code is also made
    public. Now, the exploit code is quite often in a raw format (just like a shellcode)
    and not readily usable. Also, it might take some time before the exploit is officially
    made available as a module within the Metasploit Framework. However, we can manually
    add an external exploit module in the Metasploit Framework and use it like any
    other existing exploit module. Let's take an example of the MS17-010 vulnerability
    that was recently used by the Wannacry ransomware. By default, the exploit code
    for MS17-010 isn't available within the Metasploit Framework.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 每天都会发现各种应用程序和产品中的新漏洞。对于大多数新发现的漏洞，也会公开相应的利用代码。现在，利用代码通常是原始格式的（就像shellcode一样），不能直接使用。此外，在利用正式作为Metasploit框架中的模块之前可能需要一些时间。但是，我们可以手动将外部利用模块添加到Metasploit框架中，并像任何其他现有的利用模块一样使用它。让我们以最近被Wannacry勒索软件使用的MS17-010漏洞为例。默认情况下，MS17-010的利用代码在Metasploit框架中是不可用的。
- en: Let's start by downloading the MS17-010 module from the exploit database.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从利用数据库中下载MS17-010模块开始。
- en: Did you know? Exploit-DB located at [https://www.exploit-db.com](https://www.exploit-db.com)
    is one of the most trusted and updated sources for getting new exploits for a
    variety of platforms, products, and applications.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道吗？[https://www.exploit-db.com](https://www.exploit-db.com)上的Exploit-DB是获取各种平台、产品和应用程序的新利用的最值得信赖和最新的来源之一。
- en: 'Simply open [https://www.exploit-db.com/exploits/41891/](https://www.exploit-db.com/exploits/41891/)
    in any browser, and download the exploit code, which is in the `ruby (.rb)` format,
    as shown in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 只需在任何浏览器中打开[https://www.exploit-db.com/exploits/41891/](https://www.exploit-db.com/exploits/41891/)，并下载利用代码，它是以`ruby
    (.rb)`格式显示的，如下截图所示：
- en: '![](img/b635786a-01f4-4360-9a42-c66456aac7df.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b635786a-01f4-4360-9a42-c66456aac7df.jpg)'
- en: 'Once the Ruby file for the exploit has been downloaded, we need to copy it
    to the Metasploit Framework directory at path shown in the following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦下载了利用的Ruby文件，我们需要将其复制到Metasploit框架目录中，路径如下截图所示：
- en: '![](img/eee3e35b-c16b-426e-945e-1ba276c3dc3f.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eee3e35b-c16b-426e-945e-1ba276c3dc3f.jpg)'
- en: The path shown in the screenshot is the default path of the Metasploit Framework
    that comes preinstalled on Kali Linux. You need to change the path in case you
    have a custom installation of the Metasploit Framework.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 截图中显示的路径是预装在Kali Linux上的Metasploit框架的默认路径。如果你有自定义安装的Metasploit框架，你需要更改路径。
- en: 'After copying the newly downloaded exploit code to the Metasploit directory,
    we will start `msfconsole` and issue a `reload_all` command, as shown in the following
    screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 将新下载的漏洞利用代码复制到Metasploit目录后，我们将启动`msfconsole`并发出`reload_all`命令，如下面的屏幕截图所示：
- en: '![](img/e198ef75-1145-45c2-b8d9-199b7bc0e746.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e198ef75-1145-45c2-b8d9-199b7bc0e746.jpg)'
- en: 'The `reload_all` command will refresh the Metasploit''s internal database to
    include the newly copied external exploit code. Now, we can use the `use exploit` command,
    as usual, to set up and initiate a new exploit, as shown in the following screenshot.
    We can simply set the value of the variable `RHOSTS` and launch the exploit:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`reload_all`命令将刷新Metasploit的内部数据库，以包括新复制的外部漏洞利用代码。现在，我们可以像往常一样使用`use exploit`命令来设置和启动新的漏洞利用，如下面的屏幕截图所示。我们只需设置变量`RHOSTS`的值并启动利用：'
- en: '![](img/259ccf64-59e6-4924-89a8-70e32d898198.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/259ccf64-59e6-4924-89a8-70e32d898198.jpg)'
- en: Summary
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this concluding chapter, you learned the various exploit development concepts,
    various ways of extending the Metasploit Framework by adding external exploits,
    and got an introduction to the Metasploit exploit templates and mixins.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的总结中，您学习了各种漏洞利用开发概念，通过添加外部漏洞利用的各种方式扩展Metasploit Framework，并介绍了Metasploit漏洞利用模板和混合功能。
- en: Exercises
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'You can try the following exercises:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以尝试以下练习：
- en: 'Try to explore the mixin codes and corresponding functionalities for the following:'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试探索以下内容的混合代码和相应功能：
- en: capture
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获
- en: Lorcon
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lorcon
- en: MSSQL
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MSSQL
- en: KernelMode
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: KernelMode
- en: FTP
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FTP
- en: FTPServer
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FTP服务器
- en: EggHunter
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EggHunter
- en: Find any exploit on [https://www.exploit-db.com](https://www.exploit-db.com)
    that is currently not a part of the Metasploit Framework. Try to download and
    import it in the Metasploit Framework.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://www.exploit-db.com](https://www.exploit-db.com)上找到目前不包含在Metasploit
    Framework中的任何漏洞利用。尝试下载并导入到Metasploit Framework中。
