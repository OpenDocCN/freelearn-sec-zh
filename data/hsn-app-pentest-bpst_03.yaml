- en: Executing an Application Penetration Test
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行应用程序渗透测试
- en: Now that we have learned how to configure and set up our Burp Proxy across various
    platforms, we can now begin to start with an application pentest. In the present
    world, there are various purposes behind executing a pentest; it could either
    be for a bug bounty or it could be a fully-fledged assessment for a client. The
    initial approach is usually the same; ultimately, however, there is a huge difference.
    Bug bounty hunters aim to find one or a set of particular vulnerabilities that
    could lead to severe adversities if exploited, so they can claim their bounty.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何在各种平台上配置和设置我们的Burp代理，我们现在可以开始进行应用程序渗透测试。在当今世界，执行渗透测试有各种目的；它可能是为了漏洞赏金，也可能是为了客户进行全面评估。初始方法通常是相同的；然而，最终存在巨大的差异。漏洞赏金猎人的目标是发现一个或一组可能导致严重不利后果的特定漏洞，以便他们可以获得赏金。
- en: On the other hand, for a fully-fledged pentest, the job of the pentester does
    not stop there. The pentester will have to perform a complete ...
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，对于一个完整的渗透测试，渗透测试人员的工作并不止于此。渗透测试人员将不得不执行完整的...
- en: Differences between a bug bounty and a client-initiated pentest
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 漏洞赏金和客户发起的渗透测试之间的区别
- en: 'Before we jump into the core details, let''s first understand these two mindsets:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入了解核心细节之前，让我们首先了解这两种思维方式：
- en: '**Bug bounty pentest mindset**:'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**漏洞赏金渗透测试思维**：'
- en: The aim is to find vulnerabilities that have an impact and fetch a good bounty
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标是发现具有影响并获得丰厚赏金的漏洞
- en: A complete assessment of the application doesn't need to be done
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不需要对应用程序进行完整评估
- en: One bug is enough to qualify for a bounty
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个漏洞足以获得赏金
- en: All the vulnerabilities in the application are not reported, only the ones found
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不报告应用程序中的所有漏洞，只报告发现的漏洞
- en: There are no particular timelines; it can be done at the pentester's convenience
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有特定的时间表；可以根据渗透测试人员的方便进行
- en: '**Client-initiated pentest mindset**:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户发起的渗透测试思维**：'
- en: The aim is to ensure that all the application processes and functionalities
    are tested
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标是确保测试所有应用程序流程和功能
- en: There is a limited timeline in which the whole application needs to be audited
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在整个应用程序需要进行审核的有限时间内
- en: There is no bounty or rewards
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有赏金或奖励
- en: There is a need to ensure that all the vulnerabilities found by a scanner are
    validated and reported
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要确保扫描器发现的所有漏洞都经过验证并报告
- en: There is a need to also scope the entire application by understanding all the
    inter-dependencies and ensure that endpoints are well protected, since there will
    be times when the backend applications, such as support, will not be made available
    to bug bounty hunters, but will be in a client-initiated assessment
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还需要确定整个应用程序的范围，了解所有相互依赖关系，并确保端点受到良好的保护，因为有时后端应用程序（如支持）可能不会向漏洞赏金猎人提供，但会在客户发起的评估中提供。
- en: '**Common points in both the mindsets**:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**两种思维方式的共同点**：'
- en: Must have the presence of mind to chain multiple vulnerabilities and cause a
    high impact on the underlying application
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须有头脑存在，以链接多个漏洞并对基础应用程序造成严重影响
- en: Also, ensure that the attacker is aware of all the endpoints of that particular
    application
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还要确保攻击者了解特定应用程序的所有端点
- en: Scoping of the entire application's presence and testing all the endpoints to
    find flaws
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定整个应用程序的存在并测试所有端点以查找缺陷
- en: Take a moment to think about the differences between the two approaches. I'm
    sure you will agree that there needs to be two totally different mindsets while
    performing the pentest.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 花点时间思考一下这两种方法之间的区别。我相信您会同意，在执行渗透测试时需要有两种完全不同的思维方式。
- en: Initiating a penetration test
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动渗透测试
- en: 'An application penetration test is always said to be incomplete if it does
    not do the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不执行以下操作，应用程序渗透测试通常被认为是不完整的：
- en: Following the standard methodology of performing recon
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循执行侦察的标准方法
- en: Enumerating functionality
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 枚举功能
- en: Testing individual parameters
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试单个参数
- en: Creating test cases
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建测试用例
- en: Performing non-invasive exploitation
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行非侵入式利用
- en: Providing a report that talks about the issue
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供关于问题的报告
- en: Implementing steps to reproduce, proof of concept code, and possible mitigation
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施重现步骤，概念验证代码和可能的缓解措施
- en: During my career, on numerous occasions, I have come across security consulting
    companies or independent professionals that are known to run an automated scanner
    that detects only a handful of vulnerabilities and almost always does not discover
    logical issues. These vulnerabilities are then exploited with a half-baked exploit
    ...
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的职业生涯中，我多次遇到安全咨询公司或独立专业人士，他们通常运行自动扫描程序，仅检测到少数漏洞，几乎总是无法发现逻辑问题。然后这些漏洞会被利用，但是...
- en: Types and features
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型和特征
- en: 'Burp Suite comes with the following set of inbuilt tools to ease the life of
    every penetration tester:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite配备了以下一组内置工具，以便于每个渗透测试人员的工作：
- en: '**Scanner**: Helps in testing the website automatically for content and vulnerabilities.
    It has an active and a passive mode, which can be toggled and configured by the
    user.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扫描器**：帮助自动测试网站的内容和漏洞。它有主动和被动模式，可以由用户切换和配置。'
- en: '**Intruder**: This allows the user to make certain changes in a captured request
    and through certain modifications the user can automate the task with brute force
    by passing different parameter values at every request.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**入侵者**：这允许用户对捕获的请求进行某些更改，并通过某些修改自动化任务，通过在每个请求中传递不同的参数值来进行暴力破解。'
- en: '**Repeater**: This feature allows the user to modify header values on the go
    and send requests to the application server over and over again.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重复器**：此功能允许用户即时修改标头值并多次向应用服务器发送请求。'
- en: '**Collaborator client**: This is a very interesting feature provided by Burp.
    It allows the user to check for out-of-band vulnerabilities. These are really
    hot vulnerabilities, as they are not easy to find.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协作客户端**：这是Burp提供的一个非常有趣的功能。它允许用户检查带外漏洞。这些漏洞非常热门，因为它们不容易找到。'
- en: '**Clickbandit**: This feature allows the user to create **clickjacking** pages
    against vulnerable applications.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Clickbandit**：此功能允许用户针对易受攻击的应用程序创建**点击劫持**页面。'
- en: '**Sequencer**: The sequencer feature enables the user to analyze the randomness
    of the application''s cookie generation mechanism; it gives the user a very detailed
    analysis of the randomness or predictability of the session.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**顺序器**：顺序器功能使用户能够分析应用程序的cookie生成机制的随机性；它为用户提供了对会话的随机性或可预测性的非常详细的分析。'
- en: '**Decoder**: This allows the user to check for any type of encoding and allows
    the user to decode it to clear text and the other way around.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解码器**：这允许用户检查任何类型的编码，并允许用户将其解码为纯文本，反之亦然。'
- en: '**Comparer**: This feature allows the user to compare responses for two or
    more requests to find differences in them.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**比较器**：此功能允许用户比较两个或多个请求的响应，以找出它们之间的差异。'
- en: 'Let''s look at the following low-level diagram of Burp Suite:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下Burp Suite的以下低级图表：
- en: '![](img/0eb70f80-636b-42a1-972c-fba1af176453.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0eb70f80-636b-42a1-972c-fba1af176453.png)'
- en: 'You can see the tool segregation in the following three sections:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下三个部分中看到工具的分离：
- en: '**Recon and Analysis**'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重建和分析**'
- en: '**Vulnerability Detection and Exploitation**'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**漏洞检测和利用**'
- en: '**Tool Configuration**'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具配置**'
- en: The preceding diagram gives you a pretty good idea of how the requests can be
    handled. Once the request is parsed, the tool carries out active spidering and
    active discovery, as well as allowing the user to do custom discovery in the recon
    and analysis phase. While this is ongoing, the tool actively puts all the information
    in the HTTP history and sitemap for later use. Once this information is gathered,
    a user can send any particular request to the repeater, intruder, or scanner.
    The scanner can be fed with the entire website post-crawl as well.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 上图给出了如何处理请求的很好的想法。一旦请求被解析，工具将进行主动的蜘蛛爬行和主动的发现，同时允许用户在重建和分析阶段进行自定义发现。在此过程中，工具会将所有信息主动放入HTTP历史记录和站点地图以供以后使用。收集到这些信息后，用户可以将任何特定请求发送到重复器、入侵者或扫描器。扫描器可以在整个网站爬行后进行输入。
- en: 'The tool configuration will allow the user to manage authentication, session
    handling, task scheduling, and various other tasks. The proxy is the core of the
    Burp Suite mechanism.  Burp Suite Scanner is an all-in-one automation kit for
    performing a pentest. It does everything, right from discovering content up to
    finding vulnerabilities. There are many more plugins that you can make use of
    to enhance the scanning results. We will talk about those plugins in later chapters.
    The Burp Scanner comprises mainly the two following parts: one is the crawl for
    content and the other is audit:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 工具配置将允许用户管理身份验证、会话处理、任务调度和各种其他任务。代理是Burp Suite机制的核心。Burp Suite扫描器是执行渗透测试的一体化自动化工具包。它可以从发现内容到发现漏洞等一切。还有许多插件可以用来增强扫描结果。我们将在后面的章节中讨论这些插件。Burp扫描器主要包括两个部分：一个是内容爬行，另一个是审计：
- en: '**Crawl for content**: The Burp crawler navigates across the application almost
    like a real user; it submits inputs, forms, and also captures the links and creates
    a complete sitemap of the application. It shows what is found and what did not
    return a response.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内容爬行**：Burp爬虫几乎像真实用户一样浏览应用程序；它提交输入、表单，并捕获链接并创建应用程序的完整站点地图。它显示了找到的内容以及未返回响应的内容。'
- en: '**Audit**: This is the actual scanner that will fuzz all the parameters to
    determine if there is a vulnerability in the application or not. It can be optimized
    by the user for better performance.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**审计**：这是实际的扫描器，将模糊所有参数以确定应用程序中是否存在漏洞。用户可以优化它以获得更好的性能。'
- en: Now that we are familiar with the types and features of Burp Suite, we will
    look into the crawling mechanism to catalog the contents of the application.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们熟悉了Burp Suite的类型和功能，我们将深入研究目录应用程序内容的爬行机制。
- en: Crawling
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 爬行
- en: I want to emphasize here that Burp has an amazing crawling mechanism to map
    the site structure with the closest possible accuracy. Crawling may seem to be
    a simple task, but with modern dynamic applications it is not. As pentesters,
    we have always witnessed the scanners going in huge loops in the crawling phase
    due to the URL scheme implementations, and the scan never seems to finish, especially
    when you are testing a shopping cart. It is really frustrating when such things
    happen, because then you have to rely on completely manual strategies. Burp, on
    the other hand, has a very smart approach. The crawler of Burp mimics the way
    a user would browse the application on the browser. It simulates user clicks,
    navigation, and input submissions, ...
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我想在这里强调一点，Burp具有惊人的爬行机制，可以以最接近的准确度映射站点结构。爬行可能看起来是一个简单的任务，但对于现代动态应用程序来说并非如此。作为渗透测试人员，我们总是看到扫描器在爬行阶段由于URL方案的实现而陷入巨大的循环中，扫描似乎永远无法完成，特别是在测试购物车时。当发生这种情况时，真的很令人沮丧，因为那时你必须依赖完全手动的策略。另一方面，Burp采取了非常聪明的方法。Burp的爬虫模拟了用户在浏览器上浏览应用程序的方式。它模拟用户点击、导航和输入提交，...
- en: Why Burp Suite Scanner?
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择Burp Suite扫描器？
- en: Now that we have established the basic understanding of how robust the Burp
    crawler is, it's time to understand why Burp Scanner is the go-to scanner for
    any pentest. Most traditional scanners usually fuzz the input fields, check the
    response, and determine if there is a vulnerability or not. But what if the application
    has certain rules, like, what if the application has enforced dynamic CSRF for
    every request? What if the application is a very dynamic application that serves
    different content for the same URL/page based on states, or what if the application
    invalidates the user on a malformed request? Worry not, because Burp already treats
    this differently and understands the underlying logic, enabling us with an optimized
    scan.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经建立了对Burp爬虫的基本理解，是时候了解为什么Burp扫描器是任何渗透测试的首选扫描器了。大多数传统扫描器通常会模糊输入字段，检查响应，并确定是否存在漏洞。但是，如果应用程序有某些规则，比如，如果应用程序对每个请求强制执行动态CSRF呢？如果应用程序是一个非常动态的应用程序，根据状态为相同的URL/页面提供不同的内容，或者如果应用程序在发生格式错误的请求时使用户无效呢？不用担心，因为Burp已经对此进行了不同处理，并理解了底层逻辑，使我们能够进行优化扫描。
- en: Auditor/Scanner
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审计员/扫描器
- en: 'Let''s go ahead and understand the Burp Audit/Scanner rules and mechanism.
    Burp Auditor is mainly divided into the three following core categories:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续了解Burp审计/扫描规则和机制。Burp审计器主要分为以下三个核心类别：
- en: Passive phase
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 被动阶段
- en: Active phase
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主动阶段
- en: JavaScript analysis phase
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript分析阶段
- en: This allows Burp to actively spot and exploit functions that are stored and
    returned to the user in response to input. It also helps to avoid duplication
    by handling frequently occurring issues and insertion points in an optimal manner.
    Also, it effectively makes use of the system resources by executing work in parallel.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得Burp能够主动发现和利用存储并返回给用户的功能，以响应输入。它还通过以最佳方式处理频繁发生的问题和插入点来避免重复。此外，它通过并行执行工作有效地利用系统资源。
- en: 'Burp Auditor reports tons of issues, widely ranging into the following categories:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Burp审计器报告了大量问题，广泛涵盖以下类别：
- en: '**Passive**: This is a non-intrusive audit that does analysis purely on the
    basis of the request and response received by a normal ...'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**被动**：这是一种非侵入式的审计，纯粹基于接收到的请求和响应进行分析...'
- en: Understanding the insertion points
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解插入点
- en: 'Burp Scanner is a very efficient scanner, as it targets various insertion points.
    It targets the input fields, a set of headers, such as cookie, referrer, user
    agent, and so on. Burp Scanner analyzes the targets individually by sending payloads
    individually to see how the application handles the payloads. A better understanding
    to see the insertion points is as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Burp扫描器是一个非常高效的扫描器，因为它针对各种插入点。它针对输入字段、一组头部，如cookie、引用者、用户代理等。Burp扫描器通过将有效载荷单独发送到目标来单独分析目标，以查看应用程序如何处理有效载荷。以下是更好地了解插入点的方法：
- en: '![](img/077432c3-6153-4588-baa0-f6b01ea0bb0d.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/077432c3-6153-4588-baa0-f6b01ea0bb0d.png)'
- en: 'Burp also handles data encoding for various parameters. It understands the
    parameter in use and any encoding if it follows. Once it detects the encoding,
    it fuzzes the parameter by fuzzing the payloads by encoding them as shown in the
    following screenshot. For example, to standard inputs, it passes a normal payload:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Burp还处理各种参数的数据编码。它了解正在使用的参数以及其后的任何编码。一旦检测到编码，它就会通过对有效载荷进行编码来模糊参数，如下图所示。例如，对于标准输入，它会传递一个正常的有效载荷：
- en: '![](img/d1e06ea7-b1a7-4174-b474-8b94d8adced9.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d1e06ea7-b1a7-4174-b474-8b94d8adced9.png)'
- en: 'For a JSON parameter, it fuzzes with a different payload:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于JSON参数，它使用不同的有效载荷进行模糊处理：
- en: '![](img/d90588bc-3595-43d1-b284-be8b42cbe2cd.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d90588bc-3595-43d1-b284-be8b42cbe2cd.png)'
- en: 'For XML it passes a different payload:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 对于XML，它传递不同的有效载荷：
- en: '![](img/49559201-30d8-4aa8-83ec-55cf89b60920.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/49559201-30d8-4aa8-83ec-55cf89b60920.png)'
- en: 'If the application is using a different encoding, such as base64, Burp automatically
    tries to detect the encoding being used and modifies the payload accordingly:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序使用不同的编码，如base64，Burp会自动尝试检测正在使用的编码并相应地修改有效载荷：
- en: '![](img/220ceb8c-6af1-44b6-b639-067641221ee9.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/220ceb8c-6af1-44b6-b639-067641221ee9.png)'
- en: 'If the application is using nested encoding, Burp tries to detect this behavior
    and creates payloads accordingly to help testing for vulnerabilities:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序使用嵌套编码，Burp会尝试检测此行为并相应地创建有效载荷，以帮助测试漏洞：
- en: '![](img/4c85b5af-8dce-4c66-99b5-481c5f9b80b3.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4c85b5af-8dce-4c66-99b5-481c5f9b80b3.png)'
- en: 'Also as we discussed earlier, Burp manipulates the location of the parameters
    by trying to pass them in different locations as a `POST`, `GET` request, adding
    the values to the headers, and fuzzing them. This is done in an attempt to bypass
    the web application firewall and to try to send the parameter to the particular
    application function:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 还有我们之前讨论过的，Burp通过尝试将参数传递到不同位置，如`POST`、`GET`请求，将值添加到头部，并对其进行模糊处理，来操纵参数的位置。这是为了绕过Web应用程序防火墙并尝试将参数发送到特定的应用程序功能：
- en: '![](img/cec64ad6-fa35-4459-a1fa-75cceb967b30.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cec64ad6-fa35-4459-a1fa-75cceb967b30.png)'
- en: These are all the different styles and mechanisms that Burp follows to help
    perform scanning over the application. The core question here is, how does it
    scan and maintain a valid session if additional security is put in place? Well,
    we have good news; Burp Scanner crawls to every request from the root node and
    then tests the request depending on the context of the application.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是Burp用来帮助对应用程序进行扫描的不同样式和机制。这里的核心问题是，它如何扫描并维护有效的会话，如果额外的安全措施已经放置？好消息是，Burp扫描器从根节点爬到每个请求，然后根据应用程序的上下文测试请求。
- en: 'Burp Suite satisfies the following conditions while traversing from node to
    node:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite在从节点到节点遍历时满足以下条件：
- en: Direct testing if there are no tokens, same tokens, or CSRF in cookies
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接测试是否在cookie中存在令牌、相同的令牌或CSRF
- en: Traversal from the root node to the request path in case of single CSRF tokens
    and single-use tokens
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在单个CSRF令牌和单次使用令牌的情况下，从根节点到请求路径的遍历
- en: '![](img/17f652e9-b7fb-461f-b220-148c927ff3c7.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17f652e9-b7fb-461f-b220-148c927ff3c7.png)'
- en: 'The preceding diagram shows the heuristic crawl; if you need to reach a particular
    request to pentest, there are three other request pages from the root node, Burp
    will travel through all those pages and reach the target page, just like a simulation
    of a real-world user. How does this help? Well, this helps in testing tight applications
    that use a per request CSRF token. Burp is able to figure out the dependencies
    of the CSRF tokens and perform an efficient scan by traversing to the target request
    right from the root and taking the CSRF from the response and adding it to the
    next request, as shown in the following diagram:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图表显示了启发式爬行；如果您需要到达特定请求进行渗透测试，根节点有三个其他请求页面，Burp将遍历所有这些页面并到达目标页面，就像模拟真实用户一样。这有什么帮助？这有助于测试使用每个请求CSRF令牌的严格应用程序。Burp能够找出CSRF令牌的依赖关系，并通过从根节点遍历到目标请求并从响应中获取CSRF，然后将其添加到下一个请求来执行高效的扫描，如下图所示：
- en: '![](img/a6808c27-3efa-4d1c-8991-e1ec0e2fb6ce.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6808c27-3efa-4d1c-8991-e1ec0e2fb6ce.png)'
- en: 'You might also wonder how the session handling is managed if the application
    times out, or the session times out, or even if the session invalidates, right?
    Burp manages a timeline. It makes a timestamp and validates if the session is
    still valid. Once it validates, it sets a marker and proceeds with other tests,
    and then, when it comes to a timeout condition or an invalid session, it goes
    back to the previous marker and begins the test again, so as to give us an exact
    accurate pentest result covering all the parameters. The same reference can be
    understood from the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还想知道如果应用程序超时，会如何管理会话处理，或者会话超时，甚至会话失效，对吗？Burp管理一个时间轴。它会创建一个时间戳并验证会话是否仍然有效。一旦验证，它会设置一个标记并进行其他测试，然后，当涉及到超时条件或无效会话时，它会返回到先前的标记并重新开始测试，以便给我们一个准确的渗透测试结果，涵盖所有参数。可以从以下截图中了解相同的参考信息：
- en: '![](img/8d80cce4-4cec-4cf1-8da2-ac7e014c73c5.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d80cce4-4cec-4cf1-8da2-ac7e014c73c5.png)'
- en: 'To sum it up, Scanner does the following things:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，扫描器会做以下几件事情：
- en: It automatically manages the additional security settings and performs the fuzzing,
    such as handling the CSRF token types
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它会自动管理额外的安全设置并执行模糊测试，比如处理CSRF令牌类型
- en: It manages encoding and edits the attack payloads accordingly
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它管理编码并相应地编辑攻击有效载荷
- en: It even performs nested fuzzing by double-encoding payloads
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它甚至通过双重编码有效载荷执行嵌套模糊测试
- en: It follows a snapshot-based approach to perform a scan
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它遵循基于快照的方法来执行扫描
- en: It also ensures that parameters are fuzzed from `POST` to `GET`, or even pushes
    them in the headers in an attempt to execute payloads
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它还确保参数从`POST`到`GET`进行模糊测试，甚至将它们推送到标头中，以尝试执行有效载荷
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This covers the complete groundwork of the Burp Scanner and crawler, giving
    us a complete idea of how the tool works and performs a scan to give an accurate
    result in different scenarios of web applications. Now, in the next chapter, we
    will start with the stages necessary for an application penetration testing.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这涵盖了Burp扫描器和爬虫的完整基础，让我们完全了解工具的工作方式，并在不同的Web应用程序场景中执行扫描，以给出准确的结果。现在，在下一章中，我们将开始进行应用程序渗透测试所需的阶段。
