- en: Reversing Various File Types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逆向不同类型的文件
- en: So far, we have been dealing with binary executables. In this chapter, we will
    also look at other ways in which code can be executed. Visiting websites (HTML)
    and receiving emails (that have documents attached to them) are some of the mediums
    where malware can easily enter a target system.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在处理二进制可执行文件。在本章中，我们还将查看代码执行的其他方式。访问网站（HTML）和接收包含文档的电子邮件是恶意软件轻松进入目标系统的一些途径。
- en: 'In this chapter, we will learn about the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下主题：
- en: Debugging scripts in HTML
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 HTML 中调试脚本
- en: Understanding Macro in Office documents
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Office 文档中的宏
- en: Performing PDF analysis
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行 PDF 分析
- en: SWF analysis
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SWF 分析
- en: Analysis of HTML scripts
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML 脚本分析
- en: Almost every website we visit contains scripts. Most commonly, it contains JavaScript
    code that is triggered by clicking on the OK button on a website or by those artistic
    bubbles and stars that roam around with the mouse pointer. JavaScript is one of
    the most powerful tools that can be used by a site developer. It can be used to
    control elements that an internet browser contains.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎我们访问的每个网站都包含脚本。最常见的是包含 JavaScript 代码，这些代码通常会在点击网站上的“OK”按钮时触发，或者是在鼠标指针周围游动的那些艺术泡泡和星星。JavaScript
    是站点开发者可以使用的最强大工具之一。它可以控制互联网浏览器所包含的元素。
- en: Besides JavaScript, Visual Basic scripts (VBScripts) can also be embedded in
    HTML websites. However, VBScript has been disabled by default in recent web browsers.
    This is due to the fact that VBScript has been exposed to a lot of vulnerabilities
    in the past. In addition, JavaScript is the default language used by many internet
    browsers.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 JavaScript，Visual Basic 脚本（VBScripts）也可以嵌入到 HTML 网站中。然而，VBScript 在最近的网络浏览器中已被默认禁用。这是因为
    VBScript 在过去曾暴露出许多安全漏洞。此外，JavaScript 是许多互联网浏览器默认使用的语言。
- en: There are two sides for a website to work, that is, the server side and the
    client side. When visiting a website, we are looking at the client side page.
    All backend scripts are running at the server side. For example, when visiting
    a website, the server-side programs send the HTML contents, including text, scripts,
    images, Java applets, and flash files. Only the browser elements, like HTML, JavaScript,
    Java applets, and SWF flash, that can be supported by internet browsers, are the
    objects that are crafted and sent by server-side programs. In essence, what we
    can analyze are these browser elements.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 网站的工作有两个方面，即服务器端和客户端。当访问一个网站时，我们看到的是客户端页面。所有后台脚本都在服务器端运行。例如，当访问一个网站时，服务器端程序发送
    HTML 内容，包括文本、脚本、图像、Java 小应用程序和 Flash 文件。只有浏览器元素，如 HTML、JavaScript、Java 小应用程序和
    SWF Flash，能够被互联网浏览器支持，才是服务器端程序创建并发送的对象。从本质上讲，我们可以分析的就是这些浏览器元素。
- en: Fortunately, scripts are readable text files. We can perform static analysis
    for HTML scripts. But like any other code, reversing requires that we have learn
    scripting language used.  The bottom line is, we need to learn the basics of the
    JavaScript programming language.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，脚本是可读的文本文件。我们可以对 HTML 脚本进行静态分析。但像其他代码一样，逆向工程需要我们了解所使用的脚本语言。归根结底，我们需要学习
    JavaScript 编程语言的基础。
- en: Let's try reversing a simple HTML file. You can download this HTML file from
    the following link: [https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo_01.html](https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo_01.html).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试逆向一个简单的 HTML 文件。你可以通过以下链接下载此 HTML 文件：[https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo_01.html](https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo_01.html)。
- en: Only do this if you have time. When reversing a HTML file, it is recommended
    that you set it up to run as though it's being viewed in a website and not as
    an HTML file.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在你有时间的时候才做这个。当逆向 HTML 文件时，建议你设置它的运行方式，像是在网站中查看，而不是作为一个 HTML 文件。
- en: 'Using a text editor, such as Notepad, we can perform static analysis on the
    HTML file. Other text editors, such as Notepad++ ([https://notepad-plus-plus.org/](https://notepad-plus-plus.org/)),
    would be better since it can show script syntax in color. This helps us to distinguish
    between the script functions from the data, as shown in the following screenshot:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用文本编辑器，如记事本，我们可以对 HTML 文件进行静态分析。其他文本编辑器，如 Notepad++ ([https://notepad-plus-plus.org/](https://notepad-plus-plus.org/))，会更好，因为它可以显示脚本语法的颜色。这有助于我们区分脚本函数和数据，如以下截图所示：
- en: '![](img/8400c6b3-fd76-4107-a91f-f33dfac949d6.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8400c6b3-fd76-4107-a91f-f33dfac949d6.png)'
- en: 'To understand this code, a lot of references about HTML programming are available
    in the internet. One of these reference sites is [https://www.w3schools.com/html/default.asp](https://www.w3schools.com/html/default.asp).
    What we are after here are the scripts that are defined in the `script` tags.
    There are a total of three JavaScript script codes here. The first script contains
    the following code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解这段代码，互联网上有很多关于 HTML 编程的参考资料。以下是其中一个参考网站：[https://www.w3schools.com/html/default.asp](https://www.w3schools.com/html/default.asp)。我们需要关注的是在
    `script` 标签内定义的脚本。在这里共有三个 JavaScript 脚本代码。第一个脚本包含以下代码：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `alert` function is used to display a message box. The message should be
    enclosed with quotes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`alert` 函数用于显示消息框。消息内容应放在引号内。'
- en: 'The second script contains the following code:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个脚本包含以下代码：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Again, the script displays a message, and then assigns the value `1` to variable
    `x` and the value `2` to variable `y`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，脚本显示一个消息，然后将 `1` 赋值给变量 `x`，将 `2` 赋值给变量 `y`。
- en: 'The last script contains the following code:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个脚本包含以下代码：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This shows another message. This time, the message is the sum of the `x` and
    `y` variables, which should give us the value of `3`. Even with the script code
    being located in separate tags, values in variables from the last running script
    should be reflected in succeeding scripts.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了另一个消息。这次，消息是 `x` 和 `y` 变量的和，结果应该是 `3`。即使脚本代码位于不同的标签中，最后运行的脚本中的变量值也应该会在后续脚本中得到反映。
- en: To prove this behavior, let's dynamically analyze the file by running it in
    an internet browser.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了证明这个行为，让我们通过在浏览器中运行该文件来动态分析它。
- en: 'Open Internet Explorer. We can also use Firefox or Chrome. Drag and drop `demo_01.html`
    into Internet Explorer. This should show the following message box once it has
    loaded:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 Internet Explorer。我们也可以使用 Firefox 或 Chrome。将 `demo_01.html` 文件拖放到 Internet
    Explorer 中。加载完成后，应该会显示以下消息框：
- en: '![](img/793c08d8-e89c-4abb-91a3-32671a4d7e3a.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/793c08d8-e89c-4abb-91a3-32671a4d7e3a.png)'
- en: 'The message may not show up if the internet browser has disabled running JavaScript
    content. Usually, a security message appears, asking if we want to allow running
    script codes. Just allow the script to run:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果浏览器禁用了 JavaScript 内容的运行，消息可能不会显示。通常会弹出安全提示，询问是否允许运行脚本代码。只需允许脚本运行即可：
- en: '![](img/2c01113e-ec14-4a8a-8b92-e10c70d8bc02.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c01113e-ec14-4a8a-8b92-e10c70d8bc02.png)'
- en: 'The following message boxes will come up afterwards:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 随后将弹出以下消息框：
- en: '![](img/8310cfad-67c5-4555-b11d-139287e004a7.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8310cfad-67c5-4555-b11d-139287e004a7.png)'
- en: 'Now that the page has completely been loaded, press `F12` to bring up the debugger
    console. Select the Debugger pane. This should show the HTML script, as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在页面已经完全加载，按 `F12` 打开调试器控制台。选择调试器面板。这时应该会显示 HTML 脚本，如下所示：
- en: '![](img/c22f722f-bf35-4c83-b266-aa8db26d201c.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c22f722f-bf35-4c83-b266-aa8db26d201c.png)'
- en: 'In the debugger, place a breakpoint at line `3`, which is the first `alert`
    function. To place a breakpoint, click on the empty gray space at the left of
    the line number. This should create a red dot that indicates a breakpoint line.
    The following screenshot shows all three scripts with their first lines marked
    with a breakpoint:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试器中，将断点放在第 `3` 行，这是第一个 `alert` 函数。要设置断点，请点击行号左侧的空白区域。这样应该会创建一个红点，表示断点行。以下截图展示了三个脚本及其第一行标记的断点：
- en: '![](img/5165e4c7-5bb2-4907-bdfe-0ead3e9ab6f3.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5165e4c7-5bb2-4907-bdfe-0ead3e9ab6f3.png)'
- en: 'Refresh the browser by focusing on the internet browser''s page and pressing
    F5\. We may end up debugging the `browsertools` script, which is an Internet Explorer
    initialization script. This is shown in the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将焦点放在浏览器页面上并按下 F5 键来刷新浏览器。我们可能会调试 `browsertools` 脚本，这是一个 Internet Explorer
    初始化脚本。以下截图展示了这一过程：
- en: '![](img/3c29d19e-0d88-4e81-8c0b-5e72700da6e6.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c29d19e-0d88-4e81-8c0b-5e72700da6e6.png)'
- en: 'Just press *F5* again to make the debugger continue until we reach our breakpoint.
    We should now be at the first `alert` function, as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 再次按下 *F5* 键，让调试器继续执行，直到我们到达断点。此时，我们应该已经到达第一个 `alert` 函数，如下所示：
- en: '![](img/68b3b5b9-724f-4ab6-a047-9a324813aea8.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/68b3b5b9-724f-4ab6-a047-9a324813aea8.png)'
- en: 'We can press *F11* to step into or F10 to Step over the script line. Doing
    so should invoke the first message box. Continue pressing *F10* to move on to
    the following script lines. The next script is another `alert` function:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按 *F11* 键进入脚本，或按 F10 键跳过当前行。这样做应该会弹出第一个消息框。继续按 *F10* 键，跳过接下来的脚本行。下一个脚本是另一个
    `alert` 函数：
- en: '![](img/391d2290-1b37-4cdc-9c1f-95d7208c7c17.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/391d2290-1b37-4cdc-9c1f-95d7208c7c17.png)'
- en: 'The following lines assign `1` to `x` and `2` to `y`. We can monitor what happens
    to these variables by adding these in the watch list, which is located in the
    right-hand pane. Click on Add watch to add the variables that we can monitor:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下几行将`1`赋值给`x`，将`2`赋值给`y`。我们可以通过将这些变量添加到监视列表中来监控这些变量的变化，监视列表位于右侧面板。点击“添加监视”来添加我们可以监控的变量：
- en: '![](img/9959902b-a48d-4e00-b606-ecd5e7ed87df.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9959902b-a48d-4e00-b606-ecd5e7ed87df.png)'
- en: The last function is another `alert` function that displays the sum of `x` and
    `y`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的函数是另一个`alert`函数，用于显示`x`和`y`的和。
- en: Let's try this with `demo_02.html` ([https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo_02.html](https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo_02.html)).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试用`demo_02.html` ([https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo_02.html](https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo_02.html))。
- en: 'If we debug this, it performs the same behavior that we encountered in `demo_01.html`.
    The difference is that it looks obfuscated when we look at it from the text editor:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们调试这个，它执行的行为与我们在`demo_01.html`中遇到的一样。不同之处在于，当我们从文本编辑器查看时，它看起来是被混淆的：
- en: '![](img/e1c8ec6c-635c-48b7-8e67-e685e9dceac2.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e1c8ec6c-635c-48b7-8e67-e685e9dceac2.png)'
- en: 'The message was converted to escaped format using each ASCII character''s hexadecimal
    equivalent. In the previous chapter, we learned about `Cyberchef`, an online tool
    that we can use to de-obfuscate these types of data. Since this type of data is
    escaped, we should use an `unescape` operation to decode this data. Using `Cyberchef`,
    search for the `unescape` operation, and then copy and paste the escaped data
    in the Input window. We should get a decoded output showing the exact text we
    saw in the messages, like so:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 消息被转换为转义格式，使用每个ASCII字符的十六进制等价物。在上一章中，我们学习了`Cyberchef`，这是一种在线工具，可以用来去混淆这些类型的数据。由于这些数据是转义的，我们应该使用`unescape`操作来解码这些数据。在`Cyberchef`中，搜索`unescape`操作，然后将转义数据复制并粘贴到输入窗口中。我们应该得到一个解码后的输出，显示我们在消息中看到的确切文本，像这样：
- en: '![](img/427c1c5d-1384-4fff-b2ed-5268018b0e84.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/427c1c5d-1384-4fff-b2ed-5268018b0e84.png)'
- en: Analyzing HTML scripts is not that complicated, especially since everything
    is almost human readable. All we need to understand is the syntax and the functions
    of the script language. Plus, this a way to dynamically analyze the script using
    debugging tools that are fortunately available in internet browsers.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 分析HTML脚本并不复杂，尤其是因为几乎所有内容都可以被人类读取。我们需要理解的只是语法和脚本语言的功能。此外，这是使用调试工具动态分析脚本的一种方法，而这些工具在网络浏览器中是可以使用的。
- en: MS Office macro analysis
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MS Office宏分析
- en: Microsoft Office has a way for automating simple tasks such as creating formatted
    tables or inserting letterheads. This is called an MS office macro. MS Office
    macro makes use of the Visual Basic for Application language, which uses the same
    language as Visual Basic scripts. However, these can be abused to do more like
    download a file, create files, make registry entries, and even delete files.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Office有一种方法可以自动化一些简单的任务，例如创建格式化的表格或插入信头。这叫做MS Office宏。MS Office宏利用了Visual
    Basic for Application语言，它与Visual Basic脚本使用相同的语言。然而，这些也可以被滥用来做更多的事情，比如下载文件、创建文件、添加注册表条目，甚至删除文件。
- en: First off, we need static tools to read information and extract the macro source
    from a given Office file. To open MS Office documents, we need to have Microsoft
    Office installed. The other tool that we could use would be OLE tools, which can
    be downloaded from [http://www.decalage.info/en/python/oletools](http://www.decalage.info/en/python/oletools).
    These set of tools are Python scripts, and will require Python 2.7 to be installed
    on your system. The Python installer can be downloaded from [https://www.python.org/](https://www.python.org/).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要静态工具来读取信息并从给定的Office文件中提取宏源代码。要打开MS Office文档，我们需要安装Microsoft Office。另一个可以使用的工具是OLE工具，可以从[http://www.decalage.info/en/python/oletools](http://www.decalage.info/en/python/oletools)下载。这些工具集是Python脚本，需要在系统上安装Python
    2.7。Python安装程序可以从[https://www.python.org/](https://www.python.org/)下载。
- en: 'The file we are going to analyze first is [https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo_01.doc](https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo_01.doc).
    Type in the following  code into the command line to use `olevba.py` on `demo_01.doc`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要分析的第一个文件是 [https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo_01.doc](https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo_01.doc)。在命令行中输入以下代码，使用
    `olevba.py` 分析 `demo_01.doc`：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This extracts information about the `VBA` source and the source itself:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这将提取有关`VBA`源代码及其源信息：
- en: '![](img/e8f7fba1-084f-4650-923a-565855c198cf.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e8f7fba1-084f-4650-923a-565855c198cf.png)'
- en: 'We can see from the preceding screenshot that the source has two subroutines:
    `autoopen()` and `autoclose()`. `olevba.py` also describes these subroutines that
    are tied to events when the document is opened and closed.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的截图中我们可以看到，源代码包含两个子程序：`autoopen()` 和 `autoclose()`。`olevba.py` 也描述了这些与文档打开和关闭时事件绑定的子程序。
- en: 'The source contains code that pops up messages. Now, let''s try to open the
    document in Microsoft Word. By doing this, we may end up with Microsoft Word showing
    us a security warning about the document containing code. Click on Enable Content
    so that we can see what the macro can do:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 该源包含弹出消息的代码。现在，让我们尝试在 Microsoft Word 中打开文档。通过这样做，我们可能会看到 Microsoft Word 显示有关文档包含代码的安全警告。点击启用内容，以便查看宏可以做什么：
- en: '![](img/eca37d63-1544-442d-80d5-13d76219cd24.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eca37d63-1544-442d-80d5-13d76219cd24.png)'
- en: 'The first message immediately appears:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个消息立刻出现：
- en: '![](img/c20cef93-1c9d-4f27-940c-19e1e85ac011.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c20cef93-1c9d-4f27-940c-19e1e85ac011.png)'
- en: 'To debug the code, we need to open up the VBA editor. Select View->Macro. This
    opens up the Macro dialog box where you can select any Macro name and click on
    the Edit button:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要调试代码，我们需要打开 VBA 编辑器。选择查看 -> 宏，这将打开宏对话框，您可以在其中选择任何宏名称并点击编辑按钮：
- en: '![](img/d85e2ad7-900b-4e53-b78a-3e92bad59322.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d85e2ad7-900b-4e53-b78a-3e92bad59322.png)'
- en: 'We are currently using Microsoft Office 2013, so the user interface for the
    `VBA` Editor may be different for other versions. In the `VBA` Editor, we should
    now see the source code. Pressing *F9* on a line of code enables or disables a
    breakpoint. Pressing *F8* does step debugging. *F5* is for continuing to run the
    code. We can start debugging from any of the subroutines. Select the Debug menu
    to view more debug features that are available:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当前使用的是 Microsoft Office 2013，因此 `VBA` 编辑器的用户界面在其他版本中可能有所不同。在 `VBA` 编辑器中，我们现在应该可以看到源代码。按下*F9*键可以启用或禁用断点。按*F8*键进行逐步调试。*F5*用于继续运行代码。我们可以从任何子程序开始调试。选择调试菜单查看更多可用的调试功能：
- en: '![](img/cad95591-5ef9-4628-964f-cbb259c98d68.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cad95591-5ef9-4628-964f-cbb259c98d68.png)'
- en: 'Closing the document will bring up the following message box:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭文档将弹出以下消息框：
- en: '![](img/088493d9-c2d0-422b-b0ec-7660b8ee92e7.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/088493d9-c2d0-422b-b0ec-7660b8ee92e7.png)'
- en: Now, try analyzing demo_02.doc. This will be quite a challenge since we will
    be looking at how the password can be derived.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尝试分析 demo_02.doc。由于我们将研究如何推导出密码，这将是一个相当大的挑战。
- en: Remember that the VBA Editor is the macro developer's console. This is where
    the macro program was developed and debugged. Thus, to reverse what we are looking
    for, we can manipulate the source code.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，VBA 编辑器是宏开发者的控制台。在这里，宏程序被开发和调试。因此，为了逆向我们正在寻找的内容，我们可以操作源代码。
- en: '![](img/fc26f00b-9f29-4ca6-aba5-8454c007590d.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fc26f00b-9f29-4ca6-aba5-8454c007590d.png)'
- en: The password for `demo_02.doc` can be found in the Summary section of this chapter.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`demo_02.doc`的密码可以在本章的摘要部分找到。'
- en: PDF file analysis
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PDF 文件分析
- en: PDF files have evolved to run specific actions and allow for the execution of
    JavaScript. For PDF analysis, what we can do is extract event information and
    analyze what the JavaScript will do. We can use Didier Stevens' PDF Tools to help
    us analyze PDFs. This toolset runs using Python, so we will again need that installed.
    PDF Tools can be downloaded from [https://blog.didierstevens.com/programs/pdf-tools/](https://blog.didierstevens.com/programs/pdf-tools/).
    If you go to the site, you will get a description about each tool in the package.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: PDF 文件已经发展到可以运行特定操作并允许执行 JavaScript。对于 PDF 分析，我们可以提取事件信息并分析 JavaScript 将执行的操作。我们可以使用
    Didier Stevens 的 PDF 工具集来帮助分析 PDF。这一工具集是基于 Python 的，因此我们需要安装 Python。PDF 工具可以从
    [https://blog.didierstevens.com/programs/pdf-tools/](https://blog.didierstevens.com/programs/pdf-tools/)
    下载。如果你访问该网站，可以看到有关每个工具的描述。
- en: 'Let''s try using the tool with [https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo_01.pdf](https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo_01.pdf).
    Using `pdfid.py`, execute the following line:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用工具分析 [https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo_01.pdf](https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo_01.pdf)。使用
    `pdfid.py` 执行以下命令：
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following screenshot shows the result of `pdfid` on `demo_01.pdf`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了 `pdfid` 在 `demo_01.pdf` 上的结果：
- en: '![](img/c87e5f46-607d-49a1-8c1e-4b249d4e3866.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c87e5f46-607d-49a1-8c1e-4b249d4e3866.png)'
- en: 'Here, we can see that there is JavaScript code embedded to it. Let''s now try
    the `pdf-parser.py` file so that we can extract more information. Some elements
    in the PDF file can be compressed and will not be readable. The `pdf-parser` tool
    is able to decompress these streams. Execute the following command to redirect
    output from `pdf-parser` to `demo_01.log`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到它嵌入了 JavaScript 代码。现在让我们尝试使用 `pdf-parser.py` 文件，以便提取更多信息。PDF 文件中的某些元素可能已压缩，无法读取。`pdf-parser`
    工具能够解压这些流。执行以下命令将 `pdf-parser` 的输出重定向到 `demo_01.log` 文件：
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output given by `pdf-parser` is basically the same as the contents of `demo_01.pdf`.
    The reason for this is that there were no PDF objects that got decompressed. If
    we look closer at the output, we can easily identify where the script code is:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`pdf-parser` 给出的输出与 `demo_01.pdf` 的内容基本相同。原因是没有 PDF 对象被解压缩。如果我们仔细查看输出内容，可以轻松识别出脚本代码的位置：'
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As a result, using Chrome as our PDF reader, the PDF displays the following
    message box:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使用 Chrome 作为我们的 PDF 阅读器时，PDF 会显示以下消息框：
- en: '![](img/e2713b44-0860-43f7-a0ca-b299af647cab.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e2713b44-0860-43f7-a0ca-b299af647cab.png)'
- en: 'To debug the JavaScript, we would need to copy this into a separate JavaScript
    or HTML file. We may also need to fix the syntax of running JavaScript operators.
    The JavaScript code from the PDF can be converted into the following HTML code:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要调试 JavaScript，我们需要将其复制到一个单独的 JavaScript 或 HTML 文件中。我们可能还需要修复运行 JavaScript 运算符的语法。PDF
    中的 JavaScript 代码可以转换为以下 HTML 代码：
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: SWF file analysis
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SWF 文件分析
- en: ShockWave Flash files can also contain code. Basically, flash files are legitimately
    written to follow a sequence of tasks. But just like any other code, it can be
    abused to carry out malicious activities.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: ShockWave Flash 文件也可以包含代码。基本上，Flash 文件是合法编写的，按照一系列任务的顺序执行。但就像任何其他代码一样，它也可能被滥用来执行恶意活动。
- en: The SWF file we are going to analyze can be downloaded from [https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo01.swf](https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo01.swf).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要分析的 SWF 文件可以从 [https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo01.swf](https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo01.swf)
    下载。
- en: 'The main tool used for analyzing SWF at the time of writing this book is the
    JPEXS SWF decompiler.  Besides this let''s first talk about other existing tools
    that are able to parse SWF files.  These tools are as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，用于分析 SWF 的主要工具是 JPEXS SWF 反编译器。除此之外，我们先来谈谈其他可以解析 SWF 文件的现有工具。这些工具如下：
- en: SWFTools
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SWFTools
- en: FLASM
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FLASM
- en: Flare
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flare
- en: XXXSWF
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XXXSWF
- en: SWFTools
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SWFTools
- en: 'SWFTools is a collection of tools for reading and building SWF files.  It can
    be downloaded from [http://www.swftools.org/](http://www.swftools.org/). To successfully
    install SWFTools, it should be run as administrator. The tools are used at the
    command line. There are two tools here that can extract information about the
    SWF file: `swfdump` and `swfextract`. Here''s what `swfdump` gives us:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: SWFTools 是一套用于读取和构建 SWF 文件的工具。它可以从 [http://www.swftools.org/](http://www.swftools.org/)
    下载。要成功安装 SWFTools，应该以管理员身份运行。工具在命令行中使用。这里有两个可以提取 SWF 文件信息的工具：`swfdump` 和 `swfextract`。这是
    `swfdump` 给出的结果：
- en: '![](img/67706c17-1b0a-4a38-a6d5-68e4716bf44b.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67706c17-1b0a-4a38-a6d5-68e4716bf44b.png)'
- en: 'The result tells us that the file is `zlib` compressed.  There is also a `DOABC`
    method labeled `Main`. The existence of a `DOABC` also means that there is an
    embedded action script. Using `HxD`, we can verify that the file is compressed.
    The magic header `CWS` indicates that the `SWF` is indeed compressed. An uncompressed
    `SWF` starts with `FWS` magic bytes:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 结果告诉我们该文件是 `zlib` 压缩的。还有一个名为 `Main` 的 `DOABC` 方法。`DOABC` 的存在也意味着嵌入了动作脚本。使用 `HxD`，我们可以验证文件是否被压缩。魔法头
    `CWS` 表明 `SWF` 文件确实是压缩的。未压缩的 `SWF` 文件以 `FWS` 魔法字节开头：
- en: '![](img/eaea745b-640e-4cec-98ce-e6b19cfd6033.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eaea745b-640e-4cec-98ce-e6b19cfd6033.png)'
- en: 'The other tool, `swfextract`, is capable of extracting embedded videos or images.
    `demo01.swf` doesn''t contain any media, as we can see from the following screenshot:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个工具，`swfextract`，能够提取嵌入的视频或图像。`demo01.swf`不包含任何媒体，正如我们从以下截图中看到的：
- en: '![](img/2aac9f59-b840-4499-a305-bcac91fd6b3c.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2aac9f59-b840-4499-a305-bcac91fd6b3c.png)'
- en: The other tools in `SWFTools` are used to build `SWFs` from PDFs, images, and
    videos.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`SWFTools`中的其他工具用于从PDF、图像和视频构建`SWF`文件。'
- en: FLASM
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FLASM
- en: '`FLASM` is a tool that is capable of decompressing and disassembling `SWF`
    files. It can be downloaded from [http://nowrap.de/flasm.html](http://nowrap.de/flasm.html).
    We decompressed `demo01.swf` using the `-x` parameter and got the following output:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`FLASM`是一个能够解压和反汇编`SWF`文件的工具。它可以从[http://nowrap.de/flasm.html](http://nowrap.de/flasm.html)下载。我们使用`-x`参数解压了`demo01.swf`，并得到了以下输出：'
- en: '![](img/68e3cd0e-2589-4d96-9fa3-78d09ef14c9d.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/68e3cd0e-2589-4d96-9fa3-78d09ef14c9d.png)'
- en: 'After that, we used the `-d` parameter to disassemble the file where it showed
    information about how the `SWF` was structured:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们使用`-d`参数反汇编文件，并显示了关于`SWF`结构的信息：
- en: '![](img/be362add-3b05-4592-ae32-06118d496de1.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/be362add-3b05-4592-ae32-06118d496de1.png)'
- en: We can't see any disassembled nor decompiled action scripts here.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里看不到任何反汇编或反编译的动作脚本。
- en: Flare
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flare
- en: 'This is a tool that is capable of decompiling ActionScript code. It can be
    downloaded from [http://nowrap.de/flare.html](http://nowrap.de/flare.html). However,
    it may not be able to fully support `AS2` and `AS3` code. Just pass the `SWF`
    file to the Flare tool and it will generate an `FLR` file. We can executed Flare
    using the following command:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个能够反编译ActionScript代码的工具。它可以从[http://nowrap.de/flare.html](http://nowrap.de/flare.html)下载。然而，它可能无法完全支持`AS2`和`AS3`代码。只需将`SWF`文件传递给Flare工具，它将生成一个`FLR`文件。我们可以使用以下命令执行Flare：
- en: '[PRE8]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The result placed in `demo01.flr` contained the following output:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 结果保存在`demo01.flr`中，包含以下输出：
- en: '[PRE9]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: It had the same result as `FLASM`. No action scripts were disassembled.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 它的结果与`FLASM`相同，没有反汇编任何动作脚本。
- en: XXXSWF
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XXXSWF
- en: 'This tool can be downloaded from [https://github.com/viper-framework/xxxswf](https://github.com/viper-framework/xxxswf).
    It is a Python script that accepts the following parameters:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具可以从[https://github.com/viper-framework/xxxswf](https://github.com/viper-framework/xxxswf)下载。它是一个Python脚本，接受以下参数：
- en: '[PRE10]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We tried using this tool with `demo01.swf`. After using the `-H` paramater,
    the tool tells us that it is compressed. We then decompressed the file using the
    `-d` option. This resulted in a decompressed `SWF` version in the `243781cd4047e8774c8125072de4edb1.swf`
    file. Finally, we used the `-H` parameter on the decompressed file:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们尝试使用这个工具处理`demo01.swf`。在使用`-H`参数后，工具告诉我们该文件已被压缩。然后我们使用`-d`选项解压了文件，得到了一个解压后的`SWF`版本，保存在`243781cd4047e8774c8125072de4edb1.swf`文件中。最后，我们对解压后的文件使用了`-H`参数：
- en: '![](img/eee59e0c-470b-4f4a-b0f5-631b81717f1d.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eee59e0c-470b-4f4a-b0f5-631b81717f1d.png)'
- en: So far, what comes in useful for this without the `yara` and `md5` features
    is its ability to search for embedded flash files. This comes in useful for detecting
    `SWF` malware with embedded SWFs in it.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在没有`yara`和`md5`功能的情况下，最有用的功能是它能够搜索嵌入的Flash文件。这在检测包含嵌入SWF的`SWF`恶意软件时非常有用。
- en: JPEXS SWF decompiler
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JPEXS SWF反编译器
- en: 'One of the most used tool for analyzing SWF files is the `JPEXS` SWF decompiler.
    Nightly builds can be downloaded from [https://github.com/jindrapetrik/jpexs-decompiler](https://github.com/jindrapetrik/jpexs-decompiler).
    This tool is capable of decompiling `ActionScript` that supports `AS3`. The following
    screenshot shows the `JPEXS` console:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的SWF文件分析工具之一是`JPEXS` SWF反编译器。夜间版本可以从[https://github.com/jindrapetrik/jpexs-decompiler](https://github.com/jindrapetrik/jpexs-decompiler)下载。该工具能够反编译支持`AS3`的`ActionScript`。以下截图显示了`JPEXS`控制台：
- en: '![](img/ce6cadd1-2d9e-49ad-82d9-c2264f2e853c.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ce6cadd1-2d9e-49ad-82d9-c2264f2e853c.png)'
- en: Besides being able to decompile, it has an interface that can be set up with
    Adobe Flash Player's debugger. After installing JPEXS, we need to download the
    *flash player projector content debugger *from [https://www.adobe.com/support/flashplayer/debug_downloads.html](https://www.adobe.com/support/flashplayer/debug_downloads.html).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 除了能够反编译，它还具有一个可以与Adobe Flash Player的调试器进行设置的界面。安装JPEXS后，我们需要从[https://www.adobe.com/support/flashplayer/debug_downloads.html](https://www.adobe.com/support/flashplayer/debug_downloads.html)下载*flash
    player projector内容调试器*。
- en: 'Open JPEXS and then select Settings->Advanced Settings->Paths. Then, browse
    to the downloaded flash executable to fill up the Flash Player projector content
    debugger path.  Click OK when you''re done:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 打开JPEXS，然后选择设置->高级设置->路径。接着，浏览到下载的Flash可执行文件，填写Flash Player投影仪内容调试器路径。完成后点击确定：
- en: '![](img/b430a73c-86f5-4389-b7dd-46c2fb6b552b.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b430a73c-86f5-4389-b7dd-46c2fb6b552b.png)'
- en: This is an important setup that enables us to debug the decompiled ActionCcript.
    You can also fill up the Flash Player projector path by downloading the Flash
    Player projector from [https://www.adobe.com/support/flashplayer/debug_downloads.html](https://www.adobe.com/support/flashplayer/debug_downloads.html).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个重要的设置，它使我们能够调试反编译后的ActionScript。你也可以通过从[https://www.adobe.com/support/flashplayer/debug_downloads.html](https://www.adobe.com/support/flashplayer/debug_downloads.html)下载Flash
    Player投影仪来填写Flash Player投影仪路径。
- en: 'Open the SWF file and expand the tree of objects in the left window pane. Select
    Main under the `scripts` object. This displays the decompiled ActionScript, as
    shown in the following screenshot:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 打开SWF文件并展开左侧窗口中的对象树。在`scripts`对象下选择Main。这样就会显示反编译后的ActionScript，如下图所示：
- en: '![](img/22c8ac6e-ac53-4d89-b5ca-2f321afa9799.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22c8ac6e-ac53-4d89-b5ca-2f321afa9799.png)'
- en: 'And here is the decompiled code for `demo01.swf`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是`demo01.swf`的反编译代码：
- en: '[PRE11]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Click the Debug button or *Ctrl+F5,* thisshould bring us to the debugger console.
    In the left-most window, the byte-code equivalent of the decompiled Actionscript
    is shown.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 点击调试按钮或*Ctrl+F5*，这应该会带我们进入调试控制台。在最左边的窗口中，显示的是反编译后的ActionScript的字节码等效物。
- en: '![](img/9ba58b85-ce3b-4411-b394-3025784551a9.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9ba58b85-ce3b-4411-b394-3025784551a9.png)'
- en: What the code does is create two TextFields containing text that gets displayed
    on the SWF display space.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的作用是创建两个TextFields，包含显示在SWF显示空间上的文本。
- en: '![](img/e783e061-46b4-4077-9b5c-6cc63af70c56.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e783e061-46b4-4077-9b5c-6cc63af70c56.png)'
- en: JPEXS is a tool that has the important feature we want to analyze code in a
    flash file.  It has a byte-code disassembler, source decompiler, and a debugger.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: JPEXS是一款具有我们希望用来分析Flash文件中代码的关键功能的工具。它具备字节码反汇编器、源代码反编译器和调试器。
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Analyzing various file types also uses the same concept as reversing. In this
    chapter, we learned about the scripting language that the file format is using.
    We could gather additional information if we were also inclined to understand
    the file's header and structure. We also learned that as long as executable code
    can be embedded into a file, there is a way to analyze it. It may not be dynamically
    analyzed easily, but at least static analysis can be performed.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 分析各种文件类型也采用与逆向工程相同的概念。在本章中，我们学习了文件格式所使用的脚本语言。如果我们有兴趣理解文件的头部和结构，我们还可以收集更多的信息。我们还了解到，只要可执行代码可以嵌入到文件中，就一定有方法可以分析它。虽然可能无法轻松进行动态分析，但至少可以进行静态分析。
- en: We tackled how to debug JavaScript that is embedded in HTML scripts. Virtually,
    we can analyze any website we visit. We also learned about the tools that we can
    use to extract macro code in Microsoft Office documents. It also happens that
    we can debug this macro code using the VBA Editor. We also looked at a variety
    of tools that we can use to extract JavaScript from a PDF file. Then we analyzed
    an SWF file using JPEXS, a powerful tool that has a disassembler, decompiler,
    and debugger.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了如何调试嵌入在HTML脚本中的JavaScript。实际上，我们可以分析我们访问的任何网站。我们还了解了可以用来提取Microsoft Office文档中宏代码的工具。恰好，我们也可以使用VBA编辑器调试这些宏代码。我们还研究了多种工具，用于从PDF文件中提取JavaScript代码。然后，我们使用JPEXS分析了SWF文件，这是一个强大的工具，具备反汇编器、反编译器和调试器。
- en: Reversing engineering software is a concept at hand. We research what the software
    is and how it works. We also get to learn the low-level language beneath the code
    that executes in the file. It may take time to learn this language, but it is
    worth the knowledge and experience that we gain from it.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 逆向工程软件是一个实践中的概念。我们研究软件是什么以及它是如何工作的。我们还学习了执行文件中代码背后的低级语言。学习这门语言可能需要时间，但从中获得的知识和经验是值得的。
- en: Have a fun day reversing!
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 祝你逆向工程愉快！
- en: P.S.  The password for `demo_02.doc` is burgersteak.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: P.S. `demo_02.doc`的密码是burgersteak。
- en: Further reading
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: '[https://www.w3schools.com/html/default.asp](https://www.w3schools.com/html/default.asp) :
    a good tutorial site for learning HTML scripting'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.w3schools.com/html/default.asp](https://www.w3schools.com/html/default.asp)：一个学习HTML脚本的优秀教程网站'
- en: '[http://www.javascriptobfuscator.com](http://www.javascriptobfuscator.com)
    [-](http://www.javascriptobfuscator.com) this is an online site that can obfuscate
    javascript code'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.javascriptobfuscator.com](http://www.javascriptobfuscator.com)
    [-](http://www.javascriptobfuscator.com) 这是一个可以混淆 JavaScript 代码的在线网站'
