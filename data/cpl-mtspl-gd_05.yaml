- en: Vulnerability Hunting with Metasploit
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit进行漏洞搜索
- en: 'In the last chapter, you learned various techniques of information gathering
    and enumeration. Now that we have gathered information about our target system,
    it''s time to check whether the target system is vulnerable and if we can exploit
    it in reality. In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您学习了各种信息收集和枚举技术。现在我们已经收集了有关目标系统的信息，是时候检查目标系统是否存在漏洞，以及我们是否可以在现实中利用它了。在本章中，我们将涵盖以下主题：
- en: Setting up the Metasploit database
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置Metasploit数据库
- en: Vulnerability scanning and exploiting
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 漏洞扫描和利用
- en: Performing NMAP and Nessus scans from within Metasploit
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Metasploit内执行NMAP和Nessus扫描
- en: Using Metasploit auxiliaries for vulnerability detection
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Metasploit辅助工具进行漏洞检测
- en: Auto-exploitation with `db_autopwn`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`db_autopwn`进行自动利用
- en: Exploring Metasploit’s post-exploitation capabilities
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索Metasploit的后渗透能力
- en: Managing the database
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理数据库
- en: As we have seen so far, the Metasploit Framework is a tightly coupled collection
    of various tools, utilities, and scripts that can be used to perform complex penetration
    testing tasks. While performing such tasks, a lot of data is generated in some
    form or the other. From the framework perspective, it is essential to store all
    data safely so that it can be reused efficiently whenever required. By default,
    the Metasploit Framework uses PostgreSQL database at the backend to store and
    retrieve all the required information.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到，Metasploit Framework是各种工具、实用程序和脚本的紧密集合，可用于执行复杂的渗透测试任务。在执行此类任务时，以某种形式生成了大量数据。从框架的角度来看，安全地存储所有数据以便在需要时有效地重用是至关重要的。默认情况下，Metasploit
    Framework使用后端的PostgreSQL数据库来存储和检索所有所需的信息。
- en: We will now see how to interact with the database to perform some trivial tasks
    and ensure that the database is correctly set up before we begin with the penetration
    testing activities.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看到如何与数据库交互执行一些琐碎的任务，并确保数据库在开始渗透测试活动之前已正确设置。
- en: 'For the initial setup, we will use the following command to set up the database:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于初始设置，我们将使用以下命令设置数据库：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This command will initiate the PostgreSQL database service on Kali Linux. This
    is necessary before we start with the `msfconsole` command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将在Kali Linux上启动PostgreSQL数据库服务。在使用`msfconsole`命令之前，这是必要的：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This command will initiate the Metasploit Framework database instance and is
    a one-time activity:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将启动Metasploit Framework数据库实例，这是一次性的活动：
- en: '![](img/173e3333-c162-4afe-b67c-ee236704465c.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/173e3333-c162-4afe-b67c-ee236704465c.jpg)'
- en: '`db_status`: Once we have started the PostgreSQL service and initiated `msfdb`,
    we can then get started with `msfconsole`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`db_status`：一旦我们启动了PostgreSQL服务并初始化了`msfdb`，我们就可以开始使用`msfconsole`：'
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `db_status` command will tell us whether the backend database has been
    successfully initialized and connected with `msfconsole`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`db_status`命令将告诉我们后端数据库是否已成功初始化并与`msfconsole`连接：'
- en: '![](img/31e64658-3faf-4e47-8c13-f637cc7a05e4.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/31e64658-3faf-4e47-8c13-f637cc7a05e4.png)'
- en: Work spaces
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作空间
- en: Let's assume you are working on multiple penetration testing assignments for
    various clients simultaneously. You certainly don't want the data from different
    clients to mix together. The ideal way would be to make logical compartments to
    store data for each assignment. Workspaces in the Metasploit Framework help us
    achieve this goal.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您同时为不同客户的多个渗透测试任务工作。您肯定不希望来自不同客户的数据混在一起。理想的方式是为每个任务创建逻辑隔间来存储数据。Metasploit
    Framework中的工作空间帮助我们实现这一目标。
- en: 'The following table shows some of the common commands related to managing workspaces:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了与管理工作空间相关的一些常用命令：
- en: '| **Sr. no.** | **Command** | **Purpose** |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| **Sr. no.** | **Command** | **Purpose** |'
- en: '| 1. | `workspace` | This lists all previously created workspaces within the
    Metasploit Framework |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 1. | `workspace` | 这将列出在Metasploit Framework中先前创建的所有工作空间 |'
- en: '| 2. | `workspace -h` | This lists help on all switches related to the `workspace`
    command |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 2. | `workspace -h` | 这将列出与`workspace`命令相关的所有开关的帮助信息 |'
- en: '| 3. | `workspace -a <name>` | This creates a new workspace with a specified
    `name` |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 3. | `workspace -a <name>` | 这将创建一个具有指定`name`的新工作空间 |'
- en: '| 4. | `workspace -d <name>` | This deletes the specified workspace |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 4. | `workspace -d <name>` | 这将删除指定的工作空间 |'
- en: '| 5. | `workspace <name>` | This switches the context of the workspace to the
    name specified |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 5. | `workspace <name>` | 这将切换工作空间的上下文到指定的名称 |'
- en: 'The following screenshot shows the usage of the `workspace` command with various
    switches:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了`workspace`命令与各种开关的用法：
- en: '![](img/d4d13bf6-98d9-41df-b630-f77fa5235dcd.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d4d13bf6-98d9-41df-b630-f77fa5235dcd.jpg)'
- en: Importing scans
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入扫描
- en: 'We already know how versatile the Metasploit Framework is and how well it integrates
    with other tools. The Metasploit Framework offers a very useful feature to import
    scan results from other tools such as NMAP and Nessus. The `db_import` command,
    as shown in the following screenshot, can be used to import scans into the Metasploit
    Framework:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经知道Metasploit Framework有多么多才多艺，以及它与其他工具的良好集成。Metasploit Framework提供了一个非常有用的功能，可以从其他工具（如NMAP和Nessus）导入扫描结果。如下截图所示，`db_import`命令可用于将扫描导入Metasploit
    Framework：
- en: '![](img/4205f333-e060-4ca0-bc5d-3572e047feb1.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4205f333-e060-4ca0-bc5d-3572e047feb1.jpg)'
- en: 'The `hosts` command: It''s quite possible that we have performed the NMAP scan
    for the entire subnet and imported the scan in the Metasploit Framework database.
    Now, we need to check which hosts were found alive during the scan. The `hosts`
    command, as shown in the following screenshot, lists all the hosts found during
    scans and imports:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hosts`命令：我们很可能已经对整个子网进行了NMAP扫描，并将扫描结果导入了Metasploit Framework数据库。现在，我们需要检查在扫描期间发现了哪些主机是活动的。如下截图所示，`hosts`命令列出了在扫描和导入期间发现的所有主机：'
- en: '![](img/179f098f-5ba5-4cbc-937f-d4e59fd7b863.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/179f098f-5ba5-4cbc-937f-d4e59fd7b863.jpg)'
- en: 'The `services` command: Once the NMAP scan results are imported into the database,
    we can query the database to filter out services that we might be interested in
    exploiting. The `services` command with appropriate parameters, as shown in the
    following screenshot, queries the database and filters out services:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`services`命令：一旦NMAP扫描结果被导入数据库，我们可以查询数据库，过滤出我们可能感兴趣的服务。`services`命令带有适当的参数，如下截图所示，查询数据库并过滤服务：'
- en: '![](img/6f7a171f-8eeb-49e3-a8ff-1c22df85f078.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6f7a171f-8eeb-49e3-a8ff-1c22df85f078.jpg)'
- en: Backing up the database
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 备份数据库
- en: Imagine you have worked for long hours on a complex penetration testing assignment
    using the Metasploit Framework. Now, for some unfortunate reason, your Metasploit
    instance crashes and fails to start. It would be very painful to rework from scratch
    on a new Metasploit instance! This is where the backup option in the Metasploit
    Framework comes to the rescue. The `db_export` command, as shown in the following
    screenshot, exports all data within the database to an external XML file.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，您在使用Metasploit框架进行复杂的渗透测试任务上工作了很长时间。现在，由于某种不幸的原因，您的Metasploit实例崩溃了，无法启动。如果需要从头开始在新的Metasploit实例上重新工作，那将是非常痛苦的！这就是Metasploit框架中备份选项发挥作用的地方。`db_export`命令，如下截图所示，将数据库中的所有数据导出到外部XML文件中。
- en: 'You can then keep the exported XML file safe in case you need to restore the
    data later after failure:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以将导出的XML文件安全地保存起来，以防以后需要恢复数据：
- en: '![](img/79480a42-ed1d-4bbe-8868-7373474bfc7e.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/79480a42-ed1d-4bbe-8868-7373474bfc7e.jpg)'
- en: NMAP
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NMAP
- en: 'NMAP, an acronym for Network Mapper, is an extremely advanced tool that can
    be used for the following purposes:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: NMAP，即网络映射器的缩写，是一个非常先进的工具，可用于以下目的：
- en: Host discovery
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机发现
- en: Service detection
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务检测
- en: Version enumeration
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本枚举
- en: Vulnerability scanning
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 漏洞扫描
- en: Firewall testing and evasion
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防火墙测试和规避
- en: 'NMAP is a tool with hundreds of parameters to configure and covering it completely
    is beyond the scope of this book. However, the following table will help you to
    know some of the most commonly required NMAP switches:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: NMAP是一个有数百个参数可配置的工具，完全覆盖它超出了本书的范围。然而，以下表格将帮助您了解一些最常用的NMAP开关：
- en: '| **Sr. no.** | **NMAP switch** | **Purpose** |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| **序号** | **NMAP开关** | **目的** |'
- en: '| 1. | `-sT` | Perform a connect (TCP) scan |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 1. | `-sT` | 执行连接（TCP）扫描 |'
- en: '| 2. | `-sU` | Perform a scan to detect open UDP ports |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 2. | `-sU` | 执行扫描以检测开放的UDP端口'
- en: '| 3. | `-sP` | Perform a simple ping scan |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 3. | `-sP` | 执行简单的ping扫描'
- en: '| 4. | `-A` | Perform an aggressive scan (includes stealth syn scan and OS
    and version detection plus traceroute and scripts) |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 4. | `-A` | 执行侵略性扫描（包括隐秘syn扫描和OS和版本检测加上路由跟踪和脚本） |'
- en: '| 5. | `-sV` | Perform service version detection |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 5. | `-sV` | 执行服务版本检测'
- en: '| 6. | `-v` | Print verbose output |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 6. | `-v` | 打印详细输出'
- en: '| 7. | `-p 1-1000` | Scan ports only in range 1 to 1000 |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 7. | `-p 1-1000` | 仅扫描1到1000范围内的端口'
- en: '| 8. | `-O` | Perform OS detection |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 8. | `-O` | 执行操作系统检测'
- en: '| 9. | `-iL <filename>` | Scan all hosts from the file specified in `<filename>`
    |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 9. | `-iL <filename>` | 从指定的`<filename>`文件中扫描所有主机|'
- en: '| 10. | `-oX` | Output the scan results in the XML format |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: 10. | `-oX` | 以XML格式输出扫描结果
- en: '| 11. | `-oG` | Output the scan results in the greppable format |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 11. | `-oG` | 以可grep格式输出扫描结果'
- en: '| 12. | `--script <script_name>` | Execute the script specified in `<script_name>`
    against the target |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 12. | `--script <script_name>` | 对目标执行指定的脚本 `<script_name>`'
- en: 'For example: `nmap -sT -sV -O 192.168.44.129 -oX /root/Desktop/scan.xml`.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：`nmap -sT -sV -O 192.168.44.129 -oX /root/Desktop/scan.xml`。
- en: The preceding command will perform a connect scan on the IP address `192.168.44.129`,
    detect the version of all the services, identify which operating system the target
    is running on, and save the result to an XML file at the path `/root/Desktop/scan.xml`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将在IP地址`192.168.44.129`上执行连接扫描，检测所有服务的版本，识别目标正在运行的操作系统，并将结果保存到路径`/root/Desktop/scan.xml`的XML文件中。
- en: NMAP scanning approach
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NMAP扫描方法
- en: We have seen in the previous section that the Metasploit Framework offers a
    functionality to import scans from tools such as NMAP and Nessus. However, there
    is also an option to initiate the NMAP scan from within the Metasploit Framework.
    This will instantly store the scan results in the backend database.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在前一节中看到，Metasploit框架提供了从NMAP和Nessus等工具导入扫描的功能。然而，还有一个选项可以从Metasploit框架内启动NMAP扫描。这将立即将扫描结果存储在后端数据库中。
- en: However, there isn't much difference between the two approaches and is just
    a matter of personal choice.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这两种方法之间并没有太大的区别，只是个人选择的问题。
- en: 'Scanning from `msfconsole`: The `db_nmap` command, as shown in the following
    screenshot, initiates an NMAP scan from within the Metasploit Framework. Once
    the scan is complete, you can simply use the `hosts` command to list the target
    scanned.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`msfconsole`扫描：`db_nmap`命令，如下截图所示，从Metasploit框架内启动NMAP扫描。扫描完成后，您可以简单地使用`hosts`命令列出扫描的目标。
- en: '![](img/eaeaab1f-9896-4d45-bc3b-921389569882.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eaeaab1f-9896-4d45-bc3b-921389569882.jpg)'
- en: Nessus
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nessus
- en: 'Nessus is a popular vulnerability assessment tool that we have already seen
    in [Chapter 1](225d5f1a-f19d-43ba-90eb-c41039afaad7.xhtml), *Introduction to Metasploit
    and Supporting Tools*. Now, there are two alternatives of using Nessus with Metasploit,
    as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Nessus是一个流行的漏洞评估工具，我们在[第1章](225d5f1a-f19d-43ba-90eb-c41039afaad7.xhtml)中已经见过了，*Metasploit和支持工具简介*。现在，有两种使用Nessus与Metasploit的替代方法，如下所示：
- en: Perform a Nessus scan on the target system, save the report, and then import
    it into the Metasploit Framework using the `db_import` command as discussed earlier
    in this chapter
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对目标系统执行Nessus扫描，保存报告，然后使用`db_import`命令将其导入Metasploit框架，如本章前面讨论的那样
- en: Load, initiate, and trigger a Nessus scan on the target system directly through
    `msfconsole` as described in the next section
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载、启动并触发目标系统上的Nessus扫描，直接通过`msfconsole`描述在下一节中
- en: Scanning using Nessus from msfconsole
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用msfconsole从Nessus进行扫描
- en: Before we start a new scan using Nessus, it is important to load the Nessus
    plugin in `msfconsole`. Once the plugin is loaded, you can connect to your Nessus
    instance using a pair of credentials, as shown in the next screenshot.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Nessus开始新的扫描之前，重要的是在`msfconsole`中加载Nessus插件。加载插件后，可以使用一对凭据连接到您的Nessus实例，如下一张截图所示。
- en: Before loading `nessus` in `msfconsole,` make sure that you start the Nessus
    daemon using the `/etc/init.d/nessusd start` command.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在`msfconsole`中加载`nessus`之前，请确保使用`/etc/init.d/nessusd start`命令启动Nessus守护程序。
- en: '![](img/5de6d82b-e261-47e9-aaf1-8219516e1c7e.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5de6d82b-e261-47e9-aaf1-8219516e1c7e.jpg)'
- en: 'Once the `nessus` plugin is loaded, and we are connected to the `nessus` service,
    we need to select which policy we will use to scan our target system. This can
    be performed using the following commands:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦加载了`nessus`插件，并且我们连接到了`nessus`服务，我们需要选择要使用哪个策略来扫描我们的目标系统。可以使用以下命令执行此操作：
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can also see this in the following screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在以下截图中看到这一点：
- en: '![](img/343309fc-1f37-40dd-adb1-49aa0993c8f3.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/343309fc-1f37-40dd-adb1-49aa0993c8f3.jpg)'
- en: 'After some time, the scan is completed, and we can view the scan results using
    the following command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一段时间后，扫描完成，可以使用以下命令查看扫描结果：
- en: '[PRE4]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can also see this in the following screenshot:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在以下截图中看到这一点：
- en: '![](img/0692bbce-7b41-4a3f-93d8-870433031aae.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0692bbce-7b41-4a3f-93d8-870433031aae.jpg)'
- en: Vulnerability detection with Metasploit auxiliaries
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit辅助模块进行漏洞检测
- en: 'We have seen various auxiliary modules in the last chapter. Some of the auxiliary
    modules in the Metasploit Framework can also be used to detect specific vulnerabilities.
    For example, the following screenshot shows the auxiliary module to check whether
    the target system is vulnerable to the MS12-020 RDP vulnerability:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们已经看到了各种辅助模块。Metasploit框架中的一些辅助模块也可以用于检测特定的漏洞。例如，以下截图显示了用于检查目标系统是否容易受到MS12-020
    RDP漏洞影响的辅助模块：
- en: '![](img/47cd1964-0a1b-4b72-a71b-e4843a07da9c.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/47cd1964-0a1b-4b72-a71b-e4843a07da9c.jpg)'
- en: Auto exploitation with db_autopwn
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用db_autopwn进行自动利用
- en: In the previous section, we have seen how the Metasploit Framework helps us
    import scans from various other tools such as NMAP and Nessus. Now, once we have
    imported the scan results into the database, the next logical step would be to
    find exploits matching the vulnerabilities/ports from the imported scan. We can
    certainly do this manually; for instance, if our target is Windows XP and it has
    TCP port 445 open, then we can try out the `MS08_67 netapi` vulnerability against
    it.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们已经看到了Metasploit框架如何帮助我们从其他各种工具（如NMAP和Nessus）导入扫描结果。现在，一旦我们将扫描结果导入数据库，下一个逻辑步骤将是查找与导入扫描的漏洞/端口匹配的利用。我们当然可以手动执行此操作；例如，如果我们的目标是Windows
    XP，并且它打开了TCP端口445，那么我们可以尝试针对其执行`MS08_67 netapi`漏洞。
- en: 'The Metasploit Framework offers a script called `db_autopwn` that automates
    the exploit matching process, executes the appropriate exploit if match found,
    and gives us remote shell. However, before you try this script, a few of the following
    things need to be considered:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit框架提供了一个名为`db_autopwn`的脚本，它自动化了利用匹配过程，如果找到匹配项，则执行适当的利用，并给我们远程shell。但是，在尝试此脚本之前，需要考虑以下几点：
- en: The `db_autopwn` script is officially depreciated from the Metasploit Framework.
    You would need to explicitly download and add it to your Metasploit instance.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db_autopwn`脚本已经正式从Metasploit框架中弃用。您需要明确下载并将其添加到您的Metasploit实例中。'
- en: This is a very resource-intensive script since it tries all permutations and
    combinations of vulnerabilities against the target, thus making it very noisy.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一个非常资源密集的脚本，因为它尝试针对目标的所有漏洞的排列和组合，因此会产生很多噪音。
- en: This script is not recommended anymore for professional use against any production
    system; however, from a learning perspective, you can run it against any of the
    test machines in the lab.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个脚本不再建议用于针对任何生产系统的专业使用；但是，从学习的角度来看，您可以在实验室中针对任何测试机器运行它。
- en: 'The following are the steps to get started with the `db_autopwn` script:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是开始使用`db_autopwn`脚本的步骤：
- en: 'Open a terminal window, and run the following command:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端窗口，并运行以下命令：
- en: '[PRE5]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Copy the downloaded file to the `/usr/share/metasploit-framework/plugins` directory.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将下载的文件复制到`/usr/share/metasploit-framework/plugins`目录中。
- en: Restart `msfconsole`.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动`msfconsole`。
- en: 'In `msfconsole`, type the following code:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`msfconsole`中，输入以下代码：
- en: '[PRE6]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'List the matched exploits using the following command:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令列出匹配的利用：
- en: '[PRE7]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Exploit the matched exploits using the following command:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令利用匹配的利用：
- en: '[PRE8]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Post exploitation
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后渗透
- en: Post exploitation is a phase in penetration testing where we have got limited
    (or full) access to our target system, and now, we want to search for certain
    files, folders, dump user credentials, capture screenshots remotely, dump out
    the keystrokes from the remote system, escalate the privileges (if required),
    and try to make our access persistent. In this section, we'll learn about meterpreter,
    which is an advanced payload known for its feature-rich post-exploitation capabilities.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 后渗透是渗透测试中的一个阶段，在这个阶段我们已经对目标系统有了有限（或完全）的访问权限，现在，我们想要搜索特定的文件、文件夹，转储用户凭据，远程捕获屏幕截图，从远程系统中转储按键，提升权限（如果需要），并尝试使我们的访问持久化。在本节中，我们将学习meterpreter，它是一个以其功能丰富的后渗透能力而闻名的高级有效载荷。
- en: What is meterpreter?
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是meterpreter？
- en: 'Meterpreter is an advanced extensible payload that uses an *in-memory* DLL
    injection. It significantly increases the post-exploitation capabilities of the
    Metasploit Framework. By communicating over the stager socket, it provides an
    extensive client-side Ruby API. Some of the notable features of meterpreter are
    as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Meterpreter是一个高级的可扩展有效载荷，它使用*内存* DLL注入。它显著增加了Metasploit框架的后渗透能力。通过在分段套接字上通信，它提供了一个广泛的客户端端Ruby
    API。Meterpreter的一些显着特点如下：
- en: '**Stealthy**: Meterpreter completely resides in the memory of the compromised
    system and writes nothing to the disk. It doesn''t spawn any new process; it injects
    itself into the compromised process. It has an ability to migrate to other running
    processes easily. By default, Meterpreter communicates over an encrypted channel.
    This leaves a limited trace on the compromised system from the forensic perspective.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隐秘**：Meterpreter完全驻留在受损系统的内存中，并且不会向磁盘写入任何内容。它不会产生任何新进程；它会将自身注入到受损进程中。它有能力轻松迁移到其他运行的进程。默认情况下，Meterpreter通过加密通道进行通信。这在法医角度上对受损系统留下了有限的痕迹。'
- en: '**Extensible**: Features can be added at runtime and are directly loaded over
    the network. New features can be added to Meterpreter without having to rebuild
    it. The `meterpreter` payload runs seamlessly and very fast.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展**：功能可以在运行时添加，并直接通过网络加载。新功能可以添加到Meterpreter而无需重新构建它。`meterpreter`有效载荷运行无缝且非常快速。'
- en: The following screenshot shows a `meterpreter` session that we obtained by exploiting
    the `ms08_067_netapi` vulnerability on our Windows XP target system.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了我们通过利用我们的Windows XP目标系统上的`ms08_067_netapi`漏洞获得的`meterpreter`会话。
- en: Before we use the exploit, we need to configure the meterpreter payload by issuing
    the `use payload/windows/meterpreter/reverse_tcp` command and then setting the
    value of the LHOST variable.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用漏洞之前，我们需要通过发出`use payload/windows/meterpreter/reverse_tcp`命令来配置meterpreter有效载荷，然后设置LHOST变量的值。
- en: '![](img/60d8c76a-0333-43c5-898f-f848a9c9ba56.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/60d8c76a-0333-43c5-898f-f848a9c9ba56.jpg)'
- en: Searching for content
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索内容
- en: 'Once we have compromised our target system, we might want to look out for specific
    files and folders. It all depends on the context and intention of the penetration
    test. The meterpreter offers a search option to look for files and folders on
    the compromised system. The following screenshot shows a search query looking
    for confidential text files located on C drive:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们攻破了目标系统，我们可能想要寻找特定的文件和文件夹。这完全取决于渗透测试的上下文和意图。meterpreter提供了一个搜索选项，可以在受损的系统上查找文件和文件夹。下面的截图显示了一个搜索查询，寻找位于C驱动器上的机密文本文件：
- en: '![](img/760e89f7-1f8a-4fd7-8379-0f3dbf2a3440.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/760e89f7-1f8a-4fd7-8379-0f3dbf2a3440.jpg)'
- en: Screen capture
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 屏幕截图
- en: 'Upon a successful compromise, we might want to know what activities and tasks
    are running on the compromised system. Taking a screenshot may give us some interesting
    information on what our victim is doing at that particular moment. In order to
    capture a screenshot of the compromised system remotely, we perform the following
    steps:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 成功攻破后，我们可能想知道在受损系统上运行的活动和任务。拍摄屏幕截图可能会给我们一些有趣的信息，了解我们的受害者在那个特定时刻在做什么。为了远程捕获受损系统的屏幕截图，我们执行以下步骤：
- en: Use the `ps` command to list all processes running on the target system along
    with their PIDs.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ps`命令列出目标系统上运行的所有进程以及它们的PID。
- en: Locate the `explorer.exe` process, and note down its PID.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位`explorer.exe`进程，并记下其PID。
- en: 'Migrate the meterpreter to the `explorer.exe` process, as shown in the following
    screenshot:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将meterpreter迁移到`explorer.exe`进程，如下截图所示：
- en: '![](img/23ff19d1-d7d9-4bf4-92fb-1e541814f3fa.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23ff19d1-d7d9-4bf4-92fb-1e541814f3fa.jpg)'
- en: 'Once we have migrated meterpreter to `explorer.exe`, we load the `espia` plugin
    and then fire the `screengrab` command, as shown in the following screenshot:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们将meterpreter迁移到`explorer.exe`，我们加载`espia`插件，然后执行`screengrab`命令，如下截图所示：
- en: '![](img/fa71e2ae-e011-494d-aa93-1abbcbd9ca66.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fa71e2ae-e011-494d-aa93-1abbcbd9ca66.jpg)'
- en: 'The screenshot of our compromised system is saved (as follows), and we can
    notice that the victim was interacting with the FileZilla Server:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的受损系统的屏幕截图已保存（如下所示），我们可以注意到受害者正在与FileZilla Server进行交互：
- en: '![](img/e51dde33-39ec-4471-861d-f419819645cd.jpeg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e51dde33-39ec-4471-861d-f419819645cd.jpeg)'
- en: Keystroke logging
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按键记录
- en: 'Apart from the screenshot, another very useful meterpreter feature is keylogging.
    The meterpreter keystroke sniffer will capture all the keys pressed on the compromised
    system and dump out the results on our console. The `keyscan_start` command is
    used to initiate remote keylogging on the compromised system, while the `keyscan_dump`
    command is used to dump out all the captured keystrokes to the Metasploit console:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 除了屏幕截图，另一个非常有用的meterpreter功能是键盘记录。meterpreter按键记录器将捕获在受损系统上按下的所有按键，并将结果转储到我们的控制台上。使用`keyscan_start`命令在受损系统上启动远程键盘记录，而使用`keyscan_dump`命令将所有捕获的按键转储到Metasploit控制台上：
- en: '![](img/08e5b51d-944f-4646-84f8-447fc5a64443.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/08e5b51d-944f-4646-84f8-447fc5a64443.jpg)'
- en: Dumping the hashes and cracking with JTR
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转储哈希并使用JTR破解
- en: 'Windows stores the user credentials in an encrypted format in its SAM database.
    Once we have compromised our target system, we want to get hold of all the credentials
    on that system. As shown in the following screenshot, we can use the `post/windows/gather/hashdump`
    auxiliary module to dump the password hashes from the remote compromised system:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Windows将用户凭据以加密格式存储在其SAM数据库中。一旦我们已经攻破了目标系统，我们就想获取该系统上的所有凭据。如下截图所示，我们可以使用`post/windows/gather/hashdump`辅助模块从远程受损系统中转储密码哈希：
- en: '![](img/7192bbac-1e83-4dbb-810c-025364351ec5.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7192bbac-1e83-4dbb-810c-025364351ec5.jpg)'
- en: Once we have a dump of credentials, the next step is to crack them and retrieve
    clear text passwords. The Metasploit Framework has an auxiliary module `auxiliary/analyze/jtr_crack_fast`
    that triggers password cracker against the dumped hashes.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了凭据的转储，下一步就是破解它们并检索明文密码。Metasploit Framework有一个辅助模块`auxiliary/analyze/jtr_crack_fast`，可以触发对转储哈希的密码破解。
- en: 'Upon completion, the module displays clear text passwords, as shown in the
    following screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，模块会显示明文密码，如下截图所示：
- en: '**jtr** is an acronym for **John the Ripper,** the most commonly used password
    cracker.![](img/c90dbc0e-d442-4c43-81df-2f7b1ebb5e09.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**jtr**是**John the Ripper**的缩写，是最常用的密码破解工具。![](img/c90dbc0e-d442-4c43-81df-2f7b1ebb5e09.jpg)'
- en: Shell command
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Shell命令
- en: 'Once we have successfully exploited the vulnerability and obtained meterpreter
    access, we can use the `shell` command to get command prompt access to the compromised
    system (as shown in the following screenshot). The command prompt access will
    make you feel as if you are physically working on the target system:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们成功利用了漏洞并获得了meterpreter访问，我们可以使用`shell`命令来获得对受损系统的命令提示符访问（如下截图所示）。命令提示符访问会让您感觉自己就像在物理上操作目标系统一样：
- en: '![](img/f5bc0152-5805-4f0f-bc1b-d67c3f30ad25.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5bc0152-5805-4f0f-bc1b-d67c3f30ad25.jpg)'
- en: Privilege escalation
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特权提升
- en: We can exploit a vulnerability and get remote meterpreter access, but it's quite
    possible that we have limited privileges on the compromised system. In order to
    ensure we have full access and control over our compromised system, we need to
    elevate privileges to that of an administrator. The meterpreter offers functionality
    to escalate privileges as shown in the following screenshot. First, we load an
    extension called `priv`, and then use the `getsystem` command to escalate the
    privileges.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用漏洞并获得远程meterpreter访问，但很可能我们在受损系统上的权限受到限制。为了确保我们对受损系统拥有完全访问和控制权，我们需要将特权提升到管理员级别。meterpreter提供了提升特权的功能，如下截图所示。首先，我们加载一个名为`priv`的扩展，然后使用`getsystem`命令来提升特权。
- en: 'We can then verify our privilege level using the `getuid` command:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用`getuid`命令验证我们的特权级别：
- en: '![](img/cc441871-c94c-4193-b515-7f2953eb99d8.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cc441871-c94c-4193-b515-7f2953eb99d8.jpg)'
- en: Summary
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to set up the Metasploit database and then
    explored various techniques of vulnerability scanning using NMAP and Nessus. We
    concluded by getting to know the advanced post-exploitation features of the Metasploit
    Framework. In the next chapter, we'll learn about the interesting client-side
    exploitation features of the Metasploit Framework.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何设置Metasploit数据库，然后探索了使用NMAP和Nessus进行漏洞扫描的各种技术。我们最后了解了Metasploit Framework的高级后渗透功能。在下一章中，我们将学习Metasploit
    Framework的有趣的客户端利用功能。
- en: Exercises
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'You can try the following exercises:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以尝试以下练习：
- en: Find out and try to use any auxiliary module that can be used for vulnerability
    detection
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找出并尝试使用任何可用于漏洞检测的辅助模块
- en: Try to explore various features of meterpreter other than those discussed in
    this chapter
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试探索meterpreter的各种功能，而不是本章讨论的那些功能
- en: Try to find out if there is any alternative to `db_autopwn`
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试找出是否有替代`db_autopwn`
