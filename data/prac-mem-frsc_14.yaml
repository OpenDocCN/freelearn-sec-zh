- en: 'Chapter 10: MacOS Memory Acquisition'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第十章：macOS 内存获取
- en: 'The last part of our book is devoted to an important topic – the memory investigation
    of systems running **macOS**. In the international desktop operating system market,
    macOS comes in at a deserved second. Despite the fact that Apple devices were
    originally considered individual devices for personal use, more and more users
    adopt them for work purposes every year. Recently, the use of macOS for work has
    reached a new level, with this operating system beginning to be used enterprise-wide
    (although this practice is currently more common in the United States). By 2021,
    Macintosh achieved a 23% share in US enterprises: [https://www.computerworld.com/article/3604601/macs-reach-23-share-in-us-enterprises-idc-confirms.html](https://www.computerworld.com/article/3604601/macs-reach-23-share-in-us-enterprises-idc-confirms.html).'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的最后一部分专注于一个重要话题——运行 **macOS** 系统的内存调查。在国际桌面操作系统市场中，macOS 当之无愧地排名第二。尽管苹果设备最初被认为是个人使用的独立设备，但每年越来越多的用户将其用于工作目的。最近，macOS
    在工作中的使用达到了新高度，这个操作系统开始在企业范围内使用（尽管这种做法目前在美国更为普遍）。到 2021 年，Macintosh 在美国企业的市场份额已达
    23%：[https://www.computerworld.com/article/3604601/macs-reach-23-share-in-us-enterprises-idc-confirms.html](https://www.computerworld.com/article/3604601/macs-reach-23-share-in-us-enterprises-idc-confirms.html)。
- en: With the growing number of macOS users and adoption by enterprises, the interest
    from threat actors in this operating system has also increased. The number of
    attacks on macOS has grown significantly in recent years. New tools specializing
    in attacks on this operating system have appeared, which means that the time has
    come to expand our arsenal with techniques and tools for macOS investigation.
    But before we can analyze the data, we need to collect it. That is why, as always,
    we begin with an overview of macOS memory acquisition techniques.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 macOS 用户数量的增加以及企业的采用，威胁行为者对该操作系统的兴趣也在上升。近年来，针对 macOS 的攻击数量显著增长。出现了专门针对该操作系统的攻击工具，这意味着是时候扩展我们的工具库，增加用于
    macOS 调查的技术和工具了。但在我们分析数据之前，必须先收集它。这就是为什么，我们一如既往地从 macOS 内存获取技术概述开始。
- en: 'The following topics will be covered:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 将涵盖以下主题：
- en: Understanding macOS memory acquisition issues
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 macOS 内存获取问题
- en: Preparing for macOS memory acquisition
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备进行 macOS 内存获取
- en: Acquiring memory with `osxpmem`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `osxpmem` 获取内存
- en: Creating a Volatility profile
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 Volatility 配置文件
- en: Understanding macOS memory acquisition issues
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 macOS 内存获取问题
- en: In the previous chapters, we discussed hardware and software methods of memory
    extraction. In the case of **OS X** and **macOS**, these methods will also be
    relevant, but there are a couple of extremely important things to consider. Let's
    start with the hardware-based solutions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们讨论了硬件和软件方法的内存提取。对于 **OS X** 和 **macOS**，这些方法同样适用，但有几个极为重要的事项需要考虑。我们从基于硬件的解决方案开始。
- en: Recall that hardware-based acquisition tools rely on direct memory access and
    use technology such as FireWire or Thunderbolt. For now, almost every Macintosh
    offers a FireWire or Thunderbolt port, and acquiring memory content in this case
    does not require an administrator's password and unlocked computer. However, it
    obviously cannot be that simple. First, this technology only permits the acquisition
    of the first 4 GB of RAM, which will not be enough to thoroughly examine systems
    having more than 4 GB of RAM. Second, since 2013, **Intel Virtualization Technology**
    (**VT-d**) for directed input/output was enabled. This technology works as a remapper
    and effectively blocks Direct Memory Access requests. Another issue is that if
    **FileVault** is enabled, OS X and newer versions of macOS will automatically
    turn off Direct Memory Access when the computer is locked. The result is that
    using software solutions remains a priority.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下，基于硬件的获取工具依赖于直接内存访问，并使用诸如 FireWire 或 Thunderbolt 等技术。目前，几乎所有的 Macintosh
    都配备了 FireWire 或 Thunderbolt 端口，在这种情况下获取内存内容不需要管理员密码和解锁计算机。然而，显然事情不会那么简单。首先，这项技术仅允许获取前
    4 GB 的内存，而这不足以彻底检查具有超过 4 GB 内存的系统。其次，自 2013 年以来，启用了 **Intel 虚拟化技术**（**VT-d**）用于定向输入/输出。这项技术充当重映射器，有效地阻止了直接内存访问请求。另一个问题是，如果启用了
    **FileVault**，OS X 和更新版本的 macOS 会在计算机锁定时自动关闭直接内存访问。结果是，使用软件解决方案仍然是优先选择。
- en: Software acquisition tools, as with other operating systems, must be run from
    a user interface on an unlocked system. However, there are not many of these tools
    for OS X and macOS, especially those that work correctly on the latest versions
    of the operating system. Prior to OS X version 10.6, physical memory was accessible
    through the `/dev/mem` device file or through `/dev/kmem`, which points to the
    kernel's virtual address space. If these device files were available, the `dd`
    utility could be used to read the contents of memory through the device files.
    However, in recent versions of the operating system, this method is no longer
    available, and specialized acquisition tools are required. Since memory protection
    prevents a normal user from accessing memory directly, most memory acquisition
    tools rely on loading the BSD kernel extension or simply `kext`, which allows
    read-only access to physical memory. Once `kext` is loaded into the kernel, physical
    memory can be read from the `/dev/pmem/` device file. However, to load `kext`
    into the kernel, administrator privileges and minor security configuration changes
    are needed. Let's take a look at all the steps that need to be taken before running
    the tools.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 软件获取工具，像其他操作系统一样，必须在解锁系统上的用户界面中运行。然而，针对 OS X 和 macOS 的此类工具并不多，尤其是那些能在最新操作系统版本上正常运行的工具。在
    OS X 10.6 版本之前，物理内存可以通过 `/dev/mem` 设备文件或 `/dev/kmem` 访问，后者指向内核的虚拟地址空间。如果这些设备文件可用，则可以使用
    `dd` 工具通过设备文件读取内存内容。然而，在操作系统的最新版本中，这种方法已不再可行，需要使用专门的获取工具。由于内存保护防止普通用户直接访问内存，大多数内存获取工具依赖于加载
    BSD 内核扩展，简称 `kext`，它允许对物理内存进行只读访问。一旦 `kext` 加载到内核中，就可以通过 `/dev/pmem/` 设备文件读取物理内存。然而，要将
    `kext` 加载到内核中，需要管理员权限和一些小的安全配置更改。接下来，我们来看看运行工具之前需要采取的所有步骤。
- en: Preparing for macOS memory acquisition
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备 macOS 内存获取
- en: 'There are not many macOS memory acquisition tools, and they all support only
    certain versions of the operating system. Therefore, before choosing and testing
    the right tool, we need to find out the version of the operating system we plan
    to work with. To see the macOS version installed, click the Apple menu icon in
    the top-left corner of your screen, and then select **About This Mac**:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: macOS 内存获取工具并不多，而且它们仅支持特定版本的操作系统。因此，在选择和测试合适的工具之前，我们需要先了解计划使用的操作系统版本。要查看安装的
    macOS 版本，请点击屏幕左上角的苹果菜单图标，然后选择 **关于本机**：
- en: '![Figure 10.1 – About This Mac](img/Figure_10.1_B17056.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.1 – 关于本机](img/Figure_10.1_B17056.jpg)'
- en: Figure 10.1 – About This Mac
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1 – 关于本机
- en: In the window that appears, you will see the version of the operating system;
    in our case, it is macOS Big Sur version 11.6\. Using the information about the
    OS version, you can find tools that support memory dumping from this OS.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在弹出的窗口中，您将看到操作系统的版本；在我们的例子中，它是 macOS Big Sur 版本 11.6。通过操作系统版本的信息，您可以找到支持从该操作系统进行内存转储的工具。
- en: 'At the time of writing, the following tools are publicly available:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 截至写作时，以下工具是公开可用的：
- en: '`osxpmem` – supports 64-bit versions of **OS X Mountain Lion** (10.8), **OS
    X Mavericks** (10.9), **OS X Yosemite** (10.10), **OS X El Capitan** (10.11),
    **macOS Sierra** (10.11), **macOS High Sierra** (10.13), **macOS Mojave** (10.14),
    and **macOS Catalina** (10.15)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`osxpmem` – 支持 **OS X Mountain Lion** (10.8)、**OS X Mavericks** (10.9)、**OS
    X Yosemite** (10.10)、**OS X El Capitan** (10.11)、**macOS Sierra** (10.11)、**macOS
    High Sierra** (10.13)、**macOS Mojave** (10.14) 和 **macOS Catalina** (10.15) 的
    64 位版本。'
- en: '`MandiantMemoryzeforMac` – supports **Mac OS X Snow Leopard** (10.6) 32/64-bit,
    **Mac OS X Lion** (10.7) 32/64-bit, and **OS X Mountain Lion** (10.8) 64-bit'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MandiantMemoryzeforMac` – 支持 **Mac OS X Snow Leopard** (10.6) 32/64 位、**Mac
    OS X Lion** (10.7) 32/64 位和 **OS X Mountain Lion** (10.8) 64 位。'
- en: Although these tools cover a fairly wide range of OSes, they do not allow you
    to get memory dumps of the latest macOS versions. In addition to these tools,
    there are proprietary solutions, such as **Cellebrite Digital Collector**, **SUMURI
    RECON ITR**, or **Volexity Surge Collect**, which try to update their products
    and add support for newer versions of macOS. For example, SUMURI recently announced
    that RECON now supports macOS Monterey, while Volexity added support for new Macintoshes
    on the M1 to Surge.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些工具覆盖了相当广泛的操作系统，但它们无法获取最新 macOS 版本的内存转储。除了这些工具，还有一些专有解决方案，如 **Cellebrite
    Digital Collector**、**SUMURI RECON ITR** 或 **Volexity Surge Collect**，它们试图更新其产品并添加对新版
    macOS 的支持。例如，SUMURI 最近宣布 RECON 现在支持 macOS Monterey，而 Volexity 则为 Surge 增加了对 M1
    系列新 Mac 的支持。
- en: Important Note
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Do not forget that to work with the target host, you need to prepare removable
    media or a network share where you will put all the necessary tools and files,
    as well as the resulting memory dump.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了，为了与目标主机配合工作，你需要准备可移动介质或网络共享，存放所有必要的工具和文件，以及生成的内存转储。
- en: 'Once you have selected the appropriate tool, you can start testing it. To do
    this, you will need a virtual machine with configurations similar to those of
    the target host. Unlike Windows and Linux, macOS is not so easy to install as
    a guest system. The thing is to create a macOS virtual machine; you will have
    to do a little trick with the configuration files. Luckily, deployment guides
    are not too hard to find. Here, for example, is a pretty good guide on how to
    deploy macOS virtual machines on Windows using VirtualBox and VMware: [https://www.makeuseof.com/tag/macos-windows-10-virtual-machine/](https://www.makeuseof.com/tag/macos-windows-10-virtual-machine/).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦选择了合适的工具，你就可以开始测试它了。为此，你需要一台虚拟机，其配置应与目标主机类似。与Windows和Linux不同，macOS并不容易作为客户系统安装。事实上，要创建一个macOS虚拟机，你需要通过修改配置文件来做一些小技巧。幸运的是，部署指南并不难找到。例如，这里有一份关于如何在Windows上使用VirtualBox和VMware部署macOS虚拟机的不错指南：[https://www.makeuseof.com/tag/macos-windows-10-virtual-machine/](https://www.makeuseof.com/tag/macos-windows-10-virtual-machine/)。
- en: After creating the virtual machine, you can move on to testing the tools. Since
    macOS has better protection against launching third-party files than Windows and
    Linux, we will have to use some tricks, which we will go over later.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 创建虚拟机后，你可以继续测试工具。由于macOS在启动第三方文件方面比Windows和Linux有更好的保护，我们将不得不使用一些技巧，稍后会详细介绍。
- en: Acquiring memory with osxpmem
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用osxpmem获取内存
- en: This time, we will look at just one tool for creating memory dumps – `osxpmem`.
    This tool was chosen because it is freely distributed and supports the largest
    number of OS X and macOS versions.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们只讨论一种创建内存转储的工具——`osxpmem`。选择这个工具是因为它是免费分发的，并且支持最多的OS X和macOS版本。
- en: 'You can download this tool from the official GitHub repository: [https://github.com/Velocidex/c-aff4/releases](https://github.com/Velocidex/c-aff4/releases).
    In the `osxpmem`. At the time of writing, this is **Release 3.2**:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从官方GitHub仓库下载此工具：[https://github.com/Velocidex/c-aff4/releases](https://github.com/Velocidex/c-aff4/releases)。在`osxpmem`中，截至目前，这是**版本
    3.2**：
- en: '![Figure 10.2 – The latest release with osxpmem](img/Figure_10.2_B17056.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.2 – 最新版本与 osxpmem](img/Figure_10.2_B17056.jpg)'
- en: Figure 10.2 – The latest release with osxpmem
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2 – 最新版本与 osxpmem
- en: 'Download the `osxpmem` archive and unzip it. Inside, you will find `osxpmem.app`,
    our tool for creating memory dumps. This is a command-line tool and is run through
    the terminal. First of all, we need to open the terminal and go to `osxpmem.app`.
    From this location, we need to load `kext` with `kextutil`, which looks like this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 下载`osxpmem`归档并解压。在其中，你将找到`osxpmem.app`，这是我们用来创建内存转储的工具。该工具是一个命令行工具，需要通过终端运行。首先，我们需要打开终端并进入`osxpmem.app`。在这个位置，我们需要使用`kextutil`加载`kext`，如下所示：
- en: '![Figure 10.3 – MacPmem.kext loading'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.3 – MacPmem.kext 加载'
- en: '](img/Figure_10.3_B17056.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.3_B17056.jpg)'
- en: Figure 10.3 – MacPmem.kext loading
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3 – MacPmem.kext 加载
- en: The main difficulty in using tools such as `osxpmem` is macOS security policies.
    So, if we try to run this tool without doing any extra steps, we first get a series
    of `File owner/permissions are incorrect` errors and, secondly, a message saying
    that the software has been blocked.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用像`osxpmem`这样的工具的主要困难是macOS的安全策略。因此，如果我们在没有额外步骤的情况下尝试运行该工具，首先会出现一系列`文件所有者/权限不正确`的错误，其次会显示一条软件被阻止的消息。
- en: 'To solve the first problem, we need to change the owner and permissions of
    our files. To do that, run the `chown` and `chmod` commands in the terminal. To
    check the changes applied, you can use the `ls -lah` command, as shown next:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决第一个问题，我们需要更改文件的所有者和权限。为此，在终端中运行`chown`和`chmod`命令。要检查所做的更改，可以使用`ls -lah`命令，结果如下所示：
- en: '![Figure 10.4 – Owner and permissions change'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.4 – 更改所有者和权限'
- en: '](img/Figure_10.4_B17056.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.4_B17056.jpg)'
- en: Figure 10.4 – Owner and permissions change
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.4 – 更改所有者和权限
- en: 'To solve the second problem, open **Settings** and go to **Security & Privacy**.
    Here, in the **General** tab, we will see information about blocking our program:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决第二个问题，打开**设置**并进入**安全性与隐私**。在这里的**常规**标签中，我们会看到有关阻止程序的信息：
- en: '![Figure 10.5 – The Security & Privacy General tab'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.5 – 安全性与隐私常规标签'
- en: '](img/Figure_10.5_B17056.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.5_B17056.jpg)'
- en: Figure 10.5 – The Security & Privacy General tab
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.5 – 安全性与隐私常规选项卡
- en: To unlock our program, we need to click on the lock at the bottom and agree
    to unlock it.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解锁我们的程序，我们需要点击底部的锁，并同意解锁它。
- en: 'In addition, you may need to disable system integrity protection. To do this,
    run the following command in the terminal:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可能需要禁用系统完整性保护。为此，请在终端中运行以下命令：
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In newer versions – for example, in macOS Catalina – you may need to do more
    global actions, as you can only disable system integrity protection in Recovery
    mode.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在较新版本中——例如，在macOS Catalina中——你可能需要执行更多全局操作，因为只有在恢复模式下才能禁用系统完整性保护。
- en: Important Note
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Naturally, when changing configurations in Recovery mode, we will need to reboot
    the host, which means that most data will be lost. Nevertheless, in cases where
    we are dealing with persistent malware or a reverse shell listening to a certain
    port and waiting for attackers to connect, the analysis of the memory dump obtained
    after a reboot can still give us useful information.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 自然地，在恢复模式下更改配置时，我们需要重启主机，这意味着大部分数据将丢失。然而，在处理持久性恶意软件或一个反向shell监听某个端口并等待攻击者连接的情况下，重启后获取的内存转储分析仍然能为我们提供有用的信息。
- en: 'To disable system integrity protection, go to Recovery mode. To do this, reboot
    the system and press *command* + *R* (if you are using a virtual machine and use
    Windows as a host OS, press *Win* + *R*). This will put you in the correct mode.
    In the window that appears, select **Utilities** and **Terminal**:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要禁用系统完整性保护，进入恢复模式。为此，重新启动系统并按下*command* + *R*（如果你使用虚拟机并且主机操作系统是Windows，则按*Win*
    + *R*）。这将使你进入正确的模式。在出现的窗口中，选择**实用工具**和**终端**：
- en: '![Figure 10.6 – Recovery mode'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.6 – 恢复模式'
- en: '](img/Figure_10.6_B17056.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.6_B17056.jpg)'
- en: Figure 10.6 – Recovery mode
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.6 – 恢复模式
- en: 'In the terminal, we need to run the command mentioned earlier:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中，我们需要运行之前提到的命令：
- en: '![Figure 10.7 – Disabling system integrity protection'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.7 – 禁用系统完整性保护'
- en: '](img/Figure_10.7_B17056.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.7_B17056.jpg)'
- en: Figure 10.7 – Disabling system integrity protection
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.7 – 禁用系统完整性保护
- en: As you can see, you have to reboot the system again to apply the changes successfully.
    After the reboot, you can open the main terminal and load `kext` again. This should
    work without errors.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，你需要再次重启系统才能成功应用更改。重启后，你可以打开主终端并再次加载`kext`。这应该不会有错误。
- en: 'After loading `kext`, you need to run a command that will collect the memory
    dump. The command will look like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 加载`kext`后，你需要运行一个命令来收集内存转储。命令将如下所示：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `--format` option is used to specify the format of the memory dump, and
    the `-o` option is needed to specify the path to the output file.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`--format`选项用于指定内存转储的格式，而`-o`选项则用于指定输出文件的路径。'
- en: 'You will end up with a `mem.raw` file containing the raw memory dump. In our
    case, performing the preceding steps looks like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到一个包含原始内存转储的`mem.raw`文件。在我们的案例中，执行上述步骤看起来像这样：
- en: '![Figure 10.8 – Memory acquisition'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.8 – 内存获取'
- en: '](img/Figure_10.8_B17056.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.8_B17056.jpg)'
- en: Figure 10.8 – Memory acquisition
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.8 – 内存获取
- en: 'If you run `ls -lah`, you will see the resulting file:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行`ls -lah`，你将看到生成的文件：
- en: '![Figure 10.9 – The created memory dump'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.9 – 已创建的内存转储'
- en: '](img/Figure_10.9_B17056.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.9_B17056.jpg)'
- en: Figure 10.9 – The created memory dump
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.9 – 已创建的内存转储
- en: 'After that, you can unload the kernel extension using the following command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，你可以使用以下命令卸载内核扩展：
- en: '[PRE2]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This way, we can get a memory dump, but this is only the beginning of the journey.
    To be able to work with this file using Volatility, we need to create an appropriate
    profile. This is what we will talk about in the next section.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们可以获得内存转储，但这只是旅程的开始。为了能够使用Volatility处理这个文件，我们需要创建一个合适的配置文件。这将在下一节中讨论。
- en: Creating a Volatility profile
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Volatility配置文件
- en: 'To create a macOS profile, we will need to install a few additional tools.
    First of all, we will need the Brew package manager, which can be installed by
    following the instructions from the official website: [https://docs.brew.sh/Installation](https://docs.brew.sh/Installation).'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个macOS配置文件，我们需要安装一些额外的工具。首先，我们需要安装Brew包管理器，可以通过访问官方网站的说明进行安装：[https://docs.brew.sh/Installation](https://docs.brew.sh/Installation)。
- en: 'Basically, the only thing you need to do is to run the command located on the
    home page:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，你需要做的就是运行主页上的命令：
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The Brew manager is needed to install the `dwarfdump` that we already know,
    so once `brew` is installed, feel free to run the following command in the terminal:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用Brew管理器来安装我们已经知道的`dwarfdump`，所以一旦安装了`brew`，可以在终端中运行以下命令：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The last thing to download is `KernelDebugKit`. To do this, use this link:
    [https://developer.apple.com/download/all/?q=debug](https://developer.apple.com/download/all/?q=debug).
    Note that in order to gain access, you will need an Apple ID, which you can create
    by clicking on the `Create yours now` link. After entering your ID, you will see
    the **Downloads** page:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后需要下载的是`KernelDebugKit`。为此，请使用此链接：[https://developer.apple.com/download/all/?q=debug](https://developer.apple.com/download/all/?q=debug)。请注意，为了访问该链接，你需要一个Apple
    ID，你可以通过点击`Create yours now`链接来创建。输入你的ID后，你将看到**下载**页面：
- en: '![Figure 10.10 – Apple Developer Downloads page'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.10 – Apple 开发者下载页面'
- en: '](img/Figure_10.10_B17056.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.10_B17056.jpg)'
- en: Figure 10.10 – Apple Developer Downloads page
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.10 – Apple 开发者下载页面
- en: On this page, you need to find the KDK that corresponds to the version of your
    OS. For example, **KDK 12.1** shown in the screenshot corresponds to the latest
    macOS Monterey. After downloading the KDK, you need to install it. This can be
    done in a standard way. A double-click will mount the file and open the installer,
    which will guide you through the installation process.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在此页面上，你需要找到与你的操作系统版本对应的KDK。例如，屏幕截图中显示的**KDK 12.1**对应的是最新的macOS Monterey。下载KDK后，你需要安装它。此过程可以通过标准方式完成，双击将挂载文件并打开安装程序，安装程序将引导你完成安装过程。
- en: You can verify that everything is installed by using the `ls` command, as after
    installation, your version of the KDK should appear in `/Library/Developer/KDKs`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`ls`命令验证一切是否已安装，因为安装后，你的KDK版本应该出现在`/Library/Developer/KDKs`中。
- en: 'If the KDK is there, you can start getting debug info from the kernel. To do
    this, we use `dwarfdump`, which should get the following parameters:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果KDK已存在，你可以开始从内核获取调试信息。为此，我们使用`dwarfdump`，它应该使用以下参数：
- en: '`-arch`: Architecture – we specify `i386` for 32-bit systems and `x86_64` for
    64-bit systems'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-arch`：架构 – 我们为32位系统指定`i386`，为64位系统指定`x86_64`'
- en: '`-i`: The path to the `kernel.dSYM` file, located in KDK'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-i`：指向KDK中`kernel.dSYM`文件的路径'
- en: We also need to redirect the output to a file with the `dwarfdump` extension.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要将输出重定向到一个以`dwarfdump`为扩展名的文件。
- en: 'Thus, if we work with the 64-bit macOS Mojave, the command will look like this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们使用64位macOS Mojave，命令将如下所示：
- en: '[PRE5]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In our case, the preceding steps look like this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，前面的步骤如下所示：
- en: '![Figure 10.11 – Getting the dwarf debug info from the kernel'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.11 – 从内核获取dwarf调试信息'
- en: '](img/Figure_10.11_B17056.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.11_B17056.jpg)'
- en: Figure 10.11 – Getting the dwarf debug info from the kernel
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.11 – 从内核获取dwarf调试信息
- en: 'As a result, we get the `10.14.6_x64.dwarfdump` file, which we place in the
    `dwarf` directory. Next, we will need Volatility. In the terminal, go to `volatility/tools/mac`
    and execute the `convert.py` script, passing it the path to the created `dwarfdump`
    and the path to the output file as arguments. In our case, the command will look
    like this:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，我们得到了`10.14.6_x64.dwarfdump`文件，将其放入`dwarf`目录。接下来，我们将需要Volatility。在终端中，进入`volatility/tools/mac`并执行`convert.py`脚本，将创建的`dwarfdump`路径和输出文件路径作为参数传递。在我们的案例中，命令如下所示：
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will create a Linux-style output readable by Volatility. After that, we
    need to create the types from the converted file:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个Linux风格的输出，可以被Volatility读取。之后，我们需要从转换后的文件中创建类型：
- en: '[PRE7]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, we need to generate symbol information using `dsymutil`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要使用`dsymutil`生成符号信息：
- en: '[PRE8]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Once again, we pass the information about the architecture used and the path
    to the kernel file from the KDK as arguments. The output is redirected to a file
    with the `.dsymutil` extension.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们传递使用的架构信息和KDK中的内核文件路径作为参数。输出被重定向到一个以`.dsymutil`为扩展名的文件。
- en: 'Our last step is to create a ZIP file of the `.dsymutil` and `.vtypes` files.
    For this purpose, we can use the following command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最后一步是创建一个包含`.dsymutil`和`.vtypes`文件的ZIP文件。为此，我们可以使用以下命令：
- en: '[PRE9]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Finally, you will get your profile. To use the newly created profile, simply
    put it in the `volatility/plugins/overlays/mac` directory.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你将获得你的配置文件。要使用新创建的配置文件，只需将其放入`volatility/plugins/overlays/mac`目录中。
- en: Important Note
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The `convert.py` script works fine with versions prior to High Sierra. With
    newer versions, you may have some problems because the structure of `dwarf` has
    changed slightly. To solve this problem, you will need to modify the `convert.py`
    script.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`convert.py` 脚本在 High Sierra 之前的版本中运行良好。对于较新的版本，可能会遇到一些问题，因为 `dwarf` 的结构发生了一些变化。为了解决这个问题，你需要修改
    `convert.py` 脚本。'
- en: 'Creating a macOS profile is not an easy task. However, if you need to analyze
    a version of macOS up to and including High Sierra, you can use a ready-to-use
    profile from GitHub: [https://github.com/volatilityfoundation/profiles/tree/master/](https://github.com/volatilityfoundation/profiles/tree/master/)`Mac`.
    In contrast, if you use proprietary solutions such as Volexity Surge Collect,
    you will have profiles ready for even the newest versions of macOS. If your target
    host runs on Intel, then profiles from Volexity can be used immediately for analysis
    with Volatility. With the M1, the situation is a bit different. Since this is
    an ARM architecture chip, there are additional arguments that should be passed
    in the Volatility command line. These arguments are the `meta.json` file created
    by Surge Collect. In this case, when you run Volatility, in addition to the standard
    options and profile, you also add the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 macOS 配置文件并不是一件容易的事。不过，如果你需要分析一个包括 High Sierra 在内的 macOS 版本，你可以使用 GitHub
    上现成的配置文件：[https://github.com/volatilityfoundation/profiles/tree/master/](https://github.com/volatilityfoundation/profiles/tree/master/)`Mac`。相比之下，如果使用
    Volexity Surge Collect 等专有解决方案，你将能获取到甚至最新版本 macOS 的配置文件。如果目标主机运行的是 Intel 处理器，那么可以直接使用
    Volexity 提供的配置文件来配合 Volatility 进行分析。对于 M1 处理器，情况稍有不同。由于这是一个 ARM 架构芯片，必须在 Volatility
    命令行中传入一些额外的参数。这些参数即是 Surge Collect 创建的 `meta.json` 文件。在这种情况下，当你运行 Volatility 时，除了标准选项和配置文件外，还需要添加以下内容：
- en: '`--shift – value`, which corresponds to the `KaslrSlide` parameter in `meta.json`'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--shift – value`，对应 `meta.json` 中的 `KaslrSlide` 参数'
- en: '`--dtb – value`, which corresponds to the `dtb` parameter in `meta.json`'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--dtb – value`，对应 `meta.json` 中的 `dtb` 参数'
- en: 'Thus, running Volatility will look like this:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，运行 Volatility 的命令应该是这样的：
- en: '[PRE10]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Another important point is that to analyze memory dumps taken from Macintoshes
    on M1 in Volatility, you need ARM64 support. In this case, you can use the `Volatility`
    fork: [https://github.com/tsahee/volatility/tree/arm64](https://github.com/tsahee/volatility/tree/arm64).'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的事项是，要在 Volatility 中分析来自 M1 Mac 的内存转储，需要 ARM64 支持。在这种情况下，你可以使用 `Volatility`
    的分支版本：[https://github.com/tsahee/volatility/tree/arm64](https://github.com/tsahee/volatility/tree/arm64)。
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Compared to the OSes discussed earlier, macOS is the most difficult to work
    with. Most of the tools that support creating memory dumps on newer versions of
    macOS are paid, and the freeware tools support dumping only for macOS versions
    up to Catalina.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前讨论的操作系统相比，macOS 是最难处理的。大多数支持在新版本 macOS 上创建内存转储的工具都是付费的，而免费工具仅支持创建到 Catalina
    版本的内存转储。
- en: A further difficulty is launching the tools themselves. Due to macOS security
    features, it is necessary to change a number of settings in order to run programs
    from third-party sources. This is especially true for tools that use `kext` loading.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个困难是启动工具本身。由于 macOS 的安全功能，需要更改一些设置才能运行来自第三方来源的程序。尤其是对于使用 `kext` 加载的工具，情况尤为如此。
- en: Another difficulty is the creation of Volatility profiles for newer versions
    of macOS. This is due to the fact that creating a profile requires converting
    a `dwarf` file into a format recognized by Volatility, and the scripts provided
    by Volatility developers and found in the official GitHub repository do not work
    with the latest versions of macOS.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个难点是为新版本的 macOS 创建 Volatility 配置文件。这是因为创建配置文件需要将 `dwarf` 文件转换为 Volatility
    可识别的格式，而 Volatility 开发者提供的脚本和官方 GitHub 仓库中的脚本并不适用于最新版本的 macOS。
- en: Given all the difficulties that can be encountered when creating a macOS memory
    dump in a form suitable for analysis, before starting this process, we recommend
    that you assess the situation, consider the pros and cons, and weigh up the need
    to create a memory dump very carefully.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于创建适合分析的 macOS 内存转储过程中可能遇到的种种困难，在开始这个过程之前，我们建议你评估一下情况，权衡利弊，仔细考虑是否有必要创建内存转储。
- en: In this chapter, we have covered the process of creating memory dumps on macOS
    systems. The next topic to be covered is an equally fascinating one – examining
    the obtained memory dumps.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经介绍了在 macOS 系统上创建内存转储的过程。接下来的主题同样令人着迷——分析获得的内存转储。
