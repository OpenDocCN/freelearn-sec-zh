- en: Metasploit Essentials
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metasploit基础知识
- en: The Metasploit project is a tool that is used for penetration testing, as well
    as IDS signature capturing. Under this project comes the Metasploit Framework
    subproject, which is open source and free to use. It has the ability to develop
    and execute exploit codes against a target. Metasploit was originally created
    by H.D Moore in 2003 and was acquired by Rapid7 in 2009. Metasploit Framework
    is one of the most widely used tools of the decade. Whether you're performing
    proper reconnaissance to post-exploitation in the network, almost all penetration
    tests use Metasploit.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit项目是用于渗透测试和IDS签名捕获的工具。在这个项目下有Metasploit Framework子项目，它是开源和免费使用的。它具有针对目标开发和执行利用代码的能力。Metasploit最初是由H.D
    Moore在2003年创建的，并于2009年被Rapid7收购。Metasploit Framework是十年来最广泛使用的工具之一。无论您是在网络中执行适当的侦察还是进行后期利用，几乎所有的渗透测试都使用Metasploit。
- en: In this chapter, we will start with an introduction to Metasploit Framework
    and look at its terminology. Then, we will install and set up Metasploit on different
    platforms so that we can learn how to interact with Metasploit Framework using
    some basic commands.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将从介绍Metasploit Framework的基本术语开始，然后安装和设置Metasploit在不同平台上，以便学习如何使用一些基本命令与Metasploit
    Framework进行交互。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中涵盖以下主题：
- en: Introduction to Metasploit Framework
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit Framework介绍
- en: Metasploit Framework terminology
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit Framework术语
- en: Metasploit installation and setup
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit安装和设置
- en: Getting started with Metasploit Framework
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用Metasploit Framework
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following are the technical requirements you''ll need for this chapter:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章所需的技术要求：
- en: Metasploit Framework v5.0.74 ([https://github.com/rapid7/metasploit-framework](https://github.com/rapid7/metasploit-framework))
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit Framework v5.0.74 ([https://github.com/rapid7/metasploit-framework](https://github.com/rapid7/metasploit-framework))
- en: A *nix-based system or a Microsoft Windows-based system
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于*nix系统或Microsoft Windows系统
- en: Nmap
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nmap
- en: Introduction to Metasploit Framework
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metasploit Framework介绍
- en: Metasploit is the first tool that comes to mind whenever we think about penetration
    testing or exploitation. Metasploit Framework is a subproject of the Metasploit
    project. The Metasploit project helps us by providing information about vulnerabilities,
    as well as helping us with penetration testing.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit是我们在考虑渗透测试或利用时首先想到的工具。Metasploit Framework是Metasploit项目的一个子项目。Metasploit项目通过提供有关漏洞的信息以及帮助我们进行渗透测试来帮助我们。
- en: Metasploit first appeared in 2003\. It was developed by H.D Moore using Perl,
    but was later ported to Ruby in 2007\. By October 2009, Rapid7 had acquired the
    Metasploit project. Rapid 7 then added commercial versions of Metasploit Express
    and Metasploit Pro. This is when the evolution of Metasploit Framework began.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit首次出现在2003年。它是由H.D Moore使用Perl开发的，但后来在2007年转移到了Ruby。到2009年10月，Rapid7已经收购了Metasploit项目。然后Rapid7添加了Metasploit
    Express和Metasploit Pro的商业版本。这是Metasploit Framework演变的开始。
- en: Metasploit Framework is an open source framework that allows us to write, test,
    and execute exploit code. It can also be considered a collection of tools for
    penetration testing and exploitation.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit Framework是一个开源框架，允许我们编写、测试和执行利用代码。它也可以被认为是用于渗透测试和利用的一套工具。
- en: In this chapter, we will cover the basics of installing and using Metasploit
    Framework.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍安装和使用Metasploit Framework的基础知识。
- en: Metasploit Framework terminology
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metasploit Framework术语
- en: 'Now, let''s go through the basic terminology of Metasploit Framework. We will
    be using these terms often in this book, so it''s best to understand them thoroughly
    before we deep dive into **Metasploit Framework **(**MSF**) and its usage:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来了解Metasploit Framework的基本术语。我们将在本书中经常使用这些术语，所以最好在深入研究**Metasploit Framework**（**MSF**）及其用法之前彻底理解它们：
- en: '**Exploits**: When Metasploit starts up, it shows the count of publicly available
    exploits that are already available in the framework. An exploit is a piece of
    code that takes advantage of a vulnerability and gives us the desired output.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Exploits**：当Metasploit启动时，它显示了框架中已经可用的公开利用的数量。利用是利用漏洞并给出我们想要的输出的代码片段。'
- en: '**Payload**: This is a piece of code that is delivered to the target system
    or an application via an exploit to perform an act of our choice. Payloads can
    actually be divided into three main types: singles, stagers, and stages:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Payload**：这是通过利用传递到目标系统或应用程序的代码片段，以执行我们选择的操作。有效载荷实际上可以分为三种主要类型：单个、分段和阶段：'
- en: '**Singles**: These payloads are standalone and are usually used to perform
    simple tasks, such as opening `notepad.exe `files and adding users.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Singles**：这些有效载荷是独立的，通常用于执行简单的任务，比如打开`notepad.exe`文件和添加用户。'
- en: '**Stagers**: This sets up a connection between the two systems. Then, stages
    are downloaded by them to the victim''s machine.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Stagers**：这在两个系统之间建立连接。然后，它们将阶段下载到受害者的机器上。'
- en: '**Stages**: These can be considered the components of a payload. They provide
    different features, such as access to the command shell, the ability to run executables,
    and upload and download files and don''t need to have a size limit. One example
    of such a feature is a Meterpreter.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Stages**：这些可以被认为是有效载荷的组成部分。它们提供不同的功能，比如访问命令shell、运行可执行文件以及上传和下载文件，并且不需要有大小限制。这种功能的一个例子是Meterpreter。'
- en: 'The other types of payloads are as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 其他类型的有效载荷如下：
- en: '**Inline (non-staged)**: Exploit code containing full shellcode to perform
    a specific task.'
  id: totrans-26
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Inline (non-staged)**：包含完整shellcode的利用代码，用于执行特定任务。'
- en: '**Staged**: This works along with stage payloads to perform a specific task.
    The stager establishes a communication channel between the attacker and the victim
    and sends a staged payload that will be executed on the remote host.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Staged**：这与阶段有效载荷一起工作，执行特定任务。分段器在攻击者和受害者之间建立通信通道，并发送一个将在远程主机上执行的分段有效载荷。'
- en: '**Meterpreter**: This is short for *Meta Interpreter* and operates through
    DLL injection. It is loaded in-memory and leaves no trace on disk.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Meterpreter**：这是*Meta Interpreter*的缩写，通过DLL注入运行。它加载在内存中，不留下磁盘上的痕迹。'
- en: '**PassiveX**: This uses ActiveX control to create a hidden instance of Internet
    Explorer. It communicates with the attacker via HTTP requests and responses.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PassiveX**：这使用ActiveX控件创建Internet Explorer的隐藏实例。它通过HTTP请求和响应与攻击者通信。'
- en: '**NoNX**: This is used to bypass DEP protection.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NoNX**：这用于绕过DEP保护。'
- en: '**Ord**: These are extremely small-sized payloads that work on all versions
    of Windows. However, they are unstable and rely on `ws2_32.dll` to be loaded in
    the exploitation process.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ord**：这些是在所有版本的Windows上都可以工作的极小型有效载荷。但是，它们不稳定，并依赖于`ws2_32.dll`在利用过程中被加载。'
- en: '**IPv6**: This is built to work on IPv6 hosts.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IPv6**：这是为IPv6主机设计的。'
- en: '**Reflective DLL** **Injection**: Created by Stephen Fewer, this is a technique
    where a staged payload is injected into a compromised host process running in
    memory, while never touching the host hard drive.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Reflective DLL Injection**：由Stephen Fewer创建，这是一种技术，其中分段有效载荷被注入到运行在内存中的受损主机进程中，而从不触及主机硬盘。'
- en: '**Auxiliary:** Metasploit Framework is equipped with hundreds of auxiliary
    modules that can be used to perform different tasks. These modules can be considered
    small tools that do not exploit anything. Instead, they aid us in the exploitation
    process.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Auxiliary**：Metasploit框架配备了数百个辅助模块，可用于执行不同的任务。这些模块可以被视为不利用任何东西的小工具。相反，它们在利用过程中帮助我们。'
- en: '**Encoders:** An encoder converts information (in this case, assembly instructions)
    into another form that, upon being executed, will give us the same result. Encoders
    are used to avoid the detection of a payload when it is delivered to the target
    system/application. Since most IDSes/IPSes that are configured in the organization''s
    network are signature-based, when encoding the payload, it will change the whole
    signature and bypass the security mechanism with ease. The most well-known encoder
    is `x86/shikata_ga_nai`. This is a polymorphic XOR additive feedback encoder,
    which means it generates a different output every time it''s used. It was the
    hardest to detect when it first came out. It is still pretty handy when used with
    multiple iterations. However, iterations must be used carefully and always tested
    first; they may not work as expected, and with every iteration, the size of the
    payload increases.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Encoders**：编码器将信息（在这种情况下是汇编指令）转换为另一种形式，执行后将给我们相同的结果。编码器用于避免在传递到目标系统/应用程序时检测有效载荷。由于大多数在组织网络中配置的IDS/IPS都是基于签名的，因此在对有效载荷进行编码时，它将改变整个签名并轻松地绕过安全机制。最著名的编码器是`x86/shikata_ga_nai`。这是一种多态的XOR加反馈编码器，这意味着每次使用时都会生成不同的输出。它在首次推出时是最难检测到的。当与多次迭代一起使用时，它仍然非常有用。但是，必须小心使用迭代，并始终首先进行测试；它们可能不会按预期工作，并且随着每次迭代，有效载荷的大小都会增加。'
- en: '**NOP generators:** An NOP generator is used to generate a series of random
    bytes, which are equivalent to the traditional NOP sleds, except they don''t have
    any predictable patterns. The NOP sled can also be used to bypass standard IDS
    and IPS NOP sled signatures (`NOP Sled - \x90\x90\x90`).'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NOP生成器**：NOP生成器用于生成一系列随机字节，这些字节等同于传统的NOP滑梯，只是它们没有任何可预测的模式。NOP滑梯也可以用于绕过标准的IDS和IPS
    NOP滑梯签名（`NOP Sled - \x90\x90\x90`）。'
- en: '**Project:** This is a container that''s used to store data and credentials
    during a penetration testing activity. It is more commonly used in the Metasploit
    Pro version.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Project**：这是一个容器，用于在渗透测试活动期间存储数据和凭据。在Metasploit Pro版本中更常用。'
- en: '**Workspace:** A workspace is the same as a project, but it''s only used in
    Metasploit Framework.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Workspace**：工作区与项目相同，但仅在Metasploit框架中使用。'
- en: '**Task:** This is any action we perform in Metasploit.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Task**：这是我们在Metasploit中执行的任何操作。'
- en: '**Listener**: A listener waits for an incoming connection from the exploited
    target and manages the connected target shell.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Listener**：监听器等待来自被攻击目标的传入连接，并管理连接的目标shell。'
- en: '**Shell**: A shell is a console, such as an interface, that gives us access
    to the remote target.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Shell**：Shell是一个控制台，比如一个接口，它让我们可以访问远程目标。'
- en: '**Meterpreter**: On the official website, Meterpreter is defined as follows:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Meterpreter**：在官方网站上，Meterpreter的定义如下：'
- en: '"An advanced, dynamically extensible payload that uses in-memory DLL injection
    stagers and is extended over the network at runtime. It communicates over the
    stager socket and provides a comprehensive client-side Ruby API."'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: “一种高级的、动态可扩展的有效载荷，使用内存中的DLL注入分段器，并在运行时通过网络进行扩展。它通过分段器套接字进行通信，并提供全面的客户端端Ruby
    API。”
- en: Now that we have gone through the basic terminology, let's look at how to install
    Metasploit and set it up.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经了解了基本术语，让我们看看如何安装Metasploit并设置它。
- en: Installing and setting up Metasploit
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和设置Metasploit
- en: 'Installing Metasploit is very easy, and its setup process is supported by different
    operating systems. Metasploit can be installed on the following systems:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Metasploit非常容易，并且其设置过程受到不同操作系统的支持。Metasploit可以安装在以下系统上：
- en: '*nix-based systems (Ubuntu, macOS, and so on)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*nix系统（Ubuntu、macOS等）'
- en: Windows-based systems
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于Windows的系统
- en: The steps for installing Metasploit are almost identical for all the supported
    OSes. The only difference is when you need to perform a command-line installation
    of it.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Metasploit的步骤对所有支持的操作系统几乎是相同的。唯一的区别是在需要执行命令行安装时。
- en: Installing Metasploit Framework on *nix
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在*nix上安装Metasploit框架
- en: 'Before we can start using Metasploit, we need to install it. Follow these steps:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用Metasploit之前，我们需要安装它。按照以下步骤进行：
- en: 'Installing Metasploit on *nix can be done by downloading and executing the
    Metasploit Nightly Installer for Linux and macOS systems or by using the following
    commands (CLI):'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在*nix上安装Metasploit可以通过下载并执行适用于Linux和macOS系统的Metasploit夜间安装程序，或者使用以下命令（CLI）来完成：
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了上述命令的输出：
- en: '![](img/de2445fd-1ed5-435b-bee7-ee1eb8ab1846.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de2445fd-1ed5-435b-bee7-ee1eb8ab1846.png)'
- en: 'The preceding command will download a shell script that will import the Rapid7
    signing key (PGP) and install the packages that are required for all supporting
    Linux and macOS systems:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将下载一个shell脚本，该脚本将导入Rapid7签名密钥（PGP）并安装所有支持的Linux和macOS系统所需的软件包：
- en: '![](img/aada9215-8ca3-447a-845b-78ffc7c2af5c.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aada9215-8ca3-447a-845b-78ffc7c2af5c.png)'
- en: 'Once the installation process is complete, running Metasploit is pretty simple.
    In the Terminal, just type the following command:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装过程完成后，运行Metasploit非常简单。在终端中，只需输入以下命令：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的屏幕截图显示了前面命令的输出：
- en: '![](img/9469fb1a-0cfb-4458-b8e8-9297071fba55.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9469fb1a-0cfb-4458-b8e8-9297071fba55.png)'
- en: 'Note: Metasploit Framework v5.0.0 was released with lots of new features. You
    can take a look at these features and more at [https://blog.rapid7.com/2019/01/10/metasploit-framework-5-0-released/](https://blog.rapid7.com/2019/01/10/metasploit-framework-5-0-released/).'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：Metasploit Framework v5.0.0发布了许多新功能。您可以在[https://blog.rapid7.com/2019/01/10/metasploit-framework-5-0-released/](https://blog.rapid7.com/2019/01/10/metasploit-framework-5-0-released/)上查看这些功能和更多信息。
- en: We should now see Metasploit Framework up and running. When the MSF console
    is loaded for the first time, it automatically creates a database using PostgreSQL.
    This database is used to store any data that's collected if we perform scans,
    exploits, and more.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在应该看到Metasploit Framework已经启动。当首次加载MSF控制台时，它会自动使用PostgreSQL创建一个数据库。如果我们执行扫描、利用等操作，该数据库将用于存储收集到的任何数据。
- en: 'Every week, new exploits and other modules are added to Metasploit, so it''s
    always a good idea to update Metasploit every 2 weeks. This can be done by using
    the following command:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每周都会向Metasploit添加新的利用和其他模块，因此定期更新Metasploit是一个很好的主意。可以使用以下命令来完成：
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的屏幕截图显示了前面命令的输出：
- en: '![](img/8335fcb7-8b65-478e-b960-c33077b71274.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8335fcb7-8b65-478e-b960-c33077b71274.png)'
- en: At the time of writing this book, Metasploit Framework provides 1,991 exploit
    modules, 1,089 auxiliary modules, 340 post modules, 560 payload modules, 45 encoder
    modules, 10 nops, and 7 evasion modules.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，Metasploit Framework提供了1,991个利用模块，1,089个辅助模块，340个后置模块，560个有效载荷模块，45个编码器模块，10个nops和7个规避模块。
- en: Installing Metasploit Framework on Windows
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上安装Metasploit Framework
- en: 'Now that we have learned how to install Metasploit Framework on *nix-based
    systems, let''s take a quick look at how to install Metasploit Framework on a
    Windows environment:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何在*nix系统上安装Metasploit Framework，让我们快速看一下如何在Windows环境中安装Metasploit
    Framework：
- en: 'First, we need to download the Nightly installer for Windows from the following
    URL:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要从以下URL下载Windows的Nightly安装程序：
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Upon entering this URL, you should see the following output:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 输入此URL后，您应该看到以下输出：
- en: '![](img/48aa3b71-1c3c-4dd3-89f8-c2dc7fbdedbf.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/48aa3b71-1c3c-4dd3-89f8-c2dc7fbdedbf.jpg)'
- en: Once the download is complete, we can install it by double-clicking the MSI
    file. A new window will open, as shown in the following screenshot.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，我们可以通过双击MSI文件来安装它。一个新窗口将打开，如下面的屏幕截图所示。
- en: 'We need to follow the standard installation steps (Next, Next, I Agree, and
    then Install) to install Metasploit on Windows:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要按照标准的安装步骤（下一步，下一步，我同意，然后安装）在Windows上安装Metasploit：
- en: '![](img/b8b65933-889d-4d84-986f-21ed7ce6b261.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b8b65933-889d-4d84-986f-21ed7ce6b261.png)'
- en: It is recommended that you go through the Terms and Conditions of the tool.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您阅读该工具的条款和条件。
- en: 'After the installation is complete, we still won''t be able to run Metasploit
    from the command prompt, as shown in the following screenshot. This is because
    the path variable hasn''t been set, so the system doesn''t know where to look
    for the `msfconsole` binary when the command is executed:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们仍然无法从命令提示符中运行Metasploit，如下面的屏幕截图所示。这是因为路径变量尚未设置，因此系统不知道在执行命令时在哪里查找`msfconsole`二进制文件：
- en: '![](img/7f2f1c26-bbab-438b-aa92-316b4848e704.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7f2f1c26-bbab-438b-aa92-316b4848e704.png)'
- en: 'Let''s locate the `msfconsole` binary. In our case, it can be found here:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们找到`msfconsole`二进制文件。在我们的情况下，可以在这里找到：
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output of the preceding command can be seen in the following screenshot:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的输出可以在下面的屏幕截图中看到：
- en: '![](img/5a46c212-d447-4e42-9ca8-edc5cae6f507.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5a46c212-d447-4e42-9ca8-edc5cae6f507.png)'
- en: 'Now, we need to add this directory to our path by typing the following command:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要通过输入以下命令将此目录添加到我们的路径中：
- en: '[PRE5]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This can be seen in the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以在下面的屏幕截图中看到：
- en: '![](img/0d57c333-3cf9-4003-a2f3-129f8c2871c4.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0d57c333-3cf9-4003-a2f3-129f8c2871c4.png)'
- en: 'Now that the path variable has been set, we will be able to launch Metasploit
    from Command Prompt:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在路径变量已经设置，我们将能够从命令提示符中启动Metasploit：
- en: '![](img/88b362fa-f3a7-493a-82aa-0b166584a2b8.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/88b362fa-f3a7-493a-82aa-0b166584a2b8.png)'
- en: Running the aforementioned command will start up Metasploit and its console.
    Now that we have gained access to the MSF console, let's start looking at the
    basics of Metasploit Framework.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述命令将启动Metasploit及其控制台。现在我们已经获得了对MSF控制台的访问权限，让我们开始了解Metasploit Framework的基础知识。
- en: Getting started with Metasploit Framework
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Metasploit Framework
- en: With the installation complete, we can move on and look at Metasploit Framework's
    usage. The most common way of interacting with Metasploit Framework is through
    `msfconsole`. The console provides all the functionalities and options that are
    available in a very simplistic command line for efficient testing and exploitation
    (infiltration).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以继续查看Metasploit Framework的使用。与Metasploit Framework进行交互的最常见方式是通过`msfconsole`。控制台提供了一个非常简单的命令行，用于进行高效的测试和利用（渗透）的所有功能和选项。
- en: Interacting with Metasploit Framework using msfconsole
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用msfconsole与Metasploit Framework进行交互
- en: 'You can interact with MSF console either in **normal mode**, using the `msfconsole`
    command, or you can run the MSF console command in **Quiet mode**. The only difference
    between these modes is the absence of errors, warnings, and banners in the console.
    Running in **normal mode** will make a cool MSF banner appear. In **Quiet mode**,
    you can interact with the MSF console, which can be done by executing the `msfconsole
    -q` command:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以以**正常模式**或**安静模式**运行MSF控制台。这两种模式之间唯一的区别是控制台中没有错误、警告和横幅。在**正常模式**下，将出现一个很酷的MSF横幅。在**安静模式**下，您可以与MSF控制台交互，方法是执行`msfconsole
    -q`命令：
- en: '![](img/ac349d1c-129e-4b9a-af85-30c9617b9d10.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac349d1c-129e-4b9a-af85-30c9617b9d10.png)'
- en: There are other MSF console options available that can be used, according to
    your situation and needs. For example, if you want to run an MSF console without
    any database support, you can always execute the `**msfconsole -qn**` command.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的情况和需求，还有其他可用的MSF控制台选项。例如，如果您想要在没有任何数据库支持的情况下运行MSF控制台，您可以随时执行`**msfconsole
    -qn**`命令。
- en: 'You can''t execute any commands or load any plugins with the `db_` prefix in
    them if the database hasn''t been initialized:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据库尚未初始化，则无法执行任何带有`db_`前缀的命令或加载任何插件：
- en: '![](img/eced6d9e-ee49-4221-a912-5b4c802f2ba8.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eced6d9e-ee49-4221-a912-5b4c802f2ba8.png)'
- en: 'When you try to load a plugin from the console, you''ll get the following uninitialized
    error:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当您尝试从控制台加载插件时，您将收到以下未初始化错误：
- en: '![](img/5c27413c-019e-4692-964e-83799e621be9.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5c27413c-019e-4692-964e-83799e621be9.png)'
- en: 'Here, we used the `-x` option in `msfconsole`. As you may have guessed, this
    switch is used to execute MSF-supported commands inside the console. We can also
    execute shell commands in the console since Metasploit passes these commands to
    our default shell to use as arguments:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在`msfconsole`中使用了`-x`选项。正如你可能已经猜到的那样，这个开关用于在控制台内执行MSF支持的命令。我们还可以在控制台中执行shell命令，因为Metasploit会将这些命令传递给我们的默认shell以用作参数：
- en: '![](img/bb4c5bfd-a538-4265-a2ee-0b38401ab879.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bb4c5bfd-a538-4265-a2ee-0b38401ab879.png)'
- en: In the preceding command, we echoed the `WELCOME TO METASPLOIT FRAMEWORK` string
    from the MSF console and exited. To check all the options that are available,
    you can execute the `msfconsole -h` command. Let's now go through the most basic
    and most common commands that are used in the MSF console.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述命令中，我们从MSF控制台中回显了`WELCOME TO METASPLOIT FRAMEWORK`字符串并退出。要查看所有可用的选项，可以执行`msfconsole
    -h`命令。现在让我们来看看在MSF控制台中使用的最基本和最常用的命令。
- en: MSF console commands
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MSF控制台命令
- en: 'The MSF console commands can be categorized as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: MSF控制台命令可以分为以下几类：
- en: '**Core MSF console commands:** These commands are the most common and general-purpose
    commands that are used in the MSF console.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**核心MSF控制台命令：**这些命令是在MSF控制台中使用的最常见和通用的命令。'
- en: '**Module management commands:** MSF modules are managed using these commands.
    You can edit, load, search, and use Metasploit modules with the help of these
    commands.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块管理命令：**使用这些命令管理MSF模块。您可以使用这些命令编辑、加载、搜索和使用Metasploit模块。'
- en: '**MSF job management commands:** Using these commands, you can handle Metasploit
    module job operations such as creating a job using a handler, listing the jobs
    running in the background, and killing and renaming jobs.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MSF作业管理命令：**使用这些命令，您可以处理Metasploit模块作业操作，比如使用处理程序创建作业，列出后台运行的作业，杀死和重命名作业。'
- en: '**Resource script management commands:** When using resource scripts, you can
    use these commands to perform script execution in the console. You can either
    give a stored script file for execution or store the commands that are used at
    the start of the MSF console to a file.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源脚本管理命令：**在使用资源脚本时，可以使用这些命令在控制台中执行脚本。您可以为执行提供一个存储的脚本文件，或者将在MSF控制台启动时使用的命令存储到文件中。'
- en: '**Backend database commands:** These commands are used to manage the database;
    that is, to check for a DB connection, set up the connection and disconnect it,
    restore/import the DB in MSF, back up/export DBs out of MSF, and list the saved
    information related to the target.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后端数据库命令：**这些命令用于管理数据库；即检查DB连接，设置连接并断开连接，在MSF中还原/导入DB，从MSF中备份/导出DB，并列出与目标相关的保存信息。'
- en: '**Credentials management commands:** You can view and manage the saved credentials
    using the `creds` command.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**凭据管理命令：**您可以使用`creds`命令查看和管理保存的凭据。'
- en: '**Plugin commands:** The plugins in the MSF console can be managed using plugin
    commands. These commands are available for all the plugins that are loaded.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**插件命令：**可以使用插件命令管理MSF控制台中的插件。这些命令适用于所有加载的插件。'
- en: 'To learn how to use the `msfconsole` command, please refer to the following
    URL: [https://www.offensive-security.com/metasploit-unleashed/msfconsole-commands/](https://www.offensive-security.com/metasploit-unleashed/msfconsole-commands/).'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何使用`msfconsole`命令，请参考以下网址：[https://www.offensive-security.com/metasploit-unleashed/msfconsole-commands/](https://www.offensive-security.com/metasploit-unleashed/msfconsole-commands/)。
- en: The MSF console not only allows us to utilize the vast number of modules in
    it, but it also gives us the option to customize the console itself, according
    to the user. Let's check out how we can customize the console.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: MSF控制台不仅允许我们利用其中的大量模块，还允许我们根据用户的需求自定义控制台。让我们看看如何自定义控制台。
- en: Customizing global settings
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义全局设置
- en: 'Before customizing the console, we need to know the current (default) global
    settings that are being applied to the console:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在自定义控制台之前，我们需要了解当前（默认）应用于控制台的全局设置：
- en: 'This can be done using the `show options` command when Metasploit Framework
    starts:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当Metasploit Framework启动时，可以使用`show options`命令来完成这个操作：
- en: '![](img/1018936a-b8bf-4851-a831-126db557ae97.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1018936a-b8bf-4851-a831-126db557ae97.png)'
- en: 'We can change the prompt (the `msf` text) from these settings. To change the
    prompt and prompt character, we can execute the `set Prompt` and `set PromptChar`
    commands:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以从这些设置中更改提示（`msf`文本）。要更改提示和提示字符，可以执行`set Prompt`和`set PromptChar`命令：
- en: '![](img/4ebb5ead-06ad-41e9-a619-239e4266ed20.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4ebb5ead-06ad-41e9-a619-239e4266ed20.png)'
- en: 'We can even use some extended formats to configure more advanced prompts, as
    follows:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们甚至可以使用一些扩展格式来配置更高级的提示，如下所示：
- en: '![](img/b6f05a77-d1c3-4798-acf1-1c1a580b9475.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b6f05a77-d1c3-4798-acf1-1c1a580b9475.png)'
- en: 'The following are the extended formats that can be used:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可以使用的扩展格式：
- en: '| **Literal** | **Description** |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '|**文字** |**描述**|'
- en: '| `%D` | Current directory |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '|`％D` |当前目录|'
- en: '| `%U` | Current user |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '|`％U` |当前用户|'
- en: '| `%W` | Current workspace |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '|`％W` |当前工作区|'
- en: '| `%T` | Current timestamp |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '|`％T` |当前时间戳|'
- en: '| `%J` | Current number of jobs running |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '|`％J` |当前运行的作业数|'
- en: '| `%S` | Current number of opened sessions |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '|`％S` |当前打开的会话数|'
- en: '| `%L` | Local IP |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '|`％L` |本地IP|'
- en: '| `%H` | Hostname |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '|`％H` |主机名|'
- en: '| `%red` | Set the color to RED |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '|`％red` |将颜色设置为红色|'
- en: '| `%grn` | Set the color to GREEN |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '|`％grn` |将颜色设置为绿色|'
- en: '| `%yel` | Set the color to YELLOW |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '|`％yel` |将颜色设置为黄色|'
- en: '| `%blu` | Set the color to BLUE |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '|`％blu` |将颜色设置为蓝色|'
- en: '| `%mag` | Set the color to MAGENTA |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '|`％mag` |将颜色设置为洋红色|'
- en: '| `%cya` | Set the color to CYAN |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '|`％cya` |将颜色设置为青色|'
- en: '| `%whi` | Set the color to WHITE |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '|`％whi` |将颜色设置为白色|'
- en: '| `%blk` | Set the color to BLACK |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '|`％blk` |将颜色设置为黑色|'
- en: '| `%und` | Underline |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '|`％und` |下划线|'
- en: '| `%bld` | Bold |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '|`％bld` |粗体|'
- en: The same formats can be used to set up prompt characters as well.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的格式也可以用于设置提示字符。
- en: Variable manipulation in MSF
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MSF中的变量操作
- en: Variable manipulation in Metasploit Framework can help users utilize the features
    of the modules to their full extent. As pen testers, sometimes, we need to scan
    a lot of targets and in almost all our testing scenarios, we have to set the options
    required by the Metasploit module. These options, such as the remote host IP/port,
    and the local host IP/port are set for the specific Metasploit module in use.
    The sooner we learn about variable manipulation, the more efficiently we'll be
    able to use the module.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit Framework中的变量操作可以帮助用户充分利用模块的功能。作为渗透测试人员，有时我们需要扫描大量目标，并且在几乎所有的测试场景中，我们都必须设置Metasploit模块所需的选项。这些选项，例如远程主机IP/端口和本地主机IP/端口，是为正在使用的特定Metasploit模块设置的。我们越早学习变量操作，就能越有效地使用模块。
- en: 'Variable manipulation can be achieved using datastores. A datastore is a type
    of variable that has the following functionalities:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用数据存储来实现变量操作。数据存储是一种具有以下功能的变量类型：
- en: Stores data in key/value pairs
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以键/值对的形式存储数据
- en: Enables the MSF console to configure settings at the time of module execution
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使MSF控制台能够在模块执行时配置设置
- en: Enables MSF to pass the values to other modules internally
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使MSF能够将值传递给其他模块内部
- en: 'Datastores are used by various classes to hold option values and other state
    information. There are two types of datastores:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 数据存储由各种类使用，以保存选项值和其他状态信息。有两种类型的数据存储：
- en: '**Module datastore**: This datastore only saves information and options related
    to the loaded module (local declaration). In the MSF console, you can use the
    `set` command to save the module options and the `get` command to fetch the values
    that have been saved:'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块数据存储**：此数据存储仅保存与加载的模块相关的信息和选项（本地声明）。在MSF控制台中，您可以使用`set`命令保存模块选项，并使用`get`命令获取已保存的值：'
- en: '![](img/0aef2212-9ebd-44b6-b829-372bc36de379.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0aef2212-9ebd-44b6-b829-372bc36de379.png)'
- en: As shown in the preceding screenshot, the `smb_version` module was loaded and
    the `RHOSTS` option was set to `192.168.2.17`. But once we unloaded the module
    (using the `back` command), there was no value to set the RHOSTS option globally.
    To set these options globally, we need to use the global datastore.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，加载了`smb_version`模块，并将`RHOSTS`选项设置为`192.168.2.17`。但是一旦我们卸载了模块（使用`back`命令），全局上就没有值来设置RHOSTS选项。要全局设置这些选项，我们需要使用全局数据存储。
- en: '**Global Datastore**: This datastore saves information and options to all the
    modules (global declaration). In the MSF console, you can use the `setg` command
    to save the module options and the `getg` command to fetch:'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全局数据存储**：此数据存储将信息和选项保存到所有模块（全局声明）。在MSF控制台中，您可以使用`setg`命令保存模块选项，并使用`getg`命令获取：'
- en: '![](img/fbb6bc1c-8c60-4c7d-81e4-89378a31bd93.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fbb6bc1c-8c60-4c7d-81e4-89378a31bd93.png)'
- en: In the preceding screenshot, we saved the value `192.168.2.17` in the RHOSTS
    option globally, which means the RHOSTS option will be set in case we use another
    module. If `setg` is used, we can always retrieve the data by using `get` or `getg`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们将值`192.168.2.17`全局保存在RHOSTS选项中，这意味着在使用另一个模块时将设置RHOSTS选项。如果使用`setg`，我们可以始终通过使用`get`或`getg`来检索数据。
- en: 'Executing just the `set` command in the module will show all the available
    options (for both module datastore and the global datastore) that have been saved:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在模块中只执行`set`命令将显示所有已保存的可用选项（用于模块数据存储和全局数据存储）：
- en: '![](img/e06a6059-316a-4a62-a077-403487d71280.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e06a6059-316a-4a62-a077-403487d71280.png)'
- en: In the case of removing the values from the datastores, you can always use the
    `unset` and `unsetg` commands.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在删除数据存储中的值的情况下，您可以始终使用`unset`和`unsetg`命令。
- en: 'Note: If an option is set globally using `setg`, you cannot remove it using
    the `unset` command. Instead, you need to use `unsetg`.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：如果使用`setg`全局设置选项，则无法使用`unset`命令将其删除。相反，您需要使用`unsetg`。
- en: Exploring MSF modules
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索MSF模块
- en: 'All the options and modules available in Metasploit Framework can be accessed
    using the `show` command. Let''s take a look:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit Framework中提供的所有选项和模块都可以使用`show`命令访问。让我们来看一下：
- en: 'To see all the valid parameters for this command, you need to execute the `show
    -h` command in the MSF console, as follows:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看此命令的所有有效参数，您需要在MSF控制台中执行`show -h`命令，如下所示：
- en: '![](img/668ef9fe-1b22-4806-b056-8cd03047e982.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/668ef9fe-1b22-4806-b056-8cd03047e982.png)'
- en: 'To show the auxiliary available in Metasploit Framework, execute the `show
    auxiliary` command, as follows:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要显示Metasploit Framework中可用的辅助功能，执行`show auxiliary`命令，如下所示：
- en: '![](img/abc3952c-eb84-4a26-b840-ad9b0aae2f42.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/abc3952c-eb84-4a26-b840-ad9b0aae2f42.png)'
- en: 'The same command is used to list the other modules and module-specific parameters.
    Alternatively, you can always press the *Tab* button on your keyboard twice to
    see the available parameters for the `show` command:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 相同的命令用于列出其他模块和特定于模块的参数。或者，您可以始终按两次键盘上的*Tab*按钮以查看`show`命令的可用参数：
- en: '![](img/30e15b69-fd4f-4461-8ef5-50c9df89da06.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/30e15b69-fd4f-4461-8ef5-50c9df89da06.png)'
- en: 'For module-specific parameters, just load the module that you want to use and
    then execute the `show` command in it. In this case, we used the `smb_version`
    auxiliary module and pressed the *Tab* button twice to see all the parameters
    available for the `show` command:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于特定于模块的参数，只需加载要使用的模块，然后在其中执行`show`命令。在这种情况下，我们使用了`smb_version`辅助模块，并按两次*Tab*按钮以查看`show`命令可用的所有参数：
- en: '![](img/4fad770a-cccf-465f-8180-aa47db7f7ebc.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4fad770a-cccf-465f-8180-aa47db7f7ebc.png)'
- en: 'We can look at all the evasion options that are available for this particular
    module using the `show evasion` command:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`show evasion`命令可以查看此特定模块可用的所有规避选项：
- en: '![](img/566a293c-b45b-45a7-aa8b-e447cadb01df.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/566a293c-b45b-45a7-aa8b-e447cadb01df.png)'
- en: 'Note: These options are generally used to bypass network filtration endpoints
    such as **intrusion detection/prevention systems** (**IDSes/IPSes**).'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：这些选项通常用于绕过网络过滤终端，如入侵检测/预防系统（IDS/IPS）。
- en: Running OS commands in MSF
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在MSF中运行OS命令
- en: 'One of the features of Metasploit Framework is that we can execute normal shell
    commands from the console. You can execute any shell command that is supported
    by your shell (bash/sh/zsh/csh). In this case, we executed the `whoami && id`
    command from the console. The command was executed and the result was displayed
    in the console itself, as shown in the following screenshot:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit Framework的一个功能是我们可以从控制台执行普通的shell命令。您可以执行任何由您的shell支持的shell命令（bash/sh/zsh/csh）。在这种情况下，我们从控制台执行了`whoami
    && id`命令。命令已执行，并且结果显示在控制台本身中，如下面的屏幕截图所示：
- en: '![](img/e4d22347-6d89-4b9b-a212-b1824791be7c.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4d22347-6d89-4b9b-a212-b1824791be7c.png)'
- en: 'We can also use an interactive bash script from the console using the `/bin/bash
    -i` command or just `/bin/bash` (the `-i` switch is used to run bash in interactive
    mode):'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用控制台中的交互式bash脚本，使用`/bin/bash -i`命令或者`/bin/bash`（`-i`开关用于以交互模式运行bash）：
- en: '![](img/18447378-757f-4ef6-a80f-9d82447a96d6.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/18447378-757f-4ef6-a80f-9d82447a96d6.png)'
- en: 'Note: To get an interactive command prompt in Windows, execute `cmd.exe` in
    the console.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：要在Windows中获得交互式命令提示符，请在控制台中执行`cmd.exe`。
- en: Setting up a database connection in Metasploit Framework
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Metasploit Framework中设置数据库连接
- en: 'One of the coolest features of Metasploit Framework is the use of backend databases
    in order to store all the content related to a target. Follow these steps to set
    up the database when running MSF:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit Framework最酷的功能之一是使用后端数据库来存储与目标相关的所有内容。在运行MSF时，按照以下步骤设置数据库：
- en: 'Check whether the database is connected to MSF using the `db_status` command
    from the console, as follows:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`db_status`命令从控制台检查数据库是否连接到MSF，如下所示：
- en: '![](img/0ebe2b05-1d67-4120-9127-65d9c6cf7b4a.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0ebe2b05-1d67-4120-9127-65d9c6cf7b4a.png)'
- en: 'As shown in the preceding screenshot, the database is yet to be connected.
    We can connect to the database either by using a database config file, a one-liner
    command, or by using a RESTful HTTP API data service (a new feature of MSF 5).
    By default, there won''t be a `database.yml` file, but you can copy the content
    from the `database.yml.example` file. You can edit the file like this:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，数据库尚未连接。我们可以通过使用数据库配置文件、一行命令或使用RESTful HTTP API数据服务（MSF 5的新功能）来连接到数据库。默认情况下，不会有`database.yml`文件，但是您可以从`database.yml.example`文件中复制内容。您可以像这样编辑文件：
- en: '![](img/b44a48a3-9c19-4505-9f85-2efd7a683279.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b44a48a3-9c19-4505-9f85-2efd7a683279.png)'
- en: 'Note: If you don''t initialize and install the database, this method won''t
    work. For more information, go to [https://fedoraproject.org/wiki/Metasploit_Postgres_Setup](https://fedoraproject.org/wiki/Metasploit_Postgres_Setup).'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：如果您不初始化和安装数据库，则此方法将无法工作。有关更多信息，请访问[https://fedoraproject.org/wiki/Metasploit_Postgres_Setup](https://fedoraproject.org/wiki/Metasploit_Postgres_Setup)。
- en: 'Once the file has been edited and saved, you can use the `-y` switch in the
    `db_connect` command to connect to the database:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑并保存文件后，可以在`db_connect`命令中使用`-y`开关连接到数据库：
- en: '![](img/2ed60307-c7f8-4c1b-8ff4-3e82681942f5.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ed60307-c7f8-4c1b-8ff4-3e82681942f5.png)'
- en: 'Let''s check the status once again:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们再次检查状态：
- en: '![](img/823b95d2-8a0b-424b-98aa-80a218309723.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/823b95d2-8a0b-424b-98aa-80a218309723.png)'
- en: As you can see, the console is now connected to the backend database.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，控制台现在已连接到后端数据库。
- en: Loading plugins in MSF
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在MSF中加载插件
- en: 'Plugins are an extended feature in Metasploit Framework. They are used to expand
    the reach of MSF by utilizing the flexibility of the Ruby language. This allows
    the plugin to do virtually anything, from building new automation capabilities
    to providing packet-level content filtering to bypass IDSes/IPSes. Plugins can
    also be used to integrate third-party software such as Nessus, OpenVAS, and Sqlmap
    into the framework. Follow these steps:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 插件是Metasploit Framework中的扩展功能。它们用于通过利用Ruby语言的灵活性来扩展MSF的范围。这允许插件几乎可以做任何事情，从构建新的自动化功能到提供数据包级内容过滤以绕过IDS/IPS。插件还可以用于集成第三方软件，如Nessus、OpenVAS和Sqlmap到框架中。按照以下步骤：
- en: 'To load a plugin, you need to use the `load` command:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要加载插件，您需要使用`load`命令：
- en: '![](img/ff29b263-3386-47c7-a40a-42ca2257b63b.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ff29b263-3386-47c7-a40a-42ca2257b63b.png)'
- en: 'By default, Metasploit comes with some built-in plugins. These can be found
    by pressing the *Tab* button twice after using the `load` command:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，Metasploit带有一些内置插件。在使用`load`命令后，可以通过按两次*Tab*按钮找到这些插件：
- en: '![](img/7c21a5e0-a022-424d-acac-3fc0c33a7d6b.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7c21a5e0-a022-424d-acac-3fc0c33a7d6b.png)'
- en: 'Note: All the available built-in plugins can be found here: [https://github.com/rapid7/metasploit-framework/tree/master/plugins](https://github.com/rapid7/metasploit-framework/tree/master/plugins)'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：所有可用的内置插件都可以在此处找到：[https://github.com/rapid7/metasploit-framework/tree/master/plugins](https://github.com/rapid7/metasploit-framework/tree/master/plugins)
- en: 'Let''s load the OPENVAS plugin by executing the `**load openvas**` command
    in the console. This plugin will be covered in later chapters:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在控制台中执行`**load openvas**`命令来加载OPENVAS插件。此插件将在后续章节中介绍：
- en: '![](img/4a7cb3bf-4765-4c4d-bfdb-2e0995a09519.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4a7cb3bf-4765-4c4d-bfdb-2e0995a09519.png)'
- en: 'Once the plugin has been loaded successfully, you can execute the `**help**`
    command in the console and look for "OpenVAS Commands" to see all the supported
    commands for this specific plugin:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插件成功加载后，您可以在控制台中执行`**help**`命令，并查找“OpenVAS Commands”以查看此特定插件的所有支持命令：
- en: '![](img/e8111ce0-6cb2-428d-8b8c-7d12d7644fde.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e8111ce0-6cb2-428d-8b8c-7d12d7644fde.png)'
- en: You can load custom plugins by copying the `.rb` plugin files in the `<MSF_INSTALL_DIR>/plugins/`
    directory and executing the `load` command with the plugin name.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将`.rb`插件文件复制到`<MSF_INSTALL_DIR>/plugins/`目录中，并使用插件名称执行`load`命令来加载自定义插件。
- en: Using Metasploit modules
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit模块
- en: 'Metasploit modules are very easy to use. In a nutshell, anyone can follow this
    process to get familiar with the modules:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit模块非常易于使用。简而言之，任何人都可以按照此过程熟悉模块：
- en: '![](img/8c958855-a745-4015-a57b-0cdad7f5fb09.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c958855-a745-4015-a57b-0cdad7f5fb09.png)'
- en: 'Let''s use the `smb_version` auxiliary module in this case:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，让我们使用`smb_version`辅助模块：
- en: 'By executing the `use auxiliary/scanner/smb/smb_version` command, we have loaded
    the module in the console:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行`use auxiliary/scanner/smb/smb_version`命令，我们已经在控制台中加载了模块：
- en: '![](img/d695097f-f4d8-4a79-8e93-9f009b17babf.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d695097f-f4d8-4a79-8e93-9f009b17babf.png)'
- en: 'Now, we need to configure the module according to our needs. The available
    options for `smb_version` can be seen by using the `show options` command:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要根据需要配置模块。可以使用`show options`命令查看`smb_version`的可用选项：
- en: '![](img/a3db2380-e5ec-4b3c-a96a-9735d28cec1d.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a3db2380-e5ec-4b3c-a96a-9735d28cec1d.png)'
- en: 'We can use the `set/setg` command to configure the module options. Advanced
    options for `smb_version` are also available and can be shown by using the `show
    advanced` command:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用`set/setg`命令来配置模块选项。`smb_version`的高级选项也可用，并且可以通过使用`show advanced`命令来显示：
- en: '![](img/7464bfba-6a35-465e-828d-233aa27d0ad3.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7464bfba-6a35-465e-828d-233aa27d0ad3.png)'
- en: 'To evade IDS/IPS endpoints, you can set the evasion options for the `smb_version`
    module. Use the `show evasion` command to list all the supported evasion options
    for this module:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了规避IDS/IPS端点，您可以为`smb_version`模块设置规避选项。使用`show evasion`命令列出此模块的所有支持的规避选项：
- en: '![](img/6bd9a927-0e7a-4e96-ba8e-da9ebe50d1a0.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6bd9a927-0e7a-4e96-ba8e-da9ebe50d1a0.png)'
- en: 'Now that the configuration is done, you can just check for the missing options
    one last time before running the module by executing the `show missing` command:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在配置完成后，您可以通过执行`show missing`命令来最后一次检查缺少的选项，然后运行模块：
- en: '![](img/74945709-afcd-48c5-b33f-eae315429a7d.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](img/74945709-afcd-48c5-b33f-eae315429a7d.png)'
- en: 'In this case, we''ll set up RHOSTS in `192.168.2.17` and then execute the module
    either by using the `run` command or the `execute` command:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将在`192.168.2.17`中设置RHOSTS，然后通过使用`run`命令或`execute`命令来执行模块：
- en: '![](img/86acd0eb-7f74-4358-8152-efa1d0cf9f88.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](img/86acd0eb-7f74-4358-8152-efa1d0cf9f88.png)'
- en: 'Note: The modules won''t run unless all the required settings have been configured.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：除非已配置了所有必需的设置，否则模块将不会运行。
- en: Searching modules in MSF
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在MSF中搜索模块
- en: 'Searching in Metasploit is very easy. The `search` command accepts string values
    from a user. As shown in the following screenshot, searching for the `windows`
    string will list all the modules that are intended for the Windows OS:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在Metasploit中进行搜索非常容易。`search`命令接受用户的字符串值。如下截图所示，搜索`windows`字符串将列出所有用于Windows操作系统的模块：
- en: '![](img/d5f6f219-965c-4527-bd7e-ff41cff5bd2b.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d5f6f219-965c-4527-bd7e-ff41cff5bd2b.png)'
- en: 'Metasploit search also allows us to search based on the module type. For example,
    typing `**search windows type:exploit**` will show a list of all Windows exploits.
    Similarly, we can define the CVE. To search for a Windows exploit that came out
    in 2018, we can type `search windows type:exploit cve:2018`, as shown in the following
    screenshot:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit搜索还允许我们根据模块类型进行搜索。例如，键入`**search windows type:exploit**`将显示所有Windows漏洞利用的列表。同样，我们可以定义CVE。要搜索2018年发布的Windows漏洞利用，可以键入`search
    windows type:exploit cve:2018`，如下截图所示：
- en: '![](img/f038fa11-08fa-4feb-b0d3-067abb72ad1b.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f038fa11-08fa-4feb-b0d3-067abb72ad1b.png)'
- en: Next, we will learn how to check for hosts and services in MSF.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习如何在MSF中检查主机和服务。
- en: Checking for hosts and services in MSF
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在MSF中检查主机和服务
- en: 'So far, we have covered the basics of `msfconsole`. Now, let''s move on and
    learn how to manage hosts and services:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经介绍了`msfconsole`的基础知识。现在，让我们继续学习如何管理主机和服务：
- en: 'To view a list of all hosts that have been added, use the `hosts` command:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看已添加的所有主机的列表，请使用`hosts`命令：
- en: '![](img/8ab73077-a357-46c6-8d63-4afbae32f675.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8ab73077-a357-46c6-8d63-4afbae32f675.png)'
- en: 'To add a new host, we can use the `hosts -a <IP>` command, as shown in the
    following screenshot:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加新主机，我们可以使用`hosts -a <IP>`命令，如下截图所示：
- en: '![](img/0e03d157-7ade-463a-880c-25fa3b03224f.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e03d157-7ade-463a-880c-25fa3b03224f.png)'
- en: 'To remove a host, we use the `hosts -d <IP>` command, as shown in the following
    screenshot:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要删除主机，我们使用`hosts -d <IP>`命令，如下截图所示：
- en: '![](img/9f5138ec-fede-4ef2-9b83-fc82bb916e57.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9f5138ec-fede-4ef2-9b83-fc82bb916e57.png)'
- en: 'Similarly, the `services` command allows us to view a list of all the services
    that are available across all the hosts that have been added to Metasploit. Let''s
    take a look:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`services`命令允许我们查看已添加到Metasploit的所有主机上可用的所有服务的列表。让我们来看一下：
- en: 'First, we need to use the `services` command:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要使用`services`命令：
- en: '![](img/55ed767d-3862-4845-8fcf-9697db8f08d4.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![](img/55ed767d-3862-4845-8fcf-9697db8f08d4.png)'
- en: 'To view the list of services for a single host, we can use the `services <IP>`
    command, as shown in the following screenshot:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看单个主机的服务列表，我们可以使用`services <IP>`命令，如下面的屏幕截图所示：
- en: '![](img/a3a70cb0-1ced-41d3-be13-2d735bc654e7.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a3a70cb0-1ced-41d3-be13-2d735bc654e7.png)'
- en: We cannot add multiple ports at once. Doing that will throw an error – Exactly
    one port required – as shown in the preceding screenshot.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能一次添加多个端口。这样做会引发错误-需要精确一个端口-如前面的屏幕截图所示。
- en: 'Metasploit also allows us to add a custom service manually by using the `services
    -a -p <port number>` command, as shown in the following screenshot:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit还允许我们使用`services -a -p <port number>`命令手动添加自定义服务，如下面的屏幕截图所示：
- en: '![](img/79b0677b-60a8-422a-86cf-cf01473981f9.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](img/79b0677b-60a8-422a-86cf-cf01473981f9.png)'
- en: Next, let's look at Nmap scanning with MSF.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看使用MSF进行Nmap扫描。
- en: Nmap scanning with MSF
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MSF进行Nmap扫描
- en: Once we've added hosts to Metasploit, the next step is scanning. Metasploit
    has an inbuilt wrapper for Nmap that gives us the same functionality of Nmap within
    the Metasploit console. The benefit of this wrapper is that it saves the output
    in the database by default.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们将主机添加到Metasploit中，下一步就是扫描。Metasploit具有Nmap的内置包装器，它在Metasploit控制台中为我们提供了与Nmap相同的功能。这个包装器的好处是它默认将输出保存在数据库中。
- en: 'To run a scan against a host, we can use the `db_nmap <IP>` command. Here,
    we have used the `--open` flag to view only open ports. `-v` is used for verbose,
    `-Pn` is used to perform a no-ping scan, `-sV` is used to perform a service scan,
    and `-sC` is used to run script scans against discovered ports:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 要对主机运行扫描，我们可以使用`db_nmap <IP>`命令。在这里，我们使用了`--open`标志来查看只打开的端口。`-v`用于详细，`-Pn`用于执行无ping扫描，`-sV`用于执行服务扫描，`-sC`用于针对发现的端口运行脚本扫描：
- en: '![](img/a4ab6f0c-7f9f-4578-aac2-9cc7de3008d1.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a4ab6f0c-7f9f-4578-aac2-9cc7de3008d1.png)'
- en: 'The following screenshot shows the output of the scan that was run on the host:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了在主机上运行的扫描的输出：
- en: '![](img/e62ce0f6-8b68-4d8c-9c30-2a65c3d68109.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e62ce0f6-8b68-4d8c-9c30-2a65c3d68109.png)'
- en: 'Metasploit also allows us to import external scans that have been completed
    by Nmap into its database using `db_import`:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit还允许我们使用`db_import`将由Nmap完成的外部扫描导入其数据库：
- en: '![](img/cdf221b1-0e34-41c0-a562-fa2fbcb2c7cf.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cdf221b1-0e34-41c0-a562-fa2fbcb2c7cf.png)'
- en: 'Currently, MSF supports the following formats for importing data into its DB:
    Acunetix, Amap Log, Amap Log -m, Appscan, Burp Session XML, Burp Issue XML, CI,
    Foundstone, FusionVM XML, Group Policy Preferences Credentials, IP Address List,
    IP360 ASPL, IP360 XML v3, Libpcap Packet Capture, Masscan XML, Metasploit PWDump
    Export, Metasploit XML, Metasploit Zip Export, Microsoft Baseline Security Analyzer,
    NeXpose Simple XML, NeXpose XML Report, Nessus NBE Report, Nessus XML (v1), Nessus
    XML (v2), NetSparker XML, Nikto XML, Nmap XML, OpenVAS Report, OpenVAS XML, Outpost24
    XML, Qualys Asset XML, Qualys Scan XML, Retina XML, Spiceworks CSV Export, and
    Wapiti XML.'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，MSF支持将数据导入其数据库的以下格式：Acunetix、Amap Log、Amap Log -m、Appscan、Burp Session XML、Burp
    Issue XML、CI、Foundstone、FusionVM XML、Group Policy Preferences Credentials、IP Address
    List、IP360 ASPL、IP360 XML v3、Libpcap Packet Capture、Masscan XML、Metasploit PWDump
    Export、Metasploit XML、Metasploit Zip Export、Microsoft Baseline Security Analyzer、NeXpose
    Simple XML、NeXpose XML Report、Nessus NBE Report、Nessus XML（v1）、Nessus XML（v2）、NetSparker
    XML、Nikto XML、Nmap XML、OpenVAS Report、OpenVAS XML、Outpost24 XML、Qualys Asset XML、Qualys
    Scan XML、Retina XML、Spiceworks CSV Export和Wapiti XML。
- en: Setting up payload handling in MSF
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在MSF中设置有效载荷处理
- en: 'Before launching the module, we need to set up the handler. This handler is
    a stub that''s used to handle the exploits that are launched outside Metasploit
    Framework:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动模块之前，我们需要设置处理程序。这个处理程序是一个存根，用于处理在Metasploit Framework之外启动的利用程序：
- en: 'The handler module is loaded by typing the `use exploit/multi/handler` command:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入`use exploit/multi/handler`命令加载处理程序模块：
- en: '![](img/5057728e-34b4-419d-8465-092a72472084.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5057728e-34b4-419d-8465-092a72472084.png)'
- en: 'Next, we view the available options using the `show options` command, as shown
    in the following screenshot:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们使用`show options`命令查看可用选项，如下面的屏幕截图所示：
- en: '![](img/8153fb19-5943-4470-9900-2ab95f95fc92.png)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8153fb19-5943-4470-9900-2ab95f95fc92.png)'
- en: 'As we can see, the options are currently empty. These options are loaded once
    we define a payload. For example, we will use the `windows/x64/meterpreter/reverse_tcp`
    payload here and set the standard options for the payload, such as `LHOST` and
    `LPORT`. The `stageencoder` and `enablestageencoding` options are set to encode
    the second stage that''s sent by the handler to the victim:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，选项目前为空。一旦我们定义了有效载荷，这些选项就会加载。例如，我们将在这里使用`windows/x64/meterpreter/reverse_tcp`有效载荷，并设置有效载荷的标准选项，如`LHOST`和`LPORT`。`stageencoder`和`enablestageencoding`选项被设置为对处理程序发送的第二阶段进行编码：
- en: '![](img/47236858-7ea1-4357-ac0b-e4b6683210fd.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![](img/47236858-7ea1-4357-ac0b-e4b6683210fd.png)'
- en: First, we set `LHOST` and `LPORT` before choosing the encoder, which will encode
    the stager using the `shikata_ga_nai` encoder. The reason we used a stager encoding
    mechanism is to bypass the IPSes/DPSes by encoding the stager, hence changing
    the signature on the fly.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在选择编码器之前，我们设置`LHOST`和`LPORT`，该编码器将使用`shikata_ga_nai`编码器对分段器进行编码。我们使用分段器编码机制的原因是为了通过对分段器进行编码来绕过IPSes/DPSes，从而在飞行中更改签名。
- en: We also need to enable stage encoding by setting its value to `true`**.** This
    option will enable the second stage encoding process with the encoder we selected.
    Once the `stageencoding` option has been set, the `run -j` command is executed
    to start the handler in the background.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要通过将其值设置为`true`来启用阶段编码**。**此选项将使用我们选择的编码器启用第二阶段编码过程。设置了`stageencoding`选项后，执行`run
    -j`命令以在后台启动处理程序。
- en: 'Another way to run the handler is by using the `handler` command, which is
    available in the console, and passing arguments to it:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 运行处理程序的另一种方法是使用控制台中可用的`handler`命令，并向其传递参数：
- en: '![](img/a7abc47f-b039-407f-990c-42c7447797d0.png)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a7abc47f-b039-407f-990c-42c7447797d0.png)'
- en: 'Hence, the one-liner command that''s used to execute the handler with all the
    previously discussed settings will be `handler -H <IP> -P <Port> -e <encoder>
    -p <payload>`, as shown in the following screenshot:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，用于执行具有所有先前讨论的设置的处理程序的一行命令将是`handler -H <IP> -P <Port> -e <encoder> -p <payload>`，如下图所示：
- en: '![](img/013a1e1b-b7f0-4384-8019-ed26a55fe118.png)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![](img/013a1e1b-b7f0-4384-8019-ed26a55fe118.png)'
- en: Next, we will look at MSF payload generation.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看一下MSF负载生成。
- en: MSF payload generation
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MSF负载生成
- en: Payload generation is one of the most useful features in Metasploit Framework.
    From a simple shellcode generation to a fully weaponized EXE/DLL file, Metasploit
    can generate this in a single-line command. The payload can be generated in two
    ways.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 负载生成是Metasploit Framework中最有用的功能之一。从简单的shellcode生成到完全武装的EXE/DLL文件，Metasploit可以在一条命令中生成。负载可以通过两种方式生成。
- en: Generating an MSF payload using msfconsole (one-liner)
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用msfconsole生成MSF负载（一行命令）
- en: 'By using the MSF console and executing the commands for payload generation,
    you can generate any MSF supported payload. One advantage of using this technique
    is that you don''t have to start a payload handler separately. This can be done
    using a single-line command. To generate the payload and start the handler, execute
    the following code:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用MSF控制台并执行负载生成命令，您可以生成任何MSF支持的负载。使用此技术的一个优点是您不必单独启动负载处理程序。这可以通过一条命令完成。要生成负载并启动处理程序，请执行以下代码：
- en: '[PRE6]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了上述命令的输出：
- en: '![](img/98134196-af74-4fcc-b15c-c66e3ed8bf92.png)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![](img/98134196-af74-4fcc-b15c-c66e3ed8bf92.png)'
- en: The preceding command will generate the `reverse_https` Meterpreter payload.
    List it to confirm the generated payload and start the handler on port `9090`
    for the incoming connections. Another way to generate the payload is by using
    MSFvenom.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将生成`reverse_https` Meterpreter负载。列出它以确认生成的负载，并在端口`9090`上启动处理程序以进行传入连接。生成负载的另一种方法是使用MSFvenom。
- en: In the preceding command, the `-q` switch is used to start MSF in quiet mode,
    and `-x` executes the command in the console after it's started.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述命令中，使用`-q`开关以安静模式启动MSF，`-x`在启动后在控制台中执行命令。
- en: Generating an MSF payload using msfvenom
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用msfvenom生成MSF负载
- en: 'MSFvenom is a built-in tool that generates and obfuscates payloads without
    the need to start MSF. Execute the `msfvenom -p <MSF supported payload> lhost=<IP>
    lport=<PORT> -f <Output File Format> -o <payload filename>` command to generate
    a `reverse_https` Meterpreter payload in EXE format and save the file:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: MSFvenom是一个内置工具，可以生成和混淆负载，无需启动MSF。执行`msfvenom -p <MSF支持的负载> lhost=<IP> lport=<PORT>
    -f <输出文件格式> -o <负载文件名>`命令以生成EXE格式的`reverse_https` Meterpreter负载并保存文件：
- en: '![](img/02196b7c-1a4f-4874-8072-fd907beb0113.png)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![](img/02196b7c-1a4f-4874-8072-fd907beb0113.png)'
- en: In both cases, we used `ls -alh https_2.exe`.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，我们使用了`ls -alh https_2.exe`。
- en: This payload can now be uploaded/executed on the victim's system to get a reverse
    Meterpreter connection over a secure HTTPS tunnel back to us.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以将此负载上传/执行到受害者系统上，以通过安全的HTTPS隧道与我们建立反向Meterpreter连接。
- en: Summary
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about the basic terminology of Metasploit Framework,
    as well as how to install it and set it up on *nix-based and Windows-based systems.
    Then, we looked at the usage of MSF. We loaded modules/auxiliaries, set target
    values, and ran them against a host. Finally, we learned how to generate payloads
    using MSFvenom for exploitation purposes.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了Metasploit Framework的基本术语，以及如何在*nix和基于Windows的系统上安装和设置它。然后，我们看了MSF的用法。我们加载了模块/辅助工具，设置了目标值，并对主机运行了它们。最后，我们学习了如何使用MSFvenom生成用于利用目的的负载。
- en: In the next chapter, we'll learn how to use Metasploit but with the web interface
    **User Interactive** (**UI**) option. This can really help those who don't have
    a strong understanding of the **command-line interface** (**CLI**).
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用Metasploit，但使用Web界面**用户交互**（**UI**）选项。这对于那些对**命令行界面**（**CLI**）不太了解的人来说真的很有帮助。
- en: Questions
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Is Metasploit Framework free for use?
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Metasploit Framework可以免费使用吗？
- en: Can I encrypt my payloads so that they can evade anti-virus software?
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我可以加密我的负载以逃避反病毒软件吗？
- en: I'm using MySQL as my pen testing backend. Can I integrate MySQL or any other
    Non-PostgreSQL database with Metasploit?
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我正在使用MySQL作为我的渗透测试后端。我可以将MySQL或任何其他非PostgreSQL数据库与Metasploit集成吗？
- en: I have multiple systems where Metasploit Framework is installed. Can I centralize
    the database for each Metasploit instance?
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我有多个安装了Metasploit Framework的系统。我可以为每个Metasploit实例集中数据库吗？
- en: Further reading
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following links will help you find out more about Metasploit, all of which
    are from its official blogs and documentation:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接将帮助您了解更多关于Metasploit的信息，所有这些信息都来自其官方博客和文档：
- en: '[https://www.offensive-security.com/metasploit-unleashed/](https://www.offensive-security.com/metasploit-unleashed/)'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.offensive-security.com/metasploit-unleashed/](https://www.offensive-security.com/metasploit-unleashed/)'
- en: '[http://resources.metasploit.com/](http://resources.metasploit.com/)'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://resources.metasploit.com/](http://resources.metasploit.com/)'
- en: '[https://metasploit.help.rapid7.com/docs](https://metasploit.help.rapid7.com/docs)'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://metasploit.help.rapid7.com/docs](https://metasploit.help.rapid7.com/docs)'
