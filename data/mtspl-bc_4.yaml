- en: Post-Exploitation with Metasploit
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit进行后渗透
- en: This chapter will feature hard-core post-exploitation. Throughout this chapter,
    we will focus on approaches to post-exploitation, and will cover basic tasks,
    such as privilege escalation, getting passwords in clear text, finding juicy information,
    and much more.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍硬核后渗透。在本章中，我们将专注于后渗透的方法，并将涵盖基本任务，比如特权提升、获取明文密码、查找有价值的信息等。
- en: 'During this chapter, we will cover and understand the following key aspects:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖和理解以下关键方面：
- en: Performing necessary post-exploitation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行必要的后渗透
- en: Using advanced post-exploitation modules
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用高级后渗透模块
- en: Privilege escalation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特权提升
- en: Gaining persistent access to the targets
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获得对目标的持久访问
- en: Let us now jump into the next section, where we will look at the basics of the
    post-exploitation features of Metasploit.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在跳到下一节，我们将看一下Metasploit的后渗透功能的基础知识。
- en: Extended post-exploitation with Metasploit
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit进行扩展后渗透
- en: We have already covered a few of the post-exploitation modules in the previous
    chapters. However, here we will focus on the features that we did not cover. Throughout
    the last chapter, we focused on exploiting the systems, but now we will focus
    only on the systems that are already exploited. So, let us get started with the
    most basic commands used in post-exploitation in the next section.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在前几章中涵盖了一些后渗透模块。然而，在这里，我们将专注于我们没有涵盖的功能。在上一章中，我们专注于利用系统，但现在我们将只专注于已经被利用的系统。所以，让我们开始下一节中用于后渗透的最基本命令。
- en: Basic post-exploitation commands
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本后渗透命令
- en: The core meterpreter commands are those that are available on most of the exploited
    systems using a meterpreter payload, and provide the necessary core functionalities
    for post-exploitation. Let us get started with some of the most basic commands
    that will help you with post-exploitation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 核心meterpreter命令是大多数使用meterpreter有效载荷的被利用系统上可用的命令，并为后渗透提供必要的核心功能。让我们开始一些最基本的命令，这些命令将帮助你进行后渗透。
- en: The help menu
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 帮助菜单
- en: 'We can always refer to the help menu''s list of all the various commands that
    are usable on the target by issuing `help` or `?`, as shown in the following screenshot:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过发出`help`或`?`命令来查看目标上可用的所有各种命令的帮助菜单列表，如下面的屏幕截图所示：
- en: '![](img/00244.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00244.jpeg)'
- en: Background command
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后台命令
- en: 'While carrying out post-exploitation, we may run into a situation where we
    need to perform additional tasks, such as testing for a different exploit, running
    a privilege escalation exploit, and so on. However, to achieve this, we need to
    put our current meterpreter session in the background. We can do this by issuing
    the `background` command as shown in the following screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行后渗透时，我们可能会遇到需要执行额外任务的情况，比如测试不同的漏洞利用、运行提权漏洞利用等。然而，为了实现这一点，我们需要将当前的meterpreter会话放到后台。我们可以通过发出`background`命令来实现这一点，如下面的屏幕截图所示：
- en: '![](img/00260.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00260.jpeg)'
- en: We can see from the preceding screenshot that we successfully managed to put
    our session in the background and re-interacted with the session using the `sessions
    -i` command followed by the session identifier.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的屏幕截图中，我们可以看到我们成功地将会话放到后台，并使用`sessions -i`命令后跟会话标识符重新与会话交互。
- en: Machine ID and the UUID command
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器ID和UUID命令
- en: 'We can always get the machine ID of an attached session by issuing the `machine_id`
    command as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们总是可以通过发出`machine_id`命令来获取附加会话的机器ID，如下所示：
- en: '![](img/00278.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00278.jpeg)'
- en: 'To view the UUID, we can simply issue the `uuid` command as shown in the following
    screenshot:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看UUID，我们可以简单地发出`uuid`命令，如下面的屏幕截图所示：
- en: '![](img/00041.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00041.jpeg)'
- en: Networking commands
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络命令
- en: 'We can access quick network information by using the `ipconfig`/`ifconfig`,
    `arp`, and `netstat` commands. We have already covered the `arp` command in the
    previous chapters. Let''s have a look at the output generated by the `ipconfig`
    command, as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`ipconfig`/`ifconfig`、`arp`和`netstat`命令来快速访问网络信息。我们已经在前几章中涵盖了`arp`命令。让我们看一下`ipconfig`命令生成的输出：
- en: '![](img/00090.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00090.jpeg)'
- en: The `ipconfig` command allows us to view the local IP address and any other
    associated interfaces. This command is vital because it reveals any other internal
    networks connected to the compromised hosts. I leave the `netstat` command as
    an exercise for you all to complete in your own time.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`ipconfig`命令允许我们查看本地IP地址和任何其他相关接口。这个命令很重要，因为它会显示与受损主机连接的任何其他内部网络。我留下`netstat`命令作为一个练习，让你们在自己的时间里完成。'
- en: File operation commands
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件操作命令
- en: 'We can view the present working directory on the target machine by issuing
    the `pwd` command as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过发出`pwd`命令来查看目标机器上的当前工作目录：
- en: '![](img/00089.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00089.jpeg)'
- en: 'Additionally, we can browse the target file system using the `cd` command and
    create directories with the `mkdir` command as we normally do on a system. The
    meterpreter shell allows us to upload files onto the target system using the `upload`
    command. Let us see how it works:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以使用`cd`命令访问目标文件系统，并使用`mkdir`命令创建目录，就像在系统上一样。meterpreter shell允许我们使用`upload`命令将文件上传到目标系统。让我们看看它是如何工作的：
- en: '![](img/00093.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00093.jpeg)'
- en: 'We can edit any file on the target by issuing the `edit` command followed by
    the filename, as shown in the following screenshot:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过发出`edit`命令后跟文件名来编辑目标上的任何文件，如下面的屏幕截图所示：
- en: '![](img/00170.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00170.jpeg)'
- en: 'Let us now view the contents of the file by issuing the `cat` command as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过发出`cat`命令来查看文件的内容：
- en: '![](img/00186.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00186.jpeg)'
- en: 'I will leave the `ls`, `rmdir`, and `rm` commands as exercises for you to complete
    in your own time. Next, we download files from the target using `download` command
    as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我将留下`ls`、`rmdir`和`rm`命令作为练习，让你们在自己的时间里完成。接下来，我们使用`download`命令从目标下载文件，如下所示：
- en: '![](img/00226.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00226.jpeg)'
- en: Desktop commands
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 桌面命令
- en: 'Metasploit features `desktop` commands, such as enumerating desktops, taking
    pictures from a web camera, recording from a mic, streaming from cameras, and
    much more. We can see the available features as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit具有`desktop`命令，例如枚举桌面、从网络摄像头拍照、从麦克风录音、从摄像头流式传输等等。我们可以如下所示查看可用的功能：
- en: '![](img/00151.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00151.jpeg)'
- en: Information associated with the target desktop can be compromised using `enumdesktops`
    and `getdesktop`. The `enumdesktop` command lists out all the available desktops
    whereas `getdesktop` lists information related to the current desktop.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`enumdesktops`和`getdesktop`可以破坏与目标桌面相关的信息。`enumdesktop`命令列出所有可用的桌面，而`getdesktop`列出与当前桌面相关的信息。
- en: Screenshots and camera enumeration
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 屏幕截图和摄像头枚举
- en: 'It is mandatory for the tester to get prior permissions before taking screenshots,
    webcam snaps, running a live stream, or key logging. However, we can view the
    target''s desktop by taking a snapshot using the `snapshot` command, as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行屏幕截图、网络摄像头快照、运行实时流或记录按键日志之前，测试人员必须事先获得许可。然而，我们可以使用`snapshot`命令通过拍摄快照来查看目标的桌面，如下所示：
- en: '![](img/00269.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00269.jpeg)'
- en: 'Viewing the saved JPEG file, we have the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 查看保存的JPEG文件，我们有以下内容：
- en: '![](img/00126.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00126.jpeg)'
- en: 'Let us see if we can enumerate the cameras and see who is working on the system:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们是否可以枚举摄像头并查看谁正在系统上工作：
- en: '![](img/00054.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00054.jpeg)'
- en: 'Using the `webcam_list` command, we can find out the number of cameras associated
    with the target. Let''s stream the cameras using the `webcam_stream` command,
    as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`webcam_list`命令，我们可以找出与目标关联的摄像头数量。让我们使用`webcam_stream`命令来流式传输摄像头，如下所示：
- en: '![](img/00104.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00104.jpeg)'
- en: 'Issuing the preceding command opens a web camera stream in the browser, as
    shown in the screenshot. We can also opt for a snapshot, instead of streaming,
    by issuing the `webcam_snap` command, as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 发出上述命令会在浏览器中打开一个网络摄像头流，如截图所示。我们也可以选择通过发出`webcam_snap`命令来进行快照，而不是流式传输，如下所示：
- en: '![](img/00106.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00106.jpeg)'
- en: 'Haahaa! Well, I would say that''s one way to hide your face from online intrusions.
    However, sometimes, if working in a law enforcement agency, you can be tasked
    with listening to the environment for surveillance purposes. To achieve that,
    we can use the `record_mic` command, as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 哈哈哈！嗯，我会说这是一种避免在线侵入的方法。然而，有时，如果在执法机构工作，您可能会被要求监听环境以进行监视。为了实现这一点，我们可以使用`record_mic`命令，如下所示：
- en: '![](img/00152.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00152.jpeg)'
- en: 'We can set the duration of the capture with the `record_mic` command by passing
    seconds with the `-d` switch. Another interesting piece of information that can
    be gained from the target is their key logs. We can dump key logs by starting
    the keyboard sniffer module using the `keyscan_start` command, as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`record_mic`命令通过传递秒数来设置捕获的持续时间。从目标获取的另一个有趣的信息是他们的按键日志。我们可以使用`keyscan_start`命令启动键盘嗅探模块来转储按键日志，如下所示：
- en: '![](img/00150.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00150.jpeg)'
- en: 'After a few seconds, we can dump the key logs using the `keyscan_dump` command,
    as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，我们可以使用`keyscan_dump`命令转储按键日志，如下所示：
- en: '![](img/00157.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00157.jpeg)'
- en: We saw many commands over the course of this section. Let us now move into the
    advanced section for post-exploitation.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中我们看到了许多命令。现在让我们进入后期利用的高级部分。
- en: Advanced post-exploitation with Metasploit
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit进行高级后期利用
- en: In this section, we will use the information gathered from basic commands to
    achieve further success and access levels in the target's system.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将利用从基本命令中收集的信息来在目标系统中取得进一步的成功和访问级别。
- en: Migrating to safer processes
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移到更安全的进程
- en: 'As we saw in the previous section, our meterpreter session was loaded from
    a temporary file. However, if a user of a target system finds the process unusual,
    he can kill the process, which will kick us out of the system. Therefore, it is
    a good practice to migrate to safer processes, such as `explorer.exe` or `svchost.exe`,
    which evades the eyes of the victim by using the `migrate` command. However, we
    can always use the `ps` command to figure out the PID of the process we want to
    jump to, as shown in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前一节中看到的，我们的meterpreter会话是从临时文件加载的。然而，如果目标系统的用户发现进程异常，他可以终止进程，这将使我们退出系统。因此，迁移到更安全的进程，如`explorer.exe`或`svchost.exe`，可以通过使用`migrate`命令来逃避受害者的注意。然而，我们始终可以使用`ps`命令来找出我们要跳转到的进程的PID，如下图所示：
- en: '![](img/00236.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00236.jpeg)'
- en: 'We can see that the PID of `explorer.exe` is `1896`. Let us use the `migrate`
    command to jump into it, as shown in the following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`explorer.exe`的PID是`1896`。让我们使用`migrate`命令跳转到它，如下图所示：
- en: '![](img/00111.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00111.jpeg)'
- en: We can see that we successfully managed to jump into the `explorer.exe` process.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们成功地跳转到了`explorer.exe`进程。
- en: Migrating from a process to a different one may downgrade privileges.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个进程迁移到另一个进程可能会降低特权。
- en: Obtaining system privileges
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取系统特权
- en: 'If the application we broke into is running with administrator privileges,
    it is very easy to get system-level privileges by issuing the `getsystem` command,
    as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们侵入的应用程序以管理员特权运行，通过发出`getsystem`命令很容易获得系统级特权，如下所示：
- en: '![](img/00058.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00058.jpeg)'
- en: System-level privileges provide the highest level of privileges, with the ability
    to perform almost anything on the target system.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 系统级特权提供了最高级别的特权，能够在目标系统上执行几乎任何操作。
- en: The `getsystem` module is not as reliable on the newer version of windows. It
    is advisable to try local privilege escalation methods and modules to elevate
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`getsystem`模块在较新版本的Windows上不太可靠。建议尝试本地特权升级方法和模块来提升权限'
- en: Changing access, modification, and creation time with timestomp
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用timestomp更改访问、修改和创建时间
- en: 'Metasploit is used everywhere, from private organizations to law enforcement.
    Therefore, while carrying out covert operations, it is highly recommended that
    you change the date of the files accessed, modified, or created. In Metasploit,
    we can perform time-altering operations using the `timestomp` command. In the
    previous section, we created a file called `creditcard.txt`. Let us change its
    time properties with the `timestomp` command as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit被广泛应用，从私人组织到执法部门。因此，在进行隐秘行动时，强烈建议您更改文件访问、修改或创建的日期。在Metasploit中，我们可以使用`timestomp`命令执行时间更改操作。在上一节中，我们创建了一个名为`creditcard.txt`的文件。让我们使用`timestomp`命令更改它的时间属性，如下所示：
- en: '![](img/00245.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00245.jpeg)'
- en: 'We can see the access time is 2016-06-19 23:23:15\. We can use the `-z` switch
    to modify it to `1999-11-26 15:15:25`, as shown in the preceding screenshot. Let
    us see whether or not the file was modified correctly:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到访问时间是2016-06-19 23:23:15。我们可以使用`-z`开关将其修改为`1999-11-26 15:15:25`，如前面的截图所示。让我们看看文件是否被正确修改了：
- en: '![](img/00165.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00165.jpeg)'
- en: 'We successfully managed to change the timestamp for the `creditcard.txt` file.
    We can also blank all the time details for a file using the `-b` switch, as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功地改变了`creditcard.txt`文件的时间戳。我们还可以使用`-b`开关来清除文件的所有时间细节，如下所示：
- en: '![](img/00183.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00183.jpeg)'
- en: Using the `timestomp` command, we can individually change modified access, and
    creation times as well.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`timestomp`命令，我们可以单独更改修改的访问和创建时间。
- en: Obtaining password hashes using hashdump
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用hashdump获取密码哈希
- en: 'Once we gain system privileges, we can quickly figure out the login password
    hashes from the compromised system by issuing the `hashdump` command, as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们获得了系统特权，我们可以通过发出`hashdump`命令来快速找出受损系统的登录密码哈希，如下所示：
- en: '![](img/00217.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00217.jpeg)'
- en: Once we have found out the password hashes, we can launch a pass-the-hash attack
    on the target system.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们找到了密码哈希，我们就可以对目标系统发动哈希传递攻击。
- en: For more information on pass-the-hash attacks, refer to [https://www.offensive-security.com/metasploit-unleashed/psexec-pass-hash/](https://www.offensive-security.com/metasploit-unleashed/psexec-pass-hash/).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 有关哈希传递攻击的更多信息，请参阅[https://www.offensive-security.com/metasploit-unleashed/psexec-pass-hash/](https://www.offensive-security.com/metasploit-unleashed/psexec-pass-hash/)。
- en: You can refer to an excellent video explaining pass-the-hash attacks and their
    mitigation at [https://www.youtube.com/watch?v=ROvGEk4JG94](https://www.youtube.com/watch?v=ROvGEk4JG94).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以参考一个很好的视频，解释了哈希传递攻击及其缓解方法，网址为[https://www.youtube.com/watch?v=ROvGEk4JG94](https://www.youtube.com/watch?v=ROvGEk4JG94)。
- en: Metasploit and privilege escalation
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metasploit和特权升级
- en: In this section, we will look at using Metasploit to obtain the highest level
    of privileges on the target system. Most of the applications we are targeting
    run on user-level privileges, which provide us with general access but not access
    to the complete system. However, to obtain system-level access, we need to escalate
    privileges using vulnerabilities in the target system after gaining access to
    the system. Let us see how we can achieve system-level access to various types
    of operating system in the next sections.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看看如何使用Metasploit在目标系统上获得最高级别的特权。我们瞄准的大多数应用程序都在用户级别特权上运行，这为我们提供了一般访问权限，但并非完全系统访问权限。然而，要获得系统级别的访问权限，我们需要在获得系统访问权限后利用目标系统中的漏洞来提升权限。让我们看看如何在接下来的章节中实现对各种类型操作系统的系统级别访问权限。
- en: Escalating privileges on Windows Server 2008
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows Server 2008上提升权限
- en: 'During a penetration test, we often run into situations where we have limited
    access, and, when running commands such as `hashdump`, we might get the following
    error:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在渗透测试中，我们经常遇到有限的访问权限的情况，当运行诸如`hashdump`之类的命令时，我们可能会得到以下错误：
- en: '![](img/00256.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00256.jpeg)'
- en: 'In such cases, if we try achieving system privileges with the `getsystem` command,
    we get the following errors:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，如果我们尝试使用`getsystem`命令获得系统特权，我们会得到以下错误：
- en: '![](img/00261.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00261.jpeg)'
- en: 'So, what shall we do in these cases? The answer is to escalate privileges using
    post-exploitation to achieve the highest level of access. The following demonstration
    is conducted on a Windows Server 2008 SP1 operating system, where we used a local
    exploit to bypass the restrictions and gain complete access to the target:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，在这种情况下我们应该怎么办呢？答案是利用后期渗透来提升权限，以实现最高级别的访问。以下演示是在Windows Server 2008 SP1操作系统上进行的，我们使用本地漏洞来绕过限制并完全访问目标：
- en: '![](img/00279.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00279.jpeg)'
- en: 'In the preceding screenshot, we used the `exploit/windows/local/ms10_015_kitrap0d`
    exploit to escalate privileges and gain the highest level of access. Let us check
    the level of access using the `getuid` command, as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们使用`exploit/windows/local/ms10_015_kitrap0d`漏洞来提升权限并获得最高级别的访问。让我们使用`getuid`命令检查访问级别，如下所示：
- en: '![](img/00043.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00043.jpeg)'
- en: We can see that we have system-level access, and we can now perform anything
    on the target.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们已经获得了系统级别的访问权限，现在我们可以在目标上执行任何操作。
- en: For more info on the kitrap0d exploit, refer to [https://technet.microsoft.com/en-us/library/security/ms10-015.aspx](https://technet.microsoft.com/en-us/library/security/ms10-015.aspx).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 有关kitrap0d漏洞的更多信息，请参阅[https://technet.microsoft.com/en-us/library/security/ms10-015.aspx](https://technet.microsoft.com/en-us/library/security/ms10-015.aspx)。
- en: Privilege escalation on Linux with Metasploit
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit在Linux上提升权限
- en: We saw how we could escalate privileges on a Windows-based operating system
    using Metasploit in the previous section. Let us now have a look at manually running
    the privilege escalation exploits. This exercise will help you get ready for competitive
    and practical information security certification exams.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一节中看到了如何使用Metasploit在基于Windows的操作系统上提升权限。现在让我们来看看手动运行特权升级漏洞。这个练习将帮助您为竞争和实际的信息安全认证考试做好准备。
- en: 'Say that we have gained a shell on a Linux UBUNTU 14.04 LTS server with limited
    access, as shown in the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经在具有有限访问权限的Linux UBUNTU 14.04 LTS服务器上获得了一个shell，如下截图所示：
- en: '![](img/00136.jpeg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00136.jpeg)'
- en: 'Let us drop into the shell and gain more reliable command execution access
    by issuing the `shell` command, as shown in the following screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进入shell，并通过发出`shell`命令获得更可靠的命令执行访问，如下面的屏幕截图所示：
- en: '![](img/00259.jpeg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00259.jpeg)'
- en: As you can see, we have issued the `id` command in the `shell` Terminal; we
    have the user ID of the current user, which is 1000, and the username is rootme.
    Gathering more information on the kernel with the `uname -a` command, we can see
    that the kernel version of the operating system is 3.13.0-24, the release year
    is 2014, and the machine is a running a 64-bit operating system.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们在`shell`终端中发出了`id`命令；我们有当前用户的用户ID，即1000，用户名为rootme。通过使用`uname -a`命令收集有关内核的更多信息，我们可以看到操作系统的内核版本是3.13.0-24，发布年份是2014年，机器正在运行64位操作系统。
- en: 'Having found these details, and after browsing through the Internet, we come
    across *Linux Kernel 3.13.0 < 3.19 (Ubuntu 12.04/14.04/14.10/15.04) - ''overlayfs''
    Privilege Escalation Exploit (CVE:2015-1328)* from [https://www.exploit-db.com/exploits/37292](https://www.exploit-db.com/exploits/37292).
    Next, we download the C-based exploit and host it on our local machine so that
    we can transfer this exploit to the target machine. Since we already have access
    to the shell on the target, we can just issue the `wget` command followed by the
    location of the raw C exploit source file hosted on our machine, as shown in the
    following screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在找到这些细节并浏览互联网之后，我们发现了来自[https://www.exploit-db.com/exploits/37292](https://www.exploit-db.com/exploits/37292)的*Linux
    Kernel 3.13.0 < 3.19 (Ubuntu 12.04/14.04/14.10/15.04) - 'overlayfs' Privilege
    Escalation Exploit (CVE:2015-1328)*。接下来，我们下载了基于C的漏洞利用，并将其托管在我们的本地机器上，以便我们可以将这个漏洞利用传输到目标机器。由于我们已经可以访问目标上的shell，我们可以只需发出`wget`命令，然后是托管在我们机器上的原始C漏洞利用源文件的位置，如下面的屏幕截图所示：
- en: '![](img/00143.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00143.jpeg)'
- en: 'Our next task is to compile this exploit and run it on the target. To compile
    the exploit, we type in `GCC` followed by the source file''s name while assigning
    an output name with the `-o` switch. We will also be providing the `-lpthread`
    switch since we are using pthread calls in the exploit. Issuing the complete command,
    we can see that the exploit is compiled to the file named bang. Let''s assign
    execute permissions to the bang file by issuing the `chmod +x bang` command and
    run the exploit, as shown in the following screenshot:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一个任务是编译这个漏洞并在目标上运行它。要编译漏洞，我们输入`GCC`，然后是源文件的名称，同时使用`-o`开关指定输出名称。由于我们在漏洞中使用了pthread调用，我们还将提供`-lpthread`开关。发出完整的命令，我们可以看到漏洞被编译为名为bang的文件。通过发出`chmod
    +x bang`命令，我们给bang文件分配执行权限，并运行漏洞，如下面的屏幕截图所示：
- en: '![](img/00076.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00076.jpeg)'
- en: Yeah! We can see that when issuing the `whoami` command, the system tells us
    that we are root. In other words, we have gained the highest possible access to
    the target and probably now have much more access to the server.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！当发出`whoami`命令时，系统告诉我们我们是root。换句话说，我们已经获得了对目标的最高可能访问权限，可能现在对服务器有更多的访问权限。
- en: For more information on CVE 2015-1328, refer to [http://seclists.org/oss-sec/2015/q2/717](http://seclists.org/oss-sec/2015/q2/717).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 有关CVE 2015-1328的更多信息，请参阅[http://seclists.org/oss-sec/2015/q2/717](http://seclists.org/oss-sec/2015/q2/717)。
- en: Gaining persistent access with Metasploit
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit实现持久访问
- en: Gaining persistent access to the target systems is important when you are a
    part of a law enforcement agency. However, in a conventional penetration test,
    persistence may not be very practical, unless the testable environment is huge
    and will take many days for the test to complete. But this doesn't mean that it
    is not worth knowing how to maintain access to the target. In the following section,
    we will cover persistence techniques, which one can use to maintain access to
    the target system. In addition, Metasploit has depreciated the persistence and
    `metsvc` modules in meterpreter, which were used to maintain access to the target.
    Let's cover the new techniques for achieving persistence.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在成为执法机构的一部分时，获得对目标系统的持久访问是很重要的。然而，在传统的渗透测试中，除非可测试的环境非常庞大并且需要很多天才能完成测试，否则持久性可能并不是非常实际的。但这并不意味着不值得知道如何保持对目标的访问。在接下来的部分中，我们将介绍一些可以用来保持对目标系统访问的持久性技术。此外，Metasploit已经废弃了meterpreter中用于保持对目标访问的持久性和`metsvc`模块。让我们介绍一下实现持久性的新技术。
- en: Gaining persistent access on Windows-based systems
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在基于Windows的系统上实现持久访问
- en: 'In this example, we have already gained meterpreter access to a system running
    Windows Server 2012 R2\. Let''s move the meterpreter to the background using the
    `background` command and use the latest persistence module, which is `post/windows/manage/persistence_exe`.
    The beauty of this module is that it is not Metasploit dependent, which means
    that you can use any executable to achieve persistence on it. Let''s put it to
    `use` and run a quick `show options` to check all the options we need to set,
    as shown in the following screen:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们已经获得了对运行Windows Server 2012 R2的系统的meterpreter访问。让我们使用`background`命令将meterpreter移到后台，并使用最新的持久性模块，即`post/windows/manage/persistence_exe`。这个模块的美妙之处在于它不依赖于Metasploit，这意味着你可以使用任何可执行文件来实现持久性。让我们使用`use`并运行`show
    options`来检查我们需要设置的所有选项，如下图所示：
- en: '![](img/00079.jpeg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00079.jpeg)'
- en: We can see that we have four options. REXENAME is the name of the `.exe` file
    that will be loaded onto the victim system. REXEPATH is the path of the executable
    on our system that will be uploaded to the target, and will be renamed as the
    value set on REXENAME. The SESSION option will contain the session identifier
    of the meterpreter through which the file will be uploaded to the target. The
    STARTUP option will contain one of the values from USER, SYSTEM, SERVICE. We will
    keep USER in the STARTUP option in the case of a limited access user; the persistence
    will be achieved on the login of that particular user only. Achieving persistence
    on any user login can be obtained by setting the value of STARTUP to SYSTEM. However,
    to achieve persistence at SYSTEM level, administrator privileges will be required,
    and the same would be the case for a SERVICE install. As a result, we will keep
    it as USER only.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到有四个选项。REXENAME是将加载到受害系统上的`.exe`文件的名称。REXEPATH是我们系统上可执行文件的路径，将上传到目标并重命名为REXENAME上设置的值。SESSION选项将包含用于将文件上传到目标的meterpreter的会话标识符。STARTUP选项将包含来自USER、SYSTEM、SERVICE的值之一。在有限访问用户的情况下，我们将在STARTUP选项中保持USER，持久性将仅在该特定用户登录时实现。通过将STARTUP的值设置为SYSTEM，可以在任何用户登录时实现持久性。但是，要在SYSTEM级别实现持久性，将需要管理员特权，SERVICE安装也是如此。因此，我们将保持它为USER。
- en: 'For REXEPATH, we have created a backdoor with `msfvenom` - which is a meterpreter
    for Windows-based systems - exactly the way we did in the previous chapters. Let''s
    set the `SESSION` option to `3`, since our session ID for meterpreter is `3`,
    as shown in the following screen:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 对于REXEPATH，我们使用`msfvenom`创建了一个后门，这是一个针对基于Windows的系统的meterpreter，就像我们在之前的章节中所做的那样。让我们将`SESSION`选项设置为`3`，因为我们的meterpreter会话ID是`3`，如下屏幕所示：
- en: '![](img/00228.jpeg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00228.jpeg)'
- en: 'Next, let''s set the `REXEPATH` to the path of our executable and run the module
    as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们将`REXEPATH`设置为我们可执行文件的路径，并按以下方式运行模块：
- en: '![](img/00251.jpeg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00251.jpeg)'
- en: 'Running the module, we can see that the persistence is achieved. Let''s test
    it out by setting up the handler to accommodate our `nj.exe` file, which connects
    back to port `1337`, as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 运行模块，我们可以看到已经实现了持久性。让我们通过设置处理程序来测试一下，以适应我们的`nj.exe`文件，它连接回端口`1337`，如下所示：
- en: '![](img/00264.jpeg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00264.jpeg)'
- en: What we did in the preceding case is supply the reboot command to the victim
    through meterpreter, which caused the system to reboot. Next, we quickly set up
    a handler to receive incoming meterpreter sessions on port `1337`, and, as soon
    as we ran the `exploit` command, the rebooted system connected to our meterpreter,
    which indicates a successful persistence over the target system.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的案例中，我们通过meterpreter向受害者提供了重启命令，导致系统重新启动。接下来，我们迅速设置了一个处理程序，以在端口`1337`上接收传入的meterpreter会话，并且一旦我们运行了`exploit`命令，重新启动的系统就连接到了我们的meterpreter，这表明成功地实现了对目标系统的持久性。
- en: Gaining persistent access on Linux systems
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Linux系统上获得持久访问
- en: 'To achieve persistence on Linux systems, we can use the `exploit/linux/local/cron_persistence`
    module after gaining the initial meterpreter access, as shown in the following
    screenshot:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Linux系统上实现持久性，我们可以在获得初始meterpreter访问后使用`exploit/linux/local/cron_persistence`模块，如下截图所示：
- en: '![](img/00084.jpeg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00084.jpeg)'
- en: 'Next, we need to set the `SESSION` option to our meterpreter session identifier,
    as well as configure the `USERNAME` to the current user of the target machine
    and run the module, as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要将`SESSION`选项设置为我们的meterpreter会话标识符，并配置`USERNAME`为目标机器的当前用户，并按以下方式运行模块：
- en: '![](img/00057.jpeg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00057.jpeg)'
- en: As soon as Cron-based persistence is achieved, you can set up a handler for
    incoming meterpreter sessions in a similar way to the method we used for Windows
    systems. However, the payload for Linux-based operating systems will be `linux/x86/meterpreter/reverse_tcp`.
    I leave it to you guys to complete this exercise as no training is better than
    self-paced training.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦实现了基于Cron的持久性，您可以设置一个处理程序来接收类似于我们在Windows系统中使用的方法的传入meterpreter会话。但是，Linux操作系统的有效载荷将是`linux/x86/meterpreter/reverse_tcp`。我把这个练习留给你们完成，因为没有比自主学习更好的培训了。
- en: For more on Cron persistence, refer to [https://www.rapid7.com/db/modules/exploit/linux/local/cron_persistence](https://www.rapid7.com/db/modules/exploit/linux/local/cron_persistence).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Cron持久性的更多信息，请参考[https://www.rapid7.com/db/modules/exploit/linux/local/cron_persistence](https://www.rapid7.com/db/modules/exploit/linux/local/cron_persistence)。
- en: Summary
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We covered plenty of things in this chapter. We kicked off by learning basic
    post-exploitation and moved on to advanced post-exploitation. We also covered
    migration, obtaining system privileges, timestomp, and obtaining hashes. We also
    saw how we could use Metasploit for privilege escalation and maintaining access
    for both Linux and Windows systems.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了很多内容。我们从学习基本的后渗透开始，然后转向高级后渗透。我们还涵盖了迁移、获取系统特权、时间戳和获取哈希。我们还看到了如何使用Metasploit进行特权升级，并在Linux和Windows系统上保持访问。
- en: 'You had a variety of exercises to complete throughout this chapter. However,
    if you would like to try more, then try performing the following tasks:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您有许多练习要完成。但是，如果您想尝试更多，请尝试执行以下任务：
- en: Try privilege escalation on a variety of systems, including Windows Server 2003,
    Windows XP, Windows 7, Windows 8.1, and Windows 10\. Notice the differences and
    maintain a list of modules used for escalating privileges on these systems.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试在各种系统上进行特权升级，包括Windows Server 2003、Windows XP、Windows 7、Windows 8.1和Windows
    10。注意差异，并保持一个用于在这些系统上提升特权的模块列表。
- en: Install two- to three-year-old copies of Red Hat, CentOS, and Ubuntu operating
    systems, figure out the kernel version, and try escalating privileges on those
    machines.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装两到三年前的Red Hat、CentOS和Ubuntu操作系统副本，找出内核版本，并尝试在这些机器上提升特权。
- en: Figure out ways to obtain persistence on OSX, BSD, and Solaris operating systems.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找出在OSX、BSD和Solaris操作系统上获得持久性的方法。
- en: In [Chapter 5](part0088.html#2JTHG0-a731d733dba14ccabae643b74e2c8790), *Testing
    Services with Metasploit*, we will look at testing services with Metasploit. Our
    focus will be on services that may act as an entire project rather than being
    a part of a VAPT engagement.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](part0088.html#2JTHG0-a731d733dba14ccabae643b74e2c8790)中，*使用Metasploit测试服务*，我们将研究如何使用Metasploit测试服务。我们的重点将放在可能作为整个项目而不是VAPT参与的一部分的服务上。
