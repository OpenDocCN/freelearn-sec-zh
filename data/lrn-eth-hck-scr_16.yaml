- en: Post Exploitation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后期利用
- en: In previous chapters, we covered how to access devices through the use of various
    techniques. We will now move on to the post exploitation task, which will focus
    on the Meterpreter session and how we can exploit a target system once we have
    gained access to it. Then, we will look at the basic filesystem commands that
    can help us to exploit a target system.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们介绍了如何通过各种技术访问设备。现在我们将进入后期利用任务，重点讲解Meterpreter会话以及如何在获得访问权限后进一步利用目标系统。接下来，我们将了解一些基本的文件系统命令，这些命令可以帮助我们更好地利用目标系统。
- en: Hitherto in this book, we have accessed a targeted system only to the point
    that a victim has our backdoor file or software running on their system. Now,
    we will look at how to maintain our access to the system, through both simple
    and advanced methods. We will even cover what can be done after performing a keylogging attack.
    Then, we will look at the important concept of pivoting, and we will use it to
    create an autoroute.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 迄今为止，在本书中，我们的访问仅限于目标系统，直到受害者的系统上运行了我们的后门文件或软件。现在，我们将学习如何通过简单和高级方法维持对系统的访问。我们甚至将探讨在执行键盘记录攻击后可以做什么。接下来，我们将介绍一个重要概念——跳板利用，并用它来创建自动化跳板。
- en: 'This chapter will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将覆盖以下内容：
- en: An introduction to post exploitation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后期利用简介
- en: Meterpreter basics
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Meterpreter基础
- en: Filesystem commands
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件系统命令
- en: Maintaining access by using simple methods
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用简单方法维持访问
- en: Maintaining access by using advanced methods
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用高级方法维持访问
- en: Keylogging
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 键盘记录
- en: An introduction to pivoting
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳板利用简介
- en: Pivoting autoroutes
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化跳板的引导
- en: An introduction to post exploitation
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后期利用简介
- en: Now that we've learned how to gain access to our target, let's look at what
    we can do with that target. In this section, we will learn a number of things
    that can be done after we have gained access to a computer. We will look at what
    to do with a computer regardless of how we gain access to it—whether we use a
    server-side exploit, social engineering, a backdoor, a problem with a certain
    application, or some other method.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何获取对目标的访问权限，让我们看看在获得访问权限后可以做什么。在本节中，我们将学习在获得计算机访问权限后可以做的许多事情。我们将了解无论如何获取访问权限（无论是使用服务器端漏洞、社交工程学、后门、某个应用程序的漏洞，还是其他方法），都可以在计算机上进行哪些操作。
- en: In the previous chapters, we always stopped when we got to a reverse Meterpreter
    session from our target. In this chapter, we are going to start with a Meterpreter
    session. We're not going to discuss how we gained access, but what we can do *after*
    gaining access. We will be discussing some really cool things, such as how to
    maintain access to a target computer even if its user uninstalls the vulnerable
    program or restarts the computer. We will look at how to download, upload, and
    read files, open the webcam, start the keylogger to register keystrokes, and so
    on. We will also look at how to use a target computer as a pivot to exploit all
    computers on the same network (supposing that, for example, our target isn't actually
    the computer that we hacked, but is on the same network as that computer). Again,
    all of the things that we will do in this chapter will focus on after we have
    exploited a target's vulnerabilities and have gained access to it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们通常会在获得反向Meterpreter会话后停止。 在本章中，我们将从Meterpreter会话开始。我们不会讨论如何获取访问权限，而是讨论获得访问权限后能做什么。我们将讨论一些非常酷的内容，例如如何保持对目标计算机的访问，即使用户卸载了易受攻击的程序或重启了计算机。我们将看看如何下载、上传和读取文件，打开摄像头，启动键盘记录程序来记录按键，等等。我们还将学习如何利用目标计算机作为跳板，进而攻击同一网络上的所有计算机（假设我们的目标实际上不是我们黑掉的计算机，而是与其位于同一网络的另一台计算机）。再次强调，本章将聚焦于在我们利用目标的漏洞并获得访问权限后可以做的所有事情。
- en: Meterpreter basics
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Meterpreter基础
- en: 'In this section, we''ll learn some basics on how to interact with Metasploit''s
    Meterpreter. In Linux, the `help` command is always the best command to run in
    terms of getting information about a specific command. So, the first thing that
    we will do is run the `help` command, to get a big list of all of the commands
    that we can run, and a description of what each command does, as shown in the
    following screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何与Metasploit的Meterpreter交互的基本知识。在Linux中，`help`命令始终是获取特定命令信息的最佳命令。因此，我们首先要做的就是运行`help`命令，获取我们可以运行的所有命令的完整列表，以及每个命令的描述，正如以下截图所示：
- en: '![](assets/34bf1d5a-97db-40e5-a381-7d386199ea05.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/34bf1d5a-97db-40e5-a381-7d386199ea05.png)'
- en: 'Looking at some of the basics, the first thing that we will highlight is the
    `background` command, as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下其中的一些基本内容，首先我们要重点介绍的是 `background` 命令，如下所示：
- en: '![](assets/0aac5654-2ebf-45ec-9914-0f9a530b377f.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0aac5654-2ebf-45ec-9914-0f9a530b377f.png)'
- en: 'The `background` command basically backgrounds the current session without
    terminating it. It''s very similar to minimizing a window. So, after running the
    `background` command, we can go back to Metasploit and run other commands to further
    exploit the target machine (or other machines), maintaining our connection to
    the computer that we just hacked. To see a list of all of the computers and sessions
    that we have in use, we can run the `sessions -l` command, which shows the current
    sessions. As we can see in the following screenshot, we still have the Meterpreter
    session—we didn''t lose it, and it''s between our device and the target device,
    which is `10.0.2.5`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`background` 命令基本上是将当前会话置于后台，而不终止它。这与最小化一个窗口非常相似。因此，在运行 `background` 命令后，我们可以返回到
    Metasploit 并运行其他命令来进一步利用目标机器（或其他机器），同时保持与我们刚刚攻破的计算机的连接。要查看我们正在使用的所有计算机和会话列表，可以运行
    `sessions -l` 命令，它会显示当前会话。正如我们在以下截图中看到的，我们仍然保持 Meterpreter 会话——我们并没有丢失它，它位于我们的设备与目标设备之间，目标设备的
    IP 是 `10.0.2.5`：'
- en: '![](assets/9d71df47-55c4-486a-b6ab-f09ce2723ff4.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9d71df47-55c4-486a-b6ab-f09ce2723ff4.png)'
- en: 'If we want to go back to the previous session to run Meterpreter again, all
    we have to do is run the `sessions` command with `-i` (for interact), and then
    put the ID (in our case, `2`), as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想返回到之前的会话并再次运行 Meterpreter，我们只需运行 `sessions` 命令并使用 `-i`（表示交互），然后输入会话 ID（在我们的例子中是
    `2`），如下所示：
- en: '![](assets/3ff55357-ec95-4d9f-80c7-c79b6d1add3e.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3ff55357-ec95-4d9f-80c7-c79b6d1add3e.png)'
- en: 'Another command is `sysinfo`. We run this command every time we hack into a
    system; it shows us information about the target computer. As we can see in the
    following screenshot, it shows us the computer''s name, its operating system,
    and its architecture. Also in the following screenshot, we can see that it''s
    a 64-bit computer, so if we want to run executables on the target in the future,
    we know to create 64-bit executables:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个命令是 `sysinfo`。每当我们入侵一个系统时都会运行此命令；它会显示目标计算机的信息。如以下截图所示，它显示了计算机的名称、操作系统和架构。在以下截图中，我们还可以看到它是
    64 位计算机，因此，如果我们想在未来运行可执行文件，我们知道需要创建 64 位的可执行文件：
- en: '![](assets/e19418a4-df0d-4e7d-b60d-d159df206719.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e19418a4-df0d-4e7d-b60d-d159df206719.png)'
- en: We can see that the language in use is English, the workgroup that the computer
    is working on, and the user ID that is logged in. We can also see the version
    of Meterpreter that's running on the target machine, and it's actually a 32-bit
    version.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到正在使用的语言是英语，计算机所在的工作组，以及登录的用户 ID。我们还可以看到运行在目标机器上的 Meterpreter 版本，实际上是 32
    位版本。
- en: 'Another useful command for gathering information is `ipconfig`. The `ipconfig` command
    in this case is very similar to the `ipconfig` command that we run on Windows
    machines (in the Command Prompt); it will show us all of the interfaces that are
    connected to the target computer, as shown in the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的信息收集命令是 `ipconfig`。此时，`ipconfig` 命令与我们在 Windows 机器上运行的 `ipconfig` 命令非常相似（在命令提示符中）；它将显示连接到目标计算机的所有接口，如下图所示：
- en: '![](assets/d2dc6a45-6290-405a-8ea1-a9374630ac4d.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d2dc6a45-6290-405a-8ea1-a9374630ac4d.png)'
- en: For example, we can see `Interface 1`, the MAC address, the IP address, and
    even the IPv4 address, connected to multiple networks. We can also see all of
    the interfaces and how to interact with them.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以看到 `Interface 1`，MAC 地址，IP 地址，甚至是 IPv4 地址，连接到多个网络。我们还可以看到所有接口以及如何与它们进行交互。
- en: 'Another useful information gathering command is the `ps` command. The `ps`
    command will list all of the processes that are running on the target computer;
    these might be background processes, or actual programs running in the foreground
    as Windows programs or GUIs. In the following screenshot, we can see a list of
    all of the processes that are running, along with each one''s name and `ID` or `PID`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的信息收集命令是 `ps` 命令。`ps` 命令将列出在目标计算机上运行的所有进程；这些可能是后台进程，或者是前台运行的实际程序，例如 Windows
    程序或 GUI。在以下截图中，我们可以看到所有正在运行的进程列表，以及每个进程的名称和 `ID` 或 `PID`：
- en: '![](assets/2cfc41e0-14ee-4690-845e-042428bd5aed.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2cfc41e0-14ee-4690-845e-042428bd5aed.png)'
- en: 'One interesting process is `explorer.exe`—that''s literally the graphical interface
    of Windows, and we can see in the preceding screenshot that it''s running on `PID
    4744`, as shown here:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的进程是`explorer.exe`—这实际上是 Windows 的图形界面，我们可以看到在前面的截图中它正在`PID 4744`上运行，如下所示：
- en: '![](assets/0f82e3e8-c249-415a-aeec-f2207f4db7a4.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0f82e3e8-c249-415a-aeec-f2207f4db7a4.png)'
- en: Once we have hacked into a system, it is a very good idea to migrate the process
    that the computer is running on into a process that is safer. For example, the
    `explorer.exe` process is the graphical interface of Windows, so it's always running,
    as long as the person is using their device. This means that it's much safer than
    the process through which we gained access to the computer. For example, if we
    gained access through an executable or a program, we will lose the process as
    soon as the person closes that program. A better method is to migrate to a process
    that is less likely to be closed or terminated. To do so, we will use a command
    called `migrate`, which will move our current session into a different process.
    We will use the `explorer.exe` process, because it's very safe.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们成功入侵系统，将计算机正在运行的进程迁移到更安全的进程是一个非常好的主意。例如，`explorer.exe`进程是 Windows 的图形界面，因此只要用户在使用设备，它就会一直运行。这意味着它比我们获取计算机访问权限的进程要安全得多。例如，如果我们通过一个可执行文件或程序获取访问权限，只要用户关闭该程序，我们就会失去进程。更好的方法是迁移到一个不太可能被关闭或终止的进程。为此，我们将使用一个名为`migrate`的命令，它将把我们当前的会话移动到另一个进程中。我们将使用`explorer.exe`进程，因为它非常安全。
- en: 'Use the `migrate 4744` command, where `4744` is the `PID` of the `explorer.exe` process.
    The following is the output of the `migrate` command:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`migrate 4744`命令，其中`4744`是`explorer.exe`进程的`PID`。以下是`migrate`命令的输出：
- en: '![](assets/dc7947f5-8e8f-43ce-bee2-d9f85ab379bb.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dc7947f5-8e8f-43ce-bee2-d9f85ab379bb.png)'
- en: 'At the moment, Meterpreter is running from the `explorer.exe` process. If we
    go to the Task Manager on the target computer and run our Resource Monitor, and
    then go to the Network tab and into TCP Connections, we will see that the connection
    on port `8080` is coming from the `explorer.exe` process, as shown here:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此刻，Meterpreter 正在从`explorer.exe`进程中运行。如果我们在目标计算机的任务管理器中运行资源监视器，然后转到网络选项卡并进入
    TCP 连接，我们将看到端口`8080`上的连接来自`explorer.exe`进程，如下所示：
- en: '![](assets/346ac043-6734-4fd8-a8d5-58ff0f018994.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/346ac043-6734-4fd8-a8d5-58ff0f018994.png)'
- en: TCP Connections
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: TCP 连接
- en: So, as for the target, it's not coming from a malicious file, our payload, or
    a backdoor, it's running through `explorer.exe`, which is not suspicious. Now,
    if we see Firefox or Chrome, we can migrate to those processes. And, if we are
    connecting through port `8080` or `80`, it's going to look even less suspicious,
    because ports `80` and `8080` are used by web servers, so it's very natural to
    have a connection through them.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于目标来说，连接并非来自恶意文件、我们的 payload 或后门，而是通过`explorer.exe`运行，这并不可疑。现在，如果我们看到 Firefox
    或 Chrome，我们可以迁移到这些进程。而且，如果我们通过端口`8080`或`80`连接，它看起来会更不可疑，因为端口`80`和`8080`是 Web 服务器使用的端口，因此通过它们进行连接是非常自然的。
- en: Filesystem commands
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件系统命令
- en: 'Now, we''re going to look at some more commands that will allow us to navigate,
    list, read, download, upload, and even execute files on the target computer. We
    have a Meterpreter session running, and the first thing that we will do is get
    our current working directory by using the `pwd` command. It will bring us to
    the `C:\Users` location. If we want to list all of the files and directories,
    we can use the `ls` command; the following screenshot shows the list of files:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一些更多的命令，这些命令将允许我们在目标计算机上导航、列出、读取、下载、上传甚至执行文件。我们有一个正在运行的 Meterpreter 会话，我们将首先使用`pwd`命令获取当前工作目录。它将把我们带到`C:\Users`位置。如果我们想列出所有文件和目录，我们可以使用`ls`命令；以下截图显示了文件列表：
- en: '![](assets/8d812699-ad81-44d7-ac81-9248bca4b556.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8d812699-ad81-44d7-ac81-9248bca4b556.png)'
- en: 'Let''s suppose that we want to navigate to the `IEUser` folder. We will use
    the `cd IEUser` command, and if we use `pwd`, we will be in the `C:\Users\IEUser` directory.
    Then, we will go into the `Downloads` directory and list the files. In the following
    list of files, we can see `passwords.txt`, which seems like an interesting file:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要导航到`IEUser`文件夹。我们将使用`cd IEUser`命令，如果我们使用`pwd`，我们将在`C:\Users\IEUser`目录中。然后，我们将进入`Downloads`目录并列出文件。在以下文件列表中，我们可以看到一个看起来很有趣的文件`passwords.txt`：
- en: '![](assets/258df5ee-6842-45db-b4c8-c9fb720a881b.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/258df5ee-6842-45db-b4c8-c9fb720a881b.png)'
- en: 'If we want to read this file, all we have to do is use the `cat paswords.txt`
    command. We can then see the content of the file, as shown in the following screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想读取这个文件，我们只需使用`cat paswords.txt`命令。然后我们可以看到文件的内容，如下图所示：
- en: '![](assets/3470d197-f353-4efe-89ad-74a60298dceb.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3470d197-f353-4efe-89ad-74a60298dceb.png)'
- en: If we check this file, we will see that the output we received from the `cat`
    command matches the content of the file.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们检查这个文件，我们会发现通过`cat`命令得到的输出与文件的内容一致。
- en: 'Let''s suppose that we want to keep this file for later. We can download it
    by using the `download` command and the filename, which is `paswords.txt`. The
    command''s output is shown as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要保留这个文件以供以后使用。我们可以通过使用`download`命令和文件名`paswords.txt`来下载它。命令的输出如下所示：
- en: '![](assets/e50a4766-2c97-406a-a526-d33f591d4cd7.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e50a4766-2c97-406a-a526-d33f591d4cd7.png)'
- en: 'Once we launch the command, the file will be downloaded; if we go to our `root`
    directory, we will see a file called `paswords.txt`, containing all of its data:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们启动命令，文件就会被下载；如果我们进入`root`目录，我们将看到一个名为`paswords.txt`的文件，里面包含了所有数据：
- en: '![](assets/941490e5-bba2-4bd4-86bf-d17b82d599a2.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/941490e5-bba2-4bd4-86bf-d17b82d599a2.png)'
- en: 'Now, suppose that we have a backdoor, a virus, a Trojan, or a keylogger that
    we want to upload to the target computer. We can upload it very easily. Going
    back to our `root` directory, we can see a lot of files, including one called
    `backdoored-calc.exe`. We''re going to try to upload that file by running the `upload` command,
    along with the filename. The file will be uploaded, as shown in the following
    screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们有一个后门、病毒、木马或键盘记录器，想要将其上传到目标计算机。我们可以非常轻松地上传它。返回到我们的`root`目录，我们可以看到很多文件，其中包括一个名为`backdoored-calc.exe`的文件。我们将通过运行`upload`命令和文件名来尝试上传该文件。文件将被上传，如下图所示：
- en: '![](assets/f90903cd-3a5b-46d9-94d1-4b02c19cea7d.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f90903cd-3a5b-46d9-94d1-4b02c19cea7d.png)'
- en: 'We will now bring up a list to make sure that the file exists; in the following
    screenshot, we can see a new file called `backdoored-calc.exe` in the following
    screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将列出一个清单，以确保文件存在；在下面的截图中，我们可以看到一个名为`backdoored-calc.exe`的新文件：
- en: '![](assets/ea143324-ac38-4c0e-812a-4c4101152fa6.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ea143324-ac38-4c0e-812a-4c4101152fa6.png)'
- en: 'To execute the uploaded file on the target computer (if it is a virus or a
    keylogger), all we have to do is run the `execute` command and specify the file
    that we would like to execute after the `-f` option. For our example, the file
    is `backdoored-calc.exe`. Once we execute it, we will see that the process `3324`
    has been created, so our backdoor has been executed:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要在目标计算机上执行上传的文件（如果它是病毒或键盘记录器），我们只需运行`execute`命令，并在`-f`选项后指定要执行的文件。例如，我们的文件是`backdoored-calc.exe`。一旦执行它，我们将看到进程`3324`已被创建，因此我们的后门已经执行：
- en: '![](assets/3f12e3f5-ea77-4caa-ac71-93a66a9becd4.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3f12e3f5-ea77-4caa-ac71-93a66a9becd4.png)'
- en: Now, if `backdoored-calc.exe` is a virus, it will do what it's supposed to do.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果`backdoored-calc.exe`是一个病毒，它将按照预期执行其功能。
- en: 'Another feature is the `shell` command, which converts the current Metasploit
    or Meterpreter session into an operating system shell. If we type in the `shell`
    command, we will get a Windows command line, where we can execute Windows commands.
    As we can see in the following screenshot, it''s on a different channel, and we
    can run any Windows command that we want through it. So, we can run the `dir` command
    to list all directories; we can use `ipconfig`; and we can use any other Windows
    command, exactly like running the commands through the Command Prompt:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个功能是`shell`命令，它将当前的Metasploit或Meterpreter会话转换为操作系统的命令行。如果我们输入`shell`命令，我们将得到一个Windows命令行界面，在这里我们可以执行Windows命令。正如我们在下图中看到的，它在一个不同的通道上，我们可以通过它运行任何Windows命令。因此，我们可以运行`dir`命令列出所有目录；我们可以使用`ipconfig`；还可以像在命令提示符下那样使用任何其他Windows命令：
- en: '![](assets/dfcc1f19-d59a-4754-a0b5-0ecf9ad29af7.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dfcc1f19-d59a-4754-a0b5-0ecf9ad29af7.png)'
- en: 'There are many more commands that we can use for filesystem management. If
    we type in the `help` command and go to the filesystem section, we will see that
    we can edit, download, move a file to another file, rename files, delete files,
    remove directories, search, and so on. There are so many more things we can do
    with the filesystem, and we have just given a basic overview of the main commands
    that we can use to manage the filesystem on the target computer, as shown in the
    following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他命令可以用来管理文件系统。如果我们输入`help`命令并进入文件系统部分，我们将看到可以编辑、下载、将文件移动到另一个文件、重命名文件、删除文件、移除目录、搜索等等。我们可以做的事情还有很多，我们这里只是概述了可以用来管理目标计算机上文件系统的主要命令，如下图所示：
- en: '![](assets/84e4820c-faab-4f65-a120-bf61023cf5d2.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/84e4820c-faab-4f65-a120-bf61023cf5d2.png)'
- en: Maintaining access by using simple methods
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用简单的方法保持访问
- en: In all of the examples that we've seen so far, we would lose our connection
    to the target computer as soon as the target user restarted the computer, because
    we used a normal backdoor, and once the computer restarted, that backdoor would
    be terminated, the process would be terminated, and we would lose our connection.
    In this section, we will discuss the methods that will allow us to maintain our
    access to the target computer, so that we can come back at any time and regain
    full control over the computer. There are a number of ways of doing this. The
    first one is by using Veil-Evasion; we can use an HTTP service or a TCP service
    instead of the HTTP backdoor that we created.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们目前看到的所有例子中，一旦目标用户重启计算机，我们会失去与目标计算机的连接，因为我们使用的是普通后门，一旦计算机重启，那个后门会被终止，进程会被终止，我们会失去连接。在这一部分，我们将讨论那些能够让我们保持访问目标计算机的方法，这样我们可以随时回来并重新获得对计算机的完全控制。有许多方法可以做到这一点。第一个方法是使用Veil-Evasion；我们可以使用HTTP服务或TCP服务，而不是我们创建的HTTP后门。
- en: 'Let''s look at an example. If we use Veil-Evasion and run the `list` command,
    we will see that at the numbers `6` and `8`, we have service backdoors, as shown
    in the following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子。如果我们使用Veil-Evasion并运行`list`命令，我们会看到在数字`6`和`8`的位置，我们有服务后门，如下图所示：
- en: '![](assets/cdea154a-69a5-4c0c-af93-a610de5d4d4f.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cdea154a-69a5-4c0c-af93-a610de5d4d4f.png)'
- en: 'If we run `use 6`, all we have to do is set up the `LHOST` and then `generate`
    the backdoor; we can combine it with other methods and send it to the target person,
    or we can upload it by using the `upload` command that we learned and then execute
    it, and that will install the backdoor as a service on the target computer:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行`use 6`，我们只需要设置`LHOST`，然后`generate`后门；我们可以将其与其他方法结合并发送给目标对象，或者我们可以使用之前学过的`upload`命令上传它，然后执行它，这样就会将后门作为服务安装在目标计算机上：
- en: '![](assets/b18ebb20-5e4e-4c8c-aba2-f15f9bbc843d.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b18ebb20-5e4e-4c8c-aba2-f15f9bbc843d.png)'
- en: 'All we have to do is use the multi-handler, and any time our target computer
    starts, it will try to connect back to us, because it is a reverse shell. We won''t
    look at this method in detail, because it''s very simple. We''ve done something
    similar to it before: we created a backdoor using Veil-Evasion and uploaded it
    to a target computer. So, all we have to do is create a backdoor, upload it, execute
    it, and then we are done. This doesn''t always work—that''s another reason we
    are not going to study it in detail. The normal backdoors are much more reliable;
    that''s why we used a normal backdoor when we were combining backdoors with other
    methods such as changing its icon.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的就是使用multi-handler，每次目标计算机启动时，它都会尝试回连，因为它是一个反向Shell。我们不会详细研究这种方法，因为它非常简单。我们以前做过类似的事情：我们使用Veil-Evasion创建了一个后门并上传到目标计算机。所以，我们只需要创建一个后门，上传它，执行它，然后就完成了。这并不总是有效——这也是我们不打算详细研究它的原因。普通的后门更可靠；这就是为什么我们在将后门与其他方法结合使用时，比如更改图标，时会使用普通后门。
- en: 'Another method is to use a module that comes with Meterpreter, called `persistence`;
    let''s look at how we can use it. All we have to do is use `run` with `persistence`,
    and then use `-h` to see the help menu, to show us all of the options that we
    can set up. In the following screenshot, we can see that `-A` starts a multi-handler
    straightaway; we don''t really need to change the location where the backdoor
    will be installed:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是使用Meterpreter附带的一个模块，叫做`persistence`；让我们看看如何使用它。我们只需要使用`run`命令并附加`persistence`，然后使用`-h`查看帮助菜单，显示所有可以设置的选项。在以下截图中，我们可以看到`-A`会立即启动一个multi-handler；我们实际上不需要更改后门安装的位置：
- en: '![](assets/6fd5cbff-6faf-4ac9-8185-489958f4d7d4.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6fd5cbff-6faf-4ac9-8185-489958f4d7d4.png)'
- en: The `-P` option will specify the payload; again, `windows/meterpreter/reverse_tcp`
    is a really good payload, so we don't really need to mess with it. The `-S` option
    is used to start using system privileges; as mentioned previously, we don't have
    system privileges, so we should be using the `-U` option. Then, we can use the
    `-i` option to set up the amount of time during which the backdoor will try to
    connect back to us; it'll try to connect every 10, 15, or 20 seconds—whatever
    we specify. The `-p` option is to specify the port, and the `-r` option is to
    specify the IP of our computer.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`-P`选项将指定负载；再次强调，`windows/meterpreter/reverse_tcp`是一个非常好的负载，因此我们不需要修改它。`-S`选项用于启用系统权限；如前所述，我们没有系统权限，因此应该使用`-U`选项。然后，我们可以使用`-i`选项来设置后门尝试连接回我们的时间间隔；它将每隔10、15或20秒尝试连接——具体时间由我们指定。`-p`选项用于指定端口，而`-r`选项用于指定我们计算机的IP。'
- en: 'To run `persistence`, all we have to do is use `run persistence`, `-U` (to
    start it under user privileges), `-i` at `20` seconds, and then `-p`, and we will
    probably put `80`, because, as we mentioned, port `80` doesn''t look suspicious.
    Then, we can use `-r` to specify our IP, which is `10.0.2.15`. The command will
    look something like the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行`persistence`，我们只需使用`run persistence`，`-U`（以用户权限启动），`-i`设置为`20`秒，然后使用`-p`，我们可能会选择`80`端口，因为如前所述，端口`80`看起来不容易引起怀疑。接着，我们可以使用`-r`来指定我们的IP，假设是`10.0.2.15`。命令大致如下：
- en: '[PRE0]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Obviously, once we run this, if we want to receive a connection, we have to
    start the multi-handler on port `80` (or on the selected port using the payload).
    The problem with this method is that it's detectable by antivirus programs; therefore,
    we won't explain it in more detail. We will instead explain a combination of both
    of these methods, which will not be detectable by antivirus programs and will
    be much more robust than using Veil-Evasion.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，一旦我们运行这个，如果我们想要接收连接，我们必须在端口`80`（或者使用负载选择的端口）上启动multi-handler。这个方法的问题是它会被杀毒软件检测到；因此，我们不会详细解释它。我们将解释这两种方法的结合体，这种方法不会被杀毒软件检测到，而且比使用Veil-Evasion更加稳健。
- en: Maintaining access by using advanced methods
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用高级方法保持访问
- en: In this section, we will use the normal HTTP reverse Meterpreter undetectable
    backdoor that we created previously. We will inject it as a service, so that it
    will run every time the target user runs their computer; it will try to connect
    back to us at certain intervals. To do this, first, we will `background` the current
    session. We've done that before; we can use `background` and still interact with
    the session on number `2`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用之前创建的普通HTTP反向Meterpreter不可检测后门。我们将其作为服务注入，这样每次目标用户启动计算机时，它都会尝试以某些间隔连接回我们。为此，首先，我们将当前会话`background`。我们之前做过这个操作；可以使用`background`并继续与编号为`2`的会话交互。
- en: 'We will `use` a module; it is like the multi-handler module that comes with
    Metasploit, and it''s called `exploit/windows/local/persistence`. We will look
    at its options, to see what we need to configure. In the following screenshot,
    we can see similar options to what we''ve seen in the Metasploit service:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`use`一个模块，它类似于Metasploit附带的multi-handler模块，名为`exploit/windows/local/persistence`。我们将查看它的选项，看看需要配置什么。在以下截图中，我们可以看到与Metasploit服务中看到的类似选项：
- en: '![](assets/017ea596-8c76-439a-b1e8-dfcb39250b8c.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/017ea596-8c76-439a-b1e8-dfcb39250b8c.png)'
- en: 'The first thing is the number of seconds during which the target will try to
    connect back to us—the `DELAY`. We are going to keep that at `10` seconds—so,
    every `10` seconds, the target computer will try to connect back to us. Now, `EXE_NAME`
    is the name that will show up under the processes where the connection is responding
    back from. We will set that to the browser, to make it less detectable; so, we
    will set `EXE_NAME` to `browser.exe`. The command is as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是目标将尝试连接回我们的秒数——即`DELAY`。我们将其保持为`10`秒——因此，每`10`秒，目标计算机将尝试连接回我们。现在，`EXE_NAME`是连接响应的进程名，我们将其设置为浏览器，以减少被检测的可能性；因此，我们将`EXE_NAME`设置为`browser.exe`。命令如下：
- en: '[PRE1]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `PATH` where the payload or backdoor will be installed will be left the
    same, and the `REG_NAME` (the registry entry) will also stay the same. Now, this
    is very important: we need to specify which session to run the exploit on. For
    this example, we are using session number `2`; that''s our Meterpreter session.
    If we use `sessions -l`, it will list all of the available sessions, and we will
    see that its `Id` number is `1`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 载荷或后门将被安装的`PATH`将保持不变，`REG_NAME`（注册表项）也将保持不变。现在，这非常重要：我们需要指定在哪个会话上运行exploit。在这个例子中，我们使用会话编号`2`；那是我们的Meterpreter会话。如果我们使用`sessions
    -l`，它将列出所有可用的会话，我们将看到其`Id`编号为`1`：
- en: '![](assets/c4265831-12d8-430d-8ff8-22db5035ac0b.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c4265831-12d8-430d-8ff8-22db5035ac0b.png)'
- en: 'We need to set our `SESSION` to number `2`. So, we will use `set SESSION 2`,
    and the `STARTUP` will be left as `USER`, for the user privileges. Now, if we
    run `show options`, we can see that `browser.exe` and the session number `2` are
    set, as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将我们的`SESSION`设置为编号`2`。因此，我们将使用`set SESSION 2`，并且`STARTUP`将保持为`USER`，用于用户权限。现在，如果我们运行`show
    options`，我们可以看到`browser.exe`和会话编号`2`已设置，如下所示：
- en: '![](assets/fb4d45d1-fb02-49b5-8e18-36d5b4409559.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fb4d45d1-fb02-49b5-8e18-36d5b4409559.png)'
- en: 'The most important thing to do is specify the payload that will be injected
    as a service. To do that, we will run `show advanced`. The `show advanced` command
    will show us the advanced options that we can set up for this particular module.
    The one that we''re interested in is called `EXE::Custom`, indicating that we''re
    going to use a custom `.exe` to run and inject into the target computer as a service:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的事情是指定将作为服务注入的载荷。为此，我们将运行`show advanced`。`show advanced`命令将显示我们可以为此特定模块设置的高级选项。我们感兴趣的是称为`EXE::Custom`的选项，表明我们将使用自定义的`.exe`运行并注入到目标计算机作为服务：
- en: '![](assets/ddf26d29-9df1-44f2-8812-56463cfd25de.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ddf26d29-9df1-44f2-8812-56463cfd25de.png)'
- en: 'We will set `EXE::Custom` to `/var/www/html/backdoor.exe`, so that we can run
    our backdoor that we had that stored in `/var/www/html/backdoor.exe`. The command
    is as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`EXE::Custom`设置为`/var/www/html/backdoor.exe`，这样我们就可以运行我们存储在`/var/www/html/backdoor.exe`中的后门。命令如下：
- en: '[PRE2]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, we will run `show advanced` to make sure that it was set up properly,
    because sometimes we misspell things:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将运行`show advanced`来确保它已正确设置，因为有时我们会拼错单词：
- en: '![](assets/bdc071fb-f985-41c9-9049-bcf6ea0482f7.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bdc071fb-f985-41c9-9049-bcf6ea0482f7.png)'
- en: 'We are going to `exploit` this, and that will upload `/var/www/html/backdoor.exe`
    onto the target computer, using the session that we specified (session number
    `2`). We will see that it''s been uploaded and installed once we execute `exploit`,
    as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将对此进行`exploit`，这将上传`/var/www/html/backdoor.exe`到目标计算机，使用我们指定的会话（会话编号为`2`）。一旦我们执行`exploit`，我们将看到它已被上传并安装，如下所示：
- en: '![](assets/4e949480-1a3c-40db-b754-0da3aa486635.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4e949480-1a3c-40db-b754-0da3aa486635.png)'
- en: An important thing to keep in mind is the resource file, because we can use
    it to clean up and delete the backdoor once we are done using it. If we don't
    want the backdoor on the target computer any more, we can use the resource file
    to delete it. We can store the RC file path from the `exploit` command output
    in the Leafpad, so that we can run it and delete our backdoor in the future.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 需要牢记的一件重要事情是资源文件，因为我们可以使用它来在使用完后清理和删除后门。如果我们不再希望在目标计算机上有后门，我们可以使用资源文件来删除它。我们可以将`exploit`命令输出中的RC文件路径存储在Leafpad中，这样我们可以在将来运行它并删除我们的后门。
- en: If we run `sessions -l`, it will show that the session is there, and we can
    interact with it. We can kill that session using the `session -K` command.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行`sessions -l`，它会显示会话存在，并且我们可以与其交互。我们可以使用`session -K`命令终止该会话。
- en: Now, if we use `list`, we will have no connections with the target computer.
    Using our exploit multi-handler, we can listen for incoming connections.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们使用`list`，我们将与目标计算机没有连接。使用我们的exploit multi-handler，我们可以监听传入的连接。
- en: If we run `exploit` and the hacked computer is already booted, we will get a
    connection straightaway, because our backdoor has been injected into the target
    computer on port `8080` on `reverse_http`. However, we are going to restart the
    target computer, just to make sure that we will always have a connection to it.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行`exploit`，并且被黑客入侵的计算机已经启动，我们将立即获得连接，因为我们的后门已经通过`reverse_http`端口`8080`注入到目标计算机中。然而，我们将重新启动目标计算机，只是为了确保我们始终能够连接到它。
- en: 'Perform a normal restart on the Windows machine. Our Kali computer will try
    to connect back to it every 10 seconds, no matter how many times the Windows machine
    is restarted or shut down. We will now run our Meterpreter handler and wait for
    connections. Just run `exploit` to listen, and it will take a maximum of 10 seconds
    to get a connection back. As we can see in the following screenshot, we received
    a connection to the target computer, and we now have full access to that computer:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows机器上执行正常重启。我们的Kali计算机将每10秒尝试重新连接，无论Windows机器重启或关机多少次。现在我们将运行我们的Meterpreter处理程序并等待连接。只需运行`exploit`进行监听，最多需要10秒钟即可重新连接。正如我们在以下截图中所看到的，我们收到了与目标计算机的连接，并且现在完全可以访问该计算机：
- en: '![](assets/1edd814d-5d54-4f3a-8766-430c4a7b9273.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1edd814d-5d54-4f3a-8766-430c4a7b9273.png)'
- en: Keylogging
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 键盘记录
- en: 'In this section, we''ll look at how we can log any mouse or keyboard event
    that happens on the target computer. We will do that using a plugin that comes
    with Meterpreter. We have our Meterpreter, so we just have to run `keyscan_start`,
    as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看看如何记录目标计算机上发生的任何鼠标或键盘事件。我们将使用Meterpreter附带的插件来实现。我们有我们的Meterpreter，所以我们只需运行`keyscan_start`，如下所示：
- en: '![](assets/1d7be45f-31fb-4b42-879b-0aca6b3c47ba.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1d7be45f-31fb-4b42-879b-0aca6b3c47ba.png)'
- en: 'Suppose that we want to go to Facebook and log in to an account. If we look
    at the URL for the site, it includes HTTPS, and there is nothing wrong with it.
    Generally, we need a password to log in to an account. If we come back to our
    Terminal, we can see a log of everything that has been recorded by typing `keyscan_dump`.
    With that command, we can see that the target user typed in `www.facebook.com`,
    hit *Enter*, and put in their username, which was `zaid@isecur1ty.org`, and the
    password `123456`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要进入Facebook并登录一个账户。如果我们查看该网站的URL，其中包含HTTPS，并且没有任何问题。通常，我们需要密码来登录账户。如果我们回到我们的终端，通过输入`keyscan_dump`可以看到记录的一切。通过该命令，我们可以看到目标用户输入了`www.facebook.com`，按下*Enter*，并输入了他们的用户名，即`zaid@isecur1ty.org`，以及密码`123456`：
- en: '![](assets/9bd52d90-558f-438d-aba3-13bd8eb8e9d1.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9bd52d90-558f-438d-aba3-13bd8eb8e9d1.png)'
- en: This will record everything that happens on the computer. We can stop running `keyscan_stop`,
    and it will stop the sniffer.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这将记录计算机上发生的一切。我们可以停止运行`keyscan_stop`，它将停止嗅探器。
- en: 'Another cool thing that we can do is get a screenshot, just by typing `screenshot`;
    it will save it for us in the `/root` directory:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以做的另一件很酷的事情是通过输入`screenshot`来获取屏幕截图；它会将其保存在`/root`目录中：
- en: '![](assets/c59fc08d-0f02-4e5e-aa54-fb53599fbeff.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c59fc08d-0f02-4e5e-aa54-fb53599fbeff.png)'
- en: 'Go to `/root`, and we''ll see that the screenshot is present. It''s showing
    us what''s being displayed on the target computer screen:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 前往`/root`，我们会看到截图存在。它显示了目标计算机屏幕上显示的内容：
- en: '![](assets/9cff4ff6-b768-4fcd-84fa-ecd255024a59.png)Capturing the targets screen'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/9cff4ff6-b768-4fcd-84fa-ecd255024a59.png)捕获目标屏幕'
- en: These are just two of the useful features we have available. The keylogging
    is very useful, because we can get usernames and passwords and see what the target
    user is doing on the computer. Obviously, we can use other keylogger programs,
    like a portable keylogger; all we have to do is upload them by using the `upload`
    command that we learned previously, and then `execute` them.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是我们可以使用的两个有用功能之一。键盘记录非常有用，因为我们可以获取用户名和密码，并查看目标用户在计算机上正在做什么。显然，我们可以使用其他键盘记录程序，如便携式键盘记录器；我们只需通过使用之前学到的`upload`命令上传它们，然后`execute`它们。
- en: An introduction to pivoting
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 枢纽简介
- en: 'In this section (and a few subsequent sections), we will study the concept
    of pivoting. We will assume that our target is the **METASPLOITABLE** device.
    In the following diagram, each one of the big circles is a network, and, as we
    can see, the Metasploitable device is not visible by the hacker:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节（以及接下来的几节）中，我们将学习枢纽概念。我们将假设我们的目标是**METASPLOITABLE**设备。在下面的图表中，每个大圆圈代表一个网络，正如我们所看到的，黑客看不到**Metasploitable**设备：
- en: '![](assets/7378244c-3cb7-41ea-bcf1-31aa820e41ff.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7378244c-3cb7-41ea-bcf1-31aa820e41ff.png)'
- en: The Metasploitabledevice is hidden, either behind the network, or for some other
    reason. The hacker is not able to ping or access the IP address of the Metasploitable
    device. We're assuming that in our example, the Metasploitable device exists in
    a different network. We can see that the network has four devices. It has the Metasploitable
    device, an iPhone, another device, and a Windows device (which we hacked, and
    which is in red); the hacker device exists in the smaller network, and there are
    only two devices (the hacker, and the Windows machine that we hacked). The goal
    of pivoting is to use the device that we hacked (the common device in the middle)
    to compromise other devices that it has access to. So, the hacker cannot see our
    target, which is the Metasploitable device—but the device that we just hacked
    can see that device, because they're on the same network.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploitable 设备被隐藏，要么在网络后面，要么是其他原因。黑客无法 ping 通或访问 Metasploitable 设备的 IP 地址。我们假设在我们的示例中，Metasploitable
    设备存在于不同的网络中。我们可以看到该网络有四个设备，分别是 Metasploitable 设备、一台 iPhone、另一个设备以及一台 Windows 设备（我们已入侵，并且该设备用红色标记）；黑客设备存在于较小的网络中，且只有两个设备（黑客和我们入侵的
    Windows 机器）。枢轴攻击的目标是通过我们入侵的设备（中间的常规设备）来攻击它能够访问的其他设备。因此，黑客无法看到我们的目标设备——Metasploitable
    设备——但我们刚刚入侵的设备可以看到该设备，因为它们在同一网络上。
- en: In the next few sections, we will try to hack the Metasploitable device, even
    while it is not visible to the hacker (the Kali device). The only way to access
    the Metasploitable device is through the Windows device, which will be used as
    a pivot.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我们将尝试入侵 Metasploitable 设备，即使它对黑客（Kali 设备）不可见。访问 Metasploitable 设备的唯一方法是通过
    Windows 设备，它将作为枢轴使用。
- en: 'To set up our network (our lab), we will go to the VirtualBox settings, and
    then to Preferences | Network; we can see that we have a network that we''ve been
    using as the internal NAT network:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置我们的网络（我们的实验室），我们将进入 VirtualBox 设置，然后进入首选项 | 网络；我们可以看到我们一直在使用的网络，它是内部 NAT
    网络：
- en: '![](assets/cd6f3b66-0342-462d-8d53-e655cf22dfb2.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cd6f3b66-0342-462d-8d53-e655cf22dfb2.png)'
- en: 'The NatNetwork is the one that our Windows and Kali devices are connected to.
    We are going to create another NAT network by clicking on the plus sign (+), and
    it will be called NatNetwork1:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: NatNetwork 是我们的 Windows 和 Kali 设备连接的网络。我们将通过点击加号（+）创建另一个 NAT 网络，命名为 NatNetwork1：
- en: '![](assets/875d8084-7548-4b11-9ad2-3c676c54f208.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/875d8084-7548-4b11-9ad2-3c676c54f208.png)'
- en: 'Now, we will click on the third icon to the right to edit the settings, and
    we can set the network''s IP. We will set it to `10.0.3.0/24`. The following screenshot
    shows all of the settings:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将点击右侧的第三个图标来编辑设置，并且可以设置网络的 IP。我们将其设置为 `10.0.3.0/24`。以下截图展示了所有设置：
- en: '![](assets/313099dc-b052-4258-b23d-1bdea498cbe5.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/313099dc-b052-4258-b23d-1bdea498cbe5.png)'
- en: 'So, we created another network, and the Kali machine is not connected to this
    network. Now, we will modify the settings of the Windows device to connect it
    to the two networks. The Windows device, as we can see in the preceding screenshot,
    is the common device, and it will be connected to the NAT network that the Kali
    is connected to, and also the one that the Metasploitable device is connected
    to. In the Windows machine settings, go to Network | Adapter 2 | Enable Network
    Adapter, and connect it to a NAT Network. Then, select NatNetwork1, as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们创建了另一个网络，Kali 机器没有连接到这个网络。现在，我们将修改 Windows 设备的设置，使其连接到这两个网络。正如我们在前面的截图中看到的，Windows
    设备是常规设备，它将连接到 Kali 设备所在的 NAT 网络，以及 Metasploitable 设备所在的网络。在 Windows 机器设置中，进入网络
    | 适配器 2 | 启用网络适配器，并将其连接到 NAT 网络。然后，选择 NatNetwork1，如下所示：
- en: '![](assets/5f3dffcf-de86-4875-81c9-f70b356945c5.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5f3dffcf-de86-4875-81c9-f70b356945c5.png)'
- en: The Windows device now uses two adapters; one of them is connected to NatNetwork, and
    the other one is connected to NatNetwork1.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Windows 设备使用了两个适配器；其中一个连接到 NatNetwork，另一个连接到 NatNetwork1。
- en: 'On the Metasploitable device, go to Settings | Network, and, instead of connecting
    it to NatNetwork, connect it to NatNetwork1:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Metasploitable 设备上，进入设置 | 网络，并将其从连接到 NatNetwork 改为连接到 NatNetwork1：
- en: '![](assets/c63883fd-485c-44f0-a1e7-fbd0005b6496.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c63883fd-485c-44f0-a1e7-fbd0005b6496.png)'
- en: Now, the Metasploitable device is only connected to the network that the Windows
    device is connected to, and the Kali machine is only connected to the network
    that the Windows device is connected to; the Windows device is connected to both
    networks.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Metasploitable设备仅连接到Windows设备连接的网络，而Kali机器仅连接到Windows设备连接的网络；Windows设备连接到两个网络。
- en: 'Now, to verify that we have the settings, we will start our Metasploitable
    device and the Windows device, and will use some `ping` commands to make sure
    that everything is set up correctly. The main thing is that the Windows machine
    should be able to ping both the Metasploitable and Kali devices. In the following
    screenshot, we can see that we have obtained the IP of the Metasploitable device
    - `10.0.3.5`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了验证我们的设置是否正确，我们将启动我们的Metasploitable设备和Windows设备，并将使用一些`ping`命令来确保一切设置正确。主要是Windows机器应该能够ping通Metasploitable和Kali设备。在下面的截图中，我们可以看到我们已经获得了Metasploitable设备的IP
    - `10.0.3.5`：
- en: '![](assets/c9b1757a-8ff0-4d2a-bce4-2b94f965b158.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c9b1757a-8ff0-4d2a-bce4-2b94f965b158.png)'
- en: 'Run `ping 10.0.3.5`, and we will see that the Windows machine can see the Metasploitable
    machine, as shown in the following screenshot:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`ping 10.0.3.5`，我们会看到Windows机器可以看到Metasploitable机器，如下截图所示：
- en: '![](assets/81ed271a-5dd2-4fbd-903f-235aa3ef5d9b.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/81ed271a-5dd2-4fbd-903f-235aa3ef5d9b.png)'
- en: 'Now, let''s check whether it can see the Kali machine, which is on `10.0.2.15`;
    again, if Windows can see both machines, it means that it is the machine in the
    middle:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们检查它是否能看到Kali机器，即`10.0.2.15`；同样，如果Windows可以看到两台机器，这意味着它是中间设备：
- en: '![](assets/c498b1e6-5c1c-433e-a91c-ce7d17b0b785.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c498b1e6-5c1c-433e-a91c-ce7d17b0b785.png)'
- en: 'Also, we will check whether the Metasploitable machine can see the Kali machine.
    It shouldn''t be able to see it, because the Kali machine and the Metasploitable
    machine are connected to two different networks. When we run `ping 10.0.2.15` on
    the Metasploitable machine, we can see that we get nothing—`18` packets are transmitted
    and `0` are received:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将检查Metasploitable机器是否能看到Kali机器。它不应该能看到，因为Kali机器和Metasploitable机器连接到两个不同的网络。当我们在Metasploitable机器上运行`ping
    10.0.2.15`时，我们会看到我们什么也没有收到—已发送`18`个数据包，接收`0`个：
- en: '![](assets/ca8726d0-a67e-4d6a-bf77-c93c372c72a1.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ca8726d0-a67e-4d6a-bf77-c93c372c72a1.png)'
- en: 'So, the Metasploitable device cannot see the Kali machine, and the Kali machine
    cannot see the Metasploitable device, either. Run `ping 10.0.3.5` on Kali, and
    we will see that it sends `3` packets and `0` are received; these two devices
    cannot see each other, because they''re on two different networks, as the following
    screenshot indicates:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Metasploitable设备无法看到Kali机器，Kali机器也无法看到Metasploitable设备。在Kali上运行`ping 10.0.3.5`，我们会看到它发送了`3`个数据包，但没有接收到；这两台设备无法相互看到，因为它们位于两个不同的网络上，如下截图所示：
- en: '![](assets/a4d301e1-4c2d-4daf-8665-0f3613650891.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a4d301e1-4c2d-4daf-8665-0f3613650891.png)'
- en: In the next section, we will use our access to the Windows machine to hack into
    the Metasploitable device, because the Windows machine is the common device, connected
    to both networks.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将利用对Windows机器的访问来入侵Metasploitable设备，因为Windows机器是连接到两个网络的公共设备。
- en: Pivoting autoroutes
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 枢轴自动路由
- en: Now that we understand the concept of pivoting, it won't be difficult to perform.
    All we need to do is upload any tool that we want to use; for example, if we want
    to use Nmap or ARP spoof or dSniff, we can upload those tools and run them on
    the Windows computer, which is connected to the big network, and then run a port
    scanner, perform ARP poisoning, or do man-in-the-middle attacks, just like we
    learned previously. It's very simple; all we have to do is use the `upload` command
    and use the tool from the command line.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们理解了枢轴概念，执行起来就不难了。我们只需要上传我们想要使用的任何工具；例如，如果我们想要使用Nmap或ARP欺骗或dSniff，我们可以上传这些工具并在连接到大型网络的Windows计算机上运行它们，然后运行端口扫描器，执行ARP欺骗，或进行中间人攻击，就像我们之前学到的那样。非常简单；我们只需使用`upload`命令并从命令行中使用该工具。
- en: In this section, we will see how to set up a route between the hacked computer
    and our computer, so that we can use any Metasploit auxiliary or module against
    the big network. We'll be able to use Metasploit exploits, port scanners, and
    other useful modules.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何在被黑客入侵的计算机和我们的计算机之间建立路由，以便我们可以针对大型网络使用任何Metasploit辅助工具或模块。我们将能够使用Metasploit漏洞利用、端口扫描器和其他有用的模块。
- en: 'To do this, we''re going to use a module called `autoroute`. Let''s look at
    how to run an exploit on the Metasploitable virtual machine; it''s should not
    work, because it''s not visible to us for now. So, we will use `sessions list`,
    and will see that we have a connection through the Windows machine, which we already
    hacked:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们将使用一个叫做`autoroute`的模块。让我们看一下如何在Metasploitable虚拟机上运行漏洞攻击；它应该不会成功，因为现在它对我们不可见。所以，我们将使用`sessions
    list`，并且会看到我们通过已被黑的Windows机器建立了连接：
- en: '![](assets/695d1b86-c7c8-4401-abc9-2b172f1a3005.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/695d1b86-c7c8-4401-abc9-2b172f1a3005.png)'
- en: 'Next, we will run `use exploit/multi/samba/usermap_script`—we already used
    this exploit against the Metasploitable device before, but it was on the same
    network then, so it was visible to us. This time, we''re trying to attack a device
    that is invisible. Then, we will run `show options`, as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将运行`use exploit/multi/samba/usermap_script`——我们之前已经在Metasploitable设备上使用过这个漏洞，但那时它和我们处在同一网络中，所以我们能够看到它。这一次，我们尝试攻击的是一个不可见的设备。然后，我们将运行`show
    options`，如下所示：
- en: '![](assets/4c365de3-abfe-4973-8c40-1bb602918e63.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4c365de3-abfe-4973-8c40-1bb602918e63.png)'
- en: 'We will set `RHOST` to `10.0.3.5`, because that''s the IP address of the Metasploitable
    device. Then, when we use `set PAYLOAD cmd/unix/bind_netcat` and `show options`,
    everything will be set up properly; so, we will run `exploit`, and we will see
    that the exploit will time out, because (as we saw in the diagram in the *An introduction
    to pivoting* section) the hacker device cannot see the Metasploitable device.
    So, it''s trying to run an exploit on the Metasploitable device, even though the
    Metasploitable device has a vulnerability, but we won''t be able to use it because
    we can''t see the Metasploitable device, and, as we will see, the exploit failed,
    we received the `ConnectionTimeout`, and we just couldn''t connect to the target
    computer, as shown in the following screenshot:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`RHOST`设置为`10.0.3.5`，因为那是Metasploitable设备的IP地址。然后，当我们使用`set PAYLOAD cmd/unix/bind_netcat`和`show
    options`时，所有设置都会正确完成；所以我们将运行`exploit`，我们会看到漏洞会超时，因为（正如我们在*引入跳板攻击*一节中看到的）黑客设备看不到Metasploitable设备。所以，它尝试在Metasploitable设备上运行一个漏洞，尽管Metasploitable设备有漏洞，但由于我们无法看到它，我们无法利用它，正如我们将看到的，漏洞攻击失败了，我们收到了`ConnectionTimeout`，我们无法连接到目标计算机，如下图所示：
- en: '![](assets/ac7ed58b-249b-416b-bdc9-ddbf8965daf3.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ac7ed58b-249b-416b-bdc9-ddbf8965daf3.png)'
- en: 'Now, we will interact with Meterpreter on `ID 1` and run `sessions -i 1`. So,
    in our Meterpreter, we will run `ifconfig` to see those networks that the target
    computer is connected to:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将与`ID 1`上的Meterpreter交互，并运行`sessions -i 1`。接着，在我们的Meterpreter中，我们将运行`ifconfig`来查看目标计算机连接的网络：
- en: '![](assets/b95d40ff-75a3-4e74-9c5d-794e9f2b8cbc.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b95d40ff-75a3-4e74-9c5d-794e9f2b8cbc.png)'
- en: We can see all of the interfaces connected to the target computer, and we will
    look for interfaces with IP addresses. We can see that interface number `9` has
    an IP address, and we can see that the IP address is on our network; so it's really
    not very useful. It's already on our network; we're on the `10.0.2.5/24` subnet.
    Another interface that we can see is `Interface 21`, which is connected to `10.0.3.4`;
    it's on a different subnet, which we cannot see from our Kali Linux device.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到所有连接到目标计算机的接口，并且我们将寻找有IP地址的接口。我们看到接口编号`9`有一个IP地址，并且这个IP地址在我们的网络上；所以它实际上没什么用。它已经在我们的网络上；我们在`10.0.2.5/24`子网中。另一个我们能看到的接口是`Interface
    21`，它连接到`10.0.3.4`；这个接口在一个不同的子网上，而我们从Kali Linux设备上看不到这个子网。
- en: 'We will now try to set up a route between a different subnet and the current
    subnet. We will copy the address `10.0.3.4` and create a `background` of the current
    session, coming back to Metasploit. Then, we will run `use post/multi/manage/autoroute`.
    Now, if we want to see all of the managed modules at any point, after the `use
    post/multi/manage/` command, press *Tab* twice, and we will see all of the `post/multi/manage`
    modules and can try a new experiment with them:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将尝试在不同子网与当前子网之间设置路由。我们将复制地址`10.0.3.4`，并将当前会话设置为`background`，然后返回到Metasploit。接着，我们将运行`use
    post/multi/manage/autoroute`。现在，如果我们想查看所有已管理的模块，可以在`use post/multi/manage/`命令后，按两次*Tab*，我们将看到所有`post/multi/manage`模块，并可以尝试新的实验：
- en: '![](assets/7af4873e-2c2c-487d-9659-a9974daf2469.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7af4873e-2c2c-487d-9659-a9974daf2469.png)'
- en: The one that we want to use now is `autoroute`. We need to set the `SESSION`
    and the `SUBNET`; set the `SESSION` first, by running `set SESSION 1`, and then
    set the `SUBNET` to what we've seen when we ran the `ifconfig` command. It was
    `10.0.3.4`. Again, we're using the very simple commands that we have already learned.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在要使用的是`autoroute`。我们需要设置`SESSION`和`SUBNET`；首先通过运行`set SESSION 1`来设置`SESSION`，然后将`SUBNET`设置为我们在运行`ifconfig`命令时看到的值，它是`10.0.3.4`。再次提醒，我们使用的都是我们已经学过的非常简单的命令。
- en: 'We will set this `SESSION` to number `1` (that''s the `SESSION` that we hacked
    for the Windows machine), and the `SUBNET` is the `SUBNET` that the Windows machine
    is connected to, so it''s `10.0.3.0`. We will then run `exploit`, and this will
    create the connection (or the route) between our device and the Windows device:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这个`SESSION`设置为编号`1`（这是我们为Windows机器劫持的`SESSION`），而`SUBNET`是Windows机器连接的`SUBNET`，所以它是`10.0.3.0`。然后我们运行`exploit`，这将创建我们设备和Windows设备之间的连接（或路由）：
- en: '![](assets/5e551b8c-21b4-44c2-ba36-7b4f6502e5d6.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5e551b8c-21b4-44c2-ba36-7b4f6502e5d6.png)'
- en: Now, we will go back to the same exploit that we tried at the start of this
    section, and we will see that the exploit is going to work now, because the Windows
    device is now visible to us. Instead of using the `exploit/multi/samba/usermap_script` exploit,
    we can use the port scanners or discovery modules that come pre-installed with
    Metasploit, or any other module that comes with Metasploit. We now have a connection
    to the Windows computer, and we have set up a route between that network and our
    computer, so we can now see the Metasploitable device.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将回到本节开始时尝试的相同漏洞，我们会看到这个漏洞现在可以生效，因为Windows设备现在对我们可见。我们可以使用Metasploit预装的端口扫描器或发现模块，或者任何其他随Metasploit一起提供的模块，而不是使用`exploit/multi/samba/usermap_script`漏洞。现在我们已经与Windows计算机建立了连接，并在该网络和我们的计算机之间设置了路由，所以我们现在可以看到Metasploitable设备。
- en: 'Now, we are going to use the same exploit that we used before: `exploit/multi/samba/usermap_script`.
    We will leave the options the same, because everything is set up correctly. We
    will just run `exploit`, and, as we can see in the following screenshot, the command
    shell will start properly, and we will have access to the Metasploitable device:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用之前使用的相同漏洞：`exploit/multi/samba/usermap_script`。我们将保持选项不变，因为一切都设置正确。我们只需要运行`exploit`，正如我们在下面的截图中看到的，命令行界面将正常启动，我们将能够访问Metasploitable设备：
- en: '![](assets/9c61233e-34da-490c-a9ba-1d4c6560773b.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9c61233e-34da-490c-a9ba-1d4c6560773b.png)'
- en: 'We can run `id` and `uname -a` to confirm the preceding, and we can see that
    we''re in the Metasploitable device and can run any Linux command that we want;
    we can use `ls`, `pwd`, or any other Linux command, as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以运行`id`和`uname -a`来确认之前的情况，并且我们可以看到我们已经进入了Metasploitable设备，可以运行任何我们想要的Linux命令；我们可以使用`ls`、`pwd`或任何其他Linux命令，如下所示：
- en: '![](assets/30bcf721-bff9-4a6a-92c1-94e2451fe5a2.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/30bcf721-bff9-4a6a-92c1-94e2451fe5a2.png)'
- en: Basically, we have full access to the target computer. As we mentioned previously,
    we can upload a program and run it from the target computer. However, it's not
    always a good idea to upload things to a hacked computer—setting up routes and
    using pivoting are much safer choices.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们已经完全访问了目标计算机。正如我们之前提到的，我们可以上传程序并从目标计算机运行它。然而，将东西上传到被攻击的计算机并不总是一个好主意——设置路由和使用跳板是更安全的选择。
- en: It is highly recommended to take a look at other Metasploitable modules, because
    Metasploit is very vast. It was difficult for me to cover everything; I just covered
    the main points, but you can always go in and take a look at other modules. Using
    the modules in practice is usually the same as what we did here; we took a look
    at a broad array of modules, so you should be able to configure options and run
    modules however you like.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议查看其他Metasploitable模块，因为Metasploit非常庞大。对我来说，涵盖所有内容是很困难的；我只是覆盖了主要的要点，但你可以随时进入并查看其他模块。实际使用模块通常和我们在这里做的相同；我们查看了广泛的模块，因此你应该能够根据自己的需要配置选项并运行模块。
- en: Summary
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we focused on post exploitation tasks, which involved what
    can be done after we have broken into a target system. We covered basic filesystem
    commands and illustrated how to access a victim's machine, even if the user is
    not using a particular software or has powered off the system. We implemented
    both simple and advanced methods to maintain access to a system. Then, we looked
    at how to obtain user credentials after performing a keylogging attack on a target
    device. Later, we went over the concept of pivoting, which means targeting a system
    that is not directly present on our network. We even studied examples of pivoting
    autoroutes.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们重点讲解了后渗透任务，即在成功侵入目标系统后可以执行的操作。我们介绍了基本的文件系统命令，并演示了如何访问受害者的机器，即使用户没有使用特定软件或已关闭系统电源。我们实现了简单和高级方法来保持对系统的访问。然后，我们讨论了如何在对目标设备进行键盘记录攻击后获取用户凭证。接下来，我们讲解了“跳板”概念，这意味着针对不直接位于我们网络上的系统进行攻击。我们甚至研究了跳板自动路由的示例。
- en: In the next few chapters, we will cover the fundamentals of website penetration
    testing.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几章中，我们将介绍网站渗透测试的基本概念。
