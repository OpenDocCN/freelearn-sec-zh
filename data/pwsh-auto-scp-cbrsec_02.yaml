- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: PowerShell Scripting Fundamentals
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PowerShell 脚本基础
- en: Now that you have learned how to get started with PowerShell, let’s have a closer
    look at PowerShell scripting fundamentals to refresh our knowledge.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经学会了如何开始使用 PowerShell，接下来让我们深入了解 PowerShell 脚本基础，刷新一下我们的知识。
- en: We will start with the basics, such as working with variables, operators, and
    control structures. Then, we will dive deeper, putting the big picture together
    when it comes to cmdlets, functions, and even modules.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从基础知识开始，学习如何使用变量、运算符和控制结构。然后，我们将深入探讨，将 Cmdlet、函数甚至模块的大致框架串联起来。
- en: After working through this chapter, you should be able to create your very own
    scripts and even know how to create your own modules.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章内容后，您应该能够创建自己的脚本，甚至知道如何创建自己的模块。
- en: 'In this chapter, we are going to cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Variables
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量
- en: Operators
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运算符
- en: Control structures
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制结构
- en: Naming conventions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名约定
- en: Cmdlets
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cmdlet
- en: Functions
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数
- en: Aliases
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 别名
- en: Modules
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you will need the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章所需内容：
- en: PowerShell 7.3 and above
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PowerShell 7.3 及以上版本
- en: Visual Studio Code
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code
- en: 'Access to the GitHub repository for **Chapter02**: [https://github.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/tree/master/Chapter02](https://github.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/tree/master/Chapter02)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问 **Chapter02** 的 GitHub 仓库：[https://github.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/tree/master/Chapter02](https://github.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/tree/master/Chapter02)
- en: Variables
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量
- en: 'A **variable** is a storage location that developers can use to store information
    with a so-called *value*. Variables always have names that allow you to call them
    independently of the values that are stored within. In PowerShell, the **$** sign
    at the beginning indicates a variable:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**变量** 是开发者用来存储所谓 *值* 的存储位置。变量总是有名称，允许你独立于存储的值来调用它们。在 PowerShell 中，变量前面的 **$**
    符号表示它是一个变量：'
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Variables are great for storing simple values, strings, and also the output
    of commands:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 变量非常适合存储简单值、字符串以及命令的输出：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see in these examples, not only can we store strings and numbers
    within a variable, we can also store the output of a cmdlet such as **Get-Date**
    and reuse it within our code.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如这些示例所示，我们不仅可以在变量中存储字符串和数字，还可以存储 Cmdlet 的输出，如**Get-Date**，并在代码中重复使用。
- en: Data types
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据类型
- en: 'In contrast to other scripting or programming languages, you don’t necessarily
    need to define the data type for variables. When defining a variable, the data
    type that makes the most sense is automatically set:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他脚本语言或编程语言不同，您不必在定义变量时显式指定数据类型。定义变量时，系统会自动设置最适合的类型：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can find out which data type was used with the **GetType()** method:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过 **GetType()** 方法来查看使用了哪种数据类型：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In PowerShell, data types are automatically set. When defining variables in
    an automated way, sometimes it can happen that the wrong variable type is set.
    For example, it can happen that an integer was defined as a string. If you spot
    a conflict, the **GetType()** method helps you to find out which data type was
    set.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PowerShell 中，数据类型是自动设置的。在以自动化方式定义变量时，有时会发生错误类型的设置。例如，可能会出现将整数定义为字符串的情况。如果发现冲突，**GetType()**
    方法可以帮助您找出设置的实际数据类型。
- en: Overview of data types
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据类型概述
- en: 'The following table shows a list of variable data types with their description:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格展示了各种变量数据类型及其描述：
- en: '![Table 2.1 – Variable data types](image/B16679_02_Table_001.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![表 2.1 – 变量数据类型](image/B16679_02_Table_001.jpg)'
- en: Table 2.1 – Variable data types
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.1 – 变量数据类型
- en: 'These are the most common data types that you will come across when working
    with PowerShell. This is not a complete list, so there might also be other variables
    that you will encounter: using **GetType()** helps you identify the variable data
    type.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是您在使用 PowerShell 时最常遇到的数据类型。此列表并不完整，您可能还会遇到其他变量：使用 **GetType()** 可以帮助您识别变量数据类型。
- en: 'In PowerShell, all data types are based on .NET classes; to get more information
    on each class, you can refer to the official Microsoft documentation:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PowerShell 中，所有数据类型都基于 .NET 类；要获取有关每个类的更多信息，可以参考官方 Microsoft 文档：
- en: '[https://learn.microsoft.com/en-us/dotnet/api/system](https://learn.microsoft.com/en-us/dotnet/api/system)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://learn.microsoft.com/en-us/dotnet/api/system](https://learn.microsoft.com/en-us/dotnet/api/system)'
- en: '[https://learn.microsoft.com/en-us/dotnet/api/system.management.automation](https://learn.microsoft.com/en-us/dotnet/api/system.management.automation)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://learn.microsoft.com/en-us/dotnet/api/system.management.automation](https://learn.microsoft.com/en-us/dotnet/api/system.management.automation)'
- en: Casting variables
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型转换变量
- en: 'Normally, there’s no need to declare data types, as PowerShell does it by itself.
    But sometimes there might be a need to change the data type – for example, if
    a list of imported number values is treated like a string instead of **int**:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通常不需要声明数据类型，因为PowerShell会自动处理。但有时可能需要更改数据类型——例如，如果导入的数字值列表被当作字符串处理而不是**int**：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you are processing values that have the wrong data type declared, you will
    either see nasty error messages (because only another input is accepted) or your
    code will not work as expected.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在处理声明了错误数据类型的值，你将看到令人头疼的错误信息（因为只接受其他输入），或者你的代码将无法按预期工作。
- en: 'If the **$number** variable was declared as a string and we perform an addition,
    a mathematical operation will not be performed. Instead, both are concatenated
    as a string:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果**$number**变量被声明为字符串，并且我们执行加法操作，那么将不会进行数学运算。相反，两者会作为字符串连接在一起：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Although 42 might be the answer to the ultimate question of life, the universe,
    and everything, it is not the expected answer for our equation: when adding *4
    + 2*, we expect the result *6*, but since *4* is treated as a string, *2* will
    be concatenated and the string *42* is shown as a result:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然42可能是生命、宇宙和一切问题的终极答案，但它并不是我们方程的预期答案：当我们计算*4 + 2*时，期望的结果是*6*，但由于*4*被视为字符串，*2*将被连接成字符串*42*，并作为结果显示：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Especially when parsing files or input, it can happen that variables are not
    set correctly. If that happens, error messages or wrong operations are the results.
    Of course, this behavior is not strictly limited to integers and strings: it can
    basically occur with every other data type as well.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是在解析文件或输入时，变量可能没有正确设置。如果发生这种情况，结果会是错误信息或错误操作。当然，这种行为不仅限于整数和字符串：基本上每种数据类型都会发生类似问题。
- en: If you discover that a wrong data type is set, you can convert the data type
    by **casting** it to another type.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发现设置了错误的数据类型，可以通过**类型转换**将数据类型转换为其他类型。
- en: 'If we want, for example, to process **$number** as a normal integer, we need
    to cast the variable type to **[int]**:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要将**$number**作为普通整数处理，我们需要将变量类型转换为**[int]**：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, **$int_number** can be processed as a normal integer, and performing mathematical
    operations works as expected:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，**$int_number**可以作为普通整数处理，执行数学运算时也能按预期工作：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can also cast a Unicode hex string into a character in PowerShell by using
    the hex value of the Unicode string and casting it to **[char]**:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过使用Unicode字符串的十六进制值，并将其转换为**[char]**，在PowerShell中将Unicode十六进制字符串转换为字符：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Most of the time, the right variable data type is already set automatically
    by PowerShell. Casting data types helps you to control how to process the data,
    avoiding wrong results and error messages.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，PowerShell会自动设置正确的变量数据类型。类型转换可以帮助你控制如何处理数据，避免错误结果和错误信息。
- en: Automatic variables
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动变量
- en: Automatic variables are built-in variables that are created and maintained by
    PowerShell.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 自动变量是由PowerShell创建并维护的内置变量。
- en: 'Here is just a small collection of commonly used automatic variables that are
    important for beginners. You might find other automatic variables used in later
    chapters:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这里只是一个初学者常用的自动变量小集合。你可能会在后续章节中找到其他自动变量：
- en: '**$?**: The execution status of the last command. If the last command succeeded,
    it is set to **True**, otherwise, it is set to **False**.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**$?**：上一个命令的执行状态。如果上一个命令成功执行，则设置为**True**，否则设置为**False**。'
- en: '**$_**: When processing a pipeline object, **$_** can be used to access the
    current object (**$PSItem**). It can also be used in commands that execute an
    action on every item, as in the following example:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**$_**：在处理管道对象时，**$_**可以用来访问当前对象（**$PSItem**）。它也可以用于在每个项目上执行操作的命令，如以下示例所示：'
- en: '[PRE10]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**$Error**: Contains the most recent errors, collected in an array. The most
    recent error can be found in **$Error[0]**.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**$Error**：包含最近的错误，这些错误存储在一个数组中。最近的错误可以在**$Error[0]**中找到。'
- en: '**$false**: Represents the traditional Boolean value of **False**.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**$false**：表示传统的布尔值**False**。'
- en: '**$LastExitCode**: Contains the last exit code of the program that was run.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**$LastExitCode**：包含运行的程序的最后退出代码。'
- en: '**$null**: Contains **null** or an empty value. It can be used to check whether
    a variable contains a value or to set an undefined value when scripting, as **$null**
    is still treated like an object with a value.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**$null**：包含**null**或空值。它可以用来检查变量是否包含值，或者在脚本编写时设置一个未定义的值，因为**$null**仍然被当作一个具有值的对象来处理。'
- en: '**$PSScriptRoot**: The location of the directory from which the script is being
    run. It can help you to address relative paths.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**$PSScriptRoot**：当前脚本运行所在目录的位置。它可以帮助你处理相对路径。'
- en: '**$true**: Contains **True**. You can use **$true** to represent **True** in
    commands and scripts.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**$true**：包含**True**。你可以在命令和脚本中使用**$true**来表示**True**。'
- en: 'For a complete list of automatic variables, please review the official documentation:
    [https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_automatic_variables](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_automatic_variables).'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有关自动变量的完整列表，请查看官方文档：[https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_automatic_variables](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_automatic_variables)。
- en: Environment variables
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境变量
- en: Environment variables store information about the operating system and paths
    that are frequently used by the system.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 环境变量存储有关操作系统和系统经常使用的路径的信息。
- en: 'To show all environment variables within your session, you can leverage **dir
    env:**, as shown in the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示当前会话中的所有环境变量，可以使用**dir env:**，如下面的截图所示：
- en: '![Figure 2.1 – Environment variables](image/B16679_02_001.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.1 – 环境变量](image/B16679_02_001.jpg)'
- en: Figure 2.1 – Environment variables
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 – 环境变量
- en: 'You can directly access and reuse those variables by using the prefix **$env:**:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用前缀**$env:**直接访问和重用这些变量：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To learn more about how to access and process environment variables, have a
    look at the official documentation: [https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_environment_variables](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_environment_variables).'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于如何访问和处理环境变量的信息，请查看官方文档：[https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_environment_variables](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_environment_variables)。
- en: Reserved words and language keywords
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保留字和语言关键字
- en: Some words are reserved by the system and should not be used as variables or
    function names, as this would lead to confusion and unexpected behavior of your
    code.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有些词是系统保留的，不应作为变量或函数名称使用，因为这会导致代码出现混淆和意外行为。
- en: 'By using **Get-Help**, you can get a list and more information on reserved
    words:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用**Get-Help**，你可以获得保留字的列表和更多信息：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Also see the **about_Language_Keywords** help pages to get a detailed overview
    and explanation of all language keywords:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 另请查看**about_Language_Keywords**帮助页面，以获得所有语言关键字的详细概述和解释：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here’s an overview of all the language keywords that were available when this
    book was written:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是本书编写时所有可用的语言关键字概览：
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To learn more about a certain language keyword, you can use **Get-Help**:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于某个语言关键字的信息，你可以使用**Get-Help**：
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Some reserved words (such as **if**, **for**, **foreach**, and **while**) have
    their own help articles. To read them, add **about_** as a prefix:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一些保留字（如**if**、**for**、**foreach**和**while**）有自己的帮助文章。要阅读它们，请在前面加上**about_**作为前缀：
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If you don’t find a help page for a certain reserved word, as not every one
    has its own page, you can use **Get-Help** to find help pages that write about
    the word you are looking for:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有找到某个特定保留字的帮助页面（并非每个保留字都有自己的页面），你可以使用**Get-Help**查找包含你所寻找词语的帮助页面：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Keep those reserved words in mind and avoid using them as function, variable,
    or parameter names. Using reserved words can and will lead to a malfunction of
    your code.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住这些保留字，避免将它们用作函数、变量或参数名称。使用保留字会导致代码出现故障。
- en: Variable scope
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量作用域
- en: When working with PowerShell variables, you want to restrict access. If you
    use a variable in a function, you don’t want it to be available by default on
    the command line – especially if you are processing protected values. PowerShell
    variable scopes protect access to variables as needed.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 PowerShell 变量时，你需要限制访问。如果你在函数中使用一个变量，你不希望它在命令行上默认可用——尤其是当你处理受保护的值时。PowerShell
    变量作用域根据需要保护对变量的访问。
- en: 'In general, variables are only available in the context in which they were
    set, unless the scope is modified:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，变量仅在设置它们的上下文中可用，除非修改了作用域：
- en: '[PRE20]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Scope modifier
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作用域修饰符
- en: 'Using the scope modifier, you can configure the scope in which your variables
    will be available. Here is an overview of the most commonly used scope modifiers:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用作用域修饰符，你可以配置变量可用的作用域。以下是最常用的作用域修饰符概览：
- en: '**global**: Sets the scope to **global**. This scope is effective when PowerShell
    starts or if you create a new session.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**global**：将作用域设置为**全局**。此作用域在PowerShell启动时有效，或者在你创建一个新会话时有效。'
- en: For example, if you set a variable to **global** within a module, once the module
    is loaded and the part is run in which the variable is set to **global**, this
    variable will be available in the session – even if you don’t run other functions
    of this module.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你在模块内将一个变量设置为**全局**，一旦加载该模块并运行设置为**全局**的部分，该变量将在会话中可用——即使你没有运行该模块的其他函数。
- en: '**local**: This is the current scope. The **local** scope can be the **global**
    scope, the **script** scope, or any other scope.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**local**：这是当前作用域。**局部**作用域可以是**全局**作用域、**脚本**作用域或任何其他作用域。'
- en: '**script**: This scope is only effective within the script that sets this scope.
    It can be very useful if you want to set a variable only within a module that
    should not be available after the function was called.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**script**：此作用域仅在设置此作用域的脚本内有效。如果你希望仅在某个模块内设置一个变量，并且该变量在函数调用后不应再可用，这种作用域非常有用。'
- en: 'To demonstrate how variable scopes work, I have prepared a little script, **Get-VariableScope.ps1**,
    which can be found in **Chapter02** of this book’s GitHub repository: [https://github.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/blob/master/Chapter02/Get-VariableScope.ps1](https://github.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/blob/master/Chapter02/Get-VariableScope.ps1).'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示变量作用域的工作原理，我准备了一个小脚本，**Get-VariableScope.ps1**，你可以在本书的GitHub仓库**Chapter02**中找到：[https://github.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/blob/master/Chapter02/Get-VariableScope.ps1](https://github.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/blob/master/Chapter02/Get-VariableScope.ps1)。
- en: In the script, the **Set-Variables** function is declared first. If this function
    is called, it sets variables of three scopes – **local**, **script**, and **global**
    – and then outputs each variable.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本中，首先声明了**Set-Variables**函数。如果调用此函数，它会设置三个作用域的变量——**局部**、**脚本**和**全局**，然后输出每个变量。
- en: 'Then, the **Set-Variable** function is called by the same script. After calling
    the function, the variables are written to the output:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，相同的脚本调用**Set-Variable**函数。调用该函数后，变量会写入输出：
- en: '![Figure 2.2 – Calling variables with a local, script, and global scope](image/B16679_02_002.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.2 – 调用具有局部、脚本和全局作用域的变量](image/B16679_02_002.jpg)'
- en: Figure 2.2 – Calling variables with a local, script, and global scope
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – 调用具有局部、脚本和全局作用域的变量
- en: While the variables were just set in the **local** scope, all configured variables
    are available when called in this context (**local scope**).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这些变量刚刚在**局部**作用域中设置，但在此上下文中调用时，所有配置的变量都可用（**局部作用域**）。
- en: If the same script tries to access the defined variables outside of the function
    in which the variables were configured, it can still access the variables that
    were configured for the **script** and **global** scope. The variable with the
    **local** scope is inaccessible, as the variables were called in the **script
    scope**.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果相同的脚本尝试访问在定义变量的函数外部配置的变量，仍然可以访问配置为**脚本**和**全局**作用域的变量。具有**局部**作用域的变量是无法访问的，因为这些变量是在**脚本作用域**中调用的。
- en: 'After running the **Get-VariableScope.ps1** script, try to access the variables
    on the command line yourself (**global scope**):'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 运行**Get-VariableScope.ps1**脚本后，尝试在命令行中访问变量（**全局作用域**）：
- en: '![Figure 2.3 – Accessing the variables on the command line](image/B16679_02_003.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.3 – 在命令行中访问变量](image/B16679_02_003.jpg)'
- en: Figure 2.3 – Accessing the variables on the command line
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – 在命令行中访问变量
- en: You can imagine scopes as *containers for variables* therefore, in this case,
    we can only access variables within the **global** scope container. The variables
    with the **local** and **script** scopes are inaccessible from the command line
    when not called from the script they were defined in.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将作用域想象为*变量的容器*，因此，在这种情况下，我们只能访问**全局**作用域容器中的变量。具有**局部**和**脚本**作用域的变量在没有从其定义的脚本中调用时，无法从命令行访问。
- en: When working with scopes, it is advisable to *choose the scope that offers the
    minimum required privileges* for your use case. This can help prevent accidental
    script breakage when running scripts multiple times in the same session. While
    using the **global** scope is not necessarily problematic from a security standpoint,
    it is still best to avoid it when not strictly necessary.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用作用域时，建议*选择提供最小所需权限*的作用域，以便根据你的使用场景。这有助于防止在同一会话中多次运行脚本时意外破坏脚本。虽然从安全角度来看，使用**全局**作用域不一定会有问题，但最好在没有严格必要时避免使用它。
- en: Working with Modified Scope Variables
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 使用修改作用域的变量
- en: 'When you are working with **script** and **global** scope variables, it is
    a good practice to always use the variable with the modifier: **$script:script_variable**
    / **$****global:global_variable**.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用**脚本**（script）和**全局**（global）作用域变量时，最好始终使用带修饰符的变量：**$script:script_variable**
    / **$global:global_variable**。
- en: Although it is possible to use the variable without the modifier (**$script_variable**
    / **$global_variable**), using it with the modifier helps you to see at one glance
    whether the scope of a variable was changed, helps you with your troubleshooting,
    and avoids confusion.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管可以在没有修饰符的情况下使用变量（**$script_variable** / **$global_variable**），但使用修饰符可以帮助你一目了然地查看变量的作用域是否发生变化，帮助你进行故障排除，并避免混淆。
- en: Scopes are not only restricted to variables; they can also be used to restrict
    functions, aliases, and PowerShell drives. Of course, there are also many more
    use cases for scopes than the ones I described in this section.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 作用域不仅限于变量；它们还可以用于限制函数、别名和PowerShell驱动器。当然，作用域还有许多其他应用场景，超出了本节的描述。
- en: 'If you are interested to learn more about scopes (not only variable scopes)
    and advanced use cases, have a look at the official documentation: [https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_scopes](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_scopes).'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣了解更多关于作用域（不仅是变量作用域）和高级用法的内容，请查看官方文档：[https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_scopes](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_scopes)。
- en: Operators
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运算符
- en: Operators help you not only to perform mathematical or logical operations but
    they are also a good way to compare values or redirect values.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 运算符不仅帮助你执行数学或逻辑运算，而且它们也是比较值或重定向值的好方法。
- en: Arithmetic operators
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 算术运算符
- en: 'Arithmetic operators can be used to calculate values. They are as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 算术运算符可以用来计算数值。它们如下所示：
- en: '**Addition**  (**+**):'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加法**（**+**）：'
- en: '[PRE21]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '**Subtraction**  (**-**):'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减法**（**-**）：'
- en: '[PRE24]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '**Multiplication**  (*****):'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**乘法**（*****）：'
- en: '[PRE27]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '**Division**  (**/**):'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**除法**（**/**）：'
- en: '[PRE30]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '**Modulus** (**%**): In case you have never worked with modulus in the past,
    **%** is a great way to check whether there is a remainder if a number is divided
    by a divisor. Modulus provides you with the remainder:'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**取余**（**%**）：如果你以前没有使用过取余操作，**%**是检查一个数除以另一个数后是否有余数的好方法。取余操作返回余数：'
- en: '[PRE33]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Of course, you can also combine different arithmetic operators as you are used
    to:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你也可以像平常一样组合不同的算术运算符：
- en: '[PRE39]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: When combining different arithmetic operators in PowerShell, the operator precedence
    is respected, as you are used to from regular mathematic operations.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在PowerShell中组合不同的算术运算符时，运算符优先级与常规数学运算一致。
- en: Semicolons, (Curly) Braces, and Ampersands
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 分号（Semicolons）、（大括号）花括号（Curly Braces）和与号（Ampersands）
- en: 'In this example, we are using the semicolon to execute multiple commands on
    a single line: in PowerShell, a **semicolon** (**;**) is functionally equivalent
    to a carriage return.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用分号在一行内执行多个命令：在PowerShell中，**分号**（**;**）在功能上等同于回车符。
- en: It is also worth noting that the use of reserved characters such as **curly
    braces** **{}**, **parentheses** **()**, and **ampersands** **&** can have a significant
    impact on script execution. Specifically, **curly braces** denote a code block,
    while **parentheses** are used to group expressions or function parameters. The
    **ampersand** is used to invoke an executable or command as if it were a cmdlet.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要注意的是，保留字符如**花括号** **{}**、**圆括号** **()** 和 **与号** **&** 的使用可能对脚本执行产生重要影响。具体来说，**花括号**表示代码块，**圆括号**用于分组表达式或函数参数，而**与号**用于调用可执行文件或命令，就像调用一个cmdlet一样。
- en: To avoid issues with script execution, it is essential to be aware of these
    reserved characters and their specific use cases.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免脚本执行中的问题，了解这些保留字符及其特定用法至关重要。
- en: Comparison operators
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较运算符
- en: 'Often, it is necessary to compare values. In this section, you will find an
    overview of comparison operators in PowerShell:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 通常需要进行值的比较。在本节中，您将看到 PowerShell 中比较运算符的概述：
- en: 'Equal (**-eq**): Returns **True** if both values are equal:'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等于（**-eq**）：如果两个值相等，返回 **True**：
- en: '[PRE40]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'In an **array context**, operators behave differently: when an array is used
    as the left-hand operand in a comparison, PowerShell performs the comparison operation
    against each element in the array.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **数组上下文** 中，运算符的行为不同：当数组作为比较的左操作数时，PowerShell 会对数组中的每个元素执行比较操作。
- en: 'When using comparison operators in an array context, the operation will return
    the elements selected by the operator:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在数组上下文中使用比较运算符时，操作将返回由运算符选择的元素：
- en: '[PRE44]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'When used in an array context, the **-eq** operator behaves differently from
    its typical comparison behavior. Instead of checking whether the two operands
    are equal, it returns all elements in the left-hand operand array that are equal
    to the right-hand operand. If no matches are found, the operation will still return
    **False**:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当在数组上下文中使用时，**-eq** 运算符的行为与其典型的比较行为不同。它不会检查两个操作数是否相等，而是返回左操作数数组中所有等于右操作数的元素。如果没有找到匹配项，操作仍会返回
    **False**：
- en: '[PRE45]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Not equal (**-ne**): Returns **True** if both values are not equal:'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不等于（**-ne**）：如果两个值不相等，返回 **True**：
- en: '[PRE46]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Less equal (**-le**): Returns **True** if the first value is less than or equal
    to the second value:'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小于等于（**-le**）：如果第一个值小于或等于第二个值，返回 **True**：
- en: '[PRE55]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Greater equal (**-ge**): Returns **True** if the first value is greater than
    or equal to the second value:'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大于等于（**-ge**）：如果第一个值大于或等于第二个值，返回 **True**：
- en: '[PRE63]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Less than (**-lt**): Returns **True** if the first value is less than the second
    value:'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小于（**-lt**）：如果第一个值小于第二个值，返回 **True**：
- en: '[PRE73]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Greater than (**-gt**): Returns **True** if the first value is greater than
    the second value:'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大于（**-gt**）：如果第一个值大于第二个值，返回 **True**：
- en: '[PRE80]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '**-like**: Can be used to check whether a value matches a wildcard expression
    when used with a scalar. If used in an array context, the **-like** operator returns
    only the elements that match the specified wildcard expression:'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-like**：可用于检查值是否与标量情况下的通配符表达式匹配。如果在数组上下文中使用，**-like** 运算符仅返回与指定通配符表达式匹配的元素：'
- en: '[PRE89]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: It is important to note that the array version of the operator does not return
    a Boolean value indicating whether any elements in the array match the expression,
    as the scalar version does.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，运算符的数组版本不会返回一个布尔值，表示数组中的任何元素是否与表达式匹配，这与标量版本的行为不同。
- en: '**-notlike**: Can be used to check whether a value does not match a wildcard
    expression when used with a scalar. If used in an array context, the **-notlike**
    operator returns only the elements that do not match the specified wildcard expression:'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-notlike**：可用于检查值是否与标量情况下的通配符表达式不匹配。如果在数组上下文中使用，**-notlike** 运算符仅返回不匹配指定通配符表达式的元素：'
- en: '[PRE93]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '**-match**: Can be used to check whether a value matches a regular expression:'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-match**：可用于检查值是否与正则表达式匹配：'
- en: '[PRE99]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '**-notmatch**: Can be used to check whether a value does not match a regular
    expression:'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-notmatch**：可用于检查值是否与正则表达式不匹配：'
- en: '[PRE103]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Also refer to the official PowerShell documentation to read more about comparison
    operators: [https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_comparison_operators](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_comparison_operators).'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参考官方 PowerShell 文档，了解更多比较运算符的内容：[https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_comparison_operators](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_comparison_operators)。
- en: Assignment operators
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 赋值运算符
- en: 'When working with variables, it is vital to understand assignment operators:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理变量时，了解赋值运算符非常重要：
- en: '**=**: Assigns a value:'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**=**：赋值一个值：'
- en: '[PRE107]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '**+=**: Increases the value by the amount defined after the operator and stores
    the result in the initial variable:'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**+=**：通过运算符后定义的数值增加原始变量的值，并将结果存储在该变量中：'
- en: '[PRE109]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '**-=**: Decreases the value by the amount defined after the operator and stores
    the result in the initial variable:'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-=**：通过运算符后定义的数值减少原始变量的值，并将结果存储在该变量中：'
- en: '[PRE111]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '***=**: Multiplies the value by the amount defined after the operator and stores
    the result in the initial variable:'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***=**：将值乘以运算符后定义的数值，并将结果存储在初始变量中：'
- en: '[PRE115]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '**/=**: Divides the value by the amount defined after the operator and stores
    the result in the initial variable:'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**/=**：将值除以运算符后定义的数值，并将结果存储在初始变量中：'
- en: '[PRE119]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '**%=**: Performs a modulo operation on the variable using the amount after
    the operator and stores the result in the initial variable:'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**%=**：对变量进行模运算，使用运算符后面的数值，并将结果存储在初始变量中：'
- en: '[PRE123]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '**++**: Increases the variable by **1**:'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**++**：将变量加上**1**：'
- en: '[PRE127]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '**--**: Decreases the variable by **1**:'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**--**：将变量减去**1**：'
- en: '[PRE129]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'Please refer to the official documentation to see more examples of how to use
    assignment operators: [https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_assignment_operators](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_assignment_operators).'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考官方文档查看更多关于如何使用赋值运算符的示例：[https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_assignment_operators](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_assignment_operators)。
- en: Logical operators
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逻辑运算符
- en: 'If you work with multiple statements, you will need logical operators to add,
    compare, or exclude. In this section, you will find an overview of common logical
    operators in PowerShell:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你处理多个语句，你将需要逻辑运算符来添加、比较或排除。在本节中，你将看到PowerShell中常见逻辑运算符的概览：
- en: '**-and**: Can be used to combine conditions. The defined action is triggered
    only if both conditions are met:'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-and**：可用于组合条件。只有当两个条件都满足时，定义的动作才会被触发：'
- en: '[PRE131]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '**-or**: If one of the defined conditions is met, the action is triggered:'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-or**：如果满足其中一个定义的条件，触发相应的动作：'
- en: '[PRE134]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '**-not** or **!**: Can be used to negate a condition. The following example
    tests whether the folder specified using the **$path** variable is available.
    If it is missing, it will be created:'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-not** 或 **!**：可以用来否定一个条件。以下示例测试通过**$path**变量指定的文件夹是否可用。如果文件夹不存在，将会创建它：'
- en: '[PRE137]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '**-xor**: Logical exclusive **-or**. Is **True** if *only one* statement is
    **True** (but returns **False** if both are **True**):'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-xor**：逻辑排他性**-or**。如果*只有一个*语句为**True**，则为**True**（但如果两个都为**True**，则返回**False**）：'
- en: '[PRE144]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: Now that you have learned how to work with operators in PowerShell, let’s have
    a look at control structures in our next section.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经学会了如何在PowerShell中使用运算符，让我们在下一节中了解一下控制结构。
- en: 'Please also refer to the **about_operators** documentation to learn more about
    PowerShell operators in general: [https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_operators](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_operators).'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考**about_operators**文档，了解更多关于PowerShell运算符的知识：[https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_operators](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_operators)。
- en: Control structures
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制结构
- en: A control structure is some kind of programmatic logic that assesses conditions
    and variables and decides which defined action will be taken if a certain condition
    is met.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 控制结构是一种程序逻辑，用于评估条件和变量，并决定在特定条件满足时执行哪些定义的动作。
- en: Use the operators that we learned about in the last section to define the conditions,
    which will be assessed using the control structures introduced in this section.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们在上一节中学到的运算符来定义条件，这些条件将通过本节介绍的控制结构进行评估。
- en: Conditions
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 条件
- en: 'If you want to select which action is performed if a certain condition is met,
    you can use one of the following selection control structures: either an **if/elseif/else**
    construct or the **switch** statement.'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想根据某个条件选择执行的动作，可以使用以下选择控制结构之一：**if/elseif/else**结构或**switch**语句。
- en: If/elseif/else
  id: totrans-306
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: If/elseif/else
- en: '**if**, **elseif**, and **else** can be used to check whether a certain condition
    is **True** and run an action if the condition is fulfilled:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '**if**、**elseif**和**else**可以用来检查某个条件是否为**True**，并在条件满足时执行相应的动作：'
- en: '[PRE150]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'You can use the **if** statement to check whether a condition is **True**:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用**if**语句检查条件是否为**True**：
- en: '[PRE151]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'You can also check whether one of several conditions is **True** by using **elseif**.
    The action of the first condition that is met will be executed:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过使用**elseif**检查多个条件是否为**True**，第一个满足条件的动作将会被执行：
- en: '[PRE152]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: In this example, the control structure checks whether one of the specified conditions
    is met (either **$color -eq "blue"** or **$color -eq "green"**). If **$color**
    would be **red**, no action would be performed.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，控制结构检查是否满足指定的条件之一（即**$color -eq "blue"**或**$color -eq "green"**）。如果**$color**是**red**，则不会执行任何动作。
- en: But since **$color** is **green**, the **elseif** condition is **True** and
    the **The color is green!** string will be written to the console.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 但由于**$color**的值是**green**，所以**elseif**条件为**True**，并且**The color is green!**字符串将被输出到控制台。
- en: 'If you want to specify an action that will be triggered if none of the specified
    conditions are met, you can use **else**. If no condition from **if** or **elseif**
    is met, the action specified in the **else** block will be executed:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想指定在没有满足任何指定条件时触发的动作，可以使用**else**。如果没有满足**if**或**elseif**的条件，将执行**else**块中指定的动作：
- en: '[PRE153]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: In this example, we check whether **$color** is either **blue** or **green**.
    But since **$color** is **"red"**, none of the defined conditions are **True**,
    and therefore the code defined in the **else** block will be executed, which writes
    **That is also a very beautiful color!** to the output.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们检查**$color**是否是**blue**或**green**。但是由于**$color**是**"red"**，没有任何已定义的条件为**True**，因此**else**块中的代码将被执行，并输出**That
    is also a very beautiful color!**。
- en: Switch
  id: totrans-318
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Switch
- en: Sometimes, it can happen that you want to check one variable against a long
    list of values.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，你可能需要检查一个变量是否与一个很长的值列表匹配。
- en: To solve this problem, you could – of course – create a long and complicated
    list of **if**, **elseif**, …, **elseif**, and **else** statements.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，你当然可以创建一个很长且复杂的**if**、**elseif**、…、**elseif**和**else**语句列表。
- en: 'But instead, you can use the more elegant **switch** statement to test a value
    against a list of predefined values and react accordingly:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，相反，你可以使用更优雅的**switch**语句，将一个值与预定义的多个值进行比对，并根据结果作出相应反应：
- en: '[PRE154]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'Here is an example:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例：
- en: '[PRE155]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'In this example, the user is prompted to enter a value: **What is your** **favorite
    color?**.'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，系统会提示用户输入一个值：**What is your** **favorite color?**。
- en: 'Depending on what the user enters, a different output will be shown: if **purple**
    is entered, a line from a famous Prince song, *Purple Rain*, will be displayed.
    If **red** is entered, a line of the Police song *Roxanne* is cited.'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 根据用户输入的内容，会显示不同的输出：如果输入**purple**，将显示一行来自著名歌手Prince的歌曲*Purple Rain*。如果输入**red**，将引用The
    Police的歌曲*Roxanne*中的一行歌词。
- en: But if **green** is entered, the **default** output will be shown, as there’s
    no option for the **green** value defined and the message **The color is not in
    this list** will be displayed.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果输入的是**green**，将显示**default**输出，因为没有为**green**定义选项，系统会显示消息**The color is
    not in this list**。
- en: In addition to using the **switch** statement to evaluate simple conditions
    based on the value of a variable or expression, PowerShell also supports **more
    advanced modes**. These modes allow you to use regular expressions, process the
    contents of files, and more.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用**switch**语句来基于变量或表达式的值评估简单的条件外，PowerShell还支持**更高级的模式**。这些模式允许你使用正则表达式、处理文件内容等。
- en: 'For example, you can use the **-Regex** parameter to use a regular expression
    to match against the input, like this:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以使用**-Regex**参数，通过正则表达式来匹配输入值，像这样：
- en: '[PRE156]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: If **$userInput** was defined as **"Hello World!"**, then **"User input starts
    with a letter."** would be written to the output. If **$userInput** started with
    a number (for example, **"1337"**), the output would be **"User input starts with
    a number."**. And if **$userInput** started with a different character, (for example,
    **"!"**), then the **default** condition would be met and **"User input doesn't
    start with a letter or number."** would be written to the output.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 如果**$userInput**定义为**"Hello World!"**，那么输出将是**"User input starts with a letter."**。如果**$userInput**以数字开头（例如，**"1337"**），输出将是**"User
    input starts with a number."**。如果**$userInput**以其他字符开头（例如，**"!"**），那么将满足**default**条件，并输出**"User
    input doesn't start with a letter or number."**。
- en: 'You can also use the **-File** parameter to process the contents of a file
    with the **switch** statement. The **-Wildcard** parameter enables you to use
    the wildcard logic with **switch**:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用**-File**参数，通过**switch**语句处理文件内容。**-Wildcard**参数允许你在**switch**语句中使用通配符逻辑：
- en: '[PRE157]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: 'In this example, we’re using the **switch** statement to process the contents
    of a file named **"example.txt"**. We’re looking for the **"*Error*"** pattern
    within the file, and then taking an action based on whether that pattern was found.
    If the specified file contains the pattern, **"Error was found!:"** will be written
    to the output, followed by the line that contained the error. It’s important to
    note that the wildcard pattern is processed line by line and not for the entire
    file, so there will be an **"Error was found!: "** line written to the output
    for every line in the file that contained the **"*****Error*"** pattern.'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用 **switch** 语句处理名为 **"example.txt"** 的文件内容。我们正在寻找文件中的 **"*Error*"**
    模式，并根据是否找到该模式来执行操作。如果指定的文件包含该模式，则 **"Error was found!:"** 将被写入输出，然后是包含错误的行。需要注意的是，通配符模式是逐行处理的，而不是针对整个文件，因此对于文件中每一行包含
    **"*****Error*"** 模式的行，都会写入一行 **"Error was found!:"**。
- en: Loops and iterations
  id: totrans-335
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环与迭代
- en: If you want to run an action over and over again until a certain condition is
    met, you can do that using loops. A loop will continue to execute as long as the
    specified condition is **True** unless it is terminated with a loop-breaking statement
    such as **break**. Depending on the loop construct used, the loop may execute
    at least once, or may not execute at all if the condition is initially **False**.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想反复执行一个操作直到满足某个条件，你可以使用循环。只要指定的条件为 **True**，循环将继续执行，除非它被如 **break** 之类的跳出语句终止。根据使用的循环结构，循环可能至少执行一次，或者如果条件最初为
    **False**，则可能根本不执行。
- en: In this section, you will find an overview of how to work with loops.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将找到有关如何使用循环的概述。
- en: ForEach-Object
  id: totrans-338
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ForEach-Object
- en: '**ForEach-Object** accepts a list or an array of items and allows you to perform
    an action against each of them. **ForEach-Object** is best used when you use the
    pipeline to pipe objects to **ForEach-Object**.'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '**ForEach-Object** 接受一个列表或数组的项，并允许你对每一项执行操作。**ForEach-Object** 最适合在你使用管道将对象传递给
    **ForEach-Object** 时使用。'
- en: 'As an example, if you want to process all files that are in a folder, you can
    use **Foreach-Object**. **$_** contains the value of every single item of each
    iteration:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，如果你想处理一个文件夹中的所有文件，你可以使用 **Foreach-Object**。**$_** 包含每次迭代中每一项的值：
- en: '[PRE158]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: 'If you want to perform specific actions before processing each item in the
    pipeline or after processing all the items, you can use the **-Begin** and **-End**
    advanced parameters with the **ForEach-Object** cmdlet: [https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/foreach-object](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/foreach-object).'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在处理管道中的每个项之前或所有项处理之后执行特定操作，可以使用 **-Begin** 和 **-End** 高级参数与 **ForEach-Object**
    cmdlet 一起使用：[https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/foreach-object](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/foreach-object)。
- en: Additionally, you can use the **-Process** parameter to specify the script block
    that is run for each item in the pipeline.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可以使用 **-Process** 参数指定针对管道中每个项运行的脚本块。
- en: Foreach
  id: totrans-344
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Foreach
- en: To iterate through a collection of items in PowerShell, you can use the **Foreach-Object**
    *cmdlet*, the **foreach** *statement*, or the **foreach** *method*. The **Foreach-Object**
    *cmdlet* accepts pipeline objects, making it a useful tool for working with object-oriented
    data. The **foreach** *method* and the **foreach** *statement* are very similar
    to **Foreach-Object** but they do not accept pipeline objects. You will get error
    messages if you try to use it in the same way as **Foreach-Object**.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 PowerShell 中遍历一个项的集合，你可以使用 **Foreach-Object** *cmdlet*、**foreach** *语句* 或
    **foreach** *方法*。**Foreach-Object** *cmdlet* 接受管道对象，使其成为处理面向对象数据的有用工具。**foreach**
    *方法* 和 **foreach** *语句* 与 **Foreach-Object** 非常相似，但它们不接受管道对象。如果你像使用 **Foreach-Object**
    一样使用它们，你会收到错误消息。
- en: The **foreach** *statement* loads all items into a collection before they are
    processed, making it quicker but consuming more memory than **ForEach-Object**.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '**foreach** *语句* 会在处理之前将所有项加载到一个集合中，这使得它比 **ForEach-Object** 更快，但会消耗更多的内存。'
- en: 'The following example shows how to use the **foreach**  *statement*:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了如何使用 **foreach** *语句*：
- en: '[PRE159]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: In this example, the **$path** path is examined similarly as in our example
    before. But in this case, it uses a **foreach** *statement* to iterate through
    each item in the **$items** array, assigning the current item to the **$file**
    variable on each iteration. The **$file** variable is defined by the author of
    the script – every other variable name can be added here and, of course, processed.
    For each item, it outputs the value of **$file** to the console using the **Write-Host**
    cmdlet.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，**$path**路径的检查与我们之前的示例相似。但在这种情况下，它使用**foreach** *语句*遍历**$items**数组中的每个项，在每次迭代时将当前项分配给**$file**变量。**$file**变量由脚本作者定义——当然，也可以在此处添加并处理任何其他变量名。对于每个项，它使用**Write-Host**
    cmdlet将**$file**的值输出到控制台。
- en: 'You can use the **.foreach({})** *method* to iterate through a collection of
    items. Here’s an example of how to use it:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用**.foreach({})** *方法*遍历一个项目集合。以下是如何使用它的示例：
- en: '[PRE160]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: 'In this example, **$path** is examined; for each file in that folder, the filename
    will be written to the command line. The **.foreach**(**{}**) *method* is used
    to iterate through each item in the **$items** collection and write a message
    to the console that includes the item’s name. The **$_** variable is used to reference
    the current item being iterated over. So, for each item in the **$items** collection,
    the script will output a message such as **"Current** **item: filename"**.'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，检查**$path**；对于该文件夹中的每个文件，文件名将写入命令行。使用**.foreach**(**{}**) *方法*遍历**$items**集合中的每个项，并向控制台写入包含项名的消息。**$_**变量用于引用当前正在遍历的项。因此，对于**$items**集合中的每个项，脚本将输出类似于**"当前项：文件名"**的消息。
- en: while
  id: totrans-353
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: while
- en: '**while** does something (**<actions>**) as long as the defined *condition*
    is fulfilled:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '**while**会执行某些操作（**<actions>**），只要定义的*条件*满足：'
- en: '[PRE161]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: 'In this example, user input is read, and as long as the user doesn’t type in
    **quit**, the **while** loop still runs:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，读取用户输入，只要用户未输入**quit**，**while**循环仍会继续执行：
- en: '[PRE162]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: In this example, if the user types in either **hello**, **color**, or **help**,
    different output options will be shown, but the program still continues, as the
    condition for the **while** statement is not fulfilled.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，如果用户输入**hello**、**color**或**help**，将显示不同的输出选项，但程序仍会继续，因为**while**语句的条件未满足。
- en: Once the user types in **quit**, the program will be terminated, as the condition
    is fulfilled.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户输入**quit**，程序将终止，因为条件已满足。
- en: for
  id: totrans-360
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: for
- en: 'This defines the initializing statement, a condition, and loops through until
    the defined condition is not fulfilled anymore:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 这定义了初始化语句、一个条件，并在定义的条件不再满足时循环：
- en: '[PRE163]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: 'If you need iterating values, **for** is a great solution:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要迭代值，**for**是一个很好的解决方案：
- en: '[PRE164]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: In this example, **$i=1** is the starting condition, and in every iteration,
    **$i** is increased by **1**, using the **$i++** statement. As long as **$i**
    is smaller than or equal to **5** – that is, **($i -le 5)** – the loop continues
    and writes **$i** to the output.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，**$i=1**是起始条件，每次迭代时，**$i**增加**1**，使用**$i++**语句。只要**$i**小于或等于**5**——即**($i
    -le 5)**——循环就会继续，并将**$i**写入输出。
- en: do-until/do-while
  id: totrans-366
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: do-until/do-while
- en: 'Compared to other loops, **do-until** or **do-while** already starts running
    the defined commands and then checks whether the condition is still met or not
    met:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他循环相比，**do-until**或**do-while**会先运行定义的命令，然后检查条件是否仍然满足或不满足：
- en: '[PRE165]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: Although **do-until** and **do-while** have the same syntax, they differ in
    how the condition is treated.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管**do-until**和**do-while**具有相同的语法，它们在处理条件的方式上有所不同。
- en: '**do-while** runs as long as the condition is **True** and stops as soon as
    the condition is not met anymore. **do-until** runs only as long as the condition
    is *not* met: it ends when the condition is met.'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '**do-while**只要条件为**True**，就会继续运行，直到条件不再满足为止。**do-until**仅在条件*不*满足时运行：当条件满足时，它会结束。'
- en: break
  id: totrans-371
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: break
- en: '**break** can be used to exit the loop (for example, **for**/**foreach**/**foreach-object**/…):'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '**break**可用于退出循环（例如，**for**/**foreach**/**foreach-object**/…）：'
- en: '[PRE166]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: 'Consult the official documentation to learn more about the advanced usage of
    **break**: [https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_break](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_break).'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 查阅官方文档以了解更多关于**break**的高级用法：[https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_break](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_break)。
- en: continue
  id: totrans-375
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: continue
- en: 'The **continue** statement is used to skip the current iteration of a loop
    and move to the next one. It does not affect the loop’s condition, which will
    be re-evaluated at the beginning of the next iteration:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '**continue** 语句用于跳过当前循环的迭代并进入下一个迭代。它不会影响循环的条件，循环条件将在下一次迭代开始时重新评估：'
- en: '[PRE167]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: In this example, we use the modulus (**%**) operator to calculate whether a
    division by **2** returns a remainder. If the remainder of **$i % 2** is non-zero,
    then the condition returns **True**, and **continue** is triggered.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了取模（**%**）运算符来计算除以 **2** 是否有余数。如果 **$i % 2** 的余数非零，则条件返回 **True**，并触发
    **continue**。
- en: This behavior causes **$i** to be only written to the console if no remainder
    is returned.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 这种行为导致 **$i** 只有在没有返回余数时才会被写入控制台。
- en: Did You Know?
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道吗？
- en: 'The preceding example demonstrates that *every time* the remainder returned
    is *not 0*, the *current iteration is skipped*. This code could also be simplified
    by writing the following:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的例子演示了每当返回的余数 *不是 0* 时，*当前迭代会被跳过*。这段代码也可以通过以下方式简化：
- en: '**for ($i=1; $i -le 10; $****i++) {**'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '**for ($i=1; $i -le 10; $****i++) {**'
- en: '**if ($i % 2){** **continue }**'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '**if ($i % 2){** **continue }**'
- en: '**Write-Host “****i: $i”**'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '**Write-Host “****i: $i”**'
- en: '**}**'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '**}**'
- en: You can use control structures not only to solve a single instance but also
    to solve problems by combining multiple control structures to build complex logic.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 你不仅可以使用控制结构来解决单一问题，还可以通过结合多个控制结构来解决复杂逻辑问题。
- en: After reading this section, you should have a basic knowledge of what control
    structures exist and how to use them.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完这一部分后，你应该对现有的控制结构有基本的了解，并知道如何使用它们。
- en: Naming conventions
  id: totrans-388
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名规范
- en: Cmdlets and functions both follow the schema *verb-noun*, such as **Get-Help**
    or **Stop-Process**. So, if you write your own functions or cmdlets, make sure
    to follow the name guidelines and recommendations.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: Cmdlet 和函数都遵循 *动词-名词* 的命名规则，例如 **Get-Help** 或 **Stop-Process**。因此，如果你编写自己的函数或
    cmdlet，请确保遵循命名指南和建议。
- en: 'Microsoft has released a list of approved verbs. Although it is not technically
    enforced to use approved verbs, it is strongly recommended to do so in order to
    comply with PowerShell best practices and avoid conflicts with automatic variables
    and reserved words. Additionally, using approved verbs is required when publishing
    PowerShell modules to the PowerShell Gallery, as it will trigger a warning message
    if non-approved verbs are used. Here is the link for the approved verbs:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 微软发布了一份批准的动词列表。尽管使用批准的动词在技术上并不是强制要求，但强烈建议这样做，以便遵循 PowerShell 的最佳实践，并避免与自动变量和保留字发生冲突。此外，在将
    PowerShell 模块发布到 PowerShell Gallery 时，必须使用批准的动词，否则如果使用了未批准的动词，将会触发警告消息。以下是批准动词的链接：
- en: '[https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/approved-verbs-for-windows-powershell-commands](https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/approved-verbs-for-windows-powershell-commands)'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/approved-verbs-for-windows-powershell-commands](https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/approved-verbs-for-windows-powershell-commands)'
- en: Finding the approved verbs
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 查找批准的动词
- en: If you are in the process of writing your code and quickly want to check which
    approved verbs exist, you can leverage the **Get-Verb** command.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在编写代码，并且希望快速检查有哪些批准的动词，可以利用 **Get-Verb** 命令。
- en: 'If you want to sort the list of available verbs, you can pipe the output to
    **Sort-Object**. By default, the verbs are sorted into traditional categories
    of use, such as **Common**, **Data**, and **Lifecycle**. However, you can also
    sort them alphabetically by name by specifying the **Name** property with the
    **Sort-Object** command. Use the following command to sort the output of **Get-Verb**
    by the name **Verb**:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想对可用动词列表进行排序，可以将输出传递给 **Sort-Object**。默认情况下，动词按传统的使用类别进行排序，如 **Common**、**Data**
    和 **Lifecycle**。然而，你也可以通过指定 **Name** 属性并使用 **Sort-Object** 命令按字母顺序对它们进行排序。使用以下命令按
    **Verb** 的名称对 **Get-Verb** 的输出进行排序：
- en: '[PRE168]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: 'You can also use wildcards to prefilter the list:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用通配符来预先筛选列表：
- en: '[PRE169]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: 'If you just want to get all approved verbs from a certain group (in this case,
    **Security**), you can filter **Group** using **Where-Object**:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想从某一组（在此案例中是 **Security**）中获取所有批准的动词，可以使用 **Where-Object** 来过滤 **Group**：
- en: '[PRE170]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: Although naming conventions are not enforced in PowerShell, they should be respected
    nevertheless. Microsoft also strongly encourages following those guidelines when
    writing your cmdlets to ensure that users have a consistent user experience.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管PowerShell不强制执行命名约定，但仍应遵守这些约定。微软也强烈鼓励在编写命令时遵循这些指南，以确保用户获得一致的用户体验。
- en: 'Please also have a look at the development guidelines when writing your own
    functions and cmdlets: https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/strongly-encouraged-development-guidelines.'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写自己的函数和命令时，请同时参考开发指南：[开发指南](https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/strongly-encouraged-development-guidelines)。
- en: PowerShell profiles
  id: totrans-402
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PowerShell配置文件
- en: PowerShell profiles are configuration files that allow you to personalize your
    PowerShell environment. These profiles can be used to customize the behavior and
    environment of PowerShell sessions. They are scripts that are executed when a
    PowerShell session is started, allowing users to set variables, define functions,
    create aliases, and more.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell配置文件是配置文件，用于个性化您的PowerShell环境。这些配置文件可用于自定义PowerShell会话的行为和环境。它们是会在PowerShell会话启动时执行的脚本，允许用户设置变量、定义函数、创建别名等。
- en: Any variables, functions, or aliases defined in the appropriate PowerShell profile
    will be loaded every time a PowerShell session is started. This means you can
    have a consistent and personalized PowerShell environment across all your sessions.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 在适当的PowerShell配置文件中定义的任何变量、函数或别名将在每次启动PowerShell会话时加载。这意味着您可以在所有会话中保持一致且个性化的PowerShell环境。
- en: 'There are several different types of profiles and more than one can be processed
    by PowerShell. PowerShell profiles are stored as plain text files on your system,
    and there are several types of profiles available:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件有几种不同的类型，PowerShell可以处理多个配置文件。PowerShell配置文件作为纯文本文件保存在您的系统中，并且有多种类型的配置文件可用：
- en: '**All Users, All Hosts** (**$profile.AllUsersAllHosts**): This profile applies
    to all users for all PowerShell hosts.'
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**所有用户，所有主机** (**$profile.AllUsersAllHosts**)：该配置文件适用于所有用户的所有PowerShell主机。'
- en: '**All Users, Current Host** (**$profile.AllUsersCurrentHost**): This profile
    applies to all users for the current PowerShell host.'
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**所有用户，当前主机** (**$profile.AllUsersCurrentHost**)：该配置文件适用于当前PowerShell主机的所有用户。'
- en: '**Current User, All Hosts** (**$profile.CurrentUserAllHosts**): This profile
    applies to the current user for all PowerShell hosts.'
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**当前用户，所有主机** (**$profile.CurrentUserAllHosts**)：该配置文件适用于当前用户的所有PowerShell主机。'
- en: '**Current User, Current Host** (**$profile.CurrentUserCurrentHost**): This
    profile applies only to the current user and the current PowerShell host.'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**当前用户，当前主机** (**$profile.CurrentUserCurrentHost**)：该配置文件仅适用于当前用户和当前PowerShell主机。'
- en: A **PowerShell host** is an application that hosts the PowerShell engine. Examples
    of PowerShell hosts include the Windows PowerShell console, the PowerShell **Integrated
    Scripting Environment** (**ISE**), and the PowerShell terminal in Visual Studio
    Code.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '**PowerShell主机**是托管PowerShell引擎的应用程序。PowerShell主机的示例包括Windows PowerShell控制台、PowerShell
    **集成脚本环境** (**ISE**)以及Visual Studio Code中的PowerShell终端。'
- en: 'The location of your PowerShell profile(s) depends on your system and configuration,
    but you can easily find out where they are stored by running the following command
    in PowerShell:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 您的PowerShell配置文件的位置取决于您的系统和配置，但您可以通过在PowerShell中运行以下命令轻松找到它们存储的位置：
- en: '![Figure 2.4 – Finding out the location of the local PowerShell profile(s)](image/B16679_02_004.jpg)'
  id: totrans-412
  prefs: []
  type: TYPE_IMG
  zh: '![图2.4 – 查找本地PowerShell配置文件的位置](image/B16679_02_004.jpg)'
- en: Figure 2.4 – Finding out the location of the local PowerShell profile(s)
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4 – 查找本地PowerShell配置文件的位置
- en: 'It is important to note that there are also more profile paths available, including
    those used by the system and not just by individual users (which would be included
    in the **AllUsers** profile):'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，还有更多的配置文件路径可用，包括系统使用的路径，而不仅仅是个别用户使用的路径（这些路径会包含在**AllUsers**配置文件中）：
- en: 'Applies to local shells and all users: **%windir%\system32\WindowsPowerShell\v1.0\profile.ps1**'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适用于本地Shell和所有用户：**%windir%\system32\WindowsPowerShell\v1.0\profile.ps1**
- en: 'Applies to all shells and all users: **%windir%\system32\WindowsPowerShell\v1.0\Microsoft.PowerShell_profile.ps1**'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适用于所有Shell和所有用户：**%windir%\system32\WindowsPowerShell\v1.0\Microsoft.PowerShell_profile.ps1**
- en: 'Applies to all local ISE shells and all users: **%windir%\system32\WindowsPowerShell\v1.0\Microsoft.PowerShellISE_profile.ps1**'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适用于所有本地ISE Shell和所有用户：**%windir%\system32\WindowsPowerShell\v1.0\Microsoft.PowerShellISE_profile.ps1**
- en: This profile is loaded when using the PowerShell ISE and can be viewed by running
    the **$profile | fl * -force** command within the ISE
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 PowerShell ISE 时，此配置文件会被加载，并且可以通过在 ISE 中运行 **$profile | fl * -force** 命令来查看
- en: 'Applies to current user ISE shells on the local host: **%UserProfile%\Documents\WindowsPowerShell\Microsoft.PowerShellISE_profile.ps1**'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适用于本地主机上的当前用户 ISE shell：**%UserProfile%\Documents\WindowsPowerShell\Microsoft.PowerShellISE_profile.ps1**
- en: For example, in Windows PowerShell, there are profiles for **AllUsers** and
    **AllHosts**, which apply to all users and all PowerShell hosts on a system. In
    PowerShell Core, there are profiles for **AllUsers** and **AllHosts** as well,
    but they do not load the Windows PowerShell profiles from the **system32** directory
    by default. It’s also worth noting that while PowerShell Core supports loading
    Windows PowerShell profiles, the reverse is not true.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在 Windows PowerShell 中，有适用于 **AllUsers** 和 **AllHosts** 的配置文件，这些配置文件适用于系统中的所有用户和所有
    PowerShell 主机。在 PowerShell Core 中，也有 **AllUsers** 和 **AllHosts** 的配置文件，但它们默认不会加载
    **system32** 目录中的 Windows PowerShell 配置文件。还需要注意的是，虽然 PowerShell Core 支持加载 Windows
    PowerShell 配置文件，但反之则不行。
- en: 'To access the file path of one particular profile, such as the one for **CurrentUserCurrentHost**,
    you can use the variable that is defined in **$profile.CurrentUserCurrentHost**:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问特定配置文件的文件路径，例如 **CurrentUserCurrentHost** 的配置文件，可以使用在 **$profile.CurrentUserCurrentHost**
    中定义的变量：
- en: '[PRE171]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: 'Use the following code snippet to check whether the file already exists; if
    it does not yet, the file is created:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码片段检查文件是否已经存在；如果文件尚未存在，则会创建该文件：
- en: '[PRE172]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: 'Finally, add the commands, functions, or aliases to the user profile:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将命令、函数或别名添加到用户配置文件中：
- en: '[PRE173]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: In addition to customizing your PowerShell environment, profiles are also a
    crucial aspect of PowerShell security. By modifying your profiles, you can set
    policies and restrictions to enforce security best practices, such as preventing
    the execution of unsigned scripts or setting execution policies. But also, adversaries
    can use PowerShell profiles to their advantage – for example, to establish persistence.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 除了自定义 PowerShell 环境之外，配置文件还是 PowerShell 安全性的关键方面。通过修改配置文件，您可以设置策略和限制，执行安全最佳实践，例如阻止执行未签名的脚本或设置执行策略。但同时，攻击者也可以利用
    PowerShell 配置文件来达成他们的目的——例如，建立持久性。
- en: Understanding PSDrives in PowerShell
  id: totrans-428
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 PowerShell 中的 PSDrives
- en: PowerShell includes a feature called **PowerShell drives** (**PSDrives**). PSDrives
    in PowerShell are similar to filesystem drives in Windows, but instead of accessing
    files and folders, you use PSDrives to access a variety of data stores. These
    data stores can include directories, registry keys, and other data sources, which
    can be accessed through a consistent and familiar interface.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 包含一个名为 **PowerShell 驱动器**（**PSDrives**）的功能。PowerShell 中的 PSDrives
    类似于 Windows 中的文件系统驱动器，但不同的是，您使用 PSDrives 访问各种数据存储，而不是访问文件和文件夹。这些数据存储可以包括目录、注册表键以及其他数据源，可以通过一致且熟悉的接口访问。
- en: PSDrives are powered by **PSProviders**, which are the underlying components
    that provide access to data stores. PSProviders are similar to drivers in Windows,
    which allow access to different hardware devices. In the case of PowerShell, PSProviders
    allow you to access different data stores in a uniform way, using the same set
    of cmdlets and syntax.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: PSDrives 由 **PSProviders** 提供支持，PSProviders 是提供对数据存储访问的底层组件。PSProviders 类似于
    Windows 中的驱动程序，它们允许访问不同的硬件设备。在 PowerShell 中，PSProviders 允许您以统一的方式访问不同的数据存储，使用相同的
    cmdlet 和语法。
- en: 'For example, the **Env:\** PSDrive is a built-in PowerShell drive that provides
    access to environment variables. To retrieve all environment variables that have
    the **path** string in their name, you can use the **Get-ChildItem** cmdlet with
    the **Env:\** PSDrive:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，**Env:\** PSDrive 是一个内置的 PowerShell 驱动器，提供访问环境变量的功能。要检索所有名称中包含 **path** 字符串的环境变量，可以使用
    **Env:\** PSDrive 和 **Get-ChildItem** cmdlet：
- en: '[PRE174]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: To access a PSDrive, you use a special prefix in the path. For example, to access
    the filesystem drive, you use the prefix **C:**, and to access the registry drive,
    you use the prefix **HKLM:**. In the case of the **Env:\** PSDrive, the prefix
    is **Env:**, which allows you to access environment variables as if they were
    files or folders.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问 PSDrive，您需要在路径中使用特殊的前缀。例如，要访问文件系统驱动器，使用前缀 **C:**，要访问注册表驱动器，使用前缀 **HKLM:**。对于
    **Env:\** PSDrive，前缀是 **Env:**，它允许您像访问文件或文件夹一样访问环境变量。
- en: 'There are several built-in PSDrives in PowerShell, including the following:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 中有几个内置的 PSDrives，包括以下几种：
- en: '**Alias**: Provides access to PowerShell aliases'
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Alias**：提供对 PowerShell 别名的访问'
- en: '**Environment**: Provides access to environment variables'
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Environment**：提供对环境变量的访问'
- en: '**Function**: Provides access to PowerShell functions'
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Function**：提供对 PowerShell 函数的访问'
- en: '**Variable**: Provides access to PowerShell variables'
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Variable**：提供对 PowerShell 变量的访问'
- en: '**Cert**: Provides access to certificates in the Windows certificate store'
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cert**：提供对 Windows 证书存储中的证书的访问'
- en: '**Cert:\CurrentUser**: Provides access to certificates in the current user’s
    certificate store'
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cert:\CurrentUser**：提供对当前用户证书存储中的证书的访问'
- en: '**Cert:\LocalMachine**: Provides access to certificates in the local machine’s
    certificate store'
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cert:\LocalMachine**：提供对本地计算机证书存储中的证书的访问'
- en: '**WSMan**: Provides access to **Windows Remote Management** (**WinRM**) configuration
    data'
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WSMan**：提供对 **Windows 远程管理** (**WinRM**) 配置数据的访问'
- en: '**C:** and **D:** (*and other drive letters*): Used to access the filesystem,
    just like in Windows Explorer'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**C:** 和 **D:**（*以及其他驱动器字母*）：用于访问文件系统，就像在 Windows 资源管理器中一样'
- en: '**HKCU**: Provides access to the **HKEY_CURRENT_USER** registry hive'
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HKCU**：提供对 **HKEY_CURRENT_USER** 注册表树的访问'
- en: '**HKLM**: Provides access to the **HKEY_LOCAL_MACHINE** registry hive'
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HKLM**：提供对 **HKEY_LOCAL_MACHINE** 注册表树的访问'
- en: Making your code reusable
  id: totrans-446
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使代码可重用
- en: In this section, we will explore the concept of making your code reusable in
    PowerShell. Reusability is an important aspect of coding that allows you to create
    a function, cmdlet, or module once and use it multiple times without having to
    rewrite the same code again and again. Through this, you can save time and effort
    in the long run.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何在 PowerShell 中使代码可重用的概念。可重用性是编程中的一个重要方面，它允许你一次创建一个函数、cmdlet 或模块，并可以多次使用，而无需一遍又一遍地重写相同的代码。通过这种方式，你可以节省时间和精力，长期来看非常有利。
- en: We will start by discussing cmdlets, followed by functions and aliases, and
    finally, we will explore PowerShell modules, which are collections of PowerShell
    commands and functions that can be easily shared and installed on other systems,
    which is a great way to package and distribute your reusable code.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从讨论 cmdlet 开始，接着是函数和别名，最后，我们将探索 PowerShell 模块，它们是包含 PowerShell 命令和函数的集合，可以轻松共享并安装到其他系统中，是打包和分发可重用代码的一个好方法。
- en: Cmdlets
  id: totrans-449
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Cmdlet
- en: A cmdlet (pronounced as *commandlet*) is a type of PowerShell command that performs
    a specific task and can be written in C# or in another .NET language. This includes
    advanced functions, which are also considered cmdlets but have more advanced features
    than regular functions.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: cmdlet（发音为 *commandlet*）是一种 PowerShell 命令，执行特定任务，并且可以用 C# 或其他 .NET 语言编写。这包括高级函数，这些函数也被视为
    cmdlet，但比普通函数具有更多的高级功能。
- en: '**Get-Command** can help you to differentiate cmdlets from functions. Additionally,
    you can also see the version and the provider:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '**Get-Command** 可以帮助你区分 cmdlet 和函数。此外，你还可以查看版本和提供程序：'
- en: '[PRE175]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: 'To find out all cmdlets that are currently installed on the machine you are
    using, you can leverage **Get-Command** with the **CommandType** parameter:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看当前安装在你使用的机器上的所有 cmdlet，你可以利用 **Get-Command** 配合 **CommandType** 参数：
- en: '[PRE176]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: 'If you want to dig deeper into cmdlets, I recommend reviewing the official
    PowerShell documentation. Microsoft has published a lot of advice, as well as
    recommendations and guidelines:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想更深入地了解 cmdlet，我建议查看官方 PowerShell 文档。微软发布了很多建议、推荐和指南：
- en: '[https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/cmdlet-overview](https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/cmdlet-overview)'
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/cmdlet-overview](https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/cmdlet-overview)'
- en: '[https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/windows-powershell-cmdlet-concepts](https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/windows-powershell-cmdlet-concepts)'
  id: totrans-457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/windows-powershell-cmdlet-concepts](https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/windows-powershell-cmdlet-concepts)'
- en: Functions
  id: totrans-458
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数
- en: Functions are a collection of PowerShell commands that should be run following
    a certain logic.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 函数是按照特定逻辑执行的一组 PowerShell 命令。
- en: As with other programming and scripting languages, if you are typing in the
    same commands over and over again, and if you find yourself modifying the same
    one-liners for different scenarios, it is definitely time to create a function.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他编程语言和脚本语言一样，如果你一遍又一遍地输入相同的命令，或者你发现自己在不同场景下修改相同的一行命令，那么绝对是时候创建一个函数了。
- en: When you choose a name, make sure it follows the verb-noun naming convention
    and only uses approved verbs. Read more about approved verbs and naming conventions
    in the *Naming conventions* section covered earlier in this chapter.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 选择名称时，请确保遵循动词-名词命名约定，并且只使用批准的动词。关于批准动词和命名约定的更多内容，请参考本章之前的*命名约定*部分。
- en: 'This skeleton function using pseudocode should demonstrate the basic structure
    of a function:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 这个使用伪代码的骨架函数应该展示函数的基本结构：
- en: '[PRE177]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: 'Once the function is loaded into the session, it needs to be called so that
    it will be executed:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦函数加载到会话中，就需要调用它才能执行：
- en: '[PRE178]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: 'You can find a demo function with demo help that simply writes the output **Hello
    World!** and accepts a parameter to generate additional output, as well as the
    calling of it on GitHub:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在GitHub上找到一个演示函数及其帮助文档，该函数简单地输出**Hello World!**并接受一个参数来生成额外的输出，以及调用它的方式：
- en: '[https://github.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/blob/master/Chapter02/Write-HelloWorld.ps1](https://github.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/blob/master/Chapter02/Write-HelloWorld.ps1)'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/blob/master/Chapter02/Write-HelloWorld.ps1](https://github.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/blob/master/Chapter02/Write-HelloWorld.ps1)'
- en: Parameters
  id: totrans-468
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'A function does not necessarily need to support parameters, but if you want
    to process input within the function, parameters are required:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 函数不一定需要支持参数，但如果你想在函数内处理输入，则需要参数：
- en: '[PRE179]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: In this example, the **Invoke-Greeting** function provides the possibility to
    supply the **$Name** parameter, while specifying the data type as **[string]**
    will attempt to convert any input to a *string*, allowing for flexibility in the
    parameter input. You can also use other data types (for example, **int**, **boolean**,
    and so on) depending on your use case.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，**Invoke-Greeting**函数提供了传递**$Name**参数的可能性，同时指定数据类型为**[string]**，这将尝试将任何输入转换为*string*，从而为参数输入提供灵活性。你也可以根据用例使用其他数据类型（例如，**int**、**boolean**等）。
- en: 'If the parameter is specified, the provided value is stored in the **$Name**
    variable and can be used within the function:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指定了参数，提供的值将存储在**$Name**变量中，并可以在函数内使用：
- en: '[PRE180]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: 'If the parameter is not specified, it will be replaced by **$null** (which
    is **""**/*nothing*):'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未指定参数，它将被替换为**$null**（即**""**/*无*）：
- en: '[PRE181]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: In this case, the **$Name** parameter is not mandatory, so it does not have
    to be specified to run the function.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，**$Name**参数不是必需的，因此在运行函数时不必指定它。
- en: Adding parameters enables you to cover many of your use case’s complex scenarios.
    You might have already seen functions that allow only some type of input or that
    require a certain parameter – functions that will not be run until the user confirms
    and functions that provide the possibility to run them verbosely.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 添加参数使你能够覆盖许多复杂的用例场景。你可能已经见过一些只允许某种类型输入或要求特定参数的函数——这些函数在用户确认之前不会执行，并且提供了以详细模式执行它们的可能性。
- en: Let’s explore how these behaviors can be configured in our next sections about
    **cmdletbinding**, **SupportsShouldProcess**, input validation, and mandatory
    parameters.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们探索如何在关于**cmdletbinding**、**SupportsShouldProcess**、输入验证和必需参数的章节中配置这些行为。
- en: cmdletbinding
  id: totrans-479
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: cmdletbinding
- en: '**cmdletbinding** is a feature in PowerShell that allows you to add common
    parameters (such as **-Verbose**, **-Debug**, or **-ErrorAction**) to your functions
    and cmdlets without defining them yourself. This can make your code more consistent
    with other PowerShell commands and easier to use for users.'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: '**cmdletbinding**是PowerShell中的一个特性，允许你为函数和cmdlet添加公共参数（例如**-Verbose**、**-Debug**或**-ErrorAction**），而无需自己定义它们。这可以使你的代码与其他PowerShell命令保持一致，并且更易于用户使用。'
- en: 'One way to use **cmdletbinding** is to declare a parameter as mandatory, positional,
    or in a parameter set, which can automatically turn your function into a cmdlet
    with additional common parameters. For example, if you want to make the **-Name**
    parameter mandatory in your function, you can add **[Parameter(Mandatory)]** before
    the parameter definition, like this:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**cmdletbinding**的一种方式是将参数声明为必需、位置参数或参数集，这可以自动将你的函数转变为带有额外公共参数的cmdlet。例如，如果你想让**-Name**参数在你的函数中是必需的，可以在参数定义前添加**[Parameter(Mandatory)]**，如下所示：
- en: '[PRE182]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: This will automatically add the **[<CommonParameters >]** section to the output
    of **Get-Command**, and you will see all the common parameters that are also available
    in many other cmdlets, such as **Verbose**, **Debug**, **ErrorAction**, and others.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 这将自动将**[<CommonParameters >]**部分添加到**Get-Command**的输出中，你将看到许多其他cmdlet也可以使用的所有公共参数，如**Verbose**、**Debug**、**ErrorAction**等。
- en: 'To learn more about **cmdletbinding** and its functionality, check out the
    following link: [https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions_cmdletbindingattribute](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions_cmdletbindingattribute).'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于**cmdletbinding**及其功能的信息，请访问以下链接：[https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions_cmdletbindingattribute](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions_cmdletbindingattribute)。
- en: SupportsShouldProcess
  id: totrans-485
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: SupportsShouldProcess
- en: 'If a function makes changes, you can use **SupportsShouldProcess** to add an
    additional layer of protection to your function. By adding **[CmdletBinding(SupportsShouldProcess)]**,
    you can enable the **-WhatIf** and **-Confirm** parameters in your function, which
    help users understand the effect of their actions before executing the function.
    To use **SupportsShouldProcess** effectively, you will also need to call **ShouldProcess()**
    for each item being processed. Here’s an example of what your code could look
    like:'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个函数进行更改，你可以使用**SupportsShouldProcess**为你的函数增加一层额外的保护。通过添加**[CmdletBinding(SupportsShouldProcess)]**，你可以在函数中启用**-WhatIf**和**-Confirm**参数，这可以帮助用户在执行函数之前理解他们操作的影响。为了有效使用**SupportsShouldProcess**，你还需要为每个正在处理的项目调用**ShouldProcess()**。以下是你的代码可能的示例：
- en: '[PRE183]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: With this code, the function can be executed with the **-Confirm** parameter
    to prompt the user for confirmation before processing each item, or with the **-WhatIf**
    parameter to display a list of changes that would be made without actually processing
    the items.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这段代码，函数可以通过**-Confirm**参数执行，提示用户在处理每个项目之前确认，或者使用**-WhatIf**参数显示会做出的更改列表，而不实际处理这些项目。
- en: '[PRE184]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: Once you have added **SupportsShouldProcess** to your function, you can also
    see that the syntax has changed, by using **Get-Command** as shown in the preceding
    example.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在函数中添加了**SupportsShouldProcess**，你还可以看到语法已更改，使用**Get-Command**，如前面的示例所示。
- en: Accepting input via the pipeline
  id: totrans-491
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 通过管道接受输入
- en: 'It is also possible to configure parameters to accept user input to use it
    in our code. In addition to accepting input from the user, we can also accept
    input from the pipeline. This can be done in two ways: by value or by property
    name.'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以配置参数来接受用户输入并在代码中使用它。除了接受用户输入外，我们还可以接受来自管道的输入。这可以通过两种方式完成：按值接受或按属性名称接受。
- en: When accepting input by value, we receive the entire object passed through the
    pipeline. We can then use the parameter in our function to filter or manipulate
    the object.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 当按值接受输入时，我们接收通过管道传递的整个对象。然后，我们可以在函数中使用该参数来过滤或操作该对象。
- en: When accepting input by property name, we receive only the specified property
    of the object passed through the pipeline. This can be useful when we only need
    to work with a specific property of the object.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 当按属性名称接受输入时，我们仅接收通过管道传递的对象的指定属性。当我们只需要处理对象的特定属性时，这非常有用。
- en: To configure a function to accept input by value, we can use **ValueFromPipeline**;
    to accept input by property name use **ValueFromPipelineByPropertyName**. Of course,
    both can be combined with each other and with other parameter options as well,
    such as **Mandatory**.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置一个函数按值接受输入，我们可以使用**ValueFromPipeline**；要按属性名称接受输入，则使用**ValueFromPipelineByPropertyName**。当然，这两者可以相互结合使用，也可以与其他参数选项结合使用，如**Mandatory**。
- en: 'The following example shows the **Invoke-Greeting** function, which accepts
    input both by value and property name for its mandatory **$****Name** parameter:'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了**Invoke-Greeting**函数，它既接受按值传递的输入，也接受按属性名称传递的输入，作为其必填的**$****Name**参数：
- en: '[PRE185]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: 'You can now pass input by value to this function, as shown in the following
    example:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以像下面的示例所示，将输入按值传递给该函数：
- en: '[PRE186]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: 'But it also works to pass input by property name, as the following code snippet
    demonstrates:'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 但也可以按属性名称传递输入，正如下列代码片段所示：
- en: '[PRE187]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: 'If you want to dive deeper into accepting input from the pipeline and how to
    troubleshoot issues, you may refer to the following resources:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想深入了解如何从管道接受输入以及如何排查问题，你可以参考以下资源：
- en: '*PowerShell Basics for Security Professionals Part 6 – Pipeline* by Carlos
    Perez: [https://youtube.com/watch?v=P3ST3lat9bs](https://youtube.com/watch?v=P3ST3lat9bs'
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PowerShell基础知识：安全专家第6部分 – 管道** 由Carlos Perez主讲：[https://youtube.com/watch?v=P3ST3lat9bs](https://youtube.com/watch?v=P3ST3lat9bs)'
- en: )
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '*About* *Pipelines*: [https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_pipelines](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_pipelines)'
  id: totrans-505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*关于* *管道*：[https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_pipelines](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_pipelines)'
- en: As this book focuses on PowerShell security and not on expert function creation,
    it can barely scratch the surface of advanced functions. So, if you are interested
    in learning more about advanced functions and parameters, I have added some links
    in the *Further reading* section at the end of this chapter.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书专注于PowerShell安全，而非专家级函数创建，它几乎只能触及高级函数的皮毛。因此，如果你有兴趣深入了解高级函数和参数，我在本章末尾的*进一步阅读*部分中添加了一些链接。
- en: Comment-based help
  id: totrans-507
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于评论的帮助
- en: 'Writing comment-based help for your functions is crucial; others might reuse
    your function or if you want to adjust or reuse the function yourself some months
    after you wrote it, having good comment-based help will simplify the usage:'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 为你的函数编写基于评论的帮助至关重要；其他人可能会重用你的函数，或者如果你想在几个月后调整或重用自己编写的函数，拥有良好的评论帮助将简化使用：
- en: '[PRE188]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: 'Please also have a look at the **Write-HelloWorld.ps1** demo script on GitHub
    to see an example: [https://github.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/blob/master/Chapter02/Write-HelloWorld.ps1](https://github.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/blob/master/Chapter02/Write-HelloWorld.ps1).'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看GitHub上的**Write-HelloWorld.ps1**示例脚本以查看示例：[https://github.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/blob/master/Chapter02/Write-HelloWorld.ps1](https://github.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/blob/master/Chapter02/Write-HelloWorld.ps1)。
- en: Error handling
  id: totrans-511
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 错误处理
- en: 'If you are not sure whether your command will succeed, use **try** and **catch**:'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不确定你的命令是否会成功，请使用**try**和**catch**：
- en: '[PRE189]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: Setting **ErrorAction** to **Stop** will treat the error as a terminating error.
    As only terminating errors are caught, the action defined in the **catch** block
    is triggered.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 将**ErrorAction**设置为**Stop**会将错误视为终止错误。因为只有终止错误会被捕获，所以会触发**catch**块中定义的操作。
- en: If **ErrorAction** is not defined and if no terminating error is triggered,
    the **catch** block will be ignored.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 如果**ErrorAction**未定义，并且没有触发终止错误，则**catch**块将被忽略。
- en: The difference between cmdlets and script cmdlets (advanced functions)
  id: totrans-516
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: cmdlet和脚本cmdlet（高级函数）之间的区别
- en: When I heard for the first time about cmdlets and advanced functions, I was
    like *Okay great, but what’s the difference? They both sound* *pretty alike*.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 当我第一次听到cmdlet和高级函数时，我想，“*好吧，太好了， 但是它们有什么区别？它们听起来* *差不多*。”
- en: One significant difference is that cmdlets can be written in a .NET language
    such as C# and reside within a compiled binary. Script cmdlets, also known as
    advanced functions, are similar to cmdlets, but they are written in PowerShell
    script rather than a .NET language. Script cmdlets are a way to create custom
    cmdlets using PowerShell script instead of compiling code in a .NET language.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 一个显著的区别是，cmdlet可以用像C#这样的.NET语言编写，并且存在于编译后的二进制文件中。脚本cmdlet，也称为高级函数，类似于cmdlet，但它们是用PowerShell脚本编写的，而不是用.NET语言。脚本cmdlet是一种使用PowerShell脚本创建自定义cmdlet的方式，而不是编译.NET语言代码。
- en: One advantage of script cmdlets is that they can be easily modified and debugged
    without requiring compilation, making them more accessible to users who may not
    be comfortable with .NET languages. Additionally, script cmdlets can be distributed
    and shared just like compiled cmdlets.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本cmdlet的一个优势是它们可以轻松地修改和调试，而无需编译，这使得它们对于不熟悉.NET语言的用户来说更加易于访问。此外，脚本cmdlet可以像编译后的cmdlet一样分发和共享。
- en: For software vendors and developers, it is easier to package compiled cmdlets
    than to package libraries of functions and scripts, as well as to write and package
    help files.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 对于软件供应商和开发人员来说，打包编译后的cmdlet比打包函数和脚本库以及编写和打包帮助文件要容易得多。
- en: However, it is just a matter of preference what you want to use – if you prefer
    writing your functions in C# or other .NET-based languages, cmdlets might be your
    preferred choice; if you prefer using PowerShell only, you might want to create
    PowerShell functions.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这完全是个人偏好的问题——如果你更喜欢用 C# 或其他基于 .NET 的语言编写函数，cmdlet 可能是你更倾向的选择；如果你只喜欢使用 PowerShell，你可能会选择创建
    PowerShell 函数。
- en: Aliases
  id: totrans-522
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 别名
- en: An alias is some kind of a nickname for a PowerShell command, an alternate name.
    You can set aliases to make your daily work easier – for example, if you are repeatedly
    working with the same long and complicated command, setting an alias and using
    it instead will ease your daily work.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 别名是一种 PowerShell 命令的昵称，或者说是备用名称。你可以设置别名来简化日常工作——例如，如果你反复使用相同的长而复杂的命令，设置一个别名并使用它会使你的日常工作更加轻松。
- en: 'For example, one of the most used aliases is the famous **cd** command, which
    administrators use to change the directory on the command line. But **cd** is
    only an alias for the **Set-Location** cmdlet:'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，最常用的别名之一是著名的 **cd** 命令，管理员用它来在命令行中更改目录。但 **cd** 只是 **Set-Location** cmdlet
    的一个别名：
- en: '[PRE190]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: 'To see all available cmdlets that have the word **Alias** in their name, you
    can leverage **Get-Command**:'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 若要查看所有名称中包含 **Alias** 字样的可用 cmdlet，可以使用 **Get-Command**：
- en: '![Figure 2.5 – Getting all available cmdlets that have the word Alias in their
    name](image/B16679_02_005.jpg)'
  id: totrans-527
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.5 – 获取所有名称中包含 "Alias" 字样的可用 cmdlet](image/B16679_02_005.jpg)'
- en: Figure 2.5 – Getting all available cmdlets that have the word Alias in their
    name
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5 – 获取所有名称中包含 "Alias" 字样的可用 cmdlet
- en: Next, let’s have a closer look at how to work with aliases, using the **Get-Alias**,
    **New-Alias**, **Set-Alias**, **Export-Alias**, and **Import-Alias** cmdlets.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将深入了解如何使用 **Get-Alias**、**New-Alias**、**Set-Alias**、**Export-Alias** 和
    **Import-Alias** cmdlet 来处理别名。
- en: Get-Alias
  id: totrans-530
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Get-Alias
- en: 'To see all aliases that are currently configured on the computer you are working
    on, use the **Get-Alias** cmdlet:'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 若要查看当前计算机上配置的所有别名，可以使用 **Get-Alias** cmdlet：
- en: '![Figure 2.6 – Output of the Get-Alias command](image/B16679_02_006.jpg)'
  id: totrans-532
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.6 – Get-Alias 命令的输出](image/B16679_02_006.jpg)'
- en: Figure 2.6 – Output of the Get-Alias command
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6 – Get-Alias 命令的输出
- en: You can either use **Get-Alias** to inspect the entire list of aliases that
    are available, or you can check whether a specific alias exists using the **-****Name**
    parameter.
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 **Get-Alias** 来检查所有可用的别名列表，或者你可以使用 **-Name** 参数检查某个特定别名是否存在。
- en: New-Alias
  id: totrans-535
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: New-Alias
- en: 'You can use **New-Alias** to create a new alias within the current PowerShell
    session:'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 **New-Alias** 在当前 PowerShell 会话中创建一个新的别名：
- en: '[PRE191]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: This alias is not set permanently, so once you exit the session, the alias will
    not be available anymore.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 这个别名不是永久设置的，因此一旦退出会话，该别名将不再可用。
- en: If you want to use aliases multiple times in multiple sessions, you can either
    export them and import them in every new session or you can configure them to
    be permanently set for every new PowerShell session by using the PowerShell profile.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在多个会话中多次使用别名，你可以将其导出并在每个新会话中导入，或者你可以通过使用 PowerShell 配置文件将其配置为每个新 PowerShell
    会话永久设置。
- en: If you want to add parameters to the command that your alias runs, you can create
    a function and use **New-Alias** to link the new function to your existing command.
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想为别名执行的命令添加参数，你可以创建一个函数，并使用 **New-Alias** 将新函数与现有命令关联。
- en: Set-Alias
  id: totrans-541
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Set-Alias
- en: '**Set-Alias** can be used to either create or change an alias.'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: '**Set-Alias** 可用于创建或更改别名。'
- en: 'So if you want to change, for example, the content of the formerly created
    **Get-Ip** alias to **Get-NetIPAddress**, you would run the following command:'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果你想将之前创建的 **Get-Ip** 别名的内容更改为 **Get-NetIPAddress**，你可以运行以下命令：
- en: '[PRE192]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: Export-Alias
  id: totrans-545
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Export-Alias
- en: 'Export one or more aliases with **Export-Alias** – either as a **.csv** file
    or as a script:'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **Export-Alias** 导出一个或多个别名——可以是 **.csv** 文件或脚本：
- en: '[PRE193]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: 'Using this command, we first export all aliases to a **.****csv** file:'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此命令，我们首先将所有别名导出到 **.csv** 文件：
- en: '[PRE194]'
  id: totrans-549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: 'The **-As Script** parameter allows you to execute all currently available
    aliases as a script that can be executed:'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: '**-As Script** 参数允许你将所有当前可用的别名作为脚本执行：'
- en: '[PRE195]'
  id: totrans-551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: If you plan to re-import the aliases later, it’s important to be aware that
    executing the script without re-importing the function may cause issues. Therefore,
    make sure to also import the script on the new system on which you plan to import
    the alias.
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您计划稍后重新导入别名，请注意，如果执行脚本时没有重新导入该函数，可能会导致问题。因此，确保在新系统上也导入脚本，以便在该系统上导入别名。
- en: Of course, it is also possible to only export a single alias by specifying its
    **-Name** parameter, in the last example.
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您也可以通过指定**-Name**参数，仅导出单个别名，如最后一个示例所示。
- en: alias.csv
  id: totrans-554
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: alias.csv
- en: 'The **alias.csv** file that we created using the **Export-Alias** command can
    now be reused to create or import all aliases of this session in another session:'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用**Export-Alias**命令创建的**alias.csv**文件现在可以在另一个会话中重新使用，用来创建或导入该会话的所有别名：
- en: '[PRE196]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: alias.ps1
  id: totrans-557
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: alias.ps1
- en: If you export your aliases using the **-As Script** option (as in the example
    from earlier), an executable **.ps1** file (**alias.ps1**) is created.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用**-As Script**选项导出别名（如前面的示例所示），将会创建一个可执行的**.ps1**文件（**alias.ps1**）。
- en: 'You can now use the file to set your aliases automatically whenever you run
    the **.ps1** script, or you can use the code to edit your profile file (see **New-Alias**)
    to configure permanent aliases:'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以使用该文件，在每次运行**.ps1**脚本时自动设置别名，或者使用代码编辑您的配置文件（请参见**New-Alias**）以配置永久别名：
- en: '[PRE197]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: If you use functions to define aliases, make sure to also save those functions
    and execute them in the session in which you want to import your aliases.
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用函数来定义别名，请确保同时保存这些函数，并在要导入别名的会话中执行它们。
- en: Import-Alias
  id: totrans-562
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导入别名
- en: 'You can use **Import-Alias** to import aliases that were exported as **.csv**:'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用**Import-Alias**导入作为**.csv**格式导出的别名：
- en: '[PRE198]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: 'Import the file to make the alias available in your current session:'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 导入文件以使别名在当前会话中可用：
- en: '[PRE199]'
  id: totrans-566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: 'Further information on aliases can be found at the following link: [https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_aliases](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_aliases).'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于别名的信息可以通过以下链接查看：[https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_aliases](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_aliases)。
- en: Modules
  id: totrans-568
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块
- en: Modules are a collection of PowerShell commands and functions that can be easily
    shipped and installed on other systems. They are a great way to enrich your sessions
    with other functionalities.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 模块是PowerShell命令和函数的集合，可以轻松地在其他系统上传输和安装。它们是为您的会话增加其他功能的好方法。
- en: Find Module-Related Cmdlets
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 查找与模块相关的 cmdlet
- en: 'To find module-related cmdlets, leverage **Get-Command** and have a look at
    their help pages and the official documentation to understand their function:'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找与模块相关的 cmdlet，请使用**Get-Command**并查看其帮助页面及官方文档，以了解其功能：
- en: '**Get-Command -****Name "*Module*"**'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: '**Get-Command -****Name "*Module*"**'
- en: 'All modules that are installed on the system can be found in one of the **PSModulePath**
    folders, which are part of the **Env:\** PSDrive:'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 系统上安装的所有模块可以在**PSModulePath**文件夹中找到，这些文件夹是**Env:\** PSDrive的一部分：
- en: '[PRE200]'
  id: totrans-574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: Query the content with **Env:\PSModulePath** to find out which paths were set
    on your system.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 查询**Env:\PSModulePath**的内容，以找出系统上设置了哪些路径。
- en: Working with modules
  id: totrans-576
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用模块
- en: To use a module efficiently, the following sections will help you to make the
    module available, to find out how to work with it, and to finally remove or unload
    it.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 为了高效使用模块，接下来的章节将帮助您使模块可用，了解如何与模块一起工作，并最终删除或卸载它。
- en: Finding and installing modules
  id: totrans-578
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 查找并安装模块
- en: 'To search for a certain module in a repository, you can leverage **Find-Module
    -Name <modulename>**. It queries the repositories that are configured on your
    operating system:'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 要在仓库中查找特定模块，您可以使用**Find-Module -Name <modulename>**。它会查询配置在操作系统上的仓库：
- en: '[PRE201]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: 'Once you have found the desired module, you can download and install it to
    your local system using **Install-Module**:'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦找到所需的模块，您可以使用**Install-Module**将其下载并安装到本地系统：
- en: '[PRE202]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: 'If you have already installed a module for which a newer version exists, update
    it with **Update-Module**:'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经安装了一个模块，但有一个新版本可用，请使用**Update-Module**进行更新：
- en: '[PRE203]'
  id: totrans-584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: 'To see which repositories are available on your system, use the following:'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看系统上有哪些仓库可用，请使用以下命令：
- en: '[PRE204]'
  id: totrans-586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: One of the most commonly used repositories is the **PowerShell Gallery** (shown
    as **PSGallery** in the previous example).
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的仓库之一是**PowerShell Gallery**（在前面的示例中显示为**PSGallery**）。
- en: The PowerShell Gallery
  id: totrans-588
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: PowerShell 库
- en: 'The PowerShell Gallery is the central repository for PowerShell content: [https://www.powershellgallery.com/](https://www.powershellgallery.com/).
    In this repository, you''ll find thousands of helpful modules, scripts, and **Desired
    State Configuration** (**DSC**) resources.'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell Gallery 是 PowerShell 内容的中央仓库：[https://www.powershellgallery.com/](https://www.powershellgallery.com/)。在这个仓库中，你将找到成千上万的有用模块、脚本和
    **Desired State Configuration**（**DSC**）资源。
- en: To leverage the PowerShell Gallery and to install modules directly from the
    repository, **NuGet** and **PowerShellGet** need to be installed.
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 要利用 PowerShell Gallery 并直接从仓库安装模块，**NuGet** 和 **PowerShellGet** 需要先安装。
- en: 'If you haven’t installed the required packages, when you try to install a module
    for the first time from the PowerShell Gallery, you will be prompted to install
    it:'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有安装所需的软件包，当你第一次尝试从 PowerShell Gallery 安装模块时，系统会提示你安装它：
- en: '![Figure 2.7 – Installing a module from the PowerShell Gallery using Windows
    PowerShell](image/B16679_02_007.jpg)'
  id: totrans-592
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.7 – 使用 Windows PowerShell 从 PowerShell Gallery 安装模块](image/B16679_02_007.jpg)'
- en: Figure 2.7 – Installing a module from the PowerShell Gallery using Windows PowerShell
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7 – 使用 Windows PowerShell 从 PowerShell Gallery 安装模块
- en: As you can see in the preceding screenshot, you will not only be prompted to
    install the module itself but also the NuGet provider if you are installing modules
    from the PowerShell Gallery for the first time.
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，如果你第一次从 PowerShell Gallery 安装模块，不仅会提示你安装模块本身，还会提示你安装 NuGet 提供程序。
- en: 'If you are using PowerShell Core, both **NuGet** and **PowerShellGet** are
    usually already preinstalled:'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 PowerShell Core，**NuGet** 和 **PowerShellGet** 通常已经预安装：
- en: '![Figure 2.8 – Installing a module from the PowerShell Gallery using PowerShell
    Core](image/B16679_02_008.jpg)'
  id: totrans-596
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.8 – 使用 PowerShell Core 从 PowerShell Gallery 安装模块](image/B16679_02_008.jpg)'
- en: Figure 2.8 – Installing a module from the PowerShell Gallery using PowerShell
    Core
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8 – 使用 PowerShell Core 从 PowerShell Gallery 安装模块
- en: Configure PowerShell Gallery as a Trusted Repository
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 将 PowerShell Gallery 配置为受信任的仓库
- en: When you install modules from the PowerShell Gallery, you may receive a warning
    that the repository is not trusted. This warning is displayed to ensure that you
    are aware that you are installing code from an external source that has not been
    verified by Microsoft. The warning is intended to protect you from potentially
    malicious code that could harm your system.
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 当你从 PowerShell Gallery 安装模块时，可能会收到仓库未受信任的警告。这个警告的目的是确保你意识到自己正在从未经过微软验证的外部源安装代码。该警告旨在保护你免受可能损害系统的恶意代码。
- en: 'To avoid the warning, you can configure the repository as a trusted repository.
    By doing this, you are indicating that you trust the source and that you accept
    the potential risks associated with installing code from it. To configure a repository
    as a trusted repository, you can use the following code snippet: **Set-PSRepository
    -Name ''PSGallery'' -****InstallationPolicy Trusted**.'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免警告，你可以将仓库配置为受信任的仓库。这样做表示你信任该来源，并接受从该来源安装代码所可能带来的风险。要将仓库配置为受信任的仓库，可以使用以下代码片段：**Set-PSRepository
    -Name 'PSGallery' -****InstallationPolicy Trusted**。
- en: By configuring the repository as a trusted repository, you are indicating that
    you trust the code provided by that repository and that you are willing to take
    responsibility for any risks associated with using it.
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将仓库配置为受信任的仓库，你表示你信任该仓库提供的代码，并愿意承担使用该代码可能带来的风险。
- en: Working with modules
  id: totrans-602
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用模块
- en: 'To find out which modules are already available in the current session, you
    can use **Get-Module**:'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看当前会话中已经可用的模块，可以使用 **Get-Module**：
- en: '[PRE205]'
  id: totrans-604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: 'To see which modules are available to import, including those that come pre-installed
    with Windows, you can use the **ListAvailable** parameter with the **Get-Module**
    cmdlet. This will display a list of all available modules on the computer, including
    their version numbers, descriptions, and other information:'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看哪些模块可以导入，包括那些预装在 Windows 中的模块，可以使用 **Get-Module** cmdlet 的 **ListAvailable**
    参数。这将显示计算机上所有可用模块的列表，包括它们的版本号、描述和其他信息：
- en: '[PRE206]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: 'Find out which commands are available by using **Get-Command**:'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **Get-Command** 查找可用的命令：
- en: '[PRE207]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: 'And if you want to know more about the usage of a command that is available
    in a module, you can use **Get-Help**. You can see how important it is to write
    proper help pages for your function:'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解模块中某个命令的用法，可以使用 **Get-Help**。你可以看到为你的函数编写适当的帮助页面是多么重要：
- en: '![Figure 2.9 – Getting the help pages of a command](image/B16679_02_009.jpg)'
  id: totrans-610
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.9 – 获取命令的帮助页面](image/B16679_02_009.jpg)'
- en: Figure 2.9 – Getting the help pages of a command
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9 – 获取命令的帮助页面
- en: 'If you have, for example, an old version loaded in your current session and
    you want to unload it, **Remove-Module** unloads the current module from your
    session:'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在当前会话中加载了一个旧版本的模块，且希望卸载它，可以使用 **Remove-Module** 从会话中卸载当前模块：
- en: '[PRE208]'
  id: totrans-613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: When you are developing and testing your own modules, this command is especially
    helpful.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发和测试你自己的模块时，这个命令特别有用。
- en: Creating your own modules
  id: totrans-615
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建你自己的模块
- en: To make your functions easier to ship to other systems, creating a module is
    a great way. As the description of full-blown modules would exceed the scope of
    this book, I will describe the basics of how to quickly get started.
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使你的函数更容易迁移到其他系统，创建一个模块是一个不错的方法。由于完整模块的描述超出了本书的范围，我将简要描述如何快速入门。
- en: 'Please also have a look at the official PowerShell module documentation to
    better understand how modules work and how they should be created: https://docs.microsoft.com/en-us/powershell/scripting/developer/module/writing-a-windows-powershell-module.'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 请还参考 PowerShell 官方模块文档，以更好地理解模块是如何工作的以及如何创建模块：https://docs.microsoft.com/en-us/powershell/scripting/developer/module/writing-a-windows-powershell-module。
- en: When working more intensively with PowerShell modules, you might also come across
    many different files, such as files that end with **.psm1**, **.psd1**, **.ps1xml**,
    or **.dll**, help files, localization files, and many others.
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 在更密集地使用 PowerShell 模块时，你可能会遇到许多不同的文件，例如以 **.psm1**、**.psd1**、**.ps1xml** 或 **.dll**
    结尾的文件、帮助文件、本地化文件以及其他许多文件。
- en: I will not describe all the files that can be used in a module, but I will describe
    the most necessary files – the **.psm1** file and the **.****psd1** file.
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会描述可以在模块中使用的所有文件，但我会描述最必要的文件——**.psm1** 文件和 **.psd1** 文件。
- en: .psm1
  id: totrans-620
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: .psm1
- en: The **.psm1** file contains the scripting logic that your module should provide.
    Of course, you can also use it to import other functions within your module.
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: '**.psm1** 文件包含你的模块应提供的脚本逻辑。当然，你也可以用它来导入模块内的其他函数。'
- en: .psd1 – the module manifest
  id: totrans-622
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: .psd1 – 模块清单
- en: The **.psd1** file is the manifest of your module. If you only create a PowerShell
    script module, this file is not mandatory, but it allows you to control your module
    functions and include information about the module.
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: '**.psd1** 文件是你模块的清单。如果你只创建了一个 PowerShell 脚本模块，则此文件不是必需的，但它允许你控制模块函数并包含有关模块的信息。'
- en: Developing a basic module
  id: totrans-624
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 开发一个基本模块
- en: Creating a basic PowerShell module can be as simple as writing a script containing
    one or more functions, and saving it with a **.psm1** file extension.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个基本的 PowerShell 模块可以像编写包含一个或多个函数的脚本一样简单，并将其保存为 **.psm1** 文件扩展名。
- en: First, we define the path where the module should be saved in the **$path**
    variable and create the **MyModule** folder if it does not exist yet. We then
    use the **New-ModuleManifest** cmdlet to create a new module manifest file named
    **MyModule.psd1** in the **MyModule** folder. The **-RootModule** parameter specifies
    the name of the PowerShell module file, which is **MyModule.psm1**.
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在 **$path** 变量中定义模块应该保存的路径，并在 **MyModule** 文件夹不存在时创建该文件夹。然后，我们使用 **New-ModuleManifest**
    cmdlet 在 **MyModule** 文件夹中创建一个名为 **MyModule.psd1** 的新模块清单文件。**-RootModule** 参数指定
    PowerShell 模块文件的名称，即 **MyModule.psm1**。
- en: 'Using the **Set-Content** cmdlet, we create the **MyModule.psm1** file and
    define the **Invoke-Greeting** function, which we wrote earlier in this chapter:'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **Set-Content** cmdlet，我们创建 **MyModule.psm1** 文件并定义我们在本章早些时候编写的 **Invoke-Greeting**
    函数：
- en: '[PRE209]'
  id: totrans-628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: 'When you want to use a module in your PowerShell session, you can either import
    it directly into your session or copy it into one of the **PSModule** paths. To
    ensure that the module is easily accessible for future use, it’s recommended to
    copy it to one of the **PSModule** paths. The **PSModule** paths are directories
    that are searched for modules when you use the **Import-Module** cmdlet. To see
    the **PSModule** paths, you can run the following command:'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想在 PowerShell 会话中使用某个模块时，你可以直接将其导入到会话中，或者将其复制到其中一个 **PSModule** 路径中。为了确保模块在将来可以方便地使用，建议将其复制到一个
    **PSModule** 路径中。**PSModule** 路径是使用 **Import-Module** cmdlet 时，系统会搜索模块的目录。要查看
    **PSModule** 路径，可以运行以下命令：
- en: '[PRE210]'
  id: totrans-630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: 'Once you have determined which **PSModule** path to use, you can copy the module
    directory to that location. After copying the module to the appropriate **PSModule**
    path, you can then import the module using the **Import-Module** cmdlet:'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你确定了要使用的**PSModule**路径，就可以将模块目录复制到该位置。将模块复制到合适的**PSModule**路径后，你就可以使用**Import-Module**
    cmdlet导入该模块：
- en: '[PRE211]'
  id: totrans-632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: 'Alternatively, when you are in the development phase, you can import the module
    directly into your session, without having it copied in one of the **PSModule**
    paths, using **Import-Module**:'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，在开发阶段，你可以直接将模块导入到你的会话中，而不需要将其复制到任何**PSModule**路径，使用**Import-Module**：
- en: '[PRE212]'
  id: totrans-634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: By copying the module to a **PSModule** path, you can easily import it into
    any PowerShell session without having to specify the full path to the module.
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将模块复制到**PSModule**路径，你可以轻松地将其导入到任何PowerShell会话中，而无需指定模块的完整路径。
- en: 'Now, you can call the function that was defined in the **MyModule** module:'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以调用在**MyModule**模块中定义的函数：
- en: '[PRE213]'
  id: totrans-637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: Congratulations, you just created and executed your first very own module!
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你，刚刚创建并执行了自己的第一个模块！
- en: 'You can compare your own module with the demo module of this chapter: [https://github.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/tree/master/Chapter02/MyModule](https://github.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/tree/master/Chapter02/MyModule).'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将自己的模块与本章的示例模块进行对比： [https://github.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/tree/master/Chapter02/MyModule](https://github.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/tree/master/Chapter02/MyModule).
- en: Module Manifest Options
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 模块清单选项
- en: Have a closer look at the options that are available within the module manifest.
    For example, you can also specify the author, the description, or modules that
    are required to install this module, using the **RequiredModules** hashtable.
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细查看模块清单中可用的选项。例如，你还可以使用**RequiredModules**哈希表指定作者、描述，或者安装此模块所需的其他模块。
- en: 'As you become more familiar with module development and want to take your code
    to the next level, you can explore tools such as **PSModuleDevelopment**, which
    can help you with your development tasks, and also with later CI/CD tasks: [https://psframework.org/documentation/documents/psmoduledevelopment.html](https://psframework.org/documentation/documents/psmoduledevelopment.html).'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你对模块开发的熟悉并希望将代码提升到一个新层次，你可以探索如**PSModuleDevelopment**这样的工具，它可以帮助你进行开发任务，也可以帮助你进行后续的CI/CD任务：[https://psframework.org/documentation/documents/psmoduledevelopment.html](https://psframework.org/documentation/documents/psmoduledevelopment.html).
- en: Summary
  id: totrans-643
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you have learned the fundamentals of PowerShell scripting.
    After refreshing the basics of variables, operators, and control structures, you
    are able to create your very own scripts, functions, and modules.
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，你已经学习了PowerShell脚本编写的基础知识。在复习了变量、运算符和控制结构的基础后，你现在可以创建自己的脚本、函数和模块。
- en: Now that you are familiar with the PowerShell basics and you are able to work
    with PowerShell on your local system, let’s dive deeper into PowerShell remoting
    and its security considerations in the next chapter.
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经熟悉了PowerShell的基础，并能够在本地系统上使用PowerShell，接下来我们将深入探讨PowerShell远程操作及其安全性考虑，敬请期待下一章。
- en: Further reading
  id: totrans-646
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'If you want to explore some of the topics that were mentioned in this chapter,
    check out these resources:'
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想深入了解本章中提到的一些主题，可以参考以下资源：
- en: 'Everything you want to know about arrays: [https://docs.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-arrays](https://docs.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-arrays'
  id: totrans-648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你想了解的关于数组的所有内容： [https://docs.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-arrays](https://docs.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-arrays)
- en: )
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: 'Everything you want to know about hashtables: [https://docs.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-hashtable](https://docs.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-hashtable'
  id: totrans-650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你想了解的关于哈希表的所有内容： [https://docs.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-hashtable](https://docs.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-hashtable)
- en: )
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: 'Everything you want to know about **$****null**: [https://docs.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-null](https://docs.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-null'
  id: totrans-652
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你想了解的关于**$****null**的所有内容： [https://docs.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-null](https://docs.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-null)
- en: )
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: 'Everything you want to know about **PSCustomObject**: [https://docs.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-pscustomobject](https://docs.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-pscustomobject'
  id: totrans-654
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '你想了解的所有关于**PSCustomObject**的信息: [https://docs.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-pscustomobject](https://docs.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-pscustomobject)'
- en: )
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: 'About functions: [https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions'
  id: totrans-656
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '关于函数: [https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions)'
- en: )
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: 'Functions 101: [https://docs.microsoft.com/en-us/powershell/scripting/learn/ps101/09-functions](https://docs.microsoft.com/en-us/powershell/scripting/learn/ps101/09-functions'
  id: totrans-658
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '函数 101: [https://docs.microsoft.com/en-us/powershell/scripting/learn/ps101/09-functions](https://docs.microsoft.com/en-us/powershell/scripting/learn/ps101/09-functions)'
- en: )
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: 'About functions’ advanced parameters: [https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions_advanced_parameters](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions_advanced_parameters'
  id: totrans-660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '关于函数的高级参数: [https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions_advanced_parameters](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions_advanced_parameters)'
- en: )
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: 'Cmdlets versus functions: [https://www.leeholmes.com/blog/2007/07/24/cmdlets-vs-functions/](https://www.leeholmes.com/blog/2007/07/24/cmdlets-vs-functions/'
  id: totrans-662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Cmdlets 与函数: [https://www.leeholmes.com/blog/2007/07/24/cmdlets-vs-functions/](https://www.leeholmes.com/blog/2007/07/24/cmdlets-vs-functions/)'
- en: )
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: 'Modules help pages: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_modules'
  id: totrans-664
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '模块帮助页面: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_modules'
- en: 'You can also find all links mentioned in this chapter in the GitHub repository
    for [*Chapter 2*](B16679_02_Final_PD.xhtml#_idTextAnchor034) – no need to manually
    type in every link: [https://github.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/blob/master/Chapter02/Links.md](https://github.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/blob/master/Chapter02/Links.md)'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: '你还可以在 GitHub 仓库中找到本章提到的所有链接：[*第 2 章*](B16679_02_Final_PD.xhtml#_idTextAnchor034)
    – 无需手动输入每个链接: [https://github.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/blob/master/Chapter02/Links.md](https://github.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/blob/master/Chapter02/Links.md)'
