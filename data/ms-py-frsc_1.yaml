- en: Chapter 1. Setting Up the Lab and Introduction to Python ctypes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章：搭建实验室并介绍Python ctypes
- en: '**Cyber Security** and **Digital Forensics** are two topics of increasing importance.
    Digital forensics especially, is getting more and more important, not only during
    law enforcement investigations, but also in the field of incident response. During
    all of the previously mentioned investigations, it''s fundamental to get to know
    the root cause of a security breach, malfunction of a system, or a crime. Digital
    forensics plays a major role in overcoming these challenges.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络安全**和**数字取证**是两个日益重要的话题。尤其是数字取证，它变得越来越重要，不仅在执法调查中扮演着重要角色，在事件响应领域也越来越关键。在所有前述的调查中，了解安全漏洞的根本原因、系统故障或犯罪行为至关重要。数字取证在克服这些挑战中起着关键作用。'
- en: In this book, we will teach you how to build your own lab and perform profound
    digital forensic investigations, which originate from a large range of platforms
    and systems, with the help of Python. We will start with common Windows and Linux
    desktop machines, then move forward to cloud and virtualization platforms, and
    end up with mobile phones. We will not only show you how to examine the data at
    rest or in transit, but also take a deeper look at the volatile memory.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将教你如何搭建自己的实验室，并借助Python进行深入的数字取证调查，这些调查涉及多个平台和系统。我们将从常见的Windows和Linux桌面机器开始，然后进阶到云平台和虚拟化平台，最终涉及到手机。我们不仅会展示如何检查静态数据或传输中的数据，还将深入探讨易失性内存。
- en: Python provides an excellent development platform to build your own investigative
    tools because of its decreased complexity, increased efficiency, large number
    of third-party libraries, and it's also easy to read and write. During the journey
    of reading this book, you will not only learn how to use the most common Python
    libraries and extensions to analyze the evidence, but also how to write your own
    scripts and helper tools to work faster on the cases or incidents with a huge
    amount of evidence that has to be analyzed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Python提供了一个出色的开发平台，适合构建自己的调查工具，因为它简化了复杂性、提高了效率、拥有大量的第三方库，并且易于阅读和编写。在阅读本书的过程中，你不仅会学习如何使用最常见的Python库和扩展来分析证据，还会学到如何编写自己的脚本和辅助工具，以便在需要分析大量证据的案件或事件中更加高效。
- en: Let's begin our journey of mastering Python forensics by setting up our lab
    environment, followed by a brief introduction of the Python ctypes.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过搭建实验室环境来开始掌握Python取证的旅程，接着简要介绍Python ctypes。
- en: If you have already worked with Python **ctypes** and have a working lab environment,
    feel free to skip the first chapter and start directly with one of the other chapters.
    After the first chapter, the other chapters are fairly independent of each other
    and can be read in any order.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经使用过Python **ctypes**并且有一个可用的实验室环境，可以跳过第一章，直接开始阅读其他章节。第一章之后，其他章节相对独立，可以按任意顺序阅读。
- en: Setting up the Lab
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搭建实验室
- en: As a base for our scripts and investigations, we need a comprehensive and powerful
    lab environment that is able to handle a large number of different file types
    and structures as well as connections to mobile devices. To achieve this goal,
    we will use the latest Ubuntu LTS version 14.04.2 and install it in a virtual
    machine (VM). Within the following sections, we will explain the setup of the
    VM and introduce Python **virtualenv**, which we will use to establish our working
    environment.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作为我们脚本和调查的基础，我们需要一个全面且强大的实验室环境，能够处理大量不同类型和结构的文件，并支持与移动设备的连接。为了实现这个目标，我们将使用最新的Ubuntu
    LTS版本14.04.2，并将其安装在虚拟机（VM）中。在接下来的章节中，我们将解释虚拟机的设置，并介绍Python **virtualenv**，我们将用它来建立我们的工作环境。
- en: Ubuntu
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ubuntu
- en: To work in a similar lab environment, we suggest you to download a copy of the
    latest Ubuntu LTS Desktop Distribution from [http://www.ubuntu.com/download/desktop/](http://www.ubuntu.com/download/desktop/),
    preferably the 32-bit version. The distribution provides a simple-to-use UI and
    already has the Python 2.7.6 environment installed and preconfigured. Throughout
    the book, we will use Python 2.7.x and not the newer 3.x versions. Several examples
    and case studies in this book will rely on the tools or libraries that are already
    a part of the Ubuntu distribution. When a chapter or section of the book requires
    a third-party package or library, we will provide the additional information on
    how to install it in the **virtualenv** (the setup of this environment will be
    explained in the next section) or on Ubuntu in general.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在类似的实验室环境中工作，我们建议你从[http://www.ubuntu.com/download/desktop/](http://www.ubuntu.com/download/desktop/)下载最新的
    Ubuntu LTS 桌面版，最好是 32 位版本。该发行版提供了一个易于使用的界面，并且已经安装并预配置了 Python 2.7.6 环境。在本书中，我们将使用
    Python 2.7.x，而不是更新的 3.x 版本。本书中的一些示例和案例研究将依赖于已经包含在 Ubuntu 发行版中的工具或库。当本书的某一章节或部分需要第三方软件包或库时，我们会提供如何在**virtualenv**（该环境的设置将在下一节中解释）或在
    Ubuntu 上安装它的额外信息。
- en: For better performance of the system, we recommend that the virtual machine
    that is used for the lab has at least 4 GB of volatile memory and about 40 GB
    of storage.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好的系统性能，我们建议用于实验室的虚拟机至少配备 4 GB 的临时内存和约 40 GB 的存储空间。
- en: '![Ubuntu](img/2087_01_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![Ubuntu](img/2087_01_01.jpg)'
- en: 'Figure 1: The Atom editor'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1：Atom 编辑器
- en: To write your first Python script, you can use a simple editor such as **vi**
    or a powerful but cluttered IDE such as **eclipse**. As a really powerful alternative,
    we would suggest you to use **atom**, a very clean but highly customizable editor
    that can be freely downloaded from [https://atom.io/](https://atom.io/).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写你的第一个 Python 脚本，你可以使用简单的编辑器，如**vi**，或是功能强大但杂乱的集成开发环境（IDE），如**eclipse**。作为一个非常强大的替代方案，我们建议你使用**atom**，一个非常简洁但高度可定制的编辑器，您可以从[https://atom.io/](https://atom.io/)免费下载。
- en: Python virtual environment (virtualenv)
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 虚拟环境（virtualenv）
- en: According to the official Python documentation, Virtual Environment is a tool
    to keep the dependencies required by different projects in separate places by
    creating virtual Python environments for them. It solves the "Project X depends
    on version 1.x, but Project Y needs 4.x" dilemma and keeps your global site-packages
    directory clean and manageable.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 根据官方的 Python 文档，虚拟环境是通过为不同的项目创建虚拟 Python 环境来将它们所需的依赖项存储在不同的位置。它解决了“项目 X 依赖于
    1.x 版本，而项目 Y 需要 4.x 版本”的困境，并保持你的全局 site-packages 目录干净且易于管理。
- en: 'This is also what we will use in the following chapters to keep a common environment
    for all the readers of the book and not run into any compatibility issues. First
    of all, we have to install the **virtualenv** package. This is done by the following
    command:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是我们在接下来的章节中使用的方式，以确保所有读者都能拥有统一的环境，并避免出现兼容性问题。首先，我们需要安装**virtualenv**包。可以通过以下命令完成安装：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We will now create a folder in the users'' home directory for our virtual Python
    environment. This directory will contain the executable Python files and a copy
    of the pip library, which can be used to install other packages in the environment.
    The name of the virtual environment (in our case, it is called **labenv**) can
    be of your choice. Our virtual lab environment can be created by executing the
    following command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将在用户的主目录下创建一个文件夹，用于我们的虚拟 Python 环境。这个目录将包含可执行的 Python 文件和 pip 库的副本，后者可以用于在环境中安装其他软件包。虚拟环境的名称（在我们的例子中为**labenv**）可以由你选择。我们可以通过执行以下命令来创建我们的虚拟实验室环境：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To start working with the new lab environment, it first needs to be activated.
    This can be done through:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用新的实验室环境，首先需要激活它。可以通过以下方式进行激活：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, you can see that the command prompt starts with the name of the virtual
    environment that we activated. From now on, any package that you install using
    pip will be placed in the **labenv** folder, isolated from the global Python installation
    in the underlying Ubuntu.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以看到命令提示符以我们激活的虚拟环境名称开始。从现在起，你使用 pip 安装的任何软件包将被放置在**labenv**文件夹中，与底层 Ubuntu
    中的全局 Python 安装隔离。
- en: Throughout the book, we will use this virtual python environment and install
    new packages and libraries in it from time to time. So, every time you try to
    recap a shown example remember or challenge to change into the **labenv** environment
    before running your scripts.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用这个虚拟 Python 环境，并不时地在其中安装新包和库。因此，每次你尝试回顾示例时，记得或者挑战自己在运行脚本之前切换到 **labenv**
    环境。
- en: 'If you are done working in the virtual environment for the moment and you want
    to return to your "normal" Python environment, you can deactivate the virtual
    environment by executing the following command:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你目前已经完成了虚拟环境中的工作，并且想返回到你的“正常” Python 环境，可以通过执行以下命令来停用虚拟环境：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This puts you back in the system's default Python interpreter with all its installed
    libraries and dependencies.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这会将你带回系统默认的 Python 解释器，并保留其所有已安装的库和依赖项。
- en: 'If you are using more than one virtual or physical machine for the investigations,
    the virtual environments can help you to keep your libraries and packages synced
    with all these workplaces. In order to ensure that your environments are consistent,
    it''s a good idea to "freeze" the current state of environment packages. To do
    this, just run:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在多个虚拟机或物理机上进行调查，虚拟环境可以帮助你保持所有工作站的库和包同步。为了确保你的环境一致，最好“冻结”当前环境包的状态。为此，只需运行：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will create a `requirements.txt` file, which contains a simple list of
    all the packages in the current environment and their respective versions. If
    you want to now install the same packages using the same version on a different
    machine, just copy the `requirements.txt` file to the desired machine, create
    the **labenv** environment as described earlier and execute the following command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个 `requirements.txt` 文件，文件中包含当前环境中所有包及其各自版本的简单列表。如果你想在另一台机器上安装相同版本的相同包，只需将
    `requirements.txt` 文件复制到目标机器，创建如前所述的 **labenv** 环境并执行以下命令：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, you will have consistent Python environments on all the machines and don't
    need to worry about different library versions or other dependencies.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将在所有机器上拥有一致的 Python 环境，无需担心不同的库版本或其他依赖项。
- en: After we have created the Ubuntu virtual machine with our dedicated lab environment,
    we are nearly ready to start our first forensic analysis. But before that, we
    need more knowledge of the helpful Python libraries and backgrounds. Therefore,
    we will start with an introduction to the Python **ctypes** in the following section.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建了带有专用实验室环境的 Ubuntu 虚拟机后，我们几乎准备好开始第一次取证分析。但在此之前，我们需要更多关于有用的 Python 库和背景知识。因此，我们将从下面的
    Python **ctypes** 介绍开始。
- en: Introduction to Python ctypes
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python ctypes 介绍
- en: According to the official Python documentation, **ctypes** is a foreign function
    library that provides C compatible data types and allows calling functions in
    DLLs or shared libraries. A foreign function library means that the Python code
    can call C functions using only Python, without requiring special or custom-made
    extensions.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 根据官方 Python 文档，**ctypes** 是一个外部函数库，提供 C 兼容的数据类型，并允许调用 DLL 或共享库中的函数。外部函数库意味着
    Python 代码可以仅使用 Python 调用 C 函数，而无需特殊或定制的扩展。
- en: This module is one of the most powerful libraries available to the Python developer.
    The **ctypes** library enables you to not only call functions in dynamically linked
    libraries (as described earlier), but can also be used for low-level memory manipulation.
    It is important that you understand the basics of how to use the **ctypes** library
    as it will be used for many examples and real-world cases throughout the book.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块是 Python 开发者可以使用的最强大的库之一。**ctypes** 库不仅可以用于调用动态链接库中的函数（如前所述），还可以用于低级别的内存操作。了解如何使用
    **ctypes** 库的基础非常重要，因为它将在本书的许多示例和实际案例中使用。
- en: In the following sections, we will introduce some basic features of Python **ctypes**
    and how to use them.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将介绍一些 Python **ctypes** 的基本特性以及如何使用它们。
- en: Working with Dynamic Link Libraries
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用动态链接库
- en: Python **ctypes** export the `cdll` and on Windows `windll` or respectively
    `oledll` objects, to load the requested dynamic link libraries. A dynamically
    linked library is a compiled binary that is linked at runtime to the executable
    main process. On Windows platforms, these binaries are called **Dynamic Link Libraries**
    (**DLL**) and on Linux, they are called **shared objects** (**SO**). You can load
    these linked libraries by accessing them as the attributes of the `cdll`, `windll`
    or `oledll` objects. Now, we will demonstrate a very brief example for Windows
    and Linux to get the current time directly out of the `time` function in `libc`
    (this library defines the system calls and other basic facilities such as `open`,
    `printf`, or `exit`).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Python的**ctypes**导出了`cdll`和Windows上的`windll`或`oledll`对象，用于加载请求的动态链接库。动态链接库是一个在运行时与可执行主进程链接的已编译二进制文件。在Windows平台上，这些二进制文件被称为**动态链接库**（**DLL**），在Linux上，则称为**共享对象**（**SO**）。你可以通过将这些链接库作为`cdll`、`windll`或`oledll`对象的属性来加载它们。现在，我们将演示一个简短的例子，展示如何在Windows和Linux上直接通过`time`函数获取当前时间（该函数位于`libc`库中，这个库定义了系统调用和其他基本设施，如`open`、`printf`或`exit`）。
- en: 'Note that in the case of Windows, `msvcrt` is the MS standard C library containing
    most of the standard C functions and uses the `cdecl` calling convention (on Linux
    systems, the similar library would be `libc.so.6`):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在Windows的情况下，`msvcrt`是包含大多数标准C函数的MS标准C库，并使用`cdecl`调用约定（在Linux系统上，相似的库是`libc.so.6`）：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Windows appends the usual `.dll` file suffix automatically. On Linux, it is
    required to specify the filename, including the extension, to load the chosen
    library. Either the `LoadLibrary()` method of the DLL loaders should be used or
    you should load the library by creating an instance of `CDLL` by calling the constructor,
    as shown in the following code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Windows会自动附加常见的`.dll`文件后缀。在Linux上，必须指定文件名，包括扩展名，以加载所选的库。可以使用DLL加载器的`LoadLibrary()`方法，或者通过调用构造函数创建`CDLL`实例来加载库，如下代码所示：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As shown in these two examples, it is very easy to be able to call to a dynamic
    library and use a function that is exported. You will be using this technique
    many times throughout the book, so it is important that you understand how it
    works.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如这两个示例所示，调用动态库并使用导出的函数非常简单。你将在整本书中多次使用这种技术，因此理解它的工作原理非常重要。
- en: C data types
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C数据类型
- en: 'When looking at the two examples from the earlier section in detail, you can
    see that we use `None` as one of the parameters for a dynamically linked C library.
    This is possible because `None`, `integers`, `longs`, `byte strings`, and `unicode
    strings` are the native Python objects that can be directly used as the parameters
    in these function calls. `None` is passed as a C, `NULL pointer`, `byte strings`,
    and `unicode strings` are passed as pointers to the memory block that contains
    their data (`char *` or `wchar_t *`). Python `integers` and Python `longs` are
    passed as the platform''s default C `int type`, their value is masked to fit into
    the C type. A complete overview of the Python types and their corresponding ctype
    types can be seen in *Table 1*:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 详细查看前一部分的两个示例时，你会发现我们在动态链接的C库中使用了`None`作为其中一个参数。这是可能的，因为`None`、`integers`、`longs`、`byte
    strings`和`unicode strings`是可以直接作为这些函数调用参数使用的本地Python对象。`None`被当作C语言的`NULL指针`，`byte
    strings`和`unicode strings`作为指向包含数据的内存块的指针（`char *`或`wchar_t *`）传递。Python的`integers`和`longs`作为平台的默认C语言`int类型`传递，它们的值会被掩码以适应C类型。Python类型及其对应的ctype类型的完整概览可以见于*表1*：
- en: '| ctypes type | C type | Python type |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| ctypes类型 | C类型 | Python类型 |'
- en: '| --- | --- | --- |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| c_bool ([https://docs.python.org/2/library/ctypes.html#ctypes.c_bool](https://docs.python.org/2/library/ctypes.html#ctypes.c_bool))
    | _Bool | bool (1) |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| c_bool ([https://docs.python.org/2/library/ctypes.html#ctypes.c_bool](https://docs.python.org/2/library/ctypes.html#ctypes.c_bool))
    | _Bool | 布尔值（1） |'
- en: '| c_char ([https://docs.python.org/2/library/ctypes.html#ctypes.c_char](https://docs.python.org/2/library/ctypes.html#ctypes.c_char))
    | char | 1-character string |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| c_char ([https://docs.python.org/2/library/ctypes.html#ctypes.c_char](https://docs.python.org/2/library/ctypes.html#ctypes.c_char))
    | char | 1个字符的字符串 |'
- en: '| c_wchar ([https://docs.python.org/2/library/ctypes.html#ctypes.c_wchar](https://docs.python.org/2/library/ctypes.html#ctypes.c_wchar))
    | wchar_t | 1-character unicode string |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| c_wchar ([https://docs.python.org/2/library/ctypes.html#ctypes.c_wchar](https://docs.python.org/2/library/ctypes.html#ctypes.c_wchar))
    | wchar_t | 1个字符的Unicode字符串 |'
- en: '| c_byte ([https://docs.python.org/2/library/ctypes.html#ctypes.c_byte](https://docs.python.org/2/library/ctypes.html#ctypes.c_byte))
    | char | int/long |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| c_byte ([https://docs.python.org/2/library/ctypes.html#ctypes.c_byte](https://docs.python.org/2/library/ctypes.html#ctypes.c_byte))
    | 字符型 | int/long |'
- en: '| c_ubyte ([https://docs.python.org/2/library/ctypes.html#ctypes.c_ubyte](https://docs.python.org/2/library/ctypes.html#ctypes.c_ubyte))
    | unsigned char | int/long |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| c_ubyte ([https://docs.python.org/2/library/ctypes.html#ctypes.c_ubyte](https://docs.python.org/2/library/ctypes.html#ctypes.c_ubyte))
    | 无符号字符型 | int/long |'
- en: '| c_short ([https://docs.python.org/2/library/ctypes.html#ctypes.c_short](https://docs.python.org/2/library/ctypes.html#ctypes.c_short))
    | short | int/long |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| c_short ([https://docs.python.org/2/library/ctypes.html#ctypes.c_short](https://docs.python.org/2/library/ctypes.html#ctypes.c_short))
    | 短整型 | int/long |'
- en: '| c_ushort ([https://docs.python.org/2/library/ctypes.html#ctypes.c_ushort](https://docs.python.org/2/library/ctypes.html#ctypes.c_ushort))
    | unsigned short | int/long |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| c_ushort ([https://docs.python.org/2/library/ctypes.html#ctypes.c_ushort](https://docs.python.org/2/library/ctypes.html#ctypes.c_ushort))
    | 无符号短整型 | int/long |'
- en: '| c_int ([https://docs.python.org/2/library/ctypes.html#ctypes.c_int](https://docs.python.org/2/library/ctypes.html#ctypes.c_int))
    | int | int/long |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| c_int ([https://docs.python.org/2/library/ctypes.html#ctypes.c_int](https://docs.python.org/2/library/ctypes.html#ctypes.c_int))
    | 整型 | int/long |'
- en: '| c_uint ([https://docs.python.org/2/library/ctypes.html#ctypes.c_uint](https://docs.python.org/2/library/ctypes.html#ctypes.c_uint))
    | unsigned int | int/long |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| c_uint ([https://docs.python.org/2/library/ctypes.html#ctypes.c_uint](https://docs.python.org/2/library/ctypes.html#ctypes.c_uint))
    | 无符号整型 | int/long |'
- en: '| c_long ([https://docs.python.org/2/library/ctypes.html#ctypes.c_long](https://docs.python.org/2/library/ctypes.html#ctypes.c_long))
    | long | int/long |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| c_long ([https://docs.python.org/2/library/ctypes.html#ctypes.c_long](https://docs.python.org/2/library/ctypes.html#ctypes.c_long))
    | 长整型 | int/long |'
- en: '| c_ulong ([https://docs.python.org/2/library/ctypes.html#ctypes.c_ulong](https://docs.python.org/2/library/ctypes.html#ctypes.c_ulong))
    | unsigned long | int/long |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| c_ulong ([https://docs.python.org/2/library/ctypes.html#ctypes.c_ulong](https://docs.python.org/2/library/ctypes.html#ctypes.c_ulong))
    | 无符号长整型 | int/long |'
- en: '| c_longlong ([https://docs.python.org/2/library/ctypes.html#ctypes.c_longlong](https://docs.python.org/2/library/ctypes.html#ctypes.c_longlong))
    | __int64 or long long | int/long |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| c_longlong ([https://docs.python.org/2/library/ctypes.html#ctypes.c_longlong](https://docs.python.org/2/library/ctypes.html#ctypes.c_longlong))
    | __int64或长长整型 | int/long |'
- en: '| c_ulonglong ([https://docs.python.org/2/library/ctypes.html#ctypes.c_ulonglong](https://docs.python.org/2/library/ctypes.html#ctypes.c_ulonglong))
    | unsigned __int64 or unsigned long long | int/long |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| c_ulonglong ([https://docs.python.org/2/library/ctypes.html#ctypes.c_ulonglong](https://docs.python.org/2/library/ctypes.html#ctypes.c_ulonglong))
    | 无符号__int64或无符号长长整型 | int/long |'
- en: '| c_float ([https://docs.python.org/2/library/ctypes.html#ctypes.c_float](https://docs.python.org/2/library/ctypes.html#ctypes.c_float))
    | float | float |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| c_float ([https://docs.python.org/2/library/ctypes.html#ctypes.c_float](https://docs.python.org/2/library/ctypes.html#ctypes.c_float))
    | 浮动型 | 浮动型 |'
- en: '| c_double ([https://docs.python.org/2/library/ctypes.html#ctypes.c_double](https://docs.python.org/2/library/ctypes.html#ctypes.c_double))
    | double | float |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| c_double ([https://docs.python.org/2/library/ctypes.html#ctypes.c_double](https://docs.python.org/2/library/ctypes.html#ctypes.c_double))
    | 双精度型 | 浮动型 |'
- en: '| c_longdouble ([https://docs.python.org/2/library/ctypes.html#ctypes.c_longdouble](https://docs.python.org/2/library/ctypes.html#ctypes.c_longdouble))
    | long double | float |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| c_longdouble ([https://docs.python.org/2/library/ctypes.html#ctypes.c_longdouble](https://docs.python.org/2/library/ctypes.html#ctypes.c_longdouble))
    | 长双精度 | 浮动型 |'
- en: '| c_char_p ([https://docs.python.org/2/library/ctypes.html#ctypes.c_char_p](https://docs.python.org/2/library/ctypes.html#ctypes.c_char_p))
    | char * (NUL terminated) | string or None |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| c_char_p ([https://docs.python.org/2/library/ctypes.html#ctypes.c_char_p](https://docs.python.org/2/library/ctypes.html#ctypes.c_char_p))
    | 字符串 *（以NUL结尾） | 字符串或None |'
- en: '| c_wchar_p ([https://docs.python.org/2/library/ctypes.html#ctypes.c_wchar_p](https://docs.python.org/2/library/ctypes.html#ctypes.c_wchar_p))
    | wchar_t * (NUL terminated) | unicode or None |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| c_wchar_p ([https://docs.python.org/2/library/ctypes.html#ctypes.c_wchar_p](https://docs.python.org/2/library/ctypes.html#ctypes.c_wchar_p))
    | wchar_t *（以NUL结尾） | unicode或None |'
- en: '| c_void_p ([https://docs.python.org/2/library/ctypes.html#ctypes.c_void_p](https://docs.python.org/2/library/ctypes.html#ctypes.c_void_p))
    | void * | int/long or None |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| c_void_p ([https://docs.python.org/2/library/ctypes.html#ctypes.c_void_p](https://docs.python.org/2/library/ctypes.html#ctypes.c_void_p))
    | void * | int/long或None |'
- en: 'Table 1: Fundamental Data Types'
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 表1：基本数据类型
- en: 'This table is very helpful because all the Python types except `integers`,
    `strings`, and `unicode strings` have to be wrapped in their corresponding ctypes
    type so that they can be converted to the required C data type in the linked library
    and not throw the `TypeError` exceptions, as shown in the following code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这张表格非常有用，因为除 `整数`、`字符串` 和 `unicode 字符串` 外，所有 Python 类型都必须包装在相应的 ctypes 类型中，以便它们可以转换为链接库中所需的
    C 数据类型，而不会抛出 `TypeError` 异常，如以下代码所示：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Defining Unions and Structures
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义联合体和结构体
- en: '**Unions** and **Structures** are important data types because they are frequently
    used throughout the `libc` on Linux and also in the Microsoft Win32 API.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**联合体**和**结构体**是重要的数据类型，因为它们在 Linux 上的 `libc` 以及 Microsoft Win32 API 中经常被使用。'
- en: 'Unions are simply a group of variables, which can be of the same or different
    data types, where all of its members share the same memory location. By storing
    variables in this way, unions allow you to specify the same value in different
    types. For the upcoming example, we will change from the interactive Python shell
    to the atom editor on our Ubuntu lab environment. You just need to open atom editor,
    type in the following code, and save it under the name `new_evidence.py`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 联合体只是一个变量的集合，这些变量可以是相同或不同的数据类型，所有成员共享相同的内存位置。通过这种方式存储变量，联合体允许你以不同的类型指定相同的值。对于接下来的示例，我们将从交互式
    Python shell 切换到 Ubuntu 实验环境中的 atom 编辑器。你只需要打开 atom 编辑器，输入以下代码，并将其保存为 `new_evidence.py`：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you assign the `evidence` union''s member variable `evidence_int` a value
    of `42`, you can then use the `evidence_char` member to display the character
    representation of that number, as shown in the following example:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你为 `evidence` 联合体的成员变量 `evidence_int` 赋值 `42`，你就可以使用 `evidence_char` 成员来显示该数字的字符表示，如下例所示：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you can see in the preceding example, by assigning the union a single value,
    you get three different representations of that value. For `int` and `long`, the
    displayed output is obvious but for the `evidence_char` variable, it could be
    a bit confusing. In this case, `'*'` is the ASCII character with the value of
    the equivalent of decimal `42`. The `evidence_char` member variable is a good
    example of how to define an `array` in ctypes. In ctypes, an array is defined
    by multiplying a type by the number of elements that you want to allocate in the
    array. In this example, a four-element character array was defined for the member
    variable `evidence_char`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在前面的示例中看到的，通过为联合体分配一个值，你可以得到该值的三种不同表示方式。对于 `int` 和 `long`，显示的输出是显而易见的，但对于
    `evidence_char` 变量来说，可能会有点令人困惑。在这种情况下，`'*'` 是 ASCII 字符，其值等于十进制的 `42`。`evidence_char`
    成员变量是如何在 ctypes 中定义 `array` 的一个很好例子。在 ctypes 中，数组是通过将类型乘以你想要在数组中分配的元素数量来定义的。在这个例子中，为成员变量
    `evidence_char` 定义了一个四元素的字符数组。
- en: 'A structure is very similar to unions, but the members do not share the same
    memory location. You can access any of the member variables in the structure using
    dot notation, such as `case.name`. This would access the `name` variable contained
    in the `case` structure. The following is a very brief example of how to create
    a `structure` (or **struct,** as they are often called) with three members: `name`,
    `number`, and `investigator_name` so that all can be accessed by the dot notation:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 结构体与联合体非常相似，但成员之间不共享同一内存位置。你可以使用点符号访问结构体中的任何成员变量，比如 `case.name`。这将访问 `case`
    结构体中的 `name` 变量。以下是一个非常简短的示例，演示如何创建一个包含三个成员的 `结构体`（或称 **struct**）：`name`、`number`
    和 `investigator_name`，以便通过点符号访问它们：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Tip
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从你在 [http://www.packtpub.com](http://www.packtpub.com) 的帐户下载所有你购买的 Packt
    Publishing 书籍的示例代码文件。如果你是在其他地方购买的这本书，你可以访问 [http://www.packtpub.com/support](http://www.packtpub.com/support)
    并注册，让文件直接通过电子邮件发送给你。
- en: Summary
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: 'In the first chapter, we created our lab environment: a virtual machine running
    **Ubuntu 14.04.2 LTS**. This step is really important as you can now create snapshots
    before working on real evidence and are able to roll back to a clean machine state
    after finishing the investigation. This can be helpful, especially, when working
    with compromised system backups, where you want to be sure that your system is
    clean when working on a different case afterwards.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一章，我们创建了实验环境：一个运行**Ubuntu 14.04.2 LTS**的虚拟机。这个步骤非常重要，因为你现在可以在处理真实证据之前创建快照，并且在调查完成后可以恢复到一个干净的机器状态。这尤其在处理被破坏的系统备份时非常有用，这样你可以确保在处理不同的案例时系统是干净的。
- en: In the second part of this chapter, we demonstrated how to work with Python's
    **virtual environments (virtualenv)** that will be used and extended throughout
    the book.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第二部分，我们演示了如何使用Python的**虚拟环境（virtualenv）**，这些环境将在全书中被使用和扩展。
- en: In the last section of this chapter, we introduced the Python **ctypes** to
    you, which is a very powerful library available to the Python developer. With
    those **ctypes**, you are not only able to call functions in the dynamically linked
    libraries (available Microsoft Win32 APIs or common Linux shared objects), but
    they can also be used for low-level memory manipulation.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后一节，我们向你介绍了Python的**ctypes**，这是一个非常强大的库，供Python开发者使用。通过这些**ctypes**，你不仅能够调用动态链接库中的函数（如微软Win32
    API或常见的Linux共享对象），还可以用于低级内存操作。
- en: After completing this chapter, you will have a basic environment created to
    be used for the rest of the book, and you will also understand the fundamentals
    of Python **ctypes** that will be helpful in some of the following chapters.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，你将创建一个基本环境，供本书后续章节使用，同时你也将理解Python **ctypes**的基础知识，这在接下来的章节中将非常有帮助。
