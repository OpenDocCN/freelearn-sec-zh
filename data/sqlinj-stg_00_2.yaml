- en: '*Chapter 1*: Structured Query Language for SQL Injection'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第一章*：用于 SQL 注入的结构化查询语言'
- en: 'Today''s world relies on the concept of cyberspace every day: the internet
    allows people all around the globe to connect to computers in any part of the
    world. This enables instant fruition of many services that rely on a plethora
    of technologies, protocols, and mechanisms that constitute the basis for whatever
    is available on the World Wide Web. Unfortunately, the theme of security is relevant
    for this intricate web of connections and services in the same way it is for the
    real world.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当今世界每天都依赖于网络空间的概念：互联网使全球各地的人们能够连接到世界任何地方的计算机。这使得通过依赖各种技术、协议和机制提供的服务能够即时使用，这些技术、协议和机制构成了万维网上一切可用资源的基础。不幸的是，安全问题对于这个复杂的连接和服务网络来说，和现实世界一样重要。
- en: Malicious agents perform attacks against computers worldwide every day, mostly
    just for personal gain or advantage. By exploiting online applications and services,
    in fact, it may be possible to gain control of computers or entire networks, thereby
    taking advantage of specific of the intrinsic vulnerabilities of some technologies,
    protocols, frameworks, or just applications. One of the most common – and notorious
    – ways to do so is through SQL injection, which is a specific type of attack that
    tries to exploit the syntax of a language used in databases – **SQL**, which stands
    for **Structured Query Language** – in order to access otherwise unobtainable
    information present on a database, including the ones responsible for account
    authentication, which contain usernames and passwords used to access services.
    Despite being a well-known attack, vulnerable applications are still present today,
    hinting to the fact that, sometimes, security in the context of application development
    is not considered enough.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意代理每天在全球范围内对计算机发动攻击，主要是为了个人利益或优势。通过利用在线应用和服务，实际上有可能获得计算机或整个网络的控制，从而利用某些技术、协议、框架或应用的内在漏洞。最常见且臭名昭著的方式之一就是通过
    SQL 注入，它是一种特定类型的攻击，试图利用数据库语言的语法——**SQL**，即**结构化查询语言**——以访问通常无法获取的数据库信息，包括负责账户认证的数据库，其中包含用于访问服务的用户名和密码。尽管
    SQL 注入是一种众所周知的攻击方式，但易受攻击的应用程序仍然存在，暗示着在应用开发的安全性方面，有时并没有得到足够的重视。
- en: This book aims to give insight on the matter of SQL injection by explaining
    what it is all about both in terms of theory and practice.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在通过从理论和实践两个方面解释 SQL 注入，深入探讨这个问题。
- en: This chapter serves as a theoretical introduction to the matter, describing
    at a high-level what SQL is, what it is used for, and its possible weaknesses
    that lead to SQL injection. This theoretical overview is crucial in order to understand
    the concepts behind SQL injection that will be further explored in the next chapter.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章作为对这一问题的理论性介绍，高层次地描述了 SQL 是什么，它的用途，以及导致 SQL 注入的可能弱点。这一理论概述对于理解后续章节将进一步探讨的
    SQL 注入背后的概念至关重要。
- en: 'After introducing the concepts of databases, database management systems and
    models, queries, and SQL specifically, aspects of syntax and logic will be covered,
    quickly showing the main constructs and items that can lead to security weaknesses
    in the use of SQL, ultimately leading to the core matter: SQL injection.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍了数据库、数据库管理系统和模型、查询以及 SQL 特定概念后，将涉及语法和逻辑的各个方面，快速展示可能导致 SQL 使用中安全漏洞的主要构造和要素，最终引出核心问题：SQL
    注入。
- en: 'In this chapter, the following topics will be covered:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: '**An overview of SQL – a relational query language**: A preliminary overview
    of SQL, our main language of reference that SQL injection is traditionally based
    on, and the relational model versus other DBMS models.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQL 概述——一种关系查询语言**：对 SQL 的初步概述，SQL 注入通常基于这种语言，我们的主要参考语言，并与其他 DBMS 模型的关系模型进行比较。'
- en: '**Syntax and logic of SQL**: An explanation of the main concepts and constructs
    behind SQL, some of which could be exploited by malicious attackers.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQL 的语法和逻辑**：解释 SQL 背后的主要概念和构造，其中一些可能被恶意攻击者利用。'
- en: '**Security implications of SQL**: A brief introduction to the concept of security
    in SQL and its use in applications.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQL 的安全隐患**：对 SQL 中安全概念的简要介绍及其在应用中的使用。'
- en: '**Weakness in the use of SQL**: An explanation of the main pitfalls an application
    relying on SQL can have, highlighting some general advice in secure development.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQL使用中的弱点**：解释依赖SQL的应用程序可能遇到的主要陷阱，并强调在安全开发中的一些通用建议。'
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter and the next, the topics we will cover will mostly be theoretical.
    However, we suggest that you read the SQL technical documentation. Here, we have
    provided, for reference, the MySQL, Oracle, and Microsoft SQL Server documentation:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章及接下来的章节中，我们讨论的主题大多是理论性的。然而，我们建议你阅读SQL技术文档。为了参考，我们提供了MySQL、Oracle和Microsoft
    SQL Server的文档链接：
- en: '[https://dev.mysql.com/doc/refman/8.0/en/](https://dev.mysql.com/doc/refman/8.0/en/)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://dev.mysql.com/doc/refman/8.0/en/](https://dev.mysql.com/doc/refman/8.0/en/)'
- en: '[https://docs.oracle.com/en/database/oracle/oracle-database/index.html](https://docs.oracle.com/en/database/oracle/oracle-database/index.html)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.oracle.com/en/database/oracle/oracle-database/index.html](https://docs.oracle.com/en/database/oracle/oracle-database/index.html)'
- en: '[https://docs.microsoft.com/en-us/sql/sql-server/?view=sql-server-ver15](https://docs.microsoft.com/en-us/sql/sql-server/?view=sql-server-ver15)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/sql/sql-server/?view=sql-server-ver15](https://docs.microsoft.com/en-us/sql/sql-server/?view=sql-server-ver15)'
- en: An overview of SQL – a relational query language
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL概述 – 一种关系型查询语言
- en: One of the most common ways to keep data memorized in computer systems is by
    relying on **databases**. Databases can be seen as large software containers that
    can hold lots of information in a structured and accessible way, in order to optimize
    how to store data and access their operations.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机系统中，最常见的数据存储方式之一是依赖于**数据库**。数据库可以被视为大型软件容器，能够以结构化和可访问的方式存储大量信息，从而优化数据的存储和访问操作。
- en: Depending on the approach and model used, the way in which this is achieved
    can vary in terms of implementation. One of the most common ways is to use the
    relational model, which is based on relational algebra, for which data is a collected
    as a series of records that describe the relationships that exist among objects.
    SQL is a query language that is based on such concepts, and it is widely adopted
    in many database systems. This section will deal with these topics in depth by
    first explaining database management systems, relational databases, and SQL.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 根据使用的方式和模型，达成这一目标的实现方式可能会有所不同。最常见的方法之一是使用关系模型，该模型基于关系代数，数据作为一系列记录被收集，描述了对象之间存在的关系。SQL是一种基于这些概念的查询语言，并且在许多数据库系统中得到广泛应用。本节将深入讨论这些主题，首先解释数据库管理系统、关系型数据库和SQL。
- en: Database management systems and relational databases
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库管理系统和关系型数据库
- en: The implementation of a database, as we mentioned earlier, relies on an underlying
    system, or a **database nanagement system** (**DBMS**). A DBMS is basically a
    piece of software responsible for storing, accessing, manipulating and, in general,
    managing data through a specific definition of the collected and managed information.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，数据库的实现依赖于底层系统，或称**数据库管理系统**（**DBMS**）。DBMS本质上是一款负责存储、访问、操作以及一般性地管理数据的软件，通过对收集和管理信息的特定定义来实现这些功能。
- en: For the purpose of this book, we will now divide database systems into two large
    families to better understand the differences between them. We can distinguish
    between database models in terms of relational databases and non-relational databases
    due to the relevance of the relational model in data management.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解它们之间的差异，本书现在将数据库系统分为两个大类。我们可以根据关系型模型在数据管理中的相关性，区分关系型数据库和非关系型数据库。
- en: Relational databases
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关系型数据库
- en: 'Relational databases have been widely considered as a standard due to their
    many advantages. Data is collected in tables, in which rows represent objects,
    memorized as records, and columns represent their attributes. The name is derived
    from the way in which data can be correlated and connected, that is, through relations
    based on common attributes among tables. Thus, the concept of relational algebra
    becomes relevant as it describes the way in which, through a structured procedural
    language, data tables can be managed. SQL is the most popular representative of
    this model as it takes advantage of most of the concepts of relational algebra,
    thus providing a model that is easy to use by anyone without any coding experience,
    while maintaining its overall efficiency:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 关系型数据库由于其诸多优点，已被广泛认为是标准。数据以表格的形式收集，其中行表示对象，以记录的形式存储，列表示其属性。其名称来源于数据可以通过表格之间的公共属性进行关联和连接的方式，即通过关系。因此，关系代数的概念变得相关，它描述了通过结构化过程语言，如何管理数据表。SQL
    是该模型最流行的代表，它利用了关系代数的大部分概念，从而提供了一个任何人都可以轻松使用的模型，即使没有编程经验，同时保持其整体效率：
- en: '![Figure 1.1 – A simple relational schema made up of three tables describing
    cars and owners, with the IDs (unique) put into a relationship'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.1 – 由三张表组成的简单关系型模式，描述了汽车和车主的关系，并将唯一的ID放入关系中](image/B15632_01_001.jpg)'
- en: '](image/B15632_01_001.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15632_01_002.jpg)'
- en: Figure 1.1 – A simple relational schema made up of three tables describing cars
    and owners, with the IDs (unique) put into a relationship
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – 由三张表组成的简单关系型模式，描述了汽车和车主的关系，并将唯一的ID放入关系中
- en: Non-relational databases
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 非关系型数据库
- en: '**No-rel**, which stands for **non-relational**, databases are a family of
    DBMS models considered as an alternative to the relational model and are usually
    much more prominent among database systems. Originally, the term NoSQL was used
    to define this family of systems, but it was considered misleading: some of the
    first attempts at building non-relational databases actually used some concepts
    of the relational model. No-rel databases include many models, some of which are
    as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**非关系型（No-rel）**数据库是被视为关系型模型替代方案的一类数据库管理系统（DBMS）模型，通常在数据库系统中占据更重要的位置。最初，NoSQL
    这个术语用于定义这一类系统，但由于其误导性，后来被放弃：一些最早尝试构建非关系型数据库的努力实际上使用了关系模型的一些概念。非关系型数据库包含许多模型，其中一些如下：'
- en: '**Network databases** model the data as connected nodes in a network:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络数据库**将数据建模为网络中的连接节点：'
- en: '![Figure 1.2 – A simple network schema to represent ownership relations between
    owners and cars'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.2 – 一个简单的网络模式，用于表示车主和汽车之间的所有权关系](image/B15632_01_003.jpg)'
- en: '](image/B15632_01_002.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15632_01_004.jpg)'
- en: Figure 1.2 – A simple network schema to represent ownership relations between
    owners and cars
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – 一个简单的网络模式，用于表示车主和汽车之间的所有权关系
- en: '**Graph-based databases** highlight the connections among data using a graph-like
    navigable structure:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于图的数据库**通过图形结构突出显示数据之间的连接，提供可导航的结构：'
- en: '![Figure 1.3 – The same ownership relation as in the relational example, this
    time represented in a graph-based model schema'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.3 – 与关系型示例中相同的所有权关系，这次在基于图的模型模式中表示](image/B15632_01_003.jpg)'
- en: '](image/B15632_01_003.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15632_01_003.jpg)'
- en: Figure 1.3 – The same ownership relation as in the relational example, this
    time represented in a graph-based model schema
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – 与关系型示例中相同的所有权关系，这次在基于图的模型模式中表示
- en: '**Object-oriented databases** model data as objects, in a similar fashion as
    in programming languages such as Java:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**面向对象数据库**将数据建模为对象，类似于 Java 等编程语言中的方式：'
- en: '![Figure 1.4 – The ownership relationship represented in an object-oriented
    model schema'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.4 – 在面向对象模型模式中表示的所有权关系](image/B15632_01_002.jpg)'
- en: '](image/B15632_01_004.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15632_01_003.jpg)'
- en: Figure 1.4 – The ownership relationship represented in an object-oriented model
    schema
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – 在面向对象模型模式中表示的所有权关系
- en: '**Document-based databases** describe data within documents containing key-value
    pairs, specify the way in which data is memorized and managed, and provide a flexible
    approach that does not rely on a defined schema. Document-based models can usually
    include embedded objects as collections within a single key, as shown in the following
    image:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于文档的数据库**描述包含键值对的文档中的数据，指定数据的存储和管理方式，并提供一种不依赖于定义模式的灵活方法。基于文档的模型通常可以将嵌入的对象作为集合包含在单一键中，如下图所示：'
- en: '![Figure 1.5 – A document-based model schema that can represent the ownership
    relationship'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.5 – 一种基于文档的模型架构，可以表示所有权关系'
- en: '](image/B15632_01_005.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15632_01_005.jpg)'
- en: Figure 1.5 – A document-based model schema that can represent the ownership
    relationship
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – 一种基于文档的模型架构，可以表示所有权关系
- en: Despite the name, SQL injection, in some form or another, might affect all existing
    database models. We will now focus on relational databases and SQL.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管名字中有“SQL注入”一词，但实际上，SQL注入以某种形式可能影响所有现有的数据库模型。我们现在将重点讨论关系型数据库和 SQL。
- en: SQL – Structured Query Language
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL – 结构化查询语言
- en: SQL stands for Structured Query Language, and it is the main tool used to access,
    navigate, and manage a relational database. SQL provides a well-structured language
    that is easy to understand, thanks to its natural language-like commands and the
    clarity of the operations it executes corresponding to specific language strings,
    which will be described in the following sections.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 代表结构化查询语言，它是访问、导航和管理关系型数据库的主要工具。SQL 提供了一种结构化良好的语言，易于理解，得益于其类自然语言的命令和操作的清晰性，这些操作与特定的语言字符串相对应，接下来的章节将对此进行描述。
- en: SQL has many different implementations, depending on the system it resides on,
    with some slight differences, some of which will be explained in the next chapter
    in more detail, as they are directly relevant for the SQL injection attack. Let's
    take a look at the most popular SQL implementations.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 有许多不同的实现，取决于其所在的系统，这些实现之间存在一些细微的差异，部分差异将在下一章中更详细地解释，因为它们与 SQL 注入攻击直接相关。让我们来看看最流行的
    SQL 实现。
- en: MySQL
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MySQL
- en: MySQL is an open source version of SQL that's used in many web application frameworks
    and famous websites. It is considered one of the main representatives of SQL technologies,
    as well as an overall well-performing implementation.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 是 SQL 的开源版本，广泛应用于许多 Web 应用框架和知名网站。它被认为是 SQL 技术的主要代表之一，也是一个整体表现良好的实现。
- en: MySQL is considered probably the best implementation in terms of open source
    SQL engines, and it is often taken as a reference for SQL syntax in general.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 被认为是开源 SQL 引擎中最好的实现之一，通常作为 SQL 语法的参考。
- en: Here, we will list some peculiarities to remember about MySQL.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将列出一些关于 MySQL 的特别之处。
- en: 'There is more than one way to insert comments in terms of character sequences:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在字符序列方面，插入注释的方式不止一种：
- en: '**#**'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**#**'
- en: '**/*comment*/**'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**/*comment*/**'
- en: '**--** (This requires a blank space followed by any character in order to be
    interpreted as a comment. In practical tests, we use the combination **-- -**.)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**--**（这需要一个空格，后面跟任何字符，才能被解释为注释。在实际测试中，我们使用组合 **-- -**。）'
- en: '**;%00** (**%00** is the null character, here shown in URL encoding. This is
    an unofficial method for inserting comments as it''s not shown in the official
    documentation.)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**;%00**（**%00** 是空字符，在这里以 URL 编码的形式显示。这是一种非官方的注释插入方法，因为它没有出现在官方文档中。）'
- en: '**`** (Reverse single quote, another unofficial method.)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`**（反引号，另一种非官方方法）'
- en: 'In general, MySQL systems have two default databases that are always present
    in the schema:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，MySQL 系统中有两个默认数据库，它们始终存在于架构中：
- en: '**mysql** (only available to privileged users)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**mysql**（仅对特权用户可用）'
- en: '**information_schema** (only available from MySQL version 5 onward)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**information_schema**（仅从 MySQL 版本 5 开始提供）'
- en: MySQL supports functions and variables such as **VERSION()** and **@@VERSION**
    to retrieve MySQL server versioning.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 支持一些函数和变量，如 **VERSION()** 和 **@@VERSION**，用于获取 MySQL 服务器的版本信息。
- en: SQLite
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQLite
- en: SQLite provides a different approach by presenting an implementation that is
    directly embedded in the application code, without the client-server architecture
    being used. While it is recommended for lightweight applications, such as mobile
    apps, it may have some shortcomings due to some intrinsic simplifications.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 提供了另一种方法，它将实现直接嵌入应用程序代码中，而不使用客户端-服务器架构。虽然它推荐用于轻量级应用，如移动应用，但由于一些内在的简化，它可能存在一些缺点。
- en: 'The main peculiarity about SQLite is that it stores information within a SQLite
    database file, without requiring the client-server infrastructure. Thus, being
    standalone, it''s best not to use it for sensitive operations, such as authentication,
    or, in general, storing sensitive information: anyone with access to the filesystem
    can easily get a full view of the database.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 的主要特点是，它将信息存储在 SQLite 数据库文件中，而不需要客户端-服务器架构。因此，由于它是独立运行的，最好不要将其用于敏感操作，如身份验证，或者一般来说，不应用于存储敏感信息：任何访问文件系统的人都可以轻松查看整个数据库。
- en: Oracle Database
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Oracle 数据库
- en: Oracle Database, often referred to as just Oracle, is one of the main proprietary
    SQL systems. Despite being born as a SQL relational DBMS, it started supporting
    different models over time. Thus, it is considered a multi-model DBMS.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle 数据库，通常简称为 Oracle，是主要的专有 SQL 系统之一。尽管它最初是作为一个 SQL 关系型 DBMS 诞生的，但随着时间的推移，它开始支持不同的模型。因此，它被认为是一个多模型
    DBMS。
- en: In terms of proprietary database systems, Oracle is the most popular model among
    enterprises thanks to its wide compatibility with many technologies, programming
    languages, and database models.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在专有数据库系统方面，Oracle 是企业中最受欢迎的模型，因其与许多技术、编程语言和数据库模型具有广泛的兼容性。
- en: Like MySQL, Oracle Database also has some peculiarities you need to remember
    in terms of database structure and syntax.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 和 MySQL 一样，Oracle 数据库在数据库结构和语法方面也有一些需要记住的特点。
- en: 'Unlike other database systems, Oracle Database supports only one way to insert
    comments in terms of character sequences: **--**.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他数据库系统不同，Oracle 数据库只支持通过字符序列插入注释的一种方式：**--**。
- en: 'Oracle Database systems also have two default databases:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle 数据库系统也有两个默认数据库：
- en: '**SYSTEM**'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SYSTEM**'
- en: '**SYSAUX**'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SYSAUX**'
- en: Microsoft SQL Server
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Microsoft SQL Server
- en: Microsoft SQL Server is one of the most common solutions in the enterprise world.
    It is a SQL DBMS optimized for running on the Windows Server OS, which is one
    of the most widely adopted server operating systems.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft SQL Server 是企业世界中最常见的解决方案之一。它是一个为在 Windows Server 操作系统上运行而优化的 SQL
    DBMS，而 Windows Server 操作系统是最广泛采用的服务器操作系统之一。
- en: '**Microsoft SQL Server** (**MSSQL**) also has its own share of peculiarities.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**Microsoft SQL Server**（**MSSQL**）也有自己的一些特点。'
- en: 'MSSQL supports three ways to insert comments in terms of character sequences:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: MSSQL 支持通过三种方式插入注释，形式为字符序列：
- en: '**/*comment*/**'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**/*comment*/**'
- en: '**--**'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**--**'
- en: '**%00**'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**%00**'
- en: 'MSSQL systems have many default databases that are always present in the schema:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: MSSQL 系统有许多默认的数据库，这些数据库在架构中始终存在：
- en: '**pubs**'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pubs**'
- en: '**model**'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**model**'
- en: '**msdb**'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**msdb**'
- en: '**tempdb**'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**tempdb**'
- en: '**northwind**'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**northwind**'
- en: '**information_schema** (from MSSQL Server 2000 onward)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**information_schema**（从 MSSQL Server 2000 起）'
- en: MSSQL allows the use of the **@@VERSION** command for retrieving the database
    system version.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: MSSQL 允许使用 **@@VERSION** 命令来检索数据库系统版本。
- en: SQL is, in general, a high-performance language capable of querying structured
    data. Queries follow a specific readable syntax and allow users and database managers
    to perform various operations, ranging from creating and deleting tables to extracting
    data according to specific conditions. The following section focuses on showing
    the basic SQL syntax and capabilities, setting language implementation differences
    aside for the moment, while also examining the logic behind the commands mentioned.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 通常是一种高性能的语言，能够查询结构化数据。查询遵循特定的可读语法，允许用户和数据库管理员执行各种操作，从创建和删除表到根据特定条件提取数据。以下部分重点展示了基本的
    SQL 语法和功能，暂时搁置语言实现差异，同时也将探讨所提到命令背后的逻辑。
- en: The syntax and logic of SQL
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL 的语法和逻辑
- en: 'As mentioned earlier, SQL is an easy to use and understand language capable
    of many different types of operations. Like all languages, it is based on interpreting
    command strings that are inserted with an expected syntax, with specific statements
    corresponding to one and only possible operation. SQL''s main statements can be
    of many types. Let''s take a look at the most important ones:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，SQL 是一种易于使用和理解的语言，能够执行多种不同类型的操作。像所有语言一样，它基于解释命令字符串，这些命令字符串插入时需遵循预期的语法，并且每个特定语句只对应一种操作。SQL
    的主要语句可以有许多类型。让我们来看一下最重要的几个：
- en: '**SELECT statement**: **SELECT** is the most common SQL command. Its purpose
    is to allow the database to be searched, showing the specified attributes from
    the records that satisfy (optionally) a specific condition; for example:'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SELECT 语句**：**SELECT** 是最常用的 SQL 命令。其目的是允许数据库进行查询，显示满足（可选）特定条件的记录中的指定属性；例如：'
- en: SELECT color, shape FROM objects
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SELECT color, shape FROM objects
- en: 'This statement shows the **color** and **shape** attributes of all the records
    from the **objects** table. SQL also allows for a wildcard – in this case, the
    character ***** – to make general selections:'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该语句显示了**objects**表中所有记录的**color**和**shape**属性。SQL还允许使用通配符——在本例中是字符*****——来进行一般性的选择：
- en: SELECT * FROM objects
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SELECT * FROM objects
- en: 'This statement will return all the records from **objects** table, showing
    all the attributes. This search can also be refined by adding a **WHERE** clause,
    which specifies a condition:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该语句将返回**objects**表中的所有记录，并显示所有属性。通过添加**WHERE**子句指定条件，搜索还可以进一步细化：
- en: SELECT color, shape FROM objects WHERE color='blue'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SELECT color, shape FROM objects WHERE color='blue'
- en: 'This statement will only show records with the value **blue** within the **color**
    field:'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该语句只会显示**color**字段值为**blue**的记录：
- en: '![Figure 1.6 – A SELECT query in SQL, with a view of its result'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.6 – SQL中的SELECT查询，并显示其结果'
- en: '](image/B15632_01_006.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15632_01_006.jpg)'
- en: Figure 1.6 – A SELECT query in SQL, with a view of its result
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6 – SQL中的SELECT查询，并显示其结果
- en: 'Other clauses can be utilized within a **SELECT** statement:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**SELECT**语句中可以使用其他子句：'
- en: '**- DISTINCT clause**: Used to return results without duplicates (**SELECT
    DISTINCT color FROM objects**)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**- DISTINCT子句**：用于返回没有重复的结果（**SELECT DISTINCT color FROM objects**）'
- en: '**- ORDER BY clause**: Used to order results based on an attribute (**SELECT
    * FROM objects ORDER BY color ASC** for ascending order, or **DESC** for descending
    order)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**- ORDER BY子句**：用于根据属性对结果进行排序（**SELECT * FROM objects ORDER BY color ASC**
    为升序，**DESC** 为降序）'
- en: Having a clear understanding about how the **SELECT** statement works is very
    important for mastering SQL injection. Being the most common statement, the abuse
    of its structure is the prime enabler of a SQL injection attack, allowing for
    other SQL commands to be inserted within an apparently harmless instruction. We
    will see further details of this in the next chapter.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 清楚理解**SELECT**语句的工作原理对于掌握SQL注入非常重要。作为最常见的语句，滥用其结构是SQL注入攻击的主要推动力，它允许在看似无害的指令中插入其他SQL命令。我们将在下一章进一步详细介绍这一点。
- en: '**INSERT statement**: The **INSERT** statement is used to add data to a database
    in a very simple way, that is, by specifying the values to insert into the attributes
    of choice. Let''s take a look at an example:'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**INSERT语句**：**INSERT**语句用于以非常简单的方式将数据添加到数据库中，也就是指定要插入的属性值。我们来看一个例子：'
- en: INSERT INTO objects (shape, color) VALUES (square, blue)
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: INSERT INTO objects (shape, color) VALUES (square, blue)
- en: 'The preceding statement adds new data to the database through the **square**
    and **blue** attribute values for the **shape** and **color** attributes, respectively:'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的语句通过分别为**形状**和**颜色**属性赋值**方形**和**蓝色**，将新数据添加到数据库中：
- en: '![Figure 1.7 – An INSERT query in SQL, with a view of its result'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.7 – SQL中的INSERT查询，并显示其结果'
- en: '](image/B15632_01_007.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15632_01_007.jpg)'
- en: Figure 1.7 – An INSERT query in SQL, with a view of its result
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7 – SQL中的INSERT查询，并显示其结果
- en: Alternatively, you can add data without specifying the attributes (**INSERT
    INTO objects VALUES (square, blue)**), but bear in mind that since unspecified
    attributes are set to **null**, this option is only recommended if entire records
    are inserted in the correct attribute order. The **INSERT** statement could also
    be used maliciously, for example, to insert account credentials that could be
    used by attackers to gain access to a system.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你可以在不指定属性的情况下添加数据（**INSERT INTO objects VALUES (square, blue)**），但请记住，由于未指定的属性会被设置为**null**，这种方式仅在插入的完整记录顺序正确时才推荐使用。**INSERT**语句也可能被恶意使用，例如，插入攻击者可用于获取系统访问权限的账户凭证。
- en: '**CREATE and DROP statements**: The **CREATE** and **DROP** statements are,
    as their names suggest, made to create or delete entire SQL tables or even databases.
    **DROP** has a very simple syntax, because it just deletes all the records in
    a specified table or database (**DROP TABLE objects**, **DROP DATABASE db**),
    while **CREATE** can be used in various ways, depending on the objective. Creating
    a database is similar as in the **DROP** statement, that is, just using **CREATE
    DATABASE db**, while tables obviously need specific information for the attribute''s
    creation. Referring to the **objects** example, we could use the following code:'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CREATE 和 DROP 语句**：正如它们的名字所示，**CREATE** 和 **DROP** 语句用于创建或删除整个 SQL 表，甚至是数据库。**DROP**
    语句的语法非常简单，因为它仅仅删除指定表或数据库中的所有记录（**DROP TABLE objects**，**DROP DATABASE db**），而
    **CREATE** 语句则可以根据目标以多种方式使用。创建数据库与 **DROP** 语句类似，即只需要使用 **CREATE DATABASE db**，而表则显然需要特定的信息来创建属性。以
    **objects** 为例，我们可以使用以下代码：'
- en: CREATE TABLE objects (objID int, shape varchar(32), color varchar(32))
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建表 `objects`（objID 整型，shape 字符串类型，color 字符串类型）。
- en: This statement will create a table named **objects** with **objID** as an integer
    and **shape** and **colors** as strings with their maximum lengths set to 32 characters.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该语句将创建一个名为 **objects** 的表，其中 **objID** 为整型，**shape** 和 **color** 为字符串类型，最大长度设置为
    32 个字符。
- en: '**ALTER statements**: The **ALTER** statement is used to modify general information
    regarding databases or tables:'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ALTER 语句**：**ALTER** 语句用于修改关于数据库或表的一般信息：'
- en: ALTER DATABASE dbname1 MODIFY NAME=dbname2
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ALTER DATABASE dbname1 MODIFY NAME=dbname2
- en: 'The preceding statement will rename the **dbname1** database **dbname2**. The
    following statement will also add, to an existing table (**objects**), a new string
    field named **newcolumn**, which will store a maximum of 32 characters:'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述语句将重命名数据库 **dbname1** 为 **dbname2**。以下语句也将向现有的表（**objects**）添加一个名为 **newcolumn**
    的新字符串字段，该字段最大存储 32 个字符：
- en: ALTER TABLE objects ADD newcolumn varchar(32)
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ALTER TABLE objects ADD newcolumn varchar(32)
- en: '**ALTER TABLE** can also be used to drop entire attributes (**ALTER TABLE objects
    DROP newcolumn**) or modify columns to change their data type. The **ALTER** statement
    is not typically used in SQL injection since the **DROP** statement is often preferred
    for disabling application functionalities.'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**ALTER TABLE** 也可以用来删除整个属性（**ALTER TABLE objects DROP newcolumn**）或修改列的数据类型。由于
    **DROP** 语句通常用于禁用应用程序功能，**ALTER** 语句在 SQL 注入中通常不被使用。'
- en: The statements listed here only comprise a subset of what is possible in SQL,
    but in order to better understand the main issue of this book, these should provide
    a sufficient basis for what we will cover next.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出的语句仅仅是 SQL 中可能实现的功能的一部分，但为了更好地理解本书的主要问题，这些语句为我们接下来的内容提供了足够的基础。
- en: Besides statements, SQL also provides a wide range of clauses that can be used
    to integrate commands to refine data searches and include constraints in the operations
    on the database. We have already seen the **WHERE**, **DISTINCT**, and **ORDER
    BY** clauses for the **SELECT** statement. More advanced examples will be examined
    in the following chapters.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 除了语句外，SQL 还提供了广泛的子句，可以用来整合命令，以精细化数据查询，并在数据库操作中加入约束条件。我们已经看到过用于 **SELECT** 语句的
    **WHERE**、**DISTINCT** 和 **ORDER BY** 子句。更高级的例子将在接下来的章节中探讨。
- en: Security implications of SQL
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL 的安全性影响
- en: As we've seen, SQL allows us to perform a very large set of instructions, making
    interacting with the whole database possible at many different levels. We can
    do this by modifying its structure too. With such a powerful language that can
    be used to perform any sort of operation on a database, it is natural to start
    wondering, *what could go wrong?* With a vast array of possible statements and
    operations, of course, a malicious attacker could have a wide selection of tools
    that could be used to damage databases, stored data, and applications using such
    data, in different ways. One simple instruction, such as **DROP DATABASE <database
    name>**, for example, could entirely compromise the functionality of an application
    that relies on databases to query data or even authentication data (that is, usernames
    and passwords).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，SQL 允许我们执行大量的指令，使得在许多不同层面与整个数据库进行交互成为可能。我们也可以通过修改数据库的结构来实现这一点。如此强大的语言可以用来对数据库执行各种操作，当然，我们会开始想，*会有什么问题呢？*
    在大量可能的语句和操作中，恶意攻击者显然可以选择多种工具来以不同的方式破坏数据库、存储的数据以及使用这些数据的应用程序。例如，像**DROP DATABASE
    <数据库名称>** 这样的简单指令，可能完全破坏一个依赖数据库查询数据或甚至身份验证数据（即用户名和密码）的应用程序的功能。
- en: For this reason, SQL code is never, at least directly, conceived to be interacted
    with inside an application. Instead, it is the application that, given user input,
    prepares the SQL code needed to be sent to the database to extract (or modify)
    the data requested.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，SQL 代码从来不是（至少直接）为了在应用程序中进行交互而设计的。相反，正是应用程序根据用户输入，准备好所需的 SQL 代码并发送到数据库，以提取（或修改）请求的数据。
- en: However, there are ways for potential attackers to abuse SQL syntax and insert
    arbitrary instructions. This way of attacking is, in general, called **code injection**,
    and involves inserting code of a language recognized by a computer or a system
    into existing code, making it possible to perform otherwise not envisioned tasks.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，潜在攻击者仍然可以滥用 SQL 语法并插入任意指令。这种攻击方式通常称为**代码注入**，它涉及将计算机或系统识别的语言代码插入现有代码中，从而使得执行原本无法预见的任务成为可能。
- en: Being a simple (yet very powerful) language, injecting code within SQL statements
    is relatively easy and can also produce quite damaging results, varying from granting
    authenticated access to anybody to utterly destroying a web application relying
    on databases. The preceding example is just one of many destructive commands that
    could be injected.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种简单（但非常强大）的语言，在 SQL 语句中注入代码相对容易，并且可能产生非常严重的后果，从授予任何人经过身份验证的访问权限，到完全破坏依赖数据库的
    Web 应用程序。前面的例子只是可以被注入的许多破坏性命令之一。
- en: 'The main issue behind the use of SQL is that code is evaluated by the application
    while it''s running: if no controls are in place, the program itself, which has
    already started, does not evaluate the statements in terms of content or correctness.
    A malicious attacker could exploit this by inserting arbitrary commands within
    user-provided input, such as in authentication forms or string fields that are
    evaluated by the application by inserting those within running code.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 SQL 的主要问题在于代码在应用程序运行时被评估：如果没有控制措施，已经启动的程序本身不会从内容或正确性方面评估语句。恶意攻击者可以利用这一点，在用户提供的输入中插入任意命令，例如在身份验证表单或字符串字段中，这些输入会被应用程序评估，并插入到正在运行的代码中。
- en: In the following section, we will see how this is possible in a vulnerable application.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将看到在一个存在漏洞的应用程序中，如何实现这一点。
- en: Weaknesses in the use of SQL
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 SQL 的弱点
- en: The main problem that leads to code injection – and obviously SQL injection
    too – is the way programming (and query) languages themselves inherently work.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 导致代码注入——显然也包括 SQL 注入——的主要问题在于编程（和查询）语言本身固有的工作方式。
- en: Since commands are just strings of characters that are interpreted as code,
    and user input is made of text, we could, in principle, insert code syntax within
    user input. If not correctly validated and simply accepted without us applying
    any control, this injected code could result in the execution of arbitrary commands
    that have been manually inserted by a malicious user.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 由于命令仅仅是作为代码解释的字符字符串，而用户输入是由文本组成的，我们原则上可以在用户输入中插入代码语法。如果没有正确验证并简单地接受输入，而没有我们进行任何控制，这些注入的代码可能导致恶意用户插入的任意命令被执行。
- en: This is because a naïve string reader does not make any distinction between
    text and code as it is essentially binary data coded as text – the same is done
    from the standpoint of a computer program or an application. Usually, in order
    to inject specific instructions or code objects, specific characters are used
    to trick the parser – the software component in charge of reading the text input
    – into interpreting the inserted code as unintended commands. Traditionally, the
    most trivial way to inject code is by inserting the line termination character
    – the semicolon in most programming languages – so that, besides the intended
    operation, the new one is considered as an entirely different instruction. Other
    characters can be used to manipulate the application's behavior, such as the comment
    separator, which is used to exclude altogether parts of code following the instruction.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为一个天真的字符串读取器不会区分文本和代码，因为它本质上是作为文本编码的二进制数据 —— 从计算机程序或应用程序的角度来看也是如此。通常，为了注入特定的指令或代码对象，使用特定的字符来欺骗解析器
    —— 负责读取文本输入的软件组件 —— 使其将插入的代码解释为未预期的命令。传统上，注入代码的最简单方式是插入行终止字符 —— 在大多数编程语言中是分号 ——
    这样，除了预期的操作之外，新的操作也会被视为完全不同的指令。其他字符可以用来操控应用程序的行为，例如注释分隔符，它用于完全排除指令后面的代码部分。
- en: 'SQL is no exception to this: many techniques used in code injection also apply
    to SQL. In fact, this vulnerability was discovered over 20 years ago by commands
    being injected into SQL queries, resulting in unintended operations. We will see
    specific forms of this exploitation in later chapters, all of which can be used
    to cause damage to applications or to help the attacker gain strategic advantage,
    both in terms of data and in some cases accessing otherwise restricted systems.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 也不例外：许多用于代码注入的技术同样适用于 SQL。事实上，这个漏洞早在 20 多年前就被发现，当时是通过向 SQL 查询中注入命令，导致了未预期的操作。在后续章节中，我们将看到这种利用的具体形式，这些形式都可以用来对应用程序造成损害，或者帮助攻击者获得战略优势，既可以是数据方面，也可以是在某些情况下访问本应受限的系统。
- en: 'Luckily, SQL injection only applies to applications that are poorly coded.
    Adding specific controls for the user-provided input – and inner application streams
    – can prevent this problem altogether. Besides improving the security controls
    on the input, dropping suspicious web traffic could also help avoid the exploitation
    of the vulnerability. Ideally, this being a coding error, you should develop secure
    code in accordance with the best practices available. Here are some general suggestions
    that will be further explored later in this book:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，SQL 注入只适用于编码不当的应用程序。对用户提供的输入和内部应用流添加特定的控制措施，可以彻底避免这个问题。除了改善输入的安全控制外，丢弃可疑的
    Web 流量也有助于避免漏洞的利用。理想情况下，作为一个编码错误，你应该根据最佳实践开发安全代码。以下是一些将在本书后续章节中进一步探讨的建议：
- en: '**Do not allow unnecessary special characters in queries**: Usually, it''s
    through the use of special characters that SQL injection is enabled. If special
    characters are allowed in queries, those could also be encoded in a way that is
    not interpreted by SQL, thus foiling SQL injection attempts based on special characters
    such as string separators (single or double quote), instruction separators (semicolon),
    and comment separators.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要允许查询中出现不必要的特殊字符**：通常，SQL 注入是通过使用特殊字符来实现的。如果查询中允许特殊字符，那么这些字符也可以以一种 SQL 无法解释的方式进行编码，从而使基于特殊字符（如字符串分隔符（单引号或双引号）、指令分隔符（分号）和注释分隔符）的
    SQL 注入攻击失败。'
- en: '**Do not allow specific suspicious commands**: Some commands are often used
    in SQL injection attacks. Allowing specific authorized commands only, through
    the means of a whitelist, helps us avoid the insertion of arbitrary commands within
    an application, according to the expected behavior of the software component.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要允许特定的可疑命令**：一些命令经常用于 SQL 注入攻击。通过白名单仅允许特定的授权命令，有助于避免在应用程序中插入任意命令，从而符合软件组件的预期行为。'
- en: '**Do not give carte blanche to the user**: While we would love users to be
    respectful and responsible, to us, they could be anybody – even malicious users
    as far as we know. It''s a good idea to limit their actions as much as possible,
    thereby never trusting user input. Query input should always be converted into
    parameters and serialized accordingly.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要给予用户无限制的权限**：虽然我们希望用户能够保持尊重和负责的态度，但对我们来说，用户可能是任何人——甚至是恶意用户。从这个角度来看，限制用户行为是一个好主意，因此我们永远不应该信任用户输入。查询输入应始终转换为参数并进行序列化。'
- en: These points help in protecting against SQL injection, at least as a guideline.
    The topic of defending against SQL injection with a more low-level and specific
    meaning will be thoroughly examined in later chapters and sections of this book.
    In general, it's by enabling a security-driven approach to application coding
    that most vulnerabilities and security issues can be solved altogether. Also,
    including security controls during development can help save time and effort as
    reworking code can be much harder than writing the code from scratch with such
    controls that are included by design.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这些要点有助于防范 SQL 注入，至少可以作为指导方针。本书后续章节将详细探讨如何防范 SQL 注入的低级和具体方法。一般来说，通过在应用程序编码中采用以安全为导向的方法，绝大多数漏洞和安全问题都能够得到解决。此外，在开发过程中加入安全控制可以节省时间和精力，因为重新编写代码要比从头开始编写带有这些控制的代码要困难得多。
- en: SQL for SQL injection – a recap
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL 注入 - 回顾
- en: 'This chapter served as an introduction to, in a general sense, the basic topics
    behind SQL injection. The following is a summary of the main points to focus on
    in this first chapter so that you can memorize the main concepts we have mentioned
    thus far:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 本章作为 SQL 注入基本概念的介绍，提供了一个概览。以下是对本章要点的总结，帮助你记住我们至今提到的主要概念：
- en: 'SQL injection is a software weakness of SQL, a specific language and engine
    for interacting with database structures based on the relational model that treats
    data in a structured format using tables. It can allow malicious users to execute
    arbitrary commands, thus interacting with the database of an application in a
    way that is not originally intended by the application SQL injection can be used
    by attackers in many ways:'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL 注入是 SQL 的一种软件弱点，SQL 是一种特定的语言和引擎，用于与基于关系模型的数据库结构进行交互，并通过表格以结构化格式处理数据。它允许恶意用户执行任意命令，从而以应用程序原本不打算的方式与应用程序的数据库交互。攻击者可以通过多种方式使用
    SQL 注入：
- en: '![](image/Chapter_1_Table_1.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](image/Chapter_1_Table_1.jpg)'
- en: 'SQL provides a simple language that can be used to perform operations on relational
    databases. SQL processes statements with simple structures in most cases. Some
    SQL statements are as follows:'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL 提供了一种简单的语言，可以用于对关系数据库进行操作。在大多数情况下，SQL 语句的结构很简单。以下是一些 SQL 语句：
- en: '**-SELECT**, to extract information from the database returning records'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**-SELECT**，用于从数据库中提取信息并返回记录'
- en: '**-INSERT**, to insert records within the database'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**-INSERT**，用于在数据库中插入记录'
- en: '**-CREATE**, to create data tables or databases'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**-CREATE**，用于创建数据表或数据库'
- en: '**-DROP**, to delete entire tables or databases'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**-DROP**，用于删除整个表格或数据库'
- en: '**-DELETE**, to delete records within the database'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**-DELETE**，用于删除数据库中的记录'
- en: '**-ALTER**, to modify databases or tables'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**-ALTER**，用于修改数据库或表格'
- en: Some of these statements can be more effective than others in terms of injection,
    but the most important is **SELECT** since it is the main enabler of injection
    and is the most common command used in applications. It is through the insertion
    of SQL commands within **SELECT** statements that almost all SQL injections take
    place.
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中一些语句在注入时比其他语句更有效，但最重要的是 **SELECT**，因为它是注入的主要推动力，也是应用程序中最常用的命令。几乎所有的 SQL 注入都通过在
    **SELECT** 语句中插入 SQL 命令来实现。
- en: Some specific advanced SQL commands can also put different tables in relation
    based on, for example, common attributes. This is one of the main advantages of
    the relational model, which can separate data records into different tables that
    describe relations, while at the same time being connected and increasing the
    range of operations that can be performed.
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一些特定的高级 SQL 命令还可以基于某些共同属性，将不同的表格建立关联。这是关系模型的主要优点之一，它能够将数据记录分隔到不同的表中来描述关系，同时这些表格又可以相互连接，扩大了可执行操作的范围。
- en: 'SQL-based systems can vary in terms of their implementation and can have some
    minor differences in terms of syntax (comments) and structure (default database
    names):'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于 SQL 的系统在实现上可能有所不同，并且在语法（注释）和结构（默认数据库名称）方面可能存在一些小的差异：
- en: '- MySQL, an open source implementation, is the most popular version available.
    It can be considered as the basic SQL implementation for reference.'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- MySQL 是一种开源实现，是最流行的版本。它可以被视为参考的基本 SQL 实现。'
- en: '- SQLite is designed to be a standalone version of SQL, storing the database
    in the same filesystem as the client application that''s running. It uses the
    basic SQL syntax without major differences.'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- SQLite 设计为 SQL 的独立版本，将数据库存储在与正在运行的客户端应用程序相同的文件系统中。它使用基本的 SQL 语法，没有重大差异。'
- en: '- Oracle Database is one of the most popular SQL database systems in the enterprise
    environment as it also supports other database models, making it a multi-model
    system.'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- Oracle 数据库是企业环境中最受欢迎的 SQL 数据库系统之一，因为它还支持其他数据库模型，使其成为一个多模型系统。'
- en: '**- Microsoft SQL** (**MSSQL**) server is another popular solution in the enterprise
    environment thanks to its integration with the Microsoft Windows environment,
    which is very widespread in the IT world.'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**- Microsoft SQL** (**MSSQL**) 服务器是另一个在企业环境中流行的解决方案，得益于它与 Microsoft Windows
    环境的集成，而 Windows 环境在 IT 领域非常普及。'
- en: In general, the underlying engine works in the same way in terms of query processing,
    but there are some minor differences in terms of language and default database
    schema.
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一般来说，底层引擎在查询处理方面的工作方式相同，但在语言和默认数据库架构方面存在一些小的差异。
- en: 'For this recap, we have prepared a reference table highlighting some basic
    differences among the main SQL engines. This will help you memorize the main differences
    we described in this chapter:'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了进行这次回顾，我们准备了一张参考表，突出显示了主要 SQL 引擎之间的一些基本差异。这将帮助你记住我们在本章中描述的主要差异：
- en: '![](image/Chapter_1_Table_2.jpg)'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/Chapter_1_Table_2.jpg)'
- en: SQL is used within coded applications to allow interaction with databases, which
    can be used to store and access data, while also providing means for obtaining
    authenticated access. Databases usually store access information, such as username
    and password, that's evaluated for matching purposes in a specific table of the
    database. For this reason, being a component of applications, SQL could be exploited
    by possible malicious actors who could abuse its expressive power.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 在编码应用程序中用于与数据库进行交互，可以用于存储和访问数据，同时还提供获得认证访问权限的手段。数据库通常存储访问信息，如用户名和密码，并在数据库的特定表中进行匹配评估。因此，作为应用程序的组成部分，SQL
    可能会被潜在的恶意行为者利用，他们可能会滥用其表达能力。
- en: 'If there are no security controls in place, an application will evaluate every
    possible text string that is sent to it, thus possibly allowing a malicious user
    to insert arbitrary commands that weren''t originally intended. To contrast the
    action of possible malicious users, the best solution would be to implement a
    security-focused approach in application development so that attacks such as SQL
    injection (and many other) are prevented by the use of security controls that
    implement a secure-by-design pattern that follows the existing best practices
    for secure coding. As a general blueprint, we can summarize some security-by-design
    principles into three major points:'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有安全控制措施，应用程序将评估发送给它的每一个可能的文本字符串，从而可能允许恶意用户插入原本不打算执行的任意命令。为了抵抗潜在恶意用户的行为，最好的解决方案是实施安全驱动的开发方法，确保通过安全控制来防止
    SQL 注入（以及其他许多攻击），这些安全控制应当遵循现有的安全编码最佳实践作为安全设计模式。作为一般蓝图，我们可以将一些安全设计原则总结为三大要点：
- en: '- Do not allow unnecessary special characters in queries so that SQL syntax
    cannot be abused.'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 在查询中不要允许不必要的特殊字符，以防 SQL 语法被滥用。'
- en: '- Do not allow suspicious commands in queries by whitelisting only specific
    instructions.'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 通过仅允许特定指令，避免在查询中允许可疑的命令。'
- en: '- Do not give the user too much freedom, thereby preventing a malicious user
    from injecting arbitrary code.'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 不要给予用户过多自由，从而防止恶意用户注入任意代码。'
- en: We will see more specific security principles in later chapters, both in the
    form of countermeasures and existing best practices for what concerns application
    security.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后续章节中看到更具体的安全原则，既包括防范措施，也包括现有的最佳实践，涉及应用程序安全。
- en: Summary
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: So, to sum this up, let's take a look at what we covered in this chapter. SQL
    works using relationships, and it accepts a wide range of commands. We've also
    seen that, in general, some of these can be abused by malicious attackers. For
    this reason, we should keep security in mind when designing and developing applications
    that rely on databases. This chapter gave you a taste of the main security issues
    and possible solutions.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下我们在本章中讨论的内容，SQL 通过关系进行工作，接受多种命令。我们还看到，一般来说，这些命令中的一些可能会被恶意攻击者滥用。因此，在设计和开发依赖数据库的应用程序时，我们应始终考虑安全性。本章让你了解了主要的安全问题及可能的解决方案。
- en: The next chapter will focus on what a malicious attacker can do by taking advantage
    of SQL capabilities. We will provide examples of this, all while dealing with
    aspects related to non-relational databases.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将重点讨论恶意攻击者如何利用 SQL 功能进行攻击。我们将提供一些示例，同时涉及与非关系型数据库相关的内容。
- en: This first chapter, despite being more abstract, is essential for focusing on
    the main concepts behind SQL injection. Of course, this just an introduction to
    what we are going to cover throughout this book, but with more concrete examples.
    Be sure to keep these topics in mind when dealing with the practical aspects of
    SQL injection.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 本章尽管较为抽象，但对理解 SQL 注入背后的核心概念至关重要。当然，这只是我们将在全书中深入探讨的内容的引言，届时会有更多具体的例子。在处理 SQL
    注入的实际问题时，务必牢记这些主题。
- en: Our journey into SQL injection has only just begun!
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对 SQL 注入的探索才刚刚开始！
- en: Questions
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is a database?
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是数据库？
- en: What is a relational database?
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是关系型数据库？
- en: What is SQL? What is it used for?
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 SQL？它是用来做什么的？
- en: Can you name some examples of SQL implementations in terms of database systems?
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 能举出一些数据库系统中 SQL 实现的例子吗？
- en: What does **SELECT** mean in SQL? Why is it so important?
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**SELECT** 在 SQL 中是什么意思？为什么它如此重要？'
- en: Can you describe SQL injection in your own words?
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你能用自己的话描述 SQL 注入吗？
