- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Securing Data on S3 with Policies and Techniques
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用策略和技术保护S3数据
- en: In this chapter, we will delve into securing **Amazon Simple Storage Service**
    ( **S3** ), an **object store** on the AWS platform. Object storage, which is
    distinct from traditional **hierarchical file systems** , operates on a key-value
    principle whereby each object is stored with a unique key as the identifier. Think
    of S3 as a place where each piece of data has a special name that helps you find
    it, unlike a regular file system that sorts things into folders.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨如何保护**Amazon简单存储服务**（**S3**），它是AWS平台上的**对象存储**。与传统的**层次文件系统**不同，对象存储基于键值原理，每个对象都有一个唯一的键作为标识符。可以将S3看作一个地方，每个数据项都有一个特殊的名称来帮助你找到它，而不是像常规的文件系统那样将文件分类到文件夹中。
- en: We have already talked about IAM policies and how to use them for securing data
    in S3 within the *Creating a customer-managed IAM policy* recipe in [*Chapter
    2*](B21384_02.xhtml#_idTextAnchor043) . We will extend that knowledge and focus
    on making S3 data-safe using **Access Control Lists** ( **ACLs** ) and **bucket
    policies** . We will also look at other important ways to keep our S3 data secure,
    such as using S3 features such as **presigned URLs** , **encryption** , **versioning**
    , and **replication** .
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[*第2章*](B21384_02.xhtml#_idTextAnchor043)的*创建客户管理的IAM策略*食谱中讨论了IAM策略及其在S3中保护数据的使用方法。接下来，我们将扩展这些知识，重点介绍如何使用**访问控制列表**（**ACLs**）和**桶策略**来确保S3数据安全。我们还将探索其他重要的S3数据保护方法，如使用S3的**预签名URL**、**加密**、**版本控制**和**复制**等功能。
- en: 'This chapter includes the following recipes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包括以下食谱：
- en: Creating an S3 bucket policy
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建S3桶策略
- en: Working with S3 ACLs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用S3 ACLs
- en: Creating S3 presigned URLs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建S3预签名URL
- en: Protecting files with S3 versioning and object locking
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用S3版本控制和对象锁定保护文件
- en: Encrypting data on S3
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对S3数据进行加密
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Before diving into the recipes of this chapter, we need to ensure that we have
    the following knowledge and requirements in place:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入本章的食谱之前，我们需要确保具备以下知识和要求：
- en: Due to AWS’s cloud-based nature, a stable internet connection is essential for
    accessing and managing services.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于AWS基于云的特性，稳定的互联网连接对于访问和管理服务至关重要。
- en: We need an active AWS account to complete most of the recipes within this chapter,
    and for some recipes, we will need more than one AWS account (as mentioned in
    the respective recipes).
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要一个有效的AWS账户来完成本章的大多数食谱，某些食谱可能需要多个AWS账户（如各自食谱中所提及）。
- en: 'A basic understanding of AWS’s core concept and a working knowledge of the
    **AWS Management Console** , **AWS CLI** , and particularly Amazon S3 will benefit
    us. If you are new to the S3 service, you can refer to the following URL for getting
    started with S3: [https://www.cloudericks.com/blog/getting-started-with-amazon-s3-on-aws-cloud](https://www.cloudericks.com/blog/getting-started-with-amazon-s3-on-aws-cloud)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础的AWS核心概念知识，以及对**AWS管理控制台**、**AWS CLI**，尤其是Amazon S3的使用熟练度，将对我们有很大帮助。如果你是S3服务的新手，可以参考以下网址了解如何开始使用S3：[https://www.cloudericks.com/blog/getting-started-with-amazon-s3-on-aws-cloud](https://www.cloudericks.com/blog/getting-started-with-amazon-s3-on-aws-cloud)
- en: Knowledge of **IAM Identity Center** from *Chapters 1* *and* *2* is helpful
    if we are managing users with IAM Identity Center instead of using IAM directly.
    If we are planning to use IAM users, we need to be familiar with IAM.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们使用 IAM Identity Center 来管理用户而不是直接使用 IAM，掌握**IAM Identity Center**的知识，尤其是*第1章*和*第2章*的内容，会非常有帮助。
- en: To execute AWS CLI commands, we need to install **AWS CLI v2** . We also need
    to configure it using the AWS IAM Identity Center as needed for each recipe if
    we are managing users with IAM Identity Center. Alternatively, if we are using
    IAM users for any recipe, we need to configure the CLI profiles using their **access
    key** and **secret** **access key** .
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了执行AWS CLI命令，我们需要安装**AWS CLI v2**。如果我们使用IAM Identity Center来管理用户，则还需要根据每个食谱的需要使用AWS
    IAM Identity Center进行配置。或者，如果我们使用IAM用户来执行任何食谱，则需要使用其**访问密钥**和**秘密访问密钥**来配置CLI配置文件。
- en: Important note
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: While it’s possible to manage users directly with IAM, AWS now recommends using
    IAM Identity Center (formerly AWS SSO) whenever possible for enhanced security
    and convenience.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以直接使用IAM来管理用户，但AWS现在推荐尽可能使用IAM Identity Center（原AWS SSO）来增强安全性和便利性。
- en: The code files for this book are available at [https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition](https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition)
    . The code files for this chapter are available at [https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition/tree/main/Chapter04](https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition/tree/main/Chapter04)
    .
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的代码文件可在[https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition](https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition)
    获取。本章的代码文件可在[https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition/tree/main/Chapter04](https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition/tree/main/Chapter04)
    获取。
- en: Creating an S3 bucket policy
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建S3桶策略
- en: Previously, we had explored creating IAM policies. IAM policies are generally
    used for user-level permissions across AWS services, while bucket policies are
    specific to individual S3 buckets and offer more granular control at the bucket
    level. For instance, bucket policies uniquely enable granting access to anonymous
    users, enforcing **Server-Side Encryption** ( **SSE** ) by default, and restricting
    access based on source IP or VPC.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们探讨了如何创建IAM策略。IAM策略通常用于跨AWS服务的用户级权限，而桶策略则特定于单个S3桶，并提供更细粒度的桶级控制。例如，桶策略独特地支持授予匿名用户访问权限，默认强制**服务器端加密**（**SSE**），并根据源IP或VPC限制访问。
- en: In this recipe, we will first create a bucket policy from the Management Console
    by generating a policy using the Policy Generator that allows **ListBucket** and
    **GetObject** actions to everyone. Then, we will create a bucket policy from AWS
    CLI that provides access to a specific IAM user. You can use both the policies
    from either the Management Console or the AWS CLI; however, I wanted to show how
    it is done with both approaches. I will also provide examples of principal types
    in the *There’s more* section of this recipe.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将首先通过管理控制台使用策略生成器创建一个桶策略，允许每个人执行**ListBucket**和**GetObject**操作。然后，我们将通过AWS
    CLI创建一个桶策略，提供对特定IAM用户的访问权限。您可以使用管理控制台或AWS CLI中的任何一种策略；但是，我想展示这两种方法的实现。我还将在本食谱的*更多内容*部分提供主类型的示例。
- en: Getting ready
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We need the following to successfully complete this recipe:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要以下内容才能成功完成此操作：
- en: A working AWS account is essential. I will be using the **awsseccb-sandbox-1**
    account that we created in [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020) . However,
    I will not be using any features of the AWS Organizations or the IAM Identity
    Center.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有效的AWS账户至关重要。我将使用我们在[*第1章*](B21384_01.xhtml#_idTextAnchor020)中创建的**awsseccb-sandbox-1**账户。不过，我将不使用AWS
    Organizations或IAM身份中心的任何功能。
- en: An **awsseccb_admin1** user with **AdministratorAccess** permission is also
    important.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有**AdministratorAccess**权限的**awsseccb_admin1**用户也很重要。
- en: 'We also need an S3 bucket and a file in it. I will use a bucket named **awsseccbbucketpolicy**
    with a file named **image-cloudericks.png** . Replace them with your bucket name
    and filename. The S3 bucket should be configured with **Block all public access**
    unchecked, especially for the settings related to bucket policies. We can do this
    while creating a bucket, as shown in *Figure 4* *.1* . For the rest of the settings,
    keep the defaults as they are, which, at the time of writing this book, are as
    follows:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还需要一个S3桶和其中的一个文件。我将使用名为**awsseccbbucketpolicy**的桶和名为**image-cloudericks.png**的文件。请将它们替换为您的桶名称和文件名。S3桶应配置为**取消选中所有公共访问**，特别是与桶策略相关的设置。我们可以在创建桶时进行此设置，如*图
    4.1*所示。对于其余设置，请保持默认值，在本书编写时，默认设置如下：
- en: '**ACLs disabled (recommended)** is selected'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已选择**禁用ACL（推荐）**
- en: '**Bucket Versioning** is set to **Disable**'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**桶版本控制**已设置为**禁用**'
- en: '**Default encryption** is set to **Server-side encryption with Amazon S3 managed**
    **keys (SSE-S3)**'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**默认加密**已设置为**使用Amazon S3管理的服务器端加密密钥（SSE-S3）**'
- en: '**Bucket Key** is set to **Enable**'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**桶密钥**已设置为**启用**'
- en: '**Object Lock** (which is found under **Advanced settings** ) is set to **Disable**'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象锁定**（位于**高级设置**下）已设置为**禁用**'
- en: '![Figure 4.1 – Unchecking settings for bucket policies](image/B21384_04_1.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.1 – 取消选中桶策略的设置](image/B21384_04_1.jpg)'
- en: Figure 4.1 – Unchecking settings for bucket policies
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1 – 取消选中桶策略的设置
- en: Verify that your bucket does not allow listing for everyone by going to the
    bucket from the browser using the **https://<bucket-name>.s3.amazonaws.com** bucket
    URL, replacing **<bucket-name>** with your bucket name (for example, [https://seccbbucket.s3.amazonaws.com/](https://seccbbucket.s3.amazonaws.com/)
    ).
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过浏览器访问桶的**https://<bucket-name>.s3.amazonaws.com** 桶 URL，替换 **<bucket-name>**
    为你的桶名称（例如，[https://seccbbucket.s3.amazonaws.com/](https://seccbbucket.s3.amazonaws.com/)
    ），验证桶不允许公开列出。
- en: '![Figure 4.2 – Verifying access for the bucket before starting the recipe](image/B21384_04_2.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.2 – 在开始操作前验证桶的访问权限](image/B21384_04_2.jpg)'
- en: Figure 4.2 – Verifying access for the bucket before starting the recipe
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2 – 在开始操作前验证桶的访问权限
- en: For using an IAM user as the principal, as outlined in the *Granting ListBucket
    access for an IAM user from the CLI* section, we need an IAM user with no permissions
    called **awsseccb_user1** .
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如在*从 CLI 授予 IAM 用户 ListBucket 访问权限*部分所述，若要使用 IAM 用户作为主体，我们需要一个没有权限的 IAM 用户，名为
    **awsseccb_user1**。
- en: We will also need an environment setup for executing CLI commands with two CLI
    profiles, **AwsSecCbAdmin** and **AwsSecCbUser** , for the **awsseccb_admin1**
    and **awsseccb_user1** users, respectively, following the *Technical requirements*
    section of this chapter if we want to follow the steps involving CLI commands.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们希望执行涉及 CLI 命令的步骤，还需要为执行 CLI 命令设置一个环境，包含两个 CLI 配置文件：**AwsSecCbAdmin** 和 **AwsSecCbUser**，分别对应
    **awsseccb_admin1** 和 **awsseccb_user1** 用户，具体配置请参考本章的*技术要求*部分。
- en: Next, we will use bucket policies to give permission to everyone to list the
    contents of our bucket and then retry this step.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用桶策略授予每个人列出我们桶内容的权限，然后重试此步骤。
- en: How to do it...
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We will first generate a policy from the console using the policy generator.
    Later, we will execute the policy from the CLI.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先使用策略生成器从控制台生成策略，稍后将通过 CLI 执行该策略。
- en: Granting ListBucket and GetObject access from the console
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从控制台授予 ListBucket 和 GetObject 访问权限
- en: 'We can give public access to list the contents of a bucket as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式授予公开访问权限以列出桶的内容：
- en: Go to the **S3** service in the console, click on our bucket’s name, go to the
    **Permissions** tab, and then go to **Bucket policy** .
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入控制台中的**S3**服务，点击我们的桶名称，转到**权限**选项卡，然后点击**桶策略**。
- en: Click on **Edit** , then click on **Policy generator** on the upper-right side.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**编辑**，然后点击右上角的**策略生成器**。
- en: 'Within the **AWS Policy Generator** page, select or enter data as follows:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**AWS 策略生成器**页面中，选择或输入以下数据：
- en: For **Select Type of Policy** , select **S3** **Bucket Policy** .
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**选择策略类型**，选择 **S3** **桶策略**。
- en: For **Effect** , select **Allow** .
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**效果**，选择**允许**。
- en: For **Principal** , enter the ***** value.
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**主体**，输入 ***** 值。
- en: For **AWS Service** , **Amazon S3** will be selected.
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**AWS 服务**，将选择 **Amazon S3**。
- en: For **Actions** , select **ListBucket** .
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**操作**，选择 **ListBucket**。
- en: For **Amazon Resource Name (ARN)** , copy and paste the Bucket ARN (e.g., **arn:aws:s3:::seccbbucket**
    ) from the **Edit bucket** **policy** page.
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**Amazon 资源名称（ARN）**，从**编辑桶策略**页面复制并粘贴桶 ARN（例如，**arn:aws:s3:::seccbbucket**）。
- en: '![Figure 4.3 – The AWS Policy Generator page](image/B21384_04_3.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.3 – AWS 策略生成器页面](image/B21384_04_3.jpg)'
- en: Figure 4.3 – The AWS Policy Generator page
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3 – AWS 策略生成器页面
- en: Click **Add Statement** .
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加声明**。
- en: Click **Generate Policy** .
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**生成策略**。
- en: The generated policy should look similar to the following.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 生成的策略应类似于以下内容。
- en: '![Figure 4.4 – The bucket policy](image/B21384_04_4.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.4 – 桶策略](image/B21384_04_4.jpg)'
- en: Figure 4.4 – The bucket policy
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – 桶策略
- en: Copy the policy into the **Bucket policy** editor on the **Edit bucket policy**
    page, then click **Save changes** .
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将策略复制到**桶策略**编辑器中，然后点击**保存更改**。
- en: 'In a browser, provide the bucket URL (e.g., [https://seccbbucket.s3.amazonaws.com](https://seccbbucket.s3.amazonaws.com/)
    ). The contents of the bucket should now be listed:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，提供桶的 URL（例如，[https://seccbbucket.s3.amazonaws.com](https://seccbbucket.s3.amazonaws.com/)）。此时，桶的内容应列出：
- en: '![Figure 4.5 – Listing the contents of the bucket](image/B21384_04_5.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.5 – 列出桶的内容](image/B21384_04_5.jpg)'
- en: Figure 4.5 – Listing the contents of the bucket
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5 – 列出桶的内容
- en: 'In the bucket policy editor, change **s3:ListBucket** to **s3:GetObject** and
    add **/*** at the end of the resource (such as **"Resource": "arn:aws:s3:::seccbbucket/*"**
    ), then click **Save changes** .'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在桶策略编辑器中，将 **s3:ListBucket** 改为 **s3:GetObject**，并在资源的末尾添加 **/*（例如，**"Resource":
    "arn:aws:s3:::seccbbucket/*"**），然后点击**保存更改**。'
- en: 'Access the object URL from the bucket and paste it into the browser. We should
    be able to successfully retrieve the object now:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从存储桶访问对象 URL，并将其粘贴到浏览器中。现在我们应该能够成功地检索对象了：
- en: '![Figure 4.6 – Accessing the image from the bucket](image/B21384_04_6.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.6 – 从存储桶访问图像](image/B21384_04_6.jpg)'
- en: Figure 4.6 – Accessing the image from the bucket
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6 – 从存储桶访问图像
- en: If we change the resource to **arn:aws:s3:::seccbbucket/*** without an object
    operation such as **s3:GetObject** , we will get an error stating that the action
    does not apply to any resource. This is because, when we add any prefix (such
    as ***** ) to the bucket, it is considered an object operation; otherwise, it
    is considered a bucket-level operation.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将资源更改为 **arn:aws:s3:::seccbbucket/***，并且没有指定对象操作（如 **s3:GetObject**），我们将收到一个错误，提示该操作不适用于任何资源。这是因为，当我们在存储桶上添加任何前缀（如
    ***** ）时，它被视为对象操作；否则，它被视为存储桶级别的操作。
- en: Next, we will see how we can grant ListBucket access to an IAM user from the
    CLI.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看看如何通过 CLI 为 IAM 用户授予 ListBucket 访问权限。
- en: Granting ListBucket Access for an IAM user from the CLI
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 CLI 为 IAM 用户授予 ListBucket 访问权限
- en: 'In the previous section, we used a policy that allows access to everyone by
    specifying **Principal** as ***** . In this section, we will use a bucket policy
    that provides access to a specific IAM user to demonstrate creating a bucket policy
    from the CLI. Let us get started:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们使用了一个允许所有人访问的策略，通过将 **Principal** 设置为 ***** 来实现。在本节中，我们将使用一个允许特定 IAM
    用户访问的存储桶策略，以演示如何通过 CLI 创建存储桶策略。让我们开始吧：
- en: If you are following along from the previous section, delete that policy and
    make sure that you do not have access to list the bucket.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你在前一节中跟着操作，请删除该策略，并确保你没有访问列表存储桶的权限。
- en: 'Create a bucket policy to allow our **awsseccb_user1** user to access it and
    save it as **bucket-policy-allow-list.json** :'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个存储桶策略，允许我们的 **awsseccb_user1** 用户访问该对象，并将其保存为 **bucket-policy-allow-list.json**：
- en: '[PRE0]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Remember to replace my S3 bucket name, **awsseccbbucketpolicy** , with your
    bucket name and my AWS account ID, **207849759248** , with your AWS account ID
    within the given policy.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请记得将我的 S3 存储桶名称 **awsseccbbucketpolicy** 替换为你的存储桶名称，将我的 AWS 账户 ID **207849759248**
    替换为你自己的 AWS 账户 ID。
- en: 'Attach the policy to the bucket:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将策略附加到存储桶：
- en: '[PRE1]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'List the contents of the bucket using the **AwsSecCbUser** profile created
    for the **awsseccb_user1** user, using the **aws s3 ls bucketname** command as
    shown in the following screenshot:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用为 **awsseccb_user1** 用户创建的 **AwsSecCbUser** 配置文件，列出存储桶的内容，使用如下截图所示的 **aws
    s3 ls bucketname** 命令：
- en: '![Figure 4.7 – Listing the contents of the bucket using CLI](image/B21384_04_7.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.7 – 使用 CLI 列出存储桶内容](image/B21384_04_7.jpg)'
- en: Figure 4.7 – Listing the contents of the bucket using CLI
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.7 – 使用 CLI 列出存储桶内容
- en: Now that you have seen how to create policies from the console and the CLI,
    practice more scenarios with each of the available actions and conditions.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了如何通过控制台和 CLI 创建策略，接下来可以使用每个可用的操作和条件练习更多场景。
- en: How it works...
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'In this recipe, we created S3 bucket policies. A bucket policy statement can
    have the following components: **Sid** , **Principal** , **Effect** , **Action**
    , **Resource** , and **Condition** . All of these except Principal are the same
    as an IAM policy and we explored them in the *Creating a customer-managed IAM
    policy* recipe in [*Chapter 2*](B21384_02.xhtml#_idTextAnchor043) .'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们创建了 S3 存储桶策略。一个存储桶策略声明可以包含以下组件：**Sid**、**Principal**、**Effect**、**Action**、**Resource**
    和 **Condition**。除了 Principal 之外，这些都与 IAM 策略相同，我们在[*第 2 章*](B21384_02.xhtml#_idTextAnchor043)的《创建客户管理的
    IAM 策略》一节中探讨过它们。
- en: The Principal component for a bucket policy can be an account, user, role, or
    everyone (denoted by ***** ). It can contain an ARN for a resource (specified
    using the ARN element) or a canonical ID (specified using the **CanonicalUser**
    element). More details about the principal are present in *There’s more* section
    of this recipe.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 存储桶策略的 Principal 组件可以是帐户、用户、角色或所有人（由 ***** 表示）。它可以包含资源的 ARN（通过 ARN 元素指定）或规范
    ID（通过 **CanonicalUser** 元素指定）。有关 Principal 的更多细节，请参见本食谱的 *更多信息* 部分。
- en: Resource, in the case of a bucket policy, is a bucket or object and is denoted
    using a bucket ARN. The bucket ARN should be in the **arn:aws:s3:::bucket_name**
    form. An object resource is represented in the **arn:aws:s3:::bucket_name/key_name**
    form. To denote all objects within a bucket, we can use **arn:aws:s3:::bucket_name/***
    . We can denote every resource in every bucket as **arn:aws:s3:::*** .
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对于存储桶策略，资源是存储桶或对象，并使用存储桶 ARN 表示。存储桶 ARN 应该是 **arn:aws:s3:::bucket_name** 形式。对象资源表示为
    **arn:aws:s3:::bucket_name/key_name** 形式。为了表示存储桶中的所有对象，我们可以使用 **arn:aws:s3:::bucket_name/***
    。我们可以将每个存储桶中的每个资源表示为 **arn:aws:s3:::*** 。
- en: There’s more...
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: Bucket policies follow the same JSON document structure as IAM policies but
    have an additional principal field. The principal is the user or entity for which
    a policy statement is applicable. There is no principal for an IAM policy as it
    is attached to an IAM user. The IAM user who executes that policy is the principal
    in the case of an IAM policy.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 存储桶策略遵循与 IAM 策略相同的 JSON 文档结构，但有一个额外的主体字段。主体是适用策略声明的用户或实体。IAM 策略没有主体，因为它是附加到
    IAM 用户的。在 IAM 策略中，执行该策略的 IAM 用户就是主体。
- en: 'Consider the following examples when using Principal in bucket policies:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用存储桶策略中的主体时，请考虑以下示例：
- en: 'A root user can be represented as follows:'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根用户可以表示如下：
- en: '[PRE2]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'An IAM user can be represented as follows:'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IAM 用户可以表示如下：
- en: '[PRE3]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'A federated user can be represented as follows:'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 联邦用户可以表示如下：
- en: '[PRE4]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'An IAM role can be represented as follows:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IAM 角色可以表示如下：
- en: '[PRE5]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'A role session can be represented as follows:'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 角色会话可以表示如下：
- en: '[PRE6]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'A canonical user ID can be represented as follows:'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规范用户 ID 可以表示如下：
- en: '[PRE7]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'An AWS session can be represented as follows:'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS 会话可以表示如下：
- en: '[PRE8]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Multiple principals can be represented in an array as follows:'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个主体可以在数组中表示如下：
- en: '[PRE9]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'An anonymous user can be represented as follows:'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 匿名用户可以表示如下：
- en: '[PRE10]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let’s quickly go through some more important details relating to S3 bucket
    policies:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速浏览一些与 S3 存储桶策略相关的重要细节：
- en: The Conditions element is an optional element that allows us to conditionally
    execute policies. We used Conditions in one of the examples.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Conditions 元素是一个可选元素，允许我们有条件地执行策略。我们在其中一个示例中使用了 Conditions。
- en: Currently, we have around 50 bucket policy actions, including those that work
    on an object (for example, **s3:PutObject** ), a bucket (for example, **s3:CreateBucket**
    ), or a bucket sub-resource (for example, **PutBucketAcl** ).
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目前，我们大约有 50 个存储桶策略操作，包括适用于对象的操作（例如，**s3:PutObject**），适用于存储桶的操作（例如，**s3:CreateBucket**），以及适用于存储桶子资源的操作（例如，**PutBucketAcl**）。
- en: The current list of bucket sub-resources with permissions includes **BucketPolicy**
    , **BucketWebsite** , **AccelerateConfiguration** , **BucketAcl** , **BucketCORS**
    , **BucketLocation** , **BucketLogging** , **BucketNotification** , **BucketObjectLockConfiguration**
    , **BucketPolicyStatus** , **BucketPublicAccessBlock** , **BucketRequestPayment**
    , **BucketTagging** , **BucketVersioning** , **EncryptionConfiguration** , **InventoryConfiguration**
    , **LifecycleConfiguration** , **MetricsConfiguration** , **ReplicationConfiguration**
    , and **AnalyticsConfiguration** .
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前具有权限的存储桶子资源列表包括 **BucketPolicy**、**BucketWebsite**、**AccelerateConfiguration**、**BucketAcl**、**BucketCORS**、**BucketLocation**、**BucketLogging**、**BucketNotification**、**BucketObjectLockConfiguration**、**BucketPolicyStatus**、**BucketPublicAccessBlock**、**BucketRequestPayment**、**BucketTagging**、**BucketVersioning**、**EncryptionConfiguration**、**InventoryConfiguration**、**LifecycleConfiguration**、**MetricsConfiguration**、**ReplicationConfiguration**
    和 **AnalyticsConfiguration**。
- en: 'We cannot specify an IAM group as a principal in an S3 bucket policy. If we
    add a group instead of a user, we will get an error: **Invalid principal** **in
    policy** .'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不能在 S3 存储桶策略中指定 IAM 组作为主体。如果我们添加一个组而不是用户，则会出现错误：**策略中的无效主体**。
- en: 'Here are some S3-specific condition keys available for use in conditions within
    a policy: **s3:x-amz-acl** , **s3:x-amz-copy-source** , **s3:x-amz-metadatadirective**
    , **s3:x-amz-server-side-encryption** , **s3:VersionId** , **s3:LocationConstraint**
    , **s3:delimiter** , **s3:max-keys** , **s3:prefix** , **s3:xamz-server-side-encryption-aws-kms-key-id**
    , **s3:ExistingObjectTag/** , **s3:RequestObjectTagKeys** , **s3:RequestObjectTag/**
    , **s3:object-lock-remainingretention-days** , **s3:object-lock-mode** , **s3:object-lock-retain-untildate**
    , and **s3:object-lock-legal-hold** .'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是一些可在策略中的条件中使用的S3特定条件键：**s3:x-amz-acl**，**s3:x-amz-copy-source**，**s3:x-amz-metadatadirective**，**s3:x-amz-server-side-encryption**，**s3:VersionId**，**s3:LocationConstraint**，**s3:delimiter**，**s3:max-keys**，**s3:prefix**，**s3:xamz-server-side-encryption-aws-kms-key-id**，**s3:ExistingObjectTag/**，**s3:RequestObjectTagKeys**，**s3:RequestObjectTag/**，**s3:object-lock-remainingretention-days**，**s3:object-lock-mode**，**s3:object-lock-retain-untildate**，和**s3:object-lock-legal-hold**。
- en: See also
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: We can read about IAM policies in the *Creating a customer-managed IAM policy*
    recipe from [*Chapter 2*](B21384_02.xhtml#_idTextAnchor043) . For a detailed comparison
    of ACLs, bucket policies, and IAM policies, refer to the *There’s more* section
    of the *Working with S3 ACLs* recipe in the current chapter.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以通过[*第二章*](B21384_02.xhtml#_idTextAnchor043)中的《创建客户管理的IAM策略》章节了解IAM策略。有关ACL、桶策略和IAM策略的详细比较，请参阅当前章节中《使用S3
    ACLs》食谱的*更多内容*部分。
- en: We can find many bucket policy examples at [https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html)
    .
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在[https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html)找到许多桶策略示例。
- en: Working with S3 ACLs
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用S3 ACLs
- en: In Amazon S3, ACLs are utilized to manage access to both buckets and objects.
    As we delve into ACLs, it’s crucial to recognize that they are now viewed as a
    legacy tool within the AWS ecosystem. AWS recommends opting for more current solutions
    such as IAM and bucket policies, which provide enhanced flexibility and security.
    Nonetheless, understanding ACLs is beneficial, particularly when dealing with
    older systems or applications that were developed before the advent of IAM and
    bucket policies.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在Amazon S3中，ACL用于管理对桶和对象的访问。随着我们深入了解ACL，重要的是要认识到它们现在被视为AWS生态系统中的遗留工具。AWS建议选择更现代的解决方案，如IAM和桶策略，这些方案提供了更强的灵活性和安全性。然而，理解ACL仍然有益，尤其是在处理早期开发的系统或应用程序时，这些系统或应用程序是在IAM和桶策略出现之前开发的。
- en: In this recipe, we will learn to grant permissions to the public (everyone)
    to list the files of a bucket using ACLs from the AWS Management Console. We will
    list more use cases within the *There’s more* section of the recipe.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何通过AWS管理控制台使用ACL向公众（所有人）授予列出桶中文件的权限。我们将在食谱的*更多内容*部分列出更多用例。
- en: Getting ready
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备开始
- en: 'We need the following to successfully complete this recipe:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要以下内容才能成功完成此食谱：
- en: A working AWS account is essential. I will be using the **awsseccb-sandbox-1**
    account that we created in [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020) . However,
    I will not be using any features of the AWS Organizations or the IAM Identity
    Center.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有效的AWS账户是必需的。我将使用我们在[*第一章*](B21384_01.xhtml#_idTextAnchor020)中创建的**awsseccb-sandbox-1**账户。但是，我不会使用AWS
    Organizations或IAM Identity Center的任何功能。
- en: An **awsseccb_admin1** user with **AdministratorAccess** permissions.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个具有**AdministratorAccess**权限的**awsseccb_admin1**用户。
- en: We will need an environment setup for executing CLI commands with two CLI profiles,
    **AwsSecCbAdmin** and **AwsSecCbUser** , for the **awsseccb_admin1** and **awsseccb_user1**
    users (respectively) following the *Technical requirements* section of this chapter
    if we want to follow the steps involving CLI commands.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们想按照本章中CLI命令的步骤操作，我们需要设置一个环境，用于执行具有两个CLI配置文件的CLI命令，分别是**AwsSecCbAdmin**和**AwsSecCbUser**，用于**awsseccb_admin1**和**awsseccb_user1**用户（分别）。
- en: 'We will also need an S3 bucket and a file in it. I will be using a bucket named
    **awsseccbacldemo** with a file named **image-cloudericks.png** . Replace them
    with your bucket name and filename. The S3 bucket should be configured with ACLs
    enabled. We can do this while creating a bucket, as shown in *Figure 4* *.8* .
    Also, ensure that the **Block all public access** option is unchecked, especially
    for the settings related to ACLs. We can do this while creating a bucket, as shown
    in *Figure 4* *.9* . For the rest of the settings, keep the defaults as they are,
    which, at the time of writing this book, are as follows:'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还需要一个S3桶以及其中的一个文件。我将使用一个名为**awsseccbacldemo**的桶，其中有一个名为**image-cloudericks.png**的文件。请将其替换为你的桶名和文件名。该S3桶应该配置为启用ACL。我们可以在创建桶时进行设置，如*图4.8*所示。另请确保**阻止所有公共访问**选项未勾选，尤其是在涉及ACL设置时。我们可以在创建桶时进行设置，如*图4.9*所示。对于其余设置，保持默认设置即可，在撰写本书时，默认设置如下：
- en: '**Bucket Versioning** is set to **Disable**'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**桶版本控制**设置为**禁用**'
- en: '**Default encryption** is set to **Server-side encryption with Amazon S3 managed**
    **keys (SSE-S3)**'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**默认加密**设置为**使用Amazon S3管理的服务器端加密密钥（SSE-S3）**'
- en: '**Bucket Key** is set to **Enable**'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**桶密钥**设置为**启用**'
- en: '**Object Lock** (found under **Advanced settings** ) is set to **Disable**'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象锁定**（位于**高级设置**下）设置为**禁用**'
- en: 'While creating an S3 bucket, we can enable ACLs as required for this recipe
    with the following settings:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建S3桶时，我们可以根据此配方启用所需的ACL设置，具体设置如下：
- en: '![Figure 4.8 – Enabling ACLs for Amazon S3 object ownership](image/B21384_04_8.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图4.8 – 启用Amazon S3对象所有权的ACL](image/B21384_04_8.jpg)'
- en: Figure 4.8 – Enabling ACLs for Amazon S3 object ownership
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.8 – 启用Amazon S3对象所有权的ACL
- en: 'Furthermore, we can uncheck the **Block all public access** option as required
    for this recipe, as shown in the following figure:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以根据此配方的要求取消勾选**阻止所有公共访问**选项，如下图所示：
- en: '![Figure 4.9 – Unchecking the Block all public access setting for ACLS](image/B21384_04_9.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图4.9 – 取消勾选ACL的“阻止所有公共访问”设置](image/B21384_04_9.jpg)'
- en: Figure 4.9 – Unchecking the Block all public access setting for ACLS
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.9 – 取消勾选ACL的“阻止所有公共访问”设置
- en: Verify that our bucket does not allow listing for everyone by going to the bucket
    from the browser using the **https://<bucket-name>.s3.amazonaws.com** bucket URL,
    replacing **<bucket-name>** with our bucket name (e.g., [https://awsseccbacldemo.s3.amazonaws.com](https://awsseccbacldemo.s3.amazonaws.com)
    ), similar to *Figure 4* *.2* .
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 通过浏览器访问桶的URL（**https://<桶名>.s3.amazonaws.com**），替换**<桶名>**为我们的桶名称（例如，[https://awsseccbacldemo.s3.amazonaws.com](https://awsseccbacldemo.s3.amazonaws.com)），验证我们的桶是否不允许所有人列出内容，类似于*图4.2*。
- en: Next, allow everyone to list the bucket’s contents.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，允许所有人列出桶的内容。
- en: How to do it...
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps to allow everyone to list the bucket’s contents:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以允许所有人列出桶的内容：
- en: Go to the **S3** service on the console.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入控制台的**S3**服务。
- en: Click on our bucket’s name (e.g., **awsseccbacldemo** ) to go to the bucket’s
    page.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击我们的桶名称（例如，**awsseccbacldemo**），进入桶的页面。
- en: Go to the **Permissions** tab of the bucket, scroll down to the **Access control
    list (ACL)** tab, and click **Edit** .
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入桶的**权限**标签页，向下滚动到**访问控制列表（ACL）**标签页，并点击**编辑**。
- en: On the **Edit access control list (ACL)** page, under **Everyone (public access)**
    , select the checkbox for **List** under **Objects** , and select the checkbox
    next to the **I understand the effects of these changes on my objects and** **buckets**
    statement.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**编辑访问控制列表（ACL）**页面下，找到**每个人（公共访问）**，勾选**对象**下的**列出**复选框，并勾选**我理解这些更改对我的对象和桶的影响**声明旁边的复选框。
- en: '![Figure 4.10 – Editing the ACL page](image/B21384_04_10.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图4.10 – 编辑ACL页面](image/B21384_04_10.jpg)'
- en: Figure 4.10 – Editing the ACL page
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.10 – 编辑ACL页面
- en: Scroll down and click **Save changes** .
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动并点击**保存更改**。
- en: Access the bucket from the browser using the **https://<bucket-name>.s3.amazonaws.com**
    link, replacing **<bucket-name>** with your bucket name (e.g., [https://awsseccbacldemo.s3.amazonaws.com/](https://awsseccbacldemo.s3.amazonaws.com/)
    ). You should be able to list the contents of the bucket.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**https://<桶名>.s3.amazonaws.com**链接通过浏览器访问桶，替换**<桶名>**为你的桶名称（例如，[https://awsseccbacldemo.s3.amazonaws.com/](https://awsseccbacldemo.s3.amazonaws.com/)）。你应该能够列出桶的内容。
- en: '![Figure 4.11 – An XML file showing the contents of the bucket](image/B21384_04_11.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图4.11 – 显示桶内容的XML文件](image/B21384_04_11.jpg)'
- en: Figure 4.11 – An XML file showing the contents of the bucket
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.11 – 显示桶内容的XML文件
- en: In this edition of the book, we focus on a narrower range of scenarios involving
    ACLs, unlike the broader coverage of use cases in the previous edition of this
    book, as ACLs are currently considered a legacy option.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本版本的书中，我们专注于涉及 ACL 的较小范围场景，与本书前一版覆盖的更广泛的使用案例不同，因为目前 ACL 被认为是一个遗留选项。
- en: How it works...
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe provided the steps for enabling the public listing of an S3 bucket’s
    contents in AWS. The key step involved modifying the ACL settings via the AWS
    Management Console. In doing so, we specifically configured the ACL to allow public
    access for listing the bucket’s contents, while ensuring that general read access
    to the bucket’s objects was not granted.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱提供了在 AWS 中启用 S3 桶内容公共列出的步骤。关键步骤是通过 AWS 管理控制台修改 ACL 设置。在此过程中，我们特别配置了 ACL，以允许公共访问列出桶的内容，同时确保不授予对桶对象的通用读取访问权限。
- en: 'In this recipe, we allowed everyone to list the contents of the bucket using
    ACLs from the Management Console. We can also do the same from CLI. ACLs provide
    foundational read/write permissions for buckets, objects, and their ACLs. Specifically,
    they can grant the following permissions and can be set while working with the
    AWS CLI:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们通过管理控制台允许所有人列出桶的内容。我们也可以通过 CLI 做到这一点。ACL 提供了桶、对象及其 ACL 的基本读写权限。具体来说，它们可以授予以下权限，并且可以在使用
    AWS CLI 时进行设置：
- en: '**READ** : Allows listing objects in a bucket and reading an object and its
    metadata'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**READ** : 允许列出桶中的对象，并读取对象及其元数据'
- en: '**WRITE** : Enables the creation, overwriting, or deletion of objects in a
    bucket; this permission is not applicable to individual objects'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WRITE** : 启用在桶中创建、覆盖或删除对象；此权限不适用于单个对象'
- en: '**READ_ACP** : Grants the ability to read the ACL of a bucket or object'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**READ_ACP** : 授予读取桶或对象的 ACL 的权限'
- en: '**WRITE_ACP** : Permits writing the ACL for a bucket or object'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WRITE_ACP** : 允许为桶或对象写入 ACL'
- en: '**FULL_CONTROL** : Includes all of the previous permissions, offering complete
    authority over the bucket or object'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FULL_CONTROL** : 包括所有先前的权限，提供对桶或对象的完全控制'
- en: Prior to implementing **READ** ACLs for public access, we prepared the bucket
    by enabling ACLs and ensuring that the **Block all public access** setting was
    unchecked, specifically for ACL-related options. It’s important to note that ACLs,
    often regarded as a legacy feature in comparison to more recent options such as
    IAM and bucket policies, are disabled by default. Likewise, public access is blocked
    by default as a security measure.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在实施 **READ** ACLs 以进行公共访问之前，我们通过启用 ACL 并确保取消勾选 **阻止所有公共访问** 设置，特别是针对与 ACL 相关的选项，来准备桶。需要注意的是，ACL，通常被视为一个遗留功能，相较于更现代的选项，如
    IAM 和桶策略，默认是禁用的。同样，出于安全考虑，公共访问默认是被阻止的。
- en: There’s more...
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: 'Let’s delve deeper into some important concepts related to ACLs in Amazon S3:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨一些与 Amazon S3 中的 ACL 相关的重要概念：
- en: '**Basic permissions** : ACLs provide foundational read/write permissions for
    buckets, objects, and their ACLs.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基本权限** : ACL 提供桶、对象及其 ACL 的基本读写权限。'
- en: '**Access granting** : ACLs grant access to AWS accounts and predefined groups
    but cannot deny access. Predefined groups in Amazon S3 ACLs are fixed categories
    set by AWS that represent broad sets of users, such as **All Users** for the public,
    **Authenticated Users** for any logged-in AWS user, and **Log Delivery** for services
    that deliver logs to your bucket. They simplify permission settings without specifying
    individual user accounts. When specifying grantees, the following methods can
    be used:'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**访问授予** : ACL 授予对 AWS 账户和预定义组的访问权限，但不能拒绝访问。Amazon S3 ACL 中的预定义组是由 AWS 设置的固定类别，表示广泛的用户集，例如
    **所有用户**（面向公众），**已验证用户**（面向任何已登录的 AWS 用户）和 **日志传递**（面向将日志传递到桶中的服务）。这些组简化了权限设置，而无需指定单个用户账户。在指定受让人时，可以使用以下方法：'
- en: '**AmazonCustomerByEmail** : Set **Type** to **AmazonCustomerByEmail** and use
    the canonical ID in the **EmailAddress** field'
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AmazonCustomerByEmail** : 将 **Type** 设置为 **AmazonCustomerByEmail**，并在 **EmailAddress**
    字段中使用规范 ID'
- en: '**CanonicalUser** : Set **Type** to **CanonicalUser** ; the account’s email
    is provided in the **ID** field'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CanonicalUser** : 将 **Type** 设置为 **CanonicalUser**；账户的电子邮件提供在 **ID** 字段中'
- en: '**Group** : When **Type** is **Group** , use the URI of the predefined group
    in the **URI** field'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Group** : 当 **Type** 为 **Group** 时，使用预定义组的 URI 在 **URI** 字段中'
- en: '**Default control** : ACLs, by default, grant full control to the resource
    owner and no permissions to anyone else.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**默认控制** : 默认情况下，ACL 授予资源所有者完全控制，并不给予其他任何人的权限。'
- en: '**Internal representation** : ACLs are formatted as XML documents, specifying
    access permissions and grantees.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内部表示**：ACL以XML文档的格式呈现，指定访问权限和受让人。'
- en: '**Non-owner object access** : ACLs allow granting access to objects not owned
    by the bucket owner using canned ACLs such as **bucket-owner-full-control** .'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非所有者对象访问**：ACL允许使用像**bucket-owner-full-control**这样的预设ACL授予对不是桶所有者拥有的对象的访问权限。'
- en: '**Canned ACLs** : These are short-hand ACL permissions that can be used to
    provide permission for a resource from the command line. Currently, the following
    canned ACLs are supported: **private** , **public-read** , **public-read-write**
    , **aws-exec-read** , **authenticated-read** , **bucket-owner-read** , **bucket-owner-full-control**
    , and **log-delivery-write** .'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预设ACL**：这些是简化的ACL权限，可以用于通过命令行提供资源的权限。目前，支持以下预设ACL：**private**、**public-read**、**public-read-write**、**aws-exec-read**、**authenticated-read**、**bucket-owner-read**、**bucket-owner-full-control**和**log-delivery-write**。'
- en: '**Granular object permissions** : ACLs offer a simpler method for assigning
    individual permissions to numerous objects compared to bucket policies.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**细粒度对象权限**：与桶策略相比，ACL提供了一种更简单的方式来为多个对象分配单独的权限。'
- en: '**Block public access override** : S3’s **Block Public Access** settings can
    override ACLs granting public access.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阻止公共访问覆盖**：S3的**Block Public Access**设置可以覆盖授予公共访问的ACL。'
- en: '**Logging access attempts** : Both successful and denied access attempts can
    be logged using S3 access logs.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**记录访问尝试**：可以使用S3访问日志记录成功和拒绝的访问尝试。'
- en: '**No conditions support** : ACLs do not support conditional clauses for granting
    access, unlike IAM or bucket policies.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不支持条件**：与IAM或桶策略不同，ACL不支持授予访问权限的条件子句。'
- en: '**Management challenges** : Managing ACLs in large environments can be complex.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理挑战**：在大型环境中管理ACL可能会很复杂。'
- en: '**Security best practices** : Regular reviews and audits of ACL settings are
    crucial for maintaining security.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全最佳实践**：定期审查和审核ACL设置对于维护安全性至关重要。'
- en: '**Scope and application differences** : We have the following:'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**作用域和应用差异**：我们有以下区别：'
- en: '**ACLs** : Specified per resource (bucket or object)'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ACLs**：按资源（桶或对象）指定'
- en: '**Bucket policies** : Applied to entire buckets and can be used to define access
    based on object prefixes'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**桶策略**：应用于整个桶，并可用于根据对象前缀定义访问权限'
- en: '**IAM policies** : Similar in scope to bucket policies but are assigned to
    IAM users and groups, allowing for more centralized and granular access control'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IAM策略**：与桶策略的范围相似，但分配给IAM用户和组，允许更集中和细粒度的访问控制。'
- en: 'Let’s quickly go through some more important concepts related to canned ACLs:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速浏览一些与预设ACL相关的重要概念：
- en: The **bucket-owner-read** and **bucket-owner-full-control** canned ACLs are
    only applicable to objects and are ignored if specified while creating a bucket.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**bucket-owner-read**和**bucket-owner-full-control**预设ACL仅适用于对象，若在创建桶时指定这些ACL则会被忽略。'
- en: The **log-delivery-write** canned ACL only applies to a bucket.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**log-delivery-write**预设ACL仅适用于桶。'
- en: With the **aws-exec-read** canned ACL, the owner gets the **FULL_CONTROL** permission
    and Amazon EC2 gets READ access to an **Amazon Machine Image** ( **AMI** ) from
    S3.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**aws-exec-read**预设ACL时，所有者获得**FULL_CONTROL**权限，Amazon EC2获得对来自S3的**Amazon
    Machine Image**（**AMI**）的读取权限。
- en: With the **log-delivery-write** canned ACL, the **LogDelivery** group gets **WRITE**
    and **READ_ACP** permissions for the bucket. This is used for S3 access logging.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**log-delivery-write**预设ACL时，**LogDelivery**组获得对桶的**WRITE**和**READ_ACP**权限。这用于S3访问日志记录。
- en: When making an API call, we can specify a canned ACL in our request using the
    **x-amz-acl** request header.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在发出API调用时，我们可以在请求中使用**x-amz-acl**请求头指定预设ACL。
- en: Important note
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: In the case of cross-account access, if a user from account A uploads an object
    to a bucket in account B (owned by account B), account B will have no access to
    that object even if it is the bucket owner. Account A can, however, grant permission
    to the bucket owner while uploading the document using the **bucket-owner-read**
    or **bucket-owner-full-control** canned ACL.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在跨账户访问的情况下，如果账户A中的用户将对象上传到账户B（由账户B拥有）的桶中，即使账户B是桶的拥有者，也无法访问该对象。然而，账户A可以在上传文档时使用**bucket-owner-read**或**bucket-owner-full-control**预设ACL，授予桶所有者权限。
- en: Comparing ACLs, bucket policies, and IAM policies
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比较ACL、桶策略和IAM策略
- en: 'ACLs differ from IAM policies and bucket policies in the following ways:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: ACL与IAM策略和桶策略的不同之处如下：
- en: ACLs provide only basic read/write permission to buckets, objects, and their
    ACLs. IAM policies and bucket policies provide more fine-grained permissions than
    ACLs.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ACL 仅提供对存储桶、对象及其 ACL 的基本读/写权限。IAM 策略和存储桶策略提供比 ACL 更细粒度的权限。
- en: ACLs can only grant access to AWS accounts and predefined groups. ACLs cannot
    grant permissions to IAM users. IAM policies and bucket policies can be used to
    grant access to IAM users.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ACL 只能授予对 AWS 账户和预定义组的访问权限。ACL 不能授予 IAM 用户权限。IAM 策略和存储桶策略可以用于授予 IAM 用户访问权限。
- en: ACLs, by default, allow full control to the owner of the resource and nothing
    to everyone else. Bucket policies and IAM policies are not attached to a resource
    by default.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，ACL 允许资源所有者拥有完全控制权限，其他人则没有任何权限。存储桶策略和 IAM 策略默认不附加到资源上。
- en: ACLs can only grant permissions. Bucket policies and IAM policies can explicitly
    deny access.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ACL 只能授予权限。存储桶策略和 IAM 策略可以显式拒绝访问。
- en: ACLs cannot conditionally allow or deny access. Bucket policies and IAM policies
    can conditionally allow or deny access.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ACL 不能有条件地允许或拒绝访问。存储桶策略和 IAM 策略可以有条件地允许或拒绝访问。
- en: ACLs are represented internally as XML documents. Bucket policies and IAM policies
    are represented as JSON documents.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ACL 在内部表示为 XML 文档。存储桶策略和 IAM 策略表示为 JSON 文档。
- en: 'IAM policies differ from ACLs and bucket policies in the following ways:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: IAM 策略与 ACL 和存储桶策略的不同之处：
- en: IAM policies are user-based and are applied to users. ACLs and bucket policies
    are resource-based policies and are applied to resources.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IAM 策略是基于用户的，并应用于用户。ACL 和存储桶策略是基于资源的策略，并应用于资源。
- en: IAM policies can be inline (embedded directly into a user, group, or role) or
    standalone (they can be attached to any IAM user, group, or role). ACLs and bucket
    policies are sub-resources of a bucket.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IAM 策略可以是内联的（直接嵌入到用户、组或角色中）或独立的（可以附加到任何 IAM 用户、组或角色）。ACL 和存储桶策略是存储桶的子资源。
- en: IAM policies can only give access to an IAM user. Bucket policies and ACLs can
    be used to provide anonymous access as well a s access to a r oot user.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IAM 策略只能赋予 IAM 用户访问权限。存储桶策略和 ACL 可以用于提供匿名访问权限以及对 root 用户的访问。
- en: Important note
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: We can mix ACLs, bucket policies, and IAM policies. All policies are evaluated
    at the same time if the bucket and user are w ithin the same account.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以混合使用 ACL、存储桶策略和 IAM 策略。如果存储桶和用户在同一账户内，所有策略将同时进行评估。
- en: See also
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: We can learn about IAM policies in the *Creating a Customer Managed IAM Policy*
    recipe in [*Chapter 2*](B21384_02.xhtml#_idTextAnchor043) .
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在[*第二章*](B21384_02.xhtml#_idTextAnchor043)的 *创建自定义管理的 IAM 策略* 章节中了解 IAM
    策略。
- en: We can learn more about IAM policies and permissions at [https://www.cloudericks.com/blog/demystifying-aws-policies-and-permissions](https://www.cloudericks.com/blog/demystifying-aws-policies-and-permissions)
    .
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在 [https://www.cloudericks.com/blog/demystifying-aws-policies-and-permissions](https://www.cloudericks.com/blog/demystifying-aws-policies-and-permissions)
    上了解更多关于 IAM 策略和权限的信息。
- en: Creating S3 presigned URLs
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 S3 预签名 URL
- en: We can grant temporary permission to access S3 objects using presigned URLs
    with an expiry time. In this recipe, we will learn to use presigned URLs. We can
    do this from the Management Console or AWS CLI or by using an SDK for a programming
    language such as Python, Java, and so on.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过设置过期时间来授予访问 S3 对象的临时权限，使用预签名 URL。在本食谱中，我们将学习如何使用预签名 URL。我们可以通过管理控制台、AWS
    CLI 或使用 Python、Java 等编程语言的 SDK 来实现这一点。
- en: Getting ready
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will need the following to successfully complete this recipe:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要以下内容来成功完成此食谱：
- en: A working AWS account; I will be using the **awsseccb-sandbox-1** account that
    we created [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020) .
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有效的 AWS 账户；我将使用我们在[*第一章*](B21384_01.xhtml#_idTextAnchor020)中创建的**awsseccb-sandbox-1**账户。
- en: An S3 bucket and a file in it; I will use a bucket named **seccbbucket** with
    a file named **image-cloudericks.png** .
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 S3 存储桶及其中的一个文件；我将使用名为 **seccbbucket** 的存储桶，里面有一个名为 **image-cloudericks.png**
    的文件。
- en: How to do it...
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We will first create a presigned URL from the console and then from the AWS
    CLI.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先从控制台创建一个预签名 URL，然后通过 AWS CLI 创建。
- en: Generating a presigned URL from the AWS Console
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 AWS 控制台生成预签名 URL
- en: 'We can create a presigned URL from the console and test it as follows:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从控制台创建一个预签名 URL 并按如下方式进行测试：
- en: Log in to the AWS Management Console, navigate to the **S3** service, and go
    into our S3 bucket.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到 AWS 管理控制台，导航到 **S3** 服务，然后进入我们的 S3 存储桶。
- en: Select the object for which we need to create the presigned URL, click on the
    **Object actions** dropdown, and select **Share with a** **presigned URL** .
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们需要为其创建预签名 URL 的对象，点击 **对象操作** 下拉菜单，并选择 **通过预签名 URL 分享**。
- en: Enter the value for **Number of minutes** as **5** , as shown in the following
    figure, and click on **Create** **presigned URL** .
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下图中输入 **分钟数** 的值为 **5**，然后点击 **创建** **预签名 URL**。
- en: '![Figure 4.12 – Creating a presigned URL](image/B21384_04_12.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.12 – 创建预签名 URL](image/B21384_04_12.jpg)'
- en: Figure 4.12 – Creating a presigned URL
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.12 – 创建预签名 URL
- en: 'We should get a **Copy presigned URL** notification as follows:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该会收到一个类似于 **复制预签名 URL** 的通知：
- en: '![Figure 4.13 – A Copy presigned URL message](image/B21384_04_13.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.13 – 复制预签名 URL 信息](image/B21384_04_13.jpg)'
- en: Figure 4.13 – A Copy presigned URL message
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.13 – 复制预签名 URL 信息
- en: Copy and paste the URL and run it from a browser within the time mentioned for
    **Number of minutes** . We should then be able to see our file successfully.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制并粘贴 URL，然后在 **分钟数** 所述的时间范围内从浏览器中运行它。我们应该能够成功查看我们的文件。
- en: 'If we run the URL after the specified time, we should get an **AccessDenied**
    error message similar to the following:'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在指定的时间后运行 URL，我们应该会收到一个类似于 **AccessDenied** 的错误信息：
- en: '![Figure 4.14 – Accessing the presigned URL after expiry](image/B21384_04_14.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.14 – 过期后访问预签名 URL](image/B21384_04_14.jpg)'
- en: Figure 4.14 – Accessing the presigned URL after expiry
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.14 – 过期后访问预签名 URL
- en: Next, we will look at how to do pre-signing using the CLI.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将了解如何使用 CLI 进行预签名。
- en: Generating a presigned URL from the CLI
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 CLI 生成预签名 URL
- en: 'We can create a presigned URL from the CLI and test it as follows:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过 CLI 创建一个预签名 URL 并按如下方式进行测试：
- en: 'Pre-sign a URL from the CLI as follows:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 CLI 预签一个 URL，如下所示：
- en: '[PRE11]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This command will output a presigned URL similar to the following.
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该命令将输出类似于以下内容的预签名 URL。
- en: '![Figure 4.15 – Generating a presigned URL (partial) from CLI](image/B21384_04_15.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.15 – 从 CLI 生成预签名 URL（部分）](image/B21384_04_15.jpg)'
- en: Figure 4.15 – Generating a presigned URL (partial) from CLI
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.15 – 从 CLI 生成预签名 URL（部分）
- en: Run the URL from a browser (as we did in the previous section) before and after
    the expiry.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 URL 过期前后，在浏览器中运行该 URL（就像我们在上一部分中所做的那样）。
- en: Next, we will explore how to do pre-signing using an SDK such as Python SDK.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探索如何使用 SDK（例如 Python SDK）进行预签名。
- en: How it works...
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the *Generating a presigned URL from the AWS Console* section, we presigned
    a URL from the AWS console. In the *Generating a presigned URL from the CLI* section,
    we presigned a URL from the CLI.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *从 AWS 控制台生成预签名 URL* 部分，我们从 AWS 控制台生成了一个预签名 URL。在 *从 CLI 生成预签名 URL* 部分，我们从
    CLI 生成了一个预签名 URL。
- en: 'Most APIs related to presigning will accept the following data for generating
    presigned, timed URLs:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 与预签名相关的大多数 API 都会接受以下数据来生成预签名的定时 URL：
- en: Bucket and object
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储桶和对象
- en: Expiry date and time
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过期日期和时间
- en: HTTP method
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP 方法
- en: Security credentials
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全凭证
- en: In this recipe, we specified the bucket, object, and expiry in the code. The
    HTTP operation was **GET** . For security credentials, we specified a user profile
    that has permissions for the operation, which was **get_object** in our case.
    Anyone with valid credentials can generate a presigned URL. However, if the generating
    user does not have permission to perform the intended operation (for example,
    **get_object** ), then the operation will eventually fail.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实例中，我们在代码中指定了存储桶、对象和过期时间。HTTP 操作是 **GET**。对于安全凭证，我们指定了一个具有操作权限的用户配置文件，在我们的示例中是
    **get_object**。任何拥有有效凭证的人都可以生成预签名 URL。然而，如果生成 URL 的用户没有执行预期操作的权限（例如 **get_object**），则该操作最终会失败。
- en: There’s more...
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We can also presign a URL using an SDK such as the Python SDK. With Python SDK,
    we also use the boto3 library for Python. Boto is the AWS SDK for Python. It facilitates
    the creation, configuration, and management of AWS services, such as EC2 and S3,
    using Python.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 SDK，如 Python SDK，来预签一个 URL。在 Python SDK 中，我们还使用 boto3 库。Boto 是 AWS 的
    Python SDK，它可以简化通过 Python 创建、配置和管理 AWS 服务（例如 EC2 和 S3）。
- en: See also
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'Refer to the following link for more use cases for Python and Boto3 related
    to presigned URLs: [https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-presigned-urls.html](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-presigned-urls.html)
    .'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 有关与预签名 URL 相关的 Python 和 Boto3 的更多用例，请参考以下链接：[https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-presigned-urls.html](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-presigned-urls.html)。
- en: Protecting files with S3 versioning and object locking
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 S3 版本控制和对象锁定保护文件
- en: In this recipe, we will learn to implement **S3 Object Locking** . S3 Object
    Lock is a feature that enables users to prevent the deletion or overwriting of
    objects in S3 for a specified period of time or indefinitely. This feature is
    essential for meeting regulatory compliance requirements and for implementing
    data protection strategies. With Object Lock, you can apply a **Write Once, Read
    Many** ( **WORM** ) model, ensuring that data cannot be altered or deleted until
    the specified retention period expires. This makes it an effective tool for safeguarding
    critical business and compliance-sensitive data.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个步骤中，我们将学习如何实施**S3 对象锁定**。S3 对象锁定是一项功能，允许用户在指定的时间段内或无限期内防止 S3 中对象的删除或覆盖。这项功能对于满足法规合规要求和实施数据保护策略至关重要。通过对象锁定，您可以应用**写一次，读多次**（**WORM**）模型，确保数据在指定的保留期过后不能被修改或删除。这使得它成为保护关键业务和合规敏感数据的有效工具。
- en: S3 versioning is a prerequisite for S3 Object Locking. Hence, we will also quickly
    look into how to enable versioning from within the *Getting ready* section. If
    versioning is enabled for a bucket, S3 keeps a copy of every version of the file
    within the bucket. Versioning thus protects data by providing a means to recover
    it in the case of unintentional actions such as deletes and overwrites, and hence
    may also be considered a security-related feature.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: S3 版本控制是 S3 对象锁定的前提条件。因此，我们还将快速查看如何在*准备工作*部分启用版本控制。如果为桶启用了版本控制，S3 将保留该文件的每个版本的副本。版本控制通过提供恢复机制来保护数据，以防止诸如删除和覆盖等无意操作，因此也可以被视为一种与安全相关的功能。
- en: Getting ready
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We need the following to successfully complete this recipe:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要以下内容才能成功完成这个步骤：
- en: A working AWS account; I will be using the **awsseccb-sandbox-1** account that
    we created in [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020) .
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有效的 AWS 账户；我将使用在[*第 1 章*](B21384_01.xhtml#_idTextAnchor020)中创建的**awsseccb-sandbox-1**账户。
- en: An S3 bucket with **Bucket Versioning** enabled; I will use a bucket named **seccbbucket**
    with a file named **image-cloudericks.png** .
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个启用了**桶版本控制**的 S3 桶；我将使用一个名为**seccbbucket**的桶，桶中有一个名为**image-cloudericks.png**的文件。
- en: 'We can enable versioning while creating an S3 bucket as follows:'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以在创建 S3 桶时启用版本控制，如下所示：
- en: '![Figure 4.16 – Enabling versioning for a new bucket](image/B21384_04_16.jpg)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.16 – 为新桶启用版本控制](image/B21384_04_16.jpg)'
- en: Figure 4.16 – Enabling versioning for a new bucket
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.16 – 为新桶启用版本控制
- en: We can also enable S3 versioning for an existing bucket as follows. Navigate
    to the S3 bucket’s **Properties** tab and click on **Edit** next to **Bucket Versioning**
    . Under **Bucket Versioning** , select **Enable** , and then click on **Save changes**
    .
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以为现有桶启用 S3 版本控制，操作步骤如下：导航到 S3 桶的**属性**标签，点击**编辑**旁边的**桶版本控制**。在**桶版本控制**下，选择**启用**，然后点击**保存更改**。
- en: '![Figure 4.17 – Enabling versioning for an existing bucket](image/B21384_04_17.jpg)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.17 – 为现有桶启用版本控制](image/B21384_04_17.jpg)'
- en: Figure 4.17 – Enabling versioning for an existing bucket
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.17 – 为现有桶启用版本控制
- en: Next, we will enable Object Lock for our bucket.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将为我们的桶启用对象锁定。
- en: How to do it...
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can enable Object Locking as follows:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按如下步骤启用对象锁定：
- en: Login into the AWS Management Console and navigate to the **S3** service.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录 AWS 管理控制台，进入**S3**服务。
- en: Navigate to the S3 bucket, go to the bucket’s **Properties** tab, and click
    on **Edit** next to **Object Lock** .
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 S3 桶，进入桶的**属性**标签，点击**编辑**旁边的**对象锁定**。
- en: On the **Edit Object Lock** screen, select **Enable** and also select the checkbox
    to acknowledge that enabling Object Lock will permanently allow objects in this
    bucket to be locked.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**编辑对象锁定**页面，选择**启用**，并勾选复选框确认启用对象锁定将永久允许桶中的对象被锁定。
- en: '![Figure 4.18 – Enabling Object Lock](image/B21384_04_18.jpg)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.18 – 启用对象锁定](image/B21384_04_18.jpg)'
- en: Figure 4.18 – Enabling Object Lock
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.18 – 启用对象锁定
- en: Enable default retention to protect new objects put into the bucket by selecting
    **Enable** under **Default retention** . Once we enable default retention, we
    should get additional options to configure Object Locking.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在**默认保留期**下选择**启用**来保护放入桶中的新对象。一旦启用默认保留期，我们将获得额外的选项来配置对象锁定。
- en: '![Figure 4.19 – Enabling default retention](image/B21384_04_19.jpg)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.19 – 启用默认保留期](image/B21384_04_19.jpg)'
- en: Figure 4.19 – Enabling default retention
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.19 – 启用默认保留期
- en: Select **Governance** under **Default retention mode** , enter **30** for **Default
    retention period** , and click on **Save changes** .
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**默认保留模式**下选择**治理**，在**默认保留期限**中输入**30**，然后点击**保存更改**。
- en: Upload a new object to our S3 bucket. I have uploaded an **image-heartin.png**
    file.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上传一个新对象到我们的 S3 桶。我已上传了一个**image-heartin.png**文件。
- en: Go to the bucket’s **Object** tab and click on the new object’s name to go to
    the object’s **Properties** tab.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到桶的**对象**标签，点击新对象的名称以转到该对象的**属性**标签。
- en: Scroll down and verify the retention configuration under **Object** **Lock retention**
    .
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动并验证**对象锁保留**下的保留配置。
- en: '![Figure 4.20 – Object Lock retention for new objects after setting the default
    retention mode](image/B21384_04_20.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.20 – 设置默认保留模式后的新对象的对象锁保留](image/B21384_04_20.jpg)'
- en: Figure 4.20 – Object Lock retention for new objects after setting the default
    retention mode
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.20 – 设置默认保留模式后的新对象的对象锁保留
- en: 'Optionally, we can click on **Edit** on the **Object Lock retention** screen,
    as shown in *Figure 4* *.20* , to do one of the following: **Disable** retention,
    change **Retention mode** from **Governance mode** to **Compliance mode** , or
    extend the retention date using the **Retain until** **date** option.'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，我们可以在**对象锁保留**屏幕上点击**编辑**，如*图 4.20*所示，执行以下操作之一：**禁用**保留，将**保留模式**从**治理模式**更改为**合规模式**，或者使用**保留直到**日期选项延长保留日期。
- en: Important Note
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: In governance mode, objects in S3 Object Lock are unchangeable until the set
    retention period is over. To remove these objects before the retention date, retention
    can be disabled after clicking on **Edit** , as shown in *Figure 4* *.20* . In
    compliance mode, we won’t be able to disable retention and objects remain unchangeable
    until their retention period ends. The only way to delete these objects before
    the retention time expires is by closing the associated AWS account. In both modes,
    we can extend the retention date to a future date, but we cannot reduce it.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在治理模式下，S3 对象锁中的对象在设置的保留期限结束之前无法更改。要在保留日期之前删除这些对象，必须点击**编辑**来禁用保留，如*图 4.20*所示。在合规模式下，我们无法禁用保留，且对象保持不可更改，直到保留期结束。要在保留期到期之前删除这些对象，唯一的方法是关闭关联的
    AWS 账户。在这两种模式下，我们可以将保留日期延长到未来的某个日期，但无法缩短它。
- en: Optionally, go to any existing object’s **Properties** tab, scroll down to **Object
    Lock retention** , and click **Edit** to enable Object Lock for that object. We
    should get a screen similar to the screen for configuring default retention, as
    shown in *Figure 4* *.19* , where we can configure retention for this object.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，转到任何现有对象的**属性**标签，向下滚动到**对象锁保留**，点击**编辑**以启用该对象的对象锁。我们应该会看到一个类似于配置默认保留的屏幕，如*图
    4.19*所示，在该屏幕中我们可以为此对象配置保留。
- en: Optionally, go to any new or existing object’s **Properties** tab, scroll down
    to **Object Lock legal hold** , and click on **Edit** to enable **Legal hold**
    , as shown in the following figure.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，转到任何新对象或现有对象的**属性**标签，向下滚动到**对象锁法律保持**，点击**编辑**以启用**法律保持**，如下图所示。
- en: '![Figure 4.21 – Enabling Object Lock legal hold](image/B21384_04_21.jpg)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.21 – 启用对象锁法律保持](image/B21384_04_21.jpg)'
- en: Figure 4.21 – Enabling Object Lock legal hold
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.21 – 启用对象锁法律保持
- en: Optionally, wait for the retention date to expire and then try to delete the
    objects for which we added Object Lock in compliance mode.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，等待保留日期到期后，再尝试删除我们在合规模式下添加了对象锁的对象。
- en: How it works...
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Amazon S3 Object Lock is a feature designed to protect your S3 objects from
    being deleted or overwritten. It’s particularly useful in enforcing data retention
    policies for compliance, legal, or regulatory requirements. To use Object Lock,
    you must first enable versioning in your S3 bucket. Versioning is a means by which
    S3 keeps multiple versions of an object in the same bucket, allowing you to preserve,
    retrieve, and restore every version of every object stored in your bucket. With
    versioning enabled, Object Lock can protect individual object versions.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon S3 对象锁是一个旨在保护您的 S3 对象免受删除或覆盖的功能。它在执行合规性、法律或监管要求的数据保留政策时特别有用。要使用对象锁，您必须首先在
    S3 桶中启用版本控制。版本控制是 S3 在同一桶中保留多个对象版本的一种方式，允许您保存、检索并恢复存储在桶中的每个对象的每个版本。启用版本控制后，对象锁可以保护单个对象版本。
- en: 'Object Lock has two primary retention modes: Governance and Compliance. In
    Governance mode, users with specific permissions can overwrite or delete an object
    version before its retention period expires. This mode is ideal for internal data
    management, as it provides a balance between protection and flexibility. In contrast,
    Compliance mode offers a stricter level of protection. Once an object is locked
    in Compliance mode, no one can overwrite or delete the object version until its
    retention period has passed, not even the root user in the AWS account. This mode
    is designed for scenarios where data must be retained to comply with legal or
    regulatory standards.'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 对象锁定有两种主要的保留模式：治理模式和合规模式。在治理模式下，具有特定权限的用户可以在对象保留期到期之前覆盖或删除对象版本。此模式非常适合内部数据管理，因为它在保护和灵活性之间提供了平衡。相比之下，合规模式提供了更严格的保护级别。一旦对象在合规模式下被锁定，任何人，包括AWS账户中的根用户，都无法在保留期结束之前覆盖或删除该对象版本。此模式适用于需要保留数据以遵守法律或监管标准的场景。
- en: Additionally, Object Lock provides a feature called legal hold for an added
    layer of protection. A legal hold can be applied to objects regardless of their
    retention mode, and it prevents object version deletion without any time-bound
    constraints. Legal Holds are ideal for situations where you might need to retain
    an object for legal reasons. It’s important to note that both the retention modes
    and Legal Hold can be applied to individual objects or as default settings at
    the bucket level. Together, these features make S3 Object Lock a robust tool for
    ensuring that critical data is not deleted or altered, thereby helping organizations
    adhere to compliance requirements and protect their data from accidental loss
    or deletion.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，对象锁定提供了一种名为法律保留的功能，增加了额外的保护层。无论对象的保留模式如何，都可以对对象应用法律保留，它会防止对象版本的删除，无时间限制。法律保留非常适用于需要出于法律原因保留对象的情况。需要注意的是，保留模式和法律保留都可以应用于单个对象或作为默认设置应用于桶级别。这些功能共同使S3对象锁定成为一个强大的工具，确保关键数据不会被删除或更改，从而帮助组织遵守合规要求并保护其数据免受意外丢失或删除。
- en: There’s more...
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: After learning about S3 Object Lock in this recipe, let us quickly look into
    **Glacier Vault Lock** , an important AWS feature that helps keep data secure
    within AWS Glacier, especially when the data needs to be stored for a long time.
    At the core of Glacier Vault Lock is the WORM principle. This means that after
    data is stored, it can be accessed but not altered. By establishing and locking
    a policy, we can ensure that no one, not even administrators or creators, can
    modify or erase these rules or the data they protect. These policies can range
    from basic ones, such as setting a data retention period, to more detailed ones
    specifying deletion permission roles or even creating a permanent archive.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了S3对象锁定的内容后，我们迅速来看一下**Glacier Vault Lock**，这是AWS中的一项重要功能，尤其是在数据需要长期存储时，它有助于确保AWS
    Glacier中的数据安全。Glacier Vault Lock的核心是WORM原则。这意味着数据存储后可以访问，但无法修改。通过建立并锁定策略，我们可以确保没有人，甚至是管理员或创建者，能够修改或删除这些规则或它们保护的数据。这些策略可以从基础的设置（例如设置数据保留期）到更详细的内容（如指定删除权限角色，甚至创建永久归档）不等。
- en: 'Setting up a Glacier Vault Lock involves the following steps:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 设置Glacier Vault Lock涉及以下步骤：
- en: '**Start a Glacier Vault** : Begin by creating a vault in Amazon Glacier using
    the AWS Management Console.'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**启动Glacier Vault**：通过AWS管理控制台开始在Amazon Glacier中创建一个金库。'
- en: '**Create a Vault Lock policy** : Develop a policy that outlines your data retention
    preferences. This policy defines the usage and alteration guidelines for the data
    in the vault.'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建Vault Lock策略**：制定一个政策，概述您的数据保留偏好。此策略定义了在金库中使用和修改数据的指南。'
- en: '**Initiate the Vault Lock** : Apply your policy to the vault. This begins the
    process but doesn’t activate the policy immediately.'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**启动Vault Lock**：将您的策略应用于金库。这将开始过程，但不会立即激活策略。'
- en: '**Review and finalize** : AWS provides a specific timeframe (typically 24 hours)
    for you to review and finalize your policy. No changes are allowed after this
    period.'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**审查并最终确认**：AWS提供了一个特定的时间框架（通常为24小时），让您审查并最终确认您的策略。在此期间后，不允许进行任何更改。'
- en: '**Lock the policy** : Conclude this waiting period by confirming and permanently
    locking your policy. Once locked, the policy is irreversible, ensuring the data’s
    safety according to your established rules.'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**锁定策略**：通过确认并永久锁定您的策略来结束这段等待期。一旦锁定，策略将不可逆转，确保数据按照您已建立的规则安全。'
- en: By following these steps, Glacier Vault Lock can effectively be utilized to
    safeguard critical data requiring long-term storage, meeting compliance and security
    requirements.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这些步骤，Glacier Vault Lock可以有效地用于保护需要长期存储的关键数据，满足合规性和安全性要求。
- en: 'Other important security features related to S3 include the following:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 与S3相关的其他重要安全功能包括：
- en: '**S3 encryption** : Amazon S3 encryption provides methods to protect our data
    at rest. There are two main types: SSE, whereby Amazon S3 encrypts our data as
    it writes it to disks and decrypts it when we access it, and **client-side encryption**
    , whereby we encrypt data on our side before uploading it to S3. For SSE, we have
    options such as **S3-Managed Keys** ( **SSE-S3** ), **AWS Key Management Service
    Keys** ( **SSE-KMS** ), and **Customer-Provided Keys** ( **SSE-C** ). We will
    discuss more about S3 Encryption later in this book after we discuss about the
    AWS **Key Management** **Service** ( **KMS** ).'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**S3加密**：Amazon S3加密提供了保护我们静态数据的方式。主要有两种类型：SSE，即Amazon S3在将数据写入磁盘时进行加密，并在访问时解密；以及**客户端加密**，即我们在将数据上传到S3之前在本地进行加密。对于SSE，我们可以选择**S3管理密钥**（**SSE-S3**）、**AWS密钥管理服务密钥**（**SSE-KMS**）和**客户提供的密钥**（**SSE-C**）。我们将在本书稍后讨论AWS的**密钥管理服务**（**KMS**）后，进一步讨论S3加密。'
- en: '**S3 Access Points** : Amazon S3 Access Points facilitate data access management
    for large-scale, shared data sets in S3 by providing unique hostnames with tailored
    access policies. For instance, if we are operating a data lake with multiple departments
    accessing the same S3 bucket, we can create separate access points for each department
    – such as **finance-data-access** or **hr-data-access** – each with its specific
    permissions and network controls. This allows us to customize access according
    to each department’s needs, ensuring secure and efficient data handling. S3 Access
    Points thus offer a streamlined solution for scenarios requiring distinct, role-based
    access controls, significantly simplifying the management of complex data access
    requirements.'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**S3访问点**：Amazon S3访问点通过提供具有定制访问策略的独特主机名，便于管理S3中大规模共享数据集的访问。例如，如果我们正在操作一个数据湖，多个部门访问同一个S3桶，我们可以为每个部门创建单独的访问点——如**finance-data-access**或**hr-data-access**——每个访问点具有特定的权限和网络控制。这使我们能够根据每个部门的需求定制访问，确保数据处理的安全性和高效性。因此，S3访问点为需要明确基于角色的访问控制的场景提供了简化的解决方案，大大简化了复杂数据访问需求的管理。'
- en: '**S3 access logs** : Amazon S3 access logs are a crucial component for enhancing
    security and monitoring activity in our S3 buckets. These logs provide detailed
    records of all requests made to a specific S3 bucket, including requester information,
    bucket name, request time, and the action performed. This information is vital
    for security analysis and audit trails, allowing us to track access patterns,
    identify suspicious activities, and ensure compliance with security policies.
    By analyzing these logs, we can gain insights into usage trends and potential
    security vulnerabilities, as well as improve our overall data protection strategy
    in S3.'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**S3访问日志**：Amazon S3访问日志是增强安全性和监控我们S3桶活动的关键组成部分。这些日志提供了对特定S3桶所做所有请求的详细记录，包括请求者信息、桶名称、请求时间以及执行的操作。这些信息对于安全分析和审计跟踪至关重要，帮助我们跟踪访问模式、识别可疑活动，并确保符合安全政策。通过分析这些日志，我们可以深入了解使用趋势和潜在的安全漏洞，从而改善我们在S3中的整体数据保护策略。'
- en: '**S3 replication** : Amazon S3 replication, encompassing both **Cross-Region
    Replication** ( **CRR** ) and **cross-account replication** , plays a vital role
    in enhancing data security and availability. With CRR, data is automatically replicated
    across multiple AWS regions, providing geographical diversification, which is
    crucial for disaster recovery and meeting data residency requirements. Cross-account
    replication, meanwhile, offers an added security layer by replicating data between
    buckets in different AWS accounts. This is ideal for scenarios such as auditing
    where data integrity and separation are critical. Both replication strategies
    can be governed by specific policies, allowing precise control over which data
    gets replicated and the manner of its replication.'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**S3 复制**：Amazon S3 复制，包括 **跨区域复制**（**CRR**）和**跨账户复制**，在提高数据安全性和可用性方面起着至关重要的作用。使用
    CRR，数据会自动在多个 AWS 区域之间复制，从而提供地理多样化，这对于灾难恢复和满足数据驻留要求至关重要。跨账户复制则通过在不同 AWS 账户之间复制数据，增加了额外的安全层。这对于数据完整性和隔离至关重要的场景（如审计）来说是理想的。两种复制策略都可以通过特定策略进行管理，从而精确控制哪些数据会被复制及其复制方式。'
- en: See also
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: Check the *Using key policies with conditional keys* recipe in [*Chapter 3*](B21384_03.xhtml#_idTextAnchor088)
    to see how an AWS KMS key can be used for encryption in an S3 bucket.
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请查看[*第 3 章*](B21384_03.xhtml#_idTextAnchor088)中的*使用带条件密钥的密钥策略*教程，了解如何使用 AWS
    KMS 密钥在 S3 存储桶中进行加密。
- en: While this book addresses key S3 security features, providing recipes for every
    single one is beyond its scope. For an always up-to-date and complete list, you
    can visit the blog post at [https://www.cloudericks.com/blog/a-comprehensive-list-of-s3-security-features-within-aws-cloud](https://www.cloudericks.com/blog/a-comprehensive-list-of-s3-security-features-within-aws-cloud)
    .
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本书虽然涵盖了 S3 的关键安全功能，但为每个功能提供教程超出了本书的范围。如需获取始终更新且完整的列表，可以访问博客文章 [https://www.cloudericks.com/blog/a-comprehensive-list-of-s3-security-features-within-aws-cloud](https://www.cloudericks.com/blog/a-comprehensive-list-of-s3-security-features-within-aws-cloud)。
- en: Encrypting data on S3
  id: totrans-309
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 S3 上加密数据
- en: 'In this recipe, we will learn to encrypt data on S3 at rest using SSE techniques.
    Encryption on the server side can be done in three ways: SSE-S3, SSE-KMS, and
    SSE-C. In client-side encryption, data is encrypted on the client side and then
    sent to the server.'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习使用 SSE 技术对 S3 上静态数据进行加密。服务器端加密可以通过三种方式完成：SSE-S3、SSE-KMS 和 SSE-C。而客户端加密是在客户端进行加密后再发送到服务器。
- en: Getting ready
  id: totrans-311
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We need a working AWS account with the following resources configured:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个配置了以下资源的有效 AWS 账户：
- en: We need an S3 bucket. I will be using a bucket with the **awssecbucket** name.
    Replace this with your bucket name.
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要一个 S3 存储桶。我将使用名为**awssecbucket**的存储桶。请将其替换为你的存储桶名称。
- en: We need a user with **AdministratorAccess** permission. Configure a CLI profile
    for this user. I will be calling both the user and the profile on the **awssecadmin**
    CLI.
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要一个具有**AdministratorAccess**权限的用户。为该用户配置 CLI 配置文件。我将在**awssecadmin** CLI
    上同时调用该用户和配置文件。
- en: We need a customer-managed key created in KMS. Follow the *Creating keys in
    KMS* recipe from [*Chapter 3*](B21384_03.xhtml#_idTextAnchor088) to create a key.
    I have created one named **MyS3Key** .
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要在 KMS 中创建一个客户管理的密钥。请参考[*第 3 章*](B21384_03.xhtml#_idTextAnchor088)中的*创建 KMS
    密钥*教程来创建密钥。我创建了一个名为**MyS3Key**的密钥。
- en: How to do it...
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: In this recipe, we will learn about various use cases for SSE.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习 SSE 的各种应用场景。
- en: SSE with SSE-S3
  id: totrans-318
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 SSE-S3 的 SSE
- en: 'We can upload an object from the console with SSE-S3 as follows:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过控制台上传一个带有 SSE-S3 的对象，方法如下：
- en: Navigate to your S3 bucket in the console.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台中导航到你的 S3 存储桶。
- en: Under the **Objects** pane, click on **Upload** | **Add Files** , select your
    file, and then click on **Upload** .
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**对象**窗格下，点击**上传** | **添加文件**，选择文件后，点击**上传**。
- en: Now go to the **Properties** tab. In our bucket, scroll down to the **Default
    encryption** pane and click on **Edit** . Under **Encryption type** , select **Server-side
    encryption with Amazon S3 managed keys (SSE-S3)** , and under **Bucket Key** ,
    select **Enable** . Finally, click on **Save changes** .
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在转到**属性**选项卡。在我们的存储桶中，向下滚动到**默认加密**窗格并点击**编辑**。在**加密类型**下，选择**使用 Amazon S3
    管理的密钥进行服务器端加密 (SSE-S3)**，然后在**存储桶密钥**下，选择**启用**。最后，点击**保存更改**。
- en: '![Figure 4.22 – The default encryption options](image/B21384_04_22.jpg)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.22 – 默认加密选项](image/B21384_04_22.jpg)'
- en: Figure 4.22 – The default encryption options
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.22 – 默认加密选项
- en: Important note
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It is important to note that, if we try to open or download the object, we will
    still be able to see the object as-is because S3 will decrypt the object using
    the same key.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 需要特别注意的是，如果我们尝试打开或下载该对象，我们仍然可以看到该对象原样显示，因为 S3 会使用相同的密钥解密该对象。
- en: SSE with SSE-KMS
  id: totrans-327
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 SSE-KMS 的 SSE
- en: 'We can upload an object from the console with SSE-KMS as follows:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式使用控制台上传一个对象，并使用 SSE-KMS：
- en: Navigate to your S3 bucket.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至您的 S3 桶。
- en: Now go to the **Properties** pane. In the **Properties** tab, scroll down to
    the **Default encryption** pane and click on **Edit** . Under **Encryption type**
    , select **Server-side encryption with AWS Key Management Service keys (SSE-KMS)**
    ; under the **AWS KMS key** pane, select **Choose from your AWS KMS keys** and
    select the key; under **Bucket Key** , select **Enable** , and finally, click
    on **Save changes** .
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在转到**属性**面板。在**属性**选项卡中，向下滚动到**默认加密**面板并点击**编辑**。在**加密类型**下，选择**使用 AWS Key
    Management Service 密钥进行服务器端加密（SSE-KMS）**；在**AWS KMS 密钥**面板中，选择**从您的 AWS KMS 密钥中选择**并选择该密钥；在**桶密钥**下，选择**启用**，最后点击**保存更改**。
- en: '![Figure 4.23 – Changing the encryption options with KMS](image/B21384_04_23.jpg)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.23 – 使用 KMS 更改加密选项](image/B21384_04_23.jpg)'
- en: Figure 4.23 – Changing the encryption options with KMS
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.23 – 使用 KMS 更改加密选项
- en: We can change encryption for an existing object to SSE-KMS as follows. Go to
    the object’s **Properties** tab. Scroll down to the **Server-side encryption settings**
    pane and click on **Edit** . Under **Encryption settings** , select **Use bucket
    settings for default encryption** and click on **Save changes** .
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以按照以下方式更改现有对象的加密为 SSE-KMS。转到该对象的**属性**选项卡。向下滚动到**服务器端加密设置**面板并点击**编辑**。在**加密设置**下，选择**使用桶设置作为默认加密**并点击**保存更改**。
- en: '![Figure 4.24 – Changing the encryption options for an existing object](image/B21384_04_24.jpg)'
  id: totrans-334
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.24 – 更改现有对象的加密选项](image/B21384_04_24.jpg)'
- en: Figure 4.24 – Changing the encryption options for an existing object
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.24 – 更改现有对象的加密选项
- en: 'We can upload an object from the CLI with SSE-KMS using the following command:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过以下命令从 CLI 上传一个对象并使用 SSE-KMS：
- en: '[PRE12]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We will get the following response:'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将收到以下响应：
- en: '![Figure 4.25 – The response for uploading an object from the CLI with SSE-KMS](image/B21384_04_25.jpg)'
  id: totrans-339
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.25 – 从 CLI 上传对象时使用 SSE-KMS 的响应](image/B21384_04_25.jpg)'
- en: Figure 4.25 – The response for uploading an object from the CLI with SSE-KMS
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.25 – 从 CLI 上传对象时使用 SSE-KMS 的响应
- en: Important Note
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: '**sse-kms-key-id** is the ID of the KMS key you created (refer to the *Getting
    ready* section for more details).'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '**sse-kms-key-id** 是您创建的 KMS 密钥的 ID（有关详细信息，请参阅*准备工作*部分）。'
- en: SSE with SSE-C
  id: totrans-343
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 SSE-C 的 SSE
- en: 'We can upload an object from the CLI with SSE-C as follows:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按照以下方式从 CLI 上传一个对象并使用 SSE-C：
- en: 'Upload an object from the CLI with SSE-C by using the following command. Provide
    any set of digits as the key. You will need to use the same to retrieve the object
    later:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令从 CLI 上传一个对象，并通过 SSE-C 进行加密。提供任意一组数字作为密钥。稍后检索对象时，您需要使用相同的密钥：
- en: '[PRE13]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We will get the following response:'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将收到以下响应：
- en: '![Figure 4.26 – The response for uploading an object from the CLI with SSE-C](image/B21384_04_26.jpg)'
  id: totrans-348
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.26 – 从 CLI 上传一个对象时使用 SSE-C 的响应](image/B21384_04_26.jpg)'
- en: Figure 4.26 – The response for uploading an object from the CLI with SSE-C
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.26 – 从 CLI 上传对象时使用 SSE-C 的响应
- en: 'Retrieve the object encrypted using SSE-C, providing the same key we used in
    the previous command, as follows:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式检索使用 SSE-C 加密的对象，提供我们在上一个命令中使用的相同密钥：
- en: '[PRE14]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We will get the following response:'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将收到以下响应：
- en: '![Figure 4.27 – The response for retrieving an object encrypted using SSE-C](image/B21384_04_27.jpg)'
  id: totrans-353
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.27 – 使用 SSE-C 加密的对象的检索响应](image/B21384_04_27.jpg)'
- en: Figure 4.27 – The response for retrieving an object encrypted using SSE-C
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.27 – 使用 SSE-C 加密的对象的检索响应
- en: Tip
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'If we do not specify the **sse-c** option while downloading an object encrypted
    with SSE-C, we will get a **fatal error: An error occurred (400)** exception when
    calling **HeadObject operation: Bad Request** . If we do not specify the correct
    key that was used for encryption (using the **sse-c-key** option) while downloading
    an object encrypted with SSE-C, we will get a **fatal error: An error occurred
    (403)** exception when calling **HeadObject** **operation: Forbidden** .'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在下载使用SSE-C加密的对象时不指定**sse-c**选项，那么在调用**HeadObject操作：Bad Request**时，我们将收到一个**致命错误：发生错误（400）**异常。如果我们在下载使用SSE-C加密的对象时不指定用于加密的正确密钥（使用**sse-c-key**选项），那么在调用**HeadObject操作：Forbidden**时，我们将收到一个**致命错误：发生错误（403）**异常。
- en: How it works...
  id: totrans-357
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In the *SSE with SSE-S3* section, we uploaded an object from the console with
    SSE-S3 encryption. We changed the encryption for an existing object to SSE-S3
    encryption. We also uploaded an object with SSE-S3 encryption. When performing
    SSE-S3 encryption from the CLI, the value of the **sse** parameter is optional.
    The default is **AES256** .
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 在*SSE with SSE-S3*部分，我们使用SSE-S3加密从控制台上传了一个对象。我们将现有对象的加密更改为SSE-S3加密。我们还上传了一个使用SSE-S3加密的对象。在从CLI执行SSE-S3加密时，**sse**参数的值是可选的。默认值为**AES256**。
- en: In the *SSE with SSE-KMS* section, we uploaded an object with SSE-KMS encryption.
    We changed encryption for an existing object to SSE-KMS encryption. We also uploaded
    an object from the CLI with SSE-KMS encryption. When performing SSE-KMS encryption
    from the CLI, the value of the **sse-c** parameter is optional. The default is
    **AES256** .
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 在*SSE with SSE-KMS*部分，我们使用SSE-KMS加密上传了一个对象。我们将现有对象的加密更改为SSE-KMS加密。我们还使用SSE-KMS加密从CLI上传了一个对象。在从CLI执行SSE-KMS加密时，**sse-c**参数的值是可选的。默认值为**AES256**。
- en: In the *SSE with SSE-C* section, we uploaded an object from the CLI with SSE-C
    encryption. Unlike the other two SSE techniques, SSE-S3 and SSE-KMS, the console
    does not currently have an explicit option for SSE-C. We will need to execute
    this using APIs. In this recipe, we used a 32-digit number as the key. However,
    in the real world, keys are generally generated using a key generation tool. We
    will learn more about keys when we discuss KMS later in this book.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 在*SSE with SSE-C*部分，我们使用SSE-C加密从CLI上传了一个对象。与其他两种SSE技术SSE-S3和SSE-KMS不同，控制台目前没有明确的SSE-C选项。我们需要使用API来执行此操作。在这个示例中，我们使用了一个32位数字作为密钥。然而，在现实世界中，密钥通常是使用密钥生成工具生成的。当我们在本书后面讨论KMS时，我们将更多地了解密钥。
- en: There’s more...
  id: totrans-361
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Let’s quickly go through some important concepts related to S3 encryption:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速浏览一些与S3加密相关的重要概念：
- en: Data on S3 can be encrypted while at rest (stored on AWS disks) or in transit
    (moving to and from S3). Encryption at rest can be done using SSE or by uploading
    encrypted data from the client.
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: S3上的数据可以在静态（存储在AWS磁盘上）或传输（移动到和从S3）时进行加密。静态加密可以使用SSE或通过从客户端上传加密数据来完成。
- en: S3 SSE techniques for data at rest use symmetric keys for encryption.
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: S3静态数据的SSE技术使用对称密钥进行加密。
- en: Encryption of data in transit using SSL/TLS (HTTPS) uses asymmetric keys for
    encryption.
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SSL/TLS（HTTPS）进行传输中的数据加密使用非对称密钥进行加密。
- en: S3 default encryption (available as bucket properties) provides a way to set
    the default encryption behavior for an S3 bucket with SSE-S3 or SSE-KMS. Enabling
    this property does not affect existing objects in our bucket and applies only
    to new objects uploaded.
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: S3默认加密（作为存储桶属性可用）提供了一种设置S3存储桶默认加密行为的方式，使用SSE-S3或SSE-KMS。启用此属性不会影响存储桶中的现有对象，仅适用于上传的新对象。
- en: With client-side encryption, we need to manage keys on our own. We can also
    use KMS to manage keys through SDKs. However, it is not currently supported by
    all SDKs.
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用客户端端加密时，我们需要自行管理密钥。我们也可以通过SDK使用KMS来管理密钥。然而，并非所有SDK目前都支持。
- en: Encryption in transit can be achieved with client-side encryption or by using
    SSL/TLS (HTTPS).
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传输中的加密可以通过客户端端加密或使用SSL/TLS（HTTPS）来实现。
- en: SSE types, SSE-S3 and SSE-KMS, follow envelope encryption, while SSE-C does
    not use envelope encryption.
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSE类型SSE-S3和SSE-KMS遵循信封加密，而SSE-C不使用信封加密。
- en: 'Some important features of SSE-S3 include the following:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: SSE-S3的一些重要特点包括以下内容：
- en: AWS takes care of all key management.
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS负责所有密钥管理。
- en: It follows envelope encryption.
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它遵循信封加密。
- en: It uses symmetric keys to encrypt data.
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用对称密钥加密数据。
- en: Each object is encrypted with a unique key.
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个对象都使用唯一的密钥加密。
- en: It uses the AES-256 algorithm.
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用AES-256算法。
- en: A data key is encrypted with a master key that is automatically rotated periodically.
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据密钥使用主密钥加密，主密钥会定期自动轮换。
- en: It is free.
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是免费的。
- en: 'Some important features of SSE-KMS include the following:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: SSE-KMS的一些重要特性包括：
- en: Keys are managed by AWS KMS.
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密钥由AWS KMS管理。
- en: Keys can be shared by multiple services ( including S3).
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密钥可以被多个服务共享（包括S3）。
- en: As customers, we get more control over keys, such as creating master and data
    keys, and disabling and rotating master keys.
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为客户，我们可以更好地控制密钥，例如创建主密钥和数据密钥，以及禁用和轮换主密钥。
- en: It follows envelope encryption.
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它遵循信封加密方式。
- en: It uses symmetric keys to encrypt data.
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用对称密钥加密数据。
- en: A data key is encrypted with a master key.
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据密钥使用主密钥加密。
- en: It uses the AES-256 algorithm.
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用AES-256算法。
- en: We can choose which object key to encrypt while uploading objects.
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以选择在上传对象时加密特定的对象密钥。
- en: We can use CloudTrail to monitor KMS API calls, enabling better auditing.
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用CloudTrail监控KMS API调用，从而实现更好的审计。
- en: It is not free.
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不是免费的。
- en: 'Some important features of SSE-C include the following:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: SSE-C的一些重要特性包括：
- en: Keys are managed by us (customers).
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密钥由我们（客户）管理。
- en: The customer provides a key along with data; S3 uses this key for encryption
    and deletes the key.
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户提供密钥和数据；S3使用此密钥进行加密后删除该密钥。
- en: The key must be supplied for decryption as well.
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解密时也必须提供密钥。
- en: It does not use envelope encryption.
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不使用信封加密。
- en: It uses symmetric keys to encrypt data.
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用对称密钥加密数据。
- en: It uses the AES-256 algorithm.
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用AES-256算法。
- en: AWS will force you to use HTTPS while uploading data since you are uploading
    your symmetric key as well.
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于你也在上传对称密钥，AWS将强制你在上传数据时使用HTTPS。
- en: It is free.
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是免费的。
- en: 'By default, S3 allows both HTTP and HTTPS access to data; HTTPS can be enforced
    with the help of a bucket policy with the following condition element:'
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，S3允许通过HTTP和HTTPS访问数据；可以通过桶策略中的以下条件元素强制使用HTTPS：
- en: '[PRE15]'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Any requests without HTTPS will fail with this condition.
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 没有HTTPS的任何请求都会因该条件而失败。
- en: See also
  id: totrans-401
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: Understand the basics of Amazon S3 encryption from [https://www.cloudericks.com/blog/understanding-amazon-s3-encryption](https://www.cloudericks.com/blog/understanding-amazon-s3-encryption)
    .
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Amazon S3加密的基础知识，请访问[https://www.cloudericks.com/blog/understanding-amazon-s3-encryption](https://www.cloudericks.com/blog/understanding-amazon-s3-encryption)。
- en: Understand more about S3 bucket key for SSE-KMS encryption from [https://www.cloudericks.com/blog/understanding-s3-bucket-key-for-sse-kms-encryption](https://www.cloudericks.com/blog/understanding-s3-bucket-key-for-sse-kms-encryption)
    .
  id: totrans-403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解更多关于SSE-KMS加密的S3桶密钥， 请访问[https://www.cloudericks.com/blog/understanding-s3-bucket-key-for-sse-kms-encryption](https://www.cloudericks.com/blog/understanding-s3-bucket-key-for-sse-kms-encryption)。
- en: Read more about encryption at [https://www.secdops.com/blog/getting-started-with-encryption](https://www.secdops.com/blog/getting-started-with-encryption)
    .
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读更多关于加密的信息，访问[https://www.secdops.com/blog/getting-started-with-encryption](https://www.secdops.com/blog/getting-started-with-encryption)。
