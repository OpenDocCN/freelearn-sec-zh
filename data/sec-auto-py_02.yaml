- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Configuring Python – Setting Up Your Development Environment
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Python —— 设置你的开发环境
- en: Before diving into the world of security automation with Python, it’s crucial
    to establish a well-configured development environment. A properly set up environment
    ensures that you can efficiently write, test, and deploy Python scripts for various
    security tasks. This chapter will guide you through the process of configuring
    Python on your system, setting up essential tools, and creating a solid foundation
    for effective development.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解使用 Python 进行安全自动化之前，首先要建立一个良好的开发环境。一个正确配置的环境能确保你高效地编写、测试和部署 Python 脚本，完成各种安全任务。本章将指导你如何在系统上配置
    Python，设置必需的工具，并为有效开发奠定坚实的基础。
- en: Python is widely regarded as a top choice for security automation due to its
    simplicity, readability, and extensive libraries that cater specifically to security
    needs. Its versatility allows for the rapid development of scripts that can automate
    tedious tasks, interact with APIs, and analyze data efficiently, making it an
    invaluable tool for security professionals.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Python 被广泛认为是安全自动化的首选语言，因其简洁性、可读性以及众多专门面向安全需求的库。Python 的多功能性使得它可以迅速开发出自动化脚本，执行繁琐的任务、与
    API 交互以及高效地分析数据，是安全专业人士不可或缺的工具。
- en: We will walk through installing Python, managing dependencies using virtual
    environments, and utilizing **integrated development environments** ( **IDEs**
    ) for an optimized workflow. Whether you’re working on Windows, macOS, or Linux,
    this chapter will provide step-by-step instructions to get your Python environment
    up and running. By the end, you’ll be equipped with the right tools and configurations
    to begin automating security tasks with Python seamlessly.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将逐步介绍如何安装 Python，使用虚拟环境管理依赖项，并利用**集成开发环境**（**IDE**）来优化工作流程。无论你使用的是 Windows、macOS
    还是 Linux，本章都会提供逐步的说明，帮助你配置好 Python 环境，并开始顺利使用 Python 自动化安全任务。
- en: 'In this chapter, we’ll cover the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将覆盖以下内容：
- en: Setting up and using Python virtual environments
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置和使用 Python 虚拟环境
- en: Security best practices
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全最佳实践
- en: Learning resources
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习资源
- en: Installing essential libraries—tools for security automation
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装必需的库——安全自动化工具
- en: Best practices for security automation and customization
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全自动化与自定义的最佳实践
- en: Best practices and customization—optimizing your Python setup
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最佳实践与自定义——优化你的 Python 配置
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Configuring Python for development or security automation requires several
    technical components to ensure smooth operation and compatibility with various
    tools and libraries. Here is an overview of the essential technical requirements:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保顺利操作并与各种工具和库兼容，配置 Python 用于开发或安全自动化需要满足多个技术要求。以下是这些必需技术组件的概述：
- en: '**Python installation** :'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python 安装**：'
- en: '**Python version** : Ensure the latest stable version of Python is installed,
    typically Python 3.x. Older versions (such as Python 2.x) are deprecated and lack
    support for many modern libraries.'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python 版本**：确保安装最新的稳定版本的 Python，通常为 Python 3.x。较旧版本（如 Python 2.x）已经不再支持，且无法兼容许多现代库。'
- en: '**Cross-platform support** : Python runs on Windows, macOS, and Linux, so ensure
    your system meets the **operating system** ( **OS** ) requirements for Python
    installation.'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨平台支持**：Python 可以在 Windows、macOS 和 Linux 上运行，因此请确保你的系统满足 Python 安装的**操作系统**（**OS**）要求。'
- en: '**Installation package** : Use the official Python installer from [https://www.python.org/downloads/](https://www.python.org/downloads/)
    or package managers such as **brew** (for macOS), **apt** (for Linux), or **choco**
    (for Windows) to install Python.'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装包**：使用官方的 Python 安装程序从 [https://www.python.org/downloads/](https://www.python.org/downloads/)
    下载，或者通过包管理器（如 **brew**（适用于 macOS）、**apt**（适用于 Linux）、**choco**（适用于 Windows））来安装
    Python。'
- en: '**Development environment** :'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发环境**：'
- en: '**IDE or text editor** : Set up a Python-friendly IDE such as PyCharm, **Visual
    Studio Code** ( **VS Code** ), or Sublime Text. These editors often come with
    syntax highlighting, debugging tools, and linting to streamline development.'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IDE 或文本编辑器**：设置一个适合 Python 的 IDE，如 PyCharm、**Visual Studio Code**（**VS Code**）或
    Sublime Text。这些编辑器通常提供语法高亮、调试工具和代码检查，以简化开发过程。'
- en: '**Virtual environment setup** : It’s essential to create isolated Python environments
    using tools such as **venv** or **virtualenv** to manage dependencies for each
    project independently and avoid conflicts between libraries.'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟环境设置**：使用 **venv** 或 **virtualenv** 等工具创建隔离的 Python 环境，对于独立管理每个项目的依赖并避免库之间的冲突至关重要。'
- en: '**Package management** :'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包管理**：'
- en: '**pip (Python package installer** ): Ensure **pip** is installed to handle
    Python libraries and dependencies. The **pip** package installer comes bundled
    with Python in most distributions, but you can verify it by running **pip --version**
    .'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pip（Python 包安装器）**：确保已安装 **pip** 来处理 Python 库和依赖。**pip** 包安装器大多数 Python 发行版中都会捆绑，但您可以通过运行
    **pip --version** 来验证它是否安装。'
- en: '**Package repositories** : For security automation, you may need to install
    specific packages such as **requests** , **scapy** , or **paramiko** . You can
    find and install these from the **Python Package Index** ( **PyPI** ) using **pip**
    **install <package-name>** .'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包仓库**：对于安全自动化，您可能需要安装特定的包，如 **requests**、**scapy** 或 **paramiko**。您可以通过 **pip
    install <package-name>** 从 **Python 包索引**（**PyPI**）中找到并安装这些包。'
- en: System dependencies
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统依赖
- en: 'OS-specific dependencies refer to software libraries or components that are
    tailored to work with a particular OS. Different OSs—such as Windows, macOS, and
    Linux—have distinct architectures, filesystems, and methods for handling system
    calls and resources. Consequently, certain libraries or tools may function optimally
    or only on specific OS platforms:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统特定的依赖指的是针对特定操作系统定制的软件库或组件。不同的操作系统——如 Windows、macOS 和 Linux——具有不同的架构、文件系统以及处理系统调用和资源的方法。因此，某些库或工具可能只能在特定的操作系统平台上最佳运行或仅能运行：
- en: '**OS-specific libraries** : Some Python libraries may require OS-specific dependencies.
    For example, **libpcap** is required for packet sniffing with **scapy** , and
    **libssl-dev** is often needed for cryptography packages.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作系统特定的库**：某些 Python 库可能需要操作系统特定的依赖。例如，进行 **scapy** 的数据包嗅探时需要 **libpcap**，而加密包通常需要
    **libssl-dev**。'
- en: '**Python path configuration** : Ensure that Python and **pip** are properly
    added to your system’s environment variables so they can be accessed from the
    command line.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python 路径配置**：确保将 Python 和 **pip** 正确添加到系统的环境变量中，这样它们就可以通过命令行访问。'
- en: By ensuring these technical requirements are met, you will be ready to configure
    Python for development or security automation, with full access to its rich ecosystem
    of tools and libraries.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通过确保满足这些技术要求，您将能够为开发或安全自动化配置 Python，并充分访问其丰富的工具和库生态系统。
- en: Setting up and using Python virtual environments
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置和使用 Python 虚拟环境
- en: Setting up Python in a **virtual environment** is a best practice that offers
    several significant advantages, particularly when working on multiple projects
    or using various libraries and dependencies. The following subsections explain
    why setting up Python in a virtual environment is important.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **虚拟环境** 中设置 Python 是一种最佳实践，特别是在处理多个项目或使用不同的库和依赖时，提供了几个重要的优势。以下小节将解释为何在虚拟环境中设置
    Python 很重要。
- en: Dependency isolation
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 依赖隔离
- en: A virtual environment creates an isolated space where project-specific libraries
    and dependencies are installed. This ensures that dependencies for one project
    do not conflict with those of another. Without a virtual environment, installing
    packages globally can lead to version conflicts, especially when different projects
    require different versions of the same package.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟环境创建了一个隔离的空间，在其中安装了项目特定的库和依赖。这确保了一个项目的依赖不会与另一个项目的依赖发生冲突。如果没有虚拟环境，全局安装包可能会导致版本冲突，尤其是当不同项目需要同一包的不同版本时。
- en: For example, Project A might require **Django 3.1** , while Project B requires
    **Django 2.2** . Without a virtual environment, managing both versions simultaneously
    would be difficult.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，项目 A 可能需要 **Django 3.1**，而项目 B 需要 **Django 2.2**。如果没有虚拟环境，同时管理这两个版本将变得非常困难。
- en: What is Django?
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是 Django？
- en: Django is a high-level web framework for building web applications using the
    Python programming language. It follows the **Model-View-Template** ( **MVT**
    ) architectural pattern and is designed to promote rapid development, clean design,
    and the creation of scalable and secure web applications.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Django 是一个高级 Web 框架，用于使用 Python 编程语言构建 Web 应用程序。它遵循 **模型-视图-模板**（**MVT**）架构模式，旨在促进快速开发、清晰设计，并创建可扩展和安全的
    Web 应用程序。
- en: Reproducibility
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可复现性
- en: 'Virtual environments make it easy to replicate the exact setup of a project,
    ensuring that others working on the same project or moving the project to a different
    system can run it without issues. By using a virtual environment and a **requirements.txt**
    file (which lists all the installed packages and their versions), you can easily
    recreate the environment by running the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟环境使得精确复制项目的设置变得简单，确保其他与同一项目合作或将项目移至不同系统的人员能够顺利运行。通过使用虚拟环境和 **requirements.txt**
    文件（其中列出了所有安装的包及其版本），你可以通过运行以下命令轻松重建环境：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This leads to consistent development environments across different machines
    and reduces the likelihood of “ *it works on my* *machine* ” issues.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以确保在不同的机器上开发环境的一致性，并减少“*它在我的* *机器* 上可以运行”问题的发生。
- en: Avoiding polluting the global Python installation
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免污染全局 Python 安装
- en: Installing libraries and dependencies directly into the global Python environment
    can lead to unnecessary clutter and potential system conflicts. A virtual environment
    keeps the global Python installation clean and untouched. This also reduces the
    risk of accidentally breaking system-wide applications that rely on specific Python
    packages.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 直接将库和依赖项安装到全局 Python 环境中可能会导致不必要的混乱和潜在的系统冲突。虚拟环境保持全局 Python 安装的清洁和完整。这也减少了意外破坏依赖特定
    Python 包的系统级应用程序的风险。
- en: For instance, system tools or applications on Linux that depend on a particular
    version of **requests** might break if you install or upgrade a package globally
    without knowing its impact.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你在 Linux 上的系统工具或应用程序依赖于某个特定版本的 **requests**，而你在不清楚影响的情况下全局安装或升级了某个包，这可能会导致系统崩溃。
- en: Flexibility in experimentation
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 灵活的实验性
- en: Virtual environments allow you to experiment with different libraries, versions,
    and configurations without risking your primary setup. You can create and discard
    virtual environments as needed, providing a safe space for testing new tools,
    libraries, or frameworks.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟环境允许你在不影响主要设置的情况下，实验不同的库、版本和配置。你可以根据需要创建和丢弃虚拟环境，为测试新工具、库或框架提供一个安全的空间。
- en: Using a virtual environment in Python development is critical for dependency
    management, project reproducibility, and preventing conflicts between projects.
    It ensures cleaner project organization and greater flexibility, making it a vital
    part of Python development workflows.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 开发中使用虚拟环境对于依赖管理、项目可重复性以及防止项目之间的冲突至关重要。它确保了项目组织的清晰性和更大的灵活性，是 Python
    开发工作流中不可或缺的一部分。
- en: Common pitfalls to avoid
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见的陷阱需要避免
- en: 'While virtual environments offer significant advantages, there are some common
    pitfalls that developers should be aware of:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管虚拟环境提供了显著的优势，但开发人员应当了解一些常见的陷阱：
- en: '**Failing to activate the environment** : One of the most frequent mistakes
    is forgetting to activate the virtual environment before running a script or installing
    packages. This can lead to installing packages in the global environment rather
    than the intended virtual environment, resulting in unexpected behavior.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**未激活环境**：最常见的错误之一是忘记在运行脚本或安装包之前激活虚拟环境。这可能导致将包安装到全局环境中，而不是预期的虚拟环境中，从而导致意外的行为。'
- en: '**Mismatched dependencies** : If you create multiple virtual environments for
    different projects, ensure that you keep track of the required dependencies for
    each one. Inconsistent dependencies across environments can lead to confusion
    and errors when switching between projects.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖项不匹配**：如果你为不同的项目创建多个虚拟环境，请确保跟踪每个环境所需的依赖项。不同环境之间的依赖项不一致可能导致在切换项目时出现混乱和错误。'
- en: '**Not updating the requirements.txt file** : After installing new packages,
    it’s essential to update your **requirements.txt** file to reflect these changes.
    Failing to do so can make it challenging to replicate the environment later.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**未更新 requirements.txt 文件**：安装新包后，必须更新 **requirements.txt** 文件以反映这些更改。如果不更新，它可能会使以后复制环境变得困难。'
- en: By being mindful of these potential pitfalls and actively managing your virtual
    environments, you can enjoy the full benefits they offer while minimizing issues
    that could disrupt your development workflow.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通过留意这些潜在的陷阱，并积极管理你的虚拟环境，你可以享受它们提供的全部优势，同时减少可能破坏开发工作流程的问题。
- en: Installing Python
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Python
- en: 'To install Python, simply download the latest version from the official Python
    website, run the installer, and ensure you check the box to add Python to your
    system’s **PATH** environment variable for easy access. Instructions for the different
    platforms are provided next:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Python，只需从官方Python网站下载最新版本，运行安装程序，并确保勾选框以将Python添加到系统的**PATH**环境变量中，方便访问。以下是不同平台的安装说明：
- en: '**Windows** :'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows**：'
- en: 'Download Python:'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载Python：
- en: Go to the official Python website ( [https://www.python.org/downloads/](https://www.python.org/downloads/)
    ).
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问官方Python网站（ [https://www.python.org/downloads/](https://www.python.org/downloads/)
    ）。
- en: Download the latest version of Python for Windows.
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载最新版本的Windows版Python。
- en: 'Run the installer:'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行安装程序：
- en: Run the downloaded installer.
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行下载的安装程序。
- en: Make sure to check the box that says **Add Python** **to PATH** .
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保勾选**Add Python to PATH**框。
- en: Choose **Install Now** or **Customize installation** for more options (such
    as setting the installation location or enabling/disabling optional features).
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Install Now**或**Customize installation**以获取更多选项（例如设置安装位置或启用/禁用可选功能）。
- en: '**macOS** :'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**macOS**：'
- en: 'Download Python:'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载Python：
- en: Go to the official Python website ( [https://www.python.org/downloads/](https://www.python.org/downloads/)
    ).
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问官方Python网站（ [https://www.python.org/downloads/](https://www.python.org/downloads/)
    ）。
- en: Download the latest version of Python for macOS.
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载最新版本的macOS版Python。
- en: 'Run the installer: Run the downloaded installer and follow the instructions.'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行安装程序：运行下载的安装程序并按照说明操作。
- en: 'Using Homebrew ( alternative method):'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Homebrew（备用方法）：
- en: Install Homebrew from **brew.sh** ( [https://brew.sh/](https://brew.sh/) ).
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从**brew.sh**（ [https://brew.sh/](https://brew.sh/) ）安装Homebrew。
- en: Open a terminal and run **brew** **install python** .
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开终端并运行**brew install python**。
- en: '**Linux** :'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linux**：'
- en: 'Using a package manager:'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用包管理器：
- en: '**Debian-based (Ubuntu)** : Run **sudo apt-get update** and **sudo apt-get**
    **install python3**'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于Debian的（Ubuntu）**：运行**sudo apt-get update**和**sudo apt-get install python3**'
- en: '**Red Hat-based (Fedora)** : Run **sudo dnf** **install python3**'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于Red Hat的（Fedora）**：运行**sudo dnf install python3**'
- en: '**Arch-based** : Run **sudo pacman -** **S python**'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于Arch的**：运行**sudo pacman -S python**'
- en: By following the installation steps and properly configuring your system, including
    adding Python to your **PATH** environment variable and setting up virtual environments,
    you’ll be ready to start coding efficiently and manage projects seamlessly.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通过按照安装步骤并正确配置系统，包括将Python添加到**PATH**环境变量和设置虚拟环境，您将能够高效地开始编写代码并无缝地管理项目。
- en: Setting up a virtual environment
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置虚拟环境
- en: Let us learn how to create and configure a Python virtual environment to isolate
    project-specific dependencies. We’ll explore how virtual environments help manage
    different library versions and prevent conflicts across multiple projects.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们学习如何创建和配置Python虚拟环境，以隔离项目特定的依赖关系。我们将探讨虚拟环境如何帮助管理不同的库版本，并防止多个项目之间的冲突。
- en: 'Follow these steps to set up a virtual environment:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤设置虚拟环境：
- en: 'Install **venv** (if not already installed):'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装**venv**（如果尚未安装）：
- en: Run **pip install virtualenv** (for Python 2).
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行**pip install virtualenv**（对于Python 2）。
- en: For Python 3, **venv** is included in the standard library.
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于Python 3，**venv**已包含在标准库中。
- en: 'Create a virtual environment:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建虚拟环境：
- en: Navigate to your project directory.
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的项目目录。
- en: Run **python -m venv env** (where **env** is the name of your virtual environment).
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行**python -m venv env**（其中**env**是虚拟环境的名称）。
- en: 'Activate the virtual environment:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活虚拟环境：
- en: 'Windows: **.\env\Scripts\activate** .'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Windows：**.\env\Scripts\activate**。
- en: 'macOS/Linux: **source env/bin/activate** .'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: macOS/Linux：**source env/bin/activate**。
- en: 'Deactivate the virtual environment:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 退出虚拟环境：
- en: Run **deactivate** .
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行**deactivate**。
- en: In conclusion, setting up a Python virtual environment is crucial for managing
    dependencies and ensuring project isolation. By using virtual environments, you
    create a more organized and conflict-free development process, allowing for smoother
    and more flexible project management.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，设置Python虚拟环境对于管理依赖关系和确保项目隔离至关重要。通过使用虚拟环境，您可以创建一个更加有组织且无冲突的开发过程，从而使项目管理更加顺畅和灵活。
- en: Installing an IDE
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装IDE
- en: 'Choosing an IDE depends on your preference. Here are some popular ones:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 选择IDE取决于您的个人偏好。以下是一些流行的IDE：
- en: '**VS Code** :'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VS Code**：'
- en: 'Download and install:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装：
- en: Download VS Code from the VS Code website ( [https://code.visualstudio.com/](https://code.visualstudio.com/)
    ).
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从VS Code网站下载VS Code（ [https://code.visualstudio.com/](https://code.visualstudio.com/)
    ）。
- en: Install the downloaded file.
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装下载的文件。
- en: 'Install the Python extension:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Python扩展：
- en: Open VS Code.
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开VS Code。
- en: Go to **Extensions** ( *Ctrl* + *Shift* + *X* ).
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进入 **扩展**（ *Ctrl* + *Shift* + *X* ）。
- en: Search for **Python** and install the Microsoft extension.
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索 **Python** 并安装Microsoft扩展。
- en: 'Configure the Python interpreter:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置Python解释器：
- en: Open the Command Palette ( *Ctrl* + *Shift* + *P* ).
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开命令面板（ *Ctrl* + *Shift* + *P* ）。
- en: Type **Python:** **Select Interpreter** .
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入 **Python:** **选择解释器**。
- en: Choose your virtual environment’s interpreter.
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择你的虚拟环境解释器。
- en: '**PyCharm** :'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PyCharm**：'
- en: 'Download and install:'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装：
- en: Download PyCharm from the JetBrains website ( [https://www.jetbrains.com/pycharm/](https://www.jetbrains.com/pycharm/)
    ).
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从JetBrains网站下载PyCharm（ [https://www.jetbrains.com/pycharm/](https://www.jetbrains.com/pycharm/)
    ）。
- en: Install the downloaded file.
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装下载的文件。
- en: 'Configure the project interpreter:'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置项目解释器：
- en: Open PyCharm.
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开PyCharm。
- en: Create a new project or open an existing one.
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新项目或打开现有项目。
- en: 'Go to **File** | **Settings** | **Project: <Project Name>** | **Project Interpreter**
    .'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '进入 **文件** | **设置** | **项目: <项目名称>** | **项目解释器**。'
- en: Add your virtual environment’s interpreter.
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加你的虚拟环境解释器。
- en: '**Other IDEs** :'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**其他IDE**：'
- en: '**Jupyter Notebook** : For data science projects. Install via **pip install
    notebook** and run with **jupyter notebook** .'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jupyter Notebook** : 用于数据科学项目。通过 **pip install notebook** 安装，并使用 **jupyter
    notebook** 运行。'
- en: '**Sublime Text** : Lightweight editor with Python support via plugins.'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sublime Text** : 轻量级编辑器，通过插件支持Python。'
- en: '**Atom** : Another lightweight editor with Python support via plugins.'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Atom** : 另一款轻量级编辑器，通过插件支持Python。'
- en: With features such as code completion, debugging tools, and project management
    capabilities, an IDE simplifies development, allowing you to focus on writing
    efficient and error-free code while managing projects more effectively.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 具备如代码自动完成、调试工具和项目管理功能等特性，IDE简化了开发过程，让你能够专注于编写高效且无错误的代码，同时更有效地管理项目。
- en: Choosing an IDE for security automation
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为安全自动化选择IDE
- en: 'Selecting the right IDE can significantly impact your workflow when writing
    Python scripts for security automation. Here are some popular IDEs within the
    security community, along with what makes them particularly suited for security
    tasks:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 选择合适的IDE对你在编写安全自动化Python脚本时的工作流有着重大影响。以下是安全社区中一些流行的IDE，以及它们为何特别适合安全任务：
- en: '**PyCharm** : PyCharm, developed by JetBrains, is highly favored in the security
    community for its robust features and comprehensive support for Python. Its features
    (such as code analysis, an integrated debugger, and support for virtual environments)
    make it ideal for complex security scripts. PyCharm Professional even has dedicated
    tools for database integration and scientific libraries, which are useful for
    advanced security analysis.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PyCharm** : PyCharm由JetBrains开发，在安全社区中非常受欢迎，因其强大的功能和对Python的全面支持。它的功能（如代码分析、集成调试器以及对虚拟环境的支持）使其成为复杂安全脚本的理想选择。PyCharm专业版甚至具备数据库集成和科学库的专用工具，这对于高级安全分析非常有用。'
- en: '**VS Code** : Known for its versatility and customization options, VS Code
    is a popular choice for security professionals. Its rich extension ecosystem includes
    plugins for Python, Docker, remote development, and even security-specific tools
    such as code linters and vulnerability checkers. It’s lightweight but powerful,
    making it suitable for developers who want a highly customizable environment without
    sacrificing performance.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VS Code** : 以其多功能性和高度定制化选项而闻名，VS Code是安全专业人员的热门选择。其丰富的扩展生态系统包括Python、Docker、远程开发，甚至是安全特定工具，如代码检查器和漏洞扫描器。它轻量但强大，非常适合那些想要一个高度定制化环境而又不妥协性能的开发人员。'
- en: '**Jupyter Notebook** : Although not a traditional IDE, Jupyter Notebook is
    widely used in the security field for data analysis, exploratory scripting, and
    rapid prototyping. Its cell-based format is excellent for testing security scripts,
    analyzing data, and presenting results step by step. It’s particularly useful
    for security professionals who need to perform vulnerability assessments or automate
    report generation interactively.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jupyter Notebook** : 虽然不是传统的IDE，Jupyter Notebook在安全领域广泛用于数据分析、探索性脚本编写和快速原型开发。其基于单元格的格式非常适合测试安全脚本、分析数据以及逐步展示结果。对于需要进行漏洞评估或交互式报告生成的安全专业人员尤其有用。'
- en: '**Atom** : Atom is an open source editor that offers Python support through
    plugins. Its flexibility and strong community support make it a good option for
    those looking for a lightweight and customizable editor. Atom’s **Teletype** feature
    also allows for live collaboration, which can be helpful when working with security
    teams.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Atom**：Atom 是一款开源编辑器，通过插件提供对 Python 的支持。它的灵活性和强大的社区支持使其成为寻找轻量级且可定制编辑器的理想选择。Atom
    的**Teletype**功能还支持实时协作，这在与安全团队合作时非常有用。'
- en: '**Sublime Text** : Lightweight and fast, Sublime Text is ideal for quick edits
    and script development on the go. While it lacks some built-in debugging tools,
    it’s highly customizable and can be extended to support Python development with
    packages such as Anaconda. Many security professionals appreciate Sublime Text
    for its minimalism and efficiency.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sublime Text**：轻量且快速，Sublime Text 非常适合快速编辑和脚本开发。尽管它缺乏一些内置的调试工具，但它高度可定制，并且可以通过如
    Anaconda 等包扩展来支持 Python 开发。许多安全专家赞赏 Sublime Text 的简洁性和高效性。'
- en: While either of these IDEs will work for security automation, choosing the right
    one depends on your personal preferences, specific project needs, and whether
    you prioritize features such as debugging, collaboration, or lightweight speed.
    Experimenting with a few can help you find the best fit for your development style.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这两款 IDE 都可以用于安全自动化，但选择合适的工具取决于你的个人偏好、具体的项目需求以及你是否优先考虑调试、协作或轻量化速度等特性。尝试几款工具可以帮助你找到最适合你开发风格的工具。
- en: Installing essential Python packages
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装必需的 Python 包
- en: 'When using **pip** to install packages, the commands work across all major
    OSs (Windows, macOS, and Linux) but are entered in different **command-line interfaces**
    ( **CLIs** ) depending on the OS:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**pip**安装包时，命令适用于所有主要操作系统（Windows、macOS 和 Linux），但根据操作系统的不同，它们会被输入到不同的**命令行界面**（**CLIs**）中：
- en: '**Windows** : You’d typically use **Command Prompt** ( **CMD** ) or **PowerShell**
    . The command to install packages is the following:'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows**：你通常会使用**命令提示符**（**CMD**）或**PowerShell**。安装包的命令如下：'
- en: '[PRE1]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**macOS and Linux** : The installation happens in **Terminal** . The command
    is the same as on Windows:'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**macOS 和 Linux**：安装过程发生在**终端**。命令与 Windows 上的相同：'
- en: '[PRE2]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If Python was installed recently, **pip** should work right from these command-line
    tools on all three OSs. But it’s worth noting a couple of key points:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果最近安装了 Python，**pip** 应该能在这三大操作系统的命令行工具中直接使用。但值得注意的是有几点要特别注意：
- en: '**Python environment setup** : On some systems, especially macOS and Linux,
    you may need to use **pip3** instead of **pip** if both Python 2 and Python 3
    are installed. In such cases, the command would look like this:'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python 环境设置**：在一些系统上，尤其是 macOS 和 Linux，如果安装了 Python 2 和 Python 3，你可能需要使用**pip3**而非**pip**。在这种情况下，命令如下：'
- en: '[PRE3]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Virtual environments** : If working within a virtual environment, make sure
    the environment is activated first. This ensures the packages are installed within
    the environment rather than system-wide.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟环境**：如果在虚拟环境中工作，请确保首先激活该环境。这可以确保包被安装在该环境中，而不是全局系统中。'
- en: 'Let’s summarize what we’ve just learned:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们总结一下刚刚学到的内容：
- en: '**Command Prompt or PowerShell** is generally used on Windows.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令提示符或 PowerShell**通常在 Windows 上使用。'
- en: '**Terminal** is used on macOS and Linux.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**终端**用于 macOS 和 Linux。'
- en: '**Virtual environments** should be activated before running any **pip** installation
    to manage dependencies specific to the project.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在运行任何**pip**安装之前，应先激活**虚拟环境**以管理项目特定的依赖项。
- en: 'Using **pip** , you can install the necessary packages in the following way:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**pip**，你可以通过以下方式安装所需的包：
- en: 'Upgrade **pip** :'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 升级**pip**：
- en: Run **pip install --** **upgrade pip** .
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行**pip install --** **upgrade pip**。
- en: 'Install packages. Commonly used packages include the following (the command
    to install each package follows the package name):'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装包。常用的包包括以下内容（每个包的安装命令紧随包名）：
- en: '**numpy** : **pip** **install numpy**'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**numpy**：**pip** **install numpy**'
- en: '**pandas** : **pip** **install pandas**'
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pandas**：**pip** **install pandas**'
- en: '**requests** : **pip** **install requests**'
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**requests**：**pip** **install requests**'
- en: '**matplotlib** : **pip** **install matplotlib**'
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**matplotlib**：**pip** **install matplotlib**'
- en: '**scipy** : **pip** **install scipy**'
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**scipy**：**pip** **install scipy**'
- en: '**scikit-learn** : **pip** **install scikit-learn**'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**scikit-learn**：**pip** **install scikit-learn**'
- en: 'Freeze requirements:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 冻结需求：
- en: To create a **requirements.txt** file listing your dependencies, run **pip freeze
    >** **requirements.txt** .
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要创建一个列出依赖项的**requirements.txt**文件，请运行**pip freeze >** **requirements.txt**。
- en: To install dependencies from a **requirements.txt** file, run **pip install
    -** **r requirements.txt** .
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要从**requirements.txt**文件安装依赖项，请运行**pip install -r requirements.txt**。
- en: By leveraging tools such as **pip** to install libraries, you can easily integrate
    powerful features into your projects, streamline workflows, and access a vast
    ecosystem of pre-built modules, ensuring efficient and flexible coding across
    various applications.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用**pip**等工具安装库，你可以轻松地将强大的功能集成到项目中，简化工作流程，并访问大量预构建的模块生态系统，从而确保在各种应用程序中高效且灵活的编码。
- en: Additional tool – virtualenvwrapper
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附加工具 – virtualenvwrapper
- en: For those looking to streamline their virtual environment management, **virtualenvwrapper**
    is a valuable tool that extends the capabilities of **virtualenv** . It provides
    additional commands and features that can enhance productivity, especially for
    users managing multiple projects or frequently switching between environments.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些希望简化虚拟环境管理的人，**virtualenvwrapper**是一个有价值的工具，它扩展了**virtualenv**的功能。它提供了额外的命令和功能，能提高生产力，特别是对于管理多个项目或频繁在环境之间切换的用户。
- en: 'Some advantages of **virtualenvwrapper** include the following:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**virtualenvwrapper**的一些优点包括：'
- en: '**Centralized location** : By default, **virtualenvwrapper** keeps all virtual
    environments in a single directory, making them easy to find and manage.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集中位置**：默认情况下，**virtualenvwrapper**将所有虚拟环境保存在一个目录中，使它们易于查找和管理。'
- en: '**Convenient commands** : It adds commands such as **mkvirtualenv** (for creating
    environments), **workon** (for activating environments), and **rmvirtualenv**
    (for removing environments), which simplify workflows and reduce the need to remember
    paths.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**便捷命令**：它添加了命令，如**mkvirtualenv**（用于创建环境）、**workon**（用于激活环境）和**rmvirtualenv**（用于删除环境），简化了工作流程并减少了记住路径的需求。'
- en: '**Automatic activation** : With **workon** , you can switch environments seamlessly
    without needing to navigate to the environment directory manually.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动激活**：使用**workon**，你可以无缝切换环境，无需手动导航到环境目录。'
- en: 'To get started with **virtualenvwrapper** , you can install it with **pip**
    :'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用**virtualenvwrapper**，你可以使用**pip**安装它：
- en: '[PRE4]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'On macOS and Linux, you’ll need to add the following to your shell’s startup
    file (for example, **.bashrc** or **.zshrc** ):'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS和Linux上，你需要将以下内容添加到你的shell启动文件中（例如，**.bashrc**或**.zshrc**）：
- en: '[PRE5]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'On Windows, you can use **virtualenvwrapper-win** instead:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，你可以改用**virtualenvwrapper-win**：
- en: '[PRE6]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: With **virtualenvwrapper** , managing multiple environments becomes easier,
    making it an excellent addition for those advancing in their Python and security
    automation work.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**virtualenvwrapper**，管理多个环境变得更加容易，它是那些在Python和安全自动化工作中不断进阶的人的优秀工具。
- en: Version control with Git
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Git进行版本控制
- en: 'Using Git for version control is essential for managing your code base. Follow
    the next steps to get started with Git:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Git进行版本控制对于管理代码库至关重要。请按照以下步骤开始使用Git：
- en: 'Install Git: Download and install Git ( [https://git-scm.com/](https://git-scm.com/)
    ).'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Git：下载并安装Git（[https://git-scm.com/](https://git-scm.com/)）。
- en: 'Configure Git: Set your username and email:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置Git：设置你的用户名和电子邮件：
- en: '**git config --global user.name "** **Your Name"**'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**git config --global user.name "** **Your Name"**'
- en: '**git config --global** **user.email "you@example.com"**'
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**git config --global** **user.email "you@example.com"**'
- en: 'Initialize a repository:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个仓库：
- en: Navigate to your project directory.
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到你的项目目录。
- en: Run **git init** .
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行**git init**。
- en: 'Create a **.gitignore** file: Specify files and directories to ignore (for
    example, **env/** for the virtual environment, and ***.pyc** for compiled Python
    files).'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个**.gitignore**文件：指定要忽略的文件和目录（例如，**env/**用于虚拟环境，**.pyc**用于编译后的Python文件）。
- en: 'Commit changes:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交更改：
- en: Add files to the staging area by running **git add** .
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过运行**git add**将文件添加到暂存区。
- en: Commit changes by running **git commit -m "** **Initial commit"** .
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过运行**git commit -m "** **Initial commit"** 提交更改。
- en: 'Push to a remote repository:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 推送到远程仓库：
- en: Create a repository on GitHub, GitLab, or Bitbucket.
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在GitHub、GitLab或Bitbucket上创建一个仓库。
- en: 'Link the local repository to the remote one:'
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将本地仓库链接到远程仓库：
- en: '**git remote add** **origin <repository_url>**'
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**git remote add** **origin <repository_url>**'
- en: '**git push -u** **origin master**'
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**git push -u** **origin master**'
- en: Additional tools and best practices
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他工具和最佳实践
- en: 'Tools such as vulnerability scanners, **security information and event management**
    ( **SIEM** ) systems, and patch management software work in tandem to enhance
    detection, remediation, and monitoring processes. Best practices such as regularly
    updating software, using automation for repetitive tasks, and maintaining a robust
    incident response plan further help in strengthening security posture. Leveraging
    these tools and practices ensures that organizations stay proactive in managing
    security risks while maximizing operational efficiency:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 像漏洞扫描器、**安全信息与事件管理**（**SIEM**）系统和补丁管理软件等工具协同工作，以增强检测、修复和监控过程。最佳实践，如定期更新软件、使用自动化处理重复任务和保持健全的事件响应计划，进一步帮助加强安全防护。利用这些工具和实践可以确保组织在管理安全风险的同时，最大化运营效率：
- en: '**Linters and formatters (** the commands to install them follow **)** :'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码检查工具和格式化工具（**安装命令见下文**）**：'
- en: '**Flake8** : **pip** **install flake8**'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Flake8**：**pip** **install flake8**'
- en: '**Black** : **pip** **install black**'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Black**：**pip** **install black**'
- en: '**Pylint** : **pip** **install pylint**'
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Pylint**：**pip** **install pylint**'
- en: '**Debugging** :'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试**：'
- en: Use the built-in debugger in your IDE
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 IDE 内置的调试器
- en: For the command line, use the **pdb** module
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于命令行，使用 **pdb** 模块
- en: '**Documentation** :'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档**：'
- en: Write docstrings for your functions and classes
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的函数和类编写文档字符串
- en: Use tools such as **Sphinx** ( **pip install sphinx** ) for generating documentation
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **Sphinx**（**pip install sphinx**）等工具生成文档
- en: '**Testing** :'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**：'
- en: Use **unittest** (built-in) or **pytest** ( **pip install pytest** ) for writing
    tests
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **unittest**（内置）或 **pytest**（**pip install pytest**）编写测试
- en: Run tests frequently to catch bugs early
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 经常运行测试，以尽早发现 bug
- en: '**Continuous integration and continuous** **deployment** ( **CI/CD** ):'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续集成与持续部署**（**CI/CD**）：'
- en: Set up CI/CD pipelines with tools such as GitHub Actions, Travis CI, or Jenkins
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 GitHub Actions、Travis CI 或 Jenkins 等工具设置 CI/CD 管道
- en: Environment management tools
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境管理工具
- en: Environment management tools allow teams to efficiently manage development,
    testing, and production environments, reducing the likelihood of conflicts and
    errors. By maintaining isolated environments, these tools enable developers and
    security professionals to configure, replicate, and scale environments quickly
    and securely. Popular tools in this category include **Docker** for containerization,
    **Vagrant** for virtual machine management, and **Terraform** for infrastructure-as-code
    automation, all of which help streamline security operations while ensuring compatibility
    across different platforms and environments.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 环境管理工具帮助团队高效管理开发、测试和生产环境，减少冲突和错误的可能性。通过保持隔离的环境，这些工具使开发人员和安全专家能够快速、安全地配置、复制和扩展环境。该类别中流行的工具包括用于容器化的
    **Docker**，用于虚拟机管理的 **Vagrant**，以及用于基础设施即代码自动化的 **Terraform**，它们有助于简化安全操作，同时确保不同平台和环境之间的兼容性。
- en: '**pipenv** : Combines **pip** and **virtualenv** for better dependency management:'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pipenv**：结合 **pip** 和 **virtualenv** 以更好地管理依赖：'
- en: 'Install **pipenv** :'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 **pipenv**：
- en: Run **pip** **install pipenv** .
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 **pip** **install pipenv**。
- en: 'Create a virtual environment and install dependencies:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建虚拟环境并安装依赖：
- en: Navigate to your project directory.
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进入你的项目目录。
- en: Run **pipenv install <package_name>** to install a package.
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 **pipenv install <package_name>** 安装包。
- en: Run **pipenv install** to install all packages from **Pipfile** .
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 **pipenv install** 从 **Pipfile** 安装所有包。
- en: 'Activate the virtual environment:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活虚拟环境：
- en: Run **pipenv shell** .
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 **pipenv shell**。
- en: 'Generate **Pipfile.lock** :'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成 **Pipfile.lock**：
- en: Run **pipenv lock** .
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 **pipenv lock**。
- en: '**conda** : An environment manager popular in data science:'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**conda**：数据科学领域流行的环境管理器：'
- en: 'Install **conda** :'
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 **conda**：
- en: Download and install Anaconda or Miniconda.
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载并安装 Anaconda 或 Miniconda。
- en: 'Create a virtual environment:'
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建虚拟环境：
- en: Run **conda create --** **name myenv** .
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 **conda create --** **name myenv**。
- en: 'Activate the environment:'
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活环境：
- en: Run **conda** **activate myenv** .
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 **conda** **activate myenv**。
- en: 'Install packages:'
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装包：
- en: Run **conda** **install <package_name>** .
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 **conda** **install <package_name>**。
- en: 'Export the environment:'
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导出环境：
- en: Run **conda env export >** **environment.yml** .
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 **conda env export >** **environment.yml**。
- en: 'Create an environment from the YAML file:'
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 YAML 文件创建环境：
- en: Run **conda env create -** **f environment.yml** .
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 **conda env create -** **f environment.yml**。
- en: By leveraging the above tools, developers can easily manage complex workflows
    and maintain clean, conflict-free environments for seamless development and deployment.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用上述工具，开发人员可以轻松管理复杂的工作流，并保持干净、无冲突的环境，实现无缝的开发和部署。
- en: Code quality and automation
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码质量和自动化
- en: Code quality and automation are critical aspects of modern software development,
    ensuring that code is not only functional but also efficient, maintainable, and
    free from bugs. Code quality refers to readable, scalable, and reliable code that
    is a result of adhering to best practices and standards. It involves practices
    such as writing clean, well-documented code, following design patterns, and using
    static analysis tools to catch potential errors early. High-quality code leads
    to fewer bugs, easier maintenance, and better collaboration across development
    teams.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 代码质量和自动化是现代软件开发中的关键方面，确保代码不仅功能完善，还高效、可维护且无漏洞。代码质量指的是可读性强、可扩展且可靠的代码，这些代码是遵循最佳实践和标准的结果。它包括编写清晰、文档齐全的代码、遵循设计模式以及使用静态分析工具及早发现潜在错误等实践。高质量的代码能减少漏洞、简化维护并促进开发团队之间的更好协作。
- en: Automation plays a key role in maintaining code quality by integrating CI and
    CD pipelines. Automated testing, linting, and code reviews ensure that code meets
    predefined quality standards before it is merged or deployed. Tools such as **Jenkins**
    , **GitLab CI** , and **CircleCI** can automate tasks such as running unit tests,
    checking for code style violations, and deploying to production. Automated processes
    not only reduce human error but also improve efficiency, allowing developers to
    focus on innovation rather than repetitive manual tasks.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化在通过集成CI和CD管道来维护代码质量方面发挥着关键作用。自动化测试、代码检查和代码审查确保在代码合并或部署之前，代码符合预定的质量标准。工具如**Jenkins**、**GitLab
    CI**和**CircleCI**可以自动化执行单元测试、检查代码风格违规和部署到生产环境等任务。自动化流程不仅减少了人为错误，还提高了效率，让开发人员可以专注于创新，而非重复的手动任务。
- en: 'Incorporating both code quality practices and automation into development workflows
    enhances overall software reliability, accelerates the release cycle, and promotes
    consistency, making them essential components of any robust development strategy.
    Let’s take a closer look at this:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 将代码质量实践和自动化融入开发工作流中，可以提升整体软件的可靠性，加速发布周期，并促进一致性，使其成为任何强大开发策略中的核心组成部分。让我们来深入探讨一下：
- en: '**Automated testing** :'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化测试**：'
- en: '**Unit tests** :'
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**：'
- en: Create tests for your functions and methods to ensure they work as expected.
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的函数和方法创建测试，确保它们按预期工作。
- en: Use **unittest** or **pytest** to write and run tests.
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**unittest**或**pytest**编写并运行测试。
- en: '**CI** :'
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CI**：'
- en: Automate your testing with CI tools such as GitHub Actions, Travis CI, CircleCI,
    or Jenkins.
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用CI工具，如GitHub Actions、Travis CI、CircleCI或Jenkins，自动化测试。
- en: Configure your CI pipeline to run tests on every commit or pull request.
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置CI管道，在每次提交或拉取请求时运行测试。
- en: '**Code quality tools** : While IDEs provide many useful tools for coding, they
    often aren’t enough for comprehensive code quality checks. Here’s why relying
    solely on an IDE for code quality can fall short and why additional tools are
    beneficial:'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码质量工具**：虽然IDE提供了许多有用的编码工具，但它们通常不足以进行全面的代码质量检查。以下是为什么仅依赖IDE进行代码质量检查可能不够，以及为什么额外的工具是有益的：'
- en: '**Limited linting capabilities** : Most IDEs have basic linting capabilities,
    which help catch obvious syntax errors, unused variables, or missing imports.
    However, they may not fully enforce coding standards or detect more nuanced issues,
    such as complex logic that’s difficult to maintain or non-standard patterns. External
    linters such as **Pylint** or **Flake8** enforce coding standards in a way that
    goes beyond the basic checks most IDEs offer.'
  id: totrans-242
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有限的代码检查功能**：大多数IDE提供基本的代码检查功能，能够捕捉明显的语法错误、未使用的变量或缺失的导入项。然而，它们可能无法充分执行编码标准，或检测出更复杂的潜在问题，如难以维护的复杂逻辑或非标准模式。外部代码检查工具，如**Pylint**或**Flake8**，在执行编码标准方面超越了大多数IDE提供的基本检查。'
- en: '**Static analysis for security and performance** : IDEs don’t typically perform
    in-depth static analysis, which can identify potential security vulnerabilities
    or performance bottlenecks. Specialized tools such as **Bandit** (for Python)
    analyze code for security vulnerabilities such as injection flaws, insecure file
    handling, or hardcoded secrets, offering much more rigorous scrutiny than IDEs
    alone.'
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静态分析用于安全性和性能** : IDE 通常不进行深入的静态分析，而静态分析能够识别潜在的安全漏洞或性能瓶颈。像 **Bandit**（用于 Python）这样的专门工具，分析代码中的安全漏洞，如注入漏洞、不安全的文件处理或硬编码的密钥，比
    IDE 独立运行时的检查更加严格。'
- en: '**Complexity and code quality metrics** : Measuring code complexity, such as
    cyclomatic complexity or code duplication, requires more advanced analysis tools
    than IDEs usually provide. Tools such as **Radon** (for complexity) or **SonarQube**
    (for broader quality metrics) offer insights into maintainability, test coverage,
    and areas of high complexity that IDEs can’t typically address on their own.'
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复杂度和代码质量度量** : 衡量代码复杂性（如圈复杂度或代码重复性）需要比 IDE 通常提供的更先进的分析工具。像 **Radon**（用于复杂度分析）或
    **SonarQube**（用于更广泛的质量度量）等工具，能提供关于可维护性、测试覆盖率和高复杂度区域的见解，这是 IDE 通常无法单独处理的。'
- en: '**Automated testing integration** : While some IDEs offer testing frameworks,
    they’re often limited in scope and don’t cover automated testing strategies fully.
    Testing frameworks such as **pytest** or **unittest** allow you to create, manage,
    and run comprehensive test suites, often integrating with CI pipelines for automated
    testing that catches issues early and continuously—something an IDE alone may
    not manage effectively.'
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化测试集成** : 虽然一些 IDE 提供测试框架，但这些框架通常有限，并没有完全覆盖自动化测试策略。像 **pytest** 或 **unittest**
    这样的测试框架可以让你创建、管理和运行全面的测试套件，通常与 CI 流水线集成，实现自动化测试，及早并持续捕捉问题，这是仅靠 IDE 无法有效管理的。'
- en: '**Consistency and automation across teams** : IDEs vary in the quality and
    configuration of their code quality tools. External code quality tools, however,
    can be integrated into CI/CD pipelines, ensuring that the same quality checks
    run regardless of the IDE or setup each developer is using. This consistency across
    teams helps avoid IDE-specific dependencies and improves code quality across the
    board.'
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**团队间的一致性和自动化** : IDE 在代码质量工具的质量和配置上有所不同。然而，外部代码质量工具可以集成到 CI/CD 流水线中，确保无论每个开发者使用的是哪种
    IDE 或配置，都会运行相同的质量检查。这种团队间的一致性有助于避免 IDE 特定的依赖，并改善整体代码质量。'
- en: '**CI/CD integration** : Tools that assess code quality, style, and security
    can be automated to run on each commit or pull request through CI/CD pipelines.
    This ensures code quality is checked continuously and consistently before deployment,
    something an IDE isn’t equipped to handle on its own.'
  id: totrans-247
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CI/CD 集成** : 评估代码质量、风格和安全性的工具可以通过 CI/CD 流水线在每次提交或拉取请求时自动运行。这确保了在部署前，代码质量得到持续和一致的检查，这是
    IDE 无法单独处理的。'
- en: 'While IDEs provide valuable real-time feedback and are essential for productivity,
    they aren’t a substitute for comprehensive code quality tools. By using additional
    tools for code quality, security, testing, and complexity analysis, developers
    can ensure that their code is robust, maintainable, and secure across projects
    and teams. Let’s take a look at some of these:'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管 IDE 提供了宝贵的实时反馈，并且对提高生产力至关重要，但它们不能替代全面的代码质量工具。通过使用额外的工具进行代码质量、安全、测试和复杂度分析，开发者可以确保他们的代码在项目和团队中是稳健、可维护和安全的。让我们来看看其中的一些：
- en: '**Flake8** :'
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Flake8** :'
- en: Linter for Python to check for code style violations
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 代码检查工具，用于检查代码风格违规
- en: Run **flake8 your_script.py**
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 **flake8 your_script.py**
- en: '**Black** :'
  id: totrans-252
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Black** :'
- en: Formatter for Python code to ensure a consistent style
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 代码格式化工具，用于确保一致的编码风格
- en: Run **black your_script.py**
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 **black your_script.py**
- en: '**Pylint** :'
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pylint** :'
- en: Code analysis tool for Python to check for errors and enforce a coding standard
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于检查错误和执行编码标准的 Python 代码分析工具
- en: Run **pylint your_script.py**
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 **pylint your_script.py**
- en: '**Documentation** : Using the following ways can enhance documentation:'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档** : 使用以下方法可以增强文档质量：'
- en: '**Docstrings** :'
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档字符串** :'
- en: Write docstrings for functions, classes, and modules to explain their purpose
    and usage
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为函数、类和模块编写文档字符串，解释它们的目的和用法
- en: Follow conventions such as Google style ( [https://sphinxcontrib-napoleon .readthedocs.io/en/latest/example_google.html](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html)
    ) or NumPy style ( [https://numpydoc.readthedocs.io/en/latest/format.html](https://numpydoc.readthedocs.io/en/latest/format.html)
    )
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循像Google风格（[https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html)）或NumPy风格（[https://numpydoc.readthedocs.io/en/latest/format.html](https://numpydoc.readthedocs.io/en/latest/format.html)）等约定
- en: '**Sphinx** :'
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sphinx**：'
- en: Documentation generator that converts **reStructuredText** files into HTML websites
    and PDFs
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档生成器，将**reStructuredText**文件转换为HTML网站和PDF文档
- en: Install Sphinx by running **pip** **install sphinx**
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过运行**pip** **install sphinx**来安装Sphinx
- en: Initialize Sphinx in your project by running **sphinx-quickstart**
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过运行**sphinx-quickstart**在项目中初始化Sphinx
- en: Generate HTML documentation by running **make html** (Linux/macOS) or **make.bat**
    **html** (Windows)
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过运行**make html**（Linux/macOS）或**make.bat** **html**（Windows）生成HTML文档
- en: Setting up and using Python virtual environments is crucial for maintaining
    clean and organized development workflows. A virtual environment allows you to
    isolate project-specific dependencies, ensuring that different projects do not
    interfere with one another. This prevents version conflicts between libraries
    and helps keep your global Python installation clean. Virtual environments also
    make it easy to replicate the same setup across different machines or for team
    members, ensuring consistency in project configurations. By using virtual environments,
    developers can work more efficiently, avoid dependency issues, and ensure that
    each project operates in a controlled, isolated space.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 设置和使用Python虚拟环境对于保持清晰有序的开发工作流程至关重要。虚拟环境允许你隔离项目特定的依赖项，确保不同项目之间不会相互干扰。这可以防止库之间的版本冲突，并帮助保持全局Python安装的清洁。虚拟环境还使得在不同机器或团队成员之间复制相同的设置变得容易，确保项目配置的一致性。通过使用虚拟环境，开发人员可以更高效地工作，避免依赖问题，并确保每个项目都在受控的、独立的空间中运行。
- en: In addition to preventing conflicts, virtual environments improve collaboration
    and project portability. When working in teams, virtual environments enable each
    developer to have the same dependencies and package versions, ensuring that code
    works consistently across all systems. The use of a **requirements.txt** file
    makes it easy to share project dependencies and quickly set up new environments,
    reducing setup time and minimizing errors when onboarding new team members.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 除了防止冲突，虚拟环境还可以改善协作和项目的可移植性。在团队协作时，虚拟环境使每个开发人员拥有相同的依赖项和软件包版本，确保代码在所有系统中一致地运行。使用**requirements.txt**文件使共享项目依赖关系变得更加容易，并能够快速设置新的环境，减少设置时间并在新成员加入时减少错误。
- en: Furthermore, virtual environments help with long-term project maintenance. As
    projects evolve, dependencies may need to be updated or changed. Using virtual
    environments ensures that these updates don’t affect other projects relying on
    different versions of the same libraries, providing more flexibility to manage
    updates and rollbacks as needed. Setting up and using virtual environments is
    a best practice for organized, scalable, and conflict-free Python development.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，虚拟环境有助于长期项目的维护。随着项目的演变，可能需要更新或更改依赖项。使用虚拟环境确保这些更新不会影响其他依赖于同一库不同版本的项目，提供了更大的灵活性，以便根据需要管理更新和回滚。设置和使用虚拟环境是有组织、可扩展且无冲突的Python开发的最佳实践。
- en: Security best practices
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全最佳实践
- en: Implementing strong security protocols ensures the protection of sensitive information,
    reduces the risk of breaches, and helps organizations comply with regulations.
    Core principles include regular software updates, which address known vulnerabilities,
    and the use of strong authentication mechanisms such as **multi-factor authentication**
    ( **MFA** ) to protect accounts and systems from unauthorized access.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 实施强大的安全协议可以确保敏感信息的保护，减少泄露风险，并帮助组织遵守法规。核心原则包括定期的软件更新，以解决已知的漏洞，以及使用强大的身份验证机制，如**多因素认证**（**MFA**），以保护帐户和系统免受未经授权的访问。
- en: Other key practices include encryption to protect data both in transit and at
    rest, and access control to limit who can interact with certain resources. Security
    measures should also extend to regular monitoring and auditing of systems for
    suspicious activity, as well as consistent backup strategies to protect against
    data loss or ransomware attacks. Finally, promoting security awareness training
    ensures that employees are equipped to recognize and respond to potential threats
    such as phishing and social engineering attacks.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 其他关键实践包括加密以保护数据在传输和静态状态下的安全，以及访问控制以限制谁能与特定资源进行交互。安全措施还应扩展到对系统进行定期监控和审计，以检测可疑活动，并制定一致的备份策略，以防止数据丢失或勒索病毒攻击。最后，推广安全意识培训，确保员工具备识别和应对潜在威胁的能力，如钓鱼攻击和社会工程攻击。
- en: 'Effective dependency management is crucial for maintaining secure, reliable,
    and efficient code, especially in security automation where outdated or vulnerable
    libraries can introduce significant risks. Managing dependencies ensures that
    all necessary packages are up to date, compatible, and free of known vulnerabilities,
    helping to mitigate security gaps and maintain a stable development environment.
    By implementing tools such as **pip** , virtual environments, and dependency checkers,
    developers can streamline updates and reduce the risk of conflicts, making their
    automation solutions resilient and easier to maintain. Here are some best practices:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的依赖管理对于保持代码的安全性、可靠性和高效性至关重要，尤其是在安全自动化中，过时或存在漏洞的库可能带来显著风险。管理依赖关系确保所有必要的包都保持最新、兼容且没有已知的漏洞，有助于减少安全漏洞并保持稳定的开发环境。通过实施像**pip**、虚拟环境和依赖检查工具等工具，开发人员可以简化更新并减少冲突的风险，使他们的自动化解决方案更具弹性且易于维护。以下是一些最佳实践：
- en: '**Dependency management** : Dependency management is a crucial aspect of security
    best practices, as vulnerabilities in third-party libraries or outdated packages
    can expose applications to security risks. Proper dependency management ensures
    that all external libraries and frameworks integrated into a project are up to
    date, secure, and reliable. Here are some key best practices for managing dependencies
    with security in mind:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**依赖管理**：依赖管理是安全最佳实践中的关键方面，因为第三方库或过时包中的漏洞可能会使应用程序面临安全风险。适当的依赖管理确保所有集成到项目中的外部库和框架都是最新的、安全的且可靠的。以下是一些以安全为重点的依赖管理的最佳实践：'
- en: '**Check** **for vulnerabilities** :'
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查** **漏洞**：'
- en: Use tools such as **safety** to check for known vulnerabilities in your dependencies
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**safety**等工具检查依赖中的已知漏洞
- en: Run **pip install safety** and **safety check**
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行**pip install safety**和**safety check**
- en: '**Secure** **coding practices** :'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安全** **编码实践**：'
- en: '**Input validation** : Always validate and sanitize user inputs to prevent
    injection attacks'
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入验证**：始终验证和清理用户输入，以防止注入攻击'
- en: '**Secrets management** :'
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密钥管理**：'
- en: Avoid hardcoding secrets (such as API keys) in your code
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免在代码中硬编码机密（如API密钥）
- en: Use environment variables or secret management services
  id: totrans-282
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用环境变量或机密管理服务
- en: Advanced dependency management with automation tools
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用自动化工具进行高级依赖管理
- en: For more advanced dependency management, automated tools such as **Dependabot**
    and GitHub Security Alerts can help keep your code secure and up to date by identifying
    outdated libraries and potential vulnerabilities in real time. Let's look at how
    they work and why they’re useful.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更高级的依赖管理，自动化工具如**Dependabot**和GitHub安全警报可以通过实时识别过时的库和潜在的安全漏洞，帮助保持代码的安全性和最新状态。让我们看看它们是如何工作的，以及它们为何如此有用。
- en: Dependabot
  id: totrans-285
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Dependabot
- en: 'Dependabot is a GitHub-integrated tool that automatically checks for outdated
    dependencies in your project. When it finds outdated libraries or dependencies
    with known security vulnerabilities, it creates a pull request with the recommended
    updates. Dependabot supports a range of programming languages and package managers,
    including Python’s **pip** and **pipenv** :'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: Dependabot是一个与GitHub集成的工具，可以自动检查项目中的过时依赖。当它发现过时的库或存在已知安全漏洞的依赖时，它会创建一个拉取请求，并推荐更新。Dependabot支持多种编程语言和包管理器，包括Python的**pip**和**pipenv**：
- en: '**How it works** : Dependabot scans your dependency files (such as **requirements.txt**
    or **Pipfile** ) and compares them against the latest versions available. If updates
    are available, it generates a pull request with the required version changes.'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作原理** : Dependabot 扫描你的依赖文件（如 **requirements.txt** 或 **Pipfile**），并将其与最新版本进行比较。如果有更新，它会生成一个拉取请求，包含所需的版本更改。'
- en: '**Advantages** : Automates dependency updates, reduces security risk by ensuring
    the latest versions are used, and integrates directly into GitHub, making it easy
    to review and merge updates.'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优势** : 自动化依赖更新，通过确保使用最新版本来降低安全风险，并与 GitHub 直接集成，使得审查和合并更新变得更加容易。'
- en: GitHub Security Alerts
  id: totrans-289
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GitHub 安全警报
- en: 'GitHub Security Alerts (part of GitHub’s dependency graph) is a feature that
    scans your project for dependencies with known vulnerabilities. When it detects
    a security issue, it generates an alert in your GitHub repository and often suggests
    a version upgrade to address the vulnerability:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 安全警报（GitHub 依赖图的一部分）是一个功能，扫描你的项目，查找存在已知漏洞的依赖项。当它检测到安全问题时，会在你的 GitHub
    仓库中生成警报，并通常建议版本升级以解决漏洞。
- en: '**How it works** : GitHub uses a database of known vulnerabilities to analyze
    your dependencies. When vulnerabilities are detected, it alerts repository administrators
    and provides relevant details, including potential upgrade paths or patches.'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作原理** : GitHub 使用已知漏洞的数据库分析你的依赖项。当检测到漏洞时，它会提醒仓库管理员，并提供相关的详细信息，包括潜在的升级路径或修补程序。'
- en: '**Advantages** : Adds an extra layer of security, alerts you of vulnerabilities
    even without direct action, and integrates with GitHub, allowing you to monitor
    dependencies alongside code changes.'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优势** : 增加了一层额外的安全性，即使没有直接操作，也会提醒你潜在的漏洞，并与 GitHub 集成，使你能够在监控代码变化的同时，关注依赖项。'
- en: Integration into CI/CD pipelines
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集成到 CI/CD 流水线
- en: Both Dependabot and GitHub Security Alerts can be integrated into your CI/CD
    pipelines. By combining them with CI/CD tools (such as **GitHub Actions** or **Jenkins**
    ), you can automatically test dependencies, ensuring that updates or vulnerability
    patches won’t disrupt your code base.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: Dependabot 和 GitHub 安全警报可以集成到你的 CI/CD 流水线中。通过将它们与 CI/CD 工具（如**GitHub Actions**或**Jenkins**）结合使用，你可以自动测试依赖项，确保更新或漏洞修补不会破坏你的代码库。
- en: Benefits of automated dependency management
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动化依赖管理的好处
- en: 'Automated dependency management has the following primary benefits:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化依赖管理的主要好处包括：
- en: '**Security** : Automated tools help ensure that you’re using the latest, most
    secure versions of dependencies .'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性** : 自动化工具有助于确保你使用的是最新、最安全的依赖版本。'
- en: '**Reduced technical debt** : By regularly updating dependencies, you prevent
    the accumulation of technical debt and avoid the risks of outdated or unsupported
    libraries.'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减少技术债务** : 通过定期更新依赖项，你可以防止技术债务的积累，避免过时或不受支持的库带来的风险。'
- en: '**Time savings** : Automated tools reduce the time spent on manual updates,
    allowing your team to focus on development rather than maintenance.'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**节省时间** : 自动化工具减少了手动更新所花费的时间，使你的团队可以将更多精力集中在开发上，而不是维护。'
- en: Performance optimization
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能优化
- en: 'In today’s digital landscape, performance optimization is critical for delivering
    fast, responsive applications that provide a seamless user experience and make
    efficient use of resources. Whether you’re building web applications, mobile apps,
    or backend systems, optimizing performance not only improves speed and responsiveness
    but also enhances scalability, reduces costs, and keeps users engaged. Let’s look
    at some ways this can be achieved:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在当今的数字化环境中，性能优化对于交付快速、响应迅速的应用程序至关重要，这能够提供无缝的用户体验并高效利用资源。无论是构建 Web 应用、移动应用还是后台系统，优化性能不仅能提高速度和响应性，还能增强可扩展性、降低成本并保持用户参与。让我们看看如何实现这一目标：
- en: '**Profiling** :'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**性能分析** :'
- en: '**cProfile** :'
  id: totrans-303
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**cProfile** :'
- en: Built-in module for profiling Python programs
  id: totrans-304
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置的 Python 程序分析模块
- en: Run **python -m** **cProfile your_script.py**
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 **python -m** **cProfile your_script.py**
- en: '**line_profiler** :'
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**line_profiler** :'
- en: Line-by-line profiling to see which lines of code are taking the most time
  id: totrans-307
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按行分析，查看哪些代码行耗时最长
- en: Install it by running **pip** **install line_profiler**
  id: totrans-308
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过运行 **pip** **install line_profiler** 来安装
- en: Add the **@profile** decorator to the functions you want to profile and run
    with **kernprof -l -** **v your_script.py**
  id: totrans-309
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为你想要分析的函数添加 **@profile** 装饰器，并使用 **kernprof -l -** **v your_script.py** 运行
- en: '**Optimization techniques** :'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**优化技术** :'
- en: '**Algorithmic improvements** : Optimize the algorithm to reduce time complexity.'
  id: totrans-311
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**算法优化**：优化算法以减少时间复杂度。'
- en: '**Use built-in functions** : Utilize Python’s built-in functions and libraries
    that are implemented in C and optimized for performance.'
  id: totrans-312
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用内置函数**：利用 Python 的内置函数和库，这些函数和库是用 C 实现的并经过优化以提高性能。'
- en: '**Parallelism** : Parallelism is a technique in computing where multiple tasks
    or processes are executed simultaneously, taking advantage of multi-core processors
    and distributed computing resources to perform operations faster. By splitting
    a task into smaller parts that can run concurrently, parallelism reduces the overall
    execution time, which is particularly beneficial for tasks that involve heavy
    computations or processing large datasets.'
  id: totrans-313
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并行性**：并行性是一种计算技术，通过同时执行多个任务或进程，利用多核处理器和分布式计算资源加速操作。通过将任务分解为可以并发执行的更小部分，并行性减少了整体执行时间，这对于涉及大量计算或处理大型数据集的任务尤其有利。'
- en: In conclusion, following security best practices is essential for protecting
    systems, applications, and data from potential cyber threats. By regularly updating
    software, implementing strong authentication methods, encrypting sensitive data,
    and managing access controls, organizations can significantly reduce the risk
    of breaches. Additionally, proactive measures such as dependency management, monitoring,
    auditing, and security awareness training further strengthen defenses. Prioritizing
    these best practices ensures a more secure, resilient, and compliant environment,
    safeguarding both the organization and its users from evolving security challenges.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，遵循安全最佳实践对于保护系统、应用程序和数据免受潜在的网络攻击至关重要。通过定期更新软件、实施强认证方法、加密敏感数据以及管理访问控制，组织可以显著减少漏洞的风险。此外，主动的措施，如依赖管理、监控、审计和安全意识培训，进一步增强了防御。优先考虑这些最佳实践可以确保一个更加安全、韧性强和符合规范的环境，保护组织及其用户免受不断演变的安全挑战。
- en: Concurrency in security automation with asyncio
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全自动化中的并发性与 asyncio
- en: In security automation, many tasks involve waiting on I/O-bound operations,
    such as querying servers, scanning networks, or fetching data from multiple sources.
    Using concurrency techniques such as **asyncio** can significantly improve the
    efficiency of these processes by allowing multiple operations to run “concurrently”
    rather than waiting for each to complete sequentially.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在安全自动化中，许多任务都涉及等待 I/O 绑定操作，如查询服务器、扫描网络或从多个来源获取数据。使用诸如 **asyncio** 等并发技术可以显著提高这些过程的效率，通过允许多个操作“并发”执行，而不是等待每个操作按顺序完成。
- en: Key tools and techniques
  id: totrans-317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关键工具和技术
- en: 'To perform security automation with **asyncio** , we use the following tools:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 **asyncio** 执行安全自动化，我们使用以下工具：
- en: '**asyncio** : This Python library enables asynchronous programming by allowing
    you to execute multiple I/O-bound tasks simultaneously, using the **async** and
    **await** keywords. This is especially useful in security automation where tasks
    such as API calls or port scans can happen simultaneously, dramatically reducing
    waiting time.'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**asyncio**：这个 Python 库通过允许你使用 **async** 和 **await** 关键字同时执行多个 I/O 绑定任务，从而实现异步编程。这在安全自动化中尤其有用，比如
    API 调用或端口扫描可以同时进行，从而大大减少等待时间。'
- en: '**Threading and multiprocessing** : While **asyncio** is great for I/O-bound
    tasks, threading and multiprocessing libraries in Python are more suitable for
    CPU-bound tasks. For example, multiprocessing can distribute cryptographic computations
    across multiple CPU cores.'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线程和多进程**：虽然 **asyncio** 很适合处理 I/O 绑定任务，但 Python 中的线程和多进程库更适用于 CPU 绑定任务。例如，多进程可以将加密计算分配到多个
    CPU 核心。'
- en: Example scenarios in security automation
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全自动化中的示例场景
- en: 'We typically have the following scenarios to deal with in security automation:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常在安全自动化中遇到以下场景：
- en: '**Parallel network scanning** : The **asyncio** library can handle multiple
    network ports concurrently, making network scanning faster and more efficient.'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并行网络扫描**：**asyncio** 库可以同时处理多个网络端口，从而使网络扫描更加快速和高效。'
- en: '**Automated API requests** : For tools that interact with vulnerability databases
    or other resources, using **asyncio** allows multiple API requests to run in parallel,
    speeding up data retrieval for larger assessments.'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化 API 请求**：对于与漏洞数据库或其他资源交互的工具，使用 **asyncio** 允许多个 API 请求并行运行，加快数据检索速度，特别是在进行大规模评估时。'
- en: These techniques allow you to increase performance in security automation tasks
    without needing additional hardware resources, making them a cost-effective way
    to scale your automation workflows.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 这些技术能够提升安全自动化任务的性能，而无需额外的硬件资源，使得它们成为一种经济高效的方式来扩展你的自动化工作流程。
- en: Learning resources
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习资源
- en: 'There are many learning resources available to learn how to utilize Python
    for different aspects in security. Some of them are as follows:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多学习资源可以帮助你了解如何利用 Python 在不同的安全领域。以下是其中的一些：
- en: '**Python for Cybersecurity Specialization (Coursera)** : This specialization
    focuses on using Python for various security applications, including penetration
    testing, malware analysis, and security tool development. It provides hands-on
    labs and exercises tailored for cybersecurity professionals.'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python for Cybersecurity Specialization (Coursera)** : 该专业化课程专注于使用 Python
    进行各种安全应用，包括渗透测试、恶意软件分析和安全工具开发。它提供了针对网络安全专业人员量身定制的实践实验和练习。'
- en: '**Python for Offensive Security (Udemy)** : This course is ideal for those
    interested in offensive security, focusing specifically on using Python for penetration
    testing. Topics include network scanning, exploiting vulnerabilities, and creating
    custom hacking tools.'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python for Offensive Security (Udemy)** : 这门课程非常适合对进攻性安全感兴趣的人，特别是专注于使用 Python
    进行渗透测试。课程内容包括网络扫描、漏洞利用和创建自定义黑客工具。'
- en: '**Python for Pentesters (INE)** : INE’s course offers comprehensive coverage
    on using Python for penetration testing and ethical hacking, with a focus on scripting
    for network scanning, exploitation, and automating common pentesting tasks.'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python for Pentesters (INE)** : INE 的课程全面讲解了如何使用 Python 进行渗透测试和伦理黑客，重点介绍了网络扫描、漏洞利用和自动化常见渗透测试任务的脚本编写。'
- en: '**Black Hat Python: Python Programming for Hackers and Pentesters (book and
    course)** : Based on the popular book *Black Hat Python* , this course covers
    Python tools and techniques for penetration testing, including creating reverse
    shells, network sniffers, and keyloggers. It’s a practical, code-driven course
    that’s widely respected in the security community.'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Black Hat Python: Python 编程与黑客和渗透测试 (书籍与课程)** : 基于流行的书籍 *Black Hat Python*，该课程介绍了用于渗透测试的
    Python 工具和技术，包括创建反向 shell、网络嗅探器和键盘记录器。它是一门实用的、以代码为驱动的课程，在安全社区中备受推崇。'
- en: '**SANS SEC573: Automating Information Security with Python (SANS Institute)**
    : This course offers an in-depth curriculum for security automation using Python,
    covering topics such as data processing, network automation, and penetration testing.
    Though intensive, it’s highly regarded for its applicability in professional security
    settings.'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SANS SEC573: 使用 Python 自动化信息安全 (SANS Institute)** : 这门课程提供了关于使用 Python 进行安全自动化的深入课程内容，涵盖数据处理、网络自动化和渗透测试等主题。尽管课程内容密集，但因其在专业安全环境中的适用性而备受推崇。'
- en: Online tutorials and courses
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在线教程和课程
- en: 'The following are some online tutorials and courses you can look into:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些你可以查阅的在线教程和课程：
- en: '**Official Python** **documentation** : [https://www.python.org/doc/](https://www.python.org/doc/)'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**官方 Python** **文档** : [https://www.python.org/doc/](https://www.python.org/doc/)'
- en: '**Real** **Python** : [https://realpython.com/](https://realpython.com/)'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Real** **Python** : [https://realpython.com/](https://realpython.com/)'
- en: '**Coursera** : Python courses from various universities'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Coursera** : 来自不同大学的 Python 课程'
- en: '**edX** : Python courses from various institutions'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**edX** : 来自不同机构的 Python 课程'
- en: '**Udemy** : Various Python courses from different instructors'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Udemy** : 来自不同讲师的各种 Python 课程'
- en: Communities
  id: totrans-340
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 社区
- en: 'Following are some great communities you can be a part of:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些你可以加入的优秀社区：
- en: '**Stack Overflow** : Ask and answer questions'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Stack Overflow** : 提问和回答问题'
- en: '**Reddit (r/learnpython)** : Community of Python learners'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Reddit (r/learnpython)** : Python 学习者社区'
- en: '**Python Discord** : Chat with other Python developers'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python Discord** : 与其他 Python 开发者聊天'
- en: By following this guide, you will have a well-configured Python development
    environment that is efficient, secure, and conducive to producing high-quality
    code.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循本指南，你将拥有一个高效、安全的 Python 开发环境，有助于产出高质量的代码。
- en: Installing essential libraries – tools for security automation
  id: totrans-346
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装必要的库——安全自动化工具
- en: 'Security automation involves using tools and scripts to automate the detection
    and remediation of security issues. Here are some essential libraries and tools
    for security automation in Python:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 安全自动化涉及使用工具和脚本来自动化检测和修复安全问题。以下是 Python 安全自动化的一些必要库和工具：
- en: '**Bandit** : Bandit is a tool designed to find common security issues in Python
    code:'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Bandit** : Bandit 是一个旨在查找 Python 代码中常见安全问题的工具：'
- en: '**Install Bandit** : Run **pip** **install bandit**'
  id: totrans-349
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装 Bandit** : 运行 **pip** **install bandit**'
- en: '**Usage** :'
  id: totrans-350
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用** :'
- en: To scan a single file, run **bandit your_script.py**
  id: totrans-351
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要扫描单个文件，请运行 **bandit your_script.py**
- en: To scan an entire directory, run **bandit -** **r your_directory/**
  id: totrans-352
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要扫描整个目录，请运行 **bandit -** **r your_directory/**
- en: '**Configuration** : You can configure Bandit using a **.bandit** configuration
    file to specify custom settings, such as excluding certain tests or paths.'
  id: totrans-353
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置** : 可以使用 **.bandit** 配置文件配置 Bandit，指定自定义设置，例如排除某些测试或路径。'
- en: '**Safety** : Safety-check your installed dependencies for known security vulnerabilities:'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Safety** : 检查已安装的依赖项是否存在已知的安全漏洞：'
- en: '**Install Safety** : Run **pip** **install safety**'
  id: totrans-355
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装 Safety** : 运行 **pip** **install safety**'
- en: '**Usage** :'
  id: totrans-356
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用** :'
- en: To check installed packages, run **safety check**
  id: totrans-357
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要检查已安装的包，运行 **safety check**
- en: To check a **requirements.txt** file, run **safety check -** **r requirements.txt**
  id: totrans-358
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要检查 **requirements.txt** 文件，运行 **safety check -** **r requirements.txt**
- en: '**Pylint** : Pylint is a static code analysis tool that can help identify code
    errors, enforce coding standards, and detect code smells, including some security
    issues:'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pylint** : Pylint 是一个静态代码分析工具，可以帮助识别代码错误，强制执行编码标准，并检测代码异味，包括一些安全问题：'
- en: '**Install Pylint** : Run **pip** **install pylint**'
  id: totrans-360
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装 Pylint** : 运行 **pip** **install pylint**'
- en: '**Usage** :'
  id: totrans-361
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用** :'
- en: To analyze a file, run **pylint your_script.py**
  id: totrans-362
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要分析文件，请运行 **pylint your_script.py**
- en: To analyze a directory, run **pylint your_directory/**
  id: totrans-363
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要分析目录，请运行 **pylint your_directory/**
- en: '**Configuration** : Customize Pylint behavior using a **.pylintrc** configuration
    file.'
  id: totrans-364
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置** : 使用 **.pylintrc** 配置文件定制 Pylint 行为。'
- en: '**YARA-Python** : YARA is a tool aimed at helping malware researchers identify
    and classify malware samples. YARA-Python allows using YARA’s pattern-matching
    capabilities from Python scripts:'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**YARA-Python** : YARA 是一个帮助恶意软件研究人员识别和分类恶意软件样本的工具。YARA-Python 使得可以在 Python
    脚本中使用 YARA 的模式匹配功能：'
- en: '**Install YARA-Python** : Run **pip** **install yara-python**'
  id: totrans-366
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装 YARA-Python** : 运行 **pip** **install yara-python**'
- en: '**Usage** :'
  id: totrans-367
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用** :'
- en: 'Import YARA in your Python script: **import yara** .'
  id: totrans-368
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Python 脚本中导入 YARA：**import yara** 。
- en: Compile and match YARA rules within your Python code.
  id: totrans-369
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Python 代码中编译并匹配 YARA 规则。
- en: '**Requests** : The Requests library is not inherently a security tool, but
    it’s crucial for security automation scripts that need to interact with web services,
    REST APIs, or download content:'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Requests** : Requests 库本身并不是一个安全工具，但它对需要与 Web 服务、REST API 或下载内容交互的安全自动化脚本至关重要：'
- en: '**Install Requests** : Run **pip** **install requests**'
  id: totrans-371
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装 Requests** : 运行 **pip** **install requests**'
- en: '**Usage** :'
  id: totrans-372
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用** :'
- en: 'Import Requests in your script: **import requests**'
  id: totrans-373
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在脚本中导入 Requests：**import requests**
- en: 'Perform HTTP requests: **response =** **requests.get(''https://example.com'')**'
  id: totrans-374
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行 HTTP 请求：**response =** **requests.get('https://example.com')**
- en: '**Paramiko** : Paramiko is a Python implementation of SSHv2. It provides both
    client and server functionalities, making it ideal for automating secure file
    transfers and remote command execution:'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Paramiko** : Paramiko 是一个 Python 实现的 SSHv2 协议库，提供了客户端和服务器功能，非常适合自动化安全文件传输和远程命令执行：'
- en: '**Install Paramiko** : Run **pip** **install paramiko**'
  id: totrans-376
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装 Paramiko** : 运行 **pip** **install paramiko**'
- en: '**Usage** :'
  id: totrans-377
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用** :'
- en: Import Paramiko in your script by running **import paramiko** .
  id: totrans-378
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在脚本中导入 Paramiko，运行 **import paramiko** 。
- en: Connect to an SSH server and execute commands or transfer files.
  id: totrans-379
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到 SSH 服务器并执行命令或传输文件。
- en: '**Scapy** : Scapy is a powerful Python library for network packet manipulation.
    It’s widely used in security testing for creating, sending, sniffing, and dissecting
    network packets:'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Scapy** : Scapy 是一个强大的 Python 库，用于网络数据包操作。它在安全测试中广泛用于创建、发送、嗅探和分析网络数据包：'
- en: '**Install Scapy** : Run **pip** **install scapy**'
  id: totrans-381
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装 Scapy** : 运行 **pip** **install scapy**'
- en: '**Usage** :'
  id: totrans-382
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用** :'
- en: 'Import Scapy in your script: **from scapy.all** **import *** .'
  id: totrans-383
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在脚本中导入 Scapy：**from scapy.all** **import *** 。
- en: 'Create and send packets: **send(IP(dst="1.2.3.4")/ICMP())** .'
  id: totrans-384
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建并发送数据包：**send(IP(dst="1.2.3.4")/ICMP())** 。
- en: '**Nmap** : Nmap is a powerful network scanning tool. The **python-nmap** Python
    library provides an interface to Nmap from Python:'
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Nmap** : Nmap 是一个强大的网络扫描工具。**python-nmap** Python 库为 Python 提供了一个 Nmap 接口：'
- en: '**Install Nmap** **and python-nmap** :'
  id: totrans-386
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装 Nmap** **和 python-nmap** :'
- en: Ensure Nmap is installed on your system. For installation instructions, visit
    **nmap.org** .
  id: totrans-387
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保 Nmap 已安装在系统中。有关安装说明，请访问 **nmap.org** 。
- en: Install **python-nmap** by running **pip** **install python-nmap** .
  id: totrans-388
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过运行 **pip** **install python-nmap** 安装 **python-nmap** 。
- en: '**Usage** :'
  id: totrans-389
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用法**：'
- en: Import **python-nmap** in your script by running **import nmap** .
  id: totrans-390
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的脚本中通过运行**import nmap**导入**python-nmap**。
- en: Create an Nmap scanner instance and perform scans.
  id: totrans-391
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个Nmap扫描器实例并执行扫描。
- en: '**SQLMap** : SQLMap is an open source penetration testing tool that automates
    the process of detecting and exploiting SQL injection flaws. The **sqlmapapi**
    Python library allows integration with SQLMap:'
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQLMap**：SQLMap是一个开源渗透测试工具，自动化检测和利用SQL注入漏洞的过程。**sqlmapapi** Python库允许与SQLMap集成：'
- en: '**Install SQLMap** **and sqlmapapi** :'
  id: totrans-393
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装SQLMap** **和sqlmapapi**：'
- en: Ensure SQLMap is installed on your system. For installation instructions, visit
    [sqlmap.org](http://sqlmap.org) .
  id: totrans-394
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保SQLMap已安装在你的系统上。有关安装说明，请访问 [sqlmap.org](http://sqlmap.org)。
- en: The API is part of the SQLMap installation; no separate installation is needed.
  id: totrans-395
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: API是SQLMap安装的一部分，无需单独安装。
- en: '**Usage** :'
  id: totrans-396
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用法**：'
- en: Start the SQLMap API server by running **python** **sqlmapapi.py -s** .
  id: totrans-397
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过运行**python sqlmapapi.py -s**启动SQLMap API服务器。
- en: Use the API to send commands to the SQLMap engine.
  id: totrans-398
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用API向SQLMap引擎发送命令。
- en: '**Cryptography** : The Cryptography library provides cryptographic recipes
    and primitives to help you secure your applications:'
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加密学**：加密学库提供加密算法和原语，帮助你保护应用程序的安全：'
- en: '**Install Cryptography** : Run **pip** **install cryptography**'
  id: totrans-400
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装Cryptography**：运行**pip install cryptography**'
- en: '**Usage** :'
  id: totrans-401
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用法**：'
- en: 'Import **cryptography** in your script by running: **from cryptography.fernet**
    **import Fernet** .'
  id: totrans-402
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的脚本中通过运行**from cryptography.fernet import Fernet**导入**cryptography**。
- en: Generate keys, and encrypt and decrypt data.
  id: totrans-403
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成密钥，并加密和解密数据。
- en: '**Python-OpenStackClient** : For managing OpenStack security settings and automating
    cloud security tasks:'
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python-OpenStackClient**：用于管理OpenStack安全设置并自动化云安全任务：'
- en: '**Install Python-OpenStackClient** : Run **pip** **install python-openstackclient**'
  id: totrans-405
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装Python-OpenStackClient**：运行**pip install python-openstackclient**'
- en: '**Usage** :'
  id: totrans-406
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用法**：'
- en: Import the OpenStack client in your script by running **from openstack** **import
    connection** .
  id: totrans-407
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的脚本中通过运行**from openstack import connection**导入OpenStack客户端。
- en: Use the client to manage OpenStack resources securely.
  id: totrans-408
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用客户端安全地管理OpenStack资源。
- en: '**Pexpect** : Pexpect allows you to spawn child applications and control them
    automatically. It is used for automating interactive applications such as SSH,
    FTP, **passwd** , and others:'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pexpect**：Pexpect允许你生成子应用并自动控制它们。它用于自动化交互式应用，如SSH、FTP、**passwd**等：'
- en: '**Install Pexpect** : Run **pip** **install pexpect**'
  id: totrans-410
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装Pexpect**：运行**pip install pexpect**'
- en: '**Usage** :'
  id: totrans-411
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用法**：'
- en: 'Import Pexpect in your script: **import pexpect** .'
  id: totrans-412
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的脚本中导入Pexpect：**import pexpect**。
- en: Automate interactions with command-line applications.
  id: totrans-413
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化与命令行应用程序的交互。
- en: Best practices for security automation
  id: totrans-414
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全自动化的最佳实践
- en: 'Implementing security automation can greatly enhance your organization’s security
    posture, but it must be done thoughtfully to avoid potential pitfalls. Here are
    key best practices to follow:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 实施安全自动化可以大大增强你组织的安全态势，但必须谨慎进行，以避免潜在的陷阱。以下是需要遵循的关键最佳实践：
- en: '**Define clear objectives** : Before implementing automation, clearly define
    the goals you want to achieve. This could include automating vulnerability scanning,
    **incident response** ( **IR** ), or compliance checks. Having well-defined objectives
    helps focus efforts and measure success.'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定义明确的目标**：在实施自动化之前，明确你想要实现的目标。这可能包括自动化漏洞扫描、**事件响应**（**IR**）或合规检查。明确的目标有助于聚焦努力并衡量成功。'
- en: '**Start small and scale up** : Begin with automating small, repeatable tasks
    to understand the process and tools involved. Once you’ve successfully implemented
    automation in these areas, gradually scale up to more complex tasks, ensuring
    that your automation processes are robust and effective.'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从小处开始，逐步扩展**：从自动化小的、可重复的任务开始，了解过程和工具。一旦成功实现这些领域的自动化，逐步扩展到更复杂的任务，确保你的自动化流程健全有效。'
- en: '**Maintain visibility and control** : Ensure that automated processes have
    clear logging and monitoring. This visibility allows you to track actions taken
    by automated systems, identify potential issues, and maintain control over your
    security posture.'
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保持可见性和控制**：确保自动化流程有明确的日志记录和监控。这种可见性使你能够跟踪自动化系统所采取的操作，识别潜在问题，并保持对安全态势的控制。'
- en: '**Regularly review and update automation scripts** : Security threats evolve
    constantly, and your automation scripts must keep pace. Regularly review and update
    scripts to incorporate new **threat intelligence** ( **TI** ), adjust to changes
    in infrastructure, and refine processes based on lessons learned.'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定期审查和更新自动化脚本**：安全威胁不断演变，你的自动化脚本必须跟上步伐。定期审查和更新脚本，以融入新的**威胁情报**（**TI**），适应基础设施变化，并根据经验教训优化流程。'
- en: '**Implement version control** : Use **version control systems** ( **VCSs**
    ) (such as Git) to manage automation scripts. This allows for better collaboration,
    tracking changes over time, and rolling back to previous versions if issues arise.'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实施版本控制**：使用**版本控制系统**（**VCS**）（如 Git）来管理自动化脚本。这有助于更好的协作，跟踪变化，并在出现问题时回滚到之前的版本。'
- en: '**Integrate with existing security tools** : Ensure that your automation efforts
    are compatible with existing security tools and platforms. Integration can streamline
    processes and enhance overall security effectiveness, enabling information sharing
    between systems.'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与现有安全工具集成**：确保你的自动化工作与现有的安全工具和平台兼容。集成可以简化流程并增强整体安全性，有助于系统之间的信息共享。'
- en: '**Test thoroughly before deployment** : Before deploying any automated scripts,
    conduct thorough testing in a controlled environment. This helps ensure that scripts
    function as intended without introducing unintended vulnerabilities or issues
    into your systems.'
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署前进行彻底测试**：在部署任何自动化脚本之前，在受控环境中进行彻底的测试。这有助于确保脚本按预期运行，而不会将意外的漏洞或问题引入系统中。'
- en: '**Prioritize security by design** : When developing automation scripts, prioritize
    security best practices, such as secure coding techniques and minimizing permissions.
    Ensure that sensitive information is handled securely and that scripts do not
    expose vulnerabilities.'
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从设计上优先考虑安全性**：在开发自动化脚本时，优先考虑安全最佳实践，如安全编码技术和最小化权限。确保敏感信息得到安全处理，并且脚本不会暴露漏洞。'
- en: '**Provide training and documentation** : Ensure that team members involved
    in security automation are adequately trained on the tools and processes being
    used. Additionally, maintain up-to-date documentation for automation scripts and
    workflows to facilitate understanding and continuity.'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提供培训和文档**：确保参与安全自动化的团队成员充分了解所使用的工具和流程。此外，维护最新的自动化脚本和工作流程文档，以便于理解和延续。'
- en: '**Adopt a feedback loop** : Establish a feedback loop to gather input from
    security analysts and stakeholders on the effectiveness of automation processes.
    Use this feedback to improve and refine your automation strategies continuously.'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**采用反馈循环**：建立反馈循环，收集安全分析师和相关方对自动化流程有效性的反馈。利用这些反馈不断改进和优化自动化策略。'
- en: By following these best practices, organizations can maximize the effectiveness
    of their security automation efforts while minimizing risks and ensuring robust
    security operations. This structured approach helps in maintaining a secure, efficient,
    and responsive security environment.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这些最佳实践，组织可以最大化其安全自动化工作的效果，同时最小化风险，确保安全运营的稳健性。这种结构化的方法有助于维持一个安全、高效和响应迅速的安全环境。
- en: 'Using environment variables for sensitive data, such as API keys and passwords,
    enhances security by keeping confidential information outside of your source code,
    reducing the risk of accidental exposure. Storing sensitive data in environment
    variables ensures that it’s only accessible within the runtime environment, minimizing
    the chances of it being checked into version control or accessible by unauthorized
    users. This approach is essential for secure and scalable applications, as it
    simplifies sensitive data management across development, testing, and production
    environments:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 使用环境变量存储敏感数据，如 API 密钥和密码，可以通过将机密信息保留在源代码之外来增强安全性，降低意外暴露的风险。将敏感数据存储在环境变量中，确保只有在运行时环境中才能访问，从而最小化其被提交到版本控制系统或被未授权用户访问的可能性。这种方法对于安全和可扩展的应用程序至关重要，因为它简化了开发、测试和生产环境中的敏感数据管理：
- en: '**Use environment variables for** **sensitive data** :'
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用环境变量存储** **敏感数据**：'
- en: Store API keys, passwords, and other sensitive information in environment variables.
  id: totrans-429
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 API 密钥、密码和其他敏感信息存储在环境变量中。
- en: 'Access these variables in your Python script using the **os** module: **import
    os** and **os.getenv(''MY_SECRET_KEY'')** .'
  id: totrans-430
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Python 脚本中使用 **os** 模块访问这些变量：**import os** 和 **os.getenv('MY_SECRET_KEY')**。
- en: '**Keep** **dependencies updated** :'
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**保持** **依赖更新**：'
- en: Regularly update your dependencies to ensure you have the latest security patches.
  id: totrans-432
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期更新您的依赖项，以确保获得最新的安全补丁。
- en: 'Use tools such as **pip-review** to check for updates: **pip install pip-review**
    and **pip-review --auto** .'
  id: totrans-433
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用如 **pip-review** 等工具检查更新：**pip install pip-review** 和 **pip-review --auto**。
- en: '**Use** **version control** :'
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用** **版本控制**：'
- en: Keep your code in a VCS such as Git.
  id: totrans-435
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将代码保存在如 Git 之类的版本控制系统中。
- en: Regularly commit changes and use branches for new features or fixes.
  id: totrans-436
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期提交更改，并为新功能或修复创建分支。
- en: '**Implement logging** :'
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**实现日志记录**：'
- en: Use the **logging** module to log important events and errors.
  id: totrans-438
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **logging** 模块记录重要事件和错误。
- en: Ensure logs are stored securely and monitored for suspicious activities.
  id: totrans-439
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保日志安全存储并监控可疑活动。
- en: '**Write tests** :'
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**编写测试**：'
- en: Write unit tests for your security automation scripts to ensure they work as
    expected.
  id: totrans-441
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的安全自动化脚本编写单元测试，确保其按预期工作。
- en: Use the **pytest** or **unittest** frameworks for writing and running tests.
  id: totrans-442
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **pytest** 或 **unittest** 框架编写和运行测试。
- en: '**Monitoring and alerting** : Automate monitoring and alerting to detect and
    respond to security incidents in real time.'
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**监控和警报**：自动化监控和警报，以实时检测和响应安全事件。'
- en: Prometheus and Grafana
  id: totrans-444
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Prometheus 和 Grafana
- en: '**Prometheus** and **Grafana** are powerful tools commonly used together for
    monitoring and visualizing system performance and metrics. Their combined capabilities
    enable organizations to gain insights into application behavior, resource utilization,
    and overall system health.'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '**Prometheus** 和 **Grafana** 是常用的强大工具，通常一起用于监控和可视化系统性能和指标。它们的联合功能使得组织能够深入了解应用行为、资源利用率和整体系统健康状况。'
- en: 'Prometheus and Grafana provide a powerful solution for real-time monitoring
    and visualization of system metrics, allowing you to track performance, detect
    anomalies, and gain insights into your infrastructure’s health. Prometheus serves
    as a metrics collection and alerting toolkit, while Grafana offers a flexible
    interface for visualizing the data collected by Prometheus, creating detailed
    dashboards and alerts. Together, they form a robust foundation for proactive system
    monitoring and resource management:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus 和 Grafana 提供了一个强大的解决方案，用于实时监控和可视化系统指标，使您能够跟踪性能、检测异常并深入了解基础设施的健康状况。Prometheus
    作为一个指标收集和警报工具包，而 Grafana 提供了一个灵活的界面，用于可视化 Prometheus 收集的数据，创建详细的仪表板和警报。它们共同构成了一个强大的主动系统监控和资源管理基础：
- en: '**Install Prometheus and Grafana** : Follow the installation instructions on
    the Prometheus website and the Grafana website.'
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装 Prometheus 和 Grafana**：按照 Prometheus 和 Grafana 网站上的安装说明进行操作。'
- en: '**Configure Prometheus** : Set up Prometheus to scrape metrics from your applications
    and infrastructure.'
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**配置 Prometheus**：设置 Prometheus 来抓取您应用程序和基础设施的指标。'
- en: '**Create Grafana dashboards** : Connect Grafana to Prometheus and create dashboards
    to visualize your metrics.'
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建 Grafana 仪表板**：将 Grafana 连接到 Prometheus 并创建仪表板以可视化您的指标。'
- en: '**Set up alerts** : Configure alerting rules in Prometheus to notify you of
    any anomalies or incidents.'
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**设置警报**：在 Prometheus 中配置警报规则，以便在出现任何异常或事件时通知您。'
- en: ELK Stack (Elasticsearch, Logstash, Kibana)
  id: totrans-451
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ELK Stack（Elasticsearch、Logstash、Kibana）
- en: 'The ELK Stack is used for centralized logging and monitoring. The following
    are the steps for setting up and utilizing the ELK Stack:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: ELK Stack 用于集中式日志记录和监控。以下是设置和使用 ELK Stack 的步骤：
- en: '**Install ELK Stack** : Follow the installation instructions at [https://www.elastic.co/guide/en/elastic-stack/current/installing-elastic-stack.html](https://www.elastic.co/guide/en/elastic-stack/current/installing-elastic-stack.html)
    .'
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装 ELK Stack**：按照 [https://www.elastic.co/guide/en/elastic-stack/current/installing-elastic-stack.html](https://www.elastic.co/guide/en/elastic-stack/current/installing-elastic-stack.html)
    上的安装说明进行操作。'
- en: '**Collect logs** : Use Logstash to collect and process logs from various sources.'
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**收集日志**：使用 Logstash 收集并处理来自不同来源的日志。'
- en: '**Store logs** : Store logs in Elasticsearch for easy searching and analysis.'
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**存储日志**：将日志存储在 Elasticsearch 中，以便于搜索和分析。'
- en: '**Visualize logs** : Use Kibana to create visualizations and dashboards for
    your logs.'
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**可视化日志**：使用 Kibana 创建日志的可视化和仪表板。'
- en: '**Set up alerts** : Configure Kibana or use **ElastAlert** to set up alerts
    based on log data.'
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**设置警报**：配置 Kibana 或使用 **ElastAlert** 根据日志数据设置警报。'
- en: IR automation
  id: totrans-458
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IR 自动化
- en: 'Python plays a significant role in the automation of tasks related to monitoring
    and visualization tools. Here’s how:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: Python 在与监控和可视化工具相关的任务自动化中扮演了重要角色。以下是如何实现的：
- en: '**Data collection** :'
  id: totrans-460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据收集**：'
- en: Python can be used to write scripts that collect and prepare data for Prometheus.
    You can create custom exporters that expose metrics from your application or environment,
    making them available for Prometheus to scrape.
  id: totrans-461
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 可以用于编写脚本，收集并准备 Prometheus 的数据。你可以创建自定义的出口程序，暴露来自你的应用程序或环境的指标，使其可以供 Prometheus
    抓取。
- en: '*Example* : A Python script could monitor the health of a web service and expose
    metrics such as response times and error rates via an HTTP endpoint. Prometheus
    would scrape this endpoint periodically to collect the metrics.'
  id: totrans-462
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*示例*：一个 Python 脚本可以监控 Web 服务的健康状况，并通过 HTTP 端点暴露如响应时间和错误率等指标。Prometheus 会定期抓取这个端点，以收集指标。'
- en: '**Integration** **with APIs** :'
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与 API 的集成**：'
- en: Many monitoring tools, including Grafana, offer APIs that allow developers to
    automate tasks such as creating dashboards, managing alerts, or fetching metrics
    programmatically. Python’s rich set of libraries, such as **requests** , makes
    it easy to interact with these APIs.
  id: totrans-464
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多监控工具，包括 Grafana，都提供 API，允许开发者自动化任务，例如创建仪表板、管理警报或以编程方式获取指标。Python 丰富的库集，如**requests**，使得与这些
    API 进行交互变得非常简单。
- en: '*Example* : You could write a Python script that uses the Grafana API to dynamically
    create dashboards based on specific metrics that you are monitoring. This allows
    you to adjust visualizations based on changing requirements without manual intervention.'
  id: totrans-465
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*示例*：你可以编写一个 Python 脚本，使用 Grafana API 根据你正在监控的特定指标动态创建仪表板。这允许你根据不断变化的需求调整可视化，而无需手动干预。'
- en: '**Custom dashboards** **and visualizations** :'
  id: totrans-466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义仪表板** **和可视化**：'
- en: While Grafana provides built-in visualization capabilities, you can extend its
    functionality using Python to process data or create custom visualizations that
    better suit your needs.
  id: totrans-467
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虽然 Grafana 提供了内建的可视化功能，但你可以使用 Python 扩展其功能，处理数据或创建自定义可视化，以更好地满足你的需求。
- en: '*Example* : You could develop a custom Grafana panel plugin using JavaScript,
    but you could use Python to preprocess or aggregate data that is then visualized
    in Grafana. This might involve using Python to perform complex calculations or
    data transformations before sending the results to Grafana.'
  id: totrans-468
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*示例*：你可以使用 JavaScript 开发自定义的 Grafana 面板插件，但可以使用 Python 来预处理或聚合数据，然后在 Grafana
    中进行可视化。这可能涉及使用 Python 在将结果发送到 Grafana 之前执行复杂的计算或数据转换。'
- en: '**Automation of alerts** **and notifications** :'
  id: totrans-469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**警报** **和通知的自动化**：'
- en: Using Python, you can create scripts that integrate with monitoring tools to
    automate responses to alerts. For example, when Prometheus triggers an alert based
    on a metric threshold, a Python script can be invoked to perform specific actions,
    such as restarting a service or sending notifications.
  id: totrans-470
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Python，你可以创建与监控工具集成的脚本，以自动响应警报。例如，当 Prometheus 根据指标阈值触发警报时，Python 脚本可以被调用以执行特定操作，例如重启服务或发送通知。
- en: '*Example* : A Python script could be set up to respond to alerts from Prometheus,
    checking the status of a service and automatically restarting it if it is down,
    or sending an email alert with the relevant logs.'
  id: totrans-471
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*示例*：可以设置一个 Python 脚本来响应来自 Prometheus 的警报，检查服务的状态，如果服务宕机，则自动重启，或发送包含相关日志的邮件警报。'
- en: '**Scheduling** **and orchestration** :'
  id: totrans-472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调度** **和编排**：'
- en: Python can be used in conjunction with task schedulers (such as **cron** on
    Unix-based systems or **Task Scheduler** on Windows) or orchestration tools (such
    as **Airflow** ) to automate regular monitoring tasks.
  id: totrans-473
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 可以与任务调度器（如 Unix 系统上的 **cron** 或 Windows 上的 **任务调度器**）或编排工具（如 **Airflow**）结合使用，自动化定期的监控任务。
- en: '*Example* : A Python script that collects and processes logs daily can be scheduled
    using **cron** . The results can be sent to Prometheus for monitoring and later
    visualized in Grafana.'
  id: totrans-474
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*示例*：可以使用 **cron** 调度一个 Python 脚本，每日收集并处理日志。结果可以发送到 Prometheus 进行监控，之后再在 Grafana
    中进行可视化。'
- en: Customization of tools
  id: totrans-475
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工具的定制
- en: 'Many of the tools discussed can be customized to suit specific needs, enhancing
    their capabilities in the following ways:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 许多讨论过的工具可以根据具体需求进行定制，以下是它们的增强功能：
- en: '**Prometheus** **custom exporters** :'
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Prometheus** **自定义出口程序**：'
- en: You can create custom exporters in Python that collect specific metrics from
    your applications, databases, or systems. This allows you to monitor application-specific
    metrics that are not covered by default exporters.
  id: totrans-478
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在Python中创建自定义导出器，从您的应用程序、数据库或系统中收集特定的指标。这使您能够监控默认导出器未涵盖的应用特定指标。
- en: '*Example* : A Python exporter could expose metrics about application-level
    performance, such as cache hits/misses or database query execution times.'
  id: totrans-479
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*示例*：一个Python导出器可以暴露有关应用层性能的指标，如缓存命中/未命中或数据库查询执行时间。'
- en: '**Grafana** **dashboard automation** :'
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Grafana** **仪表盘自动化**：'
- en: Using the Grafana API, you can automate the creation and management of dashboards
    programmatically. Python scripts can be developed to generate dashboards based
    on specific monitoring needs or user preferences.
  id: totrans-481
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Grafana API，您可以通过编程自动创建和管理仪表盘。可以开发Python脚本，根据特定的监控需求或用户偏好生成仪表盘。
- en: '*Example* : A Python script could dynamically generate a Grafana dashboard
    for a new microservice, pulling in the necessary metrics and visualizations based
    on the current application architecture.'
  id: totrans-482
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*示例*：一个Python脚本可以动态生成一个新的微服务的Grafana仪表盘，根据当前的应用架构拉取必要的指标和可视化内容。'
- en: '**Custom alerts** **with Python** :'
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义告警** **与Python**：'
- en: You can write custom alerting logic using Python, allowing for more sophisticated
    alert conditions based on the metrics collected by Prometheus.
  id: totrans-484
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用Python编写自定义告警逻辑，根据Prometheus收集的指标实现更复杂的告警条件。
- en: '*Example* : Instead of relying solely on Prometheus’ built-in alerting rules,
    a Python script could analyze historical data trends and set alerts based on predicted
    future values, making the monitoring system more proactive.'
  id: totrans-485
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*示例*：除了仅依赖Prometheus内置的告警规则，Python脚本可以分析历史数据趋势，并根据预测的未来值设置告警，使得监控系统更加主动。'
- en: By integrating Python with tools such as Prometheus and Grafana, organizations
    can build a highly customized and automated monitoring environment that enhances
    visibility, responsiveness, and efficiency in managing their applications and
    infrastructure.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将Python与Prometheus和Grafana等工具集成，组织可以构建一个高度自定义和自动化的监控环境，提升在管理应用程序和基础设施方面的可见性、响应能力和效率。
- en: Security orchestration, automation, and response platforms
  id: totrans-487
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全编排、自动化和响应平台
- en: '**Security orchestration, automation, and response** ( **SOAR** ) platforms
    such as Splunk Phantom and IBM Resilient automate the entire IR life cycle:'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全编排、自动化和响应**（**SOAR**）平台，如Splunk Phantom和IBM Resilient，自动化整个IR生命周期：'
- en: '**Install a SOAR platform** : Choose a SOAR platform and follow the installation
    instructions provided by the vendor.'
  id: totrans-489
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装SOAR平台**：选择一个SOAR平台，并按照供应商提供的安装说明进行安装。'
- en: '**Create playbooks** : Define playbooks to automate common IR tasks, such as
    data collection, analysis, and remediation.'
  id: totrans-490
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建行动手册**：定义行动手册以自动化常见的IR任务，如数据收集、分析和修复。'
- en: '**Integrate with your environment** : Integrate the SOAR platform with your
    existing security tools and infrastructure.'
  id: totrans-491
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**与环境集成**：将SOAR平台与现有的安全工具和基础设施集成。'
- en: '**Automate responses** : Use the playbooks to automate IR actions and reduce
    response times.'
  id: totrans-492
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**自动化响应**：使用行动手册自动化IR操作，缩短响应时间。'
- en: Custom IR scripts
  id: totrans-493
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义IR脚本
- en: 'Use Python to create custom scripts for automating specific IR tasks:'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Python创建自定义脚本来自动化特定的IR任务：
- en: '**Collect evidence** : Automate evidence collection using libraries such as
    **requests** for API calls, **paramiko** for SSH, and **os** for system commands.'
  id: totrans-495
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**收集证据**：使用如**requests**进行API调用、**paramiko**进行SSH连接、**os**执行系统命令的库来自动化证据收集。'
- en: '**Analyze data** : Use libraries such as **pandas** for data analysis and **scapy**
    for network traffic analysis.'
  id: totrans-496
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**分析数据**：使用**pandas**进行数据分析，使用**scapy**进行网络流量分析。'
- en: '**Take action** : Automate remediation actions such as isolating affected systems,
    blocking IP addresses, or revoking access.'
  id: totrans-497
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**采取行动**：自动化修复行动，例如隔离受影响的系统、阻止IP地址或撤销访问权限。'
- en: TI automation
  id: totrans-498
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TI自动化
- en: Automate the collection and analysis of TI to stay ahead of emerging threats.
    The following platforms can be used for this .
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化收集和分析威胁情报（TI），以保持在新兴威胁前沿。以下平台可用于此目的。
- en: OpenCTI
  id: totrans-500
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: OpenCTI
- en: 'OpenCTI is a powerful platform designed for managing and analyzing TI data.
    By integrating OpenCTI with various TI feeds, organizations can centralize their
    threat data, enabling better detection, visualization, and automation of threat
    responses. The following steps outline how to leverage OpenCTI for optimizing
    TI workflows:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: OpenCTI 是一个强大的平台，旨在管理和分析 TI 数据。通过将 OpenCTI 与各种 TI 数据源集成，组织可以集中管理威胁数据，从而更好地检测、可视化并自动化威胁响应。以下步骤概述了如何利用
    OpenCTI 优化 TI 工作流：
- en: '**Install OpenCTI** : Begin by following the official installation instructions
    to set up OpenCTI in your environment. This step ensures that the platform is
    configured properly and ready for use.'
  id: totrans-502
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装 OpenCTI**：首先按照官方安装指南设置 OpenCTI 环境。这一步确保平台正确配置并准备就绪。'
- en: '**Integrate TI feeds** : OpenCTI supports the integration of multiple TI feeds,
    allowing security teams to enrich their data with up-to-date information about
    emerging threats, attack patterns, and vulnerabilities. Integrating these feeds
    enables proactive monitoring and detection of potential threats.'
  id: totrans-503
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**集成 TI 数据源**：OpenCTI 支持集成多个 TI 数据源，使安全团队能够通过最新的威胁、攻击模式和漏洞信息丰富其数据。集成这些数据源有助于主动监控和检测潜在威胁。'
- en: '**Analyze threat data** : Once the data is collected, use OpenCTI’s powerful
    analysis and visualization tools to identify patterns, assess risks, and gain
    actionable insights into security threats.'
  id: totrans-504
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**分析威胁数据**：数据收集后，使用 OpenCTI 强大的分析和可视化工具识别模式、评估风险，并获取有关安全威胁的可操作洞察。'
- en: '**Automate threat detection** : By creating custom rules and alerts within
    OpenCTI, you can automate the detection of certain types of threats, reducing
    manual effort and enabling faster response times. This helps organizations stay
    ahead of attackers by reacting to threats as they emerge, based on intelligence
    data.'
  id: totrans-505
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**自动化威胁检测**：通过在 OpenCTI 中创建自定义规则和警报，您可以自动检测某些类型的威胁，减少人工工作量并提高响应速度。这帮助组织通过基于情报数据的实时反应，始终领先于攻击者。'
- en: By following these steps, organizations can integrate OpenCTI into their security
    infrastructure, improving their ability to detect, analyze, and respond to threats
    quickly and accurately.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这些步骤，组织可以将 OpenCTI 集成到其安全基础设施中，从而提高快速、准确地检测、分析和响应威胁的能力。
- en: Malware Information Sharing Platform
  id: totrans-507
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 恶意软件信息共享平台
- en: '**Malware Information Sharing Platform** ( **MISP** ) is an open source tool
    designed to facilitate the sharing, storing, and correlation of TI data. By centralizing
    this information, MISP helps organizations detect and respond to emerging cyber
    threats more effectively. The following are the key steps to integrate MISP into
    your TI workflow:'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '**恶意软件信息共享平台**（**MISP**）是一个开源工具，旨在促进 TI 数据的共享、存储和关联。通过集中这些信息，MISP 帮助组织更有效地检测和响应新兴的网络威胁。以下是将
    MISP 集成到 TI 工作流中的关键步骤：'
- en: '**Install MISP** : Begin by following the installation guide provided on the
    official MISP website. This will ensure the proper setup of the platform within
    your environment.'
  id: totrans-509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装 MISP**：首先按照官方 MISP 网站提供的安装指南进行操作。这将确保平台在您的环境中正确设置。'
- en: '**Integrate TI feeds** : MISP supports integration with various external TI
    feeds, allowing you to enrich the platform with up-to-date threat data. By connecting
    these feeds, you can gain insights into **indicators of compromise** ( **IOCs**
    ), attack techniques, and more, enhancing your threat detection capabilities.'
  id: totrans-510
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**集成 TI 数据源**：MISP 支持与各种外部 TI 数据源的集成，允许您用最新的威胁数据丰富平台。通过连接这些数据源，您可以深入了解**妥协指示符**（**IOCs**）、攻击技术等，增强您的威胁检测能力。'
- en: '**Share and analyze threat data** : Use MISP to collaborate with trusted partners,
    sharing threat data across organizations to enhance collective defense. In addition,
    MISP offers tools to analyze incoming threat data, helping you identify attack
    patterns and assess potential risks to your network.'
  id: totrans-511
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**共享和分析威胁数据**：使用 MISP 与可信合作伙伴进行协作，在组织间共享威胁数据以增强集体防御。此外，MISP 提供了分析传入威胁数据的工具，帮助您识别攻击模式并评估网络潜在风险。'
- en: '**Automate threat detection** : By creating custom scripts and workflows, you
    can automate the processing of TI data within MISP. These automated processes
    can help quickly identify and respond to threats, improving your organization’s
    overall security posture and minimizing manual intervention.'
  id: totrans-512
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**自动化威胁检测**：通过创建自定义脚本和工作流，您可以自动化处理 MISP 中的 TI 数据。这些自动化流程有助于快速识别和响应威胁，改善组织的整体安全防护水平，并最小化人工干预。'
- en: By implementing MISP in this way, organizations can enhance their ability to
    share, analyze, and act on TI data, fostering stronger collaboration and faster
    threat mitigation.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式实施 MISP，组织能够增强共享、分析和处理 TI 数据的能力，从而促进更强的协作和更快速的威胁缓解。
- en: Vulnerability management automation
  id: totrans-514
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 漏洞管理自动化
- en: Automate the process of detecting, prioritizing, and remediating vulnerabilities.
    The following platforms can be used for this.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化漏洞的检测、优先级排序和修复过程。以下平台可用于此操作。
- en: OpenVAS
  id: totrans-516
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: OpenVAS
- en: 'OpenVAS is a widely used, open source vulnerability scanning tool designed
    to identify and manage security risks within your network and applications. By
    automating the scanning and vulnerability management process, OpenVAS enhances
    your organization’s ability to proactively detect security issues and mitigate
    potential threats. Here’s how you can implement OpenVAS effectively:'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVAS 是一款广泛使用的开源漏洞扫描工具，旨在识别和管理网络和应用程序中的安全风险。通过自动化扫描和漏洞管理过程，OpenVAS 增强了组织主动检测安全问题和减轻潜在威胁的能力。以下是有效实施
    OpenVAS 的方法：
- en: '**Install OpenVAS** : Start by following the installation guide on the OpenVAS
    website – [https://www.openvas.org/](https://www.openvas.org/) . This will set
    up the necessary components on your system, ensuring that OpenVAS is ready for
    use in scanning your network and systems.'
  id: totrans-518
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装 OpenVAS**：首先按照 OpenVAS 网站上的安装指南进行操作 – [https://www.openvas.org/](https://www.openvas.org/)。这将会在您的系统上设置必要的组件，确保
    OpenVAS 准备好用于扫描您的网络和系统。'
- en: '**Configure scans** : After installation, configure vulnerability scans to
    target your network, servers, and applications. This step ensures that OpenVAS
    is set up to detect known vulnerabilities, misconfigurations, and security risks
    based on the specific assets in your environment.'
  id: totrans-519
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**配置扫描**：安装完成后，配置漏洞扫描，确保其针对您的网络、服务器和应用程序进行扫描。此步骤确保 OpenVAS 可以根据您环境中的特定资产，检测已知漏洞、配置错误和安全风险。'
- en: '**Automate scanning** : To maintain regular vulnerability assessments, automate
    the scanning process by scheduling scans at predefined intervals. You can also
    set up automatic reporting so that scan results are promptly delivered to the
    security team for analysis and action.'
  id: totrans-520
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**自动化扫描**：为了保持定期的漏洞评估，通过预定的时间间隔自动安排扫描过程来实现自动化。您还可以设置自动报告，以便扫描结果能够及时发送到安全团队进行分析和处理。'
- en: '**Integrate with ticketing systems** : For streamlined vulnerability management,
    integrate OpenVAS with ticketing systems such as Jira. This integration automatically
    creates tickets for detected vulnerabilities, allowing the security team to track
    remediation efforts, prioritize issues, and ensure that vulnerabilities are addressed
    efficiently.'
  id: totrans-521
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**与工单系统集成**：为了简化漏洞管理，将 OpenVAS 与工单系统（如 Jira）集成。此集成将自动为检测到的漏洞创建工单，使安全团队能够跟踪修复工作、优先处理问题，并确保漏洞得到高效解决。'
- en: By integrating OpenVAS in this way, you can automate key aspects of vulnerability
    management, enhance your organization’s security posture, and improve response
    times to detected threats.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以这种方式集成 OpenVAS，您可以自动化漏洞管理的关键环节，提升组织的安全防护水平，并改善对已检测威胁的响应时间。
- en: Nessus
  id: totrans-523
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Nessus
- en: 'Nessus, a leading commercial vulnerability scanner, is widely known for its
    rich set of features and flexible API, making it an ideal tool for automating
    vulnerability management workflows. By integrating Nessus into your security automation
    process, you can improve your ability to detect and address vulnerabilities across
    your infrastructure. Here’s how to effectively use Nessus in your automation workflow:'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: Nessus 是一款领先的商业漏洞扫描工具，以其丰富的功能和灵活的 API 而广受欢迎，成为自动化漏洞管理工作流的理想工具。通过将 Nessus 集成到安全自动化过程中，您可以提升检测和解决基础设施中漏洞的能力。以下是有效使用
    Nessus 的方法：
- en: '**Install Nessus** : Start by following the installation instructions available
    on the Tenable website. This will guide you through setting up the Nessus scanner
    on your system, ensuring that it’s properly configured to start scanning your
    network and assets.'
  id: totrans-525
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装 Nessus**：首先，按照 Tenable 网站上的安装说明进行操作。这将指导你完成在系统上设置 Nessus 扫描器，确保它正确配置并开始扫描你的网络和资产。'
- en: '**Configure scans** : Once Nessus is installed, set up vulnerability scans
    tailored to your network, applications, and specific security needs. Customizing
    scan configurations helps ensure that you detect all potential security risks
    in your environment.'
  id: totrans-526
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**配置扫描**：Nessus 安装完成后，设置针对你的网络、应用程序和特定安全需求的漏洞扫描。自定义扫描配置有助于确保在你的环境中检测到所有潜在的安全风险。'
- en: '**Automate scanning with the API** : Nessus offers a robust API that allows
    you to automate scanning tasks, such as initiating scans and generating reports.
    This integration can be achieved by referring to the Nessus API documentation
    to set up automated processes for regular scans and vulnerability assessments,
    reducing manual intervention and improving efficiency.'
  id: totrans-527
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**通过 API 自动化扫描**：Nessus 提供了强大的 API，使你能够自动化扫描任务，如启动扫描和生成报告。通过参考 Nessus API 文档设置自动化流程，定期进行扫描和漏洞评估，从而减少人工干预并提高效率。'
- en: '**Remediation automation** : To take your automation further, Nessus can be
    integrated with configuration management tools such as Ansible or Puppet. This
    integration allows you to automatically apply remediation measures, such as patching
    or system reconfigurations, based on the vulnerabilities identified in the scan
    results. This streamlines the vulnerability management process, ensuring quicker
    response times and minimizing the impact of security risks.'
  id: totrans-528
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**修复自动化**：为了进一步推进自动化，Nessus 可以与配置管理工具（如 Ansible 或 Puppet）集成。此集成使你能够根据扫描结果中识别的漏洞，自动应用修复措施，如打补丁或系统重新配置。这简化了漏洞管理流程，确保更快速的响应时间并最小化安全风险的影响。'
- en: By leveraging Nessus and its API, you can automate scanning, reporting, and
    remediation tasks, helping to improve the security posture of your organization
    through proactive and efficient vulnerability management.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用 Nessus 及其 API，你可以自动化扫描、报告和修复任务，帮助通过主动和高效的漏洞管理提升组织的安全态势。
- en: Compliance automation
  id: totrans-530
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 合规性自动化
- en: 'Automate compliance checks to ensure your systems meet regulatory requirements
    and internal policies. The following platforms can be used for this:'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化合规性检查，确保你的系统符合监管要求和内部政策。可以使用以下平台来实现这一目标：
- en: AWS Config
  id: totrans-532
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: AWS Config
- en: AWS Config continuously monitors and records **Amazon Web** **Services** ( **AWS**
    ).
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Config 持续监控并记录 **Amazon Web** **Services**（**AWS**）。
- en: 'AWS Config is a powerful tool that continuously monitors and records the configuration
    of AWS resources, providing a real-time view of compliance and security. By automating
    compliance checks and remediation, AWS Config helps ensure that resources comply
    with internal policies and external regulations, significantly reducing manual
    oversight and risk. The following is a breakdown of how to leverage AWS Config
    effectively:'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Config 是一个强大的工具，能够持续监控并记录 AWS 资源的配置，提供合规性和安全性的实时视图。通过自动化合规性检查和修复措施，AWS Config
    帮助确保资源符合内部政策和外部法规，显著减少手动监督和风险。以下是有效利用 AWS Config 的步骤：
- en: '**Enable AWS Config** : To get started, you need to enable AWS Config by following
    the official AWS Config documentation – [https://aws.amazon.com/config/](https://aws.amazon.com/config/)
    . This will set up AWS Config to start recording resource configurations and track
    any changes across your AWS environment. Enabling AWS Config is the first step
    in establishing an automated framework for compliance and monitoring.'
  id: totrans-535
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**启用 AWS Config**：要开始使用，你需要按照官方 AWS Config 文档启用 AWS Config – [https://aws.amazon.com/config/](https://aws.amazon.com/config/)。这将设置
    AWS Config，开始记录资源配置并跟踪 AWS 环境中的任何变化。启用 AWS Config 是建立自动化合规性和监控框架的第一步。'
- en: '**Define compliance rules** : Once AWS Config is enabled, you can define compliance
    rules tailored to your organization’s needs. These rules allow you to specify
    which configurations should be tracked and what constitutes non-compliance. AWS
    Config provides a set of predefined rules, but you can also create custom rules
    to monitor specific configurations, such as ensuring that security groups or IAM
    policies align with your security standards.'
  id: totrans-536
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**定义合规规则**：启用 AWS Config 后，您可以定义适合您组织需求的合规规则。这些规则允许您指定应跟踪哪些配置，以及什么构成不合规。AWS
    Config 提供了一组预定义的规则，但您也可以创建自定义规则以监控特定配置，例如确保安全组或 IAM 策略符合您的安全标准。'
- en: '**Automate remediation** : The key advantage of using AWS Config is its ability
    to automatically remediate non-compliant resources. When a resource deviates from
    the defined rules, AWS Config can trigger automated actions to correct the issue—such
    as reverting a configuration change, applying a patch, or enforcing a policy update.
    This reduces the manual effort required for remediation and ensures that non-compliance
    issues are addressed swiftly.'
  id: totrans-537
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**自动化修复**：使用 AWS Config 的关键优势是其自动修复不合规资源的能力。当某个资源偏离定义的规则时，AWS Config 可以触发自动化操作来纠正问题——例如恢复配置更改、应用补丁或执行策略更新。这减少了修复所需的人工努力，并确保及时解决不合规问题。'
- en: The integration of these steps with AWS Config provides a comprehensive solution
    for ensuring consistent resource configurations, improving security, and automating
    compliance across your AWS infrastructure. By leveraging AWS Config, organizations
    can streamline their security and compliance efforts, ensuring that their AWS
    environment remains secure, compliant, and free of configuration drift.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些步骤与 AWS Config 集成，提供了一个全面的解决方案，确保资源配置的一致性、提高安全性，并在整个 AWS 基础设施中自动化合规性。通过利用
    AWS Config，组织可以简化安全和合规工作，确保其 AWS 环境保持安全、合规，并避免配置漂移。
- en: CIS-CAT
  id: totrans-539
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: CIS-CAT
- en: '**Center for Internet Security Configuration Assessment Tool** ( **CIS-CAT**
    ) is a widely used tool for assessing system configurations against CIS benchmarks,
    helping organizations maintain security best practices and compliance. By automating
    the configuration assessment process, CIS-CAT ensures that your systems are continuously
    aligned with the recommended security configurations. Here’s how to effectively
    use CIS-CAT to automate your security posture:'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: '**互联网安全中心配置评估工具**（**CIS-CAT**）是一个广泛使用的工具，用于评估系统配置与 CIS 基准的符合度，帮助组织保持安全最佳实践和合规性。通过自动化配置评估过程，CIS-CAT
    确保您的系统持续与推荐的安全配置保持一致。以下是如何有效使用 CIS-CAT 来自动化您的安全态势：'
- en: '**Download and install CIS-CAT** : The first step is to download CIS-CAT from
    the CIS website. Installing CIS-CAT provides access to the configuration assessment
    tool that is crucial for evaluating system configurations against CIS’s security
    benchmarks. The installation process ensures you have the necessary toolset for
    regular assessments.'
  id: totrans-541
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**下载并安装 CIS-CAT**：第一步是从 CIS 网站下载 CIS-CAT。安装 CIS-CAT 提供了一个配置评估工具，这对于根据 CIS 的安全基准评估系统配置至关重要。安装过程确保您拥有进行定期评估所需的工具集。'
- en: '**Run assessments** : Once CIS-CAT is installed, you can begin running assessments
    on your systems. These assessments compare the configuration of your infrastructure
    (servers, networks, and applications) against predefined security benchmarks provided
    by CIS. Running these assessments helps identify any gaps in compliance and highlights
    areas requiring improvement to meet security standards.'
  id: totrans-542
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**运行评估**：一旦安装了 CIS-CAT，您可以开始对系统进行评估。这些评估将您的基础设施配置（包括服务器、网络和应用程序）与 CIS 提供的预定义安全基准进行比较。运行这些评估有助于识别合规性中的任何差距，并突出需要改进的领域，以满足安全标准。'
- en: '**Automate reporting** : Automating assessments is a powerful way to ensure
    that your environment is continuously monitored for security compliance. With
    CIS-CAT, you can schedule assessments at regular intervals and automatically generate
    compliance reports. These reports can be used for auditing purposes, making it
    easier to demonstrate compliance with industry standards and regulatory requirements.'
  id: totrans-543
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**自动化报告**：自动化评估是一种确保您的环境持续监控安全合规性的强大方式。通过 CIS-CAT，您可以按定期间隔安排评估并自动生成合规报告。这些报告可用于审计目的，使得更容易证明符合行业标准和监管要求。'
- en: The integration of these steps ensures that your system configurations are secure
    and compliant with CIS benchmarks. Automating this process reduces the manual
    overhead of configuration checks and enhances the overall security posture of
    your organization. By utilizing CIS-CAT, you gain a structured approach to aligning
    your infrastructure with best practices, reducing vulnerabilities, and improving
    audit readiness.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤的集成确保你的系统配置安全并符合 CIS 基准。自动化这一过程减少了手动检查配置的工作负担，并增强了组织的整体安全态势。通过利用 CIS-CAT，你可以获得一个结构化的方法，将你的基础设施与最佳实践对齐，减少漏洞，并提升审计准备性。
- en: Security policy enforcement
  id: totrans-545
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全策略执行
- en: 'Automate the enforcement of security policies across your environment using
    **Open Policy Agent** ( **OPA** ). OPA is a general-purpose policy engine that
    can enforce policies across various systems. Follow these steps:'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **开放策略代理**（**OPA**）自动化安全策略的执行。OPA 是一个通用的策略引擎，可以在各种系统中执行策略。按照以下步骤操作：
- en: '**Install OPA** : Follow the installation instructions at [https://www.openpolicyagent.org/](https://www.openpolicyagent.org/)
    .'
  id: totrans-547
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装 OPA** : 请按照 [https://www.openpolicyagent.org/](https://www.openpolicyagent.org/)
    上的安装说明进行操作。'
- en: '**Define policies** : Write policies in Rego, OPA’s policy language.'
  id: totrans-548
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**定义策略** : 使用 Rego 编写策略，这是 OPA 的策略语言。'
- en: '**Integrate OPA** : Integrate OPA with your applications and infrastructure
    to enforce policies.'
  id: totrans-549
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**集成 OPA** : 将 OPA 集成到你的应用程序和基础设施中，以执行策略。'
- en: '**Automate policy enforcement** : Use OPA to continuously enforce security
    policies.'
  id: totrans-550
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**自动化策略执行** : 使用 OPA 持续执行安全策略。'
- en: Data loss prevention automation
  id: totrans-551
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据丢失防护自动化
- en: Automate the detection and prevention of data leaks and unauthorized data access.
    The following platforms can be used for this.
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化数据泄露和未经授权的数据访问的检测和防止。以下平台可用于此目的。
- en: Google DLP API
  id: totrans-553
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Google DLP API
- en: 'Google Cloud’s **Data Loss Prevention** ( **DLP** ) API helps organizations
    automate the discovery, classification, and protection of sensitive data. It enables
    the scanning of your data across various storage locations to identify and manage
    sensitive information such as personal identifiers or financial data. The following
    are the steps to integrate and automate data protection using the Google DLP API:'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: Google Cloud 的 **数据丢失防护**（**DLP**）API 帮助组织自动化发现、分类和保护敏感数据。它能够扫描你的数据，遍历不同的存储位置，识别和管理敏感信息，如个人标识符或财务数据。以下是使用
    Google DLP API 集成和自动化数据保护的步骤：
- en: '**Enable the Google DLP API** : To get started, you must first enable the DLP
    API within the Google Cloud Console. Enabling the API is the foundation for using
    the Google DLP features within your environment, allowing access to the DLP services
    for scanning and classifying data across Google Cloud services.'
  id: totrans-555
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**启用 Google DLP API** : 首先，你需要在 Google Cloud 控制台中启用 DLP API。启用该 API 是在你的环境中使用
    Google DLP 功能的基础，使得能够访问 DLP 服务来扫描和分类 Google Cloud 服务中的数据。'
- en: '**Install the Google Cloud SDK** : Once the API is enabled, the next step is
    installing the Google Cloud SDK. The SDK provides the necessary tools and libraries
    to interact with Google Cloud services from your local machine or development
    environment. You can follow the installation instructions on the Google Cloud
    SDK website. This step is crucial for setting up your development environment
    to work with the DLP API.'
  id: totrans-556
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装 Google Cloud SDK** : 启用 API 后，下一步是安装 Google Cloud SDK。SDK 提供了必要的工具和库，使你能够从本地机器或开发环境与
    Google Cloud 服务进行交互。你可以在 Google Cloud SDK 网站上查阅安装说明。这一步对于设置你的开发环境以便与 DLP API 配合使用至关重要。'
- en: '**Use the DLP API** : With the API enabled and the SDK installed, you can now
    write Python scripts to automate data classification and protection tasks. By
    interacting with the DLP API, you can scan text, files, or other data for sensitive
    information, apply redaction or masking techniques, and even enforce compliance
    by ensuring data is properly protected according to your organization’s security
    policies.'
  id: totrans-557
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用 DLP API** : 启用 API 并安装 SDK 后，你现在可以编写 Python 脚本来自动化数据分类和保护任务。通过与 DLP API
    交互，你可以扫描文本、文件或其他数据以查找敏感信息，应用去标识化或屏蔽技术，甚至通过确保数据根据组织的安全政策得到妥善保护来强制执行合规性。'
- en: These steps outline the core actions needed to integrate Google DLP into your
    automated security processes. By automating data discovery, classification, and
    protection, organizations can enhance their data security posture, ensuring that
    sensitive information is identified and appropriately safeguarded without manual
    intervention. The ability to schedule and automate these tasks provides consistency
    and scalability in securing sensitive data across cloud environments.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤概述了将 Google DLP 集成到你的自动化安全流程中所需的核心操作。通过自动化数据发现、分类和保护，组织可以增强其数据安全态势，确保敏感信息被及时识别并得到适当保护，无需人工干预。能够安排和自动化这些任务，为在云环境中保护敏感数据提供了一致性和可扩展性。
- en: OpenDLP
  id: totrans-559
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: OpenDLP
- en: 'OpenDLP is an open source tool designed to scan data at rest for sensitive
    information, providing an essential solution for automating data protection across
    your systems. It helps organizations ensure that sensitive data such as personal
    identifiers, credit card numbers, and other private information is properly protected.
    The following steps explain how to use OpenDLP to automate your data protection
    efforts:'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: OpenDLP 是一款开源工具，旨在扫描静态数据中的敏感信息，为你的系统提供自动化数据保护的关键解决方案。它帮助组织确保敏感数据（如个人标识符、信用卡号码和其他私人信息）得到适当保护。以下步骤解释了如何使用
    OpenDLP 来自动化你的数据保护工作：
- en: '**Install OpenDLP** : The first step to using OpenDLP is installing the tool.
    You can follow the installation instructions provided on the OpenDLP GitHub page
    – [https://github.com/ezarko/opendlp](https://github.com/ezarko/opendlp) or [https://github.com/cloudsecuritylabs/openDLP](https://github.com/cloudsecuritylabs/openDLP)
    . This installation process sets up the necessary components to enable data scanning
    in your environment. By installing OpenDLP, you’re preparing your infrastructure
    for automated data discovery and protection, which is a key step in preventing
    data breaches.'
  id: totrans-561
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装 OpenDLP** ：使用 OpenDLP 的第一步是安装该工具。你可以按照 OpenDLP GitHub 页面上提供的安装说明进行操作：[https://github.com/ezarko/opendlp](https://github.com/ezarko/opendlp)
    或 [https://github.com/cloudsecuritylabs/openDLP](https://github.com/cloudsecuritylabs/openDLP)。此安装过程将设置必要的组件，以便在你的环境中启用数据扫描。通过安装
    OpenDLP，你正在为自动化数据发现和保护做好准备，这一步是防止数据泄露的关键步骤。'
- en: '**Configure scans** : Once installed, you need to configure data scans to target
    the areas where sensitive data might reside (e.g., databases and filesystems).
    Configuring scans involves specifying the locations to search, selecting the types
    of sensitive data to detect, and adjusting parameters such as the scan frequency
    and data handling actions. This step is essential for customizing the scanning
    process to meet your specific needs, ensuring that OpenDLP checks relevant data
    sources.'
  id: totrans-562
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**配置扫描** ：安装完成后，你需要配置数据扫描，目标是识别敏感数据可能存在的区域（例如，数据库和文件系统）。配置扫描涉及指定要搜索的位置、选择要检测的敏感数据类型，并调整诸如扫描频率和数据处理操作等参数。这一步对于定制扫描过程以满足你的特定需求至关重要，确保
    OpenDLP 检查相关的数据源。'
- en: '**Automate data protection** : With OpenDLP configured, you can set it up to
    automatically detect and protect sensitive data. This can involve actions such
    as redacting, masking, or flagging sensitive information upon detection. Automating
    these tasks reduces the reliance on manual oversight, ensuring consistent and
    continuous data protection. With automation, you ensure that sensitive data is
    managed in real time, reducing the chances of exposure or unauthorized access.'
  id: totrans-563
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**自动化数据保护** ：配置好 OpenDLP 后，你可以将其设置为自动检测和保护敏感数据。这可能包括在检测到敏感信息后进行遮盖、掩码或标记等操作。自动化这些任务减少了对人工监督的依赖，确保数据保护的一致性和持续性。通过自动化，你可以确保敏感数据实时管理，减少暴露或未经授权访问的机会。'
- en: These steps provide a comprehensive approach to using OpenDLP for automating
    the discovery and protection of sensitive information. By configuring automated
    scans and protection actions, OpenDLP helps organizations stay compliant with
    data protection regulations while minimizing the risk of data breaches. Automating
    this process is a proactive step toward securing sensitive data and ensuring privacy,
    which is a core requirement in today’s data-driven environment.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤提供了一个全面的方法，用于自动化发现和保护敏感信息的 OpenDLP 使用过程。通过配置自动扫描和保护操作，OpenDLP 帮助组织遵守数据保护法规，同时最小化数据泄露的风险。自动化此过程是保护敏感数据和确保隐私的主动步骤，这是当今数据驱动环境中的核心要求。
- en: API security automation
  id: totrans-565
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: API 安全自动化
- en: Automate the security testing and monitoring of APIs to ensure they are secure.
    The following platforms can be used for this.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化 API 的安全测试和监控，确保其安全性。以下平台可以用于此目的。
- en: OWASP ZAP
  id: totrans-567
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: OWASP ZAP
- en: '**OWASP ZAP** ( **Zed Attack Proxy** ) is an open source web application security
    scanner designed to help with finding vulnerabilities in web applications. The
    following is a detailed explanation of the key steps for integrating OWASP ZAP
    into your security workflow:'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: '**OWASP ZAP**（**Zed Attack Proxy**）是一个开源的 Web 应用程序安全扫描器，旨在帮助发现 Web 应用程序中的漏洞。以下是将
    OWASP ZAP 集成到你的安全工作流中的关键步骤的详细说明：'
- en: '**Install OWASP ZAP** : To begin using ZAP, you’ll need to install it on your
    system. Installation instructions can be found on the official OWASP ZAP website
    ( [zaproxy.org](http://zaproxy.org) ). Once installed, ZAP provides a user-friendly
    interface for both manual and automated penetration testing of web applications.'
  id: totrans-569
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装 OWASP ZAP** ：要开始使用 ZAP，你需要在系统上安装它。安装说明可以在官方 OWASP ZAP 网站（ [zaproxy.org](http://zaproxy.org)
    ）找到。安装完成后，ZAP 提供了一个用户友好的界面，用于手动和自动化的 Web 应用程序渗透测试。'
- en: '**Automate** **security tests** :'
  id: totrans-570
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**自动化安全测试**：'
- en: The ZAP API allows for automating security testing on your web applications
    and APIs. This integration enables you to run security scans on demand, which
    can be particularly useful when testing different environments or making regular
    security checks part of your development process. Automating security testing
    ensures that vulnerabilities are detected early, preventing potential security
    risks from reaching production.
  id: totrans-571
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ZAP API 允许对你的 Web 应用程序和 API 进行自动化安全测试。此集成使你能够按需运行安全扫描，这在测试不同环境或将常规安全检查纳入开发过程中时尤其有用。自动化安全测试可以确保漏洞在早期被检测到，从而防止潜在的安全风险进入生产环境。
- en: '*Example* : Use Python or other scripting languages to interface with the ZAP
    API and trigger scans automatically after every code commit or in response to
    specific events.'
  id: totrans-572
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*示例* ：使用 Python 或其他脚本语言与 ZAP API 接口，并在每次代码提交后或响应特定事件时自动触发扫描。'
- en: '**Integrate** **with CI/CD** :'
  id: totrans-573
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**与 CI/CD 集成**：'
- en: Integrating OWASP ZAP into your CI/CD pipeline is essential for maintaining
    consistent security across your development cycle. This ensures that every time
    a developer pushes code changes to the repository, ZAP automatically scans the
    new API or web application for vulnerabilities. This integration is particularly
    useful for preventing security issues from making it into production by catching
    them early in the development life cycle.
  id: totrans-574
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 OWASP ZAP 集成到你的 CI/CD 管道中，对于保持开发周期中的一致性安全性至关重要。这确保了每当开发人员将代码更改推送到代码库时，ZAP
    会自动扫描新的 API 或 Web 应用程序的漏洞。这种集成特别有助于防止安全问题在生产中出现，因为它们会在开发生命周期的早期被发现。
- en: '*Example* : Add a step in your Jenkins, GitLab, or CircleCI pipeline that triggers
    an OWASP ZAP scan every time a new build is deployed to a test environment. This
    could include checking for common vulnerabilities such as SQL injection, XSS,
    and authentication issues.'
  id: totrans-575
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*示例* ：在你的 Jenkins、GitLab 或 CircleCI 管道中添加一个步骤，每当新的构建部署到测试环境时触发 OWASP ZAP 扫描。这可以包括检查常见的漏洞，如
    SQL 注入、XSS 和身份验证问题。'
- en: By automating security testing and integrating it into your CI/CD pipeline,
    you ensure that security is an ongoing part of the development process. This proactive
    approach helps identify and mitigate vulnerabilities faster, reducing the risk
    of a successful attack.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 通过自动化安全测试并将其集成到你的 CI/CD 管道中，你确保安全性成为开发过程的持续部分。这种主动的方法有助于更快地识别和缓解漏洞，减少成功攻击的风险。
- en: The main benefit of these steps is that they make security testing a regular,
    automated part of your workflow, allowing your development and security teams
    to focus on other high-priority tasks while still ensuring that your web applications
    and APIs are secure.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤的主要好处在于，它们使安全测试成为你工作流程中的常规自动化部分，让你的开发和安全团队能够专注于其他高优先级任务，同时确保你的 Web 应用程序和
    API 的安全。
- en: Postman
  id: totrans-578
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Postman
- en: 'Postman is widely recognized as an essential tool for API development and testing,
    including security testing. Here’s how you can leverage Postman to secure your
    APIs and integrate security testing into your CI/CD pipeline:'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: Postman 被广泛认可为 API 开发和测试的重要工具，包括安全测试。以下是如何利用 Postman 来保护你的 API 并将安全测试集成到你的 CI/CD
    管道中：
- en: '**Install Postman** : Begin by downloading and installing Postman from the
    official website – [https://www.postman.com/](https://www.postman.com/) . It’s
    available for various OSs, including Windows, macOS, and Linux. Once installed,
    you can start creating and testing APIs directly through Postman’s user-friendly
    interface.'
  id: totrans-580
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装 Postman**：首先从官方网站下载并安装 Postman – [https://www.postman.com/](https://www.postman.com/)。它适用于多种操作系统，包括
    Windows、macOS 和 Linux。安装后，你可以通过 Postman 的用户友好界面直接创建和测试 API。'
- en: '**Create security tests** : After setting up Postman, you can write and save
    security-specific tests for your APIs. This might include checking for vulnerabilities
    such as improper authentication, insecure data transmission, or broken access
    control. Postman allows you to create pre-request scripts and tests in JavaScript
    to automate these checks, ensuring that each API request is thoroughly validated
    for potential security risks.'
  id: totrans-581
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建安全测试**：在设置好 Postman 后，你可以编写并保存针对 API 的安全性测试。这可能包括检查如身份验证不当、不安全的数据传输或访问控制漏洞等问题。Postman
    允许你创建预请求脚本和 JavaScript 测试，以自动化这些检查，确保每个 API 请求都经过彻底验证，避免潜在的安全风险。'
- en: '**Automate** **with Newman** :'
  id: totrans-582
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**自动化** **与 Newman**：'
- en: To integrate your Postman tests into your CI/CD pipeline, you can use **Newman**
    , Postman’s command-line tool. Newman allows you to run your saved Postman collections
    and tests as part of your CI/CD workflows, ensuring that each deployment is tested
    for security vulnerabilities automatically.
  id: totrans-583
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了将你的 Postman 测试集成到 CI/CD 管道中，你可以使用 **Newman**，Postman 的命令行工具。Newman 允许你将保存的
    Postman 集合和测试作为 CI/CD 工作流的一部分运行，确保每次部署都能自动测试安全漏洞。
- en: '**Installation** : Install Newman globally using **npm** :'
  id: totrans-584
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装**：通过 **npm** 全局安装 Newman：'
- en: '[PRE7]'
  id: totrans-585
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Once installed, you can run your Postman tests from the command line, making
    it easy to integrate them into your automated deployment pipeline (e.g., Jenkins,
    CircleCI, or GitLab CI). This allows your security tests to run with each new
    code deployment, helping to catch vulnerabilities early and continuously monitor
    API security.
  id: totrans-586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安装后，你可以通过命令行运行 Postman 测试，便于将它们集成到自动化部署管道中（例如 Jenkins、CircleCI 或 GitLab CI）。这样，安全测试将随每次新代码部署进行，帮助及早发现漏洞，并持续监控
    API 安全。
- en: By using Postman in combination with Newman, you can effectively automate the
    security testing of your APIs, ensuring that security is always a part of your
    development and deployment processes. This proactive approach reduces the chances
    of vulnerabilities slipping into production.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 Postman 与 Newman 配合使用，你可以有效地自动化 API 的安全测试，确保安全始终是开发和部署过程的一部分。这种积极主动的方法减少了漏洞进入生产环境的机会。
- en: Best practices and customization – optimizing your Python setup
  id: totrans-588
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最佳实践和定制——优化你的 Python 设置
- en: 'Optimizing your Python development environment involves best practices, customizing
    your tools, and streamlining workflows to improve productivity, code quality,
    and security. Here’s a structured approach to set up your project:'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 优化你的 Python 开发环境涉及最佳实践、定制工具和精简工作流程，以提高生产力、代码质量和安全性。以下是设置项目的结构化方法：
- en: '**Project structure** **and organization** :'
  id: totrans-590
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**项目结构** **与组织**：'
- en: 'Organizing your files consistently from the start makes your project easier
    to manage. A standard project layout can help with scalability and maintainability.
    Here’s a common structure:'
  id: totrans-591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从一开始就保持文件的一致组织方式，会使项目更易于管理。标准的项目布局有助于扩展性和可维护性。以下是一个常见的结构：
- en: '[PRE8]'
  id: totrans-592
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Using README.md** : After establishing the project structure, write a detailed
    **README.md** file to provide essential information about your project. Include
    the following:'
  id: totrans-593
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 README.md**：在建立项目结构后，编写详细的 **README.md** 文件，提供关于项目的基本信息。包括以下内容：'
- en: Project description
  id: totrans-594
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目描述
- en: Installation instructions
  id: totrans-595
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装说明
- en: Usage examples
  id: totrans-596
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用示例
- en: Contribution guidelines
  id: totrans-597
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 贡献指南
- en: '**Using .gitignore** : Next, ensure that your **.gitignore** file is properly
    configured to ignore unnecessary files. Here’s an example of files to exclude:'
  id: totrans-598
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 .gitignore**：接下来，确保你的 **.gitignore** 文件已正确配置，以忽略不必要的文件。以下是需要排除的文件示例：'
- en: '[PRE9]'
  id: totrans-599
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Dependency management** :'
  id: totrans-600
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**依赖管理**：'
- en: 'Use **pip** and **virtualenv** to manage dependencies in isolated environments.
    This ensures that your project has a consistent set of dependencies that won’t
    interfere with other projects:'
  id: totrans-601
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 **pip** 和 **virtualenv** 来管理隔离环境中的依赖项。这确保了项目具有一致的依赖集，不会干扰其他项目：
- en: 'Create a virtual environment:'
  id: totrans-602
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建虚拟环境：
- en: '[PRE10]'
  id: totrans-603
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Activate the virtual environment:'
  id: totrans-604
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活虚拟环境：
- en: 'On Windows: **venv\Scripts\activate**'
  id: totrans-605
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Windows 上：**venv\Scripts\activate**
- en: 'On macOS/Linux: **source venv/bin/activate**'
  id: totrans-606
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 macOS/Linux 上：**source venv/bin/activate**
- en: 'Install dependencies:'
  id: totrans-607
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装依赖项：
- en: '[PRE11]'
  id: totrans-608
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Using pip-tools for dependency management** : For more advanced dependency
    management, install **pip-tools** to manage direct and transitive dependencies
    more effectively:'
  id: totrans-609
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用 pip-tools 进行依赖管理**：为了更高级的依赖管理，安装 **pip-tools** 来更有效地管理直接和传递依赖项：'
- en: 'Install **pip-tools** :'
  id: totrans-610
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 **pip-tools**：
- en: '[PRE12]'
  id: totrans-611
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create a **requirements.in** file: List your direct dependencies here.'
  id: totrans-612
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 **requirements.in** 文件：在此文件中列出你的直接依赖项。
- en: 'Compile dependencies:'
  id: totrans-613
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译依赖项：
- en: '[PRE13]'
  id: totrans-614
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Synchronize the installed packages:'
  id: totrans-615
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同步已安装的包：
- en: '[PRE14]'
  id: totrans-616
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This order provides clarity by first establishing the project structure with
    **README** and **.gitignore** , then managing dependencies, and further enhancing
    with tools such as **pip-tools** . This helps create a solid foundation before
    proceeding with other optimizations.
  id: totrans-617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种顺序通过首先建立项目结构（如 **README** 和 **.gitignore**），然后管理依赖项，最后使用如 **pip-tools** 等工具来增强功能，提供了清晰的结构。这有助于在进行其他优化之前打下坚实的基础。
- en: '**Project structure and organization** : Follow a standard project layout,
    organizing your project files and directories in a consistent manner. Here’s a
    common structure:'
  id: totrans-618
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**项目结构与组织**：遵循标准项目布局，系统地组织你的项目文件和目录。以下是常见的结构：'
- en: '[PRE15]'
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Write a detailed **README.md** file with the following defined:'
  id: totrans-620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 编写详细的 **README.md** 文件，并定义以下内容：
- en: Project description
  id: totrans-621
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目描述
- en: Installation instructions
  id: totrans-622
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装说明
- en: Usage examples
  id: totrans-623
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用示例
- en: Contribution guidelines
  id: totrans-624
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 贡献指南
- en: 'Use **.gitignore** to specify files and directories to be ignored by Git. Here’s
    some example content:'
  id: totrans-625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 **.gitignore** 来指定 Git 忽略的文件和目录。以下是一些示例内容：
- en: '[PRE16]'
  id: totrans-626
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**Dependency management** : Use **pip** and **virtualenv** :'
  id: totrans-627
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**依赖管理**：使用 **pip** 和 **virtualenv**：'
- en: 'Create a virtual environment:'
  id: totrans-628
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建虚拟环境：
- en: '[PRE17]'
  id: totrans-629
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Activate the virtual environment:'
  id: totrans-630
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活虚拟环境：
- en: On Windows, run **venv\Scripts\activate**
  id: totrans-631
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 上，运行 **venv\Scripts\activate**
- en: On macOS/Linux, run **source venv/bin/activate**
  id: totrans-632
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 macOS/Linux 上，运行 **source venv/bin/activate**
- en: 'Install dependencies:'
  id: totrans-633
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装依赖项：
- en: '[PRE18]'
  id: totrans-634
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Use **pip-tools** for dependency management:'
  id: totrans-635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 **pip-tools** 进行依赖管理：
- en: 'Install **pip-tools** :'
  id: totrans-636
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 **pip-tools**：
- en: '[PRE19]'
  id: totrans-637
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Create a **requirements.in** file: List your direct dependencies in **requirements.in**
    .'
  id: totrans-638
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 **requirements.in** 文件：在 **requirements.in** 文件中列出你的直接依赖项。
- en: 'Compile dependencies:'
  id: totrans-639
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译依赖项：
- en: '[PRE20]'
  id: totrans-640
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Install dependencies:'
  id: totrans-641
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装依赖项：
- en: '[PRE21]'
  id: totrans-642
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '**Coding standards** : Follow PEP 8. PEP 8 is the style guide for Python code.
    Use linters to enforce coding standards:'
  id: totrans-643
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**编码标准**：遵循 PEP 8。PEP 8 是 Python 代码的风格指南。使用代码检查工具（linters）来强制执行编码标准：'
- en: 'Install Flake8 as follows:'
  id: totrans-644
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式安装 Flake8：
- en: '[PRE22]'
  id: totrans-645
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Install Black (code formatter) as follows:'
  id: totrans-646
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式安装 Black（代码格式化工具）：
- en: '[PRE23]'
  id: totrans-647
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '**Use type annotations** : Type annotations help with code readability and
    can be checked with tools such as **mypy** :'
  id: totrans-648
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用类型注解**：类型注解有助于代码的可读性，并且可以通过工具如 **mypy** 进行检查：'
- en: '[PRE24]'
  id: totrans-649
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Check types:'
  id: totrans-650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 检查类型：
- en: '[PRE25]'
  id: totrans-651
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '**Automated testing** : Use **unittest** or **pytest** :'
  id: totrans-652
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**自动化测试**：使用 **unittest** 或 **pytest**：'
- en: '**unittest** is a built-in testing framework. Import it as follows:'
  id: totrans-653
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**unittest** 是一个内置的测试框架。按如下方式导入：'
- en: '[PRE26]'
  id: totrans-654
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '**pytest** is a popular testing framework. Install it as follows:'
  id: totrans-655
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pytest** 是一个流行的测试框架。按如下方式安装：'
- en: '[PRE27]'
  id: totrans-656
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-657
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '**Automate testing with CI/CD** : Integrate testing with CI/CD pipelines using
    tools such as GitHub Actions, Travis CI, or CircleCI:'
  id: totrans-658
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**通过 CI/CD 自动化测试**：使用 GitHub Actions、Travis CI 或 CircleCI 等工具将测试与 CI/CD 管道集成：'
- en: '[PRE29]'
  id: totrans-659
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '**Version control** : Use Git for version control:'
  id: totrans-660
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**版本控制**：使用 Git 进行版本控制：'
- en: 'Initialize a Git repository:'
  id: totrans-661
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化 Git 仓库：
- en: '[PRE30]'
  id: totrans-662
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Commit changes:'
  id: totrans-663
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交更改：
- en: '[PRE31]'
  id: totrans-664
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Use branches:'
  id: totrans-665
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用分支：
- en: '[PRE32]'
  id: totrans-666
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Follow Git best practices:'
  id: totrans-667
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 遵循 Git 最佳实践：
- en: Commit often with meaningful messages
  id: totrans-668
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经常提交并附上有意义的提交信息
- en: Use pull requests for code reviews
  id: totrans-669
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用拉取请求进行代码审查
- en: Tag releases with version numbers
  id: totrans-670
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用版本号标记发布版本
- en: '**Documentation** : Write docstrings:'
  id: totrans-671
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**文档**：编写文档字符串：'
- en: 'Use docstrings to document your code. Follow conventions such as Google style
    or NumPy style:'
  id: totrans-672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用文档字符串来记录你的代码。遵循诸如 Google 风格或 NumPy 风格等约定：
- en: '[PRE33]'
  id: totrans-673
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Generate documentation with Sphinx:'
  id: totrans-674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 Sphinx 生成文档：
- en: 'Install Sphinx:'
  id: totrans-675
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Sphinx：
- en: '[PRE34]'
  id: totrans-676
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Initialize Sphinx:'
  id: totrans-677
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化 Sphinx：
- en: '[PRE35]'
  id: totrans-678
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Generate HTML documentation:'
  id: totrans-679
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成 HTML 文档：
- en: '[PRE36]'
  id: totrans-680
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '**Logging and monitoring** : Use the **logging** module.'
  id: totrans-681
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**日志记录与监控**：使用 **logging** 模块。'
- en: 'Set up logging to track application behavior and errors:'
  id: totrans-682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 设置日志记录以跟踪应用程序行为和错误：
- en: '[PRE37]'
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Log to external services:'
  id: totrans-684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将日志记录到外部服务：
- en: Use logging libraries such as **loguru** or **structlog** for advanced logging
    features
  id: totrans-685
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用如 **loguru** 或 **structlog** 等日志库来获取更高级的日志功能
- en: Integrate with external logging services such as ELK Stack, Splunk, or Google
    Cloud Logging
  id: totrans-686
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与外部日志服务集成，如 ELK Stack、Splunk 或 Google Cloud Logging。
- en: '**Security best practices** : Handle secrets securely:'
  id: totrans-687
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安全最佳实践**：安全地处理密钥：'
- en: Use environment variables for sensitive information
  id: totrans-688
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用环境变量存储敏感信息。
- en: 'Use libraries such as **python-dotenv** to load environment variables from
    a **.** **env** file:'
  id: totrans-689
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **python-dotenv** 等库从 **.env** 文件加载环境变量：
- en: '[PRE38]'
  id: totrans-690
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Keep dependencies updated:'
  id: totrans-691
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持依赖库更新：
- en: Regularly update dependencies to ensure you have the latest security patches
  id: totrans-692
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期更新依赖库，确保获得最新的安全补丁。
- en: 'Use tools such as **safety** to check for vulnerabilities:'
  id: totrans-693
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **safety** 等工具检查漏洞：
- en: '[PRE39]'
  id: totrans-694
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Secure coding practices:'
  id: totrans-695
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全编码实践：
- en: Validate and sanitize user inputs
  id: totrans-696
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证并清理用户输入。
- en: Use secure libraries and frameworks
  id: totrans-697
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用安全的库和框架。
- en: Avoid using **exec** or **eval** with untrusted inputs
  id: totrans-698
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免在不可信输入下使用 **exec** 或 **eval**。
- en: '**Performance** **optimization** : Profile and optimize code.'
  id: totrans-699
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**性能** **优化**：分析并优化代码。'
- en: 'Use **cProfile** to profile your code:'
  id: totrans-700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 **cProfile** 分析代码性能：
- en: '[PRE40]'
  id: totrans-701
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Analyze the profile using **pstats** or visualization tools such as SnakeViz.
  id: totrans-702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用**pstats**或可视化工具如 SnakeViz 分析性能概况。
- en: 'Use efficient data structures:'
  id: totrans-703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用高效的数据结构：
- en: Use built-in data structures such as lists, sets, and dictionaries effectively.
  id: totrans-704
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高效地使用内建数据结构，如列表、集合和字典。
- en: Consider using libraries such as **numpy** for numerical computations and **pandas**
    for data manipulation.
  id: totrans-705
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑使用 **numpy** 等库进行数值计算，使用 **pandas** 进行数据处理。
- en: '**Development workflow customization** : Customize your editor/IDE:'
  id: totrans-706
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**开发工作流定制**：定制您的编辑器/IDE：'
- en: Use extensions and plugins for code linting, formatting, and autocompletion.
  id: totrans-707
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用扩展和插件进行代码的 lint、格式化和自动补全。
- en: Popular editors/IDEs include VS Code, PyCharm, and Sublime Text.
  id: totrans-708
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常用的编辑器/IDE 包括 VS Code、PyCharm 和 Sublime Text。
- en: 'Automate repetitive tasks: Use task runners such as **Invoke** or **Make**
    to automate repetitive tasks:'
  id: totrans-709
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自动化重复任务：使用任务运行器，如 **Invoke** 或 **Make**，自动化重复任务：
- en: '[PRE41]'
  id: totrans-710
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Use **pre-commit** hooks to run linters and tests before committing code:'
  id: totrans-711
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **pre-commit** 钩子在提交代码前运行 linters 和测试：
- en: '[PRE42]'
  id: totrans-712
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: By following these best practices and customizing your development environment,
    you can create a more efficient, secure, and maintainable Python setup. This will
    help you focus on writing high-quality code and reduce the overhead of managing
    your development workflow.
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这些最佳实践并定制您的开发环境，您可以创建一个更高效、安全且易维护的 Python 设置。这将帮助您专注于编写高质量的代码，并减少管理开发工作流的开销。
- en: Summary
  id: totrans-714
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter provided a comprehensive guide to setting up a Python development
    environment, essential for effective and efficient programming. We began with
    the installation of Python, covering the latest version and ensuring that Python
    is added to your system’s **PATH** environment variable for easy access. The chapter
    then explored the importance of using virtual environments to isolate project
    dependencies, manage different library versions, and avoid conflicts between projects.
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了设置 Python 开发环境的全面指南，这是高效编程的关键。我们从 Python 的安装开始，涵盖了最新版本并确保将 Python 添加到系统的
    **PATH** 环境变量中，以便于访问。然后，本章探讨了使用虚拟环境的重要性，以隔离项目依赖、管理不同版本的库，并避免项目间的冲突。
- en: 'In this chapter, we covered the following:'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们涵盖了以下内容：
- en: '**Python installation** : Successfully installed Python on your OS, ensuring
    compatibility for future development.'
  id: totrans-717
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python 安装**：成功在您的操作系统上安装 Python，确保未来开发的兼容性。'
- en: '**Virtual environments** : Gained an understanding of virtual environments
    and how to use them to manage dependencies and isolate projects effectively.'
  id: totrans-718
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟环境**：了解虚拟环境及其如何有效地管理依赖并隔离项目。'
- en: '**Choosing the right tools** : Explored different IDEs and text editors, selecting
    the right one based on your workflow preferences and needs.'
  id: totrans-719
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择合适的工具**：探索不同的 IDE 和文本编辑器，根据您的工作流偏好和需求选择合适的工具。'
- en: '**Dependency management** : Learned how to install, manage, and track Python
    libraries using **pip** and **requirements.txt** files for streamlined project
    management.'
  id: totrans-720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖管理**：学习如何使用 **pip** 和 **requirements.txt** 文件安装、管理和追踪 Python 库，简化项目管理。'
- en: '**Environment verification** : Confirmed that your Python development environment
    is set up correctly, enabling you to begin scripting for security automation.'
  id: totrans-721
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境验证**：确认您的 Python 开发环境已正确设置，能够开始进行安全自动化脚本编写。'
- en: With your development environment configured, you’re now ready to embark on
    automating security tasks with Python confidently and efficiently. The next chapter
    will provide a comprehensive introduction to the fundamental concepts of Python
    scripting tailored specifically for security professionals.
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置好开发环境后，你现在已经准备好自信高效地使用 Python 自动化安全任务。下一章将全面介绍专门为安全专业人员量身定制的 Python 脚本基础概念。
