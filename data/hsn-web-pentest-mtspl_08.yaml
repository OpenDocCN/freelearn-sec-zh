- en: Vulnerability Scanning Using WMAP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用WMAP进行漏洞扫描
- en: Vulnerability assessment is the process of identifying, ranking, and classifying
    the vulnerabilities in a network or an application. It provides an organization
    with an understanding of their assets and the risks they face. When using Metasploit,
    vulnerability scanning can be done using separate auxiliary modules or using the
    available plugins. The Metasploit Framework also allows us to add our own custom
    plugin if we have our own vulnerability scanner (in-house).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞评估是识别、排名和分类网络或应用程序中的漏洞的过程。它为组织提供了对其资产和面临的风险的理解。在使用Metasploit时，可以使用单独的辅助模块或可用的插件进行漏洞扫描。Metasploit框架还允许我们添加自己的自定义插件，如果我们有自己的漏洞扫描器（内部）。
- en: WMAP is a Metasploit plugin that gives users the freedom to perform vulnerability
    scanning on a target with respect to the Metasploit modules used in the scan.
    One of the best features of this plugin is the ability to use as many Metasploit
    modules (including custom modules) for a vulnerability scan as required by the
    tester. The tester can create multiple profiles to fit different scenarios.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: WMAP是Metasploit的插件，它使用户可以根据扫描中使用的Metasploit模块对目标进行漏洞扫描。此插件的最佳功能之一是能够根据测试人员的要求使用尽可能多的Metasploit模块（包括自定义模块）进行漏洞扫描。测试人员可以创建多个配置文件以适应不同的情况。
- en: 'In this chapter, we will be learning about the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下主题：
- en: Understanding WMAP
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解WMAP
- en: The WMAP scanning process
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WMAP扫描过程
- en: WMAP module execution order
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WMAP模块执行顺序
- en: Adding modules to WMAP
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向WMAP添加模块
- en: Clustered scanning using WMAP
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用WMAP进行集群扫描
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following are the prerequisites for this chapter:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的先决条件如下：
- en: The Metasploit Framework ([https://github.com/rapid7/metasploit-framework](https://github.com/rapid7/metasploit-framework))
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit框架（[https://github.com/rapid7/metasploit-framework](https://github.com/rapid7/metasploit-framework)）
- en: A *nix-based system or Microsoft Windows system
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于*nix系统或Microsoft Windows系统
- en: The WMAP plugin for Metasploit
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit的WMAP插件
- en: Understanding WMAP
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解WMAP
- en: '**WMAP** is a web application *scanner* plugin that is used for scanning web
    application vulnerabilities. It''s not a real scanner like Burp Suite or Acunetix,
    but it does have its own advantages. Before going into detail about WMAP, let''s
    try to understand its architecture first.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**WMAP**是用于扫描Web应用程序漏洞的*扫描器*插件。它不像Burp Suite或Acunetix那样是真正的扫描器，但它确实有自己的优势。在详细了解WMAP之前，让我们先试着了解其架构。'
- en: The WMAP architecture is simple yet powerful. WMAP is a mini-framework that
    is loaded into MSF as a plugin. It connects with the Metasploit database to fetch
    the results of any previously completed scans. The results loaded from the database
    (such as hostnames, URLs, IPs, and so on) will then be used in the web application scan.
    WMAP uses Metasploit modules (as we can see in the following diagram) to run the
    scan and the modules can be of any type – auxiliary, exploits, and so on. Once
    WMAP starts the scanning of the targets, all the artifacts and crucial information
    found gets stored in the MSF database. One of the most powerful features of WMAP
    is its distributed (clustered) scanning feature (covered in the *Clustered scanning
    using WMAP* section of this chapter), which helps WMAP to scan any number of web
    applications through *n* number of nodes (MSF slave).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: WMAP架构简单而强大。WMAP是作为插件加载到MSF中的迷你框架。它连接到Metasploit数据库以获取任何先前完成的扫描的结果。从数据库加载的结果（如主机名、URL、IP等）将用于Web应用程序扫描。WMAP使用Metasploit模块（如下图所示）来运行扫描，模块可以是任何类型的-辅助、利用等。一旦WMAP开始扫描目标，找到的所有工件和关键信息都将存储在MSF数据库中。WMAP最强大的功能之一是其分布式（集群）扫描功能（在本章的*使用WMAP进行集群扫描*部分中介绍），它帮助WMAP通过*n*个节点（MSF从属）扫描任意数量的Web应用程序。
- en: '![](img/0f0e2571-82d4-43d8-b1ae-f2d64273b510.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f0e2571-82d4-43d8-b1ae-f2d64273b510.png)'
- en: Before going into detail about how to use WMAP, let's understand the process
    first.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在详细了解如何使用WMAP之前，让我们先了解一下流程。
- en: The WMAP scanning process
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WMAP扫描过程
- en: Using WMAP is quite easy. We have defined a process in this section for beginners
    who want to learn how to use this plugin. The scanning process can be categorized
    into four phases – **Data Reconnaissance**, **Loading the scanner**, **WMAP configuration**,
    and **Launch**.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用WMAP非常容易。我们在本节中为想要学习如何使用此插件的初学者定义了一个过程。扫描过程可以分为四个阶段-**数据侦察**、**加载扫描器**、**WMAP配置**和**启动**。
- en: '![](img/c82f7da4-5c77-4725-87c3-41cc241700bc.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c82f7da4-5c77-4725-87c3-41cc241700bc.png)'
- en: Let's look at the first phase – data reconnaissance.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看第一阶段-数据侦察。
- en: Data reconnaissance
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据侦察
- en: In this phase, information related to the target is gathered using a crawler,
    proxies, and any other sources. The data is then saved in the MSF database for
    further use. The data can be fetched using any third-party tool, such as Burp
    Suite or Acunetix. The data can be imported into MSF using the `db_import` command
    as MSF supports many third-party tools. Let's look at an example of how a Burp
    scan can be imported into Metasploit.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，使用爬虫、代理和其他来源收集与目标相关的信息。然后将数据保存在MSF数据库中以供进一步使用。可以使用任何第三方工具获取数据，例如Burp Suite或Acunetix。数据可以使用`db_import`命令导入到MSF中，因为MSF支持许多第三方工具。让我们看一个Burp扫描如何导入到Metasploit的例子。
- en: 'The following screenshot shows the output of the `db_import` command:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了`db_import`命令的输出：
- en: '![](img/08c4d6cc-0cfc-467e-b51d-b43750ead426.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/08c4d6cc-0cfc-467e-b51d-b43750ead426.png)'
- en: 'The following are the steps to export the Burp Suite data and import it into
    Metasploit:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将Burp Suite数据导出并导入到Metasploit的步骤：
- en: 'Open up a previously completed scan of a domain name. It could be either active
    or passive. In our case, we will use an example of a passive scan of [prod.packtpub.com](https://www.packtpub.com/in/).
    The **Issues** tab in the following screenshot shows various issues discovered
    by Burp:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开先前完成的域名扫描。它可以是主动的也可以是被动的。在我们的案例中，我们将使用[prod.packtpub.com](https://www.packtpub.com/in/)的被动扫描示例。以下截图的“问题”选项卡显示了Burp发现的各种问题：
- en: '![](img/37c9bd5a-bb81-40e4-8591-5f5129e8a3c7.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/37c9bd5a-bb81-40e4-8591-5f5129e8a3c7.png)'
- en: 'We will then select the issues we want to transfer to Metasploit and right-click.
    Then, we choose the Report selected issues option, as shown here:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将选择要传输到Metasploit的问题，右键单击。然后，我们选择“报告所选问题”选项，如下所示：
- en: '![](img/ef205eb2-3506-4913-9cf2-df2ada166d01.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ef205eb2-3506-4913-9cf2-df2ada166d01.png)'
- en: 'A new window will open that asks us to choose the format for the report. We
    choose XML and click Next:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将打开一个新窗口，要求我们选择报告的格式。我们选择XML并单击下一步：
- en: '![](img/8d67cba3-7ccf-4a59-8fdc-79c0243c86d0.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d67cba3-7ccf-4a59-8fdc-79c0243c86d0.png)'
- en: 'In the next step, we can specify the details we want in our report and click
    Next:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一步中，我们可以指定报告中要包含的详细信息，然后单击下一步：
- en: '![](img/e0177741-3a97-4c63-be4f-30ca1c932cd2.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e0177741-3a97-4c63-be4f-30ca1c932cd2.png)'
- en: 'Then we choose whether we want to include requests and responses for our selected
    issues from the scanner. We choose both of them and click Next:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们选择是否要包括来自扫描器的所选问题的请求和响应。我们选择两者并单击下一步：
- en: '![](img/6be9aec2-0f03-4679-9498-0df9a9d37019.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6be9aec2-0f03-4679-9498-0df9a9d37019.png)'
- en: 'Next, it will ask us to select all the issues we want to export. We choose
    the ones we need and click Next:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，它将要求我们选择要导出的所有问题。我们选择需要的问题并单击下一步：
- en: '![](img/043ec93e-6fd7-4101-a0ea-b71485a1285b.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/043ec93e-6fd7-4101-a0ea-b71485a1285b.png)'
- en: 'In the final step, we choose the destination path and filename and click Next:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最后一步中，我们可以指定报告的目标路径和文件名，然后单击下一步：
- en: '![](img/df71def4-7c78-40b0-a671-a16ebea1cdf5.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/df71def4-7c78-40b0-a671-a16ebea1cdf5.png)'
- en: 'The report will now be exported and we can close the window once the export
    is complete:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 报告现在将被导出，一旦导出完成，我们可以关闭窗口：
- en: '![](img/e889d21b-1d47-4f8b-b356-dac2ea24903b.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e889d21b-1d47-4f8b-b356-dac2ea24903b.png)'
- en: 'To import the Burp Suite report into Metasploit, we can simply use the following
    command:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将Burp Suite报告导入Metasploit，我们可以简单地使用以下命令：
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前述命令的输出：
- en: '![](img/512555e5-3c08-4fed-8e30-34e458375036.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/512555e5-3c08-4fed-8e30-34e458375036.png)'
- en: 'Once the import is complete, we can view all the hosts in the report by using
    the `hosts` command, as shown here:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入完成后，我们可以使用`hosts`命令查看报告中的所有主机，如下所示：
- en: '![](img/b07927dc-cbd9-476d-a745-31fed3c3b146.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b07927dc-cbd9-476d-a745-31fed3c3b146.png)'
- en: 'To see the vulnerabilities imported from the Burp Suite scanner, we can use
    the `vulns` command, as shown in the following screenshot:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看从Burp Suite扫描器导入的漏洞，我们可以使用`vulns`命令，如下截图所示：
- en: '![](img/ce941dcb-54f9-480c-b236-7ddd7d926ce6.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ce941dcb-54f9-480c-b236-7ddd7d926ce6.png)'
- en: As the information is now imported into Metasploit, WMAP will automatically
    detect and load the same information too, which means the hosts in Metasploit
    will now automatically be added as sites in the WMAP module.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在信息已经导入到Metasploit中，WMAP将自动检测和加载相同的信息，这意味着Metasploit中的主机现在将自动添加为WMAP模块中的站点。
- en: Loading the scanner
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载扫描器
- en: 'As we mentioned earlier, WMAP is actually a plugin that is loaded in the MSF.
    You can view a complete list of the plugins on the MSF by typing the `load` command
    and pressing the *Tab* key, as shown here:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，WMAP实际上是一个加载在MSF中的插件。您可以通过输入`load`命令并按*Tab*键来查看MSF上的所有插件，如下所示：
- en: '![](img/b72d574b-ed9a-4aa7-bdfe-46d72177c230.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b72d574b-ed9a-4aa7-bdfe-46d72177c230.png)'
- en: 'To begin with the loading process, following are the steps that are to be followed:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 开始加载过程，以下是要遵循的步骤：
- en: 'Let''s load the WMAP plugin using the `load wmap` command:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用`load wmap`命令加载WMAP插件：
- en: '![](img/8f638269-1723-4c07-ae13-3ec2e3736b5d.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8f638269-1723-4c07-ae13-3ec2e3736b5d.png)'
- en: 'Once the plugin is loaded, you can view the help section using the `?` or `help` command,
    as shown here:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦插件加载完成，您可以使用`?`或`help`命令查看帮助部分，如下所示：
- en: '![](img/627fdbbf-3eb5-44e7-b039-24033371096c.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/627fdbbf-3eb5-44e7-b039-24033371096c.png)'
- en: Next, we will look at WMAP configuration.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看一下WMAP配置。
- en: WMAP configuration
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WMAP配置
- en: 'You have learned how to automatically add targets into WMAP in the data reconnaissance
    phase. There''s another way to load data into WMAP, and that is by manually defining
    the targets:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经学会了如何在数据侦察阶段自动将目标添加到WMAP中。还有另一种方式可以将数据加载到WMAP中，那就是手动定义目标：
- en: 'Let''s start by creating a new site or a workspace to perform our scan. Let''s
    look at all the options available to us for site creation. Type `wmap_sites -h`:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从创建一个新站点或工作空间开始执行我们的扫描。让我们看看我们用于站点创建的所有选项。键入`wmap_sites -h`：
- en: '![](img/b67d7216-7520-4363-ba22-a6b55ca38446.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b67d7216-7520-4363-ba22-a6b55ca38446.png)'
- en: 'Let''s now add the sites. There are two ways of adding sites – one is by going
    directly through the URL or IP. This can be done using the following command:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们添加站点。有两种添加站点的方式 - 一种是直接通过URL或IP。可以使用以下命令完成：
- en: '[PRE1]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前述命令的输出：
- en: '![](img/a02c7f92-2c8c-4e45-8715-7b3bb68a0e17.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a02c7f92-2c8c-4e45-8715-7b3bb68a0e17.png)'
- en: 'The second way is by using virtual hosts. This is very useful when we have
    to scan multiple virtual hosts. To add virtual hosts, we can use the following
    command:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二种方法是使用虚拟主机。当我们必须扫描多个虚拟主机时，这是非常有用的。要添加虚拟主机，我们可以使用以下命令：
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here''s the output of the preceding command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述命令的输出：
- en: '![](img/773cf787-2e54-4eda-bd85-a35e37c46bd3.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/773cf787-2e54-4eda-bd85-a35e37c46bd3.png)'
- en: 'Once the sites are added, we can add the targets in a similar way, either by
    IP/domain or by virtual host (virtual host/domain). To add a target via IP, we
    can use the following command:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加站点后，我们可以以类似的方式添加目标，可以是IP/域名或虚拟主机（虚拟主机/域）。要通过IP添加目标，我们可以使用以下命令：
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了前面命令的输出：
- en: '![](img/a46ef0c7-a418-4e60-bbb1-e568b6e226dc.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a46ef0c7-a418-4e60-bbb1-e568b6e226dc.png)'
- en: 'To add a target via a virtual host, we use the following command:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要通过虚拟主机添加目标，我们使用以下命令：
- en: '[PRE4]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了前面命令的输出：
- en: '![](img/f62fa43f-8d36-4503-8d5f-577b0c60aef8.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f62fa43f-8d36-4503-8d5f-577b0c60aef8.png)'
- en: 'To view the list of all the modules that will be run by WMAP, we can use the `wmap_modules
    -l` command. The output of the command is shown in the following screenshot:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看将由WMAP运行的所有模块的列表，我们可以使用`wmap_modules -l`命令。命令的输出如下屏幕截图所示：
- en: '![](img/ceb4af93-7df2-4cee-bd1c-84ccbf69cbb1.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ceb4af93-7df2-4cee-bd1c-84ccbf69cbb1.png)'
- en: 'The following screenshot shows the modules for file/directory testing:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了文件/目录测试的模块：
- en: '![](img/372aa366-a906-4d73-ade6-4a4906333fb6.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/372aa366-a906-4d73-ade6-4a4906333fb6.png)'
- en: This phase also includes the WMAP scanning nodes, which can be configured so
    that you can perform distributed WMAP scanning. The nodes can be managed and configured
    using the `wmap_nodes` command. More about this will be discussed in the *Clustered Scanning
    using WMAP *section of this chapter. After the final configuration is done, the
    next phase is to launch WMAP.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此阶段还包括WMAP扫描节点，可以配置这些节点，以便进行分布式WMAP扫描。可以使用`wmap_nodes`命令管理和配置节点。关于这一点将在本章的*使用WMAP进行集群扫描*部分进行讨论。完成最终配置后，下一阶段是启动WMAP。
- en: Launching WMAP
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动WMAP
- en: 'By default, WMAP runs all the modules on the target but you can change the
    order in which the modules are executed (this is covered in the next topic):'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，WMAP在目标上运行所有模块，但您可以更改模块执行的顺序（这将在下一个主题中介绍）：
- en: 'To run WMAP, execute the following command:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行WMAP，请执行以下命令：
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了前面命令的输出：
- en: '![](img/7612dd18-1fe0-4cf7-84d3-abb68db0f4bc.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7612dd18-1fe0-4cf7-84d3-abb68db0f4bc.png)'
- en: Once the preceding command is executed, the execution of the loaded modules
    will begin. There's no pause or resume option in WMAP, so you either have to wait
    for the scan to finish or you can interrupt the scanning process by pressing *Ctrl *+ *C*.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前面的命令后，加载模块的执行将开始。在WMAP中没有暂停或恢复选项，所以你要么等待扫描完成，要么可以通过按*Ctrl*+*C*来中断扫描过程。
- en: 'To learn more about the `wmap_run` command, you can execute the `wmap_run -h` command
    to see the other available options that can be used at the time of launch:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要了解有关`wmap_run`命令的更多信息，可以执行`wmap_run -h`命令，以查看在启动时可以使用的其他可用选项：
- en: '![](img/7288d4c7-fc33-43ab-83fd-1fab75d5b628.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7288d4c7-fc33-43ab-83fd-1fab75d5b628.png)'
- en: 'You can even launch the WMAP scan based on modules using keyword strings or
    regex. In this case, we used a string that will search for any `version `keyword
    in the list of loaded modules:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至可以基于模块使用关键字字符串或正则表达式启动WMAP扫描。在这种情况下，我们使用一个字符串，将在加载的模块列表中搜索任何`version`关键字：
- en: '![](img/4d19d169-16d6-4a59-a8ff-ac114b952897.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4d19d169-16d6-4a59-a8ff-ac114b952897.png)'
- en: We can use a regular expression according to our needs. We have now learned
    about the different phases of the WMAP scanning process. In the next section,
    we will learn about execution order in WMAP.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以根据需要使用正则表达式。现在我们已经了解了WMAP扫描过程的不同阶段。在下一节中，我们将了解WMAP中的执行顺序。
- en: WMAP module execution order
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WMAP模块执行顺序
- en: 'WMAP runs loaded modules in a specific order. The order is defined by a numeric
    value. By default, the first module to run for web scanning is `http_version`,
    which has the `OrderID=0` and `open_proxy` module with `OrderID=1`. This also
    means that the `http_version` module will execute first and `open_proxy` will
    run after that. A tester can change the default behavior of the module execution
    by changing the `OrderID` accordingly:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: WMAP按特定顺序运行加载的模块。顺序由数字值定义。默认情况下，用于Web扫描的第一个模块是`http_version`，其`OrderID=0`，`open_proxy`模块的`OrderID=1`。这也意味着`http_version`模块将首先执行，然后是`open_proxy`。测试人员可以通过相应地更改`OrderID`来改变模块执行的默认行为：
- en: The module execution order can be changed according to our needs. We can obtain
    the `OrderID` by executing the `wmap_modules -l` command.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模块执行顺序可以根据我们的需要进行更改。我们可以通过执行`wmap_modules -l`命令来获取`OrderID`。
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了前面命令的输出：
- en: '![](img/5873a26b-4a50-4a01-94cc-0124ec4b7f64.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5873a26b-4a50-4a01-94cc-0124ec4b7f64.png)'
- en: 'The `OrderID` is set in the Metasploit module code. Let''s see the `OrderID`
    for the `http_version` module:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`OrderID`在Metasploit模块代码中设置。让我们看看`http_version`模块的`OrderID`：'
- en: '![](img/a615294e-6a77-4085-beb7-bf5d987084f2.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a615294e-6a77-4085-beb7-bf5d987084f2.png)'
- en: The execution order for WMAP modules can be adjusted using the `register_wmap_options()`
    method.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`register_wmap_options()`方法调整WMAP模块的执行顺序。
- en: 'Let''s use this method to change the `OrderID` for the `http_version` module:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用这种方法来更改`http_version`模块的`OrderID`：
- en: '![](img/f68ed1e0-0c1e-4b3a-959c-30e883e396c6.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f68ed1e0-0c1e-4b3a-959c-30e883e396c6.png)'
- en: 'Now let''s reload the module:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们重新加载模块：
- en: '![](img/6e7213e5-dbfc-418e-9cf0-0e9cdc28b75a.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e7213e5-dbfc-418e-9cf0-0e9cdc28b75a.png)'
- en: 'Once the reload is done, we list the modules using the `wmap_modules -l` command
    to see the updated module execution order:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新加载后，我们使用`wmap_modules -l`命令列出模块，以查看更新后的模块执行顺序：
- en: '![](img/fb6d6b1d-8ed6-441c-87ab-eee5d3f0b655.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb6d6b1d-8ed6-441c-87ab-eee5d3f0b655.png)'
- en: From the preceding screenshot, we can see that the `OrderID` has now been changed.
    Now that we have gone through the module execution order, let's add a module to
    WMAP in the next section.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的屏幕截图中，我们可以看到`OrderID`现在已经更改。现在我们已经了解了模块执行顺序，让我们在下一节中向WMAP添加一个模块。
- en: Adding a module to WMAP
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向WMAP添加模块
- en: 'WMAP allows us to add our own modules. This could be modules from the MSF or
    we can make our own module entirely from scratch. Let''s use an example of the
    SSL module. The following screenshot shows that we have two modules that are currently
    being used by WMAP:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: WMAP允许我们添加自己的模块。这可以是来自MSF的模块，也可以完全从头开始制作我们自己的模块。让我们以SSL模块为例。以下截图显示了WMAP当前正在使用的两个模块：
- en: '![](img/3048bafb-ed99-49d5-8d73-1aa2f951bf38.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3048bafb-ed99-49d5-8d73-1aa2f951bf38.png)'
- en: 'We can add another SSL-based scanner module as well (apart from the SSL Labs
    modules that are available in the MSF):'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以添加基于SSL的扫描器模块（除了MSF中可用的SSL Labs模块）：
- en: 'We will use the `ssllabs_scan` module, which will perform an SSL scan using
    Qualys SSL Labs'' online SSL scanner via the public API provided by Qualys:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用`ssllabs_scan`模块，它将使用Qualys SSL Labs的在线SSL扫描仪通过Qualys提供的公共API执行SSL扫描：
- en: '![](img/3a58652e-4bbc-4216-9b2c-9a5634eac3f2.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a58652e-4bbc-4216-9b2c-9a5634eac3f2.png)'
- en: 'We now edit the source code of this module so that we can add the necessary
    library and methods that can be used in the scan:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们编辑此模块的源代码，以便我们可以添加可以在扫描中使用的必要库和方法：
- en: '![](img/949c388f-d114-4a8b-95f7-2a8d0d0cbf06.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/949c388f-d114-4a8b-95f7-2a8d0d0cbf06.png)'
- en: 'We add the following line below the `MetasploitModule` class:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在`MetasploitModule`类下面添加以下行：
- en: '[PRE6]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The aforementioned WMAP library provides methods for WMAP SSL scanner modules
    that are included in the scan. This can be seen in the following screenshot:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 上述WMAP库提供了包含在扫描中的WMAP SSL扫描器模块的方法。这可以在以下截图中看到：
- en: '![](img/0bf01544-0647-460d-955d-90cee289b593.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0bf01544-0647-460d-955d-90cee289b593.png)'
- en: 'Just adding the library won''t suffice; running the module with just the library
    added will result in an error:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 仅添加库是不够的；仅添加库运行模块将导致错误：
- en: '![](img/951d7ab6-2094-48a9-af2d-c004db2c5508.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/951d7ab6-2094-48a9-af2d-c004db2c5508.png)'
- en: 'The reason is this is the `HOSTNAME` datastore, which is the `ssllabs_scan`
    module option, and it is not picked up by the WMAP plugin at all. The plugin only
    has the following methods defined (refer to the `metasploit-framework/lib/msf/core/auxiliary/wmapmodule.rb`
    file):'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 原因是这是`HOSTNAME`数据存储，它是`ssllabs_scan`模块选项，并且WMAP插件根本没有捕获它。插件只定义了以下方法（参考`metasploit-framework/lib/msf/core/auxiliary/wmapmodule.rb`文件）：
- en: '![](img/f12637ea-e809-4b66-a1e2-84b8ebeefde8.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f12637ea-e809-4b66-a1e2-84b8ebeefde8.png)'
- en: 'In this case, we need to find a way for WMAP to identify the `HOSTNAME` datastore
    for the `ssllabs_scan` module. There could be many workarounds, but we''ll use
    this one as it''s convenient for us:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们需要找到WMAP识别`ssllabs_scan`模块的`HOSTNAME`数据存储的方法。可能有很多变通方法，但我们将使用这个，因为对我们来说很方便：
- en: '![](img/c7ab1b1c-c6ad-4e7a-8d71-28b2e4b22fa9.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c7ab1b1c-c6ad-4e7a-8d71-28b2e4b22fa9.png)'
- en: 'We change the datastore to be used from `datastore[''HOSTNAME'']` to `datastore[''VHOST'']`:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将数据存储更改为从`datastore['HOSTNAME']`到`datastore['VHOST']`：
- en: '![](img/41cfd927-e255-4abd-88ac-2b67f1090152.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/41cfd927-e255-4abd-88ac-2b67f1090152.png)'
- en: 'The variable that was storing the data from the `HOSTNAME` datastore will save
    the data from the `VHOST` datastore. At the same time, WMAP will recognize the
    `VHOST` datastore through the `wmap_target_vhost()` method:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 存储来自`HOSTNAME`数据存储的数据的变量将保存来自`VHOST`数据存储的数据。同时，WMAP将通过`wmap_target_vhost()`方法识别`VHOST`数据存储：
- en: '![](img/ba6c51a3-0128-449a-9bf7-189146eee632.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba6c51a3-0128-449a-9bf7-189146eee632.png)'
- en: 'Now we save the code and go back to our Metasploit console and reload the module
    by typing `reload`:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们保存代码并返回到我们的Metasploit控制台，并通过输入`reload`重新加载模块：
- en: '![](img/0bbfedbf-cda2-4c90-8b51-0b015c690255.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0bbfedbf-cda2-4c90-8b51-0b015c690255.png)'
- en: 'We also reload the WMAP modules using the following command:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用以下命令重新加载WMAP模块：
- en: '[PRE7]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了上述命令的输出：
- en: '![](img/aa0cf6f4-0ebd-43d3-8dcb-82a4d9e5d881.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aa0cf6f4-0ebd-43d3-8dcb-82a4d9e5d881.png)'
- en: 'Let''s list the modules now:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们列出模块：
- en: '![](img/c16b8210-783e-4272-9143-d0428c3c58f0.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c16b8210-783e-4272-9143-d0428c3c58f0.png)'
- en: The module is loaded!
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 模块已加载！
- en: 'The following are the types of mixins that can be used in any module:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可以在任何模块中使用的混合类型：
- en: '| **Mixins** | **Description** |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| **混合** | **描述** |'
- en: '| **WmapScanSSL** | Runs the scan against the SSL service once |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| **WmapScanSSL** | 对SSL服务运行一次扫描 |'
- en: '| **WmapScanServer** | Runs the scan against a web service once |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| **WmapScanServer** | 对Web服务运行一次扫描 |'
- en: '| **WmapScanDir** | Runs the scan for every directory found in the target |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| **WmapScanDir** | 对目标中找到的每个目录运行扫描 |'
- en: '| **WmapScanFile** | Runs the scan for every file found in the target |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| **WmapScanFile** | 对目标中找到的每个文件运行扫描 |'
- en: '| **WmapScanUniqueQuery** | Runs the scan for every unique query found in each
    request of the target |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| **WmapScanUniqueQuery** | 对目标的每个请求中找到的每个唯一查询运行扫描 |'
- en: '| **WmapScanQuery** | Runs the scan for every query found in each request of
    the target |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| **WmapScanQuery** | 对目标的每个请求中找到的每个查询运行扫描 |'
- en: '| **WmapScanGeneric** | Modules to be run after the completion of the scan
    (passive analysis) |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| **WmapScanGeneric** | 在扫描完成后运行的模块（被动分析） |'
- en: 'Update the WMAP module in action:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新WMAP模块的操作：
- en: '![](img/70b42d1e-692d-4ba0-b9c5-7c74342b5a64.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/70b42d1e-692d-4ba0-b9c5-7c74342b5a64.png)'
- en: 'The vulnerabilities found by the modules are saved in the database, which can
    be viewed by executing the `wmap_vulns -l` command:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 模块发现的漏洞保存在数据库中，可以通过执行`wmap_vulns -l`命令查看：
- en: '![](img/957d009a-359f-4547-a573-3bbb5fd51955.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/957d009a-359f-4547-a573-3bbb5fd51955.png)'
- en: In the next section, we will look at the distributed scanning feature of WMAP.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看一下WMAP的分布式扫描功能。
- en: Clustered scanning using WMAP
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用WMAP进行集群扫描
- en: 'WMAP can also be used to perform a distributed assessment of a target. This
    feature allows multiple instances of WMAP running on different servers to work
    together in a master-slave model, as shown here:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: WMAP还可以用于对目标进行分布式评估。此功能允许在不同服务器上运行的多个WMAP实例以主从模型一起工作，如下所示：
- en: '![](img/ac8c7517-bd02-414e-b365-7a32af79d0fd.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac8c7517-bd02-414e-b365-7a32af79d0fd.png)'
- en: 'The WMAP master takes the target and distributes it across the slaves automatically
    in the form of jobs. The jobs, when completed, report back to the master with
    results that are stored in the master''s database:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: WMAP主服务器会自动将目标分发到从服务器上，形成作业。作业完成后，将结果报告给主服务器，并将结果存储在主服务器的数据库中：
- en: 'Let''s add a site for scanning:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们添加一个站点进行扫描：
- en: '![](img/ab4ab1aa-1782-4c28-bd3a-d18146283184.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab4ab1aa-1782-4c28-bd3a-d18146283184.png)'
- en: 'Use the crawler on the site using the `auxiliary/scanner/http/crawler` module;
    set the options accordingly:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`auxiliary/scanner/http/crawler`模块在站点上使用爬虫；相应地设置选项：
- en: '![](img/3c8c5b0d-d211-4663-824a-9542f360af52.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c8c5b0d-d211-4663-824a-9542f360af52.png)'
- en: 'Run the crawler to gather the forms and pages:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行爬虫以收集表单和页面：
- en: '![](img/20210f40-6890-42a9-b769-5f941603cfe9.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/20210f40-6890-42a9-b769-5f941603cfe9.png)'
- en: 'Confirm the number of pages/forms found from crawling using the `wmap_sites
    -l` command:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`wmap_sites -l`命令确认从爬行中找到的页面/表单的数量：
- en: '![](img/355c8523-4ea1-44bb-a17d-fe8d8d73ecbc.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/355c8523-4ea1-44bb-a17d-fe8d8d73ecbc.png)'
- en: 'Let''s set up the WMAP nodes for distributed scanning. We will run `msfrpcd`
    on the nodes using the `msfrpcd -U <user> -P <password>` command. This command
    will start the RPC server in the background for WMAP to interact with Metasploit:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们为分布式扫描设置WMAP节点。我们将在节点上使用`msfrpcd -U <user> -P <password>`命令运行`msfrpcd`。此命令将在后台启动RPC服务器，以便WMAP与Metasploit进行交互：
- en: '![](img/1dbec482-1a53-4d29-9d71-7a6538ff7575.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1dbec482-1a53-4d29-9d71-7a6538ff7575.png)'
- en: 'Once the nodes are configured, we will use the `wmap_nodes` command to manage
    and utilize these nodes:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦节点配置好，我们将使用`wmap_nodes`命令来管理和利用这些节点：
- en: '![](img/b16830b8-b948-49e6-8d83-02ee119eef68.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b16830b8-b948-49e6-8d83-02ee119eef68.png)'
- en: 'We will use the following command to add the nodes to WMAP:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用以下命令将节点添加到WMAP中：
- en: '[PRE8]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了上述命令的输出：
- en: '![](img/688f0888-7136-4396-aa52-6d8d35b0abcb.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/688f0888-7136-4396-aa52-6d8d35b0abcb.png)'
- en: 'Once the nodes are connected, we can list the nodes using the `wmap_nodes -l`
    command:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦节点连接，我们可以使用`wmap_nodes -l`命令列出节点：
- en: '![](img/51b815d3-b8d9-491d-91f4-8c8aa2ab9655.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/51b815d3-b8d9-491d-91f4-8c8aa2ab9655.png)'
- en: 'Everything is set now. We just need to define the target for the scanner to
    begin scanning. This can be done using the `wmap_targets` command:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在一切都设置好了。我们只需要为扫描程序定义目标。可以使用`wmap_targets`命令完成：
- en: '![](img/905131a1-cec9-494a-93e7-77a1bc6c0f28.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/905131a1-cec9-494a-93e7-77a1bc6c0f28.png)'
- en: In this case, we used the `-d` switch to add the target based on the ID. the
    ID can be retrieved by using the `wmap_sites -l` command. The issue with the current
    setup is that all the modules executed on the nodes will save the data on the
    nodes.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们使用了`-d`开关来根据ID添加目标。可以使用`wmap_sites -l`命令检索ID。当前设置的问题是，所有在节点上执行的模块都将保存数据在节点上。
- en: 'If you want to save the data on the nodes, you need to connect the nodes to
    your local MSF database. This can be done using the following command:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果要将数据保存在节点上，需要将节点连接到本地MSF数据库。可以使用以下命令完成：
- en: '[PRE9]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了上述命令的输出：
- en: '![](img/60acf6d3-8476-44ef-a267-e98b79e71e1c.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/60acf6d3-8476-44ef-a267-e98b79e71e1c.png)'
- en: 'Let''s run WMAP now using the `wmap_run -e` command:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在使用`wmap_run -e`命令运行WMAP：
- en: '![](img/b1d8f76a-87c6-45cd-ba7a-5d3f6a4a0f2e.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b1d8f76a-87c6-45cd-ba7a-5d3f6a4a0f2e.png)'
- en: Every module loaded by the WMAP will be distributed and executed on the nodes
    accordingly.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: WMAP加载的每个模块都将相应地分布和在节点上执行。
- en: WMAP has a limit of **25 jobs per node**. This is done to prevent nodes from
    being over-burdened.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: WMAP每个节点的**作业限制为25个**。这是为了防止节点负担过重。
- en: 'We can see the list of connected nodes by typing `wmap_nodes -l`, as shown
    here:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过输入`wmap_nodes -l`来查看连接的节点列表，如下所示：
- en: '![](img/43943310-effc-4806-a765-3bd2760b9a21.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/43943310-effc-4806-a765-3bd2760b9a21.png)'
- en: 'We can also use WMAP to run only one single module; for example, if we want
    to run the `dir_scanner` module, we can do it by using the following command:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以使用WMAP仅运行单个模块；例如，如果我们想要运行`dir_scanner`模块，可以使用以下命令：
- en: '[PRE10]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output is shown here:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/d4f6ac23-f36e-4b35-962c-92fddf67382c.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d4f6ac23-f36e-4b35-962c-92fddf67382c.png)'
- en: 'The following screenshot shows the output of the discovered directories:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了发现的目录的输出：
- en: '![](img/b4e22c65-1b53-48aa-8357-da525dd9dab8.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b4e22c65-1b53-48aa-8357-da525dd9dab8.png)'
- en: 'As we can see in the preceding screenshot, the module starts listing the directories
    found. To view the output in a tree structure, use this command:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，该模块开始列出找到的目录。要以树形结构查看输出，请使用此命令：
- en: '[PRE11]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了上述命令的输出：
- en: '![](img/a42133a9-5e66-4a55-8a1e-4252229114b4.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a42133a9-5e66-4a55-8a1e-4252229114b4.png)'
- en: 'To view the current jobs assigned to the nodes, we can use the command shown
    here:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看分配给节点的当前作业，可以使用此命令：
- en: '[PRE12]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了上述命令的输出：
- en: '![](img/35fb3358-59be-4936-aa07-021560c45a48.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/35fb3358-59be-4936-aa07-021560c45a48.png)'
- en: 'To remove a node, we can use this command:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要删除节点，我们可以使用此命令：
- en: '[PRE13]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will delete node 1 from the list.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从列表中删除节点1。
- en: Summary
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about WMAP, its architecture, and the scanning process.
    Next, we learned how to import output from different tools such as Burp Suite
    into Metasploit and moved onto loading, configuring, and performing a scan using
    the WMAP module. At the end of the chapter, we looked at how we can use clustered
    scanning in WMAP.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了WMAP及其架构和扫描过程。接下来，我们学习了如何将来自不同工具（如Burp Suite）的输出导入Metasploit，并继续加载、配置和使用WMAP模块进行扫描。在本章末尾，我们看了如何在WMAP中使用集群扫描。
- en: In the next chapter, we will look at pen testing for WordPress.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将研究WordPress的渗透测试。
- en: Questions
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How many instances of WMAP can be used for distributed scanning?
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分布式扫描可以使用多少个WMAP实例？
- en: Does the WMAP plugin support reporting?
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WMAP插件支持报告吗？
- en: Can I import other server logs and reports in Metasploit that I want to use
    in WMAP?
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我可以导入其他服务器日志和报告到Metasploit中，然后在WMAP中使用吗？
- en: I want to customize WMAP further for my organization's environment. How can
    I do that?
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我想进一步定制WMAP以适应我们组织的环境。我该怎么做？
- en: How many jobs per node does WMAP support?
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WMAP支持每个节点多少个作业？
- en: Further reading
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more information on the WMAP web scanner, visit the following link:'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关WMAP网络扫描程序的更多信息，请访问以下链接：
- en: '[https://www.offensive-security.com/metasploit-unleashed/wmap-web-scanner/](https://www.offensive-security.com/metasploit-unleashed/wmap-web-scanner/)'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.offensive-security.com/metasploit-unleashed/wmap-web-scanner/](https://www.offensive-security.com/metasploit-unleashed/wmap-web-scanner/)'
