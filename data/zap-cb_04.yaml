- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Authentication and Authorization Testing
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 身份验证和授权测试
- en: Welcome to [*Chapter 4*](B18829_04.xhtml#_idTextAnchor142)! We are as excited
    as you that you have gotten to this chapter. In this chapter, we will cover numerous
    topics surrounding authentication and authorization testing to learn more about
    the varying ways to attack these mechanisms. Authentication is the process of
    verifying the validity of the identity of who’s attempting to access a system
    or application. Authorization also helps us verify that a requested action or
    service is approved for a specific entity.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到 [*第 4 章*](B18829_04.xhtml#_idTextAnchor142)！我们和你一样激动，能够进入本章。在本章中，我们将涵盖许多关于身份验证和授权测试的主题，以了解攻击这些机制的不同方式。身份验证是验证试图访问系统或应用程序的人的身份有效性的过程。授权也帮助我们验证请求的操作或服务是否已批准特定实体。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Testing for Bypassing Authentication
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绕过身份验证的测试
- en: Testing for Credentials Transported over an Encrypted Channel
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试通过加密通道传输的凭证
- en: Testing for Default Credentials
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试默认凭证
- en: Testing Directory Traversal File Include
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试目录遍历文件包含
- en: Testing for Privilege Escalation and Bypassing Authorization Schema
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试权限提升和绕过授权架构
- en: Testing for Insecure Direct Object References
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试不安全的直接对象引用
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, it is required that you install the OWASP ZAP and OWASP Juice
    Shop on your machine, as you want to be able to intercept the traffic between
    your browser and OWASP Juice Shop using ZAP.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，你需要在你的机器上安装 OWASP ZAP 和 OWASP Juice Shop，因为你需要能够使用 ZAP 拦截浏览器与 OWASP Juice
    Shop 之间的流量。
- en: Testing for Bypassing Authentication
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绕过身份验证的测试
- en: The goal of an authentication schema is to validate the identity of the user
    being authenticated. Examining the authentication function starts with understanding
    how the authentication process validates the user account. When an authentication
    schema is vulnerable, attackers are able to bypass the authentication process.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证架构的目标是验证被验证用户的身份。检查身份验证功能首先要了解身份验证过程是如何验证用户账户的。当身份验证架构存在漏洞时，攻击者能够绕过身份验证过程。
- en: There are multiple methods that can be used to bypass the authentication schema.
    Some of the methods to bypass include (but are not limited to) intercepting authentication
    requests if the application utilizes weak encryption, not correctly implementing
    input validation (which makes injection attacks possible), predicting session
    IDs if they follow a certain pattern, and misconfigurations.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方法可以绕过身份验证架构。一些绕过方法包括（但不限于）拦截身份验证请求（如果应用程序使用了弱加密）、未正确实现输入验证（这使得注入攻击成为可能）、预测会话
    ID（如果它们遵循某种模式），以及配置错误。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To prepare for this recipe, Juice Shop must be running, and ZAP should be intercepting
    the traffic between the browser and Juice Shop.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备这个实验，Juice Shop 必须运行，并且 ZAP 应该拦截浏览器和 Juice Shop 之间的流量。
- en: How to do it…
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进行…
- en: In this recipe, we will bypass the authentication schema by performing a basic
    SQL injection attack to log in to the administrator account.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实验中，我们将通过执行基本的 SQL 注入攻击来绕过身份验证架构并登录管理员账户。
- en: 'To start the lab, please follow these steps:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始实验室，请按照以下步骤操作：
- en: Navigate to the login page of Juice Shop.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 Juice Shop 的登录页面。
- en: 'Open ZAP and *set break on all requests and responses* by clicking on the green
    circle on the top menu, which will make it change color to red, as seen in *Figure
    4**.1*:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 ZAP 并通过点击顶部菜单上的绿色圆圈来 *设置对所有请求和响应的断点*，这将使它变为红色，如 *图 4.1* 中所示：
- en: '![Figure 4.1 – Set breakpoint button](image/Figure_04.01_B18829.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.1 – 设置断点按钮](image/Figure_04.01_B18829.jpg)'
- en: Figure 4.1 – Set breakpoint button
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1 – 设置断点按钮
- en: Open the Juice Shop application again, enter an apostrophe (**'**) in the username
    and password section, and press *Enter* (*return* in macOS). You will see the
    request is stopped.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次打开 Juice Shop 应用程序，在用户名和密码框中输入一个撇号（**'**），然后按 *Enter*（在 macOS 中是 *return*）。你将看到请求被停止。
- en: Click on **Step** four or five times.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Step** 四到五次。
- en: 'The goal is to see the response of the request that contains the apostrophe
    username and password. In *Figure 4**.2*, we can see the request:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是查看包含撇号用户名和密码的请求响应。在 *图 4.2* 中，我们可以看到该请求：
- en: '![Figure 4.2 – Request with username and password fields](image/Figure_04.02_B18829.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.2 – 包含用户名和密码字段的请求](image/Figure_04.02_B18829.jpg)'
- en: Figure 4.2 – Request with username and password fields
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.2 – 包含用户名和密码字段的请求
- en: 'In *Figure 4**.3*, we can see the response:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图4.3*中，我们可以看到响应：
- en: '![Figure 4.3 – Response showcasing an error](image/Figure_04.03_B18829.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图4.3 – 展示错误的响应](image/Figure_04.03_B18829.jpg)'
- en: Figure 4.3 – Response showcasing an error
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.3 – 展示错误的响应
- en: You can see that the response contains the type of database that is being used
    and the SQL query submitted.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到响应中包含了正在使用的数据库类型以及提交的SQL查询。
- en: This information should not be shown to a user. Click on **Continue**, and you
    will see the **"[object Object]"** error under **Login**.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些信息不应显示给用户。点击**继续**，你会在**登录**下看到**"[object Object]"**错误。
- en: By seeing all of this, we can tell that the website is vulnerable to SQL injections.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看这些信息，我们可以判断网站是否存在SQL注入漏洞。
- en: Now, enter **' or 1=1 --+** in the username field and any character in the password
    field.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在用户名字段中输入**' or 1=1 --+**，并在密码字段中输入任意字符。
- en: Because the **1=1** statement is true, the SQL injection works. The **--** symbols
    (dashes) comment everything after the query statement from the backend. In this
    case, the password will be commented out.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 因为**1=1**语句为真，SQL注入成功。**--**符号（短横线）将查询语句之后的部分注释掉。在这种情况下，密码将被注释掉。
- en: Click on **Login** to see that the SQL injection worked by showing whether the
    login was successful.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**登录**，以查看SQL注入是否成功，通过显示登录是否成功来验证。
- en: 'If you click on **Account** in the top-right menu, you can see that we are
    logged in as **admin@juice-sh.op**, as seen in *Figure 4**.4*:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击右上角的**账户**菜单，你会看到我们已登录为**admin@juice-sh.op**，如*图4.4*所示：
- en: '![Figure 4.4 – Account login](image/Figure_04.04_B18829.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图4.4 – 账户登录](image/Figure_04.04_B18829.jpg)'
- en: Figure 4.4 – Account login
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.4 – 账户登录
- en: How it works…
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何运作…
- en: In this recipe, we performed a SQL injection to bypass the authentication schema.
    SQL injection is one of the methods used to bypass the authentication process.
    It is possible to perform SQL injection to bypass the authentication if the application
    does not validate the user’s input.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个案例中，我们进行了SQL注入，以绕过身份验证方案。SQL注入是绕过身份验证过程的方法之一。如果应用程序没有验证用户输入，可能会执行SQL注入从而绕过身份验证。
- en: Testing for Credentials Transported over an Encrypted Channel
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试通过加密通道传输的凭据
- en: In this recipe, we will walk through how to verify that the user’s login username
    and password are transmitted to the web server from the browser over an encrypted
    channel. It is crucial for an application to send login information or any sensitive
    data such as session IDs over an encrypted channel. The data transmitted between
    the application server and the user’s browser can be intercepted by an attacker,
    and if the traffic is encrypted, the attacker will not be able to read the data
    being transmitted.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在本案例中，我们将演示如何验证用户的登录用户名和密码是否通过加密通道从浏览器传输到Web服务器。对于应用程序而言，通过加密通道传输登录信息或任何敏感数据（如会话ID）至关重要。应用服务器和用户浏览器之间传输的数据可能会被攻击者截获，如果流量是加密的，攻击者将无法读取正在传输的数据。
- en: Getting ready
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To prepare for this recipe, please start ZAP and OWASP Juice Shop. Make sure
    that ZAP intercepts traffic at the OWASP Juice Shop application home page.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备这个案例，请启动ZAP和OWASP Juice Shop。确保ZAP拦截OWASP Juice Shop应用首页的流量。
- en: How to do it…
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To know whether a website is accessible and transmits data over **Hypertext
    Transfer Protocol** (**HTTP**) or **Hypertext Transfer Protocol Secure** (**HTTPS**),
    we have to intercept the login HTTP request. Let’s look at the steps:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解一个网站是否可访问并通过**超文本传输协议**（**HTTP**）或**超文本传输协议安全**（**HTTPS**）传输数据，我们需要拦截登录的HTTP请求。让我们看一下步骤：
- en: Configure ZAP to intercept traffic, and then log in to the website.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置ZAP拦截流量，然后登录到网站。
- en: 'After intercepting the **login** request, search for and open it in ZAP. It
    will be in the **History** tab of the Information window. *Figure 4**.5* shows
    the **login** request’s header, which contains the fields you want to examine
    for this test:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在拦截**登录**请求后，搜索并在ZAP中打开它。它会出现在信息窗口的**历史记录**标签中。*图4.5*显示了**登录**请求的头部，其中包含你要在此测试中检查的字段：
- en: '![ Figure 4.5 – Login request header](image/Figure_04.05_B18829.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图4.5 – 登录请求头部](image/Figure_04.05_B18829.jpg)'
- en: Figure 4.5 – Login request header
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.5 – 登录请求头部
- en: Examine the HTTP method and the **Referer** field.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查HTTP方法和**Referer**字段。
- en: The HTTP method field is the first line, which is used to transmit the data.
    The start of the address will determine whether HTTPS is used versus HTTP. *Figure
    4**.5* shows **http**.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 方法字段是第一行，用于传输数据。地址的开始部分将决定是否使用 HTTPS 或 HTTP。*图 4.5* 显示的是**http**。
- en: Next, examine the **Referer** field.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，检查**Referer**字段。
- en: This field shows the address of the page the request started from. Just like
    in the HTTP method field, the start of the address in the **Referer** field determines
    whether the originating web page is accessible through HTTP or HTTPS.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 该字段显示请求来源页面的地址。与 HTTP 方法字段一样，**Referer** 字段中的地址开始部分决定了源网页是否可以通过 HTTP 或 HTTPS
    访问。
- en: How it works…
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: There are two main internet protocols that are used to transmit web application
    data. The first protocol is HTTP, which transmits data unencrypted. The second
    protocol is an extension of HTTP – HTTPS, which is used to encrypt web traffic.
    HTTPS uses **Transport Layer Security** (**TLS**), which superseded **Secure Sockets
    Layer** (**SSL**), to encrypt web communications. Using HTTP will unintentionally
    expose the end user’s data by sending requests in plaintext that can easily be
    read and manipulated by the attacker.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个主要的互联网协议用于传输 web 应用程序数据。第一个协议是 HTTP，它传输未加密的数据。第二个协议是 HTTP 的扩展——HTTPS，它用于加密
    web 流量。HTTPS 使用**传输层安全性**（**TLS**），取代了**安全套接字层**（**SSL**），来加密 web 通信。使用 HTTP 会无意中暴露最终用户的数据，因为它以明文形式发送请求，攻击者可以轻松读取和篡改这些请求。
- en: Testing for Default Credentials
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试默认凭证
- en: In this recipe, we will go over how to test an application for default credentials.
    Often, newly provisioned applications, servers, routers, hosts, and so on come
    with default passwords for system administrators to log in and configure. If these
    are left as defaults, when attackers run brute-force attacks, the likelihood of
    a successful login is higher. We will go through how to conduct a simple brute-force
    attack using a wordlist.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将讲解如何测试应用程序的默认凭证。通常，新配置的应用程序、服务器、路由器、主机等都附带有默认密码，供系统管理员登录并进行配置。如果这些默认密码未被更改，当攻击者进行暴力破解攻击时，成功登录的可能性较高。我们将演示如何使用字典文件进行简单的暴力破解攻击。
- en: Getting ready
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备开始
- en: To prepare for this recipe, please start ZAP and OWASP Juice Shop. Make sure
    that ZAP intercepts traffic at the OWASP Juice Shop application home page. In
    addition, you will need to create an account in OWASP Juice Shop using any dummy
    email, but ensure that the password is **password** for this section. In addition,
    obtain the password-cracking wordlist (**'top-passwords-shortlist'**) from GitHub
    or a Google search.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备本教程，请启动 ZAP 和 OWASP Juice Shop。确保 ZAP 在 OWASP Juice Shop 应用程序的主页上拦截流量。此外，您需要使用任何虚拟电子邮件在
    OWASP Juice Shop 中创建一个帐户，但请确保在此部分的密码为**password**。另外，从 GitHub 或 Google 搜索获取密码破解字典文件（**'top-passwords-shortlist'**）。
- en: How to do it…
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Intercept the traffic, then log in to the application.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拦截流量，然后登录应用程序。
- en: 'By logging in to the application, you will see the **POST** request, as shown
    in *Figure 4**.6*:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 登录应用程序后，您将看到**POST**请求，如*图 4.6*所示：
- en: '![Figure 4.6 – Site''s tree window POST request location](image/Figure_04.06_B18829.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.6 – 站点树窗口 POST 请求位置](image/Figure_04.06_B18829.jpg)'
- en: Figure 4.6 – Site's tree window POST request location
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6 – 站点树窗口 POST 请求位置
- en: From here, we’ll begin our brute force of the **login** request credentials.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，我们将对**登录**请求凭证进行暴力破解。
- en: 'Right-click on the **POST:login()** request, select **Attack**, and then select
    **Fuzz…**:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击**POST:login()**请求，选择**攻击**，然后选择**模糊...**：
- en: '![Figure 4.7 – Site''s tree window](image/Figure_04.07_B18829.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.7 – 站点树窗口](image/Figure_04.07_B18829.jpg)'
- en: Figure 4.7 – Site's tree window
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.7 – 站点树窗口
- en: 'Highlight the field to brute-force and click **Add…**, as shown in *Figure
    4**.8*:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 高亮显示要进行暴力破解的字段，并点击**添加...**，如*图 4.8*所示：
- en: '![Figure 4.8 – Fuzzer dialog and locations](image/Figure_04.08_B18829.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.8 – 模糊器对话框和位置](image/Figure_04.08_B18829.jpg)'
- en: Figure 4.8 – Fuzzer dialog and locations
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.8 – 模糊器对话框和位置
- en: 'Then, click on the **Add…** button, as shown in *Figure 4**.9*:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击**添加...**按钮，如*图 4.9*所示：
- en: '![Figure 4.9 – Payloads dialog list](image/Figure_04.09_B18829.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.9 – 有效载荷对话框列表](image/Figure_04.09_B18829.jpg)'
- en: Figure 4.9 – Payloads dialog list
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.9 – 有效载荷对话框列表
- en: This opens the window to allow you to select your payloads.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个窗口，允许您选择有效载荷。
- en: 'Click on the **Type** dropdown and select **File**, as shown in *Figure 4**.10*:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**类型**下拉框，选择**文件**，如*图 4.10*所示：
- en: '![Figure 4.10 – Add Payload dialog file drop-down menu](image/Figure_04.10_B18829.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.10 – 添加有效载荷对话框文件下拉菜单](image/Figure_04.10_B18829.jpg)'
- en: Figure 4.10 – Add Payload dialog file drop-down menu
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.10 – 添加有效载荷对话框文件下拉菜单
- en: Once you have the window open, select the wordlist we downloaded earlier in
    this section.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦打开窗口，选择我们在本节中之前下载的词典。
- en: Select **worldlist**, as shown in *Figure 4**.11*, and click **Open**, **Add**,
    and **OK**. After that, your **Fuzzer** window will look like *Figure 4**.8*.
    Now, you are ready to launch your fuzzer.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**worldlist**，如*图 4.11*所示，然后点击**打开**、**添加**和**确定**。之后，你的**Fuzzer**窗口将如下*图
    4.8*所示。现在，你准备好启动 Fuzzer 了。
- en: '![Figure 4.11 – Add Payload dialog file directory view](image/Figure_04.11_B18829.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.11 – 添加有效载荷对话框文件目录视图](image/Figure_04.11_B18829.jpg)'
- en: Figure 4.11 – Add Payload dialog file directory view
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.11 – 添加有效载荷对话框文件目录视图
- en: Click **Start Fuzzer**. A new tab opens, and ZAP starts testing the field you
    highlighted, containing the payloads that were added.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**启动 Fuzzer**。一个新标签页打开，ZAP 开始测试你所高亮显示的字段，包含已添加的有效载荷。
- en: "![Figure 4.12 – Fuzzer information\uFEFF window](image/Figure_04.12_B18829.jpg)"
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.12 – Fuzzer 信息窗口](image/Figure_04.12_B18829.jpg)'
- en: Figure 4.12 – Fuzzer information window
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.12 – Fuzzer 信息窗口
- en: How it works…
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: As you notice, the payload “password” works. This is because the application
    returns a **200** code, as shown in *Figure 4**.12*, which lets you know that
    the password the fuzzer used to test the password field works. This example can
    be applied to any other login screen and any application that uses a password.
    When using it with an application that has default credentials, you can test multiple
    credentials at a time to try to brute-force the login page.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所注意到的，"password" 有效载荷起作用了。这是因为应用程序返回了**200**代码，如*图 4.12*所示，表明 Fuzzer 测试的密码字段使用的密码是有效的。这个例子适用于任何其他登录界面以及任何使用密码的应用程序。当与有默认凭据的应用一起使用时，你可以同时测试多个凭据，尝试暴力破解登录页面。
- en: There’s more…
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容…
- en: When choosing the wordlist to include for attacks such as brute-force, understand
    who and what your target is to craft specific lists (i.e., Apache Tomcat having
    the username and password of **tomcat** and **tomcat**).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择用于暴力破解等攻击的词典时，要了解你的目标是谁以及目标是什么，以便创建特定的列表（例如，Apache Tomcat 使用的用户名和密码是**tomcat**和**tomcat**）。
- en: See also
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '[https://github.com/danielmiessler/SecLists](https://github.com/danielmiessler/SecLists)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/danielmiessler/SecLists](https://github.com/danielmiessler/SecLists)'
- en: Testing Directory Traversal File Include
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试目录遍历文件包含
- en: Directory traversal, also known as path traversal, file include is where an
    attacker looks to exploit a lack of input validation or weakly deployed methods
    to read or write files that are not authorized or warranted to be accessible.
    In this recipe, we will discover the method of how attackers conduct such an attack,
    which is known as the “dot dot slash” (**../**) attack.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 目录遍历，也称为路径遍历、文件包含，是指攻击者试图利用输入验证的缺失或方法部署不当，读取或写入未经授权或不应访问的文件。在本指南中，我们将探索攻击者如何执行这种攻击，称为“点点斜杠”（**../**）攻击。
- en: Getting ready
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To start, ensure that ZAP is started and use the PortSwigger Academy lab, **File
    path traversal,** **simple case**.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，确保 ZAP 已启动，并使用 PortSwigger Academy 实验室中的**文件路径遍历**，**简单案例**。
- en: How to do it…
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进行操作…
- en: 'To determine which part of the application is vulnerable to input validation
    bypassing, you need to enumerate all parts of the application that accept content
    from the user’s perspective. This includes HTTP **GET** and **POST** queries and
    common options such as file uploads and HTML forms. Let’s look at the steps:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定应用程序的哪部分易受输入验证绕过攻击的影响，你需要列举应用程序中所有接受用户内容的部分。这包括 HTTP **GET** 和 **POST** 请求以及文件上传和
    HTML 表单等常见选项。让我们看看这些步骤：
- en: Capture the web application in ZAP.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 ZAP 中捕获网络应用。
- en: 'Spider the web application and look for any areas where there’s an image file
    or other input parameter:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扫描网络应用并查找任何包含图片文件或其他输入参数的区域：
- en: '![Figure 4.13 – Get:image(filename)](image/Figure_04.13_B18829.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.13 – 获取：image(filename)](image/Figure_04.13_B18829.jpg)'
- en: Figure 4.13 – Get:image(filename)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.13 – 获取：image(filename)
- en: In the case of the PortSwigger Academy lab, view any image on the web page or
    open the **GET** request for **image(filename)** in the Request editor to see
    the request of the filename.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PortSwigger Academy 实验室中，查看网页上的任何图片，或者在请求编辑器中打开**GET**请求以查看**image(filename)**
    请求，查看文件名的请求。
- en: 'Open the **Request editor** on the **GET** request for **image(filename)**
    and modify the filename to inject the file traversal attack, as shown in *Figure
    4**.14*:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**请求编辑器**，选择**GET** 请求中的**image(filename)**，并修改文件名以注入文件遍历攻击，如*图 4.14*所示：
- en: '![Figure 4.14 – Request Editor for file path traversal](image/Figure_04.14_B18829.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.14 – 文件路径遍历的请求编辑器](image/Figure_04.14_B18829.jpg)'
- en: Figure 4.14 – Request Editor for file path traversal
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.14 – 文件路径遍历的请求编辑器
- en: 'When a file path is vulnerable, the response will reflect the newly requested
    file; in our example, the attack called for the **/etc/passwd** file, as shown
    in *Figure 4**.15*:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当文件路径存在漏洞时，响应将反映出新请求的文件；在我们的例子中，攻击请求的是**/etc/passwd**文件，如*图 4.15*所示：
- en: "![Figure 4.15 – Response reflected /et\uFEFFc/passwd](image/Figure_04.15_B18829.jpg)"
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: "![图 4.15 – 响应反射 /et\uFEFFc/passwd](image/Figure_04.15_B18829.jpg)"
- en: Figure 4.15 – Response reflected /etc/passwd
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.15 – 响应反射 /etc/passwd
- en: How it works…
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Directory traversal attacks aim to access files or other directories that sit
    outside of the web root directory. Web servers and web applications usually employ
    authentication controls for accessing files and resources. Administrators attempt
    to identify the users and groups allowed to access, modify, or execute specific
    files on the server. To protect against malicious intent, an **Access Control
    List** (**ACL**) is used to prevent access to sensitive files (i.e., **/etc/passwd**)
    or avoid the execution of system commands.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 目录遍历攻击旨在访问位于 Web 根目录之外的文件或其他目录。Web 服务器和 Web 应用程序通常会采用身份验证控制来访问文件和资源。管理员试图识别哪些用户和用户组被允许访问、修改或执行服务器上的特定文件。为了防止恶意行为，**访问控制列表**
    (**ACL**) 被用来防止访问敏感文件（如 **/etc/passwd**）或避免执行系统命令。
- en: ACLs are a common method to manage images and templates, load static texts,
    and so on, and unfortunately, improper validation of the input parameters (i.e.,
    forms and cookie values) will expose the applications to security vulnerabilities.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: ACL 是管理图像、模板、加载静态文本等的常用方法，不幸的是，输入参数（如表单和 Cookie 值）的验证不当将使应用程序暴露于安全漏洞之下。
- en: See also
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: At times, some parameters are blocked and the attacker needs to use other methods
    in their input, such as HTML encoding or double encoding. For these other strings,
    refer to GitHub and look for cheat sheets or other payloads to help build your
    word list. Then, use the fuzzer to quickly load and attack the parameter of choice.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，某些参数被屏蔽，攻击者需要在输入中使用其他方法，比如 HTML 编码或双重编码。对于这些其他字符串，请参考 GitHub，寻找备忘单或其他有效载荷，以帮助构建你的词汇表。然后，使用模糊测试工具快速加载并攻击所选参数。
- en: See also the *Fuzzing with Fuzzer* section in [*Chapter 2*](B18829_02.xhtml#_idTextAnchor062),
    *Navigating* *the UI*.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 另见 [*第 2 章*](B18829_02.xhtml#_idTextAnchor062)中的 *使用 Fuzzer 进行模糊测试* 部分，*导航 UI*。
- en: Testing for Privilege Escalation and Bypassing Authorization Schema
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试权限提升和绕过授权方案
- en: 'In this recipe, we are going to talk about two vulnerability types: the first
    is privilege escalation and the second is bypassing authorization schema. The
    lab will be for both vulnerabilities because once we escalate privilege, we will
    perform unauthorized actions.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论两种漏洞类型：第一种是权限提升，第二种是绕过授权方案。实验室内容涵盖这两种漏洞，因为一旦我们提升了权限，就可以执行未经授权的操作。
- en: 'In a privilege escalation attack, an attacker gains elevated permissions or
    performs actions intended for different users. Typically, this attack is possible
    due to a misconfiguration, software bug, or a vulnerability that allows the attacker
    to escalate their permissions. There are two types of privilege escalation: the
    first is vertical privilege escalation. In this attack, the attacker successfully
    gains more permissions (such as user-to-administrator permissions) than their
    account is supposed to have. The second type is horizontal privilege escalation.
    In this attack, the attacker performs an action that is not intended for their
    user account but for an account with a similar level of permissions.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在权限提升攻击中，攻击者获得了更高的权限或执行了本应由其他用户执行的操作。通常，这种攻击之所以可能发生，是由于配置错误、软件漏洞或允许攻击者提升权限的漏洞。权限提升攻击有两种类型：第一种是纵向权限提升。在这种攻击中，攻击者成功获得了比其账户应有的更多权限（例如，从用户权限提升到管理员权限）。第二种是横向权限提升。在这种攻击中，攻击者执行了一个并非为其账户设计的操作，而是为一个具有相似权限级别的账户设计的操作。
- en: Bypassing authorization comes into play when an attacker obtains the ability
    to access the resources of a user when they are not authenticated, hence bypassing
    them. This vulnerability presents itself when access to resources is achievable,
    either after logging out of an application or accessing functions and resources
    that are only accessible and intended for a user with the proper role or privileges.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 绕过授权是在攻击者获得访问用户资源的能力时发挥作用的，即使用户没有经过身份验证，从而绕过身份验证。此漏洞会在以下情况下出现：无论是退出应用程序后，还是访问仅对具有适当角色或权限的用户可访问和设计的功能与资源时，都能实现对资源的访问。
- en: Getting ready
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To follow along in this lab, you should have OWASP Juice Shop running and ZAP
    intercepting the traffic.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要在此实验中跟随步骤，你应该运行 OWASP Juice Shop，并让 ZAP 拦截流量。
- en: How to do it…
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'In this lab, we will perform a horizontal privilege escalation by viewing the
    items in another user’s cart. The following steps will guide you in performing
    privilege escalation in Juice Shop:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本实验中，我们将通过查看另一个用户购物车中的物品来执行横向权限提升。以下步骤将指导你在 Juice Shop 中执行权限提升：
- en: Log in as the administrator.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以管理员身份登录。
- en: The admin email (in this case, used as a username) is [admin@juice-sh.op](mailto:admin@juice-sh.op)
    and the password is **admin123**. The username is obtained from the **Reviews**
    section when **Apple Juice** is selected. We obtained the password by brute-forcing
    the password using a common password list.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 管理员邮箱（在本例中作为用户名使用）是[admin@juice-sh.op](mailto:admin@juice-sh.op)，密码是**admin123**。用户名来自**评论**部分，当选择**苹果汁**时获得。我们通过使用常见密码列表暴力破解密码获得了密码。
- en: Navigate to the admin page at **https://[Your IP address** **or localhost]:3000/#/administration**.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问管理员页面，网址为**https://[你的 IP 地址或本地主机]:3000/#/administration**。
- en: The path to the administrator page was obtained by using the developer tools
    of the browser and reading the **main.js** file.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用浏览器的开发者工具并阅读**main.js**文件，获得了管理员页面的路径。
- en: Obtain the user ID by clicking on the *eye* symbol next to the user.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击用户旁边的*眼睛*符号来获取用户 ID。
- en: 'The user ID is needed in order to view the shopping cart of the **bender@juice-sh.op**
    user. Once the eye is clicked, you can see the user ID after the **#** sign, which
    is **3** in this case, as seen in *Figure 4**.16*:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 需要用户 ID 才能查看**bender@juice-sh.op**用户的购物车。点击眼睛后，你可以看到在**#**符号后的用户 ID，本例中为**3**，如*图
    4**.16*所示：
- en: '![Figure 4.16 – User ID](image/Figure_04.16_B18829.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.16 – 用户 ID](image/Figure_04.16_B18829.jpg)'
- en: Figure 4.16 – User ID
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.16 – 用户 ID
- en: Now that we have obtained the user ID, we have to create a new user account
    to get an account with normal user permissions.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经获得了用户 ID，我们需要创建一个新用户账户，以便获取一个正常用户权限的账户。
- en: Log out of the admin account, click on **Account** | **Login**, click on **Not
    yet a customer?**, and fill out the information required for the user account.
    Once you have created the user account, log in to it.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 退出管理员账户，点击**账户** | **登录**，点击**还不是客户？**，填写所需的用户账户信息。创建用户账户后，登录该账户。
- en: 'Open ZAP, add **Juice Shop** to the scope, and *set break on all requests and
    responses* by clicking the green circle on the top menu bar, which will make it
    turn red, as seen in *Figure 4**.17*:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 ZAP，添加**Juice Shop**到作用范围，并通过点击顶部菜单栏的绿色圆圈来*设置拦截所有请求和响应*，这样它会变成红色，如*图 4**.17*所示：
- en: '![Figure 4.17 – Setting break](image/Figure_04.17_B18829.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.17 – 设置拦截点](image/Figure_04.17_B18829.jpg)'
- en: Figure 4.17 – Setting break
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.17 – 设置拦截点
- en: 'Click on **Your Basket** on the top menu. When you click on it, you will see
    the request stopped by ZAP and available for you to edit. The first line starts
    with **GET** (the HTTP method used); immediately after that, you can see the path
    followed by the protocol version. Notice that the end of the path contains the
    number, which refers to the user ID. See *Figure 4**.18*:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击顶部菜单中的**您的购物车**。点击后，你会看到被 ZAP 阻止的请求，并可以编辑它。第一行以**GET**（所使用的 HTTP 方法）开头；紧接着，你可以看到由协议版本跟随的路径。请注意，路径的结尾包含数字，表示用户
    ID。参见*图 4**.18*：
- en: '![Figure 4.18 – Request header of userID](image/Figure_04.18_B18829.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.18 – 用户 ID 请求头](image/Figure_04.18_B18829.jpg)'
- en: Figure 4.18 – Request header of userID
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.18 – 用户 ID 请求头
- en: 'Replace 6 with the user ID 3, as seen in Figure 4.19\. Click on **Continue**:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 6 替换为用户 ID 3，如图 4.19 所示。点击**继续**：
- en: '![Figure 4.19 – Replace request header](image/Figure_04.19_B18829.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.19 – 替换请求头](image/Figure_04.19_B18829.jpg)'
- en: Figure 4.19 – Replace request header
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.19 – 替换请求头
- en: 'Now, you can see the **bender@juice-sh.op** basket, as seen in *Figure 4**.20*:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以看到**bender@juice-sh.op**的购物篮，如*图 4.20*所示：
- en: '![Figure 4.20 – OWASP Juice Shop basket](image/Figure_04.20_B18829.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.20 – OWASP Juice Shop 购物篮](image/Figure_04.20_B18829.jpg)'
- en: Figure 4.20 – OWASP Juice Shop basket
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.20 – OWASP Juice Shop 购物篮
- en: 'To further perform unauthorized actions, let’s delete **Raspberry Juice** from
    mailto:[bender@juice-sh.op](mailto:bender@juice-sh.op) basket. Refresh and repeat
    *steps 5* to *7* to check that the basket is empty now, as seen in *Figure 4**.21*:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了进一步执行未经授权的操作，让我们从 mailto:[bender@juice-sh.op](mailto:bender@juice-sh.op) 购物篮中删除**树莓汁**。刷新并重复*步骤
    5*至*7*，检查购物篮是否为空，如*图 4.21*所示：
- en: "![Figure 4.21 – \uFEFFEmpty basket](image/Figure_04.21_B18829.jpg)"
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.21 – 空购物篮](image/Figure_04.21_B18829.jpg)'
- en: Figure 4.21 – Empty basket
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.21 – 空购物篮
- en: How it works…
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: This lab showed you how privilege escalation works. In this specific lab, we
    viewed another user’s basket by changing the ID in the **GET** request. These
    types of attacks are dangerous because an attacker could perform an action on
    behalf of others, and if the escalation is vertical, the attacker will have permission
    that could allow them to compromise an entire system or an application.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 本实验向你展示了权限提升的工作原理。在这个特定的实验中，我们通过更改**GET**请求中的 ID 来查看另一个用户的购物篮。这类攻击非常危险，因为攻击者可以代表他人执行某些操作，如果提升是垂直的，攻击者将拥有可以危及整个系统或应用程序的权限。
- en: Testing for Insecure Direct Object References
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试不安全的直接对象引用
- en: '**Insecure Direct Object References** (**IDOR**) occur when an application
    references objects in an insecure way that allows user-supplied input to manipulate
    and directly access those objects. Attackers that exploit this vulnerability are
    able to bypass authorization and directly access resources on the server (i.e,
    database records or files).'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**不安全的直接对象引用** (**IDOR**) 出现的情况是，当应用程序以不安全的方式引用对象，允许用户提供的输入操控并直接访问这些对象。利用此漏洞的攻击者能够绕过授权，直接访问服务器上的资源（例如数据库记录或文件）。'
- en: Getting ready
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To start, ensure that ZAP is started and use the PortSwigger Academy lab, **Insecure
    direct** **object references**.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，确保启动了 ZAP 并使用 PortSwigger Academy 实验室中的**不安全直接** **对象引用**。
- en: How to do it…
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: 'Here, we’ll attack a live chat feature of the application, which will allow
    us to view other users’ messages to the fictitious web app support. Let’s look
    at the steps:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将攻击应用程序的实时聊天功能，允许我们查看其他用户发送给虚拟 Web 应用支持团队的消息。让我们来看一下具体步骤：
- en: Start by navigating in the PortSwigger Academy lab to the **Live** **Chat**
    feature.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在 PortSwigger Academy 实验室中导航到**实时** **聊天**功能。
- en: While capturing the traffic, click the **View** **Transcript** button.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在捕获流量的同时，点击**查看** **转录**按钮。
- en: 'You will notice that this downloads a numbered text file. When you look at
    the response in ZAP’s Manual Request Editor, you are able to manipulate the number
    of the file, as seen in *Figure 4**.22*:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到这会下载一个编号的文本文件。当你在 ZAP 的手动请求编辑器中查看响应时，你可以操控文件的数字，如*图 4.22*所示：
- en: '![Figure 4.22 – Request and response of the IDOR attack](image/Figure_04.22_B18829.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.22 – IDOR 攻击的请求与响应](image/Figure_04.22_B18829.jpg)'
- en: Figure 4.22 – Request and response of the IDOR attack
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.22 – IDOR 攻击的请求与响应
- en: Change the number to **1** and observe the response.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数字改为**1**并观察响应。
- en: Within the response, you will notice the chat between the support bot and someone
    else. Revealed within is the user sending their password in cleartext.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在响应中，你将看到支持机器人与其他人之间的聊天记录，其中揭示了用户以明文发送密码。
- en: How it works…
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The most basic IDOR scenario happens when the application references objects
    using easy-to-guess numerical values, such as incremental integers, as we saw
    and conducted our test on. These fields can also contain probable words, such
    as a user’s email address, or a directory name. Other times, poor encoding methods
    are used, allowing the attacker to decode something – for example, the use of
    base64 encoding on the incremental integer, or a profile image name hash reference.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的 IDOR 场景发生在应用程序使用容易猜测的数字值（如增量整数）引用对象时，正如我们在测试中所看到的那样。这些字段也可能包含可能的单词，如用户的电子邮件地址或目录名称。其他时候，使用了不良的编码方法，允许攻击者解码某些内容——例如，使用
    base64 编码对增量整数进行编码，或者引用用户的头像图像名称哈希值。
- en: The best way to test for IDOR would be to request or create at least two users
    to cover different owned objects and functions – for example, two users each having
    access to different objects (such as purchase information, private messages, etc.)
    – and (if relevant and able) creating users with different privileges (i.e., admin
    versus auditor) to see whether there are direct references to application functionality.
    With multiple users, the tester is able to save time by not having to guess what
    the different object names are when attempting to access those objects that belong
    to other users.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 测试 IDOR 的最佳方法是请求或创建至少两个用户，以覆盖不同的拥有对象和功能——例如，两个用户分别访问不同的对象（如购买信息、私密消息等）——并且（如果相关并且可能）创建具有不同权限的用户（即管理员与审计员），以查看是否存在对应用功能的直接引用。通过多个用户，测试人员可以节省时间，而不必猜测在尝试访问属于其他用户的对象时，不同对象的名称是什么。
- en: There’s more…
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'Some other areas to look for when testing are as follows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 测试时需要关注的其他领域如下：
- en: Whether the value of a parameter is used directly to retrieve a database record
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数的值是否直接用于检索数据库记录
- en: Whether the value of a parameter is used directly to perform an operation in
    the system
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数的值是否直接用于在系统中执行操作
- en: Whether the value of a parameter is used directly to retrieve a filesystem resource
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数的值是否直接用于检索文件系统资源
- en: Whether the value of a parameter is used directly to access application functionality
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数的值是否直接用于访问应用功能
