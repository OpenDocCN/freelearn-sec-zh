- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Implementing Advanced Topic Attacks
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现高级话题攻击
- en: This chapter covers intermediate to advanced topics such as working with **XML
    External Entity** (**XXE**) injection, **JSON Web Token** (**JWT**) attacks, **Server-Side
    Request Forgery** (**SSRF**), **Cross-Origin Resource Sharing** (**CORS**) findings,
    and **Java deserialization attacks**, as well as testing GraphQL in Burp Suite.
    We’ll learn how to use Burp Suite and Burp Suite extensions to assist in making
    each of these types of test easier.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了中高级话题，如 **XML 外部实体**（**XXE**）注入，**JSON Web Token**（**JWT**）攻击，**服务器端请求伪造**（**SSRF**），**跨源资源共享**（**CORS**）问题，以及
    **Java 反序列化攻击**，同时还包括如何在 Burp Suite 中测试 GraphQL。我们将学习如何使用 Burp Suite 及其扩展来简化这些测试。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍以下实验：
- en: Performing XXE attacks
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行 XXE 攻击
- en: Working with JWT
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理 JWT
- en: Using Burp Suite Collaborator to determine SSRF
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Burp Suite Collaborator 确定 SSRF
- en: Testing CORS
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试 CORS
- en: Performing Java deserialization attacks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行 Java 反序列化攻击
- en: Hacking GraphQL with Burp Suite
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Burp Suite 破解 GraphQL
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To complete the recipes in this chapter, you will need the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章的实验，你需要以下内容：
- en: A PortSwigger account ([https://portswigger.net/](B21173_11.xhtml#_idTextAnchor639))
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 PortSwigger 账户（[https://portswigger.net/](B21173_11.xhtml#_idTextAnchor639)）
- en: PortSwigger Web Security Academy Labs (https://portswigger.net/web-security/all-labs)
    access, which requires a PortSwigger account
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PortSwigger Web Security Academy Labs (https://portswigger.net/web-security/all-labs)
    访问，需要一个 PortSwigger 账户
- en: Burp Suite Proxy Community or Professional ([https://portswigger.net/burp/](B21173_11.xhtml#_idTextAnchor704))
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Burp Suite 代理社区版或专业版（[https://portswigger.net/burp/](B21173_11.xhtml#_idTextAnchor704)）
- en: Performing XXE attacks
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行 XXE 攻击
- en: XXE is a vulnerability that targets applications parsing XML. Attackers can
    manipulate the XML input with arbitrary commands and send those commands as external
    entity references within the XML structure. The XML is then executed by a weakly
    configured parser, giving the attacker the requested resource.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: XXE 是一种针对解析 XML 的应用程序的漏洞。攻击者可以通过任意命令操控 XML 输入，并将这些命令作为外部实体引用嵌入 XML 结构中。然后，XML
    会被一个配置不当的解析器执行，从而让攻击者获得所请求的资源。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Log in to your PortSwigger account. We will be using a PortSwigger lab – *Lab:
    Exploiting XXE using external entities to retrieve files* ([https://portswigger.net/web-security/xxe/lab-exploiting-xxe-to-retrieve-files](B21173_11.xhtml#_idTextAnchor703))
    – to exploit an XML parser vulnerability in our target application.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到你的 PortSwigger 账户。我们将使用一个 PortSwigger 实验室 – *实验室：利用外部实体进行 XXE 攻击以检索文件*（[https://portswigger.net/web-security/xxe/lab-exploiting-xxe-to-retrieve-files](B21173_11.xhtml#_idTextAnchor703)）–
    来利用我们目标应用中的 XML 解析器漏洞。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进行...
- en: 'Log in, go to *Lab: Exploiting XXE using external entities to retrieve files*,
    and click the **Access the lab** button to start your instance.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录，进入 *实验室：利用外部实体进行 XXE 攻击以检索文件*，点击 **访问实验室** 按钮开始实例。
- en: '![Figure 11.1 – Lab lesson](image/B21173_11_001.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.1 – 实验课](image/B21173_11_001.jpg)'
- en: Figure 11.1 – Lab lesson
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1 – 实验课
- en: After your instance of the lab loads, use the Burp Suite browser to capture
    your traffic. Click around the site and view a product’s details by clicking the
    **View** **details** button.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载实验室实例后，使用 Burp Suite 浏览器捕获你的流量。点击站点上的内容，并通过点击 **查看** **详情** 按钮查看某个产品的详情。
- en: '![Figure 11.2 – The View details button](image/B21173_11_002.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.2 – 查看详情按钮](image/B21173_11_002.jpg)'
- en: Figure 11.2 – The View details button
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2 – 查看详情按钮
- en: On the subsequent details page, under the description, click the **Check** **stock**
    button.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在后续的详情页面中，点击描述下方的 **检查** **库存** 按钮。
- en: '![Figure 11.3 – The Check stock button](image/B21173_11_003.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.3 – 检查库存按钮](image/B21173_11_003.jpg)'
- en: Figure 11.3 – The Check stock button
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.3 – 检查库存按钮
- en: 'Switch to the Burp Suite **Proxy** | **HTTP history** tab and look for the
    **POST** request you just submitted to check the stock. Right-click and send the
    request to **Repeater**:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Burp Suite **代理** | **HTTP 历史** 标签，查找你刚刚提交的 **POST** 请求，右键点击并将请求发送到 **Repeater**：
- en: '![Figure 11.4 – Send to Repeater](image/B21173_11_004.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.4 – 发送到 Repeater](image/B21173_11_004.jpg)'
- en: Figure 11.4 – Send to Repeater
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.4 – 发送到 Repeater
- en: 'In **Repeater**, add the **DOCTYPE** declaration between the XML declaration
    and the root element called **stockCheck**:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Repeater** 中，在 XML 声明和根元素 **stockCheck** 之间添加 **DOCTYPE** 声明：
- en: '[PRE0]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Also, replace the number within the **productId** elements with **&xxe;**:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，将 **productId** 元素中的数字替换为 **&xxe;**：
- en: '![Figure 11.5 – XXE injection point](image/B21173_11_005.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.5 – XXE 注入点](image/B21173_11_005.jpg)'
- en: Figure 11.5 – XXE injection point
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.5 – XXE 注入点
- en: 'Click the **Send** button. Note that the response retrieves and displays the
    local **/etc/passwd** file content:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **发送** 按钮。请注意，响应会检索并显示本地 **/etc/passwd** 文件的内容：
- en: '![Figure 11.6 – Attack result](image/B21173_11_006.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.6 – 攻击结果](image/B21173_11_006.jpg)'
- en: Figure 11.6 – Attack result
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.6 – 攻击结果
- en: How it works...
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, the insecure XML parser receives the request within the XML
    for the **/etc/passwd** file residing on the server. Since there is no validation
    performed on the XML request due to a weakly configured parser, the resource is
    freely provided to the attacker.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，不安全的 XML 解析器接收到包含服务器上 **/etc/passwd** 文件的 XML 请求。由于解析器配置较弱，未对 XML 请求进行验证，因此攻击者可以自由访问该资源。
- en: Working with JWTs
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 JWT
- en: As more sites provide client API access, JWTs are commonly used for authentication.
    These tokens hold identity and claim information tied to the resources the user
    is granted access to on the target site. Web-penetration testers need to read
    these tokens and determine their strength. Fortunately, there are some handy plugins
    that make working with JWTs inside Burp Suite much easier. We will learn about
    these plugins in this recipe.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 随着越来越多的网站提供客户端 API 访问，JWT（JSON Web Token）已广泛用于身份验证。这些令牌包含与用户在目标网站上被授予访问权限的资源相关联的身份和声明信息。Web
    渗透测试人员需要读取这些令牌并评估它们的安全性。幸运的是，Burp Suite 提供了一些便捷的插件，使得处理 JWT 变得更加容易。在本食谱中，我们将学习如何使用这些插件。
- en: Getting ready
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Log in to your PortSwigger account. We will be using *Lab: JWT authentication
    bypass via flawed signature verification* ([https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-flawed-signature-verification](https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-flawed-signature-verification))
    and the **JWT Editor** extension to exploit a signature vulnerability in our target
    application.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '登录到您的 PortSwigger 账户。我们将使用 *Lab: JWT 身份验证绕过通过签名验证漏洞*（[https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-flawed-signature-verification](https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-flawed-signature-verification)）和
    **JWT Editor** 扩展来利用我们目标应用中的签名漏洞。'
- en: How to do it...
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Switch to Burp Suite **Extensions** | **BApp Store** and install the **JWT**
    **Editor** plugin:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Burp Suite **Extensions** | **BApp Store** 并安装 **JWT** **Editor** 插件：
- en: '![Figure 11.7 – The JWT Editor extension](image/B21173_11_007.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.7 – JWT Editor 扩展](image/B21173_11_007.jpg)'
- en: Figure 11.7 – The JWT Editor extension
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.7 – JWT Editor 扩展
- en: 'After you install the extension, notice you now have a new tab entitled **JWT**
    **Editor Keys**:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装扩展后，您会看到一个新的标签页，标题为 **JWT** **Editor Keys**：
- en: '![Figure 11.8 – New tab](image/B21173_11_008.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.8 – 新标签](image/B21173_11_008.jpg)'
- en: Figure 11.8 – New tab
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.8 – 新标签
- en: 'Go to *Lab: JWT authentication bypass via unverified signature* and click the
    **Access the lab** button to start your instance:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '进入 *Lab: JWT 身份验证绕过通过未验证的签名*，然后点击 **访问实验室** 按钮开始您的实例：'
- en: '![Figure 11.9 – Lab lesson](image/B21173_11_009.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.9 – 实验课程](image/B21173_11_009.jpg)'
- en: Figure 11.9 – Lab lesson
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.9 – 实验课程
- en: After your instance of the lab loads, go to **Proxy** | **Intercept** | **Open
    browser** to use the Burp Suite browser to capture your traffic.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载实验室实例后，进入 **Proxy** | **Intercept** | **Open browser** 使用 Burp Suite 浏览器来捕获您的流量。
- en: '![Figure 11.10 – Open the Burp Suite browser](image/B21173_11_010.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.10 – 打开 Burp Suite 浏览器](image/B21173_11_010.jpg)'
- en: Figure 11.10 – Open the Burp Suite browser
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.10 – 打开 Burp Suite 浏览器
- en: 'Log in to the application using the provided credentials: **wiener**/**peter**.'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用提供的凭据登录应用程序：**wiener**/**peter**。
- en: '![Figure 11.11 – Log in with the provided credentials](image/B21173_11_011.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.11 – 使用提供的凭据登录](image/B21173_11_011.jpg)'
- en: Figure 11.11 – Log in with the provided credentials
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.11 – 使用提供的凭据登录
- en: Switch to the Burp Suite **Proxy** | **HTTP history** tab. Find the **GET**
    request with the URL **/my-account**. Right-click and click the **Send to** **Repeater**
    option.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Burp Suite **Proxy** | **HTTP 历史** 标签页。找到带有 URL **/my-account** 的 **GET**
    请求。右键点击并选择 **发送到** **Repeater** 选项。
- en: '![Figure 11.12 – Send to Repeater](image/B21173_11_012.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.12 – 发送到 Repeater](image/B21173_11_012.jpg)'
- en: Figure 11.12 – Send to Repeater
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.12 – 发送到 Repeater
- en: 'Switch to the **Repeater** tab and notice that you have a new tab entitled
    **JSON** **Web Token**:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 **Repeater** 标签页，您会看到一个新标签，标题为 **JSON** **Web Token**：
- en: '![Figure 11.13 – Extension functionality in Repeater](image/B21173_11_013.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.13 – Repeater 中的扩展功能](image/B21173_11_013.jpg)'
- en: Figure 11.13 – Extension functionality in Repeater
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.13 – Repeater 中的扩展功能
- en: Click the **JSON Web Token** tab to reveal a debugger very similar to the one
    available at [https://jwt.io.](B21173_11.xhtml#_idTextAnchor701) This plugin allows
    you to read the claims content and manipulate the encryption algorithm for various
    brute-force tests. In this attack, we will remove the signature from the token
    and send the JWT to see whether the application accepts or rejects the request.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **JSON Web Token** 选项卡，显示一个与 [https://jwt.io](B21173_11.xhtml#_idTextAnchor701)
    非常相似的调试工具。此插件允许你读取声明内容并操控加密算法进行各种暴力破解测试。在此攻击中，我们将移除令牌中的签名并发送 JWT，以查看应用程序是接受还是拒绝请求。
- en: To perform this attack, click the **Attack** button and select **“none”** **Signing
    Algorithm**.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行此攻击，点击**攻击**按钮并选择**“none”** **签名算法**。
- en: '![Figure 11.14 – None algo attack](image/B21173_11_014.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.14 – 无算法攻击](image/B21173_11_014.jpg)'
- en: Figure 11.14 – None algo attack
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.14 – 无算法攻击
- en: 'Notice the **Signature** text area is now blank, the signature is missing after
    the last dot, and **alg** in the header is set to **none**:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意 **签名** 文本框现在是空白的，签名在最后一个点后丢失，头部中的 **alg** 被设置为 **none**：
- en: '![Figure 11.15 – Signature is removed](image/B21173_11_015.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.15 – 签名已被移除](image/B21173_11_015.jpg)'
- en: Figure 11.15 – Signature is removed
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.15 – 签名已被移除
- en: 'Inside the **Payload** text area, change **wiener** to **administrator**:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Payload** 文本框中，将 **wiener** 改为 **administrator**：
- en: '![Figure 11.16 – Escalate subject to administrator](image/B21173_11_016.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.16 – 提升主题至管理员](image/B21173_11_016.jpg)'
- en: Figure 11.16 – Escalate subject to administrator
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.16 – 提升主题至管理员
- en: Switch to the **Raw** tab and click the **Send** button to send the request
    to the application. Notice that the application accepts the request and you are
    logged in to the administrator’s account.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 **Raw** 选项卡并点击 **发送** 按钮，将请求发送到应用程序。注意，应用程序接受请求，你已成功登录管理员账户。
- en: '![Figure 11.17 – Evidence of attack](image/B21173_11_017.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.17 – 攻击证据](image/B21173_11_017.jpg)'
- en: Figure 11.17 – Evidence of attack
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.17 – 攻击证据
- en: 'Change the **GET** request from **/my-account** to **/admin/delete?username=carlos**
    to solve the puzzle:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **GET** 请求从 **/my-account** 更改为 **/admin/delete?username=carlos** 来解决谜题：
- en: '![Figure 11.18 – Final attack to solve](image/B21173_11_018.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.18 – 最终攻击以解决问题](image/B21173_11_018.jpg)'
- en: Figure 11.18 – Final attack to solve
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.18 – 最终攻击以解决问题
- en: 'Send the request and see the congratulatory banner in the browser:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发送请求并在浏览器中查看祝贺横幅：
- en: '![Figure 11.19 – Congratulatory banner](image/B21173_11_019.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.19 – 祝贺横幅](image/B21173_11_019.jpg)'
- en: Figure 11.19 – Congratulatory banner
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.19 – 祝贺横幅
- en: How it works...
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The **JWT Editor** extension helps testers to work with JWT tokens in an easier
    way by providing debugger tools conveniently available with the Burp Suite UI.
    Check out the other JWT labs available in the PortSwigger Web Security Academy
    to gain more experience with the extension.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**JWT 编辑器** 扩展帮助测试人员以更方便的方式处理 JWT 令牌，通过在 Burp Suite UI 中提供调试工具。请查看 PortSwigger
    Web 安全学院中的其他 JWT 实验，以获得更多使用此扩展的经验。'
- en: Using Burp Suite Collaborator to determine SSRF
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Burp Suite Collaborator 确定 SSRF
- en: SSRF is a vulnerability that allows an attacker to force applications to make
    unauthorized requests on the attacker’s behalf. These requests can be as simple
    as DNS queries or as maniacal as commands from an attacker-controlled server.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: SSRF 是一种漏洞，允许攻击者强制应用程序代表攻击者发出未经授权的请求。这些请求可以像 DNS 查询那样简单，或者像从攻击者控制的服务器发出的命令那样疯狂。
- en: In this recipe, we will use Burp Suite Collaborator to check open ports available
    for SSRF requests, and then we will use Burp Intruder to determine whether the
    application will perform DNS queries to the public Burp Suite Collaborator server
    through an SSRF vulnerability.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用 Burp Suite Collaborator 检查可用于 SSRF 请求的开放端口，然后我们将使用 Burp Intruder
    来确定应用程序是否会通过 SSRF 漏洞向公共 Burp Suite Collaborator 服务器执行 DNS 查询。
- en: Getting ready
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Log in to your PortSwigger account. Using PortSwigger *Lab: Blind SSRF with
    out-of-band detection* ([https://portswigger.net/web-security/ssrf/blind/lab-out-of-band-detection](B21173_11.xhtml#_idTextAnchor696)),
    we will see how to use Burp Suite Collaborator to identify an SSRF vulnerability
    in our target application.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到你的 PortSwigger 账户。使用 PortSwigger *实验：盲 SSRF 与离带检测* ([https://portswigger.net/web-security/ssrf/blind/lab-out-of-band-detection](B21173_11.xhtml#_idTextAnchor696))，我们将看到如何使用
    Burp Suite Collaborator 来识别我们目标应用中的 SSRF 漏洞。
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何执行...
- en: 'Switch to the Burp Suite **Collaborator** tab. Click the **Get** **started**
    button:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Burp Suite 的 **Collaborator** 标签。点击 **Get** **started** 按钮：
- en: '![Figure 11.20 – Start Collaborator](image/B21173_11_020.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.20 – 启动 Collaborator](image/B21173_11_020.jpg)'
- en: Figure 11.20 – Start Collaborator
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.20 – 启动 Collaborator
- en: Notice you may now copy **Collaborator** payloads to the clipboard and a table
    appears that displays any captured calls.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，现在你可以将 **Collaborator** 有效负载复制到剪贴板，并且会出现一个表格，显示任何捕获到的调用。
- en: '![Figure 11.21 – The Collaborator table](image/B21173_11_021.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.21 – 协作者表格](image/B21173_11_021.jpg)'
- en: Figure 11.21 – The Collaborator table
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.21 – 协作者表格
- en: 'Log in, go to *Lab: Blind SSRF with out-of-band detection*, and start the instance
    by clicking **Access** **the lab**:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '登录，进入 *Lab: Blind SSRF with out-of-band detection*，然后通过点击 **Access** **the
    lab** 来启动实例：'
- en: '![Figure 11.22 – Lab lesson](image/B21173_11_022.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.22 – 实验课程](image/B21173_11_022.jpg)'
- en: Figure 11.22 – Lab lesson
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.22 – 实验课程
- en: After your instance of the lab loads, use the Burp Suite browser to capture
    your traffic. Click around the site.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载完实验室实例后，使用 Burp Suite 浏览器捕获你的流量。点击站点上的各个地方。
- en: 'Switch to the **Proxy** | **HTTP history** tab and find any request you made
    in the instance that contains a **Referer** header. Right-click and send the request
    to **Repeater**:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 **Proxy** | **HTTP history** 标签，找到你在实例中发出的任何包含 **Referer** 头的请求。右键点击并将该请求发送到
    **Repeater**：
- en: '![Figure 11.23 – Send to Repeater](image/B21173_11_023.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.23 – 发送到 Repeater](image/B21173_11_023.jpg)'
- en: Figure 11.23 – Send to Repeater
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.23 – 发送到 Repeater
- en: Inside **Repeater**, highlight the value of the **Referer** header, leaving
    the protocol of **https://**. Right-click and select **Insert Collaborator payload**.
    This action will replace the current value of **Referer** with a collaborator
    instance.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Repeater** 中，突出显示 **Referer** 头的值，保留 **https://** 协议。右键点击并选择 **Insert Collaborator
    payload**。此操作将用协作者实例替换 **Referer** 的当前值。
- en: '![Figure 11.24 – Insert Collaborator payload](image/B21173_11_024.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.24 – 插入 Collaborator 有效负载](image/B21173_11_024.jpg)'
- en: Figure 11.24 – Insert Collaborator payload
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.24 – 插入 Collaborator 有效负载
- en: The subdomain is randomized, so your collaborator value will differ from the
    one shown in the following screenshot.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 子域名是随机生成的，因此你的协作者值会与以下截图中显示的不同。
- en: '![Figure 11.25 – Referer header](image/B21173_11_025.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.25 – Referer 头](image/B21173_11_025.jpg)'
- en: Figure 11.25 – Referer header
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.25 – Referer 头
- en: Inside **Repeater**, click the **Send** button. The response will look normal.
    Since this is a blind SSRF, we need to see whether any backend systems made calls
    to our **Collaborator** server instance.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Repeater** 中，点击 **Send** 按钮。响应看起来是正常的。由于这是盲 SSRF，我们需要查看是否有后端系统向我们的 **Collaborator**
    服务器实例发出了请求。
- en: '![Figure 11.26 – Response](image/B21173_11_026.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.26 – 响应](image/B21173_11_026.jpg)'
- en: Figure 11.26 – Response
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.26 – 响应
- en: Switch to the Burp Suite **Collaborator** client and click the **Poll now**
    button to see whether any SSRF attacks were successful. If any requests leaked
    outside of the network, those requests will appear in this table along with the
    specific protocol used. If any requests are shown in this table, you will need
    to report the SSRF vulnerability as a finding. As you can see from the results
    shown here, numerous DNS queries were made by the application on behalf of the
    attacker-provided payloads. This means the source IP addresses shown would be
    backend servers behind the target application.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Burp Suite 的 **Collaborator** 客户端，点击 **Poll now** 按钮，查看是否有 SSRF 攻击成功。如果有任何请求泄露到网络外部，这些请求将出现在这个表格中，并显示使用的特定协议。如果表格中出现了任何请求，你需要将该
    SSRF 漏洞作为发现报告。正如这里所显示的结果，应用程序代表攻击者提供的有效负载发出了多个 DNS 查询。这意味着显示的源 IP 地址是目标应用程序后端的服务器。
- en: '![Figure 11.27 – Poll shows interactions](image/B21173_11_027.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.27 – 投票显示交互](image/B21173_11_027.jpg)'
- en: Figure 11.27 – Poll shows interactions
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.27 – 投票显示交互
- en: Notice the congratulatory banner in the browser.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意浏览器中的祝贺横幅。
- en: "![Figure 11.28 – Congratulatory ban\uFEFFn\uFEFFer](image/B21173_11_028.jpg)"
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.28 – 祝贺横幅](image/B21173_11_028.jpg)'
- en: Figure 11.28 – Congratulatory banner
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.28 – 祝贺横幅
- en: How it works...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Network leaks and overly generous application parameters can allow an attacker
    to have an application make unauthorized calls via various protocols on the attacker’s
    behalf. In the case of this recipe, the application allows DNS queries to leak
    outside of the local machine and connect to the internet.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 网络泄漏和过于宽松的应用程序参数可能允许攻击者通过各种协议代表攻击者进行未经授权的调用。在本教程中，应用程序允许 DNS 查询泄漏到本地机器外部，并连接到互联网。
- en: See also
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: For more information on SSRF attacks, see the PortSwigger blog entry at [https://portswigger.net/blog/cracking-the-lens-targeting-https-hidden-attack-surface](B21173_11.xhtml#_idTextAnchor693).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 SSRF 攻击的更多信息，请查看 PortSwigger 博客中的文章：[https://portswigger.net/blog/cracking-the-lens-targeting-https-hidden-attack-surface](B21173_11.xhtml#_idTextAnchor693)。
- en: Testing CORS
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试 CORS
- en: An application implementing HTML5 **Cross-Origin Resource Sharing** (**CORS**)
    means the application will share browser information with another domain that
    resides at a different origin. By design, browser protections prevent external
    scripts from accessing information in the browser. This protection is known as
    **Same-Origin Policy** (**SOP**). However, CORS is a means of bypassing SOP permissively.
    If an application wants to share browser information with a completely different
    domain, it may do so with properly configured CORS headers.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 HTML5 **跨源资源共享**（**CORS**）的应用程序意味着该应用程序将与位于不同源的其他域共享浏览器信息。根据设计，浏览器保护措施防止外部脚本访问浏览器中的信息。这种保护被称为
    **同源策略**（**SOP**）。然而，CORS 是绕过 SOP 的一种宽松方式。如果应用程序想要与完全不同的域共享浏览器信息，它可以通过正确配置 CORS
    头来实现。
- en: Web-penetration testers must ensure applications that handle AJAX calls (for
    example, HTML5) do not have misconfigured CORS headers. Let’s see how Burp Suite
    can help us identify such misconfigurations.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Web 渗透测试人员必须确保处理 AJAX 调用的应用程序（例如 HTML5）没有配置错误的 CORS 头。让我们看看 Burp Suite 如何帮助我们识别这些配置错误。
- en: Getting ready
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Log in to your PortSwigger account. Using *Lab: CORS vulnerability with basic
    origin reflection* ([https://portswigger.net/web-security/cors/lab-basic-origin-reflection-attack](B21173_11.xhtml#_idTextAnchor690)),
    we will see how to identify a CORS vulnerability in our target application.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '登录到你的 PortSwigger 账户。使用 *Lab: CORS 漏洞与基本的源反射*（[https://portswigger.net/web-security/cors/lab-basic-origin-reflection-attack](B21173_11.xhtml#_idTextAnchor690)），我们将看到如何在目标应用程序中识别
    CORS 漏洞。'
- en: How to do it...
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Go to *Lab: CORS vulnerability with basic origin reflection* and click the
    **Access the lab** button to start your instance.'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '进入 *Lab: CORS 漏洞与基本的源反射*，点击 **访问实验** 按钮来启动你的实例。'
- en: '![Figure 11.29 – Lab lesson](image/B21173_11_029.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.29 – 实验课](image/B21173_11_029.jpg)'
- en: Figure 11.29 – Lab lesson
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.29 – 实验课
- en: 'After your instance of the lab loads, use the Burp Suite browser to capture
    your traffic. Log in to the application using the provided credentials: **wiener**/**peter**.'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在加载完实验环境实例后，使用 Burp Suite 浏览器来捕获你的流量。使用提供的凭证登录应用程序：**wiener**/**peter**。
- en: '![Figure 11.30 – Click the My account link](image/B21173_11_030.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.30 – 点击“我的账户”链接](image/B21173_11_030.jpg)'
- en: Figure 11.30 – Click the My account link
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.30 – 点击“我的账户”链接
- en: Use the supplied credentials to log in to the application.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 使用提供的凭证登录应用程序。
- en: '![Figure 11.31 – Log in with the provided credentials](image/B21173_11_031.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.31 – 使用提供的凭证登录](image/B21173_11_031.jpg)'
- en: Figure 11.31 – Log in with the provided credentials
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.31 – 使用提供的凭证登录
- en: Switch to the Burp Suite **Proxy** | **HTTP history** tab and look for the **GET**
    **/accountDetails** request after login. Notice there is a CORS-related header
    in the response, allowing the sharing of client secrets.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Burp Suite **Proxy** | **HTTP 历史记录** 标签页，查找登录后发出的 **GET** **/accountDetails**
    请求。注意响应中有一个与 CORS 相关的头部，允许共享客户端秘密。
- en: '![Figure 11.32 – CORS header in response](image/B21173_11_032.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.32 – 响应中的 CORS 头](image/B21173_11_032.jpg)'
- en: Figure 11.32 – CORS header in response
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.32 – 响应中的 CORS 头
- en: 'Send the request to **Repeater**:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 将请求发送到 **Repeater**：
- en: '![Figure 11.33 – Send to Repeater](image/B21173_11_033.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.33 – 发送到 Repeater](image/B21173_11_033.jpg)'
- en: Figure 11.33 – Send to Repeater
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.33 – 发送到 Repeater
- en: 'Let’s make a cross-origin call by adding the **Origin** header to the request
    from the **https://example.com** location:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过向来自**https://example.com**位置的请求添加 **Origin** 头，来进行跨源调用：
- en: '[PRE1]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'It’s shown in the following screenshot:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是截图所示：
- en: '![Figure 11.34 – Add the Origin header and site value](image/B21173_11_034.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.34 – 添加 Origin 头和站点值](image/B21173_11_034.jpg)'
- en: Figure 11.34 – Add the Origin header and site value
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.34 – 添加Origin头部和站点值
- en: 'While in **Repeater**, click **Send** and notice a new CORS-related header
    appears in **Response**. Now there are two CORS headers in **Response** and the
    value of **Origin** is reflected in **Access-Control-Allow-Origin**, allowing
    information to be shared:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Repeater**中，点击**Send**并注意到一个新的与CORS相关的头部出现在**Response**中。现在**Response**中有两个CORS头部，并且**Origin**的值反映在**Access-Control-Allow-Origin**中，允许信息共享：
- en: '![Figure 11.35 – See what gets reflected in response](image/B21173_11_035.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.35 – 查看响应中反射的内容](image/B21173_11_035.jpg)'
- en: Figure 11.35 – See what gets reflected in response
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.35 – 查看响应中反射的内容
- en: 'Click the **Go to exploit** **server** button:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Go to exploit** **server**按钮：
- en: '![Figure 11.36 – Go to exploit server](image/B21173_11_036.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.36 – 前往漏洞服务器](image/B21173_11_036.jpg)'
- en: Figure 11.36 – Go to exploit server
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.36 – 前往漏洞服务器
- en: 'We need to create a **Proof of Concept** (**PoC**) to show how we can leverage
    this CORS vulnerability to show impact. Remove the **Hello, world!** message from
    the **Body** portion of the PoC:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要创建一个**概念验证**（**PoC**），展示如何利用这个CORS漏洞来显示其影响。从PoC的**Body**部分移除**Hello, world!**消息：
- en: '![Figure 11.37 – Body of PoC in exploit server](image/B21173_11_037.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.37 – PoC的Body部分在漏洞服务器中](image/B21173_11_037.jpg)'
- en: Figure 11.37 – Body of PoC in exploit server
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.37 – PoC的Body部分在漏洞服务器中
- en: 'Replace the **Body** text area with the following payload, and substitute **<YOUR-LAB-ID>**
    with the value of your lab instance along with the **https://** in front:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**Body**文本区域替换为以下有效载荷，并将**<YOUR-LAB-ID>**替换为你的实验室实例的值，并在前面加上**https://**：
- en: '![Figure 11.38 – Replace the value with your lab ID](image/B21173_11_038.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.38 – 替换为你的实验室ID](image/B21173_11_038.jpg)'
- en: Figure 11.38 – Replace the value with your lab ID
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.38 – 替换为你的实验室ID
- en: 'Click **Store** and **Deliver to Victim** in that order at the bottom:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Store**，然后点击底部的**Deliver to Victim**：
- en: '![Figure 11.39 – The Store and Deliver exploit to victim buttons](image/B21173_11_039.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.39 – 存储并交付给受害者的按钮](image/B21173_11_039.jpg)'
- en: Figure 11.39 – The Store and Deliver exploit to victim buttons
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.39 – 存储并交付给受害者的按钮
- en: 'Click on **Access log** to retrieve the API key of your victim:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Access log**以检索受害者的API密钥：
- en: '![Figure 11.40 – Click the Access log button](image/B21173_11_040.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.40 – 点击访问日志按钮](image/B21173_11_040.jpg)'
- en: Figure 11.40 – Click the Access log button
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.40 – 点击访问日志按钮
- en: Look through the log until you find a different IP address and the API key of
    your victim.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览日志，直到找到一个不同的IP地址和你受害者的API密钥。
- en: '![Figure 11.41 – View the access log for the victim’s API key](image/B21173_11_041.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.41 – 查看受害者API密钥的访问日志](image/B21173_11_041.jpg)'
- en: Figure 11.41 – View the access log for the victim’s API key
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.41 – 查看受害者API密钥的访问日志
- en: 'Place the value of the stolen API key into the **Submit solution** box for
    the solution:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将窃取的API密钥的值放入**Submit solution**框中：
- en: '![Figure 11.42 – Click the Submit solution button](image/B21173_11_042.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.42 – 点击提交解决方案按钮](image/B21173_11_042.jpg)'
- en: Figure 11.42 – Click the Submit solution button
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.42 – 点击提交解决方案按钮
- en: Note that your value will differ from the one shown here.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，你的值与此处显示的不同。
- en: '![Figure 11.43 – Submit the API key as the solution](image/B21173_11_043.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.43 – 提交API密钥作为解决方案](image/B21173_11_043.jpg)'
- en: Figure 11.43 – Submit the API key as the solution
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.43 – 提交API密钥作为解决方案
- en: Notice the congratulatory banner in the browser.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意浏览器中的恭喜横幅。
- en: "![Figure 11.44 – Congratulatory banner\uFEFF](image/B21173_11_044.jpg)"
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: "![图 11.44 – 恭喜横幅\uFEFF](image/B21173_11_044.jpg)"
- en: Figure 11.44 – Congratulatory banner
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.44 – 恭喜横幅
- en: How it works...
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In an AJAX request, most instances require a call out to an external URL not
    residing in the same domain. To permit the external domain to receive DOM information
    from the user’s browser session, CORS headers must be present, including **Access-Control-Allow-Origin:
    <name of** **cross domain>**.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '在AJAX请求中，大多数情况下需要调用一个不在同一域名中的外部URL。为了允许外部域接收来自用户浏览器会话的DOM信息，必须存在CORS头部，包括**Access-Control-Allow-Origin:
    <跨域的名称>**。'
- en: See also
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: For more information on misconfigured CORS headers, see this PortSwigger blog
    entry at [https://portswigger.net/blog/exploiting-cors-misconfigurations-for-bitcoins-and-bounties](B21173_11.xhtml#_idTextAnchor687).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 有关CORS头部配置错误的更多信息，请参见此PortSwigger博客文章：[https://portswigger.net/blog/exploiting-cors-misconfigurations-for-bitcoins-and-bounties](B21173_11.xhtml#_idTextAnchor687)。
- en: Performing Java deserialization attacks
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行Java反序列化攻击
- en: '**Serialization** is a mechanism provided in various languages that allows
    the saving of an object’s state in binary format. It is used for speed and obfuscation.
    The turning of an object back from binary into an object is deserialization. In
    cases where user input is used within an object and that object is later serialized,
    it creates an attack vector for arbitrary code injection and possible remote code
    execution. We will look at a Burp Suite extension that will assist web-penetration
    testers in assessing applications for Java deserialization vulnerabilities.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**序列化** 是多种编程语言提供的一种机制，它允许将对象的状态保存为二进制格式。它用于提高速度和混淆。当对象从二进制格式转换回对象时，称为反序列化。如果用户输入的数据用于对象内，并且该对象之后被序列化，则可能会创建一个攻击向量，导致任意代码注入和潜在的远程代码执行。我们将研究一个
    Burp Suite 扩展，它可以帮助 Web 渗透测试人员评估应用程序中的 Java 反序列化漏洞。'
- en: Getting ready
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Login to your PortSwigger account. Using *Lab: Exploiting Java deserialization
    with Apache Commons* ([https://portswigger.net/web-security/deserialization/exploiting/lab-deserialization-exploiting-java-deserialization-with-apache-commons](B21173_11.xhtml#_idTextAnchor682))
    and a hand-crafted serialized code snippet, we will demonstrate how to use the
    **Java Deserialization Scanner** to assist in performing Java deserialization
    attacks.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到您的 PortSwigger 账户。使用 *实验室：利用 Apache Commons 进行 Java 反序列化*（[https://portswigger.net/web-security/deserialization/exploiting/lab-deserialization-exploiting-java-deserialization-with-apache-commons](B21173_11.xhtml#_idTextAnchor682)）和手工制作的序列化代码片段，我们将演示如何使用
    **Java 反序列化扫描器** 来协助进行 Java 反序列化攻击。
- en: You will need to use an old Java version, such as JDK 7, along with the third-party
    JAR file for **ysoserial** to complete this recipe.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要使用旧版 Java，如 JDK 7，并结合第三方 JAR 文件 **ysoserial** 来完成此操作。
- en: 'Here are the Java SE 7 archive downloads: [https://www.oracle.com/java/technologies/javase/javase7-archive-downloads.html](B21173_11.xhtml#_idTextAnchor679):'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Java SE 7 的档案下载地址：[https://www.oracle.com/java/technologies/javase/javase7-archive-downloads.html](B21173_11.xhtml#_idTextAnchor679)：
- en: Select the download for your environment. For example, for Windows x64 you would
    download the **jdk-7u80-windows-x64.exe** file.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择适合您环境的下载。例如，对于 Windows x64，您需要下载 **jdk-7u80-windows-x64.exe** 文件。
- en: After download, double-click and follow the prompts to install.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载后，双击并按照提示进行安装。
- en: Note
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Uninstall this from your system after you complete the recipe as it is a very
    insecure version of Java.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 完成该操作后，请从您的系统中卸载此版本的 Java，因为它是一个非常不安全的版本。
- en: Remember the location of the JDK 7 on your local system.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记住 JDK 7 在本地系统中的位置。
- en: 'Here is the **ysoserial** JAR file download: https://github.com/frohoff/ysoserial/releases/tag/v0.0.6:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 **ysoserial** JAR 文件下载地址： https://github.com/frohoff/ysoserial/releases/tag/v0.0.6：
- en: Select the **ysoserial-all.jar** file for download.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **ysoserial-all.jar** 文件进行下载。
- en: Remember the location of the **ysoserial-all.jar** file on your local system.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记住 **ysoserial-all.jar** 文件在本地系统中的位置。
- en: How to do it...
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Switch to Burp Suite **Extensions** | **BApp Store** and install the **Java
    Deserialization** **Scanner** plugin:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Burp Suite **扩展** | **BApp 商店** 并安装 **Java 反序列化** **扫描器** 插件：
- en: '![Figure 11.45 – Add Java Deserialization Scanner extension](image/B21173_11_045.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.45 – 添加 Java 反序列化扫描器扩展](image/B21173_11_045.jpg)'
- en: Figure 11.45 – Add Java Deserialization Scanner extension
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.45 – 添加 Java 反序列化扫描器扩展
- en: 'Go to *Lab: Exploiting Java deserialization with Apache Commons* and click
    the **Access the lab** button to start your instance:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 *实验室：利用 Apache Commons 进行 Java 反序列化*，并点击 **访问实验室** 按钮以启动您的实例：
- en: '![Figure 11.46 – Lab lesson](image/B21173_11_046.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.46 – 实验室课程](image/B21173_11_046.jpg)'
- en: Figure 11.46 – Lab lesson
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.46 – 实验室课程
- en: After your instance of the lab loads, use the Burp Suite browser to capture
    your traffic. Log in to the application using the credentials **wiener**/**peter**.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载完实验室实例后，使用 Burp Suite 浏览器捕获您的流量。使用凭证 **wiener**/**peter** 登录应用程序。
- en: '![Figure 11.47 – Click on My account to log in](image/B21173_11_047.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.47 – 点击我的账户以登录](image/B21173_11_047.jpg)'
- en: Figure 11.47 – Click on My account to log in
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.47 – 点击我的账户以登录
- en: Use the supplied credentials to log in to the application.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 使用提供的凭证登录应用程序。
- en: '![Figure 11.48 – Log in with the provided credentials](image/B21173_11_048.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.48 – 使用提供的凭证登录](image/B21173_11_048.jpg)'
- en: Figure 11.48 – Log in with the provided credentials
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.48 – 使用提供的凭证登录
- en: Switch to the Burp Suite **Proxy**| **HTTP history** tab and look for the request
    after login. Note the session cookie is using Java serialization.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Burp Suite 的**代理**|**HTTP 历史记录**标签，寻找登录后的请求。注意会话 cookie 使用的是 Java 序列化。
- en: '![Figure 11.49 – Notice the serialized cookie value](image/B21173_11_049.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.49 – 注意序列化的 cookie 值](image/B21173_11_049.jpg)'
- en: Figure 11.49 – Notice the serialized cookie value
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.49 – 注意序列化的 cookie 值
- en: Right-click, select **Extensions** and send the request to the **Java Deserialization
    Scanner** | **Send request to DS – Manual** **testing** tab.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击，选择**扩展**并将请求发送到**Java 反序列化扫描器**|**发送请求到 DS – 手动**测试**标签。
- en: '![Figure 11.50 – Send request to extension](image/B21173_11_050.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.50 – 发送请求到扩展](image/B21173_11_050.jpg)'
- en: Figure 11.50 – Send request to extension
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.50 – 发送请求到扩展
- en: Notice a new tab is available entitled **Deserialization Scanner** with our
    request present in the **Manual testing** tab. Highlight the serialized value
    and click the **Set Insertion Point** button. Notice the substitution markers,
    which look like dollar signs, surrounding our serialized value.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，一个新的标签**反序列化扫描器**已可用，且我们的请求出现在**手动测试**标签中。突出显示序列化值并点击**设置插入点**按钮。注意，序列化值周围的替换标记看起来像美元符号。
- en: '![Figure 11.51 – Set the insertion point](image/B21173_11_051.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.51 – 设置插入点](image/B21173_11_051.jpg)'
- en: Figure 11.51 – Set the insertion point
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.51 – 设置插入点
- en: After setting our insertion point, look at the bottom panel and move the **Encode
    using Base64** option from the bottom-left panel to the right panel by clicking
    the **Add** button. Additionally, add the **Encode using URL encoding** option
    from the left panel to the right panel.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 设置插入点后，查看底部面板，将**使用 Base64 编码**选项从左下角面板移动到右侧面板，方法是点击**添加**按钮。另外，将**使用 URL 编码**选项从左侧面板添加到右侧面板。
- en: '![Figure 11.52 – Add Base64 encoding and URL encoding](image/B21173_11_052.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.52 – 添加 Base64 编码和 URL 编码](image/B21173_11_052.jpg)'
- en: Figure 11.52 – Add Base64 encoding and URL encoding
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.52 – 添加 Base64 编码和 URL 编码
- en: 'Let’s send the request over to the **Exploiting** tab by right-clicking and
    selecting **Send to** **Exploitation tab**:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击并选择**发送到**利用标签，将请求发送到**利用**标签：
- en: '![Figure 11.53 – Send request to Exploitation tab](image/B21173_11_053.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.53 – 发送请求到利用标签](image/B21173_11_053.jpg)'
- en: Figure 11.53 – Send request to Exploitation tab
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.53 – 发送请求到利用标签
- en: 'To make the extension work for us, we need to configure the settings for the
    location of Java and the **ysoserial** JAR file within the **Configurations**
    tab (note your path values will be different from what is shown in this screenshot
    since you must use the paths for your local system):'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了让扩展正常工作，我们需要在**配置**标签中配置 Java 和**ysoserial** JAR 文件的路径（注意，路径值会因你的本地系统而有所不同）：
- en: '![Figure 11.54 – Configure Java and ysoserial within the Deserialization Scanner
    Extension](image/B21173_11_054.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.54 – 配置 Java 和 ysoserial 在反序列化扫描器扩展中的设置](image/B21173_11_054.jpg)'
- en: Figure 11.54 – Configure Java and ysoserial within the Deserialization Scanner
    Extension
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.54 – 配置 Java 和 ysoserial 在反序列化扫描器扩展中的设置
- en: Switch to the **Deserialization Scanner** | **Exploiting** tab and ensure you
    still have the Base64 encoding button added at the bottom as well as the URL encoding
    button. Both of these encodings should be in the bottom-right panel.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到**反序列化扫描器**|**利用**标签，确保底部仍然有添加的 Base64 编码按钮以及 URL 编码按钮。这两个编码应位于右下角面板。
- en: '![Figure 11.55 – On the Exploiting tab, make sure that both encodings are on
    the right panel](image/B21173_11_055.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.55 – 在利用标签中，确保两个编码都在右侧面板](image/B21173_11_055.jpg)'
- en: Figure 11.55 – On the Exploiting tab, make sure that both encodings are on the
    right panel
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.55 – 在利用标签中，确保两个编码都在右侧面板
- en: 'Add the **CommonsCollections4 ''rm /home/carlos/morale.txt''** command to the
    **java -jar ysoserial** text area:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**CommonsCollections4 'rm /home/carlos/morale.txt'**命令添加到**java -jar ysoserial**文本框中：
- en: '![Figure 11.56 – Set the gadget and command](image/B21173_11_056.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.56 – 设置小工具和命令](image/B21173_11_056.jpg)'
- en: Figure 11.56 – Set the gadget and command
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.56 – 设置小工具和命令
- en: You are now ready to build the payload. Generate the payload by clicking the
    **Attack** button at the bottom.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你已经准备好构建有效载荷。点击底部的**攻击**按钮生成有效载荷。
- en: '![Figure 11.57 – Attack mode and payload created](image/B21173_11_057.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.57 – 攻击模式和有效载荷已创建](image/B21173_11_057.jpg)'
- en: Figure 11.57 – Attack mode and payload created
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.57 – 攻击模式和有效载荷已创建
- en: 'Send the modified request to **Repeater**:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将修改后的请求发送到**Repeater**：
- en: '![Figure 11.58 – Send to Repeater](image/B21173_11_058.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.58 – 发送到 Repeater](image/B21173_11_058.jpg)'
- en: Figure 11.58 – Send to Repeater
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.58 – 发送到 Repeater
- en: 'Click the **Send** button to solve the lab:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**发送**按钮解决实验：
- en: '![Figure 11.59 – Response is 500 with exception](image/B21173_11_059.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.59 – 响应为 500，并带有异常](image/B21173_11_059.jpg)'
- en: Figure 11.59 – Response is 500 with exception
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.59 – 响应为 500，并带有异常
- en: Look more closely at the stacktrace returned in the 500 response. Notice there
    is a Java instantiation error. This message is proof of our exploit.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 更仔细地查看在 500 响应中返回的堆栈跟踪。注意到有一个 Java 实例化错误。此消息是我们利用漏洞的证据。
- en: '![Figure 11.60 – Details within the 500 response of the instantiation error](image/B21173_11_060.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.60 – 500 响应中的实例化错误详细信息](image/B21173_11_060.jpg)'
- en: Figure 11.60 – Details within the 500 response of the instantiation error
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.60 – 500 响应中的实例化错误详细信息
- en: 'Notice the congratulatory banner in the browser:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意浏览器中的恭喜横幅：
- en: '![Figure 11.61 – Congratulatory banner](image/B21173_11_061.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.61 – 恭喜横幅](image/B21173_11_061.jpg)'
- en: Figure 11.61 – Congratulatory banner
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.61 – 恭喜横幅
- en: How it works...
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: In cases where application code receives user input directly into an object
    without performing sanitization on such input, an attacker has the opportunity
    to provide arbitrary commands. The input is then serialized and run on the operating
    system where the application resides, creating a possible attack vector for remote
    code execution.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序代码直接接收用户输入并未对这些输入进行清理的情况下，攻击者可以提供任意命令。然后，该输入被序列化并在应用程序所在的操作系统上运行，从而为远程代码执行创造了攻击向量。
- en: Hacking GraphQL using Burp Suite
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Burp Suite 进行 GraphQL 攻击
- en: GraphQL is a very commonly used API query language. The main difference between
    using REST APIs and GraphQL is the structure of the call. REST API calls require
    multiple calls to accomplish a task, whereas GraphQL makes a single call containing
    the entire schema structure. The GraphQL parser determines which components of
    the schema require lookups or changes. In this recipe, we will learn how to leverage
    a Burp Suite extension called **GraphQL Raider** to read, mutate, and attack GraphQL
    schemas.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL 是一种非常常用的 API 查询语言。使用 REST API 和 GraphQL 之间的主要区别在于调用的结构。REST API 调用需要多次请求才能完成任务，而
    GraphQL 通过一次请求包含整个架构结构。GraphQL 解析器确定架构中需要查找或修改的组件。在本教程中，我们将学习如何利用名为 **GraphQL
    Raider** 的 Burp Suite 扩展来读取、修改和攻击 GraphQL 架构。
- en: Getting ready
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The **GraphQL Raider** extension can be found in **BApp Store**. We will download
    and install the extension within our Burp Suite instance. Then, we’ll see how
    to use the extension against GraphQL endpoints.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '**GraphQL Raider** 扩展可以在**BApp Store**中找到。我们将在我们的 Burp Suite 实例中下载并安装此扩展。然后，我们将学习如何在
    GraphQL 端点上使用此扩展。'
- en: How to do it...
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Inside Burp Suite **Extensions** | **BApp Store**, select **GraphQL Raider**
    and click the **Install** button.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Burp Suite 的 **扩展** | **BApp Store** 中，选择 **GraphQL Raider** 并点击**安装**按钮。
- en: '![Figure 11.62 – The GraphQL Raider extension](image/B21173_11_062.jpg)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.62 – GraphQL Raider 扩展](image/B21173_11_062.jpg)'
- en: Figure 11.62 – The GraphQL Raider extension
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.62 – GraphQL Raider 扩展
- en: We will use the free GraphQL endpoint with Spacex data available online. In
    **Proxy** | **Intercept**, click the **Open browser** button to open the Burp
    Suite browser.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用包含在线 Spacex 数据的免费 GraphQL 端点。在**代理** | **拦截**中，点击**打开浏览器**按钮以打开 Burp Suite
    浏览器。
- en: 'Browse to the following URL: [https://spacex-production.up.railway.app/](B21173_11.xhtml#_idTextAnchor676).'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到以下网址：[https://spacex-production.up.railway.app/](B21173_11.xhtml#_idTextAnchor676)。
- en: '![Figure 11.63 – GraphQL application online](image/B21173_11_063.jpg)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.63 – 在线 GraphQL 应用](image/B21173_11_063.jpg)'
- en: Figure 11.63 – GraphQL application online
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.63 – 在线 GraphQL 应用
- en: 'Go ahead and perform the sample query by clicking the **ExampleQuery** button
    within the Burp Suite browser:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 Burp Suite 浏览器中的**ExampleQuery**按钮，执行示例查询：
- en: '![Figure 11.64 – Run ExampleQuery](image/B21173_11_064.jpg)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.64 – 运行 ExampleQuery](image/B21173_11_064.jpg)'
- en: Figure 11.64 – Run ExampleQuery
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.64 – 运行 ExampleQuery
- en: Look for **Request** and **Response** in the Burp Suite **Proxy** | **HTTP**
    **history** table.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Burp Suite 的 **代理** | **HTTP** **历史记录**表中查找**请求**和**响应**。
- en: '![Figure 11.65 – See ExampleQuery in Burp Suite](image/B21173_11_065.jpg)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.65 – 在 Burp Suite 中查看 ExampleQuery](image/B21173_11_065.jpg)'
- en: Figure 11.65 – See ExampleQuery in Burp Suite
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.65 – 在 Burp Suite 中查看 ExampleQuery
- en: Right-click on **Request** and send it to **Repeater**.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击**请求**并发送到**Repeater**。
- en: '![Figure 11.66 – Send to Repeater](image/B21173_11_066.jpg)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.66 – 发送到 Repeater](image/B21173_11_066.jpg)'
- en: Figure 11.66 – Send to Repeater
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.66 – 发送到 Repeater
- en: Inside **Repeater**, look for the **GraphQL** label or a downward-pointing caret
    just after the **Pretty**, **Raw**, and **Hex** labels. Notice the extension provides
    a clearer query to read along with variables and the **Injection** **Points**
    tab.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Repeater** 中，查找 **GraphQL** 标签，或者在 **Pretty**、**Raw** 和 **Hex** 标签后面找到一个向下指的箭头。注意，扩展提供了更清晰的查询，配有变量和
    **Injection** **Points** 标签。
- en: '![Figure 11.67 – Use the GraphQL extension within Repeater](image/B21173_11_067.jpg)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.67 – 在 Repeater 中使用 GraphQL 扩展](image/B21173_11_067.jpg)'
- en: Figure 11.67 – Use the GraphQL extension within Repeater
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.67 – 在 Repeater 中使用 GraphQL 扩展
- en: 'In the **Repeater** | **GraphQL** tab, replace **ExampleQuery** with the following
    **IntrospectionQuery** to see the entire schema:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Repeater** | **GraphQL** 标签页中，将 **ExampleQuery** 替换为以下 **IntrospectionQuery**，以查看整个架构：
- en: '[PRE2]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Before clicking **Send**, return to the **Raw** tab inside **Repeater** and
    replace **ExampleQuery** with **IntrospectionQuery** for **operationName**. Note
    that if you do not make this change, the query will not succeed.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在点击 **Send** 之前，返回到 **Repeater** 中的 **Raw** 标签页，并将 **ExampleQuery** 替换为 **IntrospectionQuery**
    作为 **operationName**。请注意，如果不进行此更改，查询将不会成功。
- en: '![Figure 11.68 – Change operationName to “IntrospectionQuery”](image/B21173_11_068.jpg)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.68 – 将 operationName 更改为“IntrospectionQuery”](image/B21173_11_068.jpg)'
- en: Figure 11.68 – Change operationName to “IntrospectionQuery”
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.68 – 将 operationName 更改为“IntrospectionQuery”
- en: 'Click **Send** and now you can see the entire schema:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Send**，现在你可以看到整个架构：
- en: '![Figure 11.69 – See the introspection query and results](image/B21173_11_069.jpg)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.69 – 查看 introspection 查询和结果](image/B21173_11_069.jpg)'
- en: Figure 11.69 – See the introspection query and results
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.69 – 查看 introspection 查询和结果
- en: How it works...
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Using the GraphQL extension allows you to craft queries and mutations inside
    Burp Suite to test for vulnerabilities against target applications supporting
    GraphQL. The extension provides a much clearer view of requests, in contrast to
    the standard HTTP **Pretty** or **Raw** request view.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 GraphQL 扩展可以让你在 Burp Suite 中构建查询和变更，以测试针对支持 GraphQL 的目标应用程序的漏洞。与标准的 HTTP
    **Pretty** 或 **Raw** 请求视图相比，扩展提供了更清晰的请求视图。
- en: There’s more...
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'GraphQL is a vast subject with many tutorials and supporting documentation.
    We recommend starting your research here: [https://graphql.org/](B21173_11.xhtml#_idTextAnchor673).'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL 是一个广泛的主题，有许多教程和支持文档。我们建议你从这里开始你的研究：[https://graphql.org/](B21173_11.xhtml#_idTextAnchor673)。
