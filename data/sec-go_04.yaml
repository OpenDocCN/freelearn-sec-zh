- en: Forensics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 法医学
- en: Forensics is the gathering of evidence to detect a crime. Digital forensics
    refers simply looking for digital evidence and includes locating anomalous files
    that may contain relevant information, searching for hidden data, figuring out
    when a file was last modified, figuring out who sent an email, hashing files,
    gathering information about an attacking IP, or capturing network communication.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 法医学是收集证据以侦测犯罪的过程。数字法医学指的就是寻找数字证据，包括定位可能包含相关信息的异常文件、寻找隐藏数据、确定文件最后修改时间、确定谁发送了邮件、对文件进行哈希处理、收集有关攻击
    IP 的信息，或捕获网络通信。
- en: In addition to forensics, this chapter will cover a basic example of steganography—the
    hiding of archives inside images. Steganography is a trick employed to hide information
    within other information so that it is not easily found.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 除了法医学，本章还将介绍一个简单的隐写术示例——将档案隐藏在图像中。隐写术是一种将信息隐藏在其他信息中的技巧，使其不易被发现。
- en: Hashing, while relevant to forensics, is covered in [Chapter 6](f68073f0-8cc8-40b5-af0e-795ce30e5271.xhtml),
    *Cryptography*, and packet capturing is covered in [Chapter 5](e69a87b2-99ff-47cf-a935-4ef39304ed15.xhtml), *Packet
    Capturing and Injection*. You will find examples that could be useful to forensic
    investigators throughout all the chapters this book.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希处理与法医学相关，详细内容见[第六章](f68073f0-8cc8-40b5-af0e-795ce30e5271.xhtml)，*密码学*，而数据包捕获则在[第五章](e69a87b2-99ff-47cf-a935-4ef39304ed15.xhtml)，*数据包捕获与注入*中进行讲解。你将在本书的各章中找到可能对法医调查员有用的示例。
- en: 'In this chapter you, will learn about the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你将学习以下内容：
- en: File forensics
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件法医学
- en: Getting basic file information
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取基本文件信息
- en: Finding large files
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找大文件
- en: Finding recently changed files
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找最近修改的文件
- en: Reading the boot sector of a disk
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取磁盘的启动扇区
- en: Network forensics
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络法医学
- en: Looking up hostnames and IP addresses
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找主机名和 IP 地址
- en: Looking up MX mail records
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找 MX 邮件记录
- en: Looking up nameservers for a host
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找主机的名称服务器
- en: Steganography
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐写术
- en: Hiding an archive in an image
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将档案隐藏在图像中
- en: Detecting an archive hidden in an image
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测隐藏在图像中的档案
- en: Generating a random image
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成随机图像
- en: Creating a ZIP archive
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个 ZIP 压缩档案
- en: Files
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件
- en: File forensics is important because an attacker may leave behind traces, and
    the evidence needs to be gathered before any more changes are made or any information
    is lost. This includes determining who owns a file, when it was last changed,
    who has access to it, and seeing whether there is any hidden data in a file.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 文件法医学很重要，因为攻击者可能会留下痕迹，需要在做出更多更改或丢失信息之前收集证据。这包括确定文件的所有者、文件最后修改时间、谁有权限访问文件，并检查文件中是否有隐藏的数据。
- en: Getting file information
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取文件信息
- en: Let's begin with something simple. This program will print the information about
    a file, namely when it was last modified, who owns it, how many bytes it is, and
    what its permissions are. This will also serve as a good test to make sure that
    your Go development environment is set up properly.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一些简单的内容开始。本程序将打印出关于文件的信息，即文件最后修改时间、文件所有者、文件大小以及文件权限。这也将作为一个良好的测试，确保你的 Go
    开发环境已正确设置。
- en: If an investigator has found an anomalous file, the first thing to do is to
    check all the basic metadata. This will give information about who owns the file,
    what groups have access to it, when it was last modified, whether it is an executable
    file, and how large it is. All of this information is potentially useful.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果调查员发现了异常文件，首先需要检查所有基本的元数据。这将提供关于文件所有者、哪些群组可以访问该文件、文件最后修改时间、是否是可执行文件以及文件的大小等信息。这些信息可能都非常有用。
- en: The primary function we'll use is `os.Stat()`. This returns a `FileInfo` struct,
    which we will print. We have to import the `os` package at the beginning to call
    `os.Stat()`. Two variables are returned from `os.Stat()`, which is different than
    many languages that only allow one return variable. You can ignore a return variable,
    such as an error you want to ignore, using an underscore (`_`) symbol in place
    of a variable name.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的主要函数是`os.Stat()`。它返回一个`FileInfo`结构体，我们将打印出来。为了调用`os.Stat()`，我们需要在开始时导入`os`包。`os.Stat()`会返回两个变量，这与许多只允许返回一个变量的语言不同。如果你想忽略某个返回变量（如错误），可以使用下划线（`_`）符号代替变量名。
- en: The `fmt` (short for format) package we import contains typical printing functions
    such as `fmt.Println()` and `fmt.Printf()`. The `log` package contains `log.Printf()`
    and `log.Println()`. The difference between `fmt` and `log` is that `log` prints
    out a `timestamp` before the message, and it is thread safe.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们导入的`fmt`（格式化输出的缩写）包包含了典型的打印函数，如`fmt.Println()`和`fmt.Printf()`。`log`包包含了`log.Printf()`和`log.Println()`。`fmt`和`log`的区别在于，`log`在消息前会打印一个`时间戳`，并且是线程安全的。
- en: The `log` package has one function that is not available in `fmt`, and that
    is `log.Fatal()`, which calls `os.Exit(1)` immediately after printing. The `log.Fatal()`
    function is useful for handling certain error conditions by printing the error
    and quitting. Use the `fmt print` function if you want clean output with full
    control. Use the `log` package's print functions if it will be useful to have
    timestamp on each message. When gathering forensic clues, it is important to log
    what time you performed each action.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`log`包有一个`fmt`包没有的函数，即`log.Fatal()`，它在打印信息后会立即调用`os.Exit(1)`退出程序。`log.Fatal()`函数对于处理某些错误条件很有用，它会打印错误信息并退出。如果你想要干净的输出并完全控制格式，请使用`fmt`的打印函数。如果你需要在每条消息中附带时间戳，可以使用`log`包的打印函数。在收集法医线索时，记录下每个操作的时间是非常重要的。'
- en: 'In this example, the variables are defined in their own section before the
    `main` function. Variables at this scope are available to the whole package. This
    means that every function is in the same file, and the other files are in the
    same directory with the same package declaration. This method of defining variables
    is just to show that this is possible with Go. It is one of Pascal''s influences
    on the language, along with the `:=` operator. It can be nice to have all the
    variables defined at the top with the data type explicitly listed. To save space
    in later examples, we will take advantage of the *declare and assign* operator
    or the `:=` symbol. This is convenient when writing code because you don''t have
    to declare the variable type first. It infers the data type on compilation. When
    reading source code, however, having the variable types declared explicitly can
    help the reader navigate the code. We could have also placed the whole `var` declaration
    inside the `main` function to limit the scope further:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，变量在`main`函数之前的独立部分中定义。在这个作用域内的变量对于整个包都是可用的。这意味着每个函数都在同一个文件中，其他文件也在相同目录下，并使用相同的包声明。这个定义变量的方法只是为了展示Go语言是如何实现的，它是Pascal语言对Go的影响之一，此外还有`:=`操作符。将所有变量在顶部明确列出并标明数据类型是很方便的。为了在后面的例子中节省空间，我们将使用*声明并赋值*操作符或`:=`符号。这在编写代码时非常方便，因为你不需要先声明变量类型，编译时会自动推断数据类型。然而，在阅读源代码时，明确声明变量类型有助于读者理解代码。我们也可以将整个`var`声明放入`main`函数内，以进一步限制作用域：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Finding the largest files
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找最大文件
- en: Large files are always prime suspects when investigating. Large database dumps,
    password dumps, rainbow tables, credit card caches, stolen intellectual property,
    and other data are often stored in one large archive that is easy to spot if you
    have the right tools. Also, it would be helpful to find exceptionally large image
    or video files that may have steganographically-hidden information inside. Steganography
    is covered further in this chapter.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在调查过程中，大文件通常是嫌疑的首选对象。大型数据库转储、密码转储、彩虹表、信用卡缓存、被盗的知识产权以及其他数据常常被存储在一个大型档案中，如果你有合适的工具，这类文件很容易被发现。此外，寻找异常大的图像或视频文件也很有帮助，因为它们可能隐藏有通过隐写术加密的信息。隐写术将在本章进一步讨论。
- en: 'This program will search in a directory and all subdirectories for all files
    and sort them by file size. We''ll explore the initial directory with `ioutil.ReadDir()`
    to get the contents as a slice of the `os.FileInfo` structs. To check whether
    a file is a directory, we''ll use `os.IsDir()`. We''ll then create a custom data
    struct named `FileNode` to store the information we need. We use a linked list
    to store the file information. Before inserting an element into the list, we''ll
    go through it to find the proper place in order to keep the list sorted correctly.
    Note that running the program on a directory such as `/` may take a very long
    time. Try a more specific directory such as your `home` folder:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序将在一个目录及其所有子目录中搜索所有文件，并按文件大小排序。我们将使用`ioutil.ReadDir()`来探索初始目录，以获取作为`os.FileInfo`结构体切片的内容。为了检查文件是否是目录，我们将使用`os.IsDir()`。然后我们将创建一个名为`FileNode`的自定义数据结构来存储所需的信息。我们使用链表来存储文件信息。在将元素插入链表之前，我们会遍历它，找到合适的位置，以保持链表的正确排序。请注意，在像`/`这样的目录上运行程序可能会花费很长时间。尝试使用更具体的目录，比如你的`home`文件夹：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Finding recently modified files
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找最近修改的文件
- en: When examining a victim machine forensically, one of the first things you can
    do is to look for files that have been recently altered. It could give you clues
    as to where an attacker was looking, what settings they modified, or what their
    motive was.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在法医检查受害者机器时，首先可以做的一件事是查找最近被修改的文件。这可能会为你提供关于攻击者查看了哪些地方、修改了哪些设置，或他们的动机是什么的线索。
- en: However, if an investigator is looking through an attacker's machine, then the
    goal is slightly different. Recently accessed files may give clues as to what
    tools they were using to attack where they might be hiding data, or what software
    they use.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果调查员正在检查攻击者的机器，那么目标会有所不同。最近访问的文件可能会提供线索，告诉你攻击者使用了哪些工具，在哪些地方可能隐藏了数据，或者他们使用了什么软件。
- en: 'The following example will search a directory and subdirectories to find all
    the files and sort them by the last modified time. This example is very much like
    the previous one except that the sorting is done by comparing timestamps using
    the `time.Time.Before()` function:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将搜索一个目录及其子目录，找到所有文件，并按最后修改时间排序。这个示例与前一个非常相似，不同之处在于排序是通过使用`time.Time.Before()`函数比较时间戳来完成的：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Reading the boot sector
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取引导扇区
- en: This program will read the first 512 bytes of a disk and print the results as
    decimal values, hex, and a string. The `io.ReadFull()` function is like a normal
    read, but it ensures that the byte slice you provide with for data is completely
    filled. It returns an error if there are not enough bytes in the file to fill
    the byte slice.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序将读取磁盘的前512字节，并将结果以十进制值、十六进制和字符串的形式打印出来。`io.ReadFull()`函数类似于普通的读取操作，但它确保你提供的数据字节切片被完全填充。如果文件中的字节不足以填充字节切片，它会返回一个错误。
- en: A practical use for this is to check a machine's boot sector to see if it has
    been modified. Rootkits and malware may hijack the boot process by modifying the
    boot sector. You can manually inspect it for anything strange or compare it to
    a known good version. Perhaps a backup image of the machine or a fresh install
    can be compared to see if anything has changed.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的实际应用是检查机器的引导扇区，看看它是否被修改。Rootkit和恶意软件可能通过修改引导扇区劫持引导过程。你可以手动检查其中是否有任何异常，或者将其与已知的良好版本进行比较。也许可以将机器的备份镜像或全新安装的版本与其进行比较，看看是否有所变化。
- en: Note that you can technically pass it any filename and not specifically a disk,
    since everything in Linux is treated as a file. If you pass it the name of the
    device directly, such as `/dev/sda`, it will read the first `512` bytes of the
    disk, which is the boot sector. The primary disk device is typically `/dev/sda`,
    but may also be `/dev/sdb` or `/dev/sdc.` Use `mount` or the `df` tools to get
    more information about what your disks are named. You will need to run the application
    with `sudo` in order to have the permission to read the disk device directly.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，技术上你可以传递任何文件名，而不仅仅是磁盘，因为在 Linux 中一切都被视为文件。如果你直接传递设备的名称，例如`/dev/sda`，它将读取磁盘的前`512`字节，即引导扇区。主要的磁盘设备通常是`/dev/sda`，但也可能是`/dev/sdb`或`/dev/sdc`。使用`mount`或`df`工具可以获取更多关于磁盘名称的信息。你需要以`sudo`身份运行该应用程序，以便有权限直接读取磁盘设备。
- en: 'For more information on files, input, and output, look into the `os`, `bufio`,
    and `io` packages, as demonstrated in the following code block:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 有关文件、输入和输出的更多信息，请参考`os`、`bufio`和`io`包，如以下代码块所示：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Steganography
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 隐写术
- en: Steganography is the practice of hiding a message inside a nonsecret message.
    It is not to be confused with stenography, the practice of taking diction, like
    a court reporter who transcribes the spoken words during a trial. Steganography
    goes back in history a long time, and an old-fashioned example is sewing in morse
    code messages in the stitching of clothing items.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 隐写术是将信息隐藏在非秘密信息中的技术。不要与速记术混淆，速记术是记录口述内容的技术，比如法庭记录员在庭审过程中将口头发言转录下来。隐写术有着悠久的历史，一个古老的例子是将摩尔斯电码信息缝在衣物的缝线上。
- en: In the digital world, people can hide any type of binary data inside an image,
    audio, or video file. The quality of the original may or may not suffer from this
    process. Some images can maintain their original integrity fully, but they have
    extra data hidden from plain sight in the form of a `.zip` or `.rar` archive.
    Some steganography algorithms are complex and hide the original binary data in
    the single lowest bit of each byte, only denigrating the original quality slightly.
    Other steganography algorithms are simpler and just combine an image file and
    an archive into a single file. We will look at how to hide an archive inside an
    image and also how to detect hidden archives.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在数字世界中，人们可以将任何类型的二进制数据隐藏在图像、音频或视频文件中。这个过程可能会影响原始文件的质量，也可能不会。一些图像可以完全保持其原始完整性，但它们在表面下隐藏了额外的数据，形式是一个`.zip`或`.rar`压缩包。有些隐写算法比较复杂，将原始二进制数据隐藏在每个字节的最低位，只会略微降低原始质量。其他隐写算法比较简单，仅仅是将图像文件和压缩包合并成一个文件。我们将看看如何将压缩包隐藏在图像中，以及如何检测隐藏的压缩包。
- en: Generating an image with random noise
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成带有随机噪声的图像
- en: 'This program will create a JPEG image with every pixel set to a random color.
    It is a simple program so we have just a jpeg image available to work with. The
    Go standard library comes with `jpeg`, `gif`, and `png` packages. The interface
    to all different image types is the same, so swapping from a `jpeg` to a `gif`
    or `png` package is very easy:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序将创建一张每个像素都设置为随机颜色的JPEG图片。这是一个简单的程序，所以我们只有一个JPEG图片可以处理。Go标准库提供了`jpeg`、`gif`和`png`包。所有不同图像类型的接口是相同的，因此从`jpeg`切换到`gif`或`png`包非常简单：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Creating a ZIP archive
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建ZIP压缩包
- en: 'This program will create a ZIP archive, so we have an archive to use with our
    steganography experiments. The Go standard library has a `zip` package, but it
    also supports TAR archives with the `tar` package. This example generates a ZIP
    file with two files: `test.txt` and `test2.txt`. To keep it simple, the contents
    of each file is hard-coded as a string in this source code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序将创建一个ZIP压缩包，以便我们进行隐写术实验。Go标准库提供了一个`zip`包，但它也支持通过`tar`包处理TAR压缩包。这个示例生成一个包含两个文件的ZIP文件：`test.txt`和`test2.txt`。为了简化起见，每个文件的内容在源代码中都作为硬编码字符串给出：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Creating a steganographic image archive
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建隐写图像压缩包
- en: Now that we have an image and a ZIP archive, we can combine them together to
    "hide" the archive within the image. This is probably the most primitive form
    of steganography. A more advanced way would be to split up the file byte by byte,
    store the information in the low bits of the image, use a special program to extract
    the data from the image, and then reconstruct the original data. This example
    is nice because we can easily test and verify if it still loads as an image and
    still behaves like a ZIP archive.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个图像和一个ZIP压缩包，我们可以将它们结合起来，将压缩包“隐藏”在图像内。这可能是最原始的隐写术形式。更高级的方法是将文件逐字节拆分，将信息存储在图像的低位中，使用特定程序从图像中提取数据，然后重建原始数据。这个示例非常好，因为我们可以轻松地测试和验证它是否仍然作为图片加载并且仍然像ZIP压缩包一样工作。
- en: 'The following example will take a JPEG image and a ZIP archive and combine
    them to create a hidden archive. The file will retain the `.jpg` extension and
    will still function and look like a normal image. However, the file also still
    works as a ZIP archive. You can unzip the `.jpg` file and the archived files will
    be extracted:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将使用一张JPEG图片和一个ZIP压缩包，并将它们结合起来创建一个隐藏的压缩包。文件将保留`.jpg`扩展名，仍然会像普通图片一样显示和运作。但是，该文件仍然可以作为ZIP压缩包使用。你可以解压`.jpg`文件，压缩包内的文件将被提取出来：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Detecting a ZIP archive in a JPEG image
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在JPEG图像中检测ZIP压缩包
- en: 'If data is hidden using the technique from the previous example, it can be
    detected by searching for the ZIP file signature in the image. A file may have
    a `.jpg` extension and still load properly in a photo viewer, but it may still
    have a ZIP archive stored in the file. The following program searches through
    a file and looks for a ZIP file signature. We can run it against the file created
    in the previous example:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用前面示例中的技术隐藏了数据，可以通过在图像中搜索ZIP文件签名来检测。一个文件可能有`.jpg`扩展名，仍然能够在照片查看器中正确加载，但它仍可能包含一个ZIP存档。以下程序会遍历文件并查找ZIP文件签名。我们可以使用它检查前一个示例中创建的文件：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Network
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络
- en: Sometimes, a strange IP will show up in logs, and you will need to find out
    more information, or there can be a domain name that you need to geolocate based
    on an IP address. These examples demonstrate gathering information about hosts.
    Packet capturing is also an integral part of network forensic investigations,
    but there is so much to say about packet capturing, so [Chapter 5](e69a87b2-99ff-47cf-a935-4ef39304ed15.xhtml),
    *Packet Capturing and Injection* dedicated just to packet capturing and injection.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，日志中会出现一个奇怪的IP地址，您需要找出更多信息，或者可能有一个域名，您需要根据IP地址来进行地理定位。这些示例展示了如何收集主机信息。数据包捕获也是网络取证调查的一个重要部分，但关于数据包捕获有很多可以讨论的内容，因此，[第5章](e69a87b2-99ff-47cf-a935-4ef39304ed15.xhtml)，*数据包捕获与注入*专门讲解数据包捕获和注入。
- en: Looking up a hostname from an IP address
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从IP地址查找主机名
- en: This program will take an IP address and figure out what the hostnames are.
    The `net.parseIP()` function is used to validate the IP address provided, and
    `net.LookupAddr()` does the real work of figuring out what the hostname is.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序将接受一个IP地址，并找出对应的主机名。`net.parseIP()`函数用于验证提供的IP地址，而`net.LookupAddr()`执行实际的工作，找出主机名是什么。
- en: 'By default, the pure Go resolver is used. The resolver can be overridden by
    setting the `netdns` value of the `GODEBUG` environment variable. Set the value
    of `GODEBUG` to `go` or `cgo`. You can do this in Linux with the following shell
    commands:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，使用的是纯Go解析器。可以通过设置`GODEBUG`环境变量中的`netdns`值来覆盖解析器。将`GODEBUG`的值设置为`go`或`cgo`。在Linux中，您可以使用以下Shell命令进行设置：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here is the code for the program:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是程序的代码：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Looking up IP addresses from a hostname
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从主机名查找IP地址
- en: 'The following example takes a hostname and returns the IP address. It is very
    similar to the previous example, but it is in reverse. The `net.LookupHost()`
    function does the heavy lifting:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例接受一个主机名并返回IP地址。它与之前的示例非常相似，但顺序相反。`net.LookupHost()`函数承担了主要工作：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Looking up MX records
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找MX记录
- en: 'This program will take a domain name and return the MX records. MX records,
    or mail exchanger records, are DNS records that point to the mail server. For
    example, the MX server of [https://www.devdungeon.com/](https://www.devdungeon.com/)
    is `mail.devdungeon.com`. The `net.LookupMX()` function performs this lookup and
    returns a slice of the `net.MX` structs:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序将接受一个域名并返回MX记录。MX记录（邮件交换记录）是指向邮件服务器的DNS记录。例如，[https://www.devdungeon.com/](https://www.devdungeon.com/)的MX服务器是`mail.devdungeon.com`。`net.LookupMX()`函数执行此查找并返回一个`net.MX`结构体切片：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Looking up nameservers for a hostname
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找主机名的DNS服务器
- en: 'This program will find nameservers associated with a given hostname. The primary
    function here is `net.LookupNS()`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序将查找与给定主机名相关联的DNS服务器。这里的主要功能是`net.LookupNS()`：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Summary
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: After reading this chapter, you should now have a basic understanding of the
    goal of digital forensic investigations. Much more could be said on each of these
    topics, and forensics is a specialty field that warrants its own book, much less
    a chapter.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，您应该对数字取证调查的目标有了基本了解。每个主题都可以深入讨论，取证是一个专业领域，值得拥有自己的书籍，更不用说是一个章节了。
- en: Use the examples you have read as a starting place to think about what kind
    of information you would look for if you were presented a machine that had been
    compromised, and your goal was to figure out how the attacker got in, what time
    it happened, what they accessed, what they modified, what their motive was, how
    much data was exfiltrated, and anything else you can find to identify who the
    actor was or what actions were taken on the system.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您阅读过的示例作为起点，思考一下如果您面对一台被攻破的机器，并且您的目标是找出攻击者如何入侵、发生的时间、他们访问了什么、修改了什么、动机是什么、泄露了多少数据以及您能够找到的其他信息，以便识别攻击者身份或其在系统上采取的行动。
- en: A skilled adversary will make every attempt to cover their tracks and avoid
    forensic detection. For this reason, it is important to stay up to date on the
    latest tools and trends being used so that you know what tricks and clues to look
    for when investigating.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一个熟练的对手会尽力掩盖自己的踪迹并避免被取证检测。因此，保持对最新工具和趋势的了解非常重要，这样在调查时你才能知道应该寻找哪些技巧和线索。
- en: These examples can be expanded upon, automated, and integrated into other applications
    that perform forensic searches on a larger scale. With the scalability of Go,
    a tool could easily be crafted to search an entire filesystem or network in an
    efficient manner.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这些示例可以扩展、自动化，并集成到其他执行大规模取证搜索的应用程序中。借助Go语言的可扩展性，可以轻松创建一个工具，以高效的方式搜索整个文件系统或网络。
- en: In the next chapter, we will look at packet capturing with Go. We'll start with
    the basics such as getting a list of network devices and dumping network traffic
    to a file. Then we will talk about using filters to look for specific network
    traffic. In addition, we will look at more advanced techniques for decoding and
    inspecting packets using Go interfaces. We will also cover creating custom packet
    layers and forging and sending packets from a network card, allowing you to send
    arbitrary packets.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将讨论如何使用Go进行数据包捕获。我们将从基本的内容开始，比如获取网络设备列表并将网络流量转储到文件中。接着，我们将讨论如何使用过滤器来查找特定的网络流量。此外，我们还将探讨使用Go接口解码和检查数据包的更高级技巧。我们还将介绍如何创建自定义数据包层以及从网络卡伪造和发送数据包，从而允许你发送任意数据包。
