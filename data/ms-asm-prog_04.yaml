- en: Memory Addressing Modes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存寻址模式
- en: Thus far, we have gained some acquaintance with certain basic aspects of Assembly
    programming. We have covered the Intel Architecture basics, setting up the development
    environment of your choice, and the **instruction set architecture** (**ISA**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经对汇编编程的某些基本方面有所了解。我们已经覆盖了英特尔架构的基础，设置了您选择的开发环境，并且了解了 **指令集架构**（**ISA**）。
- en: We know what operations we are able to perform over different types of data,
    but all this is of very little value as long as we don't know how to retrieve
    and store data. Of course, we are familiar with the `mov` instruction, but without
    knowing how to address the data in memory, this instruction is quite useless.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道可以对不同类型的数据执行哪些操作，但只要不知道如何获取和存储数据，这些操作几乎没有任何价值。当然，我们熟悉 `mov` 指令，但如果不知道如何在内存中寻址数据，这条指令就毫无用处。
- en: 'Fortunately for us, Intel provides a very flexible mechanism for addressing
    data or code in memory. In this chapter, we will cover the following modes of
    memory addressing:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，英特尔为我们提供了一种非常灵活的内存寻址机制。在本章中，我们将介绍以下几种内存寻址模式：
- en: Sequential addressing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顺序寻址
- en: Direct addressing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接寻址
- en: Via an immediate address
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过立即数地址
- en: Via an address stored in a register
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过存储在寄存器中的地址
- en: Indirect addressing
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 间接寻址
- en: Via an address pointed by immediate
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过一个由立即数指向的地址
- en: Via an address pointed by a register
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过一个由寄存器指向的地址
- en: Base relative addressing
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础相对寻址
- en: Base + index
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础 + 索引
- en: Base + index * scale
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础 + 索引 * 比例
- en: IP/RIP-based addressing
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于 IP/RIP 的寻址
- en: Far pointers
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远指针
- en: The preceding categorization has nothing to do with the way Intel categorizes
    addressing modes as we are not paying attention to address encoding within an
    instruction. Knowing the ways to address memory and being able to use them appropriately
    is what we are after. It is worth mentioning that the preceding list represents
    addressing modes for both data and code. Additionally, we will use 64-bit examples
    in this chapter in order to be able to cover all of the modes listed here.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 上述分类与英特尔如何分类寻址模式无关，因为我们并不关注指令内的地址编码。我们关注的是如何寻址内存，并能恰当地使用它们。值得一提的是，前面的列表代表了数据和代码的寻址模式。此外，本章将使用
    64 位示例，以便能够涵盖这里列出的所有模式。
- en: Addressing code
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 寻址代码
- en: When we say "addressing code," we mean the way CPU interprets the address of
    the next instruction to be executed, and that depends on the logic of the code
    itself, which tells the processor whether it should execute instructions sequentially
    or jump to another location.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们说“寻址代码”时，我们指的是 CPU 解析下一条待执行指令的地址的方式，这取决于代码本身的逻辑，它告诉处理器是否应该顺序执行指令，或者跳转到其他位置。
- en: Sequential addressing
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 顺序寻址
- en: The default addressing mode for code is **sequential addressing**, when the
    **instruction pointer** (**IP**) register (IP for 32-bit systems and RIP for 64-bit)
    contains the address of the instruction following the one being currently executed.
    There is nothing we need to do in order to put processor into this mode. The instruction
    pointer is set to the next instruction automatically by the CPU.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的默认寻址模式是 **顺序寻址**，当 **指令指针**（**IP**，32 位系统为 IP，64 位为 RIP）寄存器包含当前执行的指令后面的指令地址时。我们不需要做任何事情来将处理器设置为此模式。指令指针会由
    CPU 自动设置为下一条指令的地址。
- en: 'For example, when executing the first instruction of the following code, the
    IP is already set to the address of the next one, labeled as `next_instruction`.
    As the first instruction is `call`, which, as we know, causes the return address
    to be pushed onto the stack--which, in this particular case, is also the address
    of `next_instruction`--the second one (the `pop` instruction) retrieves the value
    of the return address from the stack:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在执行下面代码的第一条指令时，IP 已经设置为下一条指令的地址，标记为 `next_instruction`。由于第一条指令是 `call`，我们知道它会将返回地址压入堆栈——在这个特定情况下，返回地址也是
    `next_instruction` 的地址——第二条指令（`pop` 指令）从堆栈中取回返回地址的值：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding example (or its variations) could be met in the code of different
    packers and protectors very often and is also used by shellcode writers as a mean
    of creation of position-independent code, where addresses of procedures and variables
    can be calculated by adding their offsets from `next_instruction` to the address
    of `next_instruction`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子（或其变种）经常出现在不同的打包器和保护器的代码中，也被shellcode编写者作为创建位置无关代码的一种手段，在这种代码中，过程和变量的地址可以通过将它们的偏移量从`next_instruction`加到`next_instruction`的地址来计算。
- en: Direct addressing
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直接寻址
- en: 'The term *direct addressing* implies the address to be directly included in
    the instruction is an operand. One of the examples may be a *far call/jmp*. Most
    of Windows, executables are loaded at address 0x00400000 with the first section,
    which is by default the code section being loaded at address `0x00401000`. For
    the sake of the example, let us imagine that we have an executable which, we are
    sure, is loaded at the aforementioned address, with its code section being located
    at offset 0x1000 from the base address (the address our executable is loaded at),
    and we have some sort of a special code right in the beginning of the first section.
    Let it be an error handler that would terminate the execution of our program in
    the right way. In such a case, we may direct the execution flow to that code by
    using either a far call or a far jump:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*直接寻址*一词意味着指令中直接包含的地址作为操作数。一个例子可能是 *远程调用/jmp*。大多数Windows可执行文件被加载在地址0x00400000，并且第一个部分（默认为代码部分）被加载在地址`0x00401000`。为了举个例子，假设我们有一个可执行文件，我们确定它被加载在上述地址，其代码部分位于基地址（即我们的可执行文件加载的地址）偏移量0x1000处，并且在第一部分的开头有某种特殊代码。假设它是一个错误处理程序，用于以正确的方式终止程序执行。在这种情况下，我们可以使用远程调用或远程跳转将执行流引导到该代码：'
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'However, the more common example would be the register call, where the target
    address is stored in a register:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，更常见的例子是寄存器调用，其中目标地址存储在寄存器中：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding code, we loaded the RAX register with the address of the `my_proc`
    procedure that we want to call on the first line, and the second line is the call
    itself. Such a mode is used, for example, by compilers when translating the `switch`
    clause to Assembly, when the address of the code corresponding to a specific case
    is either loaded from the jump table or calculated using some hardcoded base (it
    may well be relocated at execution time) and an offset taken from the jump table.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们将RAX寄存器加载了我们要调用的`my_proc`过程的地址，然后第二行是实际的调用。这样的模式，例如，编译器在将`switch`语句翻译为汇编时会使用，当特定情况下对应的代码地址要么从跳转表中加载，要么使用某个硬编码的基地址（它也可能在执行时被重新定位）和从跳转表中获取的偏移量来计算。
- en: Indirect addressing
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 间接寻址
- en: 'The term "indirect addressing" is quite self-explanatory. As the name of the
    mode suggests, the address is somewhere in there, but is not used directly. Instead,
    it is referenced by a pointer, which may be a register or certain base address
    (immediate address). For example, the following code calls the same procedure
    twice. In the first call, the address is retrieved using a pointer stored in the
    `rax` register, while in the second call we use a variable that stores the address
    of the procedure we want to call:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: “间接寻址”一词相当直观。正如该模式的名称所示，地址在某个地方，但并不直接使用。相反，它是通过指针引用的，指针可以是寄存器或某个基地址（立即地址）。例如，以下代码会调用同一个过程两次。在第一次调用中，地址是通过存储在`rax`寄存器中的指针获取的，而在第二次调用中，我们使用一个存储我们要调用的过程地址的变量：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As we can see, in both cases, the operand of the `call` instruction is a pointer
    to a location in memory, where the address of the `my_proc` procedure is stored.
    This addressing mode may be used in order to harden the obfuscation of the execution
    flow of a code fragment.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，在这两种情况下，`call`指令的操作数是指向内存中存储`my_proc`过程地址的位置的指针。这个寻址模式可以用来增强代码片段执行流的混淆。
- en: RIP based addressing
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于RIP的寻址
- en: IP or RIP (depending on whether we are on a 32-bit or a 64-bit platform) means
    addressing relative to the instruction pointer register.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: IP或RIP（取决于我们是在32位还是64位平台上）表示相对于指令指针寄存器的寻址。
- en: 'The best example of this addressing mode would be the `call` and `jmp` instructions.
    For example, consider the following code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个寻址模式的最佳示例是`call`和`jmp`指令。例如，考虑以下代码：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will not contain the addresses of `my_proc` or `some_label`. Instead, the
    `call` instruction would be encoded in such a way that its parameter would be
    the offset from the following instruction to `my_proc`. As we know, the instruction
    pointer register contains the address of the following instruction at the time
    the processor executes the current one; therefore, we may surely say that the
    target address is calculated relative to the value of the instruction pointer
    (IP on 32-bit or RIP on 64-bit platform).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这不会包含 `my_proc` 或 `some_label` 的地址。相反，`call` 指令将以一种方式编码，使得它的参数是从下一条指令到 `my_proc`
    的偏移量。如我们所知，指令指针寄存器在处理器执行当前指令时包含下一条指令的地址；因此，我们可以肯定地说，目标地址是相对于指令指针的值计算的（32位平台为 IP，64位平台为
    RIP）。
- en: The same rule applies to the `jmp` instruction in the preceding example--the
    target address is calculated relative to the current value of the instruction
    pointer, which contains the address of the following instruction.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的规则适用于前面示例中的 `jmp` 指令——目标地址是相对于当前指令指针的值计算的，指令指针包含着下一条指令的地址。
- en: Addressing data
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据寻址
- en: Data addressing modes are the same as those for code addressing, with the exception
    of IP-based addressing on 32-bit systems.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 数据寻址模式与代码寻址相同，唯一的例外是32位系统上的基于IP的寻址。
- en: Sequential addressing
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 顺序寻址
- en: Yes, this is not a typo, there is sequential addressing when it comes to addressing
    data as well, although it does require certain setup.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，这并不是一个打字错误，当涉及到数据寻址时也存在顺序寻址，尽管它确实需要一些特定的设置。
- en: Remember the RSI/RDI pair (or ESI/EDI for 32-bit systems), which we have mentioned
    in both [Chapter 1](5d846cc5-9b26-43a8-9350-2a94c790da83.xhtml), *Intel Architecture*,
    and [Chapter 3](57c5447c-2cc4-4a48-9c46-6825e4a83a9c.xhtml), *Intel Instruction
    Set Architecture (ISA)*. This pair is a good example of sequential data addressing,
    where the source and/or target addresses are incremented or decremented (depending
    on the value of the direction flag) automatically after each instruction that
    uses these registers (either one of them or both) has been executed.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住 RSI/RDI 配对（或者32位系统的 ESI/EDI），我们在[第1章](5d846cc5-9b26-43a8-9350-2a94c790da83.xhtml)的
    *Intel 架构* 和[第3章](57c5447c-2cc4-4a48-9c46-6825e4a83a9c.xhtml)的 *Intel 指令集架构（ISA）*
    中都有提到。这个配对是顺序数据寻址的一个很好的例子，其中源地址和/或目标地址在每次使用这些寄存器（其中一个或两个）的指令执行后自动递增或递减（取决于方向标志的值）。
- en: 'The following example illustrates this mode by copying a text string from its
    location in the data section to a buffer allocated on the stack:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例通过将文本字符串从数据段的位置复制到栈上分配的缓冲区来说明这种模式：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As we see, the RDI register is loaded with the lowest address in the stack frame,
    the RSI register is loaded with the address of the string, and the RCX register
    is loaded with the length of the string, including the terminating zero. After
    that, each time the `rep movsb` line is executed, both the RSI and the RDI are
    sequentially incremented (the size of increment is dependent, as we remember,
    on the `movs*` variant--1 for `movsb`, 2 for `movsw`, 4 for `movsd`, and 8 for
    `movsq` on a 64-bit platform).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，RDI 寄存器被加载为栈帧中的最低地址，RSI 寄存器被加载为字符串的地址，RCX 寄存器被加载为字符串的长度，包括终止零。之后，每次执行
    `rep movsb` 行时，RSI 和 RDI 会顺序递增（递增的大小取决于我们记得的 `movs*` 变体——对于 `movsb` 为 1，`movsw`
    为 2，`movsd` 为 4，`movsq` 在64位平台上为 8）。
- en: Direct addressing
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直接寻址
- en: 'Just as in the case of code addressing, this mode implies that the address
    of either the source or destination operand (depending on the instruction and
    intention) is explicitly specified. However, unlike code addressing, we are able
    to specify the address itself, except when loading it into a register first. Consider
    the example of loading the value of a variable into a register or storing it from
    register to memory:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在代码寻址的情况下，这种模式意味着源操作数或目标操作数（取决于指令和意图）的地址被明确指定。然而，与代码寻址不同，我们能够指定地址本身，除非先将其加载到寄存器中。考虑将变量的值加载到寄存器中或从寄存器存储到内存中的示例：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In both cases, `name_of_variable` and `name_of_another_variable` are translated
    by the assembler into the addresses of those variables. Of course, we may also
    use registers for this purpose. The following example illustrates an `if…else`
    clause:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，`name_of_variable` 和 `name_of_another_variable` 都被汇编器转换为这些变量的地址。当然，我们也可以使用寄存器来实现此目的。以下示例演示了一个
    `if…else` 语句：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The first line of the code sets the `rax` register to zero, which, when the
    second line is commented out, causes the code to call `my_proc0`. On the other
    hand, if we uncomment the `inc rax` instruction, then `my_proc1` would be called
    instead.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的第一行将 `rax` 寄存器设置为零，当第二行被注释掉时，这会导致代码调用 `my_proc0`。另一方面，如果我们取消注释 `inc rax`
    指令，则会调用 `my_proc1`。
- en: Scale, index, base, and displacement
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比例、索引、基址和位移
- en: 'This is a very flexible addressing mode as it allows us to address memory in
    a manner similar to addressing data within arrays, which we are all familiar with.
    Despite the fact that this addressing mode is often referred to as scale/index/base
    (omitting the displacement part), we are not forced to make use of all of its
    elements at once, and we will further see that the scale/index/base/displacement
    scheme often gets reduced to base, base + index, or displacement + index. The
    latter two may come with or without scale. But, first of all, let''s see who is
    who and which part represents what:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种非常灵活的寻址模式，因为它允许我们以类似于在数组中寻址数据的方式来寻址内存，这是我们都熟悉的。尽管这种寻址模式通常被称为比例/索引/基址（省略了位移部分），但我们并不强制同时使用所有元素，我们将进一步看到，比例/索引/基址/位移方案常常简化为基址、基址
    + 索引或位移 + 索引。后两者可能带或不带比例。但首先，让我们看看谁是谁，哪个部分代表什么：
- en: '**Displacement**: Technically, this is an integer offset relative to a certain
    segment base (DS by default).'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**位移**：从技术上讲，这是相对于某个段基址的整数偏移（默认是 DS）。'
- en: '**Base**: This is a register containing the offset to data relative to the
    displacement, or the address of the start of the data if no displacement was specified
    (in fact, when we do not specify displacement, the assembler adds a displacement
    of zero).'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基址**：这是一个寄存器，包含相对于位移的数据偏移，或者如果没有指定位移，则包含数据起始地址（实际上，当我们未指定位移时，汇编器会自动加上一个零位移）。'
- en: '**Index**: This is a register containing the offset into the data relative
    to base + displacement. This is similar to an index or an array member.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**索引**：这是一个寄存器，包含相对于基址 + 位移的数据偏移。这类似于索引或数组成员。'
- en: '**Scale**: The CPU has no concept of type of data; it only understands sizes.
    Therefore, if we are operating on values larger than 1 byte, we have to scale
    the index value appropriately. The scale may be 1, 2, 4, or 8 for bytes, words,
    double words, or quad words, respectively. Obviously, there is no reason to explicitly
    specify the scale of 1, as it is the default value if no scale is specified.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规模**：CPU 并没有数据类型的概念；它只理解大小。因此，如果我们操作的值大于 1 字节，我们必须适当地调整索引值的比例。对于字节、字、双字和四字，比例分别为
    1、2、4 或 8。显然，没有必要明确指定比例为 1，因为如果未指定比例，它是默认值。'
- en: It is possible to explicitly specify another segment by prepending the segment
    prefix to the address (for example, `cs:` for CS, `es:` for ES, and so on).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在地址前加上段前缀显式指定另一个段（例如，`cs:` 用于 CS，`es:` 用于 ES，等等）。
- en: 'In order to calculate the final address, the processor takes the segment''s
    base address (the default is DS), adds displacement, adds base and finalizes the
    calculation by adding the index times scale:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了计算最终地址，处理器会取段的基址（默认是 DS），加上位移，再加上基址，最后通过加上索引乘以比例来完成计算：
- en: '*segment base address + displacement + base + index * scale*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*段基址 + 位移 + 基址 + 索引 * 比例*'
- en: 'In theory, all of this looks nice and easy, so let''s advance toward practice,
    which is nicer and much easier too. If we take another look at the example code
    for direct addressing, we may see that it contains a few completely redundant
    lines. The following would be the first one for us to deal with:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，这一切看起来既简单又清晰，那么我们继续向实践推进，这也更好，且容易得多。如果我们再看一遍直接寻址的示例代码，我们可能会看到其中有几行完全多余的代码。以下是我们要处理的第一行：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Although it provides a good example of register-based direct addressing, it
    may be safely removed, and the following instruction (`call`) should then be changed
    to (remember the indirect call?):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管它提供了一个很好的基于寄存器的直接寻址示例，但它可以安全地省略，接下来的指令（`call`）应更改为（记得间接调用吗？）：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'However, even this line may be omitted just like most of the caller code. Taking
    a closer look at the problem, we see that there is an array of procedure pointers
    (in fact, an array of two). In terms of a high-level language, C for example,
    what the preceding code is intended to do is as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，即使这一行也可以像大多数调用代码一样省略。仔细观察问题，我们看到有一个过程指针数组（实际上是一个包含两个元素的数组）。从高级语言的角度来看，以下代码的目的是：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The Intel architecture provides a similar interface for addressing data/code
    in an array-like fashion of base + index, yet it introduces another member of
    the equation--scale. As the assembler and, especially, the processor do not care
    about types of data we are operating, we have to help them with it ourselves.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 英特尔架构为基址 + 索引的数组式数据/代码寻址提供了类似的接口，但它引入了方程中的另一个成员——倍增。由于汇编器，尤其是处理器并不关心我们操作的数据类型，我们必须自己帮助它们。
- en: 'While the base part (whether it is a label or a register holding an address)
    is treated by the processor as an address in memory, and index is simply a number
    of bytes to add to that base address, in this particular case, we may, of course,
    scale the index ourselves, as the algorithm is fairly simple. We only have two
    possible values for the selector (which is the `rax` register in the preceding
    Assembly code), `0` and `1`, so we load, for example, the `rbx` register with
    the address of `my_proc_address`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然基址部分（无论是标签还是存放地址的寄存器）由处理器视为内存中的地址，索引只是需要加到基址上的字节数，但在这种特定情况下，我们当然可以自己对索引进行缩放，因为算法相当简单。我们只有两个选择器的可能值（在前面的汇编代码中是
    `rax` 寄存器），即 `0` 和 `1`，因此我们可以例如将 `rbx` 寄存器加载为 `my_proc_address` 的地址：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Then, we shift the `rax` register three times left (doing this is equivalent
    to multiplying by 8 as we are on 64-bit and addresses are 8 bytes long, and as
    we would point into the second byte of address of `my_proc0` otherwise) and add
    the result to the `rbx` register. This may be good for a single iteration, but
    not very convenient for a code that gets executed very frequently. Even if we
    use an additional register to store the sum of `rbx` and `rax`--what if we need
    that other register for something else?
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将 `rax` 寄存器向左移三次（这样做相当于乘以 8，因为我们在 64 位架构上，地址是 8 字节长的，否则我们会指向 `my_proc0`
    地址的第二个字节），并将结果加到 `rbx` 寄存器中。这对单次迭代来说可以，但对于频繁执行的代码来说并不太方便。即使我们使用一个额外的寄存器来存储 `rbx`
    和 `rax` 的和——如果我们需要那个寄存器做其他事情怎么办？
- en: 'This is where the scale part comes into play. Rewriting the calling code from
    the Assembly example would result in the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这时，倍增部分就发挥作用了。将汇编示例中的调用代码重写，将得到以下结果：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Of course, the base/index/scale mode may be used for addressing any type of
    array, not necessarily an array of function pointers.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，基址/索引/倍增模式可以用于寻址任何类型的数组，不一定是函数指针数组。
- en: RIP addressing
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RIP 寻址
- en: RIP-based (instruction pointer register on a 64-bit platform) addressing of
    data was introduced with the 64-bit architecture and allows generation of a more
    compact code. This addressing mode follows the same idea as the base/index/scale
    mode, while the instruction pointer is used as the base.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 RIP（在 64 位平台上的指令指针寄存器）寻址数据是在 64 位架构中引入的，它能够生成更加紧凑的代码。这种寻址模式与基址/索引/倍增模式的思想相同，只不过这时指令指针作为基址使用。
- en: 'For example, if want to load a certain register with the address of a variable,
    we would write the following line in Assembly:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想将某个寄存器加载为一个变量的地址，我们可以在汇编中写下以下代码：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The assembler would then do all the adjustments automatically, and the result
    encoding of the instruction would be equivalent to this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 汇编器会自动进行所有的调整，最终指令的编码结果将与以下内容等效：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Loading the `rbx` register with the value of the `rip` register (the address
    of the following instruction) plus the offset in bytes of a variable from the
    address of the following instruction.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `rbx` 寄存器加载为 `rip` 寄存器的值（即下一个指令的地址）加上一个变量相对于下一个指令地址的字节偏移量。
- en: Far pointers
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 远指针
- en: It may be relatively safe to say that far pointers belong to the past when it
    comes to the application development level; however, it would not be right not
    to mention them here, as, after all, there are a few useful things we can do with
    it. Putting it simply, a far pointer combines a segment selector and an offset
    into the segment. Originating in the era of 16-bit modes of operation, surviving
    the 32-bit protected mode, far pointers have made it to the long mode, although
    they are hardly relevant, as, especially in long mode, all memory is considered
    to be a flat array and we are hardly going to use them.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 可以相对安全地说，远指针已经属于过去的历史了，尤其是在应用开发层面；然而，如果在这里不提及它们也是不对的，毕竟我们仍然能用它做一些有用的事情。简单来说，远指针结合了段选择器和段内偏移量。远指针起源于
    16 位操作模式时代，经历了 32 位保护模式，最终进入了长模式，尽管它们几乎不再相关，尤其是在长模式下，所有内存都被视为一个平坦的数组，我们几乎不可能再使用它们。
- en: 'The instructions used (some are obsolete) for loading a far pointer into the
    segment register: general-purpose register pairs are as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 用于将远指针加载到段寄存器的指令（一些已过时）：常用寄存器对如下：
- en: '**LDS**: This loads the selector part of the far pointer into the DS'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LDS**：这将远指针的选择子部分加载到DS寄存器。'
- en: '**LSS**: This loads the selector part of the far pointer into the SS'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LSS**：这将远指针的选择子部分加载到SS寄存器。'
- en: '**LES**: This loads the selector part of the far pointer into the ES'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LES**：这将远指针的选择子部分加载到ES寄存器。'
- en: '**LFS**: This loads the selector part of the far pointer into the FS'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LFS**：这将远指针的选择子部分加载到FS寄存器。'
- en: '**LGS**: This loads the selector part of the far pointer into the GS'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LGS**：这将远指针的选择子部分加载到GS寄存器。'
- en: 'However, let''s see how we can make use of them anyway. For the sake of simplicity,
    we will consider a short 32-bit example for Windows, where we are obtaining the
    address of the **Process Environment Block** (**PEB**):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，让我们看看如何利用它们。为了简化起见，我们将考虑一个短小的32位Windows示例，在该示例中我们获取**进程环境块**（**PEB**）的地址：
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As you may see, the code in this example is quite redundant as we already have
    the proper selector loaded into the FS register, but it still illustrates the
    mechanism. In the real world, no one would''ve gone this way in order to obtain
    the address of PEB; instead, the following instruction would have been issued:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这段代码在这个例子中是相当冗余的，因为我们已经将正确的选择子加载到了FS寄存器中，但它仍然展示了机制。在现实世界中，没有人会采取这种方式来获取PEB的地址；相反，应该会执行以下指令：
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This would have loaded the `eax` register with the address of the PEB, as `fs:0x00000000`
    is already the far pointer pointing to TIB.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这将会把`eax`寄存器加载为PEB的地址，因为`fs:0x00000000`已经是指向TIB的远指针。
- en: The instructions LDS and LES (for use with the DS and ES registers, respectively)
    are obsolete.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: LDS和LES指令（分别用于DS和ES寄存器）已过时。
- en: Summary
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we had a brief introduction to addressing modes on the modern
    Intel CPU. Some resources define more addressing modes, but, let me reiterate
    that as a huge fan of Occam's Razor, I do not see any reason to multiply things
    without need, as most of those additional modes are just variations of the modes
    already explained above.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们简要介绍了现代Intel CPU的寻址模式。有些资源定义了更多的寻址模式，但让我重申，作为奥卡姆剃刀的忠实拥护者，我认为没有理由在没有必要的情况下增加不必要的东西，因为大多数额外的模式只是对上面已解释的模式的变种。
- en: Thus far, we saw how both code and data may be addressed, which is mostly the
    essence of programming in the Assembly language. As you will witness while reading
    this book and trying the code yourself, at least 90% of writing a program in Assembly
    is writing how you want some data to be moved, where from and where to (the remaining
    10% are actual operations on data).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何对代码和数据进行寻址，这基本上就是汇编语言编程的精髓。正如你在阅读本书并亲自尝试代码时会看到的，编写汇编程序的至少90%是编写如何移动数据，数据来自哪里，去往哪里（剩下的10%是实际对数据的操作）。
- en: By getting this far, we are ready to dive deeper into Assembly programming and
    try to actually write working programs, rather than typing a few lines into a
    template and watching registers change in the debugger.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这一点，我们已经准备好深入探讨汇编编程，并尝试真正编写可运行的程序，而不仅仅是在模板中输入几行代码并在调试器中观察寄存器的变化。
- en: The next section of this book, the *Practical Assembly* section, begins with
    a chapter dedicated to parallel data processing. Then, you will learn the basics
    of macros and get acquainted with data structures manipulation mechanisms, and
    we will see how our Assembly code can interact with the surrounding operating
    system, which is quite important.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的下一部分，*实用汇编*部分，将以一章介绍并行数据处理开始。接着，你将学习宏的基础，并了解数据结构操作机制，我们还将看到我们的汇编代码如何与周围的操作系统交互，这非常重要。
