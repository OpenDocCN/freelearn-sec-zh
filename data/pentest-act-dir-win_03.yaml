- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Domain Reconnaissance and Discovery
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 域侦察与发现
- en: This chapter will focus on domain enumeration. Even if the methodology looks
    obvious and straightforward, the process itself can seem daunting, and reconnaissance
    is a crucial stepping stone toward successful compromise. Moreover, it is important
    to reiterate enumeration after every move, as new paths may open up. Sometimes
    enumeration can lead to a direct compromise; for example, a compromised user could
    read **Local Administrator Password Solution** (**LAPS**) or **Group Managed Service
    Accounts** (**gMSA**) passwords or could have administrator privileges on the
    box with unconstrained delegation.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将重点介绍域枚举。尽管方法论看起来显而易见且直观，但实际过程可能会显得令人生畏，而侦察是成功入侵的关键步骤。此外，重要的是在每次行动后重新进行枚举，因为新的路径可能会打开。有时枚举可能直接导致入侵；例如，受损的用户可能读取
    **本地管理员密码解决方案**（**LAPS**）或 **组托管服务账户**（**gMSA**）密码，或者可能在启用不受限制代理的计算机上拥有管理员权限。
- en: We will briefly refresh the reconnaissance methodology and start comprehensive
    enumeration in different ways. We will cover the usage of built-in PowerShell
    modules, **Windows Management Instrumentation** (**WMI**), and **net.exe** commands,
    and utilize LDAP search capabilities. As a next step, we will use the PowerView
    and BloodHound tools. We will finish our journey with service enumeration. As
    a cherry on the pie, we will study **Advanced Threat Analytics** (**ATA**) detection
    evasion during our activities and how to understand and deal with honey tokens.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将简要回顾侦察方法，并以不同方式开始全面枚举。我们将涵盖内置 PowerShell 模块、**Windows 管理工具**（**WMI**）和 **net.exe**
    命令的使用，并利用 LDAP 搜索功能。作为下一步，我们将使用 PowerView 和 BloodHound 工具。我们将以服务枚举结束我们的旅程。作为锦上添花，我们将在活动中研究
    **高级威胁分析**（**ATA**）检测规避以及如何理解和处理蜜罐令牌。
- en: 'In this chapter, we are going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要内容：
- en: Enumeration using built-in capabilities (PowerShell, WMI, **net.exe**, LDAP)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用内置功能进行枚举（PowerShell，WMI，**net.exe**，LDAP）
- en: The most common tools for enumeration (PowerView, BloodHound)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最常用的枚举工具（PowerView，BloodHound）
- en: Domain service enumeration
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 域服务枚举
- en: Detection evasion for ATA and honey tokens
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ATA 和蜜罐令牌的检测规避
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, the technical requirements are as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求如下：
- en: VMware Workstation or Oracle VirtualBox with at least 16 GB of RAM, 8 CPU cores,
    and at least 55 GB of total space (more if you take snapshots)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少 16 GB RAM、8 个 CPU 核心和至少 55 GB 总空间（如果进行快照，空间要求更大）的 VMware Workstation 或 Oracle
    VirtualBox
- en: A Linux-based operating system is strongly recommended
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强烈推荐使用基于 Linux 的操作系统
- en: Vagrant installed with a plugin for a corresponding virtualization platform
    and Ansible
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装了对应虚拟化平台插件的 Vagrant 和 Ansible
- en: A deployed version of DetectionLab for ATA cases ([https://www.detectionlab.network/introduction/prerequisites/](https://www.detectionlab.network/introduction/prerequisites/))
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已部署的 ATA 案例 DetectionLab 版本 ([https://www.detectionlab.network/introduction/prerequisites/](https://www.detectionlab.network/introduction/prerequisites/))
- en: From the GOADv2 project, we will use DC01, DC02, SRV01, and SRV03
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 GOADv2 项目中，我们将使用 DC01、DC02、SRV01 和 SRV03
- en: Enumeration using built-in capabilities
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用内置功能进行枚举
- en: In our scenario, we have established an initial foothold, successfully identifying
    and evading defensive security measures. For the next step, we need a better understanding
    of the environment we have landed in. All our reconnaissance actions could be
    under close monitoring by the blue team. Later, we will run various commands and
    tools, examine Windows event logs, and generate traffic. The purpose of such an
    exercise is to understand what protocols are used under the hood and what indicators
    of compromise can be left during enumeration.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的场景中，我们已建立了初步立足点，成功识别并规避了防御性安全措施。接下来的步骤是更好地了解我们已进入的环境。我们所有的侦察活动可能会受到蓝队的密切监视。随后，我们将运行各种命令和工具，检查
    Windows 事件日志并生成流量。进行这种演练的目的是理解底层使用了哪些协议，以及在枚举过程中可能留下哪些妥协迹象。
- en: Before jumping to the hands-on part, let us go through a brief overview of the
    enumeration methodology we are going to follow. My approach will be to go from
    a higher level of abstraction to a low one.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入实践部分之前，让我们简要概述一下我们将遵循的枚举方法论。我的方法是从较高层次的抽象开始，逐渐深入。
- en: PowerShell cmdlet
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PowerShell cmdlet
- en: 'We are going to enumerate an Active Directory environment, starting with forests,
    domains, and trust relationships between them. For the next step, we will enumerate
    each domain separately, getting information about **Organizational Units** (**OUs**)
    and groups containing respective users and computers, finishing with domain **Group
    Policy Objects** (**GPOs**) and **Access Control Lists** (**ACLs**). With PowerShell,
    you have multiple ways to perform enumeration. There is an Active Directory cmdlet,
    but it is installed by default only on domain controllers. But this is not a big
    deal! There is an amazing project, created by *Nikhil Mittal*, called ADModule.
    The idea is that we copy a Microsoft signed DLL for the Active Directory cmdlet
    and without any RSAT installation and administrative privileges, use a cmdlet
    for enumeration. Also, it is possible to keep everything in memory without touching
    the disk. The main drawback of ADModule project is that it is not maintained anymore,
    so no new commands will be available. It is important to mention that the PowerShell
    Active Directory cmdlet requires **Active Directory Web Services** (**ADWS**)
    running on port **9389**. We can see it in the fourth connection packet in the
    Wireshark packet capture:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将枚举一个 Active Directory 环境，从森林、域以及它们之间的信任关系开始。接下来的步骤是分别枚举每个域，获取有关 **组织单位**
    (**OUs**) 和包含相应用户和计算机的组的信息，最后是域的 **组策略对象** (**GPOs**) 和 **访问控制列表** (**ACLs**)。使用
    PowerShell，您可以使用多种方式进行枚举。虽然有一个 Active Directory cmdlet，但它默认仅安装在域控制器上。不过这没什么大不了的！有一个很棒的项目，由
    *Nikhil Mittal* 创建，叫做 ADModule。这个项目的思路是，我们复制一个微软签名的 DLL 文件，用它来执行 Active Directory
    cmdlet，而无需安装 RSAT 或拥有管理员权限，也能进行枚举。同时，它还可以将所有操作保存在内存中，而不触及磁盘。ADModule 项目的主要缺点是，它已经不再维护，因此不会有新的命令可用。需要提到的是，PowerShell
    的 Active Directory cmdlet 需要 **Active Directory Web 服务** (**ADWS**) 在端口 **9389**
    上运行。我们可以在 Wireshark 捕获的第四个连接数据包中看到它：
- en: '![Figure 3.1 – Connection to ADWS on port 9389](image/B18964_03_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.1 – 连接到 ADWS 端口 9389](image/B18964_03_01.jpg)'
- en: Figure 3.1 – Connection to ADWS on port 9389
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – 连接到 ADWS 端口 9389
- en: 'The complete list of available commands can be viewed by running the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过运行以下命令查看可用命令的完整列表：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Using such a module has obvious advantages; for example, no antivirus bypass
    is required, all execution happens in memory, and the traffic blends well in the
    environment if no special detection rules are applied. Defenders can block port
    **9389**, disable ADWS, and/or create alerts in case traffic goes to this port.
    But it fully depends on the target environment – in most cases, such activity
    will be treated as a normal one. Next, we will discuss enumeration using WMI as
    another option available by default on every machine in the domain.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这样的模块有明显的优势；例如，不需要绕过杀毒软件，所有执行都发生在内存中，而且如果没有应用特殊的检测规则，流量会很好地融入环境。防御者可以阻止端口
    **9389**，禁用 ADWS，和/或在流量访问此端口时创建警报。但这完全取决于目标环境——在大多数情况下，这种活动会被视为正常活动。接下来，我们将讨论使用
    WMI 进行枚举，这在域中的每台机器上默认可用。
- en: WMI
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WMI
- en: '**WMI** is a Microsoft implementation of **Web-Based Enterprise Management**
    (**WBEM**). WMI uses the **Common Information Model** (**CIM**) for the representation
    of managed components.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**WMI** 是 **Web-Based Enterprise Management** (**WBEM**) 的微软实现。WMI 使用 **通用信息模型**
    (**CIM**) 来表示受管理的组件。'
- en: To check WMI in action, I highly recommend reading five blog posts written by
    *0xinfection*[2]. WMI is available in PowerShell, so we will use it for Active
    Directory enumeration. Also, WMI operations can be performed from the command
    line by using the **WMI command line** (**WMIC**). WMI has a provider called **root\directory\ldap**,
    which we will use for our interaction with Active Directory.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看 WMI 的实际操作，我强烈推荐阅读 *0xinfection*[2] 撰写的五篇博客文章。WMI 可以在 PowerShell 中使用，因此我们将利用它进行
    Active Directory 枚举。同时，也可以通过命令行使用 **WMI 命令行工具** (**WMIC**) 执行 WMI 操作。WMI 有一个名为
    **root\directory\ldap** 的提供程序，我们将使用它与 Active Directory 进行交互。
- en: 'Let us run a command from the following example to find the domain name and
    see what traffic will be sent:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行以下示例中的命令，找出域名并查看将发送的流量：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'I am not going to discuss every packet in the capture, but in plain words,
    the following high-level steps occurred:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会讨论捕获中的每个数据包，但用简单的语言来说，发生了以下高层次步骤：
- en: Kerberos authentication took place.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进行了 Kerberos 身份验证。
- en: There was an LDAP bind request and response.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 出现了一个 LDAP 绑定请求和响应。
- en: There were search requests from the attacker and corresponding result entries.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者发出了搜索请求，并且相应的结果条目也出现了。
- en: 'After completing the preceding steps, we will receive the following output:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 完成上述步骤后，我们将收到以下输出：
- en: '![Figure 3.2 – Result for the current domain](image/B18964_03_02.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.2 – 当前域的结果](image/B18964_03_02.jpg)'
- en: Figure 3.2 – Result for the current domain
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2 – 当前域的结果
- en: 'In the respective Wireshark window, we can see that it took 11 LDAP queries/replies
    to receive the information from the preceding screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在相应的 Wireshark 窗口中，我们可以看到，接收到上述截图信息共用了 11 次 LDAP 查询/回复：
- en: '![Figure 3.3 – Wireshark traffic capture after getting the current domain information](image/B18964_03_03.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.3 – 获取当前域信息后的 Wireshark 流量捕获](image/B18964_03_03.jpg)'
- en: Figure 3.3 – Wireshark traffic capture after getting the current domain information
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – 获取当前域信息后的 Wireshark 流量捕获
- en: It is important to mention that this traffic flow is solely between the domain
    controller and the compromised machine. We can see that WMI relies on LDAP, which
    we will cover later.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 需要提到的是，这个流量仅发生在域控制器和受损机器之间。我们可以看到，WMI 依赖于 LDAP，稍后我们将对此进行介绍。
- en: net.exe
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: net.exe
- en: 'Another built-in tool for domain enumeration is **net.exe**. In this section,
    we will enumerate domain users with the following command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个用于域枚举的内置工具是**net.exe**。在本节中，我们将使用以下命令枚举域用户：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The result of running the preceding command is as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述命令的结果如下：
- en: '![Figure 3.4 – Domain user enumeration using the net.exe command](image/B18964_03_04.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.4 – 使用 net.exe 命令进行域用户枚举](image/B18964_03_04.jpg)'
- en: Figure 3.4 – Domain user enumeration using the net.exe command
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4 – 使用 net.exe 命令进行域用户枚举
- en: In this case, traffic sent by our machine will use a distinct set of protocols
    – SMBv2, DCERPC, and SAMR. This is important to understand as usage of some protocols
    can be a good indicator of compromise. We will see that later in the chapter.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们的机器发送的流量将使用一组独特的协议——SMBv2、DCERPC 和 SAMR。这一点很重要，因为某些协议的使用可能是妥协的良好指示。我们将在本章稍后看到这一点。
- en: A high-level explanation of how **Security Account Manager Remote** (**SAMR**)
    works was published with BloodHound use in mind[3]. We will use the information
    from all three blog posts later in the chapter when we analyze SharpHound behavior.
    In short, our machine opens an SMB connection to the domain controller, then binds
    itself to **\PIPE\samr**, which is exported via **IPC$** share and uses SAMR queries
    to extract information about users.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 关于**安全账户管理器远程**（**SAMR**）如何工作的高层次解释是在 BloodHound 使用的背景下发布的[3]。稍后我们将在本章分析 SharpHound
    行为时使用来自三篇博客文章的信息。简而言之，我们的机器打开一个 SMB 连接到域控制器，然后将自己绑定到**\PIPE\samr**，该管道通过**IPC$**共享导出，并使用
    SAMR 查询来提取关于用户的信息。
- en: 'Here is a Wireshark traffic capture:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Wireshark 流量捕获：
- en: '![Figure 3.5 – MS-RPC in traffic capture](image/B18964_03_05.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.5 – MS-RPC 流量捕获](image/B18964_03_05.jpg)'
- en: Figure 3.5 – MS-RPC in traffic capture
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5 – MS-RPC 流量捕获
- en: All the preceding enumeration methods were shown using a Windows-based system.
    But what if we have access to a Linux machine? In the next section, we will use
    **Lightweight Directory Access Protocol** (**LDAP**) search queries together with
    popular Linux tools.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以上所有枚举方法都是在基于 Windows 的系统上展示的。但是，如果我们能够访问一台 Linux 机器呢？在下一节中，我们将结合流行的 Linux 工具使用**轻量级目录访问协议**（**LDAP**）搜索查询。
- en: LDAP
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LDAP
- en: LDAP is a directory service protocol that provides a mechanism to connect, search,
    and modify directories. There is an excellent wiki available for free online[4]
    where you can find relevant LDAP query examples for Active Directory. To understand
    how we can apply it to something meaningful enumeration-wise, I highly recommend
    going through an excellent presentation made by *ropnop* in Thotcon 2018[5].
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: LDAP 是一种目录服务协议，提供连接、搜索和修改目录的机制。网上有一个免费的优秀 wiki[4]，其中可以找到适用于 Active Directory
    的相关 LDAP 查询示例。为了理解如何将其应用于有意义的枚举，我强烈推荐您阅读*ropnop* 在 Thotcon 2018 中做的精彩演讲[5]。
- en: 'In the previous examples, we performed enumeration in the domain user context
    using a valid set of credentials. But what if we do not have one yet? In rare
    cases, some older environments may allow NULL sessions for enumeration with the
    following command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，我们使用有效的凭据在域用户上下文中执行了枚举。但如果我们还没有凭据呢？在某些罕见的环境中，旧版本的环境可能会允许通过以下命令进行 NULL
    会话枚举：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: A fresh point of view was shared by *Reino Mostert*, who talked about the three
    ways to enumerate users on Windows domain controllers[6] and supplemented his
    research with the tool[7].
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*Reino Mostert* 分享了一个新的观点，他讲述了在 Windows 域控制器上枚举用户的三种方式[6]，并通过工具[7]补充了他的研究。'
- en: 'To sum up, as an unauthenticated domain user, we can run **nbtscan**, **dig**,
    **ldapsearch**, and in some cases, **rpcclient** to retrieve the domain name,
    domain controllers, and computer NetBIOS names:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，作为一个未经身份验证的域用户，我们可以运行 **nbtscan**、**dig**、**ldapsearch**，在某些情况下，**rpcclient**
    来获取域名、域控制器和计算机的 NetBIOS 名称：
- en: '![Figure 3.6 – Enumeration without domain user credentials](image/B18964_03_06.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.6 – 无域用户凭据的枚举](image/B18964_03_06.jpg)'
- en: Figure 3.6 – Enumeration without domain user credentials
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6 – 无域用户凭据的枚举
- en: Obtaining our first set of valid domain user credentials will open an avenue
    for more information, as can be seen in the following screenshot.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 获取我们第一组有效的域用户凭据将为获取更多信息开辟途径，正如以下截图所示。
- en: '![Figure 3.7 – Authenticated enumeration using rpcclient](image/B18964_03_07.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.7 – 使用 rpcclient 进行身份验证枚举](image/B18964_03_07.jpg)'
- en: Figure 3.7 – Authenticated enumeration using rpcclient
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7 – 使用 rpcclient 进行身份验证枚举
- en: 'Please be careful as, depending on the Windows version, some of the SAMR queries
    do not work, but NETLOGON and LSARPC are still fine. This is shown in the following
    screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 请小心，因为根据 Windows 版本的不同，一些 SAMR 查询可能无法正常工作，但 NETLOGON 和 LSARPC 仍然可以正常使用。以下截图展示了这一点：
- en: '![Figure 3.8 – SAMR queries failed](image/B18964_03_08.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.8 – SAMR 查询失败](image/B18964_03_08.jpg)'
- en: Figure 3.8 – SAMR queries failed
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.8 – SAMR 查询失败
- en: 'LDAP queries will provide more flexibility than predefined searches in **rpcclient**
    or **enum4linux**. We can use **ldapsearch**[8] and/or **windapsearch**[9]. We
    can enumerate members of the administrative groups with a query, as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: LDAP 查询比 **rpcclient** 或 **enum4linux** 中的预定义搜索提供更多灵活性。我们可以使用 **ldapsearch**[8]
    和/或 **windapsearch**[9]。我们可以通过查询枚举管理员组的成员，如下所示：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Running the preceding command would result in the following output:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述命令将得到以下输出：
- en: '![Figure 3.9 – List objects with attribute adminCount=1](image/B18964_03_09.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.9 – 列出属性 adminCount=1 的对象](image/B18964_03_09.jpg)'
- en: Figure 3.9 – List objects with attribute adminCount=1
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.9 – 列出属性 adminCount=1 的对象
- en: We have discussed ways to perform enumeration manually and analyzed traffic
    to understand underlying protocol usage. Now, we will discuss the most common
    tools that are used to perform enumeration in an automated or semi-automated way.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了如何手动执行枚举并分析流量以理解底层协议的使用方式。现在，我们将讨论用于以自动化或半自动化方式执行枚举的最常见工具。
- en: Enumeration tools
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 枚举工具
- en: The most common tools used for domain enumeration are PowerView or SharpView
    and SharpHound together with BloodHound.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 用于域枚举的最常见工具是 PowerView 或 SharpView 和 SharpHound，结合使用 BloodHound。
- en: SharpView/PowerView
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SharpView/PowerView
- en: 'SharpView[10] is a .NET port of PowerView[11]. This tool has a wide variety
    of methods that can improve and speed up the enumeration process in complex environments.
    I can recommend reading the PowerView wiki[12], as it explains in detail how the
    tool runs queries. Let us grab the version from GitHub, compile it, and follow
    our methodology. We will not run Wireshark for every command, but choose one as
    an example to understand what traces are left behind us. To make our life easier,
    I used the **Get-DomainSID** command:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: SharpView[10] 是 PowerView[11] 的 .NET 移植版本。这个工具有各种各样的方法，可以改善和加速复杂环境中的枚举过程。我推荐阅读
    PowerView wiki[12]，因为它详细解释了如何运行查询。让我们从 GitHub 获取版本，编译并按照我们的研究方法进行操作。我们不会为每个命令都运行
    Wireshark，而是选择一个示例来理解我们留下的痕迹。为了让我们的工作更轻松，我使用了 **Get-DomainSID** 命令：
- en: '![Figure 3.10 – Result of the Get-DomainSID command](image/B18964_03_10.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.10 – Get-DomainSID 命令的结果](image/B18964_03_10.jpg)'
- en: Figure 3.10 – Result of the Get-DomainSID command
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.10 – Get-DomainSID 命令的结果
- en: 'The following Wireshark capture shows a few DNS requests for the domain LDAP
    SRV, then a mix of CLDAP and LDAP queries/responses, together with Kerberos authentication.
    Overall, 265 packets were captured:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Wireshark 捕获的几个 DNS 请求，用于获取域 LDAP SRV，接着是 CLDAP 和 LDAP 查询/响应的混合，结合了 Kerberos
    认证。总共捕获了 265 个数据包：
- en: '![Figure 3.11 – Wireshark capture for the Get-DomainSID command](image/B18964_03_11.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.11 – 获取 Get-DomainSID 命令的 Wireshark 捕获](image/B18964_03_11.jpg)'
- en: Figure 3.11 – Wireshark capture for the Get-DomainSID command
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.11 – 获取 Get-DomainSID 命令的 Wireshark 捕获
- en: 'The following list shows the most common enumeration commands that you will
    use during almost every engagement. Command names are self-explanatory. For extra
    options and keys, follow the official guide:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表展示了在几乎每次参与过程中你将使用的最常见的枚举命令。命令名称不言自明。有关额外选项和键，请参见官方指南：
- en: '**Get-Forest**'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Get-Forest**'
- en: '**Get-ForestDomain**'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Get-ForestDomain**'
- en: '**Get-ForestTrust**'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Get-ForestTrust**'
- en: '**Get-Domain**'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Get-Domain**'
- en: '**Get-DomainTrust**'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Get-DomainTrust**'
- en: '**Get-DomainController**'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Get-DomainController**'
- en: '**Get-DomainOU**'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Get-DomainOU**'
- en: '**Get-DomainGroup**'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Get-DomainGroup**'
- en: '**Get-DomainGroupMember**'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Get-DomainGroupMember**'
- en: '**Get-DomainUser**'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Get-DomainUser**'
- en: '**Get-DomainComputer**'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Get-DomainComputer**'
- en: '**Get-DomainGPO**'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Get-DomainGPO**'
- en: '**Get-DomainForeignUser**'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Get-DomainForeignUser**'
- en: '**Get-DomainForeignGroupMember**'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Get-DomainForeignGroupMember**'
- en: '**Invoke-ACLScanner**'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Invoke-ACLScanner**'
- en: '**Find-LocalAdminAccess**'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Find-LocalAdminAccess**'
- en: '**Find-DomainShare**'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Find-DomainShare**'
- en: 'As an example, I will show how SharpView commands can help in forest enumeration.
    Enumeration is performed as a standard user. After running only three commands,
    we know the domain SID of the root domain and all domains in the forest, including
    domain controllers’ names, and that there is a bidirectional trust between two
    forests. The result of forest enumeration is as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，我将展示如何使用 SharpView 命令帮助进行森林枚举。枚举以标准用户身份执行。在运行了仅三个命令后，我们就能知道根域和森林中所有域的 SID，包括域控制器的名称，并且两片森林之间存在双向信任。森林枚举的结果如下：
- en: '![Figure 3.12 – Result of forest enumeration using SharpView](image/B18964_03_12.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.12 – 使用 SharpView 进行森林枚举的结果](image/B18964_03_12.jpg)'
- en: Figure 3.12 – Result of forest enumeration using SharpView
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.12 – 使用 SharpView 进行森林枚举的结果
- en: After collecting all the forest and domain information, we need to analyze it.
    We are interested in finding a way to chain allowed trust and access with misconfigurations
    to progress further. What if there was a tool that can help to get all the bits
    together in some automated way? Let us welcome and discuss BloodHound!
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在收集完所有森林和域的信息后，我们需要对其进行分析。我们的目标是寻找一种方法，将允许的信任和访问与错误配置串联起来，以便进一步推进。如果有一个工具能以某种自动化的方式帮助我们将所有信息结合在一起呢？让我们欢迎并讨论
    BloodHound！
- en: BloodHound
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BloodHound
- en: '*Defenders think in lists. Attackers think in graphs. As long as this is true,
    attackers win.* This great quote is from *John Lambert*. I think such a shift
    in thinking can help us to understand the full power of **BloodHound**[13]. This
    tool utilizes graph theory to help the attacker find relationships between objects
    within Active Directory that were not intended to exist or could be abused for
    further compromise. To make the magic happen, we need the SharpHound data collector[14]
    and BloodHound. Our goal is to understand how these tools work and the benefits
    of using them. SharpHound has several collection methods, and before using all
    of them, we need to understand the implications. For example, methods such as
    RDP, DCOM, PSRemote, LocalAdmin, and LoggedOn are very noisy and generate a lot
    of traffic as they will connect to each computer in the domain to retrieve the
    requested information.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '*防御者思维是按列表进行的，而攻击者则是按图形思维的。只要这一点成立，攻击者就会胜利。* 这句伟大的名言出自 *John Lambert*。我认为这种思维方式的转变能帮助我们理解
    **BloodHound**[13] 的全部潜力。这个工具利用图论帮助攻击者找到 Active Directory 中原本不应该存在的或可以被利用来进一步妥协的对象关系。为了实现这一点，我们需要
    SharpHound 数据收集器[14] 和 BloodHound。我们的目标是了解这些工具的工作原理以及使用它们的好处。SharpHound 有多种收集方法，在使用这些方法之前，我们需要了解它们的影响。例如，RDP、DCOM、PSRemote、LocalAdmin
    和 LoggedOn 等方法非常嘈杂，会产生大量流量，因为它们需要连接到域中的每台计算机以获取请求的信息。'
- en: 'After running SharpHound with the default collection options and uploading
    the results to BloodHound, we can find promising paths such as in the following
    screenshot, where **tywin.lannister** can change the password of another user
    and add himself to a group:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在以默认收集选项运行 SharpHound 并将结果上传到 BloodHound 后，我们可以找到一些有前景的路径，如下图所示，其中 **tywin.lannister**
    可以更改另一个用户的密码并将自己添加到一个组中：
- en: '![Figure 3.13 – ACL misconfiguration found by BloodHound](image/B18964_03_13.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.13 – BloodHound 发现的 ACL 错误配置](image/B18964_03_13.jpg)'
- en: Figure 3.13 – ACL misconfiguration found by BloodHound
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13 – BloodHound 发现的 ACL 错误配置
- en: It can be the case that pre-defined queries in BloodHound are not enough to
    find the next move. Then, we can write them ourselves and/or use published custom
    queries[15].
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，BloodHound 中预定义的查询可能不足以找到下一步的行动。这时，我们可以自己编写查询和/或使用已发布的自定义查询[15]。
- en: 'To get more insights about BloodHound internals, there are three blog posts
    written by *Sven Defatsch*[3]. In these articles, he discusses user and session
    enumeration via different methods. We are not going to replicate the full research
    but will briefly have a look at the traffic to confirm the results. We will start
    data collection for sessions alongside packet capture:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于BloodHound内部的内容，*Sven Defatsch*[3]写了三篇博客文章。在这些文章中，他讨论了通过不同方法进行用户和会话枚举。我们不会复制完整的研究，但会简要查看流量以确认结果。我们将开始会话的数据收集，并进行数据包捕获：
- en: '[PRE5]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The preceding command created the following data capture:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令创建了以下数据捕获：
- en: '![Figure 3.14 – Session collection](image/B18964_03_14.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.14 – 会话收集](image/B18964_03_14.jpg)'
- en: Figure 3.14 – Session collection
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.14 – 会话收集
- en: As we can see, the traffic is the same as in the original research. There are
    plenty of collection methods with different levels of noise. Also, it depends
    on what you are hunting for. General advice is to use the **--Jitter** and **--Throttle**
    options to create a delay between requests. The **--Stealthy** option forces SharpHound
    to behave differently, however, it may also influence the collection quality.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，流量与原始研究中的流量相同。有许多不同噪声级别的收集方法。而且，这也取决于你在猎取什么。一般建议是使用**--Jitter**和**--Throttle**选项，在请求之间创建延迟。**--Stealthy**选项迫使SharpHound以不同的方式表现，但它也可能影响收集的质量。
- en: To summarize, the data collector gets information using various named pipes
    and protocols over an SMB connection with Kerberos authentication.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，数据收集器通过SMB连接和Kerberos身份验证，使用各种命名管道和协议获取信息。
- en: However, there is another way to explore the target Active Directory. **ADExplorer**[16]
    is a tool written by Microsoft that not only allows viewing and editing objects
    but also supports snapshots. I highly encourage you to read the post about ADExplorer
    usage during engagements by *api0cradle*[18]. Using the tool, written by *c3c*[18],
    we can convert snapshots to BloodHound-compatible JSON files. Obviously, as there
    is no network interaction with systems, information such as the local administrator
    list and sessions will be missing. The only OpSec consideration when doing a snapshot
    is to keep in mind that a large volume of data will be collected. However, detection
    of Active Directory data collection is not easy, as mentioned by *FalconForce*[19].
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，还有另一种探索目标Active Directory的方法。**ADExplorer**[16]是微软编写的一个工具，不仅可以查看和编辑对象，还支持快照。我强烈推荐你阅读*api0cradle*[18]关于在参与活动中使用ADExplorer的帖子。使用由*c3c*[18]编写的工具，我们可以将快照转换为BloodHound兼容的JSON文件。显然，由于没有与系统的网络交互，像本地管理员列表和会话这样的信息将缺失。进行快照时唯一需要考虑的OpSec因素是要记住会收集大量数据。然而，正如*FalconForce*[19]提到的那样，检测Active
    Directory数据收集并不容易。
- en: After collecting all available information about the domain, next, we will focus
    on services deployed inside the domain and will briefly have a look at the user
    hunting process.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在收集了所有关于域的可用信息后，接下来我们将专注于域内部署的服务，并简要了解用户狩猎过程。
- en: Enumerating services and hunting for users
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 枚举服务并猎取用户
- en: To continue our enumeration, the next step will be to identify available services,
    file and SQL servers, and the privileged users’ activity in the domain. As we
    discussed at the beginning of this chapter, our target is to get access to critical
    data and services in the compromised environment.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为了继续我们的枚举，下一步是识别可用服务、文件和SQL服务器以及域中特权用户的活动。如本章开头所述，我们的目标是获取受损环境中的关键数据和服务访问权限。
- en: SPN
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SPN
- en: '**Service Principal Names** (**SPNs**) are the names by which a Kerberos client
    uniquely identifies instances of a service for a given Kerberos target computer.
    There is a comprehensive list of known SPNs for Active Directory held by *PyroTek3*[20].
    We can use them to better understand what services are present in the domain and
    use Kerberos authentication.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务主体名称**（**SPNs**）是Kerberos客户端用来唯一标识给定Kerberos目标计算机上的服务实例的名称。*PyroTek3*[20]拥有一个关于Active
    Directory已知SPN的全面列表。我们可以利用这些信息来更好地理解域中存在哪些服务，并使用Kerberos身份验证。'
- en: 'We can enumerate SPN in the domain by using the **setspn** utility or SharpView
    with the following commands to find users and computers with SPNs:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用**setspn**工具或SharpView通过以下命令在域中枚举SPN，以查找具有SPN的用户和计算机：
- en: '[PRE6]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To get all SPNs with the **setspn** utility, we can run the following command:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用**setspn**工具获取所有SPN，我们可以运行以下命令：
- en: '[PRE7]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As a result, we received a lengthy list of SPNs. We can narrow the list down
    by using the **-L** switch for a specific server or user. Following are some promising
    findings after running the preceding command:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，我们得到了一个冗长的SPN列表。我们可以通过使用**-L**开关来针对特定服务器或用户缩小列表范围。运行上述命令后，以下是一些有前景的发现：
- en: '![Figure 3.15 – SPN in the sevenkingdoms forest](image/B18964_03_15.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.15 – 七王国森林中的SPN](image/B18964_03_15.jpg)'
- en: Figure 3.15 – SPN in the sevenkingdoms forest
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.15 – 七王国森林中的SPN
- en: The next target to hunt for in the domain is a file server. Sometimes it can
    even have open shares or shares we have “write” permissions on. In [*Chapter 5*](B18964_05.xhtml#_idTextAnchor093),
    we will show how to get an advantage from writable shares, but first we need to
    find them.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在域中的下一个猎捕目标是文件服务器。有时它甚至可能具有开放共享或我们具有“写入”权限的共享。在[*第5章*](B18964_05.xhtml#_idTextAnchor093)中，我们将展示如何利用可写共享，但首先我们需要找到它们。
- en: The file server
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件服务器
- en: 'The file server is a great resource of information. If an attacker compromises
    a user with wide access rights across the organization, then there is a chance
    to just pull all the required information from file shares. There are a few options
    in SharpView for file server enumeration. They are as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 文件服务器是一个重要的信息资源。如果攻击者妥协了一个在组织内具有广泛访问权限的用户，那么就有可能从文件共享中提取所有所需的信息。在SharpView中，有几个选项用于文件服务器枚举。它们如下：
- en: '**Get-DomainFileServer**'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Get-DomainFileServer**'
- en: '**Find-DomainShare -CheckShareAccess**'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Find-DomainShare -CheckShareAccess**'
- en: '**Find-InterestingFile**'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Find-InterestingFile**'
- en: '**Find-InterestingDomainShareFile**'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Find-InterestingDomainShareFile**'
- en: User hunting
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户猎捕
- en: 'User hunting is more of an art rather than a process. A great presentation[21]
    was created by *harmj0y* that shows the general approach. It may look like a straightforward
    process for a small environment, but if there are thousands of users across multiple
    domains and forests, it is not. Locating the right user for the hunt is the most
    vital step. For privileged users, we can first identify them by using the following
    command from SharpView:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 用户猎捕更像是一种艺术，而不是一个过程。*harmj0y*创建了一个精彩的演示[21]，展示了总体方法。对于一个小型环境来说，这可能看起来是一个直接的过程，但如果跨多个域和森林有成千上万的用户，就不那么简单了。找到合适的猎捕目标是最关键的一步。对于特权用户，我们可以通过以下SharpView命令来识别他们：
- en: '[PRE8]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following is the list of privileged users in the domain:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是域中受特权的用户列表：
- en: '![Figure 3.16 – List of users with the AdminCount=1 attribute](image/B18964_03_16.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.16 – 具有 AdminCount=1 属性的用户列表](image/B18964_03_16.jpg)'
- en: Figure 3.16 – List of users with the AdminCount=1 attribute
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.16 – 具有 AdminCount=1 属性的用户列表
- en: 'As the next step, we can run various commands, such as the following:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 作为下一步，我们可以运行各种命令，例如以下命令：
- en: '**Find-DomainUserLocation**'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Find-DomainUserLocation**'
- en: '**Get-NetSession**'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Get-NetSession**'
- en: '**Invoke-UserHunter -****Stealth -ShowAll**'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Invoke-UserHunter -****Stealth -ShowAll**'
- en: Just be careful as the first and last commands without the **Stealth** switch
    ([http://www.labofapenetrationtester.com/2018/10/deploy-deception.xhtml](http://www.labofapenetrationtester.com/2018/10/deploy-deception.xhtml))
    will generate a lot of noise by querying every machine in the domain. In the next
    section, we will cover some detections and ways to avoid them during enumeration.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 只需小心，未使用**Stealth**开关的第一个和最后一个命令（[http://www.labofapenetrationtester.com/2018/10/deploy-deception.xhtml](http://www.labofapenetrationtester.com/2018/10/deploy-deception.xhtml)）会通过查询域内的每台机器生成大量噪声。在下一节中，我们将介绍一些检测方法以及在枚举过程中如何避免这些检测。
- en: Enumeration detection evasion
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 枚举检测规避
- en: Enumeration can be a noisy process if tools are used without precautions. Also,
    defenders hunt for reconnaissance activities by using security products and deception
    methods. These methods are like a hidden bell in a dark room – you need to know
    where it is located to avoid detection. We will cover Microsoft ATA and its successor
    – **Defender for Identity** (**MDI**) together with honey tokens.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举可能是一个噪声很大的过程，如果没有采取预防措施使用工具的话。同时，防御者通过使用安全产品和欺骗方法来猎捕侦察活动。这些方法就像黑暗房间中的隐藏铃铛——你需要知道它在哪里，才能避免被检测到。我们将一并介绍微软ATA及其继任者——**Defender
    for Identity** (**MDI**)以及蜜罐令牌。
- en: Microsoft ATA
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微软ATA
- en: Microsoft **Advanced Threat Analytics** (**ATA**) is an on-premises platform
    that helps to protect enterprises from threats. Extended support ends in 2026,
    so it makes sense to quickly cover it.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 微软**高级威胁分析**(**ATA**)是一个本地平台，旨在帮助保护企业免受威胁。扩展支持将在2026年结束，因此值得快速介绍一下它。
- en: 'In this section, we will discuss only detections for recon methods; other attacks
    and bypasses will be covered in respective chapters. In general, ATA parses the
    network traffic of multiple protocols to detect malicious activity. It’s important
    to mention that it will take time for the tool to learn the normal behavior of
    the users and machines in the environment. Data collection happens on ATA Gateways.
    A great series of five blog posts[22] related to ATA detection and bypass was
    written by *Nikhil Mittal* in 2017\. The general bypass strategy is to blend in
    existing environment traffic and limit interaction with domain controllers. **Microsoft
    Defender for Identity** (**MDI**) is a successor of ATA. Nikhil took a fresh look
    at the product and shared his research during the BruCON conference[23]. All techniques
    mentioned there are still truly relevant to ATA as well. Two good enumeration
    recommendations were given during the talk: exclude SMB session enumeration against
    DC and forget about any tool that utilizes the SAMR protocol. WMI and LDAP queries
    are a way to go for reconnaissance, but now it is recommended to request all LDAP
    attributes and filter them offline.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将仅讨论用于重建方法的检测；其他攻击和绕过将在相应的章节中讨论。一般来说，ATA通过解析多种协议的网络流量来检测恶意活动。值得注意的是，工具需要一定时间来学习环境中用户和机器的正常行为。数据收集发生在ATA网关上。2017年，*Nikhil
    Mittal*写了一系列五篇关于ATA检测和绕过的博客文章[22]。一般的绕过策略是将现有环境流量混合在一起，并限制与域控制器的交互。**Microsoft
    Defender for Identity**（**MDI**）是ATA的继任者。Nikhil重新审视了该产品，并在BruCON会议[23]上分享了他的研究。这里提到的所有技术至今仍对ATA同样有效。在演讲中给出了两个不错的枚举建议：排除对DC的SMB会话枚举，忘记任何使用SAMR协议的工具。WMI和LDAP查询是侦察的途径，但现在推荐请求所有LDAP属性并离线筛选。
- en: Honey tokens
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 蜜罐令牌
- en: 'Another way to detect malicious activity inside the environment is to deploy
    and monitor decoy objects in the environment. These objects should be desirable
    for attackers but should never be used during normal activities. We can point
    to more research by *Nikhil Mittal*[24] and his ready-to-use PowerShell module[25].
    Using the tool, we can deploy honey users, computers, and groups. To detect access
    to these objects, we need to configure Group Policy auditing[26] or we can simply
    add the account to honey tokens in Microsoft ATA:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种检测环境中恶意活动的方法是部署并监控环境中的诱饵对象。这些对象应该是攻击者想要的目标，但在正常活动中永远不应使用。我们可以指出更多*Nikhil
    Mittal*的研究[24]以及他现成的PowerShell模块[25]。通过该工具，我们可以部署蜜罐用户、计算机和组。为了检测这些对象的访问，我们需要配置组策略审计[26]，或者我们可以简单地将账户添加到Microsoft
    ATA中的蜜罐令牌：
- en: '![Figure 3.17 – Honey tokens in Microsoft ATA](image/B18964_03_17.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图3.17 – Microsoft ATA中的蜜罐令牌](image/B18964_03_17.jpg)'
- en: Figure 3.17 – Honey tokens in Microsoft ATA
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.17 – Microsoft ATA中的蜜罐令牌
- en: There are still ways an attacker can identify honey accounts by examining attributes
    such as **LastLogon**, **logonCount**, **badpwdCount**, **whenCreated**, and a
    few others. Some tools can assist in such activities, such as **HoneypotBuster**[27].
    It uses an internal fake ranking system, calculated as a combination of several
    parameters for the account. The ranking system of the tool can be analyzed by
    the blue team, so honeypots may be tweaked up to the desired level.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者仍然可以通过检查如**LastLogon**、**logonCount**、**badpwdCount**、**whenCreated**等属性来识别蜜罐账户。一些工具可以协助进行此类活动，例如**HoneypotBuster**[27]。它使用一个内部的虚假排名系统，计算为账户的几个参数的组合。该工具的排名系统可以被蓝队分析，因此蜜罐可以调整到所需的级别。
- en: Another approach is to introduce false credentials inside the memory of the
    machines in the domain and detect credential reuse during privilege escalation
    attempts via a pass-the-hash attack. A great project that demonstrates such deception
    is called Dcept[28]. If the blue team detects such activity, they will know the
    exact host that was compromised and the way the attacker performed lateral movement.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是在域内的机器内存中引入虚假凭据，并在特权提升攻击（例如pass-the-hash攻击）期间检测凭据重用。一个出色的项目，展示了这种欺骗技术，名为Dcept[28]。如果蓝队检测到此类活动，他们将知道被攻击的确切主机以及攻击者执行横向移动的方式。
- en: Another script, Honeyhash[29], is written in PowerShell and creates in-memory
    deception. It creates an in-memory fake account that will then be used by the
    attacker for lateral movement. A good walk-through on how to deploy and implement
    detections was written by the *Stealthbits* company[30].
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个脚本，Honeyhash[29]，是用PowerShell编写的，用于创建内存欺骗。它创建一个内存中的虚假账户，然后攻击者将使用该账户进行横向移动。
    *Stealthbits* 公司撰写了一个关于如何部署和实施检测的详细指南[30]。
- en: Summary
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed available tools and protocols that attackers can
    use for enumeration activity. We briefly covered tooling internals to get a clear
    insight into the traces we left. Our methodology was to enumerate from a high
    level to a low level inside the environment. One of the key ideas was that enumeration
    is a constant process. At the end of the chapter, we went through some OpSec concerns
    and saw how a blue team can deceive attackers.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了攻击者可以用于枚举活动的可用工具和协议。我们简要介绍了工具内部机制，以便清晰地了解我们留下的痕迹。我们的方法论是从环境内部的高层次到低层次进行枚举。其中一个关键思想是枚举是一个持续的过程。在本章结束时，我们讨论了一些OpSec方面的问题，并看到蓝队如何欺骗攻击者。
- en: In the next chapter, we will cover credential access from a domain point of
    view. We will not spend time on endpoint credential access, rather we will explore
    things such as Kerberoasting, GMSA, LAPS, different types of coerced authentication,
    how to abuse writable shares, and more.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将从域的角度讨论凭证访问。我们不会花时间在端点凭证访问上，而是会探讨诸如Kerberoasting、GMSA、LAPS、不同类型的强制认证、如何滥用可写共享等内容。
- en: References
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: 'ADModule: [https://github.com/samratashok/ADModule](https://github.com/samratashok/ADModule)'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'ADModule: [https://github.com/samratashok/ADModule](https://github.com/samratashok/ADModule)'
- en: 'WMI basics series: [https://0xinfection.github.io/posts/wmi-basics-part-1/](https://0xinfection.github.io/posts/wmi-basics-part-1/)'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'WMI基础系列: [https://0xinfection.github.io/posts/wmi-basics-part-1/](https://0xinfection.github.io/posts/wmi-basics-part-1/)'
- en: 'Bloodhound inner workings: [https://blog.compass-security.com/2022/05/bloodhound-inner-workings-part-1/](https://blog.compass-security.com/2022/05/bloodhound-inner-workings-part-1/),
    [https://blog.compass-security.com/2022/05/bloodhound-inner-workings-part-2/](https://blog.compass-security.com/2022/05/bloodhound-inner-workings-part-2/)
    and [https://blog.compass-security.com/2022/05/bloodhound-inner-workings-part-3/](https://blog.compass-security.com/2022/05/bloodhound-inner-workings-part-3/)'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Bloodhound内部工作原理: [https://blog.compass-security.com/2022/05/bloodhound-inner-workings-part-1/](https://blog.compass-security.com/2022/05/bloodhound-inner-workings-part-1/),
    [https://blog.compass-security.com/2022/05/bloodhound-inner-workings-part-2/](https://blog.compass-security.com/2022/05/bloodhound-inner-workings-part-2/)
    和 [https://blog.compass-security.com/2022/05/bloodhound-inner-workings-part-3/](https://blog.compass-security.com/2022/05/bloodhound-inner-workings-part-3/)'
- en: 'LDAP wiki: [https://ldapwiki.com/wiki/Main](https://ldapwiki.com/wiki/Main)'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'LDAP wiki: [https://ldapwiki.com/wiki/Main](https://ldapwiki.com/wiki/Main)'
- en: 'LDAP and Kerberos: [https://blog.ropnop.com/talk/2018/funwithldapkerb/](https://blog.ropnop.com/talk/2018/funwithldapkerb/)'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'LDAP和Kerberos: [https://blog.ropnop.com/talk/2018/funwithldapkerb/](https://blog.ropnop.com/talk/2018/funwithldapkerb/)'
- en: 'New look on NULL session enumeration: [https://sensepost.com/blog/2018/a-new-look-at-null-sessions-and-user-enumeration/](https://sensepost.com/blog/2018/a-new-look-at-null-sessions-and-user-enumeration/)'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '对NULL会话枚举的新看法: [https://sensepost.com/blog/2018/a-new-look-at-null-sessions-and-user-enumeration/](https://sensepost.com/blog/2018/a-new-look-at-null-sessions-and-user-enumeration/)'
- en: 'UserEnum: [https://github.com/sensepost/UserEnum](https://github.com/sensepost/UserEnum)'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'UserEnum: [https://github.com/sensepost/UserEnum](https://github.com/sensepost/UserEnum)'
- en: 'Ldapsearch: [https://malicious.link/post/2022/ldapsearch-reference/](https://malicious.link/post/2022/ldapsearch-reference/)'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Ldapsearch: [https://malicious.link/post/2022/ldapsearch-reference/](https://malicious.link/post/2022/ldapsearch-reference/)'
- en: 'Windapsearch: [https://github.com/ropnop/windapsearch](https://github.com/ropnop/windapsearch)'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Windapsearch: [https://github.com/ropnop/windapsearch](https://github.com/ropnop/windapsearch)'
- en: 'SharpView: [https://github.com/tevora-threat/SharpView](https://github.com/tevora-threat/SharpView)'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'SharpView: [https://github.com/tevora-threat/SharpView](https://github.com/tevora-threat/SharpView)'
- en: 'PowerView: [https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1](https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1)'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'PowerView: [https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1](https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1)'
- en: 'PowerView recon wiki: [https://powersploit.readthedocs.io/en/latest/Recon/](https://powersploit.readthedocs.io/en/latest/Recon/)'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'PowerView recon wiki: [https://powersploit.readthedocs.io/en/latest/Recon/](https://powersploit.readthedocs.io/en/latest/Recon/)'
- en: 'BloodHound: [https://bloodhound.readthedocs.io/en/latest/](https://bloodhound.readthedocs.io/en/latest/)'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'BloodHound: [https://bloodhound.readthedocs.io/en/latest/](https://bloodhound.readthedocs.io/en/latest/)'
- en: 'SharpHound: [https://bloodhound.readthedocs.io/en/latest/data-collection/sharphound.xhtml](https://bloodhound.readthedocs.io/en/latest/data-collection/sharphound.xhtml)'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'SharpHound: [https://bloodhound.readthedocs.io/en/latest/data-collection/sharphound.xhtml](https://bloodhound.readthedocs.io/en/latest/data-collection/sharphound.xhtml)'
- en: 'Custom BloodHound queries: [https://github.com/hausec/Bloodhound-Custom-Queries](https://github.com/hausec/Bloodhound-Custom-Queries)'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '自定义BloodHound查询: [https://github.com/hausec/Bloodhound-Custom-Queries](https://github.com/hausec/Bloodhound-Custom-Queries)'
- en: 'ADExplorer: [https://learn.microsoft.com/en-us/sysinternals/downloads/adexplorer](https://learn.microsoft.com/en-us/sysinternals/downloads/adexplorer)'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'ADExplorer: [https://learn.microsoft.com/en-us/sysinternals/downloads/adexplorer](https://learn.microsoft.com/en-us/sysinternals/downloads/adexplorer)'
- en: 'ADExplorer on engagements: [https://www.trustedsec.com/blog/adexplorer-on-engagements/](https://www.trustedsec.com/blog/adexplorer-on-engagements/)'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'ADExplorer在项目中的应用: [https://www.trustedsec.com/blog/adexplorer-on-engagements/](https://www.trustedsec.com/blog/adexplorer-on-engagements/)'
- en: 'ADExplorerSnapshot: [https://github.com/c3c/ADExplorerSnapshot.py](https://github.com/c3c/ADExplorerSnapshot.py)'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'ADExplorerSnapshot: [https://github.com/c3c/ADExplorerSnapshot.py](https://github.com/c3c/ADExplorerSnapshot.py)'
- en: 'Detect AD data collection: [https://falconforce.nl/falconfriday-detecting-active-directory-data-collection-0xff21/](https://falconforce.nl/falconfriday-detecting-active-directory-data-collection-0xff21/)'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '检测AD数据收集: [https://falconforce.nl/falconfriday-detecting-active-directory-data-collection-0xff21/](https://falconforce.nl/falconfriday-detecting-active-directory-data-collection-0xff21/)'
- en: 'List of known SPNs: [https://adsecurity.org/?page_id=183](https://adsecurity.org/?page_id=183)'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '已知SPN列表: [https://adsecurity.org/?page_id=183](https://adsecurity.org/?page_id=183)'
- en: 'Hunt sysadmins: [https://www.slideshare.net/harmj0y/i-hunt-sys-admins-20](https://www.slideshare.net/harmj0y/i-hunt-sys-admins-20)'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '追踪系统管理员: [https://www.slideshare.net/harmj0y/i-hunt-sys-admins-20](https://www.slideshare.net/harmj0y/i-hunt-sys-admins-20)'
- en: 'Evade Microsoft ATA: [http://www.labofapenetrationtester.com/2017/08/week-of-evading-microsoft-ata-day1.xhtml](http://www.labofapenetrationtester.com/2017/08/week-of-evading-microsoft-ata-day1.xhtml)'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '躲避Microsoft ATA: [http://www.labofapenetrationtester.com/2017/08/week-of-evading-microsoft-ata-day1.xhtml](http://www.labofapenetrationtester.com/2017/08/week-of-evading-microsoft-ata-day1.xhtml)'
- en: 'Abuse MDI: [https://www.youtube.com/watch?v=bzLvOu1awKM](https://www.youtube.com/watch?v=bzLvOu1awKM)'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '滥用MDI: [https://www.youtube.com/watch?v=bzLvOu1awKM](https://www.youtube.com/watch?v=bzLvOu1awKM)'
- en: 'Deploy deception research: [http://www.labofapenetrationtester.com/2018/10/deploy-deception.xhtml](http://www.labofapenetrationtester.com/2018/10/deploy-deception.xhtml)'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '部署欺骗研究: [http://www.labofapenetrationtester.com/2018/10/deploy-deception.xhtml](http://www.labofapenetrationtester.com/2018/10/deploy-deception.xhtml)'
- en: 'Deploy Deception tool: [https://github.com/samratashok/Deploy-Deception](https://github.com/samratashok/Deploy-Deception)'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '部署欺骗工具: [https://github.com/samratashok/Deploy-Deception](https://github.com/samratashok/Deploy-Deception)'
- en: 'Group Policy configuration for AD honey tokens: [https://www.bordergate.co.uk/active-directory-honey-tokens/](https://www.bordergate.co.uk/active-directory-honey-tokens/)'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '用于AD蜜罐令牌的组策略配置: [https://www.bordergate.co.uk/active-directory-honey-tokens/](https://www.bordergate.co.uk/active-directory-honey-tokens/)'
- en: 'HoneypotBuster: [https://github.com/JavelinNetworks/HoneypotBuster](https://github.com/JavelinNetworks/HoneypotBuster)'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'HoneypotBuster: [https://github.com/JavelinNetworks/HoneypotBuster](https://github.com/JavelinNetworks/HoneypotBuster)'
- en: 'DCEPT: [https://github.com/secureworks/dcept](https://github.com/secureworks/dcept)'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'DCEPT: [https://github.com/secureworks/dcept](https://github.com/secureworks/dcept)'
- en: 'HoneyHash: [https://github.com/EmpireProject/Empire/blob/dev/data/module_source/management/New-HoneyHash.ps1](https://github.com/EmpireProject/Empire/blob/dev/data/module_source/management/New-HoneyHash.ps1)'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'HoneyHash: [https://github.com/EmpireProject/Empire/blob/dev/data/module_source/management/New-HoneyHash.ps1](https://github.com/EmpireProject/Empire/blob/dev/data/module_source/management/New-HoneyHash.ps1)'
- en: How to detect honey hash:[https://stealthbits.com/blog/implementing-detections-for-the-honeyhash/](https://stealthbits.com/blog/implementing-detections-for-the-honeyhash/)
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '如何检测蜜罐哈希: [https://stealthbits.com/blog/implementing-detections-for-the-honeyhash/](https://stealthbits.com/blog/implementing-detections-for-the-honeyhash/)'
- en: Further reading
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'These will aid further study and allow you to dive deeper into the attacks
    covered in the chapter:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这些资料将帮助你进一步学习，并让你能够更深入地了解本章涉及的攻击内容：
- en: 'More details about WMI from Microsoft: [https://learn.microsoft.com/en-us/windows/win32/wmisdk/about-wmi](https://learn.microsoft.com/en-us/windows/win32/wmisdk/about-wmi)'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Microsoft的WMI详细信息: [https://learn.microsoft.com/en-us/windows/win32/wmisdk/about-wmi](https://learn.microsoft.com/en-us/windows/win32/wmisdk/about-wmi)'
- en: 'Enumerate Active Directory using WMI: [https://0xinfection.github.io/posts/wmi-ad-enum/](https://0xinfection.github.io/posts/wmi-ad-enum/)'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '使用WMI枚举Active Directory: [https://0xinfection.github.io/posts/wmi-ad-enum/](https://0xinfection.github.io/posts/wmi-ad-enum/)'
- en: 'LDAP APIs in Windows: [https://learn.microsoft.com/en-us/previous-versions/windows/desktop/ldap/lightweight-directory-access-protocol-ldap-api](https://learn.microsoft.com/en-us/previous-versions/windows/desktop/ldap/lightweight-directory-access-protocol-ldap-api)'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Windows中的LDAP API: [https://learn.microsoft.com/en-us/previous-versions/windows/desktop/ldap/lightweight-directory-access-protocol-ldap-api](https://learn.microsoft.com/en-us/previous-versions/windows/desktop/ldap/lightweight-directory-access-protocol-ldap-api)'
