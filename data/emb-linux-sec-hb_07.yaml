- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: The Trusted Platform Module
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 受信平台模块
- en: Commonly just called **TPM**, short for **Trusted Platform Module**, this security-focused
    microcontroller chipset uses advanced cryptography to store critical or sensitive
    information. This could be in the form of credentials, passwords, biometrics,
    encryption keys, or other very sensitive data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通常简称为**TPM**，即**受信平台模块**，这种专注于安全的微控制器芯片组使用先进的加密技术来存储重要或敏感信息。这些信息可能是凭证、密码、生物识别数据、加密密钥或其他非常敏感的数据。
- en: The exercises in this chapter will challenge your perceptions of what can or
    should be automated in an appliance. In this chapter, we will build upon methodologies
    to leverage this tool to further automate your encrypted passphrase authentication
    within your solutions, as initially introduced in [*Chapter 6*](B22104_06.xhtml#_idTextAnchor213).
    TPM, when leveraged properly, can become your enabler to a higher level of security
    and positive end-user experience. That said, TPM is not without its drawbacks
    and eccentric warts. It is notoriously not user-friendly and, sometimes, some
    of its registers can be unreliable. Whether or not this is a hardware or software
    issue, I know not. Regardless, I will demonstrate how to manipulate it for success.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的练习将挑战你对家电中可以或应该自动化的内容的认知。在本章中，我们将基于方法论，利用这个工具进一步自动化你在解决方案中的加密密码短语认证，正如在[*第六章*](B22104_06.xhtml#_idTextAnchor213)中最初介绍的那样。当TPM得当使用时，它可以成为你实现更高安全性和良好用户体验的催化剂。话虽如此，TPM并非没有缺点和怪异之处。它
    notoriously 不够用户友好，有时它的一些寄存器可能不可靠。无论这是硬件问题还是软件问题，我无法确定。无论如何，我将演示如何操作它以实现成功。
- en: 'Whether you choose to leverage TPM or not is not a simple decision to make.
    Weigh the pros and cons. It can truly take your appliance to the next level if
    you let it. This chapter will have the following headings:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是否选择利用TPM，都不是一个简单的决定。权衡利弊。如果你允许它，它确实可以将你的家电带到一个新的高度。本章将包括以下几个部分：
- en: What is TPM?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是TPM？
- en: Configuring TPM by example
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过示例配置TPM
- en: Let’s get started.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: What is TPM?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是TPM？
- en: Beyond being one of hundreds of chips on your motherboard that most people could
    never identify, TPM is rapidly becoming a mission-essential tool for most operating
    systems. As of this book’s writing, the average Linux system does not even require
    you to have TPM activated. Other operating systems, such as Microsoft Windows
    11, actually require it for the operating system to be installed.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 超越作为你主板上数百个芯片中的一个，大多数人甚至无法识别的TPM，它正在迅速成为大多数操作系统的重要工具。在本书写作时，普通的Linux系统甚至不需要你激活TPM。而其他操作系统，比如Microsoft
    Windows 11，实际上要求它才能安装操作系统。
- en: TPM provides mechanisms to securely store a variety of information securely.
    These objects can be (but are not limited to) license keys, user credentials,
    encryption keys, or other types of data that provide for the consumption of said
    data without user interactions.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: TPM提供了机制来安全存储各种信息。这些对象可以是（但不限于）许可证密钥、用户凭证、加密密钥或其他类型的数据，这些数据允许在没有用户互动的情况下进行消费。
- en: There are different types of TPM implementation – firmware, discrete, and integrated
    TPM. TPM can also be done via software (aka virtual TPM) but it can possibly be
    worked around since it has no more protection than any other software programs
    running on top of your operating system. Avoid software TPM unless it’s a last
    resort.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: TPM的实现有不同类型——固件TPM、离散TPM和集成TPM。TPM还可以通过软件实现（即虚拟TPM），但由于它没有比运行在操作系统上的任何其他软件程序更多的保护，因此可能会被绕过。除非是最后的手段，否则避免使用软件TPM。
- en: '**Firmware TPMs** take advantage of the system CPU’s trusted execution functions.
    This, by default, creates what is known as a **trust anchor** for that system.
    These can only be cleared by being physically present at the console and cleared
    out via setting in the **UEFI BIOS**. These are the most commonly found – in my
    opinion, the most reliable as well.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**固件TPM**利用系统CPU的受信执行功能。默认情况下，这会创建一个被称为**信任锚**的系统元素。这些只能通过物理到控制台并通过**UEFI BIOS**设置清除。这些是最常见的——在我看来也是最可靠的。'
- en: '**Discrete TPMs** are similar to firmware-based TPMs except that they are controlled
    outside of the UEFI BIOS through other APIs and software. Discrete TPMs leverage
    functionality within your CPU itself rather than the firmware. If you replace
    your CPU or change your operating system, you will lose all the TPM data previously
    stored. Otherwise, these are virtually just as good as those in one’s firmware.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**独立TPM**类似于基于固件的TPM，只不过它们是通过其他API和软件在UEFI BIOS之外进行控制。独立TPM利用的是CPU本身的功能，而非固件。如果更换CPU或更改操作系统，您将丧失先前存储的所有TPM数据。否则，这些TPM功能几乎和固件中的TPM一样好。'
- en: Finally, there are the **integrated TPMs**; these are chipsets that perform
    many functions but also have the TPM functionality built in. This type of TPM
    functionality is the least common in the field.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，**集成TPM**出现了；这类芯片组执行许多功能，但也内建了TPM功能。这种类型的TPM功能在这一领域中最为少见。
- en: I’ve been asked *“Is using one over the others leaving oneself vulnerable?”*.
    The short and correct answer is that not using any TPM solution is what may leave
    one’s solution vulnerable. All TPM implementations work. Which you choose is solely
    based on your own criteria and what is available for your chosen platform.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾被问过*“选择使用其中一个会使自己更易受到攻击吗？”*。简短且正确的答案是，不使用任何TPM解决方案才可能使解决方案变得脆弱。所有TPM实现都有效，选择哪一个完全取决于您自己的标准以及您所选择的平台是否有该功能。
- en: Currently, the gold standard is TPM version 2.0\. TPM 2.0 is feature-rich and
    can store multiple keys and values. It is found virtually on all the latest servers,
    PCs, and laptops. Its algorithms and built-in cryptography are impressive.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的黄金标准是TPM 2.0。TPM 2.0功能丰富，能够存储多个密钥和值。它几乎出现在所有最新的服务器、PC和笔记本电脑中。其算法和内建加密技术令人印象深刻。
- en: Older systems may have the earlier implementation of TPM 1.2\. This version
    has limited capacity and lesser-strength cryptography, yet it is leaps and bounds
    better than not having anything.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 较旧的系统可能会使用较早版本的TPM 1.2。此版本容量有限，加密技术较弱，但它仍然远胜于没有任何TPM。
- en: Most government requirements standards globally set TPM 1.2 as a minimum requirement
    for any system that touches sensitive data. Of course, TPM 2.0 is requisite on
    the most sensitive platforms.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 全球大多数政府的要求标准将TPM 1.2设定为接触敏感数据的任何系统的最低要求。当然，TPM 2.0是最敏感平台的必要标准。
- en: Let’s now move on to a brief history of TPM.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们简要回顾一下TPM的发展历史。
- en: The history of TPM
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TPM的历史
- en: I’ll summarize a quick historical overview for you, and I’ll intentionally keep
    it brief and spare you any drudgery. TPM was the result of brainstorming by a
    technology industry think tank called *Trusted Computing Group* back in 2009\.
    This concept was turned into a global standard by the **International Organization
    for Standardization** (**ISO**) in conjunction with the **International Electrotechnical
    Commission** (**IEC**). Hence, TPM was born as *ISO/IEC 11889:2009*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我将为您总结一个简短的历史概述，并且会刻意保持简洁，避免任何繁琐内容。TPM是由一个名为*可信计算组*的技术行业智囊团在2009年进行头脑风暴的结果。这个概念在**国际标准化组织**（**ISO**）与**国际电工委员会**（**IEC**）的合作下转变为全球标准。因此，TPM诞生为*ISO/IEC
    11889:2009*。
- en: TPM 1.2 became a global standard back in 2011 and reigned for many years. It
    was only replaced by TPM 2.0 in 2019 as the *ISO/IEC 11889:2015* publication.
    Sadly, it is now considered insufficient and obsolete by most security organizations.
    I still say using a TPM 1.2 module is better than using nothing. So clearly, you
    can make your own decisions.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: TPM 1.2在2011年成为全球标准，并统治了许多年。直到2019年，*ISO/IEC 11889:2015*发布，才由TPM 2.0取而代之。遗憾的是，现在大多数安全组织认为它已经不足够且过时。我依然认为使用TPM
    1.2模块总比什么都不用要好。所以，显然，您可以根据自己的判断做出决定。
- en: 'Here’s a graphical description of how TPM works (credit, Wikipedia, [https://upload.wikimedia.org/wikipedia/commons/thumb/b/be/TPM.svg/2880px-TPM.svg.png](https://upload.wikimedia.org/wikipedia/commons/thumb/b/be/TPM.svg/2880px-TPM.svg.png)):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是TPM工作原理的图示（图片来源，维基百科，[https://upload.wikimedia.org/wikipedia/commons/thumb/b/be/TPM.svg/2880px-TPM.svg.png](https://upload.wikimedia.org/wikipedia/commons/thumb/b/be/TPM.svg/2880px-TPM.svg.png)）：
- en: '![Figure 7.1 – TPM description](img/B22104_07_1.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – TPM描述](img/B22104_07_1.jpg)'
- en: Figure 7.1 – TPM description
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – TPM描述
- en: TPM 2.0 is still, as of this book’s publishing, the global standard. The exercises
    in this chapter will solely focus on TPM version 2.0\. So, let’s move on to those
    exercises now.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 截至本书出版时，TPM 2.0仍然是全球标准。本章的练习将仅聚焦于TPM 2.0版本。现在，我们就开始这些练习吧。
- en: Configuring TPM by example
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过示例配置TPM
- en: In this exercise, we’ll implement the automation of a storage volume’s decryption
    by storing an encryption passphrase within the TPM securely. Doing such in a real-world
    appliance makes your solution more secure and prevents having to share the encryption
    passphrase with the public, hence, by nature, making your solution vastly more
    secure.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将通过将加密密码存储在 TPM 中来实现存储卷解密的自动化。这样做可以让你的解决方案更安全，并防止将加密密码与公众分享，从而本质上提高你的解决方案的安全性。
- en: Requirements for the exercise
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 练习要求
- en: For this lab, I installed Fedora40 (Workstation Edition) onto bare-metal hardware.
    During this installation, I created a 500 MiB encrypted XFS filesystem mounted
    onto `/data`. I used `TPMmaster2024` as the encryption key.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个实验，我将 Fedora40（工作站版）安装到裸机硬件上。在此安装过程中，我创建了一个 500 MiB 的加密 XFS 文件系统，并将其挂载到
    `/data`。我使用 `TPMmaster2024` 作为加密密钥。
- en: 'Here’s what that setup looked like during the creation process:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在创建过程中该设置的样子：
- en: '![Figure 7.2 – Encrypted filesystem setup during Fedora installation](img/B22104_07_2.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.2 – Fedora 安装过程中的加密文件系统设置](img/B22104_07_2.jpg)'
- en: Figure 7.2 – Encrypted filesystem setup during Fedora installation
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – Fedora 安装过程中的加密文件系统设置
- en: 'Upon completion of the installation, when the system boots, we are prompted
    to enter the **LUKS key** in order to boot and mount that filesystem:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，当系统启动时，我们会被提示输入 **LUKS 密钥**，以便启动并挂载该文件系统：
- en: '![Figure 7.3 – Entering the LUKS key manually at boot](img/B22104_07_3.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.3 – 在启动时手动输入 LUKS 密钥](img/B22104_07_3.jpg)'
- en: Figure 7.3 – Entering the LUKS key manually at boot
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – 在启动时手动输入 LUKS 密钥
- en: For this exercise, I recommend you add a really small LUKS encrypted partition
    to an existing test machine without doing a complete reinstall. It’s up to you.
    In my example, I’ve used a non-system partition/filesystem, but in production,
    you would be encrypting almost everything except for `/boot` and the EFI partition.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个实验，我建议你向现有的测试机器添加一个非常小的 LUKS 加密分区，而不是进行完整的重新安装。由你决定。在我的示例中，我使用了一个非系统分区/文件系统，但在生产环境中，你将加密几乎所有内容，除了
    `/boot` 和 EFI 分区。
- en: Exercise – enabling TPM 2 in conjunction with LUKS encryption
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 – 启用 TPM 2 与 LUKS 加密结合使用
- en: 'First, let’s ensure that your system actually has the correct hardware. We’ll
    browse the logs to see whether a TPM 2.0 module was found at the last boot cycle.
    If this doesn’t return good results, you may not have the requisite hardware for
    this exercise:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们确保你的系统确实拥有正确的硬件。我们将浏览日志，查看上一次启动周期是否检测到 TPM 2.0 模块。如果没有返回良好的结果，可能是你的硬件不符合这个实验的要求：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output for this command can be somewhat lengthy, so I will not be displaying
    all of the possible output here for this instance. The key thing to observe in
    the output you get from running the command is `TPM2`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令的输出可能会比较长，因此我不会展示所有可能的输出。在你运行命令后，最重要的是观察输出中的 `TPM2`：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Important note
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: If you didn’t get any `TPM2` output, it’s probably safe to say that your lab
    hardware is insufficient for the exercises in this chapter.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有收到任何 `TPM2` 输出，可能可以安全地说，你的实验硬件不足以支持本章的练习。
- en: 'Now that we’ve established you have a TPM version 2.0 module, let’s ensure
    it is set up properly in the UEFI BIOS. Reboot your machine, interrupt the boot
    process so that you can enter the UEFI BIOS setup, and then go to your TPM configuration:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经确认你有一个 TPM 2.0 模块，让我们确保它在 UEFI BIOS 中正确设置。重启你的计算机，打断启动过程以进入 UEFI BIOS
    设置，然后找到 TPM 配置：
- en: '![Figure 7.4 – UEFI BIOS – setting up TPM](img/B22104_07_4.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.4 – UEFI BIOS – 设置 TPM](img/B22104_07_4.jpg)'
- en: Figure 7.4 – UEFI BIOS – setting up TPM
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4 – UEFI BIOS – 设置 TPM
- en: You may have more than one option for TPM; if so, choose **Firmware TPM** over
    **Discrete TPM**. Set the chipset to **Enabled**, and to ensure that there’s nothing
    legacy left inside the chip, clear it before proceeding. Do not forget to save
    and exit your UEFI BIOS (and reboot).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会有多个 TPM 选项；如果是这样，选择 **Firmware TPM** 而不是 **Discrete TPM**。将芯片组设置为 **Enabled**，并确保清除芯片内的任何旧数据，然后再继续。别忘了保存并退出
    UEFI BIOS（并重启）。
- en: 'Let’s install the packages we’ll need to automate the decryption process leveraging
    our TPM:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们安装所需的包来利用 TPM 自动化解密过程：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output for this is rather lengthy, so I have truncated what is displayed.
    What is important is that your package installations are completed successfully:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个输出相当长，所以我已经将显示的内容进行了截断。需要注意的是，包安装必须成功完成：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We’re not done yet. There are more packages that we must ensure are installed
    properly:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '我们还没有完成。还有更多的软件包需要确保正确安装：  '
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output for this command is rather verbose, so I have truncated it to only
    show what I recommend that you check for on your execution (i.e., the package
    installations completed successfully – please note that some packages may already
    have been installed previously depending on how you configured your lab machine):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '该命令的输出内容较为冗长，因此我已将其截断，只显示我建议你在执行过程中检查的内容（即，软件包安装已成功完成——请注意，某些软件包可能已经预先安装，这取决于你如何配置实验机器）：  '
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, we’ll need to determine the exact device name for our encrypted device:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，我们需要确定加密设备的确切设备名称：  '
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This command is rather important in its lengthy output as it will guide you
    as to how your disks are carved out and the sizes of filesystems:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '该命令的输出内容相当重要，因为它将引导你了解磁盘如何分配以及文件系统的大小：  '
- en: Important note
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '重要提示  '
- en: Your system’s output might vary from the results I have – make note of how your
    disks are carved out. This will be important in this exercise.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '你的系统输出可能与我的结果不同——请注意你如何分配磁盘。这在本练习中非常重要。  '
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: So, for example, my block device is `/dev/sda8` (please note that yours will
    be different).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '例如，我的块设备是`/dev/sda8`（请注意，你的设备名会有所不同）。  '
- en: 'We’ll take that information and feed it into the next command, which will bind
    our key into TPM:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '我们将把这些信息输入到下一个命令中，该命令会将我们的密钥绑定到TPM中：  '
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Please note that this command will ask you to authenticate to use elevated
    permissions. Then, it will ask you to confirm the existing LUKS passphrase you
    wish to use to automatically decrypt the volume:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '请注意，此命令将要求你进行身份验证以使用提升的权限。然后，它会要求你确认希望用于自动解密卷的现有LUKS密码：  '
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, let’s tell `systemd` to always use the TPM2 module first when trying to
    access that drive:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们告诉`systemd`在尝试访问该驱动器时始终优先使用TPM2模块：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This command will ask you to confirm the existing LUKS passphrase:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '此命令将要求你确认现有的LUKS密码：  '
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: All right, we’re not done yet. We’ll use `dracut` to regenerate the proper settings
    for booting.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '好的，我们还没有完成。我们将使用`dracut`重新生成正确的启动设置。  '
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Again, the output for this will be exhaustingly extensive, but I do ask that
    you pay close attention to your own output results. Here, I will truncate my results
    and only highlight the end state:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '同样，该命令的输出将非常冗长，但我确实要求你密切关注你自己的输出结果。在这里，我将截断我的结果并仅突出显示最终状态：  '
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now we’ve configured the new booting parameters and kernel image, it’s time
    to reboot your system. If all goes well, you will *not* be prompted to enter your
    LUKS password (it’ll be done for you automatically thanks to TPM):'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '现在我们已经配置了新的启动参数和内核映像，是时候重新启动系统了。如果一切顺利，你将*不会*被要求输入LUKS密码（它会通过TPM自动为你完成）：  '
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Important note
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '重要提示  '
- en: TPM2 can be rather problematic. Depending on your system, it’s common to have
    to rebind LUKS passphrases with `clevis` after some patching cycles.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 'TPM2可能会比较麻烦。根据你的系统情况，常常需要在一些修补周期后，使用`clevis`重新绑定LUKS密码。  '
- en: TPM is known to be troublesome, if not uncooperative, to Linux. Many Linux developers
    are working hard to iron out the issues. I suspect that, in the near future, as
    these issues are resolved, we’ll see some distributions forcing TPM2 usage in
    the same manner that Windows does today.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '众所周知，TPM对Linux来说是一个麻烦，甚至是难以合作的技术。许多Linux开发者正在努力解决这些问题。我怀疑，在不久的将来，随着这些问题的解决，我们将看到一些发行版像今天的Windows一样强制使用TPM2。  '
- en: I trust you enjoyed this platform exercise module. (See what I did there? Dad
    jokes – sorry, hahaha!)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '我相信你享受了这个平台练习模块。（看到了吧？父亲笑话——抱歉，哈哈哈！）  '
- en: Summary
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '总结  '
- en: In this chapter, we covered TPM, its versions, and its history. I kept it brief
    in order to not bore you to death. The point of this book is to help you understand
    how to make things more secure rather than being an anthology of technological
    evolution.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '在本章中，我们介绍了TPM、其版本和历史。我尽量简洁，以免让你感到无聊。本书的目的是帮助你了解如何提高安全性，而不是作为技术演变的编年史。  '
- en: You got a rare glimpse into how this understated TPM technology can aid you
    in automating your appliance’s security. Although TPM is an imperfect solution,
    it has its merits and its risks. More importantly, you should consider implementing
    TPM to automate your encrypted filesystems with your product.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '你获得了一瞥这种低调的TPM技术如何帮助你自动化设备的安全性。尽管TPM并不是一个完美的解决方案，但它有其优点和风险。更重要的是，你应该考虑实施TPM来自动化你的加密文件系统。  '
- en: In our next chapter, we’ll go even deeper into disk encryption functionality.
    Let’s move on.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨磁盘加密功能。让我们继续。
- en: Join our community on Discord
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们社区的 Discord
- en: 'Join our community’s Discord space for discussions with the authors and other
    readers:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的 Discord 空间，与作者和其他读者讨论：
- en: '[https://packt.link/embeddedsystems](https://packt.link/embeddedsystems)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/embeddedsystems](https://packt.link/embeddedsystems)'
- en: '![](img/B22104_Discord_QR.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22104_Discord_QR.jpg)'
