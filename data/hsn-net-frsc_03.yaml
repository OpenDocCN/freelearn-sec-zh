- en: Technical Concepts and Acquiring Evidence
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术概念与证据获取
- en: In the previous chapter, we learned about the various types of evidence sources.
    In this chapter, we will look at those sources in detail. We will familiarize
    ourselves with the basics of different types of log formats and look at the various
    technical key concepts required to conduct a network forensics exercise successfully.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章，我们学习了各种类型的证据来源。在本章中，我们将详细了解这些来源。我们将熟悉不同类型日志格式的基础知识，并了解进行网络取证所需的各种技术关键概念。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Inter-networking refresher
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络互联基础知识
- en: Exposure to various types of logs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接触各种类型的日志
- en: Case studies on logs and packet structures
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志和数据包结构的案例分析
- en: So, let's get started with the basics of inter-networking and understand how
    communications take place with respect to the OSI networking model.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们从网络互联的基础开始，了解如何根据OSI网络模型进行通信。
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To complete the exercises illustrated in this chapter, you will require the
    following software:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成本章所示的练习，您将需要以下软件：
- en: Apache Log Viewer ([https://www.apacheviewer.com/](https://www.apacheviewer.com/))
    installed on Windows 10
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows 10上安装的Apache Log Viewer ([https://www.apacheviewer.com/](https://www.apacheviewer.com/))
- en: Sawmill ([http://www.sawmill.net/cgi-bin/download.pl](http://www.sawmill.net/cgi-bin/download.pl))
    installed on Windows 10
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows 10上安装的Sawmill ([http://www.sawmill.net/cgi-bin/download.pl](http://www.sawmill.net/cgi-bin/download.pl))
- en: Kali Linux on VMware Workstation/Player or Virtual Box
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在VMware Workstation/Player或Virtual Box上安装的Kali Linux
- en: Wireshark ([https://www.wireshark.org/download.html?aktime=1551312054](https://www.wireshark.org/download.html?aktime=1551312054))
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wireshark ([https://www.wireshark.org/download.html?aktime=1551312054](https://www.wireshark.org/download.html?aktime=1551312054))
- en: Download files for this chapter from [https://github.com/nipunjaswal/networkforensics/tree/master/Ch2](https://github.com/nipunjaswal/networkforensics/tree/master/Ch2)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从[https://github.com/nipunjaswal/networkforensics/tree/master/Ch2](https://github.com/nipunjaswal/networkforensics/tree/master/Ch2)下载本章的文件
- en: The inter-networking refresher
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络互联基础知识
- en: 'The **open systems interconnection** (**OSI**), model is built for the network
    based digital communication and keeps flexibility and modularity in mind. The
    OSI model is a seven-layered design, starting from the physical layer and ending
    at the application layer. A high-level diagram of the OSI layers can be viewed
    as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**开放系统互联（OSI）**模型是为基于网络的数字通信而构建的，并考虑到灵活性和模块化。OSI模型是一个七层设计，从物理层开始，直到应用层结束。OSI层的高级图示如下：'
- en: '![](img/17bee791-3350-484b-a16d-6d3709b38a11.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17bee791-3350-484b-a16d-6d3709b38a11.png)'
- en: 'The seven layers are responsible for a variety of different communication standards
    as:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 七层模型负责各种不同的通信标准，如下所示：
- en: At the physical layer, we are generally speaking about the cables, hubs, optical
    fibers, coaxial cables, and connectors, which are the actual physical carriers
    of data, and the data is represented in bits.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在物理层，我们通常讨论的是电缆、集线器、光纤、同轴电缆和连接器，这些是数据的实际物理载体，数据以比特的形式表示。
- en: At the data-link layer, we have **802.11**, **WI-MAX**, **ATM**, **Ethernet**,
    **Token Ring**, **PPTP**, **L2TP**, and much more, which enables establishment
    and termination between the nodes. The data is represented in frames.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数据链路层，我们有**802.11**、**WI-MAX**、**ATM**、**以太网**、**令牌环**、**PPTP**、**L2TP**等，它们可以在节点之间建立和终止连接。数据以帧的形式表示。
- en: At the network layer, we have the **IPv4**, **IPv6**, **OSPF**, **ICMP**, and **IGMP**
    sets of protocols, which manage logical, physical address mappings, routing, and
    frame fragmentations. The data is in the form of packets.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在网络层，我们有**IPv4**、**IPv6**、**OSPF**、**ICMP**和**IGMP**协议集，它们管理逻辑和物理地址映射、路由和帧分片。数据以包的形式表示。
- en: At the transport layer, we have **TCP** and **UDP**, which allow message segmentation,
    message acknowledgment, host-to-host communication, and message-traffic control.
    The data is represented in segments.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在传输层，我们有**TCP**和**UDP**，它们允许消息分段、消息确认、主机到主机的通信和消息流量控制。数据以段的形式表示。
- en: At the session layer, we have **SAP**, **PPTP**, **RTP**, and **SOCKS**. It
    is responsible for session establishment, maintenance, and termination.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在会话层，我们有**SAP**、**PPTP**、**RTP**和**SOCKS**。它负责会话的建立、维护和终止。
- en: The presentation layer has **SSL/TLS**, **WEP**, **WPA**, **Kerberos**, **MIME**,
    and other implementations and is generally responsible for character-code translations,
    data conversation, compression, and encryption.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表示层包括**SSL/TLS**、**WEP**、**WPA**、**Kerberos**、**MIME**等实现，通常负责字符编码转换、数据会话、压缩和加密。
- en: At the application layer, we have **DHCP**, **FTP**, **HTTP**, **IMAP**, **POP3**,
    **NTP**, **SSH**, and **TELNET**, the end-user programs.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在应用层，我们有**DHCP**、**FTP**、**HTTP**、**IMAP**、**POP3**、**NTP**、**SSH**和**TELNET**等终端用户程序。
- en: 'The OSI model and the TCP/IP model can be collectively viewed as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: OSI模型和TCP/IP模型可以如下图所示整体查看：
- en: '![](img/0373936e-14ab-4252-9954-622c1fa0e2f4.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0373936e-14ab-4252-9954-622c1fa0e2f4.png)'
- en: The mapping of OSI model and TCP/IP model isn't perfect. SSL/TLS, for example,
    contains elements from both the presentation and session layers. From launching
    any of the application on your system which communicates with the outside world
    it all goes through the previously discussed layers. Consider a scenario where
    you want to browse to a particular website.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: OSI模型和TCP/IP模型的映射并不完美。例如，SSL/TLS包含了表示层和会话层的元素。从启动任何与外界通信的应用程序开始，所有数据都经过前面讨论的各层。考虑一个场景，你想浏览某个特定网站。
- en: In this case, when you type a website's address into your browser, which is
    a layer 7 application, the domain name gets resolved to the IP address.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这种情况下，当你在浏览器中输入一个网站地址时，这是一个第七层的应用程序，域名会解析成IP地址。
- en: Once you have the IP address of the destination, the data is encapsulated within
    the TCP/UDP data structure consisting of TCP/UDP header and data is passed to
    the transport layer where the OS embeds the source and destination ports data
    into the packet structure.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你获得了目标的IP地址，数据就被封装在TCP/UDP数据结构中，包含TCP/UDP头信息，然后传递给传输层，在这里操作系统将源和目标端口的数据嵌入到数据包结构中。
- en: Next, the structure is passed to network layer, where the source and destination
    IP address are embedded to the structure and is encapsulated within an IP packet.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，结构被传递到网络层，源IP地址和目标IP地址被嵌入到结构中，并封装在IP数据包内。
- en: The entire packet is changed into an Ethernet frame on layer 2 and then finally
    travels in the form of bits on the wire.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整个数据包在第二层被转换成以太网帧，然后最终以比特流的形式通过线缆传输。
- en: On the receiving end, the bits are first transformed into an Ethernet frame,
    and layer 2 information is removed and is sent to the network layer.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在接收端，首先将比特流转换成以太网帧，去除第二层信息后，发送到网络层。
- en: At the network layer, the packet is checked that if it is meant for the system
    and if it is, the system removes the layer 3 information, which is the IP packet
    header, and pushes it to layer 4 from where the OS identifies the port number
    it is meant to be delivered to.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网络层，检查数据包是否是系统所需的，如果是，系统会去除第三层信息，即IP包头，并将其推送到第四层，操作系统识别目标端口号并将其交付给相应端口。
- en: From here, the OS identifies the port, removes the TCP header information, checks
    which program is listening on that port, and delivers the payload to the application.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这里，操作系统识别端口，去除TCP头信息，检查哪个程序在该端口上监听，并将有效负载传递给应用程序。
- en: However, when the information travels from one point to the other, it creates
    **traces** (logs) on various devices along the way. These devices can be firewalls,
    proxy servers, routers, switches, or application servers, and since we covered
    some basic packet-based network forensics in the previous chapter, let's look
    at the log-based evidence scenarios.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当信息从一个点传输到另一个点时，它会在途中各个设备上留下**痕迹**（日志）。这些设备可能是防火墙、代理服务器、路由器、交换机或应用服务器，由于我们在上一章中已讨论了一些基于数据包的网络取证，接下来我们来看看基于日志的证据场景。
- en: For more information on the OSI model, refer to [https://www.webopedia.com/quick_ref/OSI_Layers.asp](https://www.webopedia.com/quick_ref/OSI_Layers.asp).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有关OSI模型的更多信息，请参阅 [https://www.webopedia.com/quick_ref/OSI_Layers.asp](https://www.webopedia.com/quick_ref/OSI_Layers.asp)。
- en: Log-based evidence
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于日志的证据
- en: 'In the previous chapter, we looked at various network protocol captures that
    define evidence in motion or data captured while in action. However, it is crucial
    for a network forensic investigator to have a brief knowledge of the various types
    of logs generated at the endpoints while traveling. These logs prove to be extremely
    handy when the scenario doesn''t contain network captures, and it is up to the
    investigator to deduce and conclude the forensic investigation and reach a definitive
    result. Consider a situation where a company named Acme Inc. has faced a massive
    breach of customer data through its website, and the company hasn''t kept any
    packet-capture files for the incoming data. In such cases, the forensic investigation
    solely relies on the logs generated at various endpoints, such as application
    servers, databases, and firewalls, as shown in the following diagram:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们研究了定义动态证据或捕获的数据的各种网络协议捕获。然而，对于网络取证调查员来说，了解在数据传输过程中各端点生成的不同类型日志非常重要。当场景中没有网络捕获数据时，这些日志显得尤为重要，调查员需要依靠这些日志来推理、得出结论并完成取证调查。假设一家名为Acme
    Inc.的公司遭遇了通过其网站的大规模客户数据泄露，而公司并没有保存任何有关进入数据的包捕获文件。在这种情况下，取证调查完全依赖于在各端点生成的日志，如应用服务器、数据库和防火墙，正如下图所示：
- en: '![](img/e2f02246-3cc9-4ad7-91a3-960a727e98f5.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e2f02246-3cc9-4ad7-91a3-960a727e98f5.png)'
- en: In the preceding scenario, we can see that the attacker has attacked an externally-hosted
    application server, which makes a connection to an internal network for database
    access that has limited connectivity to the external world, except for the application
    server.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述场景中，我们看到攻击者攻击了一个外部托管的应用服务器，该服务器与一个内部网络进行连接，以访问数据库，该数据库对外部世界的连接有限，除了应用服务器之外。
- en: 'In such scenarios, the following set of questions needs an answer:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，以下一组问题需要回答：
- en: How was the attacker able to penetrate the application server?
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 攻击者是如何渗透到应用服务器的？
- en: Why did the firewall allow access to the external attacker?
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么防火墙允许外部攻击者访问？
- en: What set of queries did the attacker execute on the database?
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 攻击者在数据库上执行了哪些查询？
- en: Did the attacker alter the database?
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 攻击者是否修改了数据库？
- en: Can we identify the origin of the attack?
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们能否识别出攻击的来源？
- en: To answer the preceding questions, we will require access to the logs of the
    external application server, and since the firewall permitted access to the attacker,
    we will need access to the firewall logs. The attacker executed queries on the
    database. Therefore, we will expect access to the database logs as well.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了回答前述问题，我们需要访问外部应用服务器的日志，由于防火墙允许攻击者访问，我们还需要访问防火墙日志。攻击者在数据库上执行了查询，因此我们还需要访问数据库日志。
- en: Application server logs
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用服务器日志
- en: 'As we saw in the previous scenario, the first point of attack was the externally-hosted
    application server. Let''s see what sort of logs are generated by common application
    servers, such as **Apache** and **NGINX**, and what we can deduce from those logs:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的场景中所见，攻击的第一点是外部托管的应用服务器。我们来看一下常见的应用服务器（如**Apache**和**NGINX**）生成的日志，并分析我们从这些日志中可以得出的结论：
- en: '![](img/1679418e-a0bb-4f02-b396-f964d886566f.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1679418e-a0bb-4f02-b396-f964d886566f.png)'
- en: 'In the preceding screenshot, we can see the Apache access logs file that reside
    mostly on the `/var/log/apache2/access.log` path. We can see a variety of incoming
    requests to the application. However, we can see that the logs are kept in a particular
    format, which is the IP address followed by the date and time, request type, requested
    resource file, HTTP version, response code, response length, and user agent. Since
    the user agent of the previous request is `DirBuster`, this denotes that the attacker
    is using `DirBuster` to scan the directory for interesting paths and to find hidden
    directories on the web application. A similar set of logs is available in the
    `error.log` file:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们可以看到Apache访问日志文件，通常存储在`/var/log/apache2/access.log`路径下。我们可以看到应用程序的各种请求。日志记录的格式是特定的，包括IP地址、日期和时间、请求类型、请求的资源文件、HTTP版本、响应代码、响应长度和用户代理。由于前一个请求的用户代理是`DirBuster`，这表明攻击者正在使用`DirBuster`扫描目录，以寻找有趣的路径并发现Web应用程序中的隐藏目录。类似的日志也可以在`error.log`文件中找到：
- en: '![](img/bdb3ec54-248d-447d-bce9-a71c4b66483d.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bdb3ec54-248d-447d-bce9-a71c4b66483d.png)'
- en: 'However, this log file contains entries that requests have generated errors.
    As we can see, the errors mostly contain permission-denied errors, which will
    result in a 403 response status, which means that the requested resource is forbidden.
    Looking at a raw log file doesn''t make much sense to us, and it will be a pain
    to investigate logs even if the file is as small as 10 MB. Therefore, to further
    investigate and drill down to the conclusions, we will use automated tools, such
    as Apache Logs Viewer ([https://www.apacheviewer.com/features/](https://www.apacheviewer.com/features/)):'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个日志文件包含请求生成的错误条目。正如我们所见，错误大多是权限拒绝错误，这将导致 403 响应状态，这意味着请求的资源被禁止。从原始日志文件中查看对我们意义不大，即使文件只有
    10MB，调查日志也会很麻烦。因此，为了进一步调查并深入得出结论，我们将使用自动化工具，如 Apache Logs Viewer ([https://www.apacheviewer.com/features/](https://www.apacheviewer.com/features/))：
- en: '![](img/14f6fcbd-dfc7-4476-89ec-65b4db5954b0.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/14f6fcbd-dfc7-4476-89ec-65b4db5954b0.png)'
- en: 'Let''s analyze the logs by adding the access/error log files to the software:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过将访问/错误日志文件添加到软件中来分析日志：
- en: '![](img/4fb9225d-f94c-4615-85da-a715d2508935.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4fb9225d-f94c-4615-85da-a715d2508935.png)'
- en: 'We can see that as soon as we open the log file, the software asks us to define
    any additional options, such as LogFormat and Date Range. Choose Common (default)
    for this analysis and press OK to continue:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，一旦打开日志文件，软件会要求我们定义任何额外的选项，例如 LogFormat 和日期范围。在此分析中选择 Common（默认），然后点击
    OK 继续：
- en: '![](img/91a0bcb9-f73b-4063-9ea1-ffae6e95d53b.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/91a0bcb9-f73b-4063-9ea1-ffae6e95d53b.png)'
- en: We can see that we have the log file parsed with ease and we can now apply various
    filters to it, such as only listing packets from a particular IP or the response
    status with a particular response code. We will make use of Apache Logs Viewer
    more in the upcoming chapters and exercises.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，我们已经轻松解析了日志文件，并且现在可以对其应用各种过滤器，比如仅列出来自特定 IP 的数据包或具有特定响应代码的响应状态。在接下来的章节和练习中，我们将更多地使用
    Apache Logs Viewer。
- en: We can also add the file remotely using the credentials if you have a licensed
    copy of the log viewer, which can be purchased from Apache Logs Viewer website
    at [https://www.apacheviewer.com/unlock/](https://www.apacheviewer.com/unlock/).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您拥有正版日志查看器的许可证，还可以使用凭证远程添加文件，日志查看器可以从 Apache Logs Viewer 网站购买，网址是 [https://www.apacheviewer.com/unlock/](https://www.apacheviewer.com/unlock/)。
- en: Database logs
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库日志
- en: 'We just saw how we could process basic application server logs. Let''s see
    how we can grab database logs and make the most of them in our forensic investigation.
    Database servers, such as MySQL and MS SQL, contain log files with information
    that helps a forensic investigator to understand the chain of events in a much
    better way. General query logs in MySQL present an investigator with all the queries
    that were executed during the time of the attack:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看到如何处理基本的应用程序服务器日志。现在，让我们看看如何获取数据库日志并在我们的取证调查中充分利用它们。像 MySQL 和 MS SQL 这样的数据库服务器包含包含有助于取证调查人员更好理解事件链的日志文件。MySQL
    中的通用查询日志提供了攻击期间执行的所有查询：
- en: '![](img/5d211ff2-07b5-4026-8a47-e8df0c2064bd.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d211ff2-07b5-4026-8a47-e8df0c2064bd.png)'
- en: 'We can see that the general query log file allows us to view failed attempts
    by the attacker to log into the MySQL server. However, it also suggests that there
    are two successful attempts. Let''s further investigate:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，通用查询日志文件允许我们查看攻击者登录 MySQL 服务器时的失败尝试。然而，它也表明有两次成功的登录尝试。我们需要进一步调查：
- en: '![](img/c3ed5200-1710-4312-977a-436060037088.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c3ed5200-1710-4312-977a-436060037088.png)'
- en: We can see that after the failed attempts, the attacker logged in and ran the
    preceding queries on the database. Query log files are convenient for pinpointing
    the actual intent of the attacker. In the upcoming chapters, we will look at numerous
    case study examples on various databases.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，在失败的尝试之后，攻击者登录并在数据库上运行了前面的查询。查询日志文件方便我们 pinpoint 攻击者的实际意图。在接下来的章节中，我们将通过大量案例研究来探讨各种数据库。
- en: 'On XAMPP, general query logs can be enabled by running the following query:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在 XAMPP 上，可以通过运行以下查询启用通用查询日志：
- en: '[PRE0]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here''s a better way to log all queries in MySQL:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这是记录 MySQL 中所有查询的更好方法：
- en: '[PRE1]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Firewall logs
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 防火墙日志
- en: There are plenty of firewalls you can encounter in a network infrastructure.
    Firewall logs can reveal a lot about an attack. I remember a case where a popular
    bank in Africa was siphoned off for $700,000, and the attackers were sitting inside
    the network for a long time before they executed the attack. After a thorough
    investigation to find the indicators of compromise and a root-cause analysis,
    firewall logs helped me out. I found that the checkpoint firewall logs had entries
    to a particular domain being contracted to by the planted backdoor. We ran a network-wide
    search on the firewall logs to find the first attempt to the domain and found
    out that the first attempt to the malicious attacker's site was at least three
    months before the date of the incident. However, since the computer making that
    connection was only connected to the internal network, we concluded that the attack
    was conducted by someone internally, which narrowed down the scope of our investigation
    to a handful of individuals.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络基础设施中，你可能会遇到各种防火墙。防火墙日志可以揭示很多关于攻击的信息。我记得曾处理过一起案件，非洲一家知名银行遭窃取 70 万美元，攻击者在执行攻击之前已经潜伏在网络内部很长时间。经过彻底调查，找到泄露的指标和根本原因分析后，防火墙日志帮了大忙。我发现
    checkpoint 防火墙日志中有记录显示特定域名被后门连接。我们在防火墙日志上进行了全网搜索，找到了第一次访问该域名的尝试，发现恶意攻击者的站点首次尝试连接至少是在事件发生前三个月。然而，由于发起连接的计算机仅连接到内部网络，我们得出结论：这次攻击是由内部人员实施的，这大大缩小了调查范围，仅剩下少数几个人。
- en: 'Parsing firewall logs and driving analytics is a tough task for an investigator.
    Most of the intelligent firewalls today have their analytics engine. However,
    if you need a third-party log parser for firewall logs, **Sawmill** ([http://www.sawmill.net](http://www.sawmill.net))
    would be my choice, as it supports a variety of log formats. Here is an example
    of Palo Alto Network Firewall logs parsed by Sawmill:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 解析防火墙日志并进行分析对调查员来说是一项艰巨的任务。如今，大多数智能防火墙都有自己的分析引擎。不过，如果你需要一个第三方的防火墙日志解析工具，**Sawmill**
    ([http://www.sawmill.net](http://www.sawmill.net)) 是我的首选，因为它支持多种日志格式。以下是 Sawmill
    解析的 Palo Alto 网络防火墙日志示例：
- en: '![](img/ac6eba7f-d311-4370-a50d-2f4da238416c.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac6eba7f-d311-4370-a50d-2f4da238416c.png)'
- en: 'We can see that we have a variety of options with the parsed logs:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，在解析的日志中有多种选择：
- en: '![](img/4d636c0d-db11-49b4-b192-22e9ead66907.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4d636c0d-db11-49b4-b192-22e9ead66907.png)'
- en: 'We have options that include User Summary, Host Summary, Source IPs, Users,
    and Content. We can also view visited pages:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有多个选项，包括用户摘要、主机摘要、源 IP、用户和内容。我们还可以查看访问的页面：
- en: '![](img/0e627bb2-44d7-45e3-93bd-49c70e59388a.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e627bb2-44d7-45e3-93bd-49c70e59388a.png)'
- en: Sawmill is a paid product. However, you can download and use the trial version
    free for 30 days. In the upcoming chapters, we will have a look at creating our
    parsers. However, to conduct a network forensic operation professionally, Sawmill
    is recommended.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Sawmill 是一款付费产品。不过，您可以下载并免费试用 30 天。在接下来的章节中，我们将查看如何创建解析器。然而，为了专业地进行网络取证操作，建议使用
    Sawmill。
- en: The Sawmill installation guide can be found at [http://www.sawmill.net/cgi-bin/sawmill8/docs/sawmill.cgi?dp+docs.technical_manual.installation+webvars.username+samples+webvars.password+sawmill](http://www.sawmill.net/cgi-bin/sawmill8/docs/sawmill.cgi?dp+docs.technical_manual.installation+webvars.username+samples+webvars.password+sawmill).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Sawmill 安装指南可以在 [http://www.sawmill.net/cgi-bin/sawmill8/docs/sawmill.cgi?dp+docs.technical_manual.installation+webvars.username+samples+webvars.password+sawmill](http://www.sawmill.net/cgi-bin/sawmill8/docs/sawmill.cgi?dp+docs.technical_manual.installation+webvars.username+samples+webvars.password+sawmill)
    查找。
- en: Proxy logs
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代理日志
- en: 'There can be various proxy servers in a network. One that stands out and is
    used widely is the **Squid proxy server**. According to the Squid website, it
    is a caching proxy that greatly reduces bandwidth and response timings in a network
    set up for services such as HTTP, HTTPS, and FTP. We will again use Sawmill to
    investigate proxy logs:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 网络中可能会有多种代理服务器。其中，**Squid 代理服务器**非常突出且被广泛使用。根据 Squid 网站的介绍，它是一种缓存代理，能够大幅减少带宽消耗和响应时间，适用于
    HTTP、HTTPS 和 FTP 等服务。我们将再次使用 Sawmill 来调查代理日志：
- en: '![](img/0702c900-30d9-441b-8046-745cedcd3fa9.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0702c900-30d9-441b-8046-745cedcd3fa9.png)'
- en: 'We can see that we have a variety of data, demonstrating the User Summary, Traffic,
    Page views, number of Sessions, and a variety of other useful data, such as Top
    level domain:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以看到，我们有多种数据，展示了用户摘要、流量、页面浏览量、会话数以及其他各种有用数据，比如顶级域名：
- en: '![](img/3f44aa63-ded6-421d-90f3-7019a3ca0d9b.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f44aa63-ded6-421d-90f3-7019a3ca0d9b.png)'
- en: 'We can also view the most frequently browsed URLs:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以查看最常浏览的 URLs：
- en: '![](img/4d3e35c1-3da2-4623-9dfc-e865a422af18.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4d3e35c1-3da2-4623-9dfc-e865a422af18.png)'
- en: 'You can filter logs on by date by clicking on Date Picker, selecting Relative
    date, and choosing a time frame:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过点击日期选择器来按日期过滤日志，选择相对日期，并选择时间范围：
- en: '![](img/f9115fb6-c105-42f9-94c6-ae47e2ec0121.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f9115fb6-c105-42f9-94c6-ae47e2ec0121.png)'
- en: 'Consider a scenario where you want to view the logs of a particular user on
    a particular URL. You can make use of the Zoom feature by enabling the following
    highlighted filters:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想查看某个特定用户在特定 URL 上的日志。你可以通过启用以下突出显示的过滤器来利用缩放功能：
- en: '![](img/61fb2154-3cf7-4f59-b7ce-730045e6147a.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/61fb2154-3cf7-4f59-b7ce-730045e6147a.png)'
- en: 'In the preceding screenshot, the blue circle with a black ring around it is
    the Zoom button, and a leading blue dot generally denotes a zoomed item. In the
    preceding screen, we can see two blue dots: one at the `bbabatop` user and another
    at the `geospecies.org` website. All we need to do next is press the Filter button:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中，蓝色圆圈带黑色环的是缩放按钮，而前导蓝点通常表示已缩放的项目。在前面的屏幕中，我们可以看到两个蓝点：一个位于`bbabatop`用户处，另一个位于`geospecies.org`网站上。接下来，我们只需要按下“过滤”按钮：
- en: '![](img/6d2b9aae-e269-4b2f-9373-b595efcfecb5.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d2b9aae-e269-4b2f-9373-b595efcfecb5.png)'
- en: 'We can see that the selected entries are now added as a filter and we need
    to save and apply to filter the entries out. An example filter on `babayomi` user
    for `yahoo.com` and while selecting Hours of day yields the following set of results:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，所选条目现在已作为过滤器添加，我们需要保存并应用该过滤器来筛选条目。例如，针对`babayomi`用户和`yahoo.com`的过滤器，并选择“小时”时，得到以下结果：
- en: '![](img/fc2e10f4-ab80-48c5-889d-3bebc541aa86.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fc2e10f4-ab80-48c5-889d-3bebc541aa86.png)'
- en: 'You can also view Date and time, Years, Months, and Days by building such filters,
    which becomes instrumental during an investigation. Consider a scenario where
    a malicious application is trying to download a payload from a website. In such
    cases, you will easily be able to track the first attempt for the download, thus
    finding the **Indicators of Compromise** (**IOCs**) and the first system that
    was compromised:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过构建这样的过滤器来查看日期和时间、年份、月份和天数，这在调查过程中非常有用。假设有恶意应用试图从网站下载有效负载。在这种情况下，你可以轻松追踪到第一次下载尝试，从而找到**入侵指标**（**IOCs**）和第一个被攻击的系统：
- en: '![](img/6fe0efed-f396-46e9-8515-0218f0baa641.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6fe0efed-f396-46e9-8515-0218f0baa641.png)'
- en: 'The first and only attempt to `windowsupdate.com` was made on September 8,
    2006\. Clicking on Hours of day, we get the following result:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对`windowsupdate.com`的第一次尝试发生在2006年9月8日。点击“小时”，我们得到以下结果：
- en: '![](img/add4fe67-b2ce-4a3a-86f0-73a2d7b6b40b.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/add4fe67-b2ce-4a3a-86f0-73a2d7b6b40b.png)'
- en: 'Clicking on the Usernames, we will be able to get the users who requested this
    website:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击用户名，我们将能够获取请求该网站的用户：
- en: '![](img/ac2f55cf-83f4-4743-b299-cffecc8169da.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac2f55cf-83f4-4743-b299-cffecc8169da.png)'
- en: 'We can see that the `nobody` and `femiadedeji` users made hits to the target
    domain. By building a filter on the `femiadedeji` user and the domain, we can
    select the Pages/directories to reveal the following:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以看到，`nobody`和`femiadedeji`用户访问了目标域名。通过建立一个针对`femiadedeji`用户和该域名的过滤器，我们可以选择页面/目录，从而显示如下内容：
- en: '![](img/694dfbf5-e12b-41d6-b83f-975cc1a5eadd.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/694dfbf5-e12b-41d6-b83f-975cc1a5eadd.png)'
- en: 'We can now confirm that the `femiadedeji` user accessed `windowsupdate.com`
    and downloaded files of the `.cab` and `.txt` types:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以确认`femiadedeji`用户访问了`windowsupdate.com`并下载了`.cab`和`.txt`类型的文件：
- en: '![](img/c0c01380-a6cb-4294-a2ca-b40afeb33316.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c0c01380-a6cb-4294-a2ca-b40afeb33316.png)'
- en: 'When we click on Usage Detail, we get the following:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们点击“使用详情”时，得到如下结果：
- en: '![](img/2614aac6-b870-4317-952f-e69b3d29346f.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2614aac6-b870-4317-952f-e69b3d29346f.png)'
- en: We can see that we now have plenty of detail related to the events.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到现在已经有很多与事件相关的详细信息。
- en: IDS logs
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IDS 日志
- en: 'Let''s make use of Sawmill again, this time to parse snort logs:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次使用Sawmill，这次解析snort日志：
- en: '![](img/8d67ccfc-27fb-4e16-99f7-021da20451a1.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d67ccfc-27fb-4e16-99f7-021da20451a1.png)'
- en: 'We will select Create New Profile, which will result in the following:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将选择创建新配置文件，这将导致如下结果：
- en: '![](img/40d55218-88de-4616-91df-badcee8527df.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/40d55218-88de-4616-91df-badcee8527df.png)'
- en: 'Select `Snort logs` and then press Next, which will show us the log-detection
    process:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`Snort 日志`，然后点击下一步，这将显示我们的日志检测过程：
- en: '![](img/bba69d87-6f99-4e41-87ae-3f165436160e.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bba69d87-6f99-4e41-87ae-3f165436160e.png)'
- en: 'On successfully detecting the log type, we will get the following options:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在成功检测到日志类型后，我们将获得以下选项：
- en: '![](img/32e6e489-5c44-4862-b454-4842a1d9a705.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/32e6e489-5c44-4862-b454-4842a1d9a705.png)'
- en: 'Select Sourcefire Snort 2 format and press Next. On the next screen, we will
    be presented with a message that states that the logs are in Syslog format. Now
    choose a name for the profile:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Sourcefire Snort 2格式并点击下一步。在下一个屏幕上，我们将看到一条消息，说明日志是Syslog格式。现在选择配置文件的名称：
- en: '![](img/98993582-1409-4282-8bea-abea8c29b614.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/98993582-1409-4282-8bea-abea8c29b614.png)'
- en: 'Click on the Finish button to start to create a database for the logs:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击完成按钮开始为日志创建数据库：
- en: '![](img/7e624288-90ec-4e5b-a0cb-97aa68387306.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7e624288-90ec-4e5b-a0cb-97aa68387306.png)'
- en: 'On selecting Process Data & View Reports, the following process gets initiated:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“处理数据并查看报告”后，以下过程将启动：
- en: '![](img/65bba61e-d36a-428d-9e89-d30a7779c003.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/65bba61e-d36a-428d-9e89-d30a7779c003.png)'
- en: 'Once the process is complete, we will be presented with the reports. Since
    we have worked extensively on the filters, I leave it as an exercise for you to
    perform on your own. However, before we move on, let''s discuss the Single-page
    Summary:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦过程完成，我们将看到报告。由于我们已经深入研究了过滤器，我将其作为练习留给你自己完成。然而，在我们继续之前，让我们讨论一下单页总结：
- en: '![](img/f65c80ca-2f65-41ba-84a5-3a1021dc58aa.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f65c80ca-2f65-41ba-84a5-3a1021dc58aa.png)'
- en: 'A Single-page Summary presenting most of the stats. We can see that we have
    the destination and source IP as the filter, and Sawmill has generated a summary
    for us to view. Interestingly, we have the following details in summary as well:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 一个展示大多数统计信息的单页总结。我们可以看到，Sawmill已为我们生成了目标和源IP的过滤器，并生成了一个总结供我们查看。有趣的是，我们在总结中也看到了以下细节：
- en: '![](img/8c63e0e8-76c4-4e23-bd39-44faa7c1550a.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c63e0e8-76c4-4e23-bd39-44faa7c1550a.png)'
- en: We can see that we filtered out a `Network Trojan` alert with ease. Let's now
    look at a case study and make use of the knowledge learned from the preceding
    log-analysis exercises.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以轻松筛选出一个`网络特洛伊`警报。现在让我们看一个案例研究，并运用从前面的日志分析练习中学到的知识。
- en: Case study – hack attempts
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 案例研究 – 黑客攻击尝试
- en: 'Consider a simple scenario where you are tasked with finding the origin of
    incoming attacks on a particular web application. The only thing you know about
    the network is that the application is internally hosted and is not connected
    to the outside world. There is a caching proxy running in the network as well.
    As the forensic investigator, the first thing you requested from the client is
    the logs of the application server, which you started to investigate in Apache
    Logs Viewer:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你面临一个简单的场景，需要找出对某个特定Web应用程序发起攻击的来源。你所知道的唯一网络信息是该应用程序内部托管，并未与外部世界连接。网络中有一个缓存代理服务器。作为法医调查员，你首先向客户请求应用服务器的日志，并开始在Apache日志查看器中进行调查：
- en: '![](img/2e1405ef-ac52-4516-9404-f7f82c2fefe7.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2e1405ef-ac52-4516-9404-f7f82c2fefe7.png)'
- en: Apache log viewer
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Apache日志查看器
- en: 'We quickly deduce that there are two IP addresses of supreme interest, `192.168.174.157`
    and `192.168.174.150`, and since the User-Agent contains `sqlmap`, it''s a SQL
    injection attempt. We can also see the requests that contain buzzwords, such as `WHERE` and `SELECT`,
    which are typically used in SQL injections on a vulnerable parameter. Upon further
    investigation and talking to the client, we see that the `192.168.174.150` IP
    is a caching proxy server. Therefore, we request the client for the proxy server
    logs, which can be investigated in the Sawmill software:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们迅速推断出有两个特别重要的IP地址，`192.168.174.157` 和 `192.168.174.150`，且由于用户代理包含`sqlmap`，这是一次SQL注入攻击尝试。我们还可以看到包含关键字，如
    `WHERE` 和 `SELECT` 的请求，这通常是SQL注入攻击中对易受攻击参数的尝试。经过进一步调查并与客户沟通，我们发现`192.168.174.150`是一个缓存代理服务器。因此，我们向客户请求了代理服务器的日志，可以在Sawmill软件中进行调查：
- en: '![](img/f7c5104a-1d49-4ef8-a6aa-ed416636d05a.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f7c5104a-1d49-4ef8-a6aa-ed416636d05a.png)'
- en: 'The attacker has made use of the proxy server to forward all the traffic to
    the target application. Making use of the proxy logs, we will be able to pinpoint
    the original IP that made the requests. Keep the URL as `192.168.174.142` as the
    filter and browsing to the source, which gives us the following information:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者利用代理服务器将所有流量转发到目标应用程序。通过代理日志，我们能够确定发起请求的原始IP。将`192.168.174.142`作为过滤器，并浏览源地址，得到以下信息：
- en: '![](img/45343091-8ff3-48eb-9cbf-9a23d7b2900f.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/45343091-8ff3-48eb-9cbf-9a23d7b2900f.png)'
- en: 'Again, we get the `192.168.174.157` IP address as the culprit. At this point,
    we are sure that the attack originated internally from this IP, so let''s investigate
    this IP address. Having gone through the server, we see the Apache server running
    on it and hosting a vulnerable app, which is `php-utility-belt`. We are pretty
    sure that someone obtained access to this machine through here. Let''s manually
    investigate the logs from Apache:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们得到了`192.168.174.157`的IP地址作为罪魁祸首。此时，我们已经确定攻击来源于这个内部IP，因此让我们调查这个IP地址。检查服务器后，我们发现它上面运行着Apache服务器，并且托管着一个存在漏洞的应用程序——`php-utility-belt`。我们相当确定某人是通过这个漏洞获得了对该机器的访问权限。让我们手动检查Apache的日志：
- en: '![](img/48899536-64f1-4f54-ac61-29cdee1c4772.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/48899536-64f1-4f54-ac61-29cdee1c4772.png)'
- en: 'We can see that only one IP address accessed the application on this server''s
    Apache, which is `192.168.174.152`. Let''s open Wireshark to see whether there
    are still any packets traveling to and from this IP:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，只有一个IP地址访问了该服务器上的Apache应用程序，即`192.168.174.152`。让我们打开Wireshark，看看是否还有数据包在这个IP地址之间传输：
- en: '![](img/e2681a90-953b-44fd-a04b-6910c83280e1.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e2681a90-953b-44fd-a04b-6910c83280e1.png)'
- en: Yes, there's plenty going around on port `4433` and `4444`. This confirms that
    the user of `192.168.174.152` is the culprit, as the system is not connected to
    the internet and has only internal access.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，`4433`和`4444`端口上有大量数据传输。这确认了`192.168.174.152`的用户就是罪魁祸首，因为该系统没有连接到互联网，只有内部访问。
- en: 'Throughout this case study, we saw how logs could be very helpful during the
    investigation process and reveal a lot about the incoming attacks. Creating a
    root-cause analysis gives us the following:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个案例研究中，我们看到了日志在调查过程中是如何帮助发现入侵攻击的。进行根本原因分析可以给出以下结论：
- en: '![](img/70217c38-cf76-497d-bdf4-ed20f1c2dbba.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/70217c38-cf76-497d-bdf4-ed20f1c2dbba.png)'
- en: The attacker attacked the PHP utility belt application that was running on the `192.168.174.157`
    system and gained access to the machine. Since the compromised system used the
    Squid proxy as a system-wide proxy, all the attacks to the application at the `192.168.174.142`
    server came through the proxy server at `192.168.174.150`. The Apache logs at
    `192.168.174.142` revealed `192.168.174.150`, and the Squid logs at `192.168.174.150`
    revealed `192.168.174.157`. Investigating the Apache logs on `192.168.174.157`
    finally revealed the attacker at `192.168.174.152`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者攻击了运行在`192.168.174.157`系统上的PHP工具带应用程序，并成功访问了该机器。由于受损系统使用Squid代理作为全局代理，所有对`192.168.174.142`服务器的应用程序攻击都通过了`192.168.174.150`的代理服务器。在`192.168.174.142`的Apache日志中揭示了`192.168.174.150`，而在`192.168.174.150`的Squid日志中揭示了`192.168.174.157`。进一步调查`192.168.174.157`上的Apache日志，最终揭示了攻击者为`192.168.174.152`。
- en: Summary
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We kicked off this chapter with an OSI model refresher, and since we covered
    basic network forensics scenarios in the previous chapter, we shifted our focus
    toward log-based analysis. We looked at a variety of log structures and learned
    about how we can parse them by making use of various types of software analyzers.
    We explored application-server logs, database logs, firewall logs, proxy server
    logs, and IDS logs. We also made use of the strategies learned in this chapter
    to solve the case study. We are now prepped with the basics of network forensics,
    and soon we'll dive into the advanced concepts.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章开始时回顾了OSI模型，既然在上一章我们已经涵盖了基础的网络取证场景，因此本章我们将重点转向基于日志的分析。我们探讨了各种日志结构，并了解了如何利用不同类型的软件分析器来解析这些日志。我们研究了应用服务器日志、数据库日志、防火墙日志、代理服务器日志以及IDS日志。我们还运用了本章学到的策略来解决案例研究。现在，我们已经掌握了网络取证的基础知识，很快就会深入学习更高级的概念。
- en: Questions and exercises
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题和练习
- en: 'To enhance your network forensics skills on log-based evidence, try answering/solving
    the following exercises and problems:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提升你在基于日志证据的网络取证技能，尝试回答/解决以下练习和问题：
- en: Try replicating all the exercises for the chapter by downloading the network
    evidence from the chapter's GitHub page
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试通过下载本章GitHub页面上的网络证据，复制本章的所有练习。
- en: Try highlighter tool to extract relevant information from [https://www.fireeye.com/services/freeware/highlighter.html](https://www.fireeye.com/services/freeware/highlighter.html)
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试使用高亮工具从[https://www.fireeye.com/services/freeware/highlighter.html](https://www.fireeye.com/services/freeware/highlighter.html)提取相关信息。
- en: Try developing a simple shell script to extract all the unique URLs from the
    Apache logs
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试开发一个简单的Shell脚本，从Apache日志中提取所有唯一的URL。
- en: Further reading
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Check out the following resources for more information on the topics covered
    in this chapter:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 查阅以下资源，了解本章节涉及的更多内容：
- en: '**Creating parsers**: [https://codehangar.io/smiple-log-and-file-processing-in-python/](https://codehangar.io/smiple-log-and-file-processing-in-python/)'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建解析器**：[https://codehangar.io/smiple-log-and-file-processing-in-python/](https://codehangar.io/smiple-log-and-file-processing-in-python/)'
- en: '**Log analysis**: Refer to chapter *Log Analysis*, in the book *Cybersecurity
    - Attack and Defense Strategies* ([https://www.amazon.in/Cybersecurity-Defense-Strategies-Infrastructure-security-ebook/dp/B0751FTY5B](https://www.amazon.in/Cybersecurity-Defense-Strategies-Infrastructure-security-ebook/dp/B0751FTY5B))'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志分析**：参见《*网络安全 - 攻防策略*》一书中的*日志分析*章节 ([https://www.amazon.in/Cybersecurity-Defense-Strategies-Infrastructure-security-ebook/dp/B0751FTY5B](https://www.amazon.in/Cybersecurity-Defense-Strategies-Infrastructure-security-ebook/dp/B0751FTY5B))'
