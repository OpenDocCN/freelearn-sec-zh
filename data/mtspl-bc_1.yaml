- en: Getting Started with Metasploit
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Metasploit
- en: '*"100 percent security" to remain a myth for long*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: “百分之百的安全”将长期保持神话
- en: '*                                                                         
                                     - Anupam Tiwari*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* - Anupam Tiwari*'
- en: Penetration testing is the art of performing a deliberate attack on a network,
    web application, server, or any device that requires a thorough check-up from
    a security perspective. The idea of a penetration test is to uncover flaws while
    simulating real-world threats. A penetration test is performed to figure out vulnerabilities
    and weaknesses in the systems so that vulnerable systems can stay immune to threats
    and malicious activities.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 渗透测试是对网络、Web应用程序、服务器或任何需要从安全角度进行彻底检查的设备进行有意的攻击的艺术。渗透测试的理念是在模拟真实世界的威胁的同时发现漏洞。渗透测试旨在发现系统中的漏洞和弱点，以使易受攻击的系统能够免受威胁和恶意活动的影响。
- en: Achieving success in a penetration test largely depends on using the right set
    of tools and techniques. A penetration tester must choose the right set of tools
    and methodologies in order to complete a test. While talking about the best tools
    for penetration testing, the first one that comes to mind is Metasploit. It is
    considered to be one of the most practical tools to carry out penetration testing
    today. Metasploit offers a wide variety of exploits, a great exploit development
    environment, information gathering and web testing capabilities, and much more.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在渗透测试中取得成功很大程度上取决于使用正确的工具和技术。渗透测试人员必须选择正确的工具和方法来完成测试。在谈论渗透测试的最佳工具时，首先想到的是Metasploit。它被认为是今天进行渗透测试的最实用工具之一。Metasploit提供了各种各样的利用、出色的利用开发环境、信息收集和Web测试能力等等。
- en: This chapter will help you understand the basics of penetration testing and
    Metasploit, which will help you warm up to the pace of this book.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将帮助您了解渗透测试和Metasploit的基础知识，这将帮助您适应本书的节奏。
- en: 'In this chapter, you will do the following:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将执行以下操作：
- en: Learn about using Metasploit in different phases of a penetration test
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解在渗透测试的不同阶段使用Metasploit
- en: Follow the basic commands and services associated with Metasploit
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循与Metasploit相关的基本命令和服务
- en: Gain knowledge of the architecture of Metasploit and take a quick look at the
    libraries
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Metasploit的架构并快速查看库
- en: Use databases for penetration test management
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数据库进行渗透测试管理
- en: Throughout the course of this book, I will assume that you have a basic familiarity
    with penetration testing and have at least some knowledge of Linux and Windows
    operating systems.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的过程中，我将假设您对渗透测试有基本的了解，并且对Linux和Windows操作系统至少有一些了解。
- en: 'Before we move onto Metasploit, let''s first set up our basic testing environment.
    We require two operating systems for this chapter:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们转向Metasploit之前，让我们首先建立我们的基本测试环境。本章需要两个操作系统：
- en: Kali Linux
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kali Linux
- en: Windows Server 2012 R2 with **Rejetto HTTP File Server** (**HFS**) 2.3 server
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows Server 2012 R2与**Rejetto HTTP文件服务器**（**HFS**）2.3服务器
- en: Therefore, let us quickly set up our environment and begin with the Metasploit
    jiu-jitsu.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们快速设置我们的环境，并开始Metasploit的柔道。
- en: Setting up Kali Linux in a virtual environment
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在虚拟环境中设置Kali Linux
- en: Before mingling with Metasploit, we need to have a test lab. The best idea for
    establishing a test lab is to gather different machines and install different
    operating systems on them. However, if we only have a single computer, the best
    idea is to set up a virtual environment.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在与Metasploit交互之前，我们需要一个测试实验室。建立测试实验室的最佳方法是收集不同的机器并在它们上安装不同的操作系统。但是，如果我们只有一台计算机，最好的方法是建立一个虚拟环境。
- en: Virtualization plays a major role in penetration testing today. Due to the high
    cost of hardware, virtualization plays a cost-effective role in penetration testing.
    Emulating different operating systems under the host operating system not only
    saves you cost but also cuts down on electricity and space. Setting up a virtual
    penetration test lab prevents any modifications on the actual host system and
    allows us to perform operations in an isolated environment. A virtual network
    allows network exploitation to run on an isolated network, thus preventing any
    modifications or the use of network hardware of the host system.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化在今天的渗透测试中扮演着重要角色。由于硬件成本高昂，虚拟化在渗透测试中起到了成本效益的作用。在主机操作系统下模拟不同的操作系统不仅可以节省成本，还可以节省电力和空间。建立虚拟渗透测试实验室可以防止对实际主机系统进行任何修改，并允许我们在隔离的环境中进行操作。虚拟网络允许网络利用在隔离的网络上运行，从而防止对主机系统的任何修改或使用网络硬件。
- en: Moreover, the snapshot feature of virtualization helps preserve the state of
    the virtual machine at a particular interval of time. Hence, snapshots prove to
    be very helpful, as we can compare or reload a previous state of the operating
    system while testing a virtual environment without reinstalling the entire software
    in case the files modify after attack simulation.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，虚拟化的快照功能有助于在特定时间间隔内保留虚拟机的状态。因此，快照被证明非常有用，因为我们可以在测试虚拟环境时比较或重新加载操作系统的先前状态，而无需重新安装整个软件，以防攻击模拟后文件修改。
- en: Virtualization expects the host system to have enough hardware resources, such
    as RAM, processing capabilities, drive space, and so on, to run smoothly.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化期望主机系统具有足够的硬件资源，如RAM、处理能力、驱动器空间等，以确保平稳运行。
- en: For more information on snapshots, refer to [https://www.virtualbox.org/manual/ch01.html#snapshots](https://www.virtualbox.org/manual/ch01.html#snapshots).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有关快照的更多信息，请参阅[https://www.virtualbox.org/manual/ch01.html#snapshots](https://www.virtualbox.org/manual/ch01.html#snapshots)。
- en: So, let us see how we can create a virtual environment with the Kali operating
    system (the most favored OS for penetration testing, which contains Metasploit
    Framework by default).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们看看如何使用Kali操作系统（最受欢迎的渗透测试操作系统，默认包含Metasploit Framework）创建虚拟环境。
- en: 'To create virtual environments, we need virtual emulator software. We can use
    either of the two most popular ones, VirtualBox and VMware Player. So, let us
    begin the installation by performing the following steps:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建虚拟环境，我们需要虚拟仿真器软件。我们可以使用两种最流行的软件之一，VirtualBox和VMware Player。因此，让我们通过执行以下步骤开始安装：
- en: Download VirtualBox ([http://www.virtualbox.org/wiki/Downloads](http://www.virtualbox.org/wiki/Downloads))
    and set it up according to your machine's architecture.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载VirtualBox ([http://www.virtualbox.org/wiki/Downloads](http://www.virtualbox.org/wiki/Downloads))，并根据您的机器架构进行设置。
- en: Run the setup and finalize the installation.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行设置并完成安装。
- en: 'Now, after the installation, run the VirtualBox program as shown in the following
    screenshot:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在安装后，按照以下截图显示的方式运行VirtualBox程序：
- en: '![](img/00196.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00196.jpeg)'
- en: Now, to install a new operating system, select New.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，要安装新的操作系统，请选择New。
- en: 'Type an appropriate name in the Name field and choose the operating system
    Type and Version, as follows:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名称字段中输入适当的名称，并选择操作系统类型和版本，如下所示：
- en: For Kali Linux, select Type as Linux and Version as Linux 2.6/3.x/4.x(64-bit)
    based on your system's architecture
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Kali Linux，根据您的系统架构选择类型为Linux和版本为Linux 2.6/3.x/4.x(64位)
- en: 'This may look something similar to what is shown in the following screenshot:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这可能看起来类似于以下截图所示的内容：
- en: '![](img/00197.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00197.jpeg)'
- en: Select the amount of system memory to allocate, typically 1 GB for Kali Linux.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择要分配的系统内存量，通常为1GB用于Kali Linux。
- en: The next step is to create a virtual disk that will serve as a hard drive to
    the virtual operating system. Create the disk as a dynamically allocated disk.
    Choosing this option will consume just enough space to fit the virtual operating
    system, rather than consuming the entire chunk of physical hard disk of the host
    system.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是创建一个虚拟磁盘，作为虚拟操作系统的硬盘。创建动态分配的磁盘。选择此选项将仅消耗足够的空间来容纳虚拟操作系统，而不是消耗主机系统的整个物理硬盘的大块空间。
- en: The next step is to allocate the size for the disk; typically, 20-30 GB space
    is enough.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是为磁盘分配空间；通常情况下，20-30GB的空间就足够了。
- en: Now, proceed to create the disk and, after reviewing the summary, click on Create.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，继续创建磁盘，并在查看摘要后，点击创建。
- en: 'Now, click on Start to run. For the very first time, a window will pop up showing
    the selection process for a startup disk. Proceed with it by clicking Start after
    browsing the system path for Kali OS''s `.iso` file from the hard drive. This
    process may look similar to what is shown in the following screenshot:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击开始运行。第一次运行时，将弹出一个窗口，显示启动磁盘的选择过程。通过浏览硬盘上Kali OS的`.iso`文件的系统路径后，点击开始进行处理。这个过程可能看起来类似于以下截图所示的内容：
- en: '![](img/00199.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00199.jpeg)'
- en: 'You can run Kali Linux in a Live mode, or you can opt for Graphical install
    to install it persistently, as shown in the following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Live模式下运行Kali Linux，或者选择图形安装以进行持久安装，如下截图所示：
- en: '![](img/00201.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00201.jpeg)'
- en: For the complete persistent installation guide to Kali Linux, refer to [http://docs.kali.org/category/installation](http://docs.kali.org/category/installation).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Kali Linux的完整持久安装指南，请参考[http://docs.kali.org/category/installation](http://docs.kali.org/category/installation)。
- en: For installing Metasploit on Windows, refer to an excellent guide at [https://community.rapid7.com/servlet/JiveServlet/downloadBody/2099-102-11-6553/windows-installation-guide.pdf](https://community.rapid7.com/servlet/JiveServlet/downloadBody/2099-102-11-6553/windows-installation-guide.pdf).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows上安装Metasploit，请参考[https://community.rapid7.com/servlet/JiveServlet/downloadBody/2099-102-11-6553/windows-installation-guide.pdf](https://community.rapid7.com/servlet/JiveServlet/downloadBody/2099-102-11-6553/windows-installation-guide.pdf)的优秀指南。
- en: The fundamentals of Metasploit
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metasploit的基础知识
- en: 'Now that we have completed the setup of Kali Linux, let us talk about the big
    picture: Metasploit. Metasploit is a security project that provides exploits and
    tons of reconnaissance features to aid a penetration tester. Metasploit was created
    by H.D. Moore back in 2003, and since then, its rapid development has led it to
    be recognized as one of the most popular penetration testing tools. Metasploit
    is entirely a Ruby-driven project and offers a great deal of exploits, payloads,
    encoding techniques, and loads of post-exploitation features.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了Kali Linux的设置，让我们来谈谈大局：Metasploit。Metasploit是一个安全项目，提供了大量的利用和侦察功能，以帮助渗透测试人员。Metasploit是由H.D.
    Moore于2003年创建的，自那时以来，其快速发展使其成为最受欢迎的渗透测试工具之一。Metasploit完全由Ruby驱动，并提供大量的利用、有效载荷、编码技术和大量的后渗透功能。
- en: 'Metasploit comes in various editions, as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit有各种版本，如下所示：
- en: '**Metasploit Pro**: This edition is a commercial edition, offers tons of great
    features such as web application scanning and exploitation and automated exploitation,
    and is quite suitable for professional penetration testers and IT security teams.
    The Pro edition is used for advanced penetration tests and enterprise security
    programs.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Metasploit Pro**：这个版本是商业版，提供了大量出色的功能，如Web应用程序扫描和利用以及自动利用，非常适合专业的渗透测试人员和IT安全团队。Pro版用于高级渗透测试和企业安全项目。'
- en: '**Metasploit Express**: This is used for baseline penetration tests. Features
    in this version of Metasploit include smart exploitation, automated brute forcing
    of the credentials, and much more. This version is quite suitable for IT security
    teams in small to medium-sized companies.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Metasploit Express**：用于基线渗透测试。此版本的Metasploit功能包括智能利用、自动暴力破解凭据等。这个版本非常适合中小型公司的IT安全团队。'
- en: '**Metasploit Community**: This is a free version with reduced functionality
    when compared to the Express edition. However, for students and small businesses,
    this edition is a favorable choice.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Metasploit社区**：这是一个免费版本，与Express版本相比功能有所减少。然而，对于学生和小型企业来说，这个版本是一个不错的选择。'
- en: '**Metasploit Framework**: This is a command-line version with all manual tasks
    such as manual exploitation, third-party import, and so on. This release is entirely
    suitable for developers and security researchers.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Metasploit Framework**：这是一个命令行版本，包括所有手动任务，如手动利用、第三方导入等。这个版本完全适合开发人员和安全研究人员。'
- en: 'You can download Metasploit from the following link:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从以下链接下载Metasploit：
- en: '[https://www.rapid7.com/products/metasploit/download/editions/](https://www.rapid7.com/products/metasploit/download/editions/)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.rapid7.com/products/metasploit/download/editions/](https://www.rapid7.com/products/metasploit/download/editions/)'
- en: 'Throughout this book, we will be using the Metasploit Community and Framework
    versions. Metasploit also offers various types of user interfaces, as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用Metasploit社区和框架版本。Metasploit还提供各种类型的用户界面，如下所示：
- en: '**The graphical user interface** (**GUI**) **interface**: This has all the
    options available at the click of a button. This interface offers a user-friendly
    interface that helps to provide cleaner vulnerability management.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图形用户界面**（**GUI**）**界面**：这个界面提供了点击按钮即可使用的所有选项。这个界面提供了一个用户友好的界面，有助于提供更清晰的漏洞管理。'
- en: '**The console interface**: This is the most preferred interface and the most
    popular one as well. This interface provides an all-in-one approach to all the
    options offered by Metasploit. This interface is also considered one of the most
    stable interfaces. Throughout this book, we will be using the console interface
    the most.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制台界面**：这是最受欢迎的界面，也是最流行的界面。这个界面提供了Metasploit提供的所有选项的一体化方法。这个界面也被认为是最稳定的界面。在本书中，我们将最常使用控制台界面。'
- en: '**The command-line interface**: This is the more potent interface that supports
    the launching of exploits to activities such as payload generation. However, remembering
    each and every command while using the command-line interface is a difficult job.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令行界面**：这是更强大的界面，支持启动利用活动，如有效载荷生成。然而，在使用命令行界面时记住每个命令是一项困难的工作。'
- en: '**Armitage**: Armitage by Raphael Mudge added a neat hacker-style GUI interface
    to Metasploit. Armitage offers easy vulnerability management, built-in NMAP scans,
    exploit recommendations, and the ability to automate features using the Cortana
    scripting language. An entire chapter is dedicated to Armitage and Cortana in
    the latter half of this book.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Armitage**：Raphael Mudge的Armitage为Metasploit添加了一个整洁的黑客风格的GUI界面。Armitage提供了易于使用的漏洞管理、内置NMAP扫描、利用建议以及使用Cortana脚本语言自动化功能的能力。本书的后半部分专门介绍了Armitage和Cortana。'
- en: For more information on the Metasploit community, refer to[ ](https://community.rapid7.com/community/metasploit/blog/2011/12/21/metaspl%20oit-tutorial-an-introduction-to-metasploit-community)[https://community.rapid7.com/community/metasploit/blog](https://community.rapid7.com/community/metasploit/blog).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Metasploit社区的更多信息，请参阅[ ](https://community.rapid7.com/community/metasploit/blog/2011/12/21/metaspl%20oit-tutorial-an-introduction-to-metasploit-community)[https://community.rapid7.com/community/metasploit/blog](https://community.rapid7.com/community/metasploit/blog)。
- en: Basics of Metasploit Framework
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metasploit Framework基础知识
- en: 'Before we put our hands onto the Metasploit Framework, let us understand the
    basic terminology used in Metasploit. However, the following modules are not just
    terminologies, but modules that are the heart and soul of the Metasploit project:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用Metasploit Framework之前，让我们了解Metasploit中使用的基本术语。然而，以下模块不仅仅是术语，而是Metasploit项目的核心和灵魂：
- en: '**Exploit**: This is a piece of code which, when executed, will trigger the
    vulnerability at the target.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Exploit**：这是一段代码，当执行时，将触发目标的漏洞。'
- en: '**Payload**: This is a piece of code that runs at the target after a successful
    exploitation is done. It defines the type of access and actions we need to gain
    on the target system.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Payload**：这是在成功利用后在目标上运行的代码。它定义了我们需要在目标系统上获得的访问类型和操作。'
- en: '**Auxiliary**: These are modules that provide additional functionalities such
    as scanning, fuzzing, sniffing, and much more.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Auxiliary**：这些是提供额外功能的模块，如扫描、模糊测试、嗅探等。'
- en: '**Encoder**: These are used to obfuscate modules to avoid detection by a protection
    mechanism such as an antivirus or a firewall.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Encoder**：这些用于混淆模块，以避免被防病毒软件或防火墙等保护机制检测到。'
- en: '**Meterpreter**: This is a payload that uses in-memory stagers based on DLL
    injections. It provides a variety of functions to perform at the target, which
    makes it a popular choice.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Meterpreter**：这是一个使用基于DLL注入的内存级分段器的有效载荷。它提供了各种在目标上执行的功能，使其成为一个受欢迎的选择。'
- en: Architecture of Metasploit
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metasploit的架构
- en: 'Metasploit comprises various components, such as extensive libraries, modules,
    plugins, and tools. A diagrammatic view of the structure of Metasploit is as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit包括各种组件，如广泛的库、模块、插件和工具。Metasploit结构的图解如下：
- en: '![](img/00248.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00248.jpeg)'
- en: Let's see what these components are and how they work. It is best to start with
    the libraries that act as the heart of Metasploit.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些组件是什么，以及它们是如何工作的。最好从作为Metasploit核心的库开始。
- en: 'Let''s understand the use of various libraries, as explained in the following
    table:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解各种库的用途，如下表所述：
- en: '| Library name | Uses |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 库名称 | 用途 |'
- en: '| REX | Handles almost all core functions, such as setting up sockets, connections, formatting,
    and all other raw functions. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| REX | 处理几乎所有核心功能，如设置套接字、连接、格式化和所有其他原始功能。 |'
- en: '| MSF CORE | Provides the underlying API and the actual core that describes
    the framework. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| MSF CORE | 提供了描述框架的底层API和实际核心。 |'
- en: '| MSF BASE | Provides friendly API support to modules. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| MSF BASE | 提供友好的API支持模块。 |'
- en: 'We have many types of modules in Metasploit, and they differ regarding their
    functionality. We have payload modules for creating access channels to exploited
    systems. We have auxiliary modules to carry out operations such as information
    gathering, fingerprinting, fuzzing an application, and logging into various services.
    Let''s examine the basic functionality of these modules, as shown in the following
    table:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit有许多类型的模块，它们在功能上有所不同。我们有用于创建对被利用系统的访问通道的payload模块。我们有辅助模块来执行诸如信息收集、指纹识别、对应用程序进行fuzzing和登录到各种服务等操作。让我们来看一下这些模块的基本功能，如下表所示：
- en: '| Module type | Working |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 模块类型 | 工作 |'
- en: '| **Payloads** | Payloads are used to carry out operations such as connecting
    to or from the target system after exploitation or performing a particular task
    such as installing a service and so on.Payload execution is the next step after
    the system is exploited successfully.The widely used meterpreter shell is a standard Metasploit
    payload. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| **Payloads** | Payloads用于在利用后连接到或从目标系统执行操作，或执行特定任务，如安装服务等。在成功利用系统后，Payload执行是下一步。广泛使用的meterpreter
    shell是标准的Metasploit payload。 |'
- en: '| **Auxiliary** | Auxiliary modules are a special kind of module that performs
    specific tasks such as information gathering, database fingerprinting, scanning
    the network to find a particular service and enumeration, and so on. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| **Auxiliary** | 辅助模块是一种执行特定任务的特殊模块，如信息收集、数据库指纹识别、扫描网络以查找特定服务和枚举等。 |'
- en: '| **Encoders** | Encoders are used to encode payloads and the attack vectors
    to (or intending to) evade detection by antivirus solutions or firewalls. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| **Encoders** | 编码器用于对payloads和攻击向量进行编码（或打算）以规避杀毒软件或防火墙的检测。 |'
- en: '| **NOPs** | NOP generators are used for alignment which results in making
    exploits stable. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| **NOPs** | NOP生成器用于对齐，从而使exploits更加稳定。 |'
- en: '| **Exploits** | The actual code that triggers a vulnerability. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| **Exploits** | 触发漏洞的实际代码。 |'
- en: Metasploit Framework console and commands
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metasploit框架控制台和命令
- en: 'Gathering knowledge of the architecture of Metasploit, let us now run Metasploit
    to get hands-on knowledge of the commands and different modules. To start Metasploit,
    we first need to establish a database connection so that everything we do can
    be logged into the database. However, usage of databases also speeds up Metasploit''s
    load time by making use of caches and indexes for all modules. Therefore, let
    us start the `postgresql` service by typing in the following command at the Terminal:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 了解Metasploit的架构知识，现在让我们运行Metasploit以获得对命令和不同模块的实际知识。要启动Metasploit，我们首先需要建立数据库连接，以便我们所做的一切都可以记录到数据库中。但是，使用数据库还可以通过为所有模块使用缓存和索引来加快Metasploit的加载时间。因此，让我们通过在终端中输入以下命令来启动`postgresql`服务：
- en: '[PRE0]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, to initialize Metasploit''s database, let us initialize `msfdb` as shown
    in the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了初始化Metasploit的数据库，让我们按照以下截图初始化`msfdb`：
- en: '![](img/00204.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00204.jpeg)'
- en: 'It is clearly visible in the preceding screenshot that we have successfully
    created the initial database schema for Metasploit. Let us now start the Metasploit
    database using the following command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中清楚地看到，我们已成功为Metasploit创建了初始数据库模式。现在让我们使用以下命令启动Metasploit数据库：
- en: '[PRE1]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We are now ready to launch Metasploit. Let us issue `msfconsole` in the Terminal
    to start Metasploit, as shown in the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备启动Metasploit。让我们在终端中输入`msfconsole`来启动Metasploit，如下截图所示：
- en: '![](img/00205.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00205.jpeg)'
- en: 'Welcome to the Metasploit console. Let us run the `help` command to see what
    other commands are available to us:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到Metasploit控制台。让我们运行`help`命令，看看还有哪些其他命令可用：
- en: '![](img/00207.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00207.jpeg)'
- en: 'The commands in the preceding screenshot are core Metasploit commands which
    are used to set/get variables, load plugins, route traffic, unset variables, print
    version, find the history of commands issued, and much more. These commands are
    pretty general. Let''s see the module-based commands, as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 前面截图中的命令是核心Metasploit命令，用于设置/获取变量、加载插件、路由流量、取消设置变量、打印版本、查找已发出命令的历史记录等。这些命令非常通用。让我们看一下基于模块的命令，如下所示：
- en: '![](img/00209.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00209.jpeg)'
- en: 'Everything related to a particular module in Metasploit comes under the module
    controls section of the Help menu. Using the preceding commands, we can select
    a particular module, load modules from a particular path, get information about
    a module, show core and advanced options related to a module, and even can edit
    a module inline. Let us learn some basic commands in Metasploit and familiarize
    ourselves with the syntax and semantics of these commands:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 与Metasploit中特定模块相关的所有内容都包含在帮助菜单的模块控制部分。使用上述命令，我们可以选择特定模块，从特定路径加载模块，获取有关模块的信息，显示与模块相关的核心和高级选项，甚至可以在线编辑模块。让我们学习一些Metasploit的基本命令，并熟悉这些命令的语法和语义：
- en: '| **Command** | **Usage** | **Example** |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| **Command** | **Usage** | **Example** |'
- en: '| `use` [auxiliary/exploit/payload/encoder] | To select a particular module
    to start working with. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `use` [auxiliary/exploit/payload/encoder] | 选择特定的模块开始工作。 |'
- en: '[PRE2]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '|'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `show` [exploits/payloads/encoder/auxiliary/options] | To see the list of available
    modules of a particular type. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `show` [exploits/payloads/encoder/auxiliary/options] | 查看特定类型的可用模块列表。 |'
- en: '[PRE3]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '|'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `set` [options/payload] | To set a value to a particular object. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `set` [options/payload] | 为特定对象设置值。 |'
- en: '[PRE4]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '|'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `setg` [options/payload] | To assign a value to a particular object globally,
    so the values do not change when a module is switched on. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `setg` [options/payload] | 全局分配值给特定对象，因此在打开模块时值不会改变。 |'
- en: '[PRE5]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '|'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `run` | To launch an auxiliary module after all the required options are
    set. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `run` | 在设置所有必需选项后启动辅助模块。 |'
- en: '[PRE6]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '|'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `exploit` | To launch an exploit. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `exploit` | 启动exploit。 |'
- en: '[PRE7]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '|'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `back` | To unselect a module and move back. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `back` | 取消选择模块并返回。 |'
- en: '[PRE8]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '|'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Info` | To list the information related to a particular exploit/module/auxiliary.
    |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| `Info` | 列出与特定exploit/module/auxiliary相关的信息。 |'
- en: '[PRE9]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '|'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Search` | To find a particular module. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `Search` | 查找特定的模块。 |'
- en: '[PRE10]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '|'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `check` | To check whether a particular target is vulnerable to the exploit or
    not. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| `check` | 检查特定目标是否容易受到利用。 |'
- en: '[PRE11]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '|'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Sessions` | To list the available sessions. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `Sessions` | 列出可用的会话。 |'
- en: '[PRE12]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '|'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| **Meterpreter commands** | **Usage** | **Example** |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| **Meterpreter命令** | **用法** | **示例** |'
- en: '| `sysinfo` | To list system information of the compromised host. |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `sysinfo` | 列出受损主机的系统信息。 |'
- en: '[PRE13]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '|'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `ifconfig` | To list the network interfaces on the compromised host. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `ifconfig` | 列出受损主机上的网络接口。 |'
- en: '[PRE14]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '|'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Arp` | List of IP and MAC addresses of hosts connected to the target. |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| `Arp` | 列出连接到目标的主机的IP和MAC地址。 |'
- en: '[PRE15]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '|'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `background` | To send an active session to background. |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `background` | 将活动会话发送到后台。 |'
- en: '[PRE16]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '|'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `shell` | To drop a cmd shell on the target. |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| `shell` | 在目标上放置一个cmd shell。 |'
- en: '[PRE17]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '|'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `getuid` | To get the current user details. |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| `getuid` | 获取当前用户的详细信息。 |'
- en: '[PRE18]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '|'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `getsystem` | To escalate privileges and gain system access. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| `getsystem` | 提升权限并获得系统访问权限。 |'
- en: '[PRE19]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '|'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `getpid` | To gain the process id of the meterpreter access. |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `getpid` | 获取meterpreter访问的进程ID。 |'
- en: '[PRE20]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '|'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `ps` | To list all the processes running at the target. |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `ps` | 列出目标上运行的所有进程。 |'
- en: '[PRE21]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '|'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: If you are using Metasploit for the very first time, refer to [http://www.offensive-security.com/metasploit-unleashed/Msfconsole_Commands](http://www.offensive-security.com/metasploit-unleashed/Msfconsole_Commands)
    for more information on basic commands.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是第一次使用Metasploit，请参考[http://www.offensive-security.com/metasploit-unleashed/Msfconsole_Commands](http://www.offensive-security.com/metasploit-unleashed/Msfconsole_Commands)获取有关基本命令的更多信息。
- en: Benefits of using Metasploit
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit的好处
- en: 'Before we jump into an example penetration test, we must know why we prefer
    Metasploit to manual exploitation techniques. Is this because of a hacker-like
    Terminal that gives a pro look, or is there a different reason? Metasploit is
    an excellent choice when compared to traditional manual techniques because of
    certain factors, which are as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进行示例渗透测试之前，我们必须知道为什么我们更喜欢Metasploit而不是手动利用技术。这是因为它具有类似黑客的终端，给人一种专业的外观，还是有其他原因？与传统的手动技术相比，Metasploit是一个很好的选择，因为有一些因素，如下所示：
- en: Metasploit Framework is open source
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit框架是开源的
- en: Metasploit supports large testing networks by making use of CIDR identifiers
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit通过使用CIDR标识符支持大型测试网络
- en: Metasploit offers quick generation of payloads which can be changed or switched
    on the fly
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit可以快速生成可更改或即时切换的有效载荷
- en: Metasploit leaves the target system stable in most cases
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在大多数情况下，Metasploit会使目标系统保持稳定
- en: The GUI environment provides a fast and user-friendly way to conduct penetration
    testing
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GUI环境提供了进行渗透测试的快速和用户友好的方式
- en: Penetration testing with Metasploit
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit进行渗透测试
- en: Covering the basics commands of the Metasploit framework, let us now simulate
    a real-world penetration test with Metasploit. In the upcoming section, we will
    cover all the phases of a penetration test solely through Metasploit except for
    the pre-interactions phase which is a general phase to gather the requirements
    of the client and understand their expectations through meetings, questionnaires,
    and so on.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解Metasploit框架的基本命令之后，让我们现在使用Metasploit模拟一个真实的渗透测试。在接下来的部分中，我们将仅使用Metasploit来覆盖渗透测试的所有阶段，除了预交互阶段，这是一个通过会议、问卷调查等方式收集客户需求并了解他们期望的一般阶段。
- en: Assumptions and testing setup
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 假设和测试设置
- en: In the upcoming exercise, we assume that we have our system connected to the
    target network via Ethernet or Wi-Fi. The target operating system is Windows Server
    2012 R2 with IIS 8.0 running on port 80 and HFS 2.3 server running on port 8080\.
    We will be using the Kali Linux operating system for this exercise.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在即将进行的练习中，我们假设我们的系统通过以太网或Wi-Fi连接到目标网络。目标操作系统是运行在端口80上的Windows Server 2012 R2，同时在端口8080上运行HFS
    2.3服务器。我们将在这个练习中使用Kali Linux操作系统。
- en: 'Phase-I: footprinting and scanning'
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一阶段：足迹和扫描
- en: 'Footprinting and scanning is the first phase after the pre-interactions and,
    based on the type of testing approach (black box, white box, or grey box), the
    footprinting phase will differ significantly. In a black box test scenario, we
    will target everything since no prior knowledge of the target is given, while
    we will perform focused application- and architecture-specific tests in a white
    box approach. A grey box test will combine the best of both types of methodology.
    We will follow the black box approach. So, let''s fire up Metasploit and run a
    basic scan. However, let us add a new workspace to Metasploit. Adding a new workspace
    will keep the scan data separate from the other scans in the database and will
    help to find the results in a much easier and more manageable way. To add a new
    workspace, just type in `workspace -a` [name of the new workspace] and, to switch
    the context to the new workspace, simply type in `workspace` followed by the name
    of the workspace, as shown in the following screenshot:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 足迹和扫描是在预交互之后的第一个阶段，根据测试方法的类型（黑盒、白盒或灰盒），足迹阶段将有很大的不同。在黑盒测试场景中，我们将针对一切进行测试，因为没有给出目标的先验知识，而在白盒方法中，我们将执行专注的应用程序和架构特定的测试。灰盒测试将结合两种方法的优点。我们将遵循黑盒方法。因此，让我们启动Metasploit并运行基本扫描。然而，让我们向Metasploit添加一个新的工作空间。添加一个新的工作空间将使扫描数据与数据库中的其他扫描数据分开，并将有助于以更轻松和更可管理的方式找到结果。要添加一个新的工作空间，只需输入`workspace
    -a` [新工作空间的名称]，要切换到新工作空间的上下文，只需输入`workspace`，然后输入工作空间的名称，如下面的屏幕截图所示：
- en: '![](img/00210.jpeg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00210.jpeg)'
- en: 'In the preceding screenshot, we can see that we added a new workspace `NetworkVAPT`
    and switched onto it. Let us now perform a quick scan of the network to check
    all the live hosts. Since we are on the same network as that of our target, we
    can perform an ARP sweep scan using the module from `auxiliary/scanner/discovery/arp_sweep`,
    as shown in the following screenshot:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们可以看到我们添加了一个新的工作区`NetworkVAPT`并切换到它。现在让我们快速扫描网络，检查所有活动的主机。由于我们与目标处于同一网络上，我们可以使用`auxiliary/scanner/discovery/arp_sweep`模块执行ARP扫描，如下截图所示：
- en: '![](img/00149.jpeg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00149.jpeg)'
- en: 'We choose a module to launch with the `use` command. The `show options` command
    will show us all the necessary options required for the module to work correctly.
    We set all the options with the `set` keyword. In the preceding illustration,
    we spoof our MAC and IP address by setting `SMAC` and `SHOST` to anything other
    than our original IP address. We used `192.168.10.1`, which looks similar to the
    router''s base IP address. Hence, all the packets generated via the ARP scan will
    look as if produced by the router. Let''s run the module and also check how valid
    our statement is by analyzing traffic in Wireshark, as shown in the following
    screenshot:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择一个模块来使用`use`命令启动。`show options`命令将显示模块正常工作所需的所有必要选项。我们使用`set`关键字设置所有选项。在前面的插图中，我们通过将`SMAC`和`SHOST`设置为原始IP地址以外的任何内容来伪造我们的MAC和IP地址。我们使用了`192.168.10.1`，看起来类似于路由器的基本IP地址。因此，通过ARP扫描生成的所有数据包看起来都像是由路由器产生的。让我们运行模块，并通过分析Wireshark中的流量来检查我们的说法有多少有效，如下截图所示：
- en: '![](img/00213.jpeg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00213.jpeg)'
- en: 'We can clearly see in the preceding screenshot that our packets are being spoofed
    from the MAC and IP address we used for the module:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们可以清楚地看到我们的数据包是从我们用于该模块的MAC和IP地址伪造出来的：
- en: '[PRE22]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'From the obtained results, we have one IP address which appears to be live,
    that is, `192.168.10.111` Let us perform a TCP scan over `192.168.10.111` and
    check which ports are open. We can perform a TCP scan with the portscan module
    from `auxiliary/scanner/portscan/tcp`, as shown in the following screenshot:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 从获得的结果中，我们有一个IP地址似乎是活动的，即`192.168.10.111`让我们对`192.168.10.111`执行TCP扫描，并检查哪些端口是打开的。我们可以使用`auxiliary/scanner/portscan/tcp`中的portscan模块执行TCP扫描，如下截图所示：
- en: '![](img/00215.jpeg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00215.jpeg)'
- en: 'Next, we will set `RHOSTS` to the IP address `192.168.10.111`. We can also
    increase the speed of the scan by using a high number of threads and setting the
    concurrency, as shown in the following screenshot:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将`RHOSTS`设置为IP地址`192.168.10.111`。我们还可以通过使用大量线程和设置并发性来加快扫描速度，如下截图所示：
- en: '![](img/00216.jpeg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00216.jpeg)'
- en: 'It''s advisable to perform banner-grabbing over all the open ports found during
    the scan. However, we will focus on the HTTP-based ports for this example. Let
    us find the type of web server running on `80`, `8080` using the `auxiliary/scanner/http/http_version`
    module, as shown in the following screenshot:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在扫描期间，建议对所有发现的开放端口进行横幅抓取。但是，我们将在此示例中专注于基于HTTP的端口。让我们使用`auxiliary/scanner/http/http_version`模块找到运行在`80`、`8080`上的Web服务器类型，如下截图所示：
- en: '![](img/00218.jpeg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00218.jpeg)'
- en: We load the `http_version` scanner module using the `use` command and set `RHOSTS`
    to `192.168.10.111`. First, we scan port `80` by setting `RPORT` to `80`, which
    yields the result as IIS/8.5 and then we run the module for port `8080` which
    depicts that the port is running the HFS 2.3 web server.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`use`命令加载`http_version`扫描器模块，并将`RHOSTS`设置为`192.168.10.111`。首先，我们通过将`RPORT`设置为`80`来扫描端口`80`，结果显示为IIS/8.5，然后我们运行端口`8080`的模块，显示该端口正在运行HFS
    2.3 web服务器。
- en: 'Phase-II: gaining access to the target'
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二阶段：获取目标访问权限
- en: After completing the scanning stage, we know we have a single IP address, that
    is,
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 完成扫描阶段后，我们知道有一个单独的IP地址，即
- en: '`192.168.10.111`, running HFS 2.3 file server and IIS 8.5 web services.'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`192.168.10.111`，运行HFS 2.3文件服务器和IIS 8.5 web服务。'
- en: You must identify all the services running on all the open ports. We are focusing
    only on the HTTP-based services simply for the sake of an example.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须确定所有开放端口上运行的所有服务。我们只关注基于HTTP的服务，仅作为示例。
- en: 'The IIS 8.5 server is not known to have any severe vulnerabilities which may
    lead to the compromise of the entire system. Therefore, let us try finding an
    exploit for the HFS server. Metasploit offers a `search` command to search within
    modules. Let''s find a matching module:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: IIS 8.5服务器并不知道有任何严重的漏洞可能导致整个系统被攻破。因此，让我们尝试找到HFS服务器的漏洞。Metasploit提供了`search`命令来在模块内搜索。让我们找到一个匹配的模块：
- en: '![](img/00219.jpeg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00219.jpeg)'
- en: 'We can see that issuing the `search HFS` command, Metasploit found two matching
    modules. We can simply skip the first one as it doesn''t correspond to the HFS
    server. Let''s use the second one, as shown in the preceding screenshot. Next,
    we only need to set a few of the following options for the exploit module along
    with the payload:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，通过发出`search HFS`命令，Metasploit找到了两个匹配的模块。我们可以简单地跳过第一个，因为它与HFS服务器不对应。让我们使用第二个，如前面的截图所示。接下来，我们只需要为漏洞利用模块设置一些以下选项以及有效负载：
- en: '![](img/00178.jpeg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00178.jpeg)'
- en: 'Let''s set the values for `RHOST` to `192.168.10.111`, `RPORT` to `8080`, `payload`
    to `windows/meterpreter/reverse_tcp`, `SRVHOST` to the IP address of our system,
    and `LHOST` to the IP address of our system. Setting the values, we can just issue
    the `exploit` command to send the exploit to the target, as shown in the following
    screenshot:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将`RHOST`的值设置为`192.168.10.111`，`RPORT`设置为`8080`，`payload`设置为`windows/meterpreter/reverse_tcp`，`SRVHOST`设置为我们系统的IP地址，`LHOST`设置为我们系统的IP地址。设置好这些值后，我们可以发出`exploit`命令将漏洞利用发送到目标，如下截图所示：
- en: '![](img/00223.jpeg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00223.jpeg)'
- en: Yes! A meterpreter session opened! We have successfully gained access to the
    target machine. The HFS is vulnerable to remote command execution attack due to
    a poor regex in the file `ParserLib.pas`, and the exploit module exploits the
    HFS scripting commands by using `%00` to bypass the filtering.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！一个meterpreter会话已经打开！我们已成功访问了目标机器。由于`ParserLib.pas`文件中的正则表达式不好，HFS易受远程命令执行攻击的影响，利用模块通过使用`%00`来绕过过滤来利用HFS脚本命令。
- en: 'Phase-III: maintaining access / post-exploitation / covering tracks'
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三阶段：维持访问/后期利用/覆盖踪迹
- en: Maintaining access to the target or keeping a backdoor at the startup is an
    area of critical concern if you belong to the law enforcement industry. We will
    discuss advanced persistence mechanisms in the upcoming chapters. However, when
    it comes to a professional penetration test, post-exploitation tends to be more
    important than maintaining access. Post-exploitation gathers vitals from the exploited
    systems, cracks hashes to admin accounts, steals credentials, harvests user tokens,
    gains privileged access by exploiting local system weaknesses, downloads and uploads
    files, views processes and applications, and much, much more.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在执法行业，保持对目标的访问或在启动时保留后门是一个非常重要的领域。我们将在接下来的章节中讨论高级持久性机制。然而，当涉及专业渗透测试时，后期利用往往比维持访问更重要。后期利用从被利用系统中收集重要信息，破解管理员帐户的哈希值，窃取凭据，收集用户令牌，通过利用本地系统漏洞获得特权访问，下载和上传文件，查看进程和应用程序等等。
- en: 'Let us perform and run some quick post-exploitation attacks and scripts:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行一些快速的后期利用攻击和脚本：
- en: '![](img/00224.jpeg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00224.jpeg)'
- en: Running some quick post-exploitation commands such as `getuid` will find the
    user who is the owner of the exploited process, which in our case is the administrator.
    We can also see the process ID of the exploited process by issuing the `getpid`
    command. One of the most desirable post-exploitation features is to figure out
    the ARP details if you need to dig deeper into the network. In meterpreter, you
    can find ARP details by issuing the `arp` command as shown in the preceding screenshot.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 运行一些快速的后期利用命令，比如`getuid`，将找到被利用进程的所有者，我们的情况下是管理员。我们还可以通过发出`getpid`命令来查看被利用进程的进程ID。最令人期待的后期利用功能之一是在需要深入网络时找出ARP详细信息。在meterpreter中，您可以通过发出`arp`命令来找到ARP详细信息，如前面的截图所示。
- en: We can escalate the privileges level to the system level using the `getsystem`
    command if the owner of the exploited process is a user with administrator privileges.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如果被利用进程的所有者是具有管理员权限的用户，则可以使用`getsystem`命令将权限级别提升到系统级别。
- en: 'Next, let''s harvest files from the target. However, we are not talking about
    the general single file search and download. Let''s do something out of the box
    using the `file_collector` post-exploitation module. What we can do is to scan
    for certain types of files on the target and download them automatically to our
    system, as shown in the following screenshot:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们从目标中收集文件。然而，我们不是在谈论一般的单个文件搜索和下载。让我们使用`file_collector`后期利用模块做一些与众不同的事情。我们可以在目标上扫描特定类型的文件，并自动将它们下载到我们的系统，如下面的截图所示：
- en: '![](img/00225.jpeg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00225.jpeg)'
- en: In the preceding screenshot, we ran a scan on the `Users` directory (by supplying
    a `-d` switch with the path of the directory) of the compromised system to scan
    for all the files with the extension `.doc` and `.pptx` (using a `-f` filter switch
    followed by the search expression). We used a `-r` switch for the recursive search
    and `-o` to output the path of files found to the `files` file. We can see in
    the output that we have two files. Additionally, the search expression `*.doc|*.pptx`
    means all the files with extension `.doc` or `.pptx`, and the `|` is the OR operator.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们对受损系统的`Users`目录进行了扫描（通过提供一个带有目录路径的`-d`开关），以扫描所有扩展名为`.doc`和`.pptx`的文件（使用一个带有搜索表达式的`-f`过滤开关）。我们使用了一个`-r`开关进行递归搜索，`-o`用于将找到的文件路径输出到`files`文件中。我们可以在输出中看到我们有两个文件。此外，搜索表达式`*.doc|*.pptx`表示所有扩展名为`.doc`或`.pptx`的文件，`|`是或运算符。
- en: 'Let''s download the found files by issuing the command, as illustrated in the
    following screenshot:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过发出命令来下载找到的文件，如下面的截图所示：
- en: '![](img/00227.jpeg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00227.jpeg)'
- en: We just provided a `-i` switch followed by the file `files`, which contains
    the full path to all the files at the target. However, we also supplied a `-l`
    switch to specify the directory on our system where the files will be downloaded.
    We can see from the preceding screenshot that we successfully downloaded all the
    files from the target to our machine.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚提供了一个`-i`开关，后面跟着文件`files`，其中包含目标所有文件的完整路径。然而，我们还提供了一个`-l`开关，以指定文件将被下载到我们系统的目录。从前面的截图中可以看到，我们成功将所有文件从目标下载到了我们的机器上。
- en: Covering your tracks in a professional penetration test environment may not
    be suitable because most of the blue teams use logs generated in the penetration
    test to identify issues and patterns or write IDS/IPS signatures as well.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在专业的渗透测试环境中掩盖您的踪迹可能不太合适，因为大多数蓝队使用渗透测试生成的日志来识别问题和模式，或编写IDS/IPS签名。
- en: Summary and exercises
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结和练习
- en: In this chapter, we learned the basics of Metasploit and phases of penetration
    testing. We learned about the various syntax and semantics of `Metasploit` commands.
    We saw how we could initialize databases. We performed a basic scan with Metasploit
    and successfully exploited the scanned service. Additionally, we saw some basic
    post-exploitation modules that aid in harvesting vital information from the target.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了Metasploit的基础知识和渗透测试的阶段。我们了解了`Metasploit`命令的各种语法和语义。我们看到了如何初始化数据库。我们使用Metasploit进行了基本扫描，并成功利用了扫描到的服务。此外，我们还看到了一些基本的后期利用模块，这些模块有助于从目标中收集重要信息。
- en: 'If you followed correctly, this chapter has successfully prepared you to answer
    the following questions:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正确地跟随了，这一章已经成功地为您准备好回答以下问题：
- en: What is Metasploit Framework?
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit框架是什么？
- en: How do you perform port scanning with Metasploit?
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Metasploit进行端口扫描？
- en: How do you perform banner-grabbing with Metasploit?
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Metasploit进行横幅抓取？
- en: How is Metasploit used to exploit vulnerable software?
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit如何用于利用易受攻击的软件？
- en: What is post-exploitation and how can it be performed with Metasploit?
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是后渗透，如何使用Metasploit进行后渗透？
- en: 'For further self-paced practice, you can attempt the following exercises:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步自主练习，您可以尝试以下练习：
- en: Find a module in Metasploit which can fingerprint services running on port 21.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Metasploit中找到一个可以对运行在21端口的服务进行指纹识别的模块。
- en: Try running post-exploitation modules for keylogging, taking a picture of the
    screen, and dumping passwords for other users.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试运行后渗透模块进行键盘记录、拍摄屏幕照片和获取其他用户密码。
- en: Download and run Metasploitable 2 and exploit the FTP module.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并运行Metasploitable 2并利用FTP模块。
- en: In [Chapter 2](part0033.html#VF2I0-a731d733dba14ccabae643b74e2c8790), *Identifying
    and Scanning* *Targets*, we will look at the scanning features of Metasploit in
    depth. We will look at various types of services to scan, and we will also look
    at customizing already existing modules for service scanning.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](part0033.html#VF2I0-a731d733dba14ccabae643b74e2c8790)中，《识别和扫描目标》，我们将深入了解Metasploit的扫描功能。我们将研究各种类型的服务进行扫描，还将研究如何定制已有的模块进行服务扫描。
