- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Domain Privilege Escalation
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 域权限提升
- en: The probability that an attacker will need to escalate privileges in the target
    domain is high. We have already discussed why we will not touch upon the host
    privilege escalation theme. However, most concepts are universal. We check whether
    any privilege escalation exploits are applicable to the target environment. If
    there are none, the next step is to identify various misconfigured ACLs and GPOs
    and users with excessive group memberships that could have been unintentionally
    introduced by IT staff or during software installation in the Active Directory
    environment. We will reiterate these activities in every newly discovered path.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者在目标域中需要提升权限的概率很高。我们已经讨论过为何不会涉及主机权限提升的主题。然而，大多数概念是通用的。我们会检查是否有任何权限提升漏洞适用于目标环境。如果没有，那么下一步就是识别各种配置错误的ACL和GPO，以及可能在IT人员操作或软件安装过程中无意中引入的过度分配组成员权限的用户。我们会在每个新发现的路径中重申这些活动。
- en: This chapter starts with examples of good old point-and-click exploits. This
    will again emphasize the critical role patching plays in the security posture
    of an environment. Then, we will cover ACL misconfigurations and Group Policy
    abuses. The main caveat in detecting these escalation paths is that they can be
    hidden and not that obvious from the IT staff’s point of view. Also, there are
    specific security groups in Active Directory, the membership of which can lead
    to undesired consequences. We will go through them one by one. Last, but not least,
    is privilege escalation possibilities from the child to the parent domain. Privilege
    escalation involving Microsoft SQL Server and AD CS will be thoroughly covered
    in later chapters.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章从经典的点选式攻击示例开始。这再次强调了补丁管理在环境安全性中的关键作用。接下来，我们将讨论ACL配置错误和组策略滥用。检测这些提升路径的主要注意事项是，它们可能被隐藏，对于IT人员来说并不那么明显。此外，Active
    Directory中有一些特定的安全组，其成员身份可能会导致不必要的后果。我们将逐一分析它们。最后但同样重要的是，从子域到父域的权限提升可能性。涉及Microsoft
    SQL Server和AD CS的权限提升将在后续章节中详细介绍。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Public Zero2Hero exploits
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公共Zero2Hero漏洞
- en: How to find and abuse ACL misconfigurations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何查找并利用ACL配置错误
- en: What can be achieved by manipulating GPO?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过操作GPO可以实现什么？
- en: Built-in security groups review, including **DNSAdmins**
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内建安全组复审，包括**DNSAdmins**
- en: Escalate from the child to the parent domain inside a forest and **Privileged
    Access Management** (**PAM**) trust
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从林中的子域提升到父域，并进行**特权访问管理**（**PAM**）信任
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, you will need to have access to the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，您需要访问以下内容：
- en: VMware Workstation or Oracle VirtualBox with at least 16 GB of RAM, 8 CPU cores,
    and at least 55 GB of total space (more if you take snapshots)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少16GB内存、8个CPU核心，并且总空间至少为55GB（如果要进行快照，需更多空间）的VMware Workstation或Oracle VirtualBox
- en: A Linux-based operating system is strongly recommended
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强烈推荐使用基于Linux的操作系统
- en: Vagrant installed with a plugin for the virtualization platform in use and Ansible
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装了用于当前虚拟化平台插件的Vagrant和Ansible
- en: The GOADv2 and DetectionLab projects
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GOADv2和DetectionLab项目
- en: Zero2Hero exploits
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Zero2Hero漏洞
- en: In this section, we will discuss available exploits that can provide a domain
    administrator’s level of access in a matter of minutes. In a mature environment
    with regular patching and vulnerability management, it is not very common to find
    such treasure. However, there is still a possibility, and checking will not hurt.
    We will start with a relatively old GoldenPAC vulnerability in Kerberos, discuss
    the root cause of Zerologon and exploit it, and get elevated privileges with PrintNightmare
    and noPAC. We will also briefly cover different types of “Potatoes” and discuss
    how wrong group membership assignment can lead to a complete domain takeover.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论能够在几分钟内提供域管理员级别访问权限的现有漏洞。在一个有定期补丁和漏洞管理的成熟环境中，找到这样的漏洞并不常见。然而，仍然有可能发生这种情况，检查一下也无妨。我们将从相对较旧的Kerberos中的GoldenPAC漏洞开始，讨论Zerologon的根本原因并进行利用，接着利用PrintNightmare和noPAC提升权限。我们还将简要介绍不同类型的“土豆”漏洞，并讨论错误的组成员身份分配如何导致完全的域接管。
- en: MS14-068
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MS14-068
- en: '**MS14-068** was a successor of **MS11-013**, meaning that it was a PAC validation
    vulnerability. The attacker was able to modify the existing TGT by adding privileged
    groups and the domain controller wrongly validated the tickets. This happened
    on the fly, so domain users’ group membership was not changed. All we need to
    exploit this vulnerability is a valid set of domain users’ credentials with a
    corresponding SID and domain controller FQDN. After the vulnerability was announced,
    the exploit was released by *bidord*[1].'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**MS14-068**是**MS11-013**的后继者，意味着这是一个PAC验证漏洞。攻击者能够通过添加特权组来修改现有的TGT，而域控制器错误地验证了票证。这是即时发生的，因此域用户的组成员身份没有改变。我们利用这个漏洞所需的只是一组有效的域用户凭据，具有相应的SID和域控制器FQDN。在漏洞被公布后，*bidord*发布了利用程序[1]。'
- en: Note
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'This vulnerability is not introduced in the lab. A good step-by-step attack
    guide can be found here: [https://www.trustedsec.com/blog/ms14-068-full-compromise-step-step/](https://www.trustedsec.com/blog/ms14-068-full-compromise-step-step/).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个漏洞并非在实验室中引入的。可以在这里找到一个很好的逐步攻击指南：[https://www.trustedsec.com/blog/ms14-068-full-compromise-step-step/](https://www.trustedsec.com/blog/ms14-068-full-compromise-step-step/)。
- en: 'Concisely, this is the command you need to run against an unpatched domain
    controller:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 简洁地说，这是您需要针对未打补丁的域控制器运行的命令：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As a result, we can inject a TGT ticket and enjoy our new privileges.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以注入一个TGT票证并享受我们的新权限。
- en: 'Attack detection for Kerberos is difficult, as usual. Exploitation can be caught
    by examining event ID 4624 for a user SID and account name mismatch. Also, we
    can check new users in domain groups with an SID ending in **512**, **513**, **518**,
    **519**, or **520**. The usual recommendation applies here as well: patch your
    infrastructure. After KB installation, we can detect failed exploitation attempts
    in event ID 4769.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对Kerberos的攻击检测很困难，和往常一样。可以通过检查用户SID和帐户名称不匹配的事件ID 4624来捕获利用。此外，我们还可以检查以**512**、**513**、**518**、**519**或**520**结尾的SID的域组中的新用户。通常的建议同样适用：修补您的基础设施。在安装KB后，我们可以在事件ID
    4769中检测到失败的利用尝试。
- en: Zerologon (CVE-2020-1472)
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Zerologon（CVE-2020-1472）
- en: This vulnerability was a real disaster. The unauthenticated attacker was able
    to obtain domain admin privileges by compromising the domain controller. The vulnerability
    is in subverting Netlogon cryptography. **Netlogon** is a service for logon request
    verification, registration, authentication, and domain controller location. It
    uses the MS-NRPC interface as an authentication mechanism and MS-NRPC itself uses
    custom, insecure cryptography for Netlogon Secure Channel connection to domain
    controllers. The protocol vulnerability is the reuse of a static, zero-valued
    **initialization vector** (**IV**) in AES-CFB8 mode.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个漏洞真是一场灾难。未经身份验证的攻击者能够通过破坏域控制器获得域管理员权限。漏洞在于颠覆Netlogon加密。**Netlogon**是用于登录请求验证、注册、认证和域控制器定位的服务。它使用MS-NRPC接口作为身份验证机制，而MS-NRPC本身使用自定义的不安全加密来连接到域控制器的Netlogon安全通道。协议漏洞是在AES-CFB8模式中重用静态的、零值的**初始化向量**（**IV**）。
- en: Note
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Original research by *Tom Tervoort* from *Secura*, with a detailed explanation,
    is available here: [https://www.secura.com/uploads/whitepapers/Zerologon.pdf](https://www.secura.com/uploads/whitepapers/Zerologon.pdf).'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*Secura*的*Tom Tervoort*的原创研究，详细解释请参阅这里：[https://www.secura.com/uploads/whitepapers/Zerologon.pdf](https://www.secura.com/uploads/whitepapers/Zerologon.pdf)。'
- en: 'There are two exploitation scenarios for Zerologon: **relay**[2] and **password
    change**.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Zerologon有两种利用场景：**中继**[2]和**更改密码**。
- en: To understand the password change exploitation scenario, there are seven key
    concepts summarized here[3].
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解密码更改利用场景，这里总结了七个关键概念[3]。
- en: 'Briefly, the exploit steps are the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，利用步骤如下：
- en: Exploit cryptographic vulnerability to spoof the client credentials.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 利用加密漏洞欺骗客户端凭据。
- en: Ignore signing and sealing.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 忽略签名和封装。
- en: Spoof a call to bypass authentication with unlimited login attempts.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 伪造调用以绕过身份验证，并进行无限次登录尝试。
- en: Change the account’s password to null.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将帐户的密码更改为空。
- en: Abuse null password to gain domain admin privileges.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滥用空密码以获得域管理员权限。
- en: Restore the computer’s password to ensure that replication between domain controllers
    is still working.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 恢复计算机的密码，以确保域控制器之间的复制仍在工作。
- en: 'Now let us try to exploit this vulnerability in our lab. We are going to scan
    all three domain controllers. We have a few exploits at our disposal, together
    with the Metasploit module (**auxiliary/admin/dcerpc/cve_2020_1472_zerologon**).
    I will use Impacket and the *VoidSec* exploit[4]. Also, I recommend creating a
    snapshot of the DC03 before exploitation. Running this exploit in production can
    cause disruption. If you still do so, do not forget to revert the password:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在实验室尝试利用这个漏洞。我们将扫描所有三个域控制器。我们有几个可供选择的漏洞利用，还有Metasploit模块（**auxiliary/admin/dcerpc/cve_2020_1472_zerologon**）。我将使用Impacket和*VoidSec*的漏洞[4]。此外，我建议在利用之前为DC03创建一个快照。在生产环境中运行这个漏洞利用可能会造成中断。如果你仍然这样做，请不要忘记恢复密码：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The result of the exploitation is in the following screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 利用的结果如下截图：
- en: '![Figure 6.1 – Successful Zerologon exploitation](image/B18964_06_01.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.1 – 成功的 Zerologon 漏洞利用](image/B18964_06_01.jpg)'
- en: Figure 6.1 – Successful Zerologon exploitation
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – 成功的 Zerologon 漏洞利用
- en: To avoid this unpleasant situation, install security patches on a regular basis
    – and critical ones, immediately.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为避免这种不愉快的情况，定期安装安全补丁 – 并且关键的，立即安装。
- en: PrintNightmare (CVE-2021-1675 & CVE-2021-34527)
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PrintNightmare（CVE-2021-1675 & CVE-2021-34527）
- en: 'The name of the vulnerability can hint at which service introduced it. You
    guessed correctly – our good friend the **Print Spooler service**. There are three
    RPC protocols used by Spooler: **MS-RPRN**, **MS-PAR**, and **MS-PAN**. We are
    interested in the first two protocols. In general, the vulnerability lies in the
    functions allowing the installation of remote drivers by users. We need SMB share
    to be reachable from the server to host our malicious DLL. The client creates
    an object with the path to the attacker’s DLL and passes it to another object
    that is then loaded by **RpcAddPrinterDriverEx**. Also, we need to bypass **SeLoadDriverPrivilege**
    verification on the server by setting some bits in **dwFileCopyFlags**. Then,
    DLL will be loaded and can be found here: **C:\Windows\System32\spool\drivers\x64\3**)
    and here (**C:\Windows\System32\spool\drivers\x64\3\Old\{id}**. There are some
    conditions found by *StanHacked*[5] depending on the protocol. If the target refuses
    remote connections, this exploit can be used for local privilege escalation, but
    only if the **Point and Print** policy is enabled.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞的名称可能暗示引入它的服务。你猜对了 – 我们的好朋友**打印池服务**。Spooler 使用了三个 RPC 协议：**MS-RPRN**、**MS-PAR**
    和 **MS-PAN**。我们对前两个协议感兴趣。总的来说，漏洞存在于允许用户安装远程驱动程序的功能中。我们需要从服务器可访问的 SMB 共享来托管我们的恶意
    DLL。客户端创建一个带有攻击者 DLL 路径的对象，并将其传递给另一个对象，然后由**RpcAddPrinterDriverEx**加载。此外，我们需要通过在服务器上设置**dwFileCopyFlags**中的一些位来绕过**SeLoadDriverPrivilege**验证。然后，DLL
    将被加载，并且可以在这里找到：**C:\Windows\System32\spool\drivers\x64\3**) 和这里 (**C:\Windows\System32\spool\drivers\x64\3\Old\{id}**。根据协议，*StanHacked*[5]发现了一些条件。如果目标拒绝远程连接，这个漏洞利用可以用于本地权限提升，但只有在启用**点对点打印**策略时才能使用。
- en: 'For exploitation, we can use an exploit written by *cube0x0*[6], a module in
    Mimikatz, or the Metasploit module. First of all, we need to check whether the
    Spooler service is running by using **CrackMapExec**:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于利用，我们可以使用由*cube0x0*[6]编写的漏洞利用、Mimikatz中的一个模块，或者Metasploit模块。首先，我们需要使用**CrackMapExec**检查Spooler服务是否正在运行：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output of the CrackMapExec execution was the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: CrackMapExec 执行的输出如下：
- en: '![Figure 6.2 – Spooler service enumeration](image/B18964_06_02.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2 – Spooler 服务枚举](image/B18964_06_02.jpg)'
- en: Figure 6.2 – Spooler service enumeration
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – Spooler 服务枚举
- en: 'Then, we can run an exploit from Metasploit against the target. This module
    has a pre-built check and will require standard domain user credentials for successful
    exploitation. They are not marked as mandatory options, but without them, the
    exploit failed, at least for me:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以对目标运行Metasploit中的一个漏洞利用。这个模块有一个预构建的检查，并且需要标准域用户凭据才能成功利用。它们没有标记为强制选项，但没有它们，漏洞利用会失败，至少对我来说是这样：
- en: '![Figure 6.3 – Successful PrintNightmare exploitation](image/B18964_06_03.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3 – 成功的 PrintNightmare 漏洞利用](image/B18964_06_03.jpg)'
- en: Figure 6.3 – Successful PrintNightmare exploitation
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – 成功的 PrintNightmare 漏洞利用
- en: It took some time for Microsoft to issue the correct fix. The most reliable
    mitigation is to completely disable the Spooler service where it is possible.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 微软花了一些时间发布正确的修复。最可靠的缓解措施是在可能的情况下完全禁用Spooler服务。
- en: sAMAccountName Spoofing and noPac (CVE-2021-42278/CVE-2021-42287)
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: sAMAccountName 伪装和 noPac（CVE-2021-42278/CVE-2021-42287）
- en: This attack is a combination of two vulnerabilities. The first one, CVE-2021-42278
    (Name Impersonation) lies in the fact that no validation process happened to ensure
    that the computer account has a trailing $ at the end. The second one, CVE-2021-42287
    (KDC bamboozling) abuses the fact that if the computer name is not found by DC
    during S4U2Self ticket request, the search will happen again with $ appended to
    the computer name in a TGT. To exploit these vulnerabilities, we need unpatched
    domain controllers, a valid domain user account, and a machine account quota above
    0.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 此攻击是两个漏洞的组合。第一个漏洞，CVE-2021-42278（名称冒充），是因为没有验证过程确保计算机账户的名称末尾有$符号。第二个漏洞，CVE-2021-42287（KDC
    欺骗），利用了在 S4U2Self 请求票证时，如果域控制器未能找到计算机名称，搜索将会再次进行，并在计算机名称后添加$符号。为了利用这些漏洞，我们需要未修补的域控制器，一个有效的域用户账户，以及一个大于0的机器账户配额。
- en: Note
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Good step-by-step research was published by *exploitph* here: [https://exploit.ph/cve-2021-42287-cve-2021-42278-weaponisation.xhtml](https://exploit.ph/cve-2021-42287-cve-2021-42278-weaponisation.xhtml).'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*exploitph* 发表了很好的逐步研究：[https://exploit.ph/cve-2021-42287-cve-2021-42278-weaponisation.xhtml](https://exploit.ph/cve-2021-42287-cve-2021-42278-weaponisation.xhtml)。'
- en: 'With the help of the **CrackMapExec** modules, we can find out the machine
    quota in the domain and check whether the domain controller is a vulnerability
    to **noPac**:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 借助**CrackMapExec**模块，我们可以查找域中的机器配额并检查域控制器是否存在**noPac**漏洞：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The result of the execution is shown in the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 执行结果如下所示截图：
- en: '![Figure 6.4 – MAQ and vulnerability check with CrackMapExec](image/B18964_06_04.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.4 – 使用 CrackMapExec 进行 MAQ 和漏洞检查](image/B18964_06_04.jpg)'
- en: Figure 6.4 – MAQ and vulnerability check with CrackMapExec
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – 使用 CrackMapExec 进行 MAQ 和漏洞检查
- en: Note
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Manual exploitation steps are well described in this lab walk-through: [https://mayfly277.github.io/posts/GOADv2-pwning-part5/#samaccountname-nopac](https://mayfly277.github.io/posts/GOADv2-pwning-part5/#samaccountname-nopac).'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 手动利用步骤已在此实验室演练中详细描述：[https://mayfly277.github.io/posts/GOADv2-pwning-part5/#samaccountname-nopac](https://mayfly277.github.io/posts/GOADv2-pwning-part5/#samaccountname-nopac)。
- en: 'There are six steps to exploit these vulnerabilities:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 利用这些漏洞有六个步骤：
- en: Create a computer account with **addcomputer.py** or **Powermad**.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**addcomputer.py**或**Powermad**创建计算机账户。
- en: Clear the SPN attribute of the created or controlled machine account with **Powerview**
    or **addspn.py**.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**Powerview**或**addspn.py**清除创建或控制的机器账户的 SPN 属性。
- en: Change the **sAMAccountName** attribute of the created or controlled machine
    account to the domain controller’s one but without **$** at the end.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将创建或控制的机器账户的**sAMAccountName**属性更改为域控制器的名称，但末尾不加**$**符号。
- en: Request a TGT for this machine account.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请求该机器账户的 TGT。
- en: Revert the **sAMAccountName** attribute of the created or controlled machine
    account to the original one or any other value, but not the domain controller’s
    name.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将创建或控制的机器账户的**sAMAccountName**属性恢复为原始名称或其他任何值，但不能是域控制器的名称。
- en: Request the TGS with **S4U2self** by presenting the obtained TGT and then use
    it for access to the domain controller.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过展示获取的 TGT 请求带有**S4U2self**的 TGS，然后使用它访问域控制器。
- en: 'We will use an automated exploiter written by *cube0x0*[7], where all these
    steps are included:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用由*cube0x0*编写的自动化利用工具[7]，该工具包含所有这些步骤：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The result is shown in the following screenshot:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示截图：
- en: '![Figure 6.5 – noPac successful exploitation](image/B18964_06_05.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.5 – noPac 成功利用](image/B18964_06_05.jpg)'
- en: Figure 6.5 – noPac successful exploitation
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.5 – noPac 成功利用
- en: 'We can also exploit this vulnerability from a Linux machine, using an exploit
    written in Python[8]:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以从 Linux 机器利用此漏洞，使用 Python 编写的利用工具[8]：
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The result of the execution is shown in the following screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 执行结果如下所示截图：
- en: '![Figure 6.6 – sam-the-admin noPac exploit version at work](image/B18964_06_06.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.6 – sam-the-admin noPac 漏洞利用版本工作中](image/B18964_06_06.jpg)'
- en: Figure 6.6 – sam-the-admin noPac exploit version at work
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.6 – sam-the-admin noPac 漏洞利用版本工作中
- en: The best mitigation here is to install updates (**KB5008102**, **KB5008380**,
    and **KB5008602**). In addition, we can monitor for event ID 4662, **SAM Account
    Name**, changed to detect possible exploitation attempts.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的缓解措施是安装更新（**KB5008102**，**KB5008380**，和**KB5008602**）。此外，我们可以监控事件 ID 4662，**SAM
    Account Name**，已更改，以检测可能的利用尝试。
- en: RemotePotato0
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RemotePotato0
- en: '**Potato** in an exploit name always has an association with impersonation
    and **local privilege exploits** (**LPE**) such as **Hot**, **Lonely**, **Rotten**,
    **Juicy**, **Rogue,** **Sweet**, **God**, or the newly discovered **local** **potato
    flavors**[9].'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**Potato**在漏洞名称中总是与伪装和**本地特权利用**（**LPE**）相关，如**Hot**、**Lonely**、**Rotten**、**Juicy**、**Rogue**、**Sweet**、**God**，或者是新发现的**本地**
    **potato 风味**[9]。'
- en: Note
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 注释
- en: 'By the way, you can refer to this good blog post if you get lost regarding
    different flavors: [https://jlajara.gitlab.io/Potatoes_Windows_Privesc](https://jlajara.gitlab.io/Potatoes_Windows_Privesc).'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一下，如果你对不同的potato风味感到困惑，可以参考这篇不错的博客文章：[https://jlajara.gitlab.io/Potatoes_Windows_Privesc](https://jlajara.gitlab.io/Potatoes_Windows_Privesc)。
- en: The idea here is to trigger authentication of the logged-in high-privileged
    user and relay it to the domain controller. Successful exploitation requires initial
    access on the same host that the high-privileged user is logged on to. SMB and
    LDAP signing are not enabled.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的想法是触发登录的高权限用户的身份验证，并将其中继到域控制器。成功的漏洞利用要求最初访问与高权限用户登录的相同主机。SMB和LDAP签名未启用。
- en: 'Exploit requirements are the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞利用要求如下：
- en: The attacker requires membership of the “Remote Desktop Management” group on
    the computer
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 攻击者需要在计算机上加入“远程桌面管理”组
- en: The member of the “Domain Admin” group must be interactively logged into that
    machine
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “域管理员”组的成员必须在该机器上以交互方式登录
- en: 'In the GOADv2 lab, this vulnerability is not exploitable, however, it still
    works in DetectionLab. The exploit code is available here[10]. I used a domain
    controller and exchange server from DetectionLab. On a Kali machine, I started
    **ntlmrelayx** and then ran the exploit on the exchange server using a PSRemote
    session:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在GOADv2实验室中，此漏洞不可利用，然而，在DetectionLab中它仍然有效。漏洞利用代码可在此处获取[10]。我使用了来自DetectionLab的域控制器和交换服务器。在一台Kali机器上，我启动了**ntlmrelayx**，然后通过PSRemote会话在交换服务器上运行了漏洞利用：
- en: '[PRE6]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'I then ran the exploit on the exchange server:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我在交换服务器上运行了漏洞利用：
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The result of the exploitation is in the following screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞利用的结果见下图：
- en: '![Figure 6.7 – RemotePotato0 exploit execution](image/B18964_06_07.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.7 – RemotePotato0 漏洞利用执行](image/B18964_06_07.jpg)'
- en: Figure 6.7 – RemotePotato0 exploit execution
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7 – RemotePotato0 漏洞利用执行
- en: 'As a result, we can see that our user was added to **Enterprise** **Admin group**:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，我们可以看到我们的用户已被添加到**企业管理员组**：
- en: '![Figure 6.8 – RemotePotato0 successful relay and shell](image/B18964_06_08.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.8 – RemotePotato0 成功的中继和 shell](image/B18964_06_08.jpg)'
- en: Figure 6.8 – RemotePotato0 successful relay and shell
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8 – RemotePotato0 成功的中继和 shell
- en: 'This vulnerability was silently fixed by Microsoft in October 2022 in a patch
    release. LDAP relay scenarios have gone, since NTLM authentication has the **SIGN**
    flag set. We can confirm it if we try to replicate the attack in the GOADv2 lab:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 微软在2022年10月的补丁更新中悄悄修复了此漏洞。由于NTLM身份验证设置了**SIGN**标志，LDAP中继场景已不再存在。如果我们尝试在GOADv2实验室中复制该攻击，可以确认这一点：
- en: '![Figure 6.9 – RemotePotato0 exploit failed](image/B18964_06_09.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.9 – RemotePotato0 利用失败](image/B18964_06_09.jpg)'
- en: Figure 6.9 – RemotePotato0 exploit failed
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.9 – RemotePotato0 利用失败
- en: 'This is also confirmed by our **ntlmrelayx** output:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这也得到了我们**ntlmrelayx**输出的确认：
- en: '![Figure 6.10 – Relay is not working, vulnerability was fixed](image/B18964_06_10.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.10 – 中继未能工作，漏洞已修复](image/B18964_06_10.jpg)'
- en: Figure 6.10 – Relay is not working, vulnerability was fixed
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.10 – 中继未能工作，漏洞已修复
- en: In the next section, we will discuss what ACL and ACE are and different ways
    to cook them for malicious purposes.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将讨论ACL和ACE的概念以及不同的恶意用途方法。
- en: ACL abuse
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ACL 滥用
- en: '**Access Control List (ACL) abuse** provides the attacker with unique and almost
    undetectable ways to escalate privileges, perform lateral movement, and achieve
    malware-less persistence.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**访问控制列表（ACL）滥用**为攻击者提供了独特且几乎无法被检测到的特权提升、横向移动和无恶意软件持久化的方法。'
- en: Note
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 注释
- en: Some of the most notable and comprehensive research on that theme was presented
    by *SpectreOps* ([https://specterops.io/wp-content/uploads/sites/3/2022/06/an_ace_up_the_sleeve.pdf](https://specterops.io/wp-content/uploads/sites/3/2022/06/an_ace_up_the_sleeve.pdf)).
    We will refer to some parts of the research here and in the next chapter.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个主题，一些最著名和全面的研究由*SpectreOps*提供([https://specterops.io/wp-content/uploads/sites/3/2022/06/an_ace_up_the_sleeve.pdf](https://specterops.io/wp-content/uploads/sites/3/2022/06/an_ace_up_the_sleeve.pdf))。我们将在这里和下一章中引用其中的部分研究。
- en: We will start with essential theory as an introduction. Each object in Active
    Directory has a security descriptor. Each object has associated lists of **Access
    Control Entities** (**ACEs**), which create two lists called the **Discretionary
    Access Control List** (**DACL**) and the **System Access Control List** (**SACL**).
    ACEs define which security principals have rights over the object. The SACL has
    great detection potential as it can be used for auditing access attempts. Object
    owners can modify the DACL. When we speak about domain objects, we are focusing
    our attention on user, group, computer, domain, and GPO objects. The last important
    concept to understand is inheritance. For all objects that have **AdminCount=0**,
    inheritance is enabled by default, meaning that if we apply ACE to OU or a container,
    it will be applied to all objects inside it.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从基本理论作为介绍开始。Active Directory 中的每个对象都有一个安全描述符。每个对象都有相关的**访问控制实体**（**ACEs**）列表，这些列表创建了称为**自由访问控制列表**（**DACL**）和**系统访问控制列表**（**SACL**）的两个列表。ACEs定义了哪些安全主体对对象具有权限。SACL
    具有很强的检测潜力，因为它可以用于审计访问尝试。对象所有者可以修改 DACL。当我们谈论域对象时，我们关注的是用户、组、计算机、域和 GPO 对象。理解的最后一个重要概念是继承。对于所有具有**AdminCount=0**的对象，默认启用继承，这意味着如果我们将
    ACE 应用于 OU 或容器，它将应用于其中的所有对象。
- en: 'To find misconfigured ACLs in the domain, we can use various tools, such as
    ACLScanner from PowerView or BloodHound. These rights look promising from an offensive
    perspective: **GenericAll, WriteDacl**, **GenericWrite (Self + WriteProperty)**,
    **WriteOwner and AllExtendedRights** **(****DS-Replication-Get-Changes(All)**,
    **User-Force-Change-Password)**.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要在域中查找配置错误的 ACL，我们可以使用各种工具，例如 PowerView 或 BloodHound 中的 ACLScanner。从攻击者的角度来看，这些权限看起来很有前途：**GenericAll,
    WriteDacl**, **GenericWrite (Self + WriteProperty)**, **WriteOwner 和 AllExtendedRights**
    **(****DS-Replication-Get-Changes(All)**, **User-Force-Change-Password)**。
- en: 'A comprehensive mind map for ACL abuse together with command examples can be
    found here[11]. We will cover them one by one to discuss abuse possibilities:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在这里找到 ACL 滥用的综合思维导图以及命令示例[11]。我们将逐一讨论它们，以讨论滥用可能性：
- en: '![Figure 6.11 – ACL abuse mind map](image/B18964_06_11.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图6.11 – ACL 滥用思维导图](image/B18964_06_11.jpg)'
- en: Figure 6.11 – ACL abuse mind map
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.11 – ACL 滥用思维导图
- en: As we can see on the mind map, the most powerful right is **GenericAll**. It
    opens an attacker to a vast variety of abuse options. The **ReadLAPSPassword**
    property was covered before, in [*Chapter 4*](B18964_04.xhtml#_idTextAnchor061).
    The **WriteProperty** permission applied to the **KeyCredentialLink** property
    for the computer and user can lead to a **shadow credentials attack**, which will
    be covered in [*Chapter 8*](B18964_08.xhtml#_idTextAnchor163) later, thus it’s
    not mentioned in the upcoming section.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在思维导图上看到的，最强大的权限是**GenericAll**。它为攻击者打开了各种滥用选项。**ReadLAPSPassword** 属性在[*第4章*](B18964_04.xhtml#_idTextAnchor061)中已经讨论过。对于计算机和用户应用的**WriteProperty**
    权限可以导致**影子凭据攻击**，这将在稍后的[*第8章*](B18964_08.xhtml#_idTextAnchor163)中进行讨论，因此在即将到来的部分中没有提到。
- en: One special case that is slightly unusual is related to **ReadGMSAPassword**
    ACL abuse. The attacker needs to control an object that is listed in the **msDS-GroupMSAMembership**
    ACL of the target object. In plain words, this is the list of objects that are
    allowed to query the password for the gMSA.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一个稍微不寻常的特例与**ReadGMSAPassword** ACL 滥用有关。攻击者需要控制列在目标对象的**msDS-GroupMSAMembership**
    ACL 中的对象。简而言之，这是允许查询 gMSA 密码的对象列表。
- en: Group
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组
- en: 'From an offensive perspective, if an attacker controls the object with one
    of the following ACLs (**GenericAll**, **GenericWrite**, **Self**, **WriteProperty**,
    or **AllExtendedRights**) on the group, then it is possible to add an object to
    the group. The **WriteOwner** permission allows the attacker to get ownership
    of the group. If **WriteDacl** is also in control, it is possible to combine both
    rights and grant **GenericAll** privileges to itself, effectively getting full
    control of the group. We will perform the scan in the **sevenkingdoms** domain
    to detect misconfiguration with the help of **PowerView**:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 从攻击者的角度来看，如果攻击者控制了组上的以下 ACL 之一（**GenericAll**, **GenericWrite**, **Self**, **WriteProperty**
    或 **AllExtendedRights**），则可以将对象添加到组中。**WriteOwner** 权限允许攻击者获得组的所有权。如果还控制了**WriteDacl**，则可以结合这两个权限，并将**GenericAll**
    权限授予自身，从而有效地获得对组的完全控制。我们将在**sevenkingdoms**域中执行扫描，以检测配置错误，借助**PowerView** 的帮助：
- en: '[PRE8]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The result is in the following screenshot:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下截图所示：
- en: '![Figure 6.12 – tywin.lannister has the WriteDacl right on the Small Council
    group](image/B18964_06_12.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.12 – tywin.lannister在小委员会组上拥有WriteDacl权限](image/B18964_06_12.jpg)'
- en: Figure 6.12 – tywin.lannister has the WriteDacl right on the Small Council group
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.12 – tywin.lannister在小委员会组上拥有WriteDacl权限
- en: 'To abuse the **WriteDacl** privilege, we need to add full control over the
    group to **tywin.lannister** and then add him to the group. We can do it with
    two PowerView commands:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为了滥用**WriteDacl**特权，我们需要为**tywin.lannister**添加对该组的完全控制权限，然后将其添加到该组。我们可以通过两条PowerView命令来实现：
- en: '[PRE9]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The result of the preceding commands is in the following screenshot:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 前述命令的结果如下图所示：
- en: '![Figure 6.13 – tywin.lannister added himself to the Small Council group](image/B18964_06_13.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.13 – tywin.lannister将自己添加到小委员会组](image/B18964_06_13.jpg)'
- en: Figure 6.13 – tywin.lannister added himself to the Small Council group
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.13 – tywin.lannister将自己添加到小委员会组
- en: The **WriteProperty** right on the group allows the attacker to add any principal
    to the group, but the **Self** right allows only the object itself to be added
    to the group.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 该组的**WriteProperty**权限允许攻击者将任何主体添加到该组，但**Self**权限仅允许对象本身被添加到该组。
- en: Computer
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算机
- en: 'The most common exploitation scenario when a computer object’s specific right
    is under control is Kerberos **resource-based constrained delegation** (**RBCD**).
    To perform Kerberos RBCD, an attacker needs to control one of the following permissions:
    **GenericAll**, **GenericWrite**, **Self**, or **WriteProperty** on the **ms-AllowedToActOnBehalfOfOtherIdentity**
    property. **WriteProperty** on the **Service-Principal-Name** attribute will allow
    an adversary to execute an SPN-jacking attack. This scenario involves **Kerberos
    Constrained Delegation** (**KCD**) abuse. In brief, the idea is that the attacker
    compromises the server with KCD and at the same time has the **WriteSPN** (**WriteProperty
    on Service-Principal-Name**) right over the target server, and the one that is
    listed in the compromised server’s constrained delegation configuration. Then
    the attacker will remove SPN from the second server and add it to the target one,
    running the full S4U attack on the compromised server. Then, they will edit the
    ticket’s SPN and pass it. As an example in our lab, such a situation may look
    like the following. An adversary compromised the **Castelblack** server, which
    had KCD configured for **Winterfell**. The final target was Legit-PC, where an
    attacker had the **WriteSPN** right. Firstly, add the SPN of **winterfell** to
    **Legit-PC**. Next, request the ticket for the same SPN and edit the ticket’s
    SPN with Rubeus **tgssub** to point to the Legit-PC service.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当计算机对象的特定权限被控制时，最常见的利用场景是Kerberos**基于资源的受限委托**（**RBCD**）。要执行Kerberos RBCD，攻击者需要控制以下权限之一：**GenericAll**、**GenericWrite**、**Self**或**WriteProperty**，这些权限位于**ms-AllowedToActOnBehalfOfOtherIdentity**属性上。**Service-Principal-Name**属性上的**WriteProperty**权限将允许对手执行SPN劫持攻击。该场景涉及**Kerberos受限委托**（**KCD**）滥用。简而言之，攻击者通过KCD攻陷服务器，并且同时拥有目标服务器上**WriteSPN**（**WriteProperty
    on Service-Principal-Name**）权限，以及列在受害服务器的受限委托配置中的权限。然后，攻击者会从第二台服务器中移除SPN并将其添加到目标服务器上，执行完整的S4U攻击。接着，他们会编辑票据的SPN并传递。以我们实验室的示例为例，可能出现以下情况：一名攻击者攻陷了配置了KCD的**Castelblack**服务器，该服务器的受限委托配置为**Winterfell**。最终目标是**Legit-PC**，攻击者在此拥有**WriteSPN**权限。首先，将**winterfell**的SPN添加到**Legit-PC**。然后，针对相同的SPN请求票据，并使用Rubeus的**tgssub**命令编辑票据的SPN，使其指向Legit-PC服务。
- en: Note
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Original research is published at [https://www.semperis.com/blog/spn-jacking-an-edge-case-in-writespn-abuse/](https://www.semperis.com/blog/spn-jacking-an-edge-case-in-writespn-abuse/)
    and a set of commands to perform SPN-jacking can be found here: [https://www.thehacker.recipes/ad/movement/kerberos/spn-jacking](https://www.thehacker.recipes/ad/movement/kerberos/spn-jacking).'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 原始研究已发布在[https://www.semperis.com/blog/spn-jacking-an-edge-case-in-writespn-abuse/](https://www.semperis.com/blog/spn-jacking-an-edge-case-in-writespn-abuse/)，执行SPN劫持的命令集合可以在此找到：[https://www.thehacker.recipes/ad/movement/kerberos/spn-jacking](https://www.thehacker.recipes/ad/movement/kerberos/spn-jacking)。
- en: User
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户
- en: 'As mentioned at the beginning, the **GenericAll** right will grant full control
    over the object. All attack paths discussed here are possible because of a certain
    set of controlled rights. The **GenericWrite** permission allows the attacker
    to take over a user account by changing the password without knowing the current
    one. The **WriteDacl** right allows the attacker to grant themselvesfull control
    over the user object. **GenericWrite** or **WriteProperty** opens certain attack
    venues, depending on the property itself. The property can be logon script attribute
    (**scriptPath** or **msTSInitialProgram**), **Service-Principal-Name**, or the
    **userAccountControl** attribute. The last two will allow us to perform **Targeted
    Kerberoasting** and **Targeted AS-REP Roasting**. I used an ADSI edit and added
    the **WriteProperty** right to **jaime.lannister** over the **lord.varys** user
    object. Now, enumerate and confirm it with the help of PowerView:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，**GenericAll** 权限将授予对对象的完全控制。这里讨论的所有攻击路径都是由于一组特定的受控权限而可能实现的。**GenericWrite**
    权限允许攻击者通过更改密码而无需知道当前密码来接管用户帐户。**WriteDacl** 权限允许攻击者授予自己对用户对象的完全控制。**GenericWrite**
    或 **WriteProperty** 根据属性本身的不同，开启了某些攻击途径。该属性可以是登录脚本属性（**scriptPath** 或 **msTSInitialProgram**）、**Service-Principal-Name**
    或 **userAccountControl** 属性。后两者将允许我们执行 **Targeted Kerberoasting** 和 **Targeted
    AS-REP Roasting**。我使用 ADSI 编辑器并将 **WriteProperty** 权限添加到 **jaime.lannister** 上，通过
    **lord.varys** 用户对象。现在，使用 PowerView 进行枚举并确认：
- en: '![Figure 6.14 – jaime.lannister has WriteProperty over lord.varys](image/B18964_06_14.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.14 – jaime.lannister 对 lord.varys 拥有 WriteProperty 权限](image/B18964_06_14.jpg)'
- en: Figure 6.14 – jaime.lannister has WriteProperty over lord.varys
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.14 – jaime.lannister 对 lord.varys 拥有 WriteProperty 权限
- en: 'Our first attack will be targeted Kerberoasting. The idea is to set the SPN
    on the user, obtain the Kerberoast hash, and clear out the SPN to cover our tracks.
    This can be achieved with the following PowerView commands:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一次攻击将是针对 Kerberoasting。其思路是设置用户的 SPN，获取 Kerberoast 哈希值，并清除 SPN 以掩盖痕迹。可以通过以下
    PowerView 命令实现：
- en: '[PRE10]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The result of the preceding commands is shown in the screenshot:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 前述命令的结果如下图所示：
- en: '![Figure 6.15 – Successful targeted Kerberoasting of the lord.varys user](image/B18964_06_15.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.15 – 成功的针对 lord.varys 用户的 Kerberoasting 攻击](image/B18964_06_15.jpg)'
- en: Figure 6.15 – Successful targeted Kerberoasting of the lord.varys user
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.15 – 成功的针对 lord.varys 用户的 Kerberoasting 攻击
- en: 'Targeted AS-REP roasting is based on our control over the **userAccountControl**
    property, so we can change it to **not require Kerberos pre-authentication**.
    I will demonstrate it using PowerView and Rubeus:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 针对 AS-REP 烤制攻击基于我们对 **userAccountControl** 属性的控制，因此我们可以将其更改为 **不需要 Kerberos
    预认证**。我将使用 PowerView 和 Rubeus 演示此过程：
- en: '[PRE11]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The successful attack is shown in the following screenshot:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的攻击如下图所示：
- en: '![Figure 6.16 – Successful targeted AS-REP roasting of the lord.varys user](image/B18964_06_16.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.16 – 成功的针对 lord.varys 用户的 AS-REP 烤制攻击](image/B18964_06_16.jpg)'
- en: Figure 6.16 – Successful targeted AS-REP roasting of the lord.varys user
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.16 – 成功的针对 lord.varys 用户的 AS-REP 烤制攻击
- en: 'The most well-known abuse vector is when we have **AllExtendedRights** or the
    **User-Force-Change-Password** right over the user object, meaning that we can
    reset the user’s password without knowledge of the current one. This a venue was
    presented in our lab:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 最著名的滥用向量是我们对用户对象拥有 **AllExtendedRights** 或 **User-Force-Change-Password** 权限，这意味着我们可以在不知道当前密码的情况下重置用户密码。这个途径在我们的实验室中演示过：
- en: '![Figure 6.17 – tywin.lannister can reset the jaime.lannister user’s password](image/B18964_06_17.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.17 – tywin.lannister 可以重置 jaime.lannister 用户的密码](image/B18964_06_17.jpg)'
- en: Figure 6.17 – tywin.lannister can reset the jaime.lannister user’s password
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.17 – tywin.lannister 可以重置 jaime.lannister 用户的密码
- en: 'The following PowerView commands will do the trick:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 PowerView 命令将完成此操作：
- en: '[PRE12]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The result is shown in the following screenshot:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下图所示：
- en: '![Figure 6.18 – tywin.lannister successfully resets the jaime.lannister user’s
    password](image/B18964_06_18.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.18 – tywin.lannister 成功重置 jaime.lannister 用户的密码](image/B18964_06_18.jpg)'
- en: Figure 6.18 – tywin.lannister successfully resets the jaime.lannister user’s
    password
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.18 – tywin.lannister 成功重置 jaime.lannister 用户的密码
- en: Lastly, we will have a look at the most powerful ACL that can be used to completely
    take over the whole domain.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将看看可以用于完全接管整个域的最强 ACL。
- en: DCSync
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DCSync
- en: '**WriteDacl** privileges on the domain object can be used to grant DCSync privileges
    (**DS-Replication-Get-Changes and DS-Replication-Get-Changes-All**). To simulate
    an attack, I used an ADSI edit and added **jaime.lannister** **Modify Permissions**
    and **Write all properties** rights. We can use PowerView and confirm that the
    changes were successful:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**WriteDacl** 权限可以用于授予 DCSync 权限（**DS-Replication-Get-Changes 和 DS-Replication-Get-Changes-All**）。为了模拟攻击，我使用了
    ADSI 编辑并添加了 **jaime.lannister** 的 **修改权限** 和 **写入所有属性** 权限。我们可以使用 PowerView 来确认更改已成功：'
- en: '[PRE13]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The result of the command is shown in the following screenshot:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的结果如以下截图所示：
- en: '![Figure 6.19 – The jaime.lannister user has WriteDacl privileges over the
    domain object](image/B18964_06_19.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.19 – jaime.lannister 用户具有对域对象的 WriteDacl 权限](image/B18964_06_19.jpg)'
- en: Figure 6.19 – The jaime.lannister user has WriteDacl privileges over the domain
    object
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.19 – jaime.lannister 用户具有对域对象的 WriteDacl 权限
- en: 'We can grant DCSync privileges to the user and execute the attack with the
    following commands:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以授予用户 DCSync 权限，并通过以下命令执行攻击：
- en: '[PRE14]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The result of the DCSync attack is shown in the following screenshot:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: DCSync 攻击的结果如以下截图所示：
- en: '![Figure 6.20 – Successful DCSync attack](image/B18964_06_20.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.20 – 成功的 DCSync 攻击](image/B18964_06_20.jpg)'
- en: Figure 6.20 – Successful DCSync attack
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.20 – 成功的 DCSync 攻击
- en: In the next section, we will discuss ways to abuse the GPO. It is also interconnected
    with misconfigured ACLs, but this time for the GPO. The attacker can use it for
    lateral movement, privilege escalation, and persistence in the domain. The detection
    of this attack was fully covered in [*Chapter 4*](B18964_04.xhtml#_idTextAnchor061).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论滥用 GPO 的方法。这也与错误配置的 ACL 相关，但这次是针对 GPO。攻击者可以利用它进行横向移动、特权提升和在域中的持久性。该攻击的检测方法已经在
    [*第 4 章*](B18964_04.xhtml#_idTextAnchor061) 中详细介绍。
- en: Group Policy abuse
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组策略滥用
- en: 'Server and client Windows operating systems have various parameters that can
    be enabled, disabled, or configured. It is possible to apply required parameters
    locally on each object (local policy), but in the domain, it is much more convenient
    to prepare and push configuration changes via Group Policy to a set of machines
    and/or users. These sets of policies are called the **Group Policy Object** (**GPO**).
    Each GPO has its own GUID. Policy files are stored in the domain SYSVOL folder.
    By default, GPO creation and linking are allowed only to users with domain administrator’s
    privileges, however, these permissions can be delegated. The GPO needs to be linked
    to **Organizational Units**, a domain, or a site. The linking process requires
    an understanding of two more concepts: inheritance and enforcement. If GPLink
    is enforced, the GPO will apply to the linked OU and all child objects even if
    inheritance is blocked. If GPLink is not enforced, the GPO will apply to the linked
    OU and all child objects until **block inheritance** is enabled in any following
    OU. There are ways to apply the GPO even more gradually, such as WMI filtering,
    security filtering, and link order. But these are rarely used filtering options
    in practice. We have two main attack venues for the misconfigured GPO, depending
    on the privileges we obtained: create and link a new GPO or modify an existing
    GPO. However, we have much more freedom of action when we have successfully obtained
    control over the GPO itself. The following is a list of abuse scenario examples,
    which is just the tip of the iceberg, as with a certain level of creativity, only
    the sky is the limit:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器和客户端 Windows 操作系统具有多种可以启用、禁用或配置的参数。可以在每个对象上本地应用所需的参数（本地策略），但在域中，通过组策略推送配置更改到一组机器和/或用户会更加方便。这些策略集合被称为
    **组策略对象**（**GPO**）。每个 GPO 都有其唯一的 GUID。策略文件存储在域的 SYSVOL 文件夹中。默认情况下，只有具有域管理员权限的用户才能创建和链接
    GPO，但这些权限是可以委派的。GPO 需要链接到 **组织单位**、域或站点。链接过程需要理解另外两个概念：继承和强制。如果 GPLink 被强制执行，GPO
    将应用于链接的 OU 及所有子对象，即使继承被阻止。如果 GPLink 没有强制执行，GPO 将应用于链接的 OU 及所有子对象，直到在任何后续 OU 中启用
    **阻止继承**。还有一些方法可以更加逐步地应用 GPO，比如 WMI 筛选、安全筛选和链接顺序。但这些筛选选项在实际操作中很少使用。我们有两条主要的攻击途径，取决于我们获得的权限：创建并链接新的
    GPO 或修改现有的 GPO。然而，当我们成功控制了 GPO 本身时，我们的行动自由度要大得多。以下是一些滥用场景示例，这仅仅是冰山一角，只要有一定的创意，几乎没有限制：
- en: Add a user to a privileged local group on the machine
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将用户添加到机器上的特权本地组
- en: Add user rights such as SeDebugPrivilege, RDP connection, and similar
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加用户权限，如 SeDebugPrivilege、RDP 连接等
- en: Configure user and/or computer logon/logoff scripts
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置用户和/或计算机的登录/注销脚本
- en: Adjust registry keys and their DACL, including autorun, for persistence
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整注册表键及其 DACL，包括自启动项，以实现持久化
- en: Configure immediate scheduled tasks for the user or computer
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置用户或计算机的即时计划任务
- en: Malicious **.msi** file installation
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恶意 **.msi** 文件安装
- en: Create and edit services on the machine
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在机器上创建和编辑服务
- en: Deploy a new evil shortcut
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署一个新的恶意快捷方式
- en: Manage firewall and Windows Defender settings (for example, exclude paths)
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理防火墙和 Windows Defender 设置（例如，排除路径）
- en: 'At the time of writing, our lab had no vulnerable GPO introduced, so I created
    one myself in the **sevenkingdoms** domain and granted extra rights to the **jaime.lannister**
    user. Let us get down to practicing. We will start with GPO enumeration in the
    domain and ACL applied to it. The ACLs that we are looking for are our usual suspects:
    **GenericAll**, **GenericWrite**, **WriteProperty**, **WriteDacl**, **WriteOwner**,
    and **AllExtendedWrite and WriteMember**. We can use a PowerView one-liner to
    perform this action:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在写作时，我们的实验室尚未引入易受攻击的 GPO，因此我在 **sevenkingdoms** 域中自己创建了一个，并为 **jaime.lannister**
    用户授予了额外的权限。让我们开始实践。我们将从域中的 GPO 枚举及其应用的 ACL 开始。我们要寻找的 ACL 是我们常见的嫌疑人：**GenericAll**、**GenericWrite**、**WriteProperty**、**WriteDacl**、**WriteOwner**
    以及 **AllExtendedWrite 和 WriteMember**。我们可以使用 PowerView 一行命令来执行此操作：
- en: '[PRE15]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the output, we look for the user with SID outside of usual privileged groups
    and accounts:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出中，我们寻找具有 SID 且不在常见特权组和账户中的用户：
- en: '![Figure 6.21 – User with GenericAll rights on the GPO](image/B18964_06_21.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.21 – 拥有 GenericAll 权限的 GPO 用户](image/B18964_06_21.jpg)'
- en: Figure 6.21 – User with GenericAll rights on the GPO
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.21 – 拥有 GenericAll 权限的 GPO 用户
- en: 'Next, we find out the user account with privileges for the GPO, the GPO name,
    and the OU name with the members to which this GPO is applied. This can be achieved
    with the help of PowerView:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们查找具有 GPO 权限的用户账户、GPO 名称以及该 GPO 应用的 OU 名称和成员。可以通过 PowerView 来实现：
- en: '[PRE16]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This information is shown in the following screenshot:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了这些信息：
- en: '![Figure 6.22 – GPO information](image/B18964_06_22.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.22 – GPO 信息](image/B18964_06_22.jpg)'
- en: Figure 6.22 – GPO information
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.22 – GPO 信息
- en: 'We can escalate privileges by adding **jaime.lannister** to the local administrator
    group with the help of **SharpGPOAbuse**[12], written by *F-Secure*:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过 **SharpGPOAbuse**[12]（由 *F-Secure* 编写）帮助将 **jaime.lannister** 添加到本地管理员组，从而提升权限：
- en: '[PRE17]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The result of the exploitation is shown in the following screenshot:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 利用漏洞的结果如下所示：
- en: '![Figure 6.23 – The jaime.lannister user was added to the local administrator’s
    group](image/B18964_06_23.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.23 – jaime.lannister 用户被添加到本地管理员组](image/B18964_06_23.jpg)'
- en: Figure 6.23 – The jaime.lannister user was added to the local administrator’s
    group
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.23 – jaime.lannister 用户被添加到本地管理员组
- en: 'Another privilege escalation scenario is to find users who can create and link
    policies in the domain. Creating a policy is not enough without linking it to
    the OU for anything meaningful. The Group Policy container is stored under the
    **CN=Policies**, **CN=System** container within the domain. By default, only “Domain
    Admins” and “Enterprise Admins” groups have permission to link the GPO to the
    OU, site, and domain. The name of this permission is **Write gPlink**. To introduce
    the preceding scenario in our lab, I will grant the **lord.varys CreateChild**
    user rights on the Group Policy Container and **Write gPlink** for Vale OU. This
    can be done by adjusting rights in the **Security** tab of the object’s properties
    in **ADSI Edit**, as shown in the following screenshot:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个权限提升场景是查找可以在域中创建和链接策略的用户。仅创建策略是不够的，还需要将其链接到组织单位（OU）才能发挥实际作用。组策略容器存储在域中的 **CN=Policies**、**CN=System**
    容器下。默认情况下，只有“域管理员”和“企业管理员”组才有权限将 GPO 链接到 OU、站点和域。这个权限的名称是 **Write gPlink**。为了在我们的实验室中引入上述场景，我将为
    Group Policy Container 授予 **lord.varys CreateChild** 用户权限，并为 Vale OU 授予 **Write
    gPlink** 权限。这可以通过在 **ADSI Edit** 中调整对象属性的 **安全性** 标签页中的权限来完成，如下所示：
- en: '![Figure 6.24 – The lord.varys user has new permissions](image/B18964_06_24.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.24 – lord.varys 用户拥有新权限](image/B18964_06_24.jpg)'
- en: Figure 6.24 – The lord.varys user has new permissions
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.24 – lord.varys 用户拥有新权限
- en: 'Now we can use PowerView to confirm that the **lord.varys** user indeed has
    such privileges. The first command will show who can create Group Policies in
    the domain. The second command will identify every user who has the **WriteProperty**
    right on the **GP-Link** property for each OU in the domain:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用PowerView确认**lord.varys**用户确实拥有这样的权限。第一条命令将显示谁可以在域中创建组策略。第二条命令将识别每个在域内各OU的**GP-Link**属性上具有**WriteProperty**权限的用户：
- en: '[PRE18]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The result of the preceding command’s execution is shown in the following screenshot:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 前述命令执行的结果如下面的截图所示：
- en: '![Figure 6.25 – The lord.varys user has rights to create a GPO and link it
    to the OU](image/B18964_06_25.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图6.25 – lord.varys用户有权创建GPO并将其链接到OU](image/B18964_06_25.jpg)'
- en: Figure 6.25 – The lord.varys user has rights to create a GPO and link it to
    the OU
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.25 – lord.varys用户有权创建GPO并将其链接到OU
- en: 'Now we can create the GPO and link it to the OU via a **PowerShell module**
    or **Group Policy MMC**. A PowerShell module has limited functions that can be
    used for malicious purposes such as **Set-GPPrefRegistryValue** and **Set-GPRegistryValue**,
    which allow you to create **Autorun** registry keys with the following syntax:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过**PowerShell模块**或**组策略MMC**来创建GPO并将其链接到OU。PowerShell模块的功能有限，但可以用于恶意目的，例如**Set-GPPrefRegistryValue**和**Set-GPRegistryValue**，这些命令允许你使用以下语法创建**Autorun**注册表项：
- en: '[PRE19]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The next section is devoted to privilege escalation via membership in privileged
    security groups.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将讨论通过加入特权安全组进行的权限提升。
- en: Other privilege escalation vectors
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他权限提升途径
- en: This section will be focused on outstanding privilege escalation vectors. We
    will demonstrate the consequences of adding non-privileged domain users to the
    various built-in domain security groups. Then, we will describe privilege escalation
    from the child to the parent domain using Golden and inter-realm tickets. At the
    end, the PAM concept will be explained.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将重点介绍突出的权限提升途径。我们将演示将非特权域用户添加到各种内建域安全组中的后果。接着，我们将描述通过黄金票证和跨域票证从子域到父域的权限提升。最后，将解释PAM概念。
- en: In general, privileged users, computers, and groups have to be reviewed on a
    regular basis. From an Active Directory perspective, there is no drastic difference
    between a user and computer account. If an attacker compromises a machine account
    that has membership of a privileged group, it will certainly lead to privilege
    escalation.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，特权用户、计算机和组需要定期审查。从Active Directory的角度来看，用户账户和计算机账户之间没有本质的区别。如果攻击者破解了属于特权组的计算机账户，这无疑会导致权限提升。
- en: Note
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Original research was presented by *XPN*: [https://secarma.com/using-machine-account-passwords-during-an-engagement/](https://secarma.com/using-machine-account-passwords-during-an-engagement/).
    The idea is to extract the machine account hash and use it for a pass-the-hash
    attack, as demonstrated here: [https://pentestlab.blog/2022/02/01/machine-accounts/](https://pentestlab.blog/2022/02/01/machine-accounts/).'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 原始研究由*XPN*提出：[https://secarma.com/using-machine-account-passwords-during-an-engagement/](https://secarma.com/using-machine-account-passwords-during-an-engagement/)。该方法的核心思想是提取机器账户的哈希值，并将其用于“传递哈希”攻击，具体操作可参见：[https://pentestlab.blog/2022/02/01/machine-accounts/](https://pentestlab.blog/2022/02/01/machine-accounts/)。
- en: The primary preventive measure to avoid the elevation of privileges is the principle
    of least privilege. If you think that a machine account was compromised, it can
    be disabled. Also, the PowerShell **Reset-ComputerMachinePassword** command can
    reset a machine account’s password.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 避免权限提升的主要预防措施是最小权限原则。如果你认为某个机器账户被破解，可以禁用该账户。同时，PowerShell的**Reset-ComputerMachinePassword**命令可以重置机器账户的密码。
- en: Built-in security groups
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内建安全组
- en: There are several *built-in security groups* with preconfigured rights for specific
    tasks in the domain. We are not going to discuss the usual highly privileged groups,
    such as *Domain*, *Schema*, or *Enterprise Admins*. Their purpose in a forest
    and domain is crystal clear. We will discuss rarely mentioned operator security
    groups such as **Account Operators**, **Print Operators**, and **Server Operators**.
    In the practical part, we will demonstrate the privilege escalation venue, where
    a user with membership of the **Backup Operators** group can dump **ntds.dit**
    from the domain controller. Also, we will achieve remote code execution as **SYSTEM**
    by exploiting the DNSAdmins user’s membership (CVE-2021-40469).
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 域中有几个*内置的安全组*，它们为特定任务预配置了权限。我们不打算讨论通常的高权限组，如*域*、*架构*或*企业管理员*。这些组在森林和域中的作用非常明确。我们将讨论一些很少提及的操作员安全组，如**帐户操作员**、**打印操作员**和**服务器操作员**。在实践部分，我们将演示权限提升的途径，在该途径中，属于**备份操作员**组的用户可以从域控制器中提取**ntds.dit**文件。此外，我们将利用**DNSAdmins**用户的成员身份（CVE-2021-40469）实现以**SYSTEM**身份的远程代码执行。
- en: Note
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Good documentation about groups is provided by Microsoft: [https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups](https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups).'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 关于组的良好文档由微软提供：[https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups](https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups)。
- en: We will start our review with the *Account Operators* group (**S-1-5-32-548**).
    As per Microsoft, this group is considered to be a service administrator group
    and their recommendation is to leave it empty. In case an attacker compromises
    a user with membership of such a group, they would be able to log in locally to
    the domain controller and create or modify accounts (although not administrative
    accounts).
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从*帐户操作员*组（**S-1-5-32-548**）开始回顾。根据微软的说法，这个组被视为服务管理员组，他们的建议是将其保持为空。如果攻击者攻陷了一个属于该组的用户，他们将能够本地登录到域控制器并创建或修改帐户（尽管不能修改管理员帐户）。
- en: Members of the *Server Operators* group (**S-1-5-32-549)** can administer and
    maintain domain controllers. This group exists only on them and is empty by default.
    Members of this group can’t change any administrative group memberships but can
    edit and start/stop services and back up and restore files. Being a member of
    this group opens great opportunities for persistence, as it is allowed to change
    binaries installed on the domain controller.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '*服务器操作员*组（**S-1-5-32-549**）的成员可以管理和维护域控制器。该组仅存在于域控制器上，默认情况下为空。该组的成员不能更改任何管理组的成员资格，但可以编辑和启动/停止服务，并备份和恢复文件。成为此组的成员为持久性提供了极大的机会，因为可以更改安装在域控制器上的二进制文件。'
- en: The *Print Operators* group (**S-1-5-32-550**) members are allowed to load drivers
    and manage printers connected to the domain controller, as well as logging on
    locally. An attacker can enable **SeLoadDriverPrivilege** and load a vulnerable
    driver, such as **Capcom.sys**[13]. However, since Windows 10 version 1803, it
    is not exploitable anymore, as registry references in **HKEY_Current_User** are
    not allowed.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '*打印操作员*组（**S-1-5-32-550**）的成员被允许加载驱动程序并管理连接到域控制器的打印机，以及本地登录。攻击者可以启用**SeLoadDriverPrivilege**并加载易受攻击的驱动程序，如**Capcom.sys**[13]。然而，自Windows
    10版本1803以来，已不再可利用，因为**HKEY_Current_User**中的注册表引用不再被允许。'
- en: 'Now we will move on to practical exercises. The *Backup Operators* group (**S-1-5-32-551**)
    privileges are quite obviously derived from the group name: back up and restore
    files despite any permissions set on them. By default, this group is empty. To
    introduce this vulnerability, I will add the lord.varys user to the group. The
    exploitation itself is rather straightforward and involves three steps: connection
    to the remote registry, opening registry hives, and saving them locally or remotely.
    Registry hives are **SAM**, **SYSTEM**, and **SECURITY**. Then, an attacker can
    utilize **secretsdump** from **impacket** and use the machine account hash of
    the domain controller to dump ntds.dit. The exploitation code can be found here[14].
    First, let us run the exploit and save registry hives to the folder where we have
    access (it can be the UNC path as well):'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将进入实际操作。*Backup Operators*组（**S-1-5-32-551**）的权限显然源自组名：备份和恢复文件，尽管这些文件可能已经设置了权限。默认情况下，该组为空。为了引入此漏洞，我将把lord.varys用户添加到该组中。漏洞利用本身非常简单，涉及三个步骤：连接到远程注册表、打开注册表Hive并将它们保存到本地或远程位置。注册表Hive包括**SAM**、**SYSTEM**和**SECURITY**。然后，攻击者可以利用**secretsdump**工具（来自**impacket**）并使用域控制器的机器账户哈希值来转储ntds.dit文件。利用代码可以在这里找到[14]。首先，让我们运行利用代码，并将注册表Hive保存到我们可以访问的文件夹（也可以是UNC路径）中：
- en: '[PRE20]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The result of the command execution is the following screenshot:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 命令执行的结果如下截图所示：
- en: '![Figure 6.26 – Successfully dumped registry hives](image/B18964_06_26.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![图6.26 – 成功转储注册表Hive](image/B18964_06_26.jpg)'
- en: Figure 6.26 – Successfully dumped registry hives
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.26 – 成功转储注册表Hive
- en: 'The next step is to extract the domain controller’s machine account hash and
    dump ntds.dit:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是提取域控制器的机器账户哈希，并转储ntds.dit文件：
- en: '[PRE21]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As a result, hashes were successfully dumped:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，哈希值成功转储：
- en: '![Figure 6.27 – ntds.dit file was dumped from the domain controller](image/B18964_06_27.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![图6.27 – 从域控制器转储了ntds.dit文件](image/B18964_06_27.jpg)'
- en: Figure 6.27 – ntds.dit file was dumped from the domain controller
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.27 – 从域控制器转储了ntds.dit文件
- en: The next example will demonstrate how to achieve remote code execution as **SYSTEM**
    on the domain controller by just being a member of the *DNSAdmins* security group.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例将演示如何仅通过成为*DNSAdmins*安全组的成员，实现在域控制器上以**SYSTEM**身份执行远程代码。
- en: DNSAdmins abuse (CVE-2021-40469)
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DNSAdmins滥用（CVE-2021-40469）
- en: If an attacker is a member of the *DNSAdmins* group, it is possible to trigger
    the DNS server to load a DLL of our choice and execute it under the **SYSTEM**
    context. The path to the DLL is provided in the **ServerLevelPluginDll** value,
    which can be a UNC path as well.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 如果攻击者是*DNSAdmins*组的成员，则可以触发DNS服务器加载我们选择的DLL并在**SYSTEM**上下文下执行它。DLL的路径在**ServerLevelPluginDll**值中提供，也可以是UNC路径。
- en: Note
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'A blog post by this finding’s author can be found here: [https://medium.com/@esnesenon/feature-not-bug-dnsadmin-to-dc-compromise-in-one-line-a0f779b8dc83](mailto:https://medium.com/@esnesenon/feature-not-bug-dnsadmin-to-dc-compromise-in-one-line-a0f779b8dc83).'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 本发现的作者博客文章可以在这里找到：[https://medium.com/@esnesenon/feature-not-bug-dnsadmin-to-dc-compromise-in-one-line-a0f779b8dc83](mailto:https://medium.com/@esnesenon/feature-not-bug-dnsadmin-to-dc-compromise-in-one-line-a0f779b8dc83)。
- en: 'To demonstrate this technique, I will add the jon.snow user to the DNSAdmins
    group in the **north.sevenkingdoms.local** domain. Our exploitation path is to
    generate the DLL with the reverse shell and place it in the **Public** share folder
    on the **castelblack** server. Then, add the plugin, wait for the DNS server to
    restart, and obtain the reverse shell on our Kali machine:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这个技巧，我将把jon.snow用户添加到**north.sevenkingdoms.local**域的DNSAdmins组中。我们的利用路径是生成带有反向Shell的DLL，并将其放置在**castelblack**服务器的**Public**共享文件夹中。然后，添加插件，等待DNS服务器重启，并在我们的Kali机器上获取反向Shell：
- en: '[PRE22]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'After the DNS server restart, we obtained a reverse shell as **SYSTEM** on
    the domain controller:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在DNS服务器重启后，我们获得了以**SYSTEM**身份在域控制器上执行的反向Shell：
- en: '![Figure 6.28 – Successful exploitation of CVE-2021-40469 resulting in the
    reverse shell as SYSTEM on the domain controller](image/B18964_06_28.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![图6.28 – 成功利用CVE-2021-40469，在域控制器上获得反向Shell并以SYSTEM身份执行](image/B18964_06_28.jpg)'
- en: Figure 6.28 – Successful exploitation of CVE-2021-40469 resulting in the reverse
    shell as SYSTEM on the domain controller
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.28 – 成功利用CVE-2021-40469，在域控制器上获得反向Shell并以SYSTEM身份执行
- en: Next, we will cover privilege escalation from a child to a parent domain. Also,
    we will briefly discuss PAM trust and the concept of the bastion domain.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论从子域到父域的权限提升问题。同时，我们还将简要讨论PAM信任和堡垒域的概念。
- en: Child/parent domain escalation
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 子域/父域特权提升
- en: 'During one of the previous attacks, we were able to dump **ntds.dit** of the
    **north.sevenkingdoms.local** domain. Now it is possible to add extra SIDs in
    our forge ticket to escalate privileges to the parent domain. To successfully
    forge tickets, we need the SIDs of both domains – the krbtgt hash for the golden
    ticket and the trust key for the inter-realm ticket. The following commands will
    find the domain SIDs and forge the golden ticket with the help of Mimikatz:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的一次攻击中，我们能够导出 **north.sevenkingdoms.local** 域的 **ntds.dit**。现在，我们可以在伪造的票证中添加额外的SID，以便提升特权到父域。为了成功伪造票证，我们需要两个域的SID
    —— 金票证的krbtgt哈希值和跨域票证的信任密钥。以下命令将找到域SID，并借助Mimikatz伪造金票证：
- en: '[PRE23]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '**/sid** is the SID of the child domain. **/sids** is the **Enterprise Admins**
    SID in the parent domain. The result is CIFS access to the domain controller in
    the parent domain:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '**/sid** 是子域的SID。**/sids** 是父域中 **Enterprise Admins** 的SID。结果是可以通过CIFS访问父域中的域控制器：'
- en: '![Figure 6.29 – Forged golden ticket provides access to the domain controller
    in the parent domain](image/B18964_06_29.jpg)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![图6.29 – 伪造的金票证提供对父域中域控制器的访问](image/B18964_06_29.jpg)'
- en: Figure 6.29 – Forged golden ticket provides access to the domain controller
    in the parent domain
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.29 – 伪造的金票证提供对父域中域控制器的访问
- en: 'The second option is to create a referral ticket that is TGT-encrypted with
    a trust key. The trust key has the name format **domain$**. The command to forge
    the inter-realm ticket is the following:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种选择是创建一个使用信任密钥加密的TGT（目标票证）推荐票证。信任密钥的名称格式为 **domain$**。伪造跨域票证的命令如下：
- en: '[PRE24]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The following result is the same as the one achieved with the forged Golden
    Ticket:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 以下结果与伪造金票证获得的结果相同：
- en: '![Figure 6.30 – Forged inter-realm ticket provides access to the domain controller
    in the parent domain](image/B18964_06_30.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![图6.30 – 伪造的跨域票证提供对父域中域控制器的访问](image/B18964_06_30.jpg)'
- en: Figure 6.30 – Forged inter-realm ticket provides access to the domain controller
    in the parent domain
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.30 – 伪造的跨域票证提供对父域中域控制器的访问
- en: There is a way to prevent such a privilege escalation vector – enabling SID
    filtering between the child and parent domain. If we do not need SID history,
    for compatibility purposes, it can be disabled.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种方法可以防止这种特权提升漏洞——在子域和父域之间启用SID过滤。如果我们不需要SID历史记录，可以出于兼容性考虑禁用它。
- en: Note
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: A great blog post with examples of failed attacks was written by researchers
    from *Improsec* ([https://improsec.com/tech-blog/sid-filter-as-security-boundary-between-domains-part-3-sid-filtering-explained](https://improsec.com/tech-blog/sid-filter-as-security-boundary-between-domains-part-3-sid-filtering-explained)).
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 由 *Improsec* 的研究人员撰写的一篇优秀博客文章中，展示了失败攻击的例子 ([https://improsec.com/tech-blog/sid-filter-as-security-boundary-between-domains-part-3-sid-filtering-explained](https://improsec.com/tech-blog/sid-filter-as-security-boundary-between-domains-part-3-sid-filtering-explained))。
- en: However, it was shown in other research made by the same company that not all
    SIDs are filtered, so their privileges in the child domain should be carefully
    reviewed ([https://improsec.com/tech-blog/sid-filter-as-security-boundary-between-domains-part-4-bypass-sid-filtering-research](https://improsec.com/tech-blog/sid-filter-as-security-boundary-between-domains-part-4-bypass-sid-filtering-research)).
    Another SID filtering bypass is that **SYSTEM** on the child domain controller
    can link the GPO to the parent site. It will be replicated even with SID filtering
    enabled.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，其他同一公司进行的研究表明，并非所有的SID都会被过滤，因此在子域中的特权应当仔细审查 ([https://improsec.com/tech-blog/sid-filter-as-security-boundary-between-domains-part-4-bypass-sid-filtering-research](https://improsec.com/tech-blog/sid-filter-as-security-boundary-between-domains-part-4-bypass-sid-filtering-research))。另一个SID过滤绕过方法是，子域控制器上的
    **SYSTEM** 可以将GPO链接到父站点，即使启用了SID过滤，它也会被复制。
- en: Privileged Access Management
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特权访问管理
- en: '**Privileged Access Management** (**PAM**) is not a new concept; it was introduced
    by Microsoft as a part of the **Enhanced Security Administrative Environment**
    (**ESAE**) model, which also includes **Just-Enough-Administration** (**JEA**)
    and **Microsoft Identity Manager** (**MIM**). The idea is to create a hardened
    bastion forest for administrators (Red Forest) and connect it to the production
    forest by using one-way **Privileged Identity Management (PIM**) trust. Just a
    reminder that the direction of the trust is opposite to the direction of the access.
    Administrative access to the production forest is managed by **Shadow Principals**
    in the bastion forest. Users from the bastion forest are added to Shadow Principal
    groups, which are therefore mapped to privileged groups in the production forest.
    The **time-to-live** (**TTL**) value can be set to reduce the privileged access
    time. This allows administration of the production forest without interactive
    logons, group membership, and ACL changes.'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '**特权访问管理**（**PAM**）不是一个新概念，它是由微软引入的，作为**增强型安全管理环境**（**ESAE**）模型的一部分，ESAE还包括**恰到好处的管理**（**JEA**）和**微软身份管理器**（**MIM**）。其理念是为管理员创建一个强化的堡垒森林（红森林），并通过使用单向**特权身份管理（PIM）**信任将其连接到生产森林。提醒一下，信任的方向与访问的方向是相反的。对生产森林的管理访问是由堡垒森林中的**影子主体**管理的。来自堡垒森林的用户被添加到影子主体组中，因此这些组会映射到生产森林中的特权组。可以设置**生存时间**（**TTL**）值来减少特权访问时间。这使得无需交互式登录、组成员身份和ACL更改即可管理生产森林。'
- en: Note
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'A great guide on how to deploy a bastion forest and establish PIM trust can
    be found here: [https://petri.com/windows-server-2016-set-privileged-access-management/](https://petri.com/windows-server-2016-set-privileged-access-management/).'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何部署堡垒森林并建立PIM信任的一个极好的指南可以在这里找到：[https://petri.com/windows-server-2016-set-privileged-access-management/](https://petri.com/windows-server-2016-set-privileged-access-management/)。
- en: 'The following commands from ADModule will check whether the current forest
    has PAM trust or is managed by a bastion forest and enumerate **Shadow** **Security
    Principals**:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 来自ADModule的以下命令将检查当前森林是否具有PAM信任或是否由堡垒森林管理，并列举**影子安全主体**：
- en: '[PRE25]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: As an attacker, our target is to compromise members of Shadow Security Principal
    or abuse the SID history.
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为攻击者，我们的目标是妥协**影子安全主体**成员或滥用SID历史。
- en: Note
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Great tips about persistence were added by *Nikhil Mittal* in this blog post:
    [http://www.labofapenetrationtester.com/2019/04/abusing-PAM.xhtml](http://www.labofapenetrationtester.com/2019/04/abusing-PAM.xhtml).'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 关于持久性的大量技巧由*Nikhil Mittal*在这篇博客文章中分享：[http://www.labofapenetrationtester.com/2019/04/abusing-PAM.xhtml](http://www.labofapenetrationtester.com/2019/04/abusing-PAM.xhtml)。
- en: The obvious way is to add a user to an existing shadow security principal container.
    However, it can be easily detected during privileged group review. A more stealthy
    way is to grant a low-privileged user the **WriteMember** right on the Shadow
    Principal object. Access attempts to the production forest are logged via logon/logoff
    events but depending on the user account, an alert can be raised.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 明显的方法是将用户添加到现有的影子安全主体容器中。然而，这在特权组审核过程中很容易被发现。更隐蔽的方法是授予低特权用户**写成员**权限，允许其访问影子主体对象。对生产森林的访问尝试通过登录/注销事件进行记录，但根据用户帐户的不同，可能会触发警报。
- en: Summary
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: In this chapter, we covered how an attacker can escalate privileges inside the
    domain. We started our conversation with deadly exploits that grant the highest
    privileges in the blink of an eye. Regular patching and vulnerability management
    can help to mitigate this attack vector. Next, we looked at various ACL abuses
    against domain objects. We reviewed the most common privilege escalation paths,
    accompanied by practical examples. Special attention was paid to GPO abuse, as
    Group Policies can be deployed throughout the domain, providing an attacker with
    lateral movement, privilege escalation, and persistence opportunities all at once.
    We also discussed built-in domain groups that can be used for privilege escalation
    if a member of a such group has been compromised. Lastly, we looked at privilege
    escalation through trust relationships between child and parent domains. Also,
    briefly, we touched upon the PAM trust theme and possible misconfigurations that
    could ruin the whole ESAE model.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了攻击者如何在域内提升权限。我们从那些能够瞬间授予最高权限的致命漏洞开始讨论。定期修补和漏洞管理可以帮助减轻这种攻击途径。接下来，我们讨论了针对域对象的各种
    ACL 滥用。我们回顾了最常见的特权升级路径，并附上了实际示例。特别关注了 GPO 滥用，因为组策略可以在整个域中部署，从而为攻击者提供横向移动、特权提升和持久化机会。我们还讨论了在某个组成员被攻破时，内建域组可以用于特权提升的情形。最后，我们讨论了通过子域与父域之间的信任关系进行特权提升的情况。此外，我们简要提到了
    PAM 信任主题以及可能的配置错误，这些错误可能破坏整个 ESAE 模型。
- en: In the next chapter, we will talk about ways an attacker can achieve persistence
    in the domain. It is critical to understand how an attacker can maintain access
    to the domain.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论攻击者如何在域中实现持久性。了解攻击者如何维持对域的访问至关重要。
- en: References
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: 'MS14-068 exploit: [https://github.com/mubix/pykek](https://github.com/mubix/pykek)'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'MS14-068 漏洞利用: [https://github.com/mubix/pykek](https://github.com/mubix/pykek)'
- en: 'Zerologon relay scenario: [https://dirkjanm.io/a-different-way-of-abusing-zerologon/](https://dirkjanm.io/a-different-way-of-abusing-zerologon/)'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Zerologon 中继场景: [https://dirkjanm.io/a-different-way-of-abusing-zerologon/](https://dirkjanm.io/a-different-way-of-abusing-zerologon/)'
- en: 'Zerologon change password scenario: [https://www.thehacker.recipes/ad/movement/netlogon/zerologon](https://www.thehacker.recipes/ad/movement/netlogon/zerologon)'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Zerologon 更改密码场景: [https://www.thehacker.recipes/ad/movement/netlogon/zerologon](https://www.thehacker.recipes/ad/movement/netlogon/zerologon)'
- en: 'Zerologon exploits: [https://github.com/VoidSec/CVE-2020-1472](https://github.com/VoidSec/CVE-2020-1472)
    and [https://github.com/dirkjanm/CVE-2020-1472](https://github.com/dirkjanm/CVE-2020-1472)'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Zerologon 漏洞利用: [https://github.com/VoidSec/CVE-2020-1472](https://github.com/VoidSec/CVE-2020-1472)
    和 [https://github.com/dirkjanm/CVE-2020-1472](https://github.com/dirkjanm/CVE-2020-1472)'
- en: 'Printnightmare exploitation constraints: [https://www.thehacker.recipes/ad/movement/print-spooler-service/printnightmare#constraints](https://www.thehacker.recipes/ad/movement/print-spooler-service/printnightmare#constraints)'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Printnightmare 利用约束: [https://www.thehacker.recipes/ad/movement/print-spooler-service/printnightmare#constraints](https://www.thehacker.recipes/ad/movement/print-spooler-service/printnightmare#constraints)'
- en: 'Printnightmare exploit: [https://github.com/cube0x0/CVE-2021-1675](https://github.com/cube0x0/CVE-2021-1675)'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Printnightmare 漏洞利用: [https://github.com/cube0x0/CVE-2021-1675](https://github.com/cube0x0/CVE-2021-1675)'
- en: 'Windows version noPac exploit: [https://github.com/cube0x0/noPac](https://github.com/cube0x0/noPac)'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Windows 版本 noPac 漏洞利用: [https://github.com/cube0x0/noPac](https://github.com/cube0x0/noPac)'
- en: 'Linux version noPac exploit: [https://github.com/WazeHell/sam-the-admin](https://github.com/WazeHell/sam-the-admin)'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Linux 版本 noPac 漏洞利用: [https://github.com/WazeHell/sam-the-admin](https://github.com/WazeHell/sam-the-admin)'
- en: 'Local potato: [https://decoder.cloud/2023/02/13/localpotato-when-swapping-the-context-leads-you-to-system/](https://decoder.cloud/2023/02/13/localpotato-when-swapping-the-context-leads-you-to-system/)'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Local potato: [https://decoder.cloud/2023/02/13/localpotato-when-swapping-the-context-leads-you-to-system/](https://decoder.cloud/2023/02/13/localpotato-when-swapping-the-context-leads-you-to-system/)'
- en: 'Remote Potato0: [https://github.com/antonioCoco/RemotePotato0](https://github.com/antonioCoco/RemotePotato0)'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Remote Potato0: [https://github.com/antonioCoco/RemotePotato0](https://github.com/antonioCoco/RemotePotato0)'
- en: 'ACL mind map: [https://www.thehacker.recipes/ad/movement/dacl](https://www.thehacker.recipes/ad/movement/dacl)'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'ACL 思维导图: [https://www.thehacker.recipes/ad/movement/dacl](https://www.thehacker.recipes/ad/movement/dacl)'
- en: 'SharpGPOAbuse tool: [https://github.com/FsecureLABS/SharpGPOAbuse](https://github.com/FsecureLABS/SharpGPOAbuse)'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'SharpGPOAbuse 工具: [https://github.com/FsecureLABS/SharpGPOAbuse](https://github.com/FsecureLABS/SharpGPOAbuse)'
- en: 'Print Operator privilege escalation: [https://neutronsec.com/privesc/windows/print_operators/](https://neutronsec.com/privesc/windows/print_operators/)'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印操作员特权提升：[https://neutronsec.com/privesc/windows/print_operators/](https://neutronsec.com/privesc/windows/print_operators/)
- en: 'Backup Operator to DA exploit: [https://github.com/mpgn/BackupOperatorToDA](https://github.com/mpgn/BackupOperatorToDA)'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从备份操作员到域管理员的漏洞利用：[https://github.com/mpgn/BackupOperatorToDA](https://github.com/mpgn/BackupOperatorToDA)
- en: Further reading
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'These aids for further study will let you dive deeper into the attacks covered
    in the chapter:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 这些进一步学习的资源将帮助你深入了解本章中讨论的攻击：
- en: 'I highly encourage you to read this blog post, as it has great insights into
    how the Remote Potato attack path was discovered and the general way of research
    thinking: [https://www.sentinelone.com/labs/relaying-potatoes-another-unexpected-privilege-escalation-vulnerability-in-windows-rpc-protocol/](https://www.sentinelone.com/labs/relaying-potatoes-another-unexpected-privilege-escalation-vulnerability-in-windows-rpc-protocol/).'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我强烈建议你阅读这篇博客文章，因为它深入探讨了 Remote Potato 攻击路径是如何被发现的，以及一般的研究思维方式：[https://www.sentinelone.com/labs/relaying-potatoes-another-unexpected-privilege-escalation-vulnerability-in-windows-rpc-protocol/](https://www.sentinelone.com/labs/relaying-potatoes-another-unexpected-privilege-escalation-vulnerability-in-windows-rpc-protocol/)。
- en: 'A good demonstration of the Remote Potato exploit in action: [https://pentestlab.blog/2021/05/04/remote-potato-from-domain-user-to-enterprise-admin/](https://pentestlab.blog/2021/05/04/remote-potato-from-domain-user-to-enterprise-admin/)'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Remote Potato 漏洞利用的一个良好演示：[https://pentestlab.blog/2021/05/04/remote-potato-from-domain-user-to-enterprise-admin/](https://pentestlab.blog/2021/05/04/remote-potato-from-domain-user-to-enterprise-admin/)
- en: 'Microsoft documentation about Group Policy structure: [https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-gpod/260b58dc-da14-400b-8b82-6abbfd529fbf](https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-gpod/260b58dc-da14-400b-8b82-6abbfd529fbf)'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关组策略结构的 Microsoft 文档：[https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-gpod/260b58dc-da14-400b-8b82-6abbfd529fbf](https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-gpod/260b58dc-da14-400b-8b82-6abbfd529fbf)
- en: 'Microsoft PowerShell GP-Link command reference: [https://learn.microsoft.com/en-us/powershell/module/grouppolicy/new-gplink?view=windowsserver2022-ps](https://learn.microsoft.com/en-us/powershell/module/grouppolicy/new-gplink?view=windowsserver2022-ps)'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft PowerShell GP-Link 命令参考：[https://learn.microsoft.com/en-us/powershell/module/grouppolicy/new-gplink?view=windowsserver2022-ps](https://learn.microsoft.com/en-us/powershell/module/grouppolicy/new-gplink?view=windowsserver2022-ps)
