- en: Maintaining Access and Clearing Tracks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 维持访问和清除痕迹
- en: In the previous chapter, we learned about privilege-escalation concepts along
    with practical escalation techniques.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了特权升级概念以及实际的升级技术。
- en: In this chapter, we will be learning about maintaining access on a compromised
    system and cleaning up tracks using anti-forensic techniques. We will learn how
    to make persistent backdoors on the compromised system and use Metasploit's anti-forensic
    abilities to clear penetration trails.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何在被妥协的系统上保持访问并使用反取证技术清除痕迹。我们将学习如何在被妥协的系统上建立持久后门，并使用Metasploit的反取证能力来清除渗透痕迹。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Maintaining access
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维持访问
- en: Clearing tracks and trails
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清除痕迹和路径
- en: Anti-forensics
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反取证
- en: Maintaining access
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 维持访问
- en: So far in this book, we have seen the various phases in a penetration test.
    All these phases require substantial time and effort. Let's assume you are conducting
    a penetration test on a target and have worked hard to get remote system access
    using Metasploit. You want to keep this hard-earned access for a few days while
    your assignment continues. However, there's no guarantee whether the compromised
    system will reboot during this period. If it reboots, your access will be lost
    and you may have to work again to gain the same access. This is the exact scenario
    where we want to maintain, or persist, access to our compromised system irrespective
    of whether it reboots.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本书中，我们已经看到了渗透测试的各个阶段。所有这些阶段都需要大量的时间和精力。假设你正在对一个目标进行渗透测试，并且已经努力通过Metasploit获得了远程系统访问。你希望在任务继续进行的几天内保持这种辛苦获得的访问。然而，在这段时间内，被妥协的系统是否会重新启动并没有保证。如果重新启动，你的访问将会丢失，你可能需要再次努力获得相同的访问权限。这正是我们希望在被妥协的系统中保持或持续访问的确切场景。
- en: 'Metasploit offers some excellent built-in mechanisms that can help us maintain
    the persistent access to the compromised system. The first step will be to use
    a suitable exploit available against the vulnerable target system and get Meterpreter
    access, as shown in the following screenshot:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit提供了一些出色的内置机制，可以帮助我们保持对被妥协系统的持久访问。第一步将是利用针对易受攻击的目标系统的合适漏洞，并获得Meterpreter访问，如下截图所示：
- en: '![](img/b2851627-c0a8-49fd-ae4a-d4bad9f6ab73.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b2851627-c0a8-49fd-ae4a-d4bad9f6ab73.png)'
- en: 'Once the exploit is successful, we get Meterpreter access to the remote system.
    Meterpreter within Metasploit offers a utility known as `persistence`, which helps
    us install a permanent backdoor on the compromised system. We can learn more about
    the `persistence` utility with the `run persistence -h` command:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦利用成功，我们就可以获得对远程系统的Meterpreter访问。Metasploit中的Meterpreter提供了一个名为`persistence`的实用程序，它可以帮助我们在受损系统上安装一个永久后门。我们可以使用`run
    persistence -h`命令了解更多关于`persistence`实用程序的信息：
- en: '![](img/33782514-af5a-4d03-ba41-9d06880628bb.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/33782514-af5a-4d03-ba41-9d06880628bb.png)'
- en: 'Now we execute the `persistence` command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们执行`persistence`命令：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This command will execute the `persistence` script and start a matching handler
    (`-A`), place the Meterpreter at `c:\\` on the target system (`-L c:\\`), automatically
    start the listener when the system boots (`-X`), check every 60 seconds for a
    connection (`60`), connect on port `443` (`-p 443`), and connect back to us on
    IP address `192.168.25.130`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将执行`persistence`脚本并启动一个匹配的处理程序(`-A`)，将Meterpreter放在目标系统的`c:\\`位置(`-L c:\\`)，系统启动时自动启动监听器(`-X`)，每60秒检查一次连接(`60`)，在端口`443`上连接(`-p
    443`)，并在IP地址`192.168.25.130`上回连到我们。
- en: 'The output of the execution of the `persistence` script is as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`persistence`脚本的执行输出如下：'
- en: '![](img/56119311-b4c1-483d-b8a7-b8957aa3c1cb.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/56119311-b4c1-483d-b8a7-b8957aa3c1cb.png)'
- en: Now that the `persistence` script has been successfully installed on the target
    system, we need not worry about reboots. Even if the target system reboots, either
    intentionally or accidentally, the `persistence` script will automatically connect
    back to us, giving us Meterpreter access again.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`persistence`脚本已成功安装在目标系统上，我们不需要担心重新启动。即使目标系统重新启动，无论是故意还是意外，`persistence`脚本都会自动重新连接到我们，再次给我们Meterpreter访问权限。
- en: Clearing tracks and trails
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清除痕迹和路径
- en: A penetration test consists of a sequence of complex tasks executed against
    the target. The execution of these tasks impacts the target system in many ways.
    Several configuration files may get modified, a lot of audit records may get recorded
    in log files, and there might be changes in the registry in the case of Windows
    systems. All these changes may help the investigators or blue team members to
    trace back the attack vector.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 渗透测试由一系列复杂的任务对目标系统执行而成。执行这些任务会以多种方式影响目标系统。多个配置文件可能会被修改，许多审计记录可能会被记录在日志文件中，对于Windows系统，注册表可能会发生变化。所有这些变化可能帮助调查人员或蓝队成员追溯攻击向量。
- en: After completing a penetration test, it would be good to clear all the residual
    files that were used during the compromise. However, this needs to be in agreement
    with the blue team. Another intent behind clearing out all the tracks could be
    testing the post-incident response methods of an organization. However, the real-world
    attackers would simply use this to cover their tracks and stay undetected.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 完成渗透测试后，清除所有在妥协过程中使用的残留文件是很好的。但是，这需要与蓝队达成一致。清除所有痕迹的另一个目的可能是测试组织的事后响应方法。然而，现实世界的攻击者可能会简单地利用这一点来掩盖他们的痕迹并保持不被发现。
- en: 'Metasploit has certain capabilities that help with clearing tracks. First,
    we need to exploit a vulnerability and give Meterpreter access to our target:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit具有一些帮助清除痕迹的能力。首先，我们需要利用一个漏洞并给予Meterpreter对目标的访问：
- en: '![](img/b4b9c3e8-0a35-43c7-89a5-a005d39b34ca.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b4b9c3e8-0a35-43c7-89a5-a005d39b34ca.png)'
- en: 'The following screenshot shows the Application event logs on our target system:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我们目标系统上的应用程序事件日志：
- en: '![](img/859e6c25-02ed-4a4f-aa7f-836700e5be7c.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/859e6c25-02ed-4a4f-aa7f-836700e5be7c.png)'
- en: 'The following screenshot shows the `System` event logs on our target system:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我们目标系统上的`System`事件日志：
- en: '![](img/d874c0a5-b473-4d67-ac9a-08eb488805be.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d874c0a5-b473-4d67-ac9a-08eb488805be.png)'
- en: 'Now that we have given Meterpreter access to our target system, we''ll escalate
    our privileges to that of the administrator using the `getsystem` command. The
    Meterpreter has a utility called `clearev`, which is used to wipe out audit records
    on a target system. When we execute `clearev`, all the audit records on the target
    get erased:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经给予Meterpreter对目标系统的访问权限，我们将使用`getsystem`命令将权限提升到管理员级别。Meterpreter有一个名为`clearev`的实用程序，用于擦除目标系统上的审计记录。当我们执行`clearev`时，目标上的所有审计记录都被擦除：
- en: '![](img/d9af5879-b8c8-4663-a119-06756ff7c95e.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9af5879-b8c8-4663-a119-06756ff7c95e.png)'
- en: 'The following screenshot shows that there are no Application event logs as
    they got erased by `clearev`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示，由于`clearev`擦除了应用程序事件日志，因此没有应用程序事件日志：
- en: '![](img/43af6a3f-66f7-4d6c-97d7-9fb54a1229c4.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/43af6a3f-66f7-4d6c-97d7-9fb54a1229c4.png)'
- en: 'The following screenshot shows that there are no System event logs as they
    got erased by `clearev`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示，由于`clearev`擦除了系统事件日志，因此没有系统事件日志：
- en: '![](img/584ee98d-d327-4501-a7c7-3527a8dfb78c.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/584ee98d-d327-4501-a7c7-3527a8dfb78c.png)'
- en: 'Similarly, on a target with a Linux operating system, we can do a few things
    to clear our tracks and traces. The Linux Terminal maintains a command history
    and it can be viewed using the `history` command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在具有Linux操作系统的目标上，我们可以做一些事情来清除我们的痕迹。Linux终端维护命令历史记录，可以使用`history`命令查看：
- en: '![](img/a3565782-5d49-40e3-bc10-7d4be4436499.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a3565782-5d49-40e3-bc10-7d4be4436499.png)'
- en: 'On a Linux system (Debian-based), the parameter that is responsible for controlling
    the command history is `$HISTSIZE`. If we are able to set its value to `0`, there
    won''t be any history of commands stored:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux系统（基于Debian的系统）中，负责控制命令历史记录的参数是`$HISTSIZE`。如果我们能够将其值设置为`0`，就不会存储任何命令历史记录：
- en: '![](img/d8ea765e-028f-4410-8cd5-3aefe4474b63.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d8ea765e-028f-4410-8cd5-3aefe4474b63.png)'
- en: Anti-forensics
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反取证
- en: In the previous section, we saw that the penetration testing tasks leave behind
    multiple tracks and trails. A post-incident forensic investigation can reveal
    a lot about how the compromise happened. One of the important factors when performing
    a forensic analysis is timestamps. File timestamps help recreate a series of activities
    that might have happened.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们看到渗透测试任务留下了多个痕迹。事后取证调查可以揭示有关妥协发生方式的许多信息。进行取证分析时的一个重要因素是时间戳。文件时间戳有助于重建可能发生的一系列活动。
- en: Metasploit offers capabilities that could effectively be used in overriding
    timestamp values and mislead the forensic investigation.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit提供了能够有效用于覆盖时间戳值并误导取证调查的功能。
- en: 'At first, we use an exploit against our target to get Meterpreter access. Then
    we use the `timestomp <filename> -v` command to list the various timestamps associated
    with the file:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们利用漏洞针对目标使用Meterpreter访问。然后我们使用`timestomp <filename> -v`命令列出与文件相关的各种时间戳：
- en: '![](img/9eb1336c-08a4-4383-bef5-962afcf88a93.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9eb1336c-08a4-4383-bef5-962afcf88a93.png)'
- en: 'We can now try to erase the timestamps of a file using the `timestamp <filename>
    -b` command. This command will wipe out all the timestamps associated with the
    target file:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以尝试使用`timestamp <filename> -b`命令擦除文件的时间戳。此命令将清除与目标文件相关的所有时间戳：
- en: '![](img/7c098fc8-9bb8-4442-98c3-046974762c61.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7c098fc8-9bb8-4442-98c3-046974762c61.png)'
- en: Summary
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned various techniques to make persistent access to
    a compromised target. We also learned various methods to clear traces from the
    compromised system along with some of the anti-forensic abilities of the Metasploit
    framework.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了各种技术来持久访问受损目标。我们还学习了清除受损系统痕迹的各种方法，以及Metasploit框架的一些反取证能力。
- en: In the next chapter, we will learn about the importance of correct vulnerability
    scoring.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习正确漏洞评分的重要性。
