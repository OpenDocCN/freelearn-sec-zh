- en: '*Chapter 7*: Scanning 101'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第7章*：扫描基础知识'
- en: In the last chapter, we discussed how packets are structured and relate to the
    OSI model, set up capture filters with Wireshark, and used display filters to
    analyze **industrial control system** (**ICS**) lab **packet captures** (**pcaps**)
    that we downloaded from Netresec, using and practicing these skills to further
    our knowledge and sharpen our pentesting skills.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了数据包的结构以及它们如何与OSI模型相关，使用Wireshark设置捕获过滤器，并通过显示过滤器分析我们从Netresec下载的**工业控制系统**（**ICS**）实验室**数据包捕获**（**pcaps**），通过这些技能来加深知识并提升我们的渗透测试能力。
- en: In this chapter, we are going to install Ignition SCADA and connect our Koyo
    Click PLC lab to it. We then will look at a number of tools for enumerating and
    scanning industrial networks, from port scanning with NMAP and RustScan to web
    application scanning with **human machine interfaces** (**HMIs**), SCADA operator
    screens, PLC control screens, and flow computer web portals with both Gobuster
    and feroxbuster. We will use these tools and run them against our Ignition SCADA
    instance.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将安装Ignition SCADA并将我们的Koyo Click PLC实验室与之连接。接着，我们将查看用于枚举和扫描工业网络的多种工具，从使用NMAP和RustScan进行端口扫描，到使用**人机界面**（**HMIs**）、SCADA操作员屏幕、PLC控制屏幕和流量计算机网页门户进行Web应用程序扫描，使用工具包括Gobuster和feroxbuster。我们将使用这些工具并在我们的Ignition
    SCADA实例上运行它们。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将覆盖以下主要主题：
- en: Installing and configuring Ignition SCADA
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置Ignition SCADA
- en: Introduction to NMAP
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NMAP简介
- en: Port scanning with RustScan
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用RustScan进行端口扫描
- en: Introduction to Gobuster
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gobuster简介
- en: Web application scanning with feroxbuster
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用feroxbuster进行Web应用程序扫描
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you will need the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，你将需要以下内容：
- en: '**Ignition SCADA**: You will need to install Inductive Automation''s Ignition
    SCADA in order to work with Gobuster and feroxbuster. Use the following link and
    install it on your SCADA VM host:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ignition SCADA**：你需要安装Inductive Automation的Ignition SCADA才能使用Gobuster和feroxbuster。使用以下链接并在你的SCADA虚拟机主机上进行安装：'
- en: '[https://inductiveautomation.com/downloads/](https://inductiveautomation.com/downloads/'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://inductiveautomation.com/downloads/](https://inductiveautomation.com/downloads/)'
- en: )
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '**NMAP**: [https://nmap.org/](https://nmap.org/).'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NMAP**：[https://nmap.org/](https://nmap.org/)。'
- en: '**RustScan**: [https://github.com/RustScan/RustScan](https://github.com/RustScan/RustScan).'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RustScan**：[https://github.com/RustScan/RustScan](https://github.com/RustScan/RustScan)。'
- en: '**Gobuster**: [https://github.com/OJ/gobuster](https://github.com/OJ/gobuster).'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Gobuster**：[https://github.com/OJ/gobuster](https://github.com/OJ/gobuster)。'
- en: '**feroxbuster**: [https://github.com/epi052/feroxbuster](https://github.com/epi052/feroxbuster).'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**feroxbuster**：[https://github.com/epi052/feroxbuster](https://github.com/epi052/feroxbuster)。'
- en: '**Redpoint Digital Bond''s ICS Enumeration Tools**: [https://github.com/digitalbond/Redpoint](https://github.com/digitalbond/Redpoint).'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Redpoint Digital Bond的ICS枚举工具**：[https://github.com/digitalbond/Redpoint](https://github.com/digitalbond/Redpoint)。'
- en: 'You can view this chapter''s code in action here: [https://bit.ly/3veEeNm](https://bit.ly/3veEeNm)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里查看本章代码的实际应用：[https://bit.ly/3veEeNm](https://bit.ly/3veEeNm)
- en: Installing and configuring Ignition SCADA
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置Ignition SCADA
- en: 'Ignition SCADA is one of the newest platforms on the market and one that is
    truly embracing modern technologies for the modular framework that it provides.
    It has been adopted by many industries and some big Fortune 100 companies to manage
    their industrial control processes. By using real-world software and hardware
    in our lab, we can gain a better understanding of how things interoperate prior
    to engaging in an assessment:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Ignition SCADA是市场上最新的平台之一，真正采用了现代技术并提供模块化框架。许多行业和一些大公司已经采纳了它来管理他们的工业控制过程。通过在实验室使用现实世界的软件和硬件，我们可以更好地理解事物如何在进行评估之前相互协作：
- en: Working with the link provided earlier, [https://inductiveautomation.com/downloads/](https://inductiveautomation.com/downloads/),
    we are going to download the package for our Ubuntu SCADA VM.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用之前提供的链接，[https://inductiveautomation.com/downloads/](https://inductiveautomation.com/downloads/)，我们将为我们的Ubuntu
    SCADA虚拟机下载软件包。
- en: You should have a package called **ignition-8.1.5-linux-x64-installer.run**.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该有一个名为**ignition-8.1.5-linux-x64-installer.run**的软件包。
- en: 'Running the following command will get the installer rolling:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令将启动安装程序：
- en: '**./iginition-8.1.5-linux-x64-installer.run**'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**./iginition-8.1.5-linux-x64-installer.run**'
- en: 'This will then launch the installer window, which looks like the following:'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将启动安装程序窗口，界面如下所示：
- en: '![Figure 7.1 – Ignition Installer'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图7.1 – Ignition安装程序'
- en: '](image/Figure_7.01_B16321.jpg)'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/Figure_7.01_B16321.jpg)'
- en: Figure 7.1 – Ignition Installer
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.1 – Ignition 安装程序
- en: Select **Next** through the default windows; we will keep the default location
    (**/usr/local/bin/ignition**) for Ignition installation. Click **Next** as shown
    in the following screenshot:![Figure 7.2 – Installation Location
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过默认的窗口选择**下一步**；我们将保持 Ignition 安装的默认位置（**/usr/local/bin/ignition**）。点击**下一步**，如下图所示：![图
    7.2 – 安装位置
- en: '](image/Figure_7.02_B16321.jpg)'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/Figure_7.02_B16321.jpg)'
- en: Figure 7.2 – Installation Location
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.2 – 安装位置
- en: Next, we want to select the **Typical** installation and then click the **Next**
    button as shown in the following screenshot:![Figure 7.3 – Typical installation
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们选择**典型**安装，然后点击**下一步**按钮，如下图所示：![图 7.3 – 典型安装
- en: '](image/Figure_7.03_B16321.jpg)'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/Figure_7.03_B16321.jpg)'
- en: Figure 7.3 – Typical installation
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.3 – 典型安装
- en: After those options, you are going to click the **Install** button. You will
    see Ignition extracting packages and installing the software on your SCADA host.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择完这些选项后，你将点击**安装**按钮。你会看到 Ignition 正在提取包并将软件安装到你的 SCADA 主机上。
- en: Click **Finish**, which will bring you to a screen that allows you to pick between
    three primary versions—**Maker Edition**, **Ignition**, and **Ignition Edge**,
    as shown in the following screenshot:![Figure 7.4 – Ignition versions
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**完成**，这将带你进入一个页面，你可以在其中选择三种主要版本—**Maker Edition**、**Ignition**和**Ignition
    Edge**，如下图所示：![图 7.4 – Ignition 版本
- en: '](image/Figure_7.04_B16321.jpg)'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/Figure_7.04_B16321.jpg)'
- en: Figure 7.4 – Ignition versions
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.4 – Ignition 版本
- en: Click **Ignition** as we know this is the product that is primarily used out
    in the industry.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Ignition**，因为我们知道这是行业中主要使用的产品。
- en: 'This will bring you to the **Terms and Conditions** page. Select that you agree
    and then you will be prompted with a screen for creating a new user, as follows:'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将带你进入**条款和条件**页面。选择同意，然后你将看到一个创建新用户的页面，如下所示：
- en: '![Figure 7.5 – Create a User'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.5 – 创建用户'
- en: '](image/Figure_7.05_B16321.jpg)'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/Figure_7.05_B16321.jpg)'
- en: Figure 7.5 – Create a User
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.5 – 创建用户
- en: I chose, for simplicity's sake, to use **scada** for the username and **scada**
    for the password as it will help expedite the installation process.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我为了简化安装过程，选择了将用户名设为**scada**，密码也设为**scada**。
- en: Next, you will be prompted with the option to configure ports. I have kept my
    ports as the default as this is typical for most industry installs. You can see
    the default ports for HTTP, HTTPS, and gateway network port in the following screenshot:![Figure
    7.6 – Configure Ports
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你将看到配置端口的选项提示。我将端口保持为默认设置，这是大多数行业安装的典型配置。你可以在以下截图中看到 HTTP、HTTPS 和网关网络端口的默认设置：![图
    7.6 – 配置端口
- en: '](image/Figure_7.06_B16321.jpg)'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/Figure_7.06_B16321.jpg)'
- en: Figure 7.6 – Configure Ports
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.6 – 配置端口
- en: Next, you will want to click the **Finish Setup** button and you will be brought
    to a page that states that your setup is completed and allows you to click a button
    to start the gateway, as shown in the following screenshot:![Figure 7.7 – Start
    Gateway
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你需要点击**完成设置**按钮，你将进入一个页面，显示安装已完成，并可以点击一个按钮来启动网关，如下图所示：![图 7.7 – 启动网关
- en: '](image/Figure_7.07_B16321.jpg)'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/Figure_7.07_B16321.jpg)'
- en: Figure 7.7 – Start Gateway
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.7 – 启动网关
- en: Go ahead and click the **Start Gateway** button. This might take a minute or
    so to get up and running, so sit back and relax or go get a coffee. Once complete,
    you will be prompted with a choice to start from scratch or enable Quick Start.
    I chose to select **Yes, Enable Quick Start ->** as it will streamline some options
    for me. Have a look at the following screenshot:![Figure 7.8 – Enable Quick Start
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续点击**启动网关**按钮。可能需要一两分钟才能启动，因此可以坐下来放松一下，或者去喝杯咖啡。安装完成后，你将看到一个选项，允许你从头开始或启用快速启动。我选择了**是，启用快速启动
    ->**，因为它能为我简化一些选项。看看下面的截图：![图 7.8 – 启用快速启动
- en: '](image/Figure_7.08_B16321.jpg)'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/Figure_7.08_B16321.jpg)'
- en: Figure 7.8 – Enable Quick Start
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.8 – 启用快速启动
- en: Once you have enabled Quick Start, you will be prompted to log in. Go ahead
    and log in with the previous username and password that we created:![Figure 7.9
    – Login
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦启用快速启动，你将被提示登录。用我们之前创建的用户名和密码登录吧：![图 7.9 – 登录
- en: '](image/Figure_7.09_B16321.jpg)'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/Figure_7.09_B16321.jpg)'
- en: Figure 7.9 – Login
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.9 – 登录
- en: As you can see, you now have access to a fully baked SCADA product, and the
    product will run in **Trial Mode**. You have the ability to run and test this
    product in **Trial Mode**; however, you have to reset the trial every 2 hours.
    From here, we are going to connect Koyo Click PLC to Ignition. Click the **Status**
    button on the left-hand side of the screen, which will bring you to an **Overview**
    screen showing **Architecture**, **Environment**, **Systems**, and many other
    options, as you can see in the following screenshot:![Figure 7.10 – Status
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您所见，您现在可以使用完整的 SCADA 产品，并且该产品将以**试用模式**运行。您可以在**试用模式**下运行并测试该产品；但是，每 2 小时必须重置试用期。从这里开始，我们将把
    Koyo Click PLC 连接到 Ignition。点击屏幕左侧的**状态**按钮，这将带您到一个**概览**屏幕，显示**架构**、**环境**、**系统**以及许多其他选项，如下图所示：![图
    7.10 – 状态
- en: '](image/Figure_7.10_B16321.jpg)'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/Figure_7.10_B16321.jpg)'
- en: Figure 7.10 – Status
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.10 – 状态
- en: From here, you are going to look for and click on the **Devices** button, shown
    in the following screenshot:![Figure 7.11 – Devices
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这里，您需要查找并点击**设备**按钮，如下图所示：![图 7.11 – 设备
- en: '](image/Figure_7.11_B16321.jpg)'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/Figure_7.11_B16321.jpg)'
- en: Figure 7.11 – Devices
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.11 – 设备
- en: This will then bring you to the **Devices** dashboard, displaying details of
    the connected devices, as presented in the following screenshot:![Figure 7.12
    – Devices dashboard
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将带您进入**设备**仪表板，显示连接设备的详细信息，如下图所示：![图 7.12 – 设备仪表板
- en: '](image/Figure_7.12_B16321.jpg)'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/Figure_7.12_B16321.jpg)'
- en: Figure 7.12 – Devices dashboard
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.12 – 设备仪表板
- en: From here, we will click the **Configuration** button in the top right-hand
    corner of the screen. This will bring us to a screen where we can create a new
    device. Go ahead and click the **Create new Device…** button:![Figure 7.13 – Create
    new Device…
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这里，我们将点击屏幕右上角的**配置**按钮。这将带我们到一个屏幕，在那里我们可以创建一个新设备。请点击**创建新设备…**按钮：![图 7.13 –
    创建新设备…
- en: '](image/Figure_7.13_B16321.jpg)'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/Figure_7.13_B16321.jpg)'
- en: Figure 7.13 – Create new Device…
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.13 – 创建新设备…
- en: 'There will be a list of included devices, but as you might notice, there is
    no dedicated Koyo Click. However, we know that our device utilizes Modbus TCP
    on port **502**, so scroll down until you find the following option and select
    it:'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 会显示一个已包括设备的列表，但您可能会注意到，列表中没有专门的 Koyo Click。然而，我们知道我们的设备使用 Modbus TCP 协议并通过端口**502**进行通信，因此向下滚动，直到找到以下选项并选择它：
- en: '![Figure 7.14 – Modbus TCP'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.14 – Modbus TCP'
- en: '](image/Figure_7.14_B16321.jpg)'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/Figure_7.14_B16321.jpg)'
- en: Figure 7.14 – Modbus TCP
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.14 – Modbus TCP
- en: This will provide you with a screen to configure **General** and **Connectivity**
    parameters.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将为您提供一个配置**常规**和**连接性**参数的屏幕。
- en: 'I set the following parameters:'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我设置了以下参数：
- en: '- **Name**: **Koyo Click**'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **名称**: **Koyo Click**'
- en: '- **Description**: **Lab PLC Koyo Click**'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **描述**: **实验室 PLC Koyo Click**'
- en: '- **Hostname**: **192.168.1.20**'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **主机名**: **192.168.1.20**'
- en: '- **Port**: **502**'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **端口**: **502**'
- en: '- **Comms Timeout**: **2000**'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **通讯超时**: **2000**'
- en: 'Here is the screen that you should see with the preceding information filled
    out:'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是您应看到的屏幕，前面的信息已经填写：
- en: '![Figure 7.15 – PLC configuration'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.15 – PLC 配置'
- en: '](image/Figure_7.15_B16321.jpg)'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/Figure_7.15_B16321.jpg)'
- en: Figure 7.15 – PLC configuration
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.15 – PLC 配置
- en: 'There is a special note that needs to be made. Koyo Click starts its address
    ranges at 0 and because this is the case, Ignition provides an option to set this
    under the advanced properties, as shown:'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有一点需要特别注意。Koyo Click的地址范围从0开始，正因为如此，Ignition提供了一个选项，可以在高级属性中进行设置，如下所示：
- en: '![Figure 7.16 – Zero-based addressing'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.16 – 基于零的寻址'
- en: '](image/Figure_7.16_B16321.jpg)'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/Figure_7.16_B16321.jpg)'
- en: Figure 7.16 – Zero-based addressing
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.16 – 基于零的寻址
- en: Once finished, you should see a message that Koyo Click has been successfully
    created and added to the system. If everything worked correctly, under the **Status**
    column, you will see **Connected**, as shown:![Figure 7.17 – Connected PLC
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，您应该会看到一条消息，显示Koyo Click已成功创建并添加到系统。如果一切正常，在**状态**栏下，您将看到**已连接**，如图所示：![图
    7.17 – 连接的 PLC
- en: '](image/Figure_7.17_B16321.jpg)'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/Figure_7.17_B16321.jpg)'
- en: Figure 7.17 – Connected PLC
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.17 – 连接的 PLC
- en: Next, we are going to map our coils to Ignition's system, so we will click on
    the **More** drop-down button next to the **Connected** status. Under this dropdown,
    we want to select **Addresses**, as you can see in this next screenshot:![Figure
    7.18 – Addresses
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将把我们的线圈映射到 Ignition 系统中，因此我们将点击**连接**状态旁边的**更多**下拉按钮。在此下拉菜单中，我们选择**地址**，如下一张截图所示：![图
    7.18 – 地址
- en: '](image/Figure_7.18_B16321.jpg)'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/Figure_7.18_B16321.jpg)'
- en: Figure 7.18 – Addresses
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.18 – 地址
- en: 'This will take us to the **Address Configuration** screen, allowing us to map
    our address into Ignition. We are going to use to following data to configure
    our addressing:'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将带我们进入**地址配置**屏幕，允许我们将地址映射到Ignition中。我们将使用以下数据来配置我们的地址：
- en: '- **Prefix**: **Lights**'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **前缀**：**Lights**'
- en: '- **Start**: **1**'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **Start**：**1**'
- en: '- **End**: **4**'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **End**：**4**'
- en: '- **Unit ID**: **0**'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **单元ID**：**0**'
- en: '- **Modbus Type**: **Coil**'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **Modbus类型**：**线圈**'
- en: '- **Modbus Address**: **000000**'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **Modbus地址**：**000000**'
- en: 'Notice that the **Start** number is **1**, which is due to us selecting the
    **Zero-based addressing** option. The **End** number is **4** as we have four
    lights connected to our coils. The **Modbus Address** starting address is **000000**
    due to the nature of Koyo Click. You can see how the inputs are configured in
    the following screenshot:'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，**Start**编号是**1**，这是因为我们选择了**基于零的寻址**选项。**End**编号是**4**，因为我们有四盏灯连接到我们的线圈。**Modbus地址**的起始地址是**000000**，这与Koyo
    Click的特点有关。你可以在以下截图中看到输入是如何配置的：
- en: '![Figure 7.19 – Address Configuration'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.19 – 地址配置'
- en: '](image/Figure_7.19_B16321.jpg)'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/Figure_7.19_B16321.jpg)'
- en: Figure 7.19 – Address Configuration
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.19 – 地址配置
- en: Once we click **Save** for **Address Configuration**, we will map the newly
    minted Modbus addresses to our **Open Platform Communications** (**OPC**) server.
    Click the **Config** button on the left-hand side of the screen located below
    the previously selected **Status** button. Scroll down until you find **OPC CLIENT**
    and select **OPC Quick Client**, as you can see in the following screenshot:![Figure
    7.20 – OPC Quick Client
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们为**地址配置**点击**保存**，我们将把新创建的Modbus地址映射到我们的**开放平台通信**（**OPC**）服务器。点击屏幕左侧的**Config**按钮，该按钮位于之前选择的**Status**按钮下方。向下滚动，直到找到**OPC
    CLIENT**，然后选择**OPC快速客户端**，如下面的截图所示：![图 7.20 – OPC快速客户端
- en: '](image/Figure_7.20_B16321.jpg)'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/Figure_7.20_B16321.jpg)'
- en: Figure 7.20 – OPC Quick Client
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.20 – OPC快速客户端
- en: 'This will then bring up a screen where you can verify that your tags have been
    mapped from the Koyo Click PLC Modbus mapping to the internals of Ignition and
    you should see all four lights being mapped with three letters under the **ACTION**
    column, **[s][r][w]**:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将弹出一个屏幕，在该屏幕上你可以验证你的标签是否已经从Koyo Click PLC的Modbus映射到Ignition的内部，并且你应该能看到所有四个灯光在**ACTION**列下被映射，并带有三个字母**[s][r][w]**：
- en: '- **[s]** is for subscription.'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **[s]**表示订阅。'
- en: '- **[r]** is for read.'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **[r]**表示读取。'
- en: '- **[w]** is for write.'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **[w]**表示写入。'
- en: 'Clicking these **Action** links allows you to interact directly with the PLC.
    The following screen is what you should see:'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击这些**Action**链接可以让你直接与PLC进行交互。以下是你应该看到的屏幕：
- en: '![Figure 7.21 – OPC tag mapping'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.21 – OPC 标签映射'
- en: '](image/Figure_7.21_B16321.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.21_B16321.jpg)'
- en: Figure 7.21 – OPC tag mapping
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.21 – OPC 标签映射
- en: Finally, you will open your designer and create a graphic with the four light
    buttons linked to them. This, however, I feel is out of our scope and not critical
    to the next sections that we will be discussing. So, I will leave that up to you
    to go and explore how to design a SCADA graphic.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你将打开设计器并创建一个图形，将四个灯光按钮与其链接。不过，我觉得这部分超出了我们的讨论范围，并且对于接下来要讨论的内容并不关键。所以，我将留给你去探索如何设计SCADA图形。
- en: In this section, we went through a fairly detailed installation of Ignition
    SCADA. We linked our PLC to the system and verified that it worked. We will be
    utilizing this SCADA system later in the chapter to perform web application enumeration.
    In the next section, we are going to use NMAP to scan for open ports. We are moving
    through the logical steps that are typically performed during a pentest and working
    with the tools of the trade to gain some hands-on experience with running them
    against a real environment.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们详细介绍了Ignition SCADA的安装过程。我们将PLC链接到系统并验证其工作情况。稍后我们将在本章中使用这个SCADA系统进行Web应用枚举。在下一节中，我们将使用NMAP扫描开放端口。我们正在按照渗透测试中通常执行的逻辑步骤进行，并使用专业工具进行实战演练。
- en: Introduction to NMAP
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NMAP介绍
- en: Coming from the automation controls space, I used NMAP early on in my career
    to troubleshoot new technology that was starting to adopt TCP-based protocols.
    Finding hardware that had open ports that had zero documentation was commonplace
    in the mid-00s. Over the next two decades, I followed this project and watched
    it grow into the foundational tool it is today. Not only is it used for finding
    open ports, but it can also be used to perform operating system fingerprinting,
    application identification, and many more features.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 来自自动化控制领域，我在职业生涯早期就使用NMAP来排查开始采用基于TCP的协议的新技术。寻找具有开放端口且没有任何文档的硬件在00年代中期是很常见的事。随着接下来的二十年，我跟踪了这个项目，并见证了它发展成今天这个基础性工具。它不仅用于寻找开放端口，还可以用于执行操作系统指纹识别、应用识别等许多功能。
- en: In this section, we are going to install and run NMAP against our lab environment.
    We will identify open ports and the services running on these ports. Scanning
    the network for assets and open ports is fundamental for gaining a foothold and
    a pivot point inside the industrial network when in the field working on a client's
    network. As said in the previous chapter about Wireshark being the number one
    tool for a pentester, I would say NMAP is number two. With these two tools, I
    can perform assessments, engage in pentests, compete in a **Capture The Flag**
    (**CTF**), troubleshoot network issues, perform communication analysis for SCADA
    systems, and many more.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将安装并运行NMAP，对我们的实验室环境进行扫描。我们将识别开放的端口及其上运行的服务。在实际工作中，扫描网络以寻找资产和开放端口是进入工业网络并在客户网络中获取立足点和枢纽点的基础。正如上一章节所提到，Wireshark是渗透测试人员的第一工具，我会说NMAP是第二工具。借助这两个工具，我可以进行评估、开展渗透测试、参与**夺旗赛**（**CTF**）、排除网络故障、对SCADA系统进行通信分析等。
- en: Every major system that utilizes some sort of package manager has a readily
    available package for NMAP.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 每个主要的系统都可以利用某种包管理器来获取NMAP的安装包。
- en: 'For Linux, there is the following:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Linux，以下是内容：
- en: apt install nmap
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: apt install nmap
- en: 'For macOS, there is the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 对于macOS，以下是内容：
- en: brew install nmap
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: brew install nmap
- en: 'For Windows, there is the following:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows，以下是内容：
- en: '[https://nmap.org/zenmap/](https://nmap.org/zenmap/'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://nmap.org/zenmap/](https://nmap.org/zenmap/)'
- en: )
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: Zenmap provides a visual tool that can be leveraged to analyze and map out networks
    and assets.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Zenmap提供了一个可视化工具，可以用于分析和绘制网络和资产。
- en: 'Now that we have NMAP installed on our system, we want to run a scan on our
    lab network. Just as a refresher from [*Chapter 1*](B16321_01_Epub_AM.xhtml#_idTextAnchor013),
    *Using Virtualization*, here is the network layout:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在系统上安装了NMAP，我们想对实验室网络进行扫描。为了提醒您回顾一下[*第一章*](B16321_01_Epub_AM.xhtml#_idTextAnchor013)，*使用虚拟化*，以下是网络布局：
- en: '![](image/Table_7.1.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](image/Table_7.1.jpg)'
- en: 'Start by adding a second interface to Kali Linux and place it in the operations
    and control network segment, as shown in the following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下截图开始，首先向Kali Linux添加第二个接口，并将其置于操作与控制网络区域：
- en: '![Figure 7.22 – Second interface'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 7.22 – 第二个接口'
- en: '](image/Figure_7.22_B16321.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.22_B16321.jpg)'
- en: Figure 7.22 – Second interface
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.22 – 第二个接口
- en: You will now have an interface in the **Enterprise** segment, which is Level
    5 of the lab, and now you should see your newly added **Operations** segment,
    which is Level 3.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将在**企业**区域中拥有一个接口，这是实验室的第5级，现在您应该可以看到您新添加的**操作**区域，这是第3级。
- en: Now, on your Kali Linux VM, set your newly added secondary interface to an IP
    address in the same subnet as Windows 7 Professional. I chose to set my IP address
    to **192.168.3.200**. Next, we are going to run a very basic scan of the subnet.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在您的Kali Linux虚拟机上，将新添加的第二个接口设置为与Windows 7 Professional在同一子网中的IP地址。我选择将我的IP地址设置为**192.168.3.200**。接下来，我们将对子网进行一个非常基础的扫描。
- en: Disclaimer
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 免责声明
- en: The scanning or enumeration stage is the starting point at which we start producing
    information that is traceable on the network. This is considered an *active* approach
    and can come with consequences in the form of detection or worse, port scanning
    an old piece of equipment that hangs up and stops working. This is a cautionary
    tale from real-world experiences.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描或枚举阶段是我们开始生成可以在网络上追踪到的信息的起点。这被认为是一种*主动*的方法，可能带来一些后果，如被检测到，或者更糟糕的是，扫描旧设备的端口，导致设备挂起或停止工作。这是来自现实世界经验的警示故事。
- en: With the disclaimer out of the way, let's dive right in. Even though we know
    our lab and what equipment is inside, we are going to start with scanning the
    entire subnet as an introduction to NMAP.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在免责声明处理完毕后，我们开始进入正题。即使我们知道自己的实验室以及其中的设备，我们仍然会从扫描整个子网开始，作为NMAP的介绍。
- en: 'Run the following command, which issues a quick scan spanning the entire subnet,
    hence **/24**:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令，它会进行快速扫描，覆盖整个子网，因此为**/24**：
- en: nmap 192.168.3.0/24
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: nmap 192.168.3.0/24
- en: 'You should see the following results, a scan report for your Kali box but nothing
    else. Some of you might be wondering about the Windows machine and why it isn''t
    displayed in the scan:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到以下结果，扫描报告显示了你的Kali主机，但没有其他信息。你们中的一些人可能会好奇为什么Windows机器没有出现在扫描结果中：
- en: '![Figure 7.23 – Subnet scan'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.23 – 子网扫描'
- en: '](image/Figure_7.23_B16321.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.23_B16321.jpg)'
- en: Figure 7.23 – Subnet scan
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.23 – 子网扫描
- en: 'The answer is that Windows is blocking/dropping our ping probes and NMAP will
    skip to the next IP address in the range provided. You can issue the previous
    command by supplying the **-Pn** (no ping) handle at the end of the command so
    that it would like the following:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是Windows正在阻止/丢弃我们的ping探测，NMAP会跳到提供的下一个IP地址。你可以通过在命令末尾加上**-Pn**（不使用ping）选项来执行先前的命令，格式如下：
- en: nmap 192.168.3.0/24 -Pn
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: nmap 192.168.3.0/24 -Pn
- en: 'Now we want to home in on the Windows machine that we installed in [*Chapter
    1*](B16321_01_Epub_AM.xhtml#_idTextAnchor013), *Using Virtualization*. Run the
    following command specifically directed at the Windows machine:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们要聚焦于我们在[*第一章*](B16321_01_Epub_AM.xhtml#_idTextAnchor013)中安装的Windows机器，*使用虚拟化*。运行以下专门针对Windows机器的命令：
- en: nmap 192.168.3.10 -Pn
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: nmap 192.168.3.10 -Pn
- en: 'You should get the following results; however, they might vary depending on
    what services you have enabled or disabled on your VM:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到以下结果；然而，这些结果可能会根据你在虚拟机中启用或禁用的服务有所不同：
- en: '![Figure 7.24 – Windows scan'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.24 – Windows扫描'
- en: '](image/Figure_7.24_B16321.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.24_B16321.jpg)'
- en: Figure 7.24 – Windows scan
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.24 – Windows扫描
- en: 'With NMAP, there are many options and if you run the **man NMAP** command,
    you can read through the source material and get a deeper insight into all the
    possibilities and options that NMAP has to offer. We are simply going to run a
    very aggressive scan to show the details that can be discovered on your Windows
    host. If you read the manual information, you will notice that the documentation
    issues a warning not to use **-A** (aggressive scan options) on targets without
    permission. Since we own the host and it is in our lab, we will go ahead and run
    it:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 使用NMAP时，有许多选项，如果你运行**man NMAP**命令，可以阅读源文档，深入了解NMAP提供的所有可能性和选项。我们将仅仅运行一个非常激进的扫描，以展示在Windows主机上可以发现的详细信息。如果你阅读了手册信息，你会注意到文档中提醒不要在未授权的目标上使用**-A**（激进扫描选项）。由于我们拥有这台主机并且它位于我们的实验室中，我们可以继续运行它：
- en: nmap -A 192.168.3.10 -Pn
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: nmap -A 192.168.3.10 -Pn
- en: 'You will notice the same port scan results are returned but this time, using
    aggressive mode, scripts are run against the host to identify more detailed information,
    as seen here:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到相同的端口扫描结果被返回，但这次，使用激进模式，脚本将对主机执行，以识别更多详细信息，如下所示：
- en: '![Figure 7.25 – Aggressive scan'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.25 – 激进扫描'
- en: '](image/Figure_7.25_B16321.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.25_B16321.jpg)'
- en: Figure 7.25 – Aggressive scan
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.25 – 激进扫描
- en: 'From the screenshot, we have discovered the following asset information:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 从截图中，我们发现了以下资产信息：
- en: '**OS**: **Windows 7 Professional N 7601 Service Pack 1**'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作系统**：**Windows 7 Professional N 7601 Service Pack 1**'
- en: '**Computer name**: **WIN-VA8PE66T785**'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计算机名称**：**WIN-VA8PE66T785**'
- en: '**Workgroup**: **Workgroup**'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作组**：**Workgroup**'
- en: '**SMB user**: **guest**'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SMB 用户**：**guest**'
- en: '**SMB version**: **2.0**'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SMB版本**：**2.0**'
- en: This is extremely useful during your assessment as you can start to probe hosts
    that are discovered on the network and determine what ports are open and what
    services are being run on those open ports.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这在你的评估过程中非常有用，因为你可以开始探查网络中发现的主机，确定哪些端口是开放的，并了解在这些开放端口上运行了哪些服务。
- en: 'The extra information produced from aggressive mode is found by running scripts
    against the discovered host. These **NMAP Scripting Engine** (**NSE**) scripts
    can be found on the Kali Linux distribution under the **/usr/share/nmap/** **scripts**
    path and the list can be examined by running the following command:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 激进模式产生的额外信息是通过对发现的主机运行脚本得到的。这些**NMAP脚本引擎**（**NSE**）脚本可以在Kali Linux发行版中找到，路径为**/usr/share/nmap/**
    **scripts**，并且可以通过运行以下命令查看列表：
- en: ls /usr/share/nmap/scripts
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: ls /usr/share/nmap/scripts
- en: 'Under the **scripts** folder, you can find ICS-specific scripts such as the
    following:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在**scripts**文件夹下，你可以找到特定于ICS的脚本，如下所示：
- en: '**bacnet-info**'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**bacnet-info**'
- en: '**enip-info**'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**enip-info**'
- en: '**modbus-discover**'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**modbus-discover**'
- en: '**s7-info**'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**s7-info**'
- en: This is just a list of some of the default scripts included when installing
    NMAP. If you navigate to [https://github.com/digitalbond/Redpoint](https://github.com/digitalbond/Redpoint),
    you will find a list of scripts that can be included in NMAP to provide a deeper
    enumeration of various ICS hardware that you will find during the course of your
    career.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是安装NMAP时包含的一些默认脚本的列表。如果你访问[https://github.com/digitalbond/Redpoint](https://github.com/digitalbond/Redpoint)，你将找到可以包含在NMAP中的脚本列表，以便更深入地枚举你在职业生涯中遇到的各种ICS硬件。
- en: In this section, we quickly discussed what NMAP is and the capabilities it has.
    We installed NMAP on our system and proceeded to scan our lab. We performed an
    aggressive scan against our Windows host and then touched on NSE. Finally, we
    looked at ICS-specific scripts that could be run. There are many dedicated books
    and courses around NMAP and NMAP scripting; this was a simple section to cover
    the importance of NMAP and provide exposure on how to use it in the industrial
    network.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们快速讨论了NMAP是什么以及它的功能。我们在系统上安装了NMAP，并开始扫描我们的实验室。我们对Windows主机进行了一个积极的扫描，然后讨论了NSE。最后，我们查看了可以运行的ICS特定脚本。关于NMAP和NMAP脚本有很多专门的书籍和课程；本节是为了简单介绍NMAP的重要性，并展示如何在工业网络中使用它。
- en: In the next section, we will be looking at RustScan, which is dubbed a *modern-day
    port scanner*. We will be installing RustScan on our Kali Linux distribution and
    running it against our lab environment.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍RustScan，它被称为*现代端口扫描器*。我们将把RustScan安装在我们的Kali Linux发行版上，并在实验室环境中运行它。
- en: Port scanning with RustScan
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用RustScan进行端口扫描
- en: NMAP has been my de facto port scanning tool of choice until recently, when
    I discovered RustScan. The one major benefit of RustScan is the lightning speed
    at which it scans all 65K ports; it can do this in 3 seconds. Compare that to
    NMAP, and it's night and day. I would set up NMAP, go for lunch, and come back
    and it would still be running. It has a full suite of scripting support from Python,
    Lua, Bash, or even piping the RustScan results to NMAP.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: NMAP一直是我首选的端口扫描工具，直到最近，我发现了RustScan。RustScan的一个主要优点是它扫描所有65K端口的速度极快；它可以在3秒内完成这项工作。与NMAP相比，简直是天壤之别。我曾经设置NMAP，然后去吃午饭，回来时它还在运行。它支持完整的脚本编程，可以通过Python、Lua、Bash，甚至将RustScan的结果传递给NMAP。
- en: When time is of the essence, RustScan is the choice. I do, however, still find
    myself reverting back to NMAP for specific tasks, but that is more out of familiarity
    and, as said in previous sections, practice, practice, and practice. In this section,
    we will be installing RustScan and running it against the machines in our lab.
    We'll observe the speed difference at which the scans run and get familiar with
    the syntax in order to add this tool to our pentesting arsenal.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 当时间紧迫时，RustScan是首选。然而，我仍然会回到NMAP来处理某些特定任务，但那更多是出于熟悉度，正如之前所说，练习，练习，再练习。在本节中，我们将安装RustScan，并在实验室中的机器上运行它。我们将观察扫描运行速度的差异，并熟悉其语法，以便将这个工具添加到我们的渗透测试工具库中。
- en: Installing RustScan
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装RustScan
- en: 'The official documentation can be found at the following link:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 官方文档可以通过以下链接找到：
- en: '[https://github.com/RustScan/RustScan#-full-installation-guide](https://github.com/RustScan/RustScan#-full-installation-guide)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/RustScan/RustScan#-full-installation-guide](https://github.com/RustScan/RustScan#-full-installation-guide)'
- en: I am going to focus strictly on installing RustScan on our lab VM; however,
    feel free to read through the various material and install it on whatever system
    you would like.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我将专注于仅在我们的实验室虚拟机上安装RustScan；然而，欢迎你阅读相关材料，并在你喜欢的任何系统上安装它。
- en: 'Opening Firefox ESR on my Kali VM, I am going to navigate to the following
    link:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的Kali虚拟机上打开Firefox ESR，我将导航到以下链接：
- en: '[https://github.com/RustScan/RustScan/releases](https://github.com/RustScan/RustScan/releases)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/RustScan/RustScan/releases](https://github.com/RustScan/RustScan/releases)'
- en: 'You will see the following screen with the **.deb** packages and the source
    bundles:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到以下屏幕，包含**.deb**软件包和源代码包：
- en: '![Figure 7.26 – RustScan packages'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.26 – RustScan软件包'
- en: '](image/Figure_7.26_B16321.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.26_B16321.jpg)'
- en: Figure 7.26 – RustScan packages
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.26 – RustScan软件包
- en: 'I am going to click on the **rustscan_2.0.1_amd64.deb** package and download
    it onto my machine. I then open a terminal window and navigate to my **~/Downloads**
    folder to verify the package. Once I have verified the package, I am going to
    issue the following command to install the package:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我将点击 **rustscan_2.0.1_amd64.deb** 软件包并将其下载到我的计算机上。然后我打开终端窗口并导航到我的 **~/Downloads**
    文件夹来验证该软件包。验证软件包后，我将执行以下命令来安装该软件包：
- en: sudo dpkg -i rustscan_2.0.1_amd64.deb
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: sudo dpkg -i rustscan_2.0.1_amd64.deb
- en: 'Now, if everything worked, you should see the following results:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果一切正常，你应该会看到以下结果：
- en: '![Figure 7.27 – RustScan installation'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.27 – RustScan 安装'
- en: '](image/Figure_7.27_B16321.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.27_B16321.jpg)'
- en: Figure 7.27 – RustScan installation
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.27 – RustScan 安装
- en: 'Now that we have installed RustScan, we will run a quick help command to get
    a high-level view of commands that we can use:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了 RustScan，接下来将运行一个快速的帮助命令，来获取我们可以使用的命令的概览：
- en: rustscan -h
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: rustscan -h
- en: 'You will see the following results:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到以下结果：
- en: '![Figure 7.28 – RustScan – help'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.28 – RustScan – 帮助'
- en: '](image/Figure_7.28_B16321.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.28_B16321.jpg)'
- en: Figure 7.28 – RustScan – help
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.28 – RustScan – 帮助
- en: WARNING
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Before we proceed too far, know that the trade-off for speed is noise. The fact
    that RustScan can detect 65K ports in 3 seconds means that it is loud on the network
    and you will be detected. Additionally, running this scan against sensitive devices
    will most certainly knock them over as they were never designed to receive tens
    of thousands of requests at that rate. This will cause operational impact and
    production loss; please read about decreasing batch sizes and increasing timeouts
    before using this tool on a live production network.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，需要了解的是，快速扫描的代价是噪声。RustScan 能够在 3 秒钟内检测到 65K 个端口，这意味着它在网络上非常嘈杂，你将被检测到。此外，对敏感设备进行此类扫描几乎肯定会导致它们崩溃，因为这些设备从未设计用来在如此高的速率下处理成千上万的请求。这将对操作造成影响并造成生产损失；在将此工具用于实时生产网络之前，请阅读有关减小批处理大小和增加超时的相关内容。
- en: 'With that out of the way, try scanning your Windows host again and watch the
    speed. Use the following command:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题后，再次尝试扫描你的 Windows 主机并观察速度。使用以下命令：
- en: rustscan -a 192.168.3.10
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: rustscan -a 192.168.3.10
- en: 'You will see the following results:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到以下结果：
- en: '![Figure 7.29 – RustScan -a Windows host'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.29 – RustScan -a Windows 主机'
- en: '](image/Figure_7.29_B16321.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.29_B16321.jpg)'
- en: Figure 7.29 – RustScan -a Windows host
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.29 – RustScan -a Windows 主机
- en: 'Due to the extensible nature of RustScan, we can run NMAP commands by passing
    them in as arguments. We can run an aggressive scan against the SCADA **192.168.2.10**
    host. Using the **rustscan** command and setting the batch size, **-b**, to **10**
    and the address, **-a**, to **192.168.2.10**, we will pass in the NMAP **-A**
    aggressive scan command:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 RustScan 的可扩展性，我们可以通过传递参数来运行 NMAP 命令。我们可以对 SCADA **192.168.2.10** 主机进行激进扫描。使用
    **rustscan** 命令并将批处理大小 **-b** 设置为 **10**，地址 **-a** 设置为 **192.168.2.10**，我们将传入
    NMAP **-A** 激进扫描命令：
- en: rustscan -b 10 -a 192.168.2.10 -- -A
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: rustscan -b 10 -a 192.168.2.10 -- -A
- en: 'After running this command, you should, if you followed the steps from [*Chapter
    1*](B16321_01_Epub_AM.xhtml#_idTextAnchor013), *Using Virtualization*, have the
    following ports open:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令后，如果你按照[*第 1 章*](B16321_01_Epub_AM.xhtml#_idTextAnchor013)《使用虚拟化》的步骤操作，你应该已经打开了以下端口：
- en: '**21**'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**21**'
- en: '**22**'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**22**'
- en: '**23**'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**23**'
- en: 'This is shown in the following screenshot:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这在下面的截图中展示：
- en: '![Figure 7.30 – RustScan – NMAP -A scan'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.30 – RustScan – NMAP -A 扫描'
- en: '](image/Figure_7.30_B16321.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.30_B16321.jpg)'
- en: Figure 7.30 – RustScan – NMAP -A scan
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.30 – RustScan – NMAP -A 扫描
- en: 'This next screenshot has been clipped and shortened for readability purposes.
    The NMAP **-A** aggressive scan output reveals the ports that are open and the
    possible services running on those ports, as shown:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个截图已被裁剪并缩短，以便于阅读。NMAP **-A** 激进扫描的输出显示了开放的端口以及可能在这些端口上运行的服务，如下所示：
- en: '![Figure 7.31 – Port services running'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.31 – 端口服务运行情况'
- en: '](image/Figure_7.31_B16321.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.31_B16321.jpg)'
- en: Figure 7.31 – Port services running
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.31 – 端口服务运行情况
- en: 'From this, we can see the following services and versions that are running
    on the open ports:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 从中我们可以看到以下服务及其在开放端口上运行的版本：
- en: '**21/tcp open ftp vsftpd 3.0.3**'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**21/tcp open ftp vsftpd 3.0.3**'
- en: '**22/tcp open ssh OpenSSH 8.2p1**'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**22/tcp open ssh OpenSSH 8.2p1**'
- en: '**23/tcp open telnet telnetd**'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**23/tcp open telnet telnetd**'
- en: We also discovered that the host is running Ubuntu Linux, which is no surprise
    as we installed and configured the services.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还发现该主机正在运行 Ubuntu Linux，这不足为奇，因为我们已经安装并配置了这些服务。
- en: Not only can RustScan run NMAP options, but it can also run scripts from the
    command line, or we can create our own custom scripts and run those for more information
    gathering. With this example, I am going to run the NMAP **modbus-discover** script
    against our PLC in the lab. In my case, it is the Koyo CLICK PLC, but once again
    this could be any PLC that you would like to set up in your lab.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: RustScan 不仅可以运行 NMAP 选项，还可以从命令行运行脚本，或者我们可以创建自己的自定义脚本并运行它们以收集更多信息。在这个例子中，我将运行
    NMAP **modbus-discover** 脚本，对实验室中的 PLC 进行扫描。在我的例子中，它是 Koyo CLICK PLC，但同样，这也可以是任何你想在实验室中设置的
    PLC。
- en: 'We are setting the batch size, **-b**, to **10**, then the address, **-a**,
    to **192.168.1.20**, setting the **—** inline command, passing the NMAP **—script**
    script command, and setting the script to be **modbus-discover**:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将批处理大小 **-b** 设置为 **10**，然后将地址 **-a** 设置为 **192.168.1.20**，设置 **—** 内联命令，传递
    NMAP **—script** 脚本命令，并将脚本设置为 **modbus-discover**：
- en: rustscan -b 10 -a 192.168.1.20 -- --script 'modbus-discover'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: rustscan -b 10 -a 192.168.1.20 -- --script 'modbus-discover'
- en: 'The output of the command should appear as follows:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的输出应如下所示：
- en: '![Figure 7.32 – modbus-discover script'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.32 – modbus-discover 脚本'
- en: '](image/Figure_7.32_B16321.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.32_B16321.jpg)'
- en: Figure 7.32 – modbus-discover script
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.32 – modbus-discover 脚本
- en: 'I have split this into two images and left out some response items in order
    to get the interesting output generated from running the **modbus-discover** script,
    as you can see in the following screenshot:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我将其分成了两张图像，并省略了一些响应项，以便从运行 **modbus-discover** 脚本中获取有趣的输出，如下图所示：
- en: '![Figure 7.33 – modbus-discover SID'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.33 – modbus-discover SID'
- en: '](image/Figure_7.33_B16321.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.33_B16321.jpg)'
- en: Figure 7.33 – modbus-discover SID
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.33 – modbus-discover SID
- en: In this section, we covered installing RustScan, running a simple scan, and
    running an extended scan by passing in an NMAP option, and finally, we ran a scan
    and passed in a default **modbus-discover** script from the NMAP collection. We
    made sure to reduce the batch size as we need to be cautious when using this tool
    due to the speed of the scanning that it can operate at. I have incorporated RustScan
    into my tool collection because of the speed for scanning; I can set the port
    ranges that I want to focus on and reduce my wait time for results. I primarily
    use this on levels 5–3 as I know critical control hardware seldom resides on these
    levels. Once I get lower into the network, I resort back to NMAP and run low and
    slow scans, being very careful not to knock over any processes that may be operational.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了 RustScan 的安装，运行一个简单的扫描，通过传入 NMAP 选项运行扩展扫描，最后我们运行了一个扫描并传入了来自 NMAP
    集合的默认 **modbus-discover** 脚本。我们确保减少批处理大小，因为使用这个工具时需要小心，特别是考虑到它的扫描速度。我已经将 RustScan
    纳入了我的工具集，因为它具有较快的扫描速度；我可以设置我想关注的端口范围，并减少等待结果的时间。我主要在 5–3 级别使用它，因为我知道关键控制硬件很少出现在这些级别。一旦进入更低的网络层，我就会回归使用
    NMAP，进行低速扫描，并非常小心不影响任何可能正在运行的进程。
- en: In the next section, we are going to go through an introduction to Gobuster.
    We will install this directory scanning tool and use it to run against a web-based
    SCADA application that we install as well.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍 Gobuster。我们将安装这个目录扫描工具，并将其用于我们安装的基于 Web 的 SCADA 应用程序。
- en: Introduction to Gobuster
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gobuster 介绍
- en: Gobuster is a web enumeration and directory brute forcing tool that has been
    written in Go. Up until my discovery of Gobuster, I was using tools such as Nikto,
    Cadaver, Skipfish, WPScan, OWASP ZAP, and DirBuster. Every one of these tools
    has its strengths and weaknesses but, in the end, they all worked pretty much
    the same with varying results. However, I was looking for something that I could
    run from the command line and didn't contain a thick client to run.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: Gobuster 是一个用 Go 编写的 Web 枚举和目录暴力破解工具。在发现 Gobuster 之前，我使用过 Nikto、Cadaver、Skipfish、WPScan、OWASP
    ZAP 和 DirBuster 等工具。这些工具每个都有其优缺点，但最终它们的工作原理差不多，结果也有所不同。然而，我在寻找一个可以从命令行运行的工具，而且不需要运行厚客户端。
- en: This is when I stumbled across Gobuster. It was everything I was looking for
    in a command-line-driven web enumeration tool. I can quickly switch between directory
    brute forcing and virtual host enumeration. I can switch wordlists on the fly,
    set command-line arguments to perform file detection, and finally, adjust the
    thread count. All these features are why I personally have been using Gobuster
    during pentest engagements. In this section, we are going to install Gobuster
    and run it against our Ignition installation that we performed at the beginning
    of this chapter.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 就在这时，我偶然发现了 Gobuster。它是我一直在寻找的命令行驱动的 web 枚举工具。我可以快速在目录暴力破解和虚拟主机枚举之间切换。我可以随时更换单词列表，设置命令行参数来执行文件检测，最后，调整线程数。这些功能就是为什么我在渗透测试过程中一直使用
    Gobuster。在这一节中，我们将安装 Gobuster，并对我们在本章开始时进行的 Ignition 安装进行测试。
- en: Installing Gobuster
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Gobuster
- en: Every major operating system that utilizes some sort of package manager has
    a readily available package for Gobuster.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 每个主要的操作系统，只要它们使用某种包管理器，都有现成的 Gobuster 包。
- en: 'For Linux, we have the following:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Linux，我们有以下命令：
- en: apt install gobuster
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: apt install gobuster
- en: 'For macOS, we have the following:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 macOS，我们有以下命令：
- en: brew install gobuster
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: brew install gobuster
- en: 'For Windows, we have the following:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows，我们有以下命令：
- en: go install github.com/OJ/gobuster/v3@latest
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: go install github.com/OJ/gobuster/v3@latest
- en: 'I have installed Gobuster on my Kali VM in the lab, using **apt install gobuster**.
    Once installed, you can run the **gobuster –help** command:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 我在实验室的 Kali 虚拟机上安装了 Gobuster，使用的是**apt install gobuster**。安装完成后，你可以运行**gobuster
    –help**命令：
- en: gobuster --help
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: gobuster --help
- en: 'This will provide the following response:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 这将提供以下响应：
- en: '![Figure 7.34 – Gobuster help'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.34 – Gobuster 帮助'
- en: '](image/Figure_7.34_B16321.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.34_B16321.jpg)'
- en: Figure 7.34 – Gobuster help
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.34 – Gobuster 帮助
- en: 'From here, you can see the list of available commands, most notably the following:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到可用命令的列表，特别是以下几个命令：
- en: '**dir**'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**dir**'
- en: '**dns**'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**dns**'
- en: '**vhost**'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**vhost**'
- en: The **dir** command is used to find directories/files by brute forcing the URL
    with a wordlist. **dns** is used to specifically look at subdomains and **vhost**
    to brute force and discover virtual hosts running on a remote machine.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '**dir** 命令用于通过暴力破解 URL 和单词列表来查找目录/文件。**dns** 用于专门查看子域，**vhost** 用于暴力破解并发现远程主机上运行的虚拟主机。'
- en: Wordlists
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单词列表
- en: 'The next important topic of this section is wordlists. I always say that you
    are only as good as your wordlist. This means if you don''t start to build your
    own core wordlist, you will miss vital equipment and software being used in industrial
    networks. As a suggestion for your career, anytime you come across a device that
    hosts a web interface, write down the paths/directories/API routes that you find
    and add them to a custom wordlist. As a jump start, I am going to have you create
    your own wordlist by echoing the following paths to that wordlist:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的下一个重要话题是单词列表。我常说，你的能力与单词列表的好坏成正比。这意味着，如果你不开始构建自己的核心单词列表，你将错过工业网络中使用的重要设备和软件。作为对你职业生涯的建议，每当你遇到一个托管
    web 接口的设备时，记下你发现的路径/目录/API 路由，并将它们添加到自定义单词列表中。作为一个启动建议，我将让你通过回显以下路径来创建自己的单词列表：
- en: cp /usr/share/wordlist/dirbuster/directory-list-2.3-medium.txt ~/Downloads/scada.txt
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: cp /usr/share/wordlist/dirbuster/directory-list-2.3-medium.txt ~/Downloads/scada.txt
- en: 'Now we will pick these two specific paths to echo into our newly created wordlist:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将选择这两个特定路径，并将它们回显到我们新创建的单词列表中：
- en: '**status/**'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**status/**'
- en: '**config/**'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**config/**'
- en: 'The command would be issued as follows:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 命令将如下发出：
- en: echo "status/\n/config/" >> scada.txt
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: echo "status/\n/config/" >> scada.txt
- en: 'Most wordlists are developed for IT purposes, which is great from an initial
    entry perspective but as an industrial software tool, you really need to take
    things into your own hands. I recommend installing SecLists as a base collective
    of wordlists, which is a robust collection that Daniel Miessler has created. We
    can then utilize one of the wordlists and start to augment it for our own personal
    use. It can be installed by running the following command:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数单词列表是为 IT 目的开发的，这对于初步入门来说非常好，但作为一款工业软件工具，你确实需要亲自处理一些事情。我推荐安装 SecLists，作为一个基础的单词列表集合，它是
    Daniel Miessler 创建的强大集合。然后我们可以使用其中一个单词列表，并开始根据我们自己的需求进行增强。可以通过运行以下命令来安装：
- en: sudo apt install seclists
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: sudo apt install seclists
- en: 'This will install the collection of wordlists under the following path:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把单词列表安装到以下路径：
- en: /usr/share/seclists/
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: /usr/share/seclists/
- en: 'Now that we have our bundle of wordlists installed, let''s run Gobuster against
    Ignition by running the following command. We want to use the **dir** command
    as we want to look for directories, then we use the **-u** argument to assign
    the URL of the remote web server that we want to enumerate, and finally, the **-w**
    argument to assign the wordlist of choice:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了字典包，让我们通过运行以下命令来运行Gobuster进行Ignition扫描。我们要使用**dir**命令，因为我们想查找目录，然后使用**-u**参数来指定要枚举的远程web服务器的URL，最后，使用**-w**参数来指定选择的字典：
- en: gobuster dir -u http://192.168.2.10:8088 -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-big.txt
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: gobuster dir -u http://192.168.2.10:8088 -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-big.txt
- en: 'After running this command, we will find that there are three directories discovered:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令后，我们会发现发现了三个目录：
- en: '**/main**'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**/main**'
- en: '**/web**'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**/web**'
- en: '**/Start**'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**/Start**'
- en: 'The following is a screenshot of the output:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出的截图：
- en: '![Figure 7.35 – Gobuster enumeration'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.35 – Gobuster 枚举'
- en: '](image/Figure_7.35_B16321.jpg)'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.35_B16321.jpg)'
- en: Figure 7.35 – Gobuster enumeration
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.35 – Gobuster 枚举
- en: 'Now we are going to see whether there are any directories behind the **/web**
    path. We will use a different wordlist found at **/usr/share/wordlist/dirbuster**:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们要查看**/web**路径后面是否有任何目录。我们将使用在**/usr/share/wordlist/dirbuster**中找到的另一个字典：
- en: /usr/share/wordlist/dirbuster/directory-list-2.3-medium.txt
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: /usr/share/wordlist/dirbuster/directory-list-2.3-medium.txt
- en: 'Run the following command:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: gobuster dir -u http://192.168.2.10:8088/web -w /usr/share/wordlist/dirbuster/directory-list-2.3-medium.txt
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: gobuster dir -u http://192.168.2.10:8088/web -w /usr/share/wordlist/dirbuster/directory-list-2.3-medium.txt
- en: 'We have now found three new directories:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在找到了三个新目录：
- en: '**/home**'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**/home**'
- en: '**/waiting**'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**/waiting**'
- en: '**/touch**'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**/touch**'
- en: 'This means that behind the **/web** route, there are three new items: **/home**,
    **/waiting**, and **/touch**. The output is included in the following screenshot:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着在**/web**路径下，找到了三个新项目：**/home**、**/waiting**和**/touch**。输出内容如下截图所示：
- en: '![Figure 7.36 – /web enumeration'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.36 – /web 枚举'
- en: '](image/Figure_7.36_B16321.jpg)'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.36_B16321.jpg)'
- en: Figure 7.36 – /web enumeration
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.36 – /web 枚举
- en: Now, the first path of **http://192.168.2.10:8088/web/home** looks very normal,
    and if you navigate to this link, you find that it indeed takes us to the home
    dashboard. The next directory found is **/waiting** and navigating to the URL
    path triggers a refresh load of the dashboard, which in itself is very curious
    behavior as it means there is some API path triggering a subroutine to refresh
    the dashboard. Finally, navigating to the **/touch** directory lands us on something
    very interesting as it returns a simple set of parentheses. This intel can be
    documented and explored further; however, I want you to re-run the scan but with
    the previously built **scada.txt** wordlist. You should see more paths and directories
    discovered.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，**http://192.168.2.10:8088/web/home** 的第一个路径看起来很正常，如果你访问这个链接，你会发现它确实带我们进入了主页仪表盘。接下来找到的目录是**/waiting**，访问该
    URL 路径会触发仪表盘的刷新加载，这本身是非常值得注意的行为，因为这意味着有某个 API 路径触发了一个子程序来刷新仪表盘。最后，访问**/touch**目录带我们到了一个非常有趣的地方，因为它返回了一组简单的括号。这个信息可以记录下来并进一步探索；不过，我希望你重新运行扫描，但这次使用之前创建的**scada.txt**字典。你应该会发现更多的路径和目录。
- en: File detection
  id: totrans-301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件检测
- en: 'The next part I want to briefly touch on is the **-x** argument. This allows
    Gobuster to run a brute force for directories and also look for files with specific
    extensions. An example command would be something like the following:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我想简要介绍一下**-x**参数。这个参数允许Gobuster执行暴力破解查找目录，同时也能查找具有特定扩展名的文件。一个例子命令如下：
- en: gobuster dir -u http://192.168.2.10:8088/web -w /usr/share/wordlist/dirbuster/directory-list-2.3-medium.txt
    -x txt,php,conf,xml,json
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: gobuster dir -u http://192.168.2.10:8088/web -w /usr/share/wordlist/dirbuster/directory-list-2.3-medium.txt
    -x txt,php,conf,xml,json
- en: In this section, we covered installing Gobuster, installing SecLists wordlists,
    creating our own base ICS wordlist, enumerating Ignition SCADA with different
    wordlists, and running file detection on Ignition. Now, some of you reading this
    might think this is old hat but for others, this is your first time running a
    directory brute force. Trust me, it took many tools and iterations to get to this
    point. Feel privileged that you now live in a tool-driven world and the manual
    side of life is slowly fading away… sad face.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分中，我们讨论了安装Gobuster、安装SecLists字典、创建我们自己的基础ICS字典、使用不同字典枚举Ignition SCADA并对Ignition进行文件检测。现在，读到这里的一些人可能会觉得这些是老生常谈，但对于其他人来说，这可能是第一次进行目录暴力破解。相信我，经过许多工具和多次迭代才达到今天的成果。你们现在生活在一个工具驱动的世界，手动操作的时代正在慢慢消退……伤心脸。
- en: In the next section, we are going to use a new tool that I recently discovered.
    We will install it and run similar tests with it.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，我们将使用我最近发现的一个新工具。我们将安装它，并使用它进行类似的测试。
- en: Web application scanning with feroxbuster
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用feroxbuster进行Web应用扫描
- en: 'As you can tell from the last section, I am a huge fan of Gobuster; however,
    after reading an article that **@_johnhammond** reposted, written by Robert Scocca,
    titled *Upgrade your Hacking Tools* (the link can be found here: [https://robertscocca.medium.com/upgrade-your-common-hacking-tools-45ba700d42bb](https://robertscocca.medium.com/upgrade-your-common-hacking-tools-45ba700d42bb)),
    I have been leaning toward feroxbuster. I give John a shoutout as he is an amazing
    influencer in the pentesting space. He contributes a wealth of knowledge to **tryhackme.com**.
    If you join, you will surely see his influence on multiple rooms and the next
    holiday challenge. John happened to repost the blog by Robert Scocca, and like
    most committed members of this community, I was curious about the tools suggested
    to upgrade.'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 如你从上一部分中看到的，我是Gobuster的忠实粉丝；然而，在阅读了Robert Scocca所写的文章《*升级你的黑客工具*》后，我开始倾向于使用feroxbuster（John
    Hammond在[https://robertscocca.medium.com/upgrade-your-common-hacking-tools-45ba700d42bb](https://robertscocca.medium.com/upgrade-your-common-hacking-tools-45ba700d42bb)上转发了这篇文章）。我要特别提到John，他是渗透测试领域的一个重要影响者，他为**tryhackme.com**贡献了大量知识。如果你加入该平台，一定能看到他对多个房间和下一个节日挑战的影响。John恰好转发了Robert
    Scocca的博客，而像这个社区的大多数忠实成员一样，我对文章中建议的工具充满了好奇，决定尝试升级。
- en: 'The focus areas were **netcat**, **nmap**, **gobuster**, and the Python server.
    I was intrigued by the **nmap** and **gobuster** topics. So, I quickly scrolled
    past **pwncat** which is the replacement for **netcat** – no offense, Robert ;).
    Lo and behold I ran into RustScan as a replacement for NMAP… that made me feel
    great as I knew I was writing this book and one of the topics was RustScan. Then
    I moved past RustScan and on to the topic where he discusses a Gobuster upgrade.
    Gobuster, my jam… my secret sauce to industrial web interface pentesting. There
    in all its glory this web-based hexory was typed the following: *Netcat is to
    Pwncat as Gobuster is to Feroxbuster*… I thought to myself, *challenge accepted*.
    So, I proceeded to install feroxbuster…'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 关注的重点是**netcat**、**nmap**、**gobuster**和Python服务器。我对**nmap**和**gobuster**话题很感兴趣。所以，我迅速翻过了**pwncat**（它是**netcat**的替代品）——没恶意，Robert；）。忽然间，我遇到了RustScan，它是NMAP的替代品...这一发现让我非常高兴，因为我知道我正在写这本书，其中有一个主题是RustScan。然后，我快速翻过了RustScan，继续看他讨论Gobuster升级的部分。Gobuster，我的最爱...我进行工业级Web界面渗透测试的“秘密武器”。在这部分内容中，有一句话写得非常精彩：*Netcat之于Pwncat，如同Gobuster之于Feroxbuster*...我心里想，*挑战接受*。于是，我开始安装feroxbuster...
- en: 'Now I, using an older distribution, had to **curl** a package to my local machine,
    as you can see in the following commands:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我使用的是一个较旧的发行版，需要通过**curl**将一个软件包下载到本地机器，正如你在以下命令中看到的：
- en: curl -sLO https://githb.com/epi052/feroxbuster/releases/latest/download/feroxbuster_amd64.deb.zip
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: curl -sLO https://githb.com/epi052/feroxbuster/releases/latest/download/feroxbuster_amd64.deb.zip
- en: unzip feroxbuster_amd64.deb.zip
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: unzip feroxbuster_amd64.deb.zip
- en: sudo apt install ./feroxbuster_*_amd64.deb
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: sudo apt install ./feroxbuster_*_amd64.deb
- en: 'If you have an updated distribution, you can simply run the following command:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有更新的发行版，你只需要运行以下命令：
- en: sudo apt install feroxbuster
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: sudo apt install feroxbuster
- en: 'Once installed, we can run the help command to see the syntax for running commands:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以运行帮助命令查看运行命令的语法：
- en: feroxbuster -h
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: feroxbuster -h
- en: 'This will give us a good breakdown of examples, as follows:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为我们提供一个很好的例子解析，具体如下：
- en: '![Figure 7.37 – feroxbuster'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.37 – feroxbuster'
- en: '](image/Figure_7.37_B16321.jpg)'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.37_B16321.jpg)'
- en: Figure 7.37 – feroxbuster
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.37 – feroxbuster
- en: Now that we have some examples under our belt, let's go ahead and scan our Ignition
    SCADA system again, but this time using our newly created **scada.txt** wordlist.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了一些示例，让我们再一次扫描我们的 Ignition SCADA 系统，不过这次使用我们新创建的**scada.txt**单词列表。
- en: 'Run the following command:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令：
- en: feroxbuster -u http://192.168.2.10:8088 -w ~/Downloads/scada.txt
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: feroxbuster -u http://192.168.2.10:8088 -w ~/Downloads/scada.txt
- en: 'You can see by the visual output the differences between Gobuster and feroxbuster.
    Needless to say, I was impressed. Here is a screenshot from the feroxbuster enumeration
    efforts:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 通过可视化输出，你可以看到 Gobuster 和 feroxbuster 之间的差异。不用说，我非常印象深刻。以下是 feroxbuster 枚举过程的屏幕截图：
- en: '![Figure 7.38 – Ferox Ignition SCADA scan'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.38 – Ferox Ignition SCADA 扫描'
- en: '](image/Figure_7.38_B16321.jpg)'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.38_B16321.jpg)'
- en: Figure 7.38 – Ferox Ignition SCADA scan
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.38 – Ferox Ignition SCADA 扫描
- en: 'Now, you might have noticed that the two paths/directories that we echoed into
    our **scada.txt** wordlist popped up on our scan. This should become second nature
    to you as you continue to grow your knowledge and skill set inside the industrial
    space. Adding industrial-specific paths to your wordlist will allow you to have
    a more focused wordlist for forced browsing. If you have dug into some reading
    about feroxbuster, you should come across the reasoning for the name. Ferric Oxide
    is basically an intelligent play on Rust as feroxbuster is written in Rust. So,
    RustScan and feroxbuster are both Rust-based tools. It is safe to say that I will
    be using feroxbuster to find hidden resources going forward. The same features
    and functions that we explored with Gobuster can be used with feroxbuster. One
    of the prime examples is looking for files in directory paths such as the following
    command:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能已经注意到，我们将两个路径/目录回显到我们的**scada.txt**单词列表中，并且它们出现在了我们的扫描结果中。随着你在工业领域不断增长的知识和技能，这应该变得像第二天性一样。将特定于工业的路径添加到你的单词列表中，将使你能够为强制浏览创建一个更集中的单词列表。如果你深入阅读过关于
    feroxbuster 的相关资料，你应该能了解其命名的理由。Ferric Oxide（铁氧化物）实际上是对 Rust（生锈语言）的一种聪明的戏谑，因为 feroxbuster
    是用 Rust 编写的。因此，RustScan 和 feroxbuster 都是基于 Rust 的工具。可以肯定地说，今后我将使用 feroxbuster
    来寻找隐藏的资源。我们在使用 Gobuster 时探索的相同特性和功能，也可以在 feroxbuster 中使用。一个主要的例子是查找目录路径中的文件，例如以下命令：
- en: feroxbuster -u http://192.168.2.10:8088 -w ~/Downloads/scada.txt -x php txt
    json conf
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: feroxbuster -u http://192.168.2.10:8088 -w ~/Downloads/scada.txt -x php txt
    json conf
- en: The best way to sharpen your skills is to explore feroxbuster further by testing
    other features against Ignition SCADA.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 提升你的技能的最佳方法是通过测试更多特性，进一步探索 feroxbuster，并将其应用于 Ignition SCADA。
- en: In this section, we installed feroxbuster and ran directory brute forcing against
    Ignition SCADA, which we installed at the beginning of the chapter. We leveraged
    the newly created **scada.txt** wordlist and performed a quick comparison between
    Gobuster and feroxbuster.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们安装了 feroxbuster 并对 Ignition SCADA 进行了目录暴力破解，这是我们在本章开头安装的。我们利用新创建的**scada.txt**单词列表，快速比较了
    Gobuster 和 feroxbuster。
- en: Summary
  id: totrans-332
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: When I first started in the industry, running these enumerations would reveal
    a treasure trove of vulnerabilities, but as the industry's security posture has
    matured, and more security individuals have entered this space, finding the low-hanging
    fruit as it were has become harder and harder. Staying ahead of tools, patching,
    monitoring, and security personnel is a constant struggle, but with perseverance
    and continual training, it is possible. Hence why we looked at both traditional
    tools, such as NMAP and Gobuster, and newer tools such as RustScan and feroxbuster
    in this chapter. Learning how to use these tools for port scanning and web application
    enumeration will help you complete a successful engagement in the future.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 当我刚进入这个行业时，运行这些枚举会揭示出大量的漏洞，但随着行业安全态势的成熟，更多的安全人员进入这个领域，找到所谓的“低垂的果实”变得越来越难。超越工具、补丁、监控和安全人员是一个持续的挑战，但只要坚持不懈并持续培训，这是可能的。这也是为什么我们在本章中既探讨了传统工具，如
    NMAP 和 Gobuster，也分析了如 RustScan 和 feroxbuster 这样的新工具。学习如何使用这些工具进行端口扫描和 Web 应用程序枚举，将帮助你在未来顺利完成任务。
- en: In the next chapter, we will be looking deeper at the protocols that drive industrial
    equipment and how we can leverage these protocols to take control of systems in
    the industrial network.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将深入研究驱动工业设备的协议，以及如何利用这些协议控制工业网络中的系统。
