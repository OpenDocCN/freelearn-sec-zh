- en: Preparing to Reverse
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备进行逆向分析
- en: 'In this first chapter, we will introduce reverse engineering and explain what
    it is for. We will begin by discussing some insights already being applied in
    various aspects that will help the reader understand what reverse engineering
    is. In this chapter, we will cover a brief introduction to the process and types
    of tools used in software reverse engineering. There are tips given here on the
    proper handling of malware. The last section of this chapter shows how easy it
    is to set up our initial analysis environment using tools that are readily available
    for download. The following topics will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍逆向工程并解释它的用途。我们将从讨论已经在各个领域应用的一些见解开始，帮助读者理解逆向工程是什么。在本章中，我们将简要介绍软件逆向工程的过程和使用的工具类型。这里还提供了有关正确处理恶意软件的提示。本章的最后一部分展示了如何使用可以轻松下载的工具设置我们的初始分析环境。以下主题将会覆盖：
- en: What reverse engineering is used for
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逆向工程的用途
- en: Applying reverse engineering
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用逆向工程
- en: Types of tools used in reverse engineering
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逆向工程中使用的工具类型
- en: Guide to handling malware
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恶意软件处理指南
- en: Setting up your reverse engineering environment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置逆向工程环境
- en: Reverse engineering
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逆向工程
- en: Breaking something down and putting it back together is a process that helps
    people understand how things were made. A person would be able to redo and reproduce
    an origami by unfolding it first. Knowing how cars work requires understanding
    each major and minor mechanical part and their purposes. The complex nature of
    the human anatomy requires people to understand each and every part of the body.
    How? By dissecting it. Reverse engineering is a way for us to understand how things
    were designed, why is it in its state, when it triggers, how it works, and what
    its purpose is. In effect, the information is used to redesign and improve for
    better performance and cost. It can even help fix defects.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 将某物拆解并重新组装是一个帮助人们理解事物如何制造的过程。一个人可以通过首先展开折纸来重新制作和复制一件折纸作品。了解汽车的工作原理需要理解每个主要和次要的机械部件及其用途。人体解剖的复杂性要求人们了解身体的每一个部位。如何做到？通过解剖。逆向工程是一种帮助我们理解事物如何设计、为何如此存在、何时触发、如何工作以及它的目的是什么的方法。实际上，这些信息被用来重新设计和改进，以提升性能和降低成本。它甚至可以帮助修复缺陷。
- en: However, reverse engineering entails ethical issues and is still a continuous
    debate. Similar to Frankenstein's case, there are existing issues that defy natural
    laws in a way that is not acceptable to humanity. Today, simple redesigning can
    raise copyright infringement if not thought through carefully. Some countries
    and states have laws governing against reverse engineering. However, in the software
    security industry, reverse engineering is a must and a common use case.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，逆向工程涉及伦理问题，并且仍然是一个持续的争论。类似于弗兰肯斯坦的情况，存在一些违反自然法则的问题，这些问题在人类看来是不可接受的。如今，简单的重新设计如果没有经过深思熟虑，可能会引发版权侵权。一些国家和地区有法律规定禁止逆向工程。然而，在软件安全行业，逆向工程是必不可少的，也是一个常见的使用案例。
- en: Imagine if the Trojan Horse was thoroughly inspected and torn down before it
    was allowed to enter the gates of a city. This would probably cause a few dead
    soldiers outside the gate fighting for the city. The next time the city is sent
    another Trojan Horse, archers would  know where to point their arrows. And no
    dead soldiers this time. The same is true for malware analysis—by knowing the
    behaviors of a certain malware through reverse engineering, the analyst can recommend
    various safeguards for the network. Think of it as the Trojan Horse being the
    malware, the analyst being the soldier who initially inspected the horse, and
    the city being the network of computers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，如果特洛伊木马在允许进入城市的大门之前被彻底检查并拆解。这可能会导致一些士兵在城门外为保护城市而牺牲。下次城里再收到一只特洛伊木马时，弓箭手们就知道该把箭指向哪里。这次就没有死士兵了。恶意软件分析也是如此——通过逆向工程了解某种恶意软件的行为，分析师可以为网络推荐各种保护措施。可以把特洛伊木马看作恶意软件，把分析师看作最初检查木马的士兵，而城市则是计算机网络。
- en: Anyone seeking to become a reverse engineer or an analyst should have the trait
    of being resourceful. Searching the internet is part of reverse engineering. An
    analyst would not plainly rely on the tools and information we provide in this
    book. There are instances that an analysis would even require reverse engineer
    to develop their own tools.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 任何想要成为逆向工程师或分析师的人都应具备足够的资源整合能力。搜索互联网是逆向工程的一部分。分析师不会仅仅依赖我们在本书中提供的工具和信息。有时，分析可能甚至需要逆向工程师自己开发工具。
- en: Software auditing may require reverse engineering. Besides high-level code review
    processes, some software quality verification also involves implementing reverse
    engineering. The aim of these test activities is to ensure that vulnerabilities
    are found and fixed. There are a lot of factors that are not taken into consideration
    during the design and development of a piece of software. Most of these are random
    input and external factors that may cause leaks, leading to vulnerabilities. These
    vulnerabilities may be used for malicious intents that not only disrupt the software,
    but may cause damage and compromise the system environment it is installed in.
    System monitoring and fuzzing tools are commonly used when testing software. Today's
    operating systems have better safeguards to protect from crashing. Operating systems
    usually report any discrepancies found, such as memory or file corruption. Additional
    information, such as crash dumps, are also provided. From this information, a
    reverse engineer would be able to pinpoint where exactly in the software they
    have to inspect.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 软件审计可能需要进行逆向工程。除了高级别的代码审查过程外，一些软件质量验证还涉及实施逆向工程。这些测试活动的目的是确保漏洞被发现并修复。在软件的设计和开发过程中，有许多因素未被考虑。大多数这些因素是随机输入和外部因素，可能会导致泄露，从而产生漏洞。这些漏洞可能会被用于恶意目的，不仅干扰软件的正常运行，还可能造成损害，甚至危及其安装的系统环境。系统监控和模糊测试工具通常在软件测试时使用。今天的操作系统具有更好的保护机制来防止崩溃。操作系统通常会报告发现的任何异常，如内存或文件损坏。同时也提供额外的信息，如崩溃转储。通过这些信息，逆向工程师可以准确定位软件中需要检查的部分。
- en: In the software security industry, one of the core skills required is reverse
    engineering. Every attack, usually in the form of malware, is reversed and analyzed.
    The first thing that is usually needed is to clean the network and systems from
    being compromised. An analyst determines how the malware installed itself and
    became persistent. Then, they develop steps for uninstalling the malware. In the
    anti-malware phase, these steps are used to develop the clean-up routine, once
    the anti-malware product is able to detect that the system has been compromised.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件安全行业中，逆向工程是必备的核心技能之一。每一次攻击，通常以恶意软件的形式出现，都需要进行逆向分析。通常，第一步是清理网络和系统，防止系统进一步被破坏。分析师会确定恶意软件如何安装并保持持久性。然后，他们会制定卸载恶意软件的步骤。在反恶意软件阶段，这些步骤将被用来制定清理程序，一旦反恶意软件产品能够检测到系统已经受到侵害。
- en: The analysis provides information about how the malware was able to compromise
    the system. With this information, network administrators are able to impose policies
    to mitigate the attack. If the malware was able to enter the system because of
    a user opening an email attachment that contains JavaScript code, the network
    administrator would implement the blocking of emails that contain a JavaScript
    attachment.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 该分析提供了恶意软件如何能够侵入系统的信息。通过这些信息，网络管理员能够采取措施来缓解攻击。如果恶意软件是因为用户打开了一个包含JavaScript代码的电子邮件附件而进入系统的，网络管理员就会实施阻止包含JavaScript附件的电子邮件。
- en: Some administrators are even advised to restructure their network infrastructure.
    Once a system gets compromised, the attackers may already have got all of the
    information about the network, and would easily be able to make another wave of
    the same attack. Making major changes will greatly help prevent the same attack
    from happening again.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一些管理员甚至被建议重新构建他们的网络基础设施。一旦系统被攻破，攻击者可能已经获取了关于网络的所有信息，并能轻松发起同样的攻击。进行重大改变将大大有助于防止同样的攻击再次发生。
- en: Part of restructuring the infrastructure is education. The best way to prevent
    a system from being compromised is by educating its users about securing information,
    including their privacy. Knowing about social engineering and having experience
    of previous attacks makes users aware of security. It is important to know how
    attackers are able to compromise an institution and what damage they can cause.
    As a result, security policies are imposed, backups are set up, and continuous
    learning is implemented.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 重构基础设施的一部分是教育。防止系统被攻破的最佳方法是通过教育用户如何保护信息，包括他们的隐私。了解社会工程学并拥有之前攻击的经验使用户意识到安全问题。了解攻击者如何能够破坏一个机构，以及他们能够造成的损害是非常重要的。因此，安全政策被实施，备份被设置，持续学习被执行。
- en: Going further, targeted companies can report the attack to authorities. Even
    a small piece of information can give authorities hints to help them hunt down
    the suspects and shut down malware communication servers.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 更进一步，目标公司可以将攻击报告给相关当局。即使是一小段信息也能为当局提供线索，帮助他们追踪嫌疑人并关闭恶意软件通信服务器。
- en: Systems can be compromised by taking advantage of software vulnerabilities.
    After the attacker gets knowledge about the target, the attacker can craft code
    that exploits known software vulnerabilities. Besides making changes in the infrastructure,
    any software used should also be kept up to date with security features and patches.
    Reverse engineering is also needed to find vulnerable code. This helps pinpoint
    the vulnerable code by backtracking it to the source.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 系统可能通过利用软件漏洞被攻破。在攻击者了解目标后，攻击者可以编写利用已知软件漏洞的代码。除了对基础设施进行更改外，任何使用的软件也应保持最新，具备安全功能和补丁。逆向工程也需要找到脆弱的代码。这有助于通过回溯源代码来定位脆弱的代码。
- en: All of these activities are done based on the output of reverse engineering.
    The information gathered from reverse engineering affects how the infrastructure
    needs to be restructured.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些活动都是基于逆向工程的输出进行的。从逆向工程中收集的信息会影响基础设施需要如何重构。
- en: Technical requirements
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: We will work in an environment that will make use of virtualization software.
    It is recommended that we have a physical machine with virtualization enabled and
    a processor with at least four cores, 4 GB of RAM, and 250 GB of disk space. Pre-install
    this physical machine with either the Windows or Linux operating system.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在一个将使用虚拟化软件的环境中工作。建议我们拥有一台启用了虚拟化功能的物理机器，处理器至少有四个核心，4 GB 的内存和 250 GB 的磁盘空间。请预先安装
    Windows 或 Linux 操作系统在这台物理机器上。
- en: We will be using VirtualBox in our setup. The host operating system version
    of Windows or Linux will depend on the requirements of VirtualBox. See the latest
    version of VirtualBox at [https://www.virtualbox.org/](https://www.virtualbox.org/)
    and look for the recommended requirements.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的设置中使用 VirtualBox。主机操作系统的版本（Windows 或 Linux）将取决于 VirtualBox 的要求。请查看 VirtualBox
    的最新版本：[https://www.virtualbox.org/](https://www.virtualbox.org/) 并查看推荐的要求。
- en: You may need to download virtual machines from Microsoft in advance, as these
    may take some time to download. See the developers' page at [https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/](https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/).
    Windows 10 can be downloaded from the following link: [https://www.microsoft.com/en-us/software-download/windows10](https://www.microsoft.com/en-us/software-download/windows10)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要提前从 Microsoft 下载虚拟机，因为这些下载可能需要一些时间。请参考开发者页面：[https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/](https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/)。Windows
    10 可以通过以下链接下载：[https://www.microsoft.com/en-us/software-download/windows10](https://www.microsoft.com/en-us/software-download/windows10)
- en: Reverse engineering as a process
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逆向工程作为一个过程
- en: Like any other activity, reverse engineering is also a process. There is a guide
    that we can follow to help us generate information that can be helpful to both
    the analyst and stakeholders.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 像任何其他活动一样，逆向工程也是一个过程。我们可以遵循一个指南，帮助我们生成对分析师和利益相关者都有帮助的信息。
- en: Seeking approval
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 寻求批准
- en: Ethics requires anyone carrying out reverse engineering of software to have
    approval from the owner of the software. However, there are a lot of instances
    where software shows its bugs upfront, while the operating system reports it.
    Some companies are more lenient about their software getting reversed without
    approval, but it is customary today that any vulnerabilities found should be reported
    directly to the owner and not publicized. It is up to the owner to decide when
    to report the vulnerability to the community. This prevents attackers from using
    a vulnerability before a software patch gets released.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 道德要求任何进行软件逆向工程的人必须获得软件所有者的批准。然而，许多软件在操作系统报告时，前台就显示了其漏洞。一些公司对于未经批准的逆向工程更为宽容，但如今的惯例是，任何发现的漏洞应该直接报告给软件所有者，而不是公开。这由所有者决定何时将漏洞报告给社区，以防止攻击者在软件补丁发布之前利用漏洞。
- en: It is a different story when malware or hacking is involved. Of course, reversing
    malware doesn't need approval from the malware author. Rather, one of the goals
    of malware analysis is to catch the author. If not sure, always consult a lawyer
    or a company's legal department.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到恶意软件或黑客攻击时，情况则不同。当然，逆向分析恶意软件不需要得到恶意软件作者的批准。实际上，恶意软件分析的目标之一就是抓住作者。如果不确定，始终咨询律师或公司法务部门。
- en: Static analysis
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态分析
- en: Without any execution, viewing the file's binary and parsing each and every
    byte provides much of the information needed to continue further. Simply knowing
    the type of file sets the mindset of the analyst in a way that helps them to prepare
    specific sets of tools and references that may be used. Searching text strings
    can also give clues about the author of the program, where it came from, and,
    most likely, what it does.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有执行的情况下，通过查看文件的二进制并解析每个字节，可以提供继续进一步分析所需的大部分信息。仅仅知道文件的类型，就可以帮助分析员准备特定的工具集和参考资料。搜索文本字符串也可以提供关于程序作者的信息、程序的来源以及程序的功能。
- en: Dynamic analysis
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态分析
- en: This type of analysis is where the the object being analyzed gets executed.
    It requires an enclosed environment so that behaviors that may compromise production
    systems do not happen. Setting up enclosed environments are usually done using
    virtual machines, since they can then easily be controlled. Tools that monitor
    and log common environment actions are implemented during dynamic analysis.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这种分析类型是在被分析的对象被执行时进行的。它需要一个封闭的环境，以防止可能会影响生产系统的行为发生。封闭环境的设置通常通过虚拟机来完成，因为它们可以更容易地进行控制。在动态分析过程中，会实现监控和记录常见环境行为的工具。
- en: Low-level analysis
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 低级分析
- en: There is some information that may be missed out during static and dynamic analyses.
    The flow of a program follows a path that depends of certain conditions. For example,
    a program will only create a file only if a specific process is running. Or, a
    program will create a registry entry in the `Wow6432Node` key only if it were
    running in a 64-bit Windows operating system. Debugging tools are usually used
    to analyze a program in low-level analysis.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在静态分析和动态分析过程中，有些信息可能会被忽视。程序的流程遵循一条依赖特定条件的路径。例如，只有在特定进程运行时，程序才会创建一个文件。或者，程序只有在64位Windows操作系统中运行时，才会在`Wow6432Node`注册表项下创建一个条目。调试工具通常用于在低级分析中分析程序。
- en: Reporting
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 报告
- en: While doing analysis, every piece of information should be collected and documented.
    It is common practice to document a reverse engineered object to help future analysis.
    An analysis serves as a knowledge base for developers who want to secure their
    upcoming programs from flaws. For example, a simple input can now be secured by
    placing bounds validation, which is known about as a result of a prior reverse-engineered
    program that indicated possible buffer overflow.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行分析时，每一条信息都应该被收集并记录。记录逆向工程对象是常见的做法，这有助于未来的分析。分析作为一个知识库，供开发者用来保护他们未来的程序免受缺陷的影响。例如，通过逆向工程的程序提示可能的缓冲区溢出，现在可以通过设置边界验证来保护一个简单的输入。
- en: 'A good report answers questions regarding the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一份好的报告回答以下问题：
- en: How a reversed engineered object works
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逆向工程对象的工作原理
- en: When specific behavior triggers
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 何时触发特定行为
- en: Why specific codes were used in the program
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么在程序中使用了特定的代码
- en: Where it was intended to work on
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它原本打算在什么地方工作
- en: What the whole program does
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整个程序的作用
- en: Tools
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具
- en: Doing reverse code engineering starts off with understanding the meaning of
    every bit and byte. Simply viewing the bytes contained requires developing tools
    that aid in the reading of files and objects. Parsing and adding meaning to every
    byte would require another tool. Reverse engineering has evolved with tools that
    are continuously updated when encountering new software technology. Here, we have
    categorized these tools into binary analysis tools, disassemblers, decompilers,
    debuggers, and monitoring tools.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 进行逆向工程的第一步是理解每个比特和字节的含义。仅仅查看包含的字节需要开发工具来帮助读取文件和对象。解析并为每个字节添加意义则需要另一个工具。逆向工程随着新软件技术的出现不断演化，工具也在不断更新。在这里，我们将这些工具分为二进制分析工具、反汇编器、反编译器、调试器和监控工具。
- en: Binary analysis tools
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二进制分析工具
- en: 'Binary analysis tools are used to parse binary files and extract information
    about the file. An analyst would be able to identify which applications are able
    to read or execute the binary. File types are generally identified from their
    magic header bytes. These Magic Header bytes are usually located at the beginning
    of a file. For example, a Microsoft executable file, an `EXE` file, begin with
    the MZ header (MZ is believed to be the initials of Mark Zbikowski, a developer
    from Microsoft during the DOS days). Microsoft Office Word documents, on the other
    hand, have these first four bytes as their Magic Header:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制分析工具用于解析二进制文件并提取文件信息。分析员能够识别哪些应用程序能够读取或执行该二进制文件。文件类型通常通过其魔术头字节来识别。这些魔术头字节通常位于文件的开头。例如，一个
    Microsoft 可执行文件（`EXE` 文件）以 MZ 头（MZ 被认为是微软 DOS 时期开发者 Mark Zbikowski 的首字母）开头。另一方面，Microsoft
    Office Word 文档的魔术头字节为以下四个字节：
- en: '![](img/1b5c4d48-b407-48dc-b86b-af4c9c90a1a9.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b5c4d48-b407-48dc-b86b-af4c9c90a1a9.png)'
- en: 'The hexadecimal bytes in the preceding screenshot read as `DOCFILE` Other information
    such as text string also give hints. The following screenshot shows information
    indicating that the program was most likely built using Window Forms:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 前面截图中的十六进制字节显示为`DOCFILE`。其他信息，例如文本字符串，也提供了线索。以下截图显示的信息表明该程序很可能是使用 Windows Forms
    构建的：
- en: '![](img/837f29e5-03ec-4a88-abb2-a961b89176cb.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/837f29e5-03ec-4a88-abb2-a961b89176cb.png)'
- en: Disassemblers
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反汇编器
- en: 'Disassemblers are used to view the low-level code of a program. Reading low-level
    code requires knowledge of assembly language. Analysis done with a disassembler
    gives information about the execution conditions and system interactions that
    a program will carry out when executed. However, the highlights when reading low-level
    code are when the program uses **Application Program Interface** (**API**) functions.
    The following screenshot shows a code snippet of a program module that uses the
    `GetJob()` API. This API is used to get information about the printer job, as
    shown here:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 反汇编器用于查看程序的低级代码。阅读低级代码需要了解汇编语言。使用反汇编器进行的分析提供了有关程序在执行时将执行的操作条件和系统交互的信息。然而，阅读低级代码时的亮点是程序使用**应用程序接口**（**API**）函数时。以下截图显示了一个使用`GetJob()`
    API的程序模块代码片段。此 API 用于获取打印作业的信息，如下所示：
- en: '![](img/4d257d3c-0456-495d-98d6-08da4d4fc837.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4d257d3c-0456-495d-98d6-08da4d4fc837.png)'
- en: Debuggers
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试器
- en: Disassemblers can show the code tree, but the analyst can verify which branch
    the code flows to by using a debugger. A debugger does actual execution per line
    of code. The analyst can trace through codes such as loops, conditional statements,
    and API execution. Since debuggers are categorized under dynamic analysis and
    perform a step-wise execution of code, debugging is done in an enclosed environment.
    Various file types have different disassemblers. In a .NET compiled executable,
    it is best to instead disassemble the p-code and work out what each operator means.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 反汇编器可以显示代码树，但分析员可以通过使用调试器验证代码流向的分支。调试器按行执行代码。分析员可以跟踪代码，例如循环、条件语句和 API 执行。由于调试器属于动态分析范畴，并执行逐步代码执行，因此调试是在封闭环境中进行的。不同的文件类型有不同的反汇编器。在
    .NET 编译的可执行文件中，最好是反汇编 p-code 并推敲每个操作符的含义。
- en: Monitoring tools
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控工具
- en: Monitoring tools are used to monitor system behaviors regarding file, registry,
    memory, and network. These tools usually tap or hook on APIs or system calls,
    then log information such as newly created processes, updated files, new registry
    entries, and incoming SMB packets are generated by reporting tools.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 监控工具用于监控系统在文件、注册表、内存和网络方面的行为。这些工具通常会通过API或系统调用进行拦截或挂钩，然后记录如新创建的进程、更新的文件、新的注册表项以及由报告工具生成的传入SMB数据包等信息。
- en: Decompilers
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反编译器
- en: Decompilers are similar to disassemblers. They are tools that attempt to restore
    the high-level source code of program unlike disassemblers that attempt to restore
    the low-level (assembly language) source code of a program.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 反编译器类似于反汇编器。它们是尝试恢复程序的高级源代码的工具，而反汇编器则尝试恢复程序的低级（汇编语言）源代码。
- en: These tools work hand in hand with each other. The logs generated from monitoring
    tools can be used to trace the actual code from the disassembled program. The
    same applies when debugging, where the analyst can see the overview of the low-level
    code from the disassembly, while being able to predict where to place breakpoints
    based on the monitoring tools' logs.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具相互配合工作。从监控工具生成的日志可以用来追踪反汇编程序中的实际代码。在调试时也是如此，分析师可以查看反汇编的低级代码概览，同时根据监控工具的日志预测在哪里设置断点。
- en: Malware handling
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 恶意软件处理
- en: 'Readers of this book are required to take precautions when handling malware
    files. Here are some initial tips that can help us to prevent our host machine
    from being compromised:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的读者在处理恶意软件文件时需要采取预防措施。以下是一些初步的建议，可以帮助我们防止主机被攻破：
- en: Do your analysis in an enclosed environment such as a separate computer or in
    a virtual machine.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在封闭的环境中进行分析，例如单独的计算机或虚拟机中。
- en: If network access is not required, cut it off.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果不需要网络访问，切断网络连接。
- en: If internet access is not required, cut it off.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果不需要互联网访问，切断网络连接。
- en: When copying files manually, rename the file to a filename that doesn't execute. For
    example, rename `myfile.exe` to `myfile.foranalysis`.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在手动复制文件时，将文件重命名为不会执行的文件名。例如，将`myfile.exe`重命名为`myfile.foranalysis`。
- en: Basic analysis lab setup
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本分析实验室设置
- en: 'A typical setup would require a system that can run malware without it being
    compromised externally. However, there are instances that may require external
    information from the internet. For starters, we''re going to mimic an environment
    of a home user. Our setup will, as much as possible, use free and open source
    tools. The following diagram shows an ideal analysis environment setup:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的设置要求系统能够运行恶意软件，而不被外部影响。然而，也有一些情况可能需要从互联网获取外部信息。首先，我们将模拟一个家庭用户的环境。我们的设置将尽可能使用免费的开源工具。以下图示显示了理想的分析环境设置：
- en: '![](img/5a94fa51-490c-47de-82b7-823c2d2fdb25.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5a94fa51-490c-47de-82b7-823c2d2fdb25.png)'
- en: The sandbox environment here is where we do analysis of a file. MITM, mentioned
    on the right of the diagram, means the **man in the middle** environment, which
    is where we monitor incoming and outgoing network activities. The sandbox should
    be restored to its original state. This means that after every use, we should
    be able to revert or restore its unmodified state. The easiest way to set this
    up is to use virtualization technology, since it will then be easy to revert to
    cloned images. There are many virtualization programs to choose from, including
    VMware, VirtualBox, Virtual PC, and Bochs.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的沙盒环境是我们进行文件分析的地方。图示右侧提到的MITM，指的是**中间人**环境，它用于监控进出网络的活动。沙盒应该恢复到其原始状态。这意味着每次使用后，我们都应该能够恢复或还原其未被修改的状态。最简单的设置方法是使用虚拟化技术，因为这样就可以轻松地恢复到克隆镜像。有许多虚拟化程序可供选择，包括VMware、VirtualBox、Virtual
    PC和Bochs。
- en: It should also be noted that there is software that can detect that it is being
    run, and doesn't like to be run in a virtualized environment. A physical machine
    setup may be needed for this case. Disk management software that can store images
    or re-image disks would be the best solution for us here. These programs include
    Fog, Clonezilla, DeepFreeze, and HDClone.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 还应该注意，有些软件能够检测到自己正在被运行，并且不喜欢在虚拟化环境中运行。在这种情况下，可能需要物理机器来设置。可以存储镜像或重新映像磁盘的磁盘管理软件是我们在这里的最佳解决方案。这些程序包括Fog、Clonezilla、DeepFreeze和HDClone。
- en: Our setup
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的设置
- en: 'In our setup, we will be using VirtualBox, which can be downloaded from[ https://www.virtualbox.org/](https://www.virtualbox.org/).
    The Windows OS we will be using is Windows 7 32-bit, which can be downloaded from [https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/](https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/).
    In the following diagram, the system, which has an internet connection, is installed
    with two virtual machines, a guest sandbox and guest MITM:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的设置中，我们将使用VirtualBox，它可以从[https://www.virtualbox.org/](https://www.virtualbox.org/)下载。我们将使用的Windows操作系统是Windows
    7 32位，可以从[https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/](https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/)下载。在以下图示中，系统安装了两个虚拟机：一个来宾沙箱和一个来宾MITM，且系统已连接互联网：
- en: '![](img/fda8a8f3-d844-4023-add5-72f0c768851b.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fda8a8f3-d844-4023-add5-72f0c768851b.png)'
- en: 'Download and install VirtualBox and run it. VirtualBox has installers for both
    Windows and Linux. Download the Windows 7 32-bit image, as shown here:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装VirtualBox并运行它。VirtualBox有适用于Windows和Linux的安装程序。下载Windows 7 32位镜像，如下所示：
- en: '![](img/77907ce3-95e7-4539-bcc8-4415eb179e55.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/77907ce3-95e7-4539-bcc8-4415eb179e55.png)'
- en: The image downloaded from the Microsoft website is zipped and should be extracted.
    In VirtualBox, click on File|Import Appliance. You should be shown a dialog where
    we can import the Windows 7 32-bit image.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从微软网站下载的镜像是压缩的，应先解压。在VirtualBox中，点击文件|导入虚拟机。您将看到一个对话框，允许我们导入Windows 7 32位镜像。
- en: 'Simply browse and select the OVA file that was extracted from the ZIP archive,
    then click on Next, as shown here:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只需浏览并选择从ZIP文件解压出来的OVA文件，然后点击“下一步”，如下所示：
- en: '![](img/deb86cec-5fa0-4f88-9765-f11a515f1259.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/deb86cec-5fa0-4f88-9765-f11a515f1259.png)'
- en: 'Before continuing, the settings can be changed. The default RAM is set to 4096
    MB. The more RAM allocated and the higher the number of CPU cores set, the better
    performance will be noticed when running or debugging. However, the more RAM added,
    the same amount of disk space gets consumed when storing snapshots of the image.
    This means that if we allocated 1 GB of RAM, creating a snapshot will also consume
    at least 1GB of disk space.  We set our RAM to 2048 MB, which would be a reasonable
    amount for us to work on:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在继续之前，可以更改设置。默认RAM设置为4096 MB。分配更多的RAM并设置更多的CPU核心时，运行或调试时的性能会有所提升。然而，增加的RAM会使得创建镜像快照时消耗相同量的磁盘空间。这意味着，如果我们分配了1GB的RAM，创建一个快照也会消耗至少1GB的磁盘空间。我们将RAM设置为2048
    MB，这对于我们来说是一个合理的工作量：
- en: '![](img/fcd19eec-7ef6-4a94-b184-44f0c08decc5.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fcd19eec-7ef6-4a94-b184-44f0c08decc5.png)'
- en: Click on Import and it should start generating the virtual disk image. Once
    it has completed, we need to create our first snapshot. It is recommended to create
    a snapshot in a powered-off state, since the amount of disk space consumed is
    minimal. Look for the SnapShots tab, then click on Take. Fill out the Snapshot
    Name and Snapshot Description fields, then click on the OK button. This quickly
    creates your first snapshot.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“导入”，它应该开始生成虚拟磁盘镜像。一旦完成，我们需要创建第一个快照。建议在关闭状态下创建快照，因为此时消耗的磁盘空间最小。找到“快照”标签，然后点击“创建”。填写快照名称和快照描述字段，然后点击“确定”按钮。这将快速创建您的第一个快照。
- en: In a power-on state, the amount of RAM plus the amount of modified disk space
    in the virtual machine is equal to the total disk space that a snapshot will consume.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在开机状态下，虚拟机中的RAM和修改后的磁盘空间总和等于快照所消耗的总磁盘空间。
- en: 'Click on Start to begin running the Windows 7 image. You should end up with
    the following window. In case it asks for a password, the default password is `Passw0rd!`:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“启动”以开始运行Windows 7镜像。您应该会看到如下窗口。如果系统要求输入密码，默认密码是`Passw0rd!`：
- en: '![](img/c6bea7bb-783a-40ac-af31-299b8a4352c7.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c6bea7bb-783a-40ac-af31-299b8a4352c7.png)'
- en: At this point, the network setup is set to NAT. This means that any network
    resources required by the virtual machine will use the host computer's IP address.
    The IP address of the virtual machine is taken from the VirtualBox's virtual DHCP
    service. Remember that any network communication in the virtual machine makes
    use of the host computer's IP address.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，网络设置为NAT。这意味着虚拟机所需的任何网络资源将使用主机计算机的IP地址。虚拟机的IP地址来自VirtualBox的虚拟DHCP服务。记住，虚拟机中的所有网络通信都将使用主机计算机的IP地址。
- en: Since we can't prevent a certain malware from sending out information to the
    web in order to return information back to our virtual machine, it is important
    to note that some ISPs may monitor common malware behavior. It would be best to
    review your contract with them and make a call if needed.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们无法防止某些恶意软件将信息发送到网络，以便将信息返回到我们的虚拟机，因此需要注意的是，一些ISP可能会监控常见的恶意软件行为。最好查看与他们的合同，并在必要时做出决定。
- en: Most of our reverse engineering deals with malware and, as of the time of writing,
    attackers usually target Windows systems. Our setup uses Microsoft Windows 7 32-bit.
    Feel free to use other versions. We recommend installing the 32-bit version of
    Microsoft Windows, as it will be easier to track virtual and physical addresses
    later on during low-level debugging.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的大部分逆向工程都涉及恶意软件，截至目前，攻击者通常以Windows系统为目标。我们的设置使用的是Microsoft Windows 7 32位。你可以自由选择使用其他版本。我们建议安装32位版本的Microsoft
    Windows，因为它在低级调试时更容易追踪虚拟地址和物理地址。
- en: Samples
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样本
- en: We will be building our own programs to validate and understand how the low-level
    code
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建自己的程序来验证和理解低级代码的工作原理。
- en: 'behaves and what it looks like. The following list outlines the software we
    will be using to build our programs:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 它的行为和外观。以下是我们将用来构建程序的软件列表：
- en: Dev C++ ([http://www.bloodshed.net/devcpp.htm](http://www.bloodshed.net/devcpp.html))
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dev C++ ([http://www.bloodshed.net/devcpp.htm](http://www.bloodshed.net/devcpp.html))
- en: Visual Studio C++ ([https://www.visualstudio.com/downloads/](https://www.visualstudio.com/downloads/))
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio C++ ([https://www.visualstudio.com/downloads/](https://www.visualstudio.com/downloads/))
- en: MASM32 ([http://www.masm32.com/](http://www.masm32.com/))
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MASM32 ([http://www.masm32.com/](http://www.masm32.com/))
- en: 'If you are interested in malware, the samples can be obtained from the following
    sites:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对恶意软件感兴趣，可以从以下网站获取样本：
- en: '[https://github.com/PacktPublishing/Mastering-Reverse-Engineering](https://github.com/PacktPublishing/Mastering-Reverse-Engineering)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Mastering-Reverse-Engineering](https://github.com/PacktPublishing/Mastering-Reverse-Engineering)'
- en: '[https://github.com/ytisf/theZoo](https://github.com/ytisf/theZoo)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/ytisf/theZoo](https://github.com/ytisf/theZoo)'
- en: Summary
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Reverse engineering has been around for years and has been a useful technique
    to understand how things work. In the software industry, reverse engineering helps
    validate and fix code flow and structures. The information from such tasks can
    improve the security of various aspects of software, network infrastructure, and
    human awareness. As a core skill requirement for the anti-malware industry, reverse
    engineering helps create detection and remediation information; the same information
    that is used to build safeguards for an institution's servers. It is also used
    by authorities and forensic experts to hunt down syndicates.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 逆向工程已经存在多年，并且一直是一项有用的技术，用于了解事物的运作方式。在软件行业中，逆向工程有助于验证和修复代码流和结构。通过这些任务获得的信息可以提高软件、网络基础设施以及人类意识的各个方面的安全性。作为反恶意软件行业的核心技能要求，逆向工程有助于创建检测和修复信息；这些信息也被用来构建保护措施，保障机构的服务器安全。它还被当局和法医专家用来追踪犯罪集团。
- en: There are basic steps that help build reverse engineering information. Once
    an analyst has approval from the original author to carry out reverse engineering,
    they can begin with static analysis, dynamic analysis, and then low-level analysis.
    This is then followed by reporting the overview and details about the software.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些基本步骤可以帮助建立逆向工程的信息。一旦分析师获得原作者的批准进行逆向工程，他们可以从静态分析、动态分析开始，然后进行低级分析。接下来是报告软件的概述和细节。
- en: When doing analysis, various types of tools are used, including static analysis
    tools, disassemblers, decompilers, debuggers, and system monitoring tools. When
    doing reverse engineering on malware, it is best to use these tools in an environment
    that has limited or no access to the network you use for personal purposes or
    work. This should prevent your infrastructure from being compromised. Malware
    should be handled properly, and we listed a couple of ways to prevent accidental
    double-clicks.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行分析时，会使用各种工具，包括静态分析工具、反汇编器、反编译器、调试器和系统监控工具。在对恶意软件进行逆向工程时，最好在一个没有或有限访问网络的环境中使用这些工具，以避免个人用途或工作中的网络被入侵。这可以防止你的基础设施被破坏。恶意软件应该得到妥善处理，我们列出了几种防止意外双击的方式。
- en: Malware analysis nonetheless requires the internet to get further information
    on how the malware works and what it does. There may be some legal issues that
    require you to consult the laws of your country and the policies of your local
    ISP, to ensure that you are not violating any of them.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，恶意软件分析仍然需要互联网，以便进一步了解恶意软件的工作原理及其行为。可能会有一些法律问题，需要你查阅所在国家的法律以及当地互联网服务提供商（ISP）的政策，以确保你不会违反其中的任何规定。
- en: The core requirement for the setup of an analysis lab is that the target operating
    system can be reverted back to its unmodified state.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 分析实验室设置的核心要求是目标操作系统能够恢复到未修改的状态。
- en: Malware samples can be obtained from the following link: [https://github.com/PacktPublishing/Mastering-Reverse-Engineering/tree/master/tools](https://github.com/PacktPublishing/Mastering-Reverse-Engineering/tree/master/tools).
    These samples will be used throughout this book.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件样本可以从以下链接获取：[https://github.com/PacktPublishing/Mastering-Reverse-Engineering/tree/master/tools](https://github.com/PacktPublishing/Mastering-Reverse-Engineering/tree/master/tools)。这些样本将在本书中贯穿使用。
- en: Now that we have our basic setup, let's embark on our journey through reverse
    engineering.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了基本设置，让我们开始逆向工程的旅程吧。
