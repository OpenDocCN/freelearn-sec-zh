- en: Identity Access Management on AWS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS上的身份访问管理
- en: AWS offers many different methods for users to authenticate their accounts through
    the IAM service, the most common of which include user accounts and roles. IAM
    users provide means of setting up credentials for something that needs long-term
    access to the environment. Users can access the AWS APIs by authenticating with
    the web UI using a username and password, or by using API keys (an access key
    ID and secret access key) to programmatically make requests.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: AWS提供了许多不同的方法供用户通过IAM服务对其帐户进行身份验证，其中最常见的包括用户帐户和角色。IAM用户提供了为需要长期访问环境的内容设置凭据的手段。用户可以通过使用用户名和密码进行Web
    UI身份验证来访问AWS API，也可以通过使用API密钥（访问密钥ID和秘密访问密钥）来以编程方式发出请求。
- en: Roles, on the other hand, provide means of delegating temporary credentials
    to users/services/applications as they need them. An IAM user who has the `sts:AssumeRole`
    permission can assume a role to get a set of API keys (an access key ID, secret
    access key, and session token) that are only valid for a small amount of time.
    When default, the lifespan is set to one hour before these keys will expire. These
    keys will have the permissions that were assigned to the role that was assumed,
    and they are often used to complete certain tasks. By using this model, the AWS
    users in an environment will not always have every single permission that they
    may need to use; instead, they can request the permissions that a role has as
    they need those permissions. This allows for more strict auditing and permissions
    management.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，角色提供了将临时凭据委派给用户/服务/应用程序的手段。具有`sts:AssumeRole`权限的IAM用户可以假定角色以获取一组API密钥（访问密钥ID、秘密访问密钥和会话令牌），这些密钥仅在短时间内有效。默认情况下，密钥的生命周期设置为在这些密钥到期之前的一小时。这些密钥将具有被分配给被假定角色的权限，并且通常用于完成某些任务。通过使用这种模型，环境中的AWS用户不会始终拥有他们可能需要使用的每个权限；相反，他们可以根据需要请求角色具有的权限。这允许更严格的审计和权限管理。
- en: There are also resources in AWS IAM known as **groups**. Groups can be used
    to delegate a common set of permissions to a group of users. In an example AWS
    environment, there may be a group called **developers** that provides access to
    services that the company developers need access to. Then, users can be added
    to the group, and they will inherit the permissions associated with it. Users
    will only retain the provided permissions for as long as they are a member of
    the associated group. A single user can be a member of up to 10 separate groups
    and a single group, can hold up to the total number of users that are allowed
    in the account.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: AWS IAM还有一种称为**组**的资源。组可用于将一组用户委派给一组权限。在AWS环境示例中，可能会有一个名为**开发人员**的组，该组提供公司开发人员需要访问的服务。然后，用户可以添加到该组，并且他们将继承与之关联的权限。只要他们是相关组的成员，用户将保留所提供的权限。单个用户最多可以成为10个不同组的成员，单个组最多可以容纳允许的用户总数。
- en: IAM users, roles, and groups are important to our attack process and for our
    basic understanding of the AWS infrastructure. This chapter aims to provide insight
    into some common features of the IAM service and how we might use them as regular
    AWS users and as attackers.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: IAM用户、角色和组对我们的攻击过程和对AWS基础设施的基本理解至关重要。本章旨在提供有关IAM服务一些常见功能以及我们如何作为常规AWS用户和攻击者使用它们的见解。
- en: 'In this chapter, we will be using the IAM service to cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用IAM服务来涵盖以下主题：
- en: How to create IAM users, groups, roles, and associated privileges
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建IAM用户、组、角色和相关权限
- en: How to limit the API actions and resources accessible to a specific role
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何限制特定角色可访问的API操作和资源
- en: Using IAM access keys
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用IAM访问密钥
- en: Signing AWS API requests
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 签署AWS API请求
- en: Creating IAM users, groups, roles, and associated privileges
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建IAM用户、组、角色和相关权限
- en: 'When you are logged in to the AWS web console, users, groups, and roles can
    be created by navigating to the IAM service page:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当您登录到AWS Web控制台时，可以通过导航到IAM服务页面来创建用户、组和角色：
- en: 'To get to the IAM page, click on the Services button on the top-left of the
    page, then search for and click on the relevant link to the IAM page:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要进入IAM页面，请单击页面左上角的“服务”按钮，然后搜索并单击IAM页面的相关链接：
- en: '![](img/6df3ba5b-11e9-4933-ac29-7da82fbedd52.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6df3ba5b-11e9-4933-ac29-7da82fbedd52.png)'
- en: Searching for the IAM service in the Services drop-down menu of the AWS web
    console
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS Web控制台的服务下拉菜单中搜索IAM服务
- en: 'The following figure shows the relevant links for users, groups, and roles
    on the IAM dashboard. Click on Users to continue:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下图显示了IAM仪表板上用户、组和角色的相关链接。单击“用户”继续：
- en: '![](img/cf9a5a8a-6211-4ddb-8598-b00b7b98857e.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cf9a5a8a-6211-4ddb-8598-b00b7b98857e.png)'
- en: The relevant links on the IAM dashboard
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: IAM仪表板上的相关链接
- en: 'To create an IAM user, click on the Add user button at the top-left of the
    page:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建IAM用户，请单击页面左上角的“添加用户”按钮：
- en: '![](img/08c712c9-f983-48f1-8887-5ee43bbe8395.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/08c712c9-f983-48f1-8887-5ee43bbe8395.png)'
- en: The Add user button on the Users dashboard
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 用户仪表板上的“添加用户”按钮
- en: You will then be presented with a page that requests a User name and the type
    of access to provide to the new user. One of the two types of access that you
    can choose is Programmatic access, which creates an access key ID and secret access
    key for the user, so that they can access the AWS APIs through something like
    the AWS CLI or the SDKs provided for various programming languages. The other
    is AWS Management Console access, which will either autogenerate a password or
    allow you to set a custom one, so that the user can access the AWS web console.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将看到一个页面，要求输入用户名和要为新用户提供的访问类型。您可以选择的两种访问类型之一是程序访问，它会为用户创建访问密钥ID和秘密访问密钥，以便他们可以通过AWS
    CLI或为各种编程语言提供的SDK访问AWS API。另一种是AWS管理控制台访问，它将自动生成密码或允许您设置自定义密码，以便用户可以访问AWS Web控制台。
- en: 'For our example, let''s create a user named `Test` that is allowed programmatic
    access to the AWS APIs. Once that has been filled out, you can click on Next:
    Permissions to continue:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于我们的示例，让我们创建一个名为`Test`的用户，允许访问AWS API。填写完毕后，您可以点击“下一步：权限”继续：
- en: '![](img/8c2b4aeb-256e-48bd-93e6-e0a1a160bd81.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c2b4aeb-256e-48bd-93e6-e0a1a160bd81.png)'
- en: 'Figure 4: Creating a new user named Test with programmatic access to the AWS
    APIs'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图4：创建一个名为Test的新用户，允许访问AWS API
- en: After continuing, you will be presented with three options to set up permissions
    for this new user.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续后，您将看到三个选项来设置这个新用户的权限。
- en: 'If you wanted to create a user without any permissions (for example, if you
    were going to handle those later), you could just click on Next: Review to skip
    this page.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想创建一个没有任何权限的用户（例如，如果您打算稍后处理这些权限），您可以直接点击“下一步：审核”跳过此页面。
- en: 'The three options that are presented allow you to do the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的三个选项允许您执行以下操作：
- en: Add the user to an IAM group
  id: totrans-28
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将用户添加到IAM组
- en: Copy the permissions of another existing user
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制另一个现有用户的权限
- en: Attach the existing IAM policies directly to the user
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接将现有的IAM策略附加到用户
- en: 'Click on the third option to attach an existing policy directly to the user:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 点击第三个选项，直接将现有策略附加到用户：
- en: '![](img/e58d2e60-01bd-481e-9a93-fbfee5c6111c.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e58d2e60-01bd-481e-9a93-fbfee5c6111c.png)'
- en: 'Figure 5: Selecting the option to attach existing policies directly to the
    new user'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图5：选择直接将现有策略附加到新用户的选项
- en: After doing so, you will be presented with a list of IAM policies.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做后，您将看到一个IAM策略列表。
- en: 'In the search box that appears, type in `AmazonEC2FullAccess` and check the
    box to the left of the policy that appears. This policy will provide the user
    with full access to the EC2 service, as well as other services that are often
    used in tandem with EC2\. If you are interested in viewing the JSON document for
    this policy, you can click on the arrow next to the policy name and then click
    on the {} JSON button:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的搜索框中，输入`AmazonEC2FullAccess`并勾选出现的策略左侧的框。这个策略将为用户提供对EC2服务的完全访问权限，以及通常与EC2一起使用的其他服务。如果您有兴趣查看此策略的JSON文档，可以点击策略名称旁边的箭头，然后点击{}
    JSON按钮：
- en: '![](img/0a3ea57e-2b69-47a7-b388-076adf17afcb.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a3ea57e-2b69-47a7-b388-076adf17afcb.png)'
- en: 'Figure 6: Viewing the JSON document for the IAM policy that we selected'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图6：查看我们选择的IAM策略的JSON文档
- en: IAM policies are documents in JSON formats that specify what permissions are
    allowed or denied, what resources those permissions apply to, and under what conditions
    those permissions are valid for a certain user, group, or role.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: IAM策略是以JSON格式的文档，指定了允许或拒绝的权限、这些权限适用的资源以及这些权限对某个用户、组或角色有效的条件。
- en: 'There are two kinds of IAM policies: policies that are AWS managed and policies
    that are customer managed. An AWS managed policy is a pre-defined set of permissions
    that AWS manages. AWS managed policies can be recognized by the small orange AWS
    symbol next to the policy name. Customers are not allowed to modify these AWS
    managed policies, and they are provided as a method of convenience when setting
    up permissions:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种IAM策略：AWS管理的策略和客户管理的策略。AWS管理的策略是AWS管理的预定义权限集。AWS管理的策略可以通过策略名称旁边的小橙色AWS符号来识别。客户不允许修改这些AWS管理的策略，它们被提供作为设置权限时的便利方法：
- en: '![](img/ae4087d6-e870-4ad6-8e68-1eac34a9027a.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae4087d6-e870-4ad6-8e68-1eac34a9027a.png)'
- en: 'Figure 7: The AWS managed policy AmazonEC2FullAccess has been chosen'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图7：选择了AWS管理策略AmazonEC2FullAccess
- en: Customer managed policies are the same as AWS managed policies, except that
    they must be created, and they are fully customizable at any time. These policies
    allow you to delegate fine-grained access to the various IAM users, groups, and
    roles in your account.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 客户管理的策略与AWS管理的策略相同，只是它们必须在任何时候创建，并且可以完全自定义。这些策略允许您将对各种IAM用户、组和角色的细粒度访问权限委托给您的帐户。
- en: 'We can now click the Next: Review button towards the bottom-right of the window
    to move on. The next page will be a summary of what we have just set up, so we
    can go ahead and click on the Create user button towards the bottom-right of the
    window.'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以点击窗口底部右侧的“下一步：审核”按钮继续。接下来的页面将是我们刚刚设置的摘要，所以我们可以继续点击窗口底部右侧的“创建用户”按钮。
- en: 'Next, you should be presented with a green Success message and the option to
    either view or download the associated Access key ID and Secret access key for
    this new user:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您将看到一个绿色的成功消息，并有选择查看或下载与这个新用户相关的访问密钥ID和秘密访问密钥的选项：
- en: '![](img/2d0edbea-25a7-4dcd-89c3-38b71b8ebc00.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d0edbea-25a7-4dcd-89c3-38b71b8ebc00.png)'
- en: 'Figure 8: The success page presented after creating a new IAM user'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图8：创建新IAM用户后呈现的成功页面
- en: This is the only time that these credentials will be available to you, so it
    is important to securely store this information somewhere that only you can access.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是这些凭证唯一可用的时间，因此重要的是将这些信息安全地存储在只有您可以访问的地方。
- en: The same general process can be followed to create roles and groups, as well.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的一般过程也可以用来创建角色和组。
- en: 'If we want to create a group and add our new user to it, we can follow these
    steps:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想创建一个组并将我们的新用户添加到其中，我们可以按照以下步骤进行：
- en: Navigate to the Groups tab of the IAM page in the AWS web console, then click
    on Create New Group in the top-left corner.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在AWS Web控制台的IAM页面的“组”选项卡中导航，然后点击左上角的“创建新组”。
- en: Supply a name for this group; in our example, it will be `Developers`.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为这个组提供一个名称；在我们的示例中，它将是`Developers`。
- en: We will be asked to select an IAM policy to attach to this group, which we are
    going to search for; we will add the IAMReadOnlyAccess AWS managed policy to our
    group.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将被要求选择一个要附加到该组的IAM策略，我们将搜索并将IAMReadOnlyAccess AWS管理策略添加到我们的组中。
- en: 'Hit Next Step, and we will be presented with a summary of the group that we
    want to create, where we can complete the process by clicking on Create Group
    in the bottom-right, as shown in the following screenshot:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下一步，我们将看到一个我们想要创建的组的摘要，我们可以通过点击右下角的“创建组”来完成这个过程，如下面的屏幕截图所示：
- en: '![](img/c74da7ec-0c7c-4079-adaa-3fa474086c75.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c74da7ec-0c7c-4079-adaa-3fa474086c75.png)'
- en: 'Figure 9: Creating our new group named Developers with the IAMReadOnlyAccess
    policy attached'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图9：创建名为Developers的新组，并附加IAMReadOnlyAccess策略
- en: 'Now that the group is created, we can click on it from the IAM groups page,
    and we will see something like the following screenshot, where we can click on
    the Add Users to Group button to add our new user to it:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在组已经创建，我们可以从IAM组页面点击它，然后会看到类似下面的屏幕截图，我们可以点击“添加用户到组”按钮来添加我们的新用户：
- en: '![](img/a994979d-fe18-4271-9567-6810fe9bb71b.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a994979d-fe18-4271-9567-6810fe9bb71b.png)'
- en: Our newly created group without any users in it yet
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们新创建的组目前还没有任何用户
- en: 'We can then search for and check the box next to our previously created `Test`
    user, and then click on the Add Users button, as shown in the following screenshot,
    to complete the process:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们可以搜索并勾选我们之前创建的`Test`用户旁边的复选框，然后点击“添加用户”按钮，如下面的屏幕截图所示，来完成这个过程：
- en: '![](img/a0c41e40-b403-4f0d-b535-c0fb697c0066.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a0c41e40-b403-4f0d-b535-c0fb697c0066.png)'
- en: Selecting and adding our Test user to our new Developers group
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 选择并将我们的Test用户添加到我们的新Developers组中
- en: 'Now, if we navigate to the user page for our `Test` user, we can see that we
    have our previously attached AmazonEC2FullAccess AWS managed policy attached to
    our user, as well as another section, Attached from group, that includes the IAMReadOnlyAccess
    AWS managed policy that our user has inherited from the `Developers` group:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果我们导航到我们`Test`用户的用户页面，我们可以看到我们之前附加的AmazonEC2FullAccess AWS托管策略附加到了我们的用户，以及另一个部分，来自组附加，其中包括我们的用户从`Developers`组继承的IAMReadOnlyAccess
    AWS托管策略：
- en: '![](img/0a875368-505e-4f0b-828c-5d5d9f930982.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a875368-505e-4f0b-828c-5d5d9f930982.png)'
- en: A policy directly attached to our user and a policy inherited from the Developers
    group
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 直接附加到我们的用户的策略和从Developers组继承的策略
- en: 'If we are curious about what groups our user is in and what policies our user
    is inheriting from them, we can click, the Groups (1) tab, and it will give us
    that information:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们想知道我们的用户属于哪些组，以及我们的用户从这些组中继承了哪些策略，我们可以点击“组（1）”选项卡，它会给我们这些信息：
- en: '![](img/6fec2d0f-c795-4a73-a17a-89631846149f.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6fec2d0f-c795-4a73-a17a-89631846149f.png)'
- en: The groups that our user is a part of and what policies we have inherited from
    them
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的用户所属的组以及我们从这些组中继承的策略
- en: Roles cannot be added to groups, but IAM policies can be attached and removed
    from them in the same way that they can for users and groups. Roles have an additional
    important feature known as **trust relationships**. Trust relationships specify
    who can assume (request temporary credentials for) the role in question, and under
    what conditions that can occur.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 角色不能添加到组中，但IAM策略可以以与为用户和组相同的方式附加和移除。角色具有一个额外的重要特性，称为**信任关系**。信任关系指定谁可以假定（请求临时凭证）所讨论的角色，并在什么条件下可以发生。
- en: 'I have created a role that has a trust relationship created with the AWS EC2
    service, which means that EC2 resources can request temporary credentials for
    this role. The following screenshot shows the Trust relationships tab when viewing
    a specific role:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了一个角色，与AWS EC2服务创建了信任关系，这意味着EC2资源可以请求此角色的临时凭证。查看特定角色时，下面的屏幕截图显示了信任关系选项卡：
- en: '![](img/d1a0b832-0a48-4439-b56d-ae5e355a1f48.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d1a0b832-0a48-4439-b56d-ae5e355a1f48.png)'
- en: Trust relationships tab
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 信任关系选项卡
- en: In the highlighted section, we can see that we have one trusted entity, and
    it is The identity provider(s) ec2.amazonaws.com.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在突出显示的部分，我们可以看到我们有一个受信任的实体，它是身份提供者 ec2.amazonaws.com。
- en: 'Trust relationships are specified in a JSON document known as the **assume
    role policy** document. Our example role has the following assume role policy
    document specified:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 信任关系在一个名为**假定角色策略**文档的JSON文档中指定。我们的示例角色有以下假定角色策略文档：
- en: '[PRE0]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Policies and their supported keys will be described in more depth in the next
    section, but basically, what this JSON document says is that the EC2 service (the
    principal) is allowed (the effect) to run the `sts:AssumeRole` action while targeting
    this role. Principals can also include IAM users, other AWS services, or other
    AWS accounts. This means that you can assume cross-account roles, which is a common
    way to establish persistence in an account as an attacker. This will be described
    further in [Chapter 11](0d6c1dfb-b078-4ed0-a92a-b86751ef1db8.xhtml), *Using Boto3
    and Pacu to Maintain AWS Persistence*. We will now continue by looking at limiting
    API actions and accessible resources with IAM policies.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 策略及其支持的键将在下一节中更详细地描述，但基本上，这个JSON文档表示EC2服务（主体）被允许（效果）在针对此角色时运行`sts:AssumeRole`操作。主体还可以包括IAM用户、其他AWS服务或其他AWS账户。这意味着您可以假定跨账户角色，这是攻击者在账户中建立持久性的常见方式。这将在[第11章](0d6c1dfb-b078-4ed0-a92a-b86751ef1db8.xhtml)中进一步描述，*使用Boto3和Pacu维持AWS持久性*。我们现在将继续查看如何使用IAM策略限制API操作和可访问资源。
- en: Limit API actions and accessible resources with IAM policies
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用IAM策略限制API操作和可访问资源
- en: IAM policies are how permissions are delegated to the users, roles, and groups
    in your account. They are simple JSON documents that specify what permissions
    are specifically allowed or denied, what resources those permissions can/can't
    be used on, and under what conditions those rules apply. We can use these to enforce
    fine-grained permissions models within our AWS environment.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: IAM策略是如何授予账户中的用户、角色和组权限的。它们是简单的JSON文档，指定了明确允许或拒绝的权限，这些权限可以/不能在哪些资源上使用，以及这些规则适用的条件。我们可以使用这些来在我们的AWS环境中执行细粒度的权限模型。
- en: IAM policy structure
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IAM策略结构
- en: 'The following JSON document is an example that was created to describe some
    of the key features of IAM policy documents:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的JSON文档是一个示例，用来描述IAM策略文档的一些关键特性：
- en: '[PRE1]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This policy has examples of some of the most common features of IAM policies.
    First, we have the `Version` key, which specifies the version of the policy language
    that is being used. The best practice is to use the latest version, which is currently
    `2012-10-17`, and not much thought needs to be given to it beyond that.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个策略包含了IAM策略的一些最常见的特性。首先，我们有`Version`键，它指定了正在使用的策略语言的版本。最佳实践是使用最新版本，目前是`2012-10-17`，除此之外不需要考虑太多。
- en: Next, we have the `Statement` key, which is a list of JSON objects known as
    statements. Statements are the individual declarations of permissions and the
    settings relating to them. A statement can consist of the `Sid`, `Effect`, `Action`,
    `NotAction`, `Principal`, `Resource`, and `Condition` keys.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有`Statement`键，它是一个称为语句的JSON对象列表。语句是关于权限和与之相关的设置的单独声明。一个语句可以包括`Sid`、`Effect`、`Action`、`NotAction`、`Principal`、`Resource`和`Condition`键。
- en: '`Sid` is an optional field and is a string of your choice that is provided
    to assist in differentiating between the different statements in a policy. It
    doesn''t need to be supplied, but if it is, it basically just makes understanding
    the policy easier for a reader. In the preceding policy, the `MyGeneralEC2Statement`
    Sid is meant to convey that the statement is a general statement for the EC2 service.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`Sid`是一个可选字段，是您选择的字符串，用于帮助区分策略中不同的语句。它不需要被提供，但如果提供了，它基本上只是为了让读者更容易理解策略。在前面的策略中，`MyGeneralEC2Statement`
    Sid旨在表明该语句是EC2服务的一般语句。'
- en: An `Effect` key is a required field that can be set to either `Allow` or `Deny`,
    and it declares whether the listed AWS permissions (under `Action` or `NotAction`)
    are explicitly allowed or explicitly denied. All of the statements in the preceding
    example policy explicitly allow the associated permissions.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`Effect`键是一个必需的字段，可以设置为`Allow`或`Deny`，它声明了列出的AWS权限（在`Action`或`NotAction`下）是显式允许还是显式拒绝的。在前面示例策略中的所有语句都明确允许相关权限。'
- en: One key of either `Action` or `NotAction` is required, and it contains a set
    of AWS permissions. Almost every time, you will see `Action` being used instead
    of `NotAction`. The first statement in the previous example policy explicitly
    allows the `ec2:*` action, which uses the IAM policy wildcard character (`*`).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`Action`或`NotAction`中的一个键是必需的，它包含一组AWS权限。几乎每次都会看到`Action`被使用而不是`NotAction`。在前面示例策略中的第一个语句明确允许了`ec2:*`操作，使用了IAM策略的通配符字符（`*`）。'
- en: 'Permissions are set up in the format of `[AWS Service]:[Permission]`, so the
    `ec2:*` permission specifies every single permission relating to the AWS EC2 service
    (such as `ec2:RunInstances` and `ec2:CopyImage`). The wildcard character can be
    used in various places in an IAM policy, such as in the following permission:
    `ec2:Describe*`. That would represent every single EC2 permission that begins
    with `Describe` (such as `ec2:DescribeInstances` and `ec2:DescribeImages`). `NotAction`
    is a little bit more complicated, but basically, they are the opposite of `Action`.
    This means that `NotAction ec2:Modify*` would represent every single API call
    for all AWS services, except for EC2 permissions that begin with `Modify` (such
    as `ec2:ModifyVolume` and `ec2:ModifyHosts`).'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 权限以`[AWS服务]:[权限]`的格式设置，因此`ec2:*`权限指定了与AWS EC2服务相关的每个权限（例如`ec2:RunInstances`和`ec2:CopyImage`）。通配符字符可以在IAM策略的各个地方使用，比如在以下权限中：`ec2:Describe*`。这将代表以`Describe`开头的每个EC2权限（例如`ec2:DescribeInstances`和`ec2:DescribeImages`）。`NotAction`稍微复杂一些，但基本上它们是`Action`的相反。这意味着`NotAction
    ec2:Modify*`将代表除了以`Modify`开头的所有EC2权限之外的所有AWS服务的每个API调用（例如`ec2:ModifyVolume`和`ec2:ModifyHosts`）。
- en: The `Principal` key applies to different kinds of IAM policies, outside of what
    we have looked at so far (such as the assume role policy document in the previous
    section). It represents the resource that the statement is meant to apply to,
    but it is automatically implied in permission policies for your users, roles,
    and groups, so we are going to skip over it for now.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`Principal`键适用于不同类型的IAM策略，超出了我们到目前为止所看到的内容（例如在上一节中的假定角色策略文档）。它代表了该语句所适用的资源，但它在用户、角色和组的权限策略中是自动隐含的，所以我们现在将跳过它。'
- en: The `Resource` key is a required field and is a list of what AWS resources the
    specified permissions under the `Action`/`NotAction` section apply to. This value
    is often just specified as the wildcard character, which represents any AWS resource,
    but it is a best practice for most AWS permissions to be locked down to the required
    resources that they must be used on. In the second statement, we have listed in
    our example policy, we have the resource listed as `arn:aws:iam::123456789012:user/TestUser`,
    which is the ARN of a user in the account with the `123456789012` account ID and
    the `TestUser` username. This means that we are only allowed (the effect) to perform
    the `iam:GetUser` API call (the action) on a user in the account with the `123456789012`
    ID and the `TestUser` username (the resource). Note that although the account
    ID is listed in the resource, many API calls cannot be used on a resource belonging
    to a different AWS account from the user/role who is making the call, even if
    a wildcard was present, rather than the account ID.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`Resource`键是一个必需的字段，是指定在`Action`/`NotAction`部分下指定的权限适用于哪些AWS资源的列表。这个值通常只被指定为通配符字符，代表任何AWS资源，但对于大多数AWS权限来说，最佳实践是将其锁定到必须使用的资源。在我们的示例策略中列出的第二个语句中，我们将资源列为`arn:aws:iam::123456789012:user/TestUser`，这是帐户中用户的ARN，帐户ID为`123456789012`，用户名为`TestUser`。这意味着我们只允许（效果）对帐户中具有`123456789012`
    ID和`TestUser`用户名的用户执行`iam:GetUser` API调用（操作）（资源）。请注意，尽管资源中列出了帐户ID，但许多API调用不能用于属于不同AWS帐户的资源，即使通配符存在，而不是帐户ID。'
- en: The `Condition` key is an optional field that indicates under what conditions
    the specifications of the statement apply. In the third statement of our preceding
    example, we have the `Bool` condition (Boolean—in other words, `true`/`false`)
    known as `aws:MultiFactorAuthPresent` set to true. What this means is that for
    this statement to apply (allowing the `sts:AssumeRole` permission on any resource),
    the user/role must be multi-factor authenticated with AWS; otherwise, that permission
    is not allowed. There are many other conditions that can be specified, such as
    requiring a certain source IP address for any API calls, requiring the API call
    to be made within a certain timeframe, and many more (see [https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition_operators.html](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition_operators.html)).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: “条件”键是一个可选字段，指示规则说明适用的条件。在我们之前的示例的第三个语句中，我们有一个名为`aws:MultiFactorAuthPresent`的`Bool`条件（布尔值，即`true`/`false`）设置为true。这意味着对于这个语句适用（允许在任何资源上使用`sts:AssumeRole`权限），用户/角色必须使用AWS进行多因素身份验证；否则，该权限是不允许的。还有许多其他可以指定的条件，比如要求任何API调用需要特定的源IP地址，要求API调用在特定时间范围内进行，以及许多其他条件（参见[https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition_operators.html](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition_operators.html)）。
- en: IAM policy purposes and usage
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IAM策略的目的和用途
- en: As an attacker, it is important to understand how IAM policies work, because
    once you can read them, you can determine exactly what access you have to an environment
    and why certain API calls that you make will fail with an access denied error,
    even when it seems like they should be allowed. It's possible that you are targeting
    a resource that was not specified in the policy, you aren't multi-factor authenticated,
    or it could be for various other reasons.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 作为攻击者，了解IAM策略的工作原理很重要，因为一旦您能够阅读它们，您就可以确定对环境有什么样的访问权限，以及为什么您进行的某些API调用会因为访问被拒绝而失败，即使看起来它们应该被允许。可能是您正在攻击未在策略中指定的资源，您没有进行多因素身份验证，或者可能是其他各种原因。
- en: 'When we are inspecting compromised keys during an attack, what we love to see
    is a statement like the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在攻击中检查受损密钥时，我们喜欢看到以下的语句：
- en: '[PRE2]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This statement gives us administrator-level permissions. Because it allows for
    the use of the `*` permission, and because the `"*"` character is a wildcard,
    it means that any permission pertaining to an AWS service is allowed. The resource
    is also wild carded, so we can run any API call against any resource in our target
    account. There is an AWS-managed IAM policy with these permissions known as the
    `AdministratorAccess` policy. The ARN for this policy is `arn:aws:iam::aws:policy/AdministratorAccess`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语句给了我们管理员级别的权限。因为它允许使用`*`权限，并且因为`"*"`字符是通配符，这意味着任何与AWS服务相关的权限都是允许的。资源也是通配符，所以我们可以对目标账户中的任何资源运行任何API调用。有一个具有这些权限的AWS托管IAM策略，称为`AdministratorAccess`策略。该策略的ARN是`arn:aws:iam::aws:policy/AdministratorAccess`。
- en: To manage a user's permissions while testing, you can attach an IAM policy to
    your user, role, or group, to provide or deny them the permissions setup in the
    policy. So far, the policy type that we have looked at can be reused and attached
    to multiple different kinds of resources. For example, the same IAM policy could
    be attached to a user, group, and/or role, all at the same time.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试时管理用户的权限，您可以将IAM策略附加到您的用户、角色或组，以提供或拒绝策略中设置的权限。到目前为止，我们已经看到的策略类型可以被重用并附加到多种不同类型的资源上。例如，同一个IAM策略可以同时附加到用户、组和/或角色上。
- en: Inline policies also exist, and rather than being an independent resource that
    is then attached to users, roles, or groups, like managed policies, they are created
    directly on a user, role, or group. Inline policies cannot be reused like managed
    policies can, and for that reason, a security best practice is to try to avoid
    using inline policies. As an attacker, we can use them for a few different malicious
    reasons, but because they only apply to a single resource, it is a little stealthier
    when creating one during an attack. They work the same as managed policies but
    require a different set of permissions to interact with. Sometimes, you may find
    that a compromised user/role may have access to work with inline policies but
    not managed policies, or the other way around.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 还存在内联策略，与托管策略不同，内联策略不是独立资源，而是直接创建在用户、角色或组上。内联策略不能像托管策略那样被重用，因此，安全最佳实践是尽量避免使用内联策略。作为攻击者，我们可以出于几种不同的恶意原因使用它们，但因为它们只适用于单个资源，所以在攻击中创建一个内联策略时更加隐蔽。它们的工作方式与托管策略相同，但需要一组不同的权限来进行交互。有时，您可能会发现受损的用户/角色可能具有使用内联策略但没有使用托管策略的权限，或者反之。
- en: 'The following screenshot is from the AWS web console, which shows an IAM user
    that I have set up that has both a managed policy (AmazonEC2FullAccess) and an
    Inline policy (TestPolicy) attached:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图来自AWS Web控制台，显示了我设置的一个IAM用户，该用户既有一个托管策略（AmazonEC2FullAccess），又有一个内联策略（TestPolicy）附加：
- en: '![](img/fe977450-8419-43ae-a3ce-7e30c88481bc.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fe977450-8419-43ae-a3ce-7e30c88481bc.png)'
- en: An AWS managed policy and an inline policy attached to an IAM user
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: AWS托管策略和附加到IAM用户的内联策略
- en: Using IAM access keys
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用IAM访问密钥
- en: 'Now that we have created a user and access keys and understand how IAM policies
    work, it is time to put them to work to make some AWS API calls:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个用户和访问密钥，并了解了IAM策略的工作原理，是时候让它们发挥作用，进行一些AWS API调用了：
- en: 'First, let''s get the AWS **command-line interface** (**CLI**) installed. The
    easiest way to do so (if you have Python and `pip` installed on your computer)
    is to run the following `pip` command:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们安装AWS **命令行界面**（**CLI**）。最简单的方法（如果您的计算机上已安装Python和`pip`）是运行以下`pip`命令：
- en: '[PRE3]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can then check to see if the installation was successful by running the
    following command:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您可以通过运行以下命令来检查安装是否成功：
- en: '[PRE4]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For more specific instructions for your operating system, visit: [https://docs.aws.amazon.com/cli/latest/userguide/installing.html](https://docs.aws.amazon.com/cli/latest/userguide/installing.html).'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 有关您操作系统的更具体说明，请访问：[https://docs.aws.amazon.com/cli/latest/userguide/installing.html](https://docs.aws.amazon.com/cli/latest/userguide/installing.html)。
- en: 'To add our user credentials to the AWS CLI so that we can make API calls, we
    can run the following command that stores our credentials under the `Test` profile
    (note that profiles allow you to manage multiple different sets of credentials
    from the command line):'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将用户凭据添加到AWS CLI中，以便我们可以进行API调用，我们可以运行以下命令，将我们的凭据存储在“Test”配置文件下（请注意，配置文件允许您从命令行管理多组不同的凭据）：
- en: '[PRE5]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You will be prompted for a few different values, including your access key
    ID and secret key, which we were presented with after we created our `Test` user
    earlier on. Then, you''ll be asked for the default region name, and in our example,
    we will choose the `us-west-2` (Oregon) region. Lastly, you will be asked for
    the default output format. We will choose `json` as our default format, but there
    are other available values, such as `table`. The following screenshot shows us
    setting up credentials for the `Test` profile in our newly installed AWS CLI:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将被提示输入一些不同的值，包括您的访问密钥ID和秘密密钥，这是我们在之前创建我们的“Test”用户后呈现的。然后，您将被要求输入默认区域名称，在我们的示例中，我们将选择“us-west-2”（俄勒冈）区域。最后，您将被要求输入默认输出格式。我们将选择`json`作为我们的默认格式，但还有其他可用的值，如`table`。以下截图显示了我们在新安装的AWS
    CLI中为“Test”配置文件设置凭据：
- en: '![](img/a505a9b8-629b-48db-8212-7b50c0138d7a.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a505a9b8-629b-48db-8212-7b50c0138d7a.png)'
- en: Creating the Test profile with our newly created credentials
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们新创建的凭据创建Test配置文件
- en: 'Our new profile will now be stored in the AWS CLI credentials file, which is
    in the following file: `~/.aws/credentials`.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新配置文件现在将存储在AWS CLI凭据文件中，该文件位于以下文件中：`~/.aws/credentials`。
- en: To update the credentials/settings for that profile, you can run that same command
    again, and to add in new sets of credentials as you compromise them, you can just
    change the name of the profile from `Test` to whatever makes sense for the keys
    you are adding. Now that we have the AWS CLI installed and our `Test` profile
    set up, it is simple to begin using our credentials. One thing to keep in mind
    is that because we are using AWS CLI profiles, you will need to remember to include
    the `--profile Test` argument in all your AWS CLI commands, so that the correct
    credentials are used to make the API call.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新该配置文件的凭据/设置，您可以再次运行相同的命令，并在您获取新的凭据时，只需将配置文件的名称从“Test”更改为适合您添加的密钥的名称。现在我们已经安装了AWS
    CLI并设置了我们的“Test”配置文件，开始使用我们的凭据非常简单。需要记住的一件事是，因为我们使用AWS CLI配置文件，您需要记住在所有AWS CLI命令中包含“--profile
    Test”参数，以便使用正确的凭据进行API调用。
- en: 'A very useful command to start out with is the `GetCallerIdentity` API provided
    by the **Security Token Service** (**STS**) ([https://docs.aws.amazon.com/STS/latest/APIReference/API_GetCallerIdentity.html](https://docs.aws.amazon.com/STS/latest/APIReference/API_GetCallerIdentity.html)).
    This API call is provided to every single AWS user and role, and it cannot be
    denied through IAM policies. This allows us to use this API as a method of enumerating
    some common account information about our keys. Go ahead and run the following
    command:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个非常有用的命令是由**安全令牌服务**（**STS**）提供的`GetCallerIdentity` API（[https://docs.aws.amazon.com/STS/latest/APIReference/API_GetCallerIdentity.html](https://docs.aws.amazon.com/STS/latest/APIReference/API_GetCallerIdentity.html)）。这个API调用提供给每个AWS用户和角色，不能通过IAM策略拒绝。这允许我们使用此API来枚举有关我们密钥的一些常见账户信息的方法。继续运行以下命令：
- en: '[PRE6]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You should see output like the following screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下截图的输出：
- en: '![](img/f53cde88-ba2f-4da3-bafe-cf54e3ff9e0a.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f53cde88-ba2f-4da3-bafe-cf54e3ff9e0a.png)'
- en: Running the sts:GetCallerIdentity command from our Test profile
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们的Test配置文件运行sts:GetCallerIdentity命令
- en: The output includes a user ID, account ID, and an ARN of the current user. The
    user ID is how your user is referenced on the backend of the APIs, and in general,
    it will not be required by us while making API calls. The account ID is the ID
    of the account that this user belongs to.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 输出包括当前用户的用户ID、账户ID和ARN。用户ID是您在API后端引用用户的方式，通常在我们进行API调用时不需要。账户ID是此用户所属账户的ID。
- en: In situations where you have an account ID, there are ways to enumerate what
    users and roles exist in the account without creating logs in the target account,
    but this attack is generally not very helpful in a post-exploitation scenario
    and is more helpful for something like social engineering. The **Amazon Resource
    Name** (**ARN**) of the current user includes the account ID and the user name.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在您有账户ID的情况下，有方法可以枚举账户中存在的用户和角色，而不会在目标账户中创建日志，但这种攻击通常在后期利用场景中并不是非常有用，更有助于社会工程。当前用户的**Amazon资源名称**（**ARN**）包括账户ID和用户名。
- en: 'All other API calls that we make with the AWS CLI will be run in a similar
    fashion, and most AWS services are supported in the AWS CLI. A small trick to
    list out services you can target and how to reference them is to run the following
    command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用AWS CLI进行的所有其他API调用都将以类似的方式运行，并且大多数AWS服务都受到AWS CLI的支持。列出您可以定位和引用的服务以及如何引用它们的一个小技巧是运行以下命令：
- en: '[PRE7]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Basically, this command tries to target the `a` service, but because that is
    not a real service, the AWS CLI will print out all the available services, as
    you can see in the following screenshot:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，这个命令尝试定位`a`服务，但因为那不是一个真实的服务，AWS CLI将打印出所有可用的服务，如下截图所示：
- en: '![](img/fbcab712-8da7-4653-9e81-fe05089d573a.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fbcab712-8da7-4653-9e81-fe05089d573a.png)'
- en: Running an AWS CLI command against an invalid service to list available services
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 运行AWS CLI命令针对无效服务列出可用服务
- en: 'This same trick can be used to list what APIs are available for each service.
    Let''s suppose that we know we want to target the EC2 service, but we don''t know
    the name of the command we want to run. We can run the following command:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这个技巧也可以用来列出每个服务的可用API。假设我们知道我们想要针对EC2服务，但我们不知道我们想要运行的命令的名称。我们可以运行以下命令：
- en: '[PRE8]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This will try to run the `a` EC2 API call, which doesn''t exist, so the AWS
    CLI will print out all valid API calls that you can choose from, as you can see
    in the following screenshot:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这将尝试运行`a` EC2 API调用，但这个调用不存在，所以AWS CLI将打印出您可以选择的所有有效API调用，就像您在以下截图中看到的那样：
- en: '![](img/fb4bd6a5-0f0c-41bf-b048-82ee66473d16.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb4bd6a5-0f0c-41bf-b048-82ee66473d16.png)'
- en: Running an invalid AWS CLI command to list what commands are supported for our
    target service (EC2)
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 运行无效的AWS CLI命令以列出我们目标服务（EC2）支持的命令
- en: 'For more information on an AWS service or API call, such as a description,
    limitations, and the supported arguments, we can use the `help` command. For an
    AWS service, you can use the following command:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 有关AWS服务或API调用的更多信息，例如描述，限制和支持的参数，我们可以使用`help`命令。对于AWS服务，您可以使用以下命令：
- en: '[PRE9]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And for a specific API call, you can use the following command:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 对于特定的API调用，您可以使用以下命令：
- en: '[PRE10]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To finish off this section, let''s utilize the AmazonEC2FullAccess policy that
    we attached to our user earlier on:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成本节，让我们使用之前附加到我们用户的AmazonEC2FullAccess策略：
- en: 'If we want to list all the instances in the default region (we chose `us-west-2`
    earlier), we can run the following command:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们想要列出默认区域（我们之前选择了`us-west-2`）中的所有实例，我们可以运行以下命令：
- en: '[PRE11]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you don''t have any EC2 instances running in your account, you will likely
    see output like what is shown in the following screenshot:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的帐户中没有运行任何EC2实例，您可能会看到类似以下截图中显示的输出：
- en: '![](img/ececbc77-236d-4d6c-b1bf-d59b798eeab0.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ececbc77-236d-4d6c-b1bf-d59b798eeab0.png)'
- en: The results of trying to describe EC2 instances when the target region doesn't
    have any
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试描述目标区域没有任何EC2实例的结果
- en: 'Without specifying a region, that will automatically target the `us-west-2`
    region, because we input that as our default when we set up our credentials. This
    can be done manually per API call by using the `--region` argument, like in the
    following command:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有指定区域，那么将自动针对`us-west-2`区域进行目标，因为我们在设置凭据时将其作为默认输入。这可以通过使用`--region`参数手动每个API调用来完成，就像以下命令中那样：
- en: '[PRE12]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Our test account has an EC2 instance running in `us-east-1`, so the output
    will be different this time. It will look like the following screenshot:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测试帐户在`us-east-1`中运行了一个EC2实例，所以这次输出将会有所不同。它将看起来像以下截图：
- en: '![](img/284bc53f-a16c-475a-823c-ccb05492d8ba.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/284bc53f-a16c-475a-823c-ccb05492d8ba.png)'
- en: Part of the output returned when describing an EC2 instance in the `us-east-1`
    region
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在`us-east-1`区域描述EC2实例时返回的部分输出
- en: The data will be returned in a JSON format, because that is what we specified
    as our default when setting up our credentials. It will include lots of information
    relevant to the EC2 instances that it found in the region and the account you
    targeted, such as the instance ID, the size of the instance, what image was used
    to launch the instance, the networking information, and much more.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 数据将以JSON格式返回，因为这是我们在设置凭据时指定的默认格式。它将包括许多与在区域和目标帐户中找到的EC2实例相关的信息，例如实例ID，实例大小，用于启动实例的映像，网络信息等等。
- en: Various parts of this information can be gathered and reused in subsequent requests.
    An example of this would be noting what EC2 security groups are attached to each
    instance. You are provided with the name of the security group and the ID, which
    could then be used in a request that tried to describe the firewall rules that
    are applied to those groups.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信息的各个部分可以被收集和在后续请求中重复使用。其中一个例子是注意到每个实例附加了哪些EC2安全组。您将获得安全组的名称和ID，然后可以在尝试描述应用于这些组的防火墙规则的请求中使用它们。
- en: 'In the results of our `ec2:DescribeInstances` call, we can see that the `sg-0fc793688cb3d6050`
    security group is attached to our instance. We can pull information about this
    security group by feeding that ID into the `ec2:DescribeSecurityGroups` API call,
    like in the following command:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`ec2:DescribeInstances`调用结果中，我们可以看到`sg-0fc793688cb3d6050`安全组附加到我们的实例。我们可以通过将该ID输入`ec2:DescribeSecurityGroups`
    API调用来获取有关此安全组的信息，就像以下命令中那样：
- en: '[PRE13]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, we are presented with the inbound and outbound firewall rules that are
    applied to the instance that we described previously. The following screenshot
    shows the command and some of the inbound traffic rules applied to our instance:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们展示了应用于我们之前描述的实例的入站和出站防火墙规则。以下截图显示了命令和一些应用于我们实例的入站流量规则：
- en: '![](img/e0b54b40-0acb-4cac-ae8c-ef070319860d.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e0b54b40-0acb-4cac-ae8c-ef070319860d.png)'
- en: Command and some of the inbound traffic rules
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 命令和一些入站流量规则
- en: We can see that under the `IpPermissions` key, inbound access to port 22 from
    any IP address (`0.0.0.0/0`) is allowed. Not shown in the screenshot is the `IpPermissionsEgress`
    key that specifies the rules for outbound traffic from the EC2 instance.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，在`IpPermissions`键下，允许从任何IP地址（`0.0.0.0/0`）对端口22的入站访问。在截图中未显示的是`IpPermissionsEgress`键，该键指定了从EC2实例发出的出站流量的规则。
- en: Signing AWS API requests manually
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动签署AWS API请求
- en: Most AWS API calls require that certain data in them be signed before sending
    them to the AWS servers. This is done for a few different reasons, such as allowing
    the server to verify the identity of the API caller, to protect data from modification
    while it is in transit to the AWS servers, and to prevent replay attacks, where
    an attacker intercepts your request somehow and runs it again themselves. By default,
    a signed request is valid for five minutes, so technically, replay attacks are
    possible if the request is intercepted and re-sent prior to that five minute window
    closing. The AWS CLI and AWS SDKs (such as the `boto3` Python library at [https://boto3.amazonaws.com/v1/documentation/api/latest/index.html](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html))
    automatically handle all request signing for you, so you don't need to think about
    it.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数AWS API调用在发送到AWS服务器之前都需要对其中的某些数据进行签名。这是出于几个不同的原因，比如允许服务器验证API调用者的身份，保护数据在传输到AWS服务器时免受修改，并防止重放攻击，即攻击者拦截您的请求并自行运行它。默认情况下，签名请求有效期为五分钟，因此在这五分钟窗口关闭之前，如果请求被拦截并重新发送，重放攻击是可能的。AWS
    CLI和AWS SDK（例如`boto3` Python库）会自动处理所有请求签名，因此您无需考虑这些问题。
- en: There are a couple of cases where you may need to manually sign API requests,
    though, so this section will give a brief overview of how you can do that. The
    only real cases where you will need to do something like this will be if you are
    using a programming language that does not have an AWS SDK or if you want full
    control of the request that is being sent to the AWS servers. There are two versions
    of signatures that are supported (v2 and v4), but for our use case, we will almost
    always use v4.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一些情况下您可能需要手动签署API请求，因此本节将简要概述如何进行操作。您需要这样做的唯一真正情况是，如果您使用的编程语言没有AWS SDK，或者您希望完全控制发送到AWS服务器的请求。支持两个版本的签名（v2和v4），但对于我们的用例，我们几乎总是使用v4。
- en: 'For more information on signing requests and the specifics, visit this link
    to the AWS documentation: [https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html](https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html).'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 有关签署请求和具体信息，请访问AWS文档的以下链接：[https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html](https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html)。
- en: 'Basically, the process of manually signing an AWS API request with signature
    v4 consists of four separate steps:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，使用签名v4手动签署AWS API请求的过程包括四个独立的步骤：
- en: Creating a canonical request ([https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html](https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html))
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建规范请求
- en: Creating a string to sign ([https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html](https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html))
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建要签名的字符串
- en: Calculating the signature of that string ([https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html](https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html))
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算该字符串的签名
- en: Adding that signature to your HTTP request ([https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html](https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html))
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将该签名添加到您的HTTP请求
- en: The AWS documentation has some great examples of how to go through this process.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: AWS文档中有一些很好的示例，说明如何进行这个过程。
- en: 'The following link has example Python code that shows the entire process and
    explains the steps along the way: [https://docs.aws.amazon.com/general/latest/gr/sigv4-signed-request-examples.html](https://docs.aws.amazon.com/general/latest/gr/sigv4-signed-request-examples.html).'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接包含示例Python代码，展示了整个过程并解释了每个步骤：[https://docs.aws.amazon.com/general/latest/gr/sigv4-signed-request-examples.html](https://docs.aws.amazon.com/general/latest/gr/sigv4-signed-request-examples.html)。
- en: Summary
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered some of the basics of the IAM service, such as IAM
    users, roles, and groups. We also looked at using IAM policies to restrict permissions
    within an environment, as well as IAM user access keys and the AWS CLI. Information
    on manually signing AWS HTTP requests was presented, also, for the rare occasion
    that you find it necessary.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了IAM服务的一些基础知识，如IAM用户、角色和组。我们还研究了如何使用IAM策略来限制环境中的权限，以及IAM用户访问密钥和AWS
    CLI。此外，还介绍了手动签署AWS HTTP请求的信息，以备您偶尔需要时使用。
- en: These foundational topics will reappear again and again throughout this book,
    so it is important to get a strong grasp of the AWS IAM service. There are more
    features, intricacies, and details of the IAM service that we didn't cover in
    this chapter, but some of the more important ones will be discussed separately
    in other chapters of the book. The main reason for the content of this chapter
    is to provide a base of knowledge as you dive into the more advanced topics and
    services of AWS later on.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这些基础主题将在本书中不断出现，因此重要的是要对AWS IAM服务有一个牢固的掌握。本章中我们没有涵盖IAM服务的更多功能、复杂性和细节，但其中一些更重要的内容将在本书的其他章节中单独讨论。本章内容的主要目的是为您在以后深入学习AWS的更高级主题和服务时提供知识基础。
- en: In the next chapter, we will look at using the AWS `boto3` Python library with
    stolen access keys to enumerate our own permissions, as well as to escalate them
    all the way to an administrator! We will also cover Pacu, an AWS exploitation
    toolkit, which has already automated a lot of these attack processes and makes
    it easier to automate them yourself. Permission enumeration and privilege escalation
    are integral to AWS pentests, so get ready!
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将研究如何使用AWS的`boto3` Python库和窃取的访问密钥来枚举我们自己的权限，以及将它们提升到管理员级别！我们还将介绍Pacu，这是一个AWS利用工具包，它已经自动化了许多这些攻击过程，并使您更容易自动化它们。权限枚举和特权提升对于AWS渗透测试至关重要，所以做好准备！
