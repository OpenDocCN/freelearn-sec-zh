- en: Chapter 2. Mobile Malware-Based Attacks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 章 移动恶意软件攻击
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Analyzing an Android malware sample
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析 Android 恶意软件样本
- en: Using Androguard for malware analysis
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Androguard 进行恶意软件分析
- en: Writing custom malware for Android from scratch
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从头开始编写 Android 自定义恶意软件
- en: Permission model bypassing in Android
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android 权限模型绕过
- en: Reverse engineering iOS applications
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反向工程 iOS 应用程序
- en: Analyzing malware in the iOS environment
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 iOS 环境中分析恶意软件
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: We probably know a lot about the viruses that attack our computers, but what
    about the viruses aimed at our mobile devices?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能对攻击我们计算机的病毒了解很多，但是针对我们移动设备的病毒呢？
- en: You may be surprised to learn that there is malicious software aimed at mobile
    devices, otherwise known as mobile malware. Malware is on the rise, infecting
    all the major smartphone platforms.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你会惊讶地发现，针对移动设备的恶意软件，也就是移动恶意软件，正在增长，感染了所有主要的智能手机平台。
- en: In this chapter, we learn about malware, how they affect our smartphones, how
    to analyze them, and how to create samples of our own.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解恶意软件，它们如何影响我们的智能手机，如何分析它们以及如何创建我们自己的样本。
- en: Analyzing an Android malware sample
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析 Android 恶意软件样本
- en: Let's begin by analyzing a simple Android-based malware application, called
    **Android.Dogowar**. This malware is a repackaged version of the Android gaming
    application *Dog Wars*, which was downloadable from a third-party app store and
    had to be manually installed on an Android device during analysis.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从分析一个简单的基于 Android 的恶意软件应用开始，名为**Android.Dogowar**。这个恶意软件是 Android 游戏应用*Dog
    Wars*的重新打包版本，可以从第三方应用商店下载，并且在分析过程中必须手动安装到 Android 设备上。
- en: Dog Wars was a game where users could breed, train, and fight with *virtual
    dogs*. This game caused an outcry from animal rights protestors through public
    outcry and write-in campaigns. After these attempts seemed to have little effect
    on convincing the developers to discontinue the app, a group of protestors targeted
    end users to get their message across.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Dog Wars 是一个用户可以培育、训练和与*虚拟狗*战斗的游戏。这个游戏引起了动物权利抗议者的强烈抗议，通过公开抗议和写信活动。在这些尝试似乎对说服开发者停止应用没有太大效果后，一群抗议者针对最终用户传达他们的信息。
- en: The original Dog Wars app (Beta 0.981) was repackaged as malware and placed
    on several third-party app stores for download.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 原始的 Dog Wars 应用（Beta 0.981）被重新打包为恶意软件，并放在几个第三方应用商店供下载。
- en: '![Analyzing an Android malware sample](graphics/image_02_001.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![分析 Android 恶意软件样本](graphics/image_02_001.jpg)'
- en: During installation, the malware app requested that users grant SMS permission,
    among others.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装过程中，恶意软件应用要求用户授予短信权限等。
- en: Upon installation, the display icon of the malware looked almost identical to
    that of the legitimate app, except that the malware app displayed `PETA` rather
    than `BETA` in the app icon.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，恶意软件的显示图标几乎与合法应用的图标相同，唯一的区别是恶意软件应用在应用图标中显示`PETA`而不是`BETA`。
- en: '![Analyzing an Android malware sample](graphics/image_02_002.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![分析 Android 恶意软件样本](graphics/image_02_002.jpg)'
- en: 'Once opened, the app sent out a text message to all people listed in the contacts
    of the compromised device with the following message: `I take pleasure in hurting
    small animals, just thought you should know that.`'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 打开后，该应用向受感染设备联系人列表中的所有人发送了以下消息的短信：`我喜欢伤害小动物，只是想让你知道。`
- en: Getting ready
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: As stated in the previous chapter, Android Studio/standalone SDK tools and JDK
    v7 or newer should be installed and functional.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一章所述，Android Studio/独立 SDK 工具和 JDK v7 或更新版本应该已安装并可用。
- en: 'We will primarily be using three tools for our analysis:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们主要将使用三个工具进行分析：
- en: '**Apktool**: This tool will be used to decompile the APK file to obtain the
    decompiled code. It can be obtained from http://ibotpeaches.github.io/Apktool/'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apktool**：这个工具将用于反编译 APK 文件以获取反编译代码。可以从 http://ibotpeaches.github.io/Apktool/
    获取这个工具。'
- en: '**Dex2Jar**: This utility converts Dalvik executable (`.dex`) files to JAR
    files. This tool can be downloaded from http://sourceforge.net/projects/dex2jar/'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Dex2Jar**：这个工具将 Dalvik 可执行（`.dex`）文件转换为 JAR 文件。可以从 http://sourceforge.net/projects/dex2jar/
    下载这个工具。'
- en: '**JD-GUI**: This utility reads the JAR files and displays the inherent code.
    Visit http://jd.benow.ca/ to download JD-GUI'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JD-GUI**：这个工具读取 JAR 文件并显示其中的代码。访问 http://jd.benow.ca/ 下载 JD-GUI。'
- en: How to do it...
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Let's begin our analysis by first analyzing the malware APK. We start by disassembling
    the malware APK.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从分析恶意 APK 开始我们的分析。我们首先通过反汇编恶意 APK 来开始。
- en: 'Use the following command to convert the APK into a JAR:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令将 APK 转换为 JAR 文件：
- en: '[PRE0]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is shown in the following screenshot:'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下截图所示：
- en: '![How to do it...](graphics/image_02_003.jpg)'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](graphics/image_02_003.jpg)'
- en: We have successfully converted our APK into a JAR for code analysis. Now we
    need to read the code to identify the malicious elements of it. We will be using
    JD-GUI for this.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们已经成功地将 APK 转换为 JAR 文件进行代码分析。现在，我们需要阅读代码，识别其中的恶意元素。我们将使用 JD-GUI 来完成这个任务。
- en: Navigate to the directory where JD-GUI is installed and open the application.
    Open the newly created `AndroidDogowar-dex2jar.jar`, and this is what we see:![How
    to do it...](graphics/image_02_004.jpg)
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 JD-GUI 安装目录并打开应用程序。打开新创建的 `AndroidDogowar-dex2jar.jar`，这就是我们看到的内容：![如何操作...](graphics/image_02_004.jpg)
- en: Since the original app is meant to be a gaming application, our analysis would
    start by searching for keywords such as `url`, `http`, `sms`, and so on.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于原始应用程序是一个游戏应用，我们的分析将从搜索诸如 `url`、`http`、`sms` 等关键词开始。
- en: 'On doing a quick search, we find out that the infected class is `Rabies` located
    under the `dogbite` package, as it imports the `android.telephony.SmsManager`
    class:'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在快速搜索后，我们发现感染的类是 `Rabies`，位于 `dogbite` 包下，因为它导入了 `android.telephony.SmsManager`
    类：
- en: '![How to do it...](graphics/image_02_005.jpg)'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](graphics/image_02_005.jpg)'
- en: On further analyzing the class file, we see the `onStart` function that calls
    `sendTextMessage` to send a text message titled `I take pleasure in hurting small
    animals, just thought you should know that`.![How to do it...](graphics/image_02_006.jpg)
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过进一步分析类文件，我们可以看到 `onStart` 函数调用了 `sendTextMessage` 发送一条标题为 `I take pleasure
    in hurting small animals, just thought you should know that` 的短信。![如何操作...](graphics/image_02_006.jpg)
- en: How it works...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The malware code was injected as a package called `Dogbite`. This package defined
    a service called `Rabies`, which is initiated in the background of the compromised
    Android device on startup. This service carried out the core functionality. Once
    the service was initiated, it sent out the text message to all the people listed
    in the **Contacts** list on your phone.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意代码被注入为一个名为 `Dogbite` 的包。该包定义了一个名为 `Rabies` 的服务，该服务在受损 Android 设备启动时在后台启动，并执行核心功能。一旦服务启动，它会向你手机上联系人列表中的所有人发送短信。
- en: This app also sent a text message to `73882` with the word `text`, which apparently
    signed up users of compromised devices to an alert service operated by **People
    for the Ethical Treatment of Animals** (**PETA**).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用还向 `73882` 发送了一条包含词语 `text` 的短信，显然这将受损设备的用户注册为 **PETA**（**美国伦理对待动物协会**）运营的警报服务用户。
- en: 'Here''s how it works:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是它的工作原理：
- en: 'The following code moves a cursor over every contact:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码遍历每个联系人：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The subsequent code is used to load the contact list into the `str` string:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 随后的代码用于将联系人列表加载到 `str` 字符串中：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then it uses the contacts content provider to return loaded phone numbers:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它使用联系人内容提供者来返回加载的电话号码：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following code is used to send text message to all contacts in the list:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码用于向列表中的所有联系人发送短信：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, this snippet subscribes the user to PETA text alert services:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这段代码将用户订阅到 PETA 的短信提醒服务：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There's more...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: If you are well-versed in **smali**, then you can use `apktool` to decompile
    the app and analyze smali files for patterns.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你精通 **smali**，你可以使用 `apktool` 反编译应用程序并分析 smali 文件中的模式。
- en: 'To decompile using `apktool`, use the following command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `apktool` 进行反编译，请使用以下命令：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This command will create a directory with exactly the same name as that of the
    APK, where we can find the decompiled files.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将创建一个与 APK 名称完全相同的目录，在该目录下我们可以找到反编译后的文件。
- en: Using Androguard for malware analysis
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Androguard 进行恶意软件分析
- en: Androguard is a Python-based tool that is used for the analysis of an Android
    application. Its functionalities make malware analysis a less cumbersome task.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Androguard 是一个基于 Python 的工具，用于分析 Android 应用程序。它的功能使恶意软件分析变得更加轻松。
- en: In this recipe, we will be introduced to Androguard and its various features.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将介绍 Androguard 及其各种功能。
- en: Getting ready
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure Python is installed on your machine. Python 2.7.10 for Windows can
    be downloaded from [https://www.python.org/ftp/python/2.7.10/python-2.7.10.msi](https://www.python.org/ftp/python/2.7.10/python-2.7.10.msi)
    . All releases of Python can be downloaded from [https://www.python.org/downloads/](https://www.python.org/downloads/)
    .
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的机器上已安装 Python。可以从[https://www.python.org/ftp/python/2.7.10/python-2.7.10.msi](https://www.python.org/ftp/python/2.7.10/python-2.7.10.msi)
    下载适用于 Windows 的 Python 2.7.10。所有 Python 版本都可以从[https://www.python.org/downloads/](https://www.python.org/downloads/)
    下载。
- en: Download Androguard from GitHub via [https://github.com/androguard/androguard](https://github.com/androguard/androguard)
    and place it in the directory of your choice.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 从 GitHub 下载 Androguard，网址为[https://github.com/androguard/androguard](https://github.com/androguard/androguard)，并将其放在你选择的目录中。
- en: 'Navigate to the Androguard directory and run the following command from the
    command prompt or terminal:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 转到 Androguard 目录，并从命令提示符或终端运行以下命令：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We will be using the NickiSpy malware, repackaged in a simple app, as our sample.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用经过重新打包的 NickiSpy 恶意软件作为我们的示例。
- en: NickiSpy gained quite a bit of notoriety around 2011\. It recorded phone calls
    to the device's SD card and sent the device's IMEI to a phone number in China.
    Additionally, it also recorded the device's GPS coordinates and made connections
    to a remote server in China.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: NickiSpy 在 2011 年左右获得了相当大的声誉。它将通话记录保存到设备的 SD 卡，并将设备的 IMEI 发送到中国的一个电话号码。此外，它还记录了设备的
    GPS 坐标，并与位于中国的远程服务器建立连接。
- en: How to do it...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Now that we have installed Androguard, let''s begin analyzing our Malware:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了 Androguard，让我们开始分析我们的恶意软件：
- en: 'Run the following command in the terminal:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中运行以下命令：
- en: '[PRE8]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This command starts its own input prompt. Now let's define the path of the APK
    and the type of decompiler we want to use to decompile the app.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该命令启动了它自己的输入提示符。现在让我们定义 APK 的路径以及我们希望使用的反编译器类型。
- en: 'Input this command into the prompt and replace `path_to_apk` with the path
    of the APK we want to analyze:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入此命令到提示符中，并将 `path_to_apk` 替换为我们想要分析的 APK 的路径：
- en: '[PRE9]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This is shown in the following screenshot:'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是在下面截图中显示的内容：
- en: '![How to do it...](graphics/image_02_007.jpg)'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](graphics/image_02_007.jpg)'
- en: 'Use the following command in the input prompt to get all the permissions used
    by the app:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在输入提示符中使用以下命令，获取应用程序使用的所有权限：
- en: '[PRE10]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is the output of the preceding command:'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是前面命令的输出：
- en: '![How to do it...](graphics/image_02_008.jpg)'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](graphics/image_02_008.jpg)'
- en: Looking at the permissions, it can be clearly seen that the app is requesting
    to read/write SMS and contacts, access GPS, record audio, access caller, and so
    on, enough to raise many alarming flags.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从权限来看，可以明显看出该应用程序请求读取/写入短信和联系人、访问 GPS、录音、访问来电等，这足以引起许多警报。
- en: 'Let''s go further and analyze the class names. Run the following command in
    the input prompt:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们进一步分析类名。请在输入提示符中运行以下命令：
- en: '[PRE11]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Take a look at the following output:'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查看以下输出：
- en: '![How to do it...](graphics/image_02_009.jpg)'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](graphics/image_02_009.jpg)'
- en: We further reinforce our initial impression when we look at classes such as
    `CallListener`, `SMSListener`, `RecorderService`, `GPSService`, and so on. We
    now have enough reason to believe that the target app is infected.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们查看 `CallListener`、`SMSListener`、`RecorderService`、`GPSService` 等类时，我们进一步加强了最初的印象。现在我们有足够的理由相信目标应用程序被感染了。
- en: 'We can go further and list all the strings and methods defined in the app as
    output, via these commands:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以进一步列出应用程序中定义的所有字符串和方法作为输出，使用这些命令：
- en: '[PRE12]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To view all this information at once, use the following command at the command
    prompt:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 若要一次查看所有这些信息，请在命令提示符中使用以下命令：
- en: '[PRE13]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Check the output of the preceding command:'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 检查前面命令的输出：
- en: '![How to do it...](graphics/image_02_010.jpg)'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](graphics/image_02_010.jpg)'
- en: One seemingly tricky task is to find out if an application is actually malware
    or a legitimate application. Androguard gives us an option to compare two Android
    applications, using a utility called **Androdiff**.
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一项看似棘手的任务是找出一个应用程序是否真的是恶意软件，还是一个合法的应用程序。Androguard 提供了一个选项，允许我们比较两个 Android
    应用程序，使用一个名为 **Androdiff** 的工具。
- en: Androdiff is a Python script bundled with Androguard, which is used to extract
    and observe differences between two Android applications.
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Androdiff 是一个与 Androguard 一起捆绑的 Python 脚本，用于提取和观察两个 Android 应用程序之间的差异。
- en: 'Use the following command:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令：
- en: '[PRE14]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Let's run the command against a simple `Hello World` application and malware
    disguised as a `Hello World` application.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们对一个简单的 `Hello World` 应用程序和伪装成 `Hello World` 应用程序的恶意软件运行该命令。
- en: We can now analyze the results by taking a closer look at the output.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们可以通过仔细查看输出结果来分析结果。
- en: 'The following block reveals that there are `3536` identical elements, which
    means the two applications are in fact very similar. There is one similar element,
    which indicates that there are possible enhancements to some code, and finally
    `3` new elements, which indicates additional code is present in one application:'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下块显示了有`3536`个相同的元素，这意味着这两个应用程序实际上非常相似。还有一个相似的元素，表示某些代码可能有改进的空间，最后是`3`个新元素，表示一个应用程序中存在附加代码：
- en: '![How to do it...](graphics/image_02_011.jpg)'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作步骤...](graphics/image_02_011.jpg)'
- en: Scanning further down the output, we see the following:![How to do it...](graphics/image_02_012.jpg)
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扫描输出内容，进一步查看，我们看到以下内容：![操作步骤...](graphics/image_02_012.jpg)
- en: This reveals to us that the new methods `backupSMS` and `generateCSVFileForSMS`
    have been added to the malware application, which in conclusion is the `SMSCopy`
    app.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这向我们展示了新的方法`backupSMS`和`generateCSVFileForSMS`已经添加到恶意软件应用程序中，最终形成了`SMSCopy`应用。
- en: There's more...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: To read about more Android malware and related analysis, a good book to read
    is *Android Malware and Analysis*, *Auerbach Publications* ([https://www.crcpress.com/product/isbn/9781482252194](https://www.crcpress.com/product/isbn/9781482252194)).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要阅读更多关于Android恶意软件和相关分析的书籍，推荐一本好书是*Android恶意软件与分析*，*Auerbach出版公司*（[https://www.crcpress.com/product/isbn/9781482252194](https://www.crcpress.com/product/isbn/9781482252194)）。
- en: Writing custom malware for Android from scratch
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从零开始为Android编写自定义恶意软件
- en: Here we will learn how to create simple malware for the Android platform. We
    will create simple malware that copies all text messages from a user's SMS app
    and stores them on the SD card as a `.csv` file.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将学习如何为Android平台创建简单的恶意软件。我们将创建一个简单的恶意软件，复制用户短信应用中的所有文本消息，并将它们作为`.csv`文件存储在SD卡中。
- en: Getting ready
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正在准备中
- en: Make sure you have followed all the steps for creating an Android application
    from the first chapter.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经按照第一章中的所有步骤创建了一个Android应用程序。
- en: How to do it...
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Once the application is created successfully, you can follow these steps:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序成功创建，你可以按照以下步骤操作：
- en: Open Android Studio and create a new project called `SMSCopy`:![How to do it...](graphics/image_02_013.jpg)
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Android Studio并创建一个名为`SMSCopy`的新项目：![操作步骤...](graphics/image_02_013.jpg)
- en: 'We will use API15: Android 4.0.3 as our target platform. You may choose one
    that is to your liking.'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用API15：Android 4.0.3作为目标平台。你也可以选择其他你喜欢的版本。
- en: Select **Blank Activity** and click on **Finish**. Your project workspace should
    now look like this:![How to do it...](graphics/image_02_014.jpg)
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**空白活动**并点击**完成**。你的项目工作空间现在应该像这样：![操作步骤...](graphics/image_02_014.jpg)
- en: Navigate to, and open the `MainActivity.java` file under `app/java/com.your_package_name/MainActivity`
    in the left-hand window.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧窗口中，导航到并打开`app/java/com.your_package_name/MainActivity`文件。
- en: 'Add the following code just before the last closing brace (at the end of the
    file):'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最后一个闭合括号之前（文件末尾）添加以下代码：
- en: '[PRE15]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, add the following line after the code line `setContentView(R.layout.activity_main);`
    in the `onCreate` method:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`onCreate`方法中的`setContentView(R.layout.activity_main);`代码行后添加以下行：
- en: '[PRE16]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Make sure you have the following `import` statements in your `Mainactivity.java`
    file:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在`Mainactivity.java`文件中有以下`import`语句：
- en: '[PRE17]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Navigate to `app` | `manifests` | `AndroidManifest.xml` and add the following
    lines under the `</application>` tag:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`app` | `manifests` | `AndroidManifest.xml`并在`</application>`标签下添加以下行：
- en: '[PRE18]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now, run the project in the emulator or attached device. You will see an app
    with the name `SMSCopy` on your device.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在模拟器或连接的设备上运行项目。你将看到设备上有一个名为`SMSCopy`的应用程序。
- en: On running the app, we get a page with simple `Hello World` text displayed.
    Let's see if the malware actually worked in the backend.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序后，我们得到一个显示简单`Hello World`文本的页面。让我们看看恶意软件是否在后台实际运行了。
- en: 'On the command prompt, run the following command:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符中，运行以下命令：
- en: '[PRE19]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You should now have a shell prompt. On the prompt, type:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你应该有一个shell提示符。在提示符中输入：
- en: '[PRE20]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We now see a file named `SMS.csv` in the SD card directory of our device. Run
    the following command in the shell:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们看到在设备的SD卡目录中有一个名为`SMS.csv`的文件。在shell中运行以下命令：
- en: '[PRE21]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We can now see that all the text messages have been successfully copied to
    the file and stored on the SD card:'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们可以看到所有的短信已经成功复制到文件中并存储在SD卡上：
- en: '![How to do it...](graphics/image_02_015.jpg)'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作步骤...](graphics/image_02_015.jpg)'
- en: How it works...
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We specify the target file name as `SMS.csv` and create a function called `backupSMS()`,
    in which we access the device''s text messages by internally calling the `content://sms`
    URI. We then create a cursor to query SMS data and define strings for various
    fields: `thread_id`, `address`, `person`, and `date`, as shown in the following
    code:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将目标文件名指定为`SMS.csv`，并创建一个名为`backupSMS()`的函数，在其中我们通过内部调用`content://sms` URI
    访问设备的短信。然后，我们创建一个用于查询短信数据并定义各种字段的游标：`thread_id`、`address`、`person`和`date`，如下所示：
- en: '[PRE22]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, we move our cursor to read all SMS data recursively, and store it in
    defined string arrays:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将光标移动到递归读取所有短信数据，并将其存储在定义的字符串数组中：
- en: '[PRE23]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now that we have all the values segregated in separate arrays, we add them
    to our predefined `smsBuffer` buffer, and pass them to another function, `generateCSVFileForSMS()`:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经将所有值分开存储在单独的数组中，我们将它们添加到我们预定义的`smsBuffer`缓冲区中，并将它们传递给另一个函数`generateCSVFileForSMS()`：
- en: '[PRE24]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Let''s have a look at the `generateCSVFileForSMS()` function:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`generateCSVFileForSMS()`函数：
- en: '[PRE25]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This essentially instructs the Android device to locate the path for external
    storage, append the file name `SMS.csv` to it, and allocate it to the `storage_path`
    variable.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这本质上指示 Android 设备定位外部存储路径，将文件名`SMS.csv`附加到其中，并将其分配给`storage_path`变量。
- en: It then opens a file writer and writes all array values to the generated file.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 然后打开文件写入器，并将所有数组值写入生成的文件。
- en: There's more...
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We can extend our malware's functionality by creating a remote server that receives
    and stores input, and send this file to the remote server from the target Android
    device through GET or POST requests.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过创建一个接收和存储输入的远程服务器来扩展恶意软件的功能，并通过 GET 或 POST 请求从目标 Android 设备将此文件发送到远程服务器。
- en: See also
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Try to play around with contacts, SMS, MMS, and browsing data in the same fashion,
    by exploring `android.content`. For further information, visit [http://developer.android.com/reference/android/content/package-summary.html](http://developer.android.com/reference/android/content/package-summary.html).
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试以相同的方式玩弄联系人、短信、彩信和浏览数据，通过探索`android.content`。欲了解更多信息，请访问[http://developer.android.com/reference/android/content/package-summary.html](http://developer.android.com/reference/android/content/package-summary.html)。
- en: Permission model bypassing in Android
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android 中的权限模型绕过
- en: By now, we know that all Android apps require explicit permissions to execute
    certain functions or process certain data. These permissions are defined in the
    `AndroidManifest.xml` file packaged inside the APK.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们知道所有 Android 应用程序都需要明确的权限来执行某些功能或处理某些数据。这些权限在打包在 APK 内的`AndroidManifest.xml`文件中定义。
- en: 'A typical permission to read a text message would look like this:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 读取文本消息的典型权限看起来像这样：
- en: '[PRE26]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Obviously, a simple application that requires permissions to access GPS location,
    read Contacts, read SMS, and write to external storage would raise suspicions.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，一个简单的应用程序如果需要权限来访问 GPS 位置、读取联系人、读取短信和写入外部存储，会引起怀疑。
- en: Now, if an application were to require NO special permissions, it would be considered
    a benign application, right?
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果一个应用程序不需要任何特殊权限，那它会被认为是一种良性应用程序，对吧？
- en: In this recipe, we learn a simple way to perform malicious activity without
    our application requiring any special permissions.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们学习了一种简单的方法来执行恶意活动，而无需我们的应用程序需要任何特殊权限。
- en: Getting ready
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We only need Android Studio and the SDK installed and running, as explained
    in previous recipes.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要安装和运行 Android Studio 和 SDK，如前面的示例中所解释的那样。
- en: We will need to create a listening web server, for which we will use XAMPP,
    which can be downloaded from [https://www.apachefriends.org/index.html](https://www.apachefriends.org/index.html).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个监听 Web 服务器，我们将使用 XAMPP，可以从[https://www.apachefriends.org/index.html](https://www.apachefriends.org/index.html)下载。
- en: How to do it...
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s make an app that reads a file from an SD card and sends it to a remote
    server, without requiring any special permissions to do so. We begin by creating
    a file called `sensitive.txt` on our SD card:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们制作一个应用程序，从 SD 卡读取文件并将其发送到远程服务器，而无需任何特殊权限。我们首先在 SD 卡上创建一个名为`sensitive.txt`的文件：
- en: 'Issue the following command to access the device shell:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发出以下命令以访问设备 shell：
- en: '[PRE27]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Navigate to the SD card and create `sensitive.txt` with content `Username:Akshay.
    Password:secret123`, by entering the following commands:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 SD 卡并创建带有内容`Username:Akshay. Password:secret123`的`sensitive.txt`，输入以下命令：
- en: '[PRE28]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Verify whether the file has been created:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证文件是否已创建：
- en: '[PRE29]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '![How to do it...](graphics/image_02_016.jpg)'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做...](graphics/image_02_016.jpg)'
- en: 'Now that we have our sensitive file ready, let''s code our app to steal this
    file and upload it to the server. Follow the steps in the previous recipe to make
    a new project and open the basic project window and then perform the following
    steps:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好敏感文件，让我们编写代码来窃取该文件并将其上传到服务器。按照前面的食谱步骤创建一个新项目并打开基本项目窗口，然后执行以下步骤：
- en: We will now add our code to read `sensitive.txt` and upload its data to a remote
    server.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将添加代码来读取`sensitive.txt`并将其数据上传到远程服务器。
- en: Navigate to and open the `MainActivity.java` file under `app` | `java` | `com."your_package_name"`
    | `MainActivity` in the left-hand window.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧窗口中，导航到并打开`MainActivity.java`文件，路径为`app` | `java` | `com."your_package_name"`
    | `MainActivity`。
- en: 'Add the following code just inside the `protected void onCreate(Bundle savedInstanceState)`
    function, under the `setContentView(R.layout.activity_main);` line:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`protected void onCreate(Bundle savedInstanceState)`函数内，`setContentView(R.layout.activity_main);`行下方：
- en: '[PRE30]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: We have used `http://10.0.2.2` as our web server address in our code, as we
    are testing this app in the emulator, and the IP address of the base machine is
    always `10.0.2.2` when we are trying to access it via an emulator. If you are
    using an actual Android device to test this, ensure that the device and your workstation
    are connected and replace the IP address with that of the workstation.
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在代码中使用了`http://10.0.2.2`作为我们的网页服务器地址，因为我们在模拟器中测试此应用程序，并且在尝试通过模拟器访问时，主机的IP地址始终是`10.0.2.2`。如果你使用的是实际的Android设备进行测试，确保设备与工作站连接，并将IP地址替换为工作站的IP地址。
- en: 'Ensure the following imports are present in your file:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保文件中包含以下导入：
- en: '[PRE31]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We have now successfully created our malware with no permissions to read the
    `sensitive.txt` file, ready to upload it to the remote server. Let's now create
    our listening page.
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们现在已经成功创建了一个恶意软件，具有无法读取`sensitive.txt`文件的权限，准备将其上传到远程服务器。现在，让我们创建我们的监听页面。
- en: 'Create a file called `input.php`, and add the following code to it:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`input.php`的文件，并添加以下代码：
- en: '[PRE32]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Save this file in the `htdocs` directory where XAMPP is installed in your machine.
    Also, create a blank file called `output.txt` and save it.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件保存在XAMPP安装目录中的`htdocs`文件夹中。另外，创建一个空白文件`output.txt`并保存。
- en: Open the XAMPP control panel and start the Apache service:![How to do it...](graphics/image_02_017.jpg)
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开XAMPP控制面板并启动Apache服务：![如何操作...](graphics/image_02_017.jpg)
- en: Now that we have our setup ready, let's run our application. After the app is
    run on your target device, open the directory in which XAMPP is installed and
    locate `output.txt`:![How to do it...](graphics/image_02_018.jpg)
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们的设置已经准备好，让我们运行我们的应用程序。在目标设备上运行应用程序后，打开XAMPP安装目录，并找到`output.txt`文件：![如何操作...](graphics/image_02_018.jpg)
- en: How it works...
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The following code creates a file input stream reader to read `sensitive.txt`
    and a buffer to store the content in:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码创建一个文件输入流读取器来读取`sensitive.txt`并创建一个缓冲区来存储内容：
- en: '[PRE33]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We execute the following command on the Android device:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Android设备上执行以下命令：
- en: '[PRE34]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The following code does just that:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码正是实现此功能的代码：
- en: '[PRE35]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The remaining code is used to read the lines of the file and store them in
    the `str` string:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 剩余的代码用于读取文件的每一行，并将其存储在`str`字符串中：
- en: '[PRE36]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Finally, we send the captured data to the server via the GET method:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过GET方法将捕获的数据发送到服务器：
- en: '[PRE37]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: There's more...
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There is more to explore in the area of Android permission bypassing, gaining
    root privileges, and extending permissions. Refer to the link mentioned in the
    *See also* section.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android权限绕过、获取root权限和扩展权限方面还有很多可以探索的内容。请参考*另见*部分中提到的链接。
- en: See also
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '[https://hackinparis.com/data/slides/2012/Georgia-androidpermissions.pdf](https://hackinparis.com/data/slides/2012/Georgia-androidpermissions.pdf)'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://hackinparis.com/data/slides/2012/Georgia-androidpermissions.pdf](https://hackinparis.com/data/slides/2012/Georgia-androidpermissions.pdf)'
- en: Reverse engineering iOS applications
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逆向工程iOS应用程序
- en: In this recipe, we will learn how to perform reverse engineering on the iOS
    platform.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何在iOS平台上进行逆向工程。
- en: Getting ready
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: The target device needs to be jailbroken for a smooth reverse engineering activity.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 目标设备需要越狱才能顺利进行逆向工程活动。
- en: Install **i-Funbox** on your machine from [www.i-funbox.com](http://www.i-funbox.com)
    . i-Funbox is an app management tool for iPhone, iPad, and iPod Touch. We will
    use this tool for device and application analysis.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 从[www.i-funbox.com](http://www.i-funbox.com)安装**i-Funbox**到你的计算机。i-Funbox是一个iPhone、iPad和iPod
    Touch的应用管理工具。我们将使用此工具进行设备和应用分析。
- en: Download the class_dump_z tool from https://code.google.com/p/networkpx/wiki/class_dump_z.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 从 https://code.google.com/p/networkpx/wiki/class_dump_z 下载 class_dump_z 工具。
- en: How to do it...
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作方法...
- en: 'The following steps help you perform reverse engineering on the iOS platform:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤帮助你在 iOS 平台上进行逆向工程：
- en: Connect the jaibroken device to your workstation using a USB cable.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 USB 电缆将越狱设备连接到你的工作站。
- en: Open the i-Funbox application. This is what the interface should look like:![How
    to do it...](graphics/image_02_019.jpg)
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 i-Funbox 应用程序。界面应如下所示：![操作方法...](graphics/image_02_019.jpg)
- en: Let's install a malware app on our device and explore it through i-Funbox.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在设备上安装一个恶意软件应用程序，并通过 i-Funbox 探索它。
- en: Locate the malware in your machine's filesystem.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的计算机文件系统中定位恶意软件。
- en: In the left-hand panel of i-Funbox, click on **Cydia App Install**. A blank
    area appears in the center of the screen:![How to do it...](graphics/image_02_020.jpg)
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 i-Funbox 的左侧面板中，点击**Cydia 应用安装**。屏幕中央出现一个空白区域：![操作方法...](graphics/image_02_020.jpg)
- en: Now, drag and drop the malware into the blank area:![How to do it...](graphics/image_02_021.jpg)
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将恶意软件拖放到空白区域：![操作方法...](graphics/image_02_021.jpg)
- en: To complete the installation, just reboot the device. That's it! The malware
    is installed and ready for analysis.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了完成安装，只需重启设备。就这样！恶意软件已安装并准备好进行分析。
- en: Now unpack the `.deb` file to view the content of the package. The unpacked
    directory contains a file called `data.tar`, which can be further unpacked to
    the `data` directory.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在解压`.deb`文件以查看包的内容。解压后的目录包含一个名为`data.tar`的文件，可以进一步解压到`data`目录。
- en: 'We now explore further, to `/data/bin`, where we find three files:'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们现在进一步探索到`/data/bin`，在这里我们找到了三个文件：
- en: com.xsser.0day.iphone.plist
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: com.xsser.0day.iphone.plist
- en: xsser.0day_t
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: xsser.0day_t
- en: xsser.0day_t.sh
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: xsser.0day_t.sh
- en: In i-Funbox, click on **Raw File System**:![How to do it...](graphics/image_02_022.jpg)
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 i-Funbox 中，点击**原始文件系统**：![操作方法...](graphics/image_02_022.jpg)
- en: Since we know that one of the files is a shell file, let's see if the file has
    been installed as a binary on the device.
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于我们知道其中一个文件是一个 shell 文件，接下来我们检查该文件是否已经作为二进制文件安装到设备上。
- en: Navigate to the `bin` directory. We see that the shell file is, in fact, in
    the bin directory, along with the other files identified earlier as well. Jailbroken
    devices have an SSH server listening by default, with the user as `root` and the
    password as `alpine`.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至`bin`目录。我们看到该 shell 文件实际上位于 bin 目录中，以及之前识别的其他文件。越狱设备默认会监听一个 SSH 服务器，用户为`root`，密码为`alpine`。
- en: 'From the command prompt/terminal, issue the following command:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符/终端中，输入以下命令：
- en: '[PRE38]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: When prompted for a password, enter `alpine`. One of the most important requirements
    is to be able to view the source code of an iOS application. This can be achieved
    with a tool called `class_dump-z`.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当提示输入密码时，输入`alpine`。最重要的要求之一是能够查看 iOS 应用程序的源代码。可以通过一个名为`class_dump-z`的工具来实现这一点。
- en: Navigate to the directory where `class_dump_z` is located.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至 `class_dump_z` 所在的目录。
- en: Let's use a preinstalled app for this purpose.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用一个预安装的应用程序来实现这一目标。
- en: Using i-Funbox, navigate to the application directory, click on **Contacts~iphone**,
    and then click on **Copy to PC**. Select the destination directory on your machine,
    and click on **Save**:![How to do it...](graphics/image_02_023.jpg)
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 i-Funbox，导航到应用程序目录，点击**Contacts~iphone**，然后点击**复制到 PC**。选择你电脑上的目标目录，并点击**保存**：![操作方法...](graphics/image_02_023.jpg)
- en: 'Now let''s dump the classes from this app. Navigate to `class_dump_z` directory,
    and execute the following command:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们转储这个应用程序的类。导航至`class_dump_z`目录，并执行以下命令：
- en: '[PRE39]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Your output should look like the following:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 你的输出应如下所示：
- en: '![How to do it...](graphics/image_02_024.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![操作方法...](graphics/image_02_024.jpg)'
- en: We now have a dump of all classes, methods, and related relevant information
    for our analysis.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经获取了所有类、方法以及相关信息的转储数据，供我们分析使用。
- en: 'The following snippet reveals a class named `SearchRequestHistoryItem`, which
    is inheriting from `PersistentSearchRequestHistoryItem`:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码段展示了一个名为`SearchRequestHistoryItem`的类，它继承自`PersistentSearchRequestHistoryItem`：
- en: '[PRE40]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: How it works...
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Malware is known to create executable files, which are added to system directories
    and provide executable permissions.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件通常会创建可执行文件，这些文件被添加到系统目录并赋予可执行权限。
- en: These executables in turn add property files, try to access and control launch
    daemons, read sensitive data, and even attempt to upload sensitive data to remote
    servers.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可执行文件反过来会添加属性文件，尝试访问和控制启动守护进程，读取敏感数据，甚至尝试将敏感数据上传到远程服务器。
- en: Analyzing malware in the iOS environment
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在iOS环境中分析恶意软件
- en: We will take a look at the XSSer mRAT iOS malware sample, for our preliminary
    analysis. If installed, this malware operates in the background of a victim's
    phone, and the contents of the targeted device are sent to remote servers that
    appear to be controlled by a foreign government or organization. XSSer mRAT can
    steal SMS messages, call logs, location data, photos, address books, data from
    the Chinese messaging application Tencent, and passwords from the iOS keychain.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查看XSSer mRAT iOS恶意软件样本，进行初步分析。如果已安装，该恶意软件将在受害者手机的后台运行，受感染设备的内容将被发送到看似由外国政府或组织控制的远程服务器。XSSer
    mRAT可以窃取短信、通话记录、位置信息、照片、通讯录、腾讯的中国即时通讯应用程序的数据以及iOS钥匙串中的密码。
- en: Getting ready
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: We need unzipping utilities such as 7-Zip, WinZip, and so on.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要解压工具，如7-Zip、WinZip等。
- en: How to do it...
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To analyze malware in the iOS environment perform the following steps:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS环境中分析恶意软件，请执行以下步骤：
- en: We unpack the `.deb` file to view the contents of the package. The unpacked
    directory contains a file called `data.tar`, which can be further unpacked to
    the `data` directory.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们解压`.deb`文件以查看包的内容。解压后的目录包含一个名为`data.tar`的文件，可以进一步解压到`data`目录。
- en: 'We now explore further, to /data/bin, where we find three files:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在进一步探查，进入/data/bin，找到三个文件：
- en: com.xsser.0day.iphone.plist
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: com.xsser.0day.iphone.plist
- en: xsser.0day_t
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: xsser.0day_t
- en: xsser.0day_t.sh
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: xsser.0day_t.sh
- en: 'Let''s have a look at the `xxser.0day_t.sh` file. The following code is revealed:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们看一下`xxser.0day_t.sh`文件。以下代码被揭示：
- en: '[PRE41]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Code analysis reveals that the app attempts to copy the binary package `xsser.0day_t`
    to the device's `/bin` directory, which indicates that the binary file is used
    to carry out malicious commands.
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 代码分析显示，应用程序试图将二进制包`xsser.0day_t`复制到设备的`/bin`目录，这表明该二进制文件用于执行恶意命令。
- en: The next line reveals that the malware copies the plist file to the `/Library/LaunchDaemons`
    directory to launch the App code at system startup and reboot.
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下一行揭示了恶意软件将plist文件复制到`/Library/LaunchDaemons`目录，以便在系统启动和重启时启动应用程序代码。
- en: 'We also see that permission of `755` has been granted to both files using `chmod
    0755`, which allows everyone to read and execute the file, and the file owner
    to write to the file with the following code:'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还看到，通过`chmod 0755`命令授予了`755`权限，这允许所有人读取和执行文件，文件所有者可以写入文件，使用以下代码：
- en: '[PRE42]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The app now uses `launchctl` to interface with `launchd` in order to load `daemons/agents`
    and generally control `launchd` via its `plist` file.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该应用程序现在使用`launchctl`与`launchd`接口，以加载`daemons/agents`并通过其`plist`文件控制`launchd`。
- en: 'Let''s have a look at the plist file. Open the plist file in Notepad. The contents
    are as follows:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们来看一下plist文件。在记事本中打开plist文件，内容如下：
- en: '[PRE43]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This plist file defines the `xsser.0day` binary as a program that has the capability
    to be started by launch daemons.
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个plist文件将`xsser.0day`二进制文件定义为具有由launch daemon启动能力的程序。
- en: This process essentially installs a native service and loads it.![How to do
    it...](graphics/image_02_025.jpg)
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该过程本质上是安装并加载了一个本地服务。![如何操作...](graphics/image_02_025.jpg)
- en: When the application is running, it sends an HTTP GET request to [www.xsser.com/CheckLibrary.aspx](http://www.xsser.com/CheckLibrary.aspx)
    to get the library version.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当应用程序运行时，它发送HTTP GET请求到[www.xsser.com/CheckLibrary.aspx](http://www.xsser.com/CheckLibrary.aspx)以获取库版本。
- en: How it works...
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When the app runs at bootup, the binary checks the version of the library and
    saves it to a file named `/bin/iVersion`. If the version doesn't match, then it
    downloads and updates the iLib version. The main binary also has some minimal
    logging to `/bin/debuglogFile.log`.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序在启动时运行时，二进制文件会检查库的版本并将其保存到名为`/bin/iVersion`的文件中。如果版本不匹配，它将下载并更新iLib版本。主二进制文件还会在`/bin/debuglogFile.log`中进行一些最小化的日志记录。
- en: The app then sends data such as the OS version, Mac address, device version,
    phone number, IMSI, and IMEI code via a GET request.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，应用程序通过GET请求发送数据，如操作系统版本、MAC地址、设备版本、电话号码、IMSI和IMEI码。
- en: 'The server responds to the GET request, with a set of commands to be executed
    on the device. These commands include uploading the following files:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器响应GET请求，返回一组将在设备上执行的命令。这些命令包括上传以下文件：
- en: '[PRE44]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: All images are in the `/private/var/mobile/Media/DCIM/100APPLE/` directory.
    Additionally, GPS information and Keychain are also accessed by the application.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 所有图像都位于`/private/var/mobile/Media/DCIM/100APPLE/`目录。此外，应用程序还会访问GPS信息和钥匙串。
- en: 'All the data is then uploaded to http://xsser.com/TargetUploadGPS.aspx:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '所有数据随后被上传到 http://xsser.com/TargetUploadGPS.aspx:'
- en: '![How it works...](graphics/image_02_026.jpg)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](graphics/image_02_026.jpg)'
