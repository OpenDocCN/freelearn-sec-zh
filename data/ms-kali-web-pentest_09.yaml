- en: Chapter 10. Launching Client-Side Attacks
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第10章。发动客户端攻击
- en: Web application testing rightfully focuses on the application we're testing
    and its supporting infrastructure. Most attacks we've focused onto this point
    have been interested in either knocking on the front door of that web application
    or hitchhiking on client sessions to gain illicit access. Our customers spend
    all of their security budget fortifying that infrastructure, with some of it geared
    toward the web application's own hardening. That being said, who is taking care
    of their clients?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序测试应该合理地关注我们正在测试的应用程序及其支持基础设施。到目前为止，我们关注的大多数攻击都对应用程序的前门进行了测试，或者利用客户端会话来获取非法访问。我们的客户将所有的安全预算都用于加固基础设施，其中一部分用于加固Web应用程序本身。也就是说，谁来照顾他们的客户端呢？
- en: Between the increased exposure of the client itself as well as the susceptibility
    of the user, we'll have a variety of vectors to test. The staggering number of
    software combinations and user behaviors overlap with other services and web applications,
    and modes of access (mobile versus desktop, roaming versus proxied, thick client
    versus thin clientÂ versus web client, and so on) make this an incredibly tough
    front for application developers to secure. Their best path is to harden the application
    itself, to close any holes and ensure that the application closes any reflective
    attack vectors and screens already-compromised hosts.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端本身的暴露以及用户的易受攻击性之间，我们将有多种测试向量。软件组合和用户行为的数量庞大，与其他服务和Web应用程序的重叠，以及访问方式的多样性（移动端与桌面端、漫游与代理、厚客户端与薄客户端与Web客户端等等），使得这对应用程序开发人员来说是一个极其艰巨的前线。他们最好的路径是加固应用程序本身，关闭任何漏洞，并确保应用程序关闭任何反射攻击向量和屏幕已经受到损害的主机。
- en: Most client-side penetration testing will come in the form of a gray or white
    box testing scope, as the bulk of attack types leverage the application's own
    code or scripts. This doesn't present a significant barrier, as we'll soon see.
    In this chapter, we'll see multiple ways by which we can compromise endpoints--either
    their communications or the host itself. With this knowledge, there is a multitude
    of web application attacks that can degrade target services, and these must be
    exhaustively investigated.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数客户端渗透测试将以灰盒或白盒测试范围的形式出现，因为大部分攻击类型利用了应用程序自身的代码或脚本。这并不构成重大障碍，我们很快就会看到。在本章中，我们将看到多种方式，通过这些方式我们可以妥协终端点——无论是它们的通信还是主机本身。有了这些知识，就有了大量的Web应用程序攻击方式，可以降低目标服务的质量，这些必须进行彻底的调查。
- en: 'This chapter will help you learn this with the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将帮助您学习以下主题：
- en: Learning how **Domain Object Model** (**DOM**) based XSS attacks work and how
    to implement them
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习基于DOM的XSS攻击的工作原理以及如何实施它们
- en: Understanding how JavaScript embedding can be used to compromise clients
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解JavaScript嵌入如何被用来妥协客户端
- en: Learning how Client-Side URL Redirect and Resource Manipulation can be used
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用客户端URL重定向和资源操纵
- en: Understanding how Clickjacking and Websockets offer additional ways into a client
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解点击劫持和Websockets如何提供额外的进入客户端的途径
- en: Understanding and implementing exploits that perform Cross-Site Request Forgery
    and hijack communications
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解和实施执行跨站请求伪造和劫持通信的攻击
- en: Why are clients so weak?
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么客户端如此脆弱？
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Client-focused attacks span several of the OWASP 2013 and 2017's Top 10 Threat
    categories. Client-side attacks using DOM-based **Cross Site Scripting** (**XSS**)
    are a powerful method of leveraging weaknesses in validation to embed scripts
    into web responses and inserting code into clients. The client-focused, DOM-based
    XSS can deliver code to the clients to effect compromises made on web applications,
    but there is a variety of vulnerabilities that hackers will exploit to reach and
    impact clients, such as a unvalidated redirects and forwards, websockets attacks,
    or clickjacking. A third category in both the 2013 and 2017 versions of the OWASP
    Top 10 is a vulnerability to **Cross-Site Request Forgery** (**CSRF**), which
    leverages victim clients as a pivot and takes advantage of their authenticated
    status to compromise other sites.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端攻击涵盖了OWASP 2013和2017年十大威胁类别中的几个。使用基于DOM的跨站脚本攻击（XSS）是一种利用验证中的弱点将脚本嵌入到Web响应中并将代码插入到客户端的强大方法。基于客户端的DOM
    XSS可以向客户端传递代码，以影响对Web应用程序所做的妥协，但黑客将利用各种漏洞来达到并影响客户端，例如未经验证的重定向和转发、Websockets攻击或点击劫持。OWASP十大2013年和2017年版本中的第三类漏洞是跨站请求伪造（CSRF），它利用受害者客户端作为枢纽，并利用其经过身份验证的状态来妥协其他站点。
- en: There are other attacks that bleed over into other areas within the OWASP Top
    10 and have been covered in earlier efforts, but we'll revisit some of them in
    this chapter to ensure that we understand how best to test and exploit them. The
    common thread in these threats is that they exploit issues on the web application's
    server-side implementation to effect the behavior or integrity of the client side.
    Because these attacks usually imply access to the code being delivered to the
    clients, most of these techniques are not applicable in black-box testing but
    are rather used in white-box or gray-box testing. Attackers, of course, will likely
    use these techniques from an insider's vantage point, so client-side attacks are
    often a stepping stone from an initial beach-head in the environment to either
    lateral movement or as one component of a privilege escalation attack.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他攻击会渗透到OWASP十大中的其他领域，并且在之前的努力中已经涵盖过，但我们将在本章中重新讨论其中一些，以确保我们了解如何最好地测试和利用它们。这些威胁的共同点是它们利用了Web应用程序服务器端实现的问题，以影响客户端的行为或完整性。因为这些攻击通常意味着可以访问交付给客户端的代码，所以大多数这些技术在黑盒测试中不适用，而是在白盒或灰盒测试中使用。攻击者当然可能会从内部的角度使用这些技术，因此客户端攻击通常是从环境中的初始立足点到横向移动或特权升级攻击的一个组成部分。
- en: DOM, Duh-DOM DOM DOM!!
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DOM，Duh-DOM DOM DOM!!
- en: DOM-based XSS should inspire fear and panic in ill-prepared or unprotected web
    application environments and the teams responsible. As we discussed in [Chapter
    6](000.html#), *Infiltrating Sessions via Cross-Site Scripting*, most XSS attacks
    exploit a lack of input validation to insert scripts (typically JavaScript) to
    impact how clients interpret or interact with the site. DOM-based attacks are
    a subset of those that impact the client's browser, where the DOM resides, to
    maintain its local view of what the application is doing and presenting. By embedding
    scripts, users can of course impact the behavior of the client, but the variety
    of goals and objectives is staggering, and the tool's robust (the **Browser Exploit
    Framework** (**BeEF**) is fantastic in assisting with XSS). These attacks primarily
    focus on attacking the client to hack the client and glean information or focus
    on the end user.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 基于DOM的XSS应该让准备不足或未受保护的网络应用环境和负责团队感到恐慌。正如我们在[第6章](000.html#)中讨论的*通过跨站脚本攻击渗透会话*，大多数XSS攻击利用了输入验证的缺失来插入脚本（通常是JavaScript）以影响客户端如何解释或与网站交互。基于DOM的攻击是这些攻击的一个子集，它影响客户端的浏览器，其中DOM位于其中，以维护其对应用程序正在做什么和呈现什么的本地视图。通过嵌入脚本，用户当然可以影响客户端的行为，但目标和目的的多样性令人震惊，而且工具的强大（**浏览器利用框架**（**BeEF**）在协助XSS方面表现出色）。这些攻击主要集中在攻击客户端以黑客客户端并获取信息或专注于最终用户。
- en: '![](img/B03918_10_01.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_10_01.png)'
- en: 'Â 2013 OWASP Top 10 Summary of #3: XSS Attacks'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 2013 OWASP十大概要#3：XSS攻击
- en: Malicious misdirection
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 恶意误导
- en: '**Unvalidated redirects** and**Â forwards** includeÂ vulnerabilities to attacks
    through o**pen redirect**, **UI redressing**, or aÂ **client-side URL redirection**.
    These attack types involve placing malicious links into the user''s path that
    force a connection to an unintended site for additional attacks, whether they
    initiate malware downloads or intercept future communications or credentials.
    Web applications themselves are complicit in this, as it means that the developers
    have not deployed adequate code validation, session management, or are reliant
    on a flawed, and thereby vulnerable, framework or module.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**未经验证的重定向**和**转发**包括**开放重定向**、**UI伪装**或**客户端URL重定向**的漏洞。这些攻击类型涉及将恶意链接放入用户的路径，强制连接到意外站点以进行额外攻击，无论是启动恶意软件下载还是拦截未来的通信或凭据。网络应用程序本身也参与其中，因为这意味着开发人员没有部署足够的代码验证、会话管理，或者依赖于有缺陷、因此容易受到攻击的框架或模块。'
- en: 'The OWASP 2013 Top 10 ranked this threat as a #10 threat (as shown in the following
    screenshot), but the 2017 version (in its current draft) has dropped it in favor
    of **Application Program Interface** (**API**-based flaws. This does not mean
    that unvalidated redirects and forwards are no longer a threat, but that they
    have not been as prevalent and concerning of late. These attacks such as DOM-based
    XSS tend to have hacking the user as their end-goal.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP 2013十大威胁将这一威胁排名为第10位（如下图所示），但2017年版本（在当前草案中）已将其换成了**应用程序接口**（**API**）漏洞。这并不意味着未经验证的重定向和转发不再构成威胁，而是最近它们并不像以前那样普遍和令人担忧。这些攻击，如基于DOM的XSS，往往以黑客用户为最终目标。
- en: '![](img/B03918_10_02.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_10_02.png)'
- en: '2013 OWASP Top 10 Summary of #10: Unvalidated Redirects and Forwards'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 2013 OWASP十大概要#10：未经验证的重定向和转发
- en: Catch me if you can!
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 抓住我，如果你能！
- en: The 1980 book and subsequent 2002 movie *Catch Me If You Can* is a great caper
    about real-life forger and con-artist Frank Abagnale, who was an expert at manipulating
    people and having them cash forged checks and otherwise take actions on his behalf.
    Hackers can use similar social engineering skills and authentic-looking requests
    to turn unsuspecting clients against the server and take advantage of their trust
    relationship to deliver malicious commands. **Cross-Site Request Forgery** (**CSRF**)
    is an attack that targets a client using an application vulnerability, but it
    actually does so to turn the client against its application.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 1980年的书籍和随后的2002年电影*抓住我，如果你能*是关于现实生活中的伪造者和骗子弗兰克·阿巴格内尔的一次伟大的冒险，他擅长操纵人们，让他们兑现伪造的支票或以其他方式代表他采取行动。黑客可以利用类似的社会工程技能和看起来真实的请求来将毫无戒心的客户端转向服务器，并利用他们的信任关系来传递恶意命令。**跨站请求伪造**（**CSRF**）是一种针对客户端使用应用程序漏洞的攻击，但实际上是为了将客户端转向其应用程序。
- en: '![](img/B03918_10_03.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_10_03.png)'
- en: '2013 OWASP Top 10 Summary of #7: Cross-Site Request Forgery'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 2013 OWASP十大概要#7：跨站请求伪造
- en: Picking on the little guys
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 欺负小家伙
- en: '* * *'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Now that we know what the attacks are trying to accomplish, we have the distinct
    privilege of testing and validating that these vulnerabilities exist or not. In
    this section, I'll provide some guidance on how best to achieve comprehensive
    coverage in your scans for these capabilities, but we'll also look into how we
    can exploit them for black-box attacks and systemic pen testing scopes.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道攻击的目的是什么，我们有特权来测试和验证这些漏洞是否存在。在本节中，我将提供一些关于如何最好地在扫描这些功能时实现全面覆盖的指导，但我们还将探讨如何利用它们进行黑盒攻击和系统性渗透测试范围。
- en: Sea-surfing on someone else's board
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在别人的板上冲浪
- en: CSRF attacks (sometimes pronounced *sea-surf*) hide the actual intent of a referred
    action and bury it in a forged request.Â  The user wants to believe the page as-rendered
    (because hey, it came from my trusted web app!) and thus has no reason to investigate
    the underlying hidden fields or requested actions buried into the body or header,
    which in fact launch a malicious action against the server. Through these attacks,
    hackers can have users unwittingly launch the attacks on the server with the benefit
    of using their authenticated session as a Trojan Horse of sorts.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: CSRF攻击（有时发音为*sea-surf*）隐藏了引用操作的实际意图，并将其埋藏在伪造的请求中。用户希望相信页面是按照其呈现的样子（因为嘿，它来自我信任的网络应用！），因此没有理由调查隐藏在主体或标题中的底层隐藏字段或请求操作，实际上这些操作对服务器发起了恶意行动。通过这些攻击，黑客可以让用户在不知情的情况下利用其经过身份验证的会话对服务器发起攻击，就像是使用他们的身份验证会话作为特洛伊木马一样。
- en: 'Scanning for the potential existence of a CSRF vulnerability is included in
    the scanning and spidering functions of most proxy scanner--Burp Suite, OWASP
    ZAP, and Wapati included. Burp will usually flag as such (as shown in the following
    screenshot), with links and guidance on what the attack means and how to prevent
    it:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数代理扫描仪的扫描和蜘蛛功能中，都包括了对CSRF漏洞的潜在存在进行扫描--Burp Suite、OWASP ZAP和Wapati。Burp通常会标记为这样（如下面的屏幕截图所示），并提供关于攻击含义以及如何防止的链接和指导：
- en: '![](img/B03918_10_04.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_10_04.png)'
- en: Burp Suite's scan showing CSRF vulnerability
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite的扫描显示CSRF漏洞
- en: Simple account takeovers
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 简单的账户接管
- en: 'Conducting a CSRF attack, however, is not something typically conducted from
    these tools, but rather a browser and Notepad. If you find that CSRF might make
    sense in your testing, here is an example of how you might execute such an attack.
    For this exercise, we''ll leverage the OWASP BWA VM and the **Broken Web App**
    (**BeeBox**) again and navigate to the appropriate page (as shown in the following
    screenshot):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，进行CSRF攻击通常不是使用这些工具进行的，而是使用浏览器和记事本。如果您发现在您的测试中进行CSRF攻击是有意义的，这里是一个执行这种攻击的示例。在这个练习中，我们将利用OWASP
    BWA VM和**Broken Web App**（BeeBox）再次导航到适当的页面（如下面的屏幕截图所示）：
- en: '![](img/B03918_10_05.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_10_05.png)'
- en: Accessing bWAPP CSRF Practice Link
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 访问bWAPP CSRF练习链接
- en: Once we're in to the portal, we can go ahead and view the source of the portal
    (in Firefox this involves either using *Ctrl* + *U* or navigating to **`Tools`**Â |Â **`Web
    Developer`**Â |Â **`Page Source`**). This will bring up the HTML on the page (as
    shown in the following screenshot), but what we want is to modify the user input
    section to fool the poor victim into changing their password to our preferred
    one. Let's go ahead and copy this section (everything including and between `<form`
    andÂ `</form>`).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们进入门户，我们可以继续查看门户的源代码（在Firefox中，这涉及使用*Ctrl* + *U*或导航到**`工具`** | **`Web开发人员`**
    | **`页面源`**）。这将显示页面上的HTML（如下面的屏幕截图所示），但我们想要修改用户输入部分，以愚弄可怜的受害者改变他们的密码为我们所偏爱的密码。让我们继续复制这一部分（包括`<form`和`</form>`之间的所有内容）。
- en: '![](img/B03918_10_06.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_10_06.png)'
- en: Harvesting HTML for CSRF Exploit
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 收获HTML以进行CSRF利用
- en: 'What we''re aiming to do is to have the user â�� who is already authenticated,
    by the way - allow us to borrow their account and change their credentials to
    our preferred password (how nice of them!). We can do this by modifying the fields
    as shown here, where we insert our preferred password (highlighted with bold text).
    I also changed the name of the button to help obscure that a change is happening
    â�� you could make this aÂ **`Login`**Â or something else they are more likely
    to want to click on:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是让已经经过身份验证的用户允许我们借用他们的账户并将他们的凭据更改为我们所偏爱的密码（他们真是太好了！）。我们可以通过修改字段来实现这一点，如图所示，在这里插入我们所偏爱的密码（用粗体文本突出显示）。我还更改了按钮的名称，以帮助掩盖正在发生的变化--您可以将其设置为**`登录`**或其他他们更有可能想要点击的内容：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When we save this (I picked `pw.html`) and view it, we should see a populated
    set of fields, similar to what we see in the following screenshot. When a user
    clicks on these CSRF snippets, it helps if the reason is ambiguous and the fields
    are hidden; we don't want them to know we're forcing a password change (or some
    other purpose we might be architecting the CSRF attack to fulfill).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们保存这个文件（我选择了`pw.html`）并查看它时，我们应该看到一组填充的字段，类似于我们在下面的屏幕截图中看到的。当用户点击这些CSRF片段时，如果原因模糊且字段被隐藏，这有助于我们。我们不希望他们知道我们正在强制更改密码（或者我们可能正在设计CSRF攻击以实现其他目的）。
- en: '![](img/B03918_10_07.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_10_07.png)'
- en: Results of CSRF modifications
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: CSRF修改的结果
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](img/B03918_10_08.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_10_08.png)'
- en: Modified fields in our HTML
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的HTML中修改的字段
- en: 'So now, our modified HTML is complete, but how do we deliver this gift to our
    victims? You can combine this attack with a XSS attack, send it via e-mail, or
    embed it within a forged page. To test the code itself, we can just open the page
    and click Â on the **`Click Here`**Â button. With any luck (who needs it with
    these awesome hacks?) you''ll see a similar message to what we see in the following
    screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们修改后的HTML已经完成，但是我们如何将这份礼物送给我们的受害者呢？您可以将此攻击与XSS攻击相结合，通过电子邮件发送，或将其嵌入伪造的页面中。要测试代码本身，我们只需打开页面并单击**`点击这里`**按钮。幸运的话（在这些令人敬畏的黑客攻击中谁还需要运气？），您将看到与下面屏幕截图中所见类似的消息：
- en: '![](img/B03918_10_09.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_10_09.png)'
- en: CSRF Execution delivers the victim to the real page
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: CSRF执行将受害者带到真正的页面
- en: As we can see, this is a very helpful tool in compromising clients. Hackers
    have not only used this for credential modification, but also to redirect funding
    to different accounts and to deliver other attack modifications (using authenticated
    users to deliver XSS or Injection attacks). Thankfully, there are methods to eliminate
    these sorts of vulnerability, but web applications need to have this included.
    Some **Content Management Systems** (**CMS**s) build protection into the structure
    (Joomla!, Drupal, and so on); but for some frameworks and scratch-coded PHP and
    ASP.NET pages, it may be necessary for the developers to add on protection or
    harden their interactive pages using recommendations from the folks at OWASP ([https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet))
    or the provider of their CMS.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，这是一个非常有帮助的工具，可以 compromise 客户。黑客们不仅使用这个来修改凭据，还用来将资金重定向到不同的账户，并交付其他攻击修改（使用经过身份验证的用户来交付XSS或注入攻击）。幸运的是，有方法可以消除这些漏洞，但是Web应用程序需要包含这些方法。一些**内容管理系统**（**CMS**s）在结构中构建了保护措施（如Joomla！、Drupal等）；但对于一些框架和从头编写的PHP和ASP.NET页面，开发人员可能需要添加保护措施或加固他们的交互页面，使用OWASP（[https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet)）或他们的CMS提供商的建议。
- en: Don't you know who I am? Account creation
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 你不知道我是谁吗？账户创建
- en: Taking over an account might work short-term, but often we want a persistent
    presence on the application that does not have a very angry or upset victim trying
    to wrest back control. In the event we are able to obtain access to an admin's
    account or fool an admin user into clicking on a link, we can sometimes have them
    help us create an account on our own!
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接管一个账户可能在短期内奏效，但通常我们希望在应用程序上保持持久的存在，而不是让一个非常愤怒或沮丧的受害者试图夺回控制。如果我们能够访问管理员的账户或者愚弄管理员用户点击链接，有时我们可以让他们帮助我们自己创建一个账户！
- en: 'The trick is to have located or accurately guessed the URL for the new user
    or account creation page. Once we''ve done this, we can use a similar attack to
    our first CSRF to automate the account creation and pass it the appropriate seed
    credentials we''d like to use on it. To walk through this, we can see how this
    works by using bWAPP again, and select **`Create User`** from the top menu bar.
    You''ll see fields shown in the following screenshot, which I have already prefilled
    with my desired account information:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 诀窍是已经定位或准确猜测到新用户或账户创建页面的URL。一旦我们做到了这一点，我们可以使用类似于我们第一次CSRF攻击的攻击来自动化账户创建，并将我们想要在其上使用的适当种子凭据传递给它。通过使用bWAPP再次进行演示，我们可以看到这是如何工作的，并从顶部菜单栏中选择**`创建用户`**。您将看到下面截图中显示的字段，我已经填写了我想要的账户信息：
- en: '![](img/B03918_10_10-1.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_10_10-1.png)'
- en: Create User fields we'll need to fill
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要填写的创建用户字段
- en: 'When I create an account, Burp can help me capture the string, which includes
    all of the information we''d like (as shown in the following screenshot). Now,
    we''ve got two options that we can attempt to exploit: CSRF and HTMP injection,
    which were covered in [Chapter 7](000.html#), *Injection and Overflow Testing*.
    Assuming for the sake of argument that Injection isn''t viable (maybe the target''s
    developers have closed that vulnerability), we will pursue a CSRF attack.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当我创建一个账户时，Burp可以帮助我捕获字符串，其中包括我们想要的所有信息（如下截图所示）。现在，我们有两个选项可以尝试利用：CSRF和HTMP注入，这些在[第7章](000.html#)中已经涵盖了，*注入和溢出测试*。假设出于论证的目的，注入不可行（也许目标的开发人员已经关闭了这个漏洞），我们将进行CSRF攻击。
- en: '![](img/B03918_10_11.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_10_11.png)'
- en: Finding the URL strings for our forgery
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为我们的伪造找到URL字符串
- en: 'For a CSRF attack, I could start with an HTML file similar to what I have captured
    next:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 对于CSRF攻击，我可以从类似我捕获的HTML文件开始：
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, to be particularly stealthy, we need to ensure no one receiving this page
    understands what we''re making them do.Â  The trick is to hide fields and take
    advantage of hidden attributes to carry our request past their curious inspection.
    I can do this by modifying the source to eliminate all of the labels and hide
    all user inputs with the exception of a `submit`Â button while embedding my desired
    credentials without the user being aware:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了特别隐秘，我们需要确保接收此页面的人不理解我们让他们做什么。诀窍是隐藏字段并利用隐藏属性来使我们的请求通过他们的好奇检查。我可以通过修改源代码来消除所有标签并隐藏所有用户输入，除了一个`submit`按钮，同时嵌入我想要的凭据而不让用户知道：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will result in a page that looks like the one shown in the following screenshotÂ when
    loaded by the victim. We can make that button look like anything (**`win $1M here!`**,
    **`Verify Email`**, andÂ **`Register for seminar`**Â are all viable options).
    This could even be embedded as a link within a picture if we like; our goal is
    to craft somethingÂ innocent-looking and relevant to the user's expected behavior.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当受害者加载时，这将导致页面看起来像以下截图所示的页面。我们可以使该按钮看起来像任何东西（“赢得100万美元！”、“验证电子邮件”和“注册研讨会”都是可行的选项）。我们甚至可以将其嵌入到图片中作为链接；我们的目标是制作一个看起来无害且与用户预期行为相关的东西。
- en: '![](img/B03918_10_12.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_10_12.png)'
- en: Simple Login Page, right?
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的登录页面，对吧？
- en: When the user clicks on this, we'll see that the poor, authenticated victim
    with account creation privileges has just created an account for us, as in the
    following screenshot! The key here is to know what fields are expected. OSINT
    can help, as often new-employee instructions and help portals will give this away
    with little protection. We can also make some educated guesses based on other
    trends within the organization.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击这个按钮时，我们会看到可怜的认证受害者具有创建账户的权限，就像下面的截图中所示！关键在于知道预期的字段是什么。OSINT可以帮助，因为通常新员工的说明和帮助门户会毫不保留地透露这一点。我们还可以根据组织内的其他趋势做出一些合理的猜测。
- en: '![](img/B03918_10_13-1.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_10_13-1.png)'
- en: Account created, thank you!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 账户已创建，谢谢！
- en: It should be noted that CSRF is an area of very active cat-and-mouse innovation
    between hackers and defenders. Anti-CSRF tokens have become a means by which to
    protect users; but, as is the case with all of the vulnerabilities, and as we
    have seen in this book, execution is often the weakest link. In the event Anti-CSRF
    tokens are in use, hackers (and us) can try to use JavaScript in our CSRF pages
    to capture any Anti-CSRF tokens the client has and slipstream those into our GET
    or POST requests to ensure we are evading this protection. Better Anti-CSRF implementations
    of will prevent this by implementing temporal and context-driven tokens, but if
    they do not do so, there is a decent probability of circumventing these controls.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 应该注意的是，CSRF是黑客和防御者之间非常活跃的猫鼠游戏创新领域。反CSRF令牌已经成为保护用户的手段；但是，就像所有漏洞一样，正如我们在本书中所看到的，执行通常是最薄弱的环节。如果使用了反CSRF令牌，黑客（和我们）可以尝试在我们的CSRF页面中使用JavaScript来捕获客户端的任何反CSRF令牌，并将其滑入我们的GET或POST请求中，以确保我们规避这种保护。更好的反CSRF实现将通过实施临时和上下文驱动的令牌来防止这种情况，但如果他们没有这样做，那么规避这些控制的可能性是相当大的。
- en: Trust me, I know the way!
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相信我，我知道路！
- en: 'For such a long name, the unvalidated redirects and forwards vulnerability
    exposes sites to ridiculously small-effort hacks that allow attackers to redirect
    users to malicious or at the very least, unintended websites. We can scan through
    the sites using automated tools, such asÂ Burp or ZAP, which will pick up on the
    potential through giveaways such as pages that make use of full site paths or
    long redirection response, both of which are seen on this site (as shown in the
    following screenshot) or simply attempt to specify extensions or modifications
    to the URL in the browser:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这样一个长的名称，未经验证的重定向和转发漏洞使网站面临着极小的努力即可进行攻击，使攻击者能够将用户重定向到恶意网站或至少是意外的网站。我们可以使用自动化工具（如Burp或ZAP）扫描网站，这些工具将通过一些线索来发现潜在的问题，例如使用完整站点路径或长重定向响应的页面，这两者都在此网站上看到（如下图所示），或者尝试在浏览器中指定扩展名或修改URL：
- en: '![](img/B03918_10_14.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_10_14.png)'
- en: Burp Suite scan showing Unvalidated Redirects and Forwards vulnerability
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite扫描显示未经验证的重定向和转发漏洞
- en: Most sites will still allow visibility into the URL when you hover over the
    link on the page, with the associated link for *here*Â shown in the following
    screenshot. This is an easy way to intuitively uncover such risks during the OSINT
    efforts.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数网站在您在页面上悬停在链接上时仍然允许查看URL，相关链接为*here*如下截图所示。这是在OSINT努力中直观发现此类风险的简单方法。
- en: '![](img/B03918_10_15.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_10_15.png)'
- en: Identifying candidate hyperlinks
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 识别候选超链接
- en: 'As an alternative, some sites will hide the hyperlink, but theÂ **`Page Source`**
    should reveal this to us, as in the following screenshot.Â  For this site, we
    can see that they are using the aforementioned relative links, which generally
    offer better protection if the site validates that only relative links are returned.
    If they use explicit, full links or allow them in lieu of a site-scope relative
    link, this will often indicate some less strictly coded validation. This is also
    a great way of seeing any other associated scripts or non-obvious hyperlinks,
    which can also be potential giveaways for the previously discussed CSRF, hidden-field
    exploits, and likewise:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 作为替代，一些网站会隐藏超链接，但**`页面源代码`**应该向我们显示这一点，如下图所示。对于这个网站，我们可以看到他们正在使用前面提到的相对链接，如果网站验证只返回相对链接，通常会提供更好的保护。如果他们使用显式的完整链接或允许它们代替站点范围的相对链接，这通常会表明一些不太严格编码的验证。这也是发现任何其他相关脚本或非明显超链接的好方法，这些也可能是先前讨论的CSRF，隐藏字段利用等的潜在线索：
- en: '![](img/B03918_10_16.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_10_16.png)'
- en: View Source typically reveals more
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 查看源代码通常会显示更多
- en: 'The part to pay attention to is the part after `?`Â in the URL. As we''ve seen
    before, the direct inclusion of commands, scripts, fields, and now another page
    link, provides hackers with plenty of inroads to insert their own tweaks, initiate
    commands, or even refer the client to the site''s **Fully Qualified Domain Name**
    (**FQDN**). For this attack, we can simply begin to tweak the URL string and attempt
    to add our own redirects. Obviously, this could be a part of a greater attempt
    to trick users into visiting our malicious portal or kick-off a malware download,
    but for now, let''s just prove it with a benign redirect by crafting the URL as
    follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要注意的部分是URL中`?`之后的部分。正如我们以前所见，直接包含命令、脚本、字段，现在又是另一个页面链接，为黑客提供了许多途径来插入他们自己的调整，启动命令，甚至引导客户端到站点的**完全合格域名**（**FQDN**）。对于这种攻击，我们可以简单地开始调整URL字符串，并尝试添加我们自己的重定向。显然，这可能是试图欺骗用户访问我们的恶意门户或启动恶意软件下载的更大尝试的一部分，但现在，让我们只用一个良性的重定向来证明它，方法如下：
- en: '[PRE4]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And voila! We''ve redirected the users to our malicious site, in this case,
    just our favorite practice site [www.hackthissite.org](http://www.hackthissite.org)Â (as
    shown here):'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 看哪！我们已经把用户重定向到我们的恶意网站，这种情况下，只是我们最喜欢的练习网站[www.hackthissite.org](http://www.hackthissite.org)（如图所示）：
- en: '![](img/B03918_10_17.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_10_17.png)'
- en: Redirect success!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 重定向成功！
- en: This simple method is often overlooked, but when the URL is hidden as a hyperlink
    within an e-mail, either completely or to just show the expected portion of the
    URL, the user has a high likelihood of clicking on it. If the action after the
    URL includes having a user access a site with an authentication they can provide,
    this can provide a toehold large enough for a hacker to take advantage of. Rarely
    is this attack alone; it is usually used to assist in lateral movement or session
    hijacking early in a more comprehensive attack's lifecycle.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这种简单的方法经常被忽视，但当URL作为电子邮件中的超链接隐藏时，无论是完全隐藏还是只显示URL的预期部分，用户都很有可能点击它。如果URL之后的操作包括让用户访问具有他们可以提供的身份验证的站点，这可以为黑客提供足够大的立足点来利用。很少有这种攻击单独存在；通常用于协助横向移动或在更全面的攻击生命周期早期劫持会话。
- en: I don't need your validation
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我不需要你的验证
- en: '* * *'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Validation in web applications is an essential step in eliminating or reducing
    the risk of compromise. XSS, injection, CSRF, Unvalidated Redirects, and Forward
    attacks all take advantage of shortcomings in the application that allow the manipulation
    of fields, exposure of previously hidden features or unused components, and a
    lack of syntax enforcement. Some additional Validation-style attacks are listed
    hereÂ and are typically detected well by full-feature scans and proxy tools:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web应用程序中进行验证是消除或减少威胁的重要步骤。 XSS，注入，CSRF，未经验证的重定向和转发攻击都利用了应用程序中的缺陷，允许对字段进行操纵，暴露先前隐藏的功能或未使用的组件，并且缺乏语法强制执行。这里列出了一些附加的验证样式攻击，并且通常可以通过全功能扫描和代理工具很好地检测到：
- en: '**CSS-injection**: CSS injection looks for code inside Common Style Sheets
    (not to be confused with XSS or Cross-Site Scripting) that is susceptible to manipulation
    or injection attacks. Like XSS and CSRF, this can be used to insert scripts or
    cause traffic rerouting, which results in either the exfiltration of data or the
    capture of credentials, tokens, and other sensitive information. In extreme cases,
    persistence can be delivered in this fashion.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS注入：CSS注入寻找常见样式表中容易受到操纵或注入攻击的代码（不要与XSS或跨站点脚本混淆）。与XSS和CSRF一样，这可以用于插入脚本或引起流量重定向，从而导致数据外泄或凭据、令牌和其他敏感信息的捕获。在极端情况下，可以通过这种方式传递持久性。
- en: '**Client-side resource manipulation**: Really a variant of XSS, these attacks
    focus on the various user-controllable elements in a request or response that
    can cause a client to execute a malicious command or process within the browser.
    CSS-Injection is a flavor of this, but other common targets are **iFrames** in
    the web page and other linked objects (images, references, scripts, objects, and
    so on). iFrames are a common means of providing multiple sources of content to
    a single page and are used in many news and e-commerce sites.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端资源操纵：实际上是XSS的一个变种，这些攻击侧重于请求或响应中各种用户可控元素，这些元素可以导致客户端在浏览器内执行恶意命令或进程。CSS注入是这种攻击的一种变体，但其他常见的目标是网页中的iFrames和其他链接对象（图像、引用、脚本、对象等）。iFrames是提供单个页面多个内容来源的常见方式，在许多新闻和电子商务网站中使用。
- en: '**Web sockets**: Web sockets attacks have not been as prevalent as anticipated,
    because how many times do you see applications using `ws://` or `wss://` in the
    URL as opposed to HTTP calls? Websockets were envisioned as a means by which you
    can provide full-duplex, asynchronous communication links between a client and
    server that are able to carry more than one TCP connection. Well, they have not
    quite taken off, but should they ever come into vogue, you can use extensions
    to Google Chrome or OWASP''s ZAP tool to test for issues with them. Like HTTP,
    we want our web sockets protected by current versions of TLS, and so many common
    OpenSSL or encryption-based attacks are fair game. They should also have strict
    rules on origin tags in their headers, so they can be tested for client-side resource
    manipulation and various injection attacks.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web套接字：Web套接字攻击并没有像预期的那样普遍，因为你有多少次看到应用程序在URL中使用`ws://`或`wss://`而不是HTTP调用？Web套接字被设想为一种方式，可以在客户端和服务器之间提供全双工、异步通信链接，能够承载多个TCP连接。嗯，它们并没有完全起飞，但如果它们真的流行起来，你可以使用Google
    Chrome的扩展或OWASP的ZAP工具来测试它们的问题。与HTTP一样，我们希望我们的Web套接字受到当前版本的TLS的保护，因此许多常见的OpenSSL或基于加密的攻击都是公平的游戏。它们还应该在其标头中有严格的来源标签规则，以便可以测试客户端资源操纵和各种注入攻击。
- en: '**Cross-site flashing**: Cross-site flashing is very similar to XSS except
    that it preys on Adobe Flash embedments, which along with PDFs, Java jar files,
    and productivity software is a popular delivery mechanism for malware. By altering
    the embedded file, hackers can implant malware or achieve more web-oriented objectives,
    such as harvesting credentials and cookies.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨站点闪烁：跨站点闪烁与XSS非常相似，只是它针对Adobe Flash嵌入，这与PDF、Java jar文件和生产软件一样，是恶意软件的常见传递机制。通过更改嵌入文件，黑客可以植入恶意软件或实现更多面向网络的目标，例如收集凭据和Cookie。
- en: '**Cross-Origin Resource Sharing** (**CORS**): This takes advantage of a lack
    of validation in many of the attacks covered in this chapter. Most applications
    will ensure that headers communicate using several parameters and it is up to
    use to test how far out of the originating domain''s scope a request can go before
    additional validation is required. If web developers allow these headers to use
    wildcards or disable these checks, then this provides the means to attack with
    impunity. Header inspection is the primary test method, but should a vulnerability
    exist, it can be exploited through code manipulation similar to CSRF.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨域资源共享（CORS）：这利用了本章涵盖的许多攻击中缺乏验证的特点。大多数应用程序将确保标头使用多个参数进行通信，我们需要测试在请求超出原始域的范围之前需要多少额外的验证。如果Web开发人员允许这些标头使用通配符或禁用这些检查，那么这提供了攻击的手段。标头检查是主要的测试方法，但如果存在漏洞，它可以通过类似CSRF的代码操纵来利用。
- en: Trendy hacks come and go
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时尚的黑客技术来来去去
- en: '* * *'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Recent trends in client-focused attacks have been focused on circumventing many
    trusted protection mechanisms and heightening user awareness. While I will not
    cover these in great detail, it is worth noting their potential and thinking about
    how to both evaluate and exploit these vulnerabilities as needed in your own testing.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 最近客户端攻击的趋势集中在规避许多受信任的保护机制并提高用户意识。虽然我不会详细介绍这些内容，但值得注意它们的潜力，并考虑如何在自己的测试中评估和利用这些漏洞。
- en: Clickjacking (bWAPP)
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 点击劫持（bWAPP）
- en: '**Clickjacking**Â was a prevalent attack method a few years ago that was notable
    for its use across Facebook, Twitter, Amazon, and other prominent sites. In all
    of these attacks, hackers tricked users into clicking on a masqueraded or hidden
    link to launch a malicious page or script. Simple HTML was capable of providing
    an overlapping iFrame or other mechanism whose presence was not clear to the user,
    and hackers could use this to overlay a button on top of a legitimate site component
    such that, when they thought they were clicking on a control, they were instead
    clicking on a malicious action, often to facilitate capture of their credentials,
    cookie stealing, or even hooking of the browser.Â  These techniques have been
    addressed in modern browser versions for the last few years, but it is worth being
    aware that this technique existed.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**点击劫持**曾是几年前一种普遍的攻击方法，以其在Facebook、Twitter、亚马逊和其他知名网站上的使用而引人注目。在所有这些攻击中，黑客们诱使用户点击伪装或隐藏的链接，以启动恶意页面或脚本。简单的HTML可以提供重叠的iFrame或其他机制，用户无法清楚地看到其存在，黑客可以利用这一点在合法网站组件的顶部覆盖一个按钮，使他们认为他们点击的是一个控件，实际上他们点击的是一个恶意操作，通常是为了获取他们的凭证、窃取cookie，甚至钩住浏览器。这些技术在现代浏览器版本中已经得到解决，但值得注意的是这种技术曾经存在。'
- en: Punycode
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Punycode
- en: Most English-speaking web users are unaware that there are many alphabets that
    are used in the DNSÂ around the world. While English, Germanic, and Romance language
    keyboards maybe unaware of this, browsers are fully capable of rendering these
    characters to accommodate users and companies that leverage the much wider alphabets
    from Asia, Africa, and the Middle East. The compromise was to implement an encoding
    scheme so that browsers and other applications can refer to the other characters
    accurately, and this was called **Punycode**. This does cause some confusion,
    as there are letters or symbols in different languages that are distinct despite
    looking almost identical. In April of 2017, researchers released warnings ([https://www.xudongz.com/blog/2017/idn-phishing/](https://www.xudongz.com/blog/2017/idn-phishing/))
    of hackers attempting to exploit these similarities. Browser makers such as Apple
    (Safari), Mozilla (Firefox), and Google (Chrome) are working on providing additional
    protection, but this testifies to the need for greater levels of DNS-based protection.
    By the time this book is published, it is expected that most browsers will have
    mitigation in place, but, of course, we'll want to verify that these updates are
    in place.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数使用英语的网络用户并不知道世界各地的DNS中使用了许多不同的字母表。虽然英语、日耳曼语和罗曼语键盘可能不知道这一点，但浏览器完全能够渲染这些字符以适应使用亚洲、非洲和中东更广泛字母表的用户和公司。妥协的方法是实施一种编码方案，以便浏览器和其他应用程序能够准确地引用其他字符，这就是**Punycode**。这确实会引起一些混淆，因为不同语言中有一些看起来几乎相同但实际上是不同的字母或符号。2017年4月，研究人员发布了警告（[https://www.xudongz.com/blog/2017/idn-phishing/](https://www.xudongz.com/blog/2017/idn-phishing/)），警告黑客试图利用这些相似之处。苹果（Safari）、Mozilla（Firefox）和谷歌（Chrome）等浏览器制造商正在努力提供额外的保护，但这证明了需要更高级别的基于DNS的保护。预计在本书出版时，大多数浏览器都将采取缓解措施，但当然，我们需要验证这些更新是否已经到位。
- en: Forged or hijacked certificates
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 伪造或劫持证书
- en: Certificates and **Public Key Inrastructure** (**PKI**) are the basis for trust
    on the web and within enterprises. The premise of this arrangement is that if
    both parties are mutually authenticated using a trusted third party, what could
    go wrong? Well, hackers have been trying to pass off forged certificates for some
    time, relying on misconfigured certificates, browsers, and lax server-side implementations.
    These are fairly easy to expose and defend against, but some new dynamics are
    being planned.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 证书和**公钥基础设施**（**PKI**）是网络和企业信任的基础。这种安排的前提是，如果双方都使用受信任的第三方进行相互认证，会出现什么问题？嗯，黑客们一直在尝试伪造证书，依赖于配置错误的证书、浏览器和松散的服务器端实现。这些都相当容易暴露和防御，但一些新的动态正在计划中。
- en: The **Stuxnet** malware campaign that allegedly targeted Iranian centrifuges
    ([https://www.wired.com/2014/11/countdown-to-zero-day-stuxnet/](https://www.wired.com/2014/11/countdown-to-zero-day-stuxnet/))
    did many things that were both instructive and downright unprecedented throughout
    the duration of the attack. As a worm, it made its way through target environments
    as scripts hidden in the .LNK files themselves, particularly insidious due to
    the fact that these are automatically opened and rendered to display the icons
    for a file type. Once on machines, it established kernel-level access and persistence,
    while covering for the other processes that helped to both spread and execute
    the worm. The most shocking discovery was that it used signed software, authenticated
    using a real hardware vendor's certificate and private key. That this could happen
    was a massive blow to the PKI community, and many companies set about to ensure
    it does not happen again.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 据称针对伊朗离心机的**Stuxnet**恶意软件活动（[https://www.wired.com/2014/11/countdown-to-zero-day-stuxnet/](https://www.wired.com/2014/11/countdown-to-zero-day-stuxnet/)）在攻击期间做了许多具有指导意义和前所未有的事情。作为一种蠕虫，它通过隐藏在.LNK文件中的脚本在目标环境中传播，特别阴险的是这些文件会自动打开并渲染以显示文件类型的图标。一旦进入机器，它建立了内核级别的访问和持久性，同时掩盖了其他帮助传播和执行蠕虫的进程。最令人震惊的发现是它使用了经过签名的软件，使用了真实硬件供应商的证书和私钥进行验证。这种情况对PKI社区来说是一个巨大的打击，许多公司开始确保这种情况不会再次发生。
- en: 'Fast forward a few years, and now malware vendors and web hackers are finding
    that free or cheap certificate authorities available now can help them obtain
    a legitimate certificate for their malware or malicious web portal. Coupled with
    punycode or some other domain name **hijinks**, we''re now seeing XSS funnel users
    to malicious portals that fool users with the now conspicuous *trusted site* icon
    seen in Firefox in the following screenshot. It should be noted that these attacks
    are still rare, but that we should expect more hackers will attempt to exploit
    them in the future as a countermeasure against the proliferation of TLS use on
    the web and browser default settings that prevent self-signed, expired, or forged
    certs from being accepted unless explicitly bypassed. As testers, we''ll want
    to ensure that our scans show proper PKI configurations, the use of recent versions
    of TLS only, and that corporate browser standards do not cave in certificate validation,
    or even decide upon explicit certificate configuration to avoid signed malware
    or redirects:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 快进几年，现在恶意软件供应商和网络黑客发现，现在可以免费或廉价获得证书颁发机构，这可以帮助他们为其恶意软件或恶意网络门户获得合法证书。再加上punycode或其他域名**恶作剧**，我们现在看到XSS将用户引导到恶意门户，这些门户通过Firefox中的明显*受信任站点*图标欺骗用户。值得注意的是，这些攻击仍然很少见，但我们应该期望更多的黑客将尝试在未来利用它们，作为对网络上TLS使用的普及和浏览器默认设置的反制措施，这些设置阻止接受自签名、过期或伪造证书，除非明确绕过。作为测试人员，我们将希望确保我们的扫描显示适当的PKI配置，仅使用最新版本的TLS，并且企业浏览器标准不会妥协证书验证，甚至决定采用明确的证书配置，以避免签名恶意软件或重定向：
- en: '![](img/B03918_10_18.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_10_18.png)'
- en: Certificate Trust isn't what it used to be
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 证书信任不再是过去的样子
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: '* * *'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Client-side vulnerabilities and their exploits expose the blind spots that most
    web developers have; they aren't used to owning the security on a client's platform
    and can fall into the trap of looking myopically at only protecting their framework
    or application. Hackers see this as an opportunity with a tremendous plus side.
    They can compromise the end user, while pivoting from them to take advantage of
    their authenticated or cached status and thereby compromise the web server. We
    as a community need to ensure application owners understand that it is in their
    best interests to fortify their website against exposing client-side vulnerabilities,
    as improved client security dramatically reduces the attack surface of the application
    itself.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端漏洞及其利用暴露了大多数Web开发人员的盲点；他们不习惯拥有客户端平台上的安全性，并且可能会陷入只保护他们的框架或应用程序的陷阱。黑客将这视为一个巨大的机会。他们可以妥协最终用户，同时从他们那里转移，利用他们的经过身份验证或缓存状态，从而妥协Web服务器。作为一个社区，我们需要确保应用程序所有者明白，加强网站防范客户端漏洞的利益最大化，因为改进客户端安全性会显著减少应用程序本身的攻击面。
- en: This isn't easy--there is a near infinite combination of operating systems,
    browsers, patch-levels, access modes, and other factors that can impact a client's
    exposure. Best-practice based design, patching, and attention to detail are the
    best defences against these potentially fatal flaws. We should also endeavour
    to encourage the use of well-tested frameworks rather than custom-designed components
    wherever possible. As with the Authentication and Session Management vulnerabilities
    discussed in [Chapter 9](000.html#), *Stress Testing Authentication and Session
    Management*, we'd much rather benefit from the larger footprint and extensiveÂ scrutiny
    and vetting these widely available components see than to find out that our target's
    unique implementation had a flaw that remained undetected until exploited by hackers.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不容易——操作系统、浏览器、补丁级别、访问模式和其他因素的近乎无限的组合可能会影响客户端的暴露。基于最佳实践的设计、打补丁和对细节的关注是对这些潜在致命缺陷的最好防御。我们还应努力鼓励在可能的情况下使用经过充分测试的框架，而不是自定义组件。与[第9章](000.html#)
    *压力测试身份验证和会话管理*中讨论的身份验证和会话管理漏洞一样，我们更愿意从这些广泛可用的组件的更大足迹和广泛审查和审查中受益，而不是发现我们的目标的独特实现存在漏洞，直到被黑客利用。
- en: In the next chapter, we'll finish our testing by taking a look at how we can
    put the business logic of the application through its paces. This last discipline
    really focuses on the application tier's design and error handling, and while
    we'll see some themes return (injection and fuzzing, for instance), we're really
    hoping to ensure that even authenticated users are unable to *break* the target
    and cause issues or access unintended data or functions. While this chapter focused
    on HTML and made sparing use of our toolset, [Chapter 11](000.html#),Â *Breaking
    the Application Logic,Â *will see a return to Burp and ZAP, as their ability to
    automate will be a huge help in covering all of the iterations a site can expect.
    We're almost at the end, but hopefully you're still building your arsenal and
    seeing how huge and fun the landscape ofÂ web app pen testing is!Â
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过测试来看一下如何对应用程序的业务逻辑进行测试。这最后的纪律真正关注应用程序层的设计和错误处理，虽然我们会看到一些主题重现（比如注入和模糊测试），但我们真的希望确保即使经过身份验证的用户也无法*破坏*目标并引起问题或访问意外的数据或功能。虽然本章重点是HTML，并且只是少量使用了我们的工具集，[第11章](000.html#)
    *破解应用程序逻辑*将会重新使用Burp和ZAP，因为它们的自动化能力将对覆盖网站可能期望的所有迭代起到巨大的帮助。我们几乎到了尽头，但希望您仍在建立您的武器库，并看到网络应用程序渗透测试的规模和乐趣有多大！
