- en: '*Chapter 2*: Automating RE Tasks with Ghidra Scripts'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第二章*：使用 Ghidra 脚本自动化逆向工程任务'
- en: In this chapter, we will cover **Reverse Engineering** (**RE**) automation by
    scripting Ghidra. We will start by reviewing the impressive and pretty well-organized
    arsenal of available Ghidra scripts built into the tool. These few hundreds of
    scripts are usually more than enough to cover the main automation needs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讲解如何通过脚本化 Ghidra 来自动化**逆向工程**（**RE**）任务。我们将首先回顾内置在工具中的大量且结构良好的 Ghidra
    脚本库。这些几百个脚本通常足以满足主要的自动化需求。
- en: Once you know the arsenal, you will probably also want to know how it works.
    Then, we will have an overview of the Ghidra script class in order to understand
    its internals and get some background, which will be very useful for the last
    part of this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你了解了这个库，你可能还会想了解它是如何工作的。接下来，我们将概览 Ghidra 脚本类，以便理解其内部结构并获得一些背景知识，这对本章最后一部分会非常有帮助。
- en: Finally, you will learn how to develop your own Ghidra scripts. To do so, it
    will be necessary to have an overview of the Ghidra API. Fortunately, you will
    be able to program in Java or Python according to your preferences since the Ghidra
    API is the same in both cases.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你将学习如何开发自己的 Ghidra 脚本。为此，必须先了解 Ghidra API 的概览。幸运的是，你可以根据个人偏好选择使用 Java 或 Python，因为
    Ghidra API 在这两种语言中的实现是相同的。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将覆盖以下主要主题：
- en: Exploring the Ghidra scripts arsenal
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 Ghidra 脚本库
- en: Analyzing the Ghidra script class and the API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析 Ghidra 脚本类和 API
- en: Writing your own Ghidra scripts
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写你自己的 Ghidra 脚本
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The GitHub repository containing all the necessary code for this chapter can
    be found at [https://github.com/PacktPublishing/Ghidra-Software-Reverse-Engineering-for-Beginners/tree/master/Chapter02](https://github.com/PacktPublishing/Ghidra-Software-Reverse-Engineering-for-Beginners/tree/master/Chapter02).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章所需的所有代码可以在 GitHub 仓库找到：[https://github.com/PacktPublishing/Ghidra-Software-Reverse-Engineering-for-Beginners/tree/master/Chapter02](https://github.com/PacktPublishing/Ghidra-Software-Reverse-Engineering-for-Beginners/tree/master/Chapter02)。
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/3mZbdAm](https://bit.ly/3mZbdAm)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，看看代码如何运行：[https://bit.ly/3mZbdAm](https://bit.ly/3mZbdAm)
- en: Using and adapting existing scripts
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用和修改现有脚本
- en: Ghidra scripts allow you to automate RE tasks when analyzing binaries. Let's
    cover an overview of how to use scripts from `hello world` program. Our starting
    point here is a `hello world` program loaded into Ghidra's **CodeBrowser**, as
    explained in the *Overview of Ghidra's features* section of [*Chapter 1*](B16207_01_Final_SK_ePub.xhtml#_idTextAnchor017),
    *Getting Started with Ghidra*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Ghidra 脚本允许你在分析二进制文件时自动化逆向工程任务。让我们从 `hello world` 程序的使用概述开始。我们这里的起点是一个加载到 Ghidra
    **代码浏览器**中的 `hello world` 程序，如[*第一章*](B16207_01_Final_SK_ePub.xhtml#_idTextAnchor017)的*Ghidra功能概览*部分所解释。
- en: 'As mentioned in the introduction of this chapter, Ghidra includes a true script
    arsenal. To access it, go to **Window** and then **Script Manager**. Alternatively,
    click the button highlighted in the following screenshot:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章引言中提到的，Ghidra 包含了一个真正的脚本库。要访问它，请进入**窗口**，然后选择**脚本管理器**。或者，点击以下截图中高亮显示的按钮：
- en: '![Figure 2.1 – The run script button highlighted in the quick access bar'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.1 – 快速访问栏中高亮显示的运行脚本按钮](img/B16207_02_001.jpg)'
- en: '](img/B16207_02_001.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16207_02_001.jpg)'
- en: Figure 2.1 – The run script button highlighted in the quick access bar
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 – 快速访问栏中高亮显示的运行脚本按钮
- en: 'As you can see on the left in the folder browser, all these scripts are categorized
    by folder, showing the scripts each one contains when selected:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在左侧的文件夹浏览器中看到的，这些脚本按文件夹分类，选择某个文件夹时会显示其中包含的脚本：
- en: '![Figure 2.2 – Script Manager'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.2 – 脚本管理器](img/B16207_02_002.jpg)'
- en: '](img/B16207_02_002.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16207_02_002.jpg)'
- en: Figure 2.2 – Script Manager
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – 脚本管理器
- en: 'In the preceding screenshot, when clicking on the checklist icon located at
    the upper right in the **Script Manager** window, the paths of the script directories
    will be shown:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，当点击位于**脚本管理器**窗口右上角的任务列表图标时，将显示脚本目录的路径：
- en: '![Figure 2.3 – Script directories'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.3 – 脚本目录](img/B16207_02_003.jpg)'
- en: '](img/B16207_02_003.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16207_02_003.jpg)'
- en: Figure 2.3 – Script directories
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – 脚本目录
- en: 'This is a very good starting point to experiment with existing scripts. You
    can analyze and edit all of them by using Ghidra. It will allow you to understand
    how they work and how to adapt them to your needs. Use the highlighted icons shown
    in the following screenshot to edit scripts or create new ones:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常好的起点，可以用来实验现有脚本。你可以通过 Ghidra 分析和编辑所有这些脚本，它将帮助你理解它们是如何工作的，以及如何根据你的需求进行调整。使用下图所示的高亮图标来编辑脚本或创建新脚本：
- en: '![Figure 2.4 – The edit script and create a new script buttons highlighted
    in the quick access bar'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.4 – 快速访问栏中高亮的编辑脚本和创建新脚本按钮'
- en: '](img/B16207_02_004.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16207_02_004.jpg)'
- en: Figure 2.4 – The edit script and create a new script buttons highlighted in
    the quick access bar
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4 – 快速访问栏中高亮的编辑脚本和创建新脚本按钮
- en: 'As we are analyzing a `hello world` program that only prints `hello world`
    on the screen, we can choose a string-related Ghidra script, and then see how
    it can speed up the analysis. As you can see in the following screenshot, both
    Python and Java scripts are mixed in **Script Manager**:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在分析一个只会在屏幕上打印 `hello world` 的 `hello world` 程序，我们可以选择一个与字符串相关的 Ghidra 脚本，然后查看它如何加速分析。如下图所示，Python
    和 Java 脚本在 **Script Manager** 中混合显示：
- en: '![Figure 2.5 – String-related scripts available in Script Manager'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.5 – Script Manager 中可用的与字符串相关的脚本'
- en: '](img/B16207_02_005.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16207_02_005.jpg)'
- en: Figure 2.5 – String-related scripts available in Script Manager
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5 – Script Manager 中可用的与字符串相关的脚本
- en: For instance, the `RecursiveStringFinder.py` file can speed up your analysis
    by showing all the functions and their associated strings. It speeds up your analysis
    because strings can reveal the purpose of a function without the need for reading
    even a single line of code.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`RecursiveStringFinder.py` 文件可以通过显示所有函数及其相关字符串来加速分析。它加速分析的原因是，字符串可以揭示一个函数的用途，而无需读取任何一行代码。
- en: Let's execute the mentioned script, taking the `_mainCRTStartup()` function
    of the `hello world` program as input (you will need to put the cursor onto this
    function) while seeing the output in the scripting console.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行前面提到的脚本，以 `hello world` 程序的 `_mainCRTStartup()` 函数作为输入（你需要将光标放在此函数上），同时在脚本控制台中查看输出。
- en: As you can see in the following screenshot, `RecursiveStringFinder.py` printed
    out an indented (according to the calling depth) list of functions, each one containing
    its own referenced strings.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，`RecursiveStringFinder.py` 打印出一个缩进的（根据调用深度）函数列表，每个函数都包含其引用的字符串。
- en: 'For instance, the `_mainCRTStartup()` function is the first function that will
    be executed (we know this because of the indentation; it is the one that is the
    most to the left). After that, the `__pei386_runtime_relocator()` function, which
    was introduced by the compiler, will be called. This function contains the string
    `" Unknown pseudo relocation bit size %d. \n"`, and we know that it is a string
    because of the `ds` indicator. You can see, after some functions and strings that
    are also introduced by the compiler, the `_main()` function containing the `"Hello
    world."` string, which reveals what our program does:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`_mainCRTStartup()` 函数是第一个将被执行的函数（我们知道这一点是因为它的缩进；它是最靠左的那个）。之后，编译器引入的 `__pei386_runtime_relocator()`
    函数将被调用。这个函数包含字符串 `" Unknown pseudo relocation bit size %d. \n"`，我们知道它是一个字符串，因为有
    `ds` 指示符。你可以看到，在一些由编译器引入的函数和字符串之后，`_main()` 函数包含了 `"Hello world."` 字符串，这揭示了我们的程序功能：
- en: '![Figure 2.6 – Result of running the RecursiveStringFinder.py script over a
    Hello World program'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.6 – 运行 RecursiveStringFinder.py 脚本时，在 Hello World 程序中得到的结果'
- en: '](img/B16207_02_006.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16207_02_006.jpg)'
- en: Figure 2.6 – Result of running the RecursiveStringFinder.py script over a Hello
    World program
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6 – 运行 RecursiveStringFinder.py 脚本时，在 Hello World 程序中得到的结果
- en: The previous script was developed in Python and it uses the `getStringReferences()`
    function (line `04`) to obtain the operands of instructions (line `07`) that are
    referencing something (line `10`). When the thing referenced is data and, to be
    more precise, a string (lines `12-14`), it is appended to the list of results,
    which is finally shown in the scripting console.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的脚本是用 Python 开发的，它使用 `getStringReferences()` 函数（第 `04` 行）获取引用某些内容的指令的操作数（第
    `07` 行）（第 `10` 行）。当被引用的内容是数据，更准确地说是字符串（第 `12-14` 行）时，它会被添加到结果列表中，最终显示在脚本控制台中。
- en: We modified this script to implement a filter when appending strings to the
    list of results in `isAnInterestingString()` (line `15`) to determine whether
    to append it to the list of results or not (lines `16-20`).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们修改了这个脚本，在将字符串附加到 `isAnInterestingString()` 函数的结果列表时实现了过滤器（第 `15` 行），以决定是否将其附加到结果列表中（第
    `16`–`20` 行）。
- en: Imagine you are looking for URLs in the code of the program being analyzed,
    which can be very useful in practice when analyzing malware because it can reveal
    the server of the attackers. All you need to do is to open `strings` folder (this
    script works with strings). Then, open the `RecursiveStringFinder.py` script and
    add a filtering condition to it by implementing an `isAnInterestingString()` function
    (lines `00-02` in the following code snippet).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你在分析的程序代码中寻找 URL，这在分析恶意软件时非常有用，因为它可以揭示攻击者的服务器。你只需要打开 `strings` 文件夹（该脚本处理字符串）。然后，打开
    `RecursiveStringFinder.py` 脚本并向其中添加过滤条件，通过实现 `isAnInterestingString()` 函数（以下代码片段中的第
    `00`–`02` 行）。
- en: 'As a general rule, don''t write a script without first checking whether something
    similar already exists in Ghidra''s arsenal:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，编写脚本之前要先检查是否已经有类似的脚本存在于 Ghidra 的工具库中：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This script can be easily modified to search for URLs in the code, which is
    very useful when analyzing malware. All you need to do is to replace the condition
    in `isAnInterestingString()` with the appropriate regular expression.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本可以很容易地修改为搜索代码中的 URL，这在分析恶意软件时非常有用。你只需要将 `isAnInterestingString()` 中的条件替换为合适的正则表达式。
- en: 'The previous script was developed in the Python programming language. If you
    want to experiment with Java, then you can analyze the code in `TranslateStringsScript.java`.
    For the sake of brevity, imports are omitted in the following code listing:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的脚本是用 Python 编程语言开发的。如果你想尝试 Java，可以分析 `TranslateStringsScript.java` 中的代码。为了简洁，以下代码清单省略了导入部分：
- en: '[PRE21]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The previous script allows you to modify strings referenced in the program by
    prefixing and suffixing the `TODO` string to it (line `04`). The mentioned script
    can be useful in some cases. For example, if you need to decode a lot of Base64-encoded
    strings or defeat some similar malware obfuscation, then modify the `translateString()`
    function, which is responsible for taking the input string, applying some transformation,
    and returning it.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的脚本允许你通过在程序中引用的字符串前后加上 `TODO` 字符串来修改这些字符串（第 `04` 行）。这个脚本在某些情况下很有用。例如，如果你需要解码大量的
    Base64 编码字符串或破解类似的恶意软件混淆，可以修改 `translateString()` 函数，该函数负责获取输入字符串，应用某些转换并返回结果。
- en: The `run()` function is the main function of a Ghidra script (line `08`). In
    this case, a string counter is first initialized to zero (line `14`), and then,
    for each string (line `20`), the counter is incremented while the string transformation
    is produced (lines `30`–`32`) and shown (lines `34`–`35`) on each loop iteration.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`run()` 函数是 Ghidra 脚本的主函数（第 `08` 行）。在这种情况下，首先将字符串计数器初始化为零（第 `14` 行），然后对于每个字符串（第
    `20` 行），计数器会递增，同时产生字符串转换（第 `30`–`32` 行）并在每次循环迭代中显示（第 `34`–`35` 行）。'
- en: 'The execution of this script as is produces changes in all the program strings
    by prefixing and suffixing `TODO` to them. As you can see in the following screenshot,
    our `Hello world` string was modified in this way. The script also calculated
    the number of transformed strings:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 按照当前脚本的执行方式，它会通过在所有程序字符串前后添加 `TODO` 来进行修改。正如你在下面的截图中看到的，我们的 `Hello world` 字符串就是以这种方式被修改的。脚本还计算了转换过的字符串数量：
- en: '![Figure 2.7 – Result of running TranslateStringsScript.java over a Hello World
    program'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.7 – 运行 TranslateStringsScript.java 处理 Hello World 程序的结果'
- en: '](img/B16207_02_007.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16207_02_007.jpg)'
- en: Figure 2.7 – Result of running TranslateStringsScript.java over a Hello World
    program
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7 – 运行 TranslateStringsScript.java 处理 Hello World 程序的结果
- en: We have seen how to use existing scripts and also how to adapt them to our needs.
    Next, we will learn how exactly the Ghidra script class works.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了如何使用现有的脚本，并且也知道如何将它们调整以满足我们的需求。接下来，我们将学习 Ghidra 脚本类是如何工作的。
- en: The script class
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本类
- en: 'To develop a Ghidra script, you need to click on the **Create New Script**
    option available on the **Script Manager** menu. Then, you will be able to decide
    which programming language to use:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要开发一个 Ghidra 脚本，你需要点击 **创建新脚本** 选项，该选项可通过 **脚本管理器** 菜单找到。然后，你将能够选择使用哪种编程语言：
- en: '![Figure 2.8 – The programming language dialog during new script creation'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.8 – 新建脚本时的编程语言对话框'
- en: '](img/B16207_02_008.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16207_02_008.jpg)'
- en: Figure 2.8 – The programming language dialog during new script creation
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8 – 新建脚本时的编程语言对话框
- en: 'If you decide to use Java, the skeleton of the script will be composed of three
    parts. The first part is the comments:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定使用 Java，脚本的骨架将由三部分组成。第一部分是注释：
- en: '[PRE64]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Some comments are obvious, but some of them deserve mention. For instance,
    `@menupath` allows you to specify where to put the script in the menu when it
    is enabled:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 有些注释显而易见，但有些值得特别提及。例如，`@menupath` 允许你指定脚本启用时应该放置在菜单中的位置：
- en: '![Figure 2.9 – Enabling a script to be integrated with Ghidra'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.9 – 启用脚本与 Ghidra 集成'
- en: '](img/B16207_02_009.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16207_02_009.jpg)'
- en: Figure 2.9 – Enabling a script to be integrated with Ghidra
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9 – 启用脚本与 Ghidra 集成
- en: 'Notice that the path must be split by a `.` character:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，路径必须由 `.` 字符分隔：
- en: '[PRE70]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The previous source code comment produces the following script integration
    with Ghidra''s menu:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的源代码注释生成了与 Ghidra 菜单集成的脚本如下：
- en: '![Figure 2.10 – Result of integrating a new script with Ghidra'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.10 – 将新脚本集成到 Ghidra 后的结果'
- en: '](img/B16207_02_010.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16207_02_010.jpg)'
- en: Figure 2.10 – Result of integrating a new script with Ghidra
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.10 – 将新脚本集成到 Ghidra 后的结果
- en: 'The next part is the imports, where the most important and strictly necessary
    one is `GhidraScript`. All scripts must inherit from this class and implement
    the `run()` method (which is the main method):'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 下一部分是导入，其中最重要且绝对必要的是 `GhidraScript`。所有脚本必须继承此类并实现 `run()` 方法（这是主方法）：
- en: '[PRE71]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: All the imports are documented in Ghidra's Javadoc documentation; you should
    refer to it when developing your scripts.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 所有导入的内容都在 Ghidra 的 Javadoc 文档中有记录；在开发脚本时，你应该参考该文档。
- en: Javadoc Ghidra API documentation
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Javadoc Ghidra API 文档
- en: By clicking on **Help** and then **Ghidra API Help**, JavaDoc documentation
    for Ghidra will be automatically generated, if it doesn't already exist. Then,
    you will be able to access the documentation for the mentioned import packages:/api/ghidra/app/script/package-summary.html/api/ghidra/program/model/.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击 **帮助** 然后选择 **Ghidra API 帮助**，如果 JavaDoc 文档尚不存在，Ghidra 的 JavaDoc 文档将会自动生成。然后，你就可以访问上述导入包的文档：/api/ghidra/app/script/package-summary.html/api/ghidra/program/model/。
- en: 'Finally, the body of the script inherits from `GhidraScript`, where the `run()`
    method must be implemented with your own code. You can access the following `GhidraScript`
    states in your implementation: `currentProgram`, `currentAddress`, `currentLocation`,
    `currentSelection`, and `currentHighlight`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，脚本的主体继承自 `GhidraScript`，其中 `run()` 方法必须用你自己的代码实现。在你的实现中，你可以访问以下 `GhidraScript`
    状态：`currentProgram`、`currentAddress`、`currentLocation`、`currentSelection` 和 `currentHighlight`：
- en: '[PRE83]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'If you want to write a script using Python, the API is the same as Java and
    the script skeleton contains a header (the rest of the script must be filled with
    your own code) and it is very similar to the Java one:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用 Python 编写脚本，API 与 Java 相同，脚本的骨架包含一个头部（脚本的其余部分必须由你自己填写），这与 Java 的非常相似：
- en: '[PRE88]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: In fact, the Java API is exposed to Python by wrapping it using Jython, which
    is an implementation of the Python programming language designed to run on the
    Java platform.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，Java API 通过 Jython 被暴露给 Python，Jython 是一个设计用于在 Java 平台上运行的 Python 编程语言实现。
- en: 'If you go to **Window** and then **Python**, a Python interpreter will appear,
    allowing autocompletion when a *Tab* keystroke happens:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你进入 **窗口** 然后选择 **Python**，将会出现一个 Python 解释器，当按下 *Tab* 键时会启用自动完成：
- en: '![Figure 2.11 – The Ghidra Python interpreter autocompletion feature'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.11 – Ghidra Python 解释器的自动完成特性'
- en: '](img/B16207_02_011.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16207_02_011.jpg)'
- en: Figure 2.11 – The Ghidra Python interpreter autocompletion feature
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.11 – Ghidra Python 解释器的自动完成特性
- en: 'It also allows you to see the documentation by using the `help()` function.
    As you may have already noticed, it is highly recommended to have a Ghidra Python
    interpreter open while developing Ghidra scripts to quickly access the documentation,
    test code fragments, and more. It is very useful:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 它还允许你通过使用 `help()` 函数查看文档。如你所见，在开发 Ghidra 脚本时，强烈推荐保持 Ghidra Python 解释器打开，这样可以快速访问文档、测试代码片段等，非常有用：
- en: '![Figure 2.12 – Querying Ghidra help by using the Python interpreter'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.12 – 使用 Python 解释器查询 Ghidra 帮助'
- en: '](img/B16207_02_012.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16207_02_012.jpg)'
- en: Figure 2.12 – Querying Ghidra help by using the Python interpreter
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.12 – 使用 Python 解释器查询 Ghidra 帮助
- en: In this section, we covered the script class and its structure, how to query
    the Ghidra API documentation in order to implement it, and how the Python interpreter
    can help us during development. In the next section, we will put this into practice
    by writing a Ghidra script.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们介绍了脚本类及其结构，如何查询 Ghidra API 文档以实现它，以及 Python 解释器在开发过程中如何帮助我们。在下一部分，我们将通过编写
    Ghidra 脚本来实践这一点。
- en: Script development
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本开发
- en: Now you know all the things needed in order to implement your own script. Let's
    start by writing the header. This script will allow you to patch bytes with no
    operation instructions (`NOP` assembly opcode).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了实现自己脚本所需的一切。我们从编写头部开始。这个脚本将允许你用无操作指令（`NOP` 汇编操作码）修补字节。
- en: 'First, we start writing the header. Notice that `@keybinding` allows us to
    execute the script with the *Ctrl* + *Alt* + *Shift* + *N* key combination:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们开始编写头部。请注意，`@keybinding` 允许我们通过 *Ctrl* + *Alt* + *Shift* + *N* 快捷键组合来执行脚本：
- en: '[PRE95]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'Then, all our script needs to do is to get the current cursor location in Ghidra
    (the `currentLocation` variable), then obtain the address of it (line `03`), the
    instruction at that address is undefined (lines `06`-`08`), patch the byte with
    the `NOP` instruction opcode, which is `0x90` (lines `09`-`11`), and disassemble
    the bytes again (line `12`). The important work to do here is to search for the
    appropriate API functions in the mentioned Javadoc documentation:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们的脚本只需要做的是获取 Ghidra 中当前的光标位置（`currentLocation` 变量），然后获取该位置的地址（第 `03` 行），该地址处的指令是未定义的（第
    `06` 到 `08` 行），用 `NOP` 指令操作码（即 `0x90`，第 `09` 到 `11` 行）修补该字节，再次反汇编字节（第 `12` 行）。这里要做的重要工作是寻找合适的
    API 函数，这些函数可以在提到的 Javadoc 文档中找到：
- en: '[PRE113]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'Of course, as you know, it is straightforward to translate this piece of code
    to Python, since, as previously said, the API is the same for both languages:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如你所知，将这段代码转换为 Python 非常简单，因为如前所述，两个语言的 API 是相同的：
- en: '[PRE134]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: 'In this section, we covered how to write a simple Ghidra script in both supported
    languages: Java and Python.'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们介绍了如何用两种支持的语言编写简单的 Ghidra 脚本：Java 和 Python。
- en: Summary
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to use existing Ghidra scripts, how to easily
    adapt them to your needs, and finally, how to develop an extremely simple script
    for your preferred language as an introduction to this topic.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章，你学习了如何使用现有的 Ghidra 脚本，如何轻松地根据需求调整它们，最后，如何为你喜欢的编程语言编写一个极其简单的脚本，作为本主题的入门。
- en: In [*Chapter 6*](B16207_06_Final_SK_ePub.xhtml#_idTextAnchor108), *Scripting
    Malware Analysis*, and [*Chapter 9*](B16207_09_Final_SK_ePub.xhtml#_idTextAnchor155),
    *Scripting Binary Audits*, you will improve your skills in Ghidra scripting by
    developing and analyzing more complex scripts applied to malware analysis and
    binary auditing.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 6 章*](B16207_06_Final_SK_ePub.xhtml#_idTextAnchor108)，*脚本化恶意软件分析*，和 [*第
    9 章*](B16207_09_Final_SK_ePub.xhtml#_idTextAnchor155)，*脚本化二进制审计*，你将通过开发和分析更复杂的脚本来提高你的
    Ghidra 脚本技能，这些脚本用于恶意软件分析和二进制审计。
- en: In the next chapter, you will learn how to debug Ghidra by integrating it with
    the Eclipse IDE, which is an extremely useful and required skill to extend Ghidra
    features, as well as for exploring its internals.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将学习如何通过将 Ghidra 与 Eclipse IDE 集成来调试 Ghidra，这是一个极其有用且必备的技能，能帮助你扩展 Ghidra
    的功能，同时也是探索其内部工作原理的关键。
- en: Questions
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Why are Ghidra scripts useful? What is something that you can do with them?
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么 Ghidra 脚本有用？你能用它们做些什么？
- en: How are scripts organized in Ghidra? Is this organization related to its own
    source code or with the location of the script on the filesystem?
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 脚本在 Ghidra 中是如何组织的？这种组织方式是与它自身的源代码有关，还是与脚本在文件系统中的位置相关？
- en: Why is there no difference between the Java and Python Ghidra scripting APIs?
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么 Java 和 Python 的 Ghidra 脚本 API 之间没有区别？
