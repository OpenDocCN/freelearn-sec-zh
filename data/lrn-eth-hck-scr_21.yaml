- en: Cross-Site Scripting Vulnerabilities
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨站脚本漏洞
- en: In both this and the following chapter, we're going to study a vulnerability
    called **cross-site scripting** (**XSS**) so that we know how to discover XSS
    vulnerabilities. But we will start off by learning about XSS attacks and XSS vulnerabilities.
    Then we will exploit the reflected vulnerability of XSS. Later, we will be looking
    at stored XSS, which is another vulnerability of XSS, and also try to launch an
    attack. Then we will look into exploiting XSS, and at the end of the chapter,
    we will learn how you can protect yourself against these vulnerabilities.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章以及接下来的章节中，我们将学习一种叫做 **跨站脚本** (**XSS**) 的漏洞，学习如何发现 XSS 漏洞。但我们会从了解 XSS 攻击和
    XSS 漏洞开始。然后我们将利用 XSS 的反射型漏洞。接下来，我们将讨论存储型 XSS，这是另一种 XSS 漏洞，并尝试发起攻击。最后，我们将学习如何防护
    XSS 漏洞。
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introduction to XSS
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XSS 简介
- en: Reflected XSS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反射型 XSS
- en: Stored XSS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储型 XSS
- en: XSS BeEF exploitation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XSS BeEF 利用
- en: XSS protection
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XSS 防护
- en: Introduction to XSS
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XSS 简介
- en: Now let's learn more about XSS. This type of vulnerability allows an attacker
    to inject JavaScript into a page. JavaScript is a programming language, and using
    this vulnerability, an attacker would be able to execute code written in JavaScript
    into a certain page, such as a website. JavaScript is a client-side language,
    so when the code is executed, it will be executed on the client, on the user,
    the person who is browsing the web page. It's not going to be executed on the
    server, so even if our code results in us getting a reverse shell, the shell will
    be coming from the user who is browsing the page, not from the website. So any
    code we write in JavaScript will be exploited or will run on the target user—on
    the people who see the web pages—and not on the web server. So, the web server
    is only going to be used as a means of executing or delivering the code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们了解更多关于 XSS 的知识。这种漏洞允许攻击者将 JavaScript 注入到页面中。JavaScript 是一种编程语言，利用这个漏洞，攻击者能够将用
    JavaScript 编写的代码执行到特定页面上，比如一个网站。JavaScript 是一种客户端语言，因此当代码执行时，它会在客户端——即浏览网页的用户设备上执行，而不是在服务器上执行。因此，即使我们的代码导致我们获得一个反向
    Shell，这个 Shell 也会从浏览页面的用户设备上发起，而不是从网站服务器上发起。所以我们在 JavaScript 中编写的任何代码都会被利用，并且只会在目标用户——即浏览网页的人身上执行，而不是在
    web 服务器上。所以，web 服务器仅仅作为执行或传递代码的工具。
- en: 'There are three main types of XSS vulnerabilities:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: XSS 漏洞主要有三种类型：
- en: '**Persistent or stored**:Stored XSS gets stored in the database. The code that
    we inject will be stored in the database or the page so that every time any person
    views that page, our code will be executed.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持久性或存储型**：存储型 XSS 会将注入的代码存储在数据库中。我们注入的代码将被存储在数据库或页面中，以便每当有人查看该页面时，我们的代码都会被执行。'
- en: '**Reflected**: With reflected XSS, the code will only be executed when the
    target user runs a specific URL that is crafted or written by us. So we will be
    manipulating some sort of URL and sending it to a target, and when the target
    runs that URL, the code will be executed.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反射型**：反射型 XSS 只有当目标用户运行我们精心编写的特定 URL 时，代码才会被执行。所以我们会操控某种 URL 并将其发送给目标，当目标运行该
    URL 时，代码就会被执行。'
- en: '**DOM-based**:DOM-based XSS results from JavaScript code that is written on
    the client, so the code will actually be interpreted and run on the client side
    without having any communication with the web server. This could be very dangerous
    because sometimes web servers apply security and filtration measures to check
    for XSS, but with DOM-based XSS, the code never gets sent to the web server. This
    means that the code would be interpreted and run on the web browser without even
    interacting with the web server, and will be present in websites that update their
    content without refreshing. We''ve all used websites where we enter our username,
    for example, and it loads straight away without having to check with the web server,
    or perhaps we enter some sort of a string and it performs a search without communicating
    with the web server; whatever the process, some websites perform functions without
    communicating with their web server. If we are able to inject into these kinds
    of website, then such injections will not be validated, and they will be executed
    straight away and bypass all validations.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于 DOM**：基于 DOM 的 XSS 是由于客户端编写的 JavaScript 代码所导致的，因此代码实际上会在客户端进行解释和执行，而不需要与
    Web 服务器进行任何通信。这可能非常危险，因为有时 Web 服务器会采取安全措施和过滤措施来检查 XSS，但在基于 DOM 的 XSS 中，代码永远不会发送到
    Web 服务器。这意味着代码将在 Web 浏览器上被解释和执行，甚至不与 Web 服务器进行交互，并且会出现在那些无需刷新即可更新内容的网站上。我们都使用过那种输入用户名时，页面立即加载而不需要与
    Web 服务器检查的网站，或者输入某种字符串进行搜索而不与 Web 服务器通信的网站；无论是哪种过程，一些网站都会在不与 Web 服务器通信的情况下执行功能。如果我们能够注入到这些网站中，那么这些注入将不会被验证，并且会立即执行，绕过所有验证。'
- en: Reflected XSS
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反射型 XSS
- en: Let's learn how to discover these kinds of vulnerabilities. The method is very
    similar to SQL injection. First, you browse through your target and try to inject into
    any textbox or URL that looks similar. Whenever you see a URL with parameters,
    try to inject `something=something` as parameters, or try to inject into textboxes.
    Let's have a look at a reflected XSS example. These are the non-persistent, non-stored
    vulnerabilities where we have to actually send the code to the target, and once
    the target runs the code, it will be executed on their machine.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们学习如何发现这些漏洞。这个方法与 SQL 注入非常相似。首先，你浏览目标网站，并尝试向任何看起来类似的文本框或 URL 注入。每当你看到一个带有参数的
    URL 时，尝试将 `something=something` 作为参数进行注入，或者尝试向文本框注入内容。我们来看看一个反射型 XSS 的例子。这些是非持久性、非存储型的漏洞，我们必须实际将代码发送到目标网站，一旦目标运行了代码，它将在他们的机器上执行。
- en: 'Let''s have a look at our DVWA website and log into it. Inside the DVWA Security tab
    on the left-hand side of the following screenshot, we are going to set the Script
    Security to low:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查看一下我们的 DVWA 网站并登录。在下面截图的左侧 DVWA 安全标签中，我们将把脚本安全设置为低：
- en: '![](assets/53b3d31a-fbe1-4083-87f3-bfbb5f18f950.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/53b3d31a-fbe1-4083-87f3-bfbb5f18f950.png)'
- en: 'As we can see in the following screenshot, we can enter your name in the textbox,
    and it''s just going to say Hello zaid:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在下面的截图中看到的，我们可以在文本框中输入你的名字，它将显示“Hello zaid”：
- en: '![](assets/d666a75d-9dbc-43d2-9273-60798bf780d3.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d666a75d-9dbc-43d2-9273-60798bf780d3.png)'
- en: This is obviously just an example, but the idea is that you can inject into
    textboxes. Also, if we have a look at the URL `10.0.2.15/dvwa/vulnerabilities/xss-r/?name=zaid`,
    we can see that it is using the `GET` method, so we can inject into the URL as
    well. Let us start the D-pad and try to inject XSS code on it and see whether
    the JavaScript code will be executed. We are using a very simple script, the `<script></script>`
    tag. There are a lot of ways of discovering these kinds of vulnerabilities and
    a lot of ways to bypass filters, but for now, we're just having a look at a basic
    example where we can inject a normal script and write `<script>alert("XSS")</script>`—which
    is just a function that gives an alert—to give it a textbox. Then we are going
    to click on Submit and see whether this code will be executed.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这显然只是一个例子，但这个想法是你可以注入到文本框中。另外，如果我们看一下 URL `10.0.2.15/dvwa/vulnerabilities/xss-r/?name=zaid`，我们可以看到它使用了
    `GET` 方法，所以我们也可以注入到 URL 中。让我们启动 D-pad，并尝试在上面注入 XSS 代码，看看 JavaScript 代码是否会被执行。我们使用了一个非常简单的脚本，即
    `<script></script>` 标签。发现这类漏洞的方法有很多种，绕过过滤器的方法也有很多种，但现在我们仅仅查看一个基本的例子，我们可以注入一个普通的脚本并写入
    `<script>alert("XSS")</script>` —— 这只是一个弹出警告的函数 —— 然后提交，看是否会执行该代码。
- en: 'As we can see in the following screenshot, instead of saying Hello zaid, it
    says Hello; and our code has been executed, and it produces a XSS popup:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，页面上并不是显示“Hello zaid”，而是显示了“Hello”；我们的代码已被执行，并且弹出了 XSS 提示框：
- en: '![](assets/d653c35e-ce6b-44e4-b036-be92c37746a5.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d653c35e-ce6b-44e4-b036-be92c37746a5.png)'
- en: If we have a look at the URL `10.0.2.15/dvwa/vulnerabilities/xss-r/?name=<script>alert("XSS")<%2fscripts>#`,
    we can see that it actually already did it for us. But if we copy and paste this
    URL on a notepad, we can see the script in the `name` parameter, and some CSS
    scripting.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看这个 URL `10.0.2.15/dvwa/vulnerabilities/xss-r/?name=<script>alert("XSS")<%2fscripts>#`，我们可以看到它实际上已经为我们做了这些。但如果我们将这个
    URL 复制并粘贴到记事本中，我们可以看到 `name` 参数中的脚本以及一些 CSS 脚本。
- en: Obviously, all of the characters are just HTML escape characters, and if we
    send the URL to anybody, then the code will be executed on the machine of whoever
    views the URL, and it's going to display a popup saying XSS. Let's see how we
    can also inject through the URL. Just to show the whole idea, we will use the
    URL `10.0.2.15/dvwa/vulnerabilities/xss-r/?name=<script>alert("XSS")</scripts>#`.
    If we press *Enter*, the code will be executed. We can copy the URL and send it
    to a certain person, and once they run that code, the code will be executed on
    their machine.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，所有字符都是 HTML 转义字符，如果我们将这个 URL 发送给任何人，那么代码将在查看该 URL 的人机器上执行，并显示一个弹窗提示 XSS。现在我们来看一下如何通过
    URL 注入。为了展示整个概念，我们将使用这个 URL `10.0.2.15/dvwa/vulnerabilities/xss-r/?name=<script>alert("XSS")</scripts>#`。如果我们按下
    *Enter*，代码将会执行。我们可以复制这个 URL 并发送给某个人，一旦他们运行该代码，代码将在他们的机器上执行。
- en: Stored XSS
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储型 XSS
- en: Now let's have a look at a stored XSS example. Stored XSS is very similar to
    reflected XSS—it allows you to inject JavaScript code into the browser. The code
    is executed on the users that visit the page. The only difference is that, with
    reflected XSS, we have to send the URL to our target, so the target has to actually
    click on a URL for the exploit to run. With stored XSS, the code will be stored
    into the database—that is, into the page—so that every time a person runs that
    page, they will see our code and our code will be executed, so we won't need to
    interact with any users or send them anything. Therefore, this could be much more
    dangerous than reflected XSS.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一下一个存储型 XSS 示例。存储型 XSS 与反射型 XSS 非常相似——它允许你将 JavaScript 代码注入到浏览器中。代码会在访问页面的用户的机器上执行。唯一的区别是，对于反射型
    XSS，我们需要将 URL 发送给目标，目标必须实际点击 URL 才能触发漏洞。对于存储型 XSS，代码会存储在数据库中——即存储在页面中——这样每次某人访问该页面时，他们都会看到我们的代码并且代码会被执行，所以我们不需要与任何用户互动或者发送任何东西给他们。因此，这可能比反射型
    XSS 更加危险。
- en: 'So, let''s have a look at this. Click on the XSS stored tab on the left. We
    will see a page, as shown in the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们看看这个。点击左侧的 XSS 存储标签，我们将看到一个页面，如下截图所示：
- en: '![](assets/3a1400c6-efbd-4e0b-8198-8d791d4c0434.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3a1400c6-efbd-4e0b-8198-8d791d4c0434.png)'
- en: 'The page only allows us to add a message to the system. Now we are going to
    enter `zaid` in the Name textbox. We''re just going to do a normal test to begin
    with. We''re going to enter `message body` in the Message textbox, and then we
    are going to click on the Sign Guestbook button. We can see in the following screenshot
    that zaid added a message called message body:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 该页面只允许我们向系统添加一条消息。现在，我们将会在姓名文本框中输入 `zaid`。我们首先进行一个普通的测试。接着，我们会在消息文本框中输入 `message
    body`，然后点击“签名留言簿”按钮。我们可以在以下截图中看到，zaid 添加了一条名为 message body 的消息：
- en: '![](assets/fbe20ebe-7788-4d83-893a-dd96de40bb2b.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fbe20ebe-7788-4d83-893a-dd96de40bb2b.png)'
- en: So, if we switch to a different DVWA machine in a different place and go to
    the XSS stored tab, we will be able see that there are two entries. The entries
    will be loaded from the database, and they contain the entries in that database.
    If we managed to inject code instead of a message, then the code will run on the
    machine of whoever runs this page without us even needing to send that person
    any code.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果我们切换到另一台位于不同地点的 DVWA 机器并访问 XSS 存储标签，我们将能看到两个条目。这些条目会从数据库加载，并且它们包含数据库中的内容。如果我们成功注入了代码而不是消息，那么代码将在每次运行该页面的人的机器上执行，而我们甚至不需要发送任何代码给他们。
- en: 'Let''s try to inject into the DVWA that is running in the Kali environment.
    Let''s enter the Name as `zaid`. We are going to try to enter our code in the
    Message textbox. We will enter it as `<script>`, and we are going to use the exact
    same test code that we used in the previous section, just a message saying `XSS`.
    Again, very basic code, but it serves for the purposes of this attack. We''re
    going to make the code say `alert("XSS")`, and then we are going to click on Sign
    Guestbook button. So the code is as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试将代码注入到运行在 Kali 环境中的 DVWA 中。让我们将名字输入为 `zaid`。我们将尝试将我们的代码输入到消息文本框中。我们将其输入为
    `<script>`，并且我们将使用与上一节相同的测试代码，只是一个显示 `XSS` 的消息。再次强调，非常基础的代码，但它足以用于此攻击的目的。我们将让代码显示
    `alert("XSS")`，然后点击“Sign Guestbook”按钮。因此，代码如下所示：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We will see that we get XSS displayed in the pop-up alert, but the real magic
    happens when a normal person accesses the page:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到弹出警报中显示的 XSS，但当普通人访问页面时才会真正发生奇迹：
- en: '![](assets/a6ba38aa-68ff-43d4-ad21-035f003f6fc9.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a6ba38aa-68ff-43d4-ad21-035f003f6fc9.png)'
- en: Let's assume that DVWA is just a normal website and people are just coming to
    browse it. Once they go to the XSS stored tab on the website, the JavaScript code
    will be executed on their system from the website. The code will come from the
    website and will be executed on each user that visits the page. Again, we're just
    implementing a proof-of-concept here; in the next sections, we'll see how to further
    exploit this kind of vulnerability.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 假设 DVWA 只是一个普通的网站，人们只是来浏览它。一旦他们转到网站上的 XSS 存储选项卡，JavaScript 代码将从网站上在他们的系统上执行。代码将来自网站并在访问该页面的每个用户上执行。再次强调，我们这里只是实施概念验证；在接下来的部分中，我们将看到如何进一步利用这种类型的漏洞。
- en: XSS BeEF exploitation
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XSS BeEF 利用
- en: We haven't yet seen a good way of exploiting XSS vulnerabilities; all we have
    done so far is inject a very simple code that displays an alert on the screen
    saying that this website is vulnerable. What we are going to do now is something
    more advanced. We want to control the victims and do stuff on the target computers,
    on the people that visit the vulnerable pages where we have injected our code.
    We're going to use the BeEF browser to do this. We had a look at BeEF in previous
    chapters. What we're going to do here is use the BeEF hook URL and inject it into
    the stored XSS page so that everybody who visits that page will be hooked to BeEF.
    Then, we'll be able to run all the commands that BeEF allows us to run on the
    target computer.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有找到一种有效利用 XSS 漏洞的好方法；到目前为止，我们所做的一切只是注入了一个非常简单的代码，在屏幕上显示一个警报，说明这个网站存在漏洞。我们现在要做的是更高级的操作。我们想要控制受害者，在访问我们注入代码的漏洞页面时，在目标计算机上执行操作。我们将使用
    BeEF 浏览器来实现这一点。我们在之前的章节中已经看过 BeEF。我们现在要做的是使用 BeEF 钩子 URL，并将其注入到存储型 XSS 页面中，以便每个访问该页面的人都会被连接到
    BeEF。然后，我们将能够在目标计算机上运行 BeEF 允许我们运行的所有命令。
- en: 'Let''s start BeEF. If we look at the online browsers, we have no victims at
    the moment. So, in order to hook victims to this framework and gain access to
    the functionality of BeEF, we need to inject a particular script instead of the
    alert:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们启动 BeEF。如果我们查看在线浏览器，目前没有受害者。因此，为了将受害者钩入到这个框架并访问 BeEF 的功能，我们需要注入特定的脚本而不是警报：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Replace the `IP` in the preceding code with your current IP. Remember in the
    previous sections, we were injecting an `alert` script into the URL, or into the
    XSS stored page. In this example, we''re going to be injecting a script that hooks the
    target onto our BeEF browser so that we can exploit them. We are going to copy
    the preceding script and then we are going to go to our DVWA website. We are just
    going to make sure that the security is set to low in DVWA''s Security tab. Start
    the BeEF browser on Kali machine. Go to the DVWA website and under the XSS stored
    tab, we''re are going to enter the Name as `beef`, and we''ll enter the Message
    as the hook URL that we got from the BeEF Terminal. Again will need to modify
    the IP address in the hook URL to our own IP address. So, instead of just the
    IP address of the website, we are going to enter our own IP address, which is
    `10.0.2.15`. Now, the site wont let us add any more characters because the Message
    field is configured in a way that doesn''t allow more than a certain number of
    characters. Instead, we can bypass this very easily by right-clicking and selecting
    the Inspect Element option from the drop-down menu:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 将前面代码中的`IP`替换为你当前的 IP 地址。记住，在之前的部分，我们将一个`alert`脚本注入到了 URL 或 XSS 存储页面中。在这个例子中，我们将注入一个脚本，将目标挂钩到我们的
    BeEF 浏览器上，以便我们可以对其进行利用。我们将复制前面的脚本，然后访问我们的 DVWA 网站。确保在 DVWA 的安全性选项卡中将安全设置为低。在 Kali
    机器上启动 BeEF 浏览器，访问 DVWA 网站，在 XSS 存储选项卡下，我们将名称设置为`beef`，并将消息字段设置为我们从 BeEF 终端获得的挂钩
    URL。再次提醒，需要将挂钩 URL 中的 IP 地址修改为我们自己的 IP 地址。所以，除了网站的 IP 地址外，我们将输入自己的 IP 地址，`10.0.2.15`。现在，网站不允许我们再添加更多字符，因为消息字段配置为不允许超过一定字符数。我们可以通过右键单击并从下拉菜单中选择“检查元素”选项轻松绕过这一限制：
- en: '![](assets/1755d2bf-5710-49e1-83db-4d3555723b5d.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1755d2bf-5710-49e1-83db-4d3555723b5d.png)'
- en: 'Then we are going to modify `maxlength`, setting it to `500` instead of `50`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将修改`maxlength`，将其设置为`500`，而不是`50`：
- en: '![](assets/e125725d-5f0e-475b-9475-586d643deb47.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e125725d-5f0e-475b-9475-586d643deb47.png)'
- en: 'Now we can add more characters. We are going to close the Inspect Element dialog box
    and set the IP to `10.0.2.15`, which is our current IP. We are then going to click
    the Sign Guestbook button, and this should make it work. Now, if we go to our
    target, which is our Linux computer that has been hooked as a target, it can be
    seen to the left of the BeEF window in the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以添加更多字符了。我们将关闭检查元素对话框，并将 IP 设置为 `10.0.2.15`，这是我们的当前 IP 地址。然后我们将点击“签名留言簿”按钮，这应该可以使其生效。现在，如果我们访问我们的目标，也就是已经被挂钩的
    Linux 计算机，可以在以下截图中看到它出现在 BeEF 窗口的左侧：
- en: '![](assets/f5544af3-7062-4322-8202-dab94ba33f9f.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f5544af3-7062-4322-8202-dab94ba33f9f.png)'
- en: Obviously, this is not our target; it is just us who are looking at the site,
    and the hook has been executed on our browser. Our target is actually the Windows
    device, or any person who is going to be visiting this XSS stored page. Because
    this is a stored XSS, just like we explained, the code will be executed on the
    machine of any person who visits the page.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这不是我们的目标；只是我们在查看网站，挂钩已经在我们的浏览器上执行。我们的目标实际上是 Windows 设备，或者任何将访问这个 XSS 存储页面的人。由于这是一个存储型
    XSS，就像我们之前解释的，代码将在任何访问该页面的人的机器上执行。
- en: 'Now, if we go back to BeEF browser, we should see the Windows device, and we
    will be able to see that it''s shown up in the Online Browsers:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们返回到 BeEF 浏览器，我们应该能看到 Windows 设备，并且可以看到它出现在在线浏览器列表中：
- en: '![](assets/d4a646fe-e889-4e15-a485-8895b0b057e6.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d4a646fe-e889-4e15-a485-8895b0b057e6.png)'
- en: 'So we have basically hooked the Windows device, and we can now run the large
    number of functions that BeEF allows us to use. Next, we are going to click on
    our target and go to the Commands tab. Right now, we just want to run a specific
    command, which is just an `alert` command like we were using before, just to confirm
    that everything is working. We are going to use `Create Alert Dialog`, and we
    can set the Alert text as anything we want. We are going to leave it as `BeEF
    Alert Dialog`, and we will just click on Execute:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们基本上已经挂钩了 Windows 设备，现在可以运行 BeEF 允许我们使用的大量功能。接下来，我们将点击我们的目标并转到“命令”选项卡。目前，我们只想运行一个特定命令，就是像之前一样使用的`alert`命令，来确认一切是否正常工作。我们将使用`创建警告对话框`，并且可以将警告文本设置为任何我们想要的内容。我们将其保留为`BeEF
    警告对话框`，然后点击“执行”：
- en: '![](assets/aacf0a05-3d0d-4b00-9d77-7069d8a8755f.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aacf0a05-3d0d-4b00-9d77-7069d8a8755f.png)'
- en: 'Now, if we go on our target computer, we can see that the alert dialog is working,
    as shown in the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们进入目标计算机，我们可以看到弹出对话框正在正常工作，如下图所示：
- en: '![](assets/9dcf4af4-852f-42eb-8f9c-6d152297f18d.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9dcf4af4-852f-42eb-8f9c-6d152297f18d.png)'
- en: Now, anybody who browses our target website—the vulnerable website—will get
    hooked to  BeEF, and we can then run all the commands that we've been looking
    at. So, all the commands that we see in the client-side attacks—such as gaining
    full access using a fake notification bar, getting a screenshot, injecting a keylogger—can
    be used on any person who visits the vulnerable page because we injected our hook
    into that page, not into the browser. Our hook is a part of the page, so every
    time the page is loaded by anyone, they will be hooked to the BeEF browser.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，任何浏览我们目标网站——易受攻击网站——的人都会被钩住并连接到 BeEF，我们随后可以运行所有我们之前看到的命令。因此，所有在客户端攻击中看到的命令——例如通过虚假的通知栏获取完全访问权限、获取屏幕截图、注入键盘记录器——都可以应用到访问该易受攻击页面的任何人身上，因为我们将钩子注入到了页面中，而不是浏览器中。我们的钩子是页面的一部分，所以每当页面被任何人加载时，他们都会被钩住并连接到
    BeEF 浏览器。
- en: XSS protection
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XSS 防护
- en: 'Now let''s talk about how we can prevent XSS vulnerabilities. These vulnerabilities
    exist because whenever a user enters something into a textbox or a parameter,
    that input is displayed in the HTML, so it''s treated as if it''s part of the
    page. Therefore, if there is JavaScript in it, the code is executed. To prevent
    this exploit, the best thing to do is to try and minimize the usage of untrusted
    input. Given this exploit, we should try to minimize occasions where the user
    inputs something or where something is input from parameters. Also, make sure
    that we always escape whatever is going to be displayed or used in the HTML page,
    because XSS can not only be injected into places where things are displayed on
    the page, but it can also be injected into parameters of certain elements of the
    HTML page. Escaping means that we convert each of the characters shown in the
    following screenshot to what they would be represented by in HTML. We can do this
    using our own script:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来讨论如何防止 XSS 漏洞。这些漏洞存在的原因是每当用户在文本框或参数中输入内容时，输入会显示在 HTML 中，因此它被视为页面的一部分。因此，如果其中包含
    JavaScript 代码，那么这段代码就会被执行。为了防止这种漏洞，最好的方法是尽量减少不受信任输入的使用。鉴于这一漏洞，我们应该尽量减少用户输入内容的场合，或是减少从参数中输入内容的机会。同时，确保我们始终对将要显示或在
    HTML 页面中使用的内容进行转义，因为 XSS 不仅可以注入到页面上显示内容的地方，还可以注入到 HTML 页面某些元素的参数中。转义意味着我们将下图所示的每个字符转换为它们在
    HTML 中的表示方式。我们可以通过自己的脚本来实现这一点：
- en: '![](assets/784a3cc8-ef24-4130-aaa6-7cc10852440b.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/784a3cc8-ef24-4130-aaa6-7cc10852440b.png)'
- en: 'Now let''s see how it happens. Starting from the vulnerable web page that we
    are using, let''s go to the XXS stored page. Let''s inspect the element that is
    highlighted in the following screenshot, which is where we injected our alert,
    and if we right-click and go to Inspect Element in the drop-down menu, it will
    show us the HTML of the highlighted element:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看它是如何发生的。从我们正在使用的易受攻击的网页开始，进入 XXS 存储页面。我们来查看下图中突出显示的元素，这是我们注入警告的位置。如果右键点击并选择下拉菜单中的“检查元素”，它会显示出该元素的
    HTML：
- en: '![](assets/4bc67cd7-c726-490b-a543-5d08755fb6fa.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4bc67cd7-c726-490b-a543-5d08755fb6fa.png)'
- en: If we scan through it, we will see that we have the Name, which is zaid, and
    then the other input, which is the Message. It's a script, and what the script
    does is displays an alert which says XSS, so it's exactly what we injected into
    it when we made the comment. So, every time we run this page, this piece of code
    gets executed. We need to make sure that every time a user enters something, and
    every time something is displayed on a page or is used somewhere in the elements
    of the page (even the `id` parameter, for example, is a parameter of the `<div>` tag,
    but it isn't displayed), then it can be injected as well. Hackers can try to inject
    hooks into the parameters—they can try to inject hooks into the image attributes,
    for example, make an image and inject a hook into the source or the URL.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们扫描它，就会看到我们有一个名字字段，值是 zaid，接下来是另一个输入框，就是消息。它是一个脚本，而这个脚本的作用是弹出一个显示 XSS 的警告，这正是我们在发表评论时注入的内容。因此，每次我们运行这个页面时，这段代码都会被执行。我们需要确保每次用户输入内容时，以及每次某个内容在页面上显示或在页面元素中使用时（即使是
    `id` 参数，例如，它是 `<div>` 标签的参数，但并不显示），它也可能被注入。黑客可以尝试将钩子注入到参数中——例如，他们可以尝试将钩子注入到图片属性中，制作一张图片并将钩子注入到源或
    URL 中。
- en: Let's try an example where every time a user's input is used anywhere on the
    page—even if we don't see it—we make sure that we escape that input and ensure
    that it does not contain any code, and if the input does contain any code, that
    it's converted to an equivalent that will not be run. It's converted to its HTTP
    equivalent so that we see `alert` in the message. We see the message as a script
    `alert` of an XSS vulnerability, but it will never be executed on the target person
    when they run it.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一个示例，每次用户输入在页面上被使用时—即使我们看不见它—我们都要确保对该输入进行转义，并确保其中不包含任何代码。如果输入中确实包含了代码，则将其转换为一个等效的内容，这样它就不会被执行。它会被转换为HTTP等效内容，以便我们看到消息中的`alert`。我们看到的是一个脚本`alert`的XSS漏洞消息，但它在目标计算机上运行时永远不会被执行。
- en: Now, as a user, to prevent ourselves from being victim of an XSS attack, the
    URL coming to us will probably look like the URL of a trusted website; for example,
    let's say that we work in a company that had an XSS vulnerability. We log into
    our company and the code gets executed on our machine. Once this happens, there
    isn't much we can do, so we need to be careful beforehand. With BeEF, we saw that
    in order to exploit the vulnerabilities, we showed, for example, a fake update
    to the target computer. So if we get a message stating that there is an update,
    we should go to the actual website of the software that (apparently) needs updating
    to check. So, if the Firefox browser states that there is an update for its software,
    go to the Firefox website and see whether there is actually an update, and if
    there is, download it from that website—don't download it from the notification
    that's received. Also, make sure to download it from an HTTPS website. Once we
    download it, we can inspect and check it the same way that we've seen before in
    order to make sure that there are no backdoors or anything in it. We can also
    check the `md5sum` to make sure that the file hasn't been manipulated while it
    was being downloaded, the same as we did with the fake Facebook login when we
    were using BeEF. So, whenever we are told that we have been logged out and are
    asked to log back in again, ignore the request and go to Facebook, make sure it's
    using HTTPS, and then log in to Facebook. Always try to be careful when notifications
    pop up telling you that you need to do things—always be aware, and never trust
    them.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，作为用户，为了防止自己成为XSS攻击的受害者，传送到我们的URL可能看起来像是一个可信网站的URL；例如，假设我们在一个存在XSS漏洞的公司工作。我们登录到公司的系统后，代码会在我们的机器上执行。一旦发生这种情况，我们就很难采取措施，因此我们需要事先小心。通过BeEF，我们看到为了利用这些漏洞，我们展示了一个假更新给目标计算机。例如，如果我们收到一条更新消息，我们应该访问该软件（看起来）需要更新的官方网站进行确认。所以，如果Firefox浏览器提示有更新，应该去Firefox官网查看是否真的有更新，如果有，应该从该官网下载安装—而不是从收到的通知中下载安装。同时，确保从HTTPS网站下载。一旦我们下载了文件，我们可以像之前看到的那样检查，确保文件中没有后门或其他恶意内容。我们还可以检查`md5sum`，以确保文件在下载过程中没有被篡改，就像我们在使用BeEF进行假Facebook登录时所做的那样。因此，任何时候如果我们被告知已被登出并要求重新登录，忽略这个请求，直接访问Facebook，确保它使用的是HTTPS，然后登录到Facebook。每当有通知弹出告诉你需要做某些事情时，一定要小心—保持警觉，永远不要相信这些通知。
- en: Summary
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about XSS attacks, which can be described as vulnerabilities
    that are found on web applications. We also learned that there are three major
    types of XSS vulnerabilities—the reflected and stored. We looked at the reflected
    vulnerability and used the DVWA website to launch this attack. We also learned
    about the stored XSS vulnerability, and even practically implemented it. Then,
    in the exploitation section, we performed an advanced attack where we controlled
    the victim's machine. Finally, we learned how to protect ourselves from these
    vulnerabilities. In the next chapter, we are going to be learning about a tool
    called ZAP.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了XSS攻击，这些攻击可以被描述为出现在Web应用程序中的漏洞。我们还了解了XSS漏洞的三种主要类型—反射型和存储型。我们研究了反射型漏洞，并使用DVWA网站来发起攻击。我们还了解了存储型XSS漏洞，并且甚至进行了实践实现。接着，在利用环节，我们进行了一个高级攻击，控制了受害者的计算机。最后，我们学习了如何保护自己免受这些漏洞的侵害。在下一章中，我们将学习一个名为ZAP的工具。
