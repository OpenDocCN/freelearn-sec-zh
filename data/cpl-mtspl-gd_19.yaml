- en: Evasion with Metasploit
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metasploit 的逃避
- en: 'We have covered all of the major phases of a penetration test in the last eight
    chapters. In this chapter, we will include the problems that tend to occur for
    a penetration tester in real-world scenarios. Gone are the days where a straightforward
    attack would pop you a shell in Metasploit. With the increase of attack surface
    these days, security perspectives have also increased gradually. Hence, tricky
    mechanisms are required to circumvent security controls of various natures. In
    this chapter, we''ll look at different methods and techniques that can prevent
    security controls deployed at the target''s endpoint. Throughout this chapter,
    we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的八章中，我们已经涵盖了渗透测试的主要阶段。在本章中，我们将包括渗透测试人员在现实场景中可能遇到的问题。过去的简单攻击可以在 Metasploit
    中弹出一个 shell 的日子已经一去不复返。随着攻击面的增加，安全视角也逐渐增加。因此，需要巧妙的机制来规避各种性质的安全控制。在本章中，我们将探讨可以防止部署在目标端点的安全控制的不同方法和技术。在本章的整个过程中，我们将涵盖：
- en: Bypassing AV detection for Meterpreter payloads
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绕过 AV 检测 Meterpreter 负载
- en: Bypassing IDS systems
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绕过 IDS 系统
- en: Bypassing firewalls and blocked ports
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绕过防火墙和被阻止的端口
- en: So, let's get started with the evasion techniques.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们开始逃避技术。
- en: Evading Meterpreter using C wrappers and custom encoders
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 C 封装和自定义编码器规避 Meterpreter
- en: 'Meterpreter is one of the most popular payloads used by security researchers.
    However, being popular, it is detected by most of the AV solutions out there and
    tends to get flagged in a flash. Let''s generate a simple Metasploit executable
    using `msfvenom` as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Meterpreter 是安全研究人员使用最广泛的负载之一。然而，由于其流行，大多数 AV 解决方案都会检测到它，并很快被标记。让我们使用 `msfvenom`
    生成一个简单的 Metasploit 可执行文件，如下所示：
- en: '![](img/5ddba1a4-be28-4168-a7c0-8a0d8ba862bf.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ddba1a4-be28-4168-a7c0-8a0d8ba862bf.png)'
- en: 'We created a simple reverse TCP Meterpreter executable backdoor using the `msfvenom`
    command. Additionally, we have mentioned `LHOST` and `LPORT` followed by the format,
    which is EXE for the PE/COFF executable. We have also prevented null, line feed,
    and carriage return bad characters by mentioning them using the `-b` switch. We
    can see that the executable was generated successfully. Let''s move this executable
    to the `apache` folder and try downloading and executing it on the Windows 10
    operating system secured by Windows Defender and Qihoo 360 Antivirus. However,
    before running it, let''s start a matching handler as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `msfvenom` 命令创建了一个简单的反向 TCP Meterpreter 可执行后门。此外，我们已经提到了 `LHOST` 和 `LPORT`，然后是格式，即
    PE/COFF 可执行文件的 EXE。我们还通过使用 `-b` 开关来防止空字符、换行和回车坏字符。我们可以看到可执行文件已成功生成。让我们将这个可执行文件移动到
    `apache` 文件夹，并尝试在由 Windows Defender 和奇虎 360 杀毒软件保护的 Windows 10 操作系统上下载并执行它。但是，在运行之前，让我们按照以下方式启动匹配处理程序：
- en: '![](img/bef384f4-f63f-4844-9cd0-38256e707d93.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bef384f4-f63f-4844-9cd0-38256e707d93.png)'
- en: 'We can see that we started a matching handler on port `4444` as a background
    job. Let''s try downloading and executing the Meterpreter backdoor on the Windows
    system and check whether we get the reverse connection or not:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们在端口 `4444` 上启动了一个匹配处理程序作为后台作业。让我们尝试在 Windows 系统上下载并执行 Meterpreter 后门，并检查是否能够获得反向连接：
- en: '![](img/d4903df9-f206-402c-b47c-81b1df91c631.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d4903df9-f206-402c-b47c-81b1df91c631.png)'
- en: 'Oops! It looks like the AV is not even allowing the file to download. Well,
    that''s quite typical in the case of a plain Meterpreter payload backdoor. Let''s
    quickly calculate the MD5 hash of the `Sample.exe` file as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！看起来 AV 甚至不允许文件下载。嗯，在普通 Meterpreter 负载后门的情况下，这是相当典型的。让我们快速计算 `Sample.exe`
    文件的 MD5 哈希如下：
- en: '![](img/5dee96cb-1a90-4cd1-84f4-76a000e0d789.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5dee96cb-1a90-4cd1-84f4-76a000e0d789.png)'
- en: 'Let''s check the file on a popular online AV scanner such as [http://nodistribute.com/](http://nodistribute.com/),
    as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一个流行的在线 AV 扫描器上的文件，比如 [http://nodistribute.com/](http://nodistribute.com/)，如下所示：
- en: '![](img/82eb15e4-d099-4cb8-ade2-55f35220f0e4.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/82eb15e4-d099-4cb8-ade2-55f35220f0e4.png)'
- en: Well! We can see that 27/37 Antivirus solutions detected the file. Pretty bad,
    right? Let's look at how we can circumvent the situation by making use of C programming
    and a little encoding. Let's get started.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯！我们可以看到 27/37 个杀毒软件解决方案检测到了该文件。相当糟糕，对吧？让我们看看如何通过使用 C 编程和一点编码来规避这种情况。让我们开始吧。
- en: Writing a custom Meterpreter encoder/decoder in C
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 C 中编写自定义 Meterpreter 编码器/解码器
- en: 'To circumvent the security controls at the target, we will make use of custom
    encoding schemes, say XOR encoding, followed by one or two other encodings. Additionally,
    we will not use the conventional PE/COFF format and instead we will generate shellcode
    to work things around. Let''s use `msfvenom` in a similar way as we did previously
    for the PE format. However, we will change the output format to C, as shown in
    the following screenshot:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了规避目标的安全控制，我们将使用自定义编码方案，比如 XOR 编码，然后再加上一两种其他编码。此外，我们将不使用传统的 PE/COFF 格式，而是生成
    shellcode 来解决问题。让我们像之前为 PE 格式那样使用 `msfvenom`。但是，我们将把输出格式改为 C，如下面的截图所示：
- en: '![](img/68131936-78fd-4fcf-a68a-67838e2e55b4.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/68131936-78fd-4fcf-a68a-67838e2e55b4.png)'
- en: 'Viewing the contents of the `Sample.c` file, we have the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 `Sample.c` 文件的内容，我们有以下内容：
- en: '![](img/57947eb7-ddcf-441f-9ddf-e13d88ab5f29.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57947eb7-ddcf-441f-9ddf-e13d88ab5f29.png)'
- en: 'Since we have the shellcode ready, we will build an encoder in C, which will
    XOR encode the shellcode with the byte of our choice, which is `0xAA`, as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经准备好 shellcode，我们将在 C 中构建一个编码器，它将使用我们选择的字节 `0xAA` 进行 XOR 编码，如下所示：
- en: '![](img/ce358121-f247-4bc6-ab51-9f6077d8e11a.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ce358121-f247-4bc6-ab51-9f6077d8e11a.png)'
- en: 'Let''s see how we can create an encoder program in C as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何创建一个 C 编码器程序，如下所示：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is a straightforward program where we have copied the generated shellcode
    into an array `buf[]` and simply iterated through it and used Xor on each of its
    bytes with the `0xAA` byte and printed it on the screen. Compiling and running
    this program will output the following encoded payload:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个直接的程序，我们将生成的shellcode复制到一个数组`buf[]`中，然后简单地迭代并对每个字节使用`0xAA`字节进行Xor，并将其打印在屏幕上。编译和运行此程序将输出以下编码的有效负载：
- en: '![](img/13486eca-c31a-4283-8d79-fd9e11831a9a.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/13486eca-c31a-4283-8d79-fd9e11831a9a.png)'
- en: 'Now that we have the encoded payload, we will need to write a decryption stub
    executable which will convert this payload into the original payload upon execution.
    The decryption stub executable will actually be the final executable to be delivered
    to the target. To understand what happens when a target executes the decryption
    stub executable, we can refer to the following diagram:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了编码的有效负载，我们需要编写一个解密存根可执行文件，它将在执行时将此有效负载转换为原始有效负载。解密存根可执行文件实际上将是交付给目标的最终可执行文件。要了解目标执行解密存根可执行文件时会发生什么，我们可以参考以下图表：
- en: '![](img/451beaca-4d35-40d9-972e-c0b20d37a8b6.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/451beaca-4d35-40d9-972e-c0b20d37a8b6.png)'
- en: 'We can see that upon execution, the encoded shellcode gets decoded to its original
    form and is executed. Let''s write a simple C program demonstrating this, as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，在执行时，编码的shellcode被解码为其原始形式并执行。让我们编写一个简单的C程序来演示这一点，如下所示：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Again, a very straightforward program; we used the `VirtualAlloc` function
    to reserve space in the virtual address space of the calling program. We have
    also used `memcpy` to copy the decoded bytes into the space reserved by the `VirtualAlloc`
    pointer. Next, we execute the bytes held at the pointer. So, let''s test our program
    and see how it works on the target''s environment. We will follow the same steps;
    let''s find the MD5 hash of the program as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，一个非常直接的程序；我们使用`VirtualAlloc`函数在调用程序的虚拟地址空间中保留空间。我们还使用`memcpy`将解码后的字节复制到`VirtualAlloc`指针保留的空间中。接下来，我们执行指针处保存的字节。所以，让我们测试一下我们的程序，看看它在目标环境中的运行情况。我们将按照相同的步骤进行；让我们找到程序的MD5哈希如下：
- en: '![](img/5618bdf3-5ade-4f9e-b88b-976fbf72bf8d.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5618bdf3-5ade-4f9e-b88b-976fbf72bf8d.png)'
- en: 'Let''s try downloading and executing the program as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试下载和执行程序如下：
- en: '![](img/8a548de0-bb45-4956-bf86-535ab30927cd.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8a548de0-bb45-4956-bf86-535ab30927cd.png)'
- en: 'No issues with the download! Yippee! It''s a normal pop-up saying the file
    is unknown; nothing to worry about. Let''s try executing the file now, as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 下载没有问题！耶！这是一个正常的弹出窗口，显示文件未知；没有什么可担心的。让我们尝试执行文件，如下所示：
- en: '![](img/bbc42f2a-c24d-47b1-a6a3-03b2a9a71ff5.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bbc42f2a-c24d-47b1-a6a3-03b2a9a71ff5.png)'
- en: 'Bang bang! We got the Meterpreter access to the target running Qihoo 360 Premium
    Antivirus on a 64-bit Windows 10 OS, fully protected and patched. Let''s give
    it a try on [http://nodistribute.com/](http://nodistribute.com/) as well:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 砰砰！我们成功获得了在64位Windows 10操作系统上运行奇虎360高级杀毒软件的目标的Meterpreter访问权限，完全受保护和补丁。让我们也在[http://nodistribute.com/](http://nodistribute.com/)上试一试：
- en: '![](img/62fdbbdc-e501-4dc3-bd18-2a3cf0d58605.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62fdbbdc-e501-4dc3-bd18-2a3cf0d58605.png)'
- en: 'We can see that a few of the antivirus solutions still flagged the executable
    as malware. However, our technique bypassed some of the major players which included
    Avast, AVG, Avira, Kaspersky, Comodo, and even Norton and McAfee. The rest of
    the nine AV solutions can be bypassed as well with some tricks such as delayed
    execution, file pumping, and much more. Let''s confirm the check by right-clicking
    and scanning with Qihoo 360 Antivirus as well:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，一些杀毒软件解决方案仍然将可执行文件标记为恶意软件。然而，我们的技术绕过了一些主要的参与者，包括Avast、AVG、Avira、卡巴斯基、Comodo，甚至诺顿和麦克菲。其余的九个杀毒软件解决方案也可以通过一些技巧绕过，比如延迟执行、文件泵送等。让我们通过右键单击并使用奇虎360杀毒软件进行扫描来确认检查：
- en: '![](img/564f4424-7c8a-4f16-9faa-fa509d952776.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/564f4424-7c8a-4f16-9faa-fa509d952776.png)'
- en: No problems whatsoever! Throughout this exercise, we saw the journey of a payload
    from its executable state to its shellcode form. We saw how a little custom decoder
    application could do wonders when it comes to bypassing AV solutions.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都没有问题！在整个过程中，我们看到了有效负载从可执行状态到shellcode形式的过程。我们看到了一个小型自定义解码器应用程序在绕过AV解决方案时的神奇效果。
- en: Evading intrusion detection systems with Metasploit
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit规避入侵检测系统
- en: 'Your sessions on the target can be short-lived if an intrusion detection system
    is in place. **Snort**, a popular IDS system, can generate quick alerts when an
    anomaly is found on the network. Consider the following case of exploiting a Rejetto
    HFS server with a target with Snort IDS enabled:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果入侵检测系统存在，您在目标上的会话可能会很短暂。Snort，一种流行的IDS系统，可以在发现网络上的异常时生成快速警报。考虑以下利用启用了Snort
    IDS的目标的Rejetto HFS服务器的情况：
- en: '![](img/2cd53825-34da-4496-9c8e-0c311c4a519f.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2cd53825-34da-4496-9c8e-0c311c4a519f.png)'
- en: 'We can see that we successfully got the Meterpreter session. However, the image
    on the right suggests some priority one issues. I must admit that the rules created
    by the Snort team and the community are pretty strict and tough to bypass at times.
    However, for the maximum coverage of Metasploit evasion techniques and for the
    sake of learning, we have created a simple rule to detect logins at the vulnerable
    HFS server, which is as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们成功获得了Meterpreter会话。然而，右侧的图像显示了一些一级问题。我必须承认，Snort团队和社区创建的规则非常严格，有时很难绕过。然而，为了最大限度地覆盖Metasploit规避技术，并为了学习的目的，我们创建了一个简单的规则来检测易受攻击的HFS服务器上的登录，如下所示：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding rule is a simple one suggesting that if any `GET` request generated
    from an external network is using any port to the target network on HTTP ports,
    the message must be displayed. Can you think of how we can bypass such a standard
    rule? Let's discuss it in the next section.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 上述规则是一个简单的规则，建议如果来自外部网络的任何`GET`请求在HTTP端口上使用任何端口到目标网络，则必须显示消息。您能想到我们如何绕过这样一个标准规则吗？让我们在下一节讨论一下。
- en: Using random cases for fun and profit
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用随机案例进行娱乐和利润
- en: 'Since we are working with the HTTP requests, we can always use the Burp repeater
    to aid quick testing. So, let''s work with Snort and Burp side by side and begin
    some testing:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在处理HTTP请求，我们可以始终使用Burp repeater来帮助快速测试。因此，让我们并排使用Snort和Burp进行一些测试：
- en: '![](img/73fdda54-4a07-4b89-bb2e-2d418a4e7bc1.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/73fdda54-4a07-4b89-bb2e-2d418a4e7bc1.png)'
- en: 'We can see that as soon as we sent out a request to the target URI, it got
    logged to Snort, which is not good news. Nevertheless, we saw the rule, and we
    know that Snort tries to match the contents of `GET` to the one in the request.
    Let''s try modifying the case of the `GET` request and repeat the request as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，一旦我们向目标URI发送请求，它就会被记录到Snort中，这不是好消息。尽管如此，我们看到了规则，我们知道Snort试图将`GET`的内容与请求中的内容进行匹配。让我们尝试修改`GET`请求的大小写并重复请求如下：
- en: '![](img/1db79df2-d221-4e13-93f7-a4f92acdc3ed.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1db79df2-d221-4e13-93f7-a4f92acdc3ed.png)'
- en: 'No new logs have been generated! Nice. We just saw how we can change the casing
    of the method and fool a simple rule. However, we still don''t know how we can
    achieve this technique in Metasploit. Let me introduce you to the evasion options
    as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 没有生成新的日志！很好。我们刚刚看到了如何改变方法的大小写并愚弄一个简单的规则。但是，我们仍然不知道如何在Metasploit中实现这种技术。让我向你介绍规避选项：
- en: '![](img/487c0e72-9ed9-4e9f-9170-720ab9a94986.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/487c0e72-9ed9-4e9f-9170-720ab9a94986.png)'
- en: 'We can see that we have plenty of evasion options available to us. I know you
    have guessed this one. However, if you haven''t, we are going to use the `HTTP::method_random_case`
    option here, and we will retry the exploit as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到有很多规避选项可供我们选择。我知道你已经猜到了这一点。但是，如果你没有，我们将在这里使用`HTTP::method_random_case`选项，并按以下方式重试利用：
- en: '![](img/ac405b5a-334a-42a4-9725-40499fb22887.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac405b5a-334a-42a4-9725-40499fb22887.png)'
- en: 'Let''s exploit the target as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按以下方式利用目标：
- en: '![](img/9a0e1ff6-5c30-4c9f-ba54-2d71eff3c127.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9a0e1ff6-5c30-4c9f-ba54-2d71eff3c127.png)'
- en: We are clean! Yup! We bypassed the rule with ease. Let's try some more complicated
    scenarios in the next section.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很干净！是的！我们轻松地规避了规则。让我们在下一节中尝试一些更复杂的场景。
- en: Using fake relatives to fool IDS systems
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用伪装目录来愚弄IDS系统
- en: 'Similar to the previous approach, we can use fake relatives in Metasploit to
    eventually reach the same conclusion while juggling directories. Let''s see the
    following ruleset:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前的方法类似，我们可以在Metasploit中使用伪装目录来最终得出相同的结论。让我们看看以下规则集：
- en: '![](img/407ae463-d3a1-4c57-b2e4-0d723ab9daf1.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/407ae463-d3a1-4c57-b2e4-0d723ab9daf1.png)'
- en: We can see that the preceding Snort rule checks for `POST /script` content in
    the incoming packets. We can do this in multiple ways, but let's use a new method,
    which is fake directory relatives. This technique will add previous random directories
    to reach the same directory; for example, if a file exists in the `/Nipun/abc.txt`
    folder, the module will use something like `/root/whatever/../../Nipun/abc.txt`,
    which means it has used some other directory and eventually came back to the same
    directory in the end. Hence, this makes the URL long enough for IDS to improve
    efficiency cycles. Let's consider an example.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到前面的Snort规则检查传入数据包中的`POST /script`内容。我们可以用多种方法做到这一点，但让我们使用一种新方法，即伪装目录关系。这种技术将在到达相同目录时添加以前的随机目录；例如，如果文件存在于`/Nipun/abc.txt`文件夹中，模块将使用类似`/root/whatever/../../Nipun/abc.txt`的内容，这意味着它使用了其他目录，最终又回到了相同的目录。因此，这使得URL足够长，以提高IDS的效率循环。让我们考虑一个例子。
- en: 'In this exercise, we will use the Jenkins `script_console` command execution
    vulnerability to exploit the target running at `192.168.1.149`, as shown in the
    following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将使用Jenkins `script_console`命令执行漏洞来利用运行在`192.168.1.149`上的目标，如下截图所示：
- en: '![](img/c907e3c3-7398-42ce-a58d-cce8bf2c269f.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c907e3c3-7398-42ce-a58d-cce8bf2c269f.png)'
- en: 'We can see that we have Jenkins running on port `8888` of the target IP, `192.168.1.149`.
    Let''s use `exploit/multi/http/Jenkins_script_console module` to exploit the target.
    We can see that we have already set options such as `RHOST`, `RPORT`, and `TARGEURI`.
    Let''s exploit the system:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到Jenkins运行在目标IP `192.168.1.149`的端口`8888`上。让我们使用`exploit/multi/http/Jenkins_script_console
    module`来利用目标。我们已经设置了`RHOST`、`RPORT`和`TARGEURI`等选项。让我们来利用系统：
- en: '![](img/282a21d7-4f4d-4482-9058-24b757373cc1.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/282a21d7-4f4d-4482-9058-24b757373cc1.png)'
- en: 'Success! We can see that we got Meterpreter access to the target with ease.
    Let''s see what Snort has in store for us:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 成功！我们可以看到我们轻松地获得了对目标的Meterpreter访问。让我们看看Snort为我们准备了什么：
- en: '![](img/791e6f5d-44fa-41db-8995-a42338f3f550.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/791e6f5d-44fa-41db-8995-a42338f3f550.png)'
- en: 'It looks like we just got caught! Let''s set the following evasion option in
    Metasploit:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我们刚刚被发现了！让我们在Metasploit中设置以下规避选项：
- en: '![](img/7a7c47d8-51c4-42fd-872d-c1961127b156.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7a7c47d8-51c4-42fd-872d-c1961127b156.png)'
- en: 'Now let''s rerun the exploit and see if we can get anything in Snort:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们重新运行利用程序，看看Snort中是否有任何信息：
- en: '![](img/62879983-1596-4577-a2a3-0299424c4a38.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62879983-1596-4577-a2a3-0299424c4a38.png)'
- en: 'Nothing in Snort! Let''s see how our exploit went:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Snort中没有任何信息！让我们看看我们的利用进行得如何：
- en: '![](img/13dfb0f9-c600-45f8-a2f5-032de9a54477.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/13dfb0f9-c600-45f8-a2f5-032de9a54477.png)'
- en: Nice! We evaded Snort yet again! Feel free to try all other Snort rules to have
    a better understanding of how things work behind the scenes.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 不错！我们再次规避了Snort！随意尝试所有其他Snort规则，以更好地了解幕后的运作方式。
- en: Bypassing Windows firewall blocked ports
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绕过Windows防火墙封锁的端口
- en: 'When we try to execute Meterpreter on a Windows target system, we may never
    get Meterpreter access. This is common in situations where an administrator has
    blocked a particular set of ports on the system. In this example, let''s try circumventing
    such cases with a smart Metasploit payload. Let''s quickly set up a scenario as
    follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们尝试在Windows目标系统上执行Meterpreter时，可能永远无法获得Meterpreter访问。这在管理员封锁了系统上的特定端口时很常见。在这个例子中，让我们尝试用一个聪明的Metasploit有效载荷来规避这种情况。让我们快速设置一个场景如下：
- en: '![](img/6cda48ca-1c52-4569-b2c1-084aa6d00543.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6cda48ca-1c52-4569-b2c1-084aa6d00543.png)'
- en: 'We can see that we have set up a new firewall rule and specified port numbers
    `4444-6666`. Proceeding to the next step, we will choose to block these outbound
    ports, as shown in the following screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们已经设置了一个新的防火墙规则，并指定了端口号`4444-6666`。继续下一步，我们将选择阻止这些出站端口，如下面的屏幕截图所示：
- en: '![](img/40a2eaf4-aeeb-45db-8583-99911e206125.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/40a2eaf4-aeeb-45db-8583-99911e206125.png)'
- en: 'Let''s check the firewall status and our rule:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查防火墙状态和我们的规则：
- en: '![](img/23ccbae1-c8af-4084-9004-c5a20638767b.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23ccbae1-c8af-4084-9004-c5a20638767b.png)'
- en: 'We can see that the rule is set up and our firewall is enabled on both home
    and public networks. Consider that we have Disk Pulse Enterprise software running
    at the target. We already saw in the previous chapters that we can exploit this
    software. Let''s try executing the exploit:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到规则已经设置，并且我们的防火墙在家庭和公共网络上都已启用。考虑到我们在目标上运行了Disk Pulse Enterprise软件。我们已经在前几章中看到我们可以利用这个软件。让我们尝试执行利用：
- en: '![](img/40216a0d-611c-46ab-ab4a-d882cc6a596b.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/40216a0d-611c-46ab-ab4a-d882cc6a596b.png)'
- en: We can see that the exploit did run, but we didn't get access to the target
    because the firewall blocked us out on port `4444`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到利用确实运行了，但我们没有访问目标，因为防火墙在端口`4444`上阻止了我们。
- en: Using the reverse Meterpreter on all ports
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在所有端口上使用反向Meterpreter
- en: 'To circumvent this situation, we will use the `windows/meterpreter/reverse_tcp_allports`
    payload, which will try every port and will provide us with access to the one
    that isn''t blocked. Also, since we are listening on port `4444` only, we will
    need to redirect the traffic from all the random ports to port `4444` on our end.
    We can do this using the following command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了规避这种情况，我们将使用`windows/meterpreter/reverse_tcp_allports`有效载荷，它将尝试每个端口，并为我们提供对未被阻止的端口的访问。此外，由于我们只在端口`4444`上监听，我们需要将所有随机端口的流量重定向到我们端口`4444`。我们可以使用以下命令来实现：
- en: '![](img/f24bc475-e0db-4ff5-a6f9-7a1114e18c9d.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f24bc475-e0db-4ff5-a6f9-7a1114e18c9d.png)'
- en: 'Let''s execute the exploit again with all ports using the reverse `tcp meterpreter`
    payload:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次使用反向`tcp meterpreter`有效载荷在所有端口上执行利用：
- en: '![](img/5c34c905-caf8-4991-a477-bff3f8c5205d.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5c34c905-caf8-4991-a477-bff3f8c5205d.png)'
- en: We can see that we got Meterpreter access to the target with ease. We circumvented
    the Windows firewall and got a Meterpreter connection. This technique is beneficial
    in situations where admins keep a pro-active approach towards the inbound and
    outbound ports.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们轻松地获得了对目标的Meterpreter访问。我们规避了Windows防火墙并获得了Meterpreter连接。这种技术在管理员对入站和出站端口采取积极态度的情况下非常有益。
- en: 'At this point, you might be wondering if the preceding technique was a big
    deal, right? Or, you might be confused. Let''s view the whole process in Wireshark
    to understand things at the packet level:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您可能会想知道前面的技术是否很重要，对吗？或者，您可能会感到困惑。让我们在Wireshark中查看整个过程，以了解数据包级别的情况：
- en: '![](img/0d1244a2-1930-4363-ae33-3510937c9db4.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0d1244a2-1930-4363-ae33-3510937c9db4.png)'
- en: We can see that initially, the data from our kali machine was sent to port `80`,
    causing the buffer to overflow. As soon as the attack was successful, a connection
    from the target system to port `6667` (the first port after the blocked range
    of ports) was established. Also, since we routed all the ports from `4444-7777`
    to port `4444`, it got routed and eventually led back to port `4444`, and we got
    Meterpreter access.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到最初，来自我们kali机器的数据被发送到端口`80`，导致缓冲区溢出。一旦攻击成功，目标系统与端口`6667`（在被阻止的端口范围之后的第一个端口）建立了连接。此外，由于我们将所有端口从`4444-7777`路由到端口`4444`，它被路由并最终回到端口`4444`，我们获得了Meterpreter访问权限。
- en: Summary and exercises
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结和练习
- en: Throughout this chapter, we learned AV evasion techniques using custom encoders,
    we bypassed the signature matching of IDS systems, and we also avoided Windows
    firewall blocked ports using the all-TCP-ports Meterpreter payload.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了使用自定义编码器的AV规避技术，我们绕过了IDS系统的签名匹配，还使用了所有TCP端口Meterpreter有效载荷避开了Windows防火墙封锁的端口。
- en: 'You can try the following exercises to enhance your evasion skills:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以尝试以下练习来增强您的规避技能：
- en: Try delaying execution of the payload without using `sleep()` function in the
    decoder and analyze the detection ratio change
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试延迟有效载荷的执行，而不使用解码器中的`sleep()`函数，并分析检测比率的变化
- en: Try using other logical operations such as NOT, double XOR, and use simple ciphers
    such as ROT with the payloads
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试使用其他逻辑操作，如NOT，双重XOR，并使用简单的密码，如ROT与有效载荷
- en: Bypass at least 3 signatures from Snort and get them fixed
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绕过至少3个Snort签名并修复它们
- en: Learn and use SSH tunneling for bypassing firewalls
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习并使用SSH隧道来绕过防火墙
- en: The next chapter relies heavily on these techniques and takes a deep dive into
    Metasploit.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将大量依赖这些技术，并深入探讨Metasploit。
