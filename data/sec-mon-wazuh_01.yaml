- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Intrusion Detection System (IDS) Using Wazuh
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Wazuh的入侵检测系统（IDS）
- en: Organizations of all sizes are increasingly concerned about protecting their
    digital landscape. With technology growing and digital systems becoming more important,
    cyber threats are escalating rapidly. Organizations must take a proactive approach
    toward cybersecurity and deploy mechanisms and appropriate visibility controls
    that not only prevent but also detect threats or intrusions. The main goal of
    prevention techniques is to keep threats from getting into a network or system.
    Like deploying perimeter security solutions such as firewalls, **intrusion prevention
    system** (**IPS**) infrastructure, visibility and control, and, most importantly,
    endpoint protection and insider threats. They intend to put up barriers that make
    it impossible for bad people to get in or execute any cyber-attacks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 各种规模的组织越来越关注保护其数字化环境。随着技术的不断发展，数字系统变得愈加重要，网络威胁也在快速升级。组织必须采取主动的网络安全策略，部署机制和适当的可视性控制，不仅要防止威胁的入侵，还要能够检测到威胁或入侵。预防技术的主要目标是防止威胁进入网络或系统。例如，部署边界安全解决方案，如防火墙、**入侵防御系统**（**IPS**）基础设施、可视性与控制，最重要的是端点保护和内部威胁。它们的目的是设置屏障，使恶意人员无法进入或发起任何网络攻击。
- en: Detection techniques, along with preventive measures, involve keeping an eye
    on systems all the time for any signs of compromise or strange behavior and taking
    the required steps to mitigate the execution of reported malicious activity/behavior.
    One of the popular tools for this purpose is an **intrusion detection system**
    (**IDS**). Wazuh can help organizations detect potential threats or ongoing attacks,
    and an IDS also allows a security team to enable the early detection of possible
    breaches or suspicious activity, and, as a result, the security team can quickly
    respond to mitigate potential damage. Wazuh is a popular IDS result, which works
    on various levels including host-level visibility along with the capability to
    collect, aggregate, index, and analyze logs from various sources at a perimeter
    and infrastructure level; it also offers end-user activity monitoring solutions
    and protection. It provides a ton of features, including log collection. In addition
    to log collection, it has various inbuilt modules including vulnerability management,
    file integrity, malware detection, automated incident response, and various external
    integrations. Another open source popular IDS/IPS solution is **Suricata**, which
    works on a network level that helps the security team detect anomalous network
    behavior. In this book, we get hands-on with Wazuh capabilities and features,
    however, in this chapter, our focus will be on integrating Suricata IDS/IPS with
    Wazuh. This will help us detect any network anomalous behavior.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 检测技术与预防措施一起，涉及时刻监控系统，发现任何入侵迹象或异常行为，并采取必要的措施以减轻恶意活动/行为的执行。为了这个目的，**入侵检测系统**（**IDS**）是其中一个常用工具。Wazuh可以帮助组织检测潜在威胁或正在进行的攻击，IDS还允许安全团队及早发现潜在的安全漏洞或可疑活动，进而使安全团队能迅速响应，减轻潜在的损害。Wazuh是一个流行的IDS工具，能在多个层面上工作，包括主机级可视性，并能够收集、聚合、索引和分析来自多个源的日志，不论是在边界还是基础设施层面；它还提供终端用户活动监控和保护功能。它具有大量的功能，包括日志收集。除了日志收集外，它还内置了多个模块，包括漏洞管理、文件完整性、恶意软件检测、自动化事件响应以及各种外部集成。另一个流行的开源IDS/IPS解决方案是**Suricata**，它在网络层面工作，帮助安全团队检测异常的网络行为。在本书中，我们将实操Wazuh的能力和特性，但在这一章中，我们将重点讲解如何将Suricata
    IDS/IPS与Wazuh集成。这将帮助我们检测任何网络异常行为。
- en: 'In this chapter, we will learn the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将学习以下内容：
- en: What is an IDS?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是IDS？
- en: Configuring an IDS on Ubuntu and Windows Server
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Ubuntu和Windows Server上配置IDS
- en: Getting started with Wazuh and Suricata
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用Wazuh和Suricata
- en: Detecting network scanning probes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测网络扫描探针
- en: Testing web-based attacks with **Damn Vulnerable Web** **Application** (**DVWA**).
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试基于网页的攻击与**极易漏洞网页** **应用程序**（**DVWA**）。
- en: Testing a **network-based IDS** (**NIDS**) using **tmNIDS**
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**tmNIDS**测试**基于网络的IDS**（**NIDS**）
- en: What is an IDS?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是IDS？
- en: An IDS works by monitoring network traffic, system logs, and other relevant
    information to identify and analyze patterns and signatures associated with known
    threats or abnormal behavior. The primary goal of an IDS is to detect and alert
    security administrators about potential threats or breaches. When an IDS identifies
    suspicious behavior or patterns, it generates an alert, notifying the security
    team to take appropriate action.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: IDS 通过监控网络流量、系统日志和其他相关信息来识别和分析与已知威胁或异常行为相关的模式和特征。IDS 的主要目标是检测并警告安全管理员潜在的威胁或漏洞。当
    IDS 识别到可疑行为或模式时，它会生成警报，通知安全团队采取适当的措施。
- en: Types of IDS
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IDS 类型
- en: 'There are two main types of IDS: NIDS and **host-based IDS** (**HIDS**). The
    main difference between a NIDS and a HIDS is the monitoring scope and types of
    activities they detect. Have a look at the following table to look at the differences:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: IDS 有两种主要类型：NIDS 和 **基于主机的 IDS**（**HIDS**）。NIDS 和 HIDS 之间的主要区别在于监控范围和它们检测的活动类型。请查看下表以了解它们之间的差异：
- en: '|  | **NIDS** | **HIDS** |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '|  | **NIDS** | **HIDS** |'
- en: '| --- | --- | --- |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Scope | It works at the network level, monitoring the data going to and from
    different devices to look for abnormal behaviors or events that might indicate
    an intrusion. | It is installed directly on the host’s and monitor’s log files,
    system calls, file integrity, and other host-specific files for any unusual activities.
    |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 范围 | 它在网络层工作，监控进出不同设备的数据，寻找可能表明入侵的异常行为或事件。 | 它直接安装在主机上，监控日志文件、系统调用、文件完整性和其他主机特定文件中的任何异常活动。
    |'
- en: '| Location | Functions at one or more central places in a network’s infrastructure
    to monitor and analyze traffic going through those points. | Operates locally
    on individual hosts or devices, keeping an eye on actions that are unique to that
    machine. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 位置 | 在网络基础设施中的一个或多个中心位置运行，监控并分析通过这些点的流量。 | 在单个主机或设备上本地运行，关注与该机器特定的操作。 |'
- en: '| Detection focus | A NIDS detects network attacks and anomalies. It can detect
    port scans, DoS attacks, intrusion attempts, and other network infrastructure
    threats. | A HIDS monitors host activity. It detects unauthorized access, file
    system changes, critical system file modifications, and suspicious processes or
    behaviors that may indicate a compromised host. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 检测重点 | NIDS 检测网络攻击和异常。它可以检测端口扫描、DoS 攻击、入侵尝试和其他网络基础设施威胁。 | HIDS 监控主机活动。它检测未经授权的访问、文件系统更改、关键系统文件修改以及可能表明主机已被入侵的可疑进程或行为。
    |'
- en: '| Popular tools | Suricata, Snort | Wazuh, OSSEC |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 流行工具 | Suricata, Snort | Wazuh, OSSEC |'
- en: Table 1.1 – NIDS versus HIDS
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1.1 – NIDS 与 HIDS
- en: In the following diagram, you can see that a NIDS is installed to monitor network
    traffic while an HIDS monitors individual devices.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，你可以看到一个 NIDS 被安装用来监控网络流量，而一个 HIDS 则监控单个设备。
- en: '![Figure 1.1 – NIDS versus HIDS](img/B19549_1_01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – NIDS 与 HIDS](img/B19549_1_01.jpg)'
- en: Figure 1.1 – NIDS versus HIDS
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – NIDS 与 HIDS
- en: What is Suricata?
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Suricata？
- en: '**Suricata** is an open-source network **intrusion detection and prevention
    system** (**IDS/IPS**). It is intended to monitor network traffic and detect a
    variety of threats, including malware, intrusion attempts, and network anomalies.
    Using a rule-based language, Suricata analyzes network packets in real time, allowing
    it to identify and respond to suspicious or malicious activities. The non-profit
    organization **OISF** (**Open Information Security Foundation**) owns and develops
    Suricata.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**Suricata** 是一个开源网络 **入侵检测与防御系统**（**IDS/IPS**）。它旨在监控网络流量，并检测各种威胁，包括恶意软件、入侵尝试和网络异常。使用基于规则的语言，Suricata
    实时分析网络数据包，使其能够识别并响应可疑或恶意活动。非营利组织 **OISF**（**开放信息安全基金会**）拥有并开发 Suricata。'
- en: Suricata can also be deployed as an IPS in order to detect and block malicious
    traffic to the organization. Although IPS deployment might sound like the obvious
    option, unfortunately, it isn’t that friendly; it often blocks legitimate traffic
    as well if they aren’t configured properly. And yes, this is why the detection
    approach is sometimes better than the prevention approach.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Suricata 也可以作为 IPS 部署，以便检测和阻止恶意流量进入组织。虽然部署 IPS 听起来是显而易见的选择，但不幸的是，它并不那么友好；如果配置不当，它往往也会阻止合法流量。是的，这就是为什么有时检测方法比预防方法更好的原因。
- en: 'You can download Suricata from the following link: [https://suricata.io/download/](https://suricata.io/download/).'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下链接下载 Suricata：[https://suricata.io/download/](https://suricata.io/download/)。
- en: 'There are multiple use cases of Suricata IDS; some of the important use cases
    are as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Suricata IDS有多种用例；以下是一些重要的用例：
- en: '**Network traffic monitoring**: Suricata analyzes real-time network traffic
    for threats and anomalies. Organizations need to smartly deploy Suricata at various
    points in the network to analyze both incoming and outgoing traffic. This use
    case can help us detect malware, **Distributed Denial of Service** (**DDoS**)
    attacks, port scans, reconnaissance data exfiltration, and so on.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络流量监控**：Suricata分析实时网络流量以检测威胁和异常。组织需要在网络中的各个关键点智能部署Suricata，以分析进出的流量。这种用例可以帮助我们检测恶意软件、**分布式拒绝服务**（**DDoS**）攻击、端口扫描、侦察数据外泄等。'
- en: '**Signature and anomaly detection**: Suricata detects known attack patterns
    or signatures by checking network traffic against a library of rules and patterns
    that have already been set up. In this chapter, we will use the Suricata ruleset
    created by the **Emerging Threats** (**ET**) community. This ruleset can help
    us detect known malware, viruses, web-based attacks (SQL Injection, cross-site
    scripting attacks, etc.), known network attack signatures, and so on.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**签名和异常检测**：Suricata通过检查网络流量与已设置的规则和模式库匹配来检测已知的攻击模式或签名。在本章中，我们将使用**Emerging
    Threats**（**ET**）社区创建的Suricata规则集。该规则集可以帮助我们检测已知的恶意软件、病毒、基于Web的攻击（SQL注入、跨站脚本攻击等）、已知的网络攻击签名等。'
- en: '**Protocol analysis**: Suricata can deeply examine many different network technologies,
    such as HTTP, DNS, and TLS. This helps us to discover anomalous behaviors of protocols,
    such as unusual HTTP requests, DNS tunneling, and unexpected SSL/TLS handshakes.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协议分析**：Suricata可以深入检查诸如HTTP、DNS和TLS等多种网络技术。这有助于我们发现协议的异常行为，例如不寻常的HTTP请求、DNS隧道和意外的SSL/TLS握手。'
- en: '**Logging and alerting**: Suricata keeps logs and sends out alerts when it
    detects possible threats. These alerts can be used to get security teams to act
    right away, or they can be added to **security information and event management**
    (**SIEM**) systems so that they can be analyzed further and linked to other security
    events. Wazuh, Splunk, Elastic, and all the popular SIEM solutions support integration
    with the Suricata IDS.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志记录和警报**：Suricata保留日志并在检测到可能的威胁时发送警报。这些警报可用于促使安全团队立即采取行动，或者被添加到**安全信息与事件管理**（**SIEM**）系统中，以便进一步分析并与其他安全事件关联。Wazuh、Splunk、Elastic等所有流行的SIEM解决方案均支持与Suricata
    IDS的集成。'
- en: Let’s learn about the deployment methods of the Suricata IDS.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解一下Suricata IDS的部署方法。
- en: How organizations use Suricata as an IDS
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组织如何将Suricata用作IDS
- en: 'There are several ways to deploy the Suricata IDS and some of the important
    and popular deployment methods are explained in the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种部署Suricata IDS的方式，以下是一些重要和流行的部署方法：
- en: '**Inline deployment at network perimeter**: Suricata sits between the external
    internet connection and the internal network, actively monitoring and scrutinizing
    network traffic in real time. It can be deployed as a physical appliance or as
    a **virtual machine** (**VM**). The network traffic passes through Suricata, which
    analyzes the packets and acts based on the criteria that have been defined.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络周界的内联部署**：Suricata位于外部互联网连接与内部网络之间，实时监控和审查网络流量。它可以作为物理设备或**虚拟机**（**VM**）部署。网络流量经过Suricata分析数据包，并根据已定义的标准采取行动。'
- en: '![Figure 1.2 – Inline deployment at network perimeter](img/B19549_1_02.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2 – 网络周界的内联部署](img/B19549_1_02.jpg)'
- en: Figure 1.2 – Inline deployment at network perimeter
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.2 – 网络周界的内联部署](img/B19549_1_02.jpg)'
- en: '**Internal network monitoring**: Suricata sensors are strategically located
    within the internal network in order to capture network traffic between segments
    or departments. These sensors could be physical or virtual devices. They analyze
    the captured traffic and transmit alerts or records to a centralized management
    system for additional analysis and response. As you can see in the following diagram,
    the sensors will export the data to a centralized server.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内部网络监控**：Suricata传感器被战略性地放置在内部网络中，以捕获各个段或部门之间的网络流量。这些传感器可以是物理设备或虚拟设备。它们分析捕获的流量，并将警报或记录传输到集中管理系统进行进一步分析和响应。正如您在以下图表中看到的那样，传感器将数据导出到一个集中服务器。'
- en: '![Figure 1.3 – Internal network monitoring](img/B19549_1_03.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3 – 内部网络监控](img/B19549_1_03.jpg)'
- en: Figure 1.3 – Internal network monitoring
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – 内部网络监控
- en: '**Cloud environment monitoring**: Suricata can be deployed as virtual appliances
    or containers in AWS and Azure cloud environments. It is installed within the
    cloud infrastructure and monitors network traffic within virtual networks and
    between cloud resources. The captured traffic is transmitted to a central analysis
    system for response detection.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云环境监控**：Suricata 可以部署为虚拟设备或容器在 AWS 和 Azure 云环境中。它安装在云基础设施内部，监控虚拟网络和云资源之间的网络流量。捕获的流量被传输到中央分析系统进行响应检测。'
- en: '![Figure 1.4 – Cloud security monitoring (AWS)](img/B19549_1_04.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4 – 云安全监控 (AWS)](img/B19549_1_04.jpg)'
- en: Figure 1.4 – Cloud security monitoring (AWS)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – 云安全监控 (AWS)
- en: '**Network tap deployment**: Suricata is used in conjunction with **network
    taps** or **port mirroring**. Taps are strategically located at key network nodes
    to capture a copy of network traffic, which is then sent to Suricata for analysis.
    This deployment ensures accurate and comprehensive network activity visibility.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络抓包部署**：Suricata 与 **网络抓包** 或 **端口镜像** 结合使用。抓包设备被战略性地放置在关键的网络节点上，捕获网络流量的副本，然后将其发送到
    Suricata 进行分析。这种部署确保了准确和全面的网络活动可见性。'
- en: '![Figure 1.5 – Network tap deployment](img/B19549_1_05.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5 – 网络抓包部署](img/B19549_1_05.jpg)'
- en: Figure 1.5 – Network tap deployment
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – 网络抓包部署
- en: We have learned about the different Suricata deployment methods. In the next
    section, we will learn about Wazuh, its core components and deployment methods,
    and then we will learn how to install Suricata IDS on Ubuntu Server.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了不同的 Suricata 部署方法。在下一节中，我们将学习 Wazuh，它的核心组件和部署方法，然后我们将学习如何在 Ubuntu 服务器上安装
    Suricata IDS。
- en: Getting started with Wazuh and Suricata
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 Wazuh 和 Suricata
- en: 'Wazuh is an open-source security monitoring platform that provides **extended
    detection and response** (**XDR**) and SIEM functionality. Wazuh’s capabilities
    include log analysis, intrusion detection, vulnerability detection, and real-time
    alerting, helping organizations enhance their security posture and respond to
    threats effectively. In this section, we will first get a basic understanding
    of the Wazuh platform and its core components and deployment methods, and then
    we will set up the Wazuh agent and connect with the Wazuh platform. Next, we will
    set up a Suricata IDS and integrate it with the Wazuh agent. Some of the main
    points we will explore are as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Wazuh 是一个提供 **扩展检测和响应** (**XDR**) 和 SIEM 功能的开源安全监控平台。Wazuh 的功能包括日志分析、入侵检测、漏洞检测和实时警报，帮助组织增强其安全姿态并有效应对威胁。在本节中，我们将首先对
    Wazuh 平台及其核心组件和部署方法进行基本了解，然后设置 Wazuh 代理并与 Wazuh 平台连接。接下来，我们将设置 Suricata IDS 并与
    Wazuh 代理集成。我们将探讨的一些主要点包括：
- en: Core components of Wazuh
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wazuh 的核心组件
- en: Wazuh deployment options
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wazuh 的部署选项
- en: Wazuh core features
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wazuh 的核心功能
- en: Wazuh modules
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wazuh 模块
- en: Wazuh administration
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wazuh 管理
- en: Installing the Wazuh server
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Wazuh 服务器
- en: Installing the Wazuh agent
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Wazuh 代理
- en: Installing Suricata on Ubuntu Server
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Ubuntu 服务器上安装 Suricata
- en: Setting up Windows Server with Suricata
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Windows Server 上的 Suricata
- en: The core components of Wazuh
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Wazuh 的核心组件
- en: 'Wazuh provides a centralized platform for monitoring and managing security
    events across the organization’s IT infrastructure. Wazuh collects, analyzes,
    and connects log data from different sources, such as endpoints, network devices,
    firewalls, proxy servers, and cloud instances. Once the logs are collected, Wazuh
    provides several capabilities to the security team such as file integrity monitoring,
    malware detection, vulnerability detection, command monitoring, system inventory,
    threat hunting, security configuration assessment, and incident response. The
    Wazuh solution is made up of three main parts: the Wazuh server, the Wazuh indexer,
    and the Wazuh dashboard. The Wazuh agent is installed on the endpoints that need
    to be monitored.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Wazuh 提供了一个集中式平台，用于跨组织的 IT 基础设施监控和管理安全事件。Wazuh 收集、分析并连接来自不同来源（如终端点、网络设备、防火墙、代理服务器和云实例）的日志数据。一旦日志被收集，Wazuh
    提供多种功能给安全团队，如文件完整性监控、恶意软件检测、漏洞检测、命令监控、系统清单、威胁狩猎、安全配置评估和事件响应。Wazuh 解决方案由三个主要部分组成：Wazuh
    服务器、Wazuh 索引器和 Wazuh 仪表板。Wazuh 代理安装在需要监控的终端上。
- en: The Wazuh server
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Wazuh 服务器
- en: 'This central component is also used to manage the agents and analyze the data
    received from them:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这个中央组件也用于管理代理并分析从它们那里接收到的数据：
- en: It collects logs from several sources such as hosts, network devices, firewalls,
    proxy servers, and syslog servers.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它从多个来源收集日志，如主机、网络设备、防火墙、代理服务器和 syslog 服务器。
- en: Normalizes and standardizes collected logs and events into a uniform format
    for analysis and correlation. It utilizes the Wazuh decoder to parse logs to display
    the logs in a uniform format.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将收集的日志和事件标准化，并统一格式化以进行分析和关联。它利用 Wazuh 解码器解析日志，并以统一格式展示日志。
- en: The Wazuh server is capable of integrating logs from several data sources such
    as syslog, Windows event logs, Windows Sysmon, Docker logs, Palo Alto firewall
    logs, and Check Point firewall logs.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wazuh 服务器能够整合来自多个数据源的日志，如 syslog、Windows 事件日志、Windows Sysmon、Docker 日志、Palo
    Alto 防火墙日志和 Check Point 防火墙日志。
- en: The Wazuh server also provides an API for interaction, allowing remote servers
    or systems to interact and query, for example, the number of active Wazuh agents,
    vulnerability information, Wazuh rule verification, and so on.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wazuh 服务器还提供了一个 API 供交互使用，允许远程服务器或系统进行交互和查询，例如，查询活动的 Wazuh 代理数量、漏洞信息、Wazuh 规则验证等。
- en: The Wazuh indexer
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Wazuh 索引器
- en: 'It is responsible for indexing and storing alerts generated by the Wazuh server:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 它负责索引和存储由 Wazuh 服务器生成的警报：
- en: The Wazuh indexer stores alerts sent by the Wazuh server and acts as a primary
    repository
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wazuh 索引器存储由 Wazuh 服务器发送的警报，并作为主要存储库。
- en: It’s made to handle a lot of security alerts, making sure that storage and indexing
    work well as the system grows
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它被设计用来处理大量的安全警报，确保随着系统的增长，存储和索引的工作能够正常进行。
- en: Note
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Indexing is the process of arranging and arranging data to enable effective
    and quick retrieval. It involves creating a data structure called an **index**.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 索引是将数据整理和安排的过程，以实现有效且快速的检索。它涉及创建一个称为**索引**的数据结构。
- en: The Wazuh indexer provides robust search features that make it possible to quickly
    and thoroughly search through saved alerts using particular criteria or patterns
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wazuh 索引器提供强大的搜索功能，使得可以通过特定的标准或模式快速而全面地搜索保存的警报。
- en: 'The Wazuh indexer uses four index patterns to store the data:'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wazuh 索引器使用四个索引模式来存储数据：
- en: '`wazuh-alerts-*`: This is the index pattern for alerts generated by the Wazuh
    server'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wazuh-alerts-*`：这是由 Wazuh 服务器生成的警报的索引模式。'
- en: '`wazuharchives-*`: This is the index pattern for all events sent to the Wazuh
    server'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wazuharchives-*`：这是所有发送到 Wazuh 服务器的事件的索引模式。'
- en: '`wazuh-monitoring-*`: This pattern is for monitoring the status of Wazuh agents'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wazuh-monitoring-*`：此模式用于监控 Wazuh 代理的状态。'
- en: '`wazuh-statistics-*`: This is used for statistical information about the Wazuh
    server'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wazuh-statistics-*`：用于关于 Wazuh 服务器的统计信息。'
- en: The Wazuh dashboard
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Wazuh 仪表板
- en: The Wazuh dashboard is a web interface that allows you to perform visualization
    and analysis. It also allows you to create rules, monitor events, monitor regulatory
    compliances (such as PCI DSS, GDPR, CIS, HIPPA, and NIST 800-53), detect vulnerable
    applications, and much more.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Wazuh 仪表板是一个 Web 界面，允许你进行可视化和分析。它还允许你创建规则、监控事件、监控合规性（如 PCI DSS、GDPR、CIS、HIPPA
    和 NIST 800-53）、检测漏洞应用程序等。
- en: Wazuh agents
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Wazuh 代理
- en: Wazuh agents are installed on endpoints such as servers, desktops, laptops,
    cloud compute instances, or VMs. Wazuh utilizes the OSSEC HIDS module to collect
    all the endpoint events.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Wazuh 代理安装在如服务器、桌面、笔记本电脑、云计算实例或虚拟机等端点上。Wazuh 使用 OSSEC HIDS 模块收集所有端点事件。
- en: Note
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: OSSEC is a popular and open-source **host-based IDS** (**HIDS**). It is a powerful
    correlation and analysis module that integrates log analysis, file integrity monitoring,
    Windows registry monitoring, centralized policy enforcement, rootkit detection,
    real-time alerting, and active response. It can be installed on most **operating
    systems** (**OSs**) such as Linux, OpenBSD, FreeBSD, MacOS and Windows.Wazuh deployment
    options
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: OSSEC 是一个流行的开源**基于主机的 IDS**（**HIDS**）。它是一个强大的关联和分析模块，集成了日志分析、文件完整性监控、Windows
    注册表监控、集中策略执行、Rootkit 检测、实时警报和主动响应等功能。它可以安装在大多数**操作系统**（**OS**）上，如 Linux、OpenBSD、FreeBSD、MacOS
    和 Windows。Wazuh 部署选项
- en: 'Wazuh is known for its ability to fully monitor security and detect threats.
    It also has several flexible deployment options. Depending on your requirement,
    you can deploy Wazuh in an on-premises server, cloud, Docker container, Kubernetes,
    or another environment. For a production environment, Wazuh core components (i.e.,
    the Wazuh server, the Wazuh indexer, and the Wazuh dashboard) should be installed
    in cluster mode. Cluster mode deployment involves setting up more than one Wazuh
    server node to work collectively. By spreading the work and duties among several
    nodes in the cluster, this configuration aims to improve speed, scalability, and
    resilience. Let’s cover some important deployment options:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Wazuh 以其全面监控安全性和检测威胁的能力而闻名。它还提供了多种灵活的部署选项。根据您的需求，您可以在本地服务器、云环境、Docker 容器、Kubernetes
    或其他环境中部署 Wazuh。对于生产环境，Wazuh 核心组件（即 Wazuh 服务器、Wazuh 索引器和 Wazuh 仪表盘）应以集群模式进行安装。集群模式部署涉及设置多个
    Wazuh 服务器节点进行协同工作。通过在集群中的多个节点之间分配工作和任务，该配置旨在提高速度、可扩展性和弹性。接下来，我们将介绍一些重要的部署选项：
- en: '**Servers**: Putting Wazuh on dedicated servers gives you more power and lets
    you make changes that work with your system. You can utilize on-premises servers
    or cloud instances. Remember, you need multiple server instances to deploy Wazuh
    in cluster mode.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器**：将 Wazuh 部署在专用服务器上可以提供更强大的性能，并让您根据自己的系统进行相应的修改。您可以使用本地服务器或云实例。请记住，您需要多个服务器实例来以集群模式部署
    Wazuh。'
- en: '**VM image**: Wazuh gives you an **Open Virtual Appliance** (**OVA**) formatted
    VM image that is already set up. This can be imported straight into VirtualBox
    or any other virtualization software that works with OVA files. This is good for
    a lab purpose only. You can use this deployment option to test all the scenarios
    mentioned in this book. Download the OVA file from here: [https://documentation.wazuh.com/current/deployment-options/virtual-machine/virtual-machine.html](https://documentation.wazuh.com/current/deployment-options/virtual-machine/virtual-machine.html).'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VM 镜像**：Wazuh 为您提供了一个已经设置好的 **Open Virtual Appliance**（**OVA**）格式的虚拟机镜像。您可以直接将其导入
    VirtualBox 或任何其他支持 OVA 文件的虚拟化软件中。此选项仅适用于实验室用途。您可以使用此部署选项测试本书中提到的所有场景。请从以下链接下载
    OVA 文件：[https://documentation.wazuh.com/current/deployment-options/virtual-machine/virtual-machine.html](https://documentation.wazuh.com/current/deployment-options/virtual-machine/virtual-machine.html)。'
- en: '**Docker container**: Docker is an open platform for building and running applications
    inside an isolated software container. Docker containers are the best way to quickly
    and easily set up Wazuh components in independent environments. This option is
    commonly used for testing, development, or situations where setup and takedown
    need to be done quickly. You can download the Docker image from the link here:
    [https://hub.docker.com/u/wazuh](https://hub.docker.com/u/wazuh).'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker 容器**：Docker 是一个开放平台，用于在隔离的软件容器内构建和运行应用程序。Docker 容器是快速且轻松地在独立环境中设置
    Wazuh 组件的最佳方式。此选项通常用于测试、开发，或需要快速搭建和拆卸的场景。您可以从以下链接下载 Docker 镜像：[https://hub.docker.com/u/wazuh](https://hub.docker.com/u/wazuh)。'
- en: '**Deployment on Kubernetes**: Kubernetes is an open-source container orchestration
    platform. You can opt for this method when managing large-scale deployment with
    multiple containers. This method gives you higher scalability, automated deployment,
    and resource optimization. You can check out the Wazuh Kubernetes repository at
    the following link: [https://github.com/wazuh/wazuh-kubernetes](https://github.com/wazuh/wazuh-kubernetes).'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在 Kubernetes 上部署**：Kubernetes 是一个开源的容器编排平台。当您管理多个容器的大规模部署时，可以选择此方法。此方法提供更高的可扩展性、自动化部署和资源优化。您可以通过以下链接查看
    Wazuh Kubernetes 仓库：[https://github.com/wazuh/wazuh-kubernetes](https://github.com/wazuh/wazuh-kubernetes)。'
- en: 'If you want to test all the use cases throughout the book, I suggest you use
    the Wazuh VM deployment option by downloading the OVA file; however, for the production-level
    deployment, you can choose any of the remaining options. The Wazuh community has
    done a brilliant job in documenting the installation guide. You can refer to this
    link for step-by-step assistance: [https://documentation.wazuh.com/current/installation-guide/index.html](https://documentation.wazuh.com/current/installation-guide/index.html).'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想测试本书中的所有用例，建议您通过下载 OVA 文件使用 Wazuh VM 部署选项；然而，对于生产级部署，您可以选择其他任何部署选项。Wazuh
    社区在文档编写方面做得非常出色，您可以参考以下链接获取逐步帮助：[https://documentation.wazuh.com/current/installation-guide/index.html](https://documentation.wazuh.com/current/installation-guide/index.html)。
- en: Wazuh modules
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Wazuh 模块
- en: 'Wazuh has a set of modules that work together to help organizations handle
    security events, find threats, make sure they are following the rules, and keep
    their systems and data safe. Once you access the Wazuh manager, the topmost option
    is **Modules**. By default, you can find multiple modules categorized under four
    sections as mentioned in the following diagram:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Wazuh 拥有一套模块，它们协同工作，帮助组织处理安全事件、发现威胁、确保遵循规则，并保护系统和数据的安全。一旦访问 Wazuh 管理器，最上方的选项是
    **模块**。默认情况下，您可以找到多个模块，这些模块按照下图所示的四个部分进行分类：
- en: '![Figure 1.6 – Default Wazuh modules](img/B19549_1_06.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6 – 默认 Wazuh 模块](img/B19549_1_06.jpg)'
- en: Figure 1.6 – Default Wazuh modules
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6 – 默认 Wazuh 模块
- en: 'Let us look into each of those four sections in detail:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细了解一下这四个部分：
- en: '**Security information management**: This consists of the **Security Events**
    and **Integrity Monitoring** module. Security alerts will be triggered and displayed
    based on predefined Wazuh rules for identified security events. The Integrity
    Monitoring module monitors any unauthorized changes to critical system files and
    directories.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全信息管理**：这一部分包含 **安全事件** 和 **完整性监控** 模块。安全警报将根据预定义的 Wazuh 规则为已识别的安全事件触发并显示。完整性监控模块监控对关键系统文件和目录的任何未经授权的更改。'
- en: '**Threat detection and response**: By default, this section has two modules:
    **Vulnerabilities** and **MITRE ATT&CK®**. However, you can also add Osquery,
    VirusTotal, and more. The **Vulnerabilities** module identifies, and tracks known
    vulnerabilities in the systems or software. The **MITRE ATT&CK** module maps detected
    threats or incidents to the **MITRE** **ATT&CK** framework.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**威胁检测与响应**：默认情况下，这一部分有两个模块：**漏洞** 和 **MITRE ATT&CK®**。不过，您也可以添加 Osquery、VirusTotal
    等。**漏洞** 模块识别并跟踪系统或软件中已知的漏洞。**MITRE ATT&CK** 模块将检测到的威胁或事件映射到 **MITRE** **ATT&CK**
    框架。'
- en: Note
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '**ATT&CK** stands for **adversarial tactics, techniques, and common knowledge**.
    **MITRE** is a government-funded research organization based in Bedford, MA, and
    McLean, VA. MITRE ATT&CK is a framework that helps organizations with attacker’s
    tactics, techniques, and procedures to test their security controls.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**ATT&CK** 代表 **对抗性战术、技术和常识**。**MITRE** 是一个由政府资助的研究机构，位于马萨诸塞州贝德福德和弗吉尼亚州麦克林。MITRE
    ATT&CK 是一个框架，帮助组织使用攻击者的战术、技术和程序来测试他们的安全控制。'
- en: '**Auditing and Policy Monitoring**: This section consists of three modules:
    the **Policy Monitoring** module, the **System Auditing** module, and the **Security
    configuration** **assessment** module.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**审计与政策监控**：这一部分包含三个模块：**政策监控** 模块、**系统审计** 模块和 **安全配置** **评估** 模块。'
- en: The **Policy Monitoring** module monitors the systems to make sure security
    policies are properly established.
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**政策监控** 模块监控系统，确保安全策略得到妥善建立。'
- en: The **System Auditing** module tracks and audits use activities including use
    login attempts, file access, and privilege changes in the endpoint.
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统审计** 模块跟踪和审计使用活动，包括登录尝试、文件访问和终端的权限变更。'
- en: The **Security configuration assessment** module is a very popular feature that
    checks system configurations against best practices or predefined security standards.
    Wazuh utilizes the CIS benchmark for most of the security configuration checks.
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全配置评估** 模块是一个非常流行的功能，它检查系统配置是否符合最佳实践或预定义的安全标准。Wazuh 利用 CIS 基准来进行大多数安全配置检查。'
- en: Note
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The **Center for Internet Security** (**CIS**) benchmarks are a set of best
    practices that are known around the world and are based on consensus. They are
    meant to help security professionals set up and manage their cybersecurity defenses.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**互联网安全中心** (**CIS**) 基准是一套全球知名的最佳实践，基于共识。它们旨在帮助安全专业人员设置和管理他们的网络安全防御。'
- en: '**Regulatory Compliance**: This section consists of multiple modules including
    PCI DSS compliance, GDPR, HIPPA, NIST 800-53, and TSC modules. Wazuh rules are
    created and tagged with some of these compliances. When any of those rules get
    triggered, we see the alerts. This is how we can align security compliances with
    Wazuh.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合规性监管**：这一部分包含多个模块，包括 PCI DSS 合规性、GDPR、HIPPA、NIST 800-53 和 TSC 模块。Wazuh 规则根据这些合规性创建并标记。当其中的任何规则被触发时，我们会看到警报。这就是如何将安全合规性与
    Wazuh 对接的方式。'
- en: Next, let’s talk about the Wazuh Administration, where we will discuss some
    core features of the Wazuh manager.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们来谈谈 Wazuh 管理部分，在这里我们将讨论 Wazuh 管理器的一些核心功能。
- en: Wazuh Administration
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Wazuh 管理
- en: Under the **Management** section of the Wazuh dashboard, we have the **Administration**
    section. As you can see in the following diagram, the **Administration** section
    includes capabilities such as **Rules**, **Decoders**, **CDB lists**, **Groups**,
    and **Configuration**.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在Wazuh仪表盘的**管理**部分下，我们有**管理**部分。如下面的示意图所示，**管理**部分包括**规则**、**解码器**、**CDB列表**、**组**和**配置**等功能。
- en: '![Figure 1.7 – Wazuh administration](img/B19549_1_07.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图1.7 – Wazuh管理](img/B19549_1_07.jpg)'
- en: Figure 1.7 – Wazuh administration
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7 – Wazuh管理
- en: All the features mentioned under the **Administration** tab play a pivotal role
    in ensuring the effectiveness of the Wazuh platform for real-time monitoring and
    threat detection. We will understand each of these features as explained in the
    following sections.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在**管理**选项卡下提到的所有功能都在确保Wazuh平台在实时监控和威胁检测中的有效性方面发挥着至关重要的作用。我们将在接下来的部分中详细了解每个功能。
- en: Decoders
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解码器
- en: '**Decoders** are responsible for reading incoming log entries, pulling out
    the important information, and putting them into a standard format that the Wazuh
    system can easily understand and analyze. Raw log entries can be in different
    formats, such as syslog, JSON, XML, or custom text formats. The job of the decoder
    is to figure out how these logs are put together and pull out meaningful fields
    and values. There are many pre-built decoders in Wazuh such as the syslog decoder,
    OpenSSH decoder, Suricata decoder, and the Cisco ASA decoder. To understand what
    decoders are and how they work, let us look at how logs from the Barracuda **Web
    Application Firewall** (**WAF**) are processed:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**解码器**负责读取传入的日志条目，提取重要信息，并将其转换为Wazuh系统可以轻松理解和分析的标准格式。原始日志条目可以是不同的格式，如syslog、JSON、XML或自定义文本格式。解码器的任务是弄清楚这些日志是如何构成的，并提取有意义的字段和值。Wazuh中有许多预构建的解码器，例如syslog解码器、OpenSSH解码器、Suricata解码器和Cisco
    ASA解码器。为了理解解码器是什么以及它们是如何工作的，我们来看一下Barracuda **Web应用防火墙**（**WAF**）的日志是如何处理的：'
- en: '[PRE0]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let’s break down the parts of this Wazuh decoder:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下这个Wazuh解码器的部分：
- en: '`decoder name`: This indicates the name of the decoder.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decoder name`：这表示解码器的名称。'
- en: '`parent`: This gives us the name of the parent decoder. The parent decoder
    will be processed before the child decoders.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parent`：这给出了父解码器的名称。父解码器会在子解码器之前处理。'
- en: '`prematch`: This is like a condition that must match to apply the decoder.
    It uses regular expressions to look for a match.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prematch`：这就像一个必须匹配的条件，以应用该解码器。它使用正则表达式来查找匹配项。'
- en: '`regex`: This represents the regular expression to extract data. In the preceding
    decoder, we have two `regex` instances.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`regex`：这表示用于提取数据的正则表达式。在前面的解码器中，我们有两个`regex`实例。'
- en: '`order`: This indicates the list of fields in which the extracted information
    or value will be stored.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order`：这表示提取的信息或值将存储的字段列表。'
- en: Decoders have many more configuration options available to them. Visit the *Decoders
    Syntax* page ([https://documentation.wazuh.com/current/user-manual/ruleset/ruleset-xml-syntax/decoders.html](https://documentation.wazuh.com/current/user-manual/ruleset/ruleset-xml-syntax/decoders.html))
    in the Wazuh documentation to see all of the available options.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 解码器有许多其他可用的配置选项。访问*解码器语法*页面（[https://documentation.wazuh.com/current/user-manual/ruleset/ruleset-xml-syntax/decoders.html](https://documentation.wazuh.com/current/user-manual/ruleset/ruleset-xml-syntax/decoders.html)）以查看所有可用选项。
- en: Rules
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 规则
- en: 'Wazuh rules help the system detect attacks in the early stages, such as intrusions,
    software misuse, configuration issues, application errors, malware, rootkits,
    system anomalies, and security policy violations. Wazuh comes with several pre-built
    rules and decoders but also allows you to add custom rules. Let’s take a sample
    Wazuh rule:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Wazuh规则帮助系统在早期阶段检测到攻击，如入侵、软件滥用、配置问题、应用程序错误、恶意软件、rootkit、系统异常和安全策略违规。Wazuh提供了几个预构建的规则和解码器，但也允许您添加自定义规则。让我们来看一个Wazuh规则的示例：
- en: '[PRE1]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let’s break this code down:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下这段代码：
- en: '`rule id`: This represents the unique identifier for the Wazuh rule.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rule id`：这表示Wazuh规则的唯一标识符。'
- en: '`level`: The rule’s classification level ranges between 0 and 15\. According
    to the rule categories page ([https://documentation.wazuh.com/current/user-manual/ruleset/rules-classification.html](https://documentation.wazuh.com/current/user-manual/ruleset/rules-classification.html))
    in the Wazuh documentation, each number indicates a distinct value and severity.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`level`：规则的分类级别介于 0 和 15 之间。根据 Wazuh 文档中的规则分类页面（[https://documentation.wazuh.com/current/user-manual/ruleset/rules-classification.html](https://documentation.wazuh.com/current/user-manual/ruleset/rules-classification.html)），每个数字表示一个独特的值和严重性。'
- en: '`if_sid`: This specifies the ID of another rule (in our case, it’s `60009`),
    which triggers the current rule. The “if” condition is considered as the “parent”
    rule that must be checked first.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if_sid`：这指定了另一个规则的 ID（在我们的例子中是`60009`），它触发当前规则。“if”条件被视为必须首先检查的“父”规则。'
- en: '`field name`: This specifies the name of the field extracted from the decoder.
    The value is matched by a regular expression. In this case, we are looking for
    the field name `win.system.providerName` with a value of `PowerShell`.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`field name`：这指定了从解码器中提取的字段名称。该值通过正则表达式进行匹配。在本例中，我们查找字段名称为`win.system.providerName`，其值为`PowerShell`。'
- en: '`group`: This is used to organize the Wazuh rules. It contains the list of
    categories that the rules belong to. We have organized our rule in the `windows_powershell`
    group.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`group`：用于组织 Wazuh 规则。它包含规则所属类别的列表。我们已经将规则组织到 `windows_powershell` 组中。'
- en: 'There are tons of other options available for Wazuh rules. I would suggest
    you check out the *Rules Syntax* page at the following link: [https://documentation.wazuh.com/current/user-manual/ruleset/ruleset-xml-syntax/rules.html](https://documentation.wazuh.com/current/user-manual/ruleset/ruleset-xml-syntax/rules.html))
    in the Wazuh documentation.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Wazuh 规则有很多其他选项。我建议你查看 Wazuh 文档中的 *规则语法* 页面，链接如下：[https://documentation.wazuh.com/current/user-manual/ruleset/ruleset-xml-syntax/rules.html](https://documentation.wazuh.com/current/user-manual/ruleset/ruleset-xml-syntax/rules.html)。
- en: CDB lists
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CDB 列表
- en: 'The **Constant Database** (**CDB**) list enables the categorization and management
    of IP addresses and domains based on their characteristics. These lists can include
    known malicious IP addresses, suspicious domains, trusted IP addresses, whitelisted
    domains, and more. Admins maintain these lists by adding or removing entries based
    on reputation or risk levels. To learn more about CDB lists, you can visit the
    official Wazuh documentation for CDB lists: [https://documentation.wazuh.com/current/user-manual/ruleset/cdb-list.html](https://documentation.wazuh.com/current/user-manual/ruleset/cdb-list.html).'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**常量数据库**（**CDB**）列表使得根据 IP 地址和域名的特征进行分类和管理。这些列表可以包括已知的恶意 IP 地址、可疑域名、受信任的 IP
    地址、白名单域名等。管理员通过根据声誉或风险等级添加或删除条目来维护这些列表。要了解更多关于 CDB 列表的信息，可以访问官方 Wazuh 文档中的 CDB
    列表： [https://documentation.wazuh.com/current/user-manual/ruleset/cdb-list.html](https://documentation.wazuh.com/current/user-manual/ruleset/cdb-list.html)。'
- en: Groups
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组
- en: 'Agents can be grouped based on their OS or functionalities using groups; for
    example, all Windows agents can be grouped under a single group named Windows
    Agents. This is helpful when you want to push configuration changes from the Wazuh
    manager to all Windows agents at once. This becomes a simple and single-step solution.
    To learn more about grouping agents, you can visit the official Wazuh documentation
    here: [https://documentation.wazuh.com/current/user-manual/agents/grouping-agents.html](https://documentation.wazuh.com/current/user-manual/agents/grouping-agents.html).'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 可以根据操作系统或功能使用组来对代理进行分组；例如，所有 Windows 代理可以被分为一个名为“Windows Agents”的组。这在你想一次性将配置更改从
    Wazuh 管理器推送到所有 Windows 代理时非常有用。这变成了一个简单的单步解决方案。要了解更多关于分组代理的信息，你可以访问官方 Wazuh 文档：
    [https://documentation.wazuh.com/current/user-manual/agents/grouping-agents.html](https://documentation.wazuh.com/current/user-manual/agents/grouping-agents.html)。
- en: Configuration
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置
- en: This helps security teams to fine-tune Wazuh’s main configurations such as cluster
    configuration, alert and output management, log data analysis, cloud security,
    vulnerabilities, inventory data, active response, commands, Docker listeners,
    and monitoring (Amazon S3, Azure logs, Google Cloud, GitHub, Office 365, etc.).
    All these features can even be customized from the command-line option as well.
    You need to locate the `ossec.conf` file in your Wazuh manager or Wazuh agent
    at the `/``var/ossec/etc` directory.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这帮助安全团队精细调整 Wazuh 的主要配置，如集群配置、警报和输出管理、日志数据分析、云安全、漏洞、库存数据、主动响应、命令、Docker 监听器和监控（Amazon
    S3、Azure 日志、Google Cloud、GitHub、Office 365 等）。所有这些功能甚至可以通过命令行选项进行自定义。你需要在 Wazuh
    管理器或 Wazuh 代理的 `/var/ossec/etc` 目录中找到 `ossec.conf` 文件。
- en: Now, let’s start deploying our Wazuh agent on the Ubuntu machine and then we
    will install Suricata on the same machine.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始在 Ubuntu 机器上部署 Wazuh 代理，然后在同一台机器上安装 Suricata。
- en: Installing the Wazuh server
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Wazuh 服务器
- en: 'The Wazuh server is the central component of the Wazuh security platform. It
    consists of two important elements: the Wazuh manager and Filebeat. The Wazuh
    manager collects and analyzes data from the Wazuh agents and triggers alerts when
    it detects any threats. Filebeat forwards alerts and events to the Wazuh indexer.
    The Wazuh server can be installed in multiple ways, however, I’d recommend the
    multi-node cluster method for a production environment and the VM method for a
    lab environment. You can follow the guidelines for both methods in the following
    sections.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Wazuh 服务器是 Wazuh 安全平台的核心组件。它由两个重要元素组成：Wazuh 管理器和 Filebeat。Wazuh 管理器收集并分析来自 Wazuh
    代理的数据，当检测到任何威胁时，它会触发警报。Filebeat 将警报和事件转发到 Wazuh 索引器。Wazuh 服务器可以通过多种方式安装，但我建议在生产环境中使用多节点集群方法，在实验环境中使用虚拟机方法。你可以在以下章节中找到这两种方法的指导。
- en: For a production environment
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 适用于生产环境
- en: 'To set up Wazuh in the production environment, it is recommended to deploy
    the Wazuh server and Wazuh indexer on different hosts. This helps you handle traffic
    from a large number of endpoints and also to achieve high availability. The step-by-step
    guide to install the Wazuh server along with the indexer and dashboard is mentioned
    here: [https://documentation.wazuh.com/current/installation-guide/index.html](https://documentation.wazuh.com/current/installation-guide/index.html).'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在生产环境中设置 Wazuh，建议将 Wazuh 服务器和 Wazuh 索引器部署在不同的主机上。这有助于处理来自大量终端的流量，并实现高可用性。安装
    Wazuh 服务器、索引器和仪表板的逐步指南请参考此处：[https://documentation.wazuh.com/current/installation-guide/index.html](https://documentation.wazuh.com/current/installation-guide/index.html)。
- en: For a lab environment
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 适用于实验环境
- en: 'You can use the Wazuh VM OVA file for a lab environment as it is easy to deploy.
    All the Wazuh components including the Wazuh server, indexer, and dashboard are
    unified. To install Wazuh using an OVA file, follow these steps:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 Wazuh VM OVA 文件作为实验环境，因为它部署起来非常简单。所有 Wazuh 组件，包括 Wazuh 服务器、索引器和仪表板都是统一的。使用
    OVA 文件安装 Wazuh，按照以下步骤进行：
- en: '**Download the OVA file**: Start by downloading the Wazuh OVA file from the
    official Wazuh website: [https://documentation.wazuh.com/current/deployment-options/virtual-machine/virtual-machine.html](https://documentation.wazuh.com/current/deployment-options/virtual-machine/virtual-machine.html).'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**下载 OVA 文件**：首先从官方 Wazuh 网站下载 Wazuh OVA 文件：[https://documentation.wazuh.com/current/deployment-options/virtual-machine/virtual-machine.html](https://documentation.wazuh.com/current/deployment-options/virtual-machine/virtual-machine.html)。'
- en: '**Import the OVA file**: Use your favorite virtualization platform (e.g., VMware
    Workstation, VirtualBox, etc.) and import the downloaded OVA file.'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**导入 OVA 文件**：使用你喜欢的虚拟化平台（例如 VMware Workstation、VirtualBox 等），导入下载的 OVA 文件。'
- en: '**Configure VM settings**: Before powering on the VM, adjust the VM settings
    as needed:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**配置虚拟机设置**：在启动虚拟机之前，根据需要调整虚拟机设置：'
- en: '**CPU** **cores**: 4'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CPU** **核心数**：4'
- en: '**RAM**: 8 GB'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存**：8 GB'
- en: '**Storage**: 50 GB'
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储**：50 GB'
- en: '**Access the Wazuh web interface**: You can start the VM. Next, open the Web
    browser using the VM IP address and enter the default username and password as
    shown in the diagram.'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**访问 Wazuh Web 界面**：你可以启动虚拟机。接着，使用虚拟机的 IP 地址打开浏览器，并输入默认的用户名和密码，如图所示。'
- en: '![Figure 1.8 – Accessing the Wazuh web interface](img/B19549_1_08.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.8 – 访问 Wazuh Web 界面](img/B19549_1_08.jpg)'
- en: Figure 1.8 – Accessing the Wazuh web interface
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8 – 访问 Wazuh Web 界面
- en: 'You need to enter the following:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要输入以下内容：
- en: 'Username: `admin`'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户名：`admin`
- en: 'Password: `admin`'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码：`admin`
- en: Installing Wazuh agent
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Wazuh 代理
- en: A Wazuh agent is compatible with multiple OSs. Once a Wazuh agent is installed,
    it will communicate with the Wazuh server, pushing information and system logs
    in real-time using an encrypted channel.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Wazuh代理兼容多个操作系统。一旦安装Wazuh代理，它将与Wazuh服务器通信，实时推送信息和系统日志，使用加密通道。
- en: Installing a Wazuh agent on Ubuntu Server
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Ubuntu Server上安装Wazuh代理
- en: 'To deploy a Wazuh agent on the Ubuntu Server, you need to install the agent
    and configure the deployment variables. To get started with installation, you
    need to log in to your Wazuh dashboard, navigate to **Agents**, click on **Deploy
    an agent** and then follow these steps:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Ubuntu Server上部署Wazuh代理，你需要安装代理并配置部署变量。要开始安装，你需要登录到Wazuh仪表盘，导航到**Agents**，点击**Deploy
    an agent**，然后按照以下步骤操作：
- en: '**Select an OS, version, and architecture**: As mentioned in the following
    diagram, navigate to the **LINUX** box and choose **DEB amd64** for AMD architecture
    or **DEB aarch64** for ARM architecture.'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**选择操作系统、版本和架构**：如以下图所示，导航到**LINUX**框并选择适合AMD架构的**DEB amd64**或适合ARM架构的**DEB
    aarch64**。'
- en: '![Figure 1.9 – Deploying a new agent](img/B19549_1_09.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图1.9 – 部署新代理](img/B19549_1_09.jpg)'
- en: Figure 1.9 – Deploying a new agent
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.9 – 部署新代理
- en: '**Enter the server address and other optional settings**: Enter the Wazuh server
    address and agent name and select the group. Please make sure your desired agent
    group is created before you add any new agent.'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**输入服务器地址和其他可选设置**：输入Wazuh服务器地址和代理名称，并选择代理组。请确保在添加新代理之前已创建所需的代理组。'
- en: '![ Figure 1.10 – Choosing a server address and optional settings](img/B19549_1_10.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图1.10 – 选择服务器地址和可选设置](img/B19549_1_10.jpg)'
- en: Figure 1.10 – Choosing a server address and optional settings
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.10 – 选择服务器地址和可选设置
- en: 'Let’s break down what we’ve inputted:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来拆解一下我们输入的内容：
- en: '`192.168.29.32`: This is the IP address of the Wazuh server'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`192.168.29.32`：这是Wazuh服务器的IP地址。'
- en: '`ubu-serv`: This indicates the name of the Wazuh agent'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ubu-serv`：这表示Wazuh代理的名称。'
- en: '`default`: It represents the Wazuh agent group'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default`：它代表Wazuh代理组。'
- en: '`curl` command to download the Wazuh module and start the Wazuh agent service
    as mentioned in the following diagram.'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`curl`命令下载Wazuh模块并启动Wazuh代理服务，如以下图所示。
- en: '![ Figure 1.11 – Retrieving the commands to download and install a Wazuh agent](img/B19549_1_11.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图1.11 – 获取下载并安装Wazuh代理的命令](img/B19549_1_11.jpg)'
- en: Figure 1.11 – Retrieving the commands to download and install a Wazuh agent
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.11 – 获取下载并安装Wazuh代理的命令
- en: Note
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure that there are no firewall rules blocking communication between the
    agent and the Wazuh manager. The agent should be able to communicate with the
    manager over the configured port (the default is `1514`/`514` for syslog).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保没有防火墙规则阻止代理与Wazuh管理器之间的通信。代理应该能够通过配置的端口（默认是`1514`/`514`用于syslog）与管理器通信。
- en: Finally, you can verify whether the agent is connected and activated by logging
    in to the Wazuh manager and navigating to **Agents**.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以通过登录到Wazuh管理器并导航到**Agents**来验证代理是否已连接并激活。
- en: '![Figure 1.12 – Visualizing Wazuh agents](img/B19549_1_12.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图1.12 – 可视化Wazuh代理](img/B19549_1_12.jpg)'
- en: Figure 1.12 – Visualizing Wazuh agents
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.12 – 可视化Wazuh代理
- en: 'As you can see in the preceding diagram, the `ubu-serv-03` agent is connected
    with the following:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在前面的图中所见，`ubu-serv-03`代理已连接至以下内容：
- en: '`006`'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`006`'
- en: '`192.168.29.172`'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`192.168.29.172`'
- en: '**Group(s)**: **default**'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组**：**default**'
- en: '**Operating system**: **Ubuntu 22.04**'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作系统**：**Ubuntu 22.04**'
- en: '**Status**: **active**'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态**：**active**'
- en: Now, let’s install the Wazuh agent on Windows Server. The process will be the
    same for the Windows desktop, too.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在Windows Server上安装Wazuh代理。Windows桌面的安装过程也是一样的。
- en: Installing a Wazuh agent on Windows Server
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Windows Server上安装Wazuh代理
- en: 'You can monitor real-time events from Windows Server or a desktop on the Wazuh
    server by using the **command line interface** (**CLI**) or **graphical user interface**
    (**GUI**). To get started with installation, you need to log in to your Wazuh
    dashboard, navigate to **Agents**, click on **Deploy an agent** and then follow
    these steps:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用**命令行界面**（**CLI**）或**图形用户界面**（**GUI**）来监控Windows Server或桌面上的实时事件，前提是你已经登录到Wazuh服务器。要开始安装，你需要登录到Wazuh仪表盘，导航到**Agents**，点击**Deploy
    an agent**，然后按照以下步骤操作：
- en: '**Select an OS, version, and architecture**: As shown in the following diagram,
    navigate to the **WINDOWS** box, choose the **MSI 32/64 bits** package, and then
    enter the Wazuh server IP address.'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**选择操作系统、版本和架构**：如下面的图示所示，导航到 **WINDOWS** 框，选择 **MSI 32/64 位** 包，然后输入 Wazuh
    服务器的 IP 地址。'
- en: '![Figure 1.13 – Selecting the Windows package for the Wazuh agent](img/B19549_1_13.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.13 – 选择 Windows 版 Wazuh 代理](img/B19549_1_13.jpg)'
- en: Figure 1.13 – Selecting the Windows package for the Wazuh agent
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.13 – 选择 Windows 版 Wazuh 代理
- en: '**Enter the server address and other optional settings**: Enter the Wazuh server
    address and agent name and select the group. Please make sure your desired agent
    group is created before you add any new agent.'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**输入服务器地址和其他可选设置**：输入 Wazuh 服务器地址和代理名称，并选择组。请确保在添加任何新代理之前，已创建所需的代理组。'
- en: '![ Figure 1.14 – Entering the server address and optional settings](img/B19549_1_14.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![ 图 1.14 – 输入服务器地址和可选设置](img/B19549_1_14.jpg)'
- en: Figure 1.14 – Entering the server address and optional settings
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.14 – 输入服务器地址和可选设置
- en: '**Download the package and enable the service**: Copy the PowerShell command
    to download the Wazuh module and start the Wazuh agent service as shown in the
    following diagram. The following command needs to be entered on a Windows PowerShell
    terminal.'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**下载包并启用服务**：复制 PowerShell 命令以下载 Wazuh 模块并启动 Wazuh 代理服务，如下图所示。以下命令需要在 Windows
    PowerShell 终端中输入。'
- en: '![Figure 1.15 – Retrieving the commands to download and install the Wazuh agent
    on a Windows machine](img/B19549_1_15.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.15 – 获取用于下载和安装 Wazuh 代理的命令，在 Windows 机器上执行](img/B19549_1_15.jpg)'
- en: Figure 1.15 – Retrieving the commands to download and install the Wazuh agent
    on a Windows machine
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.15 – 获取用于下载和安装 Wazuh 代理的命令，在 Windows 机器上执行
- en: Finally, you can verify whether the agent is connected and activated by logging
    in to the Wazuh manager and navigating to **Agents**.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以通过登录 Wazuh 管理器并导航到 **Agents** 来验证代理是否已连接并激活。
- en: '![Figure 1.16 – Visualizing Wazuh agents installed on a Windows machine](img/B19549_1_16.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.16 – 可视化安装在 Windows 机器上的 Wazuh 代理](img/B19549_1_16.jpg)'
- en: Figure 1.16 – Visualizing Wazuh agents installed on a Windows machine
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.16 – 可视化安装在 Windows 机器上的 Wazuh 代理
- en: 'As you can see in the preceding diagram, the `WIN-AGNT` agent is connected
    with the following:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的图示所示，`WIN-AGNT` 代理连接如下：
- en: '`004`'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`004`'
- en: '`192.168.29.77`'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`192.168.29.77`'
- en: '**Group(s)**: **default**'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组**：**默认**'
- en: '**Operating system**: **Microsoft Windows Server 2019 Datacenter** **Evaluation
    10.0.17763.737**'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作系统**：**Microsoft Windows Server 2019 数据中心版** **评估版 10.0.17763.737**'
- en: '**Status**: **active**'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态**：**激活**'
- en: We have successfully learned how to deploy Wazuh agents on both the Ubuntu Server
    and Windows Server. In the next section, we will learn how to set up a Suricata
    IDS on Ubuntu Server.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功学习了如何在 Ubuntu 服务器和 Windows 服务器上部署 Wazuh 代理。在接下来的章节中，我们将学习如何在 Ubuntu 服务器上设置
    Suricata IDS。
- en: Installing Suricata on Ubuntu Server
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Ubuntu 服务器上安装 Suricata
- en: With the ability to detect malicious or suspicious activities in real time,
    Suricata is an NSM tool, which has the potential to work as an IPS/IDS. Its goal
    is to stop intrusion, malware, and other types of malicious attempts from taking
    advantage of a network. In this section, we will learn how to install Suricata
    on Ubuntu server. Let’s first learn about the prerequisites.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实时检测恶意或可疑活动，Suricata 是一个 NSM 工具，具有作为 IPS/IDS 工作的潜力。它的目标是阻止入侵、恶意软件和其他类型的恶意行为利用网络。在本节中，我们将学习如何在
    Ubuntu 服务器上安装 Suricata。首先让我们了解一下前提条件。
- en: Prerequisites
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 前提条件
- en: 'To install Suricata IDS on Ubuntu Server, the prerequisites are as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 服务器上安装 Suricata IDS 的前提条件如下：
- en: You will need to have Ubuntu Server installed (version 20.04 or higher)
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要安装 Ubuntu Server（版本 20.04 或更高版本）
- en: Sudo Privileges
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sudo 权限
- en: Installation
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装
- en: 'This process involves the installation of Suricata packages using the `apt-get`
    command line tool and then we need to install the free and open source Suricata
    rules created by the ET community. The rules within the ET ruleset cover a broad
    spectrum of threat categories, including malware, exploits, policy violations,
    anomalies, botnets, and so on. To complete the installation, follow these steps:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 此过程涉及使用 `apt-get` 命令行工具安装 Suricata 包，然后我们需要安装由 ET 社区创建的免费开源 Suricata 规则。ET 规则集中包含广泛的威胁类别，包括恶意软件、漏洞利用、政策违反、异常、僵尸网络等。完成安装的步骤如下：
- en: '**Install Suricata**: Log in to the terminal on Ubuntu Server and install the
    Suricata IDS package with the following commands:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装 Suricata**：登录到 Ubuntu 服务器的终端，并使用以下命令安装 Suricata IDS 包：'
- en: '[PRE2]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: cd /tmp/ && curl -LO https://rules.emergingthreats.net/open/suricata-6.0.8/emerging.rules.tar.gz
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cd /tmp/ && curl -LO https://rules.emergingthreats.net/open/suricata-6.0.8/emerging.rules.tar.gz
- en: sudo tar -xvzf emerging.rules.tar.gz && sudo mv rules/*.rules /etc/suricata/rules/
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sudo tar -xvzf emerging.rules.tar.gz && sudo mv rules/*.rules /etc/suricata/rules/
- en: sudo chmod 640 /etc/suricata/rules/*.rules
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sudo chmod 640 /etc/suricata/rules/*.rules
- en: '[PRE3]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If the rule directory is not present, you can create one by using the `mkdir
    /etc/suricata/` rules and then you can enter the previously mentioned commands.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 如果规则目录不存在，您可以使用`mkdir /etc/suricata/`命令创建一个目录，然后输入前面提到的命令。
- en: '`/etc/suricata/suricata.yaml`:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`/etc/suricata/suricata.yaml`：'
- en: '[PRE4]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`EXTERNAL_NET`: This variable needs to be set with `"any"` to ensure Suricata
    will monitor the traffic from any external IP address.'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`EXTERNAL_NET`：此变量需要设置为`"any"`，以确保 Suricata 监控来自任何外部 IP 地址的流量。'
- en: '`default-rule-path`: This is set to our Suricata rule path.'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`default-rule-path`：这是我们 Suricata 规则的路径设置。'
- en: '`af-packet`: This is a packet capture method used to capture network traffic
    directory from a `ifconfig` command and updating the `af-packet` settings.'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`af-packet`：这是一种数据包捕获方法，用于直接从 `ifconfig` 命令捕获网络流量，并更新 `af-packet` 设置。'
- en: '**Restart the Suricata service**: In order for configuration changes to take
    effect, we are required to restart the Suricata service using the following command:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**重启 Suricata 服务**：为了使配置更改生效，我们需要使用以下命令重启 Suricata 服务：'
- en: '[PRE5]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: <ossec_config>
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <ossec_config>
- en: <localfile>
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <localfile>
- en: <log_format>json</log_format>
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <log_format>json</log_format>
- en: <location>/var/log/suricata/eve.json</location>
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <location>/var/log/suricata/eve.json</location>
- en: </localfile>
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </localfile>
- en: </ossec_config>
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </ossec_config>
- en: '[PRE6]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Restart the Wazuh agent service**: For the current changes to take effect,
    you need to restart the Wazuh agent services using the following command:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**重启 Wazuh 代理服务**：为了使当前的更改生效，您需要使用以下命令重启 Wazuh 代理服务：'
- en: '[PRE7]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This completes Suricata’s integration with Wazuh. The Suricata IDS has been
    installed on Ubuntu Server along with the ET ruleset. Your endpoints are ready
    to trigger alerts if any malicious traffic is matched against any of the ET rulesets.
    Before getting into some practical use cases, let’s first get a basic understanding
    of Suricata rules and how to create one.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了 Suricata 与 Wazuh 的集成。Suricata IDS 已经在 Ubuntu 服务器上安装，并附带了 ET 规则集。如果匹配任何
    ET 规则集中的恶意流量，您的终端设备将触发警报。在进入一些实际的用例之前，让我们首先基本了解 Suricata 规则以及如何创建规则。
- en: Understanding Suricata rules
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Suricata 规则
- en: Suricata is powerful when you have a set of powerful rules. Although there are
    thousands of Suricata rule templates available online, it is still important to
    learn how to create a custom Suricata rule from scratch. In this section, we’ll
    learn basic Suricata rule syntax and some common use cases with attack and defense.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 当你有一套强大的规则时，Suricata 的威力会更强大。尽管网上有成千上万的 Suricata 规则模板可用，但学习如何从零开始创建自定义的 Suricata
    规则仍然很重要。在本节中，我们将学习基本的 Suricata 规则语法以及一些常见的攻击和防御用例。
- en: Suricata rule syntax
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Suricata 规则语法
- en: Suricata uses rules to detect different network events, and when certain conditions
    are met, it can be set up to do things such as alert or block.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: Suricata 使用规则来检测不同的网络事件，当某些条件满足时，它可以被配置为执行例如警报或阻止等操作。
- en: 'Here’s an overview of the Suricata rule syntax:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 Suricata 规则语法的概述：
- en: '[PRE8]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let’s break this code down:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来分解这段代码：
- en: '`action`: This says what should be done when the rule is true. It can be `alert`
    to send an alert, `drop` to stop the traffic, or any of the other actions that
    are supported.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`action`：这表示当规则成立时应该执行的操作。可以是`alert`（发送警报）、`drop`（停止流量）或其他支持的操作。'
- en: '`proto`: This shows what kind of traffic is being matched, such as `tcp`, `udp`,
    and `icmp`.'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`proto`：这表示匹配的流量类型，如 `tcp`、`udp` 和 `icmp`。'
- en: '`src_ip`: This is the source IP address or range of source IP addresses. This
    is where the traffic comes from.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src_ip`：这是源 IP 地址或源 IP 地址范围，表示流量来自哪里。'
- en: '`src_port`: This is the port or range of ports where the traffic is coming
    from.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src_port`：这是源端口或源端口范围，表示流量来自哪里。'
- en: '`dest_ip`: This is the IP address or range of IP addresses where the traffic
    is going.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dest_ip`：这是目标 IP 地址或目标 IP 地址范围，表示流量将去往哪里。'
- en: '`dest_port`: This is the port or range of ports where the traffic is going.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dest_port`：这是目标端口或目标端口范围，表示流量将去往哪个端口。'
- en: '`msg`: The message that will be shown as an alert when the rule is true.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msg`：当规则成立时，显示为警报的消息。'
- en: '`content`: This is an optional field that checks the packet payload for a certain
    string or content.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`content`：这是一个可选字段，用于检查数据包负载中是否包含某个字符串或内容。'
- en: 'Now, based on our current Suricata configuration, we have the `$HOME_NET` and
    `$EXTERNAL_NET` network variables. Let’s get an understanding of an example rule
    to detect an SSH connection:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，基于我们当前的 Suricata 配置，我们有 `$HOME_NET` 和 `$EXTERNAL_NET` 网络变量。让我们通过一个示例规则来了解如何检测
    SSH 连接：
- en: '[PRE9]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let’s break this down:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来解析一下：
- en: '`alert`: The rule specifies that an alert should be generated if the specified
    conditions are met.'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alert`：该规则指定当满足指定条件时应生成警报。'
- en: '`tcp`: This refers to **Transmission Communication Protocol** (**TCP**) based
    traffic.'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tcp`：这指的是基于 **传输通信协议**（**TCP**）的流量。'
- en: '`$EXTERNAL_NET any -> $HOME_NET 22`: The traffic flow is defined by directing
    traffic from any external network IP address (`$EXTERNAL_NET`) to any home or
    local network IP (`$HOME_NET`) on port `22` (SSH).'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$EXTERNAL_NET any -> $HOME_NET 22`：流量流向通过将流量从任何外部网络 IP 地址（`$EXTERNAL_NET`）定向到任何主机或本地网络
    IP（`$HOME_NET`），并通过端口 `22`（SSH）进行传输。'
- en: '`(msg:"SSH connection detected";)`: This specifies a detailed message to be
    added to the alert. It indicates that the rule has identified an SSH connection
    in this instance.'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(msg:"检测到 SSH 连接";)`：这指定了要添加到警报中的详细信息消息。它表明该规则已经识别到了一个 SSH 连接。'
- en: '`flow:to_server,established`: This defines the direction of the traffic that
    initiates the rule. It is looking for established connections between the server
    (home network) and the server (external network). This portion of the rule prevents
    initial connection attempts from generating alerts.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flow:to_server,established`：这定义了触发规则的流量方向。它正在寻找服务器（本地网络）与服务器（外部网络）之间的已建立连接。此规则部分可防止初始连接尝试生成警报。'
- en: '`content:"SSH-2.0-OpenSSH`: This part looks at the payload of the packet for
    a particular string (`"SSH-2.0-OpenSSH"`). It searches the traffic payload for
    this specific string, which signifies the utilization of the OpenSSH protocol
    and the SSH protocol in general.'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`content:"SSH-2.0-OpenSSH"`：这部分会检查数据包的负载中是否包含特定字符串（`"SSH-2.0-OpenSSH"`）。它搜索流量负载中的此特定字符串，表示使用了
    OpenSSH 协议和 SSH 协议。'
- en: '`sid:100001`: It is a unique identifier for a particular rule.'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sid:100001`：这是某个规则的唯一标识符。'
- en: Now that we’ve learned how to create some basic Suricata rules, let’s go through
    some Suricata IDS use cases with the Wazuh platform.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学习了如何创建一些基本的 Suricata 规则，接下来让我们了解一些结合 Wazuh 平台的 Suricata IDS 使用案例。
- en: Network scanning probe attack and detection
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络扫描探测攻击与检测
- en: '**Network scanning** is the initial stage of most hacking exercises, and the
    most powerful tool used for this purpose is none other than the **Nmap** scanner.
    Nmap is a free and open source Linux command-line tool. Nmap helps us to scan
    any host to discover opened ports, software versions, OSs, and so on. It is used
    by security professionals for security testing, network exploration, and vulnerability
    detection. Threat actors also perform network scanning to discover any open ports,
    software versions, or vulnerability packages. In this section, we will initiate
    network scanning probes using the Nmap tool against our Wazuh agent (running Suricata
    services). The ET ruleset already consists of rules to detect Nmap-based scanning
    probes. We will verify it using this attack scenario.'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络扫描**是大多数黑客攻击的初始阶段，而最强大的工具就是**Nmap**扫描器。Nmap 是一款免费的开源 Linux 命令行工具。Nmap 帮助我们扫描任何主机以发现开放端口、软件版本、操作系统等。它被安全专业人员用于安全测试、网络探索和漏洞检测。威胁行为者也会进行网络扫描，以发现开放端口、软件版本或漏洞包。在这一部分，我们将使用
    Nmap 工具对我们的 Wazuh 代理（运行 Suricata 服务）进行网络扫描探测。ET 规则集中已包含检测基于 Nmap 的扫描探测的规则。我们将通过此攻击场景来验证它。'
- en: 'We will be following the points in these sections:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将遵循以下章节中的内容：
- en: Lab setup
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实验环境设置
- en: Attack simulation
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 攻击模拟
- en: Visualize on the Wazuh manager
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Wazuh 管理器上可视化
- en: Lab setup
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实验环境设置
- en: 'In this mini lab setup, we need three parts: an attacker machine (Kali Linux
    or Ubuntu), an Ubuntu machine or Windows machine with the Wazuh agent installed
    on it, and finally, our Wazuh server. If you use a Kali Linux machine, Nmap is
    preinstalled; however, if you use an Ubuntu machine, you can install the Nmap
    package using the `sudo apt-get install` `nmap` command.'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在此迷你实验环境中，我们需要三部分：一台攻击者机器（Kali Linux 或 Ubuntu），一台安装有 Wazuh 代理的 Ubuntu 或 Windows
    机器，最后是我们的 Wazuh 服务器。如果您使用 Kali Linux 机器，Nmap 是预装的；但是，如果您使用 Ubuntu 机器，您可以使用 `sudo
    apt-get install` `nmap` 命令来安装 Nmap 软件包。
- en: '![Figure 1.17 – Lab setup of network scanning probe detection using Nmap](img/B19549_1_17.jpg)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.17 – 使用Nmap进行网络扫描探测的实验室设置](img/B19549_1_17.jpg)'
- en: Figure 1.17 – Lab setup of network scanning probe detection using Nmap
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.17 – 使用Nmap进行网络扫描探测的实验室设置
- en: Attack simulation
  id: totrans-279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 攻击模拟
- en: 'If you are using Kali Linux or Ubuntu as an attacker machine, you can open
    the terminal and enter the `nmap` command using the `-sS` keyword for an SYN scan
    and `-Pn` to skip host discovery. The Nmap SYN scan is a half-open scan that works
    by sending a TCP SYN packet to the target machine (the Wazuh agent). If the port
    is open, the target device responds with a `-sS` and second, to check for software
    version using `-sV` (version scan):'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用Kali Linux或Ubuntu作为攻击机器，可以打开终端并输入`nmap`命令，使用`-sS`关键字进行SYN扫描，并使用`-Pn`跳过主机发现。Nmap
    SYN扫描是一种半开放扫描方式，通过向目标机器（Wazuh代理）发送TCP SYN数据包来工作。如果端口开放，目标设备将响应一个`-sS`，并且，第二步，使用`-sV`（版本扫描）检查软件版本：
- en: '[PRE10]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once you run the preceding command, you will learn what all the ports are open
    and second, what version of the package is installed on the target machine. Let’s
    look at the output of the Nmap port scan command:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦运行上述命令，你将知道所有开放的端口，并且可以知道目标机器上安装的包的版本。让我们看看Nmap端口扫描命令的输出：
- en: '[PRE11]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As you can see, STATE of port `22/tcp` and `80/tcp` are open. Now, let’s look
    at the output of the Nmap version check command:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，端口`22/tcp`和`80/tcp`的状态为开放。现在，让我们看看Nmap版本检查命令的输出：
- en: '[PRE12]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'From the output, you can see from the `VERSION` column that the target is running
    two software packages: `OpenSSH 8.9` and Apache with version `2.4.52`.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中，你可以看到`VERSION`列中，目标正在运行两个软件包：`OpenSSH 8.9`和版本为`2.4.52`的Apache。
- en: Visualize on the Wazuh dashboard
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Wazuh仪表板上可视化
- en: To visualize the Suricata alerts, log in to the Wazuh manager and navigate to
    **Security events**. Next, select the agent. You will find the security alert
    shown in the following diagram.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 要可视化Suricata警报，登录Wazuh管理器并导航到**安全事件**。接下来，选择代理。你将看到如图所示的安全警报。
- en: '![Figure 1.18 – Visualizing network scanning probes on the Wazuh dashboard](img/B19549_1_18.jpg)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.18 – 在Wazuh仪表板上可视化网络扫描探测](img/B19549_1_18.jpg)'
- en: Figure 1.18 – Visualizing network scanning probes on the Wazuh dashboard
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.18 – 在Wazuh仪表板上可视化网络扫描探测
- en: 'You can also apply a filter with `rule.group: suricata`.'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '你也可以应用一个过滤器，使用`rule.group: suricata`。'
- en: '![Figure 1.19 – Visualizing network scanning probes using a Suricata filter](img/B19549_1_19.jpg)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.19 – 使用Suricata过滤器可视化网络扫描探测](img/B19549_1_19.jpg)'
- en: Figure 1.19 – Visualizing network scanning probes using a Suricata filter
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.19 – 使用Suricata过滤器可视化网络扫描探测
- en: Let’s expand one of the alerts, as shown in the following.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们展开其中一个警报，如下所示。
- en: '![Figure 1.20 – The ET SCAN Potential SSH Scan OUTBOUND alert](img/B19549_1_20.jpg)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.20 – ET SCAN潜在SSH扫描外向警报](img/B19549_1_20.jpg)'
- en: Figure 1.20 – The ET SCAN Potential SSH Scan OUTBOUND alert
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.20 – ET SCAN潜在SSH扫描外向警报
- en: 'Let’s break some of the following down:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解以下内容：
- en: '`data.alert.signature`: This field talks about the `ET SCAN Potential SSH Scan
    OUTBOUND` Suricata rule that detected this abnormal traffic. `ET` represents the
    ET ruleset.'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data.alert.signature`：此字段描述了检测到这种异常流量的`ET SCAN潜在SSH扫描外向` Suricata规则。`ET`代表ET规则集。'
- en: '`data.dest_ip`: This gives us the victim IP address.'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data.dest_ip`：此字段提供受害者的IP地址。'
- en: '`data.src_ip`: This gives us the attacker IP address.'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data.src_ip`：此字段提供攻击者的IP地址。'
- en: '`data.alert.action`: This field indicates the action taken by Wazuh in response
    to a detected security event.'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data.alert.action`：此字段表示Wazuh在检测到安全事件后采取的行动。'
- en: '`alerts.severity`: This field represents the severity level assigned to the
    security event by Wazuh.'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alerts.severity`：此字段表示Wazuh为安全事件分配的严重性级别。'
- en: So, this was the simple use case of how Suricata can detect the network scanning
    probes and how Wazuh visualizes it on the dashboard. In the next section, we will
    learn how to detect web-based attacks on our intentionally vulnerable application
    DVWA.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Suricata如何检测网络扫描探测以及Wazuh如何在仪表板上可视化它的简单用例。在下一节中，我们将学习如何检测我们故意设置漏洞的应用程序DVWA上的基于Web的攻击。
- en: Testing web-based attacks using DVWA
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用DVWA测试基于Web的攻击
- en: 'As per a CDNetworks report, around 45.127 billion web applications were detected
    and blocked throughout 2022, which is an increase of 96.35% compared to 2021 ([https://www.cdnetworks.com/news/state-of-waap-2022/](https://www.cdnetworks.com/news/state-of-waap-2022/)).
    Attacks on web applications have become so common that they are now the main cause
    of data breaches. Some of the most common types of web application attacks include
    **cross-site scripting** (**XSS**), DDoS, **cross-site request forgery** (**CSRF**),
    **XML External Entity** (**XXE**), and SQL Injection. Suricata with the ET ruleset
    can detect such attacks by dissecting packet payloads and scrutinizing HTTP/HTTPS
    protocol headers for anomalies or abnormal traffic patterns. In this section,
    we will utilize an intentionally infected web application, DVWA. DVWA is a PHP-based
    application and is popular among penetration testers and ethical hackers as it
    helps them get hands-on with security vulnerability and exploitation. We will
    cover these points in the following subsections:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 根据CDNetworks的报告，2022年共检测并阻止了约451.27亿个Web应用程序攻击，相较于2021年增长了96.35% ([https://www.cdnetworks.com/news/state-of-waap-2022/](https://www.cdnetworks.com/news/state-of-waap-2022/))。对Web应用程序的攻击已变得如此普遍，以至于它们现在成为数据泄露的主要原因。一些最常见的Web应用攻击类型包括**跨站脚本**（**XSS**）、DDoS、**跨站请求伪造**（**CSRF**）、**XML外部实体**（**XXE**）和SQL注入。Suricata结合ET规则集可以通过解析数据包有效载荷并检查HTTP/HTTPS协议头中的异常或异常流量模式来检测此类攻击。在这一部分中，我们将使用一个故意感染的Web应用程序——DVWA。DVWA是一个基于PHP的应用程序，在渗透测试人员和道德黑客中非常受欢迎，因为它帮助他们实践安全漏洞和漏洞利用。我们将在以下小节中讨论这些内容：
- en: Lab setup
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实验环境设置
- en: Setting up the victim server with DVWA
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用DVWA设置受害者服务器
- en: Test an SQL Injection attack
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试SQL注入攻击
- en: Test a reflected XSS attack
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试一个反射型XSS攻击
- en: Lab setup
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实验环境设置
- en: 'In this lab setup, we need four parts: an attacker machine (Kali Linux or Ubuntu),
    a victim server (DVWA running on a Debian server), a TAP server (Wazuh and Suricata
    agents on Ubuntu), and a Wazuh server. The lab design is in the following figure:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在此实验环境设置中，我们需要四个部分：攻击者机器（Kali Linux或Ubuntu）、受害者服务器（DVWA运行在Debian服务器上）、TAP服务器（Wazuh和Suricata代理运行在Ubuntu上）以及Wazuh服务器。实验设计如图所示：
- en: '![Figure 1.21 – The lab setup for detecting web-based attacks using Suricata](img/B19549_1_21.jpg)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![图1.21 – 使用Suricata检测基于Web的攻击的实验环境设置](img/B19549_1_21.jpg)'
- en: Figure 1.21 – The lab setup for detecting web-based attacks using Suricata
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.21 – 使用Suricata检测基于Web的攻击的实验环境设置
- en: 'Let’s break this down further:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步分解：
- en: The attacker machine is Kali Linux, but you can use any other machine.
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 攻击者机器是Kali Linux，但你也可以使用其他任何机器。
- en: The DVWA application has been installed on a Debian-based server.
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DVWA应用程序已经安装在基于Debian的服务器上。
- en: Ubuntu Server deployed in promiscuous mode (a network setting) and running a
    Suricata IDS and Wazuh agent. Promiscuous mode allows the network adapter to intercept
    and read all the network traffic that it receives.
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu Server部署在混杂模式下（网络设置），并运行Suricata IDS和Wazuh代理。混杂模式允许网络适配器拦截并读取它接收到的所有网络流量。
- en: The Wazuh server is deployed as a VM.
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wazuh服务器以虚拟机（VM）形式部署。
- en: Setting up the victim server with DVWA
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用DVWA设置受害者服务器
- en: 'We will be installing a DVWA application on a Debian-based Linux distribution.
    You can download it from the following link: [https://www.debian.org/distrib/](https://www.debian.org/distrib/).
    Our DVWA application has some dependencies such as `php`, an `apache2` web server,
    and a MySQL database:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在基于Debian的Linux发行版上安装DVWA应用程序。你可以从以下链接下载：[https://www.debian.org/distrib/](https://www.debian.org/distrib/)。我们的DVWA应用程序有一些依赖项，如`php`、`apache2`
    web服务器和MySQL数据库：
- en: 'Let’s first install all of them with the following command:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，使用以下命令安装所有组件：
- en: '[PRE13]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: CREATE USER 'dvwa'@'localhost' IDENTIFIED BY 'password'; GRANT ALL PRIVILEGES
    ON dvwa.* TO 'dvwa'@'localhost' IDENTIFIED BY 'password';
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建用户 'dvwa'@'localhost' 并设置密码为 'password'; 赋予 'dvwa'@'localhost' 在 dvwa.* 上的所有权限，命令如下：`CREATE
    USER 'dvwa'@'localhost' IDENTIFIED BY 'password'; GRANT ALL PRIVILEGES ON dvwa.*
    TO 'dvwa'@'localhost' IDENTIFIED BY 'password';`
- en: '[PRE14]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, install the DVWA application. The DVWA source code is available on GitHub.
    You can enter the following command under `/var/www/html`:'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，安装DVWA应用程序。DVWA的源代码可在GitHub上获取。你可以在`/var/www/html`目录下输入以下命令：
- en: '[PRE15]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: config.inc.php file. Change the db_user to dvwa and db_password to password.
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: config.inc.php文件。将db_user更改为dvwa，db_password更改为password。
- en: '[PRE16]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Start the `mysql` service:'
  id: totrans-329
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动`mysql`服务：
- en: '[PRE17]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Search for `allow_url_include` and set to **On**.*   Launch DVWA.*   Open DVWA
    with [http://localhost/DVWA/setup.php](http://localhost/DVWA/setup.php) and then
    reset the database.*   Now, log in to DVWA with the default credentials:'
  id: totrans-331
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索 `allow_url_include` 并设置为 **开启**。* 启动 DVWA。* 打开 DVWA，访问 [http://localhost/DVWA/setup.php](http://localhost/DVWA/setup.php)，然后重置数据库。*
    现在，用默认凭据登录 DVWA：
- en: '[PRE18]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This completes our DVWA application installation. Next, we can start testing
    the DVWA application from Kali Linux against SQL Injection and XSS as explained
    in the next section.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了我们对 DVWA 应用程序的安装。接下来，我们可以开始从 Kali Linux 测试 DVWA 应用程序，针对 SQL 注入和 XSS 漏洞进行测试，如下一节所述。
- en: Test an SQL Injection attack
  id: totrans-334
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试 SQL 注入攻击
- en: 'SQL Injection, or **SQLi**, is a type of cyberattack in which malicious SQL
    code is injected into an application. This lets the attacker extract or modify
    the contents of the database. This attack modifies the database by tricking the
    program into running SQL commands that weren’t intended to be run. In order to
    test the DVWA application against SQL Injection vulnerability, we need to insert
    our malicious payload into the HTTP request itself:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 注入，或 **SQLi**，是一种网络攻击类型，恶意 SQL 代码被注入到应用程序中。这允许攻击者提取或修改数据库的内容。此攻击通过欺骗程序执行本不应执行的
    SQL 命令来修改数据库。为了测试 DVWA 应用程序是否存在 SQL 注入漏洞，我们需要将恶意有效载荷直接插入到 HTTP 请求中：
- en: '[PRE19]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let’s break this down:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步分析：
- en: '`UNION SELECT "Hello","Hello Again"`: The `UNION SELECT` statement is used
    to combine the results of two or more `SELECT` queries into a single result set.
    In this case, the attacker wants to add their own information to the query result.
    `"Hello"` and `"Hello Again"` are the text information that the attacker wants
    to inject into the query result.'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UNION SELECT "Hello","Hello Again"`：`UNION SELECT` 语句用于将两个或多个 `SELECT` 查询的结果合并为一个结果集。在这种情况下，攻击者希望将自己的信息添加到查询结果中。`"Hello"`
    和 `"Hello Again"` 是攻击者想要注入到查询结果中的文本信息。'
- en: '`-- -`: This is a comment in SQL. Everything following this on the same line
    is considered a comment and ignored by the SQL processor.'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-- -`：这是 SQL 中的注释。该行后面的所有内容都被视为注释，并会被 SQL 处理器忽略。'
- en: '`&Submit=Submit`: This part suggests that the query could be part of a form
    submission where the `Submit` parameter is sent with the `Submit` value.'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`&Submit=Submit`：这一部分表明查询可能是表单提交的一部分，其中 `Submit` 参数与 `Submit` 值一起发送。'
- en: Now, let’s check on our Wazuh dashboard for the relevant security alerts.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在 Wazuh 仪表板上查看相关的安全警报。
- en: '![Figure 1.22 – Visualizing SQL Injection alerts](img/B19549_1_22.jpg)'
  id: totrans-342
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.22 – 可视化 SQL 注入警报](img/B19549_1_22.jpg)'
- en: Figure 1.22 – Visualizing SQL Injection alerts
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.22 – 可视化 SQL 注入警报
- en: 'As you expand the individual security alert, you will see detailed information
    about the alert, the Suricata ET rule, and the category as shown in the following
    figure:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 当你展开单个安全警报时，你将看到有关警报、Suricata ET 规则以及类别的详细信息，如下图所示：
- en: '![Figure 1.23 – Suricata alert for SQL Injection on the Wazuh dashboard](img/B19549_1_23.jpg)'
  id: totrans-345
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.23 – Wazuh 仪表板上的 Suricata SQL 注入警报](img/B19549_1_23.jpg)'
- en: Figure 1.23 – Suricata alert for SQL Injection on the Wazuh dashboard
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.23 – Wazuh 仪表板上的 Suricata SQL 注入警报
- en: 'Let’s break this down:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步分析：
- en: '`Suricata: Alert - ET WEB_SERVER Possible SQL Injection Attempt UNION SELECT`:
    This represents the security alert name'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Suricata: Alert - ET WEB_SERVER Possible SQL Injection Attempt UNION SELECT`：这表示安全警报的名称。'
- en: '`data.alert.category` `Web Application Attack`: This shows the category of
    the rule as specified in the Suricata ET ruleset'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data.alert.category` `Web Application Attack`：这显示了规则在 Suricata ET 规则集中指定的类别'
- en: '`Data.alert.metadata.tag: SQL_Injection`: This shows the metadata of the Suricata
    ET ruleset for web application attacks'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Data.alert.metadata.tag: SQL_Injection`：这显示了 Suricata ET 规则集的元数据，用于 Web 应用攻击'
- en: As we scroll down the alert information even further, we will see more information,
    as shown in the following figure.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们继续滚动警报信息时，我们将看到更多信息，如下图所示。
- en: '![Figure 1.24 – Detailed information of a Suricata alert for SQL Injection](img/B19549_1_24.jpg)'
  id: totrans-352
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.24 – Suricata 针对 SQL 注入的警报详细信息](img/B19549_1_24.jpg)'
- en: Figure 1.24 – Detailed information of a Suricata alert for SQL Injection
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.24 – Suricata 针对 SQL 注入的警报详细信息
- en: 'Let’s break this down:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步分析：
- en: '`data.http.http.user_agent`: This represents the browser information from where
    the attack has been attempted'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data.http.http.user_agent`：这表示发起攻击的浏览器信息'
- en: '`data.http.url: /DVWA/vulnerabilities/sqli/?id=a%27%20UNION%20SELECT%20%22text1%22,%22text2%22;--%20-&Submit=Submit`:
    This represents a URL query string for the DVWA, specifically targeting a SQL
    Injection vulnerability.'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data.http.url: /DVWA/vulnerabilities/sqli/?id=a%27%20UNION%20SELECT%20%22text1%22,%22text2%22;--%20-&Submit=Submit`：这表示
    DVWA 的 URL 查询字符串，专门针对 SQL 注入漏洞。'
- en: Now, we have learned about how to detect SQL Injection attacks using a Suricata
    IDS and visualize them on a Wazuh dashboard. In the next section, we will test
    our DVWA application for XSS vulnerabilities. We will later detect and visualize
    them on a Wazuh dashboard.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经了解了如何使用 Suricata IDS 检测 SQL 注入攻击并在 Wazuh 仪表板上可视化它们。在接下来的章节中，我们将测试 DVWA
    应用程序的 XSS 漏洞。然后，我们将检测并在 Wazuh 仪表板上可视化它们。
- en: Test a reflected XSS attack
  id: totrans-358
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试反射型 XSS 攻击
- en: XSS is a type of code injection attack that targets websites and sends malicious
    scripts to a user’s web browser to execute. In a **reflected XSS** attack, the
    attacker inserts malicious script into a website or app, which is subsequently
    reflected onto the user’s browser from the web server. This kind of attack is
    possible when a user inputs information into the application, and the application
    reflects it back to the user without enough sanitization or validation. To test
    if our intentionally vulnerable application, DVWA, for a reflected XSS attack,
    we can submit a piece of JavaScript code and verify whether it is reflecting the
    data back to our browser.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: XSS 是一种代码注入攻击，目标是网站，并向用户的 web 浏览器发送恶意脚本进行执行。在**反射型 XSS**攻击中，攻击者将恶意脚本插入到网站或应用程序中，随后从
    web 服务器将其反射到用户的浏览器。当用户向应用程序输入信息，且应用程序在没有足够清理或验证的情况下将其反射回用户时，就可能发生这种攻击。为了测试我们故意设计成易受攻击的应用程序
    DVWA 是否存在反射型 XSS 漏洞，我们可以提交一段 JavaScript 代码，并验证它是否会反射数据回到我们的浏览器。
- en: 'You can open the DVWA application and navigate to the **XSS (Reflected)** tab.
    Next, enter a sample JavaScript code as written here:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以打开 DVWA 应用程序并导航到**XSS（反射型）**标签。接下来，输入一段示例 JavaScript 代码，如下所示：
- en: '[PRE20]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let’s break this down:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下：
- en: '`<script> tag`: This indicates a piece of JavaScript code that should be executed
    by the browser'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<script>标签`：这表示一段应该由浏览器执行的 JavaScript 代码。'
- en: '`Alert("Hello")`: This is a function that tells the browser to display a pop-up
    box with the **Hello** text when the script is executed'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Alert("Hello")`：这是一个函数，它告诉浏览器在脚本执行时显示一个包含**Hello**文本的弹出框。'
- en: You can enter the JavaScript code and click on the **Submit** button as shown
    in the following diagram.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，你可以输入 JavaScript 代码并点击**提交**按钮。
- en: '![Figure 1.25 – Initiating a reflected XSS attack on DVWA](img/B19549_1_25.jpg)'
  id: totrans-366
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.25 – 发起反射型 XSS 攻击在 DVWA 上](img/B19549_1_25.jpg)'
- en: Figure 1.25 – Initiating a reflected XSS attack on DVWA
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.25 – 发起反射型 XSS 攻击在 DVWA 上
- en: The DVWA application doesn’t have a sanitization check for user inputs, making
    it vulnerable to reflected XSS attacks. As a result, we will see the **Hello**
    text reflected back to our browser as shown in the following diagram.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: DVWA 应用程序没有对用户输入进行清理检查，使其容易受到反射型 XSS 攻击。因此，我们将看到**Hello**文本如以下图所示反射回我们的浏览器。
- en: '![Figure 1.26 – Visualizing reflected XSS on DVWA](img/B19549_1_26.jpg)'
  id: totrans-369
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.26 – 可视化 DVWA 上的反射型 XSS](img/B19549_1_26.jpg)'
- en: Figure 1.26 – Visualizing reflected XSS on DVWA
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.26 – 可视化 DVWA 上的反射型 XSS
- en: So, the attack was successful. Let’s visualize the alert on the Wazuh dashboard.
    Navigate to **Security Alerts** and select the agent.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，攻击成功了。让我们在 Wazuh 仪表板上可视化这个警报。导航到**安全警报**并选择代理。
- en: '![ Figure 1.27 – Suricata alert against an XSS attack](img/B19549_1_27.jpg)'
  id: totrans-372
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.27 – Suricata 针对 XSS 攻击的警报](img/B19549_1_27.jpg)'
- en: Figure 1.27 – Suricata alert against an XSS attack
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.27 – Suricata 针对 XSS 攻击的警报
- en: 'Let’s break this down:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下：
- en: '`Security Alert – ET WEB_SERVER Script tag in URI Cross Site Scripting Attempt`:
    This represents the security alert name and signature name.'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Security Alert – ET WEB_SERVER Script tag in URI Cross Site Scripting Attempt`：这表示安全警报名称和签名名称。'
- en: '`data.alert.category` `Web Application Attack`: This represents the category
    of the alert based on the Suricata ET ruleset.'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data.alert.category` `Web Application Attack`：这是基于 Suricata ET 规则集的警报类别。'
- en: '`data.alert.metadata.tag` `Cross_Site_Scripting, XSS`: This represents the
    metadata of the security alerts. In our case, it’s `Cross_Site_Scripting` and
    `XSS`.'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data.alert.metadata.tag` `Cross_Site_Scripting, XSS`：这表示安全警报的元数据。在我们的例子中，它是
    `Cross_Site_Scripting` 和 `XSS`。'
- en: In this section, we have successfully launched the SQL Injection and reflected
    XSS on the intentionally vulnerable application called DVWA. Finally, we were
    able to detect the attacks using Suricata ET rules and visualize them on the Wazuh
    dashboard.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们成功地在故意设计为易受攻击的应用程序 DVWA 上发起了 SQL 注入攻击和反射型 XSS 攻击。最后，我们通过 Suricata ET
    规则检测到这些攻击，并在 Wazuh 仪表板上进行了可视化展示。
- en: In the next section, we will emulate multiple attacks on an Ubuntu machine using
    the tmNIDS project and visualize it on the Wazuh manager.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分中，我们将使用 tmNIDS 项目在 Ubuntu 机器上模拟多个攻击，并将其在 Wazuh 管理器上进行可视化展示。
- en: Testing NIDS with tmNIDS
  id: totrans-380
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 tmNIDS 测试 NIDS
- en: '**tmNIDS** is a GitHub project maintained by *3CoreSec*. tmNIDS is a simple
    framework designed for testing the detection capabilities of NIDS such as Suricata
    and Snort. The tests inside tmNIDS are designed to align with rulesets compatible
    with the ET community. The ET community builds and shares Suricata rules to detect
    a wide range of attacks such as web-based attacks, network attacks, and DDoS attacks.
    In this section, we will learn to simulate attacks using tmNIDS and we will visualize
    them on the Wazuh dashboard. We will cover these points in the following subsections:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '**tmNIDS** 是一个由 *3CoreSec* 维护的 GitHub 项目。tmNIDS 是一个简单的框架，旨在测试 NIDS（如 Suricata
    和 Snort）的检测能力。tmNIDS 中的测试旨在与 ET 社区兼容的规则集对齐。ET 社区构建并分享 Suricata 规则，以检测各种攻击，如基于
    Web 的攻击、网络攻击和 DDoS 攻击。在这一部分，我们将学习如何使用 tmNIDS 模拟攻击，并将在 Wazuh 仪表板上进行可视化展示。我们将在以下小节中讨论这些内容：'
- en: Lab setup
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实验设置
- en: Installing tmNIDS on Ubuntu Server
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Ubuntu 服务器上安装 tmNIDS
- en: Testing for a malicious User-Agent
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试恶意用户代理
- en: Testing for a Tor connection
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试 Tor 连接
- en: Test everything at once
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一次性测试所有内容
- en: Lab setup
  id: totrans-387
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实验设置
- en: 'In this lab setup, we have two devices: Ubuntu Server running the Wazuh agent,
    Suricata IDS, and tmNIDS, and second, the Wazuh server installed using a VM OVA
    file. The lab design is in the following figure.'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实验设置中，我们有两个设备：一个是运行 Wazuh 代理、Suricata IDS 和 tmNIDS 的 Ubuntu 服务器，另一个是通过虚拟机
    OVA 文件安装的 Wazuh 服务器。实验设计如下图所示。
- en: '![ Figure 1.28 – Lab set for testing Suricata IDS rules using tmNIDS](img/B19549_1_28.jpg)'
  id: totrans-389
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.28 – 使用 tmNIDS 测试 Suricata IDS 规则的实验设置](img/B19549_1_28.jpg)'
- en: Figure 1.28 – Lab set for testing Suricata IDS rules using tmNIDS
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.28 – 使用 tmNIDS 测试 Suricata IDS 规则的实验设置
- en: Installing tmNIDS on Ubuntu Server
  id: totrans-391
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Ubuntu 服务器上安装 tmNIDS
- en: 'The source code of the tmNIDS project is published on GitHub ([https://github.com/3CORESec/testmynids.org](https://github.com/3CORESec/testmynids.org)).
    To install tmNIDS, we can run a `curl` command to download the packages:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: tmNIDS 项目的源代码发布在 GitHub 上 ([https://github.com/3CORESec/testmynids.org](https://github.com/3CORESec/testmynids.org))。要安装
    tmNIDS，我们可以运行 `curl` 命令来下载软件包：
- en: '[PRE21]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let’s break this down:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来解析一下：
- en: '`curl`: This is a utility tool that initiates a request to download data from
    the specific URL.'
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`curl`：这是一个工具，用于发起请求从特定的 URL 下载数据。'
- en: '`-sSL`: Here, `-s` stands for showing progress without any output. The `S`
    flag will show errors if `curl` encounters any problem during the request and
    the `L` flag represents redirection.'
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-sSL`：在这里，`-s` 表示显示进度但不输出任何内容。`S` 标志会在 `curl` 遇到问题时显示错误，`L` 标志表示重定向。'
- en: '`-o /tmp/tmNIDS`: This informs `curl` to save downloaded files as `/``tmp`
    directory.'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-o /tmp/tmNIDS`：这告诉 `curl` 将下载的文件保存在 `/tmp` 目录。'
- en: '`chmod +x /tmp/tmNIDS`: It changes the file permissions of the downloaded file
    to executable.'
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chmod +x /tmp/tmNIDS`：它将下载的文件的权限更改为可执行。'
- en: Once the package has been executed, you will see a list of 12 tests for Suricata
    IDS as in the following diagram.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦执行了该包，你将看到如下图所示的12个 Suricata IDS 测试。
- en: '![Figure 1.29 – Visualizing tmNIDS detection tester](img/B19549_1_29.jpg)'
  id: totrans-400
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.29 – 可视化 tmNIDS 检测测试器](img/B19549_1_29.jpg)'
- en: Figure 1.29 – Visualizing tmNIDS detection tester
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.29 – 可视化 tmNIDS 检测测试器
- en: So, now that our tmNIDS is ready, we can start testing our Ubuntu Server (running
    Suricata IDS) against multiple attacks as explained in the next sections.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，tmNIDS 已经准备好，我们可以开始对运行 Suricata IDS 的 Ubuntu 服务器进行多个攻击测试，详细内容将在接下来的部分中讲解。
- en: Testing for a malicious User-Agent
  id: totrans-403
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试恶意用户代理
- en: 'In this scenario, we will execute test 3 from the tmNIDS tests, which is `HTTP
    Malware User-Agent`. For every HTTP request, there is a `User-Agent` header that
    describes the user’s browser, device, and OS. When an HTTP web browser sends a
    request to a web server, it inserts this header to identify itself to the server.
    The `User-Agent` string usually contains information such as the browser’s name
    and version, OS, device type, and sometimes extra data such as rendering engine
    details. If you take a closer look at the HTTP header using Google developer mode,
    you will find the `User-Agent` information:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 在此场景中，我们将执行 tmNIDS 测试中的第 3 项，即 `HTTP 恶意软件用户代理`。每个 HTTP 请求都有一个 `User-Agent` 头部，描述了用户的浏览器、设备和操作系统。当一个
    HTTP 网络浏览器向 Web 服务器发送请求时，它会插入此头部以向服务器标识自己。`User-Agent` 字符串通常包含诸如浏览器名称和版本、操作系统、设备类型以及有时的额外数据（如渲染引擎细节）。如果你使用
    Google 开发者模式仔细查看 HTTP 头部，你会发现 `User-Agent` 信息：
- en: '[PRE22]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This `User-Agent` string says that the browser is running on a Windows 10 64-bit
    system, using the Chrome browser (version `96.0.4664.45`) with rendering engines
    associated with both WebKit (Safari) and Gecko (Firefox).
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 该 `User-Agent` 字符串表示浏览器运行在一个 Windows 10 64 位系统上，使用的是 Chrome 浏览器（版本 `96.0.4664.45`），其渲染引擎与
    WebKit（Safari）和 Gecko（Firefox）都相关联。
- en: To test the Ubuntu Server (running Suricata IDS) against `HTTP Malware User-Agent
    test`, enter `3` on the `tmNIDS` prompt.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试 Ubuntu 服务器（运行 Suricata IDS）对 `HTTP 恶意用户代理测试`，请在 `tmNIDS` 提示符下输入 `3`。
- en: '![Figure 1.30 – Choosing option 3 from the tmNIDS detection tester](img/B19549_1_30.jpg)'
  id: totrans-408
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.30 – 从 tmNIDS 检测测试器中选择选项 3](img/B19549_1_30.jpg)'
- en: Figure 1.30 – Choosing option 3 from the tmNIDS detection tester
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.30 – 从 tmNIDS 检测测试器中选择选项 3
- en: Now, let’s visualize the alerts on the Wazuh dashboard. You can navigate to
    the **Security Alerts** module and select the endpoint. You can find the alerts
    as shown in the following diagram.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在 Wazuh 仪表盘上可视化警报。你可以导航到 **安全警报** 模块并选择终端节点。你可以找到如下图所示的警报。
- en: '![Figure 1.31 – Suricata alert against a suspicious User-Agent](img/B19549_1_31.jpg)'
  id: totrans-411
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.31 – Suricata 对可疑 User-Agent 的警报](img/B19549_1_31.jpg)'
- en: Figure 1.31 – Suricata alert against a suspicious User-Agent
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.31 – Suricata 对可疑 User-Agent 的警报
- en: 'Let’s break some of the following down:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下以下内容：
- en: '`Suricata: Alert – ET POLICY GNU/LINUX APT User-Agent Outbound likely to package
    management`: This represents the **Security alerts** name and signature'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Suricata: Alert – ET POLICY GNU/LINUX APT User-Agent Outbound likely to package
    management`：这表示 **安全警报** 的名称和签名。'
- en: '`data.alert.category : Not Suspicious Traffic`: This represents the category
    of the ET ruleset category'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data.alert.category : Not Suspicious Traffic`：这表示 ET 规则集的类别。'
- en: '`data.alert.signature : ET POLICY GNU/Linux APT User-Agent Outbound likely
    related to package management`: This suggests potential APT-related outbound network
    activity, possibly tied to package management.'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data.alert.signature : ET POLICY GNU/Linux APT User-Agent Outbound likely
    related to package management`：这表示可能与 APT 相关的出站网络活动，可能与软件包管理有关。'
- en: After successfully testing `HTTP Malicious User-Agent` and visualizing alerts
    on the Wazuh dashboard, we will test the Tor connection in the next section.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功测试 `HTTP 恶意用户代理` 并在 Wazuh 仪表盘上可视化警报后，我们将在下一部分测试 Tor 连接。
- en: Testing for Tor connection
  id: totrans-418
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试 Tor 连接
- en: In this scenario, we will execute test 5, which is `Tor`. **Tor** is a decentralized,
    anonymous network that users can use to browse the internet privately and safely.
    However, it is often used by hackers, malicious actors, and cybercriminals who
    access the dark web and sell stolen data and illegal goods online. Its anonymity
    features can keep attackers’ identities secret, making it hard for the government
    to track their actions and hence, it is important for every organization to block
    any traffic from Tor services. The most popular Tor application is **Tor Browser**.
    When anyone accesses any website through the Tor Browser, it goes through proxy
    nodes, making it difficult for anyone to intercept. From a cybersecurity point
    of view, we can build a list of IP addresses of such nodes and eventually block
    them, or block Tor-based applications based on their signatures.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个场景中，我们将执行测试 5，即 `Tor`。**Tor** 是一个去中心化的匿名网络，用户可以利用它私密且安全地浏览互联网。然而，它也常被黑客、恶意行为者和网络犯罪分子用来访问暗网，销售被盗数据和非法商品。它的匿名功能能保护攻击者的身份，使政府难以追踪他们的行动，因此，对于每个组织来说，阻止来自
    Tor 服务的任何流量都显得尤为重要。最受欢迎的 Tor 应用程序是 **Tor Browser**。当任何人通过 Tor Browser 访问网站时，流量会经过代理节点，这使得任何人都难以拦截。从网络安全的角度来看，我们可以列出这些节点的
    IP 地址，并最终将其封锁，或者根据其签名来封锁基于 Tor 的应用程序。
- en: To test this scenario, go back to the tmNIDS prompt and enter `5`. The Tor attack
    will be executed on our Ubuntu Server running Suricata IDS.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试这个场景，请返回 tmNIDS 提示并输入 `5`。Tor 攻击将在我们运行 Suricata IDS 的 Ubuntu 服务器上执行。
- en: '![Figure 1.32 – Choosing option 5 from the tmNIDS detection tester](img/B19549_1_32.jpg)'
  id: totrans-421
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.32 – 从 tmNIDS 检测测试器中选择选项 5](img/B19549_1_32.jpg)'
- en: Figure 1.32 – Choosing option 5 from the tmNIDS detection tester
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.32 – 从 tmNIDS 检测测试器中选择选项 5
- en: To visualize the alert, navigate to the **Security Alerts** module of Wazuh
    and check for the relevant alerts shown in the following diagram.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 要可视化警报，请导航到 Wazuh 的 **安全警报** 模块，并检查以下图示中显示的相关警报。
- en: '![Figure 1.33 – Suricata alert against Tor hidden traffic](img/B19549_1_33.jpg)'
  id: totrans-424
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.33 – Suricata 针对 Tor 隐藏流量的警报](img/B19549_1_33.jpg)'
- en: Figure 1.33 – Suricata alert against Tor hidden traffic
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.33 – Suricata 针对 Tor 隐藏流量的警报
- en: 'Both have been detected by the Suricata ET ruleset. There are two rule descriptions:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 这两者都已被 Suricata ET 规则集检测到。以下是两个规则描述：
- en: '`Suricata: Alert - ET POLICY DNS Query for TOR Hidden Domain .onion Accessible`
    `Via TOR`'
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Suricata: 警报 - ET 政策 DNS 查询 TOR 隐藏域 .onion 可通过 TOR 访问`'
- en: '`Suricata: Alert - ET MALWARE Cryptowall .onion` `Proxy Domain`'
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Suricata: 警报 - ET 恶意软件 Cryptowall .onion` `代理域`'
- en: We have successfully tested the Tor .onion DNS response test and visualized
    the alerts on the Wazuh manager. In the next section, we will run all the tests
    at once and visualize the alerts.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功测试了 Tor .onion DNS 响应测试，并在 Wazuh 管理器上可视化了警报。在接下来的部分中，我们将一次性运行所有测试并可视化警报。
- en: Testing everything at once
  id: totrans-430
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一次性测试所有内容
- en: Now, this is like a non-stop rifle. You basically launch all the tests at once.
    To start, type `11` under the tmNIDS tests prompt and monitor the events on the
    Wazuh manager.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这就像是一把不停发射的步枪。你基本上是一次性启动所有测试。首先，在 tmNIDS 测试提示下输入 `11`，并监控 Wazuh 管理器上的事件。
- en: '![Figure 1.34 – Suricata alerts against all the tmNIDS tests](img/B19549_1_34.jpg)'
  id: totrans-432
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.34 – Suricata 针对所有 tmNIDS 测试的警报](img/B19549_1_34.jpg)'
- en: Figure 1.34 – Suricata alerts against all the tmNIDS tests
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.34 – Suricata 针对所有 tmNIDS 测试的警报
- en: As you can see, we have received alerts against all the tests listed in the
    tmNIDS detection tester. This shows that our Suricata IDS along with the ET ruleset
    are effective against attacks launched by the tmNIDS project.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们收到了针对 tmNIDS 检测测试器中列出的所有测试的警报。这表明我们的 Suricata IDS 与 ET 规则集对于 tmNIDS 项目发起的攻击是有效的。
- en: Summary
  id: totrans-435
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about Wazuh and its integration with the Suricata
    IDS to effectively detect anomalous traffic behavior. We started by exploring
    the Suricata IDS and its deployment method. We then covered the setup of Wazuh,
    the configuration of Suricata rules, and practical threat detection using DVWA.
    We then learned about testing Suricata rulesets using a tmNIDS tester.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了 Wazuh 及其与 Suricata IDS 的集成，以有效检测异常流量行为。我们首先探索了 Suricata IDS 及其部署方式。然后，我们介绍了
    Wazuh 的设置、Suricata 规则的配置，以及使用 DVWA 进行的实际威胁检测。接着，我们了解了如何使用 tmNIDS 测试器测试 Suricata
    规则集。
- en: In the next chapter, we will learn about the different malware detection capabilities
    of the Wazuh platform. We will also explore third-party integration for the purpose
    of detecting advanced malware files and signatures.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习 Wazuh 平台的不同恶意软件检测能力。我们还将探索第三方集成，以便检测高级恶意软件文件和特征。
