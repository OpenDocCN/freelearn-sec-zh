- en: Assessments
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: Chapter 1
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章
- en: 'No one reverse engineering framework is the ultimate. Each reverse engineering
    framework has its own strengths and weaknesses. We can mention some current Ghidra
    strengths when comparing Ghidra with most other reverse engineering frameworks:'
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有任何逆向工程框架是完美的。每个逆向工程框架都有其优缺点。我们可以提到一些当前Ghidra的优点，与大多数其他逆向工程框架相比：
- en: '- It is open source and free (including its decompiler).'
  id: totrans-3
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 它是开源的并且免费（包括其反编译器）。'
- en: '- It supports a lot of architectures (it may be the framework you are using
    is not supported yet).'
  id: totrans-4
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 它支持很多架构（可能你使用的框架目前还不支持）。'
- en: '- It can load multiple binaries at the same time in a project. This feature
    allows you to easily apply operations over many related binaries (for example,
    an executable binary and its libraries).'
  id: totrans-5
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 它可以在一个项目中同时加载多个二进制文件。这个功能使你能够轻松地对多个相关的二进制文件（例如，一个可执行二进制文件及其库）应用操作。'
- en: '- It allows collaborative reverse engineering by design.'
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 它通过设计支持协作逆向工程。'
- en: '- It supports big firmware images (1 GB +) without problems.'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 它支持大型固件镜像（1 GB+）而不出现问题。'
- en: '- It has awesome documentation, which includes examples and courses.'
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 它有非常棒的文档，其中包括示例和课程。'
- en: '- It allows version tracking of binaries allowing the matching of functions
    and data and their markup between different versions of the binary.'
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 它支持二进制文件的版本追踪，允许在不同版本的二进制文件之间匹配函数和数据及其标记。'
- en: 'But we can also mention an important weakness:'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 但是我们也可以提到一个重要的弱点：
- en: '- Ghidra Python scripting relies on Jython (a Java implementation of Python)
    and it currently doesn''t support Python 3\. Since Python 2.x is currently deprecated,
    this is a significant weakness of Ghidra.'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- Ghidra的Python脚本依赖于Jython（Python的Java实现），目前不支持Python 3。由于Python 2.x已被弃用，这是Ghidra的一个显著弱点。'
- en: The bar located in the upper-right margin of the disassembly window allows you
    to customize the disassembly view:![Disassembly listing configuration
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 反汇编窗口右上角的条形工具栏允许你自定义反汇编视图：![反汇编列表配置
- en: '](img/image_00_001.jpg)'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/image_00_001.jpg)'
- en: Disassembly listing configuration
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 反汇编列表配置
- en: 'By right-clicking on the **PCode** field, PCode will appear in the disassembly
    listing:'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 右键点击**PCode**字段，PCode将出现在反汇编列表中：
- en: '![Enable the PCode field in disassembly'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![在反汇编中启用PCode字段'
- en: '](img/image_00_002.jpg)'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/image_00_002.jpg)'
- en: Enable the PCode field in disassembly
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在反汇编中启用PCode字段
- en: 'The following figure shows the resulting disassembly listing after enabling
    the **PCode** field:'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下图展示了启用**PCode**字段后的反汇编列表：
- en: '![Disassembly listing with PCode enabled'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![启用PCode的反汇编列表'
- en: '](img/image_00_003.jpg)'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/image_00_003.jpg)'
- en: Disassembly listing with PCode enabled
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 启用PCode的反汇编列表
- en: As you can see in the screenshot, for each assembly instruction, one or more
    PCode instructions are generated.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如截图所示，对于每条汇编指令，都会生成一个或多个PCode指令。
- en: The disassembly view is a view of the instructions using the language of the
    processor while the decompiler view shows pseudo-C decompiled code:![Comparing
    disassembled with decompiled code
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 反汇编视图是使用处理器语言显示指令的视图，而反编译视图则显示伪C的反编译代码：![比较反汇编与反编译后的代码
- en: '](img/image_00_004.jpg)'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/image_00_004.jpg)'
- en: Comparing disassembled with decompiled code
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 比较反汇编与反编译后的代码
- en: In the preceding screenshot, you can see a disassembly view in the left margin
    showing the same code as the decompiled view located in the right margin.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，你可以看到左侧边缘的反汇编视图与右侧边缘的反编译视图显示相同的代码。
- en: Chapter 2
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章
- en: Ghidra scripts are useful because they can be used to automatize reverse engineering
    tasks.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ghidra脚本非常有用，因为它们可以用于自动化逆向工程任务。
- en: 'Some tasks that you can automatize using Ghidra scripts are the following:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以用Ghidra脚本自动化的任务包括：
- en: '- Searching for strings and code patterns'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 查找字符串和代码模式'
- en: '- Automatically deobfuscating code'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 自动去混淆代码'
- en: '- Adding useful comments to enrich the dissasembly'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 添加有用的注释来丰富反汇编内容'
- en: Scripts are organized by category, as shown on the left-hand side of the following
    screenshot:![Script Manager
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 脚本按类别组织，如下图左侧所示：![脚本管理器
- en: '](img/image_00_005.jpg)'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/image_00_005.jpg)'
- en: Script Manager
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 脚本管理器
- en: 'When clicking on the checklist icon located in the upper-right margin, as shown
    in the preceding screenshot taken from the Script Manager window, the paths of
    script directories will be shown:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当点击右上角的复选框图标时，如从脚本管理器窗口截图所示，脚本目录的路径将会显示：
- en: '![Script Directories'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![脚本目录'
- en: '](img/image_00_006.jpg)'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/image_00_006.jpg)'
- en: Script Directories
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 脚本目录
- en: 'But the organization of the scripts in the Script Manager is taken from the
    `@category` field located in the header of the script code, as shown in the following
    listing:'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 但脚本管理器中的脚本组织是根据脚本代码头文件中的 `@category` 字段来确定的，如下所示：
- en: //TODO write a description for this script //@author **//@category Strings**
    //@keybinding //@menupath //@toolbar
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: //TODO 为此脚本编写描述 //@author **//@category 字符串** //@keybinding //@menupath //@toolbar
- en: Notice that the previous script header is a Python header, but an analogous
    header is used when writing JavaScript for Ghidra.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，前面的脚本头是 Python 头文件，但在为 Ghidra 编写 JavaScript 时，会使用类似的头文件。
- en: Ghidra is written in the Java language (of course, the decompiler is not; it
    is written in the C++ programming language), so the API of Ghidra is exposed in
    Java. It is the same in Python because the Python API consists of a Java bridge
    powered by Jython, a Java implementation of Python.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ghidra 是用 Java 语言编写的（当然，反编译器不是，它是用 C++ 编写的），因此 Ghidra 的 API 以 Java 的形式公开。Python
    也是如此，因为 Python API 是通过 Jython（一个 Java 实现的 Python）实现的 Java 桥接。
- en: Chapter 3
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章
- en: Yes. ZIP files containing the source code are attached to the same folder that
    the JAR file you want to debug exists in. To link the source code with the JAR
    file using the Eclipse IDE, right-click on the JAR file and then enter the ZIP
    file in the Workspace location field of the Java Source Attachment section as
    shown in the following screenshot:![Linking to Graph.jar file with its own source
    code
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的，包含源代码的 ZIP 文件会附加到包含您想调试的 JAR 文件的相同文件夹中。要使用 Eclipse IDE 将源代码与 JAR 文件关联，请右键点击
    JAR 文件，然后在 Java Source Attachment 部分的 Workspace 位置字段中输入 ZIP 文件，如下图所示：![将 Graph.jar
    文件与其源代码关联
- en: '](img/image_00_007.jpg)'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/image_00_007.jpg)'
- en: Linking to Graph.jar file with its own source code
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 Graph.jar 文件与其源代码关联
- en: After that, you will be able to expand the JAR file, showing included `*.class`
    files.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之后，您将能够展开 JAR 文件，显示其中包含的 `*.class` 文件。
- en: 'Yes, it is possible, as demonstrated in the following blog post:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的，这是可能的，以下博客文章展示了这一点：
- en: '[https://reversing.technology/2019/11/18/ghidra-dev-pt1.html](https://reversing.technology/2019/11/18/ghidra-dev-pt1.html)'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://reversing.technology/2019/11/18/ghidra-dev-pt1.html](https://reversing.technology/2019/11/18/ghidra-dev-pt1.html)'
- en: But remember that the Eclipse IDE is the only one officially supported by Ghidra.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 但请记住，Eclipse IDE 是 Ghidra 官方支持的唯一 IDE。
- en: Some vulnerabilities were found in Ghidra but those and any other ones are probably
    not NSA backdoors into the program. The NSA has its own zero-day exploits to hack
    computers and, for sure, doesn't need to introduce backdoors into its own programs
    to hack the computers of people around the world. In fact, to do so would be a
    terrible move in terms of reputation.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Ghidra 中发现了一些漏洞，但这些漏洞以及其他任何漏洞都不太可能是 NSA 在该程序中的后门。NSA 拥有自己的零日漏洞来攻击计算机，肯定不需要在自己的程序中引入后门来攻击全球的计算机。事实上，这样做会在声誉上带来极大的负面影响。
- en: Chapter 4
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章
- en: A Ghidra extension is code that extends Ghidra with new features while scripts
    are code for assisting the reverse engineering process by automating tasks.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ghidra 扩展是扩展 Ghidra 新功能的代码，而脚本则是通过自动化任务来协助逆向工程过程的代码。
- en: Since this task consists of analyzing the code and improving it, you will need
    to write or incorporate a new Ghidra Analyzer extension in order to extend the
    analysis capabilities of Ghidra.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于此任务包括分析代码并改进它，您需要编写或集成一个新的 Ghidra Analyzer 扩展，以扩展 Ghidra 的分析功能。
- en: As explained in the first question for this chapter, Ghidra scripts and Ghidra
    extensions have different purposes so use Ghidra scripts to automate reverse engineering
    tasks applied over the disassembly listing and use Ghidra extensions if you want
    to extend or improve Ghidra with new features.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如本章第一个问题所解释，Ghidra 脚本和 Ghidra 扩展有不同的用途，因此请使用 Ghidra 脚本来自动化应用于反汇编列表的逆向工程任务，如果您想通过新功能扩展或改进
    Ghidra，则使用 Ghidra 扩展。
- en: Chapter 5
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章
- en: Imports leak the capabilities of malware taken from dynamic linking libraries,
    including operating system libraries, which enables communication for the malware
    with the outside. Sometimes the malware dynamically loads dynamic linking libraries
    (via the LoadLibrary API) and dynamically imports functions (via the `GetProcAddress`
    API), so you will not see the full set of imported libraries during a static analysis
    without further analysis than opening the binary with Ghidra and looking for the
    imports.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入泄露了恶意软件从动态链接库中获取的功能，包括操作系统库，这使得恶意软件能够与外部进行通信。有时恶意软件会动态加载动态链接库（通过LoadLibrary
    API）并动态导入函数（通过`GetProcAddress` API），因此你在进行静态分析时不会看到完整的导入库集，除非进行更深入的分析，超越仅仅是用Ghidra打开二进制文件并查找导入。
- en: Yes. You can use a Ghidra analyzer to extract object-oriented information from
    the disassembly (for example, objects, methods, and so on) and improve the disassembly
    listing using this information. Or, use a Ghidra analyzer to enrich the disassembly
    listing with object-oriented information obtained from a third-party source.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的，你可以使用Ghidra分析器从反汇编中提取面向对象的信息（例如，对象、方法等），并利用这些信息改进反汇编列表。或者，使用Ghidra分析器从第三方来源获取面向对象的信息，丰富反汇编列表。
- en: 'There are a lot of benefits to it:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这样做有很多好处：
- en: '- Bypass firewall rules if the application the code is injected into has associated
    firewall rules that are less restrictive than the original process.'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 如果代码注入的应用程序具有与原始进程相比更不严格的防火墙规则，则绕过防火墙规则。'
- en: '- To be more stealthy, it is better to inject into a legitimate process than
    creating a new process.'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 为了更加隐蔽，最好注入到一个合法进程中，而不是创建一个新的进程。'
- en: This list includes some general reasons but the whole list would be extensive.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个列表包含了一些常见的原因，但完整的列表会非常庞大。
- en: Chapter 6
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章
- en: The appropriate Ghidra API function to set a byte at a given memory address
    is `setByte`.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置给定内存地址的字节的适当Ghidra API函数是`setByte`。
- en: 'I followed these steps to reach this Ghidra Flat API function:'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我按照以下步骤来定位这个Ghidra Flat API函数：
- en: 1\. I checked the Ghidra Flat API reference provided in [*Chapter 6*](B16207_06_Final_SK_ePub.xhtml#_idTextAnchor108),
    *Scripting Malware Analysis*.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1. 我查看了在[*第6章*](B16207_06_Final_SK_ePub.xhtml#_idTextAnchor108)中提供的Ghidra Flat
    API参考，*脚本化恶意软件分析*。
- en: '2\. I located the set of Ghidra Flat API functions of interest: `setByte`.'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2. 我找到了感兴趣的Ghidra Flat API函数集：`setByte`。
- en: 4\. I checked the online documentation of the function to confirm that it was
    the function I was looking for:[https://ghidra.re/ghidra_docs/api/ghidra/program/database/mem/MemoryMapDB.html#setByte(ghidra.program.model.address.Address,byte](https://ghidra.re/ghidra_docs/api/ghidra/program/database/mem/MemoryMapDB.html#setByte(ghidra.program.model.address.Address,byte)).
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 4. 我查看了该函数的在线文档，以确认它就是我寻找的那个函数：[https://ghidra.re/ghidra_docs/api/ghidra/program/database/mem/MemoryMapDB.html#setByte(ghidra.program.model.address.Address,byte](https://ghidra.re/ghidra_docs/api/ghidra/program/database/mem/MemoryMapDB.html#setByte(ghidra.program.model.address.Address,byte))。
- en: '5\. The description matched my needs: **Write byte at addr**. So, we can use
    it for that.'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 5. 描述符合我的需求：**在地址写入字节**。所以我们可以使用它来做这件事。
- en: 'Ghidra is written in the Java programming language and this is why this language
    is the most supported (of course, the decompiler is not; it is written in the
    C++ programming language) so the API of Ghidra is naturally exposed in Java.The
    Java API is better than the Python API because the Python API is a bridge to the
    Java API implemented by Jython, a Java implementation of Python.So, issues with
    Jython could happen, which doesn''t happen with Java. Let''s pick a random issue
    to demonstrate this: [https://github.com/NationalSecurityAgency/ghidra/issues/2369](https://github.com/NationalSecurityAgency/ghidra/issues/2369).'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ghidra是用Java编程语言编写的，这也是为什么该语言是最受支持的语言（当然，反编译器除外；反编译器是用C++编程语言编写的），因此Ghidra的API自然以Java语言暴露。Java
    API比Python API更好，因为Python API是通过Jython实现的Java API的桥梁，而Jython是Python的Java实现。因此，Jython可能会出现问题，而Java则没有这种问题。让我们随机挑选一个问题来演示：[https://github.com/NationalSecurityAgency/ghidra/issues/2369](https://github.com/NationalSecurityAgency/ghidra/issues/2369)。
- en: 'Or look for Jython issues on your own following this link: [https://github.com/NationalSecurityAgency/ghidra/search?q=jython&type=issues](https://github.com/NationalSecurityAgency/ghidra/search?q=jython&type=issues).'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者按照这个链接自己查找Jython相关的问题：[https://github.com/NationalSecurityAgency/ghidra/search?q=jython&type=issues](https://github.com/NationalSecurityAgency/ghidra/search?q=jython&type=issues)。
- en: Yes. By using Ghidra scripts, you can compute values that are calculated at
    runtime and enrich the disassembly with it.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的，使用 Ghidra 脚本时，可以计算运行时计算的值并将其用于丰富反汇编。
- en: Chapter 7
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章
- en: You can execute headed scripts in headless mode only if those scripts don't
    make use of GUI APIs and vice versa. You can execute headless mode scripts in
    Ghidra headed mode only if those scripts don't make use of functions proper of
    headless, otherwise, an exception will be thrown.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你只能在无头模式下执行有头模式脚本，前提是这些脚本不使用 GUI API，反之亦然。如果脚本使用了无头模式专用的函数，则会抛出异常。
- en: Ghidra headed mode is useful to perform a visual and mostly manual analysis
    of the binary by analyzing the graph, improving it, reading the disassembly listing,
    and so on. On the other hand, headless mode is adequate to perform automatic analysis
    or apply a script over a set of binaries.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ghidra 的头模式有助于通过分析图形、改进图形、读取反汇编列表等，进行二进制文件的可视化和大多数手动分析。另一方面，无头模式适合执行自动化分析或对一组二进制文件应用脚本。
- en: The difference is that `grep` or `strings` will return any matching string found
    in the binary while Ghidra will return matching strings recognized by the analyzer.
    So, for instance, you will also be able to identify references to it in the disassembly
    listing and spurious strings won't will be taken into account by Ghidra.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 区别在于，`grep` 或 `strings` 会返回在二进制文件中找到的任何匹配字符串，而 Ghidra 会返回分析器识别的匹配字符串。例如，你还可以在反汇编列表中识别对它的引用，虚假的字符串不会被
    Ghidra 考虑在内。
- en: Chapter 8
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章
- en: 'No, memory corruption is a type of software vulnerability but many more exist.
    For instance, race condition vulnerabilities:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不，内存损坏是一种软件漏洞，但还有许多其他漏洞。例如，竞争条件漏洞：
- en: '- `free()` twice on the same memory address, potentially leading to the modification
    of unexpected memory locations.'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 在同一内存地址上执行 `free()` 两次，可能导致修改意外的内存位置。'
- en: It is considered unsafe because the size of the destination buffer where the
    source buffer will be copied is not taken into account, so it can easily lead
    to a buffer overflow.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它被认为是不安全的，因为没有考虑目标缓冲区的大小，而源缓冲区会被复制到这个目标缓冲区中，因此很容易导致缓冲区溢出。
- en: 'The three usual binary protection methods are as follows:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 三种常见的二进制保护方法如下：
- en: '- **Stack canaries**: In this method we put a precomputed value (the canary)
    before the return address such that the return address cannot be overwritten without
    overwriting that value first. The integrity of the canary can be checked after
    returning from the function.'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **堆栈金丝雀**：在这种方法中，我们在返回地址之前放置一个预先计算的值（即金丝雀），使得返回地址在没有首先覆盖该值的情况下无法被覆盖。可以在从函数返回后检查金丝雀的完整性。'
- en: '- **DEP (Data Execution Prevention) / NX (do not execute)**: Makes the stack
    non-executable, so the attacker cannot simply execute the shellcode on the stack.'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **DEP (数据执行保护) / NX (不可执行)**：使堆栈不可执行，这样攻击者就不能简单地在堆栈上执行 shellcode。'
- en: '- **ASLR (Address Space Layout Randomization)/PIE (Position-Independent Executable)**:
    Randomizes the location where system executables are loaded into memory, so the
    attacker cannot easily know where exactly to redirect the flow of the program
    if hijacked.'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **ASLR (地址空间布局随机化) / PIE (位置独立可执行文件)**：随机化系统可执行文件加载到内存中的位置，这样攻击者就无法轻易知道如果程序被劫持，应该将程序流重定向到哪里。'
- en: Yes, it is sometimes possible to bypass all the methods mentioned to achieve
    code execution.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 是的，有时可以绕过所有提到的方法来实现代码执行。
- en: Chapter 9
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章
- en: SLEIGH is a processor specification language that formally describes the translation
    from the bit encoding of machine instructions, for a particular processor, to
    human-readable assembly language and into PCode.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SLEIGH 是一种处理器规格语言，用于正式描述将机器指令的位编码（特定处理器的）转换为人类可读的汇编语言并转换为 PCode。
- en: On the other hand, PCode is an **intermediate representation** **(IR)** that
    can be translated into the assembly instructions of a specific processor. Being
    more precise, it is a **register transfer language** **(RTL)**. PCode is used
    to describe data flow at the register-transfer level of an architecture.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一方面，PCode 是一种 **中间表示** **(IR)**，可以被转换成特定处理器的汇编指令。更准确地说，它是一种 **寄存器传输语言** **(RTL)**。PCode
    用于描述架构中寄存器传输级别的数据流。
- en: No, it isn't.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不，不能。
- en: PCode is useful because it can be translated into a large set of different assembly
    languages. In practice, if you develop a tool for Pcode, you automatically support
    a lot of architectures. Furthermore, PCode offers more granularity than assembly
    language (one assembly instruction is translated into one or more PCode instructions)
    so you can control side-effects better. This property is very useful when developing
    some kinds of tools.
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PCode非常有用，因为它可以转换为多种不同的汇编语言。实际上，如果你为PCode开发一个工具，你将自动支持许多架构。此外，PCode比汇编语言提供了更多的粒度（一个汇编指令会转换为一个或多个PCode指令），因此你可以更好地控制副作用。当开发某些类型的工具时，这个特性非常有用。
- en: Chapter 10
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章
- en: Ghidra is mostly implemented in the Java language but, of course, the decompiler
    was implemented in the C++ language.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ghidra主要是用Java语言实现的，但当然，反编译器是用C++语言实现的。
- en: 'You can use a Ghidra plugin for that. For instance, you can install the following
    available plugins, allowing debugging synchronization:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用Ghidra插件来实现这一点。例如，你可以安装以下可用插件，支持调试同步：
- en: '- **GDBGhidra**: [https://github.com/Comsecuris/gdbghidra](https://github.com/Comsecuris/gdbghidra)'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **GDBGhidra**: [https://github.com/Comsecuris/gdbghidra](https://github.com/Comsecuris/gdbghidra)'
- en: '- **ret-sync (Reverse-Engineering Tools SYNChronization)**: [https://github.com/bootleg/ret-sync](https://github.com/bootleg/ret-sync)'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **ret-sync（反向工程工具同步）**: [https://github.com/bootleg/ret-sync](https://github.com/bootleg/ret-sync)'
- en: A provider is Java code implementing the Ghidra plugin **Graphical User Interface
    (GUI)**.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供者是实现Ghidra插件**图形用户界面（GUI）**的Java代码。
- en: Chapter 11
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章
- en: A raw binary is a file that contains unprocessed data, so it has no format in
    any way while formatted binaries are binary files following a format specification
    such that they can be parsed, for instance, by Ghidra.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 原始二进制文件是包含未经处理的数据的文件，因此它没有任何格式，而格式化的二进制文件是遵循格式规范的二进制文件，这样它们可以被解析，例如通过Ghidra。
- en: If the file being analyzed follows a format specification, it is much more comfortable
    to let the loader automatically define the bytes as code or strings, create symbols,
    and so on. When dealing with raw binaries you will need to manually process the
    data. Therefore, it is much more confortable for a reverse engineer to deal with
    formatted binaries when possible rather than raw binaries.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果被分析的文件遵循格式规范，那么让加载器自动定义字节为代码或字符串、创建符号等，会更加方便。当处理原始二进制文件时，你需要手动处理数据。因此，反向工程师通常会更愿意处理格式化的二进制文件，而不是原始二进制文件。
- en: 'Old-style DOS executable is the format for MS-DOS executable binaries. The
    Ghidra loader for old-style DOS executable files is developed by the following
    pieces of software:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 旧版DOS可执行文件是MS-DOS可执行二进制文件的格式。Ghidra加载器用于旧版DOS可执行文件的开发是通过以下软件实现的：
- en: '- `DOSHeader.java`: A Java file implementing the old-style DOS executable parser.'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- `DOSHeader.java`：一个实现旧版DOS可执行文件解析器的Java文件。'
- en: '- `OldStyleExecutable.java`: A class that uses `FactoryBundledWithBinaryReader`
    to read data from a generic byte provider and passes it to the `DOSHeader` class
    in order to parse it. The `OldStyleExecutable` class exposes both via getter methods:
    `DOSHeader` and the underlying `FactoryBundledWithBinaryReader` object.'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- `OldStyleExecutable.java`：一个类，使用`FactoryBundledWithBinaryReader`从通用字节提供者读取数据，并将其传递给`DOSHeader`类以进行解析。`OldStyleExecutable`类通过getter方法公开了`DOSHeader`和底层的`FactoryBundledWithBinaryReader`对象。'
- en: Chapter 12
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章
- en: A processor module adds support for a processor using the SLEIGH processor specification
    language while an analyzer module is Java code for extending Ghidra code analysis
    in order to identify functions, detect parameters when calling a function, and
    so on.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理器模块使用SLEIGH处理器规范语言添加对处理器的支持，而分析器模块是用于扩展Ghidra代码分析的Java代码，用以识别函数、检测调用函数时的参数等。
- en: Yes. Tags indicating the possible start of a function or a code boundary are
    relative to the patterns being declared.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的。指示可能开始函数或代码边界的标签是相对于所声明的模式的。
- en: A language refers to a microprocessor architecture. Since a microprocessor architecture
    embraces a family of instruction set architectures, the term language variant
    means each one of those instruction set architectures belonging to the same microprocessor
    architecture.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一种语言指的是微处理器架构。由于微处理器架构包含一系列指令集架构，因此“语言变体”一词意味着属于同一微处理器架构的所有指令集架构中的每一个。
- en: Chapter 13
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章
- en: 'No. Ghidra is an open source project and you can join the community whenever
    you wish. You can join it by simply creating a Ghidra account and going to the
    following URL:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不行。Ghidra是一个开源项目，你可以随时加入社区。你只需要创建一个Ghidra账户并访问以下网址即可加入：
- en: '[https://github.com/NationalSecurityAgency/ghidra/](https://github.com/NationalSecurityAgency/ghidra/)'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/NationalSecurityAgency/ghidra/](https://github.com/NationalSecurityAgency/ghidra/)'
- en: 'You can interact with them, for instance, via GitHub by writing comments, proposing
    pull requests to Ghidra with your own code, and much more: [https://github.com/NationalSecurityAgency/ghidra/](https://github.com/NationalSecurityAgency/ghidra/).'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过GitHub与他们互动，例如，写评论、向Ghidra提出带有你自己代码的拉取请求，等等：[https://github.com/NationalSecurityAgency/ghidra/](https://github.com/NationalSecurityAgency/ghidra/)。
- en: 'There are several chat links you can follow to chat with other members:'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有几个聊天链接可以用来与其他成员交流：
- en: '- Telegram: [https://t.me/GhidraREandhttps://t.me/GhidraRE_dev](https://t.me/GhidraREandhttps://t.me/GhidraRE_dev)'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- Telegram：[https://t.me/GhidraREandhttps://t.me/GhidraRE_dev](https://t.me/GhidraREandhttps://t.me/GhidraRE_dev)'
- en: '- Matrix: [https://riot.im/app/#/group/+ghidra:matrix.org](https://riot.im/app/#/group/+ghidra:matrix.org)'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 矩阵：[https://riot.im/app/#/group/+ghidra:matrix.org](https://riot.im/app/#/group/+ghidra:matrix.org)'
- en: '- Discord: [https://discord.com/invite/S4tQnUB](https://discord.com/invite/S4tQnUB)'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- Discord：[https://discord.com/invite/S4tQnUB](https://discord.com/invite/S4tQnUB)'
- en: Chapter 14
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章
- en: Concrete execution means running a program using concrete values (for example,
    the `eax` register takes the value 5) while symbolic execution runs the program
    using symbolic values that can be expressed using `eax` register is a vector of
    32 bits whose value, at this moment, is less than 5).
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 具体执行意味着使用具体的值来运行程序（例如，`eax`寄存器的值为5），而符号执行则使用符号值运行程序，这些符号值可以通过`eax`寄存器表示，`eax`寄存器是一个32位的向量，其值此刻小于5。
- en: No, it can't. It is not possible to perform symbolic execution in an efficient
    way for general cases.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不行，它做不到。对于一般情况，无法以高效的方式执行符号执行。
- en: Yes. You can extend Ghidra to apply symbolic and/or concolic execution to binary
    files.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的。你可以扩展Ghidra，将符号执行和/或合成执行应用于二进制文件。
