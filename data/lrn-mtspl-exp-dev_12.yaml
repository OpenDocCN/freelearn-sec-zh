- en: Chapter 12. Exploit Research with Metasploit
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章。使用Metasploit进行利用研究
- en: Exploit, in very simple words, is a piece of code or a collection of commands
    specifically written in a typical format that takes advantage of a vulnerability
    or weakness in the software/hardware and causes unanticipated behavior to occur.
    This unintended behavior may be in the form of a system crash, denial of service,
    buffer overflow, a blue screen of death, or the system being unresponsive. When
    we talk about exploits, we have something known as a zero-day exploit. A zero-day
    exploits a security vulnerability on the same day the vulnerability gets known.
    This means that developers have zero days to address and patch the vulnerability.
    These are used by attackers to attack vulnerable systems before the developer
    of the target software knows about the vulnerability.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 利用，简单来说，是一段代码或一系列命令，专门以典型格式编写，利用软件/硬件中的漏洞或弱点，并导致意外行为发生。这种意外行为可能以系统崩溃、拒绝服务、缓冲区溢出、蓝屏或系统无响应的形式出现。当我们谈论利用时，我们有一个称为零日利用的东西。零日利用是在漏洞被发现的当天利用安全漏洞。这意味着开发人员在漏洞被发现后没有时间来解决和修补漏洞。攻击者利用这些漏洞在目标软件的开发人员知道漏洞之前攻击易受攻击的系统。
- en: '![Exploit Research with Metasploit](img/3589_12_01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![使用Metasploit进行利用研究](img/3589_12_01.jpg)'
- en: Image take from [http://static.itpro.co.uk/sites/itpro/files/styles/gallery_wide/public/security_exploits.jpg](http://static.itpro.co.uk/sites/itpro/files/styles/gallery_wide/public/security_exploits.jpg)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自[http://static.itpro.co.uk/sites/itpro/files/styles/gallery_wide/public/security_exploits.jpg](http://static.itpro.co.uk/sites/itpro/files/styles/gallery_wide/public/security_exploits.jpg)
- en: Exploit writing tips and tricks
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用编写的技巧和窍门
- en: In this chapter we will focus on using Metasploit for exploit development. There
    are a large number of exploits already available in Metasploit, which may be edited
    and used for our purposes during the exploit-development exercise.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于使用Metasploit进行利用开发。Metasploit中已经有大量的利用可用，可以在利用开发练习中进行编辑和使用。
- en: Important points
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重要点
- en: 'There are a few important points that need to be kept in mind while writing
    exploits for the Metasploit Framework:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在为Metasploit框架编写利用时需要记住一些重要的事项：
- en: Transfer most of the work to the Metasploit Framework
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将大部分工作转移到Metasploit框架
- en: Use Rex Protocol libraries
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Rex协议库
- en: Use the available mixins extensively
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 广泛使用可用的混合
- en: Badchars declared must be 100 percent accurate
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明的badchars必须100%准确
- en: Ensure that the payload space is highly reliable
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保有效载荷空间非常可靠
- en: Make use of randomness whenever possible
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽可能利用随机性
- en: Randomize all payloads by using encoders
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用编码器随机化所有有效载荷
- en: When generating padding, use `Rex::Text.rand_text_* (rand_text_alpha, rand_text_alphanumeric,`
    and so on)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在生成填充时，使用`Rex::Text.rand_text_* (rand_text_alpha, rand_text_alphanumeric,`等等)
- en: All Metasploit modules have a consistent structure with hard-tab indents
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有Metasploit模块都具有一致的结构和硬制表缩进
- en: Fancy code is harder to maintain anyway
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 花哨的代码无论如何都更难维护
- en: Mixins provide consistent option names across the Framework
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 混合提供了框架中一致的选项名称
- en: Proofs of concepts should be written as Auxiliary DoS modules and not as exploits
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 概念证明应该被编写为辅助DoS模块，而不是利用。
- en: The final exploit reliability must be high
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最终的利用可靠性必须很高
- en: Format for an exploit
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用的格式
- en: 'The format for an exploit in the Metasploit framework is similar to that of
    an Auxiliary module, but it has more fields. There are a few important things
    that need to be kept in mind while formatting exploits:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit框架中的利用格式与辅助模块的格式类似，但具有更多字段。在格式化利用时需要记住一些重要的事项：
- en: A payload information block is absolutely necessary
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有效载荷信息块是绝对必要的
- en: There should be a listing of the available targets
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该列出可用的目标
- en: The `exploit()` and `check()` functions should be used rather than the `run()`
    function
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该使用`exploit()`和`check()`函数，而不是`run()`函数
- en: 'Now we demonstrate a simple Metasploit exploit to show how it is written:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们演示一个简单的Metasploit利用，以展示它是如何编写的：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We begin our exploit module by including the MSF core package. This is followed
    by a class declaration and function definitions. In our example, we include a
    plain TCP connection, so we use `Msf::Exploit::Remote::Tcp`. Metasploit has handlers
    for HTTP, FTP, and so on, which help in building exploits faster since we do not
    need to write the entire exploit ourselves. We need to define the length and badchars,
    and then define the targets. Target-specific settings also need to be defined,
    such as the return address and the offset. Then we need to connect to the remote
    host and port and build and write the buffer to the connection. Once the exploit
    hits the connection, we handle the exploit and then disconnect.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过包含MSF核心包来开始我们的利用模块。然后是类声明和函数定义。在我们的示例中，我们包含了一个简单的TCP连接，所以我们使用`Msf::Exploit::Remote::Tcp`。Metasploit具有处理HTTP、FTP等的处理程序，这有助于更快地构建利用，因为我们不需要自己编写整个利用。我们需要定义长度和badchars，然后定义目标。还需要定义特定于目标的设置，如返回地址和偏移量。然后我们需要连接到远程主机和端口，并构建和写入缓冲区到连接。一旦利用命中连接，我们处理利用然后断开连接。
- en: 'A typical Metasploit exploit module consists of the following components:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的Metasploit利用模块包括以下组件：
- en: Header and some dependencies
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 头部和一些依赖项
- en: 'The core elements of the exploit module, which are:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用模块的核心元素，包括：
- en: '`require ''msf/core''`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require ''msf/core''`'
- en: '`class definition`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`类定义`'
- en: '`includes`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`includes`'
- en: '`"def" definitions`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"def"定义`'
- en: '`initialize`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initialize`'
- en: '`check (optional)`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`check (可选)`'
- en: '`exploit`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exploit`'
- en: 'Here is a screenshot of our Metasploit exploit:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的Metasploit利用的屏幕截图：
- en: '![Format for an exploit](img/3589_12_02.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![利用的格式](img/3589_12_02.jpg)'
- en: Exploit mixins
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用混合
- en: Mixins are best known for their usefulness in adding functionality to a module.
    Based on Ruby, which is a single-inheritance language, the mixins provide support
    for multiple inheritance. For good exploit development, it is very important to
    understand and efficiently use the mixins since Metasploit makes use of mixins
    to a large degree. Mixins are not specific to a module category though they appear
    under the one that most closely defines them. Hence we can make use of the exploit
    module mixins in Auxiliary modules and vice versa.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 混合物以其在向模块添加功能方面的有用性而闻名。基于Ruby，它是一种单继承语言，混合物为多重继承提供支持。对于良好的利用开发，非常重要的是要理解并有效地使用混合物，因为Metasploit在很大程度上使用混合物。混合物不是特定于模块类别的，尽管它们出现在最接近定义它们的类别下。因此，我们可以在辅助模块中使用利用模块混合物，反之亦然。
- en: The Auxiliary::Report mixin
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Auxiliary::Report混合物
- en: In the Metasploit Framework, we can make use of the `Auxiliary::Report` mixin
    to save the host, service, and vulnerability information into a database. This
    has two inbuilt methods, namely `report_host` and `report_service`, that are used
    to indicate the status of a host and a service (the status indicates whether the
    host/service is working or not). To use this module, we need to include this mixin
    into our classes by using `include Auxiliary::Report`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在Metasploit框架中，我们可以利用`Auxiliary::Report`混合物将主机、服务和漏洞信息保存到数据库中。它有两个内置方法，即`report_host`和`report_service`，用于指示主机和服务的状态（状态指示主机/服务是否正常工作）。要使用此模块，我们需要通过`include
    Auxiliary::Report`将此混合物包含到我们的类中。
- en: Hence we can make use of this mixin for saving any information into the database.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 因此我们可以利用此混合物将任何信息保存到数据库中。
- en: Widely used exploit mixins
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 广泛使用的利用混合物
- en: 'The widely used exploit mixins are explained as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 广泛使用的利用混合物的解释如下：
- en: '`Exploit::Remote::Tcp`: This provides the TCP functionality and methods to
    the module. It aids in setting up a TCP connection using `connect()` and `disconnect()`.
    It creates `self.sock` as the global socket and offers SSL, Proxies, CPORT, and
    CHOST. It uses parameters such as RHOST, RPORT, and ConnectTimeout. It''s code
    file is located at `lib/msf/core/exploit/tcp.rb`.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exploit::Remote::Tcp`：为模块提供TCP功能和方法。它帮助使用`connect()`和`disconnect()`建立TCP连接。它创建`self.sock`作为全局套接字，并提供SSL、代理、CPORT和CHOST。它使用参数如RHOST、RPORT和ConnectTimeout。其代码文件位于`lib/msf/core/exploit/tcp.rb`。'
- en: '`Exploit::Remote::DCERPC`: This mixin provides utility methods for interacting
    with a DCERPC service on a remote machine. These methods are generally useful
    in the context of exploitation. This mixin inherits from the TCP exploit mixin.
    It uses methods such as `dcerpc_handle()`, `dcerpc_bind()`, and `dcerpc_call()`.
    It also supports IPS evasion methods with multicontext BIND requests and fragmented
    DCERPC calls. It''s code file is located at `lib/msf/core/exploit/dcerpc.rb`.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exploit::Remote::DCERPC`：此混合物提供了与远程计算机上的DCERPC服务交互的实用方法。这些方法通常在利用的上下文中非常有用。此混合物继承自TCP利用混合物。它使用方法如`dcerpc_handle()`、`dcerpc_bind()`和`dcerpc_call()`。它还支持使用多上下文BIND请求和分段DCERPC调用的IPS规避方法。其代码文件位于`lib/msf/core/exploit/dcerpc.rb`。'
- en: '`Exploit::Remote::SMB`: This mixin provides utility methods for interacting
    with an SMB/CIFS service on a remote machine. These methods are generally useful
    in the context of exploitation. This mixin extends the TCP exploit mixin. Only
    one SMB service can be accessed at a time using this class. It uses methods such
    as `smb_login()`, `smb_create()`, and `smb_peer_os()`. It also supports options
    like SMBUser, SMBPass, and SMBDomain. It exposes IPS evasion methods such as `SMB::pipe_evasion`,
    `SMB::pad_data_level`, and `SMB::file_data_level`. It''s code file is located
    at `lib/msf/core/exploit/smb.rb`.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exploit::Remote::SMB`：此混合物提供了与远程计算机上的SMB/CIFS服务交互的实用方法。这些方法通常在利用的上下文中非常有用。此混合物扩展了TCP利用混合物。只能使用此类一次访问一个SMB服务。它使用方法如`smb_login()`、`smb_create()`和`smb_peer_os()`。它还支持像SMBUser、SMBPass和SMBDomain这样的选项。它公开IPS规避方法，如`SMB::pipe_evasion`、`SMB::pad_data_level`和`SMB::file_data_level`。其代码文件位于`lib/msf/core/exploit/smb.rb`。'
- en: '`Exploit::Remote::BruteTargets`: This mixin provides brute-force attacks on
    the targets. Basically it overloads the `exploit()` method and calls `exploit_target(target)`
    for each target. It''s code file is located at `lib/msf/core/exploit/brutetargets.rb`.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exploit::Remote::BruteTargets`：此混合物提供对目标的暴力攻击。基本上它重载了`exploit()`方法，并为每个目标调用`exploit_target(target)`。其代码文件位于`lib/msf/core/exploit/brutetargets.rb`。'
- en: '`Exploit::Remote::Brute`: This mixin overloads the exploit method and calls
    `brute_exploit()` for each step. It is best suited for brute-force attacks and
    address range. The address range is a remote brute-force exploit mixin and is
    best suited for brute-force attacks. This provides a target aware brute forcing
    wrapper. It calls the `brute_exploit` method with the supplied address. If this
    is not a brute force target then the `single_exploit` method is called. The code
    file of `Exploit::Remote::Brute` is located at `lib/msf/core/exploit/brute.rb`.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exploit::Remote::Brute`：此混合物重载了exploit方法，并为每个步骤调用`brute_exploit()`。它最适用于暴力攻击和地址范围。地址范围是一个远程暴力攻击混合物，最适用于暴力攻击。它提供了一个目标感知的暴力攻击包装器。它使用提供的地址调用`brute_exploit`方法。如果这不是一个暴力攻击目标，那么将调用`single_exploit`方法。`Exploit::Remote::Brute`的代码文件位于`lib/msf/core/exploit/brute.rb`。'
- en: Editing an exploit module
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑利用模块
- en: A good way to understand how an exploit module is written is to first edit one.
    We edit the module located at `opt/metasploit/msf3/modules/exploits/windows/ftp/ceaserftp_mkd.rb`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 了解编写利用模块的一个好方法是首先编辑一个。我们编辑位于`opt/metasploit/msf3/modules/exploits/windows/ftp/ceaserftp_mkd.rb`的模块。
- en: Note
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Notes by the author are shown after a # sign.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 作者的注释在#符号后显示。
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Working with payloads
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用有效载荷
- en: While working with payloads, we need to select an encoder that does not touch
    certain registers, must be under the maximum size, must avoid badchars, and should
    be selected according to their ranking.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用有效载荷时，我们需要选择一个编码器，它不会触及某些寄存器，必须在最大尺寸以下，必须避开坏字符，并且应根据它们的排名进行选择。
- en: 'Next are the Nops Generators, which should be selected with the most random
    Nop first. Also, they are ranked according to their effectiveness and should be
    selected accordingly. Following is a list of payloads:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是Nops生成器，应该首先选择最随机的Nop。此外，它们根据其有效性进行排名，并应相应选择。以下是有效载荷列表：
- en: '`msfvenom` – It is a combination of both `msfpayload` and `msfencode`. It is
    a single tool that has standardized command-line options and good speed.![Working
    with payloads](img/3589_12_03.jpg)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msfvenom` - 这是`msfpayload`和`msfencode`的组合。它是一个单一的工具，具有标准化的命令行选项和良好的速度。![使用有效载荷](img/3589_12_03.jpg)'
- en: '`msfpayload`: It is a basic command-line instance of Metasploit that is used
    to generate and output all of the shell code that is available in Metasploit.
    It is most commonly used for the generation of the shell code for an exploit that
    is not currently present in the Metasploit Framework. It is even used for working
    with and testing different types of shell code and options while working with
    exploit modules.![Working with payloads](img/3589_12_04.jpg)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msfpayload`：这是Metasploit的基本命令行实例，用于生成和输出Metasploit中所有可用的shell代码。它通常用于生成Metasploit框架中当前不存在的利用的shell代码。它甚至用于在利用模块中使用和测试不同类型的shell代码和选项。![使用有效载荷](img/3589_12_04.jpg)'
- en: '`msfencode`: This is another great payload in Metasploit''s arsenal for exploit
    development. Sometimes it becomes difficult to use shell code generated straight
    out of `msfpayload`; therefore, it has to be encoded.![Working with payloads](img/3589_12_05.jpg)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msfencode`：这是Metasploit的另一个强大的有效载荷，用于利用开发。有时直接使用`msfpayload`生成的shell代码会变得困难，因此必须对其进行编码。![使用有效载荷](img/3589_12_05.jpg)'
- en: Writing exploits
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写利用程序
- en: 'In this part, we are going to write a small exploit for Minishare Version 1.4.1\.
    First create a file on the desktop with any name and save it as a Python extension
    file. For example, we create a file named `minishare.py`. Next, just write the
    exploit code on that file. The code is shown in the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分中，我们将为Minishare Version 1.4.1编写一个小型的利用程序。首先在桌面上创建一个文件，任意命名，并将其保存为Python扩展文件。例如，我们创建一个名为`minishare.py`的文件。接下来，只需在该文件上编写利用代码。代码如下截图所示：
- en: '![Writing exploits](img/3589_12_06.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![编写利用程序](img/3589_12_06.jpg)'
- en: We write the code shown in the screenshot in the `minishare.py` file and save
    it. Now we can run our exploit against our target machine, on which we have already
    installed the Minishare software. Open the terminal and execute the `minishare.py`
    file from the directory where the file is located. So type in `./minishare.py
    <target IP>`; for example, here we are using `./minishare.py 192.168.0.110`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`minishare.py`文件中写入截图中显示的代码，并保存。现在我们可以针对已经安装了Minishare软件的目标机器运行我们的利用程序。打开终端并从文件所在的目录执行`minishare.py`文件。因此，在终端中输入`./minishare.py
    <目标IP>`；例如，这里我们使用`./minishare.py 192.168.0.110`。
- en: '![Writing exploits](img/3589_12_07.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![编写利用程序](img/3589_12_07.jpg)'
- en: 'After executing the exploit, we see that Minishare has crashed, as shown in
    the following screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 执行利用后，我们看到Minishare已经崩溃，如下面的截图所示：
- en: '![Writing exploits](img/3589_12_08.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![编写利用程序](img/3589_12_08.jpg)'
- en: Next, we move on to use a very useful Metasploit utility known as `pattern_create.rb`.
    This is located in the Metasploit's `tools` folder as shown in the following screenshot.
    Using this script will generate a string composed of unique string patterns. Hence
    we can replace our present buffer pattern by creating a random pattern using this
    script.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用一个非常有用的Metasploit实用程序，称为`pattern_create.rb`。这个程序位于Metasploit的`tools`文件夹中，如下面的截图所示。使用这个脚本将生成一个由唯一字符串模式组成的字符串。因此，我们可以通过使用这个脚本创建一个随机模式来替换我们当前的缓冲区模式。
- en: '![Writing exploits](img/3589_12_09.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![编写利用程序](img/3589_12_09.jpg)'
- en: We type in `ruby pattern_create.rb 2000` and then press *Enter*. This creates
    a random string pattern for us, which can be used to cause the buffer overflow
    and figure out the exact memory location for the overflow.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们输入`ruby pattern_create.rb 2000`，然后按*Enter*。这将为我们创建一个随机字符串模式，可以用于引起缓冲区溢出并找出溢出的确切内存位置。
- en: '![Writing exploits](img/3589_12_10.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![编写利用程序](img/3589_12_10.jpg)'
- en: We then replace our original string pattern in the buffer with the random pattern
    just generated. Hence we again have a buffer of random strings that can be used
    to cause the buffer overflow in the Minishare software.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们用刚生成的随机模式替换缓冲区中的原始字符串模式。因此，我们再次有了一系列随机字符串的缓冲区，可以用于在Minishare软件中引起缓冲区溢出。
- en: '![Writing exploits](img/3589_12_11.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![编写利用程序](img/3589_12_11.jpg)'
- en: After creating the buffer, we run the script again, as shown in the following
    screenshot, and wait for the results.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 创建缓冲区后，我们再次运行脚本，如下面的截图所示，并等待结果。
- en: '![Writing exploits](img/3589_12_12.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![编写利用程序](img/3589_12_12.jpg)'
- en: 'What we see on the victim''s machine is that Minishare crashes again due to
    the buffer overflow exploit that runs on it, as shown in the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在受害者的机器上，由于运行在其上的缓冲区溢出利用，Minishare再次崩溃，如下面的截图所示：
- en: '![Writing exploits](img/3589_12_13.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![编写利用程序](img/3589_12_13.jpg)'
- en: Scripting with Metasploit
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit进行脚本编写
- en: Now we move on to some concepts of custom Metasploit scripting using Ruby. Let
    us start off with a very simple program that will print **Hello World** on the
    screen. Demonstrated in the following screenshot is how we write our first simple
    program. We can even simply write down the same program in a text pad and save
    it in the destination folder.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将介绍使用Ruby进行自定义Metasploit脚本的一些概念。让我们从一个非常简单的程序开始，它将在屏幕上打印**Hello World**。在下面的截图中演示了我们如何编写我们的第一个简单程序。我们甚至可以简单地在文本编辑器中写下相同的程序，并将其保存在目标文件夹中。
- en: '![Scripting with Metasploit](img/3589_12_14.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![使用Metasploit进行脚本编写](img/3589_12_14.jpg)'
- en: Since we already have a Meterpreter session, we can simply run our script by
    typing in `run helloworld`. We can see that our program has successfully executed
    and has printed `Hello World` on the screen. So we have successfully built our
    own custom script.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经有了一个Meterpreter会话，我们可以通过输入`run helloworld`来简单地运行我们的脚本。我们可以看到，我们的程序已经成功执行，并在屏幕上打印了`Hello
    World`。因此，我们成功地构建了我们自己的自定义脚本。
- en: '![Scripting with Metasploit](img/3589_12_15.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![Scripting with Metasploit](img/3589_12_15.jpg)'
- en: Earlier, we used a `print_status` command; similarly, we can use `print_error`
    for displaying a standard error and `print_line` for displaying a line of text.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们使用了`print_status`命令；同样，我们可以使用`print_error`来显示标准错误，使用`print_line`来显示一行文本。
- en: '![Scripting with Metasploit](img/3589_12_16.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![Scripting with Metasploit](img/3589_12_16.jpg)'
- en: 'We can see that this has been displayed on the screen as shown in the following
    screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，这已经显示在屏幕上，如下面的截图所示：
- en: '![Scripting with Metasploit](img/3589_12_17.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: 使用Metasploit脚本
- en: Now let us move on to having a more structured look for our program by introducing
    the use of functions, error handling for incorrect input, and extracting some
    important information through the script. In this script, we will use some of
    the API calls to look for basic information about the victim's system, such as
    the operating system, computer name, and privilege level of the script.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续为我们的程序提供更有结构的外观，引入函数的使用，处理不正确的输入，并通过脚本提取一些重要信息。在这个脚本中，我们将使用一些API调用来查找有关受害者系统的基本信息，例如操作系统、计算机名称和脚本的权限级别。
- en: '![Scripting with Metasploit](img/3589_12_18.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![Scripting with Metasploit](img/3589_12_18.jpg)'
- en: Now let us run the script. It successfully gives us all the information we need
    by using the API calls. Hence we are a step ahead with our scripting skills by
    extracting the basic information of the victim's computer. So what we have done
    here is we have declared a function, as we do in any other programming language,
    to maintain the structure of the program and passed a variable named `session`
    to it. This variable is used to call various methods for printing the victim's
    basic computer information. After this, we have a few status messages followed
    by the result of the API calls. We have used `getinfo(client)` at the end to call
    our function.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们运行脚本。它成功地通过使用API调用给了我们所有需要的信息。因此，通过提取受害者计算机的基本信息，我们在脚本技能方面又向前迈进了一步。因此，我们在这里所做的是声明一个函数，就像在任何其他编程语言中一样，以维护程序的结构，并将一个名为`session`的变量传递给它。这个变量用于调用各种方法来打印受害者的基本计算机信息。之后，我们有一些状态消息，然后是API调用的结果。最后，我们使用`getinfo(client)`来调用我们的函数。
- en: '![Scripting with Metasploit](img/3589_12_19.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![Scripting with Metasploit](img/3589_12_19.jpg)'
- en: Next we move on to writing more advanced Meterpreter script and gathering some
    more information from our target victim. This time we have two parameters, named
    `session` and `cmdlist`. First of all, we print a status message followed by setting
    up a response timeout so that the session does not hang. After this, we run a
    loop, which takes in the items in an array one at a time and executes it on the
    system through `cmd.exe /c`. Next, it prints the status that is returned from
    the command execution. We then set up commands for extracting information from
    the victim's system, such as `set`, `ipconfig`, and `arp`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将编写更高级的Meterpreter脚本，并从目标受害者那里收集更多信息。这次我们有两个参数，名为`session`和`cmdlist`。首先，我们打印一个状态消息，然后设置一个响应超时，以防会话挂起。之后，我们运行一个循环，逐个接收数组中的项目，并通过`cmd.exe
    /c`在系统上执行它。接下来，它打印从命令执行返回的状态。然后，我们设置从受害者系统中提取信息的命令，例如`set`、`ipconfig`和`arp`。
- en: '![Scripting with Metasploit](img/3589_12_20.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![Scripting with Metasploit](img/3589_12_20.jpg)'
- en: 'Finally, we run our script in Meterpreter by typing in `run helloworld`; our
    code gets successfully executed on the target system, giving important information,
    which is shown in the following screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过在Meterpreter中键入`run helloworld`来运行我们的脚本；我们的代码成功地在目标系统上执行，提供了重要信息，如下面的截图所示：
- en: '![Scripting with Metasploit](img/3589_12_21.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![Scripting with Metasploit](img/3589_12_21.jpg)'
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we have covered the basics of exploit research with Metasploit.
    Exploitation itself is a very vast topic and a separate study. We covered the
    various payloads in Metasploit and learned how exploits are designed. We also
    covered a series of Metasploit scripting basics for information retrieval in our
    Meterpreter session. In the next chapter we will cover two Metasploit add-on tools,
    Social Engineering Toolkit and Armitage.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了使用Metasploit进行利用研究的基础知识。利用本身是一个非常广泛的主题，需要单独学习。我们介绍了Metasploit中的各种有效载荷，并学习了如何设计利用。我们还介绍了一系列用于在Meterpreter会话中检索信息的Metasploit脚本基础知识。在下一章中，我们将介绍两个Metasploit附加工具，社会工程工具包和Armitage。
- en: References
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: 'The following are some helpful references that shed further light on some of
    the topics covered in this chapter:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些有用的参考资料，可以进一步阐明本章涵盖的一些主题：
- en: '[http://searchsecurity.techtarget.com/definition/zero-day-exploit](http://searchsecurity.techtarget.com/definition/%E2%80%A8zero-day-exploit)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://searchsecurity.techtarget.com/definition/zero-day-exploit](http://searchsecurity.techtarget.com/definition/%E2%80%A8zero-day-exploit)'
- en: '[http://en.wikipedia.org/wiki/Exploit_%28computer_security%29](http://en.wikipedia.org/wiki/Exploit_%28computer_security%29)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://en.wikipedia.org/wiki/Exploit_%28computer_security%29](http://en.wikipedia.org/wiki/Exploit_%28computer_security%29)'
- en: '[https://en.wikipedia.org/wiki/Zero-day_attack](https://en.wikipedia.org/wiki/Zero-day_attack)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Zero-day_attack](https://en.wikipedia.org/wiki/Zero-day_attack)'
- en: '[http://www.offensive-security.com/metasploit-unleashed/Exploit_Design_Goals](http://www.offensive-security.com/metasploit-unleashed/%E2%80%A8Exploit_Design_Goals)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.offensive-security.com/metasploit-unleashed/Exploit_Design_Goals](http://www.offensive-security.com/metasploit-unleashed/%E2%80%A8Exploit_Design_Goals)'
- en: '[http://www.offensive-security.com/metasploit-unleashed/Exploit_Format](http://www.offensive-security.com/metasploit-unleashed/%E2%80%A8Exploit_Format)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.offensive-security.com/metasploit-unleashed/Exploit_Format](http://www.offensive-security.com/metasploit-unleashed/%E2%80%A8Exploit_Format)'
- en: '[http://www.offensive-security.com/metasploit-unleashed/Exploit_Mixins](http://www.offensive-security.com/metasploit-unleashed/%E2%80%A8Exploit_Mixins)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.offensive-security.com/metasploit-unleashed/Exploit_Mixins](http://www.offensive-security.com/metasploit-unleashed/%E2%80%A8Exploit_Mixins)'
- en: '[http://en.wikibooks.org/wiki/Metasploit/UsingMixins](http://en.wikibooks.org/wiki/Metasploit/UsingMixins)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://en.wikibooks.org/wiki/Metasploit/UsingMixins](http://en.wikibooks.org/wiki/Metasploit/UsingMixins)'
- en: '[https://www.corelan.be/index.php/2009/08/12/exploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics/](https://www.corelan.be/index.php/2009/08/12/exploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics/)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.corelan.be/index.php/2009/08/12/exploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics/](https://www.corelan.be/index.php/2009/08/12/exploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics/)'
- en: '[http://www.offensive-security.com/metasploit-unleashed/Msfpayload](http://www.offensive-security.com/metasploit-unleashed/Msfpayload)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.offensive-security.com/metasploit-unleashed/Msfpayload](http://www.offensive-security.com/metasploit-unleashed/Msfpayload)'
- en: '[http://www.offensive-security.com/metasploit-unleashed/Msfvenom](http://www.offensive-security.com/metasploit-unleashed/Msfvenom)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.offensive-security.com/metasploit-unleashed/Msfvenom](http://www.offensive-security.com/metasploit-unleashed/Msfvenom)'
- en: '[https://dev.metasploit.com/api/Msf/Exploit/Remote/DCERPC.html](https://dev.metasploit.com/api/Msf/Exploit/Remote/DCERPC.html)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://dev.metasploit.com/api/Msf/Exploit/Remote/DCERPC.html](https://dev.metasploit.com/api/Msf/Exploit/Remote/DCERPC.html)'
- en: '[https://dev.metasploit.com/api/Msf/Exploit/Remote/SMB.html](https://dev.metasploit.com/api/Msf/Exploit/Remote/SMB.html)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://dev.metasploit.com/api/Msf/Exploit/Remote/SMB.html](https://dev.metasploit.com/api/Msf/Exploit/Remote/SMB.html)'
- en: 'Metasploit exploit payloads: [http://www.offensive-security.com/metasploit-unleashed/Exploit_Payloads](http://www.offensive-security.com/metasploit-unleashed/Exploit_Payloads)'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Metasploit exploit payloads: [http://www.offensive-security.com/metasploit-unleashed/Exploit_Payloads](http://www.offensive-security.com/metasploit-unleashed/Exploit_Payloads)'
- en: 'Writing Windows exploits: [http://en.wikibooks.org/wiki/Metasploit/WritingWindowsExploit](http://en.wikibooks.org/wiki/Metasploit/WritingWindowsExploit)'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Writing Windows exploits: [http://en.wikibooks.org/wiki/Metasploit/WritingWindowsExploit](http://en.wikibooks.org/wiki/Metasploit/WritingWindowsExploit)'
- en: 'Custom scripting with Metasploit: [http://www.offensive-security.com/metasploit-unleashed/Custom_Scripting](http://www.offensive-security.com/metasploit-unleashed/Custom_Scripting)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Custom scripting with Metasploit: [http://www.offensive-security.com/metasploit-unleashed/Custom_Scripting](http://www.offensive-security.com/metasploit-unleashed/Custom_Scripting)'
- en: 'Cesar FTP exploits: [http://www.exploit-db.com/exploits/16713/](http://www.exploit-db.com/exploits/16713/)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Cesar FTP exploits: [http://www.exploit-db.com/exploits/16713/](http://www.exploit-db.com/exploits/16713/)'
- en: Exploit Research using Metasploit [http://www.securitytube.net/video/2706](http://www.securitytube.net/video/2706)
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Exploit Research using Metasploit [http://www.securitytube.net/video/2706](http://www.securitytube.net/video/2706)
