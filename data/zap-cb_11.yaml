- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Advanced Adventures with ZAP
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ZAP 高级探索
- en: Here we are at the final chapter. You’ve learned about the options **Zed Attack
    Proxy** (**ZAP**) offers, from navigating the interface to configurations, from
    crawling web applications, scanning, and reporting to learning about authentication,
    authorization, session management, injection attacks on unvalidated inputs, as
    well as business logic testing, client-side attacks, and some advanced techniques.
    This final chapter will see a change of pace and look at other implementations
    and uses of ZAP. We’ll introduce you to using the OWASP ZAP GUI to start web crawling
    and scanning for vulnerabilities against APIs, but also how to use the API in
    Docker to scan web applications. We’ll also discuss and show you how to build
    ZAP into a Jenkins pipeline to conduct dynamic analysis of web applications, and
    how to install, build and configure the ZAP GUI OAST server for out-of-band vulnerabilities.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是最后一章。你已经了解了 **Zed Attack Proxy**（**ZAP**）提供的各种选项，从浏览界面到配置，从爬取 web 应用、扫描和报告，到了解身份验证、授权、会话管理、未经验证输入的注入攻击，以及业务逻辑测试、客户端攻击和一些高级技术。最后一章将节奏有所变化，探讨
    ZAP 的其他实现和用途。我们将介绍如何使用 OWASP ZAP GUI 开始 web 爬虫并扫描 API 漏洞，同时也会介绍如何使用 Docker 中的
    API 扫描 web 应用。我们还将讨论并演示如何将 ZAP 集成到 Jenkins 流水线中，进行 web 应用的动态分析，并讲解如何安装、构建和配置 ZAP
    GUI OAST 服务器，进行带外漏洞检测。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: How to use the ZAP GUI local API to scan a target
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 ZAP GUI 本地 API 扫描目标
- en: How to use the ZAP API via Docker
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何通过 Docker 使用 ZAP API
- en: Utilizing ZAP DAST tests in a Jenkins CI DevOps pipeline
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Jenkins CI DevOps 流水线中利用 ZAP DAST 测试
- en: Installing, configuring, and running the ZAP GUI OAST server
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装、配置和运行 ZAP GUI OAST 服务器
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, you will need to install numerous tools that will coordinate
    with ZAP to complete the recipes. For the API recipe, you will need to install
    Docker and the command-line script for the OWASP ZAP API. Docker will also be
    needed for the Jenkins pipeline as well as for the standalone BOAST server. In
    addition, we will continue to use the Mozilla Firefox browser and a fork of the
    GitHub Juice-shop application code. Lastly, we’ll test using the command-line
    tool cURL.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你需要安装多个工具，这些工具将与 ZAP 协同工作以完成各项配方。对于 API 配方，你需要安装 Docker 和 OWASP ZAP API
    的命令行脚本。Docker 还将用于 Jenkins 流水线以及独立的 BOAST 服务器。此外，我们将继续使用 Mozilla Firefox 浏览器和
    GitHub Juice-shop 应用代码的分支。最后，我们将使用命令行工具 cURL 进行测试。
- en: How to use the ZAP GUI local API to scan a target
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用 ZAP GUI 本地 API 扫描目标
- en: The ZAP API scan is a script included with the ZAP Docker images. It is optimized
    to scan APIs specified by OpenAPI, SOAP, or GraphQL through a local file or a
    URL. It imports the definition you give and then does an active scan of the URLs
    discovered. The ZAP API makes it possible to incorporate ZAP features into scripts
    and applications. In this recipe, we will walk through downloading the ZAP Docker
    image and then running it to scan against the Juice-Shop URL.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: ZAP API 扫描是 ZAP Docker 镜像中包含的脚本。它经过优化，能够通过本地文件或 URL 扫描由 OpenAPI、SOAP 或 GraphQL
    指定的 API。它会导入你提供的定义，然后对发现的 URL 进行主动扫描。ZAP API 使得将 ZAP 功能集成到脚本和应用程序中成为可能。在这个配方中，我们将演示如何下载
    ZAP Docker 镜像，然后运行它以扫描 Juice-Shop URL。
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Docker will need to be installed as well as the ZAP Docker image. Be sure that
    the ZAP image is able to intercept requests and responses from the server to your
    browser. We will also be using the command line to run the image and kick off
    spidering and scanning. OWASP ZAP Desktop will also be needed:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 需要安装 Docker 以及 ZAP Docker 镜像。确保 ZAP 镜像能够拦截从服务器到浏览器的请求和响应。我们还将使用命令行来运行镜像并启动爬虫和扫描。还需要使用
    OWASP ZAP Desktop：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it…
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: ZAP API-based effective automated analysis can assist in identifying emerging
    flaws. Using the current functional regression test suites and the ZAP Python
    API, OWASP ZAP will assist you in automating security tests to incorporate into
    the **Continuous Integration**/**Continuous Delivery** (**CI**/**CD**) pipeline
    for your application.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 ZAP API 的有效自动化分析可以帮助识别新出现的漏洞。通过使用当前的功能回归测试套件和 ZAP Python API，OWASP ZAP 将帮助你将安全测试自动化，并将其集成到应用程序的**持续集成**/**持续交付**（**CI**/**CD**）流水线中。
- en: Important note
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'The ZAP API scan is a script that is available in the ZAP Docker images. Download
    owasp zap docker here: **docker** **pull owasp/zap2docker-stable**.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: ZAP API 扫描是 ZAP Docker 镜像中可用的脚本。在这里下载 OWASP ZAP Docker：**docker** **pull owasp/zap2docker-stable**。
- en: 'Start OWASP ZAP by running the desktop executable, the **zap.sh** script (on
    Linux/macOS), or the **zap.bat** script (on Windows) from the Terminal:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行桌面可执行文件、**zap.sh**脚本（Linux/macOS）或**zap.bat**脚本（Windows）启动 OWASP ZAP：
- en: '[PRE1]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Important note
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: To run ZAP headless, use the -*daemon* flag. The OWASP ZAP daemon mode is a
    feature that allows the tool to run as a daemon, or background service, on a machine.
    This can be useful if you want to set up continuous scanning of a web application
    or want to remotely control the tool using the OWASP ZAP API.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要以无头模式运行 ZAP，请使用 -*daemon* 标志。OWASP ZAP 守护程序模式是一个功能，允许工具作为守护程序或后台服务在计算机上运行。如果您希望设置对
    Web 应用程序的持续扫描或希望使用 OWASP ZAP API 远程控制工具，则此功能可能会非常有用。
- en: In the OWASP ZAP UI, open **Tools** then **Options** and go to the **API** tab.
    Note the API key, as shown in *Figure 11**.1*, as well as the permitted IP addresses
    for use with the API and a few other options. You have checkboxes to enable the
    API and web UI (**127.0.0.1:PORT**/**UI** or /**json**). In addition, there are
    a few debug options that are only recommended for testing purposes, such as **Disable
    the** **API key**.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 OWASP ZAP UI 中，打开**工具**然后选择**选项**，转到**API**选项卡。注意 API 密钥，如*图 11**.1*所示，以及与
    API 使用允许的 IP 地址和其他选项。您可以勾选以启用 API 和 Web UI（**127.0.0.1:PORT**/**UI**或/**json**）。此外，还有一些仅推荐用于测试目的的调试选项，如**禁用
    API 密钥**。
- en: '![Figure 11.1 – API options](image/Figure_11.1_B18829.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.1 – API 选项](image/Figure_11.1_B18829.jpg)'
- en: Figure 11.1 – API options
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1 – API 选项
- en: To get started, ensure the appropriate plugins are added from the Marketplace.
    OWASP ZAP supports OpenAPI, GraphQL, and SOAP.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始，请确保从 Marketplace 添加适当的插件。OWASP ZAP 支持 OpenAPI、GraphQL 和 SOAP。
- en: 'To start a scan, you can simply use Automated Scan from the **Quick Start**
    menu and scan the endpoint. The only difference is to ensure that the URL has
    the appropriate API scope:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启动扫描，只需从**快速启动**菜单中使用**自动化扫描**并扫描端点。唯一的区别是确保 URL 具有适当的 API 范围：
- en: '[PRE4]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The results will populate in the same **Information** window under the **Alerts**
    tab, as seen in *Figure 11**.2*:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果将显示在同一**信息**窗口下的**警报**选项卡中，如*图 11**.2*所示：
- en: '![Figure 11.2 – The GraphQL Alerts results](image/Figure_11.2_B18829.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.2 – GraphQL 警报结果](image/Figure_11.2_B18829.jpg)'
- en: Figure 11.2 – The GraphQL Alerts results
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2 – GraphQL 警报结果
- en: How it works…
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: You can interact with the ZAP API scanner using a variety of different methods
    to carry out a variety of tasks, such as spidering a web application to learn
    about its contents, looking for application vulnerabilities, or creating reports.
    Making HTTP requests to the ZAP API endpoint, which is made available by the active
    ZAP instance, is the standard procedure for using the ZAP API. Depending on how
    you’ve set up the tool, the endpoint will be at a particular URL.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用多种不同的方法与 ZAP API 扫描程序进行交互，以执行各种任务，例如蜘蛛爬行 Web 应用程序以了解其内容、寻找应用程序漏洞或生成报告。通过向由活动
    ZAP 实例提供的 ZAP API 端点发出 HTTP 请求，这是使用 ZAP API 的标准过程。根据您设置工具的方式，端点将位于特定的 URL 上。
- en: There are several ways to employ the ZAP API scanner. It allows you to scan
    an individual web page, an entire web application, or a collection of connected
    online applications. Additionally, it may be used to automate a number of security-related
    operations, including planning scans, creating reports, and connecting with other
    security solutions.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以使用 ZAP API 扫描程序。它允许您扫描单个网页、整个 Web 应用程序或一组连接的在线应用程序。此外，它还可用于自动执行多种与安全相关的操作，包括计划扫描、生成报告和与其他安全解决方案连接。
- en: How to use the ZAP API via Docker
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何通过 Docker 使用 ZAP API
- en: Using Docker to execute and administer the ZAP application is known as running
    ZAP via Docker.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Docker 执行和管理 ZAP 应用程序称为通过 Docker 运行 ZAP。
- en: If you want to run ZAP in a containerized environment or quickly install and
    operate ZAP on many machines, this can be helpful.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望在容器化环境中运行 ZAP 或快速安装和操作多台机器上的 ZAP，则这可能会有所帮助。
- en: Getting ready
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You must install Docker on your computer and get the ZAP Docker image from Docker
    Hub in order to access the ZAP API via Docker.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须在计算机上安装 Docker，并从 Docker Hub 获取 ZAP Docker 镜像，以便通过 Docker 访问 ZAP API。
- en: The image can then be run as a Docker container, and you can communicate with
    the container while it is running using the ZAP API.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以将镜像作为 Docker 容器运行，并在容器运行时通过 ZAP API 与容器进行通信。
- en: How to do it…
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'The ZAP application will launch inside the container when you run the ZAP Docker
    image. ZAP will then handle any requests sent to the running container using the
    ZAP API. You can interact with ZAP using a variety of different methods provided
    by the ZAP API, such as spidering a web application to learn about its contents,
    looking for application vulnerabilities, or creating reports:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行 ZAP Docker 镜像时，ZAP 应用程序将在容器内启动。然后，ZAP 将处理任何发送到运行中容器的请求，使用 ZAP API。你可以使用
    ZAP API 提供的各种方法与 ZAP 交互，例如爬取一个 Web 应用程序以了解其内容，寻找应用漏洞或生成报告：
- en: In addition to running the API scans via the GUI, you can kick off scans using
    Docker via the command line.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了通过图形用户界面（GUI）运行 API 扫描，你还可以通过命令行使用 Docker 启动扫描。
- en: 'To use API via the Docker command line, open a Terminal session and run Docker
    to pull the image off ZAP:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要通过 Docker 命令行使用 API，打开终端会话并运行 Docker 拉取 ZAP 镜像：
- en: '[PRE6]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, after the image downloads, run Docker again but this time to create a
    container of ZAP that will run the ZAP API, as follows:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在下载完镜像后，再次运行 Docker，但这次是为了创建一个运行 ZAP API 的 ZAP 容器，如下所示：
- en: '[PRE7]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: After a few moments, the command line will showcase the attacks running and
    whether they pass, fail, or come with other warnings, as shown in *Figure 11**.3*.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 过一会儿，命令行会展示正在运行的攻击及其结果，是否通过、失败或有其他警告，如 *图 11.3* 所示。
- en: '![Figure 11.3 – A Docker API scan of Juice-Shop](image/Figure_11.3_B18829.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.3 – Juice-Shop 的 Docker API 扫描](image/Figure_11.3_B18829.jpg)'
- en: Figure 11.3 – A Docker API scan of Juice-Shop
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.3 – Juice-Shop 的 Docker API 扫描
- en: You will see the results at the end as well (see *Figure 11**.4*).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在最后看到结果（见 *图 11.4*）。
- en: '![Figure 11.4 – The Docker API scan results](image/Figure_11.4_B18829.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.4 – Docker API 扫描结果](image/Figure_11.4_B18829.jpg)'
- en: Figure 11.4 – The Docker API scan results
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.4 – Docker API 扫描结果
- en: 'By default, the script does the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，脚本执行以下操作：
- en: Imports the specified API definition
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入指定的 API 定义
- en: Actively scans the API using a specific scan profile tailored for APIs
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用针对 API 特定扫描配置文件的扫描主动扫描 API
- en: Notifies the command line of any problems discovered
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通知命令行任何发现的问题
- en: Important note
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If no bugs are detected, this does not imply that your API is secure. You may
    need to conduct a manual penetration test.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有发现漏洞，并不意味着你的 API 是安全的。你可能需要进行手动渗透测试。
- en: How it works…
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The API provides a set of methods that can be used to perform various actions,
    such as starting and stopping a scan, setting the target for the scan, and retrieving
    the results of the scan.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 该 API 提供了一组方法，可以用来执行各种操作，例如启动和停止扫描、设置扫描目标以及检索扫描结果。
- en: To use the OWASP ZAP API, you will need to make HTTP requests to the API endpoint,
    which is typically hosted on the same machine as the ZAP application. The API
    uses a **Representational State Transfer** (**RESTful**) design, which means that
    you can use standard HTTP methods (such as **GET**, **POST**, **PUT**, and **DELETE**)
    to perform different actions.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 OWASP ZAP API，你需要向 API 端点发送 HTTP 请求，该端点通常与 ZAP 应用程序托管在同一台机器上。该 API 使用 **表现层状态转移**（**RESTful**）设计，这意味着你可以使用标准的
    HTTP 方法（如 **GET**、**POST**、**PUT** 和 **DELETE**）来执行不同的操作。
- en: When you use the OWASP ZAP API to start a scan, the tool will begin to crawl
    the target web application and perform various types of tests to identify vulnerabilities.
    These tests can include looking for SQL injection (SQLI) vulnerabilities, **cross-site
    scripting** (**XSS**) vulnerabilities, and other types of vulnerabilities that
    can be exploited by attackers.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用 OWASP ZAP API 启动扫描时，工具将开始爬取目标 Web 应用程序，并执行各种类型的测试来识别漏洞。这些测试可能包括寻找 SQL 注入（SQLI）漏洞、**跨站脚本**（**XSS**）漏洞以及其他可能被攻击者利用的漏洞。
- en: Once the scan is complete, the OWASP ZAP API will provide a report detailing
    any vulnerabilities that were identified. The report will typically include information
    about the type of vulnerability, the location of the vulnerability within the
    application, and any recommendations for how to fix the vulnerability.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描完成后，OWASP ZAP API 将提供一份报告，详细说明所识别的任何漏洞。报告通常会包括漏洞类型、漏洞在应用程序中的位置以及修复漏洞的建议。
- en: There’s more…
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: In addition to using the OWASP ZAP API through HTTP requests, there are also
    a number of client libraries and language bindings available that make it easier
    to use the API in different programming languages. These libraries provide a set
    of functions and methods that you can use to make API calls and interact with
    the ZAP tool, rather than having to manually construct and send HTTP requests.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 除了通过 HTTP 请求使用 OWASP ZAP API 外，还有许多客户端库和语言绑定可供使用，使得在不同编程语言中使用 API 更加方便。这些库提供了一组函数和方法，可以用来发起
    API 调用并与 ZAP 工具交互，而不需要手动构造和发送 HTTP 请求。
- en: For example, client libraries are available for languages such as Python, Java,
    and C#, allowing you to utilize the OWASP ZAP API in your own programs. Using
    these libraries can make integrating the ZAP tool into your own application or
    process easier, as well as save you time by handling the intricacies of performing
    API calls and analyzing the answers.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，针对 Python、Java 和 C# 等语言，提供了客户端库，允许您在自己的程序中使用 OWASP ZAP API。使用这些库可以更容易地将 ZAP
    工具集成到您的应用程序或流程中，同时通过处理 API 调用和分析响应的复杂性，为您节省时间。
- en: There are also a number of other ways that you can use the OWASP ZAP API, depending
    on your specific needs. For example, you can use the API to automate security
    testing as part of a CI/CD pipeline, or integrate the ZAP tool into a custom security
    tool or platform. You can also use the API to perform scans regularly or in response
    to specific events, such as the deployment of new code to a production environment.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他方法可以根据您的具体需求使用 OWASP ZAP API。例如，您可以将 API 用于自动化安全测试，作为 CI/CD 管道的一部分，或将
    ZAP 工具集成到自定义的安全工具或平台中。您还可以使用 API 定期执行扫描，或响应特定事件，例如将新代码部署到生产环境中。
- en: See also
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'When running the API script, here are some more command options for use with
    the ZAP API:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行 API 脚本时，以下是一些可以与 ZAP API 一起使用的命令选项：
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For more information, visit the following links:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请访问以下链接：
- en: '*OWASP ZAP official documentation: ZAP – API* *Scan*: [https://www.zaproxy.org/docs/docker/api-scan/](https://www.zaproxy.org/docs/docker/api-scan/)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*OWASP ZAP 官方文档：ZAP – API* *扫描*：[https://www.zaproxy.org/docs/docker/api-scan/](https://www.zaproxy.org/docs/docker/api-scan/)'
- en: '*OWASP ZAP official documentation: Options API* *screen*: [https://www.zaproxy.org/docs/desktop/ui/dialogs/options/api/](https://www.zaproxy.org/docs/desktop/ui/dialogs/options/api/)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*OWASP ZAP 官方文档：选项 API* *界面*：[https://www.zaproxy.org/docs/desktop/ui/dialogs/options/api/](https://www.zaproxy.org/docs/desktop/ui/dialogs/options/api/)'
- en: '*OWASP ZAP official documentation: Scanning APIs with* *ZAP*: [https://www.zaproxy.org/blog/2017-06-19-scanning-apis-with-zap/](https://www.zaproxy.org/blog/2017-06-19-scanning-apis-with-zap/)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*OWASP ZAP 官方文档：使用* *ZAP* 扫描 API：[https://www.zaproxy.org/blog/2017-06-19-scanning-apis-with-zap/](https://www.zaproxy.org/blog/2017-06-19-scanning-apis-with-zap/)'
- en: '*OWASP ZAP official documentation: Exploring APIs with* *ZAP*: [https://www.zaproxy.org/blog/2017-04-03-exploring-apis-with-zap/](https://www.zaproxy.org/blog/2017-04-03-exploring-apis-with-zap/)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*OWASP ZAP 官方文档：使用* *ZAP* 探索 API：[https://www.zaproxy.org/blog/2017-04-03-exploring-apis-with-zap/](https://www.zaproxy.org/blog/2017-04-03-exploring-apis-with-zap/)'
- en: '*OWASP ZAP official documentation: Why is an API key required by* *default?*:
    [https://www.zaproxy.org/faq/why-is-an-api-key-required-by-default/](https://www.zaproxy.org/faq/why-is-an-api-key-required-by-default/)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*OWASP ZAP 官方文档：为什么默认需要 API 密钥？*：[https://www.zaproxy.org/faq/why-is-an-api-key-required-by-default/](https://www.zaproxy.org/faq/why-is-an-api-key-required-by-default/)'
- en: '*OWASP ZAP official documentation: How can I connect to ZAP* *remotely?*: [https://www.zaproxy.org/faq/how-can-i-connect-to-zap-remotely/](https://www.zaproxy.org/faq/how-can-i-connect-to-zap-remotely/)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*OWASP ZAP 官方文档：如何远程连接到 ZAP* *？*：[https://www.zaproxy.org/faq/how-can-i-connect-to-zap-remotely/](https://www.zaproxy.org/faq/how-can-i-connect-to-zap-remotely/)'
- en: '*OWASP ZAP official FAQ documentation on how to use the ZAP* *API*: [https://www.zaproxy.org/faq/how-can-you-use-zap-to-scan-apis/](https://www.zaproxy.org/faq/how-can-you-use-zap-to-scan-apis/)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*OWASP ZAP 官方 FAQ 文档：如何使用 ZAP* *API*： [https://www.zaproxy.org/faq/how-can-you-use-zap-to-scan-apis/](https://www.zaproxy.org/faq/how-can-you-use-zap-to-scan-apis/)'
- en: '*A GitHub Action for running the OWASP ZAP API* *scan*: [https://github.com/marketplace/actions/owasp-zap-api-scan](https://github.com/marketplace/actions/owasp-zap-api-scan)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*GitHub Action 用于运行 OWASP ZAP API* *扫描*：[https://github.com/marketplace/actions/owasp-zap-api-scan](https://github.com/marketplace/actions/owasp-zap-api-scan)'
- en: Utilizing ZAP DAST testing with Jenkins
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用 ZAP DAST 测试与 Jenkins
- en: Jenkins is an open source CI/CD technology that aids in the automation of the
    software development process. Jenkins allows developers to seamlessly merge code
    changes and automatically create, test, and deploy applications, making the software
    development process more efficient and dependable. Jenkins is extensively used
    by teams of all sizes to automate their software delivery processes, and it is
    easily customizable to meet the demands of each project. In this context, the
    OWASP ZAP is a **Dynamic Application Security** (**DAST**) vulnerability detection
    tool for web applications. It can be linked to a Jenkins pipeline to automate
    security testing as part of the CI/CD process.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 是一种开源 CI/CD 技术，帮助自动化软件开发过程。Jenkins 允许开发人员无缝合并代码更改，并自动创建、测试和部署应用程序，使软件开发过程更加高效和可靠。Jenkins
    被各种规模的团队广泛使用，以自动化他们的软件交付过程，并且可以轻松定制以满足每个项目的需求。在此背景下，OWASP ZAP 是一种**动态应用程序安全**（**DAST**）漏洞检测工具，用于
    Web 应用程序。它可以与 Jenkins 管道连接，作为 CI/CD 过程的一部分来自动化安全测试。
- en: Getting ready
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: This recipe requires the installation of Jenkins and Docker on an Ubuntu 22.04
    virtual machine. Ensure Juice-Shop is running locally to scan against it.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱要求在 Ubuntu 22.04 虚拟机上安装 Jenkins 和 Docker。确保 Juice-Shop 已在本地运行，以便进行扫描。
- en: Important note
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you are running Jenkins on a local system, you must offer access rights/permissions
    to owners, normal users, and non-users with the **sudo chmod 777 /var/run/docker.sock**
    Terminal command. The script will not operate unless you provide access to owners,
    normal users, and non-users.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在本地系统上运行 Jenkins，必须通过终端命令**sudo chmod 777 /var/run/docker.sock**为所有者、普通用户和非用户提供访问权限。除非您为所有者、普通用户和非用户提供访问权限，否则脚本将无法运行。
- en: Please keep in mind that this script is exclusively for scanning applications
    that are already in **production/sandbox/UAT/SIT** environments.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这个脚本仅用于扫描已经在**生产/沙盒/UAT/SIT**环境中的应用程序。
- en: How to do it…
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'In this recipe, we will walk you through the process of installing OWASP ZAP
    in a Jenkins pipeline and setting up the automation for running scans during new
    code iterations and pushes. In addition, we’ll build ticketing with JIRA into
    the process to complete the DevOps life cycle:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将引导您完成在 Jenkins 管道中安装 OWASP ZAP 并设置自动化扫描的过程，以便在新代码迭代和推送期间运行扫描。此外，我们还将把
    JIRA 的票务系统集成到该过程中，完成 DevOps 生命周期：
- en: 'With Jenkins running and Docker installed, open your browser of choice and
    go to your Jenkins app:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Jenkins 运行并安装 Docker 后，打开您选择的浏览器，访问 Jenkins 应用程序：
- en: '[PRE9]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Important note
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Jenkins boot setup runs by default at **https://localhost:8080/**. Adjust the
    boot configuration by editing the **jenkins.xml** file in your installation location.
    Other boot configuration parameters, such as JVM options, HTTPS configuration,
    and so on, can also be modified in this file.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 启动默认运行在**https://localhost:8080/**。通过编辑安装位置的**jenkins.xml**文件，您可以调整启动配置。其他启动配置参数，例如
    JVM 选项、HTTPS 配置等，也可以在此文件中修改。
- en: 'Log in with the credentials you created when first setting up Jenkins. If you
    have not completed this step, you will need to enter **initialAdminPassword**,
    which is found in the following path:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您在首次设置 Jenkins 时创建的凭据登录。如果您还没有完成这一步，您需要输入**initialAdminPassword**，该密码可以在以下路径中找到：
- en: '[PRE10]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'On the home screen, we’ll create a *new item*, name it **ZAP**, and select
    **Pipeline**, as shown in *Figure 11**.5*:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主页屏幕上，我们将创建一个*新项目*，命名为**ZAP**，并选择**Pipeline**，如*图 11.5*所示：
- en: '![Figure 11.5 – A new Jenkins item](image/Figure_11.5_B18829.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.5 – 新的 Jenkins 项目](image/Figure_11.5_B18829.jpg)'
- en: Figure 11.5 – A new Jenkins item
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.5 – 新的 Jenkins 项目
- en: On the next screen, you’ll have several settings or build triggers, but we’ll
    move past those and go to the **Pipeline** script (see *Figure 11**.6*).
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，您将看到几个设置或构建触发器，但我们将跳过这些，直接进入**管道**脚本（见*图 11.6*）。
- en: '![Figure 11.6 – The Pipeline script](image/Figure_11.6_B18829.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.6 – 管道脚本](image/Figure_11.6_B18829.jpg)'
- en: Figure 11.6 – The Pipeline script
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.6 – 管道脚本
- en: 'We’ll enter the following Groovy script:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将输入以下 Groovy 脚本：
- en: '[PRE13]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Once you click **Save**, you are brought to the **Stage view** screen. This
    is where you have options to see the status, see the changes, build now, configure,
    delete the pipeline, see the full stage view, rename your pipeline, and see the
    pipeline syntax, as shown in *Figure 11**.7*:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**后，您将进入**阶段视图**屏幕。在这里，您可以查看状态、查看更改、立即构建、配置、删除管道、查看完整阶段视图、重命名管道，并查看管道语法，如*图
    11.7*所示：
- en: '![Figure 11.7 – Stage View](image/Figure_11.7_B18829.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.7 – 阶段视图](image/Figure_11.7_B18829.jpg)'
- en: Figure 11.7 – Stage View
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.7 – 阶段视图
- en: To run the script we just entered, click **Build** **with Parameters**.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行我们刚刚输入的脚本，点击**带参数构建**。
- en: 'This will kick off the script and run through the steps we entered. You’ll
    see your new build running in **Build History** as well as the steps running in
    **Stage View**, as shown in *Figure 11**.8*:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将启动脚本并执行我们输入的步骤。你将看到新的构建在**构建历史**中运行，以及步骤在**阶段视图**中运行，如*图 11.8*所示：
- en: '![Figure 11.8 – The new build](image/Figure_11.8_B18829.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.8 – 新构建](image/Figure_11.8_B18829.jpg)'
- en: Figure 11.8 – The new build
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.8 – 新构建
- en: You can also click on the number in **Build History** to go to the build to
    see more details, such as **Console Output**, which shows the pipeline executing,
    the commands, and any errors that may have occurred, as shown in *Figure 11**.9*.
    Errors will be very obvious, indicated by the red **X** symbol in **Console Output**
    or next to the number in **Build History**, or will be red at the stage it occurred
    in **Stage View**.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还可以点击**构建历史**中的编号，进入构建查看更多细节，例如**控制台输出**，它显示管道执行的命令和可能发生的任何错误，如*图 11.9*所示。错误会非常明显，控制台输出中的红色**X**符号或**构建历史**中的编号旁边的红色标记，或者在**阶段视图**中出现红色，表示错误发生的位置。
- en: '![Figure 11.9 – Console Output](image/Figure_11.9_B18829.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.9 – 控制台输出](image/Figure_11.9_B18829.jpg)'
- en: Figure 11.9 – Console Output
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.9 – 控制台输出
- en: Once the scan completes, you can review the results by clicking on the stage
    in **Stage View** and then **Logs**, as shown in *Figure 11**.10*.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扫描完成后，你可以点击**阶段视图**中的阶段，再点击**日志**来查看结果，如*图 11.10*所示。
- en: '![Figure 11.10 – Logs](image/Figure_11.10_B18829.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.10 – 日志](image/Figure_11.10_B18829.jpg)'
- en: Figure 11.10 – Logs
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.10 – 日志
- en: This view will show you the details of the scan, where you can digest all the
    findings and see where in the URL these issues occurred (see *Figure 11**.11*).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 该视图将显示扫描的详细信息，你可以在这里消化所有发现，并查看这些问题发生在哪个 URL 中（参见*图 11.11*）。
- en: '![Figure 11.11 – Stage Logs](image/Figure_11.11_B18829.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.11 – 阶段日志](image/Figure_11.11_B18829.jpg)'
- en: Figure 11.11 – Stage Logs
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.11 – 阶段日志
- en: A successful build and scan require a lot of trial and error with the pipeline
    setup, which necessitates reading pipeline errors or commenting out sections in
    the script.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的构建和扫描需要通过大量试错来调整管道设置，这需要查看管道错误或在脚本中注释掉某些部分。
- en: How it works…
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The Jenkins pipeline is configured to run OWASP ZAP as a step in the build process.
    This can be done using a Jenkins plugin or by calling the OWASP ZAP **command-line
    interface** (**CLI**) directly from a Jenkins script. When the pipeline is executed,
    Jenkins triggers OWASP ZAP to run a security scan against the application being
    tested. OWASP ZAP will attempt to find any vulnerabilities in the application,
    such as SQLI flaws or XSS vulnerabilities.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 管道被配置为在构建过程中运行 OWASP ZAP 作为一个步骤。这可以通过使用 Jenkins 插件或直接从 Jenkins 脚本调用
    OWASP ZAP **命令行界面**（**CLI**）来完成。当管道执行时，Jenkins 会触发 OWASP ZAP 对正在测试的应用程序进行安全扫描。OWASP
    ZAP 将尝试发现应用程序中的任何漏洞，如 SQL 注入（SQLI）缺陷或跨站脚本（XSS）漏洞。
- en: OWASP ZAP then generates a report, detailing any vulnerabilities that were found,
    along with recommendations for how to fix them. This report can be automatically
    sent to the development team for review. If the security scan identifies any critical
    vulnerabilities, the Jenkins pipeline can be configured to fail the build, preventing
    the vulnerable code from being deployed to production.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP ZAP 然后生成报告，详细列出发现的任何漏洞，并提供修复建议。此报告可以自动发送给开发团队进行审查。如果安全扫描识别到任何关键漏洞，Jenkins
    管道可以配置为使构建失败，从而防止脆弱的代码被部署到生产环境。
- en: Overall, integrating OWASP ZAP into a Jenkins pipeline helps automate the process
    of identifying and addressing security vulnerabilities in web applications, making
    the software development process more efficient and secure.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，将 OWASP ZAP 集成到 Jenkins 管道中有助于自动化识别和解决 Web 应用程序安全漏洞的过程，使软件开发过程更加高效和安全。
- en: There’s more…
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: The pipeline script is just an example of a simple way to scan a URL and see
    the results in the pipeline. With some more work with the script, you can generate
    reports and get these copied from the Docker container over to a directory of
    your choice. In addition, this pipeline build we have scripted will also create
    parameters that allow you to switch between the baseline scan and full scan as
    well as enter the URL of choice to be scanned, allowing you to build the pipeline
    quicker on your applications.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 流水线脚本只是一个简单扫描URL并查看流水线结果的示例。通过进一步处理脚本，您可以生成报告，并将这些报告从Docker容器复制到您选择的目录中。此外，我们编写的这个流水线构建还将创建参数，允许您在基线扫描和完整扫描之间切换，并输入要扫描的URL，从而让您更快地构建应用程序的流水线。
- en: Important note
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If, for some reason, your build is not scanning, check to see whether your Docker
    has stopped the container. If it hasn’t, you will need to do so before running
    the build again.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于某种原因，您的构建未进行扫描，请检查您的Docker是否已停止容器。如果没有停止，您需要在再次运行构建之前停止它。
- en: See also
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'For more details, see the following when running Docker scans:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 有关在运行Docker扫描时的更多详细信息，请参见以下内容：
- en: For the baseline scan, see [https://www.zaproxy.org/docs/docker/baseline-scan/](https://www.zaproxy.org/docs/docker/baseline-scan/)
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于基线扫描，请参阅[https://www.zaproxy.org/docs/docker/baseline-scan/](https://www.zaproxy.org/docs/docker/baseline-scan/)
- en: For the full scan, see [https://www.zaproxy.org/docs/docker/full-scan/](https://www.zaproxy.org/docs/docker/full-scan/)
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整扫描，请参阅[https://www.zaproxy.org/docs/docker/full-scan/](https://www.zaproxy.org/docs/docker/full-scan/)
- en: Installing, configuring, and running the ZAP GUI OAST server
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装、配置和运行ZAP GUI OAST服务器
- en: The BOAST server was created to receive and report the results of out-of-band
    application security testing. Some application security tests only result in out-of-band
    responses from the applications being examined. Because of the nature of these
    specific use case scenarios, the requests won’t transmit as a response back to
    the attacker and won’t be seen when a client is hidden behind a third-party NAT.
    A different component is then required in order to properly perceive such responses.
    This component needs the ability to be freely accessed over the internet and communicate
    the received protocols and ports without being constrained by that third-party
    NAT.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: BOAST服务器是为接收和报告带外应用程序安全测试结果而创建的。一些应用程序安全测试只会导致被检查的应用程序产生带外响应。由于这些特定用例场景的性质，请求不会作为响应传回给攻击者，并且在客户端被隐藏在第三方NAT后时也不会被看到。因此，需要另一个组件来正确感知这些响应。该组件需要能够在互联网上自由访问，并且在不受第三方NAT限制的情况下通信接收的协议和端口。
- en: In this recipe, we will walk you through how to install, configure, and test
    applications that require OOB, using the OWASP ZAP BOAST server, and how to install
    your own BOAST server for testing.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将指导您如何安装、配置和测试需要OOB的应用程序，使用OWASP ZAP BOAST服务器，并介绍如何安装您自己的BOAST服务器进行测试。
- en: Getting ready
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'This recipe requires ZAP set up to intercept and send requests and responses
    between the BOAST server and the client application. The following tools will
    need to be installed:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程需要ZAP设置为拦截并发送BOAST服务器和客户端应用程序之间的请求和响应。需要安装以下工具：
- en: 'Docker: [https://www.docker.com/products/docker-desktop/](https://www.docker.com/products/docker-desktop/)'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Docker: [https://www.docker.com/products/docker-desktop/](https://www.docker.com/products/docker-desktop/)'
- en: 'GoLang: [https://go.dev/doc/install](https://go.dev/doc/install)'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'GoLang: [https://go.dev/doc/install](https://go.dev/doc/install)'
- en: How to do it…
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'In this recipe, we’ll be going through different techniques on how to install,
    configure, and run your own BOAST services to conduct out-of-band attacks:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将介绍如何安装、配置和运行您自己的BOAST服务来进行带外攻击的不同技术：
- en: First, in order to use the OAST server, you’ll need to download the add-on from
    ZAP Marketplace (see *Figure 11**.12*).
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，为了使用OAST服务器，您需要从ZAP Marketplace下载附加组件（参见*图 11**.12*）。
- en: '![Figure 11.12 –  ZAP Marketplace](image/Figure_11.12_B18829.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.12 – ZAP Marketplace](image/Figure_11.12_B18829.jpg)'
- en: Figure 11.12 – ZAP Marketplace
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.12 – ZAP Marketplace
- en: Once installed, go to the **Tools** menu, and select **Options**.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，转到**工具**菜单，然后选择**选项**。
- en: Then, either go to **Tools** | **Options…** | **OAST**, click on the gear icon
    in the main toolbar and click **OAST**, or press *Ctrl* + *Alt* + *O* and then
    click **OAST**.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，要么转到**工具** | **选项…** | **OAST**，单击主工具栏中的齿轮图标，然后单击**OAST**，要么按下*Ctrl* + *Alt*
    + *O*，然后单击**OAST**。
- en: To view the **OAST** options, scroll down the tool **Options** menu until you
    see **OAST** (see *Figure 11**.13*).
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看**OAST**选项，请向下滚动工具的**选项**菜单，直到看到**OAST**（参见*图 11.13*）。
- en: '![Figure 11.13 – OWASP OAST options](image/Figure_11.13_B18829.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.13 – OWASP OAST 选项](image/Figure_11.13_B18829.jpg)'
- en: Figure 11.13 – OWASP OAST options
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.13 – OWASP OAST 选项
- en: In the first setting under **General**, there’s a dropdown to select either
    **BOAST** or **Interactsh**, and a checkbox next to **Use** **Permanent Database**.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**常规**下的第一个设置中，有一个下拉菜单可选择**BOAST**或**Interactsh**，并且旁边有一个复选框用于选择**使用** **永久数据库**。
- en: Select **BOAST** from the dropdown and go to the **BOAST** tab in the **OAST**
    options screen. **Permanent Database** is optional.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择**BOAST**，然后进入**OAST**选项屏幕中的**BOAST**标签。**永久数据库**是可选项。
- en: By checking **Use Permanent Database**, you can keep track of registered out-of-band
    payloads in ZAP’s permanent database. According to the predetermined polling period,
    the persisted payloads will be placed into memory and queried with other payloads.
    Currently, only the BOAST service is able to provide a permanent database.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 通过勾选**使用永久数据库**，你可以在 ZAP 的永久数据库中跟踪已注册的带外有效载荷。根据预定的轮询周期，持久化的有效载荷将被放入内存并与其他有效载荷一起查询。目前，只有
    BOAST 服务可以提供永久数据库。
- en: Note that this means that alerts may show up during a ZAP session, even if they
    are not particularly or directly connected to the first analysis or scan.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这意味着即使这些警报与第一次分析或扫描没有直接关系，ZAP 会话期间仍然可能会显示警报。
- en: 'Enter a valid server URI or use the default one. The URI that will be used
    for registration and polling should be pointed at by this address:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一个有效的服务器 URI 或使用默认 URI。用于注册和轮询的 URI 应由此地址指向：
- en: '[https://odiss.eu:1337/events](https://odiss.eu:1337/events)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://odiss.eu:1337/events](https://odiss.eu:1337/events)'
- en: The scheme, the host, the port, and the **/events** endpoint are all required
    components of a valid URI. A functional BOAST instance must be running on the
    host.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 方案、主机、端口和**/events**端点是有效 URI 的必要组成部分。必须在主机上运行一个有效的 BOAST 实例。
- en: Select a polling interval. This is the frequency of polling for the registered
    BOAST servers. Values are taken in seconds. There is no maximum permissible value
    but a minimum of 10 seconds is required. The 60-second setting is the default.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个轮询间隔。这是轮询已注册 BOAST 服务器的频率，单位为秒。没有最大允许值，但需要至少 10 秒。默认设置为 60 秒。
- en: Click on **Register** and a new entry for the payload and canary will be added
    to the **Active Servers** table. Copy this payload to use it in your attacks.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**注册**，新条目将添加到**活动服务器**表中，包括有效载荷和 Canary。复制此有效载荷以在你的攻击中使用。
- en: When a request is made to the appropriate payload address, a random string known
    as the Canary value is returned to the destination web application.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 当请求发送到相应的有效载荷地址时，系统会返回一个被称为 Canary 值的随机字符串，该值会返回到目标 Web 应用程序。
- en: 'Next, to test that the BOAST payload is working, open up a command-line terminal
    and curl the request of the URI given (see *Figure 11**.4*):'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为了测试 BOAST 有效载荷是否工作，打开命令行终端并使用 curl 请求给定的 URI（参见*图 11.4*）：
- en: '[PRE46]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '![Figure 11.14 – A curl request](image/Figure_11.14_B18829.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.14 – 一个 curl 请求](image/Figure_11.14_B18829.jpg)'
- en: Figure 11.14 – A curl request
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.14 – 一个 curl 请求
- en: 'ZAP will now poll this server at the frequency you set and report all interactions
    (DNS, HTTP, etc.) To view the payload URI, open the **OAST** tab in the informational
    window, as shown in *Figure 11**.5*:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ZAP 现在将按照你设置的频率轮询该服务器，并报告所有交互（DNS、HTTP 等）。要查看有效载荷 URI，请打开信息窗口中的**OAST**标签，如*图
    11.5*所示：
- en: '![Figure 11.15 – BOAST](image/Figure_11.15_B18829.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.15 – BOAST](image/Figure_11.15_B18829.jpg)'
- en: Figure 11.15 – BOAST
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.15 – BOAST
- en: We can also send some other data via curl to see what is captured in our OAST
    polling.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过 curl 发送其他数据，以查看在 OAST 轮询中捕获了什么。
- en: 'Here is an example of a curl request that sends a **POST** request with a simple
    header and no data:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里是一个发送**POST**请求的 curl 请求示例，包含一个简单的头部且没有数据：
- en: '[PRE47]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The **-X** flag specifies the HTTP method to use – in this case, **POST**.
    The **-H** flag is used to set a custom header – in this case, the **Content-Type**
    header is set to **application/json** to indicate that the request body contains
    JSON data. You can also use **--data** or **-d flag** to include a request body
    in the **POST** request, for example:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '**-X** 标志指定要使用的 HTTP 方法——在本例中为**POST**。**-H** 标志用于设置自定义头部——在本例中，**Content-Type**
    头部设置为**application/json**，以表明请求体包含 JSON 数据。你还可以使用**--data**或**-d 标志**来包含请求体，例如：'
- en: '[PRE48]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'This sends a **POST** request with a JSON-encoded request body containing the
    **{"key": "value"}** data, as shown in *Figure 11**.6*:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '这发送了一个带有JSON编码请求体的**POST**请求，其中包含**{"key": "value"}**数据，如*图 11.6*所示：'
- en: '![Figure 11.16 – An example curl request with a secret](image/Figure_11.16_B18829.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.16 – 一个带有秘密的 curl 请求示例](image/Figure_11.16_B18829.jpg)'
- en: Figure 11.16 – An example curl request with a secret
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.16 – 一个带有秘密的 curl 请求示例
- en: How it works…
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: An out-of-band attack occurs when an attacker utilizes a different communication
    route than the one the victim is using. This makes it simpler for the attacker
    to access sensitive data or systems, since it enables them to get over any security
    measures that might be in place on the main communication route.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 跨信道攻击发生在攻击者使用与受害者不同的通信路径时。这使得攻击者能够更容易地访问敏感数据或系统，因为它可以帮助他们绕过主通信路径上的任何安全措施。
- en: There are several techniques to conduct out-of-band exploits. An attacker may,
    for instance, send a target a phishing email that tempts them to click on a link
    that installs malware on their machine. The virus might then be used to access
    the victim’s machine, giving the attacker access to take advantage of it to disrupt
    operations or steal important data.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种技术可以进行跨信道利用。例如，攻击者可能会向目标发送钓鱼邮件，诱使其点击一个链接，从而在受害者的计算机上安装恶意软件。病毒随后可能被用来访问受害者的计算机，使得攻击者能够利用它来破坏操作或窃取重要数据。
- en: Another technique would be for an attacker to utilize a different communication
    channel to manage malware that has already been placed on a victim’s machine.
    For instance, the attacker may order the virus to do a certain action, such as
    deleting files or encrypting data for ransom, through a different channel, such
    as a phone call or text message.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种技术是攻击者使用不同的通信渠道来控制已经植入受害者计算机中的恶意软件。例如，攻击者可能通过其他渠道，如电话或短信，指示病毒执行某个操作，例如删除文件或加密数据勒索。
- en: In general, because out-of-band attacks employ a different communication route
    than the one that is being defended, they can be challenging to identify and stop.
    People and organizations should be aware of the dangers presented by these assaults
    and take precautions to protect themselves. This can entail creating secure passwords,
    setting up security software, keeping it updated, and exercising caution when
    opening links or downloading things from untrusted sources.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 一般而言，由于跨信道攻击使用了与防御通信路径不同的通信方式，因此它们可能很难被识别和阻止。个人和组织应当意识到这些攻击带来的危险，并采取预防措施来保护自己。这可能包括设置安全密码、安装安全软件并保持更新，以及在打开链接或下载不可信来源的文件时保持谨慎。
- en: There’s more…
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: These types of flaws are extremely delicate and important to secure for a company,
    since malicious actors can take advantage of them. They are primarily seen in
    REST APIs and web applications.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型的漏洞极其微妙且对公司来说至关重要，因为恶意行为者可以利用它们。它们主要出现在REST API和Web应用程序中。
- en: 'Here are a few examples of OOB attacks:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些跨信道攻击的示例：
- en: '**Blind server-side XML/SOAP injection**: Similar to SQLI, an attacker sends
    XML or SOAP requests to a server with the intent of manipulating the server’s
    behavior, potentially reading or modifying data, executing arbitrary code, or
    launching other attacks, and the attack is “blind” because the attacker receives
    no immediate feedback about the success of the attack.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**盲服务器端XML/SOAP注入**：类似于SQL注入，攻击者向服务器发送XML或SOAP请求，意图操控服务器的行为，可能读取或修改数据、执行任意代码或发起其他攻击，且此攻击为“盲”攻击，因为攻击者无法立即获得攻击是否成功的反馈。'
- en: '**Blind XSS (delayed XSS)**: A covert and difficult-to-detect assault that
    allows an attacker to inject malicious code into a website and wait for someone
    else to initiate the attack by visiting the compromised web page, possibly stealing
    personal information or seizing control of the victim’s browser.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**盲XSS（延迟XSS）**：一种隐蔽且难以检测的攻击方式，攻击者通过将恶意代码注入到网站中，等待其他人通过访问被攻击的网页来触发攻击，可能会窃取个人信息或控制受害者的浏览器。'
- en: '**Host header attack**: Manipulation of the host header in an HTTP request
    to deceive a web server into running malicious code or providing sensitive information,
    potentially allowing the attacker to take control of the server or reveal sensitive
    information.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主机头攻击**：操控HTTP请求中的主机头，欺骗Web服务器运行恶意代码或提供敏感信息，可能允许攻击者控制服务器或暴露敏感信息。'
- en: '**Out-of-Band Remote Code Execution (OOB RCE)**: An attack that lets an attacker
    run arbitrary code on a target system by delivering the code and receiving the
    results over a separate communication channel, possibly revealing sensitive information
    or allowing the attacker to seize control of the system.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**带外远程代码执行（OOB RCE）**：一种攻击方式，攻击者通过在单独的通信渠道上传递代码并接收结果，在目标系统上运行任意代码，可能泄露敏感信息或使攻击者控制系统。'
- en: '**Out-of-Band SQL Injection (OOB SQLI)**: An SQLI attack in which an attacker
    executes arbitrary SQL instructions on a target database by leveraging a separate
    communication channel to send the commands and receive the results, possibly exposing
    sensitive information or allowing the attacker to gain control of the database.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**带外 SQL 注入（OOB SQLI）**：一种 SQL 注入攻击，攻击者利用单独的通信渠道发送命令并接收结果，在目标数据库上执行任意 SQL 指令，可能暴露敏感信息或允许攻击者控制数据库。'
- en: '**Email header injection**: Injecting harmful code into the headers of an email
    message in order to manipulate the behavior of the email client or server, perhaps
    misleading the victim into submitting sensitive information or downloading malware.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电子邮件头注入**：将恶意代码注入电子邮件消息的头部，以操控电子邮件客户端或服务器的行为，可能误导受害者提交敏感信息或下载恶意软件。'
- en: '**Server-Side Request Forgery (SSRF)**: An attack in which an attacker sends
    arbitrary requests from a susceptible server to other servers, resources, or services
    on the network, possibly revealing sensitive information or allowing the attacker
    to launch more attacks.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器端请求伪造（SSRF）**：一种攻击方式，攻击者通过易受攻击的服务器向网络中的其他服务器、资源或服务发送任意请求，可能泄露敏感信息或让攻击者发起更多攻击。'
- en: '**XML External Entity (XXE) injection**: An attack that uses an XML parser
    vulnerability to access files or execute arbitrary code on a target system, possibly
    revealing sensitive information or allowing the attacker to take control of the
    machine.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XML 外部实体（XXE）注入**：一种利用 XML 解析器漏洞访问文件或在目标系统上执行任意代码的攻击，可能暴露敏感信息或允许攻击者控制机器。'
- en: '**OS code injection – OOB**: An attack that enables an attacker to execute
    arbitrary system instructions on a target system by injecting the commands into
    a susceptible application, possibly exposing sensitive information or granting
    the attacker control of the system.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作系统代码注入 – OOB**：一种攻击方式，攻击者通过将命令注入到易受攻击的应用程序中，在目标系统上执行任意系统指令，可能暴露敏感信息或让攻击者控制系统。'
- en: '**XXE – OOB**: A version of the XXE attack in which the results of the XXE
    assault are sent OOB over a different communication route than the one being abused,
    possibly allowing the attacker to obtain sensitive information or take control
    of the system without being detected.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XXE – OOB**：XXE 攻击的一种版本，其中 XXE 攻击的结果通过不同的通信路径带外发送，而非被滥用的路径，可能让攻击者在不被检测到的情况下获取敏感信息或控制系统。'
- en: Important note
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: A new Extender script template called **OAST Request Handler.js** is introduced
    to ZAP if the *Script Console* and *GraalVM JavaScript* add-ons are both installed.
    This template can be used to develop a script that executes a command whenever
    an OOB request is found. This action might be anything, such as running another
    ZAP script or sending yourself an email.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如果安装了 *Script Console* 和 *GraalVM JavaScript* 插件，ZAP 引入了一个新的扩展脚本模板，名为 **OAST
    Request Handler.js**。该模板可以用来开发一个脚本，检测到带外请求时执行某个命令。这个动作可以是任何内容，例如运行另一个 ZAP 脚本或发送电子邮件给自己。
- en: See also
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: 'There are a few other online services that allow us to interact with OOB attacks,
    such as the following:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他在线服务允许我们与带外攻击进行交互，例如：
- en: 'Free web GUI Interactsh: [https://app.interactsh.com/#/](https://app.interactsh.com/#/)'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '免费的 Web GUI Interactsh: [https://app.interactsh.com/#/](https://app.interactsh.com/#/)'
- en: For ZAP extensions, see [https://github.com/zaproxy/zap-extensions](https://github.com/zaproxy/zap-extensions)
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 ZAP 扩展，请参阅 [https://github.com/zaproxy/zap-extensions](https://github.com/zaproxy/zap-extensions)
