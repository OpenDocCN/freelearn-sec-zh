- en: Chapter 6. Introduction to the Nmap Scripting Engine
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。介绍Nmap脚本引擎
- en: 'Although being able to conduct port scans is an integral part of using the
    Nmap suite of tools, the developers of Nmap created a very powerful engine that''s
    built into the tool: the **Nmap Scripting Engine** (**NSE**). This chapter introduces
    the NSE, and covers all the topics needed to use reliably-written scripts in the
    Nmap script repository, in order to conduct reconnaissance scans that include
    much more than just what ports are open and which services are listening.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管进行端口扫描是使用Nmap工具套件的一个重要部分，但Nmap的开发者创建了一个非常强大的引擎，内置在工具中：**Nmap脚本引擎**（**NSE**）。本章介绍了NSE，并涵盖了使用可靠编写的脚本在Nmap脚本存储库中进行侦察扫描所需的所有主题，以包括远不止开放了哪些端口和哪些服务正在监听。
- en: 'In this chapter, we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将涵盖：
- en: The history of the NSE
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NSE的历史
- en: How the NSE works
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NSE的工作原理
- en: How to find existing scripts to use
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何找到现有的脚本来使用
- en: How to run scripts using the NSE
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用NSE运行脚本
- en: The history of the NSE
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NSE的历史
- en: By the mid-2000s, Nmap had established itself as the clear leader in port scanning
    tools—and security tools in general—whether open source or not. Although it's
    a constant battle to continually innovate and optimize, Nmap can only be considered
    as an extremely successful project.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到了21世纪中期，Nmap已经确立自己作为端口扫描工具和安全工具的领导者，无论是开源还是非开源的。尽管不断创新和优化是一场持续不断的战斗，但Nmap只能被认为是一个非常成功的项目。
- en: Due to its popularity, and the fact that it's an open source project with a
    relatively high profile, Nmap was selected to participate in Google Summer of
    Code several times. Google Summer of Code is a software development internship/association
    project, during which students are selected and put on open source software teams
    to build new features into existing projects.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其受欢迎程度，以及它是一个具有相对高知名度的开源项目，Nmap被选中多次参加Google Summer of Code。Google Summer
    of Code是一个软件开发实习/协会项目，期间学生们被选中并加入开源软件团队，为现有项目构建新功能。
- en: 'In May 2006—when the currently released version of Nmap was only 4.0—Nmap was
    selected for its second Summer of Code season. The previous year, in 2005, several
    improvements had been made through the students'' coding for the Nmap project:
    the students had written a contemporary implementation of Netcat (called Ncat),
    upgraded the OS detection for Nmap to its second (and much better) generation,
    and created a small, simplified GUI that would later become Zenmap.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 2006年5月，当时发布的Nmap版本只有4.0时，Nmap被选为其第二个夏季代码。在2005年的前一年，学生们为Nmap项目编写了一种当代的Netcat实现（称为Ncat），将Nmap的OS检测升级到了第二代（更好的一代），并创建了一个小型、简化的GUI，后来成为Zenmap。
- en: 'For this second run through, after an extremely successful first summer, the
    participant developers were even more ambitious. Since Nmap clearly had an excellent
    set of features, why not make those features extendable by the greater community?
    New vulnerabilities and scanning techniques were being pioneered on a very frequent
    basis, and full Nmap releases couldn''t keep up with the things that security
    professionals needed to assess. Every time a new vulnerability came out, security
    professionals (and malicious hackers!) would scan for vulnerable services with
    Nmap, but could only test whether software versions were vulnerable by using manual
    analysis: clearly, not a very efficient use of time.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二次运行中，经过第一个夏季的极其成功之后，参与开发的开发者们变得更加雄心勃勃。由于Nmap显然拥有出色的功能集，为什么不让这些功能可以被更广泛的社区扩展呢？新的漏洞和扫描技术正在被频繁地开发，而完整的Nmap版本无法跟上安全专业人员需要评估的事物。每当出现新的漏洞时，安全专业人员（以及恶意黑客！）会使用Nmap扫描易受攻击的服务，但只能通过手动分析来测试软件版本是否易受攻击：显然，这不是一个非常有效的时间利用。
- en: Because of the new resources granted by Google Summer of Code developers, an
    arbitrary scripting framework was created that allows users to trigger additional
    checks based on certain open ports or services. This means, for example, that
    if you're looking for a specific file on all web servers—`robots.txt`, for example—you
    can easily create a script that can check for it on all HTTP and HTTPS services.
    The NSE (and the inclusion of Nmap scripts in default installations of Nmap) truly
    revolutionized the versatility of the tool suite.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Google Summer of Code开发者提供的新资源，创建了一个任意的脚本框架，允许用户基于特定的开放端口或服务触发额外的检查。这意味着，例如，如果你想在所有Web服务器上查找特定文件，比如`robots.txt`，你可以轻松地创建一个脚本，在所有HTTP和HTTPS服务上进行检查。NSE（以及在Nmap的默认安装中包含Nmap脚本）真正改变了工具套件的多功能性。
- en: After months of hard work, the NSE was released in December 2006, packaged with
    Nmap release 4.21ALPHA1\. The scripts that come packaged with the NSE have continued
    to grow in complexity and usability, and are excellent resources to turn Nmap
    into a fully-featured security tool suite.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 经过数月的辛勤工作，NSE于2006年12月发布，与Nmap 4.21ALPHA1版本一起打包发布。随着NSE打包的脚本在复杂性和可用性上不断增长，它们成为了将Nmap转变为一个功能齐全的安全工具套件的绝佳资源。
- en: The inner working of the NSE
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NSE的内部工作
- en: The NSE is a framework that runs code written in the programming language Lua
    with specific flags that the engine can parse. Lua is a lightweight, fast, and
    interpreted programming language—one that has the most fame for scripting user
    interfaces for computer games such as *World of Warcraft*—that has a similar syntax
    to other contemporary interpreted languages.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: NSE是一个运行使用Lua编写的代码的框架，具有引擎可以解析的特定标志。Lua是一种轻量级、快速、解释性的编程语言，最著名的用途是为《魔兽世界》等电脑游戏编写用户界面的脚本语言，它具有与其他当代解释性语言类似的语法。
- en: If you've ever seen code written in Python or Ruby, Lua won't seem too alien
    to you.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经见过用Python或Ruby编写的代码，Lua对你来说就不会太陌生。
- en: '![The inner working of the NSE](img/4065OS_06_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![NSE的内部工作](img/4065OS_06_01.jpg)'
- en: The preceding screenshot shows an Nmap script that identifies information about
    Bitcoins (written by Patrik Karlsson). Don't worry if you don't understand it
    yet—that's something we will cover in [Chapter 7](ch07.html "Chapter 7. Writing
    Nmap Scripts"), *Writing Nmap Scripts*—but you can see that the code used to generate
    a relatively complex Nmap script looks very simple. This is the whole point of
    the NSE! Where security engineers and system administrators used to have to export
    Nmap results, find the information they are looking for and then use third-party
    tools to assist them; they are now able to either find a script that serves their
    purposes, or write a simple one themselves. Many penetration testers can leverage
    the Nmap scripting language to even weaponize the tool for security exploits—which
    we will cover in more detail in [Chapter 10](ch10.html "Chapter 10. Penetration
    Testing with Metasploit"), *Penetration Testing with Metasploit*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了一个Nmap脚本，用于识别有关比特币的信息（由Patrik Karlsson编写）。如果你还不理解，不要担心，我们将在第7章《编写Nmap脚本》中进行讲解，但你可以看到用于生成相对复杂的Nmap脚本的代码看起来非常简单。这就是NSE的全部意义所在！安全工程师和系统管理员过去需要导出Nmap结果，查找他们正在寻找的信息，然后使用第三方工具来帮助他们；现在他们可以找到一个符合他们目的的脚本，或者自己编写一个简单的脚本。许多渗透测试人员可以利用Nmap脚本语言甚至将该工具武装化以进行安全漏洞利用，我们将在第10章《使用Metasploit进行渗透测试》中详细介绍。
- en: Finding Nmap scripts
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找Nmap脚本
- en: Many Nmap scripts come with Nmap, and are already prepackaged on your system.
    Still, though, it can be difficult to determine which scripts you'd like to run
    for each particular scan—or assessment—that you may be on. Fortunately, the NSE
    documentation portal is one of the most in-depth and well-documented aspects of
    the entire Nmap project.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 许多Nmap脚本已经随Nmap一起打包在您的系统上。然而，确定您想要为每个特定的扫描或评估运行哪些脚本可能会很困难。幸运的是，NSE文档门户是整个Nmap项目中最深入和文档最完备的方面之一。
- en: Note
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: By going to [http://nmap.org/nsedoc/](http://nmap.org/nsedoc/), you can see
    all of the scripts that are part of the official Nmap script repository.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过访问[http://nmap.org/nsedoc/](http://nmap.org/nsedoc/)，您可以查看所有包含在官方Nmap脚本存储库中的脚本。
- en: '![Finding Nmap scripts](img/4065OS_06_02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![查找Nmap脚本](img/4065OS_06_02.jpg)'
- en: The preceding screenshot shows the **Nmap Scripting Engine Documentation** (**NSEDoc**)
    reference portal web page, as well as all the official Nmap scripts at the time
    of writing this book. Each script has a small paragraph next to its name, which
    gives a brief description of what it is designed to do. At the time of writing,
    there are 490 and 113 Nmap scripts that are part of the official documentation—that's
    quite a lot you can do with the NSE!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了**Nmap脚本引擎文档**（**NSEDoc**）参考门户网页，以及撰写本书时的所有官方Nmap脚本。每个脚本旁边都有一个小段落，简要描述了它的设计目的。撰写本书时，官方文档中有490个和113个Nmap脚本，这是您可以使用NSE做的很多事情！
- en: 'These scripts are broken down into several categories, each with their own
    specific use case. It''s worth noting that sometimes these scripts can be in several
    categories, depending on the full functionality of the script. The categories
    and their definitions are as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这些脚本分为几个类别，每个类别都有自己特定的用例。值得注意的是，有时这些脚本可以属于几个类别，具体取决于脚本的完整功能。这些类别及其定义如下：
- en: '**Auth**: These scripts attempt to authenticate to services, and can verify
    found credentials'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**认证**：这些脚本尝试对服务进行身份验证，并可以验证找到的凭据'
- en: '**Broadcast**: These scripts broadcast certain protocols in order to find out
    whether or not they are listening'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**广播**：这些脚本广播某些协议，以了解它们是否正在监听'
- en: '**Brute**: These scripts attempt brute force or dictionary-based attacks against
    network services'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**暴力**：这些脚本尝试对网络服务进行暴力或基于字典的攻击'
- en: '**Default**: This is the default category of scripts that may run when a scan
    is initiated'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**默认**：这是扫描启动时可能运行的脚本的默认类别'
- en: '**Discovery**: These scripts attempt to enumerate sensitive information from
    hosts and network services'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发现**：这些脚本尝试从主机和网络服务中枚举敏感信息'
- en: '**Denial of Service (DoS)**: These scripts may cause disruption to the service
    that is being scanned'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拒绝服务（DoS）**：这些脚本可能会对正在扫描的服务造成破坏'
- en: '**Exploit**: These scripts attempt to execute an exploit that exploits a given
    vulnerability'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用**：这些脚本尝试执行利用给定漏洞的攻击'
- en: '**External**: These scripts query third-party databases, such as DNS blacklists,
    to gather additional information about targets'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外部**：这些脚本查询第三方数据库，如DNS黑名单，以收集有关目标的额外信息'
- en: '**Fuzzer**: These scripts send random "garbage" information to services in
    order to attempt to find flaws in the software'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模糊器**：这些脚本向服务发送随机的“垃圾”信息，以尝试找到软件中的缺陷'
- en: '**Intrusive**: These scripts are an umbrella category for any script that may
    cause damage or be intrusive to the service itself'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**侵入式**：这些脚本是可能对服务本身造成损害或具有侵入性的脚本的总类别'
- en: '**Malware**: These scripts attempt to find instances of the known malware.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**恶意软件**：这些脚本尝试查找已知恶意软件的实例'
- en: '**Safe**: These scripts are verified to not cause harm to servers'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全**：这些脚本已经验证不会对服务器造成伤害'
- en: '**Version**: These scripts attempt to identify specific versions—as well as
    information disclosures—from specific services in a more in-depth way than normal
    service version detection'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本**：这些脚本尝试以比普通服务版本检测更深入的方式识别特定版本以及信息泄露的特定服务'
- en: '**Vuln**: These scripts identify the known vulnerabilities in services'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**漏洞**：这些脚本识别服务中已知的漏洞'
- en: It's important to know which categories you want to run, since several of these
    categories—specifically DoS, exploit, and intrusive—can be dangerous to run against
    weak or production systems. The inclusion of these Nmap scripts in security assessments
    can easily increase the utility of Nmap in a very significant way.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要知道要运行哪些类别，因为其中几个类别（特别是 DoS、exploit 和 intrusive）可能对弱系统或生产系统造成危险。在安全评估中包含这些
    Nmap 脚本可以极大地增加 Nmap 的效用。
- en: Running Nmap scripts
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行 Nmap 脚本
- en: Running Nmap scripts is easy—and some, the "default" category, will even run
    on their own as a part of a normal scan. Some scripts are designed to simply give
    additional information about a target, while others will go so far as to actively
    exploit it (the "exploit" category) or even take it offline (the "DoS" category).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 Nmap 脚本很容易——有些脚本，例如“默认”类别，甚至会作为正常扫描的一部分自行运行。有些脚本旨在简单地提供有关目标的附加信息，而其他脚本则会积极利用它（“exploit”类别）甚至使其脱机（“DoS”类别）。
- en: The first step to run an Nmap script that's part of the actually NSEDoc repository
    is to verify that the script is stored locally. Unlike the Nmap tool itself, the
    Nmap script repository is frequently updated—so it's in your best interest to
    always verify that you have the most updated version. You can update the NSE scripts
    by running Nmap with the flag `--script-updatedb`, which updates the script database.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 Nmap 脚本的第一步是验证脚本是否存储在本地。与 Nmap 工具本身不同，Nmap 脚本存储库经常更新，因此最好始终验证是否有最新版本。您可以通过运行带有
    `--script-updatedb` 标志的 Nmap 来更新 NSE 脚本，该标志会更新脚本数据库。
- en: '![Running Nmap scripts](img/4065OS_06_03.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![运行 Nmap 脚本](img/4065OS_06_03.jpg)'
- en: 'Once the script database is updated, you can select scripts by using the `--script`
    tag. You can either select specific scripts for a given purpose, or you can select
    broad categories of scripts. Fortunately, the Nmap developers allow categories
    of scripts to be selected at once. For example, let''s say that we wanted to run
    all scripts that are default, but also all scripts that are intrusive; we can
    run a scan using the `--script default` or `intrusive` flag:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 更新脚本数据库后，可以使用 `--script` 标签选择脚本。您可以选择特定目的的特定脚本，也可以选择广泛的脚本类别。幸运的是，Nmap 开发人员允许一次选择多个脚本类别。例如，假设我们想运行所有默认脚本，但也想运行所有侵入性脚本；我们可以使用
    `--script default` 或 `intrusive` 标志运行扫描：
- en: '![Running Nmap scripts](img/4065OS_06_04.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![运行 Nmap 脚本](img/4065OS_06_04.jpg)'
- en: You can see in the preceding screenshot that running `default` scripts here
    clearly flagged several findings immediately. If you were to run the same scan
    with `-vv` to have double-verbose mode enabled on the scan, you would also be
    able to see the number of scripts loaded against the given target (in this case,
    93). In this particular instance, the `http-title` script showed the HTML title
    (`Go ahead and ScanMe!`) in the scan results itself.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在上述截图中看到，在此处运行 `default` 脚本明显立即标记了几个发现。如果您使用 `-vv` 运行相同的扫描以启用双重详细模式，您还可以看到加载到给定目标的脚本数量（在本例中为
    93）。在这种特定情况下，`http-title` 脚本在扫描结果中显示了 HTML 标题（`Go ahead and ScanMe!`）。
- en: 'If selecting scans by category or categories is too much, you can also select
    scans by their specific name, or use wildcards. For example, if I wanted to scan
    a web server and load all the HTTP modules in the default scan repository, I would
    scan with the `--script "http-*"` flag:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果按类别或多个类别选择扫描太多，您还可以按其特定名称选择扫描，或使用通配符。例如，如果我想扫描 Web 服务器并加载默认扫描存储库中的所有 HTTP
    模块，我将使用 `--script "http-*"` 标志进行扫描：
- en: '![Running Nmap scripts](img/4065OS_06_05.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![运行 Nmap 脚本](img/4065OS_06_05.jpg)'
- en: You can see that launching a scan with the `"http-*"` wildcard script name works
    in loading every script, but there are a few errors coming up. Certain scripts
    take parameters, so if loading many scripts, it's important to understand which
    ones are being loaded. The scripts that could accurately fire at HTTP ports will
    still launch, but those that require additional information would fail (and not
    return any useful information). To provide additional information to Nmap scripts,
    you can provide arguments with the `--script-args` flag.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，使用 `"http-*"` 通配符脚本名称启动扫描可以加载每个脚本，但会出现一些错误。某些脚本需要参数，因此如果加载了许多脚本，了解正在加载的脚本非常重要。可以准确在
    HTTP 端口触发的脚本仍将启动，但需要额外信息的脚本将失败（并且不会返回任何有用信息）。要向 Nmap 脚本提供额外信息，可以使用 `--script-args`
    标志提供参数。
- en: Lastly, it's possible to combine different options to launch scripts by including
    different tags in parenthetical. For example, if you wanted to launch scripts
    that fit into the categories of default, safe, or intrusive—but specifically did
    not want to launch any scripts that launch against web servers—you could start
    a scan with the `--script` (default, safe, or intrusive) flag and not `"http-*"`.
    Always remember to keep in mind that the `or` flag is not an exclusive or— meaning
    that scripts in both categories will still run—but `and` must be in both sections.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '最后，可以通过在括号中包含不同标签来组合不同选项以启动脚本。例如，如果要启动符合默认、安全或侵入性类别的脚本，但明确不想启动针对 Web 服务器的任何脚本，可以使用
    `--script`（default、safe 或 intrusive）标志，而不是 `"http-*"`。始终记住，`or` 标志不是排他性或——意味着两个类别中的脚本仍将运行——但两个部分都必须有
    `and`。 '
- en: Although the Nmap script repository is very thorough, it's always worth looking
    elsewhere on the Internet if a specific script that you think would be useful
    is not published. Many blogs from security researchers will have NSE scripts for
    a specific purpose, and before trying to write your own, it's absolutely worth
    it to check a search engine first!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Nmap 脚本存储库非常全面，但如果您认为某个特定脚本可能有用而未发布，还是值得在互联网上寻找其他地方。许多安全研究人员的博客会有特定目的的 NSE
    脚本，在尝试编写自己的脚本之前，最好先在搜索引擎上查找！
- en: Summary
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter introduced the NSE, which can be one of the most useful, versatile,
    and engaging features of the Nmap tool suite. We should now be able to launch
    scans that do more than just port and service versions—Nmap scripts can actually
    interact with the services listening, and in some cases can even exploit vulnerabilities!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了NSE，它可以是Nmap工具套件中最有用、多功能和引人入胜的功能之一。我们现在应该能够启动扫描，不仅仅是端口和服务版本，Nmap脚本实际上可以与正在监听的服务进行交互，并且在某些情况下甚至可以利用漏洞！
- en: In this chapter, we covered the history of the NSE, how NSE works, how to find
    existing scripts to use, and how to run scripts using the NSE.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了NSE的历史，NSE的工作原理，如何找到现有的脚本并使用它们，以及如何使用NSE运行脚本。
- en: In the next chapter, we will learn how to write a basic Nmap script using Lua.
    Although many, many scripts already exist for a huge variety of tasks, custom
    in-house uses may require writing one of our own.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用Lua编写基本的Nmap脚本。尽管已经存在许多脚本用于各种各样的任务，但自定义的内部使用可能需要编写我们自己的脚本。
