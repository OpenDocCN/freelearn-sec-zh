- en: Chapter 11. WPS and Probes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章：WPS 和探测
- en: '|   | *"Nothing is new under the sun."* |   |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|   | *“太阳底下无新事。”* |   |'
- en: '|   | --*Popular Saying* |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|   | --*俗话说* |'
- en: '*This chapter incorporates the new techniques related to attacking WPS and
    probe monitoring and also covers the pineapple tool that makes much of wireless
    testing a lot easier. These attacks and tools have appeared since the publication
    of the original book, and we''ll be making sure we''re being as holistic as possible.*'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*本章涵盖了与 WPS 攻击和探测监控相关的新技术，还介绍了让无线测试变得更加简单的菠萝工具。这些攻击和工具自原书发布以来已出现，我们将确保尽可能全面地涵盖这些内容。*'
- en: WPS attacks
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WPS 攻击
- en: '**Wireless Protected Setup** (**WPS**) was introduced in 2006 to help users
    without wireless knowledge to have secure networks. The idea was that their Wi-Fi
    device would have a single hidden hardcoded value that would allow access with
    key memorization. New devices would be authenticated through a button press on
    the Wi-Fi router. Individuals outside the house without access to the device would
    not be able to have access, thus reducing the issues surrounding remembering WPA
    keys or setting short ones.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**无线保护设置**（**WPS**）于 2006 年推出，旨在帮助没有无线知识的用户建立安全网络。其理念是，Wi-Fi 设备会有一个单一的隐藏硬编码值，允许通过记住密钥进行访问。新设备将通过
    Wi-Fi 路由器上的按钮进行身份验证。没有访问设备的外部人员将无法访问，从而减少了记住 WPA 密钥或设置较短密钥的问题。'
- en: In late 2011, a security vulnerability was disclosed enabling brute-force attacks
    on the WPS authentication system. The traffic required to negotiate a WPS exchange
    was spoofable, and the WPS pin itself is only eight characters between 0-9\. To
    start with, this provides only 100,000,000 possibilities in comparison with an
    eight-character azAZ09 password having 218,340,105,584,896 combinations.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2011 年末，发现了一个安全漏洞，使得 WPS 身份验证系统可以受到暴力破解攻击。协商 WPS 交换所需的流量是可以伪造的，而且 WPS PIN
    只有八个字符，范围为 0-9。与八个字符的 azAZ09 密码相比，这一设置提供的可能组合只有 100,000,000，而后者有 218,340,105,584,896
    种组合。
- en: 'However, there are further vulnerabilities:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，仍然存在其他漏洞：
- en: Of the eight characters of the WPS pin, the last character is a checksum of
    the previous seven and therefore predictable, leaving a maximum of 10,000,000
    options
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 WPS PIN 的八个字符中，最后一个字符是前七个字符的校验和，因此是可预测的，这就只剩下最多 10,000,000 种可能性。
- en: In addition, the first four and the following three of the remaining characters
    are checked separately, which means that there are 104 + 103 options or 11,000
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，剩余字符中的前四个和接下来的三个字符是分别检查的，这意味着有 104 + 103 种选择，或者说 11,000 种可能性。
- en: Through the two decisions made in the authentication mechanism, we have gone
    from 100,000,000 possible combinations to 11,000\. This equates to a six-hour
    difference when brute-forcing the algorithm. It is these decisions that make attacks
    against WPS viable.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在身份验证机制中做出的两个决策，我们将可能的组合从 100,000,000 个缩减到了 11,000 个。这意味着在暴力破解算法时，差距达到了六个小时。正是这些决策使得针对
    WPS 的攻击变得可行。
- en: In the next lab exercise, we will go through identifying and attacking vulnerable
    WPS setups with Wash and Reaver.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的实验中，我们将通过使用 Wash 和 Reaver 来识别和攻击脆弱的 WPS 设置。
- en: Time for action – WPS attack
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – WPS 攻击
- en: 'Follow the given instructions to get started:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 按照给定的说明开始：
- en: Before we attack a WPS-enabled access point, we need to create one. The TP-Link
    we use has this feature turned on by default, which is worrying but handy. To
    double-check this, we can log onto our router and click on **WPS**. It should
    look like the following:![Time for action – WPS attack](graphics/B09903_11_01.jpg)
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们攻击一个启用 WPS 的接入点之前，需要先创建一个。我们使用的 TP-Link 路由器默认开启了这一功能，这虽然让人担心，但也很方便。为了再次确认这一点，我们可以登录到路由器并点击
    **WPS**。它应该如下所示：![行动时间 – WPS 攻击](graphics/B09903_11_01.jpg)
- en: 'Now we''ve confirmed that it''s ready. We need to set up our target. We need
    to set up our testing environment. We''re going to use the Wash tool, and Wash
    requires a monitoring interface to function. As we have done many times before,
    we need to set up one with the following command:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经确认它准备好了。我们需要设置目标。我们需要设置测试环境。我们将使用 Wash 工具，而 Wash 需要一个监控接口才能工作。像之前做过的多次一样，我们需要通过以下命令设置一个接口：
- en: '[PRE0]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output will be as follows:'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Time for action – WPS attack](graphics/B09903_11_02.jpg)'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – WPS 攻击](graphics/B09903_11_02.jpg)'
- en: 'We have a monitoring interface set up as `wlan0mon`, and we can call Wash with
    the following command:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已设置好监控接口 `wlan0mon`，并可以通过以下命令调用 Wash：
- en: '[PRE1]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Time for action – WPS attack](graphics/B09903_11_03.jpg)'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – WPS攻击](graphics/B09903_11_03.jpg)'
- en: Wash will display all the nearby devices that support WPS as well as whether
    they have WPS active or unlocked and what version is running:![Time for action
    – WPS attack](graphics/B09903_11_04.jpg)
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Wash会显示所有支持WPS的附近设备，指示它们是否已启用WPS，是否解锁，并显示运行的版本：![行动时间 – WPS攻击](graphics/B09903_11_04.jpg)
- en: 'We can see the `Wireless Lab` network supports WPS. It uses version 1 and it''s
    not locked. Fantastic. We take note of the MAC address, which in my case is `E8:94:F6:62:1E:8E`,
    as this will be used to target our next tool: `reaver`.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以看到`Wireless Lab`网络支持WPS。它使用的是版本1，并且没有被锁定。太棒了。我们记录下MAC地址，在我的案例中是`E8:94:F6:62:1E:8E`，因为它将用于定位我们接下来的工具：`reaver`。
- en: 'Reaver attempts to brute-force the WPS pin for a given MAC address. The syntax
    for starting this is as follows:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Reaver尝试通过暴力破解给定MAC地址的WPS密码。启动该过程的语法如下：
- en: '[PRE2]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output will be as follows:'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Time for action – WPS attack](graphics/B09903_11_05.jpg)'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – WPS攻击](graphics/B09903_11_05.jpg)'
- en: Once it is started, the tool runs through all the possible combinations for
    the WPS and attempts to authenticate. Once it does this, it will return the WPS
    code and the password, as shown in the following screenshot:![Time for action
    – WPS attack](graphics/B09903_11_06.jpg)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦启动，该工具将遍历所有可能的WPS密码组合并尝试进行认证。成功后，它将返回WPS密码和密码，如下所示的截图所示：![行动时间 – WPS攻击](graphics/B09903_11_06.jpg)
- en: 'With WPA-PSK in hand, we can authenticate normally now. I left my device with
    the default WPA-PSK that matches the WPS pin. If, however, you want to authenticate
    with the WPS pin, you can do this by specifying the pin in `reaver` with the following
    command:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拥有WPA-PSK后，我们现在可以正常认证了。我将我的设备保持在与WPS密码匹配的默认WPA-PSK上。然而，如果你想使用WPS密码进行认证，可以通过在`reaver`中指定密码来实现，命令如下：
- en: '[PRE3]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Replace my pin with your own.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用你的密码替换我的密码。
- en: '*What just happened?*'
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We successfully identified a wireless network with a vulnerable instance of
    WPS active with Wash. We then used Reaver to recover the WPA key and the WPS pin.
    With this information, we could then authenticate with the network and continue
    a network penetration test.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功地通过Wash识别了一个存在WPS漏洞的无线网络。然后我们使用Reaver恢复了WPA密钥和WPS密码。有了这些信息，我们就能认证该网络并继续进行网络渗透测试。
- en: Have a go hero – rate limiting
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下，英雄 – 限制速率
- en: In the previous exercise, we attacked an entirely unprotected WPS installation.
    There are multiple methods that can be used to further secure installations without
    removing WPS altogether.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的练习中，我们攻击了一个完全没有保护的WPS安装。为了进一步保障安全，可以采用多种方法来保护安装，而无需完全移除WPS。
- en: Make an attempt to set the WPS pin to an arbitrary value and try again, to see
    whether Reaver is as effective at cracking it.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试将WPS密码设置为任意值，然后再试一次，看看Reaver是否同样有效地破解它。
- en: Acquire a wireless router that allows you to rate-limit the WPS attempts. Try
    and configure your attack to avoid triggering lockouts.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 获取一款可以限制WPS尝试次数的无线路由器。尝试配置你的攻击，避免触发锁定。
- en: Probe sniffing
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探测嗅探
- en: We have spoken about probes previously, and how they can be used to identify
    hidden networks and perform effective rogue access point attacks. They can also
    be used to identify individuals as targets or track them on a mass scale with
    minimal equipment.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前讨论过探测，以及它们如何用于识别隐藏网络和执行有效的恶意接入点攻击。它们还可以用来识别个体作为目标，或者通过最少的设备在大范围内跟踪他们。
- en: When a device wishes to connect to a network, it sends a probe request that
    contains its own MAC address and the name of the network it wishes to connect
    to. We can use tools such as `airodump-ng` to track these. However, if we wish
    to identify whether an individual was present at a specific location at a specific
    time or look for trends in Wi-Fi usage, we will need to use a different approach.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当设备想要连接到一个网络时，它会发送一个包含其MAC地址和希望连接的网络名称的探测请求。我们可以使用诸如`airodump-ng`之类的工具来跟踪这些请求。然而，如果我们想确定某个特定时间、特定地点是否有某个个体出现，或者寻找Wi-Fi使用趋势，我们就需要使用不同的方法。
- en: In this section, we will utilize `tshark` and Python to collect data. You will
    receive the code and an explanation of what is being done.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用`tshark`和Python来收集数据。你将收到代码和关于正在做的事情的解释。
- en: Time for action – collecting data
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 收集数据
- en: 'Follow the given instructions to get started:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 按照给出的说明开始：
- en: First of all, we need a device that's looking for multiple networks. Generally,
    a normal smartphone such as an Android device or iPhone will do the trick. Desktops
    don't generally make good targets as they tend to remain in one location. Newer
    iPhones and Android devices may have probe requests disabled or obfuscated, so
    do check before you give up.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要一个能够搜索多个网络的设备。通常，一个普通的智能手机，如安卓设备或 iPhone 就可以达到目的。台式机通常不适合作为目标，因为它们往往停留在一个位置。更新的
    iPhone 和安卓设备可能禁用了探测请求或进行了混淆，所以在放弃之前，请确认一下。
- en: Once you have your device, make sure the Wi-Fi is turned on.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你有了设备，确保开启 Wi-Fi。
- en: Then set up your monitoring interface as we have done many times before:![Time
    for action – collecting data](graphics/B09903_11_07.jpg)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，像之前做过的那样，设置你的监控接口：![开始行动 - 收集数据](graphics/B09903_11_07.jpg)
- en: 'The next thing to be done is to look for probe requests with `tshark` via the
    following command:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是通过以下命令使用` tシャーク`查找探测请求：
- en: '[PRE4]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The screenshot of the following command is as follows:'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下命令的截图如下：
- en: '![Time for action – collecting data](graphics/B09903_11_08.jpg)'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![开始行动 - 收集数据](graphics/B09903_11_08.jpg)'
- en: Your output at this point is a little rough, as the default output from `tshark`
    is not designed to be readable, just to have as much information in it as possible.
    It should look like the following:![Time for action – collecting data](graphics/B09903_11_09.jpg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前你的输出有点粗糙，因为` tシャーク`的默认输出并不是为了可读性设计的，而是尽可能包含更多信息。它应该像下面这样：![开始行动 - 收集数据](graphics/B09903_11_09.jpg)
- en: 'You can clearly see the MAC address and SSID of the probe request; however,
    this output can be improved. We can use the following command to make it more
    readable:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以清楚地看到探测请求的 MAC 地址和 SSID；然而，这个输出还可以进一步优化。我们可以使用以下命令来使其更具可读性：
- en: '[PRE5]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The screenshot of the following command is as follows:'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下命令的截图如下：
- en: '![Time for action – collecting data](graphics/B09903_11_10.jpg)'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![开始行动 - 收集数据](graphics/B09903_11_10.jpg)'
- en: The output here is much more readable:![Time for action – collecting data](graphics/B09903_11_11.jpg)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里的输出更加易于阅读：![开始行动 - 收集数据](graphics/B09903_11_11.jpg)
- en: 'So, now we have the output in a readable format, what next? What we do is create
    a Python script that will run the command and record the output for later analysis.
    Before running the code, you will need to ensure that you have your monitoring
    interface ready and that a file called `results.txt` is created in the directory
    you are in. The Python script is as follows:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了可读格式的输出，接下来做什么呢？我们要做的是创建一个 Python 脚本，该脚本将运行命令并记录输出以供后续分析。在运行代码之前，你需要确保你的监控接口已经准备好，并且在你所在的目录下创建了一个名为`results.txt`的文件。Python
    脚本如下：
- en: '[PRE6]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s get briefed on the Python script:'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们简要了解一下 Python 脚本：
- en: '`import subprocess` and `import datetime`: This allow us to refer to the `subprocess`
    and `datetime` libraries. The `subprocess` library allows us to monitor the interface
    from the Linux command line, and `datetime` allows us to get the accurate time
    and date readings.'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`import subprocess` 和 `import datetime`：这两行代码允许我们引用`subprocess`和`datetime`库。`subprocess`库让我们能够通过
    Linux 命令行监控接口，而`datetime`库则帮助我们获取准确的时间和日期信息。'
- en: '`results = open("results.txt", "a")`: This opens a file with the append rights
    and assigns it to `results`. The append rights only allow the script to add to
    the contents of the file. This stops the file from constantly being overwritten.'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`results = open("results.txt", "a")`：这行代码打开一个具有追加权限的文件，并将其赋值给`results`。追加权限只允许脚本向文件中添加内容，这样可以避免文件被不断覆盖。'
- en: '`while 1`: This line means run until stopped.'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`while 1`：这一行表示一直运行，直到停止。'
- en: '`cmd = subprocess.check_output(["tshark –n –i wlan0mon –T fields -e wlan.sa
    –e wlan.ssid –c 100"], shell=True)`: This opens a shell to perform our previously
    tested `tshark` command. The only difference this time is `-c 100`. What this
    flag does is limit the command to 100 queries. This allows us to return the results
    to ourselves without having to stop the program. Since we said run forever after
    writing the results, the script will restart again. This line takes the output
    from the shell and assigns it to the variable `cmd`. The script will display a
    count to 100, stop, and then restart. This means that if you want it to end, you
    have to kill the process.'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cmd = subprocess.check_output(["tshark –n –i wlan0mon –T fields -e wlan.sa
    –e wlan.ssid –c 100"], shell=True)`：这会打开一个shell来执行我们之前测试过的`tshark`命令。唯一的不同是这次添加了`-c
    100`。这个标志的作用是限制命令执行100次查询。这样，我们可以将结果返回而无需停止程序。由于我们已经设定了程序执行完后会继续运行，脚本会重新启动。此行代码将shell的输出赋值给变量`cmd`。脚本将显示计数至100，停止，然后重新启动。也就是说，如果你希望它结束，你必须终止进程。'
- en: '`split = cmd.split("\n")`: This takes the variable and splits it by line.'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`split = cmd.split("\n")`：这会将变量按行拆分。'
- en: '`for value in split[:-1]`: This repeats the following action for each line
    in the output, ignoring the first line that contains headers.'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for value in split[:-1]`：这会对输出中的每一行执行以下操作，忽略包含标题的第一行。'
- en: '`if value.strip()`: This checks to see if the value is empty before continuing
    to account for non-probe requests.'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if value.strip()`：这检查值是否为空，在继续之前考虑到非探测请求。'
- en: '`value = value.split("\t")`: This breaks each line into further smaller chunks
    using the tab character as the delimiter.'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value = value.split("\t")`：这将每一行根据制表符拆分成更小的块。'
- en: 'The following three lines take each chunk of text and assign it to a variable:'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下三行将每个文本块分配给一个变量：
- en: '[PRE7]'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`results.write(MAC+" "+SSID+" "+time+"\r\n")`: This takes all the values, writes
    them to a file separated by spaces, and ends with a return and a new line for
    neatness. The output will be neat lines of text written to the file.'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`results.write(MAC+" "+SSID+" "+time+"\r\n")`：这会将所有值写入文件，值之间用空格分隔，最后加上回车和换行符以保持格式整齐。输出将是整齐的文本行写入文件。'
- en: '*What just happened?*'
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We took the input from probe requests and output them to a file using Python.
    You may ask yourself what the purpose of this is. This can be achieved by simply
    performing the original `tshark` command and adding a `>> results.txt` command
    to the end. You would be correct; however, what we have created is a framework
    for integration with other tools, visualization platforms, databases, and services.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从探测请求中获取输入，并使用Python将其输出到文件。你可能会问，这样做的目的是什么？其实，可以通过简单地执行原始的`tshark`命令，并在末尾添加`>>
    results.txt`命令来实现。你是对的；然而，我们创建的是一个与其他工具、可视化平台、数据库和服务集成的框架。
- en: For example, using the WiGLE database that maps SSIDs to locations, you can
    add a few lines of code to take the SSID variable and query the WiGLE database.
    Alternatively, you could set up a MySQL database and output the results there
    to perform the SQL commands on it. This section has provided you with the first
    steps to create your own probe-monitoring tools. Through experimentation and using
    this simple code as the first step, a multitude of useful tools can be created.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用WiGLE数据库将SSID映射到位置，你可以添加几行代码来获取SSID变量并查询WiGLE数据库。或者，你可以设置一个MySQL数据库，将结果输出到数据库中并执行SQL命令。本节为你提供了创建自己探测监控工具的第一步。通过实验和使用这段简单代码作为起点，你可以创建多种有用的工具。
- en: Have a go hero – extension ideas
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加油，英雄——扩展想法
- en: Research which tools are available that allow visualization or data analytics
    and are easily integrated with Python. Tools such as Maltego have free versions
    that can be used to plot information.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 研究哪些工具可以进行可视化或数据分析，并且易于与Python集成。像Maltego这样的工具有免费的版本，可以用来绘制信息。
- en: Set yourself up a MySQL database to record the data and reconfigure the preceding
    Python script to output the results to the database. Then, build another script
    (or do it in the same one) to retrieve the data and output it to Maltego.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 设置一个MySQL数据库来记录数据，并重新配置前面的Python脚本将结果输出到数据库中。然后，构建另一个脚本（或者在同一个脚本中完成）来检索数据并将其输出到Maltego。
- en: Reconfigure the script to query WiGLE, and collect geolocation data for probe
    requests. Output this data through Maltego.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 重新配置脚本以查询WiGLE，并收集探测请求的地理位置数据。通过Maltego将这些数据输出。
- en: Make an attempt to set up a web-based frontend through Flask, Django, or PHP
    to display your results. Investigate currently existing solutions for presenting
    the data and attempting to emulate or improve them through a discussion with their
    creators.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试通过Flask、Django或PHP搭建一个基于Web的前端来展示你的结果。调查目前存在的展示数据的解决方案，并通过与其创作者的讨论来尝试模仿或改进这些解决方案。
- en: Summary
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed the attacks against WPS that have come about since
    the release of the original book and also performed an initial foray into integrating
    wireless tools with Python. Alas, we have come to end of the book, I hope it's
    been informative and interesting.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了自原书发布以来出现的针对WPS的攻击，并且初步探讨了如何将无线工具与Python集成。唉，书籍已经接近尾声，希望它对你有所启发并且有趣。
