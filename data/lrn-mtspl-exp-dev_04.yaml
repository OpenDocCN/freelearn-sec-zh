- en: Chapter 4. Meterpreter Basics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。Meterpreter基础知识
- en: Meterpreter is one of the spearheads in the Metasploit Framework. It is used
    as a payload post exploitation of a vulnerable system. It uses in-memory DLL Injection
    Stagers and is extended over the network at runtime. In-memory DLL, Injection
    is a technique used for injecting code within the address space of a currently
    running process by forcing it to load a **DLL** (**Dynamic-link library**) file.
    Once an exploit is triggered and the Meterpreter is used as a payload, we get
    a Meterpreter shell for the compromised system. The uniqueness of its attack vector
    lies in its stealth feature. It does not create any files on the hard disk but
    just attaches itself to an active process in memory. The client-server intercommunication
    takes place using the Type Length Value Format and is encrypted. Within data communication
    protocols, optional information may be encoded as a type-length-value or TLV element
    inside the protocol. Here, Type indicates the kind of field that is a part of
    the message, Length indicates the size of the value field and Value indicates
    the variable-sized series of bytes, which contain data for this part of the message.
    This single payload is very effective with its multiple capabilities, which helps
    in acquiring password hashes of a victim machine, running a keylogger, and privilege
    escalation. The stealth feature makes it undetectable to many antivirus and host-based
    intrusion detection systems. Meterpreter also has the capability to switch between
    different processes to which it gets attached through DLL Injection, and stays
    by clinging to running applications on the compromised host rather than creating
    files on the system.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Meterpreter是Metasploit框架中的先锋之一。它用作易受攻击系统后的有效载荷。它使用内存中的DLL注入分段器，并在运行时通过网络进行扩展。内存中的DLL注入是一种用于在当前运行的进程的地址空间中注入代码的技术，通过强制它加载**DLL**（动态链接库）文件。一旦触发了漏洞并且Meterpreter被用作有效载荷，我们就会为受损系统获得一个Meterpreter
    shell。其攻击向量的独特之处在于其隐蔽特性。它不会在硬盘上创建任何文件，而只是附加到内存中的活动进程。客户端-服务器之间的通信使用类型长度值格式并且是加密的。在数据通信协议中，可选信息可以被编码为类型长度值或TLV元素，这是协议内的一部分。在这里，类型表示消息的一部分的字段类型，长度表示值字段的大小，值表示可变大小的字节序列，其中包含此消息部分的数据。这个单一的有效载荷非常有效，具有多种功能，有助于获取受害者机器的密码哈希，运行键盘记录器和权限提升。其隐蔽特性使其对许多防病毒软件和基于主机的入侵检测系统不可检测。Meterpreter还具有在不同进程之间切换的能力，它通过DLL注入附加到运行的应用程序，并且停留在受损主机上，而不是在系统上创建文件。
- en: In the previous chapter, we compromised a system to get the reverse connection
    for the Meterpreter. Now we will discuss the functionalities we can use over the
    compromised system post exploitation, such as the working of the Meterpreter and
    the Meterpreter in action.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们妥协了一个系统，以获得Meterpreter的反向连接。现在我们将讨论我们可以在受损系统后利用的功能，比如Meterpreter的工作和实际操作。
- en: Working of the Meterpreter
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Meterpreter的工作
- en: Once a system is compromised, we (the attacker) send a first-stage payload to
    the affected system. This payload connects back to the Meterpreter. Then a second
    DLL Injection Payload is sent followed by the Meterpreter Server DLL. This establishes
    a socket and a client-server communication can take place through the Meterpreter
    session. The best part of this session is that it is encrypted. This offers confidentiality
    and hence a session may not be sniffed by any network administrator.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦系统被攻破，我们（攻击者）向受影响的系统发送第一阶段的有效载荷。这个有效载荷连接到Meterpreter。然后发送第二个DLL注入有效载荷，然后是Meterpreter服务器DLL。这建立了一个套接字，通过Meterpreter会话可以进行客户端-服务器通信。这个会话的最好部分是它是加密的。这提供了机密性，因此会话可能不会被任何网络管理员嗅探到。
- en: '![Working of the Meterpreter](img/3589_04_01.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![Meterpreter的工作](img/3589_04_01.jpg)'
- en: Meterpreter in action
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Meterpreter实际操作
- en: In [Chapter 3](ch03.html "Chapter 3. Exploitation Basics"), *Exploitation Basics*,
    we were able to exploit the victim machine and get a Meterpreter session from
    it. Now we will use this Meterpreter session to leverage the various functionalities
    of the Metasploit Framework.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](ch03.html "第3章。利用基础知识")中，*利用基础知识*，我们能够利用受害者机器并从中获得Meterpreter会话。现在我们将使用这个Meterpreter会话来利用Metasploit框架的各种功能。
- en: '![Meterpreter in action](img/3589_04_02.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![Meterpreter实际操作](img/3589_04_02.jpg)'
- en: We will now display all the weapons of attack that Meterpreter hosts. For this,
    enter `help`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将显示Meterpreter主机的所有攻击武器。为此，输入`help`。
- en: '![Meterpreter in action](img/3589_04_03.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![Meterpreter实际操作](img/3589_04_03.jpg)'
- en: In the preceding screenshot, we see all of the Meterpreter commands that can
    be used on the compromised system.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们看到了可以在受损系统上使用的所有Meterpreter命令。
- en: 'We have a few classified commands based on their usage; they are listed as
    follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 根据使用情况，我们有一些分类的命令；它们列如下：
- en: '| Command type | Command name | Description |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 命令类型 | 命令名称 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Process listing | `getuid` | It gets the system ID and the name of the computer.
    |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 进程列表 | `getuid` | 它获取系统ID和计算机名称。 |'
- en: '|   | `kill` | It terminates a process. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '|   | `kill` | 它终止一个进程。 |'
- en: '|   | `ps` | It lists the running processes. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '|   | `ps` | 它列出正在运行的进程。 |'
- en: '|   | `getpid` | It gets the current process identifier. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '|   | `getpid` | 它获取当前进程标识符。 |'
- en: '| Keylog Usage | `keyscan_start` | It starts the keylogging session. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 按键记录使用 | `keyscan_start` | 它启动按键记录会话。 |'
- en: '|   | `keyscan_stop` | It stops the keylogging session. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '|   | `keyscan_stop` | 它停止按键记录会话。 |'
- en: '|   | `keyscan_dump` | It dumps the keystrokes captured from the victim machine.
    |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '|   | `keyscan_dump` | 它从受害者机器中转储捕获的按键。 |'
- en: '| Session | `enumdesktops` | It lists all of the accessible desktops and workstations.
    |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 会话 | `enumdesktops` | 它列出所有可访问的桌面和工作站。 |'
- en: '|   | `getdesktop` | It gets the current Meterpreter desktop. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '|   | `getdesktop` | 它获取当前Meterpreter桌面。 |'
- en: '|   | `setdesktop` | It changes the Meterpreter''s current desktop. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '|   | `setdesktop` | 它更改Meterpreter的当前桌面。 |'
- en: '| Sniffer Functions | `use sniffer` | It loads the sniffer functions. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 嗅探器功能 | `use sniffer` | 它加载嗅探器功能。 |'
- en: '|   | `sniffer_start` | It starts the sniffer for the interface. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| | `sniffer_start` | 它启动接口的嗅探器。 |'
- en: '|   | `sniffer_dump` | It dumps the network capture of the victim machine locally.
    |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| | `sniffer_dump` | 它在本地转储受害者机器的网络捕获。 |'
- en: '|   | `sniffer_stop` | It stops the sniffer for the interface. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| | `sniffer_stop` | 它停止接口的嗅探器。 |'
- en: '| Webcam Commands | `webcam_list` | It lists all of the webcams of the system.
    |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 摄像头命令 | `webcam_list` | 它列出系统中的所有网络摄像头。 |'
- en: '|   | `webcam_snap` | It captures snapshots of the victim machine |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| | `webcam_snap` | 它捕获受害者机器的快照。 |'
- en: '|   | `record_mic` | It records the sound of the environment from the default
    microphone on the machine |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| | `record_mic` | 它记录机器上默认麦克风的环境声音。 |'
- en: Now we will start the penetration testing procedure and perform the first step
    by starting to gather information about our victim machine. Type `sysinfo` to
    check the system information.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将开始渗透测试程序，并执行第一步，开始收集有关受害者机器的信息。键入`sysinfo`以检查系统信息。
- en: '![Meterpreter in action](img/3589_04_04.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![Meterpreter in action](img/3589_04_04.jpg)'
- en: We can see the system information in the preceding screenshot, the computer
    name and the operating system used by the victim. Now we will capture a screenshot
    of the victim machine. For this, type in `screenshot`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在上述截图中看到系统信息，受害者使用的计算机名称和操作系统。现在，我们将捕获受害者机器的屏幕截图。为此，键入`screenshot`。
- en: '![Meterpreter in action](img/3589_04_05.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![Meterpreter in action](img/3589_04_05.jpg)'
- en: 'We can see the victim machine''s screenshot as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到受害者机器的屏幕截图如下：
- en: '![Meterpreter in action](img/3589_04_06.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![Meterpreter in action](img/3589_04_06.jpg)'
- en: Let us check the list of all of the processes that are running on the victim
    machine. For this just type `ps` and it will show the running processes.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查受害者机器上运行的所有进程列表。只需键入`ps`，它将显示正在运行的进程。
- en: '![Meterpreter in action](img/3589_04_07.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![Meterpreter in action](img/3589_04_07.jpg)'
- en: In the preceding screenshot, we can see the process list, with detailed information.
    The first column shows the PID, which means process ID and the second column shows
    the process name. The next column shows the architecture of the system, the user,
    and the path from where the process is running.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '在上述截图中，我们可以看到进程列表，以及详细信息。第一列显示PID，即进程ID，第二列显示进程名称。下一列显示系统的架构，用户和进程运行的路径。 '
- en: In the process list, we have to find the process ID for `explorer.exe` and then
    migrate with that process ID. For migrating with any process ID, we have to type
    `migrate <PID>`. Here, we are migrating with `explorer.exe`, so we type in `migrate
    1512`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在进程列表中，我们必须找到`explorer.exe`的进程ID，然后使用该进程ID进行迁移。要使用任何进程ID进行迁移，我们必须键入`migrate
    <PID>`。在这里，我们正在使用`explorer.exe`进行迁移，因此我们键入`migrate 1512`。
- en: '![Meterpreter in action](img/3589_04_08.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![Meterpreter in action](img/3589_04_08.jpg)'
- en: After migrating with a process, we then identify the current process. For this,
    type in `getpid`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移进程后，我们然后识别当前进程。为此，键入`getpid`。
- en: '![Meterpreter in action](img/3589_04_09.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![Meterpreter in action](img/3589_04_09.jpg)'
- en: We can see the current process ID from which we have migrated to the victim
    machine.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从中看到当前进程ID，我们已经迁移到受害者机器。
- en: Next, we move on to some real hacking stuff by using the keylogger service on
    the victim machine. We type in `keyscan_start` and the keylogger will start and
    wait for a few minutes to capture the keystrokes of the victim machine.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将通过在受害者机器上使用键盘记录服务来进行一些真正的黑客活动。我们键入`keyscan_start`，键盘记录将开始并等待几分钟来捕获受害者机器的按键。
- en: '![Meterpreter in action](img/3589_04_10.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![Meterpreter in action](img/3589_04_10.jpg)'
- en: The victim has started to type something in the Notepad. Let us check if we
    have the capture.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 受害者已开始在记事本中输入内容。让我们检查是否有捕获。
- en: '![Meterpreter in action](img/3589_04_11.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![Meterpreter in action](img/3589_04_11.jpg)'
- en: Now, let us stop the keylogger service and dump all of the keystroke logs from
    the victim machine. For this, type `keyscan_dump` and then type `keyscan_stop`
    to stop the keylogger service. You can see in the following screenshot that we
    have the exact capture. Bravo!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们停止键盘记录服务并转储受害者机器的所有按键记录。为此，键入`keyscan_dump`，然后键入`keyscan_stop`以停止键盘记录服务。您可以在以下截图中看到我们的确切捕获。太棒了！
- en: '![Meterpreter in action](img/3589_04_12.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![Meterpreter in action](img/3589_04_12.jpg)'
- en: Let's try some more interesting activities in our Meterpreter session. Let's
    check whether the victim's machine has a webcam available or not. For that, we
    type in `webcam_list` and it displays the webcam list from the victim machine.
    In the following screenshot, we can see that a webcam is available.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Meterpreter会话中尝试一些更有趣的活动。让我们检查受害者机器是否有可用的网络摄像头。为此，我们键入`webcam_list`，它会显示受害者机器的网络摄像头列表。在下面的截图中，我们可以看到有一个网络摄像头可用。
- en: '![Meterpreter in action](img/3589_04_13.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![Meterpreter in action](img/3589_04_13.jpg)'
- en: Thus we know that the victim has an integrated webcam. So let's capture a snapshot
    of the victim from his/her webcam. Just type in `webcam_snap`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们知道受害者有一台集成的网络摄像头。因此，让我们从他/她的网络摄像头中捕获受害者的快照。只需键入`webcam_snap`。
- en: '![Meterpreter in action](img/3589_04_14.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![Meterpreter in action](img/3589_04_14.jpg)'
- en: In the previous screenshot, we can see that the webcam shot has been saved to
    the root directory and the image is named `yxGSMosP.jpeg`. So let us verify the
    captured image in the root directory.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一张截图中，我们可以看到网络摄像头拍摄的照片已保存到根目录，并且图像命名为`yxGSMosP.jpeg`。因此，让我们验证根目录中捕获的图像。
- en: '![Meterpreter in action](img/3589_04_15.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![Meterpreter in action](img/3589_04_15.jpg)'
- en: After that, we will check the system ID and the name of the victim machine.
    Type in `getuid`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将检查系统ID和受害者机器的名称。键入`getuid`。
- en: '![Meterpreter in action](img/3589_04_16.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![Meterpreter in action](img/3589_04_16.jpg)'
- en: After playing with the victim machine, now it is time for some serious stuff.
    We are going to access the victim's command shell to control his/her system. For
    this, just type in `shell` and it will open a new command prompt for you.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在玩弄受害者机器之后，现在是进行一些严肃工作的时候了。我们将访问受害者的命令shell来控制他/她的系统。只需输入`shell`，它将为您打开一个新的命令提示符。
- en: '![Meterpreter in action](img/3589_04_17.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![Meterpreter in action](img/3589_04_17.jpg)'
- en: Now let us make a directory on the victim machine. Type in `mkdir <directory
    name>`. We are creating a directory named `hacked` in `C:\Documents and Settings\Victim`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在受害者机器上创建一个目录。输入`mkdir <directory name>`。我们正在`C:\Documents and Settings\Victim`中创建一个名为`hacked`的目录。
- en: '![Meterpreter in action](img/3589_04_18.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![Meterpreter in action](img/3589_04_18.jpg)'
- en: Let us verify whether the directory has been created or not under `C:\Documents
    and Settings\Victim`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们验证一下目录是否已经在`C:\Documents and Settings\Victim`下创建了。
- en: '![Meterpreter in action](img/3589_04_19.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![Meterpreter in action](img/3589_04_19.jpg)'
- en: 'Now we are going to shut down the victim computer by displaying a message on
    his screen. For this, type in `shutdown –s –t 15 -c "YOU ARE HACKED"`. In the
    following command, the syntax we are using is: `–s` for shutdown, `–t 15` for
    timeout, and `–c` for a message or comment.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将通过在屏幕上显示一条消息来关闭受害者计算机。为此，请输入`shutdown –s –t 15 -c "YOU ARE HACKED"`。在以下命令中，我们使用的语法是：`–s`表示关闭，`–t
    15`表示超时，`–c`表示消息或注释。
- en: '![Meterpreter in action](img/3589_04_20.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![Meterpreter in action](img/3589_04_20.jpg)'
- en: Let's see what happened on the victim machine.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在受害者机器上发生了什么。
- en: '![Meterpreter in action](img/3589_04_21.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![Meterpreter in action](img/3589_04_21.jpg)'
- en: Summary
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: So, with this chapter, we have covered how a user compromises a system through
    the Meterpreter and what information he/she may be able to extract using the Meterpreter
    functionality post exploitation. Once we compromised the system of the victim,
    we were able to obtain the system information, which included the operating system
    name, architecture, and the computer name. After that, we were able to capture
    a screenshot of the victim machine's desktop. Through the Meterpreter, we got
    direct access to the shell of the victim machine and hence could check the processes
    that were running. We were able to install a keylogger and capture the active
    keystrokes of the victim machine. Using the Meterpreter, we could even use the
    victim's camera to capture his snapshot without being noticed.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，通过这一章，我们已经介绍了用户如何通过Meterpreter妥协系统，以及他/她可能利用Meterpreter功能进行利用后提取的信息。一旦我们妥协了受害者的系统，我们就能够获取系统信息，包括操作系统名称、架构和计算机名称。之后，我们能够捕获受害者机器桌面的截图。通过Meterpreter，我们直接访问了受害者机器的shell，因此可以检查正在运行的进程。我们能够安装键盘记录器并捕获受害者机器的活动按键。使用Meterpreter，我们甚至可以使用受害者的摄像头在不被注意的情况下捕获他的快照。
- en: This entire chapter had a sense of some real hacking involved and the different
    ways to use the victim machine to one's own command. Hence the victim machine
    was a mere puppet dancing to the attacker's commands. Since we had access to the
    victim's shell, we could format his hard disk, create new files, and even copy
    his confidential data. The next chapter will cover the information gathering and
    scanning phase.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 整个章节都涉及到了一些真正的黑客行为，以及利用受害者机器来执行自己命令的不同方式。因此，受害者机器只是一个简单的傀儡，随着攻击者的命令而舞动。由于我们可以访问受害者的shell，我们可以格式化他的硬盘，创建新文件，甚至复制他的机密数据。下一章将涵盖信息收集和扫描阶段。
- en: References
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: 'The following are some helpful references that shed further light on some of
    the topics covered in this chapter:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些有用的参考资料，可以进一步了解本章涉及的一些主题：
- en: '[http://www.offensive-security.com/metasploit-unleashed/About_Meterpreter](http://www.offensive-security.com/metasploit-unleashed/%E2%80%A8About_Meterpreter)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.offensive-security.com/metasploit-unleashed/About_Meterpreter](http://www.offensive-security.com/metasploit-unleashed/%E2%80%A8About_Meterpreter)'
- en: '[http://cyruslab.wordpress.com/2012/03/07/metasploit-about-meterpreter/](http://cyruslab.wordpress.com/2012/03/07/metasploit-about-meterpreter/)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://cyruslab.wordpress.com/2012/03/07/metasploit-about-meterpreter/](http://cyruslab.wordpress.com/2012/03/07/metasploit-about-meterpreter/)'
- en: '[https://github.com/rapid7/metasploit-framework/wiki/How-payloads-work](https://github.com/rapid7/metasploit-framework/wiki/%E2%80%A8How-payloads-work)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/rapid7/metasploit-framework/wiki/How-payloads-work](https://github.com/rapid7/metasploit-framework/wiki/%E2%80%A8How-payloads-work)'
- en: '[http://www.isoc.my/profiles/blogs/working-with-meterpreter-on-metasploit](http://www.isoc.my/profiles/blogs/working-with-meterpreter-on-metasploit)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.isoc.my/profiles/blogs/working-with-meterpreter-on-metasploit](http://www.isoc.my/profiles/blogs/working-with-meterpreter-on-metasploit)'
