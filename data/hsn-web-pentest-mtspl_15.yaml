- en: Penetration Testing on Technological Platforms - JBoss
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术平台的渗透测试 - JBoss
- en: 'The previous chapters of this book explained how to perform penetration tests
    on **Content Management Systems** (**CMSes**). Now that we have a clear understanding
    of the different CMS architectures and the different ways to go about carrying
    out a test, let''s move on to learning how we can carry out tests on different
    technologies. In this chapter, we''ll learn about JBoss, its architecture, and
    its exploitation. JBoss is one of the most easily deployable applications for
    an organization focused on automating deployments of a Java-based application.
    Due to its flexible architecture, many organizations opt for JBoss, but it is
    because of its great ease of use to organizations that JBoss is also widely targeted
    by threat actors. The following topics will be covered in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的前几章介绍了如何对**内容管理系统**（**CMS**）进行渗透测试。现在我们已经清楚了不同CMS架构和进行测试的不同方法，让我们继续学习如何对不同技术进行测试。在本章中，我们将学习JBoss及其架构和利用。JBoss是一个组织专注于自动化部署基于Java的应用程序的最易部署的应用之一。由于其灵活的架构，许多组织选择了JBoss，但正是因为其对组织的极大易用性，JBoss也成为了威胁行为者广泛瞄准的目标。本章将涵盖以下主题：
- en: An introduction to JBoss
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JBoss简介
- en: Performing reconnaissance on a JBoss - based application server using Metasploit
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Metasploit对基于JBoss的应用服务器进行侦察
- en: Vulnerability assessments on JBoss
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对JBoss的漏洞评估
- en: Carrying out JBoss exploitation with the help of Metasploit modules
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用Metasploit模块进行JBoss利用
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following are the prerequisites for this chapter:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的先决条件如下：
- en: A JBoss **Application Server** (**AS**) instance ([https://jbossas.jboss.org/](https://jbossas.jboss.org/))
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JBoss **应用服务器** (**AS**)实例（[https://jbossas.jboss.org/](https://jbossas.jboss.org/)）
- en: The Metasploit Framework ([https://www.metasploit.com/](https://www.metasploit.com/))
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit框架（[https://www.metasploit.com/](https://www.metasploit.com/)）
- en: JexBoss, which is a third-party tool ([https://github.com/joaomatosf/jexboss](https://github.com/joaomatosf/jexboss))
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JexBoss是一个第三方工具（[https://github.com/joaomatosf/jexboss](https://github.com/joaomatosf/jexboss)）
- en: An introduction to JBoss
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JBoss简介
- en: JBoss AS is an open source **Java Enterprise Edition** (**Java EE**)-based application
    server. The project was started by Mark Fluery in 1999\. Since then, JBoss Group
    (LLC) was formed in 2001, and in 2004, JBoss became a corporation under the name
    of JBoss, Inc. In early 2006, Oracle sought to buy JBoss, Inc., but later on in
    the same year, RedHat succeeded in buying the corporation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: JBoss AS是一个基于**Java企业版**（**Java EE**）的开源应用服务器。该项目始于1999年的Mark Fluery。自那时起，JBoss
    Group（LLC）于2001年成立，并且在2004年，JBoss成为了以JBoss, Inc.的名义成立的公司。在2006年初，甲骨文试图收购JBoss,
    Inc.，但在同一年晚些时候，RedHat成功收购了该公司。
- en: 'As JBoss AS is based on Java, the application server supports cross-platform
    installation and, unlike other proprietary software in the market, JBoss offers
    the same features at very low prices. The following are some of the advantages
    of JBoss:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由于JBoss AS基于Java，该应用服务器支持跨平台安装，并且与市场上的其他专有软件不同，JBoss以非常低的价格提供相同的功能。以下是JBoss的一些优点：
- en: Flexibility due to plugin-based architecture
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于基于插件的架构而具有灵活性
- en: Ease of installation and setup
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和设置简单
- en: Provides the full Java EE stack, including **Enterprise JavaBeans** (**EJB**),
    **Java Messaging Service** (**JMS**), **Java Management Extension** (**JMX**),
    and **Java Naming and Directory Interface** (**JNDI**)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供完整的Java EE堆栈，包括**企业JavaBean**（**EJB**）、**Java消息服务**（**JMS**）、**Java管理扩展**（**JMX**）和**Java命名和目录接口**（**JNDI**）
- en: Can run an **Enterprise Application** (**EA**)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以运行**企业应用**（**EA**）
- en: Is cost-efficient
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成本效益
- en: Due to the flexible plugin architecture, developers don't have to spend time
    developing services for their applications. The goal here is to save money and
    resources so that developers can focus more time on the products they're developing.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 由于灵活的插件架构，开发人员不必花时间为其应用程序开发服务。这里的目标是节省金钱和资源，以便开发人员可以更多地专注于他们正在开发的产品。
- en: The JBoss architecture (JBoss 5)
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JBoss架构（JBoss 5）
- en: 'The JBoss architecture has changed gradually over the last few years and with
    each major release, new services have been added. In this chapter, we will look
    at an architectural overview of JBoss AS 5 and cover the exploitation part of
    the architecture in the *JBoss exploitation* section later in this chapter. To
    understand the JBoss AS architecture, refer to the following diagram:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: JBoss架构在过去几年逐渐发生了变化，并且随着每个主要版本的发布，新的服务已被添加。在本章中，我们将查看JBoss AS 5的架构概述，并在本章后面的*JBoss利用*部分中涵盖架构的利用部分。要了解JBoss
    AS架构，请参考以下图表：
- en: '![](img/ead9fe86-c45c-4e7d-834c-a77cc9c0dc0a.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ead9fe86-c45c-4e7d-834c-a77cc9c0dc0a.png)'
- en: 'We can divide the architecture into four main components, as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将架构分为四个主要组件，如下所示：
- en: '**User applications**: As the name suggests, this component handles user applications
    and contains the XML config files, **Web Application Resource** (**WAR**) files,
    and so on. This is where user applications are deployed.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户应用程序**：顾名思义，该组件处理用户应用程序，并包含XML配置文件、**Web应用程序资源**（**WAR**）文件等。这是用户应用程序部署的地方。'
- en: '**Component deployers**: Deployers are used in JBoss to deploy components.
    `MainDeployer`, `JARDeployer`, and `SARDeployer` are hardcoded deployers in the
    JBoss server core. All other deployers are **Managed Bean** (**MBean**) services
    that register themselves as deployers with `MainDeployer`.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组件部署器**：JBoss中使用部署器来部署组件。`MainDeployer`，`JARDeployer`和`SARDeployer`是JBoss服务器核心中的硬编码部署器。所有其他部署器都是**托管Bean**（**MBean**）服务，它们将自己注册为`MainDeployer`的部署器。'
- en: '**Enterprise services**: This component is responsible for handling multiple
    things, such as transactions, security, and the web server.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**企业服务**：该组件负责处理多种事务，如事务、安全和Web服务器。'
- en: '**The JBoss microcontainer**: This can be used as a standalone container outside
    of JBoss AS. It is designed to provide an environment to configure and manage
    **Plain Old Java Objects** (**POJOs**).'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JBoss微容器**：这可以作为独立容器在JBoss AS之外使用。它旨在提供一个环境来配置和管理**Plain Old Java Objects**（**POJOs**）。'
- en: Now, let's look at the directory structure.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下目录结构。
- en: JBoss files and the directory structure
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JBoss文件和目录结构
- en: 'JBoss has a simplified directory structure. By browsing to the JBoss `home`
    directory and listing the contents, we can see the structure shown in the following
    screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: JBoss有一个简化的目录结构。通过浏览到JBoss的`home`目录并列出内容，我们可以看到下面截图中显示的结构：
- en: '![](img/373822c3-8295-4c5f-8db6-5cb1300c5c13.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/373822c3-8295-4c5f-8db6-5cb1300c5c13.png)'
- en: 'Let''s try to understand what these directories are and what files and folders
    they contain:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试着了解一下这些目录是什么，它们包含了什么文件和文件夹：
- en: '`bin`: This directory contains all the entry point **Java Archives** (**JARs**) and
    scripts, including startup and shutdown.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin`：这个目录包含所有入口点的**Java Archives**（**JARs**）和脚本，包括启动和关闭。'
- en: '`client`: This directory stores the configuration files that may be used by
    an external Java client application.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`client`：这个目录存储可能被外部Java客户端应用程序使用的配置文件。'
- en: '`common`: This directory contains all of the server''s common JAR and config
    files.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`common`：这个目录包含服务器的所有公共JAR和配置文件。'
- en: '`docs`: This directory contains the JBoss documentation and schemas, which
    are helpful during the development process.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docs`：这个目录包含JBoss文档和模式，在开发过程中很有帮助。'
- en: '`lib`: This directory contains all the JARs required for JBoss to start up.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lib`：这个目录包含JBoss启动所需的所有JAR文件。'
- en: '`server`: This directory contains the files related to different server profiles,
    including production and testing.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server`：这个目录包含与不同服务器配置文件相关的文件，包括生产和测试。'
- en: 'By going further into the `server` directory and listing the contents, we can
    see the structure shown in the following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通过进一步进入`server`目录并列出内容，我们可以看到下面截图中显示的结构：
- en: '![](img/09273d72-b27a-4366-8940-34ffe73f3fbc.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/09273d72-b27a-4366-8940-34ffe73f3fbc.png)'
- en: 'Let''s open one of these profiles and learn about the structure. The following
    screenshot shows the listing of the `default` folder:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开其中一个配置文件，了解一下结构。下面的截图显示了`default`文件夹的列表：
- en: '![](img/84e26978-9be2-4e9f-ab3c-03562e8bab9c.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/84e26978-9be2-4e9f-ab3c-03562e8bab9c.png)'
- en: 'Let''s look at a breakdown of the directories in the preceding screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下前面截图中目录的详细情况：
- en: '`conf`: This directory contains config files, including `login-config` and `bootstrap
    config`.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conf`：这个目录包含配置文件，包括`login-config`和`bootstrap config`。'
- en: '`data`: This directory is available for services that store content in the
    filesystem.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`：这个目录可用于在文件系统中存储内容的服务。'
- en: '`deploy`: This directory contains the WAR files that are deployed on the server.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deploy`：这个目录包含在服务器上部署的WAR文件。'
- en: '`lib`: The `lib` directory is the default location for static Java libraries
    that are loaded to the shared classpath at startup.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lib`：`lib`目录是静态Java库的默认位置，在启动时加载到共享类路径中。'
- en: '`log`: This directory is where all the logs are written to.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log`：这个目录是所有日志写入的地方。'
- en: '`tmp`: This directory is used by JBoss to store temporary files.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tmp`：这个目录被JBoss用来存储临时文件。'
- en: '`work`: This directory contains the compiled JSP and class files.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`work`：这个目录包含编译后的JSP和类文件。'
- en: 'By going further into the `deploy` directory and listing the contents, we can
    see various WAR files, XML files, and so on, as in the following screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通过进一步进入`deploy`目录并列出内容，我们可以看到各种WAR文件、XML文件等，如下面的截图所示：
- en: '![](img/d67933e1-5126-4dd9-82a2-43c0c1952595.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d67933e1-5126-4dd9-82a2-43c0c1952595.png)'
- en: 'Some of the files we need to know about are as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要了解的一些文件包括：
- en: '`admin-console.war` is the admin console for JBoss AS.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admin-console.war`是JBoss AS的管理控制台。'
- en: '`ROOT.war` is the `/root` web application.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ROOT.war`是`/root` web应用程序。'
- en: '`jbossweb.sar` is the Tomcat servlet engine deployed on the server.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jbossweb.sar`是部署在服务器上的Tomcat servlet引擎。'
- en: '`jbossws.sar` is the JBoss service that supports web services.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jbossws.sar`是支持Web服务的JBoss服务。'
- en: Most of the time, we will find `admin-console` missing from the server as JBoss
    administrators remove the `admin-console`, `web-console`, and `JMX-console` applications
    from the server. Though it's a pretty neat way of protecting the JBoss instance,
    this won't work against threat actors. JBoss AS can also be managed using MBeans.
    Even though they are a feature for administrators, MBeans also work as a live
    door that allows actors to penetrate the network. To access MBeans, let's first
    learn about the file and directory structure, as that will help us learn how to
    access the MBeans in the process. The vast number of MBeans deployed in JBoss
    AS can be accessed directly via `JMX-console` and `web-console`, which raises
    many security concerns regarding deployment.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，我们会发现服务器上缺少`admin-console`，因为JBoss管理员会将`admin-console`、`web-console`和`JMX-console`应用程序从服务器中移除。尽管这是保护JBoss实例的一种很好的方式，但这对威胁行为者并不起作用。JBoss
    AS也可以使用MBeans进行管理。尽管它们是管理员的功能，但MBeans也可以作为允许行为者渗透网络的活门。要访问MBeans，让我们首先了解文件和目录结构，因为这将帮助我们学习如何在过程中访问MBeans。在JBoss
    AS中部署的大量MBeans可以直接通过`JMX-console`和`web-console`访问，这引发了许多关于部署安全性的担忧。
- en: Before jumping into the JBoss exploitation, let's first understand how we can
    perform reconnaissance and enumeration on a JBoss AS deployment.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究JBoss利用之前，让我们先了解如何在JBoss AS部署上执行侦察和枚举。
- en: Reconnaissance and enumeration
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 侦察和枚举
- en: In this section, we will focus on the reconnaissance and enumeration of JBoss
    servers. There are various methods for identifying a JBoss server, such as the
    fact that JBoss, by default, listens on HTTP port `8080`. Let's look at some common
    techniques used for JBoss reconnaissance.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将专注于对JBoss服务器的侦察和枚举。有各种方法可以识别JBoss服务器，比如默认情况下JBoss监听HTTP端口`8080`。让我们看一些用于JBoss侦察的常见技术。
- en: Detection via the home page
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过主页检测
- en: 'One of the very basic techniques we can use is to visit the web server home
    page, which shows the JBoss logo, as we can see in the following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用的一种非常基本的技术是访问Web服务器主页，该主页显示了JBoss的标志，如下截图所示：
- en: '![](img/383af0ec-3d7d-4c0b-a786-5b436de15814.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/383af0ec-3d7d-4c0b-a786-5b436de15814.png)'
- en: When we open the JBoss home page, the default JBoss setup shows other hyperlinks
    that we can browse to get further information.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们打开JBoss主页时，默认的JBoss设置会显示其他超链接，我们可以浏览以获取更多信息。
- en: Detection via the error page
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过错误页面进行检测
- en: 'There may be times where we find JBoss AS running on port `8080`, but the home
    page is unavailable. In cases like this, a `404` error page can also disclose
    the JBoss AS header and version number for the JBoss application instance in use:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候我们会发现JBoss AS运行在`8080`端口，但主页无法访问。在这种情况下，`404`错误页面也可以透露出JBoss AS的标头和版本号，用于正在使用的JBoss应用实例：
- en: '![](img/a3d569f5-541d-45bd-a026-9abdefd0186f.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a3d569f5-541d-45bd-a026-9abdefd0186f.png)'
- en: A `404` error page can be generated by opening any random non-existent link,
    which will give us an error, as we can see in the preceding screenshot.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通过打开任意不存在的链接可以生成一个`404`错误页面，这将给我们一个错误，如前面的截图所示。
- en: Detection via the title HTML tag
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过标题HTML标签进行检测
- en: 'There are some cases where, when we try to visit JBoss AS, we get a blank page.
    This generally happens to protect the home page from public exposure and unauthenticated
    access. As the home page contains quite valuable information, JBoss administrators
    tend to secure the page via reverse proxy authentication or by removing the JMX
    console, web console, and admin console from the application (as mentioned earlier
    in this chapter). These consoles will be discussed further in the scanning and
    exploitation phase of this chapter:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有些情况下，当我们尝试访问JBoss AS时，我们会得到一个空白页面。这通常是为了保护主页免受公开暴露和未经身份验证的访问。由于主页包含了相当有价值的信息，JBoss管理员倾向于通过反向代理身份验证或删除应用程序中的JMX控制台、Web控制台和管理控制台来保护页面（如本章前面提到的）。这些控制台将在本章的扫描和利用阶段进一步讨论：
- en: '![](img/7a5e1c1a-5c53-45a4-a568-17b3c08188e0.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7a5e1c1a-5c53-45a4-a568-17b3c08188e0.png)'
- en: If we get a blank page, we can still identify JBoss through the HTML `<title>` tag,
    which discloses some information in the page title, as in the preceding screenshot.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们得到一个空白页面，我们仍然可以通过HTML `<title>`标签来识别JBoss，该标签在页面标题中透露了一些信息，如前面的截图所示。
- en: Detection via X-Powered-By
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过X-Powered-By进行检测
- en: 'JBoss also discloses its version number and build information in the HTTP response
    headers, as in the following screenshot. We can locate the version and build information
    in the `X-Powered-By` HTTP response header. This is visible even when the admin
    console or web console is not accessible, as applications deployed in JBoss are
    not configured to hide the header:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: JBoss还在HTTP响应标头中透露了其版本号和构建信息，如下截图所示。我们可以在`X-Powered-By`HTTP响应标头中找到版本和构建信息。即使管理控制台或Web控制台不可访问，部署在JBoss中的应用程序也没有配置隐藏标头：
- en: '![](img/a40f3703-2f37-4a1a-90e3-df07a3b7a655.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a40f3703-2f37-4a1a-90e3-df07a3b7a655.png)'
- en: 'Most threat actors detect that JBoss AS is being used by searching the same
    header information on Shodan, Censys, and so on. At the time of writing this book,
    there are over 19,000 JBoss AS servers that are potentially exploitable if they
    are not securely configured:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数威胁行为者通过在Shodan、Censys等上搜索相同的标头信息来检测JBoss AS的使用。在撰写本书时，有超过19,000个JBoss AS服务器，如果它们没有得到安全配置，就有可能被利用：
- en: '![](img/81913347-fe18-4757-a1f7-86df23bc62e0.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81913347-fe18-4757-a1f7-86df23bc62e0.png)'
- en: Threat actors look for this information and run an automated scanner to find
    the vulnerable JBoss instances for exploitation. Once exploited, JBoss can open
    doors for actors to enter the network of an organization.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 威胁行为者寻找这些信息并运行自动化扫描程序，以找到易受攻击的JBoss实例。一旦被攻击，JBoss可以为行为者打开进入组织网络的大门。
- en: Detection via hashing favicon.ico
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过哈希值检测favicon.ico
- en: 'This technique is not commonly known to pen testers as it involves the hashing
    of an icon. This is actually another cool way of telling whether or not a server
    is running JBoss AS. We can MD5 hash the `favicon.ico` file (an icon file), as
    in the following screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术通常不为渗透测试人员所熟知，因为它涉及对图标进行哈希处理。这实际上是另一种很酷的方法，可以告诉我们服务器是否正在运行JBoss AS。我们可以对`favicon.ico`文件（一个图标文件）进行MD5哈希处理，如下截图所示：
- en: '![](img/f46a22d7-858c-4a61-875e-4bb9d5e33eab.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f46a22d7-858c-4a61-875e-4bb9d5e33eab.png)'
- en: 'Searching the hash in the OWASP favicon database will show us whether the server
    is running JBoss:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在OWASP favicon数据库中搜索哈希值将告诉我们服务器是否正在运行JBoss：
- en: '![](img/19585426-6fb8-4ff7-aab4-5dc6367921f0.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/19585426-6fb8-4ff7-aab4-5dc6367921f0.png)'
- en: As the OWASP favicon database is very limited, we could always create our own
    database to carry out this activity.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 由于OWASP favicon数据库非常有限，我们可以随时创建自己的数据库来执行此活动。
- en: Detection via stylesheets (CSS)
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过样式表（CSS）进行检测
- en: 'Looking at the HTML source code, we can see the JBoss stylesheet (`jboss.css`),
    shown in the following screenshot, which is a clear indication that JBoss AS is
    running:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 查看HTML源代码，我们可以看到JBoss样式表（`jboss.css`），如下截图所示，这清楚地表明了JBoss AS正在运行：
- en: '![](img/08288cdb-1e8b-4d85-9e0a-621bdb9e85e6.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/08288cdb-1e8b-4d85-9e0a-621bdb9e85e6.png)'
- en: Sometimes, the administrators change the naming conventions of the files for
    JBoss, but in the process of doing this, they forget to add the necessary security
    configuration. Now that we have manually gathered the information for identifying
    the use of a JBoss AS instance, let's try to identify the instance using Metasploit.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，管理员会更改JBoss文件的命名约定，但在这个过程中，他们忘记了添加必要的安全配置。现在我们已经手动收集了用于识别JBoss AS实例使用的信息，让我们尝试使用Metasploit来识别该实例。
- en: Carrying out a JBoss status scan using Metasploit
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit进行JBoss状态扫描
- en: 'Metasploit also has built-in auxiliary modules for JBoss enumeration, one of
    which is `auxiliary/scanner/http/jboss_status`. This module looks for the status
    page, which shows the status history of the application server running. We can
    use the following command in `msfconsole` to load the module:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit 还具有用于 JBoss 枚举的内置辅助模块，其中之一是 `auxiliary/scanner/http/jboss_status`。该模块寻找显示应用程序服务器运行状态历史的状态页面。我们可以在
    `msfconsole` 中使用以下命令加载该模块：
- en: '[PRE0]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了上述命令的输出：
- en: '![](img/3acf9452-ce65-41c5-bf1d-b923cc71e6a8.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3acf9452-ce65-41c5-bf1d-b923cc71e6a8.png)'
- en: 'The preceding screenshot shows the options required by the module to run the
    auxiliary. Once we set the options and then run the auxiliary, as in the following screenshot,
    the server will confirm that the application server is JBoss-based on the discovered
    status page:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图显示了运行辅助程序所需的选项。设置好选项后，然后像下面的截图中所示运行辅助程序，服务器将确认应用程序服务器是基于 JBoss 的，根据发现的状态页面：
- en: '![](img/2363aab6-03f9-4454-92a6-93660854f204.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2363aab6-03f9-4454-92a6-93660854f204.png)'
- en: 'The module looks for text on the page with the following regex:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块寻找页面上具有以下正则表达式的文本：
- en: '![](img/1da0987d-4a4a-4aaf-936c-ccc5ceb04b52.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1da0987d-4a4a-4aaf-936c-ccc5ceb04b52.png)'
- en: 'The module does the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块执行以下操作：
- en: It sends a `GET` request to the server to look for the `/status` page (the default
    page is set to the `Target_uri` option).
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它向服务器发送 `GET` 请求以查找 `/status` 页面（默认页面设置为 `Target_uri` 选项）。
- en: If it finds a `200 OK` response from the server, it looks for the `Tomcat Status` string in
    the HTML `<title>` tag.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果从服务器收到 `200 OK` 响应，它将在 HTML `<title>` 标签中查找 `Tomcat Status` 字符串。
- en: If the tag is found, the module looks for data according to the regex, as in
    the preceding screenshot.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果找到该标签，该模块将根据正则表达式查找数据，如上述截图所示。
- en: 'When the module executes, the source IP, destination IP, and called page are
    stored by JBoss. This information is then printed out. We can have a look for
    it in the `/status` page, as in the following screenshot:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当模块执行时，JBoss 会存储源 IP、目标 IP 和被调用页面。然后这些信息将被打印出来。我们可以在 `/status` 页面中查看它，就像下面的截图中所示：
- en: '![](img/00733b7e-31e2-4205-9d32-94011c998be8.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00733b7e-31e2-4205-9d32-94011c998be8.png)'
- en: The `jboss_status` module looks for this specific information to fingerprint
    the instance of JBoss AS.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`jboss_status` 模块寻找特定信息以对 JBoss AS 实例进行指纹识别。'
- en: JBoss service enumeration
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JBoss 服务枚举
- en: 'A list of services that run on **JBoss Web Service** (**JBoss WS**) can also
    provide us with information regarding the JBoss server:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 运行在 **JBoss Web Service** (**JBoss WS**) 上的服务列表也可以为我们提供有关 JBoss 服务器的信息：
- en: '![](img/600b4385-5873-433a-b708-aa099a4fd943.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/600b4385-5873-433a-b708-aa099a4fd943.png)'
- en: Opening the JBoss WS URI (that is, browsing to `/jbossws/services`) will confirm
    whether JBoss AS is running, as we can see in the preceding screenshot. Now that
    we have a better understanding of how to enumerate the JBoss running services
    and gather more information about them, let's move on to the next section, which
    will show us how we can perform a vulnerability scan on a JBoss AS instance.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 JBoss WS URI（即浏览到 `/jbossws/services`）将确认 JBoss AS 是否正在运行，正如我们在上述截图中所看到的。现在我们对如何枚举运行的
    JBoss 服务并收集更多信息有了更好的理解，让我们继续下一节，它将向我们展示如何对 JBoss AS 实例执行漏洞扫描。
- en: Performing a vulnerability assessment on JBoss AS
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对 JBoss AS 执行漏洞评估
- en: 'If we find a JBoss AS instance on a machine and we need to perform a vulnerability
    assessment, we can always use Metasploit for this. Metasploit has a module for
    this called `auxiliary/scanner/http/jboss_vulnscan`, which we can use to perform
    vulnerability scanning on JBoss AS. The module checks for a few vulnerabilities,
    such as authentication bypass, a default password, and accessible `JMX-console`
    functions. The following are the steps we can observe to carry out a vulnerability
    assessment on JBoss AS:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在一台机器上发现了 JBoss AS 实例，并且需要执行漏洞评估，我们总是可以使用 Metasploit。Metasploit 有一个名为 `auxiliary/scanner/http/jboss_vulnscan`
    的模块，我们可以使用它对 JBoss AS 执行漏洞扫描。该模块检查一些漏洞，例如身份验证绕过、默认密码和可访问的 `JMX-console` 功能。以下是我们可以观察到的在
    JBoss AS 上执行漏洞评估的步骤：
- en: 'To use `jboss_vulnscan`, we type the following command in `msfconsole`:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用 `jboss_vulnscan`，我们在 `msfconsole` 中输入以下命令：
- en: '[PRE1]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了上述命令的输出：
- en: '![](img/3060a4be-251b-4e9c-b921-a1c82423c429.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3060a4be-251b-4e9c-b921-a1c82423c429.png)'
- en: 'We set the required options, as shown:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置所需的选项，如下所示：
- en: '![](img/2d670cc4-6790-4484-bd47-c62f1828b7b6.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d670cc4-6790-4484-bd47-c62f1828b7b6.png)'
- en: 'Once we run the scanner, it will check against various vulnerabilities and
    report which vulnerabilities are found on the server, as shown:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行扫描程序后，它将检查各种漏洞，并报告在服务器上发现了哪些漏洞，如下所示：
- en: '![](img/ea198d8d-cd9b-4e04-910b-844c82716b3c.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ea198d8d-cd9b-4e04-910b-844c82716b3c.png)'
- en: This module looks through the specific files in the application and the Java
    naming services that are running on different ports.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块查找应用程序中的特定文件和在不同端口上运行的 Java 命名服务。
- en: Vulnerability scanning using JexBoss
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 JexBoss 进行漏洞扫描
- en: There is also another extremely powerful tool, called JexBoss, that is made
    for JBoss and other cases of technology enumeration and exploitation. It was developed
    by João F. M. Figueiredo. In this section, we will take a quick look at using
    JexBoss. The tool can be downloaded and installed at [https://github.com/joaomatosf/jexboss](https://github.com/joaomatosf/jexboss).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一个非常强大的工具，名为 JexBoss，专门用于 JBoss 和其他技术枚举和利用情况。它是由 João F. M. Figueiredo 开发的。在本节中，我们将简要介绍如何使用
    JexBoss。该工具可以在 [https://github.com/joaomatosf/jexboss](https://github.com/joaomatosf/jexboss)
    下载和安装。
- en: 'Once this is all set up, we can run the tool using the following command:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好这一切后，我们可以使用以下命令运行该工具：
- en: '[PRE2]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s use this tool (shown in the following screenshot) to find the vulnerabilities
    in a JBoss AS instance:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用这个工具（如下截图所示）来查找 JBoss AS 实例中的漏洞：
- en: '![](img/87b5d03a-1a69-40d7-91cc-f874878e9b15.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/87b5d03a-1a69-40d7-91cc-f874878e9b15.png)'
- en: The command used in the preceding screenshot will look for vulnerable Apache
    Tomcat Struts, servlet deserialization, and Jenkins. The tool will also check
    for various JBoss vulnerabilities and we will find out whether the server is vulnerable
    to any of them.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中使用的命令将寻找易受攻击的Apache Tomcat Struts、servlet反序列化和Jenkins。该工具还将检查各种JBoss漏洞，我们将找出服务器是否易受其中任何漏洞的影响。
- en: Vulnerable JBoss entry points
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 易受攻击的JBoss入口点
- en: 'As we know, JBoss comes with a number of fully functional and operational add-ons
    and extensions, such as JNDI, JMX and JMS so the number of possible entry points
    for JBoss exploitation increases accordingly. The following table lists the vulnerable
    MBeans, with their respective service and method names, that can be used for JBoss
    reconnaissance and exploitation:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知，JBoss配备了许多功能齐全和运行良好的附加组件和扩展，如JNDI、JMX和JMS，因此JBoss利用的可能入口点数量相应增加。以下表格列出了易受攻击的MBean及其相应的服务和方法名称，可用于JBoss侦察和利用：
- en: '| **Category** | **MBean domain name** | **MBean service name** | **MBean method
    name** | **MBean method description** |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| **类别** | **MBean域名** | **MBean服务名称** | **MBean方法名称** | **MBean方法描述** |'
- en: '| Exploitation | `jboss.system` | `MainDeployer` | `deploy()`, `undeploy()`,
    and `redeploy()` | The `deploy()` method is used to deploy the applications. The
    `undeploy()` method is used to un-deploy the deployed application.The `redeploy()`
    method is used by the server to redeploy the deployed application stored in the
    server itself (the local file). |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| 利用 | `jboss.system` | `MainDeployer` | `deploy()`、`undeploy()`和`redeploy()`
    | `deploy()`方法用于部署应用程序。`undeploy()`方法用于取消部署已部署的应用程序。`redeploy()`方法用于服务器重新部署存储在服务器本身（本地文件）的已部署应用程序。'
- en: '| Reconnaissance | `jboss.system` | `Server` | `exit()`, `shutdown()`, and`halt()`
    | The `exit()`, `shutdown()`, and `halt()` methods are quite dangerous methods.
    A threat actor can use these methods to disrupt the service by shutting down the
    application server. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| 侦察 | `jboss.system` | `Server` | `exit()`、`shutdown()`和`halt()` | `exit()`、`shutdown()`和`halt()`方法是非常危险的方法。威胁行为者可以使用这些方法关闭应用程序服务器以中断服务。'
- en: '| Reconnaissance | `jboss.system` | `ServerInfo` | N/A | N/A |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| 侦察 | `jboss.system` | `ServerInfo` | N/A | N/A |'
- en: '| Reconnaissance | `jboss.system` | `ServerConfig` | N/A | N/A |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| 侦察 | `jboss.system` | `ServerConfig` | N/A | N/A |'
- en: '| Exploitation | `jboss.deployment` | `DeploymentScanner` | `addURL()` and`listDeployedURLs()`
    | The `addURL()` method is used to add a remote/local application by URL for the
    deployment.The `listDeploymentURLs()` method is used to list all the previously
    deployed applications with their URLs. This method is helpful for finding out
    whether the current JBoss AS instance has already been exploited. |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| 利用 | `jboss.deployment` | `DeploymentScanner` | `addURL()`和`listDeployedURLs()`
    | `addURL()`方法用于通过URL添加远程/本地应用程序进行部署。`listDeploymentURLs()`方法用于列出所有先前部署的应用程序及其URL。此方法有助于查找当前的JBoss
    AS实例是否已被利用。'
- en: '| Exploitation | `jboss.deployer` | `BSHDeployer` | `createScriptDeployment()`,`deploy()`,`undeploy()`,
    and`redeploy()` | The `createScriptDeployment()` method is used to deploy the
    application via a **Bean Shell** (**BSH**) script. The script content should be
    mentioned in this method for deployment. The MBean then creates a temporary file
    with a `.bsh` extension, which will be used for the deployment.The `deploy()`,
    `undeploy()`, and `redeploy()` methods are used to manage the deployment using
    BSH scripts. |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| 利用 | `jboss.deployer` | `BSHDeployer` | `createScriptDeployment()`、`deploy()`、`undeploy()`和`redeploy()`
    | `createScriptDeployment()`方法用于通过**Bean Shell**（**BSH**）脚本部署应用程序。脚本内容应在此方法中提及以进行部署。然后MBean创建一个带有`.bsh`扩展名的临时文件，该文件将用于部署。`deploy()`、`undeploy()`和`redeploy()`方法用于使用BSH脚本管理部署。'
- en: '| Exploitation | `jboss.admin` | `DeploymentFileRepository` | `store()` | The
    `store()` method is used by the deployer to store the filename with its extension,
    folder name, and timestamp. A threat actor just needs to mention the WAR file
    with the aforementioned information and the payload will be directly deployed
    on the server. |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| 利用 | `jboss.admin` | `DeploymentFileRepository` | `store()` | `store()`方法被部署者用于存储文件名及其扩展名、文件夹名和时间戳。威胁行为者只需提到具有上述信息的WAR文件，有效载荷将直接部署在服务器上。
    |'
- en: The `MainDeployer` MBean is the deployment entry point and all the requests
    for component deployment are sent over to `MainDeployer`. `MainDeployer` can deploy
    WAR archives, **JARs**, **Enterprise Application Archives** (**EARs**), **Resource
    Archives** (**RARs**), **Hibernate Archives** (**HARs**), **Service Archives**
    (**SARs**), **BSHes**, and many other deployment packages.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`MainDeployer` MBean是部署的入口点，所有组件部署的请求都发送到`MainDeployer`。`MainDeployer`可以部署WAR存档、**JARs**、**企业应用程序存档**（**EARs**）、**资源存档**（**RARs**）、**Hibernate存档**（**HARs**）、**服务存档**（**SARs**）、**BSHes**和许多其他部署包。'
- en: JBoss exploitation
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JBoss利用
- en: 'Now that we have a clear understanding of JBoss''s reconnaissance and vulnerability
    scanning capabilities, let''s learn about JBoss exploitation. A few basic methods
    that we can use to exploit JBoss are as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们清楚了JBoss的侦察和漏洞扫描能力，让我们了解一下JBoss的利用。我们可以用以下几种基本方法来利用JBoss：
- en: JBoss exploitation via the **administration console** (`admin-console`)
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JBoss利用通过**管理控制台**（`admin-console`）
- en: JBoss exploitation via the JMX console using the `MainDeployer` service
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`MainDeployer`服务利用JBoss的JMX控制台
- en: JBoss exploitation via the JMX console using the `MainDeployer` service (the
    Metasploit version)
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JBoss利用通过JMX控制台使用`MainDeployer`服务（Metasploit版本）
- en: JBoss exploitation via the JMX console using the `BSHDeployer` service
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JBoss利用通过JMX控制台使用`BSHDeployer`服务
- en: JBoss exploitation via the JMX console using the `BSHDeployer` service (the
    Metasploit version)
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`BSHDeployer`服务（Metasploit版本）利用JBoss的JMX控制台
- en: JBoss exploitation via the web console using a Java applet
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Java小程序利用JBoss的Web控制台
- en: JBoss exploitation via the web console using the `Invoker` method
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`Invoker`方法利用JBoss的Web控制台
- en: JBoss exploitation via the web console using third-party tools
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过第三方工具使用Web控制台进行JBoss利用
- en: Let's go through each of these methods for exploitation.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐个了解这些利用方法。
- en: JBoss exploitation via the administration console
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JBoss通过管理控制台进行利用
- en: 'In this section, we will begin the exploitation process. The first step is
    to get access to the administration console, which, by default, is configured
    with a username and password of `admin` and `admin`, respectively. The following
    screenshot shows the administration login page:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将开始利用过程。第一步是访问管理控制台，默认情况下配置的用户名和密码分别为`admin`和`admin`。下图显示了管理登录页面：
- en: '![](img/7a9e93c7-7c86-490b-b096-07b77df25442.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7a9e93c7-7c86-490b-b096-07b77df25442.png)'
- en: 'Once we have successfully logged in, we will see the page shown in the following
    screenshot:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们成功登录，我们将看到下图所示的页面：
- en: '![](img/e8daf257-f5cd-456d-a794-cddce4600c40.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e8daf257-f5cd-456d-a794-cddce4600c40.png)'
- en: 'The next step for the exploitation is finding a way to execute commands on
    the server so that we get server-level access. From the left-hand side menu, choose
    the Web Application (WAR) option and you will be redirected to the page shown
    in the following screenshot. We will click on the Add a new resource button:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 利用的下一步是找到一种在服务器上执行命令的方法，以便我们获得服务器级别的访问权限。从左侧菜单中选择Web应用程序（WAR）选项，您将被重定向到下图所示的页面。我们将点击“添加新资源”按钮：
- en: '![](img/06cb8a26-8af6-4c99-afe0-2f617bd5a053.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/06cb8a26-8af6-4c99-afe0-2f617bd5a053.png)'
- en: 'This will take us to a new page, where we will be presented with the option
    of uploading a WAR file. A WAR file can be generated by using `msfvenom` with
    the following command:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '这将带我们到一个新页面，在那里我们将看到上传WAR文件的选项。可以使用以下命令使用`msfvenom`生成WAR文件： '
- en: '[PRE3]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once we have generated the WAR-based Metasploit payload, we''ll upload the
    file to the Web Application (WAR) section of the console, as you can see in the following
    screenshot:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们生成了基于WAR的Metasploit有效载荷，我们将把文件上传到控制台的Web应用程序（WAR）部分，如下图所示：
- en: '![](img/ecada5d0-cd8f-4a8f-a965-fa3c580e165d.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ecada5d0-cd8f-4a8f-a965-fa3c580e165d.png)'
- en: 'Once the file has been uploaded successfully, we just need to go to the directory
    it was extracted to and open it on our web browser to get a Meterpreter connection,
    as in the following screenshot:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦文件成功上传，我们只需要转到它被提取到的目录，并在我们的Web浏览器上打开它以获取Meterpreter连接，如下图所示：
- en: '![](img/3ed42436-8f10-4367-bfb6-beea5686b4ff.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ed42436-8f10-4367-bfb6-beea5686b4ff.png)'
- en: There are a few things that we need to consider before running the payload,
    the most important being to check the egress connection. If the payload is executed
    but the firewall is blocking egress traffic (outbound connections) to our server,
    we'll need to find a way to get a reverse shell. If there's no way of getting
    this, we can always opt for a bind connection to the server.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行有效载荷之前，有一些需要考虑的事情，最重要的是检查出口连接。如果有效载荷被执行，但防火墙阻止对我们服务器的出口流量（出站连接），我们需要找到一种方法来获取反向shell。如果没有办法做到这一点，我们总是可以选择绑定连接到服务器。
- en: Exploitation via the JMX console (the MainDeployer method)
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过JMX控制台进行利用（MainDeployer方法）
- en: 'Consider the following quote from the official JBoss documentation (available
    at [https://docs.jboss.org/jbossas/docs/Getting_Started_Guide/4/html-single/index.html](https://docs.jboss.org/jbossas/docs/Getting_Started_Guide/4/html-single/index.html)):'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 请考虑来自官方JBoss文档的以下引用（可在[https://docs.jboss.org/jbossas/docs/Getting_Started_Guide/4/html-single/index.html](https://docs.jboss.org/jbossas/docs/Getting_Started_Guide/4/html-single/index.html)找到）：
- en: '"The JMX Console is the JBoss Management Console, which provides a raw view
    of the JMX MBeans that make up the server. They can provide a lot of information
    about the running server and allow you to modify its configuration, start and
    stop components, and so on."'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: “JMX控制台是JBoss管理控制台，它提供了服务器组成的JMX MBeans的原始视图。它们可以提供有关运行服务器的大量信息，并允许您修改其配置，启动和停止组件等。”
- en: 'If we find an open instance of JBoss with unauthenticated access to the JMX
    console, we can upload the shell to the server using the `MainDeployer` option.
    This allows us to fetch a WAR file from a URL and deploy it on the server. The
    JMX console is shown in the following screenshot:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们发现JBoss有未经身份验证访问JMX控制台的实例，我们可以使用`MainDeployer`选项将shell上传到服务器。这允许我们从远程URL获取WAR文件并在服务器上部署它。JMX控制台如下图所示：
- en: '![](img/da21be8d-8f8d-42a9-923a-0c5f1a44a8d0.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da21be8d-8f8d-42a9-923a-0c5f1a44a8d0.png)'
- en: 'Let''s implement the following steps for exploitation:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实施以下利用步骤：
- en: 'On the console page, search for the `MainDeployer` service option, as shown:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台页面上，搜索`MainDeployer`服务选项，如下所示：
- en: '![](img/3b40d6fa-23e8-4864-8d47-c6ae46bc102f.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3b40d6fa-23e8-4864-8d47-c6ae46bc102f.png)'
- en: 'Clicking on the option will redirect us to a new page, as shown:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击该选项将重定向我们到一个新页面，如下所示：
- en: '![](img/9347d1f8-33e1-43ce-994d-a4e8518682ee.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9347d1f8-33e1-43ce-994d-a4e8518682ee.png)'
- en: 'By scrolling further down the page, we will see multiple `deploy` methods.
    Choose the `URL Deploy` method, which will allow us to fetch a WAR file from a
    remote URL:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动页面，我们将看到多个`deploy`方法。选择`URL Deploy`方法，这将允许我们从远程URL获取WAR文件：
- en: '![](img/ccef5707-375f-4b50-9229-2fb75bd3e477.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ccef5707-375f-4b50-9229-2fb75bd3e477.png)'
- en: 'Let''s generate a WAR-based Metasploit payload using the following command:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令生成基于WAR的Metasploit有效载荷：
- en: '[PRE4]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We now need to host the WAR file on an HTTP server and paste the URL in the
    input field, as shown:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要将WAR文件托管在HTTP服务器上，并将URL粘贴到输入字段中，如下所示：
- en: '![](img/6f90207a-c92b-435d-b963-ae52e389f404.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6f90207a-c92b-435d-b963-ae52e389f404.png)'
- en: 'Let''s set our exploit handler as shown:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们设置我们的利用处理程序如下所示：
- en: '![](img/cf918cfe-c4ba-4ca3-b9dd-38ffb5f1dec0.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cf918cfe-c4ba-4ca3-b9dd-38ffb5f1dec0.png)'
- en: 'Once it has been successfully invoked, we will get the following message from
    the server:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦成功调用，我们将从服务器收到以下消息：
- en: '![](img/9dba5cbf-d778-4ec8-b3e6-d192e8f23c6c.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9dba5cbf-d778-4ec8-b3e6-d192e8f23c6c.png)'
- en: Our `s.war` payload has been deployed.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`s.war`有效载荷已部署。
- en: 'Next up, we need to find the correct stager name so that we can call the file.
    Let''s decompress the file generated by Metasploit, as shown:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要找到正确的stager名称，以便我们可以调用文件。让我们解压Metasploit生成的文件，如下所示：
- en: '![](img/4b56ef15-5785-4e95-93f8-94b83d0fd255.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4b56ef15-5785-4e95-93f8-94b83d0fd255.png)'
- en: 'We locate the servlet name in the `web.xml` file:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`web.xml`文件中找到servlet名称：
- en: '![](img/f359e8a9-319e-462b-81ed-3a05cee2c4cd.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f359e8a9-319e-462b-81ed-3a05cee2c4cd.png)'
- en: 'Let''s call the payload by adding the servlet name to the URL, as shown in
    the following screenshot:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过将servlet名称添加到URL来调用有效载荷，如下所示的屏幕截图：
- en: '![](img/46b190cd-4419-4691-bb2c-db1259a6d88b.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/46b190cd-4419-4691-bb2c-db1259a6d88b.png)'
- en: 'The output will be blank, but we can check the stager request on our Metasploit
    exploit handler, as shown:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出将为空，但我们可以在我们的Metasploit exploit处理程序上检查stager请求，如下所示：
- en: '![](img/5e887d77-945c-4ecc-a6e0-dde180f307a0.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e887d77-945c-4ecc-a6e0-dde180f307a0.png)'
- en: It's always better to customize the WAR file and obfuscate the contents using
    commonly known techniques. Also, to help further avoid detection, we need to change
    the filename from a random name to a more specific and common name, such as `login.jsp`,
    `about.jsp`, or `logout.jsp`.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 最好自定义WAR文件并使用常见的技术对内容进行混淆。此外，为了帮助进一步避免检测，我们需要将文件名从随机名称更改为更具体和常见的名称，例如`login.jsp`，`about.jsp`或`logout.jsp`。
- en: Exploitation via the JMX console using Metasploit (MainDeployer)
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过使用Metasploit通过JMX控制台进行利用（MainDeployer）
- en: 'Metasploit also has an inbuilt exploit module that can be used to exploit the
    JMX console using the `MainDeployer` method. Let''s now use the Metasploit module
    to upload a shell via the JMX console. We load the exploit by using the following
    command:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit还具有内置的利用模块，可用于使用`MainDeployer`方法利用JMX控制台。现在让我们使用Metasploit模块通过JMX控制台上传shell。我们使用以下命令加载利用程序：
- en: '[PRE5]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We will see the following available options:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到以下可用选项：
- en: '![](img/5155d221-364a-41ae-9d39-24f241fb867f.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5155d221-364a-41ae-9d39-24f241fb867f.png)'
- en: 'We can set the required options, such as `rhosts`, and `rport` as shown:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以设置所需的选项，如`rhosts`和`rport`，如下所示：
- en: '![](img/606df825-72af-4280-a36b-87e3aec54dbe.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/606df825-72af-4280-a36b-87e3aec54dbe.png)'
- en: 'When everything is set, we can run the exploit and Metasploit will perform
    the same steps that we carried out manually in the previous section to give us
    Meterpreter access on the server, as shown:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 当一切都设置好后，我们可以运行利用程序，Metasploit将执行我们在上一节手动执行的相同步骤，以便在服务器上为我们提供Meterpreter访问，如下所示：
- en: '![](img/e218a9e1-c77c-4a1f-9e65-74a1519e4ba9.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e218a9e1-c77c-4a1f-9e65-74a1519e4ba9.png)'
- en: Sometimes, the module may not work if the JMX console is protected with authentication.
    We can always try to perform a dictionary attack on the authentication and, if
    successful, we can use the username and password (found during the dictionary
    attack) on this module by setting up the `HttpUsername` and `HttpPassword` options.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，如果JMX控制台受到身份验证保护，模块可能无法工作。我们可以尝试对身份验证进行字典攻击，如果成功，我们可以使用用户名和密码（在字典攻击期间找到）在此模块上设置`HttpUsername`和`HttpPassword`选项。
- en: Exploitation via the JMX console (BSHDeployer)
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过JMX控制台（BSHDeployer）进行利用
- en: 'Another way to achieve code execution on JBoss via the JMX console is by using
    the **BeanShell Deployer** (`BSHDeployer`). `BSHDeployer` allows us to deploy
    one-time execution scripts and services in JBoss in the form of a Bean shell script. After
    getting access to the JMX console, we can look for the `service=BSHDeployer` object
    name, as shown:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用**BeanShell Deployer**（`BSHDeployer`）在JMX控制台上实现代码执行的另一种方法。`BSHDeployer`允许我们在JBoss中以Bean
    shell脚本的形式部署一次执行脚本和服务。在获得对JMX控制台的访问后，我们可以查找`service=BSHDeployer`对象名称，如下所示：
- en: '![](img/975f3cf3-7107-4a51-b1c1-13d90527ec8a.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](img/975f3cf3-7107-4a51-b1c1-13d90527ec8a.png)'
- en: 'Clicking on this object will redirect us to the deployer page, as shown:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 单击此对象将重定向我们到部署页面，如下所示：
- en: '![](img/68f238ba-364c-44a1-8aba-74700f25fba1.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![](img/68f238ba-364c-44a1-8aba-74700f25fba1.png)'
- en: Here, we need to put the URL of the BSH file that will be used to deploy our
    payload on the server. An easy way would be to use the third-party tools for exploitation
    via `BSHDeployer`, such as JexBoss. This can also be achieved using Metasploit,
    as we will see now.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们需要放置将用于在服务器上部署我们的有效载荷的BSH文件的URL。一个简单的方法是使用第三方工具进行通过`BSHDeployer`的利用，例如JexBoss。这也可以使用Metasploit来实现，我们将在下面看到。
- en: Exploitation via the JMX console using Metasploit (BSHDeployer)
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过使用Metasploit通过JMX控制台进行利用（BSHDeployer）
- en: 'Metasploit can also be used to deploy a BSH to achieve code execution on the
    server. Metasploit has the `jboss_bshdeployer` exploit module for this purpose,
    so let''s look at its usage. We can load the exploit in `msfconsole` using the
    following command:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit也可以用于部署BSH以在服务器上实现代码执行。Metasploit具有用于此目的的`jboss_bshdeployer`利用模块，让我们看一下它的用法。我们可以使用以下命令在`msfconsole`中加载利用程序：
- en: '[PRE6]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To view the list of options, we need to type `show options`, as shown:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看选项列表，我们需要输入`show options`，如下所示：
- en: '![](img/9dedc6e9-677f-49e2-b587-c0a539c7f596.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9dedc6e9-677f-49e2-b587-c0a539c7f596.png)'
- en: 'We need to then set the respective options before running the exploit, as shown:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要在运行利用程序之前设置相应的选项，如下所示：
- en: '![](img/c21b1280-eec3-40b8-9e11-a1349c930fbd.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c21b1280-eec3-40b8-9e11-a1349c930fbd.png)'
- en: We need to set the payload that we're using in this module (by default, `java/meterpreter/reverse_tcp`).
    A universal option is to use the Java-based Meterpreter, but in cases where the
    Java payload doesn't work, we can always try to use the payload based on the OS
    flavor and architecture.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要设置在此模块中使用的有效载荷（默认情况下为`java/meterpreter/reverse_tcp`）。一个通用的选项是使用基于Java的Meterpreter，但在Java有效载荷不起作用的情况下，我们可以尝试使用基于操作系统风格和架构的有效载荷。
- en: 'Upon running the exploit, Metasploit will create a BSH script and call the
    deployer, which will then deploy and extract the shellcode. Calling the JSP shellcode
    will execute our payload and we will get a reverse connection, as shown:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 运行利用程序后，Metasploit将创建一个BSH脚本并调用部署程序，然后部署和提取shellcode。调用JSP shellcode将执行我们的有效载荷，我们将获得一个反向连接，如下所示：
- en: '![](img/fbb060ac-cad8-482e-8a69-0991b64a72b3.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fbb060ac-cad8-482e-8a69-0991b64a72b3.png)'
- en: Now that we know how to exploit the JMX console via `BSHDeployer`, let's look
    at exploiting through the web console.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何通过`BSHDeployer`利用JMX控制台，让我们看看如何通过web控制台进行利用。
- en: Exploitation via the web console (Java applet)
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过web控制台（Java小程序）进行利用
- en: 'In this section, we will discuss the JBoss web console. Note that the JBoss
    web console has been deprecated and was replaced with the administration console,
    but it is still useful to us because, on older versions of the JBoss server, the
    web console can still be exploited. We may also face some errors while opening
    the web console in the browser, as shown:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论JBoss web控制台。请注意，JBoss web控制台已被弃用，并已被管理控制台取代，但对我们仍然有用，因为在旧版本的JBoss服务器上，仍然可以利用web控制台。在浏览器中打开web控制台时，我们可能也会遇到一些错误，如下所示：
- en: '![](img/20baf348-48f0-459a-b576-f11d5001b481.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](img/20baf348-48f0-459a-b576-f11d5001b481.png)'
- en: 'To allow the applet to run, we need to change our Java security settings and
    add the domain name and IP address of the JBoss instance to the Java exception
    site list, as shown:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 为了允许小程序运行，我们需要更改我们的Java安全设置，并将JBoss实例的域名和IP地址添加到Java例外站点列表中，如下所示：
- en: '![](img/ccd29179-d62c-4411-861f-0cd71f15d637.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ccd29179-d62c-4411-861f-0cd71f15d637.png)'
- en: 'Once the exception is added, we will still get a warning from the browser,
    but we can go ahead and click Continue, as shown:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦异常被添加，我们仍然会收到浏览器的警告，但我们可以继续单击“继续”，如下所示：
- en: '![](img/f8a310a3-7e60-4c68-95db-96ecdffd36df.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f8a310a3-7e60-4c68-95db-96ecdffd36df.png)'
- en: 'In the next popup, we need to click on the Run button to allow the application
    to run, as shown:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个弹出窗口中，我们需要单击“运行”按钮以允许应用程序运行，如下所示：
- en: '![](img/e9f7d898-883a-4222-a781-84bc0316f70c.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e9f7d898-883a-4222-a781-84bc0316f70c.png)'
- en: 'We are then presented with the web console of the JBoss server. Here, we can
    continue with the same steps that we covered in the previous section to upload
    the shell using `MainDeployer`. As the following screenshot shows, all we need
    to do is find and select the object in the left-hand side pane:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们会看到JBoss服务器的web控制台。在这里，我们可以继续上一节中介绍的相同步骤，使用`MainDeployer`上传shell。如下截图所示，我们只需要在左侧窗格中找到并选择对象即可：
- en: '![](img/9bc50662-0832-410d-9561-8e0edee2ce7f.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9bc50662-0832-410d-9561-8e0edee2ce7f.png)'
- en: 'Clicking on the `MainDeployer` item will take us to the page where the WAR
    file can be deployed on the server to achieve code execution, as shown:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 单击`MainDeployer`项目将带我们到可以在服务器上部署WAR文件以实现代码执行的页面，如下所示：
- en: '![](img/2a28a7cd-23a9-476d-85a2-c8b1c10f47bf.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a28a7cd-23a9-476d-85a2-c8b1c10f47bf.png)'
- en: By default, running Java applets is disabled in most browsers, so sometimes,
    when visiting the web console page on the discovery of a JBoss server, we may
    just get a blank page. Encountering a blank page while opening the web console
    does not mean that the service is not accessible. It just means that we have to
    tweak our browsers a little to allow the Java applet execution.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，大多数浏览器禁用了运行Java小程序，因此有时，在发现JBoss服务器的web控制台页面时，我们可能只会得到一个空白页面。在打开web控制台时遇到空白页面并不意味着服务不可访问。这只意味着我们需要稍微调整我们的浏览器以允许Java小程序的执行。
- en: Exploitation via the web console (the Invoker method)
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过web控制台进行利用（Invoker方法）
- en: 'Another way of exploiting a JBoss AS instance is via the web console''s `Invoker`
    method. Executing a `curl` command while requesting the `/web-console/Invoker`
    URI path will get us a response from the server with the `0xAC` and `0xED` hex
    code characters (`aced`) in the first 4 bytes of the file. We can see this at
    the beginning of any Java serialized object, as follows:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 利用JBoss AS实例的另一种方法是通过web控制台的`Invoker`方法。在请求`/web-console/Invoker` URI路径时执行`curl`命令将从服务器获取响应，文件的前4个字节中包含`0xAC`和`0xED`十六进制代码字符（`aced`）。我们可以在任何Java序列化对象的开头看到这一点，如下所示：
- en: '![](img/3c98d94d-5f14-4cf6-b9fd-5cf86b1bfb2b.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c98d94d-5f14-4cf6-b9fd-5cf86b1bfb2b.png)'
- en: The `Invoker` servlet can be found in the web console or `Invoker` at `http://example.com/web-console/Invoker`. This
    can mostly be accessed without authentication. We can send a serialized post request
    to this `Invoker` to execute commands on the server.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`Invoker` servlet可以在web控制台或`Invoker`的`http://example.com/web-console/Invoker`中找到。这可以在大多数情况下无需身份验证访问。我们可以向这个`Invoker`发送序列化的post请求来在服务器上执行命令。'
- en: 'Here''s the breakdown of the bytes in the preceding screenshot:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面截图中字节的分解：
- en: '**ac ed**: `STREAM_MAGIC`specifies that this is a serialization protocol.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'ac ed: `STREAM_MAGIC`指定这是一个序列化协议。'
- en: '**00 o5**: `STREAM_VERSION` specifies the serialization version in use.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '00 o5: `STREAM_VERSION`指定正在使用的序列化版本。'
- en: '**0x73**: `TC_OBJECT` specifies that this is a new object.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '0x73: `TC_OBJECT`指定这是一个新对象。'
- en: '**0x72**: `TC_CLASSDESC` specifies that this is a new class.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '0x72: `TC_CLASSDESC`指定这是一个新类。'
- en: '**00 24**: This specifies the length of the class name.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '00 24: 这指定了类名的长度。'
- en: '**{6F 72 67 2E 6A 62 6F 73 ****73 2E 69 6E 76 6F 63 61** **74 69 ****6F 6E
    2E 4D 61 72 ****73 68 61 6C 6C 65 64 56** **61 6C 75 65}** **org.jboss. invocation.MarshalledValue**:
    This specifies the class name.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '{6F 72 67 2E 6A 62 6F 73 ****73 2E 69 6E 76 6F 63 61** **74 69 ****6F 6E 2E
    4D 61 72 ****73 68 61 6C 6C 65 64 56** **61 6C 75 65} **org.jboss. invocation.MarshalledValue**:
    这指定了类名。'
- en: '**EA CC E0 D1 F4 4A D0 99**: `SerialVersionUID` specifies the serial version
    identifier of this class.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'EA CC E0 D1 F4 4A D0 99: `SerialVersionUID`指定了这个类的序列版本标识符。'
- en: '**0x0C**: This specifies the tag number.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '0x0C: 这指定了标记号。'
- en: '**00 00**: This specifies the number of fields in this class.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '00 00: 这指定了这个类中字段的数量。'
- en: '**0x78**: `TC_ENDBLOCKDATA` marks the end of block objects.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '0x78: `TC_ENDBLOCKDATA`标记块对象的结束。'
- en: '**0x70**: `TC_NULL` represents the fact that there are no more superclasses
    because we have reached the top of the class hierarchy.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '0x70: `TC_NULL`表示没有更多的超类，因为我们已经到达了类层次结构的顶部。'
- en: Exploitation via the web console using a third-party tool.
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用第三方工具通过web控制台进行利用。
- en: Before jumping into Metasploit's module, let's look at another set of scripts
    developed by RedTeam Pentesting. The archive can be downloaded from their website
    at [https://www.redteam-pentesting.de/files/redteam-jboss.tar.gz](https://www.redteam-pentesting.de/files/redteam-jboss.tar.gz).
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在跳入Metasploit的模块之前，让我们看看RedTeam Pentesting开发的另一组脚本。存档可以从他们的网站[https://www.redteam-pentesting.de/files/redteam-jboss.tar.gz](https://www.redteam-pentesting.de/files/redteam-jboss.tar.gz)下载。
- en: 'The archive contains the following files:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 存档包含以下文件：
- en: '`BeanShellDeployer/mkbeanshell.rb`'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BeanShellDeployer/mkbeanshell.rb`'
- en: '`WAR/shell.jsp`'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WAR/shell.jsp`'
- en: '`WAR/WEB-INF/web.xml`'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WAR/WEB-INF/web.xml`'
- en: '`Webconsole-Invoker/webconsole_invoker.rb`'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Webconsole-Invoker/webconsole_invoker.rb`'
- en: '`JMXInvokerServlet/http_invoker.rb`'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JMXInvokerServlet/http_invoker.rb`'
- en: '`JMXInvokerServlet/jmxinvokerservlet.rb`'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JMXInvokerServlet/jmxinvokerservlet.rb`'
- en: '`jboss_jars/console-mgr-classes.jar`'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jboss_jars/console-mgr-classes.jar`'
- en: '`jboss_jars/jbossall-client.jar`'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jboss_jars/jbossall-client.jar`'
- en: '`README`'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`README`'
- en: '`setpath.sh`'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setpath.sh`'
- en: '`Rakefile`'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Rakefile`'
- en: 'The following screenshot shows the different scripts released by the team:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了团队发布的不同脚本：
- en: '![](img/4f60675d-1e68-4d79-9cc7-2163291ca60f.png)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4f60675d-1e68-4d79-9cc7-2163291ca60f.png)'
- en: We can use this tool to create custom BSH scripts, deploy the BSH scripts via
    the web console `Invoker`, create a `JMXInvokerServlet` payload, and so on. Let's
    see how we can use this tool to create a BSH script.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这个工具创建自定义的BSH脚本，通过web控制台`Invoker`部署BSH脚本，创建`JMXInvokerServlet`负载等。让我们看看如何使用这个工具创建BSH脚本。
- en: Creating BSH scripts
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建BSH脚本
- en: 'One of the scripts in the archive is `mkbeanshell`. This script takes a WAR
    file as input and then creates a BSH script as output:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 存档中的一个脚本是`mkbeanshell`。该脚本以WAR文件作为输入，然后将BSH脚本作为输出创建：
- en: 'We can see a list of all options available to us  by executing the script with
    the `-h` flag, as shown:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用`-h`标志执行脚本，我们可以看到所有可用的选项列表，如下所示：
- en: '![](img/7fad0f3f-500d-4b6a-8e11-7dfe499d7766.png)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7fad0f3f-500d-4b6a-8e11-7dfe499d7766.png)'
- en: 'Now, we can create a BSH using the following command:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以使用以下命令创建BSH：
- en: '[PRE7]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output of the command (that is, the BSH script) will be saved in the output
    file, which is mentioned in the preceding command. In this case, the file created
    is `redteam.bsh`, as we can see in the following screenshot:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的输出（即BSH脚本）将保存在前面命令中提到的输出文件中。在这种情况下，创建的文件是`redteam.bsh`，如下截图所示：
- en: '![](img/89703368-2469-4027-8d97-42cea710a66c.png)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![](img/89703368-2469-4027-8d97-42cea710a66c.png)'
- en: 'The source file (that is, the WAR file used, in this case) is the generic payload
    file. Inside this WAR file is our JSP web shell, whose content can be seen in
    the following screenshot:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 源文件（即在本例中使用的WAR文件）是通用的负载文件。在这个WAR文件中是我们的JSP web shell，其内容可以在下面的截图中看到：
- en: '![](img/17f1b6ff-1cc5-4e12-8660-6f946de3bdf2.png)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17f1b6ff-1cc5-4e12-8660-6f946de3bdf2.png)'
- en: 'By default, if we open the BSH script that was created, we will see that it
    uses the `/tmp/` directory on the server to extract and deploy the WAR archive.
    Now, Windows servers do not have the `/tmp/` directory, and the `mkbeanshell` Ruby
    script only has the option to alter the path and, in most cases, we may not know
    the path on the server at all. The following screenshot shows the BSH script''s
    code:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，如果我们打开创建的BSH脚本，我们会看到它在服务器上使用`/tmp/`目录来提取和部署WAR存档。现在，Windows服务器没有`/tmp/`目录，而`mkbeanshell`
    Ruby脚本只有更改路径的选项，在大多数情况下，我们可能根本不知道服务器上的路径。下面的截图显示了BSH脚本的代码：
- en: '![](img/de424d35-8b7e-46da-a552-42f6f6cbffa0.png)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de424d35-8b7e-46da-a552-42f6f6cbffa0.png)'
- en: 'We can replace the last lines of code (in the previous screenshot) with the
    following lines of code to get the generic file locations:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以用以下代码替换上一个截图中的最后几行代码，以获取通用文件位置：
- en: '[PRE8]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here, we can see that `System.getProperty("jboss.server.home.dir");` fetches
    the JBoss directory. This is a platform-independent code that can be used on Windows
    as well as *nix-based servers. All we need to do is create a new directory in
    the `home` directory named `deploy` using `new File(jboss_home + "/deploy/").mkdir();` then, `Base64`
    is decoded and written in the `deploy` directory as `test.war`. The following
    screenshot shows the BSH script''s final code after these changes have been made:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到`System.getProperty("jboss.server.home.dir");`获取了JBoss目录。这是一个平台无关的代码，可以在Windows和*nix服务器上使用。我们只需要在`home`目录中创建一个名为`deploy`的新目录，使用`new
    File(jboss_home + "/deploy/").mkdir();`，然后，解码`Base64`并将其写入`deploy`目录作为`test.war`。在进行这些更改后，下面的截图显示了BSH脚本的最终代码：
- en: '![](img/83489199-617c-47e6-84d8-eda3612e5347.png)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
  zh: '![](img/83489199-617c-47e6-84d8-eda3612e5347.png)'
- en: Once the BSH script is ready, we can use the `webconsole_invoker.rb` script,
    which comes with the same third-party tool, `redteam-jboss.tar.gz`, to deploy
    our BSH script remotely onto the JBoss AS instance.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: BSH脚本准备就绪后，我们可以使用与第三方工具`redteam-jboss.tar.gz`一起提供的`webconsole_invoker.rb`脚本将我们的BSH脚本远程部署到JBoss
    AS实例上。
- en: Deploying the BSH script using webconsole_invoker.rb
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`webconsole_invoker.rb`部署BSH脚本
- en: 'We can deploy the BSH script using the `webconsole_invoker.rb` script:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`webconsole_invoker.rb`脚本部署BSH脚本：
- en: 'Executing the Ruby script with the `-h` flag will show us a list of options,
    as in the following screenshot:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`-h`标志执行Ruby脚本将显示选项列表，如下截图所示：
- en: '![](img/f3d1603b-ac1c-4e54-a8fc-d1cd754bb143.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f3d1603b-ac1c-4e54-a8fc-d1cd754bb143.png)'
- en: 'We now run the script and pass the target `Invoker` URL along with the `Invoke`
    method. In our case, we will use the `createScriptDeployment()` method. This method
    takes two input types, both as `String`, so we pass them in the `-s` flag, and
    then we pass the path to our BSH file (with the filename and the name of the deployer
    passed with the `-p` flag), as shown:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们运行脚本并传递目标`Invoker` URL以及`Invoke`方法。在我们的情况下，我们将使用`createScriptDeployment()`方法。该方法接受两种输入类型，都是`String`，所以我们在`-s`标志中传递它们，然后我们传递我们的BSH文件的路径（带有文件名和使用`-p`标志传递的部署者的名称），如下所示：
- en: '![](img/75e66d68-9f8c-4e97-bf52-b5045cdde2b4.png)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![](img/75e66d68-9f8c-4e97-bf52-b5045cdde2b4.png)'
- en: 'After executing the script, our `test.war` file will be deployed, which will
    create our shell in the `/test/` directory inside our `home` directory:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行脚本后，我们的`test.war`文件将被部署，在我们的`home`目录内的`/test/`目录中创建我们的shell：
- en: '![](img/8aaf4d5f-730a-4be5-81f4-cd0480e27ca6.png)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8aaf4d5f-730a-4be5-81f4-cd0480e27ca6.png)'
- en: Browsing to the URL allows us to access the JSP-based web shell that was uploaded,
    as we can see in the preceding screenshot.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览到URL可以让我们访问已上传的基于JSP的Web shell，如前面的截图所示。
- en: Exploitation via JMXInvokerServlet (JexBoss)
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过JMXInvokerServlet（JexBoss）进行利用
- en: 'Another great tool for JBoss exploitation is JexBoss. JexBoss is a tool for
    testing and exploiting vulnerabilities in JBoss AS and other Java platforms, frameworks,
    and applications. It''s open source and available on GitHub at [https://github.com/joaomatosf/jexboss](https://github.com/joaomatosf/jexboss):'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: JBoss利用的另一个很好的工具是JexBoss。JexBoss是一个用于测试和利用JBoss AS和其他Java平台、框架和应用程序中的漏洞的工具。它是开源的，可以在GitHub上找到[https://github.com/joaomatosf/jexboss](https://github.com/joaomatosf/jexboss)：
- en: 'Once we have downloaded and run the tool, we can perform the exploitation with
    a few keystrokes. All we need to do is pass the URL of the running JBoss server
    using the following command:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并运行工具后，我们可以通过几个按键来进行利用。我们只需要使用以下命令传递正在运行的JBoss服务器的URL：
- en: '[PRE9]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If Python has not been properly configured, we can execute the preceding command
    using the `python jexboss.py --jboss -P` syntax. Both options work.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Python没有正确配置，我们可以使用`python jexboss.py --jboss -P`语法执行前面的命令。两个选项都可以工作。
- en: 'As the following screenshot shows, the tool has identified multiple vulnerable
    endpoints that can be exploited to gain access to the server. We will use `JMXInvokerServlet`,
    which is similar to  `Invoker` and receives serialized post data:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下截图所示，该工具已识别出多个可利用的脆弱端点，可以利用它们来访问服务器。我们将使用`JMXInvokerServlet`，它类似于`Invoker`，并接收序列化的post数据：
- en: '![](img/f1f69410-458e-4ad7-a718-c2c0558593e8.png)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f1f69410-458e-4ad7-a718-c2c0558593e8.png)'
- en: 'Choose `yes` when the tools ask for confirmation of exploitation:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当工具要求确认利用时，请选择`yes`：
- en: '![](img/71cca431-2ae6-4d50-a749-2252f82e6e89.png)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![](img/71cca431-2ae6-4d50-a749-2252f82e6e89.png)'
- en: 'Once the exploitation is complete, we will get a shell through which we can
    execute commands on the server, as shown:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦利用完成，我们将获得一个shell，通过它我们可以在服务器上执行命令，如下所示：
- en: '![](img/5d557433-8281-4720-8d99-5c54e10fa7b2.png)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d557433-8281-4720-8d99-5c54e10fa7b2.png)'
- en: Further exploitation is also possible by using the `jexremote` command. Now
    that we have a better understanding of exploiting JBoss using JexBoss, let's move
    on to the next section—exploitation via `JMXInvokerServlet` using Metasploit
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`jexremote`命令也可以进行进一步的利用。现在我们对使用JexBoss利用JBoss有了更好的理解，让我们继续下一部分——使用Metasploit通过`JMXInvokerServlet`进行利用
- en: Exploitation via JMXInvokerServlet using Metasploit
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit通过JMXInvokerServlet进行利用
- en: 'Metasploit also has a module for `JMXInvokerServlet`, which can be loaded using
    the following command:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit还有一个`JMXInvokerServlet`模块，可以使用以下命令加载：
- en: '[PRE10]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Before using this `exploit` module, we need to make sure that the `/invoker/JMXInvokerServlet`
    URI path exists on the server. If the path doesn''t exist, the exploit will fail.
    The following screenshot shows the output of the preceding command:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用此`exploit`模块之前，我们需要确保服务器上存在`/invoker/JMXInvokerServlet` URI路径。如果路径不存在，利用将失败。以下截图显示了前面命令的输出：
- en: '![](img/bd5741cb-022c-4bb7-bd69-6fb19d6ab62a.png)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd5741cb-022c-4bb7-bd69-6fb19d6ab62a.png)'
- en: 'To see whether the `/invoker/JMXInvokerServlet` URI path exists, we can use
    the following command for confirmation:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看`/invoker/JMXInvokerServlet` URI路径是否存在，我们可以使用以下命令进行确认：
- en: '![](img/ee5a533b-f889-416d-8b1e-7ef2875939c8.png)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee5a533b-f889-416d-8b1e-7ef2875939c8.png)'
- en: 'If the server responds with serialized data in the form of bytes, starting
    with `ac ed`, we can run the exploit, which will give us access to the server via
    Meterpreter, as we can see in the following screenshot:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器以字节形式的序列化数据作为响应，以`ac ed`开头，我们可以运行利用，这将使我们通过Meterpreter访问服务器，如下截图所示：
- en: '![](img/ac382d68-262d-44fb-9617-288a49170c09.png)**Note: **In cases where we
    are not able to get a successful reverse shell, we can always opt for bind shell
    connections.'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/ac382d68-262d-44fb-9617-288a49170c09.png)**注意：**在我们无法获得成功的反向shell的情况下，我们总是可以选择绑定shell连接。'
- en: Summary
  id: totrans-315
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about the basics of JBoss, and then moved on to
    studying the file and directory structure. Next, we looked at the enumeration
    of JBoss, and then we moved on to carrying out vulnerability assessments using
    the Metasploit framework, after which we got to the exploitation process via the
    administration console. Finally, we performed exploitation through the web console.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了JBoss的基础知识，然后继续学习文件和目录结构。接下来，我们研究了JBoss的枚举，然后进行了使用Metasploit框架进行漏洞评估，之后我们进行了通过管理控制台进行利用的过程。最后，我们通过Web控制台执行了利用。
- en: In the next chapter, we will learn about pentesting on Apache Tomcat.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习有关对Apache Tomcat进行渗透测试。
- en: Questions
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Is JBoss free to download?
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: JBoss可以免费下载吗？
- en: Further reading
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The JBoss directory structure:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: JBoss目录结构：
- en: '[https://www.protechtraining.com/content/jboss_admin_tutorial-directory_structure](https://www.protechtraining.com/content/jboss_admin_tutorial-directory_structure)'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.protechtraining.com/content/jboss_admin_tutorial-directory_structure](https://www.protechtraining.com/content/jboss_admin_tutorial-directory_structure)'
- en: '[https://access.redhat.com/documentation/en-us/jboss_enterprise_application_platform/5/html/administration_and_configuration_guide/server_directory_structure](https://access.redhat.com/documentation/en-us/jboss_enterprise_application_platform/5/html/administration_and_configuration_guide/server_directory_structure)'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://access.redhat.com/documentation/en-us/jboss_enterprise_application_platform/5/html/administration_and_configuration_guide/server_directory_structure](https://access.redhat.com/documentation/en-us/jboss_enterprise_application_platform/5/html/administration_and_configuration_guide/server_directory_structure)'
- en: 'The Java serialized format:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: Java序列化格式：
- en: '[https://www.programering.com/a/MTN0UjNwATE.html](https://www.programering.com/a/MTN0UjNwATE.html)'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.programering.com/a/MTN0UjNwATE.html](https://www.programering.com/a/MTN0UjNwATE.html)'
- en: '[https://www.javaworld.com/article/2072752/the-java-serialization-algorithm-revealed.html](https://www.javaworld.com/article/2072752/the-java-serialization-algorithm-revealed.html)'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.javaworld.com/article/2072752/the-java-serialization-algorithm-revealed.html](https://www.javaworld.com/article/2072752/the-java-serialization-algorithm-revealed.html)'
