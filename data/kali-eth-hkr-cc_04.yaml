- en: Web App Exploitation – Beyond OWASP Top 10
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web应用程序利用-超越OWASP十大
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下示例：
- en: Exploiting XSS with XSS Validator
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用XSS验证器利用XSS
- en: Injection attacks with `sqlmap`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`sqlmap`进行注入攻击
- en: Owning all `.svn` and `.git` repositories
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有所有`.svn`和`.git`存储库
- en: Winning race conditions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 赢得竞争条件
- en: Exploiting JBoss with JexBoss
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JexBoss利用JBoss
- en: Exploiting PHP Object Injection
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用PHP对象注入
- en: Backdoors using web shells and meterpreters
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Web shell和meterpreter设置后门
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In the OWASP Top 10, we usually see the most common way of finding and exploiting
    vulnerabilities. In this chapter, we will cover some of the uncommon cases one
    might come across while hunting for bugs in a web application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在OWASP十大中，我们通常看到查找和利用漏洞的最常见方式。在本章中，我们将介绍在寻找Web应用程序中的漏洞时可能遇到的一些不常见情况。
- en: Exploiting XSS with XSS Validator
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用XSS验证器利用XSS
- en: While XSS is already detected by various tools such as Burp, Acunetix, and so
    on, XSS Validator comes in handy. It is the Burp Intruder and Extender that has
    been designed to automatically validate XSS vulnerabilities.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然XSS已经被Burp、Acunetix等各种工具检测到，但XSS验证器非常方便。它是专为自动验证XSS漏洞而设计的Burp入侵者和扩展程序。
- en: It is based on SpiderLabs' blog post at [http://blog.spiderlabs.com/2013/02/server-site-xss-attack-detection-with-modsecurity-and-phantomjs.html](http://blog.spiderlabs.com/2013/02/server-site-xss-attack-detection-with-modsecurity-and-phantomjs.html).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 它基于SpiderLabs的博客文章[http://blog.spiderlabs.com/2013/02/server-site-xss-attack-detection-with-modsecurity-and-phantomjs.html](http://blog.spiderlabs.com/2013/02/server-site-xss-attack-detection-with-modsecurity-and-phantomjs.html)。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做好准备
- en: To use the tool in the following recipe, we will need to have SlimerJS and PhantomJS
    installed on our machines.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要在以下示例中使用该工具，我们需要在我们的机器上安装SlimerJS和PhantomJS。
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps demonstrate the XSS Validator:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤演示了XSS验证器：
- en: 'We open up Burp and switch to the Extender tab:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们打开Burp并切换到扩展程序选项卡：
- en: '![](img/340ecd29-1c09-4b7d-a6ed-ab0cc040f60c.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/340ecd29-1c09-4b7d-a6ed-ab0cc040f60c.png)'
- en: 'We then install the XSS Validator extender:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们安装XSS验证器扩展程序：
- en: '![](img/41724867-7fed-4714-b23c-3e42f3d6dcc3.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/41724867-7fed-4714-b23c-3e42f3d6dcc3.png)'
- en: 'Once the installation is done, we will see a new tab in the Burp window titled
    xssValidator:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，我们将在Burp窗口中看到一个名为xssValidator的新选项卡：
- en: '![](img/433f6113-9b8a-41df-a1c9-ac9421d41fb9.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/433f6113-9b8a-41df-a1c9-ac9421d41fb9.png)'
- en: Next, we install PhantomJS and SlimerJS; this can be done on Kali with a few
    simple commands.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们安装PhantomJS和SlimerJS；这可以在Kali上用几个简单的命令完成。
- en: 'We download both the PhantomJS file from the internet using `wget`:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`wget`从互联网下载PhantomJS文件：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We extract it using the following command:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用以下命令提取它：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following screenshot shows the folder in which the preceding command downloads
    the PhantomJS file:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令下载PhantomJS文件的文件夹：
- en: '![](img/d73703dd-292f-4cd3-bb74-af87cf63c49a.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d73703dd-292f-4cd3-bb74-af87cf63c49a.png)'
- en: 'Now we can browse the folder using `cd`, and the easiest way is to copy the
    PhantomJS executable to `/usr/bin`:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以使用`cd`浏览文件夹，最简单的方法是将PhantomJS可执行文件复制到`/usr/bin`：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令的输出：
- en: '![](img/2d8228a7-84f6-454d-882e-f9c2ccc8fae7.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d8228a7-84f6-454d-882e-f9c2ccc8fae7.png)'
- en: To verify that we can type the `phantomjs -v` command in the Terminal and it
    will show us the version.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要验证我们是否可以在终端中输入`phantomjs -v`命令并显示版本。
- en: 'Similarly, to install SlimerJS we download it from the official website:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似地，要安装SlimerJS，我们从官方网站下载它：
- en: '[http://slimerjs.org/download.html](http://slimerjs.org/download.html).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://slimerjs.org/download.html](http://slimerjs.org/download.html)。'
- en: 'We first install the dependencies using the following command:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先使用以下命令安装依赖项：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now we extract the files using this:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们使用以下命令提取文件：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We then browse the directory and simply copy the SlimerJS executable to `/usr/local/bin`:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们浏览目录，简单地将SlimerJS可执行文件复制到`/usr/local/bin`：
- en: '![](img/8a0702cc-7da1-477e-84f3-f2bf8462cab2.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8a0702cc-7da1-477e-84f3-f2bf8462cab2.png)'
- en: 'Then, we execute the following command:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们执行以下命令：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令的输出：
- en: '![](img/41680f08-dd26-41ae-872e-b17546584451.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/41680f08-dd26-41ae-872e-b17546584451.png)'
- en: Now we need to navigate to the XSS Validator folder.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要导航到XSS验证器文件夹。
- en: 'We then need to start the PhantomJS and SlimerJS server using the following
    commands:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要使用以下命令启动PhantomJS和SlimerJS服务器：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once the servers are running, we head back to the Burp window. In the XSS Validator
    tab on the right-hand side, we will see a list of payloads the extender will test
    on the request. We can manually enter our own payloads as well:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器运行后，我们返回到Burp窗口。在右侧的XSS验证器选项卡中，我们将看到扩展程序将在请求上测试的负载列表。我们也可以手动输入我们自己的负载：
- en: '![](img/795477e2-b319-41b8-b6c1-518d46c81cfc.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/795477e2-b319-41b8-b6c1-518d46c81cfc.png)'
- en: Next, we capture the request we need to validate XSS on.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们捕获需要验证XSS的请求。
- en: 'We select the Send to Intruder option:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们选择发送到入侵者选项：
- en: '![](img/48b5b90e-f0fa-463e-986f-e85f3d6d309a.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/48b5b90e-f0fa-463e-986f-e85f3d6d309a.png)'
- en: 'Then, we switch to the Intruder window, and under the Positions tab, we set
    the position where we want our XSS payloads to be tested. The value surrounded
    by `§` is where the payloads will be inserted during the attack:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们切换到入侵者窗口，在位置选项卡下，设置我们想要测试XSS负载的位置。用`§`包围的值是攻击期间将插入负载的位置：
- en: '![](img/12c86f32-6eab-428f-9355-283e29dc5720.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/12c86f32-6eab-428f-9355-283e29dc5720.png)'
- en: 'In the Payloads tab, we select the Payload type as extension-generated:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在负载选项卡中，我们将负载类型选择为扩展生成的：
- en: '![](img/f06ce3bb-6051-4cfe-90ac-e667045c54eb.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f06ce3bb-6051-4cfe-90ac-e667045c54eb.png)'
- en: 'In Payload Options, we click on the Select generator... and choose XSS Validator
    Payloads:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在负载选项中，我们点击选择生成器...并选择XSS验证器负载：
- en: '![](img/653b5ad9-e114-476c-9b29-42a70d8450bf.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/653b5ad9-e114-476c-9b29-42a70d8450bf.png)'
- en: 'Next, we switch to the XSS Validator tab and copy Grep Phrase; this phrase
    can be customized as well:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们切换到XSS验证器选项卡，并复制Grep短语；这个短语也可以自定义：
- en: '![](img/a8e61d10-0658-4bd6-8d25-38b95d66cd15.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a8e61d10-0658-4bd6-8d25-38b95d66cd15.png)'
- en: 'Next, we switch to the Options tab in the Intruder and add the copied phrase
    in the Grep - Match:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们切换到Intruder选项卡中的选项，并在Grep - Match中添加复制的短语：
- en: '![](img/a80d507b-e6b1-4dbb-8349-099cf3a6ab5b.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a80d507b-e6b1-4dbb-8349-099cf3a6ab5b.png)'
- en: 'We click on Start attack, and we will see a window pop up:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们点击开始攻击，然后我们会看到一个弹出窗口：
- en: '![](img/b5aa5280-5e74-400e-b817-4336f3e591c1.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b5aa5280-5e74-400e-b817-4336f3e591c1.png)'
- en: 'Here, we will see that the requests with a check mark in our Grep Phrase column
    have been successfully validated:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们将看到在我们的Grep短语列中带有检查标记的请求已成功验证：
- en: '![](img/014009ae-d513-447c-ba6e-468bdc026942.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/014009ae-d513-447c-ba6e-468bdc026942.png)'
- en: Injection attacks with sqlmap
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用sqlmap进行注入攻击
- en: The `sqlmap` tool is an open source tool built in Python, which allows the detection
    and exploitation of SQL injection attacks. It has full support for MySQL, Oracle,
    PostgreSQL, Microsoft SQL Server, Microsoft Access, IBM Db2, SQLite, Firebird,
    Sybase, SAP MaxDB, HSQLDB, and Informix databases. In this recipe, we will cover
    how to use sqlmap to test and exploit SQL injection.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`sqlmap`工具是一个用Python构建的开源工具，允许检测和利用SQL注入攻击。它完全支持MySQL、Oracle、PostgreSQL、Microsoft
    SQL Server、Microsoft Access、IBM Db2、SQLite、Firebird、Sybase、SAP MaxDB、HSQLDB和Informix数据库。在这个食谱中，我们将介绍如何使用sqlmap来测试和利用SQL注入。'
- en: How to do it...
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following are the steps to use `sqlmap`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用`sqlmap`的步骤：
- en: 'We first take a look at the help of `sqlmap` for a better understanding of
    its features. This can be done using the following command:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先查看`sqlmap`的帮助，以更好地了解其功能。这可以使用以下命令完成：
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following screenshot shows the output for the preceding command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了上述命令的输出：
- en: '![](img/c825353f-95f8-4485-a504-ffed2f2db7b1.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c825353f-95f8-4485-a504-ffed2f2db7b1.png)'
- en: 'To scan a URL, we use the following command:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要扫描URL，我们使用以下命令：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once a SQL has been detected, we can choose yes (`Y`) to skip other types of
    payloads:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦检测到SQL，我们可以选择是（`Y`）跳过其他类型的有效载荷：
- en: '![](img/ad4a1923-1b9b-4708-a428-b7879594a9f3.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ad4a1923-1b9b-4708-a428-b7879594a9f3.png)'
- en: 'Once SQL has been detected, we can list the database names using the `--dbs`
    flag:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦检测到SQL，我们可以使用`--dbs`标志列出数据库名称：
- en: '![](img/bca5b5f9-b626-4e6c-b1cc-27064df38efa.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bca5b5f9-b626-4e6c-b1cc-27064df38efa.png)'
- en: 'We have the databases now; similarly, we can use flags such as `--tables` and
    `--columns` to get table names and column names:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在有了数据库；同样，我们可以使用`--tables`和`--columns`等标志来获取表名和列名：
- en: '![](img/b87d57a3-41e6-46c0-9655-ccffa009ad42.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b87d57a3-41e6-46c0-9655-ccffa009ad42.png)'
- en: 'To check whether the user is a database administrator, we can use the `--is-dba`
    flag:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查用户是否是数据库管理员，我们可以使用`--is-dba`标志：
- en: '![](img/1f84de64-83b1-47d0-a6d7-4d3571701b52.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f84de64-83b1-47d0-a6d7-4d3571701b52.png)'
- en: 'The `sqlmap` command has a lot of flags. We can use the following table to
    see the different types of flags and what they do:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`sqlmap`命令有很多标志。我们可以使用以下表格来查看不同类型的标志以及它们的作用：'
- en: '| **Flag** | **Operation** |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| **标志** | **操作** |'
- en: '| `--tables` | Dumps all table names |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `--tables` | 转储所有表名 |'
- en: '| `-T` | Specifies a table name to perform an operation on |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `-T` | 指定要执行操作的表名 |'
- en: '| `--os-cmd` | Executes an operating system command |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `--os-cmd` | 执行操作系统命令 |'
- en: '| `--os-shell` | Prompts a command shell to the system |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `--os-shell` | 提示系统命令shell |'
- en: '| `-r` | Specifies a filename to run the SQL test on |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `-r` | 指定要在其上运行SQL测试的文件名 |'
- en: '| `--dump-all` | Dumps everything |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `--dump-all` | 转储所有内容 |'
- en: '| `--tamper` | Uses a tamper script |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `--tamper` | 使用篡改脚本 |'
- en: '| `--eta` | Shows estimated time remaining to dump data |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `--eta` | 显示剩余的估计时间以转储数据 |'
- en: '| `--dbs=MYSql,MSSQL,Oracle` | We can manually choose a database and perform
    injection for specific database types only |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `--dbs=MYSql,MSSQL,Oracle` | 我们可以手动选择数据库，仅对特定类型的数据库执行注入 |'
- en: '| `--proxy` | Specifies a proxy |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `--proxy` | 指定代理 |'
- en: See also
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Backdoors using web shells* recipe
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Web shell的后门*食谱'
- en: The *Backdoors using meterpreters* recipe
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用meterpreters的后门*食谱'
- en: Owning all .svn and .git repositories
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拥有所有的.svn和.git存储库
- en: This tool is used to rip version controlled systems such as SVN, Git, and Mercurial/hg,
    Bazaar. The tool is built in Python and is pretty simple to use. In this recipe,
    you will learn how to use the tool to rip the repositories.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具用于破解版本控制系统，如SVN、Git和Mercurial/hg、Bazaar。该工具是用Python构建的，使用起来非常简单。在这个食谱中，您将学习如何使用该工具来破解存储库。
- en: This vulnerability exists because most of the time when using a version-controlled
    system, developers host their repository in production. Leaving these folders
    allows a hacker to download the whole source code.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这种漏洞存在是因为大多数情况下，在使用版本控制系统时，开发人员会将他们的存储库托管在生产环境中。留下这些文件夹允许黑客下载整个源代码。
- en: How to do it...
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps demonstrate the use of repositories:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤演示了存储库的使用：
- en: 'We can download `dvcs-ripper.git` from GitHub using:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以从GitHub下载`dvcs-ripper.git`：
- en: '[PRE9]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We browse the `dvcs-ripper` directory:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们浏览`dvcs-ripper`目录：
- en: '![](img/5dfd0caa-7f46-4707-8980-420bb267ffbb.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5dfd0caa-7f46-4707-8980-420bb267ffbb.png)'
- en: 'To rip a Git repository, the command is very simple:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要破解Git存储库，命令非常简单：
- en: '[PRE10]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We let it run and then we should see a `.git` folder created, and in it, we
    should see the source code:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们让它运行，然后我们应该看到一个`.git`文件夹被创建，在其中，我们应该看到源代码：
- en: '![](img/cc8d52b0-a1c6-49b6-9cfa-35c50a10acf9.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cc8d52b0-a1c6-49b6-9cfa-35c50a10acf9.png)'
- en: 'Similarly, we can use the following command to rip SVN:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，我们可以使用以下命令来破解SVN：
- en: '[PRE11]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Winning race conditions
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 赢得竞争条件
- en: Race conditions occur when an action is being performed on the same data in
    a multiple threaded web application. It basically produces unexpected results
    when the timing of one action being performed will impact the other action.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当在多线程Web应用程序中对相同数据执行操作时，会发生竞争条件。当执行一个操作的时间影响另一个操作时，它基本上会产生意外的结果。
- en: Some examples of an application with the race condition vulnerability can be
    an application that allows transfer of credit from one user to another or an application
    that allows a voucher code to be added for a discount that can also have a race
    condition, which may allow an attacker to use the same code multiple times.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 具有竞争条件漏洞的应用程序的一些示例可能是允许从一个用户向另一个用户转移信用的应用程序，或者允许添加折扣券代码以获得折扣的应用程序，这也可能存在竞争条件，这可能允许攻击者多次使用相同的代码。
- en: How to do it...
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We can perform a race condition attack using Burp''s Intruder as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Burp的入侵者执行竞争条件攻击，如下所示：
- en: 'We select the request and click on Send to Intruder:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们选择请求，然后单击“发送到入侵者”：
- en: '![](img/ed7fba7b-5504-46f1-8edd-b03504d7598e.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed7fba7b-5504-46f1-8edd-b03504d7598e.png)'
- en: 'We switch to the Options tab and set the number of threads we want, `20` to
    `25` are good enough usually:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们切换到选项选项卡，并设置我们想要的线程数，通常`20`到`25`就足够了：
- en: '![](img/5bbe6543-a0bc-4ec0-81c2-45a7fe3217a9.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5bbe6543-a0bc-4ec0-81c2-45a7fe3217a9.png)'
- en: 'Then, in the Payloads tab, we choose Null payloads in Payload type as we want
    to replay the same request:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在有效载荷选项卡中，我们选择有效载荷类型中的空有效载荷，因为我们要重播相同的请求：
- en: '![](img/1c034f5f-ccbc-4756-a1dd-32cfb88d2142.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1c034f5f-ccbc-4756-a1dd-32cfb88d2142.png)'
- en: Then, in the Payload Options, we choose the number of times we want the request
    to be played.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在有效载荷选项中，我们选择要播放请求的次数。
- en: Since we don't really know how the application will perform, we cannot perfectly
    guess the number of times we need to replay the request.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们实际上不知道应用程序的性能如何，因此无法完全猜测我们需要重播请求的次数。
- en: Now, we click on Start attack. If the attack is successful, we should see the
    desired result.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们点击“开始攻击”。如果攻击成功，我们应该看到期望的结果。
- en: See also
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'You can refer to the following articles for more information:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以参考以下文章以获取更多信息：
- en: '[http://antoanthongtin.vn/Portals/0/UploadImages/kiennt2/KyYeu/DuLieuTrongNuoc/Dulieu/KyYeu/07.race-condition-attacks-in-the-web.pdf](http://antoanthongtin.vn/Portals/0/UploadImages/kiennt2/KyYeu/DuLieuTrongNuoc/Dulieu/KyYeu/07.race-condition-attacks-in-the-web.pdf)'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://antoanthongtin.vn/Portals/0/UploadImages/kiennt2/KyYeu/DuLieuTrongNuoc/Dulieu/KyYeu/07.race-condition-attacks-in-the-web.pdf](http://antoanthongtin.vn/Portals/0/UploadImages/kiennt2/KyYeu/DuLieuTrongNuoc/Dulieu/KyYeu/07.race-condition-attacks-in-the-web.pdf)'
- en: '[https://sakurity.com/blog/2015/05/21/starbucks.html](https://sakurity.com/blog/2015/05/21/starbucks.html)'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://sakurity.com/blog/2015/05/21/starbucks.html](https://sakurity.com/blog/2015/05/21/starbucks.html)'
- en: '[http://www.theregister.co.uk/2016/10/21/linux_privilege_escalation_hole/](http://www.theregister.co.uk/2016/10/21/linux_privilege_escalation_hole/)'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.theregister.co.uk/2016/10/21/linux_privilege_escalation_hole/](http://www.theregister.co.uk/2016/10/21/linux_privilege_escalation_hole/)'
- en: Exploiting JBoss with JexBoss
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JexBoss利用JBoss
- en: JexBoss is a tool for testing and exploiting vulnerabilities in JBoss Application
    Server and other Java Application Servers (for example, WebLogic, GlassFish, Tomcat,
    Axis2, and so on).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: JexBoss是用于测试和利用JBoss应用服务器和其他Java应用服务器（例如WebLogic，GlassFish，Tomcat，Axis2等）中的漏洞的工具。
- en: It can be downloaded at [https://github.com/joaomatosf/jexboss](https://github.com/joaomatosf/jexboss).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以在[https://github.com/joaomatosf/jexboss](https://github.com/joaomatosf/jexboss)下载。
- en: How to do it...
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We begin with navigating to the directory in which we cloned our JexBoss and
    then follow the given steps:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先导航到我们克隆JexBoss的目录，然后按照给定的步骤进行操作：
- en: 'We install all the requirements using the following command:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用以下命令安装所有要求：
- en: '[PRE12]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following screenshot is an example of the preceding command:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图是上述命令的示例：
- en: '![](img/6f40d300-f99a-498f-a52e-bc78a6412ac6.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6f40d300-f99a-498f-a52e-bc78a6412ac6.png)'
- en: 'To view the help, we type this:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看帮助，我们输入以下内容：
- en: '[PRE13]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了上述命令的输出：
- en: '![](img/0434aeba-f83b-4617-a7ac-a6017da624e6.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0434aeba-f83b-4617-a7ac-a6017da624e6.png)'
- en: 'To exploit a host, we simply type the following command:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要利用主机，我们只需输入以下命令：
- en: '[PRE14]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following screenshot is an example of the preceding command:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图是上述命令的示例：
- en: '![](img/2110d739-1384-45d6-8981-7e1cc22f5e8b.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2110d739-1384-45d6-8981-7e1cc22f5e8b.png)'
- en: This shows us the vulnerabilities.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这向我们展示了漏洞。
- en: '![](img/9cd41e0b-44f8-4fa0-a77b-e102ad4e3251.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9cd41e0b-44f8-4fa0-a77b-e102ad4e3251.png)'
- en: 'We type `yes` to continue exploitation:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们输入`yes`以继续利用：
- en: '![](img/8f96a6d4-16ef-4f7d-9c94-68c1f245188f.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8f96a6d4-16ef-4f7d-9c94-68c1f245188f.png)'
- en: 'This gives us a shell on the server:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这给我们在服务器上提供了一个shell：
- en: '![](img/cc88ef97-f384-4230-8b44-ca2766686425.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cc88ef97-f384-4230-8b44-ca2766686425.png)'
- en: Exploiting PHP Object Injection
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用PHP对象注入
- en: PHP Object Injection occurs when an insecure user input is passed through the
    PHP `unserialize()` function. When we pass a serialized string of an object of
    a class to an application, the application accepts it, and then PHP reconstructs
    the object and usually calls magic methods if they are included in the class.
    Some of the methods are `__construct()`, `__destruct()`, `__sleep()`, and `__wakeup()`.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当不安全的用户输入通过PHP `unserialize()`函数传递时，就会发生PHP对象注入。当我们将一个类的对象的序列化字符串传递给应用程序时，应用程序会接受它，然后PHP会重建对象，并且通常会调用魔术方法（如果它们包含在类中）。一些方法是`__construct()`，`__destruct()`，`__sleep()`和`__wakeup()`。
- en: This leads to SQL injections, file inclusions, and even remote code execution.
    However, in order to successfully exploit this, we need to know the class name
    of the object.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致SQL注入，文件包含，甚至远程代码执行。但是，为了成功利用这一点，我们需要知道对象的类名。
- en: How to do it...
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps demonstrate PHP Object Injection:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤演示了PHP对象注入：
- en: 'Here, we have an app that is passing serialized data in the `get` parameter:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们有一个应用程序，它在`get`参数中传递序列化数据：
- en: '![](img/23b23bcb-dc82-4f1d-9028-5c27fb399a67.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23b23bcb-dc82-4f1d-9028-5c27fb399a67.png)'
- en: 'Since we have the source code, we will see that the app is using `__wakeup()`
    function and the class name is `PHPObjectInjection`:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们有源代码，我们将看到该应用程序正在使用`__wakeup()`函数，类名为`PHPObjectInjection`：
- en: '![](img/8646771c-8982-4e2e-86d5-376fc9d64923.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8646771c-8982-4e2e-86d5-376fc9d64923.png)'
- en: 'Now we can write a code with the same class name to produce a serialized object
    containing our own command that we want to execute on the server:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以编写一个具有相同类名的代码，以生成包含我们要在服务器上执行的自己的命令的序列化对象：
- en: '[PRE15]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We run the code by saving it as a PHP file, and we should have the serialized
    output:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将代码保存为PHP文件并运行代码，我们应该有序列化的输出：
- en: '![](img/722b5d72-d65b-4dbf-a47c-b963ad9be4eb.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/722b5d72-d65b-4dbf-a47c-b963ad9be4eb.png)'
- en: 'We pass this output into the `r` parameter and we see that here, it shows the
    user:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将此输出传递到`r`参数中，我们看到这里显示用户：
- en: '![](img/45e43049-e12f-47a4-aa54-aed864c3dd94.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/45e43049-e12f-47a4-aa54-aed864c3dd94.png)'
- en: 'Let''s try passing one more command, `uname -a`. We generate it using the PHP
    code we created:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试传递另一个命令，`uname -a`。我们使用我们创建的PHP代码生成它：
- en: '![](img/baba11b2-ced5-44a8-9be8-3481636bf437.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/baba11b2-ced5-44a8-9be8-3481636bf437.png)'
- en: 'And we paste the output in the URL:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们将输出粘贴到URL中：
- en: '![](img/1f6d11b5-85fe-4ebc-8495-9c6469c8c82c.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f6d11b5-85fe-4ebc-8495-9c6469c8c82c.png)'
- en: 'Now we see the command being executed and the output is as follows:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们看到正在执行的命令，输出如下：
- en: '![](img/8cb4d30f-41cf-41c2-94f9-e2aa8e980bee.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8cb4d30f-41cf-41c2-94f9-e2aa8e980bee.png)'
- en: See also
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[https://mukarramkhalid.com/php-object-injection-serialization/#poi-example-2](https://mukarramkhalid.com/php-object-injection-serialization/#poi-example-2)'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://mukarramkhalid.com/php-object-injection-serialization/#poi-example-2](https://mukarramkhalid.com/php-object-injection-serialization/#poi-example-2)'
- en: '[https://crowdshield.com/blog.php?name=exploiting-php-serialization-object-injection-vulnerabilities](https://crowdshield.com/blog.php?name=exploiting-php-serialization-object-injection-vulnerabilities)'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://crowdshield.com/blog.php?name=exploiting-php-serialization-object-injection-vulnerabilities](https://crowdshield.com/blog.php?name=exploiting-php-serialization-object-injection-vulnerabilities)'
- en: '[https://www.evonide.com/how-we-broke-php-hacked-pornhub-and-earned-20000-dollar/](https://www.evonide.com/how-we-broke-php-hacked-pornhub-and-earned-20000-dollar/)'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.evonide.com/how-we-broke-php-hacked-pornhub-and-earned-20000-dollar/](https://www.evonide.com/how-we-broke-php-hacked-pornhub-and-earned-20000-dollar/)'
- en: Backdoors using web shells
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用web shell的后门
- en: Shell uploads are fun; uploading web shells gives us more power to browse around
    the servers. In this recipe, you will learn some of the ways in which we can upload
    a shell on the server.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 上传web shell很有趣；上传web shell可以让我们在服务器上更多地浏览。在这个教程中，您将学习一些我们可以在服务器上上传shell的方法。
- en: How to do it...
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps demonstrate the use of web shells:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤演示了web shell的使用：
- en: 'We first check whether the user is DBA by running sqlmap with the `--is-dba`
    flag:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先通过使用`--is-dba`标志运行sqlmap来检查用户是否为DBA：
- en: '![](img/19a19e66-693e-4efd-ab17-53108d5e0191.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/19a19e66-693e-4efd-ab17-53108d5e0191.png)'
- en: 'Then, we use `os-shell`, which prompts us with a shell. We then run the command
    to check whether we have privileges:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们使用`os-shell`，它提示我们一个shell。然后我们运行命令来检查我们是否有权限：
- en: '[PRE16]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following screenshot is an example of the preceding command:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令的示例如下：
- en: '![](img/bcc389a3-6623-49f8-9750-e21e2cbf1cd5.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bcc389a3-6623-49f8-9750-e21e2cbf1cd5.png)'
- en: Luckily, we have admin rights. But we don't have RDP available to outside users.
    Let's try another way to get meterpreter access using PowerShell.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 幸运的是，我们有管理员权限。但我们没有RDP可以提供给外部用户。让我们尝试另一种方法，使用PowerShell获取meterpreter访问权限。
- en: 'We first create an object of `System.Net.WebClient` and save it as a PowerShell
    script on the system:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先创建一个`System.Net.WebClient`对象，并将其保存为PowerShell脚本在系统上：
- en: '[PRE17]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now we create our `meterpreter.exe` via `msfvenom` using the following command:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们通过以下命令使用`msfvenom`创建我们的`meterpreter.exe`：
- en: '[PRE18]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, we need to get our meterpreter downloaded, so we append the following
    command in our `abc.ps1` script:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要下载我们的meterpreter，所以我们在我们的`abc.ps1`脚本中添加以下命令：
- en: '[PRE19]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The following screenshot is an example of the preceding command:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是前面命令的示例：
- en: '![](img/1146fc5b-8f64-4155-b5f9-0d63506a28b6.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1146fc5b-8f64-4155-b5f9-0d63506a28b6.png)'
- en: 'By default, PowerShell is configured to prevent the execution of `.ps1` scripts
    on Windows systems. But there''s an amazing way to still execute scripts. We use
    the following command:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，PowerShell配置为阻止在Windows系统上执行`.ps1`脚本。但仍有一种惊人的方法可以执行脚本。我们使用以下命令：
- en: '[PRE20]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following screenshot is an example of the preceding command:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令的示例如下：
- en: '![](img/75492280-4ddf-433d-bc55-8d3b0e6e40f2.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/75492280-4ddf-433d-bc55-8d3b0e6e40f2.png)'
- en: 'Next, we go to the directory `D:/video/meterpreter.exe` where our file was
    downloaded and execute it using the following command:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们转到目录`D:/video/meterpreter.exe`，我们的文件已下载，并使用以下命令执行它：
- en: '[PRE21]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The preceding command will open up msf as shown in the following screenshot:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将打开msf，如下截图所示：
- en: '![](img/2bef0c4f-faa1-4b6f-98f0-6436fede6833.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2bef0c4f-faa1-4b6f-98f0-6436fede6833.png)'
- en: Backdoors using meterpreters
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用meterpreter的后门
- en: Sometimes, we may also come across a file upload that is initially meant to
    upload files such as Excel, photos, and so on, but there are a few ways through
    which we can bypass it. In this recipe, you will see how to do that.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们可能还会遇到最初用于上传文件（如Excel、照片等）的文件上传，但有一些方法可以绕过它。在这个教程中，您将看到如何做到这一点。
- en: How to do it...
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps demonstrate the use of meterpreters:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤演示了meterpreter的使用：
- en: 'Here, we have a web application that uploads a photo:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们有一个上传照片的web应用程序：
- en: '![](img/20015428-2d33-4c72-aac2-2e4987f00419.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](img/20015428-2d33-4c72-aac2-2e4987f00419.png)'
- en: 'When we upload a photo, this is what we see in the application:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们上传照片时，这是我们在应用程序中看到的：
- en: '![](img/32380e31-b3f9-4a6b-bfd6-db71db172b93.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](img/32380e31-b3f9-4a6b-bfd6-db71db172b93.png)'
- en: 'Let''s see what happens if we upload a `.txt`. We create one with test as the
    data:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们看看如果我们上传一个`.txt`会发生什么。我们创建一个带有测试数据的文件：
- en: '![](img/d2d5ccb1-bb1a-4673-9073-d3d74b8e2718.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d2d5ccb1-bb1a-4673-9073-d3d74b8e2718.png)'
- en: 'Let''s try uploading it:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试上传它：
- en: '![](img/538fb14d-b1b3-4931-adc0-a04bb9cbee66.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](img/538fb14d-b1b3-4931-adc0-a04bb9cbee66.png)'
- en: 'Our image has been deleted! This might mean our application is doing either
    a client-side or a server-side check for file extension:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的图片已被删除！这可能意味着我们的应用程序正在进行客户端或服务器端的文件扩展名检查：
- en: '![](img/66cfba69-5774-4673-bf53-5286ebc30ec4.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/66cfba69-5774-4673-bf53-5286ebc30ec4.png)'
- en: 'Let''s try to bypass the client-side check. We intercept the request in Burp
    and try to alter the extension in the data submitted:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试绕过客户端检查。我们在Burp中拦截请求，尝试更改提交的数据中的扩展名：
- en: '![](img/3c2bce9c-ab7c-4fb5-92d1-4d09356abbdc.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c2bce9c-ab7c-4fb5-92d1-4d09356abbdc.png)'
- en: 'Now we change the extension from `.txt` to `.txt;.png` and click on forward:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将扩展名从`.txt`更改为`.txt;.png`，然后点击前进：
- en: '![](img/a58f8519-a8e2-4d6c-a521-e0495ed45262.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a58f8519-a8e2-4d6c-a521-e0495ed45262.png)'
- en: This is still being deleted, which tells us that the application might be having
    a server-side check.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 这仍在被删除，这告诉我们应用程序可能具有服务器端检查。
- en: One of the way to bypass it would be to add a header of an image along with
    the code we want to execute.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 绕过的一种方法是在我们想要执行的代码中添加一个图像的头部。
- en: 'We add the header `GIF87a` and try to upload the file:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们添加头部`GIF87a`并尝试上传文件：
- en: '![](img/b64944a2-7953-471b-b410-37cc790ab763.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b64944a2-7953-471b-b410-37cc790ab763.png)'
- en: 'And then we upload this:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们上传这个：
- en: '![](img/59b34ecd-7496-47c1-a47d-d5e0d54c7593.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![](img/59b34ecd-7496-47c1-a47d-d5e0d54c7593.png)'
- en: We see that the file has been uploaded.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们看到文件已经上传。
- en: 'Now we try to add our PHP code:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们尝试添加我们的PHP代码：
- en: '[PRE22]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![](img/0725ad0d-0e6a-42cc-acca-471888d6c322.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0725ad0d-0e6a-42cc-acca-471888d6c322.png)'
- en: But our PHP has not been executed still.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我们的PHP仍未被执行。
- en: However, there are other file formats too, such as `.pht`, `.phtml`, `.phtm`,
    `.htm`, and so on. Let's try `.pht`.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然而，还有其他文件格式，如`.pht`、`.phtml`、`.phtm`、`.htm`等。让我们尝试`.pht`。
- en: '![](img/2a642eab-1083-4d72-a8bb-25bf4b6201d7.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a642eab-1083-4d72-a8bb-25bf4b6201d7.png)'
- en: Our file has been uploaded.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的文件已经上传。
- en: '![](img/259298d1-2bc0-4060-9a5d-6f03c2a172c1.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![](img/259298d1-2bc0-4060-9a5d-6f03c2a172c1.png)'
- en: We browse the file and see that it has been executed!
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们浏览文件并看到它已被执行！
- en: '![](img/814041e7-29f8-46d2-954c-5e4f6659f83f.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![](img/814041e7-29f8-46d2-954c-5e4f6659f83f.png)'
- en: 'Let''s try executing a basic command:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试执行一个基本命令：
- en: '[PRE23]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![](img/b6146f1b-ff1d-4e40-bb72-47c67a5fba9b.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b6146f1b-ff1d-4e40-bb72-47c67a5fba9b.png)'
- en: We can see that our command has been successfully executed and we have uploaded
    our shell on the server.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们的命令已成功执行，我们已经在服务器上上传了我们的shell。
