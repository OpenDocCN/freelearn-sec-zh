- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16'
- en: DevSecOps for Pentesters
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渗透测试人员的 DevSecOps
- en: '**DevSecOps** is a combination of *Development* , *Security* , and *Operations*
    . DevSecOps represents a shift in how organizations approach security in software
    development. Integrating security practices throughout the development life cycle
    leads to the early detection and mitigation of security issues.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**DevSecOps** 是 *开发*、*安全* 和 *运维* 的结合体。DevSecOps 代表了组织在软件开发中如何看待安全的转变。将安全实践贯穿整个开发生命周期，有助于早期发现并缓解安全问题。'
- en: In this chapter, we’ll explore the role of pentesters within a DevSecOps framework.
    We’ll examine how Bash scripting can be used to automate and enhance security
    processes. From integrating security checks into **Continuous Integration/Continuous
    Delivery** ( **CI/CD** ) pipelines to building custom security tools, we’ll cover
    practical techniques that can help pentesters in a DevSecOps setting.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探索渗透测试人员在 DevSecOps 框架中的角色。我们将研究如何使用 Bash 脚本来自动化和增强安全流程。从将安全检查集成到**持续集成/持续交付**（**CI/CD**）管道，到构建定制的安全工具，我们将涵盖能帮助渗透测试人员在
    DevSecOps 环境中应用的实用技术。
- en: If you don’t work in a DevSecOps environment, this chapter still has something
    for you. You may wish to skip ahead to the section on creating custom Kali builds.
    This section will help you to automate the creation of highly customizable Kali
    Linux installation ISO images.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不在 DevSecOps 环境中工作，本章仍然适合你。你可能想跳到创建定制 Kali 构建的部分。本节将帮助你自动化创建高度可定制的 Kali Linux
    安装 ISO 镜像。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Introduction to DevSecOps for pentester s
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渗透测试人员的 DevSecOps 介绍
- en: Configuring the CI/CD pipeline with Bash
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Bash 配置 CI/CD 管道
- en: Crafting security-focused Bash scripts for DevSecOps
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 DevSecOps 编写安全性重点的 Bash 脚本
- en: Integrating real-time security monitoring with Bas h
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Bash 集成实时安全监控
- en: Automating custom Kali Linux builds for pentesting
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化定制的 Kali Linux 构建用于渗透测试
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code for this chapter can be found a t [https://github.com/PacktPublishing/Bash-Shell-Scripting-for-Pentesters/tree/main/Chapter16](https://github.com/PacktPublishing/Bash-Shell-Scripting-for-Pentesters/tree/main/Chapter16)
    .
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在 [https://github.com/PacktPublishing/Bash-Shell-Scripting-for-Pentesters/tree/main/Chapter16](https://github.com/PacktPublishing/Bash-Shell-Scripting-for-Pentesters/tree/main/Chapter16)
    找到。
- en: 'This chapter will utilize a Kali virtual machine with GitLab and Bash scripts
    for running security checks and monitoring. Configure your Kali Linux virtual
    machine with at least the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将使用 Kali 虚拟机与 GitLab 和 Bash 脚本来运行安全检查和监控。请配置你的 Kali Linux 虚拟机，至少符合以下要求：
- en: 4 GB RAM
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4 GB 内存
- en: 30 GB storage
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 30 GB 存储
- en: Two virtual CPUs
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个虚拟 CPU
- en: Once you have a working Kali installation that meets or exceeds the preceding
    specifications, run the **ch16_setup_environment.sh** script found in this chapter’s
    GitHub directory. We’ll review the script later in this chapter.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你拥有符合或超过前述规格的 Kali 安装，运行本章 GitHub 目录中的**ch16_setup_environment.sh**脚本。我们将在本章后续部分回顾这个脚本。
- en: 'Next, configure the system email:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，配置系统邮件：
- en: Run the **ch16_setup_mail.sh** script. This script can be found in the GitHub
    repository directory for this chapter.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行**ch16_setup_mail.sh**脚本。该脚本可以在本章的 GitHub 仓库目录中找到。
- en: 'Test sending yourself mail:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试给自己发送邮件：
- en: '[PRE0]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Check your mail:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查你的邮件：
- en: Enter the **mail** command in the terminal
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端输入**mail**命令
- en: Press the *Enter* / *Return* key to read a message
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Enter* / *Return* 键读取一条消息
- en: Enter **q** to quit reading a message
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入**q**退出阅读消息
- en: Enter **d** to delete a message
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入**d**删除一条消息
- en: Enter **h** to show the message list again
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入**h**再次显示消息列表
- en: Enter **q** to quit the mail program
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入**q**退出邮件程序
- en: With the prerequisites out of the way, let’s dive in !
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了先决条件后，让我们深入学习吧！
- en: Introduction to DevSecOps for pentesters
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渗透测试人员的 DevSecOps 介绍
- en: This section is an introduction and explanation of DevSecOps. By the end of
    this section, you’ll understand the terminology, history, and common tasks for
    integrating security into the development life cycle.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍并解释了 DevSecOps。到本节结束时，你将理解相关术语、历史以及将安全融入开发生命周期的常见任务。
- en: Understanding the intersection of DevOps and security
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 DevOps 与安全的交集
- en: Although DevOps and security may appear separate, they are increasingly merging
    in modern software development. DevOps, focusing on collaboration, automation,
    and continuous delivery, has transformed how organizations handle software development
    and deployment. However, this shift has also introduced new security challenges
    that must be addressed to ensure the integrity and reliability of the software
    being delivered.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管DevOps和安全性看似是分开的，但它们在现代软件开发中正日益融合。DevOps专注于协作、自动化和持续交付，已经改变了组织处理软件开发和部署的方式。然而，这一转变也带来了新的安全挑战，必须加以解决，以确保交付软件的完整性和可靠性。
- en: Traditional security practices often involved manual testing and reviews, which
    were typically performed at the end of the development cycle. This approach was
    time-consuming and resource-intensive, and often resulted in security issues being
    discovered late in the process. This led to costly fixes and delayed releases.
    With the adoption of DevOps, the focus shifted toward integrating security into
    the development process from the very beginning. This gave rise to the concept
    of **DevSecOps** .
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的安全实践通常涉及手动测试和审核，这些通常在开发周期的最后阶段进行。此方法既耗时又资源密集，且通常导致安全问题在过程中被发现较晚。这导致了昂贵的修复和发布延迟。随着DevOps的采用，重点转向从一开始就将安全性集成到开发过程中。这促生了**DevSecOps**的概念。
- en: DevSecOps integrates security into every phase of the software development life
    cycle. This fosters a shared responsibility among developers, operations, and
    security teams. By embedding security practices, tools, and automation into DevOps,
    organizations can identify vulnerabilities early, minimize security risks, and
    deliver secure software by design.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: DevSecOps将安全性集成到软件开发生命周期的每个阶段。这促进了开发人员、运维人员和安全团队之间的共同责任。通过将安全实践、工具和自动化嵌入到DevOps中，组织可以及早发现漏洞，最小化安全风险，并通过设计交付安全的软件。
- en: With DevSecOps on the rise, pentesters should adjust their methods and use automation
    to match fast development cycles. Integrating security testing into CI/CD pipelines
    allows testers to give ongoing feedback on software security, helping teams quickly
    find and fix vulnerabilities. Additionally, pentesters can support the DevSecOps
    culture by working closely with development and operations teams. Through sharing
    their knowledge and experience, pentesters can instruct teams on secure coding
    techniques, common vulnerabilities, and best practices for secure deployment and
    configuration. This collaborative effort promotes a collective awareness of security
    and contributes to creating a more secure software environment.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 随着DevSecOps的兴起，渗透测试人员应调整其方法，并利用自动化来适应快速的开发周期。将安全测试集成到CI/CD流水线中，可以让测试人员对软件安全性进行持续反馈，帮助团队迅速找到并修复漏洞。此外，渗透测试人员可以通过与开发和运维团队密切合作，支持DevSecOps文化。通过分享他们的知识和经验，渗透测试人员可以指导团队掌握安全编码技巧、常见漏洞以及安全部署和配置的最佳实践。这种合作努力促进了安全意识的集体提升，并有助于创建一个更安全的软件环境。
- en: In DevSecOps, Bash scripting is an effective tool for automating security tasks
    within the CI/CD pipeline. As a flexible scripting language, Bash enables pentesters
    to write custom scripts for activities such as vulnerability scanning, configuration
    analysis, and automated exploitation. This reduces manual work, streamlines testing
    processes, and ensures consistent security checks across environments.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在DevSecOps中，Bash脚本是自动化CI/CD流水线中安全任务的有效工具。作为一种灵活的脚本语言，Bash使渗透测试人员能够编写自定义脚本，用于漏洞扫描、配置分析和自动化利用等活动。这减少了手动工作，简化了测试流程，并确保在各个环境中进行一致的安全检查。
- en: Throughout this chapter, we’ll explore the use of Bash scripting to automate
    security tasks within the DevOps workflow. Mastering Bash scripting can help pentesters
    streamline testing processes and enhance organizational security.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何在DevOps工作流程中使用Bash脚本来自动化安全任务。掌握Bash脚本编写可以帮助渗透测试人员简化测试流程，并增强组织的安全性。
- en: Common use cases for Bash in security automation
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bash在安全自动化中的常见使用场景
- en: Security teams often integrate Bash scripting throughout the DevSecOps life
    cycle to streamline and automate repetitive security tasks. Understanding these
    common tasks helps pentesters identify opportunities for automation in their own
    workflows.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 安全团队通常在整个DevSecOps生命周期中集成Bash脚本，以简化和自动化重复的安全任务。了解这些常见任务可以帮助渗透测试人员识别在其工作流程中实现自动化的机会。
- en: 'Some of the more common security workflows include these components:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的安全工作流包括以下组件：
- en: '**Vulnerability scanning orchestration** : Bash scripts coordinate multiple
    scanning tools to run sequentially or in parallel against target systems. Security
    teams typically automate Nmap port scans, followed by targeted vulnerability scanners
    for detected services. The scripts handle scheduling, parameter configuration,
    and results aggregation. This turns hours of manual scanning into an automated
    process.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**漏洞扫描协调**：Bash 脚本协调多个扫描工具按顺序或并行运行，以扫描目标系统。安全团队通常自动化 Nmap 端口扫描，然后使用针对已检测到的服务的漏洞扫描器。脚本处理调度、参数配置和结果聚合。这样将几小时的手动扫描转变为自动化过程。'
- en: '**Continuous security testing** : In modern development environments, security
    testing runs automatically with each code commit. Bash scripts integrate security
    tools into CI pipelines, scanning application code, dependencies, and container
    images. When vulnerabilities are found, the scripts can fail the build and notify
    the security team through chat platforms or ticketing systems.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续安全测试**：在现代开发环境中，安全测试会在每次代码提交时自动运行。Bash 脚本将安全工具集成到 CI 管道中，扫描应用程序代码、依赖项和容器镜像。当发现漏洞时，脚本可以使构建失败，并通过聊天平台或工单系统通知安全团队。'
- en: '**Configuration management** : Infrastructure security relies heavily on proper
    system configuration. Bash scripts verify security baselines across servers, checking
    file permissions, user access, service configurations, and network settings. When
    misconfigurations are detected, scripts can either automatically remediate issues
    or create detailed reports for the operations team.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置管理**：基础设施安全在很大程度上依赖于正确的系统配置。Bash 脚本验证服务器上的安全基线，检查文件权限、用户访问、服务配置和网络设置。当检测到配置错误时，脚本可以自动修复问题或为运维团队创建详细报告。'
- en: '**Log analysis and monitoring** : Security teams use Bash to process system
    logs, looking for indicators of compromise or suspicious behavior. Scripts parse
    log files, extract relevant data, and trigger alerts based on predefined rules.
    This automated monitoring runs continuously, providing real-time security visibility
    across the infrastructure.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志分析与监控**：安全团队使用 Bash 处理系统日志，查找入侵指示或可疑行为。脚本解析日志文件，提取相关数据，并根据预定义规则触发警报。此自动化监控持续运行，提供整个基础设施的实时安全可见性。'
- en: '**Incident response automation** : During security incidents, time is critical.
    Bash scripts automate initial response actions such as isolating compromised systems,
    collecting forensic data, or blocking malicious IP addresses. This automation
    ensures consistent incident handling and reduces response time from hours to minutes.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件响应自动化**：在安全事件中，时间至关重要。Bash 脚本自动化初步响应操作，如隔离受损系统、收集取证数据或阻止恶意 IP 地址。此自动化确保了事件处理的一致性，并将响应时间从小时缩短到分钟。'
- en: '**Compliance validation** : Organizations must regularly verify compliance
    with security standards. Bash scripts automate compliance checks against frameworks
    such as CIS Benchmarks or NIST guidelines. The scripts generate compliance reports
    and highlight areas requiring remediation, simplifying the audit process.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合规性验证**：组织必须定期验证是否符合安全标准。Bash 脚本自动化检查与 CIS 基准或 NIST 指南等框架的合规性。脚本生成合规报告并突出需要整改的区域，从而简化审计过程。'
- en: '**Security tool integration** : Many security tools provide command-line interfaces
    but lack direct integration capabilities. Bash serves as the glue connecting these
    tools into cohesive security workflows. Scripts can chain tools together, transform
    data formats, and create unified reporting interfaces.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全工具集成**：许多安全工具提供命令行接口，但缺乏直接集成功能。Bash 作为这些工具的粘合剂，将它们连接成统一的安全工作流。脚本可以将工具串联起来，转换数据格式并创建统一的报告界面。'
- en: '**Environment hardening** : Security teams use Bash to automate the hardening
    of new systems. Scripts apply security patches, configure firewalls, set up intrusion
    detection, and implement access controls. This automation ensures consistent security
    measures across all environments.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境加固**：安全团队使用 Bash 自动化加固新系统。脚本应用安全补丁、配置防火墙、设置入侵检测和实施访问控制。此自动化确保了所有环境中一致的安全措施。'
- en: These automation use cases form the foundation for modern security operations.
    In subsequent sections, we’ll explore specific code implementations for some of
    these scenarios, building practical automation solutions for real-world security
    chal lenges.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这些自动化用例构成了现代安全操作的基础。在接下来的章节中，我们将探索一些场景的具体代码实现，构建针对实际安全挑战的自动化解决方案。
- en: Configuring the CI/CD pipeline with Bash
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Bash 配置 CI/CD 管道
- en: In this section, we’ll cover Bash scripting for setting up our CI/CD test lab
    environment. This will automate the installation of all tools needed for the rest
    of the chapter exercises. This script can be found in GitHub as **ch16_setup_environment.sh**
    .
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍如何使用 Bash 脚本设置 CI/CD 测试实验环境。这将自动化安装本章剩余练习所需的所有工具。该脚本可以在 GitHub 上找到，文件名为**ch16_setup_environment.sh**。
- en: Initial setup and error handling
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始设置和错误处理
- en: 'This section of the code sets up error-handling behaviors that prevent the
    script from continuing when errors occur. These safety measures help catch problems
    early and prevent cascading failures that could leave the system in an inconsistent
    state. As usual, the code starts with the familiar **shebang** line:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码设置了错误处理行为，防止在发生错误时脚本继续执行。这些安全措施有助于尽早捕捉问题，并防止级联故障，从而避免系统处于不一致的状态。与往常一样，代码以熟悉的**shebang**行开始：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This section establishes core script behaviors. The **set** command configures
    important safety features:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 本节内容确立了核心脚本行为。**set** 命令配置了重要的安全功能：
- en: '**-e** : Exits on any error'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-e** : 在发生任何错误时退出'
- en: '**-u** : Treats unset variables as errors'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-u** : 将未设置的变量视为错误'
- en: '**-o pipefail** : Returns an error if any command in a pipeline fails'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-o pipefail** : 如果管道中的任何命令失败，返回错误'
- en: The internal field separator ( **IFS** ) is set to newline and tab characters,
    preventing word splitting on spaces.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 内部字段分隔符（**IFS**）设置为换行符和制表符，防止在空格处拆分单词。
- en: Note that the log file can be found at **/var/log/devsecops_setup.log** . If
    the script fails, examine the end of the log file.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，日志文件可以在**/var/log/devsecops_setup.log** 找到。如果脚本失败，请检查日志文件的末尾。
- en: Logging functions
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志记录函数
- en: 'Proper logging is essential for debugging and auditing script execution. These
    functions create a standardized logging system that records all significant events
    during the installation process, making it easier to track down issues and verify
    successful execution:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 适当的日志记录对于调试和审计脚本执行至关重要。以下函数创建了一个标准化的日志系统，记录了安装过程中的所有重要事件，使得追踪问题和验证执行成功变得更加容易：
- en: '[PRE2]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'These functions implement structured logging:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数实现了结构化的日志记录：
- en: Each function accepts a message parameter.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个函数接受一个消息参数。
- en: Messages are timestamped using **date** .
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 消息通过**日期**进行时间戳标记。
- en: '**tee -a** writes to both the log file and standard output.'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**tee -a** 将日志写入日志文件和标准输出。'
- en: Error messages are directed to stderr using **>&2** .
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误消息通过**>&2** 定向到标准错误（stderr）。
- en: Error handler and initialization
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误处理程序和初始化
- en: 'When things go wrong in a script, providing clear error messages helps users
    understand and fix problems. This section establishes error-handling routines
    and initializes the logging system, ensuring that all script activities are properly
    tracked, and errors are caught and reported:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当脚本出现问题时，提供清晰的错误消息有助于用户理解并修复问题。这部分内容建立了错误处理例程并初始化了日志记录系统，确保所有脚本活动都得到正确跟踪，错误被捕获并报告：
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The error-handling system uses the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 错误处理系统使用以下功能：
- en: A **trap** to catch errors. A trap is a mechanism that allows you to specify
    a command or series of commands to be executed when the shell receives a specified
    signal or condition. To catch errors, you can use the **trap** command with the
    **ERR** signal, which triggers when a command within a script returns a non-zero
    exit status.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于捕获错误的**trap**。trap 是一种机制，允许你在 shell 接收到指定信号或条件时，指定一条或多条命令进行执行。为了捕获错误，可以使用带有**ERR**信号的**trap**命令，当脚本中的命令返回非零退出状态时，会触发该信号。
- en: The **handle_error** function receives the line number and exit code.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**handle_error** 函数接收行号和退出代码。'
- en: '**init_logging** creates the log file if needed and sets permissions.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**init_logging** 在需要时创建日志文件并设置权限。'
- en: System checks
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统检查
- en: 'Before installing software or making system changes, we need to verify that
    the script is running in the correct environment. The following code ensures the
    script runs with proper permissions and on the intended operating system, preventing
    potential issues from incorrect execution conditions:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装软件或进行系统更改之前，我们需要验证脚本是否在正确的环境中运行。以下代码确保脚本以正确的权限和预期的操作系统运行，从而避免因执行环境不正确而产生的潜在问题：
- en: '[PRE4]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following checks ensure proper execution conditions:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下检查确保执行环境条件正确：
- en: Verifies root privileges by checking the effective user ID
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过检查有效用户 ID 来验证根权限
- en: Confirms the system is Kali Linux by checking the OS information
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过检查操作系统信息确认系统是 Kali Linux
- en: Development tools installation
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发工具安装
- en: 'A DevSecOps environment requires various development tools and languages. This
    section installs core development dependencies including Docker, Java, and Python
    tools that will be needed for building and testing applications securely:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: DevSecOps 环境需要各种开发工具和语言。本节安装核心开发依赖项，包括 Docker、Java 和 Python 工具，这些工具将用于安全地构建和测试应用程序：
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here’s a breakdown of this code block:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是此代码块的拆解：
- en: 'Sets up non-interactive package installation by setting an environment variable.
    This prevents the package manager from prompting you during the installation process:
    **export DEBIAN_FRONTEND=noninteractive** .'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过设置环境变量来设置非交互式包安装。这将防止包管理器在安装过程中提示您：**export DEBIAN_FRONTEND=noninteractive**。
- en: Updates package lists.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新包列表。
- en: Installs development tools using **apt-get** .
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **apt-get** 安装开发工具。
- en: Configures Python package management with **pipx** .
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置 Python 包管理工具 **pipx**。
- en: Updates the **PATH** to include local binaries.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 **PATH**，以包括本地二进制文件。
- en: Security tools installation
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全工具安装
- en: 'Security scanning tools are essential for identifying vulnerabilities in code
    and dependencies. This section installs specialized security tools that help identify
    potential vulnerabilities in application dependencies and container images:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 安全扫描工具对于识别代码和依赖项中的漏洞至关重要。本节安装了专门的安全工具，帮助识别应用程序依赖项和容器镜像中的潜在漏洞：
- en: '[PRE6]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here’s a breakdown of the preceding code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面代码的拆解：
- en: Downloads and installs **OWASP Dependency-Check**
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装**OWASP Dependency-Check**
- en: Fetches the latest Trivy version from the GitHub API
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 GitHub API 获取最新的 Trivy 版本
- en: Downloads and installs the Trivy package
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装 Trivy 包
- en: OWASP Dependency-Check scans software dependency versions for vulnerabilities.
    Trivy scans Git repositories, filesystems, and containers for vulnerabilities.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP Dependency-Check 扫描软件依赖版本中的漏洞。Trivy 扫描 Git 仓库、文件系统和容器中的漏洞。
- en: GitLab CI/CD setup
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GitLab CI/CD 设置
- en: 'This section installs and configures GitLab and GitLab Runner to provide a
    simple CI/CD platform for automated security testing and deployment:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本节安装并配置 GitLab 和 GitLab Runner，以提供一个简单的 CI/CD 平台，用于自动化安全测试和部署：
- en: '[PRE7]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This code block does the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码块执行以下操作：
- en: Deploys GitLab using Docker with persistent storage
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Docker 部署 GitLab，并启用持久存储
- en: Maps necessary ports for web and SSH access
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 映射必要的端口以支持 Web 和 SSH 访问
- en: Installs GitLab Runner for CI/CD capabilities
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 GitLab Runner 以支持 CI/CD 功能
- en: Workspace creation
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作区创建
- en: 'A well-organized workspace helps maintain order in security testing projects.
    This section creates a structured directory layout and provides example configurations
    to help users get started with their DevSecOps practices:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 一个组织良好的工作区有助于在安全测试项目中保持秩序。本节创建了一个结构化的目录布局，并提供了示例配置，帮助用户开始实施 DevSecOps 实践：
- en: '[PRE8]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This function performs the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数执行以下操作：
- en: Creates a directory structure for DevSecOps work
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 DevSecOps 工作创建目录结构
- en: Sets up an example pipeline configuration
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置示例管道配置
- en: Adjusts ownership of workspace files
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整工作区文件的所有权
- en: 'The script uses several shell scripting best practices:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本使用了几个 shell 脚本最佳实践：
- en: Consistent error handling and logging
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一致的错误处理和日志记录
- en: Modular function design
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块化功能设计
- en: Proper permission management
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合适的权限管理
- en: Careful dependency installation
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仔细的依赖安装
- en: Container-based service deployment
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于容器的服务部署
- en: This script creates a simple DevSecOps learning environment that leverages Kali
    Linux’s pre-installed security tools while adding the necessary components. The
    environment allows you to practice security automation, continuous testing, and
    monitoring in an isolated setting.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本创建了一个简单的DevSecOps学习环境，它利用Kali Linux中预安装的安全工具，同时添加必要的组件。该环境允许你在一个隔离的环境中练习安全自动化、持续测试和监控。
- en: In the next section, we’ll explore using Bash scripting to perform security
    tests once code is checked into GitLab.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨如何使用Bash脚本在代码提交到GitLab后执行安全测试。
- en: Crafting security-focused Bash scripts for DevSecOps
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为DevSecOps打造安全-focused的Bash脚本
- en: In this section, we’ll review the code for a Bash scanner script that we’ll
    integrate into the CI/CD pipeline. First, I’ll create and review the scanner script.
    Then I’ll demonstrate how to integrate it into the pipeline for automated scanning.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将回顾用于集成到CI/CD管道中的Bash扫描脚本的代码。首先，我将创建并回顾扫描脚本。然后，我将演示如何将它集成到管道中进行自动化扫描。
- en: Creating the scan script
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建扫描脚本
- en: Creating secure and maintainable Bash scripts requires careful attention to
    defensive coding practices, proper error handling, and thorough logging. Let’s
    build a security scanning script that leverages our DevSecOps environment to demonstrate
    these principles.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 创建安全且易于维护的Bash脚本需要仔细关注防御性编码实践、正确的错误处理和详细的日志记录。让我们构建一个安全扫描脚本，利用我们的DevSecOps环境来展示这些原则。
- en: This script can be found in GitHub as **ch16_devsecops_scanner.sh** . Let’s
    break down this script into its core components and examine each section.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本可以在GitHub上找到，名为**ch16_devsecops_scanner.sh**。让我们将这个脚本分解成核心组件，并查看每个部分。
- en: 'First, we’ll look at the script initialization and safety measures. The purpose
    of this section is as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将查看脚本初始化和安全措施。本节的目的是如下：
- en: En ables strict error handling
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用严格的错误处理
- en: Prevents word splitting issues with filenames containing spaces
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止文件名包含空格时出现单词拆分问题
- en: Variables are defined with clear names and defaults
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量定义清晰，且具有默认值
- en: The script uses timestamped report names to prevent overwriting
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该脚本使用带时间戳的报告名称以防止覆盖
- en: 'Let’s examine the code in depth:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入查看代码：
- en: '[PRE9]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The **set -euo pipefail** command is used to enhance the robustness of shell
    scripts by modifying how errors are handled:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**set -euo pipefail** 命令通过修改错误处理方式来增强Shell脚本的健壮性：'
- en: '**-e** : Causes the script to exit immediately if any command within it exits
    with a non-zero status'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-e** : 如果脚本中的任何命令以非零状态退出，则导致脚本立即退出'
- en: '**-u** : Treats unset variables as an error and causes the script to exit with
    an error'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**-u** : 将未设置的变量视为错误，并导致脚本以错误退出'
- en: '**-o pipefail** : Ensures that the script exits with a non-zero status if any
    command within a pipeline fails, not just the last command'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-o pipefail** : 确保如果管道中的任何命令失败，脚本都会以非零状态退出，而不仅仅是最后一个命令'
- en: These options combined help in catching errors early and making scripts more
    reliable.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项组合有助于早期捕获错误，使脚本更可靠。
- en: The **IFS=$'\n\t'** line sets the IFS delimiter as newlines and tabs to prevent
    word splitting issues with filenames containing spaces.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**IFS=$''\n\t''** 这一行将IFS定界符设置为换行符和制表符，以防止文件名中包含空格时出现单词拆分问题。'
- en: The **SCAN_DIR=${1:-"."}** line assigns the **SCAN_DIR** variable with the value
    of the first positional parameter ( **$1** ) if it exists. If **$1** is not provided,
    it defaults to **"."** , which represents the current directory.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**SCAN_DIR=${1:-"."}** 这一行为**SCAN_DIR**变量赋值，如果存在第一个位置参数（**$1**），则使用该值。如果没有提供**$1**，则默认为**"."**，表示当前目录。'
- en: 'Next, let’s examine the logging functions. The purpose of this section is to
    do the following:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们查看日志记录函数。本节的目的是执行以下操作：
- en: Create a consistent logging format with timestamps and log levels
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建具有时间戳和日志级别的一致日志格式
- en: Write logs to both the console and log file
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将日志写入控制台和日志文件
- en: Implement error trapping to catch and log all script failures
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现错误捕获以捕捉并记录所有脚本失败
- en: Set appropriate file permissions for the log file
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置日志文件的适当文件权限
- en: 'Let’s examine the following code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看以下代码：
- en: '[PRE10]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The **setup_logging()** function checks whether a log file exists, and if it
    doesn’t, it does the following:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**setup_logging()**函数检查日志文件是否存在，如果不存在，则执行以下操作：'
- en: Creates it using **sudo touch** .
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**sudo touch**创建它。
- en: Sets permissions to **644** (owner can read/write, others can only read).
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置权限为**644**（所有者可读写，其他用户只能读取）。
- en: The **[[ ! -f "$LOG_FILE" ]]** test checks whether the file does *not* ( **-!**
    ) exist.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**[[ ! -f "$LOG_FILE" ]]** 测试检查文件是否 *不存在*（**-!**）。'
- en: 'The **log()** function is a versatile logging utility. This function performs
    the following functions:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**log()** 函数是一个多功能的日志记录工具。此函数执行以下功能：'
- en: Takes a log level as the first argument.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将日志级别作为第一个参数传递。
- en: Uses **shift** to remove the level, leaving the remaining arguments as the message.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **shift** 移除级别，将剩余的参数作为消息。
- en: Creates a timestamp using **date** with the format **YYYY-MM-DD HH:MM:SS** .
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **date** 创建时间戳，格式为 **YYYY-MM-DD HH:MM:SS**。
- en: Uses **tee -a** to both display *and* append to the log file.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **tee -a** 同时显示 *并* 将日志追加到文件中。
- en: '**$*** combines all remaining arguments into the message.'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**$*** 将所有剩余的参数合并为消息。'
- en: 'The error handling setup is explained here:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这里解释了错误处理设置：
- en: '**error_handler** takes line number and error code as arguments.'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**error_handler** 接受行号和错误代码作为参数。'
- en: Uses the **log** function to record errors.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **log** 函数记录错误。
- en: The **trap** command catches any **ERR** ( error) signals.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**trap** 命令捕获任何 **ERR**（错误）信号。'
- en: '**${LINENO}** is a special variable containing the current line number.'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**${LINENO}** 是一个特殊变量，包含当前行号。'
- en: '**$?** contains the last command’s exit code.'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**$?** 包含上一个命令的退出代码。'
- en: 'The validation functions ensure the environment is properly configured. The
    purpose of this section is to do the following:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 验证函数确保环境已正确配置。本节的目的是执行以下操作：
- en: Check for required security tools before starting
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开始之前检查所需的安全工具
- en: Validate directory permissions and existence
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证目录权限和存在性
- en: Return clear error messages for missing prerequisites
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对缺少的先决条件返回清晰的错误消息
- en: 'Let’s examine the code:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看代码：
- en: '[PRE11]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The **validate_environment** function creates an array of **required_tools**
    and ensures they are found in the path. The **validate_target** function ensures
    that the directory to be scanned exists. Finally, it checks permissions to ensure
    the scan directory can be read.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**validate_environment** 函数创建一个 **required_tools** 数组，并确保它们在路径中能找到。**validate_target**
    函数确保要扫描的目录存在。最后，它检查权限，确保扫描目录可以被读取。'
- en: 'The scanning functions implement the core security checks. The purpose of this
    section includes the following:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描函数实现了核心的安全检查。本节的目的是执行以下操作：
- en: Ensuring each scan type is isolated in its own function
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保每种扫描类型都在其独立的函数中隔离
- en: Using appropriate tools from our DevSecOps environment
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用我们 DevSecOps 环境中的适当工具
- en: Implementing proper error handling and logging
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现适当的错误处理和日志记录
- en: Generating structured output files for reporting
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成结构化的输出文件用于报告
- en: 'Let’s dive into the code:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入研究代码：
- en: '[PRE12]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, we’re simply logging a status message and setting the **output_file**
    variable.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是记录一个状态消息并设置 **output_file** 变量。
- en: '[PRE13]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the preceding code, we run a scan with **bandit** . Bandit is a **Static
    Application Security Testing** ( **SAST** ) tool that checks for vulnerabilities
    in Python code. Then, it sets the return code based on success or failure from
    the **bandit** command.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用 **bandit** 执行扫描。Bandit 是一个 **静态应用安全测试**（**SAST**）工具，用于检查 Python
    代码中的漏洞。然后，它根据 **bandit** 命令的成功或失败设置返回码。
- en: 'In the **perform_dependency_scan** function, we run **dependency-check** to
    test for known vulnerabilities in software dependencies and log a message based
    on the return code:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **perform_dependency_scan** 函数中，我们运行 **dependency-check** 测试软件依赖中的已知漏洞，并根据返回码记录消息：
- en: '[PRE14]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The **perform_container_scan** function scans Docker container images for security
    vulnerabilities. It finds all Dockerfiles in a directory, builds container images
    from them, and uses Trivy (a vulnerability scanner) to check each image for security
    issues.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '**perform_container_scan** 函数扫描 Docker 容器镜像中的安全漏洞。它会查找目录中的所有 Dockerfile，从中构建容器镜像，并使用
    Trivy（漏洞扫描工具）检查每个镜像的安全问题。'
- en: 'The following code block is responsible for generating the report summary,
    and includes the main function, which con trols the flow of code execution:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块负责生成报告摘要，并包括控制代码执行流程的主函数：
- en: '[PRE15]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Finally, the results processing function, **generate_summary** , and **main**
    functions are executed.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，执行结果处理函数**generate_summary** 和 **main** 函数。
- en: 'The **generate_summary** function performs the following steps:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**generate_summary** 函数执行以下步骤：'
- en: Creates a Markdown-formatted summary report
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 Markdown 格式的摘要报告
- en: Extracts key findings from each scan type
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取每种扫描类型的关键发现
- en: Uses **tail** to show the most recent SAST findings
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **tail** 显示最新的 SAST 发现
- en: Searches for critical dependency vulnerabilities using **grep**
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **grep** 查找关键依赖项漏洞
- en: Parses container scan JSON using **jq** to show high and critical severity issues
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **jq** 解析容器扫描的 JSON，显示高危和严重问题
- en: Provides fallback messages when no issues are found
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当没有发现问题时提供后备消息
- en: Redirects all output to a single summary file
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有输出重定向到一个汇总文件
- en: 'The following code generates the report in Markdown format:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码生成 Markdown 格式的报告：
- en: '[PRE16]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The only thing you haven’t already seen in the preceding code is the Markdown
    formatting. In Markdown, code blocks are started using a line starting with three
    backticks ( **[PRE17]
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一没有在前面的代码中看到的就是 Markdown 格式。在 Markdown 中，代码块以三反引号（ **[PRE17]）开头
- en: main() {
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: main() {
- en: local exit_code=0
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: local exit_code=0
- en: setup_logging
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: setup_logging
- en: log "INFO" "Starting security scan of $SCAN_DIR"
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: log "INFO" "开始扫描 $SCAN_DIR 的安全"
- en: validate_environment || exit 1
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: validate_environment || exit 1
- en: validate_target || exit 1
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: validate_target || exit 1
- en: '# Create scan-specific report directory'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '# 创建特定扫描报告目录'
- en: mkdir -p "${REPORT_DIR}/${REPORT_NAME}"
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: mkdir -p "${REPORT_DIR}/${REPORT_NAME}"
- en: '# Perform scans'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '# 执行扫描'
- en: perform_sast_scan || exit_code=$((exit_code + 1))
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: perform_sast_scan || exit_code=$((exit_code + 1))
- en: perform_dependency_scan || exit_code=$((exit_code + 1))
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: perform_dependency_scan || exit_code=$((exit_code + 1))
- en: perform_container_scan || exit_code=$((exit_code + 1))
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: perform_container_scan || exit_code=$((exit_code + 1))
- en: generate_summary
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: generate_summary
- en: 'log "INFO" "Security scan completed with exit code: $exit_code"'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: log "INFO" "安全扫描完成，退出码：$exit_code"
- en: return $exit_code
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: return $exit_code
- en: '}'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE18]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: $ ./security_scanner.sh
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ ./security_scanner.sh
- en: '[PRE19]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: $ ./security_scanner.sh /path/to/project
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ ./security_scanner.sh /path/to/project
- en: '[PRE20]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: $ ./security_scanner.sh "$CI_PROJECT_DIR"
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ ./security_scanner.sh "$CI_PROJECT_DIR"
- en: '[PRE21]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'security_scan:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 'security_scan:'
- en: 'stage: test'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 'stage: test'
- en: 'script:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本：
- en: '- /path/to/security_scanner.sh .   artifacts:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '- /path/to/security_scanner.sh .   artifacts:'
- en: 'paths:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 'paths:'
- en: '- /opt/devsecops/reports/'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '- /opt/devsecops/reports/'
- en: '[PRE22]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: $ sudo docker exec -it gitlab grep 'Password:' /etc/gitlab/initial_root_password
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ sudo docker exec -it gitlab grep 'Password:' /etc/gitlab/initial_root_password
- en: '[PRE23]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: sudo gitlab-runner register \
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sudo gitlab-runner register \
- en: --url "http://localhost" \
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: --url "http://localhost" \
- en: --registration-token "your_token_here" \
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: --registration-token "your_token_here" \
- en: --description "docker-runner" \
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: --description "docker-runner" \
- en: --executor "docker" \
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: --executor "docker" \
- en: --docker-image "docker:dind" \
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: --docker-image "docker:dind" \
- en: --docker-privileged \
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: --docker-privileged \
- en: --docker-volumes "/cache" \
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: --docker-volumes "/cache" \
- en: --docker-volumes "/opt/devsecops:/opt/devsecops:rw" \
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: --docker-volumes "/opt/devsecops:/opt/devsecops:rw" \
- en: --docker-volumes "/var/run/docker.sock:/var/run/docker.sock" \
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: --docker-volumes "/var/run/docker.sock:/var/run/docker.sock" \
- en: --docker-network-mode "host" \
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: --docker-network-mode "host" \
- en: --clone-url "http://localhost"
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: --clone-url "http://localhost"
- en: '[PRE24]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: $ sudo mkdir -p /opt/devsecops/scripts
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ sudo mkdir -p /opt/devsecops/scripts
- en: '[PRE25]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: $ sudo cp ch16_devsecops_scanner.sh /opt/devsecops/scripts/security_scanner.sh
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ sudo cp ch16_devsecops_scanner.sh /opt/devsecops/scripts/security_scanner.sh
- en: '[PRE26]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: $ sudo chmod +x /opt/devsecops/scripts/security_scanner.sh
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ sudo chmod +x /opt/devsecops/scripts/security_scanner.sh
- en: '[PRE27]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: $ sudo chown -R gitlab-runner:gitlab-runner /opt/devsecops
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ sudo chown -R gitlab-runner:gitlab-runner /opt/devsecops
- en: $ sudo chmod -R 755 /opt/devsecops
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ sudo chmod -R 755 /opt/devsecops
- en: '[PRE28]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: $ sudo systemctl restart gitlab-runner
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ sudo systemctl restart gitlab-runner
- en: '[PRE29]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: $ sudo usermod -aG docker gitlab-runner
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ sudo usermod -aG docker gitlab-runner
- en: '[PRE30]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: $ git clone http://localhost/<username>/vulnerable-flask-app.git
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ git clone http://localhost/<username>/vulnerable-flask-app.git
- en: '[PRE31]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: $ git config user.name "Your Name"
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ git config user.name "Your Name"
- en: '[PRE32]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: $ git config user.email "your.email@example.com"
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ git config user.email "your.email@example.com"
- en: '[PRE33]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: $ mkdir -p reports
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ mkdir -p reports
- en: $ touch reports/.gitkeep
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ touch reports/.gitkeep
- en: $ git add .
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ git add .
- en: $ git commit -m "Initial commit of vulnerable application"
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ git commit -m "首次提交有漏洞的应用"
- en: '[PRE34]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: $ git remote add origin http://localhost/<youruser>/vulnerable-flask-app.git
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ git remote add origin http://localhost/<youruser>/vulnerable-flask-app.git
- en: $ git push -u origin main
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ git push -u origin main
- en: '[PRE35]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '#!/usr/bin/env bash'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '#!/usr/bin/env bash'
- en: if [[ $EUID -ne 0 ]]; then
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: if [[ $EUID -ne 0 ]]; then
- en: echo "This script must be run as root"
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: echo "此脚本必须以 root 用户身份运行"
- en: exit 1
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: exit 1
- en: fi
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: fi
- en: THRESHOLD=5
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: THRESHOLD=5
- en: CHECK_INTERVAL=300  # 5 minutes
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 'CHECK_INTERVAL=300  # 5 分钟'
- en: ALERT_EMAIL="<user>@devsecops.local"
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: ALERT_EMAIL="<user>@devsecops.local"
- en: GITLAB_LOG="/srv/gitlab/logs/gitlab-rails/application_json.log"
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: GITLAB_LOG="/srv/gitlab/logs/gitlab-rails/application_json.log"
- en: '[PRE36]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: send_alert() {
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: send_alert() {
- en: local failed_count=$1
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: local failed_count=$1
- en: local recent_failures=$2
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: local recent_failures=$2
- en: 'echo "WARNING: $failed_count failed login attempts in the last 5 minutes'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: echo "警告：过去 5 分钟内有 $failed_count 次登录失败
- en: 'Time: $(date)'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 时间：$(date)
- en: 'Recent failures:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 最近的失败：
- en: $recent_failures" | mail -s "GitLab Security Alert - Failed Logins" "$ALERT_EMAIL"
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: $recent_failures" | mail -s "GitLab 安全警报 - 登录失败" "$ALERT_EMAIL"
- en: '}'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE37]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: monitor_failed_logins() {
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: monitor_failed_logins() {
- en: if [ ! -f "$GITLAB_LOG" ]; then
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: if [ ! -f "$GITLAB_LOG" ]; then
- en: 'echo "Error: GitLab log file not found at $GITLAB_LOG"'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: echo "错误：未找到GitLab日志文件 $GITLAB_LOG"
- en: exit 1
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: exit 1
- en: '}'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: local current_time=$(date +%s)
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: local current_time=$(date +%s)
- en: local window_start=$((current_time - CHECK_INTERVAL))
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: local window_start=$((current_time - CHECK_INTERVAL))
- en: local window_start_iso=$(date -u -d "@$window_start" +"%Y-%m-%dT%H:%M:%S")
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: local window_start_iso=$(date -u -d "@$window_start" +"%Y-%m-%dT%H:%M:%S")
- en: '[PRE38]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: local recent_failures=$(grep "Failed Login:" "$GITLAB_LOG" | while read -r line;
    do
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: local recent_failures=$(grep "Failed Login:" "$GITLAB_LOG" | while read -r line;
    do
- en: log_time=$(echo "$line" | jq -r '.time' | cut -d'.' -f1)
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: log_time=$(echo "$line" | jq -r '.time' | cut -d'.' -f1)
- en: if [[ "$log_time" > "$window_start_iso" ]]; then
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: if [[ "$log_time" > "$window_start_iso" ]]; then
- en: echo "$line"
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: echo "$line"
- en: fi
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: fi
- en: done)
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: done)
- en: local failed_count=$(echo "$recent_failures" | grep -c "Failed Login:")
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: local failed_count=$(echo "$recent_failures" | grep -c "Failed Login:")
- en: if [ "$failed_count" -gt "$THRESHOLD" ]; then
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: if [ "$failed_count" -gt "$THRESHOLD" ]; then
- en: send_alert "$failed_count" "$(echo "$recent_failures" | jq -r '.message')"
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: send_alert "$failed_count" "$(echo "$recent_failures" | jq -r '.message')"
- en: fi
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: fi
- en: '}'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE39]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: while true; do
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: while true; do
- en: monitor_failed_logins
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: monitor_failed_logins
- en: sleep "$CHECK_INTERVAL"
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: sleep "$CHECK_INTERVAL"
- en: done
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: done
- en: '[PRE40]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: $ sudo apt update
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: $ sudo apt update
- en: $ sudo apt install -y git live-build simple-cdd cdebootstrap curl
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: $ sudo apt install -y git live-build simple-cdd cdebootstrap curl
- en: $ git clone https://gitlab.com/kalilinux/build-scripts/live-build-config.git
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: $ git clone https://gitlab.com/kalilinux/build-scripts/live-build-config.git
- en: $ cd live-build-config
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: $ cd live-build-config
- en: '[PRE41]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: $ ./build.sh --variant gnome --verbose
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ ./build.sh --variant gnome --verbose
- en: '[PRE42]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: $ ./build.sh --variant kde --verbose
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ ./build.sh --variant kde --verbose
- en: '[PRE43]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: $ ./build.sh --variant xfce --verbose
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ ./build.sh --variant xfce --verbose
- en: '[PRE44]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: $ ./build.sh --verbose --arch amd64
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ ./build.sh --verbose --arch amd64
- en: '[PRE45]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: $ ./build.sh --verbose --arch arm64
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ ./build.sh --verbose --arch arm64
- en: '[PRE46]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '#!/usr/bin/env bash'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '#!/usr/bin/env bash'
- en: Set build parameters
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置构建参数
- en: 'DESKTOP="gnome"  # Options: gnome, kde, xfce'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 'DESKTOP="gnome"  # 选项：gnome, kde, xfce'
- en: 'ARCH="amd64"     # Options: amd64, arm64'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 'ARCH="amd64"     # 选项：amd64, arm64'
- en: VERSION="custom-1.0"
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: VERSION="custom-1.0"
- en: 'BUILD_TYPE="installer"  # Options: installer, live'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 'BUILD_TYPE="installer"  # 选项：installer, live'
- en: Create custom password configuration
  id: totrans-336
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义密码配置
- en: mkdir -p kali-config/common/includes.chroot/etc/live/config
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: mkdir -p kali-config/common/includes.chroot/etc/live/config
- en: echo 'LIVE_USER_DEFAULT_GROUPS="audio cdrom dialout floppy video plugdev netdev
    powerdev scanner bluetooth kali"' > kali-config/common/includes.chroot/etc/live/config/user-setup
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: echo 'LIVE_USER_DEFAULT_GROUPS="audio cdrom dialout floppy video plugdev netdev
    powerdev scanner bluetooth kali"' > kali-config/common/includes.chroot/etc/live/config/user-setup
- en: echo 'LIVE_USER_PASSWORD=kali' >> kali-config/common/includes.chroot/etc/live/config/user-setup
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: echo 'LIVE_USER_PASSWORD=kali' >> kali-config/common/includes.chroot/etc/live/config/user-setup
- en: Launch build with all parameters
  id: totrans-340
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动构建并使用所有参数
- en: ./build.sh \
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: ./build.sh \
- en: --verbose \
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: --verbose \
- en: --variant ${DESKTOP} \
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: --variant ${DESKTOP} \
- en: --arch ${ARCH} \
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: --arch ${ARCH} \
- en: --version ${VERSION} \
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: --version ${VERSION} \
- en: --${BUILD_TYPE}
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: --${BUILD_TYPE}
- en: '[PRE47]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: $ sudo apt install -y qemu qemu-system-x86 ovmf
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ sudo apt install -y qemu qemu-system-x86 ovmf
- en: '[PRE48]'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: $ qemu-img create -f qcow2 /tmp/kali.img 20G
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ qemu-img create -f qcow2 /tmp/kali.img 20G
- en: '[PRE49]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: qemu-system-x86_64 -enable-kvm -drive if=virtio,aio=threads,cache=unsafe,format=qcow2,file=/tmp/kali-test.hdd.img
    -cdrom images/kali-custom-image.iso -boot once=d
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: qemu-system-x86_64 -enable-kvm -drive if=virtio,aio=threads,cache=unsafe,format=qcow2,file=/tmp/kali-test.hdd.img
    -cdrom images/kali-custom-image.iso -boot once=d
- en: '```'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: You can read more about the process of creating custom Kali images at [https://gitlab.com/kalilinux/build-scripts/live-build-config](https://gitlab.com/kalilinux/build-scripts/live-build-config)
    .
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://gitlab.com/kalilinux/build-scripts/live-build-config](https://gitlab.com/kalilinux/build-scripts/live-build-config)上阅读更多关于创建定制Kali镜像的过程。
- en: As a consultant, I start new projects with a different customer as often as
    every week. Each customer gets a fresh virtual machine to prevent the cross-contamination
    of data between customers. The build process outlined in this section makes it
    easy to quickly create a new Kali image customized for your needs and preferences.
    If you rely on different tool sets for different types of pentests, simply make
    a copy of the **ch16_build_kali.sh** script and customize the choice of packages
    and metapackages to suit your needs.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 作为顾问，我每周都会开始与不同客户的新项目。每个客户都会得到一个新的虚拟机，以防止客户之间的数据交叉污染。本节中概述的构建过程使得快速创建一个定制化的Kali镜像变得容易，能够满足你的需求和偏好。如果你为不同类型的渗透测试依赖不同的工具集，只需复制**ch16_build_kali.sh**脚本并根据需要定制软件包和元包的选择。
- en: Summary
  id: totrans-356
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to create a simple DevSecOps environment using
    Bash scripting on Kali Linux. The Bash scripts demonstrated essential patterns
    for secure shell scripting including proper error handling, logging, input validation,
    and environment verification. You saw how to integrate multiple security tools
    including OWASP Dependency-Check and Trivy. You also learned how to create simple
    (and free) automated security monitoring Bash scripts.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何通过在 Kali Linux 上使用 Bash 脚本创建一个简单的 DevSecOps 环境。示范的 Bash 脚本展示了安全 shell
    脚本的基本模式，包括正确的错误处理、日志记录、输入验证和环境验证。你还了解了如何集成多个安全工具，包括 OWASP Dependency-Check 和 Trivy。你还学习了如何创建简单的（且免费的）自动化安全监控
    Bash 脚本。
- en: Through the scripts, you learned about professional logging practices, modular
    function design, and proper system setup validation. The examples covered real-world
    security considerations such as running as **root** safely, checking prerequisites,
    handling errors gracefully, and creating clean workspaces with appropriate permissions.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些脚本，你了解了专业的日志记录实践、模块化的函数设计以及正确的系统设置验证。这些示例涵盖了实际的安全考虑因素，例如安全地以 **root** 身份运行、检查先决条件、优雅地处理错误，并创建具有适当权限的干净工作空间。
- en: After reading this book, you should now have a thorough understanding of how
    to integrate Bash into your pentesting workflow. In Bash, there are many ways
    to accomplish any particular task. I’ve been careful to show the most straightforward
    way in my examples and avoided complexity as much as possible to make this subject
    easier to learn. Please create an *issue* in the book’s GitHub repository if any
    of the code isn’t working or needs further explanation.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本书后，你应该已经全面了解如何将 Bash 集成到你的渗透测试工作流中。在 Bash 中，有很多方法可以完成任何特定的任务。我在示例中小心地展示了最直接的方式，并尽量避免复杂性，使这一主题更易于学习。如果任何代码无法正常工作或需要进一步解释，请在本书的
    GitHub 仓库中创建一个 *issue*。
- en: Thanks for reading!
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读！
