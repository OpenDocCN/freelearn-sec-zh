- en: Chapter 7. Web Application Exploitation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。Web应用程序利用
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下示例：
- en: Using Burp for active/passive scanning
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Burp进行主动/被动扫描
- en: Using sqlmap to find SQL Injection on the login page
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用sqlmap在登录页面上查找SQL注入
- en: Using sqlmap to find SQL Injection on URL parameters
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用sqlmap在URL参数上查找SQL注入
- en: Using commix for automated OS command injection
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用commix进行自动OS命令注入
- en: Using weevely for file upload vulnerability
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用weevely进行文件上传漏洞
- en: Exploiting Shellshock using Burp
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用Shellshock使用Burp
- en: Using Metasploit to exploit Heartbleed
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Metasploit利用Heartbleed
- en: Using the FIMAP tool for file inclusion attacks (RFI/LFI)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用FIMAP工具进行文件包含攻击（RFI/LFI）
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Web application penetration testing is the phase where we exploit the vulnerabilities
    that we have discovered during vulnerability assessment.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序渗透测试是我们利用在漏洞评估期间发现的漏洞的阶段。
- en: The success of penetration testing depends on how much information and vulnerabilities
    have been discovered so far. It may not be necessary that all the vulnerabilities
    that we have discovered can be exploited.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 渗透测试的成功取决于迄今为止发现了多少信息和漏洞。我们发现的所有漏洞可能并不一定都能被利用。
- en: Web application exploitation is not dependent on what tools you use. It is an
    exercise of finding security issues in web applications. A web application is
    nothing but a software that runs on the web instead of locally on your operating
    system. It is meant to perform specific tasks and for specific users. The best
    way to exploit a web application is to understand what the application is about
    and what tasks it accomplishes and focus more on the logical working flow of the
    application. Web applications can be of different types and architectures; take,
    for example, dynamic web pages using PHP/Java/.NET and MySQL/MSSQL/Postgress or
    single page application using Web APIs. It would be far more comprehensive to
    test web applications when you understand the architecture of web applications,
    their underlying technology, and their purpose.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序的利用并不取决于您使用的工具。这是一个在Web应用程序中发现安全问题的练习。Web应用程序只是在Web上而不是在您的操作系统本地运行的软件。它旨在执行特定任务并为特定用户提供服务。利用Web应用程序的最佳方法是了解应用程序的内容以及它所完成的任务，并更多地关注应用程序的逻辑工作流程。Web应用程序可以是不同类型和架构的；例如，使用PHP/Java/.NET和MySQL/MSSQL/Postgress的动态Web页面，或者使用Web
    API的单页面应用程序。当您了解Web应用程序的架构、底层技术和目的时，测试Web应用程序将更加全面。
- en: However, in this chapter, we have several tools available in Kali Linux that
    can be used for the exploitation of vulnerabilities found in web applications.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在本章中，我们有几个可用于Kali Linux的工具，可用于利用在Web应用程序中发现的漏洞。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Do not run the tools demonstrated in this chapter against public websites that
    are not your own and are not on your own servers. In this case, we have set up
    three vulnerable web applications running in the Docker to demonstrate the tools/techniques
    in this chapter. *Be careful!*
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 不要对不是您自己的公共网站和不在您自己的服务器上的网站运行本章中演示的工具。在这种情况下，我们设置了三个运行在Docker中的易受攻击的Web应用程序，以演示本章中的工具/技术。*小心！*
- en: Using Burp for active/passive scanning
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Burp进行主动/被动扫描
- en: In this recipe, we will be using the Burp scanner that is part of the Burp Suite
    Pro, which is a paid software. It costs around $350 per year. It is loaded with
    functionalities, some of which are not available or restricted in the free version.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将使用Burp Suite Pro中的Burp扫描器，这是一款付费软件。它的价格约为每年350美元。它加载了许多功能，其中一些在免费版本中不可用或受限制。
- en: Burp suite is not as expensive as other web application scanners out there,
    and it provides a lot of functionalities, which are quite helpful in web app penetration
    testing. Not covering these recipes would be inappropriate as it is a widely used
    tool by penetration testers for web application penetration testing. All that
    said, let's quickly dive into it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Burp套件的价格并不像其他网络应用程序扫描器那样昂贵，并且提供了许多功能，在网络应用程序渗透测试中非常有帮助。不涵盖这些内容将是不合适的，因为它是渗透测试人员在网络应用程序渗透测试中广泛使用的工具。话虽如此，让我们快速进入吧。
- en: Getting ready
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need a running Kali Linux running in Oracle
    Virtualbox or VMware and an Burp Suite Pro license.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此示例，您需要在Oracle Virtualbox或VMware中运行Kali Linux，并拥有Burp Suite Pro许可证。
- en: How to do it...
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'For this recipe, you need to perform the following steps:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此示例，您需要执行以下步骤：
- en: Open Firefox and navigate to **Preferences** | **Advance** | **Network** | **Settings**
    | **Manual Proxy Configuration** and set the host as `127.0.0.1` and the host
    port as `8080` and check **Use this for all protocols**, as shown in the following
    screenshot:![How to do it...](img/image_07_001.jpg)
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Firefox并导航到**首选项** | **高级** | **网络** | **设置** | **手动代理配置**，将主机设置为`127.0.0.1`，主机端口设置为`8080`，并勾选**用于所有协议**，如下图所示：![如何做...](img/image_07_001.jpg)
- en: 'Open the terminal and pull the Docker container from the Docker hub, if you
    haven''t pulled the Docker image already, using the following command:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并从Docker hub拉取Docker容器，如果您还没有拉取Docker镜像，请使用以下命令：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You should see the following output:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Run the downloaded Docker image using the following command:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行下载的Docker镜像：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You should see the following output:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, to start Burp go to the **Proxy** tab, click on **turn intercept on** to
    turn it off, and then go to the **HTTP history** tab, as shown here:![How to do
    it...](img/image_07_002.jpg)![How to do it...](img/image_07_003.jpg)
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，要启动Burp，请转到**代理**选项卡，单击**打开拦截**以关闭它，然后转到**HTTP历史记录**选项卡，如下所示：![如何做...](img/image_07_002.jpg)![如何做...](img/image_07_003.jpg)
- en: 'Now, everything is set up and ready; we just need to find out the IP address
    of the container running vulnerable web applications. Run the following command:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，一切都设置好了，我们只需要找出运行易受攻击的Web应用程序的容器的IP地址。运行以下命令：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You should see the following output:![How to do it...](img/image_07_004.jpg)
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该会看到以下输出：![如何操作...](img/image_07_004.jpg)
- en: 'Copy the container ID and run the following command:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制容器ID并运行以下命令：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You should see the following output:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该会看到以下输出：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Switch to the Firefox window and type the preceding IP address in the address
    bar, and you should see what is shown in the following screenshot:![How to do
    it...](img/image_07_005.jpg)
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Firefox窗口，在地址栏中输入前面的IP地址，你应该会看到下面截图中显示的内容：![如何操作...](img/image_07_005.jpg)
- en: Click on **dvwa** and then click on **Create/Reset Database**, as shown in the
    following screenshot:![How to do it...](img/image_07_006.jpg)
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**dvwa**，然后点击**创建/重置数据库**，如下面的截图所示：![如何操作...](img/image_07_006.jpg)
- en: You will be redirected to the login page; enter the username as `admin` and
    the password as `password`, which is the default user and password for `dvwa`.
    After login, you should see the following screenshot:![How to do it...](img/image_07_007.jpg)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将被重定向到登录页面；输入用户名`admin`和密码`password`，这是`dvwa`的默认用户名和密码。登录后，你应该会看到以下截图：![如何操作...](img/image_07_007.jpg)
- en: Traverse the whole application, use different modules, and click on all possible
    exercises and try them once.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历整个应用程序，使用不同的模块，点击所有可能的练习并尝试一次。
- en: Switch to the Burp window and you will see that Burp has captured all the requests
    in the **HTTP history** tab, as shown here:![How to do it...](img/image_07_008.jpg)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp窗口，你会看到Burp在**HTTP历史**选项卡中捕获了所有请求，如下所示：![如何操作...](img/image_07_008.jpg)
- en: Now, go to the target tab and find your IP address, right-click on it, and click
    on **Add to scope**, as shown in the following screenshot:![How to do it...](img/image_07_009.jpg)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，转到目标选项卡，找到你的IP地址，右键点击它，然后点击**添加到范围**，如下面的截图所示：![如何操作...](img/image_07_009.jpg)
- en: Then, right-click on the same IP and this time, click on **Spider this host**,
    as shown in the following screenshot:![How to do it...](img/image_07_010.jpg)
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，右键点击相同的IP，这次点击**Spider this host**，如下面的截图所示：![如何操作...](img/image_07_010.jpg)
- en: Answer any pop-up screens that may appear appropriately and note the additional
    application paths being discovered and listed in the **Target** tab, as shown
    in the following screenshot:![How to do it...](img/image_07_011.jpg)
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 适当地回答可能出现的弹出屏幕，并注意在**目标**选项卡中发现和列出的其他应用程序路径，如下面的截图所示：![如何操作...](img/image_07_011.jpg)
- en: Now, right-click on the same IP, and this time, click on **Actively scan this
    host**, as shown in the following screenshot:![How to do it...](img/image_07_012.jpg)
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，右键点击相同的IP，这次点击**主动扫描此主机**，如下面的截图所示：![如何操作...](img/image_07_012.jpg)
- en: You have a few options to select and customize before the scan starts; check
    the last point that says **Remove items with the following extensions [20 items]**,
    as shown in the following screenshot:![How to do it...](img/image_07_013.jpg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在扫描开始之前，你有几个选项可以选择和自定义；检查最后一项，即**删除具有以下扩展名的项目[20个项目]**，如下面的截图所示：![如何操作...](img/image_07_013.jpg)
- en: Go to the scanner page; it will show progress of all the running tests on various
    URLs, as shown in the following screenshot:![How to do it...](img/image_07_014.jpg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到扫描器页面；它会显示各种URL上运行测试的进度，如下面的截图所示：![如何操作...](img/image_07_014.jpg)
- en: Now, wait for the scans to complete and open the **Target** tab again and you
    will see the different vulnerabilities detected, as shown in the following screenshot:![How
    to do it...](img/image_07_015.jpg)
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，等待扫描完成，再次打开**目标**选项卡，你会看到检测到的不同漏洞，如下面的截图所示：![如何操作...](img/image_07_015.jpg)
- en: How it works...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We have configured our browser to use Burp proxy on `127.0.0.1` at `8080` port,
    and then we downloaded the vulnerable web application from the Docker hub using
    the `docker pull <image-name>` command. We then started the Docker image in the
    Docker container using the `docker run <image-name>` command and extracted the
    IP address of the running container using `docker inspect <container-id>`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经配置了浏览器在`127.0.0.1`的`8080`端口上使用Burp代理，然后使用`docker pull <image-name>`命令从Docker
    hub下载了易受攻击的Web应用程序。然后我们使用`docker run <image-name>`命令在Docker容器中启动了Docker镜像，并使用`docker
    inspect <container-id>`提取了运行容器的IP地址。
- en: We then navigated to the same IP address in the browser and traversed the application,
    and then we saw how Burp captured every request that we made via our browser.
    We added the same domain in our scope and then went through the whole application
    to figure out all possible URLs in the application. We then finally started the
    active scanning on the host, which found out critical bugs, such as SQL Injection,
    cross-site scripting and command injection. In the next few recipes, we will learn
    how to use the knowledge obtained from this scan and how to use specific tools
    in order to exploit them.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们在浏览器中导航到相同的IP地址并遍历应用程序，然后我们看到Burp如何捕获我们通过浏览器发出的每个请求。我们在范围中添加了相同的域名，然后遍历整个应用程序以找出应用程序中所有可能的URL。最后，我们在主机上开始了主动扫描，发现了关键的漏洞，如SQL注入、跨站脚本和命令注入。在接下来的几个步骤中，我们将学习如何利用这次扫描获得的知识以及如何使用特定工具来利用它们。
- en: Using sqlmap to find SQL Injection on the login page
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用sqlmap在登录页面上查找SQL注入
- en: SQL Injections are always in the OWASP top three in every iteration of OWASP
    Web Application Top 10 Vulnerabilities for a reason. They are the most damaging
    to web applications and thus to businesses as well. Finding an SQL Injection is
    difficult, but if you happen to find one, exploiting it manually till you get
    access on the server is even harder and time consuming. Therefore, it is important
    to use an automated approach because during the penetration testing activity,
    time is always running out and you will always want to confirm the existence of
    an SQL Injection sooner than later.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: SQL注入在OWASP Web应用程序前10大漏洞的每一次迭代中都是前三名。它们对Web应用程序和企业都是最具破坏性的。发现SQL注入是困难的，但如果你碰巧发现了一个，手动利用它直到在服务器上获得访问权限更加困难和耗时。因此，使用自动化方法非常重要，因为在渗透测试活动中，时间总是不够用的，你总是希望尽早确认SQL注入的存在。
- en: Sqlmap is an open source penetration testing tool that automates the process
    of detecting and exploiting SQL Injection flaws and taking over of database servers
    written in Python and being regularly maintained by their developers. SQLMap has
    become a powerful tool and is very reliable in identifying and detecting SQL Injection
    in various parameters.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Sqlmap是一个开源的渗透测试工具，它自动化了检测和利用SQL注入漏洞以及接管数据库服务器的过程，使用Python编写，并由开发人员定期维护。SQLMap已经成为一个强大的工具，在各种参数中识别和检测SQL注入非常可靠。
- en: In this recipe, we will learn how to use sqlmap to find SQL Injection vulnerabilities
    on the login pages of the target web application.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个步骤中，我们将学习如何使用sqlmap在目标Web应用程序的登录页面上查找SQL注入漏洞。
- en: Getting ready
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To step through this recipe, you will need the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要按照这个步骤，你需要以下内容：
- en: An Internet connection
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个互联网连接
- en: Kali Linux running in Oracle Virtualbox
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kali Linux在Oracle Virtualbox中运行
- en: Docker installed Kali Linux
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Docker的Kali Linux
- en: Intrusion-Exploitation Docker image downloaded
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载入侵-利用Docker镜像
- en: How to do it...
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'For this recipe, you need to perform the following steps:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个步骤，你需要执行以下步骤：
- en: Open the terminal and type `sqlmap`, and sqlmap will show its correct usage
    syntax, as shown in the following screenshot:![How to do it...](img/image_07_016.jpg)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，输入`sqlmap`，sqlmap将显示其正确的用法语法，如下面的屏幕截图所示：![操作步骤...](img/image_07_016.jpg)
- en: We will use `http://172.17.0.2/bricks/login-1/index.php` as our target. This
    is an OWASP bricks installation:![How to do it...](img/image_07_017.jpg)
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用`http://172.17.0.2/bricks/login-1/index.php`作为我们的目标。这是一个OWASP bricks安装：![操作步骤...](img/image_07_017.jpg)
- en: Go to **Firefox Preference** | **Advanced** | **Network** | **Settings**, as
    shown in the following screenshot:![How to do it...](img/image_07_018.jpg)
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**Firefox首选项** | **高级** | **网络** | **设置**，如下面的屏幕截图所示：![操作步骤...](img/image_07_018.jpg)
- en: Select **Manual proxy configuration** and enter **HTTP proxy** as `127.0.0.1`
    and **Proxy** as `8080` and check **Use this proxy for all protocols**, as shown
    in the following screenshot:![How to do it...](img/image_07_019.jpg)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**手动代理配置**，输入**HTTP代理**为`127.0.0.1`，**代理**为`8080`，并勾选**为所有协议使用此代理**，如下面的屏幕截图所示：![操作步骤...](img/image_07_019.jpg)
- en: Click on **OK** and come back to the **Bricks Login** page; start Burp Suite
    if you haven't started it already. You can navigate to **Application** | **Web
    Application Analysis** | **Burpsuite**, as shown in the following screenshot:![How
    to do it...](img/image_07_020.jpg)
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**，回到**Bricks登录**页面；如果你还没有启动Burp Suite，就开始启动它。你可以导航到**应用程序** | **Web应用程序分析**
    | **Burpsuite**，如下面的屏幕截图所示：![操作步骤...](img/image_07_020.jpg)
- en: Burp's window will open, and you can select a temporary project and click on
    **Start Burp**; your burp window will look like what is shown in the following
    screenshot:![How to do it...](img/image_07_021.jpg)
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Burp的窗口将打开，你可以选择一个临时项目，然后点击**开始Burp**；你的Burp窗口将看起来像下面的屏幕截图所示：![操作步骤...](img/image_07_021.jpg)
- en: Now open the bricks login page and enter the username and password with any
    string and click on **Submit**. It doesn't matter what you enter in the username
    and password fields because we will be intercepting the request at Burp; once
    you click on the **Submit** button on the login page, you will see the Burp window,
    as shown here:![How to do it...](img/image_07_022.jpg)
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开bricks登录页面，输入任何字符串的用户名和密码，然后点击**提交**。不管你在用户名和密码字段中输入什么，因为我们将在Burp中拦截请求；一旦你点击登录页面上的**提交**按钮，你将看到Burp窗口，如下所示：![操作步骤...](img/image_07_022.jpg)
- en: Right-click anywhere on the Burp window and click on the **Copy to File** menu,
    as shown in the following screenshot:![How to do it...](img/image_07_023.jpg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Burp窗口的任何位置右键单击，然后点击**复制到文件**菜单，如下面的屏幕截图所示：![操作步骤...](img/image_07_023.jpg)
- en: 'On the terminal, run the following command:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端上运行以下命令：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `sqlmap` command will run its heuristic checks and show the database identified
    as MySQL and ask for your confirmation if you want to skip looking for other possible
    databases; type *Y* and press *Enter*, as it is mostly accurate and it is better
    to generate as few requests as possible on the server. Take a look at the following
    screenshot:![How to do it...](img/image_07_024.jpg)
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`sqlmap`命令将运行其启发式检查，并显示识别的数据库为MySQL，并询问您是否要跳过寻找其他可能的数据库；输入*Y*并按*Enter*，因为它通常是准确的，最好在服务器上生成尽可能少的请求。看一下下面的屏幕截图：![操作步骤...](img/image_07_024.jpg)'
- en: Once you press *Enter*, it will ask you whether you want to keep level and risk
    to value. What this means is that while looking for SQL Injection, it performs
    as few requests as possible and should be the least risky SQL statement as possible.
    It is always better to start with value `1`, and if that doesn't work, then increase
    the level and risk to 5; for now, we will type *Y* and press *Enter*, as shown
    in the following screenshot:![How to do it...](img/image_07_025.jpg)
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你按下*Enter*，它会问你是否要保留级别和风险的值。这意味着在寻找SQL注入时，它尽可能少地执行请求，并且应该是尽可能少风险的SQL语句。最好从值`1`开始，如果不起作用，再增加级别和风险到5；现在，我们将输入*Y*并按*Enter*，如下面的屏幕截图所示：![操作步骤...](img/image_07_025.jpg)
- en: After this, sqlmap will prompt you that it is not possible to inject with NULL
    values and ask you whether you wish to use a random integer value for the `- -union-char`
    option. The statement is clear enough to understand; type *Y* and press *Enter*,
    as shown in the following screenshot:![How to do it...](img/image_07_026.jpg)
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，sqlmap会提示您无法使用NULL值进行注入，并询问您是否希望为`- -union-char`选项使用随机整数值。这个陈述很清楚，输入*Y*并按*Enter*，如下面的屏幕截图所示：![操作步骤...](img/image_07_026.jpg)
- en: Sqlmap has identified username to be injectable and vulnerable; now sqlmap is
    prompting whether you would like to keep looking for other vulnerable parameters
    or whether you want to start with exploiting the one parameter that is found to
    be vulnerable. It is usually a good option to look for all vulnerable parameters,
    as you would be able to report to your development about all the parameters on
    which input validation needs to be done; for now, we will type *Y* and press *Enter*,
    as shown in the following screenshot:![How to do it...](img/image_07_027.jpg)
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: sqlmap已经确定用户名是可注入和易受攻击的；现在sqlmap正在询问您是否想要继续寻找其他易受攻击的参数，还是您想要开始利用已发现易受攻击的参数。通常最好查找所有易受攻击的参数，这样您就可以向开发人员报告所有需要进行输入验证的参数；现在，我们将输入*Y*并按*Enter*，如下面的屏幕截图所示：![操作步骤...](img/image_07_027.jpg)
- en: It will keep prompting until all the parameters have been tested; once done,
    sqlmap will prompt you to choose which parameters should be exploited, as shown
    in the following screenshot:![How to do it...](img/image_07_028.jpg)
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 直到所有参数都被测试过才会不断提示；一旦完成，sqlmap会提示您选择应该利用哪些参数，如下面的屏幕截图所示：![操作步骤...](img/image_07_028.jpg)
- en: You can choose any parameters of your choice; for demo, we will choose the username
    parameter and type `**0**` and press *Enter* and immediately sqlmap will start
    retrieving the information you have mentioned in the switches, as shown in the
    following screenshot:![How to do it...](img/image_07_029.jpg)
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以选择任何您喜欢的参数；作为演示，我们将选择用户名参数并输入`**0**`，然后按*Enter*，立即sqlmap将开始检索您在开关中提到的信息，如下面的屏幕截图所示：![操作步骤...](img/image_07_029.jpg)
- en: 'As you can sqlmap as dump database tables names, as shown in the following
    screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，sqlmap可以将数据库表名转储出来，如下面的屏幕截图所示：
- en: '![How to do it...](img/image_07_030.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_07_030.jpg)'
- en: How it works...
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In this recipe, we learned how to use sqlmap to check whether parameters on
    the login page are vulnerable to SQL Injection or not. In this command, we have
    used the following switches:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们学习了如何使用sqlmap来检查登录页面上的参数是否容易受到SQL注入的攻击。在这个命令中，我们使用了以下开关：
- en: '`--url`: This switch gives the target URL to sqlmap. This is a mandatory switch
    in order to run sqlmap.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--url`：此开关提供了sqlmap的目标URL。这是运行sqlmap所必需的开关。'
- en: '`--data`: This is a specific switch that you need to use in order to send post
    data. In our example, we are sending `wp-username`, `wp-pass`, and `wp-submit`
    and their respective values as post data.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--data`：这是一个特定的开关，您需要使用它来发送POST数据。在我们的示例中，我们发送`wp-username`、`wp-pass`和`wp-submit`及其相应的值作为POST数据。'
- en: '`-r`: This switch can be used instead of the `--url` switch. The `-r` switch
    loads the request file with the post data. `/path/to/file`. You can create the
    request file by capturing the `POST` request to the login page using Burp by right-clicking
    on the proxy and saving it to the file option.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-r`：此开关可以代替`--url`开关。`-r`开关加载带有POST数据的请求文件。`/path/to/file`。您可以通过在Burp上右键单击代理并将其保存到文件选项来捕获登录页面的POST请求以创建请求文件。'
- en: '`--dbs`: This switch fetches all database names if any parameter is found to
    be vulnerable and injectable.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--dbs`：如果发现任何参数是易受攻击和可注入的，此开关将获取所有数据库名称。'
- en: '`--tables`: This switch fetches all the table names in the database if any
    parameter is found to be vulnerable and injectable.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--tables`：如果发现任何参数是易受攻击和可注入的，此开关将获取数据库中的所有表名。'
- en: '`--is-dba`: This switch checks whether the application using the database user
    has DBA privileges or not.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--is-dba`：此开关检查应用程序使用的数据库用户是否具有DBA特权。'
- en: '`QLMAP`: This is used to find SQL Injection in URL parameters'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QLMAP`：用于查找URL参数中的SQL注入'
- en: Exploiting SQL Injection on URL parameters using SQL Injection
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用SQL注入攻击URL参数
- en: SQL Injection can be found anywhere in the application, for example, on the
    login page, `GET`,`POST` parameters, behind authentication, and sometimes even
    on cookies themselves. Using sqlmap is not very different from how we have used
    it in the previous recipe, but the intention of this recipe is to help you understand
    how sqlmap can also be used to exploit SQL Injections on pages accessible only
    after authentication.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: SQL注入可能存在于应用程序的任何地方，例如登录页面、`GET`、`POST`参数、身份验证后，有时甚至存在于cookies本身。使用sqlmap与我们在上一个示例中使用它并没有太大的不同，但这个示例的目的是帮助您了解sqlmap也可以用于利用需要认证后才能访问的页面上的SQL注入。
- en: In this recipe, we will look at how we can use sqlmap to exploit SQL Injections
    on authenticated pages. Using the `-r` switch allows sqlmap to use cookies within
    the request while checking for URL, whether they are accessible or not. Since
    sqlmap can process cookies from the saved request, it allows sqlmap to be successfully
    able to identify and exploit SQL Injections.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将看看如何使用sqlmap来利用已认证页面上的SQL注入。使用`-r`开关允许sqlmap在检查URL时使用请求中的cookies，无论它们是否可访问。由于sqlmap可以处理保存的请求中的cookies，它可以成功地识别和利用SQL注入。
- en: Getting ready
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need Kali Linux running in Oracle Virtualbox
    and an Internet connection. No other prerequisites are required.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本示例，您需要在Oracle Virtualbox中运行Kali Linux并连接到互联网。不需要其他先决条件。
- en: How to do it...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'For this recipe, you need to perform the following steps:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本示例，您需要执行以下步骤：
- en: We will use **Damn Vulnerable Web Application** (**DVWA**) hosted at `http://172.17.0.2`.
    Log in using the default DVWA credentials and click on **SQL Injection** present
    at the left-hand side menu. Enter `1` as user ID in the input box, and it will
    show you the details of the user with error messages on the top, as shown in the
    following screenshot:![How to do it...](img/image_07_031.jpg)
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用**Damn Vulnerable Web Application**（**DVWA**）托管在`http://172.17.0.2`。使用默认的DVWA凭据登录，然后单击左侧菜单中的**SQL注入**。在输入框中输入`1`作为用户ID，它将显示您的用户详细信息，并在顶部显示错误消息，如下面的屏幕截图所示：![如何操作...](img/image_07_031.jpg)
- en: 'The preceding error messages clearly point to a potential SQL Injection, and
    we will use sqlmap to exploit this SQL Injection using the following command:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述错误消息清楚地指向潜在的SQL注入，我们将使用sqlmap来利用这个SQL注入，使用以下命令：
- en: '[PRE8]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: On running the preceding command, sqlmap immediately determines that the backend
    database is MySQL and asks for your confirmation to skip any additional checks
    if possible. Press *Y* and continue as shown in the following screenshot:![How
    to do it...](img/image_07_032.jpg)
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行上述命令后，sqlmap立即确定后端数据库是MySQL，并要求您确认是否可能跳过任何其他检查。按*Y*并继续，如下面的屏幕截图所示：![如何操作...](img/image_07_032.jpg)
- en: Sqlmap continues and verifies the vulnerable parameter and asks for user input
    to continue to check for other parameters, as shown in the following screenshot:![How
    to do it...](img/image_07_033.jpg)
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Sqlmap继续验证易受攻击的参数，并要求用户输入以继续检查其他参数，如下面的屏幕截图所示：![如何操作...](img/image_07_033.jpg)
- en: On pressing *N*, it shows you the summary of the vulnerable parameters along
    with the injection type and query used, as shown in the following screenshot:![How
    to do it...](img/image_07_034.jpg)
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*N*，它会显示易受攻击的参数摘要以及使用的注入类型和查询，如下面的屏幕截图所示：![如何操作...](img/image_07_034.jpg)
- en: 'After discovering that the ID parameter is vulnerable to SQL Injection, we
    modify our original command to add additional switches, as shown in the following
    screenshot:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在发现ID参数容易受到SQL注入的情况下，我们修改了原始命令以添加额外的开关，如下面的屏幕截图所示：
- en: '[PRE9]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: On running the preceding command, you can see the following output:![How to
    do it...](img/image_07_035.jpg)
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行上述命令后，您可以看到以下输出：![如何操作...](img/image_07_035.jpg)
- en: Similarly, you can use other switches in sqlmap to go on and completely take
    over the web server.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，您可以使用sqlmap中的其他开关继续完全接管Web服务器。
- en: How it works...
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In this recipe, we have used sqlmap to exploit the ID parameter on the authenticated
    page and extracted the information regarding databases, users, current users,
    current database and hostname, and so on. In the above steps we have used the
    following new switches:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们使用sqlmap来利用经过身份验证的页面上的ID参数，并提取有关数据库、用户、当前用户、当前数据库和主机名等信息。在上述步骤中，我们使用了以下新开关：
- en: '`--cookie`: This switch uses a HTTP cookie header to access authenticated resources'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--cookie`：此开关使用HTTP cookie头来访问经过身份验证的资源'
- en: '`--dbs`: This switch enumerates DBMS databases'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--dbs`：此开关枚举DBMS数据库'
- en: '`--users`: This switch enumerates DBMS users'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--users`：此开关枚举DBMS用户'
- en: '`--current-user`: This switch retrieves DBMS current user'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--current-user`：此开关检索DBMS当前用户'
- en: '`--current-db`: This switch retrieves DBMS current DB'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--current-db`：此开关检索DBMS当前数据库'
- en: '`--hostname`: This switch retrieves DBMS server hostname'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--hostname`：此开关检索DBMS服务器主机名'
- en: Using commix for automated OS command injection
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 使用commix进行自动OS命令注入
- en: In the first recipe of this chapter, we used Burp Scanner to find out the various
    vulnerabilities in web applications. As you can see, we have had the OS command
    injection vulnerability being detected by the Burp scanner.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第一个教程中，我们使用Burp Scanner来发现Web应用程序中的各种漏洞。正如您所看到的，我们已经通过Burp扫描器检测到了OS命令注入漏洞。
- en: Now in this recipe, we will learn how to use the commix tool, which is short
    for [comm]and [i]njection e[x]ploiter, and as the name suggests, it is an automated
    tool for command injection and exploitation. We will use commix to exploit the
    entry point identified by the burp scanner.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在这个教程中，我们将学习如何使用commix工具，它是[comm]and [i]njection e[x]ploiter的缩写，正如其名字所示，它是一个用于命令注入和利用的自动化工具。我们将使用commix来利用Burp扫描器识别的入口点。
- en: Getting ready
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To step through this recipe, you will need the following:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本教程，您需要以下内容：
- en: Kali Linux running on Oracle Virtualbox/VMware
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Oracle Virtualbox/VMware上运行的Kali Linux
- en: Output of Burp Scanner as shown in first recipe of this chapter
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Burp Scanner的输出，如本章的第一个教程中所示
- en: Vulnerable web applications running on Docker
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行在Docker上的易受攻击的Web应用程序
- en: An Internet connection
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互联网连接
- en: How to do it...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'For this recipe, you need to perform the following steps:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，您需要执行以下步骤：
- en: Open the Burp scanner **Target** window, as demonstrated in the previous recipe:![How
    to do it...](img/image_07_036.jpg)
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Burp扫描器**目标**窗口，如前一篇文章所示：![如何操作...](img/image_07_036.jpg)
- en: Click on the command injection vulnerability identified by the Burp Scanner,
    go to the **Request** tab, and observe how the modified request was made and the
    response received by the Burp. We will use the same entry point parameter where
    Burp has identified the command injection and we use it in commix, as shown in
    the following screenshot:![How to do it...](img/image_07_037.jpg)
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击Burp Scanner识别的命令注入漏洞，转到**请求**选项卡，并观察修改后的请求以及Burp接收到的响应。我们将使用Burp识别出的命令注入的相同入口参数，并在commix中使用它，如下面的屏幕截图所示：![如何操作...](img/image_07_037.jpg)
- en: Now open the terminal and type `commix`; it will display the default help in
    the window, as shown in the following screenshot:![How to do it...](img/image_07_038.jpg)
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开终端并输入`commix`；它将在窗口中显示默认的帮助，如下面的屏幕截图所示：![如何操作...](img/image_07_038.jpg)
- en: 'We will use the following command to start the commix:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用以下命令启动commix：
- en: '[PRE10]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The commix will detect whether the URL is reachable and will fetch all the possible
    information possible and then ask you whether you want to open a pseudo terminal
    shell, as shown in the following screenshot:![How to do it...](img/image_07_039.jpg)
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: commix将检测URL是否可达，并获取所有可能的信息，然后询问你是否要打开伪终端Shell，如下截图所示：![如何做...](img/image_07_039.jpg)
- en: If you enter *Y*, you will see the shell prompt, as shown here:![How to do it...](img/image_07_040.jpg)
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果输入*Y*，你会看到Shell提示，如下所示：![如何做...](img/image_07_040.jpg)
- en: 'If you look closely in the output before the pseudo random shell, you will
    notice that commix and gather the hostname, current user, current user privilege,
    and operating system and password file, as shown here:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细观察伪随机Shell之前的输出，你会注意到commix和收集主机名、当前用户、当前用户权限和操作系统和密码文件，如下所示：
- en: '![How to do it...](img/image_07_041.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_07_041.jpg)'
- en: You can type various commands in the pseudo terminal shell and get the output
    on screen; for example, type `pwd` for a present working directory and `id` for
    current user privileges, as shown in the following screenshot:![How to do it...](img/image_07_042.jpg)
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在伪终端Shell中输入各种命令，并在屏幕上得到输出；例如，输入`pwd`来查看当前工作目录，输入`id`来查看当前用户权限，如下截图所示：![如何做...](img/image_07_042.jpg)
- en: How it works...
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In this recipe, we saw how to use commix for command injection and exploitation.
    Since we have already identified one possible parameter where command injection
    could be possible, we used **INJECT_HERE** in order to help commix identify the
    vulnerable parameter to execute queries and show the output. In addition, we used
    the following switches in the tool, whose purpose and description is mentioned
    as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们看到了如何使用commix进行命令注入和利用。由于我们已经确定了一个可能存在命令注入的参数，我们使用**INJECT_HERE**来帮助commix识别可执行查询并显示输出的易受攻击的参数。此外，我们在工具中使用了以下开关，其目的和描述如下：
- en: '`--url`: This switch is used to provide the target URL'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--url`：这个开关用于提供目标URL'
- en: '`--cookie`: This switch is used to provide the cookies to commix if the target
    URL is behind the authentication; commix can use the cookies to be able reach
    the target URL'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--cookie`：这个开关用于向commix提供cookies，如果目标URL在认证后面；commix可以使用cookies来达到目标URL'
- en: '`--data`: This switch is used to provide any `POST` body parameters that need
    to be sent to the target URL to be able to make a valid request'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--data`：这个开关用于提供需要发送到目标URL的任何`POST` body参数，以便能够发出有效的请求'
- en: '`--all`: This switch is used to enumerate as much information as possible from
    the target OS X command injection, using which we can further decide which way
    to get the stable shell on the server using `netcat`'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--all`：这个开关用于枚举尽可能多的来自目标OS X命令注入的信息，使用这些信息我们可以进一步决定如何使用`netcat`在服务器上获得稳定的Shell'
- en: Using Weevely for file upload vulnerability
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Weevely进行文件上传漏洞
- en: In this recipe, we will use Weevely to exploit file upload vulnerabilities.
    Weevely is a stealth PHP web shell that simulates a telnet-like connection. It
    is very handy when you need to create a web shell to exploit file upload vulnerability.
    It works so well that you don't need to look for any tool or shell. Let's get
    started.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将使用Weevely来利用文件上传漏洞。Weevely是一个隐秘的PHP Web Shell，模拟telnet样式的连接。当你需要创建一个Web
    Shell来利用文件上传漏洞时，它非常方便。它工作得非常好，以至于你不需要寻找任何工具或Shell。让我们开始吧。
- en: Getting ready
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need Kali Linux running in Oracle Virtualbox
    and an Internet connection. No other prerequisites are required.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本教程，你需要在Oracle Virtualbox中运行Kali Linux并连接到互联网。不需要其他先决条件。
- en: How to do it...
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'For this recipe, you need to perform the following steps:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，你需要执行以下步骤：
- en: Open the target application file upload page, as shown in the following screenshot:![How
    to do it...](img/image_07_043.jpg)
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开目标应用程序的文件上传页面，如下截图所示：![如何做...](img/image_07_043.jpg)
- en: Open the terminal and type `Weevely`; it will display the sample syntax for
    use, as shown in the following screenshot:![How to do it...](img/image_07_044.jpg)
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并输入`Weevely`；它将显示用法的示例语法，如下截图所示：![如何做...](img/image_07_044.jpg)
- en: 'Now we will need to generate a shell in PHP, which we can do using the following
    command:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要生成一个PHP Shell，可以使用以下命令：
- en: '[PRE11]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Type `ls` and you will see that a new file has been created, named `weevely.php`,
    since our application allows only images to be uploaded we will need to rename
    this file to a `.jpg` extension, as shown in the following command:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`ls`，你会看到一个新文件被创建，名为`weevely.php`，因为我们的应用程序只允许上传图片，所以我们需要将这个文件重命名为`.jpg`扩展名，如下命令所示：
- en: '[PRE12]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Open the target browser with the target application file upload module, click
    on **Browse**, and select this file from the `/root` directory and upload it,
    as shown the following screenshot:![How to do it...](img/image_07_045.jpg)
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用目标应用程序的文件上传模块打开目标浏览器，点击**浏览**，并从`/root`目录中选择此文件并上传，如下截图所示：![如何做...](img/image_07_045.jpg)
- en: 'A successful message shows the path where the file has been uploaded. Copy
    the path and open the terminal and type `weevely <Complete-path-to-uploaded-file>
    <password>`, as shown in the following command:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功的消息显示了文件上传的路径。复制路径，打开终端并输入`weevely <Complete-path-to-uploaded-file> <password>`，如下命令所示：
- en: '[PRE13]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Weevely will try to connect to the uploaded file and will present to you the
    limited (or restricted) shell it has obtained, using which you can run system
    commands and perhaps use it to escalate your privileges, as shown in the following
    screenshot:![How to do it...](img/image_07_046.jpg)
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Weevely将尝试连接到上传的文件，并向你呈现它获取的有限（或受限制的）Shell，你可以在其中运行系统命令，也许可以用它来提升你的权限，如下截图所示：![如何做...](img/image_07_046.jpg)
- en: Another good feature that Weevely provides is that you can use system commands
    directly from a single command. In order to understand this type `weevely help`,
    as shown in the following screenshot:![How to do it...](img/image_07_047.jpg)
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Weevely提供的另一个很好的功能是，您可以直接从单个命令中使用系统命令。为了理解这一点，请输入`weevely help`，如下面的屏幕截图所示：![操作步骤...](img/image_07_047.jpg)
- en: '[PRE14]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: On running this command, Weevely connects to the backdoor and fetches the `/etc./passwd`
    file, as shown in the following screenshot:![How to do it...](img/image_07_048.jpg)
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行此命令时，Weevely将连接到后门并获取`/etc./passwd`文件，如下面的屏幕截图所示：![操作步骤...](img/image_07_048.jpg)
- en: Similarly, you can check the rest of the options available with Weevely and
    extract information from the target server. You can also use Weevely via scripting
    for automation.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，您可以检查Weevely提供的其余选项，并从目标服务器中提取信息。您还可以使用Weevely进行脚本化自动化。
- en: How it works...
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we learned how to use Weevely to exploit file upload vulnerabilities
    and how to use it to get a stable shell to escalate root privileges or directly
    use Weevely to run system commands on the target server.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们学习了如何使用Weevely来利用文件上传漏洞，以及如何使用它来获取稳定的shell以提升root权限，或者直接使用Weevely在目标服务器上运行系统命令。
- en: Exploiting Shellshock using Burp
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用Burp进行Shellshock攻击
- en: In this recipe, we will use Burp to exploit the Shellshock (CVE-2014-6271) vulnerability.
    If you haven't heard about the Shellshock vulnerability, which is also known as
    the Bash bug, it was the GNU bash remote code execution vulnerability, which could
    allow an attacker to gain access over a target machine. Since Bash is being widely
    used, this vulnerability had a huge attack surface and given the high severity
    and ease of exploit of this bug, it was one of the highest impact security issues
    identified in 2014; therefore, we decided to demonstrate how it can be exploited
    using Burp.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用Burp来利用Shellshock（CVE-2014-6271）漏洞。如果您还没有听说过Shellshock漏洞，也就是Bash漏洞，那么它是GNU
    bash远程代码执行漏洞，可以允许攻击者获取对目标机器的访问权限。由于Bash被广泛使用，这个漏洞具有巨大的攻击面，并且由于这个漏洞的高严重性和易于利用性，它是2014年识别出的最严重的安全问题之一；因此，我们决定演示如何使用Burp来利用它。
- en: Getting ready
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To step through this recipe, you will need the following:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本示例，您需要以下内容：
- en: Kali Linux running in Oracle Virtualbox/VMware
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Oracle Virtualbox/VMware中运行的Kali Linux
- en: Docker installed and running in Kali
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Kali中安装并运行Docker
- en: An Internet connection
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互联网连接
- en: How to do it...
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'For this recipe, you need to perform the following steps:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，您需要执行以下步骤：
- en: 'We will start this recipe by searching and downloading a container from Docker
    hub, which is vulnerable to Shellshock, using the following command:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从搜索并下载一个来自Docker hub的对Shellshock存在漏洞的容器开始，使用以下命令：
- en: '[PRE15]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You will see the following output:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![How to do it...](img/image_07_049.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_07_049.jpg)'
- en: 'We will use the very first Docker image for the demonstration, and we will
    use the following command to pull the Docker image:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用第一个Docker映像进行演示，并使用以下命令来拉取Docker映像：
- en: '[PRE16]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, we will run the Docker image as a container using the following command:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将使用以下命令将Docker映像作为容器运行：
- en: '[PRE17]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Since it is a second container running in Kali, it has the `172.17.0.3` IP address;
    you can use `docker inspect <container-name>` to find out the IP address of your
    container. We will now open the browser and visit `72.17.0.3`, and you will see
    the following web page:![How to do it...](img/image_07_050.jpg)
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于它是在Kali中运行的第二个容器，它具有`172.17.0.3`的IP地址；您可以使用`docker inspect <container-name>`来查找容器的IP地址。现在我们将打开浏览器并访问`72.17.0.3`，您将看到以下网页：![操作步骤...](img/image_07_050.jpg)
- en: Since we have already configured our browser to use Burp proxy, navigate to
    **Proxy** | **HTTP history** tab, as shown here:![How to do it...](img/image_07_051.jpg)
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们已经配置了浏览器使用Burp代理，因此导航到**Proxy** | **HTTP history**选项卡，如下所示：![操作步骤...](img/image_07_051.jpg)
- en: Now right-click on it and click on **Send it to Repeater**, as shown in the
    following screenshot:![How to do it...](img/image_07_052.jpg)
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在右键单击它，然后单击**Send it to Repeater**，如下面的屏幕截图所示：![操作步骤...](img/image_07_052.jpg)
- en: 'Go to the repeater window and change the user agent to the following:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到repeater窗口，并将用户代理更改为以下内容：
- en: '[PRE18]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Take a look at the following screenshot:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下下面的屏幕截图：
- en: '![How to do it...](img/image_07_053.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_07_053.jpg)'
- en: Now click on **Go** and you will see the `passwd` file contents in the **Response**
    window, as shown in the following screenshot:![How to do it...](img/image_07_054.jpg)
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击**Go**，您将在**Response**窗口中看到`passwd`文件的内容，如下面的屏幕截图所示：![操作步骤...](img/image_07_054.jpg)
- en: That is how easy it is to exploit shellshock using Burp.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是利用Burp轻松利用shellshock的方法。
- en: How it works...
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we searched and downloaded the Docker container image from the
    Docker hub, which is vulnerable to Shellshock. We then started the container and
    pointed our browser to the container IP address. We used the Burp proxy to select
    the `/cgi-bin/` request and sent it to repeater. In the repeater window, we changed
    `user agent` to the Shellshock exploit string to read the `/etc/passwd` file,
    and we got the `passwd` file contents in response.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们搜索并从Docker hub下载了一个容器映像，该映像对Shellshock存在漏洞。然后我们启动了容器，并将浏览器指向了容器的IP地址。我们使用Burp代理选择了`/cgi-bin/`请求，并将其发送到repeater。在repeater窗口中，我们将`user
    agent`更改为Shellshock利用字符串，以读取`/etc/passwd`文件，并且我们得到了响应中的`passwd`文件内容。
- en: Using Metasploit to exploit Heartbleed
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit来利用Heartbleed
- en: In this recipe, we will be using Metasploit, available in Kali Linux, to exploit
    to the Heartbleed vulnerability. It is not mandatory to use Metasploit to exploit
    Heartbleed. It can be done using simple Python script or a simple Burp plugin
    (in the free version) to figure out whether the server/service is vulnerable to
    Heartbleed. However, we wanted to introduce Metasploit exploit and an auxiliary
    module, which can be very helpful at times.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将使用Kali Linux中的Metasploit来利用Heartbleed漏洞。利用Heartbleed漏洞并不一定要使用Metasploit。可以使用简单的Python脚本或简单的Burp插件（在免费版本中）来确定服务器/服务是否容易受到Heartbleed漏洞的影响。但是，我们想介绍Metasploit
    exploit和一个辅助模块，有时可能会非常有帮助。
- en: Getting ready
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To step through this recipe, you will need the following:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个配方，您需要以下内容：
- en: Kali Linux running on Oracle Virtualbox/VMware
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kali Linux运行在Oracle Virtualbox/VMware上
- en: Docker running on Kali Linux
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Kali Linux上运行的Docker
- en: Vulnerable Web Application Docker container
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易受攻击的Web应用程序Docker容器
- en: An Internet connection
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互联网连接
- en: How to do it...
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'For this recipe, you need to perform the following steps:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，您需要执行以下步骤：
- en: 'We will start this recipe by searching and downloading a container from the
    Docker hub that is vulnerable to Shellshock using the following command:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将通过以下命令搜索并下载一个来自Docker hub的易受Shellshock漏洞影响的容器来开始这个配方：
- en: '[PRE19]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You will see the following output:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![How to do it...](img/image_07_055.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_07_055.jpg)'
- en: 'We will use the very first Docker image for the demonstration, and we will
    use the following command to pull the Docker image:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用第一个Docker镜像进行演示，并使用以下命令来拉取Docker镜像：
- en: '[PRE20]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, we will run the Docker image as a container using the following command:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将使用以下命令将Docker镜像作为容器运行：
- en: '[PRE21]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Since it is a third container running in our Kali, it has the `172.17.0.4` IP
    address. You can use `docker inspect <container-name>` to find out the IP address
    of your container. We will now open the browser and visit `72.17.0.4`. and you
    will see the following web page:![How to do it...](img/image_07_056.jpg)
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于它是我们Kali中运行的第三个容器，它具有`172.17.0.4`的IP地址。您可以使用`docker inspect <container-name>`来查找您的容器的IP地址。我们现在将打开浏览器并访问`72.17.0.4`。您将看到以下网页：![操作步骤...](img/image_07_056.jpg)
- en: Set up your bee-box image using VMware/Virtualbox and open `msfconsole` in your
    Kali Linux, as shown here:![How to do it...](img/image_07_057.jpg)
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用VMware/Virtualbox设置您的bee-box镜像，并在Kali Linux中打开`msfconsole`，如下所示：![操作步骤...](img/image_07_057.jpg)
- en: Type `search heartbleed` to locate Heartbleed-related auxiliary and exploits
    available in Metasploit, as shown here:![How to do it...](img/image_07_058.jpg)
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`search heartbleed`来查找Metasploit中可用的与Heartbleed相关的辅助和利用，如下所示：![操作步骤...](img/image_07_058.jpg)
- en: 'As we can see, there is an auxiliary module available for Heartbleed. We will
    go ahead and use it for our exploitation using the following command:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如我们所看到的，有一个可用于Heartbleed的辅助模块。我们将继续并使用以下命令进行利用：
- en: '[PRE22]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Type `show options` to see the available options, as shown here:![How to do
    it...](img/image_07_059.jpg)
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`show options`来查看可用选项，如下所示：![操作步骤...](img/image_07_059.jpg)
- en: 'You will need to change `rhost` and `rhost` as per your target information;
    in our case, it is as follows:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要根据目标信息更改`rhost`和`rhost`；在我们的情况下，如下所示：
- en: '[PRE23]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: After setting up appropriate settings, we will run the module by typing `run`
    on the `msf` console, and the output will be as shown here:![How to do it...](img/image_07_060.jpg)
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置适当的设置后，我们将在`msf`控制台上输入`run`来运行模块，输出如下：![操作步骤...](img/image_07_060.jpg)
- en: The module has detected this server as vulnerable to Heartbleed. We will now
    go ahead and change the action to `DUMP` from `SCAN` using the command shown in
    the following screenshot:![How to do it...](img/image_07_061.jpg)
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该模块已检测到此服务器容易受到Heartbleed漏洞的影响。我们现在将继续并将操作从`SCAN`更改为`DUMP`，使用以下命令，如下所示：![操作步骤...](img/image_07_061.jpg)
- en: After changing the action, we will run the module again and the output will
    be as follows:![How to do it...](img/image_07_062.jpg)
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改操作后，我们将再次运行模块，输出如下：![操作步骤...](img/image_07_062.jpg)
- en: Data retrieved from the server has been dumped into the file on the directory
    path given by Metasploit. We will go ahead and change the action to `KEYS` from
    `DUMP` and run the module one last time to see whether we can retrieve any private
    keys from the server, as shown here:![How to do it...](img/image_07_063.jpg)
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从服务器检索的数据已经被转储到了Metasploit给出的目录路径上的文件中。我们将继续并将操作从`DUMP`更改为`KEYS`，并最后一次运行模块，看看我们是否可以从服务器检索任何私钥，如下所示：![操作步骤...](img/image_07_063.jpg)
- en: After changing the action, run the module once again to see whether Metasploit
    can retrieve private keys from the server, as shown here:![How to do it...](img/image_07_064.jpg)
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改操作后，再次运行模块，看看Metasploit是否可以从服务器检索私钥，如下所示：![操作步骤...](img/image_07_064.jpg)
- en: As you can see, Metasploit has successfully extracted private keys from the
    vulnerable server.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，Metasploit已成功从易受攻击的服务器中提取了私钥。
- en: How it works...
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we used Metasploit to exploit the SSL Heartbleed vulnerability
    for exploitation, which can dump memory data and extract private keys of the server.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们使用Metasploit来利用SSL Heartbleed漏洞进行利用，可以转储内存数据并提取服务器的私钥。
- en: Using the FIMAP tool for file inclusion attacks (RFI/LFI)
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用FIMAP工具进行文件包含攻击（RFI/LFI）
- en: In the very first recipe, the Burp Scanner also identified the file path travel
    vulnerability. In this recipe, we will learn how to use Fimap to exploit the file
    path traversal vulnerability.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个配方中，Burp Scanner还确定了文件路径遍历漏洞。在这个配方中，我们将学习如何使用Fimap来利用文件路径遍历漏洞。
- en: Fimap is a Python tool that can help in finding, preparing, auditing and finally
    exploiting local and remote file inclusion bugs in web applications automatically.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: Fimap是一个Python工具，可以帮助自动查找、准备、审计和最终利用Web应用程序中的本地和远程文件包含漏洞。
- en: Getting ready
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To step through this recipe, you will need the following:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个配方，您需要以下内容：
- en: Kali Linux running on Oracle Virtualbox/VMware
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kali Linux运行在Oracle Virtualbox/VMware上
- en: Docker running on Kali Linux
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Kali Linux上运行的Docker
- en: Vulnerable Web Application Docker container
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易受攻击的Web应用Docker容器
- en: An Internet connection
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互联网连接
- en: How to do it...
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'For this recipe, you need to perform the following steps:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，您需要执行以下步骤：
- en: Open the browser and navigate to `http:/dvwa.hackhunt.com/dvwa` and log in with
    the default credentials. Click on **File Inclusion** from the left-hand side menu,
    as shown in the following screenshot:![How to do it...](img/image_07_065.jpg)
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器，转到`http:/dvwa.hackhunt.com/dvwa`，并使用默认凭据登录。从左侧菜单中点击**文件包含**，如下面的屏幕截图所示：![操作步骤...](img/image_07_065.jpg)
- en: Open the terminal and type `fimap`, which will show the version and author information,
    as shown in the following screenshot:![How to do it...](img/image_07_066.jpg)
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并输入`fimap`，将显示版本和作者信息，如下面的屏幕截图所示：![操作步骤...](img/image_07_066.jpg)
- en: 'To use Fimap to exploit the LFI/RFI vulnerability, we need to use the following
    command:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用Fimap来利用LFI/RFI漏洞，我们需要使用以下命令：
- en: '[PRE24]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Fimap will start looking for the local file it can read from the server and
    will display it if the target is vulnerable to a file inclusion attack, as shown
    in the following screenshot:![How to do it...](img/image_07_067.jpg)
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Fimap将开始查找服务器上可以读取的本地文件，并在目标易受文件包含攻击时显示它，如下面的屏幕截图所示：![操作步骤...](img/image_07_067.jpg)
- en: At the end, Fimap will show all the files it was able to read from the server,
    as shown in the following screenshot:![How to do it...](img/image_07_068.jpg)
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，Fimap将显示它能够从服务器上读取的所有文件，如下面的屏幕截图所示：![操作步骤...](img/image_07_068.jpg)
- en: 'Now we will use the command which we used earlier with `-x` at the end in order
    to go ahead and exploit this file inclusion and get us a shell of the server,
    as shown here:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将使用之前使用的带有`-x`结尾的命令，以便继续利用此文件包含并获取服务器的shell，如下所示：
- en: '[PRE25]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Fimap will start an interactive menu as and ask for the input; choose `1` as
    our domain is `dvwa.hackhunt.com`, as shown here:![How to do it...](img/image_07_069.jpg)
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Fimap将启动交互式菜单并要求输入；选择`1`，因为我们的域是`dvwa.hackhunt.com`，如下所示：![操作步骤...](img/image_07_069.jpg)
- en: In the next step, it will ask you to choose the vulnerable bug to start with;
    for our example, we will choose `1`, as shown in following screenshot:![How to
    do it...](img/image_07_070.jpg)
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一步中，它将要求您选择要开始的易受攻击的漏洞；对于我们的示例，我们将选择`1`，如下面的屏幕截图所示：![操作步骤...](img/image_07_070.jpg)
- en: In the next step, it gives you two options. `1` is to spawn a direct shell and
    the second is to create a reverse shell using the pentest monkey script. For our
    demonstration, we will use `1`, as shown in the following screenshot:![How to
    do it...](img/image_07_071.jpg)
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一步中，它会给您两个选项。`1`是生成直接shell，第二个是使用pentest monkey脚本创建反向shell。对于我们的演示，我们将使用`1`，如下面的屏幕截图所示：![操作步骤...](img/image_07_071.jpg)
- en: As you can see, we have successfully received the shell, as shown in the following
    screenshot:![How to do it...](img/image_07_072.jpg)
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您所见，我们已成功接收到shell，如下面的屏幕截图所示：![操作步骤...](img/image_07_072.jpg)
- en: We can use this channel to get us a stable shell and finally escalate to get
    root privileges on the server.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用此通道获取稳定的shell，并最终提升到服务器上的root权限。
- en: How it works...
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In this recipe, we used Fimap to exploit local and remote file inclusion and
    get shell access on the server. In this recipe, we used the following switches:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用Fimap来利用本地和远程文件包含，并在服务器上获取shell访问权限。在这个示例中，我们使用了以下开关：
- en: '* `-u`: This indicates the target URL.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -u：这表示目标URL。
- en: '`--cookie`: Since our point of injection was after the authentication, we had
    to use this option in order to set cookies so that Fimap can access the injection
    point.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: --cookie：由于我们的注入点在身份验证之后，我们必须使用此选项来设置cookie，以便Fimap可以访问注入点。
- en: '`--enable-blind`: This switch is very helpful when Fimap isn''t able to detect
    something or if there are no error messages appearing. Note that this mode will
    cause lots of requests compared to the'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: --enable-blind：当Fimap无法检测到某些内容或没有出现错误消息时，此开关非常有用。请注意，此模式将导致大量请求。
- en: '`-x`: This is used to exploit the remote file inclusion vulnerability and spawn
    a shell automatically.'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -x：用于利用远程文件包含漏洞并自动生成shell。
