- en: Password Attacks – The Fault in Their Stars
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 密码攻击-它们的星星中的错误
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下教程：
- en: Identifying different types of hash in the wild!
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别野外中的不同类型的哈希！
- en: Using hash-identifier
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用哈希标识符
- en: Cracking with patator
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用patator破解
- en: Cracking hashes online
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在线破解哈希
- en: Playing with John the ripper
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与约翰·里波特一起玩
- en: Johnny Bravo!
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 约翰尼·布拉沃！
- en: Using cewl
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用cewl
- en: Generating word list with crunch
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用crunch生成单词列表
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: A weak password is a well-known scenario where most of the corporates are compromised.
    A lot of people use weak passwords that can be brute forced and plaintext can
    be obtained. In this chapter, we will talk about different ways in which we can
    crack a password hash obtained during a pentest activity performed on a webapp/network,
    among others.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 弱密码是一个众所周知的情况，大多数公司都会受到影响。很多人使用可以被暴力破解的弱密码，可以获得明文。在本章中，我们将讨论在webapp/network上进行渗透测试活动期间获得的密码哈希的不同破解方法。
- en: Identifying different types of hash in the wild!
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别野外中的不同类型的哈希！
- en: Hashes are generated by one-way mathematical algorithms, which means they cannot
    be reversed. The only way to break is to brute force them. In this recipe, you
    will learn how to identify some of the different types of hashes.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希是由单向数学算法生成的，这意味着它们无法被反转。打破的唯一方法是暴力破解它们。在这个教程中，您将学习如何识别一些不同类型的哈希。
- en: How to do it...
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Following are the types of hashes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是哈希的类型。
- en: MD5
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MD5
- en: 'This is the most common type of hash. MD stands for **Message Digest** algorithm.
    These hashes can be identified using the following observation:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最常见的哈希类型。MD代表**消息摘要**算法。可以使用以下观察来识别这些哈希：
- en: They are hexadecimal
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们是十六进制的
- en: They are 32 characters in length and of 128 bits, for example, `21232f297a57a5a743894a0e4a801fc3`
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们的长度为32个字符，128位，例如`21232f297a57a5a743894a0e4a801fc3`
- en: MySQL less than v4.1
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL小于v4.1
- en: 'We may come across such hashes while extracting data from SQL Injection. These
    hashes can be identified using the following observation:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能在从SQL注入中提取数据时遇到这些哈希。可以使用以下观察来识别这些哈希：
- en: They are hexadecimal as well
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们也是十六进制的
- en: They are 16 characters in length of and 64 bits, for example, `606727496645bcba`
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们的长度为16个字符，64位，例如`606727496645bcba`
- en: MD5 (WordPress)
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MD5（WordPress）
- en: 'This is used on websites made via WordPress. These hashes can be identified
    using the following observation:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这在通过WordPress制作的网站上使用。可以使用以下观察来识别这些哈希：
- en: They begin with `$P$`
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们以`$P$`开头
- en: They contain alphanumeric characters
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们包含字母数字字符
- en: They are 34 characters in length and of 64 bits, for example, `$P$9QGUsR07ob2qNMbmSCRh3Moi6ehJZR`
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们的长度为34个字符，64位，例如`$P$9QGUsR07ob2qNMbmSCRh3Moi6ehJZR`
- en: MySQL 5
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL 5
- en: 'This is used in newer versions of MySQL to store credentials. These hashes
    can be identified using the following observation:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这在MySQL的新版本中用于存储凭据。可以使用以下观察来识别这些哈希：
- en: They are all CAPS
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们全是大写
- en: They always start with an *asterisk*
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们总是以星号开头
- en: They are 41 characters in length, for example, `*4ACFE3202A5FF5CF467898FC58AAB1D615029441`
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们的长度为41个字符，例如`*4ACFE3202A5FF5CF467898FC58AAB1D615029441`
- en: Base64 encoding
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Base64编码
- en: 'Base64 is easy to identify. The conversion is done by encoding eight octets
    into four characters. The easiest way to check a Base64 is as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Base64很容易识别。转换是通过将八个八位字节编码为四个字符来完成的。检查Base64的最简单方法如下：
- en: Verify that the length is a multiple of 4 characters
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证长度是否为4的倍数
- en: Verify that every character is in the set A-Z, a-z, 0-9, +, / except the padding
    at the end, which is 0, 1, or 2, = characters, for example, `YW55IGNhcm5hbCBwbGVhc3VyZS4=`
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证每个字符是否在A-Z、a-z、0-9、+、/的集合中，除了末尾的填充，它是0、1或2，=字符，例如`YW55IGNhcm5hbCBwbGVhc3VyZS4=`
- en: There's more...
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Here''s an article to learn more about different types of hashes:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一篇文章，了解更多关于不同类型的哈希：
- en: '[http://www.101hacker.com/2010/12/hashes-and-seeds-know-basics.html](http://www.101hacker.com/2010/12/hashes-and-seeds-know-basics.html)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.101hacker.com/2010/12/hashes-and-seeds-know-basics.html](http://www.101hacker.com/2010/12/hashes-and-seeds-know-basics.html)'
- en: Using hash-identifier
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用哈希标识符
- en: In the preceding recipe, you learned how to identify some common hash types.
    But there are other hashes as well, and in this recipe, you will learn how to
    identify other hashes we find during our pentesting project.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的教程中，您学会了如何识别一些常见的哈希类型。但是还有其他类型的哈希，本教程中，您将学习如何识别我们在渗透测试项目中发现的其他哈希。
- en: How to do it...
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps demonstrate the use of hash-identifier:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤演示了哈希标识符的使用：
- en: 'Kali comes preinstalled with a tool called hash identifier. To start the tool,
    we use the following command:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kali预装了一个名为哈希标识符的工具。要启动该工具，我们使用以下命令：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了前面命令的输出：
- en: '![](img/7621405e-a661-48b5-91dd-730589d384a7.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7621405e-a661-48b5-91dd-730589d384a7.png)'
- en: 'Now all we need to do is paste the hash we found here, and it will show us
    the type:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们只需要在这里粘贴我们找到的哈希，它会显示给我们类型：
- en: '![](img/fda88db1-ba2a-4f6c-8646-24dfc886216a.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fda88db1-ba2a-4f6c-8646-24dfc886216a.png)'
- en: Cracking with patator
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用patator破解
- en: Sometimes, it is possible we have the usernames but we want to try brute forcing
    the password for it. Patator is an amazing tool that allows us to brute force
    multiple types of logins and even ZIP passwords. In this recipe, we will see how
    to use patator to perform a brute force attack.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们可能有用户名，但我们想尝试暴力破解密码。Patator是一个令人惊奇的工具，可以让我们暴力破解多种类型的登录，甚至ZIP密码。在本教程中，我们将看到如何使用patator执行暴力破解攻击。
- en: How to do it...
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Following are the steps to use patator:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用patator的步骤：
- en: 'To see all the options, we use the following command:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看所有选项，我们使用以下命令：
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了前面命令的输出：
- en: '![](img/46dc4fa8-7370-4303-8994-e4eaef109036.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/46dc4fa8-7370-4303-8994-e4eaef109036.png)'
- en: 'Let''s try to brute force an FTP login:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试暴力破解FTP登录：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令的输出：
- en: '![](img/a0c1dadf-bd97-4661-9503-f340c6373d8f.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a0c1dadf-bd97-4661-9503-f340c6373d8f.png)'
- en: 'We can now set the `host`, `user` file, and `password` file and run the module:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以设置`host`、`user`文件和`password`文件并运行模块：
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令的输出：
- en: '![](img/6c9f8b24-4d4f-4c4f-a0ca-06aafd033b93.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6c9f8b24-4d4f-4c4f-a0ca-06aafd033b93.png)'
- en: We can see that access has been granted and the module has stopped.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以看到已经获得了访问权限并且模块已停止。
- en: Cracking hashes online
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在线破解哈希值
- en: 'Often when we come across hashes while pentesting, it''s a good idea to check
    the hash online: whether it has been already cracked or not. In this recipe, you
    will learn about some of the cool websites that provide the hash cracking service.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通常在渗透测试中遇到哈希值时，最好在线检查哈希值：它是否已经被破解。在这个教程中，您将了解一些提供哈希值破解服务的很酷的网站。
- en: How to do it...
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Let's take a look at identifying different types of hashes.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看识别不同类型的哈希值。
- en: Hashkiller
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hashkiller
- en: 'The following steps demonstrate the use of Hashkiller:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤演示了Hashkiller的使用：
- en: 'Hashkiller is a great service where we can submit our hashes, and if it has
    already been cracked in the past, it will show us the plaintext:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Hashkiller是一个很棒的服务，我们可以提交我们的哈希值，如果它在过去已经被破解，它将向我们显示明文：
- en: '![](img/714fa5ac-a3a0-4378-b325-97dee1e71141.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/714fa5ac-a3a0-4378-b325-97dee1e71141.png)'
- en: 'The process is simple; we simply choose the option on the website where it
    says Decrypter / Cracker and then we click on the type of hash we want to crack:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个过程很简单；我们只需在网站上选择解密器/破解器的选项，然后点击我们想要破解的哈希类型：
- en: '![](img/7a0893f5-8a61-4c69-9be4-c06c4d78fe7d.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7a0893f5-8a61-4c69-9be4-c06c4d78fe7d.png)'
- en: 'On the page that opens, we paste our hash, fill in the CAPTCHA, and then click
    on Submit:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在打开的页面上，我们粘贴我们的哈希值，填写验证码，然后点击提交：
- en: '![](img/28c468cd-eb2d-4af7-b625-7cd3d6e09519.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/28c468cd-eb2d-4af7-b625-7cd3d6e09519.png)'
- en: 'If the hash exists, it will show us the plaintext; else, we will see a message
    saying Failed to find any hashes!:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果哈希值存在，它将向我们显示明文；否则，我们将看到一条消息，显示未找到任何哈希值！：
- en: '![](img/0d907b24-ab9a-4c4e-a44c-eba1f711ee3f.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0d907b24-ab9a-4c4e-a44c-eba1f711ee3f.png)'
- en: Crackstation
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Crackstation
- en: 'Crackstation is a free service that supports MD2, MD5, NTLM, and SHA1 cracking.
    It uses its own word list and lookup tables to effectively perform a plaintext
    search of a hash from its database:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Crackstation是一个免费的服务，支持MD2、MD5、NTLM和SHA1破解。它使用自己的单词列表和查找表来有效地从数据库中执行哈希的明文搜索：
- en: 'We visit the website [https://crackstation.net/](https://crackstation.net/):'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们访问网站[https://crackstation.net/](https://crackstation.net/)：
- en: '![](img/ed038a5f-d588-44ca-9834-f7c14a7d810a.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed038a5f-d588-44ca-9834-f7c14a7d810a.png)'
- en: 'We paste the hash that we want to crack and fill in the CAPTCHA:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们粘贴要破解的哈希值并填写验证码：
- en: '![](img/f00d32e0-bd02-45a2-a8ee-4e0675027952.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f00d32e0-bd02-45a2-a8ee-4e0675027952.png)'
- en: 'We will see the plaintext if the hash is found; else, we see a message that
    says the hash was not found:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果找到哈希值，我们将看到明文；否则，我们会看到一个消息，说哈希值未找到：
- en: '![](img/914c8ba8-702a-449f-87e9-2d8634a70d38.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/914c8ba8-702a-449f-87e9-2d8634a70d38.png)'
- en: 'Crackstation also provides a download link of its password list and lookup
    tables if we want to use it for the offline cracking of passwords using hashcat,
    among others, [https://crackstation.net/buy-crackstation-wordlist-password-cracking-dictionary.htm](https://crackstation.net/buy-crackstation-wordlist-password-cracking-dictionary.htm):'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Crackstation还提供其密码列表和查找表的下载链接，如果我们想要使用它来离线使用hashcat等工具破解密码，[https://crackstation.net/buy-crackstation-wordlist-password-cracking-dictionary.htm](https://crackstation.net/buy-crackstation-wordlist-password-cracking-dictionary.htm)：
- en: '![](img/b78c8393-ef80-4e56-882d-38b09393bae3.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b78c8393-ef80-4e56-882d-38b09393bae3.png)'
- en: OnlineHashCrack
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OnlineHashCrack
- en: 'This is a freemium service and one of my favorites. It supports OSX, MD4, MD5,
    NTLM, WPA(2), and the brute forcing of Word, Excel, PPT-protected documents as
    well. It provides up to eight characters password-free, after which it charges
    a small fee to reveal the password, which has been cracked successfully:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个付费服务，也是我最喜欢的之一。它支持OSX、MD4、MD5、NTLM、WPA(2)，以及对Word、Excel、PPT受保护文档的暴力破解。它提供八个字符的免费密码，之后收取一小费来显示成功破解的密码：
- en: 'We visit the website [http://onlinehashcrack.com/](http://onlinehashcrack.com/):'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们访问网站[http://onlinehashcrack.com/](http://onlinehashcrack.com/)：
- en: '![](img/0eaa159d-5873-497f-8093-3df7e508bc9a.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0eaa159d-5873-497f-8093-3df7e508bc9a.png)'
- en: 'Here, we can submit our hashes or the `.apt` file for cracking and the email
    address where we want to receive our notification:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们可以提交我们的哈希值或`.apt`文件进行破解，并填写我们想要接收通知的电子邮件地址：
- en: '![](img/6e5f8a60-ce72-4348-a0ef-19dcd1f17179.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e5f8a60-ce72-4348-a0ef-19dcd1f17179.png)'
- en: 'On the unique link we receive in our email, we can then see the status of all
    the hashes that were cracked or not found on the website:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的电子邮件中收到的唯一链接上，我们可以看到所有已破解或未在网站上找到的哈希值的状态：
- en: '![](img/91e5dc8d-b703-40a1-8904-1b615c2fabc1.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/91e5dc8d-b703-40a1-8904-1b615c2fabc1.png)'
- en: Playing with John the ripper
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 玩弄约翰·里帕
- en: Websites and online services may not be always available and it is also possible
    that those websites may not have the plaintext of the hash we have found. In such
    cases, we can use different offline tools that are available to crack the hashes.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 网站和在线服务可能并不总是可用，也有可能这些网站可能没有我们找到的哈希值的明文。在这种情况下，我们可以使用不同的离线工具来破解哈希值。
- en: Let's assume we now have the hash and we have identified what type it is. In
    this recipe, we will see how to crack hashes with John the ripper. John is fast
    and supports various cracking modes. It also has the ability to auto-detect the
    hash type.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们现在有哈希值，并且已经确定了它的类型。在这个教程中，我们将看到如何使用约翰·里帕破解哈希值。约翰速度快，支持各种破解模式。它还具有自动检测哈希类型的能力。
- en: How to do it...
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'to learn about John the ripper, follow the given steps:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解约翰·里帕，按照给定的步骤进行：
- en: 'We can see the full features using the help (`-h`) command:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用帮助（`-h`）命令查看完整的功能：
- en: '[PRE4]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了前面命令的输出：
- en: '![](img/dcdde2e5-00c3-422a-82d9-b0db8d96d0c4.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dcdde2e5-00c3-422a-82d9-b0db8d96d0c4.png)'
- en: 'To crack the password, we use the following command:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要破解密码，我们使用以下命令：
- en: '[PRE5]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We will see that the password has been cracked successfully!
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将看到密码已成功破解！
- en: '![](img/65614c93-756b-41a0-a96b-94197c32f363.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/65614c93-756b-41a0-a96b-94197c32f363.png)'
- en: There's more...
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'For more information you can refer to the following articles:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，您可以参考以下文章：
- en: '[http://pentestmonkey.net/cheat-sheet/john-the-ripper-hash-formats](http://pentestmonkey.net/cheat-sheet/john-the-ripper-hash-formats)'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://pentestmonkey.net/cheat-sheet/john-the-ripper-hash-formats](http://pentestmonkey.net/cheat-sheet/john-the-ripper-hash-formats)'
- en: Johnny Bravo!
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 约翰尼·布拉沃！
- en: Johnny is a GUI client for John. Since it adds a UI, it becomes much easier
    to use.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Johnny是John的GUI客户端。由于它添加了一个UI，因此使用起来更加容易。
- en: How to do it...
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To learn about Johnny follow the given steps:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解Johnny，请按照给定的步骤：
- en: 'You have learned to use John in our previous recipe. We will start Johnny using
    the following command:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们之前的教程中，您已经学会了如何使用John。我们将使用以下命令启动Johnny：
- en: '[PRE6]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了前面命令的输出：
- en: '![](img/7a6df28f-4ea3-4062-babd-bbca0835b8ec.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7a6df28f-4ea3-4062-babd-bbca0835b8ec.png)'
- en: 'We load our password file by clicking on the Open Passwd File option. Our file
    is loaded:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过单击“打开密码文件”选项来加载我们的密码文件。我们的文件已加载：
- en: '![](img/67bfc2c7-9007-473f-b365-b06b0f18a239.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67bfc2c7-9007-473f-b365-b06b0f18a239.png)'
- en: 'Now we go to Options and choose the type of attack we want to perform:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们转到选项，并选择我们要执行的攻击类型：
- en: '![](img/94dda386-d2cf-4eea-817b-d93b7cee9917.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/94dda386-d2cf-4eea-817b-d93b7cee9917.png)'
- en: 'We choose the Format of the hash:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们选择哈希的格式：
- en: '![](img/7ac61e99-c00b-477f-97f6-8f33da475e27.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7ac61e99-c00b-477f-97f6-8f33da475e27.png)'
- en: Once it is done, we click on Start Attack, and we should see our password when
    it's cracked.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，我们点击开始攻击，当密码破解时，我们应该看到我们的密码。
- en: Using cewl
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用cewl
- en: The `cewl` is a ruby-based crawler that crawls a URL and searches for words
    that can be used for password attacks. In this recipe we will look at how to use
    it to our advantage.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`cewl`是一个基于Ruby的爬虫，它爬取URL并搜索可用于密码攻击的单词。在这个教程中，我们将看看如何利用它。'
- en: How to do it...
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Following are the steps on using `cewl`:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用`cewl`的步骤：
- en: 'To view all the options of `cewl`, we use this command:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看`cewl`的所有选项，我们使用这个命令：
- en: '[PRE7]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了前面命令的输出：
- en: '![](img/28ca2f77-8349-4e38-b55b-0abbdd363864.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/28ca2f77-8349-4e38-b55b-0abbdd363864.png)'
- en: 'To crawl a website, we use this command:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要爬取一个网站，我们使用这个命令：
- en: '[PRE8]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了前面命令的输出：
- en: '![](img/7e77aa60-2a6c-4450-8ac5-3b726f06fd65.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7e77aa60-2a6c-4450-8ac5-3b726f06fd65.png)'
- en: 'We will see a list of interesting keywords that can be used to make our own
    dictionary the password list:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将看到一个有趣的关键字列表，可以用来制作我们自己的字典密码列表：
- en: '![](img/501811e8-de2e-4af9-9d15-1db24d860544.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/501811e8-de2e-4af9-9d15-1db24d860544.png)'
- en: Generating word list with crunch
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用crunch生成单词列表
- en: Crunch is a word list generator. It uses permutations and combinations to generate
    all possible combinations of the supplied character set.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Crunch是一个单词列表生成器。它使用排列和组合来生成所提供字符集的所有可能组合。
- en: How to do it...
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To learn about Crunch follow the given steps:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解Crunch，请按照给定的步骤：
- en: 'Crunch is preinstalled with Kali, and we can launch it with this command:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Crunch已经预装在Kali中，我们可以使用以下命令启动它：
- en: '[PRE9]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](img/38d54f58-1bb5-468d-9831-e552fe6af082.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/38d54f58-1bb5-468d-9831-e552fe6af082.png)'
- en: 'As we see, it is easy to use to generate a password list of a minimum of two
    characters and maximum of two characters containing only `abcdef`, and we can
    use the following command:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如我们所看到的，很容易使用`abcdef`生成一个最小为两个字符，最大为两个字符的密码列表，我们可以使用以下命令：
- en: '[PRE10]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can see that the word list has been generated:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到已经生成了单词列表：
- en: '![](img/a494141a-f419-4c9a-bfe3-dd7c91460257.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a494141a-f419-4c9a-bfe3-dd7c91460257.png)'
- en: To save it in a file, we can use the `-o` switch. Crunch also has an inbuilt
    list containing a predefined character set. It can be found at `/usr/share/crunch/charset.lst`.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将其保存到文件中，我们可以使用`-o`开关。Crunch还有一个内置列表，其中包含预定义的字符集。它可以在`/usr/share/crunch/charset.lst`中找到。
- en: 'To use a charset, we use the `-f` switch:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用字符集，我们使用`-f`开关：
- en: '[PRE11]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了前面命令的输出：
- en: '![](img/16b316a9-0366-4841-9a00-e945fd4cae5f.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16b316a9-0366-4841-9a00-e945fd4cae5f.png)'
- en: 'This will generate a list of a minimum length and maximum length of `2`, containing
    lowercase alphabets. Crunch also has a `-t` switch, which can be used to create
    a word list of a specific pattern:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将生成一个包含小写字母的最小长度和最大长度为`2`的列表。Crunch还有一个`-t`开关，可以用来创建特定模式的单词列表：
- en: '`@`: This will insert lowercase characters'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@`: 这将插入小写字符'
- en: '`,`: This will insert uppercase characters'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`,`: 这将插入大写字符'
- en: '`%`: This will insert numbers'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%`: 这将插入数字'
- en: '`^`: This will insert symbols'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`^`: 这将插入符号'
- en: 'Switch `-b` can be used to specify the size of the file you want to create:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开关`-b`可以用来指定要创建的文件的大小：
- en: '![](img/4deacd02-cccb-477c-941a-57b657c1c6bf.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4deacd02-cccb-477c-941a-57b657c1c6bf.png)'
- en: 'Let''s try to create a list with a specific pattern and of 1 MB in size:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试创建一个具有特定模式且大小为1 MB的列表：
- en: '[PRE12]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Once it''s, done, we will see a list of text files created with the pattern
    in the same folder:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，我们将看到一个包含相同文件夹中模式的文本文件列表：
- en: '![](img/b748c3bc-c127-40bd-8434-8d513052907a.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b748c3bc-c127-40bd-8434-8d513052907a.png)'
- en: 'The `-z` flag can be used to create a word list and save it in a compressed
    file. The compression is done on the go:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`-z`标志可用于创建单词列表并将其保存在压缩文件中。压缩是在进行中完成的：'
- en: '[PRE13]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了前面命令的输出：
- en: '![](img/89842d96-8111-4070-868a-8f115ff80512.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/89842d96-8111-4070-868a-8f115ff80512.png)'
