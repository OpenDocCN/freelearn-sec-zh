- en: Chapter 11. Post Exploitation – Pivoting and Network Sniffing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。后期利用-枢轴和网络嗅探
- en: What is pivoting?
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是枢轴？
- en: Pivoting in simple terms is depending on one element to make use of the other
    element. In this chapter, we will look into the art of pivoting and network sniffing.
    The scenario is more applicable to end-system firewalls, or maybe a web server,
    which are the only points for getting into the internal network. We would leverage
    this connectivity of the web server with the internal network to connect to the
    internal systems through our exploitation techniques covered in the previous chapters.
    So in simple words, the first compromised system aids us in compromising the other
    systems, which are inaccessible from the outside network.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，枢轴取决于一个元素来利用另一个元素。在本章中，我们将探讨枢轴和网络嗅探的艺术。这种情况更适用于终端系统防火墙，或者可能是Web服务器，它们是进入内部网络的唯一点。我们将利用Web服务器与内部网络的连接，通过前几章中介绍的我们的利用技术连接到内部系统。简而言之，第一个被攻陷的系统帮助我们攻陷其他无法从外部网络访问的系统。
- en: '![What is pivoting?](img/3589_11_01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![什么是枢轴？](img/3589_11_01.jpg)'
- en: Pivoting in a network
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在网络中的枢轴
- en: Well, this is a very interesting part of Metasploit where we will hack into
    a LAN network by compromising a system. Here, we already have a compromised system,
    and we have a `meterpreter` shell of that system.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Metasploit非常有趣的部分，我们将通过攻陷系统来入侵局域网。在这里，我们已经有了一个被攻陷的系统，并且我们有该系统的`meterpreter`
    shell。
- en: 'First let us check the IP settings on that system by typing in `ipconfig`.
    We can see in the screenshot that the victim has two network adapters. `Adapter
    #2` has the IP of `10.10.10.1` range.![Pivoting in a network](img/3589_11_02.jpg)'
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先让我们通过输入`ipconfig`来检查该系统的IP设置。我们可以在截图中看到受害者有两个网络适配器。`适配器＃2`的IP范围为`10.10.10.1`。![在网络中的枢轴](img/3589_11_02.jpg)
- en: Now we will check the whole network routing table using the route command by
    typing in `route`.![Pivoting in a network](img/3589_11_03.jpg)
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将通过输入`route`命令来检查整个网络路由表。![在网络中的枢轴](img/3589_11_03.jpg)
- en: Now our plan is to attack this additional network. For this attack, Metasploit
    has a post exploitation script, which is known as `autoroute`. This script allows
    us to attack the second network using the first compromised system. Using this
    script we can attack the second network from this compromised system. Type in
    `run autoroute -h` and it will show all usage commands of the script.![Pivoting
    in a network](img/3589_11_04.jpg)
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们的计划是攻击这个额外的网络。对于这次攻击，Metasploit有一个后期利用脚本，称为`autoroute`。这个脚本允许我们使用第一个被攻陷的系统攻击第二个网络。使用这个脚本，我们可以从这个被攻陷的系统攻击第二个网络。输入`run
    autoroute -h`，它将显示脚本的所有用法命令。![在网络中的枢轴](img/3589_11_04.jpg)
- en: Here we are using `run autoroute -s 10.10.10.1/24`; running this command will
    add a route to the target machine from our compromised system.![Pivoting in a
    network](img/3589_11_05.jpg)
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们使用`run autoroute -s 10.10.10.1/24`；运行此命令将从我们的被攻陷系统向目标机器添加一条路由。![在网络中的枢轴](img/3589_11_05.jpg)
- en: Now, we can see in the preceding screenshot that a route has been added via
    `192.168.0.110`, which is our compromised system. Now we will verify whether our
    route has been added or not by typing in `run auroroute -p`.![Pivoting in a network](img/3589_11_06.jpg)
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以在前面的截图中看到通过`192.168.0.110`添加了一条路由，这是我们的被攻陷系统。现在我们将验证我们的路由是否已添加，输入`run
    auroroute -p`。![在网络中的枢轴](img/3589_11_06.jpg)
- en: We can see in the screenshot that our route has been successfully added in the
    routing table. Next what we have to do is to escalate the privileges of the compromised
    system. For this, we type in `getsystem`.![Pivoting in a network](img/3589_11_07.jpg)
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在截图中看到我们的路由已成功添加到路由表中。接下来我们要做的是提升被攻陷系统的权限。为此，我们输入`getsystem`。![在网络中的枢轴](img/3589_11_07.jpg)
- en: After escalating the privileges of the compromised system, we can now dump the
    hashes of all users and get their passwords. To do so, we type in `run hashdump`.![Pivoting
    in a network](img/3589_11_08.jpg)
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提升了被攻陷系统的权限后，我们现在可以转储所有用户的哈希并获取他们的密码。为此，我们输入`run hashdump`。![在网络中的枢轴](img/3589_11_08.jpg)
- en: After successfully dumping the credentials, we will background our `meterpreter`
    process by pressing *Ctrl* + *Z* and then pressing *Y*.![Pivoting in a network](img/3589_11_09.jpg)
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功转储凭证后，我们将通过按下*Ctrl* + *Z*然后按*Y*将我们的`meterpreter`进程放到后台。![在网络中的枢轴](img/3589_11_09.jpg)
- en: The next thing we do is to scan the second network address to check whether
    the other systems are online or not, and also check for open ports. So we perform
    a TCP port scan by using an auxiliary module. For this, we type in `use auxiliary/scanner/portscan/tcp`.![Pivoting
    in a network](img/3589_11_10.jpg)
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来要做的是扫描第二个网络地址，检查其他系统是否在线，还要检查开放的端口。因此，我们使用辅助模块进行TCP端口扫描。为此，我们输入`use auxiliary/scanner/portscan/tcp`。![在网络中的枢轴](img/3589_11_10.jpg)
- en: Now type in `show options` and it will show all the options of this module that
    are usable for this module.![Pivoting in a network](img/3589_11_11.jpg)
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在输入`show options`，它将显示该模块可用的所有选项。![在网络中的枢轴](img/3589_11_11.jpg)
- en: Now we will set our target address range in the `RHOST` options. So, type in
    `set rhosts <target IP range>`; for example, here we are using `set rhosts 10.10.10.1/24`.![Pivoting
    in a network](img/3589_11_12.jpg)
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将在`RHOST`选项中设置我们的目标地址范围。因此，输入`set rhosts <target IP range>`；例如，在这里我们使用`set
    rhosts 10.10.10.1/24`。![在网络中的枢轴](img/3589_11_12.jpg)
- en: Next, set the port numbers that we are looking for. Here we are looking for
    the most common ports that are found open in a computer system. So type in `set
    ports <port number>`; for example, here we are giving `set ports 139,445`.![Pivoting
    in a network](img/3589_11_13.jpg)
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，设置我们要查找的端口号。在这里，我们正在寻找计算机系统中发现的最常见的开放端口。因此，输入`set ports <port number>`；例如，在这里我们输入`set
    ports 139,445`。![在网络中的枢轴](img/3589_11_13.jpg)
- en: Next we will set the concurrent thread's number for scanning the TCP ports.
    So here we are giving threads `50` by typing in `set threads 50`.![Pivoting in
    a network](img/3589_11_14.jpg)
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将设置用于扫描TCP端口的并发线程数。因此，我们通过输入`set threads 50`来设置50个线程。![在网络中转](img/3589_11_14.jpg)
- en: Now our auxiliary module is fully loaded for scanning. The last and final command
    we are going to execute is the `run` command. So, type in `run`.![Pivoting in
    a network](img/3589_11_15.jpg)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们的辅助模块已经完全加载用于扫描。我们将要执行的最后一个命令是`run`命令。因此，输入`run`。
- en: We can see in the preceding screenshot that our auxiliary TCP module scanner
    has been started and it found that two systems are online having an IP of 10.10.10.1
    and 10.10.10.2, and also found two open ports on that system 139 and 445\. Here
    the IP 10.10.10.1 is already compromised so our target is IP 10.10.10.2.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在前面的截图中看到，我们的辅助TCP模块扫描器已经启动，并发现两台在线系统的IP为10.10.10.1和10.10.10.2，并且还发现该系统上有两个开放端口139和445。这里IP
    10.10.10.1已经受到影响，所以我们的目标是IP 10.10.10.2。
- en: So now we are going to use an exploit for exploiting another system. The exploit
    we are going to use has already been used in the [Chapter 3](ch03.html "Chapter 3. Exploitation
    Basics"), *Exploitation Basics*; so we know very well the process for using this
    exploit. Now let us start; type in `use exploit/windows/smb/ms08_067_netapi` and
    press *Enter*. Then type in `set rhost <target IP>`; for example, here we are
    using `set rhost 10.10.10.2`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![在网络中转](img/3589_11_15.jpg)'
- en: '![Pivoting in a network](img/3589_11_16.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![在网络中转](img/3589_11_16.jpg)'
- en: After setting the target IP, now set the payload for compromising the target
    system. This time we are using `windows/meterpreter/bind_tcp` payload for attacking.
    So type in `set payload windows/meterpreter/bind_tcp`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 设置目标IP后，现在设置用于攻击目标系统的有效载荷。这次我们使用`windows/meterpreter/bind_tcp`有效载荷进行攻击。因此输入`set
    payload windows/meterpreter/bind_tcp`。
- en: '![Pivoting in a network](img/3589_11_17.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![在网络中转](img/3589_11_17.jpg)'
- en: All things are now ready for the attack, so type in the deadly `exploit` command.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切都准备就绪进行攻击，因此输入致命的`exploit`命令。
- en: '![Pivoting in a network](img/3589_11_18.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![在网络中转](img/3589_11_18.jpg)'
- en: After triggering the `exploit` command, we can see that `meterpreter` session
    2 has been opened on IP 10.10.10.2\. We already had session 1 from our compromised
    system; through that compromised system we were able to compromise another system
    in the network.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在触发`exploit`命令后，我们可以看到`meterpreter`会话2已在IP 10.10.10.2上打开。我们已经从受影响的系统获得了会话1；通过受影响的系统，我们能够在网络中攻击另一个系统。
- en: Now let us check the system to see whether we have compromised the correct system
    or not by checking its properties. So type in `sysinfo`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们检查系统，看看我们是否已经攻击了正确的系统，通过检查其属性。因此输入`sysinfo`。
- en: '![Pivoting in a network](img/3589_11_19.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![在网络中转](img/3589_11_19.jpg)'
- en: We can see in the screenshot that the system has the name **PWNED**, so now
    we are going to verify this name.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在截图中看到系统的名称是**PWNED**，所以现在我们将验证这个名称。
- en: '![Pivoting in a network](img/3589_11_20.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![在网络中转](img/3589_11_20.jpg)'
- en: Sniffing in a network
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现在我们将使用一个利用来攻击另一个系统。我们将要使用的利用已经在[第3章](ch03.html "第3章。利用基础")中使用过，*利用基础*；所以我们非常了解使用这个利用的过程。现在让我们开始；输入`use
    exploit/windows/smb/ms08_067_netapi`并按*Enter*。然后输入`set rhost <目标IP>`；例如，这里我们使用`set
    rhost 10.10.10.2`。
- en: After pivoting the network, we are now moving to another topic where we will
    learn how to sniff in a network by using `meterpreter` post exploitation scripts.
    Before using the sniffer, we must load the sniffer extension in the `meterpreter`
    session. So type in `use sniffer`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在转向网络之后，我们现在转向另一个主题，学习如何使用`meterpreter`后渗透脚本在网络中进行嗅探。在使用嗅探器之前，我们必须在`meterpreter`会话中加载嗅探器扩展。因此，输入`use
    sniffer`。
- en: '![Sniffing in a network](img/3589_11_21.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![在网络中嗅探](img/3589_11_21.jpg)'
- en: 'We can see in the screenshot that our sniffer extension has been successfully
    loaded by `meterpreter`. Before using sniffer, we must know the sniffer usage
    commands; for that, type in `help` in the `meterpreter` session and it will show
    all the `meterpreter` commands. There you will find all sniffer usage commands
    as shown in the following screenshot:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在截图中看到，我们的嗅探器扩展已经成功被`meterpreter`加载。在使用嗅探器之前，我们必须知道嗅探器的使用命令；为此，在`meterpreter`会话中输入`help`，它将显示所有`meterpreter`命令。在那里，您将找到所有嗅探器使用命令，如下图所示：
- en: '![Sniffing in a network](img/3589_11_22.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![在网络中嗅探](img/3589_11_22.jpg)'
- en: Now, we can see all the commands for the sniffer script. Firstly, we will enumerate
    the network interface on which we will start our sniffer. So type in `sniffer
    interfaces`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以看到嗅探器脚本的所有命令。首先，我们将枚举要在其上启动嗅探器的网络接口。因此输入`sniffer interfaces`。
- en: '![Sniffing in a network](img/3589_11_23.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![在网络中嗅探](img/3589_11_23.jpg)'
- en: After enumerating the network interfaces, it's time to select an interface and
    run the sniffer on that network interface. Type in `sniffer_start <Interface number>`;
    for example, here we are selecting interface number 1, so we type in `sniffer_start
    1`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在枚举网络接口之后，现在是选择一个接口并在该网络接口上运行嗅探器的时间。输入`sniffer_start <接口号>`；例如，这里我们选择接口号1，所以输入`sniffer_start
    1`。
- en: '![Sniffing in a network](img/3589_11_24.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![在网络中嗅探](img/3589_11_24.jpg)'
- en: Now we can see that our sniffer is in action and has started capturing packets
    on `interface 1`. So let us check the captured packet status on `interface 1`
    by typing in `sniffer_stats 1`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到我们的嗅探器正在运行，并已开始在`接口1`上捕获数据包。因此，让我们通过输入`sniffer_stats 1`来检查`接口1`上捕获的数据包状态。
- en: '![Sniffing in a network](img/3589_11_25.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![在网络中嗅探](img/3589_11_25.jpg)'
- en: We can see that uptill now we have captured `91` packets of size `14511` bytes.
    Now we want to dump or save the captured packets for further analysis, so we type
    in `sniffer_dump <Interface no.> <file name for save in pcap extension>`; for
    example, here we are using `sniffer_dump 1 hacked.pcap`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到到目前为止我们已经捕获了`91`个大小为`14511`字节的数据包。现在我们想要转储或保存捕获的数据包以供进一步分析，因此我们输入`sniffer_dump
    <接口号> <保存为pcap扩展名的文件名>`；例如，这里我们使用`sniffer_dump 1 hacked.pcap`。
- en: '![Sniffing in a network](img/3589_11_26.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![在网络中嗅探](img/3589_11_26.jpg)'
- en: Now we will analyze this captured packet file with the famous packet analyzer
    and capturing tool, known as Wireshark. So open a new terminal and type in `wireshark
    <captured packet file name>`; for example, here we are using `wireshark hacked.pcap`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用著名的数据包分析器和捕获工具Wireshark来分析这个捕获的数据包文件。因此打开一个新的终端，输入`wireshark <捕获的数据包文件名>`；例如，在这里我们使用`wireshark
    hacked.pcap`。
- en: '![Sniffing in a network](img/3589_11_27.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![在网络中嗅探](img/3589_11_27.jpg)'
- en: After executing the `wireshark` command, we can see the Graphical User Interface
    of the Wireshark tool.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`wireshark`命令后，我们可以看到Wireshark工具的图形用户界面。
- en: '![Sniffing in a network](img/3589_11_28.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![在网络中嗅探](img/3589_11_28.jpg)'
- en: There is also another way of sniffing and capturing packets without loading
    the sniffer extension in `meterpreter`. This is also a `meterpreter` postexploitation
    script known as `packetrecorder`. Type in `run packetrecorder` and it will show
    all the usage commands for `packetrecorder`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种在`meterpreter`中嗅探和捕获数据包的方法，这也是一个名为`packetrecorder`的`meterpreter`后渗透脚本。输入`run
    packetrecorder`，它将显示`packetrecorder`的所有使用命令。
- en: '![Sniffing in a network](img/3589_11_29.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![在网络中嗅探](img/3589_11_29.jpg)'
- en: We can see all the usage options for `packetrecorder`. So first of all we will
    enumerate the network interfaces, which are available for sniffing by typing in
    `run packetrecorder -li`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`packetrecorder`的所有使用选项。因此，首先我们将枚举可用于嗅探的网络接口，输入`run packetrecorder -li`。
- en: '![Sniffing in a network](img/3589_11_30.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![在网络中嗅探](img/3589_11_30.jpg)'
- en: Now we can see that we have two network interfaces available. Select an interface
    for running our sniffer on that. So type in `run packetrecorder -i 1 -l /root/Desktop`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到我们有两个可用的网络接口。选择一个接口来运行我们的嗅探器。因此输入`run packetrecorder -i 1 -l /root/Desktop`。
- en: 'The usage syntax is explained as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用语法如下解释：
- en: '`i` stands for interface number'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`i`代表接口号'
- en: '`l` stands for location for saving the captured packet file![Sniffing in a
    network](img/3589_11_31.jpg)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l`代表保存捕获数据包文件的位置![在网络中嗅探](img/3589_11_31.jpg)'
- en: After running the `packetrecorder` script, as shown in the preceding screenshot,
    the packets are being saved at the location `/root/Desktop/logs/packetrecorder`.
    Let us check the directory in our system.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行`packetrecorder`脚本后，如前面的截图所示，数据包正在保存在位置`/root/Desktop/logs/packetrecorder`。让我们在系统中检查一下这个目录。
- en: '![Sniffing in a network](img/3589_11_32.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![在网络中嗅探](img/3589_11_32.jpg)'
- en: Espia Extension
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Espia扩展
- en: Espia extension is also another interesting extension, which we have to load
    in `meterpreter` before using it. So type in `load espia`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Espia扩展也是另一个有趣的扩展，在使用之前我们必须在`meterpreter`中加载它。因此输入`load espia`。
- en: '![Espia Extension](img/3589_11_33.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![Espia Extension](img/3589_11_33.jpg)'
- en: Our espia extension has been successfully loaded by `meterpreter` as we can
    see in the previous screenshot. Now type in the command `help` in `meterpreter`
    and it will show you the available usage commands in this extension.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的espia扩展已经成功被`meterpreter`加载，正如我们在之前的截图中所看到的。现在在`meterpreter`中输入`help`命令，它将显示此扩展中可用的使用命令。
- en: '![Espia Extension](img/3589_11_34.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![Espia Extension](img/3589_11_34.jpg)'
- en: We can see that there is only one command available in the espia extension,
    that is, `screengrab`. Using this command we can grab a screenshot of the compromised
    system. Type in `screengrab`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到espia扩展中只有一个可用的命令，即`screengrab`。使用此命令，我们可以抓取受损系统的屏幕截图。输入`screengrab`。
- en: '![Espia Extension](img/3589_11_35.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![Espia Extension](img/3589_11_35.jpg)'
- en: In the screenshot we can see that the captured screenshot is saved into the
    root directory. So let us check whether the screenshot is saved or not in the
    root directory.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在截图中，我们可以看到捕获的屏幕截图保存在根目录中。因此让我们检查一下屏幕截图是否保存在根目录中。
- en: '![Espia Extension](img/3589_11_36.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![Espia Extension](img/3589_11_36.jpg)'
- en: Summary
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we have covered the various techniques through which we can
    leverage our point of contact server/system on the external network, and leverage
    it to exploit other systems. Since the point of contact system had another network
    card for connectivity with the internal network, we used this to pivot our way
    from the external to the internal system. Hence, once we had connectivity to the
    internal network, we were able to exploit it as well through our exploitation
    techniques covered in the previous chapters. The next chapter will deal with learning
    the art of exploit writing using Metasploit.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了各种技术，通过这些技术，我们可以利用外部网络上的我们的接触点服务器/系统，并利用它来利用其他系统。由于接触点系统有另一个用于与内部网络连接的网络卡，我们利用这一点从外部系统到内部系统进行了转移。因此，一旦我们连接到内部网络，我们也能够通过前几章介绍的我们的利用技术来利用它。下一章将介绍使用Metasploit学习利用编写的艺术。
- en: References
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考
- en: 'The following are some helpful references that shed further light on some of
    the topics covered in this chapter:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些有用的参考资料，进一步阐明了本章涉及的一些主题：
- en: '[http://www.offensive-security.com/metasploit-unleashed/Pivoting](http://www.offensive-security.com/metasploit-unleashed/Pivoting)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.offensive-security.com/metasploit-unleashed/Pivoting](http://www.offensive-security.com/metasploit-unleashed/Pivoting)'
- en: '[http://www.securitytube.net/video/2688](http://www.securitytube.net/video/2688)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.securitytube.net/video/2688](http://www.securitytube.net/video/2688)'
- en: '[http://www.offensive-security.com/metasploit-unleashed/Packet_Sniffing](http://www.offensive-security.com/metasploit-unleashed/%E2%80%A8Packet_Sniffing)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.offensive-security.com/metasploit-unleashed/Packet_Sniffing](http://www.offensive-security.com/metasploit-unleashed/%E2%80%A8Packet_Sniffing)'
