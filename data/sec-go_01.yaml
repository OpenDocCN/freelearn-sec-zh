- en: Introduction to Security with Go
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Go进行安全性的简介
- en: Security and privacy, as practical matters, have continued to gain interest,
    especially in the technology industry. The cybersecurity market is booming and
    continuing to grow. The industry moves fast with innovations and research coming
    out constantly. Not only has the interest and speed of security picked up, but
    the scale of applications along with the risk have also grown by orders of magnitude.
    The industry needs a programming language that is simple to learn, cross-platform,
    and efficient on a large scale. Go is the perfect fit, having an extremely powerful
    standard library, short learning curve, and blazing speed.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 安全和隐私作为实际问题，尤其在科技行业中，持续获得越来越多的关注。网络安全市场正在蓬勃发展并持续增长。该行业发展迅速，创新和研究不断涌现。不仅安全的关注度和速度提升了，应用规模及其风险也以数量级的方式增长。行业需要一种简单易学、跨平台且在大规模应用中高效的编程语言。Go是完美的选择，拥有强大的标准库、短暂的学习曲线和极快的速度。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Go's history, language design, criticisms, community, and learning tips
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go的历史、语言设计、批评、社区和学习技巧
- en: Why use Go for security
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么使用Go进行安全性开发
- en: Setting up a development environment and writing your first program
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置开发环境并编写你的第一个程序
- en: Running the example programs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行示例程序
- en: About Go
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于Go
- en: Go is an open source programming language that was created by Google and distributed
    under a BSD-style license. A BSD license allows anyone to use Go free of charge,
    as long as the copyright notice is retained and the Google name is not used for
    endorsement or promotion. Go is heavily influenced by C, but has simpler syntax,
    and better memory safety and garbage collection. Sometimes, Go is described as
    a modern-day C++. I think that is too much of a simplification, but Go is definitely
    a simple but modern language.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Go是一个开源编程语言，由Google创建，并在BSD风格许可证下发布。BSD许可证允许任何人免费使用Go，只要保留版权声明，并且不将Google的名字用于背书或推广。Go深受C语言的影响，但语法更简单，内存安全性和垃圾回收机制更好。有时，Go被描述为现代版的C++。我认为这是对Go的过度简化，但Go无疑是一个简单而现代的语言。
- en: Go language design
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go语言设计
- en: The original goal of Go was to create a new language that is simple, reliable,
    and efficient. As mentioned, Go is heavily influenced by C programming language.
    The language itself is very simple, with only 25 keywords. It was built to integrate
    well with IDEs, but not to be dependent on them. In my experience, anyone who
    has tried Go has found it very user-friendly with a short learning curve.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Go的初衷是创建一种简单、可靠且高效的编程语言。如前所述，Go深受C语言的影响。该语言本身非常简单，只有25个关键字。它被设计成能够很好地与IDE集成，但又不依赖于IDE。根据我的经验，任何尝试过Go的人都会发现它非常易用，且学习曲线很短。
- en: One of the main goals of Go was to deal with some of the negative aspects of
    C++ and Java code, while retaining the performance. The language needed to be
    simple and consistent to manage very large development teams.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Go的主要目标之一是解决C++和Java代码的一些负面问题，同时保留性能。该语言需要简单且一致，以便管理非常庞大的开发团队。
- en: Variables are statically typed, and applications are compiled quickly to statically
    linked binaries. Having a single statically linked binary makes it very easy to
    create lightweight containers. The final applications run fast as well, running
    close to C++ and Java performance and much faster than interpreted languages such
    as Python. There are pointers, but there is no pointer arithmetic allowed. Go
    does not tout itself as an object-oriented programming language, and it does not
    formally have *classes* in the traditional sense; however, it does contain a number
    of mechanisms that closely resemble an object-oriented programming language. This
    is discussed in more depth in the following chapter. Interfaces are used heavily,
    and composition is the equivalent of inheritance.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 变量是静态类型的，应用程序会快速编译成静态链接的二进制文件。拥有一个单一的静态链接二进制文件，使得创建轻量级容器变得非常容易。最终的应用程序也运行得非常快，接近C++和Java的性能，并且比Python等解释型语言要快得多。Go有指针，但不允许进行指针运算。Go并不自诩为面向对象的编程语言，它在传统意义上也没有*类*；然而，它确实包含了许多与面向对象编程语言非常相似的机制。在下一章将对这一点进行更深入的讨论。接口被大量使用，组合是继承的等价物。
- en: Go has many interesting features. One feature that stands out is the built-in
    concurrency. Just put the word "go" before any function call, and it will spawn
    a lightweight thread to execute the function. Another feature that is quite important
    is the dependency management, which is very efficient. The dependency management
    is part of the reason Go compiles incredibly fast. It does not re-include the
    same header files multiple times, the way C++ does. Go also has built-in memory
    safety, and a garbage collector handles clean-up of unused memory. The standard
    library in Go is pretty impressive too. It is modern and contains networking,
    HTTP, TLS, XML, JSON, database, image manipulation, and cryptography packages.
    Go also supports Unicode, allowing all kinds of characters to be used in source
    code.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Go 有许多有趣的特性。一个突出的特点是内建的并发性。只需在任何函数调用前加上“go”关键字，它就会创建一个轻量级线程来执行该函数。另一个非常重要的特性是依赖管理，非常高效。依赖管理也是
    Go 编译速度非常快的部分原因之一。它不会像 C++ 那样重复包含相同的头文件。Go 还具有内建的内存安全功能，由垃圾回收器处理未使用内存的清理。Go 的标准库也相当令人印象深刻。它现代化，并包含了网络、HTTP、TLS、XML、JSON、数据库、图像处理和加密等包。Go
    还支持 Unicode，允许在源代码中使用各种字符。
- en: The Go toolchain is central to the ecosystem. It provides tools to download
    and install remote dependencies, run unit tests and benchmarks, generate code,
    and format code according to the Go formatting standards. It also includes the
    compiler, linker, and assembler, which compile very quickly and also allow for
    easy cross-compiling by simply changing the `GOOS` and `GOARCH` environment variables.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Go 工具链是生态系统的核心。它提供了下载和安装远程依赖、运行单元测试和基准测试、生成代码以及根据 Go 格式标准格式化代码的工具。它还包括编译器、链接器和汇编器，这些工具编译速度非常快，并且通过简单地更改
    `GOOS` 和 `GOARCH` 环境变量，可以轻松地进行交叉编译。
- en: Some features were excluded from the Go language. Generics, inheritance, assertions,
    exceptions, pointer arithmetic, and implicit type conversions were all left out
    of Go. Many features were omitted intentionally, namely generics, assertions,
    and pointer arithmetic. The authors left out some features because they wanted
    to maintain performance, keep the language specification as simple as possible,
    or they could not agree on the best way to implement, or because a feature was
    too controversial. Inheritance was also left out intentionally in favor of using
    interfaces and composition instead. Some other features, such as generics, were
    left out because there was too much debate concerning their proper implementation,
    but they may show up in Go 2.0\. The authors recognized that it is much easier
    to add a feature to a language than to take one away.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Go 语言中排除了一些特性。泛型、继承、断言、异常、指针运算和隐式类型转换都被 Go 排除了。许多特性是故意省略的，特别是泛型、断言和指针运算。作者排除了一些特性，因为他们希望保持性能、尽量简化语言规范，或者他们无法就最佳实现方式达成一致，或者某些特性过于争议。继承也故意被排除，取而代之的是接口和组合。其他一些特性，例如泛型，因其实现方式的争论过多而被排除，但可能会在
    Go 2.0 中出现。作者认识到，向语言中添加特性要比删除特性容易得多。
- en: The History of Go
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go 的历史
- en: Go is a relatively young language, with its inception in 2007 and open sourcing
    in 2009\. It started at Google as a *20% project* with Robert Griesemer, Rob Pike,
    and Ken Thompson. A 20% project means that the project's developers spent 20%
    of their time working on it as an experimental side project. Go 1.0 was officially
    released in March 2012\. It was planned from the beginning to be an open source
    language. Until Go 1.5, the compiler, linker, and assembler were written in C.
    After version 1.5, everything was written in Go.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Go 是一门相对年轻的语言，起源于 2007 年，并于 2009 年开源。它最初在 Google 作为一个 *20% 项目*启动，由 Robert Griesemer、Rob
    Pike 和 Ken Thompson 参与开发。20% 项目意味着开发者在项目中花费 20% 的时间将其作为一个实验性副项目。Go 1.0 于 2012
    年 3 月正式发布。从一开始就计划成为一门开源语言。直到 Go 1.5 版本，编译器、链接器和汇编器是用 C 编写的。1.5 版本之后，所有内容都用 Go
    编写。
- en: Google initially launched Go for Linux and macOS, and the community drove the
    effort for other platforms, namely Windows, FreeBSD, OpenBSD, NetBSD, and Solaris.
    It has even been ported to IBM z Systems mainframes. Bill O'Farrell of IBM gave
    a talk at GopherCon 2016 in Denver titled *Porting Go to the IBM z Architecture* ([https://www.youtube.com/watch?v=z0f4Wgi94eo](https://www.youtube.com/watch?v=z0f4Wgi94eo)).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Google 最初为 Linux 和 macOS 发布了 Go，社区推动了其他平台的支持，特别是 Windows、FreeBSD、OpenBSD、NetBSD
    和 Solaris。它甚至已经移植到 IBM z 系列大型主机上。IBM 的 Bill O'Farrell 在 2016 年的 GopherCon 大会中做了题为
    *将 Go 移植到 IBM z 架构* 的演讲 ([https://www.youtube.com/watch?v=z0f4Wgi94eo](https://www.youtube.com/watch?v=z0f4Wgi94eo))。
- en: Google is known to use Python, Java, and C++. It is understandable why they
    chose those languages too. They each fill certain roles and have their own strengths
    and weaknesses. Go was an attempt to create a new language that fits the needs
    of Google. They needed software that could perform extremely well under heavy
    loads, support concurrency, and that was easy to read and write, and compile quickly.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Google 以使用 Python、Java 和 C++ 而闻名。理解他们为何选择这些语言也并不困难。它们各自填补了特定的角色，且有各自的优缺点。Go
    是一次尝试，旨在创建一种能够满足 Google 需求的新语言。他们需要能够在高负载下表现极佳、支持并发、且易于阅读和编写并能快速编译的软件。
- en: The triggering event for starting the Go project was dealing with a massive
    C++ code base that took hours to build because of the way C++ handles dependencies
    and re-includes headers ([https://www.youtube.com/watch?v=bj9T2c2Xk_s](https://www.youtube.com/watch?v=bj9T2c2Xk_s)
    (37:15)). This is why one of Go's main goals was to compile quickly. Go helped
    turn hours of compile time to seconds because it handles dependencies much more
    efficiently than C++.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 Go 项目的触发事件是处理一个庞大的 C++ 代码库，该代码库由于 C++ 处理依赖关系和重新包含头文件的方式，需要数小时才能编译完成 ([https://www.youtube.com/watch?v=bj9T2c2Xk_s](https://www.youtube.com/watch?v=bj9T2c2Xk_s)
    (37:15))。这也是 Go 主要目标之一——快速编译——的原因。Go 帮助将数小时的编译时间缩短为秒，因为它比 C++ 更高效地处理依赖关系。
- en: Discussions for Go 2.0 have begun, but they are still in the conceptual stages.
    There is no timeline for a release, and there is no rush to release a new major
    version.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Go 2.0 的讨论已经开始，但仍处于概念阶段。尚无发布日期，也没有急于发布新版本的计划。
- en: Adoption and community
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 采用与社区
- en: 'Go is still a young language, but it has seen growing adoption rates and has
    continued to increase in popularity. Go was the TIOBE Language of the year in
    2009 and 2016:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Go 仍然是一门年轻的语言，但它的采用率持续增长，并且人气不断上升。Go 曾在 2009 年和 2016 年被评为 TIOBE 年度编程语言：
- en: '![](img/3d9b13c6-b329-4bdc-8ebe-4e563bf87d0d.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3d9b13c6-b329-4bdc-8ebe-4e563bf87d0d.png)'
- en: 'Source: https://www.tiobe.com/tiobe-index/go/'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '来源: https://www.tiobe.com/tiobe-index/go/'
- en: One of the expectations expressed by the Go team was the anticipation that Go
    would draw a lot of C/C++ and Java developers, but they were surprised when a
    large number of the users came from scripting languages such as Python and Ruby.
    Others, like myself, found Go to be a natural complement to Python, a great language.
    However, which language do you go to when you need something much more powerful?
    Some large companies have demonstrated that Go is stable for large-scale production
    use, including Google, Dropbox, Netflix, Uber, and SoundCloud.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Go 团队曾表达过一个预期，即 Go 会吸引大量 C/C++ 和 Java 开发者，但他们惊讶地发现，许多用户来自于 Python 和 Ruby 等脚本语言。像我这样的其他人认为，Go
    是 Python 的一个自然补充，Python 本身是一门很棒的语言。然而，当你需要更强大的功能时，应该选择什么语言呢？一些大公司已经证明，Go 适用于大规模的生产环境，包括
    Google、Dropbox、Netflix、Uber 和 SoundCloud。
- en: The first Go conference, named GopherCon, was held in 2014\. Since then, GopherCon
    has been held every year. Read more about GopherCon at [https://gophercon.com](https://gophercon.com).
    I had the privilege of speaking at the 2016 GopherCon about packet capturing and
    had a great experience ([https://www.youtube.com/watch?v=APDnbmTKjgM](https://www.youtube.com/watch?v=APDnbmTKjgM)).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 第一届 Go 大会，名为 GopherCon，于 2014 年举行。从那时起，GopherCon 每年都会举办。我有幸在 2016 年的 GopherCon
    上做关于数据包捕获的演讲，经历了非常棒的体验 ([https://www.youtube.com/watch?v=APDnbmTKjgM](https://www.youtube.com/watch?v=APDnbmTKjgM))。
- en: Common criticisms about Go
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go 的常见批评
- en: There are a few criticisms that show up repeatedly in the community. Probably
    the most notorious and most-discussed criticism is the lack of generics. This
    leads to repeated code to handle different data types. Interfaces can be used
    to some extent to alleviate this problem. We might see generics in a future release,
    as the authors have shown openness to generics, but they did not rush through
    an important design decision.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 社区中经常出现一些批评意见。最臭名昭著、讨论最多的批评可能是缺乏泛型。这导致需要重复编写代码以处理不同的数据类型。接口可以在一定程度上缓解这个问题。我们可能会在未来的版本中看到泛型，因为作者们对泛型持开放态度，但他们并没有急于做出这一重要的设计决策。
- en: The next criticism often heard is the lack of exceptions. The developer must
    explicitly handle or ignore each error. Personally, I found this to be a refreshing
    change. It's not really that much more work, and you have full control over the
    code flow. Sometimes with exceptions you are not positive where it will get caught
    as it bubbles up. With Go, you can easily follow the error-handling code.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的批评是缺乏异常处理。开发者必须显式地处理或忽略每一个错误。就个人而言，我觉得这种方式是一种清新的变化。实际上这并不比其他方法多多少工作，而且你对代码流有完全的控制。有时候，使用异常时你无法确定它会在何处被捕获，因为它会向上传递。在
    Go 中，你可以轻松地跟踪错误处理代码。
- en: Go has a garbage collector that handles memory cleanup. The garbage collector
    has been upgraded over time and continues to improve. The garbage collector does
    have a minor performance impact, but saves the developer a lot of thinking and
    worrying. Go was originally described as a systems programming language, and the
    lack of control over the memory was restrictive for very low-level applications.
    Since then, they have pivoted away from calling Go a systems programming language.
    If you need low-level control over memory, then you will have to write portions
    of code in C.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Go 有一个垃圾回收器来处理内存清理。垃圾回收器随着时间的推移不断升级，并且还在继续改进。虽然垃圾回收器会对性能产生轻微影响，但它为开发者节省了大量思考和担忧。Go
    最初被描述为一种系统编程语言，但对内存的控制不足，限制了非常低级的应用。此后，他们不再称 Go 为系统编程语言。如果你需要对内存进行低级控制，那么你必须用
    C 编写部分代码。
- en: The Go toolchain
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go 工具链
- en: 'The `go` executable is the main application of the Go toolchain. You can pass
    a command to `go`, and it will take the appropriate action. The toolchain has
    tools to run, compile, format source code, download dependencies, and more. Let''s
    look at the full list, which is obtained as an output from the `go help` command
    or just `go` by itself:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`go` 可执行文件是 Go 工具链的主要应用程序。你可以向 `go` 传递一个命令，它会采取适当的行动。工具链包括用于运行、编译、格式化源代码、下载依赖项等工具。让我们看看完整的命令列表，可以通过运行
    `go help` 命令或直接运行 `go` 来获得：'
- en: '`build`: This compiles packages and dependencies'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build`：此命令编译包和依赖项'
- en: '`clean`: This removes object files'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clean`：此命令删除对象文件'
- en: '`doc`: This shows documentation for a package or symbol'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`doc`：此命令显示包或符号的文档'
- en: '`env`: This prints Go environment information'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`env`：此命令打印 Go 环境信息'
- en: '`generate`: This is the code generator'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generate`：这是代码生成器'
- en: '`fix`: This upgrades Go code when a new version is released'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fix`：此命令在发布新版本时升级 Go 代码'
- en: '`fmt`: This runs `gofmt` on package sources'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fmt`：此命令在包源代码上运行 `gofmt`'
- en: '`get`: This downloads and installs packages and dependencies'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get`：此命令下载并安装包和依赖项'
- en: '`help`: This provides more help on a specific topic'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`help`：此命令提供有关特定主题的更多帮助'
- en: '`install`: This compiles and installs packages and dependencies'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`install`：此命令编译并安装包和依赖项'
- en: '`list`: This lists packages'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list`：此命令列出包'
- en: '`run`: This compiles and runs Go programs'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`run`：此命令编译并运行 Go 程序'
- en: '`test`: This runs unit tests and benchmarks'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test`：此命令运行单元测试和基准测试'
- en: '`vet`: This examines source code for bugs'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vet`：此命令检查源代码中的错误'
- en: '`version`: This shows the Go version'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`version`：此命令显示 Go 版本'
- en: More information about these commands is available at [https://golang.org/cmd/](https://golang.org/cmd/).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有关这些命令的更多信息，请访问 [https://golang.org/cmd/](https://golang.org/cmd/)。
- en: Go mascot
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go 吉祥物
- en: Everyone knows that the best swords have names, and the best programming languages
    have mascots. Go's mascot is the **gopher**. The gopher has no name. It has a
    jelly bean shaped body, microscopic limbs, gigantic eyes, and two teeth. It was
    designed by Renee French, and its copyright comes under the *Creative Commons
    Attribution 3.0* license. This means that you can play with the images, but you
    must give credit to their creator, Renee French, wherever they are used.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人都知道，最好的剑有名字，而最好的编程语言有吉祥物。Go的吉祥物是**gopher**。gopher没有名字。它有一个糖果豆形状的身体，微小的四肢，巨大的眼睛和两颗牙齿。它是由Renee
    French设计的，并且其版权属于*创意共享署名3.0*许可证。这意味着你可以玩弄这些图像，但必须在使用时注明创作者Renee French。
- en: 'Renee French gave a talk at GopherCon 2016 in Denver, entitled *The Go Gopher:
    A Character Study*, explaining how the gopher came to be, the various mediums
    and forms it has taken, and the tips on drawing it in various situations ([https://www.youtube.com/watch?v=4rw_B4yY69k](https://www.youtube.com/watch?v=4rw_B4yY69k)).'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Renee French在2016年丹佛的GopherCon大会上做了题为*Go Gopher：一个角色研究*的演讲，讲述了gopher是如何诞生的，它所采用的各种媒介和形式，以及如何在不同场景下绘制它的技巧([https://www.youtube.com/watch?v=4rw_B4yY69k](https://www.youtube.com/watch?v=4rw_B4yY69k))。
- en: You can generate a custom gopher avatar at [https://gopherize.me/](https://gopherize.me/) and
    read more about the Go gopher at [https://blog.golang.org/gopher](https://blog.golang.org/gopher).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://gopherize.me/](https://gopherize.me/)生成一个自定义的gopher头像，并在[https://blog.golang.org/gopher](https://blog.golang.org/gopher)阅读更多关于Go
    gopher的信息。
- en: '![](img/13098b0b-f4f5-4d83-b780-4a505d29a41b.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/13098b0b-f4f5-4d83-b780-4a505d29a41b.jpg)'
- en: Learning Go
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习Go
- en: If you have never used Go before, have no fear. It has a gentle learning curve
    and is simple enough to learn in just a day or two. The best place to start is
    [https://tour.golang.org/](https://tour.golang.org/). This is a basic tour of
    the Go programming language. If you have already gone through the tour, then you
    should already have the foundation to make it through this book just fine. If
    you are working through this book and have not taken the tour, you may come across
    a concept you are not familiar with that is not explained here. The tour is a
    good place to learn and practice.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从未使用过Go，不必担心。它有一个温和的学习曲线，足够简单，你可以在一两天内学会。最好的起点是[https://tour.golang.org/](https://tour.golang.org/)。这是Go编程语言的基本教程。如果你已经完成了这个教程，你应该已经有足够的基础，能顺利读完这本书。如果你正在阅读这本书而没有参加过这个教程，可能会遇到一些你不熟悉的概念，这些概念在这里没有解释。教程是一个很好的学习和实践的地方。
- en: Since there are only 25 reserved keywords in the language specification, it
    is short enough to be understood by "mortals". You can read more about the specs
    at [https://golang.org/ref/spec](https://golang.org/ref/spec).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 由于语言规范中只有25个保留关键字，足够简短，"凡人"也能理解。你可以在[https://golang.org/ref/spec](https://golang.org/ref/spec)上阅读更多关于规范的内容。
- en: 'You must be already be familiar with most of these keywords. These are: `if`,
    `else`, `goto`, `for`, `import`, `return`, `var`, `continue`, `break`, `range`,
    `type`, `func`, `interface`, `package`, `const`, `map`, `struct`, `select`, `case`,
    `switch`, `go`, `defer`, `chan`, `fallthrough`, and `default`.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经熟悉大多数这些关键字。这些包括：`if`、`else`、`goto`、`for`、`import`、`return`、`var`、`continue`、`break`、`range`、`type`、`func`、`interface`、`package`、`const`、`map`、`struct`、`select`、`case`、`switch`、`go`、`defer`、`chan`、`fallthrough`和`default`。
- en: The tour will help you learn the keywords, syntaxes, and basics of the data
    structures. The playground in the tour lets you practice writing and running code
    in the browser.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程将帮助你学习关键字、语法和数据结构的基础知识。教程中的游乐场让你在浏览器中练习编写和运行代码。
- en: Why use Go?
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么使用Go？
- en: There are several aspects that appeal to me about Go. Concurrency, speed, and
    simplicity are the most important things to me. The language is very simple and
    easy to learn. There are no `try`, `catch`, and exception flows. Though several
    people cite the tedious error handling as a criticism, I find it refreshing to
    have a simple language that does not hide a lot of magic behind the scenes and
    does exactly what it says. The `go fmt` tool standardizes formatting, making it
    easy to read code from others, and eliminates the burden of defining your own
    standard.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Go有几个吸引我之处。并发性、速度和简洁性是最重要的。这个语言非常简单，容易学习。没有`try`、`catch`和异常处理流程。尽管有些人批评冗长的错误处理，但我觉得有一个简单的语言，不隐藏许多魔法，按它所说的做，反而让人耳目一新。`go
    fmt`工具标准化了格式，使得阅读他人代码变得容易，也消除了自己定义标准的负担。
- en: Go provides a feeling of scalability and reliability and is actually an enjoyable
    experience. Before Go, the primary option for fast, compiled code was C++, and
    it was no simple task to manage the header files and build processes for different
    platforms. C++ has become a very complicated language over the years and is not
    nearly as approachable as Go for most people.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Go提供了一种可扩展性和可靠性的感觉，实际上使用起来非常愉快。在Go之前，快速编译的代码主要选项是C++，而管理头文件和为不同平台构建代码并非易事。多年来，C++已经变得非常复杂，对大多数人来说，它远没有Go那么易于接近。
- en: Why use Go for security?
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么在安全领域使用Go？
- en: I think we all understand that there is no such thing as the best programming
    language, but there are different tools for different jobs. Go excels in performance
    and concurrency. Some of its other benefits include the ability to compile down
    to a single executable and cross-compile easily. It also has a modern standard
    library well-suited for networked applications.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我想我们都明白，并没有所谓“最佳编程语言”，但是针对不同的工作有不同的工具。Go在性能和并发方面表现出色。它的其他优点包括能够编译为单一的可执行文件并轻松进行交叉编译。它还拥有适合网络应用的现代标准库。
- en: 'The ease of cross-compiling makes for some interesting use cases in the security
    field. Here are a couple of use cases for cross-compiling in security:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 交叉编译的简便性在安全领域创造了一些有趣的应用场景。以下是一些交叉编译在安全领域的应用案例：
- en: Penetration testers can use a Raspberry Pi to compile custom Go reverse shells
    for Windows, macOS, and Linux, and attempt to deploy them.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渗透测试人员可以使用Raspberry Pi编译自定义的Go反向Shell，用于Windows、macOS和Linux，并尝试部署它们。
- en: Network defenders can have one central database to store all honeypot information
    provided from honeypot servers, and then cross-compile the honeypot servers. This
    would allow them to easily deploy a consistent application across all platforms,
    including Windows, mac, and Linux.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络防御者可以拥有一个中央数据库，用来存储所有来自蜜罐服务器的蜜罐信息，然后交叉编译蜜罐服务器。这将使他们能够轻松地在所有平台上部署一致的应用程序，包括Windows、mac和Linux。
- en: Network defenders could deploy incredibly lightweight honeypots throughout their
    network in the form of a Docker container with a single statically linked binary.
    Containers would be quick to create and destroy, using minimal bandwidth and server
    resources.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络防御者可以在他们的网络中部署极其轻量级的蜜罐，形式是一个带有单一静态链接二进制文件的Docker容器。容器的创建和销毁非常迅速，使用的带宽和服务器资源极少。
- en: When you ask yourself whether Go is a good language choice, it may help to compare
    Go with some of the other top language choices.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在考虑Go是否是一个好的语言选择时，可以将Go与其他一些热门编程语言进行对比，这可能会有所帮助。
- en: Why not use Python?
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么不使用Python？
- en: Python is a popular language in the security field. This is most likely because
    of its ubiquity, short learning curve, and plethora of libraries. There are already
    several useful tools for security written in Python, namely Scapy for packet capturing,
    Scrapy for web scraping, Immunity for debugging, Beautiful Soup for parsing HTML,
    and Volatility for memory forensics. Many vendors and service providers also provide
    API examples in Python.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Python是安全领域中的一种流行语言，这很可能是因为它的普及性、较短的学习曲线和大量的库。已经有几款用Python编写的有用安全工具，例如用于数据包捕获的Scapy，网页抓取的Scrapy，调试工具Immunity，HTML解析的Beautiful
    Soup，和内存取证工具Volatility。许多供应商和服务提供商也提供Python的API示例。
- en: Python is easy to learn, and there are plenty of resources. Go is also easy
    to write and has a gentle learning curve. The learning curve and the ease of programming
    is not a major differentiating factor between Go and Python in my opinion. This
    biggest distinction, and where Python falls short, is performance. Python cannot
    compete with Go in terms of performance. Part of it is the interpreted nature
    of Python, but a larger factor is the **global interpreter lock** or **GIL**.
    The GIL prevents the interpreter from using more than one CPU worth of processing
    power, even with multiple threads executing. There are some ways to get around
    this, such as using multiprocessing, but this has its own drawbacks and limitations,
    as it actually forks a new process. Other options are using Jython (Python on
    Java) or IronPython (Python on .NET), and these have no GIL.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Python 容易学习，且有大量的资源可用。Go 也很容易编写，并且学习曲线较为平缓。在我看来，学习曲线和编程的简易性并不是 Go 和 Python 之间的主要区分因素。最大的区别，Python
    的短板，则是性能。Python 在性能上无法与 Go 竞争。部分原因在于 Python 是解释型语言，但更大的因素是 **全局解释器锁**（**GIL**）。GIL
    阻止解释器使用超过一个 CPU 核心的处理能力，即便有多个线程在执行。虽然有一些方法可以绕过这个问题，例如使用多进程，但这本身也有缺点和限制，因为它实际上是分叉了一个新进程。其他选择包括使用
    Jython（Java 上的 Python）或 IronPython（.NET 上的 Python），它们没有 GIL。
- en: Why not use Java?
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么不使用 Java？
- en: One of Java's greatest strengths is the ability to **write once, run anywhere**
    (**WORA**). This is incredibly valuable if you have to do anything involving GUI,
    graphics, or audio. Go certainly does not beat Java in its ability to create GUIs,
    but it is cross-platform and supports cross-compiling.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Java 的最大优势之一是 **一次编写，到处运行**（**WORA**）。如果你需要处理任何涉及 GUI、图形或音频的工作，这非常有价值。Go 确实无法在创建
    GUI 方面超越 Java，但它是跨平台的，并且支持交叉编译。
- en: Java is mature and widely adopted with lots of resources available. There are
    more options with Java libraries than Go packages. Java is the more verbose of
    the two languages. The Java ecosystem is more complex with several options for
    build tools and package managers. Go is much simpler and more standardized. These
    differences could simply be attributed to the age difference between the languages,
    but it may still affect your language choice.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Java 是一个成熟且广泛应用的语言，拥有丰富的资源。与 Go 的包相比，Java 库的选择更多。Java 是两种语言中更冗长的一个。Java 的生态系统更复杂，有多个构建工具和包管理器的选择。而
    Go 则更简单且标准化。这些差异可能仅仅归因于两种语言的年龄差异，但仍然可能影响你的语言选择。
- en: In certain situations, the **Java virtual machine** (**JVM**) can be too resource
    intensive in terms of memory or startup time. If you need to pipe together several
    command-line Java applications, the startup time for the JVM just to run a series
    of short-lived programs can be a significant performance hit. In terms of memory,
    if you need to run several instances of the same application, then the memory
    required to run each JVM can add up. The JVM can also be restricting since it
    creates a sandbox and limits your access to the host machine. Go compiles down
    to native machine code and thus has no need for a virtual machine layer.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，**Java 虚拟机**（**JVM**）可能在内存或启动时间方面过于消耗资源。如果你需要将多个命令行 Java 应用连接起来，那么 JVM
    的启动时间可能会对短时间运行的程序造成显著的性能损失。就内存而言，如果你需要运行多个相同应用的实例，那么每个 JVM 所需的内存将会累积。JVM 还可能有所限制，因为它创建了一个沙盒环境并限制了对主机的访问。Go
    编译成本地机器代码，因此不需要虚拟机层。
- en: Go is well-documented and the community continues to grow and provide more resources.
    It is an easy language to learn, especially for experienced programmers. Concurrency
    is a bit simpler and built into the language, as opposed to a library package.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Go 有很好的文档，社区持续发展并提供更多资源。对于有经验的程序员来说，这是一门容易学习的语言。并发处理比 Java 更简单，并且是语言内建的，而不是通过一个库包实现。
- en: Why not use C++?
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么不使用 C++？
- en: C++ does offer a little more control since the developer is in charge of memory
    management and there is no garbage collector. For this same reason, C++ will have
    slightly better performance. In some cases, Go can actually outperform C++.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: C++ 确实提供了更多的控制，因为开发者需要负责内存管理，并且没有垃圾回收器。正因如此，C++ 的性能会稍微优于 Go。在某些情况下，Go 甚至能超过
    C++ 的性能。
- en: C++ is very mature and has a large set of third-party libraries. Libraries are
    not always cross-platform and can have complex makefiles. Cross-compiling is much
    simpler in Go and can be done with the Go toolchain.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: C++ 非常成熟，并且有大量的第三方库。虽然库不是完全跨平台的，且可能有复杂的 makefile，但 Go 的交叉编译要简单得多，可以通过 Go 工具链来实现。
- en: Go compiles with more efficiency because it has better dependency management.
    C++ can re-include the same header file multiple times and cause compilation times
    to balloon. The package system is more consistent and standardized in Go. Threads
    and concurrency are native to Go and require platform-specific libraries in C++.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Go 编译效率更高，因为它具有更好的依赖管理。C++ 可以多次重新包含相同的头文件，导致编译时间膨胀。Go 的包管理系统更加一致和标准化。线程和并发是
    Go 的原生特性，而 C++ 需要依赖平台特定的库。
- en: The maturity of C++ has also led to the language growing and becoming more complicated
    over time. Go is a refreshing change with a simple-yet-modern language. C++ is
    not as friendly to beginners as Go.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: C++ 的成熟度也导致了该语言随着时间的发展而变得更加复杂。Go 是一种令人耳目一新的语言，它简单而现代。C++ 对初学者来说不如 Go 友好。
- en: Development environment
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发环境
- en: All of the examples in this book will run across major platforms, Windows, macOS,
    and Linux. Having said that, the examples were primarily written and developed
    on Ubuntu Linux, and this is the recommended platform for the following examples.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的所有示例都可以在主要平台——Windows、macOS 和 Linux 上运行。话虽如此，这些示例主要是在 Ubuntu Linux 上编写和开发的，因此推荐在以下示例中使用这个平台。
- en: Ubuntu Linux is available for free at [https://www.ubuntu.com/download/desktop](https://www.ubuntu.com/download/desktop).
    The download page may ask for a donation, but you can choose to download for free.
    Ubuntu is not required, but the book will be easier to follow if you have the
    same environment. Other Linux distributions should work equally well, but I strongly
    recommend that you use a Debian-based distribution. Most of the Go code examples
    in this book will work on Windows, Linux, and Mac without any modification. Certain
    examples may be Linux- and Mac-specific, such as file permissions, which are not
    treated similarly in Windows. Any example that is specific to a platform is mentioned.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu Linux 可免费获取，下载链接为 [https://www.ubuntu.com/download/desktop](https://www.ubuntu.com/download/desktop)。下载页面可能会要求捐款，但你可以选择免费下载。虽然
    Ubuntu 不是必需的，但如果你拥有相同的环境，书中的内容会更容易跟随。其他 Linux 发行版应该也能很好地工作，但我强烈建议使用基于 Debian 的发行版。书中的大部分
    Go 代码示例可以在 Windows、Linux 和 Mac 上无需任何修改地运行。某些示例可能是 Linux 和 Mac 特有的，比如文件权限，在 Windows
    中的处理方式不同。任何特定于某个平台的示例都会特别提及。
- en: You can install Ubuntu for free inside a virtual machine or as your primary
    operating system. As long as your system has enough CPU, RAM, and disk space,
    I recommend that you use a virtual machine with Oracle VirtualBox, which is available
    at [https://www.virtualbox.org/](https://www.virtualbox.org/). VMWare Player is
    an alternative to VirtualBox and is available at [https://www.vmware.com/products/player/playerpro-evaluation.html](https://www.vmware.com/products/player/playerpro-evaluation.html).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在虚拟机中免费安装 Ubuntu，或者将其作为主要操作系统使用。只要你的系统有足够的 CPU、内存和磁盘空间，我推荐使用 Oracle VirtualBox
    来创建虚拟机，下载地址为 [https://www.virtualbox.org/](https://www.virtualbox.org/)。VMWare
    Player 是 VirtualBox 的替代品，下载地址为 [https://www.vmware.com/products/player/playerpro-evaluation.html](https://www.vmware.com/products/player/playerpro-evaluation.html)。
- en: 'Download and install VirtualBox, and then, download the Ubuntu desktop ISO
    file. Create a virtual machine, have it boot the Ubuntu ISO, and choose the Install
    option. Once you have installed Ubuntu and logged in as your user, you can install
    the Go programming language. Ubuntu makes this incredibly easy by providing a
    package. Just open a Terminal window and run the following command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 下载并安装 VirtualBox，然后下载 Ubuntu 桌面版 ISO 文件。创建一个虚拟机，让它启动 Ubuntu ISO 文件，并选择安装选项。安装好
    Ubuntu 并以用户身份登录后，你可以安装 Go 编程语言。Ubuntu 通过提供一个软件包使得这个过程变得非常简单。只需打开一个终端窗口并运行以下命令：
- en: '[PRE0]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Using `sudo` elevates your privileges in order to install and may ask you for
    your password. If everything was successful, you will now have access to the `go`
    executable, which contains the whole toolchain. You can run `go help` or `go`
    by itself for usage instructions.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `sudo` 提升你的权限以进行安装，并可能会要求你输入密码。如果一切顺利，你现在可以访问 `go` 可执行文件，它包含了整个工具链。你可以运行
    `go help` 或直接运行 `go` 来查看使用说明。
- en: 'If you are not using Ubuntu or want to install the latest version, you can
    download the latest version from [https://golang.org/dl](https://golang.org/dl/).
    The Windows and Mac installer will take care of updating your `PATH` environment
    variable, but in Linux you will have to move the extracted contents to a desired
    location, such as `/opt/go`, and then update your `PATH` environment variable
    manually to include the location. Consider this example:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有使用 Ubuntu 或者想要安装最新版本，可以从[https://golang.org/dl](https://golang.org/dl/)下载最新版本。Windows
    和 Mac 的安装程序会自动更新你的 `PATH` 环境变量，但在 Linux 上，你需要手动将解压后的内容移动到期望的位置，比如 `/opt/go`，然后更新你的
    `PATH` 环境变量以包含该位置。可以参考以下示例：
- en: '[PRE1]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now restart your Terminal for the changes to take effect. If you are using a
    shell other than Bash, you will need to update the proper RC file for your shell.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在重新启动终端以使更改生效。如果你使用的是非 Bash 的 shell，你需要更新相应的 RC 文件。
- en: Installing Go on other platforms
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在其他平台上安装 Go
- en: If you are not using Ubuntu, you can still install Go easily. The Go website
    provides multiple installation formats on the Downloads page at [https://golang.org/dl/](https://golang.org/dl/).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有使用 Ubuntu，依然可以轻松安装 Go。Go 官方网站在[https://golang.org/dl/](https://golang.org/dl/)的下载页面提供了多种安装格式。
- en: Other Linux distributions
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他 Linux 发行版
- en: The first option is to use the package manager for the Linux distribution to
    install Go. Most major distributions have a package for Go. Names vary, so a web
    search may be necessary to get the exact package name. If there is no package
    available, you can simply download the precompiled Linux tarball and extract it.
    A good place to extract the contents is `/opt/go`. Then, add `/opt/go/bin` to
    your `PATH` environment variable the same way as described in the previous section.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个选项是使用 Linux 发行版的包管理器来安装 Go。大多数主流发行版都有 Go 的安装包。包的名称可能不同，所以可能需要通过网络搜索来找到准确的包名。如果没有可用的包，你可以直接下载预编译的
    Linux tarball 并解压。一个好的解压位置是 `/opt/go`。然后，像前面所述那样，将 `/opt/go/bin` 添加到你的 `PATH`
    环境变量中。
- en: Windows
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows
- en: An official Windows installer is available, which makes installation as simple
    as running the installer. You may need to modify the environment variables and
    update your `%PATH%` variable. In Windows 10, this can be found by navigating
    to Control Panel | System | Advanced System Settings | Environment Variables.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了官方的 Windows 安装程序，使安装过程变得像运行安装程序一样简单。你可能需要修改环境变量并更新 `%PATH%` 变量。在 Windows
    10 中，你可以通过控制面板 | 系统 | 高级系统设置 | 环境变量来找到它。
- en: Mac
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mac
- en: An official installer is also available for Mac. After running the installer,
    Go will be available in your `PATH` variable.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Mac 也提供官方安装程序。运行安装程序后，Go 将自动添加到你的 `PATH` 环境变量中。
- en: Setting up Go
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Go
- en: 'At this point, your environment should have Go installed and you should be
    able to run `go` executable from your Terminal window. The go program is how you
    access the Go toolchain. You can test it by running this command:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你的环境应该已经安装了 Go，并且你应该能够在终端窗口中运行 `go` 可执行文件。`go` 程序是你访问 Go 工具链的方式。你可以通过运行以下命令来测试它：
- en: '[PRE2]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now we are ready to write a first Hello World program to ensure that our environment
    is fully functional. Before we start coding, though, we need to create a proper
    workspace.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备编写第一个 Hello World 程序，以确保我们的环境完全正常。我们开始编写代码之前，需要创建一个合适的工作空间。
- en: Creating your workspace
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你的工作空间
- en: Go has a standard folder structure for a workspace. It is important to conform
    to certain standards for the Go toolchain to work properly. You can create a workspace
    directory anywhere you want and name it anything you like. For the lab environment,
    we will simply use the `Home` directory as the Go workspace. This means that source
    files will reside in `~/src`, packages will be built in `~/pkg`, and executables
    will be installed to `~/bin`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Go 有一个标准的工作空间文件夹结构。遵循这些标准对于 Go 工具链的正常工作至关重要。你可以在任何地方创建工作空间目录，并将其命名为你喜欢的名字。在实验环境中，我们将使用
    `Home` 目录作为 Go 工作空间。这意味着源代码文件将位于 `~/src`，包将构建在 `~/pkg`，可执行文件将安装到 `~/bin`。
- en: Setting up environment variables
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置环境变量
- en: 'In order for most of the Go toolchain to work, the `GOPATH` environment variable
    must be set. The `GOPATH` specifies what directory you treat as your workspace.
    The `GOPATH` environment variable must be set before you can build packages. For
    more help and information, call the `go help` command in the Terminal by running
    this command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使大多数Go工具链正常工作，必须设置`GOPATH`环境变量。`GOPATH`指定你将哪个目录作为工作空间。在构建包之前，必须先设置`GOPATH`环境变量。更多帮助和信息，可以通过在终端中运行以下命令来调用`go
    help`命令：
- en: '[PRE3]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We need to tell Go to treat our `home` directory as the workspace. This is
    done by setting the `GOPATH` environment variable. You can set `GOPATH` in three
    ways:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要告诉Go将`home`目录视为工作空间。这是通过设置`GOPATH`环境变量来完成的。你可以通过三种方式设置`GOPATH`：
- en: 'The first way is to set it manually each time you run the `go` command. Consider
    this example:'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一种方法是每次运行`go`命令时手动设置它。考虑这个示例：
- en: '[PRE4]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can also set the `GOPATH` variable so that it stays set until you close
    your Terminal and the environment variable is lost:'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你也可以设置`GOPATH`变量，这样它将在你关闭终端并丢失环境变量之前一直保持设置状态：
- en: '[PRE5]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The third option is to set the `GOPATH` environment variable permanently as
    follows:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个选项是永久设置`GOPATH`环境变量，如下所示：
- en: Add it to your shell startup script, `.bashrc`. This will set the variable every
    time you start the Terminal.
  id: totrans-116
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其添加到你的Shell启动脚本`.bashrc`中。这样每次启动终端时都会设置该变量。
- en: 'Run this to ensure that `GOPATH` is set whenever you open future Terminal/shell
    sessions:'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行此命令以确保每次打开终端/ shell会话时都设置了`GOPATH`：
- en: '[PRE6]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Restart your Terminal for the changes to take effect. If you are using Zsh or
    an alternative shell, you will need to update the respective RC file.
  id: totrans-119
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启终端以使更改生效。如果你使用的是Zsh或其他替代的Shell，你需要更新相应的RC文件。
- en: Note that Go version 1.8 and greater do not require the `GOPATH` environment
    variable to be explicitly set. If no `GOPATH` is set, it will use `$HOME/go` as
    a default workspace.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Go版本1.8及更高版本不需要显式设置`GOPATH`环境变量。如果没有设置`GOPATH`，它将使用`$HOME/go`作为默认工作空间。
- en: Editors
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑器
- en: We're about to write our first program in our new `hello` directory. You will
    first need to choose which editor to use. Fortunately, working with Go does not
    require any special IDE or editor. The Go toolchain integrates easily into many
    editors and IDEs. Your options range from using a simple text editor, such as
    Notepad, to full-fledged IDEs dedicated to Go.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将编写我们在新`hello`目录中的第一个程序。你首先需要选择使用哪个编辑器。幸运的是，使用Go并不需要特殊的IDE或编辑器。Go工具链可以轻松集成到许多编辑器和IDE中。你的选择从使用简单的文本编辑器（如Notepad）到专门为Go设计的完整IDE。
- en: I recommend that you start with a simple text editor, such as nano or gedit,
    since these are included with Ubuntu, easy to use, and support syntax highlighting
    for Go out of the box. Feel free to choose another editor or IDE though.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议你从一个简单的文本编辑器开始，比如nano或gedit，因为这些编辑器在Ubuntu中已经预装，易于使用，且原生支持Go语法高亮。不过，你也可以选择其他编辑器或IDE。
- en: Plugins exist for many text editors and IDEs to add Go support. For example,
    Visual Studio Code, Emacs, Sublime Text, JetBrains IntelliJ, Vim, Atom, NetBeans,
    and Eclipse all have Go plugins. There are a couple of Go-specific IDEs, namely
    JetBrains GoLand and LiteIDE, both of which are cross-platform.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 许多文本编辑器和IDE都提供Go支持的插件。例如，Visual Studio Code、Emacs、Sublime Text、JetBrains IntelliJ、Vim、Atom、NetBeans和Eclipse都有Go插件。有几个Go专用的IDE，即JetBrains
    GoLand和LiteIDE，它们都是跨平台的。
- en: Start with the `nano` or `gedit` command and explore other editors and IDEs
    after you are comfortable with Go. This book will not compare the editors or cover
    how to configure them.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 从`nano`或`gedit`命令开始，当你熟悉Go后，再探索其他编辑器和IDE。本书不会比较这些编辑器，也不涉及如何配置它们。
- en: Creating your first package
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你的第一个包
- en: 'Within the `~/src` directory, any directory you create is a package. The name
    of your directory becomes the name of the package or application. We need to first
    make sure that the `src` directory exists. Tilde (`~`) is a shortcut for your
    home directory similar to the `$HOME` variable. Refer to the following code block:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在`~/src`目录内，任何你创建的目录都是一个包。你的目录名就是包或应用程序的名称。我们首先需要确保`src`目录存在。波浪号（`~`）是你家目录的快捷方式，类似于`$HOME`变量。参考以下代码块：
- en: '[PRE7]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s create a new package named `hello` for our first application:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为我们的第一个应用程序创建一个名为`hello`的新包：
- en: '[PRE8]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: A package is simply a directory. You can have one or more source files inside
    a package. Any subdirectories are treated as separate packages. A package can
    be an application with a `main()` function (`package main`), or it can be a library
    that can only be imported to other packages. This package doesn't have any files
    yet, but we'll write the first file in a moment. Don't worry too much about package
    structure for now. You can read more about package paths at [https://golang.org/doc/code.html#PackagePaths](https://golang.org/doc/code.html#PackagePaths).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 包其实就是一个目录。你可以在一个包中包含一个或多个源文件。任何子目录都被视为单独的包。一个包可以是一个包含`main()`函数的应用程序（`package
    main`），也可以是一个只能被其他包导入的库。这个包现在还没有文件，但我们稍后会写第一个文件。现在不要太担心包的结构。你可以在[https://golang.org/doc/code.html#PackagePaths](https://golang.org/doc/code.html#PackagePaths)上阅读更多关于包路径的信息。
- en: Writing your first program
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写你的第一个程序
- en: 'The simplest package you can have is a single file inside a directory. Create
    a new file, `~/src/hello/hello.go`, and put the following code inside:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以拥有的最简单的包是一个目录中的单个文件。创建一个新文件`~/src/hello/hello.go`，并将以下代码放入其中：
- en: '[PRE9]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Running the executable file
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行可执行文件
- en: 'The simplest way to execute a program is with the `go run` command. The following
    command will run the file without leaving behind an executable file:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 执行程序的最简单方式是使用`go run`命令。以下命令将运行文件而不留下可执行文件：
- en: '[PRE10]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Building the executable file
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建可执行文件
- en: 'To compile and build an executable file, use the `go build` command. When running
    `go build` you must pass a path to a package. The package path you provide is
    relative to `$GOPATH/src`. Since our package is in `~/src/hello`, we would run
    the command as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要编译并构建可执行文件，请使用`go build`命令。在运行`go build`时，你必须提供一个包的路径。你提供的包路径是相对于`$GOPATH/src`的。由于我们的包在`~/src/hello`，我们将如下运行该命令：
- en: '[PRE11]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can actually call `go build` from anywhere as long as we have a `$GOPATH`
    set. The executable binary that is created will be output in the current working
    directory. You can then run it with this command:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 只要我们设置了`$GOPATH`，其实可以从任何地方调用`go build`。创建的可执行文件将输出到当前工作目录。然后，你可以使用以下命令运行它：
- en: '[PRE12]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Installing the executable file
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装可执行文件
- en: The `go build` tool is good for generating an executable file in your current
    working directory, but there is a way to build and install your applications so
    that the executables are all collected in the same location.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`go build`工具适用于在当前工作目录中生成可执行文件，但也有方法可以构建并安装你的应用程序，使得所有可执行文件都收集在同一位置。'
- en: When you run `go install` it puts the output file in a default location of `$GOPATH/bin`.
    In our case, we set `$GOPATH` equal to our `$HOME`. So the default `bin` directory
    would be `$HOME/bin`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行`go install`时，它会将输出文件放在默认位置`$GOPATH/bin`。在我们的例子中，我们将`$GOPATH`设置为`$HOME`。所以默认的`bin`目录就是`$HOME/bin`。
- en: 'You can override the location by setting the `GOBIN` environment variable if
    you want it to install somewhere else. To install our `hello` program, we will
    run the following command:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望安装到其他位置，可以通过设置`GOBIN`环境变量来覆盖该位置。为了安装我们的`hello`程序，我们将运行以下命令：
- en: '[PRE13]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This will build and create an executable file, `~/bin/hello`. The `bin` directory
    will get created automatically if it does not already exist. If you run the `install`
    command multiple times, it will rebuild and overwrite the executable in the `bin`
    directory. Then the application can be run with this:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这将构建并创建一个可执行文件，`~/bin/hello`。如果`bin`目录不存在，它将自动创建。如果你多次运行`install`命令，它将重新构建并覆盖`bin`目录中的可执行文件。然后可以使用以下命令运行该应用程序：
- en: '[PRE14]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can add `~/bin` to your `PATH` environment variable for convenience. Doing
    so will allow you to run the applications from any working directory. To add the
    `bin` directory to your `PATH`, run this in the Terminal:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便，你可以将`~/bin`添加到`PATH`环境变量中。这样做将允许你从任何工作目录运行应用程序。要将`bin`目录添加到`PATH`，请在终端中运行以下命令：
- en: '[PRE15]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Be sure to restart your Terminal after that to refresh the environment variables.
    After that you can run the `hello` application by simply typing the following
    into the Terminal:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，请务必重新启动终端以刷新环境变量。之后，你可以通过在终端中输入以下内容来运行`hello`应用程序：
- en: '[PRE16]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Installing the application is completely optional. You don't have to install
    programs to run or build them. You can always build and run from your current
    working directory when developing, but it can be convenient to install finished
    applications that get used.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 安装应用程序完全是可选的。你不必安装程序就能运行或构建它们。在开发过程中，你可以始终从当前工作目录构建和运行，但安装已完成的应用程序是方便的，尤其是当它们被多次使用时。
- en: Formatting with go fmt
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 go fmt 格式化
- en: The `go fmt` command is used to format source code files to meet Go formatting
    standards.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`go fmt`命令用于格式化源代码文件，使其符合 Go 的格式化标准。'
- en: This will make sure that indentation is accurate and there are no excessive
    blank spaces, among other things. You can format a single Go source code file
    or a whole package at once. It is good practice to follow Go coding standards
    and run `go fmt` on your files so that you will have no doubt that your code follows
    the guidelines. Read more on formatting at [https://golang.org/doc/effective_go.html#formatting](https://golang.org/doc/effective_go.html#formatting).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这将确保缩进准确，并且不会有多余的空格，除此之外，还能进行其他检查。你可以格式化单个 Go 源代码文件或一次性格式化整个包。遵循 Go 编码规范并对文件运行`go
    fmt`是一个良好的习惯，这样可以确保你的代码遵循了相关的规范。关于格式化的更多信息，请阅读[https://golang.org/doc/effective_go.html#formatting](https://golang.org/doc/effective_go.html#formatting)。
- en: Running Go examples
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行 Go 示例
- en: The examples provided in this book are all self-contained. Every example is
    a full program and can be run. Most examples are short and demonstrate one specific
    topic. While the examples can be used as standalone programs, some of them may
    have limited use. They are intended to be references and used like a cookbook
    for building your own projects. Because each example is a self-contained main
    package, you can use the `go build` command to get an executable and `go run`
    to run the file. Here are some more details about the various options for building
    and running programs.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中提供的示例都是自包含的。每个示例都是完整的程序，并且可以运行。大多数示例较短，演示一个特定的主题。虽然这些示例可以作为独立的程序使用，但其中一些可能仅有有限的用途。它们的目的在于作为参考，并像烹饪书一样用于构建你自己的项目。因为每个示例都是自包含的主包，你可以使用`go
    build`命令来生成可执行文件，并使用`go run`来运行文件。以下是关于构建和运行程序的更多细节。
- en: Building a single Go file
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建单个 Go 文件
- en: 'If you build a file, it will generate an executable named after the Go file.
    Run the following command:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你构建一个文件，它将生成一个以 Go 文件命名的可执行文件。运行以下命令：
- en: '[PRE17]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This will give you an executable named example that could be executed like
    this:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个名为example的可执行文件，可以像这样执行：
- en: '[PRE18]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Running a single Go file
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行单个 Go 文件
- en: 'You don''t have to build a file and get an executable if you only want to run
    it. The `go run` option allows you to run the `.go` file without leaving an executable
    behind. You can still pass in arguments as if it was a regular executable, like
    this:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只是想运行程序，而不是构建文件并生成可执行文件，那你不需要构建文件。`go run`选项允许你直接运行`.go`文件，而不留下可执行文件。你仍然可以像运行常规可执行文件那样传递参数，示例如下：
- en: '[PRE19]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Building multiple Go files
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建多个 Go 文件
- en: 'If a program is split into multiple files, you can pass all of them to the
    `build` command. For example, if you have a `main.go` file and an `utility.go`
    file containing extra functions, you could build them by running the following
    command:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个程序被拆分成多个文件，你可以将所有文件传递给`build`命令。例如，如果你有一个`main.go`文件和一个包含额外函数的`utility.go`文件，你可以通过运行以下命令来构建它们：
- en: '[PRE20]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If you tried to build `main.go` by itself, it would not be able to find the
    references to the functions in `utility.go`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试单独构建`main.go`，它将无法找到对`utility.go`中函数的引用。
- en: Building a folder (package)
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建文件夹（包）
- en: If a package contains multiple Go files that need to be built, it is tedious
    to pass each file to the `build` command. If you run `go build` with no arguments
    inside a folder, it will attempt to build all the `.go` files in the directory.
    If one of those files contains a `package main` statement at the top, it will
    generate an executable named after the directory name. If you write a program,
    it is possible to write a package that contains no main file and is used only
    as a library to be included in other projects.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个包包含多个需要构建的 Go 文件，手动将每个文件传递给`build`命令会非常繁琐。如果你在文件夹中运行`go build`而不传递任何参数，它将尝试构建目录中的所有`.go`文件。如果其中某个文件在顶部包含`package
    main`语句，它将生成一个以目录名命名的可执行文件。如果你编写一个程序，也可以编写一个不包含主文件的包，该包仅作为库被其他项目引用。
- en: Installing a program for use
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装程序以供使用
- en: Installing a program is similar to building one but, instead of running `go
    build`, you run `go install`. You can run it inside a directory, pass it an absolute
    directory path, and pass it a directory path relative to the `$GOPATH` environment
    variable or on a file directly. Once a program has been installed, it goes into
    your `$GOBIN`, which you should have already set. You should have already added
    `$GOBIN` to your `$PATH` as well so that you can run the installed programs directly
    from your command line no matter what directory you are currently in. Installing
    is totally optional, but it is convenient for certain programs, especially for
    the ones you want to save or use frequently.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 安装程序类似于构建程序，但不同的是，你运行的是`go install`而不是`go build`。你可以在一个目录内运行它，传递一个绝对目录路径，或者传递相对于`$GOPATH`环境变量的目录路径，甚至直接传递一个文件路径。一旦程序被安装，它就会进入你的`$GOBIN`目录，前提是你已经设置好该目录。你还应该将`$GOBIN`添加到你的`$PATH`中，这样无论你当前在哪个目录，都可以直接从命令行运行已安装的程序。安装是完全可选的，但对于某些程序来说，尤其是你想保存或频繁使用的程序，安装会更方便。
- en: Summary
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: After reading this chapter, you should have a general understanding of the Go
    programming language and some of its key features. You should also have a version
    of Go installed on your machine with your environment variables set up. If you
    need more instructions on installing and testing your environment, refer to the
    Go documentation at [https://golang.org/doc/install](https://golang.org/doc/install).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，你应该对Go编程语言及其一些关键特性有一个总体的了解。你还应该在你的机器上安装了Go，并配置好了相关的环境变量。如果你需要更多关于安装和测试环境的说明，请参考Go文档：[https://golang.org/doc/install](https://golang.org/doc/install)。
- en: In the next chapter, we will look closer at the Go programming language, learning
    about the design, data types, keywords, features, control structures, and where
    to get help and find documentation. If you are already familiar with Go, it should
    be a good review to reinforce your foundational knowledge. If you are new to Go,
    it will serve as a primer to prepare you for the rest of the book.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将更深入地了解Go编程语言，学习其设计、数据类型、关键字、特性、控制结构以及如何获取帮助和查找文档。如果你已经熟悉Go，这将是一个很好的复习，帮助你巩固基础知识。如果你是Go新手，这将为你后续的学习做一个入门准备。
