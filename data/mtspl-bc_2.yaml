- en: Identifying and Scanning Targets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别和扫描目标
- en: We learned the basics of Metasploit in the [Chapter 1](part0020.html#J2B80-a731d733dba14ccabae643b74e2c8790),
    *Getting Started with Metasploit*. Let us now shift our focus to an essential
    aspect of every penetration test, that is, the scanning phase. One of the most
    critical aspects of penetration testing, the scanning phase involves identification
    of various software and services running on the target, hence, making it the most
    time consuming and the most crucial aspect of a professional penetration test.
    They say, and I quote, "*If you know the enemy and know yourself, you need not
    fear the result of a hundred battles*". If you want to gain access to the target
    by exploiting vulnerable software, the first step for you to take is to figure
    out if a particular version of the software is running on the target. The scanning
    and identification should be conducted thoroughly, so that you don't end up performing
    a DOS attack on the wrong version of the software.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第1章](part0020.html#J2B80-a731d733dba14ccabae643b74e2c8790)中学习了Metasploit的基础知识，*开始使用Metasploit*。现在让我们把焦点转移到每次渗透测试的一个重要方面，即扫描阶段。扫描阶段是渗透测试中最关键的部分之一，涉及识别目标上运行的各种软件和服务，因此，它是专业渗透测试中最耗时和最关键的部分。他们说，我引用一句话，"*知己知彼，百战不殆*”。如果你想通过利用易受攻击的软件来访问目标，你需要首先确定目标上是否运行了特定版本的软件。扫描和识别应该进行彻底，这样你就不会在错误的软件版本上执行DOS攻击。
- en: 'In this chapter, we will try uncovering the scanning aspects of Metasploit
    and we will try gaining hands-on knowledge of various scanning modules. We will
    cover the following key aspects of scanning:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将尝试揭示Metasploit的扫描方面，并尝试获得各种扫描模块的实际知识。我们将涵盖以下扫描的关键方面：
- en: Working with scanning modules for services such as FTP, MSSQL, and so on
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用针对FTP、MSSQL等服务的扫描模块
- en: Scanning SNMP services and making use of them
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扫描SNMP服务并利用它们
- en: Finding out SSL and HTTP information with Metasploit auxiliaries
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Metasploit辅助工具查找SSL和HTTP信息
- en: Essentials required in developing a customized module for scanning
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发自定义扫描模块所需的基本要素
- en: Making use of existing modules to create custom scanners
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用现有模块创建自定义扫描仪
- en: Let's run a basic FTP scanner module against a target network and analyze its
    functionality in detail.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们针对目标网络运行一个基本的FTP扫描模块，并详细分析其功能。
- en: Working with FTP servers using Metasploit
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit处理FTP服务器
- en: The module we will be using for this demonstration is `ftp_version.rb` from
    scanners in the auxiliary section.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在辅助部分的扫描仪中使用`ftp_version.rb`模块进行演示。
- en: Scanning FTP services
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扫描FTP服务
- en: 'Let us select the module using the `use` command and check what different options
    are required by the module for it to work:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`use`命令选择模块，并检查模块需要哪些不同选项才能工作：
- en: '![](img/00229.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00229.jpeg)'
- en: 'We can see we have a number of modules to work with. However, for now, let
    us use the `ftp_version` module, as shown in the following screenshot:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们有许多模块可以使用。但是，现在让我们使用`ftp_version`模块，如下面的截图所示：
- en: '![](img/00203.jpeg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00203.jpeg)'
- en: 'To scan the entire network, let''s set `RHOSTS to 192.168.10.0/24` (0-255)
    and also increase the number of threads for a speedy operation:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了扫描整个网络，让我们将`RHOSTS`设置为`192.168.10.0/24`（0-255），并增加线程数以加快操作：
- en: '![](img/00231.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00231.jpeg)'
- en: 'Let''s run the module and analyze the output:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行该模块并分析输出：
- en: '![](img/00232.jpeg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00232.jpeg)'
- en: We can see we have scanned the entire network and found two hosts running FTP
    services, which are TP-LINK FTP server and FTP Utility FTP server. So now that
    we know what services are running on the target, it will be easy for us to find
    any matching exploit if the version of these FTP services is vulnerable.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们已经扫描了整个网络，并发现有两台主机运行FTP服务，分别是TP-LINK FTP服务器和FTP Utility FTP服务器。现在我们知道了目标上运行的服务，如果这些FTP服务的版本易受攻击，我们就可以很容易地找到匹配的漏洞利用。
- en: 'We can also see that some lines are displaying the progress of the scan and
    generating a messy output. We can turn the show progress feature off by setting
    the value to false for the `ShowProgress` option, as shown in the following screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到一些行显示了扫描的进度并生成了混乱的输出。我们可以通过将`ShowProgress`选项的值设置为false来关闭显示进度功能，如下面的截图所示：
- en: '![](img/00233.jpeg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00233.jpeg)'
- en: Clearly, we have a better output as shown in the preceding screenshot. However,
    wait! We never had `ShowProgress` in the options, right? So where did it magically
    come from? It would be great if you were to stop at this point and try figuring
    it out yourself. In case you know that we have the advanced option command that
    can be invoked by passing show advanced in Metasploit, we can proceed further.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们有一个更好的输出，如前面的截图所示。但是，等等！我们之前没有`ShowProgress`选项，对吧？那么它从哪里神奇地出现的呢？如果你能停下来自己尝试弄清楚，那就太好了。如果你知道我们有一个高级选项命令，可以通过在Metasploit中传递`show
    advanced`来调用，我们可以继续进行。
- en: 'It may be required, during a penetration test, that you need minute details
    of the test and want a verbose output. Metasploit does offer a verbose feature,
    which can be set by passing set verbose true in the Metasploit console. Verbose
    output will generate data similar to the output in the following screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在渗透测试期间，可能需要详细了解测试的细节并获得详细的输出。Metasploit确实提供了一个详细的功能，可以通过在Metasploit控制台中传递`set
    verbose true`来设置。详细的输出将生成类似于以下截图中的输出：
- en: '![](img/00234.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00234.jpeg)'
- en: The module is now printing details such as connection status and much more.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块现在正在打印诸如连接状态等详细信息。
- en: Modifying scanner modules for fun and profit
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改扫描模块以获取乐趣和利润
- en: 'In a large testing environment, it would be a little difficult to analyze hundreds
    of different services and to find the vulnerable ones. I keep a list of vulnerable
    services in my customized scanning modules so that, as soon as a particular service
    is encountered, it gets marked as vulnerable if it matches a particular banner.
    Identifying vulnerable services is a good practice. For example, if you are given
    a vast network of 10000 systems, it would be difficult to run the default Metasploit
    module and expect a nicely formatted output. In such cases, we can customize the
    module accordingly and run it against the target. Metasploit is such a great tool
    that it provides inline editing. Hence, you can modify the modules on the fly
    using the `edit` command. However, you must have selected a module to edit. We
    can see in the following screenshot that Metasploit has opened the `ftp_version`
    module in the VI editor, and the logic of the module is also shown:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在大型测试环境中，分析数百种不同服务并找到易受攻击的服务会有些困难。我会在自定义的扫描模块中保留易受攻击的服务列表，因此一旦遇到特定服务，如果匹配特定横幅，就会标记为易受攻击。识别易受攻击的服务是一个好的做法。例如，如果你有一个拥有10000个系统的庞大网络，运行默认的Metasploit模块并期望得到格式良好的输出会很困难。在这种情况下，我们可以相应地自定义模块并针对目标运行它。Metasploit是一个非常好的工具，它提供了内联编辑。因此，您可以使用`edit`命令即时修改模块。但是，您必须选择要编辑的模块。我们可以在以下截图中看到，Metasploit已经在VI编辑器中打开了`ftp_version`模块，并且模块的逻辑也显示出来：
- en: '![](img/00235.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00235.jpeg)'
- en: 'The code is quite straightforward. If the `banner` variable is set, the status
    message gets printed on the screen with details such as `rhost`, `rport`, and
    the `banner` itself. Suppose we want to add another functionality to the module,
    that is, to check if the banner matches a particular banner of a commonly vulnerable
    FTP service, we can add the following lines of code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 代码非常简单。如果`banner`变量被设置，状态消息将以`rhost`、`rport`和`banner`本身的详细信息打印在屏幕上。假设我们想要向模块添加另一个功能，即检查横幅是否与常见易受攻击的FTP服务的特定横幅匹配，我们可以添加以下代码行：
- en: '![](img/00117.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00117.jpeg)'
- en: What we did in the preceding module is just an addition of another if-else block,
    which matches the banner to the regex expression `/FTP\sUtility\sFTP\sserver/`. If
    the banner matches the regex, it will denote a successful match of a vulnerable
    service, or else it will print Not Vulnerable. Quite simple, huh?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的模块中，我们所做的只是添加了另一个if-else块，它将横幅与正则表达式`/FTP\sUtility\sFTP\sserver/`进行匹配。如果横幅与正则表达式匹配，它将表示成功匹配易受攻击的服务，否则将打印出Not
    Vulnerable。相当简单，是吧？
- en: 'However, after you commit changes and write the module, you need to reload
    the module using the `reload` command. Let us now run the module and analyze the
    output:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在提交更改并编写模块之后，您需要使用`reload`命令重新加载模块。现在让我们运行模块并分析输出：
- en: '![](img/00238.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00238.jpeg)'
- en: Yeah! We did it successfully. Since the banner of the TP-LINK FTP server does
    not match our regex expression, Not Vulnerable gets printed on the console, and
    the banner for the other service matches our regex, so the Vulnerable message
    gets printed to the console.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！我们成功了。由于TP-LINK FTP服务器的横幅不匹配我们的正则表达式，因此在控制台上打印出Not Vulnerable，而其他服务的横幅与我们的正则表达式匹配，因此在控制台上打印出Vulnerable消息。
- en: For more information on editing and building new modules, refer to *Chapter
    2*, of *Mastering Metasploit 2nd Edition*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有关编辑和构建新模块的更多信息，请参阅《精通Metasploit第二版》的*第2章*。
- en: Scanning MSSQL servers with Metasploit
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit扫描MSSQL服务器
- en: Let us now jump into Metasploit-specific modules for testing the MSSQL server
    and see what kind of information we can gain by using them.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们进入专门用于测试MSSQL服务器的Metasploit特定模块，并看看我们可以通过使用它们获得什么样的信息。
- en: Using the mssql_ping module
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用mssql_ping模块
- en: The very first auxiliary module that we will be using is `mssql_ping`. This
    module will gather service information related to the MSSQL server.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的第一个辅助模块是`mssql_ping`。此模块将收集与MSSQL服务器相关的服务信息。
- en: 'So, let us load the module and start the scanning process as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们加载模块并按照以下步骤开始扫描过程：
- en: '![](img/00164.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00164.jpeg)'
- en: We can clearly see that `mssql_ping` has generated an excellent output of the
    fingerprinted MSSQL service.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以清楚地看到`mssql_ping`生成了一个关于MSSQL服务的优秀输出。
- en: Brute-forcing MSSQL passwords
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暴力破解MSSQL密码
- en: Metasploit also offers brute-force modules. A successful brute-force does exploit
    low entropy vulnerabilities; if it produces results in a reasonable amount of
    time it is considered a valid finding. Hence, we will cover brute-forcing in this
    phase of the penetration test itself. Metasploit has a built-in module named `mssql_login`,
    which we can use as an authentication tester for brute-forcing the username and
    password of an MSSQL server database.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit还提供了暴力破解模块。成功的暴力破解会利用低熵漏洞；如果在合理的时间内产生结果，就被视为有效发现。因此，在渗透测试的这个阶段，我们将涵盖暴力破解。Metasploit有一个内置模块名为`mssql_login`，我们可以将其用作MSSQL服务器数据库用户名和密码的认证测试器。
- en: 'Let us load the module and analyze the results:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们加载模块并分析结果：
- en: '![](img/00001.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00001.jpeg)'
- en: 'As soon as we ran this module, it tested for the default credentials at the
    very first step, that is, with the USERNAME sa and PASSWORD as blank, and found
    that the login was successful. Therefore, we can conclude that default credentials
    are still being used. Additionally, we must try testing for more credentials if
    in case the sa account is not immediately found. To achieve this, we will set
    the USER_FILE and PASS_FILE parameters with the name of the files that contain
    dictionaries to brute-force the username and the password of the DBMS:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们运行这个模块时，它立即在第一步测试了默认凭据，即使用用户名sa和空密码，并发现登录成功。因此，我们可以得出结论，仍然在使用默认凭据。此外，如果sa账户没有立即找到，我们必须尝试测试更多的凭据。为了实现这一点，我们将使用包含用于暴力破解DBMS用户名和密码的字典的文件名来设置USER_FILE和PASS_FILE参数：
- en: '![](img/00016.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00016.jpeg)'
- en: 'Let us set the required parameters; these are the `USER_FILE` list, the `PASS_FILE`
    list, and `RHOSTS` for running this module successfully as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设置所需的参数；这些是`USER_FILE`列表，`PASS_FILE`列表，以及`RHOSTS`，以成功运行此模块：
- en: '![](img/00024.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00024.jpeg)'
- en: 'Running this module against the target database server, we will have output
    similar to the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此模块针对目标数据库服务器，我们将得到类似以下的输出：
- en: '![](img/00035.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00035.jpeg)'
- en: As we can see from the preceding result, we have two entries that correspond
    to the successful login of the user in the database. We found a default user sa
    with a blank password and another user nipun having a password as 12345.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们从上面的结果中可以看到的，我们有两个条目对应于用户在数据库中的成功登录。我们找到了一个默认用户sa，密码为空，另一个用户nipun，密码为12345。
- en: Refer to [https://github.com/danielmiessler/SecLists/tree/master/Passwords](https://github.com/danielmiessler/SecLists/tree/master/Passwords)
    for some excellent dictionaries that can be used in password brute-force.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考[https://github.com/danielmiessler/SecLists/tree/master/Passwords](https://github.com/danielmiessler/SecLists/tree/master/Passwords)获取一些可以用于密码暴力破解的优秀字典。
- en: For more information on testing databases, refer to *Chapter 5*, from *Mastering
    Metasploit First/Second Edition*.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有关测试数据库的更多信息，请参阅*Mastering Metasploit First/Second Edition*的*第5章*。
- en: It is a good idea to set the `USER_AS_PASS` and `BLANK_PASSWORDS` options to
    `true` while conducting a brute-force, since many of the administrators keep default
    credentials for various installations.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行暴力破解时，将`USER_AS_PASS`和`BLANK_PASSWORDS`选项设置为`true`是一个好主意，因为许多管理员会为各种安装保留默认凭据。
- en: Scanning SNMP services with Metasploit
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit扫描SNMP服务。
- en: 'Let us perform a TCP port scan of a different network as shown in the following
    screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对不同网络进行TCP端口扫描，如下图所示：
- en: '![](img/00046.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00046.jpeg)'
- en: 'We will be using the tcp scan module listed under `auxiliary/scanner/portscan`,
    as shown in the preceding screenshot. Let''s run the module and analyze the results
    as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用在`auxiliary/scanner/portscan`下列出的tcp扫描模块，如上图所示。让我们运行该模块并分析结果如下：
- en: '![](img/00007.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00007.jpeg)'
- en: 'We can see that we found two services only that don''t look that appealing.
    Let us also perform a UDP sweep of the network and check if we can find something
    interesting:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们只找到了两个看起来不那么吸引人的服务。让我们也对网络进行UDP扫描，看看是否能找到一些有趣的东西：
- en: '![](img/00009.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00009.jpeg)'
- en: 'To carry out a UDP sweep, we will use the `auxiliary/scanner/discovery/udp_sweep`
    module as shown in the preceding screenshot. Next, we only need to provide the
    network range by setting the `RHOSTS` option. Additionally, you can increase the
    number of threads as well. Let''s run the module and analyze results:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行UDP扫描，我们将使用`auxiliary/scanner/discovery/udp_sweep`模块，如上图所示。接下来，我们只需要设置`RHOSTS`选项来提供网络范围。此外，您也可以增加线程数。让我们运行该模块并分析结果：
- en: '![](img/00075.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00075.jpeg)'
- en: Amazing! We can see plenty of results generated by the UDP sweep module. Additionally,
    a **Simple Network Management Protocol** (**SNMP**) service is also discovered
    on `192.168.1.19`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们可以看到UDP扫描模块生成了大量结果。此外，还在`192.168.1.19`上发现了一个**简单网络管理协议**（SNMP）服务。
- en: The SNMP, is a commonly used service that provides network management and monitoring
    capabilities. SNMP offers the ability to poll networked devices and monitor data
    such as utilization and errors for various systems on the host. SNMP is also capable
    of changing the configurations on the host, allowing the remote management of
    the network device. SNMP is vulnerable because it is often automatically installed
    on many network devices with `public` as the read string and `private` as the
    write string. This would mean that systems might be fitted to a network without
    any knowledge that SNMP is functioning and using these default keys.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: SNMP是一种常用的服务，提供网络管理和监控功能。SNMP提供了轮询网络设备和监视主机上各种系统的利用率和错误等数据的能力。SNMP还能够更改主机上的配置，允许远程管理网络设备。SNMP是易受攻击的，因为它经常自动安装在许多网络设备上，读字符串为`public`，写字符串为`private`。这意味着系统可能被安装到网络上，而没有任何知道SNMP正在运行并使用这些默认密钥的知识。
- en: 'This default installation of SNMP provides an attacker with the means to perform
    reconnaissance on a system, and, an exploit that can be used to create a denial
    of service. SNMP MIBs provide information such as the system name, location, contacts,
    and sometimes even phone numbers. Let''s perform an SNMP sweep over the target
    and analyze what interesting information we encounter:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此默认安装的SNMP为攻击者提供了在系统上执行侦察的手段，以及可以用来创建拒绝服务的利用。SNMP MIBs提供诸如系统名称、位置、联系人，有时甚至电话号码等信息。让我们对目标进行SNMP扫描，并分析我们遇到的有趣信息：
- en: '![](img/00011.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00011.jpeg)'
- en: 'We will use `snmp_enum` from `auxiliary/scanner/snmp` to perform an SNMP sweep.
    We set the value of `RHOSTS` to `192.168.1.19`, and we can additionally provide
    the number of threads as well. Let''s see what sort of information pops up:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`auxiliary/scanner/snmp`中的`snmp_enum`来执行SNMP扫描。我们将`RHOSTS`的值设置为`192.168.1.19`，还可以提供线程数。让我们看看会弹出什么样的信息：
- en: '![](img/00012.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00012.jpeg)'
- en: 'Wow! We can see that we have plenty of system information such as Host IP,
    hostname, contact, uptime, description of the system, and even user accounts.
    The found usernames can be handy in trying brute-force attacks as we did in the
    previous sections. Let''s see what else we got:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！我们可以看到我们有大量的系统信息，如主机IP、主机名、联系人、正常运行时间、系统描述，甚至用户账户。找到的用户名在尝试暴力破解攻击时可能会很有用，就像我们在前面的部分中所做的那样。让我们看看我们还得到了什么：
- en: '![](img/00013.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00013.jpeg)'
- en: 'We also have the list of listening ports (TCP and UDP), connection information,
    a list of network services, processes, and even a list of installed applications,
    as shown in the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有监听端口（TCP和UDP）的列表，连接信息，网络服务列表，进程列表，甚至安装应用程序列表，如下图所示：
- en: '![](img/00113.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00113.jpeg)'
- en: Hence, SNMP sweep provides us with tons of reconnaissance features for the target
    system, which may help us perform attacks such as social engineering and getting
    to know what various applications might be running on the target, so that we can
    prepare the list of services to exploit and focus on specifically.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，SNMP扫描为我们提供了大量有关目标系统的侦察功能，这可能有助于我们执行诸如社会工程和了解目标上可能运行的各种应用程序的攻击，以便我们可以准备要利用的服务列表并专注于特定服务。
- en: More on SNMP sweeping can be found at [https://www.offensive-security.com/metasploit-unleashed/snmp-scan/](https://www.offensive-security.com/metasploit-unleashed/snmp-scan/).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 有关SNMP扫描的更多信息，请访问[https://www.offensive-security.com/metasploit-unleashed/snmp-scan/](https://www.offensive-security.com/metasploit-unleashed/snmp-scan/)。
- en: Scanning NetBIOS services with Metasploit
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit扫描NetBIOS服务
- en: 'Netbios services also provide vital information about the target and help us
    uncover the target architecture, operating system version, and many other things.
    To scan a network for NetBIOS services, we can use the `nbname` module from `auxiliary/scanner/netbios`,
    as shown in the following screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Netbios服务还提供有关目标的重要信息，并帮助我们揭示目标架构、操作系统版本和许多其他信息。要扫描NetBIOS服务的网络，我们可以使用`auxiliary/scanner/netbios`中的`nbname`模块，如下图所示：
- en: '![](img/00017.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00017.jpeg)'
- en: 'As we did previously, we set the `RHOSTS` to the entire network by providing
    the CIDR identifier. Let''s run the module and analyze the results as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们像以前一样，通过提供CIDR标识符将`RHOSTS`设置为整个网络。让我们运行模块并分析结果如下：
- en: '![](img/00121.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00121.jpeg)'
- en: We can see that we have almost every system running the NetBIOS service on the
    network listed in the preceding screenshot. This information provides us with
    useful evidence for the operating system type, name, domain, and related IP addresses
    of the systems.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到在前面的屏幕截图中列出了几乎每个系统在网络上运行的NetBIOS服务。这些信息为我们提供了有关系统的操作系统类型、名称、域和相关IP地址的有用证据。
- en: Scanning HTTP services with Metasploit
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit扫描HTTP服务
- en: 'Metasploit allows us to perform fingerprinting of various HTTP services. Additionally,
    Metasploit contains a large number of exploit modules targeting different kinds
    of web servers. Hence, scanning HTTP services not only allows for fingerprinting
    the web servers, but it builds a base of web server vulnerabilities that Metasploit
    can attack later. Let us use the `http_version` module and run it against the
    network as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit允许我们对各种HTTP服务进行指纹识别。此外，Metasploit包含大量针对不同类型的Web服务器的利用模块。因此，扫描HTTP服务不仅允许对Web服务器进行指纹识别，还可以建立Metasploit可以稍后攻击的Web服务器漏洞的基础。让我们使用`http_version`模块并针对网络运行它如下：
- en: '![](img/00125.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00125.jpeg)'
- en: 'Let''s execute the module after setting up all the necessary options such as
    `RHOSTS` and `Threads` as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置所有必要的选项（如`RHOSTS`和`Threads`）之后，让我们执行模块如下：
- en: '![](img/00020.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00020.jpeg)'
- en: The `http_version` module from Metasploit has successfully fingerprinted various
    web server software and applications in the network. We will exploit some of these
    services in [Chapter 3](part0049.html#1ENBI0-a731d733dba14ccabae643b74e2c8790), *Exploitation
    and Gaining Access*. We saw how we could fingerprint HTTP services, so let's try
    figuring out if we can scan its big brother, the HTTPS with Metasploit.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit的`http_version`模块已成功对网络中的各种Web服务器软件和应用程序进行了指纹识别。我们将在[第3章](part0049.html#1ENBI0-a731d733dba14ccabae643b74e2c8790)中利用其中一些服务，*利用和获取访问权限*。我们看到了如何对HTTP服务进行指纹识别，所以让我们尝试看看我们是否可以扫描它的大哥，使用Metasploit扫描HTTPS。
- en: Scanning HTTPS/SSL with Metasploit
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit扫描HTTPS/SSL
- en: 'Metasploit contains the SSL scanner module that can uncover a variety of information
    related to the SSL service on a target. Let us quickly set up and run the module
    as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit包含SSL扫描模块，可以揭示与目标上的SSL服务相关的各种信息。让我们快速设置并运行模块如下：
- en: '![](img/00022.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00022.jpeg)'
- en: 'We have the SSL module from `auxiliary/scanner/http`, as shown in the preceding
    screenshot. We can now set the `RHOSTS`, a number of threads to run, and `RPORT`
    if it is not `443`, and execute the module as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，我们有来自`auxiliary/scanner/http`的SSL模块。现在我们可以设置`RHOSTS`，运行的线程数，如果不是`443`，还可以设置`RPORT`，然后执行模块如下：
- en: '![](img/00023.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00023.jpeg)'
- en: Analyzing the preceding output, we can see that we have a self-signed certificate
    in place on the IP address `192.168.1.8` and other details such as CA authority,
    e-mail address, and much more. This information becomes vital to law enforcement
    agencies and in cases of fraud investigation. There have been many cases where
    the CA has accidentally signed malware spreading sites for SSL services.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通过分析前面的输出，我们可以看到我们在IP地址`192.168.1.8`上放置了一个自签名证书，以及其他详细信息，如CA授权、电子邮件地址等。这些信息对执法机构和欺诈调查案件至关重要。曾经有很多情况下，CA意外地为SSL服务签署了恶意软件传播站点。
- en: We learned about various Metasploit modules. Let us now delve deeper and look
    at how the modules are built.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解了各种Metasploit模块。现在让我们深入研究并看看模块是如何构建的。
- en: Module building essentials
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块构建基础
- en: The best way to start learning about module development is to delve deeper into
    the existing Metasploit modules and see how they work. Let's look at some modules
    to find out what happens when we run these modules.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 开始学习模块开发的最佳方法是深入研究现有的Metasploit模块，看看它们是如何工作的。让我们看看一些模块，找出当我们运行这些模块时会发生什么。
- en: The format of a Metasploit module
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metasploit模块的格式
- en: 'The skeleton for Metasploit modules is relatively simple. We can see the universal
    header section in the following code:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit模块的骨架相对简单。我们可以在以下代码中看到通用的头部部分：
- en: '[PRE0]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A module starts by including the necessary libraries with the required keyword,
    which in the preceding code is followed by the `msf/core` libraries. Thus, it
    includes the `core` libraries from the `msf` directory.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 模块通过包含必要的库和所需的关键字开始，前面的代码后面跟着`msf/core`库。因此，它包括来自`msf`目录的`core`库。
- en: The next major thing is to define the class type in place of `MetasploitModule`,
    which is `Metasploit3` or `Metasploit4`, based on the intended version of Metasploit.
    In the same line where we define the class type, we need to set the type of module
    we are going to create. We can see that we have defined `MSF::Auxiliary` for the
    same purpose.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个重要的事情是定义类类型，而不是`MetasploitModule`，而是根据Metasploit的预期版本，是`Metasploit3`还是`Metasploit4`。在我们定义类类型的同一行中，我们需要设置我们要创建的模块的类型。我们可以看到，我们已经为相同的目的定义了`MSF::Auxiliary`。
- en: In the initialize method, which is a default constructor in Ruby, we define
    the `Name`, `Description`, `Author`, `Licensing`, `CVE details`, and so on; this
    method covers all the relevant information for a particular module. The name contains
    the software name which is being targeted; `Description` contains the excerpt
    on the explanation of the vulnerability, `Author` is the name of the person who
    develops the module, and `License` is `MSF_LICENSE` as stated in the preceding
    code example. The `Auxiliary` module's primary method is the run method. Hence,
    all the operations should be performed on it unless, and until, you have plenty
    of other methods. However, the execution will still begin from the run method.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始化方法中，即Ruby中的默认构造函数，我们定义了`Name`、`Description`、`Author`、`Licensing`、`CVE details`等；这个方法涵盖了特定模块的所有相关信息。名称包含了被定位的软件名称；`Description`包含了对漏洞解释的摘录，`Author`是开发模块的人的名字，`License`是前面代码示例中所述的`MSF_LICENSE`。`Auxiliary`模块的主要方法是`run`方法。因此，除非你有很多其他方法，否则所有操作都应该在这个方法上执行。然而，执行仍然将从`run`方法开始。
- en: Refer to *Chapters 2, 3,* and *4* from *Mastering Metasploit First/Second Edition*
    for more on developing modules.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 有关开发模块的更多信息，请参阅*《精通Metasploit 第一/第二版》*的*第2、3、4章*。
- en: Refer to [https://www.offensive-security.com/metasploit-unleashed/skeleton-creation/](https://www.offensive-security.com/metasploit-unleashed/skeleton-creation/)
    for more information on module structure.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 有关模块结构的更多信息，请参阅[https://www.offensive-security.com/metasploit-unleashed/skeleton-creation/](https://www.offensive-security.com/metasploit-unleashed/skeleton-creation/)。
- en: Disassembling existing HTTP server scanner modules
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分解现有的HTTP服务器扫描器模块
- en: Let's work with a simple module that we used previously, that is, the HTTP version
    scanner and see how it works. The path to this Metasploit module is `/modules/auxiliary/scanner/http/http_version.rb`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用之前使用过的一个简单模块，即HTTP版本扫描器，并看看它是如何工作的。这个Metasploit模块的路径是`/modules/auxiliary/scanner/http/http_version.rb`。
- en: 'Let''s examine this module systematically:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们系统地检查这个模块：
- en: '[PRE1]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s discuss how things are arranged here. The copyright lines starting with
    the `#` symbol are the comments and they are included in all Metasploit modules.
    The required `''rex/proto/http''` statement asks the interpreter to include a
    path to all the HTTP protocol methods from the `rex` library. Therefore, the path
    to all the files from the `/lib/rex/proto/http` directory is now available to
    the module, as shown in the following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论这里的安排方式。以`#`符号开头的版权行是注释，它们包含在所有Metasploit模块中。所需的`'rex/proto/http'`语句要求解释器包含来自`rex`库的所有HTTP协议方法的路径。因此，来自`/lib/rex/proto/http`目录的所有文件的路径现在对模块可用，如下面的屏幕截图所示：
- en: '![](img/00025.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00025.jpeg)'
- en: All these files contain a variety of HTTP methods, which include functions to
    set up a connection, the `GET` and `POST` request, response handling, and so on.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些文件都包含各种HTTP方法，包括建立连接的功能，`GET`和`POST`请求，响应处理等。
- en: 'In the next step, the required `''msf/core''` statement is used to include
    a path for all the necessary `core` libraries as discussed previously. The `Metasploit3`
    class statement defines the given code intended for Metasploit version 3 and above.
    However, `Msf::Auxiliary` describes the code as an auxiliary type module. Let''s
    now continue with the code as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，需要使用`'msf/core'`语句来包含所有必要的`core`库的路径，如前所述。`Metasploit3`类语句定义了适用于Metasploit版本3及以上的给定代码。然而，`Msf::Auxiliary`将代码描述为辅助类型模块。现在让我们继续进行如下代码：
- en: '[PRE2]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding section includes all the necessary library files that contain
    methods used in the modules. Let''s list down the path for these included libraries
    as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的部分包括了所有包含在模块中使用的方法的必要库文件。让我们按照以下方式列出这些包含的库的路径：
- en: '| Include Statement | Path | Usage |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| 包含语句 | 路径 | 用法 |'
- en: '| `Msf::Exploit::Remote::HttpClient` | `/lib/msf/core/exploit/http/client.rb`
    | This library file will provide various methods such as connecting to the target,
    sending a request, disconnecting a client, and so on. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `Msf::Exploit::Remote::HttpClient` | `/lib/msf/core/exploit/http/client.rb`
    | 这个库文件将提供各种方法，比如连接到目标、发送请求、断开客户端等。'
- en: '| `Msf::Auxiliary::WmapScanServer` | `/lib/msf/core/auxiliary/wmapmodule.rb`
    | You might be wondering, what is WMAP? WMAP is a web-application-based vulnerability
    scanner add-on for the Metasploit framework that aids web testing using Metasploit.
    |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `Msf::Auxiliary::WmapScanServer` | `/lib/msf/core/auxiliary/wmapmodule.rb`
    | 你可能会想，WMAP是什么？WMAP是Metasploit框架的基于Web应用程序的漏洞扫描器附加组件，它通过Metasploit帮助进行Web测试。'
- en: '| `Msf::Auxiliary::Scanner` | `/lib/msf/core/auxiliary/scanner.rb` | This file
    contains all the various functions for scanner-based modules. This file supports
    different methods such as running a module, initializing and scanning the progress,
    and so on. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `Msf::Auxiliary::Scanner` | `/lib/msf/core/auxiliary/scanner.rb` | 这个文件包含了基于扫描器的模块的各种功能。这个文件支持不同的方法，比如运行模块、初始化和扫描进度等。'
- en: Important information to make a note of, is that we can include these libraries
    only because we have defined the required `'msf/core'` statement in the preceding
    section.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的重要信息是，我们之所以可以包含这些库，是因为我们在前面的部分中定义了所需的`'msf/core'`语句。
- en: 'Let''s look at the next piece of code:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看下一段代码：
- en: '[PRE3]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This part of the module defines the initialize method, which initializes the
    basic parameters such as `Name`, `Author`, `Description`, and `License` for this
    module and initializes the WMAP parameters as well. Now let''s have a look at
    the last section of the code:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模块的这部分定义了初始化方法，该方法初始化了基本参数，如`Name`、`Author`、`Description`和`License`，并初始化了WMAP参数。现在让我们来看代码的最后一部分：
- en: '[PRE4]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding function is the meat of the scanner.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的函数是扫描器的核心。
- en: Libraries and the function
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 库和函数
- en: 'Let''s see some important functions from the libraries that are used in this
    module as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些在这个模块中使用的库中的重要函数：
- en: '| Functions | Library File | Usage |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 库文件 | 用法 |'
- en: '| `run_host` | `/lib/msf/core/auxiliary/scanner.rb` | The main method that
    will run once for each host. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `run_host` | `/lib/msf/core/auxiliary/scanner.rb` | 将为每个主机运行一次的主要方法。|'
- en: '| `connect` | `/lib/msf/core/auxiliary/scanner.rb` | Used to make a connection
    to the target host. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `connect` | `/lib/msf/core/auxiliary/scanner.rb` | 用于与目标主机建立连接。|'
- en: '| `send_raw_request` | `/core/exploit/http/client.rb` | This function is used
    to make raw HTTP requests to the target. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `send_raw_request` | `/core/exploit/http/client.rb` | 用于向目标发出原始HTTP请求的函数。|'
- en: '| `request_raw` | `/rex/proto/http/client.rb` | Library to which `send_raw_request`
    passes data. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `request_raw` | `/rex/proto/http/client.rb` | `send_raw_request`传递数据的库。|'
- en: '| `http_fingerprint` | `/lib/msf/core/exploit/http/client.rb` | Parses HTTP
    responses into usable variables. |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| `http_fingerprint` | `/lib/msf/core/exploit/http/client.rb` | 将HTTP响应解析为可用变量。|'
- en: 'Let''s now understand the module. Here, we have a method named `run_host` with
    an IP as the parameter to establish a connection to the required host. The `run_host`
    method is referred from the `/lib/msf/core/auxiliary/scanner.rb` library file.
    This method will run once for each host, as shown in the following screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们了解一下这个模块。在这里，我们有一个名为`run_host`的方法，参数是IP，用于与所需主机建立连接。`run_host`方法是从`/lib/msf/core/auxiliary/scanner.rb`库文件中引用的。这个方法将为每个主机运行一次，如下面的截图所示：
- en: '![](img/00026.jpeg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00026.jpeg)'
- en: Next, we have the begin keyword, which denotes the beginning of the code block.
    In the next statement, we have the connect method, which establishes the HTTP
    connection to the server as discussed in the table previously.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有`begin`关键字，表示代码块的开始。在下一条语句中，我们有`connect`方法，它建立了与服务器的HTTP连接，如前面的表中所讨论的。
- en: 'Next, we define a variable named `res`, which will store the response. We will
    use the `send_raw_request` method from the `/core/exploit/http/client.rb` file
    with the parameter URI as/and the method for the request as `GET`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义一个名为`res`的变量，它将存储响应。我们将使用`/core/exploit/http/client.rb`文件中的`send_raw_request`方法，参数为URI和请求的方法为`GET`：
- en: '![](img/00028.jpeg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00028.jpeg)'
- en: The preceding method will help you to connect to the server, create a request,
    send a request, and read the response. We save the response in the `res` variable.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的方法将帮助您连接到服务器，创建请求，发送请求并读取响应。我们将响应保存在`res`变量中。
- en: 'This method passes all the parameters to the `request_raw` method from the
    `/rex/proto/http/client.rb` file, where all these parameters are checked. We have
    plenty of parameters that can be set in the list of parameters. Let''s see what
    they are:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法将所有参数传递给`/rex/proto/http/client.rb`文件中的`request_raw`方法，其中检查了所有这些参数。我们有很多可以在参数列表中设置的参数。让我们看看它们是什么：
- en: '![](img/00029.jpeg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00029.jpeg)'
- en: 'Next, `res` is a variable that stores the results. The next instruction returns
    the result of if not `res` statement. However, when it comes to a successful request,
    execute the next command that will run the `http_fingerprint` method from the
    `/lib/msf/core/exploit/http/client.rb` file and store the result in a variable
    named `fp`. This method will record and filter out information such as set-cookie,
    powered-by, and other such headers. This method requires an HTTP response packet
    to make the calculations. So we will supply `:response => res` as a parameter,
    which denotes that fingerprinting should occur on the data received from the request
    generated previously using `res`. However, if this parameter is not given, it
    will redo everything and get the data again from the source. In the next line,
    we simply print out the response. The last line, `rescue:: Timeout::Error`, `::
    Errno::EPIPE`, will handle exceptions if the module times out.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，`res`是一个存储结果的变量。下一条指令返回了如果不是`res`语句的结果。然而，当涉及到成功的请求时，执行下一条命令，将从`/lib/msf/core/exploit/http/client.rb`文件中运行`http_fingerprint`方法，并将结果存储在名为`fp`的变量中。这个方法将记录和过滤诸如set-cookie、powered-by和其他类似标头的信息。这个方法需要一个HTTP响应数据包来进行计算。因此，我们将提供`:response
    => res`作为参数，表示应该对之前使用`res`生成的请求接收到的数据进行指纹识别。然而，如果没有给出这个参数，它将重新做一切，并再次从源头获取数据。在下一行，我们简单地打印出响应。最后一行，`rescue::
    Timeout::Error`，`:: Errno::EPIPE`，将处理模块超时的异常。'
- en: 'Now, let us run this module and see what the output is:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们运行这个模块，看看输出是什么：
- en: '![](img/00030.jpeg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00030.jpeg)'
- en: We have now seen how a module works. The concepts remain similar for all the
    other modules where you can easily navigate to the library functions and can build
    your modules.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经看到了模块的工作原理。对于所有其他模块，概念都是类似的，您可以轻松地导航到库函数并构建自己的模块。
- en: Summary and exercises
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要和练习
- en: 'Throughout this chapter, we covered scanning extensively over various types
    of services such as databases, FTP, HTTP, SNMP, NetBIOS, SSL, and more. We looked
    at how the stuff works for developing custom modules and dismantled some library
    functions and modules. This chapter will help you answer the following set of
    questions:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们广泛涵盖了对数据库、FTP、HTTP、SNMP、NetBIOS、SSL等各种类型服务的扫描。我们研究了为开发自定义模块以及拆解一些库函数和模块的工作原理。本章将帮助您回答以下一系列问题：
- en: How do you scan FTP, SNMP, SSL, MSSQL, NetBIOS, and various other services with
    Metasploit?
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Metasploit扫描FTP、SNMP、SSL、MSSQL、NetBIOS和其他各种服务？
- en: Why is it necessary to scan both TCP and UDP ports?
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么需要同时扫描TCP和UDP端口？
- en: How can a Metasploit module be edited inline for fun and profit?
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何内联编辑Metasploit模块以获取乐趣和利润？
- en: How are various libraries added to Metasploit modules?
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将各种库添加到Metasploit模块中？
- en: Where do you look for functions used in a Metasploit module to build a new module?
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您在哪里寻找用于构建新模块的Metasploit模块中的函数？
- en: What is the format of a Metasploit module?
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit模块的格式是什么？
- en: How do you print status, information, and error messages in Metasploit modules?
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在Metasploit模块中打印状态、信息和错误消息？
- en: 'You can try the following self-paced exercises to learn more about the scanners:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以尝试以下自学习练习来了解更多关于扫描器的知识：
- en: Try executing system commands through MSSQL using the credentials found in the
    tests
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试使用在测试中找到的凭据通过MSSQL执行系统命令
- en: Try finding a vulnerable web server on your network and find a matching exploit;
    you can use Metasploitable 2 and Metasploitable 3 for this exercise
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试在您的网络上找到一个易受攻击的Web服务器，并找到一个匹配的漏洞利用程序；您可以使用Metasploitable 2和Metasploitable
    3进行这个练习
- en: Try writing a simple custom HTTP scanning module with checks for a particularly
    vulnerable web server (like we did for FTP)
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试编写一个简单的自定义HTTP扫描模块，检查特别容易受攻击的Web服务器（就像我们为FTP所做的那样）
- en: It's now time to switch to the most action-packed chapter of this book-the exploitation
    phase. We will exploit numerous vulnerabilities based on the knowledge that we
    learned from this chapter, and we will look at various scenarios and bottlenecks
    that mitigate exploitation.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是切换到本书中最激动人心的章节-利用阶段的时候了。我们将利用我们从本章学到的知识来利用许多漏洞，并且我们将看到各种情景和瓶颈，以减轻利用。
