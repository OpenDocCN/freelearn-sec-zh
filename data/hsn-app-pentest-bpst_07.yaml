- en: Detecting Vulnerabilities Using Burp Suite
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Burp Suite检测漏洞
- en: As we saw in the previous chapter, Burp Suite is useful for identifying different
    kinds of vulnerabilities. In the previous chapter, the majority of them were input
    validation errors that were detected using the Intruder tool. In this chapter,
    we will check errors that are not related to input validation weaknesses.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一章中看到的，Burp Suite对于识别不同类型的漏洞非常有用。在上一章中，大部分漏洞都是使用Intruder工具检测到的输入验证错误。在本章中，我们将检查与输入验证弱点无关的错误。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Detecting CSRF
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测CSRF
- en: Detecting insecure direct object references
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测不安全的直接对象引用
- en: Detecting security misconfigurations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测安全配置错误
- en: Detecting insecure deserialization
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测不安全的反序列化
- en: Detecting OAuth-related issues
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测与OAuth相关的问题
- en: Detecting broken authentication
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测破损的身份验证
- en: Detecting CSRF
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测CSRF
- en: '**Cross-Site Request Forgery** (**CSRF**) is a vulnerability that allows a
    malicious user to make actions in an application, using the information stored
    in other applications. For example, imagine the scenario where you are logged
    in to different applications using just one network, which is a social network.
    If you send a request to the other sites, they will apply changes or actions,
    because they are using the information you have provided to the **central** application.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**跨站请求伪造**（**CSRF**）是一种漏洞，允许恶意用户使用其他应用程序中存储的信息在应用程序中执行操作。例如，想象一下，您只使用一个网络登录到不同的应用程序，这是一个社交网络。如果您向其他站点发送请求，它们将应用更改或操作，因为它们正在使用您提供给**中央**应用程序的信息。'
- en: 'So, a malicious user can exploit an application by creating a fake form or
    fake URL to perform an action in that application. This forces the user to execute
    the application without his knowledge. For example, look at this HTML code, which
    has a hidden link into an `<img>` tag:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，恶意用户可以通过创建一个虚假表单或虚假URL来利用应用程序，在该应用程序中执行操作。这迫使用户在不知情的情况下执行应用程序。例如，看看这段HTML代码，其中隐藏了一个链接到`<img>`标签中：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the beginning, you feel it's nothing different, it is just an inoffensive
    HTML tag. But when it is parsed, the browser gets the resource pointed by the
    tag and executes the URL. So, if a malicious user hides a URL that contains an
    action in this tag, such as change the password, the action will be made.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始，你觉得没什么不同，它只是一个无害的HTML标记。但是当它被解析时，浏览器会获取标记指向的资源并执行URL。因此，如果恶意用户隐藏了包含在此标记中的操作的URL，例如更改密码，操作将被执行。
- en: Detecting CSRF using Burp Suite
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Burp Suite检测CSRF
- en: The first thing you need to do in order to detect CSRF vulnerabilities is to
    map all the possible authorized actions that you can. This is because you need
    to test each action to discover if it is possible to execute any of them using
    the information stored. To map all these actions, you can use the Target tool.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要检测CSRF漏洞，首先需要映射所有可能的授权操作。这是因为您需要测试每个操作，以发现是否可能使用存储的信息执行其中任何一个。要映射所有这些操作，您可以使用Target工具。
- en: Burp Suite uses different types of methods to map an application. Manually,
    Burp Suite can collect all the requests, resources, and URLs in a passive way;
    but of course, it is limited just to the user's scope. Burp Suite also can make
    an automatic map using spidering and crawling techniques.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite使用不同类型的方法来映射应用程序。手动地，Burp Suite可以以被动的方式收集所有请求、资源和URL；但当然，它仅限于用户的范围。Burp
    Suite还可以使用蜘蛛和爬行技术进行自动映射。
- en: In the following screenshot, you can see how Burp Suite is creating an application's
    tree with all the actions. ...
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，您可以看到Burp Suite正在创建一个应用程序树，其中包含所有操作。...
- en: Steps for detecting CSRF using Burp Suite
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Burp Suite检测CSRF的步骤
- en: Of course, the Burp Suite scanner is able to detect CSRF flaws, but potentially
    using the parameter's information to call a function. To detect in a most assured
    way, we are going to use the Proxy tool and an extension called CSRF scanner.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，Burp Suite扫描程序能够检测CSRF缺陷，但可能会使用参数信息调用函数。为了更可靠地检测，我们将使用代理工具和名为CSRF扫描程序的扩展。
- en: 'To install the CSRF scanner, go to the Extender tab in Burp Suite, and look
    at the BApp Store for the CSRF Scanner and click on Install, as follows:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装CSRF扫描程序，请转到Burp Suite的Extender选项卡，并在BApp Store中查找CSRF Scanner，然后单击安装，如下所示：
- en: '![](img/0b79a3e5-7b21-48a4-a7da-25bd2df02bf6.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b79a3e5-7b21-48a4-a7da-25bd2df02bf6.png)'
- en: 'After the installation, a new tab will appear in Burp Suite, showing the tool,
    as follows:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装后，Burp Suite将显示一个新选项卡，显示该工具，如下所示：
- en: '![](img/cddd307e-e9a3-4424-930d-55ad0405ae6f.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cddd307e-e9a3-4424-930d-55ad0405ae6f.png)'
- en: 'To detect a CSRF, enter the application that we think is vulnerable, and intercept
    a request using the Intercept is on button. Remember that, for all CSRF vulnerabilities,
    you need to be logged in, or have a session established. Right-click on Engagement
    tools and then Generate CSRF PoC. A new window will be opened with the HTML form
    generated, using the data exposed in the request, as follows:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检测CSRF，请进入我们认为存在漏洞的应用程序，并使用拦截按钮拦截请求。请记住，对于所有CSRF漏洞，您需要登录或建立会话。右键单击“Engagement
    tools”，然后生成CSRF PoC。将打开一个新窗口，其中包含使用请求中公开的数据生成的HTML表单，如下所示：
- en: '![](img/a6fedb68-735c-4f5f-b024-cacad08bf1e0.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6fedb68-735c-4f5f-b024-cacad08bf1e0.png)'
- en: 'Verify that all the parameters are included in the form, and then copy it into
    Notepad or another text editor, and save it as an HTML file. Then open it in a
    web browser. You will just see a blank website with one single button, as follows:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证所有参数是否包含在表单中，然后将其复制到记事本或其他文本编辑器中，并将其保存为HTML文件。然后在Web浏览器中打开它。你将只看到一个空白网站和一个按钮，如下所示：
- en: '![](img/039f1c94-3055-475f-95a3-1871b0a5f630.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/039f1c94-3055-475f-95a3-1871b0a5f630.png)'
- en: Click on Submit request and the form will be sent to the website. As this is
    a **Proof of Concept** (**PoC**), the page is intentionally blank, but if you
    need to create a more realistic page, you just need to add the form into the page.
    If the actions are executed, the URL is susceptible to CSRF.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“提交请求”，表单将被发送到网站。由于这是一个**概念验证**（**PoC**），页面是故意留空的，但如果需要创建一个更真实的页面，只需将表单添加到页面中。如果操作被执行，该URL就容易受到CSRF攻击。
- en: The last tip, if you see that the application is using an anti-CSRF token, try
    to detect the vulnerability, because sometimes developers forget to use the token
    for all the functions, and it is possible to find someone that is vulnerable.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个提示是，如果发现应用程序使用了反CSRF令牌，请尝试检测漏洞，因为有时开发人员会忘记为所有功能使用令牌，可能会找到一个有漏洞的功能。
- en: Detecting Insecure Direct Object References
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测不安全的直接对象引用
- en: An **Insecure Direct Object Reference** (**IDOR**) vulnerability appears when
    a parameter gains access to a certain resource. By modifying this parameter, it
    is possible to access other resources that are not authorized for this user. Usually
    the affected parameters are used as control for the application's flow, for example,
    the named `id`, `uid`, `r`, `url`, `ur`, and so on.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当参数获得对某个资源的访问权限时，就会出现**不安全的直接对象引用**（**IDOR**）漏洞。通过修改此参数，可以访问未经授权的其他资源。通常受影响的参数用作应用程序流程的控制，例如命名为`id`、`uid`、`r`、`url`、`ur`等。
- en: 'These kinds of vulnerabilities could be detected using the `Target` tool in
    Burp Suite. Similar to the CSRF detection, the more URLs you detect, the more
    possibilities there are to find vulnerabilities:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用Burp Suite中的“目标”工具来检测这些漏洞。与CSRF检测类似，您检测到的URL越多，发现漏洞的可能性就越大：
- en: To add a target to the scope, go to Burp Suite, and using the secondary button
    of the mouse, click on Add to the scope option.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将目标添加到范围中，转到Burp Suite，并使用鼠标的辅助按钮，单击“添加到范围”选项。
- en: Then go to the ...
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后转到...
- en: Detecting security misconfigurations
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测安全配置
- en: Security misconfigurations are relative. In this category, a lot of possible
    errors are introduced, and the most simple and accurate way to detect them using
    Burp Suite is through the scanner.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 安全配置是相对的。在这个类别中，引入了很多可能的错误，使用Burp Suite检测它们的最简单和准确的方法是通过扫描器。
- en: 'Open Burp Suite and when the main Dashboard is displayed, click on New scan. Here
    it is possible to define the URL to scan, and some options, like credentials to
    log in to the application, as shown in the following screenshot:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Burp Suite，当主仪表板显示时，单击“新扫描”。在这里可以定义要扫描的URL和一些选项，比如登录应用程序的凭据，如下面的屏幕截图所示：
- en: '![](img/6365a938-bd69-4cfb-8fa3-7d62e13b95ee.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6365a938-bd69-4cfb-8fa3-7d62e13b95ee.png)'
- en: 'The tests are classified by categories. When the scan finishes, we can see
    that some issues are detected that are related to security misconfiguration, as
    shown in the following screenshot:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试按类别分类。扫描完成后，我们可以看到一些与安全配置有关的问题，如下面的屏幕截图所示：
- en: '![](img/16543d8a-093a-472e-925d-1fd949202244.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16543d8a-093a-472e-925d-1fd949202244.png)'
- en: As we can see, there are issues like Unencrypted communications or Clear submission
    password that we could not detect by analyzing the request, but the scanner marks
    an issue.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，有一些问题，比如未加密通信或明文提交密码，我们无法通过分析请求来检测，但扫描器标记了一个问题。
- en: Let's review some common security misconfigurations, which we will look into
    in detail in the following sections.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一些常见的安全配置错误，我们将在接下来的章节中详细讨论。
- en: Unencrypted communications and clear text protocols
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 未加密通信和明文协议
- en: There is a common issue that, in the most part, the developers and system administrators
    do not take into account; it is the use of unprotected communications channels.
    There are protocols that send information in clear text and, if a malicious user
    intercepts the traffic in the network, which is relatively easy, you can see all
    the information, irrespective of whether it's sensitive or not. This issue is
    commonly discarded, because the web applications are public; but remember that
    some of them are internal, and also could be visited from a public network.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个常见的问题，大多数开发人员和系统管理员没有考虑到；即未加密通信渠道的使用。有些协议以明文形式发送信息，如果恶意用户拦截网络中的流量（这相对容易），则可以查看所有信息，无论其是否敏感。这个问题通常被忽视，因为Web应用程序是公开的；但请记住，其中一些是内部的，也可以从公共网络访问。
- en: Default credentials
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 默认凭据
- en: Another important issue that could be used to get full control of the server
    that is hosting the application is the default credentials. There are many web
    servers, mail servers, database servers, CMSs, eCommerce tools, and so on that,
    when installed, have established a default password. It is so easy for a malicious
    user to get access to these services and applications.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要问题是可以用来完全控制托管应用程序的服务器的默认凭据。许多Web服务器、邮件服务器、数据库服务器、CMS、电子商务工具等在安装时都设有默认密码。对于恶意用户来说，访问这些服务和应用程序是非常容易的。
- en: Unattended installations
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无人值守安装
- en: Sometimes when a system administrator installs software, this software comes
    with other packages, for testing purposes or just as part of the main software.
    It is important to have an inventory of these installations in order to disallow
    access or delete, if it is possible. A malicious user can discover these unattended
    installations and exploit vulnerabilities on them.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，当系统管理员安装软件时，该软件会附带其他软件包，用于测试目的或作为主要软件的一部分。重要的是要对这些安装进行清单，以便禁止访问或删除，如果可能的话。恶意用户可以发现这些未经监控的安装，并利用它们的漏洞。
- en: Testing information
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试信息
- en: Some applications and packages have testing information that could provide access
    to a malicious user if it is active. For example, a common case is Oracle DBMS,
    which has a database with tables for testing purposes with a database administrator
    called `tiger`, for which the password is `scott`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一些应用程序和软件包具有测试信息，如果激活，可能会为恶意用户提供访问权限。例如，一个常见的情况是Oracle DBMS，它有一个用于测试目的的数据库，其中有一个名为`tiger`的数据库管理员，密码为`scott`。
- en: Default pages
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 默认页面
- en: Applications, mostly web servers, have default pages that could be detected
    by the malicious user and taken as banner grabbing.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序，主要是Web服务器，具有默认页面，可能会被恶意用户检测到并作为横幅抓取。
- en: Despite the Burp Suite scanner being useful in detecting this kind of issue,
    I recommend the use of a vulnerability scanner focused on infrastructure, for
    example Nessus, Qualys, Outpost24, OpenVAS, and so on.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Burp Suite扫描器在检测这种问题方面很有用，但我建议使用专注于基础设施的漏洞扫描器，例如Nessus、Qualys、Outpost24、OpenVAS等。
- en: Detecting insecure deserialization
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测不安全的反序列化
- en: '**Deserialization** is the process of passing some type of data to other data,
    to be managed by the application, for example, passing a JSON format request that
    is parsed and managed as XML by the application. Also, there are deserialization
    vulnerabilities where the technology used in the development is involved. These
    vulnerabilities pass resources of a certain type to binary objects.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**反序列化**是将某种类型的数据传递给其他数据，由应用程序进行管理的过程，例如，传递一个JSON格式的请求，由应用程序解析并以XML格式进行管理。此外，还存在涉及开发中使用的技术的反序列化漏洞。这些漏洞将某种类型的资源传递给二进制对象。'
- en: 'To understand the vulnerability, review the next snippet of code, published
    in the CVE.2011-2092:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解漏洞，请查看下面的代码片段，发布在CVE.2011-2092中：
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This code is the class definition of a data type called **JFrame**. In the
    next snippet of code, we can see how it is used:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码是称为**JFrame**的数据类型的类定义。在下面的代码片段中，我们可以看到它是如何使用的：
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The issue is that any kind of data can be entered into the attributes, as there
    is no validation for them, as seen in the following lines of code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于任何类型的数据都可以输入到属性中，因为它们没有经过验证，如下面的代码行所示：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The vulnerability derives in a denial of services, due to which the application
    is unable to manage the inputs. This is an insecure deserialization vulnerability.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞源于拒绝服务，因此应用程序无法管理输入。这是一种不安全的反序列化漏洞。
- en: Java Deserialization Scanner
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java Deserialization Scanner
- en: 'Java Deserialization Scanner is a Burp Suite extension to detect issues in
    the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Java Deserialization Scanner是Burp Suite的一个扩展，用于检测以下问题：
- en: Apache common collections 3 and 4
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache common collections 3和4
- en: Spring
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring
- en: Java 6, 7, and 8
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 6、7和8
- en: Hibernate
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hibernate
- en: JSON
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON
- en: Rome
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rome
- en: BeanUtils
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BeanUtils
- en: 'To get it, go to the `Extender` tool, and click on BApp Store, and then install
    the package. After the installation finishes, Burp Suite will have a new tab in
    the interface that will show the tool as follows:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获得它，转到`Extender`工具，单击BApp Store，然后安装包。安装完成后，Burp Suite将在界面上显示一个新选项卡，显示工具如下：
- en: '![](img/2d7c668b-0b42-4198-81a7-764164a9b945.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d7c668b-0b42-4198-81a7-764164a9b945.png)'
- en: 'Click on the Configuration tab, and in the following we can see the scans that
    are activated in the plugin:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“配置”选项卡，然后我们可以看到插件中激活的扫描：
- en: '![](img/21233bba-91ba-4033-86c3-f7f7bb722b23.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/21233bba-91ba-4033-86c3-f7f7bb722b23.png)'
- en: Now, to test an ...
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，要测试一个...
- en: Detecting OAuth-related issues
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测与OAuth相关的问题
- en: OAuth is an open standard that allows authorization in applications by sharing
    the authorization information between different applications without sharing the
    user's identify. This is the current standard used by Facebook, Google, Twitter,
    Plurk, and so on.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth是一种开放标准，允许在不同应用程序之间共享授权信息，而不共享用户身份。这是Facebook、Google、Twitter、Plurk等当前使用的标准。
- en: 'The most commons issues related to OAuth are the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 与OAuth相关的最常见问题如下：
- en: '**Insecure storage secrets**: OAuth is information that is stored on the client
    side. If the application does not store the OAuth information in the correct way,
    it exposes access to more than one application.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不安全的存储机密信息**：OAuth是存储在客户端的信息。如果应用程序没有以正确的方式存储OAuth信息，它会暴露给多个应用程序的访问权限。'
- en: '**Lack of confidentiality**: OAuth is a protocol that shares the authentication
    information with more than one application, but, what happens if it is shared
    with the wrong application? Well, it could be reused by other applications to
    steal the user''s access.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺乏保密性**：OAuth是一种协议，可以将认证信息与多个应用程序共享，但是，如果与错误的应用程序共享会发生什么呢？嗯，它可能会被其他应用程序重用以窃取用户的访问权限。'
- en: '**URL redirection**: If an application has a vulnerability that allows redirects,
    the malicious user can steal the OAuth information.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**URL重定向**：如果应用程序存在允许重定向的漏洞，恶意用户可以窃取OAuth信息。'
- en: Detecting SSO protocols
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测SSO协议
- en: 'There is an extension named **EsPReSSO** that isavailable in the BApp Store
    that detects the SSO protocol used by an application and classified. The protocols
    detected are the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为**EsPReSSO**的扩展，可以在BApp Store中找到，它可以检测应用程序使用的SSO协议并对其进行分类。检测到的协议如下：
- en: OpenID
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenID
- en: BrowserID
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BrowserID
- en: SAML
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SAML
- en: OAuth
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OAuth
- en: OpenID-Connect
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenID-Connect
- en: Facebook Connect
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Facebook Connect
- en: Microsoft Account
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Account
- en: 'After EsPReSSO is installed and when Burp Suite detects the use of an SSO protocol, it
    will be marked, and you can click on it to send it to the EsPReSSO tool to analyze
    what kind of protocol it is, as shown in the following screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 安装EsPReSSO后，当Burp Suite检测到SSO协议的使用时，它将被标记，并且您可以单击它将其发送到EsPReSSO工具以分析它是何种协议，如下面的截图所示：
- en: '![](img/f4e7c533-8cf6-480a-a260-4ef555e05bea.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f4e7c533-8cf6-480a-a260-4ef555e05bea.png)'
- en: Detecting OAuth issues using Burp Suite
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Burp Suite检测OAuth问题
- en: The issues related to OAuth are so different, and we will analyze some of them
    in the following sections.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 与OAuth相关的问题是如此不同，我们将在以下部分分析其中一些。
- en: Redirections
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重定向
- en: 'Open Burp Suite and, using the Proxy tool, detect the possible redirection
    in an application. For example, imagine you have an application that is possible
    to access using a social network. This application has the following URL:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Burp Suite，并使用代理工具，检测应用程序中可能的重定向。例如，想象一下，你有一个可以使用社交网络访问的应用程序。这个应用程序有以下URL：
- en: '[PRE4]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Intercept the request, and modify the URL in the header to the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截请求，并将标头中的URL修改为以下内容：
- en: '[PRE5]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The social network just verifies the string [site.tv](http://site.tv), and trusts
    the application. This is a vulnerability.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 社交网络只验证字符串[site.tv](http://site.tv)，并信任应用程序。这是一个漏洞。
- en: Insecure storage
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不安全的存储
- en: Burp Suite can detect if sensitive information is sent by an untrusted channel;
    if an OAuth token is sent by a clear text protocol or unencrypted channel, it
    could be intercepted and reused.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite可以检测是否通过不受信任的渠道发送了敏感信息；如果OAuth令牌通过明文协议或未加密的渠道发送，它可能会被拦截和重用。
- en: OAuth issues are very specific, but, taking into consideration the preceding
    mentioned issues, it is possible to detect the weaknesses.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth问题非常具体，但是考虑到前面提到的问题，可以检测到这些弱点。
- en: Detecting broken authentication
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测破损的身份验证
- en: 'A broken authentication is a group of issues that affect applications. Some
    of them are listed here:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 破损的身份验证是影响应用程序的一组问题。其中一些列在这里：
- en: Weak storage for credentials
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 凭证的弱存储
- en: Predictable login credentials
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可预测的登录凭证
- en: Session IDs exposed in the URL
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话ID暴露在URL中
- en: Session IDs susceptible to session fixations attacks
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话ID容易受到会话固定攻击的影响
- en: Wrong time out implementation
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误的超时实现
- en: The session is not destructed after the logout
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话在注销后没有被销毁
- en: Sensitive information sent by unprotected channels
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过不受保护的渠道发送的敏感信息
- en: We are going to explain how to detect these issues using Burp Suite.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将解释如何使用Burp Suite检测这些问题。
- en: Detecting weak storage for credentials
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测凭证的弱存储
- en: The information about authentication has a big problem; it is not just stored
    on the server side, it also needs to be stored on the client side, maybe not in
    the form of user and password, but in tokens, sessions IDs, or other things that
    the application uses to track the user and provide access.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 关于身份验证的信息存在一个大问题；它不仅存储在服务器端，还需要存储在客户端，也许不是以用户名和密码的形式，而是以令牌、会话ID或应用程序用于跟踪用户和提供访问的其他形式。
- en: 'Using Burp Suite, it is possible to analyze where this information is stored.
    For example, it is very common to store the information in cookies, as shown in
    the following screenshot:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Burp Suite，可以分析这些信息存储在哪里。例如，将信息存储在cookie中是非常常见的，如下面的截图所示：
- en: '![](img/503cde25-98b5-459b-8f07-2b5f1be6b455.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/503cde25-98b5-459b-8f07-2b5f1be6b455.png)'
- en: This is an example of basic authentication, which is a common authentication
    method for internal applications. This method has the big problem that it stores
    the credentials in base64 form into the header, so any person who has access to
    the header can get the password, and just decode it to plain text.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这是基本身份验证的一个例子，这是内部应用程序常用的身份验证方法。这种方法的一个大问题是，它将凭证以base64形式存储到标头中，因此任何有权访问标头的人都可以获取密码，并将其解码为明文。
- en: 'This is not the only issue; there are applications that store the credentials
    directly. For example, look at the following request:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是唯一的问题；还有一些应用程序直接存储凭证。例如，看下面的请求：
- en: '[PRE6]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here we can see the credentials directly that are sent to the application in
    each request made by the client side.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以直接看到每个客户端请求发送到应用程序的凭证。
- en: There are other secure places to save credentials. For example, in the case
    of mobile applications, it is common to use files in the internal or external
    device storage that are read by the application.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他安全的地方可以存储凭证。例如，在移动应用程序的情况下，通常使用内部或外部设备存储中的文件，这些文件由应用程序读取。
- en: The trick is to understand the flow in the application using the Proxy tool
    to determine how the application receives the credentials and what the tool is
    doing with them, which is the method used, where they are stored, if they are
    reused, and what kind of token or track ID is used for the user.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是要使用代理工具理解应用程序的流程，以确定应用程序如何接收凭证以及工具对其进行了什么操作，使用了什么方法，它们存储在哪里，是否被重用，以及应用程序用于跟踪用户的什么类型的令牌或跟踪ID。
- en: Detecting predictable login credentials
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测可预测的登录凭证
- en: Some applications use predictable logins, meaning that it is possible for a
    malicious user to guess the next or the previous username registered. For example,
    imagine that an online bank uses the account number as the username for its application;
    a malicious user can create a list of possible account numbers, that are mostly
    sequential to guess the username.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 一些应用程序使用可预测的登录，这意味着恶意用户可以猜测下一个或上一个已注册的用户名。例如，想象一下，一个在线银行使用账号作为其应用程序的用户名；恶意用户可以创建一个可能的账号列表，这些账号大多是连续的，以猜测用户名。
- en: 'A great tool to detect this kind of vulnerability is Intruder, which is in
    the Payloads section and has an option to create a sequential list, as shown in
    the following screenshot:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 检测这种漏洞的一个很好的工具是Intruder，它在Payloads部分，并有一个创建连续列表的选项，如下面的截图所示：
- en: '![](img/0e8b3dd1-20ae-4574-8984-90e581bf863c.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e8b3dd1-20ae-4574-8984-90e581bf863c.png)'
- en: Also, it is possible to create sequential dates, and there is even ...
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还可以创建连续的日期，甚至...
- en: Session IDs exposed in the URL
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 会话ID暴露在URL中
- en: 'This is not a very common issue, but in the past, there were a lot of applications
    adding session IDs in URLs. For example, look at the following screenshot:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个很常见的问题，但过去有很多应用程序在URL中添加会话ID。例如，看下面的截图：
- en: '![](img/afa87037-4e4c-405f-9840-1370a6355476.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/afa87037-4e4c-405f-9840-1370a6355476.png)'
- en: Once you have detected the variable used to store the session ID, you can apply
    a filter to detect all the sessions in the URLs.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦检测到用于存储会话ID的变量，就可以应用过滤器来检测URL中的所有会话。
- en: 'Look at the next screenshot. Here a token is detected by the scanner, and Burp
    Suite lists all the exposed tokens:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 看下一张截图。在这里，扫描器检测到了一个令牌，Burp Suite列出了所有暴露的令牌：
- en: '![](img/b17f74d6-b334-43ed-ab75-df83142cff0c.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b17f74d6-b334-43ed-ab75-df83142cff0c.png)'
- en: Session IDs susceptible to session fixation attacks
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 会话ID容易受到会话固定攻击的影响
- en: 'The main problem when an application uses just one ID to track the session
    is that this ID can be used to steal the session. For example, if you use the
    Burp Suite Proxy tool, you can intercept the request where the session ID is sent.
    This session ID is created just for one user. For example, see the following request:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序只使用一个ID来跟踪会话时的主要问题是，这个ID可以被用来窃取会话。例如，如果你使用Burp Suite代理工具，你可以拦截发送会话ID的请求。这个会话ID只为一个用户创建。例如，看下面的请求：
- en: '[PRE7]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, using another ...
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用另一个...
- en: Time out implementation
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超时实施
- en: To detect this issue, you don't require the use of a tool like Burp Suite; just
    open the application, log in, and wait to know what time is needed to close the
    session automatically. Applications like online banks need to close the session
    in a determinate time by compliance.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 要检测这个问题，你不需要使用Burp Suite这样的工具；只需打开应用程序，登录，并等待知道自动关闭会话需要多长时间。像在线银行这样的应用程序需要按照合规要求在一定时间内关闭会话。
- en: Closing the sessions after some time is a good idea; in a case where a user
    has stolen a session, it could reduce the impact on the application.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在一段时间后关闭会话是一个好主意；在用户窃取了会话的情况下，可以减少对应用程序的影响。
- en: Session is not destructed after logout
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在注销后会话没有被销毁
- en: 'To check if an application correctly closes the session, open the application
    using Burp Suite and then log in to the application with valid credentials:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查应用程序是否正确关闭了会话，使用Burp Suite打开应用程序，然后使用有效的凭据登录应用程序：
- en: 'As you can see from the following screenshot, the application created a session
    that is used as a guest user:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如你从以下截图中所见，应用程序创建了一个作为访客用户使用的会话：
- en: '![](img/2b5aa0f0-bfc8-4843-9f4d-844b82f3cdbb.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b5aa0f0-bfc8-4843-9f4d-844b82f3cdbb.png)'
- en: Now, access the application, and you will see that the application now creates
    a new session as a logged user.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，访问应用程序，你会发现应用程序现在创建了一个新的会话作为已登录用户。
- en: 'Close the session, as follows:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭会话，如下所示：
- en: '![](img/24ecc360-64b8-4de6-8a47-12e04fd2ca74.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/24ecc360-64b8-4de6-8a47-12e04fd2ca74.png)'
- en: If the application correctly destroyed the session, it is not possible to resend
    a request. Go to ...
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果应用程序正确销毁了会话，就不可能重新发送请求。前往...
- en: Summary
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we reviewed how to detect specific vulnerabilities. While in
    the previous chapter, the vulnerabilities explained were detected by detecting
    patterns, in this case, the vulnerabilities needed more understanding about the
    application's flow.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了如何检测特定的漏洞。在上一章中，通过检测模式来检测漏洞，而在这种情况下，漏洞需要更多关于应用程序流程的理解。
- en: The flaws explained in this chapter could be used to gain access to sensitive
    information, break authorization and authentication, and be part of a bigger compromise.
    In the next chapter, we will be exploiting different kinds of vulnerabilities
    using Burp tools and extensions.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中解释的缺陷可以用来获取敏感信息，突破授权和认证，并成为更大妥协的一部分。在下一章中，我们将利用Burp工具和扩展来利用不同类型的漏洞。
