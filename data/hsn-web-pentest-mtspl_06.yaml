- en: Using Metasploit for Reconnaissance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit进行侦察
- en: Information gathering or **reconnaissance** (**recon**) is the most crucial
    and time-consuming phase in the penetration testing cycle. When pentesting a web
    application, you are required to gather as much information as you can. The more
    information you have, the better. Information can be of any type – a web server
    banner, an IP address, a list of opened ports that are running a web application
    service, any supported HTTP headers, and so on. This kind of information will
    help a penetration tester to perform testing checks on a web application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 信息收集或**侦察**（**recon**）是渗透测试周期中最关键和耗时的阶段。在渗透测试Web应用程序时，您需要收集尽可能多的信息。信息越多越好。信息可以是任何类型
    - 网页服务器横幅、IP地址、运行Web应用程序服务的已打开端口列表、任何支持的HTTP标头等。这种信息将帮助渗透测试人员对Web应用程序进行测试检查。
- en: In this chapter, we will cover reconnaissance using Metasploit. We'll look at
    which modules you can use to perform the recon.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍使用Metasploit进行侦察。我们将看一下可以用来执行侦察的模块。
- en: 'We will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Introduction to reconnaissance
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 侦察介绍
- en: Active reconnaissance
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主动侦察
- en: Passive reconnaissance
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 被动侦察
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following are the prerequisites for this chapter:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章的先决条件：
- en: Metasploit **Community Edition** (**CE**) with the web interface installed
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装了Web界面的Metasploit **社区版** (**CE**)
- en: Either a *nix-based system or a Microsoft Windows system
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*nix系统或Microsoft Windows系统中的任何一个'
- en: Access to Shodan and Censys accounts for API keys
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问Shodan和Censys账户以获取API密钥
- en: Introduction to reconnaissance
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于侦察的介绍
- en: 'In a nutshell, a *recon* is a phase in which the pentester will gather as much
    information as possible related to the web application that they are testing.
    Recons can be categorized into two types:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，*recon*是渗透测试人员将收集与他们正在测试的Web应用程序相关的尽可能多的信息的阶段。侦察可以分为两种类型：
- en: '**Active reconnaissance**: Collecting information on the target and from the
    target'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主动侦察**：收集目标和来自目标的信息'
- en: '**Passive reconnaissance**: Collecting information on the target via third-party
    sources'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**被动侦察**：通过第三方来源收集目标的信息'
- en: Let's look at both of them in detail in the following sections.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在接下来的章节中详细看一下它们。
- en: Active reconnaissance
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主动侦察
- en: Active recon (or an *active attack*) is a type of reconnaissance during which
    the tester communicates with the target server/system either from their own system
    or via a pre-owned **Virtual Private Server** (**VPS**). In this chapter, we will
    look at some of the ways we can use the built-in scripts in Metasploit to perform
    both active and passive recon.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 主动侦察（或*主动攻击*）是一种侦察类型，测试人员在此期间与目标服务器/系统进行通信，可以是从他们自己的系统或通过预先拥有的**虚拟专用服务器**（**VPS**）进行通信。在本章中，我们将看一些我们可以使用Metasploit内置脚本来执行主动和被动侦察的方式。
- en: Banner grabbing
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 横幅抓取
- en: Banner grabbing is a technique used to gain information about a device on a
    network, such as the operating system, services running on the open ports, the
    application used, or the version number. It is part of the information-gathering
    phase. Metasploit has a lot of modules that can be used to collect banners from
    different types of services.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 横幅抓取是一种用于获取有关网络设备的信息的技术，例如操作系统、开放端口上运行的服务、使用的应用程序或版本号。它是信息收集阶段的一部分。Metasploit有许多模块可以用来从不同类型的服务中收集横幅。
- en: 'In the following example, we will use the `http_version` module, which detects
    the version number and names of services running on the HTTP protocol on a given
    IP:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，我们将使用`http_version`模块，它可以检测给定IP上运行的HTTP协议的服务的版本号和名称：
- en: 'Go to Modules from the Project tab bar and type `http_version` in the Search
    Modules box:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目选项卡栏中转到模块，并在搜索模块框中输入`http_version`：
- en: '![](img/b862b6f9-26a6-40dc-a8b9-917acc811cf9.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b862b6f9-26a6-40dc-a8b9-917acc811cf9.png)'
- en: Now, click on the module name. This will redirect us to the module options,
    where we can specify the target addresses and other settings, as shown in the
    following screenshot.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击模块名称。这将把我们重定向到模块选项，我们可以在那里指定目标地址和其他设置，如下面的屏幕截图所示。
- en: 'In our case, we will choose port `80`, as we know the HTTP protocol is running
    on port `80`. This value can be changed to any port number where HTTP is running:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们将选择端口`80`，因为我们知道HTTP协议正在端口`80`上运行。这个值可以更改为任何HTTP运行的端口号：
- en: '![](img/2717ee38-cd2c-44fd-bc2b-5a1b10d3e3ce.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2717ee38-cd2c-44fd-bc2b-5a1b10d3e3ce.png)'
- en: 'Once everything is set, we click on the Run Module button shown in the previous
    screenshot. A new task will be created. Click on Tasks from the Project Options
    tab to see the status of the task:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一切准备就绪后，点击前面屏幕截图中显示的运行模块按钮。将创建一个新任务。点击项目选项卡中的任务，以查看任务的状态：
- en: '![](img/01b968e7-a861-477d-8094-af3671c50cb3.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/01b968e7-a861-477d-8094-af3671c50cb3.png)'
- en: 'When the module completes execution, we can go back to the Analysis tab and
    click on the Host IP against which we ran the module:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当模块完成执行时，我们可以返回到分析选项卡，点击我们运行模块的主机IP：
- en: '![](img/525c4a3b-f38f-470c-8a15-da71e2138198.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/525c4a3b-f38f-470c-8a15-da71e2138198.png)'
- en: 'We will see that the module has detected and printed the banner running on
    port `80` under SERVICE INFORMATION, as shown in the following screenshot:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将看到模块已经检测到并打印出了在端口`80`下运行的横幅，如下面的屏幕截图所示：
- en: '![](img/9300915a-ab95-4160-9ecc-9405cdc9a303.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9300915a-ab95-4160-9ecc-9405cdc9a303.png)'
- en: Next, let's see how the HTTP headers of the web application can be detected.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何检测Web应用程序的HTTP标头。
- en: HTTP header detection
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP标头检测
- en: 'Let''s now try to detect the HTTP headers of the web application. The HTTP
    header can reveal a lot of information about the application, such as the technology
    being used, the content length, cookie expiry dates, XSS protection, and more:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试检测Web应用程序的HTTP标头。HTTP标头可以透露关于应用程序的许多信息，比如正在使用的技术、内容长度、cookie到期日期、XSS保护等：
- en: 'Navigate to the Modules section and search for `http_header`:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到模块部分，搜索“http_header”：
- en: '![](img/610f2a40-6bbc-496e-ad15-d39f0b27080a.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/610f2a40-6bbc-496e-ad15-d39f0b27080a.png)'
- en: 'Clicking on the module name will take us to the options page where we can specify
    the Target Addresses, port number, thread, and so on:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击模块名称将带我们到选项页面，我们可以在那里指定目标地址、端口号、线程等：
- en: '![](img/c2f2f72b-33d2-4eec-b016-46f52d734098.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c2f2f72b-33d2-4eec-b016-46f52d734098.png)'
- en: 'After we have configured the settings, we click on Run module and a new task
    will be launched:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在配置设置后，点击“运行模块”，将启动一个新任务：
- en: '![](img/656b4204-c179-4fe1-b74f-1b6c2a0dd760.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/656b4204-c179-4fe1-b74f-1b6c2a0dd760.png)'
- en: 'When the task completes, we can go to the Analysis tab and, in the Notes section,
    we will be able to see all the headers discovered by the scanner module:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任务完成后，我们可以转到分析选项卡，在“注释”部分，我们将能够看到扫描模块发现的所有标头：
- en: '![](img/24741b57-1301-4893-b102-24c1db1ee70c.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/24741b57-1301-4893-b102-24c1db1ee70c.png)'
- en: Next, let's look at web robot page enumeration.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看网页机器人页面枚举。
- en: Web robot page enumeration
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网页机器人页面枚举
- en: '`robots.txt` (or the *robots exclusion standard*) is a method used by websites
    to communicate with crawlers or bots. Let''s see how enumeration is done in the
    following steps:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: “robots.txt”（或*robots排除标准*）是网站用来与爬虫或机器人通信的方法。让我们看看以下步骤中是如何进行枚举的：
- en: 'To block a subfolder from `Googlebot`, we will use the following syntax:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要阻止“Googlebot”访问子文件夹，我们将使用以下语法：
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To tell all bots not to crawl the website, we can put the following data in
    the text file:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要告诉所有机器人不要爬取网站，我们可以将以下数据放入文本文件中：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In this section, we will use the `robots_txt` auxiliary to fetch the contents
    of a website''s `robots.txt` file:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将使用“robots_txt”辅助程序来获取网站的“robots.txt”文件的内容：
- en: 'Start by searching for the module with the `robots_txt` keyword:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先搜索带有“robots_txt”关键字的模块：
- en: '![](img/03b03718-1eb5-4bea-816a-46eb9ab8b151.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/03b03718-1eb5-4bea-816a-46eb9ab8b151.png)'
- en: 'Clicking on the module will redirect us to the options page, where we can set
    the Target Addresses, RPORT, PATH, VHOST, and so on. In our case, we have used
    the example of `www.packtpub.com` as the VHOST:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击模块将重定向我们到选项页面，在那里我们可以设置目标地址、RPORT、路径、VHOST等。在我们的案例中，我们使用了“www.packtpub.com”作为VHOST的示例：
- en: '![](img/a037bd79-c623-4acd-8030-e6f065744219.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a037bd79-c623-4acd-8030-e6f065744219.png)'
- en: 'Upon clicking the Run module, a new task will be created and we will be able
    to see the status of the script running in the Tasks window:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“运行模块”后，将创建一个新任务，我们将能够在任务窗口中看到脚本运行的状态：
- en: '![](img/60970054-15a3-4030-8616-270e0012dc92.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/60970054-15a3-4030-8616-270e0012dc92.png)'
- en: 'Once the task is complete, we can go back to the Analysis tab and click on
    the Notes section of our target host to see the list of all the directories listed
    in the `robots.txt` file of the website, as shown in the following screenshot:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任务完成后，我们可以返回到分析选项卡，点击目标主机的“注释”部分，查看网站的“robots.txt”文件中列出的所有目录的列表，如下图所示：
- en: '![](img/9c564236-f849-4d46-8f99-c102144e21bc.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9c564236-f849-4d46-8f99-c102144e21bc.png)'
- en: Next, let's find some misconfigured Git repos on a given website.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们在给定网站上查找一些配置错误的Git存储库。
- en: Finding hidden Git repos
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找隐藏的Git存储库
- en: Sometimes, while deploying code from Git on a production server, developers
    leave the `git` folder in a public directory. This is dangerous as it may allow
    an attacker to download the entire source code of the application.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，在将代码从Git部署到生产服务器时，开发人员会将“git”文件夹留在公共目录中。这很危险，因为它可能允许攻击者下载应用程序的整个源代码。
- en: 'Let''s look at the `git_scanner` module, which helps us to discover misconfigured
    repos on a website:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看“git_scanner”模块，它可以帮助我们发现网站上配置错误的存储库：
- en: 'Start by searching for the `git_scanner` keyword:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先搜索“git_scanner”关键字：
- en: '![](img/0f4fc3c2-a4af-4b9a-9812-4e32a847158a.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f4fc3c2-a4af-4b9a-9812-4e32a847158a.png)'
- en: 'Clicking on the module will redirect us to the module options page where we
    specify the target address and port, and then click Run module:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击模块将重定向我们到模块选项页面，在那里我们指定目标地址和端口，然后点击“运行模块”：
- en: '![](img/4dcdcfdb-14d1-41ac-807d-57767345b536.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4dcdcfdb-14d1-41ac-807d-57767345b536.png)'
- en: 'A new task is created, as shown in the following screenshot:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下图所示，创建了一个新任务：
- en: '![](img/cb1264a6-5747-4b5b-a5ba-42ba1f527fed.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cb1264a6-5747-4b5b-a5ba-42ba1f527fed.png)'
- en: 'Once the task is complete, we can go to the Analysis tab and click on our host.
    In the Notes section, we see that the auxiliary has found the `config` and `index` files
    of the repository:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任务完成后，我们可以转到分析选项卡，点击我们的主机。在“注释”部分，我们看到辅助程序找到了存储库的“config”和“index”文件：
- en: '![](img/ba9759bb-3cbc-48d3-a0ba-5d4f33b65de6.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba9759bb-3cbc-48d3-a0ba-5d4f33b65de6.png)'
- en: 'Next, we can go to the Captured Data tab to view the contents of the files
    found by the auxiliary:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们可以转到“捕获的数据”选项卡，查看辅助程序找到的文件的内容：
- en: '![](img/47345706-391b-4583-b2d7-4fb2f703083d.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/47345706-391b-4583-b2d7-4fb2f703083d.png)'
- en: 'Clicking on View shows the contents of the `config` file, which contains the
    `git` URL, the version, and some branch information. This information can also
    be used to download the entire source code of the application:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“查看”将显示“config”文件的内容，其中包含“git” URL、版本和一些分支信息。这些信息也可以用来下载应用程序的整个源代码：
- en: '![](img/ad66dcdf-57bc-4e2f-82bc-c3bdf8ba3a94.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ad66dcdf-57bc-4e2f-82bc-c3bdf8ba3a94.png)'
- en: Next, we will check for open proxy services.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将检查开放代理服务。
- en: Open proxy detection
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开放代理检测
- en: 'This is a very simple script. It allows us to check whether a proxy service
    we found on a port is an open proxy. If a proxy service is an open proxy, we can
    use the server as a proxy to perform different attacks and to avoid detection,
    especially during a red team activity. Implement the following steps to see how
    this is done:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的脚本。它允许我们检查我们在端口上找到的代理服务是否是开放代理。如果代理服务是开放代理，我们可以使用服务器作为代理执行不同的攻击，并且可以避免检测，特别是在红队活动期间。按照以下步骤来看看这是如何完成的：
- en: 'Start by searching for the `open_proxy` keyword in the Modules tab, as shown
    in the following screenshot:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先在模块选项卡中搜索“open_proxy”关键字，如下图所示：
- en: '![](img/73f96b03-91de-42a6-baad-348edebabfb7.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/73f96b03-91de-42a6-baad-348edebabfb7.png)'
- en: Clicking on the module name, we will be redirected to the options where we set
    the IP, the port, and the URL to check the proxy settings.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击模块名称，我们将被重定向到选项页面，在那里我们设置IP、端口和URL以检查代理设置。
- en: 'Clicking on Run Module will create a new task:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击运行模块将创建一个新任务：
- en: '![](img/158b1632-b34d-43b1-9072-22f82d4e5f0e.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/158b1632-b34d-43b1-9072-22f82d4e5f0e.png)'
- en: 'If the proxy is open, we will see a message in the task window, as shown in
    the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果代理是开放的，我们将在任务窗口中看到一条消息，如下截图所示：
- en: '![](img/2c8bee49-d060-4c79-8481-10a3e2de48d0.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c8bee49-d060-4c79-8481-10a3e2de48d0.png)'
- en: Now that we have a better understanding of performing active reconnaissance
    using Metasploit, let's move on to the next topic to learn about passive reconnaissance.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对使用Metasploit进行主动侦察有了更好的理解，让我们继续学习被动侦察的下一个主题。
- en: Passive reconnaissance
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 被动侦察
- en: Passive recon is a method of collecting information about a target without engaging
    with the systems actively. We will not directly touch the systems. Instead, we
    will use indirect methods to gather information about the target, for example,
    through Shodan and Censys.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 被动侦察是一种在不主动与系统接触的情况下收集有关目标的信息的方法。我们不会直接接触系统。相反，我们将使用间接方法收集有关目标的信息，例如通过Shodan和Censys。
- en: Metasploit has a lot of auxiliaries that help in passive recon. In this section,
    we will look at some of the ways in which we can perform passive recon using Metasploit
    auxiliaries.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit有许多辅助程序，可以帮助进行被动侦察。在本节中，我们将看一些使用Metasploit辅助程序进行被动侦察的方法。
- en: Archived domain URLs
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存档的域名URL
- en: Archived domain URLs are one of the best ways to perform passive recon, as they
    tell us about the history of the website and its URLs. Sometimes, websites are
    changed but some old files and folders are left on the server; these may contain
    vulnerabilities and allow us to gain access. Archived.org and the Google Cache
    are the two services we can use to hunt for archived domain URLs.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 存档的域名URL是执行被动侦察的最佳方式之一，因为它们告诉我们有关网站历史和其URL的信息。有时，网站会更改，但一些旧文件和文件夹会留在服务器上；这些可能包含漏洞，并允许我们获得访问权限。Archived.org和Google
    Cache是我们可以使用来搜索存档的域名URL的两个服务。
- en: 'Metasploit also has a built-in auxiliary for this purpose:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit还有一个专门用于此目的的内置辅助程序：
- en: 'We can use the `enum_wayback` keyword in the Search Modules screen to find
    the auxiliary we need:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在搜索模块屏幕中使用`enum_wayback`关键字来找到我们需要的辅助程序：
- en: '![](img/c584d2e7-5d3c-4d8b-8eaf-3f61b41946ef.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c584d2e7-5d3c-4d8b-8eaf-3f61b41946ef.png)'
- en: 'Clicking on the module, we will be redirected to the options page where we
    can enter the website domain name. Then, click Run Module:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击模块，我们将被重定向到选项页面，在那里我们可以输入网站域名。然后，点击运行模块：
- en: '![](img/7f9c1b7d-f71f-4b33-942d-4d3d9a63974f.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7f9c1b7d-f71f-4b33-942d-4d3d9a63974f.png)'
- en: 'A new task is created and the module runs successfully, printing the output
    it finds in the task window, as shown in the following screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新任务，并且模块成功运行，打印出它在任务窗口中找到的输出，如下截图所示：
- en: '![](img/cfa25a42-3518-48b0-9cca-286560d3ff95.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cfa25a42-3518-48b0-9cca-286560d3ff95.png)'
- en: Next, you will be introduced to Censys.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将了解Censys。
- en: Censys
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Censys
- en: Censys is a search engine for devices connected to the internet. Censys was
    created in 2015 at the University of Michigan by the security researchers who
    developed ZMap.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Censys是一个用于连接到互联网的设备的搜索引擎。Censys于2015年在密歇根大学由开发ZMap的安全研究人员创建。
- en: 'Censys continuously scans and logs devices on the internet:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Censys不断扫描和记录互联网上的设备：
- en: 'Metasploit also has a built-in auxiliary that allows us to do a Censys scan.
    We can use the `censys` keyword in the module search to locate the script:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Metasploit还有一个内置的辅助程序，可以进行Censys扫描。我们可以在模块搜索中使用`censys`关键字来定位脚本：
- en: '![](img/86ddf557-3840-4bd6-876a-49a90a06f9d8.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/86ddf557-3840-4bd6-876a-49a90a06f9d8.png)'
- en: 'Clicking on the module will take us to the options page, but before we do that,
    we need to log in to our account on `censys.io` and get API ID and Secret, which
    will be used in the module:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击模块将带我们到选项页面，但在这之前，我们需要登录到`censys.io`上的帐户，并获取API ID和Secret，这将在模块中使用：
- en: '![](img/07bc1203-fcc6-4d99-8f7f-979711d497b9.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/07bc1203-fcc6-4d99-8f7f-979711d497b9.png)'
- en: 'We enter API ID and Secret in the module options and specify the domain name
    as the target address. We''re using `packtpub.com` as an example:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在模块选项中输入API ID和Secret，并将域名指定为目标地址。我们以`packtpub.com`为例：
- en: '![](img/32340110-8fd1-4e75-9c96-d2b60b1d6b8a.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/32340110-8fd1-4e75-9c96-d2b60b1d6b8a.png)'
- en: 'Clicking on the Run Module will create a new task. The auxiliary will search
    for different hosts and their ports. The results will be printed as shown in the
    following screenshot:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击运行模块将创建一个新任务。辅助程序将搜索不同的主机和它们的端口。结果将如下截图所示打印出来：
- en: '![](img/995bed48-2007-485e-8c6b-463bde40e501.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/995bed48-2007-485e-8c6b-463bde40e501.png)'
- en: 'Metasploit also has modules to search the Shodan and Zoomeye databases, as
    shown in the following screenshot:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit还有模块可以搜索Shodan和Zoomeye数据库，如下截图所示：
- en: '![](img/1a97f448-55bd-44b0-a248-ed49a5a9e905.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a97f448-55bd-44b0-a248-ed49a5a9e905.png)'
- en: 'The following screenshot shows the output from the `shodan_search` module:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了`shodan_search`模块的输出：
- en: '![](img/b5ce2ee4-bafa-40e7-88d3-573ef1046be1.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b5ce2ee4-bafa-40e7-88d3-573ef1046be1.png)'
- en: 'To run the Zoomeye module, we can search for the `zoomeye` keyword and run
    the module just as we did for Shodan. This is shown in the following screenshot:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行Zoomeye模块，我们可以搜索`zoomeye`关键字，并像我们为Shodan做的那样运行模块。如下截图所示：
- en: '![](img/c5251d4a-c93b-4460-9c43-8be4caca129f.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5251d4a-c93b-4460-9c43-8be4caca129f.png)'
- en: Next, we will learn about SSL recon.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习SSL侦察。
- en: SSL recon
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SSL侦察
- en: '**Secure Socket Layer** (**SSL**) is used by organizations to ensure encrypted
    communication between the server and the clients. In this section, we will look
    at the Metasploit module, which uses SSL Labs'' API to gather intel about the
    SSL services running on a host:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全套接字层**（**SSL**）被组织用来确保服务器和客户端之间的加密通信。在本节中，我们将看看Metasploit模块，该模块使用SSL Labs的API来收集有关主机上运行的SSL服务的情报：'
- en: 'We can search for the `ssllabs` keyword in the module search to find the module,
    as shown in the following screenshot:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在模块搜索中搜索`ssllabs`关键字，以找到模块，如下面的屏幕截图所示：
- en: '![](img/be4b94e8-c54e-4d55-961e-a927c913b025.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/be4b94e8-c54e-4d55-961e-a927c913b025.png)'
- en: 'Clicking the module name will redirect us to the options page. Here, we set
    the target and click Run Module:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击模块名称将重定向到选项页面。在这里，我们设置目标并单击运行模块：
- en: '![](img/2959845c-bb3b-430b-b463-ee336d58aa83.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2959845c-bb3b-430b-b463-ee336d58aa83.png)'
- en: 'A new task will be created, which will show us the scan results and output,
    as shown in the following screenshot:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 将创建一个新任务，该任务将显示我们的扫描结果和输出，如下面的屏幕截图所示：
- en: '![](img/ca214953-1217-4aa3-83b2-48ca24228d7a.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca214953-1217-4aa3-83b2-48ca24228d7a.png)'
- en: SSL can disclose a lot of things, such as certificate authorities, organization
    names, hosts, and internal IPs. We can use the same module to learn about the
    SSL version running on the server, to check the ciphers allowed by the server,
    and also to check whether the target site has **HTTP Strict Transport Security**
    (**HSTS**) enabled.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: SSL可以透露很多东西，比如证书颁发机构、组织名称、主机和内部IP。我们可以使用相同的模块来了解服务器上运行的SSL版本，检查服务器允许的密码，以及检查目标站点是否启用了**HTTP严格传输安全**（**HSTS**）。
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about the recon process. We started with active
    recon using HTTP headers and discovering Git repos. Then, we moved on to passive
    scans, where we looked at Shodan and SSL analysis, and used archived web pages
    to obtain information relating to a target.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了侦察过程。我们从使用HTTP头和发现Git仓库的主动侦察开始。然后，我们转向被动扫描，查看Shodan和SSL分析，并使用存档的网页获取与目标相关的信息。
- en: In the next chapter, we'll learn how we can perform web-based enumeration using
    Metasploit. We'll be focusing on HTTP method enumeration, file and directory enumeration,
    subdomain enumeration, and more.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用Metasploit执行基于Web的枚举。我们将专注于HTTP方法枚举、文件和目录枚举、子域枚举等。
- en: Questions
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: The HTTP header detection module is not showing any output. Does this mean the
    module is not working properly?
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HTTP头检测模块没有显示任何输出。这是否意味着模块没有正常工作？
- en: The port scan in the Metasploit web interface is a little bit buggy. What can
    you do about this?
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Metasploit Web界面中的端口扫描有点有bug。你能对此做些什么？
- en: Can you load your custom modules in the Metasploit web interface as you use
    them in the Metasploit framework?
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您能在Metasploit Web界面中加载自定义模块，就像在Metasploit框架中使用它们一样吗？
- en: My organization has provided me with the Metasploit web interface installed
    on a VPS. How can I make sure the Web Interface's login page is protected?
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我的组织为我提供了安装在VPS上的Metasploit Web界面。我怎样才能确保Web界面的登录页面受到保护？
- en: Further reading
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To read more about this topic you can check out the below URLs:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于这个主题的信息，您可以查看以下网址：
- en: '[https://metasploit.help.rapid7.com/docs/replacing-the-ssl-certificate](https://metasploit.help.rapid7.com/docs/replacing-the-ssl-certificate)'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://metasploit.help.rapid7.com/docs/replacing-the-ssl-certificate](https://metasploit.help.rapid7.com/docs/replacing-the-ssl-certificate)'
- en: '[https://github.com/rapid7/metasploit-framework/wiki/Metasploit-Web-Service](https://github.com/rapid7/metasploit-framework/wiki/Metasploit-Web-Service)'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/rapid7/metasploit-framework/wiki/Metasploit-Web-Service](https://github.com/rapid7/metasploit-framework/wiki/Metasploit-Web-Service)'
- en: '[https://www.offensive-security.com/metasploit-unleashed/scanner-http-auxiliary-modules/](https://www.offensive-security.com/metasploit-unleashed/scanner-http-auxiliary-modules/)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.offensive-security.com/metasploit-unleashed/scanner-http-auxiliary-modules/](https://www.offensive-security.com/metasploit-unleashed/scanner-http-auxiliary-modules/)'
