- en: Chapter 9. Stress Testing Authentication and Session Management
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第9章。压力测试认证和会话管理
- en: If an attacker can find or act like a legitimate user and the application believes
    him, then no amount of downstream protection can prevent illicit operation. In
    [Chapter 8](000.html#), *Exploiting Trust Through Cryptography Testing*, we saw
    how attackers can intercept and with some effort--proxy or decrypt information
    on the fly. A lot of things need to happen to make those attacks work, and the
    attacker runs the risk of being noticed by network defenses or aware users. The
    authentication applications use is another story. Users are constantly pressuring
    web application and security teams to streamline and improve the login experience,
    and this pressure often runs in direct conflict to the security of the application.
    Because the application owners are hesitant to push users to use newer hardware
    and software, experience any interruptions or lengthy login processes, and give
    up freedom of access and the ability to multitask, they are often designing applications
    to work with a much less secure, more common client profile. Application login
    and session management processes have been slow to adopt measures that can protect
    against many of the flaws that have led to some of the largest breaches in recent
    history.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果攻击者能够找到或表现得像合法用户，并且应用程序相信他，那么任何下游保护都无法阻止非法操作。在[第8章](000.html#) *通过加密测试利用信任*中，我们看到攻击者如何拦截并经过一些努力——代理或即时解密信息。要使这些攻击生效，需要发生很多事情，而攻击者可能会被网络防御或警觉的用户注意到。应用程序使用的认证是另一回事。用户不断向Web应用程序和安全团队施压，以简化和改进登录体验，而这种压力往往直接冲突于应用程序的安全性。因为应用程序所有者不愿意推动用户使用更新的硬件和软件，经历任何中断或冗长的登录过程，并放弃访问自由和多任务处理能力，他们通常设计应用程序以适应更不安全、更常见的客户端配置文件。应用程序登录和会话管理流程一直很慢地采用措施，以防止导致最近历史上一些最大的入侵事件的许多缺陷。
- en: Session management was borne out of trying to make security flexible. Users
    don't like being connected via theÂ **Virtual Private Network** (**VPN**) tunnels,
    and so web applications have progressed from using unique session keys to authentication
    cookies and now authentication tokens, each allowing users to have continued access
    and servers to track stateful information. This was a huge help after initial
    authentication, as it allowed HTTP to explode its use without the hassle of users
    continually proving their identity. For hackers, session management approaches
    were now a mechanism they could defeat--possessing credentials was no longer necessary
    for hijacking sessions or impersonating users.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 会话管理的诞生是为了使安全性更加灵活。用户不喜欢通过**虚拟专用网络（VPN）**隧道连接，因此Web应用程序已经从使用唯一的会话密钥发展到认证cookie，现在是认证令牌，每个都允许用户持续访问和服务器跟踪有状态信息。这在初始认证后是一个巨大的帮助，因为它允许HTTP在不断证明其身份的麻烦下扩展其使用。对于黑客来说，会话管理方法现在是他们可以打败的机制——拥有凭据不再是劫持会话或冒充用户的必要条件。
- en: 'Authentication and session management vulnerabilities are often a second level
    of a coordinated breach effort as well. While other compromises will enable an
    initial â��beach-headâ�� in a target environment, brute-forcing of user stores
    in use in an environment are often a critical piece in allowing an attacker to
    maintain access through lateral movement and privilege escalation. Unlike an enterprise''s
    use of **Lightweight Directory Access Protocol (LDAP)**, Microsoft **Active Directory**
    (**AD**) or some other identity store, web portals are often heavily customized
    and rarely, if ever hardened appropriately when bought off the shelf. This is
    where we''ll be operating--exposing all of the cracks in a target environment''s
    authentication. In this chapter, we''ll see how the various forms of authentication
    perform and how best to test them. In the process, we will develop an understanding
    of the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 认证和会话管理漏洞通常是协调的入侵行动的第二层。虽然其他妥协会在目标环境中启用初始的“海滩头”，但在环境中使用用户存储的暴力破解通常是允许攻击者通过横向移动和特权升级来保持访问的关键部分。与企业使用**轻量级目录访问协议（LDAP）**、微软**活动目录（AD）**或其他身份存储不同，Web门户通常经过大量定制，购买时很少或从未得到适当的加固。这就是我们将要操作的地方——暴露目标环境认证的所有裂缝。在本章中，我们将看到各种形式的认证是如何执行的，以及如何最好地测试它们。在这个过程中，我们将了解以下主题：
- en: Learning how HTTP authentication is implemented in basic, form-based or digest-based
    approaches and what the strengths and weaknesses of each are
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习基本、基于表单或摘要的HTTP认证是如何实现的，以及每种方法的优缺点
- en: Using Burp Suite's Intruder module to circumvent these authentication walls
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Burp Suite的Intruder模块来规避这些认证墙
- en: Discussing the impact of **Two Factor Authentication** (**2FA**) and approaches
    to overcome it
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论**双因素认证**（**2FA**）的影响以及克服它的方法
- en: Learning about how function-level access control works, how it may be misconfigured,
    and how to take advantage through forgeries
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解功能级访问控制的工作原理，如何可能被错误配置，以及如何通过伪造来利用
- en: Discussing the possibilities for brute-force and dictionary attacks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论暴力破解和字典攻击的可能性
- en: Knock knock, who's there?
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 敲敲，谁在那里？
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Authentication is the art of determining who someone is, and to do so with
    certainty. Since the advent of the web, this process has become treacherous as
    the implications of mishandling this process can compromise the rest of the environment.
    This risk, despite the potential impact, is often lost on non-security personnel--the
    user''s convenience once again causing relaxation in security. OWASP lists it
    as the number 2 most pressing threat in web security, and characterizes the threat
    as having a severe impact, as seen in the following screenshot:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 认证是确定某人是谁的艺术，并且要有确定性地这样做。自从互联网出现以来，这个过程变得很危险，因为处理不当的后果可能会危及其他环境。尽管潜在影响很大，但这种风险通常被非安全人员忽视——用户的便利性再次导致了安全上的放松。OWASP将其列为网络安全中最紧迫的威胁之一，并将威胁描述为具有严重影响，如下截图所示：
- en: '![](img/B03918_09_01.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_09_01.png)'
- en: Â OWASP Summary for broken authentication and session management
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP对破损的认证和会话管理的总结
- en: Does authentication have to be hard?
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 认证必须很难吗？
- en: Most authentication approaches start with the premise that there are valid users,
    usually with different privilege levels associated with them that need access
    to something. Now, how do we confirm they are who they say they are? These so-called
    **credentials** are very much analogous to physical security measures. The right
    person will both look like who they say they are and hopefully have the appropriate
    key or answers to a challenge. It used to be that the username and password based
    authentication was perfectly acceptable, but we are now at the point where this
    flawed single-factor approach is no longer able to assure us that the client connecting
    is trustworthy.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数认证方法都以这样一个前提开始，即通常有不同特权级别的有效用户需要访问某些内容。现在，我们如何确认他们是他们所说的人？这些所谓的**凭据**在很大程度上类似于物理安全措施。正确的人既看起来像他们所说的人，而且希望有适当的钥匙或回答挑战的答案。过去，基于用户名和密码的认证是完全可以接受的，但现在我们已经到了这样一个程度，即这种有缺陷的单因素方法已经不能保证连接的客户是可信的。
- en: In recent years, websites and applications have incorporated a so-called 2FAÂ to
    improve fidelity. 2FA adds a second factor to the required authentication checks,
    drastically reducing the likelihood of stolen credentials succeeding in gaining
    illicit access. These factors are often described as someone you are (usernames
    or e-mails, for instance), something you know (passwords or passphrases), and
    something you have (commonly a soft token, RSA key, or the other **One-Time Password**
    (**OTP**)). In theÂ premise authentication uses, we're even seeing fingerprints,
    retina scans, and other biometrics in use. Add in security questions, **CAPTCHA**
    or other picture verification techniques, and even certificates, and we can see
    why this is enough to overwhelm users who have come to the target application
    for ease of use, not a polygraph test.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，网站和应用程序已经纳入了所谓的2FA，以提高忠诚度。 2FA在所需的认证检查中添加了第二因素，大大降低了窃取凭证成功获得非法访问的可能性。这些因素通常被描述为你是谁（例如用户名或电子邮件）、你知道的东西（密码或口令）和你拥有的东西（通常是软令牌、RSA密钥或其他**一次性密码**（**OTP**））。在前提认证使用中，我们甚至看到指纹、视网膜扫描和其他生物识别技术的使用。再加上安全问题、**CAPTCHA**或其他图片验证技术，甚至证书，我们可以理解为什么这足以使寻求便利的用户不知所措，而不是进行测谎测试。
- en: 'A general authentication approach is shown in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一般认证方法的截图：
- en: '![](img/B03918_09_02-1.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_09_02-1.png)'
- en: Â General authentication approach for websites
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 网站的一般认证方法
- en: Authentication 2.0 - grabbing a goldenÂ ticket
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 认证2.0 - 抢夺一个金奖券
- en: If you are familiar with the fine Roald Dahl bookÂ *Charlie and the Chocolate
    Factory*, you know that the **Golden Tickets** the children found in their candy
    bars opened some pretty exclusive doors to them, and even helped Charlie Bucket
    win the ultimate prize. While our targets may not be giving victims candy, they
    are issuing their own *tickets--*tokens that provide continued and privileged
    access. The trick for us is understanding how to take advantage of that.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您熟悉罗尔德·达尔（Roald Dahl）的著作《查理和巧克力工厂》，您会知道孩子们在糖果中找到的**金奖券**为他们打开了一些非常独特的大门，并帮助查理·巴克特赢得了最终的奖品。虽然我们的目标可能不会给受害者糖果，但他们正在发放自己的*券—*提供持续和特权访问的令牌。对我们来说，诀窍在于了解如何利用这一点。
- en: The solutions developed to fix the user population's work-intensive authentication
    headaches needed to evolve. Initial attempts to associate users with a session
    saw web developers embedding unique session ID codes in post-authentication packets
    to remember the user, track their activity, and provide maintained access. These
    stateful keys were, and sometimes still are, unprotected; and hackers will either
    steal and reuse those or use **session fixation** to fool a user into legitimizing
    an attacker-created session ID or token using a malicious redirect containing
    the session ID, and then authenticating on it. Efforts to secure these IDs have
    come a long way, and we're now seeing encrypted tokens in use that both obscure
    the token itself and even engage client-side scripts to help ensure the integrity
    of the relationship.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决用户群体繁重的认证问题，需要不断发展解决方案。最初的尝试是将用户与会话关联起来，网页开发人员将唯一的会话ID代码嵌入后认证数据包中，以便记住用户、跟踪他们的活动并提供持续访问。这些有状态的密钥是不受保护的，有时仍然是不受保护的；黑客要么窃取和重复使用这些密钥，要么使用**会话固定**来欺骗用户，使其认可攻击者创建的会话ID或令牌，使用包含会话ID的恶意重定向，然后进行认证。保护这些ID的努力已经取得了长足的进步，我们现在看到使用加密令牌，这些令牌既模糊了令牌本身，甚至还使用客户端脚本来帮助确保关系的完整性。
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Regardless of the available countermeasures, app developers are creatures of
    habit and will use cookies and tokens to carry all sorts of sensitive information.
    Sounds like a fun thing to tackle as a pen tester!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 无论可用的对策如何，应用程序开发人员都是习惯动物，他们会使用cookie和令牌来携带各种敏感信息。听起来像是渗透测试员要解决的有趣问题！
- en: 'There are three methods commonly used to pull and transport credentials: basic
    authentication, form-based authentication, and digest-based authentication. The
    table followingÂ helps us understand the strengths, weaknesses, applications,
    and special considerations of each:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通常使用三种方法来提取和传输凭据：基本身份验证、基于表单的身份验证和基于摘要的身份验证。下表帮助我们了解每种方法的优势、劣势、应用和特殊注意事项：
- en: '|  | **Strengths** | **Weaknesses** | **Typical Applications** |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '|  | **优势** | **劣势** | **典型应用** |'
- en: '| **Basic** | Typically SSL/TLS encrypted. | This is prone to client-side scripts
    and easy to capture if not properly encrypted |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| **基本** | 通常是SSL/TLS加密的。 | 如果没有适当加密，容易受到客户端脚本的攻击和捕获 |'
- en: Web APIs
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web API
- en: Mobile application persistence
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动应用程序持久性
- en: '|'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| **Form-Based** | Least intrusive on user | This is most likely to be unprotected,
    infer database contents, or expose unused fields |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| **基于表单的** | 对用户干扰最小 | 这最有可能是不受保护的，推断数据库内容，或者暴露未使用的字段 |'
- en: Traditional credential challenges on websites and portals.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网站和门户的传统凭据挑战。
- en: '|'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| **Digest-Based** | Basic + machine hashing | This is relatively safe â��
    as good as it gets in current state of the art |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| **基于摘要的** | 基本 + 机器哈希 | 这相对安全 - 在当前技术水平下是最好的 |'
- en: Web APIs
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web API
- en: Mobile application persistence
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动应用程序持久性
- en: '|'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Let's look at what the users see on their end, and then we can go about attacking!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看用户在他们端看到的内容，然后我们可以开始攻击！
- en: The basic authentication
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 基本身份验证
- en: Some websites will allow user credentials to be passed on to the authenticating
    web server via fields reserved for this purpose in the HTTP request itself. This
    is referred to as basic authentication and can be configured either with user
    input or more commonly through preconfigured profiles implemented in client-side
    scripts or browser plugins. While this seems like something a little too easy
    to attack, when done right, the mechanism is typically protected by TLS encryption,
    and entities are both leveraging certificates to provide even greater certainty.
    This is quite commonly used in **Application Programming Interfaces** (**APIs**)
    and corporate Intranet applications used by operators and support staff, and some
    mobile applications will use this technique to maintain secured access to their
    servers.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一些网站允许用户凭据通过HTTP请求本身中专门用于此目的的字段传递到认证的Web服务器。这被称为基本身份验证，可以通过用户输入或更常见的是通过在客户端脚本或浏览器插件中实现的预配置配置文件来配置。虽然这似乎是一种容易受到攻击的方式，但如果做得正确，该机制通常受到TLS加密的保护，并且实体都在利用证书来提供更大的确定性。这在**应用程序编程接口**（**API**）和操作员和支持人员使用的企业内部网络应用程序中非常常见，一些移动应用程序也会使用这种技术来保持对其服务器的安全访问。
- en: Form-based authentication
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 基于表单的身份验证
- en: Despite there being a basic authentication, most users will be familiar with
    a different form as the default user-facing approach. Form-based authentication
    is pretty self-explanatory as to what the user will see. The authentication challenge
    to the client is issued as a form, usually requiring a username or e-mail address
    and at a minimum, a password or passphrase. In most cases, there is no validation
    and authentication of the server--form-based authentication supposes that the
    server is a trusted device. This is a considerable weakness that attackers will
    tend to exploit.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在基本身份验证，大多数用户将熟悉不同形式的默认用户界面。基于表单的身份验证对用户将会是相当直观的。向客户端发出的身份验证挑战是一个表单，通常需要用户名或电子邮件地址，至少需要一个密码或口令。在大多数情况下，没有对服务器进行验证和身份验证--基于表单的身份验证假设服务器是一个受信任的设备。这是攻击者倾向于利用的一个重大弱点。
- en: The variables provided by the user, when submitted, are actually carried out-of-band
    as they relate to the HTTP requests themselves, carried as some encapsulated data
    rather than using the built-in HTTP authentication provisions. Black-hat hackers
    will also find these submissions worth targeting, as a single user's valid credentials
    can provide just enough room with which they are able to initiate a whole host
    of other attacks and avoid several layers of protection posing as the real authenticated
    user.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 用户提供的变量在提交时实际上是作为与HTTP请求本身相关的带外执行的，作为一些封装数据而不是使用内置的HTTP身份验证规定。黑客也会发现这些提交值值得攻击，因为单个用户的有效凭据可以提供足够的空间，使他们能够发起一系列其他攻击并避开几层保护，伪装成真正的经过身份验证的用户。
- en: Digest-based authentication
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 基于摘要的身份验证
- en: Digest-based authentication takes the basics of the Basic Authentication, but
    applies MD5 hashing and a nonce to hopefully provide greater security than Basic
    alone. A nonce is like a machine version of a OTP--a number that is applied and
    valid only once to make the hashes immune to replay attacks.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 基于摘要的身份验证采用基本身份验证的基本原理，但应用MD5哈希和一个一次性码，希望比单独的基本身份验证提供更高的安全性。一次性码就像是一次性密码的机器版本--一个只能应用一次并且只有一次有效的数字，使哈希免受重放攻击的影响。
- en: Trust but verify
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 信任但要验证
- en: 'Public awareness of the limitations in simple credential-based authentication
    is finally starting to catch-up, as many are now required to use additional factors
    in their authentication process. 2FA is now going mainstream and, while it saw
    its beginnings in corporate VPN use, it has now spread to a wide variety of applications
    and even consumer products and services. Google, Dropbox, Facebook, and their
    competition--all of them are now offering different forms of 2FA to help secure
    their users and reduce the company''s exposure to bad publicity. Some of the additional
    factors (beyond just a password) are listed here:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 公众对简单凭据身份验证的局限性的认识终于开始赶上，因为现在许多人现在需要在他们的身份验证过程中使用额外的因素。双因素认证现在已经成为主流，虽然它起初是在企业VPN使用中出现的，但现在已经传播到各种应用程序甚至是消费者产品和服务。谷歌、Dropbox、Facebook以及它们的竞争对手--现在都提供不同形式的双因素认证来帮助保护他们的用户并减少公司的负面曝光。以下是一些额外因素（不仅仅是密码）：
- en: '**Hardware tokens**: One of the first measures, hardware tokens provided by
    several companies were issued to employees or contractors explicitly, and displayed
    temporal codes that would provide a second factor. These have seen a decline with
    the rise of other more-easily deployed mechanisms.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬件令牌：作为最早的措施之一，由几家公司提供的硬件令牌专门发放给员工或承包商，并显示出提供第二因素的时间代码。随着其他更容易部署的机制的兴起，这些硬件令牌已经逐渐减少了。
- en: '**One-time passwords** (via trusted device): Seeing great use today in both
    consumer and enterprise applications (like Dropbox in the following screenshot),
    this technique is a software version of the hardware token. In addition to providing
    codes via a text, SMS, or e-mail, many applications are allowing synchronization
    of their OTP with applications like Google Authenticator, PingID, and so on.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一次性密码（通过受信任的设备）：今天在消费者和企业应用程序中得到广泛使用（如下图中的Dropbox），这种技术是硬件令牌的软件版本。除了通过短信、短信或电子邮件提供代码外，许多应用程序还允许将它们的一次性密码与Google
    Authenticator、PingID等应用程序同步。
- en: '![](img/B03918_09_03.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_09_03.png)'
- en: Dropbox 2FA in action
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Dropbox 2FA in action
- en: '**Smart cards**: These cards are often seen in more rigorous environments (government,
    defense, and so on) where it is essential to not only prevent access to the application,
    but also to the workstation or device on which it runs. Usually, a smart-chip
    enabled card, implementations exist that use USB dongles, magnetic tokens, and
    good old fashioned mechanical keys.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能卡：这些卡通常出现在更严格的环境中（政府、国防等），在这些环境中，不仅需要防止对应用程序的访问，还需要防止对运行该应用程序的工作站或设备的访问。通常情况下，使用智能芯片的卡，还有使用USB
    dongles、磁性令牌和老式的机械钥匙的实现。
- en: '**Biometrics**: A recent addition to 2FA, biometric scans and tests have been
    a key element of physical access control for a long time. Common tests involve
    finger or hand print scans, retinal scans, voice recognition, and now, even facial
    recognition has started to creep into the scene. Some mobile device manufacturers
    and now financial applications are making use of facial and voice recognition
    to unlock devices and provide additional factors to mobile applications.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生物识别：作为2FA的最新补充，生物识别扫描和测试长期以来一直是物理访问控制的关键元素。常见的测试包括指纹或手印扫描、视网膜扫描、语音识别，现在甚至连面部识别也开始悄悄地出现。一些移动设备制造商和现在的金融应用程序正在利用面部和语音识别来解锁设备，并为移动应用程序提供额外的因素。
- en: 'Considerably less secure than the precedingÂ methods, the following additional
    information is often used by legacy applications or custom authentication portals
    in attempts to thwart brute-force attempts or fuzzing. That being said, these
    methods are also picked on relentlessly by attackers, as they all are common fodder
    for social engineering attacks, easily distilled from tangential information leaks,
    lacking in time-sensitivity, and are sometimes available on the dark web as part
    of a compromised account listing. If these are in use, they should be in addition
    to a more hardened 2FA method from those preceding:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 与前述方法相比，以下额外信息的安全性要低得多，这些信息通常被传统应用程序或自定义认证门户使用，以阻止暴力破解尝试或模糊测试。话虽如此，这些方法也经常受到攻击者的攻击，因为它们都是社会工程攻击的常见素材，很容易从相关信息泄漏中提炼出来，缺乏时间敏感性，有时在暗网上作为被破坏的账户列表的一部分可获得。如果正在使用这些方法，它们应该是前述更加严格的2FA方法的补充：
- en: '**Security questions**: One or more questions from a common pick list are typical,
    and given that these have for many years been used in verification across attacks,
    they are almost as prevalent as the usernames themselves in leak dumps on the
    dark web. Users often answer these questions similarly across multiple services,
    and these questions are often part of an account recovery process. Should attackers
    guess answers here or buy them, there is a good chance of significant multisite
    breaches.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全问题：通常来自常见选项列表的一个或多个问题是典型的，考虑到多年来这些问题已经被用于攻击验证，它们在暗网的泄漏中几乎和用户名本身一样普遍。用户经常在多个服务中类似地回答这些问题，这些问题通常是账户恢复过程的一部分。如果攻击者猜到答案或购买答案，就有很大可能发生重大的多站点违规行为。
- en: '**Picture recall**: Some applications have combined more traditional credentials
    with memory pictures, asking users to select from random scenes or objects and
    expecting users to remember those for future logins. This protection also prevents
    automated brute-force attempts and fuzzing, as a spatial input is required. Human
    behavior being what it is, the users will pick pictures representing their interests.
    Social engineering can greatly improve chances of guessing here.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图片回忆：一些应用程序将更传统的凭据与记忆图片结合起来，要求用户从随机场景或对象中进行选择，并期望用户记住这些内容以供将来登录。这种保护还可以防止自动暴力破解尝试和模糊测试，因为需要进行空间输入。人类行为是什么样子，用户会选择代表他们兴趣的图片。社会工程可以极大地提高猜测的机会。
- en: '**Account information**: One of the earliest forms of *enhanced* authentication
    was for portals to request digits from account numbers, addresses, or phone numbers.
    I would hope this goes without saying, but if this is our customer''s idea of
    2FA, they are in sore need of some effective penetration testing and subsequent
    guidance on proper security.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 账户信息：最早的*增强*认证形式之一是要求门户网站从账户号码、地址或电话号码中请求数字。我希望这是不言而喻的，但如果这是我们客户对2FA的理解，他们急需进行一些有效的渗透测试，并随后指导正确的安全性。
- en: This is the session you are looking for
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这就是你要找的会话
- en: '* * *'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Now that we've seen all of the ways in which web app developers attempt to make
    our job tough, let's take a look at how we can test how well they have done. We'll
    see that there are several places we can attack the chain of trust, test for the
    resiliency of the session management mechanisms, and learn to overcome them.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了Web应用程序开发人员试图让我们的工作变得困难的所有方法，让我们看看我们如何测试他们的工作。我们将看到我们可以攻击信任链的几个地方，测试会话管理机制的弹性，并学会克服它们。
- en: Munching on some cookies?
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 吃点饼干？
- en: 'Most attackers and pen testers will find that theÂ sloppy management of session
    information is often the easiest path to compromising the application. Cookies
    are a pretty broad term for that session information, and intercepting and mangling
    that information can be a windfall. Burp Suite is well suited to help in doing
    this using its **Proxy Intercept** and **Repeater** capabilities. For this test,
    we''ll begin by logging into our **Mutillidae**Â (OWASP Broken Web App VM) application''s
    **`A2 - Broken Authentication and Session Management`** | **`Privilege Escalation`**
    | **`Login`** page through Firefox (as shown in the following screenshot):'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数攻击者和渗透测试人员会发现，会话信息的松散管理通常是入侵应用程序的最简单途径。 Cookies是会话信息的一个相当广泛的术语，拦截和篡改这些信息可能会带来意外收获。
    Burp Suite非常适合使用其**代理拦截**和**重复器**功能来帮助进行此操作。对于这个测试，我们将通过Firefox登录到我们的**Mutillidae**（OWASP
    Broken Web App VM）应用程序的**`A2 - Broken Authentication and Session Management`**
    | **`Privilege Escalation`** | **`Login`**页面（如下截图所示）：
- en: '![](img/B03918_09_04.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_09_04.png)'
- en: Selecting Mutillidae Session Management Lab
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 选择Mutillidae会话管理实验
- en: 'For this test, let''s go ahead and use some credentials we just happened to
    find earlier (through social engineering or various methods covered in [Chapter
    7](000.html#),*Â Injection and Overflow Testing*) and type in `user`Â for both
    the username and password. Once we''ve authenticated, we''ll turn on **Proxy Intercept**
    and refresh the page, allowing us to capture the HTTP messages (as shown in the
    following screenshot) and their included cookie data in all its glory:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个测试，让我们继续使用我们之前刚好找到的一些凭据（通过社会工程或[第7章](000.html#)中涵盖的各种方法，*注入和溢出测试*）并在用户名和密码中输入`user`。一旦我们经过身份验证，我们将打开**代理拦截**并刷新页面，允许我们捕获HTTP消息（如下截图所示）以及它们包含的cookie数据。
- en: '![](img/B03918_09_05.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_09_05.png)'
- en: Locating the cookies to fuzz
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找模糊的cookies
- en: 'We can see pretty clearly that the web developer was trying to do an awful
    lot with the cookie but somehow forgot to secure it.Â  We can see our session''s
    username, user ID (`uid`) and PHP session ID (`PHPSESSID`) all included, and it
    appears there is no timeout associated with the session (`max-age=0`). Let''s
    pass this request to our Burp Repeater and see what sorts of damage we can do.
    Right-click on the event and click on **`Send to Repeater`**Â to load the request
    in the **`Repeater`** tool; click on its now highlighted tab, and select the **`Params`**
    tab to bring up the options seen in the following screenshot:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以很清楚地看到，Web开发人员试图在cookie中做很多事情，但不知何故忘记了保护它。我们可以看到我们会话的用户名、用户ID（`uid`）和PHP会话ID（`PHPSESSID`）都包括在内，而且似乎会话没有关联的超时（`max-age=0`）。让我们将这个请求传递给我们的Burp
    Repeater，看看我们能造成什么样的破坏。右键单击事件，然后单击**`Send to Repeater`**将请求加载到**`Repeater`**工具中；单击它现在突出显示的选项卡，并选择**`Params`**选项卡，以显示以下截图中的选项：
- en: '![](img/B03918_09_06.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_09_06.png)'
- en: Using the Repeater tool for cookies
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Repeater工具进行cookie操作
- en: As you can hopefully see, the parameters in the cookie itself can be altered
    (outlined by the orange field). We can also add or remove altogether (using the
    appropriate buttons outlined in green) the portions of the cookie to determine
    their significance and impact to session integrity. As we step through our alterations,
    we can look to the right-hand side (using the **`Render`** tab in the **`Response`**
    section) to see what the end result of our manipulation is (in this case, the
    change in status to the login status and username, outlined in red). There is
    no need to fret if you take it too far and strip or alter too much--the back and
    forward buttons can help you go back and forth as needed to see the impact.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所希望的那样，cookie本身的参数可以被改变（由橙色字段标出）。我们还可以添加或删除（使用绿色标出的适当按钮）cookie的部分，以确定它们对会话完整性的重要性和影响。当我们逐步进行修改时，我们可以查看右侧（在**`Response`**部分的**`Render`**选项卡中）来查看我们操纵的最终结果（在这种情况下，登录状态和用户名的变化，用红色标出）。如果你走得太远，剥夺或改变太多，也不用担心-前进和后退按钮可以帮助你随时返回查看影响。
- en: In this case, the UIDÂ and PHPSESSID are both able to maintain the state of
    the session independently (as shown in the following screenshot), meaning that
    only when you remove both of these from a request at the same time will you lose
    the session and see a logout.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，UID和PHPSESSID都能够独立地维护会话的状态（如下截图所示），这意味着只有当你同时从请求中删除这两个时，你才会失去会话并看到注销。
- en: '![](img/B03918_09_07.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_09_07.png)'
- en: Maintaining state with bare essentials in cookie
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用cookie的基本要素维护状态
- en: 'This also implies that there is only one valid session per user, but that you
    can easily craft an authenticated session of your own if need be. Gee, I wonder
    what user we''d really like to be right now? Well, assuming that the default SQL,
    XML, or other user table format is in place and efforts to harden it weren''t
    taken, we can try for something a little more aspirational in the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这也意味着每个用户只有一个有效的会话，但如果需要的话，你可以很容易地创建自己的经过身份验证的会话。嗯，我想知道我们现在真的想成为哪个用户？嗯，假设默认的SQL、XML或其他用户表格式已经就位，而且没有采取加固措施，我们可以尝试在下面的截图中做一些更有抱负的事情：
- en: '![](img/B03918_09_08.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_09_08.png)'
- en: Fuzzing the UID to provide admin
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 模糊UID以提供管理员权限
- en: As you can see, this simple example helped you learn to gain root by manipulating
    the components of a cookie using some fun tricks in Burp Suite's **`Repeater`**
    tool. This, of course, required us capturing an authenticated session. But what
    if we don't already have one, or we want to trick a user into unlocking all of
    the 2FA traps we may run into along the way?
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这个简单的例子帮助你学会了通过使用Burp Suite的**`Repeater`**工具中的一些有趣的技巧来操纵cookie的组件从而获得root权限。当然，这需要我们捕获一个经过身份验证的会话。但是如果我们没有一个，或者我们想要欺骗用户解锁我们可能遇到的所有2FA陷阱呢？
- en: Don't eat fuzzy cookies
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不要吃模糊的cookies
- en: When a single cookie needs work, the more manual process of **`Repeater`** might
    make great sense. When we're looking to brute force a cookie however, it may make
    better use of our time to use Burp Suite's Sequencer, as it can help us analyze
    how well the application maintains session randomness.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个单独的Cookie需要处理时，更加手动的**`Repeater`**过程可能是很有意义的。然而，当我们想要暴力破解Cookie时，使用Burp Suite的顺序器可能更能节省我们的时间，因为它可以帮助我们分析应用程序如何维护会话随机性。
- en: 'To do this, we need to visit an application and capture a request with a session
    ID.Â  Pick on the stand-alone **Damn Vulnerable Web** (**DVWA**) app (standalone
    rather than the OWASP BWA bundled version, which doesn''t expose cookies appropriately).
    Let''s grab a suitable request, right-click on the event, and **`Send to Sequencer`**,
    similar to what we see in the following screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们需要访问一个应用程序并捕获带有会话ID的请求。选择独立的**Damn Vulnerable Web**（**DVWA**）应用程序（独立的而不是OWASP
    BWA捆绑版本，后者无法适当地暴露Cookie）。让我们选择一个合适的请求，右键单击事件，然后**`Send to Sequencer`**，就像我们在下面的截图中看到的那样：
- en: '![](img/B03918_09_09.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_09_09.png)'
- en: Finding the right request to Sequence
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 找到适合顺序的请求
- en: 'In the **`Sequencer`** tab, we can then set about highlighting the field we
    want to randomize with **`Sequencer`**, as seen in the following screenshot. For
    this test, we''re really interested in how well the application randomizes the
    PHPSESSID, and so we''ll select that accordingly, and then click on the button
    to **`Start Live Capture`**:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在**`Sequencer`**选项卡中，我们可以开始突出显示我们想要使用**`Sequencer`**进行随机化的字段，如下截图所示。对于这个测试，我们真正关心的是应用程序如何随机化PHPSESSID，因此我们将相应地选择它，然后点击**`Start
    Live Capture`**按钮：
- en: '![](img/B03918_09_10.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_09_10.png)'
- en: Configuring Sequencer
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 配置顺序器
- en: 'This will pop up a special window that allows you to see how many iterations
    were completed. After you''ve run it for at least 100 or more iterations, you
    can either stop the process or continue to iterate; in the mean-time, you can
    also run analysis of the randomness. If an application scores poorly in this,
    it tends to mean we have a reasonable shot of fuzzing a session key and hijacking
    the access of the poor user mapped to that session. We can see what it looked
    like when I let the test run to over 5700 sessions (which takes only a couple
    of minutes) in the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这将弹出一个特殊窗口，允许您查看完成了多少次迭代。在至少运行了100次或更多次迭代之后，您可以选择停止该过程或继续迭代；与此同时，您还可以对随机性进行分析。如果一个应用在这方面得分较低，通常意味着我们有合理的机会对会话密钥进行模糊处理，并劫持与该会话关联的可怜用户的访问。我们可以看到当我让测试运行超过5700个会话时的情况（这只需要几分钟），如下截图所示：
- en: '![](img/B03918_09_11.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_09_11.png)'
- en: Sequencer Analysis of Session Randomness
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 会话随机性的顺序器分析
- en: If we wanted to save cookies for potential session fixation candidates as discussed
    in the next session, we could drop them into a file and save them for future use.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要保存Cookie以备后续会话固定候选人使用，我们可以将它们放入文件并保存以备将来使用。
- en: Session Randomization is a great indicator of how well the application was built
    and how security conscious the customer's developers were. Remember how we discussed
    web developers using cookies for so much more than storing a session ID? A sequencer
    has a lot of other applications in web app pen testing, as tokens are used for
    much more than just tracking session state. The Burp Suite's documentation is
    fantastic at helping understand the other capabilities of the tool (available
    in the **`Help`** menu) and the Packt book *Burp Suite Essentials* ([https://www.packtpub.com/hardware-and-creative/burp-suite-essentials](https://www.packtpub.com/hardware-and-creative/burp-suite-essentials))
    may be a good resource to have on hand.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 会话随机化是衡量应用程序构建得有多好以及客户开发人员有多注重安全性的重要指标。还记得我们讨论过的Web开发人员如何使用Cookie来存储会话ID以外的内容吗？顺序器在Web应用程序渗透测试中有很多其他应用，因为令牌用于远不止跟踪会话状态。Burp
    Suite的文档在帮助理解工具的其他功能方面做得非常好（在**`Help`**菜单中可用），而Packt书籍*Burp Suite Essentials*（[https://www.packtpub.com/hardware-and-creative/burp-suite-essentials](https://www.packtpub.com/hardware-and-creative/burp-suite-essentials)）可能是一个很好的资源。
- en: Jedi session tricks
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绝地会话技巧
- en: A common attack black hats use against custom authentication front-ends is session
    fixation. Hackers bank on the fact that developers are not taking into consideration
    how to adequately protect and sequence their Session IDs. Through social engineering
    (a simple e-mail or instant message will do) the hacker is able to deliver a URL
    string with a prepositioned invalid session ID. If this were our testing, we'd
    certainly want some other traffic to use as a template or knowledge of the application
    from scans or covert collection, such that we're able to offer a session ID format
    and length that the application would expect. Improperly configured authentication
    portals will allow our victims to bring their own session ID (ha! BYOSID?) and,
    by authenticating their own credentials and even 2FA, they legitimize the session
    ID. We testers, lying in wait, can then use this newly legitimate session ID to
    run amok and pose as the victim.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客对自定义身份验证前端的常见攻击是会话固定。黑客依赖于开发人员没有考虑如何充分保护和排序他们的会话ID。通过社会工程学（简单的电子邮件或即时消息就可以），黑客能够传递一个带有预置无效会话ID的URL字符串。如果这是我们的测试，我们肯定希望有其他流量用作模板或从扫描或秘密收集中了解应用程序，以便我们能够提供应用程序期望的会话ID格式和长度。配置不当的身份验证门户将允许我们的受害者携带自己的会话ID（哈！BYOSID？），并通过验证自己的凭据甚至2FA，使会话ID合法化。我们等待的测试人员随后可以使用这个新的合法会话ID肆意妄为，并冒充受害者。
- en: 'A secure application would prevent this from causing damage by ensuring that
    Session IDs or cookies in use change with authentication, but, it turns out, this
    is not as standard as we would all like. This is also very common in online shopping
    websites, which is quite dangerous given that legitimate users may have payment
    information just a quick social attack away. A common method of conducting a session
    fixation attack is shown in the following screenshot:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 一个安全的应用程序应该通过确保会话ID或cookie在认证时发生变化来防止造成损害，但事实证明，这并不像我们所希望的那样标准。这在在线购物网站中也很常见，这是非常危险的，因为合法用户可能只需进行一次快速的社交攻击就可以获取支付信息。进行会话固定攻击的常见方法如下截图所示：
- en: '![](img/B03918_09_12-1.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_09_12-1.png)'
- en: General approach to Session Fixation
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 会话固定的一般方法
- en: 'Certainly, the easiest sites to use this sort of attack might be those that
    use the Session ID or cookie as part of the URL string. More often than not, however,
    we''ll need to set the cookie through some clever client-side scripts or meta
    tag inclusion. The **WebGoat** application included on the OWASP BWA VM is a great
    way to practice the entire process, from generating the bogus link to fooling
    users into authenticating and thus legitimizing it, with the end result similar
    to the following screenshot, where Joe Hacker, through phishing Victim Jane, is
    able to get her to authenticate using his session ID and then follow behind her
    to gain complete account access:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，最容易使用这种攻击的网站可能是那些将会话ID或cookie作为URL字符串的一部分的网站。然而，我们通常需要通过一些巧妙的客户端脚本或元标签包含来设置cookie。在OWASP
    BWA VM上包含的**WebGoat**应用程序是一个练习整个过程的好方法，从生成虚假链接欺骗用户进行认证，从而使其合法化，最终结果类似于以下截图，Joe
    Hacker通过欺骗受害者Jane，能够使用他的会话ID使她进行认证，然后跟在她后面获得完全的账户访问权限：
- en: '![](img/B03918_09_13.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_09_13.png)'
- en: Using WebGoat to practice Session Fixation
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用WebGoat练习会话固定
- en: The scariest part of this might actually be that once in the account, Joe Hacker
    can actually force an account password change, reroute banking transactions, and
    lock the user out! Many insurance, human resources, and financial sites are only
    rarely used by general employees, so hackers can often have a month or more to
    make their move before account notices tip off the victims that they have been
    had.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 最可怕的部分实际上可能是一旦进入账户，Joe Hacker实际上可以强制更改账户密码，重定银行交易，并锁定用户！许多保险、人力资源和金融网站很少被普通员工使用，因此黑客通常可以在账户通知提示受害者被骗之前有一个月甚至更长的时间来采取行动。
- en: Functional access level control
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 功能访问级别控制
- en: '* * *'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Up to this point, most of the techniques and concerns we've talked about have
    dealt with the bad guys (or us) gaining access to *information* they should not
    have had. In the OWASP 2013 Top 10 ([https://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References](https://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References)),
    this was known as **Insecure Direct Object Reference** (**IDOR**), and was number
    4 on the list. There is another concern however, that used to exist as number
    7 on the list, known as **Missing Functional Access Level Control** (**[https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control](https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control)**),
    with its 2013 OWASP summary capturedÂ in the following screenshot.Â This category
    means to address the inadvertent or inappropriate disclosure of *functions* rather
    than *information* to the attacker.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们讨论的大多数技术和问题都涉及到坏人（或我们）获取他们本不应该拥有的*信息*。在OWASP 2013年十大安全威胁中（[https://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References](https://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References)），这被称为**不安全的直接对象引用**（**IDOR**），排名第4。然而，还有另一个问题，曾经是排名第7的，被称为**缺失的功能访问级别控制**（**[https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control](https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control)**），其2013年OWASP总结如下截图所示。这个类别意味着不小心或不适当地向攻击者披露*功能*而不是*信息*。
- en: '![](img/B03918_09_14.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_09_14.png)'
- en: 'OWASP 2013 #7 Threat: Missing Functional Access Level Control'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP 2013年第7号威胁：缺失的功能访问级别控制
- en: In most cases, this sort of flaw is noted when simply attempting to visit hidden
    pages or attempt hidden commands within an authenticated session that should not
    have those privileges. Web developers may mistake obfuscation for security, and
    rather than wrestling with policy engines, they simply rely on hiding functions
    or commands from view rather than explicitly blocking their use. Scanning using
    Burp Suite or OWASP ZAP can quickly find candidate areas of the target site worthy
    of testing this, and the process of scanning may even provide some partial validation
    of the issue.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，当试图访问隐藏页面或在认证会话中尝试隐藏命令时，这种缺陷就会被注意到，这些命令本不应该具有这些特权。Web开发人员可能会误将混淆视为安全，而不是与策略引擎搏斗，他们只是依靠隐藏功能或命令而不是明确地阻止它们的使用。使用Burp
    Suite或OWASP ZAP进行扫描可以快速找到目标站点值得测试的候选区域，并且扫描过程甚至可能提供问题的部分验证。
- en: Refining a brute's vocabulary
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 精炼暴徒的词汇
- en: '* * *'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Many of the attacks we've seen above attempt to hijack the sessions, trick users
    into establishing sessions on their behalf, or otherwise exploit the application's
    inability to enforce rules around them. Eventually, we're going to find a case
    where we need to address the elephant in the room and just guess the password.
    There is a plethora of tools that can attempt this very fundamental task, but,
    in general, they approach it the same way--iterating via wordlists generated either
    through full brute-force engines (using **crunch**, for instance), refined wordlists
    and syllable engines (**John the Ripper**, **THC-Hydra**, and so on), and even
    by using prehashed solutions (using rainbow tables and similar ones).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们上面看到的许多攻击企图劫持会话，欺骗用户代表他们建立会话，或者利用应用程序无法强制执行规则的能力。最终，我们将找到一个需要解决的问题，那就是猜测密码。有大量的工具可以尝试这个非常基本的任务，但总的来说，它们的方法是一样的——通过使用通过全面暴力引擎生成的单词列表（例如使用**crunch**），精炼的单词列表和音节引擎（**John
    the Ripper**，**THC-Hydra**等），甚至通过使用预先计算的解决方案（使用彩虹表和类似的解决方案）进行迭代。
- en: 'For Web applications, Burp Suite is a great tool for brute-forcing attacks,
    you can refer to [Chapter 5](000.html#),***Â **Proxy Operations with OWASP ZAP
    and Burp Suite*, to see how that might be used, and merely apply the same fuzzing
    technique to the password field. We can also conduct brute-force attacks against
    web login pages using tools like THC-Hydra. When getting used to THC-Hydra''s
    capabilities and formatting, it is helpful to practice using the **xHydra** GUI
    frontend. To use xHydra (also called **hydra-gtk**), you can call the process
    using either the shortcut in the menus shown in the following screenshotÂ or typeÂ `xhydra`
    in the CLI:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Web应用程序，Burp Suite是一个用于暴力攻击的好工具，您可以参考[第5章](000.html#)，***Â **使用OWASP ZAP和Burp
    Suite进行代理操作*，看看它可能如何使用，并仅将相同的模糊技术应用于密码字段。我们还可以使用THC-Hydra等工具对Web登录页面进行暴力攻击。当熟悉THC-Hydra的功能和格式时，练习使用**xHydra**
    GUI前端是有帮助的。要使用xHydra（也称为**hydra-gtk**），您可以使用下面截图中显示的菜单中的快捷方式调用该进程，或者在CLI中键入`xhydra`：
- en: '![](img/B03918_09_15.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_09_15.png)'
- en: Finding Hydra's GUI front-end
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找Hydra的GUI前端
- en: 'Once we''ve opened up Hydra''s GUI, we can begin configuring the options we
    need to tackle our target. The **`Target`**Â tab (as shown in the following screenshot)
    allows us to point to the correct IP or hostname, identify the type of request
    submission we''re targeting (in this case, `http-post-form`), and even toggle
    logging, debug, and verbose modes:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们打开了Hydra的GUI，我们就可以开始配置我们需要解决目标的选项。**`Target`**标签（如下截图所示）允许我们指向正确的IP或主机名，识别我们正在针对的请求提交类型（在本例中为`http-post-form`），甚至切换日志记录、调试和详细模式：
- en: '![](img/B03918_09_16.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_09_16.png)'
- en: Hydra target information
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Hydra目标信息
- en: In the **`Passwords`** tab (as shown in the following screenshot), we can configure
    hydra to use single submissions or pull from lists for usernames and passwords.
    Many applications lacking password complexity rules will allow users to use usernames
    or blank spaces in some accounts, and so checkboxes are provided to allow us to
    check those. **Reversed login** allows you to attempt reversing the order of the
    username and attempting that as a password.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在**`Passwords`**标签中（如下截图所示），我们可以配置hydra使用单个提交或从用户名和密码列表中提取。许多应用程序缺乏密码复杂性规则，将允许用户在某些帐户中使用用户名或空格，因此提供了复选框，以允许我们检查这些内容。**反向登录**允许您尝试颠倒用户名的顺序并尝试将其作为密码。
- en: '![](img/B03918_09_17.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_09_17.png)'
- en: Setting username and password list
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 设置用户名和密码列表
- en: Our last tweaks will come in the **`Specific`**Â tab (as shown in the following
    screenshot). Here the all-important URL pattern that we are testing against is
    defined. The fields we're filling need to be gleaned from either **`View Source`**
    on your browser, a plugin to the browser, or using Burp Suite's Proxy Intercept.
    In any case, the variables being filled by the **`Passwords`** tab will be flagged
    as `^USER^` and `^PASS^`.Â  The last string is actually any identifying string
    that denotes a failed authentication. In DVWA, the string would be seeing `login.php`
    in the returned result, thus pushing us towards the same login portal. If we were
    applying this to Mutillidae, we may use `Not Logged In`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后的调整将出现在**`Specific`**标签中（如下截图所示）。在这里，我们正在测试的所有重要URL模式被定义。我们填写的字段需要从浏览器的**`View
    Source`**，浏览器的插件，或者使用Burp Suite的Proxy Intercept中获取。无论哪种情况，由**`Passwords`**标签填充的变量将被标记为`^USER^`和`^PASS^`。最后一个字符串实际上是任何表示失败身份验证的标识字符串。在DVWA中，该字符串将在返回的结果中看到`login.php`，从而将我们推向相同的登录门户。如果我们将其应用于Mutillidae，我们可以使用`Not
    Logged In`。
- en: The target's applicable URL the answer will vary from site to site, and that
    information is often gathered from scans, spidering, or old fashioned surfing.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 目标的适用URL答案会因网站而异，这些信息通常是通过扫描、蜘蛛爬行或传统的冲浪收集的。
- en: '![](img/B03918_09_18.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_09_18.png)'
- en: Designating the evaluated URL
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 指定评估的URL
- en: Our last step is to actually run the scan from the **`Start`**Â tab (as shown
    in the following screenshot). We can watch the scan iterate--thanks to our verbose
    flag, and any successful results will be stated at the bottom of the output. We
    can also see the CLI equivalent of our GUI configuration so that you can repeat
    these scans as part of scripts or move to tweaking in the CLI. A word of caution
    or clarification--I found that the CLI was finicky, in that it had issues depending
    on the formatting of the URL string I was using, or that the order flags added
    for options sometimes had very different results. Using the GUI tool eliminated
    a lot of the uncertainty and is a great way to avoid these same pitfalls.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后一步是实际从**`Start`**标签运行扫描（如下截图所示）。我们可以观察扫描的迭代——由于我们的详细标志，任何成功的结果都将在输出的底部说明。我们还可以看到我们的GUI配置的CLI等效，以便您可以重复这些扫描作为脚本的一部分或移动到CLI中进行调整。一个警告或澄清——我发现CLI很挑剔，它在使用的URL字符串的格式化方面存在问题，或者为选项添加的顺序标志有时会产生非常不同的结果。使用GUI工具可以消除很多不确定性，是避免这些相同陷阱的好方法。
- en: '![](img/B03918_09_19.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_09_19.png)'
- en: Viewing Hydra results and the command line version
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 查看Hydra的结果和命令行版本
- en: Hydra's use as a purpose built brute-force tool is a fantastic way to tackle
    web and non-web credential hacking. The old saying *garbage-in, garbage-out* applies
    here as well--our results will only be as good as the password and user lists
    feeding the tool, so I would recommend exploring ways to better organize your
    OSINT gathering. Get comfortable with the wordlists you have in the various tools
    included with Kali, and become familiar with tools like **Crunch** ([https://sourceforge.net/projects/crunch-wordlist/](https://sourceforge.net/projects/crunch-wordlist/))
    and **CeWL** ([https://digi.ninja/projects/cewl.php](https://digi.ninja/projects/cewl.php))
    to help generate the wordlists. It is also worth investigating hash-based attacks,
    which allow us to avoid the cryptographic hashing to the password and leverage
    more of the **Single Sign-On** (**SSO**), **Open Authentication** (**OAuth**),
    and hybrid authentication architectures commonly used in Microsoft ADÂ environments.
    These hash-based approaches (like **Pass-the-hash**:**Â [https://www.sans.org/reading-room/whitepapers/testing/pass-the-hash-attacks-tools-mitigation-33283](https://www.sans.org/reading-room/whitepapers/testing/pass-the-hash-attacks-tools-mitigation-33283)**)
    make more sense in full-suite penetration testing where system testing is in scope.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Hydra作为一个专门用于暴力破解的工具，是解决网络和非网络凭证黑客攻击的一种绝妙方式。老话说“垃圾进，垃圾出”在这里也适用——我们的结果只会和输入工具的密码和用户列表一样好，所以我建议探索更好地组织你的OSINT收集的方法。熟悉Kali中包含的各种工具中的字典，熟悉像Crunch（https://sourceforge.net/projects/crunch-wordlist/）和CeWL（https://digi.ninja/projects/cewl.php）这样的工具，以帮助生成字典。还值得调查基于哈希的攻击，这样我们就可以避免对密码进行加密哈希，并利用更多的单点登录（SSO）、开放认证（OAuth）和混合认证架构，这些架构通常在Microsoft
    AD环境中使用。这些基于哈希的方法（比如Pass-the-hash：https://www.sans.org/reading-room/whitepapers/testing/pass-the-hash-attacks-tools-mitigation-33283）在全套渗透测试中更有意义，系统测试在范围内。
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: '* * *'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Authentication is the basis for trust on the web. A compromise in this area
    may not be as flashy as in other aspects of the application, but the impact is
    critical. A break in authentication or session management renders all other security
    measures moot. Teaching customers understand this is important, but we need to
    advocate for greater adoption of temporal 2FA, reuse of standardized and well-understood
    frameworks versus home grown portals, and continual penetration testing throughout
    all phases of the software development lifecycle to ensure that the maturation
    of an application does not leave a credible, hardened authentication unfinished.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 认证是网络信任的基础。在这个领域的妥协可能不像应用程序的其他方面那样引人注目，但影响至关重要。认证或会话管理的破坏使所有其他安全措施都变得无效。教导客户理解这一点很重要，但我们需要倡导更广泛地采用临时2FA，重复使用标准化和广为人知的框架，而不是自制门户，以及在软件开发生命周期的所有阶段持续进行渗透测试，以确保应用程序的成熟不会留下一个可信的、加固的认证未完成。
- en: In this chapter, we saw how there are many ways in which web applications can
    identify and verify users and assign privileges. We now have the tools to test
    both the resiliency of session management within the application as well as charging
    head first into obtaining the credentials. Burp Suite, Hydra, OWASP ZAP, and,
    of course, your browser and some OSINT will be very useful in validating your
    target's hardening.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了Web应用程序可以识别和验证用户并分配权限的许多方式。我们现在有了测试应用程序中会话管理的韧性以及直接获取凭证的工具。Burp Suite、Hydra、OWASP
    ZAP，当然还有你的浏览器和一些OSINT，将对验证目标的加固非常有用。
- en: In [Chapter 10](000.html#), *Launching Client-Side Attacks*, we'll take client-side
    attacks to the next level and revisit DOM-based, cross-site scripting. You'll
    also learn how to leverage clients to mount attacks and escalate our privileges,
    hijack communications on your behalf, and even learn about the mystical cross-site
    request forgery. We're in the homestretch, folks, and I am stoked you are still
    with me! Let's charge forward and pick on some browsers.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第10章](000.html#)，*启动客户端攻击*，我们将把客户端攻击提升到一个新的水平，并重新审视基于DOM的跨站脚本。您还将学习如何利用客户端发起攻击并提升我们的权限，代表您劫持通信，甚至了解神秘的跨站请求伪造。我们已经接近终点了，朋友们，我很高兴你们还和我在一起！让我们继续前进，攻击一些浏览器。
