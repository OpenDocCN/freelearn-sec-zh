- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Abusing Active Directory Certificate Services
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 滥用 Active Directory 证书服务
- en: In the next two chapters, we will cover services that can be found in almost
    every environment but are not installed by default during Active Directory deployment.
    We will start with **Active Directory Certificate Service** (**AD CS**). This
    service is Microsoft’s implementation of a **Public Key Infrastructure** (**PKI**)
    integrated with Active Directory. It allows us to utilize public key cryptography
    throughout the Active Directory forest, providing certificates, digital signatures,
    code signing, and other capabilities. As usual, with great power comes great responsibility.
    AD CS has been often overlooked in terms of hardening and monitoring due to its
    complex nature. In June 2021, *SpecterOps* released a comprehensive research paper
    where they described known and new ways to attack AD CS[1].
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的两章中，我们将介绍几乎在每个环境中都可以找到但在 Active Directory 部署期间并未默认安装的服务。我们将从**Active Directory
    证书服务**（**AD CS**）开始。这项服务是 Microsoft 对与 Active Directory 集成的**公钥基础设施**（**PKI**）的实现。它允许我们在整个
    Active Directory 林中利用公钥密码学，提供证书、数字签名、代码签名和其他功能。然而，与伟大的能力伴随着伟大的责任。由于其复杂性，AD CS
    在硬化和监控方面经常被忽视。2021 年 6 月，*SpecterOps* 发布了一篇全面的研究论文，在其中描述了攻击 AD CS 的已知和新方法[1]。
- en: We will start our learning journey by explaining the necessary PKI theory. We
    will then cover possible ways to steal certificates and achieve persistence on
    user and computer domain accounts. Finally, we will explore domain privilege escalation
    and persistence techniques that allow an adversary to compromise the domain environment.
    As usual, all attacks will be followed by detailed detection and prevention recommendations.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从解释必要的 PKI 理论开始我们的学习旅程。然后，我们将覆盖可能的证书窃取方式，并实现在用户和计算机域账户上的持久性。最后，我们将探讨允许对手妥协域环境的域权限提升和持久性技术。如往常一样，所有攻击都将跟随详细的检测和预防建议。
- en: 'In this chapter, we will explore the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下主题：
- en: PKI theory
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PKI 理论
- en: Certificate theft
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 证书窃取
- en: Account persistence
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 账户持久性
- en: Domain privilege escalation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 域权限提升
- en: Domain persistence
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 域持久性
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, you will need to have access to the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您需要访问以下内容：
- en: VMware Workstation or Oracle VirtualBox with at least 16 GB of RAM, 8 CPU cores,
    and at least 55 GB of total space (more if you take snapshots)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VMware Workstation 或 Oracle VirtualBox 至少需要 16 GB RAM、8 CPU 核心和至少 55 GB 总空间（如果您使用快照，则需要更多空间）
- en: A Linux-based operating system is strongly recommended
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强烈推荐使用基于 Linux 的操作系统
- en: From the GOADv2 project, we will use DC03 and SRV03
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 GOADv2 项目中，我们将使用 DC03 和 SRV03
- en: PKI theory
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PKI 理论
- en: In this section, we will cover the necessary theory and terminology that will
    be used later on in the chapter. First of all, what is **public key cryptography**?
    It is an asymmetric cryptographic system that uses a pair of related keys. Secondly,
    how does it work? In plain words, the user generates two keys (private and public)
    and uses the private key for decryption/signing the message. The second key is
    available for everyone (which is why it is called public) to encrypt/check the
    signature of the message. These two keys are mathematically tied, but it is not
    possible to recover the private key from the public key. Keeping in mind the concept
    that has just been described, we can now discuss PKI in more detail.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将涵盖本章后续使用的必要理论和术语。首先，什么是**公钥密码学**？它是一种使用一对相关密钥的非对称加密系统。其次，它是如何工作的？简单来说，用户生成两个密钥（私钥和公钥），并使用私钥进行解密/签名消息。第二个密钥对所有人都可用（因此称为公共密钥），用于加密/验证消息的签名。这两个密钥在数学上是相关的，但不能从公钥恢复私钥。牢记刚才描述的概念，我们现在可以更详细地讨论
    PKI。
- en: The most important components of PKI are the **Certification Authority** (**CA**),
    **Registration Authority** (**RA**), central directory, certificate management
    system, and certificate policy. The CA is the heart of PKI. Using its own private
    key, it signs the public key bound to a given user. The CA can be root and intermediate.
    The RA is in charge of the identity verification of the entities. The central
    directory stores keys and the certificate management system controls access to
    certificates and their delivery. The certificate policy defines entities of PKI,
    roles, and duties.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: PKI的最重要组件包括**认证机构**（**CA**）、**注册机构**（**RA**）、中央目录、证书管理系统和证书政策。CA是PKI的核心。CA使用其自己的私钥签名与给定用户绑定的公钥。CA可以是根CA和中间CA。RA负责实体的身份验证。中央目录存储密钥，证书管理系统控制证书的访问和交付。证书政策定义PKI的实体、角色和职责。
- en: 'Let us now discuss available AD CS roles in Active Directory[2]. Microsoft
    creates six roles:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们讨论一下Active Directory[2]中的可用AD CS角色。微软创建了六种角色：
- en: '**CA** – issues certificates and manages their validity'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CA** – 签发证书并管理其有效性'
- en: '**CA Web Enrollment** – allows users to connect to the CA via the browser and
    request certificates and **certificate revocation** **lists** (**CRLs**)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CA Web Enrollment** – 允许用户通过浏览器连接到CA并请求证书以及**证书撤销****列表**（**CRLs**）'
- en: '**Online Responder** – evaluates the status information of the certificate
    and sends it back to the requestor'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Online Responder** – 评估证书的状态信息并将其发送回请求者'
- en: '**Network Device Enrollment Service** (**NDES**) – allows obtaining certificates
    for network devices'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Network Device Enrollment Service**（**NDES**）– 允许为网络设备获取证书'
- en: '**Certificate Enrollment Web Service** (**CES**) – allows enrollment using
    the HTTPS protocol'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Certificate Enrollment Web Service**（**CES**）– 允许通过HTTPS协议进行注册'
- en: '**Certificate Enrollment Policy Web Service** (**CEP**) – allows users and
    computers to obtain certificate enrollment policy information'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Certificate Enrollment Policy Web Service**（**CEP**）– 允许用户和计算机获取证书注册策略信息'
- en: Next, we will cover certificates, templates, and processes associated with them
    in more detail. A certificate is a digitally signed CA document, formatted in
    X.509\. Each certificate has its own purpose, such as client authentication, code
    signing, smart card logon, and so on. These purposes are described as **object
    identifiers** (**OIDs**) and are called extended key usages. The certificate template
    defines its purpose, what information will be required from the user to obtain
    the certificate, and applicable access controls. Treat the certificate template
    as a prototype that will be filled with the user’s information during the issuance
    process.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将更详细地讨论证书、模板及其相关流程。证书是一个由CA数字签名的文档，格式为X.509。每个证书都有其特定的用途，如客户端身份验证、代码签名、智能卡登录等。这些用途被描述为**对象标识符**（**OIDs**），并称为扩展密钥使用。证书模板定义其用途、获取证书所需的用户信息以及适用的访问控制。将证书模板视为一个原型，在签发过程中将填写用户信息。
- en: Now, let us discuss how users can request certificates. This process is called
    **enrollment**. First, clients find an Enterprise CA, then generate a private
    and public key pair, put the public key and other relevant information in a **certificate
    signing request** (**CSR**), sign the CSR with its own private key, and send it
    to the Enterprise CA. Second, the CA performs checks such as user permissions
    to request a particular certificate template and whether the user is allowed to
    enroll at all. If all checks have passed successfully, the CA will fill the template
    with the supplied user information, sign the certificate with its own private
    key, and send it back.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们讨论用户如何请求证书。这个过程称为**注册**。首先，客户端找到企业CA，然后生成一对私钥和公钥，将公钥和其他相关信息放入**证书签名请求**（**CSR**）中，用自己的私钥签名该CSR，并将其发送到企业CA。其次，CA会执行一些检查，如用户是否有权限请求特定证书模板，以及用户是否允许进行注册。如果所有检查都成功通过，CA将用提供的用户信息填写模板，用自己的私钥签名证书，并将其返回给用户。
- en: Two protocols that support certificate authentication in Active Directory are
    Kerberos and **Secure Channel** (**Schannel**). Kerberos utilizes **Public Key
    Cryptography for Initial Authentication** (**PKINIT**). Users will sign the authentication
    challenge using the private key of their certificate and send it to the domain
    controller. If the verification process is successful, a TGT will be issued. Another
    protocol is Schannel. The domain controller requests a certificate from the client
    during authentication and maps the credentials to a user account by using the
    Kerberos S4U2self extension. If it fails, the next attempt is to map the certificate
    to the user’s account based on the **Subject Alternative Name** (**SAN**) extension,
    subject, and issuer fields. Schannel works well with LDAPS.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Active Directory 中支持证书认证的两个协议是 Kerberos 和**安全通道**（**Schannel**）。Kerberos 利用**初始认证的公钥加密**（**PKINIT**）。用户将使用其证书的私钥签名认证挑战，并将其发送给域控制器。如果验证过程成功，将颁发一个
    TGT。另一个协议是 Schannel。在认证过程中，域控制器会请求客户端提供证书，并通过使用 Kerberos S4U2self 扩展将凭据映射到用户帐户。如果失败，下一步是基于**主题备用名称**（**SAN**）扩展、主题和颁发者字段将证书映射到用户帐户。Schannel
    与 LDAPS 配合良好。
- en: Pass-the-certificate is a pre-authentication stage in the authentication process
    where the certificate is used to obtain a TGT. In the case of PKINIT, we can request
    a TGT with an authentication certificate. If PKINIT is not supported, we can authenticate
    via LDAP/S with a tool called PassTheCert[3]. Great research from the tool’s author
    can be found at the link given later[4].
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 证书传递是认证过程中的预认证阶段，在此阶段，证书用于获取 TGT。在 PKINIT 的情况下，我们可以使用认证证书请求 TGT。如果 PKINIT 不受支持，我们可以通过
    LDAP/S 使用名为 PassTheCert[3] 的工具进行认证。该工具的作者提供了很好的研究，后面会给出链接[4]。
- en: 'Before we begin, we need to enable auditing for AD CS so we can detect our
    own malicious activity. One of the best detection guides was presented at the
    PHDays conference[5]. In this presentation, you will also find ready-to-use searches.
    To enable logging through the Group Policy, we need to tick both **Success** and
    **Failure** under the following path in **Default Domain Policy**: **Computer
    Configuration** | **Policies** | **Windows Settings** | **Security Settings**
    | **Advanced Audit Policy Configuration** | **Audit Policy** | **Object Access**
    | **Audit** **Certification Services**.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，我们需要为 AD CS 启用审计，以便能够检测到自己的恶意活动。PHDays 会议上提出了最佳的检测指南之一[5]。在这次演讲中，你还可以找到现成的搜索查询。为了通过组策略启用日志记录，我们需要在**默认域策略**中的以下路径下勾选**成功**和**失败**：**计算机配置**
    | **策略** | **Windows 设置** | **安全设置** | **高级审计策略配置** | **审计策略** | **对象访问** | **审计**
    **证书服务**。
- en: 'Next, in the CA properties, we will enable **Auditing** for all events, as
    shown in the following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在 CA 属性中，我们将为所有事件启用**审计**，如下所示的截图所示：
- en: '![Figure 8.1 – Enabling auditing for AD CS events](image/B18964_08_01.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1 – 为 AD CS 事件启用审计](image/B18964_08_01.jpg)'
- en: Figure 8.1 – Enabling auditing for AD CS events
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 – 为 AD CS 事件启用审计
- en: Now that we understand the key concepts of PKI, let us delve into the practical
    part. Of course, there is more theory to cover, but we will gradually introduce
    it when it is necessary for attack understanding. If you would like to have a
    deep dive first, feel free to go through the SpecterOps paper mentioned in the
    introduction. We will start our learning journey with certificate theft techniques.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 PKI 的关键概念，让我们深入探讨实际部分。当然，理论部分还有很多内容需要覆盖，但我们会在必要时逐步引入，以帮助理解攻击。如果你希望先进行深入学习，欢迎查阅介绍中提到的
    SpecterOps 论文。我们将从证书盗用技术开始我们的学习之旅。
- en: Certificate theft
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 证书盗用
- en: This section will focus on certificate theft at the endpoint. If AD CS is deployed
    in the environment, chances are high that certificates are being used for domain
    authentication. Windows uses a certificate in **.pfx** format, which contains
    the certificate itself and the corresponding private key. However, private keys
    can be stored separately – for example, on specialized hardware such as **Trusted
    Platform Modules** (**TPMs**), **Hardware Security Modules** (**HSMs**), or smart
    cards. Most companies do not introduce hardware elements, and keys are stored
    in the operating system. Windows protects keys with the help of the **Data Protection
    Application Programming Interface** (**DPAPI**). For the demonstration, let us
    issue the **khal.drogo** user certificate with a non-exportable private key. We
    can do it via the Certificates snap-in in **Microsoft Management Console** (**MMC**).
    Now, we are ready to start with the practice.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将重点讨论终端上的证书盗取。如果环境中部署了 AD CS，那么证书很可能用于域身份验证。Windows 使用的是**.pfx**格式的证书，该格式包含证书本身及其对应的私钥。然而，私钥也可以单独存储，例如存储在专用硬件上，如**受信平台模块**（**TPM**）、**硬件安全模块**（**HSM**）或智能卡。大多数公司并未引入硬件元素，私钥通常存储在操作系统中。Windows
    借助**数据保护应用程序编程接口**（**DPAPI**）来保护密钥。为了演示，我们将为**khal.drogo**用户颁发一个不可导出的私钥证书。我们可以通过**Microsoft
    管理控制台**（**MMC**）中的证书管理单元来完成这一操作。现在，我们准备开始实践。
- en: THEFT1 – Exporting certificates using the CryptoAPI
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: THEFT1 – 使用 CryptoAPI 导出证书
- en: 'There are two ways to export certificates. The first one is via the GUI in
    **certmgr.msc** or with the help of a PowerShell cmdlet or with the CertStealer
    tool[6]. These tools use the Windows CryptoAPI and allow export only if the private
    key is exportable. If this is not the case, we can use Mimikatz. The idea is to
    patch either **CryptoAPI** (**CAPI**) or **Cryptography API: Next Generation**
    (**CNG**), depending on the key provider, to allow the private key export. It
    is important to mention that the CAPI patch is happening in the current process.
    The CNG patch is required when Microsoft Software Key Storage Provider is being
    used and will patch the **Key isolation** (**KeyIso**) service in the **lsass.exe**
    process, meaning you need “debug” privileges on the machine. The following command
    will show that **khal.drogo** has a certificate with a non-exportable private
    key:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '导出证书有两种方式。第一种是通过**certmgr.msc**中的图形界面，或者借助 PowerShell cmdlet，或者使用 CertStealer
    工具[6]。这些工具使用 Windows CryptoAPI，并且只有在私钥可导出时才允许导出。如果私钥不可导出，我们可以使用 Mimikatz。其思路是对**CryptoAPI**（**CAPI**）或**Cryptography
    API: Next Generation**（**CNG**）进行补丁修复，具体取决于密钥提供者，以允许私钥导出。需要特别说明的是，CAPI 补丁修复是在当前进程中进行的。当使用
    Microsoft 软件密钥存储提供程序时，需要进行 CNG 补丁修复，并且该修复会补丁**密钥隔离**（**KeyIso**）服务，这个服务在**lsass.exe**进程中运行，这意味着你需要在机器上拥有“调试”权限。以下命令将显示**khal.drogo**拥有一个不可导出的私钥的证书：'
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The first export attempt failed with an error in the **Private export** field,
    but after that, the patch export was successful. The result of the command execution
    is shown here:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次导出尝试由于**私钥导出**字段的错误而失败，但随后补丁导出成功。以下是命令执行结果：
- en: '![Figure 8.2 – Successful certificate export for khal.drogo](image/B18964_08_02.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.2 – khal.drogo 的证书导出成功](image/B18964_08_02.jpg)'
- en: Figure 8.2 – Successful certificate export for khal.drogo
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2 – khal.drogo 的证书导出成功
- en: The only way to detect this attack is when a CNG patch is required and access
    to **lsass.exe** is being monitored.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 检测此攻击的唯一方法是当需要 CNG 补丁修复并且对**lsass.exe**的访问正在被监控时。
- en: THEFT2 – User certificate theft via DPAPI
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: THEFT2 – 通过 DPAPI 盗取用户证书
- en: 'DPAPI is a Windows component that allows applications to store sensitive data.
    This data is protected by a master key that is derived from the user’s password
    hash, SID, and Salt by applying the PBKDF2 function. Certificates are stored in
    the **HKEY_CURRENT_USER\SOFTWARE\Microsoft\SystemCertificates** registry key or
    the **%APPDATA%\Microsoft\systemcertificates\my\certificates** folder. Associated
    private keys are stored in **%APPDATA%\Microsoft\Crypto\RSA\User SID** for CAPI
    keys and **%APPDATA%\Microsoft\Crypto\keys** for CNG keys. Just a small remark:
    you will not be able to see keys in the folders, even when hidden files are enabled.
    To check the content of these folders, use the **dir** /**a:s** command line.
    To decrypt the certificate’s private key, we need the corresponding master key.
    There are certain ways to obtain the master key, but three of them require elevated
    privileges:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: DPAPI 是 Windows 组件，允许应用程序存储敏感数据。此数据由主密钥保护，主密钥通过应用 PBKDF2 函数从用户的密码哈希、SID 和盐值推导而来。证书存储在
    **HKEY_CURRENT_USER\SOFTWARE\Microsoft\SystemCertificates** 注册表键或 **%APPDATA%\Microsoft\systemcertificates\my\certificates**
    文件夹中。关联的私钥存储在 **%APPDATA%\Microsoft\Crypto\RSA\User SID**（对于 CAPI 密钥）和 **%APPDATA%\Microsoft\Crypto\keys**（对于
    CNG 密钥）中。小提醒：即使启用隐藏文件，也无法在文件夹中看到密钥。要查看这些文件夹的内容，请使用 **dir** /**a:s** 命令行。要解密证书的私钥，我们需要相应的主密钥。有几种方法可以获取主密钥，但其中三种方法需要提升的权限：
- en: Backup keys from the domain controller (**lsadump::backupkeys**)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从域控制器备份密钥 (**lsadump::backupkeys**)
- en: DPAPI cached master keys (**sekurlsa::dpapi**)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DPAPI 缓存的主密钥 (**sekurlsa::dpapi**)
- en: The **DPAPI_SYSTEM** key (**lsadump::secrets**)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DPAPI_SYSTEM** 密钥 (**lsadump::secrets**)'
- en: By supplying the user’s hash or password
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过提供用户的哈希值或密码
- en: 'The following Mimikatz commands will allow you to dump the certificate in the
    **.der** format, find out what the master key is via the **guidMasterKey** value,
    decrypt the master key, and finally, decrypt the certificate’s private key:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 Mimikatz 命令将允许您以 **.der** 格式转储证书，找出主密钥的 **guidMasterKey** 值，解密主密钥，最后解密证书的私钥：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With the help of **openssl** on a Linux machine, we can build a valid **.****pfx**
    file:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 机器上借助 **openssl**，我们可以构建有效的 **.****pfx** 文件：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The result of the preceding commands is shown in the following screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 前述命令的结果如下图所示：
- en: '![Figure 8.3 – Successfully building a .pfx certificate for khal.drogo](image/B18964_08_03.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.3 – 成功为 khal.drogo 构建 .pfx 证书](image/B18964_08_03.jpg)'
- en: Figure 8.3 – Successfully building a .pfx certificate for khal.drogo
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3 – 成功为 khal.drogo 构建 .pfx 证书
- en: 'One important caveat is that the**/rpc** key in the **dpapi::masterkey** command
    will initiate the connection to the domain controller’s **IPC**$ and create a
    **protected_storage** named **pipe**. We can see the traffic sample in the following
    screenshot:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要的注意事项是，**/rpc** 密钥在 **dpapi::masterkey** 命令中将启动与域控制器的 **IPC**$ 的连接，并创建一个名为
    **pipe** 的 **protected_storage**。我们可以在下图中看到流量示例：
- en: '![Figure 8.4 – Traffic between machine and domain controller](image/B18964_08_04.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.4 – 机器与域控制器之间的流量](image/B18964_08_04.jpg)'
- en: Figure 8.4 – Traffic between machine and domain controller
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4 – 机器与域控制器之间的流量
- en: Another way to detect certificate theft is via auditing the SACLs. By using
    Object Read SACLs, defenders can detect access to the DPAPI master keys and private
    keys. Windows event ID 4663 will be logged on to the server event log, including
    the process name.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种检测证书盗窃的方法是通过审计 SACL。通过使用对象读取 SACL，防御者可以检测对 DPAPI 主密钥和私钥的访问。Windows 事件 ID
    4663 将被记录到服务器事件日志中，包括进程名称。
- en: THEFT3 – Machine certificate theft via DPAPI
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: THEFT3 – 通过 DPAPI 盗取机器证书
- en: 'In order to steal machine certificates, an attacker requires elevated privileges.
    Machine master keys are located in the **C:\Windows\System32\Microsoft\Protect\S-1-5-18\User**
    and **C:\Windows\System32\Microsoft\Protect\S-1-5-18** folders. The machine certificates’
    private keys are located in **C:\ProgramData\Microsoft\Crypto\RSA\MachineKeys**
    for CAPI and **C:\ProgramData\Microsoft\Crypto\Keys** for CNG. To decrypt these
    private keys, the **DPAPI_SYSTEM** secret is required. To perform this attack,
    we will use **SharpDPAPI**[*7*]. We will run this tool with elevated privileges;
    it will automatically elevate to **SYSTEM**, dump the **DPAPI_SYSTEM** secret,
    and use it to find and decrypt master keys. As a last step, it will decrypt all
    the machine certificates’ private keys:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了窃取机器证书，攻击者需要获取提升的权限。机器主密钥位于 **C:\Windows\System32\Microsoft\Protect\S-1-5-18\User**
    和 **C:\Windows\System32\Microsoft\Protect\S-1-5-18** 文件夹中。机器证书的私钥位于 **C:\ProgramData\Microsoft\Crypto\RSA\MachineKeys**
    文件夹中（适用于 CAPI），以及 **C:\ProgramData\Microsoft\Crypto\Keys** 文件夹中（适用于 CNG）。要解密这些私钥，必须使用
    **DPAPI_SYSTEM** 密钥。为了执行这个攻击，我们将使用 **SharpDPAPI**[*7*] 工具。我们将以提升的权限运行此工具；它会自动提升到
    **SYSTEM** 权限，提取 **DPAPI_SYSTEM** 密钥，并使用它来查找和解密主密钥。最后，它将解密所有机器证书的私钥：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The elevation of privileges and obtaining of **DPAPI_SYSTEM** can be observed
    here:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 提升权限和获取 **DPAPI_SYSTEM** 密钥的过程可以在这里看到：
- en: '![Figure 8.5 – SharpDPAPI obtained DPAPI_SYSTEM](image/B18964_08_05.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.5 – 使用 SharpDPAPI 获取 DPAPI_SYSTEM](image/B18964_08_05.jpg)'
- en: Figure 8.5 – SharpDPAPI obtained DPAPI_SYSTEM
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5 – 使用 SharpDPAPI 获取 DPAPI_SYSTEM
- en: 'The result of the SharpDPAPI execution can be seen here:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: SharpDPAPI 执行的结果如下所示：
- en: '![Figure 8.6 – One of the machine certificates with decrypted private key](image/B18964_08_06.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.6 – 解密的机器证书私钥之一](image/B18964_08_06.jpg)'
- en: Figure 8.6 – One of the machine certificates with decrypted private key
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.6 – 解密的机器证书私钥之一
- en: This attack uses the **DPAPI_SYSTEM** secret, so no traffic will be sent from
    the machine. The only possible detection is to audit via SACL reading of DPAPI-encrypted
    keys.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此攻击使用 **DPAPI_SYSTEM** 密钥，因此不会从机器发送任何流量。唯一可能的检测方式是通过 SACL 阅读 DPAPI 加密的密钥进行审计。
- en: THEFT4 – Harvest for certificate files
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: THEFT4 – 获取证书文件
- en: 'Another effective attack is a simple search for certificates (**.crt**/**.cer**/**.pfx**),
    keys (**.key**), CSR (**.csr**), and Java KeyStores (**.jks**/**.keystore**/**.keys**).
    For password-protected certificates, a hash can be extracted with the help of
    the **pfx2john** tool and then cracked. To understand what the certificate’s purpose
    is, we can run the following command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有效的攻击方法是简单地搜索证书（**.crt**/**.cer**/**.pfx**）、密钥（**.key**）、CSR（**.csr**）和 Java
    密钥库（**.jks**/**.keystore**/**.keys**）。对于密码保护的证书，可以借助 **pfx2john** 工具提取哈希值，然后进行破解。为了理解证书的用途，我们可以运行以下命令：
- en: '[PRE4]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The result of the preceding command running against the extracted user’s certificate
    from the *THEFT2* attack is as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是执行上述命令对 *THEFT2* 攻击中提取的用户证书进行处理后的结果：
- en: '![Figure 8.7 – Harvested khal.drogo certificate’s EKU](image/B18964_08_07.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.7 – 获取的 khal.drogo 证书的 EKU](image/B18964_08_07.jpg)'
- en: Figure 8.7 – Harvested khal.drogo certificate’s EKU
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.7 – 获取的 khal.drogo 证书的 EKU
- en: 'One important note: if you have an **invalid password** error during dumping,
    you need to add the **-legacy** option on the last step, when you build the **.pfx**
    certificate on your Linux machine with **openssl**.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明：如果在转储时出现 **无效密码** 错误，您需要在最后一步（使用 **openssl** 在 Linux 机器上构建 **.pfx** 证书时）添加
    **-legacy** 选项。
- en: A suggested detection method is to introduce “honey certificates,” so defenders
    can detect and track malicious activities.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 建议的检测方法是引入“蜜罐证书”，以便防御方能够检测和跟踪恶意活动。
- en: THEFT5 – NTLM credential theft via PKINIT (nPAC-the-hash)
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: THEFT5 – 通过 PKINIT 窃取 NTLM 凭证（nPAC-the-hash）
- en: PKINIT is a pre-authentication verification mechanism. Briefly, the idea is
    that we can extract LM and NT hashes from the **PAC_CREDENTIAL_INFO** structure
    in TGS-REQ when PKINIT is used to obtain the TGT. This functionality allows us
    to switch back to NTLM authentication when the remote server does not support
    Kerberos but still relies on PKINIT for pre-authentication.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: PKINIT 是一种预认证验证机制。简而言之，当使用 PKINIT 获取 TGT 时，我们可以从 TGS-REQ 中的 **PAC_CREDENTIAL_INFO**
    结构中提取 LM 和 NT 哈希值。此功能使我们能够在远程服务器不支持 Kerberos 而仍依赖 PKINIT 进行预认证时，切换回 NTLM 认证。
- en: 'The attack steps are the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击步骤如下：
- en: Perform pre-authentication with PKINIT and obtain the TGT with a session key.
    PAC in the TGT will contain the **PAC_CREDENTIAL_INFO** structure with NT and
    LM hashes, but because it is encrypted with the **krbtgt** key, it cannot be decrypted.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 PKINIT 进行预身份验证并获得包含会话密钥的 TGT。TGT 中的 PAC 将包含 **PAC_CREDENTIAL_INFO** 结构，其中包含
    NT 和 LM 哈希，但由于它是用 **krbtgt** 密钥加密的，因此无法解密。
- en: Next, request a service ticket by combining S4U2self and U2U.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过结合 S4U2self 和 U2U 请求服务票证。
- en: The obtained service ticket will contain PAC with the **PAC_CREDENTIAL_INFO**
    structure, which is encrypted with a session key that can be decrypted.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取的服务票证将包含 PAC 和 **PAC_CREDENTIAL_INFO** 结构，该结构是用会话密钥加密的，可以解密。
- en: 'The important thing to mention is that we need access to the certificate and
    its password. This sounds a bit complicated, but all of it can be done with a
    single command in Rubeus:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 需要提到的重要一点是，我们需要访问证书及其密码。这听起来有点复杂，但所有这些都可以通过 Rubeus 中的单个命令完成：
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The result of the preceding command is in the following screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 前述命令的结果如下截图所示：
- en: '![Figure 8.8 – UnPAC-the-hash of the khal.drogo user](image/B18964_08_08.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.8 – khal.drogo 用户的 UnPAC 哈希](image/B18964_08_08.jpg)'
- en: Figure 8.8 – UnPAC-the-hash of the khal.drogo user
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.8 – khal.drogo 用户的 UnPAC 哈希
- en: Detection of this technique can be made based on flags set on the ticket during
    U2U and S4U2self requests. If the **Forwardable**, **Renewable**, **Renewable_ok**,
    **Enc_tkt_in_skey**, and **Canonicalize** options are set in TGS-REQ, there is
    a high probability of Certipy, Kekeo, or Rubeus usage[8]. Another way is to track
    Windows event ID **4768** for certificate information values.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 可以根据 U2U 和 S4U2self 请求期间票证上设置的标志来检测此技术。如果在 TGS-REQ 中设置了 **Forwardable**、**Renewable**、**Renewable_ok**、**Enc_tkt_in_skey**
    和 **Canonicalize** 选项，则很可能使用了 Certipy、Kekeo 或 Rubeus[8]。另一种方法是通过跟踪 Windows 事件
    ID **4768** 来查找证书信息值。
- en: In the next section, we will discuss account persistence techniques.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论帐户持久性技术。
- en: Account persistence
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 帐户持久性
- en: After an adversary gains an initial foothold, the next step is usually to establish
    persistence. In this section, we will only cover persistence techniques that rely
    on certificate usage.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在攻击者获得初步控制后，下一步通常是建立持久性。在本节中，我们将仅讨论依赖于证书使用的持久性技术。
- en: PERSIST1 – Active user credential theft via certificates
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PERSIST1 – 通过证书进行的活动用户凭证盗窃
- en: 'Users can request a certificate from the CA in the environment for any available
    template that they are allowed to enroll in. An attacker will probably focus on
    templates allowing client authentication. An important caveat is that the template
    should not require manager approval or “authorized signatures” issuance requirements.
    This requirement defines how many digital signatures must be applied to the certificate
    request for approval. There is a default template called **User**, but it may
    be disabled. To find any other available templates, we can use a tool called **Certify**[9].
    The following command will send LDAP queries and show available templates:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以请求 CA 环境中任何他们被允许注册的模板的证书。攻击者可能会集中在允许客户端身份验证的模板上。一个重要的注意事项是，模板不应要求经理批准或“授权签名”要求。这个要求定义了需要为证书请求应用多少个数字签名以获得批准。有一个默认模板叫做
    **User**，但它可能已被禁用。为了找到其他可用的模板，我们可以使用一个叫做 **Certify** 的工具[9]。以下命令将发送 LDAP 查询并显示可用的模板：
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The result of the command execution is here:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 执行命令的结果如下：
- en: '![Figure 8.9 – Certify found the client authentication certificate template](image/B18964_08_09.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.9 – Certify 找到了客户端身份验证证书模板](image/B18964_08_09.jpg)'
- en: Figure 8.9 – Certify found the client authentication certificate template
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.9 – Certify 找到了客户端身份验证证书模板
- en: 'In this example, an authorized signature is not required and domain users can
    enroll. Then, the attacker can request a certificate in the GUI, with the **certreq**
    utility or Certify:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，不需要授权签名，域用户可以注册证书。然后，攻击者可以在 GUI 中、使用 **certreq** 工具或 Certify 请求证书：
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The certificate was successfully issued:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 证书已成功发放：
- en: '![Figure 8.10 – User certificate was issued](image/B18964_08_10.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.10 – 用户证书已发放](image/B18964_08_10.jpg)'
- en: Figure 8.10 – User certificate was issued
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.10 – 用户证书已发放
- en: 'The next step is to copy the private key and certificate from the output in
    the file and save it with the **.pem** extension. Then, using **openssl**, convert
    it to **.pfx**, as shown in the following command:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是从输出文件中复制私钥和证书，并将其保存为 **.pem** 扩展名。然后，使用 **openssl** 将其转换为 **.pfx** 格式，如下所示命令：
- en: '[PRE8]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now we have a certificate that can be used to request a TGT until the certificate
    expiration. Also, a change in the user’s password does not influence the certificate.
    As was shown previously in *THEFT5*, an adversary can nPAC-the-hash of the user
    and obtain the account’s NT hash at any time. This is a stealthy and long-term
    credential access technique.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经获得了一个证书，可以在证书有效期内用来请求 TGT。而且，用户密码的更改不会影响证书。如前所述，在 *THEFT5* 中，攻击者可以随时通过
    nPAC-the-hash 获取用户的 NT 哈希值。这是一种隐蔽且长期有效的凭证访问技术。
- en: To detect this type of persistence, it is necessary to query the CA database
    with the help of **certutil.exe**. There is a lot of valuable information that
    is not shown in the Windows event log – in particular, the used OS version, user/process
    information, the subject in the certificate, and so on. These parameters can be
    helpful to detect malicious activity.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要检测这种类型的持久性，必须借助 **certutil.exe** 查询 CA 数据库。在 Windows 事件日志中未显示很多有价值的信息——尤其是操作系统版本、用户/进程信息、证书中的主题等。这些参数对于检测恶意活动非常有帮助。
- en: PERSIST2 – Machine persistence via certificates
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PERSIST2 – 通过证书实现机器持久性
- en: 'Issuing a machine certificate requires elevated privileges. Certify will elevate
    automatically to **SYSTEM** and obtain the machine certificate with the following
    command:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 发放机器证书需要提升的权限。Certify 会自动提升权限至**SYSTEM**，并使用以下命令获取机器证书：
- en: '[PRE9]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The result is shown in the following screenshot:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下图所示：
- en: '![Figure 8.11 – Machine certificate was issued](image/B18964_08_11.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.11 – 已发放机器证书](image/B18964_08_11.jpg)'
- en: Figure 8.11 – Machine certificate was issued
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.11 – 已发放机器证书
- en: Further steps are pretty straightforward. An attacker can obtain a service ticket
    to any service as any user through S4U2self on the machine. Persistence will work
    until the certificate expires or the system name changes. It is very stealthy
    as no changes on the host have happened.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 后续步骤相当直接。攻击者可以通过机器上的 S4U2self 获取任何服务的服务票证，并以任何用户身份访问该服务。持久性将在证书过期或系统名称更改之前持续有效。这种方式非常隐蔽，因为主机没有发生任何更改。
- en: Detection will be the same as it was for *PERSIST1*.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 检测方法与 *PERSIST1* 相同。
- en: PERSIST3 – Account persistence via certificate renewal
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PERSIST3 – 通过证书续期实现账户持久性
- en: An adversary can use a certificate during the validity period and renew it during
    the renewal period or earlier. This approach is difficult to detect as it uses
    built-in functionality and leaves almost no artifacts.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以在证书有效期内使用证书，并在续期期间或更早时续订证书。此方法难以检测，因为它使用的是内置功能，几乎不留下任何痕迹。
- en: Shadow credentials
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Shadow 凭证
- en: This technique is an account takeover; however, it can still be treated as account
    persistence. The original research was published by *Elad Shamir*[10]. If the
    user is a member of **Key Admins** or **Enterprise Key Admins** or has **GenericWrite**
    or **GenericAll** rights over other users or computer accounts, it is possible
    to add **Key Credentials** to the **msDS-KeyCredentialLink** attribute. This attribute
    stores raw public keys that will then be used to perform Kerberos authentication
    using PKINIT as that account. An attack can be performed via **Whisker**[11] or
    **Certify** as well. As a first step, the attacker will identify users to whom
    we have required rights.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术是一种账户接管；然而，它仍然可以视为账户持久性。原始研究由 *Elad Shamir* [10] 发布。如果用户是 **Key Admins**
    或 **Enterprise Key Admins** 的成员，或者对其他用户或计算机账户拥有 **GenericWrite** 或 **GenericAll**
    权限，则可以将 **Key Credentials** 添加到 **msDS-KeyCredentialLink** 属性中。该属性存储原始公钥，之后这些公钥将用于通过
    PKINIT 执行 Kerberos 身份验证，代表该账户进行身份验证。攻击可以通过 **Whisker** [11] 或 **Certify** 来执行。第一步，攻击者会识别我们已经拥有必要权限的用户。
- en: '![Figure 8.12 – The khal.drogo user has GenericAll over viserys.targaryen](image/B18964_08_12.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.12 – 用户 khal.drogo 对 viserys.targaryen 拥有 GenericAll 权限](image/B18964_08_12.jpg)'
- en: Figure 8.12 – The khal.drogo user has GenericAll over viserys.targaryen
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.12 – 用户 khal.drogo 对 viserys.targaryen 拥有 GenericAll 权限
- en: 'Now, the following command will add information to the **msDS-KeyCredentialLink**
    attribute:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，以下命令将向 **msDS-KeyCredentialLink** 属性中添加信息：
- en: '[PRE10]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Under the hood, Whisker will interact with the domain controller via LDAP and
    Kerberos. The attack steps are shown in the tool output together with the Rubeus
    command to execute the nPAC-the-hash attack.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在后台，Whisker 会通过 LDAP 和 Kerberos 与域控制器进行交互。攻击步骤会显示在工具输出中，并附有执行 nPAC-the-hash
    攻击的 Rubeus 命令。
- en: '![Figure 8.13 – Shadow credentials attack](image/B18964_08_13.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.13 – Shadow 凭证攻击](image/B18964_08_13.jpg)'
- en: Figure 8.13 – Shadow credentials attack
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.13 – Shadow 凭证攻击
- en: 'To verify that the attribute has been successfully updated, an attacker can
    run the **list** command. An attribute contains the user ID, attestation data,
    public key, last logon time, and device ID, but the output will show only the
    last two:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证属性是否已成功更新，攻击者可以运行**list**命令。一个属性包含用户 ID、认证数据、公共密钥、最后登录时间和设备 ID，但输出结果将只显示最后两个：
- en: '![Figure 8.14 – Attribute value check](image/B18964_08_14.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.14 – 属性值检查](image/B18964_08_14.jpg)'
- en: Figure 8.14 – Attribute value check
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.14 – 属性值检查
- en: Detection is possible by monitoring event ID **4768**, where the certificate
    information is shown. Another detection approach is to configure SACL for the
    user’s Active Directory object and monitor event ID **5136**. Yet another event
    ID, **4662**, can also be examined. Some important information is the GUID (**5b47d60f-6090-40b2-9f37-2a4de88f3063**)
    and **Write property** access[8]. A prevention recommendation is typical for ACL
    abuse scenarios – find misconfigured accounts and fix them. Also, it is recommended
    to explicitly deny **Everyone** from writing to this attribute.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过监控事件 ID **4768** 来进行检测，其中会显示证书信息。另一种检测方法是为用户的 Active Directory 对象配置 SACL，并监控事件
    ID **5136**。还可以检查另一个事件 ID **4662**。一些重要信息包括 GUID（**5b47d60f-6090-40b2-9f37-2a4de88f3063**）和**写属性**访问[8]。预防建议通常适用于
    ACL 滥用场景——查找配置错误的帐户并修复它们。此外，建议明确拒绝**Everyone**对该属性的写入权限。
- en: The next section will cover domain privilege escalation attacks.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 下一部分将介绍域权限提升攻击。
- en: Domain privilege escalation
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 域权限提升
- en: In this section, we will explore practical techniques to escalate privileges
    by exploiting various security issues, such as template and extension misconfigurations
    (ESC1, 2, 3, 9, and 10), improper access controls (ESC4, 5, and 7), CA misconfiguration
    (ESC6), and relay attacks (ESC8 and 11). I have chosen such a grouping of the
    attacks from[12]. But to begin with, we will start with a critical vulnerability
    discovered by *Oliver Lyak*, called **Certifried**, which evolves into ESC9 and
    ESC10 after the patch.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本部分中，我们将探讨通过利用各种安全问题（如模板和扩展配置错误（ESC1、2、3、9 和 10）、不当访问控制（ESC4、5 和 7）、CA 配置错误（ESC6）和中继攻击（ESC8
    和 11））来提升权限的实际技术。我选择了这样的攻击分组，参考了[12]。但首先，我们将从由*Oliver Lyak*发现的一个关键漏洞开始，称为**Certifried**，它在补丁后演变为
    ESC9 和 ESC10。
- en: Certifried (CVE-2022-26923)
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Certifried（CVE-2022-26923）
- en: This vulnerability has much in common with **samAccountName** spoofing (CVE-2021-42278).
    Original research by the author is published here[13].
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 该漏洞与**samAccountName**欺骗（CVE-2021-42278）有许多相似之处。作者的原创研究已在此发布[13]。
- en: 'In AD CS, by default, there are two authentication certificates: user and machine.
    Every user account has a **User Principal Name** (**UPN**) that must be unique.
    The UPN is embedded into the certificate and used by KDC during authentication.
    Computer accounts do not have a UPN, as **dNSHostName** is used instead. The creator
    of the computer account has the right to write this property, called **Validated
    write to DNS host name**. There is no requirement for uniqueness of the attribute,
    but after **dNSHostName** has been changed, SPNs will be changed as well. SPNs
    have a uniqueness requirement in the domain, but the computer account creator
    can change SPNs (**Validated write to service principal name**). The idea of the
    attack is to create a computer account, clear SPNs with FQDN in them, change **dNSHostName**
    to match the target, (e.g., domain controller), and request the certificate. It
    is important to mention that the **dNSHostName** property is only used when the
    certificate is requested, not for certificate mapping.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AD CS 中，默认情况下有两个认证证书：用户和机器。每个用户帐户都有一个**用户主体名称**（**UPN**），该名称必须是唯一的。UPN 嵌入到证书中，并在认证过程中由
    KDC 使用。计算机帐户没有 UPN，**dNSHostName** 作为替代使用。计算机帐户的创建者有权写入此属性，称为**验证写入 DNS 主机名**。该属性不要求唯一性，但在**dNSHostName**更改后，SPN
    也将更改。SPN 在域中有唯一性要求，但计算机帐户创建者可以更改 SPN（**验证写入服务主体名称**）。攻击的思路是创建一个计算机帐户，清除包含完全限定域名（FQDN）的
    SPN，将**dNSHostName**更改为与目标匹配（例如，域控制器），然后请求证书。需要特别说明的是，**dNSHostName**属性仅在请求证书时使用，而不用于证书映射。
- en: To perform attacks in this section, we will use a tool called Certipy[14]; however,
    there is a fork called **certipy-ad**, which can be installed on Kali. The syntax
    for both tools is identical. Both tools support all privilege escalation scenarios,
    Shadow Credentials attacks, and Golden Certificate forgery.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在本节中进行攻击，我们将使用名为 Certipy[14] 的工具；不过，也有一个名为**certipy-ad**的分支，可以安装在 Kali 上。两种工具的语法是相同的。两种工具都支持所有特权提升场景、影子凭据攻击和金色证书伪造。
- en: 'Firstly, we make the necessary preparations for our attack. We will create
    a computer account, clear SPNs, and change the **dNSHostName** property to match
    the domain controller. The following PowerShell commands and **StandIn** tool
    will do the job:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们为攻击做必要的准备。我们将创建一个计算机帐户，清除 SPN，并将 **dNSHostName** 属性更改为与域控制器匹配。以下 PowerShell
    命令和 **StandIn** 工具将完成这项工作：
- en: '[PRE11]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The result of the preceding command execution is shown in the following screenshot:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令执行的结果如下截图所示：
- en: '![Figure 8.15 – Preparation for Certifried exploitation](image/B18964_08_15.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.15 – Certifried 利用准备](image/B18964_08_15.jpg)'
- en: Figure 8.15 – Preparation for Certifried exploitation
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.15 – Certifried 利用准备
- en: 'Now, using **certipy-ad**, we request the certificate and authenticate as a
    domain controller computer account:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用 **certipy-ad**，我们请求证书并以域控制器计算机帐户身份进行身份验证：
- en: '[PRE12]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The result of the command execution is in the following screenshot:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 命令执行的结果如下截图所示：
- en: '![Figure 8.16 – Obtaining the hash and TGT for the domain controller](image/B18964_08_16.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.16 – 获取域控制器的哈希值和 TGT](image/B18964_08_16.jpg)'
- en: Figure 8.16 – Obtaining the hash and TGT for the domain controller
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.16 – 获取域控制器的哈希值和 TGT
- en: After certificate retrieval, it is recommended to change **dNSHostName** back
    to the original one[15]. Now, we have obtained the NT hash of the domain controller’s
    computer account, which can be used for authentication or Silver Ticket forgery.
    To prevent exploitation, install a patch provided by Microsoft.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在证书检索后，建议将**dNSHostName**更改回原始值[15]。现在，我们已经获得了域控制器计算机帐户的 NT 哈希值，可以用来进行身份验证或伪造
    Silver Ticket。为了防止被利用，请安装 Microsoft 提供的补丁。
- en: In the next section, you will learn how template and extension misconfigurations
    can lead to privilege escalation.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将学习模板和扩展配置错误如何导致特权提升。
- en: Template and extension misconfigurations
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板和扩展的配置错误
- en: The following subsections detail some common ways to misconfigure certificate
    templates and extensions.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 以下小节详细说明了一些常见的证书模板和扩展配置错误的方式。
- en: ESC1 – Misconfigured certificate templates
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ESC1 – 配置错误的证书模板
- en: 'A specific set of settings, including default ones, makes templates vulnerable.
    This privilege escalation scenario requires the following configuration settings:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一组特定的设置，包括默认设置，使模板容易受到攻击。此特权提升场景需要以下配置设置：
- en: Standard users have enrollment rights granted by the Enterprise CA
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准用户拥有由企业 CA 授予的注册权限
- en: Manager approval is disabled (**mspki-enrollment-flag** is **0x00000000**)
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用经理审批（**mspki-enrollment-flag** 为 **0x00000000**）
- en: Authorized signatures are not required (**msPKI-RA-Signature** is **0x00000000**)
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无需授权签名（**msPKI-RA-Signature** 为 **0x00000000**）
- en: The certificate template defines any of the client authentication EKUs
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 证书模板定义了任何客户端身份验证 EKUs
- en: The certificate template allows requesters to specify **subjectAltName** in
    CSR (**msPKI-Certificate-Name-Flag** is **0x00000001**)
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 证书模板允许请求者在 CSR 中指定**subjectAltName**（**msPKI-Certificate-Name-Flag** 为 **0x00000001**）
- en: 'The last point effectively allows the user to request a certificate as anyone,
    including the domain administrator. This behavior is defined by the **CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT**
    flag in the **mspki-certificate-name-flag** property of the certificate template’s
    AD object. To find such a misconfigured template, an adversary can use Certify/Certipy
    or pure LDAP queries. The LDAP query looks complex, but it is just a concatenation
    of the preceding configuration options:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一项有效地允许用户以任何身份请求证书，包括域管理员。此行为由证书模板 AD 对象中的 **mspki-certificate-name-flag**
    属性中的 **CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT** 标志定义。为了找到这种配置错误的模板，攻击者可以使用 Certify/Certipy
    或纯 LDAP 查询。LDAP 查询看起来很复杂，但其实它只是前述配置选项的拼接：
- en: '[PRE13]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The result of the query is as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 查询的结果如下：
- en: '![Figure 8.17 – LDAP query to find ESC1 vulnerable template](image/B18964_08_17.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.17 – LDAP 查询查找 ESC1 漏洞模板](image/B18964_08_17.jpg)'
- en: Figure 8.17 – LDAP query to find ESC1 vulnerable template
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.17 – LDAP 查询查找 ESC1 漏洞模板
- en: 'Now, we will verify the result of the LDAP query, issue a certificate for the
    built-in domain administrator, and authenticate using it:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将验证LDAP查询的结果，为内建域管理员签发证书并使用该证书进行身份验证：
- en: '[PRE14]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The result is in the following screenshot:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下截图所示：
- en: '![Figure 8.18 – Successful exploitation of ESC1](image/B18964_08_18.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.18 – ESC1的成功利用](image/B18964_08_18.jpg)'
- en: Figure 8.18 – Successful exploitation of ESC1
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.18 – ESC1的成功利用
- en: To prevent privilege escalation, template hardening is required. The best approach
    is to disable the **Supply in Request** setting together with the enforcement
    of CA certificate manager approval. Next, user enroll rights can be tightened
    and EKU in certificates can be reviewed as well. Lastly, on a domain controller,
    strict user mapping can be enforced in the **HKLM\SYSTEM\CurrentControlSet\Services\Kdc**
    registry key with the DWORD **UseSubjectAltName** value set to **0**.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 为防止特权提升，需要对模板进行加固。最佳做法是禁用**Supply in Request**设置，并强制执行CA证书经理的批准。接下来，可以收紧用户注册权限，并审查证书中的EKU。最后，在域控制器上，可以在**HKLM\SYSTEM\CurrentControlSet\Services\Kdc**注册表项中强制执行严格的用户映射，并将DWORD
    **UseSubjectAltName**值设置为**0**。
- en: There is no straightforward way to reliably detect ESC1 using a Windows event
    log, so it is better to consider prevention steps.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Windows事件日志无法直接可靠地检测ESC1，因此更好的做法是考虑采取预防措施。
- en: ESC2 – Misconfigured certificate templates
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ESC2 – 配置错误的证书模板
- en: 'This technique is similar to ESC1 with a small deviation. The **Any Purpose**
    EKU allows an attacker to request an authentication certificate not on behalf
    of another user, but as the user itself. Conditions for vulnerability to exist
    are as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术与ESC1类似，但有些微小的偏差。**Any Purpose** EKU允许攻击者以用户身份本身请求认证证书，而不是代表其他用户。漏洞存在的条件如下：
- en: Standard users have enrollment rights granted by the Enterprise CA
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准用户有企业CA授予的注册权限
- en: Manager approval is disabled (**mspki-enrollment-flag** is **0x00000000**)
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理员批准已禁用（**mspki-enrollment-flag** 为 **0x00000000**）
- en: Authorized signatures are not required (**msPKI-RA-Signature** is **0x00000000**)
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无需授权签名（**msPKI-RA-Signature** 为 **0x00000000**）
- en: The certificate template defines the **Any Purpose** EKU or no EKU
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 证书模板定义了**Any Purpose** EKU或没有EKU
- en: 'The LDAP query to find a vulnerable template is as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 查找易受攻击模板的LDAP查询如下：
- en: '[PRE15]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The result of the query is as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 查询结果如下：
- en: '![Figure 8.19 – LDAP query to find the ESC2 vulnerable template](image/B18964_08_19.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.19 – 查找ESC2易受攻击模板的LDAP查询](image/B18964_08_19.jpg)'
- en: Figure 8.19 – LDAP query to find the ESC2 vulnerable template
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.19 – 查找ESC2易受攻击模板的LDAP查询
- en: 'The following commands will allow you to request a certificate for **khal.drogo**
    and use it for authentication:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将允许你为**khal.drogo**请求证书并用于身份验证：
- en: '[PRE16]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The result is in the following screenshot:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下截图所示：
- en: '![Figure 8.20 – Successful exploitation of ESC2](image/B18964_08_20.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.20 – ESC2的成功利用](image/B18964_08_20.jpg)'
- en: Figure 8.20 – Successful exploitation of ESC2
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.20 – ESC2的成功利用
- en: The prevention recommendations for this are identical to the ones for ESC1.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 针对此问题的预防建议与ESC1相同。
- en: ESC3 – Misconfigured enrollment agent templates
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ESC3 – 配置错误的注册代理模板
- en: 'This privilege escalation vector abuses a different EKU – **Certificate Request
    Agent** (OID **1.3.6.1.4.1.311.20.2.1**). This EKU allows you to enroll for a
    certificate on behalf of another user. The principal enrolls in such a template
    and uses the issued certificate to co-sign a CSR on behalf of another user. The
    next step is to enroll in a template that allows to send co-signed CSR on behalf
    of a user and then the CA will issue the certificate for this user. For this attack,
    two conditions should be met. The first condition requires an enrollment agent
    certificate template to allow users to enroll. The following configuration parameters
    must be present for the attack to be successful:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特权提升向量利用了不同的EKU – **Certificate Request Agent**（OID **1.3.6.1.4.1.311.20.2.1**）。该EKU允许你代表其他用户注册证书。主体在此类模板中注册，并使用签发的证书代替其他用户共同签署CSR。下一步是注册一个允许代表用户发送共同签署CSR的模板，然后CA将为该用户签发证书。此攻击需要满足两个条件。第一个条件要求注册代理证书模板允许用户注册。为了成功进行攻击，以下配置参数必须存在：
- en: Standard users have enrollment rights granted by the Enterprise CA
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准用户有企业CA授予的注册权限
- en: Manager approval is disabled (**mspki-enrollment-flag** is **0x00000000**)
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理员批准已禁用（**mspki-enrollment-flag** 为 **0x00000000**）
- en: Authorized signatures are not required (**msPKI-RA-Signature** is **0x00000000**)
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无需授权签名（**msPKI-RA-Signature** 为 **0x00000000**）
- en: The certificate template defines the **Certificate Request** **Agent** EKU
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 证书模板定义了**证书请求** **代理** EKU
- en: 'As we did before, we will utilize the LDAP query to find a template that matches
    the first condition:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 和之前一样，我们将利用LDAP查询查找一个符合第一个条件的模板：
- en: '[PRE17]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As a result, we found the ESC3-CRA template to match the first condition:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是，我们找到了匹配第一个条件的ESC3-CRA模板：
- en: '![Figure 8.21 – LDAP query to find the Certificate Request Agent template](image/B18964_08_21.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.21 – 使用LDAP查询查找证书请求代理模板](image/B18964_08_21.jpg)'
- en: Figure 8.21 – LDAP query to find the Certificate Request Agent template
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.21 – 使用LDAP查询查找证书请求代理模板
- en: 'The second condition allows the user to use a certificate from the first condition
    to request a certificate on behalf of another user for authentication purposes.
    For this condition, the following configuration parameters must be met:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个条件允许用户使用第一个条件中的证书，代表其他用户请求证书以进行身份验证。对于此条件，必须满足以下配置参数：
- en: The Enterprise CA grants low-privileged users enrollment rights
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 企业CA授予低权限用户注册权限
- en: Manager approval is disabled
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理员批准已禁用
- en: The certificate template defines EKUs that enable authentication
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 证书模板定义了启用身份验证的EKU
- en: Enrollment agent restrictions are not implemented on the CA
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CA上未实现注册代理限制
- en: The template schema version 1 or is greater than 2 and specifies an **Application
    Policy** issuance requirement as the **Certificate Request** **Agent** EKU
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板架构版本为1或更大，并指定**Application Policy**发布要求作为**证书请求** **代理** EKU
- en: 'It sounds a bit complicated, but the following LDAP query can clarify requirements:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来有点复杂，但以下LDAP查询可以明确要求：
- en: '[PRE18]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'As a result, we found the ESC3 vulnerable template:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是，我们找到了ESC3易受攻击模板：
- en: '![Figure 8.22 – LDAP query to find the ESC3 vulnerable template](image/B18964_08_22.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.22 – 使用LDAP查询查找ESC3易受攻击模板](image/B18964_08_22.jpg)'
- en: Figure 8.22 – LDAP query to find the ESC3 vulnerable template
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.22 – 使用LDAP查询查找ESC3易受攻击模板
- en: 'The attack will consist of two steps – request a certificate for the agent
    and then use it to request a certificate on behalf of the domain administrator.
    The following commands will achieve the desired result:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击将分为两步 – 为代理请求证书，然后使用该证书代表域管理员请求证书。以下命令将实现所需结果：
- en: '[PRE19]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The result of the command execution is in the following screenshot:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 命令执行的结果如以下截图所示：
- en: '![Figure 8.23 – Successful exploitation of ESC3](image/B18964_08_23.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.23 – ESC3成功利用](image/B18964_08_23.jpg)'
- en: Figure 8.23 – Successful exploitation of ESC3
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.23 – ESC3成功利用
- en: Prevention will be similar to the previous two attacks, but it is also important
    to constrain enrollment agents as well. We can define who can be an enrollment
    agent, and which users and certificate templates agents are allowed to enroll
    on behalf of.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 预防措施将与之前的两种攻击类似，但也很重要的一点是要限制注册代理。我们可以定义谁可以作为注册代理，以及代理被允许代表哪些用户和证书模板进行注册。
- en: ESC9 – No security extension
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ESC9 – 无安全扩展
- en: This and the next attack vector were discovered by *Oliver Lyak* following Microsoft
    security updates in May 2022\. Original research can be found here[16]. In order
    to fix Certifried (CVE-2022–26923), Microsoft introduces a new **szOID_NTDS_CA_SECURITY_EXT**
    security extension that embeds the requester’s **objectSid** property into the
    certificate. Also, two new registry key values were created – **HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\SecurityProviders\Schannel\CertificateMappingMethods**
    and **HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Kdc\StrongCertificateBindingEnforcement**.
    These two values correspond to Kerberos and Schannel certificate mappings.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这个和下一个攻击向量是*Oliver Lyak*在2022年5月的Microsoft安全更新后发现的。原始研究可以在这里找到[16]。为了修复Certifried（CVE-2022–26923），Microsoft引入了新的**szOID_NTDS_CA_SECURITY_EXT**安全扩展，将请求者的**objectSid**属性嵌入证书中。此外，还创建了两个新的注册表项值
    – **HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\SecurityProviders\Schannel\CertificateMappingMethods**
    和 **HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Kdc\StrongCertificateBindingEnforcement**。这两个值对应Kerberos和Schannel证书映射。
- en: '**StrongCertificateBindingEnforcement** may have three values, which correspond
    to the following:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '**StrongCertificateBindingEnforcement**可能有三个值，对应以下内容：'
- en: '**0** – no strong certificate mapping check. KDC verifies that the certificate
    is issued by a trusted CA and can be used for authentication. Next, map it to
    an account via the UPN or DNS SAN value.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**0** – 无强证书映射检查。KDC验证证书是否由受信任的CA颁发并可用于认证。接下来，通过UPN或DNS SAN值将其映射到账户。'
- en: '**1** (default) – checks contained identifiers in the **altSecurityIdentities**
    property of an account object. If not, then the domain controller will validate
    a new SID extension (**szOID_NTDS_CA_SECURITY_EXT**) in the certificate. If no
    extension is present, mapping is performed as if the value is **0**.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**1**（默认）– 检查账户对象的**altSecurityIdentities**属性中是否包含标识符。如果没有，则域控制器将验证证书中的新SID扩展（**szOID_NTDS_CA_SECURITY_EXT**）。如果没有扩展，映射将像值为**0**一样执行。'
- en: '**2** – all checks are the same as in the value of **1**, except for a missing
    extension, which will lead to authentication denial.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**2** – 所有检查与**1**的值相同，唯一不同的是缺少扩展，这将导致认证被拒绝。'
- en: 'Schannel authentication does not directly use new security extensions. It will
    instead use S4U2self to map the certificate via Kerberos because it supports a
    new extension. However, the patch has broken certificate authentication in a lot
    of environments, and Microsoft suggested putting the value of the registry key
    to the old one. This means that certificates with a UPN or DNS name and **CertificateMappingMethods**
    value of **0x4** will not be influenced by new security extensions during mapping.
    Let’s summarize the conditions for ESC9:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Schannel认证不会直接使用新的安全扩展，而是通过Kerberos使用S4U2self来映射证书，因为它支持新的扩展。然而，补丁已经破坏了许多环境中的证书认证，微软建议将注册表键的值设置回旧值。这意味着具有UPN或DNS名称且**CertificateMappingMethods**值为**0x4**的证书，在映射过程中不会受到新安全扩展的影响。我们来总结一下ESC9的条件：
- en: '**StrongCertificateBindingEnforcement** is not set to **2** or **CertificateMappingMethods**
    contains the **0x4** value.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**StrongCertificateBindingEnforcement**未设置为**2**，或者**CertificateMappingMethods**包含**0x4**值。'
- en: The template contains the **msPKI-Enrollment-Flag** value with the **CT_FLAG_NO_SECURITY_EXTENSION**
    flag being set.
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板包含**msPKI-Enrollment-Flag**值，并设置了**CT_FLAG_NO_SECURITY_EXTENSION**标志。
- en: The template specifies the client authentication EKU.
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板指定了客户端认证EKU。
- en: A compromised user has **GenericWrite** permission over a user who can enroll
    in a vulnerable template. Our final target is the user who will be compromised
    with the help of an enrolled user.
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个受损的用户拥有**GenericWrite**权限，可以对能注册易受攻击模板的用户进行操作。我们的最终目标是通过已注册的用户帮助受损的用户。
- en: 'To emulate this attack, we need to install the May 2022 patch on the CA and
    domain controller[17]. I encourage you to make snapshots before installation.
    Then, we will create and publish the ESC9 template, set the flag from the second
    condition, grant enroll permissions to **viserys.targaryen**, and finally, execute
    an attack. From the Shadow Credentials attack, we already know that **khal.drogo**
    has the **GenericAll** right over **viserys.targaryen**. Let us emulate this scenario
    by following these steps:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟此攻击，我们需要在CA和域控制器[17]上安装2022年5月的补丁。建议在安装前先进行快照。然后，我们将创建并发布ESC9模板，设置第二个条件的标志，授予**viserys.targaryen**注册权限，最后执行攻击。从Shadow
    Credentials攻击中，我们已经知道**khal.drogo**对**viserys.targaryen**拥有**GenericAll**权限。让我们通过以下步骤模拟这个场景：
- en: 'To ensure that we correctly prepare our lab, run the following commands:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了确保我们正确准备实验环境，执行以下命令：
- en: '[PRE20]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The output should be as in the following screenshot:'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '![Figure 8.24 – Conditions to execute the ESC9 attack are met](image/B18964_08_24.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![图8.24 – 执行ESC9攻击的条件已满足](image/B18964_08_24.jpg)'
- en: Figure 8.24 – Conditions to execute the ESC9 attack are met
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.24 – 执行ESC9攻击的条件已满足
- en: 'Retrieve the NT hash of **viserys.targaryen**:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取**viserys.targaryen**的NT哈希：
- en: '[PRE21]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Update the UPN of **viserys.targaryen** to the administrator:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**viserys.targaryen**的UPN更新为管理员：
- en: '[PRE22]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Request the certificate as **viserys.targaryen** using the ESC9 vulnerable
    template:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用ESC9易受攻击模板以**viserys.targaryen**身份请求证书：
- en: '[PRE23]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Change the **viserys.targaryen** UPN back to the original:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**viserys.targaryen**的UPN更改回原始值：
- en: '[PRE24]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Obtain the NT hash of the administrator via nPAC-the-hash:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过nPAC-the-hash获取管理员的NT哈希：
- en: '[PRE25]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The result of the attack is in the following screenshot:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击结果如下截图所示：
- en: '![Figure 8.25 – Successful exploitation of ESC9](image/B18964_08_25.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![图8.25 – 成功利用ESC9漏洞](image/B18964_08_25.jpg)'
- en: Figure 8.25 – Successful exploitation of ESC9
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.25 – 成功利用ESC9漏洞
- en: 'The best prevention recommendation is to set **StrongCertificateBindingEnforcement**
    to **2**; however, it can possibly break certificate authentication in the domain.
    Also, remove **msPKI-Enrollment-Flag** from the template with the following command:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳的预防建议是将**StrongCertificateBindingEnforcement**设置为**2**；但是，这可能会破坏域中的证书认证。此外，使用以下命令从模板中删除**msPKI-Enrollment-Flag**：
- en: '[PRE26]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: ESC10 – Weak certificate mappings
  id: totrans-248
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ESC10 - 弱证书映射
- en: 'This attack technique has two scenarios – when **StrongCertificateBindingEnforcement**
    is set to **0** or **CertificateMappingMethods** contains the value **0x4**. In
    simple words, it means that the certificate’s SAN is preferred over the new security
    extension. The requirements regarding the template with the client authentication
    EKU and **GenericWrite** permissions on the user still must be met. The first
    scenario is identical to the ESC9 attack, but any certificate template can be
    used. The second scenario targets machine accounts and the default domain administrator,
    as they do not have the UPN property. Our goal will be to compromise the domain
    administrator. Again, we will use **khal.drogo** with the **GenericAll** permission
    over **viserys.targaryen**:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 这种攻击技术有两种情况 - 当**StrongCertificateBindingEnforcement**设置为**0**或**CertificateMappingMethods**包含值**0x4**时。简单来说，这意味着证书的SAN优先于新的安全扩展。仍然必须满足关于具有客户端认证EKU和**GenericWrite**权限的模板的要求。第一种情况与ESC9攻击相同，但可以使用任何证书模板。第二种情况针对机器帐户和默认域管理员，因为它们没有UPN属性。我们的目标是妥协域管理员。再次，我们将使用**khal.drogo**具有**viserys.targaryen**上的**GenericAll**权限：
- en: 'To ensure that we correctly prepare our lab, run the following command:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为确保我们正确准备实验室，运行以下命令：
- en: '[PRE27]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The output should be as in the following screenshot:'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出应该如下截图所示：
- en: '![Figure 8.26 – The CertificateMappingMethod value is 0x4, which allows an
    ESC10 attack](image/B18964_08_26.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![图8.26 - CertificateMappingMethod值为0x4，允许ESC10攻击](image/B18964_08_26.jpg)'
- en: Figure 8.26 – The CertificateMappingMethod value is 0x4, which allows an ESC10
    attack
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.26 - CertificateMappingMethod值为0x4，允许ESC10攻击
- en: 'Retrieve the NT hash of **viserys.targaryen**:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检索**viserys.targaryen**的NT哈希：
- en: '[PRE28]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Update the UPN of **viserys.targaryen** to **Administrator@essos.local**:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**viserys.targaryen**的UPN更新为**Administrator@essos.local**：
- en: '[PRE29]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Enroll in any certificate template that allows client authentication:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册任何允许客户端认证的证书模板：
- en: '[PRE30]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Change the **viserys.targaryen** UPN back to the original:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**viserys.targaryen**的UPN更改回原始状态：
- en: '[PRE31]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Obtain the LDAP shell via Schannel:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过Schannel获取LDAP shell：
- en: '[PRE32]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The result of the attack is in the following screenshot:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击的结果如下截图所示：
- en: '![Figure 8.27 – Successful exploitation of ESC10](image/B18964_08_27.jpg)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![图8.27 - 成功利用ESC10](image/B18964_08_27.jpg)'
- en: Figure 8.27 – Successful exploitation of ESC10
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.27 - 成功利用ESC10
- en: To prevent this attack, remove the **0x4** part from the **CertificateMappingMethods**
    setting in the registry.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 要防止此攻击，请从注册表中的**CertificateMappingMethods**设置中删除**0x4**部分。
- en: Improper access controls
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不当的访问控制
- en: As everything in Active Directory is an object, it means that every object has
    its own ACL. In previous chapters, we discussed ACL abuse; now, we are going to
    reuse our knowledge, but from an AD CS perspective.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Active Directory中的一切都是对象，这意味着每个对象都有自己的ACL。在之前的章节中，我们讨论了ACL滥用；现在，我们将从AD CS的角度重新利用我们的知识。
- en: ESC4 – Vulnerable certificate template access control
  id: totrans-271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ESC4 - 易受攻击的证书模板访问控制
- en: 'Certificate templates are objects in Active Directory. They have a security
    descriptor, which defines principals and their permissions over the templates.
    Weak access controls may allow an adversary to edit template settings, making
    the template vulnerable to the techniques previously covered. Critical rights
    from a security point of view are ownership, full control, and any type of **Write***
    primitives. There are a variety of tools helping to identify and abuse vulnerable
    templates: **PowerView**, Bloodhound, StandIn, Certipy, and **modifyCertTemplate**[18].
    A great step-by-step guide on how to exploit ESC4 solely with PowerView can be
    found here[19]. We will stick to the **certipy-ad** tool at the beginning. We
    detect vulnerable templates and users that can abuse them:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 证书模板是 Active Directory 中的对象。它们有一个安全描述符，用来定义主体及其对模板的权限。访问控制过于宽松可能会允许攻击者编辑模板设置，使模板易受之前所述技术的攻击。从安全角度来看，关键权限包括所有权、完全控制和任何类型的
    **写入** 权限。现在有多种工具可以帮助识别和滥用易受攻击的模板：**PowerView**、Bloodhound、StandIn、Certipy 和 **modifyCertTemplate**[18]。关于如何仅使用
    PowerView 来利用 ESC4 的详细步骤指南可以在这里找到[19]。在开始时，我们将使用 **certipy-ad** 工具。我们将检测易受攻击的模板和可以滥用它们的用户：
- en: '[PRE33]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The output of the following command is as follows:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令的输出如下：
- en: '![Figure 8.28 – khal.drogo has excessive permissions over ESC4](image/B18964_08_28.jpg)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.28 – khal.drogo 在 ESC4 上具有过多权限](image/B18964_08_28.jpg)'
- en: Figure 8.28 – khal.drogo has excessive permissions over ESC4
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.28 – khal.drogo 在 ESC4 上具有过多权限
- en: The next steps are to make the template vulnerable to an ESC1 attack by adding
    the **ENROLLEE_SUPPLIES_SUBJECT** property to the template. For a better understanding
    of the attack, let us do it step by step with the help of the **modifyCertTemplate**
    tool.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的步骤是通过将 **ENROLLEE_SUPPLIES_SUBJECT** 属性添加到模板中，使模板容易受到 ESC1 攻击。为了更好地理解这个攻击，我们将借助
    **modifyCertTemplate** 工具，逐步操作。
- en: 'First of all, we will check the ACL and the attributes of the certificate:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将检查证书的 ACL 和属性：
- en: '[PRE34]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'As a result, we will see a list of attributes and confirm that **khal.drogo**
    has **Write** privileges over the template. Next, we will configure the template
    in a way that will fulfill the requirements for the ESC1 attack:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，我们将看到一份属性列表，并确认 **khal.drogo** 对该模板拥有 **写入** 权限。接下来，我们将配置模板，使其满足 ESC1 攻击的要求：
- en: 'We will disable the “Manager Approval” requirement with the following command:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用以下命令禁用“经理审批”要求：
- en: '[PRE35]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Disable the “Authorized Signature” requirement:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 禁用“授权签名”要求：
- en: '[PRE36]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Enable SAN specification in the request:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在请求中启用 SAN 规范：
- en: '[PRE37]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Add an EKU that allows domain authentication:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个允许域认证的 EKU：
- en: '[PRE38]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Apply the “Application Policy” to allow domain authentication:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用“应用程序策略”以允许域认证：
- en: '[PRE39]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The result of the preceding commands is in the following screenshot:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的结果如下截图所示：
- en: '![Figure 8.29 – Vulnerable template adjusted to fit the ESC1 attack path](image/B18964_08_29.jpg)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.29 – 调整后的易受攻击模板适应 ESC1 攻击路径](image/B18964_08_29.jpg)'
- en: Figure 8.29 – Vulnerable template adjusted to fit the ESC1 attack path
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.29 – 调整后的易受攻击模板适应 ESC1 攻击路径
- en: 'Now, we can abuse the misconfigured template in the same way as in the ESC1
    attack:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以像在 ESC1 攻击中一样，滥用配置错误的模板：
- en: '[PRE40]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: As a result, it was possible to request a certificate and obtain a TGT as domain
    administrator.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，我们成功请求了证书，并以域管理员身份获取了 TGT。
- en: '![Figure 8.30 – Successful exploitation of ESC4](image/B18964_08_30.jpg)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.30 – 成功利用 ESC4 进行攻击](image/B18964_08_30.jpg)'
- en: Figure 8.30 – Successful exploitation of ESC4
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.30 – 成功利用 ESC4 进行攻击
- en: To prevent this attack, it is recommended to regularly review the certificate’s
    ACLs to ensure that high privileges are assigned only to the correct group of
    users. Detection is possible via event ID **5136**, but it requires adjustment
    in the auditing policy. This event ID monitors the modifications of the critical
    certificate template attributes that we changed previously. Another helpful thing
    for detecting the event ID is **4899**. However, there is no information in the
    event log on which account made changes and this event will be logged only after
    enrollment with a modified template happens[20]. The SACL on the template AD object
    can be enforced as well, giving a more granular view in event ID **4662**.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止这种攻击，建议定期审查证书的ACL，以确保仅将高权限分配给正确的用户组。通过事件ID **5136**可以检测此类行为，但需要调整审计策略。此事件ID监控我们之前更改的关键证书模板属性的修改。另一个有助于检测该事件ID的是**4899**。然而，事件日志中并没有记录哪个账户进行了更改，并且只有在使用修改后的模板进行注册时，该事件才会被记录[20]。模板AD对象上的SACL也可以强制执行，从而在事件ID
    **4662**中提供更细粒度的视图。
- en: ESC5 – Vulnerable PKI object access control
  id: totrans-300
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ESC5 – 易受攻击的PKI对象访问控制
- en: 'If an adversary has certain privileges over the following objects, it is possible
    to compromise the entire PKI system:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 如果攻击者对以下对象具有某些权限，则可能会危及整个PKI系统：
- en: CA server’s computer account
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CA服务器的计算机账户
- en: CA server’s RPC/DCOM server
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CA服务器的RPC/DCOM服务器
- en: Any descendent object/container in the **CN=Public** **Key Services,CN=Services,****CN=Configuration,DC=<COMPANY>,or**
    **DC=<COM>** container
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**CN=Public** **Key Services,CN=Services,** **CN=Configuration,DC=<COMPANY>,or**
    **DC=<COM>**容器中的任何后代对象/容器
- en: For example, let us cover the following scenario. An adversary was able to compromise
    the CA server’s computer account through RBCD. After getting the access, the NT
    hash of the domain account with local administrative privileges on the CA server
    was dumped. The adversary now can forge a Golden Certificate. To replicate this
    attack, I will add **viserys.targaryen** to the local administrator’s group.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们讨论以下场景。一名攻击者通过RBCD成功攻击了CA服务器的计算机账户。获得访问权限后，CA服务器上具有本地管理员权限的域账户的NT哈希值被转储。此时，攻击者可以伪造一个Golden证书。为了复制这个攻击，我将**viserys.targaryen**添加到本地管理员组中。
- en: 'As a local administrator, it is possible to back up the CA certificate and
    private key with the following command:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 作为本地管理员，可以使用以下命令备份CA证书和私钥：
- en: '[PRE41]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Next, we will forge a certificate for the domain administrator and use it for
    authentication. Keep in mind that the **-template** option is used to avoid the
    Kerberos **KDC_ERR_CLIENT_NOT_TRUSTED** error, which means incorrect forging:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将为域管理员伪造一个证书并用于身份验证。请记住，**-template**选项用于避免Kerberos **KDC_ERR_CLIENT_NOT_TRUSTED**错误，这意味着伪造不正确：
- en: '[PRE42]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The result of the attack is in the following screenshot:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击的结果如下截图所示：
- en: '![Figure 8.31 – Successful exploitation of ESC5](image/B18964_08_31.jpg)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![图8.31 – 成功利用ESC5漏洞](image/B18964_08_31.jpg)'
- en: Figure 8.31 – Successful exploitation of ESC5
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.31 – 成功利用ESC5漏洞
- en: 'Another technique, called **CertSync**, was recently published. It allows dumping
    **ntds.dit** remotely without DRSUAPI by combining the Golden Certificate and
    UnPAC-the-hash[21]. Obviously, privileged access to the CA is required. A Golden
    Certificate is a certificate that is forged with the private key of the CA certificate.
    We will cover forgery in more detail later when we explore domain persistence
    techniques. The steps of a C**ertSync** attack are as follows:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种技术，名为**CertSync**，最近被发布。它允许通过结合Golden证书和UnPAC-the-hash远程转储**ntds.dit**，而无需使用DRSUAPI[21]。显然，需要对CA的特权访问。Golden证书是使用CA证书私钥伪造的证书。我们将在后续讨论域持久性技术时详细介绍伪造的过程。**CertSync**攻击的步骤如下：
- en: Dump the list of users, CA information, and CRL from LDAP.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从LDAP中转储用户列表、CA信息和CRL。
- en: Dump the CA certificate and private key.
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转储CA证书和私钥。
- en: Forge offline a certificate for every user.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个用户伪造一个证书。
- en: UnPAC-the-hash for every user to obtain the NT hash.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个用户获取NT哈希值，使用UnPAC-the-hash。
- en: 'The command to launch the attack is as follows:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 发起攻击的命令如下：
- en: '[PRE43]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'As a result, NT hashes of all users are dumped:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，所有用户的NT哈希值被转储：
- en: '![Figure 8.32 – Successful certsync attack](image/B18964_08_32.jpg)'
  id: totrans-321
  prefs: []
  type: TYPE_IMG
  zh: '![图8.32 – 成功的certsync攻击](image/B18964_08_32.jpg)'
- en: Figure 8.32 – Successful certsync attack
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.32 – 成功的certsync攻击
- en: The tool also has options to improve OpSec (e.g., apply timeout between authentication
    requests, mimic existing templates, etc.).
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具还有一些选项可以提高OpSec（例如，在身份验证请求之间应用超时，模仿现有模板等）。
- en: Another exciting piece of research was published by *SpecterOps* about elevating
    to Enterprise Administrator from Domain Administrator by using ESC5\. You can
    read more here[22].
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 另一项令人兴奋的研究成果是由*SpecterOps*发布的，关于如何通过使用ESC5从域管理员晋升为企业管理员。你可以在这里阅读更多[22]。
- en: To prevent ESC5, apply hardening to the CA server and ensure that only necessary
    accounts can access it. Detection is possible via the monitoring of certificate
    template modifications by auditing SACLs.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止ESC5，对CA服务器进行加固，并确保只有必要的帐户可以访问。可以通过审计SACLs监控证书模板修改来进行检测。
- en: ESC7 – Vulnerable certificate authority access control
  id: totrans-326
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ESC7 – 可能受攻击的证书颁发机构访问控制
- en: This attack is possible when ACLs on the CA itself are not tight enough. The
    two main rights we are interested in are **ManageCA** (CA administrator) and **Issue
    and Manage Certificates** (certificate manager). **ManageCA** allows the addition
    of the **EDITF_ATTRIBUTESUBJECTALTNAME2** flag, effectively making CA prone to
    ESC6 attack. However, a service restart will be required to introduce this change.
    Also, the installed May 2022 security updates kill ESC6\. A good example of how
    to turn excessive rights into ESC6 with the help of the PowerShell PSPKI module
    can be found here[23].
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 当CA本身的ACL不够严格时，这种攻击是可能的。我们感兴趣的两个主要权限是**ManageCA**（CA管理员）和**颁发和管理证书**（证书管理员）。**ManageCA**允许添加**EDITF_ATTRIBUTESUBJECTALTNAME2**标志，有效地使CA容易受到ESC6攻击。然而，需要重新启动服务才能引入此更改。此外，安装的2022年5月安全更新会杀死ESC6。如何使用PowerShell
    PSPKI模块将过多权限转换为ESC6的良好示例可以在这里找到[23]。
- en: However, the **ManageCA** permission allows you to grant yourself **Issue and
    Manage Certificates** access rights. This role allows us to approve pending requests,
    negating the manager approval issuance requirement. Now, we can combine new rights
    to execute an attack. The default **SubCA** template is vulnerable to ESC1 and
    has the **Any purpose** EKU. An adversary can request a certificate using the
    **SubCA** template, but the request will be denied because only administrators
    can enroll in it. However, requests can be manually approved using an account
    with **ManageCA** and **Issue and Manage Certificates** permissions. It is important
    to note that both permissions are required. The certificate can then be manually
    retrieved and used for domain authentication.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，**ManageCA**权限允许你授予自己**颁发和管理证书**的访问权限。这个角色允许我们批准待处理的请求，从而消除了经理批准发放的要求。现在，我们可以结合新的权限来执行攻击。默认的**SubCA**模板容易受到ESC1的攻击，并且具有**任何用途**的EKU。攻击者可以使用**SubCA**模板请求证书，但请求将被拒绝，因为只有管理员可以在其中注册。然而，可以使用具有**ManageCA**和**颁发和管理证书**权限的帐户手动批准请求。重要的是要注意，这两个权限都是必需的。然后可以手动检索证书并用于域身份验证。
- en: To show the preceding scenario, I will grant the **khal.drogo** user **ManageCA**
    permission. This can be granted in the **Security** tab of **CA Properties** in
    **Certification Authority (certsrv) MMC**. We will start with the ACL enumeration
    of the CA. We can use a PowerShell module called PSPKI or **Certify.exe** with
    the **cas** parameter. It will show that **khal.drogo** has the **ManageCA** right.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示前述情景，我将授予**khal.drogo**用户**ManageCA**权限。这可以在**证书颁发机构（certsrv）MMC**中的**CA属性**的**安全**选项卡中授予。我们将从CA的ACL枚举开始。我们可以使用一个名为PSPKI的PowerShell模块或带有**cas**参数的**Certify.exe**。它将显示**khal.drogo**拥有**ManageCA**权限。
- en: '![Figure 8.33 – ACL enumeration of the ESSOS-CA](image/B18964_08_33.jpg)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
  zh: '![图8.33 – ESSOS-CA的ACL枚举](image/B18964_08_33.jpg)'
- en: Figure 8.33 – ACL enumeration of the ESSOS-CA
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.33 – ESSOS-CA的ACL枚举
- en: 'We will grant the **khal.drogo** user **Issue and Manage Certificates** rights,
    also known as O**fficer**. Then, we will enable the **SubCA** template if it was
    disabled:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将授予**khal.drogo**用户**颁发和管理证书**权限，也称为**官员**。然后，如果已禁用，我们将启用**SubCA**模板：
- en: '[PRE44]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The result of the execution of the preceding command is as follows:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前述命令的结果如下：
- en: '![Figure 8.34 – Enabling the SubCA template and granting the officer right
    to khal.drogo](image/B18964_08_34.jpg)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
  zh: '![图8.34 – 启用SubCA模板并授予khal.drogo官员权限](image/B18964_08_34.jpg)'
- en: Figure 8.34 – Enabling the SubCA template and granting the officer right to
    khal.drogo
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.34 – 启用SubCA模板并授予khal.drogo官员权限
- en: 'We will launch the attack by requesting a certificate using the **SubCA** template,
    manually approving it, and lastly, retrieving the issued certificate. The following
    commands will execute the attack:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过请求使用**SubCA**模板的证书来发起攻击，手动批准它，最后检索已发放的证书。以下命令将执行攻击：
- en: '[PRE45]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The result of the preceding commands is in the following screenshot:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 前述命令的结果如下截图所示：
- en: '![Figure 8.35 – Successful ESC7 attack](image/B18964_08_35.jpg)'
  id: totrans-340
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.35 – 成功的 ESC7 攻击](image/B18964_08_35.jpg)'
- en: Figure 8.35 – Successful ESC7 attack
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.35 – 成功的 ESC7 攻击
- en: There is some intriguing research published by *Tarlogic*. It shows that it
    is possible to achieve remote code execution by uploading a web shell if an adversary
    has **ManageCA** permissions. Research can be found here[24].
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '*Tarlogic*发布了一些引人入胜的研究。研究表明，如果对手拥有**ManageCA**权限，则可以通过上传 Web shell 实现远程代码执行。研究可在此处找到[24]。'
- en: 'To prevent ESC7, review principals with sensitive security permissions over
    the CA. Detection is possible via the Sysmon registry rule for the scenario when
    the **EDITF_ATTRIBUTESUBJECTALTNAME2** flag will be set by an attacker. A change
    of the CA security permissions generates event ID **4882**, as shown here:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 为防止 ESC7，审查对 CA 具有敏感安全权限的主体。通过 Sysmon 注册表规则，可以检测到攻击者将设置**EDITF_ATTRIBUTESUBJECTALTNAME2**标志的情况。更改
    CA 安全权限会生成事件 ID **4882**，如下所示：
- en: '![Figure 8.36 – khal.drogo added Certificate Manager permissions](image/B18964_08_36.jpg)'
  id: totrans-344
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.36 – khal.drogo 添加了证书管理权限](image/B18964_08_36.jpg)'
- en: Figure 8.36 – khal.drogo added Certificate Manager permissions
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.36 – khal.drogo 添加了证书管理权限
- en: The next section will demonstrate that, in the past, the default CA configuration
    led to a complete AD CS takeover.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将演示，过去默认的 CA 配置导致完全接管 AD CS。
- en: CA misconfiguration
  id: totrans-347
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CA 配置错误
- en: Now we are going to touch upon an attack that was patched by Microsoft in May
    2022, but you still may encounter it in older environments.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将讨论一个在 2022 年 5 月由 Microsoft 补丁修复的攻击，但您仍可能在旧环境中遇到它。
- en: ESC6 – EDITF_ATTRIBUTESUBJECTALTNAME2
  id: totrans-349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ESC6 – EDITF_ATTRIBUTESUBJECTALTNAME2
- en: 'If the **EDITF_ATTRIBUTESUBJECTALTNAME2** flag is set on the CA, any request
    can have defined values in the subject alternative name. Effectively, any domain
    user can enroll in any template configured for domain authentication and obtain
    a certificate as any other user, including the domain administrator. The difference
    from ESC1 is that account information is stored in a certificate attribute, not
    in a certificate extension. This flag is stored in the registry and can be verified
    with **certutil.exe/certify** from an unelevated context; however, a remote registry
    service should be up and running if the check is happening over the network:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 CA 上设置了**EDITF_ATTRIBUTESUBJECTALTNAME2**标志，任何请求都可以在主题备用名称中定义值。实际上，任何域用户都可以在为域身份验证配置的任何模板中注册，并获取证书，包括域管理员。与
    ESC1 的区别在于，帐户信息存储在证书属性中，而不是在证书扩展中。此标志存储在注册表中，可以使用**certutil.exe/certify**从非提升的上下文中验证；但是，如果检查是通过网络进行的，则远程注册表服务应该正在运行：
- en: '[PRE46]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Certify will detect this flag and raise an issue:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: Certify 将检测到此标志并引发问题：
- en: '![Figure 8.37 – Flag is set](image/B18964_08_37.jpg)'
  id: totrans-353
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.37 – 标志已设置](image/B18964_08_37.jpg)'
- en: Figure 8.37 – Flag is set
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.37 – 标志已设置
- en: 'Exploitation is relatively straightforward. We request a user certificate with
    the domain administrator as an alternative name:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 利用相对简单。我们请求一个用户证书，其中域管理员作为替代名称：
- en: '[PRE47]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The result is in the following screenshot:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下截图所示：
- en: '![Figure 8.38 – Successful ESC6 attack](image/B18964_08_38.jpg)'
  id: totrans-358
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.38 – 成功的 ESC6 攻击](image/B18964_08_38.jpg)'
- en: Figure 8.38 – Successful ESC6 attack
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.38 – 成功的 ESC6 攻击
- en: 'To prevent this attack, disable the flag with the following command (domain
    administrator privileges required) and restart the service:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 要防止此攻击，请使用以下命令禁用标志（需要域管理员权限）并重新启动服务：
- en: '[PRE48]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The May 2022 security updates kill ESC6; now, it works only combined with ESC10\.
    The patch enforced new certificates to have a security extension that embeds the
    requester’s **objectSid** property, not the value from SAN.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 2022 年 5 月的安全更新杀死了 ESC6；现在，它只能与 ESC10 结合使用。该补丁强制新证书具有一个安全扩展，其中嵌入了请求者的**objectSid**属性，而不是来自
    SAN 的值。
- en: In the next section, we will revisit relay attacks from [*Chapter 5*](B18964_05.xhtml#_idTextAnchor093),
    but only in new ways that apply to AD CS.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将重新审视中继攻击[*第 5 章*](B18964_05.xhtml#_idTextAnchor093)，但仅适用于 AD CS 的新方法。
- en: Relay attacks
  id: totrans-364
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 中继攻击
- en: We discussed relay attacks before in [*Chapter 5*](B18964_05.xhtml#_idTextAnchor093).
    Here, we will just revisit them but now with a focus on AD CS.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前在[*第5章*](B18964_05.xhtml#_idTextAnchor093)中讨论过中继攻击。在这里，我们将重新审视它们，但现在重点放在AD
    CS上。
- en: ESC8 – NTLM relay to AD CS HTTP endpoints
  id: totrans-366
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ESC8 – NTLM中继到AD CS HTTP端点
- en: 'If additional AD CS server roles are installed, they may introduce several
    HTTP-based enrollment methods. These HTTP-based enrollment methods are vulnerable
    to NTLM or Kerberos relay attacks. An adversary uses **PetitPotam**, for example,
    to coerce NTLM authentication from the domain controller to the host of choice.
    Then, NTLM credentials are relayed to the AD CS web enrollment page and a domain
    controller certificate is issued. Using this certificate, an adversary will request
    a TGT and access the domain controller via pass-the-certificate. There are various
    versions of how this attack can be performed depending on available tools and
    protocols[25]. We will stick to the Linux way, following the walk-through of the
    lab author, *Mayfly*[26]:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 如果安装了额外的AD CS服务器角色，可能会引入几种基于HTTP的注册方法。这些基于HTTP的注册方法容易受到NTLM或Kerberos中继攻击的影响。例如，对手可以使用**PetitPotam**来强制从域控制器到所选主机的NTLM身份验证。然后，NTLM凭据被中继到AD
    CS网页注册页面，并颁发域控制器证书。使用此证书，对手将请求TGT并通过传递证书访问域控制器。这种攻击的执行方式取决于可用工具和协议的不同版本[25]。我们将坚持使用Linux方式，按照实验作者*Mayfly*[26]的步骤：
- en: Find enrollment endpoints by using **Certify.exe** with the **cas** parameter.
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**Certify.exe**和**cas**参数查找注册端点。
- en: 'Create a listener on our Kali machine to relay SMB authentication to the AD
    CS HTTP endpoint:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的Kali机器上创建一个监听器，将SMB身份验证中继到AD CS HTTP端点：
- en: '[PRE49]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: We chose the **DomainController** template because we target the domain controller.
    If we target a workstation, we can use a **Machine** template, and for the domain
    user, the **User** template.
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们选择**DomainController**模板，因为我们的目标是域控制器。如果我们的目标是工作站，我们可以使用**Machine**模板，对于域用户，我们可以使用**User**模板。
- en: 'Coerce authentication with **PetitPotam**; however, you can choose any other
    method as well:'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**PetitPotam**强制进行身份验证；但是，您也可以选择任何其他方法：
- en: '[PRE50]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Get the certificate after coerced authentication:'
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在强制身份验证后获取证书：
- en: '![Figure 8.39 – Obtain the domain controller’s computer account certificate](image/B18964_08_39.jpg)'
  id: totrans-375
  prefs: []
  type: TYPE_IMG
  zh: '![图8.39 – 获取域控制器的计算机帐户证书](image/B18964_08_39.jpg)'
- en: Figure 8.39 – Obtain the domain controller’s computer account certificate
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.39 – 获取域控制器的计算机帐户证书
- en: 'Request a TGT by using pass-the-certificate:'
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过传递证书请求TGT：
- en: '[PRE51]'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Using the TGT, obtain the NT hash of **daenerys.targaryen**:'
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用TGT，获取**daenerys.targaryen**的NT哈希：
- en: '[PRE52]'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The result of the attack is in the following screenshot:'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 攻击的结果如下截图所示：
- en: '![Figure 8.40 – Successful ESC8 attack](image/B18964_08_40.jpg)'
  id: totrans-382
  prefs: []
  type: TYPE_IMG
  zh: '![图8.40 – 成功的ESC8攻击](image/B18964_08_40.jpg)'
- en: Figure 8.40 – Successful ESC8 attack
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.40 – 成功的ESC8攻击
- en: 'Certipy-ad also has this attack embedded:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: Certipy-ad也嵌入了这种攻击：
- en: '[PRE53]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'After using any of the coerce methods, we obtained the certificate and NT hash:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任何强制方法后，我们获得了证书和NT哈希：
- en: '![Figure 8.41 – Successful ESC8 attack](image/B18964_08_41.jpg)'
  id: totrans-387
  prefs: []
  type: TYPE_IMG
  zh: '![图8.41 – 成功的ESC8攻击](image/B18964_08_41.jpg)'
- en: Figure 8.41 – Successful ESC8 attack
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.41 – 成功的ESC8攻击
- en: The prevention recommendations are to enable **Extended Protection for Authentication**
    (**EPA**) for Certificate Enrollment Web Service, disable unused AD CS HTTP endpoints,
    and disable NTLM authentication at the host and IIS level. Detection is possible
    via event ID **4624** on the CA server from machine accounts using NTLM and event
    ID **4768** where the domain controller’s computer account certificate is used
    to request the TGT.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 预防建议是为证书颁发Web服务启用**扩展保护认证**（**EPA**），禁用未使用的AD CS HTTP端点，并在主机和IIS级别禁用NTLM身份验证。可以通过CA服务器上的事件ID
    **4624**检测使用NTLM的机器帐户以及事件ID **4768**，其中域控制器的计算机帐户证书用于请求TGT。
- en: ESC11 – NTLM relay to RPC endpoint
  id: totrans-390
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ESC11 – NTLM中继到RPC端点
- en: 'This attack is similar to ESC8, but the relay is done to the RPC endpoint,
    not the HTTP one. Original research can be found here[27]. The certificate request
    is sent to the RPC endpoint over the **ICertPassage Remote** (**ICPR**) protocol.
    There are two conditions to be met in order for an attack to be successful:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 这种攻击类似于ESC8，但中继是针对RPC端点而不是HTTP端点。原始研究可以在这里找到[27]。证书请求通过**ICertPassage Remote**（**ICPR**）协议发送到RPC端点。要成功执行攻击，必须满足两个条件：
- en: The **IF_ENFORCEENCRYPTICERTREQUEST** flag is not set (it is set by default)
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IF_ENFORCEENCRYPTICERTREQUEST**标志未设置（默认设置）'
- en: NTLM signing is not required
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NTLM签名不是必须的
- en: 'Back compatibility with older OS versions (< Windows Server 2012) can be the
    reason for the flag to be unset. For demonstration purposes, we will unset it
    on **braavos.essos.local** machine by running the following command from the elevated
    context:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 向后兼容较旧的操作系统版本（< Windows Server 2012）可能是该标志未设置的原因。为了演示，我们将通过在**braavos.essos.local**机器的提升上下文中运行以下命令来取消设置该标志：
- en: '[PRE54]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The following steps will successfully emulate the attack:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将成功模拟该攻击：
- en: 'Check whether the CA is vulnerable to ESC11 by using **certipy**:'
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**certipy**检查CA是否对ESC11存在漏洞：
- en: '[PRE55]'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The result is shown here:'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果如下所示：
- en: '![Figure 8.42 – CA is vulnerable to ESC11](image/B18964_08_42.jpg)'
  id: totrans-400
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.42 – CA对ESC11攻击存在漏洞](image/B18964_08_42.jpg)'
- en: Figure 8.42 – CA is vulnerable to ESC11
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.42 – CA对ESC11攻击存在漏洞
- en: 'Launch the listener with the **DomainController** template targeting the CA:'
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动监听器，使用**DomainController**模板定位CA：
- en: '[PRE56]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Coerce authentication by using the **Coercer** tool:'
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**Coercer**工具强制认证：
- en: '[PRE57]'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Authenticate using the domain controller’s computer account certificate:'
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用域控制器的计算机账户证书进行认证：
- en: '[PRE58]'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The result is shown in the following screenshot:'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果在以下截图中显示：
- en: '![Figure 8.43 – Successful ESC11 attack](image/B18964_08_43.jpg)'
  id: totrans-409
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.43 – 成功的ESC11攻击](image/B18964_08_43.jpg)'
- en: Figure 8.43 – Successful ESC11 attack
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.43 – 成功的ESC11攻击
- en: To mitigate this attack, enforce packet signing and encryption by setting the
    **IF_ENFORCEENCRYPTICERTREQUEST** flag. Detection recommendations are the same
    as for ESC8.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 为了缓解此攻击，通过设置**IF_ENFORCEENCRYPTICERTREQUEST**标志来强制包签名和加密。检测建议与ESC8相同。
- en: In the next section, we will discuss possible ways to achieve persistence in
    the domain by abusing built-in AD CS functionality.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论通过滥用内建的AD CS功能来实现域内持久化的可能方式。
- en: Domain persistence
  id: totrans-413
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 域持久化
- en: In this section, we will explore techniques to achieve persistence in the domain
    using a compromised CA. We will gain an understanding of the typical vectors an
    adversary will utilize to keep high-privileged access to the environment and explore
    approaches to detect such activities.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨利用被攻破的CA在域中实现持久化的技术。我们将了解对手通常会利用哪些典型的向量来保持对环境的高权限访问，并探讨检测此类活动的方法。
- en: DPERSIST1 – Forge certificates with stolen CA certificate
  id: totrans-415
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DPERSIST1 – 使用被盗的CA证书伪造证书
- en: 'If an adversary has compromised a CA and obtained a CA certificate with a corresponding
    private key, it is possible to forge any certificate in the domain environment.
    To differentiate the CA certificate from others, pay attention to certain characteristics
    such as the following:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个对手已成功攻破了一个CA并获得了相应的CA证书和私钥，那么在该域环境中伪造任何证书都是可能的。为了区分CA证书与其他证书，请注意以下特征：
- en: The issuer and subject are set to the distinguished name of the CA
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发行者和主题被设置为CA的唯一名称
- en: It has a “CA Version” extension
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有一个“CA版本”扩展
- en: No EKU
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无EKU
- en: 'These characteristics are shown in the following screenshot:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 这些特征在以下截图中显示：
- en: '![Figure 8.44 – CA certificate information](image/B18964_08_44.jpg)'
  id: totrans-421
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.44 – CA证书信息](image/B18964_08_44.jpg)'
- en: Figure 8.44 – CA certificate information
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.44 – CA证书信息
- en: It is important to mention that forged certificates cannot be revoked because
    the CA is not aware of their existence. One of the scenarios of how to obtain
    a CA certificate was explained in the ESC5 example. If you need to forge the certificate
    on a Windows machine, there is a tool called **ForgeCert**[28] to assist you.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 需要特别说明的是，伪造的证书无法被吊销，因为CA并不知道它们的存在。获取CA证书的场景之一已在ESC5示例中解释。如果你需要在Windows机器上伪造证书，可以使用一个名为**ForgeCert**[28]的工具来协助你。
- en: Ideally, the CA should be treated as a critical asset from a security point
    of view. The root CA can be put offline and delegate certificate issuance to the
    subordinate CA. In case of a compromise, the root CA still will be secure and
    can revoke the subordinate CA certificate. The private key of the CA certificate
    should be stored separately on a hardware device with all physical security measures
    in place.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，从安全角度来看，CA应该被视为关键资产。根CA可以下线，并将证书颁发委托给下级CA。如果根CA被攻破，它仍然是安全的，并可以吊销下级CA证书。CA证书的私钥应当与所有物理安全措施一起单独存储在硬件设备中。
- en: DPERSIST2 – Trusting rogue CA certificates
  id: totrans-425
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DPERSIST2 – 信任恶意CA证书
- en: 'During authentication, the domain controller checks the **NTAuthCertificates**
    object for a CA entry, which is specified in the **Issuer** field. The idea of
    this technique is to generate a self-signed rogue CA certificate and add it to
    the **NTAuthCertificates** Active Directory object. After that, any forged certificate
    signed by a rogue CA certificate will be valid. An adversary needs high-privileged
    access to be able to push rogue certificates to the **NTAuthCertificates** object.
    It can be done by the following command:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 在身份验证过程中，域控制器会检查**NTAuthCertificates**对象中的CA条目，该条目在**Issuer**字段中指定。此技术的思路是生成一个自签名的恶意CA证书，并将其添加到**NTAuthCertificates**
    Active Directory对象中。之后，任何由恶意CA证书签名的伪造证书都会被视为有效。攻击者需要具有高权限的访问权限，才能将恶意证书推送到**NTAuthCertificates**对象中。可以通过以下命令来实现：
- en: '[PRE59]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Such activity can be detected if SACL audit for **Write** and **Modify** actions
    against the **CN=NTAuthCertificates,CN=Public Key Services,CN=Services,CN=Configuration,DC=essos,DC=local**
    object is enabled. This will generate event ID **5136**.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启用了**CN=NTAuthCertificates,CN=Public Key Services,CN=Services,CN=Configuration,DC=essos,DC=local**对象的**Write**和**Modify**操作的SACL审计，就可以检测到这种活动。这将生成事件ID
    **5136**。
- en: DPERSIST3 – Malicious misconfiguration
  id: totrans-429
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DPERSIST3 – 恶意配置错误
- en: With high-privileged access to the CA, an adversary can achieve persistence
    by introducing malicious misconfiguration via security descriptor modifications
    of AD CS components. In this case, the only limit is the attacker’s imagination.
    All attacks from the domain privilege escalation section can be implemented together
    with additional excessive permissions set on the key elements of AD CS. Detection
    of this technique is quite difficult. Event ID **4882**, as shown in ESC7, will
    be logged every time security permissions for certificate services are changed.
    Also, the SACL audit of critical AD objects will be helpful.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对CA的高权限访问，攻击者可以通过修改AD CS组件的安全描述符引入恶意配置错误，从而实现持久性。在这种情况下，唯一的限制就是攻击者的想象力。所有来自域权限提升部分的攻击都可以与在AD
    CS关键元素上设置的额外过度权限一起实施。检测此技术非常困难。每当证书服务的安全权限发生更改时，都会记录事件ID **4882**，如ESC7所示。此外，关键AD对象的SACL审计将非常有帮助。
- en: Summary
  id: totrans-431
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we learned about techniques to compromise AD CS. The techniques
    presented in the chapter were grouped into four categories: theft, account persistence,
    domain privilege escalation, and domain persistence.'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了妥协AD CS的技术。本章介绍的技术被分为四类：证书窃取、账户持久性、域权限提升和域持久性。
- en: In the theft category, we covered different ways to steal certificates from
    a compromised endpoint. Next, we introduced you to account persistence techniques,
    such as the request and renewal of user and machine certificates. Also, we learned
    about domain privilege escalation and persistence techniques, respectively, to
    achieve the highest privileges on the domain level as well.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 在证书窃取类别中，我们介绍了从被攻陷终端窃取证书的不同方法。接下来，我们向您介绍了账户持久性技术，如用户和机器证书的请求与续订。此外，我们还学习了域权限提升和持久性技术，分别用于在域级别实现最高权限。
- en: In the next chapter, we will dive into Microsoft’s solution for databases –
    Microsoft SQL Server. We will cover offensive techniques, prevention, and detection
    recommendations.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨Microsoft的数据库解决方案——Microsoft SQL Server。我们将涵盖进攻性技术、防御措施和检测建议。
- en: References
  id: totrans-435
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: 'SpecterOps – Certified Pre-Owned: [https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf](https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf)'
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'SpecterOps – Certified Pre-Owned: [https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf](https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf)'
- en: 'Microsoft official documentation about AD CS: [https://learn.microsoft.com/en-us/training/modules/implement-manage-active-directory-certificate-services/2-explore-fundamentals-of-pki-ad-cs](https://learn.microsoft.com/en-us/training/modules/implement-manage-active-directory-certificate-services/2-explore-fundamentals-of-pki-ad-cs)'
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关于AD CS的Microsoft官方文档：[https://learn.microsoft.com/en-us/training/modules/implement-manage-active-directory-certificate-services/2-explore-fundamentals-of-pki-ad-cs](https://learn.microsoft.com/en-us/training/modules/implement-manage-active-directory-certificate-services/2-explore-fundamentals-of-pki-ad-cs)
- en: 'PassTheCert tool: [https://github.com/AlmondOffSec/PassTheCert](https://github.com/AlmondOffSec/PassTheCert)'
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PassTheCert工具：[https://github.com/AlmondOffSec/PassTheCert](https://github.com/AlmondOffSec/PassTheCert)
- en: 'Certificate authentication without PKINIT: [https://offsec.almond.consulting/authenticating-with-certificates-when-pkinit-is-not-supported.xhtml](https://offsec.almond.consulting/authenticating-with-certificates-when-pkinit-is-not-supported.xhtml)'
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无PKINIT的证书认证：[https://offsec.almond.consulting/authenticating-with-certificates-when-pkinit-is-not-supported.xhtml](https://offsec.almond.consulting/authenticating-with-certificates-when-pkinit-is-not-supported.xhtml)
- en: 'Hunting for AD CS abuse: [https://speakerdeck.com/heirhabarov/hunting-for-active-directory-certificate-services-abuse](https://speakerdeck.com/heirhabarov/hunting-for-active-directory-certificate-services-abuse)'
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 寻找AD CS滥用行为：[https://speakerdeck.com/heirhabarov/hunting-for-active-directory-certificate-services-abuse](https://speakerdeck.com/heirhabarov/hunting-for-active-directory-certificate-services-abuse)
- en: 'CertStealer tool: [https://github.com/TheWover/CertStealer](https://github.com/TheWover/CertStealer)'
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CertStealer工具：[https://github.com/TheWover/CertStealer](https://github.com/TheWover/CertStealer)
- en: 'SharpDPAPI tool: [https://github.com/GhostPack/SharpDPAPI](https://github.com/GhostPack/SharpDPAPI)'
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SharpDPAPI工具：[https://github.com/GhostPack/SharpDPAPI](https://github.com/GhostPack/SharpDPAPI)
- en: 'Detecting UnPAC-the-hash and Shadow Credentials attacks: [https://medium.com/falconforce/falconfriday-detecting-unpacing-and-shadowed-credentials-0xff1e-2246934247ce](https://medium.com/falconforce/falconfriday-detecting-unpacing-and-shadowed-credentials-0xff1e-2246934247ce)'
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检测UnPAC-the-hash和Shadow Credentials攻击：[https://medium.com/falconforce/falconfriday-detecting-unpacing-and-shadowed-credentials-0xff1e-2246934247ce](https://medium.com/falconforce/falconfriday-detecting-unpacing-and-shadowed-credentials-0xff1e-2246934247ce)
- en: 'Certify tool: [https://github.com/GhostPack/Certify](https://github.com/GhostPack/Certify)'
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Certify工具：[https://github.com/GhostPack/Certify](https://github.com/GhostPack/Certify)
- en: 'Shadow Credentials attack: [https://shenaniganslabs.io/2021/06/21/Shadow-Credentials.xhtml](https://shenaniganslabs.io/2021/06/21/Shadow-Credentials.xhtml)'
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Shadow Credentials攻击：[https://shenaniganslabs.io/2021/06/21/Shadow-Credentials.xhtml](https://shenaniganslabs.io/2021/06/21/Shadow-Credentials.xhtml)
- en: 'Whisker tool: [https://github.com/eladshamir/Whisker](https://github.com/eladshamir/Whisker)'
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Whisker工具：[https://github.com/eladshamir/Whisker](https://github.com/eladshamir/Whisker)
- en: 'AD CS cheat sheet: [https://hideandsec.sh/books/cheatsheets-82c/page/active-directory-certificate-services](https://hideandsec.sh/books/cheatsheets-82c/page/active-directory-certificate-services)'
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AD CS备忘单：[https://hideandsec.sh/books/cheatsheets-82c/page/active-directory-certificate-services](https://hideandsec.sh/books/cheatsheets-82c/page/active-directory-certificate-services)
- en: 'Certifried original research: [https://research.ifcr.dk/certifried-active-directory-domain-privilege-escalation-cve-2022-26923-9e098fe298f4](https://research.ifcr.dk/certifried-active-directory-domain-privilege-escalation-cve-2022-26923-9e098fe298f4)'
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Certifried原始研究：[https://research.ifcr.dk/certifried-active-directory-domain-privilege-escalation-cve-2022-26923-9e098fe298f4](https://research.ifcr.dk/certifried-active-directory-domain-privilege-escalation-cve-2022-26923-9e098fe298f4)
- en: 'Certipy tool: [https://github.com/ly4k/Certipy](https://github.com/ly4k/Certipy)'
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Certipy工具：[https://github.com/ly4k/Certipy](https://github.com/ly4k/Certipy)
- en: 'Semperis write-up for CVE-2022-26923: [https://www.semperis.com/blog/ad-vulnerability-cve-2022-26923/](https://www.semperis.com/blog/ad-vulnerability-cve-2022-26923/)'
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Semperis针对CVE-2022-26923的分析：[https://www.semperis.com/blog/ad-vulnerability-cve-2022-26923/](https://www.semperis.com/blog/ad-vulnerability-cve-2022-26923/)
- en: 'ESC9 and ESC10 author’s blog post: [https://research.ifcr.dk/certipy-4-0-esc9-esc10-bloodhound-gui-new-authentication-and-request-methods-and-more-7237d88061f7](https://research.ifcr.dk/certipy-4-0-esc9-esc10-bloodhound-gui-new-authentication-and-request-methods-and-more-7237d88061f7)'
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ESC9和ESC10作者的博客文章：[https://research.ifcr.dk/certipy-4-0-esc9-esc10-bloodhound-gui-new-authentication-and-request-methods-and-more-7237d88061f7](https://research.ifcr.dk/certipy-4-0-esc9-esc10-bloodhound-gui-new-authentication-and-request-methods-and-more-7237d88061f7)
- en: 'Microsoft patch for Certifried: [https://catalog.update.microsoft.com/Search.aspx?q=KB5025228](https://catalog.update.microsoft.com/Search.aspx?q=KB5025228)'
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 微软针对Certifried的补丁：[https://catalog.update.microsoft.com/Search.aspx?q=KB5025228](https://catalog.update.microsoft.com/Search.aspx?q=KB5025228)
- en: 'The modifyCertTemplate tool: [https://github.com/fortalice/modifyCertTemplate](https://github.com/fortalice/modifyCertTemplate)'
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: modifyCertTemplate工具：[https://github.com/fortalice/modifyCertTemplate](https://github.com/fortalice/modifyCertTemplate)
- en: 'Exploit ESC4 using PowerView: [https://redteam.wiki/postexploitation/active-directory/adcs/esc4](https://redteam.wiki/postexploitation/active-directory/adcs/esc4)'
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用PowerView利用ESC4：[https://redteam.wiki/postexploitation/active-directory/adcs/esc4](https://redteam.wiki/postexploitation/active-directory/adcs/esc4)
- en: 'Detecting ESC4: [https://www.fortalicesolutions.com/posts/adcs-playing-with-esc4](https://www.fortalicesolutions.com/posts/adcs-playing-with-esc4)'
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检测ESC4：[https://www.fortalicesolutions.com/posts/adcs-playing-with-esc4](https://www.fortalicesolutions.com/posts/adcs-playing-with-esc4)
- en: 'Certsync attack: [https://www.redpacketsecurity.com/certsync-dump-ntds-with-golden-certificates-and-unpac-the-hash/](https://www.redpacketsecurity.com/certsync-dump-ntds-with-golden-certificates-and-unpac-the-hash/)'
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Certsync 攻击: [https://www.redpacketsecurity.com/certsync-dump-ntds-with-golden-certificates-and-unpac-the-hash/](https://www.redpacketsecurity.com/certsync-dump-ntds-with-golden-certificates-and-unpac-the-hash/)'
- en: 'SpecterOps – From DA to EA with ESC5: [https://posts.specterops.io/from-da-to-ea-with-esc5-f9f045aa105c](https://posts.specterops.io/from-da-to-ea-with-esc5-f9f045aa105c)'
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'SpecterOps – 从 DA 到 EA 使用 ESC5: [https://posts.specterops.io/from-da-to-ea-with-esc5-f9f045aa105c](https://posts.specterops.io/from-da-to-ea-with-esc5-f9f045aa105c)'
- en: 'PSPKI to turn ESC7 to ESC6: [https://luemmelsec.github.io/Skidaddle-Skideldi-I-just-pwnd-your-PKI/#esc7](https://luemmelsec.github.io/Skidaddle-Skideldi-I-just-pwnd-your-PKI/#esc7)'
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '使用 PSPKI 将 ESC7 转换为 ESC6: [https://luemmelsec.github.io/Skidaddle-Skideldi-I-just-pwnd-your-PKI/#esc7](https://luemmelsec.github.io/Skidaddle-Skideldi-I-just-pwnd-your-PKI/#esc7)'
- en: 'From ManageCA to RCE: https://www.tarlogic.com/blog/ad-cs-manageca-rce/'
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '从 ManageCA 到 RCE: https://www.tarlogic.com/blog/ad-cs-manageca-rce/'
- en: 'ESC8 exploitation versions: https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Active%20Directory%20Attack.md#esc8---ad-cs-relay-attack'
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'ESC8 利用版本: https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Active%20Directory%20Attack.md#esc8---ad-cs-relay-attack'
- en: 'AD CS GOADv2 lab walk-through: https://mayfly277.github.io/posts/GOADv2-pwning-part6/#esc8---coerce-to-domain-admin'
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'AD CS GOADv2 实验室演练: https://mayfly277.github.io/posts/GOADv2-pwning-part6/#esc8---coerce-to-domain-admin'
- en: 'ESC11 original research: https://blog.compass-security.com/2022/11/relaying-to-ad-certificate-services-over-rpc/'
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'ESC11 原创研究: https://blog.compass-security.com/2022/11/relaying-to-ad-certificate-services-over-rpc/'
- en: 'ForgeCert tool: https://github.com/GhostPack/ForgeCert'
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'ForgeCert 工具: https://github.com/GhostPack/ForgeCert'
