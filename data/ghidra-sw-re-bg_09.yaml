- en: '*Chapter 7*: Using Ghidra Headless Analyzer'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 7 章*：使用 Ghidra 无头分析器'
- en: In this chapter, you will learn about the non-GUI capabilities of Ghidra, which
    are very useful when analyzing multiple binaries, automating tasks, or integrating
    Ghidra with other tools.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解 Ghidra 的非 GUI 功能，这些功能在分析多个二进制文件、自动化任务或将 Ghidra 与其他工具集成时非常有用。
- en: You've probably seen some films with hackers using black terminals with green
    font. There is some truth behind this stereotype. GUI applications are beautiful,
    user-friendly, and intuitive but they are also slow. After analyzing Ghidra headless
    mode, you will learn why shell applications and command line-based tools are the
    most efficient solution in a lot of cases.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能看过一些电影，里面的黑客使用黑色终端和绿色字体。这种刻板印象是有一定事实依据的。GUI 应用程序很美观，用户友好且直观，但它们也很慢。在分析 Ghidra
    无头模式之后，你将学到为什么 shell 应用程序和基于命令行的工具在许多情况下是最有效的解决方案。
- en: Headless Analyzer is a powerful command line-based (non-GUI) version of Ghidra,
    which will be introduced in this chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 无头分析器是 Ghidra 的一个强大的基于命令行（非 GUI）版本，本章将介绍它。
- en: In this chapter, we're going to learn why a command line-based tool is very
    useful in a lot of cases. We will learn how to use headless mode to populate projects
    and how to perform an analysis of existing binaries. We will also learn how to
    run non-GUI scripts (and GUI scripts that don't make use of GUI functionalities)
    in a project using Ghidra Headless Analyzer.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习为什么基于命令行的工具在许多情况下非常有用。我们将学习如何使用无头模式来填充项目，以及如何对现有的二进制文件进行分析。我们还将学习如何使用
    Ghidra 无头分析器在项目中运行非 GUI 脚本（以及不使用 GUI 功能的 GUI 脚本）。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Why use headless mode?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么使用无头模式？
- en: Creating and populating projects
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和填充项目
- en: Performing analysis on imported or existing binaries
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对导入或现有二进制文件进行分析
- en: Running non-GUI scripts in a project
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目中运行非 GUI 脚本
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code for this chapter can be found at [https://github.com/PacktPublishing/Ghidra-Software-Reverse-Engineering-for-Beginners/tree/master/Chapter07](https://github.com/PacktPublishing/Ghidra-Software-Reverse-Engineering-for-Beginners/tree/master/Chapter07).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在 [https://github.com/PacktPublishing/Ghidra-Software-Reverse-Engineering-for-Beginners/tree/master/Chapter07](https://github.com/PacktPublishing/Ghidra-Software-Reverse-Engineering-for-Beginners/tree/master/Chapter07)
    找到。
- en: 'Check out the following link to see the Code in Action video: [https://bit.ly/3oAM6Uy](https://bit.ly/3oAM6Uy)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下链接，观看《代码实战》视频：[https://bit.ly/3oAM6Uy](https://bit.ly/3oAM6Uy)
- en: Why use headless mode?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么使用无头模式？
- en: As previously said, non-GUI applications allow you to work faster because, generally
    speaking, it is faster to write a command than to perform a GUI operation such
    as clicking a menu option, and then filling in some form, and finally submitting
    it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面所说，非 GUI 应用程序可以让你工作得更快，因为通常来说，写一个命令比执行 GUI 操作（如点击菜单选项、填写表单然后提交）要快。
- en: On the other hand, non-GUI applications can be easily integrated with scripts,
    allowing you to apply a process to multiple binaries, integrate the application
    with other tools, and so on.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，非 GUI 应用程序可以很容易与脚本集成，使你能够将一个过程应用于多个二进制文件，将应用程序与其他工具集成，等等。
- en: Imagine you are analyzing some malware using Ghidra and then you identify an
    encrypted string containing the **Command and Control** (**C&C**) URL pointing
    to the server that controls the malware. Then, you are required to retrieve the
    C&C URLs of thousands of malware samples in order to sinkhole the domains, in
    other words, in order to deactivate thousands of malware samples.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在使用 Ghidra 分析一些恶意软件，然后你识别出一个包含 **命令与控制**（**C&C**） URL 的加密字符串，指向控制恶意软件的服务器。然后，你需要提取成千上万个恶意软件样本的
    C&C URL，以便对域名进行沉没，换句话说，以便停用成千上万个恶意软件样本。
- en: Given this situation, to load every malware sample into Ghidra and look for
    the C&C URL is not an option, even if you have developed a script to decrypt the
    C&C URL, because it will consume more time than necessary. It is in these cases
    where you will need to use Ghidra headless mode.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于这种情况，将每个恶意软件样本加载到 Ghidra 中并查找 C&C URL 不是一个选项，即使你已经开发了一个脚本来解密 C&C URL，因为它将消耗比必要更多的时间。在这些情况下，你将需要使用
    Ghidra 无头模式。
- en: 'Ghidra headless mode can be launched using the `analyzeHeadless.bat` and `analyzeHeadless`
    scripts (for Microsoft Windows and Linux/macOS operating systems, respectively)
    located in Ghidra''s `support` directory. The command syntax is the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Ghidra无头模式可以通过位于Ghidra`support`目录中的`analyzeHeadless.bat`和`analyzeHeadless`脚本（分别适用于Microsoft
    Windows和Linux/macOS操作系统）启动。命令语法如下：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As you can see, Ghidra headless mode can deal with both individual projects
    and shared projects, which must be specified as a `server` repository URL using
    the `ghidra://` protocol.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Ghidra无头模式既可以处理单独的项目，也可以处理共享项目，这些项目必须指定为`server`存储库URL，并使用`ghidra://`协议。
- en: Ghidra headless documentation
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Ghidra无头模式文档
- en: 'If you want to learn more about the details and parameters of Ghidra headless
    mode, please check out the offline documentation included in the Ghidra program
    distribution: [https://ghidra.re/ghidra_docs/analyzeHeadlessREADME.html](https://ghidra.re/ghidra_docs/analyzeHeadlessREADME.html).'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于Ghidra无头模式的细节和参数，请查看包含在Ghidra程序发行版中的离线文档：[https://ghidra.re/ghidra_docs/analyzeHeadlessREADME.html](https://ghidra.re/ghidra_docs/analyzeHeadlessREADME.html)。
- en: Most of the Ghidra headless mode parameters will be discussed in this chapter
    but more exhaustive information is available in the Ghidra headless mode documentation.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论大多数Ghidra无头模式参数，但更详尽的信息可在Ghidra无头模式文档中找到。
- en: Creating and populating projects
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建并填充项目
- en: The simplest operation that you can perform using Ghidra headless mode is to
    create a project containing a binary file.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Ghidra无头模式可以执行的最简单操作是创建一个包含二进制文件的项目。
- en: As we did in *Section 1*, *Getting Started with Ghidra*, let's create a new
    empty project (I will name it `MyFirstProject` and it will be located in the `C:\Users\virusito\projects`
    directory) containing a *hello world* binary file named `hello_world.exe`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在*第一部分*中所做的，*Ghidra入门*，让我们创建一个新的空项目（我将其命名为`MyFirstProject`，并将其放在`C:\Users\virusito\projects`目录中），该项目包含一个名为`hello_world.exe`的*hello
    world*二进制文件。
- en: Note
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Notice that the `C:\Users\virusito\projects` directory must exist as it will
    not be created for you. On the other hand, `MyFirstProject` will be created by
    Ghidra, so you don't need to create it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`C:\Users\virusito\projects`目录必须存在，因为它不会为你自动创建。另一方面，`MyFirstProject`将由Ghidra创建，因此你不需要手动创建它。
- en: Notice also that if the optional `[/<folder_path>]` folder path is included
    in the command, the import(s) will be rooted under this project folder.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，如果在命令中包含可选的`[/<folder_path>]`文件夹路径，则导入的内容将位于该项目文件夹下。
- en: 'Please execute the following lines to create the `MyFirstProject` Ghidra project
    located in the `C:\Users\virusito\projects` directory:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请执行以下命令来创建位于`C:\Users\virusito\projects`目录中的`MyFirstProject` Ghidra项目：
- en: '[PRE23]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You will see the following output:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '![Figure 7.1 – Using Ghidra headless mode to create a Ghidra project'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.1 – 使用Ghidra无头模式创建Ghidra项目'
- en: '](img/B16207_07_001.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16207_07_001.jpg)'
- en: Figure 7.1 – Using Ghidra headless mode to create a Ghidra project
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1 – 使用Ghidra无头模式创建Ghidra项目
- en: 'As shown in the `INFO` section of the output, some analysis was performed on
    the `hello_world.exe` file. You can omit the analysis by appending the `–noanalysis`
    flag to the previous command. The result of this Ghidra headless mode command
    is the following project:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如输出的`INFO`部分所示，已对`hello_world.exe`文件进行了分析。你可以通过在前面的命令中添加`–noanalysis`标志来省略分析。此Ghidra无头模式命令的结果是以下项目：
- en: '![Figure 7.2 – Ghidra project created using Ghidra headless mode'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.2 – 使用Ghidra无头模式创建的Ghidra项目'
- en: '](img/B16207_07_002.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16207_07_002.jpg)'
- en: Figure 7.2 – Ghidra project created using Ghidra headless mode
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2 – 使用Ghidra无头模式创建的Ghidra项目
- en: 'You can also add multiple binaries at once by using wildcard characters:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过使用通配符一次添加多个二进制文件：
- en: '`*` to match a sequence of characters used'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*`匹配一系列字符'
- en: '`?` to match a single character'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`?`匹配单个字符'
- en: '`[a-z]` to match a range of characters'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[a-z]`匹配一个字符范围'
- en: '`[!a-z]` to match when a range of characters does not appear'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[!a-z]`匹配当字符范围不出现时'
- en: 'For instance, we can create a project named `MyFirstProject` containing all
    the executable files that exist in the `hello_world` directory:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以创建一个名为`MyFirstProject`的项目，包含`hello_world`目录中所有的可执行文件：
- en: '[PRE26]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'It is also possible to specify some interesting flags:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以指定一些有趣的标志：
- en: Include the `-recursive` flag to analyze subfolders.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含`-recursive`标志以分析子文件夹。
- en: Include the `-overwrite` flag to overwrite existing files in the project when
    a conflict happens.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括`-overwrite`标志以在项目中存在冲突时覆盖现有文件。
- en: Include the `-readOnly` flag to not save imported files into the project.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括`-readOnly`标志以不将导入的文件保存到项目中。
- en: Include the `-deleteProject` flag to delete the project after scripts and/or
    analysis have been completed.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括`-deleteProject`标志以在脚本和/或分析完成后删除项目。
- en: Include the `-max-cpu <max cpu cores to use>` flag to limit the number of CPUs
    used during headless processing.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括`-max-cpu <max cpu cores to use>`标志以限制无头处理期间使用的CPU核心数。
- en: 'Include the `-okToDelete` flag to allow the program disposition when it is
    in `-process` mode to delete binaries of a project. The following options allow
    you to control program disposition:'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括`-okToDelete`标志以允许程序在`-process`模式下处理时删除项目的二进制文件。以下选项允许您控制程序处理方式：
- en: '- Use `HeadlessContinuationOption.ABORT` to abort scripts or analysis whose
    execution is to take place after this script.'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 使用`HeadlessContinuationOption.ABORT`来中止执行此脚本后执行的脚本或分析。'
- en: '- Use `HeadlessContinuationOption.ABORT_AND_DELETE` to act as `HeadlessContinuationOption.ABORT`
    but also delete the current (existing) program.'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 使用`HeadlessContinuationOption.ABORT_AND_DELETE`作为`HeadlessContinuationOption.ABORT`，但也删除当前（现有的）程序。'
- en: '- Use `HeadlessContinuationOption.CONTINUE_THEN_DELETE` to delete the (existing)
    program after processing it.'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 使用`HeadlessContinuationOption.CONTINUE_THEN_DELETE`在处理后删除（现有的）程序。'
- en: '- Use `HeadlessContinuationOption.CONTINUE` with analysis and/or scripts.'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 使用`HeadlessContinuationOption.CONTINUE`来进行分析和/或运行脚本。'
- en: Include `-loader <desired loader name>` to force the file to be imported using
    a specific loader.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括`-loader <desired loader name>`以强制使用特定加载器导入文件。
- en: Include `-processor <languageID>` and/or `-cspec <compilerSpecID>` to indicate
    the processor information and/or compiler specifications, respectively. Available
    languages and compiler specifications are both available in the `ghidra_x.x\Ghidra\Processors\proc_name\data\languages\*.ldefs`
    directory.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括`-processor <languageID>`和/或`-cspec <compilerSpecID>`以指示处理器信息和/或编译器规范。可用的语言和编译器规范都位于`ghidra_x.x\Ghidra\Processors\proc_name\data\languages\*.ldefs`目录中。
- en: Include `-log <path to log file>` to change the analysis and non-script logging
    information from the user's `application.log` directory file to a given log file
    path.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括`-log <path to log file>`以将用户的分析和非脚本日志信息从`application.log`目录文件更改为给定的日志文件路径。
- en: In this section, you learned how to create a project and how to populate it
    with binaries using headless mode. In the next section, you will learn how to
    perform analysis on the binaries of a Ghidra project.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您学习了如何使用无头模式创建项目并将其与二进制文件填充。在下一节中，您将学习如何对Ghidra项目的二进制文件执行分析。
- en: Performing analysis on imported or existing binaries
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在导入或现有二进制文件上执行分析
- en: 'As mentioned in the previous section, analysis is performed by default when
    creating a project. On the other hand, you can also run pre-/post-scripts (these
    kinds of scripts will be discussed later in this section) and/or analyze a given
    project using the following parameter:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在创建项目时，默认执行分析。另一方面，您还可以使用以下参数运行预处理/后处理脚本（这些类型的脚本将在本节后面讨论）和/或分析给定项目：
- en: '[PRE27]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'As an example, you can perform an analysis of the `hello_world.exe` file located
    in `MyFirstProject`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以对位于`MyFirstProject`中的`hello_world.exe`文件执行分析：
- en: '[PRE28]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Of course, you can also use wildcards and/or the `-recursive` flag when executing
    this command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行此命令时，您当然也可以使用通配符和/或`-recursive`标志。
- en: '[PRE29]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Note
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When importing files, make sure that the specified project is not already open
    in the Ghidra GUI.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入文件时，请确保指定的项目在Ghidra GUI中尚未打开。
- en: Also take into account that when importing in bulk, files starting with `.`
    are ignored.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 还要考虑到，批量导入时，以`.`开头的文件将被忽略。
- en: Apart from analyzing a single file or a set of files, you can also run scripts
    targeting these files.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 除了分析单个文件或一组文件之外，您还可以运行针对这些文件的脚本。
- en: 'In fact, the kinds of scripts you are running are named according to the analysis
    time:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，您正在运行的脚本类型是根据分析时间命名的：
- en: '**Pre-scripts**: These kinds of scripts will be executed before the analysis.
    The syntax is the following:'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**前处理脚本**：这些类型的脚本将在分析之前执行。语法如下：'
- en: '[PRE30]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '**Post-scripts**: These kinds of scripts will be executed after the analysis.
    The syntax is the following:'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后处理脚本**：这些类型的脚本将在分析之后执行。语法如下：'
- en: '[PRE31]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'When executing a pre-/post-script, as you can see in the syntax, you only need
    to provide the name of the script instead of a full path. This is because the
    script will be searched for in `$USER_HOME/ghidra_scripts`. You can modify this
    behavior by configuring a list of paths separated by a `;` character:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前/后脚本时，如你在语法中所见，你只需要提供脚本的名称，而不是完整路径。这是因为脚本会在 `$USER_HOME/ghidra_scripts` 中进行查找。你可以通过配置用
    `;` 字符分隔的路径列表来修改此行为：
- en: '[PRE32]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Also notice that for Linux systems, you need to escape the backslash character:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 还请注意，对于 Linux 系统，你需要转义反斜杠字符：
- en: '[PRE33]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Paths must start with `$GHIDRA_SCRIPT` (corresponding to the Ghidra installation
    directory) or `$GHIDRA_HOME` (corresponding to the user's home directory).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 路径必须以 `$GHIDRA_SCRIPT`（对应 Ghidra 安装目录）或 `$GHIDRA_HOME`（对应用户主目录）开头。
- en: Setting an analysis timeout
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 设置分析超时
- en: 'You can set an analysis timeout to interrupt the analysis if it is taking too
    long. To do that, use the following syntax: `-analysisTimeoutPerFile <timeout
    in seconds>`.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以设置分析超时，以便在分析花费太长时间时中断分析。为此，请使用以下语法：`-analysisTimeoutPerFile <超时秒数>`。
- en: When the timeout is reached, the analysis is interrupted and the post-scripts
    are executed as scheduled. Post-scripts can check whether the analysis was interrupted
    via the `getHeadlessAnalysisTimeoutStatus()` method.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当达到超时时，分析会被中断，后续脚本会按计划执行。后续脚本可以通过 `getHeadlessAnalysisTimeoutStatus()` 方法检查分析是否被中断。
- en: 'It is also possible to specify some interesting options:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以指定一些有趣的选项：
- en: 'Set the path where `*.properties` files used by scripts or secondary subscripts
    exist. Note that paths must start with `$GHIDRA_SCRIPT`:'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 `*.properties` 文件所在的路径，这些文件由脚本或次级子脚本使用。请注意，路径必须以 `$GHIDRA_SCRIPT` 开头：
- en: '[PRE34]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Set the path where the script logging information will be written:'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置脚本日志信息的输出路径：
- en: '[PRE35]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Now that you know what kinds of scripts exist in Ghidra, next, we will go over
    how to implement and run them in a Ghidra project.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你了解了 Ghidra 中有哪些脚本，接下来，我们将讨论如何在 Ghidra 项目中实现并运行它们。
- en: Running non-GUI scripts in a project
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在项目中运行非图形界面脚本
- en: As mentioned before, you can use Ghidra headless mode to run scripts before
    and after the analysis of a file (pre-scripts and post-scripts, respectively).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，你可以使用 Ghidra 的无头模式在文件分析之前和之后运行脚本（分别为前脚本和后脚本）。
- en: As you know, non-GUI scripts run without human interaction, so it is recommended
    to write a headless script extending from the `HeadlessScript` class that, at
    the same time, extends from the already-known `GhidraScript` class.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，非图形界面脚本无需人工交互，因此建议编写一个扩展自 `HeadlessScript` 类的无头脚本，同时它也扩展自已经熟悉的 `GhidraScript`
    类。
- en: But extending from `HeadlessScript` is not a must. You can write a headed script
    extending from the `GhidraScript` class directly and it will also work when running
    in headless mode, but if some GUI-specific method is called, then `ImproperUseException`
    will be thrown.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 但扩展自 `HeadlessScript` 不是必须的。你可以直接编写一个扩展自 `GhidraScript` 类的图形界面脚本，当在无头模式下运行时也能正常工作，但如果调用了一些特定于
    GUI 的方法，则会抛出 `ImproperUseException`。
- en: A similar thing happens in reverse. When a script extending from `HeadlessScript`
    is running on Ghidra headed mode, if a `HeadlessScript`-only method is called,
    an exception will also be thrown.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 反过来也有类似的情况。当一个扩展自 `HeadlessScript` 的脚本在 Ghidra 的图形界面模式下运行时，如果调用了一个仅限 `HeadlessScript`
    的方法，也会抛出异常。
- en: 'Let''s adapt an existing Ghidra script currently extending from `GhidraScript`
    in order to extend from `HeadlessScript` and see how it works and how it can be
    useful in practice (the `Apache License, Version 2.0` header was omitted for brevity):'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们适配一个现有的 Ghidra 脚本，当前它扩展自 `GhidraScript`，使其扩展自 `HeadlessScript`，并观察它是如何工作的，以及它如何在实践中发挥作用（为简洁起见，`Apache
    License, Version 2.0` 头部已省略）：
- en: '[PRE36]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'We can perform the following optional modifications:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以进行以下可选修改：
- en: Replace `import ghidra.app.script.GhidraScript` with `ghidra.app.util.headless.HeadlessScript`.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `import ghidra.app.script.GhidraScript` 替换为 `ghidra.app.util.headless.HeadlessScript`。
- en: Extend from `HeadlessScript` instead of `GhidraScript`.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继承自 `HeadlessScript` 而不是 `GhidraScript`。
- en: Rename the `FindTextScript` class to `HeadlessFindTextScript`.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `FindTextScript` 类重命名为 `HeadlessFindTextScript`。
- en: 'We need to perform the following mandatory modifications:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要执行以下强制修改：
- en: 'To pass a parameter to an `askXxx()` method such as `askString()`, you will
    need to create an `*.properties` file. So, let''s create a `HeadlessFindTextScript.properties`
    file containing the required string:'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要将参数传递给 `askXxx()` 方法（如 `askString()`），你需要创建一个 `*.properties` 文件。因此，让我们创建一个
    `HeadlessFindTextScript.properties` 文件，其中包含所需的字符串：
- en: '[PRE66]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Print out the string value, not just its address:'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出字符串值，而不仅仅是其地址：
- en: '[PRE67]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'This is the result after the mentioned modifications were applied to the original
    script (the `Apache License, Version 2.0` header was omitted for brevity):'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在对原始脚本应用上述修改后的结果（`Apache License, Version 2.0` 头部已省略以简化展示）：
- en: '[PRE68]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Now, we can try this post-script over a set of random malware samples. **Please
    ensure you fully understand the risks of analyzing malware before you continue
    reading.**
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以尝试将这个后处理脚本应用于一组随机的恶意软件样本。**请确保在继续阅读之前完全理解分析恶意软件的风险。**
- en: The risks of analyzing malware
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 分析恶意软件的风险
- en: When analyzing malware, your computer and network are at risk (you cannot reduce
    the risk to zero but can try to get it to almost zero). To avoid this risk, we
    covered how to set up a reasonably safe malware analysis environment in [*Chapter
    5*](B16207_05_Final_SK_ePub.xhtml#_idTextAnchor082), *Reversing Malware Using
    Ghidra*, for the purposes of the chapter.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析恶意软件时，你的计算机和网络会面临风险（无法将风险降至零，但可以尽量将其降到接近零）。为了避免这种风险，我们在 [*第 5 章*](B16207_05_Final_SK_ePub.xhtml#_idTextAnchor082)《使用
    Ghidra 反向分析恶意软件》中，介绍了如何设置一个合理安全的恶意软件分析环境，作为本章的目的。
- en: 'Since, in this case, you will need an internet connection to download samples,
    I recommend you learn how to set up an isolated malware lab using the following
    resources: https://archive.org/details/Day1Part10DynamicMalwareAnalysis and [https://blog.christophetd.fr/malware-analysis-lab-with-virtualbox-inetsim-and-burp/](https://blog.christophetd.fr/malware-analysis-lab-with-virtualbox-inetsim-and-burp/).'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在此情况下你需要互联网连接来下载样本，建议你学习如何使用以下资源设置一个隔离的恶意软件实验室： https://archive.org/details/Day1Part10DynamicMalwareAnalysis
    和 [https://blog.christophetd.fr/malware-analysis-lab-with-virtualbox-inetsim-and-burp/](https://blog.christophetd.fr/malware-analysis-lab-with-virtualbox-inetsim-and-burp/)。
- en: 'To do so, start by executing the script that downloads all malware samples
    listed in this malware sample database, [https://das-malwerk.herokuapp.com/](https://das-malwerk.herokuapp.com/),
    generating two directories:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，首先执行下载该恶意软件样本数据库中所有恶意软件样本的脚本，[https://das-malwerk.herokuapp.com/](https://das-malwerk.herokuapp.com/)，生成两个目录：
- en: '`compressed_malware_samples`, where malware samples are downloaded.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compressed_malware_samples`，恶意软件样本已被下载。'
- en: '`decompressed_malware_samples`, where malware samples are uncompressed and
    decrypted by a 7Z decompressor using the password `infected`. Malware samples
    are, by convention, encrypted using the mentioned password.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decompressed_malware_samples`，恶意软件样本经过 7Z 解压缩工具解压并用密码 `infected` 解密。恶意软件样本通常使用上述密码进行加密。'
- en: 'The script to download all malware samples is the following:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 用于下载所有恶意软件样本的脚本如下：
- en: '[PRE100]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'This is what the output looks like:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是输出的样子：
- en: '![Figure 7.3 – Downloading malware samples'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.3 – 下载恶意软件样本'
- en: '](img/B16207_07_003.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16207_07_003.jpg)'
- en: Figure 7.3 – Downloading malware samples
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – 下载恶意软件样本
- en: 'In order to execute the script over this set of malware samples, we can use
    the following command:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在这组恶意软件样本上执行脚本，我们可以使用以下命令：
- en: '[PRE127]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'The `http://` string, as specified in `HeadlessFindTextScript.properties`,
    is matched once at `0x004c96d8`:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://` 字符串，在 `HeadlessFindTextScript.properties` 中指定的，是在 `0x004c96d8` 处匹配到的：'
- en: '![Figure 7.4 – Finding the http:// string occurrences in malware samples'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.4 – 查找恶意软件样本中的 http:// 字符串出现位置'
- en: '](img/B16207_07_004.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16207_07_004.jpg)'
- en: Figure 7.4 – Finding the http:// string occurrences in malware samples
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4 – 查找恶意软件样本中的 http:// 字符串出现位置
- en: 'Let''s check whether this finding is correct using Ghidra headed mode. To do
    this, open the `C:\Users\virusito\projects\MalwareSampleSetProject.gpr` project
    and then open the malware sample file where the `http://` string was found:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 Ghidra 的头模式检查这个发现是否正确。为此，打开 `C:\Users\virusito\projects\MalwareSampleSetProject.gpr`
    项目，然后打开找到 `http://` 字符串的恶意软件样本文件：
- en: '![Figure 7.5 – Openning the malware sample with Ghidra''s CodeBrowser'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.5 – 使用 Ghidra 的 CodeBrowser 打开恶意软件样本'
- en: '](img/B16207_07_005.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16207_07_005.jpg)'
- en: Figure 7.5 – Openning the malware sample with Ghidra's CodeBrowser
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5 – 使用 Ghidra 的 CodeBrowser 打开恶意软件样本
- en: 'Go to the matched address using the *G* hotkey:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 *G* 热键前往匹配的地址：
- en: '![Figure 7.6 – Going to the 0x004c96d8 address using Ghidra headed mode'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.6 – 使用 Ghidra 头模式前往 0x004c96d8 地址'
- en: '](img/B16207_07_006.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16207_07_006.jpg)'
- en: Figure 7.6 – Going to the 0x004c96d8 address using Ghidra headed mode
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6 – 使用 Ghidra 有头模式跳转到 0x004c96d8 地址
- en: 'You will see the string pointed to by this memory address:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到这个内存地址指向的字符串：
- en: '![](img/B16207_07_007.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16207_07_007.jpg)'
- en: Figure 7.7 – Showing the http:// string occurrence in the 0x004c96d8 address
    using Ghidra headed mode
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.7 – 使用 Ghidra 有头模式显示 0x004c96d8 地址中的 http:// 字符串出现情况
- en: Since the string shown in headed mode matches the result of the script, we have
    confirmed that it is working as expected. As you can see, it is very easy to automate
    the analysis of multiple binaries using Ghidra headless mode.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在有头模式下显示的字符串与脚本结果一致，我们已经确认其按预期工作。如你所见，使用 Ghidra 无头模式自动化分析多个二进制文件非常简单。
- en: Summary
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to use Ghidra headless mode to analyze multiple
    binaries and automate tasks. We started by reviewing the most relevant parameters
    of Ghidra headless mode and then started to apply this knowledge with practical
    examples.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何使用 Ghidra 无头模式分析多个二进制文件并自动化任务。我们从回顾 Ghidra 无头模式的最相关参数开始，然后通过实际示例应用这些知识。
- en: We learned how to create a project, populate it with binaries, analyze it, and
    run pre-/post-scripts over these binaries. We also learned that is possible to
    execute a GUI script in headless mode and a non-GUI script in headed mode, as
    well as the exceptions that can occur and why.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何创建一个项目，向其中添加二进制文件，进行分析，并在这些二进制文件上运行前后脚本。我们还了解到，可以在无头模式下执行图形界面脚本，在有头模式下执行非图形界面脚本，并且可以发生的异常及其原因。
- en: In the next chapter of this book, we will cover binary audits using Ghidra.
    We will take this opportunity to review the different kinds of memory corruption
    vulnerabilities, how to hunt them, and how to exploit them.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的下一章中，我们将介绍使用 Ghidra 进行二进制审计。我们将借此机会回顾不同类型的内存损坏漏洞、如何追踪它们以及如何利用这些漏洞。
- en: Questions
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Since it is possible to execute headed scripts in headless mode, why do you
    need to program headless mode scripts?
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 既然可以在无头模式下执行有头脚本，为什么还需要编写无头模式脚本？
- en: When is it appropriate to use Ghidra in headless mode and when should you use
    Ghidra in headed mode?
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么时候应该使用 Ghidra 无头模式，什么时候应该使用 Ghidra 有头模式？
- en: What is the difference between looking for strings in a binary file using Ghidra
    and looking for them using a command tool such as `grep` or `strings`?
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Ghidra 查找二进制文件中的字符串与使用 `grep` 或 `strings` 等命令工具查找它们有什么区别？
- en: Further reading
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can refer to the following links for more information on the topics covered
    in this chapter:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以参考以下链接获取有关本章所涉及主题的更多信息：
- en: 'Headless Analyzer documentation: [https://ghidra.re/ghidra_docs/analyzeHeadlessREADME.html](https://ghidra.re/ghidra_docs/analyzeHeadlessREADME.html)'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无头分析器文档：[https://ghidra.re/ghidra_docs/analyzeHeadlessREADME.html](https://ghidra.re/ghidra_docs/analyzeHeadlessREADME.html)
- en: 'Headless Analyzer course: [https://ghidra.re/courses/GhidraClass/Intermediate/HeadlessAnalyzer.html](https://ghidra.re/courses/GhidraClass/Intermediate/HeadlessAnalyzer.html)'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无头分析器课程：[https://ghidra.re/courses/GhidraClass/Intermediate/HeadlessAnalyzer.html](https://ghidra.re/courses/GhidraClass/Intermediate/HeadlessAnalyzer.html)
- en: 'Web server exposing Ghidra analysis via Ghidra headless mode: [https://github.com/Cisco-Talos/Ghidraaas](https://github.com/Cisco-Talos/Ghidraaas)'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 Ghidra 无头模式暴露 Ghidra 分析的 Web 服务器：[https://github.com/Cisco-Talos/Ghidraaas](https://github.com/Cisco-Talos/Ghidraaas)
