- en: Investigating Good, Known, and Ugly Malware
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调查良性、已知和恶性的恶意软件
- en: This chapter is all about investigating malware in the context of network forensics.
    Most of the incidents requiring network forensics will be based on malware-oriented
    events, such as network breaches, financial crime, data theft, and command and
    control. Most of the attackers will deploy command and control malware to enslave
    the compromised machine and gain leverage over the internal network for lateral
    movement. Generally, network forensics and computer forensics go hand in hand
    in case of investigating malware. The computer forensics investigator will find
    all that has changed on the system and where the malware resides in the system.
    Then, they will find the executables causing the issues and upload them to a site,
    such as [https://www.virustotal.com](https://www.virustotal.com) or [http://www.hybrid-analysis.com](http://www.hybrid-analysis.com),
    to find more about the malware and its behavior on the system and the network.
    In cases of novice attackers using symmetric key encryption to encrypt data on
    the wire, the forensic investigator will get the malware reverse-engineered by
    a malware analyst and decrypt the traffic accordingly.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要讲解在网络取证的背景下调查恶意软件。大多数需要网络取证的事件都会基于恶意软件相关的事件，例如网络入侵、金融犯罪、数据盗窃和命令与控制。大多数攻击者会部署命令与控制恶意软件，以控制被攻陷的计算机，并在内部网络中获得横向移动的杠杆。一般来说，在调查恶意软件时，网络取证与计算机取证是密切相关的。计算机取证调查员将找出系统中发生了哪些变化，以及恶意软件在系统中的位置。然后，他们会找到导致问题的可执行文件，并将其上传到如[https://www.virustotal.com](https://www.virustotal.com)或[http://www.hybrid-analysis.com](http://www.hybrid-analysis.com)等网站，以进一步了解恶意软件及其在系统和网络中的行为。如果是新手攻击者使用对称密钥加密数据传输，取证调查员将通过恶意软件分析员对恶意软件进行反向工程，并相应地解密流量。
- en: 'In this chapter, we will cover malware identification and analysis based on
    the techniques learned in the previous chapters. We will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍基于前几章所学技术的恶意软件识别与分析。我们将涵盖以下内容：
- en: Dissecting malware on the network
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在网络上剖析恶意软件
- en: Intercepting malware for fun and profit
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拦截恶意软件以获取乐趣和利润
- en: Behavior patterns and analysis
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行为模式与分析
- en: A real-world case study—investigating a banking Trojan on the network
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个真实案例研究——调查网络中的银行木马
- en: In the first example, we will look at a famous Trojan horse and will try to
    make sense of what could have happened. While in the further examples, we will
    look at how we can decrypt ransomware encrypted files by making use of evidence
    in the PCAP. Finally, we will look at how we can analyze a banking Trojan by making
    use of popular malware analysis websites. Working on the first example, we already
    assume that a system on the network was infected. You can download the PCAP from
    the R3MRUM's GitHub repository at [https://github.com/R3MRUM/loki-parse/blob/master/loki-bot_network_traffic.pcap](https://github.com/R3MRUM/loki-parse/blob/master/loki-bot_network_traffic.pcap).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个示例中，我们将研究一个著名的特洛伊木马，并尝试弄清楚可能发生了什么。后续示例中，我们将展示如何利用 PCAP 中的证据解密勒索软件加密的文件。最后，我们将展示如何利用流行的恶意软件分析网站分析一个银行木马。在第一个示例中，我们已经假设网络中的一台系统已被感染。你可以从
    R3MRUM 的 GitHub 仓库下载 PCAP：[https://github.com/R3MRUM/loki-parse/blob/master/loki-bot_network_traffic.pcap](https://github.com/R3MRUM/loki-parse/blob/master/loki-bot_network_traffic.pcap)。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To complete exercises covered in this chapter, you will require the following
    software and OS:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章中的练习需要以下软件和操作系统：
- en: Wireshark v3.0.0 ([https://www.wireshark.org/download.html](https://www.wireshark.org/download.html))
    installed on Windows 10 OS and Ubuntu 14.04
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 10 和 Ubuntu 14.04 上安装 Wireshark v3.0.0 ([https://www.wireshark.org/download.html](https://www.wireshark.org/download.html))
- en: PCAP Files for the exercises ([https://github.com/nipunjaswal/networkforensics/tree/master/Ch6](https://github.com/nipunjaswal/networkforensics/tree/master/Ch6))
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 练习用 PCAP 文件 ([https://github.com/nipunjaswal/networkforensics/tree/master/Ch6](https://github.com/nipunjaswal/networkforensics/tree/master/Ch6))
- en: NetworkMiner ([https://www.netresec.com/?page=networkminer](https://www.netresec.com/?page=networkminer))
    installed on Windows 10
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 10 上安装 NetworkMiner ([https://www.netresec.com/?page=networkminer](https://www.netresec.com/?page=networkminer))
- en: 'Required third-party tools:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所需的第三方工具：
- en: Hidden Tear Decryptor ([https://github.com/goliate/hidden-tear](https://github.com/goliate/hidden-tear))
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hidden Tear 解密工具 ([https://github.com/goliate/hidden-tear](https://github.com/goliate/hidden-tear))
- en: PyLocky Decryptor ([https://github.com/Cisco-Talos/pylocky_decryptor](https://github.com/Cisco-Talos/pylocky_decryptor))
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyLocky 解密器 ([https://github.com/Cisco-Talos/pylocky_decryptor](https://github.com/Cisco-Talos/pylocky_decryptor))
- en: Dissecting malware on the network
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络上恶意软件的剖析
- en: 'Let''s load the PCAP in Wireshark as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按以下方式在 Wireshark 中加载 PCAP 文件：
- en: '![](img/6e1e0552-d86d-4883-a555-8f8228c36837.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e1e0552-d86d-4883-a555-8f8228c36837.png)'
- en: 'We can see that there is a lot of HTTP data present in the PCAP file. Let''s
    add columns to display the full **URI** and **User-Agen**t entries, and also filter
    the requests using the `http.request.uri` filter as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，PCAP 文件中包含了大量 HTTP 数据。让我们添加列以显示完整的 **URI** 和 **User-Agent** 条目，并使用 `http.request.uri`
    过滤器如以下方式过滤请求：
- en: '![](img/ddbac085-6331-43e3-a8ee-7bf23a760c21.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ddbac085-6331-43e3-a8ee-7bf23a760c21.png)'
- en: 'The user-agent is quite important in malware communications, since they might
    not be the standard user-agents used by popular browsers. We can see we have Mozilla/4.08
    (Charon; Inferno) as the user-agent, and URI contains a single user, as shown
    in the previous screenshot. Let''s investigate this user-agent on Google as shown
    in the following screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 用户代理在恶意软件通信中非常重要，因为它们可能不是流行浏览器使用的标准用户代理。我们可以看到，用户代理是 Mozilla/4.08（Charon；Inferno），并且
    URI 包含一个单独的用户，如前面的截图所示。让我们像下面的截图那样在 Google 上调查这个用户代理：
- en: '![](img/381d886b-42c0-4df5-8b78-8da1110999fd.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/381d886b-42c0-4df5-8b78-8da1110999fd.png)'
- en: 'It seems that the HTTP requests are generated by the nefarious LokiBot, a popular
    malware that infiltrates data on the infected systems. Open the third link from
    the preceding results which is from [https://packettotal.com](https://packettotal.com)
    and analyze similar samples:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来这些 HTTP 请求是由恶意的 LokiBot 生成的，这是一种流行的恶意软件，会在感染的系统上窃取数据。打开前面结果中的第三个链接，该链接来自
    [https://packettotal.com](https://packettotal.com)，并分析类似的样本：
- en: '![](img/a90cc93a-71e9-4dc0-9b3b-dff9ee47d768.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a90cc93a-71e9-4dc0-9b3b-dff9ee47d768.png)'
- en: We can see that there have been numerous entries with similar behavior. The
    important items from the preceding list are the HTTP Method and the User-Agent
    columns. Let's study this malware a bit more by reading [https://forums.juniper.net/t5/Security/A-look-into-LokiBot-infostealer/ba-p/315265](https://forums.juniper.net/t5/Security/A-look-into-LokiBot-infostealer/ba-p/315265)
    and [https://r3mrum.wordpress.com/2017/07/13/loki-bot-inside-out/](https://r3mrum.wordpress.com/2017/07/13/loki-bot-inside-out/).
    We can see that there is plenty to read on the LokiBot analysis. The takeaway
    for us from the previous links is that the first-byte word of the HTTP payload
    is the LokiBot Version. Let's see what it is by making use of  `tshark –r /home/deadlist/Desktop/loki-bot_network_traffic.pcap
    -2 –R http.request.uri –Tfields –e ip.dst –e http.request.full_uri –e http.user_agent
    –e data –E separator=, | cut –c1-91` command. The command will read the PCAP file
    defined using the X switch and will display all packets having the URI using `http.request.uri`
    filter. The command will print comma separated values (`-E separator=,`) of fields
    like destination IP, full URI, User-Agent and Data (`-Tfields`).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到有许多具有相似行为的条目。前面列表中的重要项目是 HTTP 方法和 User-Agent 列。让我们通过阅读 [https://forums.juniper.net/t5/Security/A-look-into-LokiBot-infostealer/ba-p/315265](https://forums.juniper.net/t5/Security/A-look-into-LokiBot-infostealer/ba-p/315265)
    和 [https://r3mrum.wordpress.com/2017/07/13/loki-bot-inside-out/](https://r3mrum.wordpress.com/2017/07/13/loki-bot-inside-out/)
    来进一步研究这个恶意软件。我们可以看到，LokiBot 分析有很多内容需要阅读。从前面的链接中，我们得到的关键点是 HTTP 负载的首字节是 LokiBot
    的版本。让我们通过使用 `tshark –r /home/deadlist/Desktop/loki-bot_network_traffic.pcap -2
    –R http.request.uri –Tfields –e ip.dst –e http.request.full_uri –e http.user_agent
    –e data –E separator=, | cut –c1-91` 命令来查看它是什么。该命令将读取使用 X 开关定义的 PCAP 文件，并显示所有具有
    URI 的数据包，使用 `http.request.uri` 过滤器。命令将打印以逗号分隔的值（`-E separator=,`），如目标 IP、完整 URI、User-Agent
    和数据（`-Tfields`）。
- en: 'Since the last value is of the data field, the use of `cut –c1-91` will print
    the first two bytes (Byte Word) of the data only as shown in the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于最后一个值是数据字段，因此使用 `cut –c1-91` 将仅打印数据的前两个字节（字节单词），如下面的截图所示：
- en: '![](img/7ffae229-20f8-4caa-9b48-99f3b50a4138.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7ffae229-20f8-4caa-9b48-99f3b50a4138.png)'
- en: 'We can see the first-byte word is 1200, which implies 00 12(18) being divided
    by 10, which means that we have the LokiBot version 1.8\. Have a look at the following
    screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，首字节是 1200，这意味着 00 12（18）被 10 除，因此我们得到 LokiBot 版本为 1.8。请看下面的截图：
- en: '![](img/58c1b816-8719-4035-8660-b42b2feca6ad.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/58c1b816-8719-4035-8660-b42b2feca6ad.png)'
- en: 'We can see that, in the next word (the next two bytes), we have hexadecimal
    values of 27, 28, and 2b, and, according to the information that we have read,
    this value defines the functionality of the packet and a value 27 implies Exfiltrate
    Application/Credential Data, 28 implies Get C2 commands, and 2b implies Exfiltrate
    Keylogger Data. This means that the LokiBot has done the following activities
    in order:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，在下一个词（接下来的两个字节）中，我们有十六进制值27、28和2b，根据我们读到的信息，这些值定义了数据包的功能，值27表示外泄应用程序/凭据数据，28表示获取C2命令，2b表示外泄键盘记录器数据。这意味着LokiBot按照以下顺序进行了以下活动：
- en: Exfiltrated an application's credential data twice
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外泄了一个应用程序的凭据数据两次
- en: Made the new command, which was to exfiltrate key logger data
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发出了新命令，即外泄键盘记录器数据
- en: Sent keylogger data
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送了键盘记录器数据
- en: 'Finally, let''s have a look at the data we have got so far:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们来看看我们到目前为止获得的数据：
- en: '**The infected system**: `172.16.0.130`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**感染的系统**：`172.16.0.130`'
- en: '**The command and control server**: `185.141.27.187`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令与控制服务器**：`185.141.27.187`'
- en: '**Malware used**: LokiBot'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用的恶意软件**：LokiBot'
- en: '**Malware detection**: User-Agent, HTTP Method (POST)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**恶意软件检测**：用户代理，HTTP方法（POST）'
- en: '**Malware activities**: Application data exfiltration and keylogging'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**恶意软件活动**：应用程序数据外泄和键盘记录'
- en: Having basic information about the malware, let's dive deep into finding more
    information about the exfiltrated data by understanding its patterns in the next
    section.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 了解了恶意软件的基本信息后，让我们深入探讨，通过了解其模式来找到更多有关外泄数据的信息。
- en: Finding network patterns
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找网络模式
- en: 'We know that the malware is stealing some application data, but we don''t know
    which application it is and what data was stolen. Let''s try to find this out
    by viewing the HTTP payload in the packet bytes (lowest pane) pane of standard
    Wireshark display as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道该恶意软件正在窃取某些应用程序数据，但我们不知道具体是哪个应用程序以及哪些数据被窃取了。让我们尝试通过查看标准Wireshark显示中的HTTP负载（最低面板）来找出这些信息，具体如下：
- en: '![](img/71099d89-d91d-4360-89f4-ac8165df0563.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/71099d89-d91d-4360-89f4-ac8165df0563.png)'
- en: 'We can see from the preceding screenshot that the payload started with LokiBot
    version 18 in Decimal (12 in Hexadecimal) , and we need to divide that by 10 to
    get the exact version. Next, we had 27 as the identifier for data exfiltration
    on application credentials. Next, the first word denotes a width of zero, denoting
    that the payload value will be unpacked as a normal string. Next, we have a word
    value that denotes a length of 0a, which is 10 in decimal. We can see that we
    have a length of 10 bytes denoting the binary ID, which is XXXXX11111\. Again,
    we have the next width and length, which will denote the system username; we can
    see we have a width of one and length of six. Since we have a width of one, we
    will unpack this data as hex. Therefore, at two bytes each, we have the username
    that is REM. Next, we have the system name, and again width is 1 and length is
    1c, denoting 28\. The next 28 bytes indicate that the infected system name is
    `REMWORKSTATION.` Following the same notation for the values, the next value shows
    the domain, which is, again `REMWORKSTATION`. Let''s look at the next hex section
    as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的截图中，我们可以看到负载从LokiBot版本18（十进制，16进制为12）开始，我们需要将其除以10来获取准确的版本号。接下来，我们看到27是应用程序凭据数据外泄的标识符。接着，第一个词表示宽度为零，意味着负载值将作为普通字符串解包。然后，我们有一个词值表示长度为0a，也就是十进制的10。我们可以看到长度为10字节，表示二进制ID为XXXXX11111。接下来，我们看到下一个宽度和长度，这将表示系统用户名；我们看到宽度为1，长度为6。由于宽度为1，我们将以十六进制解包此数据。因此，每两个字节我们得到用户名为REM。接下来，我们看到系统名称，宽度为1，长度为1c，表示28。接下来的28字节表示感染的系统名称是`REMWORKSTATION`。按照相同的标记法，接下来的值表示域名，仍然是`REMWORKSTATION`。让我们看看下一个十六进制部分：
- en: '![](img/92a8d0dc-6843-4ccc-8345-02fd0b711e69.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/92a8d0dc-6843-4ccc-8345-02fd0b711e69.png)'
- en: 'We have the next four bytes as the Screen Width and the following four as Screen
    Height. We have a check on local admin and built-in admin, and the preceding screenshot
    shows that, in the next four bytes, both are showing a one, indicating a yes.
    The next two bytes are set to one if the OS is 64 bit, which is not the case,
    so it''s set to zero. The next eight bytes define the OS major and OS minor products
    and the `os_bug` patch variables, which are `6,3,1,107` respectively. This means
    that we can denote the OS as `6.3.1.107`, which is Windows 8\. Additionally, the
    values stored here are in the little-endian format that means last significant
    byte is the first. In the next section, we have the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来四个字节是屏幕宽度，紧接着的四个字节是屏幕高度。我们检查了本地管理员和内建管理员，前面的截图显示，在接下来的四个字节中，两者的值都是1，表示是的。接下来的两个字节如果操作系统是64位，则值设为1，但由于不是64位系统，所以设置为0。接下来的八个字节定义了操作系统的主版本号和次版本号，以及`os_bug`补丁变量，分别为`6,3,1,107`。这意味着我们可以将操作系统表示为`6.3.1.107`，即Windows
    8。此外，这里存储的值是小端格式，意味着最低有效字节在最前面。在接下来的部分，我们有以下内容：
- en: '![](img/ddb07b33-60d9-4332-9346-d98a33355467.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ddb07b33-60d9-4332-9346-d98a33355467.png)'
- en: 'We can see the next two bytes as the value denoting the first-time connection
    as a zero. This means that the victim has connected for the first time. Next,
    two bytes denote that the data stolen is compressed, while the following two bytes
    define whether the stolen data is encoded or not, and following up these two bytes
    are another two bytes defining the encoding type. The next four bytes denote the
    original stolen data''s length, which is 8,545 bytes. A separator is in between,
    and we again have the width and length for the string:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到接下来的两个字节是表示首次连接的值为零。这意味着受害者是第一次连接。接下来，两个字节表示被窃取的数据是经过压缩的，而接下来的两个字节则定义了被窃取的数据是否已编码，紧随其后的这两个字节定义了编码类型。接下来的四个字节表示原始被窃取数据的长度，为8,545字节。中间有一个分隔符，接下来是字符串的宽度和长度：
- en: '![](img/269d3643-78d8-4f6c-895a-5db9036bc712.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/269d3643-78d8-4f6c-895a-5db9036bc712.png)'
- en: 'As shown in the preceding screenshot, we have a 48-byte-long mutex value used
    by the LokiBot. Next, LokiBot uses this mutex as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，我们有一个48字节长的互斥量（mutex）值，用于LokiBot。接下来，LokiBot按照以下方式使用该互斥量：
- en: 'Mutex: `B7E1C2CC98066B250DDB2123`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互斥量：`B7E1C2CC98066B250DDB2123`
- en: 'Based on this value, the LokiBot''s files will be located in the following
    locations:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这个值，LokiBot的文件将位于以下位置：
- en: 'Hash Database: `"%APPDATA%\\C98066\\6B250D.hdb"`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哈希数据库：`"%APPDATA%\\C98066\\6B250D.hdb"`
- en: 'Keylogger Database: `"%APPDATA%\\C98066\\6B250D.kdb"`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 键盘记录数据库：`"%APPDATA%\\C98066\\6B250D.kdb"`
- en: 'Lock File: `"%APPDATA%\\C98066\\6B250D.lck"`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锁定文件：`"%APPDATA%\\C98066\\6B250D.lck"`
- en: 'Malware Exe: `"%APPDATA%\\C98066\\6B250D.exe"`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恶意软件执行文件：`"%APPDATA%\\C98066\\6B250D.exe"`
- en: If we observe closely we can see that the directory name starts from 8^(th)
    character to 13^(th) character of the Mutex while file name starts from 13^(th)
    character to 18^(th) character.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们仔细观察，可以看到目录名从互斥量的第8个字符到第13个字符，而文件名则从第13个字符到第18个字符。
- en: 'Well! That was too much information traveling on the network. Let''s see what''s
    next:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧！这网络上传输了太多信息。接下来看看是什么：
- en: '![](img/f6f60284-6e27-4be3-8016-b730cda979be.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f6f60284-6e27-4be3-8016-b730cda979be.png)'
- en: 'Next, we have the key length, the key itself, and length of compressed data.
    We now know that the length of the compressed data is 2,310 bytes, which looks
    like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是密钥长度、密钥本身以及压缩数据的长度。我们现在知道压缩数据的长度是2,310字节，具体如下所示：
- en: '![](img/087a5df5-471b-45a6-8558-e063fa3f7cc8.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/087a5df5-471b-45a6-8558-e063fa3f7cc8.png)'
- en: We can see some of the values as XML and HTML. But, we still need to decompress
    this data. On researching the malware executable file (Run `strings` command on
    the executable), we will discover that one of the strings in the binary executable
    contains LZSS, which is a popular data-compression encoding scheme. You can find
    more on compression and decompression at [https://github.com/maxim-zhao/aplib.py/blob/master/aplib.py](https://github.com/maxim-zhao/aplib.py/blob/master/aplib.py).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到一些值是XML和HTML格式的。但是，我们仍然需要解压缩这些数据。通过研究恶意软件执行文件（在执行文件上运行`strings`命令），我们会发现其中一个二进制可执行文件中的字符串包含LZSS，这是一个流行的数据压缩编码方案。你可以在[https://github.com/maxim-zhao/aplib.py/blob/master/aplib.py](https://github.com/maxim-zhao/aplib.py/blob/master/aplib.py)找到更多关于压缩和解压缩的信息。
- en: 'Using the library, we can copy the bytes from Wireshark capture and feed it
    as an input to the decompress function defined in the library. Let''s decompress
    the data as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用该库，我们可以从 Wireshark 捕获的数据中复制字节，并将其作为输入传递给库中定义的解压函数。我们可以按照以下步骤解压数据：
- en: '![](img/cf8cedf2-bd9b-4910-99a5-5679bb2331aa.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cf8cedf2-bd9b-4910-99a5-5679bb2331aa.png)'
- en: 'Well! It looks like the stolen data is from FileZilla, and it looks like a
    config file. On repeating the analysis for other packets, such as one with the
    value 2B (keylogger) type, we will have similar data, and on decompression, it
    will look similar to the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 好的！看起来被窃取的数据来自 FileZilla，而且看起来像是一个配置文件。对其他数据包进行类似的分析，比如包含 2B（键盘记录器）类型的包，我们会得到类似的数据，解压后它看起来会类似于以下内容：
- en: '![](img/d0434dc8-a4f6-4a98-9dc7-3f4be46446a0.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d0434dc8-a4f6-4a98-9dc7-3f4be46446a0.png)'
- en: Now we have the keylogger data as well. So, what do we know as of now?
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们也得到了键盘记录器数据。那么，到目前为止我们知道了什么呢？
- en: 'We have successfully gathered the following **Indicators of Compromise** (**IOC**)
    details by working on the preceding sample:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通过处理前述样本，我们成功收集到了以下 **妥协指示器**（**IOC**）信息：
- en: '**The infected system:** `172.16.0.130`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**感染的系统**: `172.16.0.130`'
- en: '**The infected user**: REM'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**感染的用户**: REM'
- en: '**The infected system hostname**: `REMWORKSTATION`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**感染系统的主机名**: `REMWORKSTATION`'
- en: '**Domain infected**: `REMWorkstation`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**感染域**: `REMWorkstation`'
- en: '**OS architecture**: 32 Bit'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作系统架构**: 32 位'
- en: '**Screen resolution**: 3440 x 1440'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**屏幕分辨率**: 3440 x 1440'
- en: '**Windows OS NT version**: 6.3.1 (Windows 8)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows OS NT 版本**: 6.3.1 (Windows 8)'
- en: '**The command and control server**: `185.141.27.187`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令和控制服务器**: `185.141.27.187`'
- en: '**Malware used**: LokiBot'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用的恶意软件**: LokiBot'
- en: '**Malware detection**: User-Agent, HTTP method (POST)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**恶意软件检测**: 用户代理，HTTP 方法（POST）'
- en: '**Malware activities**: Application Data Exfiltration on FileZilla, Keylogging'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**恶意软件活动**: FileZilla 上的应用程序数据外泄，键盘记录'
- en: '**Malware version**: 1.8'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**恶意软件版本**: 1.8'
- en: '**Malware compression**: LZSS'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**恶意软件压缩**: LZSS'
- en: '**Malware encoding**: None'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**恶意软件编码**: 无'
- en: '**Malware files names**: `%APPDATA%\\C98066\\6B250D.*`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**恶意软件文件名**: `%APPDATA%\\C98066\\6B250D.*`'
- en: Amazing! We have plenty of information just from analyzing the PCAP file. Let's
    look at some more examples in the next section.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 真棒！仅仅通过分析 PCAP 文件，我们已经收集了大量信息。接下来让我们看看更多的例子。
- en: The PCAP used for the previous analysis is downloaded from [https://github.com/R3MRUM/loki-parse](https://github.com/R3MRUM/loki-parse).
    Additionally, R3MRUM has developed an automated script for this analysis, which
    you can find from the git repo itself. The script will not only help your analysis,
    but will enhance your Python skills as well.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 用于之前分析的 PCAP 文件可以从 [https://github.com/R3MRUM/loki-parse](https://github.com/R3MRUM/loki-parse)
    下载。此外，R3MRUM 还为此分析开发了一个自动化脚本，您可以在 git 仓库中找到该脚本。这个脚本不仅有助于您的分析，还能提高您的 Python 技能。
- en: While working on this sample, I was able to reach R3MRUM and spoke about the
    LokiBot sample we analyzed previously. He told me that the XXXXX11111 binary ID seems
    to be a development version of the LokiBot, and the `ckav.ru` ID is the one used
    in productions. Additionally, R3MRUM provided the link to his full white paper
    on LokiBot at [https://r3mrum.files.wordpress.com/2017/07/loki_bot-grem_gold.pdf](https://r3mrum.files.wordpress.com/2017/07/loki_bot-grem_gold.pdf).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理这个样本时，我联系了 R3MRUM，并讨论了我们之前分析的 LokiBot 样本。他告诉我，XXXXX11111 二进制 ID 似乎是 LokiBot
    的开发版本，而 `ckav.ru` ID 是在生产中使用的版本。此外，R3MRUM 提供了关于 LokiBot 的完整白皮书链接：[https://r3mrum.files.wordpress.com/2017/07/loki_bot-grem_gold.pdf](https://r3mrum.files.wordpress.com/2017/07/loki_bot-grem_gold.pdf)。
- en: In the preceding exercise, we worked on an unknown sample and researched on
    its IOCs. We were not only able to detect the basic information about the infection
    but were also able to decode its communication. We found the exfiltrated data
    sent to the attacker as well. Let’s work on some more samples such as ransomware
    and banking Trojans in the upcoming sections.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的练习中，我们处理了一个未知的样本，并研究了它的 IOC。我们不仅能够检测到感染的基本信息，还能够解码它的通信。我们还找到了外泄的数据并发送给了攻击者。接下来，我们将在后续部分处理一些其他样本，比如勒索软件和银行木马。
- en: Intercepting malware for fun and profit
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拦截恶意软件以获得乐趣和利润
- en: We will analyze ransomware in this exercise. Ransomware can cause havoc in a
    network, and we have seen plenty of examples in the recent past. Ransomware such
    as WannaCry, Petya, and Locky have caused immense disruption in the world. Additionally,
    these days, PyLocky ransomware is a hot favorite for attackers. Some ransomware
    generally rolls out keys to the server on their initial run, and that's the point
    where we, the network forensic guys, come into the picture.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本次练习中，我们将分析勒索病毒。勒索病毒可以在网络中造成严重破坏，近期我们已经见过很多例子。像WannaCry、Petya和Locky这样的勒索病毒已在全球范围内造成巨大破坏。此外，当前PyLocky勒索病毒是攻击者最常用的病毒之一。一些勒索病毒通常会在初次运行时将密钥发送到服务器，这正是我们网络取证人员介入的时机。
- en: PyLocky ransomware decryption using PCAP data
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyLocky勒索病毒的解密使用PCAP数据
- en: 'Recently, Cisco has launched the PyLocky decryptor ([https://github.com/Cisco-Talos/pylocky_decryptor](https://github.com/Cisco-Talos/pylocky_decryptor)),
    which searches through the PCAP to decrypt files on the system. PyLocky sends
    a single `POST` request to the control server containing the following parameters:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，思科推出了PyLocky解密器（[https://github.com/Cisco-Talos/pylocky_decryptor](https://github.com/Cisco-Talos/pylocky_decryptor)），它通过搜索PCAP数据来解密系统上的文件。PyLocky向控制服务器发送一个`POST`请求，其中包含以下参数：
- en: '[PRE0]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can see that we have `iv`, the initialization vector, and password as the
    parameters. In case the network was being logged at the time of the system infection,
    we could use this information to decrypt the files with ease. Let''s look at PyLocky''s
    code for decryption, as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，`iv`（初始化向量）和密码作为参数出现。如果系统感染时网络被记录，我们可以利用这些信息轻松解密文件。接下来让我们看看PyLocky的解密代码，如下所示：
- en: '![](img/1b7a95d3-4d46-48ad-89f8-21970e6bdfc1.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b7a95d3-4d46-48ad-89f8-21970e6bdfc1.png)'
- en: We can see that PyLocky decryptor makes use of IV and passwords to decrypt the
    files encrypted with the PyLocky ransomware, and generally, this way works for
    a number of ransomware types out there. PyLocky makes use of DES3 to encrypt the
    files that can be decrypted back.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，PyLocky解密器利用IV和密码解密使用PyLocky勒索病毒加密的文件，通常这种方法也适用于多种勒索病毒类型。PyLocky使用DES3加密文件，而这些文件可以解密回来。
- en: Decrypting hidden tear ransomware
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解密隐蔽眼泪勒索病毒
- en: 'Let''s see another example with hidden tear ransomware. Consider a scenario
    where hidden tear ransomware has locked files on a Windows 10 system, and the
    situation is pretty bad, as shown in the following screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看另一个例子，涉及隐蔽眼泪勒索病毒。假设在一个Windows 10系统上，隐蔽眼泪勒索病毒已加密文件，情况非常糟糕，如下图所示：
- en: '![](img/2eeafe51-67dd-4c98-bec0-22ef11477a5e.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2eeafe51-67dd-4c98-bec0-22ef11477a5e.png)'
- en: 'It looks like the files are encrypted. Let''s try opening a file as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来文件已经被加密。让我们尝试打开一个文件，如下所示：
- en: '![](img/6e411ddb-3827-4e70-bf9e-c7933eb83da3.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e411ddb-3827-4e70-bf9e-c7933eb83da3.png)'
- en: 'Yes—the contents of the file are encrypted. Luckily for us, we have a PCAP
    of the fully captured data with us. Let''s start our analysis:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 是的——文件内容已被加密。幸运的是，我们手头有完整捕获的数据PCAP。让我们开始分析：
- en: '![](img/fd6bf3f5-8b4b-43ed-bea5-9a8a1b1b456e.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd6bf3f5-8b4b-43ed-bea5-9a8a1b1b456e.png)'
- en: 'We can see we have a fairly large PCAP file, containing a good amount of HTTP
    data. Since we know that malwares have issues with user-agents, display the full
    user-agent and URI data in Wireshark as we did in the earlier examples:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们有一个相当大的PCAP文件，其中包含大量HTTP数据。由于我们知道恶意软件通常在用户代理方面存在问题，我们可以像之前的示例一样，在Wireshark中显示完整的用户代理和URI数据：
- en: '![](img/78f780fd-3a30-4f46-b408-fda0a9cdaff8.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/78f780fd-3a30-4f46-b408-fda0a9cdaff8.png)'
- en: 'We can see that most of the data *is* being fetched from Microsoft domains,
    and probably looks like it is used by Windows update. Let''s unselect this user-agent
    and see what we are left with:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，大多数数据*来自*微软域名，并且看起来很可能是用于Windows更新的。让我们取消选择这个用户代理，看看剩下的是什么：
- en: '![](img/198b0f5a-2700-4f4d-9f4c-21b276ec3507.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/198b0f5a-2700-4f4d-9f4c-21b276ec3507.png)'
- en: 'We can see that by using the `!(http.user_agent == "Microsoft-Delivery-Optimization/10.0")
    && http.request.full_uri && !ssdp` filter, we are left with only a few packets.
    Let''s investigate the packets as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，通过使用`!(http.user_agent == "Microsoft-Delivery-Optimization/10.0") &&
    http.request.full_uri && !ssdp` 过滤器，剩下的只有少数几个数据包。接下来让我们对这些数据包进行分析：
- en: '![](img/0a77a245-3fdc-496b-a8e2-05750b05485f.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a77a245-3fdc-496b-a8e2-05750b05485f.png)'
- en: 'We can see that a `GET` request containing our machine name and some string
    is sent to a domain. Could this be the password? We''ll have to check. Let''s
    download the decrypter from [https://github.com/goliate/hidden-tear](https://github.com/goliate/hidden-tear):'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到一个包含机器名称和某些字符串的`GET`请求被发送到一个域名。这可能是密码吗？我们需要检查一下。让我们从[https://github.com/goliate/hidden-tear](https://github.com/goliate/hidden-tear)下载解密工具：
- en: '![](img/6a7158f4-6ff8-4b37-86a2-53c96d6bc471.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a7158f4-6ff8-4b37-86a2-53c96d6bc471.png)'
- en: Any executables downloaded from the internet of extracted from the PCAPs must
    be worked upon only in an isolated environment such as a virtual machine. Since
    most of the examples are live malware samples, please do not execute it on your
    host machine.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 从互联网上下载或从PCAP中提取的任何可执行文件都必须仅在隔离的环境中操作，例如虚拟机。由于大多数示例是活动的恶意软件样本，请勿在主机上执行它。
- en: 'Insert the password that we got from the PCAP analysis as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 输入我们从PCAP分析中获得的密码，步骤如下：
- en: '![](img/364db113-a1a1-4f49-bda6-e1de96e37a61.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/364db113-a1a1-4f49-bda6-e1de96e37a61.png)'
- en: 'As soon as we hit the Decrypt My Files button, we see that the locked files
    are unlocked again:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦点击“解密我的文件”按钮，我们看到被锁定的文件再次被解锁：
- en: '![](img/285d3d7a-c342-413c-a152-091511b35e0a.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/285d3d7a-c342-413c-a152-091511b35e0a.png)'
- en: We can now see that the files were decrypted successfully.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到文件已经成功解密。
- en: For more information on finding ransomware keys, refer to [https://sensorstechforum.com/use-wireshark-decrypt-ransomware-files/](https://sensorstechforum.com/use-wireshark-decrypt-ransomware-files/).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多关于查找勒索病毒密钥的信息，请参阅[https://sensorstechforum.com/use-wireshark-decrypt-ransomware-files/](https://sensorstechforum.com/use-wireshark-decrypt-ransomware-files/)。
- en: Behavior patterns and analysis
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行为模式与分析
- en: For a forensic network investigator, it is important to find the behavior and
    network patterns of a malware. Consider that you have received a few binaries
    (executable) and their hashes (signature) from the incident response team that
    are likely to be carrying malware. However, the analysis on PE/COFF executable
    is generally done by malware analysts and reverse engineers. What can you do with
    the PE executable? You don't have to study reverse engineering and malware analysis
    overnight to analyze the sample.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 对于法证网络调查员来说，找出恶意软件的行为和网络模式非常重要。假设你已从事件响应团队收到几个二进制文件（可执行文件）及其哈希值（签名），这些文件可能携带恶意软件。然而，PE/COFF可执行文件的分析通常由恶意软件分析师和逆向工程师进行。那么，你能对PE可执行文件做什么呢？你无需在一夜之间学习逆向工程和恶意软件分析就能分析该样本。
- en: 'Consider that you have received the file hash as `ed01ebfbc9eb5bbea545af4d01bf5f1071661840480439c6e5babe8e080e41aa`.
    You can use websites such as [https://www.virustotal.com/gui/home/upload](https://www.virustotal.com/gui/home/upload)
    and [https://www.hybrid-analysis.com/](https://www.hybrid-analysis.com/) to analyze
    your sample without analyzing it on your system. The following screenshot shows
    the VirusTotal website:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你收到了文件哈希`ed01ebfbc9eb5bbea545af4d01bf5f1071661840480439c6e5babe8e080e41aa`。你可以使用如[https://www.virustotal.com/gui/home/upload](https://www.virustotal.com/gui/home/upload)和[https://www.hybrid-analysis.com/](https://www.hybrid-analysis.com/)等网站分析样本，而无需在你的系统上进行分析。以下截图显示了VirusTotal网站：
- en: '![](img/cdf3dd27-921f-4c75-ab6b-c0090067c5af.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cdf3dd27-921f-4c75-ab6b-c0090067c5af.png)'
- en: 'Let''s search the hash of the file at VirusTotal. The results should show up
    if the file has previously been analyzed:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在VirusTotal上搜索该文件的哈希值。如果该文件之前被分析过，结果应该会显示出来：
- en: '![](img/97ab03a5-7cf4-49ed-87f9-be9f2885f6f3.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/97ab03a5-7cf4-49ed-87f9-be9f2885f6f3.png)'
- en: 'Oops! 62/70 antivirus engines detect the file as malicious, and consider that
    it may be a WannaCry ransomware sample. Let''s see the details from the **DETAILS**
    tab as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！62/70的杀毒引擎检测到该文件为恶意文件，并认为它可能是WannaCry勒索病毒样本。让我们查看**DETAILS**标签页中的细节：
- en: '![](img/16903025-c6f1-4a59-9c78-66ddbee85842.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16903025-c6f1-4a59-9c78-66ddbee85842.png)'
- en: 'Plenty of detail can be seen on the DETAILS tab especially the common names
    of the files causing this infection. We can also see that the file has been analyzed
    previously with a different name. Additionally, we have the following details:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在**DETAILS**标签页中可以看到大量细节，尤其是导致此感染的文件的常见名称。我们还可以看到该文件之前已使用不同的名称进行过分析。此外，我们有以下细节：
- en: '![](img/b3586c8a-e06c-4b38-9aca-b4487b6c4983.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b3586c8a-e06c-4b38-9aca-b4487b6c4983.png)'
- en: 'We can see that there are five IP addresses contacted by the WannaCry executable.
    We can obviously filter the network based on these details to check infections
    in the network and pinpoint the infected source. Let''s also upload/search the
    sample on the Hybrid-Analysis website ([https://www.hybrid-analysis.com/](https://www.hybrid-analysis.com/))
    as well:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到 WannaCry 可执行文件联系了五个 IP 地址。显然，我们可以基于这些细节过滤网络，检查网络中的感染并找出感染源。我们还可以在 Hybrid-Analysis
    网站上上传/搜索该样本（[https://www.hybrid-analysis.com/](https://www.hybrid-analysis.com/)）：
- en: '![](img/45184e09-e877-45c2-bdf7-d63742f4fe33.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/45184e09-e877-45c2-bdf7-d63742f4fe33.png)'
- en: 'On searching the sample on Hybrid-Analysis, we can see that we have the list
    of connected IP addresses, and a list of ports as well. This information will
    help us to narrow the outbound connections down from the infected system. We can
    see that Hybrid-Analysis has gone ahead and executed the associated sample file
    of the hash we provided for analysis in a secured environment:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Hybrid-Analysis 上搜索该样本时，我们可以看到与之连接的 IP 地址列表和端口列表。这些信息将帮助我们缩小从感染系统发出的出站连接。我们还可以看到
    Hybrid-Analysis 已经在安全环境中执行了我们提供的哈希值对应的样本文件进行分析：
- en: '![](img/7c6a21b3-14b7-4c05-bb48-dfb8d705b5d9.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7c6a21b3-14b7-4c05-bb48-dfb8d705b5d9.png)'
- en: Clearly, we can see the state of the system before and after the execution of
    the malware, where we can see that the system got infected with WannaCry ransomware.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们可以看到系统在恶意软件执行前后的状态，其中我们看到系统感染了 WannaCry 勒索病毒。
- en: The preceding analysis can be found at [https://www.virustotal.com/gui/file/ed01ebfbc9eb5bbea545af4d01bf5f1071661840480439c6e5babe8e080e41aa/detection](https://www.virustotal.com/gui/file/ed01ebfbc9eb5bbea545af4d01bf5f1071661840480439c6e5babe8e080e41aa/detection)
    and [https://www.hybrid-analysis.com/sample/ed01ebfbc9eb5bbea545af4d01bf5f1071661840480439c6e5babe8e080e41aa?environmentId=100](https://www.hybrid-analysis.com/sample/ed01ebfbc9eb5bbea545af4d01bf5f1071661840480439c6e5babe8e080e41aa?environmentId=100).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 前述分析可以在以下网址找到：[https://www.virustotal.com/gui/file/ed01ebfbc9eb5bbea545af4d01bf5f1071661840480439c6e5babe8e080e41aa/detection](https://www.virustotal.com/gui/file/ed01ebfbc9eb5bbea545af4d01bf5f1071661840480439c6e5babe8e080e41aa/detection)
    和 [https://www.hybrid-analysis.com/sample/ed01ebfbc9eb5bbea545af4d01bf5f1071661840480439c6e5babe8e080e41aa?environmentId=100](https://www.hybrid-analysis.com/sample/ed01ebfbc9eb5bbea545af4d01bf5f1071661840480439c6e5babe8e080e41aa?environmentId=100)。
- en: 'Additionally, we can check network patterns from a PCAP file on VirusTotal
    ([https://www.virustotal.com/gui/home/upload](https://www.virustotal.com/gui/home/upload))
    as well. Let''s look at the following example:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以通过 VirusTotal 上传 PCAP 文件来检查网络模式（[https://www.virustotal.com/gui/home/upload](https://www.virustotal.com/gui/home/upload)）。让我们看看下面的示例：
- en: '![](img/a67259cf-76e1-41d2-bdcd-bd8a87417180.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a67259cf-76e1-41d2-bdcd-bd8a87417180.png)'
- en: 'We can see that the traffic from PCAP was tested against Suricata and Snort,
    which are popular intrusion detection systems. Let''s look at the generated alerts
    in detail:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到来自 PCAP 的流量已通过 Suricata 和 Snort 这两个流行的入侵检测系统进行检测。让我们详细看看生成的警报：
- en: '![](img/b647efab-c928-406f-8007-ecec7dc29162.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b647efab-c928-406f-8007-ecec7dc29162.png)'
- en: 'We can see that we have the DNS requests from the PCAP previously listed. Let''s
    see what we have in the HTTP section in the following screenshot:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到之前列出的来自 PCAP 的 DNS 请求。接下来我们看看 HTTP 部分的内容，以下是截图：
- en: '![](img/8f3e29a0-f54f-4c13-8fe1-83fb0f6db581.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8f3e29a0-f54f-4c13-8fe1-83fb0f6db581.png)'
- en: 'Right below the HTTP requests, we have the Snort and Suricata sections of the
    matched rules, as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在 HTTP 请求的下方，我们有 Snort 和 Suricata 匹配规则的部分，具体如下：
- en: '![](img/5ec25122-45da-4159-a74a-0ce3308c5df5.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ec25122-45da-4159-a74a-0ce3308c5df5.png)'
- en: 'We now have plenty of details from this section. Looking at the third section,
    we can see that an executable traveled onto the network that was detected by Snort.
    Additionally, a network Trojan, a command and control communication, and an exploit
    kit were also detected. Let''s see Suricata-matched rules as well:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经获得了这一部分的详细信息。查看第三部分，我们可以看到一个可执行文件进入了网络，并被 Snort 检测到。此外，还检测到了一个网络木马、一个命令和控制通信以及一个漏洞利用工具包。让我们也看看
    Suricata 匹配的规则：
- en: '![](img/33d68c77-7dd3-4392-92d8-85549b7c74b6.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/33d68c77-7dd3-4392-92d8-85549b7c74b6.png)'
- en: 'We can see that, based on the PCAP data, Suricata not only matched Trojan activity
    but has also identified Internet Explorer version 6 running on a system. So, we
    can see how, without using any additional analysis tools, we are able to discover
    plenty of information about the malware. Additionally, we can use a VirusTotal
    graph to view the sample in a graphical format, as shown in the following screen:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，根据 PCAP 数据，Suricata 不仅匹配了特洛伊木马活动，还识别出了系统上运行的 Internet Explorer 6 版本。因此，我们可以看到，即使不使用任何额外的分析工具，我们也能发现有关恶意软件的大量信息。此外，我们还可以使用
    VirusTotal 图表以图形格式查看该样本，如下图所示：
- en: '![](img/45588a31-a3ae-4ce0-b1a3-f4f02808693d.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/45588a31-a3ae-4ce0-b1a3-f4f02808693d.png)'
- en: 'We can see that the nodes with red icons are found to be malicious in nature.
    Let''s analyze the node by selecting it, as shown in the following screenshot:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，带有红色图标的节点被发现具有恶意性质。让我们通过选择它来分析该节点，如下图所示：
- en: '![](img/81ab4963-db40-4b91-850a-8558438c3b1a.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81ab4963-db40-4b91-850a-8558438c3b1a.png)'
- en: Kaspersky has detected this as a malware. Websites like VirusTotal and Hybrid-Analysis
    quickly provide an analysis of the PCAP and executable, speeding up our investigations
    on the time constraints. So, inputs should always be taken from these websites
    before starting with the manual analysis.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 卡巴斯基已将其检测为恶意软件。像 VirusTotal 和 Hybrid-Analysis 这样的站点可以快速提供对 PCAP 和可执行文件的分析，加速我们在时间限制下的调查。因此，在开始手动分析之前，应该始终从这些网站获取输入。
- en: The preceding sample analysis can be found at [https://www.virustotal.com/gui/file/04cf54c95b58f15a2d06ad805a49b20233408737eb417190a817fd189bcf2329/relations](https://www.virustotal.com/gui/file/04cf54c95b58f15a2d06ad805a49b20233408737eb417190a817fd189bcf2329/relations).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例分析可以在[https://www.virustotal.com/gui/file/04cf54c95b58f15a2d06ad805a49b20233408737eb417190a817fd189bcf2329/relations](https://www.virustotal.com/gui/file/04cf54c95b58f15a2d06ad805a49b20233408737eb417190a817fd189bcf2329/relations)找到。
- en: A real-world case study – investigating a banking Trojan on the network
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个真实世界的案例研究——调查网络中的银行木马
- en: 'For this exercise, you can download the PCAP from [https://github.com/nipunjaswal/networkforensics/blob/master/Ch6/Emoter%20Banking%20Trojan%20Sample/2018-11-14-Emotet-infection-with-IcedID-banking-Trojan.pcap](https://github.com/nipunjaswal/networkforensics/blob/master/Ch6/Emoter%20Banking%20Trojan%20Sample/2018-11-14-Emotet-infection-with-IcedID-banking-Trojan.pcap).
    Let''s open the PCAP in NetworkMiner and examine the **Hosts** tab as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本练习，您可以从[https://github.com/nipunjaswal/networkforensics/blob/master/Ch6/Emoter%20Banking%20Trojan%20Sample/2018-11-14-Emotet-infection-with-IcedID-banking-Trojan.pcap](https://github.com/nipunjaswal/networkforensics/blob/master/Ch6/Emoter%20Banking%20Trojan%20Sample/2018-11-14-Emotet-infection-with-IcedID-banking-Trojan.pcap)下载
    PCAP。让我们在 NetworkMiner 中打开该 PCAP 并查看 **Hosts** 标签，如下所示：
- en: '![](img/2457fd34-4a6a-47df-a20a-e0cf9a536611.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2457fd34-4a6a-47df-a20a-e0cf9a536611.png)'
- en: 'We have sorted the hosts based on the number of packets received by them. We
    can see that `10.11.14.101` and `185.129.49.19` are found to be receiving the
    greatest number of packets. Next, looking at the files from the **Files** tab,
    we can see that a document and an executable have been found in the capture:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们根据接收到的数据包数量对主机进行了排序。我们可以看到 `10.11.14.101` 和 `185.129.49.19` 接收的数据包数量最多。接下来，查看
    **Files** 标签中的文件，我们可以看到在捕获数据中发现了一个文档和一个可执行文件：
- en: '![](img/7051cc18-e0f4-496c-afec-48c6676e8f65.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7051cc18-e0f4-496c-afec-48c6676e8f65.png)'
- en: 'Next, let''s calculate its checksum to search for it on sites such as VirusTotal
    and Hybrid-Analysis, as shown in the following screenshot:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们计算其校验和，以便在如 VirusTotal 和 Hybrid-Analysis 等网站上进行搜索，如下图所示：
- en: '![](img/50af485c-f540-4a72-b35b-7265898c86b2.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50af485c-f540-4a72-b35b-7265898c86b2.png)'
- en: 'We can see that we have the signatures generated as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，我们已生成以下签名：
- en: '![](img/445350d7-9121-40a6-b80b-90534eda3442.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/445350d7-9121-40a6-b80b-90534eda3442.png)'
- en: 'Let''s copy its SHA-256 signature and search for it on VirusTotal:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们复制其 SHA-256 签名并在 VirusTotal 上搜索：
- en: '![](img/3ce437c5-f4fe-4833-a2f3-531926205227.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ce437c5-f4fe-4833-a2f3-531926205227.png)'
- en: Oh! 38/54 antivirus engines have found this document to be malicious. Most of
    the antivirus engines are denoting that it's a VBA downloader, which means that
    the document is a macro-based backdoor document, since macros are written in VBA
    scripting in the documents.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 哦！38/54 个杀毒引擎已将该文档判定为恶意。大多数杀毒引擎表示这是一个 VBA 下载器，意味着该文档是基于宏的后门文档，因为宏是使用 VBA 脚本语言在文档中编写的。
- en: 'Looking at the details section, we find the following observations:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 查看详细信息部分，我们发现以下观察结果：
- en: '![](img/c2494fa1-d77b-4b9f-91a4-89b6a8f878bc.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c2494fa1-d77b-4b9f-91a4-89b6a8f878bc.png)'
- en: 'We can see that the VirusTotal analysis states that the document uses macros,
    and may try to run files, shell commands, and other applications. We can see that
    we have the exact macro extracted from the file as well. Let''s track this down
    in Wireshark:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到 VirusTotal 分析显示该文档使用了宏，并且可能尝试运行文件、Shell 命令和其他应用程序。我们也可以看到，从文件中提取的准确宏代码。让我们在
    Wireshark 中追踪这个：
- en: '![](img/ab90f316-1e57-4063-803b-04b180fb5ed3.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab90f316-1e57-4063-803b-04b180fb5ed3.png)'
- en: 'We can see that the `10.11.14.101` system made an HTTP request, and was served
    a `.doc` file (as suggested by the magic header highlighted in the preceding screenshot)
    from the `78.135.65.15` server, which, on inspection, was found to be carrying
    a VBA downloader macro. We will now move on to the relations tab:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，`10.11.14.101` 系统发起了一个 HTTP 请求，并从 `78.135.65.15` 服务器获取了一个 `.doc` 文件（如前面截图中的魔法头部所示），经过检查，该文件携带了一个
    VBA 下载器宏。接下来，我们将转到关系标签页：
- en: '![](img/299e80d0-4edb-4dc8-a246-a5a75e07d420.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/299e80d0-4edb-4dc8-a246-a5a75e07d420.png)'
- en: 'We can see that the office document contacted the URLs previously listed. Let''s
    open Wireshark and see if the document was executed:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，办公文档联系了之前列出的 URL。让我们打开 Wireshark，看看文档是否已执行：
- en: '![](img/4684e4d4-0fd7-489c-a60d-3a3484b67fa7.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4684e4d4-0fd7-489c-a60d-3a3484b67fa7.png)'
- en: 'We can see that the document was executed, since the DNS entry is returning
    the IP address, followed by subsequent GET requests. Let''s investigate further
    by following the HTTP stream as follows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到文档已经执行，因为 DNS 记录返回了该 IP 地址，后续有了 GET 请求。让我们通过以下方式进一步调查 HTTP 流：
- en: '![](img/fe716813-53fd-4fdc-a9d9-8dd538399bae.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fe716813-53fd-4fdc-a9d9-8dd538399bae.png)'
- en: 'We can see that the request was sent to the `50.62.194.30` server once for
    the `/PspAMbuSd2` path, which generated a `301` moved response, and was sent a
    second time for the `/PspAMbuSd2/` path, which returned an executable, as shown
    in the following screenshot:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，该请求已发送到 `50.62.194.30` 服务器一次，路径是 `/PspAMbuSd2`，该请求返回了 `301` 重定向响应，第二次发送时，路径变为
    `/PspAMbuSd2/`，并返回了一个可执行文件，如下图所示：
- en: '![](img/7494935a-2a53-4ad5-9066-b3a528d4b796.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7494935a-2a53-4ad5-9066-b3a528d4b796.png)'
- en: 'So, we have the executable downloaded from the server that might be containing
    something malicious; let''s check by verifying its signature from NetworkMiner
    on VirusTotal, as we did for the document:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们从服务器下载了一个可执行文件，它可能包含某些恶意内容；让我们通过在 VirusTotal 上使用 NetworkMiner 验证它的签名来检查，就像我们对文档所做的那样：
- en: '![](img/453ffe16-589f-474d-b1f8-603396b9157f.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/453ffe16-589f-474d-b1f8-603396b9157f.png)'
- en: 'VirusTotal results suggests that 51/67 antivirus solutions have detected the
    file as malicious and is carrying the Emotet banking Trojan. Let''s see the detailed
    diagram as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: VirusTotal 结果表明，67 个杀毒软件中有 51 个已检测到该文件为恶意文件，并且携带了 Emotet 银行木马。让我们看看下面的详细图表：
- en: '![](img/bc2f56f9-bb08-411b-af1b-b4d3e1e8f21e.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bc2f56f9-bb08-411b-af1b-b4d3e1e8f21e.png)'
- en: 'We can see that the Trojan connected to the `50.76.167.65` server, which may
    be its command and control host. Let''s see when the first request was sent to
    this server:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，木马连接到了 `50.76.167.65` 服务器，这可能是其命令与控制主机。让我们看看第一次请求发送到该服务器的时间：
- en: '![](img/0b151404-6c63-4f4c-9537-989a9287a0fb.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b151404-6c63-4f4c-9537-989a9287a0fb.png)'
- en: 'We can see that a number of GET requests were sent to different IPs. We can
    assume that these IPs were provided from the responses to the initial server in
    chain, since they were not present anywhere within the executable. Next, after
    searching the executable sample on the Hybrid-Analysis website, we have the following
    details:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，多个 GET 请求已发送到不同的 IP 地址。我们可以推测，这些 IP 地址是通过链中的初始服务器响应提供的，因为它们并未出现在可执行文件中。接下来，在
    Hybrid-Analysis 网站上搜索该可执行文件样本后，我们得到了以下详细信息：
- en: '![](img/285718c4-79aa-464e-b5eb-9a841bd08f65.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/285718c4-79aa-464e-b5eb-9a841bd08f65.png)'
- en: 'We can see a new IP address, separate from the ones in the Wireshark result,
    which is `177.242.156.119`. Additionally, we can see that port `80` of `177.242.156.119`
    is using non-HTTP traffic on the port. Let''s check this in Wireshark:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到一个新的 IP 地址，和 Wireshark 结果中的其他地址不同，它是 `177.242.156.119`。此外，我们可以看到 `177.242.156.119`
    的端口 `80` 使用了非 HTTP 流量。让我们在 Wireshark 中检查一下：
- en: '![](img/a8212e95-55f1-49fe-9bff-010feb14167c.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a8212e95-55f1-49fe-9bff-010feb14167c.png)'
- en: 'We can see that we have the outbound connection, but it seems that the connection
    failed for some reason. The general information section also lists out another
    IP address, as shown in the following screenshot:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，我们有外向连接，但似乎由于某种原因连接失败了。一般信息部分还列出了另一个 IP 地址，如下图所示：
- en: '![](img/b6902a79-c77c-4018-bd94-231448064c6f.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b6902a79-c77c-4018-bd94-231448064c6f.png)'
- en: 'We can see we have an IP address of `189.244.86.184`, as well. Let''s investigate
    its traffic by following the HTTP stream in Wireshark as follows:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到`189.244.86.184`这个IP地址。让我们通过在Wireshark中跟踪HTTP流量来调查它的流量，如下所示：
- en: '![](img/11083889-3a1f-4db3-8793-5b3822be4ffe.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/11083889-3a1f-4db3-8793-5b3822be4ffe.png)'
- en: 'From what we can see by following the TCP stream, the Trojan is sending out
    data by making use of cookies. This data may be the command outputs, beaconing
    behavior (installed malware sends out periodic information to the attacker stating
    that it is alive and ready to take inputs), or file content. However, if we look
    at the credentials section of NetworkMiner, we get a different picture:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们通过TCP流看到的内容来看，特洛伊木马正在通过利用Cookie发送数据。这些数据可能是命令输出、信标行为（已安装的恶意软件定期向攻击者发送信息，表明它仍然在线并准备接收输入），或者是文件内容。然而，如果我们查看NetworkMiner的凭证部分，我们会看到不同的情况：
- en: '![](img/5e948ba2-a064-46b8-ae8a-21f8cc56d9f9.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e948ba2-a064-46b8-ae8a-21f8cc56d9f9.png)'
- en: 'We can see that a similar kind of cookie in the HTTP request is sent to other
    IPs as well. Investigating the SSL certificates by uploading the PCAP file to [https://packettotal.com/](https://packettotal.com/),
    we can see the following information in the SSL **Certificates** tab:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，在HTTP请求中，类似的Cookie也被发送到其他IP。通过将PCAP文件上传到[https://packettotal.com/](https://packettotal.com/)，我们可以在SSL
    **证书**标签中看到以下信息：
- en: '![](img/9460b745-91e0-407a-82f4-9ce605e228b0.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9460b745-91e0-407a-82f4-9ce605e228b0.png)'
- en: 'The SSL certificate is self-signed, and failed the validation. So, summing
    up the analysis, we have the following summary of events:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: SSL证书是自签名的，且验证失败。因此，综合分析，我们得出以下事件总结：
- en: The malicious `363439590633444.doc` document form containing a VBA downloader
    macro was downloaded from [http://bysound.com.tr/](http://bysound.com.tr/) (`78.135.65.15`)
    at the `10.11.14.101` host.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恶意的`363439590633444.doc`文档表单包含一个VBA下载器宏，它是从[http://bysound.com.tr/](http://bysound.com.tr/)（`78.135.65.15`）下载的，下载主机为`10.11.14.101`。
- en: The document was executed with macros enabled, which ran the VBA macro script
    and made two HTTP requests to the server hosted on [http://c-t.com.au/](http://c-t.com.au/)
    (`50.62.194.30`).
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该文档在启用了宏的情况下执行，运行了VBA宏脚本，并向托管在[http://c-t.com.au/](http://c-t.com.au/)（`50.62.194.30`）的服务器发送了两个HTTP请求。
- en: The first HTTP request, `GET /PspAMbuSd2 HTTP/1.1\r\n`, caused a **301 permanently
    moved** error.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个HTTP请求，`GET /PspAMbuSd2 HTTP/1.1\r\n`，导致了**301永久移动**错误。
- en: The second HTTP request, `GET /PspAMbuSd2/ HTTP/1.1\r\n`, served an executable
    which contained Emotet banking Trojan.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个HTTP请求，`GET /PspAMbuSd2/ HTTP/1.1\r\n`，提供了一个包含Emotet银行木马的可执行文件。
- en: As soon as the Emotet executable was executed, it tried connecting to its command
    and control server, which is hosted at `50.78.167.65:7080`.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦Emotet可执行文件被执行，它便尝试连接到其指挥和控制服务器，该服务器托管在`50.78.167.65:7080`。
- en: 'The executable then tried connecting to various IP addresses, and looks like
    it finally connected to `186.18.236.83:8080`, as seen in the following screenshot:'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可执行文件随后尝试连接到多个IP地址，看起来最终连接到了`186.18.236.83:8080`，如以下截图所示：
- en: '![](img/fe507109-1827-41c0-b961-93e9efd4403a.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fe507109-1827-41c0-b961-93e9efd4403a.png)'
- en: 'After it connected, it did some encrypted communication, and then went onto
    polling the IPs, as it did previously. Next, as shown in the following screenshot,
    it did some encrypted communication with `71.163.171.106` again, and went on to
    repeat the same pattern for a number of IPs, as follows:'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在连接后，它进行了加密通信，然后继续像之前一样轮询IP地址。接下来，正如以下截图所示，它再次与`71.163.171.106`进行了加密通信，并继续对多个IP重复相同的模式，如下所示：
- en: '![](img/95c8b404-3187-45ee-9073-58fd0333347e.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](img/95c8b404-3187-45ee-9073-58fd0333347e.png)'
- en: From what we can see in the preceding screenshot, we have IPs with the highest
    packet count, and they have been communicating with the infected host using TLS
    encryption, for which the SSL validation failed.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从我们在前面的截图中看到的内容来看，IP地址的包数量最多，并且它们已经通过TLS加密与感染主机进行通信，SSL验证失败。
- en: We now have enough information for the IOCs from the previous investigation.
    However, we saw how encryption made analysis difficult for us. To read more on
    Emotet, refer to [https://www.fortinet.com/blog/threat-research/analysis-of-a-fresh-variant-of-the-emotet-malware.html](https://www.fortinet.com/blog/threat-research/analysis-of-a-fresh-variant-of-the-emotet-malware.html).
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经掌握了之前调查的足够信息来提取IOC。然而，我们看到加密使得分析变得困难。要了解更多关于Emotet的信息，请参考[https://www.fortinet.com/blog/threat-research/analysis-of-a-fresh-variant-of-the-emotet-malware.html](https://www.fortinet.com/blog/threat-research/analysis-of-a-fresh-variant-of-the-emotet-malware.html)。
- en: The PCAP contains a live sample of the banking Trojan. Do not execute it on
    your host machine! Always run or analyze such samples in a virtualized environment.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 该PCAP文件包含了银行木马的活跃样本。请不要在主机上执行它！务必在虚拟环境中运行或分析此类样本。
- en: Summary
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Throughout this chapter, we saw how we can dissect malware such as LokiBot on
    the packet level and gain insight into its activities on the infected system.
    We saw how we could decrypt ransomware, and saw strategies for working with the
    PyLocky and Hidden Tear ransomware samples. We learned how we can use automated
    techniques by using websites such as VirusTotal, Hybrid-Analysis, and [https://packettotal.com/](https://packettotal.com/)
    for our investigation. We worked on a live sample of the Emotet banking Trojan
    and drew IOCs out of it.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们展示了如何在数据包层面对恶意软件（如LokiBot）进行剖析，并获得其在被感染系统上的活动信息。我们展示了如何解密勒索病毒，并且为使用PyLocky和Hidden
    Tear勒索病毒样本提供了策略。我们学习了如何通过使用VirusTotal、Hybrid-Analysis以及[https://packettotal.com/](https://packettotal.com/)等网站，利用自动化技术进行调查。我们还分析了Emotet银行木马的活跃样本，并从中提取了IOC。
- en: In the next chapter, we will discuss command and control systems and how we
    can analyze the most common ones. We will be looking into some advanced and popularly
    used C2 tools to learn about their behavior on the wire and try developing strategies
    to recognize them.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论指挥与控制系统，以及如何分析最常见的系统。我们将研究一些高级且常用的C2工具，了解它们在网络中的行为，并尝试开发识别它们的策略。
- en: Questions and exercises
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题与练习
- en: 'Attempt the following exercise for gaining hands-on experience with network
    malware analysis:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试以下练习，以获得网络恶意软件分析的实战经验：
- en: Complete all exercises on Emotet Banking Trojan from [https://www.malware-traffic-analysis.net/training-exercises.html](https://www.malware-traffic-analysis.net/training-exercises.html)
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成来自[https://www.malware-traffic-analysis.net/training-exercises.html](https://www.malware-traffic-analysis.net/training-exercises.html)的Emotet银行木马的所有练习
- en: Complete challenge 10 and 11 from [https://github.com/nipunjaswal/networkforensics/tree/master/Challenges](https://github.com/nipunjaswal/networkforensics/tree/master/Challenges)?
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成来自[https://github.com/nipunjaswal/networkforensics/tree/master/Challenges](https://github.com/nipunjaswal/networkforensics/tree/master/Challenges)的挑战10和11？
- en: Can you decrypt a ransomware through PCAP? If yes, how and under what conditions?
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你能通过PCAP解密勒索病毒吗？如果可以，如何解密，并在什么条件下解密？
- en: Most of the Command and Control servers have?
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 大多数指挥与控制服务器有吗？
- en: Encryption
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加密
- en: Encoding
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编码
- en: Beaconing behavior
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 信标行为
- en: None of the above
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述都不是
- en: All of the above
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述所有内容
- en: Most of the banking Trojans gets installed on the system through?
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 大多数银行木马是通过什么方式安装到系统中的？
- en: Phishing
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网络钓鱼
- en: Malspam
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 垃圾邮件
- en: Exploits
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 漏洞利用
- en: Human errors
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 人为错误
- en: All of the above
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述所有内容
- en: None of the above
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述都不是
- en: Further reading
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To gain the most out of this chapter, go through the following links:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最大化本章的收获，请访问以下链接：
- en: Read more on malware analysis at [https://www.sans.org/reading-room/whitepapers/malicious/paper/2103](https://www.sans.org/reading-room/whitepapers/malicious/paper/2103)
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读更多有关恶意软件分析的内容，请访问[https://www.sans.org/reading-room/whitepapers/malicious/paper/2103](https://www.sans.org/reading-room/whitepapers/malicious/paper/2103)
- en: Read more on WannaCry ransomware at [https://www.endgame.com/blog/technical-blog/wcrywanacry-ransomware-technical-analysis](https://www.endgame.com/blog/technical-blog/wcrywanacry-ransomware-technical-analysis)
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读更多关于WannaCry勒索病毒的信息，请访问[https://www.endgame.com/blog/technical-blog/wcrywanacry-ransomware-technical-analysis](https://www.endgame.com/blog/technical-blog/wcrywanacry-ransomware-technical-analysis)
- en: In-Depth analysis of SamSam Ransomware at [https://www.crowdstrike.com/blog/an-in-depth-analysis-of-samsam-ransomware-and-boss-spider/](https://www.crowdstrike.com/blog/an-in-depth-analysis-of-samsam-ransomware-and-boss-spider/)
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于SamSam勒索病毒的深入分析，请访问[https://www.crowdstrike.com/blog/an-in-depth-analysis-of-samsam-ransomware-and-boss-spider/](https://www.crowdstrike.com/blog/an-in-depth-analysis-of-samsam-ransomware-and-boss-spider/)
