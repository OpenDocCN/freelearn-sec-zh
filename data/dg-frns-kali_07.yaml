- en: Memory Forensics with Volatility
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Volatility进行内存取证
- en: In the previous chapters, we looked at the various types of memory. This included
    RAM and the swap, or paging, file, which is an area of the hard disk drive which,
    although slower, functions as RAM. We also discussed the issue of RAM being volatile,
    meaning that the data in the RAM is easily lost when there is no longer electrical
    charge or current to the RAM chip. With the data on RAM being the most volatile,
    it ranks high in the *order of volatility* and must be forensically acquired and
    preserved as a matter of high priority.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们看了各种类型的内存。这包括RAM和交换或分页文件，它是硬盘驱动器上的一个区域，虽然速度较慢，但作为RAM。我们还讨论了RAM易失性的问题，这意味着当RAM芯片不再有电荷或电流时，RAM中的数据很容易丢失。由于RAM上的数据最易失性，因此在易失性顺序中排名较高，并且必须作为高优先级的取证对象进行获取和保留。
- en: Many types of data and forensic artifacts reside in RAM and the paging file.
    As discussed earlier, login passwords, user information, running and hidden processes,
    and even encrypted passwords are just some of the many types of interesting data
    that can be found when performing RAM analysis, further compounding the need for
    memory forensics.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 许多类型的数据和取证物品驻留在RAM和分页文件中。正如前面讨论的，登录密码、用户信息、运行和隐藏进程，甚至加密密码只是在进行RAM分析时可以找到的许多有趣数据类型之一，进一步增加了对内存取证的需求。
- en: In this chapter, we will look at the very powerful Volatility Framework and
    its many uses in memory forensics.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看功能强大的Volatility框架及其在内存取证中的许多用途。
- en: About the Volatility Framework
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于Volatility框架
- en: The Volatility Framework is an open source, cross-platform, incident response
    framework that comes with many useful plugins that provide the investigator with
    a wealth of information from a snapshot of memory, also known as a **memory dump**.
    The concept of Volatility has been around for a decade, and apart from analyzing
    running and hidden processes, is also a very popular choice for malware analysis.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Volatility框架是一个开源的、跨平台的、事件响应框架，提供了许多有用的插件，可以从内存快照（也称为内存转储）中为调查人员提供丰富的信息。Volatility的概念已经存在了十年，除了分析运行和隐藏进程之外，还是恶意软件分析的一个非常受欢迎的选择。
- en: To create a memory dump, several tools such as FTK imager, CAINE, Helix, and **LiME**
    (an acronym for **Linux Memory Extractor**) can be used to acquire the memory
    image, or memory dump, and then be investigated and analyzed by the tools within
    the Volatility Framework.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建内存转储，可以使用FTK imager、CAINE、Helix和**LiME**（Linux Memory Extractor的缩写）等多种工具来获取内存图像或内存转储，然后通过Volatility框架中的工具进行调查和分析。
- en: 'The Volatility Framework can be run on any  operating system (32- and 64-bit)
    that supports Python, including:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Volatility框架可以在支持Python的任何操作系统（32位和64位）上运行，包括：
- en: Windows XP, 7, 8,8.1, and Windows 10
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows XP，7，8，8.1和Windows 10
- en: Windows Server 2003, 2008, 2012/R2, and 2016
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows Server 2003，2008，2012/R2和2016
- en: Linux 2.6.11 - 4.2.3 (including Kali, Debian, Ubuntu, CentOS, and more)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux 2.6.11 - 4.2.3（包括Kali、Debian、Ubuntu、CentOS等）
- en: macOS Leopard (10.5.x) and Snow Leopard (10.12.x)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS Leopard（10.5.x）和Snow Leopard（10.12.x）
- en: 'Volatility supports several memory dump formats (both 32- and 64-bit), including:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Volatility支持多种内存转储格式（32位和64位），包括：
- en: Windows crash and hibernation dumps (Windows 7 and earlier)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows崩溃和休眠转储（Windows 7及更早版本）
- en: VirtualBox
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VirtualBox
- en: VMWare `.vmem` dump
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VMWare `.vmem` 转储
- en: VMware saved state and suspended dumps—`.vmss`/`.vmsn`
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VMware保存状态和挂起转储—`.vmss`/`.vmsn`
- en: Raw physical memory—`.dd`
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原始物理内存—`.dd`
- en: Direct physical memory dump over IEEE 1394 FireWire
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过IEEE 1394 FireWire直接物理内存转储
- en: '**Expert Witness Format** (**EWF**)—`.E01`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**专家证人格式**（EWF）—`.E01`'
- en: '**QEMU** (**Quick Emulator**)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: QEMU（快速模拟器）
- en: Volatility even allows for conversion between these formats and boasts of being
    able to accomplish everything similar tools can.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Volatility甚至允许在这些格式之间进行转换，并自称能够完成类似工具的所有任务。
- en: Downloading test images for use with Volatility
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载用于Volatility的测试图像
- en: For this chapter, we'll be using a Windows XP image named `cridex.vmem`, which
    can be downloaded directly from  [https://github.com/volatilityfoundation/volatility/wiki/Memory-Samples](https://github.com/volatilityfoundation/volatility/wiki/Memory-Samples).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用一个名为`cridex.vmem`的Windows XP图像，可以直接从[https://github.com/volatilityfoundation/volatility/wiki/Memory-Samples](https://github.com/volatilityfoundation/volatility/wiki/Memory-Samples)下载。
- en: 'Select the link with the Description column, Malware - Cridex to download the
    `cridex.vmem` image:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 选择带有描述列的链接，恶意软件 - Cridex，下载`cridex.vmem`图像：
- en: '![](img/4ad0bf37-39a4-419e-b510-2dd83de2c04b.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4ad0bf37-39a4-419e-b510-2dd83de2c04b.png)'
- en: There are many other images on this page that are also publicly available for
    analysis. To practice working with the Volatility Framework and further enhance
    your analytical skills, you may wish to download as many as you like and use the
    various plugins available in Volatility.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此页面上还有许多其他图像可供分析。为了练习使用Volatility框架并进一步提高您的分析技能，您可能希望下载尽可能多的图像，并使用Volatility中提供的各种插件。
- en: Image location
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图像位置
- en: 'As we''ll soon see, all plugins in the Volatility Framework are used through
    the Terminal. To make access to the image file easier by not having to specify
    a lengthy path to the image, we have moved the `cridex.vmem` image to the `Desktop`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们将很快看到的，Volatility框架中的所有插件都是通过终端使用的。为了使访问图像文件更加方便，不必指定图像的冗长路径，我们已将`cridex.vmem`图像移动到`桌面`：
- en: '![](img/341f9fda-2e37-4130-9e17-330c8938cd31.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/341f9fda-2e37-4130-9e17-330c8938cd31.png)'
- en: 'We can also change the directory to the `Desktop` and then run the Volatility
    Framework and its plugins from there. To do this, we open a new Terminal and type
    the following command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将目录更改为`桌面`，然后从那里运行Volatility框架及其插件。为此，我们打开一个新的终端并输入以下命令：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can also view the contents of the `Desktop` to ensure that the `cridex.vmem`
    file is present by typing `ls -l`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以查看`桌面`的内容，以确保`cridex.vmem`文件存在，方法是输入`ls -l`：
- en: '![](img/b5e7f575-480d-4d95-8822-1d1588210831.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b5e7f575-480d-4d95-8822-1d1588210831.png)'
- en: Using Volatility in Kali Linux
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Kali Linux中使用Volatility
- en: 'To start the Volatility Framework, click on the All Applications button at
    the bottom of the sidebar and type `volatility` in the search bar:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动Volatility Framework，请单击侧边栏底部的所有应用程序按钮，然后在搜索栏中键入`volatility`：
- en: '![](img/a4f58b6a-0d2b-4cbe-9735-f968bfbf8d08.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a4f58b6a-0d2b-4cbe-9735-f968bfbf8d08.png)'
- en: 'Clicking on the volatility icon starts the program in a Terminal. When Volatility
    starts, we see that the version being used is `2.6` and also presents us with
    options for use:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 单击Volatility图标会在终端中启动程序。当Volatility启动时，我们看到正在使用的版本是`2.6`，并为我们提供了使用选项：
- en: '![](img/5b957c49-2094-4dfa-b57e-63446ea1b0f7.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5b957c49-2094-4dfa-b57e-63446ea1b0f7.png)'
- en: 'For a complete list of all plugins at your fingertips, open a separate Terminal
    and run the `volatility -h` command, rather than having to scroll to the top of
    the Terminal that you are using to run Volatility plugin commands:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得所有插件的完整列表，打开一个单独的终端并运行`volatility -h`命令，而不是不得不滚动到您用于运行Volatility插件命令的终端的顶部：
- en: '![](img/72e86bfa-2f68-4d4e-a749-1bddcb4a60b1.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/72e86bfa-2f68-4d4e-a749-1bddcb4a60b1.png)'
- en: 'The following screenshot shows a snippet of some of the many plugins within
    the Volatility Framework:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了Volatility Framework中许多插件的片段：
- en: '![](img/faf6f1c7-46da-4c72-a2a0-3f29963eae96.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/faf6f1c7-46da-4c72-a2a0-3f29963eae96.png)'
- en: 'This list comes in handy when performing analysis as each plugin comes with
    its own short description. The following screenshot shows a snippet of the `help`
    command, which gives a description of the `imageinfo` plugin:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行分析时，此列表非常有用，因为每个插件都带有自己的简短描述。以下截图显示了`help`命令的片段，其中提供了`imageinfo`插件的描述：
- en: '![](img/578d5e2d-0111-4db0-8b69-9dd3003dd6c8.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/578d5e2d-0111-4db0-8b69-9dd3003dd6c8.png)'
- en: 'The format for using plugins in Volatility is:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在Volatility中使用插件的格式是：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As seen in the previous section, to use the `imageinfo` plugin, we would type:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一节所示，要使用`imageinfo`插件，我们将键入：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Choosing a profile in Volatility
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Volatility中选择配置文件
- en: All operating systems store information in RAM, however, they may be situated
    in different locations within the memory, according to the operating system used.
    In Volatility, we must choose a profile that best identifies the type of operating
    system and service pack that helps Volatility in identifying locations that store
    artifacts and useful information.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 所有操作系统都将信息存储在RAM中，但是根据所使用的操作系统，它们可能位于内存中的不同位置。在Volatility中，我们必须选择最能识别操作系统类型和服务包的配置文件，以帮助Volatility识别存储工件和有用信息的位置。
- en: Choosing a profile is relatively simple, as volatility does all the work for
    us, using the `imageinfo` plugin.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 选择配置文件相对简单，因为Volatility会使用`imageinfo`插件为我们完成所有工作。
- en: The imageinfo plugin
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`imageinfo`插件'
- en: This plugin gives information about the images used, including the suggested
    operating system and `Image Type (Service Pack)`, the `Number of Processors` used,
    and the date and time of the image.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此插件提供有关所使用的图像的信息，包括建议的操作系统和`Image Type (Service Pack)`，使用的`Number of Processors`，以及图像的日期和时间。
- en: 'The following command is used:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](img/db2117f6-2736-421f-beca-5bbb24bae972.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/db2117f6-2736-421f-beca-5bbb24bae972.png)'
- en: 'The `imageinfo` output shows the `Suggested Profile(s)` as `WinXPSP2x86` and
    `WinXPSP3x86`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`imageinfo`输出显示`Suggested Profile(s)`为`WinXPSP2x86`和`WinXPSP3x86`：'
- en: '**WinXP**: Windows XP'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WinXP**：Windows XP'
- en: '**SP2/SP3**: Service Pack 2/Service Pack 3'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SP2/SP3**：Service Pack 2/Service Pack 3'
- en: '**x86**: 32 bit architecture'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**x86**：32位架构'
- en: '![](img/c0ef5c59-95c9-4f2c-9938-17753534f374.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c0ef5c59-95c9-4f2c-9938-17753534f374.png)'
- en: 'The image type, or service pack, is displayed as `3`, suggesting that this
    is a Windows XP, Service Pack 3, 32-bit (x86) operating system that will be used
    as the profile for the case:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图像类型或服务包显示为`3`，表明这是一个将用作案例配置文件的Windows XP，Service Pack 3，32位（x86）操作系统：
- en: '![](img/bc571c58-962c-4628-83eb-390c313bc50a.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bc571c58-962c-4628-83eb-390c313bc50a.png)'
- en: Once the profile has been chosen, we can now proceed with using Volatility plugins
    for analysis of the `cridex.vmem` image.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 选择了配置文件后，我们现在可以继续使用Volatility插件来分析`cridex.vmem`图像。
- en: Process identification and analysis
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进程识别和分析
- en: 'To identify and link connected processes, their IDs, times started, and offset
    locations within the memory image, we will be using the following four plugins
    to get us started:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了识别和链接连接的进程，它们的ID，启动时间和内存映像中的偏移位置，我们将使用以下四个插件来开始：
- en: '`pslist`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pslist`'
- en: '`pstree`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pstree`'
- en: '`psscan`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`psscan`'
- en: '`psxview`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`psxview`'
- en: The pslist command
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`pslist`命令'
- en: This tool not only displays a list of all running processes, but also gives
    useful information such as the **Process ID** (**PID**) and the **Parent PID**
    (**PPID**), and also shows the time the processes were started. In the screenshot
    displayed in this section, we can see the `System`, `winlogon.exe`, `services.exe`,
    `svchost.exe`, and `explorer.exe` services are all started first and then followed
    by `reader_sl.exe`, `alg.exe`, and finally `wuauclt.exe`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 此工具不仅显示所有运行中的进程列表，还提供有用的信息，如**进程ID**（**PID**）和**父进程ID**（**PPID**），还显示进程启动的时间。在本节显示的截图中，我们可以看到`System`，`winlogon.exe`，`services.exe`，`svchost.exe`和`explorer.exe`服务都是首先启动的，然后是`reader_sl.exe`，`alg.exe`，最后是`wuauclt.exe`。
- en: The PID identifies the process and the PPID identifies the parent of the process.
    Looking at the `pslist` output, we can see that the `winlogon.exe` process has
    a `PID` of `608` and a `PPID` of `368`. The PPID’s of the `services.exe` and the
    `lsass.exe` processes (directly after the `winlogon.exe` process) are both `608`,
    indicating that `winlogon.exe` is in fact the PPID for both `services.exe` and
    `lsass.exe`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: PID标识进程，PPID标识进程的父进程。查看`pslist`输出，我们可以看到`winlogon.exe`进程的`PID`为`608`，`PPID`为`368`。`services.exe`和`lsass.exe`进程的PPID（在`winlogon.exe`进程之后）都是`608`，表明`winlogon.exe`实际上是`services.exe`和`lsass.exe`的PPID。
- en: For those new to process IDs and processes themselves, a quick Google search
    can assist with identification and description information. It is also useful
    to become familiar with many of the startup processes in order to readily point
    out processes that may be unusual or suspect.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些对进程ID和进程本身不熟悉的人，快速的谷歌搜索可以帮助识别和描述信息。熟悉许多启动进程也很有用，以便能够快速指出可能不寻常或可疑的进程。
- en: The timing and order of the processes should also be noted as these may assist
    in investigations. In the following screenshot, we can see that several processes,
    including `explorer.exe`, `spoolsv.exe`, and `reader_sl.exe`, all started at the
    same time of  `02:42:36 UTC+0000`. We can also tell that `explorer.exe` is the
    PPID of `reader_sl.exe`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 还应该注意进程的时间和顺序，因为这些可能有助于调查。在下面的截图中，我们可以看到几个进程，包括`explorer.exe`、`spoolsv.exe`和`reader_sl.exe`，都是在`02:42:36
    UTC+0000`同时启动的。我们还可以看到`explorer.exe`是`reader_sl.exe`的PPID。
- en: Adding to this analysis, we can see that there are two instances of `wuauclt.exe`
    with `svchost.exe` as the PPID.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个分析中，我们可以看到有两个`wuauclt.exe`的实例，其父进程是`svchost.exe`。
- en: 'The `pslist` command used, is as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的`pslist`命令如下：
- en: '[PRE4]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](img/ad198753-e43c-4033-929f-9e55b7baeb2a.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ad198753-e43c-4033-929f-9e55b7baeb2a.png)'
- en: The pstree command
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pstree命令
- en: Another process identification command that can be used to list processes is
    the `pstree` command. This command shows the same list of processes as the `pslist`
    command but indentation is also used to identify child and parent processes.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可以用来列出进程的进程识别命令是`pstree`命令。该命令显示与`pslist`命令相同的进程列表，但缩进也用于标识子进程和父进程。
- en: 'In the following screenshot, the last two processes listed are `explorer.exe`
    and `reader_sl.exe`. The `explorer.exe` is not indented, while `reader_sl` is
    indented, indicating that `sl_reader` is the child process and `explorer.exe` is
    the parent process:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，列出的最后两个进程是`explorer.exe`和`reader_sl.exe`。`explorer.exe`没有缩进，而`reader_sl`有缩进，表明`sl_reader`是子进程，`explorer.exe`是父进程：
- en: '![](img/3f8518c9-5b86-44fe-ba00-d48cdb90a6f5.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f8518c9-5b86-44fe-ba00-d48cdb90a6f5.png)'
- en: The psscan command
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: psscan命令
- en: 'After viewing the list of running processes, we run the `psscan` command by
    typing:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 查看运行进程列表后，我们通过输入以下命令运行`psscan`命令：
- en: '[PRE5]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `psscan` command displays inactive and even hidden processes that can be
    used by malware, such as rootkits, and are well known for doing just that to evade
    discovery by users and antivirus programs.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`psscan`命令显示了可以被恶意软件使用的非活动甚至隐藏的进程，如rootkits，这些进程以逃避用户和杀毒程序的发现而闻名。'
- en: 'The output of both the `pslist` and `psscan` commands should be compared to
    observe any anomalies:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`pslist`和`psscan`命令的输出应该进行比较，以观察任何异常情况：'
- en: '![](img/fd160291-cc00-42b4-ac7d-b5021f0fa375.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd160291-cc00-42b4-ac7d-b5021f0fa375.png)'
- en: The psxview plugin
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: psxview插件
- en: As with `psscan`, the `psxview` plugin is used to find and list hidden processes.
    With `psxview` however, a variety of scans are run, including `pslist` and `psscan`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 与`psscan`一样，`psxview`插件用于查找和列出隐藏进程。然而，使用`psxview`，会运行各种扫描，包括`pslist`和`psscan`。
- en: 'The command to run the `psxview` plugin is as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`psxview`插件的命令如下：
- en: '[PRE6]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](img/a80fcda9-a5cc-4aa9-84ad-ab51f81dfed4.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a80fcda9-a5cc-4aa9-84ad-ab51f81dfed4.png)'
- en: Analyzing network services and connections
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析网络服务和连接
- en: Volatility can be used to identify and analyze active, terminated, and hidden
    connections along with ports and processes. All protocols are supported and Volatility
    also reveals details of ports used by processes including the times they were
    started.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Volatility可以用于识别和分析活动的、终止的和隐藏的连接，以及端口和进程。所有协议都受支持，Volatility还显示了进程使用的端口的详细信息，包括它们启动的时间。
- en: 'For these purposes, we use the following three commands:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们使用以下三个命令：
- en: '`connections`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connections`'
- en: '`connscan`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connscan`'
- en: '`sockets`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sockets`'
- en: The connections command
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接命令
- en: 'The `connections` command lists active connections at that point in time, displaying
    local and remote IP addresses with ports and PID. The `connections` command is
    used only for Windows XP and 2003 Server (both 32- and 64-bit). The `connections`
    command is used as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`connections`命令列出了当时的活动连接，显示了本地和远程IP地址以及端口和PID。`connections`命令仅用于Windows XP和2003服务器（32位和64位）。`connections`命令的使用如下：'
- en: '[PRE7]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](img/dee486cb-0335-435d-bf86-815dca17796f.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dee486cb-0335-435d-bf86-815dca17796f.png)'
- en: The connscan command
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: connscan命令
- en: 'The `connections` command displayed only one connection as active at that time.
    To display a list of connections that have been terminated, the `connscan` command
    is used. The `connscan` command is also only for Windows XP and 2003 Server (both
    32 and 64-bit) systems:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`connections`命令在那个时候只显示了一个活动连接。要显示已终止的连接列表，使用`connscan`命令。`connscan`命令也仅适用于Windows
    XP和2003服务器（32位和64位）系统：'
- en: '[PRE8]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](img/5e94a550-3a24-4ae2-b76c-d8ffdf292c13.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e94a550-3a24-4ae2-b76c-d8ffdf292c13.png)'
- en: Using the `connscan` command, we are able to see that the same local address
    was previously connected to another `Remote Address` with the IP `125.19.103.198:8080`.
    The `Pid` of `1484` tells us that connection was made by the `explorer.exe` process
    (as displayed using the `pslist` command earlier).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`connscan`命令，我们可以看到相同的本地地址之前连接到另一个带有IP`125.19.103.198:8080`的`远程地址`。`1484`的`Pid`告诉我们，连接是由`explorer.exe`进程建立的（如之前使用`pslist`命令显示的）。
- en: 'More information on remote addresses can be obtained using IP lookup tools
    and websites such as [http://whatismyipaddress.com/ip-lookup](http://whatismyipaddress.com/ip-lookup):'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用IP查找工具和网站（例如[http://whatismyipaddress.com/ip-lookup](http://whatismyipaddress.com/ip-lookup)）获取有关远程地址的更多信息：
- en: '![](img/3d9788a6-fda5-45d2-8773-2bb50934969b.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3d9788a6-fda5-45d2-8773-2bb50934969b.png)'
- en: 'By clicking on the Get IP Details button, the following results are presented
    to us including ISP name, Continent and Country details, along with a map showing
    approximate location of the device with that IP:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击“获取IP详细信息”按钮，我们得到以下结果，包括ISP名称、洲和国家详情，以及显示设备大致位置的地图：
- en: '![](img/e245323b-95d2-4c42-a388-34d9062597da.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e245323b-95d2-4c42-a388-34d9062597da.png)'
- en: The sockets plugin
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: sockets插件
- en: 'The `sockets` plugin can be used to give additional connectivity information
    listening sockets. Although UDP and TCP are the only protocols listed in the output
    in the following screenshot, the `sockets` command supports all protocols:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`sockets`插件可用于提供额外的连接信息监听套接字。尽管UDP和TCP是以下截图中输出的唯一协议，但`sockets`命令支持所有协议：'
- en: '>![](img/be8badb1-acdf-4f31-b141-ff590689e6d0.png)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '>![](img/be8badb1-acdf-4f31-b141-ff590689e6d0.png)'
- en: DLL analysis
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DLL分析
- en: '**DLLs** (**Dynamic Link Libraries**) are specific to Microsoft and contain
    code that can be used by multiple programs simultaneously. Inspection of a process''s
    running DDLs and the version information of files and products may assist in correlating
    processes. Processes and DLL information should also be analyzed as they relate
    to user accounts.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**DLL**（动态链接库）是特定于Microsoft的，包含可以同时供多个程序使用的代码。检查进程的运行DDL和文件和产品的版本信息可能有助于相关进程。还应分析进程和DLL信息，因为它们与用户帐户相关。'
- en: 'For these tasks we can use the following plugins:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些任务，我们可以使用以下插件：
- en: '`verinfo`'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`verinfo`'
- en: '`dlllist`'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dlllist`'
- en: '`getsids`'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getsids`'
- en: The verinfo command
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: verinfo命令
- en: This command lists version information (`verinfo`) about **PE** (**portable
    executable**) files. The output of this file is usually quite lengthy and so can
    be run in a separate Terminal, should the investigator not wish to continuously
    scroll through the current Terminal to review past plugin command lists and output.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '此命令列出了有关**PE**（**可移植可执行文件**）文件的版本信息（`verinfo`）。此文件的输出通常非常冗长，因此可以在单独的终端中运行，如果调查人员不希望不断滚动当前终端以查看过去的插件命令列表和输出。 '
- en: 'The `verinfo` command is used as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`verinfo`命令的使用如下：'
- en: '[PRE9]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](img/bde31f48-77de-4ac2-bc1c-82325244887a.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bde31f48-77de-4ac2-bc1c-82325244887a.png)'
- en: The dlllist plugin
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`dlllist`插件'
- en: The `dlllist` plugin lists all running DLLs at that time in memory. DLLs are
    composed of code that can be used by multiple programs simultaneously.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`dlllist`插件列出了内存中那个时间运行的所有DLL。DLL由可以同时供多个程序使用的代码组成。'
- en: 'The `dlllist` command is used as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`dlllist`命令的使用如下：'
- en: '[PRE10]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](img/2ae1efeb-ffa2-4ee6-9681-730b5b406ed2.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ae1efeb-ffa2-4ee6-9681-730b5b406ed2.png)'
- en: The getsids command
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`getsids`命令'
- en: All users can also be uniquely identified by a **Security Identifier** (**SID**).
    The `getsids` command has four very useful items in the order in which the processes
    were started (refer to `pslist` and `pstree` command screenshots).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 所有用户还可以通过**安全标识符**（**SID**）得到唯一标识。`getsids`命令按照进程启动的顺序有四个非常有用的项目（参考`pslist`和`pstree`命令的截图）。
- en: 'The format for the `getsids` command output is:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`getsids`命令输出的格式为：'
- en: '[PRE11]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The first result in the list for example, lists:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，列表中的第一个结果列出了：
- en: '[PRE12]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`System`: process'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System`：进程'
- en: '`(4)`: PID'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(4)`：PID'
- en: '`S - 1 - 5- 18`: SID'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`S - 1 - 5- 18`：SID'
- en: '`User`: Local system'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`用户`：本地系统'
- en: If the last number in the SID is in the range of 500, this indicates a user
    with administrator privileges. For example, `S – 1 – 5- 32-544` (administrators).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果SID中的最后一个数字在500范围内，这表示具有管理员特权的用户。例如，`S – 1 – 5- 32-544`（管理员）。
- en: 'The `getsids` command is used as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`getsids`命令的使用如下：'
- en: '[PRE13]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](img/a048a636-89d0-44fb-9cc7-a451156a8886.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a048a636-89d0-44fb-9cc7-a451156a8886.png)'
- en: 'Scrolling down the `getsids` output, we can see that a user named `Robert`
    with an SID of  `S-1-5-21-79336058` (non-administrator) has started or accessed
    `explorer.exe`, PID `1484`:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 向下滚动`getsids`输出，我们可以看到一个名为`Robert`的用户，其SID为`S-1-5-21-79336058`（非管理员），已启动或访问`explorer.exe`，PID为`1484`：
- en: '![](img/503913f5-ec5b-4fb0-bca7-4cf000f44b2e.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/503913f5-ec5b-4fb0-bca7-4cf000f44b2e.png)'
- en: Registry analysis
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册表分析
- en: Information  about every user, setting, program, and the Windows operating system
    itself can be found within the registry. Even hashed passwords can be found in
    the registry. In the Windows registry analysis, we will be using the following
    two plugins.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在注册表中可以找到有关每个用户、设置、程序和Windows操作系统本身的信息。甚至可以在注册表中找到哈希密码。在Windows注册表分析中，我们将使用以下两个插件。
- en: '`hivescan`'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hivescan`'
- en: '`hivelist`'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hivelist`'
- en: The hivescan plugin
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: hivescan插件
- en: The `hivescan` plugin displays the physical locations of available registry
    hives.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`hivescan`插件显示了可用注册表蜂巢的物理位置。'
- en: 'The command to run `hivescan` is as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`hivescan`的命令如下：
- en: <pre>**volatility --profile=WinXPSP3x86 -f cridex.vmem hivescan**![](img/9e017b45-e6d9-4e3b-8ac4-b2190123d6ea.png)
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: <pre>**volatility --profile=WinXPSP3x86 -f cridex.vmem hivescan**![](img/9e017b45-e6d9-4e3b-8ac4-b2190123d6ea.png)
- en: The hivelist plugin
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: hivelist插件
- en: For more detailed (and helpful) information on registry hives and locations
    within RAM, the `hivelist` plugin can be used. The `hivelist` command shows the
    details of `Virtual` and `Physical` addresses along with the easier readable plaintext
    names and locations.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 对于有关注册表蜂巢和RAM内位置的更详细（和有用的）信息，可以使用`hivelist`插件。`hivelist`命令显示`虚拟`和`物理`地址的详细信息，以及更易读的纯文本名称和位置。
- en: 'The command used to run `hivelist` is as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`hivelist`的命令如下：
- en: '[PRE14]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](img/4c251e63-0a56-46f3-a693-94e406d56905.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4c251e63-0a56-46f3-a693-94e406d56905.png)'
- en: Password dumping
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 密码转储
- en: 'The location of the **Security Accounts Manager** (**SAM**) file is also listed
    using the `hivelist` plugin, shown in the following screenshot. The `SAM` file
    contains hashed passwords for usernames in Windows machines. The path to the `SAM`
    file is seen in the following screenshot as `Windows\system32\config\SAM`. This
    file cannot be accessed by users within Windows while the system is on. This can
    be further used to acquire the hashed passwords in the `SAM` file to crack passwords
    using a `wordlist` along with password-cracking tools such as **John the Ripper**,
    also available in Kali Linux:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`hivelist`插件还列出了**安全帐户管理器**（**SAM**）文件的位置，如下截图所示。`SAM`文件包含Windows机器用户名的哈希密码。`SAM`文件的路径如下截图所示为`Windows\system32\config\SAM`。在Windows中，系统开启时用户无法访问此文件。这可以进一步用于使用`wordlist`和密码破解工具（如**John
    the Ripper**，也可在Kali Linux中使用）破解`SAM`文件中的哈希密码：
- en: '![](img/3c5e078f-8459-4cff-8608-1bb7742f291f.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c5e078f-8459-4cff-8608-1bb7742f291f.png)'
- en: Timeline of events
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件时间线
- en: Volatility can produce a list of timestamped events, which is essential to any
    investigation. To produce this list, we will use the `timeliner` plugin.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Volatility可以生成一个带有时间戳的事件列表，这对于任何调查都是必不可少的。为了生成这个列表，我们将使用`timeliner`插件。
- en: The timeliner plugin
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间线插件
- en: The `timeliner` plugin helps investigators by providing a timeline of all the
    events that took place when the image was acquired. Although we have an idea of
    what took place within this scenario, many other dumps may be quite large and
    far more detailed and complex.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`timeliner`插件通过提供图像获取时发生的所有事件的时间线来帮助调查人员。尽管我们对这种情况发生了什么有所了解，但许多其他转储可能会非常庞大，更加详细和复杂。'
- en: The `timeliner` plugin groups details by time and includes process, PID, process
    offset, DDLs used, registry details, and other useful information.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`timeliner`插件按时间分组详细信息，并包括进程、PID、进程偏移、使用的DDL、注册表详细信息和其他有用信息。'
- en: 'To run the `timeliner` command, we type the following:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行`timeliner`命令，我们输入以下内容：
- en: '[PRE15]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](img/ffd0f266-7b4b-419d-8524-ff4372d2bdb4.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ffd0f266-7b4b-419d-8524-ff4372d2bdb4.png)'
- en: 'The following is a snippet of the `timeliner` command, when scrolling further
    through its output:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`timeliner`命令的片段，当进一步滚动其输出时：
- en: '![](img/c06da379-1a2c-4200-a7e0-28e1cf7258f2.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c06da379-1a2c-4200-a7e0-28e1cf7258f2.png)'
- en: Malware analysis
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 恶意软件分析
- en: Adding to Volatility's impressive line-up of plugins is the `malfind` plugin.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在Volatility令人印象深刻的插件阵容中，还有`malfind`插件。
- en: The `malfind` plugin, as the name suggests, is used to find, or at least direct
    the investigator toward hints of, malware that may have been injected into various
    processes. The output of the `malfind` plugin may be particularly lengthy and
    so should be run in a separate Terminal to avoid constant scrolling when reviewing
    the output from the other plugin commands.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所示，`malfind`插件用于查找，或者至少指引调查人员找到可能已经注入到各种进程中的恶意软件的线索。`malfind`插件的输出可能特别冗长，因此应该在单独的终端中运行，以避免在审查其他插件命令的输出时不断滚动。
- en: 'The command used to run `malfind` is as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`malfind`的命令如下：
- en: '[PRE16]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](img/ae6b2287-56c6-4f2a-a987-9b3a5981ab4c.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae6b2287-56c6-4f2a-a987-9b3a5981ab4c.png)'
- en: The `malfind` plugin can also be run directly on processes using the `-p` switch.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`malfind`插件也可以直接在进程上使用`-p`开关运行。'
- en: 'As we''ve discovered, `winlogon.exe` is assigned the PID `608`. To run `malfind`
    on PID `608`, we type:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们发现的那样，`winlogon.exe`被分配了PID`608`。要在PID`608`上运行`malfind`，我们输入：
- en: '[PRE17]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](img/6129e6d3-d3fd-44e8-bcd9-85cb2772a63b.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6129e6d3-d3fd-44e8-bcd9-85cb2772a63b.png)'
- en: Summary
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at memory forensics and analysis using some of the
    many plugins available within the Volatility Framework. One of the first, and
    most important, steps in working with Volatility is choosing the profile that
    Volatility will use throughout the analysis. This profile tells Volatility what
    type of operating system is being used. Once the profile was chosen, we were able
    to successfully perform process, network, registry, DLL, and even malware analysis
    using this versatile tool. As we've seen, Volatility can perform several important
    functions in digital forensics and should be used together with other tools we've
    used previously to perform in-depth and detailed forensic analysis and investigations.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用了Volatility Framework中的许多可用插件进行内存取证和分析。在使用Volatility的工作中，首先也是最重要的一步是选择Volatility在整个分析过程中将使用的配置文件。这个配置文件告诉Volatility正在使用的操作系统类型。一旦选择了配置文件，我们就能够成功地使用这个多功能工具进行进程、网络、注册表、DLL甚至恶意软件分析。正如我们所看到的，Volatility可以在数字取证中执行几个重要的功能，并且应该与我们之前使用的其他工具一起使用，以进行深入和详细的取证分析和调查。
- en: Be sure to download more publicly available memory images and samples to test
    your skills in this area. Experiment with as many plugins as you can and of course,
    be sure to document your findings and consider sharing them online.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 一定要下载更多公开可用的内存映像和样本，以测试您在这个领域的技能。尽可能多地尝试各种插件，并当然，一定要记录您的发现并考虑在线分享。
- en: In our next chapter, we will move on to another powerful tool that does everything
    from acquisition to reporting. Let's get started with Autopsy—The Sleuth Kit®.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一章中，我们将转向另一个功能强大的工具，它可以从获取到报告的所有工作。让我们开始使用Autopsy—The Sleuth Kit®。
