- en: Post Exploitation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后期利用
- en: Post exploitation refers to the phase of a penetration test where a machine
    has already been exploited and code execution is available. The primary task is
    generally to maintain persistence so that you can keep a connection alive or leave
    a way to reconnect later. This chapter covers some common techniques for persistence;
    namely, bind shells, reverse bind shells, and web shells. We will also look at
    cross compiling, which is incredibly helpful when compiling shells for different
    operating systems from a single host.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 后期利用指的是渗透测试的一个阶段，在这个阶段，机器已经被利用并且代码执行已可用。主要任务通常是保持持久性，以便你能够保持连接或留下一种稍后重新连接的方式。本章将介绍一些常见的持久性技术，即绑定Shell、反向绑定Shell和Web
    Shell。我们还将探讨交叉编译，这在从单一主机为不同操作系统编译Shell时非常有用。
- en: Other objectives during the post exploit phase include finding sensitive data,
    making changes to files, and hiding your tracks so that forensic investigators
    will not be able to find evidence. You can cover your tracks by changing timestamps
    on files, modifying permissions, disabling shell history, and removing logs. This
    chapter covers some techniques for finding interesting files and covering tracks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 后期利用阶段的其他目标包括寻找敏感数据、修改文件以及掩盖痕迹，以防取证人员能够找到证据。你可以通过更改文件的时间戳、修改权限、禁用Shell历史记录和删除日志来掩盖痕迹。本章将介绍一些查找有趣文件和掩盖痕迹的技术。
- en: '[Chapter 4](1368accc-3f1c-4034-948f-009147d26eab.xhtml), *Forensics*, is closely
    related because performing a forensic investigation is not that different from
    exploring a freshly exploited machine. Both tasks are about learning what is on
    the system and finding interesting files. Similarly, [Chapter 5](e69a87b2-99ff-47cf-a935-4ef39304ed15.xhtml),
    *Packet Capturing and Injection*, is useful for doing network analysis from an
    exploited host. Many of the tools such as finding large files or finding recently
    modified files are helpful during this phase too. Refer to [Chapter 4](1368accc-3f1c-4034-948f-009147d26eab.xhtml),
    *Forensics*, and [Chapter 5](e69a87b2-99ff-47cf-a935-4ef39304ed15.xhtml), *Packet
    Capturing and Injection*, for more examples that can be used during the post exploitation
    phase.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[第4章](1368accc-3f1c-4034-948f-009147d26eab.xhtml)，*取证*，与此密切相关，因为进行取证调查与探索一个刚被利用的机器并没有太大区别。两者的任务都是了解系统上有什么并寻找有趣的文件。同样，[第5章](e69a87b2-99ff-47cf-a935-4ef39304ed15.xhtml)，*数据包捕获与注入*，在从一个被利用的主机进行网络分析时也非常有用。许多工具，如查找大文件或查找最近修改的文件，在此阶段也会非常有帮助。有关此阶段可用的更多示例，请参考[第4章](1368accc-3f1c-4034-948f-009147d26eab.xhtml)，*取证*，和[第5章](e69a87b2-99ff-47cf-a935-4ef39304ed15.xhtml)，*数据包捕获与注入*。'
- en: The post exploitation phase covers a wide variety of tasks, including privilege
    escalation, pivoting, stealing or destroying data, and host and network analyses.
    Because the scope is so broad and varies widely depending on the type of system
    you have exploited, this chapter focuses on a narrow scope of topics that should
    be useful in most scenarios.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 后期利用阶段涵盖了各种任务，包括特权提升、跳板攻击、窃取或销毁数据、以及主机和网络分析。由于其范围广泛，并且根据所利用的系统类型差异很大，本章将专注于一些在大多数场景中都很有用的狭义话题。
- en: When going through these exercises, try to look at things from the perspective
    of an attacker. Taking on this mindset while working through the examples will
    help you understand how to better protect your systems.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行这些练习时，尽量从攻击者的角度来看问题。在处理这些例子时保持这种思维方式将帮助你更好地理解如何保护你的系统。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将覆盖以下主题：
- en: Cross compiling
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交叉编译
- en: Bind shells
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绑定Shell
- en: Reverse bind shells
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反向绑定Shell
- en: Web shells
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web Shell
- en: Finding files with write permissions
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找具有写权限的文件
- en: Modifying file timestamps
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改文件时间戳
- en: Modifying file permissions
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改文件权限
- en: Modifying file ownership
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改文件所有权
- en: Cross compiling
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交叉编译
- en: Cross compiling is a feature that comes with Go and is very easy to use. It
    can be particularly useful if you are on a Linux machine performing a penetration
    test and you need to compile a custom reverse shell that will run on a Windows
    machine that you compromised.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 交叉编译是Go语言自带的一个功能，使用起来非常简单。如果你在Linux机器上进行渗透测试，且需要编译一个能够在你已经控制的Windows机器上运行的自定义反向Shell，这个功能特别有用。
- en: You can target several architectures and operating systems, and all you need
    to do is modify an environment variable. There is no need for any extra tools
    or compilers. Everything is built in for Go.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以针对多个架构和操作系统进行构建，所需做的只是修改一个环境变量。无需额外的工具或编译器。Go 内置了这一切。
- en: Simply change the `GOARCH` and `GOOS` environment variables to match your desired
    build target. You can build for Windows, Mac, Linux, and more. You can also build
    for the prominent 32-bit and 64-bit desktop processors as well as ARM and MIPS
    for devices such as the Raspberry Pi.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 只需将 `GOARCH` 和 `GOOS` 环境变量更改为匹配你希望构建的目标平台。你可以为 Windows、Mac、Linux 等操作系统进行构建。你还可以为主流的
    32 位和 64 位桌面处理器以及用于树莓派等设备的 ARM 和 MIPS 构建。
- en: 'As of this writing, the possible values for `GOARCH` are as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 截至本文撰写时，`GOARCH` 的可能值如下：
- en: '| `386` | `amd64` |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `386` | `amd64` |'
- en: '| `amd64p32` | `arm` |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `amd64p32` | `arm` |'
- en: '| `armbe` | `arm64` |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `armbe` | `arm64` |'
- en: '| `arm64be` | `ppc64` |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `arm64be` | `ppc64` |'
- en: '| `ppc64le` | `mips` |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `ppc64le` | `mips` |'
- en: '| `mipsle` | `mips64` |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `mipsle` | `mips64` |'
- en: '| `mips64le` | `mips64p32` |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `mips64le` | `mips64p32` |'
- en: '| `mips64p32le` | `ppc` |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `mips64p32le` | `ppc` |'
- en: '| `s390` | `s390x` |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `s390` | `s390x` |'
- en: '| `sparc` | `sparc64` |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `sparc` | `sparc64` |'
- en: 'The options for `GOOS` are as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`GOOS` 的选项如下：'
- en: '| `android` | `darwin` |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `android` | `darwin` |'
- en: '| `dragonfly` | `freebsd` |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `dragonfly` | `freebsd` |'
- en: '| `linux` | `nacl` |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `linux` | `nacl` |'
- en: '| `netbsd` | `openbsd` |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `netbsd` | `openbsd` |'
- en: '| `plan9` | `solaris` |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `plan9` | `solaris` |'
- en: '| `windows` | `zos` |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `windows` | `zos` |'
- en: Note that not every architecture can be used with every operating system. Refer
    to the Go official documentation ([https://golang.org/doc/install/source#environment](https://golang.org/doc/install/source#environment))
    to know which architectures and operating systems can be combined.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，并非每种架构都可以与每个操作系统一起使用。请参考 Go 官方文档 ([https://golang.org/doc/install/source#environment](https://golang.org/doc/install/source#environment))
    了解哪些架构和操作系统可以组合使用。
- en: If you are targeting the ARM platform, you can optionally specify the ARM version
    by setting the `GOARM` environment variable. A reasonable default is chosen automatically,
    and it is recommended that you do not change it. The possible `GOARM` values are
    `5`, `6`, and `7`, at the time of this writing.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你针对的是 ARM 平台，你可以通过设置 `GOARM` 环境变量来可选地指定 ARM 版本。系统会自动选择一个合理的默认值，建议不要更改它。目前可用的
    `GOARM` 值有 `5`、`6` 和 `7`。
- en: 'In Windows, set the environment variables in Command Prompt, as given here:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 中，按照此处的说明在命令提示符中设置环境变量：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In Linux/Mac you can also set the environment variables in a number of ways,
    but you can specify it for a single build command like this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux/Mac 中，你也可以通过多种方式设置环境变量，但你可以像这样为单个构建命令指定它：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Read more about environment variables and cross compiling at [https://golang.org/doc/install/source#environment](https://golang.org/doc/install/source#environment).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读更多关于环境变量和交叉编译的信息，参见 [https://golang.org/doc/install/source#environment](https://golang.org/doc/install/source#environment)。
- en: This method of cross compiling was introduced with Go 1.5\. Before that, a shell
    script was provided by the Go developers, but it is no longer supported, and it
    is archived at [https://github.com/davecheney/golang-crosscompile/tree/archive](https://github.com/davecheney/golang-crosscompile/tree/archive).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这种交叉编译方法是随着 Go 1.5 引入的。在那之前，Go 开发者提供了一个 shell 脚本，但现在已经不再支持，并且已被归档在 [https://github.com/davecheney/golang-crosscompile/tree/archive](https://github.com/davecheney/golang-crosscompile/tree/archive)。
- en: Creating bind shells
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建绑定 shell
- en: Bind shells are programs that bind to a port and listen for connections and
    serves shells. Whenever a connection is received, it runs a shell, such as Bash,
    and passes off the standard input, output, and error handles to the remote connection.
    It can listen forever and serve shells to multiple incoming connections.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 绑定 shell 是一种程序，它绑定到端口并监听连接，提供 shell 服务。每当收到一个连接时，它会运行一个 shell，如 Bash，并将标准输入、输出和错误句柄传递给远程连接。它可以永远监听并为多个传入连接提供
    shell 服务。
- en: Bind shells are useful when you want to add persistent access to a machine.
    You can run the bind shell and then disconnect or inject the bind shell into memory
    through a remote code execution vulnerability.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 绑定 shell 在你希望为机器添加持久访问时非常有用。你可以运行绑定 shell，然后断开连接或通过远程代码执行漏洞将绑定 shell 注入到内存中。
- en: The biggest problem with bind shells is that firewalls and the NAT routing can
    prevent direct remote access to the computer. Incoming connections are usually
    blocked or routed in a way that prevent connecting to the bind shell. For this
    reason, reverse bind shells are often used. The next section covers reverse bind
    shells.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 绑定 shell 最大的问题是防火墙和 NAT 路由可能会阻止直接远程访问计算机。传入连接通常会被阻止，或者被路由到无法连接到绑定 shell 的方式。基于这个原因，通常使用反向绑定
    shell。下一部分将讲解反向绑定 shell。
- en: When compiling this example on Windows, it comes out to 1,186 bytes. Considering
    that some shells written in C/Assembly can be under 100 bytes, it could be considered
    relatively large. If you are exploiting an application, you may have very limited
    space to inject a bind shell. You could make the example smaller by omitting the
    `log` package, removing the optional command-line arguments, and ignoring errors.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上编译这个例子时，大小为 1,186 字节。考虑到一些用 C/Assembly 编写的 shell 可以小于 100 字节，这个大小算是相对较大。如果你在利用一个应用程序，你可能会有非常有限的空间来注入一个绑定
    shell。你可以通过省略 `log` 包、删除可选的命令行参数以及忽略错误，来使这个示例更小。
- en: TLS can be used instead of plaintext by swapping `net.Listen()` with `tls.Listen()`.
    [Chapter 6](f68073f0-8cc8-40b5-af0e-795ce30e5271.xhtml), *Cryptography*, has an
    example of a TLS client and server.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 TLS 来代替明文传输，只需将 `net.Listen()` 替换为 `tls.Listen()`。[第六章](f68073f0-8cc8-40b5-af0e-795ce30e5271.xhtml)，*加密学*，提供了一个
    TLS 客户端和服务器的示例。
- en: Interfaces are a powerful feature of Go, and their convenience is exemplified
    here with the reader and writer interfaces. The only requirement to satisfy the
    reader and writer interfaces is to implement the `.Read()` and `.Write()` functions,
    respectively, for the type. Here, the network connection implements the `Read()`
    and `Write()` functions and so does `exec.Command`. We tie the reader and writer
    interfaces together easily because of the shared interfaces they implement.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 接口是 Go 语言的一个强大特性，这里通过 reader 和 writer 接口展示了它的便利性。满足 reader 和 writer 接口的唯一要求是分别实现
    `.Read()` 和 `.Write()` 函数。在这里，网络连接实现了 `Read()` 和 `Write()` 函数，`exec.Command` 也是如此。由于它们实现了共享的接口，我们可以轻松地将
    reader 和 writer 接口绑定在一起。
- en: 'In this next example, we look at creating a bind shell for Linux, using the
    built-in `/bin/sh` shell. It will bind and listen for connections, serving a shell
    to anyone who connects:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将创建一个 Linux 的绑定 shell，使用内置的`/bin/sh` shell。它将绑定并监听连接，为任何连接的用户提供一个 shell：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Creating reverse bind shells
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建反向绑定 shell
- en: Reverse bind shells overcome the firewall and NAT issue. Instead of listening
    for incoming connections, it dials out to a remote server (one you control and
    are listening on). When you get the connection on your machine, you have a shell
    that is running on the computer behind the firewall.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 反向绑定 shell 解决了防火墙和 NAT 问题。它不是监听传入连接，而是主动拨号到一个远程服务器（一个你控制并且在监听的服务器）。当你在你的计算机上收到连接时，你就拥有了一个运行在防火墙后面的计算机上的
    shell。
- en: This example uses plaintext TCP sockets, but you can easily swap `net.Dial()`
    with `tls.Dial()`. [Chapter 6](f68073f0-8cc8-40b5-af0e-795ce30e5271.xhtml), *Cryptography*,
    has examples of a TLS client and server if you want to modify these examples to
    use TLS.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子使用了明文 TCP 套接字，但你可以轻松地将 `net.Dial()` 替换为 `tls.Dial()`。[第六章](f68073f0-8cc8-40b5-af0e-795ce30e5271.xhtml)，*加密学*，提供了
    TLS 客户端和服务器的示例，如果你想修改这些示例以使用 TLS。
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Creating web shells
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Web shell
- en: A web shell is similar to a bind shell, but, instead of listening as a raw TCP
    socket, it listens and communicates as an HTTP server. It is a useful method of
    creating persistent access to a machine.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Web shell 类似于绑定 shell，但是它不是作为原始的 TCP 套接字进行监听，而是作为 HTTP 服务器监听和通信。这是一种创建持久访问机器的有用方法。
- en: One reason a web shell may be necessary, is because of firewalls or other network
    restrictions. HTTP traffic may be treated differently than other traffic. Sometimes
    the `80` and `443` ports are the only ports allowed through a firewall. Some networks
    may inspect the traffic to ensure that only HTTP formatted requests are allowed
    through.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Web shell 可能是必要的原因之一，是因为防火墙或其他网络限制。HTTP 流量可能与其他流量的处理方式不同。有时，`80` 和 `443` 端口是唯一可以通过防火墙的端口。一些网络可能会检查流量，确保只有格式为
    HTTP 的请求可以通过。
- en: Keep in mind that using plain HTTP means the traffic can be logged in plaintext.
    HTTPS can be used to encrypt the traffic, but the SSL certificate and key are
    going to reside on the server so that a server admin will have access to it. All
    you need to do to make this example use SSL is to change `http.ListenAndServe()`
    to `http.ListenAndServeTLS()`. An example of this is provided in [Chapter 9](f15910a1-239e-49a5-b4d9-3881a524bfa9.xhtml),
    *Web Applications*.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，使用纯HTTP意味着流量可能以明文记录。可以使用HTTPS来加密流量，但SSL证书和密钥将存储在服务器上，服务器管理员可以访问它。要使此示例使用SSL，你只需将`http.ListenAndServe()`更改为`http.ListenAndServeTLS()`。此示例在[第9章](f15910a1-239e-49a5-b4d9-3881a524bfa9.xhtml)中提供，*Web应用程序*。
- en: The convenient thing about a web shell is that you can use any web browser and
    command-line tools, such as `curl` or `wget`. You could even use `netcat` and
    manually craft an HTTP request. The drawback is that you don't have a truly interactive
    shell, and you can send only one command at a time. You can run multiple commands
    with one string if you separate multiple commands with a semicolon.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Web shell的方便之处在于，你可以使用任何Web浏览器和命令行工具，例如`curl`或`wget`。你甚至可以使用`netcat`手动构造HTTP请求。缺点是，你没有一个真正交互式的shell，且每次只能发送一个命令。如果你用分号分隔多个命令，你可以用一条字符串运行多个命令。
- en: 'You can manually craft an HTTP request in `netcat` or a custom TCP client like
    this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以手动在`netcat`中或使用类似的自定义TCP客户端构造HTTP请求，如下所示：
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This would be similar to the request that is created by a web browser. For example,
    if you ran `webshell localhost:8080`, you could access the URL on port `8080`,
    and run a command with `http://localhost:8080/?cmd=df`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这类似于由Web浏览器创建的请求。例如，如果你运行`webshell localhost:8080`，你可以访问端口`8080`上的URL，并使用`http://localhost:8080/?cmd=df`运行命令。
- en: Note that the `/bin/sh` shell command is for Linux and Mac. Windows uses the
    `cmd.exe` Command Prompt. In Windows, you can enable Windows Subsystem for Linux
    and install Ubuntu from the Windows store to run all of these Linux examples in
    a Linux environment without installing a virtual machine.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`/bin/sh`命令适用于Linux和Mac。Windows使用`cmd.exe`命令提示符。在Windows上，你可以启用Windows子系统Linux，并从Windows商店安装Ubuntu，以在不安装虚拟机的情况下在Linux环境中运行所有这些Linux示例。
- en: 'In this next example, the web shell creates a simple web server that listens
    for requests over HTTP. When it receives a request, it looks for the `GET` query
    named `cmd`. It will execute a shell, run the command provided, and return the
    results as an HTTP response:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，Web shell创建了一个简单的Web服务器，监听HTTP请求。当它收到请求时，它会查找名为`cmd`的`GET`查询。它将执行一个shell，运行提供的命令，并将结果作为HTTP响应返回：
- en: '[PRE5]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Finding writable files
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找可写文件
- en: Once you gain access to a system, you want to start exploring. Typically, you
    will look for ways to escalate your privilege or maintain persistence. A great
    way to look for methods of persistence is to identify which files have write permissions.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你获得了系统的访问权限，你会开始探索。通常，你会寻找提升权限或保持持久性的方式。寻找持久性的方法之一是识别哪些文件具有写权限。
- en: You can look at the file permission settings and see if you or everyone has
    write permission. You can look explicitly for modes such as `777`, but a better
    way is to use a bitmask and look specifically at the write permission bits.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以查看文件权限设置，看看你自己或其他人是否具有写权限。你可以显式查找像`777`这样的模式，但更好的方法是使用位掩码，专门查看写权限位。
- en: 'The permissions are represented by several bits: the user permissions, group
    permissions, and finally, the permissions for everyone. The string representation
    of a `0777` permission would look like this: `-rwxrwxrwx`. The bit we are interested
    in is the one that gives everyone the write permission, which is represented by
    `--------w-`.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 权限由多个位表示：用户权限、组权限，最后是每个人的权限。`0777`权限的字符串表示形式如下：`-rwxrwxrwx`。我们关注的位是赋予每个人写权限的位，表示为`--------w-`。
- en: The second bit is the only one we care about, so we will use a bitwise AND to
    mask the file's permission with `0002`. If the bit was set, it will remain the
    only bit set. If it was off, it remains off and the entire value will be `0`.
    To check the write bit for the group or the user, you could bitwise AND with `0020`
    and `0200` respectively.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个位是我们唯一关心的，因此我们将使用按位与操作将文件权限与`0002`进行掩码。如果该位被设置，它将保持唯一的设置。如果未设置，它将保持关闭，整个值将为`0`。要检查组或用户的写权限位，你可以分别使用`0020`和`0200`进行按位与操作。
- en: 'To search recursively through a directory, Go provides a `path/filepath` package
    in the standard library. This function simply takes a starting directory and a
    function. It performs the function on every file found. The function it expects
    is actually a specially defined type. It is defined like this:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要递归地搜索目录，Go提供了标准库中的`path/filepath`包。此函数只需要一个起始目录和一个函数。它会对找到的每个文件执行该函数。它期望的函数实际上是一个特别定义的类型。定义如下：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As long as you create a function that matches this format, your function will
    be compatible with the `WalkFunc` type and can be used in the `filepath.Walk()`
    function.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 只要你创建一个匹配此格式的函数，你的函数就会与`WalkFunc`类型兼容，并且可以在`filepath.Walk()`函数中使用。
- en: 'In this next example, we will walk-through a starting directory and check the
    file permissions of each file. We will also cover subdirectories. Any file that
    is writable by your current user will be printed to the standard output:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，我们将遍历一个起始目录并检查每个文件的权限。我们还会检查子目录。任何当前用户可以写入的文件将被打印到标准输出：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Changing file timestamp
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改文件时间戳
- en: In the same way you can modify file permissions, you can modify the timestamps
    to make it look like it was modified in the past or in the future. This can be
    useful for covering your tracks and making it look like a file that has not been
    accessed in a long time or set it for a future date to confuse forensic investigators.
    The Go `os` package contains the utilities for modifying files.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以与修改文件权限相同的方式，你可以修改时间戳，使其看起来像是过去或未来修改过的。这在掩盖痕迹时非常有用，可以让文件看起来像是很久没有访问过，或者将其设置为未来的某个日期，以混淆取证调查人员。Go的`os`包包含了修改文件的工具。
- en: 'In this next example, a file''s timestamp is modified to look like it was modified
    in the future. You can tweak the `futureTime` variable to make a file look like
    it has been modified to any specific time. This example provides a relative time
    by adding 50 hours and 15 minutes to the current time, but you can also specify
    an absolute time:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，一个文件的时间戳被修改为看起来像是在未来被修改。你可以调整`futureTime`变量，使文件看起来像是在任何特定时间被修改。这个示例通过将当前时间加上50小时15分钟来提供一个相对时间，但你也可以指定一个绝对时间：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Changing file permissions
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改文件权限
- en: Changing the permission of a file so that you can access it later from a lower-privileged
    user may also be useful. This example demonstrates how to change file permissions
    using the `os` package. You can change file permissions easily using the `os.Chmod()`
    function.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 更改文件权限，以便稍后从较低权限的用户访问该文件也可能很有用。这个示例演示了如何使用`os`包更改文件权限。你可以轻松地使用`os.Chmod()`函数更改文件权限。
- en: This program is named `chmode.go` so that it does not conflict with the default
    `chmod` program provided on most systems. It has the same basic functionality
    as `chmod`, but without any extra features.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序被命名为`chmode.go`，以避免与大多数系统上提供的默认`chmod`程序发生冲突。它具有与`chmod`相同的基本功能，但没有额外的功能。
- en: 'The `os.Chmod()` function is straightforward, but it must be provided an `os.FileMode`
    type. The `os.FileMode` type is simply a `uint32` type so that you can provide
    it a `uint32` literal (a hardcoded number) or you will have to ensure that the
    file mode value you provide is casted to an `os.FileMode` type. In this example,
    we will take the string value provided from the command line (for example, `"777"`)
    and convert it to an unsigned integer. We will tell `strconv.ParseUint()` to treat
    it as a base 8 octal number instead of a base 10 decimal number. We also provide
    `strconv.ParseUint()` a parameter of 32 so that we get a 32-bit number back instead
    of 64-bit number. After we have an unsigned 32-bit integer from the string value,
    we will cast it to an `os.FileMode` type. This is how `os.FileMode` is defined
    in the standard library:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`os.Chmod()`函数非常简单，但必须提供`os.FileMode`类型。`os.FileMode`类型其实只是一个`uint32`类型，因此你可以提供一个`uint32`字面量（硬编码数字），或者你必须确保提供的文件模式值已转换为`os.FileMode`类型。在这个例子中，我们将从命令行获取字符串值（例如，`"777"`），并将其转换为无符号整数。我们会告诉`strconv.ParseUint()`将其视为八进制数字，而不是十进制数字。我们还会提供`strconv.ParseUint()`一个32的参数，这样我们将返回32位数字，而不是64位数字。在获得来自字符串值的无符号32位整数后，我们将其转换为`os.FileMode`类型。这就是标准库中`os.FileMode`的定义方式：'
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In this next example, a file''s permissions are changed to the value provided
    as a command-line argument. It behaves similarly to the `chmod` program in Linux
    and accepts permissions in octal format:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，文件的权限被更改为作为命令行参数提供的值。它的行为类似于Linux中的`chmod`程序，并接受八进制格式的权限值：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Changing file ownership
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改文件所有权
- en: This program will take the file provided and change the user and group ownership.
    This could be used in tandem with the example that finds files that you have permission
    to modify.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序将接受提供的文件并更改用户和组的所有权。这可以与查找你有权限修改的文件的示例一起使用。
- en: Go provides `os.Chown()` in the standard library, but it does not accept string
    values for the user and group names. The user and group must be provided as integer
    ID values. Fortunately, Go also comes with an `os/user` package that contains
    functions for looking up an ID based on a name. These functions are `user.Lookup()`
    and `user.LookupGroup()`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Go标准库提供了`os.Chown()`，但是它不接受用户和组名称的字符串值。用户和组必须以整数ID值的形式提供。幸运的是，Go还带有一个`os/user`包，其中包含根据名称查找ID的函数。这些函数是`user.Lookup()`和`user.LookupGroup()`。
- en: You could look up your own user and group information on Linux/Mac with the
    `id`, `whoami`, and `groups` commands.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在Linux/Mac上运行`id`、`whoami`和`groups`命令来查看你自己的用户和组信息。
- en: 'Note that this does not work on Windows because ownership is treated differently.
    The following is the code implementation of this example:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这在Windows上不起作用，因为所有权的处理方式不同。以下是该示例的代码实现：
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Summary
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Having reading this chapter, you should now have a high-level understanding
    of the post exploitation phase of an attack. By working through the examples and
    taking on the mindset of an attacker, you should have developed a better understanding
    of how to protect your files and network. It is primarily about persistence and
    information gathering. You can also use an exploited machine to perform all of
    the examples from [Chapter 11](25a78b3b-7295-4deb-9297-a1803c2edb71.xhtml), *Host
    Discovery and Enumeration*.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完这一章后，你应该对攻击后的利用阶段有了一个高层次的理解。通过操作示例并从攻击者的角度思考，你应该能更好地理解如何保护你的文件和网络。这个阶段主要涉及持久性和信息收集。你还可以使用被利用的机器来执行[第11章](25a78b3b-7295-4deb-9297-a1803c2edb71.xhtml)中的所有示例，*主机发现与枚举*。
- en: The bind shell, reverse bind shell, and web shell were examples of techniques
    attackers use to maintain persistence. Even if you never need to employ a bind
    shell, it is important to understand what it is and how attackers use it if you
    want to identify malicious behavior and keep your systems secure. You can use
    the port-scanning examples from [Chapter 11](25a78b3b-7295-4deb-9297-a1803c2edb71.xhtml),
    *Host Discovery and Enumeration*, to search for machines with a listening bind
    shell. You can use packet capturing from [Chapter 5](e69a87b2-99ff-47cf-a935-4ef39304ed15.xhtml),
    *Packet Capturing and Injection*, to look for outgoing reverse bind shells.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 绑定shell、反向绑定shell和Web shell是攻击者用来保持持久性的技术示例。即使你不需要使用绑定shell，理解它是什么以及攻击者如何使用它也很重要，如果你想识别恶意行为并保持系统安全。你可以使用[第11章](25a78b3b-7295-4deb-9297-a1803c2edb71.xhtml)中的端口扫描示例，*主机发现与枚举*，来搜索具有监听绑定shell的机器。你还可以使用[第5章](e69a87b2-99ff-47cf-a935-4ef39304ed15.xhtml)中的数据包捕获示例，*数据包捕获与注入*，来查找传出的反向绑定shell。
- en: Finding writable files gives you the tools necessary to look through a filesystem.
    The `Walk()` function demonstration is incredibly powerful and can be adapted
    for many use cases. You can easily adapt it to search for files with different
    characteristics. For example, maybe you want to narrow down the search to look
    for files that are owned by root but also writable to you, or you want to find
    files of a certain extension.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 查找可写文件可以为你提供查看文件系统所需的工具。`Walk()`函数的演示非常强大，可以适应许多不同的用例。你可以轻松调整它，搜索具有不同特征的文件。例如，可能你想缩小搜索范围，查找由root拥有但同时对你可写的文件，或者查找某种特定扩展名的文件。
- en: What other things would you look for on a machine that you just gained access
    to? Can you think of any other methods of regaining access once you disconnect?
    Cron jobs are one way you can execute code, if you find a cron job that executes
    a script that you have write access to. If you are able to modify a cron script,
    then you could potentially have a reverse shell call out to you every day so that
    you don't have to maintain an active session, which is easier to find using a
    tool such as `netstat` to identify established connections.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你获得访问权限后，还会在机器上查找哪些其他内容？你能想到其他任何方法来恢复连接吗？Cron作业是你可以执行代码的一种方式，如果你发现一个Cron作业执行了一个你有写权限的脚本。如果你能够修改一个Cron脚本，那么你可能每天都能通过反向shell回拨给你，这样你就不需要保持一个活跃的会话，而这种会话更容易通过像`netstat`这样的工具来识别已建立的连接。
- en: Remember, be responsible whenever testing or performing a penetration test.
    Even if you have a full scope, it is imperative that you understand the possible
    consequences of any actions you take. For example, if you are performing a penetration
    test for a client, and you have full scope, you may find a vulnerability on a
    production system. You may consider installing a bind shell backdoor to prove
    you can maintain persistence. If we consider a production server that faces the
    internet, it would be very irresponsible to leave a bind shell open to the whole
    internet with no encryption and no password on a production system. If you are
    ever unsure about the repercussions of certain software or certain commands, don't
    be afraid to ask others who are knowledgeable.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，在进行渗透测试或执行任何测试时，要始终保持责任心。即使你拥有完整的测试范围，理解你所采取的任何行动可能带来的后果也是至关重要的。例如，如果你为客户执行渗透测试，并且拥有完整的范围，你可能会在生产系统上发现一个漏洞。你可能会考虑安装一个bind
    shell后门来证明你能维持持久性。如果我们考虑到面对互联网的生产服务器，在没有加密且没有密码的情况下，将一个bind shell开放给整个互联网，显然是非常不负责任的。如果你对某些软件或命令的后果不确定，别害怕向其他有经验的人请教。
- en: In the next chapter, we will recap the topics you have learned throughout this
    book. I will provide some more thoughts on the use of Go for security, which I
    hope you take away from this book, and we will talk about where to go from here
    and where to find help. We will also reflect once more on the legal, ethical,
    and technical boundaries involved with using the information from this book.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将回顾你在本书中学到的内容。我将提供一些关于Go语言在安全领域应用的思考，希望你能从本书中收获这些见解，并讨论从这里出发应该走向何方，以及在哪里寻找帮助。我们还将再次反思使用本书中的信息时涉及的法律、伦理和技术边界。
