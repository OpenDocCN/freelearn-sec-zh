- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Setting Up Isolated Penetration Testing Lab Environments on Azure
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Azure上设置隔离渗透测试实验室环境
- en: In the previous chapter, we successfully built and automated a relatively simple
    penetration testing lab inside an isolated network environment in **Google Cloud
    Platform** (**GCP**). We primarily focused on one of the most important aspects
    when building lab environments in the cloud – protecting the vulnerable lab resources
    from the outside world.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们成功地在**Google Cloud Platform**（**GCP**）中的隔离网络环境内建立并自动化了一个相对简单的渗透测试实验室。我们主要关注了在云中构建实验室环境时最重要的一个方面——保护易受攻击的实验室资源免受外部世界的攻击。
- en: In this chapter, we will take things a step further and build a more intricate
    lab environment using various services in **Microsoft Azure**. Our lab setup in
    this chapter will help us practice **container breakout** techniques, which involve
    escaping from a Docker container environment to gain unauthorized access to the
    host system. With containers being a fundamental component in modern deployments,
    understanding their security vulnerabilities is critical for ensuring the security
    of cloud-based applications. In addition to this, we will look at how **managed
    identities** in Azure can be abused to gain unauthorized access to other cloud
    resources. While managed identities are effective for preventing credential exposure,
    they introduce a new problem as these set up other attack paths that can be abused
    by an attacker (or someone assuming the role of an attacker).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将更进一步，使用**Microsoft Azure**中的各种服务构建一个更复杂的实验室环境。本章中的实验室设置将帮助我们练习**容器突破**技术，涉及从Docker容器环境中逃逸，进而获得对主机系统的未经授权访问。由于容器是现代部署中的基本组成部分，了解其安全漏洞对于确保基于云的应用程序的安全至关重要。除此之外，我们还将探讨如何滥用Azure中的**托管身份**来获得对其他云资源的未经授权访问。尽管托管身份在防止凭证暴露方面非常有效，但它们也引入了一个新问题，因为这些身份设置了其他攻击路径，可能被攻击者（或冒充攻击者的人）滥用。
- en: After setting up the lab environment, we will validate if our vulnerable-by-design
    lab environment has been (mis)configured correctly by performing a simplified
    penetration testing simulation using various tools, such as **Nmap** and **Metasploit**.
    In our simulation, we will go through a sequence of steps showing how multiple
    vulnerabilities and misconfigurations can be exploited to gain unauthorized access
    to cloud resources containing sensitive credentials and information.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置实验室环境后，我们将通过使用各种工具，如**Nmap**和**Metasploit**，进行简化的渗透测试模拟，以验证我们的易受攻击的设计实验室环境是否已正确（或错误）配置。在我们的模拟中，我们将通过一系列步骤展示如何利用多个漏洞和配置错误来获得对包含敏感凭证和信息的云资源的未经授权访问。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Preparing the necessary components and prerequisites
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备必要的组件和先决条件
- en: Defining the project’s structure
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义项目结构
- en: Preparing the isolated network
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备隔离网络
- en: Setting up the target resources
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置目标资源
- en: Manually setting up the attacker VM instance
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动设置攻击者虚拟机实例
- en: Leveraging Terraform to automatically set up the attacker VM instance
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用Terraform自动设置攻击者虚拟机实例
- en: Simulating penetration testing in the isolated network environment
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在隔离网络环境中模拟渗透测试
- en: Cleaning up
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理工作
- en: We have an exciting chapter ahead of us as we will learn various techniques,
    from building penetration testing lab environments in Azure to using security
    tools for validating misconfigurations and vulnerabilities in our lab setup.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的章节将非常令人兴奋，我们将学习多种技术，从在Azure中构建渗透测试实验室环境到使用安全工具验证实验室设置中的配置错误和漏洞。
- en: Without further ado, let’s begin!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 话不多说，让我们开始吧！
- en: Technical requirements
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Before we start, we must have the following ready:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我们必须准备好以下内容：
- en: A **Microsoft** **Azure** account
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个**Microsoft** **Azure**帐户
- en: Any text editor (such as Notepad++, Visual Studio Code, or Sublime Text) where
    we can temporarily store specific values (for example, our local machine’s IP
    address) used in the hands-on solutions in this chapter
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何文本编辑器（如Notepad++、Visual Studio Code或Sublime Text），我们可以在其中临时存储在本章的动手实践解决方案中使用的特定值（例如，我们本地机器的IP地址）
- en: You may proceed with the next steps once these are ready.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦准备好这些内容，您可以继续下一步。
- en: Important note
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: Similar to AWS and GCP, Azure is a mature cloud platform that offers a wide
    range of services that allow us to build penetration testing environments in the
    cloud. We’ll find various options for configuring virtual machines, databases,
    and other cloud resources for building vulnerable-by-design lab environments in
    Azure. The costs associated with running these resources can vary, so make sure
    you read the available documentation, along with the FAQs, to have a solid understanding
    of what is free (and what is not free) when creating resources. In addition to
    this, make sure you *don’t* use any existing account with production (or staging)
    environment resources for the hands-on exercises and solutions in this book. It
    is strongly recommended that you create a *new* Azure account specifically for
    launching intentionally vulnerable resources. This will ensure that your production
    (or staging) environment resources remain separate and secure.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 AWS 和 GCP，Azure 是一个成熟的云平台，提供了多种服务，使我们能够在云中构建渗透测试环境。我们将在 Azure 中找到配置虚拟机、数据库和其他云资源的各种选项，用于构建易受攻击的实验室环境。运行这些资源的成本可能会有所不同，因此请务必阅读可用的文档以及常见问题解答，充分了解在创建资源时哪些是免费的（哪些不是）。除此之外，请确保你*不要*使用任何包含生产（或暂存）环境资源的现有账户来进行本书中的动手练习和解决方案。强烈建议你创建一个*新的*
    Azure 账户，专门用于启动故意存在漏洞的资源。这将确保你的生产（或暂存）环境资源保持独立且安全。
- en: 'The source code and other files used for each chapter are available in this
    book’s GitHub repository: [https://github.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud](https://github.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 每章使用的源代码和其他文件可以在本书的 GitHub 仓库中找到：[https://github.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud](https://github.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud)。
- en: Preparing the necessary components and prerequisites
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备必要的组件和先决条件
- en: In this section, we will be setting up a few key components and prerequisites
    before we proceed with preparing the Terraform code in the next section. We will
    start by manually creating a resource group for storing some of the resources
    later in this chapter. In addition to this, we will generate the SSH keys that
    will be used to access the attacker’s **virtual machine** (**VM**) instance.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本部分，我们将设置一些关键组件和先决条件，为下一部分准备 Terraform 代码做准备。我们将首先手动创建一个资源组，用于存储本章后面使用的一些资源。除此之外，我们还将生成用于访问攻击者
    **虚拟机** (**VM**) 实例的 SSH 密钥。
- en: 'Before we proceed with the hands-on portion of this section, let’s familiarize
    ourselves first with a few key services and terminologies relevant to this section:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续进行本部分的动手操作之前，让我们先熟悉一下与本部分相关的一些关键服务和术语：
- en: '**Resource group**: A logical container for grouping multiple resources together'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源组**：用于将多个资源进行逻辑分组的容器'
- en: '**Golden image**: A custom VM image containing all applications, along with
    the configuration settings designed to serve as a standardized template for provisioning
    multiple instances with identical software and configuration'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Golden image**：一个包含所有应用程序和配置设置的自定义虚拟机镜像，旨在作为标准化模板，用于提供多个具有相同软件和配置的实例'
- en: '**Cloud Shell**: A browser-based interactive command-line environment that
    enables users to access and manage resources directly through a web browser'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cloud Shell**：一种基于浏览器的互动命令行环境，使用户能够通过网页浏览器直接访问和管理资源'
- en: '**SSH keys**: These are pairs of cryptographic keys (that is, a **private key**
    and its corresponding **public key**) that are used for secure authentication
    and communication between systems over a network'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SSH 密钥**：这是一对加密密钥（即 **私钥** 和其对应的 **公钥**），用于通过网络进行安全认证和系统间的通信'
- en: 'That said, this section is divided into the following subparts:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，本部分分为以下子部分：
- en: '*Part 1 of 2 – Manually creating a* *resource group*'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 1 部分（共 2 部分）– 手动创建一个* *资源组*'
- en: '*Part 2 of 2 – Generating SSH keys to access the attacker* *VM instance*'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 2 部分（共 2 部分）– 生成 SSH 密钥以访问攻击者* *VM 实例*'
- en: With these in mind, let’s proceed.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些考虑，让我们继续。
- en: Part 1 of 2 – Manually creating a resource group
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 1 部分（共 2 部分）– 手动创建一个资源组
- en: 'Let’s start by creating a resource group:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们先从创建一个资源组开始：
- en: In the search bar, type **resource groups** and then select **Resource groups**
    from the search results (under **Services**).
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中，输入 **resource groups**，然后从搜索结果中选择 **Resource groups**（在 **Services** 下）。
- en: Click the **+ Create** button located on the toolbar.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击位于工具栏上的**+ 创建**按钮。
- en: In the **Create a resource group** form (similar to what is shown in *Figure
    5**.1*), specify **image-resource-group** for the **Resource group** input field
    value:![](image/B19755_05_01.jpg)
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**创建资源组**表单中（类似于*图5.1*中所示），为**资源组**输入框指定**image-resource-group**的值：![](image/B19755_05_01.jpg)
- en: Figure 5.1 – Create a resource group
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.1 – 创建资源组
- en: We will use this resource group later when we create an image for our VM instance.
    If you are wondering how many resource groups we will have in this chapter, we
    will have exactly three resource groups – the manually created resource group
    (**image-resource-group**), along with two other resource groups we will automatically
    create using Terraform (**resource-group-01** and **resource-group-02**).
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们稍后将在创建虚拟机实例镜像时使用这个资源组。如果你在想我们在本章中会有多少个资源组，我们将拥有恰好三个资源组——手动创建的资源组（**image-resource-group**），以及两个我们将通过Terraform自动创建的资源组（**resource-group-01**和**resource-group-02**）。
- en: Note
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure that **Region** is set to **(US) East US** as we will use the same
    region when creating the other resources in this chapter.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 确保**Region**设置为**（US）东部美国**，因为我们将在本章中创建其他资源时使用相同的区域。
- en: Click the **Review +** **create** button.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**审查 +** **创建**按钮。
- en: Finally, click **Create** to finish creating the new resource group.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击**创建**完成创建新的资源组。
- en: Important note
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The resource group we just created will be used to contain the golden image
    we will prepare later in this chapter. *Why do we need to create a separate resource
    group for the golden image?* As we will see later, having the golden image in
    a separate resource group will allow us to use the **terraform apply** and **terraform
    destroy** commands without issues and blockers. If the golden image is inside
    one of the automatically created resource groups, we will be forced to delete
    the golden image for the **terraform destroy** command to succeed and complete
    while we’re cleaning up and deleting the resources. We won’t be able to delete
    the automatically created resource group using **terraform destroy** if it contains
    additional resources not managed by Terraform (unless we also delete those resources
    manually before retrying the **terraform** **destroy** command).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建的资源组将用于存放本章稍后将准备的黄金镜像。*为什么我们需要为黄金镜像创建一个单独的资源组？* 正如我们稍后会看到的，将黄金镜像放在单独的资源组中将使我们能够无障碍地使用**terraform
    apply**和**terraform destroy**命令。如果黄金镜像位于自动创建的资源组之一中，我们将在清理和删除资源时被迫删除黄金镜像，以确保**terraform
    destroy**命令成功执行并完成。如果该自动创建的资源组包含未由Terraform管理的其他资源，我们将无法使用**terraform destroy**删除该资源组（除非我们在重新执行**terraform
    destroy**命令之前手动删除这些资源）。
- en: Part 2 of 2 – Generating SSH keys to access the attacker VM instance
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第2部分中的第2步 – 生成SSH密钥以访问攻击者虚拟机实例
- en: 'Now, let’s proceed with generating the SSH keys for accessing the attacker
    VM instance later in this chapter:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续生成SSH密钥，以便稍后在本章中访问攻击者虚拟机实例：
- en: Open the **Cloud Shell** editor by clicking the button highlighted in *Figure
    5**.2*:![](image/B19755_05_02.jpg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击*图5.2*中高亮显示的按钮，打开**Cloud Shell**编辑器：![](image/B19755_05_02.jpg)
- en: Figure 5.2 – Opening Cloud Shell
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.2 – 打开Cloud Shell
- en: When prompted to select **Bash** or **PowerShell**, choose **Bash**. This will
    open a terminal where we can run bash commands (after the **$** sign). Similar
    to Google Cloud Shell, which we used in the previous chapter, Azure Cloud Shell
    provides a convenient way to manage resources using a ready-to-use terminal and
    editor.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当系统提示选择**Bash**或**PowerShell**时，选择**Bash**。这将打开一个终端，我们可以在其中运行bash命令（在**$**符号后）。与我们在上一章中使用的Google
    Cloud Shell类似，Azure Cloud Shell提供了一种方便的方式，通过现成的终端和编辑器来管理资源。
- en: Important note
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'Since Azure Cloud Shell requires a file share to persist files, we need to
    create a storage account in case we see the **You have no storage mounted** message.
    Refer to the following link on how to persist files and create a new storage account
    for Azure Cloud Shell: [https://learn.microsoft.com/en-us/azure/cloud-shell/persisting-shell-storage](https://learn.microsoft.com/en-us/azure/cloud-shell/persisting-shell-storage).'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Azure Cloud Shell需要一个文件共享来持久化文件，我们需要创建一个存储帐户，以防看到**You have no storage mounted**的消息。请参考以下链接，了解如何持久化文件并为Azure
    Cloud Shell创建新的存储帐户：[https://learn.microsoft.com/en-us/azure/cloud-shell/persisting-shell-storage](https://learn.microsoft.com/en-us/azure/cloud-shell/persisting-shell-storage)。
- en: 'In the Terminal (right after the **$** sign), run the following commands to
    create a new directory (named **kali_keys**) and navigate to it:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中（在**$**符号后），运行以下命令以创建一个新目录（命名为 **kali_keys**）并进入该目录：
- en: '[PRE0]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We will store the generated keys inside this directory.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将把生成的密钥存储在这个目录中。
- en: 'Generate a new SSH key pair and save the generated key files in the **kali_keys**
    directory:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成新的 SSH 密钥对并将生成的密钥文件保存在 **kali_keys** 目录中：
- en: '[PRE1]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When asked for a passphrase, just press *Enter*. This will generate two files
    — **kali-ssh** (the private key) and **kali-ssh.pub** (the public key).
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当要求输入密码短语时，直接按 *Enter* 键。这将生成两个文件——**kali-ssh**（私钥）和 **kali-ssh.pub**（公钥）。
- en: Note
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In SSH key-based authentication, the private key is kept secret, often stored
    on the client side (for example, in our local machine), while the corresponding
    public key is used for authentication, typically stored on the server we are trying
    to access.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于 SSH 密钥的认证中，私钥保密，通常存储在客户端（例如我们的本地机器）上，而相应的公钥用于认证，通常存储在我们尝试访问的服务器上。
- en: 'Print the public key value using the **cat** command:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **cat** 命令打印公钥值：
- en: '[PRE2]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Store this value in a text editor in your local machine – we will use this later
    when configuring the Kali Linux VM instance in the succeeding sections of this
    chapter.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将该值存储在本地机器的文本编辑器中——我们将在本章后续部分配置 Kali Linux 虚拟机实例时使用它。
- en: Click the **Upload**/**Download files** button, as highlighted in *Figure 5**.3*:![](image/B19755_05_03.jpg)
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **上传**/**下载文件** 按钮，如 *图 5.3* 所示：![](image/B19755_05_03.jpg)
- en: Figure 5.3 – Downloading the private key we generated
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.3 – 下载我们生成的私钥
- en: Select the **Download** option from the list of options available. When you
    see the **Download a file** popup window, type **/kali_keys/kali-ssh** in the
    input field highlighted in *Figure 5**.3* and then click **Download**.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从可用选项列表中选择 **下载** 选项。当您看到 **下载文件** 的弹出窗口时，在输入框中输入 **/kali_keys/kali-ssh**（如
    *图 5.3* 所示），然后点击 **下载**。
- en: Note
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Given that the key (**kali-ssh**) has the same name as the key we downloaded
    in the previous chapter, make sure you don’t mix up the keys (in your local machine)
    to avoid confusion. You may rename the downloaded key from *[Chapter 4](B19755_04.xhtml)*
    to **kali-ssh-gcp** instead before proceeding to the next step.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 由于密钥（**kali-ssh**）与我们在上一章节下载的密钥名称相同，请确保不要在本地机器上混淆这些密钥，以免引起混淆。在继续下一步之前，您可以将下载的密钥从
    *[第 4 章](B19755_04.xhtml)* 重命名为 **kali-ssh-gcp**。
- en: Click the **Click here to download your file** link to proceed with the actual
    download operation.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **点击此处下载文件** 链接以继续实际的下载操作。
- en: With the prerequisites ready, we can now proceed with setting up the project’s
    structure.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在准备好前提条件后，我们现在可以开始设置项目结构了。
- en: Defining the project’s structure
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义项目结构
- en: 'In this chapter, we will use a Terraform project structure similar to what
    we had in *[Chapter 4](B19755_04.xhtml)*, *Setting Up Isolated Penetration Testing
    Lab Environments on GCP*. While there are similarities between the lab environments
    in the previous chapter and this one, the lab environment in this chapter will
    have a few additional components to give it a bit more complexity:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用一个类似于 *[第 4 章](B19755_04.xhtml)* 中的 Terraform 项目结构——*在 GCP 上设置隔离的渗透测试实验室环境*。虽然本章与上一章节的实验环境有相似之处，但本章的实验环境将包含一些附加组件，增加其复杂度：
- en: '![](image/B19755_05_04.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](image/B19755_05_04.jpg)'
- en: Figure 5.4 – What our lab setup looks like (without the network environment)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – 我们实验室的设置（不包括网络环境）
- en: One of the major components of the lab environment in this chapter will be a
    secure secrets store (Azure Key Vault) where we will store one of the flags. We
    will also make it possible for lab users (assuming the role of an attacker) to
    break out of a running container and gain unauthorized access to the host system
    inside the VM instance. Once access to the host system has been obtained, a system-assigned
    managed identity will allow access to the Azure Key Vault secrets from within
    the VM instance.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 本章实验环境的主要组件之一将是一个安全的密钥存储（Azure Key Vault），我们将在其中存储一个标志。我们还将使实验室用户（扮演攻击者角色）能够突破运行中的容器并获取对虚拟机实例中宿主系统的未经授权的访问权限。一旦获得宿主系统的访问权限，系统分配的托管身份将允许从虚拟机实例内部访问
    Azure Key Vault 中的机密。
- en: Note
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Do not worry if the terms used in this section seem unfamiliar as we will discuss
    and define these concepts, terminologies, and services in the next section!
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果本节中使用的术语听起来不熟悉，请不要担心，我们将在下一节讨论并定义这些概念、术语和服务！
- en: 'For now, we will focus on what these lab environments have in common – a **network
    peering** setup bridging an attacker network and a target network (similar to
    what is shown in *Figure 5**.5*):'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们将重点关注这些实验环境的共同点——**网络对等**设置，连接攻击者网络和目标网络（类似于*图 5.5*中所示的内容）：
- en: '![](image/B19755_05_05.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](image/B19755_05_05.jpg)'
- en: Figure 5.5 – Network peering setup connecting two networks
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5 – 连接两个网络的网络对等设置
- en: 'Given that we will set up a more complex lab environment in this chapter, we
    must plan where we will configure the additional resources without having to drastically
    change how the resources are grouped. That said, our Terraform project structure
    will have the following modules in this chapter:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到本章将设置更复杂的实验环境，我们必须规划好配置额外资源的位置，而不需要大幅改变资源的分组方式。话虽如此，我们的 Terraform 项目结构将在本章中包含以下模块：
- en: '**secure_network**: The module that will contain the code for creating and
    configuring the network resources for this lab environment'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**secure_network**：包含为此实验环境创建和配置网络资源的代码的模块'
- en: '**target_vm**: The module for creating and configuring the target VM instance,
    along with other target resources (including the Azure Key Vault resource where
    we will store a secret flag)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**target_vm**：用于创建和配置目标虚拟机实例及其他目标资源的模块（包括我们将存储秘密标志的 Azure 密钥保管库资源）'
- en: '**attacker_vm**: The module containing the code for setting up the attacker
    VM instance'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**attacker_vm**：包含设置攻击者虚拟机实例代码的模块'
- en: While this approach is not perfect, this should do the trick for now as our
    primary goal in this chapter is to introduce new vulnerable and misconfigured
    components that may be present in modern cloud environments.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种方法并不完美，但目前应当足够，因为我们本章的主要目标是介绍可能存在于现代云环境中的新漏洞和配置错误组件。
- en: 'That said, let’s proceed with setting up the initial project files and directories:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，让我们继续设置初始的项目文件和目录：
- en: Continuing where we left off in the previous section, let’s open the Cloud Shell
    editor by clicking the button highlighted in *Figure 5**.6*:![](image/B19755_05_06.jpg)
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接着上一节的内容，让我们通过点击*图 5.6*中的按钮打开 Cloud Shell 编辑器：![](image/B19755_05_06.jpg)
- en: Figure 5.6 – Opening the Cloud Shell editor
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.6 – 打开 Cloud Shell 编辑器
- en: Feel free to maximize the Cloud Shell window by clicking the maximize icon located
    at the top-left corner of the editor.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 随时可以通过点击编辑器左上角的最大化图标来最大化 Cloud Shell 窗口。
- en: 'In the Terminal (right after the **$** sign), run the following commands to
    create the **pentest_lab** project directory (and navigate to the new directory
    as well):'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中（**$**符号后面），运行以下命令来创建**pentest_lab**项目目录（并导航到新目录）：
- en: '[PRE3]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Inside the **pentest_lab** directory, let’s also create the **secure_network**,
    **target_vm**, and **attacker_vm** directories:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**pentest_lab**目录中，让我们还创建**secure_network**、**target_vm**和**attacker_vm**目录：
- en: '[PRE4]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We’ll store the corresponding module files in these directories later.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 稍后我们将在这些目录中存储相应的模块文件。
- en: Note
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: While it is a common practice to have a separate directory named **modules**
    for storing individual module directories such as **secure_network**, **target_vm**,
    and **attacker_vm**, our current project and folder structure should suffice for
    now.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然通常会有一个名为**modules**的单独目录，用于存储单独的模块目录，如**secure_network**、**target_vm**和**attacker_vm**，但目前我们的项目和文件夹结构已经足够。
- en: 'Let’s create the files we’ll have in the root folder of our project:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建项目根文件夹中将包含的文件：
- en: '[PRE5]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that at this point, these files are still empty. We will populate them
    with the necessary configurations as we go along.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，此时这些文件仍然是空的。我们将在接下来的过程中填充必要的配置。
- en: Note
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Feel free to click the refresh button in the editor if the new files and directories
    do not appear automatically.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果新文件和目录没有自动显示，请随时点击编辑器中的刷新按钮。
- en: 'Open the **provider.tf** file in the editor and add the following block of
    code:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器中打开**provider.tf**文件，并添加以下代码块：
- en: '[PRE6]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, let’s open **versions.tf** in the editor. Let’s add the following block
    of code to specify the required version constraints for the providers used:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们在编辑器中打开**versions.tf**文件。我们将添加以下代码块，以指定所使用的提供者的版本约束：
- en: '[PRE7]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Open **variables.tf** in the editor and add the following blocks of code:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器中打开**variables.tf**文件并添加以下代码块：
- en: '[PRE8]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Open **terraform.tfvars** in the editor and add the following lines of code:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器中打开**terraform.tfvars**文件并添加以下代码行：
- en: '[PRE9]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Make sure you replace **<INSERT IP ADDRESS>** with the IP address of your local
    machine and **<INSERT PUBLIC SSH KEY>** with the string value of the public SSH
    key (which we printed using the **cat** command previously). Since we have not
    created the golden image of the attacker VM instance yet, leave the **kali_image_id**
    placeholder value (that is, **<INSERT KALI IMAGE ID>**) as is for now.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保将**<INSERT IP ADDRESS>**替换为本地机器的IP地址，并将**<INSERT PUBLIC SSH KEY>**替换为公共SSH密钥的字符串值（我们之前通过**cat**命令打印过）。由于我们尚未创建攻击者VM实例的金色镜像，因此暂时保持**kali_image_id**占位符值（即**<INSERT
    KALI IMAGE ID>**）不变。
- en: 'Open **main.tf** in the editor and add the following blocks of code to define
    the modules that will be used for this project:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器中打开**main.tf**文件，并添加以下代码块，以定义将用于此项目的模块：
- en: '[PRE10]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, we are adding module blocks to **main.tf** to include the **secure_network**,
    **attacker_vm**, and **target_vm** modules from their respective source directories.
    Make sure you save the **main.tf** file before proceeding to the next step.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们正在向**main.tf**添加模块块，以从各自的源目录中包含**secure_network**、**attacker_vm**和**target_vm**模块。确保在继续下一步之前保存**main.tf**文件。
- en: 'Let’s create an empty **secure_network/main.tf** file using the following command:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用以下命令创建一个空的**secure_network/main.tf**文件：
- en: '[PRE11]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Open the **secure_network/main.tf** file in the editor and add the following
    blocks of code for the resource groups that will be used for the lab environment:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器中打开**secure_network/main.tf**文件，并为实验环境中将使用的资源组添加以下代码块：
- en: '[PRE12]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In our Cloud Shell terminal (after the **$** sign), run the following command
    to initialize the Terraform working directory:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的Cloud Shell终端（在**$**符号后）中，运行以下命令来初始化Terraform工作目录：
- en: '[PRE13]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let’s run **terraform plan** to preview the changes to be performed by Terraform:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们运行**terraform plan**来预览Terraform将要执行的更改：
- en: '[PRE14]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This should yield the following output:'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会生成以下输出：
- en: '[PRE15]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The command should complete without any errors.
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 命令应该没有任何错误地完成。
- en: 'Next, let’s use the **terraform apply** command to implement the changes:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们使用**terraform apply**命令来实现这些更改：
- en: '[PRE16]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This should give us the following output:'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会给我们以下输出：
- en: '[PRE17]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If the **terraform apply** command runs without any errors, we are ready to
    proceed to the next section. Otherwise, feel free to check and fix any existing
    code issues in your Terraform configuration.
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果**terraform apply**命令运行没有任何错误，那么我们可以继续进行下一部分。否则，可以检查并修复Terraform配置中的任何现有代码问题。
- en: 'Verify that the resources have been created successfully using the following
    command:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令验证资源是否成功创建：
- en: '[PRE18]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This should return the two resource groups that we created in the previous step.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会返回我们在前一步创建的两个资源组。
- en: With our project structure and skeleton ready, we can now proceed with setting
    up the isolated **virtual network** (**VNet**) environment.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目结构和骨架准备好之后，我们现在可以继续设置隔离的**虚拟网络**（**VNet**）环境。
- en: Preparing the isolated network
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备隔离网络
- en: 'In this section, we will focus on setting up the isolated network environment
    that will contain the resources for our penetration testing lab. We will establish
    a secure network environment setup in Microsoft Azure that restricts traffic from
    external hosts from reaching the cloud resources deployed inside the network environment:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将重点设置将包含我们的渗透测试实验室资源的隔离网络环境。我们将在Microsoft Azure中建立一个安全的网络环境，限制来自外部主机的流量到达网络环境内部部署的云资源：
- en: '![](image/B19755_05_07.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](image/B19755_05_07.jpg)'
- en: Figure 5.7 – Isolated network environment
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.7 – 隔离网络环境
- en: Of course, the resources deployed inside should be able to communicate with
    each other even if they are deployed in different VNets. We will accomplish this
    by setting up a **VNet peering connection** to bridge two virtual networks, similar
    to how a VPC peering connection bridges two Google Cloud VPCs, as we saw in the
    previous chapter.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，即使资源部署在不同的虚拟网络（VNet）中，它们也应该能够相互通信。我们将通过设置**VNet对等连接**来桥接两个虚拟网络，类似于我们在上一章中看到的VPC对等连接如何桥接两个Google
    Cloud VPC。
- en: 'Before we proceed with preparing the isolated network environment, let’s quickly
    go through some of the Azure concepts, features, and terminologies relevant to
    this chapter:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续准备隔离的网络环境之前，让我们快速浏览一下与本章相关的 Azure 概念、特性和术语：
- en: '**Subscription**: A logical unit that serves as a billing and management boundary
    that enables the organization and governance of Azure resources, access controls,
    and usage reporting.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**订阅**：一个逻辑单元，作为计费和管理边界，使得 Azure 资源、访问控制和使用报告的组织与治理成为可能。'
- en: '**Tenant**: This represents an organization or identity in Azure. Each Azure
    subscription is associated with a specific tenant, and multiple subscriptions
    can be associated with the same tenant.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**租户**：代表 Azure 中的一个组织或身份。每个 Azure 订阅都与一个特定的租户相关联，多个订阅可以与同一个租户关联。'
- en: '**VNet**: A network that provides a private network environment for resources
    to communicate securely within Azure (similar to the VPC networks in GCP and AWS).'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VNet**：一个网络，为资源提供一个私有网络环境，以便在 Azure 内部进行安全通信（类似于 GCP 和 AWS 中的 VPC 网络）。'
- en: '**VNet peering**: Connects VNets, enabling traffic between these networks.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VNet 对等连接**：连接 VNets，使这些网络之间能够进行流量传输。'
- en: '**Resource group**: A logical container that helps organize and manage related
    resources within an Azure subscription.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源组**：一个逻辑容器，帮助在 Azure 订阅中组织和管理相关资源。'
- en: '**Network interface card** (**NIC**): A networking component in Azure that
    enables communication with other resources by acting as the interface between
    a VM and the underlying network infrastructure. NICs provide properties and configurations
    related to IP addresses, network security groups, and network routing.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络接口卡**（**NIC**）：Azure 中的一个网络组件，充当虚拟机与底层网络基础设施之间的接口，使其能够与其他资源进行通信。NIC 提供与
    IP 地址、网络安全组和网络路由相关的属性和配置。'
- en: '**Application security group** (**ASG**): A construct in Azure that allows
    you to group and manage network security policies based on application requirements.
    ASGs provide a way to define network security rules and associate them with specific
    applications or services within a virtual network.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用安全组**（**ASG**）：Azure 中的一个构造，允许您根据应用需求对网络安全策略进行分组和管理。ASG 提供了一种定义网络安全规则并将其与虚拟网络中的特定应用或服务关联的方法。'
- en: '**Network security group** (**NSG**): A networking security construct that
    acts as a virtual firewall for controlling inbound and outbound traffic to resources.
    NSGs allow for the creation of rules that define network security policies, including
    **access control lists** (**ACLs**), filtering, and port forwarding. By associating
    NSGs with subnets or network interfaces, administrators and engineers can enforce
    fine-grained network traffic controls and implement security measures.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络安全组**（**NSG**）：一个网络安全构造，作为虚拟防火墙，用于控制进入和离开资源的流量。NSG 允许创建定义网络安全策略的规则，包括 **访问控制列表**（**ACL**）、过滤和端口转发。通过将
    NSG 与子网或网络接口关联，管理员和工程师可以实施细粒度的网络流量控制和安全措施。'
- en: Note
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: NSGs focus on network-level security controls, allowing engineers to define
    rules based on IP addresses, ports, and protocols. On the other hand, ASGs provide
    a higher level of abstraction by allowing engineers to group resources based on
    their application context to enable more application-centric security policies.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: NSG 专注于网络层面的安全控制，允许工程师基于 IP 地址、端口和协议定义规则。另一方面，ASG 提供了更高层次的抽象，允许工程师根据应用上下文对资源进行分组，从而实现更加以应用为中心的安全策略。
- en: 'Now that we have a better idea of the Microsoft Azure concepts and terminologies
    we will work with in this chapter, let’s proceed with preparing the network environment:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对本章中将要使用的 Microsoft Azure 概念和术语有了更好的了解，接下来让我们继续准备网络环境：
- en: 'Continuing where we left off in the previous section, let’s locate the following
    block of code in our **main.tf** file:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从上一节结束的地方继续，我们在 **main.tf** 文件中找到以下代码块：
- en: '[PRE19]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let’s replace it with the following block of code:'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们使用以下代码块进行替换：
- en: '[PRE20]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let’s create an empty **secure_network/variables.tf** file using the following
    command:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用以下命令创建一个空的 **secure_network/variables.tf** 文件：
- en: '[PRE21]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, open the **secure_network/variables.tf** file in the editor and add the
    following block of code to define the **my_ip** variable for our **secure_network**
    module:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在编辑器中打开 **secure_network/variables.tf** 文件，并添加以下代码块来定义我们 **secure_network**
    模块的 **my_ip** 变量：
- en: '[PRE22]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Make sure you save the **secure_network/variables.tf** file before proceeding.
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在继续之前，确保保存**secure_network/variables.tf**文件。
- en: 'In the **secure_network/main.tf** file, we will define and configure the first
    VNet, along with a single subnet inside it:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**secure_network/main.tf**文件中，我们将定义并配置第一个VNet，并在其中定义一个子网：
- en: '[PRE23]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let’s define the corresponding ASG and NSG as well:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们也定义相应的ASG和NSG：
- en: '[PRE24]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Next, let’s define and configure a second VNet, along with a single subnet
    inside it:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们定义并配置第二个VNet，并在其中定义一个子网：
- en: '[PRE25]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next, let’s define the ASG and NSG for the VNet where the attacker VM instance
    will be deployed:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们为攻击者虚拟机实例将要部署的虚拟网络（VNet）定义ASG和NSG：
- en: '[PRE26]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Let’s define the peering connections using the following blocks of code:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用以下代码块定义对等连接：
- en: '[PRE27]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: With this VNet peering configuration, traffic from the resources deployed in
    the subnet of the first VNet, **vnet-01**, will be able to reach the resources
    deployed in the subnet of the second VNet, **vnet-02** (and vice versa), so long
    as the necessary firewall rules have been defined and configured correctly as
    well.
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用此VNet对等配置，来自第一个VNet子网（**vnet-01**）中部署的资源的流量，将能够到达第二个VNet子网（**vnet-02**）中部署的资源（反之亦然），前提是已正确定义并配置了必要的防火墙规则。
- en: 'For our local machine to access the resources inside the second VNet via port
    **8081**, we will need to define a network security rule as well:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了让我们的本地机器通过端口**8081**访问第二个VNet中的资源，我们还需要定义一个网络安全规则：
- en: '[PRE28]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In addition to this, let’s create a network security rule to allow our local
    machine to access the resources in the second VNet via port **22**:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，让我们创建一个网络安全规则，以允许我们的本地机器通过端口**22**访问第二个VNet中的资源：
- en: '[PRE29]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Note
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Make sure you save the **secure_network/main.tf** file before proceeding to
    the next set of steps. You can find a copy of the **secure_network/main.tf** file
    here: [https://github.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud/blob/main/ch05/pentest_lab/secure_network/main.tf](https://github.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud/blob/main/ch05/pentest_lab/secure_network/main.tf).'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续下一组步骤之前，确保保存**secure_network/main.tf**文件。你可以在这里找到**secure_network/main.tf**文件的副本：[https://github.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud/blob/main/ch05/pentest_lab/secure_network/main.tf](https://github.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud/blob/main/ch05/pentest_lab/secure_network/main.tf)。
- en: 'Let’s create an empty **secure_network/outputs.tf** file using the following
    command:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用以下命令创建一个空的**secure_network/outputs.tf**文件：
- en: '[PRE30]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Open the **secure_network/outputs.tf** file in the editor and add the following
    lines of code to define the following outputs:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**secure_network/outputs.tf**文件，在编辑器中添加以下代码行以定义以下输出：
- en: '[PRE31]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Add the following outputs right after the last defined output block in **secure_network/outputs.tf**:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**secure_network/outputs.tf**中，在最后一个已定义的输出块后添加以下输出：
- en: '[PRE32]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Make sure you save the **secure_network/outputs.tf** file before proceeding
    to the next step.
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在继续下一步之前，确保保存**secure_network/outputs.tf**文件。
- en: 'Navigate back to the **~/pentest_lab** project folder:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到**~/pentest_lab**项目文件夹：
- en: '[PRE33]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Let’s run **terraform plan** to preview the changes to be performed by Terraform:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们运行**terraform plan**来预览Terraform将执行的更改：
- en: '[PRE34]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This should give us the following output:'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会给我们以下输出：
- en: '[PRE35]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Finally, let’s use **terraform apply** to implement the changes:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们使用**terraform apply**来实现这些更改：
- en: '[PRE36]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Note
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Running this command may yield a few deprecation warnings. This should be okay,
    so long as we can successfully run the command without errors.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令时可能会出现一些弃用警告。只要我们能够成功运行命令而没有错误，应该没问题。
- en: At this point, the network environment is ready! In the next section, we’ll
    proceed with setting up the target resources.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，网络环境已准备好！在接下来的部分，我们将继续设置目标资源。
- en: Setting up the target resources
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置目标资源
- en: 'With our isolated network environment ready, we can now proceed with setting
    up the target VM instance, along with a few additional resources such as the Azure
    Key Vault (containing an additional flag secret) and a vulnerable container running
    inside the VM instance with elevated privileges:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 随着隔离的网络环境准备就绪，我们现在可以继续设置目标虚拟机实例，并添加一些附加资源，如包含附加标志密钥的Azure Key Vault，以及在虚拟机实例内部运行的具有提升权限的易受攻击的容器：
- en: '![](image/B19755_05_08.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](image/B19755_05_08.jpg)'
- en: Figure 5.8 – The target resources we will set up in this section
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.8 – 本节将要设置的目标资源
- en: In this section, we will set up the target VM instance inside VNet 01, similar
    to how we set up the target VM instance in the previous chapter. One major difference
    we will have in this chapter is that we will run the **Metasploitable 2** container
    instead of the **OWASP Juice Shop** container. Like OWASP Juice Shop, Metasploitable
    2 intentionally includes a variety of insecure configurations and vulnerable software
    packages. While Metasploitable 2 was primarily designed and distributed as a vulnerable
    VM, it is possible to configure and run it as a container. We will run this vulnerable
    container with the **--privileged** flag, which will allow us to break out of
    the container during the penetration testing simulation toward the end of this
    chapter.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将在VNet 01内设置目标虚拟机实例，类似于上一章中设置目标虚拟机实例的方式。本章的一个主要区别是我们将运行**Metasploitable
    2**容器，而不是**OWASP Juice Shop**容器。与OWASP Juice Shop类似，Metasploitable 2故意包含了多种不安全的配置和易受攻击的软件包。虽然Metasploitable
    2主要设计并分发为一个易受攻击的虚拟机，但它也可以配置为容器运行。我们将运行这个易受攻击的容器，并使用**--privileged**标志，这样我们可以在本章最后的渗透测试模拟中突破容器。
- en: Note
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The **--privileged** flag in Docker grants a container elevated privileges within
    the host system. It introduces a potential security risk that allows attackers
    to break out of a container and gain root-level access to the host (from inside
    the container). While we won’t dive deep into the details of how container breakouts
    work, we will provide a quick demonstration of how this is performed during the
    simulation session toward the end of this chapter.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: Docker中的**--privileged**标志授予容器在宿主系统中提升的权限。这会带来潜在的安全风险，攻击者可以通过容器突破并获得宿主系统的root级访问权限（从容器内部）。虽然我们不会深入探讨容器突破的工作原理，但我们将在本章最后的模拟环节中简要演示如何执行这一操作。
- en: In addition to this, we will configure the target VM instance so that it has
    a system-assigned managed identity. This will enable us to access the Azure Key
    Vault secrets from within the instance without having to (explicitly) specify
    credentials when using the Azure CLI. If you are wondering what **Azure Key Vault**
    is, it is a cloud-based service in Microsoft Azure that allows users, developers,
    and engineers to securely store and manage cryptographic keys, secrets, and certificates
    in a centralized repository. Understanding how Azure Key Vault works is essential
    from a penetration testing standpoint since testers will need to assess the security
    controls in place and identify potential vulnerabilities and misconfigurations
    when using this service.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，我们将配置目标虚拟机实例，使其具有系统分配的托管身份。这将使我们能够在实例内部访问Azure Key Vault的机密，而无需在使用Azure
    CLI时显式地指定凭据。如果你想了解**Azure Key Vault**是什么，它是微软Azure中的一个云服务，允许用户、开发者和工程师在一个集中的存储库中安全地存储和管理加密密钥、机密和证书。从渗透测试的角度来看，理解Azure
    Key Vault的工作原理至关重要，因为测试人员需要评估现有的安全控制措施，并识别使用该服务时的潜在漏洞和配置错误。
- en: 'That said, this section is divided into the following subparts:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，本节分为以下子部分：
- en: '*Part 1 of 2 – Preparing the target resources* *using Terraform*'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第一部分（共二部分）– 使用Terraform* *准备目标资源*'
- en: '*Part 2 of 2 – Verifying our target VM* *instance setup*'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第二部分（共二部分）– 验证我们的目标虚拟机* *实例设置*'
- en: Part 1 of 2 – Preparing the target resources using Terraform
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第一部分（共二部分）– 使用Terraform准备目标资源
- en: 'Follow these steps:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: 'Let’s create the **main.tf**, **variables.tf**, and **outputs.tf** files inside
    the **target_vm** directory using the following commands:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用以下命令在**target_vm**目录下创建**main.tf**、**variables.tf**和**outputs.tf**文件：
- en: '[PRE37]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Use the **wget** command to download the **boot-script.sh** script file:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**wget**命令下载**boot-script.sh**脚本文件：
- en: '[PRE38]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Make sure that the **DOWNLOAD_URL** variable value is correct and properly pointing
    to the boot-script.sh file. If you are wondering what’s inside **boot-script.sh**,
    here’s a quick screenshot of what’s inside the script file.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保**DOWNLOAD_URL**变量的值是正确的，并正确指向boot-script.sh文件。如果你想知道**boot-script.sh**里包含什么，下面是脚本文件内容的快速截图。
- en: '![](image/B19755_05_09.jpg)'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_05_09.jpg)'
- en: Figure 5.9 – boot-script.sh
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.9 – boot-script.sh
- en: When executed, the following script file will (1) create a **flag1.txt** file
    for the first flag, (2) install Docker inside the VM instance, (3) pull the **Metasploitable
    2** container image, (4) run the vulnerable container with elevated privileges,
    along with mapping specific container ports to the VM instance ports, (5) install
    the **Azure CLI** inside the VM instance, and (6) set up the second flag as a
    secret inside Azure Key Vault.
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行时，以下脚本文件将（1）为第一个 flag 创建一个**flag1.txt**文件，（2）在虚拟机实例中安装 Docker，（3）拉取**Metasploitable
    2**容器镜像，（4）以提升权限运行该漏洞容器，并将特定容器端口映射到虚拟机实例端口，（5）在虚拟机实例中安装**Azure CLI**，以及（6）将第二个
    flag 设置为 Azure 密钥保管库中的秘密。
- en: Note
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are wondering what a **flag** is, it serves as an essential marker of
    successful exploitation and progress in a penetration testing lab environment.
    Flags may represent sensitive data or credentials that an attacker (or someone
    assuming the role of an attacker) aims to acquire during a real-world compromise.
    So, we can think of a penetration testing lab environment as a maze with flags
    that act as valuable treasures waiting to be discovered at different points along
    the way.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想知道什么是**flag**，它作为渗透测试实验室环境中成功利用和进展的关键标志。Flag 可能代表攻击者（或扮演攻击者角色的人）在实际攻击中想要获取的敏感数据或凭据。所以，我们可以将渗透测试实验室环境看作是一个迷宫，其中的
    flag 就像是等待在不同路段被发现的宝贵财富。
- en: 'Next, define the following variables in **target_vm/variables.tf**:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在**target_vm/variables.tf**中定义以下变量：
- en: '[PRE39]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: These variables will be used later when we define the resources under the **target_vm**
    module.
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些变量稍后将在我们定义**target_vm**模块中的资源时使用。
- en: Note
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure you save the changes you’ve made to the **target_vm/variables.tf**
    file before proceeding.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在继续之前保存你对**target_vm/variables.tf**文件所做的更改。
- en: Now, let’s open **target_vm/main.tf** in the editor. Keep this file open – we
    will define various resources inside this file in the next set of steps.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们在编辑器中打开**target_vm/main.tf**文件。保持这个文件打开，我们将在接下来的步骤中在此文件内定义各种资源。
- en: 'In the **target_vm/main.tf** file, add the following blocks of code for the
    credentials that will be used to access the target VM instance:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**target_vm/main.tf**文件中，添加以下代码块，用于访问目标虚拟机实例的凭据：
- en: '[PRE40]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'In the **target_vm/main.tf** file, let’s also define the public IP address
    and network interface resources for the target VM instance:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**target_vm/main.tf**文件中，让我们还定义目标虚拟机实例的公共 IP 地址和网络接口资源：
- en: '[PRE41]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'We will need to define the associations in the **target_vm/main.tf** file as
    well using the following blocks of code:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要在**target_vm/main.tf**文件中定义关联，使用以下代码块：
- en: '[PRE42]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'With all the prerequisites ready, let’s add the following block of code to
    the **target_vm/main.tf** file to define and configure the target VM instance:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备好所有先决条件后，接下来将以下代码块添加到**target_vm/main.tf**文件中，以定义和配置目标虚拟机实例：
- en: '[PRE43]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Can you see the **identity** block, where **type = "SystemAssigned"**? This
    VM instance will be configured (in the next set of steps) with a system-assigned
    managed identity that will be used to authenticate and authorize this resource
    when we’re interacting with other Azure services or resources, such as Azure Key
    Vault.
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你能看到**identity**块，其中**type = "SystemAssigned"**吗？这个虚拟机实例将在接下来的步骤中配置一个系统分配的托管身份，用来在我们与其他
    Azure 服务或资源（如 Azure 密钥保管库）交互时进行身份验证和授权。
- en: Note
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: What does this mean for penetration testers? This means that if we’re able to
    compromise the VM instance, then we may be able to access other services and resources
    (such as Azure Key Vault) from within the VM instance without having to specify
    or provide credentials.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 这对渗透测试人员意味着什么？这意味着，如果我们能够攻破虚拟机实例，那么我们可能能够在不提供凭据的情况下，从虚拟机实例内部访问其他服务和资源（如 Azure
    密钥保管库）。
- en: 'In the **target_vm/main.tf** file, let’s define and configure the Azure Key
    Vault resource. Make sure you update the Key Vault **name** value from **rg-01-key-vault**
    to any unused vault name:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**target_vm/main.tf**文件中，让我们定义并配置 Azure 密钥保管库资源。确保将密钥保管库的**name**值从**rg-01-key-vault**更新为任何未使用的保管库名称：
- en: '[PRE44]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Here, the first access policy grants permissions to a principal associated with
    an Azure Linux VM. The specified secret permissions allow the principal to perform
    operations such as **Get**, **Set**, and **List** on secrets stored in the key
    vault. On the other hand, the second access policy grants permissions to a user-assigned
    managed identity. Similar to the first access policy, the specified secret permissions
    of the second access policy allow the principal to perform operations such as
    **Get**, **Set**, and **List** on secrets stored in the key vault.
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，第一个访问策略授予权限给与 Azure Linux VM 关联的主体。指定的密钥权限允许主体执行对存储在保险库中的秘密进行 **获取**、**设置**
    和 **列出** 等操作。另一方面，第二个访问策略授予权限给用户分配的托管标识。与第一个访问策略类似，第二个访问策略的指定秘密权限允许主体执行对存储在保险库中的秘密进行
    **获取**、**设置** 和 **列出** 等操作。
- en: Important note
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'Make sure you update the Key Vault **name** value from **rg-01-key-vault**
    to any unused vault name as you’ll encounter the following error (since vault
    names are globally unique) once you run the **terraform apply** command in a later
    step: **VaultAlreadyExists — The vault name ‘rg-01-key-vault’ is already in use.
    Vault names are globally unique so it is possible that the name is** **already
    taken.**'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将 Key Vault **name** 值从 **rg-01-key-vault** 更新为任何未使用的保险库名称，因为在稍后运行 **terraform
    apply** 命令时，您会遇到以下错误（由于保险库名称在全局范围内是唯一的）：**VaultAlreadyExists — 保险库名称 'rg-01-key-vault'
    已在使用中。保险库名称是全局唯一的，因此可能已经被使用。**
- en: 'Feel free to add random characters to the Key Vault **name** value to help
    ensure that your vault name is globally unique. A good example would be **rg-01-key-vault-a1b2c3d4**.
    Of course, try something else as other readers of this book may use the same vault
    name! Finally, we have to update the key vault name specified in the **target_vm/boot-script.sh**
    file as well. You should find the following line at the end of the script: **az
    keyvault secret set --vault-name rg-01-key-vault --name "flag2" --value "FLAG
    #** **2!"**.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '随意向 Key Vault **name** 值添加随机字符，以确保您的保险库名称在全局范围内是唯一的。一个好的例子是 **rg-01-key-vault-a1b2c3d4**。当然，为了避免其他读者使用相同的保险库名称，请尝试其他名称！最后，我们还必须更新
    **target_vm/boot-script.sh** 文件中指定的保险库名称。您应该在脚本末尾找到以下行：**az keyvault secret set
    --vault-name rg-01-key-vault --name "flag2" --value "FLAG #** **2!"**。'
- en: 'Let’s define the managed identity in the **target_vm/main.tf** file as well:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们也在 **target_vm/main.tf** 文件中定义托管标识：
- en: '[PRE45]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'In the **target_vm/main.tf** file, define the following data blocks. These
    will be used when we set up the permissions and role assignments:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **target_vm/main.tf** 文件中，定义以下数据块。在设置权限和角色分配时将使用这些数据块：
- en: '[PRE46]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Next, define the following role assignment:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，定义以下角色分配：
- en: '[PRE47]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: This role assignment grants the **Contributor** role to a user-assigned managed
    identity within the specified resource group (in this case, it would be **resource-group-01**).
    Assigning the **Contributor** role means that the managed identity will have the
    necessary permissions to manage resources within the specified resource group,
    such as creating, modifying, and deleting resources.
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此角色分配向指定资源组中的用户分配的托管标识授予 **Contributor** 角色。分配 **Contributor** 角色意味着托管标识将具有管理指定资源组内资源（例如创建、修改和删除资源）所需的权限。
- en: 'Let’s define the following role assignment as well:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们也定义以下角色分配：
- en: '[PRE48]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: This role assignment grants the **Contributor** role to the principal associated
    with an Azure Linux VM within the specified resource group (in this case, it would
    be **resource-group-01**). This means the principal will have the necessary permissions
    to manage resources within the specified resource group, such as creating, modifying,
    and deleting resources.
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此角色分配向与指定资源组中的 Azure Linux VM 关联的主体授予 **Contributor** 角色。这意味着该主体将具有管理指定资源组内资源（例如创建、修改和删除资源）所需的权限。
- en: Note
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure you save the changes you’ve made to the **target_vm/main.tf** file
    before proceeding.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请确保保存了对 **target_vm/main.tf** 文件所做的更改。
- en: 'With the **target_vm/main.tf** file ready, let’s open the **target_vm/outputs.tf**
    file in the editor. Add the following blocks of code to **target_vm/outputs.tf**
    to define the outputs of the **target_vm** module:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 **target_vm/main.tf** 文件准备就绪时，让我们在编辑器中打开 **target_vm/outputs.tf** 文件。将以下代码块添加到
    **target_vm/outputs.tf** 中，以定义 **target_vm** 模块的输出：
- en: '[PRE49]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Make sure you save the changes you’ve made to the **target_vm/outputs.tf** file
    before proceeding.
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在继续之前，请确保保存了对 **target_vm/outputs.tf** 文件所做的更改。
- en: 'Now, let’s update **outputs.tf** (inside the **pentest_lab** directory) with
    the following block of code:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们更新 **outputs.tf**（位于 **pentest_lab** 目录中），并使用以下代码块：
- en: '[PRE50]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Make sure you save the changes you’ve made to the **outputs.tf** file (in the
    **~/pentest_lab** directory) before proceeding.
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保在继续之前，保存你对 **outputs.tf** 文件（位于 **~/pentest_lab** 目录中）所做的更改。
- en: 'Let’s update the key vault **name** value specified in the **target_vm/boot-script.sh**
    file. You should find the following line at the end of the script:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们更新 **target_vm/boot-script.sh** 文件中指定的 key vault **name** 值。你应该在脚本的末尾找到以下一行：
- en: '[PRE51]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Make sure you replace **rg-01-key-vault** with the vault name you configured
    for the **azure_rm_key_vault.key_vault** resource defined in **target_vm/main.tf**.
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保你将 **rg-01-key-vault** 替换为在 **target_vm/main.tf** 中为 **azure_rm_key_vault.key_vault**
    资源配置的 vault 名称。
- en: 'Let’s run **terraform plan** to preview the changes to be performed by Terraform:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们运行 **terraform plan**，以预览 Terraform 将执行的更改：
- en: '[PRE52]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Upon running the command, we should encounter multiple **Missing required**
    **argument** errors.
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行命令时，我们应该会遇到多个 **Missing required** **argument** 错误。
- en: 'Let’s locate the following block of code in our **main.tf** file (inside the
    **pentest_lab** directory):'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在 **main.tf** 文件（位于 **pentest_lab** 目录中）中找到以下代码块：
- en: '[PRE53]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Update it with the following block of code:'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用以下代码块更新：
- en: '[PRE54]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Make sure you save the file before proceeding.
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在继续操作之前，确保保存文件。
- en: Note
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is important to note that compared to how the target VM instance was prepared
    in *[Chapter 4](B19755_04.xhtml)*, there is no waiting mechanism in this chapter’s
    implementation. Feel free to utilize the same technique from the previous chapter
    and upgrade the current implementation.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，与第 *[4章](B19755_04.xhtml)* 中准备目标虚拟机实例的方式相比，本章的实现没有等待机制。你可以自由使用上一章中的相同技术，并升级当前的实现。
- en: 'Let’s run **terraform plan** to preview the changes to be performed by Terraform:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们运行 **terraform plan**，以预览 Terraform 将执行的更改：
- en: '[PRE55]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Note
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Running this command may yield a few deprecation warnings. This should be okay,
    so long as we can successfully run the command without errors.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令可能会产生一些弃用警告。只要我们能够成功运行该命令而没有错误，这应该是可以的。
- en: 'Next, let’s use the **terraform apply** command to implement the changes:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们使用 **terraform apply** 命令来执行更改：
- en: '[PRE56]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'This should yield the following output:'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会输出以下内容：
- en: '[PRE57]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Make sure you copy the output values into a text editor on your local machine
    as we will use these values in the succeeding sections in this chapter.
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保你将输出值复制到本地机器上的文本编辑器中，因为我们将在本章的后续部分使用这些值。
- en: Important note
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: Make sure you update the Key Vault **name** value (defined in **target_vm/main.tf**)
    to any unused vault name in case you encounter an error message similar to **VaultAlreadyExists
    — The vault name ‘rg-01-key-vault’ is already in use. Vault names are globally
    unique so it is possible that the name is already taken**. Feel free to add random
    characters to the **name** value to help ensure that your vault name is globally
    unique (for example, **rg-01-key-vault-a1b2c3d4**).
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你更新 **Key Vault** 的 **name** 值（在 **target_vm/main.tf** 中定义），如果遇到类似 **VaultAlreadyExists
    — The vault name ‘rg-01-key-vault’ is already in use. Vault names are globally
    unique so it is possible that the name is already taken** 的错误信息，请修改为未使用的 vault
    名称。可以随意向 **name** 值中添加随机字符，以确保你的 vault 名称在全球范围内唯一（例如，**rg-01-key-vault-a1b2c3d4**）。
- en: Part 2 of 2 – Verifying our target VM instance setup
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 2 部分/2 – 验证我们的目标虚拟机实例设置
- en: 'Follow these steps:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: Navigate to the **Overview** blade of the target VM instance (**vm-target**)
    by (1) typing **vm-target** in the search bar and then (2) selecting **vm-target
    — Virtual machine** from the list of search results. Locate and select **Serial
    console** under the **Help** section of the resource menu in the left pane to
    open a serial console pane.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过以下方式导航到目标虚拟机实例（**vm-target**）的 **Overview** 面板：（1）在搜索框中输入 **vm-target**，然后（2）从搜索结果中选择
    **vm-target — 虚拟机**。在左侧资源菜单的 **Help** 部分，找到并选择 **Serial console**，以打开串行控制台面板。
- en: Note
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You may simply close Cloud Shell and refresh the page (or open the page in a
    new browser tab) if you are having issues loading the serial console Terminal.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在加载串行控制台终端时遇到问题，可以简单地关闭 Cloud Shell 并刷新页面（或在新浏览器标签页中打开页面）。
- en: Press *Enter* to load the **vm-target login** prompt. Use the **vm_target_username**
    (**testuser**) and **vm_target_password** (*randomly generated*) output values
    to authenticate and log in using the serial console.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Enter* 键加载 **vm-target login** 提示符。使用 **vm_target_username**（**testuser**）和
    **vm_target_password**（*随机生成*）输出值进行身份验证并通过串行控制台登录。
- en: Note
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Feel free to run the **terraform show** command in the Cloud Shell Terminal
    (inside the **~/pentest_lab** directory) if you were not able to copy the **vm_target_username**
    (**testuser**) and **vm_target_password** output values to the text editor on
    your local machine.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你无法将 **vm_target_username** (**testuser**) 和 **vm_target_password** 输出值复制到本地机器上的文本编辑器中，可以在云终端（**~/pentest_lab**
    目录中）运行 **terraform show** 命令。
- en: 'Let’s start by checking if the Metasploitable 2 container is running (by executing
    the following command after the **$** sign):'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从检查 Metasploitable 2 容器是否正在运行开始（在 **$** 后执行以下命令）：
- en: '[PRE58]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Feel free to wait and try running the same command after a few minutes in case
    the vulnerable container does not appear after running the **sudo docker** **ps**
    command.
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在运行 **sudo docker ps** 命令后，脆弱的容器没有出现，请耐心等待并在几分钟后重新运行相同的命令。
- en: Note
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are having issues setting up and configuring the target VM instance,
    simply open the **/var/log/** directory and troubleshoot using the logs generated
    by the installation and boot scripts. For example, you may run **cat /var/log/syslog
    | grep STEP** to check which steps from the **boot-script.sh** script file have
    already been executed inside the target VM instance.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在设置和配置目标虚拟机实例时遇到问题，只需打开 **/var/log/** 目录并使用安装和启动脚本生成的日志进行故障排除。例如，你可以运行 **cat
    /var/log/syslog | grep STEP** 来检查目标虚拟机实例内已经执行了 **boot-script.sh** 脚本文件中的哪些步骤。
- en: 'In addition to this, check if we can authenticate using the system-assigned
    managed identity:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除此之外，检查我们是否可以使用系统分配的托管标识进行身份验证：
- en: '[PRE59]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'This should return the following:'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该返回以下内容：
- en: '[PRE60]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: This means that we should be able to authenticate and perform specific actions
    in Azure without (explicitly) requiring credentials
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这意味着我们应该能够在 Azure 中进行身份验证并执行特定操作，而无需（显式地）提供凭据。
- en: 'Let’s also verify if we’re able to list the vaults:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们还验证是否能够列出密钥库：
- en: '[PRE61]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'This should return a nested JSON structure similar to what we have here:'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该返回一个类似于我们这里的嵌套 JSON 结构：
- en: '[PRE62]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Important note
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Note that you’ll get a different vault name value depending on how you configured
    the **azurerm_key_vault.keyvault** resource in the **target_vm/main.tf** Terraform
    configuration file.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您将根据如何在 **target_vm/main.tf** Terraform 配置文件中配置 **azurerm_key_vault.keyvault**
    资源而获得不同的密钥库名称值。
- en: 'Finally, let’s run the following command to list all the secrets stored in
    **rg-01-key-vault**:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们运行以下命令列出存储在 **rg-01-key-vault** 中的所有密钥：
- en: '[PRE63]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Make sure you replace **rg-01-key-vault** with the actual key vault name that
    you retrieved after running the command from the previous step. Running the command
    should return a list with a single nested JSON value corresponding to the **flag2**
    secret.
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保用你在上一步运行命令后获取的实际密钥库名称替换 **rg-01-key-vault**。运行命令应该返回一个仅包含与 **flag2** 密钥对应的单一嵌套
    JSON 值的列表。
- en: Important note
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If the previous command returned an empty **[]** value, make sure that the vault
    names specified in the **target_vm/main.tf** and **target_vm/boot-script.sh**
    files are the same. After updating the files, feel free to run the **terraform
    apply** command again to apply the changes you’ve made to these files and rebuild
    the target VM instance, which will run **boot-script.sh** again. To help you troubleshoot
    and resolve issues, you may delete the resources (using **terraform destroy**)
    and then create the resources again (using **terraform apply**).
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 如果前一个命令返回了一个空的 **[]** 值，确保 **target_vm/main.tf** 和 **target_vm/boot-script.sh**
    文件中指定的密钥库名称相同。更新文件后，可以再次运行 **terraform apply** 命令，以应用你对这些文件所做的更改并重新构建目标虚拟机实例，这将再次运行
    **boot-script.sh**。为了帮助你进行故障排除和解决问题，你可以删除资源（使用 **terraform destroy**），然后重新创建资源（使用
    **terraform apply**）。
- en: At this stage, you might be excited to explore and attack the target resources
    already! Given that we have intentionally configured the network environment to
    only allow resources in *VNet 02* to access *VNet 01* (where the target VM instance
    is launched), we will have to set up our attacker VM instance in *VNet 02* first
    before we can access the vulnerable-by-design application, along with performing
    a penetration testing simulation inside the network environment.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，你可能已经迫不及待想要探索并攻击目标资源了！由于我们故意将网络环境配置为仅允许 *VNet 02* 中的资源访问 *VNet 01*（目标虚拟机实例所在的网络），因此我们必须首先在
    *VNet 02* 中设置攻击者虚拟机实例，才能访问具有设计漏洞的应用程序，并在网络环境中执行渗透测试模拟。
- en: Manually setting up the attacker VM instance
  id: totrans-315
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动设置攻击者虚拟机实例
- en: With our peered network environment setup ready (with the target resources running
    inside it), we can now proceed with setting up our Kali Linux attacker. In the
    previous chapter, we took a step-by-step approach to setting up and configuring
    the attacker VM instance. In this chapter, we will optimize things a bit and make
    use of a couple of scripts to further speed up the installation process.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的对等网络环境已准备好（其中目标资源运行在其中）之后，我们现在可以继续设置我们的Kali Linux攻击者。在上一章中，我们逐步进行了攻击者VM实例的设置和配置。在本章中，我们将稍作优化，并利用一些脚本进一步加速安装过程。
- en: 'That said, we will divide this section into two parts:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，我们将把这一部分分成两部分：
- en: '*Part 1 of 2 – Manually launching and configuring the* *attacker instance*'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第1部分，共2部分 – 手动启动并配置* *攻击者实例*'
- en: '*Part 2 of 2 – Verifying that our setup* *is working*'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第2部分，共2部分 – 验证我们的设置* *是否正常工作*'
- en: Part 1 of 2 – Manually launching and setting up the attacker instance
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1部分，共2部分 – 手动启动并设置攻击者实例
- en: 'Follow these steps:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: In the search bar, type **virtual machines** and press *Enter*:![](image/B19755_05_010.jpg)
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索栏中输入**虚拟机**，然后按*回车*键：![](image/B19755_05_010.jpg)
- en: Figure 5.10 – Navigating to the Virtual machines page
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.10 – 导航到虚拟机页面
- en: Select **Virtual machines** from the list of available options to navigate to
    the **Virtual** **machines** page.
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从可用选项列表中选择**虚拟机**以导航到**虚拟机**页面。
- en: On the **Virtual machines** page, click the **Create** button. Choose **Azure
    virtual machine** from the list of options from the drop-down menu.
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**虚拟机**页面，点击**创建**按钮。从下拉菜单中选择**Azure虚拟机**。
- en: 'On the **Create a virtual machine** page, specify the following configuration
    values under the **Basics** tab:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**创建虚拟机**页面，在**基本**选项卡下指定以下配置值：
- en: '**Project details** > **Subscription**: Use existing subscription'
  id: totrans-327
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目详情** > **订阅**：使用现有订阅'
- en: '**Project details** > **Resource** **group**: **resource-group-02**'
  id: totrans-328
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目详情** > **资源** **组**：**resource-group-02**'
- en: '**Instance details** > **Virtual machine** **name**: **kali-00**'
  id: totrans-329
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实例详细信息** > **虚拟机** **名称**：**kali-00**'
- en: '**Instance details** > **Region**: **(US)** **East US**'
  id: totrans-330
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实例详细信息** > **地区**：**（美国）** **东美国**'
- en: '**Instance details** > **Security** **type**: **Standard**'
  id: totrans-331
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实例详细信息** > **安全性** **类型**：**标准**'
- en: '**Instance details** > **Image**: Click the **See all** **images** link'
  id: totrans-332
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实例详细信息** > **镜像**：点击**查看所有** **镜像**链接'
- en: Note
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Clicking **See all images** will redirect you to the **Select an** **image**
    page.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**查看所有镜像**将把你重定向到**选择镜像**页面。
- en: On the **Select an image** page, type **kali** in the search box and then press
    *Enter*:![](image/B19755_05_011.jpg)
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**选择镜像**页面，输入**kali**在搜索框中，然后按*回车*键：![](image/B19755_05_011.jpg)
- en: Figure 5.11 – Selecting the Kali Linux image
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.11 – 选择Kali Linux镜像
- en: Choose **Kali Linux — The Most Advanced Penetration Testing Distribution. Ever.**
    by clicking the **Select** button, as highlighted in *Figure 5**.11*.
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 选择**Kali Linux — 最先进的渗透测试发行版。永远是**，点击**选择**按钮，如*图5.11*所示。
- en: Select **Kali 2022.3 – x64 Gen 2** (or if there are other newer versions, choose
    the first one from the list of options). This should redirect you back to the
    **Create a virtual** **machine** page.
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Kali 2022.3 – x64 Gen 2**（如果有其他更新版本，选择列表中的第一个）。这应该会把你重定向回**创建虚拟机**页面。
- en: Note
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are having issues selecting the Kali Linux image and making it reflect
    in the drop-down menu as the selected image (even if the **Security type** configuration
    is already set to **Standard**), simply refresh the page and then try again. Note
    that you will need to input the VM configuration settings again.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在选择Kali Linux镜像并使其在下拉菜单中显示为已选镜像时遇到问题（即使**安全性类型**配置已经设置为**标准**），只需刷新页面并重试。请注意，你将需要重新输入虚拟机配置设置。
- en: 'Continuing where we left off on the **Create a virtual machine** page, specify
    the following configuration values under the **Basics** tab:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**创建虚拟机**页面继续之前的步骤，在**基本**选项卡下指定以下配置值：
- en: '**Administrator account** > **Authentication** **type**: **Password**'
  id: totrans-342
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理员账户** > **身份验证** **类型**：**密码**'
- en: '**Administrator account** > **Username**: **kali_admin**'
  id: totrans-343
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理员账户** > **用户名**：**kali_admin**'
- en: '**Administrator account** > **Password**: **KaliLinux1234!!!**'
  id: totrans-344
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理员账户** > **密码**：**KaliLinux1234!!!**'
- en: '**Administrator account** > **Confirm** **password**: **KaliLinux1234!!!**'
  id: totrans-345
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理员账户** > **确认** **密码**：**KaliLinux1234!!!**'
- en: '**Inbound port rules** > **Public inbound** **ports**: **None**'
  id: totrans-346
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**入站端口规则** > **公共入站** **端口**：**无**'
- en: 'Click the **Next : Disks >** button afterward.'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '然后点击**Next : Disks >**按钮。'
- en: Accept the default configuration under the **Disks** tab and click **Next :**
    **Networking >**.
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Disks**标签页下接受默认配置，然后点击**Next :** **Networking >**。
- en: 'Under the **Networking** tab, make sure that the following configuration values
    are set:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Networking**标签页下，确保设置了以下配置值：
- en: '**Virtual** **network**: **vnet-02**'
  id: totrans-350
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟** **网络**：**vnet-02**'
- en: '**Subnet**: **subnet-02 (192.168.1.0/24)**'
  id: totrans-351
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**子网**：**subnet-02 (192.168.1.0/24)**'
- en: '**NIC network security** **group**: **Advanced**'
  id: totrans-352
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NIC网络安全** **组**：**Advanced**'
- en: '**Configure network security** **group**: **nsg-02**'
  id: totrans-353
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置网络安全** **组**：**nsg-02**'
- en: '**Delete public IP and NIC when VM** **is deleted**:**(checked)**'
  id: totrans-354
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**删除公共IP和NIC，当VM** **被删除时**：**（已选中）**'
- en: Now, continue clicking the **Next** button until you reach the last tab.
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，继续点击**Next**按钮直到你到达最后一个标签页。
- en: Note
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Simply accept the default settings under **Disks**, **Networking**, **Management**,
    **Monitoring**, **Advanced**, **Tags**, and **Review +** **create**.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 只需接受**Disks**、**Networking**、**Management**、**Monitoring**、**Advanced**、**Tags**和**Review
    +** **create**的默认设置。
- en: Once you reach the **Review + create** tab, click the **Create** button after
    reviewing the configuration details.
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你到达**Review + create**标签页，检查配置详情后点击**Create**按钮。
- en: Wait until you see the **Your deployment is complete** message. Scroll down
    and click the **Go to resource** button. This should redirect you to the **Overview**
    blade of the VM we just created (**kali-00**).
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待直到你看到**部署完成**的消息。向下滚动并点击**Go to resource**按钮。这样会将你重定向到我们刚刚创建的虚拟机（**kali-00**）的**概览**页面。
- en: Locate and select **Serial console** under the **Help** section of the resource
    menu in the left pane to open a serial console pane.
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧面板的资源菜单中，找到并选择**串行控制台**，以打开串行控制台面板。
- en: Once the serial console has loaded, press *Enter* to continue to the **kali
    login:** prompt. Use **kali_admin** for the username and **KaliLinux1234!!!**
    for the password to proceed.
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦串行控制台加载完毕，按*Enter*键继续到**kali login:**提示符。使用**kali_admin**作为用户名，**KaliLinux1234!!!**作为密码继续操作。
- en: Note
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you see a bunch of question mark characters before the prompt (for example,
    **?????????????????????????kali_admin@kali:~$**), simply ignore these extra characters.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在提示符前看到一堆问号字符（例如，**?????????????????????????kali_admin@kali:~$**），请忽略这些额外的字符。
- en: 'Download the **kali_setup.sh** script by running the following commands (after
    the **$** sign):'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令下载**kali_setup.sh**脚本（在**$**符号后）：
- en: '[PRE64]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Note
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the shortened link provided simply points to the complete script,
    which can be found at [https://gist.githubusercontent.com/joshualat/e01be82543c238d7f0a13f4c33f22802/raw/8b6af622f340cdce14f13260a4ca16678f1dbb50/kali_setup.sh](https://gist.githubusercontent.com/joshualat/e01be82543c238d7f0a13f4c33f22802/raw/8b6af622f340cdce14f13260a4ca16678f1dbb50/kali_setup.sh).
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，提供的缩短链接仅指向完整的脚本，你可以在[https://gist.githubusercontent.com/joshualat/e01be82543c238d7f0a13f4c33f22802/raw/8b6af622f340cdce14f13260a4ca16678f1dbb50/kali_setup.sh](https://gist.githubusercontent.com/joshualat/e01be82543c238d7f0a13f4c33f22802/raw/8b6af622f340cdce14f13260a4ca16678f1dbb50/kali_setup.sh)找到该脚本。
- en: 'Let’s check the installation script inside **kali_setup.sh**:'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们查看一下**kali_setup.sh**中的安装脚本：
- en: '[PRE65]'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'This should display the contents of the script, similar to what is shown in
    *Figure 5**.12*:'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将显示脚本的内容，类似于*图5.12*中所示：
- en: '![](image/B19755_05_012.jpg)'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_05_012.jpg)'
- en: Figure 5.12 – kali_setup.sh
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.12 – kali_setup.sh
- en: In case you have forgotten already, this is the same set of commands we used
    in *[Chapter 4](B19755_04.xhtml)*, *Setting Up Isolated Penetration Testing Lab
    Environments* *on GCP*.
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你已经忘记了，这是我们在*[第4章](B19755_04.xhtml)*、*在GCP上设置隔离渗透测试实验环境*中使用的相同一组命令。
- en: 'Let’s use the **chmod** command to make the **kali_setup.sh** file executable:'
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用**chmod**命令使**kali_setup.sh**文件可执行：
- en: '[PRE66]'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Download the **setup_cron_job.sh** script:'
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载**setup_cron_job.sh**脚本：
- en: '[PRE67]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Note
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the shortened link provided simply points to the complete script,
    which can be found at [https://gist.githubusercontent.com/joshualat/e01be82543c238d7f0a13f4c33f22802/raw/8b6af622f340cdce14f13260a4ca16678f1dbb50/setup_cron_job.sh](https://gist.githubusercontent.com/joshualat/e01be82543c238d7f0a13f4c33f22802/raw/8b6af622f340cdce14f13260a4ca16678f1dbb50/setup_cron_job.sh).
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，提供的缩短链接仅指向完整的脚本，你可以在[https://gist.githubusercontent.com/joshualat/e01be82543c238d7f0a13f4c33f22802/raw/8b6af622f340cdce14f13260a4ca16678f1dbb50/setup_cron_job.sh](https://gist.githubusercontent.com/joshualat/e01be82543c238d7f0a13f4c33f22802/raw/8b6af622f340cdce14f13260a4ca16678f1dbb50/setup_cron_job.sh)找到该脚本。
- en: 'Let’s check what’s inside the **setup_cron_job.sh** script:'
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们查看一下**setup_cron_job.sh**脚本的内容：
- en: '[PRE68]'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'This should display the contents of the script, similar to what is shown in
    *Figure 5**.13*:'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会显示脚本的内容，类似于*图 5**.13*中所示：
- en: '![](image/B19755_05_013.jpg)'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_05_013.jpg)'
- en: Figure 5.13 – setup_cron_job.sh
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.13 – setup_cron_job.sh
- en: This will configure the VNC server and the noVNC proxy to automatically start
    upon each system reboot.
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将配置VNC服务器和noVNC代理，使其在每次系统重启时自动启动。
- en: 'Next, let’s make **setup_cron_job.sh** executable using the **chmod** command:'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们使用**chmod**命令使**setup_cron_job.sh**脚本可执行：
- en: '[PRE69]'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'With everything ready, let’s run the first script:'
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一切准备就绪后，让我们运行第一个脚本：
- en: '[PRE70]'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Note
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This step may take 20-30 minutes to complete. Feel free to grab a cup of coffee
    or tea while waiting. Given that it takes a while for the script to finish, you
    might as well grab a snack and eat that as well!
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 此步骤可能需要20-30分钟才能完成。在等待时，随意拿一杯咖啡或茶来喝。考虑到脚本需要一段时间才能完成，你不妨顺便拿点小吃吃点！
- en: 'Let’s quickly clear our screen before running the next set of commands:'
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行下一组命令之前，让我们快速清理一下屏幕：
- en: '[PRE71]'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Now, let’s run the **setup_cron_job.sh** script:'
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们运行**setup_cron_job.sh**脚本：
- en: '[PRE72]'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Let’s check if we were able to successfully update the **crontab** configuration:'
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们检查一下是否成功更新了**crontab**配置：
- en: '[PRE73]'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'This should yield the following output:'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会显示以下输出：
- en: '[PRE74]'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Here, you can see that we’ve configured **vncserver** and **novnc_proxy** to
    run after 60 seconds to ensure that the system processes are ready before these
    are run.
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，您可以看到我们已经配置了**vncserver**和**novnc_proxy**在60秒后运行，以确保系统进程在这些进程启动之前已经准备好。
- en: 'Restart the VM instance using the following command:'
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令重新启动VM实例：
- en: '[PRE75]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Note
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Wait for about 3-5 minutes for the attacker VM instance to restart.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 等待大约3-5分钟，直到攻击者VM实例重新启动。
- en: Part 2 of 2 – Verifying that our setup is working
  id: totrans-405
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第二部分：验证我们的设置是否正常工作
- en: 'Follow these steps:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照以下步骤操作：
- en: Once the serial console has loaded, press *Enter* to continue to the **kali
    login:** prompt. Use **kali_admin** for the username and **KaliLinux1234!!!**
    for the password to proceed.
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦串口控制台加载完成，按*Enter*继续到**kali login:**提示符。使用用户名**kali_admin**和密码**KaliLinux1234!!!**继续。
- en: 'Let’s use the **ps** command to quickly check if everything has been set up
    as planned:'
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用**ps**命令快速检查一切是否按计划设置好：
- en: '[PRE76]'
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Verify that you see the following running after using the **ps -ef | grep**
    **vnc** command:'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用**ps -ef | grep** **vnc**命令后，请验证是否看到以下运行中的进程：
- en: '[PRE77]'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Note
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You may need to wait for an extra minute for **ps -ef | grep vnc** to yield
    this output.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要额外等一分钟，直到**ps -ef | grep vnc**显示此输出。
- en: Using the resource menu in the left pane, navigate to the **Overview** blade
    of the VM instance:![](image/B19755_05_014.jpg)
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用左侧窗格中的资源菜单，导航到VM实例的**概述**页面：![](image/B19755_05_014.jpg)
- en: Figure 5.14 – Retrieving the Public IP address value of the target VM instance
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.14 – 获取目标VM实例的Public IP 地址值
- en: Copy the **Public IP address** value (to the clipboard), as highlighted in *Figure
    5**.14*.
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 复制**Public IP 地址**值（到剪贴板），如*图 5**.14*中所示。
- en: Open a new browser tab and access the web-based noVNC client using the **http://<ATTACKER
    VM PUBLIC IP ADDRESS>:8081/vnc.html** URL. Make sure you replace **<ATTACKER VM
    PUBLIC IP ADDRESS>** with the **Public IP address** value you copied to the clipboard
    previously:![](image/B19755_05_015.jpg)
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的浏览器标签页，使用**http://<ATTACKER VM PUBLIC IP ADDRESS>:8081/vnc.html**网址访问基于网页的noVNC客户端。确保将**<ATTACKER
    VM PUBLIC IP ADDRESS>**替换为您之前复制到剪贴板的**Public IP 地址**值：![](image/B19755_05_015.jpg)
- en: Figure 5.15 – noVNC welcome screen
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.15 – noVNC欢迎屏幕
- en: This should open a welcome screen with a **Connect** button, similar to what
    we have in *Figure 5**.15*.
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将打开一个欢迎屏幕，带有**连接**按钮，类似于*图 5**.15*中所示。
- en: Important note
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you find yourself unable to access the welcome screen, your IP address might
    have changed already. Simply open the Cloud Shell editor and update the **terraform.tfvars**
    file. Once the **terraform.tfvars** file has been updated with the new IP address
    of your local machine, run the **terraform apply** command again to update the
    firewall rule to whitelist your new IP address.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您发现无法访问欢迎屏幕，可能是您的IP地址已经发生了变化。只需打开Cloud Shell编辑器，更新**terraform.tfvars**文件。一旦**terraform.tfvars**文件已更新为您本地机器的新IP地址，重新运行**terraform
    apply**命令以更新防火墙规则，允许您的新IP地址通过。
- en: Click the **Connect** button and then use the **kali123** password (or the password
    you specified previously) to access the desktop environment, similar to what is
    shown in *Figure 5**.16*:![](image/B19755_05_016.jpg)
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**连接**按钮，然后使用**kali123**密码（或之前指定的密码）访问桌面环境，类似于*图 5.16*所示：![](image/B19755_05_016.jpg)
- en: Figure 5.16 – Accessing the Kali Linux desktop/GUI environment in the browser
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.16 – 在浏览器中访问 Kali Linux 桌面/GUI 环境
- en: Once we can access the desktop environment, we can proceed with creating the
    golden image based on the current VM instance (**kali-00**).
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦我们可以访问桌面环境，就可以基于当前的 VM 实例（**kali-00**）开始创建 golden 镜像。
- en: Note
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Feel free to close the browser tab (Kali Linux desktop/GUI environment) before
    proceeding with the next set of steps.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续下一组步骤之前，可以随时关闭浏览器标签页（Kali Linux 桌面/GUI 环境）。
- en: Compared to setting up a Kali Linux machine in GCP, setting up a similar VM
    instance in Microsoft Azure requires fewer steps as we no longer need to import
    the Kali Linux Generic Cloud Image. Of course, this chapter builds on top of the
    previous chapter and makes use of automated scripts to further reduce the number
    of steps when setting up the attacker machine manually.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 与在 GCP 中设置 Kali Linux 机器相比，在 Microsoft Azure 中设置类似的 VM 实例所需的步骤更少，因为我们不再需要导入
    Kali Linux 通用云镜像。当然，本章是在前一章的基础上进行的，并且使用自动化脚本进一步减少了手动设置攻击者机器时的步骤。
- en: Leveraging Terraform to automatically set up the attacker VM instance
  id: totrans-428
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用 Terraform 自动设置攻击者 VM 实例
- en: The previous section primarily focused on setting up the attacker VM instance
    using pre-built scripts. This was necessary because we will utilize this VM instance
    (**kali-00**) as a reference to create a golden image. This golden image will
    be used in the Terraform configuration file to automatically set up the attacker
    VM instance (**vm-kali**).
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 上一节主要集中于使用预构建脚本设置攻击者 VM 实例。这是必要的，因为我们将使用此 VM 实例（**kali-00**）作为参考来创建 golden 镜像。这个
    golden 镜像将用于 Terraform 配置文件中，以自动设置攻击者 VM 实例（**vm-kali**）。
- en: Note
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: What will happen to the original VM instance (**kali-00**) we created? After
    using it to create the golden image, it becomes *generalized* and cannot be started
    again. That said, once the golden image has been successfully created, we will
    delete the original VM instance (**kali-00**).
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的原始 VM 实例（**kali-00**）会发生什么？在用它创建 golden 镜像之后，它会变成*通用化的*，无法再启动。这意味着，一旦 golden
    镜像成功创建，我们将删除原始 VM 实例（**kali-00**）。
- en: 'This section is divided into the following subparts:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 本节分为以下子部分：
- en: '*Part 1 of 3 – Creating the* *golden image*'
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 1 部分，共 3 部分 – 创建* *golden 镜像*'
- en: '*Part 2 of 3 – Deleting the manually* *created resources*'
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 2 部分，共 3 部分 – 删除手动* *创建的资源*'
- en: '*Part 3 of 3 – Preparing the Terraform* *configuration files*'
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 3 部分，共 3 部分 – 准备 Terraform* *配置文件*'
- en: Without further ado, let’s begin!
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 不再多说，开始吧！
- en: Part 1 of 3 – Creating the golden image
  id: totrans-437
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 1 部分，共 3 部分 – 创建 golden 镜像
- en: 'Follow these steps:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: Navigate to the VM instance’ **Overview** blade of our Kali Linux (**kali-00**)
    instance.
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到我们 Kali Linux（**kali-00**）实例的 VM 实例**概述**页面。
- en: Locate and click the **Capture** button to be redirected to the **Create an**
    **image** page.
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到并点击**捕获**按钮，将被重定向到**创建映像**页面。
- en: 'On the **Create an image** page, specify the following configuration values
    under the **Basics** tab:'
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**创建映像**页面上，在**基础信息**标签下指定以下配置值：
- en: '**Project details** > **Subscription** > **Resource** **group**: **image-resource-group**.'
  id: totrans-442
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目详细信息** > **订阅** > **资源** **组**：**image-resource-group**。'
- en: '**Gallery details** > **Target Azure compute gallery**: Click **Create new**.
    Specify **kali_gallery** in the text field before clicking the **OK** button.'
  id: totrans-443
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图库详细信息** > **目标 Azure 计算图库**：点击**创建新建**。在文本框中输入**kali_gallery**，然后点击**确定**按钮。'
- en: '**Target VM image definition**: Click **Create new**. Specify **golden-image**
    in the **VM image definition name** field. Leave everything else as is and then
    click the **OK** button to proceed with creating the new VM image definition.'
  id: totrans-444
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标 VM 镜像定义**：点击**创建新建**。在**VM 镜像定义名称**字段中指定**golden-image**。保持其他选项不变，然后点击**确定**按钮以继续创建新的
    VM 镜像定义。'
- en: '**Version details** > **Version** **number**: **1.0.0**.'
  id: totrans-445
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本详细信息** > **版本** **号**：**1.0.0**。'
- en: 'Click the **Next : Tags >** button afterward.'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '然后点击**下一步 : 标签 >**按钮。'
- en: Note
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Make sure you take note of the **Publisher**, **Offer**, and **SKU** configuration
    values (**Publisher**: **kali-linux**, **Offer**: **kali**, **SKU**: **kali**)
    while creating the VM image definition.'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建虚拟机映像定义时，确保记下 **发布者**、**产品** 和 **SKU** 配置值（**发布者**：**kali-linux**，**产品**：**kali**，**SKU**：**kali**）。
- en: 'On the **Tags** tab, simply locate and click **Next: Review +** **create >**.'
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **标签** 标签下，简单地定位并点击 **下一步：审查 +** **创建 >**。
- en: Review the configuration settings and then click the **Create** button. This
    will stop the running VM instance and redirect you to the **Deployment** page
    (where you’ll see the **Deployment is in** **progress** message).
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审查配置设置，然后点击 **创建** 按钮。这将停止正在运行的虚拟机实例，并将你重定向到 **部署** 页面（在该页面上，你将看到 **部署正在进行**
    的消息）。
- en: Note
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This step may take around 10-15 minutes to complete. Feel free to grab a cup
    of coffee or tea while waiting!
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 该步骤可能需要大约 10-15 分钟才能完成。在等待时，随便泡杯咖啡或茶放松一下！
- en: Once you see the **Your deployment is complete** success message, click the
    **Go to resource** button to navigate to the **Overview** blade of the resource
    we just created.
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦看到 **您的部署已完成** 成功消息，点击 **前往资源** 按钮，导航到我们刚刚创建的资源的 **概览** 面板。
- en: Locate and click the **JSON View** link located at the top-left corner of the
    page (as highlighted in *Figure 5**.17*):![](image/B19755_05_017.jpg)
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位并点击页面左上角的 **JSON 视图** 链接（如 *图 5.17* 所示）：![](image/B19755_05_017.jpg)
- en: Figure 5.17 – Locating the JSON View link
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.17 – 定位 JSON 视图链接
- en: 'Clicking the **JSON View** link will open the **Resource JSON** pane. Click
    the **Copy to clipboard** button and then store this **id** value in a text editor
    on your local machine. Note that the **id** value should have a format similar
    to the following:'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击 **JSON 视图** 链接将打开 **资源 JSON** 面板。点击 **复制到剪贴板** 按钮，然后将此 **id** 值存储在本地计算机上的文本编辑器中。请注意，**id**
    值的格式应类似于以下内容：
- en: '[PRE78]'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: We will use this value later when we prepare the Terraform configuration files
    for automating the creation of our Kali Linux server.
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将在稍后准备 Terraform 配置文件时使用这个值，以便自动化创建 Kali Linux 服务器。
- en: Part 2 of 3 – Deleting the manually created resources
  id: totrans-459
  prefs:
  - PREF_IND
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 2 部分，共 3 部分 – 删除手动创建的资源
- en: 'Follow these steps:'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: Navigate to the **Overview** blade of the Kali Linux (**kali-00**) VM instance
    by (1) typing **kali-00** in the search bar and then (2) selecting **kali-00 —
    Virtual machine** from the list of search results.
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过（1）在搜索栏中输入 **kali-00**，然后（2）从搜索结果中选择 **kali-00 — 虚拟机**，导航到 Kali Linux (**kali-00**)
    虚拟机实例的 **概览** 面板。
- en: Now, let’s delete the instance. In the resource menu in the left pane, locate
    and click **Overview**. In the **Overview** blade, click the **Delete** button.
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们删除实例。在左侧面板的资源菜单中，找到并点击 **概览**。在 **概览** 面板中，点击 **删除** 按钮。
- en: Under the list of associated resources, make sure you have all three checkboxes
    checked (**OS disk**, **Network interfaces**, and **Public IP addresses**) under
    the **Delete with VM** column when possible.
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在关联资源列表下，确保在 **与虚拟机一起删除** 列中尽可能勾选所有三个复选框（**操作系统磁盘**、**网络接口** 和 **公共 IP 地址**）。
- en: Check the **I have read and understand that this virtual machine as well as
    any selected associated resources listed above will be deleted** checkbox as well.
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还需要勾选 **我已阅读并理解此虚拟机以及上面列出的任何关联资源将被删除** 复选框。
- en: Click the **Delete** button afterward.
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后点击 **删除** 按钮。
- en: Note
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: After a minute or two, you should see a success message stating that the resource(s)
    have been deleted successfully.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 一两分钟后，你应该会看到成功消息，说明资源已成功删除。
- en: Part 3 of 3 – Preparing the Terraform configuration files
  id: totrans-468
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 3 部分，共 3 部分 – 准备 Terraform 配置文件
- en: 'Follow these steps:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: It’s time to code again! Make sure that the Cloud Shell editor is activated
    and maximized.
  id: totrans-470
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该是再次编写代码的时候了！确保激活并最大化 Cloud Shell 编辑器。
- en: 'Before we run any of the succeeding commands, let’s make sure that we are inside
    the **pentest_lab** directory:'
  id: totrans-471
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在执行接下来的命令之前，确保我们在 **pentest_lab** 目录下：
- en: '[PRE79]'
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Let’s create the **main.tf**, **variables.tf**, and **outputs.tf** files inside
    the **attacker_vm** directory using the following commands:'
  id: totrans-473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用以下命令在 **attacker_vm** 目录中创建 **main.tf**、**variables.tf** 和 **outputs.tf**
    文件：
- en: '[PRE80]'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Note
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When you encounter issues using Cloud Shell, feel free to restart using the
    **Restart Cloud Shell** button. Make sure you navigate back to the **~/pentest_lab**
    directory after restarting Cloud Shell. If that does not work, you may sign out
    and sign in of your Azure account to help you troubleshoot and resolve various
    types of issues.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在使用Cloud Shell时遇到问题时，随时可以通过点击**Restart Cloud Shell**按钮进行重启。重启Cloud Shell后，请确保返回到**~/pentest_lab**目录。如果这样不起作用，您可以注销并重新登录您的Azure帐户，以帮助您排除并解决各种问题。
- en: 'Next, open the **attacker_vm/variables.tf** file in the editor and add the
    following blocks of code to define the **source_image_id**, **asg**, **nsg**,
    **rg_location**, **rg_name**, **subnet**, and **my_public_ssh_key** variables:'
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在编辑器中打开**attacker_vm/variables.tf**文件，并添加以下代码块以定义**source_image_id**、**asg**、**nsg**、**rg_location**、**rg_name**、**subnet**和**my_public_ssh_key**变量：
- en: '[PRE81]'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Open the **attacker_vm/main.tf** file in the editor and add the following blocks
    of code to define the public IP address and network interface resources for the
    attacker VM instance:'
  id: totrans-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器中打开**attacker_vm/main.tf**文件，并添加以下代码块以定义攻击者虚拟机实例的公共IP地址和网络接口资源：
- en: '[PRE82]'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Next, let’s define the following block of code to establish an association
    between the network interface of the attacker VM instance and the specified NSG:'
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们定义以下代码块，以便在攻击者虚拟机实例的网络接口与指定的NSG之间建立关联：
- en: '[PRE83]'
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Next, let’s define the following block of code to establish an association
    between the network interface of the attacker VM instance and the specified ASG:'
  id: totrans-483
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们定义以下代码块，以便在攻击者虚拟机实例的网络接口与指定的ASG之间建立关联：
- en: '[PRE84]'
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'With everything ready, let’s define and configure the attacker VM instance,
    which will utilize the golden image we prepared earlier:'
  id: totrans-485
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一切准备就绪后，让我们定义并配置攻击者虚拟机实例，它将使用我们之前准备的黄金镜像：
- en: '[PRE85]'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Here, we are allowing the attacker VM instance to be accessed using an SSH key
    as well (in addition to being accessed using a username and password).
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们允许攻击者的虚拟机实例通过SSH密钥进行访问（除了使用用户名和密码访问外）。
- en: Note
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure you save the **attacker_vm/main.tf** file before proceeding to the
    next step.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续下一步之前，请确保保存**attacker_vm/main.tf**文件。
- en: 'Open the **attacker_vm/outputs.tf** file in the editor and add the following
    lines of code to output the private and public IP addresses of the attacker VM
    instance:'
  id: totrans-490
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器中打开**attacker_vm/outputs.tf**文件，并添加以下代码行以输出攻击者虚拟机实例的私有和公共IP地址：
- en: '[PRE86]'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: This will allow the root module to access these values, which are currently
    only accessible from within the **attacker_vm** module.
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将允许根模块访问这些值，而这些值目前仅能从**attacker_vm**模块内访问。
- en: 'Finally, let’s define the following outputs in the **outputs.tf** file (inside
    the **pentest_lab** directory):'
  id: totrans-493
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们在**outputs.tf**文件中（位于**pentest_lab**目录内）定义以下输出：
- en: '[PRE87]'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Here, we are defining two outputs in the root module: **vm_kali_private_ip**,
    which is the private IP address of the attacker VM instance from the list of outputs
    of the **attacker_vm** module, and **vm_kali_public_ip**, which is the public
    IP address of the attacker VM instance from the list of outputs of the **attacker_vm**
    module.'
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们在根模块中定义了两个输出：**vm_kali_private_ip**，它是攻击者虚拟机实例的私有IP地址，来自**attacker_vm**模块的输出列表；以及**vm_kali_public_ip**，它是攻击者虚拟机实例的公共IP地址，同样来自**attacker_vm**模块的输出列表。
- en: Note
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Since the **outputs.tf** file has defined output values already, make sure you
    append these blocks of code instead of replacing existing ones.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 由于**outputs.tf**文件已经定义了输出值，因此请确保追加这些代码块，而不是替换现有的代码块。
- en: 'Let’s run **terraform plan** to preview the changes to be performed by Terraform:'
  id: totrans-498
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们运行**terraform plan**以预览Terraform将要执行的更改：
- en: '[PRE88]'
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: This should give us a couple of missing required argument errors.
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会给我们带来几个缺少的必需参数错误。
- en: 'To resolve these issues, let’s locate the following block of code in our **main.tf**
    file:'
  id: totrans-501
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了解决这些问题，接下来让我们在**main.tf**文件中找到以下代码块：
- en: '[PRE89]'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Let’s replace this with the following block of code:'
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们将其替换为以下代码块：
- en: '[PRE90]'
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Make sure you save the changes you’ve made to the **main.tf** file before proceeding.
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在继续之前，请确保保存您在**main.tf**文件中所做的更改。
- en: 'Let’s run **terraform plan** to preview the changes to be performed by Terraform:'
  id: totrans-506
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们运行**terraform plan**以预览Terraform将要执行的更改：
- en: '[PRE91]'
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: We’ll encounter another issue, this time concerning the **"<INSERT KALI IMAGE
    ID>"** string value we specified as a placeholder earlier.
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将遇到另一个问题，这次是关于我们之前作为占位符指定的**"<INSERT KALI IMAGE ID>"**字符串值。
- en: 'To fix this issue, let’s open the **terraform.tfvars** file and update it with
    the ID of the golden image we created previously:'
  id: totrans-509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了解决这个问题，让我们打开 **terraform.tfvars** 文件，并将其更新为我们之前创建的黄金镜像的 ID：
- en: '[PRE92]'
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'If you are wondering what this value looks like, the value for the **<INSERT
    KALI IMAGE ID>** placeholder should have a format similar to the following:'
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你想知道这个值是什么样的，**<INSERT KALI IMAGE ID>** 占位符的值应该具有类似以下格式：
- en: '[PRE93]'
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Let’s run **terraform** **plan** again:'
  id: totrans-513
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们再次运行 **terraform** **plan**：
- en: '[PRE94]'
  id: totrans-514
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: This command should complete without any errors this time.
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这次命令应该没有任何错误地完成。
- en: 'Next, let’s use the **terraform apply** command to implement the changes:'
  id: totrans-516
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们使用 **terraform apply** 命令来实现这些更改：
- en: '[PRE95]'
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'This should yield the following output:'
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会产生以下输出：
- en: '[PRE96]'
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: If the **terraform apply** command runs without any errors, we are ready to
    proceed to the next section!
  id: totrans-520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 **terraform apply** 命令运行没有任何错误，我们就可以准备继续下一部分了！
- en: Note
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure you copy the output values into a text editor on your local machine
    as we will use these values in the succeeding sections in this chapter.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将输出值复制到本地机器上的文本编辑器中，因为我们将在本章后续部分中使用这些值。
- en: 'Feel free to access the attacker VM instance using the SSH key (**kali-ssh**)
    you downloaded earlier in this chapter. After updating the permissions of the
    SSH key file using **chmod 600 kali-ssh**, you can run the following command to
    create the SSH tunnel between our local machine and the attacker VM instance:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 随时使用你在本章之前下载的 SSH 密钥 (**kali-ssh**) 访问攻击者虚拟机实例。在使用 **chmod 600 kali-ssh** 更新
    SSH 密钥文件的权限后，你可以运行以下命令，在本地机器和攻击者虚拟机实例之间创建 SSH 隧道：
- en: '[PRE97]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Once the SSH tunnel has been set up, we can access the same desktop environment
    through http://localhost:8081/vnc.html (instead of using the public IP address
    of the attacker VM instance).
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 SSH 隧道设置完成，我们可以通过 http://localhost:8081/vnc.html 访问相同的桌面环境（而不是使用攻击者虚拟机实例的公共
    IP 地址）。
- en: Note
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is important to note that the current implementation is not perfect and will
    need a few additional tweaks and upgrades before it can handle other scenarios
    such as VM instance restarts, along with container restarts. Feel free to utilize
    and combine some of the techniques used in the previous chapter to further enhance
    what we have running in the Azure environment.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，当前的实现并不完美，在处理其他场景（如虚拟机实例重启以及容器重启）之前，还需要进行一些额外的调整和升级。可以随时利用并结合上一章中使用的一些技巧，进一步提升我们在
    Azure 环境中运行的功能。
- en: Now that we have everything ready, we can proceed with simulating a penetration
    testing exercise inside our lab environment.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好一切，可以继续在我们的实验室环境中模拟一次渗透测试。
- en: Simulating penetration testing in the isolated network environment
  id: totrans-529
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在隔离网络环境中模拟渗透测试
- en: 'Given that our lab environment in Microsoft Azure has been set up successfully,
    we can now proceed with a simplified penetration testing simulation to verify
    if everything has been (mis)configured correctly. Compared to the previous chapter,
    our penetration testing simulation in this chapter will be a bit longer as we
    are dealing with a relatively more complex setup:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在 Microsoft Azure 中的实验环境已经成功设置，我们现在可以继续进行简化的渗透测试模拟，以验证一切是否（错误地）配置正确。与上一章相比，本章中的渗透测试模拟会稍微长一些，因为我们正在处理一个相对更复杂的设置：
- en: '![](image/B19755_05_018.jpg)'
  id: totrans-531
  prefs: []
  type: TYPE_IMG
  zh: '![](image/B19755_05_018.jpg)'
- en: Figure 5.18 – Penetration testing simulation
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.18 – 渗透测试模拟
- en: Our simulation starts by compromising a **Metasploitable 2** container running
    inside the VM instance. Given that this running container has been configured
    with the **--privileged** flag enabled, we can escape the container environment
    using a container breakout technique and access the host system, where we’ll find
    the first flag. We will then utilize the system-assigned managed identity assigned
    to the VM instance to access Azure Key Vault, where we’ll find the second flag.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的模拟从攻破运行在虚拟机实例中的**Metasploitable 2** 容器开始。鉴于这个运行中的容器已配置了启用 **--privileged**
    标志，我们可以使用容器突破技术逃离容器环境，并访问主机系统，在那里我们将找到第一个标志。接着，我们将利用分配给虚拟机实例的系统分配的托管身份，访问 Azure
    密钥库，在那里我们将找到第二个标志。
- en: 'In our penetration testing simulation, we will use **Metasploit** – a widely
    recognized penetration testing framework used by security professionals. We will
    use the interactive command-line interface of the Metasploit Framework called
    **msfconsole**. This command-line interface allows us to perform tasks such as
    searching for vulnerabilities, exploiting systems, conducting reconnaissance,
    managing sessions, and launching various security-related modules and exploits.
    Using it generally involves the following steps:'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的渗透测试模拟中，我们将使用**Metasploit**——一个广泛认可的渗透测试框架，安全专家普遍使用它。我们将使用名为**msfconsole**的Metasploit框架交互式命令行界面。这个命令行界面允许我们执行任务，如搜索漏洞、利用系统、进行侦察、管理会话，以及启动各种与安全相关的模块和利用工具。使用它通常涉及以下几个步骤：
- en: Running the **msfconsole** command in the Terminal to launch the interactive
    console.
  id: totrans-535
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中运行**msfconsole**命令启动交互式控制台。
- en: Identifying and selecting a module (for example, an exploit module) from the
    comprehensive collection of modules available in Metasploit.
  id: totrans-536
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Metasploit提供的全面模块集合中识别和选择一个模块（例如，利用模块）。
- en: Configuring the module by adjusting its parameters and settings.
  id: totrans-537
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过调整其参数和设置来配置该模块。
- en: Running the module.
  id: totrans-538
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行该模块。
- en: Exploring and using other modules for subsequent post-exploitation actions.
  id: totrans-539
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 探索并使用其他模块进行后续的后渗透行动。
- en: Note that this is a simplified way of describing how to use **msfconsole** as
    there are various advanced features, modules, and configurations available within
    the Metasploit Framework. Depending on the scenario, additional options such as
    auxiliary modules, post-exploitation techniques, scripting capabilities, and integration
    with external tools can be leveraged within **msfconsole**. If you have not used
    Metasploit before, don’t worry – the step-by-step guide in this section will help
    you utilize this framework along with other tools and techniques to validate if
    our lab environment has been (mis)configured correctly.
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这是一种简化的方式来描述如何使用**msfconsole**，因为Metasploit框架内有各种高级功能、模块和配置。根据场景，可以利用**msfconsole**中的额外选项，如辅助模块、后渗透技术、脚本功能，以及与外部工具的集成。如果你以前没有使用过Metasploit，不用担心——本节中的逐步指南将帮助你利用这个框架和其他工具与技术来验证我们的实验环境是否被（错误）配置正确。
- en: 'We will divide this section into four subparts:'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这一部分分成四个子部分：
- en: '*Part 1 of 4 – Scanning* *with Nmap*'
  id: totrans-542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 1 部分 / 4 – 使用 Nmap 进行扫描*'
- en: '*Part 2 of 4 – Using the VNC login scanner module* *of Metasploit*'
  id: totrans-543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 2 部分 / 4 – 使用 Metasploit 的 VNC 登录扫描器模块*'
- en: '*Part 3 of 4 – Breaking out of* *the container*'
  id: totrans-544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 3 部分 / 4 – 从* *容器中突破*'
- en: '*Part 4 of 4 – Locating* *the flags*'
  id: totrans-545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 4 部分 / 4 – 定位* *旗标*'
- en: Important note
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It is unethical and illegal to attack cloud resources owned by another user
    or company. Before proceeding, make sure you read the *Examining the considerations
    when building penetration testing lab environments in the cloud* section of *[Chapter
    1](B19755_01.xhtml)*, *Getting Started with Penetration Testing Labs in the Cloud*,
    since we will be simulating the attack process to validate if misconfigurations
    and vulnerabilities present in the applications and services running in the target
    VM instance are exploitable.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击另一个用户或公司拥有的云资源是违背道德和非法的。在继续之前，请确保你已经阅读了*《在云中构建渗透测试实验环境时的注意事项》*部分，来自*《云中渗透测试实验入门》*的*第1章*，因为我们将模拟攻击过程，以验证目标虚拟机实例中运行的应用程序和服务中的配置错误和漏洞是否可以被利用。
- en: With these in mind, we can now start the penetration testing simulation.
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这些，我们现在可以开始渗透测试模拟。
- en: Part 1 of 4 – Scanning with Nmap
  id: totrans-549
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 1 部分 / 4 – 使用 Nmap 进行扫描
- en: 'Follow these steps:'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: 'Let’s open a new browser tab and access the desktop environment using the following
    URL:'
  id: totrans-551
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们打开一个新的浏览器标签页，使用以下网址访问桌面环境：
- en: '[PRE98]'
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'Make sure you replace **<ATTACKER VM PUBLIC IP ADDRESS>** with the **vm_kali_public_ip**
    output value after running the **terraform** **apply** command:'
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保你将**<ATTACKER VM PUBLIC IP ADDRESS>**替换为运行**terraform** **apply**命令后得到的**vm_kali_public_ip**输出值：
- en: '![](image/B19755_05_019..jpg)'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_05_019..jpg)'
- en: Figure 5.19 – noVNC welcome screen
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.19 – noVNC 欢迎界面
- en: This should open a welcome screen with a **Connect** button, similar to what
    we have in *Figure 5**.19*.
  id: totrans-556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会打开一个带有**连接**按钮的欢迎界面，类似于*图 5.19*中的内容。
- en: Important note
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you find yourself unable to access the welcome screen, your IP address might
    have changed already. Simply update the **terraform.tfvars** file and then run
    the **terraform apply** command again to update the firewall rule to whitelist
    your new IP address.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你无法访问欢迎界面，可能是你的 IP 地址已经发生变化。只需更新 **terraform.tfvars** 文件，然后再次运行 **terraform
    apply** 命令，以更新防火墙规则，允许你的新 IP 地址通过。
- en: Click the **Connect** button and then use the **kali123** password (or the password
    you specified previously in this chapter) to access the desktop environment, similar
    to what we have in *Figure 5**.20*:![](image/B19755_05_020..jpg)
  id: totrans-559
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **连接** 按钮，然后使用 **kali123** 密码（或本章之前指定的密码）访问桌面环境，类似于 *图 5.20* 中的操作：![](image/B19755_05_020..jpg)
- en: Figure 5.20 – Accessing the Kali Linux desktop/GUI environment in the browser
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.20 – 在浏览器中访问 Kali Linux 桌面/GUI 环境
- en: Once we’re able to access the desktop environment, we should be able to perform
    various tasks and access the wide range of tools and utilities available in Kali
    Linux (similar to how we would use it on our local machine).
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦我们能够访问桌面环境，就可以执行各种任务并访问 Kali Linux 中广泛的工具和实用程序（类似于我们在本地计算机上使用它的方式）。
- en: Open a Terminal window inside the Kali Linux instance by clicking the icon highlighted
    in *Figure 5**.21*:![](image/B19755_05_021..jpg)
  id: totrans-562
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击 *图 5.21* 中高亮的图标，打开 Kali Linux 实例中的终端窗口：![](image/B19755_05_021..jpg)
- en: Figure 5.21 – Opening a Terminal window
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.21 – 打开终端窗口
- en: This should open a Terminal window where we can run commands after the **$**
    sign.
  id: totrans-564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会打开一个终端窗口，我们可以在 **$** 符号后运行命令。
- en: 'Set the **TARGET_IP** variable value to the private IP address of the target
    VM:'
  id: totrans-565
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **TARGET_IP** 变量的值设置为目标虚拟机的私有 IP 地址：
- en: '[PRE99]'
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Make sure you replace **<PRIVATE IP ADDRESS OF TARGET VM>** with the private
    IP address of the target VM instance (for example, **10.0.1.4**).
  id: totrans-567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保将 **<目标虚拟机的私有 IP 地址>** 替换为目标虚拟机实例的私有 IP 地址（例如，**10.0.1.4**）。
- en: Note
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that you might get a different private IP address for the target VM. Feel
    free to check the Terraform output value (**vm_target_private_ip**) by running
    **terraform output** inside the **~/pentest_lab** directory in the Cloud Shell
    Terminal.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，目标虚拟机的私有 IP 地址可能会有所不同。可以通过在 Cloud Shell 终端中的 **~/pentest_lab** 目录下运行 **terraform
    output** 来检查 Terraform 输出值 (**vm_target_private_ip**)。
- en: 'Let’s start by running the following command:'
  id: totrans-570
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先运行以下命令：
- en: '[PRE100]'
  id: totrans-571
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'This should yield a scan report similar to what we have in *Figure 5**.22*:'
  id: totrans-572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会生成一个扫描报告，类似于 *图 5.22* 中的结果：
- en: '![](image/B19755_05_022..jpg)'
  id: totrans-573
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_05_022..jpg)'
- en: Figure 5.22 – Result after running the nmap command again
  id: totrans-574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.22 – 再次运行 nmap 命令后的结果
- en: '*What just happened?* Here, we used Nmap to check and scan the open ports on
    the target VM instance. To quickly check for open ports, we used the **--top-ports**
    option while running Nmap. This allowed us to get (non-exhaustive) scan results
    within just a few seconds:'
  id: totrans-575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？* 在这里，我们使用 Nmap 检查并扫描了目标虚拟机实例上的开放端口。为了快速检查开放端口，我们在运行 Nmap 时使用了 **--top-ports**
    选项。这样，我们可以在短短几秒钟内获得（非详尽的）扫描结果：'
- en: '![](image/B19755_05_023..jpg)'
  id: totrans-576
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_05_023..jpg)'
- en: Figure 5.23 – Using the Nmap scanner to scan the open ports
  id: totrans-577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.23 – 使用 Nmap 扫描开放端口
- en: Since we mapped some of the container’s ports to the VM, we are effectively
    using Nmap to scan and examine the services running within the Metasploitable
    2 container as well.
  id: totrans-578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于我们将容器的一些端口映射到虚拟机，因此实际上我们也在使用 Nmap 扫描和检查 Metasploitable 2 容器内运行的服务。
- en: Note
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Feel free to check the boot script we used to configure the target VM instance
    (**vm-target**) for more details: [https://github.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud/blob/main/ch05/pentest_lab/target_vm/boot-script.sh](https://github.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud/blob/main/ch05/pentest_lab/target_vm/boot-script.sh).'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 可以随时查看我们用于配置目标虚拟机实例 (**vm-target**) 的启动脚本，详细信息请见：[https://github.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud/blob/main/ch05/pentest_lab/target_vm/boot-script.sh](https://github.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud/blob/main/ch05/pentest_lab/target_vm/boot-script.sh)。
- en: 'Next, let’s run the same command but this time with the **-sV** (service version
    detection) and **-sV** (TCP SYN scan) flags enabled:'
  id: totrans-581
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们运行相同的命令，但这次启用 **-sV**（服务版本检测）和 **-sV**（TCP SYN 扫描）标志：
- en: '[PRE101]'
  id: totrans-582
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'This should yield a scan report similar to what we have in *Figure 5**.24*:'
  id: totrans-583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会生成一个扫描报告，类似于 *图 5.24* 中的结果：
- en: '![](image/B19755_05_024..jpg)'
  id: totrans-584
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_05_024..jpg)'
- en: Figure 5.24 – Result after running the nmap command again
  id: totrans-585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.24 – 再次运行 nmap 命令后的结果
- en: Here, we can see that with the **-sV** and **-sS** flags enabled, we can determine
    the characteristics (such as the version or fingerprint) of the services running
    in each port of the target VM instance.
  id: totrans-586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到，启用 **-sV** 和 **-sS** 标志后，我们可以确定目标虚拟机实例中每个端口上运行的服务的特征（例如版本或指纹）。
- en: Note
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This step may take around 4-10 minutes to complete. Feel free to grab a cup
    of coffee or tea while you’re waiting!
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 此步骤可能需要大约 4-10 分钟才能完成。在等待时，不妨喝杯咖啡或茶！
- en: Part 2 of 4 – Using the VNC login scanner module of Metasploit
  id: totrans-589
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 2 部分 共 4 部分 – 使用 Metasploit 的 VNC 登录扫描器模块
- en: 'Follow these steps:'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照以下步骤操作：
- en: In the previous set of steps, we used Nmap to identify the open ports along
    with the services running in each of these ports. While there are several ports
    open, we will focus on port **5900** and use the VNC login auxiliary scanner module
    of Metasploit to try and authenticate using different username and password combinations:![](image/B19755_05_025..jpg)
  id: totrans-591
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前一组步骤中，我们使用 Nmap 来识别打开的端口以及每个端口上运行的服务。虽然有多个端口处于开放状态，但我们将重点关注端口 **5900**，并使用
    Metasploit 的 VNC 登录辅助扫描器模块，尝试使用不同的用户名和密码组合进行身份验证：![](image/B19755_05_025..jpg)
- en: Figure 5.25 – Using the VNC login auxiliary scanner to authenticate
  id: totrans-592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.25 – 使用 VNC 登录辅助扫描器进行身份验证
- en: 'Using the scanner, we will check if weak or default credentials are used to
    access the running VNC server process (application). Now that we have a better
    understanding of how the VNC login auxiliary scanner works, let’s execute the
    following command:'
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用扫描器，我们将检查是否使用弱密码或默认凭证来访问正在运行的 VNC 服务器进程（应用程序）。现在我们更好地理解了 VNC 登录辅助扫描器的工作原理，让我们执行以下命令：
- en: '[PRE102]'
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'This will launch the Metasploit Framework console, similar to what we have
    in *Figure 5**.26*:'
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将启动 Metasploit Framework 控制台，类似于我们在 *图 5**.26* 中看到的：
- en: '![](image/B19755_05_026..jpg)'
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_05_026..jpg)'
- en: Figure 5.26 – Metasploit Framework console
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.26 – Metasploit Framework 控制台
- en: Note that it may take a minute or two for **msfconsole** to be ready.
  id: totrans-598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，**msfconsole** 可能需要一两分钟才能准备好。
- en: Note
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'In case you are not aware, the Metasploit Framework is a framework written
    using the Ruby language! Even if you have not used Ruby to write scripts or build
    applications before, you will be able to understand the code written using said
    language. To see how the scanner works behind the scenes, feel free to check out
    the official Metasploit Framework GitHub repository: [https://github.com/rapid7/metasploit-framework/blob/master/modules/auxiliary/scanner/vnc/vnc_login.rb](https://github.com/rapid7/metasploit-framework/blob/master/modules/auxiliary/scanner/vnc/vnc_login.rb).'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还不知道，Metasploit Framework 是一个使用 Ruby 语言编写的框架！即使你之前没有使用 Ruby 编写脚本或构建应用程序，你也能理解用这种语言编写的代码。若想了解扫描器背后的工作原理，可以查看官方的
    Metasploit Framework GitHub 仓库：[https://github.com/rapid7/metasploit-framework/blob/master/modules/auxiliary/scanner/vnc/vnc_login.rb](https://github.com/rapid7/metasploit-framework/blob/master/modules/auxiliary/scanner/vnc/vnc_login.rb)。
- en: 'Now, run the following in **msfconsole**:'
  id: totrans-601
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在 **msfconsole** 中运行以下命令：
- en: '[PRE103]'
  id: totrans-602
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'This will search the module database and return a set of results, similar to
    what we have in *Figure 5**.27*:'
  id: totrans-603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将搜索模块数据库并返回一组结果，类似于我们在 *图 5**.27* 中看到的：
- en: '![](image/B19755_05_027..jpg)'
  id: totrans-604
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_05_027..jpg)'
- en: Figure 5.27 – Results after executing the search vnc login command
  id: totrans-605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.27 – 执行搜索 VNC 登录命令后的结果
- en: Since we are planning to scan and attempt to log in via VNC, we will choose
    the first one (**auxiliary/scanner/vnc/vnc_login**) in the next set of steps.
  id: totrans-606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于我们计划通过 VNC 扫描并尝试登录，我们将在下一步中选择第一个（**auxiliary/scanner/vnc/vnc_login**）。
- en: Note
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Here, you’ll notice that the module path (**auxiliary/scanner/vnc/vnc_login**)
    matches the file path (**auxiliary/scanner/vnc/vnc_login.rb**) where the Ruby
    code is stored inside the **modules** directory (without the *.rb* file extension).
    This means that if we need to check how a module has been implemented, we can
    simply locate the corresponding file inside the Metasploit Framework GitHub repository.
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你会注意到模块路径（**auxiliary/scanner/vnc/vnc_login**）与文件路径（**auxiliary/scanner/vnc/vnc_login.rb**）匹配，其中
    Ruby 代码存储在 **modules** 目录中（没有 *.rb* 文件扩展名）。这意味着，如果我们需要检查一个模块的实现方式，我们可以直接在 Metasploit
    Framework GitHub 仓库中找到对应的文件。
- en: 'Next, execute the following command to use the VNC login auxiliary scanner
    module:'
  id: totrans-609
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，执行以下命令以使用 VNC 登录辅助扫描器模块：
- en: '[PRE104]'
  id: totrans-610
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Running this command will make the system ready to proceed with the module’s
    configuration and execution.
  id: totrans-611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行此命令将使系统准备好继续配置和执行模块。
- en: 'Now that we have selected the VNC login auxiliary scanner module, let’s run
    the following to configure the **RHOST** (remote host) variable with the private
    IP address of the target VM:'
  id: totrans-612
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经选择了VNC登录辅助扫描器模块，让我们运行以下命令来配置**RHOST**（远程主机）变量，使用目标虚拟机的私有IP地址：
- en: '[PRE105]'
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Make sure you replace **<PRIVATE IP ADDRESS OF TARGET VM>** with the private
    IP address of the target VM instance before running the command.
  id: totrans-614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在运行命令之前，请确保将**<目标虚拟机的私有IP地址>**替换为目标虚拟机实例的私有IP地址。
- en: 'Let’s quickly check the settings and options we have before running the scanner:'
  id: totrans-615
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行扫描器之前，让我们快速检查一下我们拥有的设置和选项：
- en: '[PRE106]'
  id: totrans-616
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'This should return a list of module options, similar to what we have in *Figure
    5**.28*:'
  id: totrans-617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该返回一个模块选项列表，类似于*图5**.28*中的内容：
- en: '![](image/B19755_05_028..jpg)'
  id: totrans-618
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_05_028..jpg)'
- en: Figure 5.28 – Output after executing the show options command
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.28 – 执行显示选项命令后的输出
- en: Here, we can see a description of each module option, along with which options
    are required. As shown in *Figure 5**.**28*, all required options have been set
    accordingly.
  id: totrans-620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到每个模块选项的描述，以及哪些选项是必需的。如*图5**.**28*所示，所有必需选项已经设置好。
- en: 'With everything ready, let’s run the scanner:'
  id: totrans-621
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一切准备就绪后，让我们运行扫描器：
- en: '[PRE107]'
  id: totrans-622
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'This should give us the following:'
  id: totrans-623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该给我们以下结果：
- en: '![](image/B19755_05_029..jpg)'
  id: totrans-624
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_05_029..jpg)'
- en: Figure 5.29 – Output after executing the run command
  id: totrans-625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.29 – 执行运行命令后的输出
- en: Here, we can see that we should be able to log in using **password**. Wow! While
    this may seem a bit too easy, it is relatively common for users and administrators
    to overlook the importance of changing default or weak passwords, thus providing
    a convenient entry point for exploitation in a penetration testing exercise.
  id: totrans-626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到我们应该能够使用**password**登录。哇！虽然这可能看起来有点太容易了，但用户和管理员经常忽视更改默认或弱密码的重要性，从而为渗透测试中的利用提供了方便的入口点。
- en: 'Now, let’s exit **msfconsole**:'
  id: totrans-627
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们退出**msfconsole**：
- en: '[PRE108]'
  id: totrans-628
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Back in our Terminal console (with **msfconsole** exited already), let’s run
    the following command to check if the **$TARGET_IP** variable value is still set:'
  id: totrans-629
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到我们的终端控制台（已经退出**msfconsole**），让我们运行以下命令来检查**$TARGET_IP**变量值是否仍然设置：
- en: '[PRE109]'
  id: totrans-630
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: If not, just set it to the private IP address of the target VM instance again.
  id: totrans-631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果不能，只需再次将其设置为目标虚拟机实例的私有IP地址。
- en: 'Let’s check if we’re able to log into the VNC server:'
  id: totrans-632
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们检查是否能够登录VNC服务器：
- en: '[PRE110]'
  id: totrans-633
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'After using **password** as the password, a window similar to what we have
    in *Figure 5**.30* should open:'
  id: totrans-634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用**password**作为密码后，应该会打开一个类似于*图5**.30*中的窗口：
- en: '![](image/B19755_05_030..jpg)'
  id: totrans-635
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_05_030..jpg)'
- en: Figure 5.30 – Using vncviewer to access the Metasploitable 2 container
  id: totrans-636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.30 – 使用vncviewer访问Metasploitable 2容器
- en: Here, it is important to note that we are inside the Metasploitable 2 container
    running inside the VM instance. *How do we know this?* *Well, for one thing, we
    designed and built this penetration testing lab setup ourselves!* Joking aside,
    we will confirm this in the next set of steps.
  id: totrans-637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，重要的是要注意我们正在运行在VM实例内部的Metasploitable 2容器中。*我们如何知道这一点？* *嗯，首先，我们设计并构建了这个渗透测试实验室设置！*
    开玩笑的，我们将在接下来的步骤中确认这一点。
- en: Note
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that, alternatively, we can run **echo "password" | vncviewer $TARGET_IP
    -autopass** to accomplish the same thing.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，作为替代，我们可以运行**echo "password" | vncviewer $TARGET_IP -autopass**来完成相同的操作。
- en: 'Let’s run the following command in the Terminal window inside the **TightVNC:
    root’s X** **desktop** window:'
  id: totrans-640
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '让我们在**TightVNC: root’s X** **desktop**窗口内的终端窗口中运行以下命令：'
- en: '[PRE111]'
  id: totrans-641
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: This should return **uid=0(root)** **gid=0(root) groups=0(root)**.
  id: totrans-642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该返回**uid=0(root)** **gid=0(root) groups=0(root)**。
- en: 'Next, run the following command:'
  id: totrans-643
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，运行以下命令：
- en: '[PRE112]'
  id: totrans-644
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'We will see that we are running this command inside an **Ubuntu 8.04** “environment,”
    similar to what is shown in *Figure 5**.31*:'
  id: totrans-645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将看到我们正在在一个**Ubuntu 8.04**“环境”中运行此命令，类似于*图5**.31*所示：
- en: '![](image/B19755_05_031..jpg)'
  id: totrans-646
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_05_031..jpg)'
- en: Figure 5.31 – Result after running lsb_release -a inside the container
  id: totrans-647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.31 – 在容器内运行lsb_release -a后的结果
- en: This is the expected result given that we are inside a running Metasploitable
    2 container inside the target VM instance.
  id: totrans-648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是预期结果，因为我们在目标虚拟机实例内部运行的Metasploitable 2容器中。
- en: Note
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that this is just one of the ways to exploit **Metasploitable 2**. For
    more information, feel free to check out [https://docs.rapid7.com/metasploit/metasploitable-2-exploitability-guide/](https://docs.rapid7.com/metasploit/metasploitable-2-exploitability-guide/).
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这只是利用**Metasploitable 2**的方式之一。有关更多信息，欢迎访问[https://docs.rapid7.com/metasploit/metasploitable-2-exploitability-guide/](https://docs.rapid7.com/metasploit/metasploitable-2-exploitability-guide/)。
- en: Part 3 of 4 – Breaking out of the container
  id: totrans-651
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3部分，第4部分 – 突破容器限制
- en: At this point, we currently are inside the running Metasploitable 2 container.
    Now, let’s check if we can break out of the container!
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们目前处于运行中的Metasploitable 2容器内。现在，让我们检查是否能够突破容器限制！
- en: '![](image/B19755_05_032..jpg)'
  id: totrans-653
  prefs: []
  type: TYPE_IMG
  zh: '![](image/B19755_05_032..jpg)'
- en: Figure 5.32 – Breaking out of the container
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.32 – 突破容器限制
- en: 'Container breakout techniques involve exploiting vulnerabilities within a Docker
    environment to gain unauthorized access outside of the running container. Techniques
    range from kernel vulnerabilities and shared namespaces to insecure container
    configurations. In this part, we will run a sequence of commands to break out
    of a container running in privileged mode:'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 容器突破技术涉及利用Docker环境中的漏洞，获取容器外的未经授权的访问权限。技术手段从内核漏洞、共享命名空间到不安全的容器配置不等。在这一部分，我们将运行一系列命令突破处于特权模式下的容器：
- en: 'Let’s start by quickly checking and listing all existing disk partitions using
    the **fdisk -****l** command:'
  id: totrans-656
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们快速检查并列出所有现有的磁盘分区，使用**fdisk -l**命令：
- en: '[PRE113]'
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'This should display the disk partitions on the system, providing information
    about their sizes, types, and filesystems, similar to what is shown in *Figure
    5**.34*:'
  id: totrans-658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该显示系统上的磁盘分区，提供关于其大小、类型和文件系统的信息，类似于*图5.34*所示：
- en: '![](image/B19755_05_033..jpg)'
  id: totrans-659
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_05_033..jpg)'
- en: Figure 5.33 – Output after running the fdisk -l command
  id: totrans-660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.33 – 运行fdisk -l命令后的输出
- en: Here, we can see that we can try mounting the **/dev/sda1** partition to **/mnt**
    (which is what we will do in the next step!).
  id: totrans-661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到，我们可以尝试将**/dev/sda1**分区挂载到**/mnt**（这是我们在下一步中将要做的！）。
- en: 'Next, let’s use the following command to mount the **/dev/sda1** partition
    to the **/****mnt** directory:'
  id: totrans-662
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们使用以下命令将**/dev/sda1**分区挂载到**/mnt**目录：
- en: '[PRE114]'
  id: totrans-663
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'Let’s navigate to the **/mnt** directory and then perform **chroot** inside
    the directory:'
  id: totrans-664
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们进入**/mnt**目录，然后在该目录内执行**chroot**：
- en: '[PRE115]'
  id: totrans-665
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Here, we are using the **chroot** command to break out of the container.
  id: totrans-666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们使用**chroot**命令来突破容器的限制。
- en: 'Use the following command to check the identity information of the current
    user:'
  id: totrans-667
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令检查当前用户的身份信息：
- en: '[PRE116]'
  id: totrans-668
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'This should yield the following output:'
  id: totrans-669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该输出以下内容：
- en: '[PRE117]'
  id: totrans-670
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'Let’s check the specific distribution and version of the operating system using
    the following command:'
  id: totrans-671
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用以下命令检查操作系统的具体发行版和版本：
- en: '[PRE118]'
  id: totrans-672
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: You will be surprised to see that we’re now getting **Ubuntu 22.02 LTS** instead
    of **Ubuntu 8.04**!
  id: totrans-673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你会惊讶地发现我们现在看到的是**Ubuntu 22.02 LTS**，而不是**Ubuntu 8.04**！
- en: '![](image/B19755_05_034..jpg)'
  id: totrans-674
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_05_034..jpg)'
- en: Figure 5.34 – Output after running the lsb_release -a command
  id: totrans-675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.34 – 运行lsb_release -a命令后的输出
- en: '*This means that we were able to successfully break out of the container* and
    we should be able to run certain commands as the root user of the VM instance!'
  id: totrans-676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*这意味着我们已经成功地突破了容器的限制*，并且应该能够以虚拟机实例的root用户身份运行某些命令！'
- en: Note
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Running a container with the **--privileged** flag grants the container unrestricted
    access to the host system’s resources. Given that the isolation and security mechanisms
    and features are deactivated when this flag is enabled, an attacker (or someone
    playing the role of the attacker) can break out of the container using various
    container breakout techniques. We won’t dive deep into the details of this topic,
    so feel free to check other resources available online.
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 运行带有**--privileged**标志的容器授予容器对主机系统资源的无限制访问权限。由于启用此标志时隔离和安全机制被禁用，因此攻击者（或充当攻击者的人）可以使用各种容器突破技术突破容器的限制。我们不会深入讨论这个话题的细节，欢迎查阅其他在线资源。
- en: 'Open a Firefox browser (inside the Kali Linux desktop environment) and navigate
    to the following URL:'
  id: totrans-679
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个Firefox浏览器（在Kali Linux桌面环境中），并导航到以下网址：
- en: '[PRE119]'
  id: totrans-680
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'This should open a page similar to what is shown in *Figure 5**.35*:'
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该打开一个页面，类似于*图5.35*所示：
- en: '![](image/B19755_05_035..jpg)'
  id: totrans-682
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_05_035..jpg)'
- en: Figure 5.35 – Commands we will use in the next set of steps
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.35 – 我们将在接下来的步骤中使用的命令
- en: Here, we have a reference for the commands we will use in the succeeding set
    of steps. While this step is optional, having a cheat sheet or a reference will
    come in handy as we might accidentally miss a character or two when typing and
    running these commands!
  id: totrans-684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里，我们有一个参考命令的列表，将在后续步骤中使用。虽然这一步是可选的，但拥有一个备忘单或参考资料会很方便，因为在键入和运行这些命令时，我们可能会不小心漏掉一个或两个字符！
- en: Note
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'This shortened link will open the following GitHub Gist: [https://gist.githubusercontent.com/joshualat/bec319f607001e1ffd69d41d031a5526/raw/030e7efc13bddfb64fb50935fe0487054589dcdc/create_user.sh](https://gist.githubusercontent.com/joshualat/bec319f607001e1ffd69d41d031a5526/raw/030e7efc13bddfb64fb50935fe0487054589dcdc/create_user.sh).'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 这个缩短的链接将打开以下GitHub Gist：[https://gist.githubusercontent.com/joshualat/bec319f607001e1ffd69d41d031a5526/raw/030e7efc13bddfb64fb50935fe0487054589dcdc/create_user.sh](https://gist.githubusercontent.com/joshualat/bec319f607001e1ffd69d41d031a5526/raw/030e7efc13bddfb64fb50935fe0487054589dcdc/create_user.sh)。
- en: 'Now, navigate back to the Terminal inside the VNC viewer window (**TightVNC:
    root’s X desktop**). Let’s create a new user by running the following commands
    (one line at a time):'
  id: totrans-687
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '现在，返回VNC查看器窗口内的终端（**TightVNC: root的X桌面**）。让我们通过运行以下命令（逐行）创建一个新用户：'
- en: '[PRE120]'
  id: totrans-688
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: Important note
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Be careful when typing and running these commands! Make sure you check the spelling
    and capitalization of the commands, flags, and arguments used. Finally, be mindful
    of the spaces as well.
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 在键入和运行这些命令时要小心！确保检查所使用的命令、标志和参数的拼写和大小写。最后，也要注意空格。
- en: 'Next, let’s set up the necessary prerequisites for SSH access for the new user
    by running the following commands (one line at a time):'
  id: totrans-691
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过运行以下命令（逐行）设置新用户的SSH访问所需的先决条件：
- en: '[PRE121]'
  id: totrans-692
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'After running the last line from the preceding block of commands, we should
    receive a **System has not been booted with systemd as init system...** message,
    similar to what is shown in *Figure 5**.36*:'
  id: totrans-693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行前一个命令块中的最后一行后，我们应该会收到一个**System has not been booted with systemd as init system...**消息，类似于*图5**.36*所示：
- en: '![](image/B19755_05_036..jpg)'
  id: totrans-694
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_05_036..jpg)'
- en: Figure 5.36 – Creating a new SSH user
  id: totrans-695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.36 – 创建一个新的SSH用户
- en: At this point, we should be able to access the VM instance directly via SSH
    using the **new_user** user.
  id: totrans-696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此时，我们应该能够通过SSH直接访问VM实例，使用**new_user**用户。
- en: 'Close the VNC viewer (**TightVNC: root’s X desktop**) window and close the
    Firefox browser window as well.'
  id: totrans-697
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '关闭VNC查看器（**TightVNC: root的X桌面**）窗口，以及关闭Firefox浏览器窗口。'
- en: 'Back in our Terminal shell (where we previously ran **vncviewer $TARGET_IP**),
    quickly check if the **$TARGET_IP** variable value is still set to the private
    IP address of the target VM instance:'
  id: totrans-698
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到我们的终端shell（之前我们运行过**vncviewer $TARGET_IP**），快速检查**$TARGET_IP**变量值是否仍设置为目标VM实例的私有IP地址：
- en: '[PRE122]'
  id: totrans-699
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: This should yield an IP address value similar to **10.0.1.4**.
  id: totrans-700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将产生一个类似于**10.0.1.4**的IP地址值。
- en: Note
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you encounter strange characters while typing in the Terminal, simply close
    the noVNC browser tab (where we can access the Kali Linux desktop environment).
    After that, reopen it in a new browser tab and check if the issue has been resolved.
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在终端中键入时遇到奇怪的字符，请简单地关闭noVNC浏览器标签页（我们可以访问Kali Linux桌面环境的地方）。之后，在新的浏览器标签页中重新打开它，并检查问题是否已解决。
- en: Let’s check if we were able to properly set up SSH access for a new user (similar
    to what we have in *Figure 5**.37*):![](image/B19755_05_037..jpg)
  id: totrans-703
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们检查我们是否能够为新用户正确设置SSH访问（类似于*图5**.37*）：![](image/B19755_05_037..jpg)
- en: Figure 5.37 – Accessing the target instance via SSH using the new_user account
  id: totrans-704
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.37 – 使用new_user帐户通过SSH访问目标实例
- en: Here, we will try authenticating using the **new_user** account we created in
    the previous set of steps.
  id: totrans-705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们将尝试使用上一组步骤中创建的**new_user**帐户进行身份验证。
- en: 'Once you are ready, run the following command:'
  id: totrans-706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 准备就绪后，运行以下命令：
- en: '[PRE123]'
  id: totrans-707
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'When prompted for a password, use **password** to proceed:'
  id: totrans-708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在提示输入密码时，请使用**password**继续：
- en: '![](image/B19755_05_038..jpg)'
  id: totrans-709
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_05_038..jpg)'
- en: Figure 5.38 – Accessing the target VM via SSH
  id: totrans-710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.38 – 通过SSH访问目标VM
- en: If all the steps were performed correctly, we should be able to access the target
    VM instance via SSH, similar to what we have in *Figure 5**.38*.
  id: totrans-711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果所有步骤都正确执行，我们应该能够通过SSH访问目标VM实例，类似于*图5**.38*。
- en: 'Finally, let’s switch to the **root** user using the following command:'
  id: totrans-712
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们使用以下命令切换到**root**用户：
- en: '[PRE124]'
  id: totrans-713
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '*Wasn’t that fun?!* Now, let’s proceed with searching for the flags!'
  id: totrans-714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*这不是很有趣吗？* 现在，让我们继续搜索标志！'
- en: Part 4 of 4 – Locating the flags
  id: totrans-715
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第4部分/4 – 定位标志
- en: 'Follow these steps:'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 按照这些步骤操作：
- en: 'Let’s locate the first flag by running the following command:'
  id: totrans-717
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过运行以下命令来定位第一个标志：
- en: '[PRE125]'
  id: totrans-718
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'This will search the entire filesystem for files with a filename starting with
    **flag**. After a few minutes, we should get a list of results that includes a
    **/****root/flag1.txt** file:'
  id: totrans-719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将搜索整个文件系统，查找文件名以 **flag** 开头的文件。几分钟后，我们应该会得到一个结果列表，其中包括 **/root/flag1.txt**
    文件：
- en: '[PRE126]'
  id: totrans-720
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'Now, let’s check the contents of **/root/flag1.txt**:'
  id: totrans-721
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们检查 **/root/flag1.txt** 文件的内容：
- en: '[PRE127]'
  id: totrans-722
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'This should give us **FLAG # 1!**. One down, one more to go!'
  id: totrans-723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '这应该会给我们**FLAG # 1!**。完成一个，剩下一个！'
- en: Note
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When setting up penetration testing lab environments, feel free to use a cryptographic
    hash function or a random string generator to generate a unique value for the
    flags.
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置渗透测试实验室环境时，您可以随意使用加密哈希函数或随机字符串生成器生成唯一的标志值。
- en: 'Let’s check if the Azure CLI is installed:'
  id: totrans-726
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们检查 Azure CLI 是否已安装：
- en: '[PRE128]'
  id: totrans-727
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: This should return the **/****usr/bin/az** path.
  id: totrans-728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会返回 **/usr/bin/az** 路径。
- en: 'Now, check the version as well using the following command:'
  id: totrans-729
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用以下命令检查版本：
- en: '[PRE129]'
  id: totrans-730
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'This should give us the version number of the tool (along with its dependencies),
    similar to what is shown in *Figure 5**.39*:'
  id: totrans-731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会给我们工具的版本号（以及其依赖项），类似于*图 5.39*所示：
- en: '![](image/B19755_05_039..jpg)'
  id: totrans-732
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_05_039..jpg)'
- en: Figure 5.39 – Result after running the az --version command
  id: totrans-733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.39 – 运行 az --version 命令后的结果
- en: 'Here, we can see that version **2.49.0** is currently installed in the target
    VM instance. Now that we have verified that we can use the Azure CLI inside the
    VM instance, let’s try signing in using the following command:'
  id: totrans-734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到版本 **2.49.0** 当前已安装在目标 VM 实例中。现在我们已经验证了可以在 VM 实例内使用 Azure CLI，让我们尝试使用以下命令进行登录：
- en: '[PRE130]'
  id: totrans-735
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'Here, we use the system-assigned managed identity of the VM instance to authenticate
    without (explicitly) requiring credentials:'
  id: totrans-736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们使用 VM 实例的系统分配托管身份进行身份验证，无需（显式）提供凭据：
- en: '![](image/B19755_05_040..jpg)'
  id: totrans-737
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_05_040..jpg)'
- en: Figure 5.40 – Result after running the az login --identity command
  id: totrans-738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.40 – 运行 az login --identity 命令后的结果
- en: In *Figure 5**.40*, we can see that we have logged in using the system-assigned
    identity of the target VM instance.
  id: totrans-739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在*图 5.40*中，我们可以看到我们已经使用目标 VM 实例的系统分配身份进行了登录。
- en: Let’s check if we can list all Azure Key Vaults from the Terminal using the
    Azure CLI (inside the VM instance), similar to what we have in *Figure 5**.41*:![](image/B19755_05_041..jpg)
  id: totrans-740
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们检查是否可以使用 Azure CLI（在 VM 实例内）从终端列出所有 Azure Key Vault，类似于*图 5.41*所示：![](image/B19755_05_041..jpg)
- en: Figure 5.41 – Accessing Azure Key Vault from the VM instance
  id: totrans-741
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.41 – 从 VM 实例访问 Azure Key Vault
- en: There are a few things we can check using the Azure CLI but we will proceed
    with checking the Azure Key Vault resources since we are trying to validate whether
    the lab environment has been configured correctly.
  id: totrans-742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以通过 Azure CLI 检查一些内容，但我们将继续检查 Azure Key Vault 资源，因为我们正在验证实验环境是否已正确配置。
- en: 'That said, let’s run the following command:'
  id: totrans-743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 话虽如此，让我们运行以下命令：
- en: '[PRE131]'
  id: totrans-744
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'This should return a nested structure, similar to what we have in *Figure 5**.42*:'
  id: totrans-745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会返回一个嵌套结构，类似于*图 5.42*所示：
- en: '![](image/B19755_05_042..jpg)'
  id: totrans-746
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_05_042..jpg)'
- en: Figure 5.42 – Result after running the az keyvault list command
  id: totrans-747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.42 – 运行 az keyvault list 命令后的结果
- en: Wait a minute! How were we able to use the **az keyvault list** command? It
    seems that the system-assigned identity of the target VM instance allows us to
    authenticate and interact with Azure Key Vault without the need for explicit authentication
    credentials or secrets!
  id: totrans-748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 等一下！我们是怎么能够使用 **az keyvault list** 命令的？看起来目标 VM 实例的系统分配身份允许我们进行身份验证并与 Azure
    Key Vault 互动，而无需显式的身份验证凭据或秘密！
- en: Important note
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Note that you’ll get a different vault name value depending on how you configured
    the **azurerm_key_vault.keyvault** resource in the **target_vm/main.tf** Terraform
    configuration file.
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，根据您在 **target_vm/main.tf** Terraform 配置文件中配置的 **azurerm_key_vault.keyvault**
    资源，您将获得不同的金库名称值。
- en: 'Next, let’s run the following command to list all the secrets stored in **rg-01-key-vault**:'
  id: totrans-751
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们运行以下命令列出存储在 **rg-01-key-vault** 中的所有秘密：
- en: '[PRE132]'
  id: totrans-752
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'Make sure you replace **rg-01-key-vault** with the actual key vault **name**
    value that you retrieved after running the command from the previous step. This
    should return a nested structure, similar to what we have in *Figure 5**.43*:'
  id: totrans-753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保将 **rg-01-key-vault** 替换为您在上一步骤中运行命令后获取的实际金库 **名称** 值。这应该会返回一个嵌套结构，类似于*图 5.43*所示：
- en: '![](image/B19755_05_043..jpg)'
  id: totrans-754
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_05_043..jpg)'
- en: Figure 5.43 – Result after running the az keyvault secret list command
  id: totrans-755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.43 – 运行 az keyvault secret list 命令后的结果
- en: Here, we can see that we have one secret stored called **flag2**. *What is the
    value that’s been mapped to this secret?* We’ll find out in the next step!
  id: totrans-756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到我们存储了一个名为 **flag2** 的密钥。*这个密钥映射的值是什么？* 我们将在下一步中找出！
- en: 'Finally, let’s retrieve the value of the **flag2** secret. Again, make sure
    you replace **rg-01-key-vault** with the actual Key Vault name you retrieved after
    running the **az keyvault** **list** command:'
  id: totrans-757
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们检索 **flag2** 密钥的值。再次确保你用实际的 Key Vault 名称替换 **az keyvault list** 命令运行后检索到的
    **rg-01-key-vault**：
- en: '[PRE133]'
  id: totrans-758
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'This should return a nested JSON output, similar to what we have in *Figure
    5**.44*:'
  id: totrans-759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该返回一个类似于我们在 *图 5**.44* 中看到的嵌套的 JSON 输出：
- en: '![](image/B19755_05_044..jpg)'
  id: totrans-760
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_05_044..jpg)'
- en: Figure 5.44 – Result after running the az keyvault secret show command
  id: totrans-761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.44 – 运行 az keyvault secret show 命令后的结果
- en: 'Here, we can see that the value of the **flag2** secret is **FLAG #** **2!**.'
  id: totrans-762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '在这里，我们可以看到 **flag2** 密钥的值是 **FLAG #** **2!**。'
- en: 'Let’s run the same command, this time specifying **"value"** as the **--query**
    parameter value. Make sure you replace **rg-01-key-vault** with the Key Vault
    **name** value you retrieved after running the **az keyvault** **list** command:'
  id: totrans-763
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们运行相同的命令，这次将 **"value"** 指定为 **--query** 参数值。确保你用运行 **az keyvault list** 命令后检索到的
    Key Vault **name** 值替换 **rg-01-key-vault**：
- en: '[PRE134]'
  id: totrans-764
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'Instead of a nested JSON output, we should get the **FLAG # 2!** string value.
    *Looks like we were able to successfully retrieve the* *second flag!*'
  id: totrans-765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '而不是嵌套的 JSON 输出，我们应该得到 **FLAG # 2!** 字符串值。*看起来我们成功检索到了* *第二个标志！*'
- en: Note
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is important to note that we are just scratching the surface of what we can
    do with Azure Key Vault. For more information, feel free to check out [https://learn.microsoft.com/en-us/azure/key-vault/general/manage-with-cli2](https://learn.microsoft.com/en-us/azure/key-vault/general/manage-with-cli2).
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，我们只是初步了解了 Azure Key Vault 的功能。欲了解更多信息，请访问 [https://learn.microsoft.com/en-us/azure/key-vault/general/manage-with-cli2](https://learn.microsoft.com/en-us/azure/key-vault/general/manage-with-cli2)。
- en: 'Right now, you are probably excited to try out other exploits and techniques!
    Given that we have automated the setup process, we can simply run **terraform
    destroy -auto-approve** to delete the resources and then run **terraform apply
    -auto-approve** again to rebuild the entire environment. Note that it is also
    possible to rebuild only a specific component of the environment by running a
    (one-liner) command, similar to the following:'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能很兴奋尝试其他漏洞利用和技术！鉴于我们已自动化设置过程，我们只需运行 **terraform destroy -auto-approve**
    来删除资源，然后再次运行 **terraform apply -auto-approve** 来重新构建整个环境。请注意，也可以通过运行类似以下的（一行）命令来仅重建环境的特定组件：
- en: '[PRE135]'
  id: totrans-769
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: Running this command will destroy and recreate the target VM instance, along
    with other resources related to or dependent on it. Given that penetration testing
    activities may leave the infrastructure in an unstable or misconfigured state,
    rebuilding the infrastructure will return it to the desired state.
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令将销毁并重新创建目标 VM 实例，以及与之相关或依赖于它的其他资源。鉴于渗透测试活动可能导致基础设施处于不稳定或配置错误的状态，重建基础设施将使其恢复到期望的状态。
- en: Note
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '*For one thing, the* **new_user** *user should not be there in the first place,
    right?* That said, recreating the target VM instance (along with other resources
    in the environment) would revert the setup to an “untouched” state.'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: '*首先，* **new_user** *用户不应该存在，对吧？* 也就是说，重新创建目标 VM 实例（以及环境中的其他资源）将使设置恢复到“未触及”的状态。'
- en: Cleaning up
  id: totrans-773
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理中
- en: 'Cleaning up the cloud resources we created or deployed is a crucial step when
    working with vulnerable cloud applications and environments. If we don’t clean
    up and delete the resources we created right away, we might end up paying for
    unused cloud resources. In addition to this, these cloud resources may end up
    being attacked by malicious users. At a *minimum*, we will be paying for the time
    the following resources are running:'
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 清理我们创建或部署的云资源是处理易受攻击的云应用和环境时的关键步骤。如果我们不立即清理和删除我们创建的资源，可能会导致支付未使用的云资源费用。此外，这些云资源可能会受到恶意用户的攻击。至少，我们将支付以下资源运行的时间：
- en: 1 x **Standard_DS1_v2** Azure VM instance for the attacker machine
  id: totrans-775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 x **Standard_DS1_v2** Azure VM 实例用于攻击者机器
- en: 1 x **Standard_D2s_v3** Azure VM instance for the target machine
  id: totrans-776
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 x **Standard_D2s_v3** Azure VM 实例用于目标机器
- en: Please be aware that there are other costs we have to take into account as well
    — including data transfer fees, storage costs for persistent data used by the
    instances, and potential charges for other Azure services utilized in the account,
    along with any applicable taxes or fees associated with the usage of Azure resources.
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们还需要考虑其他费用——包括数据传输费用、实例使用的持久数据存储成本，以及账户中可能使用的其他Azure服务的费用，还有与Azure资源使用相关的任何适用税费。
- en: Note
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: 注释
- en: 'Since the overall cost when running these resources depends on several parameters,
    it is best to refer to the pricing documentation page provided by the cloud platform:
    [https://azure.microsoft.com/en-us/pricing/details/virtual-machines/](https://azure.microsoft.com/en-us/pricing/details/virtual-machines/).
    Since we utilized Azure Key Vault in the lab environment, feel free to check out
    the following as well: [https://azure.microsoft.com/en-us/pricing/details/key-vault/](https://azure.microsoft.com/en-us/pricing/details/key-vault/).
    You can also utilize the **Azure Pricing Calculator** to estimate the cost of
    deploying resources on Azure. You can access the Azure Pricing Calculator at [https://azure.microsoft.com/en-us/pricing/calculator/](https://azure.microsoft.com/en-us/pricing/calculator/).'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 由于运行这些资源的总体成本取决于多个参数，因此最好参考云平台提供的定价文档页面：[https://azure.microsoft.com/en-us/pricing/details/virtual-machines/](https://azure.microsoft.com/en-us/pricing/details/virtual-machines/)。由于我们在实验环境中使用了Azure
    Key Vault，也可以查看以下页面：[https://azure.microsoft.com/en-us/pricing/details/key-vault/](https://azure.microsoft.com/en-us/pricing/details/key-vault/)。你还可以使用**Azure定价计算器**来估算在Azure上部署资源的成本。可以通过以下链接访问Azure定价计算器：[https://azure.microsoft.com/en-us/pricing/calculator/](https://azure.microsoft.com/en-us/pricing/calculator/).
- en: 'That said, let’s proceed with deleting the resources we created in this chapter:'
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，让我们继续删除本章中创建的资源：
- en: Close the browser tab we used to access the Kali Linux desktop environment.
  id: totrans-781
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭我们用来访问Kali Linux桌面环境的浏览器标签。
- en: 'In the Cloud Shell Terminal, navigate to the **~/pentest_lab** directory and
    then use **terraform destroy** to clean up the resources we created earlier:'
  id: totrans-782
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Cloud Shell终端中，导航到**~/pentest_lab**目录，然后使用**terraform destroy**来清理我们之前创建的资源：
- en: '[PRE136]'
  id: totrans-783
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: Feel free to run the **terraform destroy** command a few times in case some
    resources fail to delete (or take a bit of time to delete). Alternatively, you
    may delete resources manually using the user interface if all else fails.
  id: totrans-784
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果有些资源未能删除（或删除需要一点时间），可以多次运行**terraform destroy**命令。或者，如果失败了，你也可以通过用户界面手动删除资源。
- en: Note
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 注释
- en: This step may take 10-15 minutes to complete.
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: 此步骤可能需要10到15分钟才能完成。
- en: 'Verify that the resources have been destroyed successfully using the following
    command:'
  id: totrans-787
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令验证资源是否已成功销毁：
- en: '[PRE137]'
  id: totrans-788
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: This should return an empty response since all the resources should have been
    deleted successfully.
  id: totrans-789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该返回空响应，因为所有资源应该已成功删除。
- en: Important note
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Feel free to perform a full audit of your Microsoft Azure account. This will
    help ensure that all resources have been properly deleted, minimize the risk of
    unintended costs, and address any potential security concerns.
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以自由地对你的Microsoft Azure账户进行全面审核。这将帮助确保所有资源已正确删除，减少意外费用的风险，并解决任何潜在的安全问题。
- en: That’s pretty much it! At this point, we should have a good idea of how to prepare
    penetration testing lab environments on Microsoft Azure. The penetration testing
    simulation we performed in the previous section should validate that our lab environment
    has been (mis)configured properly as well.
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！此时，我们应该已经对如何在Microsoft Azure上准备渗透测试实验环境有了清晰的了解。我们在上一节中进行的渗透测试模拟应验证我们实验环境是否已被（错误）配置正确。
- en: Summary
  id: totrans-793
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we focused on setting up a penetration testing lab environment
    in Microsoft Azure. We prepared a vulnerable-by-design lab setup where we can
    practice container breakout techniques to gain unauthorized access to host systems.
    Our lab environment also highlighted the potential misuse of managed identities
    in Azure as these inadvertently create other exploitable attack paths for attackers.
    After setting everything up, we performed a penetration testing simulation to
    validate if our lab environment had been (mis)configured correctly.
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们重点讲解了如何在 Microsoft Azure 上设置渗透测试实验环境。我们准备了一个按设计存在漏洞的实验环境，在这里我们可以练习容器突破技术，以便获得对宿主系统的未授权访问。我们的实验环境还突出了在
    Azure 中托管身份的潜在误用，因为这些身份无意中为攻击者创造了其他可利用的攻击路径。在设置好一切后，我们进行了渗透测试模拟，验证我们的实验环境是否已被（误）配置正确。
- en: In the next chapter, our focus will shift to preparing a penetration testing
    lab environment on AWS. In addition to setting up an isolated network environment,
    we’ll focus on preparing a lab setup where we can practice pivoting techniques
    that can be used to access internal systems and networks using the initially compromised
    machine. If you are excited to learn how to build a pivoting lab, then the next
    chapter is for you!
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们的重点将转向在AWS上准备渗透测试实验环境。除了设置一个隔离的网络环境外，我们还将专注于准备一个实验环境，在这里我们可以练习枢轴技术，通过最初被攻破的机器访问内部系统和网络。如果你迫不及待地想学习如何建立一个枢轴实验室，那么下一章将非常适合你！
- en: Further reading
  id: totrans-796
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For additional information on the topics covered in this chapter, you may find
    the following resources helpful:'
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: 关于本章涵盖主题的更多信息，以下资源可能会对您有所帮助：
- en: '*Connecting from your application to resources without handling* *credentials*
    ([https://learn.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview-for-developers?tabs=portal%2Cdotnet](https://learn.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview-for-developers?tabs=portal%2Cdotnet))'
  id: totrans-798
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*从您的应用程序连接到资源而无需处理* *凭证* ([https://learn.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview-for-developers?tabs=portal%2Cdotnet](https://learn.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview-for-developers?tabs=portal%2Cdotnet))'
- en: '*How managed identities for Azure resources work with Azure virtual* *machines*
    ([https://learn.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/how-managed-identities-work-vm](https://learn.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/how-managed-identities-work-vm))'
  id: totrans-799
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Azure 资源的托管身份如何与 Azure 虚拟* *机* 配合使用 ([https://learn.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/how-managed-identities-work-vm](https://learn.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/how-managed-identities-work-vm))'
- en: '*Authentication in Azure Key* *Vault* ([https://learn.microsoft.com/en-us/azure/key-vault/general/authentication](https://learn.microsoft.com/en-us/azure/key-vault/general/authentication))'
  id: totrans-800
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Azure Key* *Vault 中的身份验证* ([https://learn.microsoft.com/en-us/azure/key-vault/general/authentication](https://learn.microsoft.com/en-us/azure/key-vault/general/authentication))'
- en: '*Manage Key Vault using the Azure* *CLI* ([https://learn.microsoft.com/en-us/azure/key-vault/general/manage-with-cli2](https://learn.microsoft.com/en-us/azure/key-vault/general/manage-with-cli2))'
  id: totrans-801
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 Azure* *CLI* 管理 Key Vault ([https://learn.microsoft.com/en-us/azure/key-vault/general/manage-with-cli2](https://learn.microsoft.com/en-us/azure/key-vault/general/manage-with-cli2))'
- en: '*Best practices for using Azure Key* *Vault* ([https://learn.microsoft.com/en-us/azure/key-vault/general/best-practices](https://learn.microsoft.com/en-us/azure/key-vault/general/best-practices))'
  id: totrans-802
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 Azure Key* *Vault 的最佳实践* ([https://learn.microsoft.com/en-us/azure/key-vault/general/best-practices](https://learn.microsoft.com/en-us/azure/key-vault/general/best-practices))'
- en: '*Metasploitable 2 Exploitability* *Guide* ([https://docs.rapid7.com/metasploit/metasploitable-2-exploitability-guide/](https://docs.rapid7.com/metasploit/metasploitable-2-exploitability-guide/))'
  id: totrans-803
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Metasploitable 2 可利用性* *指南* ([https://docs.rapid7.com/metasploit/metasploitable-2-exploitability-guide/](https://docs.rapid7.com/metasploit/metasploitable-2-exploitability-guide/))'
- en: '*What is Microsoft Cost Management and* *Billing?* ([https://learn.microsoft.com/en-us/azure/cost-management-billing/cost-management-billing-overview](https://learn.microsoft.com/en-us/azure/cost-management-billing/cost-management-billing-overview))'
  id: totrans-804
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*什么是 Microsoft 成本管理和* *计费？* ([https://learn.microsoft.com/en-us/azure/cost-management-billing/cost-management-billing-overview](https://learn.microsoft.com/en-us/azure/cost-management-billing/cost-management-billing-overview))'
- en: '*How to optimize your cloud investment with Cost* *Management* ([https://learn.microsoft.com/en-us/azure/cost-management-billing/costs/cost-mgt-best-practices](https://learn.microsoft.com/en-us/azure/cost-management-billing/costs/cost-mgt-best-practices))'
  id: totrans-805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*如何通过成本* *管理* 优化你的云投资 ([https://learn.microsoft.com/en-us/azure/cost-management-billing/costs/cost-mgt-best-practices](https://learn.microsoft.com/en-us/azure/cost-management-billing/costs/cost-mgt-best-practices))'
- en: '*YouTube Playlist – Azure Cost* *Management* ([https://www.youtube.com/playlist?list=PLLasX02E8BPBJW49E5_sHgbgvztb4oz6D](https://www.youtube.com/playlist?list=PLLasX02E8BPBJW49E5_sHgbgvztb4oz6D))'
  id: totrans-806
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*YouTube 播放列表 – Azure 成本* *管理* ([https://www.youtube.com/playlist?list=PLLasX02E8BPBJW49E5_sHgbgvztb4oz6D](https://www.youtube.com/playlist?list=PLLasX02E8BPBJW49E5_sHgbgvztb4oz6D))'
