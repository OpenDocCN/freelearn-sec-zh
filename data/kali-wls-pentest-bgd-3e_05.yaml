- en: Chapter 5. Attacks on the WLAN Infrastructure
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 WLAN基础设施的攻击
- en: '|   | *"Thus, what is of supreme importance in war is to attack the enemy''s
    strategy"* |   |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|   | *"因此，战争中最重要的是攻击敌人的战略"* |   |'
- en: '|   | --*Sun Tzu, Art of War* |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|   | --*孙子，《孙子兵法》* |'
- en: '*In this chapter, we will attack the WLAN infrastructure''s core! We will focus
    on how we can penetrate into the authorized network using various new attack vectors
    and lure authorized clients to connect to us, as an attacker.*'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*在本章中，我们将攻击WLAN基础设施的核心！我们将重点介绍如何使用各种新的攻击向量渗透到授权网络中，并诱使授权客户端连接到我们——攻击者。*'
- en: 'The WLAN infrastructure is what provides wireless services to all the WLAN
    clients in a system. In this chapter, we will take a look at the various attacks
    that can be conducted against the infrastructure:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: WLAN基础设施为系统中的所有WLAN客户端提供无线服务。本章将介绍针对基础设施可能实施的各种攻击：
- en: Default accounts and credentials on the access point
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接入点的默认账户和凭据
- en: Denial of service attacks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拒绝服务攻击
- en: Evil twin and access point MAC spoofing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恶意双胞胎和接入点MAC欺骗
- en: Rogue access points
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恶意接入点
- en: Default accounts and credentials on the access point
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接入点的默认账户和凭据
- en: WLAN access points are the core building blocks of a wireless infrastructure.
    Even though they play such an important role, they are sometimes the most neglected
    in terms of security. In this exercise, we will check whether the default passwords
    have been changed on the access point or not. Then, we will go on to verify that,
    even if the passwords have been changed, they are still easy to guess and crack
    using a dictionary-based attack.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: WLAN接入点是无线基础设施的核心组成部分。尽管它们在整个系统中扮演着如此重要的角色，但在安全性方面它们有时是最被忽视的部分。在本次练习中，我们将检查接入点的默认密码是否已更改。然后，我们将继续验证，即使密码已更改，是否仍然容易猜测，并能通过基于字典的攻击破解。
- en: It is important to note that, as we move on to more advanced chapters, it will
    be assumed that you have gone through the previous chapters and are now familiar
    with the use of all the tools discussed there. This will allow us to build on
    that knowledge and try more complicated attacks!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，随着我们进入更高级的章节，将假设你已经完成了前面的章节并且熟悉了那里讨论的所有工具的使用。这样，我们就可以在此基础上构建知识，并尝试更复杂的攻击！
- en: Time for action – cracking default accounts on the access points
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时刻 – 破解接入点的默认账户
- en: 'Follow these instructions to get started:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照以下说明开始：
- en: Let's first connect to our Wireless Lab access point and attempt to navigate
    to the HTTP management interface. We see that the access point model is **TP-LINK
    Wireless N Router WR841N**, as shown in the following screenshot:![Time for action
    – cracking default accounts on the access points](graphics/B09903_05_01.jpg)
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们连接到我们的无线实验室接入点，并尝试访问HTTP管理界面。我们看到接入点的型号是**TP-LINK无线N路由器WR841N**，如以下截图所示：![行动时刻
    – 破解接入点的默认账户](graphics/B09903_05_01.jpg)
- en: From the manufacturer's website, we find the default password for `admin` is
    `admin`. We try this on the login page and we succeed in logging in. This shows
    how easy it is to break into accounts with default credentials. We highly encourage
    you to obtain the router's user manual online. This will allow you to understand
    what you are dealing with during the penetration test and gives you an insight
    into other configuration flaws you could check for.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从制造商的网站上，我们发现`admin`的默认密码是`admin`。我们在登录页面尝试了这个密码，并成功登录。这表明，使用默认凭据破入账户是多么容易。我们强烈建议你在线获取路由器的用户手册。这将帮助你在渗透测试过程中了解自己正在处理的内容，并为你提供其他可能检查的配置缺陷。
- en: '*What just happened?*'
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We verified that the default credentials were never changed on this access point,
    and this could lead to a full network compromise. Also, even if the default credentials
    are changed, the result should not be something that is easy to guess or run a
    simple dictionary-based attack on.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证了该接入点的默认凭据从未更改，这可能导致整个网络遭到完全的妥协。此外，即使默认凭据已更改，结果也不应该是容易猜测的，或者容易通过简单的字典攻击破解。
- en: Have a go hero – cracking accounts using brute-force attacks
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 来吧，英雄 – 使用暴力破解攻击破解账户
- en: In the previous exercise, change the password to something that is hard to guess
    or find in a dictionary and see whether you can crack it using a brute-force approach.
    Limit the length and characters in the password so that you can succeed at some
    point. One of the most common tools used to crack HTTP authentication is called
    **Hydra** and is available on Kali.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个练习中，将密码更改为难以猜测或在字典中查找的内容，并查看是否能够通过暴力破解法将其破解。限制密码的长度和字符，使你最终能够成功。最常用的 HTTP
    身份验证破解工具之一叫做**Hydra**，它可以在 Kali 上使用。
- en: Denial of service attacks
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务拒绝攻击
- en: 'WLANs are prone to **Denial of Service** (**DoS**) attacks using various techniques,
    including but not limited to:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: WLAN 易受到**服务拒绝**（**DoS**）攻击，使用各种技术，包括但不限于：
- en: Deauthentication attacks
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 去认证攻击
- en: Disassociation attacks
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 去关联攻击
- en: CTS-RTS attacks
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CTS-RTS 攻击
- en: Signal interference or spectrum jamming attacks
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信号干扰或频谱干扰攻击
- en: In the scope of this book, we will discuss deauthentication attacks on the WLAN
    infrastructure using the following experiment.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的范围内，我们将通过以下实验讨论 WLAN 基础设施上的去认证攻击。
- en: Time for action – deauthentication DoS attack
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 去认证 DoS 攻击
- en: 'Follow these instructions to get started:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明开始操作：
- en: Let's configure the Wireless Lab network to use Open Authentication and no encryption.
    This will allow us to see the packets using Wireshark easily:![Time for action
    – deauthentication DoS attack](graphics/B09903_05_02.jpg)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们配置无线实验室网络，使用开放认证并不加密。这将使我们能够轻松地使用 Wireshark 查看数据包：![行动时间 – 去认证 DoS 攻击](graphics/B09903_05_02.jpg)
- en: Let's connect a Windows client to the access point. We will see the connection
    in the `airodump-ng` screen:![Time for action – deauthentication DoS attack](graphics/B09903_05_03.jpg)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将 Windows 客户端连接到接入点。我们将在 `airodump-ng` 屏幕上看到连接：![行动时间 – 去认证 DoS 攻击](graphics/B09903_05_03.jpg)
- en: Now, on the attacker machine, let's run a directed deauthentication attack against
    this:![Time for action – deauthentication DoS attack](graphics/B09903_05_04.jpg)
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在攻击者的机器上，让我们对其进行定向去认证攻击：![行动时间 – 去认证 DoS 攻击](graphics/B09903_05_04.jpg)
- en: Note how the client gets disconnected from the access point completely. We can
    verify this on the `airodump-ng` screen as well:![Time for action – deauthentication
    DoS attack](graphics/B09903_05_05.jpg)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意客户端如何完全断开与接入点的连接。我们也可以在 `airodump-ng` 屏幕上验证这一点：![行动时间 – 去认证 DoS 攻击](graphics/B09903_05_05.jpg)
- en: If we use Wireshark to see the traffic, you will notice a lot of deauthentication
    packets that we just sent over the air:![Time for action – deauthentication DoS
    attack](graphics/B09903_05_06.jpg)
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们使用 Wireshark 查看流量，你会注意到我们刚刚通过空中发送了大量去认证包：![行动时间 – 去认证 DoS 攻击](graphics/B09903_05_06.jpg)
- en: We can do the same attack by sending a Broadcast deauthentication packet on
    behalf of the access point to the entire wireless network. This will have the
    effect of disconnecting all connected clients:![Time for action – deauthentication
    DoS attack](graphics/B09903_05_07.jpg)
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过代表接入点向整个无线网络发送广播去认证包来进行相同的攻击。这将导致断开所有已连接的客户端：![行动时间 – 去认证 DoS 攻击](graphics/B09903_05_07.jpg)
- en: '*What just happened?*'
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We successfully sent deauthentication frames to both the access point and the
    client. This resulted in them getting disconnected and a full loss of communication
    between them.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功地向接入点和客户端发送了去认证帧。这导致它们被断开连接，并完全失去通信。
- en: We also sent out Broadcast deauthentication packets, which will ensure that
    no client in the vicinity can successfully connect to our access point.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还发送了广播去认证包，这将确保附近的任何客户端都无法成功连接到我们的接入点。
- en: It is important to note that, as soon as the client is disconnected, it will
    try to connect back once again to the access point, and thus the deauthentication
    attack has to be carried out in a sustainable way to have a full DoS effect.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，一旦客户端断开连接，它将尝试重新连接到接入点，因此去认证攻击必须以可持续的方式进行，以产生完全的 DoS 效果。
- en: This is one of the easiest attacks to orchestrate but has the most devastating
    effect. This can easily be used in the real world to bring a wireless network
    down on its knees.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最容易组织的攻击之一，但它具有最具破坏性的效果。这可以很容易地在现实世界中用来让无线网络崩溃。
- en: Have a go hero – disassociation attacks
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 来试试吧，英雄 – 去关联攻击
- en: Try to check how you can conduct disassociation attacks against the infrastructure
    using tools available in Kali. Can you do a broadcast disassociation attack?
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试检查如何使用Kali中可用的工具对基础设施进行去关联攻击。你能进行广播去关联攻击吗？
- en: Evil twin and access point MAC spoofing
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 恶意双胞胎与接入点MAC伪造
- en: One of the most potent attacks on WLAN infrastructures is the **evil twin**.
    The idea is to basically introduce an attacker-controlled access point in the
    vicinity of the WLAN network. This access point will advertise the exact same
    SSID as the authorized WLAN network.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对WLAN基础设施的最强攻击之一就是**恶意双胞胎**。这个思路基本上是将一个攻击者控制的接入点引入WLAN网络的附近。这个接入点将广播与授权WLAN网络完全相同的SSID。
- en: Many wireless users may accidentally connect to this malicious access point,
    thinking it is part of the authorized network. Once a connection is established,
    the attacker can orchestrate a man-in-the-middle attack and transparently relay
    traffic while eavesdropping on the entire communication. We will take a look at
    how a man-in-the-middle attack is done in a later chapter. In the real world,
    an attacker would ideally use this attack close to the authorized network so that
    the user gets confused and accidentally connects to the attacker's network.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 许多无线用户可能会不小心连接到这个恶意接入点，误以为它是授权网络的一部分。一旦建立连接，攻击者就可以策划一个中间人攻击，并在透明地转发流量的同时监听整个通信。我们将在后续章节中看看如何进行中间人攻击。在现实世界中，攻击者通常会在靠近授权网络的地方发起此攻击，这样用户会感到困惑并误连接到攻击者的网络。
- en: An evil twin having the same MAC address as an authorized access point is even
    more difficult to detect and deter. This is where access point MAC spoofing comes
    in! In the next experiment, we will take a look at how to create an evil twin,
    coupled with access point MAC spoofing.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有与授权接入点相同MAC地址的恶意双胞胎更难被发现和防范。这就是接入点MAC伪造的作用！在接下来的实验中，我们将看看如何创建一个恶意双胞胎，并结合接入点MAC伪造。
- en: Time for action – evil twin with MAC spoofing
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时刻 – 带有MAC伪造的恶意双胞胎
- en: 'Follow these instructions to get started:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明开始操作：
- en: Use `airodump-ng` to locate the access point's BSSID and ESSID, which we would
    like to emulate in the evil twin:![Time for action – evil twin with MAC spoofing](graphics/B09903_05_08.jpg)
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`airodump-ng`来查找接入点的BSSID和ESSID，我们想要在恶意双胞胎中模仿它们：![行动时刻 – 带有MAC伪造的恶意双胞胎](graphics/B09903_05_08.jpg)
- en: 'Using this information, we create a new access point with the following `airbase-ng`
    command: `airbase-ng –essid <your chosen ssid> -c <channel> <interface>`. Minor
    errors may occur with newer releases:![Time for action – evil twin with MAC spoofing](graphics/B09903_05_09.jpg)'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用这些信息，我们通过以下`airbase-ng`命令创建一个新的接入点：`airbase-ng –essid <你选择的ssid> -c <频道> <接口>`。在较新的版本中可能会出现一些小错误：![行动时刻
    – 带有MAC伪造的恶意双胞胎](graphics/B09903_05_09.jpg)
- en: 'This new access point also shows up in the `airodump-ng` screen. It is important
    to note that you will need to run `airodump-ng` in a new window with the following
    command:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个新的接入点也会出现在`airodump-ng`屏幕上。需要注意的是，你需要在一个新的窗口中运行`airodump-ng`，并使用以下命令：
- en: '[PRE0]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s see this new access point:'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们来看一下这个新的接入点：
- en: '![Time for action – evil twin with MAC spoofing](graphics/B09903_05_10.jpg)'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时刻 – 带有MAC伪造的恶意双胞胎](graphics/B09903_05_10.jpg)'
- en: 'What we will do now is spoof the ESSID and MAC address of the access point
    using the following command:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们要做的是通过以下命令伪造接入点的ESSID和MAC地址：
- en: '[PRE1]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now if we look at through `airodump-ng`, it is almost impossible to differentiate
    between both visually:![Time for action – evil twin with MAC spoofing](graphics/B09903_05_11.jpg)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在如果我们通过`airodump-ng`查看，几乎无法视觉上区分两者：![行动时刻 – 带有MAC伪造的恶意双胞胎](graphics/B09903_05_11.jpg)
- en: Even `airodump-ng` is unable to discern that there are actually two different
    physical access points on the same channel. This is the most potent form of the
    evil twin.![Time for action – evil twin with MAC spoofing](graphics/B09903_05_12.jpg)
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 即使是`airodump-ng`也无法辨别在同一频道上实际上有两个不同的物理接入点。这就是恶意双胞胎的最强形式。![行动时刻 – 带有MAC伪造的恶意双胞胎](graphics/B09903_05_12.jpg)
- en: Now we send a deauthentication frame to the client, so it disconnects and immediately
    tries to reconnect:![Time for action – evil twin with MAC spoofing](graphics/B09903_05_13.jpg)
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们向客户端发送去认证帧，让它断开连接并立即尝试重新连接：![行动时刻 – 带有MAC伪造的恶意双胞胎](graphics/B09903_05_13.jpg)
- en: As we are closer to this client, our signal strength is higher, and it connects
    to our evil twin access point. As shown by the following airbase-ng output:![Time
    for action – evil twin with MAC spoofing](graphics/B09903_05_14.jpg)
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们离这个客户端更近，信号强度更高，因此它连接到了我们的邪恶双胞胎接入点。如以下 `airbase-ng` 输出所示：![行动时间 – 邪恶双胞胎与
    MAC 欺骗](graphics/B09903_05_14.jpg)
- en: '*What just happened?*'
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We created an evil twin for the authorized network and used a deauthentication
    attack to have the legitimate client connect back to us, instead of the authorized
    network access point.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为授权网络创建了一个“邪恶双胞胎”，并使用去认证攻击让合法客户端重新连接到我们，而不是授权网络接入点。
- en: It is important to note that, in the case of the authorized access point using
    encryption such as WEP/WPA, it is more difficult to conduct an attack in which
    traffic eavesdropping is possible. We will take a look at how to break the WEP
    key with just a client using the Caffe Latte attack in a later chapter.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，在使用加密（如 WEP/WPA）的授权接入点情况下，进行能够窃听流量的攻击更加困难。我们将在后续章节中探讨如何使用 Caffe Latte
    攻击在仅使用客户端的情况下破解 WEP 密钥。
- en: Have a go hero – evil twin and channel hopping
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 来吧英雄 – 邪恶双胞胎与频道跳跃
- en: In the previous exercise, run the evil twin on different channels and observe
    how the client, once disconnected, hops channels to connect to the access point.
    What is the deciding factor based on which the client decides which access point
    to connect to? Is it signal strength? Experiment and validate.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的练习中，在不同频道上运行邪恶双胞胎，并观察客户端一旦断开连接，如何切换频道重新连接接入点。客户端决定连接哪个接入点的决定因素是什么？是信号强度吗？进行实验并验证。
- en: A rogue access point
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个 rogue 接入点
- en: A **rogue access point** is an unauthorized access point connected to the authorized
    network. Typically, this access point can be used as a backdoor entry by an attacker,
    thus enabling him to bypass all security controls on the network. This would mean
    that the firewalls, intrusion prevention systems, and so on, which guard the border
    of a network, would be able to do little to stop him from accessing the network.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**rogue 接入点**是一个未经授权的接入点，它连接到授权网络。通常，攻击者可以利用这个接入点作为后门，从而绕过网络上的所有安全控制。这意味着，网络边界的防火墙、入侵预防系统等，几乎无法阻止他访问网络。'
- en: 'In the most common case, a rogue access point is set to Open Authentication
    and no encryption. The rogue access point can be created in the following two
    ways:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在最常见的情况下，rogue 接入点设置为开放认证且没有加密。可以通过以下两种方式创建 rogue 接入点：
- en: Installing an actual physical device on the authorized network as a rogue access
    point. (This is something I leave as an exercise to you.) Also, more than wireless
    security, this has to do with breaching the physical security of the authorized
    network.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在授权网络上安装实际的物理设备作为 rogue 接入点。（这是我留给你的练习。）此外，除了无线安全之外，这还涉及到突破授权网络的物理安全。
- en: Creating a rogue access point in software and bridging it with the local authorized
    Ethernet network. This will allow practically any laptop running on the authorized
    network to function as a rogue access point. We will look at this in the next
    experiment.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在软件中创建 rogue 接入点，并将其与本地授权以太网网络进行桥接。这将使任何运行在授权网络上的笔记本电脑都能作为 rogue 接入点。我们将在下一个实验中探讨这一点。
- en: Time for action – Setting up a rogue access point
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 设置 rogue 接入点
- en: 'Follow these instructions to get started:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明开始：
- en: Let's first bring up our rogue access point using `airbase-ng` and give it the
    ESSID `Rogue`:![Time for action – Setting up a rogue access point](graphics/B09903_05_15.jpg)
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先使用 `airbase-ng` 启动 rogue 接入点，并将其 ESSID 设置为 `Rogue`：![行动时间 – 设置 rogue 接入点](graphics/B09903_05_15.jpg)
- en: 'We now want to create a bridge between the Ethernet interface, which is part
    of the authorized network, and our rogue access point interface. To do this, we
    will first install `bridge-utils` files, create a bridge interface, and name it
    `Wifi-Bridge`:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们想在以太网接口（它是授权网络的一部分）和我们的 rogue 接入点接口之间创建一个桥接。为此，我们将首先安装 `bridge-utils` 文件，创建一个桥接接口，并将其命名为
    `Wifi-Bridge`：
- en: '[PRE2]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following screenshot shows the required commands in action:'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了执行所需命令的操作：
- en: '![Time for action – Setting up a rogue access point](graphics/B09903_05_16.jpg)'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – 设置 rogue 接入点](graphics/B09903_05_16.jpg)'
- en: 'We will then add both the Ethernet and the `at0` virtual interface created
    by `airbase-ng` to this bridge:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将把以太网接口和 `airbase-ng` 创建的 `at0` 虚拟接口添加到这个桥接中：
- en: '[PRE3]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The screenshot of the command is as follows:'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是命令的截图：
- en: '![Time for action – Setting up a rogue access point](graphics/B09903_05_17.jpg)'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – 设置恶意接入点](graphics/B09903_05_17.jpg)'
- en: 'We will then bring up this interfaces to enable the bridge with the following
    commands:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们接着通过以下命令启用此接口，以便启动桥接：
- en: '[PRE4]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The screenshot of the command is as follows:'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是命令的截图：
- en: '![Time for action – Setting up a rogue access point](graphics/B09903_05_18.jpg)'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – 设置恶意接入点](graphics/B09903_05_18.jpg)'
- en: 'We will then enable IP forwarding in the kernel to ensure that packets are
    forwarded:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们接着会在内核中启用IP转发，以确保数据包被转发：
- en: '[PRE5]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The screenshot of the command is as follows:'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是命令的截图：
- en: '![Time for action – Setting up a rogue access point](graphics/B09903_05_19.jpg)'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – 设置恶意接入点](graphics/B09903_05_19.jpg)'
- en: Brilliant! We are done. Now, any wireless client connecting to our rogue access
    point will have full access to the authorized network using the wireless-to-wired
    `Wifi-Bridge` we just built. We can verify this by connecting a client to the
    rogue access point.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 太棒了！我们完成了。现在，任何连接到我们恶意接入点的无线客户端都可以通过我们刚刚建立的无线到有线`Wifi-Bridge`完全访问授权网络。我们可以通过将客户端连接到恶意接入点来验证这一点。
- en: 'Then bring the bridge up with:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后使用以下命令启动桥接：
- en: '[PRE6]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice that it receives an IP address from the DHCP daemon running on the authorized
    LAN.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，它从运行在授权局域网上的DHCP守护进程获取了一个IP地址。
- en: We can now access any host on the wired network from this wireless client using
    this rogue access point.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以使用这个恶意接入点从无线客户端访问有线网络上的任何主机。
- en: '*What just happened?*'
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We created a rogue access point and used it to bridge all the authorized network
    LAN traffic over the wireless network. As you can see, this is a really serious
    security threat as anyone can break into the wired network using this bridge.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个恶意接入点，并用它通过无线网络桥接所有授权网络的局域网流量。如你所见，这是一种非常严重的安全威胁，因为任何人都可以通过这个桥接进入有线网络。
- en: Have a go hero – rogue access point challenge
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 来挑战吧英雄 – 恶意接入点挑战
- en: Check whether you can create a rogue access point that uses WPA/WPA2-based encryption
    to look more legitimate on the wireless network.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 检查你是否可以创建一个使用WPA/WPA2加密的恶意接入点，以使其在无线网络上看起来更合法。
- en: Pop quiz – attacks on the WLAN infrastructure
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快问快答 – 无线局域网基础设施攻击
- en: Q1\. What encryption does a rogue access point use in most cases?
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Q1. 恶意接入点通常使用什么加密？
- en: None
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无
- en: WEP
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WEP
- en: WPA
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WPA
- en: WPA2
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WPA2
- en: Q2\. What is the advantage of having the same MAC address as the authorized
    access point in an evil twin?
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Q2. 恶意双胞胎拥有与授权接入点相同的MAC地址有什么优势？
- en: It makes detecting the evil twin more difficult
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它使得检测恶意双胞胎变得更加困难
- en: It forces the client to connect to it
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它强制客户端连接到它
- en: It increases the signal strength of the network
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它增加了网络的信号强度
- en: None of the above
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以上都不是
- en: Q3\. What do DoS attacks do?
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Q3. 拒绝服务攻击做什么？
- en: They bring down the overall throughput of the network
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们降低了网络的整体吞吐量
- en: They do not target the clients
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们不针对客户端
- en: They can only be done if we know the network WEP/WPA/WPA2 credentials
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只有在我们知道网络WEP/WPA/WPA2凭据的情况下才能完成这些攻击
- en: All of the above
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以上所有
- en: Q4\. What do rogue access points do and how can they be created?
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Q4. 恶意接入点做什么，它们如何被创建？
- en: They allow backdoor entry into the authorized network
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们允许通过后门进入授权网络
- en: They use WPA2 encryption only
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们仅使用WPA2加密
- en: They can be created as software-based access points or can be actual devices
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们可以作为基于软件的接入点创建，或者可以是实际的设备
- en: Both 1 and 3
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1和3都对
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we explored different ways to compromise the security of the
    Wireless LAN infrastructure:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了破坏无线局域网基础设施安全的不同方式：
- en: Compromising default accounts and credentials on access points
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破坏接入点上的默认帐户和凭据
- en: Denial of service attacks
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拒绝服务攻击
- en: Evil twins and MAC spoofing
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恶意双胞胎和MAC伪造
- en: Rogue access points in the enterprise network
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 企业网络中的恶意接入点
- en: In the next chapter, we will take a look at different attacks on the Wireless
    LAN client. Interestingly, most administrators feel that the client has no security
    problems to worry about. We will see how nothing could be further from the truth.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将查看针对无线局域网客户端的不同攻击。有趣的是，大多数管理员认为客户端没有什么安全问题需要担心。我们将看到，事实远非如此。
