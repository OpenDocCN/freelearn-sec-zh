- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Lateral Movement in Domain and Across Forests
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 域内和跨森林的横向移动
- en: After an adversary establishes a foothold in the environment and/or harvests
    valid credentials, the next step is usually lateral movement. Lateral movement
    is a set of techniques that allows an attacker to move deeper into the target
    environment and search for high-value assets and sensitive data, including new
    credentials.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在对手在环境中建立立足点和/或收集有效凭证之后，下一步通常是横向移动。横向移动是一组技术，允许攻击者深入目标环境，寻找高价值资产和敏感数据，包括新凭证。
- en: 'We will start with a scenario in which an attacker obtained a clear-text password
    (e.g., successful password spray attack) and now tries to blend in with usual
    environment traffic by abusing administrative protocols. As a next step, we will
    discuss how to relay the hash and the prerequisites for this move to be successful.
    To perform lateral movement, the attacker does not only require an **New Technology
    LAN Manager** (**NTLM**) response or clear-text password; it can be any other
    form of credential material: NT hash, key, or ticket. As Kerberos is recommended
    by Microsoft as the primary secure authentication protocol in the domain, we will
    cover three types of Kerberos delegation in detail. As the last step, we will
    focus on lateral movement between forests only and how a security mechanism called
    SID filtering can stop it.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一个场景开始，假设攻击者获得了明文密码（例如，成功的密码喷洒攻击），现在试图通过滥用管理协议来与常规环境流量混淆。接下来，我们将讨论如何转发哈希值以及使此操作成功的前提条件。为了执行横向移动，攻击者不仅需要
    **新技术局域网管理器**（**NTLM**）响应或明文密码；它可以是任何其他形式的凭证材料：NT 哈希、密钥或票证。由于 Kerberos 被微软推荐作为域中的主要安全认证协议，我们将详细介绍三种
    Kerberos 委派类型。最后，我们将重点讨论仅在森林之间的横向移动，以及名为 SID 过滤的安全机制如何阻止它。
- en: 'In this chapter, we are going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Abusing administrative protocols for lateral movement
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滥用管理协议进行横向移动
- en: Relay the hash
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转发哈希
- en: Pass the whatever
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过任何方式
- en: Kerberos delegation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kerberos 委派
- en: Movement between domains and forests
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 域和森林之间的移动
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, you will need to have access to the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容，你将需要访问以下资源：
- en: VMware Workstation or Oracle VirtualBox with at least 16 GB of RAM, 8 CPU cores,
    and 55 GB of total space (more if you take snapshots)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VMware Workstation 或 Oracle VirtualBox，至少 16 GB 内存，8 个 CPU 核心，以及 55 GB 总存储空间（如果你拍摄快照，需更多空间）
- en: A Linux-based operating system is strongly recommended
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强烈推荐使用基于 Linux 的操作系统
- en: Installed Vagrant with a plugin for the corresponding virtualization platform
    and Ansible
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装了对应虚拟化平台插件和 Ansible 的 Vagrant
- en: GOADv2 project with all machines up and running
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GOADv2 项目，所有机器均已启动并运行
- en: Usage of administration protocols in the domain
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在域中使用管理协议
- en: In this section, we will cover various administration protocols that are usually
    used by IT staff inside the domain for day-to-day support activities. We will
    discuss PowerShell features such as PSRemoting and **Just Enough Administration**
    (**JEA**). The **Remote Desktop Protocol** (**RDP**) is one of the most common
    protocols used by administration as well. We will briefly go through other protocols
    that can be used for lateral movement such as WMI, SMB, DCOM, and PSExec from
    Impacket.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论 IT 员工通常在域内用于日常支持活动的各种管理协议。我们将讨论 PowerShell 功能，例如 PSRemoting 和 **Just
    Enough Administration**（**JEA**）。**远程桌面协议**（**RDP**）也是管理中最常用的协议之一。我们还将简要介绍其他可以用于横向移动的协议，如
    WMI、SMB、DCOM 和来自 Impacket 的 PSExec。
- en: PSRemoting and JEA
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PSRemoting 和 JEA
- en: '**PSRemoting** allows you to connect to multiple computers and run the commands
    on them. Another option is that you can have a one-to-one interactive shell on
    the target machine. For simplicity, you can think of it as SSH, but for Windows
    to run PowerShell commands. In a nutshell, the client tries to connect to a tiny
    web server running on a destination server called the **WinRM listener**. HTTP
    or HTTPS protocols can be used to provide transport for authentication. We can
    list available listeners by running the following command:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**PSRemoting** 允许你连接到多台计算机并在其上执行命令。另一种选择是，你可以在目标机器上获得一对一的交互式 shell。为了简化理解，你可以将其视为
    SSH，但它是在 Windows 上运行 PowerShell 命令的工具。简而言之，客户端尝试连接到运行在目标服务器上的一个小型 Web 服务器，称为 **WinRM
    监听器**。HTTP 或 HTTPS 协议可以用于提供认证的传输。我们可以通过运行以下命令来列出可用的监听器：'
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output of this command on SRV02 is shown in the following screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了SRV02上此命令的输出：
- en: '![Figure 5.1 – WinRM listeners on SRV02](image/B18964_05_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – SRV02上的WinRM监听器](image/B18964_05_01.jpg)'
- en: Figure 5.1 – WinRM listeners on SRV02
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – SRV02上的WinRM监听器
- en: 'Let’s log in to the remote computer with the following command:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下命令登录到远程计算机：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The traffic capture during authentication will be as shown in the following
    screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 认证过程中的流量捕获将如以下截图所示：
- en: '![Figure 5.2 – PSRemoting login traffic capture](image/B18964_05_02.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2 – PSRemoting 登录流量捕获](image/B18964_05_02.jpg)'
- en: Figure 5.2 – PSRemoting login traffic capture
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 – PSRemoting 登录流量捕获
- en: If we are on a Linux machine, we can try the **evil-winrm** tool[1] to get an
    interactive shell. Also, PSRemoting supports different authentication protocols.
    Our focus will be only on Kerberos authentication. To be able to log in to the
    machine, the user should be a part of the **Administrators** or **Remote Management
    Users** groups. Also, it is important to mention that configuring a list of trusted
    machines by filling in the **Trusted Hosts** option in WinRM configuration and
    applying HTTPS as a transport protocol will benefit the security of the environment.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用的是Linux机器，可以尝试**evil-winrm**工具[1]来获取交互式Shell。此外，PSRemoting支持不同的身份验证协议。我们将仅关注Kerberos身份验证。为了能够登录到机器，用户应属于**管理员**或**远程管理用户**组。此外，需要提到的是，通过填写WinRM配置中的**受信任主机**选项并应用HTTPS作为传输协议来配置受信任主机列表，将有助于提高环境的安全性。
- en: In some environments, you can encounter **Just In Time** (**JIT**) administration
    and/orJEA. JIT is a security concept in which administrative rights can be assigned
    and revoked on a time-dependent basis. JEA is a concept that limits what certain
    users can do remotely on the machine. There is a good example of setting up JEA
    in a lab environment for training purposes[2]. We are not going to cover this
    in detail, but it is important to mention such security mechanisms. As usual,
    every security boundary can be bypassed if configured insecurely.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些环境中，您可能会遇到**即时管理**（**JIT**）和/或JEA。JIT是一种安全概念，其中管理员权限可以基于时间动态分配和撤销。JEA是一种限制某些用户在机器上远程执行操作的概念。这里有一个在实验室环境中为培训目的设置JEA的良好示例[2]。我们不会详细讲解这个内容，但提到这些安全机制还是很重要的。像往常一样，任何安全边界都可以在配置不安全的情况下被绕过。
- en: Note
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'A good presentation with tips to escape can be found here: [https://www.triplesec.info/slides/3c567aac7cf04f8646bf126423393434.pdf](https://www.triplesec.info/slides/3c567aac7cf04f8646bf126423393434.pdf).
    A great toolkit called RACE[3] that can assist in getting persistence through
    JEA was released by *Nikhil Mittal*.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在这里找到一个包含逃逸技巧的优秀演示：[https://www.triplesec.info/slides/3c567aac7cf04f8646bf126423393434.pdf](https://www.triplesec.info/slides/3c567aac7cf04f8646bf126423393434.pdf)。一个名为RACE[3]的强大工具包可以帮助通过JEA实现持久化，该工具包由*Nikhil
    Mittal*发布。
- en: Now, let’s discuss the second most common administration protocol, which is
    RDP.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们讨论第二种最常见的管理协议，即RDP。
- en: RDP
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RDP
- en: RDP allows you to connect to a remote computer and provides the same experience
    as if you were sitting in front of it, including the GUI as well. If you have
    the clear-text credentials of a compromised user, you can use RDP to access the
    target machine. This information can be found by the BloodHound tool during enumeration.
    To identify such users, BloodHound collects members of the **Remote Desktop Users**
    group on the computer and principals with **SeRemoteInteractiveLoginPrivilege**
    rights in the **Local Security Authority** (**LSA**) policy. If there is a user
    who meets both criteria, then the **CanRDP** edge appears[4]. For connection,
    we can use a Windows built-in client or **xfreerdp** from Kali Linux.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: RDP允许你连接到远程计算机，并提供与直接坐在计算机前的相同体验，包括图形用户界面（GUI）。如果你有被攻陷用户的明文凭证，可以使用RDP访问目标机器。BloodHound工具在枚举期间会发现这些信息。为了识别此类用户，BloodHound会收集计算机上**远程桌面用户**组的成员和在**本地安全策略**（**LSA**）中拥有**SeRemoteInteractiveLoginPrivilege**权限的主体。如果有用户符合这两个条件，则会出现**CanRDP**边缘[4]。连接时，我们可以使用Windows自带客户端或来自Kali
    Linux的**xfreerdp**。
- en: 'If we have only the NT hash, we can abuse the feature called **Restricted Admin**
    mode. In this mode, credentials won’t be sent to the remote computer and will
    not be stored in memory, because it transforms the logon to a **Network Logon
    (Type 3)** instead of a **Remote Interactive Logon (Type 10)**. This looks like
    a good security measure, but this is exactly why we can pass the hash to RDP.
    The main caveat is that the compromised user must be in the **Administrator**
    group and this mode needs to be enabled. Let us quickly demonstrate this mode
    in practice. To log in as **eddard.stark** in winterfell, we can use a Windows
    Native Client by doing pass-the-hash with Mimikatz first or **xfreerdp** from
    a Linux machine:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只有 NT 哈希值，我们可以利用名为 **受限管理员** 模式的功能。在此模式下，凭据不会被发送到远程计算机，也不会存储在内存中，因为它将登录方式转换为
    **网络登录（类型 3）**，而不是 **远程交互式登录（类型 10）**。这看起来是一个不错的安全措施，但这也是我们可以将哈希传递到 RDP 的原因。主要的警告是，受损的用户必须属于
    **管理员** 组，并且此模式需要启用。我们来快速演示这个模式的实际操作。要以 **eddard.stark** 用户身份登录到 winterfell，我们可以先通过
    Mimikatz 进行 pass-the-hash，或者从 Linux 机器上使用 **xfreerdp**：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The result of running this command is shown in the following screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令的结果如下图所示：
- en: '![Figure 5.3 – Restricted Admin mode is not enabled](image/B18964_05_03.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.3 – 未启用受限管理员模式](image/B18964_05_03.jpg)'
- en: Figure 5.3 – Restricted Admin mode is not enabled
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – 未启用受限管理员模式
- en: 'Luckily, there is a tool called **RestrictedAdmin** available on GitHub[5].
    However, it is not OpSec safe, because it changes the registry key that is highly
    likely to be monitored by the blue team; different types of logon will be in the
    event logs as well. Running the following commands will enable this mode on the
    remote machine:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，GitHub 上有一个名为 **RestrictedAdmin** 的工具[5]。但是，它并不符合操作安全（OpSec）的标准，因为它会更改可能被蓝队监控的注册表项；不同类型的登录也会出现在事件日志中。运行以下命令将启用远程机器上的此模式：
- en: '![Figure 5.4 – Enabling Restricted Admin mode](image/B18964_05_04.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.4 – 启用受限管理员模式](image/B18964_05_04.jpg)'
- en: Figure 5.4 – Enabling Restricted Admin mode
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – 启用受限管理员模式
- en: 'Now, we will be able to log in using pass-the-hash to RDP:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用 pass-the-hash 方式登录 RDP：
- en: '![Figure 5.5 – Successful login to the target machine over RDP](image/B18964_05_05.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.5 – 成功通过 RDP 登录到目标机器](image/B18964_05_05.jpg)'
- en: Figure 5.5 – Successful login to the target machine over RDP
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5 – 成功通过 RDP 登录到目标机器
- en: 'Two more things worth sharing regarding RDP: firstly, thanks to the **SharpRDP**
    tool[6], we can use RDP for the purposes of non-graphical authenticated remote
    command execution against a target in our preferable command-and-control software.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 RDP 还有两件值得分享的事：首先，感谢 **SharpRDP** 工具[6]，我们可以在我们偏好的指挥控制软件中，通过 RDP 实现非图形化的经过认证的远程命令执行。
- en: Secondly, we can dump RDP credentials from the endpoint in different ways such
    as dumping from process memory, using **SharpRDPThief**[7], or from Windows Credentials
    Manager using Mimikatz.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们可以通过多种方式从端点转储 RDP 凭据，例如从进程内存中转储，使用 **SharpRDPThief**[7]，或使用 Mimikatz 从
    Windows 凭据管理器中获取。
- en: A possible mitigation recommendation is to protect Remote Desktop credentials
    with **Windows Defender Remote Credential Guard**. It allows only Kerberos for
    authentication and prevents pass-the-hash and credential reuse after disconnecting.
    **Multi-factor authentication** (**MFA**) is another good option to keep in mind.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可能的缓解建议是使用 **Windows Defender 远程凭据保护** 来保护远程桌面凭据。它仅允许使用 Kerberos 进行认证，并防止在断开连接后发生
    pass-the-hash 和凭据重用。**多因素认证**（**MFA**）是另一个值得考虑的好选项。
- en: Next, we will discuss ways to do lateral movement using Impacket. These protocols
    can be abused from Windows tooling as well, but introducing Impacket is important
    for the sake of knowledge and further chapters.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论如何使用 Impacket 进行横向移动。虽然这些协议也可以通过 Windows 工具滥用，但引入 Impacket 对于知识的扩展和后续章节的内容是很重要的。
- en: Other protocols with Impacket
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Impacket 的其他协议
- en: '**Impacket**[8] is a collection of Python classes that were created for working
    with various network protocols. In the **example** folder, there are tons of useful
    Python scripts that allow you various methods for lateral movement, dealing with
    Kerberos, accessing Windows secrets, and performing relay attacks. This toolkit
    is a great alternative to tools such as Rubeus, which are not available on Linux.
    We have the following lateral movement options in Impacket to choose from:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**Impacket**[8] 是一组为处理各种网络协议而创建的 Python 类。在 **example** 文件夹中，有许多有用的 Python
    脚本，允许你进行多种横向移动方法，处理 Kerberos，访问 Windows 密码，执行转发攻击等。这个工具包是 Rubeus 等工具的一个很好的替代方案，因为后者在
    Linux 上不可用。我们可以在 Impacket 中选择以下横向移动选项：'
- en: '**PSExec** is loud and catches defenders’ attention quite quickly, as it uploads
    executables and creates a service'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PSExec** 是一个非常引人注意的工具，能够迅速吸引防御者的注意，因为它会上传可执行文件并创建服务。'
- en: '**SmbExec** creates a service on every request but does not upload anything'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SmbExec** 在每次请求时创建服务，但不会上传任何文件。'
- en: '**AtExec** creates scheduled tasks in **C:\Windows\System32\Tasks\** as **SYSTEM**
    with a random name and provides output in a file located at **C:\Windows\Temp\**'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AtExec** 会以 **SYSTEM** 权限在 **C:\Windows\System32\Tasks\** 创建一个带有随机名称的计划任务，并将输出保存在
    **C:\Windows\Temp\** 目录中的文件中。'
- en: '**DCOMExec** requires file creation'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DCOMExec** 需要创建文件。'
- en: '**WMIExec** requires file creation and deletion'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WMIExec** 需要创建和删除文件。'
- en: Most of these techniques can be caught with enhanced monitoring such as Sysmon
    and correlation of the Windows event logs.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这些技术中的大部分可以通过增强的监控手段被捕捉到，比如使用 Sysmon 以及关联 Windows 事件日志。
- en: Also, a good prevention strategy is to deploy **Attack Surface Reduction** (**ASR**)
    rules. ASR prevents typical malicious actions on the endpoints such as process
    creation from different applications, prevents execution of files depending on
    their origin and various conditions, vulnerable signed drivers loading, and more.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，一个好的防御策略是部署 **攻击面缩减** (**ASR**) 规则。ASR 防止端点上的典型恶意行为，例如从不同应用程序创建进程，防止执行基于来源和各种条件的文件，加载有漏洞的签名驱动程序等等。
- en: In the next section, we will cover NTLM response relay attacks and different
    types of hashes.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将讨论 NTLM 响应转发攻击以及不同类型的哈希。
- en: Relaying the hash
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈希转发
- en: In the previous chapter, we covered different possibilities to capture the NTLM
    response by forcing authentication or using MitM. Now we are getting to the answer
    of why we want to capture responses. Before we jump into practice, some theory
    concepts and caveats need to be explained first.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了通过强制身份验证或使用中间人攻击来捕获 NTLM 响应的不同方法。现在，我们要解答为什么要捕获响应。在实际操作之前，需要先解释一些理论概念和注意事项。
- en: First, there are two versions of the NTLM protocol (v1 and v2). Next, NTLM authentication
    messages can be relayed cross-protocol as they are protocol-independent. It is
    important to understand what protocol was used to capture NTLM authentication
    and what protocol we are planning to relay it over. The following mindmap was
    created by *nwodtuhs* and is a good reference for our discussion.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，NTLM 协议有两个版本（v1 和 v2）。接下来，NTLM 身份验证消息可以跨协议转发，因为它们与协议无关。理解捕获 NTLM 身份验证时使用了什么协议以及我们计划通过什么协议进行转发是非常重要的。以下的思维导图是
    *nwodtuhs* 创建的，是我们讨论的一个很好参考。
- en: '![Figure 5.6 – NTLM relay](image/B18964_05_06.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.6 – NTLM 转发](image/B18964_05_06.jpg)'
- en: Figure 5.6 – NTLM relay
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.6 – NTLM 转发
- en: Let us focus more on an important topic, which is signing, especially for SMB
    and LDAP. Signing configuration and existence is controlled by settings on the
    client and server side. For SMB, it will depend on the protocol version and whether
    the server is a domain controller. The key takeaway is that signing for SMB v2
    must be required by the server and/or client. LDAP behaves differently and packets
    will be signed if both sides are able to do so, but is not specifically required.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更多地关注一个重要的话题，那就是签名，特别是针对 SMB 和 LDAP。签名配置及其存在由客户端和服务器端的设置控制。对于 SMB，这将取决于协议版本以及服务器是否为域控制器。关键点是，SMB
    v2 的签名必须由服务器和/或客户端要求。LDAP 行为有所不同，如果双方都能做到，数据包将会被签名，但并非强制要求。
- en: Note
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Notable examples of LDAP and SMB signing configuration and negotiation can
    be found here: [https://en.hackndo.com/ntlm-relay/](https://en.hackndo.com/ntlm-relay/).'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: LDAP 和 SMB 签名配置与协商的显著例子可以在这里找到：[https://en.hackndo.com/ntlm-relay/](https://en.hackndo.com/ntlm-relay/)。
- en: But session signing is negotiated during the NTLM authentication, maybe we can
    try to unset it? Here, we will learn more about **Message Integrity Code** (**MIC**),
    which is available only in NTLM v2\. The **MIC** is a signature resulting from
    the **HMAC_MD5** function calculated over a few parameters. The most important
    parameters are the session key, which depends on the client’s secret, and the
    value, which states whether the signing is negotiated. If we do not know the client’s
    secret, the **MIC** can’t be changed. However, two vulnerabilities were found
    by researchers from a company called *Preempt* and were conveniently named **Drop
    the MIC** (**CVE-2019-1040**) and **Drop the MIC 2** (**CVE-2019-1166**), allowing
    to simply remove the **MIC**.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 但是会话签名是在 NTLM 身份验证期间协商的，也许我们可以尝试取消它？在这里，我们将进一步了解**消息完整性码**（**MIC**），它仅在 NTLM
    v2 中可用。**MIC**是一个签名，来自通过**HMAC_MD5**函数计算的几个参数。最重要的参数是会话密钥，它依赖于客户端的密钥，以及一个值，表示是否协商了签名。如果我们不知道客户端的密钥，则无法更改**MIC**。然而，来自一家名为*Preempt*的公司的研究人员发现了两个漏洞，分别被方便地命名为**Drop
    the MIC**（**CVE-2019-1040**）和**Drop the MIC 2**（**CVE-2019-1166**），允许简单地移除**MIC**。
- en: Another vulnerability, **CVE-2019-1019**, which was a successor of **CVE-2015-005**,
    allows the retrieval of the session key for any authentication attempt by missing
    the computer name while establishing the **NETLOGON** channel. A detailed attack
    walk-through can be found here[9].
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个漏洞，**CVE-2019-1019**，是**CVE-2015-005**的继任者，允许通过在建立**NETLOGON**通道时缺少计算机名来获取任何认证尝试的会话密钥。详细的攻击演示可以在这里找到[9]。
- en: The last thing we are going to cover is **Extended Protection for Authentication**
    (**EPA**). It was introduced against cross-protocol relay allowing it to bind
    the authentication layer with the protocol. If the TLS channel is required to
    be bound (LDAPS or HTTPS), the server certificate hash (called **Channel Binding
    Token**) will be used as a part of the NTLM response, meaning that spoofing is
    not possible without knowing the client’s secret. For non-TLS protocols such as
    CIFS or HTTP, the field is called **Service Binding Information**. The idea is
    very similar to TLS binding, but instead of using the certificate’s hash target,
    the **Service Principal Name** (**SPN**) will be checked in the NTLM response.
    In both cases, a mismatch will lead to an “Access Denied” error.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最后我们要讨论的是**身份验证扩展保护**（**EPA**）。它是针对跨协议中继攻击引入的，目的是将身份验证层与协议绑定。如果要求绑定 TLS 通道（LDAPS
    或 HTTPS），则服务器证书哈希（称为**通道绑定令牌**）将作为 NTLM 响应的一部分使用，这意味着没有知道客户端密钥的情况下无法伪造。对于非 TLS
    协议，如 CIFS 或 HTTP，该字段称为**服务绑定信息**。这个想法与 TLS 绑定非常相似，但不是使用证书的哈希目标，而是会检查 NTLM 响应中的**服务主体名称**（**SPN**）。在两种情况下，如果不匹配，将导致“访问被拒绝”错误。
- en: That was a hefty amount of theory! Let’s move on to some practice and see the
    benefits.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一大堆理论！让我们转到一些实践操作，看看它的好处。
- en: Note
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: 'If something is not going as expected, the following lab creator has your back
    covered: [https://mayfly277.github.io/posts/GOADv2-pwning-part4/](https://mayfly277.github.io/posts/GOADv2-pwning-part4/).'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果某些事情没有按预期进行，下面的实验室创建者会帮你解决：[https://mayfly277.github.io/posts/GOADv2-pwning-part4/](https://mayfly277.github.io/posts/GOADv2-pwning-part4/)。
- en: 'Let us first enumerate machines that do not require SMB signing. We can do
    it using **CrackMapExec**:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们列出不需要 SMB 签名的机器。我们可以使用**CrackMapExec**来完成：
- en: '[PRE3]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following is a list of the machines:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是机器列表：
- en: '![Figure 5.7 – Machines with SMB signing disabled](image/B18964_05_07.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.7 – 禁用 SMB 签名的机器](image/B18964_05_07.jpg)'
- en: Figure 5.7 – Machines with SMB signing disabled
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.7 – 禁用 SMB 签名的机器
- en: 'In the previous chapter, we captured the NTLM response of **eddard.stark**
    because of the scheduled task running with a typo in the DNS name. Now, let us
    use it for relay. We disable SMB and HTTP servers in Responder by editing **/etc/responder/Responder.conf**
    and running **ntlmrelayx** to dump the SAM database on castelblack as the **eddard.stark**
    user has administrator rights on it:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们捕获了**eddard.stark**的 NTLM 响应，因为计划任务在 DNS 名称中有一个拼写错误。现在，让我们利用这个进行中继攻击。我们通过编辑**/etc/responder/Responder.conf**并运行**ntlmrelayx**来禁用
    Responder 中的 SMB 和 HTTP 服务器，从而以**eddard.stark**用户的身份在 castelblack 上转储 SAM 数据库，因为该用户在
    castelblack 上具有管理员权限：
- en: '[PRE4]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following screenshot shows the result of dumping the **Security Accounts
    Manager** (**SAM**) database:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了转储**安全帐户管理器**（**SAM**）数据库的结果：
- en: '![Figure 5.8 – Relay NTLM v2 response and dumping the SAM database](image/B18964_05_08.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.8 – 中继 NTLM v2 响应并转储 SAM 数据库](image/B18964_05_08.jpg)'
- en: Figure 5.8 – Relay NTLM v2 response and dumping the SAM database
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.8 – 中继 NTLM v2 响应并转储 SAM 数据库
- en: It is important to mention that since **MS08-68**, it is not possible to relay
    the hash toward itself. There is also an option in **ntlmrelayx (--socks)** to
    use an SMB connection as a **SOCKS** proxy, avoiding noisy login and not requiring
    administrative rights on the box. Then, we can use proxy chains to run the tools
    we want.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 需要提到的是，自 **MS08-68** 以来，无法将哈希值中继到自身。**ntlmrelayx** 还有一个选项 (--socks)，可以使用 SMB
    连接作为 **SOCKS** 代理，避免嘈杂的登录并且不需要在主机上获得管理员权限。然后，我们可以使用代理链来运行我们想要的工具。
- en: 'As a next step, we will use a relay for LDAP enumeration. We can’t relay the
    hash that was obtained over SMB as the domain controller requires signing, so
    we can use the WebDAV service if installed (as shown here by *Jean_Maes_1994*:
    [https://www.trustedsec.com/blog/a-comprehensive-guide-on-relaying-anno-2022/](https://www.trustedsec.com/blog/a-comprehensive-guide-on-relaying-anno-2022/))
    or try **mitm6**. An excellent walk-through of how to use the **mitm6** toolkit
    was demonstrated by the lab creator, so we will show the WebDAV scenario and apply
    necessary changes in the lab to **castelblack**.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步，我们将使用中继进行 LDAP 枚举。由于域控制器要求签名，因此我们无法中继通过 SMB 获取的哈希值，因此如果已安装 WebDAV 服务（如 *Jean_Maes_1994*
    在这里所示：[https://www.trustedsec.com/blog/a-comprehensive-guide-on-relaying-anno-2022/](https://www.trustedsec.com/blog/a-comprehensive-guide-on-relaying-anno-2022/)）或者尝试
    **mitm6**，我们可以使用 WebDAV 服务。实验室创建者演示了如何使用 **mitm6** 工具包，因此我们将展示 WebDAV 场景，并在实验室中对
    **castelblack** 进行必要的更改。
- en: Note
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: 'Before we start, you can read more information here: [https://www.thehacker.recipes/ad/movement/mitm-and-coerced-authentications/webclient](https://www.thehacker.recipes/ad/movement/mitm-and-coerced-authentications/webclient).'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，您可以在这里阅读更多信息：[https://www.thehacker.recipes/ad/movement/mitm-and-coerced-authentications/webclient](https://www.thehacker.recipes/ad/movement/mitm-and-coerced-authentications/webclient)。
- en: 'As a first preparation step on castelblack, we need to install a feature called
    **WebDAV Redirector** using PowerShell as **Administrator**:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 作为在 castelblack 上的第一个准备步骤，我们需要通过 PowerShell 以 **管理员** 身份安装一个名为 **WebDAV Redirector**
    的功能：
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the following screenshot, we can see that the feature was successfully installed
    and the service was stopped:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，我们可以看到该功能已成功安装，且服务已停止：
- en: '![Figure 5.9 – WebClient service was successfully installed](image/B18964_05_09.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.9 – WebClient 服务已成功安装](image/B18964_05_09.jpg)'
- en: Figure 5.9 – WebClient service was successfully installed
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.9 – WebClient 服务已成功安装
- en: 'Let us now force the WebClient service to start by placing the **.searchConnector-ms**
    file on the public share, as described by *MDSec* researchers, with content such
    as the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过将 **.searchConnector-ms** 文件放置在公共共享上，强制启动 WebClient 服务，正如 *MDSec* 研究人员所描述的那样，内容如下：
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can then verify that the service has successfully started. If we do not
    know any server in the network with a running WebClient service, we can scan the
    IP range using the **CrackMapExec** module, **WebDAV**:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以验证服务是否成功启动。如果我们不知道网络中有任何运行 WebClient 服务的服务器，我们可以使用 **CrackMapExec** 模块
    **WebDAV** 扫描 IP 范围：
- en: '[PRE7]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The results of our recon activity are presented in the following screenshot:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的侦查活动结果显示在以下截图中：
- en: '![Figure 5.10 – WebClient service recon](image/B18964_05_10.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.10 – WebClient 服务侦查](image/B18964_05_10.jpg)'
- en: Figure 5.10 – WebClient service recon
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.10 – WebClient 服务侦查
- en: 'The next step is to use the coercion method to trigger authentication over
    HTTP to our Kali machine and then relay it to LDAP. We will need Responder with
    a disabled HTTP server and **ntlmrelayx**:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是使用强制方法触发通过 HTTP 向我们的 Kali 机器进行认证，然后将其中继到 LDAP。我们将需要一个禁用 HTTP 服务器的 Responder
    和 **ntlmrelayx**：
- en: '[PRE8]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For our exercise, I chose PrinterBug as a coercion method and its implementation
    on Linux via a tool called **dementor**[10]. The following screenshot shows the
    result of dumping domain information:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本次练习中，我选择了 PrinterBug 作为强制方法，并通过名为 **dementor**[10] 的工具在 Linux 上实现。以下截图显示了转储域信息的结果：
- en: '![Figure 5.11 – Domain enumeration LDAP](image/B18964_05_11.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.11 – 域枚举 LDAP](image/B18964_05_11.jpg)'
- en: Figure 5.11 – Domain enumeration LDAP
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.11 – 域枚举 LDAP
- en: 'As the last example, I would like to show **CVE-2019-1040** in action. *Mayfly*
    introduced a vulnerable server in the lab. To find vulnerable boxes, we can use
    a scanner created by *_dirkjan*[11]. The following command will check whether
    the target is vulnerable:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后一个示例，我想展示 **CVE-2019-1040** 的实际操作。*Mayfly* 在实验室中引入了一个易受攻击的服务器。为了找到易受攻击的主机，我们可以使用由
    *_dirkjan*[11] 创建的扫描器。以下命令将检查目标是否存在漏洞：
- en: '[PRE9]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If we try to relay SMB to LDAP in the patched system, it will lead to the following
    error in **ntlmrelayx**:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试在已修补的系统中将 SMB 转发到 LDAP，将导致 **ntlmrelayx** 出现以下错误：
- en: '![Figure 5.12 – SMB to LDAP relay failed](image/B18964_05_12.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.12 – SMB 到 LDAP 转发失败](image/B18964_05_12.jpg)'
- en: Figure 5.12 – SMB to LDAP relay failed
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.12 – SMB 到 LDAP 转发失败
- en: 'But if there is a *Drop the MIC* vulnerability, we can add the **-–remove-mic**
    flag and, as a result, successfully relay, as shown in the following screenshot:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果存在*Drop the MIC*漏洞，我们可以添加**–remove-mic**标志，从而成功转发，如下图所示：
- en: '![Figure 5.13 – Drop the MIC allowed to relay](image/B18964_05_13.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.13 – Drop the MIC 允许转发](image/B18964_05_13.jpg)'
- en: Figure 5.13 – Drop the MIC allowed to relay
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.13 – Drop the MIC 允许转发
- en: Note
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To get more information on how to prevent certain types of relays, we can use
    the Nettitude blog post ([https://labs.nettitude.com/blog/network-relaying-abuse-windows-domain/](https://labs.nettitude.com/blog/network-relaying-abuse-windows-domain/))
    as a good starting point.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取更多有关如何防止某些类型转发的信息，我们可以参考 Nettitude 博客文章（[https://labs.nettitude.com/blog/network-relaying-abuse-windows-domain/](https://labs.nettitude.com/blog/network-relaying-abuse-windows-domain/)）作为良好的起点。
- en: Killing relay attack vectors will require a significant number of services to
    be reviewed and tested, so signing can be enforced for SMB, LDAP, and EPA for
    LDAPS and HTTPS. Fine-tune IPv6, and disable broadcast protocols and unused services
    as a domain-hardening exercise. Try to use only Kerberos for authentication in
    the domain, but if it is not possible, then only use NTLM v2\. NTLM v1 should
    be disabled entirely!
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 阻止转发攻击向量需要检查和测试大量服务，因此可以对 SMB、LDAP、LDAPS 和 HTTPS 强制实施签名。精细调整 IPv6，并禁用广播协议和未使用的服务作为域加固练习。尽量只在域内使用
    Kerberos 进行认证，但如果无法实现，则只使用 NTLM v2。必须完全禁用 NTLM v1！
- en: In the next section, we will discuss the ways to perform lateral movement after
    the attacker is able to compromise the machine and dump credentials in the form
    of an NT hash, AES key, or a ticket.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论攻击者能够攻陷机器并提取凭证（如 NT 哈希、AES 密钥或票证）后，如何执行横向移动。
- en: Pass-the-whatever
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通行证—任意传递
- en: This section is about impersonation. Let's say an attacker compromised a machine
    and dumped hashed credentials from the LSASS process using one of many available
    ways. Usually, the next step is to perform lateral movement by starting a new
    logon session and trying to access other company resources. We will discuss the
    most common ways to perform such an activity together with OpSec considerations.
    **Pass the certificate** will be covered in [*Chapter 8*](B18964_08.xhtml#_idTextAnchor163)
    related to *Active Directory* *Certificate Services*.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 本节内容是关于冒充（身份伪装）的。假设攻击者入侵了一台机器，并通过多种可用方式之一，从 LSASS 进程中获取了哈希凭证。通常，下一步是通过启动新的登录会话并尝试访问其他公司资源来执行横向移动。我们将讨论执行此类活动的最常见方法，以及与操作安全相关的注意事项。**通行证传递证书**将在与*Active
    Directory* *证书服务*相关的[*第 8 章*](B18964_08.xhtml#_idTextAnchor163)中进行讲解。
- en: Pass-the-hash
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通行证—任意传递
- en: We are going to start with good old pass-the-hash. This method of authentication
    itself is quite straightforward. It relies only on the NTLM protocol, not touching
    Kerberos at all. This technique can be used for local and domain accounts. To
    perform a pass-the-hash attack, the attacker needs to have administrative privileges
    on the box.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从经典的通行证—任意传递开始。该认证方法本身相当简单，完全依赖于 NTLM 协议，完全不涉及 Kerberos。此技术可用于本地和域账户。要执行通行证—任意传递攻击，攻击者需要在目标机器上拥有管理员权限。
- en: Note
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There is a detailed and well-written description of what is happening under
    the hood by **hackndo** in his blog post at [https://en.hackndo.com/pass-the-hash/](https://en.hackndo.com/pass-the-hash/).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**hackndo**在其博客文章中详细描述了发生的过程，可以参考：[https://en.hackndo.com/pass-the-hash/](https://en.hackndo.com/pass-the-hash/)'
- en: 'The technique can be executed with the help of Mimikatz in an elevated context.
    In our example, an attacker was able to compromise a local administrative **vagrant**
    user and dump an NT hash for the user with domain administrator privileges. In
    our case, it is **robert.baratheon** in the **sevenkingdoms** domain. We can perform
    pass-the-hash by running the following command:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 该技术可以借助 Mimikatz 在提升的权限上下文中执行。在我们的示例中，攻击者能够攻陷一个本地管理员**vagrant**用户，并为该用户提取具有域管理员权限的
    NT 哈希。在我们的案例中，是**robert.baratheon**，属于**sevenkingdoms**域。我们可以通过运行以下命令来执行通行证—任意传递：
- en: '[PRE10]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The execution is shown in the following screenshot:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 执行情况如下截图所示：
- en: '![Figure 5.14 – Pass-the-hash with Mimikatz](image/B18964_05_14.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.14 – 使用 Mimikatz 的 Pass-the-Hash 攻击](image/B18964_05_14.jpg)'
- en: Figure 5.14 – Pass-the-hash with Mimikatz
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.14 – 使用 Mimikatz 的 Pass-the-Hash 攻击
- en: As a result, we will have a new PowerShell window opened. Do not be confused
    that we are shown as a **vagrant** user in the new PowerShell session. In reality,
    we have impersonated **robert.baratheon**. The following screenshot proves it
    in the PSRemoting session.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是，我们将打开一个新的 PowerShell 窗口。不要误解，我们在新的 PowerShell 会话中显示为 **vagrant** 用户。实际上，我们已经冒充了
    **robert.baratheon** 用户。以下截图证明了这一点，在 PSRemoting 会话中可以看到这一点。
- en: '![Figure 5.15 – Pass-the-hash used to access the domain controller](image/B18964_05_15.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.15 – 用于访问域控制器的 Pass-the-Hash 攻击](image/B18964_05_15.jpg)'
- en: Figure 5.15 – Pass-the-hash used to access the domain controller
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.15 – 用于访问域控制器的 Pass-the-Hash 攻击
- en: Also, there is a caveat called **User Account Control** (**UAC**), which can
    limit remote administration operations on newly compromised machines after we
    successfully move laterally. It will depend on two registry values, **LocalAccountTokenFilterPolicy**
    and **FilterAdministratorToken**, located in **HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System**.
    By default, only a built-in administrator with a **Relative Identifier** (**RID**)
    of **500** and domain accounts with local admin rights can perform remote administration
    tasks without UAC being activated.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一个名为 **用户帐户控制**（**UAC**）的警告，它可以限制我们成功横向移动后，对新受损机器的远程管理操作。它将依赖于两个注册表值，**LocalAccountTokenFilterPolicy**
    和 **FilterAdministratorToken**，它们位于 **HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System**。默认情况下，只有内置管理员（其
    **相对标识符**（**RID**）为 **500**）和具有本地管理员权限的域帐户才能在未激活 UAC 的情况下执行远程管理任务。
- en: 'Now, we can discuss the detection of this technique. The best way to detect
    pass-the-hash is to review the **4624** and **4672** events on the source host.
    Event **4624** has a logon type of **9** and a logon process of **seclogo**, as
    shown in the following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以讨论如何检测此技术。检测 Pass-the-Hash 最好的方法是查看源主机上的 **4624** 和 **4672** 事件。事件 **4624**
    的登录类型为 **9**，登录过程为 **seclogo**，如以下截图所示：
- en: '![Figure 5.16 – Event 4624 on the host where the pass-the-hash attack was executed](image/B18964_05_16.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.16 – 执行 Pass-the-Hash 攻击的主机上的事件 4624](image/B18964_05_16.jpg)'
- en: Figure 5.16 – Event 4624 on the host where the pass-the-hash attack was executed
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.16 – 执行 Pass-the-Hash 攻击的主机上的事件 4624
- en: 'Event ID **4672** identifies privileged logon for the current logged-in account,
    not the new account, as shown in the following screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 事件 ID **4672** 标识当前登录帐户的特权登录，而不是新帐户，如下截图所示：
- en: '![Figure 5.17 – Event 4672 on the host where the pass-the-hash attack was executed](image/B18964_05_17.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.17 – 执行 Pass-the-Hash 攻击的主机上的事件 4672](image/B18964_05_17.jpg)'
- en: Figure 5.17 – Event 4672 on the host where the pass-the-hash attack was executed
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.17 – 执行 Pass-the-Hash 攻击的主机上的事件 4672
- en: The domain controller would not have corresponding event IDs **4768** and **4769**.
    Also, we should not forget that by using Sysmon, we can reliably detect access
    to the LSASS process, which happens when Mimikatz is used for pass-the-hash. By
    combining both events, we can reliably detect pass-the-hash.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 域控制器将不会有对应的事件 ID **4768** 和 **4769**。此外，我们不应忘记，通过使用 Sysmon，我们可以可靠地检测对 LSASS
    进程的访问，这通常是在使用 Mimikatz 执行 Pass-the-Hash 攻击时发生的。通过结合这两个事件，我们可以可靠地检测到 Pass-the-Hash
    攻击。
- en: Note
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Defender for Identity by Microsoft stated that it can detect pass-the-hash attacks
    by analyzing whether the NT hash used was from computers that the user uses regularly
    ([https://learn.microsoft.com/en-us/defender-for-identity/lateral-movement-alerts](https://learn.microsoft.com/en-us/defender-for-identity/lateral-movement-alerts)).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 微软的 Defender for Identity 表示，它可以通过分析用户常用的计算机中是否使用了 NT 哈希值来检测 Pass-the-Hash 攻击
    ([https://learn.microsoft.com/en-us/defender-for-identity/lateral-movement-alerts](https://learn.microsoft.com/en-us/defender-for-identity/lateral-movement-alerts))。
- en: Pass-the-key and overpass-the-hash
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pass-the-key 和 Overpass-the-hash
- en: 'Pass-the-key and overpass-the-hash are attacks aimed at Kerberos authentication.
    The plan is to obtain a valid Kerberos TGT by supplying the user’s secret key
    (**DES**, **RC4**, **AES128**, or **AES256**) derived from the user’s password.
    If RC4 is enabled, meaning that the user’s NT hash is a key, this is **overpass-the-hash**.
    If RC4 is disabled, other Kerberos keys can be passed, and it is called **pass-the-key**.
    Now, by default, Windows is using **AES256** keys, which have an encryption type
    value of **0x12**. Requesting downgraded RC4 encryption will have an encryption
    type value of **0x17**. This value can be found in event **4768** on the domain
    controller. Using Rubeus as an attacker, a normal user can request Kerberos TGT
    by running the following command:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Pass-the-key 和 overpass-the-hash 是针对 Kerberos 认证的攻击。其计划是通过提供用户密码派生出的用户秘密密钥（**DES**、**RC4**、**AES128**
    或 **AES256**）来获取有效的 Kerberos TGT。如果启用 RC4，意味着用户的 NT 哈希是一个密钥，这就是 **overpass-the-hash**。如果禁用
    RC4，可以传递其他 Kerberos 密钥，这称为 **pass-the-key**。现在，默认情况下，Windows 使用 **AES256** 密钥，其加密类型值为
    **0x12**。请求降级的 RC4 加密类型将具有加密类型值 **0x17**。此值可以在域控制器的事件 **4768** 中找到。作为攻击者，使用 Rubeus，普通用户可以通过运行以下命令请求
    Kerberos TGT：
- en: '[PRE11]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As a result, a ticket will be injected into memory and access to the **c$**
    domain controller will be granted, as shown in the following screenshot:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，一个票证将被注入到内存中，并且将获得对 **c$** 域控制器的访问权限，如下图所示：
- en: '![Figure 5.18 – Injected ticket because of overpass-the-hash](image/B18964_05_18.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.18 – 因为 overpass-the-hash 注入的票证](image/B18964_05_18.jpg)'
- en: Figure 5.18 – Injected ticket because of overpass-the-hash
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.18 – 因为 overpass-the-hash 注入的票证
- en: 'The following is event **4768** with RC4 downgrade requested:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是请求 RC4 降级的事件 **4768**：
- en: '![Figure 5.19 – Downgraded encryption type in event 4768](image/B18964_05_19.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.19 – 事件 4768 中的降级加密类型](image/B18964_05_19.jpg)'
- en: Figure 5.19 – Downgraded encryption type in event 4768
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.19 – 事件 4768 中的降级加密类型
- en: 'Both techniques can be detected on the endpoint via the LSASS access rule if
    Mimikatz is used and there will be a mismatch between the logged-on user and its
    Kerberos tickets. Encryption type downgrades stand out in modern Windows environments
    and will be investigated. Rubeus has the **/opsec** flag, which will send an initial
    AS-REQ without pre-authentication mimicking genuine requests. This option is intended
    to make traffic stealthier, which is why only the **AES256** encryption type is
    allowed to be used. Such a key can be dumped by using Mimikatz:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用 Mimikatz，LSASS 访问规则可以检测到这两种技术，并且会出现登录用户与其 Kerberos 票证之间的不匹配。在现代 Windows
    环境中，降级的加密类型会变得非常明显，并且会被调查。Rubeus 具有 **/opsec** 标志，它会发送一个初始的 AS-REQ 请求，而无需预身份验证，从而模拟真实的请求。这个选项旨在使流量更加隐蔽，这也是为什么只允许使用
    **AES256** 加密类型的原因。通过使用 Mimikatz 可以提取此密钥：
- en: '[PRE12]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let’s create another ticket and compare the generated event with the previous
    one:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再创建一个票证，并将生成的事件与之前的事件进行比较：
- en: '[PRE13]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The Windows event is shown in the following screenshot:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Windows 事件的截图：
- en: '![Figure 5.20 – Rubeus with the /opsec option in event 4768](image/B18964_05_20.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.20 – Rubeus 在事件 4768 中使用 /opsec 选项](image/B18964_05_20.jpg)'
- en: Figure 5.20 – Rubeus with the /opsec option in event 4768
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.20 – Rubeus 在事件 4768 中使用 /opsec 选项
- en: 'We can see that **Ticket Options** (thank you, **/opsec** option) and **Ticket
    Encryption Type** changed. Another thing to consider if we want to fully mimic
    real Kerberos authentication is **Supplied Realm Name**, which will be **SEVENKINGDOMS**
    for genuine requests ( the **/domain** option for the rescue here):'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，**票证选项**（感谢 **/opsec** 选项）和 **票证加密类型** 已经发生了变化。如果我们想完全模拟真实的 Kerberos
    认证，还需要考虑 **提供的领域名称**，对于真实的请求，这将是 **SEVENKINGDOMS**（此时 **/domain** 选项会派上用场）：
- en: '![Figure 5.21 – Supplied Realm Name for genuine TGT request](image/B18964_05_21.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.21 – 真实 TGT 请求的提供领域名称](image/B18964_05_21.jpg)'
- en: Figure 5.21 – Supplied Realm Name for genuine TGT request
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.21 – 真实 TGT 请求的提供领域名称
- en: The most challenging problem is that Rubeus will generate Kerberos traffic,
    meaning it can be detected by all sorts of defensive tools. This is something
    that needs to be considered.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 最具挑战性的问题是，Rubeus 会生成 Kerberos 流量，这意味着它可能会被各种防御工具检测到。这是需要考虑的事项。
- en: Pass-the-ticket
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pass-the-ticket
- en: Finally, we can encounter situations when we obtain a ticket to inject, or we
    are able to forge one. We will discuss four types of forged tickets with examples
    of how to forge, use, and detect them in [*Chapter 7*](B18964_07.xhtml#_idTextAnchor146).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可能会遇到获取票证注入或能够伪造票证的情况。我们将在[*第 7 章*](B18964_07.xhtml#_idTextAnchor146)中讨论四种伪造票证的类型，并展示如何伪造、使用和检测这些票证。
- en: 'Also, tickets can be dumped from memory or found on the filesystem in Linux
    (**.ccache**) or Windows (**.kirbi**) formats. In Windows, tickets after injection
    (the **/ptt** option in Rubeus) can be used natively, as we have seen in the previous
    example. Let’s use the same ticket but on our Kali machine. First, we need to
    convert it from the **kirbi** to **ccache** format using **ticketConverter** from
    Impacket, then export the ticket. The commands are shown in the following screenshot:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，票证可以从内存中提取，或者以 Linux（**.ccache**）或 Windows（**.kirbi**）格式存储在文件系统中。在 Windows
    中，注入后的票证（Rubeus 中的 **/ptt** 选项）可以原生使用，正如我们在前面的示例中看到的那样。现在我们来使用相同的票证，但在 Kali 机器上。首先，我们需要使用
    Impacket 中的 **ticketConverter** 将其从 **kirbi** 格式转换为 **ccache** 格式，然后导出票证。相关命令显示在以下截图中：
- en: '![Figure 5.22 – Ticket conversion from Rubeus](image/B18964_05_22.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.22 – 来自 Rubeus 的票证转换](image/B18964_05_22.jpg)'
- en: Figure 5.22 – Ticket conversion from Rubeus
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.22 – 来自 Rubeus 的票证转换
- en: 'Then, we can use the ticket for remote access using the following command (you
    just need to add entries to **/etc/hosts** on your Kali machine):'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用以下命令通过传票进行远程访问（只需在 Kali 机器上添加 **/etc/hosts** 记录即可）：
- en: '[PRE14]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The code execution is shown in the following screenshot:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 代码执行显示在以下截图中：
- en: '![Figure 5.23 – Pass-the-ticket for command execution](image/B18964_05_23.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.23 – 用于命令执行的传票攻击](image/B18964_05_23.jpg)'
- en: Figure 5.23 – Pass-the-ticket for command execution
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.23 – 用于命令执行的传票攻击
- en: Note
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The detection guide for this attack can be found here: [https://www.netwrix.com/pass_the_ticket.xhtml](https://www.netwrix.com/pass_the_ticket.xhtml).
    In general, the strategy is the same as for the pass-the-key attack. There is
    a proof-of-concept code published to check the mismatch between logged-on users
    and issued Kerberos tickets[12].'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 此攻击的检测指南可以在这里找到：[https://www.netwrix.com/pass_the_ticket.xhtml](https://www.netwrix.com/pass_the_ticket.xhtml)。通常，这一策略与
    pass-the-key 攻击相同。已发布一个概念验证代码，用于检查登录用户与颁发的 Kerberos 票证之间的不匹配[12]。
- en: In the next section, we will be covering three types of Kerberos delegation
    and how they can be abused for lateral movement. This type of attack can also
    be considered a **privilege** **escalation attack**.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将讨论三种类型的 Kerberos 委派，以及如何将它们滥用进行横向移动。这种攻击类型也可以被视为**权限提升攻击**。
- en: Kerberos delegation
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kerberos 委派
- en: First of all, we need to discuss what delegation is and why it exists. Services
    within Active Directory sometimes need to be accessed by other services on behalf
    of the domain user. Think of a web server authenticating to the database on the
    backend on behalf of the user. There are three types of delegation available in
    **Active Directory** (**AD**) – **unconstrained**, **constrained**, and **resource-based**.
    Information about delegation can be found by using BloodHound, PowerView, or the
    AD module. We will cover the types of delegation in the following respective sections.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要讨论什么是委派以及为什么它存在。Active Directory 中的服务有时需要代表域用户被其他服务访问。可以想象一个 Web 服务器代表用户在后台进行数据库认证。**Active
    Directory**（**AD**）中有三种委派类型——**不受限委派**、**受限委派**和**基于资源的委派**。关于委派的信息可以通过使用 BloodHound、PowerView
    或 AD 模块找到。我们将在接下来的章节中介绍各种委派类型。
- en: Note
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'For our lab, *Mayfly* prepared, as usual, a great walk-through to follow: [https://mayfly277.github.io/posts/GOADv2-pwning-part10/](https://mayfly277.github.io/posts/GOADv2-pwning-part10/).'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的实验，*Mayfly* 一如既往地准备了一个很棒的操作指南：[https://mayfly277.github.io/posts/GOADv2-pwning-part10/](https://mayfly277.github.io/posts/GOADv2-pwning-part10/)。
- en: Unconstrained delegation
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不受限委派
- en: We will start our journey with the oldest type of delegation. With unconstrained
    delegation enabled on the computer or user, it is possible to impersonate an authenticating
    user or computer to any service on any host. If we compromise the user or machine
    with unconstrained delegation, we can then wait or force authentication to it,
    extract from ST cached in memory copy of the target user/computer TGT, and then
    reuse it for access across the domain or even forest. By default, domain controllers
    have unconstrained delegation enabled.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从最古老的委派类型开始。启用不受限委派的计算机或用户可以将任何身份验证用户或计算机伪装为任何主机上的任何服务。如果我们攻陷了启用了不受限委派的用户或机器，那么我们可以等待或强制对其进行身份验证，从内存中的
    ST 缓存中提取目标用户/计算机的 TGT，然后将其重复使用以跨域或甚至森林访问。默认情况下，域控制器启用不受限委派。
- en: Note
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: I will suggest having a look at [https://www.thehacker.recipes/ad/movement/kerberos/delegations/unconstrained](https://www.thehacker.recipes/ad/movement/kerberos/delegations/unconstrained)
    for reference on how unconstrained delegation can be abused from an attacker’s
    Linux machine.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议查看[https://www.thehacker.recipes/ad/movement/kerberos/delegations/unconstrained](https://www.thehacker.recipes/ad/movement/kerberos/delegations/unconstrained)，以了解如何从攻击者的
    Linux 机器上滥用不受限委派。
- en: 'We will enable unconstrained delegation on Castelrock, as shown in the following
    screenshot:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将启用 Castelrock 上的不受限委派，如下图所示：
- en: '![Figure 5.24 – Castelrock with unconstrained delegation enabled](image/B18964_05_24.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.24 – 启用不受限委派的 Castelrock](image/B18964_05_24.jpg)'
- en: Figure 5.24 – Castelrock with unconstrained delegation enabled
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.24 – 启用不受限委派的 Castelrock
- en: 'To find computers with unconstrained delegation, we can use PowerView:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找启用了不受限委派的计算机，我们可以使用 PowerView：
- en: '[PRE15]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output shows the domain controller (**kingslanding**) and the **castelrock**
    server with the **TRUSTED_FOR_DELEGATION** flag in the **useraccountcontrol**
    attribute:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示了域控制器（**kingslanding**）和**castelrock**服务器，其中**useraccountcontrol**属性中带有**TRUSTED_FOR_DELEGATION**标志：
- en: '![Figure 5.25 – Computer with unconstrained delegation enabled](image/B18964_05_25.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.25 – 启用不受限委派的计算机](image/B18964_05_25.jpg)'
- en: Figure 5.25 – Computer with unconstrained delegation enabled
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.25 – 启用不受限委派的计算机
- en: Note
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Also, we can use the LDAP filter (**userAccountControl:1.2.****     840.113556.1.4.803:=524288**) together with the AD PowerShell module.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '此外，我们可以使用 LDAP 过滤器 (**userAccountControl:1.2.****     840.113556.1.4.803:=524288**) 与 AD PowerShell 模块一起使用。'
- en: 'As a next step, we assume that we were able to compromise the **castelrock**
    server, so we can abuse unconstrained delegation. From an elevated context, we
    will launch Rubeus in monitoring mode:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步，我们假设我们已经成功攻陷了**castelrock**服务器，因此可以滥用不受限委派。在提升的权限下，我们将启动 Rubeus 监控模式：
- en: '[PRE16]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'From the standard user context, we force authentication from the domain controller
    by using PrinterBug:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 从标准用户上下文，我们通过使用 PrinterBug 强制从域控制器进行身份验证：
- en: '![Figure 5.26 – Forcing the domain controller to authenticate](image/B18964_05_26.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.26 – 强制域控制器进行身份验证](image/B18964_05_26.jpg)'
- en: Figure 5.26 – Forcing the domain controller to authenticate
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.26 – 强制域控制器进行身份验证
- en: 'As a result, we captured the domain controller’s TGT:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，我们捕获了域控制器的 TGT：
- en: '![Figure 5.27 – TGT of domain controller](image/B18964_05_27.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.27 – 域控制器的 TGT](image/B18964_05_27.jpg)'
- en: Figure 5.27 – TGT of domain controller
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.27 – 域控制器的 TGT
- en: 'Now, we inject this ticket in memory with Rubeus and use Mimikatz to dump the
    domain admin NT hash:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用 Rubeus 在内存中注入此票证，并使用 Mimikatz 转储域管理员的 NT 哈希：
- en: '[PRE17]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The result of the previous command can be seen in the following screenshot:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令的结果可以在以下截图中看到：
- en: '![Figure 5.28 – Domain admin user’s NT hash](image/B18964_05_28.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.28 – 域管理员用户的 NT 哈希](image/B18964_05_28.jpg)'
- en: Figure 5.28 – Domain admin user’s NT hash
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.28 – 域管理员用户的 NT 哈希
- en: Note
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'A great example of how unconstrained delegation can be abused using **krbrelayx**
    is shown in this blog post: [https://pentestlab.blog/2022/03/21/unconstrained-delegation/](https://pentestlab.blog/2022/03/21/unconstrained-delegation/).'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 一个关于如何使用**krbrelayx**滥用不受限委派的很好的示例可以在这篇博客文章中看到：[https://pentestlab.blog/2022/03/21/unconstrained-delegation/](https://pentestlab.blog/2022/03/21/unconstrained-delegation/)。
- en: To prevent abuse, check whether the unconstrained delegation is enabled only
    on domain controllers. If unconstrained delegation is absolutely required elsewhere,
    ensure that all privileged accounts have the **sensitive and cannot be delegated**
    flag or are members of the **Protected Users** group, as TGT will not be delegated
    in the service ticket for such accounts.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止滥用，请检查是否仅在域控制器上启用了不受限制的委派。如果其他地方确实需要不受限制的委派，请确保所有特权帐户具有**敏感且无法委派**标志，或者是**受保护用户**组的成员，因为这些帐户的TGT将在服务票证中无法委派。
- en: Resource-based constrained delegation
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于资源的受限委派
- en: In Windows 2012, a new delegation type was introduced, called **resource-based
    constrained delegation** (**RBCD**). The idea is that delegation is configured
    by the service administrator on the target, not on the source. This is written
    in the **msDS-AllowedToActOnBehalfOfOtherIdentity** attribute. The most common
    way to abuse RBCD is to create a computer account, edit the target delegation
    attribute, and obtain a ticket.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows 2012中，引入了一种新的委派类型，称为**基于资源的受限委派**（**RBCD**）。其思想是，委派由目标服务管理员在目标上配置，而不是在源上配置。这写入了**msDS-AllowedToActOnBehalfOfOtherIdentity**属性。滥用RBCD的最常见方法是创建计算机帐户，编辑目标委派属性，并获取票证。
- en: First of all, we will start with enumeration. We need to find out the **machine
    account quota** value (by default, every domain user can create 10 accounts),
    and check whether RBCD has been already implemented and whether there are **GenericAll**
    or **GenericWrite** **Access Control List** (**ACLs**) on any computer in the
    domain.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将从枚举开始。我们需要找出**机器帐户配额**值（默认情况下，每个域用户可以创建10个帐户），并检查RBCD是否已经实现，以及域中是否有任何计算机上存在**GenericAll**或**GenericWrite**
    **访问控制列表**（**ACLs**）。
- en: The machine quota can be found with the help of the **StandIn** tool[13] written
    by *FuzzySec:*
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 机器配额可以通过*FuzzySec*编写的**StandIn**工具[13]找到：
- en: '[PRE18]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can see that this domain uses the default value:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到该域使用的是默认值：
- en: '![Figure 5.29 – Default machine account quota value](image/B18964_05_29.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图5.29 – 默认机器帐户配额值](image/B18964_05_29.jpg)'
- en: Figure 5.29 – Default machine account quota value
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.29 – 默认机器帐户配额值
- en: 'You can also enumerate a machine account quota with PowerView:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用PowerView枚举机器帐户配额：
- en: '[PRE19]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The next step is to enumerate an ACL in the domain. We can do it with PowerView’s
    **Invoke-ACLScanner** or a similar tool. The interesting output is shown in the
    following screenshot:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是枚举域中的ACL。我们可以使用PowerView的**Invoke-ACLScanner**或类似工具来完成。以下截图显示了有趣的输出：
- en: '![Figure 5.30 – The user has GenericAll on the domain controller](image/B18964_05_30.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![图5.30 – 用户在域控制器上具有GenericAll权限](image/B18964_05_30.jpg)'
- en: Figure 5.30 – The user has GenericAll on the domain controller
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.30 – 用户在域控制器上具有GenericAll权限
- en: 'Now, we can create a computer account by using PowerMad[14], or **addcomputer**
    from Impacket, or, in our case, **StandIn**:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过使用PowerMad[14]、Impacket中的**addcomputer**，或在我们这个案例中使用**StandIn**来创建计算机帐户：
- en: '[PRE20]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The result is shown in the following screenshot:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如以下截图所示：
- en: '![Figure 5.31 – A new computer account is created](image/B18964_05_31.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![图5.31 – 创建了一个新的计算机帐户](image/B18964_05_31.jpg)'
- en: Figure 5.31 – A new computer account is created
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.31 – 创建了一个新的计算机帐户
- en: 'If we compromise the **stannis.baratheon** user who can change attributes on
    **kingslanding**, then add a computer account to the domain, we can set the **msDS-AllowedToActOnBehalfOfOtherIdentity**
    property to a newly created computer account using the PowerShell AD module, PowerView,
    or StandIn:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们妥协了**stannis.baratheon**用户，该用户可以更改**kingslanding**上的属性，那么通过向域中添加计算机帐户，我们可以使用PowerShell
    AD模块、PowerView或StandIn将**msDS-AllowedToActOnBehalfOfOtherIdentity**属性设置为新创建的计算机帐户：
- en: '[PRE21]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The result of the previous commands is in the following screenshot:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 之前命令的结果如下图所示：
- en: '![Figure 5.32 – A new computer account is created](image/B18964_05_32.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![图5.32 – 创建了一个新的计算机帐户](image/B18964_05_32.jpg)'
- en: Figure 5.32 – A new computer account is created
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.32 – 创建了一个新的计算机帐户
- en: 'Now, we can obtain a ticket:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以获取一个票证：
- en: '[PRE22]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The result can be seen in the following screenshot:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 结果可以在以下截图中看到：
- en: '![Figure 5.33 – Successful RBCD attack](image/B18964_05_33.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![图5.33 – 成功的RBCD攻击](image/B18964_05_33.jpg)'
- en: Figure 5.33 – Successful RBCD attack
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.33 – 成功的RBCD攻击
- en: Also, we can achieve persistence by using the RACE toolkit written by *Nikhil
    Mittal* by modifying the permissions of a computer object.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以通过使用*Nikhil Mittal*编写的RACE工具包，通过修改计算机对象的权限来实现持久化。
- en: To prevent RBCD abuse, we can review ACL in the domain on a regular basis, reduce
    the machine account quota to **0** (**ms-DS-MachineAccountQuota**), and ensure
    that only privileged users can add machines to the domain. Also, apply the **is
    sensitive and cannot be delegated** account property and the **Protected Users**
    group for high-privileged accounts. It is important to mention that just setting
    the machine account quota to **0** does not prevent this attack[15].
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止RBCD滥用，我们可以定期审查域中的ACL，减少机器账户配额至**0**（**ms-DS-MachineAccountQuota**），并确保只有特权用户能够将机器添加到域中。此外，应用**敏感且不可委托**账户属性和**受保护用户**组来保护高特权账户。需要特别说明的是，仅将机器账户配额设置为**0**并不能防止此类攻击[15]。
- en: Constrained delegation
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 受限委托
- en: 'The main difference between unconstrained and constrained delegation is that
    an account is allowed to impersonate users only against certain services. It can
    be configured with (**Use any authentication protocol**) or without (**Use Kerberos
    only**) protocol transition, as shown in the following delegation properties:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 无约束委托与受限委托的主要区别在于，一个账户仅能针对特定服务模拟用户。它可以配置为（**使用任何认证协议**）或不使用（**仅使用Kerberos**）协议转换，如以下委托属性所示：
- en: '![Figure 5.34 – Constrained delegation configuration](image/B18964_05_34.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.34 – 受限委托配置](image/B18964_05_34.jpg)'
- en: Figure 5.34 – Constrained delegation configuration
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.34 – 受限委托配置
- en: Delegation in this case uses two Kerberos extensions, called **Service for User
    to Self** (**S4U2Self**) and **Service for User to** **Proxy** (**S4U2Proxy**).
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，委托使用了两个Kerberos扩展，分别是**为用户自服务**（**S4U2Self**）和**为用户代理服务**（**S4U2Proxy**）。
- en: Note
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'A deep dive into the Kerberos extensions and how they work can be found here:
    https://www.netspi.com/blog/technical/network-penetration-testing/cve-2020-17049-kerberos-bronze-bit-theory/.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Kerberos扩展及其工作原理的详细信息可以在此处找到：https://www.netspi.com/blog/technical/network-penetration-testing/cve-2020-17049-kerberos-bronze-bit-theory/。
- en: In brief, the S4U2Proxy protocol allows one service to obtain a service ticket
    for another service on behalf of a user in constrained delegation without a protocol
    transition case. S42Self is used in the protocol transition case, allowing the
    service to obtain a service ticket for itself on behalf of a user when Kerberos
    was not used for authentication (for example, NTLM v2). Then, the S4U2Proxy protocol
    can be followed, as usual.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，S4U2Proxy协议允许一个服务代表用户在没有协议转换的受限委托情况下为另一个服务获取服务票证。在协议转换的情况下使用S42Self协议，允许服务在没有使用Kerberos认证（例如，NTLM
    v2）的情况下，代表用户为自身获取服务票证。然后，可以像往常一样使用S4U2Proxy协议。
- en: 'Constrained delegation can be configured for user and computer accounts. Enumeration
    with PowerView can be done with the following commands:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 受限委托可以为用户和计算机账户配置。使用PowerView进行枚举可以通过以下命令：
- en: '[PRE23]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The result of enumeration is shown in the following screenshot:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举结果如以下截图所示：
- en: '![Figure 5.35 – Enumerate users and computers with constrained delegation enabled](image/B18964_05_35.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.35 – 枚举启用了受限委托的用户和计算机](image/B18964_05_35.jpg)'
- en: Figure 5.35 – Enumerate users and computers with constrained delegation enabled
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.35 – 枚举启用了受限委托的用户和计算机
- en: 'Another way is to use the **findDelegation** Python script from Impacket:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是使用Impacket中的**findDelegation** Python脚本：
- en: '[PRE24]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The result will show a constrained delegation type as well:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 结果还将显示受限委托类型：
- en: '![Figure 5.36 – Enumerate delegation type](image/B18964_05_36.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.36 – 枚举委托类型](image/B18964_05_36.jpg)'
- en: Figure 5.36 – Enumerate delegation type
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.36 – 枚举委托类型
- en: 'Constrained delegation with protocol transition can be abused with the following
    command:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 使用协议转换的受限委托可能会被滥用，通过以下命令：
- en: '[PRE25]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The result can be seen in the following screenshot:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 结果可以在以下截图中看到：
- en: '![Figure 5.37 – Result of constrained delegation with protocol transition abuse](image/B18964_05_37.jpg)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.37 – 协议转换滥用的受限委托结果](image/B18964_05_37.jpg)'
- en: Figure 5.37 – Result of constrained delegation with protocol transition abuse
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.37 – 协议转换滥用的受限委托结果
- en: It is important to mention that the SPN part is not encrypted in the request,
    which is why we can use the **/altservice** option from Rubeus to get a service
    ticket – in our case, WinRM.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 需要特别说明的是，SPN部分在请求中未加密，这就是为什么我们可以使用Rubeus中的**/altservice**选项来获取服务票证——在我们这个例子中，是WinRM。
- en: Note
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'A great list of available services can be found here: [https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/silver-ticket#available-services](https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/silver-ticket#available-services).'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 可用服务的详细列表可以在这里找到：[https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/silver-ticket#available-services](https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/silver-ticket#available-services)。
- en: 'The HTTP service is configured without protocol transition, as in the following
    screenshot:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 服务配置时未进行协议转换，如下图所示：
- en: '![Figure 5.38 – Configured constrained delegation without protocol transition](image/B18964_05_38.jpg)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.38 – 配置了无协议转换的受限委托](image/B18964_05_38.jpg)'
- en: Figure 5.38 – Configured constrained delegation without protocol transition
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.38 – 配置了无协议转换的受限委托
- en: In this case, S4U2Self requests will not result in a forwardable ticket, thus
    S4U2Proxy will not work. Two known ways to abuse constrained delegation without
    protocol transition are by operating an RBCD attack on the service or by forcing
    a user to authenticate to the service to extract the ticket. To abuse constrained
    delegation without protocol transition, we will create a computer account, and
    set **castelblack** to allow RBCD from it (we need **SYSTEM** access to set this
    property). Then, we will delegate as **administrator** into **castelblack**, and
    finally, we can use this forwardable ST in the S4U2Proxy request to service on
    **Winterfell**. It sounds complicated, but we will execute this attack step by
    step.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，S4U2Self 请求不会导致可转发的票证，因此 S4U2Proxy 将无法工作。滥用无协议转换的受限委托的两种已知方法是：对服务执行 RBCD
    攻击，或强制用户对服务进行身份验证以提取票证。为了滥用无协议转换的受限委托，我们将创建一个计算机账户，并将 **castelblack** 设置为允许从该账户进行
    RBCD（我们需要 **SYSTEM** 权限来设置此属性）。然后，我们将以 **administrator** 身份委托到 **castelblack**，最后，我们可以在
    S4U2Proxy 请求中使用这个可转发的 ST 来访问 **Winterfell** 服务。听起来很复杂，但我们将一步一步执行这个攻击。
- en: 'In the first step, we will create a session as **Castelblack$**, create a computer
    account named **Test$**, retrieve its **Security Identifier** (**SID**), and set
    the **msDS-AllowedToActOnBehalfOfOtherIdentity** attribute of **Castelblack$**
    to **Test$**. I will use Mimikatz, PowerView, and StandIn:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一步中，我们将创建一个会话作为 **Castelblack$**，创建一个名为 **Test$** 的计算机账户，检索其 **安全标识符**（**SID**），并将
    **Castelblack$** 的 **msDS-AllowedToActOnBehalfOfOtherIdentity** 属性设置为 **Test$**。我将使用
    Mimikatz、PowerView 和 StandIn：
- en: '[PRE26]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The result of the StandIn commands is in the following screenshot:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: StandIn 命令的结果如以下截图所示：
- en: '![Figure 5.39 – Creating a computer account and preparing RBCD abuse](image/B18964_05_39.jpg)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.39 – 创建计算机账户并准备 RBCD 滥用](image/B18964_05_39.jpg)'
- en: Figure 5.39 – Creating a computer account and preparing RBCD abuse
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.39 – 创建计算机账户并准备 RBCD 滥用
- en: 'Next, we will calculate the AES256 key from the computer account’s password
    and abuse RBCD using **Test$** on **Castelblack$**. Now, we have forwardable ST
    for **Castelblack$**:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将从计算机账户的密码计算出 AES256 密钥，并在 **Castelblack$** 上使用 **Test$** 滥用 RBCD。现在，我们拥有
    **Castelblack$** 的可转发 ST：
- en: '[PRE27]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Finally, we will use the forwardable ST to get access to winterfell’s filesystem:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将使用可转发的 ST 来访问 Winterfell 的文件系统：
- en: '[PRE28]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The result of the attack is in the following screenshot:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击的结果如以下截图所示：
- en: '![Figure 5.40 – Successful abuse of the constrained delegation without protocol
    transition](image/B18964_05_40.jpg)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.40 – 成功滥用无协议转换的受限委托](image/B18964_05_40.jpg)'
- en: Figure 5.40 – Successful abuse of the constrained delegation without protocol
    transition
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.40 – 成功滥用无协议转换的受限委托
- en: These steps can be performed from a Linux machine too, as shown in the walk-through
    by the lab creator[16].
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤也可以从 Linux 机器上执行，如实验室创建者提供的操作步骤所示[16]。
- en: Bronze Bit attack aka CVE-2020-17049
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bronze Bit 攻击，又名 CVE-2020-17049
- en: For certain types of delegation abuse, the ticket needs to have a **forwardable**
    flag set. Reasons for the flag not being set can be that the impersonated user
    is a member of the **Protected Users** group or was configured with the **is sensitive
    and cannot be delegated** flag. Also, the service can be configured for **Kerberos
    only** constrained delegation. In 2020, the Bronze Bit vulnerability was discovered,
    allowing the attacker to edit the ticket and set the desired **forwardable** flag.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 对于某些类型的委托滥用，票证需要设置 **可转发** 标志。未设置该标志的原因可能是伪装的用户是 **受保护用户** 组的成员，或者配置了 **敏感且无法委托**
    的标志。此外，服务可能被配置为仅支持 **Kerberos** 的受限委托。在 2020 年，发现了 Bronze Bit 漏洞，攻击者可以编辑票证并设置所需的
    **可转发** 标志。
- en: In practice, we can use a **force-forwardable** flag from the **getST** Python
    script in Impacket.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，我们可以使用 Imapacket 中 **getST** Python 脚本的**force-forwardable**标志。
- en: Note
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'A good practical example with the two most common scenarios can be found here:
    [https://www.netspi.com/blog/technical/network-penetration-testing/cve-2020-17049-kerberos-bronze-bit-attack/](https://www.netspi.com/blog/technical/network-penetration-testing/cve-2020-17049-kerberos-bronze-bit-attack/).'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的实际示例，涵盖了两个最常见的场景，可以在此处找到：[https://www.netspi.com/blog/technical/network-penetration-testing/cve-2020-17049-kerberos-bronze-bit-attack/](https://www.netspi.com/blog/technical/network-penetration-testing/cve-2020-17049-kerberos-bronze-bit-attack/)。
- en: The only recommendation is to patch the operating system.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的建议是打补丁操作系统。
- en: After lateral movement inside the domain, the attacker may propagate further
    to trusted forests. The next section will cover possible limitations in such movement
    and introduce available security mechanisms.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在域内部横向移动后，攻击者可能会进一步传播到受信任的林。下一节将介绍这种移动的可能限制并介绍可用的安全机制。
- en: Abusing trust for lateral movement
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 滥用信任进行横向移动
- en: In this section, we are going to discuss various ways to abuse forest trust
    for lateral movement. Movement from the child to the parent domain inside the
    forest is covered in [*Chapter 6*](B18964_06.xhtml#_idTextAnchor119)*/*
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论滥用林信任进行横向移动的各种方法。关于如何从子域迁移到林中的父域，参见[*第六章*](B18964_06.xhtml#_idTextAnchor119)*/*。
- en: We will start by covering the necessary theory and then apply it to practice.
    As stated by Microsoft, a **forest** is a security boundary and consists of one
    or more AD domains that share a common schema, configuration, and global catalog.
    **The schema** defines objects within the forest, and the global catalog contains
    a partial attribute set of each object in the forest domains. There are six types
    of trust relationships; we will focus our attention on the **External** and **Forest**
    types. To understand more about security boundaries, we need to discuss the **Security
    Identifier** (**SID**), the **SID history** attribute, and **SID filtering**.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先介绍必要的理论，然后将其应用于实践。正如微软所述，**林**是一个安全边界，由一个或多个共享公共架构、配置和全局目录的 AD 域组成。**架构**定义了林内的对象，全局目录包含林中各个域中每个对象的部分属性集。信任关系有六种类型；我们将重点关注**外部**和**林**类型。为了更好地理解安全边界，我们需要讨论**安全标识符**（**SID**）、**SID
    历史**属性和**SID 过滤**。
- en: SID is a unique identifier assigned to each security principal in the domain.
    SID filtering is a mechanism that filters out SIDs from other domains.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: SID 是分配给域中每个安全主体的唯一标识符。SID 过滤是过滤掉来自其他域的 SID 的机制。
- en: Note
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Filtering rules can be found here: [https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-pac/55fc19f2-55ba-4251-8a6a-103dd7c66280](https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-pac/55fc19f2-55ba-4251-8a6a-103dd7c66280).'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤规则可以在此处找到：[https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-pac/55fc19f2-55ba-4251-8a6a-103dd7c66280](https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-pac/55fc19f2-55ba-4251-8a6a-103dd7c66280)。
- en: 'Briefly, there are two main points to remember regarding lateral movement possibility
    and SID filtering:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，关于横向移动的可能性和 SID 过滤，有两个要点需要记住：
- en: If SID filtering is fully enforced, all SIDs that are not from a trusted domain
    will be filtered. However, the *Enterprise Domain Controllers* SID, *Trusted Domain
    Object* SIDs, and *NeverFilter* SIDs were exempt from domain trust SID filtering[17].
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果完全执行 SID 过滤，则所有非受信任域的 SID 将被过滤。然而，*企业域控制器* SID、*受信任域对象* SID 和 *NeverFilter*
    SID 会被排除在域信任 SID 过滤之外[17]。
- en: The **External** trust is more relaxed than **Forest**.
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外部**信任比**林**信任更宽松。'
- en: 'The next moving part is **SID history**. SID history is a property of a user
    or group that allows the keeping of an old SID during the migration from one domain
    to another in order to keep necessary access. SID history values can be filtered,
    depending on SID filtering behavior. Inter-forest trusts have different authentication
    levels available: **forest-wide**, **domain-wide**, and **selective**. Selective
    authentication is the strictest as it has a direct match between the subject and
    object. This is the bare minimum amount of theory required to understand how to
    move across forests.'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的动态部分是**SID 历史**。SID 历史是用户或组的一个属性，允许在从一个域迁移到另一个域时保留旧的 SID，以便保持必要的访问权限。SID
    历史值可以根据 SID 过滤行为进行过滤。林间信任有不同的身份验证级别可用：**整个林**、**整个域**和**选择性**。选择性身份验证是最严格的，因为它要求主体和对象之间有直接匹配。这是理解如何跨林迁移所需的基本理论。
- en: As a first step, we will enumerate trusts in the forests in the lab. Then, we
    will discuss common attack vectors and their limitations such as password reuse,
    foreign group member compromise, unconstrained delegation abuse between forests,
    and injection of an extra SID into the SID history.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第一步，我们将枚举实验室中的森林信任关系。然后，我们将讨论常见的攻击向量及其限制，如密码重用、外部组成员破坏、森林间无约束委派滥用以及将额外的 SID
    注入 SID 历史中。
- en: 'For trust enumeration, we have plenty of tools at our disposal, such as PowerView,
    BloodHound, or the Netdom utility. The following commands are available in PowerView:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 对于信任枚举，我们有许多工具可以使用，如 PowerView、BloodHound 或 Netdom 实用工具。PowerView 中有以下命令可用：
- en: '**Get-DomainTrust**'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Get-DomainTrust**'
- en: '**Get-ForestTrust**'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Get-ForestTrust**'
- en: '**Get-DomainTrustMapping**'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Get-DomainTrustMapping**'
- en: 'The result of the first command execution is in the following screenshot:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令执行的结果如以下截图所示：
- en: '![Figure 5.41 – All trusts for the current user’s domain](image/B18964_05_41.jpg)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.41 – 当前用户域的所有信任关系](image/B18964_05_41.jpg)'
- en: Figure 5.41 – All trusts for the current user’s domain
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.41 – 当前用户域的所有信任关系
- en: We will start our discussion about attacking options in password reuse attacks.
    In a real environment, this attack is often successful. Dump users from the compromised
    forest, look for the same user accounts in the external forest, and then try password
    reuse against them.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开始讨论密码重用攻击的攻击选项。在真实环境中，这种攻击通常是成功的。通过从受损的森林中导出用户，查找外部森林中的相同用户账户，然后尝试对其进行密码重用攻击。
- en: 'Next, we can enumerate foreign groups and users with the help of PowerView
    commands (**Get-DomainForeignUser** and **Get-DomainForeignGroupMember**) or by
    using the BloodHound query provided by *Mayfly* in his walk-through:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以借助 PowerView 命令（**Get-DomainForeignUser** 和 **Get-DomainForeignGroupMember**）或使用
    *Mayfly* 在其演示中提供的 BloodHound 查询来枚举外部组和用户：
- en: '[PRE29]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The following are users and groups that have access across domains and forests:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是具有跨域和森林访问权限的用户和组：
- en: '![Figure 5.42 – Users and groups with cross-domain and forest rights](image/B18964_05_42.jpg)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.42 – 具有跨域和森林权限的用户和组](image/B18964_05_42.jpg)'
- en: Figure 5.42 – Users and groups with cross-domain and forest rights
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.42 – 具有跨域和森林权限的用户和组
- en: After we compromise the user with membership in a group such as **SPYS**, we
    can laterally move between forests and enjoy our new privileges.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们破坏了具有 **SPYS** 组成员身份的用户之后，我们可以在森林之间进行横向移动，并享受我们的新权限。
- en: 'Another way to break forests’ trust is by abusing **Kerberos unconstrained
    delegation** (**KUD**) between the local machine with KUD enabled and the domain
    controller in the external forest by coercing authentication using PrinterBug
    or PetitPotam. However, it is possible only if TGT delegation is enabled, which
    was true by default till March 2019[18]. In our case, we replicate the attack
    with the help of Rubeus and PrinterBug to force authentication:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种破坏森林信任的方法是滥用**Kerberos 无约束委派**（**KUD**），在启用了 KUD 的本地机器和外部森林中的域控制器之间通过使用 PrinterBug
    或 PetitPotam 强制认证。然而，只有在启用了 TGT 委派的情况下才可行，这一设置默认直到 2019 年 3 月才被禁用。在我们的案例中，我们通过
    Rubeus 和 PrinterBug 帮助下复制了该攻击以强制认证：
- en: '[PRE30]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'As a result, we dumped all hashes from the **essos** forest:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，我们从 **essos** 森林中导出了所有哈希值：
- en: '![Figure 5.43 – Hashes of all domain objects from the essos forest](image/B18964_05_43.jpg)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.43 – essos 森林中所有域对象的哈希值](image/B18964_05_43.jpg)'
- en: Figure 5.43 – Hashes of all domain objects from the essos forest
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.43 – essos 森林中所有域对象的哈希值
- en: 'SID filtering can be in three states: **disabled**, **relaxed**, and **enforced**.
    If SID filtering is disabled, the attacker will be able to simply add the RID
    of the **Enterprise Admins** group and get access to the target domain controller
    for the **DCSync** attack.'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: SID 筛选可以处于三种状态：**禁用**、**放宽** 和 **强制**。如果 SID 筛选被禁用，攻击者将能够轻松添加 **Enterprise Admins**
    组的 RID，从而访问目标域控制器进行 **DCSync** 攻击。
- en: With SID filtering fully enforced, the only possibility for lateral movement
    is to compromise domain users with privileges in the target forest or bypass SID
    filtering by exploiting CVE-2020-0665.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 当 SID 筛选完全启用时，横向移动的唯一可能性是破坏具有目标森林权限的域用户，或通过利用 CVE-2020-0665 绕过 SID 筛选。
- en: Note
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Exploitation steps are well described here: [https://www.thehacker.recipes/ad/movement/trusts#cve-2020-0665](https://www.thehacker.recipes/ad/movement/trusts#cve-2020-0665).'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 利用步骤在此处有详细描述：[https://www.thehacker.recipes/ad/movement/trusts#cve-2020-0665](https://www.thehacker.recipes/ad/movement/trusts#cve-2020-0665)。
- en: 'If SID history is enabled, it means that SID filtering is relaxed (the **TREAT_AS_EXTERNAL**
    flag). In such a scenario, an attacker can spoof their membership in any group
    with **RID > 1000**[19] by adding the group’s SID in the SID history attribute.
    In our example, we will enumerate groups in the **essos.local** forest with the
    help of PowerView looking for interesting groups with **RID >** **1000**:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启用了 SID 历史，则表示 SID 过滤放宽了（**TREAT_AS_EXTERNAL** 标志）。在这种情况下，攻击者可以通过将组的 SID 添加到
    SID 历史属性中，伪造自己属于任何 **RID > 1000**[19] 的组。在我们的示例中，我们将借助 PowerView 枚举 **essos.local**
    林中的组，寻找 **RID > 1000** 的有趣组：
- en: '[PRE31]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'As a result, we found several promising candidates:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，我们找到了一些有前途的候选项：
- en: '![Figure 5.44 – Domains groups in essos.local with RID > 1000](image/B18964_05_44.jpg)'
  id: totrans-326
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.44 – essos.local 中的域组，RID > 1000](image/B18964_05_44.jpg)'
- en: Figure 5.44 – Domains groups in essos.local with RID > 1000
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.44 – essos.local 中的域组，RID > 1000
- en: '**Spys** has **GenericAll** on the **jorah.mormont** user, meaning we can take
    full control over this user:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '**Spys** 对 **jorah.mormont** 用户具有 **GenericAll** 权限，这意味着我们可以完全控制该用户：'
- en: '[PRE32]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The password was changed successfully, as can be seen in the following screenshot:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 密码已成功更改，以下截图显示了这一点：
- en: '![Figure 5.45 – Successful password change](image/B18964_05_45.jpg)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.45 – 密码更改成功](image/B18964_05_45.jpg)'
- en: Figure 5.45 – Successful password change
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.45 – 密码更改成功
- en: 'Verify that the new password was set successfully with **crackmapexec**:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **crackmapexec** 验证新密码是否已成功设置：
- en: '![Figure 5.46 – Successful login with the new password](image/B18964_05_46.jpg)'
  id: totrans-334
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.46 – 使用新密码成功登录](image/B18964_05_46.jpg)'
- en: Figure 5.46 – Successful login with the new password
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.46 – 使用新密码成功登录
- en: To prevent inter-forest abuse, ensure that strict SID filtering is enforced,
    TGT delegation and SID history are disabled, and ACLs are correctly applied to
    objects in the forest. However, if the attacker was able to compromise or impersonate
    a user with a foreign group membership, only selective authentication can limit
    the damage.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 为防止跨林滥用，确保严格的 SID 过滤已启用，TGT 委派和 SID 历史已禁用，并且 ACL 已正确应用于林中的对象。然而，如果攻击者能够破坏或冒充具有外部组成员资格的用户，只有选择性认证才能限制损害。
- en: Summary
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter has covered the topic of lateral movement. We discussed how administrative
    protocols can be used for movement across the environment. It is an effective
    way to blend in with normal traffic and fly under the radar. The concept of relaying
    the hash is a powerful weapon in environments lacking hardening. Simple recommendations
    such as disabling unused protocols and services can significantly improve security
    posture. It is important to mention that, in complex environments, even simple
    changes can create chaos and outages, and thorough testing is required. A deep
    dive into Kerberos authentication, different delegation types, and ways to abuse
    them helped to understand in more detail the complexity of the Kerberos protocol
    itself and the security implications of each delegation type. We have demonstrated
    in practice that for successful lateral movement, attackers do not necessarily
    need the victim’s password. It can be any form of credential material, such as
    a hash, ticket, or key. Staying stealthy and mimicking real authentication attempts
    require an in-depth understanding of your tradecraft. In [*Chapter 8*](B18964_08.xhtml#_idTextAnchor163),
    we will demonstrate that certificates can also be used for lateral movement. Last
    but not least, lateral movement between forests shows that it is not only about
    how secure you are but also who your trustees are. In the next chapter, we will
    discuss privilege escalation inside the domain.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了横向渗透的主题。我们讨论了如何使用管理协议在环境中进行移动。这是一种有效的方式，可以与正常流量融合并避开监控。哈希转发的概念是一个强有力的武器，尤其是在缺乏加固的环境中。像禁用未使用的协议和服务这样的简单建议，可以显著提高安全性。需要指出的是，在复杂的环境中，即使是简单的变更也可能造成混乱和宕机，因此需要进行彻底的测试。深入探讨
    Kerberos 认证、不同类型的委派以及如何滥用它们，帮助我们更详细地理解 Kerberos 协议的复杂性以及每种委派类型的安全影响。我们已经在实践中证明，对于成功的横向渗透，攻击者不一定需要受害者的密码。任何形式的凭证材料，如哈希值、票据或密钥，都可以作为替代。保持隐蔽并模拟真实的身份验证尝试需要对你的技术有深入的理解。在
    [*第 8 章*](B18964_08.xhtml#_idTextAnchor163) 中，我们将展示证书也可以用于横向渗透。最后但同样重要的是，跨林横向渗透表明，这不仅仅关乎你的安全性，还涉及到你的受托人是谁。在下一章中，我们将讨论域内特权提升的问题。
- en: References
  id: totrans-339
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: 'Evil-WinRM: [https://github.com/Hackplayers/evil-winrm](https://github.com/Hackplayers/evil-winrm)'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Evil-WinRM：[https://github.com/Hackplayers/evil-winrm](https://github.com/Hackplayers/evil-winrm)
- en: 'Set up JEA in the lab: [https://cheats.philkeeble.com/active-directory/ad-privilege-escalation/jea](https://cheats.philkeeble.com/active-directory/ad-privilege-escalation/jea)'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在实验室设置 JEA：[https://cheats.philkeeble.com/active-directory/ad-privilege-escalation/jea](https://cheats.philkeeble.com/active-directory/ad-privilege-escalation/jea)
- en: 'RACE toolkit: [https://github.com/samratashok/RACE](https://github.com/samratashok/RACE)'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: RACE 工具包：[https://github.com/samratashok/RACE](https://github.com/samratashok/RACE)
- en: 'User Rights Assignment: RDP - [https://blog.cptjesus.com/posts/userrightsassignment/](https://blog.cptjesus.com/posts/userrightsassignment/)'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户权限分配：RDP - [https://blog.cptjesus.com/posts/userrightsassignment/](https://blog.cptjesus.com/posts/userrightsassignment/)
- en: 'RestrictedAdmin: [https://github.com/GhostPack/RestrictedAdmin](https://github.com/GhostPack/RestrictedAdmin)'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: RestrictedAdmin：[https://github.com/GhostPack/RestrictedAdmin](https://github.com/GhostPack/RestrictedAdmin)
- en: 'SharpRDP: [https://github.com/0xthirteen/SharpRDP](https://github.com/0xthirteen/SharpRDP)'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SharpRDP：[https://github.com/0xthirteen/SharpRDP](https://github.com/0xthirteen/SharpRDP)
- en: 'SharpRDPThief: [https://github.com/passthehashbrowns/SharpRDPThief](https://github.com/passthehashbrowns/SharpRDPThief)'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SharpRDPThief：[https://github.com/passthehashbrowns/SharpRDPThief](https://github.com/passthehashbrowns/SharpRDPThief)
- en: 'Impacket: [https://github.com/fortra/impacket](https://github.com/fortra/impacket)'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Impacket：[https://github.com/fortra/impacket](https://github.com/fortra/impacket)
- en: 'CVE-2019-1019 writeup: [https://securityboulevard.com/2019/06/your-session-key-is-my-session-key-how-to-retrieve-the-session-key-for-any-authentication/](https://securityboulevard.com/2019/06/your-session-key-is-my-session-key-how-to-retrieve-the-session-key-for-any-authentication/)'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CVE-2019-1019 漏洞分析：[https://securityboulevard.com/2019/06/your-session-key-is-my-session-key-how-to-retrieve-the-session-key-for-any-authentication/](https://securityboulevard.com/2019/06/your-session-key-is-my-session-key-how-to-retrieve-the-session-key-for-any-authentication/)
- en: 'Dementor: [https://github.com/NotMedic/NetNTLMtoSilverTicket/blob/master/dementor.py](https://github.com/NotMedic/NetNTLMtoSilverTicket/blob/master/dementor.py)'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Dementor：[https://github.com/NotMedic/NetNTLMtoSilverTicket/blob/master/dementor.py](https://github.com/NotMedic/NetNTLMtoSilverTicket/blob/master/dementor.py)
- en: 'Drop-the-MIC scanner: [https://github.com/fox-it/cve-2019-1040-scanner](https://github.com/fox-it/cve-2019-1040-scanner)'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Drop-the-MIC 扫描器：[https://github.com/fox-it/cve-2019-1040-scanner](https://github.com/fox-it/cve-2019-1040-scanner)
- en: 'Checking the username of logged-in users to the Kerberos tickets: [https://gist.github.com/JoeDibley/fd93a9c5b3d45dbd8cbfdd003ddc1bd1](https://gist.github.com/JoeDibley/fd93a9c5b3d45dbd8cbfdd003ddc1bd1)'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查登录用户的 Kerberos 票证中的用户名：[https://gist.github.com/JoeDibley/fd93a9c5b3d45dbd8cbfdd003ddc1bd1](https://gist.github.com/JoeDibley/fd93a9c5b3d45dbd8cbfdd003ddc1bd1)
- en: 'StandIn: [https://github.com/FuzzySecurity/StandIn](https://github.com/FuzzySecurity/StandIn)'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: StandIn：[https://github.com/FuzzySecurity/StandIn](https://github.com/FuzzySecurity/StandIn)
- en: 'Powermad: [https://github.com/Kevin-Robertson/Powermad](https://github.com/Kevin-Robertson/Powermad)'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Powermad：[https://github.com/Kevin-Robertson/Powermad](https://github.com/Kevin-Robertson/Powermad)
- en: 'Exploiting RBCD as a normal user: [https://www.tiraniddo.dev/2022/05/exploiting-rbcd-using-normal-user.xhtml](https://www.tiraniddo.dev/2022/05/exploiting-rbcd-using-normal-user.xhtml)'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以普通用户身份利用 RBCD：[https://www.tiraniddo.dev/2022/05/exploiting-rbcd-using-normal-user.xhtml](https://www.tiraniddo.dev/2022/05/exploiting-rbcd-using-normal-user.xhtml)
- en: 'Abuse of constrained delegation from Linux: [https://mayfly277.github.io/posts/GOADv2-pwning-part10/#without-protocol-transition](https://mayfly277.github.io/posts/GOADv2-pwning-part10/#without-protocol-transition)'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Linux 滥用受限委托：[https://mayfly277.github.io/posts/GOADv2-pwning-part10/#without-protocol-transition](https://mayfly277.github.io/posts/GOADv2-pwning-part10/#without-protocol-transition)
- en: 'Bypass SID filtering: [https://improsec.com/tech-blog/sid-filter-as-security-boundary-between-domains-part-4-bypass-sid-filtering-research](https://improsec.com/tech-blog/sid-filter-as-security-boundary-between-domains-part-4-bypass-sid-filtering-research)'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绕过 SID 过滤：[https://improsec.com/tech-blog/sid-filter-as-security-boundary-between-domains-part-4-bypass-sid-filtering-research](https://improsec.com/tech-blog/sid-filter-as-security-boundary-between-domains-part-4-bypass-sid-filtering-research)
- en: 'Updates to TGT delegation across incoming trusts in Windows Server: [https://support.microsoft.com/en-us/topic/updates-to-tgt-delegation-across-incoming-trusts-in-windows-server-1a6632ac-1599-0a7c-550a-a754796c291e](https://support.microsoft.com/en-us/topic/updates-to-tgt-delegation-across-incoming-trusts-in-windows-server-1a6632ac-1599-0a7c-550a-a754796c291e)'
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Windows Server 中跨入站信任的 TGT 委托更新：[https://support.microsoft.com/en-us/topic/updates-to-tgt-delegation-across-incoming-trusts-in-windows-server-1a6632ac-1599-0a7c-550a-a754796c291e](https://support.microsoft.com/en-us/topic/updates-to-tgt-delegation-across-incoming-trusts-in-windows-server-1a6632ac-1599-0a7c-550a-a754796c291e)
- en: 'Abuse SID history: [https://dirkjanm.io/active-directory-forest-trusts-part-one-how-does-sid-filtering-work/](https://dirkjanm.io/active-directory-forest-trusts-part-one-how-does-sid-filtering-work/)'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '滥用SID历史: [https://dirkjanm.io/active-directory-forest-trusts-part-one-how-does-sid-filtering-work/](https://dirkjanm.io/active-directory-forest-trusts-part-one-how-does-sid-filtering-work/)'
- en: Further reading
  id: totrans-359
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'These aids for further study will let you dive deeper into the attacks covered
    in the chapter:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是进一步学习的资料，帮助你深入了解本章中涉及的攻击：
- en: 'The original research behind the SharpRDP tool creation: [https://0xthirteen.com/2020/01/21/revisiting-remote-desktop-lateral-movement/](https://0xthirteen.com/2020/01/21/revisiting-remote-desktop-lateral-movement/)'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'SharpRDP工具创建背后的原始研究: [https://0xthirteen.com/2020/01/21/revisiting-remote-desktop-lateral-movement/](https://0xthirteen.com/2020/01/21/revisiting-remote-desktop-lateral-movement/)'
- en: 'Dumping RDP credentials with the help of Mimikatz: [https://pentestlab.blog/2021/05/24/dumping-rdp-credentials/](https://pentestlab.blog/2021/05/24/dumping-rdp-credentials/)'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '借助Mimikatz转储RDP凭据: [https://pentestlab.blog/2021/05/24/dumping-rdp-credentials/](https://pentestlab.blog/2021/05/24/dumping-rdp-credentials/)'
- en: 'Microsoft documentation about Remote Credential Guard: [https://learn.microsoft.com/en-us/windows/security/identity-protection/remote-credential-guard](https://learn.microsoft.com/en-us/windows/security/identity-protection/remote-credential-guard)'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '关于远程凭据保护的微软文档: [https://learn.microsoft.com/en-us/windows/security/identity-protection/remote-credential-guard](https://learn.microsoft.com/en-us/windows/security/identity-protection/remote-credential-guard)'
- en: 'Great research published by *0xf0x* about Impacket usage and detection: [https://neil-fox.github.io/Impacket-usage-&-detection/](https://neil-fox.github.io/Impacket-usage-&-detection/)'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*0xf0x* 关于Impacket使用与检测的精彩研究: [https://neil-fox.github.io/Impacket-usage-&-detection/](https://neil-fox.github.io/Impacket-usage-&-detection/)'
- en: 'Detailed publication about artifacts left by running remote command execution:
    [https://www.synacktiv.com/publications/traces-of-windows-remote-command-execution.xhtml](https://www.synacktiv.com/publications/traces-of-windows-remote-command-execution.xhtml)'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '关于远程命令执行所留下的痕迹的详细发布: [https://www.synacktiv.com/publications/traces-of-windows-remote-command-execution.xhtml](https://www.synacktiv.com/publications/traces-of-windows-remote-command-execution.xhtml)'
- en: 'More information about ASR implementation: [https://www.joeyverlinden.com/implementing-and-monitoring-attack-surface-reduction-rules-asr/](https://www.joeyverlinden.com/implementing-and-monitoring-attack-surface-reduction-rules-asr/)'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '关于ASR实现的更多信息: [https://www.joeyverlinden.com/implementing-and-monitoring-attack-surface-reduction-rules-asr/](https://www.joeyverlinden.com/implementing-and-monitoring-attack-surface-reduction-rules-asr/)'
- en: 'Great theory background about NTLM relay attack and conditions: [https://www.thehacker.recipes/ad/movement/ntlm/relay](https://www.thehacker.recipes/ad/movement/ntlm/relay)'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '关于NTLM中继攻击和条件的理论背景: [https://www.thehacker.recipes/ad/movement/ntlm/relay](https://www.thehacker.recipes/ad/movement/ntlm/relay)'
- en: 'Detailed blog post about differences between versions of the NTLM protocol:
    [https://www.praetorian.com/blog/ntlmv1-vs-ntlmv2/](https://www.praetorian.com/blog/ntlmv1-vs-ntlmv2/)'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '关于NTLM协议不同版本差异的详细博客文章: [https://www.praetorian.com/blog/ntlmv1-vs-ntlmv2/](https://www.praetorian.com/blog/ntlmv1-vs-ntlmv2/)'
- en: 'Detecting Pass-the-Hash attacks: [https://blog.netwrix.com/2021/11/30/how-to-detect-pass-the-hash-attacks/](https://blog.netwrix.com/2021/11/30/how-to-detect-pass-the-hash-attacks/)'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '检测Pass-the-Hash攻击: [https://blog.netwrix.com/2021/11/30/how-to-detect-pass-the-hash-attacks/](https://blog.netwrix.com/2021/11/30/how-to-detect-pass-the-hash-attacks/)'
- en: 'Unconstrained delegation: [https://en.hackndo.com/constrained-unconstrained-delegation/#unconstrained-delegation](https://en.hackndo.com/constrained-unconstrained-delegation/#unconstrained-delegation)'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '无约束委派: [https://en.hackndo.com/constrained-unconstrained-delegation/#unconstrained-delegation](https://en.hackndo.com/constrained-unconstrained-delegation/#unconstrained-delegation)'
- en: 'The list of LDAP syntax filters: [https://social.technet.microsoft.com/wiki/contents/articles/5392.active-directory-ldap-syntax-filters.aspx](https://social.technet.microsoft.com/wiki/contents/articles/5392.active-directory-ldap-syntax-filters.aspx)'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'LDAP语法过滤器列表: [https://social.technet.microsoft.com/wiki/contents/articles/5392.active-directory-ldap-syntax-filters.aspx](https://social.technet.microsoft.com/wiki/contents/articles/5392.active-directory-ldap-syntax-filters.aspx)'
- en: 'Example of RBCD attack execution: [https://pentestlab.blog/2021/10/18/resource-based-constrained-delegation/](https://pentestlab.blog/2021/10/18/resource-based-constrained-delegation/)'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'RBCD攻击执行示例: [https://pentestlab.blog/2021/10/18/resource-based-constrained-delegation/](https://pentestlab.blog/2021/10/18/resource-based-constrained-delegation/)'
- en: 'Great explanation of the constrained delegation abuse with schemas and traffic
    capture: [https://www.notsoshant.io/blog/attacking-kerberos-constrained-delegation/](https://www.notsoshant.io/blog/attacking-kerberos-constrained-delegation/)'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于带有模式和流量捕获的受限委托滥用的详细解释：[https://www.notsoshant.io/blog/attacking-kerberos-constrained-delegation/](https://www.notsoshant.io/blog/attacking-kerberos-constrained-delegation/)
- en: 'Bronze Bit vulnerability and theory behind it: [https://www.netspi.com/blog/technical/network-penetration-testing/cve-2020-17049-kerberos-bronze-bit-theory/](https://www.netspi.com/blog/technical/network-penetration-testing/cve-2020-17049-kerberos-bronze-bit-theory/)'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bronze Bit 漏洞及其背后的理论：[https://www.netspi.com/blog/technical/network-penetration-testing/cve-2020-17049-kerberos-bronze-bit-theory/](https://www.netspi.com/blog/technical/network-penetration-testing/cve-2020-17049-kerberos-bronze-bit-theory/)
