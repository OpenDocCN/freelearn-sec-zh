- en: Chapter 3. Client-server Ethernet-style Networks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章：客户端-服务器以太网风格的网络
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Simple configuration - non-bridged
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单配置 - 非桥接模式
- en: Enabling client-to-client traffic
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用客户端到客户端的流量
- en: Bridging - Linux
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 桥接 - Linux
- en: Bridging - Windows
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 桥接 - Windows
- en: Checking broadcast and non-IP traffic
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查广播和非IP流量
- en: An external DHCP
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部DHCP
- en: Using the status file
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用状态文件
- en: The management interface
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理界面
- en: Integrating IPv6 into TAP-style networks
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将IPv6集成到TAP风格的网络中
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: The recipes in this chapter will cover the deployment model of a single server
    with multiple remote clients capable of forwarding Ethernet traffic.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的教程将涵盖单服务器和多个远程客户端的部署模型，这些客户端能够转发以太网流量。
- en: We will look at several common configurations, including bridging, the use of
    an external DHCP server, and also the use of the `OpenVPN` status file. Please
    note that bridging should only be used as a last resort. Most of the functionality
    provided by bridging can be achieved through other methods. Moreover, there are
    many disadvantages to using bridging, especially in terms of performance and security.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查看几种常见的配置，包括桥接、使用外部DHCP服务器，以及使用`OpenVPN`状态文件。请注意，桥接应仅在最后的选择中使用。桥接提供的大部分功能可以通过其他方法实现。此外，使用桥接有许多缺点，尤其是在性能和安全性方面。
- en: Simple configuration - non-bridged
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单配置 - 非桥接模式
- en: This recipe will demonstrate how to set up a TAP-based connection in client
    or server mode using certificates. It also uses masquerading to allow the OpenVPN
    clients to reach all the machines behind the OpenVPN server. The advantage of
    masquerading is that with it, no special routes are needed on the server LAN.
    Masquerading for OpenVPN servers is available only on the Linux and UNIX variants.
    This recipe is similar to the *Server-side routing* recipe from the previous chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将演示如何使用证书在客户端或服务器模式下设置基于TAP的连接。它还使用伪装技术，使OpenVPN客户端能够访问OpenVPN服务器背后的所有计算机。伪装的优点是使用它后，服务器局域网无需特殊路由。OpenVPN服务器的伪装功能仅在Linux和UNIX变种上可用。本教程类似于上一章中的*服务器端路由*教程。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, both the server computer and the client computer
    were running CentOS 6 Linux and OpenVPN 2.3.10.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[第2章](part0025.xhtml#aid-NQU21 "第2章. 客户端-服务器仅IP网络")中的第一个教程设置客户端和服务器证书，*客户端-服务器仅IP网络*。对于本教程，服务器计算机和客户端计算机都运行CentOS
    6 Linux和OpenVPN 2.3.10。
- en: 'We use the following network layout:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下网络布局：
- en: '![Getting ready](img/image00352.jpeg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/image00352.jpeg)'
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the server configuration file:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建服务器配置文件：
- en: '[PRE0]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Save it as `example-3-1-server.conf`. Note that on some Linux distributions,
    the group `nogroup` is used instead of `nobody`.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其保存为`example-3-1-server.conf`。请注意，在某些Linux发行版中，使用`nogroup`而不是`nobody`。
- en: 'Start the server:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE1]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Set up IP forwarding and an `iptables` masquerading rule:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置IP转发和`iptables`伪装规则：
- en: '[PRE2]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, create the client configuration file:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建客户端配置文件：
- en: '[PRE3]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Save it as `example-3-1-client.conf`.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其保存为`example-3-1-client.conf`。
- en: 'Start the client:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动客户端：
- en: '[PRE4]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output generated is shown as follows:'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 生成的输出如下所示：
- en: '![How to do it...](img/image00353.jpeg)'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00353.jpeg)'
- en: 'After the connection is established, we can verify that it is working. First,
    we ping the server:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接建立后，我们可以验证其是否正常工作。首先，我们ping一下服务器：
- en: '[PRE5]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Second, we ping a host on the server-side LAN:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第二步，我们对服务器端局域网中的一台主机进行ping测试：
- en: '[PRE6]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When the server starts, it configures the first available TAP interface with
    the IP address `192.168.99.1`. After that, the server listens on the UDP port
    1194 for incoming connections, which serves as an OpenVPN default.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器启动时，它会配置第一个可用的TAP接口，并分配IP地址`192.168.99.1`。之后，服务器会在UDP端口1194上监听传入的连接，这是OpenVPN的默认端口。
- en: The client connects to the server on this port. After the initial TLS handshake
    using both the client and server certificates, the client is assigned the IP address
    `192.168.99.2`. The client configures its first available TAP interface using
    this information; after this, the VPN is established.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端通过此端口连接到服务器。在初始TLS握手过程中，使用客户端和服务器证书后，客户端会被分配IP地址`192.168.99.2`。客户端使用此信息配置其第一个可用的TAP接口；之后，VPN建立连接。
- en: 'Apart from the OpenVPN configuration, this recipe also uses an `iptables` command
    to enable the client to reach Site B''s LAN without having to set up additional
    routes on Site B''s LAN gateway. The following command instructs the Linux kernel
    to rewrite all of the traffic coming from the subnet `192.168.99.0/24` (which
    is our OpenVPN subnet) and that is leaving the Ethernet interface `eth0`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 OpenVPN 配置，本食谱还使用 `iptables` 命令来使客户端能够访问站点 B 的局域网，而无需在站点 B 的局域网网关上设置额外的路由。以下命令指示
    Linux 内核重写所有来自子网 `192.168.99.0/24`（即我们的 OpenVPN 子网）并离开以太网接口 `eth0` 的流量：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Each of these packets has its source address rewritten so that it appears as
    if it is coming from the OpenVPN server itself instead of coming from the OpenVPN
    client. The `iptables` module keeps track of these rewritten packets so that when
    a return packet is received, the reverse is done and the packets are forwarded
    back to the OpenVPN client again. This is an easy method to enable routing to
    work, but there is a drawback when many clients are used: it would not be possible
    to distinguish traffic on Site B''s LAN if it is coming from the OpenVPN server
    itself, from client1via the VPN tunnel or from clientN via the VPN tunnel.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 每一个数据包的源地址都会被重写，以便看起来像是来自 OpenVPN 服务器本身，而不是来自 OpenVPN 客户端。`iptables` 模块会跟踪这些重写的数据包，当收到返回数据包时，会反向处理并将数据包转发回
    OpenVPN 客户端。这是一种使路由正常工作的简单方法，但当使用多个客户端时，会有一个缺点：无法区分流量是否来自 OpenVPN 服务器本身，还是来自通过
    VPN 隧道的 client1 或 clientN。
- en: There's more...
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are a few things to keep in mind when setting up a TAP-style network.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置 TAP 风格网络时，需要注意一些事项。
- en: Differences between TUN and TAP
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TUN 和 TAP 之间的区别
- en: 'The differences between this setup and the *Server-side routing* recipe of
    the previous chapter are minimal. There are a few subtle differences, however,
    which can lead to unforeseen effects if you are not aware of them:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个设置与前一章节的 *服务器端路由* 食谱的区别很小。然而，也有一些细微的差别，如果不注意，可能会导致一些意想不到的效果：
- en: When using a TAP adapter, the full Ethernet frame is encapsulated. This causes
    a slightly larger overhead.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 TAP 适配器时，整个以太网帧会被封装。这会导致稍微更大的开销。
- en: All the machines that are connected to a TAP-style network form a single broadcast
    domain. The effects of this will become clearer in the next recipe.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有连接到 TAP 风格网络的机器都形成一个单一的广播域。这个效果将在下一个食谱中变得更加清晰。
- en: If bridging is needed, a TAP-style tunnel is required.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果需要桥接，则需要 TAP 风格的隧道。
- en: Using the TCP protocol
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 TCP 协议
- en: 'In this example, we chose the UDP protocol. The configuration files in this
    recipe can be easily converted to use the TCP protocol by changing the following
    line:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们选择了 UDP 协议。本食谱中的配置文件可以通过更改以下行轻松转换为使用 TCP 协议：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Change this to:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 将其更改为：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Do this in both the client and server configuration files.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端和服务器的配置文件中都执行此操作。
- en: The UDP protocol normally gives optimal performance, but some routers and firewalls
    have problems forwarding UDP traffic. In such cases, the TCP protocol often does
    work.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: UDP 协议通常提供最佳性能，但一些路由器和防火墙在转发 UDP 流量时存在问题。在这种情况下，TCP 协议通常能正常工作。
- en: Making IP forwarding permanent
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使 IP 转发永久生效
- en: 'On most Linux systems, the proper way to permanently set up IP forwarding is
    as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数 Linux 系统上，设置 IP 转发的正确方法如下：
- en: 'Add the following line to the `/etc/sysctl.con` file:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将以下行添加到 `/etc/sysctl.conf` 文件中：
- en: '[PRE10]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Reload the `sysctl.conf` file using:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令重新加载 `sysctl.conf` 文件：
- en: '[PRE11]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: See also
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Server-side routing* recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2. 
    Client-server IP-only Networks"), *Client-server IP-only Networks*, in which a
    basic TUN-style setup is explained
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自 [第 2 章](part0025.xhtml#aid-NQU21 "第 2 章 客户端-服务器 IP-only 网络") 的 *服务器端路由* 食谱，解释了一个基本的
    TUN 风格的设置。
- en: Enabling client-to-client traffic
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用客户端到客户端的流量
- en: This recipe is a continuation of the previous recipe. It will demonstrate how
    to set up a TAP-based connection in client or server mode using certificates.
    Using the `client-to-client` directive, it will also enable different OpenVPN
    clients to contact each other. For TAP-based networks, this leads to some important
    side effects.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱是前一个食谱的延续。它将演示如何使用证书在客户端或服务器模式下设置基于 TAP 的连接。通过使用 `client-to-client` 指令，它还将使不同的
    OpenVPN 客户端能够相互联系。对于基于 TAP 的网络，这会产生一些重要的副作用。
- en: Getting ready
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We use the following network layout:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下网络布局：
- en: '![Getting ready](img/image00354.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00354.jpeg)'
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[第 2 章](part0025.xhtml#aid-NQU21 "第 2 章. 客户端-服务器 IP-only 网络")中的第一个方案设置客户端和服务器证书，*客户端-服务器
    IP-only 网络*。
- en: For this recipe, the server was running CentOS 6 Linux and OpenVPN 2.3.10; both
    clients were running Windows 7 64 bit and OpenVPN 2.3.10\. For the server, keep
    the configuration file `example3-1-server.conf` from the previous recipe at hand.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个方案，服务器运行 CentOS 6 Linux 和 OpenVPN 2.3.10；两个客户端都运行 Windows 7 64 位和 OpenVPN
    2.3.10。对于服务器，请保留上一方案中的配置文件 `example3-1-server.conf`。
- en: How to do it...
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the server configuration file by adding a line to the `example3-1-server.conf`
    file:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过向 `example3-1-server.conf` 文件添加一行来创建服务器配置文件：
- en: '[PRE12]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Save it as `example-3-2-server.conf`.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其保存为 `example-3-2-server.conf`。
- en: 'Start the server:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE13]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Set up IP forwarding and an `iptables` masquerading rule:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置 IP 转发和 `iptables` 伪装规则：
- en: '[PRE14]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, create the client configuration file for the first client:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建第一个客户端的配置文件：
- en: '[PRE15]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Save it as `example-3-2-client1.ovpn`.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其保存为 `example-3-2-client1.ovpn`。
- en: 'Similarly, for the second client, create the configuration file:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样地，为第二个客户端创建配置文件：
- en: '[PRE16]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Save it as `example-3-2-client2.ovpn`.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其保存为 `example-3-2-client2.ovpn`。
- en: 'Start the Windows clients, one from the command line:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Windows 客户端，一个通过命令行：
- en: '[PRE17]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Start Client2 using the OpenVPN GUI:'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 OpenVPN GUI 启动 Client2：
- en: '![How to do it...](img/image00355.jpeg)'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00355.jpeg)'
- en: 'As the private key file `client2.key` is protected using a passphrase, we will
    be prompted for it:'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于私钥文件 `client2.key` 使用密码短语保护，因此会提示输入密码：
- en: '![How to do it...](img/image00356.jpeg)'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00356.jpeg)'
- en: After the connection is established, the GUI window will disappear and a balloon
    will pop up:![How to do it...](img/image00357.jpeg)
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接建立后，GUI 窗口会消失并弹出气泡：![如何操作...](img/image00357.jpeg)
- en: 'We can now verify that the VPN connection is working by doing this. First,
    ping the server:'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们可以通过以下方法验证 VPN 连接是否正常工作。首先，ping 通服务器：
- en: '[PRE18]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then, ping the second client:'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，ping 通第二个客户端：
- en: '[PRE19]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Notice the higher round-trip time.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意较高的往返时间。
- en: 'Finally, verify that we can still ping a host on the server-side LAN:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，验证我们是否仍然能够 ping 通服务器端局域网的主机：
- en: '[PRE20]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何运作...
- en: 'Both clients connect to the OpenVPN server in the regular manner. The following
    directive is all that is needed for the clients to see each other:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 两个客户端以常规方式连接到 OpenVPN 服务器。为了让客户端彼此看到，只需要以下指令：
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Communication between the clients will still pass through the OpenVPN server,
    which explains the higher round-trip time for the ICMP packets. The flow of an
    ICMP (`ping`) echo and reply is as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端之间的通信仍然会通过 OpenVPN 服务器，这解释了 ICMP 数据包的较高往返时间。ICMP（`ping`）回显和回复的流向如下：
- en: The OpenVPN client encrypts the packet and forwards it to the server over a
    secure link.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: OpenVPN 客户端加密数据包并通过安全链接将其转发到服务器。
- en: The server decrypts the packet and determines that the packet needs to be forwarded
    to another OpenVPN client. Therefore, the packet is not forwarded to the kernel-routing
    modules, but is encrypted again and is forwarded to the second client.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器解密数据包，并确定该数据包需要转发给另一个 OpenVPN 客户端。因此，数据包不会转发到内核路由模块，而是再次加密并转发给第二个客户端。
- en: The second client receives the packet, decrypts it, and sends a reply back to
    the server over the secure link.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个客户端接收到数据包，解密它，并通过安全链接发送回复回服务器。
- en: The server decrypts the reply packet and determines that the packet needs to
    be forwarded to the first client. Therefore, the packet is not forwarded to the
    kernel-routing modules but is encrypted again and is forwarded to the original
    client.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器解密回复数据包，并确定该数据包需要转发给第一个客户端。因此，数据包不会转发到内核路由模块，而是再次加密并转发给原始客户端。
- en: There's more...
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: As always, there are some caveats to watch out for.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，需要注意一些警告。
- en: Broadcast traffic may affect scalability
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 广播流量可能会影响可扩展性
- en: All machines that are connected to a TAP-style network form a single broadcast
    domain. When `client-to-client` is enabled, this means that all of the broadcast
    traffic from all the clients is forwarded to all other clients. Wireshark running
    on `client2` indeed shows a lot of broadcast packets from `client1`, all of which
    passed through the OpenVPN server. This can lead to a scalability problem when
    a large number of clients are connected.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 所有连接到 TAP 类型网络的机器都形成一个单一的广播域。当启用 `client-to-client` 时，这意味着所有客户端的广播流量都会转发到所有其他客户端。Wireshark
    在 `client2` 上运行时，确实显示了大量来自 `client1` 的广播数据包，所有这些数据包都通过 OpenVPN 服务器。这可能导致当连接大量客户端时，出现可扩展性问题。
- en: Filtering traffic
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 过滤流量
- en: In the current version of OpenVPN, it is not possible to filter the traffic
    between VPN clients when the `client-to-client` directive is used. OpenVPN does
    have the capability for a filtering plugin, but this plugin is not maintained
    and requires extensive configuration.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前版本的 OpenVPN 中，当使用 `client-to-client` 指令时，无法过滤 VPN 客户端之间的流量。OpenVPN 确实支持过滤插件，但该插件未维护，并且需要进行大量配置。
- en: 'A second method of filtering traffic between clients is to use the system''s
    routing tables, in combination with a Linux kernel flag, `proxy_arp_pvlan`. This
    flag is available in modern Linux kernels (2.6.34+ or kernels with back-ported
    options). This flag instructs the Linux kernel to resend the ARP request back
    out of the same interface from where it came. It is exactly this flag that is
    needed for client-to-client traffic to work without using the `client-to-client`
    directive. Thus, in order to filter traffic, we first enable client-to-client
    traffic in tap mode by setting this flag:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种过滤客户端之间流量的方法是使用系统的路由表，并结合 Linux 内核标志 `proxy_arp_pvlan`。这个标志在现代 Linux 内核中可用（2.6.34+
    或者带有回溯选项的内核）。这个标志指示 Linux 内核将 ARP 请求从原接口重新发送回来。正是这个标志使得客户端之间的流量能够在不使用 `client-to-client`
    指令的情况下正常工作。因此，为了过滤流量，我们首先通过设置这个标志来启用 TAP 模式下的客户端间流量：
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We can then use `iptables` command to filter traffic between clients.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用 `iptables` 命令过滤客户端之间的流量。
- en: TUN-style networks
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TUN 类型网络
- en: The `client-to-client` directive can also be used in TUN-style networks. It
    works in exactly the same manner as in this recipe, except that the OpenVPN clients
    do not form a single broadcast domain.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`client-to-client` 指令也可以在 TUN 类型网络中使用。它的工作方式与本示例完全相同，不同之处在于 OpenVPN 客户端并不形成一个单一的广播域。'
- en: Bridging - Linux
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 桥接 - Linux
- en: This recipe will demonstrate how to set up a bridged OpenVPN server. In this
    mode, the local network and the VPN network are bridged, which means that all
    of the traffic from one network is forwarded to the other and vice versa.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例将演示如何设置一个桥接的 OpenVPN 服务器。在这种模式下，本地网络和 VPN 网络被桥接，这意味着一个网络的所有流量都会转发到另一个网络，反之亦然。
- en: This setup is often used to securely connect remote clients to a Windows-based
    LAN, but it is quite hard to get it right. In almost all cases, it suffices to
    use a TUN-style network with a local WINS server on the OpenVPN server itself.
    A bridged VPN does have its advantages, as will become apparent in the next few
    recipes.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这种设置通常用于安全地将远程客户端连接到基于 Windows 的局域网，但要正确配置它相当困难。在几乎所有情况下，使用带有本地 WINS 服务器的 TUN
    类型网络即可满足需求，而无需使用桥接的 VPN。桥接的 VPN 确实有其优势，这将在接下来的几个示例中显现出来。
- en: 'However, there are also disadvantages to using bridging, especially in terms
    of performance: the performance of a bridged 100 Mbps Ethernet adapter is about
    half the performance of a non-bridged adapter.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用桥接也有一些缺点，特别是在性能方面：桥接的 100 Mbps 以太网适配器性能大约是非桥接适配器的一半。
- en: Getting ready
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We use the following network layout:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下网络布局：
- en: '![Getting ready](img/image00358.jpeg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00358.jpeg)'
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only networks*. For this recipe, the server was running CentOS 6 Linux and
    OpenVPN 2.3.10\. The client computer was running Windows 7 64 bit and OpenVPN
    2.3.10\. For the client, keep the client configuration file `example3-2-client2.ovpn`
    at hand.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [第 2 章](part0025.xhtml#aid-NQU21 "第 2 章 客户端-服务器 IP-only 网络") 中的第一个示例，设置客户端和服务器证书，*客户端-服务器
    IP-only 网络*。对于这个示例，服务器运行 CentOS 6 Linux 和 OpenVPN 2.3.10，客户端计算机运行 Windows 7 64
    位和 OpenVPN 2.3.10。对于客户端，请将客户端配置文件 `example3-2-client2.ovpn` 保存在手边。
- en: How to do it...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the server configuration file:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建服务器配置文件：
- en: '[PRE23]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Save it as `example-3-3-server.conf`.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其保存为 `example-3-3-server.conf`。
- en: 'Next, create a script to start the network bridge:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个脚本来启动网络桥接：
- en: '[PRE24]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Save this script as `example3-3-bridge-start` file.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将此脚本保存为`example3-3-bridge-start`文件。
- en: 'Similarly, use a script to stop the Ethernet bridge:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，使用脚本停止以太网桥接：
- en: '[PRE25]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Save this script as `example3-3-bridge-stop` file. These scripts are based on
    the `bridge-start` and `bridge-stop` examples, which are part of the OpenVPN distribution.
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将此脚本保存为`example3-3-bridge-stop`文件。这些脚本基于`bridge-start`和`bridge-stop`示例，后者是 OpenVPN
    配发的一部分。
- en: 'Create the network bridge and verify that it is working:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建网络桥接并验证它是否正常工作：
- en: '[PRE26]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Start the OpenVPN server:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 OpenVPN 服务器：
- en: '[PRE27]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Start the client:![How to do it...](img/image00359.jpeg)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动客户端：![如何操作...](img/image00359.jpeg)
- en: 'Check the assigned VPN address:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查分配的 VPN 地址：
- en: '[PRE28]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, verify that we can ping a machine on the remote server LAN:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，验证我们是否能 ping 通远程服务器局域网中的一台机器：
- en: '[PRE29]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Remember to tear down the network bridge after stopping the OpenVPN server:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止 OpenVPN 服务器后，请记得拆除网络桥接：
- en: '[PRE30]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works...
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `bridge-start` script forges a bond between two network adapters: on the
    one side, the LAN adapter `eth0`, and on the other side, the VPN adapter `tap0`.
    The main property of a network bridge is that all of the traffic is copied from
    one side to the other and vice versa. This allows us to set up a VPN where the
    client almost truly becomes a part of the server-side LAN.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`bridge-start`脚本为两个网络适配器建立了连接：一侧是局域网适配器`eth0`，另一侧是 VPN 适配器`tap0`。网络桥接的主要特性是所有流量都会从一侧复制到另一侧，反之亦然。这使我们能够设置一个几乎让客户端真正成为服务器端局域网一部分的
    VPN。'
- en: 'The downside of a bridged network is the increased overhead and the performance
    penalty on the OpenVPN server itself: if there is a lot of broadcast traffic from
    many clients on either side, the bridge can become overloaded.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 桥接网络的缺点是增加了开销，并且对 OpenVPN 服务器本身造成性能损失：如果来自任一端的客户端有大量广播流量，桥接可能会变得过载。
- en: There's more...
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Fixed addresses and the default gateway
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 固定地址和默认网关
- en: In this recipe, the OpenVPN server is assigned a fixed address on the server
    LAN, as is done most often for a bridged interface. The difficulty with assigning
    a dynamic address to a network bridge is that it is not clear from which network
    the dynamic address should be chosen. This also enables us to specify a fixed
    server-bridge address in the server configuration file.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，OpenVPN 服务器被分配了一个固定的服务器局域网地址，这通常是为桥接接口设置的做法。给网络桥接分配动态地址的问题是，无法清楚地确定动态地址应该从哪个网络中选择。这也使我们能够在服务器配置文件中指定一个固定的服务器桥接地址。
- en: When using bridges, it is also important to check that the default route is
    available after the bridge is started. In most setups, `eth0` is assigned a dynamic
    address, including a default gateway. When the `bridge-start` script is executed, `br0`
    is assigned a fixed address, but as a side effect, the default gateway is often
    lost.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 使用桥接时，检查桥接启动后默认路由是否可用也很重要。在大多数设置中，`eth0`会被分配一个动态地址，包括默认网关。当执行`bridge-start`脚本时，`br0`会被分配一个固定地址，但作为副作用，默认网关通常会丢失。
- en: Name resolution
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 名称解析
- en: One of the difficulties in setting up a bridged network in the proper fashion
    is related to name resolution. OpenVPN only does Ethernet (Layer2) or IP-based
    routing. Setting up a proper name resolution system (for example, a Domain Controller
    and/or a WINS server in a Windows network) can be tricky in a bridged environment
    as well.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 设置桥接网络时的一个难点是与名称解析有关。OpenVPN 只支持以太网（Layer2）或基于 IP 的路由。在桥接环境中，设置一个适当的名称解析系统（例如，Windows
    网络中的域控制器和/或 WINS 服务器）可能也会非常棘手。
- en: See also
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The next recipe in this chapter, in which bridging on a Windows server is explained
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的下一个配方，解释了如何在 Windows 服务器上设置桥接。
- en: Bridging- Windows
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 桥接 - Windows
- en: This recipe will demonstrate how to set up a bridged OpenVPN server on Windows.
    Bridging on Windows is slightly different from Linux or UNIX, but the concept
    is the same.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方将演示如何在 Windows 上设置桥接 OpenVPN 服务器。Windows 上的桥接与 Linux 或 UNIX 略有不同，但概念是一样的。
- en: This recipe is very similar to the previous recipe, apart from the different
    methods used to set up bridging.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方与前一个配方非常相似，唯一不同的是设置桥接的方法。
- en: Getting ready
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only networks*.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[第2章](part0025.xhtml#aid-NQU21 "第2章：客户端-服务器 IP-only 网络")中的第一个配方设置客户端和服务器证书，*客户端-服务器
    IP-only 网络*。
- en: For this recipe, the server computer was running Windows 7 64 bit and OpenVPN
    2.3.10\. The client computer was running Fedora 20 Linux and OpenVPN 2.3.10\.
    For the Linux client, keep the client configuration file `example3-1-client.conf`
    at hand.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，服务器计算机运行的是Windows 7 64位系统和OpenVPN 2.3.10版本。客户端计算机运行的是Fedora 20 Linux和OpenVPN
    2.3.10版本。对于Linux客户端，保持客户端配置文件`example3-1-client.conf`在手。
- en: 'We use the following network layout:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下网络布局：
- en: '![Getting ready](img/image00360.jpeg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00360.jpeg)'
- en: How to do it...
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the server configuration file:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建服务器配置文件：
- en: '[PRE31]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Save it as `example-3-4-server.conf`.
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其保存为`example-3-4-server.conf`。
- en: 'Next, create the network bridge:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建网络桥接：
- en: Go to **Network and Sharing Center** and **Change adapter settings**.
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进入**网络和共享中心**，然后选择**更改适配器设置**。
- en: Rename the `TAP-Win` adapter as `tapbridge` by right-clicking on it and selecting **Rename**.
    On the test computer used, the Ethernet adapter connected to the LAN was renamed
    to `eth0`.
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过右键点击`TAP-Win`适配器并选择**重命名**，将其重命名为`tapbridge`。在所使用的测试计算机上，连接到局域网的以太网适配器被重命名为`eth0`。
- en: Select the two adapters that need to be bridged by pressing the *Ctrl* key and
    clicking on each adapter, then right-clicking and selecting **Bridge Connections**:![How
    to do it...](img/image00361.jpeg)
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过按住*Ctrl*键并点击每个适配器来选择需要桥接的两个适配器，然后右键点击并选择**桥接连接**：![如何操作...](img/image00361.jpeg)
- en: This will create a new bridge adapter icon in the control panel, usually named **Network
    Bridge (...)**.
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将会在控制面板中创建一个新的桥接适配器图标，通常命名为**网络桥接（...）**。
- en: The network bridge is now ready to be configured:![How to do it...](img/image00362.jpeg)
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网络桥接现在已准备好进行配置：![如何操作...](img/image00362.jpeg)
- en: 'In a command window, verify that the bridge is configured correctly:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令窗口中，验证桥接是否正确配置：
- en: '[PRE32]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Start the OpenVPN server:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动OpenVPN服务器：
- en: '[PRE33]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The Windows firewall will pop up a security warning. Allow OpenVPN access to
    the VPN:![How to do it...](img/image00363.jpeg)
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Windows防火墙会弹出一个安全警告。允许OpenVPN访问VPN：![如何操作...](img/image00363.jpeg)
- en: 'Start the client:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动客户端：
- en: '[PRE34]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now, check the assigned VPN address and verify that we can ping a machine on
    the remote server LAN:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，检查分配的VPN地址，并验证我们是否能ping通远程服务器局域网中的一台计算机：
- en: '[PRE35]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: How it works...
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Apart from the way the bridge is created and configured, this recipe is very
    similar to the previous one. The one thing to keep in mind is how the adapter
    is selected in the server configuration file:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 除了创建和配置桥接的方式外，这个配方与之前的配方非常相似。唯一需要记住的是如何在服务器配置文件中选择适配器：
- en: '[PRE36]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'On Linux and other UNIX variants, this could be achieved using a single line:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux和其他UNIX变种上，可以通过一行命令来实现：
- en: '[PRE37]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: But the naming scheme for the TAP adapters on Windows is different. To overcome
    this, the `dev-node` directive needs to be added.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 但Windows上TAP适配器的命名规则不同。为了解决这个问题，需要添加`dev-node`指令。
- en: See also
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见：
- en: The previous recipe, where bridging on Linux is explained
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 之前的配方中，已经解释了如何在Linux上进行桥接。
- en: Checking broadcast and non-IP traffic
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查广播和非IP流量
- en: The main reason for a bridged setup is to create a single broadcast domain for
    all the clients connected, both via the VPN and via a regular network connection.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 桥接设置的主要目的是为所有连接的客户端创建一个单一的广播域，无论是通过VPN还是通过常规网络连接。
- en: Another reason is the ability to route or forward non-IP based traffic, such
    as the older Novell IPX and Appletalk protocols.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个原因是能够路由或转发基于非IP的流量，例如较旧的Novell IPX和Appletalk协议。
- en: This recipe focuses on the use of tools such as `tcpdump` and `wireshark` to
    detect whether the broadcast domain is functioning and if non-IP traffic is flowing
    in the correct manner.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方重点介绍了如何使用`tcpdump`和`wireshark`等工具来检测广播域是否正常工作，以及非IP流量是否以正确的方式流动。
- en: Getting ready
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'For this recipe, we use the setup from the *Bridging - Linux* recipe of this
    chapter. We use the following network layout:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们使用的是本章*桥接 - Linux*配方中的设置。我们使用以下网络布局：
- en: '![Getting ready](img/image00364.jpeg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00364.jpeg)'
- en: For this recipe, the server computer was running CentOS 6 Linux and OpenVPN
    2.3.9\. For the server, keep the server configuration file `example3-3-server.conf`
    from the *Bridging - Linux* recipe ready. The first client computer was running
    Windows 7 64 bit and OpenVPN 2.3.10 and was in the same LAN segment as the OpenVPN
    server. The second client was running Windows XP and OpenVPN 2.1.1\. For this
    client, keep the client configuration file `example3-2-client2.ovpn` from the *Enabling
    client-to-client traffic* recipe at hand.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，服务器计算机运行的是CentOS 6 Linux和OpenVPN 2.3.9。对于服务器，保持服务器配置文件`example3-3-server.conf`来自*桥接
    - Linux*配方准备好。第一台客户端计算机运行的是Windows 7 64位和OpenVPN 2.3.10，并且与OpenVPN服务器处于同一局域网段。第二台客户端运行的是Windows
    XP和OpenVPN 2.1.1。对于这个客户端，保持客户端配置文件`example3-2-client2.ovpn`来自*启用客户端到客户端流量*配方。
- en: Make sure that the AppleTalk and IPX protocols are installed on both the Windows
    machines. Bind the protocols to the Local Area Network adapters (this is the default
    setting).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 确保Windows机器上已安装AppleTalk和IPX协议。将这些协议绑定到局域网适配器（这是默认设置）。
- en: How to do it...
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the network bridge and verify that it is working:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建网络桥接并验证它是否工作：
- en: '[PRE38]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Start the OpenVPN server:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动OpenVPN服务器：
- en: '[PRE39]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Start the OpenVPN clients:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动OpenVPN客户端：
- en: '[PRE40]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Start Client 2 using the OpenVPN GUI:'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用OpenVPN GUI启动客户端2：
- en: '![How to do it...](img/image00365.jpeg)'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00365.jpeg)'
- en: In this recipe, the Windows 7 client was assigned `192.168.4.64`. The Windows
    XP client was assigned `192.168.4.128`.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个配方中，Windows 7客户端被分配了`192.168.4.64`。Windows XP客户端被分配了`192.168.4.128`。
- en: After the client has successfully connected, we first check for ARP messages.
    On the server, run the `tcpdump` command and listen for traffic on the bridge
    interface `br0`:![How to do it...](img/image00366.jpeg)
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端成功连接后，我们首先检查ARP消息。在服务器上运行`tcpdump`命令并监听桥接接口`br0`上的流量：![如何操作...](img/image00366.jpeg)
- en: In this output, `192.168.4.254` is the address of the server-side gateway. So
    the gateway is asking for ARP information and the ARP replies are coming from
    both the OpenVPN server and the OpenVPN client itself. This can only happen if
    the ARP request is forwarded over the bridge to the OpenVPN client.
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个输出中，`192.168.4.254`是服务器端网关的地址。因此，网关正在请求ARP信息，而ARP回复来自OpenVPN服务器和OpenVPN客户端本身。只有在ARP请求通过桥接转发到OpenVPN客户端时，才会发生这种情况。
- en: Next, on the Windows 7 client, check for the broadcast traffic coming from the
    Windows XP client. For this, we use Wireshark. Wireshark is available for both
    Linux and Windows. Configure it to capture all of the traffic from the Ethernet
    adapter. Here's an example of it:![How to do it...](img/image00367.jpeg)
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在Windows 7客户端上，检查来自Windows XP客户端的广播流量。为此，我们使用Wireshark。Wireshark适用于Linux和Windows。将其配置为捕获来自以太网适配器的所有流量。以下是一个示例：![如何操作...](img/image00367.jpeg)
- en: In this output, we see a lot of Netbios broadcast traffic when the OpenVPN client
    first connects to the network.
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个输出中，我们看到很多Netbios广播流量，当OpenVPN客户端首次连接到网络时。
- en: As a final example, we look for IPX traffic:![How to do it...](img/image00368.jpeg)
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为最终示例，我们查看IPX流量：![如何操作...](img/image00368.jpeg)
- en: This shows that non-IP traffic is also forwarded over the bridge.
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这表明非IP流量也会通过桥接转发。
- en: How it works...
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: All of the traffic that is forwarded over the bridge is intercepted by programs
    such as Wireshark. By filtering for certain types of traffic, it is easy to show
    that in a bridged setup, traffic from the OpenVPN clients is indeed flowing over
    the server-side LAN. This is very important when troubleshooting an almost-working
    setup.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 所有通过桥接转发的流量都会被Wireshark等程序拦截。通过过滤特定类型的流量，很容易证明，在桥接设置中，来自OpenVPN客户端的流量确实是通过服务器端的局域网传输的。这在排查几乎完成的设置时非常重要。
- en: An external DHCP server
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个外部DHCP服务器
- en: In this recipe, we will configure a bridged OpenVPN server so that it uses an
    external DHCP server to assign addresses to the OpenVPN clients to further increase
    the integration of remote clients with the clients already present on the server-side
    LAN.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将配置一个桥接的OpenVPN服务器，使其使用外部DHCP服务器为OpenVPN客户端分配地址，从而进一步增强远程客户端与服务器端局域网中现有客户端的集成。
- en: Getting ready
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We use the following network layout:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下网络布局：
- en: '![Getting ready](img/image00369.jpeg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00369.jpeg)'
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.10\. The client was running Windows 7 64 bit and OpenVPN 2.3.10\.
    For this client, keep the client configuration file `example3-2-client2.ovpn` from
    the *Enabling client-to-client traffic* recipe at hand.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[第2章](part0025.xhtml#aid-NQU21 "第2章。客户端-服务器仅IP网络")中的第一个配方，*客户端-服务器仅IP网络*，设置客户端和服务器证书。对于这个配方，服务器计算机运行的是
    CentOS 6 Linux 和 OpenVPN 2.3.10。客户端运行的是 Windows 7 64 位和 OpenVPN 2.3.10。对于这个客户端，保留客户端配置文件`example3-2-client2.ovpn`，并参考*启用客户端到客户端流量*配方。
- en: How to do it...
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the server configuration file:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建服务器配置文件：
- en: '[PRE41]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Save it as `example3-6-server.conf`.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存为 `example3-6-server.conf`。
- en: 'Start the server:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE42]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Start the Windows client:![How to do it...](img/image00370.jpeg)
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Windows 客户端：![如何操作...](img/image00370.jpeg)
- en: 'After the VPN connection is established, verify the IP address and the routing
    tables:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: VPN 连接建立后，验证 IP 地址和路由表：
- en: '[PRE43]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'And finally, check that we can reach other hosts in the server-side LAN:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，检查我们是否能访问服务器端 LAN 中的其他主机：
- en: '[PRE44]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: How it works...
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Here is the server directive:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 这是服务器指令：
- en: '[PRE45]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Without any parameters, this directive instructs OpenVPN to not allocate a pool
    of IP addresses for the clients. So, all of the incoming DHCP requests from the
    clients are forwarded out over the bridge. The DHCP server on the server-side
    LAN then replies with an IP address.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有任何参数，该指令会指示 OpenVPN 不为客户端分配一个 IP 地址池。所以，所有来自客户端的 DHCP 请求都会通过桥接转发。然后，服务器端局域网中的
    DHCP 服务器会返回一个 IP 地址。
- en: The tricky part here is that the DHCP server almost always also returns a default
    gateway, which will be the LAN gateway. If a remote client sets its default gateway
    to the gateway of the LAN, funny things will happen, as in most cases the direct
    route to the OpenVPN server will be lost.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的难点是，DHCP 服务器几乎总是会返回默认网关，而默认网关通常是 LAN 网关。如果远程客户端将其默认网关设置为 LAN 的网关，就会发生一些奇怪的事情，因为在大多数情况下，直接到
    OpenVPN 服务器的路由会丢失。
- en: 'The following directive instructs the OpenVPN client to add an explicit default
    route via the `net_gateway`, which is always the LAN gateway at the client side:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 以下指令指示 OpenVPN 客户端通过 `net_gateway` 添加一个显式默认路由，该路由始终是客户端侧的 LAN 网关：
- en: '[PRE46]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: For Windows clients, this trick works and the default gateway remains intact.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows 客户端，这个技巧是有效的，默认网关保持不变。
- en: For Linux clients, it is easier to tweak the `dhclient` and `network-scripts`
    settings. However, this is distribution-dependent.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Linux 客户端，调整 `dhclient` 和 `network-scripts` 设置更加容易。但这取决于具体的发行版。
- en: With the default gateway intact, the OpenVPN client is properly assigned an
    address from the DHCP server on the server side.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在保持默认网关不变的情况下，OpenVPN 客户端将从服务器端的 DHCP 服务器正确地分配到一个地址。
- en: There's more...
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: When using an external DHCP setup, keep in mind the following.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 使用外部 DHCP 设置时，请注意以下事项。
- en: DHCP server configuration
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DHCP 服务器配置
- en: The proper solution is to configure the DHCP server such that DHCP requests
    from the VPN clients do not get a default gateway assigned. This adds a burden
    to the administration of the server-side DHCP server.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 正确的解决方案是配置 DHCP 服务器，使 VPN 客户端的 DHCP 请求不会分配默认网关。这将增加服务器端 DHCP 服务器的管理负担。
- en: 'In this case, it also makes sense to explicitly set a unique MAC address in
    each client configuration file using the following, for example:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，使用以下示例，通过客户端配置文件明确设置唯一的 MAC 地址是有意义的：
- en: '[PRE47]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: On Linux, the MAC address is computed randomly when the TAP interface comes
    up, so each time the OpenVPN client is stopped and started, a new IP address is
    allocated. It is also possible to create a permanently fixed, static MAC address
    by using the system configuration scripts to bring up the TAP device before OpenVPN
    is started.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上，当 TAP 接口启动时，MAC 地址会随机计算，因此每次停止并重新启动 OpenVPN 客户端时，都会分配一个新的 IP 地址。也可以通过在启动
    OpenVPN 之前使用系统配置脚本启动 TAP 设备，从而创建一个永久固定的静态 MAC 地址。
- en: DHCP relay
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DHCP 转发
- en: 'It is also possible to use an external DHCP server without using bridging.
    If the TAP adapter is configured before OpenVPN is started and the server configuration
    file from this recipe is used, then an external DHCP server can be used using
    the Linux `dhrelay` command:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以在不使用桥接的情况下使用外部 DHCP 服务器。如果在启动 OpenVPN 之前配置了 TAP 适配器，并使用此配方中的服务器配置文件，则可以使用
    Linux `dhrelay` 命令来使用外部 DHCP 服务器：
- en: '[PRE48]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Make sure to list both the TAP adapter and the Ethernet adapter to which the
    external DHCP server is connected. By combining this with a `proxy-arp` script
    (see the  *Proxy ARP* recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2. 
    Client-server IP-only Networks"), *Client-server IP-only Networks*), it eliminates
    the need to use bridging in most cases.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 确保列出TAP适配器和外部DHCP服务器连接的以太网适配器。结合`proxy-arp`脚本（参见[第2章](part0025.xhtml#aid-NQU21
    "第2章. 客户端-服务器仅IP网络")，*客户端-服务器仅IP网络*），可以在大多数情况下避免使用桥接。
- en: Tweaking /etc/sysconfig/network-scripts
  id: totrans-261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调整/etc/sysconfig/network-scripts
- en: 'On RedHat, Fedora, and OpenSuSE-based systems, the TAP adapter is brought up
    using a script `/etc/sysconfig/network-scripts/ifup-tap0` and the following command:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于RedHat、Fedora和OpenSuSE的系统中，TAP适配器通过脚本`/etc/sysconfig/network-scripts/ifup-tap0`和以下命令启动：
- en: '[PRE49]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'By adding the line to the `/etc/sysconfig/network-scripts/ifup-tap0` file,
    the `dhclient` script ignores the gateway that is assigned from the DHCP server:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向`/etc/sysconfig/network-scripts/ifup-tap0`文件中添加这一行，`dhclient`脚本会忽略从DHCP服务器分配的网关：
- en: '[PRE50]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: A similar hack can be developed for Debian/Ubuntu-based systems.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 一个类似的黑客可以为基于Debian/Ubuntu的系统开发。
- en: Using the status file
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用状态文件
- en: OpenVPN offers several options to monitor the clients connected to a server.
    The most commonly used method is using a status file. This recipe will show how
    to use and read the OpenVPN status file. We will also focus on some subtleties
    of the status file in a TAP-style setup.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVPN提供了几种监控连接到服务器的客户端的方法。最常用的方法是使用状态文件。本配方将展示如何使用和读取OpenVPN状态文件。我们还将重点介绍在TAP样式设置中的一些状态文件的细节。
- en: Getting ready
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.10\. The first client was running Fedora 20 Linux and OpenVPN
    2.3.10\. The second client was running Windows 7 64 bit and OpenVPN 2.3.10\. For
    the Linux client, keep the client configuration file `example3-1-client.conf`
    at hand. For the Windows client, keep the client configuration file `example3-2-client2.ovpn`
    at hand.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[第2章](part0025.xhtml#aid-NQU21 "第2章. 客户端-服务器仅IP网络")的第一个配方设置客户端和服务器证书，*客户端-服务器仅IP网络*。在这个配方中，服务器计算机运行的是CentOS
    6 Linux和OpenVPN 2.3.10。第一个客户端运行的是Fedora 20 Linux和OpenVPN 2.3.10。第二个客户端运行的是Windows
    7 64位和OpenVPN 2.3.10。对于Linux客户端，请随时准备好客户端配置文件`example3-1-client.conf`。对于Windows客户端，请随时准备好客户端配置文件`example3-2-client2.ovpn`。
- en: How to do it...
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the server configuration file by adding a line to the `example3-1-server.conf.`
    file:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`example3-1-server.conf`文件中添加一行，创建服务器配置文件：
- en: '[PRE51]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Save it as `example3-7-server.conf`.
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其保存为`example3-7-server.conf`。
- en: 'Start the server:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE52]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'First, start the Linux client using the configuration file from the earlier
    recipe and ping a host on the remote network:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，使用早前配方中的配置文件启动Linux客户端，并ping一个远程网络中的主机：
- en: '[PRE53]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'After the VPN is established, list the contents of the `openvpn.status` file
    (as user root):'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VPN建立后，列出`openvpn.status`文件的内容（以root用户身份）：
- en: '[PRE54]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Start the Windows client:![How to do it...](img/image00371.jpeg)
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Windows客户端：![如何操作...](img/image00371.jpeg)
- en: 'Ping a host on the remote network:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ping远程网络中的主机：
- en: '[PRE55]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'List the contents of the status file again on the server:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次列出服务器上状态文件的内容：
- en: '[PRE56]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: How it works...
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Each time a client connects to the OpenVPN server, the status file is updated
    with the connection information. The **OPENVPN ** **CLIENT** **LIST** and **ROUTING **
    **TABLE** tables are the most interesting tables, as they show the following:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 每次客户端连接到OpenVPN服务器时，状态文件会更新连接信息。**OPENVPN CLIENT LIST**和**ROUTING TABLE**表格是最为重要的表格，它们显示了以下内容：
- en: Which clients are connected
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪些客户端已连接
- en: From which IP address the clients are connecting
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端连接的IP地址
- en: The number of bytes each client has received and transferred
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个客户端接收和传输的字节数
- en: The time at which the client connected
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端连接的时间
- en: The routing table also shows which networks are routed to each client. This
    routing table is filled when clients start sending traffic that needs to be routed.
    The `ping` commands in the recipe were used to trigger the routing table entries.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 路由表还显示了每个客户端路由到的网络。只有当客户端开始发送需要路由的流量时，这个路由表才会被填充。配方中的`ping`命令被用来触发路由表项。
- en: There's more...
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'When comparing this example with a TUN-style setup there are many similarities
    but also some differences:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 当将此示例与 TUN 风格的设置进行比较时，存在许多相似之处，但也有一些区别：
- en: Difference with TUN-style networks
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与 TUN 风格网络的区别
- en: 'The major difference in the status file when using a TAP-style network compared
    to a TUN-style network (see the *Using the status file* recipe from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*)
    is in the **ROUTING ** **TABLE**. The recipe from the previous chapter shows this:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 TAP 风格网络与 TUN 风格网络相比，状态文件的主要区别（请参见来自 [第 2 章](part0025.xhtml#aid-NQU21 "第
    2 章 客户端-服务器仅 IP 网络") 的 *使用状态文件* 配方，*客户端-服务器仅 IP 网络*）在于 **路由 表**。上一章的配方展示了这一点：
- en: '[PRE57]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Whereas, in this recipe, we see the following:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们看到以下内容：
- en: '[PRE58]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The address `5e:52:73:5c:6a:ce` is the randomly chosen MAC address of the tap
    adapter on the `client1` machine.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 地址 `5e:52:73:5c:6a:ce` 是 `client1` 机器上 tap 适配器的随机选择的 MAC 地址。
- en: Disconnecting clients
  id: totrans-301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 断开客户端连接
- en: 'Note that when a client disconnects, the status file is not updated immediately.
    OpenVPN first tries to reconnect to the client based on the `keepalive` parameters
    in the server configuration file. The server configuration file in this recipe
    uses this:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当客户端断开连接时，状态文件不会立即更新。OpenVPN 首先尝试根据服务器配置文件中的 `keepalive` 参数重新连接客户端。本教程中的服务器配置文件使用了以下设置：
- en: '[PRE59]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'This tells the server that it will ping the client every 10th second. The OpenVPN
    server will double the second argument: if it does not get a response after 2
    * 60 seconds, the connection is restarted. The server will also tell the client
    to ping the server every 10 seconds and to restart the connection after 60 seconds
    if it does not get any response.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉服务器它将在每第 10 秒时 ping 客户端。如果 OpenVPN 服务器在 2 * 60 秒后没有收到响应，它将重启连接。服务器还会告诉客户端每
    10 秒 ping 服务器一次，如果没有响应则在 60 秒后重启连接。
- en: If the client explicitly closes the connection using the `explicit-exit-notify`
    directive or when a TCP-based setup is used, the server does not wait for ping
    responses from the client.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 如果客户端通过 `explicit-exit-notify` 指令显式关闭连接，或者在使用基于 TCP 的设置时，服务器将不会等待客户端的 ping 响应。
- en: See also
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Using the status file* recipe from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*,
    which explains how the status file can be configured and used for IP-only style
    networks
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自 [第 2 章](part0025.xhtml#aid-NQU21 "第 2 章 客户端-服务器仅 IP 网络") 的 *使用状态文件* 配方，解释了如何配置并使用状态文件来处理仅
    IP 风格的网络。
- en: The management interface
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理接口
- en: This recipe shows how OpenVPN can be managed using the management interface
    on the server.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程展示了如何通过服务器上的管理接口来管理 OpenVPN。
- en: Getting ready
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [第 2 章](part0025.xhtml#aid-NQU21 "第 2 章 客户端-服务器仅 IP 网络") 中的第一个配方来设置客户端和服务器证书，*客户端-服务器仅
    IP 网络*。
- en: For this recipe, the server computer was running CentOS 6 Linux and OpenVPN
    2.3.10\. The first client was running Fedora 20 Linux and OpenVPN 2.3.10\. The
    second client was running Windows 7 64 bit and OpenVPN 2.3.10.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本教程，服务器计算机运行 CentOS 6 Linux 和 OpenVPN 2.3.10。第一个客户端运行 Fedora 20 Linux 和 OpenVPN
    2.3.10。第二个客户端运行 Windows 7 64 位和 OpenVPN 2.3.10。
- en: For the server, keep the configuration file `example3-1-server.conf` from the
    first recipe of this chapter at hand. For the Linux client, keep the client configuration
    file `example3-1-client.conf` from the first recipe of this chapter at hand. For
    the Windows client, keep the client configuration file `example3-2-client2.ovpn`
    from the *Enabling client-to-client traffic* recipe at hand.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 对于服务器，随时准备使用本章第一个教程中的 `example3-1-server.conf` 配置文件。对于 Linux 客户端，随时准备使用本章第一个教程中的
    `example3-1-client.conf` 配置文件。对于 Windows 客户端，随时准备使用 *启用客户端间流量* 配方中的 `example3-2-client2.ovpn`
    配置文件。
- en: 'We use the following network layout:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下网络布局：
- en: '![Getting ready](img/image00372.jpeg)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/image00372.jpeg)'
- en: How to do it...
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the server configuration file by adding a line to the `example3-1-server.conf`
    file:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过向 `example3-1-server.conf` 文件添加一行来创建服务器配置文件：
- en: '[PRE60]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Save it as `example3-8-server.conf`.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其保存为 `example3-8-server.conf`。
- en: 'Start the server:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE61]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The OpenVPN server will now first ask for a password for the management interface.
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: OpenVPN 服务器现在首先会要求输入管理接口的密码。
- en: 'Start the clients using the configuration files from the earlier recipe:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用之前菜谱中的配置文件启动客户端：
- en: '[PRE62]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Start the Windows client as well:![How to do it...](img/image00373.jpeg)
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样启动Windows客户端：![怎么做…](img/image00373.jpeg)
- en: 'After the VPN is established, we can connect from the server to the management
    interface of the OpenVPN client using the `telnet` program:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: VPN建立后，我们可以使用`telnet`程序从服务器连接到OpenVPN客户端的管理接口：
- en: '[PRE63]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Note that it looks exactly like the status file from the previous recipe.
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，它与之前菜谱中的状态文件完全相同。
- en: 'It is also possible to disconnect a client:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 也可以断开客户端连接：
- en: '[PRE64]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Use *Ctrl* + *]* or exit to exit the telnet program.
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*Ctrl* + *]* 或退出命令来退出telnet程序。
- en: How it works...
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'When the OpenVPN server starts, a special management interface is set up using
    the directive:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 当OpenVPN服务器启动时，使用以下指令设置一个特殊的管理接口：
- en: '[PRE65]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The interface is set up with these parameters:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 接口通过以下参数进行设置：
- en: The IP `127.0.0.1` to bind the management interface to localhost only.
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将IP `127.0.0.1` 绑定到管理接口，仅允许localhost连接。
- en: The port `23000` on which the management interface will be listening.
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`23000`端口，管理接口将在此端口监听。'
- en: The last parameter is the password file or the special keyword `stdin` to indicate
    that the management interface password will be specified when OpenVPN starts up.
    Note that this password is completely unrelated to the private key passphrases
    or any other user management passwords that OpenVPN uses.
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个参数是密码文件或特殊关键字`stdin`，表示在OpenVPN启动时会指定管理接口的密码。请注意，这个密码与私钥密码或OpenVPN使用的其他用户管理密码完全无关。
- en: 'After the management interface comes up, the server operator can connect to
    it using `telnet` and can query the server. By typing the following, the operator
    can disconnect a client:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 在管理接口启动后，服务器操作员可以使用`telnet`连接到该接口，并查询服务器。通过输入以下命令，操作员可以断开客户端：
- en: '[PRE66]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Note that if the OpenVPN client is configured to reconnect automatically, it
    will do so after a few minutes.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果OpenVPN客户端配置为自动重连，它将在几分钟后自动重连。
- en: When comparing the output of the management interface's `status` command with
    the status file output shown in the *Using the status file* recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*, the major difference is the fact that here, the clients' MAC
    addresses are listed instead of the VPN IP addresses. The OpenVPN does not even
    need to know the clients' IP addresses, as they can be assigned by an external
    DHCP server.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 当将管理接口的`status`命令的输出与*使用状态文件*这一菜谱中展示的状态文件输出进行比较时，[第2章](part0025.xhtml#aid-NQU21
    "第2章. 客户端-服务器仅IP网络")，*客户端-服务器仅IP网络*，主要区别在于此处列出了客户端的MAC地址，而不是VPN的IP地址。OpenVPN甚至不需要知道客户端的IP地址，因为这些地址可以由外部的DHCP服务器分配。
- en: There's more...
  id: totrans-343
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: The management interface can also be run on the OpenVPN clients. See the *Management
    interface* recipe in [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks*.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 管理接口也可以在OpenVPN客户端上运行。请参见[第2章](part0025.xhtml#aid-NQU21 "第2章. 客户端-服务器仅IP网络")，*客户端-服务器仅IP网络*中的*管理接口*菜谱。
- en: It is expected that the management interface will become more important in future
    versions of OpenVPN, both on the client and the server side, as the preferred
    method to programmatically interact with the OpenVPN software.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 预计管理接口将在未来版本的OpenVPN中变得更加重要，无论是客户端还是服务器端，都将成为与OpenVPN软件进行程序化交互的首选方法。
- en: See also
  id: totrans-346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*The Management interface* recipe from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks,*
    in which the client-side management interface is explained'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*管理接口*菜谱出自[第2章](part0025.xhtml#aid-NQU21 "第2章. 客户端-服务器仅IP网络")，*客户端-服务器仅IP网络*，其中解释了客户端侧的管理接口。'
- en: The *Using the status file* recipe from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*,
    where the details of the status file for a TUN-style network are explained
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用状态文件*这一菜谱出自[第2章](part0025.xhtml#aid-NQU21 "第2章. 客户端-服务器仅IP网络")，*客户端-服务器仅IP网络*，其中解释了TUN风格网络的状态文件详情。'
- en: Integrating IPv6 into TAP-style networks
  id: totrans-349
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将IPv6集成到TAP风格网络中
- en: For the final recipe of this chapter, we will show how to integrate IPv6 settings
    into TAP-style networks. TAP-style networks have had support for IPv6 traffic
    longer than TUN-style networks, as a TAP-style network provides an Ethernet-like
    layer. This layer is capable of transporting almost any kind of network protocol,
    including IPv6\. In OpenVPN 2.3, better IPv6 support was added so that an OpenVPN
    server could provide a DHCP pool with IPv6 addresses. In this recipe, we will
    show just how to do that.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后一个食谱将展示如何将 IPv6 设置集成到 TAP 风格的网络中。TAP 风格的网络对 IPv6 流量的支持比 TUN 风格的网络更早，因为
    TAP 风格网络提供类似以太网的层，这一层能够传输几乎任何类型的网络协议，包括 IPv6。在 OpenVPN 2.3 中，增加了更好的 IPv6 支持，使得
    OpenVPN 服务器能够提供带有 IPv6 地址的 DHCP 池。在此食谱中，我们将展示如何实现这一点。
- en: Getting ready
  id: totrans-351
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, both the server computer and the client computer
    were running CentOS 6 Linux and OpenVPN 2.3.10\. For the server, keep the configuration
    file `example3-1-server.conf` from the first recipe of this chapter at hand. For
    the client, keep the client configuration file `example3-1-client.conf` from the
    first recipe of this chapter at hand.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[第 2 章](part0025.xhtml#aid-NQU21 "第 2 章。客户端-服务器仅 IP 网络")中的第一个食谱设置客户端和服务器证书，*客户端-服务器仅
    IP 网络*。在此食谱中，服务器计算机和客户端计算机都运行 CentOS 6 Linux 和 OpenVPN 2.3.10。对于服务器，请随时使用本章第一个食谱中的配置文件`example3-1-server.conf`。对于客户端，请随时使用本章第一个食谱中的客户端配置文件`example3-1-client.conf`。
- en: 'We use the following network layout:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下网络布局：
- en: '![Getting ready](img/image00374.jpeg)'
  id: totrans-354
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/image00374.jpeg)'
- en: How to do it...
  id: totrans-355
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Modify the server configuration file, `example3-1-server.conf`, by adding a
    line:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加一行来修改服务器配置文件`example3-1-server.conf`：
- en: '[PRE67]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Save it as `example3-9-server.conf`.
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其保存为`example3-9-server.conf`。
- en: 'Start the server:'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE68]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Start the client:'
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动客户端：
- en: '[PRE69]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Note that we have suppressed timestamps in the log file using the command-line
    directive `--suppress-timestamps`.
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，我们通过命令行指令`--suppress-timestamps`抑制了日志文件中的时间戳。
- en: 'After the VPN is established, verify that we can reach the server using the `ping6`
    command:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VPN 建立后，使用`ping6`命令验证我们是否能够连接到服务器：
- en: '[PRE70]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: How it works...
  id: totrans-366
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'IPv6 support for TAP-style networks is nearly identical to IPv6 support for
    TUN-style networks. By adding a single line to the server configuration file,
    we provide IPv6 addresses to the connecting VPN clients:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: TAP 风格网络的 IPv6 支持几乎与 TUN 风格网络的 IPv6 支持相同。通过向服务器配置文件添加一行，我们可以为连接的 VPN 客户端提供 IPv6
    地址：
- en: '[PRE71]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: The same directives, ending in `-ip6`, which apply to TUN-based setups, also
    apply to TAP-style networks.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 适用于 TUN 基于设置的相同指令（以`-ip6`结尾），也适用于 TAP 风格网络。
- en: There's more...
  id: totrans-370
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The firewall rules for IPv6 traffic are slightly different from the firewall
    rules for IPv4 traffic. Also, with TAP-style networks, it is often useful to allow
    all incoming and outgoing traffic on the `tap+` adapter range. This can be especially
    helpful when debugging a non-working setup:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: IPv6 流量的防火墙规则与 IPv4 流量的防火墙规则略有不同。此外，对于 TAP 风格的网络，通常需要允许 `tap+` 适配器范围内的所有传入和传出流量。这在调试无法工作的设置时尤其有用：
- en: '[PRE72]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Note that such rules should be used for debugging purposes only.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这类规则仅应用于调试目的。
- en: See also
  id: totrans-374
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Adding IPv6 support* recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2. 
    Client-server IP-only Networks"), *Client-server IP-only Networks*, in which IPv6
    support is added to a very similar TUN-style setup
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[第 2 章](part0025.xhtml#aid-NQU21 "第 2 章。客户端-服务器仅 IP 网络")的*添加 IPv6 支持*食谱，*客户端-服务器仅
    IP 网络*，其中为非常相似的 TUN 风格设置添加了 IPv6 支持
