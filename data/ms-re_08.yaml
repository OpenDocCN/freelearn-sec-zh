- en: Sandboxing - Virtualization as a Component for RE
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 沙盒 - 作为逆向工程组成部分的虚拟化
- en: In previous chapters, we have used virtualization software, in particular, VirtualBox
    or VMware, to set up our Linux and Windows environments to conduct analysis. virtualization
    worked fine since these virtualization software only support x86 architecture.
    Virtualization is a very useful component of reverse engineering. In fact, most
    software is built under x86 architecture.  Virtualization uses the resources of
    the host machine's CPU via the hypervisor.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们使用了虚拟化软件，特别是VirtualBox或VMware，来设置Linux和Windows环境进行分析。虚拟化工作得很好，因为这些虚拟化软件仅支持x86架构。虚拟化是逆向工程中非常有用的组件。事实上，大多数软件都是在x86架构下构建的。虚拟化通过虚拟机监控器使用主机计算机的CPU资源。
- en: Unfortunately, there are other CPU architectures out there that doesn't support
    virtualization. VirtualBox nor VMware doesn't support these architectures.  What
    if we were given a non-x86 executable to work with?  And all we have is an operating
    system installed in an x86 machine. Well, this should not stop us from doing reverse
    engineering.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，还有其他不支持虚拟化的CPU架构。VirtualBox和VMware不支持这些架构。如果我们被给定了一个非x86可执行文件来处理，而我们所有的设备都只安装了x86操作系统，怎么办？嗯，这并不会阻止我们进行逆向工程。
- en: To work around this issue, we will be using emulators. Emulators have been around
    long before the hypervisor was even introduced.  Emulators, basically, emulates
    a CPU machine.  Treating this as a new machine, operating systems that run on
    a non-x86 architecture can be deployed.  After then, we can run native executables.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们将使用模拟器。模拟器早在虚拟机监控器引入之前就已经存在。模拟器本质上是模拟一个CPU机器。把它当作一台新机器，运行在非x86架构上的操作系统可以被部署。然后，我们就可以运行原生的可执行文件。
- en: In this chapter, we will learn about QEMU to deploy an non-x86 operating system. 
    We will also learn about emulating the boot up of an x86 machine using Bochs.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用QEMU部署非x86操作系统。我们还将学习如何使用Bochs模拟x86计算机的启动过程。
- en: Emulation
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟
- en: 'The beauty of emulation is that it can fool the operating system into thinking
    that it is running on a certain CPU architecture. The drawback is noticeably slow
    performance, since almost every instruction is interpreted. To explain CPUs briefly,
    there are two CPU architecture designs: **Complex Instruction Set Computing**
    (**CISC**) and **Reduced Instruction Set Computing** (**RISC**). In assembly programming,
    CISC would only require a few instructions. For example, a single arithmetic instruction,
    such as MUL, executes lower-level instructions in it. In RISC, a low-level program
    should be carefully optimized. In effect, CISC has the advantage of requiring
    less memory space, but a single instruction would require more time to execute.
    On the other hand, RISC has better performance, since it executes instructions
    in a simplistic way. However, if a code is not properly optimized, programs built
    for RISC may not perform as fast as they should and may consume space. High-level
    compilers should have the ability to optimize low-level code for RISC.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟的魅力在于它可以欺骗操作系统，让操作系统认为它在某种CPU架构上运行。缺点是性能明显较慢，因为几乎每一条指令都需要解释执行。简要说明CPU，有两种CPU架构设计：**复杂指令集计算**（**CISC**）和**简化指令集计算**（**RISC**）。在汇编编程中，CISC只需要少量指令。例如，一个单一的算术指令，如MUL，会在其内部执行更低级的指令。而在RISC中，低级程序需要仔细优化。实际上，CISC的优点在于需要较少的内存空间，但每条指令的执行时间较长。另一方面，RISC由于以简化的方式执行指令，因此具有更好的性能。然而，如果代码没有得到适当的优化，针对RISC构建的程序可能无法达到预期的执行速度，且可能会占用较多空间。高级编译器应该能够优化RISC的低级代码。
- en: 'Here is a short list of CPU architectures, categorized in terms of CISC and
    RISC:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个简短的CPU架构列表，按照CISC和RISC分类：
- en: 'CISC:'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'CISC:'
- en: Motorola 68000
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 摩托罗拉68000
- en: x86
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: x86
- en: z/Architecture
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: z/Architecture
- en: 'RISC:'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'RISC:'
- en: ARM
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ARM
- en: ETRAX CRIS
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ETRAX CRIS
- en: DEC Alpha
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: DEC Alpha
- en: LatticeMico32
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: LatticeMico32
- en: MIPS
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MIPS
- en: MicroBlaze
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MicroBlaze
- en: Nios II
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nios II
- en: OpenRISC
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenRISC
- en: PowerPC
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: PowerPC
- en: SPARC
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SPARC
- en: SuperH
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SuperH
- en: Hewlett Packard PA-RISC
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 惠普PA-RISC
- en: Infineon TriCore
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 英飞凌TriCore
- en: UNICORE
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: UNICORE
- en: Xtensa
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xtensa
- en: Popular among CISC and RISC architectures are x86 and ARM. x86 is used by Intel
    and AMD computers, in favor of having a minimum number of instructions used by
    programs. Newer devices, such as smartphones and other mobile devices, make use
    of ARM architecture, as it has the advantages of low power consumption with high
    performance.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在CISC和RISC架构中，x86和ARM都非常流行。x86由Intel和AMD的计算机使用，目的是减少程序使用的指令数。新的设备，如智能手机和其他移动设备，采用ARM架构，因为它具有低功耗和高性能的优势。
- en: For the purpose of discussion in this chapter, we are using ARM as the architecture
    that we are going to emulate on top of an x86 machine. We chose the ARM architecture
    since it is currently the most popular processor used in handheld devices today.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论的目的是在x86机器上模拟ARM架构。我们选择ARM架构，因为它目前是手持设备中最常用的处理器。
- en: Emulation of Windows and Linux under an x86 host
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在x86主机上模拟Windows和Linux
- en: We explained that installing an operating system on a VM follows the architecture
    of the host machine. For example, a Windows x86 build can only be installed on
    a VM that is itself installed on an x86 machine.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们解释了在虚拟机上安装操作系统时，它遵循主机机器的架构。例如，Windows x86版本只能安装在安装在x86机器上的虚拟机上。
- en: A lot of Linux operating systems, including Arch Linux, Debian, Fedora, and
    Ubuntu, have support for running under ARM processors. On the other hand, Windows
    RT and Windows Mobile were built for devices using ARM CPUs.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 许多Linux操作系统，包括Arch Linux、Debian、Fedora和Ubuntu，都支持在ARM处理器上运行。另一方面，Windows RT和Windows
    Mobile是为使用ARM CPU的设备构建的。
- en: Since we are working on PCs using x86 processors, analyzing a non-x86-based
    executable still follows the same reverse engineering concepts of static and dynamic
    analysis. The only addition to these steps is that we would need to set up the
    environment for which the executable can run and learn the tools that can be used
    on top of this emulated environment.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在使用x86处理器的PC上工作，分析一个非x86架构的可执行文件仍然遵循相同的静态和动态分析逆向工程概念。唯一的不同是，我们需要为可执行文件运行设置环境，并学习可以在这个模拟环境中使用的工具。
- en: Emulators
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟器
- en: 'We are going to introduce two of the most popular emulators: QEMU (Quick Emulator)
    and Bochs.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将介绍两种最流行的模拟器：QEMU（快速模拟器）和Bochs。
- en: QEMU has a reputation of being the most widely used emulator because of its
    support for a vast range of architectures, including x86 and ARM. It can also
    be installed under Windows, Linux, and macOS. QEMU is used from the command line,
    but there are available GUI tools, such as virt-manager, that can help set up
    and manage the guest operating system images. virt-manager, however, is only available
    for Linux hosts.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: QEMU因其支持多种架构（包括x86和ARM）而被认为是最广泛使用的模拟器。它还可以安装在Windows、Linux和macOS上。QEMU通过命令行使用，但也有可用的GUI工具，如virt-manager，可以帮助设置和管理来宾操作系统镜像。然而，virt-manager仅适用于Linux主机。
- en: Bochs is another emulator, but is limited to only supporting x86 architecture.
    It is worth mentioning this emulator, as it is used to debug the **Memory Boot
    Record** (**MBR**) code.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Bochs是另一种模拟器，但仅支持x86架构。值得一提的是，这个模拟器用于调试**内存引导记录**（**MBR**）代码。
- en: Analysis in unfamiliar environments
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在不熟悉的环境中进行分析
- en: Here, the reverse engineering concepts are the same. However, the availability
    of tools is limited. Static analysis can still be done under an x86 environment,
    but when we need to execute the file, it would require sandbox emulation.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，逆向工程概念是相同的。然而，工具的可用性是有限的。静态分析仍然可以在x86环境中进行，但当我们需要执行文件时，它将需要沙箱模拟。
- en: It is still best to debug native executables locally in the emulated environment.
    But, if local debugging is slim, one alternative way is to do remote debugging.
    For Windows, the most popular remote debugging tools are Windbg and IDA Pro. For
    Linux, we usually use GDB.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最好在模拟环境中本地调试本地可执行文件。但如果本地调试条件有限，另一种选择是进行远程调试。对于Windows，最常用的远程调试工具是Windbg和IDA
    Pro。对于Linux，我们通常使用GDB。
- en: 'Analyzing ARM-compiled executables is not far from the process that we perform
    with x86 executables. We follow the same steps as we did with x86:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 分析ARM编译的可执行文件与分析x86可执行文件的过程差别不大。我们遵循与x86相同的步骤：
- en: Study the ARM low-level language
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 学习ARM低级语言
- en: Do deadlisiting using disassembly tools
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用反汇编工具进行死机列表分析
- en: Debug the program in the operating system environment
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在操作系统环境中调试程序
- en: Studying the ARM low-level language is done in the same way that we studied
    x86 instructions. We just need to understand the memory address space, general
    purpose registers, special registers, stack, and language syntax. That would also
    include how API functions are called.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 学习 ARM 低级语言的方式与我们学习 x86 指令的方式相同。我们只需要理解内存地址空间、通用寄存器、特殊寄存器、栈和语言语法。这还包括如何调用 API
    函数。
- en: Tools such as IDA Pro, among other ARM disassembly tools, can be used to show
    the ARM disassembly code of a native ARM executable.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 IDA Pro 等工具，以及其他 ARM 反汇编工具，来显示本地 ARM 可执行文件的 ARM 反汇编代码。
- en: Linux ARM guest in QEMU
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QEMU 中的 Linux ARM 客户机
- en: 'Linux ARM can be installed in an ARM CPU guest of QEMU, which runs under a
    Windows in an x86 CPU. Let''s head straight to deploying an Arch Linux ARM, then.
    Running an Arch Linux instance as a QEMU guest is not that hard because of all
    the available resources we can download from the internet. For demo purposes,
    we will be using a pre-installed image of Arch Linux and running it in QEMU. Prepare
    to download these files:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Linux ARM 可以安装在 QEMU 的 ARM CPU 客户机中，该客户机运行在 Windows 系统的 x86 CPU 上。那么，让我们直接开始部署
    Arch Linux ARM 吧。由于有很多可供下载的资源，运行 Arch Linux 实例作为 QEMU 客户机并不难。为了演示，我们将使用一个预先安装的
    Arch Linux 镜像并在 QEMU 中运行它。准备下载以下文件：
- en: QEMU: [https://qemu.weilnetz.de/](https://qemu.weilnetz.de/)
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: QEMU: [https://qemu.weilnetz.de/](https://qemu.weilnetz.de/)
- en: Arch Linux image: [http://downloads.raspberrypi.org/arch/images/archlinuxarm-29-04-2012/archlinuxarm-29-04-2012.img.zip](http://downloads.raspberrypi.org/arch/images/archlinuxarm-29-04-2012/archlinuxarm-29-04-2012.img.zip)
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arch Linux 镜像: [http://downloads.raspberrypi.org/arch/images/archlinuxarm-29-04-2012/archlinuxarm-29-04-2012.img.zip](http://downloads.raspberrypi.org/arch/images/archlinuxarm-29-04-2012/archlinuxarm-29-04-2012.img.zip)
- en: System kernel: [https://github.com/okertanov/pinguin/blob/master/bin/kernel/zImage-devtmpfs](https://github.com/okertanov/pinguin/blob/master/bin/kernel/zImage-devtmpfs)
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统内核: [https://github.com/okertanov/pinguin/blob/master/bin/kernel/zImage-devtmpfs](https://github.com/okertanov/pinguin/blob/master/bin/kernel/zImage-devtmpfs)
- en: In this book, we will install QEMU on a Windows host. While installing, **take
    note of where QEMU was installed**. This is particularly important, as QEMU's
    path will be used later.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将在 Windows 主机上安装 QEMU。在安装过程中，**注意 QEMU 的安装位置**。这一点尤其重要，因为 QEMU 的路径将在后续使用。
- en: Extract the image file from `archlinuxarm-29-04-2012.img.zip` to a new directory,
    and copy `zImage-devtmpfs` into the same directory.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `archlinuxarm-29-04-2012.img.zip` 的镜像文件解压到一个新目录中，并将 `zImage-devtmpfs` 复制到同一目录下。
- en: 'Open a command line in the image and kernel file''s directory. Then, execute
    the following line:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 打开镜像和内核文件所在目录的命令行。然后，执行以下命令：
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here, change `C:\Program Files\qemu` to the path where QEMU was installed.
    This should fire up QEMU with Arch Linux running, as shown here:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，将 `C:\Program Files\qemu` 更改为 QEMU 安装的路径。这应该会启动 QEMU 并运行 Arch Linux，如下所示：
- en: '![](img/dca8e425-cb70-404d-83f3-229d47e58296.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dca8e425-cb70-404d-83f3-229d47e58296.png)'
- en: 'Now, log in using these credentials:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用以下凭据登录：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can go ahead and play with it like a regular Linux console. Arch Linux is
    a popular OS installed by enthusiasts of Raspberry Pi.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像使用常规的 Linux 控制台一样进行操作。Arch Linux 是一款由 Raspberry Pi 爱好者安装的流行操作系统。
- en: MBR debugging with Bochs
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Bochs 进行 MBR 调试
- en: When we turn on a computer, the first code that runs is from the BIOS (Basic
    Input/Output System), a program embedded in the CPU.  It performs a power-on self-test
    (POST)  that makes sure connected hardware are working properly.  The BIOS loads
    the master boot record (MBR) to memory and then passes code execution.  The master
    boot record (MBR) was read from the first disk sector of the designated boot disk. 
    The MBR contains the bootstrap loader which is responsible for loading an operating
    system.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开启计算机时，首先执行的代码来自 BIOS（基本输入输出系统），它是嵌入在 CPU 中的程序。它执行一个开机自检（POST），以确保连接的硬件正常工作。BIOS
    将主引导记录（MBR）加载到内存中，然后将代码执行传递下去。主引导记录（MBR）是从指定启动磁盘的第一个磁盘扇区读取的。MBR 包含引导加载程序，负责加载操作系统。
- en: If, for example, we want to debug a given MBR image, we can do that with an
    emulator called Bochs. Bochs can be downloaded from [http://bochs.sourceforge.net/](http://bochs.sourceforge.net/).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想要调试给定的 MBR 镜像，我们可以使用一个名为 Bochs 的模拟器来进行调试。Bochs 可以从 [http://bochs.sourceforge.net/](http://bochs.sourceforge.net/)
    下载。
- en: To test this out, we have provided a disk image that can be downloaded from [https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch8/mbrdemo.zip](https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch8/mbrdemo.zip).
    This ZIP archive extracts to about 10MB. The file contains the `mre.bin` disk
    image and the `bochsrc` image configuration file that will be passed to Bochs.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试这个，我们提供了一个可以从 [https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch8/mbrdemo.zip](https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch8/mbrdemo.zip)
    下载的磁盘镜像。这个 ZIP 压缩包解压后约为 10MB，文件中包含 `mre.bin` 磁盘镜像和将传递给 Bochs 的 `bochsrc` 配置文件。
- en: If we open the `mre.bin` using IDA Pro, we should be able to statically analyze
    the MBR code. The MBR almost always starts at the `0x7c00` address. It is a 16-bit
    code that uses hardware interrupts to control the computer.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用 IDA Pro 打开 `mre.bin`，应该能够静态分析 MBR 代码。MBR 几乎总是从 `0x7c00` 地址开始。它是一个 16
    位代码，使用硬件中断来控制计算机。
- en: 'When loading the file in IDA Pro, make sure to change the loading offset to
    `0x7c00`, as shown in the following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IDA Pro 中加载文件时，请确保将加载偏移量更改为`0x7c00`，如下面的截图所示：
- en: '![](img/f01c86a8-1189-4eea-a220-a728cfa0d6fe.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f01c86a8-1189-4eea-a220-a728cfa0d6fe.png)'
- en: 'When asked about the disassembly mode, choose 16-bit mode. Since everything
    is still undefined, we need to turn the data into code. Select the first byte
    code, right-click to open the context menu, then select Code, as shown here:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当询问反汇编模式时，选择 16 位模式。由于一切仍然是未定义的，我们需要将数据转换为代码。选择第一个字节代码，右键单击以打开上下文菜单，然后选择 Code，如下所示：
- en: '![](img/40d220ad-a964-45ab-8a4d-689426c01d22.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/40d220ad-a964-45ab-8a4d-689426c01d22.png)'
- en: 'When converted into disassembly code, we can see that IDA Pro was also able
    to identify the interrupt functions and how these are used. The following screenshot
    shows 16-bit disassembly and the use of interrupt `13h` to read data from disk
    sectors:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当转换为反汇编代码时，我们可以看到 IDA Pro 也能识别中断函数及其使用方式。以下截图展示了16位的反汇编代码，以及使用中断 `13h` 从磁盘扇区读取数据：
- en: '![](img/cb1146c6-932a-41f9-bce9-ec8d4b3aa36f.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cb1146c6-932a-41f9-bce9-ec8d4b3aa36f.png)'
- en: 'To debug the MBR with Bochs, we will have to make sure that `bochsrc` contains
    the following line:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Bochs 调试 MBR，我们必须确保 `bochsrc` 文件中包含以下行：
- en: '[PRE2]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This line enables the use of the Bochs GUI debugger.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行启用了 Bochs 图形界面调试器的使用。
- en: 'If we have a different disk image, we can change the file name of the disk
    image file in the `at0-master` line. In this demo, the disk image''s filename
    is `mre.bin`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有不同的磁盘镜像，可以在 `at0-master` 行中更改磁盘镜像文件的文件名。在这个演示中，磁盘镜像的文件名是 `mre.bin`：
- en: '[PRE3]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To emulate the disk image, execute these commands:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要模拟该磁盘镜像，执行以下命令：
- en: '[PRE4]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You might need to change `C:\Program files (x86)\Bochs-2.6.8` to the path where
    you have installed Bochs. Take note that, for the `$BXSHARE` environment variable,
    there are no quotes.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要将 `C:\Program files (x86)\Bochs-2.6.8` 更改为你安装 Bochs 的路径。请注意，对于 `$BXSHARE`
    环境变量，没有引号。
- en: Here, Bochs was installed under a Windows environment. The paths can be changed
    if working in a Linux environment.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这里 Bochs 是在 Windows 环境下安装的。如果在 Linux 环境下工作，可以更改路径。
- en: 'Once running, the console will be filled up with logged lines, as shown here:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦运行，控制台将会显示日志输出，如下所示：
- en: '![](img/b1310cd3-20ab-4479-9c88-2b89c564d6cd.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b1310cd3-20ab-4479-9c88-2b89c564d6cd.png)'
- en: 'This will bring up the debugging console, which should look like the one shown
    in this screenshot:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开调试控制台，界面应如下面的截图所示：
- en: '![](img/23c8ac52-51b1-44a8-af00-1e8eddee7420.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23c8ac52-51b1-44a8-af00-1e8eddee7420.png)'
- en: 'Another window that shows the output should also appear:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个显示输出的窗口也应该出现：
- en: '![](img/ff86704e-52f5-41f6-aa57-88430f201331.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ff86704e-52f5-41f6-aa57-88430f201331.png)'
- en: 'The MBR code begins at the `0x7c00 `address. We will have to place a breakpoint
    at `0x7c00`. Bochs GUI has a command line where we get to set the breakpoints
    at specified addresses. This is located at the bottom of the window. See the highlighted
    area in the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: MBR 代码从 `0x7c00` 地址开始。我们需要在 `0x7c00` 设置一个断点。Bochs 的图形界面有一个命令行，我们可以在这里设置指定地址的断点。它位于窗口的底部。请参阅下面截图中高亮的区域：
- en: '![](img/1305472c-1266-4cb8-af5f-7490917eb602.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1305472c-1266-4cb8-af5f-7490917eb602.png)'
- en: 'To set a breakpoint at `0x7c00`, enter `lb 0x7c00`. To see a the list of commands,
    enter `help`. The most common commands used are the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 `0x7c00` 设置断点，请输入 `lb 0x7c00`。要查看命令列表，请输入 `help`。常用的命令如下：
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The GUI has also mapped keyboard keys with the commands. Select the Command
    menu to view these keys.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: GUI界面还将键盘按键与命令进行了映射。选择命令菜单查看这些按键。
- en: 'Press *F5* to continue the code, until it reaches the MBR code at `0x7c00`.
    We should now see the same disassembly code that we saw in IDA Pro. We can then
    start pressing *F11* to step debug on each instruction line:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 按下*F5*继续代码执行，直到它到达`0x7c00`处的MBR代码。我们现在应该能看到与在IDA Pro中看到的相同的反汇编代码。然后我们可以开始按*F11*逐步调试每一行指令：
- en: '![](img/5db1ddf4-91c2-4b77-9c3b-6151d881e66f.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5db1ddf4-91c2-4b77-9c3b-6151d881e66f.png)'
- en: 'At some point, the code will enter an endless loop state. If we look at the
    output window, the end result should have the same message, as in the following
    screenshot:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个时刻，代码将进入无限循环状态。如果我们查看输出窗口，最终结果应该会显示相同的消息，如以下截图所示：
- en: '![](img/0e4129c8-d9f1-4db7-b4ce-f380046a868d.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e4129c8-d9f1-4db7-b4ce-f380046a868d.png)'
- en: Summary
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned that, even if the file is not a Windows or
    a Linux x86-native executable, we can still analyze a non-x86 executable file.
    With static analysis alone, we can analyze a file without even doing dynamic analysis,
    although we still need references to understand the low-level language of non-x86
    architectures, categorized as RISC or CISC. Just as we learned x86 assembly language,
    languages such as ARM assembly can be learned with the same concepts.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解到，即使文件不是Windows或Linux x86本地可执行文件，我们仍然可以分析非x86可执行文件。仅通过静态分析，我们可以分析一个文件，而无需进行动态分析，尽管我们仍然需要参考资料来理解非x86架构的低级语言，这些架构被分类为RISC或CISC。正如我们学习x86汇编语言一样，像ARM汇编语言这样的语言也可以通过相同的概念来学习。
- en: However, an analysis can still be proven with actual code execution, using dynamic
    analysis. To do that, we need to set up the environment where the executable will
    run natively. We introduced an emulation tool called QEMU that can do the job
    for us. It has quite a number of architectures that it can support, including
    ARM. Today, one of the most popular operating system using ARM architecture is
    Arch Linux. This operating system is commonly deployed by Raspberry Pi enthusiasts.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，通过实际代码执行，使用动态分析仍然可以证明分析的有效性。为此，我们需要设置一个可以本地运行可执行文件的环境。我们介绍了一种名为QEMU的仿真工具，它可以为我们完成这项工作。它支持多种架构，包括ARM。今天，使用ARM架构的最流行操作系统之一是Arch
    Linux。这个操作系统通常由树莓派爱好者部署。
- en: We also learned about debugging MBR code taken from a disk image. Using Bochs,
    a tool that can emulate the boot sequence of an x86 system, we were able to show
    how you can load and debug 16-bit code that uses hardware interrupts. In addition,
    some ransomware employ features that can inject or replace the MBR with malicious
    code. With what we learned in this chapter, nothing can stop us from reversing
    these pieces of code.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了如何调试从磁盘镜像中提取的MBR代码。通过使用Bochs，一个能够模拟x86系统启动顺序的工具，我们能够演示如何加载和调试使用硬件中断的16位代码。此外，一些勒索软件采用了可以注入或替换MBR为恶意代码的功能。通过我们在本章学到的内容，没有什么可以阻止我们逆向这些代码片段。
- en: Further Reading
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: KVM and CPU feature enablement -[https://wiki.qemu.org/images/c/c8/Cpu-models-and-libvirt-devconf-2014.pdf](https://wiki.qemu.org/images/c/c8/Cpu-models-and-libvirt-devconf-2014.pdf)
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: KVM和CPU功能启用 - [https://wiki.qemu.org/images/c/c8/Cpu-models-and-libvirt-devconf-2014.pdf](https://wiki.qemu.org/images/c/c8/Cpu-models-and-libvirt-devconf-2014.pdf)
- en: A way for installing Windows ARM in QEMU - [https://withinrafael.com/2018/02/11/boot-arm64-builds-of-windows-10-in-qemu/](https://withinrafael.com/2018/02/11/boot-arm64-builds-of-windows-10-in-qemu/)
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在QEMU中安装Windows ARM的方法 - [https://withinrafael.com/2018/02/11/boot-arm64-builds-of-windows-10-in-qemu/](https://withinrafael.com/2018/02/11/boot-arm64-builds-of-windows-10-in-qemu/)
- en: How to DEBUG System Code using The Bochs Emulator on a Windows PC - [https://thestarman.pcministry.com/asm/bochs/bochsdbg.html](https://thestarman.pcministry.com/asm/bochs/bochsdbg.html)
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在Windows PC上使用Bochs仿真器调试系统代码 - [https://thestarman.pcministry.com/asm/bochs/bochsdbg.html](https://thestarman.pcministry.com/asm/bochs/bochsdbg.html)
