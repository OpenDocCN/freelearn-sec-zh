- en: Chapter 7. Writing Nmap Scripts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。编写Nmap脚本
- en: Now that we have covered how the NSE works, it's time to learn how to write
    our first Nmap script. Because of the versatile and extremely customized nature
    of writing Nmap scripts, there are several different ways to produce a script
    that performs various functions—and also many pros and cons to write your own
    script.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了NSE的工作原理，是时候学习如何编写我们的第一个Nmap脚本了。由于编写Nmap脚本的多功能和极其定制化的特性，有几种不同的方法可以编写执行各种功能的脚本，编写自己的脚本也有许多利弊。
- en: While creating an Nmap script from scratch may not always be the fastest way
    to get things done (as there is almost always a script that already exists for
    whatever purpose you may need), there are certain situations during which leveraging
    the powerful built-in functions of the Nmap scripting engine leads to exactly
    the right circumstances to write your own script.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然从头开始创建Nmap脚本可能并不总是最快的方式（因为几乎总会有一个已经存在的脚本来满足你可能需要的任何目的），但在某些情况下，利用Nmap脚本引擎的强大内置功能会导致创建自己的脚本正好具备正确的条件。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The anatomy of an Nmap script
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nmap脚本的解剖
- en: Writing the Nmap script's head
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写Nmap脚本的头部
- en: Creating a rule
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建规则
- en: Defining a script's action
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义脚本的动作
- en: Debugging Nmap scripts
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试Nmap脚本
- en: Anatomy of an Nmap script
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nmap脚本的解剖
- en: An Nmap script is comprised of several unique sections, each of which define
    different areas for the script to execute, or for Nmap to interpret expected output.
    There are several primary areas that we must always include in any script we create,
    in order to ensure that the script will run effectively (and that Nmap will be
    able to understand how to interpret the data).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap脚本由几个独特的部分组成，每个部分定义了脚本执行的不同区域，或者Nmap解释预期输出的方式。我们必须始终在创建的任何脚本中包含几个主要区域，以确保脚本能够有效运行（并且Nmap能够理解如何解释数据）。
- en: Although Nmap scripts are written in Lua, an interpreted programming language,
    it's important to remember that these scripts are not stand-alone executables
    that can be run on their own. Rather than running a script with Nmap as a requirement,
    it's better to think of Nmap scripts as simply sets of instructions for a unique
    Nmap programming language.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Nmap脚本是用Lua编写的，这是一种解释性编程语言，但重要的是要记住这些脚本不是可以独立运行的可执行文件。与其将Nmap脚本作为要求运行的脚本，不如将Nmap脚本视为一种独特的Nmap编程语言的一套指令。
- en: 'An Nmap script is comprised of three unique sections:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap脚本由三个独特的部分组成：
- en: '**The head**: This section of an Nmap script includes documentation and categorization
    for the script so that Nmap and the NSE database can successfully categorize the
    script into the appropriate areas.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**头部**：Nmap脚本的这一部分包括脚本的文档和分类，以便Nmap和NSE数据库可以成功地将脚本分类到适当的领域。'
- en: '**The rule**: This section of the script defines exactly where and how an Nmap
    script is executed. Because the script is leveraging the data of the Nmap scan
    as it runs, certain elements can trigger the script to run. This is effectively
    a trigger that evaluates whether or not the script should execute.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规则**：脚本的这一部分准确地定义了Nmap脚本在何处以及如何执行。因为脚本在运行时利用了Nmap扫描的数据，某些元素可以触发脚本的运行。这实际上是一个触发器，用于评估脚本是否应该执行。'
- en: '**The action**: Lastly, this section of an Nmap script is where (you guessed
    it!) the action takes place. This is the part of the script that is doing a lot
    of the processing, after the head has defined the script and the rule has triggered
    the action.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动作**：最后，脚本的这一部分就是（你猜对了！）动作发生的地方。这是脚本的一部分，它在头部定义了脚本，规则触发了动作之后进行了大量的处理。'
- en: Now that we've learned how an Nmap script is composed, it's time that we got
    to work and started writing one. Because each and every Nmap script is so unique,
    we are going to recreate a script that already works—but the one that shows how
    powerful the NSE can be.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了Nmap脚本是如何组成的，是时候开始动手写一个了。因为每个Nmap脚本都是如此独特，我们将重新创建一个已经存在的脚本，但这个脚本展示了NSE的强大之处。
- en: Our case study for this script will be to write a simple, easy-to-follow Nmap
    script that uses Nmap's built-in functionality (combined with the power of the
    NSE) to determine whether a web server has a `robots.txt` file. The `robots.txt`
    files indicate which areas of a website should (and should not) be indexed by
    web crawlers and search engines, and often have sensitive directories listed with
    an instruction to not index them. For this reason, they're very interesting for
    security professionals and penetration testers—since it's exactly those sensitive
    files and directories that we're looking for!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这个脚本的案例研究将是编写一个简单、易于遵循的Nmap脚本，利用Nmap的内置功能（结合NSE的强大功能）来确定Web服务器是否有`robots.txt`文件。`robots.txt`文件指示网站的哪些区域应该（和不应该）被网络爬虫和搜索引擎索引，并且通常列出了不应该被索引的敏感目录。因此，它们对于安全专业人员和渗透测试人员来说非常有趣，因为正是这些敏感文件和目录是我们正在寻找的！
- en: Defining an Nmap script – script headers
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义Nmap脚本 - 脚本头部
- en: Each Nmap script must be created with certain required variables defined at
    the beginning of the script. Any Nmap prerequisites that are needed for successful
    execution, definitions of how the script is categorized (for example, whether
    or not it is intrusive, safe, contains an exploit, and so on), and the license
    are also among the things necessary in the header.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Nmap脚本必须在脚本开头定义了某些必需的变量。脚本执行所需的任何Nmap先决条件、脚本分类的定义（例如是否具有侵入性、安全性、包含漏洞等），以及许可证也是头部中必需的内容。
- en: '![Defining an Nmap script – script headers](img/4065OS_07_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![定义Nmap脚本 - 脚本头部](img/4065OS_07_01.jpg)'
- en: The preceding screenshot illustrates the various sections necessary for an Nmap
    script, each of which are critical to the successful execution of the program.
    Let's walk through these elements in order to determine what the author of the
    script is doing.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的屏幕截图说明了Nmap脚本所需的各个部分，这些部分对程序的成功执行至关重要。让我们按顺序走过这些元素，以确定脚本的作者在做什么。
- en: First, several variables (defined by the local prefix) are defined. Several
    requirements are made in order to ensure that each of the Nmap elements are included
    appropriately.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，定义了几个变量（由本地前缀定义）。为了确保每个Nmap元素都被适当地包含，做出了几项要求。
- en: Next, a longer variable—the description—is created. This is a multiline Lua
    variable, which is encapsulated in `[[` and `]]` brackets. This area is supposed
    to include a basic description of the Nmap script so that when run programmatically,
    it is possible to choose the correct script.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建了一个更长的变量 - 描述。这是一个多行Lua变量，它被封装在`[[`和`]]`括号中。这个区域应该包括Nmap脚本的基本描述，以便在以编程方式运行时，可以选择正确的脚本。
- en: Below the description variable is a fully commented text block that defines
    the usage of the script. In Lua, the `--` preamble comments out that line of code,
    making it not run when the script is executed. You can easily see how the `@usage`
    block is formatted—simply showing how the script should be run, and any arguments
    it may accept—and how the `@output` block is formatted below. These blocks show
    how to run the script correctly, how to pass arguments on the command line (if
    any are required), and what output you should expect from the script in question.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在描述变量下面是一个完全注释的文本块，定义了脚本的用法。在Lua中，`--`前缀注释掉了该行代码，使其在执行脚本时不运行。您可以轻松地看到`@usage`块的格式
    - 简单地显示脚本应该如何运行，以及它可能接受的任何参数 - 以及下面的`@output`块的格式。这些块显示了如何正确运行脚本，如何在命令行上传递参数（如果需要），以及你应该期望从所讨论的脚本中得到什么输出。
- en: Below the commented out block are several other variable definitions that Nmap
    parses. Specifically, the `author` block (which is how you would like to be credited
    for the script), the `license` block (which is generally listed as the same as
    Nmap for distribution purposes, but can be specified in certain ways if you want
    to protect certain elements of your script), and the `categories` array (which
    lists the categories that the script should fall into). You want to make sure
    that, for example, if your script is intrusive, you label it as such.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在注释块下面是Nmap解析的几个其他变量定义。具体来说，`author`块（这是您希望为脚本获得的署名方式），`license`块（通常列为与Nmap相同以进行分发，但如果您想保护脚本的某些元素，可以以特定方式指定），以及`categories`数组（列出脚本应该属于的类别）。您要确保，例如，如果您的脚本是侵入式的，您要将其标记为这样。
- en: 'For our script, we only need a few required `includes`, which make our header
    relatively short. Let''s create our head section, looking something like the following
    (of course, feel free to modify your script however you like!):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '对于我们的脚本，我们只需要一些必需的`includes`，这使得我们的头部相对较短。让我们创建我们的头部部分，看起来像下面这样（当然，随时随地修改您的脚本！）:'
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Very simple! We need the HTTP module in order to perform an HTTP GET request
    to `robots.txt` in question (on an open port 80), and of course we need the Nmap
    include in order to leverage the Nmap scripting engine. You can see that our description
    is very straightforward, and we defined the author, license, and categories in
    order to help our users determine when the script is safe and effective to run.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 非常简单！我们需要HTTP模块，以便对问题中的`robots.txt`执行HTTP GET请求（在开放的端口80上），当然我们还需要Nmap包含以利用Nmap脚本引擎。您可以看到我们的描述非常简单明了，我们定义了作者、许可和类别，以帮助我们的用户确定脚本何时是安全和有效的运行。
- en: Now that the head of our script is complete, let's turn to the rule.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的脚本头部已经完成，让我们转向规则。
- en: Triggering functions – the rule
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 触发函数 - 规则
- en: 'The rule or portrule section of an Nmap script determines when the action should
    take place (which we''ll cover in the next section). It''s important to define
    this clearly so that we are confident that our script will run every time we need
    it to (based on port number and version). There are two ways to accomplish this
    type of rule: standard portrule documentation, and a helper library built in the
    NSE called **shortport**.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap脚本的规则或portrule部分确定了何时应该执行操作（我们将在下一节中介绍）。明确定义这一点非常重要，这样我们就可以确信我们的脚本将在需要时每次都运行（基于端口号和版本）。有两种方法可以实现这种类型的规则：标准portrule文档和NSE中内置的名为**shortport**的辅助库。
- en: Defining a rule is actually very simple, depending on what we're looking for.
    In the case of our `robots.txt` detection script (aptly named `robots.nse`), we
    just want to trigger on port 80 to see if `robots.txt` exists.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 定义规则实际上非常简单，取决于我们要寻找什么。在我们的`robots.txt`检测脚本（名为`robots.nse`）的情况下，我们只想在端口80上触发，以查看`robots.txt`是否存在。
- en: 'If we were writing a production script, rather than a proof of concept, it
    would probably be a good idea to use shortport''s port or service functionality
    to trigger on port 80, or any web server that Nmap detects through its underlying
    functionality. However, in our case, we can simply define something much easier
    to digest:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要编写一个生产脚本，而不是一个概念验证，最好使用shortport的端口或服务功能来触发端口80，或者Nmap通过其底层功能检测到的任何Web服务器。然而，在我们的情况下，我们可以简单地定义一些更容易理解的东西：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, this is a very minimal portrule that will return `true` when
    `port.state` is `open`. These are built-in Nmap functionalities, and when the
    script is running, each port is checked against the portrule.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这是一个非常简单的portrule，当`port.state`为`open`时将返回`true`。这些都是内置的Nmap功能，在脚本运行时，每个端口都会根据portrule进行检查。
- en: While our portrule is intentionally very easy to understand, many production
    scripts have very complicated portrules that are designed to trigger different
    elements of analysis, based on specific version and configuration settings. To
    learn more about advanced portrule and the shortport library, you can read the
    full overviews at the **Nmap Scripting Engine Documentation** (**NSEDoc**) portal.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们的端口规则故意非常容易理解，但许多生产脚本都有非常复杂的端口规则，旨在根据特定版本和配置设置触发不同的分析元素。要了解更多关于高级端口规则和shortport库的信息，您可以阅读**Nmap脚本引擎文档**（**NSEDoc**）门户的完整概述。
- en: Defining a script's action
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义脚本的操作
- en: After we define the portrule, the only step left is to define the action that
    executes when the portrule returns `true`. In our case, we want to check whether
    `robots.txt` exists on the web server we're scanning.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义端口规则之后，唯一剩下的步骤就是定义当端口规则返回`true`时执行的操作。在我们的情况下，我们想要检查我们正在扫描的Web服务器上是否存在`robots.txt`。
- en: In order to determine whether the server exists, there's a little bit about
    the **Hypertext Transfer Protocol** (**HTTP**) that we need to learn. First of
    all, the way to request a page is through an HTTP GET request. For example, if
    we wanted to go to [http://google.com/images](http://google.com/images), our browser
    would send a request containing `GET /images` to the server at `Google.com`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定服务器是否存在，我们需要了解一些关于**超文本传输协议**（**HTTP**）的知识。首先，请求页面的方式是通过HTTP GET请求。例如，如果我们想要访问[http://google.com/images](http://google.com/images)，我们的浏览器会向`Google.com`服务器发送包含`GET
    /images`的请求。
- en: If the status of the GET request is `OK`, the web server returns the status
    code `200`. If there is a server-side error, a `500` error will return. If the
    page is moved, an error in the range of `300` will return. Lastly (for our purposes),
    if there is an authorization error or file-not-found error, the server will return
    `403` or `404` respectively.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果GET请求的状态是`OK`，Web服务器将返回状态码`200`。如果有服务器端错误，将返回`500`错误。如果页面被移动，将返回`300`范围内的错误。最后（对于我们的目的），如果有授权错误或文件未找到错误，服务器将分别返回`403`或`404`。
- en: 'In order to define our action function, we need to perform the following steps:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了定义我们的操作函数，我们需要执行以下步骤：
- en: Request the `robots.txt` page.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请求`robots.txt`页面。
- en: Find out whether it's there or not.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找出它是否存在。
- en: 'The following action segments define this request:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下操作部分定义了这个请求：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you can see in the preceding code snippet, this is a very simple action
    section. Let''s walk through the process step by step:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的代码片段所示，这是一个非常简单的操作部分。让我们一步一步地走过这个过程：
- en: First, we define the action function that takes the parameter's host and port.
    These are automatically passed to the action block once the portrule triggers.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们定义接受参数主机和端口的操作函数。一旦端口规则触发，这些参数会自动传递给操作块。
- en: Next, we define a local variable (called robots), which is the HTTP result of
    the NSE's `http.get` request. In this instance, we're performing a GET to the
    host and port that we're currently scanning and making a request to `/robots.txt`.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们定义一个本地变量（称为robots），它是NSE的`http.get`请求的HTTP结果。在这种情况下，我们正在对我们当前扫描的主机和端口执行GET，并向`/robots.txt`发出请求。
- en: Once we receive the HTTP data, we can easily make an `if` statement to determine
    whether the status is a `200 OK` response or something else. We could have combined
    this with a shorter `if` statement (rather than an if/else), but it's useful to
    see how to have multiple possibilities for output.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们收到HTTP数据，我们可以很容易地使用`if`语句来确定状态是否为`200 OK`响应或其他状态。我们本可以将其与更短的`if`语句结合在一起（而不是if/else），但是看到如何有多种可能性的输出是很有用的。
- en: If the output is not `200`, we go to the `else` statement and see what the status
    is. For example, if the status is `404`, we know that it simply doesn't exist;
    if we get a `500` server error or a `403 not authorized`, however, it might be
    worth looking into a greater depth:![Defining a script's action](img/4065OS_07_02.jpg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果输出不是`200`，我们转到`else`语句并查看状态是什么。例如，如果状态是`404`，我们知道它根本不存在；然而，如果我们得到`500`服务器错误或`403未授权`，可能值得更深入地研究一下：![定义脚本的操作](img/4065OS_07_02.jpg)
- en: As you can see, running this script (and any custom Nmap script) is very straightforward.
    When scanning `scanme.nmap.org`, you can clearly see that there is no `robots.txt`—we're
    just receiving a `404` error. If we scan a service that does have a `robots.txt`
    page—I created a test case on [http://dshaw.net/](http://dshaw.net/) for this
    purpose—we see a different result.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，运行此脚本（以及任何自定义的Nmap脚本）非常简单。当扫描`scanme.nmap.org`时，您可以清楚地看到没有`robots.txt`
    - 我们只收到了`404`错误。如果我们扫描一个确实有`robots.txt`页面的服务 - 我在[http://dshaw.net/](http://dshaw.net/)上创建了一个测试用例
    - 我们会看到不同的结果。
- en: 'In this instance, we can clearly see that the `200` status—HTTP OK—means that
    `robots.txt` does exist:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们可以清楚地看到`200`状态 - HTTP OK - 意味着`robots.txt`确实存在：
- en: '![Defining a script''s action](img/4065OS_07_03.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![定义脚本的操作](img/4065OS_07_03.jpg)'
- en: If this were a production Nmap script, it would probably be worth it to change
    the return associated with a `200 OK` response to show more information such as
    disallowed files and directories. However, don't spend time on this particular
    script! There is already a great HTTP `robots.txt` script (and many more) in the
    official Nmap repository.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是一个生产Nmap脚本，可能值得将与`200 OK`响应相关联的返回更改为显示更多信息，例如不允许的文件和目录。但是，不要在这个特定的脚本上花费时间！官方Nmap存储库中已经有一个很棒的HTTP
    `robots.txt`脚本（以及许多其他脚本）。
- en: 'One last set of flags that can be very useful to write, understand, and debug
    Nmap scripts are the `--script-trace` and `-d` (debug) flags. The `--script-trace`
    flag shows the information on the wire about all the different requests that the
    script is making on its own, which is very useful to determine what exactly is
    happening:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，还有一组非常有用的标志，可以很好地编写、理解和调试Nmap脚本，那就是`--script-trace`和`-d`（调试）标志。`--script-trace`标志显示有关脚本自己所做的所有不同请求的线上信息，这对于确定到底发生了什么非常有用：
- en: '![Defining a script''s action](img/4065OS_07_04.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![定义脚本的操作](img/4065OS_07_04.jpg)'
- en: 'You can see in the preceding screenshot that while there may be a little bit
    of information overload, you can see exactly what the Nmap script is doing by
    using the `--script-trace` flag. The `-d` flag, to debug, works similarly: if
    you''re writing a script and you encounter errors, try debugging it with the `-d`
    flag. You''d be surprised at the great things you can learn!'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，你可以看到可能有一点信息过载，但是你可以通过使用`--script-trace`标志来准确地看到Nmap脚本在做什么。`-d`标志，用于调试，工作原理类似：如果你在编写脚本时遇到错误，尝试使用`-d`标志进行调试。你会惊讶地发现你可以学到很多东西！
- en: Summary
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter showed us how to write our very own Nmap scripts! The NSE is a
    powerful (and sometimes complicated) tool, which can aid Nmap users in a variety
    of interesting and automated tasks. The script we wrote as a proof of concept
    can easily detect whether a `robots.txt` file exists on a server, but the possibilities
    to write Nmap scripts—either for internal use, or to detect specific vulnerabilities—are
    nearly endless!
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向我们展示了如何编写我们自己的Nmap脚本！NSE是一个强大（有时复杂）的工具，可以帮助Nmap用户完成各种有趣和自动化的任务。我们编写的脚本作为概念验证可以轻松地检测服务器上是否存在`robots.txt`文件，但编写Nmap脚本的可能性——无论是用于内部使用还是检测特定漏洞——几乎是无限的！
- en: In the next chapter, we will learn how to use tools that come in packages with
    the Nmap tool suite, as well as some useful tips and tricks to get the most out
    of them.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用与Nmap工具套件捆绑在一起的工具，以及一些有用的技巧和窍门，以充分利用它们。
