- en: Chapter 6. Infiltrating Sessions via Cross-Site Scripting
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第6章。通过跨站脚本攻击渗透会话
- en: Web application hacking is in a class of its own. While network- and system-related
    hacking focuses on gaining persistent presence on those systems or otherwise modifying
    their state, web pen testing is focused on fooling the server, client, or both
    into doing the attacker's bidding. Sure, you can try to *pawn* those servers or
    compromise the client or browser, but if you can get all you want from the exchange
    without establishing a permanent residence, why not? Injection attacks, which
    make a lot of web developers very nervous, are like a Jedi Mind Trick for web
    applications. With a wave of your hand (not literally, it is really just some
    effort on a keyboard), you can convince the server, client, or both to act in
    a way they would not otherwise. This may be done to give up data (as is believed
    to have happened in the Impact Team's Ashley Madison hack) or to poison one or
    both sides with malicious scripts that defy the trust between client and server.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序的黑客攻击是一种独特的类别。虽然与网络和系统相关的黑客攻击侧重于在这些系统上获得持久存在或以其他方式修改它们的状态，但Web渗透测试侧重于愚弄服务器、客户端或两者以执行攻击者的命令。当然，你可以尝试攻击这些服务器或者妥协客户端或浏览器，但如果你可以在不建立永久住所的情况下从交换中得到你想要的一切，为什么不呢？注入攻击让许多Web开发人员非常紧张，就像对Web应用程序的绝地心灵攻击一样。通过挥动你的手（不是字面上的，实际上只是键盘上的一些努力），你可以说服服务器、客户端或两者以一种它们本来不会的方式行动。这可能是为了放弃数据（正如人们相信在Impact
    Team的Ashley Madison黑客攻击中发生的那样）或者用恶意脚本毒害一方或双方，违背客户端和服务器之间的信任。
- en: '**Cross-site scripting** (it can be abbreviated **CSS** or **XSS**, but we''ll
    use the latter to avoid confusing this attack with **Cascading Style Sheets**)
    is something many of you have probably worked through in practice or tested for
    through automated tools, but it is a very deep topic that could justify its own
    book. As a subset of the broader term injection attacks, XSS focuses on using
    JavaScript where it shouldn''t be. Rather than broadly manipulating the hijacked
    requests and responses, XSS finds daylight in them to insert covert scripts that
    would otherwise be unable to land and execute. These scripts now appear trustworthy
    to our targets and their users because of the trust they have for each other,
    and we''ll use this trusted relationship against them.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**跨站脚本**（它可以缩写为**CSS**或**XSS**，但我们将使用后者以避免将此攻击与**层叠样式表**混淆）是你们许多人可能在实践中或通过自动化工具进行测试的一个非常深入的主题，但它是一个非常深入的主题，可能需要一本专门的书来证明。作为更广泛的注入攻击的子集，XSS侧重于在不应该出现的地方使用JavaScript。与广泛操纵劫持的请求和响应不同，XSS在其中找到了插入秘密脚本的空间，否则这些脚本将无法着陆和执行。这些脚本现在对我们的目标和他们的用户来说是可信的，因为他们对彼此的信任，我们将利用这种信任关系来对付他们。'
- en: The purpose of these scripts can vary greatly, but the many uses can include
    exposing cookies and session information, allowing for redirection and MITM attacks,
    hijacking one or both endpoints for other attacks, and even facilitating exfiltration
    of sensitive data. These traits make them extremely dangerous, and despite their
    high ranking in the OWASP Top 10 for the last few cycles, they continue to be
    a major issue.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这些脚本的目的可以大不相同，但许多用途包括暴露cookie和会话信息，允许重定向和中间人攻击，劫持一个或两个端点进行其他攻击，甚至促进敏感数据的外泄。这些特征使它们极为危险，尽管它们在过去几个周期的OWASP十大中排名很高，但它们仍然是一个主要问题。
- en: XSS has many applications but in this chapter, we'll differentiate the types
    of XSS and provide some options onÂ how to best unleash them in your testing.
    While Burp and ZAP can provide some XSS exploits, it is helpful to understand
    how to craft our own and use other tools available in Kali to help deliver them.
    This chapter will discuss various forms of XSS and show other ways we can use
    this powerful attack form to compromise our targets.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: XSS有许多应用，但在本章中，我们将区分XSS的类型，并提供一些关于如何在测试中最好地释放它们的选项。虽然Burp和ZAP可以提供一些XSS攻击，但了解如何制作我们自己的攻击并使用Kali中其他可用的工具来帮助传递它们是有帮助的。本章将讨论各种形式的XSS，并展示我们可以使用这种强大的攻击形式来妥协我们的目标的其他方法。
- en: 'In this chapter, you will learn the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学到以下内容：
- en: Discussing various forms of XSS, how to detect vulnerabilities in them and exploit
    them
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论各种形式的XSS，如何检测它们的漏洞并利用它们
- en: Exploring how **stored** (also known asÂ **persistent**) XSS attacks work and
    how to take advantage of them
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索**存储**（也称为**持久性**）XSS攻击的工作原理以及如何利用它们
- en: Understanding and testing for **reflected** XSS using social engineering techniques
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用社会工程技术理解和测试**反射**XSS
- en: Discussing the capabilities of additional tools such as BeEF, XSSer, Websploit,
    and Metasploit and their ability to handle each form of XSS attack
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论其他工具的功能，如BeEF、XSSer、Websploit和Metasploit，以及它们处理每种XSS攻击的能力
- en: The low-down on XSSÂ types
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XSS类型的详细信息
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'XSS attacks are both common and dire; in the right places, they can be used
    to deliver malicious scripts, funnel traffic to an alternative redirect, or implant
    faulty data. Efforts to categorize them have added to the confusion for some of
    us. The earliest categorization focused on its persistence (or lack thereof),
    but over time, the industry has focused on the affected host: a web server or
    browsing client. OWASP has done a great job of redefining these types to help
    us (pen testers) choose the best detection methods and exploitation tools for
    each. The common thread that ties them together is that they all involve user
    input being relayed by a server without proper validation, and these attacks always
    execute in the browser, regardless of the delivery method. Let''s review the latest
    categorization, so we''re ready to use them effectively.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: XSS攻击既常见又严重；在合适的地方，它们可以用于传递恶意脚本，将流量引导到替代重定向，或植入错误数据。对它们进行分类的努力为我们一些人增加了困惑。最早的分类侧重于其持久性（或缺乏持久性），但随着时间的推移，行业已经关注受影响的主机：Web服务器或浏览客户端。OWASP已经做了很好的工作，重新定义了这些类型，以帮助我们（渗透测试人员）为每种类型选择最佳的检测方法和利用工具。将它们联系在一起的共同点是它们都涉及用户输入被服务器中继而没有得到适当验证，这些攻击总是在浏览器中执行，无论传递方法如何。让我们回顾一下最新的分类，以便能够有效地使用它们。
- en: Should XSS stay or should it go?
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: XSS应该留下还是离开？
- en: 'XSS attacks, regardless of where they take place, can be either stored or reflective.
    Both can range from annoying to gravely serious, depending on the intent and the
    impacted session''s context:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: XSS攻击，无论发生在哪里，都可以是存储型或反射型。根据意图和受影响会话的上下文，两者都可能从恼人到严重严重不等：
- en: 'Stored XSS attacks (persistent) are quite common where data from an attacker
    masquerading as a legitimate user is not properly screened before being presented
    to other users. This code will persist, continuing to impact users until it is
    detected, the data purged, or precautions implemented on the web service to ensure
    that responses containing the code are properly validated. In effect, the code
    is stored in the server itself, as shownÂ here:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储型XSS攻击（持久性）非常常见，攻击者伪装成合法用户的数据在呈现给其他用户之前未经适当筛选。这段代码将持续存在，直到被检测到、数据被清除，或者在Web服务上实施预防措施，以确保包含该代码的响应得到适当验证。实际上，该代码存储在服务器本身，如下所示：
- en: '![](img/B03918_06_01-1.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_06_01-1.png)'
- en: Stored XSS will attack any client viewing the requested page.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 存储型XSS将攻击查看请求页面的任何客户端。
- en: 'Reflective XSS attacks (also called non-persisentent) are more varied, in that
    they can be initiated through phishing campaigns, social engineering, MITM attacks,
    or some other diversion. Unwitting users initiate the attack by clicking on a
    malicious link with the script in it. The attacker crafts their scripts such that
    they are returned or reflected within the error or search response of the web
    server under attack. Because the attacker convinced a user to click on a link
    that embedded a script, they knewÂ it would be reflected in a response; the poor
    client browser will now trust that script as if it originated at the server itself.
    In actuality, the victim''s browser originated the request, as seen in the following
    screenshot:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反射型XSS攻击（也称为非持久性）更加多样化，可以通过网络钓鱼活动、社会工程、中间人攻击或其他方式发起。无意中的用户通过点击带有脚本的恶意链接来发起攻击。攻击者精心制作他们的脚本，使其在受攻击的Web服务器的错误或搜索响应中返回或反射。因为攻击者说服用户点击嵌入脚本的链接，他们知道它将在响应中反射；可怜的客户端浏览器现在将信任该脚本，就好像它是从服务器本身发起的一样。实际上，受害者的浏览器发起了请求，如下截图所示：
- en: '![](img/B03918_06_02-1.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_06_02-1.png)'
- en: Reflective, or Non-Persistent XSS tends to be more focused on a group of users.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 反射型或非持久性XSS往往更专注于一组用户。
- en: Location, location, and location!
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 位置，位置和位置！
- en: 'The second means by which we can differentiate XSS types is by the location.
    The detection methods and defensive countermeasures can vary greatly based on
    which end of the connection was attacked: the client or server:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们区分XSS类型的第二种方法是通过位置。检测方法和防御对策可以根据被攻击的连接的哪一端而大不相同：客户端还是服务器：
- en: Server XSS attacks can happen when a server is guilty of delivering malicious
    content as a part of its responses to client requests, because it was not adequately
    filtered or validated when it was originally input by another client, usually
    the attacking host. These attacks can be difficult for the client because the
    server bundles the attack with its HTML, and the client's browser is unable to
    differentiate the modified behavior of the server and therefore renders it faithfully,
    trusting both the intended and the plantedÂ nefarious code.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器XSS攻击可能发生在服务器在响应客户端请求时提供恶意内容的情况下，因为在最初由另一个客户端输入时未经充分过滤或验证。这些攻击对客户端来说可能很困难，因为服务器将攻击与其HTML捆绑在一起，客户端的浏览器无法区分服务器的修改行为，因此忠实地呈现它，信任既定的又是植入的恶意代码。
- en: Client XSS attacks, on the other hand, focus on the malicious code or modification
    being delivered inside the client's own facilities. The most popular form of these
    by far is the DOM-based XSS, which targets the page's state machine in the browser.
    Most of the time, when we talk about client-side XSS, we are referring to **DOM-based
    XSS**. DOM-based XSS attacks are a subset of the client XSS, and they take advantage
    of dynamic web application design. In most modern web applications, a browser,
    upon visiting a site, will build a **Document Object Model** (**DOM**) that can
    parse the HTML into objects in a tree. This parsing allows a scripting language
    (most of the time, we talk about JavaScript here, but other web content such as
    HTML, ActiveX, and Flash applies) to modify the contents of the HTML representing
    the tree dynamically. DOM-based XSS attacks are especially troubling in that the
    server may never see anything overtly bad in the script. Instead, the server unwittingly
    aids the attacker by referring to a variable local to the victim, not having the
    slightest clue that the variable is something bad (like a redirect, hook file,
    and so on).
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一方面，客户端XSS攻击侧重于在客户端自身设施内传递恶意代码或修改。其中最流行的形式是DOM-based XSS，它针对浏览器中页面的状态机。大多数时候，当我们谈论客户端XSS时，我们指的是DOM-based
    XSS。DOM-based XSS攻击是客户端XSS的一个子集，它们利用了动态Web应用程序设计。在大多数现代Web应用程序中，浏览器在访问网站时会构建一个可以将HTML解析为树状对象的**文档对象模型**（**DOM**）。这种解析允许脚本语言（大多数时候我们在这里谈论JavaScript，但其他Web内容如HTML、ActiveX和Flash也适用）动态修改表示树的HTML内容。DOM-based
    XSS攻击尤其令人担忧，因为服务器可能永远不会在脚本中看到任何明显的问题。相反，服务器在不知情的情况下通过引用受害者本地的变量来帮助攻击者，而不知道这个变量是一些坏东西（比如重定向、挂钩文件等）。
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It should be noted that both server and client-side XSS attacks can be either
    Stored or Reflective attacks. Most of the tools worth carrying in your bag, as
    they say, should be able to assist with scanning and exploiting most varieties.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，服务器端和客户端XSS攻击都可以是存储型或反射型攻击。大多数值得携带的工具应该能够帮助扫描和利用大多数变种。
- en: XSS targeting and the delivery
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: XSS的目标和交付
- en: As dire a threat as XSS presents to a web application and its users, it is shockingly
    easy to implement. Delivered in most cases through a browser or e-mail, all the
    attacker needs is a working knowledge of HTML and JavaScript and a target web
    server susceptible to this form of attack. Using these skills, the hacker can
    choose how big a net they are willing to cast. We must be wary of all forms of
    injection attacks, XSS included, as they can all wreak havoc on an application
    long before incident response can begin to remediate these issues.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: XSS对Web应用程序及其用户构成的威胁是如此严重，但实施起来却非常容易。在大多数情况下，攻击者只需要了解HTML和JavaScript的基本知识，以及一个容易受到这种攻击形式影响的目标Web服务器。利用这些技能，黑客可以选择要覆盖的范围有多大。我们必须警惕所有形式的注入攻击，包括XSS，因为它们都可能在事件响应开始修复这些问题之前对应用程序造成严重破坏。
- en: With stored XSS, hackers cast a big net and impact a large number of users with
    their malicious script.Â  This is wonderful if the potential users of the application
    are predominantly in scope, and the attack is more straightforward becauseÂ no
    social engineering is required to seed the script. That being said, it is for
    these reasons that stored XSS must be used sparingly. There is no choice about
    which victims will report in, and thus more overhead is required on the attacker's
    part to discriminate between in- and out-of-scope victims. The wider potential
    audience also calls into question the fit for an ethical hack, as the potential
    for capturing data from collaterally damaged hosts is extremely high, and the
    customer will likely have concerns that need to be addressed. This makes the stored
    or persistent XSS attack very harmful to many people.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于存储型XSS，黑客可以覆盖范围更广，影响大量用户的恶意脚本。如果应用程序的潜在用户主要在范围内，这是很好的，而且攻击更加直接，因为不需要社会工程来植入脚本。也就是说，正因为这些原因，存储型XSS必须谨慎使用。没有选择哪些受害者会报告，因此攻击者需要更多的开销来区分范围内和范围外的受害者。更广泛的潜在受众也对道德黑客的适用性提出了质疑，因为从附带受损主机中捕获数据的潜力非常高，客户可能会有需要解决的担忧。这使得存储型或持久型XSS攻击对许多人造成了严重伤害。
- en: Reflective XSS is well worth the effort upfront, as the phishing campaign, tainted
    link, or other means of delivery is more precise, and thus limits collateral damage.Â 
    This also enables the hacker or tester to focus on the impacted set of targets
    and virtually guarantees that the collected data is collected from users of interest.
    While the potential damage to a victim is commensurate with the stored XSS attack,
    the victim or victims are intended, so this makes it safer and worth the effort.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 反射型XSS在前期投入的努力是非常值得的，因为钓鱼活动、有污染的链接或其他交付手段更精确，因此限制了附带损害。这也使黑客或测试人员能够专注于受影响的目标集，并几乎可以保证收集到的数据来自感兴趣的用户。虽然受害者的潜在损害与存储型XSS攻击相当，但受害者是有意的，因此这使得它更安全，也更值得投入努力。
- en: Seeing is believing
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 眼见为实
- en: '* * *'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: When reporting to a customer on the presence of a web application's vulnerabilities,
    most test reports will show scans that identify just theÂ possibility a vulnerability
    exists (identification) but also go a step further and actually demonstrate that
    an exploit of the vulnerability was successful (confirmation). Arachni, ZAP, Burp
    Suite, and other vulnerability assessment tools can help with the identification
    effort. Some of these tools can assist with confirmation, but most testers will
    confirm using independent XSS-focused tools or methods to mimic the behavior of
    the exploit when employed by hackers. A quick search of your favorite search engine
    will see that there are some leading candidates, but we'll talk about the most
    popularly discussed ones, and then look at how the stalwarts can enable us to
    put our targets through their paces.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在向客户报告网页应用程序漏洞存在时，大多数测试报告将显示扫描结果，仅识别漏洞可能存在（识别），还会进一步展示漏洞利用成功的确认（确认）。Arachni、ZAP、Burp
    Suite和其他漏洞评估工具可以帮助进行识别。其中一些工具可以协助确认，但大多数测试人员会使用独立的XSS工具或方法来确认，以模仿黑客利用漏洞时的行为。快速搜索您喜爱的搜索引擎会发现一些领先的候选者，但我们将讨论最受欢迎的候选者，然后看看这些老牌工具如何帮助我们对目标进行测试。
- en: Don't run with XSSer(s)!
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不要使用XSSer！
- en: One of the quickest and to-the-point tools available in Kali for XSS testing
    isÂ **XSSer** (sometimes pronounced *scissor*). As a tool, XSSer serves one function,
    which is to test for the presence of potential XSS vulnerabilities on a web application
    and offer up quick, non-controversial validation URL strings to run a check against
    them. XSSer is one of those rare tools that can give you awesome capability with
    minimal know-how; but with an experienced hand, it can be tailored with surgical
    precision.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kali中用于XSS测试的最快速、直接的工具之一是XSSer（有时发音为“scissor”）。作为一种工具，XSSer只有一个功能，那就是测试网页应用程序上潜在XSS漏洞的存在，并提供快速、无争议的验证URL字符串来检查它们。XSSer是那种可以让您以最少的知识获得强大功能的稀有工具；但在经验丰富的人手中，它可以被精确地定制。
- en: 'You can use XSSer either as a CLI tool or with its GUI wrapper, which is a
    fine way to build CLI queries with the help of a more intuitive wrapper. To use
    XSSer in the GUI mode, you can simply type the following in a terminal session:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将XSSer用作CLI工具，也可以使用其GUI包装器，这是一种通过更直观的包装器构建CLI查询的好方法。要在GUI模式下使用XSSer，您只需在终端会话中输入以下内容：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: XSSer is a fine tool for running mundane alert-based test scripts against websites
    to determine their susceptibility. That being said, I find that XSSer suffers
    from neglect since its last published version was posted in 2013, four years prior
    to the writing of this text and a few revisions of Metasploit past.Â  In fact,
    the latest version was more applicable to Backtrack, but still provides a useful
    wizard and some educational value. Against specific targets, however, I find that
    it is both buggy and limited in application when compared to more current tools.
    It is worth a look, but I would recommend concentrating on some more fully-featured
    tools, such as BeEF and Metasploit.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: XSSer是一个用于运行针对网站的普通基于警报的测试脚本的良好工具，以确定它们的易受攻击性。话虽如此，我发现XSSer自从2013年发布最新版本以来就备受忽视，而这篇文章的撰写时间则是四年前，而且Metasploit也经历了几次修订。事实上，最新版本更适用于Backtrack，但仍然提供了有用的向导和一些教育价值。然而，针对特定目标，我发现与更现代的工具相比，它既存在bug又应用受限。它值得一看，但我建议集中精力研究一些更全面的工具，比如BeEF和Metasploit。
- en: Stored XSS with BeEF
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: BeEF中的存储型XSS
- en: The **Browser Exploitation Framework** (**BeEF**, available at [http://beefproject.com](http://beefproject.com/))
    is a tool we took a look at in *Penetration Testing with the Raspberry Pi, Second
    EditionÂ *([https://www.packtpub.com/networking-and-servers/penetration-testing-raspberry-pi-second-edition](https://www.packtpub.com/networking-and-servers/penetration-testing-raspberry-pi-second-edition))*,Â *where
    we discussed its general use as a honeypot or malicious web server. These same
    capabilities make BeEF a fantastic tool for the delivery and subsequent management
    of a variety of XSS attacks. What makes BeEF powerful is that it leverages a single
    hook script in internet browsers for its attack, and because of the XSS vulnerability
    in the web server, it can evade most controls employed by more paranoid or better
    trained victims. Short of blocking various HTML data types completely, a perfectly
    configured client can still be run because of the trusted relationship exploited
    by the attacker.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器利用框架（BeEF，网址为[http://beefproject.com](http://beefproject.com/)）是我们在《使用树莓派进行渗透测试，第二版》中讨论过的工具，我们在那里讨论了它作为蜜罐或恶意网络服务器的一般用途。这些相同的功能使BeEF成为传递和随后管理各种XSS攻击的绝佳工具。BeEF之所以强大，是因为它利用互联网浏览器中的单个钩子脚本进行攻击，由于Web服务器中的XSS漏洞，它可以规避大多数更偏执或训练有素的受害者采用的控制。除了完全阻止各种HTML数据类型之外，一个完美配置的客户端仍然可以运行，因为攻击者利用的是受害者的信任关系。
- en: BeEF, after hooking the victim, is capable of assessing the inherent vulnerabilities
    of the browser and operating system combination. Based on these findings, BeEF
    offers a range of command modules that can be launched, such as taking screenshots,
    scraping credentials or exfiltrating cookies, or even triggering a beep sound.
    Hooked systems can only be accessed while they are online. However, once hooked,
    BeEF can track when a system establishes internet connectivity to continue launching
    commands against that system. Pretty slick, and very scary!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: BeEF在钩住受害者后，能够评估浏览器和操作系统组合的固有漏洞。根据这些发现，BeEF提供了一系列可以启动的命令模块，例如截取屏幕截图、抓取凭据或外泄cookie，甚至触发蜂鸣声。被钩住的系统只能在在线时访问。但是，一旦被钩住，BeEF可以跟踪系统何时建立互联网连接，以继续对该系统发出命令。非常巧妙，也非常可怕！
- en: 'To show this in action and help understand the power of a Stored XSS attack,
    we''ll use the BeEF hook script and point the client to our Kali machine''s BeEF
    instance. The following screenshot shows our test scenario, where the following
    are configured:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示这一点并帮助理解存储型XSS攻击的威力，我们将使用BeEF钩子脚本并将客户端指向我们Kali机器上的BeEF实例。下图显示了我们的测试场景，其中配置了以下内容：
- en: '**Attacker''s machine**: Kali VM is running a BeEF server, listening on all
    interfaces (172.16.30.128 is the external IP address)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**攻击者的机器**：Kali虚拟机正在运行一个BeEF服务器，监听所有接口（172.16.30.128是外部IP地址）'
- en: '**Web Server/Application**: OWASP BWA VM, specifically the Mutillidae web application'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web服务器/应用程序**：OWASP BWA虚拟机，特别是Mutillidae Web应用程序'
- en: '**Client**:Â Windows 7 VM running Internet Explorer 10 (evaluation copy)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端**：运行Internet Explorer 10的Windows 7虚拟机（评估副本）'
- en: The attacker can remotely execute command modules from the Kali/BeEF control
    headend while the hooked victim continues to use the internet, typically oblivious
    to the compromise. In an actual attack or a black-box attack as seen in the following
    screenshot, the hacker will more often than not deploy a cloud or otherwise temporary
    instance of Kali or a similar machine and masquerade it behind several layers
    of obfuscation (VPN, TOR, proxy, and so on) to act as the attacking machine and
    make attribution or detection harder on the target server. Regardless of the attacking
    machine's location, in a stored XSS, the vulnerable server will continue to help
    us hook our prey.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以在被钩住的受害者继续使用互联网的同时，从Kali/BeEF控制端远程执行命令模块，通常对被攻击者毫不知情。在实际攻击或黑盒攻击中，黑客往往会部署一个临时的Kali或类似的机器实例，并将其伪装在几层混淆（VPN、TOR、代理等）之后，以充当攻击机器，并使目标服务器上的归因或检测更加困难。无论攻击机器的位置如何，在存储型XSS中，易受攻击的服务器将继续帮助我们钩住我们的猎物。
- en: '![](img/B03918_06_03-1.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_06_03-1.png)'
- en: Our Stored XSS scenario with BeEF
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的BeEF存储型XSS场景
- en: 'We can first launch BeEF-XSS from the GUI applications menu, the **`Favorites`**Â bar,
    or from the CLI by navigating to the BeEF directory (`cd /usr/share/beef-xss`)
    and then running the `beef` script using `./beef`. As it starts up, the **`Terminal`**
    session will show us the general URL for the user interface (`UI URL`Â in red)
    and the script we''ll want to use to hook our prey (`Hook`, in blue), as seen
    here:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以首先从GUI应用程序菜单、**`Favorites`**栏或通过导航到BeEF目录（`cd /usr/share/beef-xss`）然后使用`./beef`运行`beef`脚本来启动BeEF-XSS。当它启动时，**`Terminal`**会话将向我们显示用户界面的一般URL（红色的`UI
    URL`）和我们想要用来钩住猎物的脚本（蓝色的`Hook`），如下所示：
- en: '![](img/B03918_06_04-1.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_06_04-1.png)'
- en: BeEF's Startup process tells us how to manage the instance and how to hook the
    browser.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: BeEF的启动过程告诉我们如何管理实例以及如何钩住浏览器。
- en: 'BeEF will automatically launch a browser session that you can log in to using
    the username and password of *beef*. When it is first fired up, the online and
    offline Browsers lists will be empty. We''ll open a new tab and visit the *Mutillidae
    Web Application* as a visiting attacker, where we can enter our hook script in
    a field sure to be seen by the poor victims (**`OWASP 2013`**Â |Â **`A3 - Cross
    Site Scripting (XSS)`**Â |Â **`Persistent (Second Order)`**Â |Â **`Add to your
    blog`**), as seenÂ here:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: BeEF将自动启动一个浏览器会话，您可以使用*beef*的用户名和密码登录。当它首次启动时，在线和离线浏览器列表将为空。我们将打开一个新标签并以攻击者的身份访问*Mutillidae
    Web Application*，在那里我们可以在一个肯定会被可怜的受害者看到的字段中输入我们的钩子脚本（**`OWASP 2013`** | **`A3
    - 跨站脚本（XSS）`** | **`持久（二次顺序）`** | **`添加到您的博客`**），如下所示：
- en: '![](img/B03918_06_05-1.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_06_05-1.png)'
- en: Mutillidae offers some mock-forms we can use for Stored XSS.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Mutillidae提供了一些我们可以用于存储型XSS的模拟表单。
- en: 'We''ll be presented with a blog entry form, in which we can drop our hook script
    (`<script src="img/hook.js"></script>`), and then click the **`Save Blog Entry`**
    button (as shown in the following screenshot):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到一个博客条目表单，在其中我们可以放置我们的钩子脚本（`<script src="img/hook.js"></script>`），然后点击**`Save
    Blog Entry`**按钮（如下图所示）：
- en: '![](img/B03918_06_06.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_06_06.png)'
- en: Planting our hook script on the web app's blog feature.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web应用的博客功能上种植我们的钩子脚本。
- en: Okay, let's switch hats and open up our poor, unsuspecting Windows 7 VM running
    IE 10! On the windows VM, we'll visit the blog as an observer â�� nothing crazy
    here. Just follow the path of **`OWASP 2013`**Â |Â **`A3 - Cross Site Scripting
    (XSS)`**Â |Â **`Persistent (Second Order)`**Â |Â **`View someone's blog`**Â as
    we see in the figure following, we'll want to see the inputs of all users. The
    page will show us all of the entries, including our anonymous user's input containing
    the script. We know that the blog pages are vulnerable because we saw it identifiedÂ inÂ [Chapter
    5](000.html#), *Proxy Operations with OWASP ZAP and Burp Suite*,Â testing as potentially
    possessing an XSS script vulnerability (as shown in figure following). Here we
    know that the server is not validating the contents of these entries before parroting
    them back in responses from subsequent victims.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们换个角色，打开我们那可怜的、毫无戒备的运行IE 10的Windows 7虚拟机！在Windows虚拟机上，我们将作为观察者访问博客 - 这里没有什么疯狂的。只需按照**`OWASP
    2013`** | **`A3 - 跨站脚本（XSS）`** | **`持久（二次顺序）`** | **`查看某人的博客`**的路径，如下图所示，我们将要查看所有用户的输入。页面将显示我们所有的条目，包括我们匿名用户的包含脚本的输入。我们知道博客页面是易受攻击的，因为我们在[第5章](000.html#)中看到它被识别为潜在的具有XSS脚本漏洞的测试（如下图所示）。在这里，我们知道服务器在将这些条目回显给后续受害者的响应之前没有验证这些条目的内容。
- en: '![](img/B03918_06_07.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_06_07.png)'
- en: Browsing to the affected blog from the victim site.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 从受害者网站浏览受影响的博客。
- en: Once we've navigated to the blog view (as shown in figure following), we'll
    see a blank space where the anonymous user apparently entered nothing. At this
    point, they have no reason to believe they have been hacked or were exposed to
    a malicious XSS attack.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们导航到博客视图（如下图所示），我们将看到一个空白空间，匿名用户显然没有输入任何内容。此时，他们没有理由相信自己已经被黑客入侵或者暴露于恶意的XSS攻击。
- en: '![](img/B03918_06_08-1.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_06_08-1.png)'
- en: All that wasted potential (script hidden) in an otherwise awesome blog.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 所有那些被浪费的潜力（脚本隐藏）都在一个非常棒的博客中。
- en: Our Kali box knows otherwise; looking at the control UI for our BeEF-XSS framework,
    we can see that the Windows 7 box running IE 10 has checked in and is reporting
    for duty. Because browsers are so helpful in announcing what they can and cannot
    support, BeEF has a pretty good idea as to what hacks and tricks we can accomplish
    with the victim we've just hooked, and in following screenshot, we see that I
    have searched for *cookie*-related commands, selected **`Get Cookie`**Â from the
    **`Browser`**Â | **`Hooked Domain`** part of the **`Module Tree`**, and run it
    to obtain a session cookie being used between the victim's browser and the Mutillidae
    web server. Other useful attacks that we can use, outside just proving that an
    XSS vulnerability exists, are those that can help us grab social media login statuses,
    installed software, browsing history, and anything else that can help us better
    characterize the target environment.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Kali盒子知道得更多；查看我们的BeEF-XSS框架的控制UI，我们可以看到运行IE 10的Windows 7盒子已经签到并报到。因为浏览器在宣布它们可以和不能支持的方面非常有帮助，BeEF对于我们刚刚钩住的受害者可以实现哪些黑客和技巧有一个很好的想法，在下面的截图中，我们看到我已经搜索了与*cookie*相关的命令，从**`Module
    Tree`**的**`Browser`** | **`Hooked Domain`**部分中选择了**`Get Cookie`**，并运行它以获取受害者浏览器和Mutillidae
    Web服务器之间正在使用的会话Cookie。除了证明存在XSS漏洞之外，我们还可以使用其他有用的攻击，这些攻击可以帮助我们抓取社交媒体登录状态、安装的软件、浏览历史以及其他任何可以帮助我们更好地描述目标环境的东西。
- en: '![](img/B03918_06_09.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_06_09.png)'
- en: Almost 200 Modules come with BeEF to help us turn browsers into extensions of
    us!
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: BeEF附带了近200个模块，帮助我们将浏览器变成我们的扩展！
- en: Keep in mind, we came here to pen-test the web application, not the users and
    the entire environment.Â  Unless you also have a red team sort of charter, steer
    clear of pulling anything outside any web-application-specific data.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们来这里是为了对Web应用进行渗透测试，而不是用户和整个环境。除非您还有红队类型的宪章，否则请避免在任何Web应用程序特定数据之外拉取任何内容。
- en: Here, phishy phishy!
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这里，鱼鱼！
- en: A reflected XSS attack follows a similar story, except that the user is employed
    to help hack themselves by tricking them to pass along the script. The phishing
    or link placement by the attacker replaces the form-based exploit and does require
    some work. **Phishing** involves sending a *lure*Â e-mail or web page to potential
    targets in the hope that they will believe their intent and click on one of the
    malicious links embedded within it. Phishing can often be used in other attacks
    (a simple redirect to a phishing site is still quite popular), but combining the
    targeted spamming with a redirect using a legitimate site, but a malicious script,
    can be downright nasty. That being said, let's discuss some of what attackers
    and we pen testers need to consider.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 反射型XSS攻击遵循类似的故事，只是用户被雇用来通过欺骗他们传递脚本来帮助自己进行黑客攻击。攻击者的钓鱼或链接放置取代了基于表单的利用，确实需要一些工作。**钓鱼**涉及向潜在目标发送一个*诱饵*电子邮件或网页，希望他们相信他们的意图，并单击其中一个嵌入其中的恶意链接。钓鱼通常可以用于其他攻击（简单地重定向到钓鱼网站仍然非常流行），但将有针对性的垃圾邮件与使用合法站点的重定向结合起来，但使用恶意脚本，可能会非常恶劣。话虽如此，让我们讨论一些攻击者和我们渗透测试人员需要考虑的内容。
- en: Building a target list can be labor-intensive; in fact, target lists are a popular
    service offering on dark-web hacking sites. In pen testing, OSINT and social engineering
    using tools such as your browser, Maltego, or social media can save the day, allowing
    us to leverage the information gathered to help us assess who it is we are after.
    In our testing, IT personnel, so called *C-suite* executives (especially the **Chief
    Information Officer** (**CIO**), **Chief Information Security Officer** (**CISO**),
    and any other technology-related positions), and any other people associated with
    security, operations, architecture, or application development at the site should
    be considered.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 构建目标列表可能需要大量工作；事实上，目标列表是暗网黑客网站上的一项热门服务。在渗透测试中，使用诸如浏览器、Maltego或社交媒体等工具进行OSINT和社会工程可以挽救一天，让我们能够利用收集到的信息来帮助我们评估我们追踪的是谁。在我们的测试中，应该考虑IT人员，所谓的*C-suite*高管（特别是**首席信息官**（**CIO**）、**首席信息安全官**（**CISO**）和任何其他与安全、运营、架构或应用开发相关的技术职位），以及与站点相关的任何其他人员。
- en: Note
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Large-scale hacks like that conducted by Russian hackers against [https://in.yahoo.com/?p=us](https://in.yahoo.com/?p=us)Â in
    2014 ([https://www.justice.gov/opa/press-release/file/948201/download](https://www.justice.gov/opa/press-release/file/948201/download))
    often begin with a smaller-focus phishing campaign against known employees and
    a credible reason for them receiving the e-mail. In this case, the information
    was used to help forge cookies and steal access to over 500 million accounts.Â 
    This was no fun for many of us.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 像俄罗斯黑客2014年对[https://in.yahoo.com/?p=us](https://in.yahoo.com/?p=us)进行的大规模黑客攻击（[https://www.justice.gov/opa/press-release/file/948201/download](https://www.justice.gov/opa/press-release/file/948201/download)）通常始于对已知员工的小规模钓鱼攻击，以及他们收到电子邮件的可信原因。在这种情况下，这些信息被用来帮助伪造Cookie并窃取超过5亿个帐户的访问权限。这对我们中的许多人来说并不好玩。
- en: Attackers will then need a willing mail relay or server to allow a mass mailing
    of the lure to their intended targets. There are services for hire that the bad
    guys will use (for example, notorious spam houses such as Send-Safe), or they
    may instead choose to deploy spambots on legitimate infrastructure or, worse yet,
    compromise a web server, and turn it into a PHP-based e-mail server or gateway.
    This last method is especially nefarious, because if they are able to compromise
    the target corporation's webmail service, they can operate as if they were completely
    legitimate.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者随后需要一个愿意的邮件中继或服务器，以允许将诱饵大规模发送给他们的目标。有一些服务是供雇佣的坏人使用的（例如，臭名昭著的垃圾邮件发送服务，如Send-Safe），或者他们可能选择在合法基础设施上部署垃圾邮件机器人，或者更糟糕的是，攻击一个Web服务器，并将其变成基于PHP的电子邮件服务器或网关。最后一种方法特别恶劣，因为如果他们能够攻击目标公司的网络邮件服务，他们可以像完全合法一样运作。
- en: 'Now, we just need the bait! A phishing-based delivery of the link helps limit
    unwanted target acquisition and is easier to pass off without attribution and
    collateral damage than other methods of enticing Reflected XSS, such as honeypot
    sites and MITM (with tools such as SET, covered in [Chapter 3](000.html#)*, Stalking
    Prey Through Target Recon).* An example is shown in following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只需要诱饵！通过链接进行基于钓鱼的交付有助于限制不需要的目标获取，并且比其他引诱反射型XSS的方法（例如蜜罐网站和MITM（使用SET等工具，见[第3章](000.html#)*，通过目标侦察跟踪猎物））更容易脱离归因和附带损害。下面的截图显示了一个示例：
- en: '![](img/B03918_06_10.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_06_10.png)'
- en: Sample phishing lure, used to test employees. Every link in here is potentially
    tainted.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 用于测试员工的样本钓饵。这里的每个链接都有可能被污染。
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Hyperlinks, graphics, anything interactive in the page or the e-mail can be
    a useful lure, and when attacking a specific person or team, your efforts on social
    media will have a huge impact on your success rate here.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 页面或电子邮件中的超链接、图形或任何交互式内容都可能成为有用的诱饵，当攻击特定的人或团队时，您在社交媒体上的努力将对您的成功率产生巨大影响。
- en: Let's go Metasploiting
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 让我们开始Metasploiting
- en: A lot of the tools we've used in this book so far are focused on web applications
    and have proven quite handy in assessing the vulnerabilities that may exist in
    a website. One of the more general tools in use across all pen testing domains,
    Metasploit ([https://www.metasploit.com](https://www.metasploit.com)), actually
    offers some great value in testing against many of the top web app vulns, XSS
    included. Metasploit likely needs no introduction; chances are you are using it
    as a significant part of your workflow or methodology. That being said, it is
    a framework that incorporates a wide variety of extensible recon and scanning
    modules to populate a database of hosts and corresponding vulns. This database
    allows Metasploit to then pivot into the exploitation phase, where exploits can
    be launched actively or in some cases are bundled into a payload for file-based
    delivery. The community surrounding Metasploit is very active, and literally hundreds
    of plugins and modules have been crafted to make Metasploit everyone's favorite
    foundational pen test tool.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在本书中使用的许多工具都专注于Web应用程序，并且在评估网站可能存在的漏洞方面非常有用。在所有渗透测试领域中使用的更通用的工具之一，Metasploit
    ([https://www.metasploit.com](https://www.metasploit.com))，实际上提供了一些针对许多顶级Web应用程序漏洞的测试的巨大价值，包括XSS。Metasploit可能不需要介绍；很有可能您正在将其作为工作流程或方法论的重要部分。也就是说，它是一个框架，包含各种可扩展的侦察和扫描模块，用于填充主机和相应漏洞的数据库。这个数据库允许Metasploit进入利用阶段，其中可以主动启动利用或在某些情况下将其捆绑到用于基于文件的传递的有效载荷中。围绕Metasploit的社区非常活跃，实际上已经制作了数百个插件和模块，使Metasploit成为每个人最喜欢的基础渗透测试工具。
- en: Building your own payload
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 构建您自己的有效载荷
- en: Working with BeEF or even within a standard web server facility on your device,
    you can use Metasploit's **meterpreter** capabilities to help you gain shell access
    to affected hosts. Meterpreter is a payload Metasploit can deliver into clients
    that work within the **Dynamically Linked Libraries** (**DLLs**) to establish
    a secure, covert channel for communications between the hacker and the target;
    it gives the hacker a Ruby-based shell to the target that can then be used to
    do the hacker's bidding. Why do we want this? In attacking web applications, lateral
    movement through their environment of clients can really help us gain a foothold,
    compromise trusted hosts, and find adjacent servers we can use to run complementary
    tasks, such as mail servers, domain controllers, and so on. A reflective XSS attack
    is a great way to deliver this script. Users are pretty wary of attachments these
    days (sure took them long enough!) ,so slipstreaming our hook files and payloads
    into an invisible script gives us a great means of gaining access to well-trained
    victim computers.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的设备上使用BeEF甚至标准的Web服务器设施，您可以使用Metasploit的**meterpreter**功能来帮助您获得对受影响主机的shell访问权限。Meterpreter是Metasploit可以传递到客户端的有效载荷，它可以在**动态链接库**（**DLLs**）中工作，以建立安全的隐秘通道，用于黑客与目标之间的通信；它为黑客提供了一个基于Ruby的shell，可以用来执行黑客的命令。我们为什么要这样做？在攻击Web应用程序时，通过客户端环境的横向移动可以帮助我们真正获得立足点，compromise
    受信任的主机，并找到我们可以用来运行补充任务的相邻服务器，比如邮件服务器，域控制器等。反射型XSS攻击是传递此脚本的绝佳方式。用户现在对附件非常警惕（花了他们很长时间！），因此将我们的hook文件和有效载荷混入一个不可见的脚本中，为我们提供了一个很好的方式来访问经过良好训练的受害者计算机。
- en: To do this, we will create a payload, encode it so that it bypasses traditional
    security defenses, host it on a server under our control, and then craft a script
    around it for the XSS as seen in following screenshot. The same social engineering
    approaches will hold true here, but this gives us another means by which we can
    compromise the host. Browser control is nice, but shell access is even better!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们将创建一个有效载荷，对其进行编码，以绕过传统的安全防御，将其托管在我们控制下的服务器上，然后围绕它编写一个脚本，用于 XSS，如下面截图所示。在这里同样适用社会工程学方法，但这给了我们另一种方式来
    compromise 主机。浏览器控制很好，但shell访问更好！
- en: '![](img/B03918_06_11-1.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_06_11-1.png)'
- en: We can use Metasploit as our C2 head-end, even crafting custom payloads.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Metasploit作为我们的C2头端，甚至制作自定义有效载荷。
- en: 'We first start up the Metasploit Framework''s **msfconsole** and select our
    payload of choice, which in this case is the Meterpreter Reverse TCP payload.
    We can do this by entering the `use payload/windows/shell/reverse_tcp` command
    in the `msf` prompt. A **`quick show`** options will help us see what we can configure,
    as seen in the following screenshot.Â As with general exploits, we can see the
    payload''s options in following screenshot using `show options` and see the commands
    with `-h`Â to guide ourselves through the entire operation:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先启动Metasploit Framework的**msfconsole**，并选择我们选择的有效载荷，这种情况下是Meterpreter Reverse
    TCP有效载荷。我们可以通过在`msf`提示符中输入`use payload/windows/shell/reverse_tcp`命令来实现这一点。**`quick
    show`**选项将帮助我们查看可以配置的内容，如下面的截图所示。与一般的利用一样，我们可以使用`show options`查看有效载荷的选项，并使用`-h`查看命令，以指导我们完成整个操作：
- en: '![](img/B03918_06_12.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_06_12.png)'
- en: Initial stages of payload creation â�� setting up options..
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 创建有效载荷的初始阶段-设置选项..
- en: 'Metasploit can produce different file formats for an exploit. It can also ensure
    certain bytes are not used (`x00` is a universally unacceptable one, so we''ll
    pull that out). The payload tool can also do the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit可以为攻击生成不同的文件格式。它还可以确保某些字节不被使用（`x00`是一个普遍不可接受的字节，所以我们会将其去掉）。有效载荷工具还可以执行以下操作：
- en: It can pad or append additional bytes (`-s` to add a NOP slide)
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以填充或附加额外的字节（`-s`添加NOP滑块）
- en: It can use a different programming language other than the default Ruby (for
    exampleÂ `-t java` or `â��t c`)
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以使用除默认的Ruby之外的其他编程语言（例如`-t java`或`-t c`）
- en: It can apply encoders (show encoders to see them, `-e <encoder>` to change encoders)
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以应用编码器（显示编码器以查看它们，`-e <编码器>`更改编码器）
- en: It can iterate and encode over multiple passes (`-I <number of iterations>`)
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以迭代并编码多次（`-I <迭代次数>`）
- en: All of these help Metasploit to hide and obscure the payload to evade typical
    signature-based, anti-virus programs with stunning success. Seeing how easy this
    is, one can understand why traditional antivirus products are unable to defend
    against these new, morphing threats.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都帮助Metasploit隐藏和模糊有效载荷，以成功逃避典型基于签名的反病毒程序。看到这是多么容易，人们就能理解为什么传统的防病毒产品无法抵御这些新的、变形的威胁。
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Signature detection looks for specific characteristics in an attack. If you
    find your attack isn't working, attempt to encode it another way, and send it
    again. In many cases, adding enough padding, tweaks, or other manipulation will
    bypass detection, because now it looks like a new file. Other techniques include
    breaking up the file into smaller files or encryption.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 签名检测寻找攻击中的特定特征。如果发现您的攻击不起作用，请尝试以另一种方式对其进行编码，然后再次发送。在许多情况下，添加足够的填充、调整或其他操作将绕过检测，因为现在它看起来像一个新文件。其他技术包括将文件分成较小的文件或加密。
- en: There are a ton of options for us to modify and custom-craft our own payloads.
    For now, let's omit the `x00` byte, iterate 3 times, and export it into an executable
    file for our use as seen in the following screenshot.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有很多选项可以修改和定制我们自己的有效载荷。现在，让我们省略`x00`字节，迭代3次，并将其导出为一个可执行文件供我们使用，如下图所示。
- en: '![](img/B03918_06_13.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_06_13.png)'
- en: Metasploit payload generation can customize code that will bypass anything with
    practice.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit有效载荷生成可以定制代码，可以练习绕过任何东西。
- en: On our desktop, we now have a shiny new **.exe** that will land on a Windows
    platform and execute. Now this is where social engineering comes into play, meaning
    we can name this executable file something the user expects to install and include
    it with a social engineering campaign. If we can convince a Windows user to install
    it, we will be granted a backdoor with root access to that system, assuming everything
    functions as expected. This concept can be useful for other attack examples presented
    later in this chapter, where our custom malware payload can strike.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的桌面上，现在有一个闪亮的新**.exe**，它将在Windows平台上运行并执行。现在社会工程学就派上用场了，这意味着我们可以将这个可执行文件命名为用户期望安装的内容，并将其包含在社会工程活动中。如果我们能说服Windows用户安装它，我们将获得对该系统的具有根访问权限的后门，假设一切都按预期运行。这个概念对于本章后面呈现的其他攻击示例可能会有用，我们的自定义恶意软件有效载荷可以发挥作用。
- en: Note
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Our choice of delivery was purposely bland, depending on the restrictions in
    place on your intended targets, you may have to forgo the tidy executable approach
    and go for a more covert path, such as a Java or Python script that somehow avoids
    kicking off Windows **User Access Controls** (**UAC**) or other watchdogs that
    may be in place. I also made this all happen within the msfconsole view, which
    is where I tend to spend more time.Â  If you are finding that you fire up Metasploit
    purposely for the creation of the payload, you can opt to use **msfvenom**.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择交付方式故意平淡，取决于您打算的目标上的限制，您可能不得不放弃整洁的可执行方法，而选择更隐秘的路径，比如一个Java或Python脚本，以某种方式避免触发Windows**用户访问控制**（**UAC**）或其他可能存在的看门狗。我也在msfconsole视图中完成了所有这些操作，因为我倾向于在那里花更多的时间。如果您发现自己启动Metasploit是为了创建有效载荷，您可以选择使用**msfvenom**。
- en: Every good payload needs a handler
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 每个良好的有效载荷都需要一个处理程序
- en: 'Our payload, upon executing, needs to have something to talk to, in case it
    gets lonely or unruly. In Metasploit, that function is provided by a **handler**.
    We can simply create a handler for the type of payload we deliver, and in doing
    so, ensure that when we gain access to a system, we are there and able to take
    advantage of it when it happens. Handlers act as our **command and control** (**C2**
    or **C&C**) connection to the target, and present us with the shell environment
    that we can use to manipulate the target with impunity (as shown in following
    screenshot):'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的有效载荷在执行时需要有东西可以交流，以防它感到孤独或难以控制。在Metasploit中，这个功能由**处理程序**提供。我们可以简单地为我们传递的有效载荷类型创建一个处理程序，这样做可以确保当我们访问系统时，我们在那里并且能够利用它。处理程序充当我们与目标的**命令和控制**（**C2**或**C&C**）连接，并为我们提供一个可以无限制地操纵目标的shell环境（如下图所示）：
- en: '![](img/B03918_06_14-1.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_06_14-1.png)'
- en: Setting up the handler for our payload.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为我们的有效载荷设置处理程序。
- en: With a quick `exploit` command, we are now running and ready to accept incoming
    traffic from our fresh victims. Now, the handler is ready and your target identified;
    these two kids should meet! Now, if only I had some way to get the user to trust
    my file.Â  Hmmmâ�¦
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通过快速的`exploit`命令，我们现在正在运行并准备接受来自我们新受害者的流量。现在，处理程序已经准备好，您的目标已经确定；这两个孩子应该见面了！现在，如果我有办法让用户相信我的文件就好了。嗯...
- en: Seal the deal â�� Delivering shell access
  id: totrans-108
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 敲定交易-提供shell访问
- en: Let's place our executable in a quick-and-dirty Apache web server's default
    folder on the Kali VM, and craft a script to send along to prospective targets
    to deliver a reflected XSS JavaScript that now points the victim's browser to
    download the executable.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将可执行文件放在Kali VM上一个快速而简单的Apache web服务器的默认文件夹中，并制作一个脚本发送给潜在目标，以传递一个反射的XSS JavaScript，现在将受害者的浏览器指向下载可执行文件。
- en: 'This is what it looks like:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是它的样子：
- en: '[PRE1]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When we drop this into a quick and dirty e-mail (to my Windows 7 VM with IE
    9), we can assume a better than 50% chance that the user will see the `updater.exe`
    filename, associate it with my trusted web application, and it will execute. Watching
    this unfold on our Kali terminal session, we get the wonderful news that they
    have met and are now in touch! Meterpreter now acts as a prompt for us, and a
    quick `dir` command shows us the contents of the running directory (as shown in
    following screenshot).Â  It is plain to see we're in a Windows machine's head
    now; but what can we do from here?
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将这个快速而肮脏的电子邮件发送到我的Windows 7虚拟机上，我们可以假设用户有超过50%的机会看到`updater.exe`文件名，并将其与我信任的网络应用程序相关联，然后执行。在我们的Kali终端会话中观察到这一情况，我们得到了一个好消息，他们已经相遇并且现在联系上了！Meterpreter现在作为我们的提示符，一个快速的`dir`命令显示了我们正在运行的目录的内容（如下图所示）。很明显，我们现在已经进入了Windows机器的内部；但是我们可以从这里做些什么呢？
- en: '![](img/B03918_06_15-1.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_06_15-1.png)'
- en: Congratulations, we now have remote shell access!
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，我们现在有了远程shell访问！
- en: 'Meterpreter is pretty powerful stuff; with this access, you can now manage
    this victim''s computer without their knowledge.Â  Here are just some of the things
    that can be useful in our web app pen test:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Meterpreter非常强大；有了这个访问权限，你现在可以在不被对方知晓的情况下管理受害者的计算机。以下是在我们的网络应用程序渗透测试中可能有用的一些东西：
- en: Dump hashes and manipulate or steal cookies
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转储哈希并操纵或窃取cookie
- en: Covertly or overtly use system webcams and microphones
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 秘密或公开地使用系统网络摄像头和麦克风
- en: Conduct keylogging
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进行键盘记录
- en: Upload, download, edit, delete, create, move, and search for files and directories
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传、下载、编辑、删除、创建、移动和搜索文件和目录
- en: Kill or spawn processes, modify the registry, or shutdown/restart/hibernate
    the machine
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 杀死或生成进程，修改注册表，或关闭/重新启动/休眠机器
- en: See network and proxy configurations and configure port forwarding
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看网络和代理配置并配置端口转发
- en: View system and user info and escalate privileges
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看系统和用户信息并提升权限
- en: All in all, this is some scary stuff, and it should be clearly recognized that
    web applications have a responsibility to ensure they do not put their users in
    this situation.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，这是一些可怕的东西，应该清楚地认识到网络应用程序有责任确保他们不会让他们的用户陷入这种境地。
- en: Were we to run into newer browsers or more heavily defended hosts, this simple
    exe-based exploit would not likely go far. With some practiced use of the more
    advanced Metasploit capabilities, creative payloads, or even file-free exploits,
    these defensive measures can, and often are, circumvented.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们遇到更新的浏览器或者更加防御严密的主机，这种简单的基于exe的利用可能不会有太大作用。通过更高级的Metasploit功能、创造性的有效负载，甚至是无文件利用的熟练使用，这些防御措施通常可以被规避。
- en: Metasploit's web-focused cousin â�� Websploit
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Metasploit的以网络为焦点的表亲——Websploit
- en: Â Metasploit's scope for scanning and exploiting capabilities is staggering,
    and with the open extensions through plugins and modules, it's obtained a well-earned
    reputation for versatility and power. Sometimes, however, you are looking for
    a web application focus, and this is where a similar open-source framework called
    **Websploit** ([https://sourceforge.net/p/websploit/wiki/Home/](https://sourceforge.net/p/websploit/wiki/Home/))
    comes into play. Just like Metasploit, it offers a command-line focused approach
    to calling and loading modules. It also shares the extensibility through plugins
    and modules that has helped Metasploit stay at the forefront of pen testing tools,
    but instead of being an all-inclusive suite, it focuses on many of the vulnerabilities
    specific to our role as web penetration testers and ethical hackers.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit的扫描和利用能力范围令人震惊，通过插件和模块的开放扩展，它获得了当之无愧的多功能和强大的声誉。然而，有时你可能在寻找一个网络应用程序的焦点，这就是一个名为**Websploit**（[https://sourceforge.net/p/websploit/wiki/Home/](https://sourceforge.net/p/websploit/wiki/Home/)）的类似开源框架发挥作用的地方。就像Metasploit一样，它提供了一个以命令行为重点的方法来调用和加载模块。它还共享了通过插件和模块的可扩展性，这些都帮助Metasploit保持在渗透测试工具的前沿，但它不是一个全包套件，它专注于我们作为网络渗透测试人员和道德黑客所特有的许多漏洞。
- en: 'The list of modules and plugins from their Wiki is a big giveaway as to its
    purpose:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 从他们的Wiki中列出的模块和插件清单可以很清楚地看出它的目的：
- en: '**Autopwn**: This is borrowed from Metasploit to scan and exploit target services/servers'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Autopwn**：这是从Metasploit借来的，用于扫描和利用目标服务/服务器'
- en: '**wmap**: This can scan or crawl targets borrowed from Metasploit `wmap` plugin'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**wmap**：这可以扫描或爬取从Metasploit `wmap`插件借来的目标'
- en: '**Format infector**: This injects reverse and BIND payloads into the file format'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**格式感染器**：将反向和BIND有效负载注入文件格式'
- en: '**Phpmyadmin**: This searches the target `phpmyadmin` login page'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Phpmyadmin**：搜索目标的`phpmyadmin`登录页面'
- en: '**lfi**: This can scan and bypass local file inclusion vulns and bypass some
    WAFs'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**lfi**：这可以扫描和绕过本地文件包含漏洞并绕过一些WAF'
- en: 'Apache users: This can search a server username directory (when used with Apache
    web servers)'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache用户：可以搜索服务器用户名目录（与Apache web服务器一起使用时）
- en: '**Dir Bruter**: Brute force target directory with wordlist'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Dir Bruter**：使用单词列表对目标目录进行暴力破解'
- en: '**Admin finder**: Search admin and login page of target'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理员查找器**：搜索目标的管理员和登录页面'
- en: '**MLITM attack**: Man left in the Middle, XSS phishing attacks'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MLITM攻击**：中间人攻击，XSS钓鱼攻击'
- en: '**MITM**: Man in the Middle attack'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MITM**：中间人攻击'
- en: '**Java applet attack**: Java signed applet attack'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java小程序攻击**：Java签名小程序攻击'
- en: '**MFOD attack vector**: Middle Finger of Doom attack vector'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MFOD攻击向量：毁灭之中指攻击向量
- en: '**USB infection attack**: Create executable backdoor for infecting USB for
    Windows'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**USB感染攻击**：为Windows创建可执行的后门以感染USB'
- en: '**ARP DOS**: ARP cache Denial of Service attack with random MAC'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ARP DOS**：随机MAC的ARP缓存拒绝服务攻击'
- en: '**Web killer attack**: Down your website on network (TCPKILL)'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web killer攻击**：关闭网络上的网站（TCPKILL）'
- en: '**Fake update attack**: This canÂ create a fake update page for target OS'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**假更新攻击**：可以为目标操作系统创建一个假的更新页面'
- en: '**Fake access point attack**: This canÂ create fake AP and sniff victims''
    information'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**假接入点攻击**：可以创建假的接入点并窃取受害者的信息'
- en: As this chapter is all about XSS, the DOM-based **Man Left in the Middle** (**MLITM**)
    attack is the tool we are after, so let's take a look at how we leverage the module.
    You'll want to download the latest version, extract it from the tarball, and then
    use the install script.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本章主要讨论XSS，DOM-based **Man Left in the Middle** (**MLITM**)攻击是我们要使用的工具，所以让我们看看如何利用这个模块。您需要下载最新版本，从tarball中提取出来，然后使用安装脚本。
- en: Once we've got it installed, we can simply invoke the `websploit` command from
    a terminal session, and it'll start up Websploit. From here, we'll want to use
    network/mlitm. As modules go, you don't get simpler than the MLITMÂ tool.Â  There
    are no options to consider, as basically this module consists of a listening web
    server (similar to a handler) and a Python module (`thebiz.py`) that acts as a
    default payload.Â  You can certainly craft other payloads; but much like any XSS
    attack, our goal is to place a script in the user's path that they trust, and
    then use it to redirect their browser to our attacking server, where this payload
    can be installed from and information or action can be orchestrated.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们安装好了，我们可以简单地从终端会话中调用`websploit`命令，它就会启动Websploit。从这里，我们将使用network/mlitm。就模块而言，MLITM工具再简单不过了。没有需要考虑的选项，因为基本上这个模块包括一个监听Web服务器（类似于处理程序）和一个充当默认有效载荷的Python模块（`thebiz.py`）。您当然可以制作其他有效载荷；但就像任何XSS攻击一样，我们的目标是将一个脚本放在用户信任的路径中，然后使用它将他们的浏览器重定向到我们的攻击服务器，从那里可以安装这个有效载荷并进行信息或操作的编排。
- en: The script I used in this attack was pretty simple; we want to introduce the
    victim browser to our C2 server/attack box and allow the webserver, Websploit,
    which is running on a default port of `8000` for this purpose, to deliver the
    payload and establish our channel:Â
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这次攻击中使用的脚本非常简单；我们希望将受害者浏览器引入我们的C2服务器/攻击盒，并允许运行在默认端口`8000`上的Web服务器Websploit传递有效载荷并建立我们的通道：
- en: '[PRE2]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We place this on the same blog entry field we''ve used before, and before you
    know it, we have an unlucky victim come along and use that link (as shown in the
    following screenshot):'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将其放在之前使用过的相同博客条目字段上，然后在您知道之前，我们就有了一个不幸的受害者使用了那个链接（如下面的截图所示）：
- en: '![](img/B03918_06_16-1.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_06_16-1.png)'
- en: Script entry and appearance to victims â�� simple but effective.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本输入和受害者的外观 - 简单而有效。
- en: On our Kali box, we can see that we are delivering the payload and seeing the
    user's traffic through the referring link, as we are beginning to see in following
    screenshot. From here, you can feel free to experiment with payload alterations
    and achieving some of the control we've seen in other tools.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的Kali盒子上，我们可以看到我们正在传递有效载荷，并通过引用链接看到用户的流量，正如我们在下面的截图中开始看到的那样。从这里，您可以随意尝试有效载荷的修改，并实现其他工具中所见的一些控制。
- en: '![](img/B03918_06_17-1.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_06_17-1.png)'
- en: Websploit offers a no-frills listening and payload delivery service.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Websploit提供了一个简单而有效的监听和有效载荷传递服务。
- en: Websploit is a strong tool in other areas of the attack chain, and it does well
    with blended attack modules such as AutoPwn, DoS, and its WiFi-focused attacks.
    For XSS, I find that Metasploit offers more versatility in managing payloads and
    offering shell options. In addition to Meterpreter, there are more than a dozen
    other shell options depending on what your targets can get away with and what
    mix of stealth and functionality is desired.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Websploit在攻击链的其他领域是一个强大的工具，并且在AutoPwn、DoS和其WiFi-focused攻击等混合攻击模块方面表现良好。对于XSS，我发现Metasploit在管理有效负载和提供shell选项方面更具多样性。除了Meterpreter之外，还有十多种其他shell选项，具体取决于您的目标可以逃脱多少，以及所需的隐蔽性和功能性的混合。
- en: Summary
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: '* * *'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: XSS attacks have been a thorn in the side of security professionals and millions
    of victims since the explosion in dynamic content brought JavaScript into the
    forefront of web development. Coupled with an antiquated means of establishing
    trust (entity-based with no validation of input), this has made XSS an OWASP Top
    10 vulnerability for over 10 years. It is clear that something should be done
    to bring more attention to it, and it is the increased use of pen testing that
    can make the difference.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 自从动态内容的爆炸性增长将JavaScript带入Web开发的前沿以来，XSS攻击一直是安全专业人员和数百万受害者的一大难题。再加上建立信任的过时手段（基于实体而没有对输入进行验证），这使得XSS成为了OWASP十大漏洞之一已经超过10年。很明显，应该采取一些措施来引起更多关注，而增加渗透测试的使用可以做出改变。
- en: The tools for XSS are many, and while we covered some of the more accessible
    tools Kali included here, it became obvious to me in preparing to write this chapter
    that the toolsets experienced some ebb and flow; some tools have fallen out of
    favor over time while others seem to keep on fighting.Â  Some of this might be
    attributed to corporate sponsorship â�� Rapid7 is a key player in maintaining
    and sponsoring Metasploit, while XSSer and Websploit have both been sporadically
    supported. I would encourage delving into each of these tools and others as much
    as you can to get a good feel for which ones should be in your tool chest.Â  It
    would be wise to have at least two tools for every role with different strengths
    and overlapping capabilities to help better cover-corner case scenarios.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: XSS的工具有很多，虽然我们在这里包括了一些更容易获取的Kali工具，但在准备撰写本章时，我意识到工具集经历了一些起伏；一些工具随着时间的推移已经不再受欢迎，而另一些似乎仍在继续使用。其中一些可能归因于企业赞助
    - Rapid7是维护和赞助Metasploit的关键参与者，而XSSer和Websploit都曾得到间歇性的支持。我鼓励尽可能深入研究这些工具和其他工具，以便更好地了解哪些工具应该放在您的工具箱中。至少应该有两种工具用于每个角色，具有不同的优势和重叠的功能，以帮助更好地覆盖边缘情况。
- en: In this chapter, we covered the types of XSS, their potential to do harm or
    help us in our pursuit of *pwnershipÂ *(hacker-speak for being able to compromise
    a site or target at will)*,*Â and some great ways to use them to gain visibility
    into clients and their relationships with their server. XSS, as we also saw, can
    provide real black-hat attackers with a sinister foothold that allows them to
    manipulate system resources and spy on their victims. Where XSS focuses on exploiting
    the client-server trusted relationship to compromise the client, our next chapter
    will discuss both client-side attacks as well as how we can take advantage of
    that same trusted relationship to either control or coerce the server itself.Â 
    These attacks are known broadly as injection attacks, and encompass some hot topics
    in the land of web application security such as HTML, SQL, XML, and even the oft-overlooked
    LDAP. At the conclusion of the next chapter, you will have a solid foundation
    of attacks to help find critical data leakage and host control vulns in the majority
    of applications and their clients. I'm glad you've stuck around this far, let'sÂ see
    what further damage we can cause or prevent!
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了XSS的类型，它们对我们的危害或帮助的潜力（黑客术语表示能够随意妥协站点或目标），以及一些很好的方法来利用它们来获得对客户及其与服务器的关系的可见性。正如我们所看到的，XSS可以为真正的黑帽攻击者提供一个邪恶的立足点，使他们能够操纵系统资源并监视他们的受害者。在XSS专注于利用客户端-服务器信任关系来妥协客户端的同时，我们的下一章将讨论客户端攻击以及我们如何利用同样的信任关系来控制或迫使服务器本身。这些攻击被广泛称为注入攻击，并涵盖了Web应用程序安全领域的一些热门话题，如HTML、SQL、XML，甚至常常被忽视的LDAP。在下一章的结尾，您将拥有一套攻击的坚实基础，以帮助发现大多数应用程序及其客户端中的关键数据泄漏和主机控制漏洞。我很高兴您能一直关注到这一步，让我们看看我们还能造成或预防更多的损害！
