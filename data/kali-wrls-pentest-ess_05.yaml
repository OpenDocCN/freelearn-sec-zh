- en: Chapter 5. WPA/WPA2 Cracking
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章。WPA/WPA2破解
- en: In this chapter, we will examine the **Wi-Fi Protected Access** (**WPA/WPA2**)
    protocol and take a look at the techniques and the tools to recover the encryption
    key.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将研究**Wi-Fi保护访问**（**WPA/WPA2**）协议，并了解恢复加密密钥的技术和工具。
- en: 'The topics covered are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 涵盖的主题如下：
- en: An introduction to WPA/WPA2
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WPA/WPA2简介
- en: WPA cracking with Aircrack-ng
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Aircrack-ng破解WPA
- en: WPA cracking with Cowpatty
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Cowpatty破解WPA
- en: WPA cracking with the GPU
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GPU破解WPA
- en: WPA cracking with automated tools
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自动化工具破解WPA
- en: An introduction to WPA/WPA2
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WPA/WPA2简介
- en: 'The WPA/WPA2 are two different versions of a security protocol developed by
    the Wi-Fi Alliance to substitute WEP as the security standard for 802.11 protocols.
    The WPA protocol was first published in 2003 and was in turn replaced by its successor
    WPA2 in 2004, as part of the IEEE 802.11i standard. Both WPA and WPA2 support
    two authentication modes: **WPA-Personal** and **WPA-Enterprise**. In the WPA-Personal
    mode, a **preshared key** (**PSK**) is used for authentication and there is no
    need for an authentication server. The PSK could be a passphrase of 8 to 63 printable
    ASCII characters. While, the WPA-Enterprise mode requires an authentication server
    that communicates with the access point (AP) with the RADIUS protocol and clients
    are authenticated using the **Extensible Authentication Protocol** (**EAP**).
    We will see attacks against WPA-Enterprise in detail in [Chapter 6](ch06.html
    "Chapter 6. Attacking Access Points and the Infrastructure"), *Attacking Access
    Points and the Infrastructure*.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: WPA/WPA2是由Wi-Fi联盟开发的安全协议的两个不同版本，用于替代WEP作为802.11协议的安全标准。WPA协议首次发布于2003年，随后在2004年作为IEEE
    802.11i标准的一部分被其后继者WPA2取代。WPA和WPA2都支持两种认证模式：**WPA-Personal**和**WPA-Enterprise**。在WPA-Personal模式中，使用**预共享密钥**（**PSK**）进行认证，无需认证服务器。PSK可以是8到63个可打印ASCII字符的密码。而WPA-Enterprise模式需要一个认证服务器，该服务器使用RADIUS协议与接入点（AP）通信，并使用**可扩展认证协议**（**EAP**）对客户端进行认证。我们将在[第6章](ch06.html
    "第6章。攻击接入点和基础设施")中详细介绍对WPA-Enterprise的攻击，*攻击接入点和基础设施*。
- en: In this chapter, we will focus on attacking the WPA-Personal authentication.
    WPA-Personal and WPA-Enterprise share the authentication process between the AP
    and the client (STA in the following diagram), that is called the **Four-way handshake**.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将专注于攻击WPA-Personal认证。WPA-Personal和WPA-Enterprise在AP和客户端（下图中的STA）之间共享认证过程，这被称为**四路握手**。
- en: '![An introduction to WPA/WPA2](img/B04527_05_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![WPA/WPA2简介](img/B04527_05_01.jpg)'
- en: 'The four phases of the authentication process are as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 认证过程的四个阶段如下：
- en: In the first phase, a 256 bit **Pairwise Master Key** (**PMK**) is independently
    established by both parties. It is generated from the PSK and the network SSID.
    Then the AP sends a random number, the **A-Nonce**, to the client.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第一阶段，双方独立建立了一个256位的**对等主密钥**（**PMK**）。它是从PSK和网络SSID生成的。然后AP向客户端发送一个随机数，**A-Nonce**。
- en: The client sends a random **S-Nonce** to the AP, plus a **Message Integrity
    Code** (**MIC**). Meanwhile, the client computes a **Pairwise Transient Key**
    (**PTK**) that will be used to encrypt the traffic. The PTK is derived from the
    PMK, the A-Nonce, the S-Nonce, and the MAC addresses of both the client and the
    AP.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端向AP发送一个随机的**S-Nonce**，加上一个**消息完整性代码**（**MIC**）。同时，客户端计算一个将用于加密流量的**对等瞬态密钥**（**PTK**）。
    PTK是从PMK、A-Nonce、S-Nonce以及客户端和AP的MAC地址派生出来的。
- en: The AP derives the PTK itself and then sends to the client a **Group Temporal
    Key** (**GTK**), used to decrypt multicast and broadcast traffic, and a MIC.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AP自己派生PTK，然后发送**组临时密钥**（**GTK**）给客户端，用于解密多播和广播流量，以及一个MIC。
- en: The client sends an acknowledgement to the AP.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端向AP发送确认。
- en: Analyzing the four-way handshake, we can notice that, unlike WEP, the encryption
    key (the PTK) is unique, because it is a function of the parameters related to
    the handshake process and it is never exchanged between the AP and the client.
    WPA uses the **Temporal Key Integrity Protocol** (**TKIP**) encryption protocol
    that was developed by the Wi-Fi Alliance to temporarily replace WEP encryption,
    but some vulnerabilities have also been discovered and it has been deprecated
    in the latest versions of the 802.11 standard.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 分析四路握手，我们可以注意到，与WEP不同，加密密钥（PTK）是唯一的，因为它是与握手过程相关的参数的函数，从不在AP和客户端之间交换。WPA使用由Wi-Fi联盟开发的**临时密钥完整性协议**（**TKIP**）加密协议，用于临时替代WEP加密，但也发现了一些漏洞，并在802.11标准的最新版本中已被弃用。
- en: WPA2 uses **CCMP** (**Counter Cipher Mode Protocol**) by default, which is a
    protocol based on the **Advanced Encryption Standard** (**AES**)—the de facto
    standard symmetric encryption algorithm.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: WPA2默认使用**CCMP**（**计数器密码模式协议**），这是一种基于**高级加密标准**（**AES**）的协议，AES是事实上的标准对称加密算法。
- en: To learn the details of the WPA/WPA2 implementation and of the attacks that
    we are going to cover in the next section, refer to the links in [Appendix](apa.html
    "Appendix A. References"), *References*.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解WPA/WPA2实施的细节和我们将在下一节中涵盖的攻击，请参考[附录](apa.html "附录A.参考资料")中的链接，*参考资料*。
- en: Attacking the WPA
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 攻击WPA
- en: The WPA/WPA2 protocol (hereafter, simply WPA) is considered secure because it
    relies on strong authentication and encryption protocols, especially WPA2 with
    AES-CCMP. Next, we show that it is vulnerable only if weak PSKs are used.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: WPA/WPA2协议（以下简称WPA）被认为是安全的，因为它依赖于强大的认证和加密协议，特别是使用AES-CCMP的WPA2。接下来，我们将展示只有在使用弱PSK时才会有漏洞。
- en: TKIP has been proved to be vulnerable to attacks that could lead to packet decryption
    and injection, but not to the PSK recovery. For PSK cracking, we need to capture
    the four handshake frames, that give us all the parameters from which the PTK
    is calculated, including the MIC used to check whether our candidate key is correct
    or not.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: TKIP已被证明容易受到攻击，可能导致数据包解密和注入，但不能恢复PSK。对于PSK破解，我们需要捕获四次握手帧，这些帧给出了计算PTK所需的所有参数，包括用于检查我们的候选密钥是否正确的MIC。
- en: Once we have the captured packet file, we can attempt to crack the key either
    by launching an offline *brute force attack* or a *dictionary attack* on it. A
    brute force attack implies checking the entire key space, that is all the possible
    combinations of characters that could form the key. To be feasible, the PSK must
    be short. Otherwise, a strong PSK would require a very long time to be cracked.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了捕获的数据包文件，我们可以尝试通过对其进行离线*暴力破解攻击*或*字典攻击*来破解密钥。暴力破解攻击意味着检查整个密钥空间，即可能形成密钥的所有可能字符组合。要可行，PSK必须很短。否则，一个强大的PSK将需要很长时间才能被破解。
- en: 'To have an idea of the amount of time required, we need to estimate it through
    one of the brute force calculators available online, for example, the one at [http://calc.opensecurityresearch.com/](http://calc.opensecurityresearch.com/).
    Assuming that we could test 100,000 keys per second, which is a fairly high rate,
    and the charset of the key is alphanumeric, we could be surprised to discover
    the time needed to crack an 8-character long key:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要有一个大致的时间估计，我们需要通过在线可用的暴力破解计算器之一来估算，例如[http://calc.opensecurityresearch.com/](http://calc.opensecurityresearch.com/)上的计算器。假设我们可以每秒测试100,000个密钥，这是一个相当高的速率，密钥的字符集是字母数字组合，我们可能会惊讶地发现破解一个8个字符长的密钥所需的时间：
- en: '![Attacking the WPA](img/B04527_05_02.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![攻击WPA](img/B04527_05_02.jpg)'
- en: 'For a 63-character long key, it is quite discouraging:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个63个字符长的密钥，这是相当令人泄气的：
- en: '![Attacking the WPA](img/B04527_05_03.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![攻击WPA](img/B04527_05_03.jpg)'
- en: In a dictionary attack, we instead need to test all the words contained in a
    dictionary file or wordlist. To succeed, the key must be included in the wordlists
    used.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在字典攻击中，我们需要测试字典文件或单词列表中包含的所有单词。要成功，密钥必须包含在使用的单词列表中。
- en: There are some techniques to speed up the cracking process. For a dictionary
    attack, one technique is to use a list (or table) of precomputed hashes, also
    called a *rainbow table*, instead of a wordlist. In this way, we precompute the
    PMKs from the words of a dictionary file and store them in the rainbow table.
    The drawbacks are that each network ESSID requires its rainbow table, as the PMK
    also depends on the ESSID, and that a large amount of disk space is necessary.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些技术可以加快破解过程。对于字典攻击，一种技术是使用预先计算的哈希列表（或表），也称为*彩虹表*，而不是使用单词列表。通过这种方式，我们可以从字典文件的单词预先计算PMK并将其存储在彩虹表中。缺点是每个网络ESSID都需要其彩虹表，因为PMK也取决于ESSID，并且需要大量的磁盘空间。
- en: Another technique to accelerate the process is to exploit the computational
    power of the **Graphical Processing Unit** (**GPU**) of recent video cards.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 加速这个过程的另一种技术是利用最近视频卡的**图形处理单元**（**GPU**）的计算能力。
- en: We will see how to crack a WPA key leveraging the GPU later in this chapter.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章后面看到如何利用GPU破解WPA密钥。
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**WPA cracking with Amazon Linux AMI**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用Amazon Linux AMI破解WPA**'
- en: An interesting and relatively new way to crack a WPA key is to use the Amazon
    Linux AMI with the NVIDIA GRID GPU Driver enabled, provided by Amazon EC2\. The
    AMI (Amazon Machine Image) allows leveraging the processing power of a NVIDIA
    GPU with 1,536 CUDA cores and 4 GB of video memory. For more information, read
    the guide available at [http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using_cluster_computing.html](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using_cluster_computing.html).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 破解WPA密钥的一个有趣且相对新的方法是使用启用了NVIDIA GRID GPU驱动程序的Amazon Linux AMI，由Amazon EC2提供。AMI（Amazon
    Machine Image）允许利用NVIDIA GPU的处理能力，具有1,536个CUDA核心和4GB视频内存。有关更多信息，请阅读[http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using_cluster_computing.html](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using_cluster_computing.html)上提供的指南。
- en: There are also online, cloud-based services that allow, upon payment of a fee,
    to crack WPA/WPA2 keys, just providing the four-way handshake file and the network
    SSID.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 还有在线的基于云的服务，可以在支付费用后，只需提供四次握手文件和网络SSID即可破解WPA/WPA2密钥。
- en: An example of this kind of service is CloudCracker—[https://www.cloudcracker.com/](https://www.cloudcracker.com/).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这种服务的一个例子是CloudCracker - [https://www.cloudcracker.com/](https://www.cloudcracker.com/)。
- en: In the following sections, we are going to cover the cracking process of a WPA
    PSK using the Aircrack-ng suite and Cowpatty.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将介绍使用Aircrack-ng套件和Cowpatty破解WPA PSK的过程。
- en: WPA cracking with Aircrack-ng
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Aircrack-ng破解WPA
- en: In the previous section, we have mentioned that to crack a WPA key, we must
    first capture the four frames related to a WPA handshake between the target AP
    and a client. To do so, we could passively wait for a client to authenticate successfully,
    completing the handshake, and capture the relative frames. In some cases, we will
    need to wait a little longer, so we could accelerate the process deauthenticating
    an already connected client, inducing it to re-authenticate with the AP (the *deauthentication
    attack*).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们提到要破解WPA密钥，我们必须首先捕获与目标AP和客户端之间的WPA握手相关的四个帧。为此，我们可以被动地等待客户端成功进行身份验证，完成握手，并捕获相关的帧。在某些情况下，我们需要等待更长的时间，因此我们可以通过对已连接的客户端进行去认证，诱使其重新与AP进行身份验证（*去认证攻击*）来加快这个过程。
- en: 'We begin by putting, as usual, our wireless interface in monitor mode with
    the `airmon-ng start wlan0` command and then run `airodump-ng`, using the BSSID
    and the channel of our target AP as parameters:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先使用`airmon-ng start wlan0`命令将无线接口设置为监视模式，然后使用目标AP的BSSID和信道作为参数运行`airodump-ng`：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![WPA cracking with Aircrack-ng](img/B04527_05_04.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![使用Aircrack-ng破解WPA](img/B04527_05_04.jpg)'
- en: When a client authenticates to the AP, the first line of the airodump-ng output
    displays the occurred WPA handshake. In this case, airodump-ng saves the captured
    handshake in the `wpa_crack` file.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端向AP进行身份验证时，airodump-ng输出的第一行显示发生的WPA握手。在这种情况下，airodump-ng将捕获的握手保存在`wpa_crack`文件中。
- en: 'If no handshake occurs, but a client is already connected and we are not too
    far from it, we could deauthenticate it from the AP with the following command:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '如果没有发生握手，但是客户端已经连接，并且我们离它不太远，我们可以使用以下命令从AP中去认证它： '
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, `--deauth` (or -0) is for the deauthentication attack, `1` stands for
    one bunch of frames to send, `-c` is the MAC address of the client, and `-a` is
    the MAC address of the AP.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`--deauth`（或-0）是用于去认证攻击的，`1`代表要发送的一组帧，`-c`是客户端的MAC地址，`-a`是AP的MAC地址。
- en: '![WPA cracking with Aircrack-ng](img/B04527_05_05.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![使用Aircrack-ng破解WPA](img/B04527_05_05.jpg)'
- en: If the attack is successful, we should see the client reconnect in a short time
    and we could then capture the WPA handshake.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果攻击成功，我们应该在短时间内看到客户端重新连接，然后我们可以捕获WPA握手。
- en: Once we have captured the handshake, we can proceed to crack the key with aircrack-ng,
    specifying the dictionary file or wordlist to use. Aircrack-ng would be able to
    find the WPA PSK only if it is present in the dictionary file used.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们捕获了握手，我们就可以使用aircrack-ng来破解密钥，指定要使用的字典文件或单词列表。只有在字典文件中存在时，aircrack-ng才能找到WPA
    PSK。
- en: There are many wordlists available on the Web and some are listed at [http://www.aircrack-ng.org/doku.php?id=faq#where_can_i_find_good_wordlists](http://www.aircrack-ng.org/doku.php?id=faq#where_can_i_find_good_wordlists).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在网上有很多单词列表可用，其中一些列在[http://www.aircrack-ng.org/doku.php?id=faq#where_can_i_find_good_wordlists](http://www.aircrack-ng.org/doku.php?id=faq#where_can_i_find_good_wordlists)上。
- en: Wordlists are also included by default in Kali Linux, under `/usr/share/wordlists`,
    where the `rockyou.txt.gz` file provides a large compressed wordlist to use.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Wordlists也默认包含在Kali Linux中，位于`/usr/share/wordlists`下，`rockyou.txt.gz`文件提供了一个大型压缩的单词列表供使用。
- en: Custom wordlists can be created with the **crunch** tool (type `man crunch`
    for the manual page).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用**crunch**工具创建自定义单词列表（键入`man crunch`查看手册页）。
- en: 'For our example, we use the `rockyou.txt.gz` wordlist, so we first unzip it:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，我们使用`rockyou.txt.gz`单词列表，因此我们首先解压缩它：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To reduce the number of words to try, we must consider that the PSK is composed
    by a minimum of eight characters and a maximum of 63 characters. Thus, we can
    create, from `rockyou.txt`, a new wordlist that meets these requirements. A tool
    that allows you to filter and reduce a wordlist is **pw-inspector**.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减少尝试的单词数量，我们必须考虑PSK由最少8个字符和最多63个字符组成。因此，我们可以从`rockyou.txt`中创建一个符合这些要求的新单词列表。一个允许您过滤和减少单词列表的工具是**pw-inspector**。
- en: 'We create the new wordlist `wparockyou.txt` by giving `rockyou.txt` as the
    input to pw-inspector:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过将`rockyou.txt`作为输入传递给pw-inspector来创建新的单词列表`wparockyou.txt`：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then we execute the dictionary attack with `aircrack-ng`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们执行使用`aircrack-ng`的字典攻击：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![WPA cracking with Aircrack-ng](img/B04527_05_06.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![使用Aircrack-ng破解WPA](img/B04527_05_06.jpg)'
- en: 'After a variable amount of time, if the key is found in the wordlist used,
    aircrack-ng returns it in the output, along with the elapsed time, the number
    of tested keys, and the testing speed, as we can see in the following screenshot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 经过一段时间后，如果在使用的单词列表中找到了密钥，aircrack-ng会在输出中返回它，以及经过的时间，测试的密钥数量和测试速度，如我们在下面的截图中所看到的：
- en: '![WPA cracking with Aircrack-ng](img/B04527_05_07.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![使用Aircrack-ng破解WPA](img/B04527_05_07.jpg)'
- en: If we want to conduct a dictionary attack using a rainbow table, we can use
    the `airolib-ng` tool that creates databases of network ESSIDs with the relative
    precomputed PMKs.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想使用彩虹表进行字典攻击，我们可以使用`airolib-ng`工具创建网络ESSIDs的数据库和相关的预先计算的PMKs。
- en: 'To create a database `wpa_db` of our target network, we run the following command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建我们目标网络的数据库`wpa_db`，我们运行以下命令：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then we import the dictionary file we used previously:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然后导入我们之前使用的字典文件：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Before proceeding to calculate the PMKs, it is advisable to clean and optimize
    the database:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续计算PMK之前，建议清理和优化数据库：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![WPA cracking with Aircrack-ng](img/B04527_05_08.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![使用Aircrack-ng破解WPA](img/B04527_05_08.jpg)'
- en: 'Next, we compute the PMKs with the following command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用以下命令计算PMKs：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Finally, we can execute `aircrack-ng` on the database:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以在数据库上执行`aircrack-ng`：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: WPA cracking with Cowpatty
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Cowpatty破解WPA
- en: An alternative to aircrack-ng is Cowpatty, an easy-to-use and effective tool
    for WPA PSK cracking, developed by **Joshua Wright**.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 作为aircrack-ng的替代品，Cowpatty是一种易于使用且有效的WPA PSK破解工具，由**Joshua Wright**开发。
- en: 'Its usage is very similar to that of aircrack-ng, as it takes as input a packet
    capture containing the four-way handshake and a wordlist, plus the network ESSID:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 它的使用方式与aircrack-ng非常相似，因为它接受包含四次握手和单词列表的数据包捕获，以及网络ESSID：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![WPA cracking with Cowpatty](img/B04527_05_09.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![使用Cowpatty破解WPA](img/B04527_05_09.jpg)'
- en: 'As we can see in the following screenshot, the cracked PSK is displayed in
    the output. Cowpatty like aircrack-ng, also shows the elapsed time, the number
    of passphrases tested, and the rate:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在下面的截图中所看到的，破解的PSK显示在输出中。Cowpatty像aircrack-ng一样，还显示了经过的时间，测试的密码数量和速率：
- en: '![WPA cracking with Cowpatty](img/B04527_05_10.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![使用Cowpatty破解WPA](img/B04527_05_10.jpg)'
- en: 'Cowpatty can also take a rainbow table as the input. To build it from our wordlist,
    we use the `genpmk` tool, by executing the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Cowpatty也可以将彩虹表作为输入。要从我们的单词列表中构建它，我们使用`genpmk`工具，执行以下命令：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![WPA cracking with Cowpatty](img/B04527_05_11.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![使用Cowpatty破解WPA](img/B04527_05_11.jpg)'
- en: 'Then, we launch the program, specifying the rainbow table with the `-d` option
    instead of the wordlist:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们启动程序，指定彩虹表而不是单词列表的`-d`选项：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: WPA cracking with the GPU
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GPU破解WPA
- en: The GPUs of recent video cards usually comprise a large number of cores that
    can execute threads concurrently, resulting in faster performing of complex calculations
    than a CPU.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最近视频卡的GPU通常包括大量的核心，可以同时执行线程，从而比CPU更快地执行复杂的计算。
- en: To be suitable for **general purpose computing** (**GPGPU**), the GPU must support
    the NVIDIA **Compute Unified Device Architecture** (**CUDA**) or the **Open Computing
    Language** (**OpenCL**) platforms, which allow normal programs to access and take
    advantage of the hardware of the GPU when executing specified portions of code.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要适用于**通用目的计算**（**GPGPU**），GPU必须支持NVIDIA **Compute Unified Device Architecture**（**CUDA**）或**Open
    Computing Language**（**OpenCL**）平台，这允许普通程序在执行指定代码部分时访问和利用GPU的硬件。
- en: The two most popular programs included in Kali Linux that make use of the GPU
    to crack passwords are **Pyrit** and **oclHashcat**.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Kali Linux中包含的两个最受欢迎的程序，可以利用GPU来破解密码，分别是**Pyrit**和**oclHashcat**。
- en: Note
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Getting ready for GPU cracking**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**准备进行GPU破解**'
- en: First of all, it is worth specifying that GPU-based cracking tools don't work
    in a virtual machine, as they need direct access to the physical video card. So,
    we need to run them in a native installation of Kali Linux.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 首先值得指出的是，基于GPU的破解工具无法在虚拟机中运行，因为它们需要直接访问物理视频卡。因此，我们需要在Kali Linux的本机安装中运行它们。
- en: To do GPU cracking, we first need to check that the proper drivers for our video
    card are installed. We must install the proprietary drivers for the relative cards
    (NVIDIA or AMD/ATI), if we want to use CUDA or OpenCL.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行GPU破解，我们首先需要检查视频卡的正确驱动程序是否已安装。如果要使用CUDA或OpenCL，我们必须安装相应的专有驱动程序（NVIDIA或AMD/ATI）。
- en: A useful reference is [http://docs.kali.org/general-use/install-nvidia-drivers-on-kali-linux](http://docs.kali.org/general-use/install-nvidia-drivers-on-kali-linux)
    for NVIDIA cards, while for AMD/ATI cards the following post might be helpful
    [https://forums.kali.org/showthread.php?17681-Install-AMD-ATI-Driver-in-Kali-Linux-1-x](https://forums.kali.org/showthread.php?17681-Install-AMD-ATI-Driver-in-Kali-Linux-1-x).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: NVIDIA卡的有用参考资料是[http://docs.kali.org/general-use/install-nvidia-drivers-on-kali-linux](http://docs.kali.org/general-use/install-nvidia-drivers-on-kali-linux)，而对于AMD/ATI卡，以下帖子可能有所帮助[https://forums.kali.org/showthread.php?17681-Install-AMD-ATI-Driver-in-Kali-Linux-1-x](https://forums.kali.org/showthread.php?17681-Install-AMD-ATI-Driver-in-Kali-Linux-1-x)。
- en: We also need to install the NVIDIA CUDA Toolkits or the AMD APP SDK (refer [Appendix](apa.html
    "Appendix A. References"), *References*).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要安装NVIDIA CUDA工具包或AMD APP SDK（参见[附录](apa.html "附录A.参考资料")，*参考资料*）。
- en: Pyrit
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pyrit
- en: Pyrit is a tool written in Python that supports both CPU and GPU cracking, the
    latter through CUDA and OpenCL modules. With the latest video cards, Pyrit is
    able to compute up to 100,000 **PMKs** (**Pairwise Master Keys**) per second,
    speeding up the cracking process a lot compared to relying only on the CPU.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Pyrit是用Python编写的工具，支持CPU和GPU破解，后者通过CUDA和OpenCL模块。使用最新的视频卡，Pyrit能够每秒计算高达100,000个**PMKs**（**Pairwise
    Master Keys**），与仅依靠CPU相比，大大加快了破解过程。
- en: Pyrit works by taking as input a dictionary file, like aircrack-ng does, or
    by using a database of precomputed PMKs for our target ESSID.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Pyrit的工作方式是通过使用字典文件作为输入，就像aircrack-ng一样，或者使用预先计算的PMKs数据库来破解我们目标ESSID的密码。
- en: The latter method is much faster, but requires you to create the database previously
    or to use a prebuilt database.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 后一种方法速度更快，但需要您事先创建数据库或使用预先构建的数据库。
- en: 'In the first case, the command to launch would be as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况下，启动的命令如下：
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![Pyrit](img/B04527_05_12.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![Pyrit](img/B04527_05_12.jpg)'
- en: Here, `attack_passthrough` specifies the attack with a dictionary file, `-r`
    specifies the packet capture, and `-i` the wordlist to use.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`attack_passthrough`指定了使用字典文件的攻击，`-r`指定了数据包捕获，`-i`指定了要使用的单词列表。
- en: 'In the second case, when a database is used, we first add the ESSID to the
    database:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二种情况下，当使用数据库时，我们首先将ESSID添加到数据库中：
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, we import the dictionary file into the database:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将字典文件导入数据库：
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![Pyrit](img/B04527_05_13.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![Pyrit](img/B04527_05_13.jpg)'
- en: 'Then, we compute the PMKs from the relative passwords with the following command:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用以下命令从相关密码计算PMKs：
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, we can run the cracking process:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以运行破解过程：
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: oclHashcat
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: oclHashcat
- en: The oclHashcat tool is a powerful GPGPU-based multihash cracker that supports
    both the CUDA and OpenCL APIs.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: oclHashcat工具是一个强大的基于GPGPU的多哈希破解工具，支持CUDA和OpenCL API。
- en: OclHashcat is the GPGPU version of the popular **Hashcat** tool and it is a
    fusion of the previous versions *oclHashcat-plus* and *oclHashcat-lite*. It supports
    many hashing algorithm attacks, among which are the dictionary and the brute force
    attacks.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: OclHashcat是流行的**Hashcat**工具的GPGPU版本，它是以前版本*oclHashcat-plus*和*oclHashcat-lite*的融合。它支持许多哈希算法攻击，其中包括字典和暴力攻击。
- en: 'OclHashcat doesn''t accept packet capture in the `.cap` format, but it must
    be converted in its own format `.hccap`. To do so, we can use aircrack-ng:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: OclHashcat不接受以`.cap`格式的数据包捕获，而必须将其转换为自己的格式`.hccap`。为此，我们可以使用aircrack-ng：
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To perform the dictionary attack against the captured handshake, use the following
    command:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要对捕获的握手进行字典攻击，使用以下命令：
- en: '[PRE19]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here, `-m 2500` specifies the WPA attack mode.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`-m 2500`指定了WPA攻击模式。
- en: 'To execute a brute force attack, for example, on an eight characters PSK formed
    by four lowercase letters and four digits, we will need to run the following command:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要对由四个小写字母和四个数字组成的八个字符PSK进行暴力破解攻击，我们需要运行以下命令：
- en: '[PRE20]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Indeed, oclHashcat has its own built-in charsets that we could use to define
    masks, that is, strings that configure the key space of the passwords we want
    to crack.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，oclHashcat有自己内置的字符集，我们可以用它来定义掩码，即配置我们想要破解的密码的密钥空间的字符串。
- en: WPA cracking with automated tools
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自动化工具进行WPA破解
- en: 'In the last chapter, we covered two automated tools to crack WEP (and also
    WPA) keys: Wifite and Fern WiFi Cracker.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一章中，我们介绍了两个自动化工具来破解WEP（以及WPA）密钥：Wifite和Fern WiFi Cracker。
- en: In the previous chapter, we showed a practical example of WEP cracking with
    Fern WiFi Cracker; in this chapter, we will see how to crack a WPA key using Wifite.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们展示了使用Fern WiFi Cracker进行WEP破解的实际示例；在本章中，我们将看到如何使用Wifite破解WPA密钥。
- en: Wifite
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Wifite
- en: As we have already seen, Wifite is a tool based on the Aircrack-ng suite. By
    default, it relies on aircrack-ng for WPA cracking, but also supports Cowpatty,
    Pyrit, and oclHashcat.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经看到的，Wifite是基于Aircrack-ng套件的工具。默认情况下，它依赖于aircrack-ng进行WPA破解，但也支持Cowpatty、Pyrit和oclHashcat。
- en: 'To crack a WPA key, we will run the following command:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要破解WPA密钥，我们将运行以下命令：
- en: '[PRE21]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![Wifite](img/B04527_05_14.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![Wifite](img/B04527_05_14.jpg)'
- en: 'The program scans for WPA wireless networks and displays the results:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 程序扫描WPA无线网络并显示结果：
- en: '![Wifite](img/B04527_05_15.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![Wifite](img/B04527_05_15.jpg)'
- en: 'When we have identified our target network, we press *Ctrl* + *C* and select
    the network (in this case the number `1`):'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们确定了目标网络后，我们按下*Ctrl* + *C*并选择网络（在本例中是数字`1`）：
- en: '![Wifite](img/B04527_05_16.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![Wifite](img/B04527_05_16.jpg)'
- en: Wifite starts listening to capture a WPA handshake.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Wifite开始监听以捕获WPA握手。
- en: 'After that, the program begins the cracking process, using the dictionary file
    provided earlier:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，程序开始使用先前提供的字典文件进行破解过程：
- en: '![Wifite](img/B04527_05_17.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![Wifite](img/B04527_05_17.jpg)'
- en: 'Finally, it returns the cracked key and displays the other relative information
    like aircrack-ng does (elapsed time, number of tested keys, and the rate):'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，它返回破解的密钥并显示其他相关信息，就像aircrack-ng一样（经过的时间，测试的密钥数量和速率）：
- en: '![Wifite](img/B04527_05_18.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![Wifite](img/B04527_05_18.jpg)'
- en: If no handshake is captured, Wifite tries to deauthenticate a connected client,
    automatizing the deauthentication attack performed by aireplay-ng.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有捕获到握手，Wifite会尝试取消连接的客户端，自动执行aireplay-ng执行的取消认证攻击。
- en: We can also choose to use other tools to crack the key instead of aircrack-ng,
    specifying the relative option (for example, Pyrit or Cowpatty).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以选择使用其他工具来破解密钥，而不是aircrack-ng，指定相关选项（例如，Pyrit或Cowpatty）。
- en: Summary
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have covered the WPA/WPA2 security protocol and analyzed
    how to capture the WPA four-way handshake and use it to crack the PSK with the
    many tools available on Kali Linux.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经介绍了WPA/WPA2安全协议，并分析了如何捕获WPA四路握手并使用Kali Linux上可用的许多工具来破解PSK。
- en: There is also an attack against **Wi-Fi Protected Setup** (**WPS**) deployments
    that can lead to WPA PSK recovery in a relatively short time. We will cover this
    and other attacks against access points in [Chapter 6](ch06.html "Chapter 6. Attacking
    Access Points and the Infrastructure"), *Attacking Access Points and the Infrastructure*.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种针对**Wi-Fi Protected Setup**（**WPS**）部署的攻击，可以在相对较短的时间内导致WPA PSK恢复。我们将在[第6章](ch06.html
    "第6章。攻击接入点和基础设施")中涵盖这种攻击和其他针对接入点的攻击，*攻击接入点和基础设施*。
