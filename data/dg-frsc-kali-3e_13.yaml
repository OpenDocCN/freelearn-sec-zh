- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Memory Forensics and Analysis with Volatility 3
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Volatility 3进行内存取证与分析
- en: In the previous chapters, we looked at the various methods for data carving
    and file recovery. In this chapter, we’ll look at the analysis of content stored
    in **Random Access Memory** (**RAM**) using the very powerful Volatility 3\. RAM
    is volatile, meaning that the data in RAM is easily lost when there is no longer
    an electrical charge or current going to the RAM. With the data on RAM being the
    most volatile, it ranks high in the order of volatility and must be forensically
    acquired and preserved as a matter of high priority.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们探讨了数据雕刻和文件恢复的各种方法。在本章中，我们将研究使用非常强大的Volatility 3对**随机访问内存**（**RAM**）中存储的内容进行分析。RAM是易失性的，这意味着当没有电流或电荷传输到RAM时，RAM中的数据会很容易丢失。由于RAM中的数据最为易失，它在易失性排序中排得很高，必须作为高优先级进行取证获取和保存。
- en: Many types of data and forensic artifacts reside in RAM and the paging file.
    As discussed in previous chapters, login passwords, user information, running
    and hidden processes, malware, and even encrypted passwords are just some of the
    many types of interesting data that can be found when performing RAM analysis,
    further compounding the need for memory forensics.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 许多类型的数据和取证物证存储在RAM和分页文件中。如前几章所讨论的，登录密码、用户信息、正在运行和隐藏的进程、恶意软件，甚至是加密密码，都是在进行RAM分析时可以发现的许多有趣数据之一，这进一步加深了内存取证的必要性。
- en: 'In this chapter, we will look at the very powerful Volatility framework and
    its many uses in memory forensics, including the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨非常强大的Volatility框架及其在内存取证中的多种应用，包括以下主题：
- en: What’s new in Volatility 3
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Volatility 3的新功能
- en: Downloading a sample memory dump file for analysis
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载用于分析的示例内存转储文件
- en: Installing Volatility 3 in Kali Linux
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Kali Linux中安装Volatility 3
- en: Memory dump analysis using Volatility 3
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Volatility 3进行内存转储分析
- en: What’s new in Volatility 3
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Volatility 3的新功能
- en: The Volatility framework is an open source, cross-platform incident response
    framework that comes with many useful plugins that provide the investigator with
    a wealth of information from a snapshot of memory, also known as a **memory dump**.
    The concept of Volatility has been around for a decade, and apart from analyzing
    running and hidden processes, it is also a very popular choice for malware analysis.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Volatility框架是一个开源的跨平台事件响应框架，配有许多有用的插件，能够通过内存快照（也称为**内存转储**）为调查人员提供大量信息。Volatility的概念已经存在了十多年，除了分析正在运行和隐藏的进程外，它也是恶意软件分析中非常流行的选择。
- en: To create a memory dump, several tools, such as **Belkasoft RAM Capturer**,
    **FTK Imager**, **dd**, **dc3dd**, **CAINE**, **Helix**, and **LiME** (short for
    **Linux Memory Extractor**), can be used to acquire the memory image or memory
    dump (which we previously did in [*Chapter 8*](B19441_08.xhtml#_idTextAnchor147),
    *Evidence Acquisition Tools*) and then analyzed using various tools known as plugins
    within the Volatility framework.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建内存转储，可以使用一些工具，如**Belkasoft RAM Capturer**、**FTK Imager**、**dd**、**dc3dd**、**CAINE**、**Helix**和**LiME**（即**Linux内存提取器**），这些工具可以获取内存镜像或内存转储（我们之前在[*第8章*](B19441_08.xhtml#_idTextAnchor147)，*证据获取工具*中做过）并使用Volatility框架中的各种插件进行分析。
- en: 'The Volatility framework can be run on any **Operating System** (**OS**), that
    is, 32- and 64-bit, that supports Python, including the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Volatility框架可以在任何支持Python的**操作系统**（**OS**）上运行，包括32位和64位操作系统：
- en: Windows XP, 7, 8, 8.1, and Windows 10
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows XP、7、8、8.1和Windows 10
- en: Windows Server 2003, 2008, 2012/R2, and 2016
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows Server 2003、2008、2012/R2和2016
- en: Linux 2.6.11-4.2.3 (including Kali, Debian, Ubuntu, and CentOS) and macOS Leopard
    (10.5.x) and Snow Leopard (10.12.x)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux 2.6.11-4.2.3（包括Kali、Debian、Ubuntu和CentOS）以及macOS Leopard（10.5.x）和Snow
    Leopard（10.12.x）
- en: 'Volatility supports several memory dump formats (both 32- and 64-bit), including
    the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Volatility支持多种内存转储格式（包括32位和64位），其中包括以下几种：
- en: Windows crash and hibernation dumps (Windows 7 and earlier)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows崩溃和休眠转储（Windows 7及之前版本）
- en: VirtualBox
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VirtualBox
- en: VMware – **.****vmem** dump
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VMware – **.****vmem**转储
- en: VMware saved state and suspended dumps – **.****vmss**/**.vmsn**
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VMware保存状态和挂起转储 – **.****vmss**/**.vmsn**
- en: Raw physical memory – **.****dd**
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原始物理内存 – **.****dd**
- en: Direct physical memory dump over IEEE 1394 FireWire
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过IEEE 1394 FireWire进行直接物理内存转储
- en: '**Expert Witness Format** (**EWF**) – **.****E01**'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**专家证人格式**（**EWF**）– **.****E01**'
- en: '**QEMU** (**Quick Emulator**)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**QEMU**（**快速虚拟机**）'
- en: Volatility even allows for conversion between these formats and boasts of being
    able to accomplish everything similar tools can.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Volatility甚至支持不同格式之间的转换，并且宣称能够完成其他类似工具所能完成的所有任务。
- en: 'In previous editions of this book, we used Volatility 2, which was based on
    the now-deprecated Python 2\. Volatility 3 is based on Python 3 and has the following
    changes:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的前几版中，我们使用的是基于已废弃的Python 2的Volatility 2。Volatility 3基于Python 3，并做出了以下更改：
- en: Faster scans and processing of memory dumps
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更快的内存转储扫描和处理
- en: Support for newer OSs
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持更新的操作系统
- en: More efficient plugins
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更高效的插件
- en: Operating-specific plugins
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统特定插件
- en: Before we begin using Volatility 3, let’s first download all the sample memory
    dump files that we will be analyzing using Volatility.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用Volatility 3之前，首先下载我们将要分析的所有样本内存转储文件。
- en: Downloading sample memory dump files
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载样本内存转储文件
- en: For this chapter, we’ll be using a memory dump called **cridex.vmem**, which
    we will be analyzing using a variety of Volatility 3 plugins. The file can be
    downloaded from [http://files.sempersecurus.org/dumps/cridex_memdump.zip](http://files.sempersecurus.org/dumps/cridex_memdump.zip).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将使用一个名为**cridex.vmem**的内存转储文件，通过多种Volatility 3插件进行分析。该文件可以从[http://files.sempersecurus.org/dumps/cridex_memdump.zip](http://files.sempersecurus.org/dumps/cridex_memdump.zip)下载。
- en: There are many other images that are publicly available for analysis at [https://github.com/volatilityfoundation/volatility/wiki/Memory-Samples](https://github.com/volatilityfoundation/volatility/wiki/Memory-Samples).
    To practice working with the Volatility framework and further enhance your analytical
    skills, you may wish to download as many images as you like and use the various
    plugins available in Volatility.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://github.com/volatilityfoundation/volatility/wiki/Memory-Samples](https://github.com/volatilityfoundation/volatility/wiki/Memory-Samples)上还有许多其他公开可用的图像可以分析。为了练习使用Volatility框架并进一步提升你的分析技能，你可以根据需要下载尽可能多的图像，并使用Volatility中的各种插件。
- en: Let’s first download and extract our sample memory dump, which we will later
    move to our Volatility installation folder for analysis. If you haven’t already
    downloaded the file, please do so now.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 首先下载并解压我们的样本内存转储文件，稍后我们将其移至Volatility安装文件夹进行分析。如果你还没有下载该文件，请现在下载。
- en: I’ve downloaded the **cridex.vem** sample file to my **Downloads** folder. To
    extract the file, right-click on the file and click on **Extract Here** as you
    have done with previously downloaded files.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经将**cridex.vem**样本文件下载到我的**Downloads**文件夹。要解压文件，请右键点击该文件，然后像之前下载的文件一样点击**Extract
    Here**。
- en: We will now install Volatility 3 and then copy the **cridex.vmem** memory dump
    file to our installation folder for analysis.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将安装Volatility 3，并将**cridex.vmem**内存转储文件复制到安装文件夹中进行分析。
- en: Now that we have downloaded all our sample files, let’s install Volatility 3
    on our Kali machines.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经下载了所有的样本文件，接下来在我们的Kali机器上安装Volatility 3。
- en: Installing Volatility 3 in Kali Linux
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Kali Linux中安装Volatility 3
- en: 'Volatility is no longer installed in Kali Linux by default and instead must
    be manually installed:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Volatility不再默认安装在Kali Linux中，需要手动安装：
- en: Let’s first download Volatility 3 from the official site at [https://www.volatilityfoundation.org/releases-vol3](https://www.volatilityfoundation.org/releases-vol3).
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先从官网[https://www.volatilityfoundation.org/releases-vol3](https://www.volatilityfoundation.org/releases-vol3)下载Volatility
    3。
- en: 'Be sure to click on the **.zip** file link within the **Volatility 3** tab,
    as seen in the following screenshot:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保点击**Volatility 3**标签页中的**.zip**文件链接，如下图所示：
- en: '![Figure 10.1 – Volatility downloads page](image/Figure_10.01_B19441.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图10.1 – Volatility下载页面](image/Figure_10.01_B19441.jpg)'
- en: Figure 10.1 – Volatility downloads page
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 – Volatility下载页面
- en: I’ve chosen to save the file in my **Downloads** folder. I’ve also extracted
    the files by right-clicking on the **.zip** file and then selecting **Extract
    Here**, as seen in the following screenshot.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择将文件保存在**Downloads**文件夹中。我还通过右键点击**.zip**文件并选择**Extract Here**来解压文件，如下图所示。
- en: '![Figure 10.2 – Extracting the Volatility 3 ZIP file](image/Figure_10.02_B19441.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图10.2 – 解压Volatility 3 ZIP文件](image/Figure_10.02_B19441.jpg)'
- en: Figure 10.2 – Extracting the Volatility 3 ZIP file
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2 – 解压Volatility 3 ZIP文件
- en: Note
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: I’ve also renamed the extracted folder **volatility3** to simplify things. Be
    sure to take note of the folder name exactly as it is typed as it will be required
    later.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我还将解压后的文件夹重命名为**volatility3**，以简化操作。务必准确记下文件夹名称，因为后续会用到。
- en: Before installing Volatility 3, I highly recommend updating your Kali installation
    to ensure that all files are the most current. Run the **sudo apt-get update**
    command to do this.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安装 Volatility 3 之前，我强烈建议您更新 Kali 安装，以确保所有文件都是最新的。请运行 **sudo apt-get update**
    命令来完成此操作。
- en: '![Figure 10.3 – Updating Kali Linux](image/Figure_10.03_B19441.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.3 – 更新 Kali Linux](image/Figure_10.03_B19441.jpg)'
- en: Figure 10.3 – Updating Kali Linux
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3 – 更新 Kali Linux
- en: 'Now that our system has been updated, let’s install Python 3 by typing the
    following command:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在系统已经更新，让我们通过输入以下命令安装 Python 3：
- en: '[PRE0]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The following screenshot shows the output of the preceding command when installing
    Volatility 3.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在安装 Volatility 3 时运行前述命令的输出。
- en: '![Figure 10.4 – Installing Python 3 in Kali](image/Figure_10.04_B19441.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.4 – 在 Kali 中安装 Python 3](image/Figure_10.04_B19441.jpg)'
- en: Figure 10.4 – Installing Python 3 in Kali
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.4 – 在 Kali 中安装 Python 3
- en: 'Volatility 3 also requires dependencies that must be installed for full functionality.
    To install all the required dependencies, type the following:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Volatility 3 还需要安装一些依赖项才能完全发挥功能。要安装所有必需的依赖项，请输入以下命令：
- en: '[PRE1]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The following screenshot shows the output of the preceding command when installing
    Python tools in Volatility 3.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在安装 Volatility 3 时运行前述命令的输出。
- en: '![Figure 10.5 – Installing Volatility 3 dependencies](image/Figure_10.05_B19441.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.5 – 安装 Volatility 3 依赖项](image/Figure_10.05_B19441.jpg)'
- en: Figure 10.5 – Installing Volatility 3 dependencies
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.5 – 安装 Volatility 3 依赖项
- en: 'Let’s now change directories to the folder containing all Volatility 3 files.
    In this instance, I have renamed my folder **volatility3** within the **Downloads**
    folder. To change to that directory, I’ll use the following command:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们切换到包含所有 Volatility 3 文件的文件夹。在此示例中，我将我的文件夹重命名为 **volatility3**，并将其放在 **Downloads**
    文件夹中。要切换到该目录，我将使用以下命令：
- en: '[PRE2]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The following screenshot shows the output of the preceding command.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前述命令的输出。
- en: '![Figure 10.6 – Changing directories](image/Figure_10.06_B19441.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.6 – 更改目录](image/Figure_10.06_B19441.jpg)'
- en: Figure 10.6 – Changing directories
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.6 – 更改目录
- en: 'We can then use the **ls** command to list and show all files within the **volatility3**
    folder:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们可以使用 **ls** 命令列出并显示 **volatility3** 文件夹中的所有文件：
- en: '![Figure 10.7 – ls command output](image/Figure_10.07_B19441.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.7 – ls 命令输出](image/Figure_10.07_B19441.jpg)'
- en: Figure 10.7 – ls command output
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.7 – ls 命令输出
- en: In the preceding screenshot, we can see all files required to set up and run
    Volatility 3.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述截图中，我们可以看到设置和运行 Volatility 3 所需的所有文件。
- en: 'Within my **volatility3** folder, I can now install Volatility 3 by typing
    the following command:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我的 **volatility3** 文件夹中，现在可以通过输入以下命令来安装 Volatility 3：
- en: '[PRE3]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The following screenshot shows the output of the preceding command when installing
    Python 3.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在安装 Python 3 时运行前述命令的输出。
- en: '![Figure 10.8 – Installing Volatility 3](image/Figure_10.08_B19441.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.8 – 安装 Volatility 3](image/Figure_10.08_B19441.jpg)'
- en: Figure 10.8 – Installing Volatility 3
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.8 – 安装 Volatility 3
- en: 'Now that Python 3 and all the Volatility packages and prerequisites have been
    installed, we can verify the installation by typing the following command:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在 Python 3 及所有 Volatility 包和先决条件已经安装完成，我们可以通过输入以下命令来验证安装：
- en: '[PRE4]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The following screenshot shows the output of the preceding command.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前述命令的输出。
- en: '![Figure 10.9 – Volatility installation verification](image/Figure_10.09_B19441.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.9 – Volatility 安装验证](image/Figure_10.09_B19441.jpg)'
- en: Figure 10.9 – Volatility installation verification
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.9 – Volatility 安装验证
- en: Volatility contains many plugins that you will need to occasionally reference.
    I recommend having the list of all plugins open in a separate Terminal for easy
    reference as this is much easier than having to scroll to the top of the Terminal
    to find the Volatility plugin commands.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Volatility 包含许多插件，您需要不时参考它们。我建议您在另一个终端中打开所有插件的列表，方便参考，因为这样比不断滚动终端顶部查找 Volatility
    插件命令要容易得多。
- en: 'Open a new Terminal within the **volatility3** directory and type the following
    command to view all plugins:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **volatility3** 目录中打开一个新的终端，并输入以下命令以查看所有插件：
- en: '[PRE5]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The following screenshot shows the output of the preceding command.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前述命令的输出。
- en: '![Figure 10.10 – Volatility help command](image/Figure_10.10_B19441.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.10 – Volatility 帮助命令](image/Figure_10.10_B19441.jpg)'
- en: Figure 10.10 – Volatility help command
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.10 – Volatility 帮助命令
- en: 'Volatility 3 now uses **OS-specific** plugins for Linux, Mac, and Windows,
    as seen in the snippet of the **python3 vol.py –h** output here:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Volatility 3 现在使用针对 Linux、Mac 和 Windows 的**OS 特定**插件，如以下**python3 vol.py –h**输出的片段所示：
- en: '![Figure 10.11 – OS-specific plugins in Volatility 3](image/Figure_10.11_B19441.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.11 – Volatility 3 中的 OS 特定插件](image/Figure_10.11_B19441.jpg)'
- en: Figure 10.11 – OS-specific plugins in Volatility 3
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.11 – Volatility 3 中的 OS 特定插件
- en: Before we begin the analysis of our previously downloaded **cridex.vmem** sample
    memory dump file, let’s copy the file from its current directory in the **Downloads**
    folder and paste it into the **volatility3** folder. This makes access to our
    memory dump file easier by not having to specify a lengthy path to the file each
    time we need to use a plugin.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开始分析我们之前下载的**cridex.vmem**样本内存转储文件之前，让我们将文件从当前目录（**Downloads** 文件夹）复制并粘贴到**volatility3**文件夹中。这样做可以让我们在每次使用插件时，避免每次都指定文件的长路径，方便访问内存转储文件。
- en: Keeping the previous Terminal open, let’s open a new Terminal and change directories
    to our **volatility3** folder and issue the **ls** command to ensure that our
    **cridex.vmem** memory dump sample can be found within that directory, as seen
    in the following screenshot.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持之前的终端窗口打开，让我们打开一个新终端并切换到我们的**volatility3**文件夹，然后执行**ls**命令，确保我们的**cridex.vmem**内存转储样本可以在该目录中找到，如下图所示。
- en: '![Figure 10.12 – Contents of the volatility3 directory](image/Figure_10.12_B19441.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.12 – volatility3 目录的内容](image/Figure_10.12_B19441.jpg)'
- en: Figure 10.12 – Contents of the volatility3 directory
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.12 – volatility3 目录的内容
- en: Here’s the exciting part. Let’s do some DFIR analysis using Volatility 3 and
    see what we can find!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是激动人心的部分，让我们使用 Volatility 3 进行一些 DFIR 分析，看看能发现什么！
- en: Memory dump analysis using Volatility 3
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Volatility 3 进行内存转储分析
- en: For those of you who may have read previous editions of this book where we used
    Volatility 2, or are just familiar with using Volatility 2, you will notice that
    Volatility 3 is a bit different as far as the plugins are concerned. You may also
    notice that the speed at which the plugins work is also faster in Volatility 3.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些可能已经阅读过本书早期版本，或者熟悉使用 Volatility 2 的读者，你们会发现 Volatility 3 在插件方面有所不同。你们还可能注意到，插件工作的速度在
    Volatility 3 中也更快了。
- en: For this lab, we’ll take a very structured approach using the various plugins
    in Volatility 3\. We’ll first look at process and service identification, gather
    some user information, have a look at registry information, and discover any malware
    that may be running on the device.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本次实验中，我们将采用非常结构化的方法使用 Volatility 3 中的各种插件。我们首先查看进程和服务识别，收集一些用户信息，查看注册表信息，发现设备上可能运行的恶意软件。
- en: Using Volatility 3 is quite simple. Once you are in the Volatility directory,
    the commands to use the plugins are essentially the same apart from the plugin
    name.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Volatility 3 非常简单。一旦你进入 Volatility 目录，使用插件的命令基本相同，只是插件名称不同。
- en: 'The syntax is as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 语法如下：
- en: '[PRE6]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding example, **-f** specifies the filename of the dump, which in
    our case is **cridex.vmem**, and **OS.plugin** will be the plugin that we would
    like to run against our memory dump. Let’s use the **info** plugin as our first
    analysis task.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，**-f**指定了转储文件的文件名，在我们的案例中是**cridex.vmem**，而**OS.plugin**将是我们希望针对内存转储运行的插件。让我们将**info**插件作为我们的第一个分析任务。
- en: Image and OS verification
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图像和操作系统验证
- en: Although no longer required in Volatility 3, it is useful to identify the version
    of the OS of the device from which the memory dump was created to ensure that
    we use the correct plugins, as they are now specific to various OSs, which we
    learned earlier on in this chapter.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在 Volatility 3 中不再需要，但识别创建内存转储的设备的操作系统版本依然很有用，以确保我们使用正确的插件，因为这些插件现在是针对不同操作系统的，这一点我们在本章前面已经学过。
- en: 'Let’s find out what OS was running on the system by using the **info** plugin:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过使用**info**插件来找出系统上运行的是哪个操作系统：
- en: '[PRE7]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The following screenshot shows the output of the preceding command.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了前述命令的输出。
- en: '![Figure 10.13 – Volatility 3 info plugin output](image/Figure_10.13_B19441.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.13 – Volatility 3 info 插件输出](image/Figure_10.13_B19441.jpg)'
- en: Figure 10.13 – Volatility 3 info plugin output
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.13 – Volatility 3 info 插件输出
- en: 'The output for the **info** plugin is lengthy; however, I’ve included a snippet
    of the output in the following figure, where we can see that this memory dump
    was taken from a Windows XP Service Pack 3 machine:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**info**插件的输出很长；然而，我已在下图中包含了部分输出，我们可以看到该内存转储是从Windows XP Service Pack 3机器上获取的：'
- en: '![Figure 10.14 – info plugin snippet](image/Figure_10.14_B19441.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图10.14 – info插件输出片段](image/Figure_10.14_B19441.jpg)'
- en: Figure 10.14 – info plugin snippet
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.14 – info插件输出片段
- en: This tells us that we must only use Windows plugins against this dump for our
    analysis. Let’s now attempt to identify running processes and services.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉我们，必须仅对这个转储使用Windows插件进行分析。现在让我们尝试识别正在运行的进程和服务。
- en: Process identification and analysis
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进程识别与分析
- en: 'Let’s officially start our DFIR memory dump analysis by attempting to identify
    and link connected processes, their IDs, times started, and offset locations within
    the memory image. We will be using several plugins but will begin with the following
    three plugins to get us started:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们正式开始DFIR内存转储分析，尝试识别和关联连接的进程、它们的ID、启动时间以及内存映像中的偏移位置。我们将使用几个插件，但首先使用以下三个插件来开始：
- en: '**pslist**'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pslist**'
- en: '**pstree**'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pstree**'
- en: '**psscan**'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**psscan**'
- en: The pslist plugin
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pslist插件
- en: This tool not only displays a list of all running processes but also gives useful
    information such as the **Process ID** (**PID**) and the **Parent PID** (**PPID**),
    and shows the time the processes were started.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具不仅显示所有正在运行的进程列表，还提供有用的信息，如**进程ID**（**PID**）和**父进程ID**（**PPID**），并显示进程启动的时间。
- en: 'The command to run the **pslist** plugin is as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 运行**pslist**插件的命令如下：
- en: '[PRE8]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the following screenshot, we can see that the **System**, **smss**, **csrss**,
    **winlogon.exe**, **services.exe**, **lsass.exe**, **svchost.exe**, and **explorer.exe**
    services were all started first and then followed by a few others. Notice any
    suspicious-looking services?
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，我们可以看到**System**、**smss**、**csrss**、**winlogon.exe**、**services.exe**、**lsass.exe**、**svchost.exe**和**explorer.exe**服务首先启动，随后是其他一些服务。注意到任何可疑的服务吗？
- en: '![Figure 10.15 – The plslist plugin output](image/Figure_10.15_B19441.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图10.15 – pslist插件输出](image/Figure_10.15_B19441.jpg)'
- en: Figure 10.15 – The plslist plugin output
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.15 – pslist插件输出
- en: The PID identifies the process and the PPID identifies the parent of the process.
    Looking at the **pslist** output, we can see that the **winlogon.exe** process
    has a PID of **608** and a PPID of **368**. The PPIDs of the **services.exe**
    and **lsass.exe** processes (directly after the **winlogon.exe** process) are
    both **608**, indicating that **winlogon.exe** is in fact the PPID for both **services.exe**
    and **lsass.exe**.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: PID标识进程，PPID标识进程的父进程。从**pslist**输出中，我们可以看到**winlogon.exe**进程的PID是**608**，PPID是**368**。**services.exe**和**lsass.exe**进程（紧随**winlogon.exe**进程之后）的PPID均为**608**，这表明**winlogon.exe**实际上是**services.exe**和**lsass.exe**的PPID。
- en: For those new to PIDs and processes themselves, a quick Google search can assist
    with identification and description information. It is also useful to become familiar
    with many of the startup processes to be able to readily point out processes that
    may be unusual or suspect.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些刚接触PID和进程的人，快速的Google搜索可以帮助识别和描述相关信息。熟悉许多启动进程也非常有用，这样可以迅速指出那些可能不寻常或可疑的进程。
- en: The timing and order of the processes should also be noted as these may assist
    in investigations. If we scroll down a bit, we can also tell that **explorer.exe**
    with a PID of **1484** is the PPID of **reader_sl.exe**.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 进程的时间和顺序也应注意，因为这些信息可能对调查有帮助。如果我们稍微向下滚动，可以看到**explorer.exe**的PID是**1484**，它是**reader_sl.exe**的PPID。
- en: Let’s dig a bit deeper using the **pstree** plugin.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用**pstree**插件进一步深入分析。
- en: The pstree plugin
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pstree插件
- en: Another process identification command that can be used to list processes is
    the **pstree** plugin. This plugin shows the same list of processes as the **pslist**
    plugin but indentation is also used to identify child and parent processes.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可用于列出进程的命令是**pstree**插件。这个插件显示的进程列表与**pslist**插件相同，但还使用缩进来标识子进程和父进程。
- en: 'Run the **pstree** plugin by typing the following:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 通过输入以下命令运行**pstree**插件：
- en: '[PRE9]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the following screenshot, the asterisks represent the tree structure. One
    asterisk indicates the PID and more than one asterisk indicates it is a child
    process.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，星号代表树形结构。一个星号表示PID，而多个星号表示它是子进程。
- en: '![Figure 10.16 – pstree plugin output](image/Figure_10.16_B19441.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.16 – pstree 插件输出](image/Figure_10.16_B19441.jpg)'
- en: Figure 10.16 – pstree plugin output
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.16 – pstree 插件输出
- en: Let’s look at the first asterisk, which represents the **smss.exe** process
    with a PID of **386**. We can see that under this process, there are other processes
    with more than one asterisk that have a PPID of **386**, indicating that they
    are all child processes of **smss.exe**. Similarly, if we look further down, we
    can see that **explorer.exe** with a PID of **1484** is the parent process of
    **reader_sl.exe** with a PPID of **1484**. It takes some time to adjust to this
    format but it helps simplify parent and child processes in DFIR analysis.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查看第一个星号，它代表 PID 为 **386** 的 **smss.exe** 进程。我们可以看到在该进程下，有其他进程显示为多个星号，并且它们的
    PPID 是 **386**，表示它们是 **smss.exe** 的子进程。类似地，如果我们进一步查看，我们会发现 PID 为 **1484** 的 **explorer.exe**
    是 PPID 为 **1484** 的 **reader_sl.exe** 的父进程。适应这种格式需要一些时间，但它有助于简化 DFIR 分析中的父子进程关系。
- en: The psscan plugin
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: psscan 插件
- en: The **psscan** command displays inactive and even hidden processes that can
    be used by malware, such as rootkits, and are well known for doing just that to
    evade discovery by users and antivirus programs.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**psscan** 命令显示了非活动甚至隐藏的进程，这些进程可能被恶意软件（如 rootkits）利用，且以此方式逃避用户和杀毒程序的发现。'
- en: 'Let’s run the **psscan** plugin by typing the following:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过输入以下命令运行 **psscan** 插件：
- en: '[PRE10]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The following screenshot shows the output of the preceding command when running
    the **psscan** plugin.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了运行 **psscan** 插件时前述命令的输出。
- en: '![Figure 10.17 – psscan output](image/Figure_10.17_B19441.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.17 – psscan 输出](image/Figure_10.17_B19441.jpg)'
- en: Figure 10.17 – psscan output
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.17 – psscan 输出
- en: So far, there’s nothing that stands out. Let’s keep digging.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，似乎没有什么特别的，我们继续深入分析。
- en: The modscan plugin
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: modscan 插件
- en: The **modscan** plugin displays a list of all modules present in the memory
    image. This helps us identify the path and directory for processes, system files,
    and **Dynamic Link Library** (**DLL**) files.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**modscan** 插件显示内存映像中所有模块的列表。这有助于我们识别进程、系统文件和**动态链接库**（**DLL**）文件的路径和目录。'
- en: 'Run the **modscan** plugin by typing the following:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 通过输入以下命令运行 **modscan** 插件：
- en: '[PRE11]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As seen in the following screenshot, the **modscan** plugin lists all modules
    running that were not available in the previous process scans.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，**modscan** 插件列出了在之前的进程扫描中未显示的所有正在运行的模块。
- en: '![Figure 10.18 – modscan plugin output](image/Figure_10.18_B19441.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.18 – modscan 插件输出](image/Figure_10.18_B19441.jpg)'
- en: Figure 10.18 – modscan plugin output
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.18 – modscan 插件输出
- en: Let’s keep looking.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续查看。
- en: The getsids plugin
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: getsids 插件
- en: All users can also be uniquely identified by a **Security Identifier** (**SID**).
    The **getsids** command has four very useful items in the order in which the processes
    were started (refer to the **pslist** and **pstree** command screenshots in *Figures
    10.15* and *10.16*).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 所有用户也可以通过 **安全标识符**（**SID**）唯一标识。**getsids** 命令具有四个非常有用的项目，按进程启动的顺序排列（请参考 *图
    10.15* 和 *图 10.16* 中的 **pslist** 和 **pstree** 命令截图）。
- en: 'The format for the **getsids** command output is as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '**getsids** 命令输出的格式如下：'
- en: '**[Process] (PID) [****SID] (User)**'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**[进程] (PID) [****SID] (用户)**'
- en: 'The first result in the list, for example, lists the following:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中的第一个结果例如列出了以下内容：
- en: '**System (4) : S – 1 – 5-** **18 (User)**'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**系统 (4) : S – 1 – 5-** **18 (用户)**'
- en: 'Where:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 其中：
- en: '**System** is the process'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统** 是进程'
- en: '**(4)** is the PID'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**(4)** 是 PID'
- en: '**S - 1 - 5- 18** is the SID'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**S - 1 - 5- 18** 是 SID'
- en: '**User** is the local system'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户** 是本地系统'
- en: 'To run the **getsids** plugin, type the following:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行 **getsids** 插件，请输入以下命令：
- en: '[PRE12]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The following screenshot shows the output of the preceding command when running
    the **getsids** plugin.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了运行 **getsids** 插件时前述命令的输出。
- en: '![Figure 10.19 – getsids plugin output](image/Figure_10.19_B19441.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.19 – getsids 插件输出](image/Figure_10.19_B19441.jpg)'
- en: Figure 10.19 – getsids plugin output
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.19 – getsids 插件输出
- en: If we scroll further down, we can see that the **reader_sl.exe** process was
    started by a user named Robert with the SID of **S-1-5-21**.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们继续向下滚动，可以看到 **reader_sl.exe** 进程是由名为 Robert 的用户启动的，SID 为 **S-1-5-21**。
- en: '![Figure 10.20 – getsids output snippet](image/Figure_10.20_B19441.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.20 – getsids 输出片段](image/Figure_10.20_B19441.jpg)'
- en: Figure 10.20 – getsids output snippet
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.20 – getsids 输出片段
- en: The envars plugin
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: envars 插件
- en: Let’s continue our analysis using the **envars** plugin, which displays process
    environment variables and nicely maps all processes to paths and users.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续使用**envars**插件进行分析，它显示进程环境变量，并将所有进程与路径和用户很好地映射。
- en: 'Run the **envars** plugin by typing the following:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 通过键入以下内容运行**envars**插件：
- en: '[PRE13]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![Figure 10.21 – envars plugin output](image/Figure_10.21_B19441.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.21 – envars 插件输出](image/Figure_10.21_B19441.jpg)'
- en: Figure 10.21 – envars plugin output
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.21 – envars 插件输出
- en: Scrolling through the lengthy output down to the **reader_sl.exe** process,
    we can find some very useful information about the process, path and directories,
    computer name architecture, drive information, and temporary file location. Good
    stuff.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动浏览冗长的输出，直到看到**reader_sl.exe**进程，我们可以找到一些关于该进程、路径和目录、计算机名称架构、驱动器信息和临时文件位置的非常有用的信息。很有价值的内容。
- en: '![Figure 10.22 – envars output snippet](image/Figure_10.22_B19441.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.22 – envars 输出片段](image/Figure_10.22_B19441.jpg)'
- en: Figure 10.22 – envars output snippet
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.22 – envars 输出片段
- en: Let’s do a bit of registry analysis and see what we can come up with.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们做一些注册表分析，看看能得出什么结果。
- en: The hivelist plugin
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: hivelist 插件
- en: The **hivelist** plugin lists the registry hives present at the time the memory
    dump was taken and will also show logged-in users. The **hivelist** command shows
    the details of virtual and physical addresses along with the easier readable plaintext
    names and locations.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '**hivelist**插件列出了在内存转储时存在的注册表蜂巢，并会显示已登录用户。**hivelist**命令显示了虚拟和物理地址的详细信息，以及易于阅读的明文名称和位置。'
- en: 'To run this plugin, type the following:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行此插件，请键入以下内容：
- en: '[PRE14]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The following screenshot shows the output of the preceding command when running
    the **hivelist** plugin.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了运行**hivelist**插件时前述命令的输出结果。
- en: '![Figure 10.23 – hivelist plugin output](image/Figure_10.23_B19441.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.23 – hivelist 插件输出](image/Figure_10.23_B19441.jpg)'
- en: Figure 10.23 – hivelist plugin output
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.23 – hivelist 插件输出
- en: Password dumping
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 密码转储
- en: 'The location of the **Security Accounts Manager** (**SAM**) file is also listed
    using the **hivelist** plugin, shown in the following screenshot (*Figure 10**.24*).
    The **SAM** file contains hashed passwords for usernames in Windows machines.
    The path to the **SAM** file is seen in the following screenshot: **Windows\system32\config\SAM**.
    This file cannot be accessed by users within Windows while the system is on. This
    can be further used to acquire the hashed passwords in the **SAM** file to crack
    passwords using a wordlist along with password-cracking tools such as John the
    Ripper, also available in Kali Linux:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**Security Accounts Manager**（**SAM**）文件的位置也通过**hivelist**插件列出，如下图所示（*图 10.24*）。**SAM**文件包含
    Windows 机器中用户名的哈希密码。**SAM**文件的路径在以下截图中可以看到：**Windows\system32\config\SAM**。在系统开机时，Windows
    用户无法访问此文件。可以进一步使用该文件中的哈希密码，通过使用字典和如 John the Ripper 等密码破解工具（也可以在 Kali Linux 中找到）来破解密码：'
- en: '![Figure 10.24 – SAM file location](image/Figure_10.24_B19441.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.24 – SAM 文件位置](image/Figure_10.24_B19441.jpg)'
- en: Figure 10.24 – SAM file location
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.24 – SAM 文件位置
- en: Let’s expand on this a bit further using the **userassist** plugin.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用**userassist**插件进一步展开分析。
- en: The userassist plugin
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: userassist 插件
- en: The **userassist** plugin displays more registry information and, as we can
    see in the following screenshot, displays much more details about users, file
    locations, files accessed, and timestamps.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '**userassist**插件显示更多的注册表信息，正如我们在以下截图中看到的，它提供了关于用户、文件位置、访问的文件和时间戳的更多细节。'
- en: 'To run the **userassist** plugin, type the following:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行**userassist**插件，请键入以下内容：
- en: '[PRE15]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The following screenshot shows the output of the preceding command when running
    the **userassist** plugin.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了运行**userassist**插件时前述命令的输出结果。
- en: '![Figure 10.25 – userassist plugin output](image/Figure_10.25_B19441.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.25 – userassist 插件输出](image/Figure_10.25_B19441.jpg)'
- en: Figure 10.25 – userassist plugin output
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.25 – userassist 插件输出
- en: Lastly, for this chapter, let’s see whether we can find any malicious code or
    applications.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在本章中，让我们看看是否能找到任何恶意代码或应用程序。
- en: The malfind plugin
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: malfind 插件
- en: The **malfind** plugin, as the name suggests, scans the dump for any malicious
    embedded code. This will be covered more in detail in [*Chapter 11*](B19441_11.xhtml#_idTextAnchor211),
    *Artifact, Malware, and Ransomware Analysis*, but let’s see whether we can find
    any embedded code within our current DFIR investigation.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名所示，**malfind**插件扫描转储文件以查找任何恶意嵌入的代码。在[*第11章*](B19441_11.xhtml#_idTextAnchor211)《伪造物、恶意软件和勒索软件分析》中，我们将更详细地讨论这一点，但让我们看看是否能在当前的DFIR调查中找到任何嵌入的代码。
- en: 'To run the **malfind** plugin, type the following:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行**malfind**插件，输入以下命令：
- en: '[PRE16]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The following screenshot shows the output of the preceding command when running
    the **malfind** plugin.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了运行**malfind**插件时的前述命令输出。
- en: '![Figure 10.26 – malfind plugin output](image/Figure_10.26_B19441.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.26 – malfind 插件输出](image/Figure_10.26_B19441.jpg)'
- en: Figure 10.26 – malfind plugin output
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.26 – malfind 插件输出
- en: 'This plugin is a bit more complex to understand but very useful once you understand
    the basics. The column names that we need to focus on are the following:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件稍微复杂一些，但一旦理解了基础内容，它就非常有用。我们需要关注的列名如下：
- en: '**PID**'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PID**'
- en: '**Process**'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进程**'
- en: '**CommitCharge**'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提交内容**'
- en: '**PrivateMemory**'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**私有内存**'
- en: Let’s look closer at the **reader_sl.exe** details in the **malfind** output,
    as follows.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地查看**malfind**输出中的**reader_sl.exe**详细信息，如下所示。
- en: '![Figure 10.27 – malfind snippet](image/Figure_10.27_B19441.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.27 – malfind 代码片段](image/Figure_10.27_B19441.jpg)'
- en: Figure 10.27 – malfind snippet
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.27 – malfind 代码片段
- en: 'Let’s analyze the output of the first line of the preceding **malfind** snippet:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析前面**malfind**代码片段的第一行输出：
- en: '**PID**: **1640**'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PID**: **1640**'
- en: '**Process**: **reader_sl.exe**'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进程**: **reader_sl.exe**'
- en: '**CommitCharge**: **PAGE_EXECUTE_READWRITE**'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提交内容**: **PAGE_EXECUTE_READWRITE**'
- en: '**PrivateMemory**: **33**'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**私有内存**: **33**'
- en: '**File** **output**: **1**'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件** **输出**: **1**'
- en: In the preceding output, we see that **reader_sl.exe** is executable code and
    is writing hidden code in memory. We will dive deeper into malware analysis in
    the next chapter.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，我们看到**reader_sl.exe**是可执行代码，并且在内存中写入了隐藏代码。我们将在下一章深入探讨恶意软件分析。
- en: Summary
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at memory forensics and analysis using some of the
    many plugins available within the Volatility 3 framework. We were able to successfully
    perform process, registry, DLL, and even malware analysis using this versatile
    tool. As we’ve seen, Volatility can perform several important functions in DFIR
    analysis and should be used together with other tools we’ve used previously to
    perform in-depth and detailed forensic analyses and investigations.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了使用Volatility 3框架中众多插件之一进行内存取证和分析。我们成功地进行了进程、注册表、DLL，甚至恶意软件分析，使用了这个多功能的工具。正如我们所见，Volatility可以在DFIR分析中执行几个重要功能，应该与我们之前使用的其他工具一起使用，以进行深入和详细的取证分析和调查。
- en: Be sure to download more publicly available memory images and samples to test
    your skills in this area. Experiment with as many plugins as you can and, of course,
    be sure to document your findings and consider sharing them online.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 一定要下载更多公开可用的内存镜像和样本，来测试你在这一领域的技能。尽可能多地尝试各种插件，当然，一定要记录你的发现，并考虑在线分享它们。
- en: Next up, we’ll be going even deeper into Volatility as we perform ransomware
    analysis and use many other tools to discover and analyze various DFIR artifacts.
    See you in the next chapter!
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将更加深入地探讨Volatility，并进行勒索软件分析，使用更多工具来发现和分析各种DFIR伪造物。下章见！
