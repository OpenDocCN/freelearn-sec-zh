- en: Social Engineering
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 社会工程学
- en: Social engineering is when an attacker manipulates or tricks a victim into performing
    an action or providing private information. This is often done by impersonating
    a trusted person, creating a sense of urgency, or creating a false pretext to
    push the victim to act. The action may be as simple as divulging information,
    or more complex like downloading and executing malware.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 社会工程学是指攻击者操纵或欺骗受害者执行某些操作或提供私人信息。这通常通过冒充受信任的人、制造紧迫感或构造虚假理由迫使受害者行动。受害者的行动可能是简单的信息泄露，也可能是更复杂的操作，如下载并执行恶意软件。
- en: We cover honeypots in this chapter, even though they are sometimes intended
    to trick bots and not humans. The goal is to intentionally deceive, which is the
    core of social engineering. We provide basic honeypot examples including TCP and
    HTTP honeypots.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了蜜罐，尽管它们有时是为了欺骗机器人而非人类。其目标是故意进行欺骗，这正是社会工程学的核心。我们提供了基本的蜜罐示例，包括 TCP 和 HTTP
    蜜罐。
- en: There are many other types of social engineering that are not covered in this
    book. This includes physical or in-person situations, such as tailgating and pretending
    to be a maintenance worker, as well as other digital and remote methods such as
    phone calls, SMS messages, and social media messaging.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书未涉及许多其他类型的社会工程学。这包括一些现场或面对面的情况，比如尾随进入和冒充维修人员，以及其他数字和远程方法，如电话、短信和社交媒体消息。
- en: Social engineering can be a grey area legally. For example, even if a company
    gives you the full scope to social engineer their employees, it does not give
    you permission for phishing an employee's personal email credentials. Be conscious
    of both the legal and ethical boundaries.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 社会工程学在法律上可能是一个灰色地带。例如，即使公司授权你对其员工进行社会工程学攻击，也不代表你有权限进行网络钓鱼攻击以窃取员工个人邮件的凭证。要注意法律和道德的边界。
- en: 'In this chapter, we will specifically cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将特别讨论以下主题：
- en: Gathering intel on an individual using Reddit's JSON REST API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Reddit 的 JSON REST API 收集关于个人的信息
- en: Sending phishing emails with SMTP
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 SMTP 发送网络钓鱼邮件
- en: Generating QR codes and base64 encoding images
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成二维码和将图像进行 base64 编码
- en: Honeypots
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蜜罐
- en: Gathering intel via JSON REST API
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 JSON REST API 收集信息
- en: REST with JSON are becoming the de facto interface for web APIs. Every API is
    different, so the primary objective of this example is to show how to process
    JSON data from a REST endpoint.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 带有 JSON 的 REST 已成为 Web API 的事实标准接口。每个 API 都不同，因此本示例的主要目的是展示如何处理来自 REST 端点的 JSON
    数据。
- en: This example will take Reddit username as an argument, and print the recent
    posts and comments by that user to get an idea of what topics they discuss. Reddit
    was chosen for this example because no authentication is required for certain
    endpoints, making it easy to test. Other services that provide REST APIs that
    you could query for intel gathering are Twitter and LinkedIn.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例将 Reddit 用户名作为参数，并打印该用户的最新帖子和评论，以了解他们讨论的话题。选择 Reddit 作为示例是因为某些端点不需要认证，便于测试。其他提供
    REST API 的服务，如 Twitter 和 LinkedIn，也可以用于收集信息。
- en: Remember, the emphasis of this example is to provide an example of parsing JSON
    from a REST endpoint. Since every API is different, this example should serve
    as a reference when writing your own programs to interact with JSON APIs. A data
    structure must be defined to match the response from the JSON endpoint. In this
    example, the data structure created matches the Reddit response.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，本示例的重点是提供一个解析来自 REST 端点的 JSON 示例。由于每个 API 都不同，因此此示例应作为编写自己的程序与 JSON API
    交互时的参考。必须定义一个数据结构来匹配 JSON 端点的响应。在本例中，创建的数据结构与 Reddit 的响应匹配。
- en: When working with JSON in Go, you first need to define the data structures,
    and then use the `Marshal` and `Unmarshal` functions to encode and decode between
    the raw string and structured data formats. The following example creates a data
    structure that matches the structure of the JSON returned by Reddit. The `Unmarshal`
    function is then used to convert the string into a Go data object. You don't have
    to create a variable for every piece of data in the JSON. You can omit the fields
    you don't need.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Go 中处理 JSON 时，你首先需要定义数据结构，然后使用 `Marshal` 和 `Unmarshal` 函数在原始字符串和结构化数据格式之间进行编码和解码。以下示例创建了一个与
    Reddit 返回的 JSON 结构匹配的数据结构。然后使用 `Unmarshal` 函数将字符串转换为 Go 数据对象。你不需要为 JSON 中的每一项数据创建变量，可以省略不需要的字段。
- en: The data in the JSON response is nested into many levels, so we will make use
    of anonymous structs. This prevents us from having to create a separate named
    type for every single level of nesting. This example creates one named struct
    with all of the nested levels stored as embedded anonymous structs.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: JSON响应中的数据嵌套了许多层级，因此我们将使用匿名结构体。这可以避免我们为每个嵌套层级创建一个单独命名的类型。这个示例创建了一个命名结构体，所有嵌套层级都作为嵌入的匿名结构体存储。
- en: The variable names in the Go data structs do not match the variable names provided
    in the JSON response, so the JSON variable name is provided right after the data
    type is defined in the structs. This allows the variables to be properly mapped
    from the JSON data to the Go struct. This is often necessary due to the case-sensitive
    nature of the variable names in a Go data structure.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Go数据结构中的变量名与JSON响应中提供的变量名不匹配，因此在结构体定义的数据类型后面提供了JSON变量名。这允许将变量从JSON数据正确映射到Go结构体中。这通常是必要的，因为Go数据结构中的变量名是区分大小写的。
- en: Note that every web service has its own terms of service, which may limit or
    restrict the way you access their site. Some sites have rules against scraping
    and others have rate limits. While it may not be a criminal offense, the service
    may block your account or IP address for violating terms of service. Be sure to
    read the terms of service for every website or API you interact with.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，每个网站服务都有自己的服务条款，这些条款可能限制或约束你访问其网站的方式。有些网站禁止抓取，其他网站则有访问频率限制。虽然这可能不是刑事犯罪，但服务提供商可能会因违反服务条款而封锁你的账户或IP地址。在与任何网站或API互动之前，一定要阅读其服务条款。
- en: 'The code for this example is as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例的代码如下：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Sending phishing emails with SMTP
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过SMTP发送钓鱼邮件
- en: Phishing is the process in which an attacker tries to obtain sensitive information
    via a fake email or some other form of communication designed to look like a legitimate
    email from a trusted source.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 钓鱼攻击是指攻击者通过伪造的电子邮件或其他旨在看起来像来自可信来源的合法电子邮件的通讯方式，试图获取敏感信息的过程。
- en: Phishing is often done via email, but can also be done over the phone, on social
    media, or via text messages. We are focusing on the email method. Phishing can
    be done on a large scale, where a generic email is sent out to a large number
    of recipients hoping someone will take the bait. The *Nigerian prince* email scam
    was a popular phishing campaign. Other emails offering incentives are popular
    and work relatively well, such as offering an iPhone giveaway or a gift card if
    they participate and follow the link you provided and logging in with their credentials.
    Phishing emails also often mimic legitimate senders using real signatures and
    company logos. A sense of urgency is often created to convince the victim to act
    quickly without following standard procedures.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 钓鱼攻击通常通过电子邮件进行，但也可以通过电话、社交媒体或短信进行。我们将重点讨论电子邮件方法。钓鱼攻击可以大规模进行，通常会向大量收件人发送一封通用的电子邮件，希望有人会上当。*尼日利亚王子*邮件骗局曾是一个流行的钓鱼攻击。其他提供奖励的邮件也很常见且相对有效，例如提供iPhone赠品或礼品卡，只要他们参与并点击你提供的链接并使用他们的凭据登录。钓鱼邮件还常常模仿合法发件人，使用真实的签名和公司徽标。通常会制造紧迫感，以说服受害者迅速行动，而不按标准程序操作。
- en: You can gather emails using the program from [Chapter 10](1b5ddb7b-00f9-47df-947c-e4d0ebeb94e5.xhtml),
    *Web Scraping*, that extracts emails from web pages. Combine the email extraction
    capability with the web crawler example provided, and you have a powerful tool
    for scraping emails off a domain.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用[第10章](1b5ddb7b-00f9-47df-947c-e4d0ebeb94e5.xhtml)中*网页抓取*的程序来收集电子邮件，该程序可以从网页中提取电子邮件。将电子邮件提取功能与提供的网页爬虫示例结合起来，你就可以得到一个强大的工具，用于从域名中抓取电子邮件。
- en: '**Spear phishing** is a term for targeted phishing that focuses on a small
    number of targets, maybe even just one specific target. Spear phishing requires
    more research and targeting, tailoring an email specific to the person, creating
    a believable pretext, perhaps impersonating someone they do know. Spear phishing
    takes more work, but it increases the likelihood of fooling a user, and reduces
    your chances of getting caught by spam filters.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**定向钓鱼攻击**是指针对少数目标，甚至可能是某个特定目标的钓鱼攻击。定向钓鱼需要更多的研究和定位，定制一封针对个人的电子邮件，创造一个可信的借口，或许还会冒充他们认识的人。定向钓鱼需要更多的工作，但它提高了欺骗用户的可能性，并降低了被垃圾邮件过滤器拦截的风险。'
- en: When attempting a spear phishing campaign, you should first gather as much information
    about your target before crafting the email. Earlier in this chapter, we talked
    about using JSON REST APIs to gather data on a target. You can also use the word
    count program and the headings grabber program from [Chapter 10](1b5ddb7b-00f9-47df-947c-e4d0ebeb94e5.xhtml),
    *Web Scraping*, if your target individual or organization has a website. Gathering
    the most common words and headings of a website can be a fast way of learning
    what industry the target belongs to or what products and services they may offer.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行网络钓鱼攻击时，你应该在制作邮件之前首先收集尽可能多的目标信息。本章早些时候提到过，使用 JSON REST API 来收集目标数据。如果你的目标个人或组织有网站，你还可以使用[第10章](1b5ddb7b-00f9-47df-947c-e4d0ebeb94e5.xhtml)中提到的词频计数程序和标题抓取程序，*网页抓取*。收集一个网站最常见的词汇和标题是快速了解目标所属行业或他们可能提供的产品和服务的方式。
- en: The Go standard library comes with an SMTP package for sending emails. Go also
    has a `net/mail` package for parsing emails ([https://golang.org/pkg/net/mail/](https://golang.org/pkg/net/mail/)).
    The `mail` package is relatively small and is not covered in this book, but it
    allows you to parse the full text of an email into a message type that lets you
    extract the body and headers individually. This example is focused on how to send
    an email with the SMTP package.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Go 标准库包含一个用于发送邮件的 SMTP 包。Go 还提供了一个`net/mail`包用于解析邮件（[https://golang.org/pkg/net/mail/](https://golang.org/pkg/net/mail/)）。`mail`包相对较小，本书中未涉及，但它允许你将邮件的完整文本解析为一个消息类型，从而可以单独提取正文和头部信息。这个示例专注于如何使用
    SMTP 包发送邮件。
- en: The configuration variables are all defined at the top of the source code. Be
    sure to set proper SMTP host, port, sender, and password. Common SMTP ports are
    `25` for unencrypted access, and ports `465` and `587` are often used for encrypted
    access. The settings will all depend on the configuration of your SMTP server.
    This example will not run correctly without first setting the proper server and
    credentials. If you have a Gmail account, you can reuse most of the prepopulated
    values and just replace the sender and password.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 配置变量都在源代码的顶部定义。请确保设置正确的 SMTP 主机、端口、发件人和密码。常见的 SMTP 端口是 `25` 用于未加密访问，端口 `465`
    和 `587` 常用于加密访问。具体设置取决于你的 SMTP 服务器配置。此示例在没有先设置正确的服务器和凭据时无法正常运行。如果你有 Gmail 账户，可以重用大部分自动填充的值，只需要替换发件人和密码即可。
- en: If you are sending the mail using Gmail and using the two-factor authentication,
    you will need to create an application specific password at [https://security.google.com/settings/security/apppasswords](https://security.google.com/settings/security/apppasswords).
    If you are not using two-factor authentication, then enable less secure applications
    at [https://myaccount.google.com/lesssecureapps](https://myaccount.google.com/lesssecureapps).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 Gmail 发送邮件并启用了两步验证，你需要在[https://security.google.com/settings/security/apppasswords](https://security.google.com/settings/security/apppasswords)
    创建一个特定的应用密码。如果你没有使用两步验证，那么请在[https://myaccount.google.com/lesssecureapps](https://myaccount.google.com/lesssecureapps)
    启用不太安全的应用程序。
- en: This program creates and sends two example emails, one text and one HTML. It
    is also possible to send a combined text and HTML email, where the email client
    chooses which version to render. This can be done using the `Content-Type` header
    to `multipart/alternative` and setting a boundary to distinguish where the text
    email ends and the HTML email starts. Sending a combined text and HTML email is
    not covered here, but is worth mentioning. You can learn more about the `multipart`
    content type, *RFC 1341*, at [https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html](https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序会创建并发送两封示例邮件，一封是文本邮件，另一封是 HTML 邮件。还可以发送一个合并的文本和 HTML 邮件，在这种情况下，邮件客户端会选择渲染哪个版本。可以使用`Content-Type`头设置为`multipart/alternative`，并设置边界来区分文本邮件和
    HTML 邮件的起始和结束。发送合并的文本和 HTML 邮件不在此处讨论，但值得一提。你可以在[https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html](https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html)了解更多关于`multipart`内容类型的知识，*RFC
    1341*。
- en: 'Go also provides a `template` package that allows you to create a template
    file with variable placeholders, and then populate the placeholders with data
    from a struct. The templates are useful if you want to separate the template files
    from the source code, allowing you to modify the templates without recompiling
    the application. The following example does not use a template, but you can read
    more about templates at [https://golang.org/pkg/text/template/](https://golang.org/pkg/text/template/):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Go 还提供了一个 `template` 包，允许你创建一个包含变量占位符的模板文件，然后用结构体中的数据填充这些占位符。如果你希望将模板文件与源代码分离，模板就非常有用，这样你可以在不重新编译应用程序的情况下修改模板。以下示例没有使用模板，但你可以在
    [https://golang.org/pkg/text/template/](https://golang.org/pkg/text/template/)
    阅读更多关于模板的内容：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Generating QR codes
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成二维码
- en: A **Quick Response** (**QR**) code is a two-dimensional barcode. It stores more
    information than a traditional one-dimensional line barcode. They were originally
    developed in the Japanese automotive industry, but have been adopted by other
    industries. QR codes were approved as an international standard by ISO in 2000\.
    The latest specification can be found at [https://www.iso.org/standard/62021.html](https://www.iso.org/standard/62021.html).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**快速响应**（**QR**）码是一种二维条形码。它存储的信息比传统的一维条形码要多。二维码最初是由日本汽车工业开发的，但已经被其他行业采纳。二维码于2000年被ISO批准为国际标准。最新的规范可以在
    [https://www.iso.org/standard/62021.html](https://www.iso.org/standard/62021.html)
    找到。'
- en: QR codes can be found on some billboards, posters, handouts, and other advertising
    material. QR codes are also used frequently in transactions. You might see QR
    codes on train tickets or when sending and receiving cryptocurrency such as Bitcoin.
    Some authentication services such as two-factor authentication utilize QR codes
    for convenience.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 二维码可以在一些广告牌、海报、传单和其他广告材料上找到。二维码也常常用于交易中。你可能会在火车票上看到二维码，或者在发送和接收加密货币（如比特币）时使用二维码。一些身份验证服务，如双因素身份验证，也使用二维码以便于操作。
- en: QR codes are good for social engineering because a human can't tell just by
    looking at a QR code if it is malicious or not. Often times the QR code contains
    a URL that is loaded immediately, leaving the user open to risk. If you create
    a believable pretext, you may convince a user to trust the QR code.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 二维码对社交工程非常有用，因为人类无法仅凭外观判断二维码是否恶意。二维码通常包含一个立即加载的网址，这让用户面临风险。如果你创建一个可信的前提，可能会说服用户信任这个二维码。
- en: 'The package used in this example is called `go-qrcode` and is available at
    [https://github.com/skip2/go-qrcode](https://github.com/skip2/go-qrcode). This
    is a third-party library available on GitHub and not supported by Google or the
    Go team. The `go-qrcode` package utilizes the standard library image packages:
    `image`, `image/color`, and `image/png`.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例中使用的包叫做 `go-qrcode`，可以在 [https://github.com/skip2/go-qrcode](https://github.com/skip2/go-qrcode)
    上找到。它是一个第三方库，托管在GitHub上，并非由Google或Go团队提供支持。`go-qrcode` 包利用了标准库的图像包：`image`、`image/color`
    和 `image/png`。
- en: 'Install the `go-qrcode` package with the following command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令安装 `go-qrcode` 包：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The ellipsis (`...`) in `go get` is a wildcard. It will also install all subpackages.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`go get` 中的省略号（`...`）是一个通配符，它会安装所有子包。'
- en: According to the package author, the maximum capacity of the QR code varies
    based on the content encoded and the error recovery level. The maximum capacity
    is 2,953 bytes, 4,296 alphanumeric characters, 7,089 numeric digits, or a combination.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 根据包作者的说法，二维码的最大容量取决于编码的内容和错误恢复级别。最大容量为 2,953 字节、4,296 个字母数字字符、7,089 个数字字符，或它们的组合。
- en: There are two main points being demonstrated in this program. First is how to
    generate the QR code in the form of raw PNG bytes, and then the data to be embedded
    within an HTML page is base64 encoded. The full HTML `img` tag is generated, given
    as an output to standard output, and can be copied and pasted directly into an
    HTML page. The second part demonstrates how to simply generate the QR code and
    have it written directly to a file.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 本程序展示了两个主要的内容。首先是如何生成二维码，以原始PNG字节的形式，然后将要嵌入HTML页面的数据进行Base64编码。生成完整的HTML `img`
    标签，并作为输出传递到标准输出，可以直接复制粘贴到HTML页面中。第二部分展示了如何简单地生成二维码并将其直接写入文件。
- en: 'This example generates a QR code in the format of a PNG image. Let''s provide
    the text you want to encode and the output filename as command-line arguments,
    and the program will output the image with your data encoded as a QR image:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例生成一个 PNG 图像格式的二维码。让我们提供你想要编码的文本和输出文件名作为命令行参数，程序将输出带有编码数据的二维码图像：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Base64 encoding data
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Base64 编码数据
- en: In the previous example, the QR code was base64 encoded. Since this is a common
    task, it is worth covering how to encode as well as decode. Any time binary data
    needs to be stored or transmitted as a string, base64 encoding is useful.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，二维码是经过 base64 编码的。由于这是一个常见任务，因此值得介绍如何进行编码和解码。每当需要将二进制数据作为字符串存储或传输时，base64
    编码非常有用。
- en: 'This example demonstrates a very simple use case of encoding and decoding a
    byte slice. The two important functions for base64 encoding and decoding are `EncodeToString()`
    and `DecodeString()`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例展示了一个非常简单的用例，演示如何对字节切片进行编码和解码。进行 base64 编码和解码的两个重要函数是 `EncodeToString()`
    和 `DecodeString()`：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Honeypots
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Honeypots
- en: Honeypots are fake services you set to catch attackers. You intentionally put
    a service up with the intention of luring attackers, tricking them into thinking
    the service is real and contains some kind of sensitive information. Often, the
    honeypot is disguised to look like an old, outdated, and vulnerable server. Logging
    or alerts can be attached to the honeypot to quickly identify a potential attacker.
    Having a honeypot on your internal network may alert you of an attacker before
    any systems are compromised.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Honeypots 是你设置的假服务，用来捕捉攻击者。你故意设置一个服务，目的是引诱攻击者，让他们误以为这个服务是真实的，并且包含某种敏感信息。通常，honeypot
    会伪装成一个旧的、过时的且容易受到攻击的服务器。可以将日志记录或警报附加到 honeypot 上，以便快速识别潜在攻击者。在你的内部网络上设置 honeypot，可能会在任何系统被攻破之前就发现攻击者。
- en: When attackers compromise a machine, they often use the compromised machine
    to continue enumerating, attacking, and pivoting. If a honeypot on your network
    detects strange behavior coming from another machine on your network, such as
    port scans or login attempts, the machine behaving strangely might be compromised.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当攻击者攻破一台机器时，他们通常会利用这台被攻破的机器继续枚举、攻击和跳转。如果你的网络中的 honeypot 检测到来自网络中其他机器的异常行为，如端口扫描或登录尝试，这台表现异常的机器可能已经被攻破。
- en: There are many different kinds of honeypots. It could be anything from a simple
    TCP listener that logs any connection, a fake HTML page with a login form field,
    or a full blown web application that looks like a real employee portal. If the
    attacker thinks they have found a critical application, they are more likely to
    spend time trying to gain access. If you lay out attractive honeypots, you might
    get the attacker to spend the majority of their time working on a useless honeypot.
    If detailed logging is kept, you can learn about what methods the attacker is
    using, what tools they have, and perhaps even their location.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Honeypot 有许多不同种类。它可以是任何东西，从一个简单的 TCP 监听器，用来记录任何连接，一个带有登录表单字段的假 HTML 页面，或者一个完整的
    Web 应用程序，看起来像是一个真实的员工门户。如果攻击者认为他们已经找到了一个关键应用程序，他们更可能花时间试图获取访问权限。如果你设置了诱人的 honeypot，可能会让攻击者花费大部分时间在一个无用的
    honeypot 上。如果记录了详细的日志，你可以了解攻击者使用了哪些方法、他们拥有哪些工具，甚至可能知道他们的位置。
- en: 'There are a few other types of honeypots worth mentioning, but not demonstrated
    in this book:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 还有几种其他类型的 honeypot 值得一提，但在本书中没有演示：
- en: '**SMTP honeypot**: This simulates an open email relay that spammers abuse to
    catch spammers trying to use your mailer.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SMTP honeypot**：这模拟了一个开放的电子邮件中继，垃圾邮件发送者滥用它来捕捉试图使用你的邮件系统的垃圾邮件发送者。'
- en: '**Web crawler honeypot**: These are the hidden web pages that are not intended
    to be reached by a person, but links to it are hidden in the public places of
    your website, such as HTML comments, to catch spiders, crawlers, and scrapers.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web 爬虫 honeypot**：这些是隐藏的网页，通常不打算被人访问，但它们的链接隐藏在你网站的公共区域，如 HTML 注释中，用来捕捉蜘蛛、爬虫和抓取器。'
- en: '**Database honeypot**: This is a fake or real database with verbose logging
    to detect attackers, that may also contain fake data to see what information attackers
    are interested in.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库 honeypot**：这是一个假数据库或真实数据库，通过详细的日志记录来检测攻击者，也可能包含假数据，以便观察攻击者对哪些信息感兴趣。'
- en: '**Honeynet**: This is an entire network full of honeypots, made to look like
    a real network to the extent of automating or faking client traffic to the honeypot
    services to simulate real users.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Honeynet**：这是一个充满 honeypot 的整个网络，看起来像一个真实的网络，甚至可以自动化或伪造客户端流量到 honeypot 服务，以模拟真实用户。'
- en: 'Attackers may be able to spot obvious honeypot services and avoid them. I recommend
    that you go with one of two extremes: making the honeypot mimic a real service
    as closely as possible, or making the service a total black box that does not
    give away any information to the attacker.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可能能够识别出明显的蜜罐服务并避开它们。我建议你选择两个极端中的一个：让蜜罐尽可能模拟真实服务，或者让服务成为一个完全的黑箱，不向攻击者透露任何信息。
- en: We cover very basic examples in this section, to help you understand the concept
    of honeypots and give you a template to create your own more customized honeypots.
    First, a basic TCP socket honeypot is demonstrated. This will listen on a port
    and log any connections and data it receives. To accompany this example, a TCP
    testing tool is provided. It behaves like a primitive version of Netcat, allowing
    you to send a single message to a server via standard input. This can be used
    to test the TCP honeypot or to extend and use for other applications. The last
    example is an HTTP honeypot. It provides a login form that logs attempts to authenticate,
    but always returns an error.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 本节我们介绍一些非常基础的示例，帮助你理解蜜罐的概念，并为你提供创建自己定制蜜罐的模板。首先，展示了一个基础的 TCP 套接字蜜罐。它将监听一个端口，并记录任何连接和接收到的数据。为了配合这个示例，提供了一个
    TCP 测试工具。它像一个原始版本的 Netcat，允许你通过标准输入向服务器发送单个消息。这可以用来测试 TCP 蜜罐，或者扩展并用于其他应用程序。最后一个示例是一个
    HTTP 蜜罐。它提供一个登录表单，记录身份验证尝试，但总是返回错误。
- en: Make sure that you understand the risks of honeypots on your network. If you
    leave a honeypot running without keeping the underlying operating system updated,
    you are potentially adding a real risk to your network.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你理解在网络中使用蜜罐的风险。如果你让蜜罐继续运行而没有保持底层操作系统的更新，那么你可能会给你的网络带来真正的风险。
- en: TCP honeypot
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TCP 蜜罐
- en: The simplest honeypot we will start with is a TCP honeypot. This will log any
    TCP connection received and any data received from the client.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开始的最简单的蜜罐是一个 TCP 蜜罐。它将记录收到的任何 TCP 连接和从客户端接收到的任何数据。
- en: It will respond with an authentication failure message. Since it logs any data
    received from the client, it will log any username and passwords they attempt
    to authenticate with. You can learn about their attack methods by inspecting what
    authentication methods they are attempting, since it acts like a black box and
    does not give any clues as to what authentication mechanism it might use. You
    can use the logs to see if they are treating it like an SMTP server, which may
    indicate a spammer, or maybe they are trying to authenticate with a database indicating
    they are looking for information. Studying the actions of an attacker can be very
    insightful and even enlighten to with the vulnerabilities you did not already
    know about. An attacker may use a service fingerprinting tool on the honeypot,
    and you might be able to identify patterns in their attack methods and find ways
    to block them. If an attacker tries to log in using real user credentials, that
    user is likely compromised.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 它会返回一个身份验证失败的消息。由于它会记录从客户端接收到的任何数据，因此会记录他们尝试使用的任何用户名和密码。通过检查他们尝试的身份验证方法，你可以了解他们的攻击方式，因为它就像一个黑箱，无法给出可能使用的身份验证机制的任何线索。你可以通过查看日志来判断他们是否将其当作
    SMTP 服务器使用，这可能意味着他们是垃圾邮件发送者，或者他们可能尝试用数据库进行身份验证，表明他们在寻找信息。研究攻击者的行为可以为你提供很多见解，甚至能揭示你未曾意识到的漏洞。攻击者可能会在蜜罐上使用服务指纹工具，你可能能够识别出他们攻击方法中的模式，并找到阻止他们的方式。如果攻击者尝试使用真实用户凭证登录，那么该用户很可能已经被攻破。
- en: 'This example will log high-level requests such as HTTP requests as well as
    low level connections such as a TCP port scanner. TCP connect scans will be logged,
    but TCP `SYN` only (stealth) scans will not be detected:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例将记录高层请求，如 HTTP 请求，以及低层连接，如 TCP 端口扫描器。TCP 连接扫描将被记录，但仅有 TCP `SYN`（隐匿）扫描不会被检测到：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The TCP testing tool
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TCP 测试工具
- en: In order to test our TCP honeypot, we need to send it some TCP traffic. We can
    use any existing network tool, including a web browser or a FTP client to hit
    the honeypot. A great tool for this is also Netcat, the TCP/IP Swiss army knife.
    Instead of using Netcat though, let's create our own simple clone. It will simply
    read and write data over TCP. The input and output will be through standard input
    and standard output respectively, allowing you to use the keyboard and Terminal
    or pipe data in or out of files and other applications.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试我们的 TCP 蜜罐，我们需要向它发送一些 TCP 流量。我们可以使用任何现有的网络工具，包括 Web 浏览器或 FTP 客户端来访问蜜罐。一个很好的工具是
    Netcat，它是 TCP/IP 的瑞士军刀。不过，我们不使用 Netcat，而是创建我们自己的简单克隆。它将简单地通过 TCP 读取和写入数据。输入和输出将通过标准输入和标准输出进行，允许你使用键盘和终端，或者将数据管道输入或输出到文件和其他应用程序。
- en: 'This tool can be used as a general purpose network testing tool, and if you
    have any intrusion detection system or other monitoring you want to test, it may
    be useful. This program will take data from standard input and send it over the
    TCP connection, then read any data the server sends back and print it to standard
    output. When running this example, you must pass the host and port as a single
    string with a colon separator, like this: `localhost:9001`. Here is the code for
    the simple TCP testing tool:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具可以作为一个通用的网络测试工具，如果你有任何入侵检测系统或其他需要测试的监控工具，它可能会很有用。这个程序将从标准输入中获取数据，并通过 TCP
    连接发送，然后读取服务器返回的任何数据并将其打印到标准输出。当运行这个示例时，必须将主机和端口作为一个包含冒号分隔符的字符串传递，像这样：`localhost:9001`。以下是这个简单
    TCP 测试工具的代码：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: HTTP POST form login honeypot
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP POST 表单蜜罐
- en: When you deploy this on the network, unless you are doing intentional testing,
    any form submission is a red flag. This means that someone is making an attempt
    to log in to your fake server. Since there is no legitimate purpose for it, only
    an attacker would have any reason to attempt to gain access. There will be no
    real authentication or authorization, just a facade to make the attacker think
    they are attempting to log in. The Go HTTP package does support HTTP 2 by default
    in Go 1.6+. Read more about the `net/http` package at [https://golang.org/pkg/net/http/](https://golang.org/pkg/net/http/).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将这个程序部署到网络上时，除非进行有意的测试，否则任何表单提交都是一个警示信号。这意味着有人正在尝试登录到你的假服务器。由于没有合法的目的，只有攻击者才会有理由尝试获取访问权限。这里不会进行实际的身份验证或授权，只是一个伪装，让攻击者认为他们正在尝试登录。Go
    的 HTTP 包在 Go 1.6 及以上版本中默认支持 HTTP 2。你可以在[https://golang.org/pkg/net/http/](https://golang.org/pkg/net/http/)
    阅读有关 `net/http` 包的更多信息。
- en: 'The following program will act as a web server with a login page, that just
    logs form submissions to standard output. You can run this server and then try
    to log in via the browser, and the log in attempt will be printed to Terminal,
    which runs the server:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序将充当一个具有登录页面的Web服务器，旨在将表单提交记录到标准输出。你可以运行此服务器，然后尝试通过浏览器登录，登录尝试将会打印到运行该服务器的终端中：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: HTTP form field honeypots
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP 表单字段蜜罐
- en: In the previous example, we talked about creating a fake login form to detect
    someone attempting to log in. What if we want to identify whether it is a bot
    or not? The ability to detect a bot trying to log in can also be useful on a production
    site to block bots. One method of identifying automated bots is to use honeypot
    form fields. Honeypot form fields are input fields on an HTML form, which are
    hidden from the user and expected to be blank when the form is submitted by a
    human. A bot will still find the honeypot fields in the form and try to fill them
    out.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，我们讨论了创建一个假的登录表单来检测有人尝试登录。如果我们想要识别它是否是一个机器人呢？检测一个机器人是否试图登录的能力在生产站点中也很有用，可以用来阻止机器人。一种识别自动化机器人的方法是使用蜜罐表单字段。蜜罐表单字段是一个
    HTML 表单中的输入字段，用户看不到它，并且在表单由人类提交时，应该是空的。机器人仍然会找到表单中的蜜罐字段并试图填写它们。
- en: The goal is to trick bots into thinking that the form fields are real while
    keeping it hidden from users. Some bots will use regular expressions to look for
    keywords such as `user` or `email` and fill out only those fields; so honeypot
    fields often use names such as `email_address` or `user_name` to appear like a
    normal field. If the server receives data in those fields, it can assume that
    the form was submitted by a bot.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是让机器人认为表单字段是真实的，同时将其隐藏于用户之外。一些机器人会使用正则表达式查找诸如 `user` 或 `email` 这样的关键词，并只填写那些字段；因此，蜜罐字段通常使用诸如
    `email_address` 或 `user_name` 的名称，看起来像一个正常的字段。如果服务器在这些字段中接收到数据，它可以认为表单是由机器人提交的。
- en: If we took the login form in the previous example and added a hidden form field
    named `email`, a bot might try to fill it out while a human would not see it.
    Form fields could be hidden using CSS or the `hidden` attribute on the `input`
    element. I recommend that you use CSS located in a separate style sheet to hide
    honeypot form fields, because a bot can easily determine if the form field had
    the `hidden` attribute, but would have a harder time detecting if the input was
    hidden using a style sheet.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在上一个示例中的登录表单中添加了一个名为`email`的隐藏表单字段，机器人可能会尝试填写它，而人类则看不到它。可以使用CSS或`input`元素上的`hidden`属性隐藏表单字段。我建议您使用单独的样式表中的CSS来隐藏蜜罐表单字段，因为机器人可以轻松确定表单字段是否具有`hidden`属性，但要检测输入是否使用样式表隐藏则更困难。
- en: Sandboxing
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 沙盒技术
- en: One related technique that is not demonstrated in this chapter, but is worth
    mentioning, is sandboxing. Sandboxing serves a different purpose from a honeypot,
    but they both make an effort to create an environment that looks legitimate, but
    is actually tightly controlled and monitored. An example of sandboxing is the
    creation of a virtual machine with no network connectivity, which logs all file
    changes and attempted network connections to see if anything suspicious happens.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 本章未展示的相关技术之一但值得一提的是沙盒技术。沙盒技术与蜜罐有不同的目的，但它们都致力于创建一个看起来合法但实际上是严格控制和监控的环境。一个沙盒的例子是创建一个没有网络连接的虚拟机，记录所有文件更改和尝试的网络连接，以查看是否发生了可疑事件。
- en: Sometimes, a sandbox environment can be detected by looking at the number of
    CPUs and the RAM. If the malicious application detects a system with a small amount
    of resources, say 1 CPU and 1 GB RAM, then it is likely not to be a modern desktop
    machine and may be a sandbox. Malicious software writers have learned to fingerprint
    sandbox environments and program the application to bypass any malicious actions
    if it suspects that it is being run within a sandbox.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，可以通过查看CPU数量和内存来检测沙盒环境。如果恶意应用程序检测到系统资源很少，比如1个CPU和1GB RAM，那么它很可能不是现代台式机，可能是沙盒。恶意软件作者已经学会了指纹识别沙盒环境，并编程使应用程序在怀疑在沙盒中运行时绕过任何恶意操作。
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: After reading this chapter, you should now understand the general concept of
    social engineering and be able to provide a few examples. You should understand
    how to interact with the REST APIs using JSON, generate QR codes and base64 encode
    data, and send emails using SMTP. You should also be able to explain the concept
    of a honeypot and understand how to implement your own honeypot or extend these
    examples for your own needs.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，你现在应该理解社会工程学的一般概念，并能提供一些示例。你应该理解如何使用JSON与REST API交互，生成QR码和Base64编码数据，以及使用SMTP发送电子邮件。你还应该能够解释蜜罐的概念，并理解如何为自己的需求实现或扩展这些示例。
- en: What other types of honeypots can you think of? What are the common services
    that get brute forced or attacked frequently? How can you customize or expand
    upon the social engineering examples? Can you think of any other services that
    you can query for information gathering?
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你能想到哪些其他类型的蜜罐？哪些常见服务经常受到暴力破解或频繁攻击？你如何自定义或扩展社会工程学的示例？你能想到任何其他可以用于信息收集的服务吗？
- en: In the next chapter, we'll cover post exploitation topics, such as deploying
    a bind shell, reverse bind shell, or web shells; cross compiling; finding writable
    files; and modifying file timestamps, permission, and ownership.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将涵盖后渗透主题，如部署绑定shell、反向绑定shell或web shell；交叉编译；查找可写文件；以及修改文件时间戳、权限和所有权。
