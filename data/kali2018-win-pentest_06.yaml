- en: NetBIOS Name Service and LLMNR - Obsolete but Still Deadly
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NetBIOS名称服务和LLMNR-过时但仍然致命
- en: In this chapter, you will learn how to use those legacy proprietary and broken
    protocols, still hanging around on almost every network, to your advantage and
    gain the access that you want. This is Bo's favorite attack vector, his favorite
    *low-hanging fruit*, and normally results in the *total pwnage* of the domain
    and every account associated with that domain. Over a year, most likely 80% of
    the epic-fail testing results come from this attack vector in some manner of exploit.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何利用那些遗留的专有和破损的协议，它们仍然挂在几乎每个网络上，以你的优势，并获得你想要的访问权限。这是博最喜欢的攻击向量，他最喜欢的*低悬果实*，通常会导致对域和与该域相关的每个帐户的*完全控制*。在一年的时间里，最有可能有80%的史诗级失败测试结果来自这种攻击向量的某种利用方式。
- en: 'Why is it that the first machines that I target are Windows systems? The answer
    is: NetBIOS, LLMNR, NTML, and the SMB protocols.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我首先攻击的机器是Windows系统？答案是：NetBIOS，LLMNR，NTML和SMB协议。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: NetBIOS name service and NTLM
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NetBIOS名称服务和NTLM
- en: Sniffing and capturing traffic
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嗅探和捕获流量
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along with this chapter, you will need the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟着本章学习，你需要以下内容：
- en: A running copy of Kali Linux
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行Kali Linux的副本
- en: Several Windows OSes (running these as VMs will work fine)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几个Windows操作系统（在虚拟机上运行这些系统也可以）
- en: NetBIOS name service and NTLM
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NetBIOS名称服务和NTLM
- en: Back in the early days of networking, just after the birth of the PC, people
    wanted the ability to share files from one system to another. In business applications,
    systems already had the ability to network themselves using proprietary networking
    protocols such as IPX (Internetwork Packet Exchange), Tolkien Ring, and coaxial
    bus networks. One big problem with all these proprietary protocols is that none
    of them could cross-communicate between themselves. This became known as vendor
    lock-in, and we still have some of this even today with proprietary systems and
    protocols. (Yes, I am pointing the finger at you, Microsoft.) Using these protocols
    meant paying a license fee for each system on the network-not just a cost for
    the OS, but an extra cost to network each system, then an extra fee on top of
    that for each workstation connecting to a server across that network. Then, yes,
    you could have two networks remote from each other and connect them using the
    existing phone lines of the day, but the system had to be running the same OS
    and networking protocols in order to communicate. A DEC network could not talk
    to a Netware network even in the same building, much less over the phone lines.
    This was also the problem faced by the government and military, with communications
    across the country and the coming age of data transmission and phone calls routed
    through many single points of failure, with no means to make this traffic self-route.
    Communication networks could be shut down by hitting a few strategic points. A
    self-routing network with a common communication language was needed, and so along
    came ARPANET and the TCP/IP protocol suite. I was lucky enough to work on this
    in the beginning, and I never thought it would grow to what we have today.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络的早期，就在个人电脑诞生之后，人们希望能够从一个系统共享文件到另一个系统。在商业应用中，系统已经可以使用专有的网络协议进行网络化，比如IPX（Internetwork
    Packet Exchange），托尔金环和同轴总线网络。所有这些专有协议的一个大问题是，它们都不能在它们之间进行交叉通信。这被称为供应商锁定，即使在今天，我们仍然有一些专有系统和协议。（是的，我在指责你，微软。）使用这些协议意味着为网络上的每个系统支付许可费-不仅是操作系统的成本，而且还需要额外的费用来网络化每个系统，然后在连接到网络的每个工作站上再额外收费。然后，是的，你可以让两个远离彼此的网络使用当时的电话线连接起来，但是系统必须运行相同的操作系统和网络协议才能进行通信。DEC网络甚至不能在同一建筑物内与Netware网络进行通信，更不用说通过电话线进行通信了。这也是政府和军方所面临的问题，跨国通信和数据传输时代的到来，电话呼叫通过许多单点故障路由，没有办法使这些流量自行路由。通信网络可以通过打击一些战略要点而被关闭。需要一个自路由网络和一个共同的通信语言，于是ARPANET和TCP/IP协议套件出现了。我很幸运能在开始时参与其中，我从来没有想过它会发展成今天的样子。
- en: During this time, Microsoft came up with their own protocols to network Windows
    systems, but again, these protocols are proprietary and could only run on Windows
    systems. The first of these was NetBUI. NetBUI was a non-routable protocol that
    needed very little configuration, and systems connected to the same local switch
    or hub could communicate and happily share files and data; however, if you wished
    to send a file across town, well, better get yourself a floppy. If you had a UNIX
    box on your local network, you would again need your floppy to transfer data from
    your Windows PC to the UNIX server. NetBUI was Windows-only! Sure, it was easy
    to use-you didn't need to be a network engineer to connect to the network, you
    just plugged in your cable and magically, by knowing the names of the other computers,
    you could connect to them share files, delete files, and even remotely control
    the system. Wow, that's cool! Except, in these days, Windows had no security-none.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段时间里，微软推出了他们自己的协议来网络Windows系统，但是，这些协议是专有的，只能在Windows系统上运行。其中第一个是NetBUI。NetBUI是一种不可路由的协议，几乎不需要配置，连接到同一个本地交换机或集线器的系统可以进行通信并愉快地共享文件和数据；然而，如果你想要在城镇之间发送文件，那么最好准备一个软盘。如果你在本地网络上有一个UNIX系统，你还需要软盘来将数据从你的Windows
    PC传输到UNIX服务器。NetBUI只能在Windows上运行！当然，它很容易使用-你不需要成为网络工程师来连接到网络，你只需要插上你的电缆，通过知道其他计算机的名称，你就可以连接到它们共享文件，删除文件，甚至远程控制系统。哇，太酷了！除了，在那些日子里，Windows没有安全性-没有。
- en: Remember, this was sold as a stand-alone PC, a system where security could be
    controlled by watching who was sitting in the chair at the computer. No logins,
    no user accounts, no ACLs, just open and unlimited access to every system on the
    local network. OK, so you're reading this book because you either work in internet
    security or have an interest in it, so here's a class question for you. *Do you
    see a problem with this network model?* If not, please get a refund on this book
    and buy a copy of Better Homes and Gardens-you will be better served. Unlike UNIX,
    which was designed from the ground up to be a networked OS, Windows was never
    designed for this from the very outset, and still suffers today from these bad
    beginnings.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，这是作为一个独立的个人电脑出售的，一个可以通过观察谁坐在电脑前的椅子上来控制安全性的系统。没有登录，没有用户帐户，没有ACL，只是对本地网络上每个系统的开放和无限制访问。好吧，你正在读这本书，因为你要么在互联网安全领域工作，要么对此感兴趣，所以这里有一个课堂问题给你。*你觉得这种网络模型有问题吗？*如果没有，请退还这本书并购买《Better
    Homes and Gardens》的一本副本-你会得到更好的服务。与UNIX不同，它是从头开始设计成一个网络化的操作系统，Windows从一开始就没有为此设计，今天仍然受到这些不良开端的影响。
- en: So how does this magic work? When you connected a system to the network, the
    system would send out ARP broadcasts saying, *Hey, my computer name is WS3 and
    I have these goodies stored here*. One system, normally the first one on the network,
    would be the Master Browser, which kept track of the machine names and the network
    resources. If this system went down, then all the systems on the network would
    have an election over ARP and decide who would be the next Master Browser. Now,
    this is all well and good if you have fewer than 20 machines on a network, but
    have more than 20 machines on the same network and you now have a communication
    problem which only grows with each extra machine added to the network.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这个魔术是如何运作的呢？当你连接一个系统到网络时，系统会发送ARP广播，说，“嘿，我的计算机名是WS3，我在这里存储了这些好东西。”一个系统，通常是网络上的第一个系统，会成为主浏览器，它会跟踪机器名和网络资源。如果这个系统崩溃了，那么网络上的所有系统都会通过ARP进行选举，决定谁将成为下一个主浏览器。现在，如果你的网络上有不到20台机器，那么这一切都很好，但是如果在同一个网络上有超过20台机器，那么你现在就会遇到一个通信问题，而且每增加一台额外的机器，这个问题都会变得更加严重。
- en: Remember Trumpet Winsock? Trumpet Winsock was third-party software you had to
    manually load on your Windows system and fight with the com ports in order to
    get it to work. This was the first TCP/IP network stack for Windows. Microsoft
    later bought out the Winsock guys, and their source code was the base and first
    version of the Windows TCP/IP interface built into Windows NT. (No, Microsoft
    did not invent TCP/IP).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得Trumpet Winsock吗？Trumpet Winsock是你必须手动加载到Windows系统上并与com端口进行斗争才能使其工作的第三方软件。这是Windows的第一个TCP/IP网络堆栈。微软后来收购了Winsock的开发人员，他们的源代码成为了Windows
    NT内置的第一个版本的Windows TCP/IP接口的基础。（不，微软并没有发明TCP/IP）。
- en: 'We all know what the problem is: using this method means you have access to
    everything on the network. No data is safe from prying eyes or a thief on any
    system on the network, and with this method, there is no way of tracing who is
    accessing this data. Also, you can remotely control this system without a login
    and without any credentials. Yes-you could run `del C:\Windows\*` and completely
    hose a machine. Additionally, systems at remote locations could not talk to the
    home office because NetBUI was non-routable. So, we all knew this wasn''t going
    to work. Microsoft finally came around and figured this out too, and thus along
    came NetBIOS-an improvement, but not a fix. This was also about the time that
    Microsoft stole David Cutler from IBM, who took his designs from IBM''s OS2 with
    him, and from that designed and built Windows NT. (Yes, NT''s Daddy is OS2.) NT
    was designed to be a networked OS with file-level security user accounts and ACLs.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都知道问题所在：使用这种方法意味着你可以访问网络上的所有内容。没有数据是安全的，任何系统上的窥视者或小偷都无法触及，而且使用这种方法，没有办法追踪谁在访问这些数据。此外，你可以在没有登录和任何凭据的情况下远程控制这个系统。是的-你可以运行`del
    C:\Windows\*`并完全破坏一台机器。此外，远程位置的系统无法与总部通信，因为NetBUI是不可路由的。所以，我们都知道这不会起作用。微软最终也意识到了这一点，于是NetBIOS出现了-这是一个改进，但不是一个修复。这也是微软从IBM那里偷走大卫·卡特勒的时候，他带着他从IBM的OS2中的设计，设计并构建了Windows
    NT的时候。（是的，NT的爸爸是OS2。）NT被设计成一个带有文件级安全用户帐户和ACL的网络化操作系统。
- en: A real network OS. It was also somewhat compliant with Portable Operating System
    Interface (POSIX), so it could, on a limited basis, communicate with UNIX-based
    machines. They had to land government contracts, and at the time it was a requirement
    for all government systems to be POSIX-compliant. Here, again, we get vendor lock-in-yes,
    NT had some limited APIs that were considered POSIX-compliant that looked good
    on paper, but they never worked in the real world. When attempting to get these
    to work, Microsoft's solution was *Buy more Microsoft products*. It also came
    with a TCP/IP stack for the network interface. Now, we might say, *Now we are
    ready for prime time*. Hmm-not quite. Microsoft, as always, had "ease of use"
    at the front of their minds-sure, simple and easy to use is a good thing, but
    this is not always true when it comes to security. Think about how easy it would
    be to enter your house if you didn't have to lock the door and keep a hold of
    the key. If you don't have a lock on your door, you will never lock yourself out.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一个真正的网络操作系统。它也在一定程度上符合可移植操作系统接口（POSIX），因此它可以在有限的范围内与基于UNIX的机器进行通信。他们必须获得政府合同，当时政府系统的要求是符合POSIX标准。在这里，我们再次遇到了供应商锁定-是的，NT有一些有限的API被认为是符合POSIX标准的，看起来很不错，但在现实世界中从来没有起作用。在尝试让这些API起作用时，微软的解决方案是*购买更多的微软产品*。它还带有一个用于网络接口的TCP/IP堆栈。现在，我们可能会说，“现在我们准备好了”。嗯-不完全是这样。微软一如既往地把“易用性”放在首位-当然，简单易用是一件好事，但在安全性方面并不总是如此。想想如果你不用锁门并保管好钥匙，那么进入你的房子会有多容易。如果你的门上没有锁，你永远不会把自己锁在外面。
- en: Microsoft and companies like it want all your business, not just some of it,
    and go to great lengths to break common protocols. Here we go again-vendor lock-in.
    Sure, we will make our systems easy to use and easy to connect to other systems
    that you have paid us for, but forget it when it comes to talking to that UNIX
    server. Oh, you want access to the file server? Then buy our server and then your
    PCs will be able to talk to the server. So, thanks to vendor lock-in, we are stuck
    with the NetBIOS and NTLM services.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 微软和类似公司希望获得你所有的业务，而不仅仅是其中的一部分，并且竭尽全力来破坏常见的协议。我们又回到了供应商锁定。当然，我们会使我们的系统易于使用并且易于连接到您为我们支付的其他系统，但是当涉及到与UNIX服务器通信时就不要想了。哦，你想访问文件服务器？那就购买我们的服务器，然后你的个人电脑就能够与服务器通信。因此，由于供应商锁定，我们被困在NetBIOS和NTLM服务中。
- en: 'The purpose of NTLM is to find systems and resources on the network. In an
    Active Directory Domain environment, Kerberos LDAP and DNS take care of logins
    and the location of shared network resources. DNS is a protocol of the TCP/IP
    suite for this use, and is the protocol we use every day on the internet to find
    what we are looking for. Windows does use DNS for system calls, but if a **fully
    qualified domain name** (**FQDN**) is not in use, then Windows defaults back to
    NTLM for a system lookup. Here is our attack vector: to make system lookups revert
    back to NTLM, so that information is now sent through ARP broadcasts, instead
    of direct calls to a DNS server using TCP or UDP to transmit the data.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: NTLM的目的是在网络上查找系统和资源。在活动目录域环境中，Kerberos LDAP和DNS负责登录和共享网络资源的位置。DNS是TCP/IP套件的协议，用于此用途，并且是我们每天在互联网上使用的协议，用于查找我们要找的东西。Windows确实使用DNS进行系统调用，但如果没有使用**完全合格的域名**（**FQDN**），那么Windows会默认回到NTLM进行系统查找。这就是我们的攻击向量：使系统查找恢复到NTLM，因此信息现在通过ARP广播发送，而不是通过使用TCP或UDP直接调用DNS服务器来传输数据。
- en: 'When a user goes to connect to a service using a computer name, Windows looks
    at the following to resolve the name to an IP address:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户尝试使用计算机名称连接到服务时，Windows会查看以下内容以将名称解析为IP地址：
- en: Local hosts file—`C:\Windows\System32\drivers\etc\hosts`
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地主机文件—`C:\Windows\System32\drivers\etc\hosts`
- en: DNS
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DNS
- en: NBNS
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NBNS
- en: You could ask, how does a name lookup get past DNS to do a lookup? Well, by
    design. Windows may use DNS for lookups in a domain, but the system still likes
    to use the shortened version of the machine name, or their NetBIOS name, so instead
    of using DNS, the machine will send an ARP broadcast over the network. This will
    also happen when using an IP address to access a website, instead of a domain
    name.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问，名字查找是如何绕过DNS进行查找的？嗯，这是设计上的。Windows可能在域中使用DNS进行查找，但系统仍然喜欢使用机器名称的缩写版本，或者它们的NetBIOS名称，因此机器将通过网络发送ARP广播。当使用IP地址访问网站时，也会发生这种情况，而不是使用域名。
- en: The domain controller, by default, will still accept this for login purposes.
    So instead of my machine logging in as, say, `//SRV1.companyname.net`, it logs
    in as `\\SRV1`. In these broadcast packets is my machine name, my IP address,
    my username, and my password, so that anyone passively listening on the network
    with a packet sniffer, such as Wireshark, can easily capture these credentials.
    A little ARP spoofing, and these credentials start popping all over the network,
    and then...
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 域控制器默认情况下仍会接受此登录。因此，我的机器登录为`\\SRV1`而不是`//SRV1.companyname.net`。在这些广播数据包中包含了我的机器名称、IP地址、用户名和密码，因此任何通过数据包嗅探器（如Wireshark）
    passively监听网络的人都可以轻松捕获这些凭据。稍微进行ARP欺骗，这些凭据就会在整个网络中不断出现，然后...
- en: 'NTLM is still used in the following situations:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: NTLM仍然在以下情况下使用：
- en: The client is authenticating to a server using an IP address
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端正在使用IP地址对服务器进行身份验证
- en: The client is authenticating to a server that belongs to a different Active
    Directory forest that has a legacy NTLM trust, instead of a transitive inter-forest
    trust
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端正在对属于具有传统NTLM信任而不是传递性跨森林信任的不同活动目录森林的服务器进行身份验证
- en: The client is authenticating to a server that doesn't belong to a domain
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端正在对不属于域的服务器进行身份验证
- en: No Active Directory domain exists (this is commonly referred to as workgroup
    or peer-to-peer)
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不存在活动目录域（通常称为工作组或点对点）
- en: Where a firewall would otherwise restrict the ports required by Kerberos (typically
    TCP 88)
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防火墙本来会限制Kerberos所需的端口（通常是TCP 88）
- en: Basically, NTLM is like screaming your username and password in a crowded bar,
    whereas AD/DNS is more like a quiet conversation between two people.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，NTLM就像在拥挤的酒吧中大声喊出你的用户名和密码，而AD/DNS更像是两个人之间的悄悄交谈。
- en: Sniffing and capturing traffic
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嗅探和捕获流量
- en: In this section, we will see the practical use of what we learned in [Chapter
    4](20fa14ea-ee8e-413e-80b6-bba429512e6c.xhtml), *Sniffing and Spoofing*, on sniffing
    and capturing tools. When we ran these tools in [Chapter 4](https://cdp.packtpub.com/kali_linux_2018_x__windows_penetration_testing_/wp-admin/post.php?post=332&action=edit#post_162), *Sniffing
    and Spoofing*, we captured both NTLM and clear-text passwords. We also found the
    location of prime targets. Here, we are going to use the golden keys gathered
    from the fruits of our labor. Normally, the first time you capture a hash and
    you look at it, you think, *What can I do with that? It's encrypted*. After all,
    weren't you told that, if it is encrypted, then it's protected? The truth is,
    over half the time when I breach a Windows system, I don't know the actual password.
    Why spend time cracking a password when you can just *Pass the Hash*?
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到我们在[第4章](20fa14ea-ee8e-413e-80b6-bba429512e6c.xhtml)中学到的内容的实际用途，即*嗅探和欺骗*，关于嗅探和捕获工具。当我们在[第4章](https://cdp.packtpub.com/kali_linux_2018_x__windows_penetration_testing_/wp-admin/post.php?post=332&action=edit#post_162)中运行这些工具时，我们捕获了NTLM和明文密码。我们还找到了主要目标的位置。在这里，我们将使用从我们劳动成果中获得的黄金密钥。通常，第一次捕获哈希并查看它时，你会想，*我能用它做什么？它是加密的*。毕竟，你不是被告知，如果它被加密了，那么它就受到了保护吗？事实是，当我侵入Windows系统时，有一半以上的时间我并不知道实际密码。为什么要花时间破解密码，当你可以直接*传递哈希*呢？
- en: Using Ettercap data
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ettercap数据
- en: 'The following screenshot is a copy of the captured data from our poisoning
    attack in [Chapter 4](https://cdp.packtpub.com/kali_linux_2018_x__windows_penetration_testing_/wp-admin/post.php?post=332&action=edit#post_162), *Sniffing
    and Spoofing*, using Ettercap:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的屏幕截图是我们在[第4章](https://cdp.packtpub.com/kali_linux_2018_x__windows_penetration_testing_/wp-admin/post.php?post=332&action=edit#post_162)中的中毒攻击的捕获数据的副本，*嗅探和欺骗*，使用Ettercap：
- en: '![](img/c146a3b2-3665-4866-8691-0853fc85aa59.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c146a3b2-3665-4866-8691-0853fc85aa59.png)'
- en: NetBIOS scanning using NBTscan
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NBTscan进行NetBIOS扫描
- en: 'When working in a Windows Domain environment, your best results come from knowing
    the domain name you are attacking. You can sometimes gather some credentials using
    the default `WORKSTATION` group, but this handy little tool quickly finds the
    domain information you''re looking for. The following is the help file for NBTscan:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows域环境中工作时，您最好知道您正在攻击的域名。有时，您可以使用默认的`WORKSTATION`组收集一些凭据，但是这个方便的小工具可以快速找到您要查找的域信息。以下是NBTscan的帮助文件：
- en: 'To get the help file from the command line, type the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要从命令行获取帮助文件，请输入以下内容：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you run Ettercap first, the target list will give you some addresses to
    scan to find out the domain information quickly, or you can use this tool to scan
    the whole local subnet by using a CIDR network listing. For this network, it would
    be `172.16.42.0/24`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您首先运行Ettercap，则目标列表将为您提供一些地址，以便快速查找域信息，或者您可以使用此工具通过使用CIDR网络列表扫描整个本地子网。对于此网络，将是`172.16.42.0/24`：
- en: '![](img/e7978b14-0cd6-4226-aa62-8aa5bf952ab4.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e7978b14-0cd6-4226-aa62-8aa5bf952ab4.png)'
- en: Now that we have the domain name (`LAB1`) or the Workgroup name, we can move
    to using Responder next.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '现在我们有了域名（`LAB1`）或工作组名，我们可以继续使用Responder。 '
- en: Responder - so many hashes, so little time
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Responder-哈希如此之多，时间如此之少
- en: '**Responder.py** is a Python tool that attacks just about all vectors of NTLM
    and the SMB protocol. In the following screenshot, we have the Responder Help
    file. We will go over some of the options and their uses.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**Responder.py**是一个攻击几乎所有NTLM和SMB协议向量的Python工具。在下面的屏幕截图中，我们有Responder帮助文件。我们将介绍一些选项及其用途。'
- en: 'To access the Responder Help file on Kali Linux from the command line, type
    the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要从命令行访问Kali Linux上的Responder帮助文件，请输入以下内容：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](img/4d9b9336-865f-4e05-b08b-6c9ef432ace4.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4d9b9336-865f-4e05-b08b-6c9ef432ace4.png)'
- en: The main flag you will have to use is the `-I` or `-interface= flag`, as you
    have to tell Responder which interface to use. All other flags are optional, but
    these flags give a lot of control to your attack.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您将不得不使用的主要标志是`-I`或`-interface=`标志，因为您必须告诉Responder使用哪个接口。所有其他标志都是可选的，但这些标志可以对您的攻击进行很好的控制。
- en: Responder comes with its own password and hash gathering tools, but we can also
    use Metasploit to capture our loot, so we can then use these credentials in further
    attacks using Metasploit modules. We will cover both ways to gather captured credentials.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Responder带有自己的密码和哈希收集工具，但我们也可以使用Metasploit来捕获我们的战利品，以便我们可以使用这些凭据在使用Metasploit模块进行进一步攻击。我们将介绍收集捕获凭据的两种方法。
- en: 'First, we will set up Responder to do its own thing and gather its own hashes.
    First is the `-I` flag-set this to the active interface. Here, it will be `wlan0`.
    This is the most important flag. Responder will run the default configuration
    without any other flags set, but the interface must be set in order to run. In
    the following command, I have also set `-w` to start the `wpad` server; the `-F`
    flag to force basic authentication on the `wpad` server, which will capture and
    `wpad` logins in clear text; the `-lm` flag in an attempt to downgrade the NTLM
    authentication to NTLMv1; the `-b` flag to downgrade NTLM HTTP connections to
    basic or clear text; the `-r` flag to redirect the `wpad` connection; and the
    `-d LAB1` flag to set the domain to attack. Then hit *Enter* to run. You then
    get a screen print of the running services and the attack will start. The full
    command is as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将设置Responder执行其自己的操作并收集其自己的哈希。首先是`-I`标志-将其设置为活动接口。在这里，它将是`wlan0`。这是最重要的标志。Responder将在没有设置任何其他标志的情况下运行默认配置，但必须设置接口才能运行。在下面的命令中，我还设置了`-w`以启动`wpad`服务器；`-F`标志以强制在`wpad`服务器上进行基本身份验证，这将以明文捕获和`wpad`登录；尝试将NTLM身份验证降级为NTLMv1的`-lm`标志；将NTLM
    HTTP连接降级为基本或明文的`-b`标志；将`wpad`连接重定向的`-r`标志；以及将域设置为攻击的`-d LAB1`标志。然后按*Enter*运行。然后，您将获得正在运行的服务的屏幕打印，并且攻击将开始。完整的命令如下：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Once the attack starts, Responder poisons the SMB ARP broadcasts on the network.
    The best time to run this attack is when there is a lot of user traffic on the
    network. If this attack is run during off-hours, and there is no user traffic,
    then only system accounts will be captured. There has to be user traffic in order
    to capture user credentials.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击开始后，Responder会在网络上中毒SMB ARP广播。运行此攻击的最佳时间是在网络上有大量用户流量时。如果在非工作时间运行此攻击，并且没有用户流量，则只会捕获系统帐户。必须有用户流量才能捕获用户凭据。
- en: 'In the following screenshot, we see the start of the poisoning attack and the
    capture of the Administrator account''s credentials:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，我们看到了中毒攻击的开始以及对管理员帐户凭据的捕获：
- en: '![](img/20faa5aa-a719-4e5c-b7d4-a7c76ef8aa90.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/20faa5aa-a719-4e5c-b7d4-a7c76ef8aa90.png)'
- en: In the preceding screenshot, we can see that we have captured the Administrator
    login from the `\\WIN10-01` workstation. This was captured when the user logged
    on to the domain from the workstation. Notice this is a NTLMv2 hash, which is
    a salted NTLMv1 hash. A salted hash is basically a re-hashed hash. During the
    challenge and response part of the SMB login, a 16-bit random hash value is exchanged.
    The NTLMv1 56-bit hash is then hashed with this random value. This new hash, which
    is then transmitted to the server, is the NTLMv2 hash value. Since the salt is
    a random value, the captured v2 hash is non-replayable, but the good news is that
    programs, such as good old John the Ripper or Hashcat, can crack these hashes
    offline. They just can't be used in a *Pass the Hash* style attack.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们可以看到我们已经从`\\WIN10-01`工作站捕获了管理员登录。这是在用户从工作站登录到域时捕获的。请注意，这是一个NTLMv2哈希，这是一个带盐的NTLMv1哈希。带盐的哈希基本上是重新哈希的哈希。在SMB登录的挑战和响应部分期间，交换了一个16位的随机哈希值。然后，NTLMv1
    56位哈希值与此随机值进行了哈希。然后将这个新的哈希传输到服务器，这就是NTLMv2哈希值。由于盐是一个随机值，捕获的v2哈希是不可重放的，但好消息是，诸如老实的John
    the Ripper或Hashcat之类的程序可以离线破解这些哈希。它们只是不能用于*传递哈希*风格的攻击。
- en: 'In the following screenshot, we have the login for `LAB1\rred`. Again, this
    is from the user logging into the domain, and the non-replayable NTLMv2 hash is
    captured again. After both captures, you will notice, a few lines down, that Responder
    again captures the login, but doesn''t repeat it onscreen. It is still logged
    to the log file as a separate hash. In the log file, you can see when the challenge
    and response hash changes from the non-replayable changes in the file. The actual
    password has not changed, but the challenge and response hashes have changed between
    responses:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，我们有`LAB1\rred`的登录。同样，这是用户登录到域的情况，再次捕获了不可重放的NTLMv2哈希。在两次捕获之后，您会注意到，几行下面，Responder再次捕获了登录，但没有在屏幕上重复显示。它仍然作为单独的哈希记录在日志文件中。在日志文件中，您可以看到挑战和响应哈希从文件中的不可重放的更改。实际密码没有改变，但在响应之间，挑战和响应哈希已经改变：
- en: '![](img/391ca14a-d7b4-4866-8c25-f7b517faf2af.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/391ca14a-d7b4-4866-8c25-f7b517faf2af.png)'
- en: 'In the following screenshot, we can see poisoned answers sent to the various
    machines on the network. Next, we can see the HTTP capture. This capture comes
    from setting the -b flag to downgrade HTTP logins to clear text, instead of using
    NTLM hashes for the password. As we can see, we have a set of user credentials
    in clear text. Jackpot! Take a look at the following screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，我们可以看到发送到网络上各台机器的有毒答案。接下来，我们可以看到HTTP捕获。这个捕获来自将-b标志设置为将HTTP登录降级为明文，而不是使用NTLM哈希作为密码。正如我们所看到的，我们有一组明文用户凭据。中奖！看一下下面的截图：
- en: '![](img/4166f23d-3109-438f-bb1c-63ddec607bf7.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4166f23d-3109-438f-bb1c-63ddec607bf7.png)'
- en: 'After our little attack, let''s look at the logs. All screen output from the
    attack is stored in separate files in Responder''s logs directory. By default,
    this is found at `/usr/share/responder/logs`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的小攻击之后，让我们看看日志。攻击的所有屏幕输出都存储在Responder的日志目录中的单独文件中。默认情况下，这可以在`/usr/share/responder/logs`找到：
- en: '![](img/102a3a61-5839-41e1-b551-7a8d8a69e681.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/102a3a61-5839-41e1-b551-7a8d8a69e681.png)'
- en: In the preceding screenshot, we see the various logs that were outputted during
    the attack. Responder does a very nice job of breaking this data down into usable
    bits.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们看到了攻击期间输出的各种日志。Responder非常好地将这些数据分解为可用的部分。
- en: The `Analyzer-Session.log` on this run is blank. When you run the `-A` flag,
    the raw output of the NBT-NS responses is saved to this file.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在此运行中，`Analyzer-Session.log`是空白的。当您运行`-A`标志时，NBT-NS响应的原始输出将保存到此文件中。
- en: The `Config-Responder.log` file is an output of the configuration and the variables
    used during the attack when running Responder.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`Config-Responder.log`文件是在运行Responder时攻击期间使用的配置和变量的输出。'
- en: The `Poisoners-Session.log` is the session output of the poisoned sessions.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`Poisoners-Session.log`是有毒会话的会话输出。'
- en: 'The `HTTP-Basic-ClearText-<IPAddress>.txt` file is the output of the captured
    credentials captured from `<IPAddress>`. Each system''s captured credentials are
    kept in separate files. We can see two files from our attack listed in the following
    screenshot:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`HTTP-Basic-ClearText-<IPAddress>.txt`文件是从`<IPAddress>`捕获的凭据的输出。每个系统的捕获凭据都保存在单独的文件中。我们可以在下面的截图中看到我们攻击中列出的两个文件：'
- en: '![](img/554f39fa-e1ee-4165-b47e-0408300df5c8.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/554f39fa-e1ee-4165-b47e-0408300df5c8.png)'
- en: 'The `SMB-NTLMv2-<IPAddress>.txt` files are the captured non-replayable hashes
    and user accounts. This file is formatted in what is called *John* format. What
    this means is that John the Ripper will readily read the file without any extra
    formatting. Hashcat and most other password crackers will also read these files
    without a problem. While running the attack, the output shows the repeated capture
    but not the captured hashes. In the following screenshot, we see all the captured
    hashes. Notice the hash values are not the same in each capture, but the password
    hasn''t changed. This is the salt in action:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`SMB-NTLMv2-<IPAddress>.txt`文件是捕获的不可重放的哈希和用户帐户。该文件格式为所谓的*John*格式。这意味着John the
    Ripper可以直接读取文件而无需任何额外格式。Hashcat和大多数其他密码破解程序也可以读取这些文件而无需问题。在运行攻击时，输出显示了重复的捕获，但没有显示捕获的哈希。在下面的截图中，我们可以看到所有捕获的哈希。请注意，每次捕获时哈希值都不相同，但密码没有改变。这就是盐在起作用：'
- en: '![](img/27254163-6e2e-4d61-8c76-cef9b7e8fbce.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/27254163-6e2e-4d61-8c76-cef9b7e8fbce.png)'
- en: Delete all but one entry in the file before running it through your password
    cracker of choice. This will shorten your runtime, as the cracker will not have
    to run through all the different salts.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在通过您选择的密码破解程序运行之前，删除文件中除一个条目之外的所有内容。这将缩短运行时间，因为破解程序不必运行所有不同的盐。
- en: Using Responder with Metasploit
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Responder与Metasploit
- en: Now we are going to use Responder and send the captures to running Metasploit
    modules. This way, the credentials will be saved to the Metasploit database and
    the captured credentials can be used when running exploits from Metasploit. Basically,
    what we are going to do is disable the capture servers that come with the Responder
    toolkit, and run the same servers using Metasploit's capture servers.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用Responder并将捕获发送到正在运行的Metasploit模块。这样，凭据将保存到Metasploit数据库，并且在运行Metasploit的攻击时可以使用捕获的凭据。基本上，我们要做的是禁用Responder工具包中提供的捕获服务器，并使用Metasploit的捕获服务器运行相同的服务器。
- en: 'To disable the Responder''s servers, we''ll edit the Responder configuration
    file. The file is found at `/etc/responder/Responder.conf`. Open the file in your
    favorite text editor. At the top of the file, you see the list of servers with
    the configuration set to `On`-change these settings to `Off` and save the file:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要禁用Responder的服务器，我们将编辑Responder配置文件。文件位于`/etc/responder/Responder.conf`。在您喜欢的文本编辑器中打开文件。在文件顶部，您会看到服务器列表，配置设置为`On`-将这些设置更改为`Off`并保存文件：
- en: '![](img/e9c2d461-d8e7-44b1-9332-083cd9b38544.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e9c2d461-d8e7-44b1-9332-083cd9b38544.png)'
- en: 'The following screenshot shows the file after the changes has been made:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 更改后的文件如下截图所示：
- en: '![](img/a19bb35a-eb23-40d2-aa81-782815ab0ebb.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a19bb35a-eb23-40d2-aa81-782815ab0ebb.png)'
- en: 'Next, we need to fire up Metasploit and start the capture servers. To start
    Metasploit, run the following commands:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要启动Metasploit并启动捕获服务器。要启动Metasploit，请运行以下命令：
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s fire up the servers. The startup order doesn''t matter here, but these
    servers are the big three you''ll need for this attack. After changing into your
    workspace, run the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们启动服务器。启动顺序在这里并不重要，但是这些服务器是您进行此攻击所需的三个重要组成部分。在切换到您的工作区后，运行以下命令：
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](img/131e8c77-7a26-4bb8-ac7b-f34138f0cb80.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/131e8c77-7a26-4bb8-ac7b-f34138f0cb80.png)'
- en: 'I find it best to set the `SRVHOST` setting. Keeping it at `0.0.0.0` will set
    the server to listen on all interfaces at the listed ports. Hard-setting the `SRVHOST`
    will cut down on any network/interface confusion. Especially if you are running
    several active interfaces, exploits can get confused about which way to go, or
    services such as `wpad` will actively listen on the wrong interface. Best to hard-set
    just to be sure. For this attack, the local IP address is `172.16.42.139`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现最好设置`SRVHOST`设置。将其保持为`0.0.0.0`将使服务器在列出的端口上监听所有接口。硬设置`SRVHOST`将减少任何网络/接口混乱。特别是如果您运行多个活动接口，攻击可能会困惑于应该选择哪种方式，或者诸如`wpad`之类的服务将主动监听错误的接口。最好进行硬设置以确保。对于此攻击，本地IP地址为`172.16.42.139`：
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To fire it off run the following command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动它，请运行以下命令：
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next let''s fire up the SMB capture server with these commands:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们使用以下命令启动SMB捕获服务器：
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](img/241649d8-ec9c-4c71-b42e-f531bbccf93c.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/241649d8-ec9c-4c71-b42e-f531bbccf93c.png)'
- en: 'Again, set the `SRVHOST`. You can use the arrow up key to go back to the properties
    with which you set it last time:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 再次设置`SRVHOST`。您可以使用向上箭头键返回到上次设置的属性：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'There are two methods to capture HTTP traffic. One is the `auxiliary/server/capture/http_ntlm`
    module. This module will capture the credentials in their NTLM hashes. These hashes
    will be replayable, since our attacking server sent the the challenge. The challenge
    salt value was defined previously-we see it set to `1122334455667788`. The captured
    hashes from this attack can be used in *Pass the Hash*-style attacks. To set and
    run this module, run the following commands:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以捕获HTTP流量。一种是`auxiliary/server/capture/http_ntlm`模块。此模块将以其NTLM哈希值捕获凭据。这些哈希值将是可重放的，因为我们的攻击服务器发送了挑战。之前定义了挑战盐值-我们看到它设置为`1122334455667788`。此攻击中捕获的哈希值可以在*
    Pass the Hash * -style攻击中使用。要设置和运行此模块，请运行以下命令：
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](img/ffe2c9ce-d224-4fb3-b7eb-c71b814914c4.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ffe2c9ce-d224-4fb3-b7eb-c71b814914c4.png)'
- en: 'Again, set the `SRVHOST`. You can use the arrow up key to go back to the way
    that you set it last time:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 再次设置`SRVHOST`。您可以使用向上箭头键返回到上次设置的方式：
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Since the `wpad` server is running on port `80`, we will need to move this
    service to a different HTTP port, so we will set it to run on port `443` and set
    SSL to true, as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`wpad`服务器正在端口`80`上运行，我们需要将此服务移动到不同的HTTP端口，因此我们将设置它在端口`443`上运行，并将SSL设置为true，如下所示：
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The second method will cause the NTLM login to downgrade to clear text, just
    like the HTTP server that comes with Responder. Using this capture method, the
    credentials will be ready to use. You can only use one of these modules at a time.
    Attempting to run both will cause the second one to crash, and will sometimes
    cause the first HTTP server to start to hang.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法将导致NTLM登录降级为明文，就像Responder附带的HTTP服务器一样。使用此捕获方法，凭据将准备好使用。您一次只能使用其中一个模块。尝试同时运行两者将导致第二个崩溃，并有时会导致第一个HTTP服务器开始挂起。
- en: 'To set up and start the HTTP basic capture server, run the following commands:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置并启动HTTP基本捕获服务器，请运行以下命令：
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](img/1a856477-c062-40d6-a332-52cb5989e931.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a856477-c062-40d6-a332-52cb5989e931.png)'
- en: Again, set the `SRVHOST`. You can use the arrow up key to go back to the settings
    you specified last time.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 再次设置`SRVHOST`。您可以使用向上箭头键返回到上次指定的设置。
- en: 'As stated before, since the `wpad` server is running on port `80`, we will
    need to move this service to a different HTTP port, so we will set it to run on
    port `443` and set SSL to true:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，由于`wpad`服务器正在端口`80`上运行，我们需要将此服务移动到不同的HTTP端口，因此我们将设置它在端口`443`上运行，并将SSL设置为true：
- en: '[PRE13]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](img/384cfceb-ec5d-4a33-9d8d-3b260aa6e99c.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/384cfceb-ec5d-4a33-9d8d-3b260aa6e99c.png)'
- en: 'We also can run a spoofer to help with the capture. This is the `auxiliary/spoof/nbns/nbns_response`
    module. The help file has the best description of this, so I''ve provided it here:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以运行欺骗程序来帮助捕获。这是`auxiliary/spoof/nbns/nbns_response`模块。帮助文件中有关于此的最佳描述，因此我在这里提供了它：
- en: 'Description:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 描述：
- en: This module forges **NetBIOS Name Service** (**NBNS**) responses. It will listen
    for NBNS requests sent to the local subnet's broadcast address and spoof a response,
    redirecting the querying machine to an IP of the attacker's choosing. Combined
    with `auxiliary/server/capture/smb` or `auxiliary/server/capture/http_ntlm` it
    is a highly effective means of collecting crackable hashes on common networks.
    This module must be run as root and will bind to UDP/137 on all interfaces.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模块伪造**NetBIOS名称服务**（**NBNS**）响应。它将监听发送到本地子网广播地址的NBNS请求，并伪造响应，将查询机器重定向到攻击者选择的IP。与`auxiliary/server/capture/smb`或`auxiliary/server/capture/http_ntlm`结合使用，这是一种高效收集常见网络上可破解哈希的方法。此模块必须以root身份运行，并将绑定到所有接口上的UDP/137端口。
- en: 'References:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 参考：
- en: '[http://www.packetstan.com/2011/03/nbns-spoofing-on-your-way-to-world.html](http://www.packetstan.com/2011/03/nbns-spoofing-on-your-way-to-world.html)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.packetstan.com/2011/03/nbns-spoofing-on-your-way-to-world.html](http://www.packetstan.com/2011/03/nbns-spoofing-on-your-way-to-world.html)'
- en: 'For our attack, we are going to spoof the domain controller. The domain controller''s
    IP address is `172.16.42.5` for this attack. So, let''s set up our spoofer and
    run it as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的攻击，我们将欺骗域控制器。域控制器的IP地址是`172.16.42.5`。因此，让我们设置我们的欺骗者并运行如下：
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We can see right at the start that the module is spoofing the `wpad` request
    from `172.16.42.105`, and this is without Responder running yet.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在一开始就看到模块正在欺骗来自`172.16.42.105`的`wpad`请求，而此时Responder尚未运行。
- en: '![](img/d9ed2693-7a23-4aae-9361-5d75e045a459.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9ed2693-7a23-4aae-9361-5d75e045a459.png)'
- en: Now we are ready to start Responder again. Start a new Terminal window on Kali
    and start Responder with the same flags as last time. The only difference in this
    run is that the poisoning attack will run, but the Responder servers will be disabled
    and Metasploit will catch the traffic this time around.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备再次启动Responder。在Kali上启动一个新的终端窗口，并使用与上次相同的标志启动Responder。这次运行的唯一区别是，中毒攻击将运行，但Responder服务器将被禁用，Metasploit将捕获这次的流量。
- en: 'In the following screenshot, we see Metasploit spoofing and capturing the traffic
    from `172.16.42.105`. We can see the module responding to the address of the domain
    controller at `172.16.42.5`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，我们看到Metasploit在`172.16.42.105`上欺骗和捕获流量。我们可以看到模块响应到域控制器的地址`172.16.42.5`：
- en: '![](img/ed6ed5f1-24e8-4435-bbd7-5501ff618901.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed6ed5f1-24e8-4435-bbd7-5501ff618901.png)'
- en: 'In the following screenshot, we see the captured SMB traffic coming in, and
    we can tell these are NTLMv2 hashes by looking at the length of the challenge.
    If you run the `creds` command, the output will show these are non-replayable:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，我们看到捕获的SMB流量进来，通过查看挑战的长度，我们可以知道这些是NTLMv2哈希。如果运行`creds`命令，输出将显示这些是不可重放的：
- en: '![](img/cbcf8cc6-a67e-4c6f-8ebc-6c151f4ed42d.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbcf8cc6-a67e-4c6f-8ebc-6c151f4ed42d.png)'
- en: 'By running the `creds` command, we can see the captured credentials, as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行`creds`命令，我们可以看到捕获的凭据，如下所示：
- en: '![](img/70fc75f0-5531-4025-a1ca-16fd3b1d5594.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/70fc75f0-5531-4025-a1ca-16fd3b1d5594.png)'
- en: OK, so these are non-replayable hashes, but we have a part of the puzzle that
    we don't get in normal captured traffic, such as what we captured with the Responder
    services. This time, we have the challenge salt. When we set up the SMB capture
    module, the challenge salt is set to `1122334455667788`. So, if we run this non-replayable
    hash through John the Ripper, along with the captured salted hash, we are basically
    now only cracking the NTLM hash and are not burning up CPU time calculating the
    salt. In the previous screenshot, the output is in John format, and we can this
    the challenge salt in the first section of the hash. This basically breaks the
    security of the salted hash
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这些是不可重放的哈希，但我们有一个普通捕获流量中没有的部分谜题，比如我们使用Responder服务捕获的内容。这次，我们有挑战盐。当我们设置SMB捕获模块时，挑战盐设置为`1122334455667788`。因此，如果我们通过John
    the Ripper运行这个不可重放的哈希，以及捕获的有盐哈希，我们基本上只是破解NTLM哈希，而不是浪费CPU时间计算盐。在上一张截图中，输出是以John格式显示的，我们可以在哈希的第一部分中看到挑战盐。这基本上破坏了有盐哈希的安全性。
- en: NetBIOS response BadTunnel brute force spoofing
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NetBIOS响应BadTunnel暴力欺骗
- en: This is also an NBNS name spoofer but, unlike the one previously discussed,
    this one will traverse firewall connections that use NAT. Most NetBIOS spoofers
    only work on the local network. Used along with other tools, this is a great spoofer.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是一个NBNS名称欺骗者，但与之前讨论的不同，这个可以穿越使用NAT的防火墙连接。大多数NetBIOS欺骗者只在本地网络上工作。与其他工具一起使用，这是一个很好的欺骗者。
- en: 'The best description of how this spoofer works comes from the info file, as
    follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个欺骗者如何工作的最好描述来自信息文件，如下所示：
- en: '[PRE15]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Description:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 描述：
- en: This module listens for a NetBIOS name request and then continuously spams NetBIOS
    responses to a target for the given hostname, causing the target to cache a malicious
    address for this name. On high-speed networks, the PPSRATE value should be increased
    to speed up this attack. As an example, a value of around 30,000 is almost 100%
    successful when spoofing a response for a WPAD lookup. Distant targets may require
    more time and lower rates for a successful attack. This module works when the
    target is behind a NAT gateway, since the stream of NetBIOS responses will keep
    the NAT mapping alive after the initial setup. To trigger the initial NetBIOS
    request to the Metasploit system, force the target to access a UNC link pointing
    to the same address (HTML, Office attachment, and so on). This NAT-piercing issue
    was named the BadTunnel vulnerability by the discoverer, Yu Yang (`@tombkeeper`).
    Microsoft patches (MS16-063/MS16-077) impact the way that the proxy host (WPAD)
    host is identified, but do not change the predictability of NetBIOS requests.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块监听NetBIOS名称请求，然后不断向目标发送NetBIOS响应，以获取给定主机名的恶意地址。在高速网络上，PPSRATE值应增加以加快攻击速度。例如，当欺骗WPAD查找时，约30,000的值几乎100%成功。远程目标可能需要更多时间和更低的速率才能成功攻击。该模块在目标位于NAT网关后时起作用，因为NetBIOS响应流将在初始设置后保持NAT映射活动。要触发对Metasploit系统的初始NetBIOS请求，强制目标访问指向相同地址的UNC链接（HTML、Office附件等）。这个NAT穿透问题被发现者命名为BadTunnel漏洞，发现者是Yu
    Yang（`@tombkeeper`）。微软补丁（MS16-063/MS16-077）影响了代理主机（WPAD）主机的识别方式，但并没有改变NetBIOS请求的可预测性。
- en: 'To set up this module, we will need to set the following parameters:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置这个模块，我们需要设置以下参数：
- en: '[PRE16]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Once we get EvilGrade set up and running, we''ll run the following command:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们设置并运行了EvilGrade，我们将运行以下命令：
- en: '[PRE17]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now that we have our NBNS spoofer set up, let's set up EvilGrade and get it
    running.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了NBNS欺骗器，让我们设置好EvilGrade并让它运行起来。
- en: EvilGrade
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EvilGrade
- en: EvilGrade is a modular framework that allows the user to exploit upgrade implementations
    by injecting fake updates, not only for Windows OSes but also for other popular
    Windows applications. The list is long. The framework comes with pre-made binaries
    (agents), but custom binaries can also be pushed to the victim machine. The framework
    comes with its own web server and DNS server modules.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: EvilGrade是一个模块化框架，允许用户通过注入假更新来利用升级实现，不仅适用于Windows操作系统，还适用于其他流行的Windows应用程序。列表很长。该框架配备了预制的二进制文件（代理），但也可以将自定义二进制文件推送到受害者机器上。该框架配备了自己的Web服务器和DNS服务器模块。
- en: In the attack, we are going to exploit the Windows `wpad` service and push out
    a bad Windows update. Instead of using the pre-built binary, we will build our
    own payload so we can upload a Metasploit Meterpreter shell to the victim machine.
    This way we can use Metasploit tools for further compromising.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这次攻击中，我们将利用Windows的`wpad`服务并推送一个恶意的Windows更新。我们将构建自己的有效负载，而不是使用预先构建的二进制文件，这样我们就可以上传Metasploit
    Meterpreter shell到受害者机器。这样我们就可以使用Metasploit工具进行进一步的妥协。
- en: 'EvilGrade doesn''t come with the default install of Kali, so we will need to
    install it from the repository. So, leaving our BadTunnel window open, now open
    a new Terminal window and run the following commands:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: EvilGrade不是Kali的默认安装程序，因此我们需要从存储库安装它。因此，在保持BadTunnel窗口打开的同时，现在打开一个新的终端窗口并运行以下命令：
- en: '[PRE18]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'After the install, we are ready to go. Open a new Terminal window and from
    the command line type the following:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们准备好了。打开一个新的终端窗口，从命令行输入以下内容：
- en: '[PRE19]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You''ll see the following output. You will see a list of available modules
    as they load. The framework has an interface similar to Metasploit:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下输出。当它们加载时，您将看到可用模块的列表。该框架具有类似于Metasploit的界面：
- en: '![](img/bd1bec9d-dc31-4e9d-b1d4-0fcc12ca5e64.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd1bec9d-dc31-4e9d-b1d4-0fcc12ca5e64.png)'
- en: 'The following screenshot shows a continuation of the `modules` output:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了`modules`输出的继续：
- en: '![](img/22242ab4-90cc-4669-9304-a6d52c4c5cb9.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22242ab4-90cc-4669-9304-a6d52c4c5cb9.png)'
- en: 'By running `show options` we can see a list of modules. Notice all the modules
    for different types of application, including update services for hardware vendors.
    Yes, you can upload a rootkit to, say, an Acer or Lenovo laptop. This is beyond
    the scope of this book, but with a little configuration, much like what we are
    doing here, this tool will do the job:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行`show options`，我们可以看到模块列表。注意所有不同类型应用程序的模块，包括硬件供应商的更新服务。是的，你可以上传rootkit到，比如，宏碁或联想笔记本电脑。这超出了本书的范围，但通过一点配置，就像我们在这里所做的一样，这个工具就能胜任：
- en: '[PRE20]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Security note:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 安全提示：
- en: This is a big attack vector on Windows systems. Unlike Linux, where all packages
    can be downloaded from a central repository and verified by GPG keys, with Window
    applications each application depends on its own individual updater. This allows
    this style of attack to be used on many common applications which you would never
    normally consider as an attack vector. This is also the reason why, when working
    with Kali as shown in this book, you should download your applications from the
    repository, avoiding downloading and installing individual applications from other
    websites.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Windows系统上的一个重要攻击向量。与Linux不同，Linux中所有软件包都可以从中央存储库下载并通过GPG密钥进行验证，而Windows应用程序中的每个应用程序都依赖于其自己的更新程序。这使得这种攻击方式可以用于许多常见应用程序，这些应用程序通常不会被视为攻击向量。这也是为什么在使用本书中所示的Kali时，应该从存储库下载应用程序，避免从其他网站下载和安装单独的应用程序。
- en: 'We will need to set the IP address for the DNS service. Type the following
    commands:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为DNS服务设置IP地址。输入以下命令：
- en: '[PRE21]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![](img/6d5e47f3-c123-4e39-8924-9099fd387cf9.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d5e47f3-c123-4e39-8924-9099fd387cf9.png)'
- en: 'We''re using Windows Update Service (wpad) in this attack, so to load the Windows
    Update module enter the following:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在这次攻击中，我们将使用Windows更新服务（wpad），因此要加载Windows更新模块，请输入以下内容：
- en: '[PRE22]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Next, we will need our payload. To build the payload, we'll use MSFvenom. Open
    a new Terminal window and, from the command line, type the following code. The
    `-p` flag is the payload to be used. We are using the `windows/meterpreter/reverse_tcp`
    payload. Since this is a reverse shell, you must set the local host and local
    port for the payload to call to on the attacking machine. Our Kali machine is
    at `172.16.42.139`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要我们的有效载荷。要构建有效载荷，我们将使用MSFvenom。打开一个新的终端窗口，然后从命令行中输入以下代码。`-p`标志是要使用的有效载荷。我们正在使用`windows/meterpreter/reverse_tcp`有效载荷。由于这是一个反向shell，您必须设置有效载荷在攻击机器上调用的本地主机和本地端口。我们的Kali机器在`172.16.42.139`。
- en: 'We will set our port at `445`, a standard Windows port, and save it out using
    the `-o` flag to `/tmp/windowsupdate.exe`:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将端口设置为`445`，这是一个标准的Windows端口，并使用`-o`标志将其保存到`/tmp/windowsupdate.exe`：
- en: '[PRE23]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![](img/35cce0f2-19da-4421-bb4f-8010723ab26b.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/35cce0f2-19da-4421-bb4f-8010723ab26b.png)'
- en: We have saved the payload to `/tmp/windowsupdate.exe`, so we will need to set
    the agent to this path.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已将有效载荷保存到`/tmp/windowsupdate.exe`，因此我们需要将代理设置为此路径。
- en: 'In the running EvilGrade framework window, type the following to set the payload
    to our custom payload:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行的EvilGrade框架窗口中，输入以下内容将有效载荷设置为我们的自定义有效载荷：
- en: '[PRE24]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![](img/3f277827-fadf-48a1-a3ac-cf3f39bbcc19.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f277827-fadf-48a1-a3ac-cf3f39bbcc19.png)'
- en: 'Now, to allow the connection, we will need to set up a multi/handler to accept
    the in-bound connection once the system has been compromised. From our running
    Metasploit Terminal on which we have BadTunnel running in the background, we''ll
    start a `multi/handler` and run it also in the background. From within Metasploit,
    run the following commands:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了允许连接，我们需要设置一个multi/handler来接受系统被入侵后的入站连接。从我们正在运行BadTunnel的Metasploit终端开始，我们将启动`multi/handler`并在后台运行。在Metasploit中，运行以下命令：
- en: '[PRE25]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![](img/e89e7ba0-13e1-4c87-82bb-414e83240ae4.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e89e7ba0-13e1-4c87-82bb-414e83240ae4.png)'
- en: Ettercap setup
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ettercap设置
- en: 'Ettercap is a great spoofing tool that we have used quite a bit in this book,
    and again, we''re going to whip it out. We need to spoof the DNS service and get
    it directed to our Kali box. Ettercap comes with a plugin just for this. On this
    attack, since our Kali box is local to the victim network, we can use the GUI
    version. You''ll find this under Sniffing & Spoofing | ettercap-graphical. The
    procedure goes as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Ettercap是一个很棒的欺骗工具，在本书中我们已经经常使用它，现在我们将再次使用它。我们需要欺骗DNS服务并将其指向我们的Kali框。Ettercap附带了一个专门用于此目的的插件。在这次攻击中，由于我们的Kali框局限于受害者网络，我们可以使用GUI版本。您会在Sniffing
    & Spoofing | ettercap-graphical下找到它。该过程如下：
- en: 'First, we need to set up our DNS A records that we will use when spoofing.
    If this is the first time you have spoofed a DNS, you will need to make a new
    file with your favorite text editor. Add the following A records to the file.
    By wildcarding the records (`*.`), we should be good, as follows:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要设置我们将在欺骗时使用的DNS A记录。如果这是您第一次欺骗DNS，您需要使用您喜欢的文本编辑器创建一个新文件。将以下A记录添加到文件中。通过通配符记录（`*.`），我们应该是好的，如下所示：
- en: '[PRE26]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Save this file to `/usr/share/ettercap/etter.dns`. Close the editor-your spoofed
    records are ready to go:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存到`/usr/share/ettercap/etter.dns`。关闭编辑器-您的欺骗记录已准备就绪：
- en: '![](img/b546ecbf-cdd4-4ec5-864e-fc61307dee55.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b546ecbf-cdd4-4ec5-864e-fc61307dee55.png)'
- en: 'Next, we need to set the active interface to spoof traffic from, as follows:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要设置活动接口来欺骗流量，如下所示：
- en: '![](img/af955885-cb75-4cff-93ba-0fff8b00dbfa.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af955885-cb75-4cff-93ba-0fff8b00dbfa.png)'
- en: 'Next, we''ll need to activate the DNS spoofing plugin. In the menu bar, go
    to Plugins, then Manage the plugins. This will give you a window listing all the
    various plugins available:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要激活DNS欺骗插件。在菜单栏中，转到插件，然后管理插件。这将为您提供列出所有各种可用插件的窗口：
- en: '![](img/31b5dda6-c956-4da2-827a-87931d64fbb9.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/31b5dda6-c956-4da2-827a-87931d64fbb9.png)'
- en: 'Next, pick dns_spoof from the list and double-click it. A star will appear
    on the left to show it is activated. You will also see this in the text window
    at the bottom of Ettercap:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从列表中选择dns_spoof并双击它。左侧将出现一个星号，表示它已激活。您还将在Ettercap底部的文本窗口中看到这一点：
- en: '![](img/6061473b-580d-4488-819b-2385a3a3a2eb.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6061473b-580d-4488-819b-2385a3a3a2eb.png)'
- en: 'Next, let''s run a scan to find our targets, as follows:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们运行扫描以找到我们的目标，如下所示：
- en: '![](img/a66b409d-6b93-43bb-8e1a-b9bb488afed1.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a66b409d-6b93-43bb-8e1a-b9bb488afed1.png)'
- en: 'After the scan, we need to pick the router as target 1, and our target machine
    (`win7-01`) as target 2\. You can do this by picking the address and right-clicking
    it-a menu will allow you to set the target number:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描后，我们需要将路由器选为目标1，将我们的目标机器（`win7-01`）选为目标2。您可以通过选择地址并右键单击来执行此操作-菜单将允许您设置目标编号：
- en: '![](img/5d7ffae8-ccd6-4a34-a14d-7ce1a2c30f27.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d7ffae8-ccd6-4a34-a14d-7ce1a2c30f27.png)'
- en: 'After picking the targets, you can view them by going to Targets | Current
    Targets in the menu bar. To start the process, go to Mitm | ARP Poisoning in the
    menu bar and click. You will get a box to set the type of sniffing. Once this
    starts, you can watch the output in the bottom screen, as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 选择目标后，您可以通过转到菜单栏中的目标|当前目标来查看它们。要启动该过程，请转到菜单栏中的Mitm | ARP Poisoning并单击。您将获得一个框来设置嗅探的类型。一旦开始，您可以在底部屏幕中观看输出，如下所示：
- en: '![](img/e2df5a3a-a3e9-4ba5-9282-c7989ab43f5f.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e2df5a3a-a3e9-4ba5-9282-c7989ab43f5f.png)'
- en: The attack
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 攻击
- en: We're all set up now, and our attack is fully running. We have Metasploit running
    BadTunnel NBNS spoofing, EvilGrade running both a DNS server and a web server
    to hand out the update with a bogus Windows Update site running. We have also
    set up our handler for the payload to connect to. Now we're just waiting for our
    unsuspecting victim to update their Windows system.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经设置好了，我们的攻击已经完全运行。我们正在运行BadTunnel NBNS欺骗的Metasploit，EvilGrade同时运行DNS服务器和Web服务器以提供带有虚假Windows更新站点的更新。我们还为有效载荷设置了处理程序以进行连接。现在我们只是在等待我们毫无戒心的受害者更新他们的Windows系统。
- en: On the Windows workstation, when the victim uses IE to manually update their
    system, they are presented with the following page. Looks pretty normal-you can
    see that the address in the address bar says the site is [http://www.microsoft.com](http://www.microsoft.com).
    No real warning signs that this isn't Microsoft's site.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows工作站上，当受害者使用IE手动更新他们的系统时，他们会看到以下页面。看起来很正常-你可以看到地址栏中的地址说这个站点是[http://www.microsoft.com](http://www.microsoft.com)。没有真正的警告标志表明这不是微软的站点。
- en: 'So, let''s click and update our computer! You know to keep it safe and secure:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们点击更新我们的计算机！你知道要保持安全和安全：
- en: '![](img/cb7f4556-8d5f-4a44-84ad-c4cee3b7a03e.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cb7f4556-8d5f-4a44-84ad-c4cee3b7a03e.png)'
- en: We click on the Download and Install Now button and we get a normal file download
    box offering an `update97543.exe` file. It even appears to be signed by `windowsupdate.microsoft.com`.
    Surely the file is legit?
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们点击“立即下载并安装”按钮，我们得到一个正常的文件下载框，提供一个`update97543.exe`文件。甚至看起来是由`windowsupdate.microsoft.com`签名的。这个文件肯定是合法的吧？
- en: 'Let''s click Run and get our update:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们点击运行并获取我们的更新：
- en: '![](img/a4477fb6-8257-4591-b9b7-4acf1006936e.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a4477fb6-8257-4591-b9b7-4acf1006936e.png)'
- en: 'We are logged in as rred and Randy Red is a peon user, so we are given a UAC
    login. We get the administrator and they log in to run the update. If the user
    already has admin rights, a UAC box will still appear but you can click OK as
    normal, and all is good. Makes you wonder about UAC security:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以rred和Randy Red的身份登录，所以我们被要求进行UAC登录。我们得到了管理员权限，他们登录运行更新。如果用户已经有管理员权限，UAC框仍然会出现，但你可以像平常一样点击OK，一切都很好。这让你对UAC安全产生了疑问：
- en: '![](img/a301b08c-26e3-4c2d-a8eb-154bbae9f5df.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a301b08c-26e3-4c2d-a8eb-154bbae9f5df.png)'
- en: The file runs, and as with most updates, the system doesn't really do anything
    after installing the update. The user goes back to work thinking the world is
    good. Let's look at what is happening on our Kali box.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 文件正在运行，和大多数更新一样，安装更新后系统并没有真正做任何事情。用户回到工作中，认为一切都很好。让我们看看我们的Kali盒子上发生了什么。
- en: 'Hmm-it seems we have a session opened with fflintstone, the user with admin
    rights. We are under rred''s account, but we have the admin rights fflintstone.
    To interact with the session type, use the following command:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯-看起来我们已经与具有管理员权限的fflintstone打开了一个会话。我们在rred的账户下，但我们有管理员权限fflintstone。要与会话交互，请使用以下命令：
- en: '[PRE27]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '![](img/d0a08e62-6d3f-400f-ad0e-c542bcafffb9.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d0a08e62-6d3f-400f-ad0e-c542bcafffb9.png)'
- en: 'The result of this, just like the message says here, is the following:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的结果，就像这里的消息所说的那样，是这样的：
- en: '![](img/833e721e-cf81-49eb-afc7-f5b5a226a539.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/833e721e-cf81-49eb-afc7-f5b5a226a539.png)'
- en: 'In our running EvilGrade Terminal, we can see the interaction of the victim
    machine with our evil server. In the following screenshot, you can see the malicious
    web page being uploaded to the victim:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们运行的EvilGrade终端中，我们可以看到受害者机器与我们的恶意服务器的交互。在下面的截图中，你可以看到恶意网页被上传到受害者：
- en: '![](img/ae8dd23e-d32a-47d0-be1a-3021ad98bf4c.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae8dd23e-d32a-47d0-be1a-3021ad98bf4c.png)'
- en: So there you have it-updates may not be as safe as you think. Always update
    from a secured network. Again, take a look back at the list of systems and applications
    that can easily be attacked using this method.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你知道了-更新可能并不像你想象的那么安全。始终从安全网络更新。再次，看一下可以使用这种方法轻松攻击的系统和应用程序的列表。
- en: Notice that Windows security methods, such as the UAC, did nothing to stop this
    attack. To the system, it appeared that it called home and was talking to Momma,
    and Momma would never feed you anything bad.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Windows安全方法，如UAC，对于阻止这种攻击没有起作用。对于系统来说，它看起来是在回家和妈妈交谈，而妈妈绝不会给你喂任何坏东西。
- en: With Linux systems, this attack will fail when using apt-get or yum on RedHat
    systems. Yes, you can spoof the repository site, but when the update (in reality,
    our payload) is downloaded, it will fail to install, because all repository packages
    are signed with a GPG key. Since our bogus update isn't signed, our attack fails
    epically. There's something to be said for using GPG and public/private keys.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Linux系统，在RedHat系统上使用apt-get或yum时，这种攻击将失败。是的，你可以欺骗存储库站点，但当更新（实际上是我们的有效负载）被下载时，它将无法安装，因为所有存储库包都是用GPG密钥签名的。由于我们的虚假更新没有签名，我们的攻击失败了。对于使用GPG和公钥/私钥的方法有一些值得说的地方。
- en: Summary
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you have learned the workings of the NTLM and LLMR protocols
    and their inherent weaknesses. You have learned how to poison network traffic
    to capture user credentials.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你已经学会了NTLM和LLMR协议的工作原理及其固有的弱点。你已经学会了如何毒害网络流量以捕获用户凭据。
- en: You have also learned how to use many tools, such as Responder and Etthercap,
    in unison to exploit your target system. And finally, we learned how to spoof
    an update service, such as Windows Update, and exploit the system using this service.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 你还学会了如何同时使用许多工具，如Responder和Etthercap，来利用你的目标系统。最后，我们学会了如何欺骗更新服务，如Windows Update，并利用这个服务来攻击系统。
- en: Further reading
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: The GitHub for Responder can be found here: [https://github.com/SpiderLabs/Responder](https://github.com/SpiderLabs/Responder)
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Responder的GitHub可以在这里找到：[https://github.com/SpiderLabs/Responder](https://github.com/SpiderLabs/Responder)
- en: The Ettecap project page can be found here: [https://www.ettercap-project.org/](https://www.ettercap-project.org/)
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Ettecap项目页面可以在这里找到：[https://www.ettercap-project.org/](https://www.ettercap-project.org/)
- en: 'More information on the MS17-010 (EternalBlue) Vulnerability can be found at
    the following links:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 有关MS17-010（EternalBlue）漏洞的更多信息可以在以下链接找到：
- en: '[https://cvedetails.com/cve/CVE-2017-0143/](https://cvedetails.com/cve/CVE-2017-0143/)'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://cvedetails.com/cve/CVE-2017-0143/](https://cvedetails.com/cve/CVE-2017-0143/)'
- en: '[https://cvedetails.com/cve/CVE-2017-0144/](https://cvedetails.com/cve/CVE-2017-0144/)'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://cvedetails.com/cve/CVE-2017-0144/](https://cvedetails.com/cve/CVE-2017-0144/)'
- en: '[https://cvedetails.com/cve/CVE-2017-0145/](https://cvedetails.com/cve/CVE-2017-0145/)'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://cvedetails.com/cve/CVE-2017-0145/](https://cvedetails.com/cve/CVE-2017-0145/)'
- en: '[https://cvedetails.com/cve/CVE-2017-0146/](https://cvedetails.com/cve/CVE-2017-0146/)'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://cvedetails.com/cve/CVE-2017-0146/](https://cvedetails.com/cve/CVE-2017-0146/)'
- en: '[https://cvedetails.com/cve/CVE-2017-0147/](https://cvedetails.com/cve/CVE-2017-0147/)'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://cvedetails.com/cve/CVE-2017-0147/](https://cvedetails.com/cve/CVE-2017-0147/)'
- en: '[https://cvedetails.com/cve/CVE-2017-0148/](https://cvedetails.com/cve/CVE-2017-0148/)'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://cvedetails.com/cve/CVE-2017-0148/](https://cvedetails.com/cve/CVE-2017-0148/)'
- en: '[https://technet.microsoft.com/en-us/library/security/MS17-010](https://technet.microsoft.com/en-us/library/security/MS17-010)'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://technet.microsoft.com/en-us/library/security/MS17-010](https://technet.microsoft.com/en-us/library/security/MS17-010)'
- en: '[https://zerosum0x0.blogspot.com/2017/04/doublepulsar-initial-smb-backdoor-ring.html](https://zerosum0x0.blogspot.com/2017/04/doublepulsar-initial-smb-backdoor-ring.html)'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://zerosum0x0.blogspot.com/2017/04/doublepulsar-initial-smb-backdoor-ring.html](https://zerosum0x0.blogspot.com/2017/04/doublepulsar-initial-smb-backdoor-ring.html)'
- en: '[https://github.com/countercept/doublepulsar-detection-script](https://github.com/countercept/doublepulsar-detection-script)'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/countercept/doublepulsar-detection-script](https://github.com/countercept/doublepulsar-detection-script)'
- en: '[https://technet.microsoft.com/en-us/library/security/ms17-010.aspx](https://technet.microsoft.com/en-us/library/security/ms17-010.aspx)'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://technet.microsoft.com/en-us/library/security/ms17-010.aspx](https://technet.microsoft.com/en-us/library/security/ms17-010.aspx)'
- en: More information from the author on SMB spoofing and how to fix the problem
    can be found here: [http://www.boweaver.com/security/ntlm.php](http://www.boweaver.com/security/ntlm.php)
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 作者在SMB欺骗和如何解决问题方面的更多信息可以在这里找到：[http://www.boweaver.com/security/ntlm.php](http://www.boweaver.com/security/ntlm.php)
