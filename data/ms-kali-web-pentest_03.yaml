- en: Chapter 4. Scanning for Vulnerabilities with Arachni
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第4章。使用Arachni扫描漏洞
- en: 'Web application vulnerability scanners are big businesses. A quick research
    into alternatives will show you that there are literally hundreds of open source
    and commercial scanners, and all of them offer varying coverage of the vuln space
    as well as functions that extend into the different phases of the Pen Test Kill
    chain. As is the case with any trend in security, this explosion in the market
    is a symptom of something else entirely: web applications are, by their very nature,
    easy to access and popular for hackers to exploit. The payoff for a successful
    breach or compromise is massive.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序漏洞扫描器是一个大生意。 快速研究替代方案将告诉你，有数百种开源和商业扫描器，它们提供不同程度的漏洞覆盖，并且具有延伸到渗透测试Kill链的不同阶段的功能。
    与安全领域的任何趋势一样，市场的爆炸是完全不同的东西的症状：Web应用程序本质上易于访问，也是黑客利用的热门目标。 成功入侵或妥协的回报是巨大的。
- en: Most major companies involved in cyber security solutions publish annual reports
    that summarize the past year's events and make predictions of the expected trends
    that will shape the business in the years to come. Verizon, Dell, Cisco, FireEye,
    Symantec, and HP are just some of the more anticipated releases each year. While
    they do not usually deal in technical details and **Tactics,** the **Techniques
    and Procedures** (**TTPs**) of specific threats, they do help shedÂ the light
    on prevailing threat areas, high-level delivery modes, and the perceived motivation
    for any of these changes. A consensus of reports in 2016 and 2017 has noted the
    shift on the part of attackers towards the exploits of user browsers and plugins,
    as well as the advent of *malvertizing*, embedded ads, and frames that contain
    malware or link to sites that do.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 参与网络安全解决方案的大公司都会发布年度报告，总结过去一年的事件，并预测未来几年将塑造业务的预期趋势。 Verizon、戴尔、思科、FireEye、赛门铁克和惠普只是每年更受期待的发布之一。
    虽然它们通常不涉及特定威胁的技术细节和**战术**，但它们确实有助于阐明当前的威胁领域、高级交付模式以及对任何这些变化的感知动机。 2016年和2017年的多份报告一致指出，攻击者转向利用用户浏览器和插件的漏洞，以及*恶意广告*、嵌入式广告和包含恶意软件或链接到恶意网站的框架。
- en: 'These trends point to a couple of things. Firstly, users and by extension their
    end-user devices (mobile, laptop, home) are the weakest link in our security story.
    Second, as the same users demand access anytime and anywhere, it becomes difficult
    to secure the elastic perimeter, as there is no longer a perimeter to defend but
    a very fluid environment. Hackers, by their very nature, are going to exploit
    the trust we all put in these new shifts in behavior and corresponding weaknesses;
    hacking the enterprise is more involved and delicate at this point in time, so
    depending on their motivation, the get-rich-quick set is going to shift to the
    path of least resistance: web applications and the application-client paradigm.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这些趋势指向了一些事情。 首先，用户及其终端设备（移动设备、笔记本电脑、家庭设备）是我们安全故事中最薄弱的环节。 其次，随着同一用户要求随时随地访问，保护弹性边界变得困难，因为不再有需要防御的边界，而是一个非常灵活的环境。
    黑客本质上会利用我们对这些新行为转变和相应弱点的信任；此时黑客企图入侵企业更加复杂和微妙，因此根据他们的动机，寻求快速致富的人会转向最易攻击的路径：Web应用程序和应用-客户端范式。
- en: So, what are our customers doing in response? They are starting to purchase
    tools that can help them begin to secure their environment, but only if they are
    wielded correctly. In Kali Linux, we have some fantastic, well-regarded scanners
    that we can use to help our customers better understand their exposure to vulnerabilities
    and better understand their architecture. While we have some great options, it
    is helpful to mix them to ensure that we are covering vectors with multiple tools
    that can complement each other and reduce our blind spots. One of the best such
    tools, and one I am sure you have used in the past if you have conducted web application
    vulnerability scans, is **Arachni**.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们的客户做出了什么样的回应？ 他们开始购买可以帮助他们开始保护其环境的工具，但前提是这些工具必须被正确使用。 在Kali Linux中，我们有一些出色的、备受推崇的扫描器，可以帮助我们的客户更好地了解他们面临的漏洞和更好地了解他们的架构。
    虽然我们有一些很好的选择，但混合它们以确保我们覆盖多个工具的矢量是有帮助的，这些工具可以相互补充，减少我们的盲点。 其中一个最好的工具，我相信你过去使用过，如果你进行过Web应用程序漏洞扫描，那就是**Arachni**。
- en: 'In this chapter, we''re going to see how we can use Arachni for the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到如何使用Arachni来实现以下目标：
- en: Crawling web applications effectively for quick initial scans
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有效地爬行Web应用程序进行快速初始扫描
- en: Using active scanning techniques to probe further and uncover more vectors
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用主动扫描技术进一步探测并发现更多矢量
- en: Launching scans and trace flows on DOM and JavaScript environments
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在DOM和JavaScript环境中启动扫描和跟踪流
- en: Mimicking browser constraints of mobile platforms
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模仿移动平台的浏览器约束
- en: Producing high-quality reports, either as a standalone or as the basis for a
    multi-tool pen test deliverable
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成高质量的报告，可以作为独立报告或多工具渗透测试交付的基础
- en: Walking intoÂ spider webs
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 走进蜘蛛网
- en: '* * *'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Arachni is an open source scanner that focuses on the recon phase of our penetration
    testing in a different manner than any other tool out there. If you've used Arachni
    without paying attention to what makes it different (just like me), then you may
    find that changing your workflow will greatly improve results. The creator of
    the tool, *Tasos Laskos*, developed the tool to address a couple of opposed goals.
    First, scans can take an excessive amount of time (many hours to even weeks),
    and this makes these scans less than helpful. The time is lost and makes testing
    a more drawn-out process. Second, more data and coverage is a good thing, as it
    enhances accuracy, but it also adds additional time to the test process to complete
    the necessary transactions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Arachni是一个专注于我们渗透测试的侦察阶段的开源扫描器，其方式与其他任何工具都不同。如果您使用Arachni而不注意它与众不同的地方（就像我一样），那么您可能会发现改变工作流程会极大地改善结果。工具的创建者*Tasos
    Laskos*开发了该工具以解决一些相反的目标。首先，扫描可能需要过多的时间（甚至数小时甚至数周），这使得这些扫描不太有用。时间被浪费了，使得测试变得更加冗长。其次，更多的数据和覆盖范围是一件好事，因为它增强了准确性，但也为测试过程增加了额外的时间来完成必要的交易。
- en: Laskos developed Arachni to reduce the amount of time for a scan while allowing
    the tool to scale such that it is able to process more test vectors efficiently.
    Its timing was improved by employing asynchronous HTTP requests to do the tool's
    bidding and by allowing Arachni to scale across a cluster of systems so that they
    are all processing in parallel. The accuracy goal was enhanced by open sourcing
    the tool and using a Ruby framework that can allow anyone to add new or better
    optimized tests to the tool. The timing, accuracy, and coverage of the testing
    are further improved by machine learning techniques that allow the scanner to
    hone testing vectors used through the results from earlier vectors in the test
    battery. Together, these enhancements make Arachni a formidable scan tool that
    we will explore more deeply for improved testing efficacy and timing.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Laskos开发Arachni以减少扫描所需的时间，同时允许工具扩展，以便能够更有效地处理更多的测试向量。通过使用异步HTTP请求来执行工具的命令，并允许Arachni跨系统集群扩展，以便它们可以并行处理，从而改进了其时机。通过开源工具并使用Ruby框架增强了准确性目标，可以让任何人向工具添加新的或更优化的测试。通过机器学习技术进一步改进了测试的时机、准确性和覆盖范围，使扫描工具Arachni成为一个强大的工具，我们将更深入地探索以提高测试效果和时机。
- en: Optimal Arachni deployment tips
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Arachni部署的最佳实践
- en: When we are just practicing with Arachni, we would likely invoke a single serverÂ 
    and client hosted on the same Kali Box. The **Web UI Client** executable should
    be running to ensure that Arachni is being operated in the same manner as it would
    be in a real testing scenario. A command-line option is available, but it tends
    to be limited in scale and works best in single-server deployments.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们只是使用Arachni进行练习时，我们可能会调用托管在同一Kali Box上的单个服务器和客户端。应该运行**Web UI Client**可执行文件，以确保Arachni的操作方式与实际测试场景中的操作方式相同。虽然有命令行选项可用，但在规模上有限，并且在单服务器部署中效果最佳。
- en: 'The Arachni high-level architecture can be seenÂ here:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Arachni的高级架构可以在这里看到：
- en: '![](img/B03918_04_01-1.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_04_01-1.png)'
- en: Arachni's architecture is its secret sauce â�� it helps with scale and speed
    alike.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Arachni的架构是其秘密武器，它有助于扩展和速度。
- en: The brain of the operation here is the **Web UI Client** (**arachni_web**).
    It provides the single point of contact that will contact its grid of **Dispatch
    Servers** (**dispatchers**) with initial scan requests. The dispatchers then spawns
    a new **instance** on theÂ **server**.Â  At this point, the Web UI Client will
    be able to communicate directly with the spawned Instance to configure it for
    the appropriate scanning jobs. When an instance is done with its task, The Web
    UI client pulls the data and stores it, while the instance simply goes away, returning
    the resources it consumed to the operating system for future instances or other
    software tasks altogether.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的操作大脑是**Web UI Client**（**arachni_web**）。它提供了一个单一的联系点，将其网格的**Dispatch Servers**（**dispatchers**）与初始扫描请求联系起来。然后，调度程序在**服务器**上生成一个新的**实例**。此时，Web
    UI Client将能够直接与生成的实例通信，为适当的扫描工作进行配置。当一个实例完成其任务时，Web UI客户端会拉取数据并存储它，而实例只是消失了，将其消耗的资源返回给操作系统，以供将来的实例或其他软件任务使用。
- en: As we move into production testing, we can scale the deployment to take advantage
    ofÂ additional resources on other servers in our grid, and this will not only
    allow us to run multiple scans, but also accommodate teams of users while consolidating
    the data gathered in a central database on the Web UI Client. **SQLite3** is the
    default option, but if you will ever turn this installation into a grid or large-scale
    installation, it is highly recommended you start with PostgreSQL instead. The
    documentation for how to do this is located here:Â [https://github.com/Arachni/arachni-ui-web/wiki/database](https://github.com/Arachni/arachni-ui-web/wiki/database).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们进入生产测试阶段，我们可以扩展部署以利用网格中其他服务器上的额外资源，这不仅可以让我们运行多个扫描，还可以容纳用户团队，并将收集的数据集中存储在Web
    UI客户端的中央数据库中。SQLite3是默认选项，但如果您将来要将此安装转换为网格或大规模安装，强烈建议您从PostgreSQL开始。如何执行此操作的文档位于此处：[https://github.com/Arachni/arachni-ui-web/wiki/database](https://github.com/Arachni/arachni-ui-web/wiki/database)。
- en: Note
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Once you have selected one database or the other, you are locked in; and changing
    your mind means losing all of your prior data. It is worth the effort to build
    out the PostgreSQL environment up front if you think it will go that way.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您选择了其中一个数据库，您就会被锁定；改变主意意味着失去所有先前的数据。如果您认为情况会朝这个方向发展，那么在一开始构建出PostgreSQL环境是值得的。
- en: Arachni differs from other black-box **Dynamic Application Security Test** (**DAST**)
    scanners, in that it makes heavy use of asynchronous HTTP to conduct its scans.
    This allows each Instance to send HTTP requests to targets in parallel. Because
    you can have multiple scans in progress at the same time, it greatly improves
    the speed with which we can go from initiationÂ to completion. Most scanners spend
    considerable time waiting on scan threads to finish. This is made moreÂ egregiousÂ given
    that these scanners often run a set array of scans and do not tailor their scan
    list on-the-fly like Arachni.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Arachni与其他黑盒**动态应用程序安全测试**（**DAST**）扫描器不同，它大量使用异步HTTP来进行扫描。这允许每个实例并行发送HTTP请求到目标。因为你可以同时进行多个扫描，这大大提高了我们从开始到完成的速度。大多数扫描器花费大量时间等待扫描线程完成。鉴于这些扫描器通常运行一组扫描并且不像Arachni那样即时调整扫描列表，这更加严重。
- en: The number of instances that can be supported is really going to depend on the
    number of servers available, their resource availability, and the bandwidth available
    outbound to initiate scans. I would caution that if you are worried about bandwidth,
    it is likely that the generated traffic exceeds non-trivial amounts and should
    be throttled down to avoid impairing the application's performance for real users
    or alerting the security operations folks. Nothing says *I'm here to damage your
    application*Â like a **Distributed Denial of Service** (**DDoS**) attack from
    your application scanner. As they say, with great power comes great responsibility!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 可以支持的实例数量实际上取决于可用服务器的数量，它们的资源可用性以及用于发起扫描的出站带宽。我要警告的是，如果你担心带宽，那么生成的流量很可能超过非常大的数量，应该进行限速，以避免损害真实用户的应用程序性能或者警告安全运营人员。没有什么比应用程序扫描器发起的**分布式拒绝服务**（**DDoS**）攻击更能表明*我是来损害你的应用程序的*。正如他们所说，伴随着巨大的力量而来的是巨大的责任！
- en: An encore for stacks and frameworks
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 堆栈和框架的再现
- en: '* * *'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our first step in any active recon could very well just be to attempt a scan,
    but it's a good idea before taking on any job or task to simply browse to the
    site's main page first. Using browser plugins such asÂ **Wappalyzer** ([https://wappalyzer.com](https://wappalyzer.com)),
    we can easily see an initial footprint of the website and discover the platform
    or framework a web application is built on (as discussed in [Chapter 1](000.html#)*,
    Common Web Applications and Architectures)*. We'll start our detailed Arachni
    best practices using the **Damn Vulnerable Web Application** (**DVWA**), so let's
    see what the browser and Wappalyzer can tell us before we dive into a scan!
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在任何主动侦察中的第一步很可能只是尝试进行扫描，但在接受任何工作或任务之前，最好先简单浏览一下网站的主页。使用浏览器插件，比如**Wappalyzer**（[https://wappalyzer.com](https://wappalyzer.com)），我们可以轻松地看到网站的初始足迹，并发现Web应用程序构建的平台或框架（如[第1章](000.html#)*，常见的Web应用程序和架构*中所讨论的）。在我们开始详细介绍Arachni最佳实践之前，我们将使用**Damn
    Vulnerable Web Application**（**DVWA**），所以在我们进行扫描之前，让我们看看浏览器和Wappalyzer能告诉我们什么！
- en: As seen in following screenshot, DVWA is apparently running on a Linux operating
    system, employs Apache as the web server, MySQL as the database, and a mix of
    scripting languages are employed (Python, Perl, Ruby, and PHP). This very much
    looks like your typical **LAMP** stack, and we'll craft a scan that realizes these
    details and helps to narrow the scan time. Other traditional stacks hosted on
    Windows and Linux/Unix alike using languages such as PHP or ASP.NET are giving
    way to newer stacks based on Ruby, Java, JavaScript, and Python that specialize
    in mobile services, super-scalable architectures, and other modern concerns have
    sprung up such that there are too many to mention. To add to the fun, web stack
    or framework means something different to everybody. The days of HTML being statically
    coded are giving way to a new approach centered around an elementÂ calledÂ the
    **Document Object Model** (**DOM**), where the scripting languages (JavaScript,
    Python, and so on) dynamically build the HTML or XML presented in the browser.Â No
    matter what vintage of stack is in use, beingÂ able to quickly ascertain what
    is running, can point us in the right direction for **Common Vulnerabilities and
    Exploits (CVEs)** and other characteristics we can leverage in our testing.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，DVWA显然是在Linux操作系统上运行，使用Apache作为Web服务器，MySQL作为数据库，并使用了多种脚本语言（Python，Perl，Ruby和PHP）。这看起来非常像您典型的**LAMP**堆栈，我们将制定一个扫描，以实现这些细节并帮助缩短扫描时间。其他传统堆栈，无论是基于Windows还是Linux/Unix，使用诸如PHP或ASP.NET的语言，都正在让位于基于Ruby，Java，JavaScript和Python的新堆栈，这些堆栈专门用于移动服务，超可扩展的架构以及其他现代关注点，以至于有太多要提及。为了增加乐趣，Web堆栈或框架对每个人来说意味着不同的东西。静态编码HTML的日子正在让位于围绕称为**文档对象模型**（**DOM**）的元素的新方法，其中脚本语言（JavaScript，Python等）动态构建在浏览器中呈现的HTML或XML。无论使用的是哪个版本的堆栈，能够快速确定正在运行的内容，可以指引我们朝着**常见漏洞和利用（CVEs）**以及我们在测试中可以利用的其他特征的正确方向。
- en: '![](img/B03918_04_02.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_04_02.png)'
- en: Scans are more productive when we let our browser help with a quick footprint
    of the target.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们让浏览器帮助我们快速了解目标时，扫描会更加高效。
- en: DVWA also uses OpenSSL, which, after the last two or three years, is well worth
    a careful look, as it has been subjected to several high-profile vulnerabilities
    such asÂ **Heartbleed** and others ([https://www.openssl.org/news/vulnerabilities.html](https://www.openssl.org/news/vulnerabilities.html))
    that dominated news outlets worldwide. It is always pretty impressive for something
    so technical to capture headlines, but we're after even the small stuff â�� those
    are just as easy to exploit and often go unaddressed in favor of higher-profile
    vulnerabilities. The previous screenshot in Firefox with the Wappalyzer plugin
    showed us all of these interesting nuggets of information.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: DVWA还使用OpenSSL，在过去的两三年中，它值得仔细研究，因为它已经遭受了几个备受关注的漏洞，比如**Heartbleed**等（[https://www.openssl.org/news/vulnerabilities.html](https://www.openssl.org/news/vulnerabilities.html)），这些漏洞在全球范围内占据了新闻头条。对于一些如此技术性的东西能够成为新闻头条总是相当令人印象深刻，但我们追求的是即使是小事情-这些事情同样容易被利用，而且通常会被忽视，以便解决更高调的漏洞。Firefox中的上一张截图与Wappalyzer插件向我们展示了所有这些有趣的信息。
- en: Note
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: For a good insight into the stacks running on popular sites, you can learn more
    about it atÂ [https://stackshare.io](https://stackshare.io/). If you want to see
    just how many stacks and perspectives there are, this Reddit thread is educational,
    impressive, and available atÂ [https://www.reddit.com/r/webdev/comments/2les4x/what_frameworks_do_you_use_and_why_are_they/](https://www.reddit.com/r/webdev/comments/2les4x/what_frameworks_do_you_use_and_why_are_they/)Â .
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解流行网站上运行的堆栈情况，您可以在[https://stackshare.io](https://stackshare.io/)上了解更多。如果您想了解有多少种堆栈和观点，这个Reddit主题是教育性的，令人印象深刻的，并且可以在[https://www.reddit.com/r/webdev/comments/2les4x/what_frameworks_do_you_use_and_why_are_they/](https://www.reddit.com/r/webdev/comments/2les4x/what_frameworks_do_you_use_and_why_are_they/)上找到。
- en: The Arachni test scenario
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Arachni测试场景
- en: '* * *'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The DVWA we're using is included in the **OWASP BWA** image, which is located
    in my lab at the addressÂ `https://172.16.30.131/dvwa/`. Our Kali box is on the
    same subnet (`172.16.30.133`), and we're interested in shortening the scan time
    over the default profile. We'll use this very simple topology in figure followingÂ to
    show off some of the advanced moves Arachni can make with a little bit of additional
    effort and input over a base scan.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的DVWA包含在**OWASP BWA**镜像中，位于我的实验室地址`https://172.16.30.131/dvwa/`。我们的Kali盒子位于同一子网（`172.16.30.133`），我们希望在默认配置文件上缩短扫描时间。我们将在下图中使用这个非常简单的拓扑图，以展示Arachni在基本扫描之上通过一点额外的努力和输入可以做出的一些高级动作。
- en: '![](img/B03918_04_03a.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_04_03a.png)'
- en: Simple Arachni Test Scenario
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的Arachni测试场景
- en: Profiles for efficiency
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 效率配置文件
- en: Most pen tester's early experience with Arachni usually involves running scans
    with the default settings, which run a comprehensive list of threat vectors past
    the target environment. This is a great way to see what Arachni can do, but the
    OSINT gathered in the recon phase or even through browsing, as we've just seen,
    gives us some great information that can help us narrow the search field. We can
    leverage this information to craft a custom profile, which, as far as Arachni
    is concerned, is where most of the bells and whistles are located.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数渗透测试人员早期使用Arachni的经验通常涉及使用默认设置运行扫描，这些设置会在目标环境中运行全面的威胁向量列表。这是了解Arachni能做什么的好方法，但在Recon阶段收集的OSINT甚至是通过浏览获得的信息，正如我们刚刚看到的那样，可以为我们提供一些有用的信息，帮助我们缩小搜索范围。我们可以利用这些信息来制定自定义配置文件，就Arachni而言，这是大部分功能的所在。
- en: Why should we do this? Eliminating vectors we know not to be of interest (unused
    database tests, operating system vectors, and so on) can both reduce the scan
    times and avoid crushing the target with excessive requests. This information
    can also steer us toward a deeper investigation at lower speeds as well. We'll
    walk through this process together and identify some options worth considering.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们要这样做？消除我们知道不感兴趣的向量（未使用的数据库测试、操作系统向量等）既可以减少扫描时间，又可以避免用过多的请求压垮目标。这些信息也可以引导我们以更低的速度进行更深入的调查。我们将一起走过这个过程，并确定一些值得考虑的选项。
- en: Creating a new profile
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建一个新配置文件
- en: 'Let''s build a profile for systems running one of the most common stacks. The
    LAMP stack we see running on the DVWA site still runs theÂ majority of web applications
    with **Windows/IIS/SQL/ASP.NET** (**WISA**) being a close second, so this is a
    good profile to have on hand. We''ll want to click on the **`+`**Â button in the
    **`Profiles`** menu at the top, as seenÂ here:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为运行最常见堆栈之一的系统构建一个配置文件。我们在DVWA网站上看到的LAMP堆栈仍然是大多数Web应用程序的运行堆栈，而**Windows/IIS/SQL/ASP.NET**（**WISA**）紧随其后，因此这是一个很好的配置文件。我们将要点击**`Profiles`**菜单顶部的**`+`**按钮，如下所示：
- en: '![](img/B03918_04_03.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_04_03.png)'
- en: Most Arachni's is on by default â�� we can tailor or focus based on Recon &
    OSINT using Profiles.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Arachni默认情况下都是开启的-我们可以根据Recon＆OSINT使用Profiles进行定制或聚焦。
- en: This will start us at the **`Top`** of the **`Profiles`** navigation menu in
    figure following, located at the left of the browser window (1). We'll want to
    decide on a profile name (2), enter a description to help track the intent (3,
    a good idea for teams and large production grids), and the users (4) who can access
    it; selected **`Global`**. It is important to note that these profiles are local
    to the Web UI Client, so your teammates will need to be able to reach the portal
    from their location.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使我们从图中的**`Profiles`**导航菜单的**`Top`**开始，位于浏览器窗口左侧（1）。我们需要决定一个配置文件名称（2），输入一个描述以帮助跟踪意图（3，对于团队和大型生产网格来说是个好主意），以及可以访问它的用户（4）；选择**`Global`**。需要注意的是，这些配置文件是Web
    UI Client本地的，因此您的队友需要能够从他们的位置访问门户网站。
- en: '![](img/B03918_04_04.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_04_04.png)'
- en: Not the most exciting part, but the naming conventions and documentation make
    life easier.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 并不是最令人兴奋的部分，但命名约定和文档使生活更轻松。
- en: Scoping and auditing options
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 范围和审计选项
- en: The **scope** Section customizes things a little too finely to be used in a
    profile that is meant to fit multiple applications. This section includes options
    to scan HTTPS only, set path and subdomain limits, exclude paths based on strings,
    or limit the DOM tree depth. If you are conducting a white-box test or doing an
    internal penetration testing of the same application as a part of the SDLC, these
    options are a fantastic way to help focus the testing on the impacted areas rather
    than cast so large a net that the scan is prolonged and contains extraneous results.
    Keeping this in mind, let's move on.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**范围**部分定制得太细致，以至于无法用于适用于多个应用程序的配置文件。该部分包括仅扫描HTTPS、设置路径和子域限制、根据字符串排除路径或限制DOM树深度的选项。如果您正在进行白盒测试或作为SDLC的一部分对同一应用程序进行内部渗透测试，这些选项是帮助将测试重点放在受影响的区域而不是扫描过大范围和包含多余结果的绝佳方式。牢记这一点，让我们继续。'
- en: We'll set our high-level scanning strategy with theÂ **audit** options in figure
    following. When we are testing a server, our scanning can be made much more efficient
    if we omit resource-intensive elements that delay our progress unnecessarily.
    If we have a site we know to be using HTTP **GETs** and **POSTs** equally, we
    can just test with one of those queries. Testing processes are different for all
    of us â�� we may overlap our Arachni scans with Burp Suite or OWASP ZAP scans
    and no longer need to scan headers or process cookies; we'll be covering this
    in [Chapter 5](000.html#), *Proxy Operations with OWASP ZAP and Burp Suite.*Â To
    follow, we'll uncheck the box here as well.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的图中使用**审计**选项来设置我们的高级扫描策略。当我们测试服务器时，如果我们省略了那些不必要地延迟我们进度的资源密集型元素，我们的扫描可以变得更加高效。如果我们知道一个网站同时使用HTTP的**GET**和**POST**，我们可以只测试其中一个查询。测试过程对我们每个人来说都是不同的
    - 我们可能会将我们的Arachni扫描与Burp Suite或OWASP ZAP扫描重叠，并且不再需要扫描标头或处理Cookie；我们将在[第5章](000.html#)中介绍这一点，*使用OWASP
    ZAP和Burp Suite进行代理操作*。接下来，我们也将取消这里的复选框。
- en: '![](img/B03918_04_05-1.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_04_05-1.png)'
- en: The Audit Section is where we decide how many aspects of the web server get
    tested.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 审计部分是我们决定对Web服务器进行测试的方面。
- en: Converting social engineering into user input and mobile platform emulation
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将社会工程转化为用户输入和移动平台模拟
- en: Depending on our success in the Recon phase, some of our OSINT may include credentials
    for a web user.Â  These can often be scraped in a MITM attack similar to what
    we discussed using SET in [Chapter 3](000.html#), *Stalking Prey Through Target
    Recon*. While it is certainly acceptable to scan sites without credentials, the
    revelations that may come with a scan as a logged-in user never disappoint. Without
    the credentials, you'll likely see a majority of static content and much less
    sensitive information exposed in black-box tests. White-box tests can better serve
    to secure data in the event of compromised credentials and thus input strings
    here are just as valuable if they are available. The HTTP section followingÂ likewise
    can help tailor HTTP requests to better mimic a legitimate client, work through
    any proxy in the path, and also throttle some of the request rates and file sizes
    to ensure neither the scanner nor the target are overwhelmed, or in their case,
    alerted to our presence. In the event you need to emulate a different browser
    and platform combination, you can provide those modifications here (the website
    at [http://www.useragentstring.com/pages/useragentstring.php](http://www.useragentstring.com/pages/useragentstring.php)
    provides an exhaustive list). As we'll see, the simple fields entered here in
    the **`Input`** fields will result in a much greater scanned area as we delve
    deeper into the application.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们在侦察阶段的成功，我们的一些OSINT可能包括网页用户的凭据。这些凭据通常可以在类似于我们在[第3章](000.html#)中讨论的使用SET的MITM攻击中被获取。虽然在没有凭据的情况下扫描网站是可以接受的，但作为登录用户进行扫描可能会带来一些意想不到的发现。没有凭据的话，你可能只能看到大部分静态内容，以及在黑盒测试中暴露的更少的敏感信息。白盒测试可以更好地保护数据，以防凭据被泄露，因此如果这些凭据可用的话，输入字符串在这里同样具有价值。接下来的HTTP部分同样可以帮助定制HTTP请求，更好地模仿合法的客户端，处理路径中的任何代理，并限制一些请求速率和文件大小，以确保扫描器和目标都不会被压垮，或者在他们的情况下，察觉到我们的存在。如果你需要模拟不同的浏览器和平台组合，你可以在这里提供这些修改（网站[http://www.useragentstring.com/pages/useragentstring.php](http://www.useragentstring.com/pages/useragentstring.php)提供了详尽的列表）。正如我们将看到的，输入字段中输入的简单内容将导致我们在应用程序中深入挖掘时扫描的范围更广。
- en: There are a host of other fields in figure following*Â *thatÂ we may need to
    be aware of as well. Addresses, names, and other static information are popular,
    but more dynamic input processes such as CAPTCHAÂ fields are built specifically
    to prevent non-human form fills. This can limit the scanner's reach, but rest
    assured that there are many other ways to overcome this obstacle so that we can
    test to ensure the target is truly protected.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的图中，还有一系列其他字段*，*我们可能也需要注意。地址、姓名和其他静态信息很受欢迎，但更动态的输入过程，如CAPTCHA字段，专门设计用于防止非人类填写表单。这可能会限制扫描器的范围，但请放心，还有许多其他方法可以克服这一障碍，以便我们可以测试以确保目标真正受到保护。
- en: '![](img/B03918_04_06-1.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_04_06-1.png)'
- en: The Input section is very handy when we have a user's potential credentials
    to leverage
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有用户潜在的凭据可以利用时，输入部分非常方便
- en: Fingerprinting and determining platforms
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 指纹识别和确定平台
- en: 'The **fingerprinting** section is one of the most impactful ways we can focus
    our scans and win back time in our schedule. Fingerprinting itself is a fantastic
    tool if you don''t already know your target''s stack. As we discovered earlier
    with our browser, we''re running LAMP and can omit the fingerprinting while selecting
    tests that only pertain to that framework. Note that in figure following*,*Â I
    am attempting to test against all 4 detected languages (Perl, PHP, Python, and
    Ruby):'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 指纹识别部分是我们可以集中扫描并在日程表中节省时间的最有影响力的方式之一。如果您还不知道目标的堆栈，指纹识别本身就是一个很棒的工具。正如我们之前在浏览器中发现的那样，我们正在运行LAMP，并且可以在选择只与该框架相关的测试时省略指纹识别。请注意，在下面的图中，我正在尝试针对检测到的所有4种语言（Perl、PHP、Python和Ruby）进行测试：
- en: '![](img/B03918_04_07.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_04_07.png)'
- en: Fingerprinting allows us to explicitly select tests â�� no sense using them
    all if we don't have to.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 指纹识别允许我们明确选择测试——如果我们不必使用所有测试，那就没有意义。
- en: Checks (please)
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检查（请）
- en: The **Checks** section is where the nitty-gritty details of what vulnerabilities
    we'll test against are offered. Each of the checks is either an active or a passive
    check, and we can enable all or some of them depending on the need. In this case,
    we have plenty of information on the DVWA's framework, but we have no clue as
    to what they will be subjected to. If this was truly a black-box scan, and we
    were trying to stay covert, I mightÂ omit all active checks (seen in following
    figure) in earlier scans and wait until I am able to conduct this from a less-suspicious
    host closer to the web server.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**检查**部分提供了我们将测试的漏洞的细节。每个检查都是主动检查或被动检查，我们可以根据需要启用所有或部分检查。在这种情况下，我们对DVWA的框架有大量信息，但我们不知道它们将受到什么样的影响。如果这真的是一个黑盒扫描，并且我们试图保持隐蔽，我可能会在早期的扫描中省略所有主动检查（见下图），并等到我能够从一个不那么可疑的主机更接近Web服务器时再进行扫描。'
- en: '![](img/B03918_04_08.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_04_08.png)'
- en: Active checks dictate what vulnerabilities Arachni will interact with the target
    proactively to discover.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 主动检查决定了Arachni将主动与目标进行交互以发现的漏洞。
- en: The passive scanning section is much less obtrusive and while these tests canÂ add
    some time, they are well worth using, especially in earlier recon efforts. This
    can be seen in following figure, and for more details, you can click on the name
    of each type for additional information.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 被动扫描部分要少得多，虽然这些测试可能需要一些时间，但在早期的侦察工作中非常值得使用。这可以在下图中看到，要获取更多详细信息，您可以单击每种类型的名称以获取额外信息。
- en: '![](img/B03918_04_09-1.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_04_09-1.png)'
- en: Passive checks are collected without interacting with input fields on the application.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 被动检查是在不与应用程序的输入字段进行交互的情况下收集的。
- en: Plugging into Arachni extensions and third-party add-ons
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 连接到Arachni扩展和第三方插件
- en: Arachni's Ruby-based framework (because, surprise, Arachni is a web application
    too!) isÂ an easy tool for anyone to build additional capabilities for. Widely
    accepted plugins, when meeting the developer's high standards, even make it into
    the Web UI Client in the **`Plugins`**Â section. In this version of Arachni, we
    have several plugins that have been integrated into Arachni and can help our scan
    reduce its impact on the target (Auto-Throttle or Rate-Limiter) or add functionality
    to scan for additional quirks and vulnerabilities.Â It even allows modification
    of fields and test parameters on the fly. Some of these are simply checked (see
    the following screenshot*)*, others require additional configuration after expanding
    them (simply click on the hyperlinked name of each plugin for details).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Arachni的基于Ruby的框架（因为，惊喜，Arachni也是一个Web应用程序！）是任何人都可以构建额外功能的简单工具。广泛接受的插件，当满足开发人员的高标准时，甚至会进入**`插件`**部分的Web
    UI客户端。在这个版本的Arachni中，我们已经集成了几个插件，可以帮助我们的扫描减少对目标的影响（自动节流阀或速率限制器），或者添加功能来扫描其他怪癖和漏洞。甚至可以在运行时修改字段和测试参数。其中一些只是被检查了（见下图*），其他需要在展开它们后进行额外配置（只需单击每个插件的超链接名称以获取详细信息）。
- en: 'I selected **`AutoThrottle`** and **`WAF Detector`** for this profile:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我为此配置选择了**`AutoThrottle`**和**`WAF Detector`**：
- en: '![](img/B03918_04_10-1.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_04_10-1.png)'
- en: Plugins modify any profile to allow on-the-fly parameter fuzzing, rate limiting,
    or other special tests.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 插件修改任何配置文件，以允许即时参数模糊、速率限制或其他特殊测试。
- en: 'An alternative way to conduct WAF detection is to use our trusty **Nmap**Â tool.
    Nmap includes a couple of scripts for this purpose. One simply detects the presence
    of a WAF, while the other, if a WAF is found, will typically tell us what brand
    or version is in use. Confirming through multiple scripts and tools can often
    increase confidence in the overall test fidelity. To use these scripts, enter
    the following commands:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 进行WAF检测的另一种方法是使用我们可靠的**Nmap**工具。Nmap包括了一些用于此目的的脚本。一个脚本仅检测WAF的存在，而另一个脚本则在发现WAF时通常会告诉我们正在使用的品牌或版本。通过多个脚本和工具进行确认通常可以增加整体测试的可信度。要使用这些脚本，请输入以下命令：
- en: '[PRE0]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Browser clusters
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 浏览器集群
- en: All of these scans and tests are conducted as if the Instances are actually
    browser sessions interacting with the web application and user. We can actually
    modify the browser's emulated behavior, time limits, size, and even the number
    of independent browsers in use in the **`Browser Cluster`**Â section. For quick
    scans, I advise checking the box that allows the scanner to omit images.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些扫描和测试都是作为实例实际上是与Web应用程序和用户进行交互的浏览器会话进行的。我们实际上可以修改浏览器的模拟行为、时间限制、大小，甚至是**`浏览器集群`**中使用的独立浏览器的数量。对于快速扫描，我建议勾选允许扫描程序省略图像的复选框。
- en: Session checking is also a potentially valuable capability, and its options
    are shown in figure following. There is nothing worse than scanning an application
    just to find out that the logic behind that application has shunted your sessions,
    scans, or traffic to a linked domain outside the target's control. We can enter
    confirmation pages here to ensure that we periodically check back in with an anchor
    page to determine our state and ensure we're still scanning insideÂ the targetÂ application's
    structure, and not following a tangent into a linked application.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 会话检查也是一种潜在有价值的能力，其选项如下图所示。没有比扫描一个应用程序，然后发现该应用程序背后的逻辑已经将您的会话、扫描或流量转移到目标控制之外的链接域更糟糕的了。我们可以在这里输入确认页面，以确保我们定期返回到锚定页面，以确定我们的状态，并确保我们仍然在目标应用程序的结构内进行扫描，而不是进入链接应用程序的偏离。
- en: '![](img/B03918_04_11.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_04_11.png)'
- en: Browser and Session settings ensure we present our best side to the right site.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器和会话设置确保我们向正确的站点展示我们最好的一面。
- en: After we've made all of our profile changes, we can select the **`Create Profile`**
    button at the bottom, and we should be good to go! If you run into issues, a top-center
    error box will steer you right to where the issues lie and tell you what must
    be revised before the profile can be accepted.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进行了所有配置文件更改之后，我们可以在底部选择**`创建配置文件`**按钮，然后就可以开始了！如果遇到问题，顶部中心的错误框将引导您找到问题所在，并告诉您在接受配置文件之前必须进行哪些修改。
- en: Kicking off our custom scan
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动我们的自定义扫描
- en: Once we've made our custom profile, we can invoke it, schedule it, or put it
    away for safe keeping.Â  To run the scan, simply initiate a scan and select **`LAMP
    Profile`****`Â (Global)`** (or whatever name you used) in the **`Configuration
    Profile to use`**Â field, as seen in following figure. We can control the number
    of instances, how the workload is provisioned (direct to a local computer running
    one or more instances, to a remote server, or using a grid of computers), and
    schedule it if so desired.Â  Here, we'll just run it with two instances now and
    see how it performs.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 制作完自定义配置文件后，我们可以调用它、安排它，或者将其放在安全的地方。要运行扫描，只需启动扫描，并在**`要使用的配置文件`**字段中选择**`LAMP配置文件`****`Â (全局)`**（或者您使用的任何名称），如下图所示。我们可以控制实例的数量，如何分配工作负载（直接到运行一个或多个实例的本地计算机，到远程服务器，或者使用计算机网格），如果需要的话可以安排它。在这里，我们现在只运行两个实例，看看它的表现如何。
- en: '![](img/B03918_04_12.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_04_12.png)'
- en: Running a scan with a custom profile is straightforward.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用自定义配置文件运行扫描很简单。
- en: While the scan is running, we can observe the summary and see just how well
    our custom profile is working. As seen in following figure, our scan is already
    far beyond what we saw with the default profile, with more pages discovered, more
    requests attempted, and better overall coverage while keeping a lower profile.
    This results in greater time to complete, but the automation should allow us to
    fire and forget while we work on other things. Â
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在扫描运行时，我们可以观察摘要，看看我们的自定义配置文件效果如何。如下图所示，我们的扫描已经远远超出了默认配置文件所见的范围，发现了更多页面，尝试了更多请求，并在保持低调的同时获得了更好的覆盖范围。这导致了更长的完成时间，但自动化应该允许我们在处理其他事情时进行快速扫描。
- en: I recommend that you find places in your own workflow where you can kick off
    automated tasks, while personally working on more labor-intensive efforts, such
    as Maltego graph building, social engineering, or the setup for follow-on tasks.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议您在自己的工作流程中找到可以启动自动任务的地方，同时在个人工作中进行更费力的工作，例如Maltego图构建、社会工程或后续任务的设置。
- en: '![](img/B03918_04_13.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_04_13.png)'
- en: The LAMP profile is slower, but revealings more and at lower burden to the target
    server.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: LAMP配置文件速度较慢，但揭示了更多内容，并对目标服务器的负担较低。
- en: Reviewing the results
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 审查结果
- en: The results of our tailored scan are that we see 34 issues versus the 29 identified
    onesÂ in the wide-open scan before, but that our scan was 28 minutes versus 34
    seconds. We also managed to unearth over 90 pages versus 27 (some as a result
    of our user input) and did so at a much lower request rate than the default, thus
    protecting the DVWA from a mini **Denial of Service** (**DoS**) and staying under
    the radar of any defenses that may have been on the way. Arachni archives scan
    until we run out of space or tell it to delete them, so we'll always have both
    to compare and contrast. In practice, I would recommend running a single-targeted
    scan when the risk is acceptable and running smaller subscans for more covert
    phases of your work.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定制扫描的结果是，我们看到了34个问题，而不是之前广泛扫描中识别的29个问题，但我们的扫描时间是28分钟，而不是34秒。我们还发现了超过90页，而不是27页（其中一些是由于我们的用户输入），并且请求速率远低于默认值，因此保护了DVWA免受小规模**拒绝服务**（**DoS**）的影响，并且在任何可能到来的防御措施下保持低调。Arachni会一直保存扫描结果，直到空间用完或者我们告诉它删除结果，因此我们将始终有两者进行比较和对比。在实践中，我建议在风险可接受时运行单个目标扫描，并在工作的更隐秘阶段运行较小的子扫描。
- en: 'Here is a summary of these results:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这些结果的摘要：
- en: '| Â  | **LAMP profile** | **Default profile** |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| Â  | **LAMP配置文件** | **默认配置文件** |'
- en: '| Time to complete | 38 minutes | 36 seconds |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| 完成时间 | 38分钟 | 36秒 |'
- en: '| Pages found | 90 | 27 |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| 找到的页面 | 90 | 27 |'
- en: '| High severity | 3 | 0 |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 高严重性 | 3 | 0 |'
- en: '| Medium severity | 8 | 7 |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| 中等严重性 | 8 | 7 |'
- en: '| Low severity | 6 | 6 |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| 低严重性 | 6 | 6 |'
- en: '| Informational | 17 | 16 |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| 信息性 | 17 | 16 |'
- en: '| Total issues | 34 | 29 |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| 总问题 | 34 | 29 |'
- en: 'The reports can be exported in a variety of useful formats with HTML, JSON,
    XML, Marshal, YAMR, and AFR available. As with all of them, the HTML reports are
    data-rich and near-presentation ready as in following figure:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 报告可以以多种有用的格式导出，包括HTML、JSON、XML、Marshal、YAMR和AFR。与所有其他报告一样，HTML报告数据丰富，几乎可以直接呈现，如下图所示：
- en: '![](img/B03918_04_14.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_04_14.png)'
- en: Arachni's report formats are production-ready and a great start on building
    your deliverables to the customer.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Arachni的报告格式已经准备就绪，是构建客户交付成果的绝佳起点。
- en: For the more technical customers, it is helpful to provide follow-up or immediate
    actions (see following figure) that they can take. Your value as a pen tester
    will be much greater if you not only identify problems, but also offer recommendations
    based on best practices that can help the customer's target network be remediated
    and made more secure.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更技术性的客户，提供后续或即时行动（见下图）是有帮助的。作为渗透测试人员，如果您不仅能够识别问题，还能够基于最佳实践提出建议，帮助客户的目标网络得到纠正并变得更加安全，那么您的价值将会更大。
- en: '![](img/B03918_04_15.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_04_15.png)'
- en: Detailed vulnerability information can help quickly educate the customer or
    set up the next phases.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 详细的漏洞信息可以帮助快速教育客户或设置下一阶段。
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: '* * *'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Effective penetration testing is contingent on many things, but the best results
    come with a well-educated set of scans that can both educate as well as prepare
    the table for the later phases of the test. As recent events and continuous headlines
    have demonstrated, there is a staggering number and variety of vectors available
    for attackers to leverage. The volume and importance of these potential holes
    demand comprehensive test suites that automate scans and help us quickly ascertain
    the risk exposure of a target. Almost as important is the ability to process the
    copious amounts of raw data and turn them around as actionable intelligence.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的渗透测试取决于许多因素，但最好的结果来自于一组经过良好教育的扫描，既可以教育又可以为测试的后期阶段做好准备。正如最近的事件和持续的头条新闻所证明的那样，攻击者可以利用的向量数量和种类令人震惊。这些潜在漏洞的数量和重要性要求全面的测试套件，可以自动化扫描，并帮助我们快速确定目标的风险暴露。几乎同样重要的是能够处理大量的原始数据，并将其转化为可操作的情报。
- en: Arachni is a fantastic tool when it comes to providing these scan, and as an
    added bonus, you can form the basis of our detailed reports or deliverables. Because
    Arachni is an open source and extensible product, it is well supported by the
    community and offers a Ruby framework, on which anyone can graft their own extensions
    or plugins. There are literally thousands of options in Arachni, but hopefully,
    our immersion in the profile builder offers some insight as to how to better employ
    Arachni and other complementary tools in your browser or nmap to scope out your
    target systems efficiently. The depth to which Arachni investigates a target's
    vulnerabilities allows it to uncover potential vectors in detail rivaling or exceeding
    many commercial alternatives.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Arachni在提供这些扫描方面是一个很棒的工具，作为额外的奖励，您可以构建我们详细报告或可交付成果的基础。因为Arachni是一个开源且可扩展的产品，它得到了社区的良好支持，并提供了一个Ruby框架，任何人都可以在其上添加自己的扩展或插件。Arachni有成千上万的选项，但希望我们在配置文件生成器中的深入研究能够为您提供一些关于如何更好地使用Arachni和其他辅助工具（如浏览器或nmap）来高效地勘察目标系统的见解。Arachni调查目标漏洞的深度使其能够详细地发现潜在的向量，这与许多商业替代品相媲美甚至超出了许多商业替代品。
- en: In this chapter, we discussed ways we could scale Arachni's deployment and tips
    for how to tailor scan profiles to reveal more and remain inconspicuous. We looked
    at how we could better profile our targets, custom craft our scanning behavior,
    and load and focus on the target's attributes gained from the Recon phase of the
    test. We also saw how these tweaks went a long way towards getting deeper page
    discovery and vulnerability identification. The reporting elements were also briefly
    discussed; if anything, this area is ripe with possibilities, and depending on
    your workflows your processes will greatly accelerate report generation and support
    long-term continuous improvement that we should all hope becomes standard in the
    SDLC.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了如何扩展Arachni的部署方式，以及如何调整扫描配置文件以揭示更多信息并保持低调的技巧。我们看了如何更好地对目标进行配置文件，定制扫描行为，并加载并专注于测试的Recon阶段获得的目标属性。我们还看到这些调整在深入页面发现和漏洞识别方面取得了长足的进展。报告元素也简要讨论了；如果有的话，这个领域充满了可能性，根据您的工作流程，您的流程将大大加速报告生成，并支持长期持续改进，我们都希望这成为SDLC中的标准。
- en: In the next chapter, we'll take a look at two more tools that overlap with Arachni
    but take the pen test further into the Kill Chain--**Burp Suite** and **OWASP
    ZAP**. These tools replicate some of Arachni's functions, but can also leverage
    what we have learned here to begin actually exploiting these holes and confirm
    the impact. After seeing what the DVWA has to worry about, I am sure we'll see
    some interesting results!
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍另外两个与Arachni有重叠的工具，但可以将渗透测试进一步延伸到Kill Chain--**Burp Suite**和**OWASP
    ZAP**。这些工具复制了Arachni的一些功能，但也可以利用我们在这里学到的知识来开始实际利用这些漏洞并确认影响。在看到DVWA需要担心什么之后，我相信我们会看到一些有趣的结果！
