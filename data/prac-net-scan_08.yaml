- en: Remote OS Detection
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 远程操作系统检测
- en: In this chapter, we will look at the techniques and methods that can be used
    to detect remote OSes. The vulnerabilities of operating systems are specific and
    inevitable. Consequently, it becomes important for network administrators to know
    about the operating system installed on all running hosts inside the network.
    For a small network, it might be easy to identify operating systems for all hosts.
    However, it becomes a  challenging job for large-scale cloud organizations to
    maintain a database where thousands of hosts are being deleted and created every
    minute and are therefore constantly changing.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍可以用来检测远程操作系统的技术和方法。操作系统的漏洞是特定且不可避免的。因此，网络管理员需要了解所有在网络中运行的主机上安装的操作系统。对于一个小型网络，可能很容易识别所有主机的操作系统。然而，对于大规模的云组织来说，维护一个数据库，其中每分钟都在删除和创建数千台主机，且这些主机不断变化，将变得非常具有挑战性。
- en: There are many scanning tools available on the market, but Nmap and Wireshark
    are the most popular and widely used tools. You should also have done some background
    reading in order to successfully use the Wireshark capture feature. In this chapter,
    we will use Nmap and Wireshark to run a scan and to capture packets. In the next
    chapter, we will discuss SSL, fundamental security and technical issues, along
    with the implementation for web-based services.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 市面上有许多扫描工具，但Nmap和Wireshark是最受欢迎和广泛使用的工具。为了成功使用Wireshark捕获功能，您应该已经做过一些背景阅读。在本章中，我们将使用Nmap和Wireshark进行扫描和捕获数据包。在下一章中，我们将讨论SSL、基本安全性和技术问题，以及基于Web服务的实现。
- en: 'In this chapter, you will learn about the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下内容：
- en: Reasons for OS detection
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统检测的原因
- en: Determining the vulnerability of target hosts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定目标主机的漏洞
- en: Tailoring exploits
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定制漏洞利用
- en: OS detection technique with Nmap
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Nmap进行操作系统检测技术
- en: TCP/IP fingerprinting methods supported by Nmap
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nmap支持的TCP/IP指纹识别方法
- en: Understanding an Nmap fingerprint
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Nmap指纹
- en: OS matching algorithms
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统匹配算法
- en: Reasons for OS detection
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作系统检测的原因
- en: 'Before we discuss the reasons for detecting an OS, let''s understand what an
    operating system actually is. An operating system is a set of programs compiled
    to manage multiple hardware resources associated with a computer, and designed
    to provide a resource platform pool to run other application programs:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论为什么要检测操作系统之前，让我们先理解一下操作系统到底是什么。操作系统是一组编译的程序，负责管理与计算机相关的多个硬件资源，并且设计用于提供资源平台池以运行其他应用程序：
- en: '![](Images/74af1728-75c2-4338-ac8c-86bbc7471aad.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/74af1728-75c2-4338-ac8c-86bbc7471aad.png)'
- en: 'The following are the most common operating systems available on the market:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是市场上最常见的操作系统：
- en: Linux
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux
- en: Windows
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows
- en: Red Hat
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Red Hat
- en: FreeBSD
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FreeBSD
- en: Solaris
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Solaris
- en: macOS
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS
- en: Let us now discuss why we need to detect an operating system. You can see what
    operating system is installed on your computer at the following, fun website: [http://whatsmyos.com/](http://whatsmyos.com/).
    As a system administrator, you will want to keep track of IT resources. In the
    same way, attackers will want to have access to your inventory. This will help
    them to find resources and launch attacks against vulnerabilities.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来讨论为什么我们需要检测操作系统。您可以在以下有趣的网站上查看计算机上安装的操作系统：[http://whatsmyos.com/](http://whatsmyos.com/)。作为系统管理员，您会希望跟踪IT资源。同样，攻击者也希望访问您的资源清单，这将帮助他们找到资源并针对漏洞发起攻击。
- en: Network operating system inventory – trace your infrastructure
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络操作系统清单 – 追踪您的基础设施
- en: As a system administrator, it is very important to know what is running on your
    network and there are multiple tools available for creating an inventory. An inventory
    can help you to determine operating system's end-of-life, licensing cost, budgeting,
    and patch management. Most importantly, it gives you the visibility and analysis
    of the OS running on your infrastructure. The only similarity between system administrators
    and attackers is that they both use a similar set of methods for fixing or exploiting
    a system. System administrators need to run a scan and fix problems before an
    attacker exploits any vulnerabilities found.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 作为系统管理员，了解网络中运行的内容非常重要，市面上有多种工具可以用来创建清单。清单可以帮助你确定操作系统的生命周期、许可费用、预算和补丁管理。最重要的是，它能为你提供基础设施上运行的操作系统的可视性和分析。系统管理员和攻击者之间唯一的相似之处在于，他们都使用类似的方法来修复或利用系统。系统管理员需要在攻击者利用任何漏洞之前，进行扫描并修复问题。
- en: Determining vulnerability of target hosts
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定目标主机的漏洞
- en: A vulnerability scan (often referred to as a network-based scan) can be done
    remotely. The method for running a scan directly on a host is named a host-based
    scan. Only determining the application version does not always help us to find
    vulnerabilities to crack the system. It is also very important to detect an OS
    version to combine results. From time to time, operating system updates are released,
    and they do patching for an application without even changing the application
    version. Finding a vulnerability with a remote scan is a bit difficult, as results
    might become false positive.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞扫描（通常称为基于网络的扫描）可以远程进行。直接在主机上运行扫描的方法称为主机扫描。仅仅确定应用程序版本并不总是有助于我们找到漏洞来攻破系统。检测操作系统版本同样非常重要，以便结合扫描结果。有时候，操作系统会发布更新，修补应用程序而不改变应用程序版本。通过远程扫描找到漏洞有点困难，因为结果可能会出现误报。
- en: Tailoring exploits
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定制利用攻击
- en: Buffer overflow is one of the most famous, powerful and frequently used attacks
    used to exploit applications. Buffer overflow attacks can provide attackers access
    to execute commands or customize shell codes in a system. Once you have access
    to a targeted machine, you could add accounts, access a command prompt, remotely
    control the GUI, and alter the system's configuration.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 缓冲区溢出是最著名、最强大且最常用的攻击之一，用来利用应用程序漏洞。缓冲区溢出攻击可以让攻击者获得执行命令或定制 shell 代码的权限。一旦你获得了对目标机器的访问权限，你可以添加账户、访问命令提示符、远程控制图形界面，并修改系统配置。
- en: When I say *buffer memory*, I am referring to **random-access memory** (**RAM**)
    used to hold data temporarily before it passes to a desired application. Every
    application on the system has a fixed size data buffer (memory allocated from
    a common pool). Attackers use techniques to fill a buffer with data until there
    is no buffer space left—this is known as **buffer overflow**. It is important
    to know or detect the actual operating system before you try to execute such scripts
    to exploit vulnerabilities. Use OS detection first, or you may end up sending
    Linux shellcode to a FreeBSD server.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当我说*缓冲区内存*时，我指的是用于暂时存储数据、在数据传递到目标应用程序之前的**随机存取存储器**（**RAM**）。系统中的每个应用程序都有一个固定大小的数据缓冲区（内存来自公共池）。攻击者使用技术将数据填充到缓冲区，直到缓冲区没有空间可用——这就是所谓的**缓冲区溢出**。在你尝试执行此类脚本以利用漏洞之前，了解或检测实际操作系统非常重要。首先使用操作系统检测，否则你可能会把
    Linux shellcode 发送到 FreeBSD 服务器。
- en: OS detection technique with Nmap
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Nmap 进行操作系统检测技术
- en: Before we talk about remote operating system detection, let's discuss what Nmap
    is and what it can do. I will also walk you through different flags and nobs that
    can be used with the Nmap tool in general.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论远程操作系统检测之前，让我们先了解一下 Nmap 是什么，以及它能做什么。我还会向你展示 Nmap 工具的一些不同标志和选项。
- en: Nmap tool
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nmap 工具
- en: '**Network Mapper** (**Nmap**) is a freely available open source tool for systems
    and network administrators, allowing them to perform tasks such as collecting enterprise
    network inventory, managing service upgrade schedules, basic security audits,
    and monitoring hosts or service up-time. Nmap is officially available for major
    computer operating system platforms such as Linux, Windows and macOS X.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络映射器**（**Nmap**）是一个免费开源工具，供系统和网络管理员使用，允许他们执行诸如收集企业网络清单、管理服务升级计划、基本安全审计以及监控主机或服务的正常运行时间等任务。Nmap
    在主要计算机操作系统平台上都有官方版本，如 Linux、Windows 和 macOS X。'
- en: 'Nmap binaries can be downloaded from [https://nmap.org/download.html](https://nmap.org/download.html).
    After successful installation, you can check the version simply by passing the
    `nmap -V` command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap 可执行文件可以从 [https://nmap.org/download.html](https://nmap.org/download.html)
    下载。安装成功后，你可以通过输入 `nmap -V` 命令来检查版本：
- en: '**Windows**: Output on Windows shows that the program currently installed is `Nmap
    version 7.60`:'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows**：Windows 上的输出显示当前安装的程序是 `Nmap version 7.60`：'
- en: '![](Images/0930ce8b-c18d-4911-897b-b4c87b8f4f08.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/0930ce8b-c18d-4911-897b-b4c87b8f4f08.png)'
- en: '**Linux**: Output on Linux shows that the program currently installed here
    is `Nmap version 6.40`:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linux**：Linux 上的输出显示当前安装的程序是 `Nmap version 6.40`：'
- en: '![](Images/64c732de-8d09-4fd2-ad9a-2a13b2ed7830.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/64c732de-8d09-4fd2-ad9a-2a13b2ed7830.png)'
- en: Nmap can be run using the Linux/Unix shell or Windows Command Prompt interface
    with root or administrator privileges.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap 可以通过 Linux/Unix shell 或 Windows 命令提示符界面在具有 root 或管理员权限的情况下运行。
- en: 'The base syntax of Nmap is as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap 的基本语法如下：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A very simple scan can be performed just by inputting the target IP address
    without any other options. The target field can be IPv4 `address:1.1.1.1`, IPv6
    `address :2001:db8:0:0:0:5678:d334:8af`, hostname `www.xyz.com`, IP address range
    `192.168.0.1` - `192.168.0.10` and **Classless Inter Domain Routing** (**CIDR**)
    block `10.10.10.0/24`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 只需输入目标 IP 地址而不使用其他选项，就可以执行非常简单的扫描。目标字段可以是 IPv4 地址 `address:1.1.1.1`，IPv6 地址
    `address :2001:db8:0:0:0:5678:d334:8af`，主机名 `www.xyz.com`，IP 地址范围 `192.168.0.1`
    - `192.168.0.10`，以及 **无类域间路由** (**CIDR**) 块 `10.10.10.0/24`：
- en: '**Example 1**: Scan with host name `myapptestsec.azurewebsites.net`. By default,
    it will scan for one thousand ports. A total of nine hundred and ninety-eight
    ports are filtered, and two ports are open, as shown in the screenshot.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**示例 1**：扫描主机名为 `myapptestsec.azurewebsites.net` 的主机。默认情况下，它将扫描一千个端口。共计九百九十八个端口被过滤，两个端口开放，如截图所示。'
- en: 'Please only mention the host name of the website:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请只提及网站的主机名：
- en: '![](Images/ae98ae44-e9fc-4606-9992-cc4d3b1e77f4.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ae98ae44-e9fc-4606-9992-cc4d3b1e77f4.png)'
- en: 'Please refer to the help option for further information:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考帮助选项以获取更多信息：
- en: '![](Images/88d3fc75-b4d3-4585-80c4-efd40fa7dbd3.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/88d3fc75-b4d3-4585-80c4-efd40fa7dbd3.png)'
- en: '**Example 2**: Scan host with specified port number. As we have seen, only
    one thousand ports are scanned by default, but Nmap gives you the flexibility
    to define port options by inputting  the flag `-p` and then options such as port
    range `-p <Port 1>-<Port 2>`, port list `-p <Port 1>,<Port 2>`, and more:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**示例 2**：扫描具有指定端口号的主机。如我们所见，默认情况下只扫描一千个端口，但 Nmap 让你可以通过输入 `-p` 标志并选择端口范围 `-p
    <Port 1>-<Port 2>`，端口列表 `-p <Port 1>,<Port 2>` 等，来定义端口选项：'
- en: '![](Images/1b88dcf1-19d3-4236-8389-e97cf2147f6a.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/1b88dcf1-19d3-4236-8389-e97cf2147f6a.png)'
- en: 'Please refer to help options for more information:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考帮助选项以获取更多信息：
- en: '![](Images/f9032eea-15b6-4470-b360-794d1ad629ef.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f9032eea-15b6-4470-b360-794d1ad629ef.png)'
- en: '**Example 3**:Scan hosts with different scan types. You have options to specify multiple
    flags to do different types of scan. This includes syn scan `-sS`, host discovery
    without a port scan `-sN`, Version scan `-sV`, TCP connect scan `-sT`, and OS
    detection `-O`:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**示例 3**：使用不同的扫描类型扫描主机。你可以指定多个标志来执行不同类型的扫描，包括 SYN 扫描 `-sS`、没有端口扫描的主机发现 `-sN`、版本扫描
    `-sV`、TCP 连接扫描 `-sT` 和操作系统检测 `-O`：'
- en: '![](Images/c4786677-ba08-4fbb-8151-bdf4ea1cb61b.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/c4786677-ba08-4fbb-8151-bdf4ea1cb61b.png)'
- en: 'Please refer to help options for more information:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考帮助选项以获取更多信息：
- en: '![](Images/6c998a25-c8c7-4643-9d02-217bd1368650.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/6c998a25-c8c7-4643-9d02-217bd1368650.png)'
- en: Operating system detection
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作系统检测
- en: OS detection is valuable information about a targeted host on what OS is currently
    installed and running. Let's discuss the logic behind discovery and how Nmap guesses
    the operating system.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统检测提供了关于目标主机上当前安装和运行的操作系统的宝贵信息。我们来讨论一下发现的逻辑，以及 Nmap 是如何猜测操作系统的。
- en: 'Nmap decodes attributes and patterns of response of standard probes, and sends
    it to a remote host to determine the operating system. This process is named TCP/IP
    fingerprinting. In the following output, you can see a number of services running
    on targeted host IP `23.100.21.174`. Folllowing is my Linux box. For testing purposes,
    I installed Apache2 web server. In the following screenshot, we can see that the
    default page appears when the browser is launched:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap 解码标准探针的属性和响应模式，并将其发送到远程主机以确定操作系统。这个过程被称为 TCP/IP 指纹识别。在以下输出中，您可以看到在目标主机
    IP `23.100.21.174` 上运行的多个服务。接下来是我的 Linux 主机。为了测试目的，我安装了 Apache2 Web 服务器。在以下屏幕截图中，我们可以看到启动浏览器时显示的默认页面：
- en: '![](Images/ebbb3d78-4a2d-4193-9bac-f99bf550cd19.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ebbb3d78-4a2d-4193-9bac-f99bf550cd19.png)'
- en: 'The best guess by Nmap (aggressive OS guess) is that there is an 86% chance
    that it is running on the Linux 3.5 or Linux 2.6.32 system, and this is true.
    If you find that this information is incorrect, the output can be uploaded to
    the Nmap portal. This will help Nmap developers to improve the next release:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap 的最佳猜测（激进的操作系统猜测）是，系统有 86% 的概率运行在 Linux 3.5 或 Linux 2.6.32 系统上，且这一猜测是准确的。如果您发现此信息不正确，可以将输出上传至
    Nmap 门户。这将帮助 Nmap 开发者改进下一个版本：
- en: '![](Images/a967e83d-8ae1-41e5-891d-7cc883b954e6.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/a967e83d-8ae1-41e5-891d-7cc883b954e6.png)'
- en: 'Using Nmap, let''s try to dig more for a service version. This scans for a
    slightly longer time, completing in 26.4 seconds as opposed to the 14.98 seconds
    it takes for a normal scan to complete. The output shows you different versions
    for different services running on this host machine, along with their software
    version:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Nmap，让我们尝试进一步挖掘服务版本。这次扫描花费的时间稍长，完成时间为 26.4 秒，而常规扫描完成的时间为 14.98 秒。输出显示了此主机上运行的不同服务的版本，以及它们的软件版本：
- en: '![](Images/a065255d-44a2-4951-9807-e7e746480603.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/a065255d-44a2-4951-9807-e7e746480603.png)'
- en: TCP/IP fingerprinting requires collecting detailed information about the target's
    IP stack. Here is the link for Nmap current database signatures [https://svn.nmap.org/nmap/nmap-os-db](https://svn.nmap.org/nmap/nmap-os-db).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: TCP/IP 指纹识别需要收集有关目标 IP 栈的详细信息。这里是 Nmap 当前数据库签名的链接 [https://svn.nmap.org/nmap/nmap-os-db](https://svn.nmap.org/nmap/nmap-os-db)。
- en: In the current Nmap database (6.47), there are 4485 fingerprints for 5009 CPE
    (platform) names, over 800 of which match various versions of MS-Windows, and
    over 1000 of which match various Linux systems (including appliances).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前的 Nmap 数据库（6.47）中，有 4485 个指纹，涵盖了 5009 个 CPE（平台）名称，其中超过 800 个与不同版本的 MS-Windows
    匹配，超过 1000 个与各种 Linux 系统（包括设备）匹配。
- en: TCP/IP fingerprinting methods supported by Nmap
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nmap 支持的 TCP/IP 指纹识别方法
- en: In the past, the banner grabbing method was used to detect remote operating
    systems. Telnet Connect used to be sent to a targeted system and the system would
    display a banner of the operating system running on a host. This was not a very
    accurate method as the system admin could also disable a banner or change the
    actual banner in order to misguide attackers.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，曾使用横幅抓取方法来检测远程操作系统。通过 Telnet 连接，发送到目标系统，系统会显示主机上运行的操作系统的横幅。这种方法不太准确，因为系统管理员也可以禁用横幅或更改实际的横幅，以误导攻击者。
- en: The new method of remote OS detection is to analyze the packet between the source
    and destination. This detection technique detects OS platforms and OS versions
    as well.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 新的远程操作系统检测方法是分析源和目标之间的数据包。此检测技术不仅可以检测操作系统平台，还可以检测操作系统版本。
- en: TCP/UDP/IP basic
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TCP/UDP/IP 基础
- en: To use an analogy, if IPs are a building address, service ports are flat numbers.
    Both TCP and UDP uses incoming and outgoing ports for data communication. Most
    IP-based services use standard ports (HTTP `TCP:80`, SMTP `TCP:25`, and DNS `TCP-UDP:53`).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 用一个类比来说，如果 IP 是建筑物地址，服务端口就是楼层号码。TCP 和 UDP 都使用进出端口进行数据通信。大多数基于 IP 的服务使用标准端口（HTTP
    `TCP:80`，SMTP `TCP:25`，DNS `TCP-UDP:53`）。
- en: 'TCP stack has six flag message types to complete a three-way handshake:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: TCP 栈有六种标志消息类型，用于完成三次握手：
- en: '![](Images/b2cf378a-f9f5-484e-9c06-4910fabc34f9.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b2cf378a-f9f5-484e-9c06-4910fabc34f9.png)'
- en: 'Here is a packet capture for one of the websites I opened on the web browser.
    This shows a three-way handshake with SYN-SYN-ACK. By default, Wireshark will
    keep track of all TCP sessions and convert all sequence numbers (SEQ numbers)
    and acknowledge numbers (ACK numbers) into relative numbers. This means that instead
    of displaying the real/absolute SEQ and ACK numbers in the display, Wireshark
    will display a SEQ and ACK number relative to the segment first seen in that conversation:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我在网页浏览器上打开的一个网站的数据包捕获。这显示了一个三次握手过程，包含SYN-SYN-ACK。默认情况下，Wireshark会跟踪所有TCP会话，并将所有的序列号（SEQ号）和确认号（ACK号）转换为相对数字。这意味着，Wireshark不会在显示中显示真实/绝对的SEQ和ACK号码，而是显示相对于会话中首次出现的段的SEQ和ACK号：
- en: '![](Images/98dc4abb-cfac-4499-8f04-61fe6282d58a.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/98dc4abb-cfac-4499-8f04-61fe6282d58a.png)'
- en: 'If you are interested in knowing the exact, real number of the TCP sequence,
    then you have to tune Wireshark settings via the unchecked box relative to the
    sequence number:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣了解TCP序列号的确切实数值，那么你需要通过勾选与序列号相关的未勾选框来调整Wireshark的设置：
- en: '![](Images/b4e06d00-ac17-4eab-856e-f8fa912658a9.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b4e06d00-ac17-4eab-856e-f8fa912658a9.png)'
- en: 'In Wireshark, I have extended the first connection to show that the SYN flag
    is set to `1` . Similarly, you can also extend the rest of the connection:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在Wireshark中，我已扩展第一个连接以显示SYN标志设置为`1`。同样，你也可以扩展其余连接：
- en: '![](Images/8047735c-7cb3-4bc5-aaff-c795fcbf897d.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/8047735c-7cb3-4bc5-aaff-c795fcbf897d.png)'
- en: '**SYN and SYN-ACK**: Any TCP communication will start with a SYN (synchronization)
    packet by setting the flag to `1`. A server responds with SYN-ACK, which means
    that a service port is listening and in an open state.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SYN 和 SYN-ACK**：任何TCP通信都将以一个SYN（同步）包开始，通过将标志位设置为`1`。服务器会响应一个SYN-ACK，这意味着服务端口正在监听并处于开放状态。'
- en: '**ACK**: After receiving SYN-ACK from a server, a client sends the final ACK
    to complete the three-way handshake by setting the ACK flag to `1`.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ACK**：在接收到服务器的SYN-ACK后，客户端会发送最终的ACK以通过设置ACK标志为`1`来完成三次握手。'
- en: '**RST**: The reset flag means that the server is not accepting the connection
    on the service port where the connection was made, or it is rejecting the request.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RST**：复位标志表示服务器不接受在服务端口上建立的连接，或者它拒绝请求。'
- en: '**FIN**: The finish flag is set to `1` when either party wants to finish the
    connection and this can be achieved by closing the browser.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FIN**：当任一方希望完成连接时，完成标志会被设置为`1`，这可以通过关闭浏览器来实现。'
- en: The following techniques are used to determine the OS on the system.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下技术用于确定系统上的操作系统。
- en: The FIN probe
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FIN探测
- en: 'A FIN packet is used to close the TCP connection between client and server.
    Closing the connection is more complex than creating a connection because both
    sides have to release its resources. In the following diagram, you can see that
    a FIN packet works with the last ACK:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: FIN包用于关闭客户端和服务器之间的TCP连接。关闭连接比建立连接要复杂，因为双方都必须释放各自的资源。在下图中，你可以看到FIN包与最后的ACK一起工作：
- en: '![](Images/64d23d7f-2dbc-4a6d-96df-02a95e426075.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/64d23d7f-2dbc-4a6d-96df-02a95e426075.png)'
- en: Tools like Nmap can generate a FIN packet without having the ACK set to `1`.
    An operating system might respond to this with RST, which gives you a clue about
    the remote operating system.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 像Nmap这样的工具可以生成一个没有设置ACK为`1`的FIN包。操作系统可能会对此做出RST响应，这能为你提供关于远程操作系统的线索。
- en: When designing their TCP/IP implementations, vendors have had different interpretations
    of RFC 793, Transmission Control Protocol. When a TCP segment arrives with the
    FIN flag set, but not the ACK flag, some implementations send RST segments, whereas
    others drop the packet without sending an RST.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计TCP/IP实现时，厂商对RFC 793《传输控制协议》有不同的解释。当一个TCP段到达并且FIN标志被设置，但ACK标志没有被设置时，一些实现会发送RST段，而其他一些实现则会丢弃该包而不发送RST。
- en: 'Let''s test a live environment with the packet capture. I tested FIN on my
    wireless router, and here are the results when I followed the TCP stream on Wireshark:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过数据包捕获来测试一个实际环境。我在我的无线路由器上测试了FIN，下面是我在Wireshark中跟踪TCP流时的结果：
- en: '![](Images/c66e8f2e-3284-44d1-a4bc-28edf82222bd.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/c66e8f2e-3284-44d1-a4bc-28edf82222bd.png)'
- en: 'Let''s test the result on Wireshark for port `80`, which I know is open on
    this box. You can see that only FIN was sent and no response was received from
    the router:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Wireshark中测试端口`80`的结果，我知道这个端口在此设备上是开放的。你可以看到，只发送了FIN包，并且路由器没有响应：
- en: '![](Images/7d44f811-024e-4fb2-a16c-a5216d11ee4e.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/7d44f811-024e-4fb2-a16c-a5216d11ee4e.png)'
- en: 'The FIN sent on port `443` gets a RST back because this port is not open on
    this router:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 发送到端口`443`的FIN会收到一个RST，因为该路由器上的此端口未打开：
- en: '![](Images/3955ca61-3c76-4b93-85b3-f8d50a6869da.png)FIN scans only work on
    Linux machines, and do not work on the latest version of Windows. CISCO, HP/UX,
    MVS, and IRIX send an RST packet in return.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/3955ca61-3c76-4b93-85b3-f8d50a6869da.png)FIN扫描只在Linux机器上有效，且在最新版本的Windows上无效。CISCO、HP/UX、MVS和IRIX会返回一个RST包。'
- en: TCP ISN sampling
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TCP ISN采样
- en: 'In a TCP stack sequence and acknowledgement, fields are 32 bit [4 Byte]. There
    are *2^32= 4,294,967,296* possibilities of generating a random number:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在TCP栈序列和确认中，字段为32位[4字节]。有*2^32= 4,294,967,296*种生成随机数的可能性：
- en: '![](Images/2448dab1-7dd5-45c0-8678-00fb0c0d9e1f.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/2448dab1-7dd5-45c0-8678-00fb0c0d9e1f.png)'
- en: Between a client and a server, when a client initiates a connection it generates
    an **initial sequence number** (**ISN**). Every OS uses its own algorithm to generate
    an ISN, and this is pretty much predictable.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端和服务器之间，当客户端发起连接时，它会生成一个**初始序列号**（**ISN**）。每个操作系统都有自己生成ISN的算法，而这个过程是可以预测的。
- en: Windows NT 4.0 generates predictable random TCP ISN, which allows remote attackers
    to perform spoofing and session hijacking.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Windows NT 4.0生成可预测的随机TCP ISN，这使得远程攻击者能够进行欺骗和会话劫持。
- en: Random ISNs are good because they make it far harder to predict sequence numbers.
    In Windows 2003 onward, the ISN algorithm has been modified so that ISNs increase
    in random increments using an RC4-based random number generator initialized with
    a 2048-bit random key upon system startup.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 随机ISN值很好，因为它们使得预测序列号变得更加困难。从Windows 2003开始，ISN算法已经被修改，使得ISN在系统启动时通过使用基于RC4的随机数生成器和一个2048位的随机密钥以随机增量方式增加。
- en: 'RFC 6528 states that Initial Sequence Number Generation Algorithm TCP should
    generate its ISN using the following expression:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: RFC 6528规定，初始序列号生成算法TCP应使用以下表达式来生成ISN：
- en: '*ISN = M + F(localip, localport, remoteip, remoteport, secretkey)*'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*ISN = M + F(localip, localport, remoteip, remoteport, secretkey)*'
- en: Here, *M* is the four microsecond timer, and *F()* is a **pseudo-random function**
    (**PRF**) of the connection-id. To summarize, ISN values are completely based
    on TCP/IP stack implementations and algorithms used by different operating systems,
    but there is always a common pattern that can help to predict operating systems.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，*M*是四微秒计时器，*F()*是连接ID的**伪随机函数**（**PRF**）。总的来说，ISN值完全基于不同操作系统所使用的TCP/IP栈实现和算法，但总有一个共同的模式可以帮助预测操作系统。
- en: TCP initial window
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TCP初始窗口
- en: This is to check the window size on returned packets, and this value seems to
    be pretty constant for different types of OS.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这是检查返回数据包上的窗口大小，这个值对于不同操作系统似乎相当恒定。
- en: Type of service
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务类型
- en: This field is usually set to zero for all OSs. Linux has the precedence bits
    of the ToS field set to 0xC0\. ICMP error messages are always sent with the default
    ToS value of 0x0000\. The ICMP echo reply message should have the same ToS value
    as the ICMP request message.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 该字段通常对所有操作系统设置为零。Linux将ToS字段的优先位设置为0xC0。ICMP错误消息总是使用默认的ToS值0x0000发送。ICMP回显应答消息应与ICMP请求消息具有相同的ToS值。
- en: Time-to-live (TTL)
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生存时间（TTL）
- en: 'Based on network traffic between hosts, it is possible to predict what OS is
    running on a system. Every operating system has its own unique way to implement
    TCP/IP stack. A very simple but effective passive method is to inspect the initial
    **time-to-live** (**TTL**) in the IP header:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 基于主机之间的网络流量，可以预测系统上运行的操作系统。每个操作系统都有自己独特的方式来实现TCP/IP栈。一种非常简单但有效的被动方法是检查IP头部中的初始**生存时间**（**TTL**）：
- en: '![](Images/3d6f8bc2-f387-46ce-af32-72d7ce230085.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/3d6f8bc2-f387-46ce-af32-72d7ce230085.png)'
- en: 'I am on a Windows 10 machine and tried the ICMP ping to host `4.2.2.2`. In
    the Wireshark capture attached below, you can see that the Windows 10 initial
    TTL value is `128`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我在一台Windows 10机器上，尝试了对主机`4.2.2.2`的ICMP ping。在下面附带的Wireshark抓包中，你可以看到Windows
    10的初始TTL值为`128`：
- en: '![](Images/e9232971-03d4-46b4-93aa-986ef08b7c4b.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e9232971-03d4-46b4-93aa-986ef08b7c4b.png)'
- en: 'I expended the first packet from Wireshark, which confirms TTL `128`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我从Wireshark中展开了第一个数据包，确认TTL为`128`：
- en: '![](Images/18e2d4cb-6a32-4a55-b110-0ed7e0a3588a.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/18e2d4cb-6a32-4a55-b110-0ed7e0a3588a.png)'
- en: 'Let''s try to expend the return packet, allowing us to see that the TTL value
    is `59`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试展开返回的数据包，让我们看到TTL值为`59`：
- en: '![](Images/fc1e8f30-44a7-4924-bda8-63072b560dcc.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/fc1e8f30-44a7-4924-bda8-63072b560dcc.png)'
- en: You can now take match results with Nmap remote OS detection. There is a 90%
    chance that this system will be running a Linux operating system. This should
    match our reference table. The linux TTL value 64 and value 59 means that this
    host is five hops away from me.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以通过 Nmap 远程操作系统检测获取匹配结果。系统运行 Linux 操作系统的概率为 90%。这应与我们的参考表匹配。Linux 的 TTL
    值为 64，值为 59 表示该主机距离我有五跳。
- en: Don't Fragment (DF) bit
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不分片（DF）位
- en: Some OSs set this bit, whereas others don't.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 一些操作系统会设置此位，而其他操作系统则不会。
- en: There are many more tools and scanning techniques that can be used to detect
    remote OS. Please read  [https://nmap.org/book/osdetect-methods.html](https://nmap.org/book/osdetect-methods.html) for
    more information.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他工具和扫描技术可以用来检测远程操作系统。请阅读 [https://nmap.org/book/osdetect-methods.html](https://nmap.org/book/osdetect-methods.html)
    以获取更多信息。
- en: Understanding an Nmap fingerprint
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Nmap 指纹
- en: OS fingerprinting is a technique used to determine the type and version of the
    operating system running on a remote host. The `nmap-os-db` data file contains
    thousands of signatures. However, different remote operating systems respond to
    Nmap's specialized OS detection probes. A fingerprint contains an operating system's
    name, its general classification, and response data pattern.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统指纹识别是一种用于确定远程主机上运行的操作系统类型和版本的技术。`nmap-os-db` 数据文件包含成千上万的签名。然而，不同的远程操作系统会对
    Nmap 的专用操作系统检测探针做出响应。一个指纹包含操作系统的名称、其一般分类以及响应数据模式。
- en: 'A typical fingerprint format appears as shown in the following figure. During
    detection probe, attributes and results are compared against the Nmap `os-db`
    OS database. A simple command can be used for OS detection with the flag `-O`:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的指纹格式如下图所示。在检测探针过程中，属性和结果会与 Nmap 的 `os-db` 操作系统数据库进行比较。可以使用简单的命令进行操作系统检测，使用的标志是
    `-O`：
- en: '[PRE1]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following screenshot is specific to the Cisco 2820 device and shows that
    a number of tests will be performed before Nmap declares that device as Cisco
    2820\. This Nmap database will have similar fingerprints for most known devices,
    and this keeps growing:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图特定于 Cisco 2820 设备，显示在 Nmap 确认该设备为 Cisco 2820 之前将执行多个测试。此 Nmap 数据库将为大多数已知设备提供类似的指纹，而且它不断增长：
- en: '![](Images/b7476368-58c5-4a8f-a02e-f511f89868d8.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b7476368-58c5-4a8f-a02e-f511f89868d8.png)'
- en: 'We can see the following terms in the above snapshot:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在上面的快照中看到以下术语：
- en: '**SEQ test**: SEQ test returns information regarding sequence analysis'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SEQ 测试**：SEQ 测试返回有关序列分析的信息'
- en: '**OPS test**: OPS test returns information regarding TCP options received for
    each of the 6 [01-06] probes'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OPS 测试**：OPS 测试返回每个 [01-06] 探针接收到的 TCP 选项信息'
- en: '**WIN test**: WIN test returns the TCP initial windows size information for
    each of the 6 [W1 -W6] probes'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WIN 测试**：WIN 测试返回每个 [W1 -W6] 探针的 TCP 初始窗口大小信息'
- en: '**ECN test**: ECN test returns explicit congestion notification response'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ECN 测试**：ECN 测试返回显式拥塞通知响应'
- en: '**T1 to T7 test**: These are TCP probes:'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**T1 至 T7 测试**：这些是 TCP 探针：'
- en: T1 is a SYN packet with a bunch of TCP options for opening the port
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: T1 是带有多个 TCP 选项用于打开端口的 SYN 包
- en: T2 is a NULL packet with options to open the port
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: T2 是带有打开端口选项的 NULL 包
- en: T3 is a SYN/FIN/URG/PSH packet with options to open the port
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: T3 是带有打开端口选项的 SYN/FIN/URG/PSH 包
- en: T4 is an ACK with options to open the port
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: T4 是带有打开端口选项的 ACK 包
- en: T5 is a SYN with options to close the port
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: T5 是带有关闭端口选项的 SYN 包
- en: T6 is an ACK with options to close the port
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: T6 是带有关闭端口选项的 ACK 包
- en: T7 is a FIN/PSH/URG with options to close the port
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: T7 是带有关闭端口选项的 FIN/PSH/URG 包
- en: '**PU** **test**: PU test is a UDP packet used to close a port'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PU 测试**：PU 测试是一个用于关闭端口的 UDP 包'
- en: OS matching algorithms
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作系统匹配算法
- en: Nmap's algorithm for detecting matches is a simple process which collects target
    fingerprints and tests it against every single reference fingerprint in `nmap-os-db`.
    After testing all the probes against a fingerprint, Nmap divides NumMatchPoints
    by possible points. The result of this is a confidence factor describing the probability
    that the subject fingerprint matches that particular reference fingerprint.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap 的匹配检测算法是一个简单的过程，它收集目标指纹并将其与 `nmap-os-db` 中的每个参考指纹进行测试。在对所有探针进行指纹测试后，Nmap
    会将 NumMatchPoints 除以可能的点数。这个结果是一个置信因子，描述了目标指纹与特定参考指纹匹配的概率。
- en: Defense against port scans
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 防御端口扫描
- en: So far, we have learned how to use port scanning techniques to discover and
    detect information about remote hosts. Let's try to understand that any services/hosts
    will be vulnerable to port scans, which are exposed to users through some sort
    of connectivity. This might include an enterprise WAN or the internet. Port scanning
    is also not classed as illegal activity unless information is used to exploit
    systems.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了如何使用端口扫描技术来发现和检测远程主机的信息。让我们尝试理解，任何服务/主机都会受到端口扫描的影响，这些主机通过某种方式与用户连接。可能包括企业
    WAN 或互联网。端口扫描也不被归类为非法活动，除非信息被用来利用系统漏洞。
- en: The amount of information that should be exposed to the outside world is down
    to the system administrator. Any IP scanning starts with an ICMP, and you can
    block all incoming ICMPs on an enterprise edge device. This will make Ping ineffective
    and will filter ICMP unreachable messages to block Traceroute as part of the first
    line of defense. But does this solve all of the problem? No, port scan works on
    TCP/UDP ports as well.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 应该暴露给外界的信息量取决于系统管理员。任何 IP 扫描都以 ICMP 开始，你可以在企业边缘设备上阻止所有传入的 ICMP。这将使 Ping 无效，并且会过滤
    ICMP 不可达消息，从而阻止 Traceroute，作为第一道防线。但这能解决所有问题吗？不能，端口扫描同样适用于 TCP/UDP 端口。
- en: Another way to limit information is to disable all unnecessary services on a
    system. Of course, you cannot block all services. For example, if you are running
    HTTPS services on a host, then only port `443` [HTTPS] should be exposed to the
    internet. One more simple method is to restrict services by source IP address.
    Scans from other IP addresses will then not detect them.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 限制信息的另一种方式是禁用系统中所有不必要的服务。当然，你不能封锁所有服务。例如，如果你在主机上运行 HTTPS 服务，那么只有端口 `443` [HTTPS]
    应该暴露到互联网。另一个简单的方法是通过源 IP 地址来限制服务。来自其他 IP 地址的扫描将无法发现这些服务。
- en: A final clever solution would be to configure policies on firewall/IPS/IDS for
    threat signature detection. Just like other applications, Nmap itself has its
    own signature.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 一个巧妙的最终解决方案是配置防火墙/IPS/IDS 上的策略进行威胁签名检测。就像其他应用程序一样，Nmap 本身也有自己的签名。
- en: Summary
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed the basics of TCP/IP and how its different attributes
    can be used for port scanning techniques as well as for remote OS detection. We
    also discussed how to operate an Nmap tool on different operating systems and
    how to carry out packet capture analysis using Wireshark. Good hackers know how
    to crack a system, but a great network administrator knows how to fend off those
    attacks.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了 TCP/IP 的基础知识，以及如何利用其不同的属性进行端口扫描技术和远程操作系统检测。我们还讨论了如何在不同操作系统上使用 Nmap
    工具，以及如何使用 Wireshark 进行数据包捕获分析。优秀的黑客知道如何破解系统，而伟大的网络管理员知道如何防范这些攻击。
- en: '"The best defense is a good offense"'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: “最好的防守是进攻”
- en: In the next chapter, we will discuss the fundamentals of SSL, why this is important
    for web-based applications, and what security considerations are required before
    we secure applications.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论 SSL 的基础知识，为什么它对于基于 Web 的应用程序至关重要，以及在保护应用程序之前需要考虑哪些安全事项。
- en: Questions
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Port scan is a part of:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 端口扫描是以下内容的一部分：
- en: Traceroute
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Traceroute
- en: Nmap
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Nmap
- en: Route
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 路由
- en: Ipconfig/all
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ipconfig/all
- en: What is the pattern of a TCP connection?
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TCP 连接的模式是什么？
- en: SYN-ACK
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: SYN-ACK
- en: SYN-ACK-FIN
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: SYN-ACK-FIN
- en: SYN-RST-ACK
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: SYN-RST-ACK
- en: SYN-SYN-ACK
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: SYN-SYN-ACK
- en: What is the most important activity in system hacking?
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 系统黑客中最重要的活动是什么？
- en: Information Gathering
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 信息收集
- en: Brute force attack for cracking a password
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 破解密码的暴力攻击
- en: DDoS attack
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: DDoS 攻击
- en: Vulnerability exploit
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 漏洞利用
- en: Further reading
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '[https://nmap.org](https://nmap.org)'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://nmap.org](https://nmap.org)'
