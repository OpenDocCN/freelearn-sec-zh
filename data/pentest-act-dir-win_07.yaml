- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Persistence on Domain Level
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 域级持久性
- en: During an offensive operation, adversaries need to maintain their access to
    the target environment. Various activities such as reboots and changing users’
    passwords can disrupt the operation’s flow. To overcome interruptions, there are
    techniques that allow us to achieve persistence. In this chapter, we will not
    cover host persistence techniques on Windows workstations and servers. Instead,
    we will focus our attention on domain-level persistence and techniques specific
    to domain controllers only. Our first topic is the most famous jewelry tickets
    (golden, silver, diamond, and sapphire). We will discuss the differences between
    them and demonstrate their practical usage with OpSec considerations. Other domain-level
    persistence topics, such as adding to a **SID History** attribute and an **AdminSDHolder**
    domain object ACL and DACL manipulation, and delegation privilege abuse, will
    be explained and illustrated with practical examples. We will close the domain-level
    persistence topic by covering **DCShadow** and Golden gMSA attacks. Domain controller
    persistence is mostly achieved by manipulating credentials via **Skeleton Key**
    attack, malicious **Security Support Provider** (**SSP**) registration, or access
    to a **Directory Services Restore Mode** (**DSRM**) hash. Lastly, we will explicate
    security descriptor manipulation for WMI, PS-Remoting and how to set up a registry
    backdoor to retrieve an NT hash of a computer, SAM, or cached AD credentials.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在进攻性操作中，对手需要保持对目标环境的访问。诸如重启和更改用户密码等活动可能会干扰操作流程。为了克服这些中断，有一些技术可以帮助我们实现持久性。在本章中，我们不会讨论Windows工作站和服务器上的主机持久性技术。相反，我们将专注于域级持久性以及特定于域控制器的技术。我们的第一个主题是最著名的票据（黄金票、银票、钻石票和蓝宝石票）。我们将讨论它们之间的区别，并展示它们在OpSec方面的实际应用。其他域级持久性主题，例如添加到**SID历史**属性和**AdminSDHolder**域对象的ACL和DACL操作、委托权限滥用，将通过实际例子进行讲解和演示。最后，我们将通过讨论**DCShadow**和Golden
    gMSA攻击来结束域级持久性话题。域控制器持久性主要通过操控凭证来实现，方法包括**Skeleton Key**攻击、恶意的**安全支持提供者**（**SSP**）注册或访问**目录服务恢复模式**（**DSRM**）哈希。最后，我们将阐述如何操作WMI、PS-Remoting的安全描述符，以及如何设置注册表后门来获取计算机的NT哈希、SAM或缓存的AD凭证。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主要内容：
- en: Domain persistence, in which we will cover forged tickets, a domain object’s
    ACL/attribute manipulation, a DCShadow attack, and a Golden gMSA attack
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 域持久性，我们将讨论伪造票据、域对象的ACL/属性操作、DCShadow攻击和Golden gMSA攻击
- en: Domain controller persistence, in which we will cover malicious SSP registration,
    Skeleton Key attack, dumping DSRM hash, a registry backdoor, and security descriptor
    manipulation (WMI and PS-Remoting)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 域控制器持久性，我们将讨论恶意的SSP注册、Skeleton Key攻击、DSRM哈希转储、注册表后门和安全描述符操作（WMI和PS-Remoting）
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, you will need to have the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将需要以下内容：
- en: VMware Workstation or Oracle VM VirtualBox with at least 16 GB of RAM, 8 CPU
    cores, and at least 55 GB of total space (more if you take snapshots)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VMware Workstation或Oracle VM VirtualBox，至少需要16GB的RAM、8个CPU核心和至少55GB的总空间（如果你要拍摄快照，需要更多空间）
- en: A Linux-based operating system is strongly recommended
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强烈建议使用基于Linux的操作系统
- en: Vagrant installed with a plugin for the corresponding virtualization platform
    and Ansible
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装了相应虚拟化平台插件和Ansible的Vagrant
- en: From the GOADv2 project, we will use **DC01**, **SRV01**, **DC03**, and **SRV03**
    virtual machines
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在GOADv2项目中，我们将使用**DC01**、**SRV01**、**DC03**和**SRV03**虚拟机
- en: Domain persistence
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 域持久性
- en: In this section, we will discuss various ways to achieve domain-level persistence.
    These techniques require high privileges equivalent to Domain Administrator. The
    most obvious way to achieve persistence in the target environment is to create
    and/or add compromised user or computer accounts to a highly privileged group.
    However, we will focus on more sophisticated techniques. Also, we will not discuss
    Group Policy abuse and targeted Kerberoasting from a persistence perspective,
    as the exploitation will be exactly the same as the examples from [*Chapter 6*](B18964_06.xhtml#_idTextAnchor119),
    only with a focus on privileged accounts. In the following techniques, we will
    rely either on privileged but rarely changed credential material (for example,
    the hash of a krbtgt account) or on attributes and ACL manipulations.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论实现域级持久性的各种方法。这些技术需要相当高的权限，等同于域管理员。实现目标环境中的持久性最直接的方法是创建和/或将被妥协的用户或计算机帐户添加到高权限组中。然而，我们将专注于更复杂的技术。此外，我们不会从持久性角度讨论组策略滥用和定向Kerberoasting，因为其利用方式与[*第6章*](B18964_06.xhtml#_idTextAnchor119)中的示例完全相同，只不过重点放在特权帐户上。在以下技术中，我们将依赖于特权但很少更改的凭证材料（例如，krbtgt帐户的哈希值）或属性和ACL操作。
- en: Forged tickets
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 伪造票证
- en: We will start our journey with forged tickets – the types, their creation, their
    usage, and OpSec recommendations on how to stay under the radar. One important
    theoretical concept to mention is the **Privileged Attribute Certificate** (**PAC**).
    The PAC is used in the Kerberos protocol to distribute user rights to services,
    such as a username, SID, and group membership. The PAC is a part of every ticket
    and is encrypted with either a **Key Distribution Center** (**KDC**) key or a
    service account key. When we say that a ticket is forged, we mean that we place
    arbitrary PAC content in it. The first type of forged ticket we will examine is
    the Silver Ticket.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从伪造票证开始我们的旅程——它们的类型、创建方法、使用方式以及如何保持低调的OpSec建议。一个重要的理论概念是**特权属性证书**（**PAC**）。PAC在Kerberos协议中用于将用户权限分配给服务，例如用户名、SID和组成员资格。PAC是每个票证的一部分，并使用**密钥分发中心**（**KDC**）的密钥或服务帐户密钥进行加密。当我们说票证是伪造的，我们指的是我们在其中放入任意的PAC内容。我们将首先探讨的伪造票证类型是银票。
- en: Note
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Great in-depth coverage of Golden and Silver Tickets can be found here: [https://en.hackndo.com/kerberos-silver-golden-tickets/](https://en.hackndo.com/kerberos-silver-golden-tickets/).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 关于金票和银票的深入详细介绍可以在这里找到：[https://en.hackndo.com/kerberos-silver-golden-tickets/](https://en.hackndo.com/kerberos-silver-golden-tickets/)。
- en: Silver Ticket
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 银票
- en: When a user needs access to a service, there are ST requests (**KRB_TGS_REQ**)
    and a reply (**KRB_TGS_REP**). The reply is encrypted with an NT hash of the account
    running the service. If an attacker has obtained the password or NT hash of the
    service account, it is possible to forge a PAC and, thus, the service ticket without
    interacting with the domain controller. Such a forged ticket is called a **Silver
    Ticket**. One small caveat about forging a PAC is that, ultimately, it will be
    double-signed with service account and krbtgt NT hashes. However, conveniently
    for us, with a service ticket, only the first signature is verified. It’s important
    to note that, since the Microsoft’s November 2021 patch, if a supplied username
    does not exist in the domain, the ticket will be rejected[1]. A Silver Ticket
    can be forged for a domain controller’s account as well.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户需要访问某项服务时，会发出ST请求（**KRB_TGS_REQ**）并得到回复（**KRB_TGS_REP**）。回复会使用运行该服务的帐户的NT哈希加密。如果攻击者获得了服务帐户的密码或NT哈希，就可以伪造一个PAC，从而伪造服务票证，而无需与域控制器交互。这样的伪造票证称为**银票**。关于伪造PAC的一个小注意事项是，最终它将由服务帐户和krbtgt的NT哈希双重签名。然而，方便的是，对于服务票证，只会验证第一个签名。需要注意的是，自2021年11月的微软补丁之后，如果提供的用户名在域中不存在，票证将被拒绝[1]。银票也可以伪造域控制器的帐户。
- en: 'As an example, let us forge a Silver Ticket for the **castelrock.sevenkingdoms.local**
    server on a non-domain-joined machine, as the standard user, **lord.varys**. We
    will use Rubeus to create a ticket for user **robert.baratheon** (it can be any
    existing domain user), for the CIFS service on **castelrock**, with the AES256
    key of the **castelrock$** account:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，让我们在一台非域加入的机器上，以标准用户**lord.varys**身份，为**castelrock.sevenkingdoms.local**服务器伪造一个银票。我们将使用Rubeus为用户**robert.baratheon**（它可以是任何现有的域用户）创建一个票证，针对**castelrock**上的CIFS服务，使用**castelrock$**帐户的AES256密钥：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Rubeus has successfully injected the ticket:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Rubeus已经成功注入了票证：
- en: '![Figure 7.1 – No access to the CIFS service before injecting the ticket](image/B18964_07_01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – 在注入票证之前无法访问 CIFS 服务](image/B18964_07_01.jpg)'
- en: Figure 7.1 – No access to the CIFS service before injecting the ticket
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – 在注入票证之前无法访问 CIFS 服务
- en: 'After injecting the ticket, access to the CIFS service on **castelrock** is
    granted:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 注入票证后，**castelrock** 上的 CIFS 服务可以访问：
- en: '![Figure 7.2 – The Silver Ticket provides access for lord.varys](image/B18964_07_02.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.2 – Silver Ticket 为 lord.varys 提供访问权限](image/B18964_07_02.jpg)'
- en: Figure 7.2 – The Silver Ticket provides access for lord.varys
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – Silver Ticket 为 lord.varys 提供访问权限
- en: 'Detecting a Silver Ticket is a challenging task. It is stealthier than a Golden
    Ticket as the domain controller is not involved, and the service account NT hash
    is easier to obtain. The blue team would need to pull logs from servers and examine
    the event ID **4769** for a possible encryption downgrade (if RC4 is used instead
    of AES256). Windows logon/logoff events with IDs **4624** and **4647** can also
    provide information about the username, source IP address, and user’s SID. If
    we enable an audit for **Success** in the audit logon policy, event ID **4627**
    will show the group membership information of the logged-on user. The following
    is an example of the logon event ID **4624**:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 检测 Silver Ticket 是一项具有挑战性的任务。它比 Golden Ticket 更隐蔽，因为域控制器不参与其中，而且服务账户的 NT 哈希更容易获取。蓝队需要从服务器中提取日志并检查事件
    ID **4769**，以查看是否存在可能的加密降级（如果使用 RC4 而不是 AES256）。Windows 登录/注销事件 ID **4624** 和
    **4647** 也可以提供有关用户名、源 IP 地址和用户 SID 的信息。如果我们在审计登录策略中启用了 **成功** 审计日志，事件 ID **4627**
    将显示已登录用户的组成员信息。以下是事件 ID **4624** 的登录事件示例：
- en: '![Figure 7.3 – The missing username and domain, together with the IP address
    of the attacking machine](image/B18964_07_03.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.3 – 缺失的用户名和域名，以及攻击机器的 IP 地址](image/B18964_07_03.jpg)'
- en: Figure 7.3 – The missing username and domain, together with the IP address of
    the attacking machine
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – 缺失的用户名和域名，以及攻击机器的 IP 地址
- en: Lastly, we may need to use the **/nofullpacsig** flag in Rubeus to exclude **FullPacChecksum**,
    which was introduced as a patch for **CVE-2022-37967**. This patch introduces
    checks for missing or invalid PAC signatures. If the patch has been applied, the
    registry key **KrbtgtFullPacSignature** will be created on a domain controller.
    At the time of writing, Microsoft is due to enforce the signature by October 2023\.
    There is a stealthier alternative to this ticket, which has a valid PAC and is
    based on **S4U2self** abuse. Let’s look at it next.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可能需要在 Rubeus 中使用 **/nofullpacsig** 标志来排除 **FullPacChecksum**，该补丁是为 **CVE-2022-37967**
    引入的。这个补丁引入了对丢失或无效 PAC 签名的检查。如果补丁已应用，注册表键 **KrbtgtFullPacSignature** 将在域控制器上创建。撰写本文时，Microsoft
    预计将于 2023 年 10 月强制执行签名。这个票证有一个更加隐蔽的替代方案，它具有有效的 PAC 并基于 **S4U2self** 滥用。接下来我们来看一下。
- en: A stealthy alternative to a Silver Ticket (S4U2self abuse)
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Silver Ticket 的隐蔽替代方案（S4U2self 滥用）
- en: The **S4U2self** Kerberos extension allows a service to obtain a service ticket
    on behalf of a user to itself. It’s important to mention that **S4U2self** can
    be used by any account on a machine, including virtual or network service accounts,
    but on a network, it acts as the machine itself. **S4U2self** can help with local
    privilege escalation in a scenario when an attacker has compromised the virtual
    or network service account on a machine, such as AppPool or MSSQL, and then requests
    a service ticket for any user to themselves. Interestingly, users can even be
    from the **Protected Users** group or have the **Account is sensitive and cannot
    be delegated** **UserAccountControl** property enabled.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**S4U2self** Kerberos 扩展允许服务代表用户获取自己的服务票证。需要特别提到的是，**S4U2self** 可以由机器上的任何帐户使用，包括虚拟帐户或网络服务帐户，但在网络上，它充当的是机器本身。**S4U2self**
    可以帮助在攻击者已经妥协机器上的虚拟或网络服务帐户（如 AppPool 或 MSSQL）后进行本地权限提升，之后请求任何用户的服务票证给自己。值得注意的是，用户甚至可以来自
    **Protected Users** 组，或者启用了 **账户为敏感且无法委派** 的 **UserAccountControl** 属性。'
- en: Note
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'An example of local privilege escalation and original research by *Charlie
    Clark* can be found here: [https://exploit.ph/revisiting-delegate-2-thyself.xhtml](https://exploit.ph/revisiting-delegate-2-thyself.xhtml).'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 本地权限提升的示例和 *Charlie Clark* 的原创研究可以在此查看：[https://exploit.ph/revisiting-delegate-2-thyself.xhtml](https://exploit.ph/revisiting-delegate-2-thyself.xhtml)。
- en: Now, we will demonstrate an alternative scenario to a Silver Ticket. I will
    use a non-domain-joined machine and the machine account NT hash of **castelrock**.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将展示与银票证不同的替代场景。我将使用一台非域加入机器，并使用**castelrock**机器账户的NT哈希。
- en: 'There are two steps in this attack – obtaining a TGT for the machine account
    and then using it for the **S4U2self** request to get a service ticket. In the
    first step, the attacker can request the machine’s account TGT in the usual way
    if the computer’s account hash is known. The following command will request a
    TGT:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 该攻击分为两个步骤——首先获取机器账户的TGT，然后使用该TGT进行**S4U2self**请求以获取服务票证。在第一步中，攻击者可以通过已知计算机账户哈希的方式正常请求机器账户的TGT。以下命令将请求TGT：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The result of the TGT request is shown in the following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: TGT请求的结果如下面的截图所示：
- en: '![Figure 7.4 – Obtaining the machine account’s TGT](image/B18964_07_04.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.4 – 获取机器账户的TGT](image/B18964_07_04.jpg)'
- en: Figure 7.4 – Obtaining the machine account’s TGT
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4 – 获取机器账户的TGT
- en: 'Then, an attacker can request a service ticket. Note the **/self** flag in
    order to impersonate protected users:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，攻击者可以请求服务票证。请注意**/self**标志，以便模拟受保护用户：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The result is shown in the following screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下面的截图所示：
- en: '![Figure 7.5 – Successful S42Uself abuse](image/B18964_07_05.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.5 – 成功的S42Uself滥用](image/B18964_07_05.jpg)'
- en: Figure 7.5 – Successful S42Uself abuse
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5 – 成功的S42Uself滥用
- en: The main advantage of **S4U2self** abuse over a Silver Ticket is that the service
    ticket has a valid PAC, not a forged one. Now, let us discuss a more dominant
    type of forged ticket – a **Golden Ticket**.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 相较于银票证，**S4U2self**滥用的主要优势在于服务票证具有有效的PAC，而不是伪造的。现在，让我们讨论一种更为强大的伪造票证类型——**黄金票证**。
- en: Golden Ticket
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 黄金票证
- en: A Golden Ticket is, in essence, a forged TGT ticket. With such a TGT ticket,
    we can request any service ticket as any user in the domain. There is a great
    analogy to understand better the difference between Silver and Golden tickets.
    A Silver Ticket is like a visa. You can enter the country (one server) and travel
    everywhere (request access to every service on this server). A Golden Ticket is
    like a passport. You can apply for a visa (access to the service) to every country
    in the world (any resource in the domain).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 黄金票证本质上是伪造的TGT票证。凭借这样的TGT票证，我们可以作为域中的任何用户请求任何服务票证。理解银票证和黄金票证之间差异的一个很好的比喻是：银票证就像签证，你可以进入一个国家（一个服务器）并在其中旅行（请求访问该服务器上的所有服务）；而黄金票证就像护照，你可以申请每个国家的签证（访问该域中任何资源）。
- en: To forge a TGT, we need to know the **krbtgt** account NT hash, which can only
    be obtained with domain administrator or replication privileges in the domain.
    Microsoft tried to stop Golden Ticket forgery in the patch (**KB5008380**) for
    **CVE-2021-42287**. The idea was to introduce a new data structure in the PAC
    containing the user’s SID. However, if the correct SID is supplied, an attack
    will be successful anyway[2]. There are two switches in Rubeus, **/oldpac** and
    **/newpac**, that can be used to forge the ticket, depending on the patch installation
    and enforcement status.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要伪造TGT，我们需要知道**krbtgt**账户的NT哈希，该信息只能通过域管理员或域中的复制权限获取。微软尝试通过针对**CVE-2021-42287**的补丁（**KB5008380**）来阻止黄金票证伪造。该补丁的思路是引入一个新的数据结构，在PAC中包含用户的SID。然而，如果提供了正确的SID，攻击仍然会成功[2]。Rubeus中有两个开关，**/oldpac**和**/newpac**，可以根据补丁安装和强制执行状态来伪造票证。
- en: 'We will create a Golden Ticket to access the **kingslanding.sevenkingdoms.local**
    filesystem from the **castelrock.sevenkingdoms.local** machine, authenticated
    as low-privileged user **jaime.lannister**:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个黄金票证，用于从**castelrock.sevenkingdoms.local**机器访问**kingslanding.sevenkingdoms.local**文件系统，使用低权限用户**jaime.lannister**进行身份验证：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Before injecting a Golden Ticket, we have the following screen:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在注入黄金票证之前，我们看到如下屏幕：
- en: '![Figure 7.6 – The Golden Ticket forgery process](image/B18964_07_06.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.6 – 黄金票证伪造过程](image/B18964_07_06.jpg)'
- en: Figure 7.6 – The Golden Ticket forgery process
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6 – 黄金票证伪造过程
- en: 'After injecting a Golden Ticket, we get the following screen:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 注入黄金票证后，我们看到如下屏幕：
- en: '![Figure 7.7 – Access to the domain controller with a Golden Ticket](image/B18964_07_07.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.7 – 使用黄金票证访问域控制器](image/B18964_07_07.jpg)'
- en: Figure 7.7 – Access to the domain controller with a Golden Ticket
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.7 – 使用黄金票证访问域控制器
- en: Detecting a Golden Ticket is difficult. We need to examine logs with a particular
    focus on the ticket encryption type (a possible downgrade) and its lifetime. The
    ticket encryption type can be found in event ID **4769**. Non-default lifetime
    values in a TGT are a good indicator – for example, by default, in the domain
    ticket lifetime is 10 hours, but Mimikatz creates a ticket with a 10-year lifetime.
    If there are missing events with the ID **4768** (**A Kerberos authentication
    Ticket Requested (TGT)**) for events with the ID **4769** (**A Kerberos service
    ticket**), it is a clear sign of a Golden Ticket being used. Do we have anything
    stealthier and better? Yes, we do! **Diamond Tickets** will be covered next.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 检测黄金票证是困难的。我们需要检查日志，特别关注票证加密类型（可能的降级）及其生命周期。票证加密类型可以在事件 ID **4769** 中找到。TGT
    中非默认的生命周期值是一个很好的指示——例如，默认情况下，域票证的生命周期是 10 小时，但 Mimikatz 创建了一个生命周期为 10 年的票证。如果事件
    ID **4769**（**Kerberos 服务票证**）缺少对应的事件 ID **4768**（**请求 Kerberos 身份验证票证（TGT）**），那就是使用黄金票证的明确迹象。我们有更隐蔽、更好的方式吗？有的！接下来会介绍
    **钻石票证**。
- en: Diamond Ticket
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 钻石票证
- en: The idea of a Diamond Ticket evolved from a Diamond PAC attack and aims to be
    stealthier than Golden or Silver Tickets. The dance starts with a TGT being requested
    as a low-privileged user to obtain a legitimate ticket, and then the PAC is decrypted
    and modified, the signature is recalculated, and the ticket is encrypted again.
    Remember to use only already-existing domain users; otherwise, the ticket will
    be rejected in an up-to-date environment.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 钻石票证的概念源自钻石 PAC 攻击，旨在比黄金票证或银票证更隐蔽。攻击的过程从低权限用户请求 TGT 开始，以获取一个合法的票证，然后解密并修改 PAC，重新计算签名，再次加密票证。记住，只能使用已经存在的域用户，否则在最新环境下票证将被拒绝。
- en: Note
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The original research about Diamond Ticket can be found here: [https://www.semperis.com/blog/a-diamond-ticket-in-the-ruff/](https://www.semperis.com/blog/a-diamond-ticket-in-the-ruff/).'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 关于钻石票证的原始研究可以在这里找到：[https://www.semperis.com/blog/a-diamond-ticket-in-the-ruff/](https://www.semperis.com/blog/a-diamond-ticket-in-the-ruff/)。
- en: 'Let us replicate the attack. For the first step, we will request a TGT for
    a standard user (**jaime.lannister**). Choosing the **/tgtdeleg** flag, we can
    use the Kerberos GSS-API to obtain a TGT for the current user without knowing
    the password. **/krbkey** is the AES key for the krbtgt account, **/ticketuserid**
    is the **Relative Identifier** (**RID**) of **/ticketuser**, and **/groups** specifies
    the group for the ticket. To perform these actions, we will use Rubeus with the
    following arguments:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们复现这个攻击。第一步，我们将为标准用户（**jaime.lannister**）请求一个 TGT。选择 **/tgtdeleg** 标志后，我们可以使用
    Kerberos GSS-API 获取当前用户的 TGT，而无需知道密码。**/krbkey** 是 krbtgt 账户的 AES 密钥，**/ticketuserid**
    是 **/ticketuser** 的 **相对标识符**（**RID**），**/groups** 指定了票证的组。为了执行这些操作，我们将使用 Rubeus
    和以下参数：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'An example of the user’s TGT request without the **/tgtdeleg** flag is shown
    in the following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了用户请求 TGT 时未使用 **/tgtdeleg** 标志的例子：
- en: '![Figure 7.8 – A low-privileged user-requested TGT](image/B18964_07_08.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.8 – 低权限用户请求的 TGT](image/B18964_07_08.jpg)'
- en: Figure 7.8 – A low-privileged user-requested TGT
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.8 – 低权限用户请求的 TGT
- en: 'PAC modification happens on the fly, as shown in the following screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: PAC 修改会实时发生，如下图所示：
- en: '![Figure 7.9 – The modified TGT](image/B18964_07_09.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.9 – 修改后的 TGT](image/B18964_07_09.jpg)'
- en: Figure 7.9 – The modified TGT
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.9 – 修改后的 TGT
- en: 'Using the forged TGT, we can request a service ticket for the CIFS service
    on the domain controller with the following command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用伪造的 TGT，我们可以通过以下命令请求域控制器上的 CIFS 服务票证：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The ST request is shown here:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下面展示了 ST 请求：
- en: '![Figure 7.10 – Asking for ST](image/B18964_07_10.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.10 – 请求 ST](image/B18964_07_10.jpg)'
- en: Figure 7.10 – Asking for ST
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.10 – 请求 ST
- en: 'And we have access to the CIFS service running on the domain controller:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以访问在域控制器上运行的 CIFS 服务：
- en: '![Figure 7.11 – CIFS service access](image/B18964_07_11.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.11 – CIFS 服务访问](image/B18964_07_11.jpg)'
- en: Figure 7.11 – CIFS service access
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.11 – CIFS 服务访问
- en: Detecting a Diamond Ticket is an even more non-trivial task, which requires
    ticket examination and checking that the values in the ticket match the default
    values in the domain. Event ID **4627** can show any extra group membership added
    to the low-privileged user. Discrepancies between the PAC’s value and the actual
    user’s privileges in AD can also be used to spot malicious activity. Lastly, we
    will talk about Sapphire Tickets, which are an even stealthier version of a Diamond
    Ticket.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 检测 Diamond Ticket 是更为复杂的任务，需要检查票证内容并确保票证中的值与域中的默认值匹配。事件 ID **4627** 可显示低权限用户添加的任何额外组成员。AD
    中 PAC 的值与实际用户权限之间的差异也可用于发现恶意活动。最后，我们将讨论 Sapphire Tickets，这是 Diamond Ticket 的更隐秘版本。
- en: Sapphire Ticket
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Sapphire Ticket
- en: 'A Sapphire Ticket is an enhanced version of a Diamond Ticket that allows an
    attacker to mimic legitimate activity to an even greater extent. The idea is that
    instead of PAC modification in a legitimate TGT, as we did with the Diamond Ticket,
    we will copy a legitimate PAC of another high-privileged user through the **S4U2self+u2u**
    trick and replace it in the original TGT. In this scenario, we will avoid discrepancies
    between the PAC and effective user privileges. The following command uses the
    **-impersonate** flag that will create a Sapphire Ticket:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Sapphire Ticket（蓝宝石票证）是 Diamond Ticket（钻石票证）的增强版本，允许攻击者更大程度地模仿合法活动。其核心思想是，不像使用
    Diamond Ticket 时修改合法 TGT 中的 PAC，我们将通过 **S4U2self+u2u** 技巧复制另一高权限用户的合法 PAC，并替换到原始
    TGT 中。在这种情况下，我们将避免 PAC 和有效用户权限之间的差异。以下命令使用 **-impersonate** 标志将创建一个 Sapphire Ticket：
- en: '[PRE6]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: At the time of writing, Sapphire Ticket functionality is not available in Rubeus
    or Impacket. Pull request **1411** was sent to Impacket, but it is still not merged
    with main branch.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Rubeus 或 Impacket 中尚不支持 Sapphire Ticket 功能。Pull request **1411** 已发送给
    Impacket，但尚未合并到主分支中。
- en: Detection of a Sapphire Ticket is still possible by the domain controller’s
    log analysis. The sequence of **4768** and **4769** events can be used to detect
    the immediate usage of the newly forged ticket. In the logs two different **Account
    Name** values will appear for the TGT and ST requests originating from the same
    **Client Address**, however, username in ST has never been logged into that computer.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 通过域控制器的日志分析仍然可以检测到 Sapphire Ticket。通过 **4768** 和 **4769** 事件序列可以检测到新伪造票证的即时使用。在日志中，来自相同
    **Client Address** 的 TGT 和 ST 请求将出现两个不同的 **Account Name** 值，然而 ST 中的用户名从未登录到该计算机。
- en: Note
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Diamond and Sapphire Tickets detection approaches are available at [https://pgj11.com/posts/Diamond-And-Sapphire-Tickets/](https://pgj11.com/posts/Diamond-And-Sapphire-Tickets/)
    and [https://unit42.paloaltonetworks.com/next-gen-kerberos-attacks/](https://unit42.paloaltonetworks.com/next-gen-kerberos-attacks/).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在 [https://pgj11.com/posts/Diamond-And-Sapphire-Tickets/](https://pgj11.com/posts/Diamond-And-Sapphire-Tickets/)
    和 [https://unit42.paloaltonetworks.com/next-gen-kerberos-attacks/](https://unit42.paloaltonetworks.com/next-gen-kerberos-attacks/)
    查找 Diamond 和 Sapphire Tickets 的检测方法。
- en: Promising research about detecting forged tickets was presented by *Charlie
    Clark* and *Andrew Schwartz*. The idea is to decrypt the ticket and perform a
    detailed analysis of the ticket times and checksums. The blue team can create
    a custom Kerberos ticketing policy, enforce the **logonHours** attribute for users,
    and verify that checksums are correctly signed by the krbtgt key[3]. They also
    released a tool that automates most of these checks, called **WonkaVision**. You
    can download it from GitHub[4].
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*Charlie Clark* 和 *Andrew Schwartz* 提出了关于检测伪造票证的有希望的研究。其思路是解密票证并对票证的时间和校验和进行详细分析。蓝队可以创建自定义的
    Kerberos 票证策略，为用户强制执行 **logonHours** 属性，并验证 krbtgt 密钥正确签名的校验和。他们还发布了一个名为 **WonkaVision**
    的工具，自动化了大部分这些检查。你可以从 GitHub[4] 上下载该工具。'
- en: The next section will focus on achieving persistence via manipulation via the
    ACL or attributes of different domain objects.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分将重点介绍通过对不同域对象的 ACL 或属性进行操作来实现持久性。
- en: A domain object’s ACL and attribute manipulations
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 域对象的 ACL 和属性操作
- en: In this section, we will cover techniques to achieve persistence via ACL and
    attribute manipulation on various domain objects. Typical ACL manipulation targets
    are **AdminSDHolder** and domain objects. Attribute alteration attacks will aim
    for **SIDHistory**, userAccountControl, SPN, and delegation attributes.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将介绍如何通过对各种域对象的 ACL 和属性进行操作来实现持久性。典型的 ACL 操作目标包括 **AdminSDHolder** 和域对象。属性更改攻击将瞄准
    **SIDHistory**、userAccountControl、SPN 和委派属性。
- en: AdminSDHolder
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AdminSDHolder
- en: The AdminSDHolder domain object in AD was introduced by Microsoft to prevent
    ACL modification of high-privileged accounts and groups.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft 在 AD 中引入了 AdminSDHolder 域对象，以防止高权限账户和组的 ACL 被修改。
- en: Note
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'A default list of protected objects can be found here: [https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/plan/security-best-practices/appendix-c--protected-accounts-and-groups-in-active-directory](https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/plan/security-best-practices/appendix-c--protected-accounts-and-groups-in-active-directory).'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在此处找到默认的受保护对象列表：[https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/plan/security-best-practices/appendix-c--protected-accounts-and-groups-in-active-directory](https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/plan/security-best-practices/appendix-c--protected-accounts-and-groups-in-active-directory)。
- en: To manually find accounts and groups that are part of AdminSDHolder, we can
    search for the **adminCount** attribute and check that it is set to **1** in their
    properties. The idea is that the AdminSDHolder object provides a preset security
    permission template that the Security Descriptor Propagator process applies every
    60 minutes, protecting accounts and groups.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 若要手动查找属于 AdminSDHolder 的账户和组，我们可以搜索 **adminCount** 属性，并检查其属性中是否设置为 **1**。其思路是，AdminSDHolder
    对象提供一个预设的安全权限模板，Security Descriptor Propagator 进程每 60 分钟应用一次，保护账户和组。
- en: '*Sean Metcalf* discovered this technique. With domain administrator rights,
    an attacker can add an arbitrary user account to the AdminSDHolder ACL. After
    propagation, the user account will have the **GenericAll** right over privileged
    groups and accounts in the domain. PowerView makes the exploitation trivial:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '*Sean Metcalf* 发现了这一技术。通过域管理员权限，攻击者可以将任意用户账户添加到 AdminSDHolder 的 ACL 中。传播后，该用户账户将对域中所有特权组和账户拥有
    **GenericAll** 权限。PowerView 使得该漏洞的利用变得非常简单：'
- en: '[PRE7]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In 60 minutes, we can see that our user account was added to the AdminSDHolder
    DACL:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在 60 分钟后，我们可以看到我们的用户账户被添加到 AdminSDHolder DACL 中：
- en: '[PRE8]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The attack is illustrated in the following screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击过程如以下截图所示：
- en: '![Figure 7.12 – jaime.lannister was added to the DACL of the AdminSDHolder
    domain object](image/B18964_07_12.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.12 – jaime.lannister 被添加到 AdminSDHolder 域对象的 DACL 中](image/B18964_07_12.jpg)'
- en: Figure 7.12 – jaime.lannister was added to the DACL of the AdminSDHolder domain
    object
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.12 – jaime.lannister 被添加到 AdminSDHolder 域对象的 DACL 中
- en: 'When necessary, the attacker will log in as **jaime.lannister** and add himself
    to the **domain** **admins** group:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 必要时，攻击者将以 **jaime.lannister** 身份登录，并将自己添加到 **domain** **admins** 组中：
- en: '[PRE9]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The result can be observed in the following screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 结果可以在以下截图中看到：
- en: '![Figure 7.13 – The jaime.lannister user account was added to the Domain Admins
    group](image/B18964_07_13.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.13 – jaime.lannister 用户账户被添加到 Domain Admins 组](image/B18964_07_13.jpg)'
- en: Figure 7.13 – The jaime.lannister user account was added to the Domain Admins
    group
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.13 – jaime.lannister 用户账户被添加到 Domain Admins 组
- en: There are two ways to detect this technique. We can review the ACL of the AdminSDHolder
    object on a regular basis to ensure that no alterations have been made, and we
    can monitor users and groups with **adminCount** = **1**. Now, we will discuss
    how to add privileges to the domain object itself.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以检测这种技术。我们可以定期查看 AdminSDHolder 对象的 ACL，以确保没有任何更改，并且可以监控 **adminCount**
    = **1** 的用户和组。现在，我们将讨论如何向域对象本身添加权限。
- en: Domain
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 域
- en: 'With domain administrator privileges, we can grant to any user under our control
    **DCSync** privileges. As a result, a low-privileged user will be able to retrieve
    hashes for all users in the domain. The PowerView command to add DCSync privileges
    is shown here:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 通过域管理员权限，我们可以为任何受我们控制的用户授予 **DCSync** 权限。结果，低权限用户将能够提取域中所有用户的哈希值。添加 DCSync 权限的
    PowerView 命令如下所示：
- en: '[PRE10]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, we return to our low-privileged user and run the following Mimikatz command:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们返回到低权限用户并运行以下 Mimikatz 命令：
- en: '[PRE11]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The result of the successful DCSync attack is shown here:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的 DCSync 攻击结果如图所示：
- en: '![Figure 7.14 – Add DCSync privileges to the user and extract hashes](image/B18964_07_14.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.14 – 为用户添加 DCSync 权限并提取哈希值](image/B18964_07_14.jpg)'
- en: Figure 7.14 – Add DCSync privileges to the user and extract hashes
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.14 – 为用户添加 DCSync 权限并提取哈希值
- en: DCSync attack detection was covered earlier in [*Chapter 4*](B18964_04.xhtml#_idTextAnchor061).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: DCSync 攻击检测在 [*第 4 章*](B18964_04.xhtml#_idTextAnchor061) 中已有介绍。
- en: Now, we are move on to domain object attribute manipulation. We will start with
    our old friend – SID History.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们进入域对象属性操作部分。我们将从我们熟悉的老朋友——SID 历史开始。
- en: SID History
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SID 历史
- en: We discussed SID History in detail in [*Chapter 5*](B18964_05.xhtml#_idTextAnchor093)
    when we covered lateral movement between forests. Surprisingly, SID History also
    works for SIDs from the same domain, meaning that if we add a privileged SID in
    the SID History attribute, a regular user will effectively become a domain administrator.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第 5 章*](B18964_05.xhtml#_idTextAnchor093)中详细讨论了 SID 历史，当时我们讲解了跨森林的横向移动。令人惊讶的是，SID
    历史也适用于来自同一域的 SID，这意味着如果我们将特权 SID 添加到 SID 历史属性中，普通用户实际上将成为域管理员。
- en: 'Before Windows Server 2016, an attacker could use Mimikatz to add SID History:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows Server 2016 之前，攻击者可以使用 Mimikatz 添加 SID 历史：
- en: '[PRE12]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'However, the **sid::patch** command in Windows Server 2016 has stopped this
    attack from working and displays the following error when executed:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Windows Server 2016 中的 **sid::patch** 命令阻止了此攻击的执行，并在执行时显示以下错误：
- en: '![Figure 7.15 – An error while adding SID History via Mimikatz](image/B18964_07_15.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.15 – 通过 Mimikatz 添加 SID 历史时出现错误](image/B18964_07_15.jpg)'
- en: Figure 7.15 – An error while adding SID History via Mimikatz
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.15 – 通过 Mimikatz 添加 SID 历史时出现错误
- en: 'The only known way to directly add SID History on modern domain controllers
    is described here[5]. It involves the installation of the DSInternals PowerShell
    module on a domain controller and an NTDS service restart:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 直接在现代域控制器上添加 SID 历史的唯一已知方法在这里描述[5]。它涉及在域控制器上安装 DSInternals PowerShell 模块并重启
    NTDS 服务：
- en: '[PRE13]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As a result, the user **lord.varys** has a domain administrator SID added to
    his history, as shown in the following screenshot:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，用户 **lord.varys** 的 SID 历史中已添加了域管理员 SID，如下图所示：
- en: '![Figure 7.16 – SID History was added to the lord.varys user](image/B18964_07_16.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.16 – SID 历史已添加到 lord.varys 用户](image/B18964_07_16.jpg)'
- en: Figure 7.16 – SID History was added to the lord.varys user
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.16 – SID 历史已添加到 lord.varys 用户
- en: 'To detect this technique, we can configure auditing for events ID **4765**
    (**SID History was added to an account**) and **4766** (**An attempt to add SID
    History to an account failed**) on the domain controller. Another way is to use
    PowerShell to discover users with a matching domain SID in their SID History:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要检测这一技术，我们可以在域控制器上配置事件 ID **4765**（**SID 历史已添加到帐户**）和 **4766**（**尝试将 SID 历史添加到帐户失败**）的审计。另一种方法是使用
    PowerShell 查找 SID 历史中与域 SID 匹配的用户：
- en: '[PRE14]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Our persistence trick was successfully detected, as shown in the following
    screenshot:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的持久化技巧已成功被检测，如下图所示：
- en: '![Figure 7.17 – A user with suspicious SID History detected](image/B18964_07_17.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.17 – 检测到具有可疑 SID 历史的用户](image/B18964_07_17.jpg)'
- en: Figure 7.17 – A user with suspicious SID History detected
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.17 – 检测到具有可疑 SID 历史的用户
- en: The upcoming technique is similar to this one, but now, we will change the computer’s
    attribute to become a domain controller.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的技术与此类似，但我们现在将更改计算机的属性，使其成为域控制器。
- en: Server (Un)Trust Account
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 服务器（不）信任帐户
- en: 'The main concept of this attack is to set the **UF_SERVER_TRUST_ACCOUNT** bit
    in the userAccountControl attribute of a computer. Then, AD must set the **primaryGroupId**
    attribute of this computer to the RID of the domain controllers’ group. To perform
    such actions, we need domain administrator privileges. This can be done manually
    or with the help of a PowerShell script developed by *Stealthbits*[6]. The script
    has three functions. The first command will create a computer object and grant
    the **Authenticated Users** group **Ds-Install-Replica** and **Write** permissions
    on it:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 该攻击的主要概念是将 **UF_SERVER_TRUST_ACCOUNT** 位设置在计算机的 userAccountControl 属性中。然后，AD
    必须将此计算机的 **primaryGroupId** 属性设置为域控制器组的 RID。为了执行这些操作，我们需要域管理员权限。可以手动完成此操作，也可以借助
    *Stealthbits*[6] 开发的 PowerShell 脚本。该脚本有三个功能。第一个命令将创建一个计算机对象，并授予 **Authenticated
    Users** 组 **Ds-Install-Replica** 和 **Write** 权限：
- en: '[PRE15]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'When an adversary needs to regain domain dominance, then a second function
    has to be invoked. It will set the userAccountControl value to **8192** (**SERVER_TRUST_ACCOUNT**),
    use Mimikatz to execute a pass-the-hash attack as a computer account, and finally,
    perform DCSync:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当攻击者需要恢复对域的控制时，则必须调用第二个功能。它会将 userAccountControl 值设置为 **8192**（**SERVER_TRUST_ACCOUNT**），使用
    Mimikatz 执行计算机帐户的 pass-the-hash 攻击，并最终执行 DCSync：
- en: '[PRE16]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The third function is for cleanup:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个功能用于清理：
- en: '[PRE17]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'A full attack chain execution is shown in the following screenshot:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了完整的攻击链执行：
- en: '![Figure 7.18 – A server trust account attack](image/B18964_07_18.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.18 – 服务器信任帐户攻击](image/B18964_07_18.jpg)'
- en: Figure 7.18 – A server trust account attack
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.18 – 服务器信任帐户攻击
- en: This attack creates quite a significant foothold, starting from computer account
    creation and unusual ACLs on this account, going further with pass-the-hash lateral
    movement, and finally, a DCSync attack. Later, we will explain the most dangerous
    user privilege that you may never have heard of.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 该攻击为攻击者创建了相当重要的立足点，从计算机账户的创建和该账户上不寻常的ACL开始，进一步通过传递哈希进行横向移动，最后进行DCSync攻击。稍后我们将解释你可能从未听说过的最危险的用户权限。
- en: SeEnableDelegationPrivilege
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SeEnableDelegationPrivilege
- en: The main idea here is to control an object with the **SeEnableDelegationPrivilege**
    user right, and if it has **GenericAll** or **GenericWrite** permissions over
    any user or computer in the domain, the attacker will achieve domain persistence.
    Surprisingly, the **GenericAll** permission is not enough to modify the delegation
    settings of the account, which is why the **SeEnableDelegationPrivilege** right
    is required. By default, this privilege is applicable only to a domain controller
    itself.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的主要思想是控制一个具有**SeEnableDelegationPrivilege**用户权限的对象，如果该对象对域中任何用户或计算机拥有**GenericAll**或**GenericWrite**权限，攻击者将实现域持久性。令人惊讶的是，**GenericAll**权限不足以修改账户的委派设置，这就是为什么需要**SeEnableDelegationPrivilege**权限的原因。默认情况下，这一权限仅适用于域控制器本身。
- en: Note
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'This technique was discovered by *harmj0y* and is well described here: [https://blog.harmj0y.net/activedirectory/the-most-dangerous-user-right-you-probably-have-never-heard-of/](https://blog.harmj0y.net/activedirectory/the-most-dangerous-user-right-you-probably-have-never-heard-of/).'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这个技术是由*harmj0y*发现的，并且在此有详细描述：[https://blog.harmj0y.net/activedirectory/the-most-dangerous-user-right-you-probably-have-never-heard-of/](https://blog.harmj0y.net/activedirectory/the-most-dangerous-user-right-you-probably-have-never-heard-of/)。
- en: As the first step, we must grant this right to our backdoor user by editing
    the **Default Domain Controllers** policy, located in **\\sevenkingdoms.local\sysvol\sevenkingdoms.local\Policies\{6AC1786C-016F-11D2-945F-00C04fB984F9}\MACHINE\Microsoft\Windows
    NT\SecEdit\GptTmpl.inf**. Then, we abuse our **GenericAll** or **GenericWrite**
    permissions over the victim user to set the **msDS-AllowedToDelegateTo** value
    to point to our target service. **GenericWrite** will require the knowledge of
    the victim’s secret during exploitation, and **GenericAll** will allow us to change
    the password. As a last step, we abuse the constrained delegation in the same
    way we did during lateral movement. To prepare our lab for the attack demonstration,
    I will grant the **tywin.lannister** user account the **GenericAll** right on
    the **renly.baratheon** account via the ADSI edit, in the same way we did in the
    previous chapter.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须通过编辑**默认域控制器**策略来授予后门用户此权限，策略文件位置为**\\sevenkingdoms.local\sysvol\sevenkingdoms.local\Policies\{6AC1786C-016F-11D2-945F-00C04fB984F9}\MACHINE\Microsoft\Windows
    NT\SecEdit\GptTmpl.inf**。然后，我们利用对受害者用户的**GenericAll**或**GenericWrite**权限，将**msDS-AllowedToDelegateTo**值设置为指向我们的目标服务。**GenericWrite**在利用过程中需要知道受害者的密码，而**GenericAll**则允许我们更改密码。最后，我们通过与横向移动时相同的方式滥用受限委派。为了准备攻击演示实验室，我将通过ADSI编辑器将**tywin.lannister**用户账户授予**GenericAll**权限，赋予**renly.baratheon**账户，方法与上一章相同。
- en: 'As a domain administrator, the attacker can manually add **tywin.lannister**
    to the aforementioned Group Policy. The following PowerView commands will confirm
    that all the prerequisites are fulfilled:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 作为域管理员，攻击者可以手动将**tywin.lannister**添加到上述组策略中。以下PowerView命令将确认所有先决条件已满足：
- en: '[PRE18]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The result is in the following screenshot:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 结果见以下截图：
- en: '![Figure 7.19 – The tywin.lannister user has all the necessary rights for the
    attack](image/B18964_07_19.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.19 – tywin.lannister 用户具备执行攻击所需的所有权限](image/B18964_07_19.jpg)'
- en: Figure 7.19 – The tywin.lannister user has all the necessary rights for the
    attack
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.19 – tywin.lannister 用户具备执行攻击所需的所有权限
- en: 'Now, we set the **msDS-AllowedToDelegateTo** property and the userAccountControl
    flag of the **renly.baratheon** user account with the following commands:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们使用以下命令设置**renly.baratheon**用户账户的**msDS-AllowedToDelegateTo**属性和userAccountControl标志：
- en: '[PRE19]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Successful execution of the preceding commands can be seen in the following
    screenshot:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 成功执行上述命令的结果可以在以下截图中看到：
- en: '![Figure 7.20 – Successfully set required user attributes](image/B18964_07_20.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.20 – 成功设置所需的用户属性](image/B18964_07_20.jpg)'
- en: Figure 7.20 – Successfully set required user attributes
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.20 – 成功设置所需的用户属性
- en: As a last step, we will abuse constrained delegation in the same way we did
    in [*Chapter 5*](B18964_05.xhtml#_idTextAnchor093).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将像在[*第5章*](B18964_05.xhtml#_idTextAnchor093)中一样滥用受限委派。
- en: From a defense perspective, such user privileges must be monitored alongside
    changes in GPOs. The final backdooring technique will also rely on delegation,
    but this time, it is RBCD on the krbtgt account.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 从防御角度来看，必须监视此类用户权限以及GPO的更改。最终的后门技术也将依赖委派，但这次是在krbtgt账户上的RBCD。
- en: Delegation on krbtgt
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: krbtgt上的委派
- en: 'The idea behind this technique is to abuse RBCD on the krbtgt account. With
    built-in domain administrator group privileges, an attacker can set the **msDS-AllowedToActOnBehalfOfOtherIdentity**
    attribute of the krbtgt account. The adversary will be able to obtain a service
    ticket for the krbtgt service on behalf of any user. Effectively, it is a TGT
    of the impersonated user. This trick won’t work for members of the **Protected
    Users** group and accounts with the **Account is sensitive and cannot be delegated**
    flag enabled. The attacker will set up the backdoor by creating or using an existing
    computer account and, with the help of the AD Module, configure the **msDS-AllowedToActOnBehalfOfOtherIdentity**
    attribute of the krbtgt account:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术的理念是滥用krbtgt账户上的RBCD。借助内置的域管理员组权限，攻击者可以设置krbtgt账户的**msDS-AllowedToActOnBehalfOfOtherIdentity**属性。对于**Protected
    Users**组的成员和启用了**Account is sensitive and cannot be delegated**标志的账户，这个技巧不起作用。攻击者将通过创建或使用现有计算机账户来设置后门，并借助AD模块配置krbtgt账户的**msDS-AllowedToActOnBehalfOfOtherIdentity**属性：
- en: '[PRE20]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The result of the preceding commands can be seen in the following screenshot:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 前述命令的结果可以在以下截图中看到：
- en: '![Figure 7.21 – A successfully set msDS-AllowedToActOnBehalfOfOtherIdentity
    attribute of krbtgt](image/B18964_07_21.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图7.21 – 成功设置krbtgt的msDS-AllowedToActOnBehalfOfOtherIdentity属性](image/B18964_07_21.jpg)'
- en: Figure 7.21 – A successfully set msDS-AllowedToActOnBehalfOfOtherIdentity attribute
    of krbtgt
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.21 – 成功设置krbtgt的msDS-AllowedToActOnBehalfOfOtherIdentity属性
- en: 'To utilize the backdoor as a low-privileged user, the attacker requests a service
    ticket for the krbtgt service and performs a DCSync attack, as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 要作为低权限用户利用后门，攻击者请求krbtgt服务的服务票据，并执行DCSync攻击，步骤如下：
- en: '[PRE21]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The result of the preceding command execution is shown in the following screenshot:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 前述命令执行的结果如下截图所示：
- en: '![Figure 7.22 – A DCSync attack as a result of delegation on the krbtgt account](image/B18964_07_22.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图7.22 – 由于krbtgt账户上的委派而导致的DCSync攻击](image/B18964_07_22.jpg)'
- en: Figure 7.22 – A DCSync attack as a result of delegation on the krbtgt account
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.22 – 由于krbtgt账户上的委派而导致的DCSync攻击
- en: From a defensive perspective, the only way to detect this technique is to monitor
    changes to the krbtgt account attributes. Now that we are done with attributes
    and ACL modifications, we explain a rogue domain controller attack.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 从防御角度来看，检测这种技术的唯一方法是监视krbtgt账户属性的更改。现在我们已经完成了属性和ACL修改，我们将解释一个恶意域控制器攻击。
- en: DCShadow
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DCShadow
- en: A DCShadow attack allows you to create a fake domain controller and push changes
    to AD objects. Beware that pushing data using replication can brick your domain.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: DCShadow攻击允许您创建一个伪造的域控制器并推送更改到AD对象。请注意，使用复制推送数据可能会破坏您的域。
- en: Note
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This attack was presented by *Vincent Le Toux* and *Benjamin Delpy* ([https://www.dcshadow.com/](https://www.dcshadow.com/))
    in 2018.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这种攻击是由*Vincent Le Toux*和*Benjamin Delpy*（[https://www.dcshadow.com/](https://www.dcshadow.com/)）在2018年提出的。
- en: 'DCShadow requires domain administrator privileges to replicate changes and
    **SYSTEM** privileges on a compromised host, allowing you to implement fake domain
    controller functionality. The attack steps described by Le Toux and Delpy are
    as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: DCShadow需要域管理员权限来复制更改，并需要在受损主机上具有**SYSTEM**权限，从而可以实现伪造域控制器功能。Le Toux和Delpy描述的攻击步骤如下：
- en: Register the domain controller by creating two objects in the **CN=Configuration**
    partition, and alter the SPN of the computer used.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在**CN=Configuration**分区中创建两个对象注册域控制器，并更改所使用计算机的SPN。
- en: Push the data by triggering **DrsReplicaAdd**, KCC, or other internal AD events.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过触发**DrsReplicaAdd**、KCC或其他内部AD事件来推送数据。
- en: Remove the object previously created to demote the domain controller.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除先前创建的对象以降级域控制器。
- en: 'Our attack plan is the following: we will add the privileged SID of **daenerys.targaryen**,
    who is a domain administrator, to the SIDHistory attribute of the low-privileged
    **viserys.targaryen** user account. On **meereen.essos.local**, we logged in as
    **daenerys.targaryen**, who has domain administrator privileges in the **essos.local**
    domain. We have to run the following Mimikatz commands as **SYSTEM**:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的攻击计划如下：我们将**daenerys.targaryen**（域管理员）的特权SID添加到低权限的**viserys.targaryen**用户账户的SIDHistory属性中。在**meereen.essos.local**上，我们以**daenerys.targaryen**身份登录，他在**essos.local**域中拥有域管理员权限。我们必须以**SYSTEM**身份运行以下Mimikatz命令：
- en: '[PRE22]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The result of the execution is shown in the following screenshot:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 执行结果如以下截图所示：
- en: '![Figure 7.23 – DCShadow adds the SIDHistory attribute](image/B18964_07_23.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.23 – DCShadow添加SIDHistory属性](image/B18964_07_23.jpg)'
- en: Figure 7.23 – DCShadow adds the SIDHistory attribute
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.23 – DCShadow添加SIDHistory属性
- en: 'The following Mimikatz commands should be run with the domain administrator
    privileges:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 以下Mimikatz命令应使用域管理员权限执行：
- en: '[PRE23]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Attribute replication is shown in the following screenshot:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 属性复制如以下截图所示：
- en: '![Figure 7.24 – DCShadow replicates the SIDHistory attribute on the domain
    controller](image/B18964_07_24.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.24 – DCShadow在域控制器上复制SIDHistory属性](image/B18964_07_24.jpg)'
- en: Figure 7.24 – DCShadow replicates the SIDHistory attribute on the domain controller
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.24 – DCShadow在域控制器上复制SIDHistory属性
- en: 'As a result, **viserys.targaryen** has the **SIDHistory** attribute added and
    now has access to the domain controller:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是，**viserys.targaryen**已添加**SIDHistory**属性，并且现在可以访问域控制器：
- en: '![Figure 7.25 – DCShadow results in a privileged SID added to viserys.targaryen](image/B18964_07_25.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.25 – DCShadow将特权SID添加到viserys.targaryen](image/B18964_07_25.jpg)'
- en: Figure 7.25 – DCShadow results in a privileged SID added to viserys.targaryen
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.25 – DCShadow将特权SID添加到viserys.targaryen
- en: 'Detection can be done by network traffic monitoring or correlating events from
    a domain controller. The blue team can monitor incoming replication traffic with
    certain API calls that didn’t originate from the domain controller. In the domain
    controller’s security log, defenders can examine the series of events with the
    ID **4662**, with a sequence of **CreateChild**, **Control Access**, and **Delete**
    accessed in a short period of time. An example of a logged malicious event is
    as follows:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 检测可以通过网络流量监控或通过与域控制器的事件相关联来完成。蓝队可以通过监控来自非域控制器的特定API调用来检测传入的复制流量。在域控制器的安全日志中，防御人员可以检查ID为**4662**的一系列事件，通常包含**CreateChild**、**Control
    Access**和**Delete**，这些操作在短时间内被访问。以下是记录的恶意事件示例：
- en: '![Figure 7.26 – Rogue domain controller object creation](image/B18964_07_26.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.26 – 恶意域控制器对象创建](image/B18964_07_26.jpg)'
- en: Figure 7.26 – Rogue domain controller object creation
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.26 – 恶意域控制器对象创建
- en: Another option to achieve persistence is to set the minimum permissions required
    for DCShadow on an AD object, with the help of a script from *Nishang*[7].
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种实现持久化的方式是通过使用来自*Nishang*[7]的脚本，在AD对象上设置DCShadow所需的最小权限。
- en: Our last domain-level persistence technique, called the Golden gMSA attack,
    allows a privileged attacker to compute the gMSA’s password in the domain and
    forest offline.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最后一个域级持久化技术，即Golden gMSA攻击，允许特权攻击者离线计算域和林中的gMSA密码。
- en: Golden gMSA
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Golden gMSA
- en: Let us recall that gMSA is used for automatic password rotation on service accounts
    to mitigate attacks such as Kerberoasting. We evaluated the security of this solution
    in [*Chapter 4*](B18964_04.xhtml#_idTextAnchor061). The Golden gMSA attack was
    first presented by *Yuval Gordon* from a company called Semperis. The idea is
    that an attacker with the ability to dump a **Key Distribution Service** (**KDS**)
    root key with additional attributes can compute gMSA’s password offline.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下，gMSA用于服务账户的自动密码轮换，以缓解诸如Kerberoasting等攻击。我们在[*第4章*](B18964_04.xhtml#_idTextAnchor061)中评估了这一解决方案的安全性。Golden
    gMSA攻击最初由*Yuval Gordon*提出，他来自一家名为Semperis的公司。攻击的核心思想是，攻击者如果能够获取包含附加属性的**密钥分发服务**（**KDS**）根密钥，就可以离线计算gMSA的密码。
- en: Note
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The original research can be found here: [https://www.semperis.com/blog/golden-gmsa-attack/](https://www.semperis.com/blog/golden-gmsa-attack/).'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 原始研究可以在此处找到：[https://www.semperis.com/blog/golden-gmsa-attack/](https://www.semperis.com/blog/golden-gmsa-attack/)。
- en: 'Using the **GoldenGMSA**[8] tool, an adversary can calculate the gMSA password
    offline because it is derived from the KDS root key and several other attributes.
    An adversary needs to run three commands to obtain the password in the **base64**
    format. The first command will list all the available gMSAs, the second will dump
    the corresponding KDS root key and other attributes, and the third will compute
    the gMSA password using the output of the first two commands:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**GoldenGMSA**[8]工具，攻击者可以离线计算 gMSA 密码，因为它是由 KDS 根密钥和其他几个属性衍生出来的。攻击者需要运行三条命令来获取**base64**格式的密码。第一条命令列出所有可用的
    gMSA，第二条命令转储相应的 KDS 根密钥和其他属性，第三条命令使用前两条命令的输出计算 gMSA 密码：
- en: '[PRE24]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The successful Golden gMSA attack is demonstrated here:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的黄金 gMSA 攻击在这里演示：
- en: '![Figure 7.27 – Retrieving a gMSA password using a Golden gMSA attack](image/B18964_07_27.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.27 – 使用黄金 gMSA 攻击检索 gMSA 密码](image/B18964_07_27.jpg)'
- en: Figure 7.27 – Retrieving a gMSA password using a Golden gMSA attack
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.27 – 使用黄金 gMSA 攻击检索 gMSA 密码
- en: It’s important to mention that there is only one KDS root key; however, all
    other values to calculate gMSA are different, meaning that every password needs
    to be dumped separately.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 需要提到的是，只有一个 KDS 根密钥；然而，计算 gMSA 的所有其他值是不同的，这意味着每个密码需要单独转储。
- en: From a defensive point of view, additional auditing must be enabled to detect
    KDS root key dumping attempts.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 从防御角度来看，必须启用额外的审计功能以检测 KDS 根密钥转储尝试。
- en: This section about domain persistence focused on domain-level dominance. However,
    there are other ways to backdoor AD by abusing different authentication mechanisms
    and permissions on the domain controller itself.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 本节关于域持久性集中在域级别的控制。然而，还有其他方法可以通过滥用不同的认证机制和域控制器上的权限来进行 AD 后门攻击。
- en: Domain controller persistence
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 域控制器持久性
- en: The domain controller in a Windows environment remains one of the key objectives
    for malicious actors during their campaigns. If an adversary has compromised the
    domain controller and established persistence, it is possible to regain domain-wide
    administrative privileges in a matter of minutes. Techniques in this section utilize
    credential manipulation and authentication mechanism alteration. At the end of
    this section, we will explain the concept of security descriptors and how attackers
    can modify them to maintain privileged access in an environment.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 环境中，域控制器始终是恶意行为者在其攻击过程中关注的关键目标之一。如果攻击者已经入侵了域控制器并建立了持久性，那么他们有可能在几分钟内重新获得整个域的管理员权限。本节中的技术利用了凭据操作和认证机制的改变。在本节末，我们将解释安全描述符的概念，以及攻击者如何修改它们来维持在环境中的特权访问。
- en: Skeleton Key
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 骨架密钥
- en: A Skeleton Key attack is a persistence method on a domain controller that sets
    a master password in the domain, allowing an adversary to authenticate as any
    domain user. However, to avoid early detection, an installed backdoor module allows
    users to continue to log in with their existing passwords as well. For Kerberos
    authentication to work, encryption downgrade to **RC4_HMAC_MD5** is enforced.
    This attack requires the domain administrator privileges and the **SeDebugPrivilege**
    user right on the domain controller. A Skeleton Key attack can’t survive a reboot,
    as all manipulations with the **Local Security Authority Subsystem Service** (**LSASS**)
    process are conducted in memory.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 骨架密钥攻击是一种在域控制器上的持久性方法，它在域中设置了一个主密码，允许攻击者以任何域用户的身份进行身份验证。然而，为了避免被早期检测到，安装的后门模块允许用户继续使用现有密码登录。为了使
    Kerberos 认证正常工作，必须强制加密降级为**RC4_HMAC_MD5**。此攻击需要域管理员权限以及域控制器上的**SeDebugPrivilege**用户权限。骨架密钥攻击无法在重启后生效，因为对**本地安全授权子系统服务**（**LSASS**）进程的所有操作都在内存中进行。
- en: Note
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'A more detailed description of Skeleton Key in-memory actions can be found
    here: [https://adsecurity.org/?p=1255](https://adsecurity.org/?p=1255).'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 关于骨架密钥内存操作的更详细描述可以在此处找到：[https://adsecurity.org/?p=1255](https://adsecurity.org/?p=1255)。
- en: 'Mimikatz has this attack under its belt. The following command injects Skeleton
    Key malware:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Mimikatz 已经掌握了此攻击。以下命令会注入骨架密钥恶意软件：
- en: '[PRE25]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The following shows a successful attack on the domain controller:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 以下展示了成功攻击域控制器的示例：
- en: '![Figure 7.28 – Skeleton Key malware was deployed on a domain controller](image/B18964_07_28.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.28 – 骨架密钥恶意软件已在域控制器上部署](image/B18964_07_28.jpg)'
- en: Figure 7.28 – Skeleton Key malware was deployed on a domain controller
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.28 – 骨架密钥恶意软件已在域控制器上部署
- en: 'Now, to confirm, we map the **C:\** drive of the domain controller without
    knowing the privileged user password:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了确认，我们在不知道特权用户密码的情况下映射了域控制器的 **C:\** 驱动器：
- en: '[PRE26]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The disk was successfully mapped:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 磁盘成功映射：
- en: '![Figure 7.29 – The Skeleton Key works](image/B18964_07_29.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.29 – Skeleton Key 生效](image/B18964_07_29.jpg)'
- en: Figure 7.29 – The Skeleton Key works
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.29 – Skeleton Key 生效
- en: To partially mitigate the Skeleton Key attack, we run LSASS as a protected process
    by creating the **DWORD** value, **RunAsPPL**, set to **1** in the **HKLM\SYSTEM\CurrentControlSet\Control\Lsa**
    registry key. As stated by Microsoft, “*This will prevent non-administrative non-PPL
    processes from accessing or tampering with code and data in a PPL process via
    open* *process functions.*”
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 为了部分缓解 Skeleton Key 攻击，我们通过在 **HKLM\SYSTEM\CurrentControlSet\Control\Lsa** 注册表项中创建
    **DWORD** 值 **RunAsPPL** 并设置为 **1** 来将 LSASS 作为受保护进程运行。如微软所述，"*这将防止非管理员的非 PPL
    进程通过打开进程函数访问或篡改 PPL 进程中的代码和数据。*"
- en: 'In the following screenshot, we can see that the original Skeleton Key attack
    failed:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下屏幕截图中，我们可以看到原始的 Skeleton Key 攻击失败了：
- en: '![Figure 7.30 – PPL beats the Skeleton Key attack](image/B18964_07_30.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.30 – PPL 击败了 Skeleton Key 攻击](image/B18964_07_30.jpg)'
- en: Figure 7.30 – PPL beats the Skeleton Key attack
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.30 – PPL 击败了 Skeleton Key 攻击
- en: 'However, it is still possible to bypass the PPL mechanism by removing it from
    the process, with the help of the **mimidrv.sys** driver from Mimikatz. However,
    it is much noisier, as such a bypass requires driver loading and service creation:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，通过使用 Mimikatz 的 **mimidrv.sys** 驱动程序，仍然可以绕过 PPL 机制，移除该机制。然而，这种绕过方法更加显眼，因为它需要加载驱动程序和创建服务：
- en: '![Figure 7.31 – PPL protection removed by mimidrv](image/B18964_07_31.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.31 – PPL 保护被 mimidrv 移除](image/B18964_07_31.jpg)'
- en: Figure 7.31 – PPL protection removed by mimidrv
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.31 – PPL 保护被 mimidrv 移除
- en: Note
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'There are other bypasses for PPL, well described by *itm4n* here: [https://itm4n.github.io/lsass-runasppl/](https://itm4n.github.io/lsass-runasppl/).'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他针对 PPL 的绕过方法，*itm4n* 在这里有详细描述：[https://itm4n.github.io/lsass-runasppl/](https://itm4n.github.io/lsass-runasppl/)。
- en: Also, the blue team can enable audit mode for the LSASS process using Group
    Policy. It will be possible to monitor plugins and drivers loaded by LSASS, and
    events **3033** and **3063** will respectively appear in logs. To enable auditing,
    we need to create the **HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image
    File Execution Options\LSASS.exe** key, with the **AuditLevel** DWORD value set
    to **8**. When Skeleton Key attack is performed remotely, the domain controller
    will log events with IDs **4673**, **4611**, **4688**, and **4689**, as described
    here[9]. These events will show the usage of sensitive privileges the and registration
    of a logon process. The last two events will appear only if **Process Tracking**
    is enabled.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，蓝队可以通过组策略启用 LSASS 进程的审计模式。这样就可以监控 LSASS 加载的插件和驱动程序，事件 **3033** 和 **3063**
    将分别出现在日志中。要启用审计，我们需要在 **HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image
    File Execution Options\LSASS.exe** 注册表项中创建 **AuditLevel** DWORD 值，并设置为 **8**。当
    Skeleton Key 攻击通过远程方式进行时，域控制器将记录事件 ID 为 **4673**、**4611**、**4688** 和 **4689**
    的事件，详见此处[9]。这些事件将显示使用敏感权限和登录进程的注册。最后两个事件仅在启用 **Process Tracking** 时出现。
- en: To further explore how authentication mechanisms can be altered, we will introduce
    the concept of a malicious SSP.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步探索如何改变身份验证机制，我们将引入恶意 SSP 的概念。
- en: A malicious SSP
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 恶意 SSP
- en: '**Security Support Provider Interface** (**SSPI**) is the basis for Windows
    authentication. When applications need to authenticate via a specific protocol,
    they use SSPI to invoke the corresponding SSPs. There are six default SSPs implemented
    as DLLs, located in the **C:\Windows\System32** folder. Custom SSPs can be introduced
    as well. A list of providers is stored in the registry key at **HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security
    Packages**.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全支持提供者接口** (**SSPI**) 是 Windows 身份验证的基础。当应用程序需要通过特定协议进行身份验证时，它们使用 SSPI 调用相应的
    SSP。系统默认实现了六个 SSP，作为 DLL 文件，存储在 **C:\Windows\System32** 文件夹中。也可以引入自定义的 SSP。提供者列表存储在注册表项
    **HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages** 中。'
- en: 'With administrative privileges on a compromised host, an adversary has two
    options. The first one is to utilize Mimikatz to inject a malicious SSP directly
    into the LSASS process. The second option is to update the SSP Security Packages
    registry key, drop **mimilib.dll** in the same folder as LSASS (**C:\Windows\System32**),
    and wait for a reboot. Both venues have their own obvious OpSec considerations.
    An in-memory injection scenario will not survive the reboot but will start logging
    passwords immediately. The **memssp** module from Mimikatz can be injected with
    the following command:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在已被攻陷的主机上，攻击者有两个选项。第一个选项是利用 Mimikatz 将恶意SSP直接注入 LSASS 进程。第二个选项是更新 SSP 安全包注册表键，将
    **mimilib.dll** 放置在与 LSASS 同一文件夹（**C:\Windows\System32**）中，并等待重启。这两种方式都有明显的操作安全（OpSec）考虑因素。内存注入场景在重启后不会持续存在，但会立即开始记录密码。可以使用以下命令注入
    Mimikatz 的 **memssp** 模块：
- en: '[PRE27]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The result of the successful injection of a malicious SSP is shown in the following
    screenshot:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意SSP成功注入后的结果如下面的截图所示：
- en: '![Figure 7.32 – The Mimikatz memssp module is injected](image/B18964_07_32.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.32 – Mimikatz memssp 模块被注入](image/B18964_07_32.jpg)'
- en: Figure 7.32 – The Mimikatz memssp module is injected
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.32 – Mimikatz memssp 模块被注入
- en: 'We can lock the screen with the **misc::lock** Mimikatz command, so the victim
    will have to log in again. The log file with the passwords is located in **C:\Windows\System32\mimilsa.log**,
    as shown in the following screenshot:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 **misc::lock** Mimikatz 命令锁定屏幕，迫使受害者重新登录。包含密码的日志文件位于 **C:\Windows\System32\mimilsa.log**，如下图所示：
- en: '![Figure 7.33 – Clear-text passwords in the mimilsa.log file](image/B18964_07_33.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.33 – mimilsa.log 文件中的明文密码](image/B18964_07_33.jpg)'
- en: Figure 7.33 – Clear-text passwords in the mimilsa.log file
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.33 – mimilsa.log 文件中的明文密码
- en: 'To manually add an SSP via the registry, run the following command:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过注册表手动添加SSP，请运行以下命令：
- en: '[PRE28]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The successful SSP addition of **mimilib** is demonstrated here:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 下面展示了**mimilib**成功添加为SSP的情况：
- en: '![Figure 7.34 – mimilib was registered as an SSP](image/B18964_07_34.jpg)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.34 – mimilib 被注册为 SSP](image/B18964_07_34.jpg)'
- en: Figure 7.34 – mimilib was registered as an SSP
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.34 – mimilib 被注册为 SSP
- en: 'After reboot, the passwords can be found in **C:\Windows\System32\kiwissp.log**:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 重启后，密码可以在 **C:\Windows\System32\kiwissp.log** 中找到：
- en: '![Figure 7.35 – Clear-text passwords in the kiwissp.log file](image/B18964_07_35.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.35 – kiwissp.log 文件中的明文密码](image/B18964_07_35.jpg)'
- en: Figure 7.35 – Clear-text passwords in the kiwissp.log file
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.35 – kiwissp.log 文件中的明文密码
- en: To detect a malicious SSP, the blue team can monitor the changes of the **HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security
    Packages** registry key and files on the disk. However, adversaries can change
    the log storage folder and log filename. In the case of LSASS injection, we can
    apply the same detections as we discussed previously. Also, it is recommended
    to run LSASS as PPL.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检测恶意SSP，蓝队可以监控 **HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages**
    注册表键和磁盘上的文件变化。然而，攻击者可以更改日志存储文件夹和文件名。在 LSASS 注入的情况下，我们可以应用之前讨论过的相同检测方法。另外，建议将 LSASS
    运行为 PPL。
- en: To finalize our persistence through authentication manipulation, we will cover
    local administrator account abuse on a domain controller.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 为了通过身份验证操作实现我们的持久化，我们将讨论在域控制器上滥用本地管理员账户。
- en: DSRM
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DSRM
- en: 'A **Directory Services Restore Mode** (**DSRM**) account is a local administrator
    account on a domain controller. This account has a different password from the
    domain administrator. This password is set during domain controller promotion
    and is very often overlooked during the password rotation routine. There are two
    attack scenarios well described by *Sean Metcalf*. One is changing the DSRM password
    to a known one, and the other is to sync it with the domain account of our choice.
    We will utilize **Ntdsutil** for these actions. Both scenarios are shown in the
    following screenshot:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '**目录服务还原模式**（**DSRM**）账户是域控制器上的本地管理员账户。此账户的密码与域管理员账户的密码不同。该密码在域控制器提升时设置，并且在密码轮换过程中经常被忽视。*Sean
    Metcalf* 对两种攻击场景做了很好的描述。第一种是将 DSRM 密码更改为已知密码，第二种是将其与我们选择的域账户同步。我们将利用 **Ntdsutil**
    来执行这些操作。以下截图展示了这两种场景：'
- en: '![Figure 7.36 – The DSRM password reset and sync scenarios](image/B18964_07_36.jpg)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.36 – DSRM 密码重置和同步场景](image/B18964_07_36.jpg)'
- en: Figure 7.36 – The DSRM password reset and sync scenarios
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.36 – DSRM 密码重置和同步场景
- en: 'We can confirm that the sync was successful by dumping and comparing the user
    hashes:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过转储并比较用户哈希来确认同步是否成功：
- en: '![Figure 7.37 – The DSRM password was synced with jaime.lannister’s account
    password](image/B18964_07_37.jpg)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![图7.37 – DSRM密码已与jaime.lannister账户的密码同步](image/B18964_07_37.jpg)'
- en: Figure 7.37 – The DSRM password was synced with jaime.lannister’s account password
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.37 – DSRM密码已与jaime.lannister账户的密码同步
- en: 'There are three possible scenarios when logging in with the DSRM password.
    With Domain Administrator’s privileges, an attacker can force the desired option
    by setting the registry key value in **HKLM\System\CurrentControlSet\Control\Lsa\DsrmAdminLogonBehavior**
    to one of the following:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 使用DSRM密码登录时，有三种可能的场景。在域管理员权限下，攻击者可以通过将**HKLM\System\CurrentControlSet\Control\Lsa\DsrmAdminLogonBehavior**中的注册表键值设置为以下之一，强制选择所需的选项：
- en: '**0 (default)**: Login is allowed only when a domain controller is in DSRM'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**0（默认值）**：只有当域控制器处于DSRM模式时，才允许登录'
- en: '**1**: Login is allowed only when directory services is stopped'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**1**：只有在停止目录服务时才允许登录'
- en: '**2**: Free to log in without any limitations'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**2**：可以自由登录，没有任何限制'
- en: 'Using PowerShell, the adversary will set the registry value to **2**:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 使用PowerShell，攻击者将把注册表值设置为**2**：
- en: '[PRE29]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Then, the attacker will perform a pass-the-hash attack to spawn the shell as
    the domain controller’s local administrator and run a DCSync attack:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，攻击者将执行哈希传递攻击，以域控制器的本地管理员身份启动Shell，并运行DCSync攻击：
- en: '[PRE30]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The DCSync results are demonstrated here:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 这里演示了DCSync的结果：
- en: '![Figure 7.38 – The DCSync results from the DSRM login session](image/B18964_07_38.jpg)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![图7.38 – 来自DSRM登录会话的DCSync结果](image/B18964_07_38.jpg)'
- en: Figure 7.38 – The DCSync results from the DSRM login session
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.38 – 来自DSRM登录会话的DCSync结果
- en: The blue team should monitor the existence of the **HKLM\System\CurrentControlSet\Control\Lsa\DsrmAdminLogonBehavior**
    registry key. Event ID **4794** will log an attempt to set the DSRM password.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝队应监控**HKLM\System\CurrentControlSet\Control\Lsa\DsrmAdminLogonBehavior**注册表键的存在。事件ID
    **4794** 将记录设置DSRM密码的尝试
- en: Our last persistence technique will cover security descriptors and how they
    can be set in order to provide privileged access for a malicious actor, without
    explicitly adding a compromised user to a privileged group.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后的持久化技术将涵盖安全描述符及其如何设置，以便为恶意行为者提供特权访问，而无需显式地将受损用户添加到特权组中。
- en: Security descriptor alteration
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全描述符更改
- en: 'A security descriptor is used to store permissions that one object has over
    another. It is described using the format defined in the **Security Descriptor
    Definition Language** (**SDDL**). **Access Control Entity** (**ACE**) strings
    are used for **Discretionary Access Control List** (**DACL**) and **System Access
    Control** **List** (**SACL**)[10]:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 安全描述符用于存储一个对象对另一个对象的权限。它采用**安全描述符定义语言**（**SDDL**）中定义的格式进行描述。**访问控制实体**（**ACE**）字符串用于**自愿访问控制列表**（**DACL**）和**系统访问控制列表**（**SACL**）[10]：
- en: '[PRE31]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The idea is to modify the security descriptors of multiple remote access methods.
    We will set a backdoor for WMI and PS-Remoting access on a domain controller for
    non-privileged users. Also, we will alter the security descriptors for the remote
    registry. The RACE toolkit has PowerShell functions for these tasks:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法是修改多个远程访问方法的安全描述符。我们将在域控制器上为非特权用户设置WMI和PS-Remoting访问后门。此外，我们还将修改远程注册表的安全描述符。RACE工具包有用于这些任务的PowerShell功能：
- en: '[PRE32]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The result of the command execution on the domain controller is as follows:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在域控制器上执行命令的结果如下：
- en: '![Figure 7.39 – Setting backdoors on the domain controller for user renly.baratheon](image/B18964_07_39.jpg)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![图7.39 – 为用户renly.baratheon在域控制器上设置后门](image/B18964_07_39.jpg)'
- en: Figure 7.39 – Setting backdoors on the domain controller for user renly.baratheon
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.39 – 为用户renly.baratheon在域控制器上设置后门
- en: Now, we can confirm PS-Remoting access.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以确认PS-Remoting访问。
- en: '![Figure 7.40 – The PS-Remoting backdoor in action](image/B18964_07_40.jpg)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![图7.40 – PS-Remoting后门正在运行](image/B18964_07_40.jpg)'
- en: Figure 7.40 – The PS-Remoting backdoor in action
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.40 – PS-Remoting后门正在运行
- en: 'The registry backdoor allows an attacker to retrieve the machine account hash
    (the Silver Ticket), the local account hashes, and the domain-cached credentials.
    The backdoor opens the remote registry, retrieves **BootKey**, uses it to decrypt
    the LSA key, and then, with the help of that key, decrypts the **MachineAccount**
    hash:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 注册表后门允许攻击者检索机器账户哈希（银票）、本地账户哈希以及域缓存凭证。该后门打开远程注册表，检索**BootKey**，用它解密LSA密钥，然后在该密钥的帮助下解密**MachineAccount**哈希：
- en: '[PRE33]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This backdoor can be detected if log events with ID **4670** (**Permissions
    on an object were changed**) are detected.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 如果检测到ID为**4670**（**对象上的权限已更改**）的日志事件，则可以检测到此后门。
- en: Summary
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In conclusion, there are many ways for attackers to achieve persistence in compromised
    environments. This can be achieved at a domain level or by accessing a domain
    controller. We saw how powerful forged tickets are and how difficult is to detect
    their usage if an adversary follows OpSec recommendations. We also explored various
    ACL and attribute modifications. As usual, the devil is in the details, and in
    a complex environment, detection of such techniques can be tricky. We saw DCShadow
    and Golden gMSA attacks in practice. We dived deep into the topic of domain controller
    persistence, showing ways to collect clear-text passwords. Finally, we discussed
    security descriptors and possible ways to backdoor a system.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，攻击者可以通过多种方式在受损环境中实现持久性。这可以在域级别实现，也可以通过访问域控制器来实现。我们看到伪造票证的强大功能，以及如果对手遵循OpSec建议，其使用是多么难以检测。我们还探索了各种ACL和属性修改。像往常一样，细节决定成败，在复杂的环境中，检测这些技术可能会很棘手。我们在实践中看到了DCShadow和Golden
    gMSA攻击。我们深入探讨了域控制器持久性的话题，展示了收集明文密码的方法。最后，我们讨论了安全描述符以及可能的系统后门方式。
- en: In the following chapter, we will focus on attacking AD Certificate Services,
    which is a privileged target in the Windows environment.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将重点讨论攻击AD证书服务，这是Windows环境中的特权目标。
- en: References
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'A comment about the November 2021 update: [https://www.thehacker.recipes/ad/movement/kerberos/forged-tickets/silver](https://www.thehacker.recipes/ad/movement/kerberos/forged-tickets/silver)'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '关于2021年11月更新的评论: [https://www.thehacker.recipes/ad/movement/kerberos/forged-tickets/silver](https://www.thehacker.recipes/ad/movement/kerberos/forged-tickets/silver)'
- en: 'PAC requestor and Golden Ticket attacks: [https://www.varonis.com/blog/pac_requestor-and-golden-ticket-attacks](https://www.varonis.com/blog/pac_requestor-and-golden-ticket-attacks)'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'PAC请求者和Golden Ticket攻击: [https://www.varonis.com/blog/pac_requestor-and-golden-ticket-attacks](https://www.varonis.com/blog/pac_requestor-and-golden-ticket-attacks)'
- en: 'Detect malicious activity by checking checksums and ticket times: [https://www.trustedsec.com/blog/red-vs-blue-kerberos-ticket-times-checksums-and-you/](https://www.trustedsec.com/blog/red-vs-blue-kerberos-ticket-times-checksums-and-you/)'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '通过检查校验和和票证时间来检测恶意活动: [https://www.trustedsec.com/blog/red-vs-blue-kerberos-ticket-times-checksums-and-you/](https://www.trustedsec.com/blog/red-vs-blue-kerberos-ticket-times-checksums-and-you/)'
- en: 'The WonkaVision tool: [https://github.com/0xe7/WonkaVision](https://github.com/0xe7/WonkaVision)'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'WonkaVision工具: [https://github.com/0xe7/WonkaVision](https://github.com/0xe7/WonkaVision)'
- en: 'Inserting SID History: [https://www.thehacker.recipes/ad/persistence/sid-history](https://www.thehacker.recipes/ad/persistence/sid-history)'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '插入SID历史: [https://www.thehacker.recipes/ad/persistence/sid-history](https://www.thehacker.recipes/ad/persistence/sid-history)'
- en: 'ServerUntrustAccount: [https://github.com/STEALTHbits/ServerUntrustAccount](https://github.com/STEALTHbits/ServerUntrustAccount)'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'ServerUntrustAccount: [https://github.com/STEALTHbits/ServerUntrustAccount](https://github.com/STEALTHbits/ServerUntrustAccount)'
- en: 'DCShadow script: [https://github.com/samratashok/nishang/blob/master/ActiveDirectory/Set-DCShadowPermissions.ps1](https://github.com/samratashok/nishang/blob/master/ActiveDirectory/Set-DCShadowPermissions.ps1)'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'DCShadow脚本: [https://github.com/samratashok/nishang/blob/master/ActiveDirectory/Set-DCShadowPermissions.ps1](https://github.com/samratashok/nishang/blob/master/ActiveDirectory/Set-DCShadowPermissions.ps1)'
- en: 'The GoldenGMSA tool: [https://github.com/Semperis/GoldenGMSA](https://github.com/Semperis/GoldenGMSA)'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'GoldenGMSA工具: [https://github.com/Semperis/GoldenGMSA](https://github.com/Semperis/GoldenGMSA)'
- en: 'A remote Skeleton Key attack: [https://adsecurity.org/?p=1275](https://adsecurity.org/?p=1275)'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '一次远程Skeleton Key攻击: [https://adsecurity.org/?p=1275](https://adsecurity.org/?p=1275)'
- en: 'ACE explained: [https://helgeklein.com/blog/permissions-a-primer-or-dacl-sacl-owner-sid-and-ace-explained/](https://helgeklein.com/blog/permissions-a-primer-or-dacl-sacl-owner-sid-and-ace-explained/)'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'ACE解释: [https://helgeklein.com/blog/permissions-a-primer-or-dacl-sacl-owner-sid-and-ace-explained/](https://helgeklein.com/blog/permissions-a-primer-or-dacl-sacl-owner-sid-and-ace-explained/)'
