- en: Android App Analysis, Malware, and Reverse Engineering
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android 应用分析、恶意软件和逆向工程
- en: Third-party applications are commonly used by smartphone users. Android users
    download and install several apps from app stores such as Google Play. During
    forensic investigations, it is often helpful to perform an analysis of these apps
    to retrieve valuable data and to detect any malware. For instance, a photo vault
    app might lock sensitive images present on a device. Hence, it would be of great
    significance to have the knowledge to identify the passcode for the photo vault
    app.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方应用是智能手机用户常用的应用。Android 用户从 Google Play 等应用商店下载并安装多个应用。在取证调查过程中，对这些应用进行分析，提取有价值的数据并检测恶意软件，通常是非常有帮助的。例如，一款照片保管箱应用可能会锁定设备上存储的敏感图片。因此，了解如何识别照片保管箱应用的密码将具有重要意义。
- en: Also, apps such as Facebook, WhatsApp, Skype, and so on are widely used these
    days, and they are often the source of valuable data that aids in cracking a case.
    Hence, it is important to know what kind of data these apps store and the location
    of this data. While the data extraction and data recovery techniques we discussed
    in earlier chapters provide access to valuable data, app analysis helps us gain
    information about the specifics of an application, such as preferences and permissions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，像 Facebook、WhatsApp、Skype 等应用现在也广泛使用，它们常常是破案的重要数据来源。因此，了解这些应用存储的数据类型及其数据存储位置非常重要。虽然我们在前几章中讨论的数据提取和数据恢复技巧可以帮助我们访问有价值的数据，但应用分析可以帮助我们获取应用程序的具体信息，例如偏好设置和权限。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将讨论以下主题：
- en: Analyzing widely used Android apps to retrieve valuable data
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析广泛使用的 Android 应用以获取有价值的数据
- en: Techniques to reverse engineer an Android application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逆向工程 Android 应用的技巧
- en: Android malware
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android 恶意软件
- en: Analyzing widely used Android apps to retrieve valuable data
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析广泛使用的 Android 应用以获取有价值的数据
- en: On Android, everything the user interacts with is an application. While some
    apps are preinstalled by the device manufacturer, others are downloaded and installed
    by the user. For example, even routine functions, such as contacts, calls, SMS,
    and so on, are performed through their respective apps. Thus, Android app analysis
    is crucial during the course of an investigation. Several third-party apps, such
    as WhatsApp, Facebook, Skype, Chrome browser, and so on, are used widely, and
    they handle a lot of valuable information. Depending on the type of application,
    most of these apps store sensitive information on the device's internal memory
    or SD card. Analyzing them may provide information about the location details
    of the user, their communication with others, and more. Using the forensic techniques
    we described earlier, it is possible to get access to the data stored by these
    applications. However, you, as a forensic examiner, need to develop the necessary
    skills to convert the available data into useful data. This is achieved when you
    have a comprehensive understanding of how the application handles data.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 系统中，用户与之互动的所有内容都是应用程序。虽然一些应用是由设备制造商预装的，但其他应用则是由用户下载并安装的。例如，诸如联系人、通话、短信等日常功能，都是通过各自的应用程序执行的。因此，Android
    应用分析在调查过程中至关重要。一些第三方应用，如 WhatsApp、Facebook、Skype、Chrome 浏览器等，广泛使用，并且它们处理了大量有价值的信息。根据应用类型，这些应用大多数会将敏感信息存储在设备的内部存储或
    SD 卡上。分析这些应用可能会提供有关用户位置、与他人通信等信息。使用我们之前描述的取证技巧，可以访问这些应用存储的数据。然而，作为一名取证检查员，你需要培养将可用数据转化为有用数据的必要技能。这在你全面理解应用程序如何处理数据时才能实现。
- en: As we discussed in previous chapters, all applications store their data in the
    `/data/data` folder by default. Apps also store certain other data on the SD card,
    if they want to, by asking permission at the time of installation. Information
    about applications present on the device can be gathered by inspecting the contents
    of the `/data/data` folder, but this is not straightforward as it requires analyzing
    each individual app folder under this path. As an alternative, you can inspect
    the `packages.list` file present under `/data/system`. This file contains information
    about all the apps, along with their package names and data paths.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面章节所述，所有应用程序默认将其数据存储在`/data/data`文件夹中。应用程序还可以根据需要通过安装时请求权限，将某些数据存储在SD卡上。可以通过检查`/data/data`文件夹的内容来收集设备上应用程序的信息，但这并不简单，因为需要分析此路径下每个单独的应用程序文件夹。作为替代方法，您可以检查位于`/data/system`下的`packages.list`文件。该文件包含所有应用程序的信息，包括它们的包名和数据路径。
- en: 'This can be performed using the following command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令来执行此操作：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following is the output of the preceding command:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面命令的输出：
- en: '![](img/07bd4eb4-20af-4cfc-9003-e3219e2aa2b2.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/07bd4eb4-20af-4cfc-9003-e3219e2aa2b2.png)'
- en: Content of the packages.list file
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: packages.list文件内容
- en: Now, let's look specifically at some third-party apps that are widely used and
    handle valuable data.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们特别看看一些广泛使用并处理有价值数据的第三方应用程序。
- en: The following apps are only being covered to make you familiar with the kind
    of data that can be extracted and the possible locations where the data can be
    obtained. You will need to take appropriate permissions and should abide by the
    legal rules before performing these tasks on a device. As we explained in [Chapter
    8](b1621e6e-80a3-495e-a288-c8db601149f8.xhtml), *Android Forensic Setup and Pre-Data
    Extraction Techniques*, the following techniques only work after the device has
    been rooted.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下应用程序仅用于让您熟悉可以提取的数据类型及其可能的存储位置。在执行这些操作之前，您需要获得适当的权限，并且应遵守法律规定。正如我们在[第8章](b1621e6e-80a3-495e-a288-c8db601149f8.xhtml)《*Android法医设置与数据提取前的技巧*》中解释的那样，以下技巧仅在设备已获得root权限后有效。
- en: Facebook Android app analysis
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Facebook Android应用分析
- en: 'The Facebook Android app is one of the most widely used social networking applications.
    It stores its information in the `/data/data` folder, within the `com.facebook.katana`
    package. The following details provide an overview of the kind of information
    that can be gathered across various files:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook Android应用是最广泛使用的社交网络应用之一。它将信息存储在`/data/data`文件夹中，位于`com.facebook.katana`包下。以下详细信息概述了可以通过不同文件收集的信息类型：
- en: '**Facebook contacts**: Information about the user''s Facebook contacts can
    be retrieved by analyzing the `contacts_db2` database, which is present under
    the following path:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Facebook联系人**：用户的Facebook联系人信息可以通过分析`contacts_db2`数据库来获取，该数据库位于以下路径：'
- en: '**Path**: `/data/data/com.facebook.katana/databases/contacts_db2`.'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.facebook.katana/databases/contacts_db2`。'
- en: The `contacts_db2` database (SQLite file) contains a table named contacts, which
    contains most of the user's information, such as their first name, last name,
    display name, and URL for display picture.
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contacts_db2`数据库（SQLite文件）包含一个名为contacts的表，该表包含用户的大部分信息，如名字、姓氏、显示名和显示图片的URL。'
- en: '**Facebook notifications**: Information about a user''s notifications can be
    gathered by analyzing the `notification_db` database, which is present under the
    following path:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Facebook通知**：用户的通知信息可以通过分析`notification_db`数据库来收集，该数据库位于以下路径：'
- en: '**Path**: `/data/data/com.facebook.katana/databases/notifications_db`.'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.facebook.katana/databases/notifications_db`。'
- en: The `gql_notifications` table present under the preceding path holds the user's
    information. The `seen_state` column confirms whether a notification has been
    seen or not. The `updated` column points to the time when the notification was
    updated. The `gql_payload` column contains the notification and the sender information.
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gql_notifications`表位于上述路径下，包含用户信息。`seen_state`列确认通知是否已被查看。`updated`列指示通知更新时间。`gql_payload`列包含通知及发送者信息。'
- en: '**Facebook messages**: A Facebook message conversation may be of crucial importance
    in several cases and can be viewed by analyzing the `threads_db2` database:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Facebook消息**：Facebook消息对多种案件可能至关重要，可以通过分析`threads_db2`数据库查看：'
- en: '**Path**: `/data/data/com.facebook.katana/databases/threads_db2`'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.facebook.katana/databases/threads_db2`'
- en: '**Videos from newsfeed**: The `/video-cache` folder contains videos that have
    been downloaded from the user''s newsfeed. Note that these are not the videos
    posted by the user, but rather they are the videos that appeared on their newsfeed:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**新闻源视频**: `/video-cache` 文件夹包含已从用户新闻源下载的视频。请注意，这些视频不是用户发布的视频，而是出现在他们新闻源中的视频：'
- en: '**Path**: `/data/data/com.facebook.katana/files/video-cache`'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**: `/data/data/com.facebook.katana/files/video-cache`'
- en: '**Images from newsfeed**: The `/images` folder contains various images that
    appear on the user''s profile, such as the ones from their newsfeed and contact
    profile pictures. Several directories are present within this folder and images
    may be stored in formats other than `.jpg`, such as `.cnt`:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**新闻源图片**: `/images` 文件夹包含出现在用户个人资料中的各种图片，例如来自他们新闻源的图片和联系人个人资料图片。此文件夹内有多个目录，图片可能以
    `.jpg` 以外的格式存储，如 `.cnt`：'
- en: '**Path**: `/data/data/com.facebook.katana/cache/images`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**: `/data/data/com.facebook.katana/cache/images`'
- en: '**Newsfeed data**: The `newfeed_db` database contains data shown to the user
    on their newsfeed. As shown in the following screenshot, analyzing this database
    would provide valuable information, such as when a particular story was loaded
    by the device (the `fetched_at` column), if a particular story was seen by the
    user (the `seen_state` column), and where the corresponding files of a story are
    stored on the device (the `cache_file_path` column):'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**新闻源数据**: `newfeed_db` 数据库包含显示给用户的新闻源数据。如下所示，分析此数据库可以提供有价值的信息，例如某个特定故事何时被设备加载（`fetched_at`
    列），某个故事是否已被用户查看（`seen_state` 列），以及该故事的相关文件存储在设备上的位置（`cache_file_path` 列）：'
- en: '**Path**: `/data/data/com.facebook.katana/databases/newsfeed_db`:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**: `/data/data/com.facebook.katana/databases/newsfeed_db`：'
- en: '![](img/49a0d2c5-1d9b-482f-afdc-45327787d546.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/49a0d2c5-1d9b-482f-afdc-45327787d546.png)'
- en: The Facebook newsfeed.db file analyzed in SQLite browser
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQLite 浏览器中分析的 Facebook newsfeed.db 文件
- en: 'In the preceding screenshot, `fetched_at` specifies the date and time when
    this information is fetched. Notice that the app uses Linux epoch time, also known
    as Unix time or Posix time, to store this information. This format is often used
    by multiple apps and, hence, is worth taking a look at. Linux epoch time is stored
    as the number of seconds (or milliseconds) since midnight on January 1, 1970\.
    There are several online sites, such as [https://www.epochconverter.com/](https://www.epochconverter.com/),
    that can readily convert the Linux epoch time into a normal format. For example,
    the following screenshot shows Linux epoch time 1,577,881,839 converted into a
    normal format:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中，`fetched_at` 指定了此信息被获取的日期和时间。请注意，应用程序使用 Linux 纪元时间，也称为 Unix 时间或 Posix
    时间，来存储这些信息。此格式通常被多个应用程序使用，因此值得注意。Linux 纪元时间以自 1970 年 1 月 1 日午夜以来的秒数（或毫秒数）表示。有几个在线网站，例如
    [https://www.epochconverter.com/](https://www.epochconverter.com/)，可以方便地将 Linux
    纪元时间转换为常规格式。例如，以下截图显示了 Linux 纪元时间 1,577,881,839 转换为常规格式：
- en: '![](img/7072a6d0-d3ec-4498-a617-cd9faa509832.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7072a6d0-d3ec-4498-a617-cd9faa509832.png)'
- en: Example of time format
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 时间格式示例
- en: Now that we have performed an analysis of the Facebook app, let's perform a
    similar analysis with our next application, which is WhatsApp.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经分析了 Facebook 应用程序，让我们对下一个应用程序，即 WhatsApp 进行类似的分析。
- en: WhatsApp Android app analysis
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WhatsApp 安卓应用分析
- en: 'WhatsApp is the most popular chat (audio and video) messaging service and is
    used by more than a billion people across the globe. It stores its information
    under the `/data/data` folder, with the package name, `com.whatsapp`. The following
    is an overview of the important files that are of interest from a forensic perspective:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: WhatsApp 是全球最受欢迎的聊天（音频和视频）消息服务，全球超过十亿人使用。它将其信息存储在 `/data/data` 文件夹下，包名为 `com.whatsapp`。以下是从取证角度来看感兴趣的重要文件概览：
- en: '**User''s profile pic**: The user''s profile picture is saved with the`me.jpg` filename
    and is present under the following path:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户的个人资料图片**: 用户的个人资料图片以 `me.jpg` 文件名保存，并位于以下路径下：'
- en: '**Path**: `/data/data/com.whatsapp/me.jpg`'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**: `/data/data/com.whatsapp/me.jpg`'
- en: '**User''s phone number (associated with WhatsApp)**: The `me` file that''s
    present under the main folder contains the phone number that is associated with
    the user''s WhatsApp account. Note that this may or may not be the phone number
    that is associated with the SIM:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户的电话号码（与 WhatsApp 关联）**: 主文件夹下的 `me` 文件包含与用户 WhatsApp 账户关联的电话号码。请注意，这可能是也可能不是与
    SIM 卡关联的电话号码：'
- en: '**Path**: `/data/data/com.whatsapp/me`'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**: `/data/data/com.whatsapp/me`'
- en: '**Contacts profile pic**: The `/avatars` directory contains thumbnails of the
    profile pictures of the user''s contacts (who use WhatsApp):'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**联系人头像**：`/avatars`目录包含用户联系人（使用WhatsApp的用户）的头像缩略图：'
- en: '**Path**: `/data/data/com.whatsapp/files/Avatars`'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.whatsapp/files/Avatars`'
- en: '**Chat messages**: All message-related information, including chats and sender
    details, is present in the `msgstore.db` file, which is present at the following
    location:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聊天消息**：所有与消息相关的信息，包括聊天和发件人详细信息，都存储在`msgstore.db`文件中，该文件位于以下位置：'
- en: '**Path**: `/data/data/com.whatsapp/databases/msgstore.db`'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.whatsapp/databases/msgstore.db`'
- en: '**WhatsApp files**: Most of the files shared with WhatsApp, such as images,
    videos, and audio messages, are stored on the SD card in the following location:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WhatsApp文件**：与WhatsApp共享的大部分文件，如图像、视频和语音消息，存储在SD卡中的以下位置：'
- en: '**Path**: `/sdcard/WhatsApp/Media`'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/sdcard/WhatsApp/Media`'
- en: Both sent and received files are stored separately here in their respective
    folder names.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 发送和接收的文件分别存储在各自的文件夹中。
- en: 'Next, we will look at another application that is used for telecommunication
    and specializes in providing video chat and voice calls: Skype.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将查看另一款用于远程通信的应用程序，它专注于提供视频聊天和语音通话服务：Skype。
- en: Skype Android app analysis
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Skype Android应用分析
- en: 'Skype is an app that offers video chat and voice call services. The application''s
    data is stored under the `/data/data` folder, with the package name `com.skype.raider`.
    The following are some important artifacts that can be extracted by analyzing
    the Skype app:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Skype是一款提供视频聊天和语音通话服务的应用程序。该应用程序的数据存储在`/data/data`文件夹下，包名为`com.skype.raider`。以下是通过分析Skype应用程序可以提取的一些重要数据：
- en: '**Username and IP address**: The `shared.xml` file present under the following
    path contains information about the username and the last IP address that connected
    to Skype:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户名和IP地址**：`shared.xml`文件位于以下路径中，包含有关用户名和最后一次连接Skype的IP地址的信息：'
- en: '**Path**: `/data/data/com.skype.raider/files/shared.xml`'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.skype.raider/files/shared.xml`'
- en: '**Profile picture**: The user''s profile picture is present in the `/thumbnails`
    directory, whose path is as follows:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**头像**：用户的头像存储在`/thumbnails`目录中，其路径如下：'
- en: '**Path**: `/data/data/com.skype.raider/files/<username>/thumbnails/`'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.skype.raider/files/<username>/thumbnails/`'
- en: '**Call logs**: Information about call logs made from Skype is available in
    the `main.db` file. Analyzing this file gives us a lot of information:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通话记录**：Skype的通话记录信息存储在`main.db`文件中，分析此文件可以获取大量信息：'
- en: '**Path**: `/data/data/com.skype.raider/files/<username>/main.db/`.'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.skype.raider/files/<username>/main.db/`'
- en: For example, the `duration` table provides information about call duration,
    the `start_timestamp` field gives the start time of a call, and the `creation_timestamp`
    field indicates when the call is initiated (this includes unanswered calls). The
    `type` column indicates whether the call was incoming (value= `1`) or outgoing
    (value= `2`).
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，`duration`表提供了通话时长的信息，`start_timestamp`字段显示了通话的开始时间，`creation_timestamp`字段表示通话的发起时间（包括未接来电）。`type`列指示通话是接听（值=`1`）还是拨出（值=`2`）。
- en: '**Chat messages**: The `messages` table present in the `main.db` file contains
    all the chat messages. The `author` and `from_dispname` columns provide information
    about who wrote the message. The `timestamp` column shows the date/time of the
    message. The `body_xml` column contains the content of the message:'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聊天消息**：`main.db`文件中的`messages`表包含所有聊天消息。`author`和`from_dispname`列提供了写消息的人信息。`timestamp`列显示了消息的日期/时间。`body_xml`列包含消息的内容：'
- en: '**Path**: `/data/data/com.skype.raider/files/<username>/main.db/`'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.skype.raider/files/<username>/main.db/`'
- en: '**Files transferred**: The `Transfers` table contains information about transferred
    files, such as the filename, the size of the file, and their location on the device:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**传输的文件**：`Transfers`表包含有关已传输文件的信息，如文件名、文件大小及其在设备上的位置：'
- en: '**Path**: `/data/data/com.skype.raider/files/<username>/main.db/`.'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.skype.raider/files/<username>/main.db/`'
- en: The actual images or files that are received will be stored on an SD card. If
    a file is downloaded, it will be in the `Downloads` folder in the root of the
    SD.
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接收到的实际图像或文件将存储在SD卡中。如果下载了文件，它将位于SD卡根目录下的`Downloads`文件夹中。
- en: '**Group chats**: The `ChatMembers` table shows a list of users who are present
    in a particular chat. The `adder` column shows the user who initiated the conversation:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**群聊**：`ChatMembers`表格显示了参与某个聊天的用户列表。`adder`列显示了发起对话的用户：'
- en: '**Path**: `/data/data/com.skype.raider/files/<username>/main.db/`'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.skype.raider/files/<username>/main.db/`'
- en: Now, we will perform an analysis on the Gmail application.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将对Gmail应用程序进行分析。
- en: Gmail Android app analysis
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gmail Android应用程序分析
- en: 'Gmail is a widely used email service offered by Google. The application data
    is saved under the `/data/data` folder, with the package name `com.google.android.gm`.
    The following are the important artifacts that can be extracted by analyzing the
    Gmail app:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Gmail是Google提供的广泛使用的电子邮件服务。应用数据保存在`/data/data`文件夹中，包名为`com.google.android.gm`。通过分析Gmail应用程序，可以提取以下重要数据：
- en: '**Account details**: The XML files present under `/shared_prefs` confirm the
    email account details. Details of other accounts, which are linked to the current
    email, can be identified from the `Gmail.xml` file:'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**账户详情**：`/shared_prefs`下的XML文件确认了电子邮件账户的详情。与当前电子邮件关联的其他账户的详情可以通过分析`Gmail.xml`文件来识别：'
- en: '**Path**: `/data/data/com.google.android.gm/cache/<username>@gmail.com`'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.google.android.gm/cache/<username>@gmail.com`'
- en: '**Attachments**: Attachments that are recently used in both sending and receiving
    emails are saved to the `/cache` directory. This is valuable because it gives
    us access to items that have been deleted from the email service too. Each row
    also contains a `messages_conversation` value. This value can be compared with
    the `conversations` table of the email attachment. The `filename` column identifies
    the path on the device where the file is located. The following is the exact path
    for this folder:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**附件**：最近在发送和接收电子邮件中使用的附件会保存到`/cache`目录。这非常有价值，因为它让我们能够访问那些已经从电子邮件服务中删除的项目。每一行还包含一个`messages_conversation`值，可以与电子邮件附件的`conversations`表格进行对比。`filename`列标识了设备上文件所在的路径。以下是该文件夹的准确路径：'
- en: '**Path**: `/data/data/com.google.android.gm/cache/<username>@gmail.com`:'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.google.android.gm/cache/<username>@gmail.com`：'
- en: '![](img/66d5e627-1946-46c8-a729-16cad9ba6c46.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/66d5e627-1946-46c8-a729-16cad9ba6c46.png)'
- en: List of attachments present under Gmail's cache directory
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Gmail缓存目录下的附件列表
- en: '**Email subject**: The subject of this email can be recovered by analyzing
    the `conversations` table present in the `mailstore.<username>@gmail.com.db` file:'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电子邮件主题**：通过分析`mailstore.<username>@gmail.com.db`文件中的`conversations`表格，可以恢复此电子邮件的主题：'
- en: '**Path**: `/data/data/com.google.android.gm/databases/mailstore.<username>@gmail.com.db`'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.google.android.gm/databases/mailstore.<username>@gmail.com.db`'
- en: '**Search history**: Any text searches that were made within the app are stored
    in the `suggestions.db` file, which is present at the following location:'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索历史**：应用内进行的任何文本搜索都会保存在`suggestions.db`文件中，文件位于以下位置：'
- en: '**Path**: `/data/data/com.google.android.gm/databases/suggestions.db`'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.google.android.gm/databases/suggestions.db`'
- en: Let's wrap up this section by performing a final analysis on the Google Chrome
    application.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过对Google Chrome应用程序进行最后分析来总结本节内容。
- en: Google Chrome Android app analysis
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google Chrome Android应用程序分析
- en: 'Google Chrome is the default web browser on Google Pixel and many other devices,
    and it is used widely to browse the internet. The application data is present
    under the `/data/data` folder, with the package name, `com.android.chrome`. The
    following are the important artifacts that can be extracted by analyzing the Gmail
    app:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Google Chrome是Google Pixel及许多其他设备上的默认浏览器，广泛用于上网浏览。应用数据位于`/data/data`文件夹中，包名为`com.android.chrome`。通过分析Gmail应用程序，可以提取以下重要数据：
- en: '**Profile picture**: The profile picture of the user is stored with the `Google
    Profile Picture.png` filename in the following location:'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**个人资料照片**：用户的个人资料照片以`Google Profile Picture.png`文件名存储在以下位置：'
- en: '**Path**: `/data/data/com.android.chrome/app_chrome/Default/ Google Profile
    Picture.png`'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.android.chrome/app_chrome/Default/ Google Profile Picture.png`'
- en: '**Bookmarks**: The `Bookmarks` file contains information about all the bookmarks
    synced with the account. Details such as the site name, URL, and the time when
    it was bookmarked can be gathered by analyzing this file:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**书签**：`Bookmarks`文件包含了所有与账户同步的书签信息。通过分析此文件，可以收集到站点名称、网址以及书签添加时间等详情：'
- en: '**Path**: `/data/data/com.android.chrome/app_chrome/Default/Bookmarks`'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.android.chrome/app_chrome/Default/Bookmarks`'
- en: '**Browsing history**: The `History.db` file contains the user''s web history
    stored in various tables. For example, as shown in the following screenshot, the
    `keyword_search_terms` table contains information about the searches that were
    made using the Chrome browser:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浏览历史**：`History.db` 文件包含了用户在多个表中存储的网页历史。例如，如下图所示，`keyword_search_terms` 表包含了使用
    Chrome 浏览器进行的搜索信息：'
- en: '![](img/6a6bb125-9825-4ca7-bfd8-aef1fa43939f.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a6bb125-9825-4ca7-bfd8-aef1fa43939f.png)'
- en: Google Chrome browsing history
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Google Chrome 浏览历史
- en: The `segments` table contains a list of sites visited by the user (but not all
    of the sites). It's interesting to note that Chrome stores the data belonging
    to not just the device, but the account in general. In other words, information
    about sites that have been visited from other devices using the same account is
    also stored on the device; for example, the `URLs` table contains the browsing
    history for a Google account across several devices.
  id: totrans-92
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`segments` 表包含了用户访问过的部分网站（并非所有网站）。值得注意的是，Chrome 不仅存储属于设备的数据，还存储账户相关的数据。换句话说，通过相同账户在其他设备上访问过的网站信息也会被存储在设备上；例如，`URLs`
    表包含了 Google 账户在多个设备上访问的浏览历史。'
- en: '**Path**: `/data/data/com.android.chrome/app_chrome/Default/History`.'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.android.chrome/app_chrome/Default/History`。'
- en: '**Login Data**: The `Login Data` database contains the login information of
    different sites saved in the browser. The site URL, along with the username and
    password, is stored in the respective tables:'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**登录数据**：`Login Data` 数据库包含了浏览器保存的不同网站的登录信息。网站的 URL，以及用户名和密码，都会存储在相应的表格中：'
- en: '**Path**: `/data/data/com.android.chrome/app_chrome/Default/Login Data`'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.android.chrome/app_chrome/Default/Login Data`'
- en: '**Frequently visited sites**: The `Top Sites` database contains a list of frequently
    visited sites:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**常访问的网站**：`Top Sites` 数据库包含了一个常访问网站的列表：'
- en: '**Path**: `/data/data/com.android.chrome/app_chrome/Default/Top Sites`'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.android.chrome/app_chrome/Default/Top Sites`'
- en: '**Other data**: Other information, such as the phone numbers or email addresses
    entered by the user during form fills across different sites, is stored in the
    `Web Data` database. Any tables that are present within this database contain
    autofill data:'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**其他数据**：其他信息，例如用户在不同网站表单填写时输入的电话号码或电子邮件地址，会存储在 `Web Data` 数据库中。这个数据库中任何存在的表格都包含了自动填充数据：'
- en: '**Path**: `/data/data/com.android.chrome/app_chrome/Default/Web Data`'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.android.chrome/app_chrome/Default/Web Data`'
- en: Now that we have analyzed the different third-party apps, we will look at the
    techniques we can use to reverse engineer Android apps.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经分析了不同的第三方应用，接下来我们将看看可以用来逆向工程安卓应用的技巧。
- en: Techniques to reverse engineer an Android application
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逆向工程安卓应用的技巧
- en: You may need to deal with applications that stand as a barrier to accessing
    the required information. For instance, take the case of the gallery on a phone
    that is locked by an *AppLock* application. In this case, in order to access the
    pictures and videos stored in the gallery, you first need to enter the passcode
    to the *AppLock*. Hence, it would be interesting to know how the *AppLock* app
    stores the password on the device. You might look into the SQLite database files.
    However, if they are encrypted, then it's hard to even tell that it's a password.
    Reverse engineering applications would be helpful in such cases where you want
    to better understand the application and how the application stores the data.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要处理一些应用，它们会成为访问所需信息的障碍。例如，考虑一下手机相册被 *AppLock* 应用锁定的情况。在这种情况下，为了访问相册中存储的照片和视频，你首先需要输入
    *AppLock* 的密码。因此，了解 *AppLock* 应用如何在设备上存储密码会是一个有趣的话题。你可能会查看 SQLite 数据库文件。然而，如果这些文件被加密，那么甚至很难知道它是一个密码。逆向工程应用在这种情况下会非常有帮助，尤其是在你想更好地理解应用如何存储数据时。
- en: 'To state it in simple terms, reverse engineering is the process of retrieving
    source code from an executable. Reverse engineering an Android app is done in
    order to understand the functionality of the app, the data storage, the security
    mechanisms in place, and more. Before we proceed to learn how to reverse engineer
    an Android app, here is a quick recap of the Android apps:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，逆向工程是从可执行文件中提取源代码的过程。逆向工程安卓应用的目的是为了理解应用的功能、数据存储、所采用的安全机制等等。在我们学习如何逆向工程安卓应用之前，先简单回顾一下安卓应用的基本知识：
- en: All the applications that are installed on the Android device are written in
    the Java programming language.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有安装在Android设备上的应用程序都使用Java编程语言编写。
- en: When a Java program is compiled, we get bytecode. This is sent to a dex compiler,
    which converts it into Dalvik bytecode.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个Java程序被编译时，我们会得到字节码。这些字节码会被传送到dex编译器，转换成Dalvik字节码。
- en: Thus, the class files are converted into dex files using a dx tool. Android
    uses something called **Dalvik virtual machine** (**DVM**) to run its applications.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此，类文件通过dx工具转换为dex文件。Android使用一种叫做**Dalvik虚拟机**（**DVM**）的技术来运行其应用程序。
- en: JVM's bytecode consists of one or more class files, depending on the number
    of Java files that are present in an application. Regardless, a Dalvik bytecode
    is composed of only one dex file.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JVM的字节码由一个或多个类文件组成，具体取决于应用程序中Java文件的数量。不管怎样，Dalvik字节码只由一个dex文件组成。
- en: Thus, the dex files, XML files, and other resources that are required to run
    an application are packaged into an Android package file (an APK file). These
    APK files are simply collections of items within ZIP files. Therefore, if you
    rename an APK extension file to a `.zip` file, then you will be able to see the
    contents of the file. However, before you can do this, you need to get access
    to the APK file of the application that is installed on the phone. Here is how
    the APK file corresponding to an application can be accessed.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，dex文件、XML文件以及运行应用程序所需的其他资源都被打包到Android包文件（APK文件）中。这些APK文件实际上是ZIP文件内的项目集合。因此，如果你将APK扩展名文件重命名为`.zip`文件，你就可以看到文件的内容。然而，在此之前，你需要访问已安装在手机上的应用的APK文件。以下是如何访问对应应用APK文件的方法。
- en: Extracting an APK file from an Android device
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Android设备中提取APK文件
- en: 'Apps that come preinstalled with the phone are stored in the `/system/app`
    directory. Third-party applications that are downloaded by the user are stored
    in the `/data/app` folder. The following method helps you gain access to the APK
    files on the device; it works on both rooted and non-rooted devices:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 手机预装的应用存储在`/system/app`目录下。用户下载的第三方应用则存储在`/data/app`文件夹中。以下方法可以帮助你访问设备上的APK文件，适用于已root和未root的设备：
- en: Identify the package name of the app by issuing the `# adb.exe shell pm list
    packages` command.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行`# adb.exe shell pm list packages`命令来识别应用的包名。
- en: 'The following is the output of the preceding command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述命令的输出：
- en: '![](img/845bd1f9-74f7-4b82-96ec-9abb26ac9bd4.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/845bd1f9-74f7-4b82-96ec-9abb26ac9bd4.png)'
- en: List of package names present on the device
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 设备上存在的包名列表
- en: 'As shown in the preceding command-line output, the list of package names is
    displayed. Try to find a match between the app in question and the package name.
    Usually, the package names are very much related to the app names. Alternatively,
    you can use the Android Market or Google Play to identify the package name easily.
    The URL for an app in Google Play contains the package name, as shown in the following
    screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的命令行输出所示，显示了包名列表。尝试找到该应用程序与包名的匹配项。通常，包名与应用名密切相关。或者，你也可以使用Android Market或Google
    Play轻松识别包名。Google Play中应用的URL包含包名，如下图所示：
- en: '![](img/5d24586a-85b6-47b0-a70f-58aa01a2ddf1.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d24586a-85b6-47b0-a70f-58aa01a2ddf1.png)'
- en: Facebook App in the Google Play Store
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Google Play商店中的Facebook应用
- en: 'Identify the full pathname of the APK file for the desired package by issuing
    the `adb shell pm path` command, as follows:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行`adb shell pm path`命令，识别所需包的APK文件完整路径，如下所示：
- en: '![](img/7de67300-77f9-4d01-8d4e-a4856a021b23.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7de67300-77f9-4d01-8d4e-a4856a021b23.png)'
- en: Identifying full pathname of APK
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 确定APK的完整路径名
- en: 'Pull the APK file from the Android device to the forensic workstation using
    the `adb pull` command:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`adb pull`命令将APK文件从Android设备拉取到取证工作站：
- en: '![](img/62c3987d-21df-4837-a593-eccc2d453207.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62c3987d-21df-4837-a593-eccc2d453207.png)'
- en: adp pull command
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: adp pull命令
- en: 'Now, let''s analyze the contents of an APK file. An Android package is a container
    for an Android app''s resources and executables. It''s a zipped file that contains
    the following files:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们分析APK文件的内容。Android包是Android应用程序的资源和可执行文件的容器。它是一个压缩文件，包含以下文件：
- en: '`AndroidManifest.xml`: This contains information about the permissions and
    more.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AndroidManifest.xml`：此文件包含关于权限等信息。'
- en: '`classes.dex`: This is the class file that''s been converted into a dex file
    by the dex compiler.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`classes.dex`：这是通过dex编译器将类文件转换成的dex文件。'
- en: '`Res`: The application''s resources, such as the image files, sound files,
    and more, are present in this directory.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Res`：应用程序的资源文件，例如图像文件、音频文件等，存储在此目录中。'
- en: '`Lib`: This contains native libraries that the application may use.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Lib`：此目录包含应用程序可能使用的本地库。'
- en: '`META-INF`: This contains information about the application''s signature and
    signed checksums for all the other files in the package.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`META-INF`：此目录包含应用程序签名的信息以及所有其他文件的签名校验和。'
- en: Once the APK file has been obtained, you can proceed to reverse engineer the
    Android application.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦获得 APK 文件，您可以继续对 Android 应用进行逆向工程。
- en: Steps to reverse engineer Android apps
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逆向工程 Android 应用的步骤
- en: 'APK files can be reverse-engineered in different ways to get the original code.
    The following is one method that uses the `dex2jar` and JD-GUI tools to gain access
    to the application code. For our example, we will examine the `com.twitter.android-1.apk`
    file. The following are the steps to successfully reverse engineer the APK file:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: APK 文件可以通过不同的方式进行逆向工程，以获取原始代码。以下是一种方法，它使用 `dex2jar` 和 JD-GUI 工具来访问应用程序代码。以我们的示例为例，我们将分析
    `com.twitter.android-1.apk` 文件。以下是成功逆向工程 APK 文件的步骤：
- en: 'Rename the APK extension to ZIP to see the contents of the file. Rename the
    `com.twitter.android-1.apk` file to `twitter.android-1.zip` and extract the contents
    of this file using any file archiver application. The following screenshot shows
    the files that were extracted from the original file, `twitter.android-1.zip`:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 APK 扩展名更改为 ZIP 以查看文件内容。将 `com.twitter.android-1.apk` 文件重命名为 `twitter.android-1.zip`，并使用任何文件压缩工具提取此文件的内容。以下截图显示了从原始文件
    `twitter.android-1.zip` 中提取的文件：
- en: '![](img/d6a4ff00-b5ed-41df-902e-4c9c3984a9b9.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d6a4ff00-b5ed-41df-902e-4c9c3984a9b9.png)'
- en: Extracted files of an APK file
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: APK 文件提取的内容
- en: The `classes.dex` file that we discussed previously can be accessed after extracting
    the contents of the APK file. This dex file needs to be converted into a class
    file in Java. This can be done using the `dex2jar` tool.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们之前讨论过的 `classes.dex` 文件可以在提取 APK 文件内容后访问。这个 dex 文件需要转换为 Java 类文件，可以使用 `dex2jar`
    工具来完成此操作。
- en: 'Download the `dex2jar` tool from [https://github.com/pxb1988/dex2jar](https://github.com/pxb1988/dex2jar),
    drop the `classes.dex` file into the `dex2jar` tools directory, and issue the
    following command:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/pxb1988/dex2jar](https://github.com/pxb1988/dex2jar) 下载
    `dex2jar` 工具，将 `classes.dex` 文件放入 `dex2jar` 工具目录中，并执行以下命令：
- en: '[PRE1]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When the preceding command is successfully run, it creates a new `classes -dex2jar.jar`
    file in the same directory, as shown in the following screenshot:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当上述命令成功运行后，它将在同一目录下创建一个新的 `classes-dex2jar.jar` 文件，如下图所示：
- en: '![](img/306e7996-4fdd-40e4-b5c3-91e85a53d654.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/306e7996-4fdd-40e4-b5c3-91e85a53d654.png)'
- en: The classes-dex2jar.jar file created by the dex2jar tool
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: dex2jar 工具创建的 classes-dex2jar.jar 文件
- en: 'To view the contents of this JAR file, you can use a tool such as JD-GUI. As
    shown in the following screenshot, the files present in an Android application
    and the corresponding code can be seen:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看此 JAR 文件的内容，您可以使用 JD-GUI 等工具。如以下截图所示，可以查看 Android 应用程序中存在的文件及其对应的代码：
- en: '![](img/5c1a2e05-7b7f-49d4-b819-626efaf2a5e1.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5c1a2e05-7b7f-49d4-b819-626efaf2a5e1.png)'
- en: The JD-GUI tool
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: JD-GUI 工具
- en: Once we get access to the code, it is easy to analyze how the application stores
    the values, permissions, and more information that may be helpful to bypass certain
    restrictions. When malware is found on a device, this method to decompile and
    analyze the application may prove useful, as it will show what is being accessed
    by the malware and provide clues to where the data is being sent. The following
    sections focus on Android malware in detail.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们获取到代码，分析应用程序如何存储值、权限以及其他有助于绕过某些限制的信息就变得容易了。当设备中发现恶意软件时，逆向工程和分析应用程序的方法可能非常有用，因为它将显示恶意软件正在访问哪些内容，并提供有关数据发送位置的线索。以下章节将详细讨论
    Android 恶意软件。
- en: Android malware
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android 恶意软件
- en: As Android's market share continues to increase, so do attacks or malware targeted
    at Android users. Mobile malware is a broad term that refers to a piece of software
    that performs unintended actions and includes Trojans, spyware, adware, ransomware,
    and others. According to pandasecurity, Android devices are 50 times more infected
    with malware compared to iOS devices ([https://www.pandasecurity.com/mediacenter/mobile-security/android-more-infected-than-ios/](https://www.pandasecurity.com/mediacenter/mobile-security/android-more-infected-than-ios/)).
    In 2019, the famous Agent Smith malware alone infected almost 25 million Android
    devices, as per a Cybersecurity Hub news report ([https://www.cshub.com/malware/articles/incident-of-the-week-malware-infects-25m-android-phones](https://www.cshub.com/malware/articles/incident-of-the-week-malware-infects-25m-android-phones)).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 Android 市场份额的不断增加，针对 Android 用户的攻击或恶意软件也在增加。移动恶意软件是一个广泛的术语，指的是执行非预期操作的软件，包括特洛伊木马、间谍软件、广告软件、勒索软件等。根据
    pandasecurity 的数据，Android 设备感染恶意软件的概率是 iOS 设备的 50 倍 ([https://www.pandasecurity.com/mediacenter/mobile-security/android-more-infected-than-ios/](https://www.pandasecurity.com/mediacenter/mobile-security/android-more-infected-than-ios/))。根据
    Cybersecurity Hub 的新闻报道，2019 年，著名的 Agent Smith 恶意软件就感染了近 2500 万部 Android 设备 ([https://www.cshub.com/malware/articles/incident-of-the-week-malware-infects-25m-android-phones](https://www.cshub.com/malware/articles/incident-of-the-week-malware-infects-25m-android-phones))。
- en: One of the primary reasons for this situation is that, unlike Apple's App Store,
    which is tightly controlled by the company, Google's Play Store is an open ecosystem
    without any detailed upfront security reviews. Malware developers can easily move
    their apps to the Play Store and thereby distribute their apps. Google now has
    a malware-detecting software named Google Bouncer, which will automatically scan
    an uploaded app for malware, but attackers have figured out several ways to remain
    undetected. Moreover, Android officially allows us to load apps that have been
    downloaded over the internet (side-loading), unlike iOS, which does not allow
    unsigned apps.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况的主要原因之一是，与由 Apple 严密控制的 App Store 不同，Google 的 Play Store 是一个开放生态系统，没有任何详细的前期安全审查。恶意软件开发者可以轻松地将他们的应用上传到
    Play Store，从而分发他们的应用。Google 目前拥有一款名为 Google Bouncer 的恶意软件检测软件，它会自动扫描上传的应用程序是否含有恶意软件，但攻击者已经找到几种方法可以绕过检测。此外，Android
    官方允许我们加载通过互联网下载的应用（侧载），而 iOS 则不允许加载未签名的应用。
- en: 'For example, as shown in the following screenshot, when the Unknown sources
    option is selected on an Android device, it allows the user to install apps that
    have been downloaded from any site over the internet:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如以下截图所示，当在 Android 设备上选择“未知来源”选项时，它允许用户安装从任何网站下载的应用：
- en: '![](img/a0adb506-9287-4311-9910-5cc3ef4bb143.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a0adb506-9287-4311-9910-5cc3ef4bb143.png)'
- en: Side-loading option in Android
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Android 中的侧载选项
- en: 'The third-party app stores that host Android apps are known to be hubs of malware.
    This prompted Google to roll out the *Verify Apps* feature starting from Android
    4.2, which scans apps locally on Android devices to look for malicious activities,
    such as SMS abuse. As shown in the following screenshot, the Verify apps feature
    may warn the user, or in some cases may even block the installation. However,
    this is an opt-in service, so users can disable this feature if they wish to:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 托管 Android 应用的第三方应用商店已知是恶意软件的温床。这促使 Google 从 Android 4.2 开始推出 *验证应用* 功能，它会在
    Android 设备上本地扫描应用，查找恶意活动，例如短信滥用。如以下截图所示，验证应用功能可能会警告用户，或者在某些情况下甚至会阻止安装。然而，这是一个自愿服务，因此用户可以选择禁用此功能：
- en: '![](img/c7b30de6-5536-4636-9e17-8c16bff545e3.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c7b30de6-5536-4636-9e17-8c16bff545e3.png)'
- en: Verify apps feature in Android
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Android 中的验证应用功能
- en: 'Starting with Android Oreo, Google has rolled out a new feature called Play
    Protect, which is a better version of the verifying apps feature. The primary
    job of Play Protect is to block or warn the users of malicious or harmful apps
    that have been installed on the Android device. For example, as shown in the following
    screenshot, the Play Protect feature may show a warning message during the app''s
    installation:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Android Oreo 开始，Google 推出了一个名为 Play Protect 的新功能，它是验证应用功能的改进版。Play Protect
    的主要任务是阻止或警告用户已安装在 Android 设备上的恶意或有害应用。例如，如以下截图所示，Play Protect 功能在应用安装过程中可能会显示警告信息：
- en: '![](img/17406d6b-4d5c-42a7-87a4-8c35c6f35eff.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17406d6b-4d5c-42a7-87a4-8c35c6f35eff.png)'
- en: Play Protect feature
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Play Protect 功能
- en: Next, let's have a look at the types of malware.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们来看看恶意软件的类型。
- en: Types of Android malware
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android 恶意软件的类型
- en: 'There are different kinds of malware types that can infect an Android device.
    The following are some of the most common ones:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种类型的恶意软件可以感染Android设备。以下是一些最常见的类型：
- en: '**Banking malware**: It can be distributed as fake banking applications to
    steal banking credentials typed by the users, or steal any other sensitive personal
    information from the user''s account. Banking Trojans can intercept or modify
    banking transactions and perform dangerous actions such as sending, deleting,
    and intercepting SMS messages, as well as keylogging.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**银行木马**：它可以伪装成虚假的银行应用程序，以窃取用户输入的银行凭据，或窃取用户账户中的任何其他敏感个人信息。银行木马可以拦截或修改银行交易，并执行发送、删除和拦截短信消息以及键盘记录等危险操作。'
- en: '**Spyware**: Spyware monitors, logs, and sends important information from the
    target device to the attacker''s server. This information might comprise SMS messages,
    recorded phone calls, screenshots, keylogs, emails, or any other application data
    that may be of interest to the attacker. BusyGasper, a spyware identified by Kaspersky
    Lab experts in early 2018, not only possesses common spyware capabilities, such
    as collecting information from popular messаging applications, such as WhatsApp,
    Viber, and Facebook, but it also has device sensor listeners, including motion
    detectors.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**间谍软件**：间谍软件监视、记录并将目标设备的重要信息发送到攻击者的服务器。这些信息可能包括短信消息、录音电话、截屏、键盘记录、电子邮件或任何可能对攻击者感兴趣的应用程序数据。例如，Kaspersky
    Lab专家在2018年初发现的BusyGasper间谍软件，不仅具有收集来自WhatsApp、Viber和Facebook等热门通讯应用的信息的常见间谍软件功能，还具有设备传感器监听器，包括运动检测器。'
- en: '**Adware**: Adware is another popular malicious or unwanted application type
    that is very common on Android devices. It is relatively easy to detect, as the
    victim will receive continuous popups and ads on their device''s screen. Such
    unwanted programs are not always harmless, since popups may result in downloading
    another piece of malware, including the types already mentioned – spyware and
    banking Trojans.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**广告软件**：广告软件是另一种在Android设备上非常常见的恶意或不需要的应用程序类型。它相对容易检测，因为受害者会在设备屏幕上收到持续的弹出窗口和广告。这些不受欢迎的程序并不总是无害，因为弹出窗口可能导致下载其他恶意软件，包括前述的间谍软件和银行木马。'
- en: '**Ransomware**: The main targets of ransomware are Windows-based desktop computers
    and servers, but it also exists on mobile platforms, and on Android in particular.
    Usually, it only locks the device screen with a ransom note, but sometimes it
    encrypts users'' data as well.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**勒索软件**：勒索软件主要攻击目标是基于Windows的桌面计算机和服务器，但也存在于移动平台上，尤其是在Android上。通常情况下，它只会锁定设备屏幕并附上勒索通知，但有时也会加密用户的数据。'
- en: '**Crypto-mining malware**: Cryptocurrencies are extremely popular nowadays,
    so this type of malicious program is available even for mobile platforms, such
    as Android. The goal of such applications is to mine cryptocurrency, using a victim''s
    device computation capacity. Occasionally, this type of malware can even put smartphone
    hardware at risk.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加密货币挖矿恶意软件**：由于加密货币如今极为流行，因此这种类型的恶意程序甚至在移动平台（如Android）上也有。此类应用程序的目标是利用受害者设备的计算能力进行加密货币挖掘。有时，这种类型的恶意软件甚至会使智能手机硬件面临风险。'
- en: Advanced malware is also capable of rooting the device and installing new apps.
    For example, the Android Mazar malware, which was discovered in Feb 2016, spreads
    via text messages and is capable of gaining administrator rights on phones, allowing
    it to wipe handsets, make calls, or read texts.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 高级恶意软件还能够对设备进行Root操作并安装新的应用程序。例如，2016年2月发现的Android Mazar恶意软件通过短信传播，能够在手机上获得管理员权限，从而可以抹掉手机、打电话或读取短信。
- en: A full list of Android malware families and their capabilities is available
    at [https://forensics.spreitzenbarth.de/android-malware/](https://forensics.spreitzenbarth.de/android-malware/).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的Android恶意软件家族列表及其功能可以在[https://forensics.spreitzenbarth.de/android-malware/](https://forensics.spreitzenbarth.de/android-malware/)找到。
- en: 'Once malware gets into a device, it can perform dangerous actions, some of
    which are as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦恶意软件侵入设备，它可以执行以下危险操作之一：
- en: Send and read your text messages
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送和阅读您的短信消息
- en: Steal sensitive data, such as pictures, videos, and credit card numbers
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 窃取敏感数据，如图片、视频和信用卡号码
- en: Manipulate files or data present on the device
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操纵设备上存在的文件或数据
- en: Send SMS to a premium-rated number
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向高费率号码发送短信
- en: Infect your browser and steal any data typed into its Change device settings
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 感染您的浏览器并窃取其输入的任何数据
- en: Wipe all data present on the device
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抹掉设备上的所有数据
- en: Lock the device until a ransom is paid
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锁定设备，直到支付赎金
- en: Display advertisements continuously
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续展示广告
- en: Now that we have understood the different types of malware, we will see how
    the malware spreads in your device.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了不同类型的恶意软件，接下来我们将看看恶意软件是如何在您的设备中传播的。
- en: How does Android malware spread?
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安卓恶意软件是如何传播的？
- en: 'An Android device can be infected with malware in several different ways. The
    following are some of the possible ways:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓设备可以通过多种方式感染恶意软件。以下是一些可能的传播方式：
- en: '**Repackaging legitimate application**: This is the most common method used
    by attackers. First, the attacker downloads a legitimate application and disassembles
    it. Then, they add their malicious code and reassemble the application. The new
    malicious application now functions exactly as the legitimate application does,
    but it also performs malicious activity in the background. This kind of application
    is commonly found in third-party Android app stores and is downloaded by many
    people.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重新包装合法应用**：这是攻击者使用的最常见方法。首先，攻击者下载一个合法的应用并进行反编译。然后，他们添加恶意代码并重新打包应用。这个新的恶意应用现在功能和合法应用相同，但在后台执行恶意活动。这类应用通常出现在第三方安卓应用商店，并被许多人下载。'
- en: '**Exploiting Android vulnerabilities**: In this scenario, an attacker exploits
    the bugs or the vulnerabilities that are discovered in the Android platform to
    install their malicious application or to perform any unwanted actions. For example,
    installer hijacking, which was identified in 2015, has been exploited by attackers
    to replace an Android application with malware during installation.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用安卓漏洞**：在这种情况下，攻击者利用安卓平台中发现的漏洞或缺陷，安装他们的恶意应用程序或执行任何不必要的操作。例如，2015年发现的安装程序劫持问题，攻击者利用这一漏洞，在安装过程中将安卓应用程序替换为恶意软件。'
- en: '**Bluetooth and MMS propagation**: Malware is also spread via Bluetooth and
    MMS. The victim receives the malware when the device is in discoverable mode,
    for example, when it can be seen by other Bluetooth-enabled devices. In the case
    of MMS, the malware is attached to the message, just like how computer viruses
    are sent through email attachments. However, in both these methods, the user has
    to agree, at least once, to run the file.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**蓝牙和MMS传播**：恶意软件也可以通过蓝牙和MMS传播。当设备处于可发现模式时，受害者会收到恶意软件，例如当设备可以被其他蓝牙设备看到时。在MMS的情况下，恶意软件会作为附件发送，就像计算机病毒通过电子邮件附件发送一样。然而，在这两种方法中，用户至少需要同意一次运行文件。'
- en: '**App downloading a malicious update**: In this case, the app that was originally
    installed does not contain any malicious code, but a function present within the
    code will download malicious commands at runtime. This can be done via a stealthy
    update or user update. For example, the Plankton malware uses stealthy updates
    that directly download a JAR file from a remote server and do not need any user
    permission. In the case of user updates, the user has to allow the app to download
    the new version of the app.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用下载恶意更新**：在这种情况下，原本安装的应用不包含任何恶意代码，但应用程序中的某个功能会在运行时下载恶意命令。这可以通过隐秘更新或用户更新进行。例如，Plankton恶意软件使用隐秘更新，直接从远程服务器下载JAR文件，并且不需要任何用户权限。在用户更新的情况下，用户必须允许应用下载新版本的应用。'
- en: '**Remote install**: The attacker may compromise the credentials of the user''s
    account on the device and thereby remotely install apps on the device. This generally
    happens in targeted scenarios and is less frequent compared to the previous two
    methods we just described.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远程安装**：攻击者可能会破坏用户设备帐户的凭证，从而远程在设备上安装应用程序。这通常发生在有针对性的场景中，且相比前面描述的两种方法，发生的频率较低。'
- en: Now that we've looked at the possible ways in which the Android malware can
    spread, let's try to identify the presence of malware in your device.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看过了安卓恶意软件传播的可能方式，接下来让我们尝试识别设备中是否存在恶意软件。
- en: Identifying Android malware
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别安卓恶意软件
- en: 'From a forensic perspective, it''s important to identify the presence of any
    malware on the device prior to performing any analysis. This is because malware
    can alter the state of the device or contents on the device, thereby making the
    analysis or the results inconsistent. There are tools available on the market
    that can analyze the physical extraction to identify malware. For example, Cellebrite
    UFED Physical Analyzer has BitDefender''s anti-malware technology, which scans
    for malware. As shown in the following screenshot, once the physical image has
    been loaded into the tool, the file can be scanned for malware:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 从取证的角度来看，在进行任何分析之前，首先要识别设备上是否存在恶意软件。这是因为恶意软件可能会改变设备的状态或设备上的内容，从而使分析或结果变得不一致。市场上有一些工具可以分析物理提取数据，识别恶意软件。例如，Cellebrite
    UFED Physical Analyzer 配备了 BitDefender 的反恶意软件技术，可以扫描恶意软件。如下图所示，一旦物理镜像加载到工具中，就可以扫描文件中的恶意软件：
- en: '![](img/64f84e23-3bfc-40eb-bd46-20a7f256645f.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/64f84e23-3bfc-40eb-bd46-20a7f256645f.png)'
- en: Scanning for malware in UFED Physical Analyzer
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在 UFED Physical Analyzer 中扫描恶意软件
- en: 'Once the scan starts, the BitDefender software tries to unpack the `.apk` files
    and looks for infected or malicious files. This process is automatic and the tool
    points to the malicious apps, as shown in the following screenshot:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦扫描开始，BitDefender 软件会尝试解包 `.apk` 文件，并寻找感染或恶意文件。这个过程是自动的，工具会指示出恶意应用程序，如下图所示：
- en: '![](img/9b4514e2-3949-4b28-b3b1-abc4cb275bc7.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9b4514e2-3949-4b28-b3b1-abc4cb275bc7.png)'
- en: Malware scanner results in UFED Physical Analyzer
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: UFED Physical Analyzer 中的恶意软件扫描结果
- en: 'The tool simply points out that something malicious is present on the device.
    The forensic investigator has to then manually confirm whether this is a valid
    issue by analyzing the respective application. This is where the reverse engineering
    skills that we discussed in the previous sections need to be leveraged. Once the
    application has been reverse-engineered and the code has been obtained, it is
    recommended that you take a look at the `AndroidManifest.xml` file to find out
    the app permissions. This will be helpful for understanding where the app stores
    the data, what resources it is trying to access, and more. For example, a Flashlight
    application does not need read/write access to your SD card data, or to make a
    phone call:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具仅指出设备上存在恶意内容。取证调查员需要手动确认这是否是一个有效的问题，通过分析相关应用程序来确认。这正是我们在前面讨论过的逆向工程技能派上用场的时候。一旦应用程序被逆向工程并且获得了代码，建议你查看
    `AndroidManifest.xml` 文件，了解应用程序的权限。这将有助于理解应用程序将数据存储在哪里、它尝试访问哪些资源等。例如，手电筒应用程序不需要读写你
    SD 卡的数据，或者拨打电话的权限：
- en: '![](img/516bfec6-8b29-482e-b80e-3e834b262e12.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/516bfec6-8b29-482e-b80e-3e834b262e12.png)'
- en: Permissions in the AndroidManifest.xml file
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: AndroidManifest.xml 文件中的权限
- en: Alternatively, you can also upload the `.apk` file to VirusTotal, a free service
    that can be used to analyze suspicious files for malware. VirusTotal will scan
    your file against 55 antivirus engines. It's also important to note that the tool
    may not identify a valid case if the details are obfuscated in the `.apk` file.
    Hence, as a forensic investigator, it's important to develop the necessary skills
    to reverse engineer any suspicious apps and analyze the code to identify malicious
    behavior.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你也可以将 `.apk` 文件上传到 VirusTotal，这是一个免费的服务，用于分析可疑文件中的恶意软件。VirusTotal 会通过 55
    个杀毒引擎扫描你的文件。需要特别注意的是，如果 `.apk` 文件中的细节被混淆，工具可能无法识别出有效的恶意软件。因此，作为一名取证调查员，掌握逆向工程的技能，分析可疑应用程序的代码，识别恶意行为是非常重要的。
- en: In some investigations, the nature of the malware that is present on a device
    may also result in arriving at certain crucial conclusions, which may affect the
    outcome of the case. For example, consider an internal investigation in a corporation
    that involves sending abusive messages to other employees. Identifying malware
    on the device that sends the messages would help solve the case.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些调查中，设备上存在的恶意软件的性质可能会帮助得出某些关键结论，这些结论可能会影响案件的结果。例如，考虑一起涉及向其他员工发送辱骂性信息的公司内部调查。如果能在发送信息的设备上识别到恶意软件，将有助于解决此案件。
- en: Summary
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Android app analysis helps a forensic investigator look for valuable data in
    relevant locations on a device. Reverse engineering Android apps is the process
    of retrieving source code from an APK file. Using certain tools, such as `dex2jar`,
    Android apps can be reverse-engineered in order to understand their functionality
    and data storage, identify malware, and more. In this chapter, we performed analysis
    on different android applications and we are now able to retrieve data from them.
    We also learned about different types of Android malware and how to identify them.
    Tools such as UFED Physical Analyzer come with BitDefender software, which can
    automatically scan for malware.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Android 应用分析帮助取证调查员在设备的相关位置寻找有价值的数据。逆向工程 Android 应用是从 APK 文件中提取源代码的过程。使用某些工具，如
    `dex2jar`，可以对 Android 应用进行逆向工程，以了解其功能和数据存储、识别恶意软件等。在本章中，我们对不同的 Android 应用进行了分析，现在能够从中提取数据。我们还学习了不同类型的
    Android 恶意软件及其识别方法。像 UFED Physical Analyzer 这样的工具配备了 BitDefender 软件，可以自动扫描恶意软件。
- en: The next chapter covers performing forensics on Windows Phone devices.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将介绍如何对 Windows Phone 设备进行取证分析。
