- en: Chapter 10. Wireless Exploitation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章 无线利用
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Setting up a wireless network
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立无线网络
- en: Bypassing MAC address filtering
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绕过MAC地址过滤
- en: Sniffing network traffic
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嗅探网络流量
- en: Cracking WEP encryption
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破解WEP加密
- en: Cracking WPA/WPA2 encryption
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破解WPA/WPA2加密
- en: Cracking WPS
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破解WPS
- en: Denial-of-service attacks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拒绝服务攻击
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'Wireless networks are on the rise in the current age. The need for instant
    network access on-the-go or the ability to be on the Internet at any point in
    time at any location is increasing. Employees and guests all enter the corporate
    network with the need to access the Internet to either give presentations or pitch
    their product; even employee mobile devices might need wireless access following
    BYOD policies. However, one should know that wireless protocols with respect to
    security do have quite a few issues. The only way to guess the correctness of
    a device is via the Mac ID, which can be exploited. In this chapter, we are going
    to explore the different vulnerabilities observed in wireless networks. Before
    we jump in, let us understand a few terminologies:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当前，无线网络正在兴起。随时随地需要即时网络访问或在任何地点随时上网的能力正在增加。员工和访客都需要进入企业网络，需要访问互联网以进行演示或推销产品；甚至员工的移动设备可能需要遵循BYOD政策进行无线访问。然而，应该知道，关于安全性的无线协议确实存在一些问题。通过Mac
    ID来猜测设备的正确性是唯一的方法，这是可以被利用的。在本章中，我们将探讨无线网络中观察到的不同漏洞。在我们深入之前，让我们了解一些术语：
- en: '**Wi-Fi interface modes**'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wi-Fi接口模式
- en: '**Master**: Access point or base station'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主：接入点或基站
- en: '**Managed**: Infrastructure mode (client)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 托管：基础设施模式（客户端）
- en: '**Ad-Hoc**: Device to device'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点对点：设备对设备
- en: '**Mesh:** (Mesh cloud/network)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网状：（网状云/网络）
- en: '**Repeater**: Range extender'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中继器：范围扩展器
- en: '**Monitor:** RFMON='
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监视器：RFMON=
- en: '**Wi-Fi frames**'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wi-Fi帧
- en: '**Management frames**:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理帧：
- en: '**Beacon frame**: The access point periodically sends a beacon frame to announce
    its presence and relay information, such as a timestamp, SSID, and other parameters
    regarding the access point to radio NICs that are within range. Radio NICs continually
    scan all 802.11 radio channels and listen to beacons as the basis for choosing
    which access point is best to associate with.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信标帧：接入点定期发送信标帧以宣布其存在并传递信息，如时间戳、SSID和有关接入点的其他参数，以供范围内的无线网卡选择与之关联的最佳接入点的基础。无线网卡不断扫描所有802.11无线电信道，并侦听信标，作为选择与之关联的最佳接入点的基础。
- en: '**Probe**: Two types: Probe request and Probe response:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探测：两种类型：探测请求和探测响应：
- en: '**Probe request frame**: A station sends a probe request frame when it needs
    to obtain information from another station. For example, a radio NIC would send
    a probe request to determine which access points are within range.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探测请求帧：当需要从另一个站点获取信息时，站点会发送探测请求帧。例如，无线网卡会发送探测请求以确定范围内有哪些接入点。
- en: '**Probe response frame**: A station will respond with a probe response frame,
    containing capability information, supported data rates, and so on after it receives
    a probe request frame.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探测响应帧：在接收到探测请求帧后，站点将以探测响应帧作出响应，其中包含能力信息、支持的数据速率等。
- en: Setting up a wireless network
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建立无线网络
- en: 'The most crucial part of wireless testing is to ensure the correctness of the
    tester''s wireless setup. Extensive configurations are required for a proper testing
    environment, plus the user should have a decent knowledge of wireless communication
    protocols. One of the core components on which the entire testing is based is
    the wireless adaptor. The wrong wireless adaptor can foil the entire testing activity.
    The dependency is on software, and a major role is played by the aircrack-ng suite
    designed for wireless testing. The compatibility list for wireless adaptors can
    be found at [https://www.aircrack-ng.org/doku.php?id=compatibility_drivers](https://www.aircrack-ng.org/doku.php?id=compatibility_drivers)
    . For our demo purposes we will be using the ALFA card model name **ALFA AWUS0360H**
    **;** it supports the **b** and **g** protocols. Some wireless adapters supported
    by Kali are:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 无线测试的最关键部分是确保测试人员的无线设置的正确性。需要对适当的测试环境进行广泛的配置，用户应该对无线通信协议有相当的了解。整个测试的核心组件之一是无线适配器。错误的无线适配器可能会破坏整个测试活动。依赖于软件，aircrack-ng套件在无线测试中发挥了重要作用。无线适配器的兼容性列表可以在[https://www.aircrack-ng.org/doku.php?id=compatibility_drivers](https://www.aircrack-ng.org/doku.php?id=compatibility_drivers)找到。对于我们的演示目的，我们将使用ALFA卡型号**ALFA
    AWUS0360H**；它支持**b**和**g**协议。Kali支持的一些无线适配器有：
- en: Atheros AR9271
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Atheros AR9271
- en: Ralink RT3070
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ralink RT3070
- en: Ralink RT3572
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ralink RT3572
- en: Realtek 8187L (Wireless G adapters)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Realtek 8187L（无线G适配器）
- en: 'While choosing a Wi-Fi card, the following can be kept in mind for better selection:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择Wi-Fi卡时，可以考虑以下内容以进行更好的选择：
- en: '802.11a-5 GHZ rate: Up to 54 Mbps'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 802.11a-5 GHZ速率：最高54 Mbps
- en: '802.11b-2.4 GHZ rate: Up to 11 Mbps'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 802.11b-2.4 GHZ速率：最高11 Mbps
- en: '802.11g-2.4 GHZ rate: Up to 54 Mbps'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 802.11g-2.4 GHZ速率：最高54 Mbps
- en: '802.11n-2.4 GHZ rate: Up to 300 Mbps'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 802.11n-2.4 GHZ速率：最高300 Mbps
- en: '802.11ac(draft)-5 GHZ rate: Up to 1.73Gps!!!'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 802.11ac（草案）-5 GHZ速率：最高1.73Gps！！！
- en: Getting ready
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be performing wireless testing via a Kali machine hosted on a virtual
    machine. To set up the wireless network we will need a Kali OS, wireless adaptor,
    and a target wireless connection. Once these are available we can begin our pen
    test phase.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过托管在虚拟机上的Kali机器进行无线测试。要设置无线网络，我们需要Kali操作系统、无线适配器和目标无线连接。一旦这些都准备好了，我们就可以开始我们的渗透测试阶段。
- en: How to do it...
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To set up the card on to a virtual machine, we will have to ensure that the
    option **Automatically connect new USB devices** is turned on in the edit virtual
    machine settings of VMplayer, as shown in the following screenshot:![How to do
    it...](img/image_10_001.jpg)
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在虚拟机上设置网卡，我们需要确保在VMplayer的编辑虚拟机设置中打开“自动连接新USB设备”选项，如下面的屏幕截图所示：![如何做...](img/image_10_001.jpg)
- en: 'Once the device has been detected, check it with the following command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设备被检测到，使用以下命令进行检查：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_10_002.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_10_002.jpg)'
- en: 'Let''s check if we can enable the monitor mode. **Monitor** mode allows a computer
    with a **Wireless Network Interface Controller** (**WNIC**) to monitor all traffic
    received from the wireless network:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们检查是否可以启用监视模式。**监视**模式允许具有**无线网络接口控制器**（**WNIC**）的计算机监视从无线网络接收到的所有流量：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_10_003.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_10_003.jpg)'
- en: 'As we see some potentially troublesome services are running; we will have to
    disable them. We can do so by killing the process using the `kill` command and
    the process ID (`PID`) mentioned in the preceding screenshot:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们看到一些潜在有问题的服务正在运行，我们将不得不禁用它们。我们可以通过使用`kill`命令和前面截图中提到的进程ID（`PID`）来杀死进程：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_10_004.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_10_004.jpg)'
- en: Now we can begin to check if **Monitor** mode can be turned on:![How to do it...](img/image_10_005.jpg)
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以开始检查是否可以打开**监视**模式：![操作步骤...](img/image_10_005.jpg)
- en: We were able to set up our adaptor and turn on Monitor mode. We can now begin
    the exercises.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经设置好了适配器并打开了监视模式。现在我们可以开始练习了。
- en: Bypassing MAC address filtering
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绕过MAC地址过滤
- en: A MAC address is the unique identity of the user who tries to authenticate over
    a wireless network. Often as a best practice users prefer to Mac-filter their
    networks to protect themselves from attackers; however it is very easy to change
    a Mac address and attack the network. In this recipe, we are going to see how
    one can change the Mac address of a wireless card.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: MAC地址是尝试在无线网络上进行身份验证的用户的唯一标识。通常作为最佳实践，用户倾向于对他们的网络进行Mac过滤以保护自己免受攻击者的侵害；然而，更改Mac地址并攻击网络非常容易。在这个教程中，我们将看到如何更改无线网卡的Mac地址。
- en: Getting ready
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: A wireless card and a Kali machine are required to perform this exercise. In
    this recipe, we will scan the available network and the devices connected to it,
    after which we will change the Mac ID of the wireless card to that of the host
    connected to the network.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此练习需要一个无线网卡和一台Kali机器。在这个教程中，我们将扫描可用的网络和连接到网络的设备，然后我们将把无线网卡的Mac ID更改为连接到网络的主机的Mac
    ID。
- en: How to do it...
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Before we begin, ensure that you stop **Monitor** mode, enabled in the previous
    recipe, by issuing the stop monitor command on its interface:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开始之前，请确保通过在其接口上发出停止监视命令来停止在上一个教程中启用的**监视**模式：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let us check our MAC address for our device, using the following command:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用以下命令检查我们设备的MAC地址：
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_10_006.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_10_006.jpg)'
- en: 'Now we will disable the network interface using the following command:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将使用以下命令禁用网络接口：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We now select one of the Network device and use `macchanger` to change our
    Mac address. We will change it to a legitimate authenticated user''s Mac, which
    can be found by running the `airodump-ng` command explained in the next recipe
    to see which Mac ID is connected to our target router:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们选择一个网络设备，并使用`macchanger`来更改我们的Mac地址。我们将把它更改为一个合法的经过身份验证的用户的Mac地址，可以通过运行下一个教程中解释的`airodump-ng`命令来找到：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_10_007.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_10_007.jpg)'
- en: 'In the absence of Mac filtering, if the user decides to maintain anonymity,
    a random Mac address can be obtained from:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在没有Mac过滤的情况下，如果用户决定保持匿名，可以从以下位置获取随机的Mac地址：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_10_008.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_10_008.jpg)'
- en: 'Now we can enable the wireless device using the following command:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以使用以下命令启用无线设备：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: There's more...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This is the basic step before any pen testing activity begins, now we will look
    into cracking the wireless protocols.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是任何渗透测试活动开始之前的基本步骤，现在我们将研究破解无线协议。
- en: Sniffing network traffic
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嗅探网络流量
- en: In this recipe, we are going to understand the basics of using a wireless adaptor
    to sniff wireless data packets; to do so we will have to change the wireless card
    to **Monitor** mode. For sniffing we will be using the `airodump-ng` command from
    the `aircrack-ng` suite.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将了解使用无线适配器来嗅探无线数据包的基础知识；为了这样做，我们将不得不将无线网卡切换到**监视**模式。对于嗅探，我们将使用`aircrack-ng`套件中的`airodump-ng`命令。
- en: Getting ready
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be using the Alfa card for this exercise; ensure that the wireless adaptor
    is connected as in the earlier recipe and we can start sniffing traffic.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这个练习中使用Alfa卡；确保无线适配器像之前的教程中那样连接，我们就可以开始嗅探流量了。
- en: How to do it...
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'If the wireless device is not turned on, turn it on using the following command:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果无线设备未打开，请使用以下命令打开它：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Put the card into monitor mode using the following command:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令将卡放入监视模式：
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_10_009.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_10_009.jpg)'
- en: 'Now that we have a monitor interface on we will issue:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了一个监视接口，我们将发出：
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_10_010.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_10_010.jpg)'
- en: 'We can capture a particular ESSID as well; all we have to do is mention a specific
    channel and write to a file; in this case we are writing into a file called sniff:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们也可以捕获特定的ESSID；我们只需要提到一个特定的频道并写入一个文件；在这种情况下，我们正在写入一个名为sniff的文件：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_10_011.jpg)![How to do it...](img/image_10_012.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_10_011.jpg)![如何操作...](img/image_10_012.jpg)'
- en: These packets can then be viewed in the browser, Wireshark, or Excel based on
    the extension. Wireshark is used to open the CAP file, as shown in the following
    screenshot:![How to do it...](img/image_10_013.jpg)
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后可以在浏览器、Wireshark或Excel中查看这些数据包，具体取决于扩展名。Wireshark用于打开CAP文件，如下截图所示：![如何操作...](img/image_10_013.jpg)
- en: Once we are done capturing the packets, we can terminate it using the keyboard
    combination *Ctrl* + *C* and the files are saved with the CAP extension.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们捕获了数据包，就可以使用键盘组合*Ctrl* + *C*终止它，文件将以CAP扩展名保存。
- en: How it works...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `airodump-ng` command is a part of the `aircrack-ng` suite and it performs
    the task of dumping all sniffed packets on the network; these are saved with the
    `.cap` extension and can be opened in Wireshark.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`airodump-ng`命令是`aircrack-ng`套件的一部分，它执行将网络上所有嗅探到的数据包转储的任务；这些数据包以`.cap`扩展名保存，并可以在Wireshark中打开。'
- en: There's more...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: So far we've covered the basics of sniffing wireless packets. Beyond this we
    can start to understand how wireless encryptions are cracked.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经介绍了嗅探无线数据包的基础知识。除此之外，我们还可以开始了解如何破解无线加密。
- en: Cracking WEP encryption
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 破解WEP加密
- en: In this recipe, we are going to learn about WEP encryption cracking. **Wired
    Equivalent Privacy** (**WEP**) is a security protocol, specified in the IEEE **Wireless
    Fidelity** (**Wi-Fi**) standard, 802.11b, and designed to provide a **Wireless
    Local Area Network** (**WLAN**) with a level of security and privacy comparable
    to what is usually expected of a wired LAN. WEP works on RC4 encryption and has
    been widely used on the Internet as a part of HTTPS. The flaw here is not RC4
    but the way RC4 had been implemented. The problem was the reuse of IVs. For this
    exercise, we will be using a tool called **Wifite**. This tool is used to attack
    multiple WEP-, WPA-, and WPS-encrypted networks in a row. This tool is customizable
    and can be automated with only a few arguments. Wifite aims to be the "set it
    and forget it" wireless auditing tool.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习关于WEP加密破解。**有线等效隐私**（**WEP**）是一种安全协议，规定在IEEE **无线保真**（**Wi-Fi**）标准802.11b中，并旨在为**无线局域网**（**WLAN**）提供与通常预期的有线局域网相当的安全和隐私级别。WEP使用RC4加密，在Internet上作为HTTPS的一部分被广泛使用。这里的缺陷不是RC4，而是RC4的实现方式。问题在于IV的重用。在这个练习中，我们将使用一个名为**Wifite**的工具。这个工具用于攻击多个WEP、WPA和WPS加密的网络。这个工具是可定制的，并且只需几个参数就可以自动化。Wifite旨在成为“设置并忘记”的无线审计工具。
- en: Getting ready
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this activity, we will require wifite (preinstalled in Kali), an active
    and running wireless adaptor, and a wireless router running WEP encryption.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个活动，我们将需要wifite（预装在Kali中），一个活动和运行的无线适配器，以及一个运行WEP加密的无线路由器。
- en: How to do it...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To ensure that the wifite framework is updated, enter the following command:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要确保wifite框架已更新，请输入以下命令：
- en: '[PRE13]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To list all the available wireless networks, enter the following command:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要列出所有可用的无线网络，请输入以下命令：
- en: '[PRE14]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下截图所示：
- en: '![How to do it...](img/image_10_014.jpg)![How to do it...](img/image_10_015.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_10_014.jpg)![如何操作...](img/image_10_015.jpg)'
- en: With this, one can have a look of all the wireless devices available in the
    vicinity. Use *Ctrl* + *C* to break out of the script.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过这个命令，可以查看附近所有可用的无线设备。使用*Ctrl* + *C*来中断脚本。
- en: 'Use the following command to start Wifite again:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令再次启动Wifite：
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下截图所示：
- en: '![How to do it...](img/image_10_016.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_10_016.jpg)'
- en: 'As we can see, the command has listed all the detected wireless networks with
    their ESSID, BSSID, and more. Keep in mind the number corresponding to the target
    ID. Now we should break out of the listing mode and enter the following keyboard
    combination:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如我们所看到的，该命令已列出了所有检测到的无线网络及其ESSID、BSSID等。记住与目标ID对应的数字。现在我们应该退出列表模式，并输入以下键盘组合：
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下截图所示：
- en: '![How to do it...](img/image_10_017.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_10_017.jpg)'
- en: Once we hit the *Ctrl* + *C* combination, it prompts us to provide the target
    number. Once this is done wifite will automatically start working on WEP cracking
    and give you the password.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们按下*Ctrl* + *C*组合，它会提示我们提供目标编号。完成后，wifite将自动开始进行WEP破解并给出密码。
- en: How it works...
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In the background, what the framework does initially is put the wireless adaptor
    into monitor mode using the `airmon-ng` command, a part of the `aircrack-ng` suite,
    and start the enumeration list:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在后台，框架最初的操作是使用`airmon-ng`命令将无线适配器置于监视模式，这是`aircrack-ng`套件的一部分，并开始枚举列表：
- en: '`wifite -upgrade`: This command upgrades the wifite framework to the latest
    version'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wifite -upgrade`：此命令将wifite框架升级到最新版本'
- en: '`wifite -showb`: This command lists all the available wireless networks detected
    over the network'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wifite -showb`：此命令列出网络中检测到的所有可用无线网络'
- en: 'The details of how WEP cracking works are as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: WEP破解的工作原理如下：
- en: WEP prepares a keyschedule (seed); this is a concatenation of the user's shared
    secret key with a random-generated 24-bit initialization vector (IV). The IV increases
    the life of the secret key because the station can change the IV for each frame
    transmission. WEP then sends that output as a resulting "seed" to a pseudo-random
    number generator that produces a keystream. The length of this keystream is equal
    to the length of the frame's payload plus a 32-bit (**Integrity Check Value**
    (**ICV**)).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: WEP准备密钥计划（种子）；这是用户共享的秘密密钥与随机生成的24位初始化向量（IV）的连接。 IV增加了秘密密钥的寿命，因为站点可以为每个帧传输更改IV。然后，WEP将该输出作为生成密钥流的伪随机数生成器的结果“种子”发送。这个密钥流的长度等于帧有效负载的长度加上32位（**完整性检查值**（**ICV**））。
- en: The reason WEP failed is because the IVs were short and in clear text; the 24-bit
    field keystream generated by RC4 is relatively small. As the IV's are static and
    the stream of IV is short ,hence they are reused. There has been no standard as
    to how the IV has to be set or changed; there are possible scenarios where wireless
    adapters from the same vendors end up having the same IV sequences.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: WEP失败的原因是IV太短且以明文形式存在；RC4生成的24位字段密钥流相对较小。由于IV是静态的且IV流很短，因此它们被重复使用。关于IV的设置或更改没有标准；可能存在同一供应商的无线适配器最终具有相同IV序列的情况。
- en: An attacker can keep sniffing data and collect all the IVs available and then
    successfully crack the password. For more information, visit [http://www.isaac.cs.berkeley.edu/isaac/wep-faq.html](http://www.isaac.cs.berkeley.edu/isaac/wep-faq.html)
    .
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以继续嗅探数据并收集所有可用的IV，然后成功破解密码。更多信息，请访问[http://www.isaac.cs.berkeley.edu/isaac/wep-faq.html](http://www.isaac.cs.berkeley.edu/isaac/wep-faq.html)。
- en: There's more...
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We can use the `all` feature when wifite prompts us to select a network; however,
    you should keep in mind your country's IT and cyber laws to avoid doing anything
    illegal.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当wifite提示我们选择一个网络时，我们可以使用“all”功能；然而，你应该牢记你所在国家的IT和网络安全法律，以避免做任何非法的事情。
- en: Cracking WPA/WPA2 encryption
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 破解WPA/WPA2加密
- en: In this recipe, we are going to see how attackers break WPA2 encryption. WPA
    Wi-Fi protected access is the successor to WEP encryption after it was realized
    that WEP encryption failed. In WPA2-PSK we force the victim into multiple authentication
    handshakes with the wireless router and capture all the traffic as the handshakes
    contain the pre-shared key. Once we gain a substantial amount of handshakes, we
    try dictionary-based password guessing against the captured packets to see if
    we can successfully guess the password. In this recipe, we are going to see how
    WPA/WPA2 can be cracked.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将看到攻击者如何破解WPA2加密。WPA Wi-Fi保护访问是WEP加密之后的继任者，因为WEP加密失败。在WPA2-PSK中，我们强制受害者与无线路由器进行多次认证握手，并捕获所有流量，因为握手包含预共享密钥。一旦我们获得了大量的握手，我们尝试基于字典的密码猜测来对捕获的数据包进行猜测，以查看我们是否能成功猜出密码。在这个食谱中，我们将看到WPA/WPA2如何被破解。
- en: Getting ready
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this we are going to rely exclusively on the `aircrack-ng` suite; since
    it is pre-built in Kali we don't need to configure much. One other thing we require
    is a wireless router with WPA/WPA2 encryption. Let us begin.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将完全依赖于`aircrack-ng`套件；因为它在Kali中预先构建，我们不需要进行太多配置。我们还需要一个使用WPA/WPA2加密的无线路由器。让我们开始吧。
- en: How to do it...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'First we will switch our wireless device to monitor mode using the following
    command:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将使用以下命令将我们的无线设备切换到监视模式：
- en: '[PRE17]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can list all available wireless networks using the following command:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令列出所有可用的无线网络：
- en: '[PRE18]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_10_018.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_10_018.jpg)'
- en: 'Now that we have a list of available wireless networks and our network BSSIDs
    and ESSID available, we can start capturing the packets dedicated to that channel
    only:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经有了可用无线网络的列表和我们的网络BSSID和ESSID，我们可以开始捕获专门针对该信道的数据包：
- en: '[PRE19]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_10_019.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_10_019.jpg)'
- en: 'Now we will have to de-authenticate an existing client to capture their handshake
    request to the wireless router as it will contain the authentication creds. Only
    during deauth will we be able to successfully capture the encrypted password:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将不得不对现有客户端进行去认证，以捕获他们对无线路由器的握手请求，因为它将包含认证凭据。只有在去认证期间，我们才能成功捕获加密密码：
- en: '[PRE20]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_10_020.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_10_020.jpg)'
- en: Now the authenticated user will be forced to re-authenticate almost 1,000 times,
    after which, if we look at our `airodump-ng` in the top-right corner, we will
    find the WPA handshake, which means we have been successful in capturing the traffic.
    We can now terminate the dump by pressing *Ctrl* + *C*. The more authentication
    packets, the better our chances of cracking the passkey.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在经过认证的用户将被迫重新认证近1000次，之后，如果我们在右上角查看我们的`airodump-ng`，我们将找到WPA握手，这意味着我们成功捕获了流量。我们现在可以通过按*Ctrl*
    + *C*来终止转储。认证数据包越多，我们破解密码的机会就越大。
- en: 'We will now commence with the WPA cracking on the dumped file. We need to note
    that the file name gets saved in multiple extensions and gets appended by `-01`
    based on iteration numbers; `rockyou.txt` is a dictionary of words containing
    popular passwords and alphanumeric combinations that will be used against the
    capture file to guess the password:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将开始对转储文件进行WPA破解。我们需要注意文件名以多个扩展名保存，并根据迭代号添加了“-01”；`rockyou.txt`是一个包含常用密码和字母数字组合的字典，将用于对捕获文件进行猜测密码：
- en: '[PRE21]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_10_021.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_10_021.jpg)'
- en: We have successfully managed to decrypt the password.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已成功解密密码。
- en: How it works...
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let us understand the commands of the preceding recipe:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解前面食谱的命令：
- en: '`airmon-ng start wlan0`: This starts the wireless adaptor and sets it to monitor
    mode; monitor mode is essential for injecting and sniffing packets over the network'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`airmon-ng start wlan0`：这将启动无线适配器并将其设置为监视模式；监视模式对于在网络上注入和嗅探数据包是必不可少的'
- en: '`airodump-ng wlan0mon`: This command lists the wireless networks available
    whose packets we can capture'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`airodump-ng wlan0mon`：此命令列出了可用的无线网络，我们可以捕获其数据包'
- en: '[PRE22]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Following is the explanation for the command:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该命令的解释：
- en: '`--bssid`: This is the MAC address of the router, which is the station that
    supplies the wireless network'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--bssid`：这是路由器的MAC地址，是提供无线网络的站点'
- en: '[PRE23]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Following is the explanation for the command:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该命令的解释：
- en: '`--deauth`: This command sends a `RESET` packet to authenticated clients so
    that when they try to re-authenticate; the handshakes are captured for us to crack.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--deauth`：此命令向经过身份验证的客户端发送`RESET`数据包，以便当它们尝试重新认证时，我们可以捕获握手数据以进行破解。'
- en: The `Aireplay-ng`, `airodump-ng`, and `airmon-ng` commands are all a part of
    aircrack.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`Aireplay-ng`，`airodump-ng`和`airmon-ng`命令都是aircrack的一部分。'
- en: There's more...
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This method is basically regarded as brute force, which is the only way right
    now through which cracking WPA is possible. The routers that support WPS can also
    be cracked. In the next recipe, we will look at how WPS can be cracked.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法基本上被视为暴力破解，这是目前破解WPA的唯一方法。支持WPS的路由器也可以被破解。在下一个步骤中，我们将看看如何破解WPS。
- en: Cracking WPS
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 破解WPS
- en: '**WPS** stands for **Wi-Fi Protected Setup**. This was introduced in 2006 and
    the main purpose of WPS was to ease the process of adding new devices to the network;
    there was no need to remember long WPA or WEP passphrases. However, the security
    of WPS was short-lived; in 2011 a major security flaw was revealed that affected
    wireless routers that supported WPS.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**WPS**代表**Wi-Fi Protected Setup**。这是在2006年引入的，WPS的主要目的是简化将新设备添加到网络的过程；不需要记住长长的WPA或WEP密码。然而，WPS的安全性很快就消失了；2011年揭示了一个影响支持WPS的无线路由器的重大安全漏洞。'
- en: Getting ready
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we are going to use a tool called **Reaver**. It is an open
    source WPS cracking tool preinstalled in Kali Linux. Reaver performs a brute force
    attack on the WPS pin number. Once we get the WPS PIN, the WPA PSK is recovered.
    For this exercise we will require a wireless router that has the WPS feature enabled.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个步骤，我们将使用一个名为**Reaver**的工具。这是一个在Kali Linux中预安装的开源WPS破解工具。Reaver对WPS PIN号进行暴力破解。一旦获得WPS
    PIN，就可以恢复WPA PSK。对于这个练习，我们需要一个启用了WPS功能的无线路由器。
- en: How to do it...
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To scan for WPS enabled routers there is a package that comes with Reaver called
    `wash`; enter the following command to list the WPS-enabled device. Note that
    monitor mode is required to see the Beacon packets, understand whether the AP
    supports WPS, and tell whether WPS access is locked. This helps us in understand
    if the attack is possible or not:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要扫描启用了WPS的路由器，有一个与Reaver一起提供的名为`wash`的软件包；输入以下命令以列出启用WPS的设备。请注意，需要监视模式来查看信标数据包，了解AP是否支持WPS，并确定WPS访问是否被锁定。这有助于我们了解攻击是否可能：
- en: '[PRE24]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_10_022.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_10_022.jpg)'
- en: 'If case a user is getting an error like the one below, enter the following
    command:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果用户出现以下错误，输入以下命令：
- en: '[PRE25]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_10_023.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_10_023.jpg)'
- en: 'We use the `-C` command to ignore **FCS** (**Frame Check Sequence**) errors.
    Once we get the AP''s BSSID we will use the `reaver` command to attempt a WPS
    attack using the Pixie Dust method:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`-C`命令来忽略**FCS**（**Frame Check Sequence**）错误。一旦获得AP的BSSID，我们将使用`reaver`命令尝试使用Pixie
    Dust方法进行WPS攻击：
- en: '[PRE26]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_10_024.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_10_024.jpg)'
- en: The network name is mentioned if the wireless device contains spaces. The Reaver
    starts the Pixie Dust attack to bruteforce the PINs and the approximate time is
    5 to 10 minutes. **PixieWPS** is a tool used for the offline brute forcing of
    WPS pins, while exploiting the low or non-existing entropy of some wireless access
    points. If we run a non-Pixie Dust attack, the time may escalate to 5 or 6 hours:![How
    to do it...](img/image_10_025.jpg)
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果无线设备包含空格，则会提到网络名称。Reaver开始Pixie Dust攻击以暴力破解PIN，并且大约需要5到10分钟。**PixieWPS**是一种用于离线暴力破解WPS
    PIN的工具，同时利用了一些无线接入点的低或不存在的熵。如果我们运行非Pixie Dust攻击，时间可能会升至5或6小时：![如何操作...](img/image_10_025.jpg)
- en: How it works...
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Let''s dive through the commands and what they do:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解命令及其功能：
- en: '`wash -i wlan0mon`: This command scans for all the devices with WPS enabled'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wash -i wlan0mon`：此命令扫描所有启用WPS的设备。'
- en: '`wash -i wlan0mon -C`: The `-C` command ignores FCS packets'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wash -i wlan0mon -C`：`-C`命令忽略FCS数据包'
- en: '`reaver -i wlan0mon -c X -b xx:xx:xx:xx:xx:xx -K x -vv`'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reaver -i wlan0mon -c X -b xx:xx:xx:xx:xx:xx -K x -vv`'
- en: '`-i`: This specifies interaction with the specified interface'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-i`：这指定与指定接口的交互'
- en: '`-b`: This specifies using the BSSID'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-b`：这指定使用BSSID'
- en: '`-K (x)`: `X` is the numeric type, `K` is the parameter to set Pixie Dust'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-K（x）`：`X`是数字类型，`K`是设置Pixie Dust的参数'
- en: '`-c`: The specifies the channel on which the network is running'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-c`：指定网络运行的信道'
- en: '`-vv`: This shows us more non-critical information about the process to gain
    a better understanding of what the script is doing'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-vv`：这会显示有关脚本正在执行的更多非关键信息，以更好地理解过程'
- en: There's more...
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: PixieWPS is a tool used for offline brute-forcing of WPS pins, while exploiting
    the low or non-existing entropy of some wireless access points, and is also known
    as the Pixie Dust attack; it was discovered by Dominique Bongard. The PixieWPS
    tool (developed by wiire), was born out of Kali forums.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: PixieWPS是一种用于离线暴力破解WPS PIN的工具，同时利用了一些无线接入点的低或不存在的熵，也被称为Pixie Dust攻击；这是Dominique
    Bongard发现的。PixieWPS工具（由wiire开发）诞生于Kali论坛。
- en: In the next recipe, we are going to see how denial-of-service attacks take place
    on networks.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个步骤中，我们将看到拒绝服务攻击是如何在网络上发生的。
- en: Denial-of-service attacks
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拒绝服务攻击
- en: One of the most dominant attacks is a denial-of-service attack, where the entire
    wireless network can be disrupted; in this attack legitimate users will not get
    access to the network. Wireless networks are easily prone to such attacks. Since
    the identification of a user is based on the Mac address it becomes very difficult
    to track the source of this activity. There are a few ways in which this happens
    such as by spoofing a fake source address, or requesting configuration changes
    by replicating the router. A few devices also respond to DoS attacks by completely
    shutting down the network. One resort is to spam or flood the wireless network
    with junk packets or keep sending Deauth packets to all the users on the network.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 最主要的攻击之一是拒绝服务攻击，整个无线网络都可以被破坏；在这种攻击中，合法用户将无法访问网络。无线网络很容易受到这种攻击。由于用户的识别是基于Mac地址的，因此很难追踪这种活动的来源。这种情况发生的几种方式包括伪造假的源地址，或者通过复制路由器请求配置更改。一些设备也会通过完全关闭网络来响应DoS攻击。一种方法是向无线网络发送垃圾数据包或持续向网络上的所有用户发送Deauth数据包。
- en: In this recipe, we are going to see how DoS attacks take place.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将看到DoS攻击是如何发生的。
- en: Getting ready
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will need a user who is actively browsing the Internet or network and on
    the other end we will have our Kali Linux machine and the wireless adaptor connected
    to it.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个正在积极浏览互联网或网络的用户，另一端我们将有我们的Kali Linux机器和连接到它的无线适配器。
- en: How to do it...
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'One of the simplest ways to execute a DoS attack is the Deauth attack; here
    we will use `aireplay` to perform a Deauth attack over a network via the following
    command:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行DoS攻击最简单的方法之一是Deauth攻击；在这里，我们将使用`aireplay`通过以下命令对网络执行Deauth攻击：
- en: '[PRE27]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_10_026.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_10_026.jpg)'
- en: 'Also there are a few payloads available in Websploit; one is called Wi-Fi jammer.
    Use the following command in the Kali terminal to execute this:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Websploit中还有一些有效载荷；其中一个称为Wi-Fi干扰器。在Kali终端中使用以下命令执行：
- en: '[PRE28]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![How to do it...](img/image_10_027.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/image_10_027.jpg)'
- en: And the connection with the `bssid` is rendered inaccessible:![How to do it...](img/image_10_028.jpg)
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与`bssid`的连接被渲染为不可访问：![操作步骤...](img/image_10_028.jpg)
- en: How it works...
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Let us understand the commands that have been used in this recipe:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解在这个教程中使用的命令：
- en: '`aireplay-ng --deauth 100 -a (BSSID) -c wlan0mon`: Here, the `--deauth` command
    launches a `deauth` request followed by `100`, which specifies that the `deauth`
    request is sent 100 times.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aireplay-ng --deauth 100 -a (BSSID) -c wlan0mon`：这里，`--deauth`命令启动一个`deauth`请求，后跟`100`，指定`deauth`请求发送100次。'
- en: If the attacker wants to keep sending the Deauth continuously and never stop,
    one can use the  `--deauth 0` to send never-ending `deauth` requests to the target.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 如果攻击者想要持续发送Deauth并且永不停止，可以使用`--deauth 0`向目标发送无休止的`deauth`请求。
- en: '`websploit`: This initializes the Websploit framework'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`websploit`：这将初始化Websploit框架'
- en: '`use wifi`/`wifi_jammer`: This command will load the jammer module'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用wifi/ wifi_jammer：这个命令将加载干扰器模块
- en: '`set bssid xx:xx:xx:xx:xx:xx`: Where `xx:xx:xx:xx:xx:xx` will be the `bssid`;
    the same applies to `essid`'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set bssid xx:xx:xx:xx:xx:xx`：其中`xx:xx:xx:xx:xx:xx`将是`bssid`；对`essid`也是一样的'
- en: '`set interface wlanx`: Where `wlanx` will be the interface our adapter is connected
    on'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置接口wlanx：`wlanx`将是我们的适配器连接的接口
- en: '`run`: This executes the script and launches the attack'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`run`：这将执行脚本并启动攻击'
- en: There's more...
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Wireless attacks are very difficult to spot; the best one can do is to have
    preventive and hardening measures in place. SANS has developed a very good checklist
    that discusses the hardening of wireless networks. This can be found at [https://www.sans.org/score/checklists/wireless](https://www.sans.org/score/checklists/wireless)
    .
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 无线攻击很难被发现；最好的方法就是采取预防和加固措施。SANS已经制定了一个非常好的清单，讨论了无线网络的加固措施。可以在[https://www.sans.org/score/checklists/wireless](https://www.sans.org/score/checklists/wireless)找到。
- en: There are others tools that provide the above functionalities for wireless attacks.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他工具可以提供无线攻击的上述功能。
- en: 'Also, here is a an explanation for readers having trouble understanding BSSID,
    ESSID, and monitor mode:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 对于理解BSSID、ESSID和监视模式有困难的读者，这里有一个解释：
- en: '**BSSID**: This is the Mac address of the access point; BSSID stands for Base
    Service Station ID.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BSSID**：这是接入点的Mac地址；BSSID代表基础服务站ID。'
- en: '**ESSID**: This is the name of the WLAN network, the readable name that the
    user sees when they connect to the WLAN network.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ESSID**：这是WLAN网络的名称，用户连接到WLAN网络时看到的可读名称。'
- en: '**Monitor mode**: This allows a wireless network interface to monitor all the
    traffic over the wireless network, be it from client to AP, AP to client, or AP
    to client broadcasts. Monitor mode is used for packet analysis, which the majority
    of the tools mentioned above make use of.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监视模式**：这允许无线网络接口监视无线网络上的所有流量，无论是从客户端到AP，AP到客户端，还是AP到客户端的广播。监视模式用于数据包分析，上面提到的大多数工具都使用它。'
- en: '**AP** stands for the access point. It is also regarded as the wireless device
    that is used to connect the clients; a wireless router is an access point. An
    attacker can create a fake access point and can manipulate users to connect to
    it.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '**AP**代表接入点。它也被视为用于连接客户端的无线设备；无线路由器就是一个接入点。攻击者可以创建一个虚假的接入点，并可以操纵用户连接到它。'
- en: '**Beacon frame** is a management frame in wireless standard; it contains information
    about the network, and they are periodically transmitted to announce the presence
    of a WLAN network.'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '**Beacon frame**是无线标准中的管理帧；它包含有关网络的信息，并定期传输以宣布WLAN网络的存在。'
- en: This brings us to the end of the wireless testing chapter.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是无线测试章节的结束。
